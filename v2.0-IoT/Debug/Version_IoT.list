
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d704  080001e4  080001e4  000011e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000032c  0800d8e8  0800d8e8  0000e8e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dc14  0800dc14  0000ffac  2**0
                  CONTENTS
  4 .ARM          00000008  0800dc14  0800dc14  0000ec14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dc1c  0800dc1c  0000ffac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dc1c  0800dc1c  0000ec1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dc20  0800dc20  0000ec20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000fac  20000000  0800dc24  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b90  20000fac  0800ebd0  0000ffac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b3c  0800ebd0  00010b3c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000ffac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018c77  00000000  00000000  0000ffd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035f7  00000000  00000000  00028c4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e0  00000000  00000000  0002c248  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ea8  00000000  00000000  0002d528  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c8a4  00000000  00000000  0002e3d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c895  00000000  00000000  0004ac74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a041c  00000000  00000000  00067509  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00107925  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005304  00000000  00000000  00107968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0010cc6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	@ (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	@ (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000fac 	.word	0x20000fac
 8000200:	00000000 	.word	0x00000000
 8000204:	0800d8d0 	.word	0x0800d8d0

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	@ (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	@ (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	@ (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000fb0 	.word	0x20000fb0
 8000220:	0800d8d0 	.word	0x0800d8d0

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <eepromKontrol>:
#include "main.h"
#include "GlobalVariables.h"
#include "i2c-lcd.h"
#include "TextVariables.h"

void eepromKontrol() {
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800023a:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800023e:	9302      	str	r3, [sp, #8]
 8000240:	236e      	movs	r3, #110	@ 0x6e
 8000242:	9301      	str	r3, [sp, #4]
 8000244:	4b9c      	ldr	r3, [pc, #624]	@ (80004b8 <eepromKontrol+0x284>)
 8000246:	9300      	str	r3, [sp, #0]
 8000248:	236e      	movs	r3, #110	@ 0x6e
 800024a:	2200      	movs	r2, #0
 800024c:	21a0      	movs	r1, #160	@ 0xa0
 800024e:	489b      	ldr	r0, [pc, #620]	@ (80004bc <eepromKontrol+0x288>)
 8000250:	f00a f9a0 	bl	800a594 <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8000254:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8000258:	f009 f818 	bl	800928c <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 800025c:	4b96      	ldr	r3, [pc, #600]	@ (80004b8 <eepromKontrol+0x284>)
 800025e:	78da      	ldrb	r2, [r3, #3]
 8000260:	4b97      	ldr	r3, [pc, #604]	@ (80004c0 <eepromKontrol+0x28c>)
 8000262:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8000264:	4b94      	ldr	r3, [pc, #592]	@ (80004b8 <eepromKontrol+0x284>)
 8000266:	785a      	ldrb	r2, [r3, #1]
 8000268:	4b96      	ldr	r3, [pc, #600]	@ (80004c4 <eepromKontrol+0x290>)
 800026a:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 800026c:	4b92      	ldr	r3, [pc, #584]	@ (80004b8 <eepromKontrol+0x284>)
 800026e:	789a      	ldrb	r2, [r3, #2]
 8000270:	4b95      	ldr	r3, [pc, #596]	@ (80004c8 <eepromKontrol+0x294>)
 8000272:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8000274:	4b90      	ldr	r3, [pc, #576]	@ (80004b8 <eepromKontrol+0x284>)
 8000276:	791a      	ldrb	r2, [r3, #4]
 8000278:	4b94      	ldr	r3, [pc, #592]	@ (80004cc <eepromKontrol+0x298>)
 800027a:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 800027c:	4b8e      	ldr	r3, [pc, #568]	@ (80004b8 <eepromKontrol+0x284>)
 800027e:	795a      	ldrb	r2, [r3, #5]
 8000280:	4b93      	ldr	r3, [pc, #588]	@ (80004d0 <eepromKontrol+0x29c>)
 8000282:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8000284:	4b8c      	ldr	r3, [pc, #560]	@ (80004b8 <eepromKontrol+0x284>)
 8000286:	799a      	ldrb	r2, [r3, #6]
 8000288:	4b92      	ldr	r3, [pc, #584]	@ (80004d4 <eepromKontrol+0x2a0>)
 800028a:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 800028c:	4b8a      	ldr	r3, [pc, #552]	@ (80004b8 <eepromKontrol+0x284>)
 800028e:	79da      	ldrb	r2, [r3, #7]
 8000290:	4b91      	ldr	r3, [pc, #580]	@ (80004d8 <eepromKontrol+0x2a4>)
 8000292:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8000294:	4b88      	ldr	r3, [pc, #544]	@ (80004b8 <eepromKontrol+0x284>)
 8000296:	7a1a      	ldrb	r2, [r3, #8]
 8000298:	4b90      	ldr	r3, [pc, #576]	@ (80004dc <eepromKontrol+0x2a8>)
 800029a:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 800029c:	4b86      	ldr	r3, [pc, #536]	@ (80004b8 <eepromKontrol+0x284>)
 800029e:	7a5a      	ldrb	r2, [r3, #9]
 80002a0:	4b8f      	ldr	r3, [pc, #572]	@ (80004e0 <eepromKontrol+0x2ac>)
 80002a2:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 80002a4:	4b84      	ldr	r3, [pc, #528]	@ (80004b8 <eepromKontrol+0x284>)
 80002a6:	7a9a      	ldrb	r2, [r3, #10]
 80002a8:	4b8e      	ldr	r3, [pc, #568]	@ (80004e4 <eepromKontrol+0x2b0>)
 80002aa:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 80002ac:	4b82      	ldr	r3, [pc, #520]	@ (80004b8 <eepromKontrol+0x284>)
 80002ae:	7ada      	ldrb	r2, [r3, #11]
 80002b0:	4b8d      	ldr	r3, [pc, #564]	@ (80004e8 <eepromKontrol+0x2b4>)
 80002b2:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 80002b4:	4b80      	ldr	r3, [pc, #512]	@ (80004b8 <eepromKontrol+0x284>)
 80002b6:	7b1a      	ldrb	r2, [r3, #12]
 80002b8:	4b8c      	ldr	r3, [pc, #560]	@ (80004ec <eepromKontrol+0x2b8>)
 80002ba:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 80002bc:	4b7e      	ldr	r3, [pc, #504]	@ (80004b8 <eepromKontrol+0x284>)
 80002be:	7b5a      	ldrb	r2, [r3, #13]
 80002c0:	4b8b      	ldr	r3, [pc, #556]	@ (80004f0 <eepromKontrol+0x2bc>)
 80002c2:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 80002c4:	4b7c      	ldr	r3, [pc, #496]	@ (80004b8 <eepromKontrol+0x284>)
 80002c6:	7b9a      	ldrb	r2, [r3, #14]
 80002c8:	4b8a      	ldr	r3, [pc, #552]	@ (80004f4 <eepromKontrol+0x2c0>)
 80002ca:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 80002cc:	4b7a      	ldr	r3, [pc, #488]	@ (80004b8 <eepromKontrol+0x284>)
 80002ce:	7bda      	ldrb	r2, [r3, #15]
 80002d0:	4b89      	ldr	r3, [pc, #548]	@ (80004f8 <eepromKontrol+0x2c4>)
 80002d2:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 80002d4:	4b78      	ldr	r3, [pc, #480]	@ (80004b8 <eepromKontrol+0x284>)
 80002d6:	7c1a      	ldrb	r2, [r3, #16]
 80002d8:	4b88      	ldr	r3, [pc, #544]	@ (80004fc <eepromKontrol+0x2c8>)
 80002da:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 80002dc:	4b76      	ldr	r3, [pc, #472]	@ (80004b8 <eepromKontrol+0x284>)
 80002de:	7c5a      	ldrb	r2, [r3, #17]
 80002e0:	4b87      	ldr	r3, [pc, #540]	@ (8000500 <eepromKontrol+0x2cc>)
 80002e2:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 80002e4:	4b74      	ldr	r3, [pc, #464]	@ (80004b8 <eepromKontrol+0x284>)
 80002e6:	7c9a      	ldrb	r2, [r3, #18]
 80002e8:	4b86      	ldr	r3, [pc, #536]	@ (8000504 <eepromKontrol+0x2d0>)
 80002ea:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 80002ec:	4b72      	ldr	r3, [pc, #456]	@ (80004b8 <eepromKontrol+0x284>)
 80002ee:	7cda      	ldrb	r2, [r3, #19]
 80002f0:	4b85      	ldr	r3, [pc, #532]	@ (8000508 <eepromKontrol+0x2d4>)
 80002f2:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 80002f4:	4b70      	ldr	r3, [pc, #448]	@ (80004b8 <eepromKontrol+0x284>)
 80002f6:	7d1a      	ldrb	r2, [r3, #20]
 80002f8:	4b84      	ldr	r3, [pc, #528]	@ (800050c <eepromKontrol+0x2d8>)
 80002fa:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 80002fc:	4b6e      	ldr	r3, [pc, #440]	@ (80004b8 <eepromKontrol+0x284>)
 80002fe:	7d5a      	ldrb	r2, [r3, #21]
 8000300:	4b83      	ldr	r3, [pc, #524]	@ (8000510 <eepromKontrol+0x2dc>)
 8000302:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8000304:	4b6c      	ldr	r3, [pc, #432]	@ (80004b8 <eepromKontrol+0x284>)
 8000306:	7d9a      	ldrb	r2, [r3, #22]
 8000308:	4b82      	ldr	r3, [pc, #520]	@ (8000514 <eepromKontrol+0x2e0>)
 800030a:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 800030c:	4b6a      	ldr	r3, [pc, #424]	@ (80004b8 <eepromKontrol+0x284>)
 800030e:	7dda      	ldrb	r2, [r3, #23]
 8000310:	4b81      	ldr	r3, [pc, #516]	@ (8000518 <eepromKontrol+0x2e4>)
 8000312:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8000314:	4b68      	ldr	r3, [pc, #416]	@ (80004b8 <eepromKontrol+0x284>)
 8000316:	7e1a      	ldrb	r2, [r3, #24]
 8000318:	4b80      	ldr	r3, [pc, #512]	@ (800051c <eepromKontrol+0x2e8>)
 800031a:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 800031c:	4b66      	ldr	r3, [pc, #408]	@ (80004b8 <eepromKontrol+0x284>)
 800031e:	7e5a      	ldrb	r2, [r3, #25]
 8000320:	4b7f      	ldr	r3, [pc, #508]	@ (8000520 <eepromKontrol+0x2ec>)
 8000322:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8000324:	4b64      	ldr	r3, [pc, #400]	@ (80004b8 <eepromKontrol+0x284>)
 8000326:	7e9a      	ldrb	r2, [r3, #26]
 8000328:	4b7e      	ldr	r3, [pc, #504]	@ (8000524 <eepromKontrol+0x2f0>)
 800032a:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 800032c:	4b62      	ldr	r3, [pc, #392]	@ (80004b8 <eepromKontrol+0x284>)
 800032e:	7eda      	ldrb	r2, [r3, #27]
 8000330:	4b7d      	ldr	r3, [pc, #500]	@ (8000528 <eepromKontrol+0x2f4>)
 8000332:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8000334:	4b60      	ldr	r3, [pc, #384]	@ (80004b8 <eepromKontrol+0x284>)
 8000336:	7f1a      	ldrb	r2, [r3, #28]
 8000338:	4b7c      	ldr	r3, [pc, #496]	@ (800052c <eepromKontrol+0x2f8>)
 800033a:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 800033c:	4b5e      	ldr	r3, [pc, #376]	@ (80004b8 <eepromKontrol+0x284>)
 800033e:	7f5a      	ldrb	r2, [r3, #29]
 8000340:	4b7b      	ldr	r3, [pc, #492]	@ (8000530 <eepromKontrol+0x2fc>)
 8000342:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8000344:	4b5c      	ldr	r3, [pc, #368]	@ (80004b8 <eepromKontrol+0x284>)
 8000346:	7f9a      	ldrb	r2, [r3, #30]
 8000348:	4b7a      	ldr	r3, [pc, #488]	@ (8000534 <eepromKontrol+0x300>)
 800034a:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 800034c:	4b5a      	ldr	r3, [pc, #360]	@ (80004b8 <eepromKontrol+0x284>)
 800034e:	7fda      	ldrb	r2, [r3, #31]
 8000350:	4b79      	ldr	r3, [pc, #484]	@ (8000538 <eepromKontrol+0x304>)
 8000352:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8000354:	4b58      	ldr	r3, [pc, #352]	@ (80004b8 <eepromKontrol+0x284>)
 8000356:	f893 2020 	ldrb.w	r2, [r3, #32]
 800035a:	4b78      	ldr	r3, [pc, #480]	@ (800053c <eepromKontrol+0x308>)
 800035c:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 800035e:	4b56      	ldr	r3, [pc, #344]	@ (80004b8 <eepromKontrol+0x284>)
 8000360:	f893 2021 	ldrb.w	r2, [r3, #33]	@ 0x21
 8000364:	4b76      	ldr	r3, [pc, #472]	@ (8000540 <eepromKontrol+0x30c>)
 8000366:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8000368:	4b53      	ldr	r3, [pc, #332]	@ (80004b8 <eepromKontrol+0x284>)
 800036a:	f893 2030 	ldrb.w	r2, [r3, #48]	@ 0x30
 800036e:	4b75      	ldr	r3, [pc, #468]	@ (8000544 <eepromKontrol+0x310>)
 8000370:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8000372:	4b51      	ldr	r3, [pc, #324]	@ (80004b8 <eepromKontrol+0x284>)
 8000374:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8000378:	4b73      	ldr	r3, [pc, #460]	@ (8000548 <eepromKontrol+0x314>)
 800037a:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 800037c:	4b4e      	ldr	r3, [pc, #312]	@ (80004b8 <eepromKontrol+0x284>)
 800037e:	f893 2023 	ldrb.w	r2, [r3, #35]	@ 0x23
 8000382:	4b72      	ldr	r3, [pc, #456]	@ (800054c <eepromKontrol+0x318>)
 8000384:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8000386:	4b4c      	ldr	r3, [pc, #304]	@ (80004b8 <eepromKontrol+0x284>)
 8000388:	f893 2024 	ldrb.w	r2, [r3, #36]	@ 0x24
 800038c:	4b70      	ldr	r3, [pc, #448]	@ (8000550 <eepromKontrol+0x31c>)
 800038e:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8000390:	4b49      	ldr	r3, [pc, #292]	@ (80004b8 <eepromKontrol+0x284>)
 8000392:	f893 2026 	ldrb.w	r2, [r3, #38]	@ 0x26
 8000396:	4b6f      	ldr	r3, [pc, #444]	@ (8000554 <eepromKontrol+0x320>)
 8000398:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 800039a:	4b47      	ldr	r3, [pc, #284]	@ (80004b8 <eepromKontrol+0x284>)
 800039c:	f893 2027 	ldrb.w	r2, [r3, #39]	@ 0x27
 80003a0:	4b6d      	ldr	r3, [pc, #436]	@ (8000558 <eepromKontrol+0x324>)
 80003a2:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 80003a4:	4b44      	ldr	r3, [pc, #272]	@ (80004b8 <eepromKontrol+0x284>)
 80003a6:	f893 2028 	ldrb.w	r2, [r3, #40]	@ 0x28
 80003aa:	4b6c      	ldr	r3, [pc, #432]	@ (800055c <eepromKontrol+0x328>)
 80003ac:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 80003ae:	4b42      	ldr	r3, [pc, #264]	@ (80004b8 <eepromKontrol+0x284>)
 80003b0:	f893 2029 	ldrb.w	r2, [r3, #41]	@ 0x29
 80003b4:	4b6a      	ldr	r3, [pc, #424]	@ (8000560 <eepromKontrol+0x32c>)
 80003b6:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 80003b8:	4b3f      	ldr	r3, [pc, #252]	@ (80004b8 <eepromKontrol+0x284>)
 80003ba:	f893 202a 	ldrb.w	r2, [r3, #42]	@ 0x2a
 80003be:	4b69      	ldr	r3, [pc, #420]	@ (8000564 <eepromKontrol+0x330>)
 80003c0:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 80003c2:	4b3d      	ldr	r3, [pc, #244]	@ (80004b8 <eepromKontrol+0x284>)
 80003c4:	f893 202b 	ldrb.w	r2, [r3, #43]	@ 0x2b
 80003c8:	4b67      	ldr	r3, [pc, #412]	@ (8000568 <eepromKontrol+0x334>)
 80003ca:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 80003cc:	4b3a      	ldr	r3, [pc, #232]	@ (80004b8 <eepromKontrol+0x284>)
 80003ce:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80003d2:	4b66      	ldr	r3, [pc, #408]	@ (800056c <eepromKontrol+0x338>)
 80003d4:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 80003d6:	4b38      	ldr	r3, [pc, #224]	@ (80004b8 <eepromKontrol+0x284>)
 80003d8:	f893 202d 	ldrb.w	r2, [r3, #45]	@ 0x2d
 80003dc:	4b64      	ldr	r3, [pc, #400]	@ (8000570 <eepromKontrol+0x33c>)
 80003de:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 80003e0:	4b35      	ldr	r3, [pc, #212]	@ (80004b8 <eepromKontrol+0x284>)
 80003e2:	f893 202e 	ldrb.w	r2, [r3, #46]	@ 0x2e
 80003e6:	4b63      	ldr	r3, [pc, #396]	@ (8000574 <eepromKontrol+0x340>)
 80003e8:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 80003ea:	4b33      	ldr	r3, [pc, #204]	@ (80004b8 <eepromKontrol+0x284>)
 80003ec:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80003f0:	4b61      	ldr	r3, [pc, #388]	@ (8000578 <eepromKontrol+0x344>)
 80003f2:	701a      	strb	r2, [r3, #0]

	setupCompleted = eepromData[104];
 80003f4:	4b30      	ldr	r3, [pc, #192]	@ (80004b8 <eepromKontrol+0x284>)
 80003f6:	f893 2068 	ldrb.w	r2, [r3, #104]	@ 0x68
 80003fa:	4b60      	ldr	r3, [pc, #384]	@ (800057c <eepromKontrol+0x348>)
 80003fc:	701a      	strb	r2, [r3, #0]

	if(calismaSayisi10000>9) {
 80003fe:	4b4f      	ldr	r3, [pc, #316]	@ (800053c <eepromKontrol+0x308>)
 8000400:	781b      	ldrb	r3, [r3, #0]
 8000402:	2b09      	cmp	r3, #9
 8000404:	d902      	bls.n	800040c <eepromKontrol+0x1d8>
	    calismaSayisi10000=0;
 8000406:	4b4d      	ldr	r3, [pc, #308]	@ (800053c <eepromKontrol+0x308>)
 8000408:	2200      	movs	r2, #0
 800040a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 800040c:	4b4a      	ldr	r3, [pc, #296]	@ (8000538 <eepromKontrol+0x304>)
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b09      	cmp	r3, #9
 8000412:	d902      	bls.n	800041a <eepromKontrol+0x1e6>
	    calismaSayisi1000=0;
 8000414:	4b48      	ldr	r3, [pc, #288]	@ (8000538 <eepromKontrol+0x304>)
 8000416:	2200      	movs	r2, #0
 8000418:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 800041a:	4b46      	ldr	r3, [pc, #280]	@ (8000534 <eepromKontrol+0x300>)
 800041c:	781b      	ldrb	r3, [r3, #0]
 800041e:	2b09      	cmp	r3, #9
 8000420:	d902      	bls.n	8000428 <eepromKontrol+0x1f4>
	    calismaSayisi100=0;
 8000422:	4b44      	ldr	r3, [pc, #272]	@ (8000534 <eepromKontrol+0x300>)
 8000424:	2200      	movs	r2, #0
 8000426:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8000428:	4b41      	ldr	r3, [pc, #260]	@ (8000530 <eepromKontrol+0x2fc>)
 800042a:	781b      	ldrb	r3, [r3, #0]
 800042c:	2b09      	cmp	r3, #9
 800042e:	d902      	bls.n	8000436 <eepromKontrol+0x202>
	    calismaSayisi10=0;
 8000430:	4b3f      	ldr	r3, [pc, #252]	@ (8000530 <eepromKontrol+0x2fc>)
 8000432:	2200      	movs	r2, #0
 8000434:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8000436:	4b3d      	ldr	r3, [pc, #244]	@ (800052c <eepromKontrol+0x2f8>)
 8000438:	781b      	ldrb	r3, [r3, #0]
 800043a:	2b09      	cmp	r3, #9
 800043c:	d902      	bls.n	8000444 <eepromKontrol+0x210>
	    calismaSayisi1=0;
 800043e:	4b3b      	ldr	r3, [pc, #236]	@ (800052c <eepromKontrol+0x2f8>)
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8000444:	4b1f      	ldr	r3, [pc, #124]	@ (80004c4 <eepromKontrol+0x290>)
 8000446:	781b      	ldrb	r3, [r3, #0]
 8000448:	2b01      	cmp	r3, #1
 800044a:	d902      	bls.n	8000452 <eepromKontrol+0x21e>
	    calismaSekli=0;
 800044c:	4b1d      	ldr	r3, [pc, #116]	@ (80004c4 <eepromKontrol+0x290>)
 800044e:	2200      	movs	r2, #0
 8000450:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8000452:	4b1d      	ldr	r3, [pc, #116]	@ (80004c8 <eepromKontrol+0x294>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b01      	cmp	r3, #1
 8000458:	d902      	bls.n	8000460 <eepromKontrol+0x22c>
	    emniyetCercevesi=1;
 800045a:	4b1b      	ldr	r3, [pc, #108]	@ (80004c8 <eepromKontrol+0x294>)
 800045c:	2201      	movs	r2, #1
 800045e:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8000460:	4b1a      	ldr	r3, [pc, #104]	@ (80004cc <eepromKontrol+0x298>)
 8000462:	781b      	ldrb	r3, [r3, #0]
 8000464:	2b01      	cmp	r3, #1
 8000466:	d902      	bls.n	800046e <eepromKontrol+0x23a>
	    yavaslamaLimit=0;
 8000468:	4b18      	ldr	r3, [pc, #96]	@ (80004cc <eepromKontrol+0x298>)
 800046a:	2200      	movs	r2, #0
 800046c:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 800046e:	4b18      	ldr	r3, [pc, #96]	@ (80004d0 <eepromKontrol+0x29c>)
 8000470:	781b      	ldrb	r3, [r3, #0]
 8000472:	2b01      	cmp	r3, #1
 8000474:	d902      	bls.n	800047c <eepromKontrol+0x248>
	    altLimit=1;
 8000476:	4b16      	ldr	r3, [pc, #88]	@ (80004d0 <eepromKontrol+0x29c>)
 8000478:	2201      	movs	r2, #1
 800047a:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 800047c:	4b15      	ldr	r3, [pc, #84]	@ (80004d4 <eepromKontrol+0x2a0>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b01      	cmp	r3, #1
 8000482:	d902      	bls.n	800048a <eepromKontrol+0x256>
	    basincSalteri=1;
 8000484:	4b13      	ldr	r3, [pc, #76]	@ (80004d4 <eepromKontrol+0x2a0>)
 8000486:	2201      	movs	r2, #1
 8000488:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 800048a:	4b13      	ldr	r3, [pc, #76]	@ (80004d8 <eepromKontrol+0x2a4>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b03      	cmp	r3, #3
 8000490:	d902      	bls.n	8000498 <eepromKontrol+0x264>
	    kapiSecimleri=3;
 8000492:	4b11      	ldr	r3, [pc, #68]	@ (80004d8 <eepromKontrol+0x2a4>)
 8000494:	2203      	movs	r2, #3
 8000496:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8000498:	4b2d      	ldr	r3, [pc, #180]	@ (8000550 <eepromKontrol+0x31c>)
 800049a:	781b      	ldrb	r3, [r3, #0]
 800049c:	2b01      	cmp	r3, #1
 800049e:	d902      	bls.n	80004a6 <eepromKontrol+0x272>
	    kapiAcTipi=0;
 80004a0:	4b2b      	ldr	r3, [pc, #172]	@ (8000550 <eepromKontrol+0x31c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 80004a6:	4b0d      	ldr	r3, [pc, #52]	@ (80004dc <eepromKontrol+0x2a8>)
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b02      	cmp	r3, #2
 80004ac:	d968      	bls.n	8000580 <eepromKontrol+0x34c>
	    kapi1Tip=1;
 80004ae:	4b0b      	ldr	r3, [pc, #44]	@ (80004dc <eepromKontrol+0x2a8>)
 80004b0:	2201      	movs	r2, #1
 80004b2:	701a      	strb	r2, [r3, #0]
 80004b4:	e064      	b.n	8000580 <eepromKontrol+0x34c>
 80004b6:	bf00      	nop
 80004b8:	20000fc8 	.word	0x20000fc8
 80004bc:	20001908 	.word	0x20001908
 80004c0:	20001075 	.word	0x20001075
 80004c4:	200010a1 	.word	0x200010a1
 80004c8:	200010a4 	.word	0x200010a4
 80004cc:	200010a5 	.word	0x200010a5
 80004d0:	200010a6 	.word	0x200010a6
 80004d4:	200010a7 	.word	0x200010a7
 80004d8:	200010a8 	.word	0x200010a8
 80004dc:	200010a9 	.word	0x200010a9
 80004e0:	200010b9 	.word	0x200010b9
 80004e4:	200010aa 	.word	0x200010aa
 80004e8:	200010ba 	.word	0x200010ba
 80004ec:	200010ab 	.word	0x200010ab
 80004f0:	200010bb 	.word	0x200010bb
 80004f4:	200010ae 	.word	0x200010ae
 80004f8:	200010af 	.word	0x200010af
 80004fc:	200010b0 	.word	0x200010b0
 8000500:	200010b1 	.word	0x200010b1
 8000504:	200010b2 	.word	0x200010b2
 8000508:	200010b3 	.word	0x200010b3
 800050c:	200010b4 	.word	0x200010b4
 8000510:	200010b5 	.word	0x200010b5
 8000514:	200010b6 	.word	0x200010b6
 8000518:	200010b7 	.word	0x200010b7
 800051c:	200010b8 	.word	0x200010b8
 8000520:	200010bc 	.word	0x200010bc
 8000524:	200010be 	.word	0x200010be
 8000528:	2000109c 	.word	0x2000109c
 800052c:	2000109d 	.word	0x2000109d
 8000530:	2000109e 	.word	0x2000109e
 8000534:	20000000 	.word	0x20000000
 8000538:	20000001 	.word	0x20000001
 800053c:	2000109f 	.word	0x2000109f
 8000540:	200010c1 	.word	0x200010c1
 8000544:	200010bf 	.word	0x200010bf
 8000548:	200010ad 	.word	0x200010ad
 800054c:	200010c0 	.word	0x200010c0
 8000550:	200010ac 	.word	0x200010ac
 8000554:	200010c2 	.word	0x200010c2
 8000558:	200010c3 	.word	0x200010c3
 800055c:	200010c4 	.word	0x200010c4
 8000560:	200010c5 	.word	0x200010c5
 8000564:	200010c6 	.word	0x200010c6
 8000568:	200010c7 	.word	0x200010c7
 800056c:	200010c8 	.word	0x200010c8
 8000570:	200010c9 	.word	0x200010c9
 8000574:	200010ca 	.word	0x200010ca
 8000578:	200010cb 	.word	0x200010cb
 800057c:	20001074 	.word	0x20001074
	}

	if(kapi1AcSure>5) {
 8000580:	4b59      	ldr	r3, [pc, #356]	@ (80006e8 <eepromKontrol+0x4b4>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b05      	cmp	r3, #5
 8000586:	d902      	bls.n	800058e <eepromKontrol+0x35a>
	    kapi1AcSure=5;
 8000588:	4b57      	ldr	r3, [pc, #348]	@ (80006e8 <eepromKontrol+0x4b4>)
 800058a:	2205      	movs	r2, #5
 800058c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800058e:	4b57      	ldr	r3, [pc, #348]	@ (80006ec <eepromKontrol+0x4b8>)
 8000590:	781b      	ldrb	r3, [r3, #0]
 8000592:	2b02      	cmp	r3, #2
 8000594:	d902      	bls.n	800059c <eepromKontrol+0x368>
	    kapi2Tip=1;
 8000596:	4b55      	ldr	r3, [pc, #340]	@ (80006ec <eepromKontrol+0x4b8>)
 8000598:	2201      	movs	r2, #1
 800059a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800059c:	4b54      	ldr	r3, [pc, #336]	@ (80006f0 <eepromKontrol+0x4bc>)
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	2b05      	cmp	r3, #5
 80005a2:	d902      	bls.n	80005aa <eepromKontrol+0x376>
	    kapi2AcSure=5;
 80005a4:	4b52      	ldr	r3, [pc, #328]	@ (80006f0 <eepromKontrol+0x4bc>)
 80005a6:	2205      	movs	r2, #5
 80005a8:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 80005aa:	4b52      	ldr	r3, [pc, #328]	@ (80006f4 <eepromKontrol+0x4c0>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b02      	cmp	r3, #2
 80005b0:	d902      	bls.n	80005b8 <eepromKontrol+0x384>
	    kapitablaTip=1;
 80005b2:	4b50      	ldr	r3, [pc, #320]	@ (80006f4 <eepromKontrol+0x4c0>)
 80005b4:	2201      	movs	r2, #1
 80005b6:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 80005b8:	4b4f      	ldr	r3, [pc, #316]	@ (80006f8 <eepromKontrol+0x4c4>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b02      	cmp	r3, #2
 80005be:	d902      	bls.n	80005c6 <eepromKontrol+0x392>
	    kapiTablaAcKonum=2;
 80005c0:	4b4d      	ldr	r3, [pc, #308]	@ (80006f8 <eepromKontrol+0x4c4>)
 80005c2:	2202      	movs	r2, #2
 80005c4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80005c6:	4b4d      	ldr	r3, [pc, #308]	@ (80006fc <eepromKontrol+0x4c8>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	2b05      	cmp	r3, #5
 80005cc:	d902      	bls.n	80005d4 <eepromKontrol+0x3a0>
	    kapiTablaAcSure=5;
 80005ce:	4b4b      	ldr	r3, [pc, #300]	@ (80006fc <eepromKontrol+0x4c8>)
 80005d0:	2205      	movs	r2, #5
 80005d2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80005d4:	4b4a      	ldr	r3, [pc, #296]	@ (8000700 <eepromKontrol+0x4cc>)
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	2b01      	cmp	r3, #1
 80005da:	d902      	bls.n	80005e2 <eepromKontrol+0x3ae>
	    yukariYavasLimit=0;
 80005dc:	4b48      	ldr	r3, [pc, #288]	@ (8000700 <eepromKontrol+0x4cc>)
 80005de:	2200      	movs	r2, #0
 80005e0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 80005e2:	4b48      	ldr	r3, [pc, #288]	@ (8000704 <eepromKontrol+0x4d0>)
 80005e4:	781b      	ldrb	r3, [r3, #0]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d902      	bls.n	80005f0 <eepromKontrol+0x3bc>
	    devirmeYuruyusSecim=0;
 80005ea:	4b46      	ldr	r3, [pc, #280]	@ (8000704 <eepromKontrol+0x4d0>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 80005f0:	4b45      	ldr	r3, [pc, #276]	@ (8000708 <eepromKontrol+0x4d4>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b01      	cmp	r3, #1
 80005f6:	d902      	bls.n	80005fe <eepromKontrol+0x3ca>
	    devirmeYukariIleriLimit=1;
 80005f8:	4b43      	ldr	r3, [pc, #268]	@ (8000708 <eepromKontrol+0x4d4>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 80005fe:	4b43      	ldr	r3, [pc, #268]	@ (800070c <eepromKontrol+0x4d8>)
 8000600:	781b      	ldrb	r3, [r3, #0]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d902      	bls.n	800060c <eepromKontrol+0x3d8>
	    devirmeAsagiGeriLimit=1;
 8000606:	4b41      	ldr	r3, [pc, #260]	@ (800070c <eepromKontrol+0x4d8>)
 8000608:	2201      	movs	r2, #1
 800060a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 800060c:	4b40      	ldr	r3, [pc, #256]	@ (8000710 <eepromKontrol+0x4dc>)
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d902      	bls.n	800061a <eepromKontrol+0x3e6>
	    devirmeSilindirTipi=0;
 8000614:	4b3e      	ldr	r3, [pc, #248]	@ (8000710 <eepromKontrol+0x4dc>)
 8000616:	2200      	movs	r2, #0
 8000618:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800061a:	4b3e      	ldr	r3, [pc, #248]	@ (8000714 <eepromKontrol+0x4e0>)
 800061c:	781b      	ldrb	r3, [r3, #0]
 800061e:	2b01      	cmp	r3, #1
 8000620:	d902      	bls.n	8000628 <eepromKontrol+0x3f4>
	    platformSilindirTipi=0;
 8000622:	4b3c      	ldr	r3, [pc, #240]	@ (8000714 <eepromKontrol+0x4e0>)
 8000624:	2200      	movs	r2, #0
 8000626:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8000628:	4b3b      	ldr	r3, [pc, #236]	@ (8000718 <eepromKontrol+0x4e4>)
 800062a:	781b      	ldrb	r3, [r3, #0]
 800062c:	2b05      	cmp	r3, #5
 800062e:	d902      	bls.n	8000636 <eepromKontrol+0x402>
	    yukariValfTmr=0;
 8000630:	4b39      	ldr	r3, [pc, #228]	@ (8000718 <eepromKontrol+0x4e4>)
 8000632:	2200      	movs	r2, #0
 8000634:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8000636:	4b39      	ldr	r3, [pc, #228]	@ (800071c <eepromKontrol+0x4e8>)
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	2b05      	cmp	r3, #5
 800063c:	d902      	bls.n	8000644 <eepromKontrol+0x410>
	    asagiValfTmr=0;
 800063e:	4b37      	ldr	r3, [pc, #220]	@ (800071c <eepromKontrol+0x4e8>)
 8000640:	2200      	movs	r2, #0
 8000642:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8000644:	4b36      	ldr	r3, [pc, #216]	@ (8000720 <eepromKontrol+0x4ec>)
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b05      	cmp	r3, #5
 800064a:	d902      	bls.n	8000652 <eepromKontrol+0x41e>
	    devirmeYukariIleriTmr=0;
 800064c:	4b34      	ldr	r3, [pc, #208]	@ (8000720 <eepromKontrol+0x4ec>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8000652:	4b34      	ldr	r3, [pc, #208]	@ (8000724 <eepromKontrol+0x4f0>)
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b05      	cmp	r3, #5
 8000658:	d902      	bls.n	8000660 <eepromKontrol+0x42c>
	    devirmeAsagiGeriTmr=0;
 800065a:	4b32      	ldr	r3, [pc, #200]	@ (8000724 <eepromKontrol+0x4f0>)
 800065c:	2200      	movs	r2, #0
 800065e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8000660:	4b31      	ldr	r3, [pc, #196]	@ (8000728 <eepromKontrol+0x4f4>)
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2bb4      	cmp	r3, #180	@ 0xb4
 8000666:	d902      	bls.n	800066e <eepromKontrol+0x43a>
	    makineCalismaTmr=60;
 8000668:	4b2f      	ldr	r3, [pc, #188]	@ (8000728 <eepromKontrol+0x4f4>)
 800066a:	223c      	movs	r2, #60	@ 0x3c
 800066c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 800066e:	4b2f      	ldr	r3, [pc, #188]	@ (800072c <eepromKontrol+0x4f8>)
 8000670:	781b      	ldrb	r3, [r3, #0]
 8000672:	2b01      	cmp	r3, #1
 8000674:	d902      	bls.n	800067c <eepromKontrol+0x448>
	    buzzer=0;
 8000676:	4b2d      	ldr	r3, [pc, #180]	@ (800072c <eepromKontrol+0x4f8>)
 8000678:	2200      	movs	r2, #0
 800067a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800067c:	4b2c      	ldr	r3, [pc, #176]	@ (8000730 <eepromKontrol+0x4fc>)
 800067e:	781b      	ldrb	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d902      	bls.n	800068a <eepromKontrol+0x456>
	    demoMode=0;
 8000684:	4b2a      	ldr	r3, [pc, #168]	@ (8000730 <eepromKontrol+0x4fc>)
 8000686:	2200      	movs	r2, #0
 8000688:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800068a:	4b2a      	ldr	r3, [pc, #168]	@ (8000734 <eepromKontrol+0x500>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	2b01      	cmp	r3, #1
 8000690:	d902      	bls.n	8000698 <eepromKontrol+0x464>
	    calismaSayModu=0;
 8000692:	4b28      	ldr	r3, [pc, #160]	@ (8000734 <eepromKontrol+0x500>)
 8000694:	2200      	movs	r2, #0
 8000696:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8000698:	4b27      	ldr	r3, [pc, #156]	@ (8000738 <eepromKontrol+0x504>)
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	2b01      	cmp	r3, #1
 800069e:	d902      	bls.n	80006a6 <eepromKontrol+0x472>
	    dilSecim=0;
 80006a0:	4b25      	ldr	r3, [pc, #148]	@ (8000738 <eepromKontrol+0x504>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 80006a6:	4b25      	ldr	r3, [pc, #148]	@ (800073c <eepromKontrol+0x508>)
 80006a8:	781b      	ldrb	r3, [r3, #0]
 80006aa:	2b01      	cmp	r3, #1
 80006ac:	d902      	bls.n	80006b4 <eepromKontrol+0x480>
		iotMode=0;
 80006ae:	4b23      	ldr	r3, [pc, #140]	@ (800073c <eepromKontrol+0x508>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	701a      	strb	r2, [r3, #0]
	}

	convertArrays(1);
 80006b4:	2001      	movs	r0, #1
 80006b6:	f000 f843 	bl	8000740 <convertArrays>
	HAL_Delay(250);
 80006ba:	20fa      	movs	r0, #250	@ 0xfa
 80006bc:	f008 fde6 	bl	800928c <HAL_Delay>

	convertArrays(2);
 80006c0:	2002      	movs	r0, #2
 80006c2:	f000 f83d 	bl	8000740 <convertArrays>
	HAL_Delay(250);
 80006c6:	20fa      	movs	r0, #250	@ 0xfa
 80006c8:	f008 fde0 	bl	800928c <HAL_Delay>

	convertArrays(3);
 80006cc:	2003      	movs	r0, #3
 80006ce:	f000 f837 	bl	8000740 <convertArrays>
	HAL_Delay(250);
 80006d2:	20fa      	movs	r0, #250	@ 0xfa
 80006d4:	f008 fdda 	bl	800928c <HAL_Delay>

	loadMenuTexts(dilSecim);
 80006d8:	4b17      	ldr	r3, [pc, #92]	@ (8000738 <eepromKontrol+0x504>)
 80006da:	781b      	ldrb	r3, [r3, #0]
 80006dc:	4618      	mov	r0, r3
 80006de:	f005 fc13 	bl	8005f08 <loadMenuTexts>
}
 80006e2:	bf00      	nop
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	200010b9 	.word	0x200010b9
 80006ec:	200010aa 	.word	0x200010aa
 80006f0:	200010ba 	.word	0x200010ba
 80006f4:	200010ab 	.word	0x200010ab
 80006f8:	200010ad 	.word	0x200010ad
 80006fc:	200010bb 	.word	0x200010bb
 8000700:	200010ae 	.word	0x200010ae
 8000704:	200010af 	.word	0x200010af
 8000708:	200010b0 	.word	0x200010b0
 800070c:	200010b1 	.word	0x200010b1
 8000710:	200010b2 	.word	0x200010b2
 8000714:	200010b3 	.word	0x200010b3
 8000718:	200010b4 	.word	0x200010b4
 800071c:	200010b5 	.word	0x200010b5
 8000720:	200010b6 	.word	0x200010b6
 8000724:	200010b7 	.word	0x200010b7
 8000728:	200010b8 	.word	0x200010b8
 800072c:	200010bc 	.word	0x200010bc
 8000730:	200010be 	.word	0x200010be
 8000734:	200010c0 	.word	0x200010c0
 8000738:	200010c1 	.word	0x200010c1
 800073c:	200010bf 	.word	0x200010bf

08000740 <convertArrays>:

void convertArrays(int state) {
 8000740:	b480      	push	{r7}
 8000742:	b08b      	sub	sp, #44	@ 0x2c
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	if(state == 1) {
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	2b01      	cmp	r3, #1
 800074c:	d11d      	bne.n	800078a <convertArrays+0x4a>
		int eepromVal = idStartPos;
 800074e:	4b34      	ldr	r3, [pc, #208]	@ (8000820 <convertArrays+0xe0>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	627b      	str	r3, [r7, #36]	@ 0x24
		int characterPos;

		for(int i=0; i<machineIDCharacterLimit; i++) {
 8000754:	2300      	movs	r3, #0
 8000756:	623b      	str	r3, [r7, #32]
 8000758:	e013      	b.n	8000782 <convertArrays+0x42>
			characterPos = eepromData[eepromVal];
 800075a:	4a32      	ldr	r2, [pc, #200]	@ (8000824 <convertArrays+0xe4>)
 800075c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800075e:	4413      	add	r3, r2
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	60fb      	str	r3, [r7, #12]
			machineID[i] = idCharactersArray[characterPos];
 8000764:	4a30      	ldr	r2, [pc, #192]	@ (8000828 <convertArrays+0xe8>)
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	4413      	add	r3, r2
 800076a:	7819      	ldrb	r1, [r3, #0]
 800076c:	4a2f      	ldr	r2, [pc, #188]	@ (800082c <convertArrays+0xec>)
 800076e:	6a3b      	ldr	r3, [r7, #32]
 8000770:	4413      	add	r3, r2
 8000772:	460a      	mov	r2, r1
 8000774:	701a      	strb	r2, [r3, #0]

			eepromVal++;
 8000776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000778:	3301      	adds	r3, #1
 800077a:	627b      	str	r3, [r7, #36]	@ 0x24
		for(int i=0; i<machineIDCharacterLimit; i++) {
 800077c:	6a3b      	ldr	r3, [r7, #32]
 800077e:	3301      	adds	r3, #1
 8000780:	623b      	str	r3, [r7, #32]
 8000782:	6a3b      	ldr	r3, [r7, #32]
 8000784:	2b0b      	cmp	r3, #11
 8000786:	dde8      	ble.n	800075a <convertArrays+0x1a>

				eepromVal++;
			}
		}
	}
}
 8000788:	e045      	b.n	8000816 <convertArrays+0xd6>
	} else if(state == 2) {
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	2b02      	cmp	r3, #2
 800078e:	d121      	bne.n	80007d4 <convertArrays+0x94>
		int eepromVal = ssidStartPos;
 8000790:	4b27      	ldr	r3, [pc, #156]	@ (8000830 <convertArrays+0xf0>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 8000796:	2300      	movs	r3, #0
 8000798:	61bb      	str	r3, [r7, #24]
 800079a:	e017      	b.n	80007cc <convertArrays+0x8c>
			if(eepromData[eepromVal] != 0) {
 800079c:	4a21      	ldr	r2, [pc, #132]	@ (8000824 <convertArrays+0xe4>)
 800079e:	69fb      	ldr	r3, [r7, #28]
 80007a0:	4413      	add	r3, r2
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d00e      	beq.n	80007c6 <convertArrays+0x86>
				wifiSSID[i] = charactersArray[eepromData[eepromVal]];
 80007a8:	4a1e      	ldr	r2, [pc, #120]	@ (8000824 <convertArrays+0xe4>)
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	4413      	add	r3, r2
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	461a      	mov	r2, r3
 80007b2:	4b20      	ldr	r3, [pc, #128]	@ (8000834 <convertArrays+0xf4>)
 80007b4:	5c99      	ldrb	r1, [r3, r2]
 80007b6:	4a20      	ldr	r2, [pc, #128]	@ (8000838 <convertArrays+0xf8>)
 80007b8:	69bb      	ldr	r3, [r7, #24]
 80007ba:	4413      	add	r3, r2
 80007bc:	460a      	mov	r2, r1
 80007be:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 80007c0:	69fb      	ldr	r3, [r7, #28]
 80007c2:	3301      	adds	r3, #1
 80007c4:	61fb      	str	r3, [r7, #28]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007c6:	69bb      	ldr	r3, [r7, #24]
 80007c8:	3301      	adds	r3, #1
 80007ca:	61bb      	str	r3, [r7, #24]
 80007cc:	69bb      	ldr	r3, [r7, #24]
 80007ce:	2b13      	cmp	r3, #19
 80007d0:	dde4      	ble.n	800079c <convertArrays+0x5c>
}
 80007d2:	e020      	b.n	8000816 <convertArrays+0xd6>
		int eepromVal = passStartPos;
 80007d4:	4b19      	ldr	r3, [pc, #100]	@ (800083c <convertArrays+0xfc>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 80007da:	2300      	movs	r3, #0
 80007dc:	613b      	str	r3, [r7, #16]
 80007de:	e017      	b.n	8000810 <convertArrays+0xd0>
			if(eepromData[eepromVal] != 0) {
 80007e0:	4a10      	ldr	r2, [pc, #64]	@ (8000824 <convertArrays+0xe4>)
 80007e2:	697b      	ldr	r3, [r7, #20]
 80007e4:	4413      	add	r3, r2
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d00e      	beq.n	800080a <convertArrays+0xca>
				wifiPass[i] = charactersArray[eepromData[eepromVal]];
 80007ec:	4a0d      	ldr	r2, [pc, #52]	@ (8000824 <convertArrays+0xe4>)
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	4413      	add	r3, r2
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	461a      	mov	r2, r3
 80007f6:	4b0f      	ldr	r3, [pc, #60]	@ (8000834 <convertArrays+0xf4>)
 80007f8:	5c99      	ldrb	r1, [r3, r2]
 80007fa:	4a11      	ldr	r2, [pc, #68]	@ (8000840 <convertArrays+0x100>)
 80007fc:	693b      	ldr	r3, [r7, #16]
 80007fe:	4413      	add	r3, r2
 8000800:	460a      	mov	r2, r1
 8000802:	701a      	strb	r2, [r3, #0]
				eepromVal++;
 8000804:	697b      	ldr	r3, [r7, #20]
 8000806:	3301      	adds	r3, #1
 8000808:	617b      	str	r3, [r7, #20]
		for(int i=0; i<wifiCharacterLimit; i++) {
 800080a:	693b      	ldr	r3, [r7, #16]
 800080c:	3301      	adds	r3, #1
 800080e:	613b      	str	r3, [r7, #16]
 8000810:	693b      	ldr	r3, [r7, #16]
 8000812:	2b13      	cmp	r3, #19
 8000814:	dde4      	ble.n	80007e0 <convertArrays+0xa0>
}
 8000816:	bf00      	nop
 8000818:	372c      	adds	r7, #44	@ 0x2c
 800081a:	46bd      	mov	sp, r7
 800081c:	bc80      	pop	{r7}
 800081e:	4770      	bx	lr
 8000820:	20000004 	.word	0x20000004
 8000824:	20000fc8 	.word	0x20000fc8
 8000828:	20000010 	.word	0x20000010
 800082c:	20001040 	.word	0x20001040
 8000830:	20000008 	.word	0x20000008
 8000834:	2000001c 	.word	0x2000001c
 8000838:	2000104c 	.word	0x2000104c
 800083c:	2000000c 	.word	0x2000000c
 8000840:	20001060 	.word	0x20001060

08000844 <sendMachineData>:
	sprintf(bufferTX, "%s", str);
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
	HAL_Delay(2000);
}

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *wifiSSID, const char *wifiPass, const char *machineData) {
 8000844:	b590      	push	{r4, r7, lr}
 8000846:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800084a:	af04      	add	r7, sp, #16
 800084c:	f507 7414 	add.w	r4, r7, #592	@ 0x250
 8000850:	f5a4 7411 	sub.w	r4, r4, #580	@ 0x244
 8000854:	6020      	str	r0, [r4, #0]
 8000856:	f507 7014 	add.w	r0, r7, #592	@ 0x250
 800085a:	f5a0 7012 	sub.w	r0, r0, #584	@ 0x248
 800085e:	6001      	str	r1, [r0, #0]
 8000860:	f507 7114 	add.w	r1, r7, #592	@ 0x250
 8000864:	f5a1 7113 	sub.w	r1, r1, #588	@ 0x24c
 8000868:	600a      	str	r2, [r1, #0]
 800086a:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 800086e:	f5a2 7214 	sub.w	r2, r2, #592	@ 0x250
 8000872:	6013      	str	r3, [r2, #0]
	char local_txA[500];
	char local_txB[50];
	int len;

	char subMachineID[13];
	strncpy(subMachineID, machineID, 12);
 8000874:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000878:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800087c:	f107 0014 	add.w	r0, r7, #20
 8000880:	220c      	movs	r2, #12
 8000882:	6819      	ldr	r1, [r3, #0]
 8000884:	f00c fc27 	bl	800d0d6 <strncpy>
	subMachineID[12] = '\0';
 8000888:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800088c:	f5a3 730f 	sub.w	r3, r3, #572	@ 0x23c
 8000890:	2200      	movs	r2, #0
 8000892:	731a      	strb	r2, [r3, #12]

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", mainServer);
 8000894:	4a35      	ldr	r2, [pc, #212]	@ (800096c <sendMachineData+0x128>)
 8000896:	4936      	ldr	r1, [pc, #216]	@ (8000970 <sendMachineData+0x12c>)
 8000898:	4836      	ldr	r0, [pc, #216]	@ (8000974 <sendMachineData+0x130>)
 800089a:	f00c fbab 	bl	800cff4 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 800089e:	4835      	ldr	r0, [pc, #212]	@ (8000974 <sendMachineData+0x130>)
 80008a0:	f7ff fcc0 	bl	8000224 <strlen>
 80008a4:	4603      	mov	r3, r0
 80008a6:	b29a      	uxth	r2, r3
 80008a8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80008ac:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80008b0:	4930      	ldr	r1, [pc, #192]	@ (8000974 <sendMachineData+0x130>)
 80008b2:	6818      	ldr	r0, [r3, #0]
 80008b4:	f00b fdb6 	bl	800c424 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 80008b8:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 80008bc:	f008 fce6 	bl	800928c <HAL_Delay>

	sprintf(local_txA,
 80008c0:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80008c4:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80008c8:	f107 0114 	add.w	r1, r7, #20
 80008cc:	f107 0058 	add.w	r0, r7, #88	@ 0x58
 80008d0:	4a29      	ldr	r2, [pc, #164]	@ (8000978 <sendMachineData+0x134>)
 80008d2:	9202      	str	r2, [sp, #8]
 80008d4:	f8d7 2260 	ldr.w	r2, [r7, #608]	@ 0x260
 80008d8:	9201      	str	r2, [sp, #4]
 80008da:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 80008de:	f5a2 7214 	sub.w	r2, r2, #592	@ 0x250
 80008e2:	6812      	ldr	r2, [r2, #0]
 80008e4:	9200      	str	r2, [sp, #0]
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	460a      	mov	r2, r1
 80008ea:	4924      	ldr	r1, [pc, #144]	@ (800097c <sendMachineData+0x138>)
 80008ec:	f00c fb82 	bl	800cff4 <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&wifiSSID=%s&wifiPass=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", subMachineID, wifiSSID, wifiPass, machineData, mainServerWithPort);
	len = strlen(local_txA);
 80008f0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff fc95 	bl	8000224 <strlen>
 80008fa:	4603      	mov	r3, r0
 80008fc:	f8c7 324c 	str.w	r3, [r7, #588]	@ 0x24c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 8000900:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000904:	f8d7 224c 	ldr.w	r2, [r7, #588]	@ 0x24c
 8000908:	491d      	ldr	r1, [pc, #116]	@ (8000980 <sendMachineData+0x13c>)
 800090a:	4618      	mov	r0, r3
 800090c:	f00c fb72 	bl	800cff4 <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000910:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff fc85 	bl	8000224 <strlen>
 800091a:	4603      	mov	r3, r0
 800091c:	b29a      	uxth	r2, r3
 800091e:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8000922:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8000926:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800092a:	6818      	ldr	r0, [r3, #0]
 800092c:	f00b fd7a 	bl	800c424 <HAL_UART_Transmit_IT>
	HAL_Delay(4000);
 8000930:	f44f 607a 	mov.w	r0, #4000	@ 0xfa0
 8000934:	f008 fcaa 	bl	800928c <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 8000938:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff fc71 	bl	8000224 <strlen>
 8000942:	4603      	mov	r3, r0
 8000944:	b29a      	uxth	r2, r3
 8000946:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 800094a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800094e:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8000952:	6818      	ldr	r0, [r3, #0]
 8000954:	f00b fd66 	bl	800c424 <HAL_UART_Transmit_IT>
	HAL_Delay(3000);
 8000958:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800095c:	f008 fc96 	bl	800928c <HAL_Delay>
}
 8000960:	bf00      	nop
 8000962:	f507 7715 	add.w	r7, r7, #596	@ 0x254
 8000966:	46bd      	mov	sp, r7
 8000968:	bd90      	pop	{r4, r7, pc}
 800096a:	bf00      	nop
 800096c:	0800d938 	.word	0x0800d938
 8000970:	0800d948 	.word	0x0800d948
 8000974:	20001104 	.word	0x20001104
 8000978:	0800d9dc 	.word	0x0800d9dc
 800097c:	0800d968 	.word	0x0800d968
 8000980:	0800d9f0 	.word	0x0800d9f0

08000984 <hata2EEPROM>:
#include "GlobalVariables.h"
#include "i2c-lcd.h"
#include "EEPROMProcess.h"
#include "TextVariables.h"

void hata2EEPROM(uint8_t hataKodu) {
 8000984:	b590      	push	{r4, r7, lr}
 8000986:	b089      	sub	sp, #36	@ 0x24
 8000988:	af04      	add	r7, sp, #16
 800098a:	4603      	mov	r3, r0
 800098c:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 800098e:	4b25      	ldr	r3, [pc, #148]	@ (8000a24 <hata2EEPROM+0xa0>)
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	1e5a      	subs	r2, r3, #1
 8000994:	4b24      	ldr	r3, [pc, #144]	@ (8000a28 <hata2EEPROM+0xa4>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4413      	add	r3, r2
 800099a:	4a24      	ldr	r2, [pc, #144]	@ (8000a2c <hata2EEPROM+0xa8>)
 800099c:	5cd3      	ldrb	r3, [r2, r3]
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d002      	beq.n	80009a8 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 80009a2:	f000 f8d1 	bl	8000b48 <eepromDataFillWithEmpty>
		goto veriEkleme;
 80009a6:	e000      	b.n	80009aa <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 80009a8:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	e012      	b.n	80009d6 <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 80009b0:	4b1d      	ldr	r3, [pc, #116]	@ (8000a28 <hata2EEPROM+0xa4>)
 80009b2:	681a      	ldr	r2, [r3, #0]
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	4413      	add	r3, r2
 80009b8:	4a1c      	ldr	r2, [pc, #112]	@ (8000a2c <hata2EEPROM+0xa8>)
 80009ba:	5cd3      	ldrb	r3, [r2, r3]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d107      	bne.n	80009d0 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 80009c0:	4b19      	ldr	r3, [pc, #100]	@ (8000a28 <hata2EEPROM+0xa4>)
 80009c2:	681a      	ldr	r2, [r3, #0]
 80009c4:	68fb      	ldr	r3, [r7, #12]
 80009c6:	4413      	add	r3, r2
 80009c8:	4918      	ldr	r1, [pc, #96]	@ (8000a2c <hata2EEPROM+0xa8>)
 80009ca:	79fa      	ldrb	r2, [r7, #7]
 80009cc:	54ca      	strb	r2, [r1, r3]
					break;
 80009ce:	e007      	b.n	80009e0 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	3301      	adds	r3, #1
 80009d4:	60fb      	str	r3, [r7, #12]
 80009d6:	4b13      	ldr	r3, [pc, #76]	@ (8000a24 <hata2EEPROM+0xa0>)
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	68fa      	ldr	r2, [r7, #12]
 80009dc:	429a      	cmp	r2, r3
 80009de:	dbe7      	blt.n	80009b0 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 80009e0:	4b11      	ldr	r3, [pc, #68]	@ (8000a28 <hata2EEPROM+0xa4>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	b299      	uxth	r1, r3
 80009e6:	4b0f      	ldr	r3, [pc, #60]	@ (8000a24 <hata2EEPROM+0xa0>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	b298      	uxth	r0, r3
 80009ec:	4b0e      	ldr	r3, [pc, #56]	@ (8000a28 <hata2EEPROM+0xa4>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	4a0e      	ldr	r2, [pc, #56]	@ (8000a2c <hata2EEPROM+0xa8>)
 80009f2:	4413      	add	r3, r2
 80009f4:	4a0b      	ldr	r2, [pc, #44]	@ (8000a24 <hata2EEPROM+0xa0>)
 80009f6:	6812      	ldr	r2, [r2, #0]
 80009f8:	b292      	uxth	r2, r2
 80009fa:	f640 34b8 	movw	r4, #3000	@ 0xbb8
 80009fe:	9402      	str	r4, [sp, #8]
 8000a00:	9201      	str	r2, [sp, #4]
 8000a02:	9300      	str	r3, [sp, #0]
 8000a04:	4603      	mov	r3, r0
 8000a06:	460a      	mov	r2, r1
 8000a08:	21a0      	movs	r1, #160	@ 0xa0
 8000a0a:	4809      	ldr	r0, [pc, #36]	@ (8000a30 <hata2EEPROM+0xac>)
 8000a0c:	f009 fcc8 	bl	800a3a0 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8000a10:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a14:	f008 fc3a 	bl	800928c <HAL_Delay>
	eepromKontrol();
 8000a18:	f7ff fc0c 	bl	8000234 <eepromKontrol>
}
 8000a1c:	bf00      	nop
 8000a1e:	3714      	adds	r7, #20
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd90      	pop	{r4, r7, pc}
 8000a24:	20000098 	.word	0x20000098
 8000a28:	2000009c 	.word	0x2000009c
 8000a2c:	20000fc8 	.word	0x20000fc8
 8000a30:	20001908 	.word	0x20001908

08000a34 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	2b01      	cmp	r3, #1
 8000a42:	d10f      	bne.n	8000a64 <hataKoduLcdGoster+0x30>
		lcd_print(1, 1, errorCodeText);
 8000a44:	4a38      	ldr	r2, [pc, #224]	@ (8000b28 <hataKoduLcdGoster+0xf4>)
 8000a46:	2101      	movs	r1, #1
 8000a48:	2001      	movs	r0, #1
 8000a4a:	f007 fec5 	bl	80087d8 <lcd_print>
		lcd_print(2, 1, "1");
 8000a4e:	4a37      	ldr	r2, [pc, #220]	@ (8000b2c <hataKoduLcdGoster+0xf8>)
 8000a50:	2101      	movs	r1, #1
 8000a52:	2002      	movs	r0, #2
 8000a54:	f007 fec0 	bl	80087d8 <lcd_print>
		lcd_print(2, 7, "          ");
 8000a58:	4a35      	ldr	r2, [pc, #212]	@ (8000b30 <hataKoduLcdGoster+0xfc>)
 8000a5a:	2107      	movs	r1, #7
 8000a5c:	2002      	movs	r0, #2
 8000a5e:	f007 febb 	bl	80087d8 <lcd_print>
	} else if(x==6) {
		lcd_print(1, 1, errorCodeText);
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8000a62:	e05d      	b.n	8000b20 <hataKoduLcdGoster+0xec>
	} else if(x==2){
 8000a64:	79fb      	ldrb	r3, [r7, #7]
 8000a66:	2b02      	cmp	r3, #2
 8000a68:	d10f      	bne.n	8000a8a <hataKoduLcdGoster+0x56>
		lcd_print(1, 1, errorCodeText);
 8000a6a:	4a2f      	ldr	r2, [pc, #188]	@ (8000b28 <hataKoduLcdGoster+0xf4>)
 8000a6c:	2101      	movs	r1, #1
 8000a6e:	2001      	movs	r0, #1
 8000a70:	f007 feb2 	bl	80087d8 <lcd_print>
		lcd_print(2, 2, "2");
 8000a74:	4a2f      	ldr	r2, [pc, #188]	@ (8000b34 <hataKoduLcdGoster+0x100>)
 8000a76:	2102      	movs	r1, #2
 8000a78:	2002      	movs	r0, #2
 8000a7a:	f007 fead 	bl	80087d8 <lcd_print>
		lcd_print(2, 7, "          ");
 8000a7e:	4a2c      	ldr	r2, [pc, #176]	@ (8000b30 <hataKoduLcdGoster+0xfc>)
 8000a80:	2107      	movs	r1, #7
 8000a82:	2002      	movs	r0, #2
 8000a84:	f007 fea8 	bl	80087d8 <lcd_print>
}
 8000a88:	e04a      	b.n	8000b20 <hataKoduLcdGoster+0xec>
	} else if(x==3) {
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	2b03      	cmp	r3, #3
 8000a8e:	d10f      	bne.n	8000ab0 <hataKoduLcdGoster+0x7c>
		lcd_print(1, 1, errorCodeText);
 8000a90:	4a25      	ldr	r2, [pc, #148]	@ (8000b28 <hataKoduLcdGoster+0xf4>)
 8000a92:	2101      	movs	r1, #1
 8000a94:	2001      	movs	r0, #1
 8000a96:	f007 fe9f 	bl	80087d8 <lcd_print>
		lcd_print(2, 3, "3");
 8000a9a:	4a27      	ldr	r2, [pc, #156]	@ (8000b38 <hataKoduLcdGoster+0x104>)
 8000a9c:	2103      	movs	r1, #3
 8000a9e:	2002      	movs	r0, #2
 8000aa0:	f007 fe9a 	bl	80087d8 <lcd_print>
		lcd_print(2, 7, "          ");
 8000aa4:	4a22      	ldr	r2, [pc, #136]	@ (8000b30 <hataKoduLcdGoster+0xfc>)
 8000aa6:	2107      	movs	r1, #7
 8000aa8:	2002      	movs	r0, #2
 8000aaa:	f007 fe95 	bl	80087d8 <lcd_print>
}
 8000aae:	e037      	b.n	8000b20 <hataKoduLcdGoster+0xec>
	} else if(x==4){
 8000ab0:	79fb      	ldrb	r3, [r7, #7]
 8000ab2:	2b04      	cmp	r3, #4
 8000ab4:	d10f      	bne.n	8000ad6 <hataKoduLcdGoster+0xa2>
		lcd_print(1, 1, errorCodeText);
 8000ab6:	4a1c      	ldr	r2, [pc, #112]	@ (8000b28 <hataKoduLcdGoster+0xf4>)
 8000ab8:	2101      	movs	r1, #1
 8000aba:	2001      	movs	r0, #1
 8000abc:	f007 fe8c 	bl	80087d8 <lcd_print>
		lcd_print(2, 4, "4");
 8000ac0:	4a1e      	ldr	r2, [pc, #120]	@ (8000b3c <hataKoduLcdGoster+0x108>)
 8000ac2:	2104      	movs	r1, #4
 8000ac4:	2002      	movs	r0, #2
 8000ac6:	f007 fe87 	bl	80087d8 <lcd_print>
		lcd_print(2, 7, "          ");
 8000aca:	4a19      	ldr	r2, [pc, #100]	@ (8000b30 <hataKoduLcdGoster+0xfc>)
 8000acc:	2107      	movs	r1, #7
 8000ace:	2002      	movs	r0, #2
 8000ad0:	f007 fe82 	bl	80087d8 <lcd_print>
}
 8000ad4:	e024      	b.n	8000b20 <hataKoduLcdGoster+0xec>
	} else if(x==5) {
 8000ad6:	79fb      	ldrb	r3, [r7, #7]
 8000ad8:	2b05      	cmp	r3, #5
 8000ada:	d10f      	bne.n	8000afc <hataKoduLcdGoster+0xc8>
		lcd_print(1, 1, errorCodeText);
 8000adc:	4a12      	ldr	r2, [pc, #72]	@ (8000b28 <hataKoduLcdGoster+0xf4>)
 8000ade:	2101      	movs	r1, #1
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	f007 fe79 	bl	80087d8 <lcd_print>
		lcd_print(2, 5, "5");
 8000ae6:	4a16      	ldr	r2, [pc, #88]	@ (8000b40 <hataKoduLcdGoster+0x10c>)
 8000ae8:	2105      	movs	r1, #5
 8000aea:	2002      	movs	r0, #2
 8000aec:	f007 fe74 	bl	80087d8 <lcd_print>
		lcd_print(2, 7, "          ");
 8000af0:	4a0f      	ldr	r2, [pc, #60]	@ (8000b30 <hataKoduLcdGoster+0xfc>)
 8000af2:	2107      	movs	r1, #7
 8000af4:	2002      	movs	r0, #2
 8000af6:	f007 fe6f 	bl	80087d8 <lcd_print>
}
 8000afa:	e011      	b.n	8000b20 <hataKoduLcdGoster+0xec>
	} else if(x==6) {
 8000afc:	79fb      	ldrb	r3, [r7, #7]
 8000afe:	2b06      	cmp	r3, #6
 8000b00:	d10e      	bne.n	8000b20 <hataKoduLcdGoster+0xec>
		lcd_print(1, 1, errorCodeText);
 8000b02:	4a09      	ldr	r2, [pc, #36]	@ (8000b28 <hataKoduLcdGoster+0xf4>)
 8000b04:	2101      	movs	r1, #1
 8000b06:	2001      	movs	r0, #1
 8000b08:	f007 fe66 	bl	80087d8 <lcd_print>
		lcd_print(2, 6, "6");
 8000b0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000b44 <hataKoduLcdGoster+0x110>)
 8000b0e:	2106      	movs	r1, #6
 8000b10:	2002      	movs	r0, #2
 8000b12:	f007 fe61 	bl	80087d8 <lcd_print>
		lcd_print(2, 7, "          ");
 8000b16:	4a06      	ldr	r2, [pc, #24]	@ (8000b30 <hataKoduLcdGoster+0xfc>)
 8000b18:	2107      	movs	r1, #7
 8000b1a:	2002      	movs	r0, #2
 8000b1c:	f007 fe5c 	bl	80087d8 <lcd_print>
}
 8000b20:	bf00      	nop
 8000b22:	3708      	adds	r7, #8
 8000b24:	46bd      	mov	sp, r7
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	20001890 	.word	0x20001890
 8000b2c:	0800da64 	.word	0x0800da64
 8000b30:	0800da68 	.word	0x0800da68
 8000b34:	0800da74 	.word	0x0800da74
 8000b38:	0800da78 	.word	0x0800da78
 8000b3c:	0800da7c 	.word	0x0800da7c
 8000b40:	0800da80 	.word	0x0800da80
 8000b44:	0800da84 	.word	0x0800da84

08000b48 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8000b4e:	2300      	movs	r3, #0
 8000b50:	607b      	str	r3, [r7, #4]
 8000b52:	e009      	b.n	8000b68 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8000b54:	4a0a      	ldr	r2, [pc, #40]	@ (8000b80 <eepromDataFillWithEmpty+0x38>)
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b5c:	4a09      	ldr	r2, [pc, #36]	@ (8000b84 <eepromDataFillWithEmpty+0x3c>)
 8000b5e:	2100      	movs	r1, #0
 8000b60:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	3301      	adds	r3, #1
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	4b07      	ldr	r3, [pc, #28]	@ (8000b88 <eepromDataFillWithEmpty+0x40>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	687a      	ldr	r2, [r7, #4]
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	dbf0      	blt.n	8000b54 <eepromDataFillWithEmpty+0xc>
	}
}
 8000b72:	bf00      	nop
 8000b74:	bf00      	nop
 8000b76:	370c      	adds	r7, #12
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bc80      	pop	{r7}
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	20000070 	.word	0x20000070
 8000b84:	20000fc8 	.word	0x20000fc8
 8000b88:	20000098 	.word	0x20000098

08000b8c <i2cTest>:
 */

#include "HardwareTest.h"
#include "main.h"

void i2cTest() {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b084      	sub	sp, #16
 8000b90:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8000b92:	463b      	mov	r3, r7
 8000b94:	2200      	movs	r2, #0
 8000b96:	601a      	str	r2, [r3, #0]
 8000b98:	605a      	str	r2, [r3, #4]
 8000b9a:	609a      	str	r2, [r3, #8]
 8000b9c:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8000b9e:	4b50      	ldr	r3, [pc, #320]	@ (8000ce0 <i2cTest+0x154>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	681a      	ldr	r2, [r3, #0]
 8000ba4:	4b4e      	ldr	r3, [pc, #312]	@ (8000ce0 <i2cTest+0x154>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f022 0201 	bic.w	r2, r2, #1
 8000bac:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8000bae:	484c      	ldr	r0, [pc, #304]	@ (8000ce0 <i2cTest+0x154>)
 8000bb0:	f009 fac8 	bl	800a144 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000bb4:	23c0      	movs	r3, #192	@ 0xc0
 8000bb6:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8000bb8:	2311      	movs	r3, #17
 8000bba:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000bc4:	463b      	mov	r3, r7
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4846      	ldr	r0, [pc, #280]	@ (8000ce4 <i2cTest+0x158>)
 8000bca:	f008 fecf 	bl	800996c <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000bce:	2201      	movs	r2, #1
 8000bd0:	2140      	movs	r1, #64	@ 0x40
 8000bd2:	4844      	ldr	r0, [pc, #272]	@ (8000ce4 <i2cTest+0x158>)
 8000bd4:	f009 f941 	bl	8009e5a <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000bd8:	2201      	movs	r2, #1
 8000bda:	2180      	movs	r1, #128	@ 0x80
 8000bdc:	4841      	ldr	r0, [pc, #260]	@ (8000ce4 <i2cTest+0x158>)
 8000bde:	f009 f93c 	bl	8009e5a <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8000be2:	200a      	movs	r0, #10
 8000be4:	f008 fb52 	bl	800928c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000be8:	bf00      	nop
 8000bea:	2140      	movs	r1, #64	@ 0x40
 8000bec:	483d      	ldr	r0, [pc, #244]	@ (8000ce4 <i2cTest+0x158>)
 8000bee:	f009 f91d 	bl	8009e2c <HAL_GPIO_ReadPin>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d006      	beq.n	8000c06 <i2cTest+0x7a>
 8000bf8:	2180      	movs	r1, #128	@ 0x80
 8000bfa:	483a      	ldr	r0, [pc, #232]	@ (8000ce4 <i2cTest+0x158>)
 8000bfc:	f009 f916 	bl	8009e2c <HAL_GPIO_ReadPin>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b01      	cmp	r3, #1
 8000c04:	d1f1      	bne.n	8000bea <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	2180      	movs	r1, #128	@ 0x80
 8000c0a:	4836      	ldr	r0, [pc, #216]	@ (8000ce4 <i2cTest+0x158>)
 8000c0c:	f009 f925 	bl	8009e5a <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 8000c10:	200a      	movs	r0, #10
 8000c12:	f008 fb3b 	bl	800928c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8000c16:	bf00      	nop
 8000c18:	2180      	movs	r1, #128	@ 0x80
 8000c1a:	4832      	ldr	r0, [pc, #200]	@ (8000ce4 <i2cTest+0x158>)
 8000c1c:	f009 f906 	bl	8009e2c <HAL_GPIO_ReadPin>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d0f8      	beq.n	8000c18 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000c26:	2200      	movs	r2, #0
 8000c28:	2140      	movs	r1, #64	@ 0x40
 8000c2a:	482e      	ldr	r0, [pc, #184]	@ (8000ce4 <i2cTest+0x158>)
 8000c2c:	f009 f915 	bl	8009e5a <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000c30:	200a      	movs	r0, #10
 8000c32:	f008 fb2b 	bl	800928c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8000c36:	bf00      	nop
 8000c38:	2140      	movs	r1, #64	@ 0x40
 8000c3a:	482a      	ldr	r0, [pc, #168]	@ (8000ce4 <i2cTest+0x158>)
 8000c3c:	f009 f8f6 	bl	8009e2c <HAL_GPIO_ReadPin>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b01      	cmp	r3, #1
 8000c44:	d0f8      	beq.n	8000c38 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000c46:	2201      	movs	r2, #1
 8000c48:	2140      	movs	r1, #64	@ 0x40
 8000c4a:	4826      	ldr	r0, [pc, #152]	@ (8000ce4 <i2cTest+0x158>)
 8000c4c:	f009 f905 	bl	8009e5a <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000c50:	200a      	movs	r0, #10
 8000c52:	f008 fb1b 	bl	800928c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8000c56:	bf00      	nop
 8000c58:	2140      	movs	r1, #64	@ 0x40
 8000c5a:	4822      	ldr	r0, [pc, #136]	@ (8000ce4 <i2cTest+0x158>)
 8000c5c:	f009 f8e6 	bl	8009e2c <HAL_GPIO_ReadPin>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d1f8      	bne.n	8000c58 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000c66:	2201      	movs	r2, #1
 8000c68:	2180      	movs	r1, #128	@ 0x80
 8000c6a:	481e      	ldr	r0, [pc, #120]	@ (8000ce4 <i2cTest+0x158>)
 8000c6c:	f009 f8f5 	bl	8009e5a <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8000c70:	200a      	movs	r0, #10
 8000c72:	f008 fb0b 	bl	800928c <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8000c76:	bf00      	nop
 8000c78:	2180      	movs	r1, #128	@ 0x80
 8000c7a:	481a      	ldr	r0, [pc, #104]	@ (8000ce4 <i2cTest+0x158>)
 8000c7c:	f009 f8d6 	bl	8009e2c <HAL_GPIO_ReadPin>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b01      	cmp	r3, #1
 8000c84:	d1f8      	bne.n	8000c78 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c86:	23c0      	movs	r3, #192	@ 0xc0
 8000c88:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8000c8a:	2312      	movs	r3, #18
 8000c8c:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8000c92:	2303      	movs	r3, #3
 8000c94:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8000c96:	463b      	mov	r3, r7
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4812      	ldr	r0, [pc, #72]	@ (8000ce4 <i2cTest+0x158>)
 8000c9c:	f008 fe66 	bl	800996c <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8000ca0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce0 <i2cTest+0x154>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce0 <i2cTest+0x154>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8000cae:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8000cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce0 <i2cTest+0x154>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	681a      	ldr	r2, [r3, #0]
 8000cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce0 <i2cTest+0x154>)
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8000cbe:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8000cc0:	4b07      	ldr	r3, [pc, #28]	@ (8000ce0 <i2cTest+0x154>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	4b06      	ldr	r3, [pc, #24]	@ (8000ce0 <i2cTest+0x154>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f042 0201 	orr.w	r2, r2, #1
 8000cce:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8000cd0:	4803      	ldr	r0, [pc, #12]	@ (8000ce0 <i2cTest+0x154>)
 8000cd2:	f009 f8f3 	bl	8009ebc <HAL_I2C_Init>
}
 8000cd6:	bf00      	nop
 8000cd8:	3710      	adds	r7, #16
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	20001908 	.word	0x20001908
 8000ce4:	40010c00 	.word	0x40010c00

08000ce8 <printTemplate>:
 */

#include "IoTMenu.h"
#include "TextVariables.h"

void printTemplate(int type, int page) {
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 8000cf2:	20c8      	movs	r0, #200	@ 0xc8
 8000cf4:	f008 faca 	bl	800928c <HAL_Delay>
	lcd_clear();
 8000cf8:	f007 fd9a 	bl	8008830 <lcd_clear>
	if(type == 1 && page == 0) {
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d13e      	bne.n	8000d80 <printTemplate+0x98>
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d13b      	bne.n	8000d80 <printTemplate+0x98>
		lcd_print(1, 1, "ID: ");
 8000d08:	4a81      	ldr	r2, [pc, #516]	@ (8000f10 <printTemplate+0x228>)
 8000d0a:	2101      	movs	r1, #1
 8000d0c:	2001      	movs	r0, #1
 8000d0e:	f007 fd63 	bl	80087d8 <lcd_print>
		lcd_print(2, 3, "0");
 8000d12:	4a80      	ldr	r2, [pc, #512]	@ (8000f14 <printTemplate+0x22c>)
 8000d14:	2103      	movs	r1, #3
 8000d16:	2002      	movs	r0, #2
 8000d18:	f007 fd5e 	bl	80087d8 <lcd_print>
		lcd_print(2, 4, "1");
 8000d1c:	4a7e      	ldr	r2, [pc, #504]	@ (8000f18 <printTemplate+0x230>)
 8000d1e:	2104      	movs	r1, #4
 8000d20:	2002      	movs	r0, #2
 8000d22:	f007 fd59 	bl	80087d8 <lcd_print>
		lcd_print(2, 5, "2");
 8000d26:	4a7d      	ldr	r2, [pc, #500]	@ (8000f1c <printTemplate+0x234>)
 8000d28:	2105      	movs	r1, #5
 8000d2a:	2002      	movs	r0, #2
 8000d2c:	f007 fd54 	bl	80087d8 <lcd_print>
		lcd_print(2, 6, "3");
 8000d30:	4a7b      	ldr	r2, [pc, #492]	@ (8000f20 <printTemplate+0x238>)
 8000d32:	2106      	movs	r1, #6
 8000d34:	2002      	movs	r0, #2
 8000d36:	f007 fd4f 	bl	80087d8 <lcd_print>
		lcd_print(2, 7, "4");
 8000d3a:	4a7a      	ldr	r2, [pc, #488]	@ (8000f24 <printTemplate+0x23c>)
 8000d3c:	2107      	movs	r1, #7
 8000d3e:	2002      	movs	r0, #2
 8000d40:	f007 fd4a 	bl	80087d8 <lcd_print>
		lcd_print(2, 10, "5");
 8000d44:	4a78      	ldr	r2, [pc, #480]	@ (8000f28 <printTemplate+0x240>)
 8000d46:	210a      	movs	r1, #10
 8000d48:	2002      	movs	r0, #2
 8000d4a:	f007 fd45 	bl	80087d8 <lcd_print>
		lcd_print(2, 11, "6");
 8000d4e:	4a77      	ldr	r2, [pc, #476]	@ (8000f2c <printTemplate+0x244>)
 8000d50:	210b      	movs	r1, #11
 8000d52:	2002      	movs	r0, #2
 8000d54:	f007 fd40 	bl	80087d8 <lcd_print>
		lcd_print(2, 12, "7");
 8000d58:	4a75      	ldr	r2, [pc, #468]	@ (8000f30 <printTemplate+0x248>)
 8000d5a:	210c      	movs	r1, #12
 8000d5c:	2002      	movs	r0, #2
 8000d5e:	f007 fd3b 	bl	80087d8 <lcd_print>
		lcd_print(2, 13, "8");
 8000d62:	4a74      	ldr	r2, [pc, #464]	@ (8000f34 <printTemplate+0x24c>)
 8000d64:	210d      	movs	r1, #13
 8000d66:	2002      	movs	r0, #2
 8000d68:	f007 fd36 	bl	80087d8 <lcd_print>
		lcd_print(2, 14, "9");
 8000d6c:	4a72      	ldr	r2, [pc, #456]	@ (8000f38 <printTemplate+0x250>)
 8000d6e:	210e      	movs	r1, #14
 8000d70:	2002      	movs	r0, #2
 8000d72:	f007 fd31 	bl	80087d8 <lcd_print>
		lcd_gotoxy(2, 3);
 8000d76:	2103      	movs	r1, #3
 8000d78:	2002      	movs	r0, #2
 8000d7a:	f007 fd0e 	bl	800879a <lcd_gotoxy>
			HAL_Delay(100);
			lcd_print(1, 1, "PASS: ");
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
		}
	}
}
 8000d7e:	e0c2      	b.n	8000f06 <printTemplate+0x21e>
	} else if(type == 2) {
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2b02      	cmp	r3, #2
 8000d84:	d15e      	bne.n	8000e44 <printTemplate+0x15c>
		if(page == 1) {
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d10f      	bne.n	8000dac <printTemplate+0xc4>
			lcd_clear();
 8000d8c:	f007 fd50 	bl	8008830 <lcd_clear>
			HAL_Delay(100);
 8000d90:	2064      	movs	r0, #100	@ 0x64
 8000d92:	f008 fa7b 	bl	800928c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000d96:	4a69      	ldr	r2, [pc, #420]	@ (8000f3c <printTemplate+0x254>)
 8000d98:	2101      	movs	r1, #1
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	f007 fd1c 	bl	80087d8 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000da0:	4a67      	ldr	r2, [pc, #412]	@ (8000f40 <printTemplate+0x258>)
 8000da2:	2101      	movs	r1, #1
 8000da4:	2002      	movs	r0, #2
 8000da6:	f007 fd17 	bl	80087d8 <lcd_print>
}
 8000daa:	e0ac      	b.n	8000f06 <printTemplate+0x21e>
		} else if(page == 2) {
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	d10f      	bne.n	8000dd2 <printTemplate+0xea>
			lcd_clear();
 8000db2:	f007 fd3d 	bl	8008830 <lcd_clear>
			HAL_Delay(100);
 8000db6:	2064      	movs	r0, #100	@ 0x64
 8000db8:	f008 fa68 	bl	800928c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000dbc:	4a5f      	ldr	r2, [pc, #380]	@ (8000f3c <printTemplate+0x254>)
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	2001      	movs	r0, #1
 8000dc2:	f007 fd09 	bl	80087d8 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000dc6:	4a5f      	ldr	r2, [pc, #380]	@ (8000f44 <printTemplate+0x25c>)
 8000dc8:	2101      	movs	r1, #1
 8000dca:	2002      	movs	r0, #2
 8000dcc:	f007 fd04 	bl	80087d8 <lcd_print>
}
 8000dd0:	e099      	b.n	8000f06 <printTemplate+0x21e>
		} else if(page == 3) {
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	2b03      	cmp	r3, #3
 8000dd6:	d10f      	bne.n	8000df8 <printTemplate+0x110>
			lcd_clear();
 8000dd8:	f007 fd2a 	bl	8008830 <lcd_clear>
			HAL_Delay(100);
 8000ddc:	2064      	movs	r0, #100	@ 0x64
 8000dde:	f008 fa55 	bl	800928c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000de2:	4a56      	ldr	r2, [pc, #344]	@ (8000f3c <printTemplate+0x254>)
 8000de4:	2101      	movs	r1, #1
 8000de6:	2001      	movs	r0, #1
 8000de8:	f007 fcf6 	bl	80087d8 <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 8000dec:	4a56      	ldr	r2, [pc, #344]	@ (8000f48 <printTemplate+0x260>)
 8000dee:	2101      	movs	r1, #1
 8000df0:	2002      	movs	r0, #2
 8000df2:	f007 fcf1 	bl	80087d8 <lcd_print>
}
 8000df6:	e086      	b.n	8000f06 <printTemplate+0x21e>
		} else if(page == 4) {
 8000df8:	683b      	ldr	r3, [r7, #0]
 8000dfa:	2b04      	cmp	r3, #4
 8000dfc:	d10f      	bne.n	8000e1e <printTemplate+0x136>
			lcd_clear();
 8000dfe:	f007 fd17 	bl	8008830 <lcd_clear>
			HAL_Delay(100);
 8000e02:	2064      	movs	r0, #100	@ 0x64
 8000e04:	f008 fa42 	bl	800928c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000e08:	4a4c      	ldr	r2, [pc, #304]	@ (8000f3c <printTemplate+0x254>)
 8000e0a:	2101      	movs	r1, #1
 8000e0c:	2001      	movs	r0, #1
 8000e0e:	f007 fce3 	bl	80087d8 <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 8000e12:	4a4e      	ldr	r2, [pc, #312]	@ (8000f4c <printTemplate+0x264>)
 8000e14:	2101      	movs	r1, #1
 8000e16:	2002      	movs	r0, #2
 8000e18:	f007 fcde 	bl	80087d8 <lcd_print>
}
 8000e1c:	e073      	b.n	8000f06 <printTemplate+0x21e>
		} else if(page == 5) {
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	2b05      	cmp	r3, #5
 8000e22:	d170      	bne.n	8000f06 <printTemplate+0x21e>
			lcd_clear();
 8000e24:	f007 fd04 	bl	8008830 <lcd_clear>
			HAL_Delay(100);
 8000e28:	2064      	movs	r0, #100	@ 0x64
 8000e2a:	f008 fa2f 	bl	800928c <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000e2e:	4a43      	ldr	r2, [pc, #268]	@ (8000f3c <printTemplate+0x254>)
 8000e30:	2101      	movs	r1, #1
 8000e32:	2001      	movs	r0, #1
 8000e34:	f007 fcd0 	bl	80087d8 <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 8000e38:	4a45      	ldr	r2, [pc, #276]	@ (8000f50 <printTemplate+0x268>)
 8000e3a:	2101      	movs	r1, #1
 8000e3c:	2002      	movs	r0, #2
 8000e3e:	f007 fccb 	bl	80087d8 <lcd_print>
}
 8000e42:	e060      	b.n	8000f06 <printTemplate+0x21e>
	} else if(type == 3) {
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2b03      	cmp	r3, #3
 8000e48:	d15d      	bne.n	8000f06 <printTemplate+0x21e>
		if(page == 1) {
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d10f      	bne.n	8000e70 <printTemplate+0x188>
			lcd_clear();
 8000e50:	f007 fcee 	bl	8008830 <lcd_clear>
			HAL_Delay(100);
 8000e54:	2064      	movs	r0, #100	@ 0x64
 8000e56:	f008 fa19 	bl	800928c <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000e5a:	4a3e      	ldr	r2, [pc, #248]	@ (8000f54 <printTemplate+0x26c>)
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	2001      	movs	r0, #1
 8000e60:	f007 fcba 	bl	80087d8 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000e64:	4a36      	ldr	r2, [pc, #216]	@ (8000f40 <printTemplate+0x258>)
 8000e66:	2101      	movs	r1, #1
 8000e68:	2002      	movs	r0, #2
 8000e6a:	f007 fcb5 	bl	80087d8 <lcd_print>
}
 8000e6e:	e04a      	b.n	8000f06 <printTemplate+0x21e>
		} else if(page == 2) {
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	d10f      	bne.n	8000e96 <printTemplate+0x1ae>
			lcd_clear();
 8000e76:	f007 fcdb 	bl	8008830 <lcd_clear>
			HAL_Delay(100);
 8000e7a:	2064      	movs	r0, #100	@ 0x64
 8000e7c:	f008 fa06 	bl	800928c <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000e80:	4a34      	ldr	r2, [pc, #208]	@ (8000f54 <printTemplate+0x26c>)
 8000e82:	2101      	movs	r1, #1
 8000e84:	2001      	movs	r0, #1
 8000e86:	f007 fca7 	bl	80087d8 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000e8a:	4a2e      	ldr	r2, [pc, #184]	@ (8000f44 <printTemplate+0x25c>)
 8000e8c:	2101      	movs	r1, #1
 8000e8e:	2002      	movs	r0, #2
 8000e90:	f007 fca2 	bl	80087d8 <lcd_print>
}
 8000e94:	e037      	b.n	8000f06 <printTemplate+0x21e>
		} else if(page == 3) {
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	2b03      	cmp	r3, #3
 8000e9a:	d10f      	bne.n	8000ebc <printTemplate+0x1d4>
			lcd_clear();
 8000e9c:	f007 fcc8 	bl	8008830 <lcd_clear>
			HAL_Delay(100);
 8000ea0:	2064      	movs	r0, #100	@ 0x64
 8000ea2:	f008 f9f3 	bl	800928c <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000ea6:	4a2b      	ldr	r2, [pc, #172]	@ (8000f54 <printTemplate+0x26c>)
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	2001      	movs	r0, #1
 8000eac:	f007 fc94 	bl	80087d8 <lcd_print>
			lcd_print(2, 1, "GHIİJKLMNOPQRSTU");
 8000eb0:	4a25      	ldr	r2, [pc, #148]	@ (8000f48 <printTemplate+0x260>)
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	2002      	movs	r0, #2
 8000eb6:	f007 fc8f 	bl	80087d8 <lcd_print>
}
 8000eba:	e024      	b.n	8000f06 <printTemplate+0x21e>
		} else if(page == 4) {
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	2b04      	cmp	r3, #4
 8000ec0:	d10f      	bne.n	8000ee2 <printTemplate+0x1fa>
			lcd_clear();
 8000ec2:	f007 fcb5 	bl	8008830 <lcd_clear>
			HAL_Delay(100);
 8000ec6:	2064      	movs	r0, #100	@ 0x64
 8000ec8:	f008 f9e0 	bl	800928c <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000ecc:	4a21      	ldr	r2, [pc, #132]	@ (8000f54 <printTemplate+0x26c>)
 8000ece:	2101      	movs	r1, #1
 8000ed0:	2001      	movs	r0, #1
 8000ed2:	f007 fc81 	bl	80087d8 <lcd_print>
			lcd_print(2, 1, "VWXYZ0123456789!");
 8000ed6:	4a1d      	ldr	r2, [pc, #116]	@ (8000f4c <printTemplate+0x264>)
 8000ed8:	2101      	movs	r1, #1
 8000eda:	2002      	movs	r0, #2
 8000edc:	f007 fc7c 	bl	80087d8 <lcd_print>
}
 8000ee0:	e011      	b.n	8000f06 <printTemplate+0x21e>
		} else if(page == 5) {
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	2b05      	cmp	r3, #5
 8000ee6:	d10e      	bne.n	8000f06 <printTemplate+0x21e>
			lcd_clear();
 8000ee8:	f007 fca2 	bl	8008830 <lcd_clear>
			HAL_Delay(100);
 8000eec:	2064      	movs	r0, #100	@ 0x64
 8000eee:	f008 f9cd 	bl	800928c <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000ef2:	4a18      	ldr	r2, [pc, #96]	@ (8000f54 <printTemplate+0x26c>)
 8000ef4:	2101      	movs	r1, #1
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	f007 fc6e 	bl	80087d8 <lcd_print>
			lcd_print(2, 1, "@#$%^&*()-_+=<>?");
 8000efc:	4a14      	ldr	r2, [pc, #80]	@ (8000f50 <printTemplate+0x268>)
 8000efe:	2101      	movs	r1, #1
 8000f00:	2002      	movs	r0, #2
 8000f02:	f007 fc69 	bl	80087d8 <lcd_print>
}
 8000f06:	bf00      	nop
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	0800da88 	.word	0x0800da88
 8000f14:	0800da90 	.word	0x0800da90
 8000f18:	0800da94 	.word	0x0800da94
 8000f1c:	0800da98 	.word	0x0800da98
 8000f20:	0800da9c 	.word	0x0800da9c
 8000f24:	0800daa0 	.word	0x0800daa0
 8000f28:	0800daa4 	.word	0x0800daa4
 8000f2c:	0800daa8 	.word	0x0800daa8
 8000f30:	0800daac 	.word	0x0800daac
 8000f34:	0800dab0 	.word	0x0800dab0
 8000f38:	0800dab4 	.word	0x0800dab4
 8000f3c:	0800dab8 	.word	0x0800dab8
 8000f40:	0800dac0 	.word	0x0800dac0
 8000f44:	0800dad4 	.word	0x0800dad4
 8000f48:	0800dae8 	.word	0x0800dae8
 8000f4c:	0800dafc 	.word	0x0800dafc
 8000f50:	0800db10 	.word	0x0800db10
 8000f54:	0800db24 	.word	0x0800db24

08000f58 <checkSlideVal>:

int checkSlideVal(int state) {
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b082      	sub	sp, #8
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
	if(state == 0) { //ssid (33)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d111      	bne.n	8000f8a <checkSlideVal+0x32>
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000f66:	2101      	movs	r1, #1
 8000f68:	4813      	ldr	r0, [pc, #76]	@ (8000fb8 <checkSlideVal+0x60>)
 8000f6a:	f008 ff5f 	bl	8009e2c <HAL_GPIO_ReadPin>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b01      	cmp	r3, #1
 8000f72:	d101      	bne.n	8000f78 <checkSlideVal+0x20>
			return 34;
 8000f74:	2322      	movs	r3, #34	@ 0x22
 8000f76:	e01b      	b.n	8000fb0 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8000f78:	2108      	movs	r1, #8
 8000f7a:	4810      	ldr	r0, [pc, #64]	@ (8000fbc <checkSlideVal+0x64>)
 8000f7c:	f008 ff56 	bl	8009e2c <HAL_GPIO_ReadPin>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b01      	cmp	r3, #1
 8000f84:	d113      	bne.n	8000fae <checkSlideVal+0x56>
			return 32;
 8000f86:	2320      	movs	r3, #32
 8000f88:	e012      	b.n	8000fb0 <checkSlideVal+0x58>
		}
	} else { //pass (34)
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	480a      	ldr	r0, [pc, #40]	@ (8000fb8 <checkSlideVal+0x60>)
 8000f8e:	f008 ff4d 	bl	8009e2c <HAL_GPIO_ReadPin>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b01      	cmp	r3, #1
 8000f96:	d101      	bne.n	8000f9c <checkSlideVal+0x44>
			return 35;
 8000f98:	2323      	movs	r3, #35	@ 0x23
 8000f9a:	e009      	b.n	8000fb0 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8000f9c:	2108      	movs	r1, #8
 8000f9e:	4807      	ldr	r0, [pc, #28]	@ (8000fbc <checkSlideVal+0x64>)
 8000fa0:	f008 ff44 	bl	8009e2c <HAL_GPIO_ReadPin>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d101      	bne.n	8000fae <checkSlideVal+0x56>
			return 33;
 8000faa:	2321      	movs	r3, #33	@ 0x21
 8000fac:	e000      	b.n	8000fb0 <checkSlideVal+0x58>
		}
	}
	return 0;
 8000fae:	2300      	movs	r3, #0
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40010800 	.word	0x40010800
 8000fbc:	40011000 	.word	0x40011000

08000fc0 <slideText>:

void slideText(const char* text, int startPos, int startLine, int state) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08a      	sub	sp, #40	@ 0x28
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	60f8      	str	r0, [r7, #12]
 8000fc8:	60b9      	str	r1, [r7, #8]
 8000fca:	607a      	str	r2, [r7, #4]
 8000fcc:	603b      	str	r3, [r7, #0]
	uint8_t uzunluk = strlen(text);
 8000fce:	68f8      	ldr	r0, [r7, #12]
 8000fd0:	f7ff f928 	bl	8000224 <strlen>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	75fb      	strb	r3, [r7, #23]
	int mainLoopVal = 1;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	627b      	str	r3, [r7, #36]	@ 0x24

	while(mainLoopVal == 1) {
 8000fdc:	e0aa      	b.n	8001134 <slideText+0x174>
		if(checkSlideVal(state) > 0) {
 8000fde:	6838      	ldr	r0, [r7, #0]
 8000fe0:	f7ff ffba 	bl	8000f58 <checkSlideVal>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	dd07      	ble.n	8000ffa <slideText+0x3a>
			menuSayac = checkSlideVal(state);
 8000fea:	6838      	ldr	r0, [r7, #0]
 8000fec:	f7ff ffb4 	bl	8000f58 <checkSlideVal>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	b2da      	uxtb	r2, r3
 8000ff4:	4b54      	ldr	r3, [pc, #336]	@ (8001148 <slideText+0x188>)
 8000ff6:	701a      	strb	r2, [r3, #0]
			break;
 8000ff8:	e0a2      	b.n	8001140 <slideText+0x180>
		}
		checkEditMode();
 8000ffa:	f000 f927 	bl	800124c <checkEditMode>
		if(editMode == 1) {
 8000ffe:	4b53      	ldr	r3, [pc, #332]	@ (800114c <slideText+0x18c>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	2b01      	cmp	r3, #1
 8001004:	f000 809b 	beq.w	800113e <slideText+0x17e>
			break;
		}

		for(int z=0; z < uzunluk; z++) {
 8001008:	2300      	movs	r3, #0
 800100a:	623b      	str	r3, [r7, #32]
 800100c:	e08b      	b.n	8001126 <slideText+0x166>
			if(checkSlideVal(state) > 0) {
 800100e:	6838      	ldr	r0, [r7, #0]
 8001010:	f7ff ffa2 	bl	8000f58 <checkSlideVal>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	dd09      	ble.n	800102e <slideText+0x6e>
				menuSayac = checkSlideVal(state);
 800101a:	6838      	ldr	r0, [r7, #0]
 800101c:	f7ff ff9c 	bl	8000f58 <checkSlideVal>
 8001020:	4603      	mov	r3, r0
 8001022:	b2da      	uxtb	r2, r3
 8001024:	4b48      	ldr	r3, [pc, #288]	@ (8001148 <slideText+0x188>)
 8001026:	701a      	strb	r2, [r3, #0]
				mainLoopVal = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	627b      	str	r3, [r7, #36]	@ 0x24
				break;
 800102c:	e082      	b.n	8001134 <slideText+0x174>
			}
			checkEditMode();
 800102e:	f000 f90d 	bl	800124c <checkEditMode>
			if(editMode == 1) {
 8001032:	4b46      	ldr	r3, [pc, #280]	@ (800114c <slideText+0x18c>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2b01      	cmp	r3, #1
 8001038:	d07b      	beq.n	8001132 <slideText+0x172>
				break;
			}
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 800103a:	68ba      	ldr	r2, [r7, #8]
 800103c:	6a3b      	ldr	r3, [r7, #32]
 800103e:	4413      	add	r3, r2
 8001040:	61fb      	str	r3, [r7, #28]
 8001042:	e02f      	b.n	80010a4 <slideText+0xe4>
				if(checkSlideVal(state) > 0) {
 8001044:	6838      	ldr	r0, [r7, #0]
 8001046:	f7ff ff87 	bl	8000f58 <checkSlideVal>
 800104a:	4603      	mov	r3, r0
 800104c:	2b00      	cmp	r3, #0
 800104e:	dd0b      	ble.n	8001068 <slideText+0xa8>
					menuSayac = checkSlideVal(state);
 8001050:	6838      	ldr	r0, [r7, #0]
 8001052:	f7ff ff81 	bl	8000f58 <checkSlideVal>
 8001056:	4603      	mov	r3, r0
 8001058:	b2da      	uxtb	r2, r3
 800105a:	4b3b      	ldr	r3, [pc, #236]	@ (8001148 <slideText+0x188>)
 800105c:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 800105e:	7dfb      	ldrb	r3, [r7, #23]
 8001060:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 8001062:	2300      	movs	r3, #0
 8001064:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8001066:	e025      	b.n	80010b4 <slideText+0xf4>
				}
				checkEditMode();
 8001068:	f000 f8f0 	bl	800124c <checkEditMode>
				if(editMode == 1) {
 800106c:	4b37      	ldr	r3, [pc, #220]	@ (800114c <slideText+0x18c>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	2b01      	cmp	r3, #1
 8001072:	d01e      	beq.n	80010b2 <slideText+0xf2>
					break;
				}
				lcd_print_char(startLine, i-z, text[i-startPos]);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	b2d8      	uxtb	r0, r3
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	b2da      	uxtb	r2, r3
 800107c:	6a3b      	ldr	r3, [r7, #32]
 800107e:	b2db      	uxtb	r3, r3
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	b2d9      	uxtb	r1, r3
 8001084:	69fa      	ldr	r2, [r7, #28]
 8001086:	68bb      	ldr	r3, [r7, #8]
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	461a      	mov	r2, r3
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	4413      	add	r3, r2
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	461a      	mov	r2, r3
 8001094:	f007 fbb5 	bl	8008802 <lcd_print_char>
				HAL_Delay(30);
 8001098:	201e      	movs	r0, #30
 800109a:	f008 f8f7 	bl	800928c <HAL_Delay>
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 800109e:	69fb      	ldr	r3, [r7, #28]
 80010a0:	3301      	adds	r3, #1
 80010a2:	61fb      	str	r3, [r7, #28]
 80010a4:	7dfa      	ldrb	r2, [r7, #23]
 80010a6:	68bb      	ldr	r3, [r7, #8]
 80010a8:	4413      	add	r3, r2
 80010aa:	69fa      	ldr	r2, [r7, #28]
 80010ac:	429a      	cmp	r2, r3
 80010ae:	dbc9      	blt.n	8001044 <slideText+0x84>
 80010b0:	e000      	b.n	80010b4 <slideText+0xf4>
					break;
 80010b2:	bf00      	nop
			}

			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 80010b4:	7dfb      	ldrb	r3, [r7, #23]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	61bb      	str	r3, [r7, #24]
 80010ba:	e029      	b.n	8001110 <slideText+0x150>
				if(checkSlideVal(state) > 0) {
 80010bc:	6838      	ldr	r0, [r7, #0]
 80010be:	f7ff ff4b 	bl	8000f58 <checkSlideVal>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	dd0b      	ble.n	80010e0 <slideText+0x120>
					menuSayac = checkSlideVal(state);
 80010c8:	6838      	ldr	r0, [r7, #0]
 80010ca:	f7ff ff45 	bl	8000f58 <checkSlideVal>
 80010ce:	4603      	mov	r3, r0
 80010d0:	b2da      	uxtb	r2, r3
 80010d2:	4b1d      	ldr	r3, [pc, #116]	@ (8001148 <slideText+0x188>)
 80010d4:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 80010d6:	7dfb      	ldrb	r3, [r7, #23]
 80010d8:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 80010de:	e01f      	b.n	8001120 <slideText+0x160>
				}
				checkEditMode();
 80010e0:	f000 f8b4 	bl	800124c <checkEditMode>
				if(editMode == 1) {
 80010e4:	4b19      	ldr	r3, [pc, #100]	@ (800114c <slideText+0x18c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2b01      	cmp	r3, #1
 80010ea:	d018      	beq.n	800111e <slideText+0x15e>
					break;
				}
			    if(j >= startPos) {
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	68bb      	ldr	r3, [r7, #8]
 80010f0:	429a      	cmp	r2, r3
 80010f2:	db0a      	blt.n	800110a <slideText+0x14a>
			    	lcd_print_char(startLine, j, ' ');
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	b2d1      	uxtb	r1, r2
 80010fc:	2220      	movs	r2, #32
 80010fe:	4618      	mov	r0, r3
 8001100:	f007 fb7f 	bl	8008802 <lcd_print_char>
			    	HAL_Delay(30);
 8001104:	201e      	movs	r0, #30
 8001106:	f008 f8c1 	bl	800928c <HAL_Delay>
			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 800110a:	69bb      	ldr	r3, [r7, #24]
 800110c:	3b01      	subs	r3, #1
 800110e:	61bb      	str	r3, [r7, #24]
 8001110:	7dfa      	ldrb	r2, [r7, #23]
 8001112:	6a3b      	ldr	r3, [r7, #32]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	429a      	cmp	r2, r3
 800111a:	dacf      	bge.n	80010bc <slideText+0xfc>
 800111c:	e000      	b.n	8001120 <slideText+0x160>
					break;
 800111e:	bf00      	nop
		for(int z=0; z < uzunluk; z++) {
 8001120:	6a3b      	ldr	r3, [r7, #32]
 8001122:	3301      	adds	r3, #1
 8001124:	623b      	str	r3, [r7, #32]
 8001126:	7dfb      	ldrb	r3, [r7, #23]
 8001128:	6a3a      	ldr	r2, [r7, #32]
 800112a:	429a      	cmp	r2, r3
 800112c:	f6ff af6f 	blt.w	800100e <slideText+0x4e>
 8001130:	e000      	b.n	8001134 <slideText+0x174>
				break;
 8001132:	bf00      	nop
	while(mainLoopVal == 1) {
 8001134:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001136:	2b01      	cmp	r3, #1
 8001138:	f43f af51 	beq.w	8000fde <slideText+0x1e>
			    }
			}
		}
	}
}
 800113c:	e000      	b.n	8001140 <slideText+0x180>
			break;
 800113e:	bf00      	nop
}
 8001140:	bf00      	nop
 8001142:	3728      	adds	r7, #40	@ 0x28
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	200010a0 	.word	0x200010a0
 800114c:	20001098 	.word	0x20001098

08001150 <printCredentials>:

void printCredentials(int type) {
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
	if(type == 1) {
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d10f      	bne.n	800117e <printCredentials+0x2e>
		//machine id yazdır
		lcd_print(1, 1, machineIDText);
 800115e:	4a33      	ldr	r2, [pc, #204]	@ (800122c <printCredentials+0xdc>)
 8001160:	2101      	movs	r1, #1
 8001162:	2001      	movs	r0, #1
 8001164:	f007 fb38 	bl	80087d8 <lcd_print>
		lcd_print(2, 1, machineID);
 8001168:	4a31      	ldr	r2, [pc, #196]	@ (8001230 <printCredentials+0xe0>)
 800116a:	2101      	movs	r1, #1
 800116c:	2002      	movs	r0, #2
 800116e:	f007 fb33 	bl	80087d8 <lcd_print>
		lcd_print(2, 13, "    ");
 8001172:	4a30      	ldr	r2, [pc, #192]	@ (8001234 <printCredentials+0xe4>)
 8001174:	210d      	movs	r1, #13
 8001176:	2002      	movs	r0, #2
 8001178:	f007 fb2e 	bl	80087d8 <lcd_print>
		} else {
			//Eğer pass 16'dan büyükse kayarak yazdır
			slideText(wifiPass, 1, 2, 1);
		}
	}
}
 800117c:	e051      	b.n	8001222 <printCredentials+0xd2>
	} else if(type == 2) {
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	2b02      	cmp	r3, #2
 8001182:	d127      	bne.n	80011d4 <printCredentials+0x84>
		int ssidLength = strlen(wifiSSID);
 8001184:	482c      	ldr	r0, [pc, #176]	@ (8001238 <printCredentials+0xe8>)
 8001186:	f7ff f84d 	bl	8000224 <strlen>
 800118a:	4603      	mov	r3, r0
 800118c:	60bb      	str	r3, [r7, #8]
		lcd_print(1, 1, "WIFI SSID       ");
 800118e:	4a2b      	ldr	r2, [pc, #172]	@ (800123c <printCredentials+0xec>)
 8001190:	2101      	movs	r1, #1
 8001192:	2001      	movs	r0, #1
 8001194:	f007 fb20 	bl	80087d8 <lcd_print>
		if(ssidLength == 16) {
 8001198:	68bb      	ldr	r3, [r7, #8]
 800119a:	2b10      	cmp	r3, #16
 800119c:	d105      	bne.n	80011aa <printCredentials+0x5a>
			lcd_print(2, 1, wifiSSID);
 800119e:	4a26      	ldr	r2, [pc, #152]	@ (8001238 <printCredentials+0xe8>)
 80011a0:	2101      	movs	r1, #1
 80011a2:	2002      	movs	r0, #2
 80011a4:	f007 fb18 	bl	80087d8 <lcd_print>
}
 80011a8:	e03b      	b.n	8001222 <printCredentials+0xd2>
		} else if(ssidLength < 16) {
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	2b0f      	cmp	r3, #15
 80011ae:	dc0a      	bgt.n	80011c6 <printCredentials+0x76>
			lcd_print(2, 1, "                ");
 80011b0:	4a23      	ldr	r2, [pc, #140]	@ (8001240 <printCredentials+0xf0>)
 80011b2:	2101      	movs	r1, #1
 80011b4:	2002      	movs	r0, #2
 80011b6:	f007 fb0f 	bl	80087d8 <lcd_print>
			lcd_print(2, 1, wifiSSID);
 80011ba:	4a1f      	ldr	r2, [pc, #124]	@ (8001238 <printCredentials+0xe8>)
 80011bc:	2101      	movs	r1, #1
 80011be:	2002      	movs	r0, #2
 80011c0:	f007 fb0a 	bl	80087d8 <lcd_print>
}
 80011c4:	e02d      	b.n	8001222 <printCredentials+0xd2>
			slideText(wifiSSID, 1, 2, 0);
 80011c6:	2300      	movs	r3, #0
 80011c8:	2202      	movs	r2, #2
 80011ca:	2101      	movs	r1, #1
 80011cc:	481a      	ldr	r0, [pc, #104]	@ (8001238 <printCredentials+0xe8>)
 80011ce:	f7ff fef7 	bl	8000fc0 <slideText>
}
 80011d2:	e026      	b.n	8001222 <printCredentials+0xd2>
		int passLength = strlen(wifiPass);
 80011d4:	481b      	ldr	r0, [pc, #108]	@ (8001244 <printCredentials+0xf4>)
 80011d6:	f7ff f825 	bl	8000224 <strlen>
 80011da:	4603      	mov	r3, r0
 80011dc:	60fb      	str	r3, [r7, #12]
		lcd_print(1, 1, "WIFI PASS       ");
 80011de:	4a1a      	ldr	r2, [pc, #104]	@ (8001248 <printCredentials+0xf8>)
 80011e0:	2101      	movs	r1, #1
 80011e2:	2001      	movs	r0, #1
 80011e4:	f007 faf8 	bl	80087d8 <lcd_print>
		if(passLength == 16) {
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	2b10      	cmp	r3, #16
 80011ec:	d105      	bne.n	80011fa <printCredentials+0xaa>
			lcd_print(2, 1, wifiPass);
 80011ee:	4a15      	ldr	r2, [pc, #84]	@ (8001244 <printCredentials+0xf4>)
 80011f0:	2101      	movs	r1, #1
 80011f2:	2002      	movs	r0, #2
 80011f4:	f007 faf0 	bl	80087d8 <lcd_print>
}
 80011f8:	e013      	b.n	8001222 <printCredentials+0xd2>
		} else if(passLength < 16) {
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	2b0f      	cmp	r3, #15
 80011fe:	dc0a      	bgt.n	8001216 <printCredentials+0xc6>
			lcd_print(2, 1, "                ");
 8001200:	4a0f      	ldr	r2, [pc, #60]	@ (8001240 <printCredentials+0xf0>)
 8001202:	2101      	movs	r1, #1
 8001204:	2002      	movs	r0, #2
 8001206:	f007 fae7 	bl	80087d8 <lcd_print>
			lcd_print(2, 1, wifiPass);
 800120a:	4a0e      	ldr	r2, [pc, #56]	@ (8001244 <printCredentials+0xf4>)
 800120c:	2101      	movs	r1, #1
 800120e:	2002      	movs	r0, #2
 8001210:	f007 fae2 	bl	80087d8 <lcd_print>
}
 8001214:	e005      	b.n	8001222 <printCredentials+0xd2>
			slideText(wifiPass, 1, 2, 1);
 8001216:	2301      	movs	r3, #1
 8001218:	2202      	movs	r2, #2
 800121a:	2101      	movs	r1, #1
 800121c:	4809      	ldr	r0, [pc, #36]	@ (8001244 <printCredentials+0xf4>)
 800121e:	f7ff fecf 	bl	8000fc0 <slideText>
}
 8001222:	bf00      	nop
 8001224:	3710      	adds	r7, #16
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	200018a4 	.word	0x200018a4
 8001230:	20001040 	.word	0x20001040
 8001234:	0800db2c 	.word	0x0800db2c
 8001238:	2000104c 	.word	0x2000104c
 800123c:	0800db34 	.word	0x0800db34
 8001240:	0800db48 	.word	0x0800db48
 8001244:	20001060 	.word	0x20001060
 8001248:	0800db5c 	.word	0x0800db5c

0800124c <checkEditMode>:

void checkEditMode(void) {
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1)) {
 8001250:	2102      	movs	r1, #2
 8001252:	4809      	ldr	r0, [pc, #36]	@ (8001278 <checkEditMode+0x2c>)
 8001254:	f008 fdea 	bl	8009e2c <HAL_GPIO_ReadPin>
 8001258:	4603      	mov	r3, r0
 800125a:	2b01      	cmp	r3, #1
 800125c:	d109      	bne.n	8001272 <checkEditMode+0x26>
 800125e:	2104      	movs	r1, #4
 8001260:	4805      	ldr	r0, [pc, #20]	@ (8001278 <checkEditMode+0x2c>)
 8001262:	f008 fde3 	bl	8009e2c <HAL_GPIO_ReadPin>
 8001266:	4603      	mov	r3, r0
 8001268:	2b01      	cmp	r3, #1
 800126a:	d102      	bne.n	8001272 <checkEditMode+0x26>
		editMode = 1;
 800126c:	4b03      	ldr	r3, [pc, #12]	@ (800127c <checkEditMode+0x30>)
 800126e:	2201      	movs	r2, #1
 8001270:	601a      	str	r2, [r3, #0]
	}
}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40010800 	.word	0x40010800
 800127c:	20001098 	.word	0x20001098

08001280 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001284:	f3bf 8f4f 	dsb	sy
}
 8001288:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800128a:	4b06      	ldr	r3, [pc, #24]	@ (80012a4 <__NVIC_SystemReset+0x24>)
 800128c:	68db      	ldr	r3, [r3, #12]
 800128e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8001292:	4904      	ldr	r1, [pc, #16]	@ (80012a4 <__NVIC_SystemReset+0x24>)
 8001294:	4b04      	ldr	r3, [pc, #16]	@ (80012a8 <__NVIC_SystemReset+0x28>)
 8001296:	4313      	orrs	r3, r2
 8001298:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800129a:	f3bf 8f4f 	dsb	sy
}
 800129e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80012a0:	bf00      	nop
 80012a2:	e7fd      	b.n	80012a0 <__NVIC_SystemReset+0x20>
 80012a4:	e000ed00 	.word	0xe000ed00
 80012a8:	05fa0004 	.word	0x05fa0004

080012ac <menu>:
#include "WifiProcess.h"
#include "IoTMenu.h"
#include "TextVariables.h"
#include "Translation.h"

void menu() {
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af04      	add	r7, sp, #16
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 80012b2:	2101      	movs	r1, #1
 80012b4:	488e      	ldr	r0, [pc, #568]	@ (80014f0 <menu+0x244>)
 80012b6:	f008 fdb9 	bl	8009e2c <HAL_GPIO_ReadPin>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b01      	cmp	r3, #1
 80012be:	f040 8099 	bne.w	80013f4 <menu+0x148>
 80012c2:	4b8c      	ldr	r3, [pc, #560]	@ (80014f4 <menu+0x248>)
 80012c4:	781b      	ldrb	r3, [r3, #0]
 80012c6:	f083 0301 	eor.w	r3, r3, #1
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	f000 8091 	beq.w	80013f4 <menu+0x148>
		menuSayac = menuSayac+1;
 80012d2:	4b89      	ldr	r3, [pc, #548]	@ (80014f8 <menu+0x24c>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	3301      	adds	r3, #1
 80012d8:	b2da      	uxtb	r2, r3
 80012da:	4b87      	ldr	r3, [pc, #540]	@ (80014f8 <menu+0x24c>)
 80012dc:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 80012de:	4b86      	ldr	r3, [pc, #536]	@ (80014f8 <menu+0x24c>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	2b24      	cmp	r3, #36	@ 0x24
 80012e4:	d102      	bne.n	80012ec <menu+0x40>
			menuSayac = 1;
 80012e6:	4b84      	ldr	r3, [pc, #528]	@ (80014f8 <menu+0x24c>)
 80012e8:	2201      	movs	r2, #1
 80012ea:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 80012ec:	4b82      	ldr	r3, [pc, #520]	@ (80014f8 <menu+0x24c>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	2b12      	cmp	r3, #18
 80012f2:	d106      	bne.n	8001302 <menu+0x56>
 80012f4:	4b81      	ldr	r3, [pc, #516]	@ (80014fc <menu+0x250>)
 80012f6:	781b      	ldrb	r3, [r3, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d102      	bne.n	8001302 <menu+0x56>
			menuSayac = 21;
 80012fc:	4b7e      	ldr	r3, [pc, #504]	@ (80014f8 <menu+0x24c>)
 80012fe:	2215      	movs	r2, #21
 8001300:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 8001302:	4b7d      	ldr	r3, [pc, #500]	@ (80014f8 <menu+0x24c>)
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b08      	cmp	r3, #8
 8001308:	d106      	bne.n	8001318 <menu+0x6c>
 800130a:	4b7d      	ldr	r3, [pc, #500]	@ (8001500 <menu+0x254>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d102      	bne.n	8001318 <menu+0x6c>
			menuSayac = 16;
 8001312:	4b79      	ldr	r3, [pc, #484]	@ (80014f8 <menu+0x24c>)
 8001314:	2210      	movs	r2, #16
 8001316:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 8001318:	4b77      	ldr	r3, [pc, #476]	@ (80014f8 <menu+0x24c>)
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b0d      	cmp	r3, #13
 800131e:	d106      	bne.n	800132e <menu+0x82>
 8001320:	4b77      	ldr	r3, [pc, #476]	@ (8001500 <menu+0x254>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b01      	cmp	r3, #1
 8001326:	d102      	bne.n	800132e <menu+0x82>
			menuSayac = 16;
 8001328:	4b73      	ldr	r3, [pc, #460]	@ (80014f8 <menu+0x24c>)
 800132a:	2210      	movs	r2, #16
 800132c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 800132e:	4b72      	ldr	r3, [pc, #456]	@ (80014f8 <menu+0x24c>)
 8001330:	781b      	ldrb	r3, [r3, #0]
 8001332:	2b09      	cmp	r3, #9
 8001334:	d106      	bne.n	8001344 <menu+0x98>
 8001336:	4b72      	ldr	r3, [pc, #456]	@ (8001500 <menu+0x254>)
 8001338:	781b      	ldrb	r3, [r3, #0]
 800133a:	2b02      	cmp	r3, #2
 800133c:	d102      	bne.n	8001344 <menu+0x98>
			menuSayac = 13;
 800133e:	4b6e      	ldr	r3, [pc, #440]	@ (80014f8 <menu+0x24c>)
 8001340:	220d      	movs	r2, #13
 8001342:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001344:	4b6c      	ldr	r3, [pc, #432]	@ (80014f8 <menu+0x24c>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b0a      	cmp	r3, #10
 800134a:	d10a      	bne.n	8001362 <menu+0xb6>
 800134c:	4b6d      	ldr	r3, [pc, #436]	@ (8001504 <menu+0x258>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d003      	beq.n	800135c <menu+0xb0>
 8001354:	4b6b      	ldr	r3, [pc, #428]	@ (8001504 <menu+0x258>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b02      	cmp	r3, #2
 800135a:	d102      	bne.n	8001362 <menu+0xb6>
			menuSayac = 11;
 800135c:	4b66      	ldr	r3, [pc, #408]	@ (80014f8 <menu+0x24c>)
 800135e:	220b      	movs	r2, #11
 8001360:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 8001362:	4b65      	ldr	r3, [pc, #404]	@ (80014f8 <menu+0x24c>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	2b0c      	cmp	r3, #12
 8001368:	d10e      	bne.n	8001388 <menu+0xdc>
 800136a:	4b67      	ldr	r3, [pc, #412]	@ (8001508 <menu+0x25c>)
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	2b01      	cmp	r3, #1
 8001370:	d003      	beq.n	800137a <menu+0xce>
 8001372:	4b65      	ldr	r3, [pc, #404]	@ (8001508 <menu+0x25c>)
 8001374:	781b      	ldrb	r3, [r3, #0]
 8001376:	2b02      	cmp	r3, #2
 8001378:	d106      	bne.n	8001388 <menu+0xdc>
 800137a:	4b61      	ldr	r3, [pc, #388]	@ (8001500 <menu+0x254>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	2b01      	cmp	r3, #1
 8001380:	d102      	bne.n	8001388 <menu+0xdc>
			menuSayac = 16;
 8001382:	4b5d      	ldr	r3, [pc, #372]	@ (80014f8 <menu+0x24c>)
 8001384:	2210      	movs	r2, #16
 8001386:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 8001388:	4b5b      	ldr	r3, [pc, #364]	@ (80014f8 <menu+0x24c>)
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	2b0c      	cmp	r3, #12
 800138e:	d10e      	bne.n	80013ae <menu+0x102>
 8001390:	4b5d      	ldr	r3, [pc, #372]	@ (8001508 <menu+0x25c>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d003      	beq.n	80013a0 <menu+0xf4>
 8001398:	4b5b      	ldr	r3, [pc, #364]	@ (8001508 <menu+0x25c>)
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	2b02      	cmp	r3, #2
 800139e:	d106      	bne.n	80013ae <menu+0x102>
 80013a0:	4b57      	ldr	r3, [pc, #348]	@ (8001500 <menu+0x254>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	2b03      	cmp	r3, #3
 80013a6:	d102      	bne.n	80013ae <menu+0x102>
			menuSayac = 13;
 80013a8:	4b53      	ldr	r3, [pc, #332]	@ (80014f8 <menu+0x24c>)
 80013aa:	220d      	movs	r2, #13
 80013ac:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80013ae:	4b52      	ldr	r3, [pc, #328]	@ (80014f8 <menu+0x24c>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b0f      	cmp	r3, #15
 80013b4:	d106      	bne.n	80013c4 <menu+0x118>
 80013b6:	4b55      	ldr	r3, [pc, #340]	@ (800150c <menu+0x260>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d102      	bne.n	80013c4 <menu+0x118>
			menuSayac = 16;
 80013be:	4b4e      	ldr	r3, [pc, #312]	@ (80014f8 <menu+0x24c>)
 80013c0:	2210      	movs	r2, #16
 80013c2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 80013c4:	4b4c      	ldr	r3, [pc, #304]	@ (80014f8 <menu+0x24c>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b18      	cmp	r3, #24
 80013ca:	d106      	bne.n	80013da <menu+0x12e>
 80013cc:	4b4b      	ldr	r3, [pc, #300]	@ (80014fc <menu+0x250>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d102      	bne.n	80013da <menu+0x12e>
			menuSayac = 26;
 80013d4:	4b48      	ldr	r3, [pc, #288]	@ (80014f8 <menu+0x24c>)
 80013d6:	221a      	movs	r2, #26
 80013d8:	701a      	strb	r2, [r3, #0]
		}

		if(menuSayac == 33 && iotMode == 0) {
 80013da:	4b47      	ldr	r3, [pc, #284]	@ (80014f8 <menu+0x24c>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	2b21      	cmp	r3, #33	@ 0x21
 80013e0:	d106      	bne.n	80013f0 <menu+0x144>
 80013e2:	4b4b      	ldr	r3, [pc, #300]	@ (8001510 <menu+0x264>)
 80013e4:	781b      	ldrb	r3, [r3, #0]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d102      	bne.n	80013f0 <menu+0x144>
			menuSayac = 35;
 80013ea:	4b43      	ldr	r3, [pc, #268]	@ (80014f8 <menu+0x24c>)
 80013ec:	2223      	movs	r2, #35	@ 0x23
 80013ee:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80013f0:	f002 fc9a 	bl	8003d28 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 80013f4:	2108      	movs	r1, #8
 80013f6:	4847      	ldr	r0, [pc, #284]	@ (8001514 <menu+0x268>)
 80013f8:	f008 fd18 	bl	8009e2c <HAL_GPIO_ReadPin>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b01      	cmp	r3, #1
 8001400:	f040 8097 	bne.w	8001532 <menu+0x286>
 8001404:	4b3b      	ldr	r3, [pc, #236]	@ (80014f4 <menu+0x248>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	f083 0301 	eor.w	r3, r3, #1
 800140c:	b2db      	uxtb	r3, r3
 800140e:	2b00      	cmp	r3, #0
 8001410:	f000 808f 	beq.w	8001532 <menu+0x286>
		if (menuSayac <= 1) {
 8001414:	4b38      	ldr	r3, [pc, #224]	@ (80014f8 <menu+0x24c>)
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	2b01      	cmp	r3, #1
 800141a:	d802      	bhi.n	8001422 <menu+0x176>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 800141c:	4b36      	ldr	r3, [pc, #216]	@ (80014f8 <menu+0x24c>)
 800141e:	2224      	movs	r2, #36	@ 0x24
 8001420:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 8001422:	4b35      	ldr	r3, [pc, #212]	@ (80014f8 <menu+0x24c>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	3b01      	subs	r3, #1
 8001428:	b2da      	uxtb	r2, r3
 800142a:	4b33      	ldr	r3, [pc, #204]	@ (80014f8 <menu+0x24c>)
 800142c:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 800142e:	4b32      	ldr	r3, [pc, #200]	@ (80014f8 <menu+0x24c>)
 8001430:	781b      	ldrb	r3, [r3, #0]
 8001432:	2b14      	cmp	r3, #20
 8001434:	d106      	bne.n	8001444 <menu+0x198>
 8001436:	4b31      	ldr	r3, [pc, #196]	@ (80014fc <menu+0x250>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d102      	bne.n	8001444 <menu+0x198>
			menuSayac = 17;
 800143e:	4b2e      	ldr	r3, [pc, #184]	@ (80014f8 <menu+0x24c>)
 8001440:	2211      	movs	r2, #17
 8001442:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 8001444:	4b2c      	ldr	r3, [pc, #176]	@ (80014f8 <menu+0x24c>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b0f      	cmp	r3, #15
 800144a:	d106      	bne.n	800145a <menu+0x1ae>
 800144c:	4b2c      	ldr	r3, [pc, #176]	@ (8001500 <menu+0x254>)
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d102      	bne.n	800145a <menu+0x1ae>
			menuSayac = 7;
 8001454:	4b28      	ldr	r3, [pc, #160]	@ (80014f8 <menu+0x24c>)
 8001456:	2207      	movs	r2, #7
 8001458:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 800145a:	4b27      	ldr	r3, [pc, #156]	@ (80014f8 <menu+0x24c>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b0f      	cmp	r3, #15
 8001460:	d106      	bne.n	8001470 <menu+0x1c4>
 8001462:	4b27      	ldr	r3, [pc, #156]	@ (8001500 <menu+0x254>)
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d102      	bne.n	8001470 <menu+0x1c4>
			menuSayac = 12;
 800146a:	4b23      	ldr	r3, [pc, #140]	@ (80014f8 <menu+0x24c>)
 800146c:	220c      	movs	r2, #12
 800146e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8001470:	4b21      	ldr	r3, [pc, #132]	@ (80014f8 <menu+0x24c>)
 8001472:	781b      	ldrb	r3, [r3, #0]
 8001474:	2b0c      	cmp	r3, #12
 8001476:	d106      	bne.n	8001486 <menu+0x1da>
 8001478:	4b21      	ldr	r3, [pc, #132]	@ (8001500 <menu+0x254>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b02      	cmp	r3, #2
 800147e:	d102      	bne.n	8001486 <menu+0x1da>
			menuSayac = 8;
 8001480:	4b1d      	ldr	r3, [pc, #116]	@ (80014f8 <menu+0x24c>)
 8001482:	2208      	movs	r2, #8
 8001484:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001486:	4b1c      	ldr	r3, [pc, #112]	@ (80014f8 <menu+0x24c>)
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2b0a      	cmp	r3, #10
 800148c:	d10a      	bne.n	80014a4 <menu+0x1f8>
 800148e:	4b1d      	ldr	r3, [pc, #116]	@ (8001504 <menu+0x258>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d003      	beq.n	800149e <menu+0x1f2>
 8001496:	4b1b      	ldr	r3, [pc, #108]	@ (8001504 <menu+0x258>)
 8001498:	781b      	ldrb	r3, [r3, #0]
 800149a:	2b02      	cmp	r3, #2
 800149c:	d102      	bne.n	80014a4 <menu+0x1f8>
			menuSayac = 9;
 800149e:	4b16      	ldr	r3, [pc, #88]	@ (80014f8 <menu+0x24c>)
 80014a0:	2209      	movs	r2, #9
 80014a2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 80014a4:	4b14      	ldr	r3, [pc, #80]	@ (80014f8 <menu+0x24c>)
 80014a6:	781b      	ldrb	r3, [r3, #0]
 80014a8:	2b0c      	cmp	r3, #12
 80014aa:	d10a      	bne.n	80014c2 <menu+0x216>
 80014ac:	4b16      	ldr	r3, [pc, #88]	@ (8001508 <menu+0x25c>)
 80014ae:	781b      	ldrb	r3, [r3, #0]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d003      	beq.n	80014bc <menu+0x210>
 80014b4:	4b14      	ldr	r3, [pc, #80]	@ (8001508 <menu+0x25c>)
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	2b02      	cmp	r3, #2
 80014ba:	d102      	bne.n	80014c2 <menu+0x216>
			menuSayac = 11;
 80014bc:	4b0e      	ldr	r3, [pc, #56]	@ (80014f8 <menu+0x24c>)
 80014be:	220b      	movs	r2, #11
 80014c0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80014c2:	4b0d      	ldr	r3, [pc, #52]	@ (80014f8 <menu+0x24c>)
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	2b0f      	cmp	r3, #15
 80014c8:	d106      	bne.n	80014d8 <menu+0x22c>
 80014ca:	4b10      	ldr	r3, [pc, #64]	@ (800150c <menu+0x260>)
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d102      	bne.n	80014d8 <menu+0x22c>
			menuSayac = 14;
 80014d2:	4b09      	ldr	r3, [pc, #36]	@ (80014f8 <menu+0x24c>)
 80014d4:	220e      	movs	r2, #14
 80014d6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 80014d8:	4b07      	ldr	r3, [pc, #28]	@ (80014f8 <menu+0x24c>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	2b19      	cmp	r3, #25
 80014de:	d11b      	bne.n	8001518 <menu+0x26c>
 80014e0:	4b06      	ldr	r3, [pc, #24]	@ (80014fc <menu+0x250>)
 80014e2:	781b      	ldrb	r3, [r3, #0]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d117      	bne.n	8001518 <menu+0x26c>
			menuSayac = 23;
 80014e8:	4b03      	ldr	r3, [pc, #12]	@ (80014f8 <menu+0x24c>)
 80014ea:	2217      	movs	r2, #23
 80014ec:	701a      	strb	r2, [r3, #0]
 80014ee:	e013      	b.n	8001518 <menu+0x26c>
 80014f0:	40010800 	.word	0x40010800
 80014f4:	200010cf 	.word	0x200010cf
 80014f8:	200010a0 	.word	0x200010a0
 80014fc:	200010af 	.word	0x200010af
 8001500:	200010a8 	.word	0x200010a8
 8001504:	200010a9 	.word	0x200010a9
 8001508:	200010aa 	.word	0x200010aa
 800150c:	200010ab 	.word	0x200010ab
 8001510:	200010bf 	.word	0x200010bf
 8001514:	40011000 	.word	0x40011000
		}

		if(menuSayac == 34 && iotMode == 0) {
 8001518:	4bb0      	ldr	r3, [pc, #704]	@ (80017dc <menu+0x530>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b22      	cmp	r3, #34	@ 0x22
 800151e:	d106      	bne.n	800152e <menu+0x282>
 8001520:	4baf      	ldr	r3, [pc, #700]	@ (80017e0 <menu+0x534>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d102      	bne.n	800152e <menu+0x282>
			menuSayac = 32;
 8001528:	4bac      	ldr	r3, [pc, #688]	@ (80017dc <menu+0x530>)
 800152a:	2220      	movs	r2, #32
 800152c:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 800152e:	f002 fbfb 	bl	8003d28 <bekle>
	}

	if (menuSayac == 0) {
 8001532:	4baa      	ldr	r3, [pc, #680]	@ (80017dc <menu+0x530>)
 8001534:	781b      	ldrb	r3, [r3, #0]
 8001536:	2b00      	cmp	r3, #0
 8001538:	d109      	bne.n	800154e <menu+0x2a2>
		lcd_print(1, 1, menuyeGirildiText);
 800153a:	4aaa      	ldr	r2, [pc, #680]	@ (80017e4 <menu+0x538>)
 800153c:	2101      	movs	r1, #1
 800153e:	2001      	movs	r0, #1
 8001540:	f007 f94a 	bl	80087d8 <lcd_print>
		lcd_print(2, 1, ayarlarText);
 8001544:	4aa8      	ldr	r2, [pc, #672]	@ (80017e8 <menu+0x53c>)
 8001546:	2101      	movs	r1, #1
 8001548:	2002      	movs	r0, #2
 800154a:	f007 f945 	bl	80087d8 <lcd_print>
	}

	if (menuSayac == 1) {
 800154e:	4ba3      	ldr	r3, [pc, #652]	@ (80017dc <menu+0x530>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	2b01      	cmp	r3, #1
 8001554:	f040 81f4 	bne.w	8001940 <menu+0x694>
		lcd_print(1, 1, hataKayitListText);
 8001558:	4aa4      	ldr	r2, [pc, #656]	@ (80017ec <menu+0x540>)
 800155a:	2101      	movs	r1, #1
 800155c:	2001      	movs	r0, #1
 800155e:	f007 f93b 	bl	80087d8 <lcd_print>

		if(hataGostermeSirasi == 0) {
 8001562:	4ba3      	ldr	r3, [pc, #652]	@ (80017f0 <menu+0x544>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d115      	bne.n	8001596 <menu+0x2ea>
			lcd_print(2, 1, birHataKoduText);
 800156a:	4aa2      	ldr	r2, [pc, #648]	@ (80017f4 <menu+0x548>)
 800156c:	2101      	movs	r1, #1
 800156e:	2002      	movs	r0, #2
 8001570:	f007 f932 	bl	80087d8 <lcd_print>
			lcd_print(2, 15, "   ");
 8001574:	4aa0      	ldr	r2, [pc, #640]	@ (80017f8 <menu+0x54c>)
 8001576:	210f      	movs	r1, #15
 8001578:	2002      	movs	r0, #2
 800157a:	f007 f92d 	bl	80087d8 <lcd_print>
			itoa(hataKayit1, snum, 10);
 800157e:	4b9f      	ldr	r3, [pc, #636]	@ (80017fc <menu+0x550>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	220a      	movs	r2, #10
 8001584:	499e      	ldr	r1, [pc, #632]	@ (8001800 <menu+0x554>)
 8001586:	4618      	mov	r0, r3
 8001588:	f00b fc7c 	bl	800ce84 <itoa>
			lcd_print(2, 14, snum);
 800158c:	4a9c      	ldr	r2, [pc, #624]	@ (8001800 <menu+0x554>)
 800158e:	210e      	movs	r1, #14
 8001590:	2002      	movs	r0, #2
 8001592:	f007 f921 	bl	80087d8 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 8001596:	4b96      	ldr	r3, [pc, #600]	@ (80017f0 <menu+0x544>)
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d115      	bne.n	80015ca <menu+0x31e>
			lcd_print(2, 1, ikiHataKoduText);
 800159e:	4a99      	ldr	r2, [pc, #612]	@ (8001804 <menu+0x558>)
 80015a0:	2101      	movs	r1, #1
 80015a2:	2002      	movs	r0, #2
 80015a4:	f007 f918 	bl	80087d8 <lcd_print>
			lcd_print(2, 15, "  ");
 80015a8:	4a97      	ldr	r2, [pc, #604]	@ (8001808 <menu+0x55c>)
 80015aa:	210f      	movs	r1, #15
 80015ac:	2002      	movs	r0, #2
 80015ae:	f007 f913 	bl	80087d8 <lcd_print>
			itoa(hataKayit2, snum, 10);
 80015b2:	4b96      	ldr	r3, [pc, #600]	@ (800180c <menu+0x560>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	220a      	movs	r2, #10
 80015b8:	4991      	ldr	r1, [pc, #580]	@ (8001800 <menu+0x554>)
 80015ba:	4618      	mov	r0, r3
 80015bc:	f00b fc62 	bl	800ce84 <itoa>
			lcd_print(2, 14, snum);
 80015c0:	4a8f      	ldr	r2, [pc, #572]	@ (8001800 <menu+0x554>)
 80015c2:	210e      	movs	r1, #14
 80015c4:	2002      	movs	r0, #2
 80015c6:	f007 f907 	bl	80087d8 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 80015ca:	4b89      	ldr	r3, [pc, #548]	@ (80017f0 <menu+0x544>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d115      	bne.n	80015fe <menu+0x352>
			lcd_print(2, 1, ucHataKoduText);
 80015d2:	4a8f      	ldr	r2, [pc, #572]	@ (8001810 <menu+0x564>)
 80015d4:	2101      	movs	r1, #1
 80015d6:	2002      	movs	r0, #2
 80015d8:	f007 f8fe 	bl	80087d8 <lcd_print>
			lcd_print(2, 15, "  ");
 80015dc:	4a8a      	ldr	r2, [pc, #552]	@ (8001808 <menu+0x55c>)
 80015de:	210f      	movs	r1, #15
 80015e0:	2002      	movs	r0, #2
 80015e2:	f007 f8f9 	bl	80087d8 <lcd_print>
			itoa(hataKayit3, snum, 10);
 80015e6:	4b8b      	ldr	r3, [pc, #556]	@ (8001814 <menu+0x568>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	220a      	movs	r2, #10
 80015ec:	4984      	ldr	r1, [pc, #528]	@ (8001800 <menu+0x554>)
 80015ee:	4618      	mov	r0, r3
 80015f0:	f00b fc48 	bl	800ce84 <itoa>
			lcd_print(2, 14, snum);
 80015f4:	4a82      	ldr	r2, [pc, #520]	@ (8001800 <menu+0x554>)
 80015f6:	210e      	movs	r1, #14
 80015f8:	2002      	movs	r0, #2
 80015fa:	f007 f8ed 	bl	80087d8 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 80015fe:	4b7c      	ldr	r3, [pc, #496]	@ (80017f0 <menu+0x544>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	2b03      	cmp	r3, #3
 8001604:	d115      	bne.n	8001632 <menu+0x386>
			lcd_print(2, 1, dortHataKoduText);
 8001606:	4a84      	ldr	r2, [pc, #528]	@ (8001818 <menu+0x56c>)
 8001608:	2101      	movs	r1, #1
 800160a:	2002      	movs	r0, #2
 800160c:	f007 f8e4 	bl	80087d8 <lcd_print>
			lcd_print(2, 15, "  ");
 8001610:	4a7d      	ldr	r2, [pc, #500]	@ (8001808 <menu+0x55c>)
 8001612:	210f      	movs	r1, #15
 8001614:	2002      	movs	r0, #2
 8001616:	f007 f8df 	bl	80087d8 <lcd_print>
			itoa(hataKayit4, snum, 10);
 800161a:	4b80      	ldr	r3, [pc, #512]	@ (800181c <menu+0x570>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	220a      	movs	r2, #10
 8001620:	4977      	ldr	r1, [pc, #476]	@ (8001800 <menu+0x554>)
 8001622:	4618      	mov	r0, r3
 8001624:	f00b fc2e 	bl	800ce84 <itoa>
			lcd_print(2, 14, snum);
 8001628:	4a75      	ldr	r2, [pc, #468]	@ (8001800 <menu+0x554>)
 800162a:	210e      	movs	r1, #14
 800162c:	2002      	movs	r0, #2
 800162e:	f007 f8d3 	bl	80087d8 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 8001632:	4b6f      	ldr	r3, [pc, #444]	@ (80017f0 <menu+0x544>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	2b04      	cmp	r3, #4
 8001638:	d115      	bne.n	8001666 <menu+0x3ba>
			lcd_print(2, 1, besHataKoduText);
 800163a:	4a79      	ldr	r2, [pc, #484]	@ (8001820 <menu+0x574>)
 800163c:	2101      	movs	r1, #1
 800163e:	2002      	movs	r0, #2
 8001640:	f007 f8ca 	bl	80087d8 <lcd_print>
			lcd_print(2, 15, "  ");
 8001644:	4a70      	ldr	r2, [pc, #448]	@ (8001808 <menu+0x55c>)
 8001646:	210f      	movs	r1, #15
 8001648:	2002      	movs	r0, #2
 800164a:	f007 f8c5 	bl	80087d8 <lcd_print>
			itoa(hataKayit5, snum, 10);
 800164e:	4b75      	ldr	r3, [pc, #468]	@ (8001824 <menu+0x578>)
 8001650:	781b      	ldrb	r3, [r3, #0]
 8001652:	220a      	movs	r2, #10
 8001654:	496a      	ldr	r1, [pc, #424]	@ (8001800 <menu+0x554>)
 8001656:	4618      	mov	r0, r3
 8001658:	f00b fc14 	bl	800ce84 <itoa>
			lcd_print(2, 14, snum);
 800165c:	4a68      	ldr	r2, [pc, #416]	@ (8001800 <menu+0x554>)
 800165e:	210e      	movs	r1, #14
 8001660:	2002      	movs	r0, #2
 8001662:	f007 f8b9 	bl	80087d8 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8001666:	4b62      	ldr	r3, [pc, #392]	@ (80017f0 <menu+0x544>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	2b05      	cmp	r3, #5
 800166c:	d115      	bne.n	800169a <menu+0x3ee>
			lcd_print(2, 1, altiHataKoduText);
 800166e:	4a6e      	ldr	r2, [pc, #440]	@ (8001828 <menu+0x57c>)
 8001670:	2101      	movs	r1, #1
 8001672:	2002      	movs	r0, #2
 8001674:	f007 f8b0 	bl	80087d8 <lcd_print>
			lcd_print(2, 15, "  ");
 8001678:	4a63      	ldr	r2, [pc, #396]	@ (8001808 <menu+0x55c>)
 800167a:	210f      	movs	r1, #15
 800167c:	2002      	movs	r0, #2
 800167e:	f007 f8ab 	bl	80087d8 <lcd_print>
			itoa(hataKayit6, snum, 10);
 8001682:	4b6a      	ldr	r3, [pc, #424]	@ (800182c <menu+0x580>)
 8001684:	781b      	ldrb	r3, [r3, #0]
 8001686:	220a      	movs	r2, #10
 8001688:	495d      	ldr	r1, [pc, #372]	@ (8001800 <menu+0x554>)
 800168a:	4618      	mov	r0, r3
 800168c:	f00b fbfa 	bl	800ce84 <itoa>
			lcd_print(2, 14, snum);
 8001690:	4a5b      	ldr	r2, [pc, #364]	@ (8001800 <menu+0x554>)
 8001692:	210e      	movs	r1, #14
 8001694:	2002      	movs	r0, #2
 8001696:	f007 f89f 	bl	80087d8 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 800169a:	4b55      	ldr	r3, [pc, #340]	@ (80017f0 <menu+0x544>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	2b06      	cmp	r3, #6
 80016a0:	d115      	bne.n	80016ce <menu+0x422>
			lcd_print(2, 1, yediHataKoduText);
 80016a2:	4a63      	ldr	r2, [pc, #396]	@ (8001830 <menu+0x584>)
 80016a4:	2101      	movs	r1, #1
 80016a6:	2002      	movs	r0, #2
 80016a8:	f007 f896 	bl	80087d8 <lcd_print>
			lcd_print(2, 15, "  ");
 80016ac:	4a56      	ldr	r2, [pc, #344]	@ (8001808 <menu+0x55c>)
 80016ae:	210f      	movs	r1, #15
 80016b0:	2002      	movs	r0, #2
 80016b2:	f007 f891 	bl	80087d8 <lcd_print>
			itoa(hataKayit7, snum, 10);
 80016b6:	4b5f      	ldr	r3, [pc, #380]	@ (8001834 <menu+0x588>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	220a      	movs	r2, #10
 80016bc:	4950      	ldr	r1, [pc, #320]	@ (8001800 <menu+0x554>)
 80016be:	4618      	mov	r0, r3
 80016c0:	f00b fbe0 	bl	800ce84 <itoa>
			lcd_print(2, 14, snum);
 80016c4:	4a4e      	ldr	r2, [pc, #312]	@ (8001800 <menu+0x554>)
 80016c6:	210e      	movs	r1, #14
 80016c8:	2002      	movs	r0, #2
 80016ca:	f007 f885 	bl	80087d8 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 80016ce:	4b48      	ldr	r3, [pc, #288]	@ (80017f0 <menu+0x544>)
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	2b07      	cmp	r3, #7
 80016d4:	d115      	bne.n	8001702 <menu+0x456>
			lcd_print(2, 1, sekizHataKoduText);
 80016d6:	4a58      	ldr	r2, [pc, #352]	@ (8001838 <menu+0x58c>)
 80016d8:	2101      	movs	r1, #1
 80016da:	2002      	movs	r0, #2
 80016dc:	f007 f87c 	bl	80087d8 <lcd_print>
			lcd_print(2, 15, "  ");
 80016e0:	4a49      	ldr	r2, [pc, #292]	@ (8001808 <menu+0x55c>)
 80016e2:	210f      	movs	r1, #15
 80016e4:	2002      	movs	r0, #2
 80016e6:	f007 f877 	bl	80087d8 <lcd_print>
			itoa(hataKayit8, snum, 10);
 80016ea:	4b54      	ldr	r3, [pc, #336]	@ (800183c <menu+0x590>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	220a      	movs	r2, #10
 80016f0:	4943      	ldr	r1, [pc, #268]	@ (8001800 <menu+0x554>)
 80016f2:	4618      	mov	r0, r3
 80016f4:	f00b fbc6 	bl	800ce84 <itoa>
			lcd_print(2, 14, snum);
 80016f8:	4a41      	ldr	r2, [pc, #260]	@ (8001800 <menu+0x554>)
 80016fa:	210e      	movs	r1, #14
 80016fc:	2002      	movs	r0, #2
 80016fe:	f007 f86b 	bl	80087d8 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8001702:	4b3b      	ldr	r3, [pc, #236]	@ (80017f0 <menu+0x544>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b08      	cmp	r3, #8
 8001708:	d115      	bne.n	8001736 <menu+0x48a>
			lcd_print(2, 1, dokuzHataKoduText);
 800170a:	4a4d      	ldr	r2, [pc, #308]	@ (8001840 <menu+0x594>)
 800170c:	2101      	movs	r1, #1
 800170e:	2002      	movs	r0, #2
 8001710:	f007 f862 	bl	80087d8 <lcd_print>
			lcd_print(2, 15, "  ");
 8001714:	4a3c      	ldr	r2, [pc, #240]	@ (8001808 <menu+0x55c>)
 8001716:	210f      	movs	r1, #15
 8001718:	2002      	movs	r0, #2
 800171a:	f007 f85d 	bl	80087d8 <lcd_print>
			itoa(hataKayit9, snum, 10);
 800171e:	4b49      	ldr	r3, [pc, #292]	@ (8001844 <menu+0x598>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	220a      	movs	r2, #10
 8001724:	4936      	ldr	r1, [pc, #216]	@ (8001800 <menu+0x554>)
 8001726:	4618      	mov	r0, r3
 8001728:	f00b fbac 	bl	800ce84 <itoa>
			lcd_print(2, 14, snum);
 800172c:	4a34      	ldr	r2, [pc, #208]	@ (8001800 <menu+0x554>)
 800172e:	210e      	movs	r1, #14
 8001730:	2002      	movs	r0, #2
 8001732:	f007 f851 	bl	80087d8 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8001736:	4b2e      	ldr	r3, [pc, #184]	@ (80017f0 <menu+0x544>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b09      	cmp	r3, #9
 800173c:	d115      	bne.n	800176a <menu+0x4be>
			lcd_print(2, 1, onHataKoduText);
 800173e:	4a42      	ldr	r2, [pc, #264]	@ (8001848 <menu+0x59c>)
 8001740:	2101      	movs	r1, #1
 8001742:	2002      	movs	r0, #2
 8001744:	f007 f848 	bl	80087d8 <lcd_print>
			lcd_print(2, 16, " ");
 8001748:	4a40      	ldr	r2, [pc, #256]	@ (800184c <menu+0x5a0>)
 800174a:	2110      	movs	r1, #16
 800174c:	2002      	movs	r0, #2
 800174e:	f007 f843 	bl	80087d8 <lcd_print>
			itoa(hataKayit10, snum, 10);
 8001752:	4b3f      	ldr	r3, [pc, #252]	@ (8001850 <menu+0x5a4>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	220a      	movs	r2, #10
 8001758:	4929      	ldr	r1, [pc, #164]	@ (8001800 <menu+0x554>)
 800175a:	4618      	mov	r0, r3
 800175c:	f00b fb92 	bl	800ce84 <itoa>
			lcd_print(2, 15, snum);
 8001760:	4a27      	ldr	r2, [pc, #156]	@ (8001800 <menu+0x554>)
 8001762:	210f      	movs	r1, #15
 8001764:	2002      	movs	r0, #2
 8001766:	f007 f837 	bl	80087d8 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 800176a:	4b21      	ldr	r3, [pc, #132]	@ (80017f0 <menu+0x544>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2b0a      	cmp	r3, #10
 8001770:	d104      	bne.n	800177c <menu+0x4d0>
			lcd_print(2, 1, silmekIcinText);
 8001772:	4a38      	ldr	r2, [pc, #224]	@ (8001854 <menu+0x5a8>)
 8001774:	2101      	movs	r1, #1
 8001776:	2002      	movs	r0, #2
 8001778:	f007 f82e 	bl	80087d8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 800177c:	2102      	movs	r1, #2
 800177e:	4836      	ldr	r0, [pc, #216]	@ (8001858 <menu+0x5ac>)
 8001780:	f008 fb54 	bl	8009e2c <HAL_GPIO_ReadPin>
 8001784:	4603      	mov	r3, r0
 8001786:	2b01      	cmp	r3, #1
 8001788:	d119      	bne.n	80017be <menu+0x512>
 800178a:	4b34      	ldr	r3, [pc, #208]	@ (800185c <menu+0x5b0>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	f083 0301 	eor.w	r3, r3, #1
 8001792:	b2db      	uxtb	r3, r3
 8001794:	2b00      	cmp	r3, #0
 8001796:	d012      	beq.n	80017be <menu+0x512>
 8001798:	4b31      	ldr	r3, [pc, #196]	@ (8001860 <menu+0x5b4>)
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d10e      	bne.n	80017be <menu+0x512>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 80017a0:	4b13      	ldr	r3, [pc, #76]	@ (80017f0 <menu+0x544>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	3301      	adds	r3, #1
 80017a6:	b2da      	uxtb	r2, r3
 80017a8:	4b11      	ldr	r3, [pc, #68]	@ (80017f0 <menu+0x544>)
 80017aa:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 80017ac:	4b10      	ldr	r3, [pc, #64]	@ (80017f0 <menu+0x544>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b0a      	cmp	r3, #10
 80017b2:	d902      	bls.n	80017ba <menu+0x50e>
				hataGostermeSirasi = 0;
 80017b4:	4b0e      	ldr	r3, [pc, #56]	@ (80017f0 <menu+0x544>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80017ba:	f002 fab5 	bl	8003d28 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80017be:	2104      	movs	r1, #4
 80017c0:	4825      	ldr	r0, [pc, #148]	@ (8001858 <menu+0x5ac>)
 80017c2:	f008 fb33 	bl	8009e2c <HAL_GPIO_ReadPin>
 80017c6:	4603      	mov	r3, r0
 80017c8:	2b01      	cmp	r3, #1
 80017ca:	d15e      	bne.n	800188a <menu+0x5de>
 80017cc:	4b23      	ldr	r3, [pc, #140]	@ (800185c <menu+0x5b0>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	f083 0301 	eor.w	r3, r3, #1
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d057      	beq.n	800188a <menu+0x5de>
 80017da:	e043      	b.n	8001864 <menu+0x5b8>
 80017dc:	200010a0 	.word	0x200010a0
 80017e0:	200010bf 	.word	0x200010bf
 80017e4:	20001200 	.word	0x20001200
 80017e8:	20001214 	.word	0x20001214
 80017ec:	20001228 	.word	0x20001228
 80017f0:	200010a2 	.word	0x200010a2
 80017f4:	2000123c 	.word	0x2000123c
 80017f8:	0800db70 	.word	0x0800db70
 80017fc:	200010c2 	.word	0x200010c2
 8001800:	20001038 	.word	0x20001038
 8001804:	20001250 	.word	0x20001250
 8001808:	0800db74 	.word	0x0800db74
 800180c:	200010c3 	.word	0x200010c3
 8001810:	20001264 	.word	0x20001264
 8001814:	200010c4 	.word	0x200010c4
 8001818:	20001278 	.word	0x20001278
 800181c:	200010c5 	.word	0x200010c5
 8001820:	2000128c 	.word	0x2000128c
 8001824:	200010c6 	.word	0x200010c6
 8001828:	200012a0 	.word	0x200012a0
 800182c:	200010c7 	.word	0x200010c7
 8001830:	200012b4 	.word	0x200012b4
 8001834:	200010c8 	.word	0x200010c8
 8001838:	200012c8 	.word	0x200012c8
 800183c:	200010c9 	.word	0x200010c9
 8001840:	200012dc 	.word	0x200012dc
 8001844:	200010ca 	.word	0x200010ca
 8001848:	200012f0 	.word	0x200012f0
 800184c:	0800db78 	.word	0x0800db78
 8001850:	200010cb 	.word	0x200010cb
 8001854:	20001304 	.word	0x20001304
 8001858:	40010800 	.word	0x40010800
 800185c:	200010cf 	.word	0x200010cf
 8001860:	200010af 	.word	0x200010af
 8001864:	4b8a      	ldr	r3, [pc, #552]	@ (8001a90 <menu+0x7e4>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d10e      	bne.n	800188a <menu+0x5de>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 800186c:	4b89      	ldr	r3, [pc, #548]	@ (8001a94 <menu+0x7e8>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	3b01      	subs	r3, #1
 8001872:	b2da      	uxtb	r2, r3
 8001874:	4b87      	ldr	r3, [pc, #540]	@ (8001a94 <menu+0x7e8>)
 8001876:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001878:	4b86      	ldr	r3, [pc, #536]	@ (8001a94 <menu+0x7e8>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b0b      	cmp	r3, #11
 800187e:	d902      	bls.n	8001886 <menu+0x5da>
	    		hataGostermeSirasi = 10;
 8001880:	4b84      	ldr	r3, [pc, #528]	@ (8001a94 <menu+0x7e8>)
 8001882:	220a      	movs	r2, #10
 8001884:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001886:	f002 fa4f 	bl	8003d28 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 800188a:	2108      	movs	r1, #8
 800188c:	4882      	ldr	r0, [pc, #520]	@ (8001a98 <menu+0x7ec>)
 800188e:	f008 facd 	bl	8009e2c <HAL_GPIO_ReadPin>
 8001892:	4603      	mov	r3, r0
 8001894:	2b01      	cmp	r3, #1
 8001896:	d153      	bne.n	8001940 <menu+0x694>
 8001898:	4b80      	ldr	r3, [pc, #512]	@ (8001a9c <menu+0x7f0>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	f083 0301 	eor.w	r3, r3, #1
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d04c      	beq.n	8001940 <menu+0x694>
 80018a6:	4b7b      	ldr	r3, [pc, #492]	@ (8001a94 <menu+0x7e8>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	2b0a      	cmp	r3, #10
 80018ac:	d148      	bne.n	8001940 <menu+0x694>
			hataKayit1 = 0; eepromData[37] = 0;
 80018ae:	4b7c      	ldr	r3, [pc, #496]	@ (8001aa0 <menu+0x7f4>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	701a      	strb	r2, [r3, #0]
 80018b4:	4b7b      	ldr	r3, [pc, #492]	@ (8001aa4 <menu+0x7f8>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 80018bc:	4b7a      	ldr	r3, [pc, #488]	@ (8001aa8 <menu+0x7fc>)
 80018be:	2200      	movs	r2, #0
 80018c0:	701a      	strb	r2, [r3, #0]
 80018c2:	4b78      	ldr	r3, [pc, #480]	@ (8001aa4 <menu+0x7f8>)
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 80018ca:	4b78      	ldr	r3, [pc, #480]	@ (8001aac <menu+0x800>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	701a      	strb	r2, [r3, #0]
 80018d0:	4b74      	ldr	r3, [pc, #464]	@ (8001aa4 <menu+0x7f8>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 80018d8:	4b75      	ldr	r3, [pc, #468]	@ (8001ab0 <menu+0x804>)
 80018da:	2200      	movs	r2, #0
 80018dc:	701a      	strb	r2, [r3, #0]
 80018de:	4b71      	ldr	r3, [pc, #452]	@ (8001aa4 <menu+0x7f8>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 80018e6:	4b73      	ldr	r3, [pc, #460]	@ (8001ab4 <menu+0x808>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	701a      	strb	r2, [r3, #0]
 80018ec:	4b6d      	ldr	r3, [pc, #436]	@ (8001aa4 <menu+0x7f8>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 80018f4:	4b70      	ldr	r3, [pc, #448]	@ (8001ab8 <menu+0x80c>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	701a      	strb	r2, [r3, #0]
 80018fa:	4b6a      	ldr	r3, [pc, #424]	@ (8001aa4 <menu+0x7f8>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001902:	4b6e      	ldr	r3, [pc, #440]	@ (8001abc <menu+0x810>)
 8001904:	2200      	movs	r2, #0
 8001906:	701a      	strb	r2, [r3, #0]
 8001908:	4b66      	ldr	r3, [pc, #408]	@ (8001aa4 <menu+0x7f8>)
 800190a:	2200      	movs	r2, #0
 800190c:	f883 202b 	strb.w	r2, [r3, #43]	@ 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001910:	4b6b      	ldr	r3, [pc, #428]	@ (8001ac0 <menu+0x814>)
 8001912:	2200      	movs	r2, #0
 8001914:	701a      	strb	r2, [r3, #0]
 8001916:	4b63      	ldr	r3, [pc, #396]	@ (8001aa4 <menu+0x7f8>)
 8001918:	2200      	movs	r2, #0
 800191a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 800191e:	4b69      	ldr	r3, [pc, #420]	@ (8001ac4 <menu+0x818>)
 8001920:	2200      	movs	r2, #0
 8001922:	701a      	strb	r2, [r3, #0]
 8001924:	4b5f      	ldr	r3, [pc, #380]	@ (8001aa4 <menu+0x7f8>)
 8001926:	2200      	movs	r2, #0
 8001928:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 800192c:	4b66      	ldr	r3, [pc, #408]	@ (8001ac8 <menu+0x81c>)
 800192e:	2200      	movs	r2, #0
 8001930:	701a      	strb	r2, [r3, #0]
 8001932:	4b5c      	ldr	r3, [pc, #368]	@ (8001aa4 <menu+0x7f8>)
 8001934:	2200      	movs	r2, #0
 8001936:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e
			hafizaYaz = 1;
 800193a:	4b64      	ldr	r3, [pc, #400]	@ (8001acc <menu+0x820>)
 800193c:	2201      	movs	r2, #1
 800193e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001940:	4b63      	ldr	r3, [pc, #396]	@ (8001ad0 <menu+0x824>)
 8001942:	781b      	ldrb	r3, [r3, #0]
 8001944:	2b02      	cmp	r3, #2
 8001946:	f040 808e 	bne.w	8001a66 <menu+0x7ba>
		lcd_print(1, 1, calismaSekliText);
 800194a:	4a62      	ldr	r2, [pc, #392]	@ (8001ad4 <menu+0x828>)
 800194c:	2101      	movs	r1, #1
 800194e:	2001      	movs	r0, #1
 8001950:	f006 ff42 	bl	80087d8 <lcd_print>

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001954:	4b4e      	ldr	r3, [pc, #312]	@ (8001a90 <menu+0x7e4>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d003      	beq.n	8001964 <menu+0x6b8>
 800195c:	4b4c      	ldr	r3, [pc, #304]	@ (8001a90 <menu+0x7e4>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b02      	cmp	r3, #2
 8001962:	d104      	bne.n	800196e <menu+0x6c2>
			lcd_print(2, 1, devirmeYuruyusText);
 8001964:	4a5c      	ldr	r2, [pc, #368]	@ (8001ad8 <menu+0x82c>)
 8001966:	2101      	movs	r1, #1
 8001968:	2002      	movs	r0, #2
 800196a:	f006 ff35 	bl	80087d8 <lcd_print>
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 800196e:	4b5b      	ldr	r3, [pc, #364]	@ (8001adc <menu+0x830>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d108      	bne.n	8001988 <menu+0x6dc>
 8001976:	4b46      	ldr	r3, [pc, #280]	@ (8001a90 <menu+0x7e4>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d104      	bne.n	8001988 <menu+0x6dc>
			lcd_print(2, 1, bastikcaCalisanText);
 800197e:	4a58      	ldr	r2, [pc, #352]	@ (8001ae0 <menu+0x834>)
 8001980:	2101      	movs	r1, #1
 8001982:	2002      	movs	r0, #2
 8001984:	f006 ff28 	bl	80087d8 <lcd_print>
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001988:	4b54      	ldr	r3, [pc, #336]	@ (8001adc <menu+0x830>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d108      	bne.n	80019a2 <menu+0x6f6>
 8001990:	4b3f      	ldr	r3, [pc, #252]	@ (8001a90 <menu+0x7e4>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d104      	bne.n	80019a2 <menu+0x6f6>
			lcd_print(2, 1, basGonderText);
 8001998:	4a52      	ldr	r2, [pc, #328]	@ (8001ae4 <menu+0x838>)
 800199a:	2101      	movs	r1, #1
 800199c:	2002      	movs	r0, #2
 800199e:	f006 ff1b 	bl	80087d8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80019a2:	2102      	movs	r1, #2
 80019a4:	483c      	ldr	r0, [pc, #240]	@ (8001a98 <menu+0x7ec>)
 80019a6:	f008 fa41 	bl	8009e2c <HAL_GPIO_ReadPin>
 80019aa:	4603      	mov	r3, r0
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d119      	bne.n	80019e4 <menu+0x738>
 80019b0:	4b3a      	ldr	r3, [pc, #232]	@ (8001a9c <menu+0x7f0>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	f083 0301 	eor.w	r3, r3, #1
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d012      	beq.n	80019e4 <menu+0x738>
 80019be:	4b34      	ldr	r3, [pc, #208]	@ (8001a90 <menu+0x7e4>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d10e      	bne.n	80019e4 <menu+0x738>
			calismaSekli = calismaSekli + 1;
 80019c6:	4b45      	ldr	r3, [pc, #276]	@ (8001adc <menu+0x830>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	3301      	adds	r3, #1
 80019cc:	b2da      	uxtb	r2, r3
 80019ce:	4b43      	ldr	r3, [pc, #268]	@ (8001adc <menu+0x830>)
 80019d0:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 80019d2:	4b42      	ldr	r3, [pc, #264]	@ (8001adc <menu+0x830>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	2b01      	cmp	r3, #1
 80019d8:	d902      	bls.n	80019e0 <menu+0x734>
				calismaSekli = 0;
 80019da:	4b40      	ldr	r3, [pc, #256]	@ (8001adc <menu+0x830>)
 80019dc:	2200      	movs	r2, #0
 80019de:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80019e0:	f002 f9a2 	bl	8003d28 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80019e4:	2104      	movs	r1, #4
 80019e6:	482c      	ldr	r0, [pc, #176]	@ (8001a98 <menu+0x7ec>)
 80019e8:	f008 fa20 	bl	8009e2c <HAL_GPIO_ReadPin>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b01      	cmp	r3, #1
 80019f0:	d119      	bne.n	8001a26 <menu+0x77a>
 80019f2:	4b2a      	ldr	r3, [pc, #168]	@ (8001a9c <menu+0x7f0>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	f083 0301 	eor.w	r3, r3, #1
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d012      	beq.n	8001a26 <menu+0x77a>
 8001a00:	4b23      	ldr	r3, [pc, #140]	@ (8001a90 <menu+0x7e4>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d10e      	bne.n	8001a26 <menu+0x77a>
			calismaSekli = calismaSekli - 1;
 8001a08:	4b34      	ldr	r3, [pc, #208]	@ (8001adc <menu+0x830>)
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	3b01      	subs	r3, #1
 8001a0e:	b2da      	uxtb	r2, r3
 8001a10:	4b32      	ldr	r3, [pc, #200]	@ (8001adc <menu+0x830>)
 8001a12:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001a14:	4b31      	ldr	r3, [pc, #196]	@ (8001adc <menu+0x830>)
 8001a16:	781b      	ldrb	r3, [r3, #0]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d002      	beq.n	8001a22 <menu+0x776>
	    		calismaSekli = 1;
 8001a1c:	4b2f      	ldr	r3, [pc, #188]	@ (8001adc <menu+0x830>)
 8001a1e:	2201      	movs	r2, #1
 8001a20:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001a22:	f002 f981 	bl	8003d28 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001a26:	2108      	movs	r1, #8
 8001a28:	481b      	ldr	r0, [pc, #108]	@ (8001a98 <menu+0x7ec>)
 8001a2a:	f008 f9ff 	bl	8009e2c <HAL_GPIO_ReadPin>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d118      	bne.n	8001a66 <menu+0x7ba>
 8001a34:	4b19      	ldr	r3, [pc, #100]	@ (8001a9c <menu+0x7f0>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	f083 0301 	eor.w	r3, r3, #1
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d011      	beq.n	8001a66 <menu+0x7ba>
			eepromData[1] = calismaSekli;
 8001a42:	4b26      	ldr	r3, [pc, #152]	@ (8001adc <menu+0x830>)
 8001a44:	781a      	ldrb	r2, [r3, #0]
 8001a46:	4b17      	ldr	r3, [pc, #92]	@ (8001aa4 <menu+0x7f8>)
 8001a48:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001a4a:	4b24      	ldr	r3, [pc, #144]	@ (8001adc <menu+0x830>)
 8001a4c:	781b      	ldrb	r3, [r3, #0]
 8001a4e:	2b01      	cmp	r3, #1
 8001a50:	d106      	bne.n	8001a60 <menu+0x7b4>
				altLimit = 1;
 8001a52:	4b25      	ldr	r3, [pc, #148]	@ (8001ae8 <menu+0x83c>)
 8001a54:	2201      	movs	r2, #1
 8001a56:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001a58:	4b23      	ldr	r3, [pc, #140]	@ (8001ae8 <menu+0x83c>)
 8001a5a:	781a      	ldrb	r2, [r3, #0]
 8001a5c:	4b11      	ldr	r3, [pc, #68]	@ (8001aa4 <menu+0x7f8>)
 8001a5e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001a60:	4b1a      	ldr	r3, [pc, #104]	@ (8001acc <menu+0x820>)
 8001a62:	2201      	movs	r2, #1
 8001a64:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001a66:	4b1a      	ldr	r3, [pc, #104]	@ (8001ad0 <menu+0x824>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	2b03      	cmp	r3, #3
 8001a6c:	f040 809c 	bne.w	8001ba8 <menu+0x8fc>
		lcd_print(1, 1, emniyetCercevesiText);
 8001a70:	4a1e      	ldr	r2, [pc, #120]	@ (8001aec <menu+0x840>)
 8001a72:	2101      	movs	r1, #1
 8001a74:	2001      	movs	r0, #1
 8001a76:	f006 feaf 	bl	80087d8 <lcd_print>

		if(emniyetCercevesi == 0) {
 8001a7a:	4b1d      	ldr	r3, [pc, #116]	@ (8001af0 <menu+0x844>)
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d13a      	bne.n	8001af8 <menu+0x84c>
			lcd_print(2, 1, pasifText);
 8001a82:	4a1c      	ldr	r2, [pc, #112]	@ (8001af4 <menu+0x848>)
 8001a84:	2101      	movs	r1, #1
 8001a86:	2002      	movs	r0, #2
 8001a88:	f006 fea6 	bl	80087d8 <lcd_print>
 8001a8c:	e03d      	b.n	8001b0a <menu+0x85e>
 8001a8e:	bf00      	nop
 8001a90:	200010af 	.word	0x200010af
 8001a94:	200010a2 	.word	0x200010a2
 8001a98:	40010800 	.word	0x40010800
 8001a9c:	200010cf 	.word	0x200010cf
 8001aa0:	200010c2 	.word	0x200010c2
 8001aa4:	20000fc8 	.word	0x20000fc8
 8001aa8:	200010c3 	.word	0x200010c3
 8001aac:	200010c4 	.word	0x200010c4
 8001ab0:	200010c5 	.word	0x200010c5
 8001ab4:	200010c6 	.word	0x200010c6
 8001ab8:	200010c7 	.word	0x200010c7
 8001abc:	200010c8 	.word	0x200010c8
 8001ac0:	200010c9 	.word	0x200010c9
 8001ac4:	200010ca 	.word	0x200010ca
 8001ac8:	200010cb 	.word	0x200010cb
 8001acc:	200010cc 	.word	0x200010cc
 8001ad0:	200010a0 	.word	0x200010a0
 8001ad4:	20001318 	.word	0x20001318
 8001ad8:	2000132c 	.word	0x2000132c
 8001adc:	200010a1 	.word	0x200010a1
 8001ae0:	20001340 	.word	0x20001340
 8001ae4:	20001354 	.word	0x20001354
 8001ae8:	200010a6 	.word	0x200010a6
 8001aec:	20001368 	.word	0x20001368
 8001af0:	200010a4 	.word	0x200010a4
 8001af4:	2000137c 	.word	0x2000137c
		} else if(emniyetCercevesi == 1) {
 8001af8:	4b6b      	ldr	r3, [pc, #428]	@ (8001ca8 <menu+0x9fc>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d104      	bne.n	8001b0a <menu+0x85e>
			lcd_print(2, 1, ondSafetyTextGN);
 8001b00:	4a6a      	ldr	r2, [pc, #424]	@ (8001cac <menu+0xa00>)
 8001b02:	2101      	movs	r1, #1
 8001b04:	2002      	movs	r0, #2
 8001b06:	f006 fe67 	bl	80087d8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b0a:	2102      	movs	r1, #2
 8001b0c:	4868      	ldr	r0, [pc, #416]	@ (8001cb0 <menu+0xa04>)
 8001b0e:	f008 f98d 	bl	8009e2c <HAL_GPIO_ReadPin>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d115      	bne.n	8001b44 <menu+0x898>
 8001b18:	4b66      	ldr	r3, [pc, #408]	@ (8001cb4 <menu+0xa08>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	f083 0301 	eor.w	r3, r3, #1
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d00e      	beq.n	8001b44 <menu+0x898>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001b26:	4b60      	ldr	r3, [pc, #384]	@ (8001ca8 <menu+0x9fc>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	b2da      	uxtb	r2, r3
 8001b2e:	4b5e      	ldr	r3, [pc, #376]	@ (8001ca8 <menu+0x9fc>)
 8001b30:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001b32:	4b5d      	ldr	r3, [pc, #372]	@ (8001ca8 <menu+0x9fc>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	2b01      	cmp	r3, #1
 8001b38:	d902      	bls.n	8001b40 <menu+0x894>
				emniyetCercevesi = 0;
 8001b3a:	4b5b      	ldr	r3, [pc, #364]	@ (8001ca8 <menu+0x9fc>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001b40:	f002 f8f2 	bl	8003d28 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b44:	2104      	movs	r1, #4
 8001b46:	485a      	ldr	r0, [pc, #360]	@ (8001cb0 <menu+0xa04>)
 8001b48:	f008 f970 	bl	8009e2c <HAL_GPIO_ReadPin>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b01      	cmp	r3, #1
 8001b50:	d115      	bne.n	8001b7e <menu+0x8d2>
 8001b52:	4b58      	ldr	r3, [pc, #352]	@ (8001cb4 <menu+0xa08>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	f083 0301 	eor.w	r3, r3, #1
 8001b5a:	b2db      	uxtb	r3, r3
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d00e      	beq.n	8001b7e <menu+0x8d2>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001b60:	4b51      	ldr	r3, [pc, #324]	@ (8001ca8 <menu+0x9fc>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
 8001b64:	3b01      	subs	r3, #1
 8001b66:	b2da      	uxtb	r2, r3
 8001b68:	4b4f      	ldr	r3, [pc, #316]	@ (8001ca8 <menu+0x9fc>)
 8001b6a:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001b6c:	4b4e      	ldr	r3, [pc, #312]	@ (8001ca8 <menu+0x9fc>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d002      	beq.n	8001b7a <menu+0x8ce>
		   		emniyetCercevesi = 1;
 8001b74:	4b4c      	ldr	r3, [pc, #304]	@ (8001ca8 <menu+0x9fc>)
 8001b76:	2201      	movs	r2, #1
 8001b78:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001b7a:	f002 f8d5 	bl	8003d28 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001b7e:	2108      	movs	r1, #8
 8001b80:	484b      	ldr	r0, [pc, #300]	@ (8001cb0 <menu+0xa04>)
 8001b82:	f008 f953 	bl	8009e2c <HAL_GPIO_ReadPin>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d10d      	bne.n	8001ba8 <menu+0x8fc>
 8001b8c:	4b49      	ldr	r3, [pc, #292]	@ (8001cb4 <menu+0xa08>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	f083 0301 	eor.w	r3, r3, #1
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d006      	beq.n	8001ba8 <menu+0x8fc>
			eepromData[2] = emniyetCercevesi;
 8001b9a:	4b43      	ldr	r3, [pc, #268]	@ (8001ca8 <menu+0x9fc>)
 8001b9c:	781a      	ldrb	r2, [r3, #0]
 8001b9e:	4b46      	ldr	r3, [pc, #280]	@ (8001cb8 <menu+0xa0c>)
 8001ba0:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001ba2:	4b46      	ldr	r3, [pc, #280]	@ (8001cbc <menu+0xa10>)
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001ba8:	4b45      	ldr	r3, [pc, #276]	@ (8001cc0 <menu+0xa14>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b04      	cmp	r3, #4
 8001bae:	d166      	bne.n	8001c7e <menu+0x9d2>
		lcd_print(1, 1, yavaslamaLimitText);
 8001bb0:	4a44      	ldr	r2, [pc, #272]	@ (8001cc4 <menu+0xa18>)
 8001bb2:	2101      	movs	r1, #1
 8001bb4:	2001      	movs	r0, #1
 8001bb6:	f006 fe0f 	bl	80087d8 <lcd_print>

		if(yavaslamaLimit == 0) {
 8001bba:	4b43      	ldr	r3, [pc, #268]	@ (8001cc8 <menu+0xa1c>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d105      	bne.n	8001bce <menu+0x922>
			lcd_print(2, 1, pasifText);
 8001bc2:	4a42      	ldr	r2, [pc, #264]	@ (8001ccc <menu+0xa20>)
 8001bc4:	2101      	movs	r1, #1
 8001bc6:	2002      	movs	r0, #2
 8001bc8:	f006 fe06 	bl	80087d8 <lcd_print>
 8001bcc:	e008      	b.n	8001be0 <menu+0x934>
		} else if(yavaslamaLimit == 1) {
 8001bce:	4b3e      	ldr	r3, [pc, #248]	@ (8001cc8 <menu+0xa1c>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d104      	bne.n	8001be0 <menu+0x934>
			lcd_print(2, 1, aktifText);
 8001bd6:	4a3e      	ldr	r2, [pc, #248]	@ (8001cd0 <menu+0xa24>)
 8001bd8:	2101      	movs	r1, #1
 8001bda:	2002      	movs	r0, #2
 8001bdc:	f006 fdfc 	bl	80087d8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001be0:	2102      	movs	r1, #2
 8001be2:	4833      	ldr	r0, [pc, #204]	@ (8001cb0 <menu+0xa04>)
 8001be4:	f008 f922 	bl	8009e2c <HAL_GPIO_ReadPin>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d115      	bne.n	8001c1a <menu+0x96e>
 8001bee:	4b31      	ldr	r3, [pc, #196]	@ (8001cb4 <menu+0xa08>)
 8001bf0:	781b      	ldrb	r3, [r3, #0]
 8001bf2:	f083 0301 	eor.w	r3, r3, #1
 8001bf6:	b2db      	uxtb	r3, r3
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d00e      	beq.n	8001c1a <menu+0x96e>
			yavaslamaLimit = yavaslamaLimit + 1;
 8001bfc:	4b32      	ldr	r3, [pc, #200]	@ (8001cc8 <menu+0xa1c>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	3301      	adds	r3, #1
 8001c02:	b2da      	uxtb	r2, r3
 8001c04:	4b30      	ldr	r3, [pc, #192]	@ (8001cc8 <menu+0xa1c>)
 8001c06:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8001c08:	4b2f      	ldr	r3, [pc, #188]	@ (8001cc8 <menu+0xa1c>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	2b01      	cmp	r3, #1
 8001c0e:	d902      	bls.n	8001c16 <menu+0x96a>
				yavaslamaLimit = 0;
 8001c10:	4b2d      	ldr	r3, [pc, #180]	@ (8001cc8 <menu+0xa1c>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001c16:	f002 f887 	bl	8003d28 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c1a:	2104      	movs	r1, #4
 8001c1c:	4824      	ldr	r0, [pc, #144]	@ (8001cb0 <menu+0xa04>)
 8001c1e:	f008 f905 	bl	8009e2c <HAL_GPIO_ReadPin>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d115      	bne.n	8001c54 <menu+0x9a8>
 8001c28:	4b22      	ldr	r3, [pc, #136]	@ (8001cb4 <menu+0xa08>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	f083 0301 	eor.w	r3, r3, #1
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d00e      	beq.n	8001c54 <menu+0x9a8>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001c36:	4b24      	ldr	r3, [pc, #144]	@ (8001cc8 <menu+0xa1c>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	3b01      	subs	r3, #1
 8001c3c:	b2da      	uxtb	r2, r3
 8001c3e:	4b22      	ldr	r3, [pc, #136]	@ (8001cc8 <menu+0xa1c>)
 8001c40:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8001c42:	4b21      	ldr	r3, [pc, #132]	@ (8001cc8 <menu+0xa1c>)
 8001c44:	781b      	ldrb	r3, [r3, #0]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d002      	beq.n	8001c50 <menu+0x9a4>
		   		yavaslamaLimit = 1;
 8001c4a:	4b1f      	ldr	r3, [pc, #124]	@ (8001cc8 <menu+0xa1c>)
 8001c4c:	2201      	movs	r2, #1
 8001c4e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001c50:	f002 f86a 	bl	8003d28 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c54:	2108      	movs	r1, #8
 8001c56:	4816      	ldr	r0, [pc, #88]	@ (8001cb0 <menu+0xa04>)
 8001c58:	f008 f8e8 	bl	8009e2c <HAL_GPIO_ReadPin>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d10d      	bne.n	8001c7e <menu+0x9d2>
 8001c62:	4b14      	ldr	r3, [pc, #80]	@ (8001cb4 <menu+0xa08>)
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	f083 0301 	eor.w	r3, r3, #1
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d006      	beq.n	8001c7e <menu+0x9d2>
			eepromData[4] = yavaslamaLimit;
 8001c70:	4b15      	ldr	r3, [pc, #84]	@ (8001cc8 <menu+0xa1c>)
 8001c72:	781a      	ldrb	r2, [r3, #0]
 8001c74:	4b10      	ldr	r3, [pc, #64]	@ (8001cb8 <menu+0xa0c>)
 8001c76:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8001c78:	4b10      	ldr	r3, [pc, #64]	@ (8001cbc <menu+0xa10>)
 8001c7a:	2201      	movs	r2, #1
 8001c7c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8001c7e:	4b10      	ldr	r3, [pc, #64]	@ (8001cc0 <menu+0xa14>)
 8001c80:	781b      	ldrb	r3, [r3, #0]
 8001c82:	2b05      	cmp	r3, #5
 8001c84:	f040 80aa 	bne.w	8001ddc <menu+0xb30>
		lcd_print(1, 1, altLimitText);
 8001c88:	4a12      	ldr	r2, [pc, #72]	@ (8001cd4 <menu+0xa28>)
 8001c8a:	2101      	movs	r1, #1
 8001c8c:	2001      	movs	r0, #1
 8001c8e:	f006 fda3 	bl	80087d8 <lcd_print>

		if(altLimit == 0) {
 8001c92:	4b11      	ldr	r3, [pc, #68]	@ (8001cd8 <menu+0xa2c>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d120      	bne.n	8001cdc <menu+0xa30>
			lcd_print(2, 1, pasifText);
 8001c9a:	4a0c      	ldr	r2, [pc, #48]	@ (8001ccc <menu+0xa20>)
 8001c9c:	2101      	movs	r1, #1
 8001c9e:	2002      	movs	r0, #2
 8001ca0:	f006 fd9a 	bl	80087d8 <lcd_print>
 8001ca4:	e023      	b.n	8001cee <menu+0xa42>
 8001ca6:	bf00      	nop
 8001ca8:	200010a4 	.word	0x200010a4
 8001cac:	200000f0 	.word	0x200000f0
 8001cb0:	40010800 	.word	0x40010800
 8001cb4:	200010cf 	.word	0x200010cf
 8001cb8:	20000fc8 	.word	0x20000fc8
 8001cbc:	200010cc 	.word	0x200010cc
 8001cc0:	200010a0 	.word	0x200010a0
 8001cc4:	200013a4 	.word	0x200013a4
 8001cc8:	200010a5 	.word	0x200010a5
 8001ccc:	2000137c 	.word	0x2000137c
 8001cd0:	20001390 	.word	0x20001390
 8001cd4:	200013b8 	.word	0x200013b8
 8001cd8:	200010a6 	.word	0x200010a6
		} else if(altLimit == 1) {
 8001cdc:	4b89      	ldr	r3, [pc, #548]	@ (8001f04 <menu+0xc58>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d104      	bne.n	8001cee <menu+0xa42>
			lcd_print(2, 1, aktifText);
 8001ce4:	4a88      	ldr	r2, [pc, #544]	@ (8001f08 <menu+0xc5c>)
 8001ce6:	2101      	movs	r1, #1
 8001ce8:	2002      	movs	r0, #2
 8001cea:	f006 fd75 	bl	80087d8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8001cee:	2102      	movs	r1, #2
 8001cf0:	4886      	ldr	r0, [pc, #536]	@ (8001f0c <menu+0xc60>)
 8001cf2:	f008 f89b 	bl	8009e2c <HAL_GPIO_ReadPin>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d119      	bne.n	8001d30 <menu+0xa84>
 8001cfc:	4b84      	ldr	r3, [pc, #528]	@ (8001f10 <menu+0xc64>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	f083 0301 	eor.w	r3, r3, #1
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d012      	beq.n	8001d30 <menu+0xa84>
 8001d0a:	4b82      	ldr	r3, [pc, #520]	@ (8001f14 <menu+0xc68>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d10e      	bne.n	8001d30 <menu+0xa84>
			altLimit = altLimit + 1;
 8001d12:	4b7c      	ldr	r3, [pc, #496]	@ (8001f04 <menu+0xc58>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	3301      	adds	r3, #1
 8001d18:	b2da      	uxtb	r2, r3
 8001d1a:	4b7a      	ldr	r3, [pc, #488]	@ (8001f04 <menu+0xc58>)
 8001d1c:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 8001d1e:	4b79      	ldr	r3, [pc, #484]	@ (8001f04 <menu+0xc58>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d902      	bls.n	8001d2c <menu+0xa80>
				altLimit = 0;
 8001d26:	4b77      	ldr	r3, [pc, #476]	@ (8001f04 <menu+0xc58>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001d2c:	f001 fffc 	bl	8003d28 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8001d30:	2104      	movs	r1, #4
 8001d32:	4876      	ldr	r0, [pc, #472]	@ (8001f0c <menu+0xc60>)
 8001d34:	f008 f87a 	bl	8009e2c <HAL_GPIO_ReadPin>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d119      	bne.n	8001d72 <menu+0xac6>
 8001d3e:	4b74      	ldr	r3, [pc, #464]	@ (8001f10 <menu+0xc64>)
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	f083 0301 	eor.w	r3, r3, #1
 8001d46:	b2db      	uxtb	r3, r3
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d012      	beq.n	8001d72 <menu+0xac6>
 8001d4c:	4b71      	ldr	r3, [pc, #452]	@ (8001f14 <menu+0xc68>)
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d10e      	bne.n	8001d72 <menu+0xac6>
			altLimit = altLimit - 1;
 8001d54:	4b6b      	ldr	r3, [pc, #428]	@ (8001f04 <menu+0xc58>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	3b01      	subs	r3, #1
 8001d5a:	b2da      	uxtb	r2, r3
 8001d5c:	4b69      	ldr	r3, [pc, #420]	@ (8001f04 <menu+0xc58>)
 8001d5e:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8001d60:	4b68      	ldr	r3, [pc, #416]	@ (8001f04 <menu+0xc58>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d002      	beq.n	8001d6e <menu+0xac2>
		   		altLimit = 1;
 8001d68:	4b66      	ldr	r3, [pc, #408]	@ (8001f04 <menu+0xc58>)
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001d6e:	f001 ffdb 	bl	8003d28 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001d72:	2108      	movs	r1, #8
 8001d74:	4865      	ldr	r0, [pc, #404]	@ (8001f0c <menu+0xc60>)
 8001d76:	f008 f859 	bl	8009e2c <HAL_GPIO_ReadPin>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d12d      	bne.n	8001ddc <menu+0xb30>
 8001d80:	4b63      	ldr	r3, [pc, #396]	@ (8001f10 <menu+0xc64>)
 8001d82:	781b      	ldrb	r3, [r3, #0]
 8001d84:	f083 0301 	eor.w	r3, r3, #1
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d026      	beq.n	8001ddc <menu+0xb30>
			eepromData[5] = altLimit;
 8001d8e:	4b5d      	ldr	r3, [pc, #372]	@ (8001f04 <menu+0xc58>)
 8001d90:	781a      	ldrb	r2, [r3, #0]
 8001d92:	4b61      	ldr	r3, [pc, #388]	@ (8001f18 <menu+0xc6c>)
 8001d94:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8001d96:	4b5b      	ldr	r3, [pc, #364]	@ (8001f04 <menu+0xc58>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d110      	bne.n	8001dc0 <menu+0xb14>
 8001d9e:	4b5f      	ldr	r3, [pc, #380]	@ (8001f1c <menu+0xc70>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <menu+0xb02>
 8001da6:	4b5d      	ldr	r3, [pc, #372]	@ (8001f1c <menu+0xc70>)
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	2b02      	cmp	r3, #2
 8001dac:	d108      	bne.n	8001dc0 <menu+0xb14>
				kapiTablaAcKonum = 3;
 8001dae:	4b5b      	ldr	r3, [pc, #364]	@ (8001f1c <menu+0xc70>)
 8001db0:	2203      	movs	r2, #3
 8001db2:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8001db4:	4b59      	ldr	r3, [pc, #356]	@ (8001f1c <menu+0xc70>)
 8001db6:	781a      	ldrb	r2, [r3, #0]
 8001db8:	4b57      	ldr	r3, [pc, #348]	@ (8001f18 <menu+0xc6c>)
 8001dba:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22
 8001dbe:	e00a      	b.n	8001dd6 <menu+0xb2a>
			} else if(altLimit == 0) {
 8001dc0:	4b50      	ldr	r3, [pc, #320]	@ (8001f04 <menu+0xc58>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d106      	bne.n	8001dd6 <menu+0xb2a>
				platformSilindirTipi = 0;
 8001dc8:	4b55      	ldr	r3, [pc, #340]	@ (8001f20 <menu+0xc74>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 8001dce:	4b54      	ldr	r3, [pc, #336]	@ (8001f20 <menu+0xc74>)
 8001dd0:	781a      	ldrb	r2, [r3, #0]
 8001dd2:	4b51      	ldr	r3, [pc, #324]	@ (8001f18 <menu+0xc6c>)
 8001dd4:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 8001dd6:	4b53      	ldr	r3, [pc, #332]	@ (8001f24 <menu+0xc78>)
 8001dd8:	2201      	movs	r2, #1
 8001dda:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 8001ddc:	4b52      	ldr	r3, [pc, #328]	@ (8001f28 <menu+0xc7c>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	2b06      	cmp	r3, #6
 8001de2:	d166      	bne.n	8001eb2 <menu+0xc06>
		lcd_print(1, 1, basincSalteriText);
 8001de4:	4a51      	ldr	r2, [pc, #324]	@ (8001f2c <menu+0xc80>)
 8001de6:	2101      	movs	r1, #1
 8001de8:	2001      	movs	r0, #1
 8001dea:	f006 fcf5 	bl	80087d8 <lcd_print>

		if(basincSalteri == 0) {
 8001dee:	4b50      	ldr	r3, [pc, #320]	@ (8001f30 <menu+0xc84>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d105      	bne.n	8001e02 <menu+0xb56>
			lcd_print(2, 1, pasifText);
 8001df6:	4a4f      	ldr	r2, [pc, #316]	@ (8001f34 <menu+0xc88>)
 8001df8:	2101      	movs	r1, #1
 8001dfa:	2002      	movs	r0, #2
 8001dfc:	f006 fcec 	bl	80087d8 <lcd_print>
 8001e00:	e008      	b.n	8001e14 <menu+0xb68>
		} else if(basincSalteri == 1) {
 8001e02:	4b4b      	ldr	r3, [pc, #300]	@ (8001f30 <menu+0xc84>)
 8001e04:	781b      	ldrb	r3, [r3, #0]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d104      	bne.n	8001e14 <menu+0xb68>
			lcd_print(2, 1, aktifText);
 8001e0a:	4a3f      	ldr	r2, [pc, #252]	@ (8001f08 <menu+0xc5c>)
 8001e0c:	2101      	movs	r1, #1
 8001e0e:	2002      	movs	r0, #2
 8001e10:	f006 fce2 	bl	80087d8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e14:	2102      	movs	r1, #2
 8001e16:	483d      	ldr	r0, [pc, #244]	@ (8001f0c <menu+0xc60>)
 8001e18:	f008 f808 	bl	8009e2c <HAL_GPIO_ReadPin>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d115      	bne.n	8001e4e <menu+0xba2>
 8001e22:	4b3b      	ldr	r3, [pc, #236]	@ (8001f10 <menu+0xc64>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	f083 0301 	eor.w	r3, r3, #1
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d00e      	beq.n	8001e4e <menu+0xba2>
			basincSalteri = basincSalteri + 1;
 8001e30:	4b3f      	ldr	r3, [pc, #252]	@ (8001f30 <menu+0xc84>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	3301      	adds	r3, #1
 8001e36:	b2da      	uxtb	r2, r3
 8001e38:	4b3d      	ldr	r3, [pc, #244]	@ (8001f30 <menu+0xc84>)
 8001e3a:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 8001e3c:	4b3c      	ldr	r3, [pc, #240]	@ (8001f30 <menu+0xc84>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d902      	bls.n	8001e4a <menu+0xb9e>
				basincSalteri = 0;
 8001e44:	4b3a      	ldr	r3, [pc, #232]	@ (8001f30 <menu+0xc84>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001e4a:	f001 ff6d 	bl	8003d28 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e4e:	2104      	movs	r1, #4
 8001e50:	482e      	ldr	r0, [pc, #184]	@ (8001f0c <menu+0xc60>)
 8001e52:	f007 ffeb 	bl	8009e2c <HAL_GPIO_ReadPin>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b01      	cmp	r3, #1
 8001e5a:	d115      	bne.n	8001e88 <menu+0xbdc>
 8001e5c:	4b2c      	ldr	r3, [pc, #176]	@ (8001f10 <menu+0xc64>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	f083 0301 	eor.w	r3, r3, #1
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d00e      	beq.n	8001e88 <menu+0xbdc>
			basincSalteri = basincSalteri - 1;
 8001e6a:	4b31      	ldr	r3, [pc, #196]	@ (8001f30 <menu+0xc84>)
 8001e6c:	781b      	ldrb	r3, [r3, #0]
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	b2da      	uxtb	r2, r3
 8001e72:	4b2f      	ldr	r3, [pc, #188]	@ (8001f30 <menu+0xc84>)
 8001e74:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 8001e76:	4b2e      	ldr	r3, [pc, #184]	@ (8001f30 <menu+0xc84>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d002      	beq.n	8001e84 <menu+0xbd8>
		   		basincSalteri = 1;
 8001e7e:	4b2c      	ldr	r3, [pc, #176]	@ (8001f30 <menu+0xc84>)
 8001e80:	2201      	movs	r2, #1
 8001e82:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001e84:	f001 ff50 	bl	8003d28 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e88:	2108      	movs	r1, #8
 8001e8a:	4820      	ldr	r0, [pc, #128]	@ (8001f0c <menu+0xc60>)
 8001e8c:	f007 ffce 	bl	8009e2c <HAL_GPIO_ReadPin>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d10d      	bne.n	8001eb2 <menu+0xc06>
 8001e96:	4b1e      	ldr	r3, [pc, #120]	@ (8001f10 <menu+0xc64>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	f083 0301 	eor.w	r3, r3, #1
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d006      	beq.n	8001eb2 <menu+0xc06>
			eepromData[6] = basincSalteri;
 8001ea4:	4b22      	ldr	r3, [pc, #136]	@ (8001f30 <menu+0xc84>)
 8001ea6:	781a      	ldrb	r2, [r3, #0]
 8001ea8:	4b1b      	ldr	r3, [pc, #108]	@ (8001f18 <menu+0xc6c>)
 8001eaa:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 8001eac:	4b1d      	ldr	r3, [pc, #116]	@ (8001f24 <menu+0xc78>)
 8001eae:	2201      	movs	r2, #1
 8001eb0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 8001eb2:	4b1d      	ldr	r3, [pc, #116]	@ (8001f28 <menu+0xc7c>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	2b07      	cmp	r3, #7
 8001eb8:	f040 80a9 	bne.w	800200e <menu+0xd62>
		lcd_print(1, 1, kapiSecimleriText);
 8001ebc:	4a1e      	ldr	r2, [pc, #120]	@ (8001f38 <menu+0xc8c>)
 8001ebe:	2101      	movs	r1, #1
 8001ec0:	2001      	movs	r0, #1
 8001ec2:	f006 fc89 	bl	80087d8 <lcd_print>

		if(kapiSecimleri == 0) {
 8001ec6:	4b1d      	ldr	r3, [pc, #116]	@ (8001f3c <menu+0xc90>)
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d105      	bne.n	8001eda <menu+0xc2e>
			lcd_print(2, 1, pasifText);
 8001ece:	4a19      	ldr	r2, [pc, #100]	@ (8001f34 <menu+0xc88>)
 8001ed0:	2101      	movs	r1, #1
 8001ed2:	2002      	movs	r0, #2
 8001ed4:	f006 fc80 	bl	80087d8 <lcd_print>
 8001ed8:	e03f      	b.n	8001f5a <menu+0xcae>
		} else if(kapiSecimleri == 1) {
 8001eda:	4b18      	ldr	r3, [pc, #96]	@ (8001f3c <menu+0xc90>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	2b01      	cmp	r3, #1
 8001ee0:	d105      	bne.n	8001eee <menu+0xc42>
			lcd_print(2, 1, katKapisiAktifText);
 8001ee2:	4a17      	ldr	r2, [pc, #92]	@ (8001f40 <menu+0xc94>)
 8001ee4:	2101      	movs	r1, #1
 8001ee6:	2002      	movs	r0, #2
 8001ee8:	f006 fc76 	bl	80087d8 <lcd_print>
 8001eec:	e035      	b.n	8001f5a <menu+0xcae>
		} else if(kapiSecimleri == 2) {
 8001eee:	4b13      	ldr	r3, [pc, #76]	@ (8001f3c <menu+0xc90>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2b02      	cmp	r3, #2
 8001ef4:	d128      	bne.n	8001f48 <menu+0xc9c>
			lcd_print(2, 1, tablaKapiAktifText);
 8001ef6:	4a13      	ldr	r2, [pc, #76]	@ (8001f44 <menu+0xc98>)
 8001ef8:	2101      	movs	r1, #1
 8001efa:	2002      	movs	r0, #2
 8001efc:	f006 fc6c 	bl	80087d8 <lcd_print>
 8001f00:	e02b      	b.n	8001f5a <menu+0xcae>
 8001f02:	bf00      	nop
 8001f04:	200010a6 	.word	0x200010a6
 8001f08:	20001390 	.word	0x20001390
 8001f0c:	40010800 	.word	0x40010800
 8001f10:	200010cf 	.word	0x200010cf
 8001f14:	200010a1 	.word	0x200010a1
 8001f18:	20000fc8 	.word	0x20000fc8
 8001f1c:	200010ad 	.word	0x200010ad
 8001f20:	200010b3 	.word	0x200010b3
 8001f24:	200010cc 	.word	0x200010cc
 8001f28:	200010a0 	.word	0x200010a0
 8001f2c:	200013cc 	.word	0x200013cc
 8001f30:	200010a7 	.word	0x200010a7
 8001f34:	2000137c 	.word	0x2000137c
 8001f38:	200013e0 	.word	0x200013e0
 8001f3c:	200010a8 	.word	0x200010a8
 8001f40:	200013f4 	.word	0x200013f4
 8001f44:	20001408 	.word	0x20001408
		} else if(kapiSecimleri == 3) {
 8001f48:	4b76      	ldr	r3, [pc, #472]	@ (8002124 <menu+0xe78>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	2b03      	cmp	r3, #3
 8001f4e:	d104      	bne.n	8001f5a <menu+0xcae>
			lcd_print(2, 1, katArtiTablaAktifText);
 8001f50:	4a75      	ldr	r2, [pc, #468]	@ (8002128 <menu+0xe7c>)
 8001f52:	2101      	movs	r1, #1
 8001f54:	2002      	movs	r0, #2
 8001f56:	f006 fc3f 	bl	80087d8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f5a:	2102      	movs	r1, #2
 8001f5c:	4873      	ldr	r0, [pc, #460]	@ (800212c <menu+0xe80>)
 8001f5e:	f007 ff65 	bl	8009e2c <HAL_GPIO_ReadPin>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b01      	cmp	r3, #1
 8001f66:	d115      	bne.n	8001f94 <menu+0xce8>
 8001f68:	4b71      	ldr	r3, [pc, #452]	@ (8002130 <menu+0xe84>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	f083 0301 	eor.w	r3, r3, #1
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d00e      	beq.n	8001f94 <menu+0xce8>
			kapiSecimleri = kapiSecimleri + 1;
 8001f76:	4b6b      	ldr	r3, [pc, #428]	@ (8002124 <menu+0xe78>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	b2da      	uxtb	r2, r3
 8001f7e:	4b69      	ldr	r3, [pc, #420]	@ (8002124 <menu+0xe78>)
 8001f80:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 8001f82:	4b68      	ldr	r3, [pc, #416]	@ (8002124 <menu+0xe78>)
 8001f84:	781b      	ldrb	r3, [r3, #0]
 8001f86:	2b03      	cmp	r3, #3
 8001f88:	d902      	bls.n	8001f90 <menu+0xce4>
				kapiSecimleri = 0;
 8001f8a:	4b66      	ldr	r3, [pc, #408]	@ (8002124 <menu+0xe78>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001f90:	f001 feca 	bl	8003d28 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f94:	2104      	movs	r1, #4
 8001f96:	4865      	ldr	r0, [pc, #404]	@ (800212c <menu+0xe80>)
 8001f98:	f007 ff48 	bl	8009e2c <HAL_GPIO_ReadPin>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d115      	bne.n	8001fce <menu+0xd22>
 8001fa2:	4b63      	ldr	r3, [pc, #396]	@ (8002130 <menu+0xe84>)
 8001fa4:	781b      	ldrb	r3, [r3, #0]
 8001fa6:	f083 0301 	eor.w	r3, r3, #1
 8001faa:	b2db      	uxtb	r3, r3
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d00e      	beq.n	8001fce <menu+0xd22>
			kapiSecimleri = kapiSecimleri - 1;
 8001fb0:	4b5c      	ldr	r3, [pc, #368]	@ (8002124 <menu+0xe78>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	3b01      	subs	r3, #1
 8001fb6:	b2da      	uxtb	r2, r3
 8001fb8:	4b5a      	ldr	r3, [pc, #360]	@ (8002124 <menu+0xe78>)
 8001fba:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 8001fbc:	4b59      	ldr	r3, [pc, #356]	@ (8002124 <menu+0xe78>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	2b04      	cmp	r3, #4
 8001fc2:	d902      	bls.n	8001fca <menu+0xd1e>
		   		kapiSecimleri = 3;
 8001fc4:	4b57      	ldr	r3, [pc, #348]	@ (8002124 <menu+0xe78>)
 8001fc6:	2203      	movs	r2, #3
 8001fc8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001fca:	f001 fead 	bl	8003d28 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001fce:	2108      	movs	r1, #8
 8001fd0:	4856      	ldr	r0, [pc, #344]	@ (800212c <menu+0xe80>)
 8001fd2:	f007 ff2b 	bl	8009e2c <HAL_GPIO_ReadPin>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d118      	bne.n	800200e <menu+0xd62>
 8001fdc:	4b54      	ldr	r3, [pc, #336]	@ (8002130 <menu+0xe84>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	f083 0301 	eor.w	r3, r3, #1
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d011      	beq.n	800200e <menu+0xd62>
			eepromData[7] = kapiSecimleri;
 8001fea:	4b4e      	ldr	r3, [pc, #312]	@ (8002124 <menu+0xe78>)
 8001fec:	781a      	ldrb	r2, [r3, #0]
 8001fee:	4b51      	ldr	r3, [pc, #324]	@ (8002134 <menu+0xe88>)
 8001ff0:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 8001ff2:	4b4c      	ldr	r3, [pc, #304]	@ (8002124 <menu+0xe78>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d006      	beq.n	8002008 <menu+0xd5c>
				altLimit = 1;
 8001ffa:	4b4f      	ldr	r3, [pc, #316]	@ (8002138 <menu+0xe8c>)
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002000:	4b4d      	ldr	r3, [pc, #308]	@ (8002138 <menu+0xe8c>)
 8002002:	781a      	ldrb	r2, [r3, #0]
 8002004:	4b4b      	ldr	r3, [pc, #300]	@ (8002134 <menu+0xe88>)
 8002006:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002008:	4b4c      	ldr	r3, [pc, #304]	@ (800213c <menu+0xe90>)
 800200a:	2201      	movs	r2, #1
 800200c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 800200e:	4b4c      	ldr	r3, [pc, #304]	@ (8002140 <menu+0xe94>)
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	2b08      	cmp	r3, #8
 8002014:	d167      	bne.n	80020e6 <menu+0xe3a>
		lcd_print(1, 1, kapiAcmaTipiText);
 8002016:	4a4b      	ldr	r2, [pc, #300]	@ (8002144 <menu+0xe98>)
 8002018:	2101      	movs	r1, #1
 800201a:	2001      	movs	r0, #1
 800201c:	f006 fbdc 	bl	80087d8 <lcd_print>

		if(kapiAcTipi == 0) {
 8002020:	4b49      	ldr	r3, [pc, #292]	@ (8002148 <menu+0xe9c>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d105      	bne.n	8002034 <menu+0xd88>
			lcd_print(2, 1, kapiButonuESPText);
 8002028:	4a48      	ldr	r2, [pc, #288]	@ (800214c <menu+0xea0>)
 800202a:	2101      	movs	r1, #1
 800202c:	2002      	movs	r0, #2
 800202e:	f006 fbd3 	bl	80087d8 <lcd_print>
 8002032:	e008      	b.n	8002046 <menu+0xd9a>
		} else if(kapiAcTipi == 1){
 8002034:	4b44      	ldr	r3, [pc, #272]	@ (8002148 <menu+0xe9c>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	2b01      	cmp	r3, #1
 800203a:	d104      	bne.n	8002046 <menu+0xd9a>
			lcd_print(2, 1, katButonuEXTText);
 800203c:	4a44      	ldr	r2, [pc, #272]	@ (8002150 <menu+0xea4>)
 800203e:	2101      	movs	r1, #1
 8002040:	2002      	movs	r0, #2
 8002042:	f006 fbc9 	bl	80087d8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002046:	2102      	movs	r1, #2
 8002048:	4838      	ldr	r0, [pc, #224]	@ (800212c <menu+0xe80>)
 800204a:	f007 feef 	bl	8009e2c <HAL_GPIO_ReadPin>
 800204e:	4603      	mov	r3, r0
 8002050:	2b01      	cmp	r3, #1
 8002052:	d115      	bne.n	8002080 <menu+0xdd4>
 8002054:	4b36      	ldr	r3, [pc, #216]	@ (8002130 <menu+0xe84>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	f083 0301 	eor.w	r3, r3, #1
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00e      	beq.n	8002080 <menu+0xdd4>
			kapiAcTipi = kapiAcTipi + 1;
 8002062:	4b39      	ldr	r3, [pc, #228]	@ (8002148 <menu+0xe9c>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	3301      	adds	r3, #1
 8002068:	b2da      	uxtb	r2, r3
 800206a:	4b37      	ldr	r3, [pc, #220]	@ (8002148 <menu+0xe9c>)
 800206c:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 800206e:	4b36      	ldr	r3, [pc, #216]	@ (8002148 <menu+0xe9c>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	2b01      	cmp	r3, #1
 8002074:	d902      	bls.n	800207c <menu+0xdd0>
				kapiAcTipi = 0;
 8002076:	4b34      	ldr	r3, [pc, #208]	@ (8002148 <menu+0xe9c>)
 8002078:	2200      	movs	r2, #0
 800207a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800207c:	f001 fe54 	bl	8003d28 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002080:	2104      	movs	r1, #4
 8002082:	482a      	ldr	r0, [pc, #168]	@ (800212c <menu+0xe80>)
 8002084:	f007 fed2 	bl	8009e2c <HAL_GPIO_ReadPin>
 8002088:	4603      	mov	r3, r0
 800208a:	2b01      	cmp	r3, #1
 800208c:	d115      	bne.n	80020ba <menu+0xe0e>
 800208e:	4b28      	ldr	r3, [pc, #160]	@ (8002130 <menu+0xe84>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	f083 0301 	eor.w	r3, r3, #1
 8002096:	b2db      	uxtb	r3, r3
 8002098:	2b00      	cmp	r3, #0
 800209a:	d00e      	beq.n	80020ba <menu+0xe0e>
			kapiAcTipi = kapiAcTipi - 1;
 800209c:	4b2a      	ldr	r3, [pc, #168]	@ (8002148 <menu+0xe9c>)
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	3b01      	subs	r3, #1
 80020a2:	b2da      	uxtb	r2, r3
 80020a4:	4b28      	ldr	r3, [pc, #160]	@ (8002148 <menu+0xe9c>)
 80020a6:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 80020a8:	4b27      	ldr	r3, [pc, #156]	@ (8002148 <menu+0xe9c>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d002      	beq.n	80020b6 <menu+0xe0a>
		   		kapiAcTipi = 1;
 80020b0:	4b25      	ldr	r3, [pc, #148]	@ (8002148 <menu+0xe9c>)
 80020b2:	2201      	movs	r2, #1
 80020b4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80020b6:	f001 fe37 	bl	8003d28 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80020ba:	2108      	movs	r1, #8
 80020bc:	481b      	ldr	r0, [pc, #108]	@ (800212c <menu+0xe80>)
 80020be:	f007 feb5 	bl	8009e2c <HAL_GPIO_ReadPin>
 80020c2:	4603      	mov	r3, r0
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d10e      	bne.n	80020e6 <menu+0xe3a>
 80020c8:	4b19      	ldr	r3, [pc, #100]	@ (8002130 <menu+0xe84>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	f083 0301 	eor.w	r3, r3, #1
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d007      	beq.n	80020e6 <menu+0xe3a>
			eepromData[36] = kapiAcTipi;
 80020d6:	4b1c      	ldr	r3, [pc, #112]	@ (8002148 <menu+0xe9c>)
 80020d8:	781a      	ldrb	r2, [r3, #0]
 80020da:	4b16      	ldr	r3, [pc, #88]	@ (8002134 <menu+0xe88>)
 80020dc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
			hafizaYaz = 1;
 80020e0:	4b16      	ldr	r3, [pc, #88]	@ (800213c <menu+0xe90>)
 80020e2:	2201      	movs	r2, #1
 80020e4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 80020e6:	4b16      	ldr	r3, [pc, #88]	@ (8002140 <menu+0xe94>)
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	2b09      	cmp	r3, #9
 80020ec:	f040 8092 	bne.w	8002214 <menu+0xf68>
		lcd_print(1, 1, birKatKapiTipiText);
 80020f0:	4a18      	ldr	r2, [pc, #96]	@ (8002154 <menu+0xea8>)
 80020f2:	2101      	movs	r1, #1
 80020f4:	2001      	movs	r0, #1
 80020f6:	f006 fb6f 	bl	80087d8 <lcd_print>

		if(kapi1Tip == 0) {
 80020fa:	4b17      	ldr	r3, [pc, #92]	@ (8002158 <menu+0xeac>)
 80020fc:	781b      	ldrb	r3, [r3, #0]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d105      	bne.n	800210e <menu+0xe62>
			lcd_print(2, 1, prudhomeTextGN);
 8002102:	4a16      	ldr	r2, [pc, #88]	@ (800215c <menu+0xeb0>)
 8002104:	2101      	movs	r1, #1
 8002106:	2002      	movs	r0, #2
 8002108:	f006 fb66 	bl	80087d8 <lcd_print>
 800210c:	e033      	b.n	8002176 <menu+0xeca>
		} else if(kapi1Tip == 1) {
 800210e:	4b12      	ldr	r3, [pc, #72]	@ (8002158 <menu+0xeac>)
 8002110:	781b      	ldrb	r3, [r3, #0]
 8002112:	2b01      	cmp	r3, #1
 8002114:	d126      	bne.n	8002164 <menu+0xeb8>
			lcd_print(2, 1, butonKontrolluText);
 8002116:	4a12      	ldr	r2, [pc, #72]	@ (8002160 <menu+0xeb4>)
 8002118:	2101      	movs	r1, #1
 800211a:	2002      	movs	r0, #2
 800211c:	f006 fb5c 	bl	80087d8 <lcd_print>
 8002120:	e029      	b.n	8002176 <menu+0xeca>
 8002122:	bf00      	nop
 8002124:	200010a8 	.word	0x200010a8
 8002128:	2000141c 	.word	0x2000141c
 800212c:	40010800 	.word	0x40010800
 8002130:	200010cf 	.word	0x200010cf
 8002134:	20000fc8 	.word	0x20000fc8
 8002138:	200010a6 	.word	0x200010a6
 800213c:	200010cc 	.word	0x200010cc
 8002140:	200010a0 	.word	0x200010a0
 8002144:	20001430 	.word	0x20001430
 8002148:	200010ac 	.word	0x200010ac
 800214c:	20001444 	.word	0x20001444
 8002150:	20001458 	.word	0x20001458
 8002154:	2000146c 	.word	0x2000146c
 8002158:	200010a9 	.word	0x200010a9
 800215c:	20000104 	.word	0x20000104
 8002160:	20001480 	.word	0x20001480
		} else if(kapi1Tip == 2) {
 8002164:	4b73      	ldr	r3, [pc, #460]	@ (8002334 <menu+0x1088>)
 8002166:	781b      	ldrb	r3, [r3, #0]
 8002168:	2b02      	cmp	r3, #2
 800216a:	d104      	bne.n	8002176 <menu+0xeca>
			lcd_print(2, 1, pizzattoTextGN);
 800216c:	4a72      	ldr	r2, [pc, #456]	@ (8002338 <menu+0x108c>)
 800216e:	2101      	movs	r1, #1
 8002170:	2002      	movs	r0, #2
 8002172:	f006 fb31 	bl	80087d8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002176:	2102      	movs	r1, #2
 8002178:	4870      	ldr	r0, [pc, #448]	@ (800233c <menu+0x1090>)
 800217a:	f007 fe57 	bl	8009e2c <HAL_GPIO_ReadPin>
 800217e:	4603      	mov	r3, r0
 8002180:	2b01      	cmp	r3, #1
 8002182:	d115      	bne.n	80021b0 <menu+0xf04>
 8002184:	4b6e      	ldr	r3, [pc, #440]	@ (8002340 <menu+0x1094>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	f083 0301 	eor.w	r3, r3, #1
 800218c:	b2db      	uxtb	r3, r3
 800218e:	2b00      	cmp	r3, #0
 8002190:	d00e      	beq.n	80021b0 <menu+0xf04>
			kapi1Tip = kapi1Tip + 1;
 8002192:	4b68      	ldr	r3, [pc, #416]	@ (8002334 <menu+0x1088>)
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	3301      	adds	r3, #1
 8002198:	b2da      	uxtb	r2, r3
 800219a:	4b66      	ldr	r3, [pc, #408]	@ (8002334 <menu+0x1088>)
 800219c:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 800219e:	4b65      	ldr	r3, [pc, #404]	@ (8002334 <menu+0x1088>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d902      	bls.n	80021ac <menu+0xf00>
				kapi1Tip = 0;
 80021a6:	4b63      	ldr	r3, [pc, #396]	@ (8002334 <menu+0x1088>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80021ac:	f001 fdbc 	bl	8003d28 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80021b0:	2104      	movs	r1, #4
 80021b2:	4862      	ldr	r0, [pc, #392]	@ (800233c <menu+0x1090>)
 80021b4:	f007 fe3a 	bl	8009e2c <HAL_GPIO_ReadPin>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d115      	bne.n	80021ea <menu+0xf3e>
 80021be:	4b60      	ldr	r3, [pc, #384]	@ (8002340 <menu+0x1094>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	f083 0301 	eor.w	r3, r3, #1
 80021c6:	b2db      	uxtb	r3, r3
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d00e      	beq.n	80021ea <menu+0xf3e>
			kapi1Tip = kapi1Tip - 1;
 80021cc:	4b59      	ldr	r3, [pc, #356]	@ (8002334 <menu+0x1088>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	3b01      	subs	r3, #1
 80021d2:	b2da      	uxtb	r2, r3
 80021d4:	4b57      	ldr	r3, [pc, #348]	@ (8002334 <menu+0x1088>)
 80021d6:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 80021d8:	4b56      	ldr	r3, [pc, #344]	@ (8002334 <menu+0x1088>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	2b03      	cmp	r3, #3
 80021de:	d902      	bls.n	80021e6 <menu+0xf3a>
		   		kapi1Tip = 2;
 80021e0:	4b54      	ldr	r3, [pc, #336]	@ (8002334 <menu+0x1088>)
 80021e2:	2202      	movs	r2, #2
 80021e4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80021e6:	f001 fd9f 	bl	8003d28 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80021ea:	2108      	movs	r1, #8
 80021ec:	4853      	ldr	r0, [pc, #332]	@ (800233c <menu+0x1090>)
 80021ee:	f007 fe1d 	bl	8009e2c <HAL_GPIO_ReadPin>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d10d      	bne.n	8002214 <menu+0xf68>
 80021f8:	4b51      	ldr	r3, [pc, #324]	@ (8002340 <menu+0x1094>)
 80021fa:	781b      	ldrb	r3, [r3, #0]
 80021fc:	f083 0301 	eor.w	r3, r3, #1
 8002200:	b2db      	uxtb	r3, r3
 8002202:	2b00      	cmp	r3, #0
 8002204:	d006      	beq.n	8002214 <menu+0xf68>
			eepromData[8] = kapi1Tip;
 8002206:	4b4b      	ldr	r3, [pc, #300]	@ (8002334 <menu+0x1088>)
 8002208:	781a      	ldrb	r2, [r3, #0]
 800220a:	4b4e      	ldr	r3, [pc, #312]	@ (8002344 <menu+0x1098>)
 800220c:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 800220e:	4b4e      	ldr	r3, [pc, #312]	@ (8002348 <menu+0x109c>)
 8002210:	2201      	movs	r2, #1
 8002212:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 8002214:	4b4d      	ldr	r3, [pc, #308]	@ (800234c <menu+0x10a0>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	2b0a      	cmp	r3, #10
 800221a:	d16c      	bne.n	80022f6 <menu+0x104a>
		lcd_print(1, 1, birinciKapiAcSuresiText);
 800221c:	4a4c      	ldr	r2, [pc, #304]	@ (8002350 <menu+0x10a4>)
 800221e:	2101      	movs	r1, #1
 8002220:	2001      	movs	r0, #1
 8002222:	f006 fad9 	bl	80087d8 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 8002226:	4a4b      	ldr	r2, [pc, #300]	@ (8002354 <menu+0x10a8>)
 8002228:	2101      	movs	r1, #1
 800222a:	2002      	movs	r0, #2
 800222c:	f006 fad4 	bl	80087d8 <lcd_print>

		itoa(kapi1AcSure, snum, 10);
 8002230:	4b49      	ldr	r3, [pc, #292]	@ (8002358 <menu+0x10ac>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	220a      	movs	r2, #10
 8002236:	4949      	ldr	r1, [pc, #292]	@ (800235c <menu+0x10b0>)
 8002238:	4618      	mov	r0, r3
 800223a:	f00a fe23 	bl	800ce84 <itoa>
		lcd_print(2,16,snum);
 800223e:	4a47      	ldr	r2, [pc, #284]	@ (800235c <menu+0x10b0>)
 8002240:	2110      	movs	r1, #16
 8002242:	2002      	movs	r0, #2
 8002244:	f006 fac8 	bl	80087d8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002248:	2102      	movs	r1, #2
 800224a:	483c      	ldr	r0, [pc, #240]	@ (800233c <menu+0x1090>)
 800224c:	f007 fdee 	bl	8009e2c <HAL_GPIO_ReadPin>
 8002250:	4603      	mov	r3, r0
 8002252:	2b01      	cmp	r3, #1
 8002254:	d119      	bne.n	800228a <menu+0xfde>
 8002256:	4b3a      	ldr	r3, [pc, #232]	@ (8002340 <menu+0x1094>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	f083 0301 	eor.w	r3, r3, #1
 800225e:	b2db      	uxtb	r3, r3
 8002260:	2b00      	cmp	r3, #0
 8002262:	d012      	beq.n	800228a <menu+0xfde>
 8002264:	4b33      	ldr	r3, [pc, #204]	@ (8002334 <menu+0x1088>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10e      	bne.n	800228a <menu+0xfde>
			kapi1AcSure = kapi1AcSure + 1;
 800226c:	4b3a      	ldr	r3, [pc, #232]	@ (8002358 <menu+0x10ac>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	3301      	adds	r3, #1
 8002272:	b2da      	uxtb	r2, r3
 8002274:	4b38      	ldr	r3, [pc, #224]	@ (8002358 <menu+0x10ac>)
 8002276:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8002278:	4b37      	ldr	r3, [pc, #220]	@ (8002358 <menu+0x10ac>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	2b05      	cmp	r3, #5
 800227e:	d902      	bls.n	8002286 <menu+0xfda>
				kapi1AcSure = 0;
 8002280:	4b35      	ldr	r3, [pc, #212]	@ (8002358 <menu+0x10ac>)
 8002282:	2200      	movs	r2, #0
 8002284:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002286:	f001 fd4f 	bl	8003d28 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 800228a:	2104      	movs	r1, #4
 800228c:	482b      	ldr	r0, [pc, #172]	@ (800233c <menu+0x1090>)
 800228e:	f007 fdcd 	bl	8009e2c <HAL_GPIO_ReadPin>
 8002292:	4603      	mov	r3, r0
 8002294:	2b01      	cmp	r3, #1
 8002296:	d119      	bne.n	80022cc <menu+0x1020>
 8002298:	4b29      	ldr	r3, [pc, #164]	@ (8002340 <menu+0x1094>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	f083 0301 	eor.w	r3, r3, #1
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d012      	beq.n	80022cc <menu+0x1020>
 80022a6:	4b23      	ldr	r3, [pc, #140]	@ (8002334 <menu+0x1088>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10e      	bne.n	80022cc <menu+0x1020>
			kapi1AcSure = kapi1AcSure - 1;
 80022ae:	4b2a      	ldr	r3, [pc, #168]	@ (8002358 <menu+0x10ac>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	3b01      	subs	r3, #1
 80022b4:	b2da      	uxtb	r2, r3
 80022b6:	4b28      	ldr	r3, [pc, #160]	@ (8002358 <menu+0x10ac>)
 80022b8:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 80022ba:	4b27      	ldr	r3, [pc, #156]	@ (8002358 <menu+0x10ac>)
 80022bc:	781b      	ldrb	r3, [r3, #0]
 80022be:	2b06      	cmp	r3, #6
 80022c0:	d902      	bls.n	80022c8 <menu+0x101c>
		   		kapi1AcSure = 5;
 80022c2:	4b25      	ldr	r3, [pc, #148]	@ (8002358 <menu+0x10ac>)
 80022c4:	2205      	movs	r2, #5
 80022c6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80022c8:	f001 fd2e 	bl	8003d28 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80022cc:	2108      	movs	r1, #8
 80022ce:	481b      	ldr	r0, [pc, #108]	@ (800233c <menu+0x1090>)
 80022d0:	f007 fdac 	bl	8009e2c <HAL_GPIO_ReadPin>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b01      	cmp	r3, #1
 80022d8:	d10d      	bne.n	80022f6 <menu+0x104a>
 80022da:	4b19      	ldr	r3, [pc, #100]	@ (8002340 <menu+0x1094>)
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	f083 0301 	eor.w	r3, r3, #1
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d006      	beq.n	80022f6 <menu+0x104a>
			eepromData[9] = kapi1AcSure;
 80022e8:	4b1b      	ldr	r3, [pc, #108]	@ (8002358 <menu+0x10ac>)
 80022ea:	781a      	ldrb	r2, [r3, #0]
 80022ec:	4b15      	ldr	r3, [pc, #84]	@ (8002344 <menu+0x1098>)
 80022ee:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 80022f0:	4b15      	ldr	r3, [pc, #84]	@ (8002348 <menu+0x109c>)
 80022f2:	2201      	movs	r2, #1
 80022f4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 80022f6:	4b15      	ldr	r3, [pc, #84]	@ (800234c <menu+0x10a0>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	2b0b      	cmp	r3, #11
 80022fc:	f040 8090 	bne.w	8002420 <menu+0x1174>
		lcd_print(1, 1, ikinciKatKapiTipiText);
 8002300:	4a17      	ldr	r2, [pc, #92]	@ (8002360 <menu+0x10b4>)
 8002302:	2101      	movs	r1, #1
 8002304:	2001      	movs	r0, #1
 8002306:	f006 fa67 	bl	80087d8 <lcd_print>

		if(kapi2Tip == 0) {
 800230a:	4b16      	ldr	r3, [pc, #88]	@ (8002364 <menu+0x10b8>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d105      	bne.n	800231e <menu+0x1072>
			lcd_print(2, 1, prudhomeTextGN);
 8002312:	4a15      	ldr	r2, [pc, #84]	@ (8002368 <menu+0x10bc>)
 8002314:	2101      	movs	r1, #1
 8002316:	2002      	movs	r0, #2
 8002318:	f006 fa5e 	bl	80087d8 <lcd_print>
 800231c:	e031      	b.n	8002382 <menu+0x10d6>
		} else if(kapi2Tip == 1) {
 800231e:	4b11      	ldr	r3, [pc, #68]	@ (8002364 <menu+0x10b8>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d124      	bne.n	8002370 <menu+0x10c4>
			lcd_print(2, 1, butonKontrolluText);
 8002326:	4a11      	ldr	r2, [pc, #68]	@ (800236c <menu+0x10c0>)
 8002328:	2101      	movs	r1, #1
 800232a:	2002      	movs	r0, #2
 800232c:	f006 fa54 	bl	80087d8 <lcd_print>
 8002330:	e027      	b.n	8002382 <menu+0x10d6>
 8002332:	bf00      	nop
 8002334:	200010a9 	.word	0x200010a9
 8002338:	20000118 	.word	0x20000118
 800233c:	40010800 	.word	0x40010800
 8002340:	200010cf 	.word	0x200010cf
 8002344:	20000fc8 	.word	0x20000fc8
 8002348:	200010cc 	.word	0x200010cc
 800234c:	200010a0 	.word	0x200010a0
 8002350:	20001494 	.word	0x20001494
 8002354:	200014a8 	.word	0x200014a8
 8002358:	200010b9 	.word	0x200010b9
 800235c:	20001038 	.word	0x20001038
 8002360:	200014bc 	.word	0x200014bc
 8002364:	200010aa 	.word	0x200010aa
 8002368:	20000104 	.word	0x20000104
 800236c:	20001480 	.word	0x20001480
		} else if(kapi2Tip == 2) {
 8002370:	4b73      	ldr	r3, [pc, #460]	@ (8002540 <menu+0x1294>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	2b02      	cmp	r3, #2
 8002376:	d104      	bne.n	8002382 <menu+0x10d6>
			lcd_print(2, 1, pizzattoTextGN);
 8002378:	4a72      	ldr	r2, [pc, #456]	@ (8002544 <menu+0x1298>)
 800237a:	2101      	movs	r1, #1
 800237c:	2002      	movs	r0, #2
 800237e:	f006 fa2b 	bl	80087d8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002382:	2102      	movs	r1, #2
 8002384:	4870      	ldr	r0, [pc, #448]	@ (8002548 <menu+0x129c>)
 8002386:	f007 fd51 	bl	8009e2c <HAL_GPIO_ReadPin>
 800238a:	4603      	mov	r3, r0
 800238c:	2b01      	cmp	r3, #1
 800238e:	d115      	bne.n	80023bc <menu+0x1110>
 8002390:	4b6e      	ldr	r3, [pc, #440]	@ (800254c <menu+0x12a0>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	f083 0301 	eor.w	r3, r3, #1
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d00e      	beq.n	80023bc <menu+0x1110>
			kapi2Tip = kapi2Tip + 1;
 800239e:	4b68      	ldr	r3, [pc, #416]	@ (8002540 <menu+0x1294>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	3301      	adds	r3, #1
 80023a4:	b2da      	uxtb	r2, r3
 80023a6:	4b66      	ldr	r3, [pc, #408]	@ (8002540 <menu+0x1294>)
 80023a8:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 80023aa:	4b65      	ldr	r3, [pc, #404]	@ (8002540 <menu+0x1294>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	d902      	bls.n	80023b8 <menu+0x110c>
				kapi2Tip = 0;
 80023b2:	4b63      	ldr	r3, [pc, #396]	@ (8002540 <menu+0x1294>)
 80023b4:	2200      	movs	r2, #0
 80023b6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80023b8:	f001 fcb6 	bl	8003d28 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80023bc:	2104      	movs	r1, #4
 80023be:	4862      	ldr	r0, [pc, #392]	@ (8002548 <menu+0x129c>)
 80023c0:	f007 fd34 	bl	8009e2c <HAL_GPIO_ReadPin>
 80023c4:	4603      	mov	r3, r0
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d115      	bne.n	80023f6 <menu+0x114a>
 80023ca:	4b60      	ldr	r3, [pc, #384]	@ (800254c <menu+0x12a0>)
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	f083 0301 	eor.w	r3, r3, #1
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d00e      	beq.n	80023f6 <menu+0x114a>
			kapi2Tip = kapi2Tip - 1;
 80023d8:	4b59      	ldr	r3, [pc, #356]	@ (8002540 <menu+0x1294>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	3b01      	subs	r3, #1
 80023de:	b2da      	uxtb	r2, r3
 80023e0:	4b57      	ldr	r3, [pc, #348]	@ (8002540 <menu+0x1294>)
 80023e2:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 80023e4:	4b56      	ldr	r3, [pc, #344]	@ (8002540 <menu+0x1294>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b03      	cmp	r3, #3
 80023ea:	d902      	bls.n	80023f2 <menu+0x1146>
		   		kapi2Tip = 2;
 80023ec:	4b54      	ldr	r3, [pc, #336]	@ (8002540 <menu+0x1294>)
 80023ee:	2202      	movs	r2, #2
 80023f0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80023f2:	f001 fc99 	bl	8003d28 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80023f6:	2108      	movs	r1, #8
 80023f8:	4853      	ldr	r0, [pc, #332]	@ (8002548 <menu+0x129c>)
 80023fa:	f007 fd17 	bl	8009e2c <HAL_GPIO_ReadPin>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b01      	cmp	r3, #1
 8002402:	d10d      	bne.n	8002420 <menu+0x1174>
 8002404:	4b51      	ldr	r3, [pc, #324]	@ (800254c <menu+0x12a0>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	f083 0301 	eor.w	r3, r3, #1
 800240c:	b2db      	uxtb	r3, r3
 800240e:	2b00      	cmp	r3, #0
 8002410:	d006      	beq.n	8002420 <menu+0x1174>
			eepromData[10] = kapi2Tip;
 8002412:	4b4b      	ldr	r3, [pc, #300]	@ (8002540 <menu+0x1294>)
 8002414:	781a      	ldrb	r2, [r3, #0]
 8002416:	4b4e      	ldr	r3, [pc, #312]	@ (8002550 <menu+0x12a4>)
 8002418:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 800241a:	4b4e      	ldr	r3, [pc, #312]	@ (8002554 <menu+0x12a8>)
 800241c:	2201      	movs	r2, #1
 800241e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002420:	4b4d      	ldr	r3, [pc, #308]	@ (8002558 <menu+0x12ac>)
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	2b0c      	cmp	r3, #12
 8002426:	d16c      	bne.n	8002502 <menu+0x1256>
		lcd_print(1, 1, ikinciKapiAcSuresiText);
 8002428:	4a4c      	ldr	r2, [pc, #304]	@ (800255c <menu+0x12b0>)
 800242a:	2101      	movs	r1, #1
 800242c:	2001      	movs	r0, #1
 800242e:	f006 f9d3 	bl	80087d8 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 8002432:	4a4b      	ldr	r2, [pc, #300]	@ (8002560 <menu+0x12b4>)
 8002434:	2101      	movs	r1, #1
 8002436:	2002      	movs	r0, #2
 8002438:	f006 f9ce 	bl	80087d8 <lcd_print>

		itoa(kapi2AcSure, snum, 10);
 800243c:	4b49      	ldr	r3, [pc, #292]	@ (8002564 <menu+0x12b8>)
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	220a      	movs	r2, #10
 8002442:	4949      	ldr	r1, [pc, #292]	@ (8002568 <menu+0x12bc>)
 8002444:	4618      	mov	r0, r3
 8002446:	f00a fd1d 	bl	800ce84 <itoa>
		lcd_print(2,16,snum);
 800244a:	4a47      	ldr	r2, [pc, #284]	@ (8002568 <menu+0x12bc>)
 800244c:	2110      	movs	r1, #16
 800244e:	2002      	movs	r0, #2
 8002450:	f006 f9c2 	bl	80087d8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002454:	2102      	movs	r1, #2
 8002456:	483c      	ldr	r0, [pc, #240]	@ (8002548 <menu+0x129c>)
 8002458:	f007 fce8 	bl	8009e2c <HAL_GPIO_ReadPin>
 800245c:	4603      	mov	r3, r0
 800245e:	2b01      	cmp	r3, #1
 8002460:	d119      	bne.n	8002496 <menu+0x11ea>
 8002462:	4b3a      	ldr	r3, [pc, #232]	@ (800254c <menu+0x12a0>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	f083 0301 	eor.w	r3, r3, #1
 800246a:	b2db      	uxtb	r3, r3
 800246c:	2b00      	cmp	r3, #0
 800246e:	d012      	beq.n	8002496 <menu+0x11ea>
 8002470:	4b33      	ldr	r3, [pc, #204]	@ (8002540 <menu+0x1294>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	2b00      	cmp	r3, #0
 8002476:	d10e      	bne.n	8002496 <menu+0x11ea>
			kapi2AcSure = kapi2AcSure + 1;
 8002478:	4b3a      	ldr	r3, [pc, #232]	@ (8002564 <menu+0x12b8>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	3301      	adds	r3, #1
 800247e:	b2da      	uxtb	r2, r3
 8002480:	4b38      	ldr	r3, [pc, #224]	@ (8002564 <menu+0x12b8>)
 8002482:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002484:	4b37      	ldr	r3, [pc, #220]	@ (8002564 <menu+0x12b8>)
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	2b05      	cmp	r3, #5
 800248a:	d902      	bls.n	8002492 <menu+0x11e6>
				kapi2AcSure = 0;
 800248c:	4b35      	ldr	r3, [pc, #212]	@ (8002564 <menu+0x12b8>)
 800248e:	2200      	movs	r2, #0
 8002490:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002492:	f001 fc49 	bl	8003d28 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002496:	2104      	movs	r1, #4
 8002498:	482b      	ldr	r0, [pc, #172]	@ (8002548 <menu+0x129c>)
 800249a:	f007 fcc7 	bl	8009e2c <HAL_GPIO_ReadPin>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b01      	cmp	r3, #1
 80024a2:	d119      	bne.n	80024d8 <menu+0x122c>
 80024a4:	4b29      	ldr	r3, [pc, #164]	@ (800254c <menu+0x12a0>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	f083 0301 	eor.w	r3, r3, #1
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d012      	beq.n	80024d8 <menu+0x122c>
 80024b2:	4b23      	ldr	r3, [pc, #140]	@ (8002540 <menu+0x1294>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10e      	bne.n	80024d8 <menu+0x122c>
			kapi2AcSure = kapi2AcSure - 1;
 80024ba:	4b2a      	ldr	r3, [pc, #168]	@ (8002564 <menu+0x12b8>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	3b01      	subs	r3, #1
 80024c0:	b2da      	uxtb	r2, r3
 80024c2:	4b28      	ldr	r3, [pc, #160]	@ (8002564 <menu+0x12b8>)
 80024c4:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 80024c6:	4b27      	ldr	r3, [pc, #156]	@ (8002564 <menu+0x12b8>)
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	2b06      	cmp	r3, #6
 80024cc:	d902      	bls.n	80024d4 <menu+0x1228>
		   		kapi2AcSure = 5;
 80024ce:	4b25      	ldr	r3, [pc, #148]	@ (8002564 <menu+0x12b8>)
 80024d0:	2205      	movs	r2, #5
 80024d2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80024d4:	f001 fc28 	bl	8003d28 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80024d8:	2108      	movs	r1, #8
 80024da:	481b      	ldr	r0, [pc, #108]	@ (8002548 <menu+0x129c>)
 80024dc:	f007 fca6 	bl	8009e2c <HAL_GPIO_ReadPin>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d10d      	bne.n	8002502 <menu+0x1256>
 80024e6:	4b19      	ldr	r3, [pc, #100]	@ (800254c <menu+0x12a0>)
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	f083 0301 	eor.w	r3, r3, #1
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d006      	beq.n	8002502 <menu+0x1256>
			eepromData[11] = kapi2AcSure;
 80024f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002564 <menu+0x12b8>)
 80024f6:	781a      	ldrb	r2, [r3, #0]
 80024f8:	4b15      	ldr	r3, [pc, #84]	@ (8002550 <menu+0x12a4>)
 80024fa:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 80024fc:	4b15      	ldr	r3, [pc, #84]	@ (8002554 <menu+0x12a8>)
 80024fe:	2201      	movs	r2, #1
 8002500:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8002502:	4b15      	ldr	r3, [pc, #84]	@ (8002558 <menu+0x12ac>)
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	2b0d      	cmp	r3, #13
 8002508:	f040 8090 	bne.w	800262c <menu+0x1380>
		lcd_print(1, 1, tablaKapiTipiText);
 800250c:	4a17      	ldr	r2, [pc, #92]	@ (800256c <menu+0x12c0>)
 800250e:	2101      	movs	r1, #1
 8002510:	2001      	movs	r0, #1
 8002512:	f006 f961 	bl	80087d8 <lcd_print>

		if(kapitablaTip == 0) {
 8002516:	4b16      	ldr	r3, [pc, #88]	@ (8002570 <menu+0x12c4>)
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d105      	bne.n	800252a <menu+0x127e>
			lcd_print(2, 1, prudhomeTextGN);
 800251e:	4a15      	ldr	r2, [pc, #84]	@ (8002574 <menu+0x12c8>)
 8002520:	2101      	movs	r1, #1
 8002522:	2002      	movs	r0, #2
 8002524:	f006 f958 	bl	80087d8 <lcd_print>
 8002528:	e031      	b.n	800258e <menu+0x12e2>
		} else if(kapitablaTip == 1) {
 800252a:	4b11      	ldr	r3, [pc, #68]	@ (8002570 <menu+0x12c4>)
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	2b01      	cmp	r3, #1
 8002530:	d124      	bne.n	800257c <menu+0x12d0>
			lcd_print(2, 1, butonKontrolluText);
 8002532:	4a11      	ldr	r2, [pc, #68]	@ (8002578 <menu+0x12cc>)
 8002534:	2101      	movs	r1, #1
 8002536:	2002      	movs	r0, #2
 8002538:	f006 f94e 	bl	80087d8 <lcd_print>
 800253c:	e027      	b.n	800258e <menu+0x12e2>
 800253e:	bf00      	nop
 8002540:	200010aa 	.word	0x200010aa
 8002544:	20000118 	.word	0x20000118
 8002548:	40010800 	.word	0x40010800
 800254c:	200010cf 	.word	0x200010cf
 8002550:	20000fc8 	.word	0x20000fc8
 8002554:	200010cc 	.word	0x200010cc
 8002558:	200010a0 	.word	0x200010a0
 800255c:	200014d0 	.word	0x200014d0
 8002560:	200014a8 	.word	0x200014a8
 8002564:	200010ba 	.word	0x200010ba
 8002568:	20001038 	.word	0x20001038
 800256c:	200014e4 	.word	0x200014e4
 8002570:	200010ab 	.word	0x200010ab
 8002574:	20000104 	.word	0x20000104
 8002578:	20001480 	.word	0x20001480
		} else if(kapitablaTip == 2) {
 800257c:	4b3f      	ldr	r3, [pc, #252]	@ (800267c <menu+0x13d0>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	2b02      	cmp	r3, #2
 8002582:	d104      	bne.n	800258e <menu+0x12e2>
			lcd_print(2, 1, pizzattoTextGN);
 8002584:	4a3e      	ldr	r2, [pc, #248]	@ (8002680 <menu+0x13d4>)
 8002586:	2101      	movs	r1, #1
 8002588:	2002      	movs	r0, #2
 800258a:	f006 f925 	bl	80087d8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800258e:	2102      	movs	r1, #2
 8002590:	483c      	ldr	r0, [pc, #240]	@ (8002684 <menu+0x13d8>)
 8002592:	f007 fc4b 	bl	8009e2c <HAL_GPIO_ReadPin>
 8002596:	4603      	mov	r3, r0
 8002598:	2b01      	cmp	r3, #1
 800259a:	d115      	bne.n	80025c8 <menu+0x131c>
 800259c:	4b3a      	ldr	r3, [pc, #232]	@ (8002688 <menu+0x13dc>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	f083 0301 	eor.w	r3, r3, #1
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d00e      	beq.n	80025c8 <menu+0x131c>
			kapitablaTip = kapitablaTip + 1;
 80025aa:	4b34      	ldr	r3, [pc, #208]	@ (800267c <menu+0x13d0>)
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	3301      	adds	r3, #1
 80025b0:	b2da      	uxtb	r2, r3
 80025b2:	4b32      	ldr	r3, [pc, #200]	@ (800267c <menu+0x13d0>)
 80025b4:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 80025b6:	4b31      	ldr	r3, [pc, #196]	@ (800267c <menu+0x13d0>)
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d902      	bls.n	80025c4 <menu+0x1318>
				kapitablaTip = 0;
 80025be:	4b2f      	ldr	r3, [pc, #188]	@ (800267c <menu+0x13d0>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80025c4:	f001 fbb0 	bl	8003d28 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80025c8:	2104      	movs	r1, #4
 80025ca:	482e      	ldr	r0, [pc, #184]	@ (8002684 <menu+0x13d8>)
 80025cc:	f007 fc2e 	bl	8009e2c <HAL_GPIO_ReadPin>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b01      	cmp	r3, #1
 80025d4:	d115      	bne.n	8002602 <menu+0x1356>
 80025d6:	4b2c      	ldr	r3, [pc, #176]	@ (8002688 <menu+0x13dc>)
 80025d8:	781b      	ldrb	r3, [r3, #0]
 80025da:	f083 0301 	eor.w	r3, r3, #1
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d00e      	beq.n	8002602 <menu+0x1356>
			kapitablaTip = kapitablaTip - 1;
 80025e4:	4b25      	ldr	r3, [pc, #148]	@ (800267c <menu+0x13d0>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	3b01      	subs	r3, #1
 80025ea:	b2da      	uxtb	r2, r3
 80025ec:	4b23      	ldr	r3, [pc, #140]	@ (800267c <menu+0x13d0>)
 80025ee:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 80025f0:	4b22      	ldr	r3, [pc, #136]	@ (800267c <menu+0x13d0>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	2b03      	cmp	r3, #3
 80025f6:	d902      	bls.n	80025fe <menu+0x1352>
		   		kapitablaTip = 2;
 80025f8:	4b20      	ldr	r3, [pc, #128]	@ (800267c <menu+0x13d0>)
 80025fa:	2202      	movs	r2, #2
 80025fc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80025fe:	f001 fb93 	bl	8003d28 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002602:	2108      	movs	r1, #8
 8002604:	481f      	ldr	r0, [pc, #124]	@ (8002684 <menu+0x13d8>)
 8002606:	f007 fc11 	bl	8009e2c <HAL_GPIO_ReadPin>
 800260a:	4603      	mov	r3, r0
 800260c:	2b01      	cmp	r3, #1
 800260e:	d10d      	bne.n	800262c <menu+0x1380>
 8002610:	4b1d      	ldr	r3, [pc, #116]	@ (8002688 <menu+0x13dc>)
 8002612:	781b      	ldrb	r3, [r3, #0]
 8002614:	f083 0301 	eor.w	r3, r3, #1
 8002618:	b2db      	uxtb	r3, r3
 800261a:	2b00      	cmp	r3, #0
 800261c:	d006      	beq.n	800262c <menu+0x1380>
			eepromData[12] = kapitablaTip;
 800261e:	4b17      	ldr	r3, [pc, #92]	@ (800267c <menu+0x13d0>)
 8002620:	781a      	ldrb	r2, [r3, #0]
 8002622:	4b1a      	ldr	r3, [pc, #104]	@ (800268c <menu+0x13e0>)
 8002624:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002626:	4b1a      	ldr	r3, [pc, #104]	@ (8002690 <menu+0x13e4>)
 8002628:	2201      	movs	r2, #1
 800262a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 800262c:	4b19      	ldr	r3, [pc, #100]	@ (8002694 <menu+0x13e8>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2b0e      	cmp	r3, #14
 8002632:	f040 80a3 	bne.w	800277c <menu+0x14d0>
		lcd_print(1, 1, tablaKapiAcKonumText);
 8002636:	4a18      	ldr	r2, [pc, #96]	@ (8002698 <menu+0x13ec>)
 8002638:	2101      	movs	r1, #1
 800263a:	2001      	movs	r0, #1
 800263c:	f006 f8cc 	bl	80087d8 <lcd_print>

		if(kapiTablaAcKonum == 0) {
 8002640:	4b16      	ldr	r3, [pc, #88]	@ (800269c <menu+0x13f0>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d105      	bne.n	8002654 <menu+0x13a8>
			lcd_print(2, 1, birinciKattaAcText);
 8002648:	4a15      	ldr	r2, [pc, #84]	@ (80026a0 <menu+0x13f4>)
 800264a:	2101      	movs	r1, #1
 800264c:	2002      	movs	r0, #2
 800264e:	f006 f8c3 	bl	80087d8 <lcd_print>
 8002652:	e034      	b.n	80026be <menu+0x1412>
		} else if(kapiTablaAcKonum == 1) {
 8002654:	4b11      	ldr	r3, [pc, #68]	@ (800269c <menu+0x13f0>)
 8002656:	781b      	ldrb	r3, [r3, #0]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d105      	bne.n	8002668 <menu+0x13bc>
			lcd_print(2, 1, ikinciKattaAcText);
 800265c:	4a11      	ldr	r2, [pc, #68]	@ (80026a4 <menu+0x13f8>)
 800265e:	2101      	movs	r1, #1
 8002660:	2002      	movs	r0, #2
 8002662:	f006 f8b9 	bl	80087d8 <lcd_print>
 8002666:	e02a      	b.n	80026be <menu+0x1412>
		} else if(kapiTablaAcKonum == 2) {
 8002668:	4b0c      	ldr	r3, [pc, #48]	@ (800269c <menu+0x13f0>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	2b02      	cmp	r3, #2
 800266e:	d11d      	bne.n	80026ac <menu+0x1400>
			lcd_print(2, 1, birVeIkinciKattaAcText);
 8002670:	4a0d      	ldr	r2, [pc, #52]	@ (80026a8 <menu+0x13fc>)
 8002672:	2101      	movs	r1, #1
 8002674:	2002      	movs	r0, #2
 8002676:	f006 f8af 	bl	80087d8 <lcd_print>
 800267a:	e020      	b.n	80026be <menu+0x1412>
 800267c:	200010ab 	.word	0x200010ab
 8002680:	20000118 	.word	0x20000118
 8002684:	40010800 	.word	0x40010800
 8002688:	200010cf 	.word	0x200010cf
 800268c:	20000fc8 	.word	0x20000fc8
 8002690:	200010cc 	.word	0x200010cc
 8002694:	200010a0 	.word	0x200010a0
 8002698:	200014f8 	.word	0x200014f8
 800269c:	200010ad 	.word	0x200010ad
 80026a0:	2000150c 	.word	0x2000150c
 80026a4:	20001520 	.word	0x20001520
 80026a8:	20001534 	.word	0x20001534
		} else if(kapiTablaAcKonum == 3) {
 80026ac:	4b76      	ldr	r3, [pc, #472]	@ (8002888 <menu+0x15dc>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	2b03      	cmp	r3, #3
 80026b2:	d104      	bne.n	80026be <menu+0x1412>
			lcd_print(2, 1, pasifText);
 80026b4:	4a75      	ldr	r2, [pc, #468]	@ (800288c <menu+0x15e0>)
 80026b6:	2101      	movs	r1, #1
 80026b8:	2002      	movs	r0, #2
 80026ba:	f006 f88d 	bl	80087d8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80026be:	2102      	movs	r1, #2
 80026c0:	4873      	ldr	r0, [pc, #460]	@ (8002890 <menu+0x15e4>)
 80026c2:	f007 fbb3 	bl	8009e2c <HAL_GPIO_ReadPin>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d115      	bne.n	80026f8 <menu+0x144c>
 80026cc:	4b71      	ldr	r3, [pc, #452]	@ (8002894 <menu+0x15e8>)
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	f083 0301 	eor.w	r3, r3, #1
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00e      	beq.n	80026f8 <menu+0x144c>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 80026da:	4b6b      	ldr	r3, [pc, #428]	@ (8002888 <menu+0x15dc>)
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	3301      	adds	r3, #1
 80026e0:	b2da      	uxtb	r2, r3
 80026e2:	4b69      	ldr	r3, [pc, #420]	@ (8002888 <menu+0x15dc>)
 80026e4:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 80026e6:	4b68      	ldr	r3, [pc, #416]	@ (8002888 <menu+0x15dc>)
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d902      	bls.n	80026f4 <menu+0x1448>
				kapiTablaAcKonum = 0;
 80026ee:	4b66      	ldr	r3, [pc, #408]	@ (8002888 <menu+0x15dc>)
 80026f0:	2200      	movs	r2, #0
 80026f2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80026f4:	f001 fb18 	bl	8003d28 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80026f8:	2104      	movs	r1, #4
 80026fa:	4865      	ldr	r0, [pc, #404]	@ (8002890 <menu+0x15e4>)
 80026fc:	f007 fb96 	bl	8009e2c <HAL_GPIO_ReadPin>
 8002700:	4603      	mov	r3, r0
 8002702:	2b01      	cmp	r3, #1
 8002704:	d115      	bne.n	8002732 <menu+0x1486>
 8002706:	4b63      	ldr	r3, [pc, #396]	@ (8002894 <menu+0x15e8>)
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	f083 0301 	eor.w	r3, r3, #1
 800270e:	b2db      	uxtb	r3, r3
 8002710:	2b00      	cmp	r3, #0
 8002712:	d00e      	beq.n	8002732 <menu+0x1486>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002714:	4b5c      	ldr	r3, [pc, #368]	@ (8002888 <menu+0x15dc>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	3b01      	subs	r3, #1
 800271a:	b2da      	uxtb	r2, r3
 800271c:	4b5a      	ldr	r3, [pc, #360]	@ (8002888 <menu+0x15dc>)
 800271e:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002720:	4b59      	ldr	r3, [pc, #356]	@ (8002888 <menu+0x15dc>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	2b03      	cmp	r3, #3
 8002726:	d902      	bls.n	800272e <menu+0x1482>
		   		kapiTablaAcKonum = 2;
 8002728:	4b57      	ldr	r3, [pc, #348]	@ (8002888 <menu+0x15dc>)
 800272a:	2202      	movs	r2, #2
 800272c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800272e:	f001 fafb 	bl	8003d28 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002732:	2108      	movs	r1, #8
 8002734:	4856      	ldr	r0, [pc, #344]	@ (8002890 <menu+0x15e4>)
 8002736:	f007 fb79 	bl	8009e2c <HAL_GPIO_ReadPin>
 800273a:	4603      	mov	r3, r0
 800273c:	2b01      	cmp	r3, #1
 800273e:	d11d      	bne.n	800277c <menu+0x14d0>
 8002740:	4b54      	ldr	r3, [pc, #336]	@ (8002894 <menu+0x15e8>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	f083 0301 	eor.w	r3, r3, #1
 8002748:	b2db      	uxtb	r3, r3
 800274a:	2b00      	cmp	r3, #0
 800274c:	d016      	beq.n	800277c <menu+0x14d0>
			eepromData[34] = kapiTablaAcKonum;
 800274e:	4b4e      	ldr	r3, [pc, #312]	@ (8002888 <menu+0x15dc>)
 8002750:	781a      	ldrb	r2, [r3, #0]
 8002752:	4b51      	ldr	r3, [pc, #324]	@ (8002898 <menu+0x15ec>)
 8002754:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002758:	4b4b      	ldr	r3, [pc, #300]	@ (8002888 <menu+0x15dc>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d003      	beq.n	8002768 <menu+0x14bc>
 8002760:	4b49      	ldr	r3, [pc, #292]	@ (8002888 <menu+0x15dc>)
 8002762:	781b      	ldrb	r3, [r3, #0]
 8002764:	2b02      	cmp	r3, #2
 8002766:	d106      	bne.n	8002776 <menu+0x14ca>
				altLimit = 1;
 8002768:	4b4c      	ldr	r3, [pc, #304]	@ (800289c <menu+0x15f0>)
 800276a:	2201      	movs	r2, #1
 800276c:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 800276e:	4b4b      	ldr	r3, [pc, #300]	@ (800289c <menu+0x15f0>)
 8002770:	781a      	ldrb	r2, [r3, #0]
 8002772:	4b49      	ldr	r3, [pc, #292]	@ (8002898 <menu+0x15ec>)
 8002774:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002776:	4b4a      	ldr	r3, [pc, #296]	@ (80028a0 <menu+0x15f4>)
 8002778:	2201      	movs	r2, #1
 800277a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 800277c:	4b49      	ldr	r3, [pc, #292]	@ (80028a4 <menu+0x15f8>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	2b0f      	cmp	r3, #15
 8002782:	d16c      	bne.n	800285e <menu+0x15b2>
		lcd_print(1, 1, tablaKapiAcSureText);
 8002784:	4a48      	ldr	r2, [pc, #288]	@ (80028a8 <menu+0x15fc>)
 8002786:	2101      	movs	r1, #1
 8002788:	2001      	movs	r0, #1
 800278a:	f006 f825 	bl	80087d8 <lcd_print>
		lcd_print(2, 1, kacSaniyeText);
 800278e:	4a47      	ldr	r2, [pc, #284]	@ (80028ac <menu+0x1600>)
 8002790:	2101      	movs	r1, #1
 8002792:	2002      	movs	r0, #2
 8002794:	f006 f820 	bl	80087d8 <lcd_print>

		itoa(kapiTablaAcSure, snum, 10);
 8002798:	4b45      	ldr	r3, [pc, #276]	@ (80028b0 <menu+0x1604>)
 800279a:	781b      	ldrb	r3, [r3, #0]
 800279c:	220a      	movs	r2, #10
 800279e:	4945      	ldr	r1, [pc, #276]	@ (80028b4 <menu+0x1608>)
 80027a0:	4618      	mov	r0, r3
 80027a2:	f00a fb6f 	bl	800ce84 <itoa>
		lcd_print(2,16,snum);
 80027a6:	4a43      	ldr	r2, [pc, #268]	@ (80028b4 <menu+0x1608>)
 80027a8:	2110      	movs	r1, #16
 80027aa:	2002      	movs	r0, #2
 80027ac:	f006 f814 	bl	80087d8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 80027b0:	2102      	movs	r1, #2
 80027b2:	4837      	ldr	r0, [pc, #220]	@ (8002890 <menu+0x15e4>)
 80027b4:	f007 fb3a 	bl	8009e2c <HAL_GPIO_ReadPin>
 80027b8:	4603      	mov	r3, r0
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d119      	bne.n	80027f2 <menu+0x1546>
 80027be:	4b35      	ldr	r3, [pc, #212]	@ (8002894 <menu+0x15e8>)
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	f083 0301 	eor.w	r3, r3, #1
 80027c6:	b2db      	uxtb	r3, r3
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d012      	beq.n	80027f2 <menu+0x1546>
 80027cc:	4b3a      	ldr	r3, [pc, #232]	@ (80028b8 <menu+0x160c>)
 80027ce:	781b      	ldrb	r3, [r3, #0]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10e      	bne.n	80027f2 <menu+0x1546>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 80027d4:	4b36      	ldr	r3, [pc, #216]	@ (80028b0 <menu+0x1604>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	3301      	adds	r3, #1
 80027da:	b2da      	uxtb	r2, r3
 80027dc:	4b34      	ldr	r3, [pc, #208]	@ (80028b0 <menu+0x1604>)
 80027de:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 80027e0:	4b33      	ldr	r3, [pc, #204]	@ (80028b0 <menu+0x1604>)
 80027e2:	781b      	ldrb	r3, [r3, #0]
 80027e4:	2b05      	cmp	r3, #5
 80027e6:	d902      	bls.n	80027ee <menu+0x1542>
				kapiTablaAcSure = 0;
 80027e8:	4b31      	ldr	r3, [pc, #196]	@ (80028b0 <menu+0x1604>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80027ee:	f001 fa9b 	bl	8003d28 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 80027f2:	2104      	movs	r1, #4
 80027f4:	4826      	ldr	r0, [pc, #152]	@ (8002890 <menu+0x15e4>)
 80027f6:	f007 fb19 	bl	8009e2c <HAL_GPIO_ReadPin>
 80027fa:	4603      	mov	r3, r0
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d119      	bne.n	8002834 <menu+0x1588>
 8002800:	4b24      	ldr	r3, [pc, #144]	@ (8002894 <menu+0x15e8>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	f083 0301 	eor.w	r3, r3, #1
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	d012      	beq.n	8002834 <menu+0x1588>
 800280e:	4b2a      	ldr	r3, [pc, #168]	@ (80028b8 <menu+0x160c>)
 8002810:	781b      	ldrb	r3, [r3, #0]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d10e      	bne.n	8002834 <menu+0x1588>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8002816:	4b26      	ldr	r3, [pc, #152]	@ (80028b0 <menu+0x1604>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	3b01      	subs	r3, #1
 800281c:	b2da      	uxtb	r2, r3
 800281e:	4b24      	ldr	r3, [pc, #144]	@ (80028b0 <menu+0x1604>)
 8002820:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8002822:	4b23      	ldr	r3, [pc, #140]	@ (80028b0 <menu+0x1604>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	2b06      	cmp	r3, #6
 8002828:	d902      	bls.n	8002830 <menu+0x1584>
		   		kapiTablaAcSure = 5;
 800282a:	4b21      	ldr	r3, [pc, #132]	@ (80028b0 <menu+0x1604>)
 800282c:	2205      	movs	r2, #5
 800282e:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8002830:	f001 fa7a 	bl	8003d28 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002834:	2108      	movs	r1, #8
 8002836:	4816      	ldr	r0, [pc, #88]	@ (8002890 <menu+0x15e4>)
 8002838:	f007 faf8 	bl	8009e2c <HAL_GPIO_ReadPin>
 800283c:	4603      	mov	r3, r0
 800283e:	2b01      	cmp	r3, #1
 8002840:	d10d      	bne.n	800285e <menu+0x15b2>
 8002842:	4b14      	ldr	r3, [pc, #80]	@ (8002894 <menu+0x15e8>)
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	f083 0301 	eor.w	r3, r3, #1
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2b00      	cmp	r3, #0
 800284e:	d006      	beq.n	800285e <menu+0x15b2>
			eepromData[13] = kapiTablaAcSure;
 8002850:	4b17      	ldr	r3, [pc, #92]	@ (80028b0 <menu+0x1604>)
 8002852:	781a      	ldrb	r2, [r3, #0]
 8002854:	4b10      	ldr	r3, [pc, #64]	@ (8002898 <menu+0x15ec>)
 8002856:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8002858:	4b11      	ldr	r3, [pc, #68]	@ (80028a0 <menu+0x15f4>)
 800285a:	2201      	movs	r2, #1
 800285c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 800285e:	4b11      	ldr	r3, [pc, #68]	@ (80028a4 <menu+0x15f8>)
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2b10      	cmp	r3, #16
 8002864:	f040 8086 	bne.w	8002974 <menu+0x16c8>
		lcd_print(1, 1, yukariYavaslamaLimitiText);
 8002868:	4a14      	ldr	r2, [pc, #80]	@ (80028bc <menu+0x1610>)
 800286a:	2101      	movs	r1, #1
 800286c:	2001      	movs	r0, #1
 800286e:	f005 ffb3 	bl	80087d8 <lcd_print>

		if(yukariYavasLimit == 0) {
 8002872:	4b13      	ldr	r3, [pc, #76]	@ (80028c0 <menu+0x1614>)
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d124      	bne.n	80028c4 <menu+0x1618>
			lcd_print(2, 1, pasifText);
 800287a:	4a04      	ldr	r2, [pc, #16]	@ (800288c <menu+0x15e0>)
 800287c:	2101      	movs	r1, #1
 800287e:	2002      	movs	r0, #2
 8002880:	f005 ffaa 	bl	80087d8 <lcd_print>
 8002884:	e027      	b.n	80028d6 <menu+0x162a>
 8002886:	bf00      	nop
 8002888:	200010ad 	.word	0x200010ad
 800288c:	2000137c 	.word	0x2000137c
 8002890:	40010800 	.word	0x40010800
 8002894:	200010cf 	.word	0x200010cf
 8002898:	20000fc8 	.word	0x20000fc8
 800289c:	200010a6 	.word	0x200010a6
 80028a0:	200010cc 	.word	0x200010cc
 80028a4:	200010a0 	.word	0x200010a0
 80028a8:	20001548 	.word	0x20001548
 80028ac:	200014a8 	.word	0x200014a8
 80028b0:	200010bb 	.word	0x200010bb
 80028b4:	20001038 	.word	0x20001038
 80028b8:	200010ab 	.word	0x200010ab
 80028bc:	2000155c 	.word	0x2000155c
 80028c0:	200010ae 	.word	0x200010ae
		} else if(yukariYavasLimit == 1) {
 80028c4:	4b84      	ldr	r3, [pc, #528]	@ (8002ad8 <menu+0x182c>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d104      	bne.n	80028d6 <menu+0x162a>
			lcd_print(2, 1, aktifText);
 80028cc:	4a83      	ldr	r2, [pc, #524]	@ (8002adc <menu+0x1830>)
 80028ce:	2101      	movs	r1, #1
 80028d0:	2002      	movs	r0, #2
 80028d2:	f005 ff81 	bl	80087d8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80028d6:	2102      	movs	r1, #2
 80028d8:	4881      	ldr	r0, [pc, #516]	@ (8002ae0 <menu+0x1834>)
 80028da:	f007 faa7 	bl	8009e2c <HAL_GPIO_ReadPin>
 80028de:	4603      	mov	r3, r0
 80028e0:	2b01      	cmp	r3, #1
 80028e2:	d115      	bne.n	8002910 <menu+0x1664>
 80028e4:	4b7f      	ldr	r3, [pc, #508]	@ (8002ae4 <menu+0x1838>)
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	f083 0301 	eor.w	r3, r3, #1
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00e      	beq.n	8002910 <menu+0x1664>
			yukariYavasLimit = yukariYavasLimit + 1;
 80028f2:	4b79      	ldr	r3, [pc, #484]	@ (8002ad8 <menu+0x182c>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	3301      	adds	r3, #1
 80028f8:	b2da      	uxtb	r2, r3
 80028fa:	4b77      	ldr	r3, [pc, #476]	@ (8002ad8 <menu+0x182c>)
 80028fc:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 80028fe:	4b76      	ldr	r3, [pc, #472]	@ (8002ad8 <menu+0x182c>)
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	2b01      	cmp	r3, #1
 8002904:	d902      	bls.n	800290c <menu+0x1660>
				yukariYavasLimit = 0;
 8002906:	4b74      	ldr	r3, [pc, #464]	@ (8002ad8 <menu+0x182c>)
 8002908:	2200      	movs	r2, #0
 800290a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800290c:	f001 fa0c 	bl	8003d28 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002910:	2104      	movs	r1, #4
 8002912:	4873      	ldr	r0, [pc, #460]	@ (8002ae0 <menu+0x1834>)
 8002914:	f007 fa8a 	bl	8009e2c <HAL_GPIO_ReadPin>
 8002918:	4603      	mov	r3, r0
 800291a:	2b01      	cmp	r3, #1
 800291c:	d115      	bne.n	800294a <menu+0x169e>
 800291e:	4b71      	ldr	r3, [pc, #452]	@ (8002ae4 <menu+0x1838>)
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	f083 0301 	eor.w	r3, r3, #1
 8002926:	b2db      	uxtb	r3, r3
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00e      	beq.n	800294a <menu+0x169e>
			yukariYavasLimit = yukariYavasLimit - 1;
 800292c:	4b6a      	ldr	r3, [pc, #424]	@ (8002ad8 <menu+0x182c>)
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	3b01      	subs	r3, #1
 8002932:	b2da      	uxtb	r2, r3
 8002934:	4b68      	ldr	r3, [pc, #416]	@ (8002ad8 <menu+0x182c>)
 8002936:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8002938:	4b67      	ldr	r3, [pc, #412]	@ (8002ad8 <menu+0x182c>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d002      	beq.n	8002946 <menu+0x169a>
		   		yukariYavasLimit = 1;
 8002940:	4b65      	ldr	r3, [pc, #404]	@ (8002ad8 <menu+0x182c>)
 8002942:	2201      	movs	r2, #1
 8002944:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002946:	f001 f9ef 	bl	8003d28 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800294a:	2108      	movs	r1, #8
 800294c:	4864      	ldr	r0, [pc, #400]	@ (8002ae0 <menu+0x1834>)
 800294e:	f007 fa6d 	bl	8009e2c <HAL_GPIO_ReadPin>
 8002952:	4603      	mov	r3, r0
 8002954:	2b01      	cmp	r3, #1
 8002956:	d10d      	bne.n	8002974 <menu+0x16c8>
 8002958:	4b62      	ldr	r3, [pc, #392]	@ (8002ae4 <menu+0x1838>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	f083 0301 	eor.w	r3, r3, #1
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d006      	beq.n	8002974 <menu+0x16c8>
			eepromData[14] = yukariYavasLimit;
 8002966:	4b5c      	ldr	r3, [pc, #368]	@ (8002ad8 <menu+0x182c>)
 8002968:	781a      	ldrb	r2, [r3, #0]
 800296a:	4b5f      	ldr	r3, [pc, #380]	@ (8002ae8 <menu+0x183c>)
 800296c:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 800296e:	4b5f      	ldr	r3, [pc, #380]	@ (8002aec <menu+0x1840>)
 8002970:	2201      	movs	r2, #1
 8002972:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8002974:	4b5e      	ldr	r3, [pc, #376]	@ (8002af0 <menu+0x1844>)
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	2b11      	cmp	r3, #17
 800297a:	f040 808b 	bne.w	8002a94 <menu+0x17e8>
		lcd_print(1, 1, devirmeYuruyusMenuText);
 800297e:	4a5d      	ldr	r2, [pc, #372]	@ (8002af4 <menu+0x1848>)
 8002980:	2101      	movs	r1, #1
 8002982:	2001      	movs	r0, #1
 8002984:	f005 ff28 	bl	80087d8 <lcd_print>

		if(devirmeYuruyusSecim == 2) {
 8002988:	4b5b      	ldr	r3, [pc, #364]	@ (8002af8 <menu+0x184c>)
 800298a:	781b      	ldrb	r3, [r3, #0]
 800298c:	2b02      	cmp	r3, #2
 800298e:	d105      	bne.n	800299c <menu+0x16f0>
			lcd_print(2, 1, devirmeAktifText);
 8002990:	4a5a      	ldr	r2, [pc, #360]	@ (8002afc <menu+0x1850>)
 8002992:	2101      	movs	r1, #1
 8002994:	2002      	movs	r0, #2
 8002996:	f005 ff1f 	bl	80087d8 <lcd_print>
 800299a:	e012      	b.n	80029c2 <menu+0x1716>
		} else if(devirmeYuruyusSecim == 1) {
 800299c:	4b56      	ldr	r3, [pc, #344]	@ (8002af8 <menu+0x184c>)
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d105      	bne.n	80029b0 <menu+0x1704>
			lcd_print(2, 1, yuruyusAktifText);
 80029a4:	4a56      	ldr	r2, [pc, #344]	@ (8002b00 <menu+0x1854>)
 80029a6:	2101      	movs	r1, #1
 80029a8:	2002      	movs	r0, #2
 80029aa:	f005 ff15 	bl	80087d8 <lcd_print>
 80029ae:	e008      	b.n	80029c2 <menu+0x1716>
		} else if(devirmeYuruyusSecim == 0) {
 80029b0:	4b51      	ldr	r3, [pc, #324]	@ (8002af8 <menu+0x184c>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d104      	bne.n	80029c2 <menu+0x1716>
			lcd_print(2, 1, pasifText);
 80029b8:	4a52      	ldr	r2, [pc, #328]	@ (8002b04 <menu+0x1858>)
 80029ba:	2101      	movs	r1, #1
 80029bc:	2002      	movs	r0, #2
 80029be:	f005 ff0b 	bl	80087d8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80029c2:	2102      	movs	r1, #2
 80029c4:	4846      	ldr	r0, [pc, #280]	@ (8002ae0 <menu+0x1834>)
 80029c6:	f007 fa31 	bl	8009e2c <HAL_GPIO_ReadPin>
 80029ca:	4603      	mov	r3, r0
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d115      	bne.n	80029fc <menu+0x1750>
 80029d0:	4b44      	ldr	r3, [pc, #272]	@ (8002ae4 <menu+0x1838>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	f083 0301 	eor.w	r3, r3, #1
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d00e      	beq.n	80029fc <menu+0x1750>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 80029de:	4b46      	ldr	r3, [pc, #280]	@ (8002af8 <menu+0x184c>)
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	3301      	adds	r3, #1
 80029e4:	b2da      	uxtb	r2, r3
 80029e6:	4b44      	ldr	r3, [pc, #272]	@ (8002af8 <menu+0x184c>)
 80029e8:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 80029ea:	4b43      	ldr	r3, [pc, #268]	@ (8002af8 <menu+0x184c>)
 80029ec:	781b      	ldrb	r3, [r3, #0]
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d902      	bls.n	80029f8 <menu+0x174c>
				devirmeYuruyusSecim = 0;
 80029f2:	4b41      	ldr	r3, [pc, #260]	@ (8002af8 <menu+0x184c>)
 80029f4:	2200      	movs	r2, #0
 80029f6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80029f8:	f001 f996 	bl	8003d28 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80029fc:	2104      	movs	r1, #4
 80029fe:	4838      	ldr	r0, [pc, #224]	@ (8002ae0 <menu+0x1834>)
 8002a00:	f007 fa14 	bl	8009e2c <HAL_GPIO_ReadPin>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b01      	cmp	r3, #1
 8002a08:	d115      	bne.n	8002a36 <menu+0x178a>
 8002a0a:	4b36      	ldr	r3, [pc, #216]	@ (8002ae4 <menu+0x1838>)
 8002a0c:	781b      	ldrb	r3, [r3, #0]
 8002a0e:	f083 0301 	eor.w	r3, r3, #1
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00e      	beq.n	8002a36 <menu+0x178a>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8002a18:	4b37      	ldr	r3, [pc, #220]	@ (8002af8 <menu+0x184c>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	b2da      	uxtb	r2, r3
 8002a20:	4b35      	ldr	r3, [pc, #212]	@ (8002af8 <menu+0x184c>)
 8002a22:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8002a24:	4b34      	ldr	r3, [pc, #208]	@ (8002af8 <menu+0x184c>)
 8002a26:	781b      	ldrb	r3, [r3, #0]
 8002a28:	2b03      	cmp	r3, #3
 8002a2a:	d902      	bls.n	8002a32 <menu+0x1786>
		   		devirmeYuruyusSecim = 2;
 8002a2c:	4b32      	ldr	r3, [pc, #200]	@ (8002af8 <menu+0x184c>)
 8002a2e:	2202      	movs	r2, #2
 8002a30:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002a32:	f001 f979 	bl	8003d28 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a36:	2108      	movs	r1, #8
 8002a38:	4829      	ldr	r0, [pc, #164]	@ (8002ae0 <menu+0x1834>)
 8002a3a:	f007 f9f7 	bl	8009e2c <HAL_GPIO_ReadPin>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d127      	bne.n	8002a94 <menu+0x17e8>
 8002a44:	4b27      	ldr	r3, [pc, #156]	@ (8002ae4 <menu+0x1838>)
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	f083 0301 	eor.w	r3, r3, #1
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d020      	beq.n	8002a94 <menu+0x17e8>
			eepromData[15] = devirmeYuruyusSecim;
 8002a52:	4b29      	ldr	r3, [pc, #164]	@ (8002af8 <menu+0x184c>)
 8002a54:	781a      	ldrb	r2, [r3, #0]
 8002a56:	4b24      	ldr	r3, [pc, #144]	@ (8002ae8 <menu+0x183c>)
 8002a58:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 8002a5a:	4b27      	ldr	r3, [pc, #156]	@ (8002af8 <menu+0x184c>)
 8002a5c:	781b      	ldrb	r3, [r3, #0]
 8002a5e:	2b02      	cmp	r3, #2
 8002a60:	d003      	beq.n	8002a6a <menu+0x17be>
 8002a62:	4b25      	ldr	r3, [pc, #148]	@ (8002af8 <menu+0x184c>)
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d106      	bne.n	8002a78 <menu+0x17cc>
				calismaSekli = 0;
 8002a6a:	4b27      	ldr	r3, [pc, #156]	@ (8002b08 <menu+0x185c>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 8002a70:	4b25      	ldr	r3, [pc, #148]	@ (8002b08 <menu+0x185c>)
 8002a72:	781a      	ldrb	r2, [r3, #0]
 8002a74:	4b1c      	ldr	r3, [pc, #112]	@ (8002ae8 <menu+0x183c>)
 8002a76:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8002a78:	4b1f      	ldr	r3, [pc, #124]	@ (8002af8 <menu+0x184c>)
 8002a7a:	781b      	ldrb	r3, [r3, #0]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d106      	bne.n	8002a8e <menu+0x17e2>
				devirmeSilindirTipi = 1;
 8002a80:	4b22      	ldr	r3, [pc, #136]	@ (8002b0c <menu+0x1860>)
 8002a82:	2201      	movs	r2, #1
 8002a84:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 8002a86:	4b21      	ldr	r3, [pc, #132]	@ (8002b0c <menu+0x1860>)
 8002a88:	781a      	ldrb	r2, [r3, #0]
 8002a8a:	4b17      	ldr	r3, [pc, #92]	@ (8002ae8 <menu+0x183c>)
 8002a8c:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 8002a8e:	4b17      	ldr	r3, [pc, #92]	@ (8002aec <menu+0x1840>)
 8002a90:	2201      	movs	r2, #1
 8002a92:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8002a94:	4b16      	ldr	r3, [pc, #88]	@ (8002af0 <menu+0x1844>)
 8002a96:	781b      	ldrb	r3, [r3, #0]
 8002a98:	2b12      	cmp	r3, #18
 8002a9a:	f040 8097 	bne.w	8002bcc <menu+0x1920>
		if(devirmeYuruyusSecim == 2) {
 8002a9e:	4b16      	ldr	r3, [pc, #88]	@ (8002af8 <menu+0x184c>)
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d105      	bne.n	8002ab2 <menu+0x1806>
			lcd_print(1, 1, devirmeYukariText);
 8002aa6:	4a1a      	ldr	r2, [pc, #104]	@ (8002b10 <menu+0x1864>)
 8002aa8:	2101      	movs	r1, #1
 8002aaa:	2001      	movs	r0, #1
 8002aac:	f005 fe94 	bl	80087d8 <lcd_print>
 8002ab0:	e008      	b.n	8002ac4 <menu+0x1818>
		} else if(devirmeYuruyusSecim == 1) {
 8002ab2:	4b11      	ldr	r3, [pc, #68]	@ (8002af8 <menu+0x184c>)
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d104      	bne.n	8002ac4 <menu+0x1818>
			lcd_print(1, 1, yuruyusIleriText);
 8002aba:	4a16      	ldr	r2, [pc, #88]	@ (8002b14 <menu+0x1868>)
 8002abc:	2101      	movs	r1, #1
 8002abe:	2001      	movs	r0, #1
 8002ac0:	f005 fe8a 	bl	80087d8 <lcd_print>
		}

		if(devirmeYukariIleriLimit == 0) {
 8002ac4:	4b14      	ldr	r3, [pc, #80]	@ (8002b18 <menu+0x186c>)
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d127      	bne.n	8002b1c <menu+0x1870>
			lcd_print(2, 1, pasifText);
 8002acc:	4a0d      	ldr	r2, [pc, #52]	@ (8002b04 <menu+0x1858>)
 8002ace:	2101      	movs	r1, #1
 8002ad0:	2002      	movs	r0, #2
 8002ad2:	f005 fe81 	bl	80087d8 <lcd_print>
 8002ad6:	e02a      	b.n	8002b2e <menu+0x1882>
 8002ad8:	200010ae 	.word	0x200010ae
 8002adc:	20001390 	.word	0x20001390
 8002ae0:	40010800 	.word	0x40010800
 8002ae4:	200010cf 	.word	0x200010cf
 8002ae8:	20000fc8 	.word	0x20000fc8
 8002aec:	200010cc 	.word	0x200010cc
 8002af0:	200010a0 	.word	0x200010a0
 8002af4:	20001570 	.word	0x20001570
 8002af8:	200010af 	.word	0x200010af
 8002afc:	20001584 	.word	0x20001584
 8002b00:	20001598 	.word	0x20001598
 8002b04:	2000137c 	.word	0x2000137c
 8002b08:	200010a1 	.word	0x200010a1
 8002b0c:	200010b2 	.word	0x200010b2
 8002b10:	200015ac 	.word	0x200015ac
 8002b14:	200015c0 	.word	0x200015c0
 8002b18:	200010b0 	.word	0x200010b0
		} else if(devirmeYukariIleriLimit == 1){
 8002b1c:	4b79      	ldr	r3, [pc, #484]	@ (8002d04 <menu+0x1a58>)
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	d104      	bne.n	8002b2e <menu+0x1882>
			lcd_print(2, 1, aktifText);
 8002b24:	4a78      	ldr	r2, [pc, #480]	@ (8002d08 <menu+0x1a5c>)
 8002b26:	2101      	movs	r1, #1
 8002b28:	2002      	movs	r0, #2
 8002b2a:	f005 fe55 	bl	80087d8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b2e:	2102      	movs	r1, #2
 8002b30:	4876      	ldr	r0, [pc, #472]	@ (8002d0c <menu+0x1a60>)
 8002b32:	f007 f97b 	bl	8009e2c <HAL_GPIO_ReadPin>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d115      	bne.n	8002b68 <menu+0x18bc>
 8002b3c:	4b74      	ldr	r3, [pc, #464]	@ (8002d10 <menu+0x1a64>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	f083 0301 	eor.w	r3, r3, #1
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d00e      	beq.n	8002b68 <menu+0x18bc>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 8002b4a:	4b6e      	ldr	r3, [pc, #440]	@ (8002d04 <menu+0x1a58>)
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	3301      	adds	r3, #1
 8002b50:	b2da      	uxtb	r2, r3
 8002b52:	4b6c      	ldr	r3, [pc, #432]	@ (8002d04 <menu+0x1a58>)
 8002b54:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 8002b56:	4b6b      	ldr	r3, [pc, #428]	@ (8002d04 <menu+0x1a58>)
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	2b01      	cmp	r3, #1
 8002b5c:	d902      	bls.n	8002b64 <menu+0x18b8>
				devirmeYukariIleriLimit = 0;
 8002b5e:	4b69      	ldr	r3, [pc, #420]	@ (8002d04 <menu+0x1a58>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002b64:	f001 f8e0 	bl	8003d28 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b68:	2104      	movs	r1, #4
 8002b6a:	4868      	ldr	r0, [pc, #416]	@ (8002d0c <menu+0x1a60>)
 8002b6c:	f007 f95e 	bl	8009e2c <HAL_GPIO_ReadPin>
 8002b70:	4603      	mov	r3, r0
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d115      	bne.n	8002ba2 <menu+0x18f6>
 8002b76:	4b66      	ldr	r3, [pc, #408]	@ (8002d10 <menu+0x1a64>)
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	f083 0301 	eor.w	r3, r3, #1
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00e      	beq.n	8002ba2 <menu+0x18f6>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 8002b84:	4b5f      	ldr	r3, [pc, #380]	@ (8002d04 <menu+0x1a58>)
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	3b01      	subs	r3, #1
 8002b8a:	b2da      	uxtb	r2, r3
 8002b8c:	4b5d      	ldr	r3, [pc, #372]	@ (8002d04 <menu+0x1a58>)
 8002b8e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8002b90:	4b5c      	ldr	r3, [pc, #368]	@ (8002d04 <menu+0x1a58>)
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d002      	beq.n	8002b9e <menu+0x18f2>
		   		devirmeYukariIleriLimit = 1;
 8002b98:	4b5a      	ldr	r3, [pc, #360]	@ (8002d04 <menu+0x1a58>)
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002b9e:	f001 f8c3 	bl	8003d28 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ba2:	2108      	movs	r1, #8
 8002ba4:	4859      	ldr	r0, [pc, #356]	@ (8002d0c <menu+0x1a60>)
 8002ba6:	f007 f941 	bl	8009e2c <HAL_GPIO_ReadPin>
 8002baa:	4603      	mov	r3, r0
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d10d      	bne.n	8002bcc <menu+0x1920>
 8002bb0:	4b57      	ldr	r3, [pc, #348]	@ (8002d10 <menu+0x1a64>)
 8002bb2:	781b      	ldrb	r3, [r3, #0]
 8002bb4:	f083 0301 	eor.w	r3, r3, #1
 8002bb8:	b2db      	uxtb	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d006      	beq.n	8002bcc <menu+0x1920>
			eepromData[16] = devirmeYukariIleriLimit;
 8002bbe:	4b51      	ldr	r3, [pc, #324]	@ (8002d04 <menu+0x1a58>)
 8002bc0:	781a      	ldrb	r2, [r3, #0]
 8002bc2:	4b54      	ldr	r3, [pc, #336]	@ (8002d14 <menu+0x1a68>)
 8002bc4:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 8002bc6:	4b54      	ldr	r3, [pc, #336]	@ (8002d18 <menu+0x1a6c>)
 8002bc8:	2201      	movs	r2, #1
 8002bca:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8002bcc:	4b53      	ldr	r3, [pc, #332]	@ (8002d1c <menu+0x1a70>)
 8002bce:	781b      	ldrb	r3, [r3, #0]
 8002bd0:	2b13      	cmp	r3, #19
 8002bd2:	d174      	bne.n	8002cbe <menu+0x1a12>
		if(devirmeYuruyusSecim == 2) {
 8002bd4:	4b52      	ldr	r3, [pc, #328]	@ (8002d20 <menu+0x1a74>)
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	d105      	bne.n	8002be8 <menu+0x193c>
			lcd_print(1, 1, devirmeAsagiSivicText);
 8002bdc:	4a51      	ldr	r2, [pc, #324]	@ (8002d24 <menu+0x1a78>)
 8002bde:	2101      	movs	r1, #1
 8002be0:	2001      	movs	r0, #1
 8002be2:	f005 fdf9 	bl	80087d8 <lcd_print>
 8002be6:	e008      	b.n	8002bfa <menu+0x194e>
		} else if(devirmeYuruyusSecim == 1) {
 8002be8:	4b4d      	ldr	r3, [pc, #308]	@ (8002d20 <menu+0x1a74>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d104      	bne.n	8002bfa <menu+0x194e>
			lcd_print(1, 1, yuruyusGeriSivicText);
 8002bf0:	4a4d      	ldr	r2, [pc, #308]	@ (8002d28 <menu+0x1a7c>)
 8002bf2:	2101      	movs	r1, #1
 8002bf4:	2001      	movs	r0, #1
 8002bf6:	f005 fdef 	bl	80087d8 <lcd_print>
		}

		if(devirmeAsagiGeriLimit == 0) {
 8002bfa:	4b4c      	ldr	r3, [pc, #304]	@ (8002d2c <menu+0x1a80>)
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d105      	bne.n	8002c0e <menu+0x1962>
			lcd_print(2, 1, pasifText);
 8002c02:	4a4b      	ldr	r2, [pc, #300]	@ (8002d30 <menu+0x1a84>)
 8002c04:	2101      	movs	r1, #1
 8002c06:	2002      	movs	r0, #2
 8002c08:	f005 fde6 	bl	80087d8 <lcd_print>
 8002c0c:	e008      	b.n	8002c20 <menu+0x1974>
		} else if(devirmeAsagiGeriLimit == 1) {
 8002c0e:	4b47      	ldr	r3, [pc, #284]	@ (8002d2c <menu+0x1a80>)
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d104      	bne.n	8002c20 <menu+0x1974>
			lcd_print(2, 1, aktifText);
 8002c16:	4a3c      	ldr	r2, [pc, #240]	@ (8002d08 <menu+0x1a5c>)
 8002c18:	2101      	movs	r1, #1
 8002c1a:	2002      	movs	r0, #2
 8002c1c:	f005 fddc 	bl	80087d8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c20:	2102      	movs	r1, #2
 8002c22:	483a      	ldr	r0, [pc, #232]	@ (8002d0c <menu+0x1a60>)
 8002c24:	f007 f902 	bl	8009e2c <HAL_GPIO_ReadPin>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d115      	bne.n	8002c5a <menu+0x19ae>
 8002c2e:	4b38      	ldr	r3, [pc, #224]	@ (8002d10 <menu+0x1a64>)
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	f083 0301 	eor.w	r3, r3, #1
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d00e      	beq.n	8002c5a <menu+0x19ae>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 8002c3c:	4b3b      	ldr	r3, [pc, #236]	@ (8002d2c <menu+0x1a80>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	3301      	adds	r3, #1
 8002c42:	b2da      	uxtb	r2, r3
 8002c44:	4b39      	ldr	r3, [pc, #228]	@ (8002d2c <menu+0x1a80>)
 8002c46:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 8002c48:	4b38      	ldr	r3, [pc, #224]	@ (8002d2c <menu+0x1a80>)
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d902      	bls.n	8002c56 <menu+0x19aa>
				devirmeAsagiGeriLimit = 0;
 8002c50:	4b36      	ldr	r3, [pc, #216]	@ (8002d2c <menu+0x1a80>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002c56:	f001 f867 	bl	8003d28 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c5a:	2104      	movs	r1, #4
 8002c5c:	482b      	ldr	r0, [pc, #172]	@ (8002d0c <menu+0x1a60>)
 8002c5e:	f007 f8e5 	bl	8009e2c <HAL_GPIO_ReadPin>
 8002c62:	4603      	mov	r3, r0
 8002c64:	2b01      	cmp	r3, #1
 8002c66:	d115      	bne.n	8002c94 <menu+0x19e8>
 8002c68:	4b29      	ldr	r3, [pc, #164]	@ (8002d10 <menu+0x1a64>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	f083 0301 	eor.w	r3, r3, #1
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00e      	beq.n	8002c94 <menu+0x19e8>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8002c76:	4b2d      	ldr	r3, [pc, #180]	@ (8002d2c <menu+0x1a80>)
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	b2da      	uxtb	r2, r3
 8002c7e:	4b2b      	ldr	r3, [pc, #172]	@ (8002d2c <menu+0x1a80>)
 8002c80:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8002c82:	4b2a      	ldr	r3, [pc, #168]	@ (8002d2c <menu+0x1a80>)
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d002      	beq.n	8002c90 <menu+0x19e4>
		   		devirmeAsagiGeriLimit = 1;
 8002c8a:	4b28      	ldr	r3, [pc, #160]	@ (8002d2c <menu+0x1a80>)
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002c90:	f001 f84a 	bl	8003d28 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c94:	2108      	movs	r1, #8
 8002c96:	481d      	ldr	r0, [pc, #116]	@ (8002d0c <menu+0x1a60>)
 8002c98:	f007 f8c8 	bl	8009e2c <HAL_GPIO_ReadPin>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d10d      	bne.n	8002cbe <menu+0x1a12>
 8002ca2:	4b1b      	ldr	r3, [pc, #108]	@ (8002d10 <menu+0x1a64>)
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	f083 0301 	eor.w	r3, r3, #1
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d006      	beq.n	8002cbe <menu+0x1a12>
			eepromData[17] = devirmeAsagiGeriLimit;
 8002cb0:	4b1e      	ldr	r3, [pc, #120]	@ (8002d2c <menu+0x1a80>)
 8002cb2:	781a      	ldrb	r2, [r3, #0]
 8002cb4:	4b17      	ldr	r3, [pc, #92]	@ (8002d14 <menu+0x1a68>)
 8002cb6:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8002cb8:	4b17      	ldr	r3, [pc, #92]	@ (8002d18 <menu+0x1a6c>)
 8002cba:	2201      	movs	r2, #1
 8002cbc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8002cbe:	4b17      	ldr	r3, [pc, #92]	@ (8002d1c <menu+0x1a70>)
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	2b14      	cmp	r3, #20
 8002cc4:	f040 809e 	bne.w	8002e04 <menu+0x1b58>
		if(devirmeYuruyusSecim == 1) {
 8002cc8:	4b15      	ldr	r3, [pc, #84]	@ (8002d20 <menu+0x1a74>)
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d105      	bne.n	8002cdc <menu+0x1a30>
			lcd_print(1, 1, yuruyusSecildiText);
 8002cd0:	4a18      	ldr	r2, [pc, #96]	@ (8002d34 <menu+0x1a88>)
 8002cd2:	2101      	movs	r1, #1
 8002cd4:	2001      	movs	r0, #1
 8002cd6:	f005 fd7f 	bl	80087d8 <lcd_print>
 8002cda:	e008      	b.n	8002cee <menu+0x1a42>
		} else if(devirmeYuruyusSecim == 2) {
 8002cdc:	4b10      	ldr	r3, [pc, #64]	@ (8002d20 <menu+0x1a74>)
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	2b02      	cmp	r3, #2
 8002ce2:	d104      	bne.n	8002cee <menu+0x1a42>
			lcd_print(1, 1, devirmeSilindirTipiText);
 8002ce4:	4a14      	ldr	r2, [pc, #80]	@ (8002d38 <menu+0x1a8c>)
 8002ce6:	2101      	movs	r1, #1
 8002ce8:	2001      	movs	r0, #1
 8002cea:	f005 fd75 	bl	80087d8 <lcd_print>
		}

		if(devirmeSilindirTipi == 0) {
 8002cee:	4b13      	ldr	r3, [pc, #76]	@ (8002d3c <menu+0x1a90>)
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d126      	bne.n	8002d44 <menu+0x1a98>
			lcd_print(2, 1, tekTesirText);
 8002cf6:	4a12      	ldr	r2, [pc, #72]	@ (8002d40 <menu+0x1a94>)
 8002cf8:	2101      	movs	r1, #1
 8002cfa:	2002      	movs	r0, #2
 8002cfc:	f005 fd6c 	bl	80087d8 <lcd_print>
 8002d00:	e029      	b.n	8002d56 <menu+0x1aaa>
 8002d02:	bf00      	nop
 8002d04:	200010b0 	.word	0x200010b0
 8002d08:	20001390 	.word	0x20001390
 8002d0c:	40010800 	.word	0x40010800
 8002d10:	200010cf 	.word	0x200010cf
 8002d14:	20000fc8 	.word	0x20000fc8
 8002d18:	200010cc 	.word	0x200010cc
 8002d1c:	200010a0 	.word	0x200010a0
 8002d20:	200010af 	.word	0x200010af
 8002d24:	200015d4 	.word	0x200015d4
 8002d28:	200015e8 	.word	0x200015e8
 8002d2c:	200010b1 	.word	0x200010b1
 8002d30:	2000137c 	.word	0x2000137c
 8002d34:	200015fc 	.word	0x200015fc
 8002d38:	20001610 	.word	0x20001610
 8002d3c:	200010b2 	.word	0x200010b2
 8002d40:	20001624 	.word	0x20001624
		} else if(devirmeSilindirTipi == 1) {
 8002d44:	4b39      	ldr	r3, [pc, #228]	@ (8002e2c <menu+0x1b80>)
 8002d46:	781b      	ldrb	r3, [r3, #0]
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d104      	bne.n	8002d56 <menu+0x1aaa>
			lcd_print(2, 1, ciftTesirText);
 8002d4c:	4a38      	ldr	r2, [pc, #224]	@ (8002e30 <menu+0x1b84>)
 8002d4e:	2101      	movs	r1, #1
 8002d50:	2002      	movs	r0, #2
 8002d52:	f005 fd41 	bl	80087d8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8002d56:	2102      	movs	r1, #2
 8002d58:	4836      	ldr	r0, [pc, #216]	@ (8002e34 <menu+0x1b88>)
 8002d5a:	f007 f867 	bl	8009e2c <HAL_GPIO_ReadPin>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d119      	bne.n	8002d98 <menu+0x1aec>
 8002d64:	4b34      	ldr	r3, [pc, #208]	@ (8002e38 <menu+0x1b8c>)
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	f083 0301 	eor.w	r3, r3, #1
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d012      	beq.n	8002d98 <menu+0x1aec>
 8002d72:	4b32      	ldr	r3, [pc, #200]	@ (8002e3c <menu+0x1b90>)
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d10e      	bne.n	8002d98 <menu+0x1aec>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8002d7a:	4b2c      	ldr	r3, [pc, #176]	@ (8002e2c <menu+0x1b80>)
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	3301      	adds	r3, #1
 8002d80:	b2da      	uxtb	r2, r3
 8002d82:	4b2a      	ldr	r3, [pc, #168]	@ (8002e2c <menu+0x1b80>)
 8002d84:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 8002d86:	4b29      	ldr	r3, [pc, #164]	@ (8002e2c <menu+0x1b80>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d902      	bls.n	8002d94 <menu+0x1ae8>
				devirmeSilindirTipi = 0;
 8002d8e:	4b27      	ldr	r3, [pc, #156]	@ (8002e2c <menu+0x1b80>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002d94:	f000 ffc8 	bl	8003d28 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8002d98:	2104      	movs	r1, #4
 8002d9a:	4826      	ldr	r0, [pc, #152]	@ (8002e34 <menu+0x1b88>)
 8002d9c:	f007 f846 	bl	8009e2c <HAL_GPIO_ReadPin>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d119      	bne.n	8002dda <menu+0x1b2e>
 8002da6:	4b24      	ldr	r3, [pc, #144]	@ (8002e38 <menu+0x1b8c>)
 8002da8:	781b      	ldrb	r3, [r3, #0]
 8002daa:	f083 0301 	eor.w	r3, r3, #1
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d012      	beq.n	8002dda <menu+0x1b2e>
 8002db4:	4b21      	ldr	r3, [pc, #132]	@ (8002e3c <menu+0x1b90>)
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d10e      	bne.n	8002dda <menu+0x1b2e>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8002dbc:	4b1b      	ldr	r3, [pc, #108]	@ (8002e2c <menu+0x1b80>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	b2da      	uxtb	r2, r3
 8002dc4:	4b19      	ldr	r3, [pc, #100]	@ (8002e2c <menu+0x1b80>)
 8002dc6:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8002dc8:	4b18      	ldr	r3, [pc, #96]	@ (8002e2c <menu+0x1b80>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d002      	beq.n	8002dd6 <menu+0x1b2a>
		   		devirmeSilindirTipi = 1;
 8002dd0:	4b16      	ldr	r3, [pc, #88]	@ (8002e2c <menu+0x1b80>)
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002dd6:	f000 ffa7 	bl	8003d28 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002dda:	2108      	movs	r1, #8
 8002ddc:	4815      	ldr	r0, [pc, #84]	@ (8002e34 <menu+0x1b88>)
 8002dde:	f007 f825 	bl	8009e2c <HAL_GPIO_ReadPin>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b01      	cmp	r3, #1
 8002de6:	d10d      	bne.n	8002e04 <menu+0x1b58>
 8002de8:	4b13      	ldr	r3, [pc, #76]	@ (8002e38 <menu+0x1b8c>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	f083 0301 	eor.w	r3, r3, #1
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d006      	beq.n	8002e04 <menu+0x1b58>
			eepromData[18] = devirmeSilindirTipi;
 8002df6:	4b0d      	ldr	r3, [pc, #52]	@ (8002e2c <menu+0x1b80>)
 8002df8:	781a      	ldrb	r2, [r3, #0]
 8002dfa:	4b11      	ldr	r3, [pc, #68]	@ (8002e40 <menu+0x1b94>)
 8002dfc:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8002dfe:	4b11      	ldr	r3, [pc, #68]	@ (8002e44 <menu+0x1b98>)
 8002e00:	2201      	movs	r2, #1
 8002e02:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 8002e04:	4b10      	ldr	r3, [pc, #64]	@ (8002e48 <menu+0x1b9c>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b15      	cmp	r3, #21
 8002e0a:	f040 8088 	bne.w	8002f1e <menu+0x1c72>
		lcd_print(1, 1, platformSilindirTipiText);
 8002e0e:	4a0f      	ldr	r2, [pc, #60]	@ (8002e4c <menu+0x1ba0>)
 8002e10:	2101      	movs	r1, #1
 8002e12:	2001      	movs	r0, #1
 8002e14:	f005 fce0 	bl	80087d8 <lcd_print>

		if(platformSilindirTipi == 0) {
 8002e18:	4b0d      	ldr	r3, [pc, #52]	@ (8002e50 <menu+0x1ba4>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d11b      	bne.n	8002e58 <menu+0x1bac>
			lcd_print(2, 1, tekTesirText);
 8002e20:	4a0c      	ldr	r2, [pc, #48]	@ (8002e54 <menu+0x1ba8>)
 8002e22:	2101      	movs	r1, #1
 8002e24:	2002      	movs	r0, #2
 8002e26:	f005 fcd7 	bl	80087d8 <lcd_print>
 8002e2a:	e01e      	b.n	8002e6a <menu+0x1bbe>
 8002e2c:	200010b2 	.word	0x200010b2
 8002e30:	20001638 	.word	0x20001638
 8002e34:	40010800 	.word	0x40010800
 8002e38:	200010cf 	.word	0x200010cf
 8002e3c:	200010af 	.word	0x200010af
 8002e40:	20000fc8 	.word	0x20000fc8
 8002e44:	200010cc 	.word	0x200010cc
 8002e48:	200010a0 	.word	0x200010a0
 8002e4c:	2000164c 	.word	0x2000164c
 8002e50:	200010b3 	.word	0x200010b3
 8002e54:	20001624 	.word	0x20001624
		} else if(platformSilindirTipi == 1) {
 8002e58:	4ba1      	ldr	r3, [pc, #644]	@ (80030e0 <menu+0x1e34>)
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d104      	bne.n	8002e6a <menu+0x1bbe>
			lcd_print(2, 1, ciftTesirText);
 8002e60:	4aa0      	ldr	r2, [pc, #640]	@ (80030e4 <menu+0x1e38>)
 8002e62:	2101      	movs	r1, #1
 8002e64:	2002      	movs	r0, #2
 8002e66:	f005 fcb7 	bl	80087d8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e6a:	2102      	movs	r1, #2
 8002e6c:	489e      	ldr	r0, [pc, #632]	@ (80030e8 <menu+0x1e3c>)
 8002e6e:	f006 ffdd 	bl	8009e2c <HAL_GPIO_ReadPin>
 8002e72:	4603      	mov	r3, r0
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	d115      	bne.n	8002ea4 <menu+0x1bf8>
 8002e78:	4b9c      	ldr	r3, [pc, #624]	@ (80030ec <menu+0x1e40>)
 8002e7a:	781b      	ldrb	r3, [r3, #0]
 8002e7c:	f083 0301 	eor.w	r3, r3, #1
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d00e      	beq.n	8002ea4 <menu+0x1bf8>
			platformSilindirTipi = platformSilindirTipi + 1;
 8002e86:	4b96      	ldr	r3, [pc, #600]	@ (80030e0 <menu+0x1e34>)
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	b2da      	uxtb	r2, r3
 8002e8e:	4b94      	ldr	r3, [pc, #592]	@ (80030e0 <menu+0x1e34>)
 8002e90:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 8002e92:	4b93      	ldr	r3, [pc, #588]	@ (80030e0 <menu+0x1e34>)
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d902      	bls.n	8002ea0 <menu+0x1bf4>
				platformSilindirTipi = 0;
 8002e9a:	4b91      	ldr	r3, [pc, #580]	@ (80030e0 <menu+0x1e34>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002ea0:	f000 ff42 	bl	8003d28 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ea4:	2104      	movs	r1, #4
 8002ea6:	4890      	ldr	r0, [pc, #576]	@ (80030e8 <menu+0x1e3c>)
 8002ea8:	f006 ffc0 	bl	8009e2c <HAL_GPIO_ReadPin>
 8002eac:	4603      	mov	r3, r0
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d115      	bne.n	8002ede <menu+0x1c32>
 8002eb2:	4b8e      	ldr	r3, [pc, #568]	@ (80030ec <menu+0x1e40>)
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	f083 0301 	eor.w	r3, r3, #1
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d00e      	beq.n	8002ede <menu+0x1c32>
			platformSilindirTipi = platformSilindirTipi - 1;
 8002ec0:	4b87      	ldr	r3, [pc, #540]	@ (80030e0 <menu+0x1e34>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	3b01      	subs	r3, #1
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	4b85      	ldr	r3, [pc, #532]	@ (80030e0 <menu+0x1e34>)
 8002eca:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8002ecc:	4b84      	ldr	r3, [pc, #528]	@ (80030e0 <menu+0x1e34>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d002      	beq.n	8002eda <menu+0x1c2e>
		   		platformSilindirTipi = 1;
 8002ed4:	4b82      	ldr	r3, [pc, #520]	@ (80030e0 <menu+0x1e34>)
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002eda:	f000 ff25 	bl	8003d28 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ede:	2108      	movs	r1, #8
 8002ee0:	4881      	ldr	r0, [pc, #516]	@ (80030e8 <menu+0x1e3c>)
 8002ee2:	f006 ffa3 	bl	8009e2c <HAL_GPIO_ReadPin>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d118      	bne.n	8002f1e <menu+0x1c72>
 8002eec:	4b7f      	ldr	r3, [pc, #508]	@ (80030ec <menu+0x1e40>)
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	f083 0301 	eor.w	r3, r3, #1
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d011      	beq.n	8002f1e <menu+0x1c72>
			eepromData[19] = platformSilindirTipi;
 8002efa:	4b79      	ldr	r3, [pc, #484]	@ (80030e0 <menu+0x1e34>)
 8002efc:	781a      	ldrb	r2, [r3, #0]
 8002efe:	4b7c      	ldr	r3, [pc, #496]	@ (80030f0 <menu+0x1e44>)
 8002f00:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8002f02:	4b77      	ldr	r3, [pc, #476]	@ (80030e0 <menu+0x1e34>)
 8002f04:	781b      	ldrb	r3, [r3, #0]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d106      	bne.n	8002f18 <menu+0x1c6c>
				altLimit = 1;
 8002f0a:	4b7a      	ldr	r3, [pc, #488]	@ (80030f4 <menu+0x1e48>)
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002f10:	4b78      	ldr	r3, [pc, #480]	@ (80030f4 <menu+0x1e48>)
 8002f12:	781a      	ldrb	r2, [r3, #0]
 8002f14:	4b76      	ldr	r3, [pc, #472]	@ (80030f0 <menu+0x1e44>)
 8002f16:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002f18:	4b77      	ldr	r3, [pc, #476]	@ (80030f8 <menu+0x1e4c>)
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8002f1e:	4b77      	ldr	r3, [pc, #476]	@ (80030fc <menu+0x1e50>)
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	2b16      	cmp	r3, #22
 8002f24:	d164      	bne.n	8002ff0 <menu+0x1d44>
		lcd_print(1, 1, yukariValfSureText);
 8002f26:	4a76      	ldr	r2, [pc, #472]	@ (8003100 <menu+0x1e54>)
 8002f28:	2101      	movs	r1, #1
 8002f2a:	2001      	movs	r0, #1
 8002f2c:	f005 fc54 	bl	80087d8 <lcd_print>

		if(yukariValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8002f30:	4a74      	ldr	r2, [pc, #464]	@ (8003104 <menu+0x1e58>)
 8002f32:	2101      	movs	r1, #1
 8002f34:	2002      	movs	r0, #2
 8002f36:	f005 fc4f 	bl	80087d8 <lcd_print>
		}

		itoa(yukariValfTmr, snum, 10);
 8002f3a:	4b73      	ldr	r3, [pc, #460]	@ (8003108 <menu+0x1e5c>)
 8002f3c:	781b      	ldrb	r3, [r3, #0]
 8002f3e:	220a      	movs	r2, #10
 8002f40:	4972      	ldr	r1, [pc, #456]	@ (800310c <menu+0x1e60>)
 8002f42:	4618      	mov	r0, r3
 8002f44:	f009 ff9e 	bl	800ce84 <itoa>
		lcd_print(2,16,snum);
 8002f48:	4a70      	ldr	r2, [pc, #448]	@ (800310c <menu+0x1e60>)
 8002f4a:	2110      	movs	r1, #16
 8002f4c:	2002      	movs	r0, #2
 8002f4e:	f005 fc43 	bl	80087d8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f52:	2102      	movs	r1, #2
 8002f54:	4864      	ldr	r0, [pc, #400]	@ (80030e8 <menu+0x1e3c>)
 8002f56:	f006 ff69 	bl	8009e2c <HAL_GPIO_ReadPin>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d115      	bne.n	8002f8c <menu+0x1ce0>
 8002f60:	4b62      	ldr	r3, [pc, #392]	@ (80030ec <menu+0x1e40>)
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	f083 0301 	eor.w	r3, r3, #1
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00e      	beq.n	8002f8c <menu+0x1ce0>
			yukariValfTmr = yukariValfTmr + 1;
 8002f6e:	4b66      	ldr	r3, [pc, #408]	@ (8003108 <menu+0x1e5c>)
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	3301      	adds	r3, #1
 8002f74:	b2da      	uxtb	r2, r3
 8002f76:	4b64      	ldr	r3, [pc, #400]	@ (8003108 <menu+0x1e5c>)
 8002f78:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8002f7a:	4b63      	ldr	r3, [pc, #396]	@ (8003108 <menu+0x1e5c>)
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	2b05      	cmp	r3, #5
 8002f80:	d902      	bls.n	8002f88 <menu+0x1cdc>
				yukariValfTmr = 0;
 8002f82:	4b61      	ldr	r3, [pc, #388]	@ (8003108 <menu+0x1e5c>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f88:	f000 fece 	bl	8003d28 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f8c:	2104      	movs	r1, #4
 8002f8e:	4856      	ldr	r0, [pc, #344]	@ (80030e8 <menu+0x1e3c>)
 8002f90:	f006 ff4c 	bl	8009e2c <HAL_GPIO_ReadPin>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d115      	bne.n	8002fc6 <menu+0x1d1a>
 8002f9a:	4b54      	ldr	r3, [pc, #336]	@ (80030ec <menu+0x1e40>)
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	f083 0301 	eor.w	r3, r3, #1
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00e      	beq.n	8002fc6 <menu+0x1d1a>
			yukariValfTmr = yukariValfTmr - 1;
 8002fa8:	4b57      	ldr	r3, [pc, #348]	@ (8003108 <menu+0x1e5c>)
 8002faa:	781b      	ldrb	r3, [r3, #0]
 8002fac:	3b01      	subs	r3, #1
 8002fae:	b2da      	uxtb	r2, r3
 8002fb0:	4b55      	ldr	r3, [pc, #340]	@ (8003108 <menu+0x1e5c>)
 8002fb2:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8002fb4:	4b54      	ldr	r3, [pc, #336]	@ (8003108 <menu+0x1e5c>)
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	2b06      	cmp	r3, #6
 8002fba:	d902      	bls.n	8002fc2 <menu+0x1d16>
		   		yukariValfTmr = 5;
 8002fbc:	4b52      	ldr	r3, [pc, #328]	@ (8003108 <menu+0x1e5c>)
 8002fbe:	2205      	movs	r2, #5
 8002fc0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002fc2:	f000 feb1 	bl	8003d28 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002fc6:	2108      	movs	r1, #8
 8002fc8:	4847      	ldr	r0, [pc, #284]	@ (80030e8 <menu+0x1e3c>)
 8002fca:	f006 ff2f 	bl	8009e2c <HAL_GPIO_ReadPin>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	2b01      	cmp	r3, #1
 8002fd2:	d10d      	bne.n	8002ff0 <menu+0x1d44>
 8002fd4:	4b45      	ldr	r3, [pc, #276]	@ (80030ec <menu+0x1e40>)
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	f083 0301 	eor.w	r3, r3, #1
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d006      	beq.n	8002ff0 <menu+0x1d44>
			eepromData[20] = yukariValfTmr;
 8002fe2:	4b49      	ldr	r3, [pc, #292]	@ (8003108 <menu+0x1e5c>)
 8002fe4:	781a      	ldrb	r2, [r3, #0]
 8002fe6:	4b42      	ldr	r3, [pc, #264]	@ (80030f0 <menu+0x1e44>)
 8002fe8:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8002fea:	4b43      	ldr	r3, [pc, #268]	@ (80030f8 <menu+0x1e4c>)
 8002fec:	2201      	movs	r2, #1
 8002fee:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8002ff0:	4b42      	ldr	r3, [pc, #264]	@ (80030fc <menu+0x1e50>)
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	2b17      	cmp	r3, #23
 8002ff6:	d164      	bne.n	80030c2 <menu+0x1e16>
		lcd_print(1, 1, asagiValfSureText);
 8002ff8:	4a45      	ldr	r2, [pc, #276]	@ (8003110 <menu+0x1e64>)
 8002ffa:	2101      	movs	r1, #1
 8002ffc:	2001      	movs	r0, #1
 8002ffe:	f005 fbeb 	bl	80087d8 <lcd_print>

		if(asagiValfTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8003002:	4a40      	ldr	r2, [pc, #256]	@ (8003104 <menu+0x1e58>)
 8003004:	2101      	movs	r1, #1
 8003006:	2002      	movs	r0, #2
 8003008:	f005 fbe6 	bl	80087d8 <lcd_print>
		}

		itoa(asagiValfTmr, snum, 10);
 800300c:	4b41      	ldr	r3, [pc, #260]	@ (8003114 <menu+0x1e68>)
 800300e:	781b      	ldrb	r3, [r3, #0]
 8003010:	220a      	movs	r2, #10
 8003012:	493e      	ldr	r1, [pc, #248]	@ (800310c <menu+0x1e60>)
 8003014:	4618      	mov	r0, r3
 8003016:	f009 ff35 	bl	800ce84 <itoa>
		lcd_print(2,16,snum);
 800301a:	4a3c      	ldr	r2, [pc, #240]	@ (800310c <menu+0x1e60>)
 800301c:	2110      	movs	r1, #16
 800301e:	2002      	movs	r0, #2
 8003020:	f005 fbda 	bl	80087d8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003024:	2102      	movs	r1, #2
 8003026:	4830      	ldr	r0, [pc, #192]	@ (80030e8 <menu+0x1e3c>)
 8003028:	f006 ff00 	bl	8009e2c <HAL_GPIO_ReadPin>
 800302c:	4603      	mov	r3, r0
 800302e:	2b01      	cmp	r3, #1
 8003030:	d115      	bne.n	800305e <menu+0x1db2>
 8003032:	4b2e      	ldr	r3, [pc, #184]	@ (80030ec <menu+0x1e40>)
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	f083 0301 	eor.w	r3, r3, #1
 800303a:	b2db      	uxtb	r3, r3
 800303c:	2b00      	cmp	r3, #0
 800303e:	d00e      	beq.n	800305e <menu+0x1db2>
			asagiValfTmr = asagiValfTmr + 1;
 8003040:	4b34      	ldr	r3, [pc, #208]	@ (8003114 <menu+0x1e68>)
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	3301      	adds	r3, #1
 8003046:	b2da      	uxtb	r2, r3
 8003048:	4b32      	ldr	r3, [pc, #200]	@ (8003114 <menu+0x1e68>)
 800304a:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 800304c:	4b31      	ldr	r3, [pc, #196]	@ (8003114 <menu+0x1e68>)
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	2b05      	cmp	r3, #5
 8003052:	d902      	bls.n	800305a <menu+0x1dae>
				asagiValfTmr = 0;
 8003054:	4b2f      	ldr	r3, [pc, #188]	@ (8003114 <menu+0x1e68>)
 8003056:	2200      	movs	r2, #0
 8003058:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800305a:	f000 fe65 	bl	8003d28 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800305e:	2104      	movs	r1, #4
 8003060:	4821      	ldr	r0, [pc, #132]	@ (80030e8 <menu+0x1e3c>)
 8003062:	f006 fee3 	bl	8009e2c <HAL_GPIO_ReadPin>
 8003066:	4603      	mov	r3, r0
 8003068:	2b01      	cmp	r3, #1
 800306a:	d115      	bne.n	8003098 <menu+0x1dec>
 800306c:	4b1f      	ldr	r3, [pc, #124]	@ (80030ec <menu+0x1e40>)
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	f083 0301 	eor.w	r3, r3, #1
 8003074:	b2db      	uxtb	r3, r3
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00e      	beq.n	8003098 <menu+0x1dec>
			asagiValfTmr = asagiValfTmr - 1;
 800307a:	4b26      	ldr	r3, [pc, #152]	@ (8003114 <menu+0x1e68>)
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	3b01      	subs	r3, #1
 8003080:	b2da      	uxtb	r2, r3
 8003082:	4b24      	ldr	r3, [pc, #144]	@ (8003114 <menu+0x1e68>)
 8003084:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003086:	4b23      	ldr	r3, [pc, #140]	@ (8003114 <menu+0x1e68>)
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	2b06      	cmp	r3, #6
 800308c:	d902      	bls.n	8003094 <menu+0x1de8>
		   		asagiValfTmr = 5;
 800308e:	4b21      	ldr	r3, [pc, #132]	@ (8003114 <menu+0x1e68>)
 8003090:	2205      	movs	r2, #5
 8003092:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003094:	f000 fe48 	bl	8003d28 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003098:	2108      	movs	r1, #8
 800309a:	4813      	ldr	r0, [pc, #76]	@ (80030e8 <menu+0x1e3c>)
 800309c:	f006 fec6 	bl	8009e2c <HAL_GPIO_ReadPin>
 80030a0:	4603      	mov	r3, r0
 80030a2:	2b01      	cmp	r3, #1
 80030a4:	d10d      	bne.n	80030c2 <menu+0x1e16>
 80030a6:	4b11      	ldr	r3, [pc, #68]	@ (80030ec <menu+0x1e40>)
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	f083 0301 	eor.w	r3, r3, #1
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d006      	beq.n	80030c2 <menu+0x1e16>
			eepromData[21] = asagiValfTmr;
 80030b4:	4b17      	ldr	r3, [pc, #92]	@ (8003114 <menu+0x1e68>)
 80030b6:	781a      	ldrb	r2, [r3, #0]
 80030b8:	4b0d      	ldr	r3, [pc, #52]	@ (80030f0 <menu+0x1e44>)
 80030ba:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 80030bc:	4b0e      	ldr	r3, [pc, #56]	@ (80030f8 <menu+0x1e4c>)
 80030be:	2201      	movs	r2, #1
 80030c0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 80030c2:	4b0e      	ldr	r3, [pc, #56]	@ (80030fc <menu+0x1e50>)
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	2b18      	cmp	r3, #24
 80030c8:	f040 8093 	bne.w	80031f2 <menu+0x1f46>
		if(devirmeYuruyusSecim == 2) {
 80030cc:	4b12      	ldr	r3, [pc, #72]	@ (8003118 <menu+0x1e6c>)
 80030ce:	781b      	ldrb	r3, [r3, #0]
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d125      	bne.n	8003120 <menu+0x1e74>
			lcd_print(1, 1, devirmeYukariValfSureText);
 80030d4:	4a11      	ldr	r2, [pc, #68]	@ (800311c <menu+0x1e70>)
 80030d6:	2101      	movs	r1, #1
 80030d8:	2001      	movs	r0, #1
 80030da:	f005 fb7d 	bl	80087d8 <lcd_print>
 80030de:	e028      	b.n	8003132 <menu+0x1e86>
 80030e0:	200010b3 	.word	0x200010b3
 80030e4:	20001638 	.word	0x20001638
 80030e8:	40010800 	.word	0x40010800
 80030ec:	200010cf 	.word	0x200010cf
 80030f0:	20000fc8 	.word	0x20000fc8
 80030f4:	200010a6 	.word	0x200010a6
 80030f8:	200010cc 	.word	0x200010cc
 80030fc:	200010a0 	.word	0x200010a0
 8003100:	20001660 	.word	0x20001660
 8003104:	200014a8 	.word	0x200014a8
 8003108:	200010b4 	.word	0x200010b4
 800310c:	20001038 	.word	0x20001038
 8003110:	20001674 	.word	0x20001674
 8003114:	200010b5 	.word	0x200010b5
 8003118:	200010af 	.word	0x200010af
 800311c:	20001688 	.word	0x20001688
		} else if(devirmeYuruyusSecim == 1) {
 8003120:	4b8c      	ldr	r3, [pc, #560]	@ (8003354 <menu+0x20a8>)
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d104      	bne.n	8003132 <menu+0x1e86>
			lcd_print(1, 1, ileriValfSureText);
 8003128:	4a8b      	ldr	r2, [pc, #556]	@ (8003358 <menu+0x20ac>)
 800312a:	2101      	movs	r1, #1
 800312c:	2001      	movs	r0, #1
 800312e:	f005 fb53 	bl	80087d8 <lcd_print>
		}

		if(devirmeYukariIleriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8003132:	4a8a      	ldr	r2, [pc, #552]	@ (800335c <menu+0x20b0>)
 8003134:	2101      	movs	r1, #1
 8003136:	2002      	movs	r0, #2
 8003138:	f005 fb4e 	bl	80087d8 <lcd_print>
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 800313c:	4b88      	ldr	r3, [pc, #544]	@ (8003360 <menu+0x20b4>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	220a      	movs	r2, #10
 8003142:	4988      	ldr	r1, [pc, #544]	@ (8003364 <menu+0x20b8>)
 8003144:	4618      	mov	r0, r3
 8003146:	f009 fe9d 	bl	800ce84 <itoa>
		lcd_print(2, 16, snum);
 800314a:	4a86      	ldr	r2, [pc, #536]	@ (8003364 <menu+0x20b8>)
 800314c:	2110      	movs	r1, #16
 800314e:	2002      	movs	r0, #2
 8003150:	f005 fb42 	bl	80087d8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003154:	2102      	movs	r1, #2
 8003156:	4884      	ldr	r0, [pc, #528]	@ (8003368 <menu+0x20bc>)
 8003158:	f006 fe68 	bl	8009e2c <HAL_GPIO_ReadPin>
 800315c:	4603      	mov	r3, r0
 800315e:	2b01      	cmp	r3, #1
 8003160:	d115      	bne.n	800318e <menu+0x1ee2>
 8003162:	4b82      	ldr	r3, [pc, #520]	@ (800336c <menu+0x20c0>)
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	f083 0301 	eor.w	r3, r3, #1
 800316a:	b2db      	uxtb	r3, r3
 800316c:	2b00      	cmp	r3, #0
 800316e:	d00e      	beq.n	800318e <menu+0x1ee2>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003170:	4b7b      	ldr	r3, [pc, #492]	@ (8003360 <menu+0x20b4>)
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	3301      	adds	r3, #1
 8003176:	b2da      	uxtb	r2, r3
 8003178:	4b79      	ldr	r3, [pc, #484]	@ (8003360 <menu+0x20b4>)
 800317a:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 800317c:	4b78      	ldr	r3, [pc, #480]	@ (8003360 <menu+0x20b4>)
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	2b05      	cmp	r3, #5
 8003182:	d902      	bls.n	800318a <menu+0x1ede>
				devirmeYukariIleriTmr = 0;
 8003184:	4b76      	ldr	r3, [pc, #472]	@ (8003360 <menu+0x20b4>)
 8003186:	2200      	movs	r2, #0
 8003188:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800318a:	f000 fdcd 	bl	8003d28 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800318e:	2104      	movs	r1, #4
 8003190:	4875      	ldr	r0, [pc, #468]	@ (8003368 <menu+0x20bc>)
 8003192:	f006 fe4b 	bl	8009e2c <HAL_GPIO_ReadPin>
 8003196:	4603      	mov	r3, r0
 8003198:	2b01      	cmp	r3, #1
 800319a:	d115      	bne.n	80031c8 <menu+0x1f1c>
 800319c:	4b73      	ldr	r3, [pc, #460]	@ (800336c <menu+0x20c0>)
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	f083 0301 	eor.w	r3, r3, #1
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00e      	beq.n	80031c8 <menu+0x1f1c>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 80031aa:	4b6d      	ldr	r3, [pc, #436]	@ (8003360 <menu+0x20b4>)
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	3b01      	subs	r3, #1
 80031b0:	b2da      	uxtb	r2, r3
 80031b2:	4b6b      	ldr	r3, [pc, #428]	@ (8003360 <menu+0x20b4>)
 80031b4:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 80031b6:	4b6a      	ldr	r3, [pc, #424]	@ (8003360 <menu+0x20b4>)
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	2b06      	cmp	r3, #6
 80031bc:	d902      	bls.n	80031c4 <menu+0x1f18>
		   		devirmeYukariIleriTmr = 5;
 80031be:	4b68      	ldr	r3, [pc, #416]	@ (8003360 <menu+0x20b4>)
 80031c0:	2205      	movs	r2, #5
 80031c2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80031c4:	f000 fdb0 	bl	8003d28 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80031c8:	2108      	movs	r1, #8
 80031ca:	4867      	ldr	r0, [pc, #412]	@ (8003368 <menu+0x20bc>)
 80031cc:	f006 fe2e 	bl	8009e2c <HAL_GPIO_ReadPin>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d10d      	bne.n	80031f2 <menu+0x1f46>
 80031d6:	4b65      	ldr	r3, [pc, #404]	@ (800336c <menu+0x20c0>)
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	f083 0301 	eor.w	r3, r3, #1
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d006      	beq.n	80031f2 <menu+0x1f46>
			eepromData[22] = devirmeYukariIleriTmr;
 80031e4:	4b5e      	ldr	r3, [pc, #376]	@ (8003360 <menu+0x20b4>)
 80031e6:	781a      	ldrb	r2, [r3, #0]
 80031e8:	4b61      	ldr	r3, [pc, #388]	@ (8003370 <menu+0x20c4>)
 80031ea:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 80031ec:	4b61      	ldr	r3, [pc, #388]	@ (8003374 <menu+0x20c8>)
 80031ee:	2201      	movs	r2, #1
 80031f0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 80031f2:	4b61      	ldr	r3, [pc, #388]	@ (8003378 <menu+0x20cc>)
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	2b19      	cmp	r3, #25
 80031f8:	d172      	bne.n	80032e0 <menu+0x2034>
		if(devirmeYuruyusSecim == 2) {
 80031fa:	4b56      	ldr	r3, [pc, #344]	@ (8003354 <menu+0x20a8>)
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	2b02      	cmp	r3, #2
 8003200:	d105      	bne.n	800320e <menu+0x1f62>
			lcd_print(1, 1, devirmeAsagiValfSureText);
 8003202:	4a5e      	ldr	r2, [pc, #376]	@ (800337c <menu+0x20d0>)
 8003204:	2101      	movs	r1, #1
 8003206:	2001      	movs	r0, #1
 8003208:	f005 fae6 	bl	80087d8 <lcd_print>
 800320c:	e008      	b.n	8003220 <menu+0x1f74>
		} else if(devirmeYuruyusSecim == 1) {
 800320e:	4b51      	ldr	r3, [pc, #324]	@ (8003354 <menu+0x20a8>)
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	2b01      	cmp	r3, #1
 8003214:	d104      	bne.n	8003220 <menu+0x1f74>
			lcd_print(1, 1, geriValfSureText);
 8003216:	4a5a      	ldr	r2, [pc, #360]	@ (8003380 <menu+0x20d4>)
 8003218:	2101      	movs	r1, #1
 800321a:	2001      	movs	r0, #1
 800321c:	f005 fadc 	bl	80087d8 <lcd_print>
		}

		if(devirmeAsagiGeriTmr >= 0) {
			lcd_print(2, 1, kacSaniyeText);
 8003220:	4a4e      	ldr	r2, [pc, #312]	@ (800335c <menu+0x20b0>)
 8003222:	2101      	movs	r1, #1
 8003224:	2002      	movs	r0, #2
 8003226:	f005 fad7 	bl	80087d8 <lcd_print>
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 800322a:	4b56      	ldr	r3, [pc, #344]	@ (8003384 <menu+0x20d8>)
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	220a      	movs	r2, #10
 8003230:	494c      	ldr	r1, [pc, #304]	@ (8003364 <menu+0x20b8>)
 8003232:	4618      	mov	r0, r3
 8003234:	f009 fe26 	bl	800ce84 <itoa>
		lcd_print(2,16,snum);
 8003238:	4a4a      	ldr	r2, [pc, #296]	@ (8003364 <menu+0x20b8>)
 800323a:	2110      	movs	r1, #16
 800323c:	2002      	movs	r0, #2
 800323e:	f005 facb 	bl	80087d8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003242:	2102      	movs	r1, #2
 8003244:	4848      	ldr	r0, [pc, #288]	@ (8003368 <menu+0x20bc>)
 8003246:	f006 fdf1 	bl	8009e2c <HAL_GPIO_ReadPin>
 800324a:	4603      	mov	r3, r0
 800324c:	2b01      	cmp	r3, #1
 800324e:	d115      	bne.n	800327c <menu+0x1fd0>
 8003250:	4b46      	ldr	r3, [pc, #280]	@ (800336c <menu+0x20c0>)
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	f083 0301 	eor.w	r3, r3, #1
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00e      	beq.n	800327c <menu+0x1fd0>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 800325e:	4b49      	ldr	r3, [pc, #292]	@ (8003384 <menu+0x20d8>)
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	3301      	adds	r3, #1
 8003264:	b2da      	uxtb	r2, r3
 8003266:	4b47      	ldr	r3, [pc, #284]	@ (8003384 <menu+0x20d8>)
 8003268:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 800326a:	4b46      	ldr	r3, [pc, #280]	@ (8003384 <menu+0x20d8>)
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	2b05      	cmp	r3, #5
 8003270:	d902      	bls.n	8003278 <menu+0x1fcc>
				devirmeAsagiGeriTmr = 0;
 8003272:	4b44      	ldr	r3, [pc, #272]	@ (8003384 <menu+0x20d8>)
 8003274:	2200      	movs	r2, #0
 8003276:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003278:	f000 fd56 	bl	8003d28 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800327c:	2104      	movs	r1, #4
 800327e:	483a      	ldr	r0, [pc, #232]	@ (8003368 <menu+0x20bc>)
 8003280:	f006 fdd4 	bl	8009e2c <HAL_GPIO_ReadPin>
 8003284:	4603      	mov	r3, r0
 8003286:	2b01      	cmp	r3, #1
 8003288:	d115      	bne.n	80032b6 <menu+0x200a>
 800328a:	4b38      	ldr	r3, [pc, #224]	@ (800336c <menu+0x20c0>)
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	f083 0301 	eor.w	r3, r3, #1
 8003292:	b2db      	uxtb	r3, r3
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00e      	beq.n	80032b6 <menu+0x200a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003298:	4b3a      	ldr	r3, [pc, #232]	@ (8003384 <menu+0x20d8>)
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	3b01      	subs	r3, #1
 800329e:	b2da      	uxtb	r2, r3
 80032a0:	4b38      	ldr	r3, [pc, #224]	@ (8003384 <menu+0x20d8>)
 80032a2:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 80032a4:	4b37      	ldr	r3, [pc, #220]	@ (8003384 <menu+0x20d8>)
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	2b06      	cmp	r3, #6
 80032aa:	d902      	bls.n	80032b2 <menu+0x2006>
		   		devirmeAsagiGeriTmr = 5;
 80032ac:	4b35      	ldr	r3, [pc, #212]	@ (8003384 <menu+0x20d8>)
 80032ae:	2205      	movs	r2, #5
 80032b0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80032b2:	f000 fd39 	bl	8003d28 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80032b6:	2108      	movs	r1, #8
 80032b8:	482b      	ldr	r0, [pc, #172]	@ (8003368 <menu+0x20bc>)
 80032ba:	f006 fdb7 	bl	8009e2c <HAL_GPIO_ReadPin>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d10d      	bne.n	80032e0 <menu+0x2034>
 80032c4:	4b29      	ldr	r3, [pc, #164]	@ (800336c <menu+0x20c0>)
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	f083 0301 	eor.w	r3, r3, #1
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d006      	beq.n	80032e0 <menu+0x2034>
			eepromData[23] = devirmeAsagiGeriTmr;
 80032d2:	4b2c      	ldr	r3, [pc, #176]	@ (8003384 <menu+0x20d8>)
 80032d4:	781a      	ldrb	r2, [r3, #0]
 80032d6:	4b26      	ldr	r3, [pc, #152]	@ (8003370 <menu+0x20c4>)
 80032d8:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 80032da:	4b26      	ldr	r3, [pc, #152]	@ (8003374 <menu+0x20c8>)
 80032dc:	2201      	movs	r2, #1
 80032de:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 80032e0:	4b25      	ldr	r3, [pc, #148]	@ (8003378 <menu+0x20cc>)
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	2b1a      	cmp	r3, #26
 80032e6:	f040 80b7 	bne.w	8003458 <menu+0x21ac>
		lcd_print(1, 1, calismaSuresiText);
 80032ea:	4a27      	ldr	r2, [pc, #156]	@ (8003388 <menu+0x20dc>)
 80032ec:	2101      	movs	r1, #1
 80032ee:	2001      	movs	r0, #1
 80032f0:	f005 fa72 	bl	80087d8 <lcd_print>

		if(makineCalismaTmr > 99) {
 80032f4:	4b25      	ldr	r3, [pc, #148]	@ (800338c <menu+0x20e0>)
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	2b63      	cmp	r3, #99	@ 0x63
 80032fa:	d911      	bls.n	8003320 <menu+0x2074>
			lcd_print(2, 1, kacSaniyeText);
 80032fc:	4a17      	ldr	r2, [pc, #92]	@ (800335c <menu+0x20b0>)
 80032fe:	2101      	movs	r1, #1
 8003300:	2002      	movs	r0, #2
 8003302:	f005 fa69 	bl	80087d8 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 8003306:	4b21      	ldr	r3, [pc, #132]	@ (800338c <menu+0x20e0>)
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	220a      	movs	r2, #10
 800330c:	4915      	ldr	r1, [pc, #84]	@ (8003364 <menu+0x20b8>)
 800330e:	4618      	mov	r0, r3
 8003310:	f009 fdb8 	bl	800ce84 <itoa>
			lcd_print(2,14,snum);
 8003314:	4a13      	ldr	r2, [pc, #76]	@ (8003364 <menu+0x20b8>)
 8003316:	210e      	movs	r1, #14
 8003318:	2002      	movs	r0, #2
 800331a:	f005 fa5d 	bl	80087d8 <lcd_print>
 800331e:	e04c      	b.n	80033ba <menu+0x210e>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003320:	4b1a      	ldr	r3, [pc, #104]	@ (800338c <menu+0x20e0>)
 8003322:	781b      	ldrb	r3, [r3, #0]
 8003324:	2b09      	cmp	r3, #9
 8003326:	d933      	bls.n	8003390 <menu+0x20e4>
 8003328:	4b18      	ldr	r3, [pc, #96]	@ (800338c <menu+0x20e0>)
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	2b63      	cmp	r3, #99	@ 0x63
 800332e:	d82f      	bhi.n	8003390 <menu+0x20e4>
			lcd_print(2, 1, kacSaniyeText);
 8003330:	4a0a      	ldr	r2, [pc, #40]	@ (800335c <menu+0x20b0>)
 8003332:	2101      	movs	r1, #1
 8003334:	2002      	movs	r0, #2
 8003336:	f005 fa4f 	bl	80087d8 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 800333a:	4b14      	ldr	r3, [pc, #80]	@ (800338c <menu+0x20e0>)
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	220a      	movs	r2, #10
 8003340:	4908      	ldr	r1, [pc, #32]	@ (8003364 <menu+0x20b8>)
 8003342:	4618      	mov	r0, r3
 8003344:	f009 fd9e 	bl	800ce84 <itoa>
			lcd_print(2, 15, snum);
 8003348:	4a06      	ldr	r2, [pc, #24]	@ (8003364 <menu+0x20b8>)
 800334a:	210f      	movs	r1, #15
 800334c:	2002      	movs	r0, #2
 800334e:	f005 fa43 	bl	80087d8 <lcd_print>
 8003352:	e032      	b.n	80033ba <menu+0x210e>
 8003354:	200010af 	.word	0x200010af
 8003358:	2000169c 	.word	0x2000169c
 800335c:	200014a8 	.word	0x200014a8
 8003360:	200010b6 	.word	0x200010b6
 8003364:	20001038 	.word	0x20001038
 8003368:	40010800 	.word	0x40010800
 800336c:	200010cf 	.word	0x200010cf
 8003370:	20000fc8 	.word	0x20000fc8
 8003374:	200010cc 	.word	0x200010cc
 8003378:	200010a0 	.word	0x200010a0
 800337c:	200016b0 	.word	0x200016b0
 8003380:	200016c4 	.word	0x200016c4
 8003384:	200010b7 	.word	0x200010b7
 8003388:	200016d8 	.word	0x200016d8
 800338c:	200010b8 	.word	0x200010b8
		} else if(makineCalismaTmr <=  9) {
 8003390:	4b72      	ldr	r3, [pc, #456]	@ (800355c <menu+0x22b0>)
 8003392:	781b      	ldrb	r3, [r3, #0]
 8003394:	2b09      	cmp	r3, #9
 8003396:	d810      	bhi.n	80033ba <menu+0x210e>
			lcd_print(2, 1, kacSaniyeText);
 8003398:	4a71      	ldr	r2, [pc, #452]	@ (8003560 <menu+0x22b4>)
 800339a:	2101      	movs	r1, #1
 800339c:	2002      	movs	r0, #2
 800339e:	f005 fa1b 	bl	80087d8 <lcd_print>

			itoa(makineCalismaTmr, snum, 10);
 80033a2:	4b6e      	ldr	r3, [pc, #440]	@ (800355c <menu+0x22b0>)
 80033a4:	781b      	ldrb	r3, [r3, #0]
 80033a6:	220a      	movs	r2, #10
 80033a8:	496e      	ldr	r1, [pc, #440]	@ (8003564 <menu+0x22b8>)
 80033aa:	4618      	mov	r0, r3
 80033ac:	f009 fd6a 	bl	800ce84 <itoa>
			lcd_print(2, 16, snum);
 80033b0:	4a6c      	ldr	r2, [pc, #432]	@ (8003564 <menu+0x22b8>)
 80033b2:	2110      	movs	r1, #16
 80033b4:	2002      	movs	r0, #2
 80033b6:	f005 fa0f 	bl	80087d8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80033ba:	2102      	movs	r1, #2
 80033bc:	486a      	ldr	r0, [pc, #424]	@ (8003568 <menu+0x22bc>)
 80033be:	f006 fd35 	bl	8009e2c <HAL_GPIO_ReadPin>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d115      	bne.n	80033f4 <menu+0x2148>
 80033c8:	4b68      	ldr	r3, [pc, #416]	@ (800356c <menu+0x22c0>)
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	f083 0301 	eor.w	r3, r3, #1
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00e      	beq.n	80033f4 <menu+0x2148>
			makineCalismaTmr = makineCalismaTmr + 1;
 80033d6:	4b61      	ldr	r3, [pc, #388]	@ (800355c <menu+0x22b0>)
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	3301      	adds	r3, #1
 80033dc:	b2da      	uxtb	r2, r3
 80033de:	4b5f      	ldr	r3, [pc, #380]	@ (800355c <menu+0x22b0>)
 80033e0:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 80033e2:	4b5e      	ldr	r3, [pc, #376]	@ (800355c <menu+0x22b0>)
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	2bb4      	cmp	r3, #180	@ 0xb4
 80033e8:	d902      	bls.n	80033f0 <menu+0x2144>
				makineCalismaTmr = 0;
 80033ea:	4b5c      	ldr	r3, [pc, #368]	@ (800355c <menu+0x22b0>)
 80033ec:	2200      	movs	r2, #0
 80033ee:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80033f0:	f000 fc9a 	bl	8003d28 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80033f4:	2104      	movs	r1, #4
 80033f6:	485c      	ldr	r0, [pc, #368]	@ (8003568 <menu+0x22bc>)
 80033f8:	f006 fd18 	bl	8009e2c <HAL_GPIO_ReadPin>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d115      	bne.n	800342e <menu+0x2182>
 8003402:	4b5a      	ldr	r3, [pc, #360]	@ (800356c <menu+0x22c0>)
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	f083 0301 	eor.w	r3, r3, #1
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b00      	cmp	r3, #0
 800340e:	d00e      	beq.n	800342e <menu+0x2182>
			makineCalismaTmr = makineCalismaTmr - 1;
 8003410:	4b52      	ldr	r3, [pc, #328]	@ (800355c <menu+0x22b0>)
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	3b01      	subs	r3, #1
 8003416:	b2da      	uxtb	r2, r3
 8003418:	4b50      	ldr	r3, [pc, #320]	@ (800355c <menu+0x22b0>)
 800341a:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 800341c:	4b4f      	ldr	r3, [pc, #316]	@ (800355c <menu+0x22b0>)
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	2bb5      	cmp	r3, #181	@ 0xb5
 8003422:	d902      	bls.n	800342a <menu+0x217e>
		   		makineCalismaTmr = 180;
 8003424:	4b4d      	ldr	r3, [pc, #308]	@ (800355c <menu+0x22b0>)
 8003426:	22b4      	movs	r2, #180	@ 0xb4
 8003428:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800342a:	f000 fc7d 	bl	8003d28 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800342e:	2108      	movs	r1, #8
 8003430:	484d      	ldr	r0, [pc, #308]	@ (8003568 <menu+0x22bc>)
 8003432:	f006 fcfb 	bl	8009e2c <HAL_GPIO_ReadPin>
 8003436:	4603      	mov	r3, r0
 8003438:	2b01      	cmp	r3, #1
 800343a:	d10d      	bne.n	8003458 <menu+0x21ac>
 800343c:	4b4b      	ldr	r3, [pc, #300]	@ (800356c <menu+0x22c0>)
 800343e:	781b      	ldrb	r3, [r3, #0]
 8003440:	f083 0301 	eor.w	r3, r3, #1
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d006      	beq.n	8003458 <menu+0x21ac>
			eepromData[24] = makineCalismaTmr;
 800344a:	4b44      	ldr	r3, [pc, #272]	@ (800355c <menu+0x22b0>)
 800344c:	781a      	ldrb	r2, [r3, #0]
 800344e:	4b48      	ldr	r3, [pc, #288]	@ (8003570 <menu+0x22c4>)
 8003450:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 8003452:	4b48      	ldr	r3, [pc, #288]	@ (8003574 <menu+0x22c8>)
 8003454:	2201      	movs	r2, #1
 8003456:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8003458:	4b47      	ldr	r3, [pc, #284]	@ (8003578 <menu+0x22cc>)
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	2b1b      	cmp	r3, #27
 800345e:	d166      	bne.n	800352e <menu+0x2282>
		lcd_print(1, 1, buzzerTextGN);
 8003460:	4a46      	ldr	r2, [pc, #280]	@ (800357c <menu+0x22d0>)
 8003462:	2101      	movs	r1, #1
 8003464:	2001      	movs	r0, #1
 8003466:	f005 f9b7 	bl	80087d8 <lcd_print>

		if(buzzer == 0) {
 800346a:	4b45      	ldr	r3, [pc, #276]	@ (8003580 <menu+0x22d4>)
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	2b00      	cmp	r3, #0
 8003470:	d105      	bne.n	800347e <menu+0x21d2>
			lcd_print(2, 1, pasifText);
 8003472:	4a44      	ldr	r2, [pc, #272]	@ (8003584 <menu+0x22d8>)
 8003474:	2101      	movs	r1, #1
 8003476:	2002      	movs	r0, #2
 8003478:	f005 f9ae 	bl	80087d8 <lcd_print>
 800347c:	e008      	b.n	8003490 <menu+0x21e4>
		} else if(buzzer == 1) {
 800347e:	4b40      	ldr	r3, [pc, #256]	@ (8003580 <menu+0x22d4>)
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d104      	bne.n	8003490 <menu+0x21e4>
			lcd_print(2, 1, aktifText);
 8003486:	4a40      	ldr	r2, [pc, #256]	@ (8003588 <menu+0x22dc>)
 8003488:	2101      	movs	r1, #1
 800348a:	2002      	movs	r0, #2
 800348c:	f005 f9a4 	bl	80087d8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003490:	2102      	movs	r1, #2
 8003492:	4835      	ldr	r0, [pc, #212]	@ (8003568 <menu+0x22bc>)
 8003494:	f006 fcca 	bl	8009e2c <HAL_GPIO_ReadPin>
 8003498:	4603      	mov	r3, r0
 800349a:	2b01      	cmp	r3, #1
 800349c:	d115      	bne.n	80034ca <menu+0x221e>
 800349e:	4b33      	ldr	r3, [pc, #204]	@ (800356c <menu+0x22c0>)
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	f083 0301 	eor.w	r3, r3, #1
 80034a6:	b2db      	uxtb	r3, r3
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00e      	beq.n	80034ca <menu+0x221e>
			buzzer = buzzer + 1;
 80034ac:	4b34      	ldr	r3, [pc, #208]	@ (8003580 <menu+0x22d4>)
 80034ae:	781b      	ldrb	r3, [r3, #0]
 80034b0:	3301      	adds	r3, #1
 80034b2:	b2da      	uxtb	r2, r3
 80034b4:	4b32      	ldr	r3, [pc, #200]	@ (8003580 <menu+0x22d4>)
 80034b6:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 80034b8:	4b31      	ldr	r3, [pc, #196]	@ (8003580 <menu+0x22d4>)
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d902      	bls.n	80034c6 <menu+0x221a>
				buzzer = 0;
 80034c0:	4b2f      	ldr	r3, [pc, #188]	@ (8003580 <menu+0x22d4>)
 80034c2:	2200      	movs	r2, #0
 80034c4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80034c6:	f000 fc2f 	bl	8003d28 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80034ca:	2104      	movs	r1, #4
 80034cc:	4826      	ldr	r0, [pc, #152]	@ (8003568 <menu+0x22bc>)
 80034ce:	f006 fcad 	bl	8009e2c <HAL_GPIO_ReadPin>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d115      	bne.n	8003504 <menu+0x2258>
 80034d8:	4b24      	ldr	r3, [pc, #144]	@ (800356c <menu+0x22c0>)
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	f083 0301 	eor.w	r3, r3, #1
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d00e      	beq.n	8003504 <menu+0x2258>
			buzzer = buzzer - 1;
 80034e6:	4b26      	ldr	r3, [pc, #152]	@ (8003580 <menu+0x22d4>)
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	3b01      	subs	r3, #1
 80034ec:	b2da      	uxtb	r2, r3
 80034ee:	4b24      	ldr	r3, [pc, #144]	@ (8003580 <menu+0x22d4>)
 80034f0:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 80034f2:	4b23      	ldr	r3, [pc, #140]	@ (8003580 <menu+0x22d4>)
 80034f4:	781b      	ldrb	r3, [r3, #0]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d002      	beq.n	8003500 <menu+0x2254>
		   		buzzer = 1;
 80034fa:	4b21      	ldr	r3, [pc, #132]	@ (8003580 <menu+0x22d4>)
 80034fc:	2201      	movs	r2, #1
 80034fe:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003500:	f000 fc12 	bl	8003d28 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003504:	2108      	movs	r1, #8
 8003506:	4818      	ldr	r0, [pc, #96]	@ (8003568 <menu+0x22bc>)
 8003508:	f006 fc90 	bl	8009e2c <HAL_GPIO_ReadPin>
 800350c:	4603      	mov	r3, r0
 800350e:	2b01      	cmp	r3, #1
 8003510:	d10d      	bne.n	800352e <menu+0x2282>
 8003512:	4b16      	ldr	r3, [pc, #88]	@ (800356c <menu+0x22c0>)
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	f083 0301 	eor.w	r3, r3, #1
 800351a:	b2db      	uxtb	r3, r3
 800351c:	2b00      	cmp	r3, #0
 800351e:	d006      	beq.n	800352e <menu+0x2282>
			eepromData[25] = buzzer;
 8003520:	4b17      	ldr	r3, [pc, #92]	@ (8003580 <menu+0x22d4>)
 8003522:	781a      	ldrb	r2, [r3, #0]
 8003524:	4b12      	ldr	r3, [pc, #72]	@ (8003570 <menu+0x22c4>)
 8003526:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 8003528:	4b12      	ldr	r3, [pc, #72]	@ (8003574 <menu+0x22c8>)
 800352a:	2201      	movs	r2, #1
 800352c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 800352e:	4b12      	ldr	r3, [pc, #72]	@ (8003578 <menu+0x22cc>)
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	2b1c      	cmp	r3, #28
 8003534:	f040 8088 	bne.w	8003648 <menu+0x239c>
		calismaSayModu = 0;
 8003538:	4b14      	ldr	r3, [pc, #80]	@ (800358c <menu+0x22e0>)
 800353a:	2200      	movs	r2, #0
 800353c:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, demoModTextGN);
 800353e:	4a14      	ldr	r2, [pc, #80]	@ (8003590 <menu+0x22e4>)
 8003540:	2101      	movs	r1, #1
 8003542:	2001      	movs	r0, #1
 8003544:	f005 f948 	bl	80087d8 <lcd_print>

		if(demoMode == 0) {
 8003548:	4b12      	ldr	r3, [pc, #72]	@ (8003594 <menu+0x22e8>)
 800354a:	781b      	ldrb	r3, [r3, #0]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d123      	bne.n	8003598 <menu+0x22ec>
			lcd_print(2, 1, pasifText);
 8003550:	4a0c      	ldr	r2, [pc, #48]	@ (8003584 <menu+0x22d8>)
 8003552:	2101      	movs	r1, #1
 8003554:	2002      	movs	r0, #2
 8003556:	f005 f93f 	bl	80087d8 <lcd_print>
 800355a:	e026      	b.n	80035aa <menu+0x22fe>
 800355c:	200010b8 	.word	0x200010b8
 8003560:	200014a8 	.word	0x200014a8
 8003564:	20001038 	.word	0x20001038
 8003568:	40010800 	.word	0x40010800
 800356c:	200010cf 	.word	0x200010cf
 8003570:	20000fc8 	.word	0x20000fc8
 8003574:	200010cc 	.word	0x200010cc
 8003578:	200010a0 	.word	0x200010a0
 800357c:	2000012c 	.word	0x2000012c
 8003580:	200010bc 	.word	0x200010bc
 8003584:	2000137c 	.word	0x2000137c
 8003588:	20001390 	.word	0x20001390
 800358c:	200010c0 	.word	0x200010c0
 8003590:	20000140 	.word	0x20000140
 8003594:	200010be 	.word	0x200010be
		} else if(demoMode == 1) {
 8003598:	4b61      	ldr	r3, [pc, #388]	@ (8003720 <menu+0x2474>)
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	2b01      	cmp	r3, #1
 800359e:	d104      	bne.n	80035aa <menu+0x22fe>
			lcd_print(2, 1, aktifText);
 80035a0:	4a60      	ldr	r2, [pc, #384]	@ (8003724 <menu+0x2478>)
 80035a2:	2101      	movs	r1, #1
 80035a4:	2002      	movs	r0, #2
 80035a6:	f005 f917 	bl	80087d8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80035aa:	2102      	movs	r1, #2
 80035ac:	485e      	ldr	r0, [pc, #376]	@ (8003728 <menu+0x247c>)
 80035ae:	f006 fc3d 	bl	8009e2c <HAL_GPIO_ReadPin>
 80035b2:	4603      	mov	r3, r0
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	d115      	bne.n	80035e4 <menu+0x2338>
 80035b8:	4b5c      	ldr	r3, [pc, #368]	@ (800372c <menu+0x2480>)
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	f083 0301 	eor.w	r3, r3, #1
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00e      	beq.n	80035e4 <menu+0x2338>
			demoMode = demoMode + 1;
 80035c6:	4b56      	ldr	r3, [pc, #344]	@ (8003720 <menu+0x2474>)
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	3301      	adds	r3, #1
 80035cc:	b2da      	uxtb	r2, r3
 80035ce:	4b54      	ldr	r3, [pc, #336]	@ (8003720 <menu+0x2474>)
 80035d0:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 80035d2:	4b53      	ldr	r3, [pc, #332]	@ (8003720 <menu+0x2474>)
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d902      	bls.n	80035e0 <menu+0x2334>
				demoMode = 0;
 80035da:	4b51      	ldr	r3, [pc, #324]	@ (8003720 <menu+0x2474>)
 80035dc:	2200      	movs	r2, #0
 80035de:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80035e0:	f000 fba2 	bl	8003d28 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80035e4:	2104      	movs	r1, #4
 80035e6:	4850      	ldr	r0, [pc, #320]	@ (8003728 <menu+0x247c>)
 80035e8:	f006 fc20 	bl	8009e2c <HAL_GPIO_ReadPin>
 80035ec:	4603      	mov	r3, r0
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d115      	bne.n	800361e <menu+0x2372>
 80035f2:	4b4e      	ldr	r3, [pc, #312]	@ (800372c <menu+0x2480>)
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	f083 0301 	eor.w	r3, r3, #1
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00e      	beq.n	800361e <menu+0x2372>
			demoMode = demoMode - 1;
 8003600:	4b47      	ldr	r3, [pc, #284]	@ (8003720 <menu+0x2474>)
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	3b01      	subs	r3, #1
 8003606:	b2da      	uxtb	r2, r3
 8003608:	4b45      	ldr	r3, [pc, #276]	@ (8003720 <menu+0x2474>)
 800360a:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 800360c:	4b44      	ldr	r3, [pc, #272]	@ (8003720 <menu+0x2474>)
 800360e:	781b      	ldrb	r3, [r3, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d002      	beq.n	800361a <menu+0x236e>
		   		demoMode = 1;
 8003614:	4b42      	ldr	r3, [pc, #264]	@ (8003720 <menu+0x2474>)
 8003616:	2201      	movs	r2, #1
 8003618:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800361a:	f000 fb85 	bl	8003d28 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800361e:	2108      	movs	r1, #8
 8003620:	4841      	ldr	r0, [pc, #260]	@ (8003728 <menu+0x247c>)
 8003622:	f006 fc03 	bl	8009e2c <HAL_GPIO_ReadPin>
 8003626:	4603      	mov	r3, r0
 8003628:	2b01      	cmp	r3, #1
 800362a:	d10d      	bne.n	8003648 <menu+0x239c>
 800362c:	4b3f      	ldr	r3, [pc, #252]	@ (800372c <menu+0x2480>)
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	f083 0301 	eor.w	r3, r3, #1
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d006      	beq.n	8003648 <menu+0x239c>
			eepromData[26] = demoMode;
 800363a:	4b39      	ldr	r3, [pc, #228]	@ (8003720 <menu+0x2474>)
 800363c:	781a      	ldrb	r2, [r3, #0]
 800363e:	4b3c      	ldr	r3, [pc, #240]	@ (8003730 <menu+0x2484>)
 8003640:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 8003642:	4b3c      	ldr	r3, [pc, #240]	@ (8003734 <menu+0x2488>)
 8003644:	2201      	movs	r2, #1
 8003646:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8003648:	4b3b      	ldr	r3, [pc, #236]	@ (8003738 <menu+0x248c>)
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	2b1d      	cmp	r3, #29
 800364e:	f040 810c 	bne.w	800386a <menu+0x25be>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 8003652:	4b3a      	ldr	r3, [pc, #232]	@ (800373c <menu+0x2490>)
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d113      	bne.n	8003682 <menu+0x23d6>
 800365a:	4b39      	ldr	r3, [pc, #228]	@ (8003740 <menu+0x2494>)
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d10f      	bne.n	8003682 <menu+0x23d6>
 8003662:	4b38      	ldr	r3, [pc, #224]	@ (8003744 <menu+0x2498>)
 8003664:	781b      	ldrb	r3, [r3, #0]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d10b      	bne.n	8003682 <menu+0x23d6>
 800366a:	4b37      	ldr	r3, [pc, #220]	@ (8003748 <menu+0x249c>)
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d107      	bne.n	8003682 <menu+0x23d6>
 8003672:	4b36      	ldr	r3, [pc, #216]	@ (800374c <menu+0x24a0>)
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d103      	bne.n	8003682 <menu+0x23d6>
			calismaSayisiYar = 0;
 800367a:	4b35      	ldr	r3, [pc, #212]	@ (8003750 <menu+0x24a4>)
 800367c:	2200      	movs	r2, #0
 800367e:	701a      	strb	r2, [r3, #0]
 8003680:	e002      	b.n	8003688 <menu+0x23dc>
		} else {
			calismaSayisiYar = 1;
 8003682:	4b33      	ldr	r3, [pc, #204]	@ (8003750 <menu+0x24a4>)
 8003684:	2201      	movs	r2, #1
 8003686:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 8003688:	4b32      	ldr	r3, [pc, #200]	@ (8003754 <menu+0x24a8>)
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	2b00      	cmp	r3, #0
 800368e:	d169      	bne.n	8003764 <menu+0x24b8>
			lcd_print(1, 1, calismaSayisiText);
 8003690:	4a31      	ldr	r2, [pc, #196]	@ (8003758 <menu+0x24ac>)
 8003692:	2101      	movs	r1, #1
 8003694:	2001      	movs	r0, #1
 8003696:	f005 f89f 	bl	80087d8 <lcd_print>

			itoa(calismaSayisi10000, snum, 10);
 800369a:	4b2c      	ldr	r3, [pc, #176]	@ (800374c <menu+0x24a0>)
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	220a      	movs	r2, #10
 80036a0:	492e      	ldr	r1, [pc, #184]	@ (800375c <menu+0x24b0>)
 80036a2:	4618      	mov	r0, r3
 80036a4:	f009 fbee 	bl	800ce84 <itoa>
			lcd_print(2, 12, snum);
 80036a8:	4a2c      	ldr	r2, [pc, #176]	@ (800375c <menu+0x24b0>)
 80036aa:	210c      	movs	r1, #12
 80036ac:	2002      	movs	r0, #2
 80036ae:	f005 f893 	bl	80087d8 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 80036b2:	4b25      	ldr	r3, [pc, #148]	@ (8003748 <menu+0x249c>)
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	220a      	movs	r2, #10
 80036b8:	4928      	ldr	r1, [pc, #160]	@ (800375c <menu+0x24b0>)
 80036ba:	4618      	mov	r0, r3
 80036bc:	f009 fbe2 	bl	800ce84 <itoa>
			lcd_print(2, 13, snum);
 80036c0:	4a26      	ldr	r2, [pc, #152]	@ (800375c <menu+0x24b0>)
 80036c2:	210d      	movs	r1, #13
 80036c4:	2002      	movs	r0, #2
 80036c6:	f005 f887 	bl	80087d8 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 80036ca:	4b1e      	ldr	r3, [pc, #120]	@ (8003744 <menu+0x2498>)
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	220a      	movs	r2, #10
 80036d0:	4922      	ldr	r1, [pc, #136]	@ (800375c <menu+0x24b0>)
 80036d2:	4618      	mov	r0, r3
 80036d4:	f009 fbd6 	bl	800ce84 <itoa>
			lcd_print(2, 14, snum);
 80036d8:	4a20      	ldr	r2, [pc, #128]	@ (800375c <menu+0x24b0>)
 80036da:	210e      	movs	r1, #14
 80036dc:	2002      	movs	r0, #2
 80036de:	f005 f87b 	bl	80087d8 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 80036e2:	4b17      	ldr	r3, [pc, #92]	@ (8003740 <menu+0x2494>)
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	220a      	movs	r2, #10
 80036e8:	491c      	ldr	r1, [pc, #112]	@ (800375c <menu+0x24b0>)
 80036ea:	4618      	mov	r0, r3
 80036ec:	f009 fbca 	bl	800ce84 <itoa>
			lcd_print(2, 15, snum);
 80036f0:	4a1a      	ldr	r2, [pc, #104]	@ (800375c <menu+0x24b0>)
 80036f2:	210f      	movs	r1, #15
 80036f4:	2002      	movs	r0, #2
 80036f6:	f005 f86f 	bl	80087d8 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 80036fa:	4b10      	ldr	r3, [pc, #64]	@ (800373c <menu+0x2490>)
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	220a      	movs	r2, #10
 8003700:	4916      	ldr	r1, [pc, #88]	@ (800375c <menu+0x24b0>)
 8003702:	4618      	mov	r0, r3
 8003704:	f009 fbbe 	bl	800ce84 <itoa>
			lcd_print(2, 16, snum);
 8003708:	4a14      	ldr	r2, [pc, #80]	@ (800375c <menu+0x24b0>)
 800370a:	2110      	movs	r1, #16
 800370c:	2002      	movs	r0, #2
 800370e:	f005 f863 	bl	80087d8 <lcd_print>

			lcd_print(2, 1, "           ");
 8003712:	4a13      	ldr	r2, [pc, #76]	@ (8003760 <menu+0x24b4>)
 8003714:	2101      	movs	r1, #1
 8003716:	2002      	movs	r0, #2
 8003718:	f005 f85e 	bl	80087d8 <lcd_print>
 800371c:	e030      	b.n	8003780 <menu+0x24d4>
 800371e:	bf00      	nop
 8003720:	200010be 	.word	0x200010be
 8003724:	20001390 	.word	0x20001390
 8003728:	40010800 	.word	0x40010800
 800372c:	200010cf 	.word	0x200010cf
 8003730:	20000fc8 	.word	0x20000fc8
 8003734:	200010cc 	.word	0x200010cc
 8003738:	200010a0 	.word	0x200010a0
 800373c:	2000109d 	.word	0x2000109d
 8003740:	2000109e 	.word	0x2000109e
 8003744:	20000000 	.word	0x20000000
 8003748:	20000001 	.word	0x20000001
 800374c:	2000109f 	.word	0x2000109f
 8003750:	200010e1 	.word	0x200010e1
 8003754:	200010c0 	.word	0x200010c0
 8003758:	200016ec 	.word	0x200016ec
 800375c:	20001038 	.word	0x20001038
 8003760:	0800db7c 	.word	0x0800db7c
		} else if(calismaSayModu == 1) {
 8003764:	4b82      	ldr	r3, [pc, #520]	@ (8003970 <menu+0x26c4>)
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d109      	bne.n	8003780 <menu+0x24d4>
			lcd_print(1, 1, calismaSayisiText);
 800376c:	4a81      	ldr	r2, [pc, #516]	@ (8003974 <menu+0x26c8>)
 800376e:	2101      	movs	r1, #1
 8003770:	2001      	movs	r0, #1
 8003772:	f005 f831 	bl	80087d8 <lcd_print>
			lcd_print(2, 1, enterlaSifirlaText);
 8003776:	4a80      	ldr	r2, [pc, #512]	@ (8003978 <menu+0x26cc>)
 8003778:	2101      	movs	r1, #1
 800377a:	2002      	movs	r0, #2
 800377c:	f005 f82c 	bl	80087d8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8003780:	2102      	movs	r1, #2
 8003782:	487e      	ldr	r0, [pc, #504]	@ (800397c <menu+0x26d0>)
 8003784:	f006 fb52 	bl	8009e2c <HAL_GPIO_ReadPin>
 8003788:	4603      	mov	r3, r0
 800378a:	2b01      	cmp	r3, #1
 800378c:	d119      	bne.n	80037c2 <menu+0x2516>
 800378e:	4b7c      	ldr	r3, [pc, #496]	@ (8003980 <menu+0x26d4>)
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	f083 0301 	eor.w	r3, r3, #1
 8003796:	b2db      	uxtb	r3, r3
 8003798:	2b00      	cmp	r3, #0
 800379a:	d012      	beq.n	80037c2 <menu+0x2516>
 800379c:	4b79      	ldr	r3, [pc, #484]	@ (8003984 <menu+0x26d8>)
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00e      	beq.n	80037c2 <menu+0x2516>
			calismaSayModu = calismaSayModu + 1;
 80037a4:	4b72      	ldr	r3, [pc, #456]	@ (8003970 <menu+0x26c4>)
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	3301      	adds	r3, #1
 80037aa:	b2da      	uxtb	r2, r3
 80037ac:	4b70      	ldr	r3, [pc, #448]	@ (8003970 <menu+0x26c4>)
 80037ae:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 80037b0:	4b6f      	ldr	r3, [pc, #444]	@ (8003970 <menu+0x26c4>)
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d902      	bls.n	80037be <menu+0x2512>
				calismaSayModu = 0;
 80037b8:	4b6d      	ldr	r3, [pc, #436]	@ (8003970 <menu+0x26c4>)
 80037ba:	2200      	movs	r2, #0
 80037bc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80037be:	f000 fab3 	bl	8003d28 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80037c2:	2104      	movs	r1, #4
 80037c4:	486d      	ldr	r0, [pc, #436]	@ (800397c <menu+0x26d0>)
 80037c6:	f006 fb31 	bl	8009e2c <HAL_GPIO_ReadPin>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d119      	bne.n	8003804 <menu+0x2558>
 80037d0:	4b6b      	ldr	r3, [pc, #428]	@ (8003980 <menu+0x26d4>)
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	f083 0301 	eor.w	r3, r3, #1
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d012      	beq.n	8003804 <menu+0x2558>
 80037de:	4b69      	ldr	r3, [pc, #420]	@ (8003984 <menu+0x26d8>)
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00e      	beq.n	8003804 <menu+0x2558>
			calismaSayModu = calismaSayModu - 1;
 80037e6:	4b62      	ldr	r3, [pc, #392]	@ (8003970 <menu+0x26c4>)
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	3b01      	subs	r3, #1
 80037ec:	b2da      	uxtb	r2, r3
 80037ee:	4b60      	ldr	r3, [pc, #384]	@ (8003970 <menu+0x26c4>)
 80037f0:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 80037f2:	4b5f      	ldr	r3, [pc, #380]	@ (8003970 <menu+0x26c4>)
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d002      	beq.n	8003800 <menu+0x2554>
		   		calismaSayModu = 1;
 80037fa:	4b5d      	ldr	r3, [pc, #372]	@ (8003970 <menu+0x26c4>)
 80037fc:	2201      	movs	r2, #1
 80037fe:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003800:	f000 fa92 	bl	8003d28 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003804:	2108      	movs	r1, #8
 8003806:	485d      	ldr	r0, [pc, #372]	@ (800397c <menu+0x26d0>)
 8003808:	f006 fb10 	bl	8009e2c <HAL_GPIO_ReadPin>
 800380c:	4603      	mov	r3, r0
 800380e:	2b01      	cmp	r3, #1
 8003810:	d12b      	bne.n	800386a <menu+0x25be>
 8003812:	4b5b      	ldr	r3, [pc, #364]	@ (8003980 <menu+0x26d4>)
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	f083 0301 	eor.w	r3, r3, #1
 800381a:	b2db      	uxtb	r3, r3
 800381c:	2b00      	cmp	r3, #0
 800381e:	d024      	beq.n	800386a <menu+0x25be>
			eepromData[32] = 0;
 8003820:	4b59      	ldr	r3, [pc, #356]	@ (8003988 <menu+0x26dc>)
 8003822:	2200      	movs	r2, #0
 8003824:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 8003828:	4b57      	ldr	r3, [pc, #348]	@ (8003988 <menu+0x26dc>)
 800382a:	2200      	movs	r2, #0
 800382c:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 800382e:	4b56      	ldr	r3, [pc, #344]	@ (8003988 <menu+0x26dc>)
 8003830:	2200      	movs	r2, #0
 8003832:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 8003834:	4b54      	ldr	r3, [pc, #336]	@ (8003988 <menu+0x26dc>)
 8003836:	2200      	movs	r2, #0
 8003838:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 800383a:	4b53      	ldr	r3, [pc, #332]	@ (8003988 <menu+0x26dc>)
 800383c:	2200      	movs	r2, #0
 800383e:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 8003840:	4b52      	ldr	r3, [pc, #328]	@ (800398c <menu+0x26e0>)
 8003842:	2200      	movs	r2, #0
 8003844:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 8003846:	4b52      	ldr	r3, [pc, #328]	@ (8003990 <menu+0x26e4>)
 8003848:	2200      	movs	r2, #0
 800384a:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 800384c:	4b51      	ldr	r3, [pc, #324]	@ (8003994 <menu+0x26e8>)
 800384e:	2200      	movs	r2, #0
 8003850:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 8003852:	4b51      	ldr	r3, [pc, #324]	@ (8003998 <menu+0x26ec>)
 8003854:	2200      	movs	r2, #0
 8003856:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 8003858:	4b50      	ldr	r3, [pc, #320]	@ (800399c <menu+0x26f0>)
 800385a:	2200      	movs	r2, #0
 800385c:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 800385e:	4b44      	ldr	r3, [pc, #272]	@ (8003970 <menu+0x26c4>)
 8003860:	2200      	movs	r2, #0
 8003862:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8003864:	4b4e      	ldr	r3, [pc, #312]	@ (80039a0 <menu+0x26f4>)
 8003866:	2201      	movs	r2, #1
 8003868:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 800386a:	4b4e      	ldr	r3, [pc, #312]	@ (80039a4 <menu+0x26f8>)
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	2b1e      	cmp	r3, #30
 8003870:	d166      	bne.n	8003940 <menu+0x2694>
		calismaSayModu = 0;
 8003872:	4b3f      	ldr	r3, [pc, #252]	@ (8003970 <menu+0x26c4>)
 8003874:	2200      	movs	r2, #0
 8003876:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, dilSecimText);
 8003878:	4a4b      	ldr	r2, [pc, #300]	@ (80039a8 <menu+0x26fc>)
 800387a:	2101      	movs	r1, #1
 800387c:	2001      	movs	r0, #1
 800387e:	f004 ffab 	bl	80087d8 <lcd_print>
		lcd_print(2, 1, secilenDilText);
 8003882:	4a4a      	ldr	r2, [pc, #296]	@ (80039ac <menu+0x2700>)
 8003884:	2101      	movs	r1, #1
 8003886:	2002      	movs	r0, #2
 8003888:	f004 ffa6 	bl	80087d8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800388c:	2102      	movs	r1, #2
 800388e:	483b      	ldr	r0, [pc, #236]	@ (800397c <menu+0x26d0>)
 8003890:	f006 facc 	bl	8009e2c <HAL_GPIO_ReadPin>
 8003894:	4603      	mov	r3, r0
 8003896:	2b01      	cmp	r3, #1
 8003898:	d11a      	bne.n	80038d0 <menu+0x2624>
 800389a:	4b39      	ldr	r3, [pc, #228]	@ (8003980 <menu+0x26d4>)
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	f083 0301 	eor.w	r3, r3, #1
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d013      	beq.n	80038d0 <menu+0x2624>
			dilSecim = dilSecim + 1;
 80038a8:	4b41      	ldr	r3, [pc, #260]	@ (80039b0 <menu+0x2704>)
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	3301      	adds	r3, #1
 80038ae:	b2da      	uxtb	r2, r3
 80038b0:	4b3f      	ldr	r3, [pc, #252]	@ (80039b0 <menu+0x2704>)
 80038b2:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 80038b4:	4b3e      	ldr	r3, [pc, #248]	@ (80039b0 <menu+0x2704>)
 80038b6:	781b      	ldrb	r3, [r3, #0]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d902      	bls.n	80038c2 <menu+0x2616>
				dilSecim = 0;
 80038bc:	4b3c      	ldr	r3, [pc, #240]	@ (80039b0 <menu+0x2704>)
 80038be:	2200      	movs	r2, #0
 80038c0:	701a      	strb	r2, [r3, #0]
			}
			loadMenuTexts(dilSecim);
 80038c2:	4b3b      	ldr	r3, [pc, #236]	@ (80039b0 <menu+0x2704>)
 80038c4:	781b      	ldrb	r3, [r3, #0]
 80038c6:	4618      	mov	r0, r3
 80038c8:	f002 fb1e 	bl	8005f08 <loadMenuTexts>

			bekle();
 80038cc:	f000 fa2c 	bl	8003d28 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80038d0:	2104      	movs	r1, #4
 80038d2:	482a      	ldr	r0, [pc, #168]	@ (800397c <menu+0x26d0>)
 80038d4:	f006 faaa 	bl	8009e2c <HAL_GPIO_ReadPin>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b01      	cmp	r3, #1
 80038dc:	d11a      	bne.n	8003914 <menu+0x2668>
 80038de:	4b28      	ldr	r3, [pc, #160]	@ (8003980 <menu+0x26d4>)
 80038e0:	781b      	ldrb	r3, [r3, #0]
 80038e2:	f083 0301 	eor.w	r3, r3, #1
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d013      	beq.n	8003914 <menu+0x2668>
			dilSecim = dilSecim - 1;
 80038ec:	4b30      	ldr	r3, [pc, #192]	@ (80039b0 <menu+0x2704>)
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	3b01      	subs	r3, #1
 80038f2:	b2da      	uxtb	r2, r3
 80038f4:	4b2e      	ldr	r3, [pc, #184]	@ (80039b0 <menu+0x2704>)
 80038f6:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 80038f8:	4b2d      	ldr	r3, [pc, #180]	@ (80039b0 <menu+0x2704>)
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d002      	beq.n	8003906 <menu+0x265a>
		   		dilSecim = 1;
 8003900:	4b2b      	ldr	r3, [pc, #172]	@ (80039b0 <menu+0x2704>)
 8003902:	2201      	movs	r2, #1
 8003904:	701a      	strb	r2, [r3, #0]
		   	}
		   	loadMenuTexts(dilSecim);
 8003906:	4b2a      	ldr	r3, [pc, #168]	@ (80039b0 <menu+0x2704>)
 8003908:	781b      	ldrb	r3, [r3, #0]
 800390a:	4618      	mov	r0, r3
 800390c:	f002 fafc 	bl	8005f08 <loadMenuTexts>

			bekle();
 8003910:	f000 fa0a 	bl	8003d28 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003914:	2108      	movs	r1, #8
 8003916:	4819      	ldr	r0, [pc, #100]	@ (800397c <menu+0x26d0>)
 8003918:	f006 fa88 	bl	8009e2c <HAL_GPIO_ReadPin>
 800391c:	4603      	mov	r3, r0
 800391e:	2b01      	cmp	r3, #1
 8003920:	d10e      	bne.n	8003940 <menu+0x2694>
 8003922:	4b17      	ldr	r3, [pc, #92]	@ (8003980 <menu+0x26d4>)
 8003924:	781b      	ldrb	r3, [r3, #0]
 8003926:	f083 0301 	eor.w	r3, r3, #1
 800392a:	b2db      	uxtb	r3, r3
 800392c:	2b00      	cmp	r3, #0
 800392e:	d007      	beq.n	8003940 <menu+0x2694>
			eepromData[33] = dilSecim;
 8003930:	4b1f      	ldr	r3, [pc, #124]	@ (80039b0 <menu+0x2704>)
 8003932:	781a      	ldrb	r2, [r3, #0]
 8003934:	4b14      	ldr	r3, [pc, #80]	@ (8003988 <menu+0x26dc>)
 8003936:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
			hafizaYaz = 1;
 800393a:	4b19      	ldr	r3, [pc, #100]	@ (80039a0 <menu+0x26f4>)
 800393c:	2201      	movs	r2, #1
 800393e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8003940:	4b18      	ldr	r3, [pc, #96]	@ (80039a4 <menu+0x26f8>)
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	2b1f      	cmp	r3, #31
 8003946:	f040 8094 	bne.w	8003a72 <menu+0x27c6>
		calismaSayModu = 0;
 800394a:	4b09      	ldr	r3, [pc, #36]	@ (8003970 <menu+0x26c4>)
 800394c:	2200      	movs	r2, #0
 800394e:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, iotModTextGN);
 8003950:	4a18      	ldr	r2, [pc, #96]	@ (80039b4 <menu+0x2708>)
 8003952:	2101      	movs	r1, #1
 8003954:	2001      	movs	r0, #1
 8003956:	f004 ff3f 	bl	80087d8 <lcd_print>

		if(iotMode == 0) {
 800395a:	4b17      	ldr	r3, [pc, #92]	@ (80039b8 <menu+0x270c>)
 800395c:	781b      	ldrb	r3, [r3, #0]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d12e      	bne.n	80039c0 <menu+0x2714>
			lcd_print(2, 1, pasifText);
 8003962:	4a16      	ldr	r2, [pc, #88]	@ (80039bc <menu+0x2710>)
 8003964:	2101      	movs	r1, #1
 8003966:	2002      	movs	r0, #2
 8003968:	f004 ff36 	bl	80087d8 <lcd_print>
 800396c:	e031      	b.n	80039d2 <menu+0x2726>
 800396e:	bf00      	nop
 8003970:	200010c0 	.word	0x200010c0
 8003974:	200016ec 	.word	0x200016ec
 8003978:	20001700 	.word	0x20001700
 800397c:	40010800 	.word	0x40010800
 8003980:	200010cf 	.word	0x200010cf
 8003984:	200010e1 	.word	0x200010e1
 8003988:	20000fc8 	.word	0x20000fc8
 800398c:	2000109f 	.word	0x2000109f
 8003990:	20000001 	.word	0x20000001
 8003994:	20000000 	.word	0x20000000
 8003998:	2000109e 	.word	0x2000109e
 800399c:	2000109d 	.word	0x2000109d
 80039a0:	200010cc 	.word	0x200010cc
 80039a4:	200010a0 	.word	0x200010a0
 80039a8:	20001714 	.word	0x20001714
 80039ac:	20001728 	.word	0x20001728
 80039b0:	200010c1 	.word	0x200010c1
 80039b4:	20000154 	.word	0x20000154
 80039b8:	200010bf 	.word	0x200010bf
 80039bc:	2000137c 	.word	0x2000137c
		} else if(iotMode == 1) {
 80039c0:	4b97      	ldr	r3, [pc, #604]	@ (8003c20 <menu+0x2974>)
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d104      	bne.n	80039d2 <menu+0x2726>
			lcd_print(2, 1, aktifText);
 80039c8:	4a96      	ldr	r2, [pc, #600]	@ (8003c24 <menu+0x2978>)
 80039ca:	2101      	movs	r1, #1
 80039cc:	2002      	movs	r0, #2
 80039ce:	f004 ff03 	bl	80087d8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80039d2:	2102      	movs	r1, #2
 80039d4:	4894      	ldr	r0, [pc, #592]	@ (8003c28 <menu+0x297c>)
 80039d6:	f006 fa29 	bl	8009e2c <HAL_GPIO_ReadPin>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b01      	cmp	r3, #1
 80039de:	d115      	bne.n	8003a0c <menu+0x2760>
 80039e0:	4b92      	ldr	r3, [pc, #584]	@ (8003c2c <menu+0x2980>)
 80039e2:	781b      	ldrb	r3, [r3, #0]
 80039e4:	f083 0301 	eor.w	r3, r3, #1
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00e      	beq.n	8003a0c <menu+0x2760>
			iotMode = iotMode + 1;
 80039ee:	4b8c      	ldr	r3, [pc, #560]	@ (8003c20 <menu+0x2974>)
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	3301      	adds	r3, #1
 80039f4:	b2da      	uxtb	r2, r3
 80039f6:	4b8a      	ldr	r3, [pc, #552]	@ (8003c20 <menu+0x2974>)
 80039f8:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 80039fa:	4b89      	ldr	r3, [pc, #548]	@ (8003c20 <menu+0x2974>)
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d902      	bls.n	8003a08 <menu+0x275c>
				iotMode = 0;
 8003a02:	4b87      	ldr	r3, [pc, #540]	@ (8003c20 <menu+0x2974>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8003a08:	f000 f98e 	bl	8003d28 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a0c:	2104      	movs	r1, #4
 8003a0e:	4886      	ldr	r0, [pc, #536]	@ (8003c28 <menu+0x297c>)
 8003a10:	f006 fa0c 	bl	8009e2c <HAL_GPIO_ReadPin>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d115      	bne.n	8003a46 <menu+0x279a>
 8003a1a:	4b84      	ldr	r3, [pc, #528]	@ (8003c2c <menu+0x2980>)
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	f083 0301 	eor.w	r3, r3, #1
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d00e      	beq.n	8003a46 <menu+0x279a>
			iotMode = iotMode - 1;
 8003a28:	4b7d      	ldr	r3, [pc, #500]	@ (8003c20 <menu+0x2974>)
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	b2da      	uxtb	r2, r3
 8003a30:	4b7b      	ldr	r3, [pc, #492]	@ (8003c20 <menu+0x2974>)
 8003a32:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8003a34:	4b7a      	ldr	r3, [pc, #488]	@ (8003c20 <menu+0x2974>)
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d002      	beq.n	8003a42 <menu+0x2796>
		   		iotMode = 1;
 8003a3c:	4b78      	ldr	r3, [pc, #480]	@ (8003c20 <menu+0x2974>)
 8003a3e:	2201      	movs	r2, #1
 8003a40:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8003a42:	f000 f971 	bl	8003d28 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a46:	2108      	movs	r1, #8
 8003a48:	4877      	ldr	r0, [pc, #476]	@ (8003c28 <menu+0x297c>)
 8003a4a:	f006 f9ef 	bl	8009e2c <HAL_GPIO_ReadPin>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d10e      	bne.n	8003a72 <menu+0x27c6>
 8003a54:	4b75      	ldr	r3, [pc, #468]	@ (8003c2c <menu+0x2980>)
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	f083 0301 	eor.w	r3, r3, #1
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d007      	beq.n	8003a72 <menu+0x27c6>
			eepromData[48] = iotMode;
 8003a62:	4b6f      	ldr	r3, [pc, #444]	@ (8003c20 <menu+0x2974>)
 8003a64:	781a      	ldrb	r2, [r3, #0]
 8003a66:	4b72      	ldr	r3, [pc, #456]	@ (8003c30 <menu+0x2984>)
 8003a68:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
			hafizaYaz = 1;
 8003a6c:	4b71      	ldr	r3, [pc, #452]	@ (8003c34 <menu+0x2988>)
 8003a6e:	2201      	movs	r2, #1
 8003a70:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 8003a72:	4b71      	ldr	r3, [pc, #452]	@ (8003c38 <menu+0x298c>)
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	2b20      	cmp	r3, #32
 8003a78:	d122      	bne.n	8003ac0 <menu+0x2814>
		calismaSayModu = 0;
 8003a7a:	4b70      	ldr	r3, [pc, #448]	@ (8003c3c <menu+0x2990>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	701a      	strb	r2, [r3, #0]

		convertArrays(1);
 8003a80:	2001      	movs	r0, #1
 8003a82:	f7fc fe5d 	bl	8000740 <convertArrays>
		HAL_Delay(50);
 8003a86:	2032      	movs	r0, #50	@ 0x32
 8003a88:	f005 fc00 	bl	800928c <HAL_Delay>

		printCredentials(1); //ekrana machine id yazdır
 8003a8c:	2001      	movs	r0, #1
 8003a8e:	f7fd fb5f 	bl	8001150 <printCredentials>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a92:	2102      	movs	r1, #2
 8003a94:	4864      	ldr	r0, [pc, #400]	@ (8003c28 <menu+0x297c>)
 8003a96:	f006 f9c9 	bl	8009e2c <HAL_GPIO_ReadPin>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	d10f      	bne.n	8003ac0 <menu+0x2814>
 8003aa0:	2104      	movs	r1, #4
 8003aa2:	4861      	ldr	r0, [pc, #388]	@ (8003c28 <menu+0x297c>)
 8003aa4:	f006 f9c2 	bl	8009e2c <HAL_GPIO_ReadPin>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d108      	bne.n	8003ac0 <menu+0x2814>
 8003aae:	4b5f      	ldr	r3, [pc, #380]	@ (8003c2c <menu+0x2980>)
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	f083 0301 	eor.w	r3, r3, #1
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d001      	beq.n	8003ac0 <menu+0x2814>
			takeMachineIDWithConfirmation();
 8003abc:	f003 fe84 	bl	80077c8 <takeMachineIDWithConfirmation>
		}
	}

	if (menuSayac == 33) {
 8003ac0:	4b5d      	ldr	r3, [pc, #372]	@ (8003c38 <menu+0x298c>)
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	2b21      	cmp	r3, #33	@ 0x21
 8003ac6:	d132      	bne.n	8003b2e <menu+0x2882>
		calismaSayModu = 0;
 8003ac8:	4b5c      	ldr	r3, [pc, #368]	@ (8003c3c <menu+0x2990>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	701a      	strb	r2, [r3, #0]

		convertArrays(2);
 8003ace:	2002      	movs	r0, #2
 8003ad0:	f7fc fe36 	bl	8000740 <convertArrays>
		HAL_Delay(50);
 8003ad4:	2032      	movs	r0, #50	@ 0x32
 8003ad6:	f005 fbd9 	bl	800928c <HAL_Delay>

		printCredentials(2); //ekrana wifi ssid yazdır
 8003ada:	2002      	movs	r0, #2
 8003adc:	f7fd fb38 	bl	8001150 <printCredentials>

		if (((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) || editMode == 1) {
 8003ae0:	2102      	movs	r1, #2
 8003ae2:	4851      	ldr	r0, [pc, #324]	@ (8003c28 <menu+0x297c>)
 8003ae4:	f006 f9a2 	bl	8009e2c <HAL_GPIO_ReadPin>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d10d      	bne.n	8003b0a <menu+0x285e>
 8003aee:	2104      	movs	r1, #4
 8003af0:	484d      	ldr	r0, [pc, #308]	@ (8003c28 <menu+0x297c>)
 8003af2:	f006 f99b 	bl	8009e2c <HAL_GPIO_ReadPin>
 8003af6:	4603      	mov	r3, r0
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	d106      	bne.n	8003b0a <menu+0x285e>
 8003afc:	4b4b      	ldr	r3, [pc, #300]	@ (8003c2c <menu+0x2980>)
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	f083 0301 	eor.w	r3, r3, #1
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d103      	bne.n	8003b12 <menu+0x2866>
 8003b0a:	4b4d      	ldr	r3, [pc, #308]	@ (8003c40 <menu+0x2994>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d10d      	bne.n	8003b2e <menu+0x2882>
			editMode = 0;
 8003b12:	4b4b      	ldr	r3, [pc, #300]	@ (8003c40 <menu+0x2994>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	601a      	str	r2, [r3, #0]
			takeWifiSSID();
 8003b18:	f004 f80e 	bl	8007b38 <takeWifiSSID>

			convertArrays(2);
 8003b1c:	2002      	movs	r0, #2
 8003b1e:	f7fc fe0f 	bl	8000740 <convertArrays>
			HAL_Delay(50);
 8003b22:	2032      	movs	r0, #50	@ 0x32
 8003b24:	f005 fbb2 	bl	800928c <HAL_Delay>

			printCredentials(2); //ekrana wifi ssid yazdır
 8003b28:	2002      	movs	r0, #2
 8003b2a:	f7fd fb11 	bl	8001150 <printCredentials>
		}
	}

	if (menuSayac == 34) {
 8003b2e:	4b42      	ldr	r3, [pc, #264]	@ (8003c38 <menu+0x298c>)
 8003b30:	781b      	ldrb	r3, [r3, #0]
 8003b32:	2b22      	cmp	r3, #34	@ 0x22
 8003b34:	d132      	bne.n	8003b9c <menu+0x28f0>
		calismaSayModu = 0;
 8003b36:	4b41      	ldr	r3, [pc, #260]	@ (8003c3c <menu+0x2990>)
 8003b38:	2200      	movs	r2, #0
 8003b3a:	701a      	strb	r2, [r3, #0]

		convertArrays(3);
 8003b3c:	2003      	movs	r0, #3
 8003b3e:	f7fc fdff 	bl	8000740 <convertArrays>
		HAL_Delay(50);
 8003b42:	2032      	movs	r0, #50	@ 0x32
 8003b44:	f005 fba2 	bl	800928c <HAL_Delay>

		printCredentials(3); //ekrana wifi pass yazdır
 8003b48:	2003      	movs	r0, #3
 8003b4a:	f7fd fb01 	bl	8001150 <printCredentials>

		if (((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) || editMode == 1) {
 8003b4e:	2102      	movs	r1, #2
 8003b50:	4835      	ldr	r0, [pc, #212]	@ (8003c28 <menu+0x297c>)
 8003b52:	f006 f96b 	bl	8009e2c <HAL_GPIO_ReadPin>
 8003b56:	4603      	mov	r3, r0
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d10d      	bne.n	8003b78 <menu+0x28cc>
 8003b5c:	2104      	movs	r1, #4
 8003b5e:	4832      	ldr	r0, [pc, #200]	@ (8003c28 <menu+0x297c>)
 8003b60:	f006 f964 	bl	8009e2c <HAL_GPIO_ReadPin>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d106      	bne.n	8003b78 <menu+0x28cc>
 8003b6a:	4b30      	ldr	r3, [pc, #192]	@ (8003c2c <menu+0x2980>)
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	f083 0301 	eor.w	r3, r3, #1
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d103      	bne.n	8003b80 <menu+0x28d4>
 8003b78:	4b31      	ldr	r3, [pc, #196]	@ (8003c40 <menu+0x2994>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	2b01      	cmp	r3, #1
 8003b7e:	d10d      	bne.n	8003b9c <menu+0x28f0>
			editMode = 0;
 8003b80:	4b2f      	ldr	r3, [pc, #188]	@ (8003c40 <menu+0x2994>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	601a      	str	r2, [r3, #0]
			takeWifiPass();
 8003b86:	f004 f961 	bl	8007e4c <takeWifiPass>

			convertArrays(3);
 8003b8a:	2003      	movs	r0, #3
 8003b8c:	f7fc fdd8 	bl	8000740 <convertArrays>
			HAL_Delay(50);
 8003b90:	2032      	movs	r0, #50	@ 0x32
 8003b92:	f005 fb7b 	bl	800928c <HAL_Delay>

			printCredentials(3); //ekrana wifi pass yazdır
 8003b96:	2003      	movs	r0, #3
 8003b98:	f7fd fada 	bl	8001150 <printCredentials>
		}
	}

	if (menuSayac == 35) {
 8003b9c:	4b26      	ldr	r3, [pc, #152]	@ (8003c38 <menu+0x298c>)
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	2b23      	cmp	r3, #35	@ 0x23
 8003ba2:	d13a      	bne.n	8003c1a <menu+0x296e>
		lcd_print(1, 1, menudenCikisText);
 8003ba4:	4a27      	ldr	r2, [pc, #156]	@ (8003c44 <menu+0x2998>)
 8003ba6:	2101      	movs	r1, #1
 8003ba8:	2001      	movs	r0, #1
 8003baa:	f004 fe15 	bl	80087d8 <lcd_print>
		lcd_print(2, 1, enteraBasinizText);
 8003bae:	4a26      	ldr	r2, [pc, #152]	@ (8003c48 <menu+0x299c>)
 8003bb0:	2101      	movs	r1, #1
 8003bb2:	2002      	movs	r0, #2
 8003bb4:	f004 fe10 	bl	80087d8 <lcd_print>

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8003bb8:	2108      	movs	r1, #8
 8003bba:	481b      	ldr	r0, [pc, #108]	@ (8003c28 <menu+0x297c>)
 8003bbc:	f006 f936 	bl	8009e2c <HAL_GPIO_ReadPin>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d129      	bne.n	8003c1a <menu+0x296e>
			menuGiris = 0;
 8003bc6:	4b21      	ldr	r3, [pc, #132]	@ (8003c4c <menu+0x29a0>)
 8003bc8:	2200      	movs	r2, #0
 8003bca:	701a      	strb	r2, [r3, #0]

			while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8003bcc:	bf00      	nop
 8003bce:	4820      	ldr	r0, [pc, #128]	@ (8003c50 <menu+0x29a4>)
 8003bd0:	f006 ff55 	bl	800aa7e <HAL_I2C_GetError>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	d0f9      	beq.n	8003bce <menu+0x2922>
			while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8003bda:	bf00      	nop
 8003bdc:	481c      	ldr	r0, [pc, #112]	@ (8003c50 <menu+0x29a4>)
 8003bde:	f006 ff41 	bl	800aa64 <HAL_I2C_GetState>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b20      	cmp	r3, #32
 8003be6:	d1f9      	bne.n	8003bdc <menu+0x2930>

			HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8003be8:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8003bec:	9302      	str	r3, [sp, #8]
 8003bee:	236e      	movs	r3, #110	@ 0x6e
 8003bf0:	9301      	str	r3, [sp, #4]
 8003bf2:	4b0f      	ldr	r3, [pc, #60]	@ (8003c30 <menu+0x2984>)
 8003bf4:	9300      	str	r3, [sp, #0]
 8003bf6:	236e      	movs	r3, #110	@ 0x6e
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	21a0      	movs	r1, #160	@ 0xa0
 8003bfc:	4814      	ldr	r0, [pc, #80]	@ (8003c50 <menu+0x29a4>)
 8003bfe:	f006 fbcf 	bl	800a3a0 <HAL_I2C_Mem_Write>
			HAL_Delay(1200);
 8003c02:	f44f 6096 	mov.w	r0, #1200	@ 0x4b0
 8003c06:	f005 fb41 	bl	800928c <HAL_Delay>

			lcd_clear();
 8003c0a:	f004 fe11 	bl	8008830 <lcd_clear>
			HAL_Delay(500);
 8003c0e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8003c12:	f005 fb3b 	bl	800928c <HAL_Delay>
			NVIC_SystemReset();
 8003c16:	f7fd fb33 	bl	8001280 <__NVIC_SystemReset>
		}
	}
}
 8003c1a:	bf00      	nop
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	200010bf 	.word	0x200010bf
 8003c24:	20001390 	.word	0x20001390
 8003c28:	40010800 	.word	0x40010800
 8003c2c:	200010cf 	.word	0x200010cf
 8003c30:	20000fc8 	.word	0x20000fc8
 8003c34:	200010cc 	.word	0x200010cc
 8003c38:	200010a0 	.word	0x200010a0
 8003c3c:	200010c0 	.word	0x200010c0
 8003c40:	20001098 	.word	0x20001098
 8003c44:	2000173c 	.word	0x2000173c
 8003c48:	20001750 	.word	0x20001750
 8003c4c:	200010bd 	.word	0x200010bd
 8003c50:	20001908 	.word	0x20001908

08003c54 <lcdUpdate>:
#include "WifiProcess.h"
#include "Menu.h"
#include "Translation.h"
#include "TextVariables.h"

void lcdUpdate(uint8_t y) {
 8003c54:	b580      	push	{r7, lr}
 8003c56:	b082      	sub	sp, #8
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8003c5e:	79fb      	ldrb	r3, [r7, #7]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d105      	bne.n	8003c70 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8003c64:	4a22      	ldr	r2, [pc, #136]	@ (8003cf0 <lcdUpdate+0x9c>)
 8003c66:	2101      	movs	r1, #1
 8003c68:	2002      	movs	r0, #2
 8003c6a:	f004 fdb5 	bl	80087d8 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 1, mainTextGN);
		lcd_print(2, 1, mainText2GN);
	}
}
 8003c6e:	e03b      	b.n	8003ce8 <lcdUpdate+0x94>
	} else if(y==2) {
 8003c70:	79fb      	ldrb	r3, [r7, #7]
 8003c72:	2b02      	cmp	r3, #2
 8003c74:	d105      	bne.n	8003c82 <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8003c76:	4a1e      	ldr	r2, [pc, #120]	@ (8003cf0 <lcdUpdate+0x9c>)
 8003c78:	2102      	movs	r1, #2
 8003c7a:	2002      	movs	r0, #2
 8003c7c:	f004 fdac 	bl	80087d8 <lcd_print>
}
 8003c80:	e032      	b.n	8003ce8 <lcdUpdate+0x94>
	} else if(y==3) {
 8003c82:	79fb      	ldrb	r3, [r7, #7]
 8003c84:	2b03      	cmp	r3, #3
 8003c86:	d105      	bne.n	8003c94 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8003c88:	4a19      	ldr	r2, [pc, #100]	@ (8003cf0 <lcdUpdate+0x9c>)
 8003c8a:	2103      	movs	r1, #3
 8003c8c:	2002      	movs	r0, #2
 8003c8e:	f004 fda3 	bl	80087d8 <lcd_print>
}
 8003c92:	e029      	b.n	8003ce8 <lcdUpdate+0x94>
	} else if(y==4) {
 8003c94:	79fb      	ldrb	r3, [r7, #7]
 8003c96:	2b04      	cmp	r3, #4
 8003c98:	d105      	bne.n	8003ca6 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8003c9a:	4a15      	ldr	r2, [pc, #84]	@ (8003cf0 <lcdUpdate+0x9c>)
 8003c9c:	2104      	movs	r1, #4
 8003c9e:	2002      	movs	r0, #2
 8003ca0:	f004 fd9a 	bl	80087d8 <lcd_print>
}
 8003ca4:	e020      	b.n	8003ce8 <lcdUpdate+0x94>
	} else if(y==5) {
 8003ca6:	79fb      	ldrb	r3, [r7, #7]
 8003ca8:	2b05      	cmp	r3, #5
 8003caa:	d105      	bne.n	8003cb8 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8003cac:	4a10      	ldr	r2, [pc, #64]	@ (8003cf0 <lcdUpdate+0x9c>)
 8003cae:	2105      	movs	r1, #5
 8003cb0:	2002      	movs	r0, #2
 8003cb2:	f004 fd91 	bl	80087d8 <lcd_print>
}
 8003cb6:	e017      	b.n	8003ce8 <lcdUpdate+0x94>
	} else if(y==6) {
 8003cb8:	79fb      	ldrb	r3, [r7, #7]
 8003cba:	2b06      	cmp	r3, #6
 8003cbc:	d105      	bne.n	8003cca <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8003cbe:	4a0c      	ldr	r2, [pc, #48]	@ (8003cf0 <lcdUpdate+0x9c>)
 8003cc0:	2106      	movs	r1, #6
 8003cc2:	2002      	movs	r0, #2
 8003cc4:	f004 fd88 	bl	80087d8 <lcd_print>
}
 8003cc8:	e00e      	b.n	8003ce8 <lcdUpdate+0x94>
	} else if (y==7) {
 8003cca:	79fb      	ldrb	r3, [r7, #7]
 8003ccc:	2b07      	cmp	r3, #7
 8003cce:	d10b      	bne.n	8003ce8 <lcdUpdate+0x94>
		lcd_clear();
 8003cd0:	f004 fdae 	bl	8008830 <lcd_clear>
		lcd_print(1, 1, mainTextGN);
 8003cd4:	4a07      	ldr	r2, [pc, #28]	@ (8003cf4 <lcdUpdate+0xa0>)
 8003cd6:	2101      	movs	r1, #1
 8003cd8:	2001      	movs	r0, #1
 8003cda:	f004 fd7d 	bl	80087d8 <lcd_print>
		lcd_print(2, 1, mainText2GN);
 8003cde:	4a06      	ldr	r2, [pc, #24]	@ (8003cf8 <lcdUpdate+0xa4>)
 8003ce0:	2101      	movs	r1, #1
 8003ce2:	2002      	movs	r0, #2
 8003ce4:	f004 fd78 	bl	80087d8 <lcd_print>
}
 8003ce8:	bf00      	nop
 8003cea:	3708      	adds	r7, #8
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	0800db88 	.word	0x0800db88
 8003cf4:	200000c8 	.word	0x200000c8
 8003cf8:	200000dc 	.word	0x200000dc

08003cfc <checkLCDBacklight>:

void checkLCDBacklight() {
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8003d00:	4b07      	ldr	r3, [pc, #28]	@ (8003d20 <checkLCDBacklight+0x24>)
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	4b07      	ldr	r3, [pc, #28]	@ (8003d24 <checkLCDBacklight+0x28>)
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b3b      	cmp	r3, #59	@ 0x3b
 8003d0c:	d903      	bls.n	8003d16 <checkLCDBacklight+0x1a>
		lcd_backlight(0);
 8003d0e:	2000      	movs	r0, #0
 8003d10:	f004 fdae 	bl	8008870 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 8003d14:	e002      	b.n	8003d1c <checkLCDBacklight+0x20>
		lcd_backlight(1);
 8003d16:	2001      	movs	r0, #1
 8003d18:	f004 fdaa 	bl	8008870 <lcd_backlight>
}
 8003d1c:	bf00      	nop
 8003d1e:	bd80      	pop	{r7, pc}
 8003d20:	20001078 	.word	0x20001078
 8003d24:	20001094 	.word	0x20001094

08003d28 <bekle>:

void bekle() {
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	af00      	add	r7, sp, #0
	timer1=millis;
 8003d2c:	4b47      	ldr	r3, [pc, #284]	@ (8003e4c <bekle+0x124>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a47      	ldr	r2, [pc, #284]	@ (8003e50 <bekle+0x128>)
 8003d32:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003d34:	e002      	b.n	8003d3c <bekle+0x14>
    	butonKontrol = 1;
 8003d36:	4b47      	ldr	r3, [pc, #284]	@ (8003e54 <bekle+0x12c>)
 8003d38:	2201      	movs	r2, #1
 8003d3a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003d3c:	2101      	movs	r1, #1
 8003d3e:	4846      	ldr	r0, [pc, #280]	@ (8003e58 <bekle+0x130>)
 8003d40:	f006 f874 	bl	8009e2c <HAL_GPIO_ReadPin>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b01      	cmp	r3, #1
 8003d48:	d109      	bne.n	8003d5e <bekle+0x36>
 8003d4a:	4b40      	ldr	r3, [pc, #256]	@ (8003e4c <bekle+0x124>)
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	4b40      	ldr	r3, [pc, #256]	@ (8003e50 <bekle+0x128>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	429a      	cmp	r2, r3
 8003d54:	d0ef      	beq.n	8003d36 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003d56:	e002      	b.n	8003d5e <bekle+0x36>
    	butonKontrol = 1;
 8003d58:	4b3e      	ldr	r3, [pc, #248]	@ (8003e54 <bekle+0x12c>)
 8003d5a:	2201      	movs	r2, #1
 8003d5c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003d5e:	2108      	movs	r1, #8
 8003d60:	483e      	ldr	r0, [pc, #248]	@ (8003e5c <bekle+0x134>)
 8003d62:	f006 f863 	bl	8009e2c <HAL_GPIO_ReadPin>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d109      	bne.n	8003d80 <bekle+0x58>
 8003d6c:	4b37      	ldr	r3, [pc, #220]	@ (8003e4c <bekle+0x124>)
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	4b37      	ldr	r3, [pc, #220]	@ (8003e50 <bekle+0x128>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d0ef      	beq.n	8003d58 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003d78:	e002      	b.n	8003d80 <bekle+0x58>
    	butonKontrol = 1;
 8003d7a:	4b36      	ldr	r3, [pc, #216]	@ (8003e54 <bekle+0x12c>)
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003d80:	2102      	movs	r1, #2
 8003d82:	4835      	ldr	r0, [pc, #212]	@ (8003e58 <bekle+0x130>)
 8003d84:	f006 f852 	bl	8009e2c <HAL_GPIO_ReadPin>
 8003d88:	4603      	mov	r3, r0
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	d109      	bne.n	8003da2 <bekle+0x7a>
 8003d8e:	4b2f      	ldr	r3, [pc, #188]	@ (8003e4c <bekle+0x124>)
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	4b2f      	ldr	r3, [pc, #188]	@ (8003e50 <bekle+0x128>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	429a      	cmp	r2, r3
 8003d98:	d0ef      	beq.n	8003d7a <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003d9a:	e002      	b.n	8003da2 <bekle+0x7a>
    	butonKontrol = 1;
 8003d9c:	4b2d      	ldr	r3, [pc, #180]	@ (8003e54 <bekle+0x12c>)
 8003d9e:	2201      	movs	r2, #1
 8003da0:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003da2:	2104      	movs	r1, #4
 8003da4:	482c      	ldr	r0, [pc, #176]	@ (8003e58 <bekle+0x130>)
 8003da6:	f006 f841 	bl	8009e2c <HAL_GPIO_ReadPin>
 8003daa:	4603      	mov	r3, r0
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	d109      	bne.n	8003dc4 <bekle+0x9c>
 8003db0:	4b26      	ldr	r3, [pc, #152]	@ (8003e4c <bekle+0x124>)
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	4b26      	ldr	r3, [pc, #152]	@ (8003e50 <bekle+0x128>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	429a      	cmp	r2, r3
 8003dba:	d0ef      	beq.n	8003d9c <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003dbc:	e002      	b.n	8003dc4 <bekle+0x9c>
    	butonKontrol = 1;
 8003dbe:	4b25      	ldr	r3, [pc, #148]	@ (8003e54 <bekle+0x12c>)
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8003dc4:	2108      	movs	r1, #8
 8003dc6:	4824      	ldr	r0, [pc, #144]	@ (8003e58 <bekle+0x130>)
 8003dc8:	f006 f830 	bl	8009e2c <HAL_GPIO_ReadPin>
 8003dcc:	4603      	mov	r3, r0
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d109      	bne.n	8003de6 <bekle+0xbe>
 8003dd2:	4b1e      	ldr	r3, [pc, #120]	@ (8003e4c <bekle+0x124>)
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	4b1e      	ldr	r3, [pc, #120]	@ (8003e50 <bekle+0x128>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d0ef      	beq.n	8003dbe <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003dde:	e002      	b.n	8003de6 <bekle+0xbe>
    	butonKontrol = 1;
 8003de0:	4b1c      	ldr	r3, [pc, #112]	@ (8003e54 <bekle+0x12c>)
 8003de2:	2201      	movs	r2, #1
 8003de4:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003de6:	2180      	movs	r1, #128	@ 0x80
 8003de8:	481c      	ldr	r0, [pc, #112]	@ (8003e5c <bekle+0x134>)
 8003dea:	f006 f81f 	bl	8009e2c <HAL_GPIO_ReadPin>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d109      	bne.n	8003e08 <bekle+0xe0>
 8003df4:	4b15      	ldr	r3, [pc, #84]	@ (8003e4c <bekle+0x124>)
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	4b15      	ldr	r3, [pc, #84]	@ (8003e50 <bekle+0x128>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d0ef      	beq.n	8003de0 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003e00:	e002      	b.n	8003e08 <bekle+0xe0>
    	butonKontrol = 1;
 8003e02:	4b14      	ldr	r3, [pc, #80]	@ (8003e54 <bekle+0x12c>)
 8003e04:	2201      	movs	r2, #1
 8003e06:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003e08:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003e0c:	4813      	ldr	r0, [pc, #76]	@ (8003e5c <bekle+0x134>)
 8003e0e:	f006 f80d 	bl	8009e2c <HAL_GPIO_ReadPin>
 8003e12:	4603      	mov	r3, r0
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d109      	bne.n	8003e2c <bekle+0x104>
 8003e18:	4b0c      	ldr	r3, [pc, #48]	@ (8003e4c <bekle+0x124>)
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8003e50 <bekle+0x128>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d0ee      	beq.n	8003e02 <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003e24:	e002      	b.n	8003e2c <bekle+0x104>
    	butonKontrol = 1;
 8003e26:	4b0b      	ldr	r3, [pc, #44]	@ (8003e54 <bekle+0x12c>)
 8003e28:	2201      	movs	r2, #1
 8003e2a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8003e2c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003e30:	480a      	ldr	r0, [pc, #40]	@ (8003e5c <bekle+0x134>)
 8003e32:	f005 fffb 	bl	8009e2c <HAL_GPIO_ReadPin>
 8003e36:	4603      	mov	r3, r0
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d105      	bne.n	8003e48 <bekle+0x120>
 8003e3c:	4b03      	ldr	r3, [pc, #12]	@ (8003e4c <bekle+0x124>)
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	4b03      	ldr	r3, [pc, #12]	@ (8003e50 <bekle+0x128>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	429a      	cmp	r2, r3
 8003e46:	d0ee      	beq.n	8003e26 <bekle+0xfe>
    }

}
 8003e48:	bf00      	nop
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	20001078 	.word	0x20001078
 8003e50:	20001080 	.word	0x20001080
 8003e54:	200010cf 	.word	0x200010cf
 8003e58:	40010800 	.word	0x40010800
 8003e5c:	40011000 	.word	0x40011000

08003e60 <buttonCheck>:

uint8_t buttonCheck(void) {
 8003e60:	b580      	push	{r7, lr}
 8003e62:	af00      	add	r7, sp, #0
	if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1)
 8003e64:	2101      	movs	r1, #1
 8003e66:	4815      	ldr	r0, [pc, #84]	@ (8003ebc <buttonCheck+0x5c>)
 8003e68:	f005 ffe0 	bl	8009e2c <HAL_GPIO_ReadPin>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b01      	cmp	r3, #1
 8003e70:	d01b      	beq.n	8003eaa <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1)
 8003e72:	2108      	movs	r1, #8
 8003e74:	4812      	ldr	r0, [pc, #72]	@ (8003ec0 <buttonCheck+0x60>)
 8003e76:	f005 ffd9 	bl	8009e2c <HAL_GPIO_ReadPin>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d014      	beq.n	8003eaa <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1)
 8003e80:	2102      	movs	r1, #2
 8003e82:	480e      	ldr	r0, [pc, #56]	@ (8003ebc <buttonCheck+0x5c>)
 8003e84:	f005 ffd2 	bl	8009e2c <HAL_GPIO_ReadPin>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d00d      	beq.n	8003eaa <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1)
 8003e8e:	2104      	movs	r1, #4
 8003e90:	480a      	ldr	r0, [pc, #40]	@ (8003ebc <buttonCheck+0x5c>)
 8003e92:	f005 ffcb 	bl	8009e2c <HAL_GPIO_ReadPin>
 8003e96:	4603      	mov	r3, r0
 8003e98:	2b01      	cmp	r3, #1
 8003e9a:	d006      	beq.n	8003eaa <buttonCheck+0x4a>
			|| (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1)) {
 8003e9c:	2108      	movs	r1, #8
 8003e9e:	4807      	ldr	r0, [pc, #28]	@ (8003ebc <buttonCheck+0x5c>)
 8003ea0:	f005 ffc4 	bl	8009e2c <HAL_GPIO_ReadPin>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b01      	cmp	r3, #1
 8003ea8:	d104      	bne.n	8003eb4 <buttonCheck+0x54>
		backLightTimer = 0;
 8003eaa:	4b06      	ldr	r3, [pc, #24]	@ (8003ec4 <buttonCheck+0x64>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	601a      	str	r2, [r3, #0]
		return 1;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e000      	b.n	8003eb6 <buttonCheck+0x56>
	}
	return 0;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	bd80      	pop	{r7, pc}
 8003eba:	bf00      	nop
 8003ebc:	40010800 	.word	0x40010800
 8003ec0:	40011000 	.word	0x40011000
 8003ec4:	20001094 	.word	0x20001094

08003ec8 <checkBasincSalteri>:

void checkBasincSalteri() {
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8003ecc:	4b13      	ldr	r3, [pc, #76]	@ (8003f1c <checkBasincSalteri+0x54>)
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d102      	bne.n	8003eda <checkBasincSalteri+0x12>
		basincVar=1;
 8003ed4:	4b12      	ldr	r3, [pc, #72]	@ (8003f20 <checkBasincSalteri+0x58>)
 8003ed6:	2201      	movs	r2, #1
 8003ed8:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8003eda:	4b10      	ldr	r3, [pc, #64]	@ (8003f1c <checkBasincSalteri+0x54>)
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d119      	bne.n	8003f16 <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8003ee2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003ee6:	480f      	ldr	r0, [pc, #60]	@ (8003f24 <checkBasincSalteri+0x5c>)
 8003ee8:	f005 ffa0 	bl	8009e2c <HAL_GPIO_ReadPin>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d10a      	bne.n	8003f08 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 8003ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8003f28 <checkBasincSalteri+0x60>)
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8003f2c <checkBasincSalteri+0x64>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d90a      	bls.n	8003f16 <checkBasincSalteri+0x4e>
				basincVar=1;
 8003f00:	4b07      	ldr	r3, [pc, #28]	@ (8003f20 <checkBasincSalteri+0x58>)
 8003f02:	2201      	movs	r2, #1
 8003f04:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8003f06:	e006      	b.n	8003f16 <checkBasincSalteri+0x4e>
			timer5=millis;
 8003f08:	4b07      	ldr	r3, [pc, #28]	@ (8003f28 <checkBasincSalteri+0x60>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a07      	ldr	r2, [pc, #28]	@ (8003f2c <checkBasincSalteri+0x64>)
 8003f0e:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8003f10:	4b03      	ldr	r3, [pc, #12]	@ (8003f20 <checkBasincSalteri+0x58>)
 8003f12:	2200      	movs	r2, #0
 8003f14:	701a      	strb	r2, [r3, #0]
}
 8003f16:	bf00      	nop
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	200010a7 	.word	0x200010a7
 8003f20:	200010a3 	.word	0x200010a3
 8003f24:	40011000 	.word	0x40011000
 8003f28:	20001078 	.word	0x20001078
 8003f2c:	20001090 	.word	0x20001090

08003f30 <checkBasGonder>:

void checkBasGonder() {
 8003f30:	b480      	push	{r7}
 8003f32:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8003f34:	4b1b      	ldr	r3, [pc, #108]	@ (8003fa4 <checkBasGonder+0x74>)
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	2b01      	cmp	r3, #1
 8003f3a:	d10b      	bne.n	8003f54 <checkBasGonder+0x24>
 8003f3c:	4b1a      	ldr	r3, [pc, #104]	@ (8003fa8 <checkBasGonder+0x78>)
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d007      	beq.n	8003f54 <checkBasGonder+0x24>
 8003f44:	4b19      	ldr	r3, [pc, #100]	@ (8003fac <checkBasGonder+0x7c>)
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d103      	bne.n	8003f54 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8003f4c:	4b18      	ldr	r3, [pc, #96]	@ (8003fb0 <checkBasGonder+0x80>)
 8003f4e:	2201      	movs	r2, #1
 8003f50:	701a      	strb	r2, [r3, #0]
 8003f52:	e009      	b.n	8003f68 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8003f54:	4b14      	ldr	r3, [pc, #80]	@ (8003fa8 <checkBasGonder+0x78>)
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	f083 0301 	eor.w	r3, r3, #1
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d002      	beq.n	8003f68 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8003f62:	4b13      	ldr	r3, [pc, #76]	@ (8003fb0 <checkBasGonder+0x80>)
 8003f64:	2200      	movs	r2, #0
 8003f66:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8003f68:	4b0e      	ldr	r3, [pc, #56]	@ (8003fa4 <checkBasGonder+0x74>)
 8003f6a:	781b      	ldrb	r3, [r3, #0]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d10b      	bne.n	8003f88 <checkBasGonder+0x58>
 8003f70:	4b10      	ldr	r3, [pc, #64]	@ (8003fb4 <checkBasGonder+0x84>)
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d007      	beq.n	8003f88 <checkBasGonder+0x58>
 8003f78:	4b0c      	ldr	r3, [pc, #48]	@ (8003fac <checkBasGonder+0x7c>)
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d103      	bne.n	8003f88 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8003f80:	4b0d      	ldr	r3, [pc, #52]	@ (8003fb8 <checkBasGonder+0x88>)
 8003f82:	2201      	movs	r2, #1
 8003f84:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8003f86:	e009      	b.n	8003f9c <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8003f88:	4b0a      	ldr	r3, [pc, #40]	@ (8003fb4 <checkBasGonder+0x84>)
 8003f8a:	781b      	ldrb	r3, [r3, #0]
 8003f8c:	f083 0301 	eor.w	r3, r3, #1
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d002      	beq.n	8003f9c <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8003f96:	4b08      	ldr	r3, [pc, #32]	@ (8003fb8 <checkBasGonder+0x88>)
 8003f98:	2200      	movs	r2, #0
 8003f9a:	701a      	strb	r2, [r3, #0]
}
 8003f9c:	bf00      	nop
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bc80      	pop	{r7}
 8003fa2:	4770      	bx	lr
 8003fa4:	200010a1 	.word	0x200010a1
 8003fa8:	200010d5 	.word	0x200010d5
 8003fac:	200010af 	.word	0x200010af
 8003fb0:	200010dc 	.word	0x200010dc
 8003fb4:	200010d8 	.word	0x200010d8
 8003fb8:	200010dd 	.word	0x200010dd

08003fbc <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8003fc0:	4b24      	ldr	r3, [pc, #144]	@ (8004054 <checkKapiSecimleri+0x98>)
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d102      	bne.n	8003fce <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8003fc8:	4b23      	ldr	r3, [pc, #140]	@ (8004058 <checkKapiSecimleri+0x9c>)
 8003fca:	2201      	movs	r2, #1
 8003fcc:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 8003fce:	4b21      	ldr	r3, [pc, #132]	@ (8004054 <checkKapiSecimleri+0x98>)
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d10e      	bne.n	8003ff4 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8003fd6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003fda:	4820      	ldr	r0, [pc, #128]	@ (800405c <checkKapiSecimleri+0xa0>)
 8003fdc:	f005 ff26 	bl	8009e2c <HAL_GPIO_ReadPin>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d103      	bne.n	8003fee <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8003fe6:	4b1c      	ldr	r3, [pc, #112]	@ (8004058 <checkKapiSecimleri+0x9c>)
 8003fe8:	2201      	movs	r2, #1
 8003fea:	701a      	strb	r2, [r3, #0]
 8003fec:	e002      	b.n	8003ff4 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 8003fee:	4b1a      	ldr	r3, [pc, #104]	@ (8004058 <checkKapiSecimleri+0x9c>)
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8003ff4:	4b17      	ldr	r3, [pc, #92]	@ (8004054 <checkKapiSecimleri+0x98>)
 8003ff6:	781b      	ldrb	r3, [r3, #0]
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d10e      	bne.n	800401a <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8003ffc:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004000:	4816      	ldr	r0, [pc, #88]	@ (800405c <checkKapiSecimleri+0xa0>)
 8004002:	f005 ff13 	bl	8009e2c <HAL_GPIO_ReadPin>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d103      	bne.n	8004014 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 800400c:	4b12      	ldr	r3, [pc, #72]	@ (8004058 <checkKapiSecimleri+0x9c>)
 800400e:	2201      	movs	r2, #1
 8004010:	701a      	strb	r2, [r3, #0]
 8004012:	e002      	b.n	800401a <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8004014:	4b10      	ldr	r3, [pc, #64]	@ (8004058 <checkKapiSecimleri+0x9c>)
 8004016:	2200      	movs	r2, #0
 8004018:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 800401a:	4b0e      	ldr	r3, [pc, #56]	@ (8004054 <checkKapiSecimleri+0x98>)
 800401c:	781b      	ldrb	r3, [r3, #0]
 800401e:	2b03      	cmp	r3, #3
 8004020:	d116      	bne.n	8004050 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8004022:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004026:	480d      	ldr	r0, [pc, #52]	@ (800405c <checkKapiSecimleri+0xa0>)
 8004028:	f005 ff00 	bl	8009e2c <HAL_GPIO_ReadPin>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10b      	bne.n	800404a <checkKapiSecimleri+0x8e>
 8004032:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004036:	4809      	ldr	r0, [pc, #36]	@ (800405c <checkKapiSecimleri+0xa0>)
 8004038:	f005 fef8 	bl	8009e2c <HAL_GPIO_ReadPin>
 800403c:	4603      	mov	r3, r0
 800403e:	2b00      	cmp	r3, #0
 8004040:	d103      	bne.n	800404a <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8004042:	4b05      	ldr	r3, [pc, #20]	@ (8004058 <checkKapiSecimleri+0x9c>)
 8004044:	2201      	movs	r2, #1
 8004046:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8004048:	e002      	b.n	8004050 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 800404a:	4b03      	ldr	r3, [pc, #12]	@ (8004058 <checkKapiSecimleri+0x9c>)
 800404c:	2200      	movs	r2, #0
 800404e:	701a      	strb	r2, [r3, #0]
}
 8004050:	bf00      	nop
 8004052:	bd80      	pop	{r7, pc}
 8004054:	200010a8 	.word	0x200010a8
 8004058:	200010f3 	.word	0x200010f3
 800405c:	40010800 	.word	0x40010800

08004060 <checkAktifCalisma>:

void checkAktifCalisma() {
 8004060:	b580      	push	{r7, lr}
 8004062:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8004064:	4b62      	ldr	r3, [pc, #392]	@ (80041f0 <checkAktifCalisma+0x190>)
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	f041 833e 	bne.w	80056ea <checkAktifCalisma+0x168a>
 800406e:	4b61      	ldr	r3, [pc, #388]	@ (80041f4 <checkAktifCalisma+0x194>)
 8004070:	781b      	ldrb	r3, [r3, #0]
 8004072:	2b00      	cmp	r3, #0
 8004074:	f041 8339 	bne.w	80056ea <checkAktifCalisma+0x168a>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8004078:	4b5f      	ldr	r3, [pc, #380]	@ (80041f8 <checkAktifCalisma+0x198>)
 800407a:	781b      	ldrb	r3, [r3, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d11a      	bne.n	80040b6 <checkAktifCalisma+0x56>
 8004080:	4b5e      	ldr	r3, [pc, #376]	@ (80041fc <checkAktifCalisma+0x19c>)
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d116      	bne.n	80040b6 <checkAktifCalisma+0x56>
 8004088:	4b5d      	ldr	r3, [pc, #372]	@ (8004200 <checkAktifCalisma+0x1a0>)
 800408a:	781b      	ldrb	r3, [r3, #0]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00a      	beq.n	80040a6 <checkAktifCalisma+0x46>
 8004090:	4b5c      	ldr	r3, [pc, #368]	@ (8004204 <checkAktifCalisma+0x1a4>)
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	f083 0301 	eor.w	r3, r3, #1
 8004098:	b2db      	uxtb	r3, r3
 800409a:	2b00      	cmp	r3, #0
 800409c:	d003      	beq.n	80040a6 <checkAktifCalisma+0x46>
 800409e:	4b5a      	ldr	r3, [pc, #360]	@ (8004208 <checkAktifCalisma+0x1a8>)
 80040a0:	781b      	ldrb	r3, [r3, #0]
 80040a2:	2b01      	cmp	r3, #1
 80040a4:	d007      	beq.n	80040b6 <checkAktifCalisma+0x56>
 80040a6:	4b59      	ldr	r3, [pc, #356]	@ (800420c <checkAktifCalisma+0x1ac>)
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d018      	beq.n	80040e0 <checkAktifCalisma+0x80>
 80040ae:	4b58      	ldr	r3, [pc, #352]	@ (8004210 <checkAktifCalisma+0x1b0>)
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	2b01      	cmp	r3, #1
 80040b4:	d114      	bne.n	80040e0 <checkAktifCalisma+0x80>
 80040b6:	4b57      	ldr	r3, [pc, #348]	@ (8004214 <checkAktifCalisma+0x1b4>)
 80040b8:	781b      	ldrb	r3, [r3, #0]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d010      	beq.n	80040e0 <checkAktifCalisma+0x80>
 80040be:	4b56      	ldr	r3, [pc, #344]	@ (8004218 <checkAktifCalisma+0x1b8>)
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d00c      	beq.n	80040e0 <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 80040c6:	2201      	movs	r2, #1
 80040c8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80040cc:	4853      	ldr	r0, [pc, #332]	@ (800421c <checkAktifCalisma+0x1bc>)
 80040ce:	f005 fec4 	bl	8009e5a <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 80040d2:	4b53      	ldr	r3, [pc, #332]	@ (8004220 <checkAktifCalisma+0x1c0>)
 80040d4:	2201      	movs	r2, #1
 80040d6:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 80040d8:	4b52      	ldr	r3, [pc, #328]	@ (8004224 <checkAktifCalisma+0x1c4>)
 80040da:	2201      	movs	r2, #1
 80040dc:	701a      	strb	r2, [r3, #0]
 80040de:	e008      	b.n	80040f2 <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80040e0:	2200      	movs	r2, #0
 80040e2:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80040e6:	484d      	ldr	r0, [pc, #308]	@ (800421c <checkAktifCalisma+0x1bc>)
 80040e8:	f005 feb7 	bl	8009e5a <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 80040ec:	4b4c      	ldr	r3, [pc, #304]	@ (8004220 <checkAktifCalisma+0x1c0>)
 80040ee:	2200      	movs	r2, #0
 80040f0:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 80040f2:	4b40      	ldr	r3, [pc, #256]	@ (80041f4 <checkAktifCalisma+0x194>)
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d160      	bne.n	80041bc <checkAktifCalisma+0x15c>
 80040fa:	4b46      	ldr	r3, [pc, #280]	@ (8004214 <checkAktifCalisma+0x1b4>)
 80040fc:	781b      	ldrb	r3, [r3, #0]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d05c      	beq.n	80041bc <checkAktifCalisma+0x15c>
 8004102:	4b45      	ldr	r3, [pc, #276]	@ (8004218 <checkAktifCalisma+0x1b8>)
 8004104:	781b      	ldrb	r3, [r3, #0]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d058      	beq.n	80041bc <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 800410a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800410e:	4843      	ldr	r0, [pc, #268]	@ (800421c <checkAktifCalisma+0x1bc>)
 8004110:	f005 fe8c 	bl	8009e2c <HAL_GPIO_ReadPin>
 8004114:	4603      	mov	r3, r0
 8004116:	2b00      	cmp	r3, #0
 8004118:	d003      	beq.n	8004122 <checkAktifCalisma+0xc2>
 800411a:	4b43      	ldr	r3, [pc, #268]	@ (8004228 <checkAktifCalisma+0x1c8>)
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d04c      	beq.n	80041bc <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004122:	2102      	movs	r1, #2
 8004124:	4841      	ldr	r0, [pc, #260]	@ (800422c <checkAktifCalisma+0x1cc>)
 8004126:	f005 fe81 	bl	8009e2c <HAL_GPIO_ReadPin>
 800412a:	4603      	mov	r3, r0
 800412c:	2b00      	cmp	r3, #0
 800412e:	d145      	bne.n	80041bc <checkAktifCalisma+0x15c>
				&& (basincVar)
 8004130:	4b3f      	ldr	r3, [pc, #252]	@ (8004230 <checkAktifCalisma+0x1d0>)
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d041      	beq.n	80041bc <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8004138:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800413c:	4837      	ldr	r0, [pc, #220]	@ (800421c <checkAktifCalisma+0x1bc>)
 800413e:	f005 fe75 	bl	8009e2c <HAL_GPIO_ReadPin>
 8004142:	4603      	mov	r3, r0
 8004144:	2b01      	cmp	r3, #1
 8004146:	d10e      	bne.n	8004166 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8004148:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800414c:	4833      	ldr	r0, [pc, #204]	@ (800421c <checkAktifCalisma+0x1bc>)
 800414e:	f005 fe6d 	bl	8009e2c <HAL_GPIO_ReadPin>
 8004152:	4603      	mov	r3, r0
 8004154:	2b01      	cmp	r3, #1
 8004156:	d106      	bne.n	8004166 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8004158:	2140      	movs	r1, #64	@ 0x40
 800415a:	4834      	ldr	r0, [pc, #208]	@ (800422c <checkAktifCalisma+0x1cc>)
 800415c:	f005 fe66 	bl	8009e2c <HAL_GPIO_ReadPin>
 8004160:	4603      	mov	r3, r0
 8004162:	2b01      	cmp	r3, #1
 8004164:	d003      	beq.n	800416e <checkAktifCalisma+0x10e>
 8004166:	4b24      	ldr	r3, [pc, #144]	@ (80041f8 <checkAktifCalisma+0x198>)
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d026      	beq.n	80041bc <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 800416e:	4b24      	ldr	r3, [pc, #144]	@ (8004200 <checkAktifCalisma+0x1a0>)
 8004170:	781b      	ldrb	r3, [r3, #0]
 8004172:	f083 0301 	eor.w	r3, r3, #1
 8004176:	b2db      	uxtb	r3, r3
 8004178:	2b00      	cmp	r3, #0
 800417a:	d01f      	beq.n	80041bc <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 800417c:	4b1f      	ldr	r3, [pc, #124]	@ (80041fc <checkAktifCalisma+0x19c>)
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	f083 0301 	eor.w	r3, r3, #1
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d018      	beq.n	80041bc <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 800418a:	4b20      	ldr	r3, [pc, #128]	@ (800420c <checkAktifCalisma+0x1ac>)
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	f083 0301 	eor.w	r3, r3, #1
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b00      	cmp	r3, #0
 8004196:	d011      	beq.n	80041bc <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 8004198:	4b26      	ldr	r3, [pc, #152]	@ (8004234 <checkAktifCalisma+0x1d4>)
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	f083 0301 	eor.w	r3, r3, #1
 80041a0:	b2db      	uxtb	r3, r3
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d00a      	beq.n	80041bc <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 80041a6:	4b24      	ldr	r3, [pc, #144]	@ (8004238 <checkAktifCalisma+0x1d8>)
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	f083 0301 	eor.w	r3, r3, #1
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d003      	beq.n	80041bc <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 80041b4:	4b10      	ldr	r3, [pc, #64]	@ (80041f8 <checkAktifCalisma+0x198>)
 80041b6:	2201      	movs	r2, #1
 80041b8:	701a      	strb	r2, [r3, #0]
 80041ba:	e002      	b.n	80041c2 <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 80041bc:	4b0e      	ldr	r3, [pc, #56]	@ (80041f8 <checkAktifCalisma+0x198>)
 80041be:	2200      	movs	r2, #0
 80041c0:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 80041c2:	4b0d      	ldr	r3, [pc, #52]	@ (80041f8 <checkAktifCalisma+0x198>)
 80041c4:	781b      	ldrb	r3, [r3, #0]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d03a      	beq.n	8004240 <checkAktifCalisma+0x1e0>
 80041ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80041ce:	4817      	ldr	r0, [pc, #92]	@ (800422c <checkAktifCalisma+0x1cc>)
 80041d0:	f005 fe2c 	bl	8009e2c <HAL_GPIO_ReadPin>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d132      	bne.n	8004240 <checkAktifCalisma+0x1e0>
 80041da:	4b18      	ldr	r3, [pc, #96]	@ (800423c <checkAktifCalisma+0x1dc>)
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d02e      	beq.n	8004240 <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 80041e2:	2201      	movs	r2, #1
 80041e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80041e8:	480c      	ldr	r0, [pc, #48]	@ (800421c <checkAktifCalisma+0x1bc>)
 80041ea:	f005 fe36 	bl	8009e5a <HAL_GPIO_WritePin>
 80041ee:	e02d      	b.n	800424c <checkAktifCalisma+0x1ec>
 80041f0:	200010be 	.word	0x200010be
 80041f4:	200010bd 	.word	0x200010bd
 80041f8:	200010d5 	.word	0x200010d5
 80041fc:	200010d6 	.word	0x200010d6
 8004200:	200010d8 	.word	0x200010d8
 8004204:	200010d0 	.word	0x200010d0
 8004208:	200010b3 	.word	0x200010b3
 800420c:	200010d7 	.word	0x200010d7
 8004210:	200010b2 	.word	0x200010b2
 8004214:	200010f2 	.word	0x200010f2
 8004218:	200010f3 	.word	0x200010f3
 800421c:	40010c00 	.word	0x40010c00
 8004220:	200010f4 	.word	0x200010f4
 8004224:	200010df 	.word	0x200010df
 8004228:	200010dc 	.word	0x200010dc
 800422c:	40011000 	.word	0x40011000
 8004230:	200010a3 	.word	0x200010a3
 8004234:	200010da 	.word	0x200010da
 8004238:	200010db 	.word	0x200010db
 800423c:	200010ae 	.word	0x200010ae
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8004240:	2200      	movs	r2, #0
 8004242:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004246:	4860      	ldr	r0, [pc, #384]	@ (80043c8 <checkAktifCalisma+0x368>)
 8004248:	f005 fe07 	bl	8009e5a <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 800424c:	4b5f      	ldr	r3, [pc, #380]	@ (80043cc <checkAktifCalisma+0x36c>)
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d013      	beq.n	800427c <checkAktifCalisma+0x21c>
 8004254:	4b5e      	ldr	r3, [pc, #376]	@ (80043d0 <checkAktifCalisma+0x370>)
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d007      	beq.n	800426c <checkAktifCalisma+0x20c>
 800425c:	4b5c      	ldr	r3, [pc, #368]	@ (80043d0 <checkAktifCalisma+0x370>)
 800425e:	781b      	ldrb	r3, [r3, #0]
 8004260:	2b02      	cmp	r3, #2
 8004262:	d003      	beq.n	800426c <checkAktifCalisma+0x20c>
 8004264:	4b5b      	ldr	r3, [pc, #364]	@ (80043d4 <checkAktifCalisma+0x374>)
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	2b01      	cmp	r3, #1
 800426a:	d107      	bne.n	800427c <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 800426c:	2201      	movs	r2, #1
 800426e:	2104      	movs	r1, #4
 8004270:	4855      	ldr	r0, [pc, #340]	@ (80043c8 <checkAktifCalisma+0x368>)
 8004272:	f005 fdf2 	bl	8009e5a <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 8004276:	4b58      	ldr	r3, [pc, #352]	@ (80043d8 <checkAktifCalisma+0x378>)
 8004278:	2201      	movs	r2, #1
 800427a:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 800427c:	4b56      	ldr	r3, [pc, #344]	@ (80043d8 <checkAktifCalisma+0x378>)
 800427e:	781b      	ldrb	r3, [r3, #0]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d02f      	beq.n	80042e4 <checkAktifCalisma+0x284>
 8004284:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004288:	484f      	ldr	r0, [pc, #316]	@ (80043c8 <checkAktifCalisma+0x368>)
 800428a:	f005 fdcf 	bl	8009e2c <HAL_GPIO_ReadPin>
 800428e:	4603      	mov	r3, r0
 8004290:	2b01      	cmp	r3, #1
 8004292:	d106      	bne.n	80042a2 <checkAktifCalisma+0x242>
 8004294:	4b51      	ldr	r3, [pc, #324]	@ (80043dc <checkAktifCalisma+0x37c>)
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	f083 0301 	eor.w	r3, r3, #1
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d106      	bne.n	80042b0 <checkAktifCalisma+0x250>
 80042a2:	2102      	movs	r1, #2
 80042a4:	484e      	ldr	r0, [pc, #312]	@ (80043e0 <checkAktifCalisma+0x380>)
 80042a6:	f005 fdc1 	bl	8009e2c <HAL_GPIO_ReadPin>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b01      	cmp	r3, #1
 80042ae:	d119      	bne.n	80042e4 <checkAktifCalisma+0x284>
 80042b0:	4b4c      	ldr	r3, [pc, #304]	@ (80043e4 <checkAktifCalisma+0x384>)
 80042b2:	781b      	ldrb	r3, [r3, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d015      	beq.n	80042e4 <checkAktifCalisma+0x284>
 80042b8:	4b4b      	ldr	r3, [pc, #300]	@ (80043e8 <checkAktifCalisma+0x388>)
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d011      	beq.n	80042e4 <checkAktifCalisma+0x284>
 80042c0:	4b4a      	ldr	r3, [pc, #296]	@ (80043ec <checkAktifCalisma+0x38c>)
 80042c2:	781b      	ldrb	r3, [r3, #0]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00d      	beq.n	80042e4 <checkAktifCalisma+0x284>
 80042c8:	4b49      	ldr	r3, [pc, #292]	@ (80043f0 <checkAktifCalisma+0x390>)
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	f083 0301 	eor.w	r3, r3, #1
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d006      	beq.n	80042e4 <checkAktifCalisma+0x284>
			timer2=millis;
 80042d6:	4b47      	ldr	r3, [pc, #284]	@ (80043f4 <checkAktifCalisma+0x394>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4a47      	ldr	r2, [pc, #284]	@ (80043f8 <checkAktifCalisma+0x398>)
 80042dc:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 80042de:	4b44      	ldr	r3, [pc, #272]	@ (80043f0 <checkAktifCalisma+0x390>)
 80042e0:	2201      	movs	r2, #1
 80042e2:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 80042e4:	4b43      	ldr	r3, [pc, #268]	@ (80043f4 <checkAktifCalisma+0x394>)
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	4b43      	ldr	r3, [pc, #268]	@ (80043f8 <checkAktifCalisma+0x398>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	4a43      	ldr	r2, [pc, #268]	@ (80043fc <checkAktifCalisma+0x39c>)
 80042f0:	7812      	ldrb	r2, [r2, #0]
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d303      	bcc.n	80042fe <checkAktifCalisma+0x29e>
 80042f6:	4b3e      	ldr	r3, [pc, #248]	@ (80043f0 <checkAktifCalisma+0x390>)
 80042f8:	781b      	ldrb	r3, [r3, #0]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d111      	bne.n	8004322 <checkAktifCalisma+0x2c2>
 80042fe:	4b39      	ldr	r3, [pc, #228]	@ (80043e4 <checkAktifCalisma+0x384>)
 8004300:	781b      	ldrb	r3, [r3, #0]
 8004302:	f083 0301 	eor.w	r3, r3, #1
 8004306:	b2db      	uxtb	r3, r3
 8004308:	2b00      	cmp	r3, #0
 800430a:	d10a      	bne.n	8004322 <checkAktifCalisma+0x2c2>
 800430c:	4b36      	ldr	r3, [pc, #216]	@ (80043e8 <checkAktifCalisma+0x388>)
 800430e:	781b      	ldrb	r3, [r3, #0]
 8004310:	f083 0301 	eor.w	r3, r3, #1
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d103      	bne.n	8004322 <checkAktifCalisma+0x2c2>
 800431a:	4b34      	ldr	r3, [pc, #208]	@ (80043ec <checkAktifCalisma+0x38c>)
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d10a      	bne.n	8004338 <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8004322:	2200      	movs	r2, #0
 8004324:	2104      	movs	r1, #4
 8004326:	4828      	ldr	r0, [pc, #160]	@ (80043c8 <checkAktifCalisma+0x368>)
 8004328:	f005 fd97 	bl	8009e5a <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 800432c:	4b2a      	ldr	r3, [pc, #168]	@ (80043d8 <checkAktifCalisma+0x378>)
 800432e:	2200      	movs	r2, #0
 8004330:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 8004332:	4b2f      	ldr	r3, [pc, #188]	@ (80043f0 <checkAktifCalisma+0x390>)
 8004334:	2200      	movs	r2, #0
 8004336:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 8004338:	4b31      	ldr	r3, [pc, #196]	@ (8004400 <checkAktifCalisma+0x3a0>)
 800433a:	781b      	ldrb	r3, [r3, #0]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d102      	bne.n	8004346 <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 8004340:	4b30      	ldr	r3, [pc, #192]	@ (8004404 <checkAktifCalisma+0x3a4>)
 8004342:	2201      	movs	r2, #1
 8004344:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8004346:	4b2e      	ldr	r3, [pc, #184]	@ (8004400 <checkAktifCalisma+0x3a0>)
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d116      	bne.n	800437c <checkAktifCalisma+0x31c>
 800434e:	4b2e      	ldr	r3, [pc, #184]	@ (8004408 <checkAktifCalisma+0x3a8>)
 8004350:	781b      	ldrb	r3, [r3, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d112      	bne.n	800437c <checkAktifCalisma+0x31c>
 8004356:	2101      	movs	r1, #1
 8004358:	4821      	ldr	r0, [pc, #132]	@ (80043e0 <checkAktifCalisma+0x380>)
 800435a:	f005 fd67 	bl	8009e2c <HAL_GPIO_ReadPin>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d10b      	bne.n	800437c <checkAktifCalisma+0x31c>
 8004364:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004368:	4817      	ldr	r0, [pc, #92]	@ (80043c8 <checkAktifCalisma+0x368>)
 800436a:	f005 fd5f 	bl	8009e2c <HAL_GPIO_ReadPin>
 800436e:	4603      	mov	r3, r0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d103      	bne.n	800437c <checkAktifCalisma+0x31c>
			cerceveVar=1;
 8004374:	4b23      	ldr	r3, [pc, #140]	@ (8004404 <checkAktifCalisma+0x3a4>)
 8004376:	2201      	movs	r2, #1
 8004378:	701a      	strb	r2, [r3, #0]
 800437a:	e011      	b.n	80043a0 <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 800437c:	4b20      	ldr	r3, [pc, #128]	@ (8004400 <checkAktifCalisma+0x3a0>)
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d10d      	bne.n	80043a0 <checkAktifCalisma+0x340>
 8004384:	2101      	movs	r1, #1
 8004386:	4816      	ldr	r0, [pc, #88]	@ (80043e0 <checkAktifCalisma+0x380>)
 8004388:	f005 fd50 	bl	8009e2c <HAL_GPIO_ReadPin>
 800438c:	4603      	mov	r3, r0
 800438e:	2b01      	cmp	r3, #1
 8004390:	d106      	bne.n	80043a0 <checkAktifCalisma+0x340>
 8004392:	4b1d      	ldr	r3, [pc, #116]	@ (8004408 <checkAktifCalisma+0x3a8>)
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d102      	bne.n	80043a0 <checkAktifCalisma+0x340>
			cerceveVar=0;
 800439a:	4b1a      	ldr	r3, [pc, #104]	@ (8004404 <checkAktifCalisma+0x3a4>)
 800439c:	2200      	movs	r2, #0
 800439e:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 80043a0:	4b17      	ldr	r3, [pc, #92]	@ (8004400 <checkAktifCalisma+0x3a0>)
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	2b01      	cmp	r3, #1
 80043a6:	d134      	bne.n	8004412 <checkAktifCalisma+0x3b2>
 80043a8:	4b17      	ldr	r3, [pc, #92]	@ (8004408 <checkAktifCalisma+0x3a8>)
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d130      	bne.n	8004412 <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 80043b0:	2101      	movs	r1, #1
 80043b2:	480b      	ldr	r0, [pc, #44]	@ (80043e0 <checkAktifCalisma+0x380>)
 80043b4:	f005 fd3a 	bl	8009e2c <HAL_GPIO_ReadPin>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d126      	bne.n	800440c <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 80043be:	4b11      	ldr	r3, [pc, #68]	@ (8004404 <checkAktifCalisma+0x3a4>)
 80043c0:	2201      	movs	r2, #1
 80043c2:	701a      	strb	r2, [r3, #0]
 80043c4:	e025      	b.n	8004412 <checkAktifCalisma+0x3b2>
 80043c6:	bf00      	nop
 80043c8:	40010c00 	.word	0x40010c00
 80043cc:	200010d5 	.word	0x200010d5
 80043d0:	200010af 	.word	0x200010af
 80043d4:	200010b3 	.word	0x200010b3
 80043d8:	200010d9 	.word	0x200010d9
 80043dc:	200010dc 	.word	0x200010dc
 80043e0:	40011000 	.word	0x40011000
 80043e4:	200010f2 	.word	0x200010f2
 80043e8:	200010f3 	.word	0x200010f3
 80043ec:	200010a3 	.word	0x200010a3
 80043f0:	200010d1 	.word	0x200010d1
 80043f4:	20001078 	.word	0x20001078
 80043f8:	20001084 	.word	0x20001084
 80043fc:	200010b4 	.word	0x200010b4
 8004400:	200010a4 	.word	0x200010a4
 8004404:	200010f7 	.word	0x200010f7
 8004408:	200010a1 	.word	0x200010a1
			} else {
				cerceveVar=0;
 800440c:	4b7f      	ldr	r3, [pc, #508]	@ (800460c <checkAktifCalisma+0x5ac>)
 800440e:	2200      	movs	r2, #0
 8004410:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8004412:	4b7f      	ldr	r3, [pc, #508]	@ (8004610 <checkAktifCalisma+0x5b0>)
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d17c      	bne.n	8004514 <checkAktifCalisma+0x4b4>
 800441a:	4b7e      	ldr	r3, [pc, #504]	@ (8004614 <checkAktifCalisma+0x5b4>)
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d078      	beq.n	8004514 <checkAktifCalisma+0x4b4>
 8004422:	4b7d      	ldr	r3, [pc, #500]	@ (8004618 <checkAktifCalisma+0x5b8>)
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d074      	beq.n	8004514 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 800442a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800442e:	487b      	ldr	r0, [pc, #492]	@ (800461c <checkAktifCalisma+0x5bc>)
 8004430:	f005 fcfc 	bl	8009e2c <HAL_GPIO_ReadPin>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d003      	beq.n	8004442 <checkAktifCalisma+0x3e2>
 800443a:	4b79      	ldr	r3, [pc, #484]	@ (8004620 <checkAktifCalisma+0x5c0>)
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d068      	beq.n	8004514 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 8004442:	4b72      	ldr	r3, [pc, #456]	@ (800460c <checkAktifCalisma+0x5ac>)
 8004444:	781b      	ldrb	r3, [r3, #0]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d064      	beq.n	8004514 <checkAktifCalisma+0x4b4>
 800444a:	4b76      	ldr	r3, [pc, #472]	@ (8004624 <checkAktifCalisma+0x5c4>)
 800444c:	781b      	ldrb	r3, [r3, #0]
 800444e:	f083 0301 	eor.w	r3, r3, #1
 8004452:	b2db      	uxtb	r3, r3
 8004454:	2b00      	cmp	r3, #0
 8004456:	d05d      	beq.n	8004514 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8004458:	2104      	movs	r1, #4
 800445a:	4873      	ldr	r0, [pc, #460]	@ (8004628 <checkAktifCalisma+0x5c8>)
 800445c:	f005 fce6 	bl	8009e2c <HAL_GPIO_ReadPin>
 8004460:	4603      	mov	r3, r0
 8004462:	2b00      	cmp	r3, #0
 8004464:	d003      	beq.n	800446e <checkAktifCalisma+0x40e>
 8004466:	4b71      	ldr	r3, [pc, #452]	@ (800462c <checkAktifCalisma+0x5cc>)
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d152      	bne.n	8004514 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800446e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004472:	486a      	ldr	r0, [pc, #424]	@ (800461c <checkAktifCalisma+0x5bc>)
 8004474:	f005 fcda 	bl	8009e2c <HAL_GPIO_ReadPin>
 8004478:	4603      	mov	r3, r0
 800447a:	2b01      	cmp	r3, #1
 800447c:	d10e      	bne.n	800449c <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 800447e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004482:	4866      	ldr	r0, [pc, #408]	@ (800461c <checkAktifCalisma+0x5bc>)
 8004484:	f005 fcd2 	bl	8009e2c <HAL_GPIO_ReadPin>
 8004488:	4603      	mov	r3, r0
 800448a:	2b01      	cmp	r3, #1
 800448c:	d106      	bne.n	800449c <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 800448e:	2140      	movs	r1, #64	@ 0x40
 8004490:	4865      	ldr	r0, [pc, #404]	@ (8004628 <checkAktifCalisma+0x5c8>)
 8004492:	f005 fccb 	bl	8009e2c <HAL_GPIO_ReadPin>
 8004496:	4603      	mov	r3, r0
 8004498:	2b01      	cmp	r3, #1
 800449a:	d003      	beq.n	80044a4 <checkAktifCalisma+0x444>
 800449c:	4b64      	ldr	r3, [pc, #400]	@ (8004630 <checkAktifCalisma+0x5d0>)
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d037      	beq.n	8004514 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 80044a4:	4b63      	ldr	r3, [pc, #396]	@ (8004634 <checkAktifCalisma+0x5d4>)
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	f083 0301 	eor.w	r3, r3, #1
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d030      	beq.n	8004514 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 80044b2:	4b61      	ldr	r3, [pc, #388]	@ (8004638 <checkAktifCalisma+0x5d8>)
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	f083 0301 	eor.w	r3, r3, #1
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d029      	beq.n	8004514 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 80044c0:	4b5e      	ldr	r3, [pc, #376]	@ (800463c <checkAktifCalisma+0x5dc>)
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	f083 0301 	eor.w	r3, r3, #1
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d022      	beq.n	8004514 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 80044ce:	4b5c      	ldr	r3, [pc, #368]	@ (8004640 <checkAktifCalisma+0x5e0>)
 80044d0:	781b      	ldrb	r3, [r3, #0]
 80044d2:	f083 0301 	eor.w	r3, r3, #1
 80044d6:	b2db      	uxtb	r3, r3
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d01b      	beq.n	8004514 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 80044dc:	4b59      	ldr	r3, [pc, #356]	@ (8004644 <checkAktifCalisma+0x5e4>)
 80044de:	781b      	ldrb	r3, [r3, #0]
 80044e0:	f083 0301 	eor.w	r3, r3, #1
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d014      	beq.n	8004514 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 80044ea:	4b57      	ldr	r3, [pc, #348]	@ (8004648 <checkAktifCalisma+0x5e8>)
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	f083 0301 	eor.w	r3, r3, #1
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00d      	beq.n	8004514 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80044f8:	2201      	movs	r2, #1
 80044fa:	2102      	movs	r1, #2
 80044fc:	4847      	ldr	r0, [pc, #284]	@ (800461c <checkAktifCalisma+0x5bc>)
 80044fe:	f005 fcac 	bl	8009e5a <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 8004502:	4b4b      	ldr	r3, [pc, #300]	@ (8004630 <checkAktifCalisma+0x5d0>)
 8004504:	2201      	movs	r2, #1
 8004506:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 8004508:	4b50      	ldr	r3, [pc, #320]	@ (800464c <checkAktifCalisma+0x5ec>)
 800450a:	2201      	movs	r2, #1
 800450c:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 800450e:	4b50      	ldr	r3, [pc, #320]	@ (8004650 <checkAktifCalisma+0x5f0>)
 8004510:	2201      	movs	r2, #1
 8004512:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8004514:	4b46      	ldr	r3, [pc, #280]	@ (8004630 <checkAktifCalisma+0x5d0>)
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d033      	beq.n	8004584 <checkAktifCalisma+0x524>
 800451c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004520:	483e      	ldr	r0, [pc, #248]	@ (800461c <checkAktifCalisma+0x5bc>)
 8004522:	f005 fc83 	bl	8009e2c <HAL_GPIO_ReadPin>
 8004526:	4603      	mov	r3, r0
 8004528:	2b01      	cmp	r3, #1
 800452a:	d106      	bne.n	800453a <checkAktifCalisma+0x4da>
 800452c:	4b3c      	ldr	r3, [pc, #240]	@ (8004620 <checkAktifCalisma+0x5c0>)
 800452e:	781b      	ldrb	r3, [r3, #0]
 8004530:	f083 0301 	eor.w	r3, r3, #1
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10a      	bne.n	8004550 <checkAktifCalisma+0x4f0>
 800453a:	2104      	movs	r1, #4
 800453c:	483a      	ldr	r0, [pc, #232]	@ (8004628 <checkAktifCalisma+0x5c8>)
 800453e:	f005 fc75 	bl	8009e2c <HAL_GPIO_ReadPin>
 8004542:	4603      	mov	r3, r0
 8004544:	2b01      	cmp	r3, #1
 8004546:	d11d      	bne.n	8004584 <checkAktifCalisma+0x524>
 8004548:	4b38      	ldr	r3, [pc, #224]	@ (800462c <checkAktifCalisma+0x5cc>)
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d019      	beq.n	8004584 <checkAktifCalisma+0x524>
 8004550:	4b30      	ldr	r3, [pc, #192]	@ (8004614 <checkAktifCalisma+0x5b4>)
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	2b00      	cmp	r3, #0
 8004556:	d015      	beq.n	8004584 <checkAktifCalisma+0x524>
 8004558:	4b2f      	ldr	r3, [pc, #188]	@ (8004618 <checkAktifCalisma+0x5b8>)
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d011      	beq.n	8004584 <checkAktifCalisma+0x524>
 8004560:	4b2a      	ldr	r3, [pc, #168]	@ (800460c <checkAktifCalisma+0x5ac>)
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d00d      	beq.n	8004584 <checkAktifCalisma+0x524>
 8004568:	4b3a      	ldr	r3, [pc, #232]	@ (8004654 <checkAktifCalisma+0x5f4>)
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	f083 0301 	eor.w	r3, r3, #1
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d006      	beq.n	8004584 <checkAktifCalisma+0x524>
			timer2=millis;
 8004576:	4b38      	ldr	r3, [pc, #224]	@ (8004658 <checkAktifCalisma+0x5f8>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4a38      	ldr	r2, [pc, #224]	@ (800465c <checkAktifCalisma+0x5fc>)
 800457c:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 800457e:	4b35      	ldr	r3, [pc, #212]	@ (8004654 <checkAktifCalisma+0x5f4>)
 8004580:	2201      	movs	r2, #1
 8004582:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8004584:	4b34      	ldr	r3, [pc, #208]	@ (8004658 <checkAktifCalisma+0x5f8>)
 8004586:	681a      	ldr	r2, [r3, #0]
 8004588:	4b34      	ldr	r3, [pc, #208]	@ (800465c <checkAktifCalisma+0x5fc>)
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	1ad3      	subs	r3, r2, r3
 800458e:	4a34      	ldr	r2, [pc, #208]	@ (8004660 <checkAktifCalisma+0x600>)
 8004590:	7812      	ldrb	r2, [r2, #0]
 8004592:	4293      	cmp	r3, r2
 8004594:	d303      	bcc.n	800459e <checkAktifCalisma+0x53e>
 8004596:	4b2f      	ldr	r3, [pc, #188]	@ (8004654 <checkAktifCalisma+0x5f4>)
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d114      	bne.n	80045c8 <checkAktifCalisma+0x568>
 800459e:	4b1d      	ldr	r3, [pc, #116]	@ (8004614 <checkAktifCalisma+0x5b4>)
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	f083 0301 	eor.w	r3, r3, #1
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d10d      	bne.n	80045c8 <checkAktifCalisma+0x568>
 80045ac:	4b1a      	ldr	r3, [pc, #104]	@ (8004618 <checkAktifCalisma+0x5b8>)
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	f083 0301 	eor.w	r3, r3, #1
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d106      	bne.n	80045c8 <checkAktifCalisma+0x568>
 80045ba:	4b14      	ldr	r3, [pc, #80]	@ (800460c <checkAktifCalisma+0x5ac>)
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	f083 0301 	eor.w	r3, r3, #1
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d00a      	beq.n	80045de <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80045c8:	2200      	movs	r2, #0
 80045ca:	2102      	movs	r1, #2
 80045cc:	4813      	ldr	r0, [pc, #76]	@ (800461c <checkAktifCalisma+0x5bc>)
 80045ce:	f005 fc44 	bl	8009e5a <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 80045d2:	4b17      	ldr	r3, [pc, #92]	@ (8004630 <checkAktifCalisma+0x5d0>)
 80045d4:	2200      	movs	r2, #0
 80045d6:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 80045d8:	4b1e      	ldr	r3, [pc, #120]	@ (8004654 <checkAktifCalisma+0x5f4>)
 80045da:	2200      	movs	r2, #0
 80045dc:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 80045de:	4b14      	ldr	r3, [pc, #80]	@ (8004630 <checkAktifCalisma+0x5d0>)
 80045e0:	781b      	ldrb	r3, [r3, #0]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d040      	beq.n	8004668 <checkAktifCalisma+0x608>
 80045e6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80045ea:	480f      	ldr	r0, [pc, #60]	@ (8004628 <checkAktifCalisma+0x5c8>)
 80045ec:	f005 fc1e 	bl	8009e2c <HAL_GPIO_ReadPin>
 80045f0:	4603      	mov	r3, r0
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d138      	bne.n	8004668 <checkAktifCalisma+0x608>
 80045f6:	4b1b      	ldr	r3, [pc, #108]	@ (8004664 <checkAktifCalisma+0x604>)
 80045f8:	781b      	ldrb	r3, [r3, #0]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d034      	beq.n	8004668 <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80045fe:	2201      	movs	r2, #1
 8004600:	2101      	movs	r1, #1
 8004602:	4806      	ldr	r0, [pc, #24]	@ (800461c <checkAktifCalisma+0x5bc>)
 8004604:	f005 fc29 	bl	8009e5a <HAL_GPIO_WritePin>
 8004608:	e033      	b.n	8004672 <checkAktifCalisma+0x612>
 800460a:	bf00      	nop
 800460c:	200010f7 	.word	0x200010f7
 8004610:	200010bd 	.word	0x200010bd
 8004614:	200010f2 	.word	0x200010f2
 8004618:	200010f3 	.word	0x200010f3
 800461c:	40010c00 	.word	0x40010c00
 8004620:	200010dd 	.word	0x200010dd
 8004624:	200010f1 	.word	0x200010f1
 8004628:	40011000 	.word	0x40011000
 800462c:	200010a6 	.word	0x200010a6
 8004630:	200010d8 	.word	0x200010d8
 8004634:	200010d5 	.word	0x200010d5
 8004638:	200010d9 	.word	0x200010d9
 800463c:	200010d6 	.word	0x200010d6
 8004640:	200010d7 	.word	0x200010d7
 8004644:	200010da 	.word	0x200010da
 8004648:	200010db 	.word	0x200010db
 800464c:	200010e0 	.word	0x200010e0
 8004650:	20001101 	.word	0x20001101
 8004654:	200010d0 	.word	0x200010d0
 8004658:	20001078 	.word	0x20001078
 800465c:	20001084 	.word	0x20001084
 8004660:	200010b5 	.word	0x200010b5
 8004664:	200010a5 	.word	0x200010a5
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8004668:	2200      	movs	r2, #0
 800466a:	2101      	movs	r1, #1
 800466c:	4836      	ldr	r0, [pc, #216]	@ (8004748 <checkAktifCalisma+0x6e8>)
 800466e:	f005 fbf4 	bl	8009e5a <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 8004672:	4b36      	ldr	r3, [pc, #216]	@ (800474c <checkAktifCalisma+0x6ec>)
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	2b00      	cmp	r3, #0
 8004678:	f040 8080 	bne.w	800477c <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 800467c:	4b34      	ldr	r3, [pc, #208]	@ (8004750 <checkAktifCalisma+0x6f0>)
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d003      	beq.n	800468c <checkAktifCalisma+0x62c>
 8004684:	4b32      	ldr	r3, [pc, #200]	@ (8004750 <checkAktifCalisma+0x6f0>)
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	2b02      	cmp	r3, #2
 800468a:	d177      	bne.n	800477c <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 800468c:	4b31      	ldr	r3, [pc, #196]	@ (8004754 <checkAktifCalisma+0x6f4>)
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d073      	beq.n	800477c <checkAktifCalisma+0x71c>
 8004694:	4b30      	ldr	r3, [pc, #192]	@ (8004758 <checkAktifCalisma+0x6f8>)
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d06f      	beq.n	800477c <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 800469c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80046a0:	4829      	ldr	r0, [pc, #164]	@ (8004748 <checkAktifCalisma+0x6e8>)
 80046a2:	f005 fbc3 	bl	8009e2c <HAL_GPIO_ReadPin>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d167      	bne.n	800477c <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 80046ac:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80046b0:	482a      	ldr	r0, [pc, #168]	@ (800475c <checkAktifCalisma+0x6fc>)
 80046b2:	f005 fbbb 	bl	8009e2c <HAL_GPIO_ReadPin>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d003      	beq.n	80046c4 <checkAktifCalisma+0x664>
 80046bc:	4b28      	ldr	r3, [pc, #160]	@ (8004760 <checkAktifCalisma+0x700>)
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d15b      	bne.n	800477c <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 80046c4:	2140      	movs	r1, #64	@ 0x40
 80046c6:	4825      	ldr	r0, [pc, #148]	@ (800475c <checkAktifCalisma+0x6fc>)
 80046c8:	f005 fbb0 	bl	8009e2c <HAL_GPIO_ReadPin>
 80046cc:	4603      	mov	r3, r0
 80046ce:	2b01      	cmp	r3, #1
 80046d0:	d10f      	bne.n	80046f2 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80046d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80046d6:	481c      	ldr	r0, [pc, #112]	@ (8004748 <checkAktifCalisma+0x6e8>)
 80046d8:	f005 fba8 	bl	8009e2c <HAL_GPIO_ReadPin>
 80046dc:	4603      	mov	r3, r0
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d107      	bne.n	80046f2 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 80046e2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80046e6:	4818      	ldr	r0, [pc, #96]	@ (8004748 <checkAktifCalisma+0x6e8>)
 80046e8:	f005 fba0 	bl	8009e2c <HAL_GPIO_ReadPin>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d003      	beq.n	80046fa <checkAktifCalisma+0x69a>
 80046f2:	4b1c      	ldr	r3, [pc, #112]	@ (8004764 <checkAktifCalisma+0x704>)
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d040      	beq.n	800477c <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 80046fa:	4b1b      	ldr	r3, [pc, #108]	@ (8004768 <checkAktifCalisma+0x708>)
 80046fc:	781b      	ldrb	r3, [r3, #0]
 80046fe:	f083 0301 	eor.w	r3, r3, #1
 8004702:	b2db      	uxtb	r3, r3
 8004704:	2b00      	cmp	r3, #0
 8004706:	d039      	beq.n	800477c <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 8004708:	4b18      	ldr	r3, [pc, #96]	@ (800476c <checkAktifCalisma+0x70c>)
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	f083 0301 	eor.w	r3, r3, #1
 8004710:	b2db      	uxtb	r3, r3
 8004712:	2b00      	cmp	r3, #0
 8004714:	d032      	beq.n	800477c <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 8004716:	4b16      	ldr	r3, [pc, #88]	@ (8004770 <checkAktifCalisma+0x710>)
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	f083 0301 	eor.w	r3, r3, #1
 800471e:	b2db      	uxtb	r3, r3
 8004720:	2b00      	cmp	r3, #0
 8004722:	d02b      	beq.n	800477c <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 8004724:	4b13      	ldr	r3, [pc, #76]	@ (8004774 <checkAktifCalisma+0x714>)
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	f083 0301 	eor.w	r3, r3, #1
 800472c:	b2db      	uxtb	r3, r3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d024      	beq.n	800477c <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 8004732:	4b11      	ldr	r3, [pc, #68]	@ (8004778 <checkAktifCalisma+0x718>)
 8004734:	781b      	ldrb	r3, [r3, #0]
 8004736:	f083 0301 	eor.w	r3, r3, #1
 800473a:	b2db      	uxtb	r3, r3
 800473c:	2b00      	cmp	r3, #0
 800473e:	d01d      	beq.n	800477c <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 8004740:	4b08      	ldr	r3, [pc, #32]	@ (8004764 <checkAktifCalisma+0x704>)
 8004742:	2201      	movs	r2, #1
 8004744:	701a      	strb	r2, [r3, #0]
 8004746:	e01c      	b.n	8004782 <checkAktifCalisma+0x722>
 8004748:	40010c00 	.word	0x40010c00
 800474c:	200010bd 	.word	0x200010bd
 8004750:	200010af 	.word	0x200010af
 8004754:	200010f2 	.word	0x200010f2
 8004758:	200010f3 	.word	0x200010f3
 800475c:	40011000 	.word	0x40011000
 8004760:	200010b0 	.word	0x200010b0
 8004764:	200010d6 	.word	0x200010d6
 8004768:	200010d5 	.word	0x200010d5
 800476c:	200010d9 	.word	0x200010d9
 8004770:	200010d8 	.word	0x200010d8
 8004774:	200010d7 	.word	0x200010d7
 8004778:	200010db 	.word	0x200010db
		} else {
			devmotoryukaricalisiyor=0;
 800477c:	4b64      	ldr	r3, [pc, #400]	@ (8004910 <checkAktifCalisma+0x8b0>)
 800477e:	2200      	movs	r2, #0
 8004780:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 8004782:	4b63      	ldr	r3, [pc, #396]	@ (8004910 <checkAktifCalisma+0x8b0>)
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d007      	beq.n	800479a <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 800478a:	2201      	movs	r2, #1
 800478c:	2120      	movs	r1, #32
 800478e:	4861      	ldr	r0, [pc, #388]	@ (8004914 <checkAktifCalisma+0x8b4>)
 8004790:	f005 fb63 	bl	8009e5a <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 8004794:	4b60      	ldr	r3, [pc, #384]	@ (8004918 <checkAktifCalisma+0x8b8>)
 8004796:	2201      	movs	r2, #1
 8004798:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 800479a:	4b5f      	ldr	r3, [pc, #380]	@ (8004918 <checkAktifCalisma+0x8b8>)
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d025      	beq.n	80047ee <checkAktifCalisma+0x78e>
 80047a2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80047a6:	485d      	ldr	r0, [pc, #372]	@ (800491c <checkAktifCalisma+0x8bc>)
 80047a8:	f005 fb40 	bl	8009e2c <HAL_GPIO_ReadPin>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d007      	beq.n	80047c2 <checkAktifCalisma+0x762>
 80047b2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80047b6:	4857      	ldr	r0, [pc, #348]	@ (8004914 <checkAktifCalisma+0x8b4>)
 80047b8:	f005 fb38 	bl	8009e2c <HAL_GPIO_ReadPin>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b01      	cmp	r3, #1
 80047c0:	d115      	bne.n	80047ee <checkAktifCalisma+0x78e>
 80047c2:	4b57      	ldr	r3, [pc, #348]	@ (8004920 <checkAktifCalisma+0x8c0>)
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d011      	beq.n	80047ee <checkAktifCalisma+0x78e>
 80047ca:	4b56      	ldr	r3, [pc, #344]	@ (8004924 <checkAktifCalisma+0x8c4>)
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00d      	beq.n	80047ee <checkAktifCalisma+0x78e>
 80047d2:	4b55      	ldr	r3, [pc, #340]	@ (8004928 <checkAktifCalisma+0x8c8>)
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	f083 0301 	eor.w	r3, r3, #1
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d006      	beq.n	80047ee <checkAktifCalisma+0x78e>
			timer2=millis;
 80047e0:	4b52      	ldr	r3, [pc, #328]	@ (800492c <checkAktifCalisma+0x8cc>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a52      	ldr	r2, [pc, #328]	@ (8004930 <checkAktifCalisma+0x8d0>)
 80047e6:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 80047e8:	4b4f      	ldr	r3, [pc, #316]	@ (8004928 <checkAktifCalisma+0x8c8>)
 80047ea:	2201      	movs	r2, #1
 80047ec:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80047ee:	4b4f      	ldr	r3, [pc, #316]	@ (800492c <checkAktifCalisma+0x8cc>)
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	4b4f      	ldr	r3, [pc, #316]	@ (8004930 <checkAktifCalisma+0x8d0>)
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	4a4e      	ldr	r2, [pc, #312]	@ (8004934 <checkAktifCalisma+0x8d4>)
 80047fa:	7812      	ldrb	r2, [r2, #0]
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d303      	bcc.n	8004808 <checkAktifCalisma+0x7a8>
 8004800:	4b49      	ldr	r3, [pc, #292]	@ (8004928 <checkAktifCalisma+0x8c8>)
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d10d      	bne.n	8004824 <checkAktifCalisma+0x7c4>
 8004808:	4b45      	ldr	r3, [pc, #276]	@ (8004920 <checkAktifCalisma+0x8c0>)
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	f083 0301 	eor.w	r3, r3, #1
 8004810:	b2db      	uxtb	r3, r3
 8004812:	2b00      	cmp	r3, #0
 8004814:	d106      	bne.n	8004824 <checkAktifCalisma+0x7c4>
 8004816:	4b43      	ldr	r3, [pc, #268]	@ (8004924 <checkAktifCalisma+0x8c4>)
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	f083 0301 	eor.w	r3, r3, #1
 800481e:	b2db      	uxtb	r3, r3
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00a      	beq.n	800483a <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8004824:	2200      	movs	r2, #0
 8004826:	2120      	movs	r1, #32
 8004828:	483a      	ldr	r0, [pc, #232]	@ (8004914 <checkAktifCalisma+0x8b4>)
 800482a:	f005 fb16 	bl	8009e5a <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 800482e:	4b3a      	ldr	r3, [pc, #232]	@ (8004918 <checkAktifCalisma+0x8b8>)
 8004830:	2200      	movs	r2, #0
 8004832:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 8004834:	4b3c      	ldr	r3, [pc, #240]	@ (8004928 <checkAktifCalisma+0x8c8>)
 8004836:	2200      	movs	r2, #0
 8004838:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 800483a:	4b3f      	ldr	r3, [pc, #252]	@ (8004938 <checkAktifCalisma+0x8d8>)
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	2b00      	cmp	r3, #0
 8004840:	f040 8088 	bne.w	8004954 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8004844:	4b3d      	ldr	r3, [pc, #244]	@ (800493c <checkAktifCalisma+0x8dc>)
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	2b01      	cmp	r3, #1
 800484a:	d003      	beq.n	8004854 <checkAktifCalisma+0x7f4>
 800484c:	4b3b      	ldr	r3, [pc, #236]	@ (800493c <checkAktifCalisma+0x8dc>)
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	2b02      	cmp	r3, #2
 8004852:	d17f      	bne.n	8004954 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 8004854:	4b32      	ldr	r3, [pc, #200]	@ (8004920 <checkAktifCalisma+0x8c0>)
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d07b      	beq.n	8004954 <checkAktifCalisma+0x8f4>
 800485c:	4b31      	ldr	r3, [pc, #196]	@ (8004924 <checkAktifCalisma+0x8c4>)
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d077      	beq.n	8004954 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8004864:	2140      	movs	r1, #64	@ 0x40
 8004866:	482b      	ldr	r0, [pc, #172]	@ (8004914 <checkAktifCalisma+0x8b4>)
 8004868:	f005 fae0 	bl	8009e2c <HAL_GPIO_ReadPin>
 800486c:	4603      	mov	r3, r0
 800486e:	2b00      	cmp	r3, #0
 8004870:	d170      	bne.n	8004954 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8004872:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004876:	4827      	ldr	r0, [pc, #156]	@ (8004914 <checkAktifCalisma+0x8b4>)
 8004878:	f005 fad8 	bl	8009e2c <HAL_GPIO_ReadPin>
 800487c:	4603      	mov	r3, r0
 800487e:	2b00      	cmp	r3, #0
 8004880:	d003      	beq.n	800488a <checkAktifCalisma+0x82a>
 8004882:	4b2f      	ldr	r3, [pc, #188]	@ (8004940 <checkAktifCalisma+0x8e0>)
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d164      	bne.n	8004954 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 800488a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800488e:	4823      	ldr	r0, [pc, #140]	@ (800491c <checkAktifCalisma+0x8bc>)
 8004890:	f005 facc 	bl	8009e2c <HAL_GPIO_ReadPin>
 8004894:	4603      	mov	r3, r0
 8004896:	2b01      	cmp	r3, #1
 8004898:	d10f      	bne.n	80048ba <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800489a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800489e:	481f      	ldr	r0, [pc, #124]	@ (800491c <checkAktifCalisma+0x8bc>)
 80048a0:	f005 fac4 	bl	8009e2c <HAL_GPIO_ReadPin>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d107      	bne.n	80048ba <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 80048aa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80048ae:	481b      	ldr	r0, [pc, #108]	@ (800491c <checkAktifCalisma+0x8bc>)
 80048b0:	f005 fabc 	bl	8009e2c <HAL_GPIO_ReadPin>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d003      	beq.n	80048c2 <checkAktifCalisma+0x862>
 80048ba:	4b22      	ldr	r3, [pc, #136]	@ (8004944 <checkAktifCalisma+0x8e4>)
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d048      	beq.n	8004954 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 80048c2:	4b21      	ldr	r3, [pc, #132]	@ (8004948 <checkAktifCalisma+0x8e8>)
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	f083 0301 	eor.w	r3, r3, #1
 80048ca:	b2db      	uxtb	r3, r3
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d041      	beq.n	8004954 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 80048d0:	4b1e      	ldr	r3, [pc, #120]	@ (800494c <checkAktifCalisma+0x8ec>)
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	f083 0301 	eor.w	r3, r3, #1
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d03a      	beq.n	8004954 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 80048de:	4b1c      	ldr	r3, [pc, #112]	@ (8004950 <checkAktifCalisma+0x8f0>)
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	f083 0301 	eor.w	r3, r3, #1
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d033      	beq.n	8004954 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 80048ec:	4b0a      	ldr	r3, [pc, #40]	@ (8004918 <checkAktifCalisma+0x8b8>)
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	f083 0301 	eor.w	r3, r3, #1
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d02c      	beq.n	8004954 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 80048fa:	4b05      	ldr	r3, [pc, #20]	@ (8004910 <checkAktifCalisma+0x8b0>)
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	f083 0301 	eor.w	r3, r3, #1
 8004902:	b2db      	uxtb	r3, r3
 8004904:	2b00      	cmp	r3, #0
 8004906:	d025      	beq.n	8004954 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 8004908:	4b0e      	ldr	r3, [pc, #56]	@ (8004944 <checkAktifCalisma+0x8e4>)
 800490a:	2201      	movs	r2, #1
 800490c:	701a      	strb	r2, [r3, #0]
 800490e:	e024      	b.n	800495a <checkAktifCalisma+0x8fa>
 8004910:	200010d6 	.word	0x200010d6
 8004914:	40011000 	.word	0x40011000
 8004918:	200010da 	.word	0x200010da
 800491c:	40010c00 	.word	0x40010c00
 8004920:	200010f2 	.word	0x200010f2
 8004924:	200010f3 	.word	0x200010f3
 8004928:	200010d2 	.word	0x200010d2
 800492c:	20001078 	.word	0x20001078
 8004930:	20001084 	.word	0x20001084
 8004934:	200010b6 	.word	0x200010b6
 8004938:	200010bd 	.word	0x200010bd
 800493c:	200010af 	.word	0x200010af
 8004940:	200010b1 	.word	0x200010b1
 8004944:	200010d7 	.word	0x200010d7
 8004948:	200010d5 	.word	0x200010d5
 800494c:	200010d9 	.word	0x200010d9
 8004950:	200010d8 	.word	0x200010d8
		} else {
			devmotorasagicalisiyor=0;
 8004954:	4b96      	ldr	r3, [pc, #600]	@ (8004bb0 <checkAktifCalisma+0xb50>)
 8004956:	2200      	movs	r2, #0
 8004958:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 800495a:	4b95      	ldr	r3, [pc, #596]	@ (8004bb0 <checkAktifCalisma+0xb50>)
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d007      	beq.n	8004972 <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8004962:	2201      	movs	r2, #1
 8004964:	2110      	movs	r1, #16
 8004966:	4893      	ldr	r0, [pc, #588]	@ (8004bb4 <checkAktifCalisma+0xb54>)
 8004968:	f005 fa77 	bl	8009e5a <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 800496c:	4b92      	ldr	r3, [pc, #584]	@ (8004bb8 <checkAktifCalisma+0xb58>)
 800496e:	2201      	movs	r2, #1
 8004970:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8004972:	4b91      	ldr	r3, [pc, #580]	@ (8004bb8 <checkAktifCalisma+0xb58>)
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d024      	beq.n	80049c4 <checkAktifCalisma+0x964>
 800497a:	2140      	movs	r1, #64	@ 0x40
 800497c:	488d      	ldr	r0, [pc, #564]	@ (8004bb4 <checkAktifCalisma+0xb54>)
 800497e:	f005 fa55 	bl	8009e2c <HAL_GPIO_ReadPin>
 8004982:	4603      	mov	r3, r0
 8004984:	2b01      	cmp	r3, #1
 8004986:	d007      	beq.n	8004998 <checkAktifCalisma+0x938>
 8004988:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800498c:	4889      	ldr	r0, [pc, #548]	@ (8004bb4 <checkAktifCalisma+0xb54>)
 800498e:	f005 fa4d 	bl	8009e2c <HAL_GPIO_ReadPin>
 8004992:	4603      	mov	r3, r0
 8004994:	2b01      	cmp	r3, #1
 8004996:	d115      	bne.n	80049c4 <checkAktifCalisma+0x964>
 8004998:	4b88      	ldr	r3, [pc, #544]	@ (8004bbc <checkAktifCalisma+0xb5c>)
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d011      	beq.n	80049c4 <checkAktifCalisma+0x964>
 80049a0:	4b87      	ldr	r3, [pc, #540]	@ (8004bc0 <checkAktifCalisma+0xb60>)
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00d      	beq.n	80049c4 <checkAktifCalisma+0x964>
 80049a8:	4b86      	ldr	r3, [pc, #536]	@ (8004bc4 <checkAktifCalisma+0xb64>)
 80049aa:	781b      	ldrb	r3, [r3, #0]
 80049ac:	f083 0301 	eor.w	r3, r3, #1
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d006      	beq.n	80049c4 <checkAktifCalisma+0x964>
			timer2=millis;
 80049b6:	4b84      	ldr	r3, [pc, #528]	@ (8004bc8 <checkAktifCalisma+0xb68>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a84      	ldr	r2, [pc, #528]	@ (8004bcc <checkAktifCalisma+0xb6c>)
 80049bc:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 80049be:	4b81      	ldr	r3, [pc, #516]	@ (8004bc4 <checkAktifCalisma+0xb64>)
 80049c0:	2201      	movs	r2, #1
 80049c2:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 80049c4:	4b80      	ldr	r3, [pc, #512]	@ (8004bc8 <checkAktifCalisma+0xb68>)
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	4b80      	ldr	r3, [pc, #512]	@ (8004bcc <checkAktifCalisma+0xb6c>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	4a80      	ldr	r2, [pc, #512]	@ (8004bd0 <checkAktifCalisma+0xb70>)
 80049d0:	7812      	ldrb	r2, [r2, #0]
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d303      	bcc.n	80049de <checkAktifCalisma+0x97e>
 80049d6:	4b7b      	ldr	r3, [pc, #492]	@ (8004bc4 <checkAktifCalisma+0xb64>)
 80049d8:	781b      	ldrb	r3, [r3, #0]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d10d      	bne.n	80049fa <checkAktifCalisma+0x99a>
 80049de:	4b77      	ldr	r3, [pc, #476]	@ (8004bbc <checkAktifCalisma+0xb5c>)
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	f083 0301 	eor.w	r3, r3, #1
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d106      	bne.n	80049fa <checkAktifCalisma+0x99a>
 80049ec:	4b74      	ldr	r3, [pc, #464]	@ (8004bc0 <checkAktifCalisma+0xb60>)
 80049ee:	781b      	ldrb	r3, [r3, #0]
 80049f0:	f083 0301 	eor.w	r3, r3, #1
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00a      	beq.n	8004a10 <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80049fa:	2200      	movs	r2, #0
 80049fc:	2110      	movs	r1, #16
 80049fe:	486d      	ldr	r0, [pc, #436]	@ (8004bb4 <checkAktifCalisma+0xb54>)
 8004a00:	f005 fa2b 	bl	8009e5a <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 8004a04:	4b6c      	ldr	r3, [pc, #432]	@ (8004bb8 <checkAktifCalisma+0xb58>)
 8004a06:	2200      	movs	r2, #0
 8004a08:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 8004a0a:	4b6e      	ldr	r3, [pc, #440]	@ (8004bc4 <checkAktifCalisma+0xb64>)
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8004a10:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8004a14:	486f      	ldr	r0, [pc, #444]	@ (8004bd4 <checkAktifCalisma+0xb74>)
 8004a16:	f005 fa09 	bl	8009e2c <HAL_GPIO_ReadPin>
 8004a1a:	4603      	mov	r3, r0
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d120      	bne.n	8004a62 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8004a20:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004a24:	486b      	ldr	r0, [pc, #428]	@ (8004bd4 <checkAktifCalisma+0xb74>)
 8004a26:	f005 fa01 	bl	8009e2c <HAL_GPIO_ReadPin>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d118      	bne.n	8004a62 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8004a30:	2104      	movs	r1, #4
 8004a32:	4868      	ldr	r0, [pc, #416]	@ (8004bd4 <checkAktifCalisma+0xb74>)
 8004a34:	f005 f9fa 	bl	8009e2c <HAL_GPIO_ReadPin>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d111      	bne.n	8004a62 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8004a3e:	2102      	movs	r1, #2
 8004a40:	4864      	ldr	r0, [pc, #400]	@ (8004bd4 <checkAktifCalisma+0xb74>)
 8004a42:	f005 f9f3 	bl	8009e2c <HAL_GPIO_ReadPin>
 8004a46:	4603      	mov	r3, r0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d10a      	bne.n	8004a62 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8004a4c:	2101      	movs	r1, #1
 8004a4e:	4861      	ldr	r0, [pc, #388]	@ (8004bd4 <checkAktifCalisma+0xb74>)
 8004a50:	f005 f9ec 	bl	8009e2c <HAL_GPIO_ReadPin>
 8004a54:	4603      	mov	r3, r0
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d103      	bne.n	8004a62 <checkAktifCalisma+0xa02>
			makineStop=1;
 8004a5a:	4b5f      	ldr	r3, [pc, #380]	@ (8004bd8 <checkAktifCalisma+0xb78>)
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	701a      	strb	r2, [r3, #0]
 8004a60:	e002      	b.n	8004a68 <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 8004a62:	4b5d      	ldr	r3, [pc, #372]	@ (8004bd8 <checkAktifCalisma+0xb78>)
 8004a64:	2200      	movs	r2, #0
 8004a66:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004a68:	4b5c      	ldr	r3, [pc, #368]	@ (8004bdc <checkAktifCalisma+0xb7c>)
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d144      	bne.n	8004afa <checkAktifCalisma+0xa9a>
 8004a70:	4b5b      	ldr	r3, [pc, #364]	@ (8004be0 <checkAktifCalisma+0xb80>)
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	d003      	beq.n	8004a80 <checkAktifCalisma+0xa20>
 8004a78:	4b59      	ldr	r3, [pc, #356]	@ (8004be0 <checkAktifCalisma+0xb80>)
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	2b03      	cmp	r3, #3
 8004a7e:	d13c      	bne.n	8004afa <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004a80:	2180      	movs	r1, #128	@ 0x80
 8004a82:	484c      	ldr	r0, [pc, #304]	@ (8004bb4 <checkAktifCalisma+0xb54>)
 8004a84:	f005 f9d2 	bl	8009e2c <HAL_GPIO_ReadPin>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d103      	bne.n	8004a96 <checkAktifCalisma+0xa36>
 8004a8e:	4b55      	ldr	r3, [pc, #340]	@ (8004be4 <checkAktifCalisma+0xb84>)
 8004a90:	781b      	ldrb	r3, [r3, #0]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00b      	beq.n	8004aae <checkAktifCalisma+0xa4e>
 8004a96:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004a9a:	484e      	ldr	r0, [pc, #312]	@ (8004bd4 <checkAktifCalisma+0xb74>)
 8004a9c:	f005 f9c6 	bl	8009e2c <HAL_GPIO_ReadPin>
 8004aa0:	4603      	mov	r3, r0
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d129      	bne.n	8004afa <checkAktifCalisma+0xa9a>
 8004aa6:	4b4f      	ldr	r3, [pc, #316]	@ (8004be4 <checkAktifCalisma+0xb84>)
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d125      	bne.n	8004afa <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004aae:	2104      	movs	r1, #4
 8004ab0:	4840      	ldr	r0, [pc, #256]	@ (8004bb4 <checkAktifCalisma+0xb54>)
 8004ab2:	f005 f9bb 	bl	8009e2c <HAL_GPIO_ReadPin>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d003      	beq.n	8004ac4 <checkAktifCalisma+0xa64>
 8004abc:	4b4a      	ldr	r3, [pc, #296]	@ (8004be8 <checkAktifCalisma+0xb88>)
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d11a      	bne.n	8004afa <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004ac4:	2102      	movs	r1, #2
 8004ac6:	483b      	ldr	r0, [pc, #236]	@ (8004bb4 <checkAktifCalisma+0xb54>)
 8004ac8:	f005 f9b0 	bl	8009e2c <HAL_GPIO_ReadPin>
 8004acc:	4603      	mov	r3, r0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d113      	bne.n	8004afa <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 8004ad2:	4b46      	ldr	r3, [pc, #280]	@ (8004bec <checkAktifCalisma+0xb8c>)
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	f083 0301 	eor.w	r3, r3, #1
 8004ada:	b2db      	uxtb	r3, r3
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00c      	beq.n	8004afa <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 8004ae0:	4b3d      	ldr	r3, [pc, #244]	@ (8004bd8 <checkAktifCalisma+0xb78>)
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d008      	beq.n	8004afa <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 8004ae8:	4b41      	ldr	r3, [pc, #260]	@ (8004bf0 <checkAktifCalisma+0xb90>)
 8004aea:	2201      	movs	r2, #1
 8004aec:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8004aee:	4b36      	ldr	r3, [pc, #216]	@ (8004bc8 <checkAktifCalisma+0xb68>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a40      	ldr	r2, [pc, #256]	@ (8004bf4 <checkAktifCalisma+0xb94>)
 8004af4:	6013      	str	r3, [r2, #0]
			bekle();
 8004af6:	f7ff f917 	bl	8003d28 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8004afa:	4b33      	ldr	r3, [pc, #204]	@ (8004bc8 <checkAktifCalisma+0xb68>)
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	4b3d      	ldr	r3, [pc, #244]	@ (8004bf4 <checkAktifCalisma+0xb94>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	4a3c      	ldr	r2, [pc, #240]	@ (8004bf8 <checkAktifCalisma+0xb98>)
 8004b06:	7812      	ldrb	r2, [r2, #0]
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d211      	bcs.n	8004b30 <checkAktifCalisma+0xad0>
 8004b0c:	2104      	movs	r1, #4
 8004b0e:	4829      	ldr	r0, [pc, #164]	@ (8004bb4 <checkAktifCalisma+0xb54>)
 8004b10:	f005 f98c 	bl	8009e2c <HAL_GPIO_ReadPin>
 8004b14:	4603      	mov	r3, r0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00a      	beq.n	8004b30 <checkAktifCalisma+0xad0>
 8004b1a:	4b33      	ldr	r3, [pc, #204]	@ (8004be8 <checkAktifCalisma+0xb88>)
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d006      	beq.n	8004b30 <checkAktifCalisma+0xad0>
 8004b22:	4b2d      	ldr	r3, [pc, #180]	@ (8004bd8 <checkAktifCalisma+0xb78>)
 8004b24:	781b      	ldrb	r3, [r3, #0]
 8004b26:	f083 0301 	eor.w	r3, r3, #1
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d002      	beq.n	8004b36 <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 8004b30:	4b2f      	ldr	r3, [pc, #188]	@ (8004bf0 <checkAktifCalisma+0xb90>)
 8004b32:	2200      	movs	r2, #0
 8004b34:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004b36:	4b29      	ldr	r3, [pc, #164]	@ (8004bdc <checkAktifCalisma+0xb7c>)
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d160      	bne.n	8004c00 <checkAktifCalisma+0xba0>
 8004b3e:	4b28      	ldr	r3, [pc, #160]	@ (8004be0 <checkAktifCalisma+0xb80>)
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d003      	beq.n	8004b4e <checkAktifCalisma+0xaee>
 8004b46:	4b26      	ldr	r3, [pc, #152]	@ (8004be0 <checkAktifCalisma+0xb80>)
 8004b48:	781b      	ldrb	r3, [r3, #0]
 8004b4a:	2b03      	cmp	r3, #3
 8004b4c:	d158      	bne.n	8004c00 <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004b4e:	2104      	movs	r1, #4
 8004b50:	4818      	ldr	r0, [pc, #96]	@ (8004bb4 <checkAktifCalisma+0xb54>)
 8004b52:	f005 f96b 	bl	8009e2c <HAL_GPIO_ReadPin>
 8004b56:	4603      	mov	r3, r0
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d003      	beq.n	8004b64 <checkAktifCalisma+0xb04>
 8004b5c:	4b22      	ldr	r3, [pc, #136]	@ (8004be8 <checkAktifCalisma+0xb88>)
 8004b5e:	781b      	ldrb	r3, [r3, #0]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d14d      	bne.n	8004c00 <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004b64:	2102      	movs	r1, #2
 8004b66:	4813      	ldr	r0, [pc, #76]	@ (8004bb4 <checkAktifCalisma+0xb54>)
 8004b68:	f005 f960 	bl	8009e2c <HAL_GPIO_ReadPin>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d146      	bne.n	8004c00 <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004b72:	2180      	movs	r1, #128	@ 0x80
 8004b74:	480f      	ldr	r0, [pc, #60]	@ (8004bb4 <checkAktifCalisma+0xb54>)
 8004b76:	f005 f959 	bl	8009e2c <HAL_GPIO_ReadPin>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d103      	bne.n	8004b88 <checkAktifCalisma+0xb28>
 8004b80:	4b18      	ldr	r3, [pc, #96]	@ (8004be4 <checkAktifCalisma+0xb84>)
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d00b      	beq.n	8004ba0 <checkAktifCalisma+0xb40>
 8004b88:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004b8c:	4811      	ldr	r0, [pc, #68]	@ (8004bd4 <checkAktifCalisma+0xb74>)
 8004b8e:	f005 f94d 	bl	8009e2c <HAL_GPIO_ReadPin>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d133      	bne.n	8004c00 <checkAktifCalisma+0xba0>
 8004b98:	4b12      	ldr	r3, [pc, #72]	@ (8004be4 <checkAktifCalisma+0xb84>)
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	2b01      	cmp	r3, #1
 8004b9e:	d12f      	bne.n	8004c00 <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 8004ba0:	4b0d      	ldr	r3, [pc, #52]	@ (8004bd8 <checkAktifCalisma+0xb78>)
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d02b      	beq.n	8004c00 <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 8004ba8:	4b14      	ldr	r3, [pc, #80]	@ (8004bfc <checkAktifCalisma+0xb9c>)
 8004baa:	2201      	movs	r2, #1
 8004bac:	701a      	strb	r2, [r3, #0]
 8004bae:	e02a      	b.n	8004c06 <checkAktifCalisma+0xba6>
 8004bb0:	200010d7 	.word	0x200010d7
 8004bb4:	40011000 	.word	0x40011000
 8004bb8:	200010db 	.word	0x200010db
 8004bbc:	200010f2 	.word	0x200010f2
 8004bc0:	200010f3 	.word	0x200010f3
 8004bc4:	200010d3 	.word	0x200010d3
 8004bc8:	20001078 	.word	0x20001078
 8004bcc:	20001084 	.word	0x20001084
 8004bd0:	200010b6 	.word	0x200010b6
 8004bd4:	40010c00 	.word	0x40010c00
 8004bd8:	200010e2 	.word	0x200010e2
 8004bdc:	200010a9 	.word	0x200010a9
 8004be0:	200010a8 	.word	0x200010a8
 8004be4:	200010ac 	.word	0x200010ac
 8004be8:	200010a6 	.word	0x200010a6
 8004bec:	200010cf 	.word	0x200010cf
 8004bf0:	200010e3 	.word	0x200010e3
 8004bf4:	2000107c 	.word	0x2000107c
 8004bf8:	200010b9 	.word	0x200010b9
 8004bfc:	200010e4 	.word	0x200010e4
		} else {
			kapi1butonkontrol=0;
 8004c00:	4b8b      	ldr	r3, [pc, #556]	@ (8004e30 <checkAktifCalisma+0xdd0>)
 8004c02:	2200      	movs	r2, #0
 8004c04:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004c06:	4b8b      	ldr	r3, [pc, #556]	@ (8004e34 <checkAktifCalisma+0xdd4>)
 8004c08:	781b      	ldrb	r3, [r3, #0]
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d121      	bne.n	8004c52 <checkAktifCalisma+0xbf2>
 8004c0e:	4b8a      	ldr	r3, [pc, #552]	@ (8004e38 <checkAktifCalisma+0xdd8>)
 8004c10:	781b      	ldrb	r3, [r3, #0]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d003      	beq.n	8004c1e <checkAktifCalisma+0xbbe>
 8004c16:	4b88      	ldr	r3, [pc, #544]	@ (8004e38 <checkAktifCalisma+0xdd8>)
 8004c18:	781b      	ldrb	r3, [r3, #0]
 8004c1a:	2b03      	cmp	r3, #3
 8004c1c:	d119      	bne.n	8004c52 <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004c1e:	2104      	movs	r1, #4
 8004c20:	4886      	ldr	r0, [pc, #536]	@ (8004e3c <checkAktifCalisma+0xddc>)
 8004c22:	f005 f903 	bl	8009e2c <HAL_GPIO_ReadPin>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d003      	beq.n	8004c34 <checkAktifCalisma+0xbd4>
 8004c2c:	4b84      	ldr	r3, [pc, #528]	@ (8004e40 <checkAktifCalisma+0xde0>)
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d10e      	bne.n	8004c52 <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8004c34:	2102      	movs	r1, #2
 8004c36:	4881      	ldr	r0, [pc, #516]	@ (8004e3c <checkAktifCalisma+0xddc>)
 8004c38:	f005 f8f8 	bl	8009e2c <HAL_GPIO_ReadPin>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d107      	bne.n	8004c52 <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 8004c42:	4b80      	ldr	r3, [pc, #512]	@ (8004e44 <checkAktifCalisma+0xde4>)
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d003      	beq.n	8004c52 <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 8004c4a:	4b7f      	ldr	r3, [pc, #508]	@ (8004e48 <checkAktifCalisma+0xde8>)
 8004c4c:	2201      	movs	r2, #1
 8004c4e:	701a      	strb	r2, [r3, #0]
 8004c50:	e002      	b.n	8004c58 <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 8004c52:	4b7d      	ldr	r3, [pc, #500]	@ (8004e48 <checkAktifCalisma+0xde8>)
 8004c54:	2200      	movs	r2, #0
 8004c56:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8004c58:	4b75      	ldr	r3, [pc, #468]	@ (8004e30 <checkAktifCalisma+0xdd0>)
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d107      	bne.n	8004c70 <checkAktifCalisma+0xc10>
 8004c60:	4b79      	ldr	r3, [pc, #484]	@ (8004e48 <checkAktifCalisma+0xde8>)
 8004c62:	781b      	ldrb	r3, [r3, #0]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d103      	bne.n	8004c70 <checkAktifCalisma+0xc10>
 8004c68:	4b78      	ldr	r3, [pc, #480]	@ (8004e4c <checkAktifCalisma+0xdec>)
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d005      	beq.n	8004c7c <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8004c70:	2201      	movs	r2, #1
 8004c72:	2180      	movs	r1, #128	@ 0x80
 8004c74:	4876      	ldr	r0, [pc, #472]	@ (8004e50 <checkAktifCalisma+0xdf0>)
 8004c76:	f005 f8f0 	bl	8009e5a <HAL_GPIO_WritePin>
 8004c7a:	e004      	b.n	8004c86 <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	2180      	movs	r1, #128	@ 0x80
 8004c80:	4873      	ldr	r0, [pc, #460]	@ (8004e50 <checkAktifCalisma+0xdf0>)
 8004c82:	f005 f8ea 	bl	8009e5a <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004c86:	4b73      	ldr	r3, [pc, #460]	@ (8004e54 <checkAktifCalisma+0xdf4>)
 8004c88:	781b      	ldrb	r3, [r3, #0]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d141      	bne.n	8004d12 <checkAktifCalisma+0xcb2>
 8004c8e:	4b6a      	ldr	r3, [pc, #424]	@ (8004e38 <checkAktifCalisma+0xdd8>)
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d003      	beq.n	8004c9e <checkAktifCalisma+0xc3e>
 8004c96:	4b68      	ldr	r3, [pc, #416]	@ (8004e38 <checkAktifCalisma+0xdd8>)
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	2b03      	cmp	r3, #3
 8004c9c:	d139      	bne.n	8004d12 <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004c9e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004ca2:	4866      	ldr	r0, [pc, #408]	@ (8004e3c <checkAktifCalisma+0xddc>)
 8004ca4:	f005 f8c2 	bl	8009e2c <HAL_GPIO_ReadPin>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d103      	bne.n	8004cb6 <checkAktifCalisma+0xc56>
 8004cae:	4b6a      	ldr	r3, [pc, #424]	@ (8004e58 <checkAktifCalisma+0xdf8>)
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d00b      	beq.n	8004cce <checkAktifCalisma+0xc6e>
 8004cb6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004cba:	4868      	ldr	r0, [pc, #416]	@ (8004e5c <checkAktifCalisma+0xdfc>)
 8004cbc:	f005 f8b6 	bl	8009e2c <HAL_GPIO_ReadPin>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d125      	bne.n	8004d12 <checkAktifCalisma+0xcb2>
 8004cc6:	4b64      	ldr	r3, [pc, #400]	@ (8004e58 <checkAktifCalisma+0xdf8>)
 8004cc8:	781b      	ldrb	r3, [r3, #0]
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d121      	bne.n	8004d12 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004cce:	2102      	movs	r1, #2
 8004cd0:	485a      	ldr	r0, [pc, #360]	@ (8004e3c <checkAktifCalisma+0xddc>)
 8004cd2:	f005 f8ab 	bl	8009e2c <HAL_GPIO_ReadPin>
 8004cd6:	4603      	mov	r3, r0
 8004cd8:	2b01      	cmp	r3, #1
 8004cda:	d11a      	bne.n	8004d12 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8004cdc:	2104      	movs	r1, #4
 8004cde:	4857      	ldr	r0, [pc, #348]	@ (8004e3c <checkAktifCalisma+0xddc>)
 8004ce0:	f005 f8a4 	bl	8009e2c <HAL_GPIO_ReadPin>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d113      	bne.n	8004d12 <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 8004cea:	4b56      	ldr	r3, [pc, #344]	@ (8004e44 <checkAktifCalisma+0xde4>)
 8004cec:	781b      	ldrb	r3, [r3, #0]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00f      	beq.n	8004d12 <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 8004cf2:	4b5b      	ldr	r3, [pc, #364]	@ (8004e60 <checkAktifCalisma+0xe00>)
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	f083 0301 	eor.w	r3, r3, #1
 8004cfa:	b2db      	uxtb	r3, r3
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d008      	beq.n	8004d12 <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 8004d00:	4b58      	ldr	r3, [pc, #352]	@ (8004e64 <checkAktifCalisma+0xe04>)
 8004d02:	2201      	movs	r2, #1
 8004d04:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8004d06:	4b58      	ldr	r3, [pc, #352]	@ (8004e68 <checkAktifCalisma+0xe08>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a58      	ldr	r2, [pc, #352]	@ (8004e6c <checkAktifCalisma+0xe0c>)
 8004d0c:	6013      	str	r3, [r2, #0]
			bekle();
 8004d0e:	f7ff f80b 	bl	8003d28 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8004d12:	4b55      	ldr	r3, [pc, #340]	@ (8004e68 <checkAktifCalisma+0xe08>)
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	4b55      	ldr	r3, [pc, #340]	@ (8004e6c <checkAktifCalisma+0xe0c>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	4a54      	ldr	r2, [pc, #336]	@ (8004e70 <checkAktifCalisma+0xe10>)
 8004d1e:	7812      	ldrb	r2, [r2, #0]
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d20d      	bcs.n	8004d40 <checkAktifCalisma+0xce0>
 8004d24:	2102      	movs	r1, #2
 8004d26:	4845      	ldr	r0, [pc, #276]	@ (8004e3c <checkAktifCalisma+0xddc>)
 8004d28:	f005 f880 	bl	8009e2c <HAL_GPIO_ReadPin>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d006      	beq.n	8004d40 <checkAktifCalisma+0xce0>
 8004d32:	4b44      	ldr	r3, [pc, #272]	@ (8004e44 <checkAktifCalisma+0xde4>)
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	f083 0301 	eor.w	r3, r3, #1
 8004d3a:	b2db      	uxtb	r3, r3
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d002      	beq.n	8004d46 <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 8004d40:	4b48      	ldr	r3, [pc, #288]	@ (8004e64 <checkAktifCalisma+0xe04>)
 8004d42:	2200      	movs	r2, #0
 8004d44:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004d46:	4b43      	ldr	r3, [pc, #268]	@ (8004e54 <checkAktifCalisma+0xdf4>)
 8004d48:	781b      	ldrb	r3, [r3, #0]
 8004d4a:	2b01      	cmp	r3, #1
 8004d4c:	d135      	bne.n	8004dba <checkAktifCalisma+0xd5a>
 8004d4e:	4b3a      	ldr	r3, [pc, #232]	@ (8004e38 <checkAktifCalisma+0xdd8>)
 8004d50:	781b      	ldrb	r3, [r3, #0]
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d003      	beq.n	8004d5e <checkAktifCalisma+0xcfe>
 8004d56:	4b38      	ldr	r3, [pc, #224]	@ (8004e38 <checkAktifCalisma+0xdd8>)
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	2b03      	cmp	r3, #3
 8004d5c:	d12d      	bne.n	8004dba <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8004d5e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8004d62:	4836      	ldr	r0, [pc, #216]	@ (8004e3c <checkAktifCalisma+0xddc>)
 8004d64:	f005 f862 	bl	8009e2c <HAL_GPIO_ReadPin>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d103      	bne.n	8004d76 <checkAktifCalisma+0xd16>
 8004d6e:	4b3a      	ldr	r3, [pc, #232]	@ (8004e58 <checkAktifCalisma+0xdf8>)
 8004d70:	781b      	ldrb	r3, [r3, #0]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00b      	beq.n	8004d8e <checkAktifCalisma+0xd2e>
 8004d76:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004d7a:	4838      	ldr	r0, [pc, #224]	@ (8004e5c <checkAktifCalisma+0xdfc>)
 8004d7c:	f005 f856 	bl	8009e2c <HAL_GPIO_ReadPin>
 8004d80:	4603      	mov	r3, r0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d119      	bne.n	8004dba <checkAktifCalisma+0xd5a>
 8004d86:	4b34      	ldr	r3, [pc, #208]	@ (8004e58 <checkAktifCalisma+0xdf8>)
 8004d88:	781b      	ldrb	r3, [r3, #0]
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d115      	bne.n	8004dba <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004d8e:	2102      	movs	r1, #2
 8004d90:	482a      	ldr	r0, [pc, #168]	@ (8004e3c <checkAktifCalisma+0xddc>)
 8004d92:	f005 f84b 	bl	8009e2c <HAL_GPIO_ReadPin>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d10e      	bne.n	8004dba <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8004d9c:	2104      	movs	r1, #4
 8004d9e:	4827      	ldr	r0, [pc, #156]	@ (8004e3c <checkAktifCalisma+0xddc>)
 8004da0:	f005 f844 	bl	8009e2c <HAL_GPIO_ReadPin>
 8004da4:	4603      	mov	r3, r0
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d107      	bne.n	8004dba <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 8004daa:	4b26      	ldr	r3, [pc, #152]	@ (8004e44 <checkAktifCalisma+0xde4>)
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d003      	beq.n	8004dba <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 8004db2:	4b30      	ldr	r3, [pc, #192]	@ (8004e74 <checkAktifCalisma+0xe14>)
 8004db4:	2201      	movs	r2, #1
 8004db6:	701a      	strb	r2, [r3, #0]
 8004db8:	e002      	b.n	8004dc0 <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 8004dba:	4b2e      	ldr	r3, [pc, #184]	@ (8004e74 <checkAktifCalisma+0xe14>)
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8004dc0:	4b24      	ldr	r3, [pc, #144]	@ (8004e54 <checkAktifCalisma+0xdf4>)
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	2b02      	cmp	r3, #2
 8004dc6:	d11d      	bne.n	8004e04 <checkAktifCalisma+0xda4>
 8004dc8:	4b1b      	ldr	r3, [pc, #108]	@ (8004e38 <checkAktifCalisma+0xdd8>)
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	2b01      	cmp	r3, #1
 8004dce:	d003      	beq.n	8004dd8 <checkAktifCalisma+0xd78>
 8004dd0:	4b19      	ldr	r3, [pc, #100]	@ (8004e38 <checkAktifCalisma+0xdd8>)
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	2b03      	cmp	r3, #3
 8004dd6:	d115      	bne.n	8004e04 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004dd8:	2102      	movs	r1, #2
 8004dda:	4818      	ldr	r0, [pc, #96]	@ (8004e3c <checkAktifCalisma+0xddc>)
 8004ddc:	f005 f826 	bl	8009e2c <HAL_GPIO_ReadPin>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d10e      	bne.n	8004e04 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8004de6:	2104      	movs	r1, #4
 8004de8:	4814      	ldr	r0, [pc, #80]	@ (8004e3c <checkAktifCalisma+0xddc>)
 8004dea:	f005 f81f 	bl	8009e2c <HAL_GPIO_ReadPin>
 8004dee:	4603      	mov	r3, r0
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d107      	bne.n	8004e04 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 8004df4:	4b13      	ldr	r3, [pc, #76]	@ (8004e44 <checkAktifCalisma+0xde4>)
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d003      	beq.n	8004e04 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 8004dfc:	4b1e      	ldr	r3, [pc, #120]	@ (8004e78 <checkAktifCalisma+0xe18>)
 8004dfe:	2201      	movs	r2, #1
 8004e00:	701a      	strb	r2, [r3, #0]
 8004e02:	e002      	b.n	8004e0a <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 8004e04:	4b1c      	ldr	r3, [pc, #112]	@ (8004e78 <checkAktifCalisma+0xe18>)
 8004e06:	2200      	movs	r2, #0
 8004e08:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8004e0a:	4b1a      	ldr	r3, [pc, #104]	@ (8004e74 <checkAktifCalisma+0xe14>)
 8004e0c:	781b      	ldrb	r3, [r3, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d107      	bne.n	8004e22 <checkAktifCalisma+0xdc2>
 8004e12:	4b19      	ldr	r3, [pc, #100]	@ (8004e78 <checkAktifCalisma+0xe18>)
 8004e14:	781b      	ldrb	r3, [r3, #0]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d103      	bne.n	8004e22 <checkAktifCalisma+0xdc2>
 8004e1a:	4b12      	ldr	r3, [pc, #72]	@ (8004e64 <checkAktifCalisma+0xe04>)
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d02c      	beq.n	8004e7c <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8004e22:	2201      	movs	r2, #1
 8004e24:	2140      	movs	r1, #64	@ 0x40
 8004e26:	480a      	ldr	r0, [pc, #40]	@ (8004e50 <checkAktifCalisma+0xdf0>)
 8004e28:	f005 f817 	bl	8009e5a <HAL_GPIO_WritePin>
 8004e2c:	e02b      	b.n	8004e86 <checkAktifCalisma+0xe26>
 8004e2e:	bf00      	nop
 8004e30:	200010e4 	.word	0x200010e4
 8004e34:	200010a9 	.word	0x200010a9
 8004e38:	200010a8 	.word	0x200010a8
 8004e3c:	40011000 	.word	0x40011000
 8004e40:	200010a6 	.word	0x200010a6
 8004e44:	200010e2 	.word	0x200010e2
 8004e48:	200010e5 	.word	0x200010e5
 8004e4c:	200010e3 	.word	0x200010e3
 8004e50:	40010800 	.word	0x40010800
 8004e54:	200010aa 	.word	0x200010aa
 8004e58:	200010ac 	.word	0x200010ac
 8004e5c:	40010c00 	.word	0x40010c00
 8004e60:	200010cf 	.word	0x200010cf
 8004e64:	200010e6 	.word	0x200010e6
 8004e68:	20001078 	.word	0x20001078
 8004e6c:	2000107c 	.word	0x2000107c
 8004e70:	200010ba 	.word	0x200010ba
 8004e74:	200010e7 	.word	0x200010e7
 8004e78:	200010e8 	.word	0x200010e8
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	2140      	movs	r1, #64	@ 0x40
 8004e80:	488d      	ldr	r0, [pc, #564]	@ (80050b8 <checkAktifCalisma+0x1058>)
 8004e82:	f004 ffea 	bl	8009e5a <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8004e86:	4b8d      	ldr	r3, [pc, #564]	@ (80050bc <checkAktifCalisma+0x105c>)
 8004e88:	781b      	ldrb	r3, [r3, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d003      	beq.n	8004e96 <checkAktifCalisma+0xe36>
 8004e8e:	4b8b      	ldr	r3, [pc, #556]	@ (80050bc <checkAktifCalisma+0x105c>)
 8004e90:	781b      	ldrb	r3, [r3, #0]
 8004e92:	2b02      	cmp	r3, #2
 8004e94:	d115      	bne.n	8004ec2 <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8004e96:	2104      	movs	r1, #4
 8004e98:	4889      	ldr	r0, [pc, #548]	@ (80050c0 <checkAktifCalisma+0x1060>)
 8004e9a:	f004 ffc7 	bl	8009e2c <HAL_GPIO_ReadPin>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d003      	beq.n	8004eac <checkAktifCalisma+0xe4c>
 8004ea4:	4b87      	ldr	r3, [pc, #540]	@ (80050c4 <checkAktifCalisma+0x1064>)
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d10a      	bne.n	8004ec2 <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8004eac:	2102      	movs	r1, #2
 8004eae:	4884      	ldr	r0, [pc, #528]	@ (80050c0 <checkAktifCalisma+0x1060>)
 8004eb0:	f004 ffbc 	bl	8009e2c <HAL_GPIO_ReadPin>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d103      	bne.n	8004ec2 <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 8004eba:	4b83      	ldr	r3, [pc, #524]	@ (80050c8 <checkAktifCalisma+0x1068>)
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	701a      	strb	r2, [r3, #0]
 8004ec0:	e002      	b.n	8004ec8 <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 8004ec2:	4b81      	ldr	r3, [pc, #516]	@ (80050c8 <checkAktifCalisma+0x1068>)
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8004ec8:	4b7c      	ldr	r3, [pc, #496]	@ (80050bc <checkAktifCalisma+0x105c>)
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d003      	beq.n	8004ed8 <checkAktifCalisma+0xe78>
 8004ed0:	4b7a      	ldr	r3, [pc, #488]	@ (80050bc <checkAktifCalisma+0x105c>)
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	2b02      	cmp	r3, #2
 8004ed6:	d111      	bne.n	8004efc <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8004ed8:	2102      	movs	r1, #2
 8004eda:	4879      	ldr	r0, [pc, #484]	@ (80050c0 <checkAktifCalisma+0x1060>)
 8004edc:	f004 ffa6 	bl	8009e2c <HAL_GPIO_ReadPin>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b01      	cmp	r3, #1
 8004ee4:	d10a      	bne.n	8004efc <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8004ee6:	2104      	movs	r1, #4
 8004ee8:	4875      	ldr	r0, [pc, #468]	@ (80050c0 <checkAktifCalisma+0x1060>)
 8004eea:	f004 ff9f 	bl	8009e2c <HAL_GPIO_ReadPin>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d103      	bne.n	8004efc <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8004ef4:	4b75      	ldr	r3, [pc, #468]	@ (80050cc <checkAktifCalisma+0x106c>)
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	701a      	strb	r2, [r3, #0]
 8004efa:	e002      	b.n	8004f02 <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 8004efc:	4b73      	ldr	r3, [pc, #460]	@ (80050cc <checkAktifCalisma+0x106c>)
 8004efe:	2200      	movs	r2, #0
 8004f00:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 8004f02:	4b71      	ldr	r3, [pc, #452]	@ (80050c8 <checkAktifCalisma+0x1068>)
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00f      	beq.n	8004f2a <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 8004f0a:	4b71      	ldr	r3, [pc, #452]	@ (80050d0 <checkAktifCalisma+0x1070>)
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d10b      	bne.n	8004f2a <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8004f12:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004f16:	486f      	ldr	r0, [pc, #444]	@ (80050d4 <checkAktifCalisma+0x1074>)
 8004f18:	f004 ff88 	bl	8009e2c <HAL_GPIO_ReadPin>
 8004f1c:	4603      	mov	r3, r0
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d103      	bne.n	8004f2a <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8004f22:	4b6d      	ldr	r3, [pc, #436]	@ (80050d8 <checkAktifCalisma+0x1078>)
 8004f24:	2201      	movs	r2, #1
 8004f26:	701a      	strb	r2, [r3, #0]
 8004f28:	e002      	b.n	8004f30 <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 8004f2a:	4b6b      	ldr	r3, [pc, #428]	@ (80050d8 <checkAktifCalisma+0x1078>)
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8004f30:	4b66      	ldr	r3, [pc, #408]	@ (80050cc <checkAktifCalisma+0x106c>)
 8004f32:	781b      	ldrb	r3, [r3, #0]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d00f      	beq.n	8004f58 <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8004f38:	4b65      	ldr	r3, [pc, #404]	@ (80050d0 <checkAktifCalisma+0x1070>)
 8004f3a:	781b      	ldrb	r3, [r3, #0]
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d10b      	bne.n	8004f58 <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8004f40:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004f44:	4863      	ldr	r0, [pc, #396]	@ (80050d4 <checkAktifCalisma+0x1074>)
 8004f46:	f004 ff71 	bl	8009e2c <HAL_GPIO_ReadPin>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d103      	bne.n	8004f58 <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8004f50:	4b62      	ldr	r3, [pc, #392]	@ (80050dc <checkAktifCalisma+0x107c>)
 8004f52:	2201      	movs	r2, #1
 8004f54:	701a      	strb	r2, [r3, #0]
 8004f56:	e002      	b.n	8004f5e <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8004f58:	4b60      	ldr	r3, [pc, #384]	@ (80050dc <checkAktifCalisma+0x107c>)
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8004f5e:	4b60      	ldr	r3, [pc, #384]	@ (80050e0 <checkAktifCalisma+0x1080>)
 8004f60:	781b      	ldrb	r3, [r3, #0]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d137      	bne.n	8004fd6 <checkAktifCalisma+0xf76>
 8004f66:	4b5f      	ldr	r3, [pc, #380]	@ (80050e4 <checkAktifCalisma+0x1084>)
 8004f68:	781b      	ldrb	r3, [r3, #0]
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d003      	beq.n	8004f76 <checkAktifCalisma+0xf16>
 8004f6e:	4b5d      	ldr	r3, [pc, #372]	@ (80050e4 <checkAktifCalisma+0x1084>)
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	2b03      	cmp	r3, #3
 8004f74:	d12f      	bne.n	8004fd6 <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8004f76:	4b54      	ldr	r3, [pc, #336]	@ (80050c8 <checkAktifCalisma+0x1068>)
 8004f78:	781b      	ldrb	r3, [r3, #0]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d103      	bne.n	8004f86 <checkAktifCalisma+0xf26>
 8004f7e:	4b53      	ldr	r3, [pc, #332]	@ (80050cc <checkAktifCalisma+0x106c>)
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d027      	beq.n	8004fd6 <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8004f86:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8004f8a:	484d      	ldr	r0, [pc, #308]	@ (80050c0 <checkAktifCalisma+0x1060>)
 8004f8c:	f004 ff4e 	bl	8009e2c <HAL_GPIO_ReadPin>
 8004f90:	4603      	mov	r3, r0
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d103      	bne.n	8004f9e <checkAktifCalisma+0xf3e>
 8004f96:	4b4e      	ldr	r3, [pc, #312]	@ (80050d0 <checkAktifCalisma+0x1070>)
 8004f98:	781b      	ldrb	r3, [r3, #0]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d007      	beq.n	8004fae <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8004f9e:	4b4e      	ldr	r3, [pc, #312]	@ (80050d8 <checkAktifCalisma+0x1078>)
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d103      	bne.n	8004fae <checkAktifCalisma+0xf4e>
 8004fa6:	4b4d      	ldr	r3, [pc, #308]	@ (80050dc <checkAktifCalisma+0x107c>)
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d013      	beq.n	8004fd6 <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 8004fae:	4b4e      	ldr	r3, [pc, #312]	@ (80050e8 <checkAktifCalisma+0x1088>)
 8004fb0:	781b      	ldrb	r3, [r3, #0]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00f      	beq.n	8004fd6 <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 8004fb6:	4b4d      	ldr	r3, [pc, #308]	@ (80050ec <checkAktifCalisma+0x108c>)
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	f083 0301 	eor.w	r3, r3, #1
 8004fbe:	b2db      	uxtb	r3, r3
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d008      	beq.n	8004fd6 <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8004fc4:	4b4a      	ldr	r3, [pc, #296]	@ (80050f0 <checkAktifCalisma+0x1090>)
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8004fca:	4b4a      	ldr	r3, [pc, #296]	@ (80050f4 <checkAktifCalisma+0x1094>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	4a4a      	ldr	r2, [pc, #296]	@ (80050f8 <checkAktifCalisma+0x1098>)
 8004fd0:	6013      	str	r3, [r2, #0]
			bekle();
 8004fd2:	f7fe fea9 	bl	8003d28 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8004fd6:	4b47      	ldr	r3, [pc, #284]	@ (80050f4 <checkAktifCalisma+0x1094>)
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	4b47      	ldr	r3, [pc, #284]	@ (80050f8 <checkAktifCalisma+0x1098>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	1ad3      	subs	r3, r2, r3
 8004fe0:	4a46      	ldr	r2, [pc, #280]	@ (80050fc <checkAktifCalisma+0x109c>)
 8004fe2:	7812      	ldrb	r2, [r2, #0]
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d214      	bcs.n	8005012 <checkAktifCalisma+0xfb2>
 8004fe8:	4b37      	ldr	r3, [pc, #220]	@ (80050c8 <checkAktifCalisma+0x1068>)
 8004fea:	781b      	ldrb	r3, [r3, #0]
 8004fec:	f083 0301 	eor.w	r3, r3, #1
 8004ff0:	b2db      	uxtb	r3, r3
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d006      	beq.n	8005004 <checkAktifCalisma+0xfa4>
 8004ff6:	4b35      	ldr	r3, [pc, #212]	@ (80050cc <checkAktifCalisma+0x106c>)
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	f083 0301 	eor.w	r3, r3, #1
 8004ffe:	b2db      	uxtb	r3, r3
 8005000:	2b00      	cmp	r3, #0
 8005002:	d106      	bne.n	8005012 <checkAktifCalisma+0xfb2>
 8005004:	4b38      	ldr	r3, [pc, #224]	@ (80050e8 <checkAktifCalisma+0x1088>)
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	f083 0301 	eor.w	r3, r3, #1
 800500c:	b2db      	uxtb	r3, r3
 800500e:	2b00      	cmp	r3, #0
 8005010:	d002      	beq.n	8005018 <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8005012:	4b37      	ldr	r3, [pc, #220]	@ (80050f0 <checkAktifCalisma+0x1090>)
 8005014:	2200      	movs	r2, #0
 8005016:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8005018:	4b31      	ldr	r3, [pc, #196]	@ (80050e0 <checkAktifCalisma+0x1080>)
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	2b01      	cmp	r3, #1
 800501e:	d12b      	bne.n	8005078 <checkAktifCalisma+0x1018>
 8005020:	4b30      	ldr	r3, [pc, #192]	@ (80050e4 <checkAktifCalisma+0x1084>)
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	2b02      	cmp	r3, #2
 8005026:	d003      	beq.n	8005030 <checkAktifCalisma+0xfd0>
 8005028:	4b2e      	ldr	r3, [pc, #184]	@ (80050e4 <checkAktifCalisma+0x1084>)
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	2b03      	cmp	r3, #3
 800502e:	d123      	bne.n	8005078 <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005030:	4b25      	ldr	r3, [pc, #148]	@ (80050c8 <checkAktifCalisma+0x1068>)
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	2b00      	cmp	r3, #0
 8005036:	d103      	bne.n	8005040 <checkAktifCalisma+0xfe0>
 8005038:	4b24      	ldr	r3, [pc, #144]	@ (80050cc <checkAktifCalisma+0x106c>)
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d01b      	beq.n	8005078 <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8005040:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005044:	481e      	ldr	r0, [pc, #120]	@ (80050c0 <checkAktifCalisma+0x1060>)
 8005046:	f004 fef1 	bl	8009e2c <HAL_GPIO_ReadPin>
 800504a:	4603      	mov	r3, r0
 800504c:	2b00      	cmp	r3, #0
 800504e:	d103      	bne.n	8005058 <checkAktifCalisma+0xff8>
 8005050:	4b1f      	ldr	r3, [pc, #124]	@ (80050d0 <checkAktifCalisma+0x1070>)
 8005052:	781b      	ldrb	r3, [r3, #0]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d007      	beq.n	8005068 <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8005058:	4b1f      	ldr	r3, [pc, #124]	@ (80050d8 <checkAktifCalisma+0x1078>)
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d103      	bne.n	8005068 <checkAktifCalisma+0x1008>
 8005060:	4b1e      	ldr	r3, [pc, #120]	@ (80050dc <checkAktifCalisma+0x107c>)
 8005062:	781b      	ldrb	r3, [r3, #0]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d007      	beq.n	8005078 <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8005068:	4b1f      	ldr	r3, [pc, #124]	@ (80050e8 <checkAktifCalisma+0x1088>)
 800506a:	781b      	ldrb	r3, [r3, #0]
 800506c:	2b00      	cmp	r3, #0
 800506e:	d003      	beq.n	8005078 <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8005070:	4b23      	ldr	r3, [pc, #140]	@ (8005100 <checkAktifCalisma+0x10a0>)
 8005072:	2201      	movs	r2, #1
 8005074:	701a      	strb	r2, [r3, #0]
 8005076:	e002      	b.n	800507e <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8005078:	4b21      	ldr	r3, [pc, #132]	@ (8005100 <checkAktifCalisma+0x10a0>)
 800507a:	2200      	movs	r2, #0
 800507c:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 800507e:	4b18      	ldr	r3, [pc, #96]	@ (80050e0 <checkAktifCalisma+0x1080>)
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	2b02      	cmp	r3, #2
 8005084:	d140      	bne.n	8005108 <checkAktifCalisma+0x10a8>
 8005086:	4b17      	ldr	r3, [pc, #92]	@ (80050e4 <checkAktifCalisma+0x1084>)
 8005088:	781b      	ldrb	r3, [r3, #0]
 800508a:	2b02      	cmp	r3, #2
 800508c:	d003      	beq.n	8005096 <checkAktifCalisma+0x1036>
 800508e:	4b15      	ldr	r3, [pc, #84]	@ (80050e4 <checkAktifCalisma+0x1084>)
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	2b03      	cmp	r3, #3
 8005094:	d138      	bne.n	8005108 <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8005096:	4b0c      	ldr	r3, [pc, #48]	@ (80050c8 <checkAktifCalisma+0x1068>)
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d103      	bne.n	80050a6 <checkAktifCalisma+0x1046>
 800509e:	4b0b      	ldr	r3, [pc, #44]	@ (80050cc <checkAktifCalisma+0x106c>)
 80050a0:	781b      	ldrb	r3, [r3, #0]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d030      	beq.n	8005108 <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 80050a6:	4b10      	ldr	r3, [pc, #64]	@ (80050e8 <checkAktifCalisma+0x1088>)
 80050a8:	781b      	ldrb	r3, [r3, #0]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d02c      	beq.n	8005108 <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 80050ae:	4b15      	ldr	r3, [pc, #84]	@ (8005104 <checkAktifCalisma+0x10a4>)
 80050b0:	2201      	movs	r2, #1
 80050b2:	701a      	strb	r2, [r3, #0]
 80050b4:	e02b      	b.n	800510e <checkAktifCalisma+0x10ae>
 80050b6:	bf00      	nop
 80050b8:	40010800 	.word	0x40010800
 80050bc:	200010ad 	.word	0x200010ad
 80050c0:	40011000 	.word	0x40011000
 80050c4:	200010a6 	.word	0x200010a6
 80050c8:	200010ec 	.word	0x200010ec
 80050cc:	200010ed 	.word	0x200010ed
 80050d0:	200010ac 	.word	0x200010ac
 80050d4:	40010c00 	.word	0x40010c00
 80050d8:	200010fc 	.word	0x200010fc
 80050dc:	200010fd 	.word	0x200010fd
 80050e0:	200010ab 	.word	0x200010ab
 80050e4:	200010a8 	.word	0x200010a8
 80050e8:	200010e2 	.word	0x200010e2
 80050ec:	200010cf 	.word	0x200010cf
 80050f0:	200010e9 	.word	0x200010e9
 80050f4:	20001078 	.word	0x20001078
 80050f8:	2000107c 	.word	0x2000107c
 80050fc:	200010bb 	.word	0x200010bb
 8005100:	200010ea 	.word	0x200010ea
 8005104:	200010eb 	.word	0x200010eb
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 8005108:	4b8b      	ldr	r3, [pc, #556]	@ (8005338 <checkAktifCalisma+0x12d8>)
 800510a:	2200      	movs	r2, #0
 800510c:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 800510e:	4b8b      	ldr	r3, [pc, #556]	@ (800533c <checkAktifCalisma+0x12dc>)
 8005110:	781b      	ldrb	r3, [r3, #0]
 8005112:	2b00      	cmp	r3, #0
 8005114:	d107      	bne.n	8005126 <checkAktifCalisma+0x10c6>
 8005116:	4b8a      	ldr	r3, [pc, #552]	@ (8005340 <checkAktifCalisma+0x12e0>)
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d103      	bne.n	8005126 <checkAktifCalisma+0x10c6>
 800511e:	4b86      	ldr	r3, [pc, #536]	@ (8005338 <checkAktifCalisma+0x12d8>)
 8005120:	781b      	ldrb	r3, [r3, #0]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d005      	beq.n	8005132 <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8005126:	2201      	movs	r2, #1
 8005128:	2120      	movs	r1, #32
 800512a:	4886      	ldr	r0, [pc, #536]	@ (8005344 <checkAktifCalisma+0x12e4>)
 800512c:	f004 fe95 	bl	8009e5a <HAL_GPIO_WritePin>
 8005130:	e004      	b.n	800513c <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005132:	2200      	movs	r2, #0
 8005134:	2120      	movs	r1, #32
 8005136:	4883      	ldr	r0, [pc, #524]	@ (8005344 <checkAktifCalisma+0x12e4>)
 8005138:	f004 fe8f 	bl	8009e5a <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 800513c:	4b82      	ldr	r3, [pc, #520]	@ (8005348 <checkAktifCalisma+0x12e8>)
 800513e:	781b      	ldrb	r3, [r3, #0]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d00e      	beq.n	8005162 <checkAktifCalisma+0x1102>
 8005144:	2102      	movs	r1, #2
 8005146:	4881      	ldr	r0, [pc, #516]	@ (800534c <checkAktifCalisma+0x12ec>)
 8005148:	f004 fe70 	bl	8009e2c <HAL_GPIO_ReadPin>
 800514c:	4603      	mov	r3, r0
 800514e:	2b01      	cmp	r3, #1
 8005150:	d107      	bne.n	8005162 <checkAktifCalisma+0x1102>
 8005152:	4b7f      	ldr	r3, [pc, #508]	@ (8005350 <checkAktifCalisma+0x12f0>)
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	2b00      	cmp	r3, #0
 8005158:	d103      	bne.n	8005162 <checkAktifCalisma+0x1102>
 800515a:	4b7e      	ldr	r3, [pc, #504]	@ (8005354 <checkAktifCalisma+0x12f4>)
 800515c:	781b      	ldrb	r3, [r3, #0]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d112      	bne.n	8005188 <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8005162:	4b7d      	ldr	r3, [pc, #500]	@ (8005358 <checkAktifCalisma+0x12f8>)
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d066      	beq.n	8005238 <checkAktifCalisma+0x11d8>
 800516a:	2104      	movs	r1, #4
 800516c:	4877      	ldr	r0, [pc, #476]	@ (800534c <checkAktifCalisma+0x12ec>)
 800516e:	f004 fe5d 	bl	8009e2c <HAL_GPIO_ReadPin>
 8005172:	4603      	mov	r3, r0
 8005174:	2b01      	cmp	r3, #1
 8005176:	d15f      	bne.n	8005238 <checkAktifCalisma+0x11d8>
 8005178:	4b75      	ldr	r3, [pc, #468]	@ (8005350 <checkAktifCalisma+0x12f0>)
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	2b00      	cmp	r3, #0
 800517e:	d05b      	beq.n	8005238 <checkAktifCalisma+0x11d8>
 8005180:	4b74      	ldr	r3, [pc, #464]	@ (8005354 <checkAktifCalisma+0x12f4>)
 8005182:	781b      	ldrb	r3, [r3, #0]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d057      	beq.n	8005238 <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 8005188:	4b74      	ldr	r3, [pc, #464]	@ (800535c <checkAktifCalisma+0x12fc>)
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	3301      	adds	r3, #1
 800518e:	b2da      	uxtb	r2, r3
 8005190:	4b72      	ldr	r3, [pc, #456]	@ (800535c <checkAktifCalisma+0x12fc>)
 8005192:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8005194:	4b71      	ldr	r3, [pc, #452]	@ (800535c <checkAktifCalisma+0x12fc>)
 8005196:	781b      	ldrb	r3, [r3, #0]
 8005198:	2b09      	cmp	r3, #9
 800519a:	d908      	bls.n	80051ae <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 800519c:	4b6f      	ldr	r3, [pc, #444]	@ (800535c <checkAktifCalisma+0x12fc>)
 800519e:	2200      	movs	r2, #0
 80051a0:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 80051a2:	4b6f      	ldr	r3, [pc, #444]	@ (8005360 <checkAktifCalisma+0x1300>)
 80051a4:	781b      	ldrb	r3, [r3, #0]
 80051a6:	3301      	adds	r3, #1
 80051a8:	b2da      	uxtb	r2, r3
 80051aa:	4b6d      	ldr	r3, [pc, #436]	@ (8005360 <checkAktifCalisma+0x1300>)
 80051ac:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 80051ae:	4b6c      	ldr	r3, [pc, #432]	@ (8005360 <checkAktifCalisma+0x1300>)
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	2b09      	cmp	r3, #9
 80051b4:	d908      	bls.n	80051c8 <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 80051b6:	4b6a      	ldr	r3, [pc, #424]	@ (8005360 <checkAktifCalisma+0x1300>)
 80051b8:	2200      	movs	r2, #0
 80051ba:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 80051bc:	4b69      	ldr	r3, [pc, #420]	@ (8005364 <checkAktifCalisma+0x1304>)
 80051be:	781b      	ldrb	r3, [r3, #0]
 80051c0:	3301      	adds	r3, #1
 80051c2:	b2da      	uxtb	r2, r3
 80051c4:	4b67      	ldr	r3, [pc, #412]	@ (8005364 <checkAktifCalisma+0x1304>)
 80051c6:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 80051c8:	4b66      	ldr	r3, [pc, #408]	@ (8005364 <checkAktifCalisma+0x1304>)
 80051ca:	781b      	ldrb	r3, [r3, #0]
 80051cc:	2b09      	cmp	r3, #9
 80051ce:	d908      	bls.n	80051e2 <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 80051d0:	4b64      	ldr	r3, [pc, #400]	@ (8005364 <checkAktifCalisma+0x1304>)
 80051d2:	2200      	movs	r2, #0
 80051d4:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 80051d6:	4b64      	ldr	r3, [pc, #400]	@ (8005368 <checkAktifCalisma+0x1308>)
 80051d8:	781b      	ldrb	r3, [r3, #0]
 80051da:	3301      	adds	r3, #1
 80051dc:	b2da      	uxtb	r2, r3
 80051de:	4b62      	ldr	r3, [pc, #392]	@ (8005368 <checkAktifCalisma+0x1308>)
 80051e0:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 80051e2:	4b61      	ldr	r3, [pc, #388]	@ (8005368 <checkAktifCalisma+0x1308>)
 80051e4:	781b      	ldrb	r3, [r3, #0]
 80051e6:	2b09      	cmp	r3, #9
 80051e8:	d908      	bls.n	80051fc <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 80051ea:	4b5f      	ldr	r3, [pc, #380]	@ (8005368 <checkAktifCalisma+0x1308>)
 80051ec:	2200      	movs	r2, #0
 80051ee:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 80051f0:	4b5e      	ldr	r3, [pc, #376]	@ (800536c <checkAktifCalisma+0x130c>)
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	3301      	adds	r3, #1
 80051f6:	b2da      	uxtb	r2, r3
 80051f8:	4b5c      	ldr	r3, [pc, #368]	@ (800536c <checkAktifCalisma+0x130c>)
 80051fa:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 80051fc:	4b5b      	ldr	r3, [pc, #364]	@ (800536c <checkAktifCalisma+0x130c>)
 80051fe:	781a      	ldrb	r2, [r3, #0]
 8005200:	4b5b      	ldr	r3, [pc, #364]	@ (8005370 <checkAktifCalisma+0x1310>)
 8005202:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8005206:	4b58      	ldr	r3, [pc, #352]	@ (8005368 <checkAktifCalisma+0x1308>)
 8005208:	781a      	ldrb	r2, [r3, #0]
 800520a:	4b59      	ldr	r3, [pc, #356]	@ (8005370 <checkAktifCalisma+0x1310>)
 800520c:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 800520e:	4b55      	ldr	r3, [pc, #340]	@ (8005364 <checkAktifCalisma+0x1304>)
 8005210:	781a      	ldrb	r2, [r3, #0]
 8005212:	4b57      	ldr	r3, [pc, #348]	@ (8005370 <checkAktifCalisma+0x1310>)
 8005214:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8005216:	4b52      	ldr	r3, [pc, #328]	@ (8005360 <checkAktifCalisma+0x1300>)
 8005218:	781a      	ldrb	r2, [r3, #0]
 800521a:	4b55      	ldr	r3, [pc, #340]	@ (8005370 <checkAktifCalisma+0x1310>)
 800521c:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 800521e:	4b4f      	ldr	r3, [pc, #316]	@ (800535c <checkAktifCalisma+0x12fc>)
 8005220:	781a      	ldrb	r2, [r3, #0]
 8005222:	4b53      	ldr	r3, [pc, #332]	@ (8005370 <checkAktifCalisma+0x1310>)
 8005224:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 8005226:	4b53      	ldr	r3, [pc, #332]	@ (8005374 <checkAktifCalisma+0x1314>)
 8005228:	2201      	movs	r2, #1
 800522a:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 800522c:	4b46      	ldr	r3, [pc, #280]	@ (8005348 <checkAktifCalisma+0x12e8>)
 800522e:	2200      	movs	r2, #0
 8005230:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 8005232:	4b49      	ldr	r3, [pc, #292]	@ (8005358 <checkAktifCalisma+0x12f8>)
 8005234:	2200      	movs	r2, #0
 8005236:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8005238:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800523c:	484e      	ldr	r0, [pc, #312]	@ (8005378 <checkAktifCalisma+0x1318>)
 800523e:	f004 fdf5 	bl	8009e2c <HAL_GPIO_ReadPin>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d016      	beq.n	8005276 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8005248:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800524c:	484a      	ldr	r0, [pc, #296]	@ (8005378 <checkAktifCalisma+0x1318>)
 800524e:	f004 fded 	bl	8009e2c <HAL_GPIO_ReadPin>
 8005252:	4603      	mov	r3, r0
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00e      	beq.n	8005276 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8005258:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800525c:	4846      	ldr	r0, [pc, #280]	@ (8005378 <checkAktifCalisma+0x1318>)
 800525e:	f004 fde5 	bl	8009e2c <HAL_GPIO_ReadPin>
 8005262:	4603      	mov	r3, r0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d006      	beq.n	8005276 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8005268:	2140      	movs	r1, #64	@ 0x40
 800526a:	4838      	ldr	r0, [pc, #224]	@ (800534c <checkAktifCalisma+0x12ec>)
 800526c:	f004 fdde 	bl	8009e2c <HAL_GPIO_ReadPin>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d103      	bne.n	800527e <checkAktifCalisma+0x121e>
			startBasili=1;
 8005276:	4b41      	ldr	r3, [pc, #260]	@ (800537c <checkAktifCalisma+0x131c>)
 8005278:	2201      	movs	r2, #1
 800527a:	701a      	strb	r2, [r3, #0]
 800527c:	e002      	b.n	8005284 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 800527e:	4b3f      	ldr	r3, [pc, #252]	@ (800537c <checkAktifCalisma+0x131c>)
 8005280:	2200      	movs	r2, #0
 8005282:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8005284:	4b3d      	ldr	r3, [pc, #244]	@ (800537c <checkAktifCalisma+0x131c>)
 8005286:	781b      	ldrb	r3, [r3, #0]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d016      	beq.n	80052ba <checkAktifCalisma+0x125a>
 800528c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005290:	4839      	ldr	r0, [pc, #228]	@ (8005378 <checkAktifCalisma+0x1318>)
 8005292:	f004 fdcb 	bl	8009e2c <HAL_GPIO_ReadPin>
 8005296:	4603      	mov	r3, r0
 8005298:	2b01      	cmp	r3, #1
 800529a:	d10e      	bne.n	80052ba <checkAktifCalisma+0x125a>
			hataVar=1;
 800529c:	4b38      	ldr	r3, [pc, #224]	@ (8005380 <checkAktifCalisma+0x1320>)
 800529e:	2201      	movs	r2, #1
 80052a0:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 80052a2:	2001      	movs	r0, #1
 80052a4:	f7fb fbc6 	bl	8000a34 <hataKoduLcdGoster>
			hata2EEPROM(1);
 80052a8:	2001      	movs	r0, #1
 80052aa:	f7fb fb6b 	bl	8000984 <hata2EEPROM>
			convertAndSendData();
 80052ae:	f003 f875 	bl	800839c <convertAndSendData>
			acilstophatasi=1;
 80052b2:	4b34      	ldr	r3, [pc, #208]	@ (8005384 <checkAktifCalisma+0x1324>)
 80052b4:	2201      	movs	r2, #1
 80052b6:	701a      	strb	r2, [r3, #0]
 80052b8:	e018      	b.n	80052ec <checkAktifCalisma+0x128c>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 80052ba:	4b32      	ldr	r3, [pc, #200]	@ (8005384 <checkAktifCalisma+0x1324>)
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d014      	beq.n	80052ec <checkAktifCalisma+0x128c>
 80052c2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80052c6:	482c      	ldr	r0, [pc, #176]	@ (8005378 <checkAktifCalisma+0x1318>)
 80052c8:	f004 fdb0 	bl	8009e2c <HAL_GPIO_ReadPin>
 80052cc:	4603      	mov	r3, r0
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d10c      	bne.n	80052ec <checkAktifCalisma+0x128c>
 80052d2:	4b2a      	ldr	r3, [pc, #168]	@ (800537c <checkAktifCalisma+0x131c>)
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	f083 0301 	eor.w	r3, r3, #1
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d005      	beq.n	80052ec <checkAktifCalisma+0x128c>
			acilstophatasi=0;
 80052e0:	4b28      	ldr	r3, [pc, #160]	@ (8005384 <checkAktifCalisma+0x1324>)
 80052e2:	2200      	movs	r2, #0
 80052e4:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 80052e6:	2001      	movs	r0, #1
 80052e8:	f7fe fcb4 	bl	8003c54 <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 80052ec:	4b26      	ldr	r3, [pc, #152]	@ (8005388 <checkAktifCalisma+0x1328>)
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	f083 0301 	eor.w	r3, r3, #1
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d04e      	beq.n	8005398 <checkAktifCalisma+0x1338>
 80052fa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80052fe:	481e      	ldr	r0, [pc, #120]	@ (8005378 <checkAktifCalisma+0x1318>)
 8005300:	f004 fd94 	bl	8009e2c <HAL_GPIO_ReadPin>
 8005304:	4603      	mov	r3, r0
 8005306:	2b00      	cmp	r3, #0
 8005308:	d003      	beq.n	8005312 <checkAktifCalisma+0x12b2>
 800530a:	4b20      	ldr	r3, [pc, #128]	@ (800538c <checkAktifCalisma+0x132c>)
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d042      	beq.n	8005398 <checkAktifCalisma+0x1338>
 8005312:	4b1f      	ldr	r3, [pc, #124]	@ (8005390 <checkAktifCalisma+0x1330>)
 8005314:	781b      	ldrb	r3, [r3, #0]
 8005316:	2b01      	cmp	r3, #1
 8005318:	d13e      	bne.n	8005398 <checkAktifCalisma+0x1338>
			hataVar=1;
 800531a:	4b19      	ldr	r3, [pc, #100]	@ (8005380 <checkAktifCalisma+0x1320>)
 800531c:	2201      	movs	r2, #1
 800531e:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 8005320:	2002      	movs	r0, #2
 8005322:	f7fb fb87 	bl	8000a34 <hataKoduLcdGoster>
			hata2EEPROM(2);
 8005326:	2002      	movs	r0, #2
 8005328:	f7fb fb2c 	bl	8000984 <hata2EEPROM>
			convertAndSendData();
 800532c:	f003 f836 	bl	800839c <convertAndSendData>
			emniyetCercevesihatasi=1;
 8005330:	4b18      	ldr	r3, [pc, #96]	@ (8005394 <checkAktifCalisma+0x1334>)
 8005332:	2201      	movs	r2, #1
 8005334:	701a      	strb	r2, [r3, #0]
 8005336:	e047      	b.n	80053c8 <checkAktifCalisma+0x1368>
 8005338:	200010eb 	.word	0x200010eb
 800533c:	200010ea 	.word	0x200010ea
 8005340:	200010e9 	.word	0x200010e9
 8005344:	40010800 	.word	0x40010800
 8005348:	200010df 	.word	0x200010df
 800534c:	40011000 	.word	0x40011000
 8005350:	200010a6 	.word	0x200010a6
 8005354:	200010e2 	.word	0x200010e2
 8005358:	200010e0 	.word	0x200010e0
 800535c:	2000109d 	.word	0x2000109d
 8005360:	2000109e 	.word	0x2000109e
 8005364:	20000000 	.word	0x20000000
 8005368:	20000001 	.word	0x20000001
 800536c:	2000109f 	.word	0x2000109f
 8005370:	20000fc8 	.word	0x20000fc8
 8005374:	200010cc 	.word	0x200010cc
 8005378:	40010c00 	.word	0x40010c00
 800537c:	200010ee 	.word	0x200010ee
 8005380:	200010f5 	.word	0x200010f5
 8005384:	200010f0 	.word	0x200010f0
 8005388:	200010f7 	.word	0x200010f7
 800538c:	20001101 	.word	0x20001101
 8005390:	200010a4 	.word	0x200010a4
 8005394:	200010f1 	.word	0x200010f1
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8005398:	4b9b      	ldr	r3, [pc, #620]	@ (8005608 <checkAktifCalisma+0x15a8>)
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d013      	beq.n	80053c8 <checkAktifCalisma+0x1368>
 80053a0:	4b9a      	ldr	r3, [pc, #616]	@ (800560c <checkAktifCalisma+0x15ac>)
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d00f      	beq.n	80053c8 <checkAktifCalisma+0x1368>
 80053a8:	4b99      	ldr	r3, [pc, #612]	@ (8005610 <checkAktifCalisma+0x15b0>)
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	f083 0301 	eor.w	r3, r3, #1
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d008      	beq.n	80053c8 <checkAktifCalisma+0x1368>
			emniyetCercevesihatasi=0;
 80053b6:	4b94      	ldr	r3, [pc, #592]	@ (8005608 <checkAktifCalisma+0x15a8>)
 80053b8:	2200      	movs	r2, #0
 80053ba:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 80053bc:	4b95      	ldr	r3, [pc, #596]	@ (8005614 <checkAktifCalisma+0x15b4>)
 80053be:	2200      	movs	r2, #0
 80053c0:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 80053c2:	2002      	movs	r0, #2
 80053c4:	f7fe fc46 	bl	8003c54 <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 80053c8:	4b93      	ldr	r3, [pc, #588]	@ (8005618 <checkAktifCalisma+0x15b8>)
 80053ca:	781b      	ldrb	r3, [r3, #0]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d11e      	bne.n	800540e <checkAktifCalisma+0x13ae>
 80053d0:	4b92      	ldr	r3, [pc, #584]	@ (800561c <checkAktifCalisma+0x15bc>)
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d11a      	bne.n	800540e <checkAktifCalisma+0x13ae>
 80053d8:	4b91      	ldr	r3, [pc, #580]	@ (8005620 <checkAktifCalisma+0x15c0>)
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d016      	beq.n	800540e <checkAktifCalisma+0x13ae>
 80053e0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80053e4:	488f      	ldr	r0, [pc, #572]	@ (8005624 <checkAktifCalisma+0x15c4>)
 80053e6:	f004 fd21 	bl	8009e2c <HAL_GPIO_ReadPin>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b01      	cmp	r3, #1
 80053ee:	d10e      	bne.n	800540e <checkAktifCalisma+0x13ae>
			hataVar=1;
 80053f0:	4b8d      	ldr	r3, [pc, #564]	@ (8005628 <checkAktifCalisma+0x15c8>)
 80053f2:	2201      	movs	r2, #1
 80053f4:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 80053f6:	2003      	movs	r0, #3
 80053f8:	f7fb fb1c 	bl	8000a34 <hataKoduLcdGoster>
			hata2EEPROM(3);
 80053fc:	2003      	movs	r0, #3
 80053fe:	f7fb fac1 	bl	8000984 <hata2EEPROM>
			convertAndSendData();
 8005402:	f002 ffcb 	bl	800839c <convertAndSendData>
			basinchatasi=1;
 8005406:	4b89      	ldr	r3, [pc, #548]	@ (800562c <checkAktifCalisma+0x15cc>)
 8005408:	2201      	movs	r2, #1
 800540a:	701a      	strb	r2, [r3, #0]
 800540c:	e015      	b.n	800543a <checkAktifCalisma+0x13da>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 800540e:	4b87      	ldr	r3, [pc, #540]	@ (800562c <checkAktifCalisma+0x15cc>)
 8005410:	781b      	ldrb	r3, [r3, #0]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d011      	beq.n	800543a <checkAktifCalisma+0x13da>
 8005416:	4b80      	ldr	r3, [pc, #512]	@ (8005618 <checkAktifCalisma+0x15b8>)
 8005418:	781b      	ldrb	r3, [r3, #0]
 800541a:	2b01      	cmp	r3, #1
 800541c:	d10d      	bne.n	800543a <checkAktifCalisma+0x13da>
 800541e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005422:	4883      	ldr	r0, [pc, #524]	@ (8005630 <checkAktifCalisma+0x15d0>)
 8005424:	f004 fd02 	bl	8009e2c <HAL_GPIO_ReadPin>
 8005428:	4603      	mov	r3, r0
 800542a:	2b01      	cmp	r3, #1
 800542c:	d105      	bne.n	800543a <checkAktifCalisma+0x13da>
			basinchatasi=0;
 800542e:	4b7f      	ldr	r3, [pc, #508]	@ (800562c <checkAktifCalisma+0x15cc>)
 8005430:	2200      	movs	r2, #0
 8005432:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 8005434:	2003      	movs	r0, #3
 8005436:	f7fe fc0d 	bl	8003c54 <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 800543a:	4b7e      	ldr	r3, [pc, #504]	@ (8005634 <checkAktifCalisma+0x15d4>)
 800543c:	781b      	ldrb	r3, [r3, #0]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d103      	bne.n	800544a <checkAktifCalisma+0x13ea>
 8005442:	4b7d      	ldr	r3, [pc, #500]	@ (8005638 <checkAktifCalisma+0x15d8>)
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d01e      	beq.n	8005488 <checkAktifCalisma+0x1428>
 800544a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800544e:	487b      	ldr	r0, [pc, #492]	@ (800563c <checkAktifCalisma+0x15dc>)
 8005450:	f004 fcec 	bl	8009e2c <HAL_GPIO_ReadPin>
 8005454:	4603      	mov	r3, r0
 8005456:	2b01      	cmp	r3, #1
 8005458:	d116      	bne.n	8005488 <checkAktifCalisma+0x1428>
 800545a:	4b79      	ldr	r3, [pc, #484]	@ (8005640 <checkAktifCalisma+0x15e0>)
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	2b01      	cmp	r3, #1
 8005460:	d003      	beq.n	800546a <checkAktifCalisma+0x140a>
 8005462:	4b77      	ldr	r3, [pc, #476]	@ (8005640 <checkAktifCalisma+0x15e0>)
 8005464:	781b      	ldrb	r3, [r3, #0]
 8005466:	2b03      	cmp	r3, #3
 8005468:	d10e      	bne.n	8005488 <checkAktifCalisma+0x1428>
			hataVar=1;
 800546a:	4b6f      	ldr	r3, [pc, #444]	@ (8005628 <checkAktifCalisma+0x15c8>)
 800546c:	2201      	movs	r2, #1
 800546e:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 8005470:	2004      	movs	r0, #4
 8005472:	f7fb fadf 	bl	8000a34 <hataKoduLcdGoster>
			hata2EEPROM(4);
 8005476:	2004      	movs	r0, #4
 8005478:	f7fb fa84 	bl	8000984 <hata2EEPROM>
			convertAndSendData();
 800547c:	f002 ff8e 	bl	800839c <convertAndSendData>
			katkapisivicihatasi=1;
 8005480:	4b70      	ldr	r3, [pc, #448]	@ (8005644 <checkAktifCalisma+0x15e4>)
 8005482:	2201      	movs	r2, #1
 8005484:	701a      	strb	r2, [r3, #0]
 8005486:	e01f      	b.n	80054c8 <checkAktifCalisma+0x1468>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8005488:	4b6e      	ldr	r3, [pc, #440]	@ (8005644 <checkAktifCalisma+0x15e4>)
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d01b      	beq.n	80054c8 <checkAktifCalisma+0x1468>
 8005490:	4b6d      	ldr	r3, [pc, #436]	@ (8005648 <checkAktifCalisma+0x15e8>)
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d017      	beq.n	80054c8 <checkAktifCalisma+0x1468>
 8005498:	4b66      	ldr	r3, [pc, #408]	@ (8005634 <checkAktifCalisma+0x15d4>)
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	f083 0301 	eor.w	r3, r3, #1
 80054a0:	b2db      	uxtb	r3, r3
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d010      	beq.n	80054c8 <checkAktifCalisma+0x1468>
 80054a6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80054aa:	4864      	ldr	r0, [pc, #400]	@ (800563c <checkAktifCalisma+0x15dc>)
 80054ac:	f004 fcbe 	bl	8009e2c <HAL_GPIO_ReadPin>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d108      	bne.n	80054c8 <checkAktifCalisma+0x1468>
			katkapisivicihatasi=0;
 80054b6:	4b63      	ldr	r3, [pc, #396]	@ (8005644 <checkAktifCalisma+0x15e4>)
 80054b8:	2200      	movs	r2, #0
 80054ba:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 80054bc:	4b5e      	ldr	r3, [pc, #376]	@ (8005638 <checkAktifCalisma+0x15d8>)
 80054be:	2200      	movs	r2, #0
 80054c0:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 80054c2:	2004      	movs	r0, #4
 80054c4:	f7fe fbc6 	bl	8003c54 <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 80054c8:	4b5a      	ldr	r3, [pc, #360]	@ (8005634 <checkAktifCalisma+0x15d4>)
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d103      	bne.n	80054d8 <checkAktifCalisma+0x1478>
 80054d0:	4b5e      	ldr	r3, [pc, #376]	@ (800564c <checkAktifCalisma+0x15ec>)
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d01e      	beq.n	8005516 <checkAktifCalisma+0x14b6>
 80054d8:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80054dc:	4857      	ldr	r0, [pc, #348]	@ (800563c <checkAktifCalisma+0x15dc>)
 80054de:	f004 fca5 	bl	8009e2c <HAL_GPIO_ReadPin>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b01      	cmp	r3, #1
 80054e6:	d116      	bne.n	8005516 <checkAktifCalisma+0x14b6>
 80054e8:	4b55      	ldr	r3, [pc, #340]	@ (8005640 <checkAktifCalisma+0x15e0>)
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d003      	beq.n	80054f8 <checkAktifCalisma+0x1498>
 80054f0:	4b53      	ldr	r3, [pc, #332]	@ (8005640 <checkAktifCalisma+0x15e0>)
 80054f2:	781b      	ldrb	r3, [r3, #0]
 80054f4:	2b03      	cmp	r3, #3
 80054f6:	d10e      	bne.n	8005516 <checkAktifCalisma+0x14b6>
			hataVar=1;
 80054f8:	4b4b      	ldr	r3, [pc, #300]	@ (8005628 <checkAktifCalisma+0x15c8>)
 80054fa:	2201      	movs	r2, #1
 80054fc:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 80054fe:	2005      	movs	r0, #5
 8005500:	f7fb fa98 	bl	8000a34 <hataKoduLcdGoster>
			hata2EEPROM(5);
 8005504:	2005      	movs	r0, #5
 8005506:	f7fb fa3d 	bl	8000984 <hata2EEPROM>
			convertAndSendData();
 800550a:	f002 ff47 	bl	800839c <convertAndSendData>
			tablakapisivicihatasi=1;
 800550e:	4b50      	ldr	r3, [pc, #320]	@ (8005650 <checkAktifCalisma+0x15f0>)
 8005510:	2201      	movs	r2, #1
 8005512:	701a      	strb	r2, [r3, #0]
 8005514:	e023      	b.n	800555e <checkAktifCalisma+0x14fe>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8005516:	4b4e      	ldr	r3, [pc, #312]	@ (8005650 <checkAktifCalisma+0x15f0>)
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d01f      	beq.n	800555e <checkAktifCalisma+0x14fe>
 800551e:	4b4a      	ldr	r3, [pc, #296]	@ (8005648 <checkAktifCalisma+0x15e8>)
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d01b      	beq.n	800555e <checkAktifCalisma+0x14fe>
 8005526:	4b43      	ldr	r3, [pc, #268]	@ (8005634 <checkAktifCalisma+0x15d4>)
 8005528:	781b      	ldrb	r3, [r3, #0]
 800552a:	f083 0301 	eor.w	r3, r3, #1
 800552e:	b2db      	uxtb	r3, r3
 8005530:	2b00      	cmp	r3, #0
 8005532:	d014      	beq.n	800555e <checkAktifCalisma+0x14fe>
 8005534:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005538:	4840      	ldr	r0, [pc, #256]	@ (800563c <checkAktifCalisma+0x15dc>)
 800553a:	f004 fc77 	bl	8009e2c <HAL_GPIO_ReadPin>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d10c      	bne.n	800555e <checkAktifCalisma+0x14fe>
 8005544:	4b40      	ldr	r3, [pc, #256]	@ (8005648 <checkAktifCalisma+0x15e8>)
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d008      	beq.n	800555e <checkAktifCalisma+0x14fe>
			tablakapisivicihatasi=0;
 800554c:	4b40      	ldr	r3, [pc, #256]	@ (8005650 <checkAktifCalisma+0x15f0>)
 800554e:	2200      	movs	r2, #0
 8005550:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 8005552:	4b3e      	ldr	r3, [pc, #248]	@ (800564c <checkAktifCalisma+0x15ec>)
 8005554:	2200      	movs	r2, #0
 8005556:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 8005558:	2005      	movs	r0, #5
 800555a:	f7fe fb7b 	bl	8003c54 <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 800555e:	4b30      	ldr	r3, [pc, #192]	@ (8005620 <checkAktifCalisma+0x15c0>)
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d107      	bne.n	8005576 <checkAktifCalisma+0x1516>
 8005566:	4b2a      	ldr	r3, [pc, #168]	@ (8005610 <checkAktifCalisma+0x15b0>)
 8005568:	781b      	ldrb	r3, [r3, #0]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d103      	bne.n	8005576 <checkAktifCalisma+0x1516>
 800556e:	4b39      	ldr	r3, [pc, #228]	@ (8005654 <checkAktifCalisma+0x15f4>)
 8005570:	781b      	ldrb	r3, [r3, #0]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d016      	beq.n	80055a4 <checkAktifCalisma+0x1544>
		    if(millis-timer4>=makineCalismaTmr) {
 8005576:	4b38      	ldr	r3, [pc, #224]	@ (8005658 <checkAktifCalisma+0x15f8>)
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	4b38      	ldr	r3, [pc, #224]	@ (800565c <checkAktifCalisma+0x15fc>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	1ad3      	subs	r3, r2, r3
 8005580:	4a37      	ldr	r2, [pc, #220]	@ (8005660 <checkAktifCalisma+0x1600>)
 8005582:	7812      	ldrb	r2, [r2, #0]
 8005584:	4293      	cmp	r3, r2
 8005586:	d30d      	bcc.n	80055a4 <checkAktifCalisma+0x1544>
			  	hataVar=1;
 8005588:	4b27      	ldr	r3, [pc, #156]	@ (8005628 <checkAktifCalisma+0x15c8>)
 800558a:	2201      	movs	r2, #1
 800558c:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 800558e:	2006      	movs	r0, #6
 8005590:	f7fb fa50 	bl	8000a34 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 8005594:	2006      	movs	r0, #6
 8005596:	f7fb f9f5 	bl	8000984 <hata2EEPROM>
			  	convertAndSendData();
 800559a:	f002 feff 	bl	800839c <convertAndSendData>
			  	maksimumcalismahatasi=1;
 800559e:	4b31      	ldr	r3, [pc, #196]	@ (8005664 <checkAktifCalisma+0x1604>)
 80055a0:	2201      	movs	r2, #1
 80055a2:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 80055a4:	4b2f      	ldr	r3, [pc, #188]	@ (8005664 <checkAktifCalisma+0x1604>)
 80055a6:	781b      	ldrb	r3, [r3, #0]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d013      	beq.n	80055d4 <checkAktifCalisma+0x1574>
 80055ac:	2108      	movs	r1, #8
 80055ae:	4823      	ldr	r0, [pc, #140]	@ (800563c <checkAktifCalisma+0x15dc>)
 80055b0:	f004 fc3c 	bl	8009e2c <HAL_GPIO_ReadPin>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00c      	beq.n	80055d4 <checkAktifCalisma+0x1574>
 80055ba:	4b1e      	ldr	r3, [pc, #120]	@ (8005634 <checkAktifCalisma+0x15d4>)
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	f083 0301 	eor.w	r3, r3, #1
 80055c2:	b2db      	uxtb	r3, r3
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d005      	beq.n	80055d4 <checkAktifCalisma+0x1574>
			maksimumcalismahatasi=0;
 80055c8:	4b26      	ldr	r3, [pc, #152]	@ (8005664 <checkAktifCalisma+0x1604>)
 80055ca:	2200      	movs	r2, #0
 80055cc:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 80055ce:	2006      	movs	r0, #6
 80055d0:	f7fe fb40 	bl	8003c54 <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 80055d4:	4b24      	ldr	r3, [pc, #144]	@ (8005668 <checkAktifCalisma+0x1608>)
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d10b      	bne.n	80055f4 <checkAktifCalisma+0x1594>
 80055dc:	4b0c      	ldr	r3, [pc, #48]	@ (8005610 <checkAktifCalisma+0x15b0>)
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d107      	bne.n	80055f4 <checkAktifCalisma+0x1594>
 80055e4:	4b21      	ldr	r3, [pc, #132]	@ (800566c <checkAktifCalisma+0x160c>)
 80055e6:	781b      	ldrb	r3, [r3, #0]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d103      	bne.n	80055f4 <checkAktifCalisma+0x1594>
 80055ec:	4b19      	ldr	r3, [pc, #100]	@ (8005654 <checkAktifCalisma+0x15f4>)
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d03f      	beq.n	8005674 <checkAktifCalisma+0x1614>
			makineCalisiyor=0;
 80055f4:	4b1e      	ldr	r3, [pc, #120]	@ (8005670 <checkAktifCalisma+0x1610>)
 80055f6:	2200      	movs	r2, #0
 80055f8:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 80055fa:	4b0f      	ldr	r3, [pc, #60]	@ (8005638 <checkAktifCalisma+0x15d8>)
 80055fc:	2201      	movs	r2, #1
 80055fe:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 8005600:	4b12      	ldr	r3, [pc, #72]	@ (800564c <checkAktifCalisma+0x15ec>)
 8005602:	2201      	movs	r2, #1
 8005604:	701a      	strb	r2, [r3, #0]
 8005606:	e03c      	b.n	8005682 <checkAktifCalisma+0x1622>
 8005608:	200010f1 	.word	0x200010f1
 800560c:	200010f7 	.word	0x200010f7
 8005610:	200010d8 	.word	0x200010d8
 8005614:	20001101 	.word	0x20001101
 8005618:	200010a3 	.word	0x200010a3
 800561c:	200010a7 	.word	0x200010a7
 8005620:	200010f4 	.word	0x200010f4
 8005624:	40011000 	.word	0x40011000
 8005628:	200010f5 	.word	0x200010f5
 800562c:	200010fe 	.word	0x200010fe
 8005630:	40010c00 	.word	0x40010c00
 8005634:	200010ee 	.word	0x200010ee
 8005638:	20001102 	.word	0x20001102
 800563c:	40010800 	.word	0x40010800
 8005640:	200010a8 	.word	0x200010a8
 8005644:	200010ff 	.word	0x200010ff
 8005648:	200010e2 	.word	0x200010e2
 800564c:	20001103 	.word	0x20001103
 8005650:	20001100 	.word	0x20001100
 8005654:	200010d7 	.word	0x200010d7
 8005658:	20001078 	.word	0x20001078
 800565c:	2000108c 	.word	0x2000108c
 8005660:	200010b8 	.word	0x200010b8
 8005664:	200010ef 	.word	0x200010ef
 8005668:	200010d5 	.word	0x200010d5
 800566c:	200010d6 	.word	0x200010d6
 8005670:	200010f6 	.word	0x200010f6
		} else {
			makineCalisiyor=1;
 8005674:	4b1e      	ldr	r3, [pc, #120]	@ (80056f0 <checkAktifCalisma+0x1690>)
 8005676:	2201      	movs	r2, #1
 8005678:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 800567a:	4b1e      	ldr	r3, [pc, #120]	@ (80056f4 <checkAktifCalisma+0x1694>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	4a1e      	ldr	r2, [pc, #120]	@ (80056f8 <checkAktifCalisma+0x1698>)
 8005680:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8005682:	4b1e      	ldr	r3, [pc, #120]	@ (80056fc <checkAktifCalisma+0x169c>)
 8005684:	781b      	ldrb	r3, [r3, #0]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d02f      	beq.n	80056ea <checkAktifCalisma+0x168a>
 800568a:	4b1d      	ldr	r3, [pc, #116]	@ (8005700 <checkAktifCalisma+0x16a0>)
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	f083 0301 	eor.w	r3, r3, #1
 8005692:	b2db      	uxtb	r3, r3
 8005694:	2b00      	cmp	r3, #0
 8005696:	d028      	beq.n	80056ea <checkAktifCalisma+0x168a>
 8005698:	4b1a      	ldr	r3, [pc, #104]	@ (8005704 <checkAktifCalisma+0x16a4>)
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	f083 0301 	eor.w	r3, r3, #1
 80056a0:	b2db      	uxtb	r3, r3
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d021      	beq.n	80056ea <checkAktifCalisma+0x168a>
 80056a6:	4b18      	ldr	r3, [pc, #96]	@ (8005708 <checkAktifCalisma+0x16a8>)
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	f083 0301 	eor.w	r3, r3, #1
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d01a      	beq.n	80056ea <checkAktifCalisma+0x168a>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 80056b4:	4b15      	ldr	r3, [pc, #84]	@ (800570c <checkAktifCalisma+0x16ac>)
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	f083 0301 	eor.w	r3, r3, #1
 80056bc:	b2db      	uxtb	r3, r3
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d013      	beq.n	80056ea <checkAktifCalisma+0x168a>
 80056c2:	4b13      	ldr	r3, [pc, #76]	@ (8005710 <checkAktifCalisma+0x16b0>)
 80056c4:	781b      	ldrb	r3, [r3, #0]
 80056c6:	f083 0301 	eor.w	r3, r3, #1
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d00c      	beq.n	80056ea <checkAktifCalisma+0x168a>
 80056d0:	4b10      	ldr	r3, [pc, #64]	@ (8005714 <checkAktifCalisma+0x16b4>)
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	f083 0301 	eor.w	r3, r3, #1
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d005      	beq.n	80056ea <checkAktifCalisma+0x168a>
			hataVar=0;
 80056de:	4b07      	ldr	r3, [pc, #28]	@ (80056fc <checkAktifCalisma+0x169c>)
 80056e0:	2200      	movs	r2, #0
 80056e2:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 80056e4:	2007      	movs	r0, #7
 80056e6:	f7fe fab5 	bl	8003c54 <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 80056ea:	bf00      	nop
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	200010f6 	.word	0x200010f6
 80056f4:	20001078 	.word	0x20001078
 80056f8:	2000108c 	.word	0x2000108c
 80056fc:	200010f5 	.word	0x200010f5
 8005700:	200010f0 	.word	0x200010f0
 8005704:	200010f1 	.word	0x200010f1
 8005708:	200010fe 	.word	0x200010fe
 800570c:	200010ff 	.word	0x200010ff
 8005710:	20001100 	.word	0x20001100
 8005714:	200010ef 	.word	0x200010ef

08005718 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8005718:	b580      	push	{r7, lr}
 800571a:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 800571c:	4b8b      	ldr	r3, [pc, #556]	@ (800594c <checkDemoModCalisma+0x234>)
 800571e:	781b      	ldrb	r3, [r3, #0]
 8005720:	2b01      	cmp	r3, #1
 8005722:	f040 8229 	bne.w	8005b78 <checkDemoModCalisma+0x460>
 8005726:	4b8a      	ldr	r3, [pc, #552]	@ (8005950 <checkDemoModCalisma+0x238>)
 8005728:	781b      	ldrb	r3, [r3, #0]
 800572a:	2b00      	cmp	r3, #0
 800572c:	f000 8224 	beq.w	8005b78 <checkDemoModCalisma+0x460>
 8005730:	4b88      	ldr	r3, [pc, #544]	@ (8005954 <checkDemoModCalisma+0x23c>)
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	f040 821f 	bne.w	8005b78 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800573a:	2102      	movs	r1, #2
 800573c:	4886      	ldr	r0, [pc, #536]	@ (8005958 <checkDemoModCalisma+0x240>)
 800573e:	f004 fb75 	bl	8009e2c <HAL_GPIO_ReadPin>
 8005742:	4603      	mov	r3, r0
 8005744:	2b00      	cmp	r3, #0
 8005746:	d11d      	bne.n	8005784 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 8005748:	4b84      	ldr	r3, [pc, #528]	@ (800595c <checkDemoModCalisma+0x244>)
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	f083 0301 	eor.w	r3, r3, #1
 8005750:	b2db      	uxtb	r3, r3
 8005752:	2b00      	cmp	r3, #0
 8005754:	d016      	beq.n	8005784 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 8005756:	4b82      	ldr	r3, [pc, #520]	@ (8005960 <checkDemoModCalisma+0x248>)
 8005758:	781b      	ldrb	r3, [r3, #0]
 800575a:	f083 0301 	eor.w	r3, r3, #1
 800575e:	b2db      	uxtb	r3, r3
 8005760:	2b00      	cmp	r3, #0
 8005762:	d00f      	beq.n	8005784 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 8005764:	4b7f      	ldr	r3, [pc, #508]	@ (8005964 <checkDemoModCalisma+0x24c>)
 8005766:	781b      	ldrb	r3, [r3, #0]
 8005768:	f083 0301 	eor.w	r3, r3, #1
 800576c:	b2db      	uxtb	r3, r3
 800576e:	2b00      	cmp	r3, #0
 8005770:	d008      	beq.n	8005784 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8005772:	2201      	movs	r2, #1
 8005774:	2104      	movs	r1, #4
 8005776:	487c      	ldr	r0, [pc, #496]	@ (8005968 <checkDemoModCalisma+0x250>)
 8005778:	f004 fb6f 	bl	8009e5a <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 800577c:	4b7b      	ldr	r3, [pc, #492]	@ (800596c <checkDemoModCalisma+0x254>)
 800577e:	2201      	movs	r2, #1
 8005780:	701a      	strb	r2, [r3, #0]
 8005782:	e00e      	b.n	80057a2 <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8005784:	2102      	movs	r1, #2
 8005786:	4874      	ldr	r0, [pc, #464]	@ (8005958 <checkDemoModCalisma+0x240>)
 8005788:	f004 fb50 	bl	8009e2c <HAL_GPIO_ReadPin>
 800578c:	4603      	mov	r3, r0
 800578e:	2b01      	cmp	r3, #1
 8005790:	d107      	bne.n	80057a2 <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8005792:	2200      	movs	r2, #0
 8005794:	2104      	movs	r1, #4
 8005796:	4874      	ldr	r0, [pc, #464]	@ (8005968 <checkDemoModCalisma+0x250>)
 8005798:	f004 fb5f 	bl	8009e5a <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 800579c:	4b73      	ldr	r3, [pc, #460]	@ (800596c <checkDemoModCalisma+0x254>)
 800579e:	2200      	movs	r2, #0
 80057a0:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 80057a2:	4b72      	ldr	r3, [pc, #456]	@ (800596c <checkDemoModCalisma+0x254>)
 80057a4:	781b      	ldrb	r3, [r3, #0]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d10b      	bne.n	80057c2 <checkDemoModCalisma+0xaa>
 80057aa:	4b6d      	ldr	r3, [pc, #436]	@ (8005960 <checkDemoModCalisma+0x248>)
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d107      	bne.n	80057c2 <checkDemoModCalisma+0xaa>
 80057b2:	4b6c      	ldr	r3, [pc, #432]	@ (8005964 <checkDemoModCalisma+0x24c>)
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d103      	bne.n	80057c2 <checkDemoModCalisma+0xaa>
 80057ba:	4b68      	ldr	r3, [pc, #416]	@ (800595c <checkDemoModCalisma+0x244>)
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d00c      	beq.n	80057dc <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 80057c2:	2201      	movs	r2, #1
 80057c4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80057c8:	4867      	ldr	r0, [pc, #412]	@ (8005968 <checkDemoModCalisma+0x250>)
 80057ca:	f004 fb46 	bl	8009e5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 80057ce:	2201      	movs	r2, #1
 80057d0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80057d4:	4864      	ldr	r0, [pc, #400]	@ (8005968 <checkDemoModCalisma+0x250>)
 80057d6:	f004 fb40 	bl	8009e5a <HAL_GPIO_WritePin>
 80057da:	e00b      	b.n	80057f4 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80057dc:	2200      	movs	r2, #0
 80057de:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80057e2:	4861      	ldr	r0, [pc, #388]	@ (8005968 <checkDemoModCalisma+0x250>)
 80057e4:	f004 fb39 	bl	8009e5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80057e8:	2200      	movs	r2, #0
 80057ea:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80057ee:	485e      	ldr	r0, [pc, #376]	@ (8005968 <checkDemoModCalisma+0x250>)
 80057f0:	f004 fb33 	bl	8009e5a <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80057f4:	2102      	movs	r1, #2
 80057f6:	4858      	ldr	r0, [pc, #352]	@ (8005958 <checkDemoModCalisma+0x240>)
 80057f8:	f004 fb18 	bl	8009e2c <HAL_GPIO_ReadPin>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d10d      	bne.n	800581e <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8005802:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005806:	4854      	ldr	r0, [pc, #336]	@ (8005958 <checkDemoModCalisma+0x240>)
 8005808:	f004 fb10 	bl	8009e2c <HAL_GPIO_ReadPin>
 800580c:	4603      	mov	r3, r0
 800580e:	2b00      	cmp	r3, #0
 8005810:	d105      	bne.n	800581e <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 8005812:	4b56      	ldr	r3, [pc, #344]	@ (800596c <checkDemoModCalisma+0x254>)
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	f083 0301 	eor.w	r3, r3, #1
 800581a:	b2db      	uxtb	r3, r3
 800581c:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800581e:	2102      	movs	r1, #2
 8005820:	484d      	ldr	r0, [pc, #308]	@ (8005958 <checkDemoModCalisma+0x240>)
 8005822:	f004 fb03 	bl	8009e2c <HAL_GPIO_ReadPin>
 8005826:	4603      	mov	r3, r0
 8005828:	2b01      	cmp	r3, #1
 800582a:	d125      	bne.n	8005878 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 800582c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005830:	4849      	ldr	r0, [pc, #292]	@ (8005958 <checkDemoModCalisma+0x240>)
 8005832:	f004 fafb 	bl	8009e2c <HAL_GPIO_ReadPin>
 8005836:	4603      	mov	r3, r0
 8005838:	2b00      	cmp	r3, #0
 800583a:	d11d      	bne.n	8005878 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 800583c:	4b4b      	ldr	r3, [pc, #300]	@ (800596c <checkDemoModCalisma+0x254>)
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	f083 0301 	eor.w	r3, r3, #1
 8005844:	b2db      	uxtb	r3, r3
 8005846:	2b00      	cmp	r3, #0
 8005848:	d016      	beq.n	8005878 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 800584a:	4b44      	ldr	r3, [pc, #272]	@ (800595c <checkDemoModCalisma+0x244>)
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	f083 0301 	eor.w	r3, r3, #1
 8005852:	b2db      	uxtb	r3, r3
 8005854:	2b00      	cmp	r3, #0
 8005856:	d00f      	beq.n	8005878 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 8005858:	4b42      	ldr	r3, [pc, #264]	@ (8005964 <checkDemoModCalisma+0x24c>)
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	f083 0301 	eor.w	r3, r3, #1
 8005860:	b2db      	uxtb	r3, r3
 8005862:	2b00      	cmp	r3, #0
 8005864:	d008      	beq.n	8005878 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8005866:	2201      	movs	r2, #1
 8005868:	2120      	movs	r1, #32
 800586a:	483b      	ldr	r0, [pc, #236]	@ (8005958 <checkDemoModCalisma+0x240>)
 800586c:	f004 faf5 	bl	8009e5a <HAL_GPIO_WritePin>
			demoDevYukari=1;
 8005870:	4b3b      	ldr	r3, [pc, #236]	@ (8005960 <checkDemoModCalisma+0x248>)
 8005872:	2201      	movs	r2, #1
 8005874:	701a      	strb	r2, [r3, #0]
 8005876:	e007      	b.n	8005888 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005878:	2200      	movs	r2, #0
 800587a:	2120      	movs	r1, #32
 800587c:	4836      	ldr	r0, [pc, #216]	@ (8005958 <checkDemoModCalisma+0x240>)
 800587e:	f004 faec 	bl	8009e5a <HAL_GPIO_WritePin>
			demoDevYukari=0;
 8005882:	4b37      	ldr	r3, [pc, #220]	@ (8005960 <checkDemoModCalisma+0x248>)
 8005884:	2200      	movs	r2, #0
 8005886:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8005888:	2102      	movs	r1, #2
 800588a:	4833      	ldr	r0, [pc, #204]	@ (8005958 <checkDemoModCalisma+0x240>)
 800588c:	f004 face 	bl	8009e2c <HAL_GPIO_ReadPin>
 8005890:	4603      	mov	r3, r0
 8005892:	2b01      	cmp	r3, #1
 8005894:	d125      	bne.n	80058e2 <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8005896:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800589a:	482f      	ldr	r0, [pc, #188]	@ (8005958 <checkDemoModCalisma+0x240>)
 800589c:	f004 fac6 	bl	8009e2c <HAL_GPIO_ReadPin>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d11d      	bne.n	80058e2 <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 80058a6:	4b31      	ldr	r3, [pc, #196]	@ (800596c <checkDemoModCalisma+0x254>)
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	f083 0301 	eor.w	r3, r3, #1
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d016      	beq.n	80058e2 <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 80058b4:	4b2a      	ldr	r3, [pc, #168]	@ (8005960 <checkDemoModCalisma+0x248>)
 80058b6:	781b      	ldrb	r3, [r3, #0]
 80058b8:	f083 0301 	eor.w	r3, r3, #1
 80058bc:	b2db      	uxtb	r3, r3
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d00f      	beq.n	80058e2 <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 80058c2:	4b26      	ldr	r3, [pc, #152]	@ (800595c <checkDemoModCalisma+0x244>)
 80058c4:	781b      	ldrb	r3, [r3, #0]
 80058c6:	f083 0301 	eor.w	r3, r3, #1
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d008      	beq.n	80058e2 <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 80058d0:	2201      	movs	r2, #1
 80058d2:	2110      	movs	r1, #16
 80058d4:	4820      	ldr	r0, [pc, #128]	@ (8005958 <checkDemoModCalisma+0x240>)
 80058d6:	f004 fac0 	bl	8009e5a <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 80058da:	4b22      	ldr	r3, [pc, #136]	@ (8005964 <checkDemoModCalisma+0x24c>)
 80058dc:	2201      	movs	r2, #1
 80058de:	701a      	strb	r2, [r3, #0]
 80058e0:	e007      	b.n	80058f2 <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80058e2:	2200      	movs	r2, #0
 80058e4:	2110      	movs	r1, #16
 80058e6:	481c      	ldr	r0, [pc, #112]	@ (8005958 <checkDemoModCalisma+0x240>)
 80058e8:	f004 fab7 	bl	8009e5a <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 80058ec:	4b1d      	ldr	r3, [pc, #116]	@ (8005964 <checkDemoModCalisma+0x24c>)
 80058ee:	2200      	movs	r2, #0
 80058f0:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80058f2:	2104      	movs	r1, #4
 80058f4:	4818      	ldr	r0, [pc, #96]	@ (8005958 <checkDemoModCalisma+0x240>)
 80058f6:	f004 fa99 	bl	8009e2c <HAL_GPIO_ReadPin>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d139      	bne.n	8005974 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 8005900:	4b1a      	ldr	r3, [pc, #104]	@ (800596c <checkDemoModCalisma+0x254>)
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	f083 0301 	eor.w	r3, r3, #1
 8005908:	b2db      	uxtb	r3, r3
 800590a:	2b00      	cmp	r3, #0
 800590c:	d032      	beq.n	8005974 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 800590e:	4b15      	ldr	r3, [pc, #84]	@ (8005964 <checkDemoModCalisma+0x24c>)
 8005910:	781b      	ldrb	r3, [r3, #0]
 8005912:	f083 0301 	eor.w	r3, r3, #1
 8005916:	b2db      	uxtb	r3, r3
 8005918:	2b00      	cmp	r3, #0
 800591a:	d02b      	beq.n	8005974 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 800591c:	4b10      	ldr	r3, [pc, #64]	@ (8005960 <checkDemoModCalisma+0x248>)
 800591e:	781b      	ldrb	r3, [r3, #0]
 8005920:	f083 0301 	eor.w	r3, r3, #1
 8005924:	b2db      	uxtb	r3, r3
 8005926:	2b00      	cmp	r3, #0
 8005928:	d024      	beq.n	8005974 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 800592a:	2201      	movs	r2, #1
 800592c:	2102      	movs	r1, #2
 800592e:	480e      	ldr	r0, [pc, #56]	@ (8005968 <checkDemoModCalisma+0x250>)
 8005930:	f004 fa93 	bl	8009e5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8005934:	2201      	movs	r2, #1
 8005936:	2101      	movs	r1, #1
 8005938:	480b      	ldr	r0, [pc, #44]	@ (8005968 <checkDemoModCalisma+0x250>)
 800593a:	f004 fa8e 	bl	8009e5a <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 800593e:	4b07      	ldr	r3, [pc, #28]	@ (800595c <checkDemoModCalisma+0x244>)
 8005940:	2201      	movs	r2, #1
 8005942:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 8005944:	4b0a      	ldr	r3, [pc, #40]	@ (8005970 <checkDemoModCalisma+0x258>)
 8005946:	2201      	movs	r2, #1
 8005948:	701a      	strb	r2, [r3, #0]
 800594a:	e027      	b.n	800599c <checkDemoModCalisma+0x284>
 800594c:	200010be 	.word	0x200010be
 8005950:	200010f2 	.word	0x200010f2
 8005954:	200010bd 	.word	0x200010bd
 8005958:	40011000 	.word	0x40011000
 800595c:	200010f9 	.word	0x200010f9
 8005960:	200010fa 	.word	0x200010fa
 8005964:	200010fb 	.word	0x200010fb
 8005968:	40010c00 	.word	0x40010c00
 800596c:	200010f8 	.word	0x200010f8
 8005970:	200010de 	.word	0x200010de
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8005974:	2104      	movs	r1, #4
 8005976:	48a0      	ldr	r0, [pc, #640]	@ (8005bf8 <checkDemoModCalisma+0x4e0>)
 8005978:	f004 fa58 	bl	8009e2c <HAL_GPIO_ReadPin>
 800597c:	4603      	mov	r3, r0
 800597e:	2b01      	cmp	r3, #1
 8005980:	d10c      	bne.n	800599c <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005982:	2200      	movs	r2, #0
 8005984:	2102      	movs	r1, #2
 8005986:	489d      	ldr	r0, [pc, #628]	@ (8005bfc <checkDemoModCalisma+0x4e4>)
 8005988:	f004 fa67 	bl	8009e5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800598c:	2200      	movs	r2, #0
 800598e:	2101      	movs	r1, #1
 8005990:	489a      	ldr	r0, [pc, #616]	@ (8005bfc <checkDemoModCalisma+0x4e4>)
 8005992:	f004 fa62 	bl	8009e5a <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 8005996:	4b9a      	ldr	r3, [pc, #616]	@ (8005c00 <checkDemoModCalisma+0x4e8>)
 8005998:	2200      	movs	r2, #0
 800599a:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 800599c:	2104      	movs	r1, #4
 800599e:	4896      	ldr	r0, [pc, #600]	@ (8005bf8 <checkDemoModCalisma+0x4e0>)
 80059a0:	f004 fa44 	bl	8009e2c <HAL_GPIO_ReadPin>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d10d      	bne.n	80059c6 <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 80059aa:	2201      	movs	r2, #1
 80059ac:	2180      	movs	r1, #128	@ 0x80
 80059ae:	4895      	ldr	r0, [pc, #596]	@ (8005c04 <checkDemoModCalisma+0x4ec>)
 80059b0:	f004 fa53 	bl	8009e5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 80059b4:	2201      	movs	r2, #1
 80059b6:	2120      	movs	r1, #32
 80059b8:	4892      	ldr	r0, [pc, #584]	@ (8005c04 <checkDemoModCalisma+0x4ec>)
 80059ba:	f004 fa4e 	bl	8009e5a <HAL_GPIO_WritePin>
			timer3 = millis;
 80059be:	4b92      	ldr	r3, [pc, #584]	@ (8005c08 <checkDemoModCalisma+0x4f0>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	4a92      	ldr	r2, [pc, #584]	@ (8005c0c <checkDemoModCalisma+0x4f4>)
 80059c4:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 80059c6:	4b90      	ldr	r3, [pc, #576]	@ (8005c08 <checkDemoModCalisma+0x4f0>)
 80059c8:	681a      	ldr	r2, [r3, #0]
 80059ca:	4b90      	ldr	r3, [pc, #576]	@ (8005c0c <checkDemoModCalisma+0x4f4>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	2b04      	cmp	r3, #4
 80059d2:	d909      	bls.n	80059e8 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80059d4:	2200      	movs	r2, #0
 80059d6:	2180      	movs	r1, #128	@ 0x80
 80059d8:	488a      	ldr	r0, [pc, #552]	@ (8005c04 <checkDemoModCalisma+0x4ec>)
 80059da:	f004 fa3e 	bl	8009e5a <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80059de:	2200      	movs	r2, #0
 80059e0:	2120      	movs	r1, #32
 80059e2:	4888      	ldr	r0, [pc, #544]	@ (8005c04 <checkDemoModCalisma+0x4ec>)
 80059e4:	f004 fa39 	bl	8009e5a <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 80059e8:	2102      	movs	r1, #2
 80059ea:	4883      	ldr	r0, [pc, #524]	@ (8005bf8 <checkDemoModCalisma+0x4e0>)
 80059ec:	f004 fa1e 	bl	8009e2c <HAL_GPIO_ReadPin>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d108      	bne.n	8005a08 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80059f6:	2201      	movs	r2, #1
 80059f8:	2140      	movs	r1, #64	@ 0x40
 80059fa:	4882      	ldr	r0, [pc, #520]	@ (8005c04 <checkDemoModCalisma+0x4ec>)
 80059fc:	f004 fa2d 	bl	8009e5a <HAL_GPIO_WritePin>
			timer3 = millis;
 8005a00:	4b81      	ldr	r3, [pc, #516]	@ (8005c08 <checkDemoModCalisma+0x4f0>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a81      	ldr	r2, [pc, #516]	@ (8005c0c <checkDemoModCalisma+0x4f4>)
 8005a06:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8005a08:	4b7f      	ldr	r3, [pc, #508]	@ (8005c08 <checkDemoModCalisma+0x4f0>)
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	4b7f      	ldr	r3, [pc, #508]	@ (8005c0c <checkDemoModCalisma+0x4f4>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	1ad3      	subs	r3, r2, r3
 8005a12:	2b04      	cmp	r3, #4
 8005a14:	d904      	bls.n	8005a20 <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005a16:	2200      	movs	r2, #0
 8005a18:	2140      	movs	r1, #64	@ 0x40
 8005a1a:	487a      	ldr	r0, [pc, #488]	@ (8005c04 <checkDemoModCalisma+0x4ec>)
 8005a1c:	f004 fa1d 	bl	8009e5a <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8005a20:	4b7b      	ldr	r3, [pc, #492]	@ (8005c10 <checkDemoModCalisma+0x4f8>)
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d058      	beq.n	8005ada <checkDemoModCalisma+0x3c2>
 8005a28:	4b7a      	ldr	r3, [pc, #488]	@ (8005c14 <checkDemoModCalisma+0x4fc>)
 8005a2a:	781b      	ldrb	r3, [r3, #0]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d054      	beq.n	8005ada <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 8005a30:	4b79      	ldr	r3, [pc, #484]	@ (8005c18 <checkDemoModCalisma+0x500>)
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	3301      	adds	r3, #1
 8005a36:	b2da      	uxtb	r2, r3
 8005a38:	4b77      	ldr	r3, [pc, #476]	@ (8005c18 <checkDemoModCalisma+0x500>)
 8005a3a:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 8005a3c:	4b76      	ldr	r3, [pc, #472]	@ (8005c18 <checkDemoModCalisma+0x500>)
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	2b09      	cmp	r3, #9
 8005a42:	d908      	bls.n	8005a56 <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 8005a44:	4b74      	ldr	r3, [pc, #464]	@ (8005c18 <checkDemoModCalisma+0x500>)
 8005a46:	2200      	movs	r2, #0
 8005a48:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 8005a4a:	4b74      	ldr	r3, [pc, #464]	@ (8005c1c <checkDemoModCalisma+0x504>)
 8005a4c:	781b      	ldrb	r3, [r3, #0]
 8005a4e:	3301      	adds	r3, #1
 8005a50:	b2da      	uxtb	r2, r3
 8005a52:	4b72      	ldr	r3, [pc, #456]	@ (8005c1c <checkDemoModCalisma+0x504>)
 8005a54:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 8005a56:	4b71      	ldr	r3, [pc, #452]	@ (8005c1c <checkDemoModCalisma+0x504>)
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	2b09      	cmp	r3, #9
 8005a5c:	d908      	bls.n	8005a70 <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 8005a5e:	4b6f      	ldr	r3, [pc, #444]	@ (8005c1c <checkDemoModCalisma+0x504>)
 8005a60:	2200      	movs	r2, #0
 8005a62:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 8005a64:	4b6e      	ldr	r3, [pc, #440]	@ (8005c20 <checkDemoModCalisma+0x508>)
 8005a66:	781b      	ldrb	r3, [r3, #0]
 8005a68:	3301      	adds	r3, #1
 8005a6a:	b2da      	uxtb	r2, r3
 8005a6c:	4b6c      	ldr	r3, [pc, #432]	@ (8005c20 <checkDemoModCalisma+0x508>)
 8005a6e:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 8005a70:	4b6b      	ldr	r3, [pc, #428]	@ (8005c20 <checkDemoModCalisma+0x508>)
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	2b09      	cmp	r3, #9
 8005a76:	d908      	bls.n	8005a8a <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 8005a78:	4b69      	ldr	r3, [pc, #420]	@ (8005c20 <checkDemoModCalisma+0x508>)
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 8005a7e:	4b69      	ldr	r3, [pc, #420]	@ (8005c24 <checkDemoModCalisma+0x50c>)
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	3301      	adds	r3, #1
 8005a84:	b2da      	uxtb	r2, r3
 8005a86:	4b67      	ldr	r3, [pc, #412]	@ (8005c24 <checkDemoModCalisma+0x50c>)
 8005a88:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 8005a8a:	4b66      	ldr	r3, [pc, #408]	@ (8005c24 <checkDemoModCalisma+0x50c>)
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	2b09      	cmp	r3, #9
 8005a90:	d908      	bls.n	8005aa4 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 8005a92:	4b64      	ldr	r3, [pc, #400]	@ (8005c24 <checkDemoModCalisma+0x50c>)
 8005a94:	2200      	movs	r2, #0
 8005a96:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 8005a98:	4b63      	ldr	r3, [pc, #396]	@ (8005c28 <checkDemoModCalisma+0x510>)
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	b2da      	uxtb	r2, r3
 8005aa0:	4b61      	ldr	r3, [pc, #388]	@ (8005c28 <checkDemoModCalisma+0x510>)
 8005aa2:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8005aa4:	4b60      	ldr	r3, [pc, #384]	@ (8005c28 <checkDemoModCalisma+0x510>)
 8005aa6:	781a      	ldrb	r2, [r3, #0]
 8005aa8:	4b60      	ldr	r3, [pc, #384]	@ (8005c2c <checkDemoModCalisma+0x514>)
 8005aaa:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8005aae:	4b5d      	ldr	r3, [pc, #372]	@ (8005c24 <checkDemoModCalisma+0x50c>)
 8005ab0:	781a      	ldrb	r2, [r3, #0]
 8005ab2:	4b5e      	ldr	r3, [pc, #376]	@ (8005c2c <checkDemoModCalisma+0x514>)
 8005ab4:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8005ab6:	4b5a      	ldr	r3, [pc, #360]	@ (8005c20 <checkDemoModCalisma+0x508>)
 8005ab8:	781a      	ldrb	r2, [r3, #0]
 8005aba:	4b5c      	ldr	r3, [pc, #368]	@ (8005c2c <checkDemoModCalisma+0x514>)
 8005abc:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8005abe:	4b57      	ldr	r3, [pc, #348]	@ (8005c1c <checkDemoModCalisma+0x504>)
 8005ac0:	781a      	ldrb	r2, [r3, #0]
 8005ac2:	4b5a      	ldr	r3, [pc, #360]	@ (8005c2c <checkDemoModCalisma+0x514>)
 8005ac4:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8005ac6:	4b54      	ldr	r3, [pc, #336]	@ (8005c18 <checkDemoModCalisma+0x500>)
 8005ac8:	781a      	ldrb	r2, [r3, #0]
 8005aca:	4b58      	ldr	r3, [pc, #352]	@ (8005c2c <checkDemoModCalisma+0x514>)
 8005acc:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 8005ace:	4b58      	ldr	r3, [pc, #352]	@ (8005c30 <checkDemoModCalisma+0x518>)
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 8005ad4:	4b4f      	ldr	r3, [pc, #316]	@ (8005c14 <checkDemoModCalisma+0x4fc>)
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 8005ada:	4b56      	ldr	r3, [pc, #344]	@ (8005c34 <checkDemoModCalisma+0x51c>)
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	f040 8087 	bne.w	8005bf2 <checkDemoModCalisma+0x4da>
			lcd_print(1, 1, demoModTextGN);
 8005ae4:	4a54      	ldr	r2, [pc, #336]	@ (8005c38 <checkDemoModCalisma+0x520>)
 8005ae6:	2101      	movs	r1, #1
 8005ae8:	2001      	movs	r0, #1
 8005aea:	f002 fe75 	bl	80087d8 <lcd_print>
			lcd_print(2, 1, cycleTextGN);
 8005aee:	4a53      	ldr	r2, [pc, #332]	@ (8005c3c <checkDemoModCalisma+0x524>)
 8005af0:	2101      	movs	r1, #1
 8005af2:	2002      	movs	r0, #2
 8005af4:	f002 fe70 	bl	80087d8 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 8005af8:	4b4b      	ldr	r3, [pc, #300]	@ (8005c28 <checkDemoModCalisma+0x510>)
 8005afa:	781b      	ldrb	r3, [r3, #0]
 8005afc:	220a      	movs	r2, #10
 8005afe:	4950      	ldr	r1, [pc, #320]	@ (8005c40 <checkDemoModCalisma+0x528>)
 8005b00:	4618      	mov	r0, r3
 8005b02:	f007 f9bf 	bl	800ce84 <itoa>
			lcd_print(2,12,snum);
 8005b06:	4a4e      	ldr	r2, [pc, #312]	@ (8005c40 <checkDemoModCalisma+0x528>)
 8005b08:	210c      	movs	r1, #12
 8005b0a:	2002      	movs	r0, #2
 8005b0c:	f002 fe64 	bl	80087d8 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 8005b10:	4b44      	ldr	r3, [pc, #272]	@ (8005c24 <checkDemoModCalisma+0x50c>)
 8005b12:	781b      	ldrb	r3, [r3, #0]
 8005b14:	220a      	movs	r2, #10
 8005b16:	494a      	ldr	r1, [pc, #296]	@ (8005c40 <checkDemoModCalisma+0x528>)
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f007 f9b3 	bl	800ce84 <itoa>
			lcd_print(2,13,snum);
 8005b1e:	4a48      	ldr	r2, [pc, #288]	@ (8005c40 <checkDemoModCalisma+0x528>)
 8005b20:	210d      	movs	r1, #13
 8005b22:	2002      	movs	r0, #2
 8005b24:	f002 fe58 	bl	80087d8 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 8005b28:	4b3d      	ldr	r3, [pc, #244]	@ (8005c20 <checkDemoModCalisma+0x508>)
 8005b2a:	781b      	ldrb	r3, [r3, #0]
 8005b2c:	220a      	movs	r2, #10
 8005b2e:	4944      	ldr	r1, [pc, #272]	@ (8005c40 <checkDemoModCalisma+0x528>)
 8005b30:	4618      	mov	r0, r3
 8005b32:	f007 f9a7 	bl	800ce84 <itoa>
			lcd_print(2,14,snum);
 8005b36:	4a42      	ldr	r2, [pc, #264]	@ (8005c40 <checkDemoModCalisma+0x528>)
 8005b38:	210e      	movs	r1, #14
 8005b3a:	2002      	movs	r0, #2
 8005b3c:	f002 fe4c 	bl	80087d8 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 8005b40:	4b36      	ldr	r3, [pc, #216]	@ (8005c1c <checkDemoModCalisma+0x504>)
 8005b42:	781b      	ldrb	r3, [r3, #0]
 8005b44:	220a      	movs	r2, #10
 8005b46:	493e      	ldr	r1, [pc, #248]	@ (8005c40 <checkDemoModCalisma+0x528>)
 8005b48:	4618      	mov	r0, r3
 8005b4a:	f007 f99b 	bl	800ce84 <itoa>
			lcd_print(2,15,snum);
 8005b4e:	4a3c      	ldr	r2, [pc, #240]	@ (8005c40 <checkDemoModCalisma+0x528>)
 8005b50:	210f      	movs	r1, #15
 8005b52:	2002      	movs	r0, #2
 8005b54:	f002 fe40 	bl	80087d8 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 8005b58:	4b2f      	ldr	r3, [pc, #188]	@ (8005c18 <checkDemoModCalisma+0x500>)
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	220a      	movs	r2, #10
 8005b5e:	4938      	ldr	r1, [pc, #224]	@ (8005c40 <checkDemoModCalisma+0x528>)
 8005b60:	4618      	mov	r0, r3
 8005b62:	f007 f98f 	bl	800ce84 <itoa>
			lcd_print(2,16,snum);
 8005b66:	4a36      	ldr	r2, [pc, #216]	@ (8005c40 <checkDemoModCalisma+0x528>)
 8005b68:	2110      	movs	r1, #16
 8005b6a:	2002      	movs	r0, #2
 8005b6c:	f002 fe34 	bl	80087d8 <lcd_print>
			mesajYazildi=1;
 8005b70:	4b34      	ldr	r3, [pc, #208]	@ (8005c44 <checkDemoModCalisma+0x52c>)
 8005b72:	2201      	movs	r2, #1
 8005b74:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 8005b76:	e03c      	b.n	8005bf2 <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 8005b78:	4b33      	ldr	r3, [pc, #204]	@ (8005c48 <checkDemoModCalisma+0x530>)
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	2b01      	cmp	r3, #1
 8005b7e:	d003      	beq.n	8005b88 <checkDemoModCalisma+0x470>
 8005b80:	4b2c      	ldr	r3, [pc, #176]	@ (8005c34 <checkDemoModCalisma+0x51c>)
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	2b01      	cmp	r3, #1
 8005b86:	d134      	bne.n	8005bf2 <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8005b8e:	481b      	ldr	r0, [pc, #108]	@ (8005bfc <checkDemoModCalisma+0x4e4>)
 8005b90:	f004 f963 	bl	8009e5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8005b94:	2200      	movs	r2, #0
 8005b96:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005b9a:	4818      	ldr	r0, [pc, #96]	@ (8005bfc <checkDemoModCalisma+0x4e4>)
 8005b9c:	f004 f95d 	bl	8009e5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	2104      	movs	r1, #4
 8005ba4:	4815      	ldr	r0, [pc, #84]	@ (8005bfc <checkDemoModCalisma+0x4e4>)
 8005ba6:	f004 f958 	bl	8009e5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005baa:	2200      	movs	r2, #0
 8005bac:	2102      	movs	r1, #2
 8005bae:	4813      	ldr	r0, [pc, #76]	@ (8005bfc <checkDemoModCalisma+0x4e4>)
 8005bb0:	f004 f953 	bl	8009e5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	2101      	movs	r1, #1
 8005bb8:	4810      	ldr	r0, [pc, #64]	@ (8005bfc <checkDemoModCalisma+0x4e4>)
 8005bba:	f004 f94e 	bl	8009e5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	2120      	movs	r1, #32
 8005bc2:	480d      	ldr	r0, [pc, #52]	@ (8005bf8 <checkDemoModCalisma+0x4e0>)
 8005bc4:	f004 f949 	bl	8009e5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005bc8:	2200      	movs	r2, #0
 8005bca:	2110      	movs	r1, #16
 8005bcc:	480a      	ldr	r0, [pc, #40]	@ (8005bf8 <checkDemoModCalisma+0x4e0>)
 8005bce:	f004 f944 	bl	8009e5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	2180      	movs	r1, #128	@ 0x80
 8005bd6:	480b      	ldr	r0, [pc, #44]	@ (8005c04 <checkDemoModCalisma+0x4ec>)
 8005bd8:	f004 f93f 	bl	8009e5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8005bdc:	2200      	movs	r2, #0
 8005bde:	2140      	movs	r1, #64	@ 0x40
 8005be0:	4808      	ldr	r0, [pc, #32]	@ (8005c04 <checkDemoModCalisma+0x4ec>)
 8005be2:	f004 f93a 	bl	8009e5a <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8005be6:	2200      	movs	r2, #0
 8005be8:	2120      	movs	r1, #32
 8005bea:	4806      	ldr	r0, [pc, #24]	@ (8005c04 <checkDemoModCalisma+0x4ec>)
 8005bec:	f004 f935 	bl	8009e5a <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 8005bf0:	e7ff      	b.n	8005bf2 <checkDemoModCalisma+0x4da>
 8005bf2:	bf00      	nop
 8005bf4:	bd80      	pop	{r7, pc}
 8005bf6:	bf00      	nop
 8005bf8:	40011000 	.word	0x40011000
 8005bfc:	40010c00 	.word	0x40010c00
 8005c00:	200010f9 	.word	0x200010f9
 8005c04:	40010800 	.word	0x40010800
 8005c08:	20001078 	.word	0x20001078
 8005c0c:	20001088 	.word	0x20001088
 8005c10:	200010f8 	.word	0x200010f8
 8005c14:	200010de 	.word	0x200010de
 8005c18:	2000109d 	.word	0x2000109d
 8005c1c:	2000109e 	.word	0x2000109e
 8005c20:	20000000 	.word	0x20000000
 8005c24:	20000001 	.word	0x20000001
 8005c28:	2000109f 	.word	0x2000109f
 8005c2c:	20000fc8 	.word	0x20000fc8
 8005c30:	200010cc 	.word	0x200010cc
 8005c34:	200010bd 	.word	0x200010bd
 8005c38:	20000140 	.word	0x20000140
 8005c3c:	20000168 	.word	0x20000168
 8005c40:	20001038 	.word	0x20001038
 8005c44:	200010d4 	.word	0x200010d4
 8005c48:	200010be 	.word	0x200010be

08005c4c <mainLoop>:

void mainLoop() {
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 8005c52:	f7fe f853 	bl	8003cfc <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8005c56:	2101      	movs	r1, #1
 8005c58:	4894      	ldr	r0, [pc, #592]	@ (8005eac <mainLoop+0x260>)
 8005c5a:	f004 f8e7 	bl	8009e2c <HAL_GPIO_ReadPin>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d136      	bne.n	8005cd2 <mainLoop+0x86>
 8005c64:	2108      	movs	r1, #8
 8005c66:	4892      	ldr	r0, [pc, #584]	@ (8005eb0 <mainLoop+0x264>)
 8005c68:	f004 f8e0 	bl	8009e2c <HAL_GPIO_ReadPin>
 8005c6c:	4603      	mov	r3, r0
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d12f      	bne.n	8005cd2 <mainLoop+0x86>
 8005c72:	2102      	movs	r1, #2
 8005c74:	488d      	ldr	r0, [pc, #564]	@ (8005eac <mainLoop+0x260>)
 8005c76:	f004 f8d9 	bl	8009e2c <HAL_GPIO_ReadPin>
 8005c7a:	4603      	mov	r3, r0
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d128      	bne.n	8005cd2 <mainLoop+0x86>
 8005c80:	2104      	movs	r1, #4
 8005c82:	488a      	ldr	r0, [pc, #552]	@ (8005eac <mainLoop+0x260>)
 8005c84:	f004 f8d2 	bl	8009e2c <HAL_GPIO_ReadPin>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d121      	bne.n	8005cd2 <mainLoop+0x86>
 8005c8e:	2108      	movs	r1, #8
 8005c90:	4886      	ldr	r0, [pc, #536]	@ (8005eac <mainLoop+0x260>)
 8005c92:	f004 f8cb 	bl	8009e2c <HAL_GPIO_ReadPin>
 8005c96:	4603      	mov	r3, r0
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d11a      	bne.n	8005cd2 <mainLoop+0x86>
 8005c9c:	2180      	movs	r1, #128	@ 0x80
 8005c9e:	4884      	ldr	r0, [pc, #528]	@ (8005eb0 <mainLoop+0x264>)
 8005ca0:	f004 f8c4 	bl	8009e2c <HAL_GPIO_ReadPin>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d113      	bne.n	8005cd2 <mainLoop+0x86>
 8005caa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8005cae:	4880      	ldr	r0, [pc, #512]	@ (8005eb0 <mainLoop+0x264>)
 8005cb0:	f004 f8bc 	bl	8009e2c <HAL_GPIO_ReadPin>
 8005cb4:	4603      	mov	r3, r0
 8005cb6:	2b01      	cmp	r3, #1
 8005cb8:	d10b      	bne.n	8005cd2 <mainLoop+0x86>
 8005cba:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005cbe:	487c      	ldr	r0, [pc, #496]	@ (8005eb0 <mainLoop+0x264>)
 8005cc0:	f004 f8b4 	bl	8009e2c <HAL_GPIO_ReadPin>
 8005cc4:	4603      	mov	r3, r0
 8005cc6:	2b01      	cmp	r3, #1
 8005cc8:	d103      	bne.n	8005cd2 <mainLoop+0x86>
			butonKontrol=0;
 8005cca:	4b7a      	ldr	r3, [pc, #488]	@ (8005eb4 <mainLoop+0x268>)
 8005ccc:	2200      	movs	r2, #0
 8005cce:	701a      	strb	r2, [r3, #0]
 8005cd0:	e003      	b.n	8005cda <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 8005cd2:	4b79      	ldr	r3, [pc, #484]	@ (8005eb8 <mainLoop+0x26c>)
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	4a79      	ldr	r2, [pc, #484]	@ (8005ebc <mainLoop+0x270>)
 8005cd8:	6013      	str	r3, [r2, #0]
		}

		if(buttonCheck() == 1) {
 8005cda:	f7fe f8c1 	bl	8003e60 <buttonCheck>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d103      	bne.n	8005cec <mainLoop+0xa0>
			backLightTimer = millis;
 8005ce4:	4b74      	ldr	r3, [pc, #464]	@ (8005eb8 <mainLoop+0x26c>)
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	4a74      	ldr	r2, [pc, #464]	@ (8005ebc <mainLoop+0x270>)
 8005cea:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 8005cec:	4b74      	ldr	r3, [pc, #464]	@ (8005ec0 <mainLoop+0x274>)
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d02c      	beq.n	8005d4e <mainLoop+0x102>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8005cf4:	bf00      	nop
 8005cf6:	4873      	ldr	r0, [pc, #460]	@ (8005ec4 <mainLoop+0x278>)
 8005cf8:	f004 fec1 	bl	800aa7e <HAL_I2C_GetError>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b04      	cmp	r3, #4
 8005d00:	d0f9      	beq.n	8005cf6 <mainLoop+0xaa>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8005d02:	bf00      	nop
 8005d04:	486f      	ldr	r0, [pc, #444]	@ (8005ec4 <mainLoop+0x278>)
 8005d06:	f004 fead 	bl	800aa64 <HAL_I2C_GetState>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b20      	cmp	r3, #32
 8005d0e:	d1f9      	bne.n	8005d04 <mainLoop+0xb8>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8005d10:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8005d14:	9302      	str	r3, [sp, #8]
 8005d16:	236e      	movs	r3, #110	@ 0x6e
 8005d18:	9301      	str	r3, [sp, #4]
 8005d1a:	4b6b      	ldr	r3, [pc, #428]	@ (8005ec8 <mainLoop+0x27c>)
 8005d1c:	9300      	str	r3, [sp, #0]
 8005d1e:	236e      	movs	r3, #110	@ 0x6e
 8005d20:	2200      	movs	r2, #0
 8005d22:	21a0      	movs	r1, #160	@ 0xa0
 8005d24:	4867      	ldr	r0, [pc, #412]	@ (8005ec4 <mainLoop+0x278>)
 8005d26:	f004 fb3b 	bl	800a3a0 <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 8005d2a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8005d2e:	f003 faad 	bl	800928c <HAL_Delay>

		  hafizaYaz=0;
 8005d32:	4b63      	ldr	r3, [pc, #396]	@ (8005ec0 <mainLoop+0x274>)
 8005d34:	2200      	movs	r2, #0
 8005d36:	701a      	strb	r2, [r3, #0]
		  lcd_print(2, 1, dataYazildiText);
 8005d38:	4a64      	ldr	r2, [pc, #400]	@ (8005ecc <mainLoop+0x280>)
 8005d3a:	2101      	movs	r1, #1
 8005d3c:	2002      	movs	r0, #2
 8005d3e:	f002 fd4b 	bl	80087d8 <lcd_print>

		  HAL_Delay(1000);
 8005d42:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005d46:	f003 faa1 	bl	800928c <HAL_Delay>
		  lcd_clear();
 8005d4a:	f002 fd71 	bl	8008830 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8005d4e:	4b60      	ldr	r3, [pc, #384]	@ (8005ed0 <mainLoop+0x284>)
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	f083 0301 	eor.w	r3, r3, #1
 8005d56:	b2db      	uxtb	r3, r3
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d043      	beq.n	8005de4 <mainLoop+0x198>
 8005d5c:	4859      	ldr	r0, [pc, #356]	@ (8005ec4 <mainLoop+0x278>)
 8005d5e:	f004 fe81 	bl	800aa64 <HAL_I2C_GetState>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b20      	cmp	r3, #32
 8005d66:	d13d      	bne.n	8005de4 <mainLoop+0x198>
		  if(ilkOkuma==0) {
 8005d68:	4b5a      	ldr	r3, [pc, #360]	@ (8005ed4 <mainLoop+0x288>)
 8005d6a:	781b      	ldrb	r3, [r3, #0]
 8005d6c:	f083 0301 	eor.w	r3, r3, #1
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d028      	beq.n	8005dc8 <mainLoop+0x17c>
			  lcd_print(1, 1, eepromTextGN);
 8005d76:	4a58      	ldr	r2, [pc, #352]	@ (8005ed8 <mainLoop+0x28c>)
 8005d78:	2101      	movs	r1, #1
 8005d7a:	2001      	movs	r0, #1
 8005d7c:	f002 fd2c 	bl	80087d8 <lcd_print>
			  lcd_print(2, 1, dataOkunuyorText);
 8005d80:	4a56      	ldr	r2, [pc, #344]	@ (8005edc <mainLoop+0x290>)
 8005d82:	2101      	movs	r1, #1
 8005d84:	2002      	movs	r0, #2
 8005d86:	f002 fd27 	bl	80087d8 <lcd_print>
			  HAL_Delay(1000);
 8005d8a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005d8e:	f003 fa7d 	bl	800928c <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8005d92:	bf00      	nop
 8005d94:	484b      	ldr	r0, [pc, #300]	@ (8005ec4 <mainLoop+0x278>)
 8005d96:	f004 fe72 	bl	800aa7e <HAL_I2C_GetError>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b04      	cmp	r3, #4
 8005d9e:	d0f9      	beq.n	8005d94 <mainLoop+0x148>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8005da0:	e003      	b.n	8005daa <mainLoop+0x15e>
				  HAL_Delay(1000);
 8005da2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8005da6:	f003 fa71 	bl	800928c <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8005daa:	4846      	ldr	r0, [pc, #280]	@ (8005ec4 <mainLoop+0x278>)
 8005dac:	f004 fe5a 	bl	800aa64 <HAL_I2C_GetState>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b20      	cmp	r3, #32
 8005db4:	d1f5      	bne.n	8005da2 <mainLoop+0x156>
			  }

			  lcd_print(2, 1, dataOkunduText);
 8005db6:	4a4a      	ldr	r2, [pc, #296]	@ (8005ee0 <mainLoop+0x294>)
 8005db8:	2101      	movs	r1, #1
 8005dba:	2002      	movs	r0, #2
 8005dbc:	f002 fd0c 	bl	80087d8 <lcd_print>

			  ilkOkuma=1;
 8005dc0:	4b44      	ldr	r3, [pc, #272]	@ (8005ed4 <mainLoop+0x288>)
 8005dc2:	2201      	movs	r2, #1
 8005dc4:	701a      	strb	r2, [r3, #0]
 8005dc6:	e006      	b.n	8005dd6 <mainLoop+0x18a>
		  } else {
			  lcd_print(2, 1, degerKaydedildiText);
 8005dc8:	4a46      	ldr	r2, [pc, #280]	@ (8005ee4 <mainLoop+0x298>)
 8005dca:	2101      	movs	r1, #1
 8005dcc:	2002      	movs	r0, #2
 8005dce:	f002 fd03 	bl	80087d8 <lcd_print>
			  lcd_clear();
 8005dd2:	f002 fd2d 	bl	8008830 <lcd_clear>
		  }

		  lcd_clear();
 8005dd6:	f002 fd2b 	bl	8008830 <lcd_clear>

		  eepromKontrol();
 8005dda:	f7fa fa2b 	bl	8000234 <eepromKontrol>
		  hafizaOku=1;
 8005dde:	4b3c      	ldr	r3, [pc, #240]	@ (8005ed0 <mainLoop+0x284>)
 8005de0:	2201      	movs	r2, #1
 8005de2:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8005de4:	4b40      	ldr	r3, [pc, #256]	@ (8005ee8 <mainLoop+0x29c>)
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d11c      	bne.n	8005e26 <mainLoop+0x1da>
 8005dec:	4b3f      	ldr	r3, [pc, #252]	@ (8005eec <mainLoop+0x2a0>)
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	f083 0301 	eor.w	r3, r3, #1
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d015      	beq.n	8005e26 <mainLoop+0x1da>
 8005dfa:	4b3d      	ldr	r3, [pc, #244]	@ (8005ef0 <mainLoop+0x2a4>)
 8005dfc:	781b      	ldrb	r3, [r3, #0]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d111      	bne.n	8005e26 <mainLoop+0x1da>
			lcd_clear();
 8005e02:	f002 fd15 	bl	8008830 <lcd_clear>
			HAL_Delay(10);
 8005e06:	200a      	movs	r0, #10
 8005e08:	f003 fa40 	bl	800928c <HAL_Delay>
			lcd_print(1, 1, mainTextGN);
 8005e0c:	4a39      	ldr	r2, [pc, #228]	@ (8005ef4 <mainLoop+0x2a8>)
 8005e0e:	2101      	movs	r1, #1
 8005e10:	2001      	movs	r0, #1
 8005e12:	f002 fce1 	bl	80087d8 <lcd_print>
			lcd_print(2, 1, mainText2GN);
 8005e16:	4a38      	ldr	r2, [pc, #224]	@ (8005ef8 <mainLoop+0x2ac>)
 8005e18:	2101      	movs	r1, #1
 8005e1a:	2002      	movs	r0, #2
 8005e1c:	f002 fcdc 	bl	80087d8 <lcd_print>
			mesajYazildi=1;
 8005e20:	4b32      	ldr	r3, [pc, #200]	@ (8005eec <mainLoop+0x2a0>)
 8005e22:	2201      	movs	r2, #1
 8005e24:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8005e26:	4b30      	ldr	r3, [pc, #192]	@ (8005ee8 <mainLoop+0x29c>)
 8005e28:	781b      	ldrb	r3, [r3, #0]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d112      	bne.n	8005e54 <mainLoop+0x208>
 8005e2e:	2102      	movs	r1, #2
 8005e30:	481e      	ldr	r0, [pc, #120]	@ (8005eac <mainLoop+0x260>)
 8005e32:	f003 fffb 	bl	8009e2c <HAL_GPIO_ReadPin>
 8005e36:	4603      	mov	r3, r0
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d10b      	bne.n	8005e54 <mainLoop+0x208>
 8005e3c:	2104      	movs	r1, #4
 8005e3e:	481b      	ldr	r0, [pc, #108]	@ (8005eac <mainLoop+0x260>)
 8005e40:	f003 fff4 	bl	8009e2c <HAL_GPIO_ReadPin>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d104      	bne.n	8005e54 <mainLoop+0x208>
			menuGiris=1;
 8005e4a:	4b27      	ldr	r3, [pc, #156]	@ (8005ee8 <mainLoop+0x29c>)
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8005e50:	f002 fcee 	bl	8008830 <lcd_clear>
		}

		if(menuGiris==1) {
 8005e54:	4b24      	ldr	r3, [pc, #144]	@ (8005ee8 <mainLoop+0x29c>)
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d101      	bne.n	8005e60 <mainLoop+0x214>
			menu();
 8005e5c:	f7fb fa26 	bl	80012ac <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8005e60:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005e64:	4812      	ldr	r0, [pc, #72]	@ (8005eb0 <mainLoop+0x264>)
 8005e66:	f004 f810 	bl	8009e8a <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8005e6a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005e6e:	4823      	ldr	r0, [pc, #140]	@ (8005efc <mainLoop+0x2b0>)
 8005e70:	f003 ffdc 	bl	8009e2c <HAL_GPIO_ReadPin>
 8005e74:	4603      	mov	r3, r0
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d10a      	bne.n	8005e90 <mainLoop+0x244>
 8005e7a:	4b21      	ldr	r3, [pc, #132]	@ (8005f00 <mainLoop+0x2b4>)
 8005e7c:	781b      	ldrb	r3, [r3, #0]
 8005e7e:	f083 0301 	eor.w	r3, r3, #1
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d003      	beq.n	8005e90 <mainLoop+0x244>
			stopVar=1;
 8005e88:	4b1e      	ldr	r3, [pc, #120]	@ (8005f04 <mainLoop+0x2b8>)
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	701a      	strb	r2, [r3, #0]
 8005e8e:	e002      	b.n	8005e96 <mainLoop+0x24a>
		} else {
			stopVar=0;
 8005e90:	4b1c      	ldr	r3, [pc, #112]	@ (8005f04 <mainLoop+0x2b8>)
 8005e92:	2200      	movs	r2, #0
 8005e94:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8005e96:	f7fe f817 	bl	8003ec8 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 8005e9a:	f7fe f849 	bl	8003f30 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8005e9e:	f7fe f88d 	bl	8003fbc <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8005ea2:	f7fe f8dd 	bl	8004060 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8005ea6:	f7ff fc37 	bl	8005718 <checkDemoModCalisma>
		checkLCDBacklight();
 8005eaa:	e6d2      	b.n	8005c52 <mainLoop+0x6>
 8005eac:	40010800 	.word	0x40010800
 8005eb0:	40011000 	.word	0x40011000
 8005eb4:	200010cf 	.word	0x200010cf
 8005eb8:	20001078 	.word	0x20001078
 8005ebc:	20001094 	.word	0x20001094
 8005ec0:	200010cc 	.word	0x200010cc
 8005ec4:	20001908 	.word	0x20001908
 8005ec8:	20000fc8 	.word	0x20000fc8
 8005ecc:	20001840 	.word	0x20001840
 8005ed0:	200010cd 	.word	0x200010cd
 8005ed4:	200010ce 	.word	0x200010ce
 8005ed8:	2000017c 	.word	0x2000017c
 8005edc:	20001854 	.word	0x20001854
 8005ee0:	20001868 	.word	0x20001868
 8005ee4:	2000187c 	.word	0x2000187c
 8005ee8:	200010bd 	.word	0x200010bd
 8005eec:	200010d4 	.word	0x200010d4
 8005ef0:	200010be 	.word	0x200010be
 8005ef4:	200000c8 	.word	0x200000c8
 8005ef8:	200000dc 	.word	0x200000dc
 8005efc:	40010c00 	.word	0x40010c00
 8005f00:	200010f5 	.word	0x200010f5
 8005f04:	200010f2 	.word	0x200010f2

08005f08 <loadMenuTexts>:

//Confirmation Texts:
char idConfirmationText[17];
char idConfirmationSubText[17];

void loadMenuTexts(uint8_t dilSecim) {
 8005f08:	b5b0      	push	{r4, r5, r7, lr}
 8005f0a:	b082      	sub	sp, #8
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	4603      	mov	r3, r0
 8005f10:	71fb      	strb	r3, [r7, #7]
	if(dilSecim == 0) {
 8005f12:	79fb      	ldrb	r3, [r7, #7]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	f040 852d 	bne.w	8006974 <loadMenuTexts+0xa6c>
		memcpy(menuyeGirildiText, menuyeGirildiTextTR, 17); //destination, source, size
 8005f1a:	4ac7      	ldr	r2, [pc, #796]	@ (8006238 <loadMenuTexts+0x330>)
 8005f1c:	4bc7      	ldr	r3, [pc, #796]	@ (800623c <loadMenuTexts+0x334>)
 8005f1e:	4614      	mov	r4, r2
 8005f20:	461d      	mov	r5, r3
 8005f22:	6828      	ldr	r0, [r5, #0]
 8005f24:	6869      	ldr	r1, [r5, #4]
 8005f26:	68aa      	ldr	r2, [r5, #8]
 8005f28:	68eb      	ldr	r3, [r5, #12]
 8005f2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f2c:	7c2b      	ldrb	r3, [r5, #16]
 8005f2e:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextTR, 17);
 8005f30:	4ac3      	ldr	r2, [pc, #780]	@ (8006240 <loadMenuTexts+0x338>)
 8005f32:	4bc4      	ldr	r3, [pc, #784]	@ (8006244 <loadMenuTexts+0x33c>)
 8005f34:	4614      	mov	r4, r2
 8005f36:	461d      	mov	r5, r3
 8005f38:	6828      	ldr	r0, [r5, #0]
 8005f3a:	6869      	ldr	r1, [r5, #4]
 8005f3c:	68aa      	ldr	r2, [r5, #8]
 8005f3e:	68eb      	ldr	r3, [r5, #12]
 8005f40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f42:	7c2b      	ldrb	r3, [r5, #16]
 8005f44:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextTR, 17);
 8005f46:	4ac0      	ldr	r2, [pc, #768]	@ (8006248 <loadMenuTexts+0x340>)
 8005f48:	4bc0      	ldr	r3, [pc, #768]	@ (800624c <loadMenuTexts+0x344>)
 8005f4a:	4614      	mov	r4, r2
 8005f4c:	461d      	mov	r5, r3
 8005f4e:	6828      	ldr	r0, [r5, #0]
 8005f50:	6869      	ldr	r1, [r5, #4]
 8005f52:	68aa      	ldr	r2, [r5, #8]
 8005f54:	68eb      	ldr	r3, [r5, #12]
 8005f56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f58:	7c2b      	ldrb	r3, [r5, #16]
 8005f5a:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextTR, 17);
 8005f5c:	4abc      	ldr	r2, [pc, #752]	@ (8006250 <loadMenuTexts+0x348>)
 8005f5e:	4bbd      	ldr	r3, [pc, #756]	@ (8006254 <loadMenuTexts+0x34c>)
 8005f60:	4614      	mov	r4, r2
 8005f62:	461d      	mov	r5, r3
 8005f64:	6828      	ldr	r0, [r5, #0]
 8005f66:	6869      	ldr	r1, [r5, #4]
 8005f68:	68aa      	ldr	r2, [r5, #8]
 8005f6a:	68eb      	ldr	r3, [r5, #12]
 8005f6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f6e:	7c2b      	ldrb	r3, [r5, #16]
 8005f70:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextTR, 17);
 8005f72:	4ab9      	ldr	r2, [pc, #740]	@ (8006258 <loadMenuTexts+0x350>)
 8005f74:	4bb9      	ldr	r3, [pc, #740]	@ (800625c <loadMenuTexts+0x354>)
 8005f76:	4614      	mov	r4, r2
 8005f78:	461d      	mov	r5, r3
 8005f7a:	6828      	ldr	r0, [r5, #0]
 8005f7c:	6869      	ldr	r1, [r5, #4]
 8005f7e:	68aa      	ldr	r2, [r5, #8]
 8005f80:	68eb      	ldr	r3, [r5, #12]
 8005f82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f84:	7c2b      	ldrb	r3, [r5, #16]
 8005f86:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextTR, 17);
 8005f88:	4ab5      	ldr	r2, [pc, #724]	@ (8006260 <loadMenuTexts+0x358>)
 8005f8a:	4bb6      	ldr	r3, [pc, #728]	@ (8006264 <loadMenuTexts+0x35c>)
 8005f8c:	4614      	mov	r4, r2
 8005f8e:	461d      	mov	r5, r3
 8005f90:	6828      	ldr	r0, [r5, #0]
 8005f92:	6869      	ldr	r1, [r5, #4]
 8005f94:	68aa      	ldr	r2, [r5, #8]
 8005f96:	68eb      	ldr	r3, [r5, #12]
 8005f98:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f9a:	7c2b      	ldrb	r3, [r5, #16]
 8005f9c:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextTR, 17);
 8005f9e:	4ab2      	ldr	r2, [pc, #712]	@ (8006268 <loadMenuTexts+0x360>)
 8005fa0:	4bb2      	ldr	r3, [pc, #712]	@ (800626c <loadMenuTexts+0x364>)
 8005fa2:	4614      	mov	r4, r2
 8005fa4:	461d      	mov	r5, r3
 8005fa6:	6828      	ldr	r0, [r5, #0]
 8005fa8:	6869      	ldr	r1, [r5, #4]
 8005faa:	68aa      	ldr	r2, [r5, #8]
 8005fac:	68eb      	ldr	r3, [r5, #12]
 8005fae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fb0:	7c2b      	ldrb	r3, [r5, #16]
 8005fb2:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextTR, 17);
 8005fb4:	4aae      	ldr	r2, [pc, #696]	@ (8006270 <loadMenuTexts+0x368>)
 8005fb6:	4baf      	ldr	r3, [pc, #700]	@ (8006274 <loadMenuTexts+0x36c>)
 8005fb8:	4614      	mov	r4, r2
 8005fba:	461d      	mov	r5, r3
 8005fbc:	6828      	ldr	r0, [r5, #0]
 8005fbe:	6869      	ldr	r1, [r5, #4]
 8005fc0:	68aa      	ldr	r2, [r5, #8]
 8005fc2:	68eb      	ldr	r3, [r5, #12]
 8005fc4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fc6:	7c2b      	ldrb	r3, [r5, #16]
 8005fc8:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextTR, 17);
 8005fca:	4aab      	ldr	r2, [pc, #684]	@ (8006278 <loadMenuTexts+0x370>)
 8005fcc:	4bab      	ldr	r3, [pc, #684]	@ (800627c <loadMenuTexts+0x374>)
 8005fce:	4614      	mov	r4, r2
 8005fd0:	461d      	mov	r5, r3
 8005fd2:	6828      	ldr	r0, [r5, #0]
 8005fd4:	6869      	ldr	r1, [r5, #4]
 8005fd6:	68aa      	ldr	r2, [r5, #8]
 8005fd8:	68eb      	ldr	r3, [r5, #12]
 8005fda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fdc:	7c2b      	ldrb	r3, [r5, #16]
 8005fde:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextTR, 17);
 8005fe0:	4aa7      	ldr	r2, [pc, #668]	@ (8006280 <loadMenuTexts+0x378>)
 8005fe2:	4ba8      	ldr	r3, [pc, #672]	@ (8006284 <loadMenuTexts+0x37c>)
 8005fe4:	4614      	mov	r4, r2
 8005fe6:	461d      	mov	r5, r3
 8005fe8:	6828      	ldr	r0, [r5, #0]
 8005fea:	6869      	ldr	r1, [r5, #4]
 8005fec:	68aa      	ldr	r2, [r5, #8]
 8005fee:	68eb      	ldr	r3, [r5, #12]
 8005ff0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005ff2:	7c2b      	ldrb	r3, [r5, #16]
 8005ff4:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextTR, 17);
 8005ff6:	4aa4      	ldr	r2, [pc, #656]	@ (8006288 <loadMenuTexts+0x380>)
 8005ff8:	4ba4      	ldr	r3, [pc, #656]	@ (800628c <loadMenuTexts+0x384>)
 8005ffa:	4614      	mov	r4, r2
 8005ffc:	461d      	mov	r5, r3
 8005ffe:	6828      	ldr	r0, [r5, #0]
 8006000:	6869      	ldr	r1, [r5, #4]
 8006002:	68aa      	ldr	r2, [r5, #8]
 8006004:	68eb      	ldr	r3, [r5, #12]
 8006006:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006008:	7c2b      	ldrb	r3, [r5, #16]
 800600a:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextTR, 17);
 800600c:	4aa0      	ldr	r2, [pc, #640]	@ (8006290 <loadMenuTexts+0x388>)
 800600e:	4ba1      	ldr	r3, [pc, #644]	@ (8006294 <loadMenuTexts+0x38c>)
 8006010:	4614      	mov	r4, r2
 8006012:	461d      	mov	r5, r3
 8006014:	6828      	ldr	r0, [r5, #0]
 8006016:	6869      	ldr	r1, [r5, #4]
 8006018:	68aa      	ldr	r2, [r5, #8]
 800601a:	68eb      	ldr	r3, [r5, #12]
 800601c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800601e:	7c2b      	ldrb	r3, [r5, #16]
 8006020:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextTR, 17);
 8006022:	4a9d      	ldr	r2, [pc, #628]	@ (8006298 <loadMenuTexts+0x390>)
 8006024:	4b9d      	ldr	r3, [pc, #628]	@ (800629c <loadMenuTexts+0x394>)
 8006026:	4614      	mov	r4, r2
 8006028:	461d      	mov	r5, r3
 800602a:	6828      	ldr	r0, [r5, #0]
 800602c:	6869      	ldr	r1, [r5, #4]
 800602e:	68aa      	ldr	r2, [r5, #8]
 8006030:	68eb      	ldr	r3, [r5, #12]
 8006032:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006034:	7c2b      	ldrb	r3, [r5, #16]
 8006036:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextTR, 17);
 8006038:	4a99      	ldr	r2, [pc, #612]	@ (80062a0 <loadMenuTexts+0x398>)
 800603a:	4b9a      	ldr	r3, [pc, #616]	@ (80062a4 <loadMenuTexts+0x39c>)
 800603c:	4614      	mov	r4, r2
 800603e:	461d      	mov	r5, r3
 8006040:	6828      	ldr	r0, [r5, #0]
 8006042:	6869      	ldr	r1, [r5, #4]
 8006044:	68aa      	ldr	r2, [r5, #8]
 8006046:	68eb      	ldr	r3, [r5, #12]
 8006048:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800604a:	7c2b      	ldrb	r3, [r5, #16]
 800604c:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextTR, 17);
 800604e:	4a96      	ldr	r2, [pc, #600]	@ (80062a8 <loadMenuTexts+0x3a0>)
 8006050:	4b96      	ldr	r3, [pc, #600]	@ (80062ac <loadMenuTexts+0x3a4>)
 8006052:	4614      	mov	r4, r2
 8006054:	461d      	mov	r5, r3
 8006056:	6828      	ldr	r0, [r5, #0]
 8006058:	6869      	ldr	r1, [r5, #4]
 800605a:	68aa      	ldr	r2, [r5, #8]
 800605c:	68eb      	ldr	r3, [r5, #12]
 800605e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006060:	7c2b      	ldrb	r3, [r5, #16]
 8006062:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextTR, 17);
 8006064:	4a92      	ldr	r2, [pc, #584]	@ (80062b0 <loadMenuTexts+0x3a8>)
 8006066:	4b93      	ldr	r3, [pc, #588]	@ (80062b4 <loadMenuTexts+0x3ac>)
 8006068:	4614      	mov	r4, r2
 800606a:	461d      	mov	r5, r3
 800606c:	6828      	ldr	r0, [r5, #0]
 800606e:	6869      	ldr	r1, [r5, #4]
 8006070:	68aa      	ldr	r2, [r5, #8]
 8006072:	68eb      	ldr	r3, [r5, #12]
 8006074:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006076:	7c2b      	ldrb	r3, [r5, #16]
 8006078:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextTR, 17);
 800607a:	4a8f      	ldr	r2, [pc, #572]	@ (80062b8 <loadMenuTexts+0x3b0>)
 800607c:	4b8f      	ldr	r3, [pc, #572]	@ (80062bc <loadMenuTexts+0x3b4>)
 800607e:	4614      	mov	r4, r2
 8006080:	461d      	mov	r5, r3
 8006082:	6828      	ldr	r0, [r5, #0]
 8006084:	6869      	ldr	r1, [r5, #4]
 8006086:	68aa      	ldr	r2, [r5, #8]
 8006088:	68eb      	ldr	r3, [r5, #12]
 800608a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800608c:	7c2b      	ldrb	r3, [r5, #16]
 800608e:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextTR, 17);
 8006090:	4a8b      	ldr	r2, [pc, #556]	@ (80062c0 <loadMenuTexts+0x3b8>)
 8006092:	4b8c      	ldr	r3, [pc, #560]	@ (80062c4 <loadMenuTexts+0x3bc>)
 8006094:	4614      	mov	r4, r2
 8006096:	461d      	mov	r5, r3
 8006098:	6828      	ldr	r0, [r5, #0]
 800609a:	6869      	ldr	r1, [r5, #4]
 800609c:	68aa      	ldr	r2, [r5, #8]
 800609e:	68eb      	ldr	r3, [r5, #12]
 80060a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060a2:	7c2b      	ldrb	r3, [r5, #16]
 80060a4:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextTR, 17);
 80060a6:	4a88      	ldr	r2, [pc, #544]	@ (80062c8 <loadMenuTexts+0x3c0>)
 80060a8:	4b88      	ldr	r3, [pc, #544]	@ (80062cc <loadMenuTexts+0x3c4>)
 80060aa:	4614      	mov	r4, r2
 80060ac:	461d      	mov	r5, r3
 80060ae:	6828      	ldr	r0, [r5, #0]
 80060b0:	6869      	ldr	r1, [r5, #4]
 80060b2:	68aa      	ldr	r2, [r5, #8]
 80060b4:	68eb      	ldr	r3, [r5, #12]
 80060b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060b8:	7c2b      	ldrb	r3, [r5, #16]
 80060ba:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextTR, 17);
 80060bc:	4a84      	ldr	r2, [pc, #528]	@ (80062d0 <loadMenuTexts+0x3c8>)
 80060be:	4b85      	ldr	r3, [pc, #532]	@ (80062d4 <loadMenuTexts+0x3cc>)
 80060c0:	4614      	mov	r4, r2
 80060c2:	461d      	mov	r5, r3
 80060c4:	6828      	ldr	r0, [r5, #0]
 80060c6:	6869      	ldr	r1, [r5, #4]
 80060c8:	68aa      	ldr	r2, [r5, #8]
 80060ca:	68eb      	ldr	r3, [r5, #12]
 80060cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060ce:	7c2b      	ldrb	r3, [r5, #16]
 80060d0:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextTR, 17);
 80060d2:	4a81      	ldr	r2, [pc, #516]	@ (80062d8 <loadMenuTexts+0x3d0>)
 80060d4:	4b81      	ldr	r3, [pc, #516]	@ (80062dc <loadMenuTexts+0x3d4>)
 80060d6:	4614      	mov	r4, r2
 80060d8:	461d      	mov	r5, r3
 80060da:	6828      	ldr	r0, [r5, #0]
 80060dc:	6869      	ldr	r1, [r5, #4]
 80060de:	68aa      	ldr	r2, [r5, #8]
 80060e0:	68eb      	ldr	r3, [r5, #12]
 80060e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060e4:	7c2b      	ldrb	r3, [r5, #16]
 80060e6:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextTR, 17);
 80060e8:	4a7d      	ldr	r2, [pc, #500]	@ (80062e0 <loadMenuTexts+0x3d8>)
 80060ea:	4b7e      	ldr	r3, [pc, #504]	@ (80062e4 <loadMenuTexts+0x3dc>)
 80060ec:	4614      	mov	r4, r2
 80060ee:	461d      	mov	r5, r3
 80060f0:	6828      	ldr	r0, [r5, #0]
 80060f2:	6869      	ldr	r1, [r5, #4]
 80060f4:	68aa      	ldr	r2, [r5, #8]
 80060f6:	68eb      	ldr	r3, [r5, #12]
 80060f8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80060fa:	7c2b      	ldrb	r3, [r5, #16]
 80060fc:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextTR, 17);
 80060fe:	4a7a      	ldr	r2, [pc, #488]	@ (80062e8 <loadMenuTexts+0x3e0>)
 8006100:	4b7a      	ldr	r3, [pc, #488]	@ (80062ec <loadMenuTexts+0x3e4>)
 8006102:	4614      	mov	r4, r2
 8006104:	461d      	mov	r5, r3
 8006106:	6828      	ldr	r0, [r5, #0]
 8006108:	6869      	ldr	r1, [r5, #4]
 800610a:	68aa      	ldr	r2, [r5, #8]
 800610c:	68eb      	ldr	r3, [r5, #12]
 800610e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006110:	7c2b      	ldrb	r3, [r5, #16]
 8006112:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextTR, 17);
 8006114:	4a76      	ldr	r2, [pc, #472]	@ (80062f0 <loadMenuTexts+0x3e8>)
 8006116:	4b77      	ldr	r3, [pc, #476]	@ (80062f4 <loadMenuTexts+0x3ec>)
 8006118:	4614      	mov	r4, r2
 800611a:	461d      	mov	r5, r3
 800611c:	6828      	ldr	r0, [r5, #0]
 800611e:	6869      	ldr	r1, [r5, #4]
 8006120:	68aa      	ldr	r2, [r5, #8]
 8006122:	68eb      	ldr	r3, [r5, #12]
 8006124:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006126:	7c2b      	ldrb	r3, [r5, #16]
 8006128:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextTR, 17);
 800612a:	4a73      	ldr	r2, [pc, #460]	@ (80062f8 <loadMenuTexts+0x3f0>)
 800612c:	4b73      	ldr	r3, [pc, #460]	@ (80062fc <loadMenuTexts+0x3f4>)
 800612e:	4614      	mov	r4, r2
 8006130:	461d      	mov	r5, r3
 8006132:	6828      	ldr	r0, [r5, #0]
 8006134:	6869      	ldr	r1, [r5, #4]
 8006136:	68aa      	ldr	r2, [r5, #8]
 8006138:	68eb      	ldr	r3, [r5, #12]
 800613a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800613c:	7c2b      	ldrb	r3, [r5, #16]
 800613e:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextTR, 17);
 8006140:	4a6f      	ldr	r2, [pc, #444]	@ (8006300 <loadMenuTexts+0x3f8>)
 8006142:	4b70      	ldr	r3, [pc, #448]	@ (8006304 <loadMenuTexts+0x3fc>)
 8006144:	4614      	mov	r4, r2
 8006146:	461d      	mov	r5, r3
 8006148:	6828      	ldr	r0, [r5, #0]
 800614a:	6869      	ldr	r1, [r5, #4]
 800614c:	68aa      	ldr	r2, [r5, #8]
 800614e:	68eb      	ldr	r3, [r5, #12]
 8006150:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006152:	7c2b      	ldrb	r3, [r5, #16]
 8006154:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextTR, 17);
 8006156:	4a6c      	ldr	r2, [pc, #432]	@ (8006308 <loadMenuTexts+0x400>)
 8006158:	4b6c      	ldr	r3, [pc, #432]	@ (800630c <loadMenuTexts+0x404>)
 800615a:	4614      	mov	r4, r2
 800615c:	461d      	mov	r5, r3
 800615e:	6828      	ldr	r0, [r5, #0]
 8006160:	6869      	ldr	r1, [r5, #4]
 8006162:	68aa      	ldr	r2, [r5, #8]
 8006164:	68eb      	ldr	r3, [r5, #12]
 8006166:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006168:	7c2b      	ldrb	r3, [r5, #16]
 800616a:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextTR, 17);
 800616c:	4a68      	ldr	r2, [pc, #416]	@ (8006310 <loadMenuTexts+0x408>)
 800616e:	4b69      	ldr	r3, [pc, #420]	@ (8006314 <loadMenuTexts+0x40c>)
 8006170:	4614      	mov	r4, r2
 8006172:	461d      	mov	r5, r3
 8006174:	6828      	ldr	r0, [r5, #0]
 8006176:	6869      	ldr	r1, [r5, #4]
 8006178:	68aa      	ldr	r2, [r5, #8]
 800617a:	68eb      	ldr	r3, [r5, #12]
 800617c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800617e:	7c2b      	ldrb	r3, [r5, #16]
 8006180:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextTR, 17);
 8006182:	4a65      	ldr	r2, [pc, #404]	@ (8006318 <loadMenuTexts+0x410>)
 8006184:	4b65      	ldr	r3, [pc, #404]	@ (800631c <loadMenuTexts+0x414>)
 8006186:	4614      	mov	r4, r2
 8006188:	461d      	mov	r5, r3
 800618a:	6828      	ldr	r0, [r5, #0]
 800618c:	6869      	ldr	r1, [r5, #4]
 800618e:	68aa      	ldr	r2, [r5, #8]
 8006190:	68eb      	ldr	r3, [r5, #12]
 8006192:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006194:	7c2b      	ldrb	r3, [r5, #16]
 8006196:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextTR, 17);
 8006198:	4a61      	ldr	r2, [pc, #388]	@ (8006320 <loadMenuTexts+0x418>)
 800619a:	4b62      	ldr	r3, [pc, #392]	@ (8006324 <loadMenuTexts+0x41c>)
 800619c:	4614      	mov	r4, r2
 800619e:	461d      	mov	r5, r3
 80061a0:	6828      	ldr	r0, [r5, #0]
 80061a2:	6869      	ldr	r1, [r5, #4]
 80061a4:	68aa      	ldr	r2, [r5, #8]
 80061a6:	68eb      	ldr	r3, [r5, #12]
 80061a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061aa:	7c2b      	ldrb	r3, [r5, #16]
 80061ac:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextTR, 17);
 80061ae:	4a5e      	ldr	r2, [pc, #376]	@ (8006328 <loadMenuTexts+0x420>)
 80061b0:	4b5e      	ldr	r3, [pc, #376]	@ (800632c <loadMenuTexts+0x424>)
 80061b2:	4614      	mov	r4, r2
 80061b4:	461d      	mov	r5, r3
 80061b6:	6828      	ldr	r0, [r5, #0]
 80061b8:	6869      	ldr	r1, [r5, #4]
 80061ba:	68aa      	ldr	r2, [r5, #8]
 80061bc:	68eb      	ldr	r3, [r5, #12]
 80061be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061c0:	7c2b      	ldrb	r3, [r5, #16]
 80061c2:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextTR, 17);
 80061c4:	4a5a      	ldr	r2, [pc, #360]	@ (8006330 <loadMenuTexts+0x428>)
 80061c6:	4b5b      	ldr	r3, [pc, #364]	@ (8006334 <loadMenuTexts+0x42c>)
 80061c8:	4614      	mov	r4, r2
 80061ca:	461d      	mov	r5, r3
 80061cc:	6828      	ldr	r0, [r5, #0]
 80061ce:	6869      	ldr	r1, [r5, #4]
 80061d0:	68aa      	ldr	r2, [r5, #8]
 80061d2:	68eb      	ldr	r3, [r5, #12]
 80061d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061d6:	7c2b      	ldrb	r3, [r5, #16]
 80061d8:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextTR, 17);
 80061da:	4a57      	ldr	r2, [pc, #348]	@ (8006338 <loadMenuTexts+0x430>)
 80061dc:	4b57      	ldr	r3, [pc, #348]	@ (800633c <loadMenuTexts+0x434>)
 80061de:	4614      	mov	r4, r2
 80061e0:	461d      	mov	r5, r3
 80061e2:	6828      	ldr	r0, [r5, #0]
 80061e4:	6869      	ldr	r1, [r5, #4]
 80061e6:	68aa      	ldr	r2, [r5, #8]
 80061e8:	68eb      	ldr	r3, [r5, #12]
 80061ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80061ec:	7c2b      	ldrb	r3, [r5, #16]
 80061ee:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextTR, 17);
 80061f0:	4a53      	ldr	r2, [pc, #332]	@ (8006340 <loadMenuTexts+0x438>)
 80061f2:	4b54      	ldr	r3, [pc, #336]	@ (8006344 <loadMenuTexts+0x43c>)
 80061f4:	4614      	mov	r4, r2
 80061f6:	461d      	mov	r5, r3
 80061f8:	6828      	ldr	r0, [r5, #0]
 80061fa:	6869      	ldr	r1, [r5, #4]
 80061fc:	68aa      	ldr	r2, [r5, #8]
 80061fe:	68eb      	ldr	r3, [r5, #12]
 8006200:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006202:	7c2b      	ldrb	r3, [r5, #16]
 8006204:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextTR, 17);
 8006206:	4a50      	ldr	r2, [pc, #320]	@ (8006348 <loadMenuTexts+0x440>)
 8006208:	4b50      	ldr	r3, [pc, #320]	@ (800634c <loadMenuTexts+0x444>)
 800620a:	4614      	mov	r4, r2
 800620c:	461d      	mov	r5, r3
 800620e:	6828      	ldr	r0, [r5, #0]
 8006210:	6869      	ldr	r1, [r5, #4]
 8006212:	68aa      	ldr	r2, [r5, #8]
 8006214:	68eb      	ldr	r3, [r5, #12]
 8006216:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006218:	7c2b      	ldrb	r3, [r5, #16]
 800621a:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextTR, 17);
 800621c:	4a4c      	ldr	r2, [pc, #304]	@ (8006350 <loadMenuTexts+0x448>)
 800621e:	4b4d      	ldr	r3, [pc, #308]	@ (8006354 <loadMenuTexts+0x44c>)
 8006220:	4614      	mov	r4, r2
 8006222:	461d      	mov	r5, r3
 8006224:	6828      	ldr	r0, [r5, #0]
 8006226:	6869      	ldr	r1, [r5, #4]
 8006228:	68aa      	ldr	r2, [r5, #8]
 800622a:	68eb      	ldr	r3, [r5, #12]
 800622c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800622e:	7c2b      	ldrb	r3, [r5, #16]
 8006230:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextTR, 17);
 8006232:	4a49      	ldr	r2, [pc, #292]	@ (8006358 <loadMenuTexts+0x450>)
 8006234:	e092      	b.n	800635c <loadMenuTexts+0x454>
 8006236:	bf00      	nop
 8006238:	20001200 	.word	0x20001200
 800623c:	20000190 	.word	0x20000190
 8006240:	20001214 	.word	0x20001214
 8006244:	200001a4 	.word	0x200001a4
 8006248:	20001228 	.word	0x20001228
 800624c:	200001b8 	.word	0x200001b8
 8006250:	2000123c 	.word	0x2000123c
 8006254:	200001cc 	.word	0x200001cc
 8006258:	20001250 	.word	0x20001250
 800625c:	200001e0 	.word	0x200001e0
 8006260:	20001264 	.word	0x20001264
 8006264:	200001f4 	.word	0x200001f4
 8006268:	20001278 	.word	0x20001278
 800626c:	20000208 	.word	0x20000208
 8006270:	2000128c 	.word	0x2000128c
 8006274:	2000021c 	.word	0x2000021c
 8006278:	200012a0 	.word	0x200012a0
 800627c:	20000230 	.word	0x20000230
 8006280:	200012b4 	.word	0x200012b4
 8006284:	20000244 	.word	0x20000244
 8006288:	200012c8 	.word	0x200012c8
 800628c:	20000258 	.word	0x20000258
 8006290:	200012dc 	.word	0x200012dc
 8006294:	2000026c 	.word	0x2000026c
 8006298:	200012f0 	.word	0x200012f0
 800629c:	20000280 	.word	0x20000280
 80062a0:	20001304 	.word	0x20001304
 80062a4:	20000294 	.word	0x20000294
 80062a8:	20001318 	.word	0x20001318
 80062ac:	200002a8 	.word	0x200002a8
 80062b0:	2000132c 	.word	0x2000132c
 80062b4:	200002bc 	.word	0x200002bc
 80062b8:	20001340 	.word	0x20001340
 80062bc:	200002d0 	.word	0x200002d0
 80062c0:	20001354 	.word	0x20001354
 80062c4:	200002e4 	.word	0x200002e4
 80062c8:	20001368 	.word	0x20001368
 80062cc:	200002f8 	.word	0x200002f8
 80062d0:	2000137c 	.word	0x2000137c
 80062d4:	2000030c 	.word	0x2000030c
 80062d8:	20001390 	.word	0x20001390
 80062dc:	20000320 	.word	0x20000320
 80062e0:	200013a4 	.word	0x200013a4
 80062e4:	20000334 	.word	0x20000334
 80062e8:	200013b8 	.word	0x200013b8
 80062ec:	20000348 	.word	0x20000348
 80062f0:	200013cc 	.word	0x200013cc
 80062f4:	2000035c 	.word	0x2000035c
 80062f8:	200013e0 	.word	0x200013e0
 80062fc:	20000370 	.word	0x20000370
 8006300:	200013f4 	.word	0x200013f4
 8006304:	20000384 	.word	0x20000384
 8006308:	20001408 	.word	0x20001408
 800630c:	20000398 	.word	0x20000398
 8006310:	2000141c 	.word	0x2000141c
 8006314:	200003ac 	.word	0x200003ac
 8006318:	20001430 	.word	0x20001430
 800631c:	200003c0 	.word	0x200003c0
 8006320:	20001444 	.word	0x20001444
 8006324:	200003d4 	.word	0x200003d4
 8006328:	20001458 	.word	0x20001458
 800632c:	200003e8 	.word	0x200003e8
 8006330:	2000146c 	.word	0x2000146c
 8006334:	200003fc 	.word	0x200003fc
 8006338:	20001480 	.word	0x20001480
 800633c:	20000410 	.word	0x20000410
 8006340:	20001494 	.word	0x20001494
 8006344:	20000424 	.word	0x20000424
 8006348:	200014a8 	.word	0x200014a8
 800634c:	20000438 	.word	0x20000438
 8006350:	200014bc 	.word	0x200014bc
 8006354:	2000044c 	.word	0x2000044c
 8006358:	200014d0 	.word	0x200014d0
 800635c:	4bc7      	ldr	r3, [pc, #796]	@ (800667c <loadMenuTexts+0x774>)
 800635e:	4614      	mov	r4, r2
 8006360:	461d      	mov	r5, r3
 8006362:	6828      	ldr	r0, [r5, #0]
 8006364:	6869      	ldr	r1, [r5, #4]
 8006366:	68aa      	ldr	r2, [r5, #8]
 8006368:	68eb      	ldr	r3, [r5, #12]
 800636a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800636c:	7c2b      	ldrb	r3, [r5, #16]
 800636e:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextTR, 17);
 8006370:	4ac3      	ldr	r2, [pc, #780]	@ (8006680 <loadMenuTexts+0x778>)
 8006372:	4bc4      	ldr	r3, [pc, #784]	@ (8006684 <loadMenuTexts+0x77c>)
 8006374:	4614      	mov	r4, r2
 8006376:	461d      	mov	r5, r3
 8006378:	6828      	ldr	r0, [r5, #0]
 800637a:	6869      	ldr	r1, [r5, #4]
 800637c:	68aa      	ldr	r2, [r5, #8]
 800637e:	68eb      	ldr	r3, [r5, #12]
 8006380:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006382:	7c2b      	ldrb	r3, [r5, #16]
 8006384:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextTR, 17);
 8006386:	4ac0      	ldr	r2, [pc, #768]	@ (8006688 <loadMenuTexts+0x780>)
 8006388:	4bc0      	ldr	r3, [pc, #768]	@ (800668c <loadMenuTexts+0x784>)
 800638a:	4614      	mov	r4, r2
 800638c:	461d      	mov	r5, r3
 800638e:	6828      	ldr	r0, [r5, #0]
 8006390:	6869      	ldr	r1, [r5, #4]
 8006392:	68aa      	ldr	r2, [r5, #8]
 8006394:	68eb      	ldr	r3, [r5, #12]
 8006396:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006398:	7c2b      	ldrb	r3, [r5, #16]
 800639a:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextTR, 17);
 800639c:	4abc      	ldr	r2, [pc, #752]	@ (8006690 <loadMenuTexts+0x788>)
 800639e:	4bbd      	ldr	r3, [pc, #756]	@ (8006694 <loadMenuTexts+0x78c>)
 80063a0:	4614      	mov	r4, r2
 80063a2:	461d      	mov	r5, r3
 80063a4:	6828      	ldr	r0, [r5, #0]
 80063a6:	6869      	ldr	r1, [r5, #4]
 80063a8:	68aa      	ldr	r2, [r5, #8]
 80063aa:	68eb      	ldr	r3, [r5, #12]
 80063ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063ae:	7c2b      	ldrb	r3, [r5, #16]
 80063b0:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextTR, 17);
 80063b2:	4ab9      	ldr	r2, [pc, #740]	@ (8006698 <loadMenuTexts+0x790>)
 80063b4:	4bb9      	ldr	r3, [pc, #740]	@ (800669c <loadMenuTexts+0x794>)
 80063b6:	4614      	mov	r4, r2
 80063b8:	461d      	mov	r5, r3
 80063ba:	6828      	ldr	r0, [r5, #0]
 80063bc:	6869      	ldr	r1, [r5, #4]
 80063be:	68aa      	ldr	r2, [r5, #8]
 80063c0:	68eb      	ldr	r3, [r5, #12]
 80063c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063c4:	7c2b      	ldrb	r3, [r5, #16]
 80063c6:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextTR, 17);
 80063c8:	4ab5      	ldr	r2, [pc, #724]	@ (80066a0 <loadMenuTexts+0x798>)
 80063ca:	4bb6      	ldr	r3, [pc, #728]	@ (80066a4 <loadMenuTexts+0x79c>)
 80063cc:	4614      	mov	r4, r2
 80063ce:	461d      	mov	r5, r3
 80063d0:	6828      	ldr	r0, [r5, #0]
 80063d2:	6869      	ldr	r1, [r5, #4]
 80063d4:	68aa      	ldr	r2, [r5, #8]
 80063d6:	68eb      	ldr	r3, [r5, #12]
 80063d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063da:	7c2b      	ldrb	r3, [r5, #16]
 80063dc:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextTR, 17);
 80063de:	4ab2      	ldr	r2, [pc, #712]	@ (80066a8 <loadMenuTexts+0x7a0>)
 80063e0:	4bb2      	ldr	r3, [pc, #712]	@ (80066ac <loadMenuTexts+0x7a4>)
 80063e2:	4614      	mov	r4, r2
 80063e4:	461d      	mov	r5, r3
 80063e6:	6828      	ldr	r0, [r5, #0]
 80063e8:	6869      	ldr	r1, [r5, #4]
 80063ea:	68aa      	ldr	r2, [r5, #8]
 80063ec:	68eb      	ldr	r3, [r5, #12]
 80063ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80063f0:	7c2b      	ldrb	r3, [r5, #16]
 80063f2:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextTR, 17);
 80063f4:	4aae      	ldr	r2, [pc, #696]	@ (80066b0 <loadMenuTexts+0x7a8>)
 80063f6:	4baf      	ldr	r3, [pc, #700]	@ (80066b4 <loadMenuTexts+0x7ac>)
 80063f8:	4614      	mov	r4, r2
 80063fa:	461d      	mov	r5, r3
 80063fc:	6828      	ldr	r0, [r5, #0]
 80063fe:	6869      	ldr	r1, [r5, #4]
 8006400:	68aa      	ldr	r2, [r5, #8]
 8006402:	68eb      	ldr	r3, [r5, #12]
 8006404:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006406:	7c2b      	ldrb	r3, [r5, #16]
 8006408:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextTR, 17);
 800640a:	4aab      	ldr	r2, [pc, #684]	@ (80066b8 <loadMenuTexts+0x7b0>)
 800640c:	4bab      	ldr	r3, [pc, #684]	@ (80066bc <loadMenuTexts+0x7b4>)
 800640e:	4614      	mov	r4, r2
 8006410:	461d      	mov	r5, r3
 8006412:	6828      	ldr	r0, [r5, #0]
 8006414:	6869      	ldr	r1, [r5, #4]
 8006416:	68aa      	ldr	r2, [r5, #8]
 8006418:	68eb      	ldr	r3, [r5, #12]
 800641a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800641c:	7c2b      	ldrb	r3, [r5, #16]
 800641e:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextTR, 17);
 8006420:	4aa7      	ldr	r2, [pc, #668]	@ (80066c0 <loadMenuTexts+0x7b8>)
 8006422:	4ba8      	ldr	r3, [pc, #672]	@ (80066c4 <loadMenuTexts+0x7bc>)
 8006424:	4614      	mov	r4, r2
 8006426:	461d      	mov	r5, r3
 8006428:	6828      	ldr	r0, [r5, #0]
 800642a:	6869      	ldr	r1, [r5, #4]
 800642c:	68aa      	ldr	r2, [r5, #8]
 800642e:	68eb      	ldr	r3, [r5, #12]
 8006430:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006432:	7c2b      	ldrb	r3, [r5, #16]
 8006434:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextTR, 17);
 8006436:	4aa4      	ldr	r2, [pc, #656]	@ (80066c8 <loadMenuTexts+0x7c0>)
 8006438:	4ba4      	ldr	r3, [pc, #656]	@ (80066cc <loadMenuTexts+0x7c4>)
 800643a:	4614      	mov	r4, r2
 800643c:	461d      	mov	r5, r3
 800643e:	6828      	ldr	r0, [r5, #0]
 8006440:	6869      	ldr	r1, [r5, #4]
 8006442:	68aa      	ldr	r2, [r5, #8]
 8006444:	68eb      	ldr	r3, [r5, #12]
 8006446:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006448:	7c2b      	ldrb	r3, [r5, #16]
 800644a:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextTR, 17);
 800644c:	4aa0      	ldr	r2, [pc, #640]	@ (80066d0 <loadMenuTexts+0x7c8>)
 800644e:	4ba1      	ldr	r3, [pc, #644]	@ (80066d4 <loadMenuTexts+0x7cc>)
 8006450:	4614      	mov	r4, r2
 8006452:	461d      	mov	r5, r3
 8006454:	6828      	ldr	r0, [r5, #0]
 8006456:	6869      	ldr	r1, [r5, #4]
 8006458:	68aa      	ldr	r2, [r5, #8]
 800645a:	68eb      	ldr	r3, [r5, #12]
 800645c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800645e:	7c2b      	ldrb	r3, [r5, #16]
 8006460:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextTR, 17);
 8006462:	4a9d      	ldr	r2, [pc, #628]	@ (80066d8 <loadMenuTexts+0x7d0>)
 8006464:	4b9d      	ldr	r3, [pc, #628]	@ (80066dc <loadMenuTexts+0x7d4>)
 8006466:	4614      	mov	r4, r2
 8006468:	461d      	mov	r5, r3
 800646a:	6828      	ldr	r0, [r5, #0]
 800646c:	6869      	ldr	r1, [r5, #4]
 800646e:	68aa      	ldr	r2, [r5, #8]
 8006470:	68eb      	ldr	r3, [r5, #12]
 8006472:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006474:	7c2b      	ldrb	r3, [r5, #16]
 8006476:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextTR, 17);
 8006478:	4a99      	ldr	r2, [pc, #612]	@ (80066e0 <loadMenuTexts+0x7d8>)
 800647a:	4b9a      	ldr	r3, [pc, #616]	@ (80066e4 <loadMenuTexts+0x7dc>)
 800647c:	4614      	mov	r4, r2
 800647e:	461d      	mov	r5, r3
 8006480:	6828      	ldr	r0, [r5, #0]
 8006482:	6869      	ldr	r1, [r5, #4]
 8006484:	68aa      	ldr	r2, [r5, #8]
 8006486:	68eb      	ldr	r3, [r5, #12]
 8006488:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800648a:	7c2b      	ldrb	r3, [r5, #16]
 800648c:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextTR, 17);
 800648e:	4a96      	ldr	r2, [pc, #600]	@ (80066e8 <loadMenuTexts+0x7e0>)
 8006490:	4b96      	ldr	r3, [pc, #600]	@ (80066ec <loadMenuTexts+0x7e4>)
 8006492:	4614      	mov	r4, r2
 8006494:	461d      	mov	r5, r3
 8006496:	6828      	ldr	r0, [r5, #0]
 8006498:	6869      	ldr	r1, [r5, #4]
 800649a:	68aa      	ldr	r2, [r5, #8]
 800649c:	68eb      	ldr	r3, [r5, #12]
 800649e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064a0:	7c2b      	ldrb	r3, [r5, #16]
 80064a2:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextTR, 17);
 80064a4:	4a92      	ldr	r2, [pc, #584]	@ (80066f0 <loadMenuTexts+0x7e8>)
 80064a6:	4b93      	ldr	r3, [pc, #588]	@ (80066f4 <loadMenuTexts+0x7ec>)
 80064a8:	4614      	mov	r4, r2
 80064aa:	461d      	mov	r5, r3
 80064ac:	6828      	ldr	r0, [r5, #0]
 80064ae:	6869      	ldr	r1, [r5, #4]
 80064b0:	68aa      	ldr	r2, [r5, #8]
 80064b2:	68eb      	ldr	r3, [r5, #12]
 80064b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064b6:	7c2b      	ldrb	r3, [r5, #16]
 80064b8:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextTR, 17);
 80064ba:	4a8f      	ldr	r2, [pc, #572]	@ (80066f8 <loadMenuTexts+0x7f0>)
 80064bc:	4b8f      	ldr	r3, [pc, #572]	@ (80066fc <loadMenuTexts+0x7f4>)
 80064be:	4614      	mov	r4, r2
 80064c0:	461d      	mov	r5, r3
 80064c2:	6828      	ldr	r0, [r5, #0]
 80064c4:	6869      	ldr	r1, [r5, #4]
 80064c6:	68aa      	ldr	r2, [r5, #8]
 80064c8:	68eb      	ldr	r3, [r5, #12]
 80064ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064cc:	7c2b      	ldrb	r3, [r5, #16]
 80064ce:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextTR, 17);
 80064d0:	4a8b      	ldr	r2, [pc, #556]	@ (8006700 <loadMenuTexts+0x7f8>)
 80064d2:	4b8c      	ldr	r3, [pc, #560]	@ (8006704 <loadMenuTexts+0x7fc>)
 80064d4:	4614      	mov	r4, r2
 80064d6:	461d      	mov	r5, r3
 80064d8:	6828      	ldr	r0, [r5, #0]
 80064da:	6869      	ldr	r1, [r5, #4]
 80064dc:	68aa      	ldr	r2, [r5, #8]
 80064de:	68eb      	ldr	r3, [r5, #12]
 80064e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064e2:	7c2b      	ldrb	r3, [r5, #16]
 80064e4:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextTR, 17);
 80064e6:	4a88      	ldr	r2, [pc, #544]	@ (8006708 <loadMenuTexts+0x800>)
 80064e8:	4b88      	ldr	r3, [pc, #544]	@ (800670c <loadMenuTexts+0x804>)
 80064ea:	4614      	mov	r4, r2
 80064ec:	461d      	mov	r5, r3
 80064ee:	6828      	ldr	r0, [r5, #0]
 80064f0:	6869      	ldr	r1, [r5, #4]
 80064f2:	68aa      	ldr	r2, [r5, #8]
 80064f4:	68eb      	ldr	r3, [r5, #12]
 80064f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80064f8:	7c2b      	ldrb	r3, [r5, #16]
 80064fa:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextTR, 17);
 80064fc:	4a84      	ldr	r2, [pc, #528]	@ (8006710 <loadMenuTexts+0x808>)
 80064fe:	4b85      	ldr	r3, [pc, #532]	@ (8006714 <loadMenuTexts+0x80c>)
 8006500:	4614      	mov	r4, r2
 8006502:	461d      	mov	r5, r3
 8006504:	6828      	ldr	r0, [r5, #0]
 8006506:	6869      	ldr	r1, [r5, #4]
 8006508:	68aa      	ldr	r2, [r5, #8]
 800650a:	68eb      	ldr	r3, [r5, #12]
 800650c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800650e:	7c2b      	ldrb	r3, [r5, #16]
 8006510:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextTR, 17);
 8006512:	4a81      	ldr	r2, [pc, #516]	@ (8006718 <loadMenuTexts+0x810>)
 8006514:	4b81      	ldr	r3, [pc, #516]	@ (800671c <loadMenuTexts+0x814>)
 8006516:	4614      	mov	r4, r2
 8006518:	461d      	mov	r5, r3
 800651a:	6828      	ldr	r0, [r5, #0]
 800651c:	6869      	ldr	r1, [r5, #4]
 800651e:	68aa      	ldr	r2, [r5, #8]
 8006520:	68eb      	ldr	r3, [r5, #12]
 8006522:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006524:	7c2b      	ldrb	r3, [r5, #16]
 8006526:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextTR, 17);
 8006528:	4a7d      	ldr	r2, [pc, #500]	@ (8006720 <loadMenuTexts+0x818>)
 800652a:	4b7e      	ldr	r3, [pc, #504]	@ (8006724 <loadMenuTexts+0x81c>)
 800652c:	4614      	mov	r4, r2
 800652e:	461d      	mov	r5, r3
 8006530:	6828      	ldr	r0, [r5, #0]
 8006532:	6869      	ldr	r1, [r5, #4]
 8006534:	68aa      	ldr	r2, [r5, #8]
 8006536:	68eb      	ldr	r3, [r5, #12]
 8006538:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800653a:	7c2b      	ldrb	r3, [r5, #16]
 800653c:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextTR, 17);
 800653e:	4a7a      	ldr	r2, [pc, #488]	@ (8006728 <loadMenuTexts+0x820>)
 8006540:	4b7a      	ldr	r3, [pc, #488]	@ (800672c <loadMenuTexts+0x824>)
 8006542:	4614      	mov	r4, r2
 8006544:	461d      	mov	r5, r3
 8006546:	6828      	ldr	r0, [r5, #0]
 8006548:	6869      	ldr	r1, [r5, #4]
 800654a:	68aa      	ldr	r2, [r5, #8]
 800654c:	68eb      	ldr	r3, [r5, #12]
 800654e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006550:	7c2b      	ldrb	r3, [r5, #16]
 8006552:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextTR, 17);
 8006554:	4a76      	ldr	r2, [pc, #472]	@ (8006730 <loadMenuTexts+0x828>)
 8006556:	4b77      	ldr	r3, [pc, #476]	@ (8006734 <loadMenuTexts+0x82c>)
 8006558:	4614      	mov	r4, r2
 800655a:	461d      	mov	r5, r3
 800655c:	6828      	ldr	r0, [r5, #0]
 800655e:	6869      	ldr	r1, [r5, #4]
 8006560:	68aa      	ldr	r2, [r5, #8]
 8006562:	68eb      	ldr	r3, [r5, #12]
 8006564:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006566:	7c2b      	ldrb	r3, [r5, #16]
 8006568:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextTR, 17);
 800656a:	4a73      	ldr	r2, [pc, #460]	@ (8006738 <loadMenuTexts+0x830>)
 800656c:	4b73      	ldr	r3, [pc, #460]	@ (800673c <loadMenuTexts+0x834>)
 800656e:	4614      	mov	r4, r2
 8006570:	461d      	mov	r5, r3
 8006572:	6828      	ldr	r0, [r5, #0]
 8006574:	6869      	ldr	r1, [r5, #4]
 8006576:	68aa      	ldr	r2, [r5, #8]
 8006578:	68eb      	ldr	r3, [r5, #12]
 800657a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800657c:	7c2b      	ldrb	r3, [r5, #16]
 800657e:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextTR, 17);
 8006580:	4a6f      	ldr	r2, [pc, #444]	@ (8006740 <loadMenuTexts+0x838>)
 8006582:	4b70      	ldr	r3, [pc, #448]	@ (8006744 <loadMenuTexts+0x83c>)
 8006584:	4614      	mov	r4, r2
 8006586:	461d      	mov	r5, r3
 8006588:	6828      	ldr	r0, [r5, #0]
 800658a:	6869      	ldr	r1, [r5, #4]
 800658c:	68aa      	ldr	r2, [r5, #8]
 800658e:	68eb      	ldr	r3, [r5, #12]
 8006590:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006592:	7c2b      	ldrb	r3, [r5, #16]
 8006594:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextTR, 17);
 8006596:	4a6c      	ldr	r2, [pc, #432]	@ (8006748 <loadMenuTexts+0x840>)
 8006598:	4b6c      	ldr	r3, [pc, #432]	@ (800674c <loadMenuTexts+0x844>)
 800659a:	4614      	mov	r4, r2
 800659c:	461d      	mov	r5, r3
 800659e:	6828      	ldr	r0, [r5, #0]
 80065a0:	6869      	ldr	r1, [r5, #4]
 80065a2:	68aa      	ldr	r2, [r5, #8]
 80065a4:	68eb      	ldr	r3, [r5, #12]
 80065a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065a8:	7c2b      	ldrb	r3, [r5, #16]
 80065aa:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextTR, 17);
 80065ac:	4a68      	ldr	r2, [pc, #416]	@ (8006750 <loadMenuTexts+0x848>)
 80065ae:	4b69      	ldr	r3, [pc, #420]	@ (8006754 <loadMenuTexts+0x84c>)
 80065b0:	4614      	mov	r4, r2
 80065b2:	461d      	mov	r5, r3
 80065b4:	6828      	ldr	r0, [r5, #0]
 80065b6:	6869      	ldr	r1, [r5, #4]
 80065b8:	68aa      	ldr	r2, [r5, #8]
 80065ba:	68eb      	ldr	r3, [r5, #12]
 80065bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065be:	7c2b      	ldrb	r3, [r5, #16]
 80065c0:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextTR, 17);
 80065c2:	4a65      	ldr	r2, [pc, #404]	@ (8006758 <loadMenuTexts+0x850>)
 80065c4:	4b65      	ldr	r3, [pc, #404]	@ (800675c <loadMenuTexts+0x854>)
 80065c6:	4614      	mov	r4, r2
 80065c8:	461d      	mov	r5, r3
 80065ca:	6828      	ldr	r0, [r5, #0]
 80065cc:	6869      	ldr	r1, [r5, #4]
 80065ce:	68aa      	ldr	r2, [r5, #8]
 80065d0:	68eb      	ldr	r3, [r5, #12]
 80065d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065d4:	7c2b      	ldrb	r3, [r5, #16]
 80065d6:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextTR, 17);
 80065d8:	4a61      	ldr	r2, [pc, #388]	@ (8006760 <loadMenuTexts+0x858>)
 80065da:	4b62      	ldr	r3, [pc, #392]	@ (8006764 <loadMenuTexts+0x85c>)
 80065dc:	4614      	mov	r4, r2
 80065de:	461d      	mov	r5, r3
 80065e0:	6828      	ldr	r0, [r5, #0]
 80065e2:	6869      	ldr	r1, [r5, #4]
 80065e4:	68aa      	ldr	r2, [r5, #8]
 80065e6:	68eb      	ldr	r3, [r5, #12]
 80065e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80065ea:	7c2b      	ldrb	r3, [r5, #16]
 80065ec:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextTR, 17);
 80065ee:	4a5e      	ldr	r2, [pc, #376]	@ (8006768 <loadMenuTexts+0x860>)
 80065f0:	4b5e      	ldr	r3, [pc, #376]	@ (800676c <loadMenuTexts+0x864>)
 80065f2:	4614      	mov	r4, r2
 80065f4:	461d      	mov	r5, r3
 80065f6:	6828      	ldr	r0, [r5, #0]
 80065f8:	6869      	ldr	r1, [r5, #4]
 80065fa:	68aa      	ldr	r2, [r5, #8]
 80065fc:	68eb      	ldr	r3, [r5, #12]
 80065fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006600:	7c2b      	ldrb	r3, [r5, #16]
 8006602:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextTR, 17);
 8006604:	4a5a      	ldr	r2, [pc, #360]	@ (8006770 <loadMenuTexts+0x868>)
 8006606:	4b5b      	ldr	r3, [pc, #364]	@ (8006774 <loadMenuTexts+0x86c>)
 8006608:	4614      	mov	r4, r2
 800660a:	461d      	mov	r5, r3
 800660c:	6828      	ldr	r0, [r5, #0]
 800660e:	6869      	ldr	r1, [r5, #4]
 8006610:	68aa      	ldr	r2, [r5, #8]
 8006612:	68eb      	ldr	r3, [r5, #12]
 8006614:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006616:	7c2b      	ldrb	r3, [r5, #16]
 8006618:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextTR, 17);
 800661a:	4a57      	ldr	r2, [pc, #348]	@ (8006778 <loadMenuTexts+0x870>)
 800661c:	4b57      	ldr	r3, [pc, #348]	@ (800677c <loadMenuTexts+0x874>)
 800661e:	4614      	mov	r4, r2
 8006620:	461d      	mov	r5, r3
 8006622:	6828      	ldr	r0, [r5, #0]
 8006624:	6869      	ldr	r1, [r5, #4]
 8006626:	68aa      	ldr	r2, [r5, #8]
 8006628:	68eb      	ldr	r3, [r5, #12]
 800662a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800662c:	7c2b      	ldrb	r3, [r5, #16]
 800662e:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextTR, 17);
 8006630:	4a53      	ldr	r2, [pc, #332]	@ (8006780 <loadMenuTexts+0x878>)
 8006632:	4b54      	ldr	r3, [pc, #336]	@ (8006784 <loadMenuTexts+0x87c>)
 8006634:	4614      	mov	r4, r2
 8006636:	461d      	mov	r5, r3
 8006638:	6828      	ldr	r0, [r5, #0]
 800663a:	6869      	ldr	r1, [r5, #4]
 800663c:	68aa      	ldr	r2, [r5, #8]
 800663e:	68eb      	ldr	r3, [r5, #12]
 8006640:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006642:	7c2b      	ldrb	r3, [r5, #16]
 8006644:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynchText, dataSynchTextTR, 17);
 8006646:	4a50      	ldr	r2, [pc, #320]	@ (8006788 <loadMenuTexts+0x880>)
 8006648:	4b50      	ldr	r3, [pc, #320]	@ (800678c <loadMenuTexts+0x884>)
 800664a:	4614      	mov	r4, r2
 800664c:	461d      	mov	r5, r3
 800664e:	6828      	ldr	r0, [r5, #0]
 8006650:	6869      	ldr	r1, [r5, #4]
 8006652:	68aa      	ldr	r2, [r5, #8]
 8006654:	68eb      	ldr	r3, [r5, #12]
 8006656:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006658:	7c2b      	ldrb	r3, [r5, #16]
 800665a:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynch2Text, dataSynch2TextTR, 17);
 800665c:	4a4c      	ldr	r2, [pc, #304]	@ (8006790 <loadMenuTexts+0x888>)
 800665e:	4b4d      	ldr	r3, [pc, #308]	@ (8006794 <loadMenuTexts+0x88c>)
 8006660:	4614      	mov	r4, r2
 8006662:	461d      	mov	r5, r3
 8006664:	6828      	ldr	r0, [r5, #0]
 8006666:	6869      	ldr	r1, [r5, #4]
 8006668:	68aa      	ldr	r2, [r5, #8]
 800666a:	68eb      	ldr	r3, [r5, #12]
 800666c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800666e:	7c2b      	ldrb	r3, [r5, #16]
 8006670:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUniqueText, mustBeUniqueTextTR, 17);
 8006672:	4a49      	ldr	r2, [pc, #292]	@ (8006798 <loadMenuTexts+0x890>)
 8006674:	4b49      	ldr	r3, [pc, #292]	@ (800679c <loadMenuTexts+0x894>)
 8006676:	4614      	mov	r4, r2
 8006678:	461d      	mov	r5, r3
 800667a:	e091      	b.n	80067a0 <loadMenuTexts+0x898>
 800667c:	20000460 	.word	0x20000460
 8006680:	200014e4 	.word	0x200014e4
 8006684:	20000474 	.word	0x20000474
 8006688:	200014f8 	.word	0x200014f8
 800668c:	20000488 	.word	0x20000488
 8006690:	2000150c 	.word	0x2000150c
 8006694:	2000049c 	.word	0x2000049c
 8006698:	20001520 	.word	0x20001520
 800669c:	200004b0 	.word	0x200004b0
 80066a0:	20001534 	.word	0x20001534
 80066a4:	200004c4 	.word	0x200004c4
 80066a8:	20001548 	.word	0x20001548
 80066ac:	200004d8 	.word	0x200004d8
 80066b0:	2000155c 	.word	0x2000155c
 80066b4:	200004ec 	.word	0x200004ec
 80066b8:	20001570 	.word	0x20001570
 80066bc:	20000500 	.word	0x20000500
 80066c0:	20001584 	.word	0x20001584
 80066c4:	20000514 	.word	0x20000514
 80066c8:	20001598 	.word	0x20001598
 80066cc:	20000528 	.word	0x20000528
 80066d0:	200015ac 	.word	0x200015ac
 80066d4:	2000053c 	.word	0x2000053c
 80066d8:	200015c0 	.word	0x200015c0
 80066dc:	20000550 	.word	0x20000550
 80066e0:	200015d4 	.word	0x200015d4
 80066e4:	20000564 	.word	0x20000564
 80066e8:	200015e8 	.word	0x200015e8
 80066ec:	20000578 	.word	0x20000578
 80066f0:	200015fc 	.word	0x200015fc
 80066f4:	2000058c 	.word	0x2000058c
 80066f8:	20001610 	.word	0x20001610
 80066fc:	200005a0 	.word	0x200005a0
 8006700:	20001624 	.word	0x20001624
 8006704:	200005b4 	.word	0x200005b4
 8006708:	20001638 	.word	0x20001638
 800670c:	200005c8 	.word	0x200005c8
 8006710:	2000164c 	.word	0x2000164c
 8006714:	200005dc 	.word	0x200005dc
 8006718:	20001660 	.word	0x20001660
 800671c:	200005f0 	.word	0x200005f0
 8006720:	20001674 	.word	0x20001674
 8006724:	20000604 	.word	0x20000604
 8006728:	20001688 	.word	0x20001688
 800672c:	20000618 	.word	0x20000618
 8006730:	2000169c 	.word	0x2000169c
 8006734:	2000062c 	.word	0x2000062c
 8006738:	200016b0 	.word	0x200016b0
 800673c:	20000640 	.word	0x20000640
 8006740:	200016c4 	.word	0x200016c4
 8006744:	20000654 	.word	0x20000654
 8006748:	200016d8 	.word	0x200016d8
 800674c:	20000668 	.word	0x20000668
 8006750:	200016ec 	.word	0x200016ec
 8006754:	2000067c 	.word	0x2000067c
 8006758:	20001700 	.word	0x20001700
 800675c:	20000690 	.word	0x20000690
 8006760:	20001714 	.word	0x20001714
 8006764:	200006a4 	.word	0x200006a4
 8006768:	20001728 	.word	0x20001728
 800676c:	200006b8 	.word	0x200006b8
 8006770:	2000173c 	.word	0x2000173c
 8006774:	200006cc 	.word	0x200006cc
 8006778:	20001750 	.word	0x20001750
 800677c:	200006e0 	.word	0x200006e0
 8006780:	20001764 	.word	0x20001764
 8006784:	200006f4 	.word	0x200006f4
 8006788:	20001778 	.word	0x20001778
 800678c:	20000c80 	.word	0x20000c80
 8006790:	2000178c 	.word	0x2000178c
 8006794:	20000c94 	.word	0x20000c94
 8006798:	200017a0 	.word	0x200017a0
 800679c:	20000ca8 	.word	0x20000ca8
 80067a0:	6828      	ldr	r0, [r5, #0]
 80067a2:	6869      	ldr	r1, [r5, #4]
 80067a4:	68aa      	ldr	r2, [r5, #8]
 80067a6:	68eb      	ldr	r3, [r5, #12]
 80067a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067aa:	7c2b      	ldrb	r3, [r5, #16]
 80067ac:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUnique2Text, mustBeUnique2TextTR, 17);
 80067ae:	4a53      	ldr	r2, [pc, #332]	@ (80068fc <loadMenuTexts+0x9f4>)
 80067b0:	4b53      	ldr	r3, [pc, #332]	@ (8006900 <loadMenuTexts+0x9f8>)
 80067b2:	4614      	mov	r4, r2
 80067b4:	461d      	mov	r5, r3
 80067b6:	6828      	ldr	r0, [r5, #0]
 80067b8:	6869      	ldr	r1, [r5, #4]
 80067ba:	68aa      	ldr	r2, [r5, #8]
 80067bc:	68eb      	ldr	r3, [r5, #12]
 80067be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067c0:	7c2b      	ldrb	r3, [r5, #16]
 80067c2:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe12Text, mustBe12TextTR, 17);
 80067c4:	4a4f      	ldr	r2, [pc, #316]	@ (8006904 <loadMenuTexts+0x9fc>)
 80067c6:	4b50      	ldr	r3, [pc, #320]	@ (8006908 <loadMenuTexts+0xa00>)
 80067c8:	4614      	mov	r4, r2
 80067ca:	461d      	mov	r5, r3
 80067cc:	6828      	ldr	r0, [r5, #0]
 80067ce:	6869      	ldr	r1, [r5, #4]
 80067d0:	68aa      	ldr	r2, [r5, #8]
 80067d2:	68eb      	ldr	r3, [r5, #12]
 80067d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067d6:	7c2b      	ldrb	r3, [r5, #16]
 80067d8:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe122Text, mustBe122TextTR, 17);
 80067da:	4a4c      	ldr	r2, [pc, #304]	@ (800690c <loadMenuTexts+0xa04>)
 80067dc:	4b4c      	ldr	r3, [pc, #304]	@ (8006910 <loadMenuTexts+0xa08>)
 80067de:	4614      	mov	r4, r2
 80067e0:	461d      	mov	r5, r3
 80067e2:	6828      	ldr	r0, [r5, #0]
 80067e4:	6869      	ldr	r1, [r5, #4]
 80067e6:	68aa      	ldr	r2, [r5, #8]
 80067e8:	68eb      	ldr	r3, [r5, #12]
 80067ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80067ec:	7c2b      	ldrb	r3, [r5, #16]
 80067ee:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedErrorText, ssidExceedErrorTextTR, 17);
 80067f0:	4a48      	ldr	r2, [pc, #288]	@ (8006914 <loadMenuTexts+0xa0c>)
 80067f2:	4b49      	ldr	r3, [pc, #292]	@ (8006918 <loadMenuTexts+0xa10>)
 80067f4:	4614      	mov	r4, r2
 80067f6:	461d      	mov	r5, r3
 80067f8:	6828      	ldr	r0, [r5, #0]
 80067fa:	6869      	ldr	r1, [r5, #4]
 80067fc:	68aa      	ldr	r2, [r5, #8]
 80067fe:	68eb      	ldr	r3, [r5, #12]
 8006800:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006802:	7c2b      	ldrb	r3, [r5, #16]
 8006804:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedError2Text, ssidExceedError2TextTR, 17);
 8006806:	4a45      	ldr	r2, [pc, #276]	@ (800691c <loadMenuTexts+0xa14>)
 8006808:	4b45      	ldr	r3, [pc, #276]	@ (8006920 <loadMenuTexts+0xa18>)
 800680a:	4614      	mov	r4, r2
 800680c:	461d      	mov	r5, r3
 800680e:	6828      	ldr	r0, [r5, #0]
 8006810:	6869      	ldr	r1, [r5, #4]
 8006812:	68aa      	ldr	r2, [r5, #8]
 8006814:	68eb      	ldr	r3, [r5, #12]
 8006816:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006818:	7c2b      	ldrb	r3, [r5, #16]
 800681a:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedErrorText, passExceedErrorTextTR, 17);
 800681c:	4a41      	ldr	r2, [pc, #260]	@ (8006924 <loadMenuTexts+0xa1c>)
 800681e:	4b42      	ldr	r3, [pc, #264]	@ (8006928 <loadMenuTexts+0xa20>)
 8006820:	4614      	mov	r4, r2
 8006822:	461d      	mov	r5, r3
 8006824:	6828      	ldr	r0, [r5, #0]
 8006826:	6869      	ldr	r1, [r5, #4]
 8006828:	68aa      	ldr	r2, [r5, #8]
 800682a:	68eb      	ldr	r3, [r5, #12]
 800682c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800682e:	7c2b      	ldrb	r3, [r5, #16]
 8006830:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedError2Text, passExceedError2TextTR, 17);
 8006832:	4a3e      	ldr	r2, [pc, #248]	@ (800692c <loadMenuTexts+0xa24>)
 8006834:	4b3e      	ldr	r3, [pc, #248]	@ (8006930 <loadMenuTexts+0xa28>)
 8006836:	4614      	mov	r4, r2
 8006838:	461d      	mov	r5, r3
 800683a:	6828      	ldr	r0, [r5, #0]
 800683c:	6869      	ldr	r1, [r5, #4]
 800683e:	68aa      	ldr	r2, [r5, #8]
 8006840:	68eb      	ldr	r3, [r5, #12]
 8006842:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006844:	7c2b      	ldrb	r3, [r5, #16]
 8006846:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextTR, 17);
 8006848:	4a3a      	ldr	r2, [pc, #232]	@ (8006934 <loadMenuTexts+0xa2c>)
 800684a:	4b3b      	ldr	r3, [pc, #236]	@ (8006938 <loadMenuTexts+0xa30>)
 800684c:	4614      	mov	r4, r2
 800684e:	461d      	mov	r5, r3
 8006850:	6828      	ldr	r0, [r5, #0]
 8006852:	6869      	ldr	r1, [r5, #4]
 8006854:	68aa      	ldr	r2, [r5, #8]
 8006856:	68eb      	ldr	r3, [r5, #12]
 8006858:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800685a:	7c2b      	ldrb	r3, [r5, #16]
 800685c:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextTR, 17);
 800685e:	4a37      	ldr	r2, [pc, #220]	@ (800693c <loadMenuTexts+0xa34>)
 8006860:	4b37      	ldr	r3, [pc, #220]	@ (8006940 <loadMenuTexts+0xa38>)
 8006862:	4614      	mov	r4, r2
 8006864:	461d      	mov	r5, r3
 8006866:	6828      	ldr	r0, [r5, #0]
 8006868:	6869      	ldr	r1, [r5, #4]
 800686a:	68aa      	ldr	r2, [r5, #8]
 800686c:	68eb      	ldr	r3, [r5, #12]
 800686e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006870:	7c2b      	ldrb	r3, [r5, #16]
 8006872:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextTR, 17);
 8006874:	4a33      	ldr	r2, [pc, #204]	@ (8006944 <loadMenuTexts+0xa3c>)
 8006876:	4b34      	ldr	r3, [pc, #208]	@ (8006948 <loadMenuTexts+0xa40>)
 8006878:	4614      	mov	r4, r2
 800687a:	461d      	mov	r5, r3
 800687c:	6828      	ldr	r0, [r5, #0]
 800687e:	6869      	ldr	r1, [r5, #4]
 8006880:	68aa      	ldr	r2, [r5, #8]
 8006882:	68eb      	ldr	r3, [r5, #12]
 8006884:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006886:	7c2b      	ldrb	r3, [r5, #16]
 8006888:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextTR, 17);
 800688a:	4a30      	ldr	r2, [pc, #192]	@ (800694c <loadMenuTexts+0xa44>)
 800688c:	4b30      	ldr	r3, [pc, #192]	@ (8006950 <loadMenuTexts+0xa48>)
 800688e:	4614      	mov	r4, r2
 8006890:	461d      	mov	r5, r3
 8006892:	6828      	ldr	r0, [r5, #0]
 8006894:	6869      	ldr	r1, [r5, #4]
 8006896:	68aa      	ldr	r2, [r5, #8]
 8006898:	68eb      	ldr	r3, [r5, #12]
 800689a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800689c:	7c2b      	ldrb	r3, [r5, #16]
 800689e:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextTR, 17);
 80068a0:	4a2c      	ldr	r2, [pc, #176]	@ (8006954 <loadMenuTexts+0xa4c>)
 80068a2:	4b2d      	ldr	r3, [pc, #180]	@ (8006958 <loadMenuTexts+0xa50>)
 80068a4:	4614      	mov	r4, r2
 80068a6:	461d      	mov	r5, r3
 80068a8:	6828      	ldr	r0, [r5, #0]
 80068aa:	6869      	ldr	r1, [r5, #4]
 80068ac:	68aa      	ldr	r2, [r5, #8]
 80068ae:	68eb      	ldr	r3, [r5, #12]
 80068b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068b2:	7c2b      	ldrb	r3, [r5, #16]
 80068b4:	7023      	strb	r3, [r4, #0]
		memcpy(machineIDText, machineIDTextTR, 17);
 80068b6:	4a29      	ldr	r2, [pc, #164]	@ (800695c <loadMenuTexts+0xa54>)
 80068b8:	4b29      	ldr	r3, [pc, #164]	@ (8006960 <loadMenuTexts+0xa58>)
 80068ba:	4614      	mov	r4, r2
 80068bc:	461d      	mov	r5, r3
 80068be:	6828      	ldr	r0, [r5, #0]
 80068c0:	6869      	ldr	r1, [r5, #4]
 80068c2:	68aa      	ldr	r2, [r5, #8]
 80068c4:	68eb      	ldr	r3, [r5, #12]
 80068c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068c8:	7c2b      	ldrb	r3, [r5, #16]
 80068ca:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationText, idConfirmationTextTR, 17);
 80068cc:	4a25      	ldr	r2, [pc, #148]	@ (8006964 <loadMenuTexts+0xa5c>)
 80068ce:	4b26      	ldr	r3, [pc, #152]	@ (8006968 <loadMenuTexts+0xa60>)
 80068d0:	4614      	mov	r4, r2
 80068d2:	461d      	mov	r5, r3
 80068d4:	6828      	ldr	r0, [r5, #0]
 80068d6:	6869      	ldr	r1, [r5, #4]
 80068d8:	68aa      	ldr	r2, [r5, #8]
 80068da:	68eb      	ldr	r3, [r5, #12]
 80068dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068de:	7c2b      	ldrb	r3, [r5, #16]
 80068e0:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationSubText, idConfirmationSubTextTR, 17);
 80068e2:	4a22      	ldr	r2, [pc, #136]	@ (800696c <loadMenuTexts+0xa64>)
 80068e4:	4b22      	ldr	r3, [pc, #136]	@ (8006970 <loadMenuTexts+0xa68>)
 80068e6:	4614      	mov	r4, r2
 80068e8:	461d      	mov	r5, r3
 80068ea:	6828      	ldr	r0, [r5, #0]
 80068ec:	6869      	ldr	r1, [r5, #4]
 80068ee:	68aa      	ldr	r2, [r5, #8]
 80068f0:	68eb      	ldr	r3, [r5, #12]
 80068f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80068f4:	7c2b      	ldrb	r3, [r5, #16]
 80068f6:	7023      	strb	r3, [r4, #0]
 80068f8:	f000 bd2a 	b.w	8007350 <loadMenuTexts+0x1448>
 80068fc:	200017b4 	.word	0x200017b4
 8006900:	20000cbc 	.word	0x20000cbc
 8006904:	200017c8 	.word	0x200017c8
 8006908:	20000d20 	.word	0x20000d20
 800690c:	200017dc 	.word	0x200017dc
 8006910:	20000d34 	.word	0x20000d34
 8006914:	200017f0 	.word	0x200017f0
 8006918:	20000d70 	.word	0x20000d70
 800691c:	20001804 	.word	0x20001804
 8006920:	20000d84 	.word	0x20000d84
 8006924:	20001818 	.word	0x20001818
 8006928:	20000dc0 	.word	0x20000dc0
 800692c:	2000182c 	.word	0x2000182c
 8006930:	20000dd4 	.word	0x20000dd4
 8006934:	20001840 	.word	0x20001840
 8006938:	20000e10 	.word	0x20000e10
 800693c:	20001854 	.word	0x20001854
 8006940:	20000e38 	.word	0x20000e38
 8006944:	20001868 	.word	0x20001868
 8006948:	20000e60 	.word	0x20000e60
 800694c:	2000187c 	.word	0x2000187c
 8006950:	20000e88 	.word	0x20000e88
 8006954:	20001890 	.word	0x20001890
 8006958:	20000eb0 	.word	0x20000eb0
 800695c:	200018a4 	.word	0x200018a4
 8006960:	20000ed8 	.word	0x20000ed8
 8006964:	200018b8 	.word	0x200018b8
 8006968:	20000f00 	.word	0x20000f00
 800696c:	200018cc 	.word	0x200018cc
 8006970:	20000f28 	.word	0x20000f28
	} else {
		memcpy(menuyeGirildiText, menuyeGirildiTextEN, 17); //destination, source, size
 8006974:	4ac6      	ldr	r2, [pc, #792]	@ (8006c90 <loadMenuTexts+0xd88>)
 8006976:	4bc7      	ldr	r3, [pc, #796]	@ (8006c94 <loadMenuTexts+0xd8c>)
 8006978:	4614      	mov	r4, r2
 800697a:	461d      	mov	r5, r3
 800697c:	6828      	ldr	r0, [r5, #0]
 800697e:	6869      	ldr	r1, [r5, #4]
 8006980:	68aa      	ldr	r2, [r5, #8]
 8006982:	68eb      	ldr	r3, [r5, #12]
 8006984:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006986:	7c2b      	ldrb	r3, [r5, #16]
 8006988:	7023      	strb	r3, [r4, #0]
		memcpy(ayarlarText, ayarlarTextEN, 17);
 800698a:	4ac3      	ldr	r2, [pc, #780]	@ (8006c98 <loadMenuTexts+0xd90>)
 800698c:	4bc3      	ldr	r3, [pc, #780]	@ (8006c9c <loadMenuTexts+0xd94>)
 800698e:	4614      	mov	r4, r2
 8006990:	461d      	mov	r5, r3
 8006992:	6828      	ldr	r0, [r5, #0]
 8006994:	6869      	ldr	r1, [r5, #4]
 8006996:	68aa      	ldr	r2, [r5, #8]
 8006998:	68eb      	ldr	r3, [r5, #12]
 800699a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800699c:	7c2b      	ldrb	r3, [r5, #16]
 800699e:	7023      	strb	r3, [r4, #0]
		memcpy(hataKayitListText, hataKayitListTextEN, 17);
 80069a0:	4abf      	ldr	r2, [pc, #764]	@ (8006ca0 <loadMenuTexts+0xd98>)
 80069a2:	4bc0      	ldr	r3, [pc, #768]	@ (8006ca4 <loadMenuTexts+0xd9c>)
 80069a4:	4614      	mov	r4, r2
 80069a6:	461d      	mov	r5, r3
 80069a8:	6828      	ldr	r0, [r5, #0]
 80069aa:	6869      	ldr	r1, [r5, #4]
 80069ac:	68aa      	ldr	r2, [r5, #8]
 80069ae:	68eb      	ldr	r3, [r5, #12]
 80069b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069b2:	7c2b      	ldrb	r3, [r5, #16]
 80069b4:	7023      	strb	r3, [r4, #0]
		memcpy(birHataKoduText, birHataKoduTextEN, 17);
 80069b6:	4abc      	ldr	r2, [pc, #752]	@ (8006ca8 <loadMenuTexts+0xda0>)
 80069b8:	4bbc      	ldr	r3, [pc, #752]	@ (8006cac <loadMenuTexts+0xda4>)
 80069ba:	4614      	mov	r4, r2
 80069bc:	461d      	mov	r5, r3
 80069be:	6828      	ldr	r0, [r5, #0]
 80069c0:	6869      	ldr	r1, [r5, #4]
 80069c2:	68aa      	ldr	r2, [r5, #8]
 80069c4:	68eb      	ldr	r3, [r5, #12]
 80069c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069c8:	7c2b      	ldrb	r3, [r5, #16]
 80069ca:	7023      	strb	r3, [r4, #0]
		memcpy(ikiHataKoduText, ikiHataKoduTextEN, 17);
 80069cc:	4ab8      	ldr	r2, [pc, #736]	@ (8006cb0 <loadMenuTexts+0xda8>)
 80069ce:	4bb9      	ldr	r3, [pc, #740]	@ (8006cb4 <loadMenuTexts+0xdac>)
 80069d0:	4614      	mov	r4, r2
 80069d2:	461d      	mov	r5, r3
 80069d4:	6828      	ldr	r0, [r5, #0]
 80069d6:	6869      	ldr	r1, [r5, #4]
 80069d8:	68aa      	ldr	r2, [r5, #8]
 80069da:	68eb      	ldr	r3, [r5, #12]
 80069dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069de:	7c2b      	ldrb	r3, [r5, #16]
 80069e0:	7023      	strb	r3, [r4, #0]
		memcpy(ucHataKoduText, ucHataKoduTextEN, 17);
 80069e2:	4ab5      	ldr	r2, [pc, #724]	@ (8006cb8 <loadMenuTexts+0xdb0>)
 80069e4:	4bb5      	ldr	r3, [pc, #724]	@ (8006cbc <loadMenuTexts+0xdb4>)
 80069e6:	4614      	mov	r4, r2
 80069e8:	461d      	mov	r5, r3
 80069ea:	6828      	ldr	r0, [r5, #0]
 80069ec:	6869      	ldr	r1, [r5, #4]
 80069ee:	68aa      	ldr	r2, [r5, #8]
 80069f0:	68eb      	ldr	r3, [r5, #12]
 80069f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80069f4:	7c2b      	ldrb	r3, [r5, #16]
 80069f6:	7023      	strb	r3, [r4, #0]
		memcpy(dortHataKoduText, dortHataKoduTextEN, 17);
 80069f8:	4ab1      	ldr	r2, [pc, #708]	@ (8006cc0 <loadMenuTexts+0xdb8>)
 80069fa:	4bb2      	ldr	r3, [pc, #712]	@ (8006cc4 <loadMenuTexts+0xdbc>)
 80069fc:	4614      	mov	r4, r2
 80069fe:	461d      	mov	r5, r3
 8006a00:	6828      	ldr	r0, [r5, #0]
 8006a02:	6869      	ldr	r1, [r5, #4]
 8006a04:	68aa      	ldr	r2, [r5, #8]
 8006a06:	68eb      	ldr	r3, [r5, #12]
 8006a08:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a0a:	7c2b      	ldrb	r3, [r5, #16]
 8006a0c:	7023      	strb	r3, [r4, #0]
		memcpy(besHataKoduText, besHataKoduTextEN, 17);
 8006a0e:	4aae      	ldr	r2, [pc, #696]	@ (8006cc8 <loadMenuTexts+0xdc0>)
 8006a10:	4bae      	ldr	r3, [pc, #696]	@ (8006ccc <loadMenuTexts+0xdc4>)
 8006a12:	4614      	mov	r4, r2
 8006a14:	461d      	mov	r5, r3
 8006a16:	6828      	ldr	r0, [r5, #0]
 8006a18:	6869      	ldr	r1, [r5, #4]
 8006a1a:	68aa      	ldr	r2, [r5, #8]
 8006a1c:	68eb      	ldr	r3, [r5, #12]
 8006a1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a20:	7c2b      	ldrb	r3, [r5, #16]
 8006a22:	7023      	strb	r3, [r4, #0]
		memcpy(altiHataKoduText, altiHataKoduTextEN, 17);
 8006a24:	4aaa      	ldr	r2, [pc, #680]	@ (8006cd0 <loadMenuTexts+0xdc8>)
 8006a26:	4bab      	ldr	r3, [pc, #684]	@ (8006cd4 <loadMenuTexts+0xdcc>)
 8006a28:	4614      	mov	r4, r2
 8006a2a:	461d      	mov	r5, r3
 8006a2c:	6828      	ldr	r0, [r5, #0]
 8006a2e:	6869      	ldr	r1, [r5, #4]
 8006a30:	68aa      	ldr	r2, [r5, #8]
 8006a32:	68eb      	ldr	r3, [r5, #12]
 8006a34:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a36:	7c2b      	ldrb	r3, [r5, #16]
 8006a38:	7023      	strb	r3, [r4, #0]
		memcpy(yediHataKoduText, yediHataKoduTextEN, 17);
 8006a3a:	4aa7      	ldr	r2, [pc, #668]	@ (8006cd8 <loadMenuTexts+0xdd0>)
 8006a3c:	4ba7      	ldr	r3, [pc, #668]	@ (8006cdc <loadMenuTexts+0xdd4>)
 8006a3e:	4614      	mov	r4, r2
 8006a40:	461d      	mov	r5, r3
 8006a42:	6828      	ldr	r0, [r5, #0]
 8006a44:	6869      	ldr	r1, [r5, #4]
 8006a46:	68aa      	ldr	r2, [r5, #8]
 8006a48:	68eb      	ldr	r3, [r5, #12]
 8006a4a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a4c:	7c2b      	ldrb	r3, [r5, #16]
 8006a4e:	7023      	strb	r3, [r4, #0]
		memcpy(sekizHataKoduText, sekizHataKoduTextEN, 17);
 8006a50:	4aa3      	ldr	r2, [pc, #652]	@ (8006ce0 <loadMenuTexts+0xdd8>)
 8006a52:	4ba4      	ldr	r3, [pc, #656]	@ (8006ce4 <loadMenuTexts+0xddc>)
 8006a54:	4614      	mov	r4, r2
 8006a56:	461d      	mov	r5, r3
 8006a58:	6828      	ldr	r0, [r5, #0]
 8006a5a:	6869      	ldr	r1, [r5, #4]
 8006a5c:	68aa      	ldr	r2, [r5, #8]
 8006a5e:	68eb      	ldr	r3, [r5, #12]
 8006a60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a62:	7c2b      	ldrb	r3, [r5, #16]
 8006a64:	7023      	strb	r3, [r4, #0]
		memcpy(dokuzHataKoduText, dokuzHataKoduTextEN, 17);
 8006a66:	4aa0      	ldr	r2, [pc, #640]	@ (8006ce8 <loadMenuTexts+0xde0>)
 8006a68:	4ba0      	ldr	r3, [pc, #640]	@ (8006cec <loadMenuTexts+0xde4>)
 8006a6a:	4614      	mov	r4, r2
 8006a6c:	461d      	mov	r5, r3
 8006a6e:	6828      	ldr	r0, [r5, #0]
 8006a70:	6869      	ldr	r1, [r5, #4]
 8006a72:	68aa      	ldr	r2, [r5, #8]
 8006a74:	68eb      	ldr	r3, [r5, #12]
 8006a76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a78:	7c2b      	ldrb	r3, [r5, #16]
 8006a7a:	7023      	strb	r3, [r4, #0]
		memcpy(onHataKoduText, onHataKoduTextEN, 17);
 8006a7c:	4a9c      	ldr	r2, [pc, #624]	@ (8006cf0 <loadMenuTexts+0xde8>)
 8006a7e:	4b9d      	ldr	r3, [pc, #628]	@ (8006cf4 <loadMenuTexts+0xdec>)
 8006a80:	4614      	mov	r4, r2
 8006a82:	461d      	mov	r5, r3
 8006a84:	6828      	ldr	r0, [r5, #0]
 8006a86:	6869      	ldr	r1, [r5, #4]
 8006a88:	68aa      	ldr	r2, [r5, #8]
 8006a8a:	68eb      	ldr	r3, [r5, #12]
 8006a8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006a8e:	7c2b      	ldrb	r3, [r5, #16]
 8006a90:	7023      	strb	r3, [r4, #0]
		memcpy(silmekIcinText, silmekIcinTextEN, 17);
 8006a92:	4a99      	ldr	r2, [pc, #612]	@ (8006cf8 <loadMenuTexts+0xdf0>)
 8006a94:	4b99      	ldr	r3, [pc, #612]	@ (8006cfc <loadMenuTexts+0xdf4>)
 8006a96:	4614      	mov	r4, r2
 8006a98:	461d      	mov	r5, r3
 8006a9a:	6828      	ldr	r0, [r5, #0]
 8006a9c:	6869      	ldr	r1, [r5, #4]
 8006a9e:	68aa      	ldr	r2, [r5, #8]
 8006aa0:	68eb      	ldr	r3, [r5, #12]
 8006aa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006aa4:	7c2b      	ldrb	r3, [r5, #16]
 8006aa6:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSekliText, calismaSekliTextEN, 17);
 8006aa8:	4a95      	ldr	r2, [pc, #596]	@ (8006d00 <loadMenuTexts+0xdf8>)
 8006aaa:	4b96      	ldr	r3, [pc, #600]	@ (8006d04 <loadMenuTexts+0xdfc>)
 8006aac:	4614      	mov	r4, r2
 8006aae:	461d      	mov	r5, r3
 8006ab0:	6828      	ldr	r0, [r5, #0]
 8006ab2:	6869      	ldr	r1, [r5, #4]
 8006ab4:	68aa      	ldr	r2, [r5, #8]
 8006ab6:	68eb      	ldr	r3, [r5, #12]
 8006ab8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006aba:	7c2b      	ldrb	r3, [r5, #16]
 8006abc:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusText, devirmeYuruyusTextEN, 17);
 8006abe:	4a92      	ldr	r2, [pc, #584]	@ (8006d08 <loadMenuTexts+0xe00>)
 8006ac0:	4b92      	ldr	r3, [pc, #584]	@ (8006d0c <loadMenuTexts+0xe04>)
 8006ac2:	4614      	mov	r4, r2
 8006ac4:	461d      	mov	r5, r3
 8006ac6:	6828      	ldr	r0, [r5, #0]
 8006ac8:	6869      	ldr	r1, [r5, #4]
 8006aca:	68aa      	ldr	r2, [r5, #8]
 8006acc:	68eb      	ldr	r3, [r5, #12]
 8006ace:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ad0:	7c2b      	ldrb	r3, [r5, #16]
 8006ad2:	7023      	strb	r3, [r4, #0]
		memcpy(bastikcaCalisanText, bastikcaCalisanTextEN, 17);
 8006ad4:	4a8e      	ldr	r2, [pc, #568]	@ (8006d10 <loadMenuTexts+0xe08>)
 8006ad6:	4b8f      	ldr	r3, [pc, #572]	@ (8006d14 <loadMenuTexts+0xe0c>)
 8006ad8:	4614      	mov	r4, r2
 8006ada:	461d      	mov	r5, r3
 8006adc:	6828      	ldr	r0, [r5, #0]
 8006ade:	6869      	ldr	r1, [r5, #4]
 8006ae0:	68aa      	ldr	r2, [r5, #8]
 8006ae2:	68eb      	ldr	r3, [r5, #12]
 8006ae4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ae6:	7c2b      	ldrb	r3, [r5, #16]
 8006ae8:	7023      	strb	r3, [r4, #0]
		memcpy(basGonderText, basGonderTextEN, 17);
 8006aea:	4a8b      	ldr	r2, [pc, #556]	@ (8006d18 <loadMenuTexts+0xe10>)
 8006aec:	4b8b      	ldr	r3, [pc, #556]	@ (8006d1c <loadMenuTexts+0xe14>)
 8006aee:	4614      	mov	r4, r2
 8006af0:	461d      	mov	r5, r3
 8006af2:	6828      	ldr	r0, [r5, #0]
 8006af4:	6869      	ldr	r1, [r5, #4]
 8006af6:	68aa      	ldr	r2, [r5, #8]
 8006af8:	68eb      	ldr	r3, [r5, #12]
 8006afa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006afc:	7c2b      	ldrb	r3, [r5, #16]
 8006afe:	7023      	strb	r3, [r4, #0]
		memcpy(emniyetCercevesiText, emniyetCercevesiTextEN, 17);
 8006b00:	4a87      	ldr	r2, [pc, #540]	@ (8006d20 <loadMenuTexts+0xe18>)
 8006b02:	4b88      	ldr	r3, [pc, #544]	@ (8006d24 <loadMenuTexts+0xe1c>)
 8006b04:	4614      	mov	r4, r2
 8006b06:	461d      	mov	r5, r3
 8006b08:	6828      	ldr	r0, [r5, #0]
 8006b0a:	6869      	ldr	r1, [r5, #4]
 8006b0c:	68aa      	ldr	r2, [r5, #8]
 8006b0e:	68eb      	ldr	r3, [r5, #12]
 8006b10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b12:	7c2b      	ldrb	r3, [r5, #16]
 8006b14:	7023      	strb	r3, [r4, #0]
		memcpy(pasifText, pasifTextEN, 17);
 8006b16:	4a84      	ldr	r2, [pc, #528]	@ (8006d28 <loadMenuTexts+0xe20>)
 8006b18:	4b84      	ldr	r3, [pc, #528]	@ (8006d2c <loadMenuTexts+0xe24>)
 8006b1a:	4614      	mov	r4, r2
 8006b1c:	461d      	mov	r5, r3
 8006b1e:	6828      	ldr	r0, [r5, #0]
 8006b20:	6869      	ldr	r1, [r5, #4]
 8006b22:	68aa      	ldr	r2, [r5, #8]
 8006b24:	68eb      	ldr	r3, [r5, #12]
 8006b26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b28:	7c2b      	ldrb	r3, [r5, #16]
 8006b2a:	7023      	strb	r3, [r4, #0]
		memcpy(aktifText, aktifTextEN, 17);
 8006b2c:	4a80      	ldr	r2, [pc, #512]	@ (8006d30 <loadMenuTexts+0xe28>)
 8006b2e:	4b81      	ldr	r3, [pc, #516]	@ (8006d34 <loadMenuTexts+0xe2c>)
 8006b30:	4614      	mov	r4, r2
 8006b32:	461d      	mov	r5, r3
 8006b34:	6828      	ldr	r0, [r5, #0]
 8006b36:	6869      	ldr	r1, [r5, #4]
 8006b38:	68aa      	ldr	r2, [r5, #8]
 8006b3a:	68eb      	ldr	r3, [r5, #12]
 8006b3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b3e:	7c2b      	ldrb	r3, [r5, #16]
 8006b40:	7023      	strb	r3, [r4, #0]
		memcpy(yavaslamaLimitText, yavaslamaLimitTextEN, 17);
 8006b42:	4a7d      	ldr	r2, [pc, #500]	@ (8006d38 <loadMenuTexts+0xe30>)
 8006b44:	4b7d      	ldr	r3, [pc, #500]	@ (8006d3c <loadMenuTexts+0xe34>)
 8006b46:	4614      	mov	r4, r2
 8006b48:	461d      	mov	r5, r3
 8006b4a:	6828      	ldr	r0, [r5, #0]
 8006b4c:	6869      	ldr	r1, [r5, #4]
 8006b4e:	68aa      	ldr	r2, [r5, #8]
 8006b50:	68eb      	ldr	r3, [r5, #12]
 8006b52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b54:	7c2b      	ldrb	r3, [r5, #16]
 8006b56:	7023      	strb	r3, [r4, #0]
		memcpy(altLimitText, altLimitTextEN, 17);
 8006b58:	4a79      	ldr	r2, [pc, #484]	@ (8006d40 <loadMenuTexts+0xe38>)
 8006b5a:	4b7a      	ldr	r3, [pc, #488]	@ (8006d44 <loadMenuTexts+0xe3c>)
 8006b5c:	4614      	mov	r4, r2
 8006b5e:	461d      	mov	r5, r3
 8006b60:	6828      	ldr	r0, [r5, #0]
 8006b62:	6869      	ldr	r1, [r5, #4]
 8006b64:	68aa      	ldr	r2, [r5, #8]
 8006b66:	68eb      	ldr	r3, [r5, #12]
 8006b68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b6a:	7c2b      	ldrb	r3, [r5, #16]
 8006b6c:	7023      	strb	r3, [r4, #0]
		memcpy(basincSalteriText, basincSalteriTextEN, 17);
 8006b6e:	4a76      	ldr	r2, [pc, #472]	@ (8006d48 <loadMenuTexts+0xe40>)
 8006b70:	4b76      	ldr	r3, [pc, #472]	@ (8006d4c <loadMenuTexts+0xe44>)
 8006b72:	4614      	mov	r4, r2
 8006b74:	461d      	mov	r5, r3
 8006b76:	6828      	ldr	r0, [r5, #0]
 8006b78:	6869      	ldr	r1, [r5, #4]
 8006b7a:	68aa      	ldr	r2, [r5, #8]
 8006b7c:	68eb      	ldr	r3, [r5, #12]
 8006b7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b80:	7c2b      	ldrb	r3, [r5, #16]
 8006b82:	7023      	strb	r3, [r4, #0]
		memcpy(kapiSecimleriText, kapiSecimleriTextEN, 17);
 8006b84:	4a72      	ldr	r2, [pc, #456]	@ (8006d50 <loadMenuTexts+0xe48>)
 8006b86:	4b73      	ldr	r3, [pc, #460]	@ (8006d54 <loadMenuTexts+0xe4c>)
 8006b88:	4614      	mov	r4, r2
 8006b8a:	461d      	mov	r5, r3
 8006b8c:	6828      	ldr	r0, [r5, #0]
 8006b8e:	6869      	ldr	r1, [r5, #4]
 8006b90:	68aa      	ldr	r2, [r5, #8]
 8006b92:	68eb      	ldr	r3, [r5, #12]
 8006b94:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006b96:	7c2b      	ldrb	r3, [r5, #16]
 8006b98:	7023      	strb	r3, [r4, #0]
		memcpy(katKapisiAktifText, katKapisiAktifTextEN, 17);
 8006b9a:	4a6f      	ldr	r2, [pc, #444]	@ (8006d58 <loadMenuTexts+0xe50>)
 8006b9c:	4b6f      	ldr	r3, [pc, #444]	@ (8006d5c <loadMenuTexts+0xe54>)
 8006b9e:	4614      	mov	r4, r2
 8006ba0:	461d      	mov	r5, r3
 8006ba2:	6828      	ldr	r0, [r5, #0]
 8006ba4:	6869      	ldr	r1, [r5, #4]
 8006ba6:	68aa      	ldr	r2, [r5, #8]
 8006ba8:	68eb      	ldr	r3, [r5, #12]
 8006baa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bac:	7c2b      	ldrb	r3, [r5, #16]
 8006bae:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAktifText, tablaKapiAktifTextEN, 17);
 8006bb0:	4a6b      	ldr	r2, [pc, #428]	@ (8006d60 <loadMenuTexts+0xe58>)
 8006bb2:	4b6c      	ldr	r3, [pc, #432]	@ (8006d64 <loadMenuTexts+0xe5c>)
 8006bb4:	4614      	mov	r4, r2
 8006bb6:	461d      	mov	r5, r3
 8006bb8:	6828      	ldr	r0, [r5, #0]
 8006bba:	6869      	ldr	r1, [r5, #4]
 8006bbc:	68aa      	ldr	r2, [r5, #8]
 8006bbe:	68eb      	ldr	r3, [r5, #12]
 8006bc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bc2:	7c2b      	ldrb	r3, [r5, #16]
 8006bc4:	7023      	strb	r3, [r4, #0]
		memcpy(katArtiTablaAktifText, katArtiTablaAktifTextEN, 17);
 8006bc6:	4a68      	ldr	r2, [pc, #416]	@ (8006d68 <loadMenuTexts+0xe60>)
 8006bc8:	4b68      	ldr	r3, [pc, #416]	@ (8006d6c <loadMenuTexts+0xe64>)
 8006bca:	4614      	mov	r4, r2
 8006bcc:	461d      	mov	r5, r3
 8006bce:	6828      	ldr	r0, [r5, #0]
 8006bd0:	6869      	ldr	r1, [r5, #4]
 8006bd2:	68aa      	ldr	r2, [r5, #8]
 8006bd4:	68eb      	ldr	r3, [r5, #12]
 8006bd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bd8:	7c2b      	ldrb	r3, [r5, #16]
 8006bda:	7023      	strb	r3, [r4, #0]
		memcpy(kapiAcmaTipiText, kapiAcmaTipiTextEN, 17);
 8006bdc:	4a64      	ldr	r2, [pc, #400]	@ (8006d70 <loadMenuTexts+0xe68>)
 8006bde:	4b65      	ldr	r3, [pc, #404]	@ (8006d74 <loadMenuTexts+0xe6c>)
 8006be0:	4614      	mov	r4, r2
 8006be2:	461d      	mov	r5, r3
 8006be4:	6828      	ldr	r0, [r5, #0]
 8006be6:	6869      	ldr	r1, [r5, #4]
 8006be8:	68aa      	ldr	r2, [r5, #8]
 8006bea:	68eb      	ldr	r3, [r5, #12]
 8006bec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006bee:	7c2b      	ldrb	r3, [r5, #16]
 8006bf0:	7023      	strb	r3, [r4, #0]
		memcpy(kapiButonuESPText, kapiButonuESPTextEN, 17);
 8006bf2:	4a61      	ldr	r2, [pc, #388]	@ (8006d78 <loadMenuTexts+0xe70>)
 8006bf4:	4b61      	ldr	r3, [pc, #388]	@ (8006d7c <loadMenuTexts+0xe74>)
 8006bf6:	4614      	mov	r4, r2
 8006bf8:	461d      	mov	r5, r3
 8006bfa:	6828      	ldr	r0, [r5, #0]
 8006bfc:	6869      	ldr	r1, [r5, #4]
 8006bfe:	68aa      	ldr	r2, [r5, #8]
 8006c00:	68eb      	ldr	r3, [r5, #12]
 8006c02:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c04:	7c2b      	ldrb	r3, [r5, #16]
 8006c06:	7023      	strb	r3, [r4, #0]
		memcpy(katButonuEXTText, katButonuEXTTextEN, 17);
 8006c08:	4a5d      	ldr	r2, [pc, #372]	@ (8006d80 <loadMenuTexts+0xe78>)
 8006c0a:	4b5e      	ldr	r3, [pc, #376]	@ (8006d84 <loadMenuTexts+0xe7c>)
 8006c0c:	4614      	mov	r4, r2
 8006c0e:	461d      	mov	r5, r3
 8006c10:	6828      	ldr	r0, [r5, #0]
 8006c12:	6869      	ldr	r1, [r5, #4]
 8006c14:	68aa      	ldr	r2, [r5, #8]
 8006c16:	68eb      	ldr	r3, [r5, #12]
 8006c18:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c1a:	7c2b      	ldrb	r3, [r5, #16]
 8006c1c:	7023      	strb	r3, [r4, #0]
		memcpy(birKatKapiTipiText, birKatKapiTipiTextEN, 17);
 8006c1e:	4a5a      	ldr	r2, [pc, #360]	@ (8006d88 <loadMenuTexts+0xe80>)
 8006c20:	4b5a      	ldr	r3, [pc, #360]	@ (8006d8c <loadMenuTexts+0xe84>)
 8006c22:	4614      	mov	r4, r2
 8006c24:	461d      	mov	r5, r3
 8006c26:	6828      	ldr	r0, [r5, #0]
 8006c28:	6869      	ldr	r1, [r5, #4]
 8006c2a:	68aa      	ldr	r2, [r5, #8]
 8006c2c:	68eb      	ldr	r3, [r5, #12]
 8006c2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c30:	7c2b      	ldrb	r3, [r5, #16]
 8006c32:	7023      	strb	r3, [r4, #0]
		memcpy(butonKontrolluText, butonKontrolluTextEN, 17);
 8006c34:	4a56      	ldr	r2, [pc, #344]	@ (8006d90 <loadMenuTexts+0xe88>)
 8006c36:	4b57      	ldr	r3, [pc, #348]	@ (8006d94 <loadMenuTexts+0xe8c>)
 8006c38:	4614      	mov	r4, r2
 8006c3a:	461d      	mov	r5, r3
 8006c3c:	6828      	ldr	r0, [r5, #0]
 8006c3e:	6869      	ldr	r1, [r5, #4]
 8006c40:	68aa      	ldr	r2, [r5, #8]
 8006c42:	68eb      	ldr	r3, [r5, #12]
 8006c44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c46:	7c2b      	ldrb	r3, [r5, #16]
 8006c48:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKapiAcSuresiText, birinciKapiAcSuresiTextEN, 17);
 8006c4a:	4a53      	ldr	r2, [pc, #332]	@ (8006d98 <loadMenuTexts+0xe90>)
 8006c4c:	4b53      	ldr	r3, [pc, #332]	@ (8006d9c <loadMenuTexts+0xe94>)
 8006c4e:	4614      	mov	r4, r2
 8006c50:	461d      	mov	r5, r3
 8006c52:	6828      	ldr	r0, [r5, #0]
 8006c54:	6869      	ldr	r1, [r5, #4]
 8006c56:	68aa      	ldr	r2, [r5, #8]
 8006c58:	68eb      	ldr	r3, [r5, #12]
 8006c5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c5c:	7c2b      	ldrb	r3, [r5, #16]
 8006c5e:	7023      	strb	r3, [r4, #0]
		memcpy(kacSaniyeText, kacSaniyeTextEN, 17);
 8006c60:	4a4f      	ldr	r2, [pc, #316]	@ (8006da0 <loadMenuTexts+0xe98>)
 8006c62:	4b50      	ldr	r3, [pc, #320]	@ (8006da4 <loadMenuTexts+0xe9c>)
 8006c64:	4614      	mov	r4, r2
 8006c66:	461d      	mov	r5, r3
 8006c68:	6828      	ldr	r0, [r5, #0]
 8006c6a:	6869      	ldr	r1, [r5, #4]
 8006c6c:	68aa      	ldr	r2, [r5, #8]
 8006c6e:	68eb      	ldr	r3, [r5, #12]
 8006c70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c72:	7c2b      	ldrb	r3, [r5, #16]
 8006c74:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKatKapiTipiText, ikinciKatKapiTipiTextEN, 17);
 8006c76:	4a4c      	ldr	r2, [pc, #304]	@ (8006da8 <loadMenuTexts+0xea0>)
 8006c78:	4b4c      	ldr	r3, [pc, #304]	@ (8006dac <loadMenuTexts+0xea4>)
 8006c7a:	4614      	mov	r4, r2
 8006c7c:	461d      	mov	r5, r3
 8006c7e:	6828      	ldr	r0, [r5, #0]
 8006c80:	6869      	ldr	r1, [r5, #4]
 8006c82:	68aa      	ldr	r2, [r5, #8]
 8006c84:	68eb      	ldr	r3, [r5, #12]
 8006c86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006c88:	7c2b      	ldrb	r3, [r5, #16]
 8006c8a:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKapiAcSuresiText, ikinciKapiAcSuresiTextEN, 17);
 8006c8c:	4a48      	ldr	r2, [pc, #288]	@ (8006db0 <loadMenuTexts+0xea8>)
 8006c8e:	e091      	b.n	8006db4 <loadMenuTexts+0xeac>
 8006c90:	20001200 	.word	0x20001200
 8006c94:	20000708 	.word	0x20000708
 8006c98:	20001214 	.word	0x20001214
 8006c9c:	2000071c 	.word	0x2000071c
 8006ca0:	20001228 	.word	0x20001228
 8006ca4:	20000730 	.word	0x20000730
 8006ca8:	2000123c 	.word	0x2000123c
 8006cac:	20000744 	.word	0x20000744
 8006cb0:	20001250 	.word	0x20001250
 8006cb4:	20000758 	.word	0x20000758
 8006cb8:	20001264 	.word	0x20001264
 8006cbc:	2000076c 	.word	0x2000076c
 8006cc0:	20001278 	.word	0x20001278
 8006cc4:	20000780 	.word	0x20000780
 8006cc8:	2000128c 	.word	0x2000128c
 8006ccc:	20000794 	.word	0x20000794
 8006cd0:	200012a0 	.word	0x200012a0
 8006cd4:	200007a8 	.word	0x200007a8
 8006cd8:	200012b4 	.word	0x200012b4
 8006cdc:	200007bc 	.word	0x200007bc
 8006ce0:	200012c8 	.word	0x200012c8
 8006ce4:	200007d0 	.word	0x200007d0
 8006ce8:	200012dc 	.word	0x200012dc
 8006cec:	200007e4 	.word	0x200007e4
 8006cf0:	200012f0 	.word	0x200012f0
 8006cf4:	200007f8 	.word	0x200007f8
 8006cf8:	20001304 	.word	0x20001304
 8006cfc:	2000080c 	.word	0x2000080c
 8006d00:	20001318 	.word	0x20001318
 8006d04:	20000820 	.word	0x20000820
 8006d08:	2000132c 	.word	0x2000132c
 8006d0c:	20000834 	.word	0x20000834
 8006d10:	20001340 	.word	0x20001340
 8006d14:	20000848 	.word	0x20000848
 8006d18:	20001354 	.word	0x20001354
 8006d1c:	2000085c 	.word	0x2000085c
 8006d20:	20001368 	.word	0x20001368
 8006d24:	20000870 	.word	0x20000870
 8006d28:	2000137c 	.word	0x2000137c
 8006d2c:	20000884 	.word	0x20000884
 8006d30:	20001390 	.word	0x20001390
 8006d34:	20000898 	.word	0x20000898
 8006d38:	200013a4 	.word	0x200013a4
 8006d3c:	200008ac 	.word	0x200008ac
 8006d40:	200013b8 	.word	0x200013b8
 8006d44:	200008c0 	.word	0x200008c0
 8006d48:	200013cc 	.word	0x200013cc
 8006d4c:	200008d4 	.word	0x200008d4
 8006d50:	200013e0 	.word	0x200013e0
 8006d54:	200008e8 	.word	0x200008e8
 8006d58:	200013f4 	.word	0x200013f4
 8006d5c:	200008fc 	.word	0x200008fc
 8006d60:	20001408 	.word	0x20001408
 8006d64:	20000910 	.word	0x20000910
 8006d68:	2000141c 	.word	0x2000141c
 8006d6c:	20000924 	.word	0x20000924
 8006d70:	20001430 	.word	0x20001430
 8006d74:	20000938 	.word	0x20000938
 8006d78:	20001444 	.word	0x20001444
 8006d7c:	2000094c 	.word	0x2000094c
 8006d80:	20001458 	.word	0x20001458
 8006d84:	20000960 	.word	0x20000960
 8006d88:	2000146c 	.word	0x2000146c
 8006d8c:	20000974 	.word	0x20000974
 8006d90:	20001480 	.word	0x20001480
 8006d94:	20000988 	.word	0x20000988
 8006d98:	20001494 	.word	0x20001494
 8006d9c:	2000099c 	.word	0x2000099c
 8006da0:	200014a8 	.word	0x200014a8
 8006da4:	200009b0 	.word	0x200009b0
 8006da8:	200014bc 	.word	0x200014bc
 8006dac:	200009c4 	.word	0x200009c4
 8006db0:	200014d0 	.word	0x200014d0
 8006db4:	4bc7      	ldr	r3, [pc, #796]	@ (80070d4 <loadMenuTexts+0x11cc>)
 8006db6:	4614      	mov	r4, r2
 8006db8:	461d      	mov	r5, r3
 8006dba:	6828      	ldr	r0, [r5, #0]
 8006dbc:	6869      	ldr	r1, [r5, #4]
 8006dbe:	68aa      	ldr	r2, [r5, #8]
 8006dc0:	68eb      	ldr	r3, [r5, #12]
 8006dc2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dc4:	7c2b      	ldrb	r3, [r5, #16]
 8006dc6:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiTipiText, tablaKapiTipiTextEN, 17);
 8006dc8:	4ac3      	ldr	r2, [pc, #780]	@ (80070d8 <loadMenuTexts+0x11d0>)
 8006dca:	4bc4      	ldr	r3, [pc, #784]	@ (80070dc <loadMenuTexts+0x11d4>)
 8006dcc:	4614      	mov	r4, r2
 8006dce:	461d      	mov	r5, r3
 8006dd0:	6828      	ldr	r0, [r5, #0]
 8006dd2:	6869      	ldr	r1, [r5, #4]
 8006dd4:	68aa      	ldr	r2, [r5, #8]
 8006dd6:	68eb      	ldr	r3, [r5, #12]
 8006dd8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006dda:	7c2b      	ldrb	r3, [r5, #16]
 8006ddc:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcKonumText, tablaKapiAcKonumTextEN, 17);
 8006dde:	4ac0      	ldr	r2, [pc, #768]	@ (80070e0 <loadMenuTexts+0x11d8>)
 8006de0:	4bc0      	ldr	r3, [pc, #768]	@ (80070e4 <loadMenuTexts+0x11dc>)
 8006de2:	4614      	mov	r4, r2
 8006de4:	461d      	mov	r5, r3
 8006de6:	6828      	ldr	r0, [r5, #0]
 8006de8:	6869      	ldr	r1, [r5, #4]
 8006dea:	68aa      	ldr	r2, [r5, #8]
 8006dec:	68eb      	ldr	r3, [r5, #12]
 8006dee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006df0:	7c2b      	ldrb	r3, [r5, #16]
 8006df2:	7023      	strb	r3, [r4, #0]
		memcpy(birinciKattaAcText, birinciKattaAcTextEN, 17);
 8006df4:	4abc      	ldr	r2, [pc, #752]	@ (80070e8 <loadMenuTexts+0x11e0>)
 8006df6:	4bbd      	ldr	r3, [pc, #756]	@ (80070ec <loadMenuTexts+0x11e4>)
 8006df8:	4614      	mov	r4, r2
 8006dfa:	461d      	mov	r5, r3
 8006dfc:	6828      	ldr	r0, [r5, #0]
 8006dfe:	6869      	ldr	r1, [r5, #4]
 8006e00:	68aa      	ldr	r2, [r5, #8]
 8006e02:	68eb      	ldr	r3, [r5, #12]
 8006e04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e06:	7c2b      	ldrb	r3, [r5, #16]
 8006e08:	7023      	strb	r3, [r4, #0]
		memcpy(ikinciKattaAcText, ikinciKattaAcTextEN, 17);
 8006e0a:	4ab9      	ldr	r2, [pc, #740]	@ (80070f0 <loadMenuTexts+0x11e8>)
 8006e0c:	4bb9      	ldr	r3, [pc, #740]	@ (80070f4 <loadMenuTexts+0x11ec>)
 8006e0e:	4614      	mov	r4, r2
 8006e10:	461d      	mov	r5, r3
 8006e12:	6828      	ldr	r0, [r5, #0]
 8006e14:	6869      	ldr	r1, [r5, #4]
 8006e16:	68aa      	ldr	r2, [r5, #8]
 8006e18:	68eb      	ldr	r3, [r5, #12]
 8006e1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e1c:	7c2b      	ldrb	r3, [r5, #16]
 8006e1e:	7023      	strb	r3, [r4, #0]
		memcpy(birVeIkinciKattaAcText, birVeIkinciKattaAcTextEN, 17);
 8006e20:	4ab5      	ldr	r2, [pc, #724]	@ (80070f8 <loadMenuTexts+0x11f0>)
 8006e22:	4bb6      	ldr	r3, [pc, #728]	@ (80070fc <loadMenuTexts+0x11f4>)
 8006e24:	4614      	mov	r4, r2
 8006e26:	461d      	mov	r5, r3
 8006e28:	6828      	ldr	r0, [r5, #0]
 8006e2a:	6869      	ldr	r1, [r5, #4]
 8006e2c:	68aa      	ldr	r2, [r5, #8]
 8006e2e:	68eb      	ldr	r3, [r5, #12]
 8006e30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e32:	7c2b      	ldrb	r3, [r5, #16]
 8006e34:	7023      	strb	r3, [r4, #0]
		memcpy(tablaKapiAcSureText, tablaKapiAcSureTextEN, 17);
 8006e36:	4ab2      	ldr	r2, [pc, #712]	@ (8007100 <loadMenuTexts+0x11f8>)
 8006e38:	4bb2      	ldr	r3, [pc, #712]	@ (8007104 <loadMenuTexts+0x11fc>)
 8006e3a:	4614      	mov	r4, r2
 8006e3c:	461d      	mov	r5, r3
 8006e3e:	6828      	ldr	r0, [r5, #0]
 8006e40:	6869      	ldr	r1, [r5, #4]
 8006e42:	68aa      	ldr	r2, [r5, #8]
 8006e44:	68eb      	ldr	r3, [r5, #12]
 8006e46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e48:	7c2b      	ldrb	r3, [r5, #16]
 8006e4a:	7023      	strb	r3, [r4, #0]
		memcpy(yukariYavaslamaLimitiText, yukariYavaslamaLimitiTextEN, 17);
 8006e4c:	4aae      	ldr	r2, [pc, #696]	@ (8007108 <loadMenuTexts+0x1200>)
 8006e4e:	4baf      	ldr	r3, [pc, #700]	@ (800710c <loadMenuTexts+0x1204>)
 8006e50:	4614      	mov	r4, r2
 8006e52:	461d      	mov	r5, r3
 8006e54:	6828      	ldr	r0, [r5, #0]
 8006e56:	6869      	ldr	r1, [r5, #4]
 8006e58:	68aa      	ldr	r2, [r5, #8]
 8006e5a:	68eb      	ldr	r3, [r5, #12]
 8006e5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e5e:	7c2b      	ldrb	r3, [r5, #16]
 8006e60:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYuruyusMenuText, devirmeYuruyusMenuTextEN, 17);
 8006e62:	4aab      	ldr	r2, [pc, #684]	@ (8007110 <loadMenuTexts+0x1208>)
 8006e64:	4bab      	ldr	r3, [pc, #684]	@ (8007114 <loadMenuTexts+0x120c>)
 8006e66:	4614      	mov	r4, r2
 8006e68:	461d      	mov	r5, r3
 8006e6a:	6828      	ldr	r0, [r5, #0]
 8006e6c:	6869      	ldr	r1, [r5, #4]
 8006e6e:	68aa      	ldr	r2, [r5, #8]
 8006e70:	68eb      	ldr	r3, [r5, #12]
 8006e72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e74:	7c2b      	ldrb	r3, [r5, #16]
 8006e76:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAktifText, devirmeAktifTextEN, 17);
 8006e78:	4aa7      	ldr	r2, [pc, #668]	@ (8007118 <loadMenuTexts+0x1210>)
 8006e7a:	4ba8      	ldr	r3, [pc, #672]	@ (800711c <loadMenuTexts+0x1214>)
 8006e7c:	4614      	mov	r4, r2
 8006e7e:	461d      	mov	r5, r3
 8006e80:	6828      	ldr	r0, [r5, #0]
 8006e82:	6869      	ldr	r1, [r5, #4]
 8006e84:	68aa      	ldr	r2, [r5, #8]
 8006e86:	68eb      	ldr	r3, [r5, #12]
 8006e88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006e8a:	7c2b      	ldrb	r3, [r5, #16]
 8006e8c:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusAktifText, yuruyusAktifTextEN, 17);
 8006e8e:	4aa4      	ldr	r2, [pc, #656]	@ (8007120 <loadMenuTexts+0x1218>)
 8006e90:	4ba4      	ldr	r3, [pc, #656]	@ (8007124 <loadMenuTexts+0x121c>)
 8006e92:	4614      	mov	r4, r2
 8006e94:	461d      	mov	r5, r3
 8006e96:	6828      	ldr	r0, [r5, #0]
 8006e98:	6869      	ldr	r1, [r5, #4]
 8006e9a:	68aa      	ldr	r2, [r5, #8]
 8006e9c:	68eb      	ldr	r3, [r5, #12]
 8006e9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ea0:	7c2b      	ldrb	r3, [r5, #16]
 8006ea2:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariText, devirmeYukariTextEN, 17);
 8006ea4:	4aa0      	ldr	r2, [pc, #640]	@ (8007128 <loadMenuTexts+0x1220>)
 8006ea6:	4ba1      	ldr	r3, [pc, #644]	@ (800712c <loadMenuTexts+0x1224>)
 8006ea8:	4614      	mov	r4, r2
 8006eaa:	461d      	mov	r5, r3
 8006eac:	6828      	ldr	r0, [r5, #0]
 8006eae:	6869      	ldr	r1, [r5, #4]
 8006eb0:	68aa      	ldr	r2, [r5, #8]
 8006eb2:	68eb      	ldr	r3, [r5, #12]
 8006eb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006eb6:	7c2b      	ldrb	r3, [r5, #16]
 8006eb8:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusIleriText, yuruyusIleriTextEN, 17);
 8006eba:	4a9d      	ldr	r2, [pc, #628]	@ (8007130 <loadMenuTexts+0x1228>)
 8006ebc:	4b9d      	ldr	r3, [pc, #628]	@ (8007134 <loadMenuTexts+0x122c>)
 8006ebe:	4614      	mov	r4, r2
 8006ec0:	461d      	mov	r5, r3
 8006ec2:	6828      	ldr	r0, [r5, #0]
 8006ec4:	6869      	ldr	r1, [r5, #4]
 8006ec6:	68aa      	ldr	r2, [r5, #8]
 8006ec8:	68eb      	ldr	r3, [r5, #12]
 8006eca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ecc:	7c2b      	ldrb	r3, [r5, #16]
 8006ece:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiSivicText, devirmeAsagiSivicTextEN, 17);
 8006ed0:	4a99      	ldr	r2, [pc, #612]	@ (8007138 <loadMenuTexts+0x1230>)
 8006ed2:	4b9a      	ldr	r3, [pc, #616]	@ (800713c <loadMenuTexts+0x1234>)
 8006ed4:	4614      	mov	r4, r2
 8006ed6:	461d      	mov	r5, r3
 8006ed8:	6828      	ldr	r0, [r5, #0]
 8006eda:	6869      	ldr	r1, [r5, #4]
 8006edc:	68aa      	ldr	r2, [r5, #8]
 8006ede:	68eb      	ldr	r3, [r5, #12]
 8006ee0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ee2:	7c2b      	ldrb	r3, [r5, #16]
 8006ee4:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusGeriSivicText, yuruyusGeriSivicTextEN, 17);
 8006ee6:	4a96      	ldr	r2, [pc, #600]	@ (8007140 <loadMenuTexts+0x1238>)
 8006ee8:	4b96      	ldr	r3, [pc, #600]	@ (8007144 <loadMenuTexts+0x123c>)
 8006eea:	4614      	mov	r4, r2
 8006eec:	461d      	mov	r5, r3
 8006eee:	6828      	ldr	r0, [r5, #0]
 8006ef0:	6869      	ldr	r1, [r5, #4]
 8006ef2:	68aa      	ldr	r2, [r5, #8]
 8006ef4:	68eb      	ldr	r3, [r5, #12]
 8006ef6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006ef8:	7c2b      	ldrb	r3, [r5, #16]
 8006efa:	7023      	strb	r3, [r4, #0]
		memcpy(yuruyusSecildiText, yuruyusSecildiTextEN, 17);
 8006efc:	4a92      	ldr	r2, [pc, #584]	@ (8007148 <loadMenuTexts+0x1240>)
 8006efe:	4b93      	ldr	r3, [pc, #588]	@ (800714c <loadMenuTexts+0x1244>)
 8006f00:	4614      	mov	r4, r2
 8006f02:	461d      	mov	r5, r3
 8006f04:	6828      	ldr	r0, [r5, #0]
 8006f06:	6869      	ldr	r1, [r5, #4]
 8006f08:	68aa      	ldr	r2, [r5, #8]
 8006f0a:	68eb      	ldr	r3, [r5, #12]
 8006f0c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f0e:	7c2b      	ldrb	r3, [r5, #16]
 8006f10:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeSilindirTipiText, devirmeSilindirTipiTextEN, 17);
 8006f12:	4a8f      	ldr	r2, [pc, #572]	@ (8007150 <loadMenuTexts+0x1248>)
 8006f14:	4b8f      	ldr	r3, [pc, #572]	@ (8007154 <loadMenuTexts+0x124c>)
 8006f16:	4614      	mov	r4, r2
 8006f18:	461d      	mov	r5, r3
 8006f1a:	6828      	ldr	r0, [r5, #0]
 8006f1c:	6869      	ldr	r1, [r5, #4]
 8006f1e:	68aa      	ldr	r2, [r5, #8]
 8006f20:	68eb      	ldr	r3, [r5, #12]
 8006f22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f24:	7c2b      	ldrb	r3, [r5, #16]
 8006f26:	7023      	strb	r3, [r4, #0]
		memcpy(tekTesirText, tekTesirTextEN, 17);
 8006f28:	4a8b      	ldr	r2, [pc, #556]	@ (8007158 <loadMenuTexts+0x1250>)
 8006f2a:	4b8c      	ldr	r3, [pc, #560]	@ (800715c <loadMenuTexts+0x1254>)
 8006f2c:	4614      	mov	r4, r2
 8006f2e:	461d      	mov	r5, r3
 8006f30:	6828      	ldr	r0, [r5, #0]
 8006f32:	6869      	ldr	r1, [r5, #4]
 8006f34:	68aa      	ldr	r2, [r5, #8]
 8006f36:	68eb      	ldr	r3, [r5, #12]
 8006f38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f3a:	7c2b      	ldrb	r3, [r5, #16]
 8006f3c:	7023      	strb	r3, [r4, #0]
		memcpy(ciftTesirText, ciftTesirTextEN, 17);
 8006f3e:	4a88      	ldr	r2, [pc, #544]	@ (8007160 <loadMenuTexts+0x1258>)
 8006f40:	4b88      	ldr	r3, [pc, #544]	@ (8007164 <loadMenuTexts+0x125c>)
 8006f42:	4614      	mov	r4, r2
 8006f44:	461d      	mov	r5, r3
 8006f46:	6828      	ldr	r0, [r5, #0]
 8006f48:	6869      	ldr	r1, [r5, #4]
 8006f4a:	68aa      	ldr	r2, [r5, #8]
 8006f4c:	68eb      	ldr	r3, [r5, #12]
 8006f4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f50:	7c2b      	ldrb	r3, [r5, #16]
 8006f52:	7023      	strb	r3, [r4, #0]
		memcpy(platformSilindirTipiText, platformSilindirTipiTextEN, 17);
 8006f54:	4a84      	ldr	r2, [pc, #528]	@ (8007168 <loadMenuTexts+0x1260>)
 8006f56:	4b85      	ldr	r3, [pc, #532]	@ (800716c <loadMenuTexts+0x1264>)
 8006f58:	4614      	mov	r4, r2
 8006f5a:	461d      	mov	r5, r3
 8006f5c:	6828      	ldr	r0, [r5, #0]
 8006f5e:	6869      	ldr	r1, [r5, #4]
 8006f60:	68aa      	ldr	r2, [r5, #8]
 8006f62:	68eb      	ldr	r3, [r5, #12]
 8006f64:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f66:	7c2b      	ldrb	r3, [r5, #16]
 8006f68:	7023      	strb	r3, [r4, #0]
		memcpy(yukariValfSureText, yukariValfSureTextEN, 17);
 8006f6a:	4a81      	ldr	r2, [pc, #516]	@ (8007170 <loadMenuTexts+0x1268>)
 8006f6c:	4b81      	ldr	r3, [pc, #516]	@ (8007174 <loadMenuTexts+0x126c>)
 8006f6e:	4614      	mov	r4, r2
 8006f70:	461d      	mov	r5, r3
 8006f72:	6828      	ldr	r0, [r5, #0]
 8006f74:	6869      	ldr	r1, [r5, #4]
 8006f76:	68aa      	ldr	r2, [r5, #8]
 8006f78:	68eb      	ldr	r3, [r5, #12]
 8006f7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f7c:	7c2b      	ldrb	r3, [r5, #16]
 8006f7e:	7023      	strb	r3, [r4, #0]
		memcpy(asagiValfSureText, asagiValfSureTextEN, 17);
 8006f80:	4a7d      	ldr	r2, [pc, #500]	@ (8007178 <loadMenuTexts+0x1270>)
 8006f82:	4b7e      	ldr	r3, [pc, #504]	@ (800717c <loadMenuTexts+0x1274>)
 8006f84:	4614      	mov	r4, r2
 8006f86:	461d      	mov	r5, r3
 8006f88:	6828      	ldr	r0, [r5, #0]
 8006f8a:	6869      	ldr	r1, [r5, #4]
 8006f8c:	68aa      	ldr	r2, [r5, #8]
 8006f8e:	68eb      	ldr	r3, [r5, #12]
 8006f90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006f92:	7c2b      	ldrb	r3, [r5, #16]
 8006f94:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeYukariValfSureText, devirmeYukariValfSureTextEN, 17);
 8006f96:	4a7a      	ldr	r2, [pc, #488]	@ (8007180 <loadMenuTexts+0x1278>)
 8006f98:	4b7a      	ldr	r3, [pc, #488]	@ (8007184 <loadMenuTexts+0x127c>)
 8006f9a:	4614      	mov	r4, r2
 8006f9c:	461d      	mov	r5, r3
 8006f9e:	6828      	ldr	r0, [r5, #0]
 8006fa0:	6869      	ldr	r1, [r5, #4]
 8006fa2:	68aa      	ldr	r2, [r5, #8]
 8006fa4:	68eb      	ldr	r3, [r5, #12]
 8006fa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fa8:	7c2b      	ldrb	r3, [r5, #16]
 8006faa:	7023      	strb	r3, [r4, #0]
		memcpy(ileriValfSureText, ileriValfSureTextEN, 17);
 8006fac:	4a76      	ldr	r2, [pc, #472]	@ (8007188 <loadMenuTexts+0x1280>)
 8006fae:	4b77      	ldr	r3, [pc, #476]	@ (800718c <loadMenuTexts+0x1284>)
 8006fb0:	4614      	mov	r4, r2
 8006fb2:	461d      	mov	r5, r3
 8006fb4:	6828      	ldr	r0, [r5, #0]
 8006fb6:	6869      	ldr	r1, [r5, #4]
 8006fb8:	68aa      	ldr	r2, [r5, #8]
 8006fba:	68eb      	ldr	r3, [r5, #12]
 8006fbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fbe:	7c2b      	ldrb	r3, [r5, #16]
 8006fc0:	7023      	strb	r3, [r4, #0]
		memcpy(devirmeAsagiValfSureText, devirmeAsagiValfSureTextEN, 17);
 8006fc2:	4a73      	ldr	r2, [pc, #460]	@ (8007190 <loadMenuTexts+0x1288>)
 8006fc4:	4b73      	ldr	r3, [pc, #460]	@ (8007194 <loadMenuTexts+0x128c>)
 8006fc6:	4614      	mov	r4, r2
 8006fc8:	461d      	mov	r5, r3
 8006fca:	6828      	ldr	r0, [r5, #0]
 8006fcc:	6869      	ldr	r1, [r5, #4]
 8006fce:	68aa      	ldr	r2, [r5, #8]
 8006fd0:	68eb      	ldr	r3, [r5, #12]
 8006fd2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fd4:	7c2b      	ldrb	r3, [r5, #16]
 8006fd6:	7023      	strb	r3, [r4, #0]
		memcpy(geriValfSureText, geriValfSureTextEN, 17);
 8006fd8:	4a6f      	ldr	r2, [pc, #444]	@ (8007198 <loadMenuTexts+0x1290>)
 8006fda:	4b70      	ldr	r3, [pc, #448]	@ (800719c <loadMenuTexts+0x1294>)
 8006fdc:	4614      	mov	r4, r2
 8006fde:	461d      	mov	r5, r3
 8006fe0:	6828      	ldr	r0, [r5, #0]
 8006fe2:	6869      	ldr	r1, [r5, #4]
 8006fe4:	68aa      	ldr	r2, [r5, #8]
 8006fe6:	68eb      	ldr	r3, [r5, #12]
 8006fe8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006fea:	7c2b      	ldrb	r3, [r5, #16]
 8006fec:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSuresiText, calismaSuresiTextEN, 17);
 8006fee:	4a6c      	ldr	r2, [pc, #432]	@ (80071a0 <loadMenuTexts+0x1298>)
 8006ff0:	4b6c      	ldr	r3, [pc, #432]	@ (80071a4 <loadMenuTexts+0x129c>)
 8006ff2:	4614      	mov	r4, r2
 8006ff4:	461d      	mov	r5, r3
 8006ff6:	6828      	ldr	r0, [r5, #0]
 8006ff8:	6869      	ldr	r1, [r5, #4]
 8006ffa:	68aa      	ldr	r2, [r5, #8]
 8006ffc:	68eb      	ldr	r3, [r5, #12]
 8006ffe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007000:	7c2b      	ldrb	r3, [r5, #16]
 8007002:	7023      	strb	r3, [r4, #0]
		memcpy(calismaSayisiText, calismaSayisiTextEN, 17);
 8007004:	4a68      	ldr	r2, [pc, #416]	@ (80071a8 <loadMenuTexts+0x12a0>)
 8007006:	4b69      	ldr	r3, [pc, #420]	@ (80071ac <loadMenuTexts+0x12a4>)
 8007008:	4614      	mov	r4, r2
 800700a:	461d      	mov	r5, r3
 800700c:	6828      	ldr	r0, [r5, #0]
 800700e:	6869      	ldr	r1, [r5, #4]
 8007010:	68aa      	ldr	r2, [r5, #8]
 8007012:	68eb      	ldr	r3, [r5, #12]
 8007014:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007016:	7c2b      	ldrb	r3, [r5, #16]
 8007018:	7023      	strb	r3, [r4, #0]
		memcpy(enterlaSifirlaText, enterlaSifirlaTextEN, 17);
 800701a:	4a65      	ldr	r2, [pc, #404]	@ (80071b0 <loadMenuTexts+0x12a8>)
 800701c:	4b65      	ldr	r3, [pc, #404]	@ (80071b4 <loadMenuTexts+0x12ac>)
 800701e:	4614      	mov	r4, r2
 8007020:	461d      	mov	r5, r3
 8007022:	6828      	ldr	r0, [r5, #0]
 8007024:	6869      	ldr	r1, [r5, #4]
 8007026:	68aa      	ldr	r2, [r5, #8]
 8007028:	68eb      	ldr	r3, [r5, #12]
 800702a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800702c:	7c2b      	ldrb	r3, [r5, #16]
 800702e:	7023      	strb	r3, [r4, #0]
		memcpy(dilSecimText, dilSecimTextEN, 17);
 8007030:	4a61      	ldr	r2, [pc, #388]	@ (80071b8 <loadMenuTexts+0x12b0>)
 8007032:	4b62      	ldr	r3, [pc, #392]	@ (80071bc <loadMenuTexts+0x12b4>)
 8007034:	4614      	mov	r4, r2
 8007036:	461d      	mov	r5, r3
 8007038:	6828      	ldr	r0, [r5, #0]
 800703a:	6869      	ldr	r1, [r5, #4]
 800703c:	68aa      	ldr	r2, [r5, #8]
 800703e:	68eb      	ldr	r3, [r5, #12]
 8007040:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007042:	7c2b      	ldrb	r3, [r5, #16]
 8007044:	7023      	strb	r3, [r4, #0]
		memcpy(secilenDilText, secilenDilTextEN, 17);
 8007046:	4a5e      	ldr	r2, [pc, #376]	@ (80071c0 <loadMenuTexts+0x12b8>)
 8007048:	4b5e      	ldr	r3, [pc, #376]	@ (80071c4 <loadMenuTexts+0x12bc>)
 800704a:	4614      	mov	r4, r2
 800704c:	461d      	mov	r5, r3
 800704e:	6828      	ldr	r0, [r5, #0]
 8007050:	6869      	ldr	r1, [r5, #4]
 8007052:	68aa      	ldr	r2, [r5, #8]
 8007054:	68eb      	ldr	r3, [r5, #12]
 8007056:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007058:	7c2b      	ldrb	r3, [r5, #16]
 800705a:	7023      	strb	r3, [r4, #0]
		memcpy(menudenCikisText, menudenCikisTextEN, 17);
 800705c:	4a5a      	ldr	r2, [pc, #360]	@ (80071c8 <loadMenuTexts+0x12c0>)
 800705e:	4b5b      	ldr	r3, [pc, #364]	@ (80071cc <loadMenuTexts+0x12c4>)
 8007060:	4614      	mov	r4, r2
 8007062:	461d      	mov	r5, r3
 8007064:	6828      	ldr	r0, [r5, #0]
 8007066:	6869      	ldr	r1, [r5, #4]
 8007068:	68aa      	ldr	r2, [r5, #8]
 800706a:	68eb      	ldr	r3, [r5, #12]
 800706c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800706e:	7c2b      	ldrb	r3, [r5, #16]
 8007070:	7023      	strb	r3, [r4, #0]
		memcpy(enteraBasinizText, enteraBasinizTextEN, 17);
 8007072:	4a57      	ldr	r2, [pc, #348]	@ (80071d0 <loadMenuTexts+0x12c8>)
 8007074:	4b57      	ldr	r3, [pc, #348]	@ (80071d4 <loadMenuTexts+0x12cc>)
 8007076:	4614      	mov	r4, r2
 8007078:	461d      	mov	r5, r3
 800707a:	6828      	ldr	r0, [r5, #0]
 800707c:	6869      	ldr	r1, [r5, #4]
 800707e:	68aa      	ldr	r2, [r5, #8]
 8007080:	68eb      	ldr	r3, [r5, #12]
 8007082:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007084:	7c2b      	ldrb	r3, [r5, #16]
 8007086:	7023      	strb	r3, [r4, #0]
		memcpy(hataKoduText, hataKoduTextEN, 17);
 8007088:	4a53      	ldr	r2, [pc, #332]	@ (80071d8 <loadMenuTexts+0x12d0>)
 800708a:	4b54      	ldr	r3, [pc, #336]	@ (80071dc <loadMenuTexts+0x12d4>)
 800708c:	4614      	mov	r4, r2
 800708e:	461d      	mov	r5, r3
 8007090:	6828      	ldr	r0, [r5, #0]
 8007092:	6869      	ldr	r1, [r5, #4]
 8007094:	68aa      	ldr	r2, [r5, #8]
 8007096:	68eb      	ldr	r3, [r5, #12]
 8007098:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800709a:	7c2b      	ldrb	r3, [r5, #16]
 800709c:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynchText, dataSynchTextEN, 17);
 800709e:	4a50      	ldr	r2, [pc, #320]	@ (80071e0 <loadMenuTexts+0x12d8>)
 80070a0:	4b50      	ldr	r3, [pc, #320]	@ (80071e4 <loadMenuTexts+0x12dc>)
 80070a2:	4614      	mov	r4, r2
 80070a4:	461d      	mov	r5, r3
 80070a6:	6828      	ldr	r0, [r5, #0]
 80070a8:	6869      	ldr	r1, [r5, #4]
 80070aa:	68aa      	ldr	r2, [r5, #8]
 80070ac:	68eb      	ldr	r3, [r5, #12]
 80070ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070b0:	7c2b      	ldrb	r3, [r5, #16]
 80070b2:	7023      	strb	r3, [r4, #0]
		memcpy(dataSynch2Text, dataSynch2TextEN, 17);
 80070b4:	4a4c      	ldr	r2, [pc, #304]	@ (80071e8 <loadMenuTexts+0x12e0>)
 80070b6:	4b4d      	ldr	r3, [pc, #308]	@ (80071ec <loadMenuTexts+0x12e4>)
 80070b8:	4614      	mov	r4, r2
 80070ba:	461d      	mov	r5, r3
 80070bc:	6828      	ldr	r0, [r5, #0]
 80070be:	6869      	ldr	r1, [r5, #4]
 80070c0:	68aa      	ldr	r2, [r5, #8]
 80070c2:	68eb      	ldr	r3, [r5, #12]
 80070c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80070c6:	7c2b      	ldrb	r3, [r5, #16]
 80070c8:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUniqueText, mustBeUniqueTextEN, 17);
 80070ca:	4a49      	ldr	r2, [pc, #292]	@ (80071f0 <loadMenuTexts+0x12e8>)
 80070cc:	4b49      	ldr	r3, [pc, #292]	@ (80071f4 <loadMenuTexts+0x12ec>)
 80070ce:	4614      	mov	r4, r2
 80070d0:	461d      	mov	r5, r3
 80070d2:	e091      	b.n	80071f8 <loadMenuTexts+0x12f0>
 80070d4:	200009d8 	.word	0x200009d8
 80070d8:	200014e4 	.word	0x200014e4
 80070dc:	200009ec 	.word	0x200009ec
 80070e0:	200014f8 	.word	0x200014f8
 80070e4:	20000a00 	.word	0x20000a00
 80070e8:	2000150c 	.word	0x2000150c
 80070ec:	20000a14 	.word	0x20000a14
 80070f0:	20001520 	.word	0x20001520
 80070f4:	20000a28 	.word	0x20000a28
 80070f8:	20001534 	.word	0x20001534
 80070fc:	20000a3c 	.word	0x20000a3c
 8007100:	20001548 	.word	0x20001548
 8007104:	20000a50 	.word	0x20000a50
 8007108:	2000155c 	.word	0x2000155c
 800710c:	20000a64 	.word	0x20000a64
 8007110:	20001570 	.word	0x20001570
 8007114:	20000a78 	.word	0x20000a78
 8007118:	20001584 	.word	0x20001584
 800711c:	20000a8c 	.word	0x20000a8c
 8007120:	20001598 	.word	0x20001598
 8007124:	20000aa0 	.word	0x20000aa0
 8007128:	200015ac 	.word	0x200015ac
 800712c:	20000ab4 	.word	0x20000ab4
 8007130:	200015c0 	.word	0x200015c0
 8007134:	20000ac8 	.word	0x20000ac8
 8007138:	200015d4 	.word	0x200015d4
 800713c:	20000adc 	.word	0x20000adc
 8007140:	200015e8 	.word	0x200015e8
 8007144:	20000af0 	.word	0x20000af0
 8007148:	200015fc 	.word	0x200015fc
 800714c:	20000b04 	.word	0x20000b04
 8007150:	20001610 	.word	0x20001610
 8007154:	20000b18 	.word	0x20000b18
 8007158:	20001624 	.word	0x20001624
 800715c:	20000b2c 	.word	0x20000b2c
 8007160:	20001638 	.word	0x20001638
 8007164:	20000b40 	.word	0x20000b40
 8007168:	2000164c 	.word	0x2000164c
 800716c:	20000b54 	.word	0x20000b54
 8007170:	20001660 	.word	0x20001660
 8007174:	20000b68 	.word	0x20000b68
 8007178:	20001674 	.word	0x20001674
 800717c:	20000b7c 	.word	0x20000b7c
 8007180:	20001688 	.word	0x20001688
 8007184:	20000b90 	.word	0x20000b90
 8007188:	2000169c 	.word	0x2000169c
 800718c:	20000ba4 	.word	0x20000ba4
 8007190:	200016b0 	.word	0x200016b0
 8007194:	20000bb8 	.word	0x20000bb8
 8007198:	200016c4 	.word	0x200016c4
 800719c:	20000bcc 	.word	0x20000bcc
 80071a0:	200016d8 	.word	0x200016d8
 80071a4:	20000be0 	.word	0x20000be0
 80071a8:	200016ec 	.word	0x200016ec
 80071ac:	20000bf4 	.word	0x20000bf4
 80071b0:	20001700 	.word	0x20001700
 80071b4:	20000c08 	.word	0x20000c08
 80071b8:	20001714 	.word	0x20001714
 80071bc:	20000c1c 	.word	0x20000c1c
 80071c0:	20001728 	.word	0x20001728
 80071c4:	20000c30 	.word	0x20000c30
 80071c8:	2000173c 	.word	0x2000173c
 80071cc:	20000c44 	.word	0x20000c44
 80071d0:	20001750 	.word	0x20001750
 80071d4:	20000c58 	.word	0x20000c58
 80071d8:	20001764 	.word	0x20001764
 80071dc:	20000c6c 	.word	0x20000c6c
 80071e0:	20001778 	.word	0x20001778
 80071e4:	20000cf8 	.word	0x20000cf8
 80071e8:	2000178c 	.word	0x2000178c
 80071ec:	20000d0c 	.word	0x20000d0c
 80071f0:	200017a0 	.word	0x200017a0
 80071f4:	20000cd0 	.word	0x20000cd0
 80071f8:	6828      	ldr	r0, [r5, #0]
 80071fa:	6869      	ldr	r1, [r5, #4]
 80071fc:	68aa      	ldr	r2, [r5, #8]
 80071fe:	68eb      	ldr	r3, [r5, #12]
 8007200:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007202:	7c2b      	ldrb	r3, [r5, #16]
 8007204:	7023      	strb	r3, [r4, #0]
		memcpy(mustBeUnique2Text, mustBeUnique2TextEN, 17);
 8007206:	4a55      	ldr	r2, [pc, #340]	@ (800735c <loadMenuTexts+0x1454>)
 8007208:	4b55      	ldr	r3, [pc, #340]	@ (8007360 <loadMenuTexts+0x1458>)
 800720a:	4614      	mov	r4, r2
 800720c:	461d      	mov	r5, r3
 800720e:	6828      	ldr	r0, [r5, #0]
 8007210:	6869      	ldr	r1, [r5, #4]
 8007212:	68aa      	ldr	r2, [r5, #8]
 8007214:	68eb      	ldr	r3, [r5, #12]
 8007216:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007218:	7c2b      	ldrb	r3, [r5, #16]
 800721a:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe12Text, mustBe12TextEN, 17);
 800721c:	4a51      	ldr	r2, [pc, #324]	@ (8007364 <loadMenuTexts+0x145c>)
 800721e:	4b52      	ldr	r3, [pc, #328]	@ (8007368 <loadMenuTexts+0x1460>)
 8007220:	4614      	mov	r4, r2
 8007222:	461d      	mov	r5, r3
 8007224:	6828      	ldr	r0, [r5, #0]
 8007226:	6869      	ldr	r1, [r5, #4]
 8007228:	68aa      	ldr	r2, [r5, #8]
 800722a:	68eb      	ldr	r3, [r5, #12]
 800722c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800722e:	7c2b      	ldrb	r3, [r5, #16]
 8007230:	7023      	strb	r3, [r4, #0]
		memcpy(mustBe122Text, mustBe122TextEN, 17);
 8007232:	4a4e      	ldr	r2, [pc, #312]	@ (800736c <loadMenuTexts+0x1464>)
 8007234:	4b4e      	ldr	r3, [pc, #312]	@ (8007370 <loadMenuTexts+0x1468>)
 8007236:	4614      	mov	r4, r2
 8007238:	461d      	mov	r5, r3
 800723a:	6828      	ldr	r0, [r5, #0]
 800723c:	6869      	ldr	r1, [r5, #4]
 800723e:	68aa      	ldr	r2, [r5, #8]
 8007240:	68eb      	ldr	r3, [r5, #12]
 8007242:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007244:	7c2b      	ldrb	r3, [r5, #16]
 8007246:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedErrorText, ssidExceedErrorTextEN, 17);
 8007248:	4a4a      	ldr	r2, [pc, #296]	@ (8007374 <loadMenuTexts+0x146c>)
 800724a:	4b4b      	ldr	r3, [pc, #300]	@ (8007378 <loadMenuTexts+0x1470>)
 800724c:	4614      	mov	r4, r2
 800724e:	461d      	mov	r5, r3
 8007250:	6828      	ldr	r0, [r5, #0]
 8007252:	6869      	ldr	r1, [r5, #4]
 8007254:	68aa      	ldr	r2, [r5, #8]
 8007256:	68eb      	ldr	r3, [r5, #12]
 8007258:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800725a:	7c2b      	ldrb	r3, [r5, #16]
 800725c:	7023      	strb	r3, [r4, #0]
		memcpy(ssidExceedError2Text, ssidExceedError2TextEN, 17);
 800725e:	4a47      	ldr	r2, [pc, #284]	@ (800737c <loadMenuTexts+0x1474>)
 8007260:	4b47      	ldr	r3, [pc, #284]	@ (8007380 <loadMenuTexts+0x1478>)
 8007262:	4614      	mov	r4, r2
 8007264:	461d      	mov	r5, r3
 8007266:	6828      	ldr	r0, [r5, #0]
 8007268:	6869      	ldr	r1, [r5, #4]
 800726a:	68aa      	ldr	r2, [r5, #8]
 800726c:	68eb      	ldr	r3, [r5, #12]
 800726e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007270:	7c2b      	ldrb	r3, [r5, #16]
 8007272:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedErrorText, passExceedErrorTextEN, 17);
 8007274:	4a43      	ldr	r2, [pc, #268]	@ (8007384 <loadMenuTexts+0x147c>)
 8007276:	4b44      	ldr	r3, [pc, #272]	@ (8007388 <loadMenuTexts+0x1480>)
 8007278:	4614      	mov	r4, r2
 800727a:	461d      	mov	r5, r3
 800727c:	6828      	ldr	r0, [r5, #0]
 800727e:	6869      	ldr	r1, [r5, #4]
 8007280:	68aa      	ldr	r2, [r5, #8]
 8007282:	68eb      	ldr	r3, [r5, #12]
 8007284:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007286:	7c2b      	ldrb	r3, [r5, #16]
 8007288:	7023      	strb	r3, [r4, #0]
		memcpy(passExceedError2Text, passExceedError2TextEN, 17);
 800728a:	4a40      	ldr	r2, [pc, #256]	@ (800738c <loadMenuTexts+0x1484>)
 800728c:	4b40      	ldr	r3, [pc, #256]	@ (8007390 <loadMenuTexts+0x1488>)
 800728e:	4614      	mov	r4, r2
 8007290:	461d      	mov	r5, r3
 8007292:	6828      	ldr	r0, [r5, #0]
 8007294:	6869      	ldr	r1, [r5, #4]
 8007296:	68aa      	ldr	r2, [r5, #8]
 8007298:	68eb      	ldr	r3, [r5, #12]
 800729a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800729c:	7c2b      	ldrb	r3, [r5, #16]
 800729e:	7023      	strb	r3, [r4, #0]
		memcpy(dataYazildiText, dataYazildiTextEN, 17);
 80072a0:	4a3c      	ldr	r2, [pc, #240]	@ (8007394 <loadMenuTexts+0x148c>)
 80072a2:	4b3d      	ldr	r3, [pc, #244]	@ (8007398 <loadMenuTexts+0x1490>)
 80072a4:	4614      	mov	r4, r2
 80072a6:	461d      	mov	r5, r3
 80072a8:	6828      	ldr	r0, [r5, #0]
 80072aa:	6869      	ldr	r1, [r5, #4]
 80072ac:	68aa      	ldr	r2, [r5, #8]
 80072ae:	68eb      	ldr	r3, [r5, #12]
 80072b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072b2:	7c2b      	ldrb	r3, [r5, #16]
 80072b4:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunuyorText, dataOkunuyorTextEN, 17);
 80072b6:	4a39      	ldr	r2, [pc, #228]	@ (800739c <loadMenuTexts+0x1494>)
 80072b8:	4b39      	ldr	r3, [pc, #228]	@ (80073a0 <loadMenuTexts+0x1498>)
 80072ba:	4614      	mov	r4, r2
 80072bc:	461d      	mov	r5, r3
 80072be:	6828      	ldr	r0, [r5, #0]
 80072c0:	6869      	ldr	r1, [r5, #4]
 80072c2:	68aa      	ldr	r2, [r5, #8]
 80072c4:	68eb      	ldr	r3, [r5, #12]
 80072c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072c8:	7c2b      	ldrb	r3, [r5, #16]
 80072ca:	7023      	strb	r3, [r4, #0]
		memcpy(dataOkunduText, dataOkunduTextEN, 17);
 80072cc:	4a35      	ldr	r2, [pc, #212]	@ (80073a4 <loadMenuTexts+0x149c>)
 80072ce:	4b36      	ldr	r3, [pc, #216]	@ (80073a8 <loadMenuTexts+0x14a0>)
 80072d0:	4614      	mov	r4, r2
 80072d2:	461d      	mov	r5, r3
 80072d4:	6828      	ldr	r0, [r5, #0]
 80072d6:	6869      	ldr	r1, [r5, #4]
 80072d8:	68aa      	ldr	r2, [r5, #8]
 80072da:	68eb      	ldr	r3, [r5, #12]
 80072dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072de:	7c2b      	ldrb	r3, [r5, #16]
 80072e0:	7023      	strb	r3, [r4, #0]
		memcpy(degerKaydedildiText, degerKaydedildiTextEN, 17);
 80072e2:	4a32      	ldr	r2, [pc, #200]	@ (80073ac <loadMenuTexts+0x14a4>)
 80072e4:	4b32      	ldr	r3, [pc, #200]	@ (80073b0 <loadMenuTexts+0x14a8>)
 80072e6:	4614      	mov	r4, r2
 80072e8:	461d      	mov	r5, r3
 80072ea:	6828      	ldr	r0, [r5, #0]
 80072ec:	6869      	ldr	r1, [r5, #4]
 80072ee:	68aa      	ldr	r2, [r5, #8]
 80072f0:	68eb      	ldr	r3, [r5, #12]
 80072f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80072f4:	7c2b      	ldrb	r3, [r5, #16]
 80072f6:	7023      	strb	r3, [r4, #0]
		memcpy(errorCodeText, errorCodeTextEN, 17);
 80072f8:	4a2e      	ldr	r2, [pc, #184]	@ (80073b4 <loadMenuTexts+0x14ac>)
 80072fa:	4b2f      	ldr	r3, [pc, #188]	@ (80073b8 <loadMenuTexts+0x14b0>)
 80072fc:	4614      	mov	r4, r2
 80072fe:	461d      	mov	r5, r3
 8007300:	6828      	ldr	r0, [r5, #0]
 8007302:	6869      	ldr	r1, [r5, #4]
 8007304:	68aa      	ldr	r2, [r5, #8]
 8007306:	68eb      	ldr	r3, [r5, #12]
 8007308:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800730a:	7c2b      	ldrb	r3, [r5, #16]
 800730c:	7023      	strb	r3, [r4, #0]
		memcpy(machineIDText, machineIDTextEN, 17);
 800730e:	4a2b      	ldr	r2, [pc, #172]	@ (80073bc <loadMenuTexts+0x14b4>)
 8007310:	4b2b      	ldr	r3, [pc, #172]	@ (80073c0 <loadMenuTexts+0x14b8>)
 8007312:	4614      	mov	r4, r2
 8007314:	461d      	mov	r5, r3
 8007316:	6828      	ldr	r0, [r5, #0]
 8007318:	6869      	ldr	r1, [r5, #4]
 800731a:	68aa      	ldr	r2, [r5, #8]
 800731c:	68eb      	ldr	r3, [r5, #12]
 800731e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007320:	7c2b      	ldrb	r3, [r5, #16]
 8007322:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationText, idConfirmationTextEN, 17);
 8007324:	4a27      	ldr	r2, [pc, #156]	@ (80073c4 <loadMenuTexts+0x14bc>)
 8007326:	4b28      	ldr	r3, [pc, #160]	@ (80073c8 <loadMenuTexts+0x14c0>)
 8007328:	4614      	mov	r4, r2
 800732a:	461d      	mov	r5, r3
 800732c:	6828      	ldr	r0, [r5, #0]
 800732e:	6869      	ldr	r1, [r5, #4]
 8007330:	68aa      	ldr	r2, [r5, #8]
 8007332:	68eb      	ldr	r3, [r5, #12]
 8007334:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007336:	7c2b      	ldrb	r3, [r5, #16]
 8007338:	7023      	strb	r3, [r4, #0]
		memcpy(idConfirmationSubText, idConfirmationSubTextEN, 17);
 800733a:	4a24      	ldr	r2, [pc, #144]	@ (80073cc <loadMenuTexts+0x14c4>)
 800733c:	4b24      	ldr	r3, [pc, #144]	@ (80073d0 <loadMenuTexts+0x14c8>)
 800733e:	4614      	mov	r4, r2
 8007340:	461d      	mov	r5, r3
 8007342:	6828      	ldr	r0, [r5, #0]
 8007344:	6869      	ldr	r1, [r5, #4]
 8007346:	68aa      	ldr	r2, [r5, #8]
 8007348:	68eb      	ldr	r3, [r5, #12]
 800734a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800734c:	7c2b      	ldrb	r3, [r5, #16]
 800734e:	7023      	strb	r3, [r4, #0]
	}
	menuVariableFinisher();
 8007350:	f000 f840 	bl	80073d4 <menuVariableFinisher>
}
 8007354:	bf00      	nop
 8007356:	3708      	adds	r7, #8
 8007358:	46bd      	mov	sp, r7
 800735a:	bdb0      	pop	{r4, r5, r7, pc}
 800735c:	200017b4 	.word	0x200017b4
 8007360:	20000ce4 	.word	0x20000ce4
 8007364:	200017c8 	.word	0x200017c8
 8007368:	20000d48 	.word	0x20000d48
 800736c:	200017dc 	.word	0x200017dc
 8007370:	20000d5c 	.word	0x20000d5c
 8007374:	200017f0 	.word	0x200017f0
 8007378:	20000d98 	.word	0x20000d98
 800737c:	20001804 	.word	0x20001804
 8007380:	20000dac 	.word	0x20000dac
 8007384:	20001818 	.word	0x20001818
 8007388:	20000de8 	.word	0x20000de8
 800738c:	2000182c 	.word	0x2000182c
 8007390:	20000dfc 	.word	0x20000dfc
 8007394:	20001840 	.word	0x20001840
 8007398:	20000e24 	.word	0x20000e24
 800739c:	20001854 	.word	0x20001854
 80073a0:	20000e4c 	.word	0x20000e4c
 80073a4:	20001868 	.word	0x20001868
 80073a8:	20000e74 	.word	0x20000e74
 80073ac:	2000187c 	.word	0x2000187c
 80073b0:	20000e9c 	.word	0x20000e9c
 80073b4:	20001890 	.word	0x20001890
 80073b8:	20000ec4 	.word	0x20000ec4
 80073bc:	200018a4 	.word	0x200018a4
 80073c0:	20000eec 	.word	0x20000eec
 80073c4:	200018b8 	.word	0x200018b8
 80073c8:	20000f14 	.word	0x20000f14
 80073cc:	200018cc 	.word	0x200018cc
 80073d0:	20000f3c 	.word	0x20000f3c

080073d4 <menuVariableFinisher>:

void menuVariableFinisher(void) {
 80073d4:	b480      	push	{r7}
 80073d6:	af00      	add	r7, sp, #0
	splashTextGN[16] = '\0';
 80073d8:	4b97      	ldr	r3, [pc, #604]	@ (8007638 <menuVariableFinisher+0x264>)
 80073da:	2200      	movs	r2, #0
 80073dc:	741a      	strb	r2, [r3, #16]
	splashText2GN[16] = '\0';
 80073de:	4b97      	ldr	r3, [pc, #604]	@ (800763c <menuVariableFinisher+0x268>)
 80073e0:	2200      	movs	r2, #0
 80073e2:	741a      	strb	r2, [r3, #16]
	mainTextGN[16] = '\0';
 80073e4:	4b96      	ldr	r3, [pc, #600]	@ (8007640 <menuVariableFinisher+0x26c>)
 80073e6:	2200      	movs	r2, #0
 80073e8:	741a      	strb	r2, [r3, #16]
	mainText2GN[16] = '\0';
 80073ea:	4b96      	ldr	r3, [pc, #600]	@ (8007644 <menuVariableFinisher+0x270>)
 80073ec:	2200      	movs	r2, #0
 80073ee:	741a      	strb	r2, [r3, #16]
	ondSafetyTextGN[16] = '\0';
 80073f0:	4b95      	ldr	r3, [pc, #596]	@ (8007648 <menuVariableFinisher+0x274>)
 80073f2:	2200      	movs	r2, #0
 80073f4:	741a      	strb	r2, [r3, #16]
	prudhomeTextGN[16] = '\0';
 80073f6:	4b95      	ldr	r3, [pc, #596]	@ (800764c <menuVariableFinisher+0x278>)
 80073f8:	2200      	movs	r2, #0
 80073fa:	741a      	strb	r2, [r3, #16]
	pizzattoTextGN[16] = '\0';
 80073fc:	4b94      	ldr	r3, [pc, #592]	@ (8007650 <menuVariableFinisher+0x27c>)
 80073fe:	2200      	movs	r2, #0
 8007400:	741a      	strb	r2, [r3, #16]
	buzzerTextGN[16] = '\0';
 8007402:	4b94      	ldr	r3, [pc, #592]	@ (8007654 <menuVariableFinisher+0x280>)
 8007404:	2200      	movs	r2, #0
 8007406:	741a      	strb	r2, [r3, #16]
	demoModTextGN[16] = '\0';
 8007408:	4b93      	ldr	r3, [pc, #588]	@ (8007658 <menuVariableFinisher+0x284>)
 800740a:	2200      	movs	r2, #0
 800740c:	741a      	strb	r2, [r3, #16]
	iotModTextGN[16] = '\0';
 800740e:	4b93      	ldr	r3, [pc, #588]	@ (800765c <menuVariableFinisher+0x288>)
 8007410:	2200      	movs	r2, #0
 8007412:	741a      	strb	r2, [r3, #16]
	cycleTextGN[16] = '\0';
 8007414:	4b92      	ldr	r3, [pc, #584]	@ (8007660 <menuVariableFinisher+0x28c>)
 8007416:	2200      	movs	r2, #0
 8007418:	741a      	strb	r2, [r3, #16]
	eepromTextGN[16] = '\0';
 800741a:	4b92      	ldr	r3, [pc, #584]	@ (8007664 <menuVariableFinisher+0x290>)
 800741c:	2200      	movs	r2, #0
 800741e:	741a      	strb	r2, [r3, #16]

	menuyeGirildiText[16] = '\0';
 8007420:	4b91      	ldr	r3, [pc, #580]	@ (8007668 <menuVariableFinisher+0x294>)
 8007422:	2200      	movs	r2, #0
 8007424:	741a      	strb	r2, [r3, #16]
	ayarlarText[16] = '\0';
 8007426:	4b91      	ldr	r3, [pc, #580]	@ (800766c <menuVariableFinisher+0x298>)
 8007428:	2200      	movs	r2, #0
 800742a:	741a      	strb	r2, [r3, #16]
	hataKayitListText[16] = '\0';
 800742c:	4b90      	ldr	r3, [pc, #576]	@ (8007670 <menuVariableFinisher+0x29c>)
 800742e:	2200      	movs	r2, #0
 8007430:	741a      	strb	r2, [r3, #16]
	birHataKoduText[16] = '\0';
 8007432:	4b90      	ldr	r3, [pc, #576]	@ (8007674 <menuVariableFinisher+0x2a0>)
 8007434:	2200      	movs	r2, #0
 8007436:	741a      	strb	r2, [r3, #16]
	ikiHataKoduText[16] = '\0';
 8007438:	4b8f      	ldr	r3, [pc, #572]	@ (8007678 <menuVariableFinisher+0x2a4>)
 800743a:	2200      	movs	r2, #0
 800743c:	741a      	strb	r2, [r3, #16]
	ucHataKoduText[16] = '\0';
 800743e:	4b8f      	ldr	r3, [pc, #572]	@ (800767c <menuVariableFinisher+0x2a8>)
 8007440:	2200      	movs	r2, #0
 8007442:	741a      	strb	r2, [r3, #16]
	dortHataKoduText[16] = '\0';
 8007444:	4b8e      	ldr	r3, [pc, #568]	@ (8007680 <menuVariableFinisher+0x2ac>)
 8007446:	2200      	movs	r2, #0
 8007448:	741a      	strb	r2, [r3, #16]
	besHataKoduText[16] = '\0';
 800744a:	4b8e      	ldr	r3, [pc, #568]	@ (8007684 <menuVariableFinisher+0x2b0>)
 800744c:	2200      	movs	r2, #0
 800744e:	741a      	strb	r2, [r3, #16]
	altiHataKoduText[16] = '\0';
 8007450:	4b8d      	ldr	r3, [pc, #564]	@ (8007688 <menuVariableFinisher+0x2b4>)
 8007452:	2200      	movs	r2, #0
 8007454:	741a      	strb	r2, [r3, #16]
	yediHataKoduText[16] = '\0';
 8007456:	4b8d      	ldr	r3, [pc, #564]	@ (800768c <menuVariableFinisher+0x2b8>)
 8007458:	2200      	movs	r2, #0
 800745a:	741a      	strb	r2, [r3, #16]
	sekizHataKoduText[16] = '\0';
 800745c:	4b8c      	ldr	r3, [pc, #560]	@ (8007690 <menuVariableFinisher+0x2bc>)
 800745e:	2200      	movs	r2, #0
 8007460:	741a      	strb	r2, [r3, #16]
	dokuzHataKoduText[16] = '\0';
 8007462:	4b8c      	ldr	r3, [pc, #560]	@ (8007694 <menuVariableFinisher+0x2c0>)
 8007464:	2200      	movs	r2, #0
 8007466:	741a      	strb	r2, [r3, #16]
	onHataKoduText[16] = '\0';
 8007468:	4b8b      	ldr	r3, [pc, #556]	@ (8007698 <menuVariableFinisher+0x2c4>)
 800746a:	2200      	movs	r2, #0
 800746c:	741a      	strb	r2, [r3, #16]
	silmekIcinText[16] = '\0';
 800746e:	4b8b      	ldr	r3, [pc, #556]	@ (800769c <menuVariableFinisher+0x2c8>)
 8007470:	2200      	movs	r2, #0
 8007472:	741a      	strb	r2, [r3, #16]
	calismaSekliText[16] = '\0';
 8007474:	4b8a      	ldr	r3, [pc, #552]	@ (80076a0 <menuVariableFinisher+0x2cc>)
 8007476:	2200      	movs	r2, #0
 8007478:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusText[16] = '\0';
 800747a:	4b8a      	ldr	r3, [pc, #552]	@ (80076a4 <menuVariableFinisher+0x2d0>)
 800747c:	2200      	movs	r2, #0
 800747e:	741a      	strb	r2, [r3, #16]
	bastikcaCalisanText[16] = '\0';
 8007480:	4b89      	ldr	r3, [pc, #548]	@ (80076a8 <menuVariableFinisher+0x2d4>)
 8007482:	2200      	movs	r2, #0
 8007484:	741a      	strb	r2, [r3, #16]
	basGonderText[16] = '\0';
 8007486:	4b89      	ldr	r3, [pc, #548]	@ (80076ac <menuVariableFinisher+0x2d8>)
 8007488:	2200      	movs	r2, #0
 800748a:	741a      	strb	r2, [r3, #16]
	emniyetCercevesiText[16] = '\0';
 800748c:	4b88      	ldr	r3, [pc, #544]	@ (80076b0 <menuVariableFinisher+0x2dc>)
 800748e:	2200      	movs	r2, #0
 8007490:	741a      	strb	r2, [r3, #16]
	pasifText[16] = '\0';
 8007492:	4b88      	ldr	r3, [pc, #544]	@ (80076b4 <menuVariableFinisher+0x2e0>)
 8007494:	2200      	movs	r2, #0
 8007496:	741a      	strb	r2, [r3, #16]
	aktifText[16] = '\0';
 8007498:	4b87      	ldr	r3, [pc, #540]	@ (80076b8 <menuVariableFinisher+0x2e4>)
 800749a:	2200      	movs	r2, #0
 800749c:	741a      	strb	r2, [r3, #16]
	yavaslamaLimitText[16] = '\0';
 800749e:	4b87      	ldr	r3, [pc, #540]	@ (80076bc <menuVariableFinisher+0x2e8>)
 80074a0:	2200      	movs	r2, #0
 80074a2:	741a      	strb	r2, [r3, #16]
	altLimitText[16] = '\0';
 80074a4:	4b86      	ldr	r3, [pc, #536]	@ (80076c0 <menuVariableFinisher+0x2ec>)
 80074a6:	2200      	movs	r2, #0
 80074a8:	741a      	strb	r2, [r3, #16]
	basincSalteriText[16] = '\0';
 80074aa:	4b86      	ldr	r3, [pc, #536]	@ (80076c4 <menuVariableFinisher+0x2f0>)
 80074ac:	2200      	movs	r2, #0
 80074ae:	741a      	strb	r2, [r3, #16]
	kapiSecimleriText[16] = '\0';
 80074b0:	4b85      	ldr	r3, [pc, #532]	@ (80076c8 <menuVariableFinisher+0x2f4>)
 80074b2:	2200      	movs	r2, #0
 80074b4:	741a      	strb	r2, [r3, #16]
	katKapisiAktifText[16] = '\0';
 80074b6:	4b85      	ldr	r3, [pc, #532]	@ (80076cc <menuVariableFinisher+0x2f8>)
 80074b8:	2200      	movs	r2, #0
 80074ba:	741a      	strb	r2, [r3, #16]
	tablaKapiAktifText[16] = '\0';
 80074bc:	4b84      	ldr	r3, [pc, #528]	@ (80076d0 <menuVariableFinisher+0x2fc>)
 80074be:	2200      	movs	r2, #0
 80074c0:	741a      	strb	r2, [r3, #16]
	katArtiTablaAktifText[16] = '\0';
 80074c2:	4b84      	ldr	r3, [pc, #528]	@ (80076d4 <menuVariableFinisher+0x300>)
 80074c4:	2200      	movs	r2, #0
 80074c6:	741a      	strb	r2, [r3, #16]
	kapiAcmaTipiText[16] = '\0';
 80074c8:	4b83      	ldr	r3, [pc, #524]	@ (80076d8 <menuVariableFinisher+0x304>)
 80074ca:	2200      	movs	r2, #0
 80074cc:	741a      	strb	r2, [r3, #16]
	kapiButonuESPText[16] = '\0';
 80074ce:	4b83      	ldr	r3, [pc, #524]	@ (80076dc <menuVariableFinisher+0x308>)
 80074d0:	2200      	movs	r2, #0
 80074d2:	741a      	strb	r2, [r3, #16]
	katButonuEXTText[16] = '\0';
 80074d4:	4b82      	ldr	r3, [pc, #520]	@ (80076e0 <menuVariableFinisher+0x30c>)
 80074d6:	2200      	movs	r2, #0
 80074d8:	741a      	strb	r2, [r3, #16]
	birKatKapiTipiText[16] = '\0';
 80074da:	4b82      	ldr	r3, [pc, #520]	@ (80076e4 <menuVariableFinisher+0x310>)
 80074dc:	2200      	movs	r2, #0
 80074de:	741a      	strb	r2, [r3, #16]
	butonKontrolluText[16] = '\0';
 80074e0:	4b81      	ldr	r3, [pc, #516]	@ (80076e8 <menuVariableFinisher+0x314>)
 80074e2:	2200      	movs	r2, #0
 80074e4:	741a      	strb	r2, [r3, #16]
	birinciKapiAcSuresiText[16] = '\0';
 80074e6:	4b81      	ldr	r3, [pc, #516]	@ (80076ec <menuVariableFinisher+0x318>)
 80074e8:	2200      	movs	r2, #0
 80074ea:	741a      	strb	r2, [r3, #16]
	kacSaniyeText[16] = '\0';
 80074ec:	4b80      	ldr	r3, [pc, #512]	@ (80076f0 <menuVariableFinisher+0x31c>)
 80074ee:	2200      	movs	r2, #0
 80074f0:	741a      	strb	r2, [r3, #16]
	ikinciKatKapiTipiText[16] = '\0';
 80074f2:	4b80      	ldr	r3, [pc, #512]	@ (80076f4 <menuVariableFinisher+0x320>)
 80074f4:	2200      	movs	r2, #0
 80074f6:	741a      	strb	r2, [r3, #16]
	ikinciKapiAcSuresiText[16] = '\0';
 80074f8:	4b7f      	ldr	r3, [pc, #508]	@ (80076f8 <menuVariableFinisher+0x324>)
 80074fa:	2200      	movs	r2, #0
 80074fc:	741a      	strb	r2, [r3, #16]
	tablaKapiTipiText[16] = '\0';
 80074fe:	4b7f      	ldr	r3, [pc, #508]	@ (80076fc <menuVariableFinisher+0x328>)
 8007500:	2200      	movs	r2, #0
 8007502:	741a      	strb	r2, [r3, #16]
	tablaKapiAcKonumText[16] = '\0';
 8007504:	4b7e      	ldr	r3, [pc, #504]	@ (8007700 <menuVariableFinisher+0x32c>)
 8007506:	2200      	movs	r2, #0
 8007508:	741a      	strb	r2, [r3, #16]
	birinciKattaAcText[16] = '\0';
 800750a:	4b7e      	ldr	r3, [pc, #504]	@ (8007704 <menuVariableFinisher+0x330>)
 800750c:	2200      	movs	r2, #0
 800750e:	741a      	strb	r2, [r3, #16]
	ikinciKattaAcText[16] = '\0';
 8007510:	4b7d      	ldr	r3, [pc, #500]	@ (8007708 <menuVariableFinisher+0x334>)
 8007512:	2200      	movs	r2, #0
 8007514:	741a      	strb	r2, [r3, #16]
	birVeIkinciKattaAcText[16] = '\0';
 8007516:	4b7d      	ldr	r3, [pc, #500]	@ (800770c <menuVariableFinisher+0x338>)
 8007518:	2200      	movs	r2, #0
 800751a:	741a      	strb	r2, [r3, #16]
	tablaKapiAcSureText[16] = '\0';
 800751c:	4b7c      	ldr	r3, [pc, #496]	@ (8007710 <menuVariableFinisher+0x33c>)
 800751e:	2200      	movs	r2, #0
 8007520:	741a      	strb	r2, [r3, #16]
	yukariYavaslamaLimitiText[16] = '\0';
 8007522:	4b7c      	ldr	r3, [pc, #496]	@ (8007714 <menuVariableFinisher+0x340>)
 8007524:	2200      	movs	r2, #0
 8007526:	741a      	strb	r2, [r3, #16]
	devirmeYuruyusMenuText[16] = '\0';
 8007528:	4b7b      	ldr	r3, [pc, #492]	@ (8007718 <menuVariableFinisher+0x344>)
 800752a:	2200      	movs	r2, #0
 800752c:	741a      	strb	r2, [r3, #16]
	devirmeAktifText[16] = '\0';
 800752e:	4b7b      	ldr	r3, [pc, #492]	@ (800771c <menuVariableFinisher+0x348>)
 8007530:	2200      	movs	r2, #0
 8007532:	741a      	strb	r2, [r3, #16]
	yuruyusAktifText[16] = '\0';
 8007534:	4b7a      	ldr	r3, [pc, #488]	@ (8007720 <menuVariableFinisher+0x34c>)
 8007536:	2200      	movs	r2, #0
 8007538:	741a      	strb	r2, [r3, #16]
	devirmeYukariText[16] = '\0';
 800753a:	4b7a      	ldr	r3, [pc, #488]	@ (8007724 <menuVariableFinisher+0x350>)
 800753c:	2200      	movs	r2, #0
 800753e:	741a      	strb	r2, [r3, #16]
	yuruyusIleriText[16] = '\0';
 8007540:	4b79      	ldr	r3, [pc, #484]	@ (8007728 <menuVariableFinisher+0x354>)
 8007542:	2200      	movs	r2, #0
 8007544:	741a      	strb	r2, [r3, #16]
	devirmeAsagiSivicText[16] = '\0';
 8007546:	4b79      	ldr	r3, [pc, #484]	@ (800772c <menuVariableFinisher+0x358>)
 8007548:	2200      	movs	r2, #0
 800754a:	741a      	strb	r2, [r3, #16]
	yuruyusGeriSivicText[16] = '\0';
 800754c:	4b78      	ldr	r3, [pc, #480]	@ (8007730 <menuVariableFinisher+0x35c>)
 800754e:	2200      	movs	r2, #0
 8007550:	741a      	strb	r2, [r3, #16]
	yuruyusSecildiText[16] = '\0';
 8007552:	4b78      	ldr	r3, [pc, #480]	@ (8007734 <menuVariableFinisher+0x360>)
 8007554:	2200      	movs	r2, #0
 8007556:	741a      	strb	r2, [r3, #16]
	devirmeSilindirTipiText[16] = '\0';
 8007558:	4b77      	ldr	r3, [pc, #476]	@ (8007738 <menuVariableFinisher+0x364>)
 800755a:	2200      	movs	r2, #0
 800755c:	741a      	strb	r2, [r3, #16]
	tekTesirText[16] = '\0';
 800755e:	4b77      	ldr	r3, [pc, #476]	@ (800773c <menuVariableFinisher+0x368>)
 8007560:	2200      	movs	r2, #0
 8007562:	741a      	strb	r2, [r3, #16]
	ciftTesirText[16] = '\0';
 8007564:	4b76      	ldr	r3, [pc, #472]	@ (8007740 <menuVariableFinisher+0x36c>)
 8007566:	2200      	movs	r2, #0
 8007568:	741a      	strb	r2, [r3, #16]
	platformSilindirTipiText[16] = '\0';
 800756a:	4b76      	ldr	r3, [pc, #472]	@ (8007744 <menuVariableFinisher+0x370>)
 800756c:	2200      	movs	r2, #0
 800756e:	741a      	strb	r2, [r3, #16]
	yukariValfSureText[16] = '\0';
 8007570:	4b75      	ldr	r3, [pc, #468]	@ (8007748 <menuVariableFinisher+0x374>)
 8007572:	2200      	movs	r2, #0
 8007574:	741a      	strb	r2, [r3, #16]
	asagiValfSureText[16] = '\0';
 8007576:	4b75      	ldr	r3, [pc, #468]	@ (800774c <menuVariableFinisher+0x378>)
 8007578:	2200      	movs	r2, #0
 800757a:	741a      	strb	r2, [r3, #16]
	devirmeYukariValfSureText[16] = '\0';
 800757c:	4b74      	ldr	r3, [pc, #464]	@ (8007750 <menuVariableFinisher+0x37c>)
 800757e:	2200      	movs	r2, #0
 8007580:	741a      	strb	r2, [r3, #16]
	ileriValfSureText[16] = '\0';
 8007582:	4b74      	ldr	r3, [pc, #464]	@ (8007754 <menuVariableFinisher+0x380>)
 8007584:	2200      	movs	r2, #0
 8007586:	741a      	strb	r2, [r3, #16]
	devirmeAsagiValfSureText[16] = '\0';
 8007588:	4b73      	ldr	r3, [pc, #460]	@ (8007758 <menuVariableFinisher+0x384>)
 800758a:	2200      	movs	r2, #0
 800758c:	741a      	strb	r2, [r3, #16]
	geriValfSureText[16] = '\0';
 800758e:	4b73      	ldr	r3, [pc, #460]	@ (800775c <menuVariableFinisher+0x388>)
 8007590:	2200      	movs	r2, #0
 8007592:	741a      	strb	r2, [r3, #16]
	calismaSuresiText[16] = '\0';
 8007594:	4b72      	ldr	r3, [pc, #456]	@ (8007760 <menuVariableFinisher+0x38c>)
 8007596:	2200      	movs	r2, #0
 8007598:	741a      	strb	r2, [r3, #16]
	calismaSayisiText[16] = '\0';
 800759a:	4b72      	ldr	r3, [pc, #456]	@ (8007764 <menuVariableFinisher+0x390>)
 800759c:	2200      	movs	r2, #0
 800759e:	741a      	strb	r2, [r3, #16]
	enterlaSifirlaText[16] = '\0';
 80075a0:	4b71      	ldr	r3, [pc, #452]	@ (8007768 <menuVariableFinisher+0x394>)
 80075a2:	2200      	movs	r2, #0
 80075a4:	741a      	strb	r2, [r3, #16]
	dilSecimText[16] = '\0';
 80075a6:	4b71      	ldr	r3, [pc, #452]	@ (800776c <menuVariableFinisher+0x398>)
 80075a8:	2200      	movs	r2, #0
 80075aa:	741a      	strb	r2, [r3, #16]
	secilenDilText[16] = '\0';
 80075ac:	4b70      	ldr	r3, [pc, #448]	@ (8007770 <menuVariableFinisher+0x39c>)
 80075ae:	2200      	movs	r2, #0
 80075b0:	741a      	strb	r2, [r3, #16]
	menudenCikisText[16] = '\0';
 80075b2:	4b70      	ldr	r3, [pc, #448]	@ (8007774 <menuVariableFinisher+0x3a0>)
 80075b4:	2200      	movs	r2, #0
 80075b6:	741a      	strb	r2, [r3, #16]
	enteraBasinizText[16] = '\0';
 80075b8:	4b6f      	ldr	r3, [pc, #444]	@ (8007778 <menuVariableFinisher+0x3a4>)
 80075ba:	2200      	movs	r2, #0
 80075bc:	741a      	strb	r2, [r3, #16]
	hataKoduText[16] = '\0';
 80075be:	4b6f      	ldr	r3, [pc, #444]	@ (800777c <menuVariableFinisher+0x3a8>)
 80075c0:	2200      	movs	r2, #0
 80075c2:	741a      	strb	r2, [r3, #16]

	//IoT Messages:
	dataSynchText[16] = '\0';
 80075c4:	4b6e      	ldr	r3, [pc, #440]	@ (8007780 <menuVariableFinisher+0x3ac>)
 80075c6:	2200      	movs	r2, #0
 80075c8:	741a      	strb	r2, [r3, #16]
	dataSynch2Text[16] = '\0';
 80075ca:	4b6e      	ldr	r3, [pc, #440]	@ (8007784 <menuVariableFinisher+0x3b0>)
 80075cc:	2200      	movs	r2, #0
 80075ce:	741a      	strb	r2, [r3, #16]
	mustBeUniqueText[16] = '\0';
 80075d0:	4b6d      	ldr	r3, [pc, #436]	@ (8007788 <menuVariableFinisher+0x3b4>)
 80075d2:	2200      	movs	r2, #0
 80075d4:	741a      	strb	r2, [r3, #16]
	mustBeUnique2Text[16] = '\0';
 80075d6:	4b6d      	ldr	r3, [pc, #436]	@ (800778c <menuVariableFinisher+0x3b8>)
 80075d8:	2200      	movs	r2, #0
 80075da:	741a      	strb	r2, [r3, #16]
	mustBe12Text[16] = '\0';
 80075dc:	4b6c      	ldr	r3, [pc, #432]	@ (8007790 <menuVariableFinisher+0x3bc>)
 80075de:	2200      	movs	r2, #0
 80075e0:	741a      	strb	r2, [r3, #16]
	mustBe122Text[16] = '\0';
 80075e2:	4b6c      	ldr	r3, [pc, #432]	@ (8007794 <menuVariableFinisher+0x3c0>)
 80075e4:	2200      	movs	r2, #0
 80075e6:	741a      	strb	r2, [r3, #16]
	ssidExceedErrorText[16] = '\0';
 80075e8:	4b6b      	ldr	r3, [pc, #428]	@ (8007798 <menuVariableFinisher+0x3c4>)
 80075ea:	2200      	movs	r2, #0
 80075ec:	741a      	strb	r2, [r3, #16]
	ssidExceedError2Text[16] = '\0';
 80075ee:	4b6b      	ldr	r3, [pc, #428]	@ (800779c <menuVariableFinisher+0x3c8>)
 80075f0:	2200      	movs	r2, #0
 80075f2:	741a      	strb	r2, [r3, #16]
	passExceedErrorText[16] = '\0';
 80075f4:	4b6a      	ldr	r3, [pc, #424]	@ (80077a0 <menuVariableFinisher+0x3cc>)
 80075f6:	2200      	movs	r2, #0
 80075f8:	741a      	strb	r2, [r3, #16]
	passExceedError2Text[16] = '\0';
 80075fa:	4b6a      	ldr	r3, [pc, #424]	@ (80077a4 <menuVariableFinisher+0x3d0>)
 80075fc:	2200      	movs	r2, #0
 80075fe:	741a      	strb	r2, [r3, #16]

	//Eeprom Messages:
	dataYazildiText[16] = '\0';
 8007600:	4b69      	ldr	r3, [pc, #420]	@ (80077a8 <menuVariableFinisher+0x3d4>)
 8007602:	2200      	movs	r2, #0
 8007604:	741a      	strb	r2, [r3, #16]
	dataOkunuyorText[16] = '\0';
 8007606:	4b69      	ldr	r3, [pc, #420]	@ (80077ac <menuVariableFinisher+0x3d8>)
 8007608:	2200      	movs	r2, #0
 800760a:	741a      	strb	r2, [r3, #16]
	dataOkunduText[16] = '\0';
 800760c:	4b68      	ldr	r3, [pc, #416]	@ (80077b0 <menuVariableFinisher+0x3dc>)
 800760e:	2200      	movs	r2, #0
 8007610:	741a      	strb	r2, [r3, #16]
	degerKaydedildiText[16] = '\0';
 8007612:	4b68      	ldr	r3, [pc, #416]	@ (80077b4 <menuVariableFinisher+0x3e0>)
 8007614:	2200      	movs	r2, #0
 8007616:	741a      	strb	r2, [r3, #16]

	//Error Code Messages:
	errorCodeText[16] = '\0';
 8007618:	4b67      	ldr	r3, [pc, #412]	@ (80077b8 <menuVariableFinisher+0x3e4>)
 800761a:	2200      	movs	r2, #0
 800761c:	741a      	strb	r2, [r3, #16]

	//Hardware texts:
	machineIDText[16] = '\0';
 800761e:	4b67      	ldr	r3, [pc, #412]	@ (80077bc <menuVariableFinisher+0x3e8>)
 8007620:	2200      	movs	r2, #0
 8007622:	741a      	strb	r2, [r3, #16]

	//Confirmation Texts:
	idConfirmationText[16] = '\0';
 8007624:	4b66      	ldr	r3, [pc, #408]	@ (80077c0 <menuVariableFinisher+0x3ec>)
 8007626:	2200      	movs	r2, #0
 8007628:	741a      	strb	r2, [r3, #16]
	idConfirmationSubText[16] = '\0';
 800762a:	4b66      	ldr	r3, [pc, #408]	@ (80077c4 <menuVariableFinisher+0x3f0>)
 800762c:	2200      	movs	r2, #0
 800762e:	741a      	strb	r2, [r3, #16]
}
 8007630:	bf00      	nop
 8007632:	46bd      	mov	sp, r7
 8007634:	bc80      	pop	{r7}
 8007636:	4770      	bx	lr
 8007638:	200000a0 	.word	0x200000a0
 800763c:	200000b4 	.word	0x200000b4
 8007640:	200000c8 	.word	0x200000c8
 8007644:	200000dc 	.word	0x200000dc
 8007648:	200000f0 	.word	0x200000f0
 800764c:	20000104 	.word	0x20000104
 8007650:	20000118 	.word	0x20000118
 8007654:	2000012c 	.word	0x2000012c
 8007658:	20000140 	.word	0x20000140
 800765c:	20000154 	.word	0x20000154
 8007660:	20000168 	.word	0x20000168
 8007664:	2000017c 	.word	0x2000017c
 8007668:	20001200 	.word	0x20001200
 800766c:	20001214 	.word	0x20001214
 8007670:	20001228 	.word	0x20001228
 8007674:	2000123c 	.word	0x2000123c
 8007678:	20001250 	.word	0x20001250
 800767c:	20001264 	.word	0x20001264
 8007680:	20001278 	.word	0x20001278
 8007684:	2000128c 	.word	0x2000128c
 8007688:	200012a0 	.word	0x200012a0
 800768c:	200012b4 	.word	0x200012b4
 8007690:	200012c8 	.word	0x200012c8
 8007694:	200012dc 	.word	0x200012dc
 8007698:	200012f0 	.word	0x200012f0
 800769c:	20001304 	.word	0x20001304
 80076a0:	20001318 	.word	0x20001318
 80076a4:	2000132c 	.word	0x2000132c
 80076a8:	20001340 	.word	0x20001340
 80076ac:	20001354 	.word	0x20001354
 80076b0:	20001368 	.word	0x20001368
 80076b4:	2000137c 	.word	0x2000137c
 80076b8:	20001390 	.word	0x20001390
 80076bc:	200013a4 	.word	0x200013a4
 80076c0:	200013b8 	.word	0x200013b8
 80076c4:	200013cc 	.word	0x200013cc
 80076c8:	200013e0 	.word	0x200013e0
 80076cc:	200013f4 	.word	0x200013f4
 80076d0:	20001408 	.word	0x20001408
 80076d4:	2000141c 	.word	0x2000141c
 80076d8:	20001430 	.word	0x20001430
 80076dc:	20001444 	.word	0x20001444
 80076e0:	20001458 	.word	0x20001458
 80076e4:	2000146c 	.word	0x2000146c
 80076e8:	20001480 	.word	0x20001480
 80076ec:	20001494 	.word	0x20001494
 80076f0:	200014a8 	.word	0x200014a8
 80076f4:	200014bc 	.word	0x200014bc
 80076f8:	200014d0 	.word	0x200014d0
 80076fc:	200014e4 	.word	0x200014e4
 8007700:	200014f8 	.word	0x200014f8
 8007704:	2000150c 	.word	0x2000150c
 8007708:	20001520 	.word	0x20001520
 800770c:	20001534 	.word	0x20001534
 8007710:	20001548 	.word	0x20001548
 8007714:	2000155c 	.word	0x2000155c
 8007718:	20001570 	.word	0x20001570
 800771c:	20001584 	.word	0x20001584
 8007720:	20001598 	.word	0x20001598
 8007724:	200015ac 	.word	0x200015ac
 8007728:	200015c0 	.word	0x200015c0
 800772c:	200015d4 	.word	0x200015d4
 8007730:	200015e8 	.word	0x200015e8
 8007734:	200015fc 	.word	0x200015fc
 8007738:	20001610 	.word	0x20001610
 800773c:	20001624 	.word	0x20001624
 8007740:	20001638 	.word	0x20001638
 8007744:	2000164c 	.word	0x2000164c
 8007748:	20001660 	.word	0x20001660
 800774c:	20001674 	.word	0x20001674
 8007750:	20001688 	.word	0x20001688
 8007754:	2000169c 	.word	0x2000169c
 8007758:	200016b0 	.word	0x200016b0
 800775c:	200016c4 	.word	0x200016c4
 8007760:	200016d8 	.word	0x200016d8
 8007764:	200016ec 	.word	0x200016ec
 8007768:	20001700 	.word	0x20001700
 800776c:	20001714 	.word	0x20001714
 8007770:	20001728 	.word	0x20001728
 8007774:	2000173c 	.word	0x2000173c
 8007778:	20001750 	.word	0x20001750
 800777c:	20001764 	.word	0x20001764
 8007780:	20001778 	.word	0x20001778
 8007784:	2000178c 	.word	0x2000178c
 8007788:	200017a0 	.word	0x200017a0
 800778c:	200017b4 	.word	0x200017b4
 8007790:	200017c8 	.word	0x200017c8
 8007794:	200017dc 	.word	0x200017dc
 8007798:	200017f0 	.word	0x200017f0
 800779c:	20001804 	.word	0x20001804
 80077a0:	20001818 	.word	0x20001818
 80077a4:	2000182c 	.word	0x2000182c
 80077a8:	20001840 	.word	0x20001840
 80077ac:	20001854 	.word	0x20001854
 80077b0:	20001868 	.word	0x20001868
 80077b4:	2000187c 	.word	0x2000187c
 80077b8:	20001890 	.word	0x20001890
 80077bc:	200018a4 	.word	0x200018a4
 80077c0:	200018b8 	.word	0x200018b8
 80077c4:	200018cc 	.word	0x200018cc

080077c8 <takeMachineIDWithConfirmation>:
#include "IoTMenu.h"
#include "EEPROMProcess.h"
#include "TextVariables.h"


void takeMachineIDWithConfirmation() {
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b082      	sub	sp, #8
 80077cc:	af00      	add	r7, sp, #0
	HAL_Delay(500);
 80077ce:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80077d2:	f001 fd5b 	bl	800928c <HAL_Delay>
	int confirmationVal = 0;
 80077d6:	2300      	movs	r3, #0
 80077d8:	607b      	str	r3, [r7, #4]
	while(confirmationVal == 0) {
 80077da:	e012      	b.n	8007802 <takeMachineIDWithConfirmation+0x3a>
		lcd_print(1, 1, idConfirmationText);
 80077dc:	4a12      	ldr	r2, [pc, #72]	@ (8007828 <takeMachineIDWithConfirmation+0x60>)
 80077de:	2101      	movs	r1, #1
 80077e0:	2001      	movs	r0, #1
 80077e2:	f000 fff9 	bl	80087d8 <lcd_print>
		lcd_print(2, 1, idConfirmationSubText);
 80077e6:	4a11      	ldr	r2, [pc, #68]	@ (800782c <takeMachineIDWithConfirmation+0x64>)
 80077e8:	2101      	movs	r1, #1
 80077ea:	2002      	movs	r0, #2
 80077ec:	f000 fff4 	bl	80087d8 <lcd_print>

		if((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin)) == 1) {
 80077f0:	2102      	movs	r1, #2
 80077f2:	480f      	ldr	r0, [pc, #60]	@ (8007830 <takeMachineIDWithConfirmation+0x68>)
 80077f4:	f002 fb1a 	bl	8009e2c <HAL_GPIO_ReadPin>
 80077f8:	4603      	mov	r3, r0
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d101      	bne.n	8007802 <takeMachineIDWithConfirmation+0x3a>
			confirmationVal = 1;
 80077fe:	2301      	movs	r3, #1
 8007800:	607b      	str	r3, [r7, #4]
	while(confirmationVal == 0) {
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2b00      	cmp	r3, #0
 8007806:	d0e9      	beq.n	80077dc <takeMachineIDWithConfirmation+0x14>
		}
	}

	takeMachineID();
 8007808:	f000 f814 	bl	8007834 <takeMachineID>

	convertArrays(1);
 800780c:	2001      	movs	r0, #1
 800780e:	f7f8 ff97 	bl	8000740 <convertArrays>
	HAL_Delay(50);
 8007812:	2032      	movs	r0, #50	@ 0x32
 8007814:	f001 fd3a 	bl	800928c <HAL_Delay>

	printCredentials(1); //Ekrana makine id'si yazdır.
 8007818:	2001      	movs	r0, #1
 800781a:	f7f9 fc99 	bl	8001150 <printCredentials>
}
 800781e:	bf00      	nop
 8007820:	3708      	adds	r7, #8
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
 8007826:	bf00      	nop
 8007828:	200018b8 	.word	0x200018b8
 800782c:	200018cc 	.word	0x200018cc
 8007830:	40010800 	.word	0x40010800

08007834 <takeMachineID>:

void takeMachineID() {
 8007834:	b580      	push	{r7, lr}
 8007836:	b088      	sub	sp, #32
 8007838:	af04      	add	r7, sp, #16
	mainSection:

	lcd_cursor(1);
 800783a:	2001      	movs	r0, #1
 800783c:	f001 f82a 	bl	8008894 <lcd_cursor>
    memset(machineID, 0, machineIDCharacterLimit*sizeof(*machineID));
 8007840:	220c      	movs	r2, #12
 8007842:	2100      	movs	r1, #0
 8007844:	48a2      	ldr	r0, [pc, #648]	@ (8007ad0 <takeMachineID+0x29c>)
 8007846:	f005 fc59 	bl	800d0fc <memset>

	int writeLoc = 5; //kullanıcının seçtiği karkaterin yazılırken başlayacağı karakter değişkeni
 800784a:	2305      	movs	r3, #5
 800784c:	60fb      	str	r3, [r7, #12]

    int cursorPosition = 3; //kullanıcının seçim yaptığı işaretçinin konumu
 800784e:	2303      	movs	r3, #3
 8007850:	60bb      	str	r3, [r7, #8]
    int arrayPos = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak olan değişken
 8007852:	2300      	movs	r3, #0
 8007854:	607b      	str	r3, [r7, #4]
    int eepromVal = idStartPos; //kullanıcının seçtiği karakteri eeproma aktarmak için kullanılacak olan değişken
 8007856:	4b9f      	ldr	r3, [pc, #636]	@ (8007ad4 <takeMachineID+0x2a0>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	603b      	str	r3, [r7, #0]

    printTemplate(1, 0);
 800785c:	2100      	movs	r1, #0
 800785e:	2001      	movs	r0, #1
 8007860:	f7f9 fa42 	bl	8000ce8 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007864:	2108      	movs	r1, #8
 8007866:	489c      	ldr	r0, [pc, #624]	@ (8007ad8 <takeMachineID+0x2a4>)
 8007868:	f002 fae0 	bl	8009e2c <HAL_GPIO_ReadPin>
 800786c:	4603      	mov	r3, r0
 800786e:	2b01      	cmp	r3, #1
 8007870:	d128      	bne.n	80078c4 <takeMachineID+0x90>
        	lcd_cursor(0);
 8007872:	2000      	movs	r0, #0
 8007874:	f001 f80e 	bl	8008894 <lcd_cursor>

        	if(checkEEPROM4ID() != 1) {
 8007878:	f000 fdf0 	bl	800845c <checkEEPROM4ID>
 800787c:	4603      	mov	r3, r0
 800787e:	2b01      	cmp	r3, #1
 8007880:	d00e      	beq.n	80078a0 <takeMachineID+0x6c>
        		lcd_print(1, 1, mustBe12Text);
 8007882:	4a96      	ldr	r2, [pc, #600]	@ (8007adc <takeMachineID+0x2a8>)
 8007884:	2101      	movs	r1, #1
 8007886:	2001      	movs	r0, #1
 8007888:	f000 ffa6 	bl	80087d8 <lcd_print>
        		lcd_print(2, 1, mustBe122Text);
 800788c:	4a94      	ldr	r2, [pc, #592]	@ (8007ae0 <takeMachineID+0x2ac>)
 800788e:	2101      	movs	r1, #1
 8007890:	2002      	movs	r0, #2
 8007892:	f000 ffa1 	bl	80087d8 <lcd_print>
        		HAL_Delay(1250);
 8007896:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 800789a:	f001 fcf7 	bl	800928c <HAL_Delay>

        		goto mainSection;
 800789e:	e7cc      	b.n	800783a <takeMachineID+0x6>
        	} else {
            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80078a0:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80078a4:	9302      	str	r3, [sp, #8]
 80078a6:	236e      	movs	r3, #110	@ 0x6e
 80078a8:	9301      	str	r3, [sp, #4]
 80078aa:	4b8e      	ldr	r3, [pc, #568]	@ (8007ae4 <takeMachineID+0x2b0>)
 80078ac:	9300      	str	r3, [sp, #0]
 80078ae:	236e      	movs	r3, #110	@ 0x6e
 80078b0:	2200      	movs	r2, #0
 80078b2:	21a0      	movs	r1, #160	@ 0xa0
 80078b4:	488c      	ldr	r0, [pc, #560]	@ (8007ae8 <takeMachineID+0x2b4>)
 80078b6:	f002 fd73 	bl	800a3a0 <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 80078ba:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80078be:	f001 fce5 	bl	800928c <HAL_Delay>

            	break;
 80078c2:	e132      	b.n	8007b2a <takeMachineID+0x2f6>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80078c4:	2101      	movs	r1, #1
 80078c6:	4884      	ldr	r0, [pc, #528]	@ (8007ad8 <takeMachineID+0x2a4>)
 80078c8:	f002 fab0 	bl	8009e2c <HAL_GPIO_ReadPin>
 80078cc:	4603      	mov	r3, r0
 80078ce:	2b01      	cmp	r3, #1
 80078d0:	d111      	bne.n	80078f6 <takeMachineID+0xc2>
        	if(cursorPosition == 7) {
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	2b07      	cmp	r3, #7
 80078d6:	d102      	bne.n	80078de <takeMachineID+0xaa>
        		cursorPosition = 10;
 80078d8:	230a      	movs	r3, #10
 80078da:	60bb      	str	r3, [r7, #8]
 80078dc:	e008      	b.n	80078f0 <takeMachineID+0xbc>
        	} else if (cursorPosition == 14) {
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	2b0e      	cmp	r3, #14
 80078e2:	d102      	bne.n	80078ea <takeMachineID+0xb6>
                cursorPosition = 3;
 80078e4:	2303      	movs	r3, #3
 80078e6:	60bb      	str	r3, [r7, #8]
 80078e8:	e002      	b.n	80078f0 <takeMachineID+0xbc>
            } else {
            	cursorPosition++;
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	3301      	adds	r3, #1
 80078ee:	60bb      	str	r3, [r7, #8]
            }

        	HAL_Delay(150);
 80078f0:	2096      	movs	r0, #150	@ 0x96
 80078f2:	f001 fccb 	bl	800928c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80078f6:	2108      	movs	r1, #8
 80078f8:	487c      	ldr	r0, [pc, #496]	@ (8007aec <takeMachineID+0x2b8>)
 80078fa:	f002 fa97 	bl	8009e2c <HAL_GPIO_ReadPin>
 80078fe:	4603      	mov	r3, r0
 8007900:	2b01      	cmp	r3, #1
 8007902:	d111      	bne.n	8007928 <takeMachineID+0xf4>
            if (cursorPosition == 3) {
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	2b03      	cmp	r3, #3
 8007908:	d102      	bne.n	8007910 <takeMachineID+0xdc>
                cursorPosition = 14;
 800790a:	230e      	movs	r3, #14
 800790c:	60bb      	str	r3, [r7, #8]
 800790e:	e008      	b.n	8007922 <takeMachineID+0xee>
            } else if(cursorPosition == 10) {
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	2b0a      	cmp	r3, #10
 8007914:	d102      	bne.n	800791c <takeMachineID+0xe8>
            	cursorPosition = 7;
 8007916:	2307      	movs	r3, #7
 8007918:	60bb      	str	r3, [r7, #8]
 800791a:	e002      	b.n	8007922 <takeMachineID+0xee>
            } else {
            	cursorPosition--;
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	3b01      	subs	r3, #1
 8007920:	60bb      	str	r3, [r7, #8]
            }

            HAL_Delay(250);
 8007922:	20fa      	movs	r0, #250	@ 0xfa
 8007924:	f001 fcb2 	bl	800928c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007928:	2102      	movs	r1, #2
 800792a:	486b      	ldr	r0, [pc, #428]	@ (8007ad8 <takeMachineID+0x2a4>)
 800792c:	f002 fa7e 	bl	8009e2c <HAL_GPIO_ReadPin>
 8007930:	4603      	mov	r3, r0
 8007932:	2b01      	cmp	r3, #1
 8007934:	f040 80a1 	bne.w	8007a7a <takeMachineID+0x246>
        	if(cursorPosition == 3) {
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	2b03      	cmp	r3, #3
 800793c:	d10a      	bne.n	8007954 <takeMachineID+0x120>
        		machineID[arrayPos] = '0';
 800793e:	4a64      	ldr	r2, [pc, #400]	@ (8007ad0 <takeMachineID+0x29c>)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	4413      	add	r3, r2
 8007944:	2230      	movs	r2, #48	@ 0x30
 8007946:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 0;
 8007948:	4a66      	ldr	r2, [pc, #408]	@ (8007ae4 <takeMachineID+0x2b0>)
 800794a:	683b      	ldr	r3, [r7, #0]
 800794c:	4413      	add	r3, r2
 800794e:	2200      	movs	r2, #0
 8007950:	701a      	strb	r2, [r3, #0]
 8007952:	e07c      	b.n	8007a4e <takeMachineID+0x21a>
        	} else if(cursorPosition == 4) {
 8007954:	68bb      	ldr	r3, [r7, #8]
 8007956:	2b04      	cmp	r3, #4
 8007958:	d10a      	bne.n	8007970 <takeMachineID+0x13c>
        		machineID[arrayPos] = '1';
 800795a:	4a5d      	ldr	r2, [pc, #372]	@ (8007ad0 <takeMachineID+0x29c>)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	4413      	add	r3, r2
 8007960:	2231      	movs	r2, #49	@ 0x31
 8007962:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 1;
 8007964:	4a5f      	ldr	r2, [pc, #380]	@ (8007ae4 <takeMachineID+0x2b0>)
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	4413      	add	r3, r2
 800796a:	2201      	movs	r2, #1
 800796c:	701a      	strb	r2, [r3, #0]
 800796e:	e06e      	b.n	8007a4e <takeMachineID+0x21a>
        	} else if(cursorPosition == 5) {
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	2b05      	cmp	r3, #5
 8007974:	d10a      	bne.n	800798c <takeMachineID+0x158>
        		machineID[arrayPos] = '2';
 8007976:	4a56      	ldr	r2, [pc, #344]	@ (8007ad0 <takeMachineID+0x29c>)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	4413      	add	r3, r2
 800797c:	2232      	movs	r2, #50	@ 0x32
 800797e:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 2;
 8007980:	4a58      	ldr	r2, [pc, #352]	@ (8007ae4 <takeMachineID+0x2b0>)
 8007982:	683b      	ldr	r3, [r7, #0]
 8007984:	4413      	add	r3, r2
 8007986:	2202      	movs	r2, #2
 8007988:	701a      	strb	r2, [r3, #0]
 800798a:	e060      	b.n	8007a4e <takeMachineID+0x21a>
        	} else if(cursorPosition == 6) {
 800798c:	68bb      	ldr	r3, [r7, #8]
 800798e:	2b06      	cmp	r3, #6
 8007990:	d10a      	bne.n	80079a8 <takeMachineID+0x174>
        		machineID[arrayPos] = '3';
 8007992:	4a4f      	ldr	r2, [pc, #316]	@ (8007ad0 <takeMachineID+0x29c>)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	4413      	add	r3, r2
 8007998:	2233      	movs	r2, #51	@ 0x33
 800799a:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 3;
 800799c:	4a51      	ldr	r2, [pc, #324]	@ (8007ae4 <takeMachineID+0x2b0>)
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	4413      	add	r3, r2
 80079a2:	2203      	movs	r2, #3
 80079a4:	701a      	strb	r2, [r3, #0]
 80079a6:	e052      	b.n	8007a4e <takeMachineID+0x21a>
        	} else if(cursorPosition == 7) {
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	2b07      	cmp	r3, #7
 80079ac:	d10a      	bne.n	80079c4 <takeMachineID+0x190>
        		machineID[arrayPos] = '4';
 80079ae:	4a48      	ldr	r2, [pc, #288]	@ (8007ad0 <takeMachineID+0x29c>)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	4413      	add	r3, r2
 80079b4:	2234      	movs	r2, #52	@ 0x34
 80079b6:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 4;
 80079b8:	4a4a      	ldr	r2, [pc, #296]	@ (8007ae4 <takeMachineID+0x2b0>)
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	4413      	add	r3, r2
 80079be:	2204      	movs	r2, #4
 80079c0:	701a      	strb	r2, [r3, #0]
 80079c2:	e044      	b.n	8007a4e <takeMachineID+0x21a>
        	} else if(cursorPosition == 10) {
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	2b0a      	cmp	r3, #10
 80079c8:	d10a      	bne.n	80079e0 <takeMachineID+0x1ac>
        		machineID[arrayPos] = '5';
 80079ca:	4a41      	ldr	r2, [pc, #260]	@ (8007ad0 <takeMachineID+0x29c>)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	4413      	add	r3, r2
 80079d0:	2235      	movs	r2, #53	@ 0x35
 80079d2:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 5;
 80079d4:	4a43      	ldr	r2, [pc, #268]	@ (8007ae4 <takeMachineID+0x2b0>)
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	4413      	add	r3, r2
 80079da:	2205      	movs	r2, #5
 80079dc:	701a      	strb	r2, [r3, #0]
 80079de:	e036      	b.n	8007a4e <takeMachineID+0x21a>
        	} else if(cursorPosition == 11) {
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	2b0b      	cmp	r3, #11
 80079e4:	d10a      	bne.n	80079fc <takeMachineID+0x1c8>
        		machineID[arrayPos] = '6';
 80079e6:	4a3a      	ldr	r2, [pc, #232]	@ (8007ad0 <takeMachineID+0x29c>)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	4413      	add	r3, r2
 80079ec:	2236      	movs	r2, #54	@ 0x36
 80079ee:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 6;
 80079f0:	4a3c      	ldr	r2, [pc, #240]	@ (8007ae4 <takeMachineID+0x2b0>)
 80079f2:	683b      	ldr	r3, [r7, #0]
 80079f4:	4413      	add	r3, r2
 80079f6:	2206      	movs	r2, #6
 80079f8:	701a      	strb	r2, [r3, #0]
 80079fa:	e028      	b.n	8007a4e <takeMachineID+0x21a>
        	} else if(cursorPosition == 12) {
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	2b0c      	cmp	r3, #12
 8007a00:	d10a      	bne.n	8007a18 <takeMachineID+0x1e4>
        		machineID[arrayPos] = '7';
 8007a02:	4a33      	ldr	r2, [pc, #204]	@ (8007ad0 <takeMachineID+0x29c>)
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	4413      	add	r3, r2
 8007a08:	2237      	movs	r2, #55	@ 0x37
 8007a0a:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 7;
 8007a0c:	4a35      	ldr	r2, [pc, #212]	@ (8007ae4 <takeMachineID+0x2b0>)
 8007a0e:	683b      	ldr	r3, [r7, #0]
 8007a10:	4413      	add	r3, r2
 8007a12:	2207      	movs	r2, #7
 8007a14:	701a      	strb	r2, [r3, #0]
 8007a16:	e01a      	b.n	8007a4e <takeMachineID+0x21a>
        	} else if(cursorPosition == 13) {
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	2b0d      	cmp	r3, #13
 8007a1c:	d10a      	bne.n	8007a34 <takeMachineID+0x200>
        		machineID[arrayPos] = '8';
 8007a1e:	4a2c      	ldr	r2, [pc, #176]	@ (8007ad0 <takeMachineID+0x29c>)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	4413      	add	r3, r2
 8007a24:	2238      	movs	r2, #56	@ 0x38
 8007a26:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 8;
 8007a28:	4a2e      	ldr	r2, [pc, #184]	@ (8007ae4 <takeMachineID+0x2b0>)
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	4413      	add	r3, r2
 8007a2e:	2208      	movs	r2, #8
 8007a30:	701a      	strb	r2, [r3, #0]
 8007a32:	e00c      	b.n	8007a4e <takeMachineID+0x21a>
        	} else if(cursorPosition == 14) {
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	2b0e      	cmp	r3, #14
 8007a38:	d109      	bne.n	8007a4e <takeMachineID+0x21a>
        		machineID[arrayPos] = '9';
 8007a3a:	4a25      	ldr	r2, [pc, #148]	@ (8007ad0 <takeMachineID+0x29c>)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	4413      	add	r3, r2
 8007a40:	2239      	movs	r2, #57	@ 0x39
 8007a42:	701a      	strb	r2, [r3, #0]
        		eepromData[eepromVal] = 9;
 8007a44:	4a27      	ldr	r2, [pc, #156]	@ (8007ae4 <takeMachineID+0x2b0>)
 8007a46:	683b      	ldr	r3, [r7, #0]
 8007a48:	4413      	add	r3, r2
 8007a4a:	2209      	movs	r2, #9
 8007a4c:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[arrayPos]);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	b2d9      	uxtb	r1, r3
 8007a52:	4a1f      	ldr	r2, [pc, #124]	@ (8007ad0 <takeMachineID+0x29c>)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	4413      	add	r3, r2
 8007a58:	781b      	ldrb	r3, [r3, #0]
 8007a5a:	461a      	mov	r2, r3
 8007a5c:	2001      	movs	r0, #1
 8007a5e:	f000 fed0 	bl	8008802 <lcd_print_char>

        	writeLoc++;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	3301      	adds	r3, #1
 8007a66:	60fb      	str	r3, [r7, #12]
        	arrayPos++;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	607b      	str	r3, [r7, #4]
        	eepromVal++;
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	3301      	adds	r3, #1
 8007a72:	603b      	str	r3, [r7, #0]

        	HAL_Delay(150);
 8007a74:	2096      	movs	r0, #150	@ 0x96
 8007a76:	f001 fc09 	bl	800928c <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8007a7a:	2104      	movs	r1, #4
 8007a7c:	4816      	ldr	r0, [pc, #88]	@ (8007ad8 <takeMachineID+0x2a4>)
 8007a7e:	f002 f9d5 	bl	8009e2c <HAL_GPIO_ReadPin>
 8007a82:	4603      	mov	r3, r0
 8007a84:	2b01      	cmp	r3, #1
 8007a86:	d149      	bne.n	8007b1c <takeMachineID+0x2e8>
            if(strlen(machineID) >= 1) {
 8007a88:	4b11      	ldr	r3, [pc, #68]	@ (8007ad0 <takeMachineID+0x29c>)
 8007a8a:	781b      	ldrb	r3, [r3, #0]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d042      	beq.n	8007b16 <takeMachineID+0x2e2>
                machineID[arrayPos] = '\0';
 8007a90:	4a0f      	ldr	r2, [pc, #60]	@ (8007ad0 <takeMachineID+0x29c>)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	4413      	add	r3, r2
 8007a96:	2200      	movs	r2, #0
 8007a98:	701a      	strb	r2, [r3, #0]
                eepromData[eepromVal] = '\0';
 8007a9a:	4a12      	ldr	r2, [pc, #72]	@ (8007ae4 <takeMachineID+0x2b0>)
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	4413      	add	r3, r2
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	701a      	strb	r2, [r3, #0]

                if(writeLoc > 5) {
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2b05      	cmp	r3, #5
 8007aa8:	dd03      	ble.n	8007ab2 <takeMachineID+0x27e>
                	writeLoc--;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	3b01      	subs	r3, #1
 8007aae:	60fb      	str	r3, [r7, #12]
 8007ab0:	e004      	b.n	8007abc <takeMachineID+0x288>
                } else if(writeLoc < 5) {
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	2b04      	cmp	r3, #4
 8007ab6:	dc01      	bgt.n	8007abc <takeMachineID+0x288>
                	writeLoc = 5;
 8007ab8:	2305      	movs	r3, #5
 8007aba:	60fb      	str	r3, [r7, #12]
                }

                if(arrayPos > 0) {
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	dd16      	ble.n	8007af0 <takeMachineID+0x2bc>
                	arrayPos--;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	3b01      	subs	r3, #1
 8007ac6:	607b      	str	r3, [r7, #4]
                	eepromVal--;
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	3b01      	subs	r3, #1
 8007acc:	603b      	str	r3, [r7, #0]
 8007ace:	e017      	b.n	8007b00 <takeMachineID+0x2cc>
 8007ad0:	20001040 	.word	0x20001040
 8007ad4:	20000004 	.word	0x20000004
 8007ad8:	40010800 	.word	0x40010800
 8007adc:	200017c8 	.word	0x200017c8
 8007ae0:	200017dc 	.word	0x200017dc
 8007ae4:	20000fc8 	.word	0x20000fc8
 8007ae8:	20001908 	.word	0x20001908
 8007aec:	40011000 	.word	0x40011000
                } else if(arrayPos < 0) {
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	da04      	bge.n	8007b00 <takeMachineID+0x2cc>
                	arrayPos = 0;
 8007af6:	2300      	movs	r3, #0
 8007af8:	607b      	str	r3, [r7, #4]
                	eepromVal = idStartPos;
 8007afa:	4b0e      	ldr	r3, [pc, #56]	@ (8007b34 <takeMachineID+0x300>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	603b      	str	r3, [r7, #0]
                }

                lcd_delete_char(1, 4+arrayPos+1);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	b2db      	uxtb	r3, r3
 8007b04:	3305      	adds	r3, #5
 8007b06:	b2db      	uxtb	r3, r3
 8007b08:	4619      	mov	r1, r3
 8007b0a:	2001      	movs	r0, #1
 8007b0c:	f000 fe9a 	bl	8008844 <lcd_delete_char>
                HAL_Delay(50);
 8007b10:	2032      	movs	r0, #50	@ 0x32
 8007b12:	f001 fbbb 	bl	800928c <HAL_Delay>
            }

            HAL_Delay(150);
 8007b16:	2096      	movs	r0, #150	@ 0x96
 8007b18:	f001 fbb8 	bl	800928c <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007b1c:	68bb      	ldr	r3, [r7, #8]
 8007b1e:	b2db      	uxtb	r3, r3
 8007b20:	4619      	mov	r1, r3
 8007b22:	2002      	movs	r0, #2
 8007b24:	f000 fe39 	bl	800879a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007b28:	e69c      	b.n	8007864 <takeMachineID+0x30>
    }
}
 8007b2a:	bf00      	nop
 8007b2c:	3710      	adds	r7, #16
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}
 8007b32:	bf00      	nop
 8007b34:	20000004 	.word	0x20000004

08007b38 <takeWifiSSID>:

void takeWifiSSID() {
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b08a      	sub	sp, #40	@ 0x28
 8007b3c:	af04      	add	r7, sp, #16
	mainSSIDSection:

    lcd_cursor(1);
 8007b3e:	2001      	movs	r0, #1
 8007b40:	f000 fea8 	bl	8008894 <lcd_cursor>
    memset(wifiSSID, 0, wifiCharacterLimit*sizeof(*wifiSSID));
 8007b44:	2214      	movs	r2, #20
 8007b46:	2100      	movs	r1, #0
 8007b48:	48a5      	ldr	r0, [pc, #660]	@ (8007de0 <takeWifiSSID+0x2a8>)
 8007b4a:	f005 fad7 	bl	800d0fc <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 8007b4e:	2301      	movs	r3, #1
 8007b50:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 8007b52:	2307      	movs	r3, #7
 8007b54:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 8007b56:	2301      	movs	r3, #1
 8007b58:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	60bb      	str	r3, [r7, #8]
    int eepromVal = ssidStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 8007b5e:	4ba1      	ldr	r3, [pc, #644]	@ (8007de4 <takeWifiSSID+0x2ac>)
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	607b      	str	r3, [r7, #4]

    printTemplate(2, 1);
 8007b64:	2101      	movs	r1, #1
 8007b66:	2002      	movs	r0, #2
 8007b68:	f7f9 f8be 	bl	8000ce8 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007b6c:	2108      	movs	r1, #8
 8007b6e:	489e      	ldr	r0, [pc, #632]	@ (8007de8 <takeWifiSSID+0x2b0>)
 8007b70:	f002 f95c 	bl	8009e2c <HAL_GPIO_ReadPin>
 8007b74:	4603      	mov	r3, r0
 8007b76:	2b01      	cmp	r3, #1
 8007b78:	d129      	bne.n	8007bce <takeWifiSSID+0x96>
            lcd_cursor(0);
 8007b7a:	2000      	movs	r0, #0
 8007b7c:	f000 fe8a 	bl	8008894 <lcd_cursor>

            if(strlen(wifiSSID) > 20) {
 8007b80:	4897      	ldr	r0, [pc, #604]	@ (8007de0 <takeWifiSSID+0x2a8>)
 8007b82:	f7f8 fb4f 	bl	8000224 <strlen>
 8007b86:	4603      	mov	r3, r0
 8007b88:	2b14      	cmp	r3, #20
 8007b8a:	d90e      	bls.n	8007baa <takeWifiSSID+0x72>
            	lcd_print(1, 1, ssidExceedErrorText);
 8007b8c:	4a97      	ldr	r2, [pc, #604]	@ (8007dec <takeWifiSSID+0x2b4>)
 8007b8e:	2101      	movs	r1, #1
 8007b90:	2001      	movs	r0, #1
 8007b92:	f000 fe21 	bl	80087d8 <lcd_print>
            	lcd_print(2, 1, ssidExceedError2Text);
 8007b96:	4a96      	ldr	r2, [pc, #600]	@ (8007df0 <takeWifiSSID+0x2b8>)
 8007b98:	2101      	movs	r1, #1
 8007b9a:	2002      	movs	r0, #2
 8007b9c:	f000 fe1c 	bl	80087d8 <lcd_print>
                HAL_Delay(1250);
 8007ba0:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 8007ba4:	f001 fb72 	bl	800928c <HAL_Delay>

                goto mainSSIDSection;
 8007ba8:	e7c9      	b.n	8007b3e <takeWifiSSID+0x6>
            } else {
            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8007baa:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8007bae:	9302      	str	r3, [sp, #8]
 8007bb0:	236e      	movs	r3, #110	@ 0x6e
 8007bb2:	9301      	str	r3, [sp, #4]
 8007bb4:	4b8f      	ldr	r3, [pc, #572]	@ (8007df4 <takeWifiSSID+0x2bc>)
 8007bb6:	9300      	str	r3, [sp, #0]
 8007bb8:	236e      	movs	r3, #110	@ 0x6e
 8007bba:	2200      	movs	r2, #0
 8007bbc:	21a0      	movs	r1, #160	@ 0xa0
 8007bbe:	488e      	ldr	r0, [pc, #568]	@ (8007df8 <takeWifiSSID+0x2c0>)
 8007bc0:	f002 fbee 	bl	800a3a0 <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 8007bc4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007bc8:	f001 fb60 	bl	800928c <HAL_Delay>

            	break;
 8007bcc:	e137      	b.n	8007e3e <takeWifiSSID+0x306>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8007bce:	2101      	movs	r1, #1
 8007bd0:	4885      	ldr	r0, [pc, #532]	@ (8007de8 <takeWifiSSID+0x2b0>)
 8007bd2:	f002 f92b 	bl	8009e2c <HAL_GPIO_ReadPin>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d14d      	bne.n	8007c78 <takeWifiSSID+0x140>
        	if(cursorPosition > 80) {
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	2b50      	cmp	r3, #80	@ 0x50
 8007be0:	dd01      	ble.n	8007be6 <takeWifiSSID+0xae>
        		cursorPosition = 1;
 8007be2:	2301      	movs	r3, #1
 8007be4:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	2b10      	cmp	r3, #16
 8007bea:	d13f      	bne.n	8007c6c <takeWifiSSID+0x134>
            	if(page == 1) {
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	2b01      	cmp	r3, #1
 8007bf0:	d109      	bne.n	8007c06 <takeWifiSSID+0xce>
            		cursorPosition = 1;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	60fb      	str	r3, [r7, #12]
            		page++;
 8007bf6:	697b      	ldr	r3, [r7, #20]
 8007bf8:	3301      	adds	r3, #1
 8007bfa:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 8007bfc:	2102      	movs	r1, #2
 8007bfe:	2002      	movs	r0, #2
 8007c00:	f7f9 f872 	bl	8000ce8 <printTemplate>
 8007c04:	e035      	b.n	8007c72 <takeWifiSSID+0x13a>
            	} else if(page == 2) {
 8007c06:	697b      	ldr	r3, [r7, #20]
 8007c08:	2b02      	cmp	r3, #2
 8007c0a:	d109      	bne.n	8007c20 <takeWifiSSID+0xe8>
            		cursorPosition = 1;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	60fb      	str	r3, [r7, #12]
            		page++;
 8007c10:	697b      	ldr	r3, [r7, #20]
 8007c12:	3301      	adds	r3, #1
 8007c14:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8007c16:	2103      	movs	r1, #3
 8007c18:	2002      	movs	r0, #2
 8007c1a:	f7f9 f865 	bl	8000ce8 <printTemplate>
 8007c1e:	e028      	b.n	8007c72 <takeWifiSSID+0x13a>
            	} else if(page == 3) {
 8007c20:	697b      	ldr	r3, [r7, #20]
 8007c22:	2b03      	cmp	r3, #3
 8007c24:	d109      	bne.n	8007c3a <takeWifiSSID+0x102>
            		cursorPosition = 1;
 8007c26:	2301      	movs	r3, #1
 8007c28:	60fb      	str	r3, [r7, #12]
            		page++;
 8007c2a:	697b      	ldr	r3, [r7, #20]
 8007c2c:	3301      	adds	r3, #1
 8007c2e:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 8007c30:	2104      	movs	r1, #4
 8007c32:	2002      	movs	r0, #2
 8007c34:	f7f9 f858 	bl	8000ce8 <printTemplate>
 8007c38:	e01b      	b.n	8007c72 <takeWifiSSID+0x13a>
            	} else if(page == 4) {
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	2b04      	cmp	r3, #4
 8007c3e:	d109      	bne.n	8007c54 <takeWifiSSID+0x11c>
            		cursorPosition = 1;
 8007c40:	2301      	movs	r3, #1
 8007c42:	60fb      	str	r3, [r7, #12]
            		page++;
 8007c44:	697b      	ldr	r3, [r7, #20]
 8007c46:	3301      	adds	r3, #1
 8007c48:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 8007c4a:	2105      	movs	r1, #5
 8007c4c:	2002      	movs	r0, #2
 8007c4e:	f7f9 f84b 	bl	8000ce8 <printTemplate>
 8007c52:	e00e      	b.n	8007c72 <takeWifiSSID+0x13a>
            	} else if(page == 5) {
 8007c54:	697b      	ldr	r3, [r7, #20]
 8007c56:	2b05      	cmp	r3, #5
 8007c58:	d10b      	bne.n	8007c72 <takeWifiSSID+0x13a>
            		cursorPosition = 1;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8007c5e:	2301      	movs	r3, #1
 8007c60:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 8007c62:	2101      	movs	r1, #1
 8007c64:	2002      	movs	r0, #2
 8007c66:	f7f9 f83f 	bl	8000ce8 <printTemplate>
 8007c6a:	e002      	b.n	8007c72 <takeWifiSSID+0x13a>
            	}
            } else {
            	cursorPosition++;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	3301      	adds	r3, #1
 8007c70:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8007c72:	2096      	movs	r0, #150	@ 0x96
 8007c74:	f001 fb0a 	bl	800928c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8007c78:	2108      	movs	r1, #8
 8007c7a:	4860      	ldr	r0, [pc, #384]	@ (8007dfc <takeWifiSSID+0x2c4>)
 8007c7c:	f002 f8d6 	bl	8009e2c <HAL_GPIO_ReadPin>
 8007c80:	4603      	mov	r3, r0
 8007c82:	2b01      	cmp	r3, #1
 8007c84:	d149      	bne.n	8007d1a <takeWifiSSID+0x1e2>
        	if(cursorPosition < 1) {
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	dc01      	bgt.n	8007c90 <takeWifiSSID+0x158>
        		cursorPosition = 80;
 8007c8c:	2350      	movs	r3, #80	@ 0x50
 8007c8e:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2b01      	cmp	r3, #1
 8007c94:	d13b      	bne.n	8007d0e <takeWifiSSID+0x1d6>
            	if(page == 1) {
 8007c96:	697b      	ldr	r3, [r7, #20]
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d108      	bne.n	8007cae <takeWifiSSID+0x176>
            		cursorPosition = 16;
 8007c9c:	2310      	movs	r3, #16
 8007c9e:	60fb      	str	r3, [r7, #12]
            		page = 5;
 8007ca0:	2305      	movs	r3, #5
 8007ca2:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 5);
 8007ca4:	2105      	movs	r1, #5
 8007ca6:	2002      	movs	r0, #2
 8007ca8:	f7f9 f81e 	bl	8000ce8 <printTemplate>
 8007cac:	e032      	b.n	8007d14 <takeWifiSSID+0x1dc>
            	} else if(page == 2) {
 8007cae:	697b      	ldr	r3, [r7, #20]
 8007cb0:	2b02      	cmp	r3, #2
 8007cb2:	d108      	bne.n	8007cc6 <takeWifiSSID+0x18e>
            		cursorPosition = 16;
 8007cb4:	2310      	movs	r3, #16
 8007cb6:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8007cb8:	2301      	movs	r3, #1
 8007cba:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 1);
 8007cbc:	2101      	movs	r1, #1
 8007cbe:	2002      	movs	r0, #2
 8007cc0:	f7f9 f812 	bl	8000ce8 <printTemplate>
 8007cc4:	e026      	b.n	8007d14 <takeWifiSSID+0x1dc>
            	} else if(page == 3) {
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	2b03      	cmp	r3, #3
 8007cca:	d108      	bne.n	8007cde <takeWifiSSID+0x1a6>
            		cursorPosition = 16;
 8007ccc:	2310      	movs	r3, #16
 8007cce:	60fb      	str	r3, [r7, #12]
            		page = 2;
 8007cd0:	2302      	movs	r3, #2
 8007cd2:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 2);
 8007cd4:	2102      	movs	r1, #2
 8007cd6:	2002      	movs	r0, #2
 8007cd8:	f7f9 f806 	bl	8000ce8 <printTemplate>
 8007cdc:	e01a      	b.n	8007d14 <takeWifiSSID+0x1dc>
            	} else if(page == 4) {
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	2b04      	cmp	r3, #4
 8007ce2:	d108      	bne.n	8007cf6 <takeWifiSSID+0x1be>
            		cursorPosition = 16;
 8007ce4:	2310      	movs	r3, #16
 8007ce6:	60fb      	str	r3, [r7, #12]
            		page = 3;
 8007ce8:	2303      	movs	r3, #3
 8007cea:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 3);
 8007cec:	2103      	movs	r1, #3
 8007cee:	2002      	movs	r0, #2
 8007cf0:	f7f8 fffa 	bl	8000ce8 <printTemplate>
 8007cf4:	e00e      	b.n	8007d14 <takeWifiSSID+0x1dc>
            	} else if(page == 5) {
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	2b05      	cmp	r3, #5
 8007cfa:	d10b      	bne.n	8007d14 <takeWifiSSID+0x1dc>
            		cursorPosition = 16;
 8007cfc:	2310      	movs	r3, #16
 8007cfe:	60fb      	str	r3, [r7, #12]
            		page = 4;
 8007d00:	2304      	movs	r3, #4
 8007d02:	617b      	str	r3, [r7, #20]
            		printTemplate(2, 4);
 8007d04:	2104      	movs	r1, #4
 8007d06:	2002      	movs	r0, #2
 8007d08:	f7f8 ffee 	bl	8000ce8 <printTemplate>
 8007d0c:	e002      	b.n	8007d14 <takeWifiSSID+0x1dc>
            	}
            } else {
            	cursorPosition--;
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	3b01      	subs	r3, #1
 8007d12:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8007d14:	2096      	movs	r0, #150	@ 0x96
 8007d16:	f001 fab9 	bl	800928c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8007d1a:	2102      	movs	r1, #2
 8007d1c:	4832      	ldr	r0, [pc, #200]	@ (8007de8 <takeWifiSSID+0x2b0>)
 8007d1e:	f002 f885 	bl	8009e2c <HAL_GPIO_ReadPin>
 8007d22:	4603      	mov	r3, r0
 8007d24:	2b01      	cmp	r3, #1
 8007d26:	d12f      	bne.n	8007d88 <takeWifiSSID+0x250>
            eepromData[eepromVal] = cursorPosition;
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	b2d9      	uxtb	r1, r3
 8007d2c:	4a31      	ldr	r2, [pc, #196]	@ (8007df4 <takeWifiSSID+0x2bc>)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	4413      	add	r3, r2
 8007d32:	460a      	mov	r2, r1
 8007d34:	701a      	strb	r2, [r3, #0]
            wifiSSID[arrayPosition] = charactersArray[cursorPosition];
 8007d36:	4a32      	ldr	r2, [pc, #200]	@ (8007e00 <takeWifiSSID+0x2c8>)
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	4413      	add	r3, r2
 8007d3c:	7819      	ldrb	r1, [r3, #0]
 8007d3e:	4a28      	ldr	r2, [pc, #160]	@ (8007de0 <takeWifiSSID+0x2a8>)
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	4413      	add	r3, r2
 8007d44:	460a      	mov	r2, r1
 8007d46:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	b2d9      	uxtb	r1, r3
 8007d4c:	4a2c      	ldr	r2, [pc, #176]	@ (8007e00 <takeWifiSSID+0x2c8>)
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	4413      	add	r3, r2
 8007d52:	781b      	ldrb	r3, [r3, #0]
 8007d54:	461a      	mov	r2, r3
 8007d56:	2001      	movs	r0, #1
 8007d58:	f000 fd53 	bl	8008802 <lcd_print_char>

            writeLoc++;
 8007d5c:	693b      	ldr	r3, [r7, #16]
 8007d5e:	3301      	adds	r3, #1
 8007d60:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	3301      	adds	r3, #1
 8007d66:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	3301      	adds	r3, #1
 8007d6c:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 8007d6e:	4a21      	ldr	r2, [pc, #132]	@ (8007df4 <takeWifiSSID+0x2bc>)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	4413      	add	r3, r2
 8007d74:	2200      	movs	r2, #0
 8007d76:	701a      	strb	r2, [r3, #0]
            wifiSSID[arrayPosition] = '\0';
 8007d78:	4a19      	ldr	r2, [pc, #100]	@ (8007de0 <takeWifiSSID+0x2a8>)
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	4413      	add	r3, r2
 8007d7e:	2200      	movs	r2, #0
 8007d80:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 8007d82:	2096      	movs	r0, #150	@ 0x96
 8007d84:	f001 fa82 	bl	800928c <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8007d88:	2104      	movs	r1, #4
 8007d8a:	4817      	ldr	r0, [pc, #92]	@ (8007de8 <takeWifiSSID+0x2b0>)
 8007d8c:	f002 f84e 	bl	8009e2c <HAL_GPIO_ReadPin>
 8007d90:	4603      	mov	r3, r0
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	d14c      	bne.n	8007e30 <takeWifiSSID+0x2f8>
        	if(strlen(wifiSSID) >= 1) {
 8007d96:	4b12      	ldr	r3, [pc, #72]	@ (8007de0 <takeWifiSSID+0x2a8>)
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d045      	beq.n	8007e2a <takeWifiSSID+0x2f2>
        		eepromData[eepromVal] = '\0';
 8007d9e:	4a15      	ldr	r2, [pc, #84]	@ (8007df4 <takeWifiSSID+0x2bc>)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	4413      	add	r3, r2
 8007da4:	2200      	movs	r2, #0
 8007da6:	701a      	strb	r2, [r3, #0]
        		wifiSSID[arrayPosition] = '\0';
 8007da8:	4a0d      	ldr	r2, [pc, #52]	@ (8007de0 <takeWifiSSID+0x2a8>)
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	4413      	add	r3, r2
 8007dae:	2200      	movs	r2, #0
 8007db0:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	2b07      	cmp	r3, #7
 8007db6:	dd03      	ble.n	8007dc0 <takeWifiSSID+0x288>
        			writeLoc--;
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	3b01      	subs	r3, #1
 8007dbc:	613b      	str	r3, [r7, #16]
 8007dbe:	e004      	b.n	8007dca <takeWifiSSID+0x292>
        		} else if(writeLoc < 7) {
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	2b06      	cmp	r3, #6
 8007dc4:	dc01      	bgt.n	8007dca <takeWifiSSID+0x292>
        			writeLoc = 7;
 8007dc6:	2307      	movs	r3, #7
 8007dc8:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 8007dca:	68bb      	ldr	r3, [r7, #8]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	dd19      	ble.n	8007e04 <takeWifiSSID+0x2cc>
        			arrayPosition--;
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	3b01      	subs	r3, #1
 8007dd4:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	3b01      	subs	r3, #1
 8007dda:	607b      	str	r3, [r7, #4]
 8007ddc:	e01a      	b.n	8007e14 <takeWifiSSID+0x2dc>
 8007dde:	bf00      	nop
 8007de0:	2000104c 	.word	0x2000104c
 8007de4:	20000008 	.word	0x20000008
 8007de8:	40010800 	.word	0x40010800
 8007dec:	200017f0 	.word	0x200017f0
 8007df0:	20001804 	.word	0x20001804
 8007df4:	20000fc8 	.word	0x20000fc8
 8007df8:	20001908 	.word	0x20001908
 8007dfc:	40011000 	.word	0x40011000
 8007e00:	2000001c 	.word	0x2000001c
        		} else if(arrayPosition < 0) {
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	da04      	bge.n	8007e14 <takeWifiSSID+0x2dc>
        			arrayPosition = 0;
 8007e0a:	2300      	movs	r3, #0
 8007e0c:	60bb      	str	r3, [r7, #8]
        			eepromVal = ssidStartPos;
 8007e0e:	4b0e      	ldr	r3, [pc, #56]	@ (8007e48 <takeWifiSSID+0x310>)
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition+1);
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	3307      	adds	r3, #7
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	4619      	mov	r1, r3
 8007e1e:	2001      	movs	r0, #1
 8007e20:	f000 fd10 	bl	8008844 <lcd_delete_char>
        		HAL_Delay(50);
 8007e24:	2032      	movs	r0, #50	@ 0x32
 8007e26:	f001 fa31 	bl	800928c <HAL_Delay>
        	}

        	HAL_Delay(150);
 8007e2a:	2096      	movs	r0, #150	@ 0x96
 8007e2c:	f001 fa2e 	bl	800928c <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	b2db      	uxtb	r3, r3
 8007e34:	4619      	mov	r1, r3
 8007e36:	2002      	movs	r0, #2
 8007e38:	f000 fcaf 	bl	800879a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007e3c:	e696      	b.n	8007b6c <takeWifiSSID+0x34>
    }
}
 8007e3e:	bf00      	nop
 8007e40:	3718      	adds	r7, #24
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop
 8007e48:	20000008 	.word	0x20000008

08007e4c <takeWifiPass>:

void takeWifiPass() {
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b08a      	sub	sp, #40	@ 0x28
 8007e50:	af04      	add	r7, sp, #16
	mainPassSection:

    lcd_cursor(1);
 8007e52:	2001      	movs	r0, #1
 8007e54:	f000 fd1e 	bl	8008894 <lcd_cursor>
    memset(wifiPass, 0, wifiCharacterLimit*sizeof(*wifiPass));
 8007e58:	2214      	movs	r2, #20
 8007e5a:	2100      	movs	r1, #0
 8007e5c:	48a5      	ldr	r0, [pc, #660]	@ (80080f4 <takeWifiPass+0x2a8>)
 8007e5e:	f005 f94d 	bl	800d0fc <memset>

    int page = 1; //wifi karakterleri için sayfa değişkeni
 8007e62:	2301      	movs	r3, #1
 8007e64:	617b      	str	r3, [r7, #20]
    int writeLoc = 7; //seçilen karakterleri yazdırmaya başlanılacak karakter
 8007e66:	2307      	movs	r3, #7
 8007e68:	613b      	str	r3, [r7, #16]

    int cursorPosition = 1; //kullanıcının gezindiği işaretçinin değişkeni
 8007e6a:	2301      	movs	r3, #1
 8007e6c:	60fb      	str	r3, [r7, #12]
    int arrayPosition = 0; //kullanıcının seçtiği karakteri diziye aktarırken kullanılacak değişken
 8007e6e:	2300      	movs	r3, #0
 8007e70:	60bb      	str	r3, [r7, #8]
    int eepromVal = passStartPos; //kullanıcının seçtiği karakteri eeproma yazarken kullanılacak değişken
 8007e72:	4ba1      	ldr	r3, [pc, #644]	@ (80080f8 <takeWifiPass+0x2ac>)
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	607b      	str	r3, [r7, #4]

    printTemplate(3, 1);
 8007e78:	2101      	movs	r1, #1
 8007e7a:	2003      	movs	r0, #3
 8007e7c:	f7f8 ff34 	bl	8000ce8 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8007e80:	2108      	movs	r1, #8
 8007e82:	489e      	ldr	r0, [pc, #632]	@ (80080fc <takeWifiPass+0x2b0>)
 8007e84:	f001 ffd2 	bl	8009e2c <HAL_GPIO_ReadPin>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	2b01      	cmp	r3, #1
 8007e8c:	d129      	bne.n	8007ee2 <takeWifiPass+0x96>
            lcd_cursor(0);
 8007e8e:	2000      	movs	r0, #0
 8007e90:	f000 fd00 	bl	8008894 <lcd_cursor>

            if(strlen(wifiPass) > 20) {
 8007e94:	4897      	ldr	r0, [pc, #604]	@ (80080f4 <takeWifiPass+0x2a8>)
 8007e96:	f7f8 f9c5 	bl	8000224 <strlen>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2b14      	cmp	r3, #20
 8007e9e:	d90e      	bls.n	8007ebe <takeWifiPass+0x72>
            	lcd_print(1, 1, passExceedErrorText);
 8007ea0:	4a97      	ldr	r2, [pc, #604]	@ (8008100 <takeWifiPass+0x2b4>)
 8007ea2:	2101      	movs	r1, #1
 8007ea4:	2001      	movs	r0, #1
 8007ea6:	f000 fc97 	bl	80087d8 <lcd_print>
            	lcd_print(2, 1, passExceedError2Text);
 8007eaa:	4a96      	ldr	r2, [pc, #600]	@ (8008104 <takeWifiPass+0x2b8>)
 8007eac:	2101      	movs	r1, #1
 8007eae:	2002      	movs	r0, #2
 8007eb0:	f000 fc92 	bl	80087d8 <lcd_print>
                HAL_Delay(1250);
 8007eb4:	f240 40e2 	movw	r0, #1250	@ 0x4e2
 8007eb8:	f001 f9e8 	bl	800928c <HAL_Delay>

                goto mainPassSection;
 8007ebc:	e7c9      	b.n	8007e52 <takeWifiPass+0x6>
            } else {
            	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8007ebe:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8007ec2:	9302      	str	r3, [sp, #8]
 8007ec4:	236e      	movs	r3, #110	@ 0x6e
 8007ec6:	9301      	str	r3, [sp, #4]
 8007ec8:	4b8f      	ldr	r3, [pc, #572]	@ (8008108 <takeWifiPass+0x2bc>)
 8007eca:	9300      	str	r3, [sp, #0]
 8007ecc:	236e      	movs	r3, #110	@ 0x6e
 8007ece:	2200      	movs	r2, #0
 8007ed0:	21a0      	movs	r1, #160	@ 0xa0
 8007ed2:	488e      	ldr	r0, [pc, #568]	@ (800810c <takeWifiPass+0x2c0>)
 8007ed4:	f002 fa64 	bl	800a3a0 <HAL_I2C_Mem_Write>
            	HAL_Delay(1000);
 8007ed8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8007edc:	f001 f9d6 	bl	800928c <HAL_Delay>

            	break;
 8007ee0:	e137      	b.n	8008152 <takeWifiPass+0x306>
            }
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8007ee2:	2101      	movs	r1, #1
 8007ee4:	4885      	ldr	r0, [pc, #532]	@ (80080fc <takeWifiPass+0x2b0>)
 8007ee6:	f001 ffa1 	bl	8009e2c <HAL_GPIO_ReadPin>
 8007eea:	4603      	mov	r3, r0
 8007eec:	2b01      	cmp	r3, #1
 8007eee:	d14d      	bne.n	8007f8c <takeWifiPass+0x140>
        	if(cursorPosition > 80) {
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	2b50      	cmp	r3, #80	@ 0x50
 8007ef4:	dd01      	ble.n	8007efa <takeWifiPass+0xae>
        		cursorPosition = 1;
 8007ef6:	2301      	movs	r3, #1
 8007ef8:	60fb      	str	r3, [r7, #12]
        	}

            if (cursorPosition == 16) {
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	2b10      	cmp	r3, #16
 8007efe:	d13f      	bne.n	8007f80 <takeWifiPass+0x134>
            	if(page == 1) {
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	2b01      	cmp	r3, #1
 8007f04:	d109      	bne.n	8007f1a <takeWifiPass+0xce>
            		cursorPosition = 1;
 8007f06:	2301      	movs	r3, #1
 8007f08:	60fb      	str	r3, [r7, #12]
            		page++;
 8007f0a:	697b      	ldr	r3, [r7, #20]
 8007f0c:	3301      	adds	r3, #1
 8007f0e:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 8007f10:	2102      	movs	r1, #2
 8007f12:	2003      	movs	r0, #3
 8007f14:	f7f8 fee8 	bl	8000ce8 <printTemplate>
 8007f18:	e035      	b.n	8007f86 <takeWifiPass+0x13a>
            	} else if(page == 2) {
 8007f1a:	697b      	ldr	r3, [r7, #20]
 8007f1c:	2b02      	cmp	r3, #2
 8007f1e:	d109      	bne.n	8007f34 <takeWifiPass+0xe8>
            		cursorPosition = 1;
 8007f20:	2301      	movs	r3, #1
 8007f22:	60fb      	str	r3, [r7, #12]
            		page++;
 8007f24:	697b      	ldr	r3, [r7, #20]
 8007f26:	3301      	adds	r3, #1
 8007f28:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 8007f2a:	2103      	movs	r1, #3
 8007f2c:	2003      	movs	r0, #3
 8007f2e:	f7f8 fedb 	bl	8000ce8 <printTemplate>
 8007f32:	e028      	b.n	8007f86 <takeWifiPass+0x13a>
            	} else if(page == 3) {
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	2b03      	cmp	r3, #3
 8007f38:	d109      	bne.n	8007f4e <takeWifiPass+0x102>
            		cursorPosition = 1;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	60fb      	str	r3, [r7, #12]
            		page++;
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	3301      	adds	r3, #1
 8007f42:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 8007f44:	2104      	movs	r1, #4
 8007f46:	2003      	movs	r0, #3
 8007f48:	f7f8 fece 	bl	8000ce8 <printTemplate>
 8007f4c:	e01b      	b.n	8007f86 <takeWifiPass+0x13a>
            	} else if(page == 4) {
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	2b04      	cmp	r3, #4
 8007f52:	d109      	bne.n	8007f68 <takeWifiPass+0x11c>
            		cursorPosition = 1;
 8007f54:	2301      	movs	r3, #1
 8007f56:	60fb      	str	r3, [r7, #12]
            		page++;
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 8007f5e:	2105      	movs	r1, #5
 8007f60:	2003      	movs	r0, #3
 8007f62:	f7f8 fec1 	bl	8000ce8 <printTemplate>
 8007f66:	e00e      	b.n	8007f86 <takeWifiPass+0x13a>
            	} else if(page == 5) {
 8007f68:	697b      	ldr	r3, [r7, #20]
 8007f6a:	2b05      	cmp	r3, #5
 8007f6c:	d10b      	bne.n	8007f86 <takeWifiPass+0x13a>
            		cursorPosition = 1;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8007f72:	2301      	movs	r3, #1
 8007f74:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 8007f76:	2101      	movs	r1, #1
 8007f78:	2003      	movs	r0, #3
 8007f7a:	f7f8 feb5 	bl	8000ce8 <printTemplate>
 8007f7e:	e002      	b.n	8007f86 <takeWifiPass+0x13a>
            	}
            } else {
            	cursorPosition++;
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	3301      	adds	r3, #1
 8007f84:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8007f86:	2096      	movs	r0, #150	@ 0x96
 8007f88:	f001 f980 	bl	800928c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8007f8c:	2108      	movs	r1, #8
 8007f8e:	4860      	ldr	r0, [pc, #384]	@ (8008110 <takeWifiPass+0x2c4>)
 8007f90:	f001 ff4c 	bl	8009e2c <HAL_GPIO_ReadPin>
 8007f94:	4603      	mov	r3, r0
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	d149      	bne.n	800802e <takeWifiPass+0x1e2>
        	if(cursorPosition < 1) {
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	dc01      	bgt.n	8007fa4 <takeWifiPass+0x158>
        		cursorPosition = 80;
 8007fa0:	2350      	movs	r3, #80	@ 0x50
 8007fa2:	60fb      	str	r3, [r7, #12]
        	}

            if(cursorPosition == 1) {
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d13b      	bne.n	8008022 <takeWifiPass+0x1d6>
            	if(page == 1) {
 8007faa:	697b      	ldr	r3, [r7, #20]
 8007fac:	2b01      	cmp	r3, #1
 8007fae:	d108      	bne.n	8007fc2 <takeWifiPass+0x176>
            		cursorPosition = 16;
 8007fb0:	2310      	movs	r3, #16
 8007fb2:	60fb      	str	r3, [r7, #12]
            		page = 5;
 8007fb4:	2305      	movs	r3, #5
 8007fb6:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 5);
 8007fb8:	2105      	movs	r1, #5
 8007fba:	2003      	movs	r0, #3
 8007fbc:	f7f8 fe94 	bl	8000ce8 <printTemplate>
 8007fc0:	e032      	b.n	8008028 <takeWifiPass+0x1dc>
            	} else if(page == 2) {
 8007fc2:	697b      	ldr	r3, [r7, #20]
 8007fc4:	2b02      	cmp	r3, #2
 8007fc6:	d108      	bne.n	8007fda <takeWifiPass+0x18e>
            		cursorPosition = 16;
 8007fc8:	2310      	movs	r3, #16
 8007fca:	60fb      	str	r3, [r7, #12]
            		page = 1;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 1);
 8007fd0:	2101      	movs	r1, #1
 8007fd2:	2003      	movs	r0, #3
 8007fd4:	f7f8 fe88 	bl	8000ce8 <printTemplate>
 8007fd8:	e026      	b.n	8008028 <takeWifiPass+0x1dc>
            	} else if(page == 3) {
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	2b03      	cmp	r3, #3
 8007fde:	d108      	bne.n	8007ff2 <takeWifiPass+0x1a6>
            		cursorPosition = 16;
 8007fe0:	2310      	movs	r3, #16
 8007fe2:	60fb      	str	r3, [r7, #12]
            		page = 2;
 8007fe4:	2302      	movs	r3, #2
 8007fe6:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 2);
 8007fe8:	2102      	movs	r1, #2
 8007fea:	2003      	movs	r0, #3
 8007fec:	f7f8 fe7c 	bl	8000ce8 <printTemplate>
 8007ff0:	e01a      	b.n	8008028 <takeWifiPass+0x1dc>
            	} else if(page == 4) {
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	2b04      	cmp	r3, #4
 8007ff6:	d108      	bne.n	800800a <takeWifiPass+0x1be>
            		cursorPosition = 16;
 8007ff8:	2310      	movs	r3, #16
 8007ffa:	60fb      	str	r3, [r7, #12]
            		page = 3;
 8007ffc:	2303      	movs	r3, #3
 8007ffe:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 3);
 8008000:	2103      	movs	r1, #3
 8008002:	2003      	movs	r0, #3
 8008004:	f7f8 fe70 	bl	8000ce8 <printTemplate>
 8008008:	e00e      	b.n	8008028 <takeWifiPass+0x1dc>
            	} else if(page == 5) {
 800800a:	697b      	ldr	r3, [r7, #20]
 800800c:	2b05      	cmp	r3, #5
 800800e:	d10b      	bne.n	8008028 <takeWifiPass+0x1dc>
            		cursorPosition = 16;
 8008010:	2310      	movs	r3, #16
 8008012:	60fb      	str	r3, [r7, #12]
            		page = 4;
 8008014:	2304      	movs	r3, #4
 8008016:	617b      	str	r3, [r7, #20]
            		printTemplate(3, 4);
 8008018:	2104      	movs	r1, #4
 800801a:	2003      	movs	r0, #3
 800801c:	f7f8 fe64 	bl	8000ce8 <printTemplate>
 8008020:	e002      	b.n	8008028 <takeWifiPass+0x1dc>
            	}
            } else {
            	cursorPosition--;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	3b01      	subs	r3, #1
 8008026:	60fb      	str	r3, [r7, #12]
            }

            HAL_Delay(150);
 8008028:	2096      	movs	r0, #150	@ 0x96
 800802a:	f001 f92f 	bl	800928c <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 800802e:	2102      	movs	r1, #2
 8008030:	4832      	ldr	r0, [pc, #200]	@ (80080fc <takeWifiPass+0x2b0>)
 8008032:	f001 fefb 	bl	8009e2c <HAL_GPIO_ReadPin>
 8008036:	4603      	mov	r3, r0
 8008038:	2b01      	cmp	r3, #1
 800803a:	d12f      	bne.n	800809c <takeWifiPass+0x250>
            eepromData[eepromVal] = cursorPosition;
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	b2d9      	uxtb	r1, r3
 8008040:	4a31      	ldr	r2, [pc, #196]	@ (8008108 <takeWifiPass+0x2bc>)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	4413      	add	r3, r2
 8008046:	460a      	mov	r2, r1
 8008048:	701a      	strb	r2, [r3, #0]
            wifiPass[arrayPosition] = charactersArray[cursorPosition];
 800804a:	4a32      	ldr	r2, [pc, #200]	@ (8008114 <takeWifiPass+0x2c8>)
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	4413      	add	r3, r2
 8008050:	7819      	ldrb	r1, [r3, #0]
 8008052:	4a28      	ldr	r2, [pc, #160]	@ (80080f4 <takeWifiPass+0x2a8>)
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	4413      	add	r3, r2
 8008058:	460a      	mov	r2, r1
 800805a:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, charactersArray[cursorPosition]);
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	b2d9      	uxtb	r1, r3
 8008060:	4a2c      	ldr	r2, [pc, #176]	@ (8008114 <takeWifiPass+0x2c8>)
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	4413      	add	r3, r2
 8008066:	781b      	ldrb	r3, [r3, #0]
 8008068:	461a      	mov	r2, r3
 800806a:	2001      	movs	r0, #1
 800806c:	f000 fbc9 	bl	8008802 <lcd_print_char>

            writeLoc++;
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	3301      	adds	r3, #1
 8008074:	613b      	str	r3, [r7, #16]
            arrayPosition++;
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	3301      	adds	r3, #1
 800807a:	60bb      	str	r3, [r7, #8]
            eepromVal++;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	3301      	adds	r3, #1
 8008080:	607b      	str	r3, [r7, #4]

            eepromData[eepromVal] = '\0';
 8008082:	4a21      	ldr	r2, [pc, #132]	@ (8008108 <takeWifiPass+0x2bc>)
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	4413      	add	r3, r2
 8008088:	2200      	movs	r2, #0
 800808a:	701a      	strb	r2, [r3, #0]
            wifiPass[arrayPosition] = '\0';
 800808c:	4a19      	ldr	r2, [pc, #100]	@ (80080f4 <takeWifiPass+0x2a8>)
 800808e:	68bb      	ldr	r3, [r7, #8]
 8008090:	4413      	add	r3, r2
 8008092:	2200      	movs	r2, #0
 8008094:	701a      	strb	r2, [r3, #0]

            HAL_Delay(150);
 8008096:	2096      	movs	r0, #150	@ 0x96
 8008098:	f001 f8f8 	bl	800928c <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 800809c:	2104      	movs	r1, #4
 800809e:	4817      	ldr	r0, [pc, #92]	@ (80080fc <takeWifiPass+0x2b0>)
 80080a0:	f001 fec4 	bl	8009e2c <HAL_GPIO_ReadPin>
 80080a4:	4603      	mov	r3, r0
 80080a6:	2b01      	cmp	r3, #1
 80080a8:	d14c      	bne.n	8008144 <takeWifiPass+0x2f8>
        	if(strlen(wifiPass) >= 1) {
 80080aa:	4b12      	ldr	r3, [pc, #72]	@ (80080f4 <takeWifiPass+0x2a8>)
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d045      	beq.n	800813e <takeWifiPass+0x2f2>
        		eepromData[eepromVal] = '\0';
 80080b2:	4a15      	ldr	r2, [pc, #84]	@ (8008108 <takeWifiPass+0x2bc>)
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	4413      	add	r3, r2
 80080b8:	2200      	movs	r2, #0
 80080ba:	701a      	strb	r2, [r3, #0]
        		wifiPass[arrayPosition] = '\0';
 80080bc:	4a0d      	ldr	r2, [pc, #52]	@ (80080f4 <takeWifiPass+0x2a8>)
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	4413      	add	r3, r2
 80080c2:	2200      	movs	r2, #0
 80080c4:	701a      	strb	r2, [r3, #0]

        		if(writeLoc > 7) {
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	2b07      	cmp	r3, #7
 80080ca:	dd03      	ble.n	80080d4 <takeWifiPass+0x288>
        			writeLoc--;
 80080cc:	693b      	ldr	r3, [r7, #16]
 80080ce:	3b01      	subs	r3, #1
 80080d0:	613b      	str	r3, [r7, #16]
 80080d2:	e004      	b.n	80080de <takeWifiPass+0x292>
        		} else if(writeLoc < 7) {
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	2b06      	cmp	r3, #6
 80080d8:	dc01      	bgt.n	80080de <takeWifiPass+0x292>
        			writeLoc = 7;
 80080da:	2307      	movs	r3, #7
 80080dc:	613b      	str	r3, [r7, #16]
        		}

        		if(arrayPosition > 0) {
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	dd19      	ble.n	8008118 <takeWifiPass+0x2cc>
        			arrayPosition--;
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	3b01      	subs	r3, #1
 80080e8:	60bb      	str	r3, [r7, #8]
        			eepromVal--;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	3b01      	subs	r3, #1
 80080ee:	607b      	str	r3, [r7, #4]
 80080f0:	e01a      	b.n	8008128 <takeWifiPass+0x2dc>
 80080f2:	bf00      	nop
 80080f4:	20001060 	.word	0x20001060
 80080f8:	2000000c 	.word	0x2000000c
 80080fc:	40010800 	.word	0x40010800
 8008100:	20001818 	.word	0x20001818
 8008104:	2000182c 	.word	0x2000182c
 8008108:	20000fc8 	.word	0x20000fc8
 800810c:	20001908 	.word	0x20001908
 8008110:	40011000 	.word	0x40011000
 8008114:	2000001c 	.word	0x2000001c
        		} else if(arrayPosition < 0) {
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	2b00      	cmp	r3, #0
 800811c:	da04      	bge.n	8008128 <takeWifiPass+0x2dc>
        			arrayPosition = 0;
 800811e:	2300      	movs	r3, #0
 8008120:	60bb      	str	r3, [r7, #8]
        			eepromVal = passStartPos;
 8008122:	4b0e      	ldr	r3, [pc, #56]	@ (800815c <takeWifiPass+0x310>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	607b      	str	r3, [r7, #4]
        		}

        		lcd_delete_char(1, 6+arrayPosition+1);
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	b2db      	uxtb	r3, r3
 800812c:	3307      	adds	r3, #7
 800812e:	b2db      	uxtb	r3, r3
 8008130:	4619      	mov	r1, r3
 8008132:	2001      	movs	r0, #1
 8008134:	f000 fb86 	bl	8008844 <lcd_delete_char>
        		HAL_Delay(50);
 8008138:	2032      	movs	r0, #50	@ 0x32
 800813a:	f001 f8a7 	bl	800928c <HAL_Delay>
        	}

        	HAL_Delay(150);
 800813e:	2096      	movs	r0, #150	@ 0x96
 8008140:	f001 f8a4 	bl	800928c <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	b2db      	uxtb	r3, r3
 8008148:	4619      	mov	r1, r3
 800814a:	2002      	movs	r0, #2
 800814c:	f000 fb25 	bl	800879a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8008150:	e696      	b.n	8007e80 <takeWifiPass+0x34>
    }
}
 8008152:	bf00      	nop
 8008154:	3718      	adds	r7, #24
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
 800815a:	bf00      	nop
 800815c:	2000000c 	.word	0x2000000c

08008160 <mergeData>:

char* mergeData() {
 8008160:	b580      	push	{r7, lr}
 8008162:	b09c      	sub	sp, #112	@ 0x70
 8008164:	af00      	add	r7, sp, #0
	char combinedString[45] = "";
 8008166:	2300      	movs	r3, #0
 8008168:	63bb      	str	r3, [r7, #56]	@ 0x38
 800816a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800816e:	2229      	movs	r2, #41	@ 0x29
 8008170:	2100      	movs	r1, #0
 8008172:	4618      	mov	r0, r3
 8008174:	f004 ffc2 	bl	800d0fc <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 8008178:	4b65      	ldr	r3, [pc, #404]	@ (8008310 <mergeData+0x1b0>)
 800817a:	781b      	ldrb	r3, [r3, #0]
 800817c:	703b      	strb	r3, [r7, #0]
 800817e:	4b65      	ldr	r3, [pc, #404]	@ (8008314 <mergeData+0x1b4>)
 8008180:	781b      	ldrb	r3, [r3, #0]
 8008182:	707b      	strb	r3, [r7, #1]
 8008184:	4b64      	ldr	r3, [pc, #400]	@ (8008318 <mergeData+0x1b8>)
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	70bb      	strb	r3, [r7, #2]
 800818a:	4b64      	ldr	r3, [pc, #400]	@ (800831c <mergeData+0x1bc>)
 800818c:	781b      	ldrb	r3, [r3, #0]
 800818e:	70fb      	strb	r3, [r7, #3]
 8008190:	4b63      	ldr	r3, [pc, #396]	@ (8008320 <mergeData+0x1c0>)
 8008192:	781b      	ldrb	r3, [r3, #0]
 8008194:	713b      	strb	r3, [r7, #4]
 8008196:	4b63      	ldr	r3, [pc, #396]	@ (8008324 <mergeData+0x1c4>)
 8008198:	781b      	ldrb	r3, [r3, #0]
 800819a:	717b      	strb	r3, [r7, #5]
 800819c:	4b62      	ldr	r3, [pc, #392]	@ (8008328 <mergeData+0x1c8>)
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	71bb      	strb	r3, [r7, #6]
 80081a2:	4b62      	ldr	r3, [pc, #392]	@ (800832c <mergeData+0x1cc>)
 80081a4:	781b      	ldrb	r3, [r3, #0]
 80081a6:	71fb      	strb	r3, [r7, #7]
 80081a8:	4b61      	ldr	r3, [pc, #388]	@ (8008330 <mergeData+0x1d0>)
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	723b      	strb	r3, [r7, #8]
 80081ae:	4b61      	ldr	r3, [pc, #388]	@ (8008334 <mergeData+0x1d4>)
 80081b0:	781b      	ldrb	r3, [r3, #0]
 80081b2:	727b      	strb	r3, [r7, #9]
 80081b4:	4b60      	ldr	r3, [pc, #384]	@ (8008338 <mergeData+0x1d8>)
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	72bb      	strb	r3, [r7, #10]
 80081ba:	4b60      	ldr	r3, [pc, #384]	@ (800833c <mergeData+0x1dc>)
 80081bc:	781b      	ldrb	r3, [r3, #0]
 80081be:	72fb      	strb	r3, [r7, #11]
 80081c0:	4b5f      	ldr	r3, [pc, #380]	@ (8008340 <mergeData+0x1e0>)
 80081c2:	781b      	ldrb	r3, [r3, #0]
 80081c4:	733b      	strb	r3, [r7, #12]
 80081c6:	4b5f      	ldr	r3, [pc, #380]	@ (8008344 <mergeData+0x1e4>)
 80081c8:	781b      	ldrb	r3, [r3, #0]
 80081ca:	737b      	strb	r3, [r7, #13]
 80081cc:	4b5e      	ldr	r3, [pc, #376]	@ (8008348 <mergeData+0x1e8>)
 80081ce:	781b      	ldrb	r3, [r3, #0]
 80081d0:	73bb      	strb	r3, [r7, #14]
 80081d2:	4b5e      	ldr	r3, [pc, #376]	@ (800834c <mergeData+0x1ec>)
 80081d4:	781b      	ldrb	r3, [r3, #0]
 80081d6:	73fb      	strb	r3, [r7, #15]
 80081d8:	4b5d      	ldr	r3, [pc, #372]	@ (8008350 <mergeData+0x1f0>)
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	743b      	strb	r3, [r7, #16]
 80081de:	4b5d      	ldr	r3, [pc, #372]	@ (8008354 <mergeData+0x1f4>)
 80081e0:	781b      	ldrb	r3, [r3, #0]
 80081e2:	747b      	strb	r3, [r7, #17]
 80081e4:	4b5c      	ldr	r3, [pc, #368]	@ (8008358 <mergeData+0x1f8>)
 80081e6:	781b      	ldrb	r3, [r3, #0]
 80081e8:	74bb      	strb	r3, [r7, #18]
 80081ea:	4b5c      	ldr	r3, [pc, #368]	@ (800835c <mergeData+0x1fc>)
 80081ec:	781b      	ldrb	r3, [r3, #0]
 80081ee:	74fb      	strb	r3, [r7, #19]
 80081f0:	4b5b      	ldr	r3, [pc, #364]	@ (8008360 <mergeData+0x200>)
 80081f2:	781b      	ldrb	r3, [r3, #0]
 80081f4:	753b      	strb	r3, [r7, #20]
 80081f6:	4b5b      	ldr	r3, [pc, #364]	@ (8008364 <mergeData+0x204>)
 80081f8:	781b      	ldrb	r3, [r3, #0]
 80081fa:	757b      	strb	r3, [r7, #21]
 80081fc:	4b5a      	ldr	r3, [pc, #360]	@ (8008368 <mergeData+0x208>)
 80081fe:	781b      	ldrb	r3, [r3, #0]
 8008200:	75bb      	strb	r3, [r7, #22]
 8008202:	4b5a      	ldr	r3, [pc, #360]	@ (800836c <mergeData+0x20c>)
 8008204:	781b      	ldrb	r3, [r3, #0]
 8008206:	75fb      	strb	r3, [r7, #23]
 8008208:	4b59      	ldr	r3, [pc, #356]	@ (8008370 <mergeData+0x210>)
 800820a:	781b      	ldrb	r3, [r3, #0]
 800820c:	763b      	strb	r3, [r7, #24]
 800820e:	4b59      	ldr	r3, [pc, #356]	@ (8008374 <mergeData+0x214>)
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	767b      	strb	r3, [r7, #25]
 8008214:	4b58      	ldr	r3, [pc, #352]	@ (8008378 <mergeData+0x218>)
 8008216:	781b      	ldrb	r3, [r3, #0]
 8008218:	76bb      	strb	r3, [r7, #26]
 800821a:	4b58      	ldr	r3, [pc, #352]	@ (800837c <mergeData+0x21c>)
 800821c:	781b      	ldrb	r3, [r3, #0]
 800821e:	76fb      	strb	r3, [r7, #27]
 8008220:	4b57      	ldr	r3, [pc, #348]	@ (8008380 <mergeData+0x220>)
 8008222:	781b      	ldrb	r3, [r3, #0]
 8008224:	773b      	strb	r3, [r7, #28]
 8008226:	4b57      	ldr	r3, [pc, #348]	@ (8008384 <mergeData+0x224>)
 8008228:	781b      	ldrb	r3, [r3, #0]
 800822a:	777b      	strb	r3, [r7, #29]
 800822c:	4b56      	ldr	r3, [pc, #344]	@ (8008388 <mergeData+0x228>)
 800822e:	781b      	ldrb	r3, [r3, #0]
 8008230:	77bb      	strb	r3, [r7, #30]
 8008232:	4b56      	ldr	r3, [pc, #344]	@ (800838c <mergeData+0x22c>)
 8008234:	781b      	ldrb	r3, [r3, #0]
 8008236:	77fb      	strb	r3, [r7, #31]
 8008238:	4b55      	ldr	r3, [pc, #340]	@ (8008390 <mergeData+0x230>)
 800823a:	781b      	ldrb	r3, [r3, #0]
 800823c:	f887 3020 	strb.w	r3, [r7, #32]
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[38],
 8008240:	4b54      	ldr	r3, [pc, #336]	@ (8008394 <mergeData+0x234>)
 8008242:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
	uint8_t uintVariables[] = {
 8008246:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
			eepromData[39],
 800824a:	4b52      	ldr	r3, [pc, #328]	@ (8008394 <mergeData+0x234>)
 800824c:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
	uint8_t uintVariables[] = {
 8008250:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
			eepromData[40],
 8008254:	4b4f      	ldr	r3, [pc, #316]	@ (8008394 <mergeData+0x234>)
 8008256:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
	uint8_t uintVariables[] = {
 800825a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
			eepromData[41],
 800825e:	4b4d      	ldr	r3, [pc, #308]	@ (8008394 <mergeData+0x234>)
 8008260:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
	uint8_t uintVariables[] = {
 8008264:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
			eepromData[42],
 8008268:	4b4a      	ldr	r3, [pc, #296]	@ (8008394 <mergeData+0x234>)
 800826a:	f893 302a 	ldrb.w	r3, [r3, #42]	@ 0x2a
	uint8_t uintVariables[] = {
 800826e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
			eepromData[43],
 8008272:	4b48      	ldr	r3, [pc, #288]	@ (8008394 <mergeData+0x234>)
 8008274:	f893 302b 	ldrb.w	r3, [r3, #43]	@ 0x2b
	uint8_t uintVariables[] = {
 8008278:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
			eepromData[44],
 800827c:	4b45      	ldr	r3, [pc, #276]	@ (8008394 <mergeData+0x234>)
 800827e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
	uint8_t uintVariables[] = {
 8008282:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			eepromData[45],
 8008286:	4b43      	ldr	r3, [pc, #268]	@ (8008394 <mergeData+0x234>)
 8008288:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
	uint8_t uintVariables[] = {
 800828c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
			eepromData[46],
 8008290:	4b40      	ldr	r3, [pc, #256]	@ (8008394 <mergeData+0x234>)
 8008292:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
	uint8_t uintVariables[] = {
 8008296:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
			eepromData[47],
 800829a:	4b3e      	ldr	r3, [pc, #248]	@ (8008394 <mergeData+0x234>)
 800829c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
	uint8_t uintVariables[] = {
 80082a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80082a4:	2306      	movs	r3, #6
 80082a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 80082aa:	2300      	movs	r3, #0
 80082ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80082ae:	e015      	b.n	80082dc <mergeData+0x17c>
	    sprintf(temp, "%u", uintVariables[i]);
 80082b0:	463a      	mov	r2, r7
 80082b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80082b4:	4413      	add	r3, r2
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	461a      	mov	r2, r3
 80082ba:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80082be:	4936      	ldr	r1, [pc, #216]	@ (8008398 <mergeData+0x238>)
 80082c0:	4618      	mov	r0, r3
 80082c2:	f004 fe97 	bl	800cff4 <siprintf>
	    strcat(combinedString, temp);
 80082c6:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 80082ca:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80082ce:	4611      	mov	r1, r2
 80082d0:	4618      	mov	r0, r3
 80082d2:	f004 fef1 	bl	800d0b8 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 80082d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80082d8:	3301      	adds	r3, #1
 80082da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80082dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80082de:	2b2b      	cmp	r3, #43	@ 0x2b
 80082e0:	d9e6      	bls.n	80082b0 <mergeData+0x150>
	}

	char* result = malloc(strlen(combinedString) + 1);
 80082e2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80082e6:	4618      	mov	r0, r3
 80082e8:	f7f7 ff9c 	bl	8000224 <strlen>
 80082ec:	4603      	mov	r3, r0
 80082ee:	3301      	adds	r3, #1
 80082f0:	4618      	mov	r0, r3
 80082f2:	f004 fdc9 	bl	800ce88 <malloc>
 80082f6:	4603      	mov	r3, r0
 80082f8:	66bb      	str	r3, [r7, #104]	@ 0x68
	strcpy(result, combinedString);
 80082fa:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80082fe:	4619      	mov	r1, r3
 8008300:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8008302:	f004 ff3f 	bl	800d184 <strcpy>
	return result;
 8008306:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
}
 8008308:	4618      	mov	r0, r3
 800830a:	3770      	adds	r7, #112	@ 0x70
 800830c:	46bd      	mov	sp, r7
 800830e:	bd80      	pop	{r7, pc}
 8008310:	200010af 	.word	0x200010af
 8008314:	200010a1 	.word	0x200010a1
 8008318:	200010a4 	.word	0x200010a4
 800831c:	200010a5 	.word	0x200010a5
 8008320:	200010a6 	.word	0x200010a6
 8008324:	200010ad 	.word	0x200010ad
 8008328:	200010a7 	.word	0x200010a7
 800832c:	200010a8 	.word	0x200010a8
 8008330:	200010ac 	.word	0x200010ac
 8008334:	200010a9 	.word	0x200010a9
 8008338:	200010b9 	.word	0x200010b9
 800833c:	200010aa 	.word	0x200010aa
 8008340:	200010ba 	.word	0x200010ba
 8008344:	200010ab 	.word	0x200010ab
 8008348:	200010bb 	.word	0x200010bb
 800834c:	200010ae 	.word	0x200010ae
 8008350:	200010b0 	.word	0x200010b0
 8008354:	200010b1 	.word	0x200010b1
 8008358:	200010b2 	.word	0x200010b2
 800835c:	200010b3 	.word	0x200010b3
 8008360:	200010b4 	.word	0x200010b4
 8008364:	200010b5 	.word	0x200010b5
 8008368:	200010b6 	.word	0x200010b6
 800836c:	200010b7 	.word	0x200010b7
 8008370:	200010b8 	.word	0x200010b8
 8008374:	200010bc 	.word	0x200010bc
 8008378:	200010be 	.word	0x200010be
 800837c:	2000109d 	.word	0x2000109d
 8008380:	2000109e 	.word	0x2000109e
 8008384:	20000000 	.word	0x20000000
 8008388:	20000001 	.word	0x20000001
 800838c:	2000109f 	.word	0x2000109f
 8008390:	200010c1 	.word	0x200010c1
 8008394:	20000fc8 	.word	0x20000fc8
 8008398:	0800db8c 	.word	0x0800db8c

0800839c <convertAndSendData>:
		strcpy(result, combinedString);
		return result;
	}
}

void convertAndSendData() {
 800839c:	b580      	push	{r7, lr}
 800839e:	b084      	sub	sp, #16
 80083a0:	af02      	add	r7, sp, #8
	lcd_print(1, 1, dataSynchText);
 80083a2:	4a13      	ldr	r2, [pc, #76]	@ (80083f0 <convertAndSendData+0x54>)
 80083a4:	2101      	movs	r1, #1
 80083a6:	2001      	movs	r0, #1
 80083a8:	f000 fa16 	bl	80087d8 <lcd_print>
	lcd_print(2, 1, dataSynch2Text);
 80083ac:	4a11      	ldr	r2, [pc, #68]	@ (80083f4 <convertAndSendData+0x58>)
 80083ae:	2101      	movs	r1, #1
 80083b0:	2002      	movs	r0, #2
 80083b2:	f000 fa11 	bl	80087d8 <lcd_print>

	for(int i=0; i<2; i++) {
 80083b6:	2300      	movs	r3, #0
 80083b8:	607b      	str	r3, [r7, #4]
 80083ba:	e00c      	b.n	80083d6 <convertAndSendData+0x3a>
		sendMachineData(&huart1, machineID, wifiSSID, wifiPass, mergeData());
 80083bc:	f7ff fed0 	bl	8008160 <mergeData>
 80083c0:	4603      	mov	r3, r0
 80083c2:	9300      	str	r3, [sp, #0]
 80083c4:	4b0c      	ldr	r3, [pc, #48]	@ (80083f8 <convertAndSendData+0x5c>)
 80083c6:	4a0d      	ldr	r2, [pc, #52]	@ (80083fc <convertAndSendData+0x60>)
 80083c8:	490d      	ldr	r1, [pc, #52]	@ (8008400 <convertAndSendData+0x64>)
 80083ca:	480e      	ldr	r0, [pc, #56]	@ (8008404 <convertAndSendData+0x68>)
 80083cc:	f7f8 fa3a 	bl	8000844 <sendMachineData>
	for(int i=0; i<2; i++) {
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	3301      	adds	r3, #1
 80083d4:	607b      	str	r3, [r7, #4]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2b01      	cmp	r3, #1
 80083da:	ddef      	ble.n	80083bc <convertAndSendData+0x20>
	}

	HAL_Delay(500);
 80083dc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80083e0:	f000 ff54 	bl	800928c <HAL_Delay>
	lcd_clear();
 80083e4:	f000 fa24 	bl	8008830 <lcd_clear>
}
 80083e8:	bf00      	nop
 80083ea:	3708      	adds	r7, #8
 80083ec:	46bd      	mov	sp, r7
 80083ee:	bd80      	pop	{r7, pc}
 80083f0:	20001778 	.word	0x20001778
 80083f4:	2000178c 	.word	0x2000178c
 80083f8:	20001060 	.word	0x20001060
 80083fc:	2000104c 	.word	0x2000104c
 8008400:	20001040 	.word	0x20001040
 8008404:	200019a4 	.word	0x200019a4

08008408 <iotSetup>:

void iotSetup() {
 8008408:	b580      	push	{r7, lr}
 800840a:	af00      	add	r7, sp, #0
	if(iotMode != 0) {
 800840c:	4b10      	ldr	r3, [pc, #64]	@ (8008450 <iotSetup+0x48>)
 800840e:	781b      	ldrb	r3, [r3, #0]
 8008410:	2b00      	cmp	r3, #0
 8008412:	d016      	beq.n	8008442 <iotSetup+0x3a>
		if(checkEEPROM4ID() != 1) {
 8008414:	f000 f822 	bl	800845c <checkEEPROM4ID>
 8008418:	4603      	mov	r3, r0
 800841a:	2b01      	cmp	r3, #1
 800841c:	d001      	beq.n	8008422 <iotSetup+0x1a>
			takeMachineID();
 800841e:	f7ff fa09 	bl	8007834 <takeMachineID>
		}

		if(!(strlen(wifiSSID) >= 2)) {
 8008422:	480c      	ldr	r0, [pc, #48]	@ (8008454 <iotSetup+0x4c>)
 8008424:	f7f7 fefe 	bl	8000224 <strlen>
 8008428:	4603      	mov	r3, r0
 800842a:	2b01      	cmp	r3, #1
 800842c:	d801      	bhi.n	8008432 <iotSetup+0x2a>
			takeWifiSSID();
 800842e:	f7ff fb83 	bl	8007b38 <takeWifiSSID>
		}

		if(!(strlen(wifiPass) >= 2)) {
 8008432:	4809      	ldr	r0, [pc, #36]	@ (8008458 <iotSetup+0x50>)
 8008434:	f7f7 fef6 	bl	8000224 <strlen>
 8008438:	4603      	mov	r3, r0
 800843a:	2b01      	cmp	r3, #1
 800843c:	d801      	bhi.n	8008442 <iotSetup+0x3a>
			takeWifiPass();
 800843e:	f7ff fd05 	bl	8007e4c <takeWifiPass>
			//goto takeIDSection;
		//}
	//}

	//ESP8266_Init(&huart1, demoWifiSSIDEv, demoWifiPassEv);
	HAL_Delay(500);
 8008442:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008446:	f000 ff21 	bl	800928c <HAL_Delay>
	//convertAndSendData();
}
 800844a:	bf00      	nop
 800844c:	bd80      	pop	{r7, pc}
 800844e:	bf00      	nop
 8008450:	200010bf 	.word	0x200010bf
 8008454:	2000104c 	.word	0x2000104c
 8008458:	20001060 	.word	0x20001060

0800845c <checkEEPROM4ID>:

int checkEEPROM4ID() {
 800845c:	b480      	push	{r7}
 800845e:	b085      	sub	sp, #20
 8008460:	af00      	add	r7, sp, #0
	int eepromVal = idStartPos;
 8008462:	4b0f      	ldr	r3, [pc, #60]	@ (80084a0 <checkEEPROM4ID+0x44>)
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	60fb      	str	r3, [r7, #12]
	int returnVal = 1;
 8008468:	2301      	movs	r3, #1
 800846a:	60bb      	str	r3, [r7, #8]

	for(int i=0; i<machineIDCharacterLimit; i++) {
 800846c:	2300      	movs	r3, #0
 800846e:	607b      	str	r3, [r7, #4]
 8008470:	e00d      	b.n	800848e <checkEEPROM4ID+0x32>
		if(eepromData[eepromVal] == '\0') {
 8008472:	4a0c      	ldr	r2, [pc, #48]	@ (80084a4 <checkEEPROM4ID+0x48>)
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	4413      	add	r3, r2
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d101      	bne.n	8008482 <checkEEPROM4ID+0x26>
			returnVal = 0;
 800847e:	2300      	movs	r3, #0
 8008480:	60bb      	str	r3, [r7, #8]
		}
		eepromVal++;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	3301      	adds	r3, #1
 8008486:	60fb      	str	r3, [r7, #12]
	for(int i=0; i<machineIDCharacterLimit; i++) {
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	3301      	adds	r3, #1
 800848c:	607b      	str	r3, [r7, #4]
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2b0b      	cmp	r3, #11
 8008492:	ddee      	ble.n	8008472 <checkEEPROM4ID+0x16>
	}

	return returnVal;
 8008494:	68bb      	ldr	r3, [r7, #8]
}
 8008496:	4618      	mov	r0, r3
 8008498:	3714      	adds	r7, #20
 800849a:	46bd      	mov	sp, r7
 800849c:	bc80      	pop	{r7}
 800849e:	4770      	bx	lr
 80084a0:	20000004 	.word	0x20000004
 80084a4:	20000fc8 	.word	0x20000fc8

080084a8 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 80084a8:	b580      	push	{r7, lr}
 80084aa:	b086      	sub	sp, #24
 80084ac:	af02      	add	r7, sp, #8
 80084ae:	4603      	mov	r3, r0
 80084b0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80084b2:	79fb      	ldrb	r3, [r7, #7]
 80084b4:	f023 030f 	bic.w	r3, r3, #15
 80084b8:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 80084ba:	79fb      	ldrb	r3, [r7, #7]
 80084bc:	011b      	lsls	r3, r3, #4
 80084be:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80084c0:	7b7b      	ldrb	r3, [r7, #13]
 80084c2:	f043 030c 	orr.w	r3, r3, #12
 80084c6:	b2db      	uxtb	r3, r3
 80084c8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80084ca:	7b7b      	ldrb	r3, [r7, #13]
 80084cc:	f043 0308 	orr.w	r3, r3, #8
 80084d0:	b2db      	uxtb	r3, r3
 80084d2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80084d4:	7b3b      	ldrb	r3, [r7, #12]
 80084d6:	f043 030c 	orr.w	r3, r3, #12
 80084da:	b2db      	uxtb	r3, r3
 80084dc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80084de:	7b3b      	ldrb	r3, [r7, #12]
 80084e0:	f043 0308 	orr.w	r3, r3, #8
 80084e4:	b2db      	uxtb	r3, r3
 80084e6:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80084e8:	bf00      	nop
 80084ea:	4825      	ldr	r0, [pc, #148]	@ (8008580 <lcd_send_cmd+0xd8>)
 80084ec:	f002 fac7 	bl	800aa7e <HAL_I2C_GetError>
 80084f0:	4603      	mov	r3, r0
 80084f2:	2b04      	cmp	r3, #4
 80084f4:	d0f9      	beq.n	80084ea <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80084f6:	bf00      	nop
 80084f8:	4821      	ldr	r0, [pc, #132]	@ (8008580 <lcd_send_cmd+0xd8>)
 80084fa:	f002 fab3 	bl	800aa64 <HAL_I2C_GetState>
 80084fe:	4603      	mov	r3, r0
 8008500:	2b20      	cmp	r3, #32
 8008502:	d1f9      	bne.n	80084f8 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8008504:	4b1f      	ldr	r3, [pc, #124]	@ (8008584 <lcd_send_cmd+0xdc>)
 8008506:	781b      	ldrb	r3, [r3, #0]
 8008508:	2b00      	cmp	r3, #0
 800850a:	d116      	bne.n	800853a <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 800850c:	2300      	movs	r3, #0
 800850e:	73fb      	strb	r3, [r7, #15]
 8008510:	e00f      	b.n	8008532 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 8008512:	7bfb      	ldrb	r3, [r7, #15]
 8008514:	3310      	adds	r3, #16
 8008516:	443b      	add	r3, r7
 8008518:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800851c:	7bfb      	ldrb	r3, [r7, #15]
 800851e:	f022 0208 	bic.w	r2, r2, #8
 8008522:	b2d2      	uxtb	r2, r2
 8008524:	3310      	adds	r3, #16
 8008526:	443b      	add	r3, r7
 8008528:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800852c:	7bfb      	ldrb	r3, [r7, #15]
 800852e:	3301      	adds	r3, #1
 8008530:	73fb      	strb	r3, [r7, #15]
 8008532:	7bfb      	ldrb	r3, [r7, #15]
 8008534:	2b03      	cmp	r3, #3
 8008536:	d9ec      	bls.n	8008512 <lcd_send_cmd+0x6a>
 8008538:	e015      	b.n	8008566 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 800853a:	2300      	movs	r3, #0
 800853c:	73bb      	strb	r3, [r7, #14]
 800853e:	e00f      	b.n	8008560 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8008540:	7bbb      	ldrb	r3, [r7, #14]
 8008542:	3310      	adds	r3, #16
 8008544:	443b      	add	r3, r7
 8008546:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800854a:	7bbb      	ldrb	r3, [r7, #14]
 800854c:	f042 0208 	orr.w	r2, r2, #8
 8008550:	b2d2      	uxtb	r2, r2
 8008552:	3310      	adds	r3, #16
 8008554:	443b      	add	r3, r7
 8008556:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800855a:	7bbb      	ldrb	r3, [r7, #14]
 800855c:	3301      	adds	r3, #1
 800855e:	73bb      	strb	r3, [r7, #14]
 8008560:	7bbb      	ldrb	r3, [r7, #14]
 8008562:	2b03      	cmp	r3, #3
 8008564:	d9ec      	bls.n	8008540 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8008566:	f107 0208 	add.w	r2, r7, #8
 800856a:	2364      	movs	r3, #100	@ 0x64
 800856c:	9300      	str	r3, [sp, #0]
 800856e:	2304      	movs	r3, #4
 8008570:	214e      	movs	r1, #78	@ 0x4e
 8008572:	4803      	ldr	r0, [pc, #12]	@ (8008580 <lcd_send_cmd+0xd8>)
 8008574:	f001 fe16 	bl	800a1a4 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8008578:	bf00      	nop
 800857a:	3710      	adds	r7, #16
 800857c:	46bd      	mov	sp, r7
 800857e:	bd80      	pop	{r7, pc}
 8008580:	20001908 	.word	0x20001908
 8008584:	200018dd 	.word	0x200018dd

08008588 <lcd_send_data>:

void lcd_send_data (char data) {
 8008588:	b580      	push	{r7, lr}
 800858a:	b086      	sub	sp, #24
 800858c:	af02      	add	r7, sp, #8
 800858e:	4603      	mov	r3, r0
 8008590:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8008592:	79fb      	ldrb	r3, [r7, #7]
 8008594:	f023 030f 	bic.w	r3, r3, #15
 8008598:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 800859a:	79fb      	ldrb	r3, [r7, #7]
 800859c:	011b      	lsls	r3, r3, #4
 800859e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80085a0:	7b7b      	ldrb	r3, [r7, #13]
 80085a2:	f043 030d 	orr.w	r3, r3, #13
 80085a6:	b2db      	uxtb	r3, r3
 80085a8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80085aa:	7b7b      	ldrb	r3, [r7, #13]
 80085ac:	f043 0309 	orr.w	r3, r3, #9
 80085b0:	b2db      	uxtb	r3, r3
 80085b2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80085b4:	7b3b      	ldrb	r3, [r7, #12]
 80085b6:	f043 030d 	orr.w	r3, r3, #13
 80085ba:	b2db      	uxtb	r3, r3
 80085bc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80085be:	7b3b      	ldrb	r3, [r7, #12]
 80085c0:	f043 0309 	orr.w	r3, r3, #9
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80085c8:	bf00      	nop
 80085ca:	4825      	ldr	r0, [pc, #148]	@ (8008660 <lcd_send_data+0xd8>)
 80085cc:	f002 fa57 	bl	800aa7e <HAL_I2C_GetError>
 80085d0:	4603      	mov	r3, r0
 80085d2:	2b04      	cmp	r3, #4
 80085d4:	d0f9      	beq.n	80085ca <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80085d6:	bf00      	nop
 80085d8:	4821      	ldr	r0, [pc, #132]	@ (8008660 <lcd_send_data+0xd8>)
 80085da:	f002 fa43 	bl	800aa64 <HAL_I2C_GetState>
 80085de:	4603      	mov	r3, r0
 80085e0:	2b20      	cmp	r3, #32
 80085e2:	d1f9      	bne.n	80085d8 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 80085e4:	4b1f      	ldr	r3, [pc, #124]	@ (8008664 <lcd_send_data+0xdc>)
 80085e6:	781b      	ldrb	r3, [r3, #0]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d116      	bne.n	800861a <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80085ec:	2300      	movs	r3, #0
 80085ee:	73fb      	strb	r3, [r7, #15]
 80085f0:	e00f      	b.n	8008612 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 80085f2:	7bfb      	ldrb	r3, [r7, #15]
 80085f4:	3310      	adds	r3, #16
 80085f6:	443b      	add	r3, r7
 80085f8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80085fc:	7bfb      	ldrb	r3, [r7, #15]
 80085fe:	f022 0208 	bic.w	r2, r2, #8
 8008602:	b2d2      	uxtb	r2, r2
 8008604:	3310      	adds	r3, #16
 8008606:	443b      	add	r3, r7
 8008608:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800860c:	7bfb      	ldrb	r3, [r7, #15]
 800860e:	3301      	adds	r3, #1
 8008610:	73fb      	strb	r3, [r7, #15]
 8008612:	7bfb      	ldrb	r3, [r7, #15]
 8008614:	2b03      	cmp	r3, #3
 8008616:	d9ec      	bls.n	80085f2 <lcd_send_data+0x6a>
 8008618:	e015      	b.n	8008646 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 800861a:	2300      	movs	r3, #0
 800861c:	73bb      	strb	r3, [r7, #14]
 800861e:	e00f      	b.n	8008640 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8008620:	7bbb      	ldrb	r3, [r7, #14]
 8008622:	3310      	adds	r3, #16
 8008624:	443b      	add	r3, r7
 8008626:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800862a:	7bbb      	ldrb	r3, [r7, #14]
 800862c:	f042 0208 	orr.w	r2, r2, #8
 8008630:	b2d2      	uxtb	r2, r2
 8008632:	3310      	adds	r3, #16
 8008634:	443b      	add	r3, r7
 8008636:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800863a:	7bbb      	ldrb	r3, [r7, #14]
 800863c:	3301      	adds	r3, #1
 800863e:	73bb      	strb	r3, [r7, #14]
 8008640:	7bbb      	ldrb	r3, [r7, #14]
 8008642:	2b03      	cmp	r3, #3
 8008644:	d9ec      	bls.n	8008620 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8008646:	f107 0208 	add.w	r2, r7, #8
 800864a:	2364      	movs	r3, #100	@ 0x64
 800864c:	9300      	str	r3, [sp, #0]
 800864e:	2304      	movs	r3, #4
 8008650:	214e      	movs	r1, #78	@ 0x4e
 8008652:	4803      	ldr	r0, [pc, #12]	@ (8008660 <lcd_send_data+0xd8>)
 8008654:	f001 fda6 	bl	800a1a4 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8008658:	bf00      	nop
 800865a:	3710      	adds	r7, #16
 800865c:	46bd      	mov	sp, r7
 800865e:	bd80      	pop	{r7, pc}
 8008660:	20001908 	.word	0x20001908
 8008664:	200018dd 	.word	0x200018dd

08008668 <lcd_send_string>:

void lcd_send_string (char *str) {
 8008668:	b580      	push	{r7, lr}
 800866a:	b082      	sub	sp, #8
 800866c:	af00      	add	r7, sp, #0
 800866e:	6078      	str	r0, [r7, #4]
	while (*str) {
 8008670:	e006      	b.n	8008680 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	1c5a      	adds	r2, r3, #1
 8008676:	607a      	str	r2, [r7, #4]
 8008678:	781b      	ldrb	r3, [r3, #0]
 800867a:	4618      	mov	r0, r3
 800867c:	f7ff ff84 	bl	8008588 <lcd_send_data>
	while (*str) {
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	781b      	ldrb	r3, [r3, #0]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d1f4      	bne.n	8008672 <lcd_send_string+0xa>
	}
}
 8008688:	bf00      	nop
 800868a:	bf00      	nop
 800868c:	3708      	adds	r7, #8
 800868e:	46bd      	mov	sp, r7
 8008690:	bd80      	pop	{r7, pc}
	...

08008694 <lcd_send_char>:

void lcd_send_char(char ch) {
 8008694:	b580      	push	{r7, lr}
 8008696:	b086      	sub	sp, #24
 8008698:	af02      	add	r7, sp, #8
 800869a:	4603      	mov	r3, r0
 800869c:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 800869e:	79fb      	ldrb	r3, [r7, #7]
 80086a0:	f023 030f 	bic.w	r3, r3, #15
 80086a4:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 80086a6:	79fb      	ldrb	r3, [r7, #7]
 80086a8:	011b      	lsls	r3, r3, #4
 80086aa:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 80086ac:	7b7b      	ldrb	r3, [r7, #13]
 80086ae:	f043 030d 	orr.w	r3, r3, #13
 80086b2:	b2db      	uxtb	r3, r3
 80086b4:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 80086b6:	7b7b      	ldrb	r3, [r7, #13]
 80086b8:	f043 0309 	orr.w	r3, r3, #9
 80086bc:	b2db      	uxtb	r3, r3
 80086be:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 80086c0:	7b3b      	ldrb	r3, [r7, #12]
 80086c2:	f043 030d 	orr.w	r3, r3, #13
 80086c6:	b2db      	uxtb	r3, r3
 80086c8:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 80086ca:	7b3b      	ldrb	r3, [r7, #12]
 80086cc:	f043 0309 	orr.w	r3, r3, #9
 80086d0:	b2db      	uxtb	r3, r3
 80086d2:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80086d4:	bf00      	nop
 80086d6:	4825      	ldr	r0, [pc, #148]	@ (800876c <lcd_send_char+0xd8>)
 80086d8:	f002 f9d1 	bl	800aa7e <HAL_I2C_GetError>
 80086dc:	4603      	mov	r3, r0
 80086de:	2b04      	cmp	r3, #4
 80086e0:	d0f9      	beq.n	80086d6 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80086e2:	bf00      	nop
 80086e4:	4821      	ldr	r0, [pc, #132]	@ (800876c <lcd_send_char+0xd8>)
 80086e6:	f002 f9bd 	bl	800aa64 <HAL_I2C_GetState>
 80086ea:	4603      	mov	r3, r0
 80086ec:	2b20      	cmp	r3, #32
 80086ee:	d1f9      	bne.n	80086e4 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 80086f0:	4b1f      	ldr	r3, [pc, #124]	@ (8008770 <lcd_send_char+0xdc>)
 80086f2:	781b      	ldrb	r3, [r3, #0]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d116      	bne.n	8008726 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 80086f8:	2300      	movs	r3, #0
 80086fa:	73fb      	strb	r3, [r7, #15]
 80086fc:	e00f      	b.n	800871e <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 80086fe:	7bfb      	ldrb	r3, [r7, #15]
 8008700:	3310      	adds	r3, #16
 8008702:	443b      	add	r3, r7
 8008704:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008708:	7bfb      	ldrb	r3, [r7, #15]
 800870a:	f022 0208 	bic.w	r2, r2, #8
 800870e:	b2d2      	uxtb	r2, r2
 8008710:	3310      	adds	r3, #16
 8008712:	443b      	add	r3, r7
 8008714:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8008718:	7bfb      	ldrb	r3, [r7, #15]
 800871a:	3301      	adds	r3, #1
 800871c:	73fb      	strb	r3, [r7, #15]
 800871e:	7bfb      	ldrb	r3, [r7, #15]
 8008720:	2b03      	cmp	r3, #3
 8008722:	d9ec      	bls.n	80086fe <lcd_send_char+0x6a>
 8008724:	e015      	b.n	8008752 <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8008726:	2300      	movs	r3, #0
 8008728:	73bb      	strb	r3, [r7, #14]
 800872a:	e00f      	b.n	800874c <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 800872c:	7bbb      	ldrb	r3, [r7, #14]
 800872e:	3310      	adds	r3, #16
 8008730:	443b      	add	r3, r7
 8008732:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8008736:	7bbb      	ldrb	r3, [r7, #14]
 8008738:	f042 0208 	orr.w	r2, r2, #8
 800873c:	b2d2      	uxtb	r2, r2
 800873e:	3310      	adds	r3, #16
 8008740:	443b      	add	r3, r7
 8008742:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8008746:	7bbb      	ldrb	r3, [r7, #14]
 8008748:	3301      	adds	r3, #1
 800874a:	73bb      	strb	r3, [r7, #14]
 800874c:	7bbb      	ldrb	r3, [r7, #14]
 800874e:	2b03      	cmp	r3, #3
 8008750:	d9ec      	bls.n	800872c <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8008752:	f107 0208 	add.w	r2, r7, #8
 8008756:	2364      	movs	r3, #100	@ 0x64
 8008758:	9300      	str	r3, [sp, #0]
 800875a:	2304      	movs	r3, #4
 800875c:	214e      	movs	r1, #78	@ 0x4e
 800875e:	4803      	ldr	r0, [pc, #12]	@ (800876c <lcd_send_char+0xd8>)
 8008760:	f001 fd20 	bl	800a1a4 <HAL_I2C_Master_Transmit>
}
 8008764:	bf00      	nop
 8008766:	3710      	adds	r7, #16
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}
 800876c:	20001908 	.word	0x20001908
 8008770:	200018dd 	.word	0x200018dd

08008774 <lcd_init>:

void lcd_init (void) {
 8008774:	b580      	push	{r7, lr}
 8008776:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8008778:	2002      	movs	r0, #2
 800877a:	f7ff fe95 	bl	80084a8 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 800877e:	2028      	movs	r0, #40	@ 0x28
 8008780:	f7ff fe92 	bl	80084a8 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8008784:	200c      	movs	r0, #12
 8008786:	f7ff fe8f 	bl	80084a8 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 800878a:	2080      	movs	r0, #128	@ 0x80
 800878c:	f7ff fe8c 	bl	80084a8 <lcd_send_cmd>
	lcd_backlight(1);
 8008790:	2001      	movs	r0, #1
 8008792:	f000 f86d 	bl	8008870 <lcd_backlight>
}
 8008796:	bf00      	nop
 8008798:	bd80      	pop	{r7, pc}

0800879a <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 800879a:	b580      	push	{r7, lr}
 800879c:	b082      	sub	sp, #8
 800879e:	af00      	add	r7, sp, #0
 80087a0:	4603      	mov	r3, r0
 80087a2:	460a      	mov	r2, r1
 80087a4:	71fb      	strb	r3, [r7, #7]
 80087a6:	4613      	mov	r3, r2
 80087a8:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 80087aa:	79fb      	ldrb	r3, [r7, #7]
 80087ac:	2b01      	cmp	r3, #1
 80087ae:	d106      	bne.n	80087be <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 80087b0:	79bb      	ldrb	r3, [r7, #6]
 80087b2:	337f      	adds	r3, #127	@ 0x7f
 80087b4:	b2db      	uxtb	r3, r3
 80087b6:	4618      	mov	r0, r3
 80087b8:	f7ff fe76 	bl	80084a8 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 80087bc:	e008      	b.n	80087d0 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 80087be:	79fb      	ldrb	r3, [r7, #7]
 80087c0:	2b02      	cmp	r3, #2
 80087c2:	d105      	bne.n	80087d0 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 80087c4:	79bb      	ldrb	r3, [r7, #6]
 80087c6:	3b41      	subs	r3, #65	@ 0x41
 80087c8:	b2db      	uxtb	r3, r3
 80087ca:	4618      	mov	r0, r3
 80087cc:	f7ff fe6c 	bl	80084a8 <lcd_send_cmd>
}
 80087d0:	bf00      	nop
 80087d2:	3708      	adds	r7, #8
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}

080087d8 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 80087d8:	b580      	push	{r7, lr}
 80087da:	b082      	sub	sp, #8
 80087dc:	af00      	add	r7, sp, #0
 80087de:	4603      	mov	r3, r0
 80087e0:	603a      	str	r2, [r7, #0]
 80087e2:	71fb      	strb	r3, [r7, #7]
 80087e4:	460b      	mov	r3, r1
 80087e6:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 80087e8:	79ba      	ldrb	r2, [r7, #6]
 80087ea:	79fb      	ldrb	r3, [r7, #7]
 80087ec:	4611      	mov	r1, r2
 80087ee:	4618      	mov	r0, r3
 80087f0:	f7ff ffd3 	bl	800879a <lcd_gotoxy>
	lcd_send_string(str);
 80087f4:	6838      	ldr	r0, [r7, #0]
 80087f6:	f7ff ff37 	bl	8008668 <lcd_send_string>
}
 80087fa:	bf00      	nop
 80087fc:	3708      	adds	r7, #8
 80087fe:	46bd      	mov	sp, r7
 8008800:	bd80      	pop	{r7, pc}

08008802 <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8008802:	b580      	push	{r7, lr}
 8008804:	b082      	sub	sp, #8
 8008806:	af00      	add	r7, sp, #0
 8008808:	4603      	mov	r3, r0
 800880a:	71fb      	strb	r3, [r7, #7]
 800880c:	460b      	mov	r3, r1
 800880e:	71bb      	strb	r3, [r7, #6]
 8008810:	4613      	mov	r3, r2
 8008812:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 8008814:	79ba      	ldrb	r2, [r7, #6]
 8008816:	79fb      	ldrb	r3, [r7, #7]
 8008818:	4611      	mov	r1, r2
 800881a:	4618      	mov	r0, r3
 800881c:	f7ff ffbd 	bl	800879a <lcd_gotoxy>
    lcd_send_char(ch);
 8008820:	797b      	ldrb	r3, [r7, #5]
 8008822:	4618      	mov	r0, r3
 8008824:	f7ff ff36 	bl	8008694 <lcd_send_char>
}
 8008828:	bf00      	nop
 800882a:	3708      	adds	r7, #8
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}

08008830 <lcd_clear>:

void lcd_clear(void) {
 8008830:	b580      	push	{r7, lr}
 8008832:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8008834:	2001      	movs	r0, #1
 8008836:	f7ff fe37 	bl	80084a8 <lcd_send_cmd>
    HAL_Delay(2);
 800883a:	2002      	movs	r0, #2
 800883c:	f000 fd26 	bl	800928c <HAL_Delay>
}
 8008840:	bf00      	nop
 8008842:	bd80      	pop	{r7, pc}

08008844 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8008844:	b580      	push	{r7, lr}
 8008846:	b082      	sub	sp, #8
 8008848:	af00      	add	r7, sp, #0
 800884a:	4603      	mov	r3, r0
 800884c:	460a      	mov	r2, r1
 800884e:	71fb      	strb	r3, [r7, #7]
 8008850:	4613      	mov	r3, r2
 8008852:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8008854:	79ba      	ldrb	r2, [r7, #6]
 8008856:	79fb      	ldrb	r3, [r7, #7]
 8008858:	4611      	mov	r1, r2
 800885a:	4618      	mov	r0, r3
 800885c:	f7ff ff9d 	bl	800879a <lcd_gotoxy>

    lcd_send_char(' ');
 8008860:	2020      	movs	r0, #32
 8008862:	f7ff ff17 	bl	8008694 <lcd_send_char>
}
 8008866:	bf00      	nop
 8008868:	3708      	adds	r7, #8
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}
	...

08008870 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8008870:	b580      	push	{r7, lr}
 8008872:	b082      	sub	sp, #8
 8008874:	af00      	add	r7, sp, #0
 8008876:	4603      	mov	r3, r0
 8008878:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 800887a:	4a05      	ldr	r2, [pc, #20]	@ (8008890 <lcd_backlight+0x20>)
 800887c:	79fb      	ldrb	r3, [r7, #7]
 800887e:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8008880:	2000      	movs	r0, #0
 8008882:	f7ff fe11 	bl	80084a8 <lcd_send_cmd>
}
 8008886:	bf00      	nop
 8008888:	3708      	adds	r7, #8
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}
 800888e:	bf00      	nop
 8008890:	200018dd 	.word	0x200018dd

08008894 <lcd_cursor>:

void lcd_cursor(int state) {
 8008894:	b580      	push	{r7, lr}
 8008896:	b082      	sub	sp, #8
 8008898:	af00      	add	r7, sp, #0
 800889a:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	2b01      	cmp	r3, #1
 80088a0:	d106      	bne.n	80088b0 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 80088a2:	200e      	movs	r0, #14
 80088a4:	f7ff fe00 	bl	80084a8 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 80088a8:	200f      	movs	r0, #15
 80088aa:	f7ff fdfd 	bl	80084a8 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 80088ae:	e002      	b.n	80088b6 <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 80088b0:	200c      	movs	r0, #12
 80088b2:	f7ff fdf9 	bl	80084a8 <lcd_send_cmd>
}
 80088b6:	bf00      	nop
 80088b8:	3708      	adds	r7, #8
 80088ba:	46bd      	mov	sp, r7
 80088bc:	bd80      	pop	{r7, pc}
	...

080088c0 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 80088c0:	b480      	push	{r7}
 80088c2:	b083      	sub	sp, #12
 80088c4:	af00      	add	r7, sp, #0
 80088c6:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 80088c8:	4b04      	ldr	r3, [pc, #16]	@ (80088dc <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	3301      	adds	r3, #1
 80088ce:	4a03      	ldr	r2, [pc, #12]	@ (80088dc <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80088d0:	6013      	str	r3, [r2, #0]
}
 80088d2:	bf00      	nop
 80088d4:	370c      	adds	r7, #12
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bc80      	pop	{r7}
 80088da:	4770      	bx	lr
 80088dc:	20001078 	.word	0x20001078

080088e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80088e4:	f000 fc70 	bl	80091c8 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 80088e8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80088ec:	f000 fcce 	bl	800928c <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80088f0:	f000 f89c 	bl	8008a2c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80088f4:	f000 f9be 	bl	8008c74 <MX_GPIO_Init>
  MX_CAN_Init();
 80088f8:	f000 f8de 	bl	8008ab8 <MX_CAN_Init>
  MX_I2C1_Init();
 80088fc:	f000 f910 	bl	8008b20 <MX_I2C1_Init>
  MX_TIM1_Init();
 8008900:	f000 f93c 	bl	8008b7c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8008904:	f000 f98c 	bl	8008c20 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8008908:	2201      	movs	r2, #1
 800890a:	2140      	movs	r1, #64	@ 0x40
 800890c:	483e      	ldr	r0, [pc, #248]	@ (8008a08 <main+0x128>)
 800890e:	f001 faa4 	bl	8009e5a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8008912:	2201      	movs	r2, #1
 8008914:	2180      	movs	r1, #128	@ 0x80
 8008916:	483c      	ldr	r0, [pc, #240]	@ (8008a08 <main+0x128>)
 8008918:	f001 fa9f 	bl	8009e5a <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800891c:	200a      	movs	r0, #10
 800891e:	f000 fcb5 	bl	800928c <HAL_Delay>
  lcd_init();
 8008922:	f7ff ff27 	bl	8008774 <lcd_init>
  HAL_Delay(10);
 8008926:	200a      	movs	r0, #10
 8008928:	f000 fcb0 	bl	800928c <HAL_Delay>

  HAL_TIM_Base_Start_IT(&htim1);
 800892c:	4837      	ldr	r0, [pc, #220]	@ (8008a0c <main+0x12c>)
 800892e:	f003 f947 	bl	800bbc0 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008932:	bf00      	nop
 8008934:	4836      	ldr	r0, [pc, #216]	@ (8008a10 <main+0x130>)
 8008936:	f002 f8a2 	bl	800aa7e <HAL_I2C_GetError>
 800893a:	4603      	mov	r3, r0
 800893c:	2b04      	cmp	r3, #4
 800893e:	d0f9      	beq.n	8008934 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008940:	bf00      	nop
 8008942:	4833      	ldr	r0, [pc, #204]	@ (8008a10 <main+0x130>)
 8008944:	f002 f88e 	bl	800aa64 <HAL_I2C_GetState>
 8008948:	4603      	mov	r3, r0
 800894a:	2b20      	cmp	r3, #32
 800894c:	d1f9      	bne.n	8008942 <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 800894e:	2200      	movs	r2, #0
 8008950:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8008954:	482c      	ldr	r0, [pc, #176]	@ (8008a08 <main+0x128>)
 8008956:	f001 fa80 	bl	8009e5a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800895a:	2200      	movs	r2, #0
 800895c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8008960:	4829      	ldr	r0, [pc, #164]	@ (8008a08 <main+0x128>)
 8008962:	f001 fa7a 	bl	8009e5a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8008966:	2200      	movs	r2, #0
 8008968:	2104      	movs	r1, #4
 800896a:	4827      	ldr	r0, [pc, #156]	@ (8008a08 <main+0x128>)
 800896c:	f001 fa75 	bl	8009e5a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8008970:	2200      	movs	r2, #0
 8008972:	2102      	movs	r1, #2
 8008974:	4824      	ldr	r0, [pc, #144]	@ (8008a08 <main+0x128>)
 8008976:	f001 fa70 	bl	8009e5a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800897a:	2200      	movs	r2, #0
 800897c:	2101      	movs	r1, #1
 800897e:	4822      	ldr	r0, [pc, #136]	@ (8008a08 <main+0x128>)
 8008980:	f001 fa6b 	bl	8009e5a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8008984:	2200      	movs	r2, #0
 8008986:	2120      	movs	r1, #32
 8008988:	4822      	ldr	r0, [pc, #136]	@ (8008a14 <main+0x134>)
 800898a:	f001 fa66 	bl	8009e5a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800898e:	2200      	movs	r2, #0
 8008990:	2110      	movs	r1, #16
 8008992:	4820      	ldr	r0, [pc, #128]	@ (8008a14 <main+0x134>)
 8008994:	f001 fa61 	bl	8009e5a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8008998:	2200      	movs	r2, #0
 800899a:	2180      	movs	r1, #128	@ 0x80
 800899c:	481e      	ldr	r0, [pc, #120]	@ (8008a18 <main+0x138>)
 800899e:	f001 fa5c 	bl	8009e5a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80089a2:	2200      	movs	r2, #0
 80089a4:	2140      	movs	r1, #64	@ 0x40
 80089a6:	481c      	ldr	r0, [pc, #112]	@ (8008a18 <main+0x138>)
 80089a8:	f001 fa57 	bl	8009e5a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80089ac:	2200      	movs	r2, #0
 80089ae:	2120      	movs	r1, #32
 80089b0:	4819      	ldr	r0, [pc, #100]	@ (8008a18 <main+0x138>)
 80089b2:	f001 fa52 	bl	8009e5a <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 80089b6:	2200      	movs	r2, #0
 80089b8:	2110      	movs	r1, #16
 80089ba:	4817      	ldr	r0, [pc, #92]	@ (8008a18 <main+0x138>)
 80089bc:	f001 fa4d 	bl	8009e5a <HAL_GPIO_WritePin>

  i2cTest();
 80089c0:	f7f8 f8e4 	bl	8000b8c <i2cTest>
  HAL_Delay(100);
 80089c4:	2064      	movs	r0, #100	@ 0x64
 80089c6:	f000 fc61 	bl	800928c <HAL_Delay>
  lcd_print(1, 1, splashTextGN);
 80089ca:	4a14      	ldr	r2, [pc, #80]	@ (8008a1c <main+0x13c>)
 80089cc:	2101      	movs	r1, #1
 80089ce:	2001      	movs	r0, #1
 80089d0:	f7ff ff02 	bl	80087d8 <lcd_print>
  lcd_print(2, 1, splashText2GN);
 80089d4:	4a12      	ldr	r2, [pc, #72]	@ (8008a20 <main+0x140>)
 80089d6:	2101      	movs	r1, #1
 80089d8:	2002      	movs	r0, #2
 80089da:	f7ff fefd 	bl	80087d8 <lcd_print>
  HAL_Delay(1000);
 80089de:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80089e2:	f000 fc53 	bl	800928c <HAL_Delay>
  lcd_clear();
 80089e6:	f7ff ff23 	bl	8008830 <lcd_clear>

  eepromKontrol();
 80089ea:	f7f7 fc23 	bl	8000234 <eepromKontrol>
  HAL_Delay(500);
 80089ee:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80089f2:	f000 fc4b 	bl	800928c <HAL_Delay>

  backLightTimer = millis;
 80089f6:	4b0b      	ldr	r3, [pc, #44]	@ (8008a24 <main+0x144>)
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	4a0b      	ldr	r2, [pc, #44]	@ (8008a28 <main+0x148>)
 80089fc:	6013      	str	r3, [r2, #0]

  iotSetup();
 80089fe:	f7ff fd03 	bl	8008408 <iotSetup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8008a02:	f7fd f923 	bl	8005c4c <mainLoop>
 8008a06:	e7fc      	b.n	8008a02 <main+0x122>
 8008a08:	40010c00 	.word	0x40010c00
 8008a0c:	2000195c 	.word	0x2000195c
 8008a10:	20001908 	.word	0x20001908
 8008a14:	40011000 	.word	0x40011000
 8008a18:	40010800 	.word	0x40010800
 8008a1c:	200000a0 	.word	0x200000a0
 8008a20:	200000b4 	.word	0x200000b4
 8008a24:	20001078 	.word	0x20001078
 8008a28:	20001094 	.word	0x20001094

08008a2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b090      	sub	sp, #64	@ 0x40
 8008a30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008a32:	f107 0318 	add.w	r3, r7, #24
 8008a36:	2228      	movs	r2, #40	@ 0x28
 8008a38:	2100      	movs	r1, #0
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	f004 fb5e 	bl	800d0fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008a40:	1d3b      	adds	r3, r7, #4
 8008a42:	2200      	movs	r2, #0
 8008a44:	601a      	str	r2, [r3, #0]
 8008a46:	605a      	str	r2, [r3, #4]
 8008a48:	609a      	str	r2, [r3, #8]
 8008a4a:	60da      	str	r2, [r3, #12]
 8008a4c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008a4e:	2301      	movs	r3, #1
 8008a50:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008a52:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008a56:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008a60:	2302      	movs	r3, #2
 8008a62:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008a64:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008a68:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8008a6a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8008a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008a70:	f107 0318 	add.w	r3, r7, #24
 8008a74:	4618      	mov	r0, r3
 8008a76:	f002 fc43 	bl	800b300 <HAL_RCC_OscConfig>
 8008a7a:	4603      	mov	r3, r0
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	d001      	beq.n	8008a84 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8008a80:	f000 f9a2 	bl	8008dc8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008a84:	230f      	movs	r3, #15
 8008a86:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008a88:	2302      	movs	r3, #2
 8008a8a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008a90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008a94:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008a96:	2300      	movs	r3, #0
 8008a98:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008a9a:	1d3b      	adds	r3, r7, #4
 8008a9c:	2102      	movs	r1, #2
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f002 feb0 	bl	800b804 <HAL_RCC_ClockConfig>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d001      	beq.n	8008aae <SystemClock_Config+0x82>
  {
    Error_Handler();
 8008aaa:	f000 f98d 	bl	8008dc8 <Error_Handler>
  }
}
 8008aae:	bf00      	nop
 8008ab0:	3740      	adds	r7, #64	@ 0x40
 8008ab2:	46bd      	mov	sp, r7
 8008ab4:	bd80      	pop	{r7, pc}
	...

08008ab8 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8008abc:	4b16      	ldr	r3, [pc, #88]	@ (8008b18 <MX_CAN_Init+0x60>)
 8008abe:	4a17      	ldr	r2, [pc, #92]	@ (8008b1c <MX_CAN_Init+0x64>)
 8008ac0:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8008ac2:	4b15      	ldr	r3, [pc, #84]	@ (8008b18 <MX_CAN_Init+0x60>)
 8008ac4:	2210      	movs	r2, #16
 8008ac6:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8008ac8:	4b13      	ldr	r3, [pc, #76]	@ (8008b18 <MX_CAN_Init+0x60>)
 8008aca:	2200      	movs	r2, #0
 8008acc:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8008ace:	4b12      	ldr	r3, [pc, #72]	@ (8008b18 <MX_CAN_Init+0x60>)
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8008ad4:	4b10      	ldr	r3, [pc, #64]	@ (8008b18 <MX_CAN_Init+0x60>)
 8008ad6:	2200      	movs	r2, #0
 8008ad8:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8008ada:	4b0f      	ldr	r3, [pc, #60]	@ (8008b18 <MX_CAN_Init+0x60>)
 8008adc:	2200      	movs	r2, #0
 8008ade:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8008ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8008b18 <MX_CAN_Init+0x60>)
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8008ae6:	4b0c      	ldr	r3, [pc, #48]	@ (8008b18 <MX_CAN_Init+0x60>)
 8008ae8:	2200      	movs	r2, #0
 8008aea:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8008aec:	4b0a      	ldr	r3, [pc, #40]	@ (8008b18 <MX_CAN_Init+0x60>)
 8008aee:	2200      	movs	r2, #0
 8008af0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8008af2:	4b09      	ldr	r3, [pc, #36]	@ (8008b18 <MX_CAN_Init+0x60>)
 8008af4:	2200      	movs	r2, #0
 8008af6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8008af8:	4b07      	ldr	r3, [pc, #28]	@ (8008b18 <MX_CAN_Init+0x60>)
 8008afa:	2200      	movs	r2, #0
 8008afc:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8008afe:	4b06      	ldr	r3, [pc, #24]	@ (8008b18 <MX_CAN_Init+0x60>)
 8008b00:	2200      	movs	r2, #0
 8008b02:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8008b04:	4804      	ldr	r0, [pc, #16]	@ (8008b18 <MX_CAN_Init+0x60>)
 8008b06:	f000 fbe5 	bl	80092d4 <HAL_CAN_Init>
 8008b0a:	4603      	mov	r3, r0
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d001      	beq.n	8008b14 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8008b10:	f000 f95a 	bl	8008dc8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8008b14:	bf00      	nop
 8008b16:	bd80      	pop	{r7, pc}
 8008b18:	200018e0 	.word	0x200018e0
 8008b1c:	40006400 	.word	0x40006400

08008b20 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8008b24:	4b12      	ldr	r3, [pc, #72]	@ (8008b70 <MX_I2C1_Init+0x50>)
 8008b26:	4a13      	ldr	r2, [pc, #76]	@ (8008b74 <MX_I2C1_Init+0x54>)
 8008b28:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8008b2a:	4b11      	ldr	r3, [pc, #68]	@ (8008b70 <MX_I2C1_Init+0x50>)
 8008b2c:	4a12      	ldr	r2, [pc, #72]	@ (8008b78 <MX_I2C1_Init+0x58>)
 8008b2e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008b30:	4b0f      	ldr	r3, [pc, #60]	@ (8008b70 <MX_I2C1_Init+0x50>)
 8008b32:	2200      	movs	r2, #0
 8008b34:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8008b36:	4b0e      	ldr	r3, [pc, #56]	@ (8008b70 <MX_I2C1_Init+0x50>)
 8008b38:	2200      	movs	r2, #0
 8008b3a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8008b70 <MX_I2C1_Init+0x50>)
 8008b3e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8008b42:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008b44:	4b0a      	ldr	r3, [pc, #40]	@ (8008b70 <MX_I2C1_Init+0x50>)
 8008b46:	2200      	movs	r2, #0
 8008b48:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8008b4a:	4b09      	ldr	r3, [pc, #36]	@ (8008b70 <MX_I2C1_Init+0x50>)
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008b50:	4b07      	ldr	r3, [pc, #28]	@ (8008b70 <MX_I2C1_Init+0x50>)
 8008b52:	2200      	movs	r2, #0
 8008b54:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008b56:	4b06      	ldr	r3, [pc, #24]	@ (8008b70 <MX_I2C1_Init+0x50>)
 8008b58:	2200      	movs	r2, #0
 8008b5a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008b5c:	4804      	ldr	r0, [pc, #16]	@ (8008b70 <MX_I2C1_Init+0x50>)
 8008b5e:	f001 f9ad 	bl	8009ebc <HAL_I2C_Init>
 8008b62:	4603      	mov	r3, r0
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d001      	beq.n	8008b6c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008b68:	f000 f92e 	bl	8008dc8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8008b6c:	bf00      	nop
 8008b6e:	bd80      	pop	{r7, pc}
 8008b70:	20001908 	.word	0x20001908
 8008b74:	40005400 	.word	0x40005400
 8008b78:	00061a80 	.word	0x00061a80

08008b7c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8008b7c:	b580      	push	{r7, lr}
 8008b7e:	b086      	sub	sp, #24
 8008b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008b82:	f107 0308 	add.w	r3, r7, #8
 8008b86:	2200      	movs	r2, #0
 8008b88:	601a      	str	r2, [r3, #0]
 8008b8a:	605a      	str	r2, [r3, #4]
 8008b8c:	609a      	str	r2, [r3, #8]
 8008b8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008b90:	463b      	mov	r3, r7
 8008b92:	2200      	movs	r2, #0
 8008b94:	601a      	str	r2, [r3, #0]
 8008b96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008b98:	4b1f      	ldr	r3, [pc, #124]	@ (8008c18 <MX_TIM1_Init+0x9c>)
 8008b9a:	4a20      	ldr	r2, [pc, #128]	@ (8008c1c <MX_TIM1_Init+0xa0>)
 8008b9c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8008b9e:	4b1e      	ldr	r3, [pc, #120]	@ (8008c18 <MX_TIM1_Init+0x9c>)
 8008ba0:	f648 429f 	movw	r2, #35999	@ 0x8c9f
 8008ba4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008ba6:	4b1c      	ldr	r3, [pc, #112]	@ (8008c18 <MX_TIM1_Init+0x9c>)
 8008ba8:	2200      	movs	r2, #0
 8008baa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8008bac:	4b1a      	ldr	r3, [pc, #104]	@ (8008c18 <MX_TIM1_Init+0x9c>)
 8008bae:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8008bb2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008bb4:	4b18      	ldr	r3, [pc, #96]	@ (8008c18 <MX_TIM1_Init+0x9c>)
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008bba:	4b17      	ldr	r3, [pc, #92]	@ (8008c18 <MX_TIM1_Init+0x9c>)
 8008bbc:	2200      	movs	r2, #0
 8008bbe:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008bc0:	4b15      	ldr	r3, [pc, #84]	@ (8008c18 <MX_TIM1_Init+0x9c>)
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8008bc6:	4814      	ldr	r0, [pc, #80]	@ (8008c18 <MX_TIM1_Init+0x9c>)
 8008bc8:	f002 ffaa 	bl	800bb20 <HAL_TIM_Base_Init>
 8008bcc:	4603      	mov	r3, r0
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d001      	beq.n	8008bd6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8008bd2:	f000 f8f9 	bl	8008dc8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008bd6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008bda:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008bdc:	f107 0308 	add.w	r3, r7, #8
 8008be0:	4619      	mov	r1, r3
 8008be2:	480d      	ldr	r0, [pc, #52]	@ (8008c18 <MX_TIM1_Init+0x9c>)
 8008be4:	f003 f954 	bl	800be90 <HAL_TIM_ConfigClockSource>
 8008be8:	4603      	mov	r3, r0
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d001      	beq.n	8008bf2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8008bee:	f000 f8eb 	bl	8008dc8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008bfa:	463b      	mov	r3, r7
 8008bfc:	4619      	mov	r1, r3
 8008bfe:	4806      	ldr	r0, [pc, #24]	@ (8008c18 <MX_TIM1_Init+0x9c>)
 8008c00:	f003 fb42 	bl	800c288 <HAL_TIMEx_MasterConfigSynchronization>
 8008c04:	4603      	mov	r3, r0
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d001      	beq.n	8008c0e <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8008c0a:	f000 f8dd 	bl	8008dc8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8008c0e:	bf00      	nop
 8008c10:	3718      	adds	r7, #24
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}
 8008c16:	bf00      	nop
 8008c18:	2000195c 	.word	0x2000195c
 8008c1c:	40012c00 	.word	0x40012c00

08008c20 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008c24:	4b11      	ldr	r3, [pc, #68]	@ (8008c6c <MX_USART1_UART_Init+0x4c>)
 8008c26:	4a12      	ldr	r2, [pc, #72]	@ (8008c70 <MX_USART1_UART_Init+0x50>)
 8008c28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008c2a:	4b10      	ldr	r3, [pc, #64]	@ (8008c6c <MX_USART1_UART_Init+0x4c>)
 8008c2c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8008c30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008c32:	4b0e      	ldr	r3, [pc, #56]	@ (8008c6c <MX_USART1_UART_Init+0x4c>)
 8008c34:	2200      	movs	r2, #0
 8008c36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008c38:	4b0c      	ldr	r3, [pc, #48]	@ (8008c6c <MX_USART1_UART_Init+0x4c>)
 8008c3a:	2200      	movs	r2, #0
 8008c3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8008c6c <MX_USART1_UART_Init+0x4c>)
 8008c40:	2200      	movs	r2, #0
 8008c42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008c44:	4b09      	ldr	r3, [pc, #36]	@ (8008c6c <MX_USART1_UART_Init+0x4c>)
 8008c46:	220c      	movs	r2, #12
 8008c48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008c4a:	4b08      	ldr	r3, [pc, #32]	@ (8008c6c <MX_USART1_UART_Init+0x4c>)
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008c50:	4b06      	ldr	r3, [pc, #24]	@ (8008c6c <MX_USART1_UART_Init+0x4c>)
 8008c52:	2200      	movs	r2, #0
 8008c54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008c56:	4805      	ldr	r0, [pc, #20]	@ (8008c6c <MX_USART1_UART_Init+0x4c>)
 8008c58:	f003 fb94 	bl	800c384 <HAL_UART_Init>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d001      	beq.n	8008c66 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008c62:	f000 f8b1 	bl	8008dc8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008c66:	bf00      	nop
 8008c68:	bd80      	pop	{r7, pc}
 8008c6a:	bf00      	nop
 8008c6c:	200019a4 	.word	0x200019a4
 8008c70:	40013800 	.word	0x40013800

08008c74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b088      	sub	sp, #32
 8008c78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c7a:	f107 0310 	add.w	r3, r7, #16
 8008c7e:	2200      	movs	r2, #0
 8008c80:	601a      	str	r2, [r3, #0]
 8008c82:	605a      	str	r2, [r3, #4]
 8008c84:	609a      	str	r2, [r3, #8]
 8008c86:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008c88:	4b4b      	ldr	r3, [pc, #300]	@ (8008db8 <MX_GPIO_Init+0x144>)
 8008c8a:	699b      	ldr	r3, [r3, #24]
 8008c8c:	4a4a      	ldr	r2, [pc, #296]	@ (8008db8 <MX_GPIO_Init+0x144>)
 8008c8e:	f043 0310 	orr.w	r3, r3, #16
 8008c92:	6193      	str	r3, [r2, #24]
 8008c94:	4b48      	ldr	r3, [pc, #288]	@ (8008db8 <MX_GPIO_Init+0x144>)
 8008c96:	699b      	ldr	r3, [r3, #24]
 8008c98:	f003 0310 	and.w	r3, r3, #16
 8008c9c:	60fb      	str	r3, [r7, #12]
 8008c9e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008ca0:	4b45      	ldr	r3, [pc, #276]	@ (8008db8 <MX_GPIO_Init+0x144>)
 8008ca2:	699b      	ldr	r3, [r3, #24]
 8008ca4:	4a44      	ldr	r2, [pc, #272]	@ (8008db8 <MX_GPIO_Init+0x144>)
 8008ca6:	f043 0320 	orr.w	r3, r3, #32
 8008caa:	6193      	str	r3, [r2, #24]
 8008cac:	4b42      	ldr	r3, [pc, #264]	@ (8008db8 <MX_GPIO_Init+0x144>)
 8008cae:	699b      	ldr	r3, [r3, #24]
 8008cb0:	f003 0320 	and.w	r3, r3, #32
 8008cb4:	60bb      	str	r3, [r7, #8]
 8008cb6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008cb8:	4b3f      	ldr	r3, [pc, #252]	@ (8008db8 <MX_GPIO_Init+0x144>)
 8008cba:	699b      	ldr	r3, [r3, #24]
 8008cbc:	4a3e      	ldr	r2, [pc, #248]	@ (8008db8 <MX_GPIO_Init+0x144>)
 8008cbe:	f043 0304 	orr.w	r3, r3, #4
 8008cc2:	6193      	str	r3, [r2, #24]
 8008cc4:	4b3c      	ldr	r3, [pc, #240]	@ (8008db8 <MX_GPIO_Init+0x144>)
 8008cc6:	699b      	ldr	r3, [r3, #24]
 8008cc8:	f003 0304 	and.w	r3, r3, #4
 8008ccc:	607b      	str	r3, [r7, #4]
 8008cce:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008cd0:	4b39      	ldr	r3, [pc, #228]	@ (8008db8 <MX_GPIO_Init+0x144>)
 8008cd2:	699b      	ldr	r3, [r3, #24]
 8008cd4:	4a38      	ldr	r2, [pc, #224]	@ (8008db8 <MX_GPIO_Init+0x144>)
 8008cd6:	f043 0308 	orr.w	r3, r3, #8
 8008cda:	6193      	str	r3, [r2, #24]
 8008cdc:	4b36      	ldr	r3, [pc, #216]	@ (8008db8 <MX_GPIO_Init+0x144>)
 8008cde:	699b      	ldr	r3, [r3, #24]
 8008ce0:	f003 0308 	and.w	r3, r3, #8
 8008ce4:	603b      	str	r3, [r7, #0]
 8008ce6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8008ce8:	2200      	movs	r2, #0
 8008cea:	21f0      	movs	r1, #240	@ 0xf0
 8008cec:	4833      	ldr	r0, [pc, #204]	@ (8008dbc <MX_GPIO_Init+0x148>)
 8008cee:	f001 f8b4 	bl	8009e5a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f241 0130 	movw	r1, #4144	@ 0x1030
 8008cf8:	4831      	ldr	r0, [pc, #196]	@ (8008dc0 <MX_GPIO_Init+0x14c>)
 8008cfa:	f001 f8ae 	bl	8009e5a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008cfe:	2200      	movs	r2, #0
 8008d00:	f640 4107 	movw	r1, #3079	@ 0xc07
 8008d04:	482f      	ldr	r0, [pc, #188]	@ (8008dc4 <MX_GPIO_Init+0x150>)
 8008d06:	f001 f8a8 	bl	8009e5a <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8008d0a:	f64e 73cf 	movw	r3, #61391	@ 0xefcf
 8008d0e:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008d10:	2300      	movs	r3, #0
 8008d12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d14:	2300      	movs	r3, #0
 8008d16:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008d18:	f107 0310 	add.w	r3, r7, #16
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	4828      	ldr	r0, [pc, #160]	@ (8008dc0 <MX_GPIO_Init+0x14c>)
 8008d20:	f000 fe24 	bl	800996c <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8008d24:	f248 130f 	movw	r3, #33039	@ 0x810f
 8008d28:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d32:	f107 0310 	add.w	r3, r7, #16
 8008d36:	4619      	mov	r1, r3
 8008d38:	4820      	ldr	r0, [pc, #128]	@ (8008dbc <MX_GPIO_Init+0x148>)
 8008d3a:	f000 fe17 	bl	800996c <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8008d3e:	23f0      	movs	r3, #240	@ 0xf0
 8008d40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008d42:	2301      	movs	r3, #1
 8008d44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d46:	2300      	movs	r3, #0
 8008d48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d4a:	2302      	movs	r3, #2
 8008d4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d4e:	f107 0310 	add.w	r3, r7, #16
 8008d52:	4619      	mov	r1, r3
 8008d54:	4819      	ldr	r0, [pc, #100]	@ (8008dbc <MX_GPIO_Init+0x148>)
 8008d56:	f000 fe09 	bl	800996c <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 8008d5a:	f241 0330 	movw	r3, #4144	@ 0x1030
 8008d5e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008d60:	2301      	movs	r3, #1
 8008d62:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d64:	2300      	movs	r3, #0
 8008d66:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d68:	2302      	movs	r3, #2
 8008d6a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008d6c:	f107 0310 	add.w	r3, r7, #16
 8008d70:	4619      	mov	r1, r3
 8008d72:	4813      	ldr	r0, [pc, #76]	@ (8008dc0 <MX_GPIO_Init+0x14c>)
 8008d74:	f000 fdfa 	bl	800996c <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008d78:	f640 4307 	movw	r3, #3079	@ 0xc07
 8008d7c:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008d7e:	2301      	movs	r3, #1
 8008d80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d82:	2300      	movs	r3, #0
 8008d84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008d86:	2302      	movs	r3, #2
 8008d88:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008d8a:	f107 0310 	add.w	r3, r7, #16
 8008d8e:	4619      	mov	r1, r3
 8008d90:	480c      	ldr	r0, [pc, #48]	@ (8008dc4 <MX_GPIO_Init+0x150>)
 8008d92:	f000 fdeb 	bl	800996c <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8008d96:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8008d9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008da0:	2300      	movs	r3, #0
 8008da2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008da4:	f107 0310 	add.w	r3, r7, #16
 8008da8:	4619      	mov	r1, r3
 8008daa:	4806      	ldr	r0, [pc, #24]	@ (8008dc4 <MX_GPIO_Init+0x150>)
 8008dac:	f000 fdde 	bl	800996c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008db0:	bf00      	nop
 8008db2:	3720      	adds	r7, #32
 8008db4:	46bd      	mov	sp, r7
 8008db6:	bd80      	pop	{r7, pc}
 8008db8:	40021000 	.word	0x40021000
 8008dbc:	40010800 	.word	0x40010800
 8008dc0:	40011000 	.word	0x40011000
 8008dc4:	40010c00 	.word	0x40010c00

08008dc8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8008dcc:	bf00      	nop
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bc80      	pop	{r7}
 8008dd2:	4770      	bx	lr

08008dd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008dd4:	b480      	push	{r7}
 8008dd6:	b085      	sub	sp, #20
 8008dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008dda:	4b15      	ldr	r3, [pc, #84]	@ (8008e30 <HAL_MspInit+0x5c>)
 8008ddc:	699b      	ldr	r3, [r3, #24]
 8008dde:	4a14      	ldr	r2, [pc, #80]	@ (8008e30 <HAL_MspInit+0x5c>)
 8008de0:	f043 0301 	orr.w	r3, r3, #1
 8008de4:	6193      	str	r3, [r2, #24]
 8008de6:	4b12      	ldr	r3, [pc, #72]	@ (8008e30 <HAL_MspInit+0x5c>)
 8008de8:	699b      	ldr	r3, [r3, #24]
 8008dea:	f003 0301 	and.w	r3, r3, #1
 8008dee:	60bb      	str	r3, [r7, #8]
 8008df0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008df2:	4b0f      	ldr	r3, [pc, #60]	@ (8008e30 <HAL_MspInit+0x5c>)
 8008df4:	69db      	ldr	r3, [r3, #28]
 8008df6:	4a0e      	ldr	r2, [pc, #56]	@ (8008e30 <HAL_MspInit+0x5c>)
 8008df8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008dfc:	61d3      	str	r3, [r2, #28]
 8008dfe:	4b0c      	ldr	r3, [pc, #48]	@ (8008e30 <HAL_MspInit+0x5c>)
 8008e00:	69db      	ldr	r3, [r3, #28]
 8008e02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008e06:	607b      	str	r3, [r7, #4]
 8008e08:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8008e34 <HAL_MspInit+0x60>)
 8008e0c:	685b      	ldr	r3, [r3, #4]
 8008e0e:	60fb      	str	r3, [r7, #12]
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8008e16:	60fb      	str	r3, [r7, #12]
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008e1e:	60fb      	str	r3, [r7, #12]
 8008e20:	4a04      	ldr	r2, [pc, #16]	@ (8008e34 <HAL_MspInit+0x60>)
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008e26:	bf00      	nop
 8008e28:	3714      	adds	r7, #20
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bc80      	pop	{r7}
 8008e2e:	4770      	bx	lr
 8008e30:	40021000 	.word	0x40021000
 8008e34:	40010000 	.word	0x40010000

08008e38 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b088      	sub	sp, #32
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e40:	f107 0310 	add.w	r3, r7, #16
 8008e44:	2200      	movs	r2, #0
 8008e46:	601a      	str	r2, [r3, #0]
 8008e48:	605a      	str	r2, [r3, #4]
 8008e4a:	609a      	str	r2, [r3, #8]
 8008e4c:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	4a1c      	ldr	r2, [pc, #112]	@ (8008ec4 <HAL_CAN_MspInit+0x8c>)
 8008e54:	4293      	cmp	r3, r2
 8008e56:	d131      	bne.n	8008ebc <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8008e58:	4b1b      	ldr	r3, [pc, #108]	@ (8008ec8 <HAL_CAN_MspInit+0x90>)
 8008e5a:	69db      	ldr	r3, [r3, #28]
 8008e5c:	4a1a      	ldr	r2, [pc, #104]	@ (8008ec8 <HAL_CAN_MspInit+0x90>)
 8008e5e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8008e62:	61d3      	str	r3, [r2, #28]
 8008e64:	4b18      	ldr	r3, [pc, #96]	@ (8008ec8 <HAL_CAN_MspInit+0x90>)
 8008e66:	69db      	ldr	r3, [r3, #28]
 8008e68:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008e6c:	60fb      	str	r3, [r7, #12]
 8008e6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e70:	4b15      	ldr	r3, [pc, #84]	@ (8008ec8 <HAL_CAN_MspInit+0x90>)
 8008e72:	699b      	ldr	r3, [r3, #24]
 8008e74:	4a14      	ldr	r2, [pc, #80]	@ (8008ec8 <HAL_CAN_MspInit+0x90>)
 8008e76:	f043 0304 	orr.w	r3, r3, #4
 8008e7a:	6193      	str	r3, [r2, #24]
 8008e7c:	4b12      	ldr	r3, [pc, #72]	@ (8008ec8 <HAL_CAN_MspInit+0x90>)
 8008e7e:	699b      	ldr	r3, [r3, #24]
 8008e80:	f003 0304 	and.w	r3, r3, #4
 8008e84:	60bb      	str	r3, [r7, #8]
 8008e86:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008e88:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8008e8c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008e8e:	2300      	movs	r3, #0
 8008e90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e92:	2300      	movs	r3, #0
 8008e94:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e96:	f107 0310 	add.w	r3, r7, #16
 8008e9a:	4619      	mov	r1, r3
 8008e9c:	480b      	ldr	r0, [pc, #44]	@ (8008ecc <HAL_CAN_MspInit+0x94>)
 8008e9e:	f000 fd65 	bl	800996c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008ea2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8008ea6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008ea8:	2302      	movs	r3, #2
 8008eaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008eac:	2303      	movs	r3, #3
 8008eae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008eb0:	f107 0310 	add.w	r3, r7, #16
 8008eb4:	4619      	mov	r1, r3
 8008eb6:	4805      	ldr	r0, [pc, #20]	@ (8008ecc <HAL_CAN_MspInit+0x94>)
 8008eb8:	f000 fd58 	bl	800996c <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8008ebc:	bf00      	nop
 8008ebe:	3720      	adds	r7, #32
 8008ec0:	46bd      	mov	sp, r7
 8008ec2:	bd80      	pop	{r7, pc}
 8008ec4:	40006400 	.word	0x40006400
 8008ec8:	40021000 	.word	0x40021000
 8008ecc:	40010800 	.word	0x40010800

08008ed0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008ed0:	b580      	push	{r7, lr}
 8008ed2:	b088      	sub	sp, #32
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008ed8:	f107 0310 	add.w	r3, r7, #16
 8008edc:	2200      	movs	r2, #0
 8008ede:	601a      	str	r2, [r3, #0]
 8008ee0:	605a      	str	r2, [r3, #4]
 8008ee2:	609a      	str	r2, [r3, #8]
 8008ee4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	4a15      	ldr	r2, [pc, #84]	@ (8008f40 <HAL_I2C_MspInit+0x70>)
 8008eec:	4293      	cmp	r3, r2
 8008eee:	d123      	bne.n	8008f38 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008ef0:	4b14      	ldr	r3, [pc, #80]	@ (8008f44 <HAL_I2C_MspInit+0x74>)
 8008ef2:	699b      	ldr	r3, [r3, #24]
 8008ef4:	4a13      	ldr	r2, [pc, #76]	@ (8008f44 <HAL_I2C_MspInit+0x74>)
 8008ef6:	f043 0308 	orr.w	r3, r3, #8
 8008efa:	6193      	str	r3, [r2, #24]
 8008efc:	4b11      	ldr	r3, [pc, #68]	@ (8008f44 <HAL_I2C_MspInit+0x74>)
 8008efe:	699b      	ldr	r3, [r3, #24]
 8008f00:	f003 0308 	and.w	r3, r3, #8
 8008f04:	60fb      	str	r3, [r7, #12]
 8008f06:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008f08:	23c0      	movs	r3, #192	@ 0xc0
 8008f0a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008f0c:	2312      	movs	r3, #18
 8008f0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008f10:	2303      	movs	r3, #3
 8008f12:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008f14:	f107 0310 	add.w	r3, r7, #16
 8008f18:	4619      	mov	r1, r3
 8008f1a:	480b      	ldr	r0, [pc, #44]	@ (8008f48 <HAL_I2C_MspInit+0x78>)
 8008f1c:	f000 fd26 	bl	800996c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008f20:	4b08      	ldr	r3, [pc, #32]	@ (8008f44 <HAL_I2C_MspInit+0x74>)
 8008f22:	69db      	ldr	r3, [r3, #28]
 8008f24:	4a07      	ldr	r2, [pc, #28]	@ (8008f44 <HAL_I2C_MspInit+0x74>)
 8008f26:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008f2a:	61d3      	str	r3, [r2, #28]
 8008f2c:	4b05      	ldr	r3, [pc, #20]	@ (8008f44 <HAL_I2C_MspInit+0x74>)
 8008f2e:	69db      	ldr	r3, [r3, #28]
 8008f30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008f34:	60bb      	str	r3, [r7, #8]
 8008f36:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008f38:	bf00      	nop
 8008f3a:	3720      	adds	r7, #32
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}
 8008f40:	40005400 	.word	0x40005400
 8008f44:	40021000 	.word	0x40021000
 8008f48:	40010c00 	.word	0x40010c00

08008f4c <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b082      	sub	sp, #8
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	4a0a      	ldr	r2, [pc, #40]	@ (8008f84 <HAL_I2C_MspDeInit+0x38>)
 8008f5a:	4293      	cmp	r3, r2
 8008f5c:	d10d      	bne.n	8008f7a <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8008f5e:	4b0a      	ldr	r3, [pc, #40]	@ (8008f88 <HAL_I2C_MspDeInit+0x3c>)
 8008f60:	69db      	ldr	r3, [r3, #28]
 8008f62:	4a09      	ldr	r2, [pc, #36]	@ (8008f88 <HAL_I2C_MspDeInit+0x3c>)
 8008f64:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008f68:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8008f6a:	2140      	movs	r1, #64	@ 0x40
 8008f6c:	4807      	ldr	r0, [pc, #28]	@ (8008f8c <HAL_I2C_MspDeInit+0x40>)
 8008f6e:	f000 fe91 	bl	8009c94 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8008f72:	2180      	movs	r1, #128	@ 0x80
 8008f74:	4805      	ldr	r0, [pc, #20]	@ (8008f8c <HAL_I2C_MspDeInit+0x40>)
 8008f76:	f000 fe8d 	bl	8009c94 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8008f7a:	bf00      	nop
 8008f7c:	3708      	adds	r7, #8
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bd80      	pop	{r7, pc}
 8008f82:	bf00      	nop
 8008f84:	40005400 	.word	0x40005400
 8008f88:	40021000 	.word	0x40021000
 8008f8c:	40010c00 	.word	0x40010c00

08008f90 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008f90:	b580      	push	{r7, lr}
 8008f92:	b084      	sub	sp, #16
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4a0d      	ldr	r2, [pc, #52]	@ (8008fd4 <HAL_TIM_Base_MspInit+0x44>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d113      	bne.n	8008fca <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8008fd8 <HAL_TIM_Base_MspInit+0x48>)
 8008fa4:	699b      	ldr	r3, [r3, #24]
 8008fa6:	4a0c      	ldr	r2, [pc, #48]	@ (8008fd8 <HAL_TIM_Base_MspInit+0x48>)
 8008fa8:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8008fac:	6193      	str	r3, [r2, #24]
 8008fae:	4b0a      	ldr	r3, [pc, #40]	@ (8008fd8 <HAL_TIM_Base_MspInit+0x48>)
 8008fb0:	699b      	ldr	r3, [r3, #24]
 8008fb2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8008fb6:	60fb      	str	r3, [r7, #12]
 8008fb8:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8008fba:	2200      	movs	r2, #0
 8008fbc:	2100      	movs	r1, #0
 8008fbe:	2019      	movs	r0, #25
 8008fc0:	f000 fb5b 	bl	800967a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8008fc4:	2019      	movs	r0, #25
 8008fc6:	f000 fb74 	bl	80096b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8008fca:	bf00      	nop
 8008fcc:	3710      	adds	r7, #16
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}
 8008fd2:	bf00      	nop
 8008fd4:	40012c00 	.word	0x40012c00
 8008fd8:	40021000 	.word	0x40021000

08008fdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b088      	sub	sp, #32
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008fe4:	f107 0310 	add.w	r3, r7, #16
 8008fe8:	2200      	movs	r2, #0
 8008fea:	601a      	str	r2, [r3, #0]
 8008fec:	605a      	str	r2, [r3, #4]
 8008fee:	609a      	str	r2, [r3, #8]
 8008ff0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	681b      	ldr	r3, [r3, #0]
 8008ff6:	4a20      	ldr	r2, [pc, #128]	@ (8009078 <HAL_UART_MspInit+0x9c>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d139      	bne.n	8009070 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008ffc:	4b1f      	ldr	r3, [pc, #124]	@ (800907c <HAL_UART_MspInit+0xa0>)
 8008ffe:	699b      	ldr	r3, [r3, #24]
 8009000:	4a1e      	ldr	r2, [pc, #120]	@ (800907c <HAL_UART_MspInit+0xa0>)
 8009002:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009006:	6193      	str	r3, [r2, #24]
 8009008:	4b1c      	ldr	r3, [pc, #112]	@ (800907c <HAL_UART_MspInit+0xa0>)
 800900a:	699b      	ldr	r3, [r3, #24]
 800900c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8009010:	60fb      	str	r3, [r7, #12]
 8009012:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009014:	4b19      	ldr	r3, [pc, #100]	@ (800907c <HAL_UART_MspInit+0xa0>)
 8009016:	699b      	ldr	r3, [r3, #24]
 8009018:	4a18      	ldr	r2, [pc, #96]	@ (800907c <HAL_UART_MspInit+0xa0>)
 800901a:	f043 0304 	orr.w	r3, r3, #4
 800901e:	6193      	str	r3, [r2, #24]
 8009020:	4b16      	ldr	r3, [pc, #88]	@ (800907c <HAL_UART_MspInit+0xa0>)
 8009022:	699b      	ldr	r3, [r3, #24]
 8009024:	f003 0304 	and.w	r3, r3, #4
 8009028:	60bb      	str	r3, [r7, #8]
 800902a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800902c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009030:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009032:	2302      	movs	r3, #2
 8009034:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009036:	2303      	movs	r3, #3
 8009038:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800903a:	f107 0310 	add.w	r3, r7, #16
 800903e:	4619      	mov	r1, r3
 8009040:	480f      	ldr	r0, [pc, #60]	@ (8009080 <HAL_UART_MspInit+0xa4>)
 8009042:	f000 fc93 	bl	800996c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8009046:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800904a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800904c:	2300      	movs	r3, #0
 800904e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009050:	2300      	movs	r3, #0
 8009052:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009054:	f107 0310 	add.w	r3, r7, #16
 8009058:	4619      	mov	r1, r3
 800905a:	4809      	ldr	r0, [pc, #36]	@ (8009080 <HAL_UART_MspInit+0xa4>)
 800905c:	f000 fc86 	bl	800996c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8009060:	2200      	movs	r2, #0
 8009062:	2100      	movs	r1, #0
 8009064:	2025      	movs	r0, #37	@ 0x25
 8009066:	f000 fb08 	bl	800967a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800906a:	2025      	movs	r0, #37	@ 0x25
 800906c:	f000 fb21 	bl	80096b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8009070:	bf00      	nop
 8009072:	3720      	adds	r7, #32
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}
 8009078:	40013800 	.word	0x40013800
 800907c:	40021000 	.word	0x40021000
 8009080:	40010800 	.word	0x40010800

08009084 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009084:	b480      	push	{r7}
 8009086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009088:	bf00      	nop
 800908a:	e7fd      	b.n	8009088 <NMI_Handler+0x4>

0800908c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800908c:	b480      	push	{r7}
 800908e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009090:	bf00      	nop
 8009092:	e7fd      	b.n	8009090 <HardFault_Handler+0x4>

08009094 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009094:	b480      	push	{r7}
 8009096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009098:	bf00      	nop
 800909a:	e7fd      	b.n	8009098 <MemManage_Handler+0x4>

0800909c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800909c:	b480      	push	{r7}
 800909e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80090a0:	bf00      	nop
 80090a2:	e7fd      	b.n	80090a0 <BusFault_Handler+0x4>

080090a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80090a4:	b480      	push	{r7}
 80090a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80090a8:	bf00      	nop
 80090aa:	e7fd      	b.n	80090a8 <UsageFault_Handler+0x4>

080090ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80090ac:	b480      	push	{r7}
 80090ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80090b0:	bf00      	nop
 80090b2:	46bd      	mov	sp, r7
 80090b4:	bc80      	pop	{r7}
 80090b6:	4770      	bx	lr

080090b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80090b8:	b480      	push	{r7}
 80090ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80090bc:	bf00      	nop
 80090be:	46bd      	mov	sp, r7
 80090c0:	bc80      	pop	{r7}
 80090c2:	4770      	bx	lr

080090c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80090c4:	b480      	push	{r7}
 80090c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80090c8:	bf00      	nop
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bc80      	pop	{r7}
 80090ce:	4770      	bx	lr

080090d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80090d0:	b580      	push	{r7, lr}
 80090d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80090d4:	f000 f8be 	bl	8009254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80090d8:	bf00      	nop
 80090da:	bd80      	pop	{r7, pc}

080090dc <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80090e0:	4802      	ldr	r0, [pc, #8]	@ (80090ec <TIM1_UP_IRQHandler+0x10>)
 80090e2:	f002 fdcd 	bl	800bc80 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80090e6:	bf00      	nop
 80090e8:	bd80      	pop	{r7, pc}
 80090ea:	bf00      	nop
 80090ec:	2000195c 	.word	0x2000195c

080090f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80090f0:	b580      	push	{r7, lr}
 80090f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80090f4:	4802      	ldr	r0, [pc, #8]	@ (8009100 <USART1_IRQHandler+0x10>)
 80090f6:	f003 f9cb 	bl	800c490 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80090fa:	bf00      	nop
 80090fc:	bd80      	pop	{r7, pc}
 80090fe:	bf00      	nop
 8009100:	200019a4 	.word	0x200019a4

08009104 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b086      	sub	sp, #24
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800910c:	4a14      	ldr	r2, [pc, #80]	@ (8009160 <_sbrk+0x5c>)
 800910e:	4b15      	ldr	r3, [pc, #84]	@ (8009164 <_sbrk+0x60>)
 8009110:	1ad3      	subs	r3, r2, r3
 8009112:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009114:	697b      	ldr	r3, [r7, #20]
 8009116:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8009118:	4b13      	ldr	r3, [pc, #76]	@ (8009168 <_sbrk+0x64>)
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d102      	bne.n	8009126 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009120:	4b11      	ldr	r3, [pc, #68]	@ (8009168 <_sbrk+0x64>)
 8009122:	4a12      	ldr	r2, [pc, #72]	@ (800916c <_sbrk+0x68>)
 8009124:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8009126:	4b10      	ldr	r3, [pc, #64]	@ (8009168 <_sbrk+0x64>)
 8009128:	681a      	ldr	r2, [r3, #0]
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	4413      	add	r3, r2
 800912e:	693a      	ldr	r2, [r7, #16]
 8009130:	429a      	cmp	r2, r3
 8009132:	d207      	bcs.n	8009144 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009134:	f003 fffa 	bl	800d12c <__errno>
 8009138:	4603      	mov	r3, r0
 800913a:	220c      	movs	r2, #12
 800913c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800913e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009142:	e009      	b.n	8009158 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009144:	4b08      	ldr	r3, [pc, #32]	@ (8009168 <_sbrk+0x64>)
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800914a:	4b07      	ldr	r3, [pc, #28]	@ (8009168 <_sbrk+0x64>)
 800914c:	681a      	ldr	r2, [r3, #0]
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	4413      	add	r3, r2
 8009152:	4a05      	ldr	r2, [pc, #20]	@ (8009168 <_sbrk+0x64>)
 8009154:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8009156:	68fb      	ldr	r3, [r7, #12]
}
 8009158:	4618      	mov	r0, r3
 800915a:	3718      	adds	r7, #24
 800915c:	46bd      	mov	sp, r7
 800915e:	bd80      	pop	{r7, pc}
 8009160:	2000c000 	.word	0x2000c000
 8009164:	00000400 	.word	0x00000400
 8009168:	200019ec 	.word	0x200019ec
 800916c:	20001b40 	.word	0x20001b40

08009170 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8009170:	b480      	push	{r7}
 8009172:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009174:	bf00      	nop
 8009176:	46bd      	mov	sp, r7
 8009178:	bc80      	pop	{r7}
 800917a:	4770      	bx	lr

0800917c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800917c:	480c      	ldr	r0, [pc, #48]	@ (80091b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800917e:	490d      	ldr	r1, [pc, #52]	@ (80091b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8009180:	4a0d      	ldr	r2, [pc, #52]	@ (80091b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8009182:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009184:	e002      	b.n	800918c <LoopCopyDataInit>

08009186 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8009186:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8009188:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800918a:	3304      	adds	r3, #4

0800918c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800918c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800918e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009190:	d3f9      	bcc.n	8009186 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009192:	4a0a      	ldr	r2, [pc, #40]	@ (80091bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8009194:	4c0a      	ldr	r4, [pc, #40]	@ (80091c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8009196:	2300      	movs	r3, #0
  b LoopFillZerobss
 8009198:	e001      	b.n	800919e <LoopFillZerobss>

0800919a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800919a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800919c:	3204      	adds	r2, #4

0800919e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800919e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80091a0:	d3fb      	bcc.n	800919a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80091a2:	f7ff ffe5 	bl	8009170 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80091a6:	f003 ffc7 	bl	800d138 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80091aa:	f7ff fb99 	bl	80088e0 <main>
  bx lr
 80091ae:	4770      	bx	lr
  ldr r0, =_sdata
 80091b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80091b4:	20000fac 	.word	0x20000fac
  ldr r2, =_sidata
 80091b8:	0800dc24 	.word	0x0800dc24
  ldr r2, =_sbss
 80091bc:	20000fac 	.word	0x20000fac
  ldr r4, =_ebss
 80091c0:	20001b3c 	.word	0x20001b3c

080091c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80091c4:	e7fe      	b.n	80091c4 <ADC1_2_IRQHandler>
	...

080091c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80091cc:	4b08      	ldr	r3, [pc, #32]	@ (80091f0 <HAL_Init+0x28>)
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4a07      	ldr	r2, [pc, #28]	@ (80091f0 <HAL_Init+0x28>)
 80091d2:	f043 0310 	orr.w	r3, r3, #16
 80091d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80091d8:	2003      	movs	r0, #3
 80091da:	f000 fa43 	bl	8009664 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80091de:	200f      	movs	r0, #15
 80091e0:	f000 f808 	bl	80091f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80091e4:	f7ff fdf6 	bl	8008dd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80091e8:	2300      	movs	r3, #0
}
 80091ea:	4618      	mov	r0, r3
 80091ec:	bd80      	pop	{r7, pc}
 80091ee:	bf00      	nop
 80091f0:	40022000 	.word	0x40022000

080091f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b082      	sub	sp, #8
 80091f8:	af00      	add	r7, sp, #0
 80091fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80091fc:	4b12      	ldr	r3, [pc, #72]	@ (8009248 <HAL_InitTick+0x54>)
 80091fe:	681a      	ldr	r2, [r3, #0]
 8009200:	4b12      	ldr	r3, [pc, #72]	@ (800924c <HAL_InitTick+0x58>)
 8009202:	781b      	ldrb	r3, [r3, #0]
 8009204:	4619      	mov	r1, r3
 8009206:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800920a:	fbb3 f3f1 	udiv	r3, r3, r1
 800920e:	fbb2 f3f3 	udiv	r3, r2, r3
 8009212:	4618      	mov	r0, r3
 8009214:	f000 fa5b 	bl	80096ce <HAL_SYSTICK_Config>
 8009218:	4603      	mov	r3, r0
 800921a:	2b00      	cmp	r3, #0
 800921c:	d001      	beq.n	8009222 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800921e:	2301      	movs	r3, #1
 8009220:	e00e      	b.n	8009240 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	2b0f      	cmp	r3, #15
 8009226:	d80a      	bhi.n	800923e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009228:	2200      	movs	r2, #0
 800922a:	6879      	ldr	r1, [r7, #4]
 800922c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009230:	f000 fa23 	bl	800967a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009234:	4a06      	ldr	r2, [pc, #24]	@ (8009250 <HAL_InitTick+0x5c>)
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800923a:	2300      	movs	r3, #0
 800923c:	e000      	b.n	8009240 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800923e:	2301      	movs	r3, #1
}
 8009240:	4618      	mov	r0, r3
 8009242:	3708      	adds	r7, #8
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}
 8009248:	20000f50 	.word	0x20000f50
 800924c:	20000f58 	.word	0x20000f58
 8009250:	20000f54 	.word	0x20000f54

08009254 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009254:	b480      	push	{r7}
 8009256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009258:	4b05      	ldr	r3, [pc, #20]	@ (8009270 <HAL_IncTick+0x1c>)
 800925a:	781b      	ldrb	r3, [r3, #0]
 800925c:	461a      	mov	r2, r3
 800925e:	4b05      	ldr	r3, [pc, #20]	@ (8009274 <HAL_IncTick+0x20>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	4413      	add	r3, r2
 8009264:	4a03      	ldr	r2, [pc, #12]	@ (8009274 <HAL_IncTick+0x20>)
 8009266:	6013      	str	r3, [r2, #0]
}
 8009268:	bf00      	nop
 800926a:	46bd      	mov	sp, r7
 800926c:	bc80      	pop	{r7}
 800926e:	4770      	bx	lr
 8009270:	20000f58 	.word	0x20000f58
 8009274:	200019f0 	.word	0x200019f0

08009278 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009278:	b480      	push	{r7}
 800927a:	af00      	add	r7, sp, #0
  return uwTick;
 800927c:	4b02      	ldr	r3, [pc, #8]	@ (8009288 <HAL_GetTick+0x10>)
 800927e:	681b      	ldr	r3, [r3, #0]
}
 8009280:	4618      	mov	r0, r3
 8009282:	46bd      	mov	sp, r7
 8009284:	bc80      	pop	{r7}
 8009286:	4770      	bx	lr
 8009288:	200019f0 	.word	0x200019f0

0800928c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800928c:	b580      	push	{r7, lr}
 800928e:	b084      	sub	sp, #16
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009294:	f7ff fff0 	bl	8009278 <HAL_GetTick>
 8009298:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80092a4:	d005      	beq.n	80092b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80092a6:	4b0a      	ldr	r3, [pc, #40]	@ (80092d0 <HAL_Delay+0x44>)
 80092a8:	781b      	ldrb	r3, [r3, #0]
 80092aa:	461a      	mov	r2, r3
 80092ac:	68fb      	ldr	r3, [r7, #12]
 80092ae:	4413      	add	r3, r2
 80092b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80092b2:	bf00      	nop
 80092b4:	f7ff ffe0 	bl	8009278 <HAL_GetTick>
 80092b8:	4602      	mov	r2, r0
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	1ad3      	subs	r3, r2, r3
 80092be:	68fa      	ldr	r2, [r7, #12]
 80092c0:	429a      	cmp	r2, r3
 80092c2:	d8f7      	bhi.n	80092b4 <HAL_Delay+0x28>
  {
  }
}
 80092c4:	bf00      	nop
 80092c6:	bf00      	nop
 80092c8:	3710      	adds	r7, #16
 80092ca:	46bd      	mov	sp, r7
 80092cc:	bd80      	pop	{r7, pc}
 80092ce:	bf00      	nop
 80092d0:	20000f58 	.word	0x20000f58

080092d4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b084      	sub	sp, #16
 80092d8:	af00      	add	r7, sp, #0
 80092da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d101      	bne.n	80092e6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80092e2:	2301      	movs	r3, #1
 80092e4:	e0ed      	b.n	80094c2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80092ec:	b2db      	uxtb	r3, r3
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d102      	bne.n	80092f8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80092f2:	6878      	ldr	r0, [r7, #4]
 80092f4:	f7ff fda0 	bl	8008e38 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	681a      	ldr	r2, [r3, #0]
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f042 0201 	orr.w	r2, r2, #1
 8009306:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009308:	f7ff ffb6 	bl	8009278 <HAL_GetTick>
 800930c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800930e:	e012      	b.n	8009336 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009310:	f7ff ffb2 	bl	8009278 <HAL_GetTick>
 8009314:	4602      	mov	r2, r0
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	1ad3      	subs	r3, r2, r3
 800931a:	2b0a      	cmp	r3, #10
 800931c:	d90b      	bls.n	8009336 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009322:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2205      	movs	r2, #5
 800932e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009332:	2301      	movs	r3, #1
 8009334:	e0c5      	b.n	80094c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	685b      	ldr	r3, [r3, #4]
 800933c:	f003 0301 	and.w	r3, r3, #1
 8009340:	2b00      	cmp	r3, #0
 8009342:	d0e5      	beq.n	8009310 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	681a      	ldr	r2, [r3, #0]
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f022 0202 	bic.w	r2, r2, #2
 8009352:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009354:	f7ff ff90 	bl	8009278 <HAL_GetTick>
 8009358:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800935a:	e012      	b.n	8009382 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800935c:	f7ff ff8c 	bl	8009278 <HAL_GetTick>
 8009360:	4602      	mov	r2, r0
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	1ad3      	subs	r3, r2, r3
 8009366:	2b0a      	cmp	r3, #10
 8009368:	d90b      	bls.n	8009382 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800936e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2205      	movs	r2, #5
 800937a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800937e:	2301      	movs	r3, #1
 8009380:	e09f      	b.n	80094c2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	685b      	ldr	r3, [r3, #4]
 8009388:	f003 0302 	and.w	r3, r3, #2
 800938c:	2b00      	cmp	r3, #0
 800938e:	d1e5      	bne.n	800935c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	7e1b      	ldrb	r3, [r3, #24]
 8009394:	2b01      	cmp	r3, #1
 8009396:	d108      	bne.n	80093aa <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	681a      	ldr	r2, [r3, #0]
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	681b      	ldr	r3, [r3, #0]
 80093a2:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80093a6:	601a      	str	r2, [r3, #0]
 80093a8:	e007      	b.n	80093ba <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	681a      	ldr	r2, [r3, #0]
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80093b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	7e5b      	ldrb	r3, [r3, #25]
 80093be:	2b01      	cmp	r3, #1
 80093c0:	d108      	bne.n	80093d4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	681a      	ldr	r2, [r3, #0]
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80093d0:	601a      	str	r2, [r3, #0]
 80093d2:	e007      	b.n	80093e4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	681a      	ldr	r2, [r3, #0]
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80093e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	7e9b      	ldrb	r3, [r3, #26]
 80093e8:	2b01      	cmp	r3, #1
 80093ea:	d108      	bne.n	80093fe <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	681a      	ldr	r2, [r3, #0]
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	f042 0220 	orr.w	r2, r2, #32
 80093fa:	601a      	str	r2, [r3, #0]
 80093fc:	e007      	b.n	800940e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	681a      	ldr	r2, [r3, #0]
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	f022 0220 	bic.w	r2, r2, #32
 800940c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	7edb      	ldrb	r3, [r3, #27]
 8009412:	2b01      	cmp	r3, #1
 8009414:	d108      	bne.n	8009428 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	681a      	ldr	r2, [r3, #0]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	f022 0210 	bic.w	r2, r2, #16
 8009424:	601a      	str	r2, [r3, #0]
 8009426:	e007      	b.n	8009438 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	681a      	ldr	r2, [r3, #0]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	f042 0210 	orr.w	r2, r2, #16
 8009436:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	7f1b      	ldrb	r3, [r3, #28]
 800943c:	2b01      	cmp	r3, #1
 800943e:	d108      	bne.n	8009452 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	681a      	ldr	r2, [r3, #0]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f042 0208 	orr.w	r2, r2, #8
 800944e:	601a      	str	r2, [r3, #0]
 8009450:	e007      	b.n	8009462 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	681a      	ldr	r2, [r3, #0]
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f022 0208 	bic.w	r2, r2, #8
 8009460:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	7f5b      	ldrb	r3, [r3, #29]
 8009466:	2b01      	cmp	r3, #1
 8009468:	d108      	bne.n	800947c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	681a      	ldr	r2, [r3, #0]
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	f042 0204 	orr.w	r2, r2, #4
 8009478:	601a      	str	r2, [r3, #0]
 800947a:	e007      	b.n	800948c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	681b      	ldr	r3, [r3, #0]
 8009480:	681a      	ldr	r2, [r3, #0]
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	f022 0204 	bic.w	r2, r2, #4
 800948a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	689a      	ldr	r2, [r3, #8]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	68db      	ldr	r3, [r3, #12]
 8009494:	431a      	orrs	r2, r3
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	691b      	ldr	r3, [r3, #16]
 800949a:	431a      	orrs	r2, r3
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	695b      	ldr	r3, [r3, #20]
 80094a0:	ea42 0103 	orr.w	r1, r2, r3
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	685b      	ldr	r3, [r3, #4]
 80094a8:	1e5a      	subs	r2, r3, #1
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	430a      	orrs	r2, r1
 80094b0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	2200      	movs	r2, #0
 80094b6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2201      	movs	r2, #1
 80094bc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80094c0:	2300      	movs	r3, #0
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3710      	adds	r7, #16
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}
	...

080094cc <__NVIC_SetPriorityGrouping>:
{
 80094cc:	b480      	push	{r7}
 80094ce:	b085      	sub	sp, #20
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	f003 0307 	and.w	r3, r3, #7
 80094da:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80094dc:	4b0c      	ldr	r3, [pc, #48]	@ (8009510 <__NVIC_SetPriorityGrouping+0x44>)
 80094de:	68db      	ldr	r3, [r3, #12]
 80094e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80094e2:	68ba      	ldr	r2, [r7, #8]
 80094e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80094e8:	4013      	ands	r3, r2
 80094ea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80094f0:	68bb      	ldr	r3, [r7, #8]
 80094f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80094f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80094f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80094fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80094fe:	4a04      	ldr	r2, [pc, #16]	@ (8009510 <__NVIC_SetPriorityGrouping+0x44>)
 8009500:	68bb      	ldr	r3, [r7, #8]
 8009502:	60d3      	str	r3, [r2, #12]
}
 8009504:	bf00      	nop
 8009506:	3714      	adds	r7, #20
 8009508:	46bd      	mov	sp, r7
 800950a:	bc80      	pop	{r7}
 800950c:	4770      	bx	lr
 800950e:	bf00      	nop
 8009510:	e000ed00 	.word	0xe000ed00

08009514 <__NVIC_GetPriorityGrouping>:
{
 8009514:	b480      	push	{r7}
 8009516:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009518:	4b04      	ldr	r3, [pc, #16]	@ (800952c <__NVIC_GetPriorityGrouping+0x18>)
 800951a:	68db      	ldr	r3, [r3, #12]
 800951c:	0a1b      	lsrs	r3, r3, #8
 800951e:	f003 0307 	and.w	r3, r3, #7
}
 8009522:	4618      	mov	r0, r3
 8009524:	46bd      	mov	sp, r7
 8009526:	bc80      	pop	{r7}
 8009528:	4770      	bx	lr
 800952a:	bf00      	nop
 800952c:	e000ed00 	.word	0xe000ed00

08009530 <__NVIC_EnableIRQ>:
{
 8009530:	b480      	push	{r7}
 8009532:	b083      	sub	sp, #12
 8009534:	af00      	add	r7, sp, #0
 8009536:	4603      	mov	r3, r0
 8009538:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800953a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800953e:	2b00      	cmp	r3, #0
 8009540:	db0b      	blt.n	800955a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009542:	79fb      	ldrb	r3, [r7, #7]
 8009544:	f003 021f 	and.w	r2, r3, #31
 8009548:	4906      	ldr	r1, [pc, #24]	@ (8009564 <__NVIC_EnableIRQ+0x34>)
 800954a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800954e:	095b      	lsrs	r3, r3, #5
 8009550:	2001      	movs	r0, #1
 8009552:	fa00 f202 	lsl.w	r2, r0, r2
 8009556:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800955a:	bf00      	nop
 800955c:	370c      	adds	r7, #12
 800955e:	46bd      	mov	sp, r7
 8009560:	bc80      	pop	{r7}
 8009562:	4770      	bx	lr
 8009564:	e000e100 	.word	0xe000e100

08009568 <__NVIC_SetPriority>:
{
 8009568:	b480      	push	{r7}
 800956a:	b083      	sub	sp, #12
 800956c:	af00      	add	r7, sp, #0
 800956e:	4603      	mov	r3, r0
 8009570:	6039      	str	r1, [r7, #0]
 8009572:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009574:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009578:	2b00      	cmp	r3, #0
 800957a:	db0a      	blt.n	8009592 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800957c:	683b      	ldr	r3, [r7, #0]
 800957e:	b2da      	uxtb	r2, r3
 8009580:	490c      	ldr	r1, [pc, #48]	@ (80095b4 <__NVIC_SetPriority+0x4c>)
 8009582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009586:	0112      	lsls	r2, r2, #4
 8009588:	b2d2      	uxtb	r2, r2
 800958a:	440b      	add	r3, r1
 800958c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009590:	e00a      	b.n	80095a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009592:	683b      	ldr	r3, [r7, #0]
 8009594:	b2da      	uxtb	r2, r3
 8009596:	4908      	ldr	r1, [pc, #32]	@ (80095b8 <__NVIC_SetPriority+0x50>)
 8009598:	79fb      	ldrb	r3, [r7, #7]
 800959a:	f003 030f 	and.w	r3, r3, #15
 800959e:	3b04      	subs	r3, #4
 80095a0:	0112      	lsls	r2, r2, #4
 80095a2:	b2d2      	uxtb	r2, r2
 80095a4:	440b      	add	r3, r1
 80095a6:	761a      	strb	r2, [r3, #24]
}
 80095a8:	bf00      	nop
 80095aa:	370c      	adds	r7, #12
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bc80      	pop	{r7}
 80095b0:	4770      	bx	lr
 80095b2:	bf00      	nop
 80095b4:	e000e100 	.word	0xe000e100
 80095b8:	e000ed00 	.word	0xe000ed00

080095bc <NVIC_EncodePriority>:
{
 80095bc:	b480      	push	{r7}
 80095be:	b089      	sub	sp, #36	@ 0x24
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	60f8      	str	r0, [r7, #12]
 80095c4:	60b9      	str	r1, [r7, #8]
 80095c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	f003 0307 	and.w	r3, r3, #7
 80095ce:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80095d0:	69fb      	ldr	r3, [r7, #28]
 80095d2:	f1c3 0307 	rsb	r3, r3, #7
 80095d6:	2b04      	cmp	r3, #4
 80095d8:	bf28      	it	cs
 80095da:	2304      	movcs	r3, #4
 80095dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80095de:	69fb      	ldr	r3, [r7, #28]
 80095e0:	3304      	adds	r3, #4
 80095e2:	2b06      	cmp	r3, #6
 80095e4:	d902      	bls.n	80095ec <NVIC_EncodePriority+0x30>
 80095e6:	69fb      	ldr	r3, [r7, #28]
 80095e8:	3b03      	subs	r3, #3
 80095ea:	e000      	b.n	80095ee <NVIC_EncodePriority+0x32>
 80095ec:	2300      	movs	r3, #0
 80095ee:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80095f0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80095f4:	69bb      	ldr	r3, [r7, #24]
 80095f6:	fa02 f303 	lsl.w	r3, r2, r3
 80095fa:	43da      	mvns	r2, r3
 80095fc:	68bb      	ldr	r3, [r7, #8]
 80095fe:	401a      	ands	r2, r3
 8009600:	697b      	ldr	r3, [r7, #20]
 8009602:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009604:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	fa01 f303 	lsl.w	r3, r1, r3
 800960e:	43d9      	mvns	r1, r3
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009614:	4313      	orrs	r3, r2
}
 8009616:	4618      	mov	r0, r3
 8009618:	3724      	adds	r7, #36	@ 0x24
 800961a:	46bd      	mov	sp, r7
 800961c:	bc80      	pop	{r7}
 800961e:	4770      	bx	lr

08009620 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b082      	sub	sp, #8
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	3b01      	subs	r3, #1
 800962c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009630:	d301      	bcc.n	8009636 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009632:	2301      	movs	r3, #1
 8009634:	e00f      	b.n	8009656 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009636:	4a0a      	ldr	r2, [pc, #40]	@ (8009660 <SysTick_Config+0x40>)
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	3b01      	subs	r3, #1
 800963c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800963e:	210f      	movs	r1, #15
 8009640:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009644:	f7ff ff90 	bl	8009568 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009648:	4b05      	ldr	r3, [pc, #20]	@ (8009660 <SysTick_Config+0x40>)
 800964a:	2200      	movs	r2, #0
 800964c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800964e:	4b04      	ldr	r3, [pc, #16]	@ (8009660 <SysTick_Config+0x40>)
 8009650:	2207      	movs	r2, #7
 8009652:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009654:	2300      	movs	r3, #0
}
 8009656:	4618      	mov	r0, r3
 8009658:	3708      	adds	r7, #8
 800965a:	46bd      	mov	sp, r7
 800965c:	bd80      	pop	{r7, pc}
 800965e:	bf00      	nop
 8009660:	e000e010 	.word	0xe000e010

08009664 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009664:	b580      	push	{r7, lr}
 8009666:	b082      	sub	sp, #8
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f7ff ff2d 	bl	80094cc <__NVIC_SetPriorityGrouping>
}
 8009672:	bf00      	nop
 8009674:	3708      	adds	r7, #8
 8009676:	46bd      	mov	sp, r7
 8009678:	bd80      	pop	{r7, pc}

0800967a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800967a:	b580      	push	{r7, lr}
 800967c:	b086      	sub	sp, #24
 800967e:	af00      	add	r7, sp, #0
 8009680:	4603      	mov	r3, r0
 8009682:	60b9      	str	r1, [r7, #8]
 8009684:	607a      	str	r2, [r7, #4]
 8009686:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009688:	2300      	movs	r3, #0
 800968a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800968c:	f7ff ff42 	bl	8009514 <__NVIC_GetPriorityGrouping>
 8009690:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009692:	687a      	ldr	r2, [r7, #4]
 8009694:	68b9      	ldr	r1, [r7, #8]
 8009696:	6978      	ldr	r0, [r7, #20]
 8009698:	f7ff ff90 	bl	80095bc <NVIC_EncodePriority>
 800969c:	4602      	mov	r2, r0
 800969e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80096a2:	4611      	mov	r1, r2
 80096a4:	4618      	mov	r0, r3
 80096a6:	f7ff ff5f 	bl	8009568 <__NVIC_SetPriority>
}
 80096aa:	bf00      	nop
 80096ac:	3718      	adds	r7, #24
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}

080096b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80096b2:	b580      	push	{r7, lr}
 80096b4:	b082      	sub	sp, #8
 80096b6:	af00      	add	r7, sp, #0
 80096b8:	4603      	mov	r3, r0
 80096ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80096bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80096c0:	4618      	mov	r0, r3
 80096c2:	f7ff ff35 	bl	8009530 <__NVIC_EnableIRQ>
}
 80096c6:	bf00      	nop
 80096c8:	3708      	adds	r7, #8
 80096ca:	46bd      	mov	sp, r7
 80096cc:	bd80      	pop	{r7, pc}

080096ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80096ce:	b580      	push	{r7, lr}
 80096d0:	b082      	sub	sp, #8
 80096d2:	af00      	add	r7, sp, #0
 80096d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80096d6:	6878      	ldr	r0, [r7, #4]
 80096d8:	f7ff ffa2 	bl	8009620 <SysTick_Config>
 80096dc:	4603      	mov	r3, r0
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3708      	adds	r7, #8
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}

080096e6 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80096e6:	b480      	push	{r7}
 80096e8:	b085      	sub	sp, #20
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80096ee:	2300      	movs	r3, #0
 80096f0:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80096f8:	b2db      	uxtb	r3, r3
 80096fa:	2b02      	cmp	r3, #2
 80096fc:	d008      	beq.n	8009710 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	2204      	movs	r2, #4
 8009702:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2200      	movs	r2, #0
 8009708:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800970c:	2301      	movs	r3, #1
 800970e:	e020      	b.n	8009752 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	681a      	ldr	r2, [r3, #0]
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	f022 020e 	bic.w	r2, r2, #14
 800971e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	681a      	ldr	r2, [r3, #0]
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f022 0201 	bic.w	r2, r2, #1
 800972e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009734:	687b      	ldr	r3, [r7, #4]
 8009736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009738:	2101      	movs	r1, #1
 800973a:	fa01 f202 	lsl.w	r2, r1, r2
 800973e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	2201      	movs	r2, #1
 8009744:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	2200      	movs	r2, #0
 800974c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8009750:	7bfb      	ldrb	r3, [r7, #15]
}
 8009752:	4618      	mov	r0, r3
 8009754:	3714      	adds	r7, #20
 8009756:	46bd      	mov	sp, r7
 8009758:	bc80      	pop	{r7}
 800975a:	4770      	bx	lr

0800975c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800975c:	b580      	push	{r7, lr}
 800975e:	b084      	sub	sp, #16
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009764:	2300      	movs	r3, #0
 8009766:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800976e:	b2db      	uxtb	r3, r3
 8009770:	2b02      	cmp	r3, #2
 8009772:	d005      	beq.n	8009780 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	2204      	movs	r2, #4
 8009778:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800977a:	2301      	movs	r3, #1
 800977c:	73fb      	strb	r3, [r7, #15]
 800977e:	e0d6      	b.n	800992e <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	681a      	ldr	r2, [r3, #0]
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	f022 020e 	bic.w	r2, r2, #14
 800978e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	681a      	ldr	r2, [r3, #0]
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	f022 0201 	bic.w	r2, r2, #1
 800979e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	461a      	mov	r2, r3
 80097a6:	4b64      	ldr	r3, [pc, #400]	@ (8009938 <HAL_DMA_Abort_IT+0x1dc>)
 80097a8:	429a      	cmp	r2, r3
 80097aa:	d958      	bls.n	800985e <HAL_DMA_Abort_IT+0x102>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	4a62      	ldr	r2, [pc, #392]	@ (800993c <HAL_DMA_Abort_IT+0x1e0>)
 80097b2:	4293      	cmp	r3, r2
 80097b4:	d04f      	beq.n	8009856 <HAL_DMA_Abort_IT+0xfa>
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	4a61      	ldr	r2, [pc, #388]	@ (8009940 <HAL_DMA_Abort_IT+0x1e4>)
 80097bc:	4293      	cmp	r3, r2
 80097be:	d048      	beq.n	8009852 <HAL_DMA_Abort_IT+0xf6>
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	4a5f      	ldr	r2, [pc, #380]	@ (8009944 <HAL_DMA_Abort_IT+0x1e8>)
 80097c6:	4293      	cmp	r3, r2
 80097c8:	d040      	beq.n	800984c <HAL_DMA_Abort_IT+0xf0>
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	4a5e      	ldr	r2, [pc, #376]	@ (8009948 <HAL_DMA_Abort_IT+0x1ec>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d038      	beq.n	8009846 <HAL_DMA_Abort_IT+0xea>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	4a5c      	ldr	r2, [pc, #368]	@ (800994c <HAL_DMA_Abort_IT+0x1f0>)
 80097da:	4293      	cmp	r3, r2
 80097dc:	d030      	beq.n	8009840 <HAL_DMA_Abort_IT+0xe4>
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	4a5b      	ldr	r2, [pc, #364]	@ (8009950 <HAL_DMA_Abort_IT+0x1f4>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d028      	beq.n	800983a <HAL_DMA_Abort_IT+0xde>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4a52      	ldr	r2, [pc, #328]	@ (8009938 <HAL_DMA_Abort_IT+0x1dc>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d020      	beq.n	8009834 <HAL_DMA_Abort_IT+0xd8>
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	4a57      	ldr	r2, [pc, #348]	@ (8009954 <HAL_DMA_Abort_IT+0x1f8>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d019      	beq.n	8009830 <HAL_DMA_Abort_IT+0xd4>
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4a55      	ldr	r2, [pc, #340]	@ (8009958 <HAL_DMA_Abort_IT+0x1fc>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d012      	beq.n	800982c <HAL_DMA_Abort_IT+0xd0>
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	4a54      	ldr	r2, [pc, #336]	@ (800995c <HAL_DMA_Abort_IT+0x200>)
 800980c:	4293      	cmp	r3, r2
 800980e:	d00a      	beq.n	8009826 <HAL_DMA_Abort_IT+0xca>
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	4a52      	ldr	r2, [pc, #328]	@ (8009960 <HAL_DMA_Abort_IT+0x204>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d102      	bne.n	8009820 <HAL_DMA_Abort_IT+0xc4>
 800981a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800981e:	e01b      	b.n	8009858 <HAL_DMA_Abort_IT+0xfc>
 8009820:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009824:	e018      	b.n	8009858 <HAL_DMA_Abort_IT+0xfc>
 8009826:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800982a:	e015      	b.n	8009858 <HAL_DMA_Abort_IT+0xfc>
 800982c:	2310      	movs	r3, #16
 800982e:	e013      	b.n	8009858 <HAL_DMA_Abort_IT+0xfc>
 8009830:	2301      	movs	r3, #1
 8009832:	e011      	b.n	8009858 <HAL_DMA_Abort_IT+0xfc>
 8009834:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8009838:	e00e      	b.n	8009858 <HAL_DMA_Abort_IT+0xfc>
 800983a:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800983e:	e00b      	b.n	8009858 <HAL_DMA_Abort_IT+0xfc>
 8009840:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009844:	e008      	b.n	8009858 <HAL_DMA_Abort_IT+0xfc>
 8009846:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800984a:	e005      	b.n	8009858 <HAL_DMA_Abort_IT+0xfc>
 800984c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009850:	e002      	b.n	8009858 <HAL_DMA_Abort_IT+0xfc>
 8009852:	2310      	movs	r3, #16
 8009854:	e000      	b.n	8009858 <HAL_DMA_Abort_IT+0xfc>
 8009856:	2301      	movs	r3, #1
 8009858:	4a42      	ldr	r2, [pc, #264]	@ (8009964 <HAL_DMA_Abort_IT+0x208>)
 800985a:	6053      	str	r3, [r2, #4]
 800985c:	e057      	b.n	800990e <HAL_DMA_Abort_IT+0x1b2>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	4a36      	ldr	r2, [pc, #216]	@ (800993c <HAL_DMA_Abort_IT+0x1e0>)
 8009864:	4293      	cmp	r3, r2
 8009866:	d04f      	beq.n	8009908 <HAL_DMA_Abort_IT+0x1ac>
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	4a34      	ldr	r2, [pc, #208]	@ (8009940 <HAL_DMA_Abort_IT+0x1e4>)
 800986e:	4293      	cmp	r3, r2
 8009870:	d048      	beq.n	8009904 <HAL_DMA_Abort_IT+0x1a8>
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	4a33      	ldr	r2, [pc, #204]	@ (8009944 <HAL_DMA_Abort_IT+0x1e8>)
 8009878:	4293      	cmp	r3, r2
 800987a:	d040      	beq.n	80098fe <HAL_DMA_Abort_IT+0x1a2>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	4a31      	ldr	r2, [pc, #196]	@ (8009948 <HAL_DMA_Abort_IT+0x1ec>)
 8009882:	4293      	cmp	r3, r2
 8009884:	d038      	beq.n	80098f8 <HAL_DMA_Abort_IT+0x19c>
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	4a30      	ldr	r2, [pc, #192]	@ (800994c <HAL_DMA_Abort_IT+0x1f0>)
 800988c:	4293      	cmp	r3, r2
 800988e:	d030      	beq.n	80098f2 <HAL_DMA_Abort_IT+0x196>
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	4a2e      	ldr	r2, [pc, #184]	@ (8009950 <HAL_DMA_Abort_IT+0x1f4>)
 8009896:	4293      	cmp	r3, r2
 8009898:	d028      	beq.n	80098ec <HAL_DMA_Abort_IT+0x190>
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	4a26      	ldr	r2, [pc, #152]	@ (8009938 <HAL_DMA_Abort_IT+0x1dc>)
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d020      	beq.n	80098e6 <HAL_DMA_Abort_IT+0x18a>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	4a2a      	ldr	r2, [pc, #168]	@ (8009954 <HAL_DMA_Abort_IT+0x1f8>)
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d019      	beq.n	80098e2 <HAL_DMA_Abort_IT+0x186>
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	4a29      	ldr	r2, [pc, #164]	@ (8009958 <HAL_DMA_Abort_IT+0x1fc>)
 80098b4:	4293      	cmp	r3, r2
 80098b6:	d012      	beq.n	80098de <HAL_DMA_Abort_IT+0x182>
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	4a27      	ldr	r2, [pc, #156]	@ (800995c <HAL_DMA_Abort_IT+0x200>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d00a      	beq.n	80098d8 <HAL_DMA_Abort_IT+0x17c>
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4a26      	ldr	r2, [pc, #152]	@ (8009960 <HAL_DMA_Abort_IT+0x204>)
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d102      	bne.n	80098d2 <HAL_DMA_Abort_IT+0x176>
 80098cc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80098d0:	e01b      	b.n	800990a <HAL_DMA_Abort_IT+0x1ae>
 80098d2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80098d6:	e018      	b.n	800990a <HAL_DMA_Abort_IT+0x1ae>
 80098d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80098dc:	e015      	b.n	800990a <HAL_DMA_Abort_IT+0x1ae>
 80098de:	2310      	movs	r3, #16
 80098e0:	e013      	b.n	800990a <HAL_DMA_Abort_IT+0x1ae>
 80098e2:	2301      	movs	r3, #1
 80098e4:	e011      	b.n	800990a <HAL_DMA_Abort_IT+0x1ae>
 80098e6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80098ea:	e00e      	b.n	800990a <HAL_DMA_Abort_IT+0x1ae>
 80098ec:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80098f0:	e00b      	b.n	800990a <HAL_DMA_Abort_IT+0x1ae>
 80098f2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80098f6:	e008      	b.n	800990a <HAL_DMA_Abort_IT+0x1ae>
 80098f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80098fc:	e005      	b.n	800990a <HAL_DMA_Abort_IT+0x1ae>
 80098fe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009902:	e002      	b.n	800990a <HAL_DMA_Abort_IT+0x1ae>
 8009904:	2310      	movs	r3, #16
 8009906:	e000      	b.n	800990a <HAL_DMA_Abort_IT+0x1ae>
 8009908:	2301      	movs	r3, #1
 800990a:	4a17      	ldr	r2, [pc, #92]	@ (8009968 <HAL_DMA_Abort_IT+0x20c>)
 800990c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2201      	movs	r2, #1
 8009912:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2200      	movs	r2, #0
 800991a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009922:	2b00      	cmp	r3, #0
 8009924:	d003      	beq.n	800992e <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	4798      	blx	r3
    } 
  }
  return status;
 800992e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009930:	4618      	mov	r0, r3
 8009932:	3710      	adds	r7, #16
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}
 8009938:	40020080 	.word	0x40020080
 800993c:	40020008 	.word	0x40020008
 8009940:	4002001c 	.word	0x4002001c
 8009944:	40020030 	.word	0x40020030
 8009948:	40020044 	.word	0x40020044
 800994c:	40020058 	.word	0x40020058
 8009950:	4002006c 	.word	0x4002006c
 8009954:	40020408 	.word	0x40020408
 8009958:	4002041c 	.word	0x4002041c
 800995c:	40020430 	.word	0x40020430
 8009960:	40020444 	.word	0x40020444
 8009964:	40020400 	.word	0x40020400
 8009968:	40020000 	.word	0x40020000

0800996c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800996c:	b480      	push	{r7}
 800996e:	b08b      	sub	sp, #44	@ 0x2c
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
 8009974:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009976:	2300      	movs	r3, #0
 8009978:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800997a:	2300      	movs	r3, #0
 800997c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800997e:	e179      	b.n	8009c74 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8009980:	2201      	movs	r2, #1
 8009982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009984:	fa02 f303 	lsl.w	r3, r2, r3
 8009988:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800998a:	683b      	ldr	r3, [r7, #0]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	69fa      	ldr	r2, [r7, #28]
 8009990:	4013      	ands	r3, r2
 8009992:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8009994:	69ba      	ldr	r2, [r7, #24]
 8009996:	69fb      	ldr	r3, [r7, #28]
 8009998:	429a      	cmp	r2, r3
 800999a:	f040 8168 	bne.w	8009c6e <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	685b      	ldr	r3, [r3, #4]
 80099a2:	4a96      	ldr	r2, [pc, #600]	@ (8009bfc <HAL_GPIO_Init+0x290>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d05e      	beq.n	8009a66 <HAL_GPIO_Init+0xfa>
 80099a8:	4a94      	ldr	r2, [pc, #592]	@ (8009bfc <HAL_GPIO_Init+0x290>)
 80099aa:	4293      	cmp	r3, r2
 80099ac:	d875      	bhi.n	8009a9a <HAL_GPIO_Init+0x12e>
 80099ae:	4a94      	ldr	r2, [pc, #592]	@ (8009c00 <HAL_GPIO_Init+0x294>)
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d058      	beq.n	8009a66 <HAL_GPIO_Init+0xfa>
 80099b4:	4a92      	ldr	r2, [pc, #584]	@ (8009c00 <HAL_GPIO_Init+0x294>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d86f      	bhi.n	8009a9a <HAL_GPIO_Init+0x12e>
 80099ba:	4a92      	ldr	r2, [pc, #584]	@ (8009c04 <HAL_GPIO_Init+0x298>)
 80099bc:	4293      	cmp	r3, r2
 80099be:	d052      	beq.n	8009a66 <HAL_GPIO_Init+0xfa>
 80099c0:	4a90      	ldr	r2, [pc, #576]	@ (8009c04 <HAL_GPIO_Init+0x298>)
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d869      	bhi.n	8009a9a <HAL_GPIO_Init+0x12e>
 80099c6:	4a90      	ldr	r2, [pc, #576]	@ (8009c08 <HAL_GPIO_Init+0x29c>)
 80099c8:	4293      	cmp	r3, r2
 80099ca:	d04c      	beq.n	8009a66 <HAL_GPIO_Init+0xfa>
 80099cc:	4a8e      	ldr	r2, [pc, #568]	@ (8009c08 <HAL_GPIO_Init+0x29c>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d863      	bhi.n	8009a9a <HAL_GPIO_Init+0x12e>
 80099d2:	4a8e      	ldr	r2, [pc, #568]	@ (8009c0c <HAL_GPIO_Init+0x2a0>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d046      	beq.n	8009a66 <HAL_GPIO_Init+0xfa>
 80099d8:	4a8c      	ldr	r2, [pc, #560]	@ (8009c0c <HAL_GPIO_Init+0x2a0>)
 80099da:	4293      	cmp	r3, r2
 80099dc:	d85d      	bhi.n	8009a9a <HAL_GPIO_Init+0x12e>
 80099de:	2b12      	cmp	r3, #18
 80099e0:	d82a      	bhi.n	8009a38 <HAL_GPIO_Init+0xcc>
 80099e2:	2b12      	cmp	r3, #18
 80099e4:	d859      	bhi.n	8009a9a <HAL_GPIO_Init+0x12e>
 80099e6:	a201      	add	r2, pc, #4	@ (adr r2, 80099ec <HAL_GPIO_Init+0x80>)
 80099e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099ec:	08009a67 	.word	0x08009a67
 80099f0:	08009a41 	.word	0x08009a41
 80099f4:	08009a53 	.word	0x08009a53
 80099f8:	08009a95 	.word	0x08009a95
 80099fc:	08009a9b 	.word	0x08009a9b
 8009a00:	08009a9b 	.word	0x08009a9b
 8009a04:	08009a9b 	.word	0x08009a9b
 8009a08:	08009a9b 	.word	0x08009a9b
 8009a0c:	08009a9b 	.word	0x08009a9b
 8009a10:	08009a9b 	.word	0x08009a9b
 8009a14:	08009a9b 	.word	0x08009a9b
 8009a18:	08009a9b 	.word	0x08009a9b
 8009a1c:	08009a9b 	.word	0x08009a9b
 8009a20:	08009a9b 	.word	0x08009a9b
 8009a24:	08009a9b 	.word	0x08009a9b
 8009a28:	08009a9b 	.word	0x08009a9b
 8009a2c:	08009a9b 	.word	0x08009a9b
 8009a30:	08009a49 	.word	0x08009a49
 8009a34:	08009a5d 	.word	0x08009a5d
 8009a38:	4a75      	ldr	r2, [pc, #468]	@ (8009c10 <HAL_GPIO_Init+0x2a4>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d013      	beq.n	8009a66 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8009a3e:	e02c      	b.n	8009a9a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	68db      	ldr	r3, [r3, #12]
 8009a44:	623b      	str	r3, [r7, #32]
          break;
 8009a46:	e029      	b.n	8009a9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	68db      	ldr	r3, [r3, #12]
 8009a4c:	3304      	adds	r3, #4
 8009a4e:	623b      	str	r3, [r7, #32]
          break;
 8009a50:	e024      	b.n	8009a9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8009a52:	683b      	ldr	r3, [r7, #0]
 8009a54:	68db      	ldr	r3, [r3, #12]
 8009a56:	3308      	adds	r3, #8
 8009a58:	623b      	str	r3, [r7, #32]
          break;
 8009a5a:	e01f      	b.n	8009a9c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	68db      	ldr	r3, [r3, #12]
 8009a60:	330c      	adds	r3, #12
 8009a62:	623b      	str	r3, [r7, #32]
          break;
 8009a64:	e01a      	b.n	8009a9c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8009a66:	683b      	ldr	r3, [r7, #0]
 8009a68:	689b      	ldr	r3, [r3, #8]
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d102      	bne.n	8009a74 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8009a6e:	2304      	movs	r3, #4
 8009a70:	623b      	str	r3, [r7, #32]
          break;
 8009a72:	e013      	b.n	8009a9c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8009a74:	683b      	ldr	r3, [r7, #0]
 8009a76:	689b      	ldr	r3, [r3, #8]
 8009a78:	2b01      	cmp	r3, #1
 8009a7a:	d105      	bne.n	8009a88 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009a7c:	2308      	movs	r3, #8
 8009a7e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	69fa      	ldr	r2, [r7, #28]
 8009a84:	611a      	str	r2, [r3, #16]
          break;
 8009a86:	e009      	b.n	8009a9c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009a88:	2308      	movs	r3, #8
 8009a8a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	69fa      	ldr	r2, [r7, #28]
 8009a90:	615a      	str	r2, [r3, #20]
          break;
 8009a92:	e003      	b.n	8009a9c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8009a94:	2300      	movs	r3, #0
 8009a96:	623b      	str	r3, [r7, #32]
          break;
 8009a98:	e000      	b.n	8009a9c <HAL_GPIO_Init+0x130>
          break;
 8009a9a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009a9c:	69bb      	ldr	r3, [r7, #24]
 8009a9e:	2bff      	cmp	r3, #255	@ 0xff
 8009aa0:	d801      	bhi.n	8009aa6 <HAL_GPIO_Init+0x13a>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	e001      	b.n	8009aaa <HAL_GPIO_Init+0x13e>
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	3304      	adds	r3, #4
 8009aaa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009aac:	69bb      	ldr	r3, [r7, #24]
 8009aae:	2bff      	cmp	r3, #255	@ 0xff
 8009ab0:	d802      	bhi.n	8009ab8 <HAL_GPIO_Init+0x14c>
 8009ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ab4:	009b      	lsls	r3, r3, #2
 8009ab6:	e002      	b.n	8009abe <HAL_GPIO_Init+0x152>
 8009ab8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009aba:	3b08      	subs	r3, #8
 8009abc:	009b      	lsls	r3, r3, #2
 8009abe:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8009ac0:	697b      	ldr	r3, [r7, #20]
 8009ac2:	681a      	ldr	r2, [r3, #0]
 8009ac4:	210f      	movs	r1, #15
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8009acc:	43db      	mvns	r3, r3
 8009ace:	401a      	ands	r2, r3
 8009ad0:	6a39      	ldr	r1, [r7, #32]
 8009ad2:	693b      	ldr	r3, [r7, #16]
 8009ad4:	fa01 f303 	lsl.w	r3, r1, r3
 8009ad8:	431a      	orrs	r2, r3
 8009ada:	697b      	ldr	r3, [r7, #20]
 8009adc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	685b      	ldr	r3, [r3, #4]
 8009ae2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	f000 80c1 	beq.w	8009c6e <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8009aec:	4b49      	ldr	r3, [pc, #292]	@ (8009c14 <HAL_GPIO_Init+0x2a8>)
 8009aee:	699b      	ldr	r3, [r3, #24]
 8009af0:	4a48      	ldr	r2, [pc, #288]	@ (8009c14 <HAL_GPIO_Init+0x2a8>)
 8009af2:	f043 0301 	orr.w	r3, r3, #1
 8009af6:	6193      	str	r3, [r2, #24]
 8009af8:	4b46      	ldr	r3, [pc, #280]	@ (8009c14 <HAL_GPIO_Init+0x2a8>)
 8009afa:	699b      	ldr	r3, [r3, #24]
 8009afc:	f003 0301 	and.w	r3, r3, #1
 8009b00:	60bb      	str	r3, [r7, #8]
 8009b02:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8009b04:	4a44      	ldr	r2, [pc, #272]	@ (8009c18 <HAL_GPIO_Init+0x2ac>)
 8009b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b08:	089b      	lsrs	r3, r3, #2
 8009b0a:	3302      	adds	r3, #2
 8009b0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b10:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8009b12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b14:	f003 0303 	and.w	r3, r3, #3
 8009b18:	009b      	lsls	r3, r3, #2
 8009b1a:	220f      	movs	r2, #15
 8009b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8009b20:	43db      	mvns	r3, r3
 8009b22:	68fa      	ldr	r2, [r7, #12]
 8009b24:	4013      	ands	r3, r2
 8009b26:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	4a3c      	ldr	r2, [pc, #240]	@ (8009c1c <HAL_GPIO_Init+0x2b0>)
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	d01f      	beq.n	8009b70 <HAL_GPIO_Init+0x204>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	4a3b      	ldr	r2, [pc, #236]	@ (8009c20 <HAL_GPIO_Init+0x2b4>)
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d019      	beq.n	8009b6c <HAL_GPIO_Init+0x200>
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	4a3a      	ldr	r2, [pc, #232]	@ (8009c24 <HAL_GPIO_Init+0x2b8>)
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d013      	beq.n	8009b68 <HAL_GPIO_Init+0x1fc>
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	4a39      	ldr	r2, [pc, #228]	@ (8009c28 <HAL_GPIO_Init+0x2bc>)
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d00d      	beq.n	8009b64 <HAL_GPIO_Init+0x1f8>
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	4a38      	ldr	r2, [pc, #224]	@ (8009c2c <HAL_GPIO_Init+0x2c0>)
 8009b4c:	4293      	cmp	r3, r2
 8009b4e:	d007      	beq.n	8009b60 <HAL_GPIO_Init+0x1f4>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	4a37      	ldr	r2, [pc, #220]	@ (8009c30 <HAL_GPIO_Init+0x2c4>)
 8009b54:	4293      	cmp	r3, r2
 8009b56:	d101      	bne.n	8009b5c <HAL_GPIO_Init+0x1f0>
 8009b58:	2305      	movs	r3, #5
 8009b5a:	e00a      	b.n	8009b72 <HAL_GPIO_Init+0x206>
 8009b5c:	2306      	movs	r3, #6
 8009b5e:	e008      	b.n	8009b72 <HAL_GPIO_Init+0x206>
 8009b60:	2304      	movs	r3, #4
 8009b62:	e006      	b.n	8009b72 <HAL_GPIO_Init+0x206>
 8009b64:	2303      	movs	r3, #3
 8009b66:	e004      	b.n	8009b72 <HAL_GPIO_Init+0x206>
 8009b68:	2302      	movs	r3, #2
 8009b6a:	e002      	b.n	8009b72 <HAL_GPIO_Init+0x206>
 8009b6c:	2301      	movs	r3, #1
 8009b6e:	e000      	b.n	8009b72 <HAL_GPIO_Init+0x206>
 8009b70:	2300      	movs	r3, #0
 8009b72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b74:	f002 0203 	and.w	r2, r2, #3
 8009b78:	0092      	lsls	r2, r2, #2
 8009b7a:	4093      	lsls	r3, r2
 8009b7c:	68fa      	ldr	r2, [r7, #12]
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8009b82:	4925      	ldr	r1, [pc, #148]	@ (8009c18 <HAL_GPIO_Init+0x2ac>)
 8009b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b86:	089b      	lsrs	r3, r3, #2
 8009b88:	3302      	adds	r3, #2
 8009b8a:	68fa      	ldr	r2, [r7, #12]
 8009b8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	685b      	ldr	r3, [r3, #4]
 8009b94:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d006      	beq.n	8009baa <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8009b9c:	4b25      	ldr	r3, [pc, #148]	@ (8009c34 <HAL_GPIO_Init+0x2c8>)
 8009b9e:	689a      	ldr	r2, [r3, #8]
 8009ba0:	4924      	ldr	r1, [pc, #144]	@ (8009c34 <HAL_GPIO_Init+0x2c8>)
 8009ba2:	69bb      	ldr	r3, [r7, #24]
 8009ba4:	4313      	orrs	r3, r2
 8009ba6:	608b      	str	r3, [r1, #8]
 8009ba8:	e006      	b.n	8009bb8 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8009baa:	4b22      	ldr	r3, [pc, #136]	@ (8009c34 <HAL_GPIO_Init+0x2c8>)
 8009bac:	689a      	ldr	r2, [r3, #8]
 8009bae:	69bb      	ldr	r3, [r7, #24]
 8009bb0:	43db      	mvns	r3, r3
 8009bb2:	4920      	ldr	r1, [pc, #128]	@ (8009c34 <HAL_GPIO_Init+0x2c8>)
 8009bb4:	4013      	ands	r3, r2
 8009bb6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009bb8:	683b      	ldr	r3, [r7, #0]
 8009bba:	685b      	ldr	r3, [r3, #4]
 8009bbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	d006      	beq.n	8009bd2 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8009bc4:	4b1b      	ldr	r3, [pc, #108]	@ (8009c34 <HAL_GPIO_Init+0x2c8>)
 8009bc6:	68da      	ldr	r2, [r3, #12]
 8009bc8:	491a      	ldr	r1, [pc, #104]	@ (8009c34 <HAL_GPIO_Init+0x2c8>)
 8009bca:	69bb      	ldr	r3, [r7, #24]
 8009bcc:	4313      	orrs	r3, r2
 8009bce:	60cb      	str	r3, [r1, #12]
 8009bd0:	e006      	b.n	8009be0 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8009bd2:	4b18      	ldr	r3, [pc, #96]	@ (8009c34 <HAL_GPIO_Init+0x2c8>)
 8009bd4:	68da      	ldr	r2, [r3, #12]
 8009bd6:	69bb      	ldr	r3, [r7, #24]
 8009bd8:	43db      	mvns	r3, r3
 8009bda:	4916      	ldr	r1, [pc, #88]	@ (8009c34 <HAL_GPIO_Init+0x2c8>)
 8009bdc:	4013      	ands	r3, r2
 8009bde:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	685b      	ldr	r3, [r3, #4]
 8009be4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d025      	beq.n	8009c38 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8009bec:	4b11      	ldr	r3, [pc, #68]	@ (8009c34 <HAL_GPIO_Init+0x2c8>)
 8009bee:	685a      	ldr	r2, [r3, #4]
 8009bf0:	4910      	ldr	r1, [pc, #64]	@ (8009c34 <HAL_GPIO_Init+0x2c8>)
 8009bf2:	69bb      	ldr	r3, [r7, #24]
 8009bf4:	4313      	orrs	r3, r2
 8009bf6:	604b      	str	r3, [r1, #4]
 8009bf8:	e025      	b.n	8009c46 <HAL_GPIO_Init+0x2da>
 8009bfa:	bf00      	nop
 8009bfc:	10320000 	.word	0x10320000
 8009c00:	10310000 	.word	0x10310000
 8009c04:	10220000 	.word	0x10220000
 8009c08:	10210000 	.word	0x10210000
 8009c0c:	10120000 	.word	0x10120000
 8009c10:	10110000 	.word	0x10110000
 8009c14:	40021000 	.word	0x40021000
 8009c18:	40010000 	.word	0x40010000
 8009c1c:	40010800 	.word	0x40010800
 8009c20:	40010c00 	.word	0x40010c00
 8009c24:	40011000 	.word	0x40011000
 8009c28:	40011400 	.word	0x40011400
 8009c2c:	40011800 	.word	0x40011800
 8009c30:	40011c00 	.word	0x40011c00
 8009c34:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8009c38:	4b15      	ldr	r3, [pc, #84]	@ (8009c90 <HAL_GPIO_Init+0x324>)
 8009c3a:	685a      	ldr	r2, [r3, #4]
 8009c3c:	69bb      	ldr	r3, [r7, #24]
 8009c3e:	43db      	mvns	r3, r3
 8009c40:	4913      	ldr	r1, [pc, #76]	@ (8009c90 <HAL_GPIO_Init+0x324>)
 8009c42:	4013      	ands	r3, r2
 8009c44:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	685b      	ldr	r3, [r3, #4]
 8009c4a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d006      	beq.n	8009c60 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8009c52:	4b0f      	ldr	r3, [pc, #60]	@ (8009c90 <HAL_GPIO_Init+0x324>)
 8009c54:	681a      	ldr	r2, [r3, #0]
 8009c56:	490e      	ldr	r1, [pc, #56]	@ (8009c90 <HAL_GPIO_Init+0x324>)
 8009c58:	69bb      	ldr	r3, [r7, #24]
 8009c5a:	4313      	orrs	r3, r2
 8009c5c:	600b      	str	r3, [r1, #0]
 8009c5e:	e006      	b.n	8009c6e <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009c60:	4b0b      	ldr	r3, [pc, #44]	@ (8009c90 <HAL_GPIO_Init+0x324>)
 8009c62:	681a      	ldr	r2, [r3, #0]
 8009c64:	69bb      	ldr	r3, [r7, #24]
 8009c66:	43db      	mvns	r3, r3
 8009c68:	4909      	ldr	r1, [pc, #36]	@ (8009c90 <HAL_GPIO_Init+0x324>)
 8009c6a:	4013      	ands	r3, r2
 8009c6c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8009c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c70:	3301      	adds	r3, #1
 8009c72:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	681a      	ldr	r2, [r3, #0]
 8009c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	f47f ae7e 	bne.w	8009980 <HAL_GPIO_Init+0x14>
  }
}
 8009c84:	bf00      	nop
 8009c86:	bf00      	nop
 8009c88:	372c      	adds	r7, #44	@ 0x2c
 8009c8a:	46bd      	mov	sp, r7
 8009c8c:	bc80      	pop	{r7}
 8009c8e:	4770      	bx	lr
 8009c90:	40010400 	.word	0x40010400

08009c94 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009c94:	b480      	push	{r7}
 8009c96:	b089      	sub	sp, #36	@ 0x24
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
 8009c9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009c9e:	2300      	movs	r3, #0
 8009ca0:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8009ca2:	e0a6      	b.n	8009df2 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8009ca4:	2201      	movs	r2, #1
 8009ca6:	69fb      	ldr	r3, [r7, #28]
 8009ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8009cac:	683a      	ldr	r2, [r7, #0]
 8009cae:	4013      	ands	r3, r2
 8009cb0:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8009cb2:	69bb      	ldr	r3, [r7, #24]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	f000 8099 	beq.w	8009dec <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8009cba:	4a54      	ldr	r2, [pc, #336]	@ (8009e0c <HAL_GPIO_DeInit+0x178>)
 8009cbc:	69fb      	ldr	r3, [r7, #28]
 8009cbe:	089b      	lsrs	r3, r3, #2
 8009cc0:	3302      	adds	r3, #2
 8009cc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009cc6:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8009cc8:	69fb      	ldr	r3, [r7, #28]
 8009cca:	f003 0303 	and.w	r3, r3, #3
 8009cce:	009b      	lsls	r3, r3, #2
 8009cd0:	220f      	movs	r2, #15
 8009cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8009cd6:	697a      	ldr	r2, [r7, #20]
 8009cd8:	4013      	ands	r3, r2
 8009cda:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	4a4c      	ldr	r2, [pc, #304]	@ (8009e10 <HAL_GPIO_DeInit+0x17c>)
 8009ce0:	4293      	cmp	r3, r2
 8009ce2:	d01f      	beq.n	8009d24 <HAL_GPIO_DeInit+0x90>
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	4a4b      	ldr	r2, [pc, #300]	@ (8009e14 <HAL_GPIO_DeInit+0x180>)
 8009ce8:	4293      	cmp	r3, r2
 8009cea:	d019      	beq.n	8009d20 <HAL_GPIO_DeInit+0x8c>
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	4a4a      	ldr	r2, [pc, #296]	@ (8009e18 <HAL_GPIO_DeInit+0x184>)
 8009cf0:	4293      	cmp	r3, r2
 8009cf2:	d013      	beq.n	8009d1c <HAL_GPIO_DeInit+0x88>
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	4a49      	ldr	r2, [pc, #292]	@ (8009e1c <HAL_GPIO_DeInit+0x188>)
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d00d      	beq.n	8009d18 <HAL_GPIO_DeInit+0x84>
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	4a48      	ldr	r2, [pc, #288]	@ (8009e20 <HAL_GPIO_DeInit+0x18c>)
 8009d00:	4293      	cmp	r3, r2
 8009d02:	d007      	beq.n	8009d14 <HAL_GPIO_DeInit+0x80>
 8009d04:	687b      	ldr	r3, [r7, #4]
 8009d06:	4a47      	ldr	r2, [pc, #284]	@ (8009e24 <HAL_GPIO_DeInit+0x190>)
 8009d08:	4293      	cmp	r3, r2
 8009d0a:	d101      	bne.n	8009d10 <HAL_GPIO_DeInit+0x7c>
 8009d0c:	2305      	movs	r3, #5
 8009d0e:	e00a      	b.n	8009d26 <HAL_GPIO_DeInit+0x92>
 8009d10:	2306      	movs	r3, #6
 8009d12:	e008      	b.n	8009d26 <HAL_GPIO_DeInit+0x92>
 8009d14:	2304      	movs	r3, #4
 8009d16:	e006      	b.n	8009d26 <HAL_GPIO_DeInit+0x92>
 8009d18:	2303      	movs	r3, #3
 8009d1a:	e004      	b.n	8009d26 <HAL_GPIO_DeInit+0x92>
 8009d1c:	2302      	movs	r3, #2
 8009d1e:	e002      	b.n	8009d26 <HAL_GPIO_DeInit+0x92>
 8009d20:	2301      	movs	r3, #1
 8009d22:	e000      	b.n	8009d26 <HAL_GPIO_DeInit+0x92>
 8009d24:	2300      	movs	r3, #0
 8009d26:	69fa      	ldr	r2, [r7, #28]
 8009d28:	f002 0203 	and.w	r2, r2, #3
 8009d2c:	0092      	lsls	r2, r2, #2
 8009d2e:	4093      	lsls	r3, r2
 8009d30:	697a      	ldr	r2, [r7, #20]
 8009d32:	429a      	cmp	r2, r3
 8009d34:	d132      	bne.n	8009d9c <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8009d36:	4b3c      	ldr	r3, [pc, #240]	@ (8009e28 <HAL_GPIO_DeInit+0x194>)
 8009d38:	681a      	ldr	r2, [r3, #0]
 8009d3a:	69bb      	ldr	r3, [r7, #24]
 8009d3c:	43db      	mvns	r3, r3
 8009d3e:	493a      	ldr	r1, [pc, #232]	@ (8009e28 <HAL_GPIO_DeInit+0x194>)
 8009d40:	4013      	ands	r3, r2
 8009d42:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8009d44:	4b38      	ldr	r3, [pc, #224]	@ (8009e28 <HAL_GPIO_DeInit+0x194>)
 8009d46:	685a      	ldr	r2, [r3, #4]
 8009d48:	69bb      	ldr	r3, [r7, #24]
 8009d4a:	43db      	mvns	r3, r3
 8009d4c:	4936      	ldr	r1, [pc, #216]	@ (8009e28 <HAL_GPIO_DeInit+0x194>)
 8009d4e:	4013      	ands	r3, r2
 8009d50:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8009d52:	4b35      	ldr	r3, [pc, #212]	@ (8009e28 <HAL_GPIO_DeInit+0x194>)
 8009d54:	68da      	ldr	r2, [r3, #12]
 8009d56:	69bb      	ldr	r3, [r7, #24]
 8009d58:	43db      	mvns	r3, r3
 8009d5a:	4933      	ldr	r1, [pc, #204]	@ (8009e28 <HAL_GPIO_DeInit+0x194>)
 8009d5c:	4013      	ands	r3, r2
 8009d5e:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8009d60:	4b31      	ldr	r3, [pc, #196]	@ (8009e28 <HAL_GPIO_DeInit+0x194>)
 8009d62:	689a      	ldr	r2, [r3, #8]
 8009d64:	69bb      	ldr	r3, [r7, #24]
 8009d66:	43db      	mvns	r3, r3
 8009d68:	492f      	ldr	r1, [pc, #188]	@ (8009e28 <HAL_GPIO_DeInit+0x194>)
 8009d6a:	4013      	ands	r3, r2
 8009d6c:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8009d6e:	69fb      	ldr	r3, [r7, #28]
 8009d70:	f003 0303 	and.w	r3, r3, #3
 8009d74:	009b      	lsls	r3, r3, #2
 8009d76:	220f      	movs	r2, #15
 8009d78:	fa02 f303 	lsl.w	r3, r2, r3
 8009d7c:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8009d7e:	4a23      	ldr	r2, [pc, #140]	@ (8009e0c <HAL_GPIO_DeInit+0x178>)
 8009d80:	69fb      	ldr	r3, [r7, #28]
 8009d82:	089b      	lsrs	r3, r3, #2
 8009d84:	3302      	adds	r3, #2
 8009d86:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	43da      	mvns	r2, r3
 8009d8e:	481f      	ldr	r0, [pc, #124]	@ (8009e0c <HAL_GPIO_DeInit+0x178>)
 8009d90:	69fb      	ldr	r3, [r7, #28]
 8009d92:	089b      	lsrs	r3, r3, #2
 8009d94:	400a      	ands	r2, r1
 8009d96:	3302      	adds	r3, #2
 8009d98:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009d9c:	69bb      	ldr	r3, [r7, #24]
 8009d9e:	2bff      	cmp	r3, #255	@ 0xff
 8009da0:	d801      	bhi.n	8009da6 <HAL_GPIO_DeInit+0x112>
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	e001      	b.n	8009daa <HAL_GPIO_DeInit+0x116>
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	3304      	adds	r3, #4
 8009daa:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009dac:	69bb      	ldr	r3, [r7, #24]
 8009dae:	2bff      	cmp	r3, #255	@ 0xff
 8009db0:	d802      	bhi.n	8009db8 <HAL_GPIO_DeInit+0x124>
 8009db2:	69fb      	ldr	r3, [r7, #28]
 8009db4:	009b      	lsls	r3, r3, #2
 8009db6:	e002      	b.n	8009dbe <HAL_GPIO_DeInit+0x12a>
 8009db8:	69fb      	ldr	r3, [r7, #28]
 8009dba:	3b08      	subs	r3, #8
 8009dbc:	009b      	lsls	r3, r3, #2
 8009dbe:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	681a      	ldr	r2, [r3, #0]
 8009dc4:	210f      	movs	r1, #15
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	fa01 f303 	lsl.w	r3, r1, r3
 8009dcc:	43db      	mvns	r3, r3
 8009dce:	401a      	ands	r2, r3
 8009dd0:	2104      	movs	r1, #4
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8009dd8:	431a      	orrs	r2, r3
 8009dda:	693b      	ldr	r3, [r7, #16]
 8009ddc:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	68da      	ldr	r2, [r3, #12]
 8009de2:	69bb      	ldr	r3, [r7, #24]
 8009de4:	43db      	mvns	r3, r3
 8009de6:	401a      	ands	r2, r3
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	60da      	str	r2, [r3, #12]
    }

    position++;
 8009dec:	69fb      	ldr	r3, [r7, #28]
 8009dee:	3301      	adds	r3, #1
 8009df0:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8009df2:	683a      	ldr	r2, [r7, #0]
 8009df4:	69fb      	ldr	r3, [r7, #28]
 8009df6:	fa22 f303 	lsr.w	r3, r2, r3
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	f47f af52 	bne.w	8009ca4 <HAL_GPIO_DeInit+0x10>
  }
}
 8009e00:	bf00      	nop
 8009e02:	bf00      	nop
 8009e04:	3724      	adds	r7, #36	@ 0x24
 8009e06:	46bd      	mov	sp, r7
 8009e08:	bc80      	pop	{r7}
 8009e0a:	4770      	bx	lr
 8009e0c:	40010000 	.word	0x40010000
 8009e10:	40010800 	.word	0x40010800
 8009e14:	40010c00 	.word	0x40010c00
 8009e18:	40011000 	.word	0x40011000
 8009e1c:	40011400 	.word	0x40011400
 8009e20:	40011800 	.word	0x40011800
 8009e24:	40011c00 	.word	0x40011c00
 8009e28:	40010400 	.word	0x40010400

08009e2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b085      	sub	sp, #20
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
 8009e34:	460b      	mov	r3, r1
 8009e36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	689a      	ldr	r2, [r3, #8]
 8009e3c:	887b      	ldrh	r3, [r7, #2]
 8009e3e:	4013      	ands	r3, r2
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d002      	beq.n	8009e4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009e44:	2301      	movs	r3, #1
 8009e46:	73fb      	strb	r3, [r7, #15]
 8009e48:	e001      	b.n	8009e4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009e4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	3714      	adds	r7, #20
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bc80      	pop	{r7}
 8009e58:	4770      	bx	lr

08009e5a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009e5a:	b480      	push	{r7}
 8009e5c:	b083      	sub	sp, #12
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	6078      	str	r0, [r7, #4]
 8009e62:	460b      	mov	r3, r1
 8009e64:	807b      	strh	r3, [r7, #2]
 8009e66:	4613      	mov	r3, r2
 8009e68:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009e6a:	787b      	ldrb	r3, [r7, #1]
 8009e6c:	2b00      	cmp	r3, #0
 8009e6e:	d003      	beq.n	8009e78 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009e70:	887a      	ldrh	r2, [r7, #2]
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8009e76:	e003      	b.n	8009e80 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009e78:	887b      	ldrh	r3, [r7, #2]
 8009e7a:	041a      	lsls	r2, r3, #16
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	611a      	str	r2, [r3, #16]
}
 8009e80:	bf00      	nop
 8009e82:	370c      	adds	r7, #12
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bc80      	pop	{r7}
 8009e88:	4770      	bx	lr

08009e8a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009e8a:	b480      	push	{r7}
 8009e8c:	b085      	sub	sp, #20
 8009e8e:	af00      	add	r7, sp, #0
 8009e90:	6078      	str	r0, [r7, #4]
 8009e92:	460b      	mov	r3, r1
 8009e94:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	68db      	ldr	r3, [r3, #12]
 8009e9a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009e9c:	887a      	ldrh	r2, [r7, #2]
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	4013      	ands	r3, r2
 8009ea2:	041a      	lsls	r2, r3, #16
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	43d9      	mvns	r1, r3
 8009ea8:	887b      	ldrh	r3, [r7, #2]
 8009eaa:	400b      	ands	r3, r1
 8009eac:	431a      	orrs	r2, r3
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	611a      	str	r2, [r3, #16]
}
 8009eb2:	bf00      	nop
 8009eb4:	3714      	adds	r7, #20
 8009eb6:	46bd      	mov	sp, r7
 8009eb8:	bc80      	pop	{r7}
 8009eba:	4770      	bx	lr

08009ebc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b084      	sub	sp, #16
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d101      	bne.n	8009ece <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009eca:	2301      	movs	r3, #1
 8009ecc:	e12b      	b.n	800a126 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8009ed4:	b2db      	uxtb	r3, r3
 8009ed6:	2b00      	cmp	r3, #0
 8009ed8:	d106      	bne.n	8009ee8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2200      	movs	r2, #0
 8009ede:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	f7fe fff4 	bl	8008ed0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2224      	movs	r2, #36	@ 0x24
 8009eec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	681a      	ldr	r2, [r3, #0]
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f022 0201 	bic.w	r2, r2, #1
 8009efe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	681a      	ldr	r2, [r3, #0]
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009f0e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	681a      	ldr	r2, [r3, #0]
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8009f1e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009f20:	f001 fdb8 	bl	800ba94 <HAL_RCC_GetPCLK1Freq>
 8009f24:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	685b      	ldr	r3, [r3, #4]
 8009f2a:	4a81      	ldr	r2, [pc, #516]	@ (800a130 <HAL_I2C_Init+0x274>)
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d807      	bhi.n	8009f40 <HAL_I2C_Init+0x84>
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	4a80      	ldr	r2, [pc, #512]	@ (800a134 <HAL_I2C_Init+0x278>)
 8009f34:	4293      	cmp	r3, r2
 8009f36:	bf94      	ite	ls
 8009f38:	2301      	movls	r3, #1
 8009f3a:	2300      	movhi	r3, #0
 8009f3c:	b2db      	uxtb	r3, r3
 8009f3e:	e006      	b.n	8009f4e <HAL_I2C_Init+0x92>
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	4a7d      	ldr	r2, [pc, #500]	@ (800a138 <HAL_I2C_Init+0x27c>)
 8009f44:	4293      	cmp	r3, r2
 8009f46:	bf94      	ite	ls
 8009f48:	2301      	movls	r3, #1
 8009f4a:	2300      	movhi	r3, #0
 8009f4c:	b2db      	uxtb	r3, r3
 8009f4e:	2b00      	cmp	r3, #0
 8009f50:	d001      	beq.n	8009f56 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009f52:	2301      	movs	r3, #1
 8009f54:	e0e7      	b.n	800a126 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	4a78      	ldr	r2, [pc, #480]	@ (800a13c <HAL_I2C_Init+0x280>)
 8009f5a:	fba2 2303 	umull	r2, r3, r2, r3
 8009f5e:	0c9b      	lsrs	r3, r3, #18
 8009f60:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	685b      	ldr	r3, [r3, #4]
 8009f68:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	68ba      	ldr	r2, [r7, #8]
 8009f72:	430a      	orrs	r2, r1
 8009f74:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	6a1b      	ldr	r3, [r3, #32]
 8009f7c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	685b      	ldr	r3, [r3, #4]
 8009f84:	4a6a      	ldr	r2, [pc, #424]	@ (800a130 <HAL_I2C_Init+0x274>)
 8009f86:	4293      	cmp	r3, r2
 8009f88:	d802      	bhi.n	8009f90 <HAL_I2C_Init+0xd4>
 8009f8a:	68bb      	ldr	r3, [r7, #8]
 8009f8c:	3301      	adds	r3, #1
 8009f8e:	e009      	b.n	8009fa4 <HAL_I2C_Init+0xe8>
 8009f90:	68bb      	ldr	r3, [r7, #8]
 8009f92:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8009f96:	fb02 f303 	mul.w	r3, r2, r3
 8009f9a:	4a69      	ldr	r2, [pc, #420]	@ (800a140 <HAL_I2C_Init+0x284>)
 8009f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8009fa0:	099b      	lsrs	r3, r3, #6
 8009fa2:	3301      	adds	r3, #1
 8009fa4:	687a      	ldr	r2, [r7, #4]
 8009fa6:	6812      	ldr	r2, [r2, #0]
 8009fa8:	430b      	orrs	r3, r1
 8009faa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	69db      	ldr	r3, [r3, #28]
 8009fb2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8009fb6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	495c      	ldr	r1, [pc, #368]	@ (800a130 <HAL_I2C_Init+0x274>)
 8009fc0:	428b      	cmp	r3, r1
 8009fc2:	d819      	bhi.n	8009ff8 <HAL_I2C_Init+0x13c>
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	1e59      	subs	r1, r3, #1
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	685b      	ldr	r3, [r3, #4]
 8009fcc:	005b      	lsls	r3, r3, #1
 8009fce:	fbb1 f3f3 	udiv	r3, r1, r3
 8009fd2:	1c59      	adds	r1, r3, #1
 8009fd4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8009fd8:	400b      	ands	r3, r1
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d00a      	beq.n	8009ff4 <HAL_I2C_Init+0x138>
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	1e59      	subs	r1, r3, #1
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	685b      	ldr	r3, [r3, #4]
 8009fe6:	005b      	lsls	r3, r3, #1
 8009fe8:	fbb1 f3f3 	udiv	r3, r1, r3
 8009fec:	3301      	adds	r3, #1
 8009fee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009ff2:	e051      	b.n	800a098 <HAL_I2C_Init+0x1dc>
 8009ff4:	2304      	movs	r3, #4
 8009ff6:	e04f      	b.n	800a098 <HAL_I2C_Init+0x1dc>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	689b      	ldr	r3, [r3, #8]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d111      	bne.n	800a024 <HAL_I2C_Init+0x168>
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	1e58      	subs	r0, r3, #1
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	6859      	ldr	r1, [r3, #4]
 800a008:	460b      	mov	r3, r1
 800a00a:	005b      	lsls	r3, r3, #1
 800a00c:	440b      	add	r3, r1
 800a00e:	fbb0 f3f3 	udiv	r3, r0, r3
 800a012:	3301      	adds	r3, #1
 800a014:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a018:	2b00      	cmp	r3, #0
 800a01a:	bf0c      	ite	eq
 800a01c:	2301      	moveq	r3, #1
 800a01e:	2300      	movne	r3, #0
 800a020:	b2db      	uxtb	r3, r3
 800a022:	e012      	b.n	800a04a <HAL_I2C_Init+0x18e>
 800a024:	68fb      	ldr	r3, [r7, #12]
 800a026:	1e58      	subs	r0, r3, #1
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6859      	ldr	r1, [r3, #4]
 800a02c:	460b      	mov	r3, r1
 800a02e:	009b      	lsls	r3, r3, #2
 800a030:	440b      	add	r3, r1
 800a032:	0099      	lsls	r1, r3, #2
 800a034:	440b      	add	r3, r1
 800a036:	fbb0 f3f3 	udiv	r3, r0, r3
 800a03a:	3301      	adds	r3, #1
 800a03c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a040:	2b00      	cmp	r3, #0
 800a042:	bf0c      	ite	eq
 800a044:	2301      	moveq	r3, #1
 800a046:	2300      	movne	r3, #0
 800a048:	b2db      	uxtb	r3, r3
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d001      	beq.n	800a052 <HAL_I2C_Init+0x196>
 800a04e:	2301      	movs	r3, #1
 800a050:	e022      	b.n	800a098 <HAL_I2C_Init+0x1dc>
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	689b      	ldr	r3, [r3, #8]
 800a056:	2b00      	cmp	r3, #0
 800a058:	d10e      	bne.n	800a078 <HAL_I2C_Init+0x1bc>
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	1e58      	subs	r0, r3, #1
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	6859      	ldr	r1, [r3, #4]
 800a062:	460b      	mov	r3, r1
 800a064:	005b      	lsls	r3, r3, #1
 800a066:	440b      	add	r3, r1
 800a068:	fbb0 f3f3 	udiv	r3, r0, r3
 800a06c:	3301      	adds	r3, #1
 800a06e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a072:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a076:	e00f      	b.n	800a098 <HAL_I2C_Init+0x1dc>
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	1e58      	subs	r0, r3, #1
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6859      	ldr	r1, [r3, #4]
 800a080:	460b      	mov	r3, r1
 800a082:	009b      	lsls	r3, r3, #2
 800a084:	440b      	add	r3, r1
 800a086:	0099      	lsls	r1, r3, #2
 800a088:	440b      	add	r3, r1
 800a08a:	fbb0 f3f3 	udiv	r3, r0, r3
 800a08e:	3301      	adds	r3, #1
 800a090:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a094:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a098:	6879      	ldr	r1, [r7, #4]
 800a09a:	6809      	ldr	r1, [r1, #0]
 800a09c:	4313      	orrs	r3, r2
 800a09e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	69da      	ldr	r2, [r3, #28]
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	6a1b      	ldr	r3, [r3, #32]
 800a0b2:	431a      	orrs	r2, r3
 800a0b4:	687b      	ldr	r3, [r7, #4]
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	430a      	orrs	r2, r1
 800a0ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	689b      	ldr	r3, [r3, #8]
 800a0c2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800a0c6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800a0ca:	687a      	ldr	r2, [r7, #4]
 800a0cc:	6911      	ldr	r1, [r2, #16]
 800a0ce:	687a      	ldr	r2, [r7, #4]
 800a0d0:	68d2      	ldr	r2, [r2, #12]
 800a0d2:	4311      	orrs	r1, r2
 800a0d4:	687a      	ldr	r2, [r7, #4]
 800a0d6:	6812      	ldr	r2, [r2, #0]
 800a0d8:	430b      	orrs	r3, r1
 800a0da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	68db      	ldr	r3, [r3, #12]
 800a0e2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	695a      	ldr	r2, [r3, #20]
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	699b      	ldr	r3, [r3, #24]
 800a0ee:	431a      	orrs	r2, r3
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	430a      	orrs	r2, r1
 800a0f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	681a      	ldr	r2, [r3, #0]
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	f042 0201 	orr.w	r2, r2, #1
 800a106:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2200      	movs	r2, #0
 800a10c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	2220      	movs	r2, #32
 800a112:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	2200      	movs	r2, #0
 800a11a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a11c:	687b      	ldr	r3, [r7, #4]
 800a11e:	2200      	movs	r2, #0
 800a120:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800a124:	2300      	movs	r3, #0
}
 800a126:	4618      	mov	r0, r3
 800a128:	3710      	adds	r7, #16
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}
 800a12e:	bf00      	nop
 800a130:	000186a0 	.word	0x000186a0
 800a134:	001e847f 	.word	0x001e847f
 800a138:	003d08ff 	.word	0x003d08ff
 800a13c:	431bde83 	.word	0x431bde83
 800a140:	10624dd3 	.word	0x10624dd3

0800a144 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b082      	sub	sp, #8
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d101      	bne.n	800a156 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800a152:	2301      	movs	r3, #1
 800a154:	e021      	b.n	800a19a <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	2224      	movs	r2, #36	@ 0x24
 800a15a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	681a      	ldr	r2, [r3, #0]
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f022 0201 	bic.w	r2, r2, #1
 800a16c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f7fe feec 	bl	8008f4c <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	2200      	movs	r2, #0
 800a178:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2200      	movs	r2, #0
 800a17e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	2200      	movs	r2, #0
 800a186:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2200      	movs	r2, #0
 800a18c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	2200      	movs	r2, #0
 800a194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800a198:	2300      	movs	r3, #0
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	3708      	adds	r7, #8
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}
	...

0800a1a4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b088      	sub	sp, #32
 800a1a8:	af02      	add	r7, sp, #8
 800a1aa:	60f8      	str	r0, [r7, #12]
 800a1ac:	607a      	str	r2, [r7, #4]
 800a1ae:	461a      	mov	r2, r3
 800a1b0:	460b      	mov	r3, r1
 800a1b2:	817b      	strh	r3, [r7, #10]
 800a1b4:	4613      	mov	r3, r2
 800a1b6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a1b8:	f7ff f85e 	bl	8009278 <HAL_GetTick>
 800a1bc:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a1c4:	b2db      	uxtb	r3, r3
 800a1c6:	2b20      	cmp	r3, #32
 800a1c8:	f040 80e0 	bne.w	800a38c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a1cc:	697b      	ldr	r3, [r7, #20]
 800a1ce:	9300      	str	r3, [sp, #0]
 800a1d0:	2319      	movs	r3, #25
 800a1d2:	2201      	movs	r2, #1
 800a1d4:	4970      	ldr	r1, [pc, #448]	@ (800a398 <HAL_I2C_Master_Transmit+0x1f4>)
 800a1d6:	68f8      	ldr	r0, [r7, #12]
 800a1d8:	f000 fe5c 	bl	800ae94 <I2C_WaitOnFlagUntilTimeout>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	2b00      	cmp	r3, #0
 800a1e0:	d001      	beq.n	800a1e6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800a1e2:	2302      	movs	r3, #2
 800a1e4:	e0d3      	b.n	800a38e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a1ec:	2b01      	cmp	r3, #1
 800a1ee:	d101      	bne.n	800a1f4 <HAL_I2C_Master_Transmit+0x50>
 800a1f0:	2302      	movs	r3, #2
 800a1f2:	e0cc      	b.n	800a38e <HAL_I2C_Master_Transmit+0x1ea>
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	2201      	movs	r2, #1
 800a1f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f003 0301 	and.w	r3, r3, #1
 800a206:	2b01      	cmp	r3, #1
 800a208:	d007      	beq.n	800a21a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	681a      	ldr	r2, [r3, #0]
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	f042 0201 	orr.w	r2, r2, #1
 800a218:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	681b      	ldr	r3, [r3, #0]
 800a21e:	681a      	ldr	r2, [r3, #0]
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a228:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	2221      	movs	r2, #33	@ 0x21
 800a22e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	2210      	movs	r2, #16
 800a236:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	2200      	movs	r2, #0
 800a23e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	687a      	ldr	r2, [r7, #4]
 800a244:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	893a      	ldrh	r2, [r7, #8]
 800a24a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a250:	b29a      	uxth	r2, r3
 800a252:	68fb      	ldr	r3, [r7, #12]
 800a254:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	4a50      	ldr	r2, [pc, #320]	@ (800a39c <HAL_I2C_Master_Transmit+0x1f8>)
 800a25a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a25c:	8979      	ldrh	r1, [r7, #10]
 800a25e:	697b      	ldr	r3, [r7, #20]
 800a260:	6a3a      	ldr	r2, [r7, #32]
 800a262:	68f8      	ldr	r0, [r7, #12]
 800a264:	f000 fc16 	bl	800aa94 <I2C_MasterRequestWrite>
 800a268:	4603      	mov	r3, r0
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d001      	beq.n	800a272 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800a26e:	2301      	movs	r3, #1
 800a270:	e08d      	b.n	800a38e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a272:	2300      	movs	r3, #0
 800a274:	613b      	str	r3, [r7, #16]
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	695b      	ldr	r3, [r3, #20]
 800a27c:	613b      	str	r3, [r7, #16]
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	699b      	ldr	r3, [r3, #24]
 800a284:	613b      	str	r3, [r7, #16]
 800a286:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800a288:	e066      	b.n	800a358 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a28a:	697a      	ldr	r2, [r7, #20]
 800a28c:	6a39      	ldr	r1, [r7, #32]
 800a28e:	68f8      	ldr	r0, [r7, #12]
 800a290:	f000 ff1a 	bl	800b0c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a294:	4603      	mov	r3, r0
 800a296:	2b00      	cmp	r3, #0
 800a298:	d00d      	beq.n	800a2b6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a29e:	2b04      	cmp	r3, #4
 800a2a0:	d107      	bne.n	800a2b2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	681a      	ldr	r2, [r3, #0]
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a2b0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	e06b      	b.n	800a38e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2ba:	781a      	ldrb	r2, [r3, #0]
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a2c6:	1c5a      	adds	r2, r3, #1
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a2d0:	b29b      	uxth	r3, r3
 800a2d2:	3b01      	subs	r3, #1
 800a2d4:	b29a      	uxth	r2, r3
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a2de:	3b01      	subs	r3, #1
 800a2e0:	b29a      	uxth	r2, r3
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	695b      	ldr	r3, [r3, #20]
 800a2ec:	f003 0304 	and.w	r3, r3, #4
 800a2f0:	2b04      	cmp	r3, #4
 800a2f2:	d11b      	bne.n	800a32c <HAL_I2C_Master_Transmit+0x188>
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d017      	beq.n	800a32c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a300:	781a      	ldrb	r2, [r3, #0]
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a30c:	1c5a      	adds	r2, r3, #1
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a316:	b29b      	uxth	r3, r3
 800a318:	3b01      	subs	r3, #1
 800a31a:	b29a      	uxth	r2, r3
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a324:	3b01      	subs	r3, #1
 800a326:	b29a      	uxth	r2, r3
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a32c:	697a      	ldr	r2, [r7, #20]
 800a32e:	6a39      	ldr	r1, [r7, #32]
 800a330:	68f8      	ldr	r0, [r7, #12]
 800a332:	f000 ff11 	bl	800b158 <I2C_WaitOnBTFFlagUntilTimeout>
 800a336:	4603      	mov	r3, r0
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d00d      	beq.n	800a358 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a340:	2b04      	cmp	r3, #4
 800a342:	d107      	bne.n	800a354 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	681a      	ldr	r2, [r3, #0]
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a352:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a354:	2301      	movs	r3, #1
 800a356:	e01a      	b.n	800a38e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d194      	bne.n	800a28a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	681a      	ldr	r2, [r3, #0]
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a36e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	2220      	movs	r2, #32
 800a374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	2200      	movs	r2, #0
 800a37c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	2200      	movs	r2, #0
 800a384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800a388:	2300      	movs	r3, #0
 800a38a:	e000      	b.n	800a38e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a38c:	2302      	movs	r3, #2
  }
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3718      	adds	r7, #24
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}
 800a396:	bf00      	nop
 800a398:	00100002 	.word	0x00100002
 800a39c:	ffff0000 	.word	0xffff0000

0800a3a0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b088      	sub	sp, #32
 800a3a4:	af02      	add	r7, sp, #8
 800a3a6:	60f8      	str	r0, [r7, #12]
 800a3a8:	4608      	mov	r0, r1
 800a3aa:	4611      	mov	r1, r2
 800a3ac:	461a      	mov	r2, r3
 800a3ae:	4603      	mov	r3, r0
 800a3b0:	817b      	strh	r3, [r7, #10]
 800a3b2:	460b      	mov	r3, r1
 800a3b4:	813b      	strh	r3, [r7, #8]
 800a3b6:	4613      	mov	r3, r2
 800a3b8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a3ba:	f7fe ff5d 	bl	8009278 <HAL_GetTick>
 800a3be:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a3c6:	b2db      	uxtb	r3, r3
 800a3c8:	2b20      	cmp	r3, #32
 800a3ca:	f040 80d9 	bne.w	800a580 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a3ce:	697b      	ldr	r3, [r7, #20]
 800a3d0:	9300      	str	r3, [sp, #0]
 800a3d2:	2319      	movs	r3, #25
 800a3d4:	2201      	movs	r2, #1
 800a3d6:	496d      	ldr	r1, [pc, #436]	@ (800a58c <HAL_I2C_Mem_Write+0x1ec>)
 800a3d8:	68f8      	ldr	r0, [r7, #12]
 800a3da:	f000 fd5b 	bl	800ae94 <I2C_WaitOnFlagUntilTimeout>
 800a3de:	4603      	mov	r3, r0
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d001      	beq.n	800a3e8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800a3e4:	2302      	movs	r3, #2
 800a3e6:	e0cc      	b.n	800a582 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a3ee:	2b01      	cmp	r3, #1
 800a3f0:	d101      	bne.n	800a3f6 <HAL_I2C_Mem_Write+0x56>
 800a3f2:	2302      	movs	r3, #2
 800a3f4:	e0c5      	b.n	800a582 <HAL_I2C_Mem_Write+0x1e2>
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	2201      	movs	r2, #1
 800a3fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f003 0301 	and.w	r3, r3, #1
 800a408:	2b01      	cmp	r3, #1
 800a40a:	d007      	beq.n	800a41c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	681a      	ldr	r2, [r3, #0]
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	f042 0201 	orr.w	r2, r2, #1
 800a41a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	681a      	ldr	r2, [r3, #0]
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a42a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	2221      	movs	r2, #33	@ 0x21
 800a430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	2240      	movs	r2, #64	@ 0x40
 800a438:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	2200      	movs	r2, #0
 800a440:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	6a3a      	ldr	r2, [r7, #32]
 800a446:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800a44c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a452:	b29a      	uxth	r2, r3
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	4a4d      	ldr	r2, [pc, #308]	@ (800a590 <HAL_I2C_Mem_Write+0x1f0>)
 800a45c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a45e:	88f8      	ldrh	r0, [r7, #6]
 800a460:	893a      	ldrh	r2, [r7, #8]
 800a462:	8979      	ldrh	r1, [r7, #10]
 800a464:	697b      	ldr	r3, [r7, #20]
 800a466:	9301      	str	r3, [sp, #4]
 800a468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a46a:	9300      	str	r3, [sp, #0]
 800a46c:	4603      	mov	r3, r0
 800a46e:	68f8      	ldr	r0, [r7, #12]
 800a470:	f000 fb92 	bl	800ab98 <I2C_RequestMemoryWrite>
 800a474:	4603      	mov	r3, r0
 800a476:	2b00      	cmp	r3, #0
 800a478:	d052      	beq.n	800a520 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800a47a:	2301      	movs	r3, #1
 800a47c:	e081      	b.n	800a582 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a47e:	697a      	ldr	r2, [r7, #20]
 800a480:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a482:	68f8      	ldr	r0, [r7, #12]
 800a484:	f000 fe20 	bl	800b0c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800a488:	4603      	mov	r3, r0
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d00d      	beq.n	800a4aa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a492:	2b04      	cmp	r3, #4
 800a494:	d107      	bne.n	800a4a6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	681a      	ldr	r2, [r3, #0]
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a4a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	e06b      	b.n	800a582 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4ae:	781a      	ldrb	r2, [r3, #0]
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4ba:	1c5a      	adds	r2, r3, #1
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a4c4:	3b01      	subs	r3, #1
 800a4c6:	b29a      	uxth	r2, r3
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a4d0:	b29b      	uxth	r3, r3
 800a4d2:	3b01      	subs	r3, #1
 800a4d4:	b29a      	uxth	r2, r3
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	695b      	ldr	r3, [r3, #20]
 800a4e0:	f003 0304 	and.w	r3, r3, #4
 800a4e4:	2b04      	cmp	r3, #4
 800a4e6:	d11b      	bne.n	800a520 <HAL_I2C_Mem_Write+0x180>
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d017      	beq.n	800a520 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a4f4:	781a      	ldrb	r2, [r3, #0]
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a500:	1c5a      	adds	r2, r3, #1
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a50a:	3b01      	subs	r3, #1
 800a50c:	b29a      	uxth	r2, r3
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a516:	b29b      	uxth	r3, r3
 800a518:	3b01      	subs	r3, #1
 800a51a:	b29a      	uxth	r2, r3
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a524:	2b00      	cmp	r3, #0
 800a526:	d1aa      	bne.n	800a47e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a528:	697a      	ldr	r2, [r7, #20]
 800a52a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a52c:	68f8      	ldr	r0, [r7, #12]
 800a52e:	f000 fe13 	bl	800b158 <I2C_WaitOnBTFFlagUntilTimeout>
 800a532:	4603      	mov	r3, r0
 800a534:	2b00      	cmp	r3, #0
 800a536:	d00d      	beq.n	800a554 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a53c:	2b04      	cmp	r3, #4
 800a53e:	d107      	bne.n	800a550 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	681a      	ldr	r2, [r3, #0]
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a54e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a550:	2301      	movs	r3, #1
 800a552:	e016      	b.n	800a582 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	681a      	ldr	r2, [r3, #0]
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a562:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	2220      	movs	r2, #32
 800a568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	2200      	movs	r2, #0
 800a570:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	2200      	movs	r2, #0
 800a578:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800a57c:	2300      	movs	r3, #0
 800a57e:	e000      	b.n	800a582 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800a580:	2302      	movs	r3, #2
  }
}
 800a582:	4618      	mov	r0, r3
 800a584:	3718      	adds	r7, #24
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}
 800a58a:	bf00      	nop
 800a58c:	00100002 	.word	0x00100002
 800a590:	ffff0000 	.word	0xffff0000

0800a594 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b08c      	sub	sp, #48	@ 0x30
 800a598:	af02      	add	r7, sp, #8
 800a59a:	60f8      	str	r0, [r7, #12]
 800a59c:	4608      	mov	r0, r1
 800a59e:	4611      	mov	r1, r2
 800a5a0:	461a      	mov	r2, r3
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	817b      	strh	r3, [r7, #10]
 800a5a6:	460b      	mov	r3, r1
 800a5a8:	813b      	strh	r3, [r7, #8]
 800a5aa:	4613      	mov	r3, r2
 800a5ac:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800a5ae:	2300      	movs	r3, #0
 800a5b0:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a5b2:	f7fe fe61 	bl	8009278 <HAL_GetTick>
 800a5b6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800a5be:	b2db      	uxtb	r3, r3
 800a5c0:	2b20      	cmp	r3, #32
 800a5c2:	f040 8244 	bne.w	800aa4e <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a5c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a5c8:	9300      	str	r3, [sp, #0]
 800a5ca:	2319      	movs	r3, #25
 800a5cc:	2201      	movs	r2, #1
 800a5ce:	4982      	ldr	r1, [pc, #520]	@ (800a7d8 <HAL_I2C_Mem_Read+0x244>)
 800a5d0:	68f8      	ldr	r0, [r7, #12]
 800a5d2:	f000 fc5f 	bl	800ae94 <I2C_WaitOnFlagUntilTimeout>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d001      	beq.n	800a5e0 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800a5dc:	2302      	movs	r3, #2
 800a5de:	e237      	b.n	800aa50 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800a5e6:	2b01      	cmp	r3, #1
 800a5e8:	d101      	bne.n	800a5ee <HAL_I2C_Mem_Read+0x5a>
 800a5ea:	2302      	movs	r3, #2
 800a5ec:	e230      	b.n	800aa50 <HAL_I2C_Mem_Read+0x4bc>
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	2201      	movs	r2, #1
 800a5f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f003 0301 	and.w	r3, r3, #1
 800a600:	2b01      	cmp	r3, #1
 800a602:	d007      	beq.n	800a614 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a604:	68fb      	ldr	r3, [r7, #12]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	681a      	ldr	r2, [r3, #0]
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f042 0201 	orr.w	r2, r2, #1
 800a612:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	681a      	ldr	r2, [r3, #0]
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800a622:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	2222      	movs	r2, #34	@ 0x22
 800a628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	2240      	movs	r2, #64	@ 0x40
 800a630:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	2200      	movs	r2, #0
 800a638:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a63e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800a644:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a64a:	b29a      	uxth	r2, r3
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	4a62      	ldr	r2, [pc, #392]	@ (800a7dc <HAL_I2C_Mem_Read+0x248>)
 800a654:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a656:	88f8      	ldrh	r0, [r7, #6]
 800a658:	893a      	ldrh	r2, [r7, #8]
 800a65a:	8979      	ldrh	r1, [r7, #10]
 800a65c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a65e:	9301      	str	r3, [sp, #4]
 800a660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a662:	9300      	str	r3, [sp, #0]
 800a664:	4603      	mov	r3, r0
 800a666:	68f8      	ldr	r0, [r7, #12]
 800a668:	f000 fb2c 	bl	800acc4 <I2C_RequestMemoryRead>
 800a66c:	4603      	mov	r3, r0
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d001      	beq.n	800a676 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800a672:	2301      	movs	r3, #1
 800a674:	e1ec      	b.n	800aa50 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d113      	bne.n	800a6a6 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a67e:	2300      	movs	r3, #0
 800a680:	61fb      	str	r3, [r7, #28]
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	695b      	ldr	r3, [r3, #20]
 800a688:	61fb      	str	r3, [r7, #28]
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	699b      	ldr	r3, [r3, #24]
 800a690:	61fb      	str	r3, [r7, #28]
 800a692:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	681a      	ldr	r2, [r3, #0]
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a6a2:	601a      	str	r2, [r3, #0]
 800a6a4:	e1c0      	b.n	800aa28 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a6aa:	2b01      	cmp	r3, #1
 800a6ac:	d11e      	bne.n	800a6ec <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	681a      	ldr	r2, [r3, #0]
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a6bc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a6be:	b672      	cpsid	i
}
 800a6c0:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a6c2:	2300      	movs	r3, #0
 800a6c4:	61bb      	str	r3, [r7, #24]
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	695b      	ldr	r3, [r3, #20]
 800a6cc:	61bb      	str	r3, [r7, #24]
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	699b      	ldr	r3, [r3, #24]
 800a6d4:	61bb      	str	r3, [r7, #24]
 800a6d6:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	681a      	ldr	r2, [r3, #0]
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	681b      	ldr	r3, [r3, #0]
 800a6e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a6e6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a6e8:	b662      	cpsie	i
}
 800a6ea:	e035      	b.n	800a758 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a6f0:	2b02      	cmp	r3, #2
 800a6f2:	d11e      	bne.n	800a732 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	681a      	ldr	r2, [r3, #0]
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a702:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a704:	b672      	cpsid	i
}
 800a706:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a708:	2300      	movs	r3, #0
 800a70a:	617b      	str	r3, [r7, #20]
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	695b      	ldr	r3, [r3, #20]
 800a712:	617b      	str	r3, [r7, #20]
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	699b      	ldr	r3, [r3, #24]
 800a71a:	617b      	str	r3, [r7, #20]
 800a71c:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	681a      	ldr	r2, [r3, #0]
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a72c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a72e:	b662      	cpsie	i
}
 800a730:	e012      	b.n	800a758 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	681a      	ldr	r2, [r3, #0]
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800a740:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a742:	2300      	movs	r3, #0
 800a744:	613b      	str	r3, [r7, #16]
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	695b      	ldr	r3, [r3, #20]
 800a74c:	613b      	str	r3, [r7, #16]
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	699b      	ldr	r3, [r3, #24]
 800a754:	613b      	str	r3, [r7, #16]
 800a756:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800a758:	e166      	b.n	800aa28 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a75e:	2b03      	cmp	r3, #3
 800a760:	f200 811f 	bhi.w	800a9a2 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a768:	2b01      	cmp	r3, #1
 800a76a:	d123      	bne.n	800a7b4 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a76c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a76e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a770:	68f8      	ldr	r0, [r7, #12]
 800a772:	f000 fd39 	bl	800b1e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a776:	4603      	mov	r3, r0
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d001      	beq.n	800a780 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800a77c:	2301      	movs	r3, #1
 800a77e:	e167      	b.n	800aa50 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	691a      	ldr	r2, [r3, #16]
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a78a:	b2d2      	uxtb	r2, r2
 800a78c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a792:	1c5a      	adds	r2, r3, #1
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a79c:	3b01      	subs	r3, #1
 800a79e:	b29a      	uxth	r2, r3
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a7a8:	b29b      	uxth	r3, r3
 800a7aa:	3b01      	subs	r3, #1
 800a7ac:	b29a      	uxth	r2, r3
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a7b2:	e139      	b.n	800aa28 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a7b8:	2b02      	cmp	r3, #2
 800a7ba:	d152      	bne.n	800a862 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a7bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a7be:	9300      	str	r3, [sp, #0]
 800a7c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	4906      	ldr	r1, [pc, #24]	@ (800a7e0 <HAL_I2C_Mem_Read+0x24c>)
 800a7c6:	68f8      	ldr	r0, [r7, #12]
 800a7c8:	f000 fb64 	bl	800ae94 <I2C_WaitOnFlagUntilTimeout>
 800a7cc:	4603      	mov	r3, r0
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d008      	beq.n	800a7e4 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	e13c      	b.n	800aa50 <HAL_I2C_Mem_Read+0x4bc>
 800a7d6:	bf00      	nop
 800a7d8:	00100002 	.word	0x00100002
 800a7dc:	ffff0000 	.word	0xffff0000
 800a7e0:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800a7e4:	b672      	cpsid	i
}
 800a7e6:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	681a      	ldr	r2, [r3, #0]
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a7f6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	691a      	ldr	r2, [r3, #16]
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a802:	b2d2      	uxtb	r2, r2
 800a804:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a80a:	1c5a      	adds	r2, r3, #1
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a814:	3b01      	subs	r3, #1
 800a816:	b29a      	uxth	r2, r3
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a820:	b29b      	uxth	r3, r3
 800a822:	3b01      	subs	r3, #1
 800a824:	b29a      	uxth	r2, r3
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a82a:	b662      	cpsie	i
}
 800a82c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	691a      	ldr	r2, [r3, #16]
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a838:	b2d2      	uxtb	r2, r2
 800a83a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a840:	1c5a      	adds	r2, r3, #1
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a84a:	3b01      	subs	r3, #1
 800a84c:	b29a      	uxth	r2, r3
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a856:	b29b      	uxth	r3, r3
 800a858:	3b01      	subs	r3, #1
 800a85a:	b29a      	uxth	r2, r3
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a860:	e0e2      	b.n	800aa28 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a864:	9300      	str	r3, [sp, #0]
 800a866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a868:	2200      	movs	r2, #0
 800a86a:	497b      	ldr	r1, [pc, #492]	@ (800aa58 <HAL_I2C_Mem_Read+0x4c4>)
 800a86c:	68f8      	ldr	r0, [r7, #12]
 800a86e:	f000 fb11 	bl	800ae94 <I2C_WaitOnFlagUntilTimeout>
 800a872:	4603      	mov	r3, r0
 800a874:	2b00      	cmp	r3, #0
 800a876:	d001      	beq.n	800a87c <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800a878:	2301      	movs	r3, #1
 800a87a:	e0e9      	b.n	800aa50 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	681a      	ldr	r2, [r3, #0]
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800a88a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a88c:	b672      	cpsid	i
}
 800a88e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	691a      	ldr	r2, [r3, #16]
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a89a:	b2d2      	uxtb	r2, r2
 800a89c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a8a2:	1c5a      	adds	r2, r3, #1
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a8ac:	3b01      	subs	r3, #1
 800a8ae:	b29a      	uxth	r2, r3
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a8b8:	b29b      	uxth	r3, r3
 800a8ba:	3b01      	subs	r3, #1
 800a8bc:	b29a      	uxth	r2, r3
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800a8c2:	4b66      	ldr	r3, [pc, #408]	@ (800aa5c <HAL_I2C_Mem_Read+0x4c8>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	08db      	lsrs	r3, r3, #3
 800a8c8:	4a65      	ldr	r2, [pc, #404]	@ (800aa60 <HAL_I2C_Mem_Read+0x4cc>)
 800a8ca:	fba2 2303 	umull	r2, r3, r2, r3
 800a8ce:	0a1a      	lsrs	r2, r3, #8
 800a8d0:	4613      	mov	r3, r2
 800a8d2:	009b      	lsls	r3, r3, #2
 800a8d4:	4413      	add	r3, r2
 800a8d6:	00da      	lsls	r2, r3, #3
 800a8d8:	1ad3      	subs	r3, r2, r3
 800a8da:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800a8dc:	6a3b      	ldr	r3, [r7, #32]
 800a8de:	3b01      	subs	r3, #1
 800a8e0:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800a8e2:	6a3b      	ldr	r3, [r7, #32]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d118      	bne.n	800a91a <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	2220      	movs	r2, #32
 800a8f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	2200      	movs	r2, #0
 800a8fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a902:	f043 0220 	orr.w	r2, r3, #32
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800a90a:	b662      	cpsie	i
}
 800a90c:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	2200      	movs	r2, #0
 800a912:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 800a916:	2301      	movs	r3, #1
 800a918:	e09a      	b.n	800aa50 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	695b      	ldr	r3, [r3, #20]
 800a920:	f003 0304 	and.w	r3, r3, #4
 800a924:	2b04      	cmp	r3, #4
 800a926:	d1d9      	bne.n	800a8dc <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	681a      	ldr	r2, [r3, #0]
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a936:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	691a      	ldr	r2, [r3, #16]
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a942:	b2d2      	uxtb	r2, r2
 800a944:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a94a:	1c5a      	adds	r2, r3, #1
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a954:	3b01      	subs	r3, #1
 800a956:	b29a      	uxth	r2, r3
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a960:	b29b      	uxth	r3, r3
 800a962:	3b01      	subs	r3, #1
 800a964:	b29a      	uxth	r2, r3
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a96a:	b662      	cpsie	i
}
 800a96c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	691a      	ldr	r2, [r3, #16]
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a978:	b2d2      	uxtb	r2, r2
 800a97a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a980:	1c5a      	adds	r2, r3, #1
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a98a:	3b01      	subs	r3, #1
 800a98c:	b29a      	uxth	r2, r3
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a996:	b29b      	uxth	r3, r3
 800a998:	3b01      	subs	r3, #1
 800a99a:	b29a      	uxth	r2, r3
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a9a0:	e042      	b.n	800aa28 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a9a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a9a4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800a9a6:	68f8      	ldr	r0, [r7, #12]
 800a9a8:	f000 fc1e 	bl	800b1e8 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a9ac:	4603      	mov	r3, r0
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d001      	beq.n	800a9b6 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800a9b2:	2301      	movs	r3, #1
 800a9b4:	e04c      	b.n	800aa50 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	691a      	ldr	r2, [r3, #16]
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9c0:	b2d2      	uxtb	r2, r2
 800a9c2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9c8:	1c5a      	adds	r2, r3, #1
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a9d2:	3b01      	subs	r3, #1
 800a9d4:	b29a      	uxth	r2, r3
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a9de:	b29b      	uxth	r3, r3
 800a9e0:	3b01      	subs	r3, #1
 800a9e2:	b29a      	uxth	r2, r3
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	695b      	ldr	r3, [r3, #20]
 800a9ee:	f003 0304 	and.w	r3, r3, #4
 800a9f2:	2b04      	cmp	r3, #4
 800a9f4:	d118      	bne.n	800aa28 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	691a      	ldr	r2, [r3, #16]
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa00:	b2d2      	uxtb	r2, r2
 800aa02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aa08:	1c5a      	adds	r2, r3, #1
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa12:	3b01      	subs	r3, #1
 800aa14:	b29a      	uxth	r2, r3
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aa1e:	b29b      	uxth	r3, r3
 800aa20:	3b01      	subs	r3, #1
 800aa22:	b29a      	uxth	r2, r3
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	f47f ae94 	bne.w	800a75a <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	2220      	movs	r2, #32
 800aa36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	2200      	movs	r2, #0
 800aa3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	2200      	movs	r2, #0
 800aa46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	e000      	b.n	800aa50 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800aa4e:	2302      	movs	r3, #2
  }
}
 800aa50:	4618      	mov	r0, r3
 800aa52:	3728      	adds	r7, #40	@ 0x28
 800aa54:	46bd      	mov	sp, r7
 800aa56:	bd80      	pop	{r7, pc}
 800aa58:	00010004 	.word	0x00010004
 800aa5c:	20000f50 	.word	0x20000f50
 800aa60:	14f8b589 	.word	0x14f8b589

0800aa64 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800aa64:	b480      	push	{r7}
 800aa66:	b083      	sub	sp, #12
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800aa72:	b2db      	uxtb	r3, r3
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	370c      	adds	r7, #12
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bc80      	pop	{r7}
 800aa7c:	4770      	bx	lr

0800aa7e <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800aa7e:	b480      	push	{r7}
 800aa80:	b083      	sub	sp, #12
 800aa82:	af00      	add	r7, sp, #0
 800aa84:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	370c      	adds	r7, #12
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	bc80      	pop	{r7}
 800aa92:	4770      	bx	lr

0800aa94 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800aa94:	b580      	push	{r7, lr}
 800aa96:	b088      	sub	sp, #32
 800aa98:	af02      	add	r7, sp, #8
 800aa9a:	60f8      	str	r0, [r7, #12]
 800aa9c:	607a      	str	r2, [r7, #4]
 800aa9e:	603b      	str	r3, [r7, #0]
 800aaa0:	460b      	mov	r3, r1
 800aaa2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaa8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800aaaa:	697b      	ldr	r3, [r7, #20]
 800aaac:	2b08      	cmp	r3, #8
 800aaae:	d006      	beq.n	800aabe <I2C_MasterRequestWrite+0x2a>
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	2b01      	cmp	r3, #1
 800aab4:	d003      	beq.n	800aabe <I2C_MasterRequestWrite+0x2a>
 800aab6:	697b      	ldr	r3, [r7, #20]
 800aab8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800aabc:	d108      	bne.n	800aad0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	681a      	ldr	r2, [r3, #0]
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800aacc:	601a      	str	r2, [r3, #0]
 800aace:	e00b      	b.n	800aae8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aad4:	2b12      	cmp	r3, #18
 800aad6:	d107      	bne.n	800aae8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	681a      	ldr	r2, [r3, #0]
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800aae6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800aae8:	683b      	ldr	r3, [r7, #0]
 800aaea:	9300      	str	r3, [sp, #0]
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	2200      	movs	r2, #0
 800aaf0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800aaf4:	68f8      	ldr	r0, [r7, #12]
 800aaf6:	f000 f9cd 	bl	800ae94 <I2C_WaitOnFlagUntilTimeout>
 800aafa:	4603      	mov	r3, r0
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d00d      	beq.n	800ab1c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ab0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab0e:	d103      	bne.n	800ab18 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ab16:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800ab18:	2303      	movs	r3, #3
 800ab1a:	e035      	b.n	800ab88 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	691b      	ldr	r3, [r3, #16]
 800ab20:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ab24:	d108      	bne.n	800ab38 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ab26:	897b      	ldrh	r3, [r7, #10]
 800ab28:	b2db      	uxtb	r3, r3
 800ab2a:	461a      	mov	r2, r3
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800ab34:	611a      	str	r2, [r3, #16]
 800ab36:	e01b      	b.n	800ab70 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800ab38:	897b      	ldrh	r3, [r7, #10]
 800ab3a:	11db      	asrs	r3, r3, #7
 800ab3c:	b2db      	uxtb	r3, r3
 800ab3e:	f003 0306 	and.w	r3, r3, #6
 800ab42:	b2db      	uxtb	r3, r3
 800ab44:	f063 030f 	orn	r3, r3, #15
 800ab48:	b2da      	uxtb	r2, r3
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	681b      	ldr	r3, [r3, #0]
 800ab4e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	687a      	ldr	r2, [r7, #4]
 800ab54:	490e      	ldr	r1, [pc, #56]	@ (800ab90 <I2C_MasterRequestWrite+0xfc>)
 800ab56:	68f8      	ldr	r0, [r7, #12]
 800ab58:	f000 fa16 	bl	800af88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ab5c:	4603      	mov	r3, r0
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d001      	beq.n	800ab66 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800ab62:	2301      	movs	r3, #1
 800ab64:	e010      	b.n	800ab88 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800ab66:	897b      	ldrh	r3, [r7, #10]
 800ab68:	b2da      	uxtb	r2, r3
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	687a      	ldr	r2, [r7, #4]
 800ab74:	4907      	ldr	r1, [pc, #28]	@ (800ab94 <I2C_MasterRequestWrite+0x100>)
 800ab76:	68f8      	ldr	r0, [r7, #12]
 800ab78:	f000 fa06 	bl	800af88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d001      	beq.n	800ab86 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800ab82:	2301      	movs	r3, #1
 800ab84:	e000      	b.n	800ab88 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800ab86:	2300      	movs	r3, #0
}
 800ab88:	4618      	mov	r0, r3
 800ab8a:	3718      	adds	r7, #24
 800ab8c:	46bd      	mov	sp, r7
 800ab8e:	bd80      	pop	{r7, pc}
 800ab90:	00010008 	.word	0x00010008
 800ab94:	00010002 	.word	0x00010002

0800ab98 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800ab98:	b580      	push	{r7, lr}
 800ab9a:	b088      	sub	sp, #32
 800ab9c:	af02      	add	r7, sp, #8
 800ab9e:	60f8      	str	r0, [r7, #12]
 800aba0:	4608      	mov	r0, r1
 800aba2:	4611      	mov	r1, r2
 800aba4:	461a      	mov	r2, r3
 800aba6:	4603      	mov	r3, r0
 800aba8:	817b      	strh	r3, [r7, #10]
 800abaa:	460b      	mov	r3, r1
 800abac:	813b      	strh	r3, [r7, #8]
 800abae:	4613      	mov	r3, r2
 800abb0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	681a      	ldr	r2, [r3, #0]
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800abc0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800abc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800abc4:	9300      	str	r3, [sp, #0]
 800abc6:	6a3b      	ldr	r3, [r7, #32]
 800abc8:	2200      	movs	r2, #0
 800abca:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800abce:	68f8      	ldr	r0, [r7, #12]
 800abd0:	f000 f960 	bl	800ae94 <I2C_WaitOnFlagUntilTimeout>
 800abd4:	4603      	mov	r3, r0
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	d00d      	beq.n	800abf6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800abe4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800abe8:	d103      	bne.n	800abf2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800abf0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800abf2:	2303      	movs	r3, #3
 800abf4:	e05f      	b.n	800acb6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800abf6:	897b      	ldrh	r3, [r7, #10]
 800abf8:	b2db      	uxtb	r3, r3
 800abfa:	461a      	mov	r2, r3
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800ac04:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ac06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac08:	6a3a      	ldr	r2, [r7, #32]
 800ac0a:	492d      	ldr	r1, [pc, #180]	@ (800acc0 <I2C_RequestMemoryWrite+0x128>)
 800ac0c:	68f8      	ldr	r0, [r7, #12]
 800ac0e:	f000 f9bb 	bl	800af88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ac12:	4603      	mov	r3, r0
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d001      	beq.n	800ac1c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800ac18:	2301      	movs	r3, #1
 800ac1a:	e04c      	b.n	800acb6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	617b      	str	r3, [r7, #20]
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	695b      	ldr	r3, [r3, #20]
 800ac26:	617b      	str	r3, [r7, #20]
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	699b      	ldr	r3, [r3, #24]
 800ac2e:	617b      	str	r3, [r7, #20]
 800ac30:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ac32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac34:	6a39      	ldr	r1, [r7, #32]
 800ac36:	68f8      	ldr	r0, [r7, #12]
 800ac38:	f000 fa46 	bl	800b0c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800ac3c:	4603      	mov	r3, r0
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d00d      	beq.n	800ac5e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ac42:	68fb      	ldr	r3, [r7, #12]
 800ac44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac46:	2b04      	cmp	r3, #4
 800ac48:	d107      	bne.n	800ac5a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	681a      	ldr	r2, [r3, #0]
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ac58:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ac5a:	2301      	movs	r3, #1
 800ac5c:	e02b      	b.n	800acb6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ac5e:	88fb      	ldrh	r3, [r7, #6]
 800ac60:	2b01      	cmp	r3, #1
 800ac62:	d105      	bne.n	800ac70 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ac64:	893b      	ldrh	r3, [r7, #8]
 800ac66:	b2da      	uxtb	r2, r3
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	611a      	str	r2, [r3, #16]
 800ac6e:	e021      	b.n	800acb4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800ac70:	893b      	ldrh	r3, [r7, #8]
 800ac72:	0a1b      	lsrs	r3, r3, #8
 800ac74:	b29b      	uxth	r3, r3
 800ac76:	b2da      	uxtb	r2, r3
 800ac78:	68fb      	ldr	r3, [r7, #12]
 800ac7a:	681b      	ldr	r3, [r3, #0]
 800ac7c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ac7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ac80:	6a39      	ldr	r1, [r7, #32]
 800ac82:	68f8      	ldr	r0, [r7, #12]
 800ac84:	f000 fa20 	bl	800b0c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800ac88:	4603      	mov	r3, r0
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d00d      	beq.n	800acaa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac92:	2b04      	cmp	r3, #4
 800ac94:	d107      	bne.n	800aca6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	681a      	ldr	r2, [r3, #0]
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800aca4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800aca6:	2301      	movs	r3, #1
 800aca8:	e005      	b.n	800acb6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800acaa:	893b      	ldrh	r3, [r7, #8]
 800acac:	b2da      	uxtb	r2, r3
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800acb4:	2300      	movs	r3, #0
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	3718      	adds	r7, #24
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}
 800acbe:	bf00      	nop
 800acc0:	00010002 	.word	0x00010002

0800acc4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b088      	sub	sp, #32
 800acc8:	af02      	add	r7, sp, #8
 800acca:	60f8      	str	r0, [r7, #12]
 800accc:	4608      	mov	r0, r1
 800acce:	4611      	mov	r1, r2
 800acd0:	461a      	mov	r2, r3
 800acd2:	4603      	mov	r3, r0
 800acd4:	817b      	strh	r3, [r7, #10]
 800acd6:	460b      	mov	r3, r1
 800acd8:	813b      	strh	r3, [r7, #8]
 800acda:	4613      	mov	r3, r2
 800acdc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	681a      	ldr	r2, [r3, #0]
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800acec:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800acee:	68fb      	ldr	r3, [r7, #12]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	681a      	ldr	r2, [r3, #0]
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800acfc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800acfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad00:	9300      	str	r3, [sp, #0]
 800ad02:	6a3b      	ldr	r3, [r7, #32]
 800ad04:	2200      	movs	r2, #0
 800ad06:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800ad0a:	68f8      	ldr	r0, [r7, #12]
 800ad0c:	f000 f8c2 	bl	800ae94 <I2C_WaitOnFlagUntilTimeout>
 800ad10:	4603      	mov	r3, r0
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d00d      	beq.n	800ad32 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	681b      	ldr	r3, [r3, #0]
 800ad1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ad20:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad24:	d103      	bne.n	800ad2e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ad2c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800ad2e:	2303      	movs	r3, #3
 800ad30:	e0aa      	b.n	800ae88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ad32:	897b      	ldrh	r3, [r7, #10]
 800ad34:	b2db      	uxtb	r3, r3
 800ad36:	461a      	mov	r2, r3
 800ad38:	68fb      	ldr	r3, [r7, #12]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800ad40:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ad42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad44:	6a3a      	ldr	r2, [r7, #32]
 800ad46:	4952      	ldr	r1, [pc, #328]	@ (800ae90 <I2C_RequestMemoryRead+0x1cc>)
 800ad48:	68f8      	ldr	r0, [r7, #12]
 800ad4a:	f000 f91d 	bl	800af88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ad4e:	4603      	mov	r3, r0
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	d001      	beq.n	800ad58 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800ad54:	2301      	movs	r3, #1
 800ad56:	e097      	b.n	800ae88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ad58:	2300      	movs	r3, #0
 800ad5a:	617b      	str	r3, [r7, #20]
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	695b      	ldr	r3, [r3, #20]
 800ad62:	617b      	str	r3, [r7, #20]
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	699b      	ldr	r3, [r3, #24]
 800ad6a:	617b      	str	r3, [r7, #20]
 800ad6c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ad6e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ad70:	6a39      	ldr	r1, [r7, #32]
 800ad72:	68f8      	ldr	r0, [r7, #12]
 800ad74:	f000 f9a8 	bl	800b0c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800ad78:	4603      	mov	r3, r0
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d00d      	beq.n	800ad9a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ad82:	2b04      	cmp	r3, #4
 800ad84:	d107      	bne.n	800ad96 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	681a      	ldr	r2, [r3, #0]
 800ad8c:	68fb      	ldr	r3, [r7, #12]
 800ad8e:	681b      	ldr	r3, [r3, #0]
 800ad90:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ad94:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ad96:	2301      	movs	r3, #1
 800ad98:	e076      	b.n	800ae88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ad9a:	88fb      	ldrh	r3, [r7, #6]
 800ad9c:	2b01      	cmp	r3, #1
 800ad9e:	d105      	bne.n	800adac <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ada0:	893b      	ldrh	r3, [r7, #8]
 800ada2:	b2da      	uxtb	r2, r3
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	611a      	str	r2, [r3, #16]
 800adaa:	e021      	b.n	800adf0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800adac:	893b      	ldrh	r3, [r7, #8]
 800adae:	0a1b      	lsrs	r3, r3, #8
 800adb0:	b29b      	uxth	r3, r3
 800adb2:	b2da      	uxtb	r2, r3
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800adba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800adbc:	6a39      	ldr	r1, [r7, #32]
 800adbe:	68f8      	ldr	r0, [r7, #12]
 800adc0:	f000 f982 	bl	800b0c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800adc4:	4603      	mov	r3, r0
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d00d      	beq.n	800ade6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800adce:	2b04      	cmp	r3, #4
 800add0:	d107      	bne.n	800ade2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	681b      	ldr	r3, [r3, #0]
 800add6:	681a      	ldr	r2, [r3, #0]
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ade0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800ade2:	2301      	movs	r3, #1
 800ade4:	e050      	b.n	800ae88 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ade6:	893b      	ldrh	r3, [r7, #8]
 800ade8:	b2da      	uxtb	r2, r3
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800adf0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800adf2:	6a39      	ldr	r1, [r7, #32]
 800adf4:	68f8      	ldr	r0, [r7, #12]
 800adf6:	f000 f967 	bl	800b0c8 <I2C_WaitOnTXEFlagUntilTimeout>
 800adfa:	4603      	mov	r3, r0
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d00d      	beq.n	800ae1c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ae04:	2b04      	cmp	r3, #4
 800ae06:	d107      	bne.n	800ae18 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ae08:	68fb      	ldr	r3, [r7, #12]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	681a      	ldr	r2, [r3, #0]
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	681b      	ldr	r3, [r3, #0]
 800ae12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800ae16:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ae18:	2301      	movs	r3, #1
 800ae1a:	e035      	b.n	800ae88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	681a      	ldr	r2, [r3, #0]
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800ae2a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ae2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae2e:	9300      	str	r3, [sp, #0]
 800ae30:	6a3b      	ldr	r3, [r7, #32]
 800ae32:	2200      	movs	r2, #0
 800ae34:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800ae38:	68f8      	ldr	r0, [r7, #12]
 800ae3a:	f000 f82b 	bl	800ae94 <I2C_WaitOnFlagUntilTimeout>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d00d      	beq.n	800ae60 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ae4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ae52:	d103      	bne.n	800ae5c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ae5a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800ae5c:	2303      	movs	r3, #3
 800ae5e:	e013      	b.n	800ae88 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800ae60:	897b      	ldrh	r3, [r7, #10]
 800ae62:	b2db      	uxtb	r3, r3
 800ae64:	f043 0301 	orr.w	r3, r3, #1
 800ae68:	b2da      	uxtb	r2, r3
 800ae6a:	68fb      	ldr	r3, [r7, #12]
 800ae6c:	681b      	ldr	r3, [r3, #0]
 800ae6e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ae70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae72:	6a3a      	ldr	r2, [r7, #32]
 800ae74:	4906      	ldr	r1, [pc, #24]	@ (800ae90 <I2C_RequestMemoryRead+0x1cc>)
 800ae76:	68f8      	ldr	r0, [r7, #12]
 800ae78:	f000 f886 	bl	800af88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d001      	beq.n	800ae86 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800ae82:	2301      	movs	r3, #1
 800ae84:	e000      	b.n	800ae88 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800ae86:	2300      	movs	r3, #0
}
 800ae88:	4618      	mov	r0, r3
 800ae8a:	3718      	adds	r7, #24
 800ae8c:	46bd      	mov	sp, r7
 800ae8e:	bd80      	pop	{r7, pc}
 800ae90:	00010002 	.word	0x00010002

0800ae94 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800ae94:	b580      	push	{r7, lr}
 800ae96:	b084      	sub	sp, #16
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	60f8      	str	r0, [r7, #12]
 800ae9c:	60b9      	str	r1, [r7, #8]
 800ae9e:	603b      	str	r3, [r7, #0]
 800aea0:	4613      	mov	r3, r2
 800aea2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aea4:	e048      	b.n	800af38 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aeac:	d044      	beq.n	800af38 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aeae:	f7fe f9e3 	bl	8009278 <HAL_GetTick>
 800aeb2:	4602      	mov	r2, r0
 800aeb4:	69bb      	ldr	r3, [r7, #24]
 800aeb6:	1ad3      	subs	r3, r2, r3
 800aeb8:	683a      	ldr	r2, [r7, #0]
 800aeba:	429a      	cmp	r2, r3
 800aebc:	d302      	bcc.n	800aec4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800aebe:	683b      	ldr	r3, [r7, #0]
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d139      	bne.n	800af38 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800aec4:	68bb      	ldr	r3, [r7, #8]
 800aec6:	0c1b      	lsrs	r3, r3, #16
 800aec8:	b2db      	uxtb	r3, r3
 800aeca:	2b01      	cmp	r3, #1
 800aecc:	d10d      	bne.n	800aeea <I2C_WaitOnFlagUntilTimeout+0x56>
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	695b      	ldr	r3, [r3, #20]
 800aed4:	43da      	mvns	r2, r3
 800aed6:	68bb      	ldr	r3, [r7, #8]
 800aed8:	4013      	ands	r3, r2
 800aeda:	b29b      	uxth	r3, r3
 800aedc:	2b00      	cmp	r3, #0
 800aede:	bf0c      	ite	eq
 800aee0:	2301      	moveq	r3, #1
 800aee2:	2300      	movne	r3, #0
 800aee4:	b2db      	uxtb	r3, r3
 800aee6:	461a      	mov	r2, r3
 800aee8:	e00c      	b.n	800af04 <I2C_WaitOnFlagUntilTimeout+0x70>
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	699b      	ldr	r3, [r3, #24]
 800aef0:	43da      	mvns	r2, r3
 800aef2:	68bb      	ldr	r3, [r7, #8]
 800aef4:	4013      	ands	r3, r2
 800aef6:	b29b      	uxth	r3, r3
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	bf0c      	ite	eq
 800aefc:	2301      	moveq	r3, #1
 800aefe:	2300      	movne	r3, #0
 800af00:	b2db      	uxtb	r3, r3
 800af02:	461a      	mov	r2, r3
 800af04:	79fb      	ldrb	r3, [r7, #7]
 800af06:	429a      	cmp	r2, r3
 800af08:	d116      	bne.n	800af38 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	2200      	movs	r2, #0
 800af0e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	2220      	movs	r2, #32
 800af14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	2200      	movs	r2, #0
 800af1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800af24:	f043 0220 	orr.w	r2, r3, #32
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	2200      	movs	r2, #0
 800af30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800af34:	2301      	movs	r3, #1
 800af36:	e023      	b.n	800af80 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800af38:	68bb      	ldr	r3, [r7, #8]
 800af3a:	0c1b      	lsrs	r3, r3, #16
 800af3c:	b2db      	uxtb	r3, r3
 800af3e:	2b01      	cmp	r3, #1
 800af40:	d10d      	bne.n	800af5e <I2C_WaitOnFlagUntilTimeout+0xca>
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	695b      	ldr	r3, [r3, #20]
 800af48:	43da      	mvns	r2, r3
 800af4a:	68bb      	ldr	r3, [r7, #8]
 800af4c:	4013      	ands	r3, r2
 800af4e:	b29b      	uxth	r3, r3
 800af50:	2b00      	cmp	r3, #0
 800af52:	bf0c      	ite	eq
 800af54:	2301      	moveq	r3, #1
 800af56:	2300      	movne	r3, #0
 800af58:	b2db      	uxtb	r3, r3
 800af5a:	461a      	mov	r2, r3
 800af5c:	e00c      	b.n	800af78 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800af5e:	68fb      	ldr	r3, [r7, #12]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	699b      	ldr	r3, [r3, #24]
 800af64:	43da      	mvns	r2, r3
 800af66:	68bb      	ldr	r3, [r7, #8]
 800af68:	4013      	ands	r3, r2
 800af6a:	b29b      	uxth	r3, r3
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	bf0c      	ite	eq
 800af70:	2301      	moveq	r3, #1
 800af72:	2300      	movne	r3, #0
 800af74:	b2db      	uxtb	r3, r3
 800af76:	461a      	mov	r2, r3
 800af78:	79fb      	ldrb	r3, [r7, #7]
 800af7a:	429a      	cmp	r2, r3
 800af7c:	d093      	beq.n	800aea6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800af7e:	2300      	movs	r3, #0
}
 800af80:	4618      	mov	r0, r3
 800af82:	3710      	adds	r7, #16
 800af84:	46bd      	mov	sp, r7
 800af86:	bd80      	pop	{r7, pc}

0800af88 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b084      	sub	sp, #16
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	60f8      	str	r0, [r7, #12]
 800af90:	60b9      	str	r1, [r7, #8]
 800af92:	607a      	str	r2, [r7, #4]
 800af94:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800af96:	e071      	b.n	800b07c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	695b      	ldr	r3, [r3, #20]
 800af9e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800afa2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800afa6:	d123      	bne.n	800aff0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	681a      	ldr	r2, [r3, #0]
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800afb6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800afc0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	2200      	movs	r2, #0
 800afc6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	2220      	movs	r2, #32
 800afcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	2200      	movs	r2, #0
 800afd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afdc:	f043 0204 	orr.w	r2, r3, #4
 800afe0:	68fb      	ldr	r3, [r7, #12]
 800afe2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	2200      	movs	r2, #0
 800afe8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800afec:	2301      	movs	r3, #1
 800afee:	e067      	b.n	800b0c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800aff6:	d041      	beq.n	800b07c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aff8:	f7fe f93e 	bl	8009278 <HAL_GetTick>
 800affc:	4602      	mov	r2, r0
 800affe:	683b      	ldr	r3, [r7, #0]
 800b000:	1ad3      	subs	r3, r2, r3
 800b002:	687a      	ldr	r2, [r7, #4]
 800b004:	429a      	cmp	r2, r3
 800b006:	d302      	bcc.n	800b00e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d136      	bne.n	800b07c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	0c1b      	lsrs	r3, r3, #16
 800b012:	b2db      	uxtb	r3, r3
 800b014:	2b01      	cmp	r3, #1
 800b016:	d10c      	bne.n	800b032 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	695b      	ldr	r3, [r3, #20]
 800b01e:	43da      	mvns	r2, r3
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	4013      	ands	r3, r2
 800b024:	b29b      	uxth	r3, r3
 800b026:	2b00      	cmp	r3, #0
 800b028:	bf14      	ite	ne
 800b02a:	2301      	movne	r3, #1
 800b02c:	2300      	moveq	r3, #0
 800b02e:	b2db      	uxtb	r3, r3
 800b030:	e00b      	b.n	800b04a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	699b      	ldr	r3, [r3, #24]
 800b038:	43da      	mvns	r2, r3
 800b03a:	68bb      	ldr	r3, [r7, #8]
 800b03c:	4013      	ands	r3, r2
 800b03e:	b29b      	uxth	r3, r3
 800b040:	2b00      	cmp	r3, #0
 800b042:	bf14      	ite	ne
 800b044:	2301      	movne	r3, #1
 800b046:	2300      	moveq	r3, #0
 800b048:	b2db      	uxtb	r3, r3
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d016      	beq.n	800b07c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	2200      	movs	r2, #0
 800b052:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	2220      	movs	r2, #32
 800b058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	2200      	movs	r2, #0
 800b060:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b068:	f043 0220 	orr.w	r2, r3, #32
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	2200      	movs	r2, #0
 800b074:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b078:	2301      	movs	r3, #1
 800b07a:	e021      	b.n	800b0c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	0c1b      	lsrs	r3, r3, #16
 800b080:	b2db      	uxtb	r3, r3
 800b082:	2b01      	cmp	r3, #1
 800b084:	d10c      	bne.n	800b0a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	695b      	ldr	r3, [r3, #20]
 800b08c:	43da      	mvns	r2, r3
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	4013      	ands	r3, r2
 800b092:	b29b      	uxth	r3, r3
 800b094:	2b00      	cmp	r3, #0
 800b096:	bf14      	ite	ne
 800b098:	2301      	movne	r3, #1
 800b09a:	2300      	moveq	r3, #0
 800b09c:	b2db      	uxtb	r3, r3
 800b09e:	e00b      	b.n	800b0b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	681b      	ldr	r3, [r3, #0]
 800b0a4:	699b      	ldr	r3, [r3, #24]
 800b0a6:	43da      	mvns	r2, r3
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	4013      	ands	r3, r2
 800b0ac:	b29b      	uxth	r3, r3
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	bf14      	ite	ne
 800b0b2:	2301      	movne	r3, #1
 800b0b4:	2300      	moveq	r3, #0
 800b0b6:	b2db      	uxtb	r3, r3
 800b0b8:	2b00      	cmp	r3, #0
 800b0ba:	f47f af6d 	bne.w	800af98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800b0be:	2300      	movs	r3, #0
}
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	3710      	adds	r7, #16
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bd80      	pop	{r7, pc}

0800b0c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b084      	sub	sp, #16
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	60f8      	str	r0, [r7, #12]
 800b0d0:	60b9      	str	r1, [r7, #8]
 800b0d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b0d4:	e034      	b.n	800b140 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b0d6:	68f8      	ldr	r0, [r7, #12]
 800b0d8:	f000 f8e3 	bl	800b2a2 <I2C_IsAcknowledgeFailed>
 800b0dc:	4603      	mov	r3, r0
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d001      	beq.n	800b0e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b0e2:	2301      	movs	r3, #1
 800b0e4:	e034      	b.n	800b150 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b0ec:	d028      	beq.n	800b140 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b0ee:	f7fe f8c3 	bl	8009278 <HAL_GetTick>
 800b0f2:	4602      	mov	r2, r0
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	1ad3      	subs	r3, r2, r3
 800b0f8:	68ba      	ldr	r2, [r7, #8]
 800b0fa:	429a      	cmp	r2, r3
 800b0fc:	d302      	bcc.n	800b104 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800b0fe:	68bb      	ldr	r3, [r7, #8]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d11d      	bne.n	800b140 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	695b      	ldr	r3, [r3, #20]
 800b10a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b10e:	2b80      	cmp	r3, #128	@ 0x80
 800b110:	d016      	beq.n	800b140 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	2200      	movs	r2, #0
 800b116:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	2220      	movs	r2, #32
 800b11c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	2200      	movs	r2, #0
 800b124:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b12c:	f043 0220 	orr.w	r2, r3, #32
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	2200      	movs	r2, #0
 800b138:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b13c:	2301      	movs	r3, #1
 800b13e:	e007      	b.n	800b150 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b140:	68fb      	ldr	r3, [r7, #12]
 800b142:	681b      	ldr	r3, [r3, #0]
 800b144:	695b      	ldr	r3, [r3, #20]
 800b146:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b14a:	2b80      	cmp	r3, #128	@ 0x80
 800b14c:	d1c3      	bne.n	800b0d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b14e:	2300      	movs	r3, #0
}
 800b150:	4618      	mov	r0, r3
 800b152:	3710      	adds	r7, #16
 800b154:	46bd      	mov	sp, r7
 800b156:	bd80      	pop	{r7, pc}

0800b158 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b158:	b580      	push	{r7, lr}
 800b15a:	b084      	sub	sp, #16
 800b15c:	af00      	add	r7, sp, #0
 800b15e:	60f8      	str	r0, [r7, #12]
 800b160:	60b9      	str	r1, [r7, #8]
 800b162:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b164:	e034      	b.n	800b1d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b166:	68f8      	ldr	r0, [r7, #12]
 800b168:	f000 f89b 	bl	800b2a2 <I2C_IsAcknowledgeFailed>
 800b16c:	4603      	mov	r3, r0
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d001      	beq.n	800b176 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b172:	2301      	movs	r3, #1
 800b174:	e034      	b.n	800b1e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b176:	68bb      	ldr	r3, [r7, #8]
 800b178:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b17c:	d028      	beq.n	800b1d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b17e:	f7fe f87b 	bl	8009278 <HAL_GetTick>
 800b182:	4602      	mov	r2, r0
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	1ad3      	subs	r3, r2, r3
 800b188:	68ba      	ldr	r2, [r7, #8]
 800b18a:	429a      	cmp	r2, r3
 800b18c:	d302      	bcc.n	800b194 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800b18e:	68bb      	ldr	r3, [r7, #8]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d11d      	bne.n	800b1d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	695b      	ldr	r3, [r3, #20]
 800b19a:	f003 0304 	and.w	r3, r3, #4
 800b19e:	2b04      	cmp	r3, #4
 800b1a0:	d016      	beq.n	800b1d0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	2200      	movs	r2, #0
 800b1a6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	2220      	movs	r2, #32
 800b1ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b1b0:	68fb      	ldr	r3, [r7, #12]
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b1bc:	f043 0220 	orr.w	r2, r3, #32
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800b1cc:	2301      	movs	r3, #1
 800b1ce:	e007      	b.n	800b1e0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	695b      	ldr	r3, [r3, #20]
 800b1d6:	f003 0304 	and.w	r3, r3, #4
 800b1da:	2b04      	cmp	r3, #4
 800b1dc:	d1c3      	bne.n	800b166 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b1de:	2300      	movs	r3, #0
}
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	3710      	adds	r7, #16
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	bd80      	pop	{r7, pc}

0800b1e8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b084      	sub	sp, #16
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	60f8      	str	r0, [r7, #12]
 800b1f0:	60b9      	str	r1, [r7, #8]
 800b1f2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b1f4:	e049      	b.n	800b28a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	695b      	ldr	r3, [r3, #20]
 800b1fc:	f003 0310 	and.w	r3, r3, #16
 800b200:	2b10      	cmp	r3, #16
 800b202:	d119      	bne.n	800b238 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	f06f 0210 	mvn.w	r2, #16
 800b20c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	2200      	movs	r2, #0
 800b212:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b214:	68fb      	ldr	r3, [r7, #12]
 800b216:	2220      	movs	r2, #32
 800b218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	2200      	movs	r2, #0
 800b220:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	2200      	movs	r2, #0
 800b230:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800b234:	2301      	movs	r3, #1
 800b236:	e030      	b.n	800b29a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b238:	f7fe f81e 	bl	8009278 <HAL_GetTick>
 800b23c:	4602      	mov	r2, r0
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	1ad3      	subs	r3, r2, r3
 800b242:	68ba      	ldr	r2, [r7, #8]
 800b244:	429a      	cmp	r2, r3
 800b246:	d302      	bcc.n	800b24e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b248:	68bb      	ldr	r3, [r7, #8]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d11d      	bne.n	800b28a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800b24e:	68fb      	ldr	r3, [r7, #12]
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	695b      	ldr	r3, [r3, #20]
 800b254:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b258:	2b40      	cmp	r3, #64	@ 0x40
 800b25a:	d016      	beq.n	800b28a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	2200      	movs	r2, #0
 800b260:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	2220      	movs	r2, #32
 800b266:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	2200      	movs	r2, #0
 800b26e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b272:	68fb      	ldr	r3, [r7, #12]
 800b274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b276:	f043 0220 	orr.w	r2, r3, #32
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	2200      	movs	r2, #0
 800b282:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800b286:	2301      	movs	r3, #1
 800b288:	e007      	b.n	800b29a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	695b      	ldr	r3, [r3, #20]
 800b290:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b294:	2b40      	cmp	r3, #64	@ 0x40
 800b296:	d1ae      	bne.n	800b1f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b298:	2300      	movs	r3, #0
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	3710      	adds	r7, #16
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}

0800b2a2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b2a2:	b480      	push	{r7}
 800b2a4:	b083      	sub	sp, #12
 800b2a6:	af00      	add	r7, sp, #0
 800b2a8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	695b      	ldr	r3, [r3, #20]
 800b2b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b2b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b2b8:	d11b      	bne.n	800b2f2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800b2c2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	2220      	movs	r2, #32
 800b2ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2200      	movs	r2, #0
 800b2d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b2de:	f043 0204 	orr.w	r2, r3, #4
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	2200      	movs	r2, #0
 800b2ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	e000      	b.n	800b2f4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b2f2:	2300      	movs	r3, #0
}
 800b2f4:	4618      	mov	r0, r3
 800b2f6:	370c      	adds	r7, #12
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bc80      	pop	{r7}
 800b2fc:	4770      	bx	lr
	...

0800b300 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b086      	sub	sp, #24
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2b00      	cmp	r3, #0
 800b30c:	d101      	bne.n	800b312 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b30e:	2301      	movs	r3, #1
 800b310:	e272      	b.n	800b7f8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	f003 0301 	and.w	r3, r3, #1
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	f000 8087 	beq.w	800b42e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b320:	4b92      	ldr	r3, [pc, #584]	@ (800b56c <HAL_RCC_OscConfig+0x26c>)
 800b322:	685b      	ldr	r3, [r3, #4]
 800b324:	f003 030c 	and.w	r3, r3, #12
 800b328:	2b04      	cmp	r3, #4
 800b32a:	d00c      	beq.n	800b346 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800b32c:	4b8f      	ldr	r3, [pc, #572]	@ (800b56c <HAL_RCC_OscConfig+0x26c>)
 800b32e:	685b      	ldr	r3, [r3, #4]
 800b330:	f003 030c 	and.w	r3, r3, #12
 800b334:	2b08      	cmp	r3, #8
 800b336:	d112      	bne.n	800b35e <HAL_RCC_OscConfig+0x5e>
 800b338:	4b8c      	ldr	r3, [pc, #560]	@ (800b56c <HAL_RCC_OscConfig+0x26c>)
 800b33a:	685b      	ldr	r3, [r3, #4]
 800b33c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b340:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b344:	d10b      	bne.n	800b35e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b346:	4b89      	ldr	r3, [pc, #548]	@ (800b56c <HAL_RCC_OscConfig+0x26c>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d06c      	beq.n	800b42c <HAL_RCC_OscConfig+0x12c>
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	685b      	ldr	r3, [r3, #4]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d168      	bne.n	800b42c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800b35a:	2301      	movs	r3, #1
 800b35c:	e24c      	b.n	800b7f8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	685b      	ldr	r3, [r3, #4]
 800b362:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b366:	d106      	bne.n	800b376 <HAL_RCC_OscConfig+0x76>
 800b368:	4b80      	ldr	r3, [pc, #512]	@ (800b56c <HAL_RCC_OscConfig+0x26c>)
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	4a7f      	ldr	r2, [pc, #508]	@ (800b56c <HAL_RCC_OscConfig+0x26c>)
 800b36e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b372:	6013      	str	r3, [r2, #0]
 800b374:	e02e      	b.n	800b3d4 <HAL_RCC_OscConfig+0xd4>
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	685b      	ldr	r3, [r3, #4]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d10c      	bne.n	800b398 <HAL_RCC_OscConfig+0x98>
 800b37e:	4b7b      	ldr	r3, [pc, #492]	@ (800b56c <HAL_RCC_OscConfig+0x26c>)
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	4a7a      	ldr	r2, [pc, #488]	@ (800b56c <HAL_RCC_OscConfig+0x26c>)
 800b384:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b388:	6013      	str	r3, [r2, #0]
 800b38a:	4b78      	ldr	r3, [pc, #480]	@ (800b56c <HAL_RCC_OscConfig+0x26c>)
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	4a77      	ldr	r2, [pc, #476]	@ (800b56c <HAL_RCC_OscConfig+0x26c>)
 800b390:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b394:	6013      	str	r3, [r2, #0]
 800b396:	e01d      	b.n	800b3d4 <HAL_RCC_OscConfig+0xd4>
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	685b      	ldr	r3, [r3, #4]
 800b39c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800b3a0:	d10c      	bne.n	800b3bc <HAL_RCC_OscConfig+0xbc>
 800b3a2:	4b72      	ldr	r3, [pc, #456]	@ (800b56c <HAL_RCC_OscConfig+0x26c>)
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	4a71      	ldr	r2, [pc, #452]	@ (800b56c <HAL_RCC_OscConfig+0x26c>)
 800b3a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b3ac:	6013      	str	r3, [r2, #0]
 800b3ae:	4b6f      	ldr	r3, [pc, #444]	@ (800b56c <HAL_RCC_OscConfig+0x26c>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	4a6e      	ldr	r2, [pc, #440]	@ (800b56c <HAL_RCC_OscConfig+0x26c>)
 800b3b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b3b8:	6013      	str	r3, [r2, #0]
 800b3ba:	e00b      	b.n	800b3d4 <HAL_RCC_OscConfig+0xd4>
 800b3bc:	4b6b      	ldr	r3, [pc, #428]	@ (800b56c <HAL_RCC_OscConfig+0x26c>)
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	4a6a      	ldr	r2, [pc, #424]	@ (800b56c <HAL_RCC_OscConfig+0x26c>)
 800b3c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b3c6:	6013      	str	r3, [r2, #0]
 800b3c8:	4b68      	ldr	r3, [pc, #416]	@ (800b56c <HAL_RCC_OscConfig+0x26c>)
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	4a67      	ldr	r2, [pc, #412]	@ (800b56c <HAL_RCC_OscConfig+0x26c>)
 800b3ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800b3d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	685b      	ldr	r3, [r3, #4]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d013      	beq.n	800b404 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b3dc:	f7fd ff4c 	bl	8009278 <HAL_GetTick>
 800b3e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b3e2:	e008      	b.n	800b3f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b3e4:	f7fd ff48 	bl	8009278 <HAL_GetTick>
 800b3e8:	4602      	mov	r2, r0
 800b3ea:	693b      	ldr	r3, [r7, #16]
 800b3ec:	1ad3      	subs	r3, r2, r3
 800b3ee:	2b64      	cmp	r3, #100	@ 0x64
 800b3f0:	d901      	bls.n	800b3f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800b3f2:	2303      	movs	r3, #3
 800b3f4:	e200      	b.n	800b7f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b3f6:	4b5d      	ldr	r3, [pc, #372]	@ (800b56c <HAL_RCC_OscConfig+0x26c>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d0f0      	beq.n	800b3e4 <HAL_RCC_OscConfig+0xe4>
 800b402:	e014      	b.n	800b42e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b404:	f7fd ff38 	bl	8009278 <HAL_GetTick>
 800b408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b40a:	e008      	b.n	800b41e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b40c:	f7fd ff34 	bl	8009278 <HAL_GetTick>
 800b410:	4602      	mov	r2, r0
 800b412:	693b      	ldr	r3, [r7, #16]
 800b414:	1ad3      	subs	r3, r2, r3
 800b416:	2b64      	cmp	r3, #100	@ 0x64
 800b418:	d901      	bls.n	800b41e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800b41a:	2303      	movs	r3, #3
 800b41c:	e1ec      	b.n	800b7f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b41e:	4b53      	ldr	r3, [pc, #332]	@ (800b56c <HAL_RCC_OscConfig+0x26c>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b426:	2b00      	cmp	r3, #0
 800b428:	d1f0      	bne.n	800b40c <HAL_RCC_OscConfig+0x10c>
 800b42a:	e000      	b.n	800b42e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b42c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	f003 0302 	and.w	r3, r3, #2
 800b436:	2b00      	cmp	r3, #0
 800b438:	d063      	beq.n	800b502 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b43a:	4b4c      	ldr	r3, [pc, #304]	@ (800b56c <HAL_RCC_OscConfig+0x26c>)
 800b43c:	685b      	ldr	r3, [r3, #4]
 800b43e:	f003 030c 	and.w	r3, r3, #12
 800b442:	2b00      	cmp	r3, #0
 800b444:	d00b      	beq.n	800b45e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800b446:	4b49      	ldr	r3, [pc, #292]	@ (800b56c <HAL_RCC_OscConfig+0x26c>)
 800b448:	685b      	ldr	r3, [r3, #4]
 800b44a:	f003 030c 	and.w	r3, r3, #12
 800b44e:	2b08      	cmp	r3, #8
 800b450:	d11c      	bne.n	800b48c <HAL_RCC_OscConfig+0x18c>
 800b452:	4b46      	ldr	r3, [pc, #280]	@ (800b56c <HAL_RCC_OscConfig+0x26c>)
 800b454:	685b      	ldr	r3, [r3, #4]
 800b456:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d116      	bne.n	800b48c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b45e:	4b43      	ldr	r3, [pc, #268]	@ (800b56c <HAL_RCC_OscConfig+0x26c>)
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	f003 0302 	and.w	r3, r3, #2
 800b466:	2b00      	cmp	r3, #0
 800b468:	d005      	beq.n	800b476 <HAL_RCC_OscConfig+0x176>
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	691b      	ldr	r3, [r3, #16]
 800b46e:	2b01      	cmp	r3, #1
 800b470:	d001      	beq.n	800b476 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800b472:	2301      	movs	r3, #1
 800b474:	e1c0      	b.n	800b7f8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b476:	4b3d      	ldr	r3, [pc, #244]	@ (800b56c <HAL_RCC_OscConfig+0x26c>)
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	695b      	ldr	r3, [r3, #20]
 800b482:	00db      	lsls	r3, r3, #3
 800b484:	4939      	ldr	r1, [pc, #228]	@ (800b56c <HAL_RCC_OscConfig+0x26c>)
 800b486:	4313      	orrs	r3, r2
 800b488:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b48a:	e03a      	b.n	800b502 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	691b      	ldr	r3, [r3, #16]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d020      	beq.n	800b4d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b494:	4b36      	ldr	r3, [pc, #216]	@ (800b570 <HAL_RCC_OscConfig+0x270>)
 800b496:	2201      	movs	r2, #1
 800b498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b49a:	f7fd feed 	bl	8009278 <HAL_GetTick>
 800b49e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b4a0:	e008      	b.n	800b4b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b4a2:	f7fd fee9 	bl	8009278 <HAL_GetTick>
 800b4a6:	4602      	mov	r2, r0
 800b4a8:	693b      	ldr	r3, [r7, #16]
 800b4aa:	1ad3      	subs	r3, r2, r3
 800b4ac:	2b02      	cmp	r3, #2
 800b4ae:	d901      	bls.n	800b4b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800b4b0:	2303      	movs	r3, #3
 800b4b2:	e1a1      	b.n	800b7f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b4b4:	4b2d      	ldr	r3, [pc, #180]	@ (800b56c <HAL_RCC_OscConfig+0x26c>)
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	f003 0302 	and.w	r3, r3, #2
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d0f0      	beq.n	800b4a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b4c0:	4b2a      	ldr	r3, [pc, #168]	@ (800b56c <HAL_RCC_OscConfig+0x26c>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	695b      	ldr	r3, [r3, #20]
 800b4cc:	00db      	lsls	r3, r3, #3
 800b4ce:	4927      	ldr	r1, [pc, #156]	@ (800b56c <HAL_RCC_OscConfig+0x26c>)
 800b4d0:	4313      	orrs	r3, r2
 800b4d2:	600b      	str	r3, [r1, #0]
 800b4d4:	e015      	b.n	800b502 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b4d6:	4b26      	ldr	r3, [pc, #152]	@ (800b570 <HAL_RCC_OscConfig+0x270>)
 800b4d8:	2200      	movs	r2, #0
 800b4da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b4dc:	f7fd fecc 	bl	8009278 <HAL_GetTick>
 800b4e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b4e2:	e008      	b.n	800b4f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b4e4:	f7fd fec8 	bl	8009278 <HAL_GetTick>
 800b4e8:	4602      	mov	r2, r0
 800b4ea:	693b      	ldr	r3, [r7, #16]
 800b4ec:	1ad3      	subs	r3, r2, r3
 800b4ee:	2b02      	cmp	r3, #2
 800b4f0:	d901      	bls.n	800b4f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800b4f2:	2303      	movs	r3, #3
 800b4f4:	e180      	b.n	800b7f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b4f6:	4b1d      	ldr	r3, [pc, #116]	@ (800b56c <HAL_RCC_OscConfig+0x26c>)
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	f003 0302 	and.w	r3, r3, #2
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d1f0      	bne.n	800b4e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	f003 0308 	and.w	r3, r3, #8
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d03a      	beq.n	800b584 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	699b      	ldr	r3, [r3, #24]
 800b512:	2b00      	cmp	r3, #0
 800b514:	d019      	beq.n	800b54a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b516:	4b17      	ldr	r3, [pc, #92]	@ (800b574 <HAL_RCC_OscConfig+0x274>)
 800b518:	2201      	movs	r2, #1
 800b51a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b51c:	f7fd feac 	bl	8009278 <HAL_GetTick>
 800b520:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b522:	e008      	b.n	800b536 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b524:	f7fd fea8 	bl	8009278 <HAL_GetTick>
 800b528:	4602      	mov	r2, r0
 800b52a:	693b      	ldr	r3, [r7, #16]
 800b52c:	1ad3      	subs	r3, r2, r3
 800b52e:	2b02      	cmp	r3, #2
 800b530:	d901      	bls.n	800b536 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800b532:	2303      	movs	r3, #3
 800b534:	e160      	b.n	800b7f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b536:	4b0d      	ldr	r3, [pc, #52]	@ (800b56c <HAL_RCC_OscConfig+0x26c>)
 800b538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b53a:	f003 0302 	and.w	r3, r3, #2
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d0f0      	beq.n	800b524 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800b542:	2001      	movs	r0, #1
 800b544:	f000 face 	bl	800bae4 <RCC_Delay>
 800b548:	e01c      	b.n	800b584 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b54a:	4b0a      	ldr	r3, [pc, #40]	@ (800b574 <HAL_RCC_OscConfig+0x274>)
 800b54c:	2200      	movs	r2, #0
 800b54e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b550:	f7fd fe92 	bl	8009278 <HAL_GetTick>
 800b554:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b556:	e00f      	b.n	800b578 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b558:	f7fd fe8e 	bl	8009278 <HAL_GetTick>
 800b55c:	4602      	mov	r2, r0
 800b55e:	693b      	ldr	r3, [r7, #16]
 800b560:	1ad3      	subs	r3, r2, r3
 800b562:	2b02      	cmp	r3, #2
 800b564:	d908      	bls.n	800b578 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800b566:	2303      	movs	r3, #3
 800b568:	e146      	b.n	800b7f8 <HAL_RCC_OscConfig+0x4f8>
 800b56a:	bf00      	nop
 800b56c:	40021000 	.word	0x40021000
 800b570:	42420000 	.word	0x42420000
 800b574:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b578:	4b92      	ldr	r3, [pc, #584]	@ (800b7c4 <HAL_RCC_OscConfig+0x4c4>)
 800b57a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b57c:	f003 0302 	and.w	r3, r3, #2
 800b580:	2b00      	cmp	r3, #0
 800b582:	d1e9      	bne.n	800b558 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	f003 0304 	and.w	r3, r3, #4
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	f000 80a6 	beq.w	800b6de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b592:	2300      	movs	r3, #0
 800b594:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b596:	4b8b      	ldr	r3, [pc, #556]	@ (800b7c4 <HAL_RCC_OscConfig+0x4c4>)
 800b598:	69db      	ldr	r3, [r3, #28]
 800b59a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d10d      	bne.n	800b5be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b5a2:	4b88      	ldr	r3, [pc, #544]	@ (800b7c4 <HAL_RCC_OscConfig+0x4c4>)
 800b5a4:	69db      	ldr	r3, [r3, #28]
 800b5a6:	4a87      	ldr	r2, [pc, #540]	@ (800b7c4 <HAL_RCC_OscConfig+0x4c4>)
 800b5a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b5ac:	61d3      	str	r3, [r2, #28]
 800b5ae:	4b85      	ldr	r3, [pc, #532]	@ (800b7c4 <HAL_RCC_OscConfig+0x4c4>)
 800b5b0:	69db      	ldr	r3, [r3, #28]
 800b5b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b5b6:	60bb      	str	r3, [r7, #8]
 800b5b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b5ba:	2301      	movs	r3, #1
 800b5bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b5be:	4b82      	ldr	r3, [pc, #520]	@ (800b7c8 <HAL_RCC_OscConfig+0x4c8>)
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d118      	bne.n	800b5fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b5ca:	4b7f      	ldr	r3, [pc, #508]	@ (800b7c8 <HAL_RCC_OscConfig+0x4c8>)
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	4a7e      	ldr	r2, [pc, #504]	@ (800b7c8 <HAL_RCC_OscConfig+0x4c8>)
 800b5d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b5d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b5d6:	f7fd fe4f 	bl	8009278 <HAL_GetTick>
 800b5da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b5dc:	e008      	b.n	800b5f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b5de:	f7fd fe4b 	bl	8009278 <HAL_GetTick>
 800b5e2:	4602      	mov	r2, r0
 800b5e4:	693b      	ldr	r3, [r7, #16]
 800b5e6:	1ad3      	subs	r3, r2, r3
 800b5e8:	2b64      	cmp	r3, #100	@ 0x64
 800b5ea:	d901      	bls.n	800b5f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800b5ec:	2303      	movs	r3, #3
 800b5ee:	e103      	b.n	800b7f8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b5f0:	4b75      	ldr	r3, [pc, #468]	@ (800b7c8 <HAL_RCC_OscConfig+0x4c8>)
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d0f0      	beq.n	800b5de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	68db      	ldr	r3, [r3, #12]
 800b600:	2b01      	cmp	r3, #1
 800b602:	d106      	bne.n	800b612 <HAL_RCC_OscConfig+0x312>
 800b604:	4b6f      	ldr	r3, [pc, #444]	@ (800b7c4 <HAL_RCC_OscConfig+0x4c4>)
 800b606:	6a1b      	ldr	r3, [r3, #32]
 800b608:	4a6e      	ldr	r2, [pc, #440]	@ (800b7c4 <HAL_RCC_OscConfig+0x4c4>)
 800b60a:	f043 0301 	orr.w	r3, r3, #1
 800b60e:	6213      	str	r3, [r2, #32]
 800b610:	e02d      	b.n	800b66e <HAL_RCC_OscConfig+0x36e>
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	68db      	ldr	r3, [r3, #12]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d10c      	bne.n	800b634 <HAL_RCC_OscConfig+0x334>
 800b61a:	4b6a      	ldr	r3, [pc, #424]	@ (800b7c4 <HAL_RCC_OscConfig+0x4c4>)
 800b61c:	6a1b      	ldr	r3, [r3, #32]
 800b61e:	4a69      	ldr	r2, [pc, #420]	@ (800b7c4 <HAL_RCC_OscConfig+0x4c4>)
 800b620:	f023 0301 	bic.w	r3, r3, #1
 800b624:	6213      	str	r3, [r2, #32]
 800b626:	4b67      	ldr	r3, [pc, #412]	@ (800b7c4 <HAL_RCC_OscConfig+0x4c4>)
 800b628:	6a1b      	ldr	r3, [r3, #32]
 800b62a:	4a66      	ldr	r2, [pc, #408]	@ (800b7c4 <HAL_RCC_OscConfig+0x4c4>)
 800b62c:	f023 0304 	bic.w	r3, r3, #4
 800b630:	6213      	str	r3, [r2, #32]
 800b632:	e01c      	b.n	800b66e <HAL_RCC_OscConfig+0x36e>
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	68db      	ldr	r3, [r3, #12]
 800b638:	2b05      	cmp	r3, #5
 800b63a:	d10c      	bne.n	800b656 <HAL_RCC_OscConfig+0x356>
 800b63c:	4b61      	ldr	r3, [pc, #388]	@ (800b7c4 <HAL_RCC_OscConfig+0x4c4>)
 800b63e:	6a1b      	ldr	r3, [r3, #32]
 800b640:	4a60      	ldr	r2, [pc, #384]	@ (800b7c4 <HAL_RCC_OscConfig+0x4c4>)
 800b642:	f043 0304 	orr.w	r3, r3, #4
 800b646:	6213      	str	r3, [r2, #32]
 800b648:	4b5e      	ldr	r3, [pc, #376]	@ (800b7c4 <HAL_RCC_OscConfig+0x4c4>)
 800b64a:	6a1b      	ldr	r3, [r3, #32]
 800b64c:	4a5d      	ldr	r2, [pc, #372]	@ (800b7c4 <HAL_RCC_OscConfig+0x4c4>)
 800b64e:	f043 0301 	orr.w	r3, r3, #1
 800b652:	6213      	str	r3, [r2, #32]
 800b654:	e00b      	b.n	800b66e <HAL_RCC_OscConfig+0x36e>
 800b656:	4b5b      	ldr	r3, [pc, #364]	@ (800b7c4 <HAL_RCC_OscConfig+0x4c4>)
 800b658:	6a1b      	ldr	r3, [r3, #32]
 800b65a:	4a5a      	ldr	r2, [pc, #360]	@ (800b7c4 <HAL_RCC_OscConfig+0x4c4>)
 800b65c:	f023 0301 	bic.w	r3, r3, #1
 800b660:	6213      	str	r3, [r2, #32]
 800b662:	4b58      	ldr	r3, [pc, #352]	@ (800b7c4 <HAL_RCC_OscConfig+0x4c4>)
 800b664:	6a1b      	ldr	r3, [r3, #32]
 800b666:	4a57      	ldr	r2, [pc, #348]	@ (800b7c4 <HAL_RCC_OscConfig+0x4c4>)
 800b668:	f023 0304 	bic.w	r3, r3, #4
 800b66c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	68db      	ldr	r3, [r3, #12]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d015      	beq.n	800b6a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b676:	f7fd fdff 	bl	8009278 <HAL_GetTick>
 800b67a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b67c:	e00a      	b.n	800b694 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b67e:	f7fd fdfb 	bl	8009278 <HAL_GetTick>
 800b682:	4602      	mov	r2, r0
 800b684:	693b      	ldr	r3, [r7, #16]
 800b686:	1ad3      	subs	r3, r2, r3
 800b688:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b68c:	4293      	cmp	r3, r2
 800b68e:	d901      	bls.n	800b694 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800b690:	2303      	movs	r3, #3
 800b692:	e0b1      	b.n	800b7f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b694:	4b4b      	ldr	r3, [pc, #300]	@ (800b7c4 <HAL_RCC_OscConfig+0x4c4>)
 800b696:	6a1b      	ldr	r3, [r3, #32]
 800b698:	f003 0302 	and.w	r3, r3, #2
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d0ee      	beq.n	800b67e <HAL_RCC_OscConfig+0x37e>
 800b6a0:	e014      	b.n	800b6cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b6a2:	f7fd fde9 	bl	8009278 <HAL_GetTick>
 800b6a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b6a8:	e00a      	b.n	800b6c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b6aa:	f7fd fde5 	bl	8009278 <HAL_GetTick>
 800b6ae:	4602      	mov	r2, r0
 800b6b0:	693b      	ldr	r3, [r7, #16]
 800b6b2:	1ad3      	subs	r3, r2, r3
 800b6b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b6b8:	4293      	cmp	r3, r2
 800b6ba:	d901      	bls.n	800b6c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800b6bc:	2303      	movs	r3, #3
 800b6be:	e09b      	b.n	800b7f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b6c0:	4b40      	ldr	r3, [pc, #256]	@ (800b7c4 <HAL_RCC_OscConfig+0x4c4>)
 800b6c2:	6a1b      	ldr	r3, [r3, #32]
 800b6c4:	f003 0302 	and.w	r3, r3, #2
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	d1ee      	bne.n	800b6aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800b6cc:	7dfb      	ldrb	r3, [r7, #23]
 800b6ce:	2b01      	cmp	r3, #1
 800b6d0:	d105      	bne.n	800b6de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b6d2:	4b3c      	ldr	r3, [pc, #240]	@ (800b7c4 <HAL_RCC_OscConfig+0x4c4>)
 800b6d4:	69db      	ldr	r3, [r3, #28]
 800b6d6:	4a3b      	ldr	r2, [pc, #236]	@ (800b7c4 <HAL_RCC_OscConfig+0x4c4>)
 800b6d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b6dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	69db      	ldr	r3, [r3, #28]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	f000 8087 	beq.w	800b7f6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b6e8:	4b36      	ldr	r3, [pc, #216]	@ (800b7c4 <HAL_RCC_OscConfig+0x4c4>)
 800b6ea:	685b      	ldr	r3, [r3, #4]
 800b6ec:	f003 030c 	and.w	r3, r3, #12
 800b6f0:	2b08      	cmp	r3, #8
 800b6f2:	d061      	beq.n	800b7b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	69db      	ldr	r3, [r3, #28]
 800b6f8:	2b02      	cmp	r3, #2
 800b6fa:	d146      	bne.n	800b78a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b6fc:	4b33      	ldr	r3, [pc, #204]	@ (800b7cc <HAL_RCC_OscConfig+0x4cc>)
 800b6fe:	2200      	movs	r2, #0
 800b700:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b702:	f7fd fdb9 	bl	8009278 <HAL_GetTick>
 800b706:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b708:	e008      	b.n	800b71c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b70a:	f7fd fdb5 	bl	8009278 <HAL_GetTick>
 800b70e:	4602      	mov	r2, r0
 800b710:	693b      	ldr	r3, [r7, #16]
 800b712:	1ad3      	subs	r3, r2, r3
 800b714:	2b02      	cmp	r3, #2
 800b716:	d901      	bls.n	800b71c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800b718:	2303      	movs	r3, #3
 800b71a:	e06d      	b.n	800b7f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b71c:	4b29      	ldr	r3, [pc, #164]	@ (800b7c4 <HAL_RCC_OscConfig+0x4c4>)
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b724:	2b00      	cmp	r3, #0
 800b726:	d1f0      	bne.n	800b70a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	6a1b      	ldr	r3, [r3, #32]
 800b72c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b730:	d108      	bne.n	800b744 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800b732:	4b24      	ldr	r3, [pc, #144]	@ (800b7c4 <HAL_RCC_OscConfig+0x4c4>)
 800b734:	685b      	ldr	r3, [r3, #4]
 800b736:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	689b      	ldr	r3, [r3, #8]
 800b73e:	4921      	ldr	r1, [pc, #132]	@ (800b7c4 <HAL_RCC_OscConfig+0x4c4>)
 800b740:	4313      	orrs	r3, r2
 800b742:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b744:	4b1f      	ldr	r3, [pc, #124]	@ (800b7c4 <HAL_RCC_OscConfig+0x4c4>)
 800b746:	685b      	ldr	r3, [r3, #4]
 800b748:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	6a19      	ldr	r1, [r3, #32]
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b754:	430b      	orrs	r3, r1
 800b756:	491b      	ldr	r1, [pc, #108]	@ (800b7c4 <HAL_RCC_OscConfig+0x4c4>)
 800b758:	4313      	orrs	r3, r2
 800b75a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b75c:	4b1b      	ldr	r3, [pc, #108]	@ (800b7cc <HAL_RCC_OscConfig+0x4cc>)
 800b75e:	2201      	movs	r2, #1
 800b760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b762:	f7fd fd89 	bl	8009278 <HAL_GetTick>
 800b766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b768:	e008      	b.n	800b77c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b76a:	f7fd fd85 	bl	8009278 <HAL_GetTick>
 800b76e:	4602      	mov	r2, r0
 800b770:	693b      	ldr	r3, [r7, #16]
 800b772:	1ad3      	subs	r3, r2, r3
 800b774:	2b02      	cmp	r3, #2
 800b776:	d901      	bls.n	800b77c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800b778:	2303      	movs	r3, #3
 800b77a:	e03d      	b.n	800b7f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b77c:	4b11      	ldr	r3, [pc, #68]	@ (800b7c4 <HAL_RCC_OscConfig+0x4c4>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b784:	2b00      	cmp	r3, #0
 800b786:	d0f0      	beq.n	800b76a <HAL_RCC_OscConfig+0x46a>
 800b788:	e035      	b.n	800b7f6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b78a:	4b10      	ldr	r3, [pc, #64]	@ (800b7cc <HAL_RCC_OscConfig+0x4cc>)
 800b78c:	2200      	movs	r2, #0
 800b78e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b790:	f7fd fd72 	bl	8009278 <HAL_GetTick>
 800b794:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b796:	e008      	b.n	800b7aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b798:	f7fd fd6e 	bl	8009278 <HAL_GetTick>
 800b79c:	4602      	mov	r2, r0
 800b79e:	693b      	ldr	r3, [r7, #16]
 800b7a0:	1ad3      	subs	r3, r2, r3
 800b7a2:	2b02      	cmp	r3, #2
 800b7a4:	d901      	bls.n	800b7aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800b7a6:	2303      	movs	r3, #3
 800b7a8:	e026      	b.n	800b7f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b7aa:	4b06      	ldr	r3, [pc, #24]	@ (800b7c4 <HAL_RCC_OscConfig+0x4c4>)
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d1f0      	bne.n	800b798 <HAL_RCC_OscConfig+0x498>
 800b7b6:	e01e      	b.n	800b7f6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	69db      	ldr	r3, [r3, #28]
 800b7bc:	2b01      	cmp	r3, #1
 800b7be:	d107      	bne.n	800b7d0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800b7c0:	2301      	movs	r3, #1
 800b7c2:	e019      	b.n	800b7f8 <HAL_RCC_OscConfig+0x4f8>
 800b7c4:	40021000 	.word	0x40021000
 800b7c8:	40007000 	.word	0x40007000
 800b7cc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800b7d0:	4b0b      	ldr	r3, [pc, #44]	@ (800b800 <HAL_RCC_OscConfig+0x500>)
 800b7d2:	685b      	ldr	r3, [r3, #4]
 800b7d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	6a1b      	ldr	r3, [r3, #32]
 800b7e0:	429a      	cmp	r2, r3
 800b7e2:	d106      	bne.n	800b7f2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800b7e4:	68fb      	ldr	r3, [r7, #12]
 800b7e6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b7ee:	429a      	cmp	r2, r3
 800b7f0:	d001      	beq.n	800b7f6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800b7f2:	2301      	movs	r3, #1
 800b7f4:	e000      	b.n	800b7f8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800b7f6:	2300      	movs	r3, #0
}
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	3718      	adds	r7, #24
 800b7fc:	46bd      	mov	sp, r7
 800b7fe:	bd80      	pop	{r7, pc}
 800b800:	40021000 	.word	0x40021000

0800b804 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b804:	b580      	push	{r7, lr}
 800b806:	b084      	sub	sp, #16
 800b808:	af00      	add	r7, sp, #0
 800b80a:	6078      	str	r0, [r7, #4]
 800b80c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d101      	bne.n	800b818 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b814:	2301      	movs	r3, #1
 800b816:	e0d0      	b.n	800b9ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b818:	4b6a      	ldr	r3, [pc, #424]	@ (800b9c4 <HAL_RCC_ClockConfig+0x1c0>)
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	f003 0307 	and.w	r3, r3, #7
 800b820:	683a      	ldr	r2, [r7, #0]
 800b822:	429a      	cmp	r2, r3
 800b824:	d910      	bls.n	800b848 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b826:	4b67      	ldr	r3, [pc, #412]	@ (800b9c4 <HAL_RCC_ClockConfig+0x1c0>)
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	f023 0207 	bic.w	r2, r3, #7
 800b82e:	4965      	ldr	r1, [pc, #404]	@ (800b9c4 <HAL_RCC_ClockConfig+0x1c0>)
 800b830:	683b      	ldr	r3, [r7, #0]
 800b832:	4313      	orrs	r3, r2
 800b834:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b836:	4b63      	ldr	r3, [pc, #396]	@ (800b9c4 <HAL_RCC_ClockConfig+0x1c0>)
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	f003 0307 	and.w	r3, r3, #7
 800b83e:	683a      	ldr	r2, [r7, #0]
 800b840:	429a      	cmp	r2, r3
 800b842:	d001      	beq.n	800b848 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800b844:	2301      	movs	r3, #1
 800b846:	e0b8      	b.n	800b9ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	f003 0302 	and.w	r3, r3, #2
 800b850:	2b00      	cmp	r3, #0
 800b852:	d020      	beq.n	800b896 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	f003 0304 	and.w	r3, r3, #4
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d005      	beq.n	800b86c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b860:	4b59      	ldr	r3, [pc, #356]	@ (800b9c8 <HAL_RCC_ClockConfig+0x1c4>)
 800b862:	685b      	ldr	r3, [r3, #4]
 800b864:	4a58      	ldr	r2, [pc, #352]	@ (800b9c8 <HAL_RCC_ClockConfig+0x1c4>)
 800b866:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800b86a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	f003 0308 	and.w	r3, r3, #8
 800b874:	2b00      	cmp	r3, #0
 800b876:	d005      	beq.n	800b884 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b878:	4b53      	ldr	r3, [pc, #332]	@ (800b9c8 <HAL_RCC_ClockConfig+0x1c4>)
 800b87a:	685b      	ldr	r3, [r3, #4]
 800b87c:	4a52      	ldr	r2, [pc, #328]	@ (800b9c8 <HAL_RCC_ClockConfig+0x1c4>)
 800b87e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800b882:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b884:	4b50      	ldr	r3, [pc, #320]	@ (800b9c8 <HAL_RCC_ClockConfig+0x1c4>)
 800b886:	685b      	ldr	r3, [r3, #4]
 800b888:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	689b      	ldr	r3, [r3, #8]
 800b890:	494d      	ldr	r1, [pc, #308]	@ (800b9c8 <HAL_RCC_ClockConfig+0x1c4>)
 800b892:	4313      	orrs	r3, r2
 800b894:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	f003 0301 	and.w	r3, r3, #1
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d040      	beq.n	800b924 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	685b      	ldr	r3, [r3, #4]
 800b8a6:	2b01      	cmp	r3, #1
 800b8a8:	d107      	bne.n	800b8ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b8aa:	4b47      	ldr	r3, [pc, #284]	@ (800b9c8 <HAL_RCC_ClockConfig+0x1c4>)
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d115      	bne.n	800b8e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b8b6:	2301      	movs	r3, #1
 800b8b8:	e07f      	b.n	800b9ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	685b      	ldr	r3, [r3, #4]
 800b8be:	2b02      	cmp	r3, #2
 800b8c0:	d107      	bne.n	800b8d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b8c2:	4b41      	ldr	r3, [pc, #260]	@ (800b9c8 <HAL_RCC_ClockConfig+0x1c4>)
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d109      	bne.n	800b8e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b8ce:	2301      	movs	r3, #1
 800b8d0:	e073      	b.n	800b9ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b8d2:	4b3d      	ldr	r3, [pc, #244]	@ (800b9c8 <HAL_RCC_ClockConfig+0x1c4>)
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	f003 0302 	and.w	r3, r3, #2
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d101      	bne.n	800b8e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b8de:	2301      	movs	r3, #1
 800b8e0:	e06b      	b.n	800b9ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b8e2:	4b39      	ldr	r3, [pc, #228]	@ (800b9c8 <HAL_RCC_ClockConfig+0x1c4>)
 800b8e4:	685b      	ldr	r3, [r3, #4]
 800b8e6:	f023 0203 	bic.w	r2, r3, #3
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	685b      	ldr	r3, [r3, #4]
 800b8ee:	4936      	ldr	r1, [pc, #216]	@ (800b9c8 <HAL_RCC_ClockConfig+0x1c4>)
 800b8f0:	4313      	orrs	r3, r2
 800b8f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b8f4:	f7fd fcc0 	bl	8009278 <HAL_GetTick>
 800b8f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b8fa:	e00a      	b.n	800b912 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b8fc:	f7fd fcbc 	bl	8009278 <HAL_GetTick>
 800b900:	4602      	mov	r2, r0
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	1ad3      	subs	r3, r2, r3
 800b906:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b90a:	4293      	cmp	r3, r2
 800b90c:	d901      	bls.n	800b912 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b90e:	2303      	movs	r3, #3
 800b910:	e053      	b.n	800b9ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b912:	4b2d      	ldr	r3, [pc, #180]	@ (800b9c8 <HAL_RCC_ClockConfig+0x1c4>)
 800b914:	685b      	ldr	r3, [r3, #4]
 800b916:	f003 020c 	and.w	r2, r3, #12
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	685b      	ldr	r3, [r3, #4]
 800b91e:	009b      	lsls	r3, r3, #2
 800b920:	429a      	cmp	r2, r3
 800b922:	d1eb      	bne.n	800b8fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b924:	4b27      	ldr	r3, [pc, #156]	@ (800b9c4 <HAL_RCC_ClockConfig+0x1c0>)
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	f003 0307 	and.w	r3, r3, #7
 800b92c:	683a      	ldr	r2, [r7, #0]
 800b92e:	429a      	cmp	r2, r3
 800b930:	d210      	bcs.n	800b954 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b932:	4b24      	ldr	r3, [pc, #144]	@ (800b9c4 <HAL_RCC_ClockConfig+0x1c0>)
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	f023 0207 	bic.w	r2, r3, #7
 800b93a:	4922      	ldr	r1, [pc, #136]	@ (800b9c4 <HAL_RCC_ClockConfig+0x1c0>)
 800b93c:	683b      	ldr	r3, [r7, #0]
 800b93e:	4313      	orrs	r3, r2
 800b940:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b942:	4b20      	ldr	r3, [pc, #128]	@ (800b9c4 <HAL_RCC_ClockConfig+0x1c0>)
 800b944:	681b      	ldr	r3, [r3, #0]
 800b946:	f003 0307 	and.w	r3, r3, #7
 800b94a:	683a      	ldr	r2, [r7, #0]
 800b94c:	429a      	cmp	r2, r3
 800b94e:	d001      	beq.n	800b954 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800b950:	2301      	movs	r3, #1
 800b952:	e032      	b.n	800b9ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	f003 0304 	and.w	r3, r3, #4
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d008      	beq.n	800b972 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b960:	4b19      	ldr	r3, [pc, #100]	@ (800b9c8 <HAL_RCC_ClockConfig+0x1c4>)
 800b962:	685b      	ldr	r3, [r3, #4]
 800b964:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	68db      	ldr	r3, [r3, #12]
 800b96c:	4916      	ldr	r1, [pc, #88]	@ (800b9c8 <HAL_RCC_ClockConfig+0x1c4>)
 800b96e:	4313      	orrs	r3, r2
 800b970:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	f003 0308 	and.w	r3, r3, #8
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d009      	beq.n	800b992 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b97e:	4b12      	ldr	r3, [pc, #72]	@ (800b9c8 <HAL_RCC_ClockConfig+0x1c4>)
 800b980:	685b      	ldr	r3, [r3, #4]
 800b982:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	691b      	ldr	r3, [r3, #16]
 800b98a:	00db      	lsls	r3, r3, #3
 800b98c:	490e      	ldr	r1, [pc, #56]	@ (800b9c8 <HAL_RCC_ClockConfig+0x1c4>)
 800b98e:	4313      	orrs	r3, r2
 800b990:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b992:	f000 f821 	bl	800b9d8 <HAL_RCC_GetSysClockFreq>
 800b996:	4602      	mov	r2, r0
 800b998:	4b0b      	ldr	r3, [pc, #44]	@ (800b9c8 <HAL_RCC_ClockConfig+0x1c4>)
 800b99a:	685b      	ldr	r3, [r3, #4]
 800b99c:	091b      	lsrs	r3, r3, #4
 800b99e:	f003 030f 	and.w	r3, r3, #15
 800b9a2:	490a      	ldr	r1, [pc, #40]	@ (800b9cc <HAL_RCC_ClockConfig+0x1c8>)
 800b9a4:	5ccb      	ldrb	r3, [r1, r3]
 800b9a6:	fa22 f303 	lsr.w	r3, r2, r3
 800b9aa:	4a09      	ldr	r2, [pc, #36]	@ (800b9d0 <HAL_RCC_ClockConfig+0x1cc>)
 800b9ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b9ae:	4b09      	ldr	r3, [pc, #36]	@ (800b9d4 <HAL_RCC_ClockConfig+0x1d0>)
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f7fd fc1e 	bl	80091f4 <HAL_InitTick>

  return HAL_OK;
 800b9b8:	2300      	movs	r3, #0
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	3710      	adds	r7, #16
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}
 800b9c2:	bf00      	nop
 800b9c4:	40022000 	.word	0x40022000
 800b9c8:	40021000 	.word	0x40021000
 800b9cc:	0800db90 	.word	0x0800db90
 800b9d0:	20000f50 	.word	0x20000f50
 800b9d4:	20000f54 	.word	0x20000f54

0800b9d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b9d8:	b480      	push	{r7}
 800b9da:	b087      	sub	sp, #28
 800b9dc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800b9de:	2300      	movs	r3, #0
 800b9e0:	60fb      	str	r3, [r7, #12]
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	60bb      	str	r3, [r7, #8]
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	617b      	str	r3, [r7, #20]
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800b9f2:	4b1e      	ldr	r3, [pc, #120]	@ (800ba6c <HAL_RCC_GetSysClockFreq+0x94>)
 800b9f4:	685b      	ldr	r3, [r3, #4]
 800b9f6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	f003 030c 	and.w	r3, r3, #12
 800b9fe:	2b04      	cmp	r3, #4
 800ba00:	d002      	beq.n	800ba08 <HAL_RCC_GetSysClockFreq+0x30>
 800ba02:	2b08      	cmp	r3, #8
 800ba04:	d003      	beq.n	800ba0e <HAL_RCC_GetSysClockFreq+0x36>
 800ba06:	e027      	b.n	800ba58 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800ba08:	4b19      	ldr	r3, [pc, #100]	@ (800ba70 <HAL_RCC_GetSysClockFreq+0x98>)
 800ba0a:	613b      	str	r3, [r7, #16]
      break;
 800ba0c:	e027      	b.n	800ba5e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800ba0e:	68fb      	ldr	r3, [r7, #12]
 800ba10:	0c9b      	lsrs	r3, r3, #18
 800ba12:	f003 030f 	and.w	r3, r3, #15
 800ba16:	4a17      	ldr	r2, [pc, #92]	@ (800ba74 <HAL_RCC_GetSysClockFreq+0x9c>)
 800ba18:	5cd3      	ldrb	r3, [r2, r3]
 800ba1a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d010      	beq.n	800ba48 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800ba26:	4b11      	ldr	r3, [pc, #68]	@ (800ba6c <HAL_RCC_GetSysClockFreq+0x94>)
 800ba28:	685b      	ldr	r3, [r3, #4]
 800ba2a:	0c5b      	lsrs	r3, r3, #17
 800ba2c:	f003 0301 	and.w	r3, r3, #1
 800ba30:	4a11      	ldr	r2, [pc, #68]	@ (800ba78 <HAL_RCC_GetSysClockFreq+0xa0>)
 800ba32:	5cd3      	ldrb	r3, [r2, r3]
 800ba34:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	4a0d      	ldr	r2, [pc, #52]	@ (800ba70 <HAL_RCC_GetSysClockFreq+0x98>)
 800ba3a:	fb03 f202 	mul.w	r2, r3, r2
 800ba3e:	68bb      	ldr	r3, [r7, #8]
 800ba40:	fbb2 f3f3 	udiv	r3, r2, r3
 800ba44:	617b      	str	r3, [r7, #20]
 800ba46:	e004      	b.n	800ba52 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	4a0c      	ldr	r2, [pc, #48]	@ (800ba7c <HAL_RCC_GetSysClockFreq+0xa4>)
 800ba4c:	fb02 f303 	mul.w	r3, r2, r3
 800ba50:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800ba52:	697b      	ldr	r3, [r7, #20]
 800ba54:	613b      	str	r3, [r7, #16]
      break;
 800ba56:	e002      	b.n	800ba5e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800ba58:	4b05      	ldr	r3, [pc, #20]	@ (800ba70 <HAL_RCC_GetSysClockFreq+0x98>)
 800ba5a:	613b      	str	r3, [r7, #16]
      break;
 800ba5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800ba5e:	693b      	ldr	r3, [r7, #16]
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	371c      	adds	r7, #28
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bc80      	pop	{r7}
 800ba68:	4770      	bx	lr
 800ba6a:	bf00      	nop
 800ba6c:	40021000 	.word	0x40021000
 800ba70:	007a1200 	.word	0x007a1200
 800ba74:	0800dba8 	.word	0x0800dba8
 800ba78:	0800dbb8 	.word	0x0800dbb8
 800ba7c:	003d0900 	.word	0x003d0900

0800ba80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ba80:	b480      	push	{r7}
 800ba82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ba84:	4b02      	ldr	r3, [pc, #8]	@ (800ba90 <HAL_RCC_GetHCLKFreq+0x10>)
 800ba86:	681b      	ldr	r3, [r3, #0]
}
 800ba88:	4618      	mov	r0, r3
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bc80      	pop	{r7}
 800ba8e:	4770      	bx	lr
 800ba90:	20000f50 	.word	0x20000f50

0800ba94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ba94:	b580      	push	{r7, lr}
 800ba96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ba98:	f7ff fff2 	bl	800ba80 <HAL_RCC_GetHCLKFreq>
 800ba9c:	4602      	mov	r2, r0
 800ba9e:	4b05      	ldr	r3, [pc, #20]	@ (800bab4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800baa0:	685b      	ldr	r3, [r3, #4]
 800baa2:	0a1b      	lsrs	r3, r3, #8
 800baa4:	f003 0307 	and.w	r3, r3, #7
 800baa8:	4903      	ldr	r1, [pc, #12]	@ (800bab8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800baaa:	5ccb      	ldrb	r3, [r1, r3]
 800baac:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bab0:	4618      	mov	r0, r3
 800bab2:	bd80      	pop	{r7, pc}
 800bab4:	40021000 	.word	0x40021000
 800bab8:	0800dba0 	.word	0x0800dba0

0800babc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800bac0:	f7ff ffde 	bl	800ba80 <HAL_RCC_GetHCLKFreq>
 800bac4:	4602      	mov	r2, r0
 800bac6:	4b05      	ldr	r3, [pc, #20]	@ (800badc <HAL_RCC_GetPCLK2Freq+0x20>)
 800bac8:	685b      	ldr	r3, [r3, #4]
 800baca:	0adb      	lsrs	r3, r3, #11
 800bacc:	f003 0307 	and.w	r3, r3, #7
 800bad0:	4903      	ldr	r1, [pc, #12]	@ (800bae0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800bad2:	5ccb      	ldrb	r3, [r1, r3]
 800bad4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bad8:	4618      	mov	r0, r3
 800bada:	bd80      	pop	{r7, pc}
 800badc:	40021000 	.word	0x40021000
 800bae0:	0800dba0 	.word	0x0800dba0

0800bae4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800bae4:	b480      	push	{r7}
 800bae6:	b085      	sub	sp, #20
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800baec:	4b0a      	ldr	r3, [pc, #40]	@ (800bb18 <RCC_Delay+0x34>)
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	4a0a      	ldr	r2, [pc, #40]	@ (800bb1c <RCC_Delay+0x38>)
 800baf2:	fba2 2303 	umull	r2, r3, r2, r3
 800baf6:	0a5b      	lsrs	r3, r3, #9
 800baf8:	687a      	ldr	r2, [r7, #4]
 800bafa:	fb02 f303 	mul.w	r3, r2, r3
 800bafe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800bb00:	bf00      	nop
  }
  while (Delay --);
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	1e5a      	subs	r2, r3, #1
 800bb06:	60fa      	str	r2, [r7, #12]
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d1f9      	bne.n	800bb00 <RCC_Delay+0x1c>
}
 800bb0c:	bf00      	nop
 800bb0e:	bf00      	nop
 800bb10:	3714      	adds	r7, #20
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bc80      	pop	{r7}
 800bb16:	4770      	bx	lr
 800bb18:	20000f50 	.word	0x20000f50
 800bb1c:	10624dd3 	.word	0x10624dd3

0800bb20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bb20:	b580      	push	{r7, lr}
 800bb22:	b082      	sub	sp, #8
 800bb24:	af00      	add	r7, sp, #0
 800bb26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d101      	bne.n	800bb32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bb2e:	2301      	movs	r3, #1
 800bb30:	e041      	b.n	800bbb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bb38:	b2db      	uxtb	r3, r3
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d106      	bne.n	800bb4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2200      	movs	r2, #0
 800bb42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bb46:	6878      	ldr	r0, [r7, #4]
 800bb48:	f7fd fa22 	bl	8008f90 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	2202      	movs	r2, #2
 800bb50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	681a      	ldr	r2, [r3, #0]
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	3304      	adds	r3, #4
 800bb5c:	4619      	mov	r1, r3
 800bb5e:	4610      	mov	r0, r2
 800bb60:	f000 fa82 	bl	800c068 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	2201      	movs	r2, #1
 800bb68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	2201      	movs	r2, #1
 800bb70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2201      	movs	r2, #1
 800bb78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2201      	movs	r2, #1
 800bb80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2201      	movs	r2, #1
 800bb88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	2201      	movs	r2, #1
 800bb90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800bb94:	687b      	ldr	r3, [r7, #4]
 800bb96:	2201      	movs	r2, #1
 800bb98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2201      	movs	r2, #1
 800bba0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2201      	movs	r2, #1
 800bba8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2201      	movs	r2, #1
 800bbb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800bbb4:	2300      	movs	r3, #0
}
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	3708      	adds	r7, #8
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}
	...

0800bbc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bbc0:	b480      	push	{r7}
 800bbc2:	b085      	sub	sp, #20
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800bbce:	b2db      	uxtb	r3, r3
 800bbd0:	2b01      	cmp	r3, #1
 800bbd2:	d001      	beq.n	800bbd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bbd4:	2301      	movs	r3, #1
 800bbd6:	e044      	b.n	800bc62 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	2202      	movs	r2, #2
 800bbdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	68da      	ldr	r2, [r3, #12]
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	681b      	ldr	r3, [r3, #0]
 800bbea:	f042 0201 	orr.w	r2, r2, #1
 800bbee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bbf0:	687b      	ldr	r3, [r7, #4]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	4a1d      	ldr	r2, [pc, #116]	@ (800bc6c <HAL_TIM_Base_Start_IT+0xac>)
 800bbf6:	4293      	cmp	r3, r2
 800bbf8:	d018      	beq.n	800bc2c <HAL_TIM_Base_Start_IT+0x6c>
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	4a1c      	ldr	r2, [pc, #112]	@ (800bc70 <HAL_TIM_Base_Start_IT+0xb0>)
 800bc00:	4293      	cmp	r3, r2
 800bc02:	d013      	beq.n	800bc2c <HAL_TIM_Base_Start_IT+0x6c>
 800bc04:	687b      	ldr	r3, [r7, #4]
 800bc06:	681b      	ldr	r3, [r3, #0]
 800bc08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800bc0c:	d00e      	beq.n	800bc2c <HAL_TIM_Base_Start_IT+0x6c>
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	681b      	ldr	r3, [r3, #0]
 800bc12:	4a18      	ldr	r2, [pc, #96]	@ (800bc74 <HAL_TIM_Base_Start_IT+0xb4>)
 800bc14:	4293      	cmp	r3, r2
 800bc16:	d009      	beq.n	800bc2c <HAL_TIM_Base_Start_IT+0x6c>
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	4a16      	ldr	r2, [pc, #88]	@ (800bc78 <HAL_TIM_Base_Start_IT+0xb8>)
 800bc1e:	4293      	cmp	r3, r2
 800bc20:	d004      	beq.n	800bc2c <HAL_TIM_Base_Start_IT+0x6c>
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	4a15      	ldr	r2, [pc, #84]	@ (800bc7c <HAL_TIM_Base_Start_IT+0xbc>)
 800bc28:	4293      	cmp	r3, r2
 800bc2a:	d111      	bne.n	800bc50 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	689b      	ldr	r3, [r3, #8]
 800bc32:	f003 0307 	and.w	r3, r3, #7
 800bc36:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	2b06      	cmp	r3, #6
 800bc3c:	d010      	beq.n	800bc60 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	681b      	ldr	r3, [r3, #0]
 800bc42:	681a      	ldr	r2, [r3, #0]
 800bc44:	687b      	ldr	r3, [r7, #4]
 800bc46:	681b      	ldr	r3, [r3, #0]
 800bc48:	f042 0201 	orr.w	r2, r2, #1
 800bc4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bc4e:	e007      	b.n	800bc60 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	681b      	ldr	r3, [r3, #0]
 800bc54:	681a      	ldr	r2, [r3, #0]
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	f042 0201 	orr.w	r2, r2, #1
 800bc5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800bc60:	2300      	movs	r3, #0
}
 800bc62:	4618      	mov	r0, r3
 800bc64:	3714      	adds	r7, #20
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bc80      	pop	{r7}
 800bc6a:	4770      	bx	lr
 800bc6c:	40012c00 	.word	0x40012c00
 800bc70:	40013400 	.word	0x40013400
 800bc74:	40000400 	.word	0x40000400
 800bc78:	40000800 	.word	0x40000800
 800bc7c:	40000c00 	.word	0x40000c00

0800bc80 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bc80:	b580      	push	{r7, lr}
 800bc82:	b082      	sub	sp, #8
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	691b      	ldr	r3, [r3, #16]
 800bc8e:	f003 0302 	and.w	r3, r3, #2
 800bc92:	2b02      	cmp	r3, #2
 800bc94:	d122      	bne.n	800bcdc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	68db      	ldr	r3, [r3, #12]
 800bc9c:	f003 0302 	and.w	r3, r3, #2
 800bca0:	2b02      	cmp	r3, #2
 800bca2:	d11b      	bne.n	800bcdc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	f06f 0202 	mvn.w	r2, #2
 800bcac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	2201      	movs	r2, #1
 800bcb2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	699b      	ldr	r3, [r3, #24]
 800bcba:	f003 0303 	and.w	r3, r3, #3
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d003      	beq.n	800bcca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bcc2:	6878      	ldr	r0, [r7, #4]
 800bcc4:	f000 f9b4 	bl	800c030 <HAL_TIM_IC_CaptureCallback>
 800bcc8:	e005      	b.n	800bcd6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bcca:	6878      	ldr	r0, [r7, #4]
 800bccc:	f000 f9a7 	bl	800c01e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bcd0:	6878      	ldr	r0, [r7, #4]
 800bcd2:	f000 f9b6 	bl	800c042 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	2200      	movs	r2, #0
 800bcda:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	691b      	ldr	r3, [r3, #16]
 800bce2:	f003 0304 	and.w	r3, r3, #4
 800bce6:	2b04      	cmp	r3, #4
 800bce8:	d122      	bne.n	800bd30 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	68db      	ldr	r3, [r3, #12]
 800bcf0:	f003 0304 	and.w	r3, r3, #4
 800bcf4:	2b04      	cmp	r3, #4
 800bcf6:	d11b      	bne.n	800bd30 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	f06f 0204 	mvn.w	r2, #4
 800bd00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	2202      	movs	r2, #2
 800bd06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	699b      	ldr	r3, [r3, #24]
 800bd0e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d003      	beq.n	800bd1e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bd16:	6878      	ldr	r0, [r7, #4]
 800bd18:	f000 f98a 	bl	800c030 <HAL_TIM_IC_CaptureCallback>
 800bd1c:	e005      	b.n	800bd2a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd1e:	6878      	ldr	r0, [r7, #4]
 800bd20:	f000 f97d 	bl	800c01e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd24:	6878      	ldr	r0, [r7, #4]
 800bd26:	f000 f98c 	bl	800c042 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	691b      	ldr	r3, [r3, #16]
 800bd36:	f003 0308 	and.w	r3, r3, #8
 800bd3a:	2b08      	cmp	r3, #8
 800bd3c:	d122      	bne.n	800bd84 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	681b      	ldr	r3, [r3, #0]
 800bd42:	68db      	ldr	r3, [r3, #12]
 800bd44:	f003 0308 	and.w	r3, r3, #8
 800bd48:	2b08      	cmp	r3, #8
 800bd4a:	d11b      	bne.n	800bd84 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	f06f 0208 	mvn.w	r2, #8
 800bd54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	2204      	movs	r2, #4
 800bd5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	69db      	ldr	r3, [r3, #28]
 800bd62:	f003 0303 	and.w	r3, r3, #3
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d003      	beq.n	800bd72 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bd6a:	6878      	ldr	r0, [r7, #4]
 800bd6c:	f000 f960 	bl	800c030 <HAL_TIM_IC_CaptureCallback>
 800bd70:	e005      	b.n	800bd7e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bd72:	6878      	ldr	r0, [r7, #4]
 800bd74:	f000 f953 	bl	800c01e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bd78:	6878      	ldr	r0, [r7, #4]
 800bd7a:	f000 f962 	bl	800c042 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	2200      	movs	r2, #0
 800bd82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	691b      	ldr	r3, [r3, #16]
 800bd8a:	f003 0310 	and.w	r3, r3, #16
 800bd8e:	2b10      	cmp	r3, #16
 800bd90:	d122      	bne.n	800bdd8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	681b      	ldr	r3, [r3, #0]
 800bd96:	68db      	ldr	r3, [r3, #12]
 800bd98:	f003 0310 	and.w	r3, r3, #16
 800bd9c:	2b10      	cmp	r3, #16
 800bd9e:	d11b      	bne.n	800bdd8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	681b      	ldr	r3, [r3, #0]
 800bda4:	f06f 0210 	mvn.w	r2, #16
 800bda8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	2208      	movs	r2, #8
 800bdae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	69db      	ldr	r3, [r3, #28]
 800bdb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d003      	beq.n	800bdc6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bdbe:	6878      	ldr	r0, [r7, #4]
 800bdc0:	f000 f936 	bl	800c030 <HAL_TIM_IC_CaptureCallback>
 800bdc4:	e005      	b.n	800bdd2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	f000 f929 	bl	800c01e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bdcc:	6878      	ldr	r0, [r7, #4]
 800bdce:	f000 f938 	bl	800c042 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	691b      	ldr	r3, [r3, #16]
 800bdde:	f003 0301 	and.w	r3, r3, #1
 800bde2:	2b01      	cmp	r3, #1
 800bde4:	d10e      	bne.n	800be04 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	68db      	ldr	r3, [r3, #12]
 800bdec:	f003 0301 	and.w	r3, r3, #1
 800bdf0:	2b01      	cmp	r3, #1
 800bdf2:	d107      	bne.n	800be04 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	f06f 0201 	mvn.w	r2, #1
 800bdfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bdfe:	6878      	ldr	r0, [r7, #4]
 800be00:	f7fc fd5e 	bl	80088c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	681b      	ldr	r3, [r3, #0]
 800be08:	691b      	ldr	r3, [r3, #16]
 800be0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be0e:	2b80      	cmp	r3, #128	@ 0x80
 800be10:	d10e      	bne.n	800be30 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	681b      	ldr	r3, [r3, #0]
 800be16:	68db      	ldr	r3, [r3, #12]
 800be18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800be1c:	2b80      	cmp	r3, #128	@ 0x80
 800be1e:	d107      	bne.n	800be30 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800be28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800be2a:	6878      	ldr	r0, [r7, #4]
 800be2c:	f000 faa1 	bl	800c372 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	691b      	ldr	r3, [r3, #16]
 800be36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be3a:	2b40      	cmp	r3, #64	@ 0x40
 800be3c:	d10e      	bne.n	800be5c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	68db      	ldr	r3, [r3, #12]
 800be44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be48:	2b40      	cmp	r3, #64	@ 0x40
 800be4a:	d107      	bne.n	800be5c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	681b      	ldr	r3, [r3, #0]
 800be50:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800be54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800be56:	6878      	ldr	r0, [r7, #4]
 800be58:	f000 f8fc 	bl	800c054 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	691b      	ldr	r3, [r3, #16]
 800be62:	f003 0320 	and.w	r3, r3, #32
 800be66:	2b20      	cmp	r3, #32
 800be68:	d10e      	bne.n	800be88 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	68db      	ldr	r3, [r3, #12]
 800be70:	f003 0320 	and.w	r3, r3, #32
 800be74:	2b20      	cmp	r3, #32
 800be76:	d107      	bne.n	800be88 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	681b      	ldr	r3, [r3, #0]
 800be7c:	f06f 0220 	mvn.w	r2, #32
 800be80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800be82:	6878      	ldr	r0, [r7, #4]
 800be84:	f000 fa6c 	bl	800c360 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800be88:	bf00      	nop
 800be8a:	3708      	adds	r7, #8
 800be8c:	46bd      	mov	sp, r7
 800be8e:	bd80      	pop	{r7, pc}

0800be90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b084      	sub	sp, #16
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
 800be98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800be9a:	2300      	movs	r3, #0
 800be9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800bea4:	2b01      	cmp	r3, #1
 800bea6:	d101      	bne.n	800beac <HAL_TIM_ConfigClockSource+0x1c>
 800bea8:	2302      	movs	r3, #2
 800beaa:	e0b4      	b.n	800c016 <HAL_TIM_ConfigClockSource+0x186>
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2201      	movs	r2, #1
 800beb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	2202      	movs	r2, #2
 800beb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	689b      	ldr	r3, [r3, #8]
 800bec2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bec4:	68bb      	ldr	r3, [r7, #8]
 800bec6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800beca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800becc:	68bb      	ldr	r3, [r7, #8]
 800bece:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800bed2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	68ba      	ldr	r2, [r7, #8]
 800beda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bedc:	683b      	ldr	r3, [r7, #0]
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bee4:	d03e      	beq.n	800bf64 <HAL_TIM_ConfigClockSource+0xd4>
 800bee6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800beea:	f200 8087 	bhi.w	800bffc <HAL_TIM_ConfigClockSource+0x16c>
 800beee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bef2:	f000 8086 	beq.w	800c002 <HAL_TIM_ConfigClockSource+0x172>
 800bef6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800befa:	d87f      	bhi.n	800bffc <HAL_TIM_ConfigClockSource+0x16c>
 800befc:	2b70      	cmp	r3, #112	@ 0x70
 800befe:	d01a      	beq.n	800bf36 <HAL_TIM_ConfigClockSource+0xa6>
 800bf00:	2b70      	cmp	r3, #112	@ 0x70
 800bf02:	d87b      	bhi.n	800bffc <HAL_TIM_ConfigClockSource+0x16c>
 800bf04:	2b60      	cmp	r3, #96	@ 0x60
 800bf06:	d050      	beq.n	800bfaa <HAL_TIM_ConfigClockSource+0x11a>
 800bf08:	2b60      	cmp	r3, #96	@ 0x60
 800bf0a:	d877      	bhi.n	800bffc <HAL_TIM_ConfigClockSource+0x16c>
 800bf0c:	2b50      	cmp	r3, #80	@ 0x50
 800bf0e:	d03c      	beq.n	800bf8a <HAL_TIM_ConfigClockSource+0xfa>
 800bf10:	2b50      	cmp	r3, #80	@ 0x50
 800bf12:	d873      	bhi.n	800bffc <HAL_TIM_ConfigClockSource+0x16c>
 800bf14:	2b40      	cmp	r3, #64	@ 0x40
 800bf16:	d058      	beq.n	800bfca <HAL_TIM_ConfigClockSource+0x13a>
 800bf18:	2b40      	cmp	r3, #64	@ 0x40
 800bf1a:	d86f      	bhi.n	800bffc <HAL_TIM_ConfigClockSource+0x16c>
 800bf1c:	2b30      	cmp	r3, #48	@ 0x30
 800bf1e:	d064      	beq.n	800bfea <HAL_TIM_ConfigClockSource+0x15a>
 800bf20:	2b30      	cmp	r3, #48	@ 0x30
 800bf22:	d86b      	bhi.n	800bffc <HAL_TIM_ConfigClockSource+0x16c>
 800bf24:	2b20      	cmp	r3, #32
 800bf26:	d060      	beq.n	800bfea <HAL_TIM_ConfigClockSource+0x15a>
 800bf28:	2b20      	cmp	r3, #32
 800bf2a:	d867      	bhi.n	800bffc <HAL_TIM_ConfigClockSource+0x16c>
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d05c      	beq.n	800bfea <HAL_TIM_ConfigClockSource+0x15a>
 800bf30:	2b10      	cmp	r3, #16
 800bf32:	d05a      	beq.n	800bfea <HAL_TIM_ConfigClockSource+0x15a>
 800bf34:	e062      	b.n	800bffc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bf42:	683b      	ldr	r3, [r7, #0]
 800bf44:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bf46:	f000 f980 	bl	800c24a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	689b      	ldr	r3, [r3, #8]
 800bf50:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bf52:	68bb      	ldr	r3, [r7, #8]
 800bf54:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800bf58:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	681b      	ldr	r3, [r3, #0]
 800bf5e:	68ba      	ldr	r2, [r7, #8]
 800bf60:	609a      	str	r2, [r3, #8]
      break;
 800bf62:	e04f      	b.n	800c004 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bf70:	683b      	ldr	r3, [r7, #0]
 800bf72:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bf74:	f000 f969 	bl	800c24a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	689a      	ldr	r2, [r3, #8]
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800bf86:	609a      	str	r2, [r3, #8]
      break;
 800bf88:	e03c      	b.n	800c004 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bf8e:	683b      	ldr	r3, [r7, #0]
 800bf90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bf92:	683b      	ldr	r3, [r7, #0]
 800bf94:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bf96:	461a      	mov	r2, r3
 800bf98:	f000 f8e0 	bl	800c15c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	2150      	movs	r1, #80	@ 0x50
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	f000 f937 	bl	800c216 <TIM_ITRx_SetConfig>
      break;
 800bfa8:	e02c      	b.n	800c004 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bfae:	683b      	ldr	r3, [r7, #0]
 800bfb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bfb6:	461a      	mov	r2, r3
 800bfb8:	f000 f8fe 	bl	800c1b8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	2160      	movs	r1, #96	@ 0x60
 800bfc2:	4618      	mov	r0, r3
 800bfc4:	f000 f927 	bl	800c216 <TIM_ITRx_SetConfig>
      break;
 800bfc8:	e01c      	b.n	800c004 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bfce:	683b      	ldr	r3, [r7, #0]
 800bfd0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bfd6:	461a      	mov	r2, r3
 800bfd8:	f000 f8c0 	bl	800c15c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	2140      	movs	r1, #64	@ 0x40
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	f000 f917 	bl	800c216 <TIM_ITRx_SetConfig>
      break;
 800bfe8:	e00c      	b.n	800c004 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681a      	ldr	r2, [r3, #0]
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	4619      	mov	r1, r3
 800bff4:	4610      	mov	r0, r2
 800bff6:	f000 f90e 	bl	800c216 <TIM_ITRx_SetConfig>
      break;
 800bffa:	e003      	b.n	800c004 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800bffc:	2301      	movs	r3, #1
 800bffe:	73fb      	strb	r3, [r7, #15]
      break;
 800c000:	e000      	b.n	800c004 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c002:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2201      	movs	r2, #1
 800c008:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	2200      	movs	r2, #0
 800c010:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800c014:	7bfb      	ldrb	r3, [r7, #15]
}
 800c016:	4618      	mov	r0, r3
 800c018:	3710      	adds	r7, #16
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}

0800c01e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c01e:	b480      	push	{r7}
 800c020:	b083      	sub	sp, #12
 800c022:	af00      	add	r7, sp, #0
 800c024:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c026:	bf00      	nop
 800c028:	370c      	adds	r7, #12
 800c02a:	46bd      	mov	sp, r7
 800c02c:	bc80      	pop	{r7}
 800c02e:	4770      	bx	lr

0800c030 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c030:	b480      	push	{r7}
 800c032:	b083      	sub	sp, #12
 800c034:	af00      	add	r7, sp, #0
 800c036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c038:	bf00      	nop
 800c03a:	370c      	adds	r7, #12
 800c03c:	46bd      	mov	sp, r7
 800c03e:	bc80      	pop	{r7}
 800c040:	4770      	bx	lr

0800c042 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c042:	b480      	push	{r7}
 800c044:	b083      	sub	sp, #12
 800c046:	af00      	add	r7, sp, #0
 800c048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c04a:	bf00      	nop
 800c04c:	370c      	adds	r7, #12
 800c04e:	46bd      	mov	sp, r7
 800c050:	bc80      	pop	{r7}
 800c052:	4770      	bx	lr

0800c054 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c054:	b480      	push	{r7}
 800c056:	b083      	sub	sp, #12
 800c058:	af00      	add	r7, sp, #0
 800c05a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c05c:	bf00      	nop
 800c05e:	370c      	adds	r7, #12
 800c060:	46bd      	mov	sp, r7
 800c062:	bc80      	pop	{r7}
 800c064:	4770      	bx	lr
	...

0800c068 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c068:	b480      	push	{r7}
 800c06a:	b085      	sub	sp, #20
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	6078      	str	r0, [r7, #4]
 800c070:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	4a33      	ldr	r2, [pc, #204]	@ (800c148 <TIM_Base_SetConfig+0xe0>)
 800c07c:	4293      	cmp	r3, r2
 800c07e:	d013      	beq.n	800c0a8 <TIM_Base_SetConfig+0x40>
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	4a32      	ldr	r2, [pc, #200]	@ (800c14c <TIM_Base_SetConfig+0xe4>)
 800c084:	4293      	cmp	r3, r2
 800c086:	d00f      	beq.n	800c0a8 <TIM_Base_SetConfig+0x40>
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c08e:	d00b      	beq.n	800c0a8 <TIM_Base_SetConfig+0x40>
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	4a2f      	ldr	r2, [pc, #188]	@ (800c150 <TIM_Base_SetConfig+0xe8>)
 800c094:	4293      	cmp	r3, r2
 800c096:	d007      	beq.n	800c0a8 <TIM_Base_SetConfig+0x40>
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	4a2e      	ldr	r2, [pc, #184]	@ (800c154 <TIM_Base_SetConfig+0xec>)
 800c09c:	4293      	cmp	r3, r2
 800c09e:	d003      	beq.n	800c0a8 <TIM_Base_SetConfig+0x40>
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	4a2d      	ldr	r2, [pc, #180]	@ (800c158 <TIM_Base_SetConfig+0xf0>)
 800c0a4:	4293      	cmp	r3, r2
 800c0a6:	d108      	bne.n	800c0ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c0ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c0b0:	683b      	ldr	r3, [r7, #0]
 800c0b2:	685b      	ldr	r3, [r3, #4]
 800c0b4:	68fa      	ldr	r2, [r7, #12]
 800c0b6:	4313      	orrs	r3, r2
 800c0b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	4a22      	ldr	r2, [pc, #136]	@ (800c148 <TIM_Base_SetConfig+0xe0>)
 800c0be:	4293      	cmp	r3, r2
 800c0c0:	d013      	beq.n	800c0ea <TIM_Base_SetConfig+0x82>
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	4a21      	ldr	r2, [pc, #132]	@ (800c14c <TIM_Base_SetConfig+0xe4>)
 800c0c6:	4293      	cmp	r3, r2
 800c0c8:	d00f      	beq.n	800c0ea <TIM_Base_SetConfig+0x82>
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c0d0:	d00b      	beq.n	800c0ea <TIM_Base_SetConfig+0x82>
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	4a1e      	ldr	r2, [pc, #120]	@ (800c150 <TIM_Base_SetConfig+0xe8>)
 800c0d6:	4293      	cmp	r3, r2
 800c0d8:	d007      	beq.n	800c0ea <TIM_Base_SetConfig+0x82>
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	4a1d      	ldr	r2, [pc, #116]	@ (800c154 <TIM_Base_SetConfig+0xec>)
 800c0de:	4293      	cmp	r3, r2
 800c0e0:	d003      	beq.n	800c0ea <TIM_Base_SetConfig+0x82>
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	4a1c      	ldr	r2, [pc, #112]	@ (800c158 <TIM_Base_SetConfig+0xf0>)
 800c0e6:	4293      	cmp	r3, r2
 800c0e8:	d108      	bne.n	800c0fc <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c0f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c0f2:	683b      	ldr	r3, [r7, #0]
 800c0f4:	68db      	ldr	r3, [r3, #12]
 800c0f6:	68fa      	ldr	r2, [r7, #12]
 800c0f8:	4313      	orrs	r3, r2
 800c0fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	695b      	ldr	r3, [r3, #20]
 800c106:	4313      	orrs	r3, r2
 800c108:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	68fa      	ldr	r2, [r7, #12]
 800c10e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c110:	683b      	ldr	r3, [r7, #0]
 800c112:	689a      	ldr	r2, [r3, #8]
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c118:	683b      	ldr	r3, [r7, #0]
 800c11a:	681a      	ldr	r2, [r3, #0]
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	4a09      	ldr	r2, [pc, #36]	@ (800c148 <TIM_Base_SetConfig+0xe0>)
 800c124:	4293      	cmp	r3, r2
 800c126:	d003      	beq.n	800c130 <TIM_Base_SetConfig+0xc8>
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	4a08      	ldr	r2, [pc, #32]	@ (800c14c <TIM_Base_SetConfig+0xe4>)
 800c12c:	4293      	cmp	r3, r2
 800c12e:	d103      	bne.n	800c138 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	691a      	ldr	r2, [r3, #16]
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	2201      	movs	r2, #1
 800c13c:	615a      	str	r2, [r3, #20]
}
 800c13e:	bf00      	nop
 800c140:	3714      	adds	r7, #20
 800c142:	46bd      	mov	sp, r7
 800c144:	bc80      	pop	{r7}
 800c146:	4770      	bx	lr
 800c148:	40012c00 	.word	0x40012c00
 800c14c:	40013400 	.word	0x40013400
 800c150:	40000400 	.word	0x40000400
 800c154:	40000800 	.word	0x40000800
 800c158:	40000c00 	.word	0x40000c00

0800c15c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c15c:	b480      	push	{r7}
 800c15e:	b087      	sub	sp, #28
 800c160:	af00      	add	r7, sp, #0
 800c162:	60f8      	str	r0, [r7, #12]
 800c164:	60b9      	str	r1, [r7, #8]
 800c166:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	6a1b      	ldr	r3, [r3, #32]
 800c16c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	6a1b      	ldr	r3, [r3, #32]
 800c172:	f023 0201 	bic.w	r2, r3, #1
 800c176:	68fb      	ldr	r3, [r7, #12]
 800c178:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	699b      	ldr	r3, [r3, #24]
 800c17e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c180:	693b      	ldr	r3, [r7, #16]
 800c182:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800c186:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	011b      	lsls	r3, r3, #4
 800c18c:	693a      	ldr	r2, [r7, #16]
 800c18e:	4313      	orrs	r3, r2
 800c190:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c192:	697b      	ldr	r3, [r7, #20]
 800c194:	f023 030a 	bic.w	r3, r3, #10
 800c198:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c19a:	697a      	ldr	r2, [r7, #20]
 800c19c:	68bb      	ldr	r3, [r7, #8]
 800c19e:	4313      	orrs	r3, r2
 800c1a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	693a      	ldr	r2, [r7, #16]
 800c1a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c1a8:	68fb      	ldr	r3, [r7, #12]
 800c1aa:	697a      	ldr	r2, [r7, #20]
 800c1ac:	621a      	str	r2, [r3, #32]
}
 800c1ae:	bf00      	nop
 800c1b0:	371c      	adds	r7, #28
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bc80      	pop	{r7}
 800c1b6:	4770      	bx	lr

0800c1b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c1b8:	b480      	push	{r7}
 800c1ba:	b087      	sub	sp, #28
 800c1bc:	af00      	add	r7, sp, #0
 800c1be:	60f8      	str	r0, [r7, #12]
 800c1c0:	60b9      	str	r1, [r7, #8]
 800c1c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	6a1b      	ldr	r3, [r3, #32]
 800c1c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c1ca:	68fb      	ldr	r3, [r7, #12]
 800c1cc:	6a1b      	ldr	r3, [r3, #32]
 800c1ce:	f023 0210 	bic.w	r2, r3, #16
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c1d6:	68fb      	ldr	r3, [r7, #12]
 800c1d8:	699b      	ldr	r3, [r3, #24]
 800c1da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c1dc:	693b      	ldr	r3, [r7, #16]
 800c1de:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800c1e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	031b      	lsls	r3, r3, #12
 800c1e8:	693a      	ldr	r2, [r7, #16]
 800c1ea:	4313      	orrs	r3, r2
 800c1ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c1ee:	697b      	ldr	r3, [r7, #20]
 800c1f0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800c1f4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c1f6:	68bb      	ldr	r3, [r7, #8]
 800c1f8:	011b      	lsls	r3, r3, #4
 800c1fa:	697a      	ldr	r2, [r7, #20]
 800c1fc:	4313      	orrs	r3, r2
 800c1fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c200:	68fb      	ldr	r3, [r7, #12]
 800c202:	693a      	ldr	r2, [r7, #16]
 800c204:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	697a      	ldr	r2, [r7, #20]
 800c20a:	621a      	str	r2, [r3, #32]
}
 800c20c:	bf00      	nop
 800c20e:	371c      	adds	r7, #28
 800c210:	46bd      	mov	sp, r7
 800c212:	bc80      	pop	{r7}
 800c214:	4770      	bx	lr

0800c216 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c216:	b480      	push	{r7}
 800c218:	b085      	sub	sp, #20
 800c21a:	af00      	add	r7, sp, #0
 800c21c:	6078      	str	r0, [r7, #4]
 800c21e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	689b      	ldr	r3, [r3, #8]
 800c224:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c22c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c22e:	683a      	ldr	r2, [r7, #0]
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	4313      	orrs	r3, r2
 800c234:	f043 0307 	orr.w	r3, r3, #7
 800c238:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	68fa      	ldr	r2, [r7, #12]
 800c23e:	609a      	str	r2, [r3, #8]
}
 800c240:	bf00      	nop
 800c242:	3714      	adds	r7, #20
 800c244:	46bd      	mov	sp, r7
 800c246:	bc80      	pop	{r7}
 800c248:	4770      	bx	lr

0800c24a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c24a:	b480      	push	{r7}
 800c24c:	b087      	sub	sp, #28
 800c24e:	af00      	add	r7, sp, #0
 800c250:	60f8      	str	r0, [r7, #12]
 800c252:	60b9      	str	r1, [r7, #8]
 800c254:	607a      	str	r2, [r7, #4]
 800c256:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c258:	68fb      	ldr	r3, [r7, #12]
 800c25a:	689b      	ldr	r3, [r3, #8]
 800c25c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c25e:	697b      	ldr	r3, [r7, #20]
 800c260:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800c264:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	021a      	lsls	r2, r3, #8
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	431a      	orrs	r2, r3
 800c26e:	68bb      	ldr	r3, [r7, #8]
 800c270:	4313      	orrs	r3, r2
 800c272:	697a      	ldr	r2, [r7, #20]
 800c274:	4313      	orrs	r3, r2
 800c276:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	697a      	ldr	r2, [r7, #20]
 800c27c:	609a      	str	r2, [r3, #8]
}
 800c27e:	bf00      	nop
 800c280:	371c      	adds	r7, #28
 800c282:	46bd      	mov	sp, r7
 800c284:	bc80      	pop	{r7}
 800c286:	4770      	bx	lr

0800c288 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c288:	b480      	push	{r7}
 800c28a:	b085      	sub	sp, #20
 800c28c:	af00      	add	r7, sp, #0
 800c28e:	6078      	str	r0, [r7, #4]
 800c290:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800c298:	2b01      	cmp	r3, #1
 800c29a:	d101      	bne.n	800c2a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c29c:	2302      	movs	r3, #2
 800c29e:	e050      	b.n	800c342 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2201      	movs	r2, #1
 800c2a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c2a8:	687b      	ldr	r3, [r7, #4]
 800c2aa:	2202      	movs	r2, #2
 800c2ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	685b      	ldr	r3, [r3, #4]
 800c2b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	681b      	ldr	r3, [r3, #0]
 800c2bc:	689b      	ldr	r3, [r3, #8]
 800c2be:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c2c0:	68fb      	ldr	r3, [r7, #12]
 800c2c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c2c6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c2c8:	683b      	ldr	r3, [r7, #0]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	68fa      	ldr	r2, [r7, #12]
 800c2ce:	4313      	orrs	r3, r2
 800c2d0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c2d2:	687b      	ldr	r3, [r7, #4]
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	68fa      	ldr	r2, [r7, #12]
 800c2d8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	4a1b      	ldr	r2, [pc, #108]	@ (800c34c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800c2e0:	4293      	cmp	r3, r2
 800c2e2:	d018      	beq.n	800c316 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	4a19      	ldr	r2, [pc, #100]	@ (800c350 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c2ea:	4293      	cmp	r3, r2
 800c2ec:	d013      	beq.n	800c316 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c2f6:	d00e      	beq.n	800c316 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	4a15      	ldr	r2, [pc, #84]	@ (800c354 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c2fe:	4293      	cmp	r3, r2
 800c300:	d009      	beq.n	800c316 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	4a14      	ldr	r2, [pc, #80]	@ (800c358 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800c308:	4293      	cmp	r3, r2
 800c30a:	d004      	beq.n	800c316 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	4a12      	ldr	r2, [pc, #72]	@ (800c35c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800c312:	4293      	cmp	r3, r2
 800c314:	d10c      	bne.n	800c330 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c316:	68bb      	ldr	r3, [r7, #8]
 800c318:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c31c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	685b      	ldr	r3, [r3, #4]
 800c322:	68ba      	ldr	r2, [r7, #8]
 800c324:	4313      	orrs	r3, r2
 800c326:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	68ba      	ldr	r2, [r7, #8]
 800c32e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	2201      	movs	r2, #1
 800c334:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2200      	movs	r2, #0
 800c33c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800c340:	2300      	movs	r3, #0
}
 800c342:	4618      	mov	r0, r3
 800c344:	3714      	adds	r7, #20
 800c346:	46bd      	mov	sp, r7
 800c348:	bc80      	pop	{r7}
 800c34a:	4770      	bx	lr
 800c34c:	40012c00 	.word	0x40012c00
 800c350:	40013400 	.word	0x40013400
 800c354:	40000400 	.word	0x40000400
 800c358:	40000800 	.word	0x40000800
 800c35c:	40000c00 	.word	0x40000c00

0800c360 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c360:	b480      	push	{r7}
 800c362:	b083      	sub	sp, #12
 800c364:	af00      	add	r7, sp, #0
 800c366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c368:	bf00      	nop
 800c36a:	370c      	adds	r7, #12
 800c36c:	46bd      	mov	sp, r7
 800c36e:	bc80      	pop	{r7}
 800c370:	4770      	bx	lr

0800c372 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c372:	b480      	push	{r7}
 800c374:	b083      	sub	sp, #12
 800c376:	af00      	add	r7, sp, #0
 800c378:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c37a:	bf00      	nop
 800c37c:	370c      	adds	r7, #12
 800c37e:	46bd      	mov	sp, r7
 800c380:	bc80      	pop	{r7}
 800c382:	4770      	bx	lr

0800c384 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b082      	sub	sp, #8
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d101      	bne.n	800c396 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c392:	2301      	movs	r3, #1
 800c394:	e042      	b.n	800c41c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c39c:	b2db      	uxtb	r3, r3
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d106      	bne.n	800c3b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	2200      	movs	r2, #0
 800c3a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c3aa:	6878      	ldr	r0, [r7, #4]
 800c3ac:	f7fc fe16 	bl	8008fdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	2224      	movs	r2, #36	@ 0x24
 800c3b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	68da      	ldr	r2, [r3, #12]
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c3c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c3c8:	6878      	ldr	r0, [r7, #4]
 800c3ca:	f000 fcb5 	bl	800cd38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	681b      	ldr	r3, [r3, #0]
 800c3d2:	691a      	ldr	r2, [r3, #16]
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c3dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	695a      	ldr	r2, [r3, #20]
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c3ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	68da      	ldr	r2, [r3, #12]
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800c3fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	2200      	movs	r2, #0
 800c402:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2220      	movs	r2, #32
 800c408:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	2220      	movs	r2, #32
 800c410:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2200      	movs	r2, #0
 800c418:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800c41a:	2300      	movs	r3, #0
}
 800c41c:	4618      	mov	r0, r3
 800c41e:	3708      	adds	r7, #8
 800c420:	46bd      	mov	sp, r7
 800c422:	bd80      	pop	{r7, pc}

0800c424 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c424:	b480      	push	{r7}
 800c426:	b085      	sub	sp, #20
 800c428:	af00      	add	r7, sp, #0
 800c42a:	60f8      	str	r0, [r7, #12]
 800c42c:	60b9      	str	r1, [r7, #8]
 800c42e:	4613      	mov	r3, r2
 800c430:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800c438:	b2db      	uxtb	r3, r3
 800c43a:	2b20      	cmp	r3, #32
 800c43c:	d121      	bne.n	800c482 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c43e:	68bb      	ldr	r3, [r7, #8]
 800c440:	2b00      	cmp	r3, #0
 800c442:	d002      	beq.n	800c44a <HAL_UART_Transmit_IT+0x26>
 800c444:	88fb      	ldrh	r3, [r7, #6]
 800c446:	2b00      	cmp	r3, #0
 800c448:	d101      	bne.n	800c44e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800c44a:	2301      	movs	r3, #1
 800c44c:	e01a      	b.n	800c484 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	68ba      	ldr	r2, [r7, #8]
 800c452:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	88fa      	ldrh	r2, [r7, #6]
 800c458:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	88fa      	ldrh	r2, [r7, #6]
 800c45e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	2200      	movs	r2, #0
 800c464:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	2221      	movs	r2, #33	@ 0x21
 800c46a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	68da      	ldr	r2, [r3, #12]
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	681b      	ldr	r3, [r3, #0]
 800c478:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800c47c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800c47e:	2300      	movs	r3, #0
 800c480:	e000      	b.n	800c484 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800c482:	2302      	movs	r3, #2
  }
}
 800c484:	4618      	mov	r0, r3
 800c486:	3714      	adds	r7, #20
 800c488:	46bd      	mov	sp, r7
 800c48a:	bc80      	pop	{r7}
 800c48c:	4770      	bx	lr
	...

0800c490 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c490:	b580      	push	{r7, lr}
 800c492:	b0ba      	sub	sp, #232	@ 0xe8
 800c494:	af00      	add	r7, sp, #0
 800c496:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	681b      	ldr	r3, [r3, #0]
 800c4a6:	68db      	ldr	r3, [r3, #12]
 800c4a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	695b      	ldr	r3, [r3, #20]
 800c4b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800c4bc:	2300      	movs	r3, #0
 800c4be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c4c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c4c6:	f003 030f 	and.w	r3, r3, #15
 800c4ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800c4ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d10f      	bne.n	800c4f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c4d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c4da:	f003 0320 	and.w	r3, r3, #32
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d009      	beq.n	800c4f6 <HAL_UART_IRQHandler+0x66>
 800c4e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c4e6:	f003 0320 	and.w	r3, r3, #32
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	d003      	beq.n	800c4f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c4ee:	6878      	ldr	r0, [r7, #4]
 800c4f0:	f000 fb63 	bl	800cbba <UART_Receive_IT>
      return;
 800c4f4:	e25b      	b.n	800c9ae <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c4f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	f000 80de 	beq.w	800c6bc <HAL_UART_IRQHandler+0x22c>
 800c500:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c504:	f003 0301 	and.w	r3, r3, #1
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d106      	bne.n	800c51a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c50c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c510:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800c514:	2b00      	cmp	r3, #0
 800c516:	f000 80d1 	beq.w	800c6bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c51a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c51e:	f003 0301 	and.w	r3, r3, #1
 800c522:	2b00      	cmp	r3, #0
 800c524:	d00b      	beq.n	800c53e <HAL_UART_IRQHandler+0xae>
 800c526:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c52a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d005      	beq.n	800c53e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c536:	f043 0201 	orr.w	r2, r3, #1
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c53e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c542:	f003 0304 	and.w	r3, r3, #4
 800c546:	2b00      	cmp	r3, #0
 800c548:	d00b      	beq.n	800c562 <HAL_UART_IRQHandler+0xd2>
 800c54a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c54e:	f003 0301 	and.w	r3, r3, #1
 800c552:	2b00      	cmp	r3, #0
 800c554:	d005      	beq.n	800c562 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c55a:	f043 0202 	orr.w	r2, r3, #2
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c566:	f003 0302 	and.w	r3, r3, #2
 800c56a:	2b00      	cmp	r3, #0
 800c56c:	d00b      	beq.n	800c586 <HAL_UART_IRQHandler+0xf6>
 800c56e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c572:	f003 0301 	and.w	r3, r3, #1
 800c576:	2b00      	cmp	r3, #0
 800c578:	d005      	beq.n	800c586 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c57e:	f043 0204 	orr.w	r2, r3, #4
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c586:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c58a:	f003 0308 	and.w	r3, r3, #8
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d011      	beq.n	800c5b6 <HAL_UART_IRQHandler+0x126>
 800c592:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c596:	f003 0320 	and.w	r3, r3, #32
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d105      	bne.n	800c5aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c59e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800c5a2:	f003 0301 	and.w	r3, r3, #1
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d005      	beq.n	800c5b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c5ae:	f043 0208 	orr.w	r2, r3, #8
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	f000 81f2 	beq.w	800c9a4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c5c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c5c4:	f003 0320 	and.w	r3, r3, #32
 800c5c8:	2b00      	cmp	r3, #0
 800c5ca:	d008      	beq.n	800c5de <HAL_UART_IRQHandler+0x14e>
 800c5cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c5d0:	f003 0320 	and.w	r3, r3, #32
 800c5d4:	2b00      	cmp	r3, #0
 800c5d6:	d002      	beq.n	800c5de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c5d8:	6878      	ldr	r0, [r7, #4]
 800c5da:	f000 faee 	bl	800cbba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	695b      	ldr	r3, [r3, #20]
 800c5e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	bf14      	ite	ne
 800c5ec:	2301      	movne	r3, #1
 800c5ee:	2300      	moveq	r3, #0
 800c5f0:	b2db      	uxtb	r3, r3
 800c5f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c5fa:	f003 0308 	and.w	r3, r3, #8
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	d103      	bne.n	800c60a <HAL_UART_IRQHandler+0x17a>
 800c602:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800c606:	2b00      	cmp	r3, #0
 800c608:	d04f      	beq.n	800c6aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c60a:	6878      	ldr	r0, [r7, #4]
 800c60c:	f000 f9f8 	bl	800ca00 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	681b      	ldr	r3, [r3, #0]
 800c614:	695b      	ldr	r3, [r3, #20]
 800c616:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d041      	beq.n	800c6a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	3314      	adds	r3, #20
 800c624:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c628:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800c62c:	e853 3f00 	ldrex	r3, [r3]
 800c630:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800c634:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800c638:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c63c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	3314      	adds	r3, #20
 800c646:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800c64a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800c64e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c652:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800c656:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800c65a:	e841 2300 	strex	r3, r2, [r1]
 800c65e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800c662:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800c666:	2b00      	cmp	r3, #0
 800c668:	d1d9      	bne.n	800c61e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d013      	beq.n	800c69a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c676:	4a7e      	ldr	r2, [pc, #504]	@ (800c870 <HAL_UART_IRQHandler+0x3e0>)
 800c678:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c67e:	4618      	mov	r0, r3
 800c680:	f7fd f86c 	bl	800975c <HAL_DMA_Abort_IT>
 800c684:	4603      	mov	r3, r0
 800c686:	2b00      	cmp	r3, #0
 800c688:	d016      	beq.n	800c6b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c68e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c690:	687a      	ldr	r2, [r7, #4]
 800c692:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800c694:	4610      	mov	r0, r2
 800c696:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c698:	e00e      	b.n	800c6b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c69a:	6878      	ldr	r0, [r7, #4]
 800c69c:	f000 f99c 	bl	800c9d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6a0:	e00a      	b.n	800c6b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c6a2:	6878      	ldr	r0, [r7, #4]
 800c6a4:	f000 f998 	bl	800c9d8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6a8:	e006      	b.n	800c6b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c6aa:	6878      	ldr	r0, [r7, #4]
 800c6ac:	f000 f994 	bl	800c9d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800c6b6:	e175      	b.n	800c9a4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6b8:	bf00      	nop
    return;
 800c6ba:	e173      	b.n	800c9a4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6c0:	2b01      	cmp	r3, #1
 800c6c2:	f040 814f 	bne.w	800c964 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c6c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c6ca:	f003 0310 	and.w	r3, r3, #16
 800c6ce:	2b00      	cmp	r3, #0
 800c6d0:	f000 8148 	beq.w	800c964 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c6d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c6d8:	f003 0310 	and.w	r3, r3, #16
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	f000 8141 	beq.w	800c964 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	60bb      	str	r3, [r7, #8]
 800c6e6:	687b      	ldr	r3, [r7, #4]
 800c6e8:	681b      	ldr	r3, [r3, #0]
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	60bb      	str	r3, [r7, #8]
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	685b      	ldr	r3, [r3, #4]
 800c6f4:	60bb      	str	r3, [r7, #8]
 800c6f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	681b      	ldr	r3, [r3, #0]
 800c6fc:	695b      	ldr	r3, [r3, #20]
 800c6fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c702:	2b00      	cmp	r3, #0
 800c704:	f000 80b6 	beq.w	800c874 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	685b      	ldr	r3, [r3, #4]
 800c710:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c714:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800c718:	2b00      	cmp	r3, #0
 800c71a:	f000 8145 	beq.w	800c9a8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800c722:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c726:	429a      	cmp	r2, r3
 800c728:	f080 813e 	bcs.w	800c9a8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800c732:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c738:	699b      	ldr	r3, [r3, #24]
 800c73a:	2b20      	cmp	r3, #32
 800c73c:	f000 8088 	beq.w	800c850 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	681b      	ldr	r3, [r3, #0]
 800c744:	330c      	adds	r3, #12
 800c746:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c74a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800c74e:	e853 3f00 	ldrex	r3, [r3]
 800c752:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800c756:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800c75a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c75e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	330c      	adds	r3, #12
 800c768:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800c76c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800c770:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c774:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800c778:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800c77c:	e841 2300 	strex	r3, r2, [r1]
 800c780:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800c784:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d1d9      	bne.n	800c740 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	3314      	adds	r3, #20
 800c792:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c794:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800c796:	e853 3f00 	ldrex	r3, [r3]
 800c79a:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800c79c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800c79e:	f023 0301 	bic.w	r3, r3, #1
 800c7a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	3314      	adds	r3, #20
 800c7ac:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800c7b0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800c7b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7b6:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800c7b8:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800c7bc:	e841 2300 	strex	r3, r2, [r1]
 800c7c0:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800c7c2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800c7c4:	2b00      	cmp	r3, #0
 800c7c6:	d1e1      	bne.n	800c78c <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	3314      	adds	r3, #20
 800c7ce:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800c7d2:	e853 3f00 	ldrex	r3, [r3]
 800c7d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800c7d8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800c7da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800c7de:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800c7e2:	687b      	ldr	r3, [r7, #4]
 800c7e4:	681b      	ldr	r3, [r3, #0]
 800c7e6:	3314      	adds	r3, #20
 800c7e8:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800c7ec:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800c7ee:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7f0:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800c7f2:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800c7f4:	e841 2300 	strex	r3, r2, [r1]
 800c7f8:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800c7fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d1e3      	bne.n	800c7c8 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	2220      	movs	r2, #32
 800c804:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	2200      	movs	r2, #0
 800c80c:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	330c      	adds	r3, #12
 800c814:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c816:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c818:	e853 3f00 	ldrex	r3, [r3]
 800c81c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800c81e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800c820:	f023 0310 	bic.w	r3, r3, #16
 800c824:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	330c      	adds	r3, #12
 800c82e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800c832:	65ba      	str	r2, [r7, #88]	@ 0x58
 800c834:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c836:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800c838:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800c83a:	e841 2300 	strex	r3, r2, [r1]
 800c83e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800c840:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c842:	2b00      	cmp	r3, #0
 800c844:	d1e3      	bne.n	800c80e <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c84a:	4618      	mov	r0, r3
 800c84c:	f7fc ff4b 	bl	80096e6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2202      	movs	r2, #2
 800c854:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c85e:	b29b      	uxth	r3, r3
 800c860:	1ad3      	subs	r3, r2, r3
 800c862:	b29b      	uxth	r3, r3
 800c864:	4619      	mov	r1, r3
 800c866:	6878      	ldr	r0, [r7, #4]
 800c868:	f000 f8bf 	bl	800c9ea <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c86c:	e09c      	b.n	800c9a8 <HAL_UART_IRQHandler+0x518>
 800c86e:	bf00      	nop
 800c870:	0800cac5 	.word	0x0800cac5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c87c:	b29b      	uxth	r3, r3
 800c87e:	1ad3      	subs	r3, r2, r3
 800c880:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800c888:	b29b      	uxth	r3, r3
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	f000 808e 	beq.w	800c9ac <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800c890:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c894:	2b00      	cmp	r3, #0
 800c896:	f000 8089 	beq.w	800c9ac <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	330c      	adds	r3, #12
 800c8a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c8a4:	e853 3f00 	ldrex	r3, [r3]
 800c8a8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c8aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c8ac:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c8b0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	330c      	adds	r3, #12
 800c8ba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800c8be:	647a      	str	r2, [r7, #68]	@ 0x44
 800c8c0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8c2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c8c4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c8c6:	e841 2300 	strex	r3, r2, [r1]
 800c8ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c8cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d1e3      	bne.n	800c89a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	3314      	adds	r3, #20
 800c8d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8dc:	e853 3f00 	ldrex	r3, [r3]
 800c8e0:	623b      	str	r3, [r7, #32]
   return(result);
 800c8e2:	6a3b      	ldr	r3, [r7, #32]
 800c8e4:	f023 0301 	bic.w	r3, r3, #1
 800c8e8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	3314      	adds	r3, #20
 800c8f2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800c8f6:	633a      	str	r2, [r7, #48]	@ 0x30
 800c8f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c8fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c8fe:	e841 2300 	strex	r3, r2, [r1]
 800c902:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c906:	2b00      	cmp	r3, #0
 800c908:	d1e3      	bne.n	800c8d2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	2220      	movs	r2, #32
 800c90e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	2200      	movs	r2, #0
 800c916:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	330c      	adds	r3, #12
 800c91e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c920:	693b      	ldr	r3, [r7, #16]
 800c922:	e853 3f00 	ldrex	r3, [r3]
 800c926:	60fb      	str	r3, [r7, #12]
   return(result);
 800c928:	68fb      	ldr	r3, [r7, #12]
 800c92a:	f023 0310 	bic.w	r3, r3, #16
 800c92e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	330c      	adds	r3, #12
 800c938:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800c93c:	61fa      	str	r2, [r7, #28]
 800c93e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c940:	69b9      	ldr	r1, [r7, #24]
 800c942:	69fa      	ldr	r2, [r7, #28]
 800c944:	e841 2300 	strex	r3, r2, [r1]
 800c948:	617b      	str	r3, [r7, #20]
   return(result);
 800c94a:	697b      	ldr	r3, [r7, #20]
 800c94c:	2b00      	cmp	r3, #0
 800c94e:	d1e3      	bne.n	800c918 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2202      	movs	r2, #2
 800c954:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c956:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800c95a:	4619      	mov	r1, r3
 800c95c:	6878      	ldr	r0, [r7, #4]
 800c95e:	f000 f844 	bl	800c9ea <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c962:	e023      	b.n	800c9ac <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c968:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d009      	beq.n	800c984 <HAL_UART_IRQHandler+0x4f4>
 800c970:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c974:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c978:	2b00      	cmp	r3, #0
 800c97a:	d003      	beq.n	800c984 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800c97c:	6878      	ldr	r0, [r7, #4]
 800c97e:	f000 f8b5 	bl	800caec <UART_Transmit_IT>
    return;
 800c982:	e014      	b.n	800c9ae <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800c988:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d00e      	beq.n	800c9ae <HAL_UART_IRQHandler+0x51e>
 800c990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800c994:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d008      	beq.n	800c9ae <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800c99c:	6878      	ldr	r0, [r7, #4]
 800c99e:	f000 f8f4 	bl	800cb8a <UART_EndTransmit_IT>
    return;
 800c9a2:	e004      	b.n	800c9ae <HAL_UART_IRQHandler+0x51e>
    return;
 800c9a4:	bf00      	nop
 800c9a6:	e002      	b.n	800c9ae <HAL_UART_IRQHandler+0x51e>
      return;
 800c9a8:	bf00      	nop
 800c9aa:	e000      	b.n	800c9ae <HAL_UART_IRQHandler+0x51e>
      return;
 800c9ac:	bf00      	nop
  }
}
 800c9ae:	37e8      	adds	r7, #232	@ 0xe8
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	bd80      	pop	{r7, pc}

0800c9b4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c9b4:	b480      	push	{r7}
 800c9b6:	b083      	sub	sp, #12
 800c9b8:	af00      	add	r7, sp, #0
 800c9ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c9bc:	bf00      	nop
 800c9be:	370c      	adds	r7, #12
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	bc80      	pop	{r7}
 800c9c4:	4770      	bx	lr

0800c9c6 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c9c6:	b480      	push	{r7}
 800c9c8:	b083      	sub	sp, #12
 800c9ca:	af00      	add	r7, sp, #0
 800c9cc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800c9ce:	bf00      	nop
 800c9d0:	370c      	adds	r7, #12
 800c9d2:	46bd      	mov	sp, r7
 800c9d4:	bc80      	pop	{r7}
 800c9d6:	4770      	bx	lr

0800c9d8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c9d8:	b480      	push	{r7}
 800c9da:	b083      	sub	sp, #12
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c9e0:	bf00      	nop
 800c9e2:	370c      	adds	r7, #12
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	bc80      	pop	{r7}
 800c9e8:	4770      	bx	lr

0800c9ea <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c9ea:	b480      	push	{r7}
 800c9ec:	b083      	sub	sp, #12
 800c9ee:	af00      	add	r7, sp, #0
 800c9f0:	6078      	str	r0, [r7, #4]
 800c9f2:	460b      	mov	r3, r1
 800c9f4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c9f6:	bf00      	nop
 800c9f8:	370c      	adds	r7, #12
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bc80      	pop	{r7}
 800c9fe:	4770      	bx	lr

0800ca00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800ca00:	b480      	push	{r7}
 800ca02:	b095      	sub	sp, #84	@ 0x54
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	330c      	adds	r3, #12
 800ca0e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ca12:	e853 3f00 	ldrex	r3, [r3]
 800ca16:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800ca18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ca1a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800ca1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	330c      	adds	r3, #12
 800ca26:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800ca28:	643a      	str	r2, [r7, #64]	@ 0x40
 800ca2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca2c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ca2e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ca30:	e841 2300 	strex	r3, r2, [r1]
 800ca34:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800ca36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	d1e5      	bne.n	800ca08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	3314      	adds	r3, #20
 800ca42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca44:	6a3b      	ldr	r3, [r7, #32]
 800ca46:	e853 3f00 	ldrex	r3, [r3]
 800ca4a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ca4c:	69fb      	ldr	r3, [r7, #28]
 800ca4e:	f023 0301 	bic.w	r3, r3, #1
 800ca52:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	3314      	adds	r3, #20
 800ca5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ca5c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ca5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ca62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ca64:	e841 2300 	strex	r3, r2, [r1]
 800ca68:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800ca6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d1e5      	bne.n	800ca3c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ca70:	687b      	ldr	r3, [r7, #4]
 800ca72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca74:	2b01      	cmp	r3, #1
 800ca76:	d119      	bne.n	800caac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	330c      	adds	r3, #12
 800ca7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	e853 3f00 	ldrex	r3, [r3]
 800ca86:	60bb      	str	r3, [r7, #8]
   return(result);
 800ca88:	68bb      	ldr	r3, [r7, #8]
 800ca8a:	f023 0310 	bic.w	r3, r3, #16
 800ca8e:	647b      	str	r3, [r7, #68]	@ 0x44
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	330c      	adds	r3, #12
 800ca96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800ca98:	61ba      	str	r2, [r7, #24]
 800ca9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca9c:	6979      	ldr	r1, [r7, #20]
 800ca9e:	69ba      	ldr	r2, [r7, #24]
 800caa0:	e841 2300 	strex	r3, r2, [r1]
 800caa4:	613b      	str	r3, [r7, #16]
   return(result);
 800caa6:	693b      	ldr	r3, [r7, #16]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d1e5      	bne.n	800ca78 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	2220      	movs	r2, #32
 800cab0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2200      	movs	r2, #0
 800cab8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800caba:	bf00      	nop
 800cabc:	3754      	adds	r7, #84	@ 0x54
 800cabe:	46bd      	mov	sp, r7
 800cac0:	bc80      	pop	{r7}
 800cac2:	4770      	bx	lr

0800cac4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cac4:	b580      	push	{r7, lr}
 800cac6:	b084      	sub	sp, #16
 800cac8:	af00      	add	r7, sp, #0
 800caca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cad0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800cad2:	68fb      	ldr	r3, [r7, #12]
 800cad4:	2200      	movs	r2, #0
 800cad6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800cad8:	68fb      	ldr	r3, [r7, #12]
 800cada:	2200      	movs	r2, #0
 800cadc:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cade:	68f8      	ldr	r0, [r7, #12]
 800cae0:	f7ff ff7a 	bl	800c9d8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cae4:	bf00      	nop
 800cae6:	3710      	adds	r7, #16
 800cae8:	46bd      	mov	sp, r7
 800caea:	bd80      	pop	{r7, pc}

0800caec <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800caec:	b480      	push	{r7}
 800caee:	b085      	sub	sp, #20
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800cafa:	b2db      	uxtb	r3, r3
 800cafc:	2b21      	cmp	r3, #33	@ 0x21
 800cafe:	d13e      	bne.n	800cb7e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	689b      	ldr	r3, [r3, #8]
 800cb04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cb08:	d114      	bne.n	800cb34 <UART_Transmit_IT+0x48>
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	691b      	ldr	r3, [r3, #16]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d110      	bne.n	800cb34 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	6a1b      	ldr	r3, [r3, #32]
 800cb16:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	881b      	ldrh	r3, [r3, #0]
 800cb1c:	461a      	mov	r2, r3
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cb26:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	6a1b      	ldr	r3, [r3, #32]
 800cb2c:	1c9a      	adds	r2, r3, #2
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	621a      	str	r2, [r3, #32]
 800cb32:	e008      	b.n	800cb46 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800cb34:	687b      	ldr	r3, [r7, #4]
 800cb36:	6a1b      	ldr	r3, [r3, #32]
 800cb38:	1c59      	adds	r1, r3, #1
 800cb3a:	687a      	ldr	r2, [r7, #4]
 800cb3c:	6211      	str	r1, [r2, #32]
 800cb3e:	781a      	ldrb	r2, [r3, #0]
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800cb4a:	b29b      	uxth	r3, r3
 800cb4c:	3b01      	subs	r3, #1
 800cb4e:	b29b      	uxth	r3, r3
 800cb50:	687a      	ldr	r2, [r7, #4]
 800cb52:	4619      	mov	r1, r3
 800cb54:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d10f      	bne.n	800cb7a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	681b      	ldr	r3, [r3, #0]
 800cb5e:	68da      	ldr	r2, [r3, #12]
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	681b      	ldr	r3, [r3, #0]
 800cb64:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800cb68:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	68da      	ldr	r2, [r3, #12]
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	681b      	ldr	r3, [r3, #0]
 800cb74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800cb78:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800cb7a:	2300      	movs	r3, #0
 800cb7c:	e000      	b.n	800cb80 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800cb7e:	2302      	movs	r3, #2
  }
}
 800cb80:	4618      	mov	r0, r3
 800cb82:	3714      	adds	r7, #20
 800cb84:	46bd      	mov	sp, r7
 800cb86:	bc80      	pop	{r7}
 800cb88:	4770      	bx	lr

0800cb8a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cb8a:	b580      	push	{r7, lr}
 800cb8c:	b082      	sub	sp, #8
 800cb8e:	af00      	add	r7, sp, #0
 800cb90:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	681b      	ldr	r3, [r3, #0]
 800cb96:	68da      	ldr	r2, [r3, #12]
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800cba0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	2220      	movs	r2, #32
 800cba6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cbaa:	6878      	ldr	r0, [r7, #4]
 800cbac:	f7ff ff02 	bl	800c9b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800cbb0:	2300      	movs	r3, #0
}
 800cbb2:	4618      	mov	r0, r3
 800cbb4:	3708      	adds	r7, #8
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	bd80      	pop	{r7, pc}

0800cbba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800cbba:	b580      	push	{r7, lr}
 800cbbc:	b08c      	sub	sp, #48	@ 0x30
 800cbbe:	af00      	add	r7, sp, #0
 800cbc0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800cbc8:	b2db      	uxtb	r3, r3
 800cbca:	2b22      	cmp	r3, #34	@ 0x22
 800cbcc:	f040 80ae 	bne.w	800cd2c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	689b      	ldr	r3, [r3, #8]
 800cbd4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cbd8:	d117      	bne.n	800cc0a <UART_Receive_IT+0x50>
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	691b      	ldr	r3, [r3, #16]
 800cbde:	2b00      	cmp	r3, #0
 800cbe0:	d113      	bne.n	800cc0a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cbea:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	685b      	ldr	r3, [r3, #4]
 800cbf2:	b29b      	uxth	r3, r3
 800cbf4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cbf8:	b29a      	uxth	r2, r3
 800cbfa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cbfc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc02:	1c9a      	adds	r2, r3, #2
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	629a      	str	r2, [r3, #40]	@ 0x28
 800cc08:	e026      	b.n	800cc58 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800cc10:	2300      	movs	r3, #0
 800cc12:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	689b      	ldr	r3, [r3, #8]
 800cc18:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800cc1c:	d007      	beq.n	800cc2e <UART_Receive_IT+0x74>
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	689b      	ldr	r3, [r3, #8]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d10a      	bne.n	800cc3c <UART_Receive_IT+0x82>
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	691b      	ldr	r3, [r3, #16]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d106      	bne.n	800cc3c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	685b      	ldr	r3, [r3, #4]
 800cc34:	b2da      	uxtb	r2, r3
 800cc36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc38:	701a      	strb	r2, [r3, #0]
 800cc3a:	e008      	b.n	800cc4e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	685b      	ldr	r3, [r3, #4]
 800cc42:	b2db      	uxtb	r3, r3
 800cc44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cc48:	b2da      	uxtb	r2, r3
 800cc4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cc4c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cc52:	1c5a      	adds	r2, r3, #1
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800cc5c:	b29b      	uxth	r3, r3
 800cc5e:	3b01      	subs	r3, #1
 800cc60:	b29b      	uxth	r3, r3
 800cc62:	687a      	ldr	r2, [r7, #4]
 800cc64:	4619      	mov	r1, r3
 800cc66:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d15d      	bne.n	800cd28 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	68da      	ldr	r2, [r3, #12]
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	681b      	ldr	r3, [r3, #0]
 800cc76:	f022 0220 	bic.w	r2, r2, #32
 800cc7a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	68da      	ldr	r2, [r3, #12]
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800cc8a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	681b      	ldr	r3, [r3, #0]
 800cc90:	695a      	ldr	r2, [r3, #20]
 800cc92:	687b      	ldr	r3, [r7, #4]
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	f022 0201 	bic.w	r2, r2, #1
 800cc9a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2220      	movs	r2, #32
 800cca0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	2200      	movs	r2, #0
 800cca8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ccae:	2b01      	cmp	r3, #1
 800ccb0:	d135      	bne.n	800cd1e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ccb2:	687b      	ldr	r3, [r7, #4]
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	330c      	adds	r3, #12
 800ccbe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccc0:	697b      	ldr	r3, [r7, #20]
 800ccc2:	e853 3f00 	ldrex	r3, [r3]
 800ccc6:	613b      	str	r3, [r7, #16]
   return(result);
 800ccc8:	693b      	ldr	r3, [r7, #16]
 800ccca:	f023 0310 	bic.w	r3, r3, #16
 800ccce:	627b      	str	r3, [r7, #36]	@ 0x24
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	681b      	ldr	r3, [r3, #0]
 800ccd4:	330c      	adds	r3, #12
 800ccd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ccd8:	623a      	str	r2, [r7, #32]
 800ccda:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccdc:	69f9      	ldr	r1, [r7, #28]
 800ccde:	6a3a      	ldr	r2, [r7, #32]
 800cce0:	e841 2300 	strex	r3, r2, [r1]
 800cce4:	61bb      	str	r3, [r7, #24]
   return(result);
 800cce6:	69bb      	ldr	r3, [r7, #24]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d1e5      	bne.n	800ccb8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	681b      	ldr	r3, [r3, #0]
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	f003 0310 	and.w	r3, r3, #16
 800ccf6:	2b10      	cmp	r3, #16
 800ccf8:	d10a      	bne.n	800cd10 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	60fb      	str	r3, [r7, #12]
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	681b      	ldr	r3, [r3, #0]
 800cd04:	60fb      	str	r3, [r7, #12]
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	685b      	ldr	r3, [r3, #4]
 800cd0c:	60fb      	str	r3, [r7, #12]
 800cd0e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cd10:	687b      	ldr	r3, [r7, #4]
 800cd12:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800cd14:	4619      	mov	r1, r3
 800cd16:	6878      	ldr	r0, [r7, #4]
 800cd18:	f7ff fe67 	bl	800c9ea <HAL_UARTEx_RxEventCallback>
 800cd1c:	e002      	b.n	800cd24 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cd1e:	6878      	ldr	r0, [r7, #4]
 800cd20:	f7ff fe51 	bl	800c9c6 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800cd24:	2300      	movs	r3, #0
 800cd26:	e002      	b.n	800cd2e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800cd28:	2300      	movs	r3, #0
 800cd2a:	e000      	b.n	800cd2e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800cd2c:	2302      	movs	r3, #2
  }
}
 800cd2e:	4618      	mov	r0, r3
 800cd30:	3730      	adds	r7, #48	@ 0x30
 800cd32:	46bd      	mov	sp, r7
 800cd34:	bd80      	pop	{r7, pc}
	...

0800cd38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cd38:	b580      	push	{r7, lr}
 800cd3a:	b084      	sub	sp, #16
 800cd3c:	af00      	add	r7, sp, #0
 800cd3e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	691b      	ldr	r3, [r3, #16]
 800cd46:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	68da      	ldr	r2, [r3, #12]
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	430a      	orrs	r2, r1
 800cd54:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	689a      	ldr	r2, [r3, #8]
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	691b      	ldr	r3, [r3, #16]
 800cd5e:	431a      	orrs	r2, r3
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	695b      	ldr	r3, [r3, #20]
 800cd64:	4313      	orrs	r3, r2
 800cd66:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	68db      	ldr	r3, [r3, #12]
 800cd6e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800cd72:	f023 030c 	bic.w	r3, r3, #12
 800cd76:	687a      	ldr	r2, [r7, #4]
 800cd78:	6812      	ldr	r2, [r2, #0]
 800cd7a:	68b9      	ldr	r1, [r7, #8]
 800cd7c:	430b      	orrs	r3, r1
 800cd7e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	681b      	ldr	r3, [r3, #0]
 800cd84:	695b      	ldr	r3, [r3, #20]
 800cd86:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	699a      	ldr	r2, [r3, #24]
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	681b      	ldr	r3, [r3, #0]
 800cd92:	430a      	orrs	r2, r1
 800cd94:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	681b      	ldr	r3, [r3, #0]
 800cd9a:	4a2c      	ldr	r2, [pc, #176]	@ (800ce4c <UART_SetConfig+0x114>)
 800cd9c:	4293      	cmp	r3, r2
 800cd9e:	d103      	bne.n	800cda8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800cda0:	f7fe fe8c 	bl	800babc <HAL_RCC_GetPCLK2Freq>
 800cda4:	60f8      	str	r0, [r7, #12]
 800cda6:	e002      	b.n	800cdae <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800cda8:	f7fe fe74 	bl	800ba94 <HAL_RCC_GetPCLK1Freq>
 800cdac:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cdae:	68fa      	ldr	r2, [r7, #12]
 800cdb0:	4613      	mov	r3, r2
 800cdb2:	009b      	lsls	r3, r3, #2
 800cdb4:	4413      	add	r3, r2
 800cdb6:	009a      	lsls	r2, r3, #2
 800cdb8:	441a      	add	r2, r3
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	685b      	ldr	r3, [r3, #4]
 800cdbe:	009b      	lsls	r3, r3, #2
 800cdc0:	fbb2 f3f3 	udiv	r3, r2, r3
 800cdc4:	4a22      	ldr	r2, [pc, #136]	@ (800ce50 <UART_SetConfig+0x118>)
 800cdc6:	fba2 2303 	umull	r2, r3, r2, r3
 800cdca:	095b      	lsrs	r3, r3, #5
 800cdcc:	0119      	lsls	r1, r3, #4
 800cdce:	68fa      	ldr	r2, [r7, #12]
 800cdd0:	4613      	mov	r3, r2
 800cdd2:	009b      	lsls	r3, r3, #2
 800cdd4:	4413      	add	r3, r2
 800cdd6:	009a      	lsls	r2, r3, #2
 800cdd8:	441a      	add	r2, r3
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	685b      	ldr	r3, [r3, #4]
 800cdde:	009b      	lsls	r3, r3, #2
 800cde0:	fbb2 f2f3 	udiv	r2, r2, r3
 800cde4:	4b1a      	ldr	r3, [pc, #104]	@ (800ce50 <UART_SetConfig+0x118>)
 800cde6:	fba3 0302 	umull	r0, r3, r3, r2
 800cdea:	095b      	lsrs	r3, r3, #5
 800cdec:	2064      	movs	r0, #100	@ 0x64
 800cdee:	fb00 f303 	mul.w	r3, r0, r3
 800cdf2:	1ad3      	subs	r3, r2, r3
 800cdf4:	011b      	lsls	r3, r3, #4
 800cdf6:	3332      	adds	r3, #50	@ 0x32
 800cdf8:	4a15      	ldr	r2, [pc, #84]	@ (800ce50 <UART_SetConfig+0x118>)
 800cdfa:	fba2 2303 	umull	r2, r3, r2, r3
 800cdfe:	095b      	lsrs	r3, r3, #5
 800ce00:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800ce04:	4419      	add	r1, r3
 800ce06:	68fa      	ldr	r2, [r7, #12]
 800ce08:	4613      	mov	r3, r2
 800ce0a:	009b      	lsls	r3, r3, #2
 800ce0c:	4413      	add	r3, r2
 800ce0e:	009a      	lsls	r2, r3, #2
 800ce10:	441a      	add	r2, r3
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	685b      	ldr	r3, [r3, #4]
 800ce16:	009b      	lsls	r3, r3, #2
 800ce18:	fbb2 f2f3 	udiv	r2, r2, r3
 800ce1c:	4b0c      	ldr	r3, [pc, #48]	@ (800ce50 <UART_SetConfig+0x118>)
 800ce1e:	fba3 0302 	umull	r0, r3, r3, r2
 800ce22:	095b      	lsrs	r3, r3, #5
 800ce24:	2064      	movs	r0, #100	@ 0x64
 800ce26:	fb00 f303 	mul.w	r3, r0, r3
 800ce2a:	1ad3      	subs	r3, r2, r3
 800ce2c:	011b      	lsls	r3, r3, #4
 800ce2e:	3332      	adds	r3, #50	@ 0x32
 800ce30:	4a07      	ldr	r2, [pc, #28]	@ (800ce50 <UART_SetConfig+0x118>)
 800ce32:	fba2 2303 	umull	r2, r3, r2, r3
 800ce36:	095b      	lsrs	r3, r3, #5
 800ce38:	f003 020f 	and.w	r2, r3, #15
 800ce3c:	687b      	ldr	r3, [r7, #4]
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	440a      	add	r2, r1
 800ce42:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800ce44:	bf00      	nop
 800ce46:	3710      	adds	r7, #16
 800ce48:	46bd      	mov	sp, r7
 800ce4a:	bd80      	pop	{r7, pc}
 800ce4c:	40013800 	.word	0x40013800
 800ce50:	51eb851f 	.word	0x51eb851f

0800ce54 <__itoa>:
 800ce54:	1e93      	subs	r3, r2, #2
 800ce56:	2b22      	cmp	r3, #34	@ 0x22
 800ce58:	b510      	push	{r4, lr}
 800ce5a:	460c      	mov	r4, r1
 800ce5c:	d904      	bls.n	800ce68 <__itoa+0x14>
 800ce5e:	2300      	movs	r3, #0
 800ce60:	461c      	mov	r4, r3
 800ce62:	700b      	strb	r3, [r1, #0]
 800ce64:	4620      	mov	r0, r4
 800ce66:	bd10      	pop	{r4, pc}
 800ce68:	2a0a      	cmp	r2, #10
 800ce6a:	d109      	bne.n	800ce80 <__itoa+0x2c>
 800ce6c:	2800      	cmp	r0, #0
 800ce6e:	da07      	bge.n	800ce80 <__itoa+0x2c>
 800ce70:	232d      	movs	r3, #45	@ 0x2d
 800ce72:	700b      	strb	r3, [r1, #0]
 800ce74:	2101      	movs	r1, #1
 800ce76:	4240      	negs	r0, r0
 800ce78:	4421      	add	r1, r4
 800ce7a:	f000 f8db 	bl	800d034 <__utoa>
 800ce7e:	e7f1      	b.n	800ce64 <__itoa+0x10>
 800ce80:	2100      	movs	r1, #0
 800ce82:	e7f9      	b.n	800ce78 <__itoa+0x24>

0800ce84 <itoa>:
 800ce84:	f7ff bfe6 	b.w	800ce54 <__itoa>

0800ce88 <malloc>:
 800ce88:	4b02      	ldr	r3, [pc, #8]	@ (800ce94 <malloc+0xc>)
 800ce8a:	4601      	mov	r1, r0
 800ce8c:	6818      	ldr	r0, [r3, #0]
 800ce8e:	f000 b825 	b.w	800cedc <_malloc_r>
 800ce92:	bf00      	nop
 800ce94:	20000f5c 	.word	0x20000f5c

0800ce98 <sbrk_aligned>:
 800ce98:	b570      	push	{r4, r5, r6, lr}
 800ce9a:	4e0f      	ldr	r6, [pc, #60]	@ (800ced8 <sbrk_aligned+0x40>)
 800ce9c:	460c      	mov	r4, r1
 800ce9e:	6831      	ldr	r1, [r6, #0]
 800cea0:	4605      	mov	r5, r0
 800cea2:	b911      	cbnz	r1, 800ceaa <sbrk_aligned+0x12>
 800cea4:	f000 f932 	bl	800d10c <_sbrk_r>
 800cea8:	6030      	str	r0, [r6, #0]
 800ceaa:	4621      	mov	r1, r4
 800ceac:	4628      	mov	r0, r5
 800ceae:	f000 f92d 	bl	800d10c <_sbrk_r>
 800ceb2:	1c43      	adds	r3, r0, #1
 800ceb4:	d103      	bne.n	800cebe <sbrk_aligned+0x26>
 800ceb6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800ceba:	4620      	mov	r0, r4
 800cebc:	bd70      	pop	{r4, r5, r6, pc}
 800cebe:	1cc4      	adds	r4, r0, #3
 800cec0:	f024 0403 	bic.w	r4, r4, #3
 800cec4:	42a0      	cmp	r0, r4
 800cec6:	d0f8      	beq.n	800ceba <sbrk_aligned+0x22>
 800cec8:	1a21      	subs	r1, r4, r0
 800ceca:	4628      	mov	r0, r5
 800cecc:	f000 f91e 	bl	800d10c <_sbrk_r>
 800ced0:	3001      	adds	r0, #1
 800ced2:	d1f2      	bne.n	800ceba <sbrk_aligned+0x22>
 800ced4:	e7ef      	b.n	800ceb6 <sbrk_aligned+0x1e>
 800ced6:	bf00      	nop
 800ced8:	200019f4 	.word	0x200019f4

0800cedc <_malloc_r>:
 800cedc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cee0:	1ccd      	adds	r5, r1, #3
 800cee2:	f025 0503 	bic.w	r5, r5, #3
 800cee6:	3508      	adds	r5, #8
 800cee8:	2d0c      	cmp	r5, #12
 800ceea:	bf38      	it	cc
 800ceec:	250c      	movcc	r5, #12
 800ceee:	2d00      	cmp	r5, #0
 800cef0:	4606      	mov	r6, r0
 800cef2:	db01      	blt.n	800cef8 <_malloc_r+0x1c>
 800cef4:	42a9      	cmp	r1, r5
 800cef6:	d904      	bls.n	800cf02 <_malloc_r+0x26>
 800cef8:	230c      	movs	r3, #12
 800cefa:	6033      	str	r3, [r6, #0]
 800cefc:	2000      	movs	r0, #0
 800cefe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf02:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cfd8 <_malloc_r+0xfc>
 800cf06:	f000 f869 	bl	800cfdc <__malloc_lock>
 800cf0a:	f8d8 3000 	ldr.w	r3, [r8]
 800cf0e:	461c      	mov	r4, r3
 800cf10:	bb44      	cbnz	r4, 800cf64 <_malloc_r+0x88>
 800cf12:	4629      	mov	r1, r5
 800cf14:	4630      	mov	r0, r6
 800cf16:	f7ff ffbf 	bl	800ce98 <sbrk_aligned>
 800cf1a:	1c43      	adds	r3, r0, #1
 800cf1c:	4604      	mov	r4, r0
 800cf1e:	d158      	bne.n	800cfd2 <_malloc_r+0xf6>
 800cf20:	f8d8 4000 	ldr.w	r4, [r8]
 800cf24:	4627      	mov	r7, r4
 800cf26:	2f00      	cmp	r7, #0
 800cf28:	d143      	bne.n	800cfb2 <_malloc_r+0xd6>
 800cf2a:	2c00      	cmp	r4, #0
 800cf2c:	d04b      	beq.n	800cfc6 <_malloc_r+0xea>
 800cf2e:	6823      	ldr	r3, [r4, #0]
 800cf30:	4639      	mov	r1, r7
 800cf32:	4630      	mov	r0, r6
 800cf34:	eb04 0903 	add.w	r9, r4, r3
 800cf38:	f000 f8e8 	bl	800d10c <_sbrk_r>
 800cf3c:	4581      	cmp	r9, r0
 800cf3e:	d142      	bne.n	800cfc6 <_malloc_r+0xea>
 800cf40:	6821      	ldr	r1, [r4, #0]
 800cf42:	4630      	mov	r0, r6
 800cf44:	1a6d      	subs	r5, r5, r1
 800cf46:	4629      	mov	r1, r5
 800cf48:	f7ff ffa6 	bl	800ce98 <sbrk_aligned>
 800cf4c:	3001      	adds	r0, #1
 800cf4e:	d03a      	beq.n	800cfc6 <_malloc_r+0xea>
 800cf50:	6823      	ldr	r3, [r4, #0]
 800cf52:	442b      	add	r3, r5
 800cf54:	6023      	str	r3, [r4, #0]
 800cf56:	f8d8 3000 	ldr.w	r3, [r8]
 800cf5a:	685a      	ldr	r2, [r3, #4]
 800cf5c:	bb62      	cbnz	r2, 800cfb8 <_malloc_r+0xdc>
 800cf5e:	f8c8 7000 	str.w	r7, [r8]
 800cf62:	e00f      	b.n	800cf84 <_malloc_r+0xa8>
 800cf64:	6822      	ldr	r2, [r4, #0]
 800cf66:	1b52      	subs	r2, r2, r5
 800cf68:	d420      	bmi.n	800cfac <_malloc_r+0xd0>
 800cf6a:	2a0b      	cmp	r2, #11
 800cf6c:	d917      	bls.n	800cf9e <_malloc_r+0xc2>
 800cf6e:	1961      	adds	r1, r4, r5
 800cf70:	42a3      	cmp	r3, r4
 800cf72:	6025      	str	r5, [r4, #0]
 800cf74:	bf18      	it	ne
 800cf76:	6059      	strne	r1, [r3, #4]
 800cf78:	6863      	ldr	r3, [r4, #4]
 800cf7a:	bf08      	it	eq
 800cf7c:	f8c8 1000 	streq.w	r1, [r8]
 800cf80:	5162      	str	r2, [r4, r5]
 800cf82:	604b      	str	r3, [r1, #4]
 800cf84:	4630      	mov	r0, r6
 800cf86:	f000 f82f 	bl	800cfe8 <__malloc_unlock>
 800cf8a:	f104 000b 	add.w	r0, r4, #11
 800cf8e:	1d23      	adds	r3, r4, #4
 800cf90:	f020 0007 	bic.w	r0, r0, #7
 800cf94:	1ac2      	subs	r2, r0, r3
 800cf96:	bf1c      	itt	ne
 800cf98:	1a1b      	subne	r3, r3, r0
 800cf9a:	50a3      	strne	r3, [r4, r2]
 800cf9c:	e7af      	b.n	800cefe <_malloc_r+0x22>
 800cf9e:	6862      	ldr	r2, [r4, #4]
 800cfa0:	42a3      	cmp	r3, r4
 800cfa2:	bf0c      	ite	eq
 800cfa4:	f8c8 2000 	streq.w	r2, [r8]
 800cfa8:	605a      	strne	r2, [r3, #4]
 800cfaa:	e7eb      	b.n	800cf84 <_malloc_r+0xa8>
 800cfac:	4623      	mov	r3, r4
 800cfae:	6864      	ldr	r4, [r4, #4]
 800cfb0:	e7ae      	b.n	800cf10 <_malloc_r+0x34>
 800cfb2:	463c      	mov	r4, r7
 800cfb4:	687f      	ldr	r7, [r7, #4]
 800cfb6:	e7b6      	b.n	800cf26 <_malloc_r+0x4a>
 800cfb8:	461a      	mov	r2, r3
 800cfba:	685b      	ldr	r3, [r3, #4]
 800cfbc:	42a3      	cmp	r3, r4
 800cfbe:	d1fb      	bne.n	800cfb8 <_malloc_r+0xdc>
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	6053      	str	r3, [r2, #4]
 800cfc4:	e7de      	b.n	800cf84 <_malloc_r+0xa8>
 800cfc6:	230c      	movs	r3, #12
 800cfc8:	4630      	mov	r0, r6
 800cfca:	6033      	str	r3, [r6, #0]
 800cfcc:	f000 f80c 	bl	800cfe8 <__malloc_unlock>
 800cfd0:	e794      	b.n	800cefc <_malloc_r+0x20>
 800cfd2:	6005      	str	r5, [r0, #0]
 800cfd4:	e7d6      	b.n	800cf84 <_malloc_r+0xa8>
 800cfd6:	bf00      	nop
 800cfd8:	200019f8 	.word	0x200019f8

0800cfdc <__malloc_lock>:
 800cfdc:	4801      	ldr	r0, [pc, #4]	@ (800cfe4 <__malloc_lock+0x8>)
 800cfde:	f000 b8cf 	b.w	800d180 <__retarget_lock_acquire_recursive>
 800cfe2:	bf00      	nop
 800cfe4:	20001b34 	.word	0x20001b34

0800cfe8 <__malloc_unlock>:
 800cfe8:	4801      	ldr	r0, [pc, #4]	@ (800cff0 <__malloc_unlock+0x8>)
 800cfea:	f000 b8ca 	b.w	800d182 <__retarget_lock_release_recursive>
 800cfee:	bf00      	nop
 800cff0:	20001b34 	.word	0x20001b34

0800cff4 <siprintf>:
 800cff4:	b40e      	push	{r1, r2, r3}
 800cff6:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800cffa:	b500      	push	{lr}
 800cffc:	b09c      	sub	sp, #112	@ 0x70
 800cffe:	ab1d      	add	r3, sp, #116	@ 0x74
 800d000:	9002      	str	r0, [sp, #8]
 800d002:	9006      	str	r0, [sp, #24]
 800d004:	9107      	str	r1, [sp, #28]
 800d006:	9104      	str	r1, [sp, #16]
 800d008:	4808      	ldr	r0, [pc, #32]	@ (800d02c <siprintf+0x38>)
 800d00a:	4909      	ldr	r1, [pc, #36]	@ (800d030 <siprintf+0x3c>)
 800d00c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d010:	9105      	str	r1, [sp, #20]
 800d012:	6800      	ldr	r0, [r0, #0]
 800d014:	a902      	add	r1, sp, #8
 800d016:	9301      	str	r3, [sp, #4]
 800d018:	f000 f960 	bl	800d2dc <_svfiprintf_r>
 800d01c:	2200      	movs	r2, #0
 800d01e:	9b02      	ldr	r3, [sp, #8]
 800d020:	701a      	strb	r2, [r3, #0]
 800d022:	b01c      	add	sp, #112	@ 0x70
 800d024:	f85d eb04 	ldr.w	lr, [sp], #4
 800d028:	b003      	add	sp, #12
 800d02a:	4770      	bx	lr
 800d02c:	20000f5c 	.word	0x20000f5c
 800d030:	ffff0208 	.word	0xffff0208

0800d034 <__utoa>:
 800d034:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d036:	b08b      	sub	sp, #44	@ 0x2c
 800d038:	4605      	mov	r5, r0
 800d03a:	460b      	mov	r3, r1
 800d03c:	466e      	mov	r6, sp
 800d03e:	4c1d      	ldr	r4, [pc, #116]	@ (800d0b4 <__utoa+0x80>)
 800d040:	f104 0c20 	add.w	ip, r4, #32
 800d044:	4637      	mov	r7, r6
 800d046:	6820      	ldr	r0, [r4, #0]
 800d048:	6861      	ldr	r1, [r4, #4]
 800d04a:	3408      	adds	r4, #8
 800d04c:	c703      	stmia	r7!, {r0, r1}
 800d04e:	4564      	cmp	r4, ip
 800d050:	463e      	mov	r6, r7
 800d052:	d1f7      	bne.n	800d044 <__utoa+0x10>
 800d054:	7921      	ldrb	r1, [r4, #4]
 800d056:	6820      	ldr	r0, [r4, #0]
 800d058:	7139      	strb	r1, [r7, #4]
 800d05a:	1e91      	subs	r1, r2, #2
 800d05c:	2922      	cmp	r1, #34	@ 0x22
 800d05e:	6038      	str	r0, [r7, #0]
 800d060:	f04f 0100 	mov.w	r1, #0
 800d064:	d904      	bls.n	800d070 <__utoa+0x3c>
 800d066:	7019      	strb	r1, [r3, #0]
 800d068:	460b      	mov	r3, r1
 800d06a:	4618      	mov	r0, r3
 800d06c:	b00b      	add	sp, #44	@ 0x2c
 800d06e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d070:	1e58      	subs	r0, r3, #1
 800d072:	4684      	mov	ip, r0
 800d074:	fbb5 f7f2 	udiv	r7, r5, r2
 800d078:	fb02 5617 	mls	r6, r2, r7, r5
 800d07c:	3628      	adds	r6, #40	@ 0x28
 800d07e:	446e      	add	r6, sp
 800d080:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800d084:	460c      	mov	r4, r1
 800d086:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800d08a:	462e      	mov	r6, r5
 800d08c:	42b2      	cmp	r2, r6
 800d08e:	463d      	mov	r5, r7
 800d090:	f101 0101 	add.w	r1, r1, #1
 800d094:	d9ee      	bls.n	800d074 <__utoa+0x40>
 800d096:	2200      	movs	r2, #0
 800d098:	545a      	strb	r2, [r3, r1]
 800d09a:	1919      	adds	r1, r3, r4
 800d09c:	1aa5      	subs	r5, r4, r2
 800d09e:	42aa      	cmp	r2, r5
 800d0a0:	dae3      	bge.n	800d06a <__utoa+0x36>
 800d0a2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800d0a6:	780e      	ldrb	r6, [r1, #0]
 800d0a8:	3201      	adds	r2, #1
 800d0aa:	7006      	strb	r6, [r0, #0]
 800d0ac:	f801 5901 	strb.w	r5, [r1], #-1
 800d0b0:	e7f4      	b.n	800d09c <__utoa+0x68>
 800d0b2:	bf00      	nop
 800d0b4:	0800dbba 	.word	0x0800dbba

0800d0b8 <strcat>:
 800d0b8:	4602      	mov	r2, r0
 800d0ba:	b510      	push	{r4, lr}
 800d0bc:	7814      	ldrb	r4, [r2, #0]
 800d0be:	4613      	mov	r3, r2
 800d0c0:	3201      	adds	r2, #1
 800d0c2:	2c00      	cmp	r4, #0
 800d0c4:	d1fa      	bne.n	800d0bc <strcat+0x4>
 800d0c6:	3b01      	subs	r3, #1
 800d0c8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d0cc:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d0d0:	2a00      	cmp	r2, #0
 800d0d2:	d1f9      	bne.n	800d0c8 <strcat+0x10>
 800d0d4:	bd10      	pop	{r4, pc}

0800d0d6 <strncpy>:
 800d0d6:	4603      	mov	r3, r0
 800d0d8:	b510      	push	{r4, lr}
 800d0da:	3901      	subs	r1, #1
 800d0dc:	b132      	cbz	r2, 800d0ec <strncpy+0x16>
 800d0de:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800d0e2:	3a01      	subs	r2, #1
 800d0e4:	f803 4b01 	strb.w	r4, [r3], #1
 800d0e8:	2c00      	cmp	r4, #0
 800d0ea:	d1f7      	bne.n	800d0dc <strncpy+0x6>
 800d0ec:	2100      	movs	r1, #0
 800d0ee:	441a      	add	r2, r3
 800d0f0:	4293      	cmp	r3, r2
 800d0f2:	d100      	bne.n	800d0f6 <strncpy+0x20>
 800d0f4:	bd10      	pop	{r4, pc}
 800d0f6:	f803 1b01 	strb.w	r1, [r3], #1
 800d0fa:	e7f9      	b.n	800d0f0 <strncpy+0x1a>

0800d0fc <memset>:
 800d0fc:	4603      	mov	r3, r0
 800d0fe:	4402      	add	r2, r0
 800d100:	4293      	cmp	r3, r2
 800d102:	d100      	bne.n	800d106 <memset+0xa>
 800d104:	4770      	bx	lr
 800d106:	f803 1b01 	strb.w	r1, [r3], #1
 800d10a:	e7f9      	b.n	800d100 <memset+0x4>

0800d10c <_sbrk_r>:
 800d10c:	b538      	push	{r3, r4, r5, lr}
 800d10e:	2300      	movs	r3, #0
 800d110:	4d05      	ldr	r5, [pc, #20]	@ (800d128 <_sbrk_r+0x1c>)
 800d112:	4604      	mov	r4, r0
 800d114:	4608      	mov	r0, r1
 800d116:	602b      	str	r3, [r5, #0]
 800d118:	f7fb fff4 	bl	8009104 <_sbrk>
 800d11c:	1c43      	adds	r3, r0, #1
 800d11e:	d102      	bne.n	800d126 <_sbrk_r+0x1a>
 800d120:	682b      	ldr	r3, [r5, #0]
 800d122:	b103      	cbz	r3, 800d126 <_sbrk_r+0x1a>
 800d124:	6023      	str	r3, [r4, #0]
 800d126:	bd38      	pop	{r3, r4, r5, pc}
 800d128:	20001b38 	.word	0x20001b38

0800d12c <__errno>:
 800d12c:	4b01      	ldr	r3, [pc, #4]	@ (800d134 <__errno+0x8>)
 800d12e:	6818      	ldr	r0, [r3, #0]
 800d130:	4770      	bx	lr
 800d132:	bf00      	nop
 800d134:	20000f5c 	.word	0x20000f5c

0800d138 <__libc_init_array>:
 800d138:	b570      	push	{r4, r5, r6, lr}
 800d13a:	2600      	movs	r6, #0
 800d13c:	4d0c      	ldr	r5, [pc, #48]	@ (800d170 <__libc_init_array+0x38>)
 800d13e:	4c0d      	ldr	r4, [pc, #52]	@ (800d174 <__libc_init_array+0x3c>)
 800d140:	1b64      	subs	r4, r4, r5
 800d142:	10a4      	asrs	r4, r4, #2
 800d144:	42a6      	cmp	r6, r4
 800d146:	d109      	bne.n	800d15c <__libc_init_array+0x24>
 800d148:	f000 fbc2 	bl	800d8d0 <_init>
 800d14c:	2600      	movs	r6, #0
 800d14e:	4d0a      	ldr	r5, [pc, #40]	@ (800d178 <__libc_init_array+0x40>)
 800d150:	4c0a      	ldr	r4, [pc, #40]	@ (800d17c <__libc_init_array+0x44>)
 800d152:	1b64      	subs	r4, r4, r5
 800d154:	10a4      	asrs	r4, r4, #2
 800d156:	42a6      	cmp	r6, r4
 800d158:	d105      	bne.n	800d166 <__libc_init_array+0x2e>
 800d15a:	bd70      	pop	{r4, r5, r6, pc}
 800d15c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d160:	4798      	blx	r3
 800d162:	3601      	adds	r6, #1
 800d164:	e7ee      	b.n	800d144 <__libc_init_array+0xc>
 800d166:	f855 3b04 	ldr.w	r3, [r5], #4
 800d16a:	4798      	blx	r3
 800d16c:	3601      	adds	r6, #1
 800d16e:	e7f2      	b.n	800d156 <__libc_init_array+0x1e>
 800d170:	0800dc1c 	.word	0x0800dc1c
 800d174:	0800dc1c 	.word	0x0800dc1c
 800d178:	0800dc1c 	.word	0x0800dc1c
 800d17c:	0800dc20 	.word	0x0800dc20

0800d180 <__retarget_lock_acquire_recursive>:
 800d180:	4770      	bx	lr

0800d182 <__retarget_lock_release_recursive>:
 800d182:	4770      	bx	lr

0800d184 <strcpy>:
 800d184:	4603      	mov	r3, r0
 800d186:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d18a:	f803 2b01 	strb.w	r2, [r3], #1
 800d18e:	2a00      	cmp	r2, #0
 800d190:	d1f9      	bne.n	800d186 <strcpy+0x2>
 800d192:	4770      	bx	lr

0800d194 <_free_r>:
 800d194:	b538      	push	{r3, r4, r5, lr}
 800d196:	4605      	mov	r5, r0
 800d198:	2900      	cmp	r1, #0
 800d19a:	d040      	beq.n	800d21e <_free_r+0x8a>
 800d19c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1a0:	1f0c      	subs	r4, r1, #4
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	bfb8      	it	lt
 800d1a6:	18e4      	addlt	r4, r4, r3
 800d1a8:	f7ff ff18 	bl	800cfdc <__malloc_lock>
 800d1ac:	4a1c      	ldr	r2, [pc, #112]	@ (800d220 <_free_r+0x8c>)
 800d1ae:	6813      	ldr	r3, [r2, #0]
 800d1b0:	b933      	cbnz	r3, 800d1c0 <_free_r+0x2c>
 800d1b2:	6063      	str	r3, [r4, #4]
 800d1b4:	6014      	str	r4, [r2, #0]
 800d1b6:	4628      	mov	r0, r5
 800d1b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d1bc:	f7ff bf14 	b.w	800cfe8 <__malloc_unlock>
 800d1c0:	42a3      	cmp	r3, r4
 800d1c2:	d908      	bls.n	800d1d6 <_free_r+0x42>
 800d1c4:	6820      	ldr	r0, [r4, #0]
 800d1c6:	1821      	adds	r1, r4, r0
 800d1c8:	428b      	cmp	r3, r1
 800d1ca:	bf01      	itttt	eq
 800d1cc:	6819      	ldreq	r1, [r3, #0]
 800d1ce:	685b      	ldreq	r3, [r3, #4]
 800d1d0:	1809      	addeq	r1, r1, r0
 800d1d2:	6021      	streq	r1, [r4, #0]
 800d1d4:	e7ed      	b.n	800d1b2 <_free_r+0x1e>
 800d1d6:	461a      	mov	r2, r3
 800d1d8:	685b      	ldr	r3, [r3, #4]
 800d1da:	b10b      	cbz	r3, 800d1e0 <_free_r+0x4c>
 800d1dc:	42a3      	cmp	r3, r4
 800d1de:	d9fa      	bls.n	800d1d6 <_free_r+0x42>
 800d1e0:	6811      	ldr	r1, [r2, #0]
 800d1e2:	1850      	adds	r0, r2, r1
 800d1e4:	42a0      	cmp	r0, r4
 800d1e6:	d10b      	bne.n	800d200 <_free_r+0x6c>
 800d1e8:	6820      	ldr	r0, [r4, #0]
 800d1ea:	4401      	add	r1, r0
 800d1ec:	1850      	adds	r0, r2, r1
 800d1ee:	4283      	cmp	r3, r0
 800d1f0:	6011      	str	r1, [r2, #0]
 800d1f2:	d1e0      	bne.n	800d1b6 <_free_r+0x22>
 800d1f4:	6818      	ldr	r0, [r3, #0]
 800d1f6:	685b      	ldr	r3, [r3, #4]
 800d1f8:	4408      	add	r0, r1
 800d1fa:	6010      	str	r0, [r2, #0]
 800d1fc:	6053      	str	r3, [r2, #4]
 800d1fe:	e7da      	b.n	800d1b6 <_free_r+0x22>
 800d200:	d902      	bls.n	800d208 <_free_r+0x74>
 800d202:	230c      	movs	r3, #12
 800d204:	602b      	str	r3, [r5, #0]
 800d206:	e7d6      	b.n	800d1b6 <_free_r+0x22>
 800d208:	6820      	ldr	r0, [r4, #0]
 800d20a:	1821      	adds	r1, r4, r0
 800d20c:	428b      	cmp	r3, r1
 800d20e:	bf01      	itttt	eq
 800d210:	6819      	ldreq	r1, [r3, #0]
 800d212:	685b      	ldreq	r3, [r3, #4]
 800d214:	1809      	addeq	r1, r1, r0
 800d216:	6021      	streq	r1, [r4, #0]
 800d218:	6063      	str	r3, [r4, #4]
 800d21a:	6054      	str	r4, [r2, #4]
 800d21c:	e7cb      	b.n	800d1b6 <_free_r+0x22>
 800d21e:	bd38      	pop	{r3, r4, r5, pc}
 800d220:	200019f8 	.word	0x200019f8

0800d224 <__ssputs_r>:
 800d224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d228:	461f      	mov	r7, r3
 800d22a:	688e      	ldr	r6, [r1, #8]
 800d22c:	4682      	mov	sl, r0
 800d22e:	42be      	cmp	r6, r7
 800d230:	460c      	mov	r4, r1
 800d232:	4690      	mov	r8, r2
 800d234:	680b      	ldr	r3, [r1, #0]
 800d236:	d82d      	bhi.n	800d294 <__ssputs_r+0x70>
 800d238:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d23c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d240:	d026      	beq.n	800d290 <__ssputs_r+0x6c>
 800d242:	6965      	ldr	r5, [r4, #20]
 800d244:	6909      	ldr	r1, [r1, #16]
 800d246:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d24a:	eba3 0901 	sub.w	r9, r3, r1
 800d24e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d252:	1c7b      	adds	r3, r7, #1
 800d254:	444b      	add	r3, r9
 800d256:	106d      	asrs	r5, r5, #1
 800d258:	429d      	cmp	r5, r3
 800d25a:	bf38      	it	cc
 800d25c:	461d      	movcc	r5, r3
 800d25e:	0553      	lsls	r3, r2, #21
 800d260:	d527      	bpl.n	800d2b2 <__ssputs_r+0x8e>
 800d262:	4629      	mov	r1, r5
 800d264:	f7ff fe3a 	bl	800cedc <_malloc_r>
 800d268:	4606      	mov	r6, r0
 800d26a:	b360      	cbz	r0, 800d2c6 <__ssputs_r+0xa2>
 800d26c:	464a      	mov	r2, r9
 800d26e:	6921      	ldr	r1, [r4, #16]
 800d270:	f000 fb18 	bl	800d8a4 <memcpy>
 800d274:	89a3      	ldrh	r3, [r4, #12]
 800d276:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d27a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d27e:	81a3      	strh	r3, [r4, #12]
 800d280:	6126      	str	r6, [r4, #16]
 800d282:	444e      	add	r6, r9
 800d284:	6026      	str	r6, [r4, #0]
 800d286:	463e      	mov	r6, r7
 800d288:	6165      	str	r5, [r4, #20]
 800d28a:	eba5 0509 	sub.w	r5, r5, r9
 800d28e:	60a5      	str	r5, [r4, #8]
 800d290:	42be      	cmp	r6, r7
 800d292:	d900      	bls.n	800d296 <__ssputs_r+0x72>
 800d294:	463e      	mov	r6, r7
 800d296:	4632      	mov	r2, r6
 800d298:	4641      	mov	r1, r8
 800d29a:	6820      	ldr	r0, [r4, #0]
 800d29c:	f000 fada 	bl	800d854 <memmove>
 800d2a0:	2000      	movs	r0, #0
 800d2a2:	68a3      	ldr	r3, [r4, #8]
 800d2a4:	1b9b      	subs	r3, r3, r6
 800d2a6:	60a3      	str	r3, [r4, #8]
 800d2a8:	6823      	ldr	r3, [r4, #0]
 800d2aa:	4433      	add	r3, r6
 800d2ac:	6023      	str	r3, [r4, #0]
 800d2ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2b2:	462a      	mov	r2, r5
 800d2b4:	f000 faa0 	bl	800d7f8 <_realloc_r>
 800d2b8:	4606      	mov	r6, r0
 800d2ba:	2800      	cmp	r0, #0
 800d2bc:	d1e0      	bne.n	800d280 <__ssputs_r+0x5c>
 800d2be:	4650      	mov	r0, sl
 800d2c0:	6921      	ldr	r1, [r4, #16]
 800d2c2:	f7ff ff67 	bl	800d194 <_free_r>
 800d2c6:	230c      	movs	r3, #12
 800d2c8:	f8ca 3000 	str.w	r3, [sl]
 800d2cc:	89a3      	ldrh	r3, [r4, #12]
 800d2ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d2d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d2d6:	81a3      	strh	r3, [r4, #12]
 800d2d8:	e7e9      	b.n	800d2ae <__ssputs_r+0x8a>
	...

0800d2dc <_svfiprintf_r>:
 800d2dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2e0:	4698      	mov	r8, r3
 800d2e2:	898b      	ldrh	r3, [r1, #12]
 800d2e4:	4607      	mov	r7, r0
 800d2e6:	061b      	lsls	r3, r3, #24
 800d2e8:	460d      	mov	r5, r1
 800d2ea:	4614      	mov	r4, r2
 800d2ec:	b09d      	sub	sp, #116	@ 0x74
 800d2ee:	d510      	bpl.n	800d312 <_svfiprintf_r+0x36>
 800d2f0:	690b      	ldr	r3, [r1, #16]
 800d2f2:	b973      	cbnz	r3, 800d312 <_svfiprintf_r+0x36>
 800d2f4:	2140      	movs	r1, #64	@ 0x40
 800d2f6:	f7ff fdf1 	bl	800cedc <_malloc_r>
 800d2fa:	6028      	str	r0, [r5, #0]
 800d2fc:	6128      	str	r0, [r5, #16]
 800d2fe:	b930      	cbnz	r0, 800d30e <_svfiprintf_r+0x32>
 800d300:	230c      	movs	r3, #12
 800d302:	603b      	str	r3, [r7, #0]
 800d304:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d308:	b01d      	add	sp, #116	@ 0x74
 800d30a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d30e:	2340      	movs	r3, #64	@ 0x40
 800d310:	616b      	str	r3, [r5, #20]
 800d312:	2300      	movs	r3, #0
 800d314:	9309      	str	r3, [sp, #36]	@ 0x24
 800d316:	2320      	movs	r3, #32
 800d318:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d31c:	2330      	movs	r3, #48	@ 0x30
 800d31e:	f04f 0901 	mov.w	r9, #1
 800d322:	f8cd 800c 	str.w	r8, [sp, #12]
 800d326:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800d4c0 <_svfiprintf_r+0x1e4>
 800d32a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d32e:	4623      	mov	r3, r4
 800d330:	469a      	mov	sl, r3
 800d332:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d336:	b10a      	cbz	r2, 800d33c <_svfiprintf_r+0x60>
 800d338:	2a25      	cmp	r2, #37	@ 0x25
 800d33a:	d1f9      	bne.n	800d330 <_svfiprintf_r+0x54>
 800d33c:	ebba 0b04 	subs.w	fp, sl, r4
 800d340:	d00b      	beq.n	800d35a <_svfiprintf_r+0x7e>
 800d342:	465b      	mov	r3, fp
 800d344:	4622      	mov	r2, r4
 800d346:	4629      	mov	r1, r5
 800d348:	4638      	mov	r0, r7
 800d34a:	f7ff ff6b 	bl	800d224 <__ssputs_r>
 800d34e:	3001      	adds	r0, #1
 800d350:	f000 80a7 	beq.w	800d4a2 <_svfiprintf_r+0x1c6>
 800d354:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d356:	445a      	add	r2, fp
 800d358:	9209      	str	r2, [sp, #36]	@ 0x24
 800d35a:	f89a 3000 	ldrb.w	r3, [sl]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	f000 809f 	beq.w	800d4a2 <_svfiprintf_r+0x1c6>
 800d364:	2300      	movs	r3, #0
 800d366:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d36a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d36e:	f10a 0a01 	add.w	sl, sl, #1
 800d372:	9304      	str	r3, [sp, #16]
 800d374:	9307      	str	r3, [sp, #28]
 800d376:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d37a:	931a      	str	r3, [sp, #104]	@ 0x68
 800d37c:	4654      	mov	r4, sl
 800d37e:	2205      	movs	r2, #5
 800d380:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d384:	484e      	ldr	r0, [pc, #312]	@ (800d4c0 <_svfiprintf_r+0x1e4>)
 800d386:	f000 fa7f 	bl	800d888 <memchr>
 800d38a:	9a04      	ldr	r2, [sp, #16]
 800d38c:	b9d8      	cbnz	r0, 800d3c6 <_svfiprintf_r+0xea>
 800d38e:	06d0      	lsls	r0, r2, #27
 800d390:	bf44      	itt	mi
 800d392:	2320      	movmi	r3, #32
 800d394:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d398:	0711      	lsls	r1, r2, #28
 800d39a:	bf44      	itt	mi
 800d39c:	232b      	movmi	r3, #43	@ 0x2b
 800d39e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d3a2:	f89a 3000 	ldrb.w	r3, [sl]
 800d3a6:	2b2a      	cmp	r3, #42	@ 0x2a
 800d3a8:	d015      	beq.n	800d3d6 <_svfiprintf_r+0xfa>
 800d3aa:	4654      	mov	r4, sl
 800d3ac:	2000      	movs	r0, #0
 800d3ae:	f04f 0c0a 	mov.w	ip, #10
 800d3b2:	9a07      	ldr	r2, [sp, #28]
 800d3b4:	4621      	mov	r1, r4
 800d3b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d3ba:	3b30      	subs	r3, #48	@ 0x30
 800d3bc:	2b09      	cmp	r3, #9
 800d3be:	d94b      	bls.n	800d458 <_svfiprintf_r+0x17c>
 800d3c0:	b1b0      	cbz	r0, 800d3f0 <_svfiprintf_r+0x114>
 800d3c2:	9207      	str	r2, [sp, #28]
 800d3c4:	e014      	b.n	800d3f0 <_svfiprintf_r+0x114>
 800d3c6:	eba0 0308 	sub.w	r3, r0, r8
 800d3ca:	fa09 f303 	lsl.w	r3, r9, r3
 800d3ce:	4313      	orrs	r3, r2
 800d3d0:	46a2      	mov	sl, r4
 800d3d2:	9304      	str	r3, [sp, #16]
 800d3d4:	e7d2      	b.n	800d37c <_svfiprintf_r+0xa0>
 800d3d6:	9b03      	ldr	r3, [sp, #12]
 800d3d8:	1d19      	adds	r1, r3, #4
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	9103      	str	r1, [sp, #12]
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	bfbb      	ittet	lt
 800d3e2:	425b      	neglt	r3, r3
 800d3e4:	f042 0202 	orrlt.w	r2, r2, #2
 800d3e8:	9307      	strge	r3, [sp, #28]
 800d3ea:	9307      	strlt	r3, [sp, #28]
 800d3ec:	bfb8      	it	lt
 800d3ee:	9204      	strlt	r2, [sp, #16]
 800d3f0:	7823      	ldrb	r3, [r4, #0]
 800d3f2:	2b2e      	cmp	r3, #46	@ 0x2e
 800d3f4:	d10a      	bne.n	800d40c <_svfiprintf_r+0x130>
 800d3f6:	7863      	ldrb	r3, [r4, #1]
 800d3f8:	2b2a      	cmp	r3, #42	@ 0x2a
 800d3fa:	d132      	bne.n	800d462 <_svfiprintf_r+0x186>
 800d3fc:	9b03      	ldr	r3, [sp, #12]
 800d3fe:	3402      	adds	r4, #2
 800d400:	1d1a      	adds	r2, r3, #4
 800d402:	681b      	ldr	r3, [r3, #0]
 800d404:	9203      	str	r2, [sp, #12]
 800d406:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d40a:	9305      	str	r3, [sp, #20]
 800d40c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800d4c4 <_svfiprintf_r+0x1e8>
 800d410:	2203      	movs	r2, #3
 800d412:	4650      	mov	r0, sl
 800d414:	7821      	ldrb	r1, [r4, #0]
 800d416:	f000 fa37 	bl	800d888 <memchr>
 800d41a:	b138      	cbz	r0, 800d42c <_svfiprintf_r+0x150>
 800d41c:	2240      	movs	r2, #64	@ 0x40
 800d41e:	9b04      	ldr	r3, [sp, #16]
 800d420:	eba0 000a 	sub.w	r0, r0, sl
 800d424:	4082      	lsls	r2, r0
 800d426:	4313      	orrs	r3, r2
 800d428:	3401      	adds	r4, #1
 800d42a:	9304      	str	r3, [sp, #16]
 800d42c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d430:	2206      	movs	r2, #6
 800d432:	4825      	ldr	r0, [pc, #148]	@ (800d4c8 <_svfiprintf_r+0x1ec>)
 800d434:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d438:	f000 fa26 	bl	800d888 <memchr>
 800d43c:	2800      	cmp	r0, #0
 800d43e:	d036      	beq.n	800d4ae <_svfiprintf_r+0x1d2>
 800d440:	4b22      	ldr	r3, [pc, #136]	@ (800d4cc <_svfiprintf_r+0x1f0>)
 800d442:	bb1b      	cbnz	r3, 800d48c <_svfiprintf_r+0x1b0>
 800d444:	9b03      	ldr	r3, [sp, #12]
 800d446:	3307      	adds	r3, #7
 800d448:	f023 0307 	bic.w	r3, r3, #7
 800d44c:	3308      	adds	r3, #8
 800d44e:	9303      	str	r3, [sp, #12]
 800d450:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d452:	4433      	add	r3, r6
 800d454:	9309      	str	r3, [sp, #36]	@ 0x24
 800d456:	e76a      	b.n	800d32e <_svfiprintf_r+0x52>
 800d458:	460c      	mov	r4, r1
 800d45a:	2001      	movs	r0, #1
 800d45c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d460:	e7a8      	b.n	800d3b4 <_svfiprintf_r+0xd8>
 800d462:	2300      	movs	r3, #0
 800d464:	f04f 0c0a 	mov.w	ip, #10
 800d468:	4619      	mov	r1, r3
 800d46a:	3401      	adds	r4, #1
 800d46c:	9305      	str	r3, [sp, #20]
 800d46e:	4620      	mov	r0, r4
 800d470:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d474:	3a30      	subs	r2, #48	@ 0x30
 800d476:	2a09      	cmp	r2, #9
 800d478:	d903      	bls.n	800d482 <_svfiprintf_r+0x1a6>
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d0c6      	beq.n	800d40c <_svfiprintf_r+0x130>
 800d47e:	9105      	str	r1, [sp, #20]
 800d480:	e7c4      	b.n	800d40c <_svfiprintf_r+0x130>
 800d482:	4604      	mov	r4, r0
 800d484:	2301      	movs	r3, #1
 800d486:	fb0c 2101 	mla	r1, ip, r1, r2
 800d48a:	e7f0      	b.n	800d46e <_svfiprintf_r+0x192>
 800d48c:	ab03      	add	r3, sp, #12
 800d48e:	9300      	str	r3, [sp, #0]
 800d490:	462a      	mov	r2, r5
 800d492:	4638      	mov	r0, r7
 800d494:	4b0e      	ldr	r3, [pc, #56]	@ (800d4d0 <_svfiprintf_r+0x1f4>)
 800d496:	a904      	add	r1, sp, #16
 800d498:	f3af 8000 	nop.w
 800d49c:	1c42      	adds	r2, r0, #1
 800d49e:	4606      	mov	r6, r0
 800d4a0:	d1d6      	bne.n	800d450 <_svfiprintf_r+0x174>
 800d4a2:	89ab      	ldrh	r3, [r5, #12]
 800d4a4:	065b      	lsls	r3, r3, #25
 800d4a6:	f53f af2d 	bmi.w	800d304 <_svfiprintf_r+0x28>
 800d4aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d4ac:	e72c      	b.n	800d308 <_svfiprintf_r+0x2c>
 800d4ae:	ab03      	add	r3, sp, #12
 800d4b0:	9300      	str	r3, [sp, #0]
 800d4b2:	462a      	mov	r2, r5
 800d4b4:	4638      	mov	r0, r7
 800d4b6:	4b06      	ldr	r3, [pc, #24]	@ (800d4d0 <_svfiprintf_r+0x1f4>)
 800d4b8:	a904      	add	r1, sp, #16
 800d4ba:	f000 f87d 	bl	800d5b8 <_printf_i>
 800d4be:	e7ed      	b.n	800d49c <_svfiprintf_r+0x1c0>
 800d4c0:	0800dbdf 	.word	0x0800dbdf
 800d4c4:	0800dbe5 	.word	0x0800dbe5
 800d4c8:	0800dbe9 	.word	0x0800dbe9
 800d4cc:	00000000 	.word	0x00000000
 800d4d0:	0800d225 	.word	0x0800d225

0800d4d4 <_printf_common>:
 800d4d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d4d8:	4616      	mov	r6, r2
 800d4da:	4698      	mov	r8, r3
 800d4dc:	688a      	ldr	r2, [r1, #8]
 800d4de:	690b      	ldr	r3, [r1, #16]
 800d4e0:	4607      	mov	r7, r0
 800d4e2:	4293      	cmp	r3, r2
 800d4e4:	bfb8      	it	lt
 800d4e6:	4613      	movlt	r3, r2
 800d4e8:	6033      	str	r3, [r6, #0]
 800d4ea:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d4ee:	460c      	mov	r4, r1
 800d4f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d4f4:	b10a      	cbz	r2, 800d4fa <_printf_common+0x26>
 800d4f6:	3301      	adds	r3, #1
 800d4f8:	6033      	str	r3, [r6, #0]
 800d4fa:	6823      	ldr	r3, [r4, #0]
 800d4fc:	0699      	lsls	r1, r3, #26
 800d4fe:	bf42      	ittt	mi
 800d500:	6833      	ldrmi	r3, [r6, #0]
 800d502:	3302      	addmi	r3, #2
 800d504:	6033      	strmi	r3, [r6, #0]
 800d506:	6825      	ldr	r5, [r4, #0]
 800d508:	f015 0506 	ands.w	r5, r5, #6
 800d50c:	d106      	bne.n	800d51c <_printf_common+0x48>
 800d50e:	f104 0a19 	add.w	sl, r4, #25
 800d512:	68e3      	ldr	r3, [r4, #12]
 800d514:	6832      	ldr	r2, [r6, #0]
 800d516:	1a9b      	subs	r3, r3, r2
 800d518:	42ab      	cmp	r3, r5
 800d51a:	dc2b      	bgt.n	800d574 <_printf_common+0xa0>
 800d51c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d520:	6822      	ldr	r2, [r4, #0]
 800d522:	3b00      	subs	r3, #0
 800d524:	bf18      	it	ne
 800d526:	2301      	movne	r3, #1
 800d528:	0692      	lsls	r2, r2, #26
 800d52a:	d430      	bmi.n	800d58e <_printf_common+0xba>
 800d52c:	4641      	mov	r1, r8
 800d52e:	4638      	mov	r0, r7
 800d530:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d534:	47c8      	blx	r9
 800d536:	3001      	adds	r0, #1
 800d538:	d023      	beq.n	800d582 <_printf_common+0xae>
 800d53a:	6823      	ldr	r3, [r4, #0]
 800d53c:	6922      	ldr	r2, [r4, #16]
 800d53e:	f003 0306 	and.w	r3, r3, #6
 800d542:	2b04      	cmp	r3, #4
 800d544:	bf14      	ite	ne
 800d546:	2500      	movne	r5, #0
 800d548:	6833      	ldreq	r3, [r6, #0]
 800d54a:	f04f 0600 	mov.w	r6, #0
 800d54e:	bf08      	it	eq
 800d550:	68e5      	ldreq	r5, [r4, #12]
 800d552:	f104 041a 	add.w	r4, r4, #26
 800d556:	bf08      	it	eq
 800d558:	1aed      	subeq	r5, r5, r3
 800d55a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d55e:	bf08      	it	eq
 800d560:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d564:	4293      	cmp	r3, r2
 800d566:	bfc4      	itt	gt
 800d568:	1a9b      	subgt	r3, r3, r2
 800d56a:	18ed      	addgt	r5, r5, r3
 800d56c:	42b5      	cmp	r5, r6
 800d56e:	d11a      	bne.n	800d5a6 <_printf_common+0xd2>
 800d570:	2000      	movs	r0, #0
 800d572:	e008      	b.n	800d586 <_printf_common+0xb2>
 800d574:	2301      	movs	r3, #1
 800d576:	4652      	mov	r2, sl
 800d578:	4641      	mov	r1, r8
 800d57a:	4638      	mov	r0, r7
 800d57c:	47c8      	blx	r9
 800d57e:	3001      	adds	r0, #1
 800d580:	d103      	bne.n	800d58a <_printf_common+0xb6>
 800d582:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d586:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d58a:	3501      	adds	r5, #1
 800d58c:	e7c1      	b.n	800d512 <_printf_common+0x3e>
 800d58e:	2030      	movs	r0, #48	@ 0x30
 800d590:	18e1      	adds	r1, r4, r3
 800d592:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d596:	1c5a      	adds	r2, r3, #1
 800d598:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d59c:	4422      	add	r2, r4
 800d59e:	3302      	adds	r3, #2
 800d5a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d5a4:	e7c2      	b.n	800d52c <_printf_common+0x58>
 800d5a6:	2301      	movs	r3, #1
 800d5a8:	4622      	mov	r2, r4
 800d5aa:	4641      	mov	r1, r8
 800d5ac:	4638      	mov	r0, r7
 800d5ae:	47c8      	blx	r9
 800d5b0:	3001      	adds	r0, #1
 800d5b2:	d0e6      	beq.n	800d582 <_printf_common+0xae>
 800d5b4:	3601      	adds	r6, #1
 800d5b6:	e7d9      	b.n	800d56c <_printf_common+0x98>

0800d5b8 <_printf_i>:
 800d5b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d5bc:	7e0f      	ldrb	r7, [r1, #24]
 800d5be:	4691      	mov	r9, r2
 800d5c0:	2f78      	cmp	r7, #120	@ 0x78
 800d5c2:	4680      	mov	r8, r0
 800d5c4:	460c      	mov	r4, r1
 800d5c6:	469a      	mov	sl, r3
 800d5c8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d5ca:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d5ce:	d807      	bhi.n	800d5e0 <_printf_i+0x28>
 800d5d0:	2f62      	cmp	r7, #98	@ 0x62
 800d5d2:	d80a      	bhi.n	800d5ea <_printf_i+0x32>
 800d5d4:	2f00      	cmp	r7, #0
 800d5d6:	f000 80d3 	beq.w	800d780 <_printf_i+0x1c8>
 800d5da:	2f58      	cmp	r7, #88	@ 0x58
 800d5dc:	f000 80ba 	beq.w	800d754 <_printf_i+0x19c>
 800d5e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d5e4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d5e8:	e03a      	b.n	800d660 <_printf_i+0xa8>
 800d5ea:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d5ee:	2b15      	cmp	r3, #21
 800d5f0:	d8f6      	bhi.n	800d5e0 <_printf_i+0x28>
 800d5f2:	a101      	add	r1, pc, #4	@ (adr r1, 800d5f8 <_printf_i+0x40>)
 800d5f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d5f8:	0800d651 	.word	0x0800d651
 800d5fc:	0800d665 	.word	0x0800d665
 800d600:	0800d5e1 	.word	0x0800d5e1
 800d604:	0800d5e1 	.word	0x0800d5e1
 800d608:	0800d5e1 	.word	0x0800d5e1
 800d60c:	0800d5e1 	.word	0x0800d5e1
 800d610:	0800d665 	.word	0x0800d665
 800d614:	0800d5e1 	.word	0x0800d5e1
 800d618:	0800d5e1 	.word	0x0800d5e1
 800d61c:	0800d5e1 	.word	0x0800d5e1
 800d620:	0800d5e1 	.word	0x0800d5e1
 800d624:	0800d767 	.word	0x0800d767
 800d628:	0800d68f 	.word	0x0800d68f
 800d62c:	0800d721 	.word	0x0800d721
 800d630:	0800d5e1 	.word	0x0800d5e1
 800d634:	0800d5e1 	.word	0x0800d5e1
 800d638:	0800d789 	.word	0x0800d789
 800d63c:	0800d5e1 	.word	0x0800d5e1
 800d640:	0800d68f 	.word	0x0800d68f
 800d644:	0800d5e1 	.word	0x0800d5e1
 800d648:	0800d5e1 	.word	0x0800d5e1
 800d64c:	0800d729 	.word	0x0800d729
 800d650:	6833      	ldr	r3, [r6, #0]
 800d652:	1d1a      	adds	r2, r3, #4
 800d654:	681b      	ldr	r3, [r3, #0]
 800d656:	6032      	str	r2, [r6, #0]
 800d658:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d65c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d660:	2301      	movs	r3, #1
 800d662:	e09e      	b.n	800d7a2 <_printf_i+0x1ea>
 800d664:	6833      	ldr	r3, [r6, #0]
 800d666:	6820      	ldr	r0, [r4, #0]
 800d668:	1d19      	adds	r1, r3, #4
 800d66a:	6031      	str	r1, [r6, #0]
 800d66c:	0606      	lsls	r6, r0, #24
 800d66e:	d501      	bpl.n	800d674 <_printf_i+0xbc>
 800d670:	681d      	ldr	r5, [r3, #0]
 800d672:	e003      	b.n	800d67c <_printf_i+0xc4>
 800d674:	0645      	lsls	r5, r0, #25
 800d676:	d5fb      	bpl.n	800d670 <_printf_i+0xb8>
 800d678:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d67c:	2d00      	cmp	r5, #0
 800d67e:	da03      	bge.n	800d688 <_printf_i+0xd0>
 800d680:	232d      	movs	r3, #45	@ 0x2d
 800d682:	426d      	negs	r5, r5
 800d684:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d688:	230a      	movs	r3, #10
 800d68a:	4859      	ldr	r0, [pc, #356]	@ (800d7f0 <_printf_i+0x238>)
 800d68c:	e011      	b.n	800d6b2 <_printf_i+0xfa>
 800d68e:	6821      	ldr	r1, [r4, #0]
 800d690:	6833      	ldr	r3, [r6, #0]
 800d692:	0608      	lsls	r0, r1, #24
 800d694:	f853 5b04 	ldr.w	r5, [r3], #4
 800d698:	d402      	bmi.n	800d6a0 <_printf_i+0xe8>
 800d69a:	0649      	lsls	r1, r1, #25
 800d69c:	bf48      	it	mi
 800d69e:	b2ad      	uxthmi	r5, r5
 800d6a0:	2f6f      	cmp	r7, #111	@ 0x6f
 800d6a2:	6033      	str	r3, [r6, #0]
 800d6a4:	bf14      	ite	ne
 800d6a6:	230a      	movne	r3, #10
 800d6a8:	2308      	moveq	r3, #8
 800d6aa:	4851      	ldr	r0, [pc, #324]	@ (800d7f0 <_printf_i+0x238>)
 800d6ac:	2100      	movs	r1, #0
 800d6ae:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d6b2:	6866      	ldr	r6, [r4, #4]
 800d6b4:	2e00      	cmp	r6, #0
 800d6b6:	bfa8      	it	ge
 800d6b8:	6821      	ldrge	r1, [r4, #0]
 800d6ba:	60a6      	str	r6, [r4, #8]
 800d6bc:	bfa4      	itt	ge
 800d6be:	f021 0104 	bicge.w	r1, r1, #4
 800d6c2:	6021      	strge	r1, [r4, #0]
 800d6c4:	b90d      	cbnz	r5, 800d6ca <_printf_i+0x112>
 800d6c6:	2e00      	cmp	r6, #0
 800d6c8:	d04b      	beq.n	800d762 <_printf_i+0x1aa>
 800d6ca:	4616      	mov	r6, r2
 800d6cc:	fbb5 f1f3 	udiv	r1, r5, r3
 800d6d0:	fb03 5711 	mls	r7, r3, r1, r5
 800d6d4:	5dc7      	ldrb	r7, [r0, r7]
 800d6d6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d6da:	462f      	mov	r7, r5
 800d6dc:	42bb      	cmp	r3, r7
 800d6de:	460d      	mov	r5, r1
 800d6e0:	d9f4      	bls.n	800d6cc <_printf_i+0x114>
 800d6e2:	2b08      	cmp	r3, #8
 800d6e4:	d10b      	bne.n	800d6fe <_printf_i+0x146>
 800d6e6:	6823      	ldr	r3, [r4, #0]
 800d6e8:	07df      	lsls	r7, r3, #31
 800d6ea:	d508      	bpl.n	800d6fe <_printf_i+0x146>
 800d6ec:	6923      	ldr	r3, [r4, #16]
 800d6ee:	6861      	ldr	r1, [r4, #4]
 800d6f0:	4299      	cmp	r1, r3
 800d6f2:	bfde      	ittt	le
 800d6f4:	2330      	movle	r3, #48	@ 0x30
 800d6f6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d6fa:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800d6fe:	1b92      	subs	r2, r2, r6
 800d700:	6122      	str	r2, [r4, #16]
 800d702:	464b      	mov	r3, r9
 800d704:	4621      	mov	r1, r4
 800d706:	4640      	mov	r0, r8
 800d708:	f8cd a000 	str.w	sl, [sp]
 800d70c:	aa03      	add	r2, sp, #12
 800d70e:	f7ff fee1 	bl	800d4d4 <_printf_common>
 800d712:	3001      	adds	r0, #1
 800d714:	d14a      	bne.n	800d7ac <_printf_i+0x1f4>
 800d716:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d71a:	b004      	add	sp, #16
 800d71c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d720:	6823      	ldr	r3, [r4, #0]
 800d722:	f043 0320 	orr.w	r3, r3, #32
 800d726:	6023      	str	r3, [r4, #0]
 800d728:	2778      	movs	r7, #120	@ 0x78
 800d72a:	4832      	ldr	r0, [pc, #200]	@ (800d7f4 <_printf_i+0x23c>)
 800d72c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d730:	6823      	ldr	r3, [r4, #0]
 800d732:	6831      	ldr	r1, [r6, #0]
 800d734:	061f      	lsls	r7, r3, #24
 800d736:	f851 5b04 	ldr.w	r5, [r1], #4
 800d73a:	d402      	bmi.n	800d742 <_printf_i+0x18a>
 800d73c:	065f      	lsls	r7, r3, #25
 800d73e:	bf48      	it	mi
 800d740:	b2ad      	uxthmi	r5, r5
 800d742:	6031      	str	r1, [r6, #0]
 800d744:	07d9      	lsls	r1, r3, #31
 800d746:	bf44      	itt	mi
 800d748:	f043 0320 	orrmi.w	r3, r3, #32
 800d74c:	6023      	strmi	r3, [r4, #0]
 800d74e:	b11d      	cbz	r5, 800d758 <_printf_i+0x1a0>
 800d750:	2310      	movs	r3, #16
 800d752:	e7ab      	b.n	800d6ac <_printf_i+0xf4>
 800d754:	4826      	ldr	r0, [pc, #152]	@ (800d7f0 <_printf_i+0x238>)
 800d756:	e7e9      	b.n	800d72c <_printf_i+0x174>
 800d758:	6823      	ldr	r3, [r4, #0]
 800d75a:	f023 0320 	bic.w	r3, r3, #32
 800d75e:	6023      	str	r3, [r4, #0]
 800d760:	e7f6      	b.n	800d750 <_printf_i+0x198>
 800d762:	4616      	mov	r6, r2
 800d764:	e7bd      	b.n	800d6e2 <_printf_i+0x12a>
 800d766:	6833      	ldr	r3, [r6, #0]
 800d768:	6825      	ldr	r5, [r4, #0]
 800d76a:	1d18      	adds	r0, r3, #4
 800d76c:	6961      	ldr	r1, [r4, #20]
 800d76e:	6030      	str	r0, [r6, #0]
 800d770:	062e      	lsls	r6, r5, #24
 800d772:	681b      	ldr	r3, [r3, #0]
 800d774:	d501      	bpl.n	800d77a <_printf_i+0x1c2>
 800d776:	6019      	str	r1, [r3, #0]
 800d778:	e002      	b.n	800d780 <_printf_i+0x1c8>
 800d77a:	0668      	lsls	r0, r5, #25
 800d77c:	d5fb      	bpl.n	800d776 <_printf_i+0x1be>
 800d77e:	8019      	strh	r1, [r3, #0]
 800d780:	2300      	movs	r3, #0
 800d782:	4616      	mov	r6, r2
 800d784:	6123      	str	r3, [r4, #16]
 800d786:	e7bc      	b.n	800d702 <_printf_i+0x14a>
 800d788:	6833      	ldr	r3, [r6, #0]
 800d78a:	2100      	movs	r1, #0
 800d78c:	1d1a      	adds	r2, r3, #4
 800d78e:	6032      	str	r2, [r6, #0]
 800d790:	681e      	ldr	r6, [r3, #0]
 800d792:	6862      	ldr	r2, [r4, #4]
 800d794:	4630      	mov	r0, r6
 800d796:	f000 f877 	bl	800d888 <memchr>
 800d79a:	b108      	cbz	r0, 800d7a0 <_printf_i+0x1e8>
 800d79c:	1b80      	subs	r0, r0, r6
 800d79e:	6060      	str	r0, [r4, #4]
 800d7a0:	6863      	ldr	r3, [r4, #4]
 800d7a2:	6123      	str	r3, [r4, #16]
 800d7a4:	2300      	movs	r3, #0
 800d7a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d7aa:	e7aa      	b.n	800d702 <_printf_i+0x14a>
 800d7ac:	4632      	mov	r2, r6
 800d7ae:	4649      	mov	r1, r9
 800d7b0:	4640      	mov	r0, r8
 800d7b2:	6923      	ldr	r3, [r4, #16]
 800d7b4:	47d0      	blx	sl
 800d7b6:	3001      	adds	r0, #1
 800d7b8:	d0ad      	beq.n	800d716 <_printf_i+0x15e>
 800d7ba:	6823      	ldr	r3, [r4, #0]
 800d7bc:	079b      	lsls	r3, r3, #30
 800d7be:	d413      	bmi.n	800d7e8 <_printf_i+0x230>
 800d7c0:	68e0      	ldr	r0, [r4, #12]
 800d7c2:	9b03      	ldr	r3, [sp, #12]
 800d7c4:	4298      	cmp	r0, r3
 800d7c6:	bfb8      	it	lt
 800d7c8:	4618      	movlt	r0, r3
 800d7ca:	e7a6      	b.n	800d71a <_printf_i+0x162>
 800d7cc:	2301      	movs	r3, #1
 800d7ce:	4632      	mov	r2, r6
 800d7d0:	4649      	mov	r1, r9
 800d7d2:	4640      	mov	r0, r8
 800d7d4:	47d0      	blx	sl
 800d7d6:	3001      	adds	r0, #1
 800d7d8:	d09d      	beq.n	800d716 <_printf_i+0x15e>
 800d7da:	3501      	adds	r5, #1
 800d7dc:	68e3      	ldr	r3, [r4, #12]
 800d7de:	9903      	ldr	r1, [sp, #12]
 800d7e0:	1a5b      	subs	r3, r3, r1
 800d7e2:	42ab      	cmp	r3, r5
 800d7e4:	dcf2      	bgt.n	800d7cc <_printf_i+0x214>
 800d7e6:	e7eb      	b.n	800d7c0 <_printf_i+0x208>
 800d7e8:	2500      	movs	r5, #0
 800d7ea:	f104 0619 	add.w	r6, r4, #25
 800d7ee:	e7f5      	b.n	800d7dc <_printf_i+0x224>
 800d7f0:	0800dbf0 	.word	0x0800dbf0
 800d7f4:	0800dc01 	.word	0x0800dc01

0800d7f8 <_realloc_r>:
 800d7f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7fc:	4680      	mov	r8, r0
 800d7fe:	4615      	mov	r5, r2
 800d800:	460c      	mov	r4, r1
 800d802:	b921      	cbnz	r1, 800d80e <_realloc_r+0x16>
 800d804:	4611      	mov	r1, r2
 800d806:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d80a:	f7ff bb67 	b.w	800cedc <_malloc_r>
 800d80e:	b92a      	cbnz	r2, 800d81c <_realloc_r+0x24>
 800d810:	f7ff fcc0 	bl	800d194 <_free_r>
 800d814:	2400      	movs	r4, #0
 800d816:	4620      	mov	r0, r4
 800d818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d81c:	f000 f850 	bl	800d8c0 <_malloc_usable_size_r>
 800d820:	4285      	cmp	r5, r0
 800d822:	4606      	mov	r6, r0
 800d824:	d802      	bhi.n	800d82c <_realloc_r+0x34>
 800d826:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d82a:	d8f4      	bhi.n	800d816 <_realloc_r+0x1e>
 800d82c:	4629      	mov	r1, r5
 800d82e:	4640      	mov	r0, r8
 800d830:	f7ff fb54 	bl	800cedc <_malloc_r>
 800d834:	4607      	mov	r7, r0
 800d836:	2800      	cmp	r0, #0
 800d838:	d0ec      	beq.n	800d814 <_realloc_r+0x1c>
 800d83a:	42b5      	cmp	r5, r6
 800d83c:	462a      	mov	r2, r5
 800d83e:	4621      	mov	r1, r4
 800d840:	bf28      	it	cs
 800d842:	4632      	movcs	r2, r6
 800d844:	f000 f82e 	bl	800d8a4 <memcpy>
 800d848:	4621      	mov	r1, r4
 800d84a:	4640      	mov	r0, r8
 800d84c:	f7ff fca2 	bl	800d194 <_free_r>
 800d850:	463c      	mov	r4, r7
 800d852:	e7e0      	b.n	800d816 <_realloc_r+0x1e>

0800d854 <memmove>:
 800d854:	4288      	cmp	r0, r1
 800d856:	b510      	push	{r4, lr}
 800d858:	eb01 0402 	add.w	r4, r1, r2
 800d85c:	d902      	bls.n	800d864 <memmove+0x10>
 800d85e:	4284      	cmp	r4, r0
 800d860:	4623      	mov	r3, r4
 800d862:	d807      	bhi.n	800d874 <memmove+0x20>
 800d864:	1e43      	subs	r3, r0, #1
 800d866:	42a1      	cmp	r1, r4
 800d868:	d008      	beq.n	800d87c <memmove+0x28>
 800d86a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d86e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d872:	e7f8      	b.n	800d866 <memmove+0x12>
 800d874:	4601      	mov	r1, r0
 800d876:	4402      	add	r2, r0
 800d878:	428a      	cmp	r2, r1
 800d87a:	d100      	bne.n	800d87e <memmove+0x2a>
 800d87c:	bd10      	pop	{r4, pc}
 800d87e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d882:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d886:	e7f7      	b.n	800d878 <memmove+0x24>

0800d888 <memchr>:
 800d888:	4603      	mov	r3, r0
 800d88a:	b510      	push	{r4, lr}
 800d88c:	b2c9      	uxtb	r1, r1
 800d88e:	4402      	add	r2, r0
 800d890:	4293      	cmp	r3, r2
 800d892:	4618      	mov	r0, r3
 800d894:	d101      	bne.n	800d89a <memchr+0x12>
 800d896:	2000      	movs	r0, #0
 800d898:	e003      	b.n	800d8a2 <memchr+0x1a>
 800d89a:	7804      	ldrb	r4, [r0, #0]
 800d89c:	3301      	adds	r3, #1
 800d89e:	428c      	cmp	r4, r1
 800d8a0:	d1f6      	bne.n	800d890 <memchr+0x8>
 800d8a2:	bd10      	pop	{r4, pc}

0800d8a4 <memcpy>:
 800d8a4:	440a      	add	r2, r1
 800d8a6:	4291      	cmp	r1, r2
 800d8a8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800d8ac:	d100      	bne.n	800d8b0 <memcpy+0xc>
 800d8ae:	4770      	bx	lr
 800d8b0:	b510      	push	{r4, lr}
 800d8b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d8b6:	4291      	cmp	r1, r2
 800d8b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d8bc:	d1f9      	bne.n	800d8b2 <memcpy+0xe>
 800d8be:	bd10      	pop	{r4, pc}

0800d8c0 <_malloc_usable_size_r>:
 800d8c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d8c4:	1f18      	subs	r0, r3, #4
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	bfbc      	itt	lt
 800d8ca:	580b      	ldrlt	r3, [r1, r0]
 800d8cc:	18c0      	addlt	r0, r0, r3
 800d8ce:	4770      	bx	lr

0800d8d0 <_init>:
 800d8d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8d2:	bf00      	nop
 800d8d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8d6:	bc08      	pop	{r3}
 800d8d8:	469e      	mov	lr, r3
 800d8da:	4770      	bx	lr

0800d8dc <_fini>:
 800d8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d8de:	bf00      	nop
 800d8e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d8e2:	bc08      	pop	{r3}
 800d8e4:	469e      	mov	lr, r3
 800d8e6:	4770      	bx	lr
