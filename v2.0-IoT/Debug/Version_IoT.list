
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d3f8  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f34  0800d5dc  0800d5dc  0001d5dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e510  0800e510  00020a10  2**0
                  CONTENTS
  4 .ARM          00000000  0800e510  0800e510  00020a10  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e510  0800e510  00020a10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e510  0800e510  0001e510  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e514  0800e514  0001e514  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a10  20000000  0800e518  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000060c  20000a10  0800ef28  00020a10  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000101c  0800ef28  0002101c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020a10  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020a39  2**0
                  CONTENTS, READONLY
 13 .debug_info   000135d5  00000000  00000000  00020a7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002697  00000000  00000000  00034051  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011b8  00000000  00000000  000366e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e06  00000000  00000000  000378a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aef5  00000000  00000000  000386a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000188f7  00000000  00000000  0005359b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009fd31  00000000  00000000  0006be92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000051e0  00000000  00000000  0010bbc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00110da4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000a10 	.word	0x20000a10
 8000200:	00000000 	.word	0x00000000
 8000204:	0800d5c4 	.word	0x0800d5c4

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000a14 	.word	0x20000a14
 8000220:	0800d5c4 	.word	0x0800d5c4

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <sendMachineData>:
	sprintf(bufferTX, "%s", str);
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
	HAL_Delay(2000);
}

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *machineData) {
 8000234:	b580      	push	{r7, lr}
 8000236:	b0c6      	sub	sp, #280	; 0x118
 8000238:	af02      	add	r7, sp, #8
 800023a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800023e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000242:	6018      	str	r0, [r3, #0]
 8000244:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000248:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800024c:	6019      	str	r1, [r3, #0]
 800024e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000252:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000256:	601a      	str	r2, [r3, #0]
	char local_txA[200];
	char local_txB[50];
	int len;

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", Server);
 8000258:	4a31      	ldr	r2, [pc, #196]	; (8000320 <sendMachineData+0xec>)
 800025a:	4932      	ldr	r1, [pc, #200]	; (8000324 <sendMachineData+0xf0>)
 800025c:	4832      	ldr	r0, [pc, #200]	; (8000328 <sendMachineData+0xf4>)
 800025e:	f00c fd93 	bl	800cd88 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000262:	4831      	ldr	r0, [pc, #196]	; (8000328 <sendMachineData+0xf4>)
 8000264:	f7ff ffde 	bl	8000224 <strlen>
 8000268:	4603      	mov	r3, r0
 800026a:	b29a      	uxth	r2, r3
 800026c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000270:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000274:	492c      	ldr	r1, [pc, #176]	; (8000328 <sendMachineData+0xf4>)
 8000276:	6818      	ldr	r0, [r3, #0]
 8000278:	f00b ff5e 	bl	800c138 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 800027c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000280:	f008 fe8e 	bl	8008fa0 <HAL_Delay>

	sprintf(local_txA,
 8000284:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000288:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800028c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000290:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8000294:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000298:	4924      	ldr	r1, [pc, #144]	; (800032c <sendMachineData+0xf8>)
 800029a:	9100      	str	r1, [sp, #0]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	6812      	ldr	r2, [r2, #0]
 80002a0:	4923      	ldr	r1, [pc, #140]	; (8000330 <sendMachineData+0xfc>)
 80002a2:	f00c fd71 	bl	800cd88 <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", machineID, machineData, Server2);
	len = strlen(local_txA);
 80002a6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80002aa:	4618      	mov	r0, r3
 80002ac:	f7ff ffba 	bl	8000224 <strlen>
 80002b0:	4603      	mov	r3, r0
 80002b2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 80002b6:	f107 0310 	add.w	r3, r7, #16
 80002ba:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80002be:	491d      	ldr	r1, [pc, #116]	; (8000334 <sendMachineData+0x100>)
 80002c0:	4618      	mov	r0, r3
 80002c2:	f00c fd61 	bl	800cd88 <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 80002c6:	f107 0310 	add.w	r3, r7, #16
 80002ca:	4618      	mov	r0, r3
 80002cc:	f7ff ffaa 	bl	8000224 <strlen>
 80002d0:	4603      	mov	r3, r0
 80002d2:	b29a      	uxth	r2, r3
 80002d4:	f107 0110 	add.w	r1, r7, #16
 80002d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80002dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80002e0:	6818      	ldr	r0, [r3, #0]
 80002e2:	f00b ff29 	bl	800c138 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80002e6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002ea:	f008 fe59 	bl	8008fa0 <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 80002ee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80002f2:	4618      	mov	r0, r3
 80002f4:	f7ff ff96 	bl	8000224 <strlen>
 80002f8:	4603      	mov	r3, r0
 80002fa:	b29a      	uxth	r2, r3
 80002fc:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000300:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000304:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000308:	6818      	ldr	r0, [r3, #0]
 800030a:	f00b ff15 	bl	800c138 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 800030e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000312:	f008 fe45 	bl	8008fa0 <HAL_Delay>
}
 8000316:	bf00      	nop
 8000318:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}
 8000320:	0800d628 	.word	0x0800d628
 8000324:	0800d638 	.word	0x0800d638
 8000328:	20000a2c 	.word	0x20000a2c
 800032c:	0800d6b4 	.word	0x0800d6b4
 8000330:	0800d658 	.word	0x0800d658
 8000334:	0800d6c8 	.word	0x0800d6c8

08000338 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8000338:	b580      	push	{r7, lr}
 800033a:	b086      	sub	sp, #24
 800033c:	af02      	add	r7, sp, #8
 800033e:	4603      	mov	r3, r0
 8000340:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000342:	79fb      	ldrb	r3, [r7, #7]
 8000344:	f023 030f 	bic.w	r3, r3, #15
 8000348:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 800034a:	79fb      	ldrb	r3, [r7, #7]
 800034c:	011b      	lsls	r3, r3, #4
 800034e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000350:	7b7b      	ldrb	r3, [r7, #13]
 8000352:	f043 030c 	orr.w	r3, r3, #12
 8000356:	b2db      	uxtb	r3, r3
 8000358:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800035a:	7b7b      	ldrb	r3, [r7, #13]
 800035c:	f043 0308 	orr.w	r3, r3, #8
 8000360:	b2db      	uxtb	r3, r3
 8000362:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000364:	7b3b      	ldrb	r3, [r7, #12]
 8000366:	f043 030c 	orr.w	r3, r3, #12
 800036a:	b2db      	uxtb	r3, r3
 800036c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800036e:	7b3b      	ldrb	r3, [r7, #12]
 8000370:	f043 0308 	orr.w	r3, r3, #8
 8000374:	b2db      	uxtb	r3, r3
 8000376:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8000378:	bf00      	nop
 800037a:	4825      	ldr	r0, [pc, #148]	; (8000410 <lcd_send_cmd+0xd8>)
 800037c:	f00a fa09 	bl	800a792 <HAL_I2C_GetError>
 8000380:	4603      	mov	r3, r0
 8000382:	2b04      	cmp	r3, #4
 8000384:	d0f9      	beq.n	800037a <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000386:	bf00      	nop
 8000388:	4821      	ldr	r0, [pc, #132]	; (8000410 <lcd_send_cmd+0xd8>)
 800038a:	f00a f9f5 	bl	800a778 <HAL_I2C_GetState>
 800038e:	4603      	mov	r3, r0
 8000390:	2b20      	cmp	r3, #32
 8000392:	d1f9      	bne.n	8000388 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8000394:	4b1f      	ldr	r3, [pc, #124]	; (8000414 <lcd_send_cmd+0xdc>)
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	2b00      	cmp	r3, #0
 800039a:	d116      	bne.n	80003ca <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 800039c:	2300      	movs	r3, #0
 800039e:	73fb      	strb	r3, [r7, #15]
 80003a0:	e00f      	b.n	80003c2 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 80003a2:	7bfb      	ldrb	r3, [r7, #15]
 80003a4:	3310      	adds	r3, #16
 80003a6:	443b      	add	r3, r7
 80003a8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80003ac:	7bfb      	ldrb	r3, [r7, #15]
 80003ae:	f022 0208 	bic.w	r2, r2, #8
 80003b2:	b2d2      	uxtb	r2, r2
 80003b4:	3310      	adds	r3, #16
 80003b6:	443b      	add	r3, r7
 80003b8:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80003bc:	7bfb      	ldrb	r3, [r7, #15]
 80003be:	3301      	adds	r3, #1
 80003c0:	73fb      	strb	r3, [r7, #15]
 80003c2:	7bfb      	ldrb	r3, [r7, #15]
 80003c4:	2b03      	cmp	r3, #3
 80003c6:	d9ec      	bls.n	80003a2 <lcd_send_cmd+0x6a>
 80003c8:	e015      	b.n	80003f6 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80003ca:	2300      	movs	r3, #0
 80003cc:	73bb      	strb	r3, [r7, #14]
 80003ce:	e00f      	b.n	80003f0 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 80003d0:	7bbb      	ldrb	r3, [r7, #14]
 80003d2:	3310      	adds	r3, #16
 80003d4:	443b      	add	r3, r7
 80003d6:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80003da:	7bbb      	ldrb	r3, [r7, #14]
 80003dc:	f042 0208 	orr.w	r2, r2, #8
 80003e0:	b2d2      	uxtb	r2, r2
 80003e2:	3310      	adds	r3, #16
 80003e4:	443b      	add	r3, r7
 80003e6:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80003ea:	7bbb      	ldrb	r3, [r7, #14]
 80003ec:	3301      	adds	r3, #1
 80003ee:	73bb      	strb	r3, [r7, #14]
 80003f0:	7bbb      	ldrb	r3, [r7, #14]
 80003f2:	2b03      	cmp	r3, #3
 80003f4:	d9ec      	bls.n	80003d0 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80003f6:	f107 0208 	add.w	r2, r7, #8
 80003fa:	2364      	movs	r3, #100	; 0x64
 80003fc:	9300      	str	r3, [sp, #0]
 80003fe:	2304      	movs	r3, #4
 8000400:	214e      	movs	r1, #78	; 0x4e
 8000402:	4803      	ldr	r0, [pc, #12]	; (8000410 <lcd_send_cmd+0xd8>)
 8000404:	f009 fd58 	bl	8009eb8 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000408:	bf00      	nop
 800040a:	3710      	adds	r7, #16
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	20000b50 	.word	0x20000b50
 8000414:	20000b26 	.word	0x20000b26

08000418 <lcd_send_data>:

void lcd_send_data (char data) {
 8000418:	b580      	push	{r7, lr}
 800041a:	b086      	sub	sp, #24
 800041c:	af02      	add	r7, sp, #8
 800041e:	4603      	mov	r3, r0
 8000420:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000422:	79fb      	ldrb	r3, [r7, #7]
 8000424:	f023 030f 	bic.w	r3, r3, #15
 8000428:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 800042a:	79fb      	ldrb	r3, [r7, #7]
 800042c:	011b      	lsls	r3, r3, #4
 800042e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000430:	7b7b      	ldrb	r3, [r7, #13]
 8000432:	f043 030d 	orr.w	r3, r3, #13
 8000436:	b2db      	uxtb	r3, r3
 8000438:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800043a:	7b7b      	ldrb	r3, [r7, #13]
 800043c:	f043 0309 	orr.w	r3, r3, #9
 8000440:	b2db      	uxtb	r3, r3
 8000442:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000444:	7b3b      	ldrb	r3, [r7, #12]
 8000446:	f043 030d 	orr.w	r3, r3, #13
 800044a:	b2db      	uxtb	r3, r3
 800044c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800044e:	7b3b      	ldrb	r3, [r7, #12]
 8000450:	f043 0309 	orr.w	r3, r3, #9
 8000454:	b2db      	uxtb	r3, r3
 8000456:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8000458:	bf00      	nop
 800045a:	4825      	ldr	r0, [pc, #148]	; (80004f0 <lcd_send_data+0xd8>)
 800045c:	f00a f999 	bl	800a792 <HAL_I2C_GetError>
 8000460:	4603      	mov	r3, r0
 8000462:	2b04      	cmp	r3, #4
 8000464:	d0f9      	beq.n	800045a <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000466:	bf00      	nop
 8000468:	4821      	ldr	r0, [pc, #132]	; (80004f0 <lcd_send_data+0xd8>)
 800046a:	f00a f985 	bl	800a778 <HAL_I2C_GetState>
 800046e:	4603      	mov	r3, r0
 8000470:	2b20      	cmp	r3, #32
 8000472:	d1f9      	bne.n	8000468 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8000474:	4b1f      	ldr	r3, [pc, #124]	; (80004f4 <lcd_send_data+0xdc>)
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d116      	bne.n	80004aa <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 800047c:	2300      	movs	r3, #0
 800047e:	73fb      	strb	r3, [r7, #15]
 8000480:	e00f      	b.n	80004a2 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 8000482:	7bfb      	ldrb	r3, [r7, #15]
 8000484:	3310      	adds	r3, #16
 8000486:	443b      	add	r3, r7
 8000488:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800048c:	7bfb      	ldrb	r3, [r7, #15]
 800048e:	f022 0208 	bic.w	r2, r2, #8
 8000492:	b2d2      	uxtb	r2, r2
 8000494:	3310      	adds	r3, #16
 8000496:	443b      	add	r3, r7
 8000498:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800049c:	7bfb      	ldrb	r3, [r7, #15]
 800049e:	3301      	adds	r3, #1
 80004a0:	73fb      	strb	r3, [r7, #15]
 80004a2:	7bfb      	ldrb	r3, [r7, #15]
 80004a4:	2b03      	cmp	r3, #3
 80004a6:	d9ec      	bls.n	8000482 <lcd_send_data+0x6a>
 80004a8:	e015      	b.n	80004d6 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80004aa:	2300      	movs	r3, #0
 80004ac:	73bb      	strb	r3, [r7, #14]
 80004ae:	e00f      	b.n	80004d0 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 80004b0:	7bbb      	ldrb	r3, [r7, #14]
 80004b2:	3310      	adds	r3, #16
 80004b4:	443b      	add	r3, r7
 80004b6:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80004ba:	7bbb      	ldrb	r3, [r7, #14]
 80004bc:	f042 0208 	orr.w	r2, r2, #8
 80004c0:	b2d2      	uxtb	r2, r2
 80004c2:	3310      	adds	r3, #16
 80004c4:	443b      	add	r3, r7
 80004c6:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80004ca:	7bbb      	ldrb	r3, [r7, #14]
 80004cc:	3301      	adds	r3, #1
 80004ce:	73bb      	strb	r3, [r7, #14]
 80004d0:	7bbb      	ldrb	r3, [r7, #14]
 80004d2:	2b03      	cmp	r3, #3
 80004d4:	d9ec      	bls.n	80004b0 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80004d6:	f107 0208 	add.w	r2, r7, #8
 80004da:	2364      	movs	r3, #100	; 0x64
 80004dc:	9300      	str	r3, [sp, #0]
 80004de:	2304      	movs	r3, #4
 80004e0:	214e      	movs	r1, #78	; 0x4e
 80004e2:	4803      	ldr	r0, [pc, #12]	; (80004f0 <lcd_send_data+0xd8>)
 80004e4:	f009 fce8 	bl	8009eb8 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 80004e8:	bf00      	nop
 80004ea:	3710      	adds	r7, #16
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	20000b50 	.word	0x20000b50
 80004f4:	20000b26 	.word	0x20000b26

080004f8 <lcd_send_string>:

void lcd_send_string (char *str) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
	while (*str) {
 8000500:	e006      	b.n	8000510 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	1c5a      	adds	r2, r3, #1
 8000506:	607a      	str	r2, [r7, #4]
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	4618      	mov	r0, r3
 800050c:	f7ff ff84 	bl	8000418 <lcd_send_data>
	while (*str) {
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d1f4      	bne.n	8000502 <lcd_send_string+0xa>
	}
}
 8000518:	bf00      	nop
 800051a:	bf00      	nop
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
	...

08000524 <lcd_send_char>:

void lcd_send_char(char ch) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b086      	sub	sp, #24
 8000528:	af02      	add	r7, sp, #8
 800052a:	4603      	mov	r3, r0
 800052c:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 800052e:	79fb      	ldrb	r3, [r7, #7]
 8000530:	f023 030f 	bic.w	r3, r3, #15
 8000534:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	011b      	lsls	r3, r3, #4
 800053a:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 800053c:	7b7b      	ldrb	r3, [r7, #13]
 800053e:	f043 030d 	orr.w	r3, r3, #13
 8000542:	b2db      	uxtb	r3, r3
 8000544:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8000546:	7b7b      	ldrb	r3, [r7, #13]
 8000548:	f043 0309 	orr.w	r3, r3, #9
 800054c:	b2db      	uxtb	r3, r3
 800054e:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8000550:	7b3b      	ldrb	r3, [r7, #12]
 8000552:	f043 030d 	orr.w	r3, r3, #13
 8000556:	b2db      	uxtb	r3, r3
 8000558:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 800055a:	7b3b      	ldrb	r3, [r7, #12]
 800055c:	f043 0309 	orr.w	r3, r3, #9
 8000560:	b2db      	uxtb	r3, r3
 8000562:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8000564:	bf00      	nop
 8000566:	4825      	ldr	r0, [pc, #148]	; (80005fc <lcd_send_char+0xd8>)
 8000568:	f00a f913 	bl	800a792 <HAL_I2C_GetError>
 800056c:	4603      	mov	r3, r0
 800056e:	2b04      	cmp	r3, #4
 8000570:	d0f9      	beq.n	8000566 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000572:	bf00      	nop
 8000574:	4821      	ldr	r0, [pc, #132]	; (80005fc <lcd_send_char+0xd8>)
 8000576:	f00a f8ff 	bl	800a778 <HAL_I2C_GetState>
 800057a:	4603      	mov	r3, r0
 800057c:	2b20      	cmp	r3, #32
 800057e:	d1f9      	bne.n	8000574 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 8000580:	4b1f      	ldr	r3, [pc, #124]	; (8000600 <lcd_send_char+0xdc>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d116      	bne.n	80005b6 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8000588:	2300      	movs	r3, #0
 800058a:	73fb      	strb	r3, [r7, #15]
 800058c:	e00f      	b.n	80005ae <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 800058e:	7bfb      	ldrb	r3, [r7, #15]
 8000590:	3310      	adds	r3, #16
 8000592:	443b      	add	r3, r7
 8000594:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000598:	7bfb      	ldrb	r3, [r7, #15]
 800059a:	f022 0208 	bic.w	r2, r2, #8
 800059e:	b2d2      	uxtb	r2, r2
 80005a0:	3310      	adds	r3, #16
 80005a2:	443b      	add	r3, r7
 80005a4:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80005a8:	7bfb      	ldrb	r3, [r7, #15]
 80005aa:	3301      	adds	r3, #1
 80005ac:	73fb      	strb	r3, [r7, #15]
 80005ae:	7bfb      	ldrb	r3, [r7, #15]
 80005b0:	2b03      	cmp	r3, #3
 80005b2:	d9ec      	bls.n	800058e <lcd_send_char+0x6a>
 80005b4:	e015      	b.n	80005e2 <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 80005b6:	2300      	movs	r3, #0
 80005b8:	73bb      	strb	r3, [r7, #14]
 80005ba:	e00f      	b.n	80005dc <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 80005bc:	7bbb      	ldrb	r3, [r7, #14]
 80005be:	3310      	adds	r3, #16
 80005c0:	443b      	add	r3, r7
 80005c2:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80005c6:	7bbb      	ldrb	r3, [r7, #14]
 80005c8:	f042 0208 	orr.w	r2, r2, #8
 80005cc:	b2d2      	uxtb	r2, r2
 80005ce:	3310      	adds	r3, #16
 80005d0:	443b      	add	r3, r7
 80005d2:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80005d6:	7bbb      	ldrb	r3, [r7, #14]
 80005d8:	3301      	adds	r3, #1
 80005da:	73bb      	strb	r3, [r7, #14]
 80005dc:	7bbb      	ldrb	r3, [r7, #14]
 80005de:	2b03      	cmp	r3, #3
 80005e0:	d9ec      	bls.n	80005bc <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 80005e2:	f107 0208 	add.w	r2, r7, #8
 80005e6:	2364      	movs	r3, #100	; 0x64
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2304      	movs	r3, #4
 80005ec:	214e      	movs	r1, #78	; 0x4e
 80005ee:	4803      	ldr	r0, [pc, #12]	; (80005fc <lcd_send_char+0xd8>)
 80005f0:	f009 fc62 	bl	8009eb8 <HAL_I2C_Master_Transmit>
}
 80005f4:	bf00      	nop
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000b50 	.word	0x20000b50
 8000600:	20000b26 	.word	0x20000b26

08000604 <lcd_init>:

void lcd_init (void) {
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8000608:	2002      	movs	r0, #2
 800060a:	f7ff fe95 	bl	8000338 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 800060e:	2028      	movs	r0, #40	; 0x28
 8000610:	f7ff fe92 	bl	8000338 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8000614:	200c      	movs	r0, #12
 8000616:	f7ff fe8f 	bl	8000338 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 800061a:	2080      	movs	r0, #128	; 0x80
 800061c:	f7ff fe8c 	bl	8000338 <lcd_send_cmd>
	lcd_backlight(1);
 8000620:	2001      	movs	r0, #1
 8000622:	f000 f86d 	bl	8000700 <lcd_backlight>
}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}

0800062a <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 800062a:	b580      	push	{r7, lr}
 800062c:	b082      	sub	sp, #8
 800062e:	af00      	add	r7, sp, #0
 8000630:	4603      	mov	r3, r0
 8000632:	460a      	mov	r2, r1
 8000634:	71fb      	strb	r3, [r7, #7]
 8000636:	4613      	mov	r3, r2
 8000638:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	2b01      	cmp	r3, #1
 800063e:	d106      	bne.n	800064e <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8000640:	79bb      	ldrb	r3, [r7, #6]
 8000642:	337f      	adds	r3, #127	; 0x7f
 8000644:	b2db      	uxtb	r3, r3
 8000646:	4618      	mov	r0, r3
 8000648:	f7ff fe76 	bl	8000338 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 800064c:	e008      	b.n	8000660 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	2b02      	cmp	r3, #2
 8000652:	d105      	bne.n	8000660 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8000654:	79bb      	ldrb	r3, [r7, #6]
 8000656:	3b41      	subs	r3, #65	; 0x41
 8000658:	b2db      	uxtb	r3, r3
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff fe6c 	bl	8000338 <lcd_send_cmd>
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	603a      	str	r2, [r7, #0]
 8000672:	71fb      	strb	r3, [r7, #7]
 8000674:	460b      	mov	r3, r1
 8000676:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8000678:	79ba      	ldrb	r2, [r7, #6]
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	4611      	mov	r1, r2
 800067e:	4618      	mov	r0, r3
 8000680:	f7ff ffd3 	bl	800062a <lcd_gotoxy>
	lcd_send_string(str);
 8000684:	6838      	ldr	r0, [r7, #0]
 8000686:	f7ff ff37 	bl	80004f8 <lcd_send_string>
}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}

08000692 <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8000692:	b580      	push	{r7, lr}
 8000694:	b082      	sub	sp, #8
 8000696:	af00      	add	r7, sp, #0
 8000698:	4603      	mov	r3, r0
 800069a:	71fb      	strb	r3, [r7, #7]
 800069c:	460b      	mov	r3, r1
 800069e:	71bb      	strb	r3, [r7, #6]
 80006a0:	4613      	mov	r3, r2
 80006a2:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 80006a4:	79ba      	ldrb	r2, [r7, #6]
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	4611      	mov	r1, r2
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff ffbd 	bl	800062a <lcd_gotoxy>
    lcd_send_char(ch);
 80006b0:	797b      	ldrb	r3, [r7, #5]
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff ff36 	bl	8000524 <lcd_send_char>
}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <lcd_clear>:

void lcd_clear(void) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 80006c4:	2001      	movs	r0, #1
 80006c6:	f7ff fe37 	bl	8000338 <lcd_send_cmd>
    HAL_Delay(2);
 80006ca:	2002      	movs	r0, #2
 80006cc:	f008 fc68 	bl	8008fa0 <HAL_Delay>
}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	460a      	mov	r2, r1
 80006de:	71fb      	strb	r3, [r7, #7]
 80006e0:	4613      	mov	r3, r2
 80006e2:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 80006e4:	79ba      	ldrb	r2, [r7, #6]
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	4611      	mov	r1, r2
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff ff9d 	bl	800062a <lcd_gotoxy>

    lcd_send_char(' ');
 80006f0:	2020      	movs	r0, #32
 80006f2:	f7ff ff17 	bl	8000524 <lcd_send_char>
}
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
	...

08000700 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 800070a:	4a05      	ldr	r2, [pc, #20]	; (8000720 <lcd_backlight+0x20>)
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8000710:	2000      	movs	r0, #0
 8000712:	f7ff fe11 	bl	8000338 <lcd_send_cmd>
}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000b26 	.word	0x20000b26

08000724 <lcd_cursor>:

void lcd_cursor(int state) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2b01      	cmp	r3, #1
 8000730:	d106      	bne.n	8000740 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8000732:	200e      	movs	r0, #14
 8000734:	f7ff fe00 	bl	8000338 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8000738:	200f      	movs	r0, #15
 800073a:	f7ff fdfd 	bl	8000338 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 800073e:	e002      	b.n	8000746 <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8000740:	200c      	movs	r0, #12
 8000742:	f7ff fdf9 	bl	8000338 <lcd_send_cmd>
}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
	...

08000750 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000754:	f3bf 8f4f 	dsb	sy
}
 8000758:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <__NVIC_SystemReset+0x24>)
 800075c:	68db      	ldr	r3, [r3, #12]
 800075e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000762:	4904      	ldr	r1, [pc, #16]	; (8000774 <__NVIC_SystemReset+0x24>)
 8000764:	4b04      	ldr	r3, [pc, #16]	; (8000778 <__NVIC_SystemReset+0x28>)
 8000766:	4313      	orrs	r3, r2
 8000768:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800076a:	f3bf 8f4f 	dsb	sy
}
 800076e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000770:	bf00      	nop
 8000772:	e7fd      	b.n	8000770 <__NVIC_SystemReset+0x20>
 8000774:	e000ed00 	.word	0xe000ed00
 8000778:	05fa0004 	.word	0x05fa0004

0800077c <copyText>:
char *secilenDilText;
char *menudenCikisText;
char *enteraBasinizText;
char *hataKoduText;

char* copyText(const char* text) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
    char* result = (char*)malloc(strlen(text) + 1);
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f7ff fd4d 	bl	8000224 <strlen>
 800078a:	4603      	mov	r3, r0
 800078c:	3301      	adds	r3, #1
 800078e:	4618      	mov	r0, r3
 8000790:	f00c fa04 	bl	800cb9c <malloc>
 8000794:	4603      	mov	r3, r0
 8000796:	60fb      	str	r3, [r7, #12]
    if (result != NULL) {
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d003      	beq.n	80007a6 <copyText+0x2a>
        strcpy(result, text);
 800079e:	6879      	ldr	r1, [r7, #4]
 80007a0:	68f8      	ldr	r0, [r7, #12]
 80007a2:	f00c fb65 	bl	800ce70 <strcpy>
    }
    return result;
 80007a6:	68fb      	ldr	r3, [r7, #12]
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3710      	adds	r7, #16
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <printTemplate>:
        }
    }
    return result;
}

void printTemplate(int type, int page) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 80007ba:	20c8      	movs	r0, #200	; 0xc8
 80007bc:	f008 fbf0 	bl	8008fa0 <HAL_Delay>
	lcd_clear();
 80007c0:	f7ff ff7e 	bl	80006c0 <lcd_clear>
	if(type == 1 && page == 0) {
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d143      	bne.n	8000852 <printTemplate+0xa2>
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d140      	bne.n	8000852 <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 80007d0:	4a9d      	ldr	r2, [pc, #628]	; (8000a48 <printTemplate+0x298>)
 80007d2:	2101      	movs	r1, #1
 80007d4:	2001      	movs	r0, #1
 80007d6:	f7ff ff47 	bl	8000668 <lcd_print>
		lcd_print(2, 3, "0");
 80007da:	4a9c      	ldr	r2, [pc, #624]	; (8000a4c <printTemplate+0x29c>)
 80007dc:	2103      	movs	r1, #3
 80007de:	2002      	movs	r0, #2
 80007e0:	f7ff ff42 	bl	8000668 <lcd_print>
		lcd_print(2, 4, "1");
 80007e4:	4a9a      	ldr	r2, [pc, #616]	; (8000a50 <printTemplate+0x2a0>)
 80007e6:	2104      	movs	r1, #4
 80007e8:	2002      	movs	r0, #2
 80007ea:	f7ff ff3d 	bl	8000668 <lcd_print>
		lcd_print(2, 5, "2");
 80007ee:	4a99      	ldr	r2, [pc, #612]	; (8000a54 <printTemplate+0x2a4>)
 80007f0:	2105      	movs	r1, #5
 80007f2:	2002      	movs	r0, #2
 80007f4:	f7ff ff38 	bl	8000668 <lcd_print>
		lcd_print(2, 6, "3");
 80007f8:	4a97      	ldr	r2, [pc, #604]	; (8000a58 <printTemplate+0x2a8>)
 80007fa:	2106      	movs	r1, #6
 80007fc:	2002      	movs	r0, #2
 80007fe:	f7ff ff33 	bl	8000668 <lcd_print>
		lcd_print(2, 7, "4");
 8000802:	4a96      	ldr	r2, [pc, #600]	; (8000a5c <printTemplate+0x2ac>)
 8000804:	2107      	movs	r1, #7
 8000806:	2002      	movs	r0, #2
 8000808:	f7ff ff2e 	bl	8000668 <lcd_print>
		lcd_print(2, 10, "5");
 800080c:	4a94      	ldr	r2, [pc, #592]	; (8000a60 <printTemplate+0x2b0>)
 800080e:	210a      	movs	r1, #10
 8000810:	2002      	movs	r0, #2
 8000812:	f7ff ff29 	bl	8000668 <lcd_print>
		lcd_print(2, 11, "6");
 8000816:	4a93      	ldr	r2, [pc, #588]	; (8000a64 <printTemplate+0x2b4>)
 8000818:	210b      	movs	r1, #11
 800081a:	2002      	movs	r0, #2
 800081c:	f7ff ff24 	bl	8000668 <lcd_print>
		lcd_print(2, 12, "7");
 8000820:	4a91      	ldr	r2, [pc, #580]	; (8000a68 <printTemplate+0x2b8>)
 8000822:	210c      	movs	r1, #12
 8000824:	2002      	movs	r0, #2
 8000826:	f7ff ff1f 	bl	8000668 <lcd_print>
		lcd_print(2, 13, "8");
 800082a:	4a90      	ldr	r2, [pc, #576]	; (8000a6c <printTemplate+0x2bc>)
 800082c:	210d      	movs	r1, #13
 800082e:	2002      	movs	r0, #2
 8000830:	f7ff ff1a 	bl	8000668 <lcd_print>
		lcd_print(2, 14, "9");
 8000834:	4a8e      	ldr	r2, [pc, #568]	; (8000a70 <printTemplate+0x2c0>)
 8000836:	210e      	movs	r1, #14
 8000838:	2002      	movs	r0, #2
 800083a:	f7ff ff15 	bl	8000668 <lcd_print>
		lcd_print(1, 5, machineID);
 800083e:	4a8d      	ldr	r2, [pc, #564]	; (8000a74 <printTemplate+0x2c4>)
 8000840:	2105      	movs	r1, #5
 8000842:	2001      	movs	r0, #1
 8000844:	f7ff ff10 	bl	8000668 <lcd_print>
		lcd_gotoxy(2, 3);
 8000848:	2103      	movs	r1, #3
 800084a:	2002      	movs	r0, #2
 800084c:	f7ff feed 	bl	800062a <lcd_gotoxy>
			lcd_print(1, 1, "PASS: ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 8000850:	e0f5      	b.n	8000a3e <printTemplate+0x28e>
	} else if(type == 2) {
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2b02      	cmp	r3, #2
 8000856:	d178      	bne.n	800094a <printTemplate+0x19a>
		if(page == 1) {
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	2b01      	cmp	r3, #1
 800085c:	d114      	bne.n	8000888 <printTemplate+0xd8>
			lcd_clear();
 800085e:	f7ff ff2f 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 8000862:	2064      	movs	r0, #100	; 0x64
 8000864:	f008 fb9c 	bl	8008fa0 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000868:	4a83      	ldr	r2, [pc, #524]	; (8000a78 <printTemplate+0x2c8>)
 800086a:	2101      	movs	r1, #1
 800086c:	2001      	movs	r0, #1
 800086e:	f7ff fefb 	bl	8000668 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000872:	4a82      	ldr	r2, [pc, #520]	; (8000a7c <printTemplate+0x2cc>)
 8000874:	2107      	movs	r1, #7
 8000876:	2001      	movs	r0, #1
 8000878:	f7ff fef6 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 800087c:	4a80      	ldr	r2, [pc, #512]	; (8000a80 <printTemplate+0x2d0>)
 800087e:	2101      	movs	r1, #1
 8000880:	2002      	movs	r0, #2
 8000882:	f7ff fef1 	bl	8000668 <lcd_print>
}
 8000886:	e0da      	b.n	8000a3e <printTemplate+0x28e>
		} else if(page == 2) {
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	2b02      	cmp	r3, #2
 800088c:	d114      	bne.n	80008b8 <printTemplate+0x108>
			lcd_clear();
 800088e:	f7ff ff17 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 8000892:	2064      	movs	r0, #100	; 0x64
 8000894:	f008 fb84 	bl	8008fa0 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000898:	4a77      	ldr	r2, [pc, #476]	; (8000a78 <printTemplate+0x2c8>)
 800089a:	2101      	movs	r1, #1
 800089c:	2001      	movs	r0, #1
 800089e:	f7ff fee3 	bl	8000668 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80008a2:	4a76      	ldr	r2, [pc, #472]	; (8000a7c <printTemplate+0x2cc>)
 80008a4:	2107      	movs	r1, #7
 80008a6:	2001      	movs	r0, #1
 80008a8:	f7ff fede 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 80008ac:	4a75      	ldr	r2, [pc, #468]	; (8000a84 <printTemplate+0x2d4>)
 80008ae:	2101      	movs	r1, #1
 80008b0:	2002      	movs	r0, #2
 80008b2:	f7ff fed9 	bl	8000668 <lcd_print>
}
 80008b6:	e0c2      	b.n	8000a3e <printTemplate+0x28e>
		} else if(page == 3) {
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	2b03      	cmp	r3, #3
 80008bc:	d114      	bne.n	80008e8 <printTemplate+0x138>
			lcd_clear();
 80008be:	f7ff feff 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 80008c2:	2064      	movs	r0, #100	; 0x64
 80008c4:	f008 fb6c 	bl	8008fa0 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 80008c8:	4a6b      	ldr	r2, [pc, #428]	; (8000a78 <printTemplate+0x2c8>)
 80008ca:	2101      	movs	r1, #1
 80008cc:	2001      	movs	r0, #1
 80008ce:	f7ff fecb 	bl	8000668 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80008d2:	4a6a      	ldr	r2, [pc, #424]	; (8000a7c <printTemplate+0x2cc>)
 80008d4:	2107      	movs	r1, #7
 80008d6:	2001      	movs	r0, #1
 80008d8:	f7ff fec6 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 80008dc:	4a6a      	ldr	r2, [pc, #424]	; (8000a88 <printTemplate+0x2d8>)
 80008de:	2101      	movs	r1, #1
 80008e0:	2002      	movs	r0, #2
 80008e2:	f7ff fec1 	bl	8000668 <lcd_print>
}
 80008e6:	e0aa      	b.n	8000a3e <printTemplate+0x28e>
		} else if(page == 4) {
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	2b04      	cmp	r3, #4
 80008ec:	d114      	bne.n	8000918 <printTemplate+0x168>
			lcd_clear();
 80008ee:	f7ff fee7 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 80008f2:	2064      	movs	r0, #100	; 0x64
 80008f4:	f008 fb54 	bl	8008fa0 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 80008f8:	4a5f      	ldr	r2, [pc, #380]	; (8000a78 <printTemplate+0x2c8>)
 80008fa:	2101      	movs	r1, #1
 80008fc:	2001      	movs	r0, #1
 80008fe:	f7ff feb3 	bl	8000668 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000902:	4a5e      	ldr	r2, [pc, #376]	; (8000a7c <printTemplate+0x2cc>)
 8000904:	2107      	movs	r1, #7
 8000906:	2001      	movs	r0, #1
 8000908:	f7ff feae 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 800090c:	4a5f      	ldr	r2, [pc, #380]	; (8000a8c <printTemplate+0x2dc>)
 800090e:	2101      	movs	r1, #1
 8000910:	2002      	movs	r0, #2
 8000912:	f7ff fea9 	bl	8000668 <lcd_print>
}
 8000916:	e092      	b.n	8000a3e <printTemplate+0x28e>
		} else if(page == 5) {
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	2b05      	cmp	r3, #5
 800091c:	f040 808f 	bne.w	8000a3e <printTemplate+0x28e>
			lcd_clear();
 8000920:	f7ff fece 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 8000924:	2064      	movs	r0, #100	; 0x64
 8000926:	f008 fb3b 	bl	8008fa0 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 800092a:	4a53      	ldr	r2, [pc, #332]	; (8000a78 <printTemplate+0x2c8>)
 800092c:	2101      	movs	r1, #1
 800092e:	2001      	movs	r0, #1
 8000930:	f7ff fe9a 	bl	8000668 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000934:	4a51      	ldr	r2, [pc, #324]	; (8000a7c <printTemplate+0x2cc>)
 8000936:	2107      	movs	r1, #7
 8000938:	2001      	movs	r0, #1
 800093a:	f7ff fe95 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 800093e:	4a54      	ldr	r2, [pc, #336]	; (8000a90 <printTemplate+0x2e0>)
 8000940:	2101      	movs	r1, #1
 8000942:	2002      	movs	r0, #2
 8000944:	f7ff fe90 	bl	8000668 <lcd_print>
}
 8000948:	e079      	b.n	8000a3e <printTemplate+0x28e>
	} else if(type == 3) {
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2b03      	cmp	r3, #3
 800094e:	d176      	bne.n	8000a3e <printTemplate+0x28e>
		if(page == 1) {
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	2b01      	cmp	r3, #1
 8000954:	d114      	bne.n	8000980 <printTemplate+0x1d0>
			lcd_clear();
 8000956:	f7ff feb3 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 800095a:	2064      	movs	r0, #100	; 0x64
 800095c:	f008 fb20 	bl	8008fa0 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000960:	4a4c      	ldr	r2, [pc, #304]	; (8000a94 <printTemplate+0x2e4>)
 8000962:	2101      	movs	r1, #1
 8000964:	2001      	movs	r0, #1
 8000966:	f7ff fe7f 	bl	8000668 <lcd_print>
			lcd_print(1, 7, wifiPass);
 800096a:	4a4b      	ldr	r2, [pc, #300]	; (8000a98 <printTemplate+0x2e8>)
 800096c:	2107      	movs	r1, #7
 800096e:	2001      	movs	r0, #1
 8000970:	f7ff fe7a 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000974:	4a42      	ldr	r2, [pc, #264]	; (8000a80 <printTemplate+0x2d0>)
 8000976:	2101      	movs	r1, #1
 8000978:	2002      	movs	r0, #2
 800097a:	f7ff fe75 	bl	8000668 <lcd_print>
}
 800097e:	e05e      	b.n	8000a3e <printTemplate+0x28e>
		} else if(page == 2) {
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	2b02      	cmp	r3, #2
 8000984:	d114      	bne.n	80009b0 <printTemplate+0x200>
			lcd_clear();
 8000986:	f7ff fe9b 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 800098a:	2064      	movs	r0, #100	; 0x64
 800098c:	f008 fb08 	bl	8008fa0 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000990:	4a40      	ldr	r2, [pc, #256]	; (8000a94 <printTemplate+0x2e4>)
 8000992:	2101      	movs	r1, #1
 8000994:	2001      	movs	r0, #1
 8000996:	f7ff fe67 	bl	8000668 <lcd_print>
			lcd_print(1, 7, wifiPass);
 800099a:	4a3f      	ldr	r2, [pc, #252]	; (8000a98 <printTemplate+0x2e8>)
 800099c:	2107      	movs	r1, #7
 800099e:	2001      	movs	r0, #1
 80009a0:	f7ff fe62 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 80009a4:	4a37      	ldr	r2, [pc, #220]	; (8000a84 <printTemplate+0x2d4>)
 80009a6:	2101      	movs	r1, #1
 80009a8:	2002      	movs	r0, #2
 80009aa:	f7ff fe5d 	bl	8000668 <lcd_print>
}
 80009ae:	e046      	b.n	8000a3e <printTemplate+0x28e>
		} else if(page == 3) {
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	2b03      	cmp	r3, #3
 80009b4:	d114      	bne.n	80009e0 <printTemplate+0x230>
			lcd_clear();
 80009b6:	f7ff fe83 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 80009ba:	2064      	movs	r0, #100	; 0x64
 80009bc:	f008 faf0 	bl	8008fa0 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80009c0:	4a34      	ldr	r2, [pc, #208]	; (8000a94 <printTemplate+0x2e4>)
 80009c2:	2101      	movs	r1, #1
 80009c4:	2001      	movs	r0, #1
 80009c6:	f7ff fe4f 	bl	8000668 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80009ca:	4a33      	ldr	r2, [pc, #204]	; (8000a98 <printTemplate+0x2e8>)
 80009cc:	2107      	movs	r1, #7
 80009ce:	2001      	movs	r0, #1
 80009d0:	f7ff fe4a 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 80009d4:	4a2c      	ldr	r2, [pc, #176]	; (8000a88 <printTemplate+0x2d8>)
 80009d6:	2101      	movs	r1, #1
 80009d8:	2002      	movs	r0, #2
 80009da:	f7ff fe45 	bl	8000668 <lcd_print>
}
 80009de:	e02e      	b.n	8000a3e <printTemplate+0x28e>
		} else if(page == 4) {
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	2b04      	cmp	r3, #4
 80009e4:	d114      	bne.n	8000a10 <printTemplate+0x260>
			lcd_clear();
 80009e6:	f7ff fe6b 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 80009ea:	2064      	movs	r0, #100	; 0x64
 80009ec:	f008 fad8 	bl	8008fa0 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80009f0:	4a28      	ldr	r2, [pc, #160]	; (8000a94 <printTemplate+0x2e4>)
 80009f2:	2101      	movs	r1, #1
 80009f4:	2001      	movs	r0, #1
 80009f6:	f7ff fe37 	bl	8000668 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80009fa:	4a27      	ldr	r2, [pc, #156]	; (8000a98 <printTemplate+0x2e8>)
 80009fc:	2107      	movs	r1, #7
 80009fe:	2001      	movs	r0, #1
 8000a00:	f7ff fe32 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000a04:	4a21      	ldr	r2, [pc, #132]	; (8000a8c <printTemplate+0x2dc>)
 8000a06:	2101      	movs	r1, #1
 8000a08:	2002      	movs	r0, #2
 8000a0a:	f7ff fe2d 	bl	8000668 <lcd_print>
}
 8000a0e:	e016      	b.n	8000a3e <printTemplate+0x28e>
		} else if(page == 5) {
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	2b05      	cmp	r3, #5
 8000a14:	d113      	bne.n	8000a3e <printTemplate+0x28e>
			lcd_clear();
 8000a16:	f7ff fe53 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 8000a1a:	2064      	movs	r0, #100	; 0x64
 8000a1c:	f008 fac0 	bl	8008fa0 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000a20:	4a1c      	ldr	r2, [pc, #112]	; (8000a94 <printTemplate+0x2e4>)
 8000a22:	2101      	movs	r1, #1
 8000a24:	2001      	movs	r0, #1
 8000a26:	f7ff fe1f 	bl	8000668 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000a2a:	4a1b      	ldr	r2, [pc, #108]	; (8000a98 <printTemplate+0x2e8>)
 8000a2c:	2107      	movs	r1, #7
 8000a2e:	2001      	movs	r0, #1
 8000a30:	f7ff fe1a 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000a34:	4a16      	ldr	r2, [pc, #88]	; (8000a90 <printTemplate+0x2e0>)
 8000a36:	2101      	movs	r1, #1
 8000a38:	2002      	movs	r0, #2
 8000a3a:	f7ff fe15 	bl	8000668 <lcd_print>
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	0800d754 	.word	0x0800d754
 8000a4c:	0800d75c 	.word	0x0800d75c
 8000a50:	0800d760 	.word	0x0800d760
 8000a54:	0800d764 	.word	0x0800d764
 8000a58:	0800d768 	.word	0x0800d768
 8000a5c:	0800d76c 	.word	0x0800d76c
 8000a60:	0800d770 	.word	0x0800d770
 8000a64:	0800d774 	.word	0x0800d774
 8000a68:	0800d778 	.word	0x0800d778
 8000a6c:	0800d77c 	.word	0x0800d77c
 8000a70:	0800d780 	.word	0x0800d780
 8000a74:	20000ce0 	.word	0x20000ce0
 8000a78:	0800d784 	.word	0x0800d784
 8000a7c:	20000cec 	.word	0x20000cec
 8000a80:	0800d78c 	.word	0x0800d78c
 8000a84:	0800d7a0 	.word	0x0800d7a0
 8000a88:	0800d7b4 	.word	0x0800d7b4
 8000a8c:	0800d7c8 	.word	0x0800d7c8
 8000a90:	0800d7dc 	.word	0x0800d7dc
 8000a94:	0800d7f0 	.word	0x0800d7f0
 8000a98:	20000d10 	.word	0x20000d10

08000a9c <getCharFromCursorPosition>:

char getCharFromCursorPosition(int cursorPosition) {
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
    return charactersArray[cursorPosition];
 8000aa4:	4a04      	ldr	r2, [pc, #16]	; (8000ab8 <getCharFromCursorPosition+0x1c>)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	781b      	ldrb	r3, [r3, #0]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bc80      	pop	{r7}
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	20000960 	.word	0x20000960

08000abc <takeMachineID>:

char getNumbersFromCursorPosition(int cursorPosition) {
	return numbersArray[cursorPosition];
}

void takeMachineID(int state) {
 8000abc:	b590      	push	{r4, r7, lr}
 8000abe:	b087      	sub	sp, #28
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
	mainSection:
	lcd_cursor(1);
 8000ac4:	2001      	movs	r0, #1
 8000ac6:	f7ff fe2d 	bl	8000724 <lcd_cursor>

    int cursorPosition = 3;
 8000aca:	2303      	movs	r3, #3
 8000acc:	617b      	str	r3, [r7, #20]
    int machineIDLoc = 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	613b      	str	r3, [r7, #16]
    int writeLoc = 5;
 8000ad2:	2305      	movs	r3, #5
 8000ad4:	60fb      	str	r3, [r7, #12]

    int saveVal = 49;
 8000ad6:	2331      	movs	r3, #49	; 0x31
 8000ad8:	60bb      	str	r3, [r7, #8]

    if(state == 0) {
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d104      	bne.n	8000aea <takeMachineID+0x2e>
    	memset(machineID, 0, sizeof(machineID));
 8000ae0:	220c      	movs	r2, #12
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	4891      	ldr	r0, [pc, #580]	; (8000d2c <takeMachineID+0x270>)
 8000ae6:	f00c f96f 	bl	800cdc8 <memset>
    }
    HAL_Delay(100);
 8000aea:	2064      	movs	r0, #100	; 0x64
 8000aec:	f008 fa58 	bl	8008fa0 <HAL_Delay>

    printTemplate(1, 0);
 8000af0:	2100      	movs	r1, #0
 8000af2:	2001      	movs	r0, #1
 8000af4:	f7ff fe5c 	bl	80007b0 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000af8:	2108      	movs	r1, #8
 8000afa:	488d      	ldr	r0, [pc, #564]	; (8000d30 <takeMachineID+0x274>)
 8000afc:	f009 f820 	bl	8009b40 <HAL_GPIO_ReadPin>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b01      	cmp	r3, #1
 8000b04:	d11a      	bne.n	8000b3c <takeMachineID+0x80>
        	lcd_cursor(0);
 8000b06:	2000      	movs	r0, #0
 8000b08:	f7ff fe0c 	bl	8000724 <lcd_cursor>

        	if(strlen(machineID) != 12) {
 8000b0c:	4887      	ldr	r0, [pc, #540]	; (8000d2c <takeMachineID+0x270>)
 8000b0e:	f7ff fb89 	bl	8000224 <strlen>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b0c      	cmp	r3, #12
 8000b16:	f000 8103 	beq.w	8000d20 <takeMachineID+0x264>
        		lcd_clear();
 8000b1a:	f7ff fdd1 	bl	80006c0 <lcd_clear>
        		lcd_print(1, 1, " ID 12 KARAKTER ");
 8000b1e:	4a85      	ldr	r2, [pc, #532]	; (8000d34 <takeMachineID+0x278>)
 8000b20:	2101      	movs	r1, #1
 8000b22:	2001      	movs	r0, #1
 8000b24:	f7ff fda0 	bl	8000668 <lcd_print>
        		lcd_print(2, 1, " OLMAK ZORUNDA! ");
 8000b28:	4a83      	ldr	r2, [pc, #524]	; (8000d38 <takeMachineID+0x27c>)
 8000b2a:	2101      	movs	r1, #1
 8000b2c:	2002      	movs	r0, #2
 8000b2e:	f7ff fd9b 	bl	8000668 <lcd_print>
        		HAL_Delay(1200);
 8000b32:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000b36:	f008 fa33 	bl	8008fa0 <HAL_Delay>
        		goto mainSection;
 8000b3a:	e7c3      	b.n	8000ac4 <takeMachineID+0x8>
        	}

            break;
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	487c      	ldr	r0, [pc, #496]	; (8000d30 <takeMachineID+0x274>)
 8000b40:	f008 fffe 	bl	8009b40 <HAL_GPIO_ReadPin>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d112      	bne.n	8000b70 <takeMachineID+0xb4>
        	if(cursorPosition == 7) {
 8000b4a:	697b      	ldr	r3, [r7, #20]
 8000b4c:	2b07      	cmp	r3, #7
 8000b4e:	d102      	bne.n	8000b56 <takeMachineID+0x9a>
        		cursorPosition = 10;
 8000b50:	230a      	movs	r3, #10
 8000b52:	617b      	str	r3, [r7, #20]
 8000b54:	e008      	b.n	8000b68 <takeMachineID+0xac>
        	} else if (cursorPosition == 14) {
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	2b0e      	cmp	r3, #14
 8000b5a:	d102      	bne.n	8000b62 <takeMachineID+0xa6>
                cursorPosition = 3;
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	617b      	str	r3, [r7, #20]
 8000b60:	e002      	b.n	8000b68 <takeMachineID+0xac>
            } else {
            	cursorPosition++;
 8000b62:	697b      	ldr	r3, [r7, #20]
 8000b64:	3301      	adds	r3, #1
 8000b66:	617b      	str	r3, [r7, #20]
            }

        	HAL_Delay(350);
 8000b68:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000b6c:	f008 fa18 	bl	8008fa0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8000b70:	2108      	movs	r1, #8
 8000b72:	4872      	ldr	r0, [pc, #456]	; (8000d3c <takeMachineID+0x280>)
 8000b74:	f008 ffe4 	bl	8009b40 <HAL_GPIO_ReadPin>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d112      	bne.n	8000ba4 <takeMachineID+0xe8>
            if (cursorPosition == 3) {
 8000b7e:	697b      	ldr	r3, [r7, #20]
 8000b80:	2b03      	cmp	r3, #3
 8000b82:	d102      	bne.n	8000b8a <takeMachineID+0xce>
                cursorPosition = 14;
 8000b84:	230e      	movs	r3, #14
 8000b86:	617b      	str	r3, [r7, #20]
 8000b88:	e008      	b.n	8000b9c <takeMachineID+0xe0>
            } else if(cursorPosition == 10) {
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	2b0a      	cmp	r3, #10
 8000b8e:	d102      	bne.n	8000b96 <takeMachineID+0xda>
            	cursorPosition = 7;
 8000b90:	2307      	movs	r3, #7
 8000b92:	617b      	str	r3, [r7, #20]
 8000b94:	e002      	b.n	8000b9c <takeMachineID+0xe0>
            } else {
            	cursorPosition--;
 8000b96:	697b      	ldr	r3, [r7, #20]
 8000b98:	3b01      	subs	r3, #1
 8000b9a:	617b      	str	r3, [r7, #20]
            }

            HAL_Delay(350);
 8000b9c:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000ba0:	f008 f9fe 	bl	8008fa0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8000ba4:	2102      	movs	r1, #2
 8000ba6:	4862      	ldr	r0, [pc, #392]	; (8000d30 <takeMachineID+0x274>)
 8000ba8:	f008 ffca 	bl	8009b40 <HAL_GPIO_ReadPin>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d178      	bne.n	8000ca4 <takeMachineID+0x1e8>
        	if(cursorPosition == 3) {
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	2b03      	cmp	r3, #3
 8000bb6:	d105      	bne.n	8000bc4 <takeMachineID+0x108>
        		machineID[machineIDLoc] = '0';
 8000bb8:	4a5c      	ldr	r2, [pc, #368]	; (8000d2c <takeMachineID+0x270>)
 8000bba:	693b      	ldr	r3, [r7, #16]
 8000bbc:	4413      	add	r3, r2
 8000bbe:	2230      	movs	r2, #48	; 0x30
 8000bc0:	701a      	strb	r2, [r3, #0]
 8000bc2:	e04f      	b.n	8000c64 <takeMachineID+0x1a8>
        		//eepromData[saveVal] = 0;
        	} else if(cursorPosition == 4) {
 8000bc4:	697b      	ldr	r3, [r7, #20]
 8000bc6:	2b04      	cmp	r3, #4
 8000bc8:	d105      	bne.n	8000bd6 <takeMachineID+0x11a>
        		machineID[machineIDLoc] = '1';
 8000bca:	4a58      	ldr	r2, [pc, #352]	; (8000d2c <takeMachineID+0x270>)
 8000bcc:	693b      	ldr	r3, [r7, #16]
 8000bce:	4413      	add	r3, r2
 8000bd0:	2231      	movs	r2, #49	; 0x31
 8000bd2:	701a      	strb	r2, [r3, #0]
 8000bd4:	e046      	b.n	8000c64 <takeMachineID+0x1a8>
        		//eepromData[saveVal] = 1;
        	} else if(cursorPosition == 5) {
 8000bd6:	697b      	ldr	r3, [r7, #20]
 8000bd8:	2b05      	cmp	r3, #5
 8000bda:	d105      	bne.n	8000be8 <takeMachineID+0x12c>
        		machineID[machineIDLoc] = '2';
 8000bdc:	4a53      	ldr	r2, [pc, #332]	; (8000d2c <takeMachineID+0x270>)
 8000bde:	693b      	ldr	r3, [r7, #16]
 8000be0:	4413      	add	r3, r2
 8000be2:	2232      	movs	r2, #50	; 0x32
 8000be4:	701a      	strb	r2, [r3, #0]
 8000be6:	e03d      	b.n	8000c64 <takeMachineID+0x1a8>
        		//eepromData[saveVal] = 2;
        	} else if(cursorPosition == 6) {
 8000be8:	697b      	ldr	r3, [r7, #20]
 8000bea:	2b06      	cmp	r3, #6
 8000bec:	d105      	bne.n	8000bfa <takeMachineID+0x13e>
        		machineID[machineIDLoc] = '3';
 8000bee:	4a4f      	ldr	r2, [pc, #316]	; (8000d2c <takeMachineID+0x270>)
 8000bf0:	693b      	ldr	r3, [r7, #16]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	2233      	movs	r2, #51	; 0x33
 8000bf6:	701a      	strb	r2, [r3, #0]
 8000bf8:	e034      	b.n	8000c64 <takeMachineID+0x1a8>
        		//eepromData[saveVal] = 3;
        	} else if(cursorPosition == 7) {
 8000bfa:	697b      	ldr	r3, [r7, #20]
 8000bfc:	2b07      	cmp	r3, #7
 8000bfe:	d105      	bne.n	8000c0c <takeMachineID+0x150>
        		machineID[machineIDLoc] = '4';
 8000c00:	4a4a      	ldr	r2, [pc, #296]	; (8000d2c <takeMachineID+0x270>)
 8000c02:	693b      	ldr	r3, [r7, #16]
 8000c04:	4413      	add	r3, r2
 8000c06:	2234      	movs	r2, #52	; 0x34
 8000c08:	701a      	strb	r2, [r3, #0]
 8000c0a:	e02b      	b.n	8000c64 <takeMachineID+0x1a8>
        		//eepromData[saveVal] = 4;
        	} else if(cursorPosition == 10) {
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	2b0a      	cmp	r3, #10
 8000c10:	d105      	bne.n	8000c1e <takeMachineID+0x162>
        		machineID[machineIDLoc] = '5';
 8000c12:	4a46      	ldr	r2, [pc, #280]	; (8000d2c <takeMachineID+0x270>)
 8000c14:	693b      	ldr	r3, [r7, #16]
 8000c16:	4413      	add	r3, r2
 8000c18:	2235      	movs	r2, #53	; 0x35
 8000c1a:	701a      	strb	r2, [r3, #0]
 8000c1c:	e022      	b.n	8000c64 <takeMachineID+0x1a8>
        		//eepromData[saveVal] = 5;
        	} else if(cursorPosition == 11) {
 8000c1e:	697b      	ldr	r3, [r7, #20]
 8000c20:	2b0b      	cmp	r3, #11
 8000c22:	d105      	bne.n	8000c30 <takeMachineID+0x174>
        		machineID[machineIDLoc] = '6';
 8000c24:	4a41      	ldr	r2, [pc, #260]	; (8000d2c <takeMachineID+0x270>)
 8000c26:	693b      	ldr	r3, [r7, #16]
 8000c28:	4413      	add	r3, r2
 8000c2a:	2236      	movs	r2, #54	; 0x36
 8000c2c:	701a      	strb	r2, [r3, #0]
 8000c2e:	e019      	b.n	8000c64 <takeMachineID+0x1a8>
        		//eepromData[saveVal] = 6;
        	} else if(cursorPosition == 12) {
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	2b0c      	cmp	r3, #12
 8000c34:	d105      	bne.n	8000c42 <takeMachineID+0x186>
        		machineID[machineIDLoc] = '7';
 8000c36:	4a3d      	ldr	r2, [pc, #244]	; (8000d2c <takeMachineID+0x270>)
 8000c38:	693b      	ldr	r3, [r7, #16]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	2237      	movs	r2, #55	; 0x37
 8000c3e:	701a      	strb	r2, [r3, #0]
 8000c40:	e010      	b.n	8000c64 <takeMachineID+0x1a8>
        		//eepromData[saveVal] = 7;
        	} else if(cursorPosition == 13) {
 8000c42:	697b      	ldr	r3, [r7, #20]
 8000c44:	2b0d      	cmp	r3, #13
 8000c46:	d105      	bne.n	8000c54 <takeMachineID+0x198>
        		machineID[machineIDLoc] = '8';
 8000c48:	4a38      	ldr	r2, [pc, #224]	; (8000d2c <takeMachineID+0x270>)
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	2238      	movs	r2, #56	; 0x38
 8000c50:	701a      	strb	r2, [r3, #0]
 8000c52:	e007      	b.n	8000c64 <takeMachineID+0x1a8>
        		//eepromData[saveVal] = 8;
        	} else if(cursorPosition == 14) {
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	2b0e      	cmp	r3, #14
 8000c58:	d104      	bne.n	8000c64 <takeMachineID+0x1a8>
        		machineID[machineIDLoc] = '9';
 8000c5a:	4a34      	ldr	r2, [pc, #208]	; (8000d2c <takeMachineID+0x270>)
 8000c5c:	693b      	ldr	r3, [r7, #16]
 8000c5e:	4413      	add	r3, r2
 8000c60:	2239      	movs	r2, #57	; 0x39
 8000c62:	701a      	strb	r2, [r3, #0]
        		//eepromData[saveVal] = 9;
        	}
        	saveVal++;
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	3301      	adds	r3, #1
 8000c68:	60bb      	str	r3, [r7, #8]

        	lcd_print_char(1, writeLoc, machineID[machineIDLoc]);
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	b2d9      	uxtb	r1, r3
 8000c6e:	4a2f      	ldr	r2, [pc, #188]	; (8000d2c <takeMachineID+0x270>)
 8000c70:	693b      	ldr	r3, [r7, #16]
 8000c72:	4413      	add	r3, r2
 8000c74:	781b      	ldrb	r3, [r3, #0]
 8000c76:	461a      	mov	r2, r3
 8000c78:	2001      	movs	r0, #1
 8000c7a:	f7ff fd0a 	bl	8000692 <lcd_print_char>

        	writeLoc++;
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	3301      	adds	r3, #1
 8000c82:	60fb      	str	r3, [r7, #12]
        	machineIDLoc++;
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	3301      	adds	r3, #1
 8000c88:	613b      	str	r3, [r7, #16]

        	memcpy(&eepromData[49], machineID, 12);
 8000c8a:	4b2d      	ldr	r3, [pc, #180]	; (8000d40 <takeMachineID+0x284>)
 8000c8c:	4a27      	ldr	r2, [pc, #156]	; (8000d2c <takeMachineID+0x270>)
 8000c8e:	f103 0431 	add.w	r4, r3, #49	; 0x31
 8000c92:	4613      	mov	r3, r2
 8000c94:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000c96:	6020      	str	r0, [r4, #0]
 8000c98:	6061      	str	r1, [r4, #4]
 8000c9a:	60a2      	str	r2, [r4, #8]

        	HAL_Delay(450);
 8000c9c:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8000ca0:	f008 f97e 	bl	8008fa0 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8000ca4:	2104      	movs	r1, #4
 8000ca6:	4822      	ldr	r0, [pc, #136]	; (8000d30 <takeMachineID+0x274>)
 8000ca8:	f008 ff4a 	bl	8009b40 <HAL_GPIO_ReadPin>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b01      	cmp	r3, #1
 8000cb0:	d12f      	bne.n	8000d12 <takeMachineID+0x256>
            if(strlen(machineID) >= 1) {
 8000cb2:	4b1e      	ldr	r3, [pc, #120]	; (8000d2c <takeMachineID+0x270>)
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d027      	beq.n	8000d0a <takeMachineID+0x24e>

                machineID[machineIDLoc] = '\0';
 8000cba:	4a1c      	ldr	r2, [pc, #112]	; (8000d2c <takeMachineID+0x270>)
 8000cbc:	693b      	ldr	r3, [r7, #16]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	701a      	strb	r2, [r3, #0]

                lcd_delete_char(1, 4+machineIDLoc);
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	b2db      	uxtb	r3, r3
 8000cc8:	3304      	adds	r3, #4
 8000cca:	b2db      	uxtb	r3, r3
 8000ccc:	4619      	mov	r1, r3
 8000cce:	2001      	movs	r0, #1
 8000cd0:	f7ff fd00 	bl	80006d4 <lcd_delete_char>
                HAL_Delay(50);
 8000cd4:	2032      	movs	r0, #50	; 0x32
 8000cd6:	f008 f963 	bl	8008fa0 <HAL_Delay>

                if(writeLoc > 5) {
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	2b05      	cmp	r3, #5
 8000cde:	dd03      	ble.n	8000ce8 <takeMachineID+0x22c>
                	writeLoc--;
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	3b01      	subs	r3, #1
 8000ce4:	60fb      	str	r3, [r7, #12]
 8000ce6:	e004      	b.n	8000cf2 <takeMachineID+0x236>
                } else if(writeLoc < 5) {
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	2b04      	cmp	r3, #4
 8000cec:	dc01      	bgt.n	8000cf2 <takeMachineID+0x236>
                	writeLoc = 5;
 8000cee:	2305      	movs	r3, #5
 8000cf0:	60fb      	str	r3, [r7, #12]
                }

                if(machineIDLoc > 0) {
 8000cf2:	693b      	ldr	r3, [r7, #16]
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	dd03      	ble.n	8000d00 <takeMachineID+0x244>
                	machineIDLoc--;
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	613b      	str	r3, [r7, #16]
 8000cfe:	e004      	b.n	8000d0a <takeMachineID+0x24e>
                } else if(machineIDLoc < 0) {
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	da01      	bge.n	8000d0a <takeMachineID+0x24e>
                	machineIDLoc = 0;
 8000d06:	2300      	movs	r3, #0
 8000d08:	613b      	str	r3, [r7, #16]
                }
            }

            HAL_Delay(350);
 8000d0a:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000d0e:	f008 f947 	bl	8008fa0 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	4619      	mov	r1, r3
 8000d18:	2002      	movs	r0, #2
 8000d1a:	f7ff fc86 	bl	800062a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000d1e:	e6eb      	b.n	8000af8 <takeMachineID+0x3c>
            break;
 8000d20:	bf00      	nop
    }
}
 8000d22:	bf00      	nop
 8000d24:	371c      	adds	r7, #28
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd90      	pop	{r4, r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000ce0 	.word	0x20000ce0
 8000d30:	40010800 	.word	0x40010800
 8000d34:	0800d7f8 	.word	0x0800d7f8
 8000d38:	0800d80c 	.word	0x0800d80c
 8000d3c:	40011000 	.word	0x40011000
 8000d40:	20000c34 	.word	0x20000c34

08000d44 <takeWifiSSID>:

void takeWifiSSID(int state) {
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b086      	sub	sp, #24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
    lcd_cursor(1);
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	f7ff fce9 	bl	8000724 <lcd_cursor>

    if(state == 0) {
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d104      	bne.n	8000d62 <takeWifiSSID+0x1e>
    	memset(wifiSSID, 0, sizeof(wifiSSID));
 8000d58:	2221      	movs	r2, #33	; 0x21
 8000d5a:	2100      	movs	r1, #0
 8000d5c:	489c      	ldr	r0, [pc, #624]	; (8000fd0 <takeWifiSSID+0x28c>)
 8000d5e:	f00c f833 	bl	800cdc8 <memset>
    }

    int realCharPos = 1;
 8000d62:	2301      	movs	r3, #1
 8000d64:	617b      	str	r3, [r7, #20]
    cursorPosition = 1;
 8000d66:	4b9b      	ldr	r3, [pc, #620]	; (8000fd4 <takeWifiSSID+0x290>)
 8000d68:	2201      	movs	r2, #1
 8000d6a:	601a      	str	r2, [r3, #0]
    page = 1;
 8000d6c:	4b9a      	ldr	r3, [pc, #616]	; (8000fd8 <takeWifiSSID+0x294>)
 8000d6e:	2201      	movs	r2, #1
 8000d70:	601a      	str	r2, [r3, #0]
    int wifiNameLoc = 0;
 8000d72:	2300      	movs	r3, #0
 8000d74:	613b      	str	r3, [r7, #16]
    int writeLoc = 7;
 8000d76:	2307      	movs	r3, #7
 8000d78:	60fb      	str	r3, [r7, #12]

    printTemplate(2, 1);
 8000d7a:	2101      	movs	r1, #1
 8000d7c:	2002      	movs	r0, #2
 8000d7e:	f7ff fd17 	bl	80007b0 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000d82:	2108      	movs	r1, #8
 8000d84:	4895      	ldr	r0, [pc, #596]	; (8000fdc <takeWifiSSID+0x298>)
 8000d86:	f008 fedb 	bl	8009b40 <HAL_GPIO_ReadPin>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b01      	cmp	r3, #1
 8000d8e:	d103      	bne.n	8000d98 <takeWifiSSID+0x54>
            lcd_cursor(0);
 8000d90:	2000      	movs	r0, #0
 8000d92:	f7ff fcc7 	bl	8000724 <lcd_cursor>

            break;
 8000d96:	e141      	b.n	800101c <takeWifiSSID+0x2d8>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000d98:	2101      	movs	r1, #1
 8000d9a:	4890      	ldr	r0, [pc, #576]	; (8000fdc <takeWifiSSID+0x298>)
 8000d9c:	f008 fed0 	bl	8009b40 <HAL_GPIO_ReadPin>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d166      	bne.n	8000e74 <takeWifiSSID+0x130>
        	realCharPos++;
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	3301      	adds	r3, #1
 8000daa:	617b      	str	r3, [r7, #20]
        	if(realCharPos > 80) {
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	2b50      	cmp	r3, #80	; 0x50
 8000db0:	dd01      	ble.n	8000db6 <takeWifiSSID+0x72>
        		realCharPos = 1;
 8000db2:	2301      	movs	r3, #1
 8000db4:	617b      	str	r3, [r7, #20]
        	}
            if (cursorPosition == 16) {
 8000db6:	4b87      	ldr	r3, [pc, #540]	; (8000fd4 <takeWifiSSID+0x290>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	2b10      	cmp	r3, #16
 8000dbc:	d152      	bne.n	8000e64 <takeWifiSSID+0x120>
            	if(page == 1) {
 8000dbe:	4b86      	ldr	r3, [pc, #536]	; (8000fd8 <takeWifiSSID+0x294>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	2b01      	cmp	r3, #1
 8000dc4:	d10c      	bne.n	8000de0 <takeWifiSSID+0x9c>
            		cursorPosition = 1;
 8000dc6:	4b83      	ldr	r3, [pc, #524]	; (8000fd4 <takeWifiSSID+0x290>)
 8000dc8:	2201      	movs	r2, #1
 8000dca:	601a      	str	r2, [r3, #0]
            		page++;
 8000dcc:	4b82      	ldr	r3, [pc, #520]	; (8000fd8 <takeWifiSSID+0x294>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	4a81      	ldr	r2, [pc, #516]	; (8000fd8 <takeWifiSSID+0x294>)
 8000dd4:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 2);
 8000dd6:	2102      	movs	r1, #2
 8000dd8:	2002      	movs	r0, #2
 8000dda:	f7ff fce9 	bl	80007b0 <printTemplate>
 8000dde:	e046      	b.n	8000e6e <takeWifiSSID+0x12a>
            	} else if(page == 2) {
 8000de0:	4b7d      	ldr	r3, [pc, #500]	; (8000fd8 <takeWifiSSID+0x294>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2b02      	cmp	r3, #2
 8000de6:	d10c      	bne.n	8000e02 <takeWifiSSID+0xbe>
            		cursorPosition = 1;
 8000de8:	4b7a      	ldr	r3, [pc, #488]	; (8000fd4 <takeWifiSSID+0x290>)
 8000dea:	2201      	movs	r2, #1
 8000dec:	601a      	str	r2, [r3, #0]
            		page++;
 8000dee:	4b7a      	ldr	r3, [pc, #488]	; (8000fd8 <takeWifiSSID+0x294>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	3301      	adds	r3, #1
 8000df4:	4a78      	ldr	r2, [pc, #480]	; (8000fd8 <takeWifiSSID+0x294>)
 8000df6:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 3);
 8000df8:	2103      	movs	r1, #3
 8000dfa:	2002      	movs	r0, #2
 8000dfc:	f7ff fcd8 	bl	80007b0 <printTemplate>
 8000e00:	e035      	b.n	8000e6e <takeWifiSSID+0x12a>
            	} else if(page == 3) {
 8000e02:	4b75      	ldr	r3, [pc, #468]	; (8000fd8 <takeWifiSSID+0x294>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	2b03      	cmp	r3, #3
 8000e08:	d10c      	bne.n	8000e24 <takeWifiSSID+0xe0>
            		cursorPosition = 1;
 8000e0a:	4b72      	ldr	r3, [pc, #456]	; (8000fd4 <takeWifiSSID+0x290>)
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	601a      	str	r2, [r3, #0]
            		page++;
 8000e10:	4b71      	ldr	r3, [pc, #452]	; (8000fd8 <takeWifiSSID+0x294>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	3301      	adds	r3, #1
 8000e16:	4a70      	ldr	r2, [pc, #448]	; (8000fd8 <takeWifiSSID+0x294>)
 8000e18:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 4);
 8000e1a:	2104      	movs	r1, #4
 8000e1c:	2002      	movs	r0, #2
 8000e1e:	f7ff fcc7 	bl	80007b0 <printTemplate>
 8000e22:	e024      	b.n	8000e6e <takeWifiSSID+0x12a>
            	} else if(page == 4) {
 8000e24:	4b6c      	ldr	r3, [pc, #432]	; (8000fd8 <takeWifiSSID+0x294>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	2b04      	cmp	r3, #4
 8000e2a:	d10c      	bne.n	8000e46 <takeWifiSSID+0x102>
            		cursorPosition = 1;
 8000e2c:	4b69      	ldr	r3, [pc, #420]	; (8000fd4 <takeWifiSSID+0x290>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	601a      	str	r2, [r3, #0]
            		page++;
 8000e32:	4b69      	ldr	r3, [pc, #420]	; (8000fd8 <takeWifiSSID+0x294>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	3301      	adds	r3, #1
 8000e38:	4a67      	ldr	r2, [pc, #412]	; (8000fd8 <takeWifiSSID+0x294>)
 8000e3a:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 5);
 8000e3c:	2105      	movs	r1, #5
 8000e3e:	2002      	movs	r0, #2
 8000e40:	f7ff fcb6 	bl	80007b0 <printTemplate>
 8000e44:	e013      	b.n	8000e6e <takeWifiSSID+0x12a>
            	} else if(page == 5) {
 8000e46:	4b64      	ldr	r3, [pc, #400]	; (8000fd8 <takeWifiSSID+0x294>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	2b05      	cmp	r3, #5
 8000e4c:	d10f      	bne.n	8000e6e <takeWifiSSID+0x12a>
            		cursorPosition = 1;
 8000e4e:	4b61      	ldr	r3, [pc, #388]	; (8000fd4 <takeWifiSSID+0x290>)
 8000e50:	2201      	movs	r2, #1
 8000e52:	601a      	str	r2, [r3, #0]
            		page = 1;
 8000e54:	4b60      	ldr	r3, [pc, #384]	; (8000fd8 <takeWifiSSID+0x294>)
 8000e56:	2201      	movs	r2, #1
 8000e58:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 8000e5a:	2101      	movs	r1, #1
 8000e5c:	2002      	movs	r0, #2
 8000e5e:	f7ff fca7 	bl	80007b0 <printTemplate>
 8000e62:	e004      	b.n	8000e6e <takeWifiSSID+0x12a>
            	}
            } else {
            	cursorPosition++;
 8000e64:	4b5b      	ldr	r3, [pc, #364]	; (8000fd4 <takeWifiSSID+0x290>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	3301      	adds	r3, #1
 8000e6a:	4a5a      	ldr	r2, [pc, #360]	; (8000fd4 <takeWifiSSID+0x290>)
 8000e6c:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8000e6e:	20fa      	movs	r0, #250	; 0xfa
 8000e70:	f008 f896 	bl	8008fa0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8000e74:	2108      	movs	r1, #8
 8000e76:	485a      	ldr	r0, [pc, #360]	; (8000fe0 <takeWifiSSID+0x29c>)
 8000e78:	f008 fe62 	bl	8009b40 <HAL_GPIO_ReadPin>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d15e      	bne.n	8000f40 <takeWifiSSID+0x1fc>
        	realCharPos--;
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	3b01      	subs	r3, #1
 8000e86:	617b      	str	r3, [r7, #20]
        	if(realCharPos < 1) {
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	dc01      	bgt.n	8000e92 <takeWifiSSID+0x14e>
        		realCharPos = 80;
 8000e8e:	2350      	movs	r3, #80	; 0x50
 8000e90:	617b      	str	r3, [r7, #20]
        	}
            if(cursorPosition == 1) {
 8000e92:	4b50      	ldr	r3, [pc, #320]	; (8000fd4 <takeWifiSSID+0x290>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	2b01      	cmp	r3, #1
 8000e98:	d14a      	bne.n	8000f30 <takeWifiSSID+0x1ec>
            	if(page == 1) {
 8000e9a:	4b4f      	ldr	r3, [pc, #316]	; (8000fd8 <takeWifiSSID+0x294>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d10a      	bne.n	8000eb8 <takeWifiSSID+0x174>
            		cursorPosition = 16;
 8000ea2:	4b4c      	ldr	r3, [pc, #304]	; (8000fd4 <takeWifiSSID+0x290>)
 8000ea4:	2210      	movs	r2, #16
 8000ea6:	601a      	str	r2, [r3, #0]
            		page = 5;
 8000ea8:	4b4b      	ldr	r3, [pc, #300]	; (8000fd8 <takeWifiSSID+0x294>)
 8000eaa:	2205      	movs	r2, #5
 8000eac:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 5);
 8000eae:	2105      	movs	r1, #5
 8000eb0:	2002      	movs	r0, #2
 8000eb2:	f7ff fc7d 	bl	80007b0 <printTemplate>
 8000eb6:	e040      	b.n	8000f3a <takeWifiSSID+0x1f6>
            	} else if(page == 2) {
 8000eb8:	4b47      	ldr	r3, [pc, #284]	; (8000fd8 <takeWifiSSID+0x294>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d10a      	bne.n	8000ed6 <takeWifiSSID+0x192>
            		cursorPosition = 16;
 8000ec0:	4b44      	ldr	r3, [pc, #272]	; (8000fd4 <takeWifiSSID+0x290>)
 8000ec2:	2210      	movs	r2, #16
 8000ec4:	601a      	str	r2, [r3, #0]
            		page = 1;
 8000ec6:	4b44      	ldr	r3, [pc, #272]	; (8000fd8 <takeWifiSSID+0x294>)
 8000ec8:	2201      	movs	r2, #1
 8000eca:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 8000ecc:	2101      	movs	r1, #1
 8000ece:	2002      	movs	r0, #2
 8000ed0:	f7ff fc6e 	bl	80007b0 <printTemplate>
 8000ed4:	e031      	b.n	8000f3a <takeWifiSSID+0x1f6>
            	} else if(page == 3) {
 8000ed6:	4b40      	ldr	r3, [pc, #256]	; (8000fd8 <takeWifiSSID+0x294>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2b03      	cmp	r3, #3
 8000edc:	d10a      	bne.n	8000ef4 <takeWifiSSID+0x1b0>
            		cursorPosition = 16;
 8000ede:	4b3d      	ldr	r3, [pc, #244]	; (8000fd4 <takeWifiSSID+0x290>)
 8000ee0:	2210      	movs	r2, #16
 8000ee2:	601a      	str	r2, [r3, #0]
            		page = 2;
 8000ee4:	4b3c      	ldr	r3, [pc, #240]	; (8000fd8 <takeWifiSSID+0x294>)
 8000ee6:	2202      	movs	r2, #2
 8000ee8:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 2);
 8000eea:	2102      	movs	r1, #2
 8000eec:	2002      	movs	r0, #2
 8000eee:	f7ff fc5f 	bl	80007b0 <printTemplate>
 8000ef2:	e022      	b.n	8000f3a <takeWifiSSID+0x1f6>
            	} else if(page == 4) {
 8000ef4:	4b38      	ldr	r3, [pc, #224]	; (8000fd8 <takeWifiSSID+0x294>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2b04      	cmp	r3, #4
 8000efa:	d10a      	bne.n	8000f12 <takeWifiSSID+0x1ce>
            		cursorPosition = 16;
 8000efc:	4b35      	ldr	r3, [pc, #212]	; (8000fd4 <takeWifiSSID+0x290>)
 8000efe:	2210      	movs	r2, #16
 8000f00:	601a      	str	r2, [r3, #0]
            		page = 3;
 8000f02:	4b35      	ldr	r3, [pc, #212]	; (8000fd8 <takeWifiSSID+0x294>)
 8000f04:	2203      	movs	r2, #3
 8000f06:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 3);
 8000f08:	2103      	movs	r1, #3
 8000f0a:	2002      	movs	r0, #2
 8000f0c:	f7ff fc50 	bl	80007b0 <printTemplate>
 8000f10:	e013      	b.n	8000f3a <takeWifiSSID+0x1f6>
            	} else if(page == 5) {
 8000f12:	4b31      	ldr	r3, [pc, #196]	; (8000fd8 <takeWifiSSID+0x294>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	2b05      	cmp	r3, #5
 8000f18:	d10f      	bne.n	8000f3a <takeWifiSSID+0x1f6>
            		cursorPosition = 16;
 8000f1a:	4b2e      	ldr	r3, [pc, #184]	; (8000fd4 <takeWifiSSID+0x290>)
 8000f1c:	2210      	movs	r2, #16
 8000f1e:	601a      	str	r2, [r3, #0]
            		page = 4;
 8000f20:	4b2d      	ldr	r3, [pc, #180]	; (8000fd8 <takeWifiSSID+0x294>)
 8000f22:	2204      	movs	r2, #4
 8000f24:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 4);
 8000f26:	2104      	movs	r1, #4
 8000f28:	2002      	movs	r0, #2
 8000f2a:	f7ff fc41 	bl	80007b0 <printTemplate>
 8000f2e:	e004      	b.n	8000f3a <takeWifiSSID+0x1f6>
            	}
            } else {
            	cursorPosition--;
 8000f30:	4b28      	ldr	r3, [pc, #160]	; (8000fd4 <takeWifiSSID+0x290>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	3b01      	subs	r3, #1
 8000f36:	4a27      	ldr	r2, [pc, #156]	; (8000fd4 <takeWifiSSID+0x290>)
 8000f38:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8000f3a:	20fa      	movs	r0, #250	; 0xfa
 8000f3c:	f008 f830 	bl	8008fa0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8000f40:	2102      	movs	r1, #2
 8000f42:	4826      	ldr	r0, [pc, #152]	; (8000fdc <takeWifiSSID+0x298>)
 8000f44:	f008 fdfc 	bl	8009b40 <HAL_GPIO_ReadPin>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d11e      	bne.n	8000f8c <takeWifiSSID+0x248>
            wifiSSID[wifiNameLoc] = getCharFromCursorPosition(realCharPos - 1);
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	3b01      	subs	r3, #1
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff fda2 	bl	8000a9c <getCharFromCursorPosition>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	4a1c      	ldr	r2, [pc, #112]	; (8000fd0 <takeWifiSSID+0x28c>)
 8000f5e:	693b      	ldr	r3, [r7, #16]
 8000f60:	4413      	add	r3, r2
 8000f62:	460a      	mov	r2, r1
 8000f64:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiSSID[wifiNameLoc]);
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	b2d9      	uxtb	r1, r3
 8000f6a:	4a19      	ldr	r2, [pc, #100]	; (8000fd0 <takeWifiSSID+0x28c>)
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	4413      	add	r3, r2
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	461a      	mov	r2, r3
 8000f74:	2001      	movs	r0, #1
 8000f76:	f7ff fb8c 	bl	8000692 <lcd_print_char>

            writeLoc++;
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	3301      	adds	r3, #1
 8000f7e:	60fb      	str	r3, [r7, #12]
            wifiNameLoc++;
 8000f80:	693b      	ldr	r3, [r7, #16]
 8000f82:	3301      	adds	r3, #1
 8000f84:	613b      	str	r3, [r7, #16]

            HAL_Delay(250);
 8000f86:	20fa      	movs	r0, #250	; 0xfa
 8000f88:	f008 f80a 	bl	8008fa0 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8000f8c:	2104      	movs	r1, #4
 8000f8e:	4813      	ldr	r0, [pc, #76]	; (8000fdc <takeWifiSSID+0x298>)
 8000f90:	f008 fdd6 	bl	8009b40 <HAL_GPIO_ReadPin>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b01      	cmp	r3, #1
 8000f98:	d138      	bne.n	800100c <takeWifiSSID+0x2c8>
        	if(strlen(wifiSSID) >= 1) {
 8000f9a:	4b0d      	ldr	r3, [pc, #52]	; (8000fd0 <takeWifiSSID+0x28c>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d031      	beq.n	8001006 <takeWifiSSID+0x2c2>
        		wifiSSID[wifiNameLoc] = '\0';
 8000fa2:	4a0b      	ldr	r2, [pc, #44]	; (8000fd0 <takeWifiSSID+0x28c>)
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	4413      	add	r3, r2
 8000fa8:	2200      	movs	r2, #0
 8000faa:	701a      	strb	r2, [r3, #0]

        		lcd_delete_char(1, 6+wifiNameLoc);
 8000fac:	693b      	ldr	r3, [r7, #16]
 8000fae:	b2db      	uxtb	r3, r3
 8000fb0:	3306      	adds	r3, #6
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	2001      	movs	r0, #1
 8000fb8:	f7ff fb8c 	bl	80006d4 <lcd_delete_char>
        		HAL_Delay(50);
 8000fbc:	2032      	movs	r0, #50	; 0x32
 8000fbe:	f007 ffef 	bl	8008fa0 <HAL_Delay>
        		if(writeLoc > 7) {
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	2b07      	cmp	r3, #7
 8000fc6:	dd0d      	ble.n	8000fe4 <takeWifiSSID+0x2a0>
        			writeLoc--;
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	3b01      	subs	r3, #1
 8000fcc:	60fb      	str	r3, [r7, #12]
 8000fce:	e00e      	b.n	8000fee <takeWifiSSID+0x2aa>
 8000fd0:	20000cec 	.word	0x20000cec
 8000fd4:	20000944 	.word	0x20000944
 8000fd8:	20000948 	.word	0x20000948
 8000fdc:	40010800 	.word	0x40010800
 8000fe0:	40011000 	.word	0x40011000
        		} else if(writeLoc < 7) {
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	2b06      	cmp	r3, #6
 8000fe8:	dc01      	bgt.n	8000fee <takeWifiSSID+0x2aa>
        			writeLoc = 7;
 8000fea:	2307      	movs	r3, #7
 8000fec:	60fb      	str	r3, [r7, #12]
        		}

        		if(wifiNameLoc > 0) {
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	dd03      	ble.n	8000ffc <takeWifiSSID+0x2b8>
        			wifiNameLoc--;
 8000ff4:	693b      	ldr	r3, [r7, #16]
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	613b      	str	r3, [r7, #16]
 8000ffa:	e004      	b.n	8001006 <takeWifiSSID+0x2c2>
        		} else if(wifiNameLoc < 0) {
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	da01      	bge.n	8001006 <takeWifiSSID+0x2c2>
        			wifiNameLoc = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	613b      	str	r3, [r7, #16]
        		}
        	}

        	HAL_Delay(250);
 8001006:	20fa      	movs	r0, #250	; 0xfa
 8001008:	f007 ffca 	bl	8008fa0 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 800100c:	4b05      	ldr	r3, [pc, #20]	; (8001024 <takeWifiSSID+0x2e0>)
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	b2db      	uxtb	r3, r3
 8001012:	4619      	mov	r1, r3
 8001014:	2002      	movs	r0, #2
 8001016:	f7ff fb08 	bl	800062a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800101a:	e6b2      	b.n	8000d82 <takeWifiSSID+0x3e>
    }
}
 800101c:	bf00      	nop
 800101e:	3718      	adds	r7, #24
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}
 8001024:	20000944 	.word	0x20000944

08001028 <takeWifiPass>:

void takeWifiPass(int state) {
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
    lcd_cursor(1);
 8001030:	2001      	movs	r0, #1
 8001032:	f7ff fb77 	bl	8000724 <lcd_cursor>

    if(state == 0) {
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	2b00      	cmp	r3, #0
 800103a:	d104      	bne.n	8001046 <takeWifiPass+0x1e>
    	memset(wifiPass, 0, sizeof(wifiPass));
 800103c:	2221      	movs	r2, #33	; 0x21
 800103e:	2100      	movs	r1, #0
 8001040:	489c      	ldr	r0, [pc, #624]	; (80012b4 <takeWifiPass+0x28c>)
 8001042:	f00b fec1 	bl	800cdc8 <memset>
    }

    int realCharPos = 1;
 8001046:	2301      	movs	r3, #1
 8001048:	617b      	str	r3, [r7, #20]
    cursorPosition = 1;
 800104a:	4b9b      	ldr	r3, [pc, #620]	; (80012b8 <takeWifiPass+0x290>)
 800104c:	2201      	movs	r2, #1
 800104e:	601a      	str	r2, [r3, #0]
    page = 1;
 8001050:	4b9a      	ldr	r3, [pc, #616]	; (80012bc <takeWifiPass+0x294>)
 8001052:	2201      	movs	r2, #1
 8001054:	601a      	str	r2, [r3, #0]
    int wifiPassLoc = 0;
 8001056:	2300      	movs	r3, #0
 8001058:	613b      	str	r3, [r7, #16]
    int writeLoc = 7;
 800105a:	2307      	movs	r3, #7
 800105c:	60fb      	str	r3, [r7, #12]

    printTemplate(3, 1);
 800105e:	2101      	movs	r1, #1
 8001060:	2003      	movs	r0, #3
 8001062:	f7ff fba5 	bl	80007b0 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8001066:	2108      	movs	r1, #8
 8001068:	4895      	ldr	r0, [pc, #596]	; (80012c0 <takeWifiPass+0x298>)
 800106a:	f008 fd69 	bl	8009b40 <HAL_GPIO_ReadPin>
 800106e:	4603      	mov	r3, r0
 8001070:	2b01      	cmp	r3, #1
 8001072:	d103      	bne.n	800107c <takeWifiPass+0x54>
            lcd_cursor(0);
 8001074:	2000      	movs	r0, #0
 8001076:	f7ff fb55 	bl	8000724 <lcd_cursor>

            break;
 800107a:	e141      	b.n	8001300 <takeWifiPass+0x2d8>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 800107c:	2101      	movs	r1, #1
 800107e:	4890      	ldr	r0, [pc, #576]	; (80012c0 <takeWifiPass+0x298>)
 8001080:	f008 fd5e 	bl	8009b40 <HAL_GPIO_ReadPin>
 8001084:	4603      	mov	r3, r0
 8001086:	2b01      	cmp	r3, #1
 8001088:	d166      	bne.n	8001158 <takeWifiPass+0x130>
        	realCharPos++;
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	3301      	adds	r3, #1
 800108e:	617b      	str	r3, [r7, #20]
        	if(realCharPos > 80) {
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	2b50      	cmp	r3, #80	; 0x50
 8001094:	dd01      	ble.n	800109a <takeWifiPass+0x72>
        	    realCharPos = 1;
 8001096:	2301      	movs	r3, #1
 8001098:	617b      	str	r3, [r7, #20]
        	}
            if (cursorPosition == 16) {
 800109a:	4b87      	ldr	r3, [pc, #540]	; (80012b8 <takeWifiPass+0x290>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2b10      	cmp	r3, #16
 80010a0:	d152      	bne.n	8001148 <takeWifiPass+0x120>
            	if(page == 1) {
 80010a2:	4b86      	ldr	r3, [pc, #536]	; (80012bc <takeWifiPass+0x294>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d10c      	bne.n	80010c4 <takeWifiPass+0x9c>
            		cursorPosition = 1;
 80010aa:	4b83      	ldr	r3, [pc, #524]	; (80012b8 <takeWifiPass+0x290>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	601a      	str	r2, [r3, #0]
            		page++;
 80010b0:	4b82      	ldr	r3, [pc, #520]	; (80012bc <takeWifiPass+0x294>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	3301      	adds	r3, #1
 80010b6:	4a81      	ldr	r2, [pc, #516]	; (80012bc <takeWifiPass+0x294>)
 80010b8:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 2);
 80010ba:	2102      	movs	r1, #2
 80010bc:	2003      	movs	r0, #3
 80010be:	f7ff fb77 	bl	80007b0 <printTemplate>
 80010c2:	e046      	b.n	8001152 <takeWifiPass+0x12a>
            	} else if(page == 2) {
 80010c4:	4b7d      	ldr	r3, [pc, #500]	; (80012bc <takeWifiPass+0x294>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	d10c      	bne.n	80010e6 <takeWifiPass+0xbe>
            		cursorPosition = 1;
 80010cc:	4b7a      	ldr	r3, [pc, #488]	; (80012b8 <takeWifiPass+0x290>)
 80010ce:	2201      	movs	r2, #1
 80010d0:	601a      	str	r2, [r3, #0]
            		page++;
 80010d2:	4b7a      	ldr	r3, [pc, #488]	; (80012bc <takeWifiPass+0x294>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	3301      	adds	r3, #1
 80010d8:	4a78      	ldr	r2, [pc, #480]	; (80012bc <takeWifiPass+0x294>)
 80010da:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 3);
 80010dc:	2103      	movs	r1, #3
 80010de:	2003      	movs	r0, #3
 80010e0:	f7ff fb66 	bl	80007b0 <printTemplate>
 80010e4:	e035      	b.n	8001152 <takeWifiPass+0x12a>
            	} else if(page == 3) {
 80010e6:	4b75      	ldr	r3, [pc, #468]	; (80012bc <takeWifiPass+0x294>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2b03      	cmp	r3, #3
 80010ec:	d10c      	bne.n	8001108 <takeWifiPass+0xe0>
            		cursorPosition = 1;
 80010ee:	4b72      	ldr	r3, [pc, #456]	; (80012b8 <takeWifiPass+0x290>)
 80010f0:	2201      	movs	r2, #1
 80010f2:	601a      	str	r2, [r3, #0]
            		page++;
 80010f4:	4b71      	ldr	r3, [pc, #452]	; (80012bc <takeWifiPass+0x294>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	3301      	adds	r3, #1
 80010fa:	4a70      	ldr	r2, [pc, #448]	; (80012bc <takeWifiPass+0x294>)
 80010fc:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 4);
 80010fe:	2104      	movs	r1, #4
 8001100:	2003      	movs	r0, #3
 8001102:	f7ff fb55 	bl	80007b0 <printTemplate>
 8001106:	e024      	b.n	8001152 <takeWifiPass+0x12a>
            	} else if(page == 4) {
 8001108:	4b6c      	ldr	r3, [pc, #432]	; (80012bc <takeWifiPass+0x294>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2b04      	cmp	r3, #4
 800110e:	d10c      	bne.n	800112a <takeWifiPass+0x102>
            		cursorPosition = 1;
 8001110:	4b69      	ldr	r3, [pc, #420]	; (80012b8 <takeWifiPass+0x290>)
 8001112:	2201      	movs	r2, #1
 8001114:	601a      	str	r2, [r3, #0]
            		page++;
 8001116:	4b69      	ldr	r3, [pc, #420]	; (80012bc <takeWifiPass+0x294>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	3301      	adds	r3, #1
 800111c:	4a67      	ldr	r2, [pc, #412]	; (80012bc <takeWifiPass+0x294>)
 800111e:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 5);
 8001120:	2105      	movs	r1, #5
 8001122:	2003      	movs	r0, #3
 8001124:	f7ff fb44 	bl	80007b0 <printTemplate>
 8001128:	e013      	b.n	8001152 <takeWifiPass+0x12a>
            	} else if(page == 5) {
 800112a:	4b64      	ldr	r3, [pc, #400]	; (80012bc <takeWifiPass+0x294>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2b05      	cmp	r3, #5
 8001130:	d10f      	bne.n	8001152 <takeWifiPass+0x12a>
            		cursorPosition = 1;
 8001132:	4b61      	ldr	r3, [pc, #388]	; (80012b8 <takeWifiPass+0x290>)
 8001134:	2201      	movs	r2, #1
 8001136:	601a      	str	r2, [r3, #0]
            		page = 1;
 8001138:	4b60      	ldr	r3, [pc, #384]	; (80012bc <takeWifiPass+0x294>)
 800113a:	2201      	movs	r2, #1
 800113c:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 800113e:	2101      	movs	r1, #1
 8001140:	2003      	movs	r0, #3
 8001142:	f7ff fb35 	bl	80007b0 <printTemplate>
 8001146:	e004      	b.n	8001152 <takeWifiPass+0x12a>
            	}
            } else {
            	cursorPosition++;
 8001148:	4b5b      	ldr	r3, [pc, #364]	; (80012b8 <takeWifiPass+0x290>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	3301      	adds	r3, #1
 800114e:	4a5a      	ldr	r2, [pc, #360]	; (80012b8 <takeWifiPass+0x290>)
 8001150:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8001152:	20fa      	movs	r0, #250	; 0xfa
 8001154:	f007 ff24 	bl	8008fa0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001158:	2108      	movs	r1, #8
 800115a:	485a      	ldr	r0, [pc, #360]	; (80012c4 <takeWifiPass+0x29c>)
 800115c:	f008 fcf0 	bl	8009b40 <HAL_GPIO_ReadPin>
 8001160:	4603      	mov	r3, r0
 8001162:	2b01      	cmp	r3, #1
 8001164:	d15e      	bne.n	8001224 <takeWifiPass+0x1fc>
        	realCharPos--;
 8001166:	697b      	ldr	r3, [r7, #20]
 8001168:	3b01      	subs	r3, #1
 800116a:	617b      	str	r3, [r7, #20]
        	if(realCharPos < 1) {
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	2b00      	cmp	r3, #0
 8001170:	dc01      	bgt.n	8001176 <takeWifiPass+0x14e>
        	    realCharPos = 80;
 8001172:	2350      	movs	r3, #80	; 0x50
 8001174:	617b      	str	r3, [r7, #20]
        	}
            if(cursorPosition == 1) {
 8001176:	4b50      	ldr	r3, [pc, #320]	; (80012b8 <takeWifiPass+0x290>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d14a      	bne.n	8001214 <takeWifiPass+0x1ec>
            	if(page == 1) {
 800117e:	4b4f      	ldr	r3, [pc, #316]	; (80012bc <takeWifiPass+0x294>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d10a      	bne.n	800119c <takeWifiPass+0x174>
            		cursorPosition = 16;
 8001186:	4b4c      	ldr	r3, [pc, #304]	; (80012b8 <takeWifiPass+0x290>)
 8001188:	2210      	movs	r2, #16
 800118a:	601a      	str	r2, [r3, #0]
            		page = 5;
 800118c:	4b4b      	ldr	r3, [pc, #300]	; (80012bc <takeWifiPass+0x294>)
 800118e:	2205      	movs	r2, #5
 8001190:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 5);
 8001192:	2105      	movs	r1, #5
 8001194:	2003      	movs	r0, #3
 8001196:	f7ff fb0b 	bl	80007b0 <printTemplate>
 800119a:	e040      	b.n	800121e <takeWifiPass+0x1f6>
            	} else if(page == 2) {
 800119c:	4b47      	ldr	r3, [pc, #284]	; (80012bc <takeWifiPass+0x294>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d10a      	bne.n	80011ba <takeWifiPass+0x192>
            		cursorPosition = 16;
 80011a4:	4b44      	ldr	r3, [pc, #272]	; (80012b8 <takeWifiPass+0x290>)
 80011a6:	2210      	movs	r2, #16
 80011a8:	601a      	str	r2, [r3, #0]
            		page = 1;
 80011aa:	4b44      	ldr	r3, [pc, #272]	; (80012bc <takeWifiPass+0x294>)
 80011ac:	2201      	movs	r2, #1
 80011ae:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 80011b0:	2101      	movs	r1, #1
 80011b2:	2003      	movs	r0, #3
 80011b4:	f7ff fafc 	bl	80007b0 <printTemplate>
 80011b8:	e031      	b.n	800121e <takeWifiPass+0x1f6>
            	} else if(page == 3) {
 80011ba:	4b40      	ldr	r3, [pc, #256]	; (80012bc <takeWifiPass+0x294>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	2b03      	cmp	r3, #3
 80011c0:	d10a      	bne.n	80011d8 <takeWifiPass+0x1b0>
            		cursorPosition = 16;
 80011c2:	4b3d      	ldr	r3, [pc, #244]	; (80012b8 <takeWifiPass+0x290>)
 80011c4:	2210      	movs	r2, #16
 80011c6:	601a      	str	r2, [r3, #0]
            		page = 2;
 80011c8:	4b3c      	ldr	r3, [pc, #240]	; (80012bc <takeWifiPass+0x294>)
 80011ca:	2202      	movs	r2, #2
 80011cc:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 2);
 80011ce:	2102      	movs	r1, #2
 80011d0:	2003      	movs	r0, #3
 80011d2:	f7ff faed 	bl	80007b0 <printTemplate>
 80011d6:	e022      	b.n	800121e <takeWifiPass+0x1f6>
            	} else if(page == 4) {
 80011d8:	4b38      	ldr	r3, [pc, #224]	; (80012bc <takeWifiPass+0x294>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	2b04      	cmp	r3, #4
 80011de:	d10a      	bne.n	80011f6 <takeWifiPass+0x1ce>
            		cursorPosition = 16;
 80011e0:	4b35      	ldr	r3, [pc, #212]	; (80012b8 <takeWifiPass+0x290>)
 80011e2:	2210      	movs	r2, #16
 80011e4:	601a      	str	r2, [r3, #0]
            		page = 3;
 80011e6:	4b35      	ldr	r3, [pc, #212]	; (80012bc <takeWifiPass+0x294>)
 80011e8:	2203      	movs	r2, #3
 80011ea:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 3);
 80011ec:	2103      	movs	r1, #3
 80011ee:	2003      	movs	r0, #3
 80011f0:	f7ff fade 	bl	80007b0 <printTemplate>
 80011f4:	e013      	b.n	800121e <takeWifiPass+0x1f6>
            	} else if(page == 5) {
 80011f6:	4b31      	ldr	r3, [pc, #196]	; (80012bc <takeWifiPass+0x294>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	2b05      	cmp	r3, #5
 80011fc:	d10f      	bne.n	800121e <takeWifiPass+0x1f6>
            		cursorPosition = 16;
 80011fe:	4b2e      	ldr	r3, [pc, #184]	; (80012b8 <takeWifiPass+0x290>)
 8001200:	2210      	movs	r2, #16
 8001202:	601a      	str	r2, [r3, #0]
            		page = 4;
 8001204:	4b2d      	ldr	r3, [pc, #180]	; (80012bc <takeWifiPass+0x294>)
 8001206:	2204      	movs	r2, #4
 8001208:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 4);
 800120a:	2104      	movs	r1, #4
 800120c:	2003      	movs	r0, #3
 800120e:	f7ff facf 	bl	80007b0 <printTemplate>
 8001212:	e004      	b.n	800121e <takeWifiPass+0x1f6>
            	}
            } else {
            	cursorPosition--;
 8001214:	4b28      	ldr	r3, [pc, #160]	; (80012b8 <takeWifiPass+0x290>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	3b01      	subs	r3, #1
 800121a:	4a27      	ldr	r2, [pc, #156]	; (80012b8 <takeWifiPass+0x290>)
 800121c:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 800121e:	20fa      	movs	r0, #250	; 0xfa
 8001220:	f007 febe 	bl	8008fa0 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8001224:	2102      	movs	r1, #2
 8001226:	4826      	ldr	r0, [pc, #152]	; (80012c0 <takeWifiPass+0x298>)
 8001228:	f008 fc8a 	bl	8009b40 <HAL_GPIO_ReadPin>
 800122c:	4603      	mov	r3, r0
 800122e:	2b01      	cmp	r3, #1
 8001230:	d11e      	bne.n	8001270 <takeWifiPass+0x248>
        	wifiPass[wifiPassLoc] = getCharFromCursorPosition(realCharPos - 1);
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	3b01      	subs	r3, #1
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff fc30 	bl	8000a9c <getCharFromCursorPosition>
 800123c:	4603      	mov	r3, r0
 800123e:	4619      	mov	r1, r3
 8001240:	4a1c      	ldr	r2, [pc, #112]	; (80012b4 <takeWifiPass+0x28c>)
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	4413      	add	r3, r2
 8001246:	460a      	mov	r2, r1
 8001248:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiPass[wifiPassLoc]);
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	b2d9      	uxtb	r1, r3
 800124e:	4a19      	ldr	r2, [pc, #100]	; (80012b4 <takeWifiPass+0x28c>)
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	4413      	add	r3, r2
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	461a      	mov	r2, r3
 8001258:	2001      	movs	r0, #1
 800125a:	f7ff fa1a 	bl	8000692 <lcd_print_char>

            writeLoc++;
 800125e:	68fb      	ldr	r3, [r7, #12]
 8001260:	3301      	adds	r3, #1
 8001262:	60fb      	str	r3, [r7, #12]
            wifiPassLoc++;
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	3301      	adds	r3, #1
 8001268:	613b      	str	r3, [r7, #16]

            HAL_Delay(250);
 800126a:	20fa      	movs	r0, #250	; 0xfa
 800126c:	f007 fe98 	bl	8008fa0 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8001270:	2104      	movs	r1, #4
 8001272:	4813      	ldr	r0, [pc, #76]	; (80012c0 <takeWifiPass+0x298>)
 8001274:	f008 fc64 	bl	8009b40 <HAL_GPIO_ReadPin>
 8001278:	4603      	mov	r3, r0
 800127a:	2b01      	cmp	r3, #1
 800127c:	d138      	bne.n	80012f0 <takeWifiPass+0x2c8>
            if(strlen(wifiPass) >= 1) {
 800127e:	4b0d      	ldr	r3, [pc, #52]	; (80012b4 <takeWifiPass+0x28c>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d031      	beq.n	80012ea <takeWifiPass+0x2c2>
            	wifiPass[wifiPassLoc] = '\0';
 8001286:	4a0b      	ldr	r2, [pc, #44]	; (80012b4 <takeWifiPass+0x28c>)
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	4413      	add	r3, r2
 800128c:	2200      	movs	r2, #0
 800128e:	701a      	strb	r2, [r3, #0]

            	lcd_delete_char(1, 6+wifiPassLoc);
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	b2db      	uxtb	r3, r3
 8001294:	3306      	adds	r3, #6
 8001296:	b2db      	uxtb	r3, r3
 8001298:	4619      	mov	r1, r3
 800129a:	2001      	movs	r0, #1
 800129c:	f7ff fa1a 	bl	80006d4 <lcd_delete_char>
            	HAL_Delay(50);
 80012a0:	2032      	movs	r0, #50	; 0x32
 80012a2:	f007 fe7d 	bl	8008fa0 <HAL_Delay>

            	if(writeLoc > 7) {
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	2b07      	cmp	r3, #7
 80012aa:	dd0d      	ble.n	80012c8 <takeWifiPass+0x2a0>
            		writeLoc--;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	60fb      	str	r3, [r7, #12]
 80012b2:	e00e      	b.n	80012d2 <takeWifiPass+0x2aa>
 80012b4:	20000d10 	.word	0x20000d10
 80012b8:	20000944 	.word	0x20000944
 80012bc:	20000948 	.word	0x20000948
 80012c0:	40010800 	.word	0x40010800
 80012c4:	40011000 	.word	0x40011000
            	} else if(writeLoc < 7) {
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	2b06      	cmp	r3, #6
 80012cc:	dc01      	bgt.n	80012d2 <takeWifiPass+0x2aa>
            		writeLoc = 7;
 80012ce:	2307      	movs	r3, #7
 80012d0:	60fb      	str	r3, [r7, #12]
            	}

            	if(wifiPassLoc > 0) {
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	dd03      	ble.n	80012e0 <takeWifiPass+0x2b8>
            		wifiPassLoc--;
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	3b01      	subs	r3, #1
 80012dc:	613b      	str	r3, [r7, #16]
 80012de:	e004      	b.n	80012ea <takeWifiPass+0x2c2>
            	} else if(wifiPassLoc < 0) {
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	da01      	bge.n	80012ea <takeWifiPass+0x2c2>
            		wifiPassLoc = 0;
 80012e6:	2300      	movs	r3, #0
 80012e8:	613b      	str	r3, [r7, #16]
            	}
            }

            HAL_Delay(250);
 80012ea:	20fa      	movs	r0, #250	; 0xfa
 80012ec:	f007 fe58 	bl	8008fa0 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80012f0:	4b05      	ldr	r3, [pc, #20]	; (8001308 <takeWifiPass+0x2e0>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	4619      	mov	r1, r3
 80012f8:	2002      	movs	r0, #2
 80012fa:	f7ff f996 	bl	800062a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80012fe:	e6b2      	b.n	8001066 <takeWifiPass+0x3e>
    }
}
 8001300:	bf00      	nop
 8001302:	3718      	adds	r7, #24
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	20000944 	.word	0x20000944

0800130c <checkSlideVal>:

int checkSlideVal(int state) {
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
	if(state == 0) { //ssid (33)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d111      	bne.n	800133e <checkSlideVal+0x32>
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 800131a:	2101      	movs	r1, #1
 800131c:	4813      	ldr	r0, [pc, #76]	; (800136c <checkSlideVal+0x60>)
 800131e:	f008 fc0f 	bl	8009b40 <HAL_GPIO_ReadPin>
 8001322:	4603      	mov	r3, r0
 8001324:	2b01      	cmp	r3, #1
 8001326:	d101      	bne.n	800132c <checkSlideVal+0x20>
			return 34;
 8001328:	2322      	movs	r3, #34	; 0x22
 800132a:	e01b      	b.n	8001364 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 800132c:	2108      	movs	r1, #8
 800132e:	4810      	ldr	r0, [pc, #64]	; (8001370 <checkSlideVal+0x64>)
 8001330:	f008 fc06 	bl	8009b40 <HAL_GPIO_ReadPin>
 8001334:	4603      	mov	r3, r0
 8001336:	2b01      	cmp	r3, #1
 8001338:	d113      	bne.n	8001362 <checkSlideVal+0x56>
			return 32;
 800133a:	2320      	movs	r3, #32
 800133c:	e012      	b.n	8001364 <checkSlideVal+0x58>
		}
	} else { //pass (34)
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 800133e:	2101      	movs	r1, #1
 8001340:	480a      	ldr	r0, [pc, #40]	; (800136c <checkSlideVal+0x60>)
 8001342:	f008 fbfd 	bl	8009b40 <HAL_GPIO_ReadPin>
 8001346:	4603      	mov	r3, r0
 8001348:	2b01      	cmp	r3, #1
 800134a:	d101      	bne.n	8001350 <checkSlideVal+0x44>
			return 35;
 800134c:	2323      	movs	r3, #35	; 0x23
 800134e:	e009      	b.n	8001364 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001350:	2108      	movs	r1, #8
 8001352:	4807      	ldr	r0, [pc, #28]	; (8001370 <checkSlideVal+0x64>)
 8001354:	f008 fbf4 	bl	8009b40 <HAL_GPIO_ReadPin>
 8001358:	4603      	mov	r3, r0
 800135a:	2b01      	cmp	r3, #1
 800135c:	d101      	bne.n	8001362 <checkSlideVal+0x56>
			return 33;
 800135e:	2321      	movs	r3, #33	; 0x21
 8001360:	e000      	b.n	8001364 <checkSlideVal+0x58>
		}
	}
	return 0;
 8001362:	2300      	movs	r3, #0
}
 8001364:	4618      	mov	r0, r3
 8001366:	3708      	adds	r7, #8
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	40010800 	.word	0x40010800
 8001370:	40011000 	.word	0x40011000

08001374 <slideText>:

void slideText(const char* text, int startPos, int startLine, int state) {
 8001374:	b580      	push	{r7, lr}
 8001376:	b08a      	sub	sp, #40	; 0x28
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
 8001380:	603b      	str	r3, [r7, #0]
	uint8_t uzunluk = strlen(text);
 8001382:	68f8      	ldr	r0, [r7, #12]
 8001384:	f7fe ff4e 	bl	8000224 <strlen>
 8001388:	4603      	mov	r3, r0
 800138a:	75fb      	strb	r3, [r7, #23]
	int mainLoopVal = 1;
 800138c:	2301      	movs	r3, #1
 800138e:	627b      	str	r3, [r7, #36]	; 0x24

	while(mainLoopVal == 1) {
 8001390:	e08a      	b.n	80014a8 <slideText+0x134>
		if(checkSlideVal(state) > 0) {
 8001392:	6838      	ldr	r0, [r7, #0]
 8001394:	f7ff ffba 	bl	800130c <checkSlideVal>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	dd07      	ble.n	80013ae <slideText+0x3a>
			menuSayac = checkSlideVal(state);
 800139e:	6838      	ldr	r0, [r7, #0]
 80013a0:	f7ff ffb4 	bl	800130c <checkSlideVal>
 80013a4:	4603      	mov	r3, r0
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	4b44      	ldr	r3, [pc, #272]	; (80014bc <slideText+0x148>)
 80013aa:	701a      	strb	r2, [r3, #0]
			break;
 80013ac:	e081      	b.n	80014b2 <slideText+0x13e>
		}

		for(int z=0; z < uzunluk; z++) {
 80013ae:	2300      	movs	r3, #0
 80013b0:	623b      	str	r3, [r7, #32]
 80013b2:	e075      	b.n	80014a0 <slideText+0x12c>
			if(checkSlideVal(state) > 0) {
 80013b4:	6838      	ldr	r0, [r7, #0]
 80013b6:	f7ff ffa9 	bl	800130c <checkSlideVal>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	dd09      	ble.n	80013d4 <slideText+0x60>
				menuSayac = checkSlideVal(state);
 80013c0:	6838      	ldr	r0, [r7, #0]
 80013c2:	f7ff ffa3 	bl	800130c <checkSlideVal>
 80013c6:	4603      	mov	r3, r0
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	4b3c      	ldr	r3, [pc, #240]	; (80014bc <slideText+0x148>)
 80013cc:	701a      	strb	r2, [r3, #0]
				mainLoopVal = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 80013d2:	e069      	b.n	80014a8 <slideText+0x134>
			}
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 80013d4:	68ba      	ldr	r2, [r7, #8]
 80013d6:	6a3b      	ldr	r3, [r7, #32]
 80013d8:	4413      	add	r3, r2
 80013da:	61fb      	str	r3, [r7, #28]
 80013dc:	e029      	b.n	8001432 <slideText+0xbe>
				if(checkSlideVal(state) > 0) {
 80013de:	6838      	ldr	r0, [r7, #0]
 80013e0:	f7ff ff94 	bl	800130c <checkSlideVal>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	dd0b      	ble.n	8001402 <slideText+0x8e>
					menuSayac = checkSlideVal(state);
 80013ea:	6838      	ldr	r0, [r7, #0]
 80013ec:	f7ff ff8e 	bl	800130c <checkSlideVal>
 80013f0:	4603      	mov	r3, r0
 80013f2:	b2da      	uxtb	r2, r3
 80013f4:	4b31      	ldr	r3, [pc, #196]	; (80014bc <slideText+0x148>)
 80013f6:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 80013f8:	7dfb      	ldrb	r3, [r7, #23]
 80013fa:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 80013fc:	2300      	movs	r3, #0
 80013fe:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8001400:	e01d      	b.n	800143e <slideText+0xca>
				}
				lcd_print_char(startLine, i-z, text[i-startPos]);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	b2d8      	uxtb	r0, r3
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	b2da      	uxtb	r2, r3
 800140a:	6a3b      	ldr	r3, [r7, #32]
 800140c:	b2db      	uxtb	r3, r3
 800140e:	1ad3      	subs	r3, r2, r3
 8001410:	b2d9      	uxtb	r1, r3
 8001412:	69fa      	ldr	r2, [r7, #28]
 8001414:	68bb      	ldr	r3, [r7, #8]
 8001416:	1ad3      	subs	r3, r2, r3
 8001418:	461a      	mov	r2, r3
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	4413      	add	r3, r2
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	461a      	mov	r2, r3
 8001422:	f7ff f936 	bl	8000692 <lcd_print_char>
				HAL_Delay(30);
 8001426:	201e      	movs	r0, #30
 8001428:	f007 fdba 	bl	8008fa0 <HAL_Delay>
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	3301      	adds	r3, #1
 8001430:	61fb      	str	r3, [r7, #28]
 8001432:	7dfa      	ldrb	r2, [r7, #23]
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	4413      	add	r3, r2
 8001438:	69fa      	ldr	r2, [r7, #28]
 800143a:	429a      	cmp	r2, r3
 800143c:	dbcf      	blt.n	80013de <slideText+0x6a>
			}

			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 800143e:	7dfb      	ldrb	r3, [r7, #23]
 8001440:	3b01      	subs	r3, #1
 8001442:	61bb      	str	r3, [r7, #24]
 8001444:	e023      	b.n	800148e <slideText+0x11a>
				if(checkSlideVal(state) > 0) {
 8001446:	6838      	ldr	r0, [r7, #0]
 8001448:	f7ff ff60 	bl	800130c <checkSlideVal>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	dd0b      	ble.n	800146a <slideText+0xf6>
					menuSayac = checkSlideVal(state);
 8001452:	6838      	ldr	r0, [r7, #0]
 8001454:	f7ff ff5a 	bl	800130c <checkSlideVal>
 8001458:	4603      	mov	r3, r0
 800145a:	b2da      	uxtb	r2, r3
 800145c:	4b17      	ldr	r3, [pc, #92]	; (80014bc <slideText+0x148>)
 800145e:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 8001460:	7dfb      	ldrb	r3, [r7, #23]
 8001462:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 8001464:	2300      	movs	r3, #0
 8001466:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8001468:	e017      	b.n	800149a <slideText+0x126>
				}
			     if(j >= startPos) {
 800146a:	69ba      	ldr	r2, [r7, #24]
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	429a      	cmp	r2, r3
 8001470:	db0a      	blt.n	8001488 <slideText+0x114>
			    	 lcd_print_char(startLine, j, ' ');
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	b2db      	uxtb	r3, r3
 8001476:	69ba      	ldr	r2, [r7, #24]
 8001478:	b2d1      	uxtb	r1, r2
 800147a:	2220      	movs	r2, #32
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff f908 	bl	8000692 <lcd_print_char>
			    	 HAL_Delay(30);
 8001482:	201e      	movs	r0, #30
 8001484:	f007 fd8c 	bl	8008fa0 <HAL_Delay>
			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 8001488:	69bb      	ldr	r3, [r7, #24]
 800148a:	3b01      	subs	r3, #1
 800148c:	61bb      	str	r3, [r7, #24]
 800148e:	7dfa      	ldrb	r2, [r7, #23]
 8001490:	6a3b      	ldr	r3, [r7, #32]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	429a      	cmp	r2, r3
 8001498:	dad5      	bge.n	8001446 <slideText+0xd2>
		for(int z=0; z < uzunluk; z++) {
 800149a:	6a3b      	ldr	r3, [r7, #32]
 800149c:	3301      	adds	r3, #1
 800149e:	623b      	str	r3, [r7, #32]
 80014a0:	7dfb      	ldrb	r3, [r7, #23]
 80014a2:	6a3a      	ldr	r2, [r7, #32]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	db85      	blt.n	80013b4 <slideText+0x40>
	while(mainLoopVal == 1) {
 80014a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	f43f af71 	beq.w	8001392 <slideText+0x1e>
			     }
			}
		}
	}
}
 80014b0:	bf00      	nop
 80014b2:	bf00      	nop
 80014b4:	3728      	adds	r7, #40	; 0x28
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000d35 	.word	0x20000d35

080014c0 <menu>:

void menu() {
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af04      	add	r7, sp, #16
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 80014c6:	2101      	movs	r1, #1
 80014c8:	488e      	ldr	r0, [pc, #568]	; (8001704 <menu+0x244>)
 80014ca:	f008 fb39 	bl	8009b40 <HAL_GPIO_ReadPin>
 80014ce:	4603      	mov	r3, r0
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	f040 808e 	bne.w	80015f2 <menu+0x132>
 80014d6:	4b8c      	ldr	r3, [pc, #560]	; (8001708 <menu+0x248>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	f083 0301 	eor.w	r3, r3, #1
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	f000 8086 	beq.w	80015f2 <menu+0x132>
		menuSayac = menuSayac+1;
 80014e6:	4b89      	ldr	r3, [pc, #548]	; (800170c <menu+0x24c>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	3301      	adds	r3, #1
 80014ec:	b2da      	uxtb	r2, r3
 80014ee:	4b87      	ldr	r3, [pc, #540]	; (800170c <menu+0x24c>)
 80014f0:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 80014f2:	4b86      	ldr	r3, [pc, #536]	; (800170c <menu+0x24c>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b24      	cmp	r3, #36	; 0x24
 80014f8:	d102      	bne.n	8001500 <menu+0x40>
			menuSayac = 1;
 80014fa:	4b84      	ldr	r3, [pc, #528]	; (800170c <menu+0x24c>)
 80014fc:	2201      	movs	r2, #1
 80014fe:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 8001500:	4b82      	ldr	r3, [pc, #520]	; (800170c <menu+0x24c>)
 8001502:	781b      	ldrb	r3, [r3, #0]
 8001504:	2b12      	cmp	r3, #18
 8001506:	d106      	bne.n	8001516 <menu+0x56>
 8001508:	4b81      	ldr	r3, [pc, #516]	; (8001710 <menu+0x250>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b00      	cmp	r3, #0
 800150e:	d102      	bne.n	8001516 <menu+0x56>
			menuSayac = 21;
 8001510:	4b7e      	ldr	r3, [pc, #504]	; (800170c <menu+0x24c>)
 8001512:	2215      	movs	r2, #21
 8001514:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 8001516:	4b7d      	ldr	r3, [pc, #500]	; (800170c <menu+0x24c>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b08      	cmp	r3, #8
 800151c:	d106      	bne.n	800152c <menu+0x6c>
 800151e:	4b7d      	ldr	r3, [pc, #500]	; (8001714 <menu+0x254>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d102      	bne.n	800152c <menu+0x6c>
			menuSayac = 16;
 8001526:	4b79      	ldr	r3, [pc, #484]	; (800170c <menu+0x24c>)
 8001528:	2210      	movs	r2, #16
 800152a:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 800152c:	4b77      	ldr	r3, [pc, #476]	; (800170c <menu+0x24c>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b0d      	cmp	r3, #13
 8001532:	d106      	bne.n	8001542 <menu+0x82>
 8001534:	4b77      	ldr	r3, [pc, #476]	; (8001714 <menu+0x254>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b01      	cmp	r3, #1
 800153a:	d102      	bne.n	8001542 <menu+0x82>
			menuSayac = 16;
 800153c:	4b73      	ldr	r3, [pc, #460]	; (800170c <menu+0x24c>)
 800153e:	2210      	movs	r2, #16
 8001540:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 8001542:	4b72      	ldr	r3, [pc, #456]	; (800170c <menu+0x24c>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	2b09      	cmp	r3, #9
 8001548:	d106      	bne.n	8001558 <menu+0x98>
 800154a:	4b72      	ldr	r3, [pc, #456]	; (8001714 <menu+0x254>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	2b02      	cmp	r3, #2
 8001550:	d102      	bne.n	8001558 <menu+0x98>
			menuSayac = 13;
 8001552:	4b6e      	ldr	r3, [pc, #440]	; (800170c <menu+0x24c>)
 8001554:	220d      	movs	r2, #13
 8001556:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001558:	4b6c      	ldr	r3, [pc, #432]	; (800170c <menu+0x24c>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b0a      	cmp	r3, #10
 800155e:	d10a      	bne.n	8001576 <menu+0xb6>
 8001560:	4b6d      	ldr	r3, [pc, #436]	; (8001718 <menu+0x258>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b01      	cmp	r3, #1
 8001566:	d003      	beq.n	8001570 <menu+0xb0>
 8001568:	4b6b      	ldr	r3, [pc, #428]	; (8001718 <menu+0x258>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2b02      	cmp	r3, #2
 800156e:	d102      	bne.n	8001576 <menu+0xb6>
			menuSayac = 11;
 8001570:	4b66      	ldr	r3, [pc, #408]	; (800170c <menu+0x24c>)
 8001572:	220b      	movs	r2, #11
 8001574:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 8001576:	4b65      	ldr	r3, [pc, #404]	; (800170c <menu+0x24c>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2b0c      	cmp	r3, #12
 800157c:	d10e      	bne.n	800159c <menu+0xdc>
 800157e:	4b67      	ldr	r3, [pc, #412]	; (800171c <menu+0x25c>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	2b01      	cmp	r3, #1
 8001584:	d003      	beq.n	800158e <menu+0xce>
 8001586:	4b65      	ldr	r3, [pc, #404]	; (800171c <menu+0x25c>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	2b02      	cmp	r3, #2
 800158c:	d106      	bne.n	800159c <menu+0xdc>
 800158e:	4b61      	ldr	r3, [pc, #388]	; (8001714 <menu+0x254>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b01      	cmp	r3, #1
 8001594:	d102      	bne.n	800159c <menu+0xdc>
			menuSayac = 16;
 8001596:	4b5d      	ldr	r3, [pc, #372]	; (800170c <menu+0x24c>)
 8001598:	2210      	movs	r2, #16
 800159a:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 800159c:	4b5b      	ldr	r3, [pc, #364]	; (800170c <menu+0x24c>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b0c      	cmp	r3, #12
 80015a2:	d10e      	bne.n	80015c2 <menu+0x102>
 80015a4:	4b5d      	ldr	r3, [pc, #372]	; (800171c <menu+0x25c>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d003      	beq.n	80015b4 <menu+0xf4>
 80015ac:	4b5b      	ldr	r3, [pc, #364]	; (800171c <menu+0x25c>)
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d106      	bne.n	80015c2 <menu+0x102>
 80015b4:	4b57      	ldr	r3, [pc, #348]	; (8001714 <menu+0x254>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b03      	cmp	r3, #3
 80015ba:	d102      	bne.n	80015c2 <menu+0x102>
			menuSayac = 13;
 80015bc:	4b53      	ldr	r3, [pc, #332]	; (800170c <menu+0x24c>)
 80015be:	220d      	movs	r2, #13
 80015c0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80015c2:	4b52      	ldr	r3, [pc, #328]	; (800170c <menu+0x24c>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	2b0f      	cmp	r3, #15
 80015c8:	d106      	bne.n	80015d8 <menu+0x118>
 80015ca:	4b55      	ldr	r3, [pc, #340]	; (8001720 <menu+0x260>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d102      	bne.n	80015d8 <menu+0x118>
			menuSayac = 16;
 80015d2:	4b4e      	ldr	r3, [pc, #312]	; (800170c <menu+0x24c>)
 80015d4:	2210      	movs	r2, #16
 80015d6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 80015d8:	4b4c      	ldr	r3, [pc, #304]	; (800170c <menu+0x24c>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	2b18      	cmp	r3, #24
 80015de:	d106      	bne.n	80015ee <menu+0x12e>
 80015e0:	4b4b      	ldr	r3, [pc, #300]	; (8001710 <menu+0x250>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d102      	bne.n	80015ee <menu+0x12e>
			menuSayac = 26;
 80015e8:	4b48      	ldr	r3, [pc, #288]	; (800170c <menu+0x24c>)
 80015ea:	221a      	movs	r2, #26
 80015ec:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80015ee:	f004 fd03 	bl	8005ff8 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 80015f2:	2108      	movs	r1, #8
 80015f4:	484b      	ldr	r0, [pc, #300]	; (8001724 <menu+0x264>)
 80015f6:	f008 faa3 	bl	8009b40 <HAL_GPIO_ReadPin>
 80015fa:	4603      	mov	r3, r0
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d175      	bne.n	80016ec <menu+0x22c>
 8001600:	4b41      	ldr	r3, [pc, #260]	; (8001708 <menu+0x248>)
 8001602:	781b      	ldrb	r3, [r3, #0]
 8001604:	f083 0301 	eor.w	r3, r3, #1
 8001608:	b2db      	uxtb	r3, r3
 800160a:	2b00      	cmp	r3, #0
 800160c:	d06e      	beq.n	80016ec <menu+0x22c>
		if (menuSayac <= 1) {
 800160e:	4b3f      	ldr	r3, [pc, #252]	; (800170c <menu+0x24c>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b01      	cmp	r3, #1
 8001614:	d802      	bhi.n	800161c <menu+0x15c>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 8001616:	4b3d      	ldr	r3, [pc, #244]	; (800170c <menu+0x24c>)
 8001618:	2224      	movs	r2, #36	; 0x24
 800161a:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 800161c:	4b3b      	ldr	r3, [pc, #236]	; (800170c <menu+0x24c>)
 800161e:	781b      	ldrb	r3, [r3, #0]
 8001620:	3b01      	subs	r3, #1
 8001622:	b2da      	uxtb	r2, r3
 8001624:	4b39      	ldr	r3, [pc, #228]	; (800170c <menu+0x24c>)
 8001626:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 8001628:	4b38      	ldr	r3, [pc, #224]	; (800170c <menu+0x24c>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b14      	cmp	r3, #20
 800162e:	d106      	bne.n	800163e <menu+0x17e>
 8001630:	4b37      	ldr	r3, [pc, #220]	; (8001710 <menu+0x250>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d102      	bne.n	800163e <menu+0x17e>
			menuSayac = 17;
 8001638:	4b34      	ldr	r3, [pc, #208]	; (800170c <menu+0x24c>)
 800163a:	2211      	movs	r2, #17
 800163c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 800163e:	4b33      	ldr	r3, [pc, #204]	; (800170c <menu+0x24c>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	2b0f      	cmp	r3, #15
 8001644:	d106      	bne.n	8001654 <menu+0x194>
 8001646:	4b33      	ldr	r3, [pc, #204]	; (8001714 <menu+0x254>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d102      	bne.n	8001654 <menu+0x194>
			menuSayac = 7;
 800164e:	4b2f      	ldr	r3, [pc, #188]	; (800170c <menu+0x24c>)
 8001650:	2207      	movs	r2, #7
 8001652:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 8001654:	4b2d      	ldr	r3, [pc, #180]	; (800170c <menu+0x24c>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b0f      	cmp	r3, #15
 800165a:	d106      	bne.n	800166a <menu+0x1aa>
 800165c:	4b2d      	ldr	r3, [pc, #180]	; (8001714 <menu+0x254>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b01      	cmp	r3, #1
 8001662:	d102      	bne.n	800166a <menu+0x1aa>
			menuSayac = 12;
 8001664:	4b29      	ldr	r3, [pc, #164]	; (800170c <menu+0x24c>)
 8001666:	220c      	movs	r2, #12
 8001668:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 800166a:	4b28      	ldr	r3, [pc, #160]	; (800170c <menu+0x24c>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	2b0c      	cmp	r3, #12
 8001670:	d106      	bne.n	8001680 <menu+0x1c0>
 8001672:	4b28      	ldr	r3, [pc, #160]	; (8001714 <menu+0x254>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	2b02      	cmp	r3, #2
 8001678:	d102      	bne.n	8001680 <menu+0x1c0>
			menuSayac = 8;
 800167a:	4b24      	ldr	r3, [pc, #144]	; (800170c <menu+0x24c>)
 800167c:	2208      	movs	r2, #8
 800167e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001680:	4b22      	ldr	r3, [pc, #136]	; (800170c <menu+0x24c>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b0a      	cmp	r3, #10
 8001686:	d10a      	bne.n	800169e <menu+0x1de>
 8001688:	4b23      	ldr	r3, [pc, #140]	; (8001718 <menu+0x258>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b01      	cmp	r3, #1
 800168e:	d003      	beq.n	8001698 <menu+0x1d8>
 8001690:	4b21      	ldr	r3, [pc, #132]	; (8001718 <menu+0x258>)
 8001692:	781b      	ldrb	r3, [r3, #0]
 8001694:	2b02      	cmp	r3, #2
 8001696:	d102      	bne.n	800169e <menu+0x1de>
			menuSayac = 9;
 8001698:	4b1c      	ldr	r3, [pc, #112]	; (800170c <menu+0x24c>)
 800169a:	2209      	movs	r2, #9
 800169c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 800169e:	4b1b      	ldr	r3, [pc, #108]	; (800170c <menu+0x24c>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b0c      	cmp	r3, #12
 80016a4:	d10a      	bne.n	80016bc <menu+0x1fc>
 80016a6:	4b1d      	ldr	r3, [pc, #116]	; (800171c <menu+0x25c>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	2b01      	cmp	r3, #1
 80016ac:	d003      	beq.n	80016b6 <menu+0x1f6>
 80016ae:	4b1b      	ldr	r3, [pc, #108]	; (800171c <menu+0x25c>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d102      	bne.n	80016bc <menu+0x1fc>
			menuSayac = 11;
 80016b6:	4b15      	ldr	r3, [pc, #84]	; (800170c <menu+0x24c>)
 80016b8:	220b      	movs	r2, #11
 80016ba:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80016bc:	4b13      	ldr	r3, [pc, #76]	; (800170c <menu+0x24c>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2b0f      	cmp	r3, #15
 80016c2:	d106      	bne.n	80016d2 <menu+0x212>
 80016c4:	4b16      	ldr	r3, [pc, #88]	; (8001720 <menu+0x260>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d102      	bne.n	80016d2 <menu+0x212>
			menuSayac = 14;
 80016cc:	4b0f      	ldr	r3, [pc, #60]	; (800170c <menu+0x24c>)
 80016ce:	220e      	movs	r2, #14
 80016d0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 80016d2:	4b0e      	ldr	r3, [pc, #56]	; (800170c <menu+0x24c>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2b19      	cmp	r3, #25
 80016d8:	d106      	bne.n	80016e8 <menu+0x228>
 80016da:	4b0d      	ldr	r3, [pc, #52]	; (8001710 <menu+0x250>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d102      	bne.n	80016e8 <menu+0x228>
			menuSayac = 23;
 80016e2:	4b0a      	ldr	r3, [pc, #40]	; (800170c <menu+0x24c>)
 80016e4:	2217      	movs	r2, #23
 80016e6:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80016e8:	f004 fc86 	bl	8005ff8 <bekle>
	}

	if (menuSayac == 0) {
 80016ec:	4b07      	ldr	r3, [pc, #28]	; (800170c <menu+0x24c>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d133      	bne.n	800175c <menu+0x29c>
		if(dilSecim == 0) {
 80016f4:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <menu+0x268>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d121      	bne.n	8001740 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 80016fc:	4a0b      	ldr	r2, [pc, #44]	; (800172c <menu+0x26c>)
 80016fe:	2101      	movs	r1, #1
 8001700:	2001      	movs	r0, #1
 8001702:	e015      	b.n	8001730 <menu+0x270>
 8001704:	40010800 	.word	0x40010800
 8001708:	20000d64 	.word	0x20000d64
 800170c:	20000d35 	.word	0x20000d35
 8001710:	20000d44 	.word	0x20000d44
 8001714:	20000d3d 	.word	0x20000d3d
 8001718:	20000d3e 	.word	0x20000d3e
 800171c:	20000d3f 	.word	0x20000d3f
 8001720:	20000d40 	.word	0x20000d40
 8001724:	40011000 	.word	0x40011000
 8001728:	20000d56 	.word	0x20000d56
 800172c:	0800d820 	.word	0x0800d820
 8001730:	f7fe ff9a 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 8001734:	4a94      	ldr	r2, [pc, #592]	; (8001988 <menu+0x4c8>)
 8001736:	2101      	movs	r1, #1
 8001738:	2002      	movs	r0, #2
 800173a:	f7fe ff95 	bl	8000668 <lcd_print>
 800173e:	e00d      	b.n	800175c <menu+0x29c>
		} else if(dilSecim  ==  1) {
 8001740:	4b92      	ldr	r3, [pc, #584]	; (800198c <menu+0x4cc>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b01      	cmp	r3, #1
 8001746:	d109      	bne.n	800175c <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 8001748:	4a91      	ldr	r2, [pc, #580]	; (8001990 <menu+0x4d0>)
 800174a:	2101      	movs	r1, #1
 800174c:	2001      	movs	r0, #1
 800174e:	f7fe ff8b 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 8001752:	4a90      	ldr	r2, [pc, #576]	; (8001994 <menu+0x4d4>)
 8001754:	2101      	movs	r1, #1
 8001756:	2002      	movs	r0, #2
 8001758:	f7fe ff86 	bl	8000668 <lcd_print>
		}
	}

	if (menuSayac == 1) {
 800175c:	4b8e      	ldr	r3, [pc, #568]	; (8001998 <menu+0x4d8>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b01      	cmp	r3, #1
 8001762:	f040 82b5 	bne.w	8001cd0 <menu+0x810>
		if(dilSecim == 0) {
 8001766:	4b89      	ldr	r3, [pc, #548]	; (800198c <menu+0x4cc>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d105      	bne.n	800177a <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 800176e:	4a8b      	ldr	r2, [pc, #556]	; (800199c <menu+0x4dc>)
 8001770:	2101      	movs	r1, #1
 8001772:	2001      	movs	r0, #1
 8001774:	f7fe ff78 	bl	8000668 <lcd_print>
 8001778:	e008      	b.n	800178c <menu+0x2cc>
		} else if(dilSecim == 1) {
 800177a:	4b84      	ldr	r3, [pc, #528]	; (800198c <menu+0x4cc>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d104      	bne.n	800178c <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 8001782:	4a87      	ldr	r2, [pc, #540]	; (80019a0 <menu+0x4e0>)
 8001784:	2101      	movs	r1, #1
 8001786:	2001      	movs	r0, #1
 8001788:	f7fe ff6e 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 800178c:	4b85      	ldr	r3, [pc, #532]	; (80019a4 <menu+0x4e4>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d123      	bne.n	80017dc <menu+0x31c>
			if(dilSecim == 0) {
 8001794:	4b7d      	ldr	r3, [pc, #500]	; (800198c <menu+0x4cc>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d105      	bne.n	80017a8 <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 800179c:	4a82      	ldr	r2, [pc, #520]	; (80019a8 <menu+0x4e8>)
 800179e:	2101      	movs	r1, #1
 80017a0:	2002      	movs	r0, #2
 80017a2:	f7fe ff61 	bl	8000668 <lcd_print>
 80017a6:	e008      	b.n	80017ba <menu+0x2fa>

			} else if(dilSecim == 1) {
 80017a8:	4b78      	ldr	r3, [pc, #480]	; (800198c <menu+0x4cc>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d104      	bne.n	80017ba <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 80017b0:	4a7e      	ldr	r2, [pc, #504]	; (80019ac <menu+0x4ec>)
 80017b2:	2101      	movs	r1, #1
 80017b4:	2002      	movs	r0, #2
 80017b6:	f7fe ff57 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "   ");
 80017ba:	4a7d      	ldr	r2, [pc, #500]	; (80019b0 <menu+0x4f0>)
 80017bc:	210f      	movs	r1, #15
 80017be:	2002      	movs	r0, #2
 80017c0:	f7fe ff52 	bl	8000668 <lcd_print>
			itoa(hataKayit1, snum, 10);
 80017c4:	4b7b      	ldr	r3, [pc, #492]	; (80019b4 <menu+0x4f4>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	220a      	movs	r2, #10
 80017ca:	497b      	ldr	r1, [pc, #492]	; (80019b8 <menu+0x4f8>)
 80017cc:	4618      	mov	r0, r3
 80017ce:	f00b f9e3 	bl	800cb98 <itoa>
			lcd_print(2, 14, snum);
 80017d2:	4a79      	ldr	r2, [pc, #484]	; (80019b8 <menu+0x4f8>)
 80017d4:	210e      	movs	r1, #14
 80017d6:	2002      	movs	r0, #2
 80017d8:	f7fe ff46 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 80017dc:	4b71      	ldr	r3, [pc, #452]	; (80019a4 <menu+0x4e4>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b01      	cmp	r3, #1
 80017e2:	d123      	bne.n	800182c <menu+0x36c>
			if(dilSecim == 0) {
 80017e4:	4b69      	ldr	r3, [pc, #420]	; (800198c <menu+0x4cc>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d105      	bne.n	80017f8 <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 80017ec:	4a73      	ldr	r2, [pc, #460]	; (80019bc <menu+0x4fc>)
 80017ee:	2101      	movs	r1, #1
 80017f0:	2002      	movs	r0, #2
 80017f2:	f7fe ff39 	bl	8000668 <lcd_print>
 80017f6:	e008      	b.n	800180a <menu+0x34a>
			} else if(dilSecim == 1) {
 80017f8:	4b64      	ldr	r3, [pc, #400]	; (800198c <menu+0x4cc>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d104      	bne.n	800180a <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 8001800:	4a6f      	ldr	r2, [pc, #444]	; (80019c0 <menu+0x500>)
 8001802:	2101      	movs	r1, #1
 8001804:	2002      	movs	r0, #2
 8001806:	f7fe ff2f 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800180a:	4a6e      	ldr	r2, [pc, #440]	; (80019c4 <menu+0x504>)
 800180c:	210f      	movs	r1, #15
 800180e:	2002      	movs	r0, #2
 8001810:	f7fe ff2a 	bl	8000668 <lcd_print>
			itoa(hataKayit2, snum, 10);
 8001814:	4b6c      	ldr	r3, [pc, #432]	; (80019c8 <menu+0x508>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	220a      	movs	r2, #10
 800181a:	4967      	ldr	r1, [pc, #412]	; (80019b8 <menu+0x4f8>)
 800181c:	4618      	mov	r0, r3
 800181e:	f00b f9bb 	bl	800cb98 <itoa>
			lcd_print(2, 14, snum);
 8001822:	4a65      	ldr	r2, [pc, #404]	; (80019b8 <menu+0x4f8>)
 8001824:	210e      	movs	r1, #14
 8001826:	2002      	movs	r0, #2
 8001828:	f7fe ff1e 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 800182c:	4b5d      	ldr	r3, [pc, #372]	; (80019a4 <menu+0x4e4>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b02      	cmp	r3, #2
 8001832:	d123      	bne.n	800187c <menu+0x3bc>
			if(dilSecim == 0) {
 8001834:	4b55      	ldr	r3, [pc, #340]	; (800198c <menu+0x4cc>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d105      	bne.n	8001848 <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 800183c:	4a63      	ldr	r2, [pc, #396]	; (80019cc <menu+0x50c>)
 800183e:	2101      	movs	r1, #1
 8001840:	2002      	movs	r0, #2
 8001842:	f7fe ff11 	bl	8000668 <lcd_print>
 8001846:	e008      	b.n	800185a <menu+0x39a>
			} else if(dilSecim == 1) {
 8001848:	4b50      	ldr	r3, [pc, #320]	; (800198c <menu+0x4cc>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d104      	bne.n	800185a <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 8001850:	4a5f      	ldr	r2, [pc, #380]	; (80019d0 <menu+0x510>)
 8001852:	2101      	movs	r1, #1
 8001854:	2002      	movs	r0, #2
 8001856:	f7fe ff07 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800185a:	4a5a      	ldr	r2, [pc, #360]	; (80019c4 <menu+0x504>)
 800185c:	210f      	movs	r1, #15
 800185e:	2002      	movs	r0, #2
 8001860:	f7fe ff02 	bl	8000668 <lcd_print>
			itoa(hataKayit3, snum, 10);
 8001864:	4b5b      	ldr	r3, [pc, #364]	; (80019d4 <menu+0x514>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	220a      	movs	r2, #10
 800186a:	4953      	ldr	r1, [pc, #332]	; (80019b8 <menu+0x4f8>)
 800186c:	4618      	mov	r0, r3
 800186e:	f00b f993 	bl	800cb98 <itoa>
			lcd_print(2, 14, snum);
 8001872:	4a51      	ldr	r2, [pc, #324]	; (80019b8 <menu+0x4f8>)
 8001874:	210e      	movs	r1, #14
 8001876:	2002      	movs	r0, #2
 8001878:	f7fe fef6 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 800187c:	4b49      	ldr	r3, [pc, #292]	; (80019a4 <menu+0x4e4>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b03      	cmp	r3, #3
 8001882:	d123      	bne.n	80018cc <menu+0x40c>
			if(dilSecim == 0) {
 8001884:	4b41      	ldr	r3, [pc, #260]	; (800198c <menu+0x4cc>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d105      	bne.n	8001898 <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 800188c:	4a52      	ldr	r2, [pc, #328]	; (80019d8 <menu+0x518>)
 800188e:	2101      	movs	r1, #1
 8001890:	2002      	movs	r0, #2
 8001892:	f7fe fee9 	bl	8000668 <lcd_print>
 8001896:	e008      	b.n	80018aa <menu+0x3ea>
			} else if(dilSecim == 1) {
 8001898:	4b3c      	ldr	r3, [pc, #240]	; (800198c <menu+0x4cc>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d104      	bne.n	80018aa <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 80018a0:	4a4e      	ldr	r2, [pc, #312]	; (80019dc <menu+0x51c>)
 80018a2:	2101      	movs	r1, #1
 80018a4:	2002      	movs	r0, #2
 80018a6:	f7fe fedf 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80018aa:	4a46      	ldr	r2, [pc, #280]	; (80019c4 <menu+0x504>)
 80018ac:	210f      	movs	r1, #15
 80018ae:	2002      	movs	r0, #2
 80018b0:	f7fe feda 	bl	8000668 <lcd_print>
			itoa(hataKayit4, snum, 10);
 80018b4:	4b4a      	ldr	r3, [pc, #296]	; (80019e0 <menu+0x520>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	220a      	movs	r2, #10
 80018ba:	493f      	ldr	r1, [pc, #252]	; (80019b8 <menu+0x4f8>)
 80018bc:	4618      	mov	r0, r3
 80018be:	f00b f96b 	bl	800cb98 <itoa>
			lcd_print(2, 14, snum);
 80018c2:	4a3d      	ldr	r2, [pc, #244]	; (80019b8 <menu+0x4f8>)
 80018c4:	210e      	movs	r1, #14
 80018c6:	2002      	movs	r0, #2
 80018c8:	f7fe fece 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 80018cc:	4b35      	ldr	r3, [pc, #212]	; (80019a4 <menu+0x4e4>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b04      	cmp	r3, #4
 80018d2:	d123      	bne.n	800191c <menu+0x45c>
			if(dilSecim == 0) {
 80018d4:	4b2d      	ldr	r3, [pc, #180]	; (800198c <menu+0x4cc>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d105      	bne.n	80018e8 <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 80018dc:	4a41      	ldr	r2, [pc, #260]	; (80019e4 <menu+0x524>)
 80018de:	2101      	movs	r1, #1
 80018e0:	2002      	movs	r0, #2
 80018e2:	f7fe fec1 	bl	8000668 <lcd_print>
 80018e6:	e008      	b.n	80018fa <menu+0x43a>
			} else if(dilSecim == 1) {
 80018e8:	4b28      	ldr	r3, [pc, #160]	; (800198c <menu+0x4cc>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d104      	bne.n	80018fa <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 80018f0:	4a3d      	ldr	r2, [pc, #244]	; (80019e8 <menu+0x528>)
 80018f2:	2101      	movs	r1, #1
 80018f4:	2002      	movs	r0, #2
 80018f6:	f7fe feb7 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80018fa:	4a32      	ldr	r2, [pc, #200]	; (80019c4 <menu+0x504>)
 80018fc:	210f      	movs	r1, #15
 80018fe:	2002      	movs	r0, #2
 8001900:	f7fe feb2 	bl	8000668 <lcd_print>
			itoa(hataKayit5, snum, 10);
 8001904:	4b39      	ldr	r3, [pc, #228]	; (80019ec <menu+0x52c>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	220a      	movs	r2, #10
 800190a:	492b      	ldr	r1, [pc, #172]	; (80019b8 <menu+0x4f8>)
 800190c:	4618      	mov	r0, r3
 800190e:	f00b f943 	bl	800cb98 <itoa>
			lcd_print(2, 14, snum);
 8001912:	4a29      	ldr	r2, [pc, #164]	; (80019b8 <menu+0x4f8>)
 8001914:	210e      	movs	r1, #14
 8001916:	2002      	movs	r0, #2
 8001918:	f7fe fea6 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 800191c:	4b21      	ldr	r3, [pc, #132]	; (80019a4 <menu+0x4e4>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	2b05      	cmp	r3, #5
 8001922:	d123      	bne.n	800196c <menu+0x4ac>
			if(dilSecim == 0) {
 8001924:	4b19      	ldr	r3, [pc, #100]	; (800198c <menu+0x4cc>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d105      	bne.n	8001938 <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 800192c:	4a30      	ldr	r2, [pc, #192]	; (80019f0 <menu+0x530>)
 800192e:	2101      	movs	r1, #1
 8001930:	2002      	movs	r0, #2
 8001932:	f7fe fe99 	bl	8000668 <lcd_print>
 8001936:	e008      	b.n	800194a <menu+0x48a>
			} else if(dilSecim == 1) {
 8001938:	4b14      	ldr	r3, [pc, #80]	; (800198c <menu+0x4cc>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b01      	cmp	r3, #1
 800193e:	d104      	bne.n	800194a <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 8001940:	4a2c      	ldr	r2, [pc, #176]	; (80019f4 <menu+0x534>)
 8001942:	2101      	movs	r1, #1
 8001944:	2002      	movs	r0, #2
 8001946:	f7fe fe8f 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800194a:	4a1e      	ldr	r2, [pc, #120]	; (80019c4 <menu+0x504>)
 800194c:	210f      	movs	r1, #15
 800194e:	2002      	movs	r0, #2
 8001950:	f7fe fe8a 	bl	8000668 <lcd_print>
			itoa(hataKayit6, snum, 10);
 8001954:	4b28      	ldr	r3, [pc, #160]	; (80019f8 <menu+0x538>)
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	220a      	movs	r2, #10
 800195a:	4917      	ldr	r1, [pc, #92]	; (80019b8 <menu+0x4f8>)
 800195c:	4618      	mov	r0, r3
 800195e:	f00b f91b 	bl	800cb98 <itoa>
			lcd_print(2, 14, snum);
 8001962:	4a15      	ldr	r2, [pc, #84]	; (80019b8 <menu+0x4f8>)
 8001964:	210e      	movs	r1, #14
 8001966:	2002      	movs	r0, #2
 8001968:	f7fe fe7e 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 800196c:	4b0d      	ldr	r3, [pc, #52]	; (80019a4 <menu+0x4e4>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b06      	cmp	r3, #6
 8001972:	d15f      	bne.n	8001a34 <menu+0x574>
			if(dilSecim == 0) {
 8001974:	4b05      	ldr	r3, [pc, #20]	; (800198c <menu+0x4cc>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d141      	bne.n	8001a00 <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 800197c:	4a1f      	ldr	r2, [pc, #124]	; (80019fc <menu+0x53c>)
 800197e:	2101      	movs	r1, #1
 8001980:	2002      	movs	r0, #2
 8001982:	f7fe fe71 	bl	8000668 <lcd_print>
 8001986:	e044      	b.n	8001a12 <menu+0x552>
 8001988:	0800d834 	.word	0x0800d834
 800198c:	20000d56 	.word	0x20000d56
 8001990:	0800d848 	.word	0x0800d848
 8001994:	0800d85c 	.word	0x0800d85c
 8001998:	20000d35 	.word	0x20000d35
 800199c:	0800d870 	.word	0x0800d870
 80019a0:	0800d884 	.word	0x0800d884
 80019a4:	20000d37 	.word	0x20000d37
 80019a8:	0800d898 	.word	0x0800d898
 80019ac:	0800d8a8 	.word	0x0800d8a8
 80019b0:	0800d8b8 	.word	0x0800d8b8
 80019b4:	20000d57 	.word	0x20000d57
 80019b8:	20000cb8 	.word	0x20000cb8
 80019bc:	0800d8bc 	.word	0x0800d8bc
 80019c0:	0800d8cc 	.word	0x0800d8cc
 80019c4:	0800d8dc 	.word	0x0800d8dc
 80019c8:	20000d58 	.word	0x20000d58
 80019cc:	0800d8e0 	.word	0x0800d8e0
 80019d0:	0800d8f0 	.word	0x0800d8f0
 80019d4:	20000d59 	.word	0x20000d59
 80019d8:	0800d900 	.word	0x0800d900
 80019dc:	0800d910 	.word	0x0800d910
 80019e0:	20000d5a 	.word	0x20000d5a
 80019e4:	0800d920 	.word	0x0800d920
 80019e8:	0800d930 	.word	0x0800d930
 80019ec:	20000d5b 	.word	0x20000d5b
 80019f0:	0800d940 	.word	0x0800d940
 80019f4:	0800d950 	.word	0x0800d950
 80019f8:	20000d5c 	.word	0x20000d5c
 80019fc:	0800d960 	.word	0x0800d960
			} else if(dilSecim == 1) {
 8001a00:	4b4f      	ldr	r3, [pc, #316]	; (8001b40 <menu+0x680>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d104      	bne.n	8001a12 <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 8001a08:	4a4e      	ldr	r2, [pc, #312]	; (8001b44 <menu+0x684>)
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	2002      	movs	r0, #2
 8001a0e:	f7fe fe2b 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001a12:	4a4d      	ldr	r2, [pc, #308]	; (8001b48 <menu+0x688>)
 8001a14:	210f      	movs	r1, #15
 8001a16:	2002      	movs	r0, #2
 8001a18:	f7fe fe26 	bl	8000668 <lcd_print>
			itoa(hataKayit7, snum, 10);
 8001a1c:	4b4b      	ldr	r3, [pc, #300]	; (8001b4c <menu+0x68c>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	220a      	movs	r2, #10
 8001a22:	494b      	ldr	r1, [pc, #300]	; (8001b50 <menu+0x690>)
 8001a24:	4618      	mov	r0, r3
 8001a26:	f00b f8b7 	bl	800cb98 <itoa>
			lcd_print(2, 14, snum);
 8001a2a:	4a49      	ldr	r2, [pc, #292]	; (8001b50 <menu+0x690>)
 8001a2c:	210e      	movs	r1, #14
 8001a2e:	2002      	movs	r0, #2
 8001a30:	f7fe fe1a 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8001a34:	4b47      	ldr	r3, [pc, #284]	; (8001b54 <menu+0x694>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b07      	cmp	r3, #7
 8001a3a:	d123      	bne.n	8001a84 <menu+0x5c4>
			if(dilSecim == 0) {
 8001a3c:	4b40      	ldr	r3, [pc, #256]	; (8001b40 <menu+0x680>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d105      	bne.n	8001a50 <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8001a44:	4a44      	ldr	r2, [pc, #272]	; (8001b58 <menu+0x698>)
 8001a46:	2101      	movs	r1, #1
 8001a48:	2002      	movs	r0, #2
 8001a4a:	f7fe fe0d 	bl	8000668 <lcd_print>
 8001a4e:	e008      	b.n	8001a62 <menu+0x5a2>
			} else if(dilSecim == 1) {
 8001a50:	4b3b      	ldr	r3, [pc, #236]	; (8001b40 <menu+0x680>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d104      	bne.n	8001a62 <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 8001a58:	4a40      	ldr	r2, [pc, #256]	; (8001b5c <menu+0x69c>)
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	2002      	movs	r0, #2
 8001a5e:	f7fe fe03 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001a62:	4a39      	ldr	r2, [pc, #228]	; (8001b48 <menu+0x688>)
 8001a64:	210f      	movs	r1, #15
 8001a66:	2002      	movs	r0, #2
 8001a68:	f7fe fdfe 	bl	8000668 <lcd_print>
			itoa(hataKayit8, snum, 10);
 8001a6c:	4b3c      	ldr	r3, [pc, #240]	; (8001b60 <menu+0x6a0>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	220a      	movs	r2, #10
 8001a72:	4937      	ldr	r1, [pc, #220]	; (8001b50 <menu+0x690>)
 8001a74:	4618      	mov	r0, r3
 8001a76:	f00b f88f 	bl	800cb98 <itoa>
			lcd_print(2, 14, snum);
 8001a7a:	4a35      	ldr	r2, [pc, #212]	; (8001b50 <menu+0x690>)
 8001a7c:	210e      	movs	r1, #14
 8001a7e:	2002      	movs	r0, #2
 8001a80:	f7fe fdf2 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8001a84:	4b33      	ldr	r3, [pc, #204]	; (8001b54 <menu+0x694>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b08      	cmp	r3, #8
 8001a8a:	d123      	bne.n	8001ad4 <menu+0x614>
			if(dilSecim == 0) {
 8001a8c:	4b2c      	ldr	r3, [pc, #176]	; (8001b40 <menu+0x680>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d105      	bne.n	8001aa0 <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8001a94:	4a33      	ldr	r2, [pc, #204]	; (8001b64 <menu+0x6a4>)
 8001a96:	2101      	movs	r1, #1
 8001a98:	2002      	movs	r0, #2
 8001a9a:	f7fe fde5 	bl	8000668 <lcd_print>
 8001a9e:	e008      	b.n	8001ab2 <menu+0x5f2>
			} else if(dilSecim == 1) {
 8001aa0:	4b27      	ldr	r3, [pc, #156]	; (8001b40 <menu+0x680>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d104      	bne.n	8001ab2 <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 8001aa8:	4a2f      	ldr	r2, [pc, #188]	; (8001b68 <menu+0x6a8>)
 8001aaa:	2101      	movs	r1, #1
 8001aac:	2002      	movs	r0, #2
 8001aae:	f7fe fddb 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001ab2:	4a25      	ldr	r2, [pc, #148]	; (8001b48 <menu+0x688>)
 8001ab4:	210f      	movs	r1, #15
 8001ab6:	2002      	movs	r0, #2
 8001ab8:	f7fe fdd6 	bl	8000668 <lcd_print>
			itoa(hataKayit9, snum, 10);
 8001abc:	4b2b      	ldr	r3, [pc, #172]	; (8001b6c <menu+0x6ac>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	220a      	movs	r2, #10
 8001ac2:	4923      	ldr	r1, [pc, #140]	; (8001b50 <menu+0x690>)
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f00b f867 	bl	800cb98 <itoa>
			lcd_print(2, 14, snum);
 8001aca:	4a21      	ldr	r2, [pc, #132]	; (8001b50 <menu+0x690>)
 8001acc:	210e      	movs	r1, #14
 8001ace:	2002      	movs	r0, #2
 8001ad0:	f7fe fdca 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8001ad4:	4b1f      	ldr	r3, [pc, #124]	; (8001b54 <menu+0x694>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b09      	cmp	r3, #9
 8001ada:	d123      	bne.n	8001b24 <menu+0x664>
			if(dilSecim == 0) {
 8001adc:	4b18      	ldr	r3, [pc, #96]	; (8001b40 <menu+0x680>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d105      	bne.n	8001af0 <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 8001ae4:	4a22      	ldr	r2, [pc, #136]	; (8001b70 <menu+0x6b0>)
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	2002      	movs	r0, #2
 8001aea:	f7fe fdbd 	bl	8000668 <lcd_print>
 8001aee:	e008      	b.n	8001b02 <menu+0x642>
			} else if(dilSecim == 1) {
 8001af0:	4b13      	ldr	r3, [pc, #76]	; (8001b40 <menu+0x680>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	2b01      	cmp	r3, #1
 8001af6:	d104      	bne.n	8001b02 <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 8001af8:	4a1e      	ldr	r2, [pc, #120]	; (8001b74 <menu+0x6b4>)
 8001afa:	2101      	movs	r1, #1
 8001afc:	2002      	movs	r0, #2
 8001afe:	f7fe fdb3 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 16, " ");
 8001b02:	4a1d      	ldr	r2, [pc, #116]	; (8001b78 <menu+0x6b8>)
 8001b04:	2110      	movs	r1, #16
 8001b06:	2002      	movs	r0, #2
 8001b08:	f7fe fdae 	bl	8000668 <lcd_print>
			itoa(hataKayit10, snum, 10);
 8001b0c:	4b1b      	ldr	r3, [pc, #108]	; (8001b7c <menu+0x6bc>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	220a      	movs	r2, #10
 8001b12:	490f      	ldr	r1, [pc, #60]	; (8001b50 <menu+0x690>)
 8001b14:	4618      	mov	r0, r3
 8001b16:	f00b f83f 	bl	800cb98 <itoa>
			lcd_print(2, 15, snum);
 8001b1a:	4a0d      	ldr	r2, [pc, #52]	; (8001b50 <menu+0x690>)
 8001b1c:	210f      	movs	r1, #15
 8001b1e:	2002      	movs	r0, #2
 8001b20:	f7fe fda2 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001b24:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <menu+0x694>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b0a      	cmp	r3, #10
 8001b2a:	d134      	bne.n	8001b96 <menu+0x6d6>
			if(dilSecim == 0) {
 8001b2c:	4b04      	ldr	r3, [pc, #16]	; (8001b40 <menu+0x680>)
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d127      	bne.n	8001b84 <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 8001b34:	4a12      	ldr	r2, [pc, #72]	; (8001b80 <menu+0x6c0>)
 8001b36:	2101      	movs	r1, #1
 8001b38:	2002      	movs	r0, #2
 8001b3a:	f7fe fd95 	bl	8000668 <lcd_print>
 8001b3e:	e02a      	b.n	8001b96 <menu+0x6d6>
 8001b40:	20000d56 	.word	0x20000d56
 8001b44:	0800d970 	.word	0x0800d970
 8001b48:	0800d8dc 	.word	0x0800d8dc
 8001b4c:	20000d5d 	.word	0x20000d5d
 8001b50:	20000cb8 	.word	0x20000cb8
 8001b54:	20000d37 	.word	0x20000d37
 8001b58:	0800d980 	.word	0x0800d980
 8001b5c:	0800d990 	.word	0x0800d990
 8001b60:	20000d5e 	.word	0x20000d5e
 8001b64:	0800d9a0 	.word	0x0800d9a0
 8001b68:	0800d9b0 	.word	0x0800d9b0
 8001b6c:	20000d5f 	.word	0x20000d5f
 8001b70:	0800d9c0 	.word	0x0800d9c0
 8001b74:	0800d9d0 	.word	0x0800d9d0
 8001b78:	0800d9e0 	.word	0x0800d9e0
 8001b7c:	20000d60 	.word	0x20000d60
 8001b80:	0800d9e4 	.word	0x0800d9e4
			} else if(dilSecim == 1) {
 8001b84:	4b82      	ldr	r3, [pc, #520]	; (8001d90 <menu+0x8d0>)
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d104      	bne.n	8001b96 <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 8001b8c:	4a81      	ldr	r2, [pc, #516]	; (8001d94 <menu+0x8d4>)
 8001b8e:	2101      	movs	r1, #1
 8001b90:	2002      	movs	r0, #2
 8001b92:	f7fe fd69 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001b96:	2102      	movs	r1, #2
 8001b98:	487f      	ldr	r0, [pc, #508]	; (8001d98 <menu+0x8d8>)
 8001b9a:	f007 ffd1 	bl	8009b40 <HAL_GPIO_ReadPin>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d119      	bne.n	8001bd8 <menu+0x718>
 8001ba4:	4b7d      	ldr	r3, [pc, #500]	; (8001d9c <menu+0x8dc>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	f083 0301 	eor.w	r3, r3, #1
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d012      	beq.n	8001bd8 <menu+0x718>
 8001bb2:	4b7b      	ldr	r3, [pc, #492]	; (8001da0 <menu+0x8e0>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d10e      	bne.n	8001bd8 <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001bba:	4b7a      	ldr	r3, [pc, #488]	; (8001da4 <menu+0x8e4>)
 8001bbc:	781b      	ldrb	r3, [r3, #0]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	4b78      	ldr	r3, [pc, #480]	; (8001da4 <menu+0x8e4>)
 8001bc4:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001bc6:	4b77      	ldr	r3, [pc, #476]	; (8001da4 <menu+0x8e4>)
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2b0a      	cmp	r3, #10
 8001bcc:	d902      	bls.n	8001bd4 <menu+0x714>
				hataGostermeSirasi = 0;
 8001bce:	4b75      	ldr	r3, [pc, #468]	; (8001da4 <menu+0x8e4>)
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001bd4:	f004 fa10 	bl	8005ff8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001bd8:	2104      	movs	r1, #4
 8001bda:	486f      	ldr	r0, [pc, #444]	; (8001d98 <menu+0x8d8>)
 8001bdc:	f007 ffb0 	bl	8009b40 <HAL_GPIO_ReadPin>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b01      	cmp	r3, #1
 8001be4:	d119      	bne.n	8001c1a <menu+0x75a>
 8001be6:	4b6d      	ldr	r3, [pc, #436]	; (8001d9c <menu+0x8dc>)
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	f083 0301 	eor.w	r3, r3, #1
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d012      	beq.n	8001c1a <menu+0x75a>
 8001bf4:	4b6a      	ldr	r3, [pc, #424]	; (8001da0 <menu+0x8e0>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d10e      	bne.n	8001c1a <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001bfc:	4b69      	ldr	r3, [pc, #420]	; (8001da4 <menu+0x8e4>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	3b01      	subs	r3, #1
 8001c02:	b2da      	uxtb	r2, r3
 8001c04:	4b67      	ldr	r3, [pc, #412]	; (8001da4 <menu+0x8e4>)
 8001c06:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001c08:	4b66      	ldr	r3, [pc, #408]	; (8001da4 <menu+0x8e4>)
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	2b0b      	cmp	r3, #11
 8001c0e:	d902      	bls.n	8001c16 <menu+0x756>
	    		hataGostermeSirasi = 10;
 8001c10:	4b64      	ldr	r3, [pc, #400]	; (8001da4 <menu+0x8e4>)
 8001c12:	220a      	movs	r2, #10
 8001c14:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001c16:	f004 f9ef 	bl	8005ff8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001c1a:	2108      	movs	r1, #8
 8001c1c:	485e      	ldr	r0, [pc, #376]	; (8001d98 <menu+0x8d8>)
 8001c1e:	f007 ff8f 	bl	8009b40 <HAL_GPIO_ReadPin>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d153      	bne.n	8001cd0 <menu+0x810>
 8001c28:	4b5c      	ldr	r3, [pc, #368]	; (8001d9c <menu+0x8dc>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	f083 0301 	eor.w	r3, r3, #1
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d04c      	beq.n	8001cd0 <menu+0x810>
 8001c36:	4b5b      	ldr	r3, [pc, #364]	; (8001da4 <menu+0x8e4>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	2b0a      	cmp	r3, #10
 8001c3c:	d148      	bne.n	8001cd0 <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 8001c3e:	4b5a      	ldr	r3, [pc, #360]	; (8001da8 <menu+0x8e8>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	701a      	strb	r2, [r3, #0]
 8001c44:	4b59      	ldr	r3, [pc, #356]	; (8001dac <menu+0x8ec>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001c4c:	4b58      	ldr	r3, [pc, #352]	; (8001db0 <menu+0x8f0>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	701a      	strb	r2, [r3, #0]
 8001c52:	4b56      	ldr	r3, [pc, #344]	; (8001dac <menu+0x8ec>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001c5a:	4b56      	ldr	r3, [pc, #344]	; (8001db4 <menu+0x8f4>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	701a      	strb	r2, [r3, #0]
 8001c60:	4b52      	ldr	r3, [pc, #328]	; (8001dac <menu+0x8ec>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001c68:	4b53      	ldr	r3, [pc, #332]	; (8001db8 <menu+0x8f8>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	701a      	strb	r2, [r3, #0]
 8001c6e:	4b4f      	ldr	r3, [pc, #316]	; (8001dac <menu+0x8ec>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001c76:	4b51      	ldr	r3, [pc, #324]	; (8001dbc <menu+0x8fc>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	701a      	strb	r2, [r3, #0]
 8001c7c:	4b4b      	ldr	r3, [pc, #300]	; (8001dac <menu+0x8ec>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001c84:	4b4e      	ldr	r3, [pc, #312]	; (8001dc0 <menu+0x900>)
 8001c86:	2200      	movs	r2, #0
 8001c88:	701a      	strb	r2, [r3, #0]
 8001c8a:	4b48      	ldr	r3, [pc, #288]	; (8001dac <menu+0x8ec>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001c92:	4b4c      	ldr	r3, [pc, #304]	; (8001dc4 <menu+0x904>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	701a      	strb	r2, [r3, #0]
 8001c98:	4b44      	ldr	r3, [pc, #272]	; (8001dac <menu+0x8ec>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001ca0:	4b49      	ldr	r3, [pc, #292]	; (8001dc8 <menu+0x908>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	701a      	strb	r2, [r3, #0]
 8001ca6:	4b41      	ldr	r3, [pc, #260]	; (8001dac <menu+0x8ec>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001cae:	4b47      	ldr	r3, [pc, #284]	; (8001dcc <menu+0x90c>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	701a      	strb	r2, [r3, #0]
 8001cb4:	4b3d      	ldr	r3, [pc, #244]	; (8001dac <menu+0x8ec>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001cbc:	4b44      	ldr	r3, [pc, #272]	; (8001dd0 <menu+0x910>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	701a      	strb	r2, [r3, #0]
 8001cc2:	4b3a      	ldr	r3, [pc, #232]	; (8001dac <menu+0x8ec>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8001cca:	4b42      	ldr	r3, [pc, #264]	; (8001dd4 <menu+0x914>)
 8001ccc:	2201      	movs	r2, #1
 8001cce:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001cd0:	4b41      	ldr	r3, [pc, #260]	; (8001dd8 <menu+0x918>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	f040 80fc 	bne.w	8001ed2 <menu+0xa12>
		if(dilSecim == 0) {
 8001cda:	4b2d      	ldr	r3, [pc, #180]	; (8001d90 <menu+0x8d0>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d105      	bne.n	8001cee <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8001ce2:	4a3e      	ldr	r2, [pc, #248]	; (8001ddc <menu+0x91c>)
 8001ce4:	2101      	movs	r1, #1
 8001ce6:	2001      	movs	r0, #1
 8001ce8:	f7fe fcbe 	bl	8000668 <lcd_print>
 8001cec:	e008      	b.n	8001d00 <menu+0x840>
		} else if(dilSecim == 1) {
 8001cee:	4b28      	ldr	r3, [pc, #160]	; (8001d90 <menu+0x8d0>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d104      	bne.n	8001d00 <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8001cf6:	4a3a      	ldr	r2, [pc, #232]	; (8001de0 <menu+0x920>)
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	2001      	movs	r0, #1
 8001cfc:	f7fe fcb4 	bl	8000668 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001d00:	4b27      	ldr	r3, [pc, #156]	; (8001da0 <menu+0x8e0>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d003      	beq.n	8001d10 <menu+0x850>
 8001d08:	4b25      	ldr	r3, [pc, #148]	; (8001da0 <menu+0x8e0>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d112      	bne.n	8001d36 <menu+0x876>
			if(dilSecim == 0) {
 8001d10:	4b1f      	ldr	r3, [pc, #124]	; (8001d90 <menu+0x8d0>)
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d105      	bne.n	8001d24 <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8001d18:	4a32      	ldr	r2, [pc, #200]	; (8001de4 <menu+0x924>)
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	2002      	movs	r0, #2
 8001d1e:	f7fe fca3 	bl	8000668 <lcd_print>
 8001d22:	e008      	b.n	8001d36 <menu+0x876>
			} else if(dilSecim == 1) {
 8001d24:	4b1a      	ldr	r3, [pc, #104]	; (8001d90 <menu+0x8d0>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	2b01      	cmp	r3, #1
 8001d2a:	d104      	bne.n	8001d36 <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 8001d2c:	4a2e      	ldr	r2, [pc, #184]	; (8001de8 <menu+0x928>)
 8001d2e:	2101      	movs	r1, #1
 8001d30:	2002      	movs	r0, #2
 8001d32:	f7fe fc99 	bl	8000668 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001d36:	4b2d      	ldr	r3, [pc, #180]	; (8001dec <menu+0x92c>)
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d116      	bne.n	8001d6c <menu+0x8ac>
 8001d3e:	4b18      	ldr	r3, [pc, #96]	; (8001da0 <menu+0x8e0>)
 8001d40:	781b      	ldrb	r3, [r3, #0]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d112      	bne.n	8001d6c <menu+0x8ac>
			if(dilSecim == 0) {
 8001d46:	4b12      	ldr	r3, [pc, #72]	; (8001d90 <menu+0x8d0>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d105      	bne.n	8001d5a <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 8001d4e:	4a28      	ldr	r2, [pc, #160]	; (8001df0 <menu+0x930>)
 8001d50:	2101      	movs	r1, #1
 8001d52:	2002      	movs	r0, #2
 8001d54:	f7fe fc88 	bl	8000668 <lcd_print>
 8001d58:	e008      	b.n	8001d6c <menu+0x8ac>
			} else if(dilSecim == 1) {
 8001d5a:	4b0d      	ldr	r3, [pc, #52]	; (8001d90 <menu+0x8d0>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d104      	bne.n	8001d6c <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 8001d62:	4a24      	ldr	r2, [pc, #144]	; (8001df4 <menu+0x934>)
 8001d64:	2101      	movs	r1, #1
 8001d66:	2002      	movs	r0, #2
 8001d68:	f7fe fc7e 	bl	8000668 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001d6c:	4b1f      	ldr	r3, [pc, #124]	; (8001dec <menu+0x92c>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	2b01      	cmp	r3, #1
 8001d72:	d14c      	bne.n	8001e0e <menu+0x94e>
 8001d74:	4b0a      	ldr	r3, [pc, #40]	; (8001da0 <menu+0x8e0>)
 8001d76:	781b      	ldrb	r3, [r3, #0]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d148      	bne.n	8001e0e <menu+0x94e>
			if(dilSecim == 0) {
 8001d7c:	4b04      	ldr	r3, [pc, #16]	; (8001d90 <menu+0x8d0>)
 8001d7e:	781b      	ldrb	r3, [r3, #0]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d13b      	bne.n	8001dfc <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 8001d84:	4a1c      	ldr	r2, [pc, #112]	; (8001df8 <menu+0x938>)
 8001d86:	2101      	movs	r1, #1
 8001d88:	2002      	movs	r0, #2
 8001d8a:	f7fe fc6d 	bl	8000668 <lcd_print>
 8001d8e:	e03e      	b.n	8001e0e <menu+0x94e>
 8001d90:	20000d56 	.word	0x20000d56
 8001d94:	0800d9f8 	.word	0x0800d9f8
 8001d98:	40010800 	.word	0x40010800
 8001d9c:	20000d64 	.word	0x20000d64
 8001da0:	20000d44 	.word	0x20000d44
 8001da4:	20000d37 	.word	0x20000d37
 8001da8:	20000d57 	.word	0x20000d57
 8001dac:	20000c34 	.word	0x20000c34
 8001db0:	20000d58 	.word	0x20000d58
 8001db4:	20000d59 	.word	0x20000d59
 8001db8:	20000d5a 	.word	0x20000d5a
 8001dbc:	20000d5b 	.word	0x20000d5b
 8001dc0:	20000d5c 	.word	0x20000d5c
 8001dc4:	20000d5d 	.word	0x20000d5d
 8001dc8:	20000d5e 	.word	0x20000d5e
 8001dcc:	20000d5f 	.word	0x20000d5f
 8001dd0:	20000d60 	.word	0x20000d60
 8001dd4:	20000d61 	.word	0x20000d61
 8001dd8:	20000d35 	.word	0x20000d35
 8001ddc:	0800da0c 	.word	0x0800da0c
 8001de0:	0800da20 	.word	0x0800da20
 8001de4:	0800da34 	.word	0x0800da34
 8001de8:	0800da48 	.word	0x0800da48
 8001dec:	20000d36 	.word	0x20000d36
 8001df0:	0800da5c 	.word	0x0800da5c
 8001df4:	0800da6c 	.word	0x0800da6c
 8001df8:	0800da7c 	.word	0x0800da7c
			} else if(dilSecim == 1) {
 8001dfc:	4b98      	ldr	r3, [pc, #608]	; (8002060 <menu+0xba0>)
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2b01      	cmp	r3, #1
 8001e02:	d104      	bne.n	8001e0e <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 8001e04:	4a97      	ldr	r2, [pc, #604]	; (8002064 <menu+0xba4>)
 8001e06:	2101      	movs	r1, #1
 8001e08:	2002      	movs	r0, #2
 8001e0a:	f7fe fc2d 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001e0e:	2102      	movs	r1, #2
 8001e10:	4895      	ldr	r0, [pc, #596]	; (8002068 <menu+0xba8>)
 8001e12:	f007 fe95 	bl	8009b40 <HAL_GPIO_ReadPin>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d119      	bne.n	8001e50 <menu+0x990>
 8001e1c:	4b93      	ldr	r3, [pc, #588]	; (800206c <menu+0xbac>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	f083 0301 	eor.w	r3, r3, #1
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d012      	beq.n	8001e50 <menu+0x990>
 8001e2a:	4b91      	ldr	r3, [pc, #580]	; (8002070 <menu+0xbb0>)
 8001e2c:	781b      	ldrb	r3, [r3, #0]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d10e      	bne.n	8001e50 <menu+0x990>
			calismaSekli = calismaSekli + 1;
 8001e32:	4b90      	ldr	r3, [pc, #576]	; (8002074 <menu+0xbb4>)
 8001e34:	781b      	ldrb	r3, [r3, #0]
 8001e36:	3301      	adds	r3, #1
 8001e38:	b2da      	uxtb	r2, r3
 8001e3a:	4b8e      	ldr	r3, [pc, #568]	; (8002074 <menu+0xbb4>)
 8001e3c:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001e3e:	4b8d      	ldr	r3, [pc, #564]	; (8002074 <menu+0xbb4>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	2b01      	cmp	r3, #1
 8001e44:	d902      	bls.n	8001e4c <menu+0x98c>
				calismaSekli = 0;
 8001e46:	4b8b      	ldr	r3, [pc, #556]	; (8002074 <menu+0xbb4>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001e4c:	f004 f8d4 	bl	8005ff8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001e50:	2104      	movs	r1, #4
 8001e52:	4885      	ldr	r0, [pc, #532]	; (8002068 <menu+0xba8>)
 8001e54:	f007 fe74 	bl	8009b40 <HAL_GPIO_ReadPin>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d119      	bne.n	8001e92 <menu+0x9d2>
 8001e5e:	4b83      	ldr	r3, [pc, #524]	; (800206c <menu+0xbac>)
 8001e60:	781b      	ldrb	r3, [r3, #0]
 8001e62:	f083 0301 	eor.w	r3, r3, #1
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d012      	beq.n	8001e92 <menu+0x9d2>
 8001e6c:	4b80      	ldr	r3, [pc, #512]	; (8002070 <menu+0xbb0>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d10e      	bne.n	8001e92 <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 8001e74:	4b7f      	ldr	r3, [pc, #508]	; (8002074 <menu+0xbb4>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	3b01      	subs	r3, #1
 8001e7a:	b2da      	uxtb	r2, r3
 8001e7c:	4b7d      	ldr	r3, [pc, #500]	; (8002074 <menu+0xbb4>)
 8001e7e:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001e80:	4b7c      	ldr	r3, [pc, #496]	; (8002074 <menu+0xbb4>)
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d002      	beq.n	8001e8e <menu+0x9ce>
	    		calismaSekli = 1;
 8001e88:	4b7a      	ldr	r3, [pc, #488]	; (8002074 <menu+0xbb4>)
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001e8e:	f004 f8b3 	bl	8005ff8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e92:	2108      	movs	r1, #8
 8001e94:	4874      	ldr	r0, [pc, #464]	; (8002068 <menu+0xba8>)
 8001e96:	f007 fe53 	bl	8009b40 <HAL_GPIO_ReadPin>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d118      	bne.n	8001ed2 <menu+0xa12>
 8001ea0:	4b72      	ldr	r3, [pc, #456]	; (800206c <menu+0xbac>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	f083 0301 	eor.w	r3, r3, #1
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d011      	beq.n	8001ed2 <menu+0xa12>
			eepromData[1] = calismaSekli;
 8001eae:	4b71      	ldr	r3, [pc, #452]	; (8002074 <menu+0xbb4>)
 8001eb0:	781a      	ldrb	r2, [r3, #0]
 8001eb2:	4b71      	ldr	r3, [pc, #452]	; (8002078 <menu+0xbb8>)
 8001eb4:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001eb6:	4b6f      	ldr	r3, [pc, #444]	; (8002074 <menu+0xbb4>)
 8001eb8:	781b      	ldrb	r3, [r3, #0]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d106      	bne.n	8001ecc <menu+0xa0c>
				altLimit = 1;
 8001ebe:	4b6f      	ldr	r3, [pc, #444]	; (800207c <menu+0xbbc>)
 8001ec0:	2201      	movs	r2, #1
 8001ec2:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001ec4:	4b6d      	ldr	r3, [pc, #436]	; (800207c <menu+0xbbc>)
 8001ec6:	781a      	ldrb	r2, [r3, #0]
 8001ec8:	4b6b      	ldr	r3, [pc, #428]	; (8002078 <menu+0xbb8>)
 8001eca:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001ecc:	4b6c      	ldr	r3, [pc, #432]	; (8002080 <menu+0xbc0>)
 8001ece:	2201      	movs	r2, #1
 8001ed0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001ed2:	4b6c      	ldr	r3, [pc, #432]	; (8002084 <menu+0xbc4>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	2b03      	cmp	r3, #3
 8001ed8:	f040 8083 	bne.w	8001fe2 <menu+0xb22>
		if(dilSecim == 0) {
 8001edc:	4b60      	ldr	r3, [pc, #384]	; (8002060 <menu+0xba0>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d105      	bne.n	8001ef0 <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8001ee4:	4a68      	ldr	r2, [pc, #416]	; (8002088 <menu+0xbc8>)
 8001ee6:	2101      	movs	r1, #1
 8001ee8:	2001      	movs	r0, #1
 8001eea:	f7fe fbbd 	bl	8000668 <lcd_print>
 8001eee:	e008      	b.n	8001f02 <menu+0xa42>
		} else if(dilSecim == 1) {
 8001ef0:	4b5b      	ldr	r3, [pc, #364]	; (8002060 <menu+0xba0>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d104      	bne.n	8001f02 <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8001ef8:	4a64      	ldr	r2, [pc, #400]	; (800208c <menu+0xbcc>)
 8001efa:	2101      	movs	r1, #1
 8001efc:	2001      	movs	r0, #1
 8001efe:	f7fe fbb3 	bl	8000668 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8001f02:	4b63      	ldr	r3, [pc, #396]	; (8002090 <menu+0xbd0>)
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d113      	bne.n	8001f32 <menu+0xa72>
			if(dilSecim == 0) {
 8001f0a:	4b55      	ldr	r3, [pc, #340]	; (8002060 <menu+0xba0>)
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d105      	bne.n	8001f1e <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 8001f12:	4a60      	ldr	r2, [pc, #384]	; (8002094 <menu+0xbd4>)
 8001f14:	2101      	movs	r1, #1
 8001f16:	2002      	movs	r0, #2
 8001f18:	f7fe fba6 	bl	8000668 <lcd_print>
 8001f1c:	e012      	b.n	8001f44 <menu+0xa84>
			} else if(dilSecim == 1) {
 8001f1e:	4b50      	ldr	r3, [pc, #320]	; (8002060 <menu+0xba0>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d10e      	bne.n	8001f44 <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 8001f26:	4a5c      	ldr	r2, [pc, #368]	; (8002098 <menu+0xbd8>)
 8001f28:	2101      	movs	r1, #1
 8001f2a:	2002      	movs	r0, #2
 8001f2c:	f7fe fb9c 	bl	8000668 <lcd_print>
 8001f30:	e008      	b.n	8001f44 <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 8001f32:	4b57      	ldr	r3, [pc, #348]	; (8002090 <menu+0xbd0>)
 8001f34:	781b      	ldrb	r3, [r3, #0]
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d104      	bne.n	8001f44 <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 8001f3a:	4a58      	ldr	r2, [pc, #352]	; (800209c <menu+0xbdc>)
 8001f3c:	2101      	movs	r1, #1
 8001f3e:	2002      	movs	r0, #2
 8001f40:	f7fe fb92 	bl	8000668 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f44:	2102      	movs	r1, #2
 8001f46:	4848      	ldr	r0, [pc, #288]	; (8002068 <menu+0xba8>)
 8001f48:	f007 fdfa 	bl	8009b40 <HAL_GPIO_ReadPin>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d115      	bne.n	8001f7e <menu+0xabe>
 8001f52:	4b46      	ldr	r3, [pc, #280]	; (800206c <menu+0xbac>)
 8001f54:	781b      	ldrb	r3, [r3, #0]
 8001f56:	f083 0301 	eor.w	r3, r3, #1
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d00e      	beq.n	8001f7e <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001f60:	4b4b      	ldr	r3, [pc, #300]	; (8002090 <menu+0xbd0>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	3301      	adds	r3, #1
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	4b49      	ldr	r3, [pc, #292]	; (8002090 <menu+0xbd0>)
 8001f6a:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001f6c:	4b48      	ldr	r3, [pc, #288]	; (8002090 <menu+0xbd0>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	2b01      	cmp	r3, #1
 8001f72:	d902      	bls.n	8001f7a <menu+0xaba>
				emniyetCercevesi = 0;
 8001f74:	4b46      	ldr	r3, [pc, #280]	; (8002090 <menu+0xbd0>)
 8001f76:	2200      	movs	r2, #0
 8001f78:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001f7a:	f004 f83d 	bl	8005ff8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f7e:	2104      	movs	r1, #4
 8001f80:	4839      	ldr	r0, [pc, #228]	; (8002068 <menu+0xba8>)
 8001f82:	f007 fddd 	bl	8009b40 <HAL_GPIO_ReadPin>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d115      	bne.n	8001fb8 <menu+0xaf8>
 8001f8c:	4b37      	ldr	r3, [pc, #220]	; (800206c <menu+0xbac>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	f083 0301 	eor.w	r3, r3, #1
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00e      	beq.n	8001fb8 <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001f9a:	4b3d      	ldr	r3, [pc, #244]	; (8002090 <menu+0xbd0>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	b2da      	uxtb	r2, r3
 8001fa2:	4b3b      	ldr	r3, [pc, #236]	; (8002090 <menu+0xbd0>)
 8001fa4:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001fa6:	4b3a      	ldr	r3, [pc, #232]	; (8002090 <menu+0xbd0>)
 8001fa8:	781b      	ldrb	r3, [r3, #0]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d002      	beq.n	8001fb4 <menu+0xaf4>
		   		emniyetCercevesi = 1;
 8001fae:	4b38      	ldr	r3, [pc, #224]	; (8002090 <menu+0xbd0>)
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001fb4:	f004 f820 	bl	8005ff8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001fb8:	2108      	movs	r1, #8
 8001fba:	482b      	ldr	r0, [pc, #172]	; (8002068 <menu+0xba8>)
 8001fbc:	f007 fdc0 	bl	8009b40 <HAL_GPIO_ReadPin>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b01      	cmp	r3, #1
 8001fc4:	d10d      	bne.n	8001fe2 <menu+0xb22>
 8001fc6:	4b29      	ldr	r3, [pc, #164]	; (800206c <menu+0xbac>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	f083 0301 	eor.w	r3, r3, #1
 8001fce:	b2db      	uxtb	r3, r3
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d006      	beq.n	8001fe2 <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 8001fd4:	4b2e      	ldr	r3, [pc, #184]	; (8002090 <menu+0xbd0>)
 8001fd6:	781a      	ldrb	r2, [r3, #0]
 8001fd8:	4b27      	ldr	r3, [pc, #156]	; (8002078 <menu+0xbb8>)
 8001fda:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001fdc:	4b28      	ldr	r3, [pc, #160]	; (8002080 <menu+0xbc0>)
 8001fde:	2201      	movs	r2, #1
 8001fe0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001fe2:	4b28      	ldr	r3, [pc, #160]	; (8002084 <menu+0xbc4>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	2b04      	cmp	r3, #4
 8001fe8:	f040 80ba 	bne.w	8002160 <menu+0xca0>
		if(dilSecim == 0) {
 8001fec:	4b1c      	ldr	r3, [pc, #112]	; (8002060 <menu+0xba0>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d105      	bne.n	8002000 <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 8001ff4:	4a2a      	ldr	r2, [pc, #168]	; (80020a0 <menu+0xbe0>)
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	2001      	movs	r0, #1
 8001ffa:	f7fe fb35 	bl	8000668 <lcd_print>
 8001ffe:	e008      	b.n	8002012 <menu+0xb52>
		} else if(dilSecim == 1) {
 8002000:	4b17      	ldr	r3, [pc, #92]	; (8002060 <menu+0xba0>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d104      	bne.n	8002012 <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8002008:	4a26      	ldr	r2, [pc, #152]	; (80020a4 <menu+0xbe4>)
 800200a:	2101      	movs	r1, #1
 800200c:	2001      	movs	r0, #1
 800200e:	f7fe fb2b 	bl	8000668 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 8002012:	4b25      	ldr	r3, [pc, #148]	; (80020a8 <menu+0xbe8>)
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d113      	bne.n	8002042 <menu+0xb82>
			if(dilSecim == 0) {
 800201a:	4b11      	ldr	r3, [pc, #68]	; (8002060 <menu+0xba0>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d105      	bne.n	800202e <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 8002022:	4a1c      	ldr	r2, [pc, #112]	; (8002094 <menu+0xbd4>)
 8002024:	2101      	movs	r1, #1
 8002026:	2002      	movs	r0, #2
 8002028:	f7fe fb1e 	bl	8000668 <lcd_print>
 800202c:	e049      	b.n	80020c2 <menu+0xc02>
			} else if(dilSecim == 1) {
 800202e:	4b0c      	ldr	r3, [pc, #48]	; (8002060 <menu+0xba0>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b01      	cmp	r3, #1
 8002034:	d145      	bne.n	80020c2 <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 8002036:	4a18      	ldr	r2, [pc, #96]	; (8002098 <menu+0xbd8>)
 8002038:	2101      	movs	r1, #1
 800203a:	2002      	movs	r0, #2
 800203c:	f7fe fb14 	bl	8000668 <lcd_print>
 8002040:	e03f      	b.n	80020c2 <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 8002042:	4b19      	ldr	r3, [pc, #100]	; (80020a8 <menu+0xbe8>)
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	2b01      	cmp	r3, #1
 8002048:	d13b      	bne.n	80020c2 <menu+0xc02>
			if(dilSecim == 0) {
 800204a:	4b05      	ldr	r3, [pc, #20]	; (8002060 <menu+0xba0>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d12e      	bne.n	80020b0 <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 8002052:	4a16      	ldr	r2, [pc, #88]	; (80020ac <menu+0xbec>)
 8002054:	2101      	movs	r1, #1
 8002056:	2002      	movs	r0, #2
 8002058:	f7fe fb06 	bl	8000668 <lcd_print>
 800205c:	e031      	b.n	80020c2 <menu+0xc02>
 800205e:	bf00      	nop
 8002060:	20000d56 	.word	0x20000d56
 8002064:	0800da8c 	.word	0x0800da8c
 8002068:	40010800 	.word	0x40010800
 800206c:	20000d64 	.word	0x20000d64
 8002070:	20000d44 	.word	0x20000d44
 8002074:	20000d36 	.word	0x20000d36
 8002078:	20000c34 	.word	0x20000c34
 800207c:	20000d3b 	.word	0x20000d3b
 8002080:	20000d61 	.word	0x20000d61
 8002084:	20000d35 	.word	0x20000d35
 8002088:	0800da9c 	.word	0x0800da9c
 800208c:	0800dab0 	.word	0x0800dab0
 8002090:	20000d39 	.word	0x20000d39
 8002094:	0800dac4 	.word	0x0800dac4
 8002098:	0800dad8 	.word	0x0800dad8
 800209c:	0800daec 	.word	0x0800daec
 80020a0:	0800dafc 	.word	0x0800dafc
 80020a4:	0800db10 	.word	0x0800db10
 80020a8:	20000d3a 	.word	0x20000d3a
 80020ac:	0800db24 	.word	0x0800db24
			} else if(dilSecim == 1) {
 80020b0:	4b92      	ldr	r3, [pc, #584]	; (80022fc <menu+0xe3c>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d104      	bne.n	80020c2 <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 80020b8:	4a91      	ldr	r2, [pc, #580]	; (8002300 <menu+0xe40>)
 80020ba:	2101      	movs	r1, #1
 80020bc:	2002      	movs	r0, #2
 80020be:	f7fe fad3 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80020c2:	2102      	movs	r1, #2
 80020c4:	488f      	ldr	r0, [pc, #572]	; (8002304 <menu+0xe44>)
 80020c6:	f007 fd3b 	bl	8009b40 <HAL_GPIO_ReadPin>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d115      	bne.n	80020fc <menu+0xc3c>
 80020d0:	4b8d      	ldr	r3, [pc, #564]	; (8002308 <menu+0xe48>)
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	f083 0301 	eor.w	r3, r3, #1
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d00e      	beq.n	80020fc <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 80020de:	4b8b      	ldr	r3, [pc, #556]	; (800230c <menu+0xe4c>)
 80020e0:	781b      	ldrb	r3, [r3, #0]
 80020e2:	3301      	adds	r3, #1
 80020e4:	b2da      	uxtb	r2, r3
 80020e6:	4b89      	ldr	r3, [pc, #548]	; (800230c <menu+0xe4c>)
 80020e8:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 80020ea:	4b88      	ldr	r3, [pc, #544]	; (800230c <menu+0xe4c>)
 80020ec:	781b      	ldrb	r3, [r3, #0]
 80020ee:	2b01      	cmp	r3, #1
 80020f0:	d902      	bls.n	80020f8 <menu+0xc38>
				yavaslamaLimit = 0;
 80020f2:	4b86      	ldr	r3, [pc, #536]	; (800230c <menu+0xe4c>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80020f8:	f003 ff7e 	bl	8005ff8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80020fc:	2104      	movs	r1, #4
 80020fe:	4881      	ldr	r0, [pc, #516]	; (8002304 <menu+0xe44>)
 8002100:	f007 fd1e 	bl	8009b40 <HAL_GPIO_ReadPin>
 8002104:	4603      	mov	r3, r0
 8002106:	2b01      	cmp	r3, #1
 8002108:	d115      	bne.n	8002136 <menu+0xc76>
 800210a:	4b7f      	ldr	r3, [pc, #508]	; (8002308 <menu+0xe48>)
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	f083 0301 	eor.w	r3, r3, #1
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2b00      	cmp	r3, #0
 8002116:	d00e      	beq.n	8002136 <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 8002118:	4b7c      	ldr	r3, [pc, #496]	; (800230c <menu+0xe4c>)
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	3b01      	subs	r3, #1
 800211e:	b2da      	uxtb	r2, r3
 8002120:	4b7a      	ldr	r3, [pc, #488]	; (800230c <menu+0xe4c>)
 8002122:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 8002124:	4b79      	ldr	r3, [pc, #484]	; (800230c <menu+0xe4c>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d002      	beq.n	8002132 <menu+0xc72>
		   		yavaslamaLimit = 1;
 800212c:	4b77      	ldr	r3, [pc, #476]	; (800230c <menu+0xe4c>)
 800212e:	2201      	movs	r2, #1
 8002130:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002132:	f003 ff61 	bl	8005ff8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002136:	2108      	movs	r1, #8
 8002138:	4872      	ldr	r0, [pc, #456]	; (8002304 <menu+0xe44>)
 800213a:	f007 fd01 	bl	8009b40 <HAL_GPIO_ReadPin>
 800213e:	4603      	mov	r3, r0
 8002140:	2b01      	cmp	r3, #1
 8002142:	d10d      	bne.n	8002160 <menu+0xca0>
 8002144:	4b70      	ldr	r3, [pc, #448]	; (8002308 <menu+0xe48>)
 8002146:	781b      	ldrb	r3, [r3, #0]
 8002148:	f083 0301 	eor.w	r3, r3, #1
 800214c:	b2db      	uxtb	r3, r3
 800214e:	2b00      	cmp	r3, #0
 8002150:	d006      	beq.n	8002160 <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 8002152:	4b6e      	ldr	r3, [pc, #440]	; (800230c <menu+0xe4c>)
 8002154:	781a      	ldrb	r2, [r3, #0]
 8002156:	4b6e      	ldr	r3, [pc, #440]	; (8002310 <menu+0xe50>)
 8002158:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 800215a:	4b6e      	ldr	r3, [pc, #440]	; (8002314 <menu+0xe54>)
 800215c:	2201      	movs	r2, #1
 800215e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8002160:	4b6d      	ldr	r3, [pc, #436]	; (8002318 <menu+0xe58>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	2b05      	cmp	r3, #5
 8002166:	f040 80b9 	bne.w	80022dc <menu+0xe1c>
		if(dilSecim == 0) {
 800216a:	4b64      	ldr	r3, [pc, #400]	; (80022fc <menu+0xe3c>)
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d105      	bne.n	800217e <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 8002172:	4a6a      	ldr	r2, [pc, #424]	; (800231c <menu+0xe5c>)
 8002174:	2101      	movs	r1, #1
 8002176:	2001      	movs	r0, #1
 8002178:	f7fe fa76 	bl	8000668 <lcd_print>
 800217c:	e008      	b.n	8002190 <menu+0xcd0>
		} else if(dilSecim == 1) {
 800217e:	4b5f      	ldr	r3, [pc, #380]	; (80022fc <menu+0xe3c>)
 8002180:	781b      	ldrb	r3, [r3, #0]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d104      	bne.n	8002190 <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 8002186:	4a66      	ldr	r2, [pc, #408]	; (8002320 <menu+0xe60>)
 8002188:	2101      	movs	r1, #1
 800218a:	2001      	movs	r0, #1
 800218c:	f7fe fa6c 	bl	8000668 <lcd_print>
		}

		if(altLimit == 0) {
 8002190:	4b64      	ldr	r3, [pc, #400]	; (8002324 <menu+0xe64>)
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d113      	bne.n	80021c0 <menu+0xd00>
			if(dilSecim == 0) {
 8002198:	4b58      	ldr	r3, [pc, #352]	; (80022fc <menu+0xe3c>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d105      	bne.n	80021ac <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 80021a0:	4a61      	ldr	r2, [pc, #388]	; (8002328 <menu+0xe68>)
 80021a2:	2101      	movs	r1, #1
 80021a4:	2002      	movs	r0, #2
 80021a6:	f7fe fa5f 	bl	8000668 <lcd_print>
 80021aa:	e020      	b.n	80021ee <menu+0xd2e>
			} else if(dilSecim == 1) {
 80021ac:	4b53      	ldr	r3, [pc, #332]	; (80022fc <menu+0xe3c>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d11c      	bne.n	80021ee <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 80021b4:	4a5d      	ldr	r2, [pc, #372]	; (800232c <menu+0xe6c>)
 80021b6:	2101      	movs	r1, #1
 80021b8:	2002      	movs	r0, #2
 80021ba:	f7fe fa55 	bl	8000668 <lcd_print>
 80021be:	e016      	b.n	80021ee <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 80021c0:	4b58      	ldr	r3, [pc, #352]	; (8002324 <menu+0xe64>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d112      	bne.n	80021ee <menu+0xd2e>
			if(dilSecim == 0){
 80021c8:	4b4c      	ldr	r3, [pc, #304]	; (80022fc <menu+0xe3c>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d105      	bne.n	80021dc <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 80021d0:	4a57      	ldr	r2, [pc, #348]	; (8002330 <menu+0xe70>)
 80021d2:	2101      	movs	r1, #1
 80021d4:	2002      	movs	r0, #2
 80021d6:	f7fe fa47 	bl	8000668 <lcd_print>
 80021da:	e008      	b.n	80021ee <menu+0xd2e>
			} else if(dilSecim == 1){
 80021dc:	4b47      	ldr	r3, [pc, #284]	; (80022fc <menu+0xe3c>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d104      	bne.n	80021ee <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 80021e4:	4a46      	ldr	r2, [pc, #280]	; (8002300 <menu+0xe40>)
 80021e6:	2101      	movs	r1, #1
 80021e8:	2002      	movs	r0, #2
 80021ea:	f7fe fa3d 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 80021ee:	2102      	movs	r1, #2
 80021f0:	4844      	ldr	r0, [pc, #272]	; (8002304 <menu+0xe44>)
 80021f2:	f007 fca5 	bl	8009b40 <HAL_GPIO_ReadPin>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d119      	bne.n	8002230 <menu+0xd70>
 80021fc:	4b42      	ldr	r3, [pc, #264]	; (8002308 <menu+0xe48>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	f083 0301 	eor.w	r3, r3, #1
 8002204:	b2db      	uxtb	r3, r3
 8002206:	2b00      	cmp	r3, #0
 8002208:	d012      	beq.n	8002230 <menu+0xd70>
 800220a:	4b4a      	ldr	r3, [pc, #296]	; (8002334 <menu+0xe74>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d10e      	bne.n	8002230 <menu+0xd70>
			altLimit = altLimit + 1;
 8002212:	4b44      	ldr	r3, [pc, #272]	; (8002324 <menu+0xe64>)
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	3301      	adds	r3, #1
 8002218:	b2da      	uxtb	r2, r3
 800221a:	4b42      	ldr	r3, [pc, #264]	; (8002324 <menu+0xe64>)
 800221c:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 800221e:	4b41      	ldr	r3, [pc, #260]	; (8002324 <menu+0xe64>)
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	2b01      	cmp	r3, #1
 8002224:	d902      	bls.n	800222c <menu+0xd6c>
				altLimit = 0;
 8002226:	4b3f      	ldr	r3, [pc, #252]	; (8002324 <menu+0xe64>)
 8002228:	2200      	movs	r2, #0
 800222a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800222c:	f003 fee4 	bl	8005ff8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8002230:	2104      	movs	r1, #4
 8002232:	4834      	ldr	r0, [pc, #208]	; (8002304 <menu+0xe44>)
 8002234:	f007 fc84 	bl	8009b40 <HAL_GPIO_ReadPin>
 8002238:	4603      	mov	r3, r0
 800223a:	2b01      	cmp	r3, #1
 800223c:	d119      	bne.n	8002272 <menu+0xdb2>
 800223e:	4b32      	ldr	r3, [pc, #200]	; (8002308 <menu+0xe48>)
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	f083 0301 	eor.w	r3, r3, #1
 8002246:	b2db      	uxtb	r3, r3
 8002248:	2b00      	cmp	r3, #0
 800224a:	d012      	beq.n	8002272 <menu+0xdb2>
 800224c:	4b39      	ldr	r3, [pc, #228]	; (8002334 <menu+0xe74>)
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d10e      	bne.n	8002272 <menu+0xdb2>
			altLimit = altLimit - 1;
 8002254:	4b33      	ldr	r3, [pc, #204]	; (8002324 <menu+0xe64>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	3b01      	subs	r3, #1
 800225a:	b2da      	uxtb	r2, r3
 800225c:	4b31      	ldr	r3, [pc, #196]	; (8002324 <menu+0xe64>)
 800225e:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8002260:	4b30      	ldr	r3, [pc, #192]	; (8002324 <menu+0xe64>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d002      	beq.n	800226e <menu+0xdae>
		   		altLimit = 1;
 8002268:	4b2e      	ldr	r3, [pc, #184]	; (8002324 <menu+0xe64>)
 800226a:	2201      	movs	r2, #1
 800226c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800226e:	f003 fec3 	bl	8005ff8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002272:	2108      	movs	r1, #8
 8002274:	4823      	ldr	r0, [pc, #140]	; (8002304 <menu+0xe44>)
 8002276:	f007 fc63 	bl	8009b40 <HAL_GPIO_ReadPin>
 800227a:	4603      	mov	r3, r0
 800227c:	2b01      	cmp	r3, #1
 800227e:	d12d      	bne.n	80022dc <menu+0xe1c>
 8002280:	4b21      	ldr	r3, [pc, #132]	; (8002308 <menu+0xe48>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	f083 0301 	eor.w	r3, r3, #1
 8002288:	b2db      	uxtb	r3, r3
 800228a:	2b00      	cmp	r3, #0
 800228c:	d026      	beq.n	80022dc <menu+0xe1c>
			eepromData[5] = altLimit;
 800228e:	4b25      	ldr	r3, [pc, #148]	; (8002324 <menu+0xe64>)
 8002290:	781a      	ldrb	r2, [r3, #0]
 8002292:	4b1f      	ldr	r3, [pc, #124]	; (8002310 <menu+0xe50>)
 8002294:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8002296:	4b23      	ldr	r3, [pc, #140]	; (8002324 <menu+0xe64>)
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d110      	bne.n	80022c0 <menu+0xe00>
 800229e:	4b26      	ldr	r3, [pc, #152]	; (8002338 <menu+0xe78>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d003      	beq.n	80022ae <menu+0xdee>
 80022a6:	4b24      	ldr	r3, [pc, #144]	; (8002338 <menu+0xe78>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b02      	cmp	r3, #2
 80022ac:	d108      	bne.n	80022c0 <menu+0xe00>
				kapiTablaAcKonum = 3;
 80022ae:	4b22      	ldr	r3, [pc, #136]	; (8002338 <menu+0xe78>)
 80022b0:	2203      	movs	r2, #3
 80022b2:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 80022b4:	4b20      	ldr	r3, [pc, #128]	; (8002338 <menu+0xe78>)
 80022b6:	781a      	ldrb	r2, [r3, #0]
 80022b8:	4b15      	ldr	r3, [pc, #84]	; (8002310 <menu+0xe50>)
 80022ba:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80022be:	e00a      	b.n	80022d6 <menu+0xe16>
			} else if(altLimit == 0) {
 80022c0:	4b18      	ldr	r3, [pc, #96]	; (8002324 <menu+0xe64>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d106      	bne.n	80022d6 <menu+0xe16>
				platformSilindirTipi = 0;
 80022c8:	4b1c      	ldr	r3, [pc, #112]	; (800233c <menu+0xe7c>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 80022ce:	4b1b      	ldr	r3, [pc, #108]	; (800233c <menu+0xe7c>)
 80022d0:	781a      	ldrb	r2, [r3, #0]
 80022d2:	4b0f      	ldr	r3, [pc, #60]	; (8002310 <menu+0xe50>)
 80022d4:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 80022d6:	4b0f      	ldr	r3, [pc, #60]	; (8002314 <menu+0xe54>)
 80022d8:	2201      	movs	r2, #1
 80022da:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 80022dc:	4b0e      	ldr	r3, [pc, #56]	; (8002318 <menu+0xe58>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	2b06      	cmp	r3, #6
 80022e2:	f040 80b6 	bne.w	8002452 <menu+0xf92>
		if(dilSecim == 0) {
 80022e6:	4b05      	ldr	r3, [pc, #20]	; (80022fc <menu+0xe3c>)
 80022e8:	781b      	ldrb	r3, [r3, #0]
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d12a      	bne.n	8002344 <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 80022ee:	4a14      	ldr	r2, [pc, #80]	; (8002340 <menu+0xe80>)
 80022f0:	2101      	movs	r1, #1
 80022f2:	2001      	movs	r0, #1
 80022f4:	f7fe f9b8 	bl	8000668 <lcd_print>
 80022f8:	e02d      	b.n	8002356 <menu+0xe96>
 80022fa:	bf00      	nop
 80022fc:	20000d56 	.word	0x20000d56
 8002300:	0800db38 	.word	0x0800db38
 8002304:	40010800 	.word	0x40010800
 8002308:	20000d64 	.word	0x20000d64
 800230c:	20000d3a 	.word	0x20000d3a
 8002310:	20000c34 	.word	0x20000c34
 8002314:	20000d61 	.word	0x20000d61
 8002318:	20000d35 	.word	0x20000d35
 800231c:	0800db4c 	.word	0x0800db4c
 8002320:	0800db60 	.word	0x0800db60
 8002324:	20000d3b 	.word	0x20000d3b
 8002328:	0800dac4 	.word	0x0800dac4
 800232c:	0800dad8 	.word	0x0800dad8
 8002330:	0800db24 	.word	0x0800db24
 8002334:	20000d36 	.word	0x20000d36
 8002338:	20000d42 	.word	0x20000d42
 800233c:	20000d48 	.word	0x20000d48
 8002340:	0800db74 	.word	0x0800db74
		} else if(dilSecim == 1){
 8002344:	4b7a      	ldr	r3, [pc, #488]	; (8002530 <menu+0x1070>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d104      	bne.n	8002356 <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 800234c:	4a79      	ldr	r2, [pc, #484]	; (8002534 <menu+0x1074>)
 800234e:	2101      	movs	r1, #1
 8002350:	2001      	movs	r0, #1
 8002352:	f7fe f989 	bl	8000668 <lcd_print>
		}
		if(basincSalteri == 0){
 8002356:	4b78      	ldr	r3, [pc, #480]	; (8002538 <menu+0x1078>)
 8002358:	781b      	ldrb	r3, [r3, #0]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d113      	bne.n	8002386 <menu+0xec6>
			if(dilSecim == 0) {
 800235e:	4b74      	ldr	r3, [pc, #464]	; (8002530 <menu+0x1070>)
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d105      	bne.n	8002372 <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 8002366:	4a75      	ldr	r2, [pc, #468]	; (800253c <menu+0x107c>)
 8002368:	2101      	movs	r1, #1
 800236a:	2002      	movs	r0, #2
 800236c:	f7fe f97c 	bl	8000668 <lcd_print>
 8002370:	e020      	b.n	80023b4 <menu+0xef4>
			} else if(dilSecim == 1){
 8002372:	4b6f      	ldr	r3, [pc, #444]	; (8002530 <menu+0x1070>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d11c      	bne.n	80023b4 <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 800237a:	4a71      	ldr	r2, [pc, #452]	; (8002540 <menu+0x1080>)
 800237c:	2101      	movs	r1, #1
 800237e:	2002      	movs	r0, #2
 8002380:	f7fe f972 	bl	8000668 <lcd_print>
 8002384:	e016      	b.n	80023b4 <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 8002386:	4b6c      	ldr	r3, [pc, #432]	; (8002538 <menu+0x1078>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d112      	bne.n	80023b4 <menu+0xef4>
			if(dilSecim == 0) {
 800238e:	4b68      	ldr	r3, [pc, #416]	; (8002530 <menu+0x1070>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d105      	bne.n	80023a2 <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 8002396:	4a6b      	ldr	r2, [pc, #428]	; (8002544 <menu+0x1084>)
 8002398:	2101      	movs	r1, #1
 800239a:	2002      	movs	r0, #2
 800239c:	f7fe f964 	bl	8000668 <lcd_print>
 80023a0:	e008      	b.n	80023b4 <menu+0xef4>
			} else if(dilSecim == 1) {
 80023a2:	4b63      	ldr	r3, [pc, #396]	; (8002530 <menu+0x1070>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d104      	bne.n	80023b4 <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 80023aa:	4a67      	ldr	r2, [pc, #412]	; (8002548 <menu+0x1088>)
 80023ac:	2101      	movs	r1, #1
 80023ae:	2002      	movs	r0, #2
 80023b0:	f7fe f95a 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80023b4:	2102      	movs	r1, #2
 80023b6:	4865      	ldr	r0, [pc, #404]	; (800254c <menu+0x108c>)
 80023b8:	f007 fbc2 	bl	8009b40 <HAL_GPIO_ReadPin>
 80023bc:	4603      	mov	r3, r0
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d115      	bne.n	80023ee <menu+0xf2e>
 80023c2:	4b63      	ldr	r3, [pc, #396]	; (8002550 <menu+0x1090>)
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	f083 0301 	eor.w	r3, r3, #1
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d00e      	beq.n	80023ee <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 80023d0:	4b59      	ldr	r3, [pc, #356]	; (8002538 <menu+0x1078>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	3301      	adds	r3, #1
 80023d6:	b2da      	uxtb	r2, r3
 80023d8:	4b57      	ldr	r3, [pc, #348]	; (8002538 <menu+0x1078>)
 80023da:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 80023dc:	4b56      	ldr	r3, [pc, #344]	; (8002538 <menu+0x1078>)
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d902      	bls.n	80023ea <menu+0xf2a>
				basincSalteri = 0;
 80023e4:	4b54      	ldr	r3, [pc, #336]	; (8002538 <menu+0x1078>)
 80023e6:	2200      	movs	r2, #0
 80023e8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80023ea:	f003 fe05 	bl	8005ff8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80023ee:	2104      	movs	r1, #4
 80023f0:	4856      	ldr	r0, [pc, #344]	; (800254c <menu+0x108c>)
 80023f2:	f007 fba5 	bl	8009b40 <HAL_GPIO_ReadPin>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d115      	bne.n	8002428 <menu+0xf68>
 80023fc:	4b54      	ldr	r3, [pc, #336]	; (8002550 <menu+0x1090>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	f083 0301 	eor.w	r3, r3, #1
 8002404:	b2db      	uxtb	r3, r3
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00e      	beq.n	8002428 <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 800240a:	4b4b      	ldr	r3, [pc, #300]	; (8002538 <menu+0x1078>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	3b01      	subs	r3, #1
 8002410:	b2da      	uxtb	r2, r3
 8002412:	4b49      	ldr	r3, [pc, #292]	; (8002538 <menu+0x1078>)
 8002414:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 8002416:	4b48      	ldr	r3, [pc, #288]	; (8002538 <menu+0x1078>)
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d002      	beq.n	8002424 <menu+0xf64>
		   		basincSalteri = 1;
 800241e:	4b46      	ldr	r3, [pc, #280]	; (8002538 <menu+0x1078>)
 8002420:	2201      	movs	r2, #1
 8002422:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002424:	f003 fde8 	bl	8005ff8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002428:	2108      	movs	r1, #8
 800242a:	4848      	ldr	r0, [pc, #288]	; (800254c <menu+0x108c>)
 800242c:	f007 fb88 	bl	8009b40 <HAL_GPIO_ReadPin>
 8002430:	4603      	mov	r3, r0
 8002432:	2b01      	cmp	r3, #1
 8002434:	d10d      	bne.n	8002452 <menu+0xf92>
 8002436:	4b46      	ldr	r3, [pc, #280]	; (8002550 <menu+0x1090>)
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	f083 0301 	eor.w	r3, r3, #1
 800243e:	b2db      	uxtb	r3, r3
 8002440:	2b00      	cmp	r3, #0
 8002442:	d006      	beq.n	8002452 <menu+0xf92>
			eepromData[6] = basincSalteri;
 8002444:	4b3c      	ldr	r3, [pc, #240]	; (8002538 <menu+0x1078>)
 8002446:	781a      	ldrb	r2, [r3, #0]
 8002448:	4b42      	ldr	r3, [pc, #264]	; (8002554 <menu+0x1094>)
 800244a:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 800244c:	4b42      	ldr	r3, [pc, #264]	; (8002558 <menu+0x1098>)
 800244e:	2201      	movs	r2, #1
 8002450:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 8002452:	4b42      	ldr	r3, [pc, #264]	; (800255c <menu+0x109c>)
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	2b07      	cmp	r3, #7
 8002458:	f040 80f5 	bne.w	8002646 <menu+0x1186>
		if(dilSecim == 0) {
 800245c:	4b34      	ldr	r3, [pc, #208]	; (8002530 <menu+0x1070>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d105      	bne.n	8002470 <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 8002464:	4a3e      	ldr	r2, [pc, #248]	; (8002560 <menu+0x10a0>)
 8002466:	2101      	movs	r1, #1
 8002468:	2001      	movs	r0, #1
 800246a:	f7fe f8fd 	bl	8000668 <lcd_print>
 800246e:	e008      	b.n	8002482 <menu+0xfc2>
		} else if(dilSecim == 1){
 8002470:	4b2f      	ldr	r3, [pc, #188]	; (8002530 <menu+0x1070>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d104      	bne.n	8002482 <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 8002478:	4a3a      	ldr	r2, [pc, #232]	; (8002564 <menu+0x10a4>)
 800247a:	2101      	movs	r1, #1
 800247c:	2001      	movs	r0, #1
 800247e:	f7fe f8f3 	bl	8000668 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 8002482:	4b39      	ldr	r3, [pc, #228]	; (8002568 <menu+0x10a8>)
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d113      	bne.n	80024b2 <menu+0xff2>
			if(dilSecim == 0) {
 800248a:	4b29      	ldr	r3, [pc, #164]	; (8002530 <menu+0x1070>)
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d105      	bne.n	800249e <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 8002492:	4a2a      	ldr	r2, [pc, #168]	; (800253c <menu+0x107c>)
 8002494:	2101      	movs	r1, #1
 8002496:	2002      	movs	r0, #2
 8002498:	f7fe f8e6 	bl	8000668 <lcd_print>
 800249c:	e079      	b.n	8002592 <menu+0x10d2>
			} else if(dilSecim == 1){
 800249e:	4b24      	ldr	r3, [pc, #144]	; (8002530 <menu+0x1070>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d175      	bne.n	8002592 <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 80024a6:	4a26      	ldr	r2, [pc, #152]	; (8002540 <menu+0x1080>)
 80024a8:	2101      	movs	r1, #1
 80024aa:	2002      	movs	r0, #2
 80024ac:	f7fe f8dc 	bl	8000668 <lcd_print>
 80024b0:	e06f      	b.n	8002592 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 80024b2:	4b2d      	ldr	r3, [pc, #180]	; (8002568 <menu+0x10a8>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	2b01      	cmp	r3, #1
 80024b8:	d113      	bne.n	80024e2 <menu+0x1022>
			if(dilSecim == 0) {
 80024ba:	4b1d      	ldr	r3, [pc, #116]	; (8002530 <menu+0x1070>)
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d105      	bne.n	80024ce <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 80024c2:	4a2a      	ldr	r2, [pc, #168]	; (800256c <menu+0x10ac>)
 80024c4:	2101      	movs	r1, #1
 80024c6:	2002      	movs	r0, #2
 80024c8:	f7fe f8ce 	bl	8000668 <lcd_print>
 80024cc:	e061      	b.n	8002592 <menu+0x10d2>
			} else if(dilSecim == 1) {
 80024ce:	4b18      	ldr	r3, [pc, #96]	; (8002530 <menu+0x1070>)
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	2b01      	cmp	r3, #1
 80024d4:	d15d      	bne.n	8002592 <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 80024d6:	4a26      	ldr	r2, [pc, #152]	; (8002570 <menu+0x10b0>)
 80024d8:	2101      	movs	r1, #1
 80024da:	2002      	movs	r0, #2
 80024dc:	f7fe f8c4 	bl	8000668 <lcd_print>
 80024e0:	e057      	b.n	8002592 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 80024e2:	4b21      	ldr	r3, [pc, #132]	; (8002568 <menu+0x10a8>)
 80024e4:	781b      	ldrb	r3, [r3, #0]
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d113      	bne.n	8002512 <menu+0x1052>
			if(dilSecim == 0) {
 80024ea:	4b11      	ldr	r3, [pc, #68]	; (8002530 <menu+0x1070>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d105      	bne.n	80024fe <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 80024f2:	4a20      	ldr	r2, [pc, #128]	; (8002574 <menu+0x10b4>)
 80024f4:	2101      	movs	r1, #1
 80024f6:	2002      	movs	r0, #2
 80024f8:	f7fe f8b6 	bl	8000668 <lcd_print>
 80024fc:	e049      	b.n	8002592 <menu+0x10d2>
			} else if(dilSecim == 1) {
 80024fe:	4b0c      	ldr	r3, [pc, #48]	; (8002530 <menu+0x1070>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	2b01      	cmp	r3, #1
 8002504:	d145      	bne.n	8002592 <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 8002506:	4a1c      	ldr	r2, [pc, #112]	; (8002578 <menu+0x10b8>)
 8002508:	2101      	movs	r1, #1
 800250a:	2002      	movs	r0, #2
 800250c:	f7fe f8ac 	bl	8000668 <lcd_print>
 8002510:	e03f      	b.n	8002592 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 8002512:	4b15      	ldr	r3, [pc, #84]	; (8002568 <menu+0x10a8>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	2b03      	cmp	r3, #3
 8002518:	d13b      	bne.n	8002592 <menu+0x10d2>
			if(dilSecim == 0) {
 800251a:	4b05      	ldr	r3, [pc, #20]	; (8002530 <menu+0x1070>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d12e      	bne.n	8002580 <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 8002522:	4a16      	ldr	r2, [pc, #88]	; (800257c <menu+0x10bc>)
 8002524:	2101      	movs	r1, #1
 8002526:	2002      	movs	r0, #2
 8002528:	f7fe f89e 	bl	8000668 <lcd_print>
 800252c:	e031      	b.n	8002592 <menu+0x10d2>
 800252e:	bf00      	nop
 8002530:	20000d56 	.word	0x20000d56
 8002534:	0800db84 	.word	0x0800db84
 8002538:	20000d3c 	.word	0x20000d3c
 800253c:	0800dac4 	.word	0x0800dac4
 8002540:	0800dad8 	.word	0x0800dad8
 8002544:	0800db24 	.word	0x0800db24
 8002548:	0800db38 	.word	0x0800db38
 800254c:	40010800 	.word	0x40010800
 8002550:	20000d64 	.word	0x20000d64
 8002554:	20000c34 	.word	0x20000c34
 8002558:	20000d61 	.word	0x20000d61
 800255c:	20000d35 	.word	0x20000d35
 8002560:	0800db94 	.word	0x0800db94
 8002564:	0800dba8 	.word	0x0800dba8
 8002568:	20000d3d 	.word	0x20000d3d
 800256c:	0800dbbc 	.word	0x0800dbbc
 8002570:	0800dbd0 	.word	0x0800dbd0
 8002574:	0800dbe4 	.word	0x0800dbe4
 8002578:	0800dbf8 	.word	0x0800dbf8
 800257c:	0800dc0c 	.word	0x0800dc0c
			} else if(dilSecim == 1){
 8002580:	4b99      	ldr	r3, [pc, #612]	; (80027e8 <menu+0x1328>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	2b01      	cmp	r3, #1
 8002586:	d104      	bne.n	8002592 <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 8002588:	4a98      	ldr	r2, [pc, #608]	; (80027ec <menu+0x132c>)
 800258a:	2101      	movs	r1, #1
 800258c:	2002      	movs	r0, #2
 800258e:	f7fe f86b 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002592:	2102      	movs	r1, #2
 8002594:	4896      	ldr	r0, [pc, #600]	; (80027f0 <menu+0x1330>)
 8002596:	f007 fad3 	bl	8009b40 <HAL_GPIO_ReadPin>
 800259a:	4603      	mov	r3, r0
 800259c:	2b01      	cmp	r3, #1
 800259e:	d115      	bne.n	80025cc <menu+0x110c>
 80025a0:	4b94      	ldr	r3, [pc, #592]	; (80027f4 <menu+0x1334>)
 80025a2:	781b      	ldrb	r3, [r3, #0]
 80025a4:	f083 0301 	eor.w	r3, r3, #1
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d00e      	beq.n	80025cc <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 80025ae:	4b92      	ldr	r3, [pc, #584]	; (80027f8 <menu+0x1338>)
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	3301      	adds	r3, #1
 80025b4:	b2da      	uxtb	r2, r3
 80025b6:	4b90      	ldr	r3, [pc, #576]	; (80027f8 <menu+0x1338>)
 80025b8:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 80025ba:	4b8f      	ldr	r3, [pc, #572]	; (80027f8 <menu+0x1338>)
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	2b03      	cmp	r3, #3
 80025c0:	d902      	bls.n	80025c8 <menu+0x1108>
				kapiSecimleri = 0;
 80025c2:	4b8d      	ldr	r3, [pc, #564]	; (80027f8 <menu+0x1338>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80025c8:	f003 fd16 	bl	8005ff8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80025cc:	2104      	movs	r1, #4
 80025ce:	4888      	ldr	r0, [pc, #544]	; (80027f0 <menu+0x1330>)
 80025d0:	f007 fab6 	bl	8009b40 <HAL_GPIO_ReadPin>
 80025d4:	4603      	mov	r3, r0
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d115      	bne.n	8002606 <menu+0x1146>
 80025da:	4b86      	ldr	r3, [pc, #536]	; (80027f4 <menu+0x1334>)
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	f083 0301 	eor.w	r3, r3, #1
 80025e2:	b2db      	uxtb	r3, r3
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d00e      	beq.n	8002606 <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 80025e8:	4b83      	ldr	r3, [pc, #524]	; (80027f8 <menu+0x1338>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	3b01      	subs	r3, #1
 80025ee:	b2da      	uxtb	r2, r3
 80025f0:	4b81      	ldr	r3, [pc, #516]	; (80027f8 <menu+0x1338>)
 80025f2:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 80025f4:	4b80      	ldr	r3, [pc, #512]	; (80027f8 <menu+0x1338>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	2b04      	cmp	r3, #4
 80025fa:	d902      	bls.n	8002602 <menu+0x1142>
		   		kapiSecimleri = 3;
 80025fc:	4b7e      	ldr	r3, [pc, #504]	; (80027f8 <menu+0x1338>)
 80025fe:	2203      	movs	r2, #3
 8002600:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002602:	f003 fcf9 	bl	8005ff8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002606:	2108      	movs	r1, #8
 8002608:	4879      	ldr	r0, [pc, #484]	; (80027f0 <menu+0x1330>)
 800260a:	f007 fa99 	bl	8009b40 <HAL_GPIO_ReadPin>
 800260e:	4603      	mov	r3, r0
 8002610:	2b01      	cmp	r3, #1
 8002612:	d118      	bne.n	8002646 <menu+0x1186>
 8002614:	4b77      	ldr	r3, [pc, #476]	; (80027f4 <menu+0x1334>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	f083 0301 	eor.w	r3, r3, #1
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b00      	cmp	r3, #0
 8002620:	d011      	beq.n	8002646 <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 8002622:	4b75      	ldr	r3, [pc, #468]	; (80027f8 <menu+0x1338>)
 8002624:	781a      	ldrb	r2, [r3, #0]
 8002626:	4b75      	ldr	r3, [pc, #468]	; (80027fc <menu+0x133c>)
 8002628:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 800262a:	4b73      	ldr	r3, [pc, #460]	; (80027f8 <menu+0x1338>)
 800262c:	781b      	ldrb	r3, [r3, #0]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d006      	beq.n	8002640 <menu+0x1180>
				altLimit = 1;
 8002632:	4b73      	ldr	r3, [pc, #460]	; (8002800 <menu+0x1340>)
 8002634:	2201      	movs	r2, #1
 8002636:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002638:	4b71      	ldr	r3, [pc, #452]	; (8002800 <menu+0x1340>)
 800263a:	781a      	ldrb	r2, [r3, #0]
 800263c:	4b6f      	ldr	r3, [pc, #444]	; (80027fc <menu+0x133c>)
 800263e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002640:	4b70      	ldr	r3, [pc, #448]	; (8002804 <menu+0x1344>)
 8002642:	2201      	movs	r2, #1
 8002644:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 8002646:	4b70      	ldr	r3, [pc, #448]	; (8002808 <menu+0x1348>)
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	2b08      	cmp	r3, #8
 800264c:	f040 8092 	bne.w	8002774 <menu+0x12b4>
		if(dilSecim == 0) {
 8002650:	4b65      	ldr	r3, [pc, #404]	; (80027e8 <menu+0x1328>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d105      	bne.n	8002664 <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 8002658:	4a6c      	ldr	r2, [pc, #432]	; (800280c <menu+0x134c>)
 800265a:	2101      	movs	r1, #1
 800265c:	2001      	movs	r0, #1
 800265e:	f7fe f803 	bl	8000668 <lcd_print>
 8002662:	e008      	b.n	8002676 <menu+0x11b6>
		} else if(dilSecim == 1) {
 8002664:	4b60      	ldr	r3, [pc, #384]	; (80027e8 <menu+0x1328>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d104      	bne.n	8002676 <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 800266c:	4a68      	ldr	r2, [pc, #416]	; (8002810 <menu+0x1350>)
 800266e:	2101      	movs	r1, #1
 8002670:	2001      	movs	r0, #1
 8002672:	f7fd fff9 	bl	8000668 <lcd_print>
		}

		if(kapiAcTipi == 0){
 8002676:	4b67      	ldr	r3, [pc, #412]	; (8002814 <menu+0x1354>)
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d113      	bne.n	80026a6 <menu+0x11e6>
			if(dilSecim == 0) {
 800267e:	4b5a      	ldr	r3, [pc, #360]	; (80027e8 <menu+0x1328>)
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d105      	bne.n	8002692 <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 8002686:	4a64      	ldr	r2, [pc, #400]	; (8002818 <menu+0x1358>)
 8002688:	2101      	movs	r1, #1
 800268a:	2002      	movs	r0, #2
 800268c:	f7fd ffec 	bl	8000668 <lcd_print>
 8002690:	e020      	b.n	80026d4 <menu+0x1214>
			} else if(dilSecim == 1) {
 8002692:	4b55      	ldr	r3, [pc, #340]	; (80027e8 <menu+0x1328>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d11c      	bne.n	80026d4 <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 800269a:	4a60      	ldr	r2, [pc, #384]	; (800281c <menu+0x135c>)
 800269c:	2101      	movs	r1, #1
 800269e:	2002      	movs	r0, #2
 80026a0:	f7fd ffe2 	bl	8000668 <lcd_print>
 80026a4:	e016      	b.n	80026d4 <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 80026a6:	4b5b      	ldr	r3, [pc, #364]	; (8002814 <menu+0x1354>)
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d112      	bne.n	80026d4 <menu+0x1214>
			if(dilSecim == 0){
 80026ae:	4b4e      	ldr	r3, [pc, #312]	; (80027e8 <menu+0x1328>)
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d105      	bne.n	80026c2 <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 80026b6:	4a5a      	ldr	r2, [pc, #360]	; (8002820 <menu+0x1360>)
 80026b8:	2101      	movs	r1, #1
 80026ba:	2002      	movs	r0, #2
 80026bc:	f7fd ffd4 	bl	8000668 <lcd_print>
 80026c0:	e008      	b.n	80026d4 <menu+0x1214>
			} else if(dilSecim == 1){
 80026c2:	4b49      	ldr	r3, [pc, #292]	; (80027e8 <menu+0x1328>)
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d104      	bne.n	80026d4 <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 80026ca:	4a56      	ldr	r2, [pc, #344]	; (8002824 <menu+0x1364>)
 80026cc:	2101      	movs	r1, #1
 80026ce:	2002      	movs	r0, #2
 80026d0:	f7fd ffca 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80026d4:	2102      	movs	r1, #2
 80026d6:	4846      	ldr	r0, [pc, #280]	; (80027f0 <menu+0x1330>)
 80026d8:	f007 fa32 	bl	8009b40 <HAL_GPIO_ReadPin>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d115      	bne.n	800270e <menu+0x124e>
 80026e2:	4b44      	ldr	r3, [pc, #272]	; (80027f4 <menu+0x1334>)
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	f083 0301 	eor.w	r3, r3, #1
 80026ea:	b2db      	uxtb	r3, r3
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d00e      	beq.n	800270e <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 80026f0:	4b48      	ldr	r3, [pc, #288]	; (8002814 <menu+0x1354>)
 80026f2:	781b      	ldrb	r3, [r3, #0]
 80026f4:	3301      	adds	r3, #1
 80026f6:	b2da      	uxtb	r2, r3
 80026f8:	4b46      	ldr	r3, [pc, #280]	; (8002814 <menu+0x1354>)
 80026fa:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 80026fc:	4b45      	ldr	r3, [pc, #276]	; (8002814 <menu+0x1354>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	2b01      	cmp	r3, #1
 8002702:	d902      	bls.n	800270a <menu+0x124a>
				kapiAcTipi = 0;
 8002704:	4b43      	ldr	r3, [pc, #268]	; (8002814 <menu+0x1354>)
 8002706:	2200      	movs	r2, #0
 8002708:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800270a:	f003 fc75 	bl	8005ff8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800270e:	2104      	movs	r1, #4
 8002710:	4837      	ldr	r0, [pc, #220]	; (80027f0 <menu+0x1330>)
 8002712:	f007 fa15 	bl	8009b40 <HAL_GPIO_ReadPin>
 8002716:	4603      	mov	r3, r0
 8002718:	2b01      	cmp	r3, #1
 800271a:	d115      	bne.n	8002748 <menu+0x1288>
 800271c:	4b35      	ldr	r3, [pc, #212]	; (80027f4 <menu+0x1334>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	f083 0301 	eor.w	r3, r3, #1
 8002724:	b2db      	uxtb	r3, r3
 8002726:	2b00      	cmp	r3, #0
 8002728:	d00e      	beq.n	8002748 <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 800272a:	4b3a      	ldr	r3, [pc, #232]	; (8002814 <menu+0x1354>)
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	3b01      	subs	r3, #1
 8002730:	b2da      	uxtb	r2, r3
 8002732:	4b38      	ldr	r3, [pc, #224]	; (8002814 <menu+0x1354>)
 8002734:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8002736:	4b37      	ldr	r3, [pc, #220]	; (8002814 <menu+0x1354>)
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d002      	beq.n	8002744 <menu+0x1284>
		   		kapiAcTipi = 1;
 800273e:	4b35      	ldr	r3, [pc, #212]	; (8002814 <menu+0x1354>)
 8002740:	2201      	movs	r2, #1
 8002742:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002744:	f003 fc58 	bl	8005ff8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002748:	2108      	movs	r1, #8
 800274a:	4829      	ldr	r0, [pc, #164]	; (80027f0 <menu+0x1330>)
 800274c:	f007 f9f8 	bl	8009b40 <HAL_GPIO_ReadPin>
 8002750:	4603      	mov	r3, r0
 8002752:	2b01      	cmp	r3, #1
 8002754:	d10e      	bne.n	8002774 <menu+0x12b4>
 8002756:	4b27      	ldr	r3, [pc, #156]	; (80027f4 <menu+0x1334>)
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	f083 0301 	eor.w	r3, r3, #1
 800275e:	b2db      	uxtb	r3, r3
 8002760:	2b00      	cmp	r3, #0
 8002762:	d007      	beq.n	8002774 <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 8002764:	4b2b      	ldr	r3, [pc, #172]	; (8002814 <menu+0x1354>)
 8002766:	781a      	ldrb	r2, [r3, #0]
 8002768:	4b24      	ldr	r3, [pc, #144]	; (80027fc <menu+0x133c>)
 800276a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 800276e:	4b25      	ldr	r3, [pc, #148]	; (8002804 <menu+0x1344>)
 8002770:	2201      	movs	r2, #1
 8002772:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 8002774:	4b24      	ldr	r3, [pc, #144]	; (8002808 <menu+0x1348>)
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	2b09      	cmp	r3, #9
 800277a:	f040 80b9 	bne.w	80028f0 <menu+0x1430>
		if(dilSecim == 0){
 800277e:	4b1a      	ldr	r3, [pc, #104]	; (80027e8 <menu+0x1328>)
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d105      	bne.n	8002792 <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 8002786:	4a28      	ldr	r2, [pc, #160]	; (8002828 <menu+0x1368>)
 8002788:	2101      	movs	r1, #1
 800278a:	2001      	movs	r0, #1
 800278c:	f7fd ff6c 	bl	8000668 <lcd_print>
 8002790:	e008      	b.n	80027a4 <menu+0x12e4>
		} else if(dilSecim == 1) {
 8002792:	4b15      	ldr	r3, [pc, #84]	; (80027e8 <menu+0x1328>)
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	2b01      	cmp	r3, #1
 8002798:	d104      	bne.n	80027a4 <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 800279a:	4a24      	ldr	r2, [pc, #144]	; (800282c <menu+0x136c>)
 800279c:	2101      	movs	r1, #1
 800279e:	2001      	movs	r0, #1
 80027a0:	f7fd ff62 	bl	8000668 <lcd_print>
		}

		if(kapi1Tip == 0) {
 80027a4:	4b22      	ldr	r3, [pc, #136]	; (8002830 <menu+0x1370>)
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d105      	bne.n	80027b8 <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 80027ac:	4a21      	ldr	r2, [pc, #132]	; (8002834 <menu+0x1374>)
 80027ae:	2101      	movs	r1, #1
 80027b0:	2002      	movs	r0, #2
 80027b2:	f7fd ff59 	bl	8000668 <lcd_print>
 80027b6:	e04c      	b.n	8002852 <menu+0x1392>
		} else if(kapi1Tip == 1) {
 80027b8:	4b1d      	ldr	r3, [pc, #116]	; (8002830 <menu+0x1370>)
 80027ba:	781b      	ldrb	r3, [r3, #0]
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d13f      	bne.n	8002840 <menu+0x1380>
			if(dilSecim == 0){
 80027c0:	4b09      	ldr	r3, [pc, #36]	; (80027e8 <menu+0x1328>)
 80027c2:	781b      	ldrb	r3, [r3, #0]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d105      	bne.n	80027d4 <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 80027c8:	4a1b      	ldr	r2, [pc, #108]	; (8002838 <menu+0x1378>)
 80027ca:	2101      	movs	r1, #1
 80027cc:	2002      	movs	r0, #2
 80027ce:	f7fd ff4b 	bl	8000668 <lcd_print>
 80027d2:	e03e      	b.n	8002852 <menu+0x1392>
			} else if(dilSecim == 1) {
 80027d4:	4b04      	ldr	r3, [pc, #16]	; (80027e8 <menu+0x1328>)
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d13a      	bne.n	8002852 <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 80027dc:	4a17      	ldr	r2, [pc, #92]	; (800283c <menu+0x137c>)
 80027de:	2101      	movs	r1, #1
 80027e0:	2002      	movs	r0, #2
 80027e2:	f7fd ff41 	bl	8000668 <lcd_print>
 80027e6:	e034      	b.n	8002852 <menu+0x1392>
 80027e8:	20000d56 	.word	0x20000d56
 80027ec:	0800dc20 	.word	0x0800dc20
 80027f0:	40010800 	.word	0x40010800
 80027f4:	20000d64 	.word	0x20000d64
 80027f8:	20000d3d 	.word	0x20000d3d
 80027fc:	20000c34 	.word	0x20000c34
 8002800:	20000d3b 	.word	0x20000d3b
 8002804:	20000d61 	.word	0x20000d61
 8002808:	20000d35 	.word	0x20000d35
 800280c:	0800dc34 	.word	0x0800dc34
 8002810:	0800dc48 	.word	0x0800dc48
 8002814:	20000d41 	.word	0x20000d41
 8002818:	0800dc5c 	.word	0x0800dc5c
 800281c:	0800dc6c 	.word	0x0800dc6c
 8002820:	0800dc7c 	.word	0x0800dc7c
 8002824:	0800dc90 	.word	0x0800dc90
 8002828:	0800dca4 	.word	0x0800dca4
 800282c:	0800dcb8 	.word	0x0800dcb8
 8002830:	20000d3e 	.word	0x20000d3e
 8002834:	0800dccc 	.word	0x0800dccc
 8002838:	0800dce0 	.word	0x0800dce0
 800283c:	0800dcf0 	.word	0x0800dcf0
			}
		} else if(kapi1Tip == 2) {
 8002840:	4b8a      	ldr	r3, [pc, #552]	; (8002a6c <menu+0x15ac>)
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	2b02      	cmp	r3, #2
 8002846:	d104      	bne.n	8002852 <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 8002848:	4a89      	ldr	r2, [pc, #548]	; (8002a70 <menu+0x15b0>)
 800284a:	2101      	movs	r1, #1
 800284c:	2002      	movs	r0, #2
 800284e:	f7fd ff0b 	bl	8000668 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002852:	2102      	movs	r1, #2
 8002854:	4887      	ldr	r0, [pc, #540]	; (8002a74 <menu+0x15b4>)
 8002856:	f007 f973 	bl	8009b40 <HAL_GPIO_ReadPin>
 800285a:	4603      	mov	r3, r0
 800285c:	2b01      	cmp	r3, #1
 800285e:	d115      	bne.n	800288c <menu+0x13cc>
 8002860:	4b85      	ldr	r3, [pc, #532]	; (8002a78 <menu+0x15b8>)
 8002862:	781b      	ldrb	r3, [r3, #0]
 8002864:	f083 0301 	eor.w	r3, r3, #1
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d00e      	beq.n	800288c <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 800286e:	4b7f      	ldr	r3, [pc, #508]	; (8002a6c <menu+0x15ac>)
 8002870:	781b      	ldrb	r3, [r3, #0]
 8002872:	3301      	adds	r3, #1
 8002874:	b2da      	uxtb	r2, r3
 8002876:	4b7d      	ldr	r3, [pc, #500]	; (8002a6c <menu+0x15ac>)
 8002878:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 800287a:	4b7c      	ldr	r3, [pc, #496]	; (8002a6c <menu+0x15ac>)
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	2b02      	cmp	r3, #2
 8002880:	d902      	bls.n	8002888 <menu+0x13c8>
				kapi1Tip = 0;
 8002882:	4b7a      	ldr	r3, [pc, #488]	; (8002a6c <menu+0x15ac>)
 8002884:	2200      	movs	r2, #0
 8002886:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002888:	f003 fbb6 	bl	8005ff8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800288c:	2104      	movs	r1, #4
 800288e:	4879      	ldr	r0, [pc, #484]	; (8002a74 <menu+0x15b4>)
 8002890:	f007 f956 	bl	8009b40 <HAL_GPIO_ReadPin>
 8002894:	4603      	mov	r3, r0
 8002896:	2b01      	cmp	r3, #1
 8002898:	d115      	bne.n	80028c6 <menu+0x1406>
 800289a:	4b77      	ldr	r3, [pc, #476]	; (8002a78 <menu+0x15b8>)
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	f083 0301 	eor.w	r3, r3, #1
 80028a2:	b2db      	uxtb	r3, r3
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d00e      	beq.n	80028c6 <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 80028a8:	4b70      	ldr	r3, [pc, #448]	; (8002a6c <menu+0x15ac>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	3b01      	subs	r3, #1
 80028ae:	b2da      	uxtb	r2, r3
 80028b0:	4b6e      	ldr	r3, [pc, #440]	; (8002a6c <menu+0x15ac>)
 80028b2:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 80028b4:	4b6d      	ldr	r3, [pc, #436]	; (8002a6c <menu+0x15ac>)
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	2b03      	cmp	r3, #3
 80028ba:	d902      	bls.n	80028c2 <menu+0x1402>
		   		kapi1Tip = 2;
 80028bc:	4b6b      	ldr	r3, [pc, #428]	; (8002a6c <menu+0x15ac>)
 80028be:	2202      	movs	r2, #2
 80028c0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80028c2:	f003 fb99 	bl	8005ff8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80028c6:	2108      	movs	r1, #8
 80028c8:	486a      	ldr	r0, [pc, #424]	; (8002a74 <menu+0x15b4>)
 80028ca:	f007 f939 	bl	8009b40 <HAL_GPIO_ReadPin>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d10d      	bne.n	80028f0 <menu+0x1430>
 80028d4:	4b68      	ldr	r3, [pc, #416]	; (8002a78 <menu+0x15b8>)
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	f083 0301 	eor.w	r3, r3, #1
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d006      	beq.n	80028f0 <menu+0x1430>
			eepromData[8] = kapi1Tip;
 80028e2:	4b62      	ldr	r3, [pc, #392]	; (8002a6c <menu+0x15ac>)
 80028e4:	781a      	ldrb	r2, [r3, #0]
 80028e6:	4b65      	ldr	r3, [pc, #404]	; (8002a7c <menu+0x15bc>)
 80028e8:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 80028ea:	4b65      	ldr	r3, [pc, #404]	; (8002a80 <menu+0x15c0>)
 80028ec:	2201      	movs	r2, #1
 80028ee:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 80028f0:	4b64      	ldr	r3, [pc, #400]	; (8002a84 <menu+0x15c4>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	2b0a      	cmp	r3, #10
 80028f6:	d17f      	bne.n	80029f8 <menu+0x1538>
		if(dilSecim == 0) {
 80028f8:	4b63      	ldr	r3, [pc, #396]	; (8002a88 <menu+0x15c8>)
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d10a      	bne.n	8002916 <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 8002900:	4a62      	ldr	r2, [pc, #392]	; (8002a8c <menu+0x15cc>)
 8002902:	2101      	movs	r1, #1
 8002904:	2001      	movs	r0, #1
 8002906:	f7fd feaf 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 800290a:	4a61      	ldr	r2, [pc, #388]	; (8002a90 <menu+0x15d0>)
 800290c:	2101      	movs	r1, #1
 800290e:	2002      	movs	r0, #2
 8002910:	f7fd feaa 	bl	8000668 <lcd_print>
 8002914:	e00d      	b.n	8002932 <menu+0x1472>
		} else if(dilSecim == 1) {
 8002916:	4b5c      	ldr	r3, [pc, #368]	; (8002a88 <menu+0x15c8>)
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	2b01      	cmp	r3, #1
 800291c:	d109      	bne.n	8002932 <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 800291e:	4a5d      	ldr	r2, [pc, #372]	; (8002a94 <menu+0x15d4>)
 8002920:	2101      	movs	r1, #1
 8002922:	2001      	movs	r0, #1
 8002924:	f7fd fea0 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002928:	4a5b      	ldr	r2, [pc, #364]	; (8002a98 <menu+0x15d8>)
 800292a:	2101      	movs	r1, #1
 800292c:	2002      	movs	r0, #2
 800292e:	f7fd fe9b 	bl	8000668 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 8002932:	4b5a      	ldr	r3, [pc, #360]	; (8002a9c <menu+0x15dc>)
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	220a      	movs	r2, #10
 8002938:	4959      	ldr	r1, [pc, #356]	; (8002aa0 <menu+0x15e0>)
 800293a:	4618      	mov	r0, r3
 800293c:	f00a f92c 	bl	800cb98 <itoa>
		lcd_print(2,16,snum);
 8002940:	4a57      	ldr	r2, [pc, #348]	; (8002aa0 <menu+0x15e0>)
 8002942:	2110      	movs	r1, #16
 8002944:	2002      	movs	r0, #2
 8002946:	f7fd fe8f 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 800294a:	2102      	movs	r1, #2
 800294c:	4849      	ldr	r0, [pc, #292]	; (8002a74 <menu+0x15b4>)
 800294e:	f007 f8f7 	bl	8009b40 <HAL_GPIO_ReadPin>
 8002952:	4603      	mov	r3, r0
 8002954:	2b01      	cmp	r3, #1
 8002956:	d119      	bne.n	800298c <menu+0x14cc>
 8002958:	4b47      	ldr	r3, [pc, #284]	; (8002a78 <menu+0x15b8>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	f083 0301 	eor.w	r3, r3, #1
 8002960:	b2db      	uxtb	r3, r3
 8002962:	2b00      	cmp	r3, #0
 8002964:	d012      	beq.n	800298c <menu+0x14cc>
 8002966:	4b41      	ldr	r3, [pc, #260]	; (8002a6c <menu+0x15ac>)
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d10e      	bne.n	800298c <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 800296e:	4b4b      	ldr	r3, [pc, #300]	; (8002a9c <menu+0x15dc>)
 8002970:	781b      	ldrb	r3, [r3, #0]
 8002972:	3301      	adds	r3, #1
 8002974:	b2da      	uxtb	r2, r3
 8002976:	4b49      	ldr	r3, [pc, #292]	; (8002a9c <menu+0x15dc>)
 8002978:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 800297a:	4b48      	ldr	r3, [pc, #288]	; (8002a9c <menu+0x15dc>)
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	2b05      	cmp	r3, #5
 8002980:	d902      	bls.n	8002988 <menu+0x14c8>
				kapi1AcSure = 0;
 8002982:	4b46      	ldr	r3, [pc, #280]	; (8002a9c <menu+0x15dc>)
 8002984:	2200      	movs	r2, #0
 8002986:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002988:	f003 fb36 	bl	8005ff8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 800298c:	2104      	movs	r1, #4
 800298e:	4839      	ldr	r0, [pc, #228]	; (8002a74 <menu+0x15b4>)
 8002990:	f007 f8d6 	bl	8009b40 <HAL_GPIO_ReadPin>
 8002994:	4603      	mov	r3, r0
 8002996:	2b01      	cmp	r3, #1
 8002998:	d119      	bne.n	80029ce <menu+0x150e>
 800299a:	4b37      	ldr	r3, [pc, #220]	; (8002a78 <menu+0x15b8>)
 800299c:	781b      	ldrb	r3, [r3, #0]
 800299e:	f083 0301 	eor.w	r3, r3, #1
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d012      	beq.n	80029ce <menu+0x150e>
 80029a8:	4b30      	ldr	r3, [pc, #192]	; (8002a6c <menu+0x15ac>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d10e      	bne.n	80029ce <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 80029b0:	4b3a      	ldr	r3, [pc, #232]	; (8002a9c <menu+0x15dc>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	3b01      	subs	r3, #1
 80029b6:	b2da      	uxtb	r2, r3
 80029b8:	4b38      	ldr	r3, [pc, #224]	; (8002a9c <menu+0x15dc>)
 80029ba:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 80029bc:	4b37      	ldr	r3, [pc, #220]	; (8002a9c <menu+0x15dc>)
 80029be:	781b      	ldrb	r3, [r3, #0]
 80029c0:	2b06      	cmp	r3, #6
 80029c2:	d902      	bls.n	80029ca <menu+0x150a>
		   		kapi1AcSure = 5;
 80029c4:	4b35      	ldr	r3, [pc, #212]	; (8002a9c <menu+0x15dc>)
 80029c6:	2205      	movs	r2, #5
 80029c8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80029ca:	f003 fb15 	bl	8005ff8 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80029ce:	2108      	movs	r1, #8
 80029d0:	4828      	ldr	r0, [pc, #160]	; (8002a74 <menu+0x15b4>)
 80029d2:	f007 f8b5 	bl	8009b40 <HAL_GPIO_ReadPin>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d10d      	bne.n	80029f8 <menu+0x1538>
 80029dc:	4b26      	ldr	r3, [pc, #152]	; (8002a78 <menu+0x15b8>)
 80029de:	781b      	ldrb	r3, [r3, #0]
 80029e0:	f083 0301 	eor.w	r3, r3, #1
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d006      	beq.n	80029f8 <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 80029ea:	4b2c      	ldr	r3, [pc, #176]	; (8002a9c <menu+0x15dc>)
 80029ec:	781a      	ldrb	r2, [r3, #0]
 80029ee:	4b23      	ldr	r3, [pc, #140]	; (8002a7c <menu+0x15bc>)
 80029f0:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 80029f2:	4b23      	ldr	r3, [pc, #140]	; (8002a80 <menu+0x15c0>)
 80029f4:	2201      	movs	r2, #1
 80029f6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 80029f8:	4b22      	ldr	r3, [pc, #136]	; (8002a84 <menu+0x15c4>)
 80029fa:	781b      	ldrb	r3, [r3, #0]
 80029fc:	2b0b      	cmp	r3, #11
 80029fe:	f040 80b5 	bne.w	8002b6c <menu+0x16ac>
		if(dilSecim == 0) {
 8002a02:	4b21      	ldr	r3, [pc, #132]	; (8002a88 <menu+0x15c8>)
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d105      	bne.n	8002a16 <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 8002a0a:	4a26      	ldr	r2, [pc, #152]	; (8002aa4 <menu+0x15e4>)
 8002a0c:	2101      	movs	r1, #1
 8002a0e:	2001      	movs	r0, #1
 8002a10:	f7fd fe2a 	bl	8000668 <lcd_print>
 8002a14:	e008      	b.n	8002a28 <menu+0x1568>
		} else if(dilSecim == 1) {
 8002a16:	4b1c      	ldr	r3, [pc, #112]	; (8002a88 <menu+0x15c8>)
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d104      	bne.n	8002a28 <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 8002a1e:	4a22      	ldr	r2, [pc, #136]	; (8002aa8 <menu+0x15e8>)
 8002a20:	2101      	movs	r1, #1
 8002a22:	2001      	movs	r0, #1
 8002a24:	f7fd fe20 	bl	8000668 <lcd_print>
		}

		if(kapi2Tip == 0) {
 8002a28:	4b20      	ldr	r3, [pc, #128]	; (8002aac <menu+0x15ec>)
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d105      	bne.n	8002a3c <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 8002a30:	4a1f      	ldr	r2, [pc, #124]	; (8002ab0 <menu+0x15f0>)
 8002a32:	2101      	movs	r1, #1
 8002a34:	2002      	movs	r0, #2
 8002a36:	f7fd fe17 	bl	8000668 <lcd_print>
 8002a3a:	e048      	b.n	8002ace <menu+0x160e>
		} else if(kapi2Tip == 1) {
 8002a3c:	4b1b      	ldr	r3, [pc, #108]	; (8002aac <menu+0x15ec>)
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d13b      	bne.n	8002abc <menu+0x15fc>
			if(dilSecim == 0) {
 8002a44:	4b10      	ldr	r3, [pc, #64]	; (8002a88 <menu+0x15c8>)
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d105      	bne.n	8002a58 <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 8002a4c:	4a19      	ldr	r2, [pc, #100]	; (8002ab4 <menu+0x15f4>)
 8002a4e:	2101      	movs	r1, #1
 8002a50:	2002      	movs	r0, #2
 8002a52:	f7fd fe09 	bl	8000668 <lcd_print>
 8002a56:	e03a      	b.n	8002ace <menu+0x160e>
			} else if(dilSecim == 1) {
 8002a58:	4b0b      	ldr	r3, [pc, #44]	; (8002a88 <menu+0x15c8>)
 8002a5a:	781b      	ldrb	r3, [r3, #0]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d136      	bne.n	8002ace <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 8002a60:	4a15      	ldr	r2, [pc, #84]	; (8002ab8 <menu+0x15f8>)
 8002a62:	2101      	movs	r1, #1
 8002a64:	2002      	movs	r0, #2
 8002a66:	f7fd fdff 	bl	8000668 <lcd_print>
 8002a6a:	e030      	b.n	8002ace <menu+0x160e>
 8002a6c:	20000d3e 	.word	0x20000d3e
 8002a70:	0800dd04 	.word	0x0800dd04
 8002a74:	40010800 	.word	0x40010800
 8002a78:	20000d64 	.word	0x20000d64
 8002a7c:	20000c34 	.word	0x20000c34
 8002a80:	20000d61 	.word	0x20000d61
 8002a84:	20000d35 	.word	0x20000d35
 8002a88:	20000d56 	.word	0x20000d56
 8002a8c:	0800dd14 	.word	0x0800dd14
 8002a90:	0800dd28 	.word	0x0800dd28
 8002a94:	0800dd38 	.word	0x0800dd38
 8002a98:	0800dd4c 	.word	0x0800dd4c
 8002a9c:	20000d4e 	.word	0x20000d4e
 8002aa0:	20000cb8 	.word	0x20000cb8
 8002aa4:	0800dd5c 	.word	0x0800dd5c
 8002aa8:	0800dd70 	.word	0x0800dd70
 8002aac:	20000d3f 	.word	0x20000d3f
 8002ab0:	0800dccc 	.word	0x0800dccc
 8002ab4:	0800dce0 	.word	0x0800dce0
 8002ab8:	0800dcf0 	.word	0x0800dcf0
			}
		} else if(kapi2Tip == 2) {
 8002abc:	4b8a      	ldr	r3, [pc, #552]	; (8002ce8 <menu+0x1828>)
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d104      	bne.n	8002ace <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 8002ac4:	4a89      	ldr	r2, [pc, #548]	; (8002cec <menu+0x182c>)
 8002ac6:	2101      	movs	r1, #1
 8002ac8:	2002      	movs	r0, #2
 8002aca:	f7fd fdcd 	bl	8000668 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ace:	2102      	movs	r1, #2
 8002ad0:	4887      	ldr	r0, [pc, #540]	; (8002cf0 <menu+0x1830>)
 8002ad2:	f007 f835 	bl	8009b40 <HAL_GPIO_ReadPin>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d115      	bne.n	8002b08 <menu+0x1648>
 8002adc:	4b85      	ldr	r3, [pc, #532]	; (8002cf4 <menu+0x1834>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	f083 0301 	eor.w	r3, r3, #1
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00e      	beq.n	8002b08 <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 8002aea:	4b7f      	ldr	r3, [pc, #508]	; (8002ce8 <menu+0x1828>)
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	3301      	adds	r3, #1
 8002af0:	b2da      	uxtb	r2, r3
 8002af2:	4b7d      	ldr	r3, [pc, #500]	; (8002ce8 <menu+0x1828>)
 8002af4:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8002af6:	4b7c      	ldr	r3, [pc, #496]	; (8002ce8 <menu+0x1828>)
 8002af8:	781b      	ldrb	r3, [r3, #0]
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d902      	bls.n	8002b04 <menu+0x1644>
				kapi2Tip = 0;
 8002afe:	4b7a      	ldr	r3, [pc, #488]	; (8002ce8 <menu+0x1828>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002b04:	f003 fa78 	bl	8005ff8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b08:	2104      	movs	r1, #4
 8002b0a:	4879      	ldr	r0, [pc, #484]	; (8002cf0 <menu+0x1830>)
 8002b0c:	f007 f818 	bl	8009b40 <HAL_GPIO_ReadPin>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d115      	bne.n	8002b42 <menu+0x1682>
 8002b16:	4b77      	ldr	r3, [pc, #476]	; (8002cf4 <menu+0x1834>)
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	f083 0301 	eor.w	r3, r3, #1
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d00e      	beq.n	8002b42 <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 8002b24:	4b70      	ldr	r3, [pc, #448]	; (8002ce8 <menu+0x1828>)
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	b2da      	uxtb	r2, r3
 8002b2c:	4b6e      	ldr	r3, [pc, #440]	; (8002ce8 <menu+0x1828>)
 8002b2e:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002b30:	4b6d      	ldr	r3, [pc, #436]	; (8002ce8 <menu+0x1828>)
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	2b03      	cmp	r3, #3
 8002b36:	d902      	bls.n	8002b3e <menu+0x167e>
		   		kapi2Tip = 2;
 8002b38:	4b6b      	ldr	r3, [pc, #428]	; (8002ce8 <menu+0x1828>)
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002b3e:	f003 fa5b 	bl	8005ff8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b42:	2108      	movs	r1, #8
 8002b44:	486a      	ldr	r0, [pc, #424]	; (8002cf0 <menu+0x1830>)
 8002b46:	f006 fffb 	bl	8009b40 <HAL_GPIO_ReadPin>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d10d      	bne.n	8002b6c <menu+0x16ac>
 8002b50:	4b68      	ldr	r3, [pc, #416]	; (8002cf4 <menu+0x1834>)
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	f083 0301 	eor.w	r3, r3, #1
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d006      	beq.n	8002b6c <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 8002b5e:	4b62      	ldr	r3, [pc, #392]	; (8002ce8 <menu+0x1828>)
 8002b60:	781a      	ldrb	r2, [r3, #0]
 8002b62:	4b65      	ldr	r3, [pc, #404]	; (8002cf8 <menu+0x1838>)
 8002b64:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8002b66:	4b65      	ldr	r3, [pc, #404]	; (8002cfc <menu+0x183c>)
 8002b68:	2201      	movs	r2, #1
 8002b6a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002b6c:	4b64      	ldr	r3, [pc, #400]	; (8002d00 <menu+0x1840>)
 8002b6e:	781b      	ldrb	r3, [r3, #0]
 8002b70:	2b0c      	cmp	r3, #12
 8002b72:	d17f      	bne.n	8002c74 <menu+0x17b4>
		if(dilSecim == 0) {
 8002b74:	4b63      	ldr	r3, [pc, #396]	; (8002d04 <menu+0x1844>)
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d10a      	bne.n	8002b92 <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8002b7c:	4a62      	ldr	r2, [pc, #392]	; (8002d08 <menu+0x1848>)
 8002b7e:	2101      	movs	r1, #1
 8002b80:	2001      	movs	r0, #1
 8002b82:	f7fd fd71 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002b86:	4a61      	ldr	r2, [pc, #388]	; (8002d0c <menu+0x184c>)
 8002b88:	2101      	movs	r1, #1
 8002b8a:	2002      	movs	r0, #2
 8002b8c:	f7fd fd6c 	bl	8000668 <lcd_print>
 8002b90:	e00d      	b.n	8002bae <menu+0x16ee>
		} else if(dilSecim == 1) {
 8002b92:	4b5c      	ldr	r3, [pc, #368]	; (8002d04 <menu+0x1844>)
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	2b01      	cmp	r3, #1
 8002b98:	d109      	bne.n	8002bae <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8002b9a:	4a5d      	ldr	r2, [pc, #372]	; (8002d10 <menu+0x1850>)
 8002b9c:	2101      	movs	r1, #1
 8002b9e:	2001      	movs	r0, #1
 8002ba0:	f7fd fd62 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002ba4:	4a5b      	ldr	r2, [pc, #364]	; (8002d14 <menu+0x1854>)
 8002ba6:	2101      	movs	r1, #1
 8002ba8:	2002      	movs	r0, #2
 8002baa:	f7fd fd5d 	bl	8000668 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8002bae:	4b5a      	ldr	r3, [pc, #360]	; (8002d18 <menu+0x1858>)
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	220a      	movs	r2, #10
 8002bb4:	4959      	ldr	r1, [pc, #356]	; (8002d1c <menu+0x185c>)
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f009 ffee 	bl	800cb98 <itoa>
		lcd_print(2,16,snum);
 8002bbc:	4a57      	ldr	r2, [pc, #348]	; (8002d1c <menu+0x185c>)
 8002bbe:	2110      	movs	r1, #16
 8002bc0:	2002      	movs	r0, #2
 8002bc2:	f7fd fd51 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002bc6:	2102      	movs	r1, #2
 8002bc8:	4849      	ldr	r0, [pc, #292]	; (8002cf0 <menu+0x1830>)
 8002bca:	f006 ffb9 	bl	8009b40 <HAL_GPIO_ReadPin>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d119      	bne.n	8002c08 <menu+0x1748>
 8002bd4:	4b47      	ldr	r3, [pc, #284]	; (8002cf4 <menu+0x1834>)
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	f083 0301 	eor.w	r3, r3, #1
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d012      	beq.n	8002c08 <menu+0x1748>
 8002be2:	4b41      	ldr	r3, [pc, #260]	; (8002ce8 <menu+0x1828>)
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10e      	bne.n	8002c08 <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 8002bea:	4b4b      	ldr	r3, [pc, #300]	; (8002d18 <menu+0x1858>)
 8002bec:	781b      	ldrb	r3, [r3, #0]
 8002bee:	3301      	adds	r3, #1
 8002bf0:	b2da      	uxtb	r2, r3
 8002bf2:	4b49      	ldr	r3, [pc, #292]	; (8002d18 <menu+0x1858>)
 8002bf4:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002bf6:	4b48      	ldr	r3, [pc, #288]	; (8002d18 <menu+0x1858>)
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	2b05      	cmp	r3, #5
 8002bfc:	d902      	bls.n	8002c04 <menu+0x1744>
				kapi2AcSure = 0;
 8002bfe:	4b46      	ldr	r3, [pc, #280]	; (8002d18 <menu+0x1858>)
 8002c00:	2200      	movs	r2, #0
 8002c02:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002c04:	f003 f9f8 	bl	8005ff8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002c08:	2104      	movs	r1, #4
 8002c0a:	4839      	ldr	r0, [pc, #228]	; (8002cf0 <menu+0x1830>)
 8002c0c:	f006 ff98 	bl	8009b40 <HAL_GPIO_ReadPin>
 8002c10:	4603      	mov	r3, r0
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d119      	bne.n	8002c4a <menu+0x178a>
 8002c16:	4b37      	ldr	r3, [pc, #220]	; (8002cf4 <menu+0x1834>)
 8002c18:	781b      	ldrb	r3, [r3, #0]
 8002c1a:	f083 0301 	eor.w	r3, r3, #1
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d012      	beq.n	8002c4a <menu+0x178a>
 8002c24:	4b30      	ldr	r3, [pc, #192]	; (8002ce8 <menu+0x1828>)
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d10e      	bne.n	8002c4a <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 8002c2c:	4b3a      	ldr	r3, [pc, #232]	; (8002d18 <menu+0x1858>)
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	3b01      	subs	r3, #1
 8002c32:	b2da      	uxtb	r2, r3
 8002c34:	4b38      	ldr	r3, [pc, #224]	; (8002d18 <menu+0x1858>)
 8002c36:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002c38:	4b37      	ldr	r3, [pc, #220]	; (8002d18 <menu+0x1858>)
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b06      	cmp	r3, #6
 8002c3e:	d902      	bls.n	8002c46 <menu+0x1786>
		   		kapi2AcSure = 5;
 8002c40:	4b35      	ldr	r3, [pc, #212]	; (8002d18 <menu+0x1858>)
 8002c42:	2205      	movs	r2, #5
 8002c44:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002c46:	f003 f9d7 	bl	8005ff8 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c4a:	2108      	movs	r1, #8
 8002c4c:	4828      	ldr	r0, [pc, #160]	; (8002cf0 <menu+0x1830>)
 8002c4e:	f006 ff77 	bl	8009b40 <HAL_GPIO_ReadPin>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	d10d      	bne.n	8002c74 <menu+0x17b4>
 8002c58:	4b26      	ldr	r3, [pc, #152]	; (8002cf4 <menu+0x1834>)
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	f083 0301 	eor.w	r3, r3, #1
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d006      	beq.n	8002c74 <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 8002c66:	4b2c      	ldr	r3, [pc, #176]	; (8002d18 <menu+0x1858>)
 8002c68:	781a      	ldrb	r2, [r3, #0]
 8002c6a:	4b23      	ldr	r3, [pc, #140]	; (8002cf8 <menu+0x1838>)
 8002c6c:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8002c6e:	4b23      	ldr	r3, [pc, #140]	; (8002cfc <menu+0x183c>)
 8002c70:	2201      	movs	r2, #1
 8002c72:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8002c74:	4b22      	ldr	r3, [pc, #136]	; (8002d00 <menu+0x1840>)
 8002c76:	781b      	ldrb	r3, [r3, #0]
 8002c78:	2b0d      	cmp	r3, #13
 8002c7a:	f040 80b5 	bne.w	8002de8 <menu+0x1928>
		if(dilSecim == 0) {
 8002c7e:	4b21      	ldr	r3, [pc, #132]	; (8002d04 <menu+0x1844>)
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d105      	bne.n	8002c92 <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 8002c86:	4a26      	ldr	r2, [pc, #152]	; (8002d20 <menu+0x1860>)
 8002c88:	2101      	movs	r1, #1
 8002c8a:	2001      	movs	r0, #1
 8002c8c:	f7fd fcec 	bl	8000668 <lcd_print>
 8002c90:	e008      	b.n	8002ca4 <menu+0x17e4>
		} else if(dilSecim == 1){
 8002c92:	4b1c      	ldr	r3, [pc, #112]	; (8002d04 <menu+0x1844>)
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d104      	bne.n	8002ca4 <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8002c9a:	4a22      	ldr	r2, [pc, #136]	; (8002d24 <menu+0x1864>)
 8002c9c:	2101      	movs	r1, #1
 8002c9e:	2001      	movs	r0, #1
 8002ca0:	f7fd fce2 	bl	8000668 <lcd_print>
		}

		if(kapitablaTip == 0) {
 8002ca4:	4b20      	ldr	r3, [pc, #128]	; (8002d28 <menu+0x1868>)
 8002ca6:	781b      	ldrb	r3, [r3, #0]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d105      	bne.n	8002cb8 <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 8002cac:	4a1f      	ldr	r2, [pc, #124]	; (8002d2c <menu+0x186c>)
 8002cae:	2101      	movs	r1, #1
 8002cb0:	2002      	movs	r0, #2
 8002cb2:	f7fd fcd9 	bl	8000668 <lcd_print>
 8002cb6:	e048      	b.n	8002d4a <menu+0x188a>
		} else if(kapitablaTip == 1) {
 8002cb8:	4b1b      	ldr	r3, [pc, #108]	; (8002d28 <menu+0x1868>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	2b01      	cmp	r3, #1
 8002cbe:	d13b      	bne.n	8002d38 <menu+0x1878>
			if(dilSecim == 0) {
 8002cc0:	4b10      	ldr	r3, [pc, #64]	; (8002d04 <menu+0x1844>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d105      	bne.n	8002cd4 <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 8002cc8:	4a19      	ldr	r2, [pc, #100]	; (8002d30 <menu+0x1870>)
 8002cca:	2101      	movs	r1, #1
 8002ccc:	2002      	movs	r0, #2
 8002cce:	f7fd fccb 	bl	8000668 <lcd_print>
 8002cd2:	e03a      	b.n	8002d4a <menu+0x188a>
			} else if(dilSecim == 1) {
 8002cd4:	4b0b      	ldr	r3, [pc, #44]	; (8002d04 <menu+0x1844>)
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d136      	bne.n	8002d4a <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 8002cdc:	4a15      	ldr	r2, [pc, #84]	; (8002d34 <menu+0x1874>)
 8002cde:	2101      	movs	r1, #1
 8002ce0:	2002      	movs	r0, #2
 8002ce2:	f7fd fcc1 	bl	8000668 <lcd_print>
 8002ce6:	e030      	b.n	8002d4a <menu+0x188a>
 8002ce8:	20000d3f 	.word	0x20000d3f
 8002cec:	0800dd04 	.word	0x0800dd04
 8002cf0:	40010800 	.word	0x40010800
 8002cf4:	20000d64 	.word	0x20000d64
 8002cf8:	20000c34 	.word	0x20000c34
 8002cfc:	20000d61 	.word	0x20000d61
 8002d00:	20000d35 	.word	0x20000d35
 8002d04:	20000d56 	.word	0x20000d56
 8002d08:	0800dd84 	.word	0x0800dd84
 8002d0c:	0800dd28 	.word	0x0800dd28
 8002d10:	0800dd98 	.word	0x0800dd98
 8002d14:	0800dd4c 	.word	0x0800dd4c
 8002d18:	20000d4f 	.word	0x20000d4f
 8002d1c:	20000cb8 	.word	0x20000cb8
 8002d20:	0800ddac 	.word	0x0800ddac
 8002d24:	0800ddc0 	.word	0x0800ddc0
 8002d28:	20000d40 	.word	0x20000d40
 8002d2c:	0800dccc 	.word	0x0800dccc
 8002d30:	0800dce0 	.word	0x0800dce0
 8002d34:	0800dcf0 	.word	0x0800dcf0
			}
		} else if(kapitablaTip == 2) {
 8002d38:	4b5b      	ldr	r3, [pc, #364]	; (8002ea8 <menu+0x19e8>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d104      	bne.n	8002d4a <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 8002d40:	4a5a      	ldr	r2, [pc, #360]	; (8002eac <menu+0x19ec>)
 8002d42:	2101      	movs	r1, #1
 8002d44:	2002      	movs	r0, #2
 8002d46:	f7fd fc8f 	bl	8000668 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d4a:	2102      	movs	r1, #2
 8002d4c:	4858      	ldr	r0, [pc, #352]	; (8002eb0 <menu+0x19f0>)
 8002d4e:	f006 fef7 	bl	8009b40 <HAL_GPIO_ReadPin>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	d115      	bne.n	8002d84 <menu+0x18c4>
 8002d58:	4b56      	ldr	r3, [pc, #344]	; (8002eb4 <menu+0x19f4>)
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	f083 0301 	eor.w	r3, r3, #1
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d00e      	beq.n	8002d84 <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 8002d66:	4b50      	ldr	r3, [pc, #320]	; (8002ea8 <menu+0x19e8>)
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	3301      	adds	r3, #1
 8002d6c:	b2da      	uxtb	r2, r3
 8002d6e:	4b4e      	ldr	r3, [pc, #312]	; (8002ea8 <menu+0x19e8>)
 8002d70:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002d72:	4b4d      	ldr	r3, [pc, #308]	; (8002ea8 <menu+0x19e8>)
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d902      	bls.n	8002d80 <menu+0x18c0>
				kapitablaTip = 0;
 8002d7a:	4b4b      	ldr	r3, [pc, #300]	; (8002ea8 <menu+0x19e8>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002d80:	f003 f93a 	bl	8005ff8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d84:	2104      	movs	r1, #4
 8002d86:	484a      	ldr	r0, [pc, #296]	; (8002eb0 <menu+0x19f0>)
 8002d88:	f006 feda 	bl	8009b40 <HAL_GPIO_ReadPin>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b01      	cmp	r3, #1
 8002d90:	d115      	bne.n	8002dbe <menu+0x18fe>
 8002d92:	4b48      	ldr	r3, [pc, #288]	; (8002eb4 <menu+0x19f4>)
 8002d94:	781b      	ldrb	r3, [r3, #0]
 8002d96:	f083 0301 	eor.w	r3, r3, #1
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d00e      	beq.n	8002dbe <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 8002da0:	4b41      	ldr	r3, [pc, #260]	; (8002ea8 <menu+0x19e8>)
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	3b01      	subs	r3, #1
 8002da6:	b2da      	uxtb	r2, r3
 8002da8:	4b3f      	ldr	r3, [pc, #252]	; (8002ea8 <menu+0x19e8>)
 8002daa:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002dac:	4b3e      	ldr	r3, [pc, #248]	; (8002ea8 <menu+0x19e8>)
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	2b03      	cmp	r3, #3
 8002db2:	d902      	bls.n	8002dba <menu+0x18fa>
		   		kapitablaTip = 2;
 8002db4:	4b3c      	ldr	r3, [pc, #240]	; (8002ea8 <menu+0x19e8>)
 8002db6:	2202      	movs	r2, #2
 8002db8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002dba:	f003 f91d 	bl	8005ff8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002dbe:	2108      	movs	r1, #8
 8002dc0:	483b      	ldr	r0, [pc, #236]	; (8002eb0 <menu+0x19f0>)
 8002dc2:	f006 febd 	bl	8009b40 <HAL_GPIO_ReadPin>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d10d      	bne.n	8002de8 <menu+0x1928>
 8002dcc:	4b39      	ldr	r3, [pc, #228]	; (8002eb4 <menu+0x19f4>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	f083 0301 	eor.w	r3, r3, #1
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d006      	beq.n	8002de8 <menu+0x1928>
			eepromData[12] = kapitablaTip;
 8002dda:	4b33      	ldr	r3, [pc, #204]	; (8002ea8 <menu+0x19e8>)
 8002ddc:	781a      	ldrb	r2, [r3, #0]
 8002dde:	4b36      	ldr	r3, [pc, #216]	; (8002eb8 <menu+0x19f8>)
 8002de0:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002de2:	4b36      	ldr	r3, [pc, #216]	; (8002ebc <menu+0x19fc>)
 8002de4:	2201      	movs	r2, #1
 8002de6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002de8:	4b35      	ldr	r3, [pc, #212]	; (8002ec0 <menu+0x1a00>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	2b0e      	cmp	r3, #14
 8002dee:	f040 80f2 	bne.w	8002fd6 <menu+0x1b16>
		if(dilSecim == 0) {
 8002df2:	4b34      	ldr	r3, [pc, #208]	; (8002ec4 <menu+0x1a04>)
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d105      	bne.n	8002e06 <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8002dfa:	4a33      	ldr	r2, [pc, #204]	; (8002ec8 <menu+0x1a08>)
 8002dfc:	2101      	movs	r1, #1
 8002dfe:	2001      	movs	r0, #1
 8002e00:	f7fd fc32 	bl	8000668 <lcd_print>
 8002e04:	e008      	b.n	8002e18 <menu+0x1958>
		} else if(dilSecim == 1) {
 8002e06:	4b2f      	ldr	r3, [pc, #188]	; (8002ec4 <menu+0x1a04>)
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d104      	bne.n	8002e18 <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8002e0e:	4a2f      	ldr	r2, [pc, #188]	; (8002ecc <menu+0x1a0c>)
 8002e10:	2101      	movs	r1, #1
 8002e12:	2001      	movs	r0, #1
 8002e14:	f7fd fc28 	bl	8000668 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002e18:	4b2d      	ldr	r3, [pc, #180]	; (8002ed0 <menu+0x1a10>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d113      	bne.n	8002e48 <menu+0x1988>
			if(dilSecim == 0){
 8002e20:	4b28      	ldr	r3, [pc, #160]	; (8002ec4 <menu+0x1a04>)
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d105      	bne.n	8002e34 <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 8002e28:	4a2a      	ldr	r2, [pc, #168]	; (8002ed4 <menu+0x1a14>)
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	2002      	movs	r0, #2
 8002e2e:	f7fd fc1b 	bl	8000668 <lcd_print>
 8002e32:	e071      	b.n	8002f18 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002e34:	4b23      	ldr	r3, [pc, #140]	; (8002ec4 <menu+0x1a04>)
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d16d      	bne.n	8002f18 <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 8002e3c:	4a26      	ldr	r2, [pc, #152]	; (8002ed8 <menu+0x1a18>)
 8002e3e:	2101      	movs	r1, #1
 8002e40:	2002      	movs	r0, #2
 8002e42:	f7fd fc11 	bl	8000668 <lcd_print>
 8002e46:	e067      	b.n	8002f18 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002e48:	4b21      	ldr	r3, [pc, #132]	; (8002ed0 <menu+0x1a10>)
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d112      	bne.n	8002e76 <menu+0x19b6>
			if(dilSecim == 0){
 8002e50:	4b1c      	ldr	r3, [pc, #112]	; (8002ec4 <menu+0x1a04>)
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d104      	bne.n	8002e62 <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8002e58:	4a20      	ldr	r2, [pc, #128]	; (8002edc <menu+0x1a1c>)
 8002e5a:	2101      	movs	r1, #1
 8002e5c:	2002      	movs	r0, #2
 8002e5e:	f7fd fc03 	bl	8000668 <lcd_print>
			}
			if(dilSecim == 1){
 8002e62:	4b18      	ldr	r3, [pc, #96]	; (8002ec4 <menu+0x1a04>)
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d156      	bne.n	8002f18 <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 8002e6a:	4a1d      	ldr	r2, [pc, #116]	; (8002ee0 <menu+0x1a20>)
 8002e6c:	2101      	movs	r1, #1
 8002e6e:	2002      	movs	r0, #2
 8002e70:	f7fd fbfa 	bl	8000668 <lcd_print>
 8002e74:	e050      	b.n	8002f18 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 8002e76:	4b16      	ldr	r3, [pc, #88]	; (8002ed0 <menu+0x1a10>)
 8002e78:	781b      	ldrb	r3, [r3, #0]
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d136      	bne.n	8002eec <menu+0x1a2c>
			if(dilSecim == 0){
 8002e7e:	4b11      	ldr	r3, [pc, #68]	; (8002ec4 <menu+0x1a04>)
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d105      	bne.n	8002e92 <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8002e86:	4a17      	ldr	r2, [pc, #92]	; (8002ee4 <menu+0x1a24>)
 8002e88:	2101      	movs	r1, #1
 8002e8a:	2002      	movs	r0, #2
 8002e8c:	f7fd fbec 	bl	8000668 <lcd_print>
 8002e90:	e042      	b.n	8002f18 <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002e92:	4b0c      	ldr	r3, [pc, #48]	; (8002ec4 <menu+0x1a04>)
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d13e      	bne.n	8002f18 <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 8002e9a:	4a13      	ldr	r2, [pc, #76]	; (8002ee8 <menu+0x1a28>)
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	2002      	movs	r0, #2
 8002ea0:	f7fd fbe2 	bl	8000668 <lcd_print>
 8002ea4:	e038      	b.n	8002f18 <menu+0x1a58>
 8002ea6:	bf00      	nop
 8002ea8:	20000d40 	.word	0x20000d40
 8002eac:	0800dd04 	.word	0x0800dd04
 8002eb0:	40010800 	.word	0x40010800
 8002eb4:	20000d64 	.word	0x20000d64
 8002eb8:	20000c34 	.word	0x20000c34
 8002ebc:	20000d61 	.word	0x20000d61
 8002ec0:	20000d35 	.word	0x20000d35
 8002ec4:	20000d56 	.word	0x20000d56
 8002ec8:	0800ddd4 	.word	0x0800ddd4
 8002ecc:	0800dde8 	.word	0x0800dde8
 8002ed0:	20000d42 	.word	0x20000d42
 8002ed4:	0800ddfc 	.word	0x0800ddfc
 8002ed8:	0800de0c 	.word	0x0800de0c
 8002edc:	0800de1c 	.word	0x0800de1c
 8002ee0:	0800de2c 	.word	0x0800de2c
 8002ee4:	0800de3c 	.word	0x0800de3c
 8002ee8:	0800de50 	.word	0x0800de50
			}
		} else if(kapiTablaAcKonum == 3) {
 8002eec:	4b9b      	ldr	r3, [pc, #620]	; (800315c <menu+0x1c9c>)
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	2b03      	cmp	r3, #3
 8002ef2:	d111      	bne.n	8002f18 <menu+0x1a58>
			if(dilSecim == 0) {
 8002ef4:	4b9a      	ldr	r3, [pc, #616]	; (8003160 <menu+0x1ca0>)
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d104      	bne.n	8002f06 <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 8002efc:	4a99      	ldr	r2, [pc, #612]	; (8003164 <menu+0x1ca4>)
 8002efe:	2101      	movs	r1, #1
 8002f00:	2002      	movs	r0, #2
 8002f02:	f7fd fbb1 	bl	8000668 <lcd_print>
			}
			if(dilSecim == 1) {
 8002f06:	4b96      	ldr	r3, [pc, #600]	; (8003160 <menu+0x1ca0>)
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d104      	bne.n	8002f18 <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 8002f0e:	4a96      	ldr	r2, [pc, #600]	; (8003168 <menu+0x1ca8>)
 8002f10:	2101      	movs	r1, #1
 8002f12:	2002      	movs	r0, #2
 8002f14:	f7fd fba8 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f18:	2102      	movs	r1, #2
 8002f1a:	4894      	ldr	r0, [pc, #592]	; (800316c <menu+0x1cac>)
 8002f1c:	f006 fe10 	bl	8009b40 <HAL_GPIO_ReadPin>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d115      	bne.n	8002f52 <menu+0x1a92>
 8002f26:	4b92      	ldr	r3, [pc, #584]	; (8003170 <menu+0x1cb0>)
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	f083 0301 	eor.w	r3, r3, #1
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00e      	beq.n	8002f52 <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002f34:	4b89      	ldr	r3, [pc, #548]	; (800315c <menu+0x1c9c>)
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	3301      	adds	r3, #1
 8002f3a:	b2da      	uxtb	r2, r3
 8002f3c:	4b87      	ldr	r3, [pc, #540]	; (800315c <menu+0x1c9c>)
 8002f3e:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002f40:	4b86      	ldr	r3, [pc, #536]	; (800315c <menu+0x1c9c>)
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d902      	bls.n	8002f4e <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 8002f48:	4b84      	ldr	r3, [pc, #528]	; (800315c <menu+0x1c9c>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f4e:	f003 f853 	bl	8005ff8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f52:	2104      	movs	r1, #4
 8002f54:	4885      	ldr	r0, [pc, #532]	; (800316c <menu+0x1cac>)
 8002f56:	f006 fdf3 	bl	8009b40 <HAL_GPIO_ReadPin>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d115      	bne.n	8002f8c <menu+0x1acc>
 8002f60:	4b83      	ldr	r3, [pc, #524]	; (8003170 <menu+0x1cb0>)
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	f083 0301 	eor.w	r3, r3, #1
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d00e      	beq.n	8002f8c <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002f6e:	4b7b      	ldr	r3, [pc, #492]	; (800315c <menu+0x1c9c>)
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	3b01      	subs	r3, #1
 8002f74:	b2da      	uxtb	r2, r3
 8002f76:	4b79      	ldr	r3, [pc, #484]	; (800315c <menu+0x1c9c>)
 8002f78:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002f7a:	4b78      	ldr	r3, [pc, #480]	; (800315c <menu+0x1c9c>)
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	2b03      	cmp	r3, #3
 8002f80:	d902      	bls.n	8002f88 <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 8002f82:	4b76      	ldr	r3, [pc, #472]	; (800315c <menu+0x1c9c>)
 8002f84:	2202      	movs	r2, #2
 8002f86:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002f88:	f003 f836 	bl	8005ff8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f8c:	2108      	movs	r1, #8
 8002f8e:	4877      	ldr	r0, [pc, #476]	; (800316c <menu+0x1cac>)
 8002f90:	f006 fdd6 	bl	8009b40 <HAL_GPIO_ReadPin>
 8002f94:	4603      	mov	r3, r0
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d11d      	bne.n	8002fd6 <menu+0x1b16>
 8002f9a:	4b75      	ldr	r3, [pc, #468]	; (8003170 <menu+0x1cb0>)
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	f083 0301 	eor.w	r3, r3, #1
 8002fa2:	b2db      	uxtb	r3, r3
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d016      	beq.n	8002fd6 <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 8002fa8:	4b6c      	ldr	r3, [pc, #432]	; (800315c <menu+0x1c9c>)
 8002faa:	781a      	ldrb	r2, [r3, #0]
 8002fac:	4b71      	ldr	r3, [pc, #452]	; (8003174 <menu+0x1cb4>)
 8002fae:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002fb2:	4b6a      	ldr	r3, [pc, #424]	; (800315c <menu+0x1c9c>)
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d003      	beq.n	8002fc2 <menu+0x1b02>
 8002fba:	4b68      	ldr	r3, [pc, #416]	; (800315c <menu+0x1c9c>)
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d106      	bne.n	8002fd0 <menu+0x1b10>
				altLimit = 1;
 8002fc2:	4b6d      	ldr	r3, [pc, #436]	; (8003178 <menu+0x1cb8>)
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002fc8:	4b6b      	ldr	r3, [pc, #428]	; (8003178 <menu+0x1cb8>)
 8002fca:	781a      	ldrb	r2, [r3, #0]
 8002fcc:	4b69      	ldr	r3, [pc, #420]	; (8003174 <menu+0x1cb4>)
 8002fce:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002fd0:	4b6a      	ldr	r3, [pc, #424]	; (800317c <menu+0x1cbc>)
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002fd6:	4b6a      	ldr	r3, [pc, #424]	; (8003180 <menu+0x1cc0>)
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	2b0f      	cmp	r3, #15
 8002fdc:	d17f      	bne.n	80030de <menu+0x1c1e>
		if(dilSecim == 0) {
 8002fde:	4b60      	ldr	r3, [pc, #384]	; (8003160 <menu+0x1ca0>)
 8002fe0:	781b      	ldrb	r3, [r3, #0]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d10a      	bne.n	8002ffc <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 8002fe6:	4a67      	ldr	r2, [pc, #412]	; (8003184 <menu+0x1cc4>)
 8002fe8:	2101      	movs	r1, #1
 8002fea:	2001      	movs	r0, #1
 8002fec:	f7fd fb3c 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002ff0:	4a65      	ldr	r2, [pc, #404]	; (8003188 <menu+0x1cc8>)
 8002ff2:	2101      	movs	r1, #1
 8002ff4:	2002      	movs	r0, #2
 8002ff6:	f7fd fb37 	bl	8000668 <lcd_print>
 8002ffa:	e00d      	b.n	8003018 <menu+0x1b58>
		} else if(dilSecim == 1) {
 8002ffc:	4b58      	ldr	r3, [pc, #352]	; (8003160 <menu+0x1ca0>)
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	2b01      	cmp	r3, #1
 8003002:	d109      	bne.n	8003018 <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 8003004:	4a61      	ldr	r2, [pc, #388]	; (800318c <menu+0x1ccc>)
 8003006:	2101      	movs	r1, #1
 8003008:	2001      	movs	r0, #1
 800300a:	f7fd fb2d 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 800300e:	4a60      	ldr	r2, [pc, #384]	; (8003190 <menu+0x1cd0>)
 8003010:	2101      	movs	r1, #1
 8003012:	2002      	movs	r0, #2
 8003014:	f7fd fb28 	bl	8000668 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8003018:	4b5e      	ldr	r3, [pc, #376]	; (8003194 <menu+0x1cd4>)
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	220a      	movs	r2, #10
 800301e:	495e      	ldr	r1, [pc, #376]	; (8003198 <menu+0x1cd8>)
 8003020:	4618      	mov	r0, r3
 8003022:	f009 fdb9 	bl	800cb98 <itoa>
		lcd_print(2,16,snum);
 8003026:	4a5c      	ldr	r2, [pc, #368]	; (8003198 <menu+0x1cd8>)
 8003028:	2110      	movs	r1, #16
 800302a:	2002      	movs	r0, #2
 800302c:	f7fd fb1c 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8003030:	2102      	movs	r1, #2
 8003032:	484e      	ldr	r0, [pc, #312]	; (800316c <menu+0x1cac>)
 8003034:	f006 fd84 	bl	8009b40 <HAL_GPIO_ReadPin>
 8003038:	4603      	mov	r3, r0
 800303a:	2b01      	cmp	r3, #1
 800303c:	d119      	bne.n	8003072 <menu+0x1bb2>
 800303e:	4b4c      	ldr	r3, [pc, #304]	; (8003170 <menu+0x1cb0>)
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	f083 0301 	eor.w	r3, r3, #1
 8003046:	b2db      	uxtb	r3, r3
 8003048:	2b00      	cmp	r3, #0
 800304a:	d012      	beq.n	8003072 <menu+0x1bb2>
 800304c:	4b53      	ldr	r3, [pc, #332]	; (800319c <menu+0x1cdc>)
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d10e      	bne.n	8003072 <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8003054:	4b4f      	ldr	r3, [pc, #316]	; (8003194 <menu+0x1cd4>)
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	3301      	adds	r3, #1
 800305a:	b2da      	uxtb	r2, r3
 800305c:	4b4d      	ldr	r3, [pc, #308]	; (8003194 <menu+0x1cd4>)
 800305e:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8003060:	4b4c      	ldr	r3, [pc, #304]	; (8003194 <menu+0x1cd4>)
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	2b05      	cmp	r3, #5
 8003066:	d902      	bls.n	800306e <menu+0x1bae>
				kapiTablaAcSure = 0;
 8003068:	4b4a      	ldr	r3, [pc, #296]	; (8003194 <menu+0x1cd4>)
 800306a:	2200      	movs	r2, #0
 800306c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800306e:	f002 ffc3 	bl	8005ff8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8003072:	2104      	movs	r1, #4
 8003074:	483d      	ldr	r0, [pc, #244]	; (800316c <menu+0x1cac>)
 8003076:	f006 fd63 	bl	8009b40 <HAL_GPIO_ReadPin>
 800307a:	4603      	mov	r3, r0
 800307c:	2b01      	cmp	r3, #1
 800307e:	d119      	bne.n	80030b4 <menu+0x1bf4>
 8003080:	4b3b      	ldr	r3, [pc, #236]	; (8003170 <menu+0x1cb0>)
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	f083 0301 	eor.w	r3, r3, #1
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d012      	beq.n	80030b4 <menu+0x1bf4>
 800308e:	4b43      	ldr	r3, [pc, #268]	; (800319c <menu+0x1cdc>)
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10e      	bne.n	80030b4 <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8003096:	4b3f      	ldr	r3, [pc, #252]	; (8003194 <menu+0x1cd4>)
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	3b01      	subs	r3, #1
 800309c:	b2da      	uxtb	r2, r3
 800309e:	4b3d      	ldr	r3, [pc, #244]	; (8003194 <menu+0x1cd4>)
 80030a0:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 80030a2:	4b3c      	ldr	r3, [pc, #240]	; (8003194 <menu+0x1cd4>)
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	2b06      	cmp	r3, #6
 80030a8:	d902      	bls.n	80030b0 <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 80030aa:	4b3a      	ldr	r3, [pc, #232]	; (8003194 <menu+0x1cd4>)
 80030ac:	2205      	movs	r2, #5
 80030ae:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80030b0:	f002 ffa2 	bl	8005ff8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80030b4:	2108      	movs	r1, #8
 80030b6:	482d      	ldr	r0, [pc, #180]	; (800316c <menu+0x1cac>)
 80030b8:	f006 fd42 	bl	8009b40 <HAL_GPIO_ReadPin>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d10d      	bne.n	80030de <menu+0x1c1e>
 80030c2:	4b2b      	ldr	r3, [pc, #172]	; (8003170 <menu+0x1cb0>)
 80030c4:	781b      	ldrb	r3, [r3, #0]
 80030c6:	f083 0301 	eor.w	r3, r3, #1
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d006      	beq.n	80030de <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 80030d0:	4b30      	ldr	r3, [pc, #192]	; (8003194 <menu+0x1cd4>)
 80030d2:	781a      	ldrb	r2, [r3, #0]
 80030d4:	4b27      	ldr	r3, [pc, #156]	; (8003174 <menu+0x1cb4>)
 80030d6:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 80030d8:	4b28      	ldr	r3, [pc, #160]	; (800317c <menu+0x1cbc>)
 80030da:	2201      	movs	r2, #1
 80030dc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 80030de:	4b28      	ldr	r3, [pc, #160]	; (8003180 <menu+0x1cc0>)
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	2b10      	cmp	r3, #16
 80030e4:	f040 80bc 	bne.w	8003260 <menu+0x1da0>
		if(dilSecim == 0) {
 80030e8:	4b1d      	ldr	r3, [pc, #116]	; (8003160 <menu+0x1ca0>)
 80030ea:	781b      	ldrb	r3, [r3, #0]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d105      	bne.n	80030fc <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 80030f0:	4a2b      	ldr	r2, [pc, #172]	; (80031a0 <menu+0x1ce0>)
 80030f2:	2101      	movs	r1, #1
 80030f4:	2001      	movs	r0, #1
 80030f6:	f7fd fab7 	bl	8000668 <lcd_print>
 80030fa:	e008      	b.n	800310e <menu+0x1c4e>
		} else if(dilSecim == 1) {
 80030fc:	4b18      	ldr	r3, [pc, #96]	; (8003160 <menu+0x1ca0>)
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d104      	bne.n	800310e <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 8003104:	4a27      	ldr	r2, [pc, #156]	; (80031a4 <menu+0x1ce4>)
 8003106:	2101      	movs	r1, #1
 8003108:	2001      	movs	r0, #1
 800310a:	f7fd faad 	bl	8000668 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 800310e:	4b26      	ldr	r3, [pc, #152]	; (80031a8 <menu+0x1ce8>)
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d113      	bne.n	800313e <menu+0x1c7e>
			if(dilSecim == 0) {
 8003116:	4b12      	ldr	r3, [pc, #72]	; (8003160 <menu+0x1ca0>)
 8003118:	781b      	ldrb	r3, [r3, #0]
 800311a:	2b00      	cmp	r3, #0
 800311c:	d105      	bne.n	800312a <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 800311e:	4a11      	ldr	r2, [pc, #68]	; (8003164 <menu+0x1ca4>)
 8003120:	2101      	movs	r1, #1
 8003122:	2002      	movs	r0, #2
 8003124:	f7fd faa0 	bl	8000668 <lcd_print>
 8003128:	e04b      	b.n	80031c2 <menu+0x1d02>
			} else if(dilSecim == 1) {
 800312a:	4b0d      	ldr	r3, [pc, #52]	; (8003160 <menu+0x1ca0>)
 800312c:	781b      	ldrb	r3, [r3, #0]
 800312e:	2b01      	cmp	r3, #1
 8003130:	d147      	bne.n	80031c2 <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 8003132:	4a0d      	ldr	r2, [pc, #52]	; (8003168 <menu+0x1ca8>)
 8003134:	2101      	movs	r1, #1
 8003136:	2002      	movs	r0, #2
 8003138:	f7fd fa96 	bl	8000668 <lcd_print>
 800313c:	e041      	b.n	80031c2 <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 800313e:	4b1a      	ldr	r3, [pc, #104]	; (80031a8 <menu+0x1ce8>)
 8003140:	781b      	ldrb	r3, [r3, #0]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d13d      	bne.n	80031c2 <menu+0x1d02>
			if(dilSecim == 0) {
 8003146:	4b06      	ldr	r3, [pc, #24]	; (8003160 <menu+0x1ca0>)
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d130      	bne.n	80031b0 <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 800314e:	4a17      	ldr	r2, [pc, #92]	; (80031ac <menu+0x1cec>)
 8003150:	2101      	movs	r1, #1
 8003152:	2002      	movs	r0, #2
 8003154:	f7fd fa88 	bl	8000668 <lcd_print>
 8003158:	e033      	b.n	80031c2 <menu+0x1d02>
 800315a:	bf00      	nop
 800315c:	20000d42 	.word	0x20000d42
 8003160:	20000d56 	.word	0x20000d56
 8003164:	0800dac4 	.word	0x0800dac4
 8003168:	0800dad8 	.word	0x0800dad8
 800316c:	40010800 	.word	0x40010800
 8003170:	20000d64 	.word	0x20000d64
 8003174:	20000c34 	.word	0x20000c34
 8003178:	20000d3b 	.word	0x20000d3b
 800317c:	20000d61 	.word	0x20000d61
 8003180:	20000d35 	.word	0x20000d35
 8003184:	0800de64 	.word	0x0800de64
 8003188:	0800dd28 	.word	0x0800dd28
 800318c:	0800de78 	.word	0x0800de78
 8003190:	0800dd4c 	.word	0x0800dd4c
 8003194:	20000d50 	.word	0x20000d50
 8003198:	20000cb8 	.word	0x20000cb8
 800319c:	20000d40 	.word	0x20000d40
 80031a0:	0800de8c 	.word	0x0800de8c
 80031a4:	0800dea0 	.word	0x0800dea0
 80031a8:	20000d43 	.word	0x20000d43
 80031ac:	0800db24 	.word	0x0800db24
			} else if(dilSecim == 1) {
 80031b0:	4b99      	ldr	r3, [pc, #612]	; (8003418 <menu+0x1f58>)
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	2b01      	cmp	r3, #1
 80031b6:	d104      	bne.n	80031c2 <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 80031b8:	4a98      	ldr	r2, [pc, #608]	; (800341c <menu+0x1f5c>)
 80031ba:	2101      	movs	r1, #1
 80031bc:	2002      	movs	r0, #2
 80031be:	f7fd fa53 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80031c2:	2102      	movs	r1, #2
 80031c4:	4896      	ldr	r0, [pc, #600]	; (8003420 <menu+0x1f60>)
 80031c6:	f006 fcbb 	bl	8009b40 <HAL_GPIO_ReadPin>
 80031ca:	4603      	mov	r3, r0
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d115      	bne.n	80031fc <menu+0x1d3c>
 80031d0:	4b94      	ldr	r3, [pc, #592]	; (8003424 <menu+0x1f64>)
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	f083 0301 	eor.w	r3, r3, #1
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00e      	beq.n	80031fc <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 80031de:	4b92      	ldr	r3, [pc, #584]	; (8003428 <menu+0x1f68>)
 80031e0:	781b      	ldrb	r3, [r3, #0]
 80031e2:	3301      	adds	r3, #1
 80031e4:	b2da      	uxtb	r2, r3
 80031e6:	4b90      	ldr	r3, [pc, #576]	; (8003428 <menu+0x1f68>)
 80031e8:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 80031ea:	4b8f      	ldr	r3, [pc, #572]	; (8003428 <menu+0x1f68>)
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d902      	bls.n	80031f8 <menu+0x1d38>
				yukariYavasLimit = 0;
 80031f2:	4b8d      	ldr	r3, [pc, #564]	; (8003428 <menu+0x1f68>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80031f8:	f002 fefe 	bl	8005ff8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80031fc:	2104      	movs	r1, #4
 80031fe:	4888      	ldr	r0, [pc, #544]	; (8003420 <menu+0x1f60>)
 8003200:	f006 fc9e 	bl	8009b40 <HAL_GPIO_ReadPin>
 8003204:	4603      	mov	r3, r0
 8003206:	2b01      	cmp	r3, #1
 8003208:	d115      	bne.n	8003236 <menu+0x1d76>
 800320a:	4b86      	ldr	r3, [pc, #536]	; (8003424 <menu+0x1f64>)
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	f083 0301 	eor.w	r3, r3, #1
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b00      	cmp	r3, #0
 8003216:	d00e      	beq.n	8003236 <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 8003218:	4b83      	ldr	r3, [pc, #524]	; (8003428 <menu+0x1f68>)
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	3b01      	subs	r3, #1
 800321e:	b2da      	uxtb	r2, r3
 8003220:	4b81      	ldr	r3, [pc, #516]	; (8003428 <menu+0x1f68>)
 8003222:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 8003224:	4b80      	ldr	r3, [pc, #512]	; (8003428 <menu+0x1f68>)
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d002      	beq.n	8003232 <menu+0x1d72>
		   		yukariYavasLimit = 1;
 800322c:	4b7e      	ldr	r3, [pc, #504]	; (8003428 <menu+0x1f68>)
 800322e:	2201      	movs	r2, #1
 8003230:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003232:	f002 fee1 	bl	8005ff8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003236:	2108      	movs	r1, #8
 8003238:	4879      	ldr	r0, [pc, #484]	; (8003420 <menu+0x1f60>)
 800323a:	f006 fc81 	bl	8009b40 <HAL_GPIO_ReadPin>
 800323e:	4603      	mov	r3, r0
 8003240:	2b01      	cmp	r3, #1
 8003242:	d10d      	bne.n	8003260 <menu+0x1da0>
 8003244:	4b77      	ldr	r3, [pc, #476]	; (8003424 <menu+0x1f64>)
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	f083 0301 	eor.w	r3, r3, #1
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d006      	beq.n	8003260 <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 8003252:	4b75      	ldr	r3, [pc, #468]	; (8003428 <menu+0x1f68>)
 8003254:	781a      	ldrb	r2, [r3, #0]
 8003256:	4b75      	ldr	r3, [pc, #468]	; (800342c <menu+0x1f6c>)
 8003258:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 800325a:	4b75      	ldr	r3, [pc, #468]	; (8003430 <menu+0x1f70>)
 800325c:	2201      	movs	r2, #1
 800325e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8003260:	4b74      	ldr	r3, [pc, #464]	; (8003434 <menu+0x1f74>)
 8003262:	781b      	ldrb	r3, [r3, #0]
 8003264:	2b11      	cmp	r3, #17
 8003266:	f040 80c3 	bne.w	80033f0 <menu+0x1f30>
		if(dilSecim == 0) {
 800326a:	4b6b      	ldr	r3, [pc, #428]	; (8003418 <menu+0x1f58>)
 800326c:	781b      	ldrb	r3, [r3, #0]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d105      	bne.n	800327e <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 8003272:	4a71      	ldr	r2, [pc, #452]	; (8003438 <menu+0x1f78>)
 8003274:	2101      	movs	r1, #1
 8003276:	2001      	movs	r0, #1
 8003278:	f7fd f9f6 	bl	8000668 <lcd_print>
 800327c:	e008      	b.n	8003290 <menu+0x1dd0>
		} else if(dilSecim == 1) {
 800327e:	4b66      	ldr	r3, [pc, #408]	; (8003418 <menu+0x1f58>)
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d104      	bne.n	8003290 <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 8003286:	4a6d      	ldr	r2, [pc, #436]	; (800343c <menu+0x1f7c>)
 8003288:	2101      	movs	r1, #1
 800328a:	2001      	movs	r0, #1
 800328c:	f7fd f9ec 	bl	8000668 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 8003290:	4b6b      	ldr	r3, [pc, #428]	; (8003440 <menu+0x1f80>)
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	2b02      	cmp	r3, #2
 8003296:	d113      	bne.n	80032c0 <menu+0x1e00>
			if(dilSecim == 0){
 8003298:	4b5f      	ldr	r3, [pc, #380]	; (8003418 <menu+0x1f58>)
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d105      	bne.n	80032ac <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 80032a0:	4a68      	ldr	r2, [pc, #416]	; (8003444 <menu+0x1f84>)
 80032a2:	2101      	movs	r1, #1
 80032a4:	2002      	movs	r0, #2
 80032a6:	f7fd f9df 	bl	8000668 <lcd_print>
 80032aa:	e038      	b.n	800331e <menu+0x1e5e>
			} else if(dilSecim == 1){
 80032ac:	4b5a      	ldr	r3, [pc, #360]	; (8003418 <menu+0x1f58>)
 80032ae:	781b      	ldrb	r3, [r3, #0]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d134      	bne.n	800331e <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 80032b4:	4a64      	ldr	r2, [pc, #400]	; (8003448 <menu+0x1f88>)
 80032b6:	2101      	movs	r1, #1
 80032b8:	2002      	movs	r0, #2
 80032ba:	f7fd f9d5 	bl	8000668 <lcd_print>
 80032be:	e02e      	b.n	800331e <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80032c0:	4b5f      	ldr	r3, [pc, #380]	; (8003440 <menu+0x1f80>)
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	d113      	bne.n	80032f0 <menu+0x1e30>
			if(dilSecim == 0){
 80032c8:	4b53      	ldr	r3, [pc, #332]	; (8003418 <menu+0x1f58>)
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d105      	bne.n	80032dc <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 80032d0:	4a5e      	ldr	r2, [pc, #376]	; (800344c <menu+0x1f8c>)
 80032d2:	2101      	movs	r1, #1
 80032d4:	2002      	movs	r0, #2
 80032d6:	f7fd f9c7 	bl	8000668 <lcd_print>
 80032da:	e020      	b.n	800331e <menu+0x1e5e>
			} else if(dilSecim == 1) {
 80032dc:	4b4e      	ldr	r3, [pc, #312]	; (8003418 <menu+0x1f58>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	d11c      	bne.n	800331e <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 80032e4:	4a5a      	ldr	r2, [pc, #360]	; (8003450 <menu+0x1f90>)
 80032e6:	2101      	movs	r1, #1
 80032e8:	2002      	movs	r0, #2
 80032ea:	f7fd f9bd 	bl	8000668 <lcd_print>
 80032ee:	e016      	b.n	800331e <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 80032f0:	4b53      	ldr	r3, [pc, #332]	; (8003440 <menu+0x1f80>)
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d112      	bne.n	800331e <menu+0x1e5e>
			if(dilSecim == 0) {
 80032f8:	4b47      	ldr	r3, [pc, #284]	; (8003418 <menu+0x1f58>)
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d105      	bne.n	800330c <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 8003300:	4a54      	ldr	r2, [pc, #336]	; (8003454 <menu+0x1f94>)
 8003302:	2101      	movs	r1, #1
 8003304:	2002      	movs	r0, #2
 8003306:	f7fd f9af 	bl	8000668 <lcd_print>
 800330a:	e008      	b.n	800331e <menu+0x1e5e>
			} else if(dilSecim == 1) {
 800330c:	4b42      	ldr	r3, [pc, #264]	; (8003418 <menu+0x1f58>)
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	2b01      	cmp	r3, #1
 8003312:	d104      	bne.n	800331e <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 8003314:	4a50      	ldr	r2, [pc, #320]	; (8003458 <menu+0x1f98>)
 8003316:	2101      	movs	r1, #1
 8003318:	2002      	movs	r0, #2
 800331a:	f7fd f9a5 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800331e:	2102      	movs	r1, #2
 8003320:	483f      	ldr	r0, [pc, #252]	; (8003420 <menu+0x1f60>)
 8003322:	f006 fc0d 	bl	8009b40 <HAL_GPIO_ReadPin>
 8003326:	4603      	mov	r3, r0
 8003328:	2b01      	cmp	r3, #1
 800332a:	d115      	bne.n	8003358 <menu+0x1e98>
 800332c:	4b3d      	ldr	r3, [pc, #244]	; (8003424 <menu+0x1f64>)
 800332e:	781b      	ldrb	r3, [r3, #0]
 8003330:	f083 0301 	eor.w	r3, r3, #1
 8003334:	b2db      	uxtb	r3, r3
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00e      	beq.n	8003358 <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 800333a:	4b41      	ldr	r3, [pc, #260]	; (8003440 <menu+0x1f80>)
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	3301      	adds	r3, #1
 8003340:	b2da      	uxtb	r2, r3
 8003342:	4b3f      	ldr	r3, [pc, #252]	; (8003440 <menu+0x1f80>)
 8003344:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 8003346:	4b3e      	ldr	r3, [pc, #248]	; (8003440 <menu+0x1f80>)
 8003348:	781b      	ldrb	r3, [r3, #0]
 800334a:	2b02      	cmp	r3, #2
 800334c:	d902      	bls.n	8003354 <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 800334e:	4b3c      	ldr	r3, [pc, #240]	; (8003440 <menu+0x1f80>)
 8003350:	2200      	movs	r2, #0
 8003352:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003354:	f002 fe50 	bl	8005ff8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003358:	2104      	movs	r1, #4
 800335a:	4831      	ldr	r0, [pc, #196]	; (8003420 <menu+0x1f60>)
 800335c:	f006 fbf0 	bl	8009b40 <HAL_GPIO_ReadPin>
 8003360:	4603      	mov	r3, r0
 8003362:	2b01      	cmp	r3, #1
 8003364:	d115      	bne.n	8003392 <menu+0x1ed2>
 8003366:	4b2f      	ldr	r3, [pc, #188]	; (8003424 <menu+0x1f64>)
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	f083 0301 	eor.w	r3, r3, #1
 800336e:	b2db      	uxtb	r3, r3
 8003370:	2b00      	cmp	r3, #0
 8003372:	d00e      	beq.n	8003392 <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8003374:	4b32      	ldr	r3, [pc, #200]	; (8003440 <menu+0x1f80>)
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	3b01      	subs	r3, #1
 800337a:	b2da      	uxtb	r2, r3
 800337c:	4b30      	ldr	r3, [pc, #192]	; (8003440 <menu+0x1f80>)
 800337e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8003380:	4b2f      	ldr	r3, [pc, #188]	; (8003440 <menu+0x1f80>)
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	2b03      	cmp	r3, #3
 8003386:	d902      	bls.n	800338e <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 8003388:	4b2d      	ldr	r3, [pc, #180]	; (8003440 <menu+0x1f80>)
 800338a:	2202      	movs	r2, #2
 800338c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800338e:	f002 fe33 	bl	8005ff8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003392:	2108      	movs	r1, #8
 8003394:	4822      	ldr	r0, [pc, #136]	; (8003420 <menu+0x1f60>)
 8003396:	f006 fbd3 	bl	8009b40 <HAL_GPIO_ReadPin>
 800339a:	4603      	mov	r3, r0
 800339c:	2b01      	cmp	r3, #1
 800339e:	d127      	bne.n	80033f0 <menu+0x1f30>
 80033a0:	4b20      	ldr	r3, [pc, #128]	; (8003424 <menu+0x1f64>)
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	f083 0301 	eor.w	r3, r3, #1
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d020      	beq.n	80033f0 <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 80033ae:	4b24      	ldr	r3, [pc, #144]	; (8003440 <menu+0x1f80>)
 80033b0:	781a      	ldrb	r2, [r3, #0]
 80033b2:	4b1e      	ldr	r3, [pc, #120]	; (800342c <menu+0x1f6c>)
 80033b4:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 80033b6:	4b22      	ldr	r3, [pc, #136]	; (8003440 <menu+0x1f80>)
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d003      	beq.n	80033c6 <menu+0x1f06>
 80033be:	4b20      	ldr	r3, [pc, #128]	; (8003440 <menu+0x1f80>)
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d106      	bne.n	80033d4 <menu+0x1f14>
				calismaSekli = 0;
 80033c6:	4b25      	ldr	r3, [pc, #148]	; (800345c <menu+0x1f9c>)
 80033c8:	2200      	movs	r2, #0
 80033ca:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 80033cc:	4b23      	ldr	r3, [pc, #140]	; (800345c <menu+0x1f9c>)
 80033ce:	781a      	ldrb	r2, [r3, #0]
 80033d0:	4b16      	ldr	r3, [pc, #88]	; (800342c <menu+0x1f6c>)
 80033d2:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 80033d4:	4b1a      	ldr	r3, [pc, #104]	; (8003440 <menu+0x1f80>)
 80033d6:	781b      	ldrb	r3, [r3, #0]
 80033d8:	2b01      	cmp	r3, #1
 80033da:	d106      	bne.n	80033ea <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 80033dc:	4b20      	ldr	r3, [pc, #128]	; (8003460 <menu+0x1fa0>)
 80033de:	2201      	movs	r2, #1
 80033e0:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 80033e2:	4b1f      	ldr	r3, [pc, #124]	; (8003460 <menu+0x1fa0>)
 80033e4:	781a      	ldrb	r2, [r3, #0]
 80033e6:	4b11      	ldr	r3, [pc, #68]	; (800342c <menu+0x1f6c>)
 80033e8:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 80033ea:	4b11      	ldr	r3, [pc, #68]	; (8003430 <menu+0x1f70>)
 80033ec:	2201      	movs	r2, #1
 80033ee:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 80033f0:	4b10      	ldr	r3, [pc, #64]	; (8003434 <menu+0x1f74>)
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	2b12      	cmp	r3, #18
 80033f6:	f040 80d5 	bne.w	80035a4 <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 80033fa:	4b11      	ldr	r3, [pc, #68]	; (8003440 <menu+0x1f80>)
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d13c      	bne.n	800347c <menu+0x1fbc>
			if(dilSecim == 0) {
 8003402:	4b05      	ldr	r3, [pc, #20]	; (8003418 <menu+0x1f58>)
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d12e      	bne.n	8003468 <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 800340a:	4a16      	ldr	r2, [pc, #88]	; (8003464 <menu+0x1fa4>)
 800340c:	2101      	movs	r1, #1
 800340e:	2001      	movs	r0, #1
 8003410:	f7fd f92a 	bl	8000668 <lcd_print>
 8003414:	e048      	b.n	80034a8 <menu+0x1fe8>
 8003416:	bf00      	nop
 8003418:	20000d56 	.word	0x20000d56
 800341c:	0800db38 	.word	0x0800db38
 8003420:	40010800 	.word	0x40010800
 8003424:	20000d64 	.word	0x20000d64
 8003428:	20000d43 	.word	0x20000d43
 800342c:	20000c34 	.word	0x20000c34
 8003430:	20000d61 	.word	0x20000d61
 8003434:	20000d35 	.word	0x20000d35
 8003438:	0800deb4 	.word	0x0800deb4
 800343c:	0800dec8 	.word	0x0800dec8
 8003440:	20000d44 	.word	0x20000d44
 8003444:	0800dedc 	.word	0x0800dedc
 8003448:	0800deec 	.word	0x0800deec
 800344c:	0800defc 	.word	0x0800defc
 8003450:	0800df0c 	.word	0x0800df0c
 8003454:	0800dac4 	.word	0x0800dac4
 8003458:	0800dad8 	.word	0x0800dad8
 800345c:	20000d36 	.word	0x20000d36
 8003460:	20000d47 	.word	0x20000d47
 8003464:	0800df1c 	.word	0x0800df1c
			} else if(dilSecim == 1) {
 8003468:	4b7b      	ldr	r3, [pc, #492]	; (8003658 <menu+0x2198>)
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	2b01      	cmp	r3, #1
 800346e:	d11b      	bne.n	80034a8 <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 8003470:	4a7a      	ldr	r2, [pc, #488]	; (800365c <menu+0x219c>)
 8003472:	2101      	movs	r1, #1
 8003474:	2001      	movs	r0, #1
 8003476:	f7fd f8f7 	bl	8000668 <lcd_print>
 800347a:	e015      	b.n	80034a8 <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 800347c:	4b78      	ldr	r3, [pc, #480]	; (8003660 <menu+0x21a0>)
 800347e:	781b      	ldrb	r3, [r3, #0]
 8003480:	2b01      	cmp	r3, #1
 8003482:	d111      	bne.n	80034a8 <menu+0x1fe8>
			if(dilSecim == 0){
 8003484:	4b74      	ldr	r3, [pc, #464]	; (8003658 <menu+0x2198>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d104      	bne.n	8003496 <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 800348c:	4a75      	ldr	r2, [pc, #468]	; (8003664 <menu+0x21a4>)
 800348e:	2101      	movs	r1, #1
 8003490:	2001      	movs	r0, #1
 8003492:	f7fd f8e9 	bl	8000668 <lcd_print>
			}
			if(dilSecim == 1){
 8003496:	4b70      	ldr	r3, [pc, #448]	; (8003658 <menu+0x2198>)
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	2b01      	cmp	r3, #1
 800349c:	d104      	bne.n	80034a8 <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 800349e:	4a72      	ldr	r2, [pc, #456]	; (8003668 <menu+0x21a8>)
 80034a0:	2101      	movs	r1, #1
 80034a2:	2001      	movs	r0, #1
 80034a4:	f7fd f8e0 	bl	8000668 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 80034a8:	4b70      	ldr	r3, [pc, #448]	; (800366c <menu+0x21ac>)
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d113      	bne.n	80034d8 <menu+0x2018>
			if(dilSecim == 0) {
 80034b0:	4b69      	ldr	r3, [pc, #420]	; (8003658 <menu+0x2198>)
 80034b2:	781b      	ldrb	r3, [r3, #0]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d105      	bne.n	80034c4 <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 80034b8:	4a6d      	ldr	r2, [pc, #436]	; (8003670 <menu+0x21b0>)
 80034ba:	2101      	movs	r1, #1
 80034bc:	2002      	movs	r0, #2
 80034be:	f7fd f8d3 	bl	8000668 <lcd_print>
 80034c2:	e020      	b.n	8003506 <menu+0x2046>
			} else if(dilSecim == 1){
 80034c4:	4b64      	ldr	r3, [pc, #400]	; (8003658 <menu+0x2198>)
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	d11c      	bne.n	8003506 <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 80034cc:	4a69      	ldr	r2, [pc, #420]	; (8003674 <menu+0x21b4>)
 80034ce:	2101      	movs	r1, #1
 80034d0:	2002      	movs	r0, #2
 80034d2:	f7fd f8c9 	bl	8000668 <lcd_print>
 80034d6:	e016      	b.n	8003506 <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 80034d8:	4b64      	ldr	r3, [pc, #400]	; (800366c <menu+0x21ac>)
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d112      	bne.n	8003506 <menu+0x2046>
			if(dilSecim == 0){
 80034e0:	4b5d      	ldr	r3, [pc, #372]	; (8003658 <menu+0x2198>)
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d105      	bne.n	80034f4 <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 80034e8:	4a63      	ldr	r2, [pc, #396]	; (8003678 <menu+0x21b8>)
 80034ea:	2101      	movs	r1, #1
 80034ec:	2002      	movs	r0, #2
 80034ee:	f7fd f8bb 	bl	8000668 <lcd_print>
 80034f2:	e008      	b.n	8003506 <menu+0x2046>
			} else if(dilSecim == 1){
 80034f4:	4b58      	ldr	r3, [pc, #352]	; (8003658 <menu+0x2198>)
 80034f6:	781b      	ldrb	r3, [r3, #0]
 80034f8:	2b01      	cmp	r3, #1
 80034fa:	d104      	bne.n	8003506 <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 80034fc:	4a5f      	ldr	r2, [pc, #380]	; (800367c <menu+0x21bc>)
 80034fe:	2101      	movs	r1, #1
 8003500:	2002      	movs	r0, #2
 8003502:	f7fd f8b1 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003506:	2102      	movs	r1, #2
 8003508:	485d      	ldr	r0, [pc, #372]	; (8003680 <menu+0x21c0>)
 800350a:	f006 fb19 	bl	8009b40 <HAL_GPIO_ReadPin>
 800350e:	4603      	mov	r3, r0
 8003510:	2b01      	cmp	r3, #1
 8003512:	d115      	bne.n	8003540 <menu+0x2080>
 8003514:	4b5b      	ldr	r3, [pc, #364]	; (8003684 <menu+0x21c4>)
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	f083 0301 	eor.w	r3, r3, #1
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00e      	beq.n	8003540 <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 8003522:	4b52      	ldr	r3, [pc, #328]	; (800366c <menu+0x21ac>)
 8003524:	781b      	ldrb	r3, [r3, #0]
 8003526:	3301      	adds	r3, #1
 8003528:	b2da      	uxtb	r2, r3
 800352a:	4b50      	ldr	r3, [pc, #320]	; (800366c <menu+0x21ac>)
 800352c:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 800352e:	4b4f      	ldr	r3, [pc, #316]	; (800366c <menu+0x21ac>)
 8003530:	781b      	ldrb	r3, [r3, #0]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d902      	bls.n	800353c <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 8003536:	4b4d      	ldr	r3, [pc, #308]	; (800366c <menu+0x21ac>)
 8003538:	2200      	movs	r2, #0
 800353a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800353c:	f002 fd5c 	bl	8005ff8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003540:	2104      	movs	r1, #4
 8003542:	484f      	ldr	r0, [pc, #316]	; (8003680 <menu+0x21c0>)
 8003544:	f006 fafc 	bl	8009b40 <HAL_GPIO_ReadPin>
 8003548:	4603      	mov	r3, r0
 800354a:	2b01      	cmp	r3, #1
 800354c:	d115      	bne.n	800357a <menu+0x20ba>
 800354e:	4b4d      	ldr	r3, [pc, #308]	; (8003684 <menu+0x21c4>)
 8003550:	781b      	ldrb	r3, [r3, #0]
 8003552:	f083 0301 	eor.w	r3, r3, #1
 8003556:	b2db      	uxtb	r3, r3
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00e      	beq.n	800357a <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 800355c:	4b43      	ldr	r3, [pc, #268]	; (800366c <menu+0x21ac>)
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	3b01      	subs	r3, #1
 8003562:	b2da      	uxtb	r2, r3
 8003564:	4b41      	ldr	r3, [pc, #260]	; (800366c <menu+0x21ac>)
 8003566:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8003568:	4b40      	ldr	r3, [pc, #256]	; (800366c <menu+0x21ac>)
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d002      	beq.n	8003576 <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 8003570:	4b3e      	ldr	r3, [pc, #248]	; (800366c <menu+0x21ac>)
 8003572:	2201      	movs	r2, #1
 8003574:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003576:	f002 fd3f 	bl	8005ff8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800357a:	2108      	movs	r1, #8
 800357c:	4840      	ldr	r0, [pc, #256]	; (8003680 <menu+0x21c0>)
 800357e:	f006 fadf 	bl	8009b40 <HAL_GPIO_ReadPin>
 8003582:	4603      	mov	r3, r0
 8003584:	2b01      	cmp	r3, #1
 8003586:	d10d      	bne.n	80035a4 <menu+0x20e4>
 8003588:	4b3e      	ldr	r3, [pc, #248]	; (8003684 <menu+0x21c4>)
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	f083 0301 	eor.w	r3, r3, #1
 8003590:	b2db      	uxtb	r3, r3
 8003592:	2b00      	cmp	r3, #0
 8003594:	d006      	beq.n	80035a4 <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 8003596:	4b35      	ldr	r3, [pc, #212]	; (800366c <menu+0x21ac>)
 8003598:	781a      	ldrb	r2, [r3, #0]
 800359a:	4b3b      	ldr	r3, [pc, #236]	; (8003688 <menu+0x21c8>)
 800359c:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 800359e:	4b3b      	ldr	r3, [pc, #236]	; (800368c <menu+0x21cc>)
 80035a0:	2201      	movs	r2, #1
 80035a2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 80035a4:	4b3a      	ldr	r3, [pc, #232]	; (8003690 <menu+0x21d0>)
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	2b13      	cmp	r3, #19
 80035aa:	f040 80d5 	bne.w	8003758 <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 80035ae:	4b2c      	ldr	r3, [pc, #176]	; (8003660 <menu+0x21a0>)
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	2b02      	cmp	r3, #2
 80035b4:	d113      	bne.n	80035de <menu+0x211e>
			if(dilSecim == 0) {
 80035b6:	4b28      	ldr	r3, [pc, #160]	; (8003658 <menu+0x2198>)
 80035b8:	781b      	ldrb	r3, [r3, #0]
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d105      	bne.n	80035ca <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 80035be:	4a35      	ldr	r2, [pc, #212]	; (8003694 <menu+0x21d4>)
 80035c0:	2101      	movs	r1, #1
 80035c2:	2001      	movs	r0, #1
 80035c4:	f7fd f850 	bl	8000668 <lcd_print>
 80035c8:	e01f      	b.n	800360a <menu+0x214a>
			} else if(dilSecim == 1) {
 80035ca:	4b23      	ldr	r3, [pc, #140]	; (8003658 <menu+0x2198>)
 80035cc:	781b      	ldrb	r3, [r3, #0]
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d11b      	bne.n	800360a <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 80035d2:	4a31      	ldr	r2, [pc, #196]	; (8003698 <menu+0x21d8>)
 80035d4:	2101      	movs	r1, #1
 80035d6:	2001      	movs	r0, #1
 80035d8:	f7fd f846 	bl	8000668 <lcd_print>
 80035dc:	e015      	b.n	800360a <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80035de:	4b20      	ldr	r3, [pc, #128]	; (8003660 <menu+0x21a0>)
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d111      	bne.n	800360a <menu+0x214a>
			if(dilSecim == 0) {
 80035e6:	4b1c      	ldr	r3, [pc, #112]	; (8003658 <menu+0x2198>)
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d104      	bne.n	80035f8 <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 80035ee:	4a2b      	ldr	r2, [pc, #172]	; (800369c <menu+0x21dc>)
 80035f0:	2101      	movs	r1, #1
 80035f2:	2001      	movs	r0, #1
 80035f4:	f7fd f838 	bl	8000668 <lcd_print>
			}
			if(dilSecim == 1) {
 80035f8:	4b17      	ldr	r3, [pc, #92]	; (8003658 <menu+0x2198>)
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d104      	bne.n	800360a <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 8003600:	4a27      	ldr	r2, [pc, #156]	; (80036a0 <menu+0x21e0>)
 8003602:	2101      	movs	r1, #1
 8003604:	2001      	movs	r0, #1
 8003606:	f7fd f82f 	bl	8000668 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 800360a:	4b26      	ldr	r3, [pc, #152]	; (80036a4 <menu+0x21e4>)
 800360c:	781b      	ldrb	r3, [r3, #0]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d113      	bne.n	800363a <menu+0x217a>
			if(dilSecim == 0) {
 8003612:	4b11      	ldr	r3, [pc, #68]	; (8003658 <menu+0x2198>)
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d105      	bne.n	8003626 <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 800361a:	4a15      	ldr	r2, [pc, #84]	; (8003670 <menu+0x21b0>)
 800361c:	2101      	movs	r1, #1
 800361e:	2002      	movs	r0, #2
 8003620:	f7fd f822 	bl	8000668 <lcd_print>
 8003624:	e049      	b.n	80036ba <menu+0x21fa>
			} else if(dilSecim == 1) {
 8003626:	4b0c      	ldr	r3, [pc, #48]	; (8003658 <menu+0x2198>)
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	2b01      	cmp	r3, #1
 800362c:	d145      	bne.n	80036ba <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 800362e:	4a11      	ldr	r2, [pc, #68]	; (8003674 <menu+0x21b4>)
 8003630:	2101      	movs	r1, #1
 8003632:	2002      	movs	r0, #2
 8003634:	f7fd f818 	bl	8000668 <lcd_print>
 8003638:	e03f      	b.n	80036ba <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 800363a:	4b1a      	ldr	r3, [pc, #104]	; (80036a4 <menu+0x21e4>)
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d13b      	bne.n	80036ba <menu+0x21fa>
			if(dilSecim == 0) {
 8003642:	4b05      	ldr	r3, [pc, #20]	; (8003658 <menu+0x2198>)
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d12e      	bne.n	80036a8 <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 800364a:	4a0b      	ldr	r2, [pc, #44]	; (8003678 <menu+0x21b8>)
 800364c:	2101      	movs	r1, #1
 800364e:	2002      	movs	r0, #2
 8003650:	f7fd f80a 	bl	8000668 <lcd_print>
 8003654:	e031      	b.n	80036ba <menu+0x21fa>
 8003656:	bf00      	nop
 8003658:	20000d56 	.word	0x20000d56
 800365c:	0800df30 	.word	0x0800df30
 8003660:	20000d44 	.word	0x20000d44
 8003664:	0800df40 	.word	0x0800df40
 8003668:	0800df54 	.word	0x0800df54
 800366c:	20000d45 	.word	0x20000d45
 8003670:	0800dac4 	.word	0x0800dac4
 8003674:	0800dad8 	.word	0x0800dad8
 8003678:	0800db24 	.word	0x0800db24
 800367c:	0800db38 	.word	0x0800db38
 8003680:	40010800 	.word	0x40010800
 8003684:	20000d64 	.word	0x20000d64
 8003688:	20000c34 	.word	0x20000c34
 800368c:	20000d61 	.word	0x20000d61
 8003690:	20000d35 	.word	0x20000d35
 8003694:	0800df68 	.word	0x0800df68
 8003698:	0800df7c 	.word	0x0800df7c
 800369c:	0800df90 	.word	0x0800df90
 80036a0:	0800dfa4 	.word	0x0800dfa4
 80036a4:	20000d46 	.word	0x20000d46
			} else if(dilSecim == 1) {
 80036a8:	4b90      	ldr	r3, [pc, #576]	; (80038ec <menu+0x242c>)
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d104      	bne.n	80036ba <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 80036b0:	4a8f      	ldr	r2, [pc, #572]	; (80038f0 <menu+0x2430>)
 80036b2:	2101      	movs	r1, #1
 80036b4:	2002      	movs	r0, #2
 80036b6:	f7fc ffd7 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80036ba:	2102      	movs	r1, #2
 80036bc:	488d      	ldr	r0, [pc, #564]	; (80038f4 <menu+0x2434>)
 80036be:	f006 fa3f 	bl	8009b40 <HAL_GPIO_ReadPin>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d115      	bne.n	80036f4 <menu+0x2234>
 80036c8:	4b8b      	ldr	r3, [pc, #556]	; (80038f8 <menu+0x2438>)
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	f083 0301 	eor.w	r3, r3, #1
 80036d0:	b2db      	uxtb	r3, r3
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d00e      	beq.n	80036f4 <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 80036d6:	4b89      	ldr	r3, [pc, #548]	; (80038fc <menu+0x243c>)
 80036d8:	781b      	ldrb	r3, [r3, #0]
 80036da:	3301      	adds	r3, #1
 80036dc:	b2da      	uxtb	r2, r3
 80036de:	4b87      	ldr	r3, [pc, #540]	; (80038fc <menu+0x243c>)
 80036e0:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 80036e2:	4b86      	ldr	r3, [pc, #536]	; (80038fc <menu+0x243c>)
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d902      	bls.n	80036f0 <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 80036ea:	4b84      	ldr	r3, [pc, #528]	; (80038fc <menu+0x243c>)
 80036ec:	2200      	movs	r2, #0
 80036ee:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80036f0:	f002 fc82 	bl	8005ff8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80036f4:	2104      	movs	r1, #4
 80036f6:	487f      	ldr	r0, [pc, #508]	; (80038f4 <menu+0x2434>)
 80036f8:	f006 fa22 	bl	8009b40 <HAL_GPIO_ReadPin>
 80036fc:	4603      	mov	r3, r0
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d115      	bne.n	800372e <menu+0x226e>
 8003702:	4b7d      	ldr	r3, [pc, #500]	; (80038f8 <menu+0x2438>)
 8003704:	781b      	ldrb	r3, [r3, #0]
 8003706:	f083 0301 	eor.w	r3, r3, #1
 800370a:	b2db      	uxtb	r3, r3
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00e      	beq.n	800372e <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8003710:	4b7a      	ldr	r3, [pc, #488]	; (80038fc <menu+0x243c>)
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	3b01      	subs	r3, #1
 8003716:	b2da      	uxtb	r2, r3
 8003718:	4b78      	ldr	r3, [pc, #480]	; (80038fc <menu+0x243c>)
 800371a:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 800371c:	4b77      	ldr	r3, [pc, #476]	; (80038fc <menu+0x243c>)
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d002      	beq.n	800372a <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 8003724:	4b75      	ldr	r3, [pc, #468]	; (80038fc <menu+0x243c>)
 8003726:	2201      	movs	r2, #1
 8003728:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800372a:	f002 fc65 	bl	8005ff8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800372e:	2108      	movs	r1, #8
 8003730:	4870      	ldr	r0, [pc, #448]	; (80038f4 <menu+0x2434>)
 8003732:	f006 fa05 	bl	8009b40 <HAL_GPIO_ReadPin>
 8003736:	4603      	mov	r3, r0
 8003738:	2b01      	cmp	r3, #1
 800373a:	d10d      	bne.n	8003758 <menu+0x2298>
 800373c:	4b6e      	ldr	r3, [pc, #440]	; (80038f8 <menu+0x2438>)
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	f083 0301 	eor.w	r3, r3, #1
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	d006      	beq.n	8003758 <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 800374a:	4b6c      	ldr	r3, [pc, #432]	; (80038fc <menu+0x243c>)
 800374c:	781a      	ldrb	r2, [r3, #0]
 800374e:	4b6c      	ldr	r3, [pc, #432]	; (8003900 <menu+0x2440>)
 8003750:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8003752:	4b6c      	ldr	r3, [pc, #432]	; (8003904 <menu+0x2444>)
 8003754:	2201      	movs	r2, #1
 8003756:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8003758:	4b6b      	ldr	r3, [pc, #428]	; (8003908 <menu+0x2448>)
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	2b14      	cmp	r3, #20
 800375e:	f040 80b5 	bne.w	80038cc <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 8003762:	4b6a      	ldr	r3, [pc, #424]	; (800390c <menu+0x244c>)
 8003764:	781b      	ldrb	r3, [r3, #0]
 8003766:	2b01      	cmp	r3, #1
 8003768:	d113      	bne.n	8003792 <menu+0x22d2>
			if(dilSecim == 0) {
 800376a:	4b60      	ldr	r3, [pc, #384]	; (80038ec <menu+0x242c>)
 800376c:	781b      	ldrb	r3, [r3, #0]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d105      	bne.n	800377e <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 8003772:	4a67      	ldr	r2, [pc, #412]	; (8003910 <menu+0x2450>)
 8003774:	2101      	movs	r1, #1
 8003776:	2001      	movs	r0, #1
 8003778:	f7fc ff76 	bl	8000668 <lcd_print>
 800377c:	e020      	b.n	80037c0 <menu+0x2300>
			} else if(dilSecim == 1) {
 800377e:	4b5b      	ldr	r3, [pc, #364]	; (80038ec <menu+0x242c>)
 8003780:	781b      	ldrb	r3, [r3, #0]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d11c      	bne.n	80037c0 <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 8003786:	4a63      	ldr	r2, [pc, #396]	; (8003914 <menu+0x2454>)
 8003788:	2101      	movs	r1, #1
 800378a:	2001      	movs	r0, #1
 800378c:	f7fc ff6c 	bl	8000668 <lcd_print>
 8003790:	e016      	b.n	80037c0 <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 8003792:	4b5e      	ldr	r3, [pc, #376]	; (800390c <menu+0x244c>)
 8003794:	781b      	ldrb	r3, [r3, #0]
 8003796:	2b02      	cmp	r3, #2
 8003798:	d112      	bne.n	80037c0 <menu+0x2300>
			if(dilSecim == 0) {
 800379a:	4b54      	ldr	r3, [pc, #336]	; (80038ec <menu+0x242c>)
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d105      	bne.n	80037ae <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 80037a2:	4a5d      	ldr	r2, [pc, #372]	; (8003918 <menu+0x2458>)
 80037a4:	2101      	movs	r1, #1
 80037a6:	2001      	movs	r0, #1
 80037a8:	f7fc ff5e 	bl	8000668 <lcd_print>
 80037ac:	e008      	b.n	80037c0 <menu+0x2300>
			} else if(dilSecim == 1) {
 80037ae:	4b4f      	ldr	r3, [pc, #316]	; (80038ec <menu+0x242c>)
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	2b01      	cmp	r3, #1
 80037b4:	d104      	bne.n	80037c0 <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 80037b6:	4a59      	ldr	r2, [pc, #356]	; (800391c <menu+0x245c>)
 80037b8:	2101      	movs	r1, #1
 80037ba:	2001      	movs	r0, #1
 80037bc:	f7fc ff54 	bl	8000668 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 80037c0:	4b57      	ldr	r3, [pc, #348]	; (8003920 <menu+0x2460>)
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d113      	bne.n	80037f0 <menu+0x2330>
			if(dilSecim == 0) {
 80037c8:	4b48      	ldr	r3, [pc, #288]	; (80038ec <menu+0x242c>)
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d105      	bne.n	80037dc <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 80037d0:	4a54      	ldr	r2, [pc, #336]	; (8003924 <menu+0x2464>)
 80037d2:	2101      	movs	r1, #1
 80037d4:	2002      	movs	r0, #2
 80037d6:	f7fc ff47 	bl	8000668 <lcd_print>
 80037da:	e020      	b.n	800381e <menu+0x235e>
			} else if(dilSecim == 1) {
 80037dc:	4b43      	ldr	r3, [pc, #268]	; (80038ec <menu+0x242c>)
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d11c      	bne.n	800381e <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 80037e4:	4a50      	ldr	r2, [pc, #320]	; (8003928 <menu+0x2468>)
 80037e6:	2101      	movs	r1, #1
 80037e8:	2002      	movs	r0, #2
 80037ea:	f7fc ff3d 	bl	8000668 <lcd_print>
 80037ee:	e016      	b.n	800381e <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 80037f0:	4b4b      	ldr	r3, [pc, #300]	; (8003920 <menu+0x2460>)
 80037f2:	781b      	ldrb	r3, [r3, #0]
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d112      	bne.n	800381e <menu+0x235e>
			if(dilSecim == 0) {
 80037f8:	4b3c      	ldr	r3, [pc, #240]	; (80038ec <menu+0x242c>)
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d105      	bne.n	800380c <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 8003800:	4a4a      	ldr	r2, [pc, #296]	; (800392c <menu+0x246c>)
 8003802:	2101      	movs	r1, #1
 8003804:	2002      	movs	r0, #2
 8003806:	f7fc ff2f 	bl	8000668 <lcd_print>
 800380a:	e008      	b.n	800381e <menu+0x235e>
			} else if(dilSecim == 1) {
 800380c:	4b37      	ldr	r3, [pc, #220]	; (80038ec <menu+0x242c>)
 800380e:	781b      	ldrb	r3, [r3, #0]
 8003810:	2b01      	cmp	r3, #1
 8003812:	d104      	bne.n	800381e <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 8003814:	4a46      	ldr	r2, [pc, #280]	; (8003930 <menu+0x2470>)
 8003816:	2101      	movs	r1, #1
 8003818:	2002      	movs	r0, #2
 800381a:	f7fc ff25 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 800381e:	2102      	movs	r1, #2
 8003820:	4834      	ldr	r0, [pc, #208]	; (80038f4 <menu+0x2434>)
 8003822:	f006 f98d 	bl	8009b40 <HAL_GPIO_ReadPin>
 8003826:	4603      	mov	r3, r0
 8003828:	2b01      	cmp	r3, #1
 800382a:	d119      	bne.n	8003860 <menu+0x23a0>
 800382c:	4b32      	ldr	r3, [pc, #200]	; (80038f8 <menu+0x2438>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	f083 0301 	eor.w	r3, r3, #1
 8003834:	b2db      	uxtb	r3, r3
 8003836:	2b00      	cmp	r3, #0
 8003838:	d012      	beq.n	8003860 <menu+0x23a0>
 800383a:	4b34      	ldr	r3, [pc, #208]	; (800390c <menu+0x244c>)
 800383c:	781b      	ldrb	r3, [r3, #0]
 800383e:	2b02      	cmp	r3, #2
 8003840:	d10e      	bne.n	8003860 <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8003842:	4b37      	ldr	r3, [pc, #220]	; (8003920 <menu+0x2460>)
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	3301      	adds	r3, #1
 8003848:	b2da      	uxtb	r2, r3
 800384a:	4b35      	ldr	r3, [pc, #212]	; (8003920 <menu+0x2460>)
 800384c:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 800384e:	4b34      	ldr	r3, [pc, #208]	; (8003920 <menu+0x2460>)
 8003850:	781b      	ldrb	r3, [r3, #0]
 8003852:	2b01      	cmp	r3, #1
 8003854:	d902      	bls.n	800385c <menu+0x239c>
				devirmeSilindirTipi = 0;
 8003856:	4b32      	ldr	r3, [pc, #200]	; (8003920 <menu+0x2460>)
 8003858:	2200      	movs	r2, #0
 800385a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800385c:	f002 fbcc 	bl	8005ff8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003860:	2104      	movs	r1, #4
 8003862:	4824      	ldr	r0, [pc, #144]	; (80038f4 <menu+0x2434>)
 8003864:	f006 f96c 	bl	8009b40 <HAL_GPIO_ReadPin>
 8003868:	4603      	mov	r3, r0
 800386a:	2b01      	cmp	r3, #1
 800386c:	d119      	bne.n	80038a2 <menu+0x23e2>
 800386e:	4b22      	ldr	r3, [pc, #136]	; (80038f8 <menu+0x2438>)
 8003870:	781b      	ldrb	r3, [r3, #0]
 8003872:	f083 0301 	eor.w	r3, r3, #1
 8003876:	b2db      	uxtb	r3, r3
 8003878:	2b00      	cmp	r3, #0
 800387a:	d012      	beq.n	80038a2 <menu+0x23e2>
 800387c:	4b23      	ldr	r3, [pc, #140]	; (800390c <menu+0x244c>)
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	2b02      	cmp	r3, #2
 8003882:	d10e      	bne.n	80038a2 <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8003884:	4b26      	ldr	r3, [pc, #152]	; (8003920 <menu+0x2460>)
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	3b01      	subs	r3, #1
 800388a:	b2da      	uxtb	r2, r3
 800388c:	4b24      	ldr	r3, [pc, #144]	; (8003920 <menu+0x2460>)
 800388e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8003890:	4b23      	ldr	r3, [pc, #140]	; (8003920 <menu+0x2460>)
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d002      	beq.n	800389e <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 8003898:	4b21      	ldr	r3, [pc, #132]	; (8003920 <menu+0x2460>)
 800389a:	2201      	movs	r2, #1
 800389c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800389e:	f002 fbab 	bl	8005ff8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80038a2:	2108      	movs	r1, #8
 80038a4:	4813      	ldr	r0, [pc, #76]	; (80038f4 <menu+0x2434>)
 80038a6:	f006 f94b 	bl	8009b40 <HAL_GPIO_ReadPin>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d10d      	bne.n	80038cc <menu+0x240c>
 80038b0:	4b11      	ldr	r3, [pc, #68]	; (80038f8 <menu+0x2438>)
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	f083 0301 	eor.w	r3, r3, #1
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d006      	beq.n	80038cc <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 80038be:	4b18      	ldr	r3, [pc, #96]	; (8003920 <menu+0x2460>)
 80038c0:	781a      	ldrb	r2, [r3, #0]
 80038c2:	4b0f      	ldr	r3, [pc, #60]	; (8003900 <menu+0x2440>)
 80038c4:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 80038c6:	4b0f      	ldr	r3, [pc, #60]	; (8003904 <menu+0x2444>)
 80038c8:	2201      	movs	r2, #1
 80038ca:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 80038cc:	4b0e      	ldr	r3, [pc, #56]	; (8003908 <menu+0x2448>)
 80038ce:	781b      	ldrb	r3, [r3, #0]
 80038d0:	2b15      	cmp	r3, #21
 80038d2:	f040 80c2 	bne.w	8003a5a <menu+0x259a>
		if(dilSecim == 0) {
 80038d6:	4b05      	ldr	r3, [pc, #20]	; (80038ec <menu+0x242c>)
 80038d8:	781b      	ldrb	r3, [r3, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d12c      	bne.n	8003938 <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 80038de:	4a15      	ldr	r2, [pc, #84]	; (8003934 <menu+0x2474>)
 80038e0:	2101      	movs	r1, #1
 80038e2:	2001      	movs	r0, #1
 80038e4:	f7fc fec0 	bl	8000668 <lcd_print>
 80038e8:	e02f      	b.n	800394a <menu+0x248a>
 80038ea:	bf00      	nop
 80038ec:	20000d56 	.word	0x20000d56
 80038f0:	0800db38 	.word	0x0800db38
 80038f4:	40010800 	.word	0x40010800
 80038f8:	20000d64 	.word	0x20000d64
 80038fc:	20000d46 	.word	0x20000d46
 8003900:	20000c34 	.word	0x20000c34
 8003904:	20000d61 	.word	0x20000d61
 8003908:	20000d35 	.word	0x20000d35
 800390c:	20000d44 	.word	0x20000d44
 8003910:	0800dfb8 	.word	0x0800dfb8
 8003914:	0800dfcc 	.word	0x0800dfcc
 8003918:	0800dfe0 	.word	0x0800dfe0
 800391c:	0800dff4 	.word	0x0800dff4
 8003920:	20000d47 	.word	0x20000d47
 8003924:	0800e008 	.word	0x0800e008
 8003928:	0800e01c 	.word	0x0800e01c
 800392c:	0800e02c 	.word	0x0800e02c
 8003930:	0800e040 	.word	0x0800e040
 8003934:	0800e050 	.word	0x0800e050
		} else if(dilSecim == 1) {
 8003938:	4b9c      	ldr	r3, [pc, #624]	; (8003bac <menu+0x26ec>)
 800393a:	781b      	ldrb	r3, [r3, #0]
 800393c:	2b01      	cmp	r3, #1
 800393e:	d104      	bne.n	800394a <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 8003940:	4a9b      	ldr	r2, [pc, #620]	; (8003bb0 <menu+0x26f0>)
 8003942:	2101      	movs	r1, #1
 8003944:	2001      	movs	r0, #1
 8003946:	f7fc fe8f 	bl	8000668 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 800394a:	4b9a      	ldr	r3, [pc, #616]	; (8003bb4 <menu+0x26f4>)
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d112      	bne.n	8003978 <menu+0x24b8>
			if(dilSecim == 0) {
 8003952:	4b96      	ldr	r3, [pc, #600]	; (8003bac <menu+0x26ec>)
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d104      	bne.n	8003964 <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 800395a:	4a97      	ldr	r2, [pc, #604]	; (8003bb8 <menu+0x26f8>)
 800395c:	2101      	movs	r1, #1
 800395e:	2002      	movs	r0, #2
 8003960:	f7fc fe82 	bl	8000668 <lcd_print>
			}
			if(dilSecim == 1) {
 8003964:	4b91      	ldr	r3, [pc, #580]	; (8003bac <menu+0x26ec>)
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	2b01      	cmp	r3, #1
 800396a:	d11c      	bne.n	80039a6 <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 800396c:	4a93      	ldr	r2, [pc, #588]	; (8003bbc <menu+0x26fc>)
 800396e:	2101      	movs	r1, #1
 8003970:	2002      	movs	r0, #2
 8003972:	f7fc fe79 	bl	8000668 <lcd_print>
 8003976:	e016      	b.n	80039a6 <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 8003978:	4b8e      	ldr	r3, [pc, #568]	; (8003bb4 <menu+0x26f4>)
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	2b01      	cmp	r3, #1
 800397e:	d112      	bne.n	80039a6 <menu+0x24e6>
			if(dilSecim == 0) {
 8003980:	4b8a      	ldr	r3, [pc, #552]	; (8003bac <menu+0x26ec>)
 8003982:	781b      	ldrb	r3, [r3, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d105      	bne.n	8003994 <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 8003988:	4a8d      	ldr	r2, [pc, #564]	; (8003bc0 <menu+0x2700>)
 800398a:	2101      	movs	r1, #1
 800398c:	2002      	movs	r0, #2
 800398e:	f7fc fe6b 	bl	8000668 <lcd_print>
 8003992:	e008      	b.n	80039a6 <menu+0x24e6>
			} else if(dilSecim == 1) {
 8003994:	4b85      	ldr	r3, [pc, #532]	; (8003bac <menu+0x26ec>)
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	2b01      	cmp	r3, #1
 800399a:	d104      	bne.n	80039a6 <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 800399c:	4a89      	ldr	r2, [pc, #548]	; (8003bc4 <menu+0x2704>)
 800399e:	2101      	movs	r1, #1
 80039a0:	2002      	movs	r0, #2
 80039a2:	f7fc fe61 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80039a6:	2102      	movs	r1, #2
 80039a8:	4887      	ldr	r0, [pc, #540]	; (8003bc8 <menu+0x2708>)
 80039aa:	f006 f8c9 	bl	8009b40 <HAL_GPIO_ReadPin>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d115      	bne.n	80039e0 <menu+0x2520>
 80039b4:	4b85      	ldr	r3, [pc, #532]	; (8003bcc <menu+0x270c>)
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	f083 0301 	eor.w	r3, r3, #1
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00e      	beq.n	80039e0 <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 80039c2:	4b7c      	ldr	r3, [pc, #496]	; (8003bb4 <menu+0x26f4>)
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	3301      	adds	r3, #1
 80039c8:	b2da      	uxtb	r2, r3
 80039ca:	4b7a      	ldr	r3, [pc, #488]	; (8003bb4 <menu+0x26f4>)
 80039cc:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 80039ce:	4b79      	ldr	r3, [pc, #484]	; (8003bb4 <menu+0x26f4>)
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d902      	bls.n	80039dc <menu+0x251c>
				platformSilindirTipi = 0;
 80039d6:	4b77      	ldr	r3, [pc, #476]	; (8003bb4 <menu+0x26f4>)
 80039d8:	2200      	movs	r2, #0
 80039da:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80039dc:	f002 fb0c 	bl	8005ff8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80039e0:	2104      	movs	r1, #4
 80039e2:	4879      	ldr	r0, [pc, #484]	; (8003bc8 <menu+0x2708>)
 80039e4:	f006 f8ac 	bl	8009b40 <HAL_GPIO_ReadPin>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d115      	bne.n	8003a1a <menu+0x255a>
 80039ee:	4b77      	ldr	r3, [pc, #476]	; (8003bcc <menu+0x270c>)
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	f083 0301 	eor.w	r3, r3, #1
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00e      	beq.n	8003a1a <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 80039fc:	4b6d      	ldr	r3, [pc, #436]	; (8003bb4 <menu+0x26f4>)
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	3b01      	subs	r3, #1
 8003a02:	b2da      	uxtb	r2, r3
 8003a04:	4b6b      	ldr	r3, [pc, #428]	; (8003bb4 <menu+0x26f4>)
 8003a06:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8003a08:	4b6a      	ldr	r3, [pc, #424]	; (8003bb4 <menu+0x26f4>)
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d002      	beq.n	8003a16 <menu+0x2556>
		   		platformSilindirTipi = 1;
 8003a10:	4b68      	ldr	r3, [pc, #416]	; (8003bb4 <menu+0x26f4>)
 8003a12:	2201      	movs	r2, #1
 8003a14:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003a16:	f002 faef 	bl	8005ff8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a1a:	2108      	movs	r1, #8
 8003a1c:	486a      	ldr	r0, [pc, #424]	; (8003bc8 <menu+0x2708>)
 8003a1e:	f006 f88f 	bl	8009b40 <HAL_GPIO_ReadPin>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d118      	bne.n	8003a5a <menu+0x259a>
 8003a28:	4b68      	ldr	r3, [pc, #416]	; (8003bcc <menu+0x270c>)
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	f083 0301 	eor.w	r3, r3, #1
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d011      	beq.n	8003a5a <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 8003a36:	4b5f      	ldr	r3, [pc, #380]	; (8003bb4 <menu+0x26f4>)
 8003a38:	781a      	ldrb	r2, [r3, #0]
 8003a3a:	4b65      	ldr	r3, [pc, #404]	; (8003bd0 <menu+0x2710>)
 8003a3c:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8003a3e:	4b5d      	ldr	r3, [pc, #372]	; (8003bb4 <menu+0x26f4>)
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d106      	bne.n	8003a54 <menu+0x2594>
				altLimit = 1;
 8003a46:	4b63      	ldr	r3, [pc, #396]	; (8003bd4 <menu+0x2714>)
 8003a48:	2201      	movs	r2, #1
 8003a4a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8003a4c:	4b61      	ldr	r3, [pc, #388]	; (8003bd4 <menu+0x2714>)
 8003a4e:	781a      	ldrb	r2, [r3, #0]
 8003a50:	4b5f      	ldr	r3, [pc, #380]	; (8003bd0 <menu+0x2710>)
 8003a52:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8003a54:	4b60      	ldr	r3, [pc, #384]	; (8003bd8 <menu+0x2718>)
 8003a56:	2201      	movs	r2, #1
 8003a58:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8003a5a:	4b60      	ldr	r3, [pc, #384]	; (8003bdc <menu+0x271c>)
 8003a5c:	781b      	ldrb	r3, [r3, #0]
 8003a5e:	2b16      	cmp	r3, #22
 8003a60:	f040 8081 	bne.w	8003b66 <menu+0x26a6>
		if(dilSecim == 0) {
 8003a64:	4b51      	ldr	r3, [pc, #324]	; (8003bac <menu+0x26ec>)
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d105      	bne.n	8003a78 <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 8003a6c:	4a5c      	ldr	r2, [pc, #368]	; (8003be0 <menu+0x2720>)
 8003a6e:	2101      	movs	r1, #1
 8003a70:	2001      	movs	r0, #1
 8003a72:	f7fc fdf9 	bl	8000668 <lcd_print>
 8003a76:	e008      	b.n	8003a8a <menu+0x25ca>
		} else if(dilSecim == 1) {
 8003a78:	4b4c      	ldr	r3, [pc, #304]	; (8003bac <menu+0x26ec>)
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	2b01      	cmp	r3, #1
 8003a7e:	d104      	bne.n	8003a8a <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8003a80:	4a58      	ldr	r2, [pc, #352]	; (8003be4 <menu+0x2724>)
 8003a82:	2101      	movs	r1, #1
 8003a84:	2001      	movs	r0, #1
 8003a86:	f7fc fdef 	bl	8000668 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 8003a8a:	4b48      	ldr	r3, [pc, #288]	; (8003bac <menu+0x26ec>)
 8003a8c:	781b      	ldrb	r3, [r3, #0]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d105      	bne.n	8003a9e <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 8003a92:	4a55      	ldr	r2, [pc, #340]	; (8003be8 <menu+0x2728>)
 8003a94:	2101      	movs	r1, #1
 8003a96:	2002      	movs	r0, #2
 8003a98:	f7fc fde6 	bl	8000668 <lcd_print>
 8003a9c:	e008      	b.n	8003ab0 <menu+0x25f0>
			} else if(dilSecim == 1){
 8003a9e:	4b43      	ldr	r3, [pc, #268]	; (8003bac <menu+0x26ec>)
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d104      	bne.n	8003ab0 <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 8003aa6:	4a51      	ldr	r2, [pc, #324]	; (8003bec <menu+0x272c>)
 8003aa8:	2101      	movs	r1, #1
 8003aaa:	2002      	movs	r0, #2
 8003aac:	f7fc fddc 	bl	8000668 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8003ab0:	4b4f      	ldr	r3, [pc, #316]	; (8003bf0 <menu+0x2730>)
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	220a      	movs	r2, #10
 8003ab6:	494f      	ldr	r1, [pc, #316]	; (8003bf4 <menu+0x2734>)
 8003ab8:	4618      	mov	r0, r3
 8003aba:	f009 f86d 	bl	800cb98 <itoa>
		lcd_print(2,16,snum);
 8003abe:	4a4d      	ldr	r2, [pc, #308]	; (8003bf4 <menu+0x2734>)
 8003ac0:	2110      	movs	r1, #16
 8003ac2:	2002      	movs	r0, #2
 8003ac4:	f7fc fdd0 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ac8:	2102      	movs	r1, #2
 8003aca:	483f      	ldr	r0, [pc, #252]	; (8003bc8 <menu+0x2708>)
 8003acc:	f006 f838 	bl	8009b40 <HAL_GPIO_ReadPin>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d115      	bne.n	8003b02 <menu+0x2642>
 8003ad6:	4b3d      	ldr	r3, [pc, #244]	; (8003bcc <menu+0x270c>)
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	f083 0301 	eor.w	r3, r3, #1
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00e      	beq.n	8003b02 <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 8003ae4:	4b42      	ldr	r3, [pc, #264]	; (8003bf0 <menu+0x2730>)
 8003ae6:	781b      	ldrb	r3, [r3, #0]
 8003ae8:	3301      	adds	r3, #1
 8003aea:	b2da      	uxtb	r2, r3
 8003aec:	4b40      	ldr	r3, [pc, #256]	; (8003bf0 <menu+0x2730>)
 8003aee:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8003af0:	4b3f      	ldr	r3, [pc, #252]	; (8003bf0 <menu+0x2730>)
 8003af2:	781b      	ldrb	r3, [r3, #0]
 8003af4:	2b05      	cmp	r3, #5
 8003af6:	d902      	bls.n	8003afe <menu+0x263e>
				yukariValfTmr = 0;
 8003af8:	4b3d      	ldr	r3, [pc, #244]	; (8003bf0 <menu+0x2730>)
 8003afa:	2200      	movs	r2, #0
 8003afc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003afe:	f002 fa7b 	bl	8005ff8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b02:	2104      	movs	r1, #4
 8003b04:	4830      	ldr	r0, [pc, #192]	; (8003bc8 <menu+0x2708>)
 8003b06:	f006 f81b 	bl	8009b40 <HAL_GPIO_ReadPin>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b01      	cmp	r3, #1
 8003b0e:	d115      	bne.n	8003b3c <menu+0x267c>
 8003b10:	4b2e      	ldr	r3, [pc, #184]	; (8003bcc <menu+0x270c>)
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	f083 0301 	eor.w	r3, r3, #1
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00e      	beq.n	8003b3c <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 8003b1e:	4b34      	ldr	r3, [pc, #208]	; (8003bf0 <menu+0x2730>)
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	3b01      	subs	r3, #1
 8003b24:	b2da      	uxtb	r2, r3
 8003b26:	4b32      	ldr	r3, [pc, #200]	; (8003bf0 <menu+0x2730>)
 8003b28:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8003b2a:	4b31      	ldr	r3, [pc, #196]	; (8003bf0 <menu+0x2730>)
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	2b06      	cmp	r3, #6
 8003b30:	d902      	bls.n	8003b38 <menu+0x2678>
		   		yukariValfTmr = 5;
 8003b32:	4b2f      	ldr	r3, [pc, #188]	; (8003bf0 <menu+0x2730>)
 8003b34:	2205      	movs	r2, #5
 8003b36:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003b38:	f002 fa5e 	bl	8005ff8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b3c:	2108      	movs	r1, #8
 8003b3e:	4822      	ldr	r0, [pc, #136]	; (8003bc8 <menu+0x2708>)
 8003b40:	f005 fffe 	bl	8009b40 <HAL_GPIO_ReadPin>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d10d      	bne.n	8003b66 <menu+0x26a6>
 8003b4a:	4b20      	ldr	r3, [pc, #128]	; (8003bcc <menu+0x270c>)
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	f083 0301 	eor.w	r3, r3, #1
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d006      	beq.n	8003b66 <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 8003b58:	4b25      	ldr	r3, [pc, #148]	; (8003bf0 <menu+0x2730>)
 8003b5a:	781a      	ldrb	r2, [r3, #0]
 8003b5c:	4b1c      	ldr	r3, [pc, #112]	; (8003bd0 <menu+0x2710>)
 8003b5e:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8003b60:	4b1d      	ldr	r3, [pc, #116]	; (8003bd8 <menu+0x2718>)
 8003b62:	2201      	movs	r2, #1
 8003b64:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8003b66:	4b1d      	ldr	r3, [pc, #116]	; (8003bdc <menu+0x271c>)
 8003b68:	781b      	ldrb	r3, [r3, #0]
 8003b6a:	2b17      	cmp	r3, #23
 8003b6c:	f040 80ac 	bne.w	8003cc8 <menu+0x2808>
		if(dilSecim == 0) {
 8003b70:	4b0e      	ldr	r3, [pc, #56]	; (8003bac <menu+0x26ec>)
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d105      	bne.n	8003b84 <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8003b78:	4a1f      	ldr	r2, [pc, #124]	; (8003bf8 <menu+0x2738>)
 8003b7a:	2101      	movs	r1, #1
 8003b7c:	2001      	movs	r0, #1
 8003b7e:	f7fc fd73 	bl	8000668 <lcd_print>
 8003b82:	e008      	b.n	8003b96 <menu+0x26d6>
		} else if(dilSecim == 1) {
 8003b84:	4b09      	ldr	r3, [pc, #36]	; (8003bac <menu+0x26ec>)
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d104      	bne.n	8003b96 <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8003b8c:	4a1b      	ldr	r2, [pc, #108]	; (8003bfc <menu+0x273c>)
 8003b8e:	2101      	movs	r1, #1
 8003b90:	2001      	movs	r0, #1
 8003b92:	f7fc fd69 	bl	8000668 <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 8003b96:	4b05      	ldr	r3, [pc, #20]	; (8003bac <menu+0x26ec>)
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d130      	bne.n	8003c00 <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 8003b9e:	4a12      	ldr	r2, [pc, #72]	; (8003be8 <menu+0x2728>)
 8003ba0:	2101      	movs	r1, #1
 8003ba2:	2002      	movs	r0, #2
 8003ba4:	f7fc fd60 	bl	8000668 <lcd_print>
 8003ba8:	e033      	b.n	8003c12 <menu+0x2752>
 8003baa:	bf00      	nop
 8003bac:	20000d56 	.word	0x20000d56
 8003bb0:	0800e064 	.word	0x0800e064
 8003bb4:	20000d48 	.word	0x20000d48
 8003bb8:	0800e008 	.word	0x0800e008
 8003bbc:	0800e01c 	.word	0x0800e01c
 8003bc0:	0800e02c 	.word	0x0800e02c
 8003bc4:	0800e040 	.word	0x0800e040
 8003bc8:	40010800 	.word	0x40010800
 8003bcc:	20000d64 	.word	0x20000d64
 8003bd0:	20000c34 	.word	0x20000c34
 8003bd4:	20000d3b 	.word	0x20000d3b
 8003bd8:	20000d61 	.word	0x20000d61
 8003bdc:	20000d35 	.word	0x20000d35
 8003be0:	0800e074 	.word	0x0800e074
 8003be4:	0800e088 	.word	0x0800e088
 8003be8:	0800dd28 	.word	0x0800dd28
 8003bec:	0800e09c 	.word	0x0800e09c
 8003bf0:	20000d49 	.word	0x20000d49
 8003bf4:	20000cb8 	.word	0x20000cb8
 8003bf8:	0800e0ac 	.word	0x0800e0ac
 8003bfc:	0800e0c0 	.word	0x0800e0c0
			} else if(dilSecim == 1) {
 8003c00:	4b98      	ldr	r3, [pc, #608]	; (8003e64 <menu+0x29a4>)
 8003c02:	781b      	ldrb	r3, [r3, #0]
 8003c04:	2b01      	cmp	r3, #1
 8003c06:	d104      	bne.n	8003c12 <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 8003c08:	4a97      	ldr	r2, [pc, #604]	; (8003e68 <menu+0x29a8>)
 8003c0a:	2101      	movs	r1, #1
 8003c0c:	2002      	movs	r0, #2
 8003c0e:	f7fc fd2b 	bl	8000668 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8003c12:	4b96      	ldr	r3, [pc, #600]	; (8003e6c <menu+0x29ac>)
 8003c14:	781b      	ldrb	r3, [r3, #0]
 8003c16:	220a      	movs	r2, #10
 8003c18:	4995      	ldr	r1, [pc, #596]	; (8003e70 <menu+0x29b0>)
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f008 ffbc 	bl	800cb98 <itoa>
		lcd_print(2,16,snum);
 8003c20:	4a93      	ldr	r2, [pc, #588]	; (8003e70 <menu+0x29b0>)
 8003c22:	2110      	movs	r1, #16
 8003c24:	2002      	movs	r0, #2
 8003c26:	f7fc fd1f 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c2a:	2102      	movs	r1, #2
 8003c2c:	4891      	ldr	r0, [pc, #580]	; (8003e74 <menu+0x29b4>)
 8003c2e:	f005 ff87 	bl	8009b40 <HAL_GPIO_ReadPin>
 8003c32:	4603      	mov	r3, r0
 8003c34:	2b01      	cmp	r3, #1
 8003c36:	d115      	bne.n	8003c64 <menu+0x27a4>
 8003c38:	4b8f      	ldr	r3, [pc, #572]	; (8003e78 <menu+0x29b8>)
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	f083 0301 	eor.w	r3, r3, #1
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00e      	beq.n	8003c64 <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 8003c46:	4b89      	ldr	r3, [pc, #548]	; (8003e6c <menu+0x29ac>)
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	b2da      	uxtb	r2, r3
 8003c4e:	4b87      	ldr	r3, [pc, #540]	; (8003e6c <menu+0x29ac>)
 8003c50:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003c52:	4b86      	ldr	r3, [pc, #536]	; (8003e6c <menu+0x29ac>)
 8003c54:	781b      	ldrb	r3, [r3, #0]
 8003c56:	2b05      	cmp	r3, #5
 8003c58:	d902      	bls.n	8003c60 <menu+0x27a0>
				asagiValfTmr = 0;
 8003c5a:	4b84      	ldr	r3, [pc, #528]	; (8003e6c <menu+0x29ac>)
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003c60:	f002 f9ca 	bl	8005ff8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c64:	2104      	movs	r1, #4
 8003c66:	4883      	ldr	r0, [pc, #524]	; (8003e74 <menu+0x29b4>)
 8003c68:	f005 ff6a 	bl	8009b40 <HAL_GPIO_ReadPin>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d115      	bne.n	8003c9e <menu+0x27de>
 8003c72:	4b81      	ldr	r3, [pc, #516]	; (8003e78 <menu+0x29b8>)
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	f083 0301 	eor.w	r3, r3, #1
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00e      	beq.n	8003c9e <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 8003c80:	4b7a      	ldr	r3, [pc, #488]	; (8003e6c <menu+0x29ac>)
 8003c82:	781b      	ldrb	r3, [r3, #0]
 8003c84:	3b01      	subs	r3, #1
 8003c86:	b2da      	uxtb	r2, r3
 8003c88:	4b78      	ldr	r3, [pc, #480]	; (8003e6c <menu+0x29ac>)
 8003c8a:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003c8c:	4b77      	ldr	r3, [pc, #476]	; (8003e6c <menu+0x29ac>)
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	2b06      	cmp	r3, #6
 8003c92:	d902      	bls.n	8003c9a <menu+0x27da>
		   		asagiValfTmr = 5;
 8003c94:	4b75      	ldr	r3, [pc, #468]	; (8003e6c <menu+0x29ac>)
 8003c96:	2205      	movs	r2, #5
 8003c98:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003c9a:	f002 f9ad 	bl	8005ff8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c9e:	2108      	movs	r1, #8
 8003ca0:	4874      	ldr	r0, [pc, #464]	; (8003e74 <menu+0x29b4>)
 8003ca2:	f005 ff4d 	bl	8009b40 <HAL_GPIO_ReadPin>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d10d      	bne.n	8003cc8 <menu+0x2808>
 8003cac:	4b72      	ldr	r3, [pc, #456]	; (8003e78 <menu+0x29b8>)
 8003cae:	781b      	ldrb	r3, [r3, #0]
 8003cb0:	f083 0301 	eor.w	r3, r3, #1
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d006      	beq.n	8003cc8 <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 8003cba:	4b6c      	ldr	r3, [pc, #432]	; (8003e6c <menu+0x29ac>)
 8003cbc:	781a      	ldrb	r2, [r3, #0]
 8003cbe:	4b6f      	ldr	r3, [pc, #444]	; (8003e7c <menu+0x29bc>)
 8003cc0:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8003cc2:	4b6f      	ldr	r3, [pc, #444]	; (8003e80 <menu+0x29c0>)
 8003cc4:	2201      	movs	r2, #1
 8003cc6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8003cc8:	4b6e      	ldr	r3, [pc, #440]	; (8003e84 <menu+0x29c4>)
 8003cca:	781b      	ldrb	r3, [r3, #0]
 8003ccc:	2b18      	cmp	r3, #24
 8003cce:	f040 809d 	bne.w	8003e0c <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 8003cd2:	4b6d      	ldr	r3, [pc, #436]	; (8003e88 <menu+0x29c8>)
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d113      	bne.n	8003d02 <menu+0x2842>
			if(dilSecim == 0) {
 8003cda:	4b62      	ldr	r3, [pc, #392]	; (8003e64 <menu+0x29a4>)
 8003cdc:	781b      	ldrb	r3, [r3, #0]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d105      	bne.n	8003cee <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8003ce2:	4a6a      	ldr	r2, [pc, #424]	; (8003e8c <menu+0x29cc>)
 8003ce4:	2101      	movs	r1, #1
 8003ce6:	2001      	movs	r0, #1
 8003ce8:	f7fc fcbe 	bl	8000668 <lcd_print>
 8003cec:	e020      	b.n	8003d30 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003cee:	4b5d      	ldr	r3, [pc, #372]	; (8003e64 <menu+0x29a4>)
 8003cf0:	781b      	ldrb	r3, [r3, #0]
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d11c      	bne.n	8003d30 <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8003cf6:	4a66      	ldr	r2, [pc, #408]	; (8003e90 <menu+0x29d0>)
 8003cf8:	2101      	movs	r1, #1
 8003cfa:	2001      	movs	r0, #1
 8003cfc:	f7fc fcb4 	bl	8000668 <lcd_print>
 8003d00:	e016      	b.n	8003d30 <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003d02:	4b61      	ldr	r3, [pc, #388]	; (8003e88 <menu+0x29c8>)
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d112      	bne.n	8003d30 <menu+0x2870>
			if(dilSecim == 0) {
 8003d0a:	4b56      	ldr	r3, [pc, #344]	; (8003e64 <menu+0x29a4>)
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d105      	bne.n	8003d1e <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8003d12:	4a60      	ldr	r2, [pc, #384]	; (8003e94 <menu+0x29d4>)
 8003d14:	2101      	movs	r1, #1
 8003d16:	2001      	movs	r0, #1
 8003d18:	f7fc fca6 	bl	8000668 <lcd_print>
 8003d1c:	e008      	b.n	8003d30 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003d1e:	4b51      	ldr	r3, [pc, #324]	; (8003e64 <menu+0x29a4>)
 8003d20:	781b      	ldrb	r3, [r3, #0]
 8003d22:	2b01      	cmp	r3, #1
 8003d24:	d104      	bne.n	8003d30 <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8003d26:	4a5c      	ldr	r2, [pc, #368]	; (8003e98 <menu+0x29d8>)
 8003d28:	2101      	movs	r1, #1
 8003d2a:	2001      	movs	r0, #1
 8003d2c:	f7fc fc9c 	bl	8000668 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003d30:	4b4c      	ldr	r3, [pc, #304]	; (8003e64 <menu+0x29a4>)
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d105      	bne.n	8003d44 <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 8003d38:	4a58      	ldr	r2, [pc, #352]	; (8003e9c <menu+0x29dc>)
 8003d3a:	2101      	movs	r1, #1
 8003d3c:	2002      	movs	r0, #2
 8003d3e:	f7fc fc93 	bl	8000668 <lcd_print>
 8003d42:	e008      	b.n	8003d56 <menu+0x2896>
			} else if(dilSecim == 1) {
 8003d44:	4b47      	ldr	r3, [pc, #284]	; (8003e64 <menu+0x29a4>)
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d104      	bne.n	8003d56 <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 8003d4c:	4a46      	ldr	r2, [pc, #280]	; (8003e68 <menu+0x29a8>)
 8003d4e:	2101      	movs	r1, #1
 8003d50:	2002      	movs	r0, #2
 8003d52:	f7fc fc89 	bl	8000668 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003d56:	4b52      	ldr	r3, [pc, #328]	; (8003ea0 <menu+0x29e0>)
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	220a      	movs	r2, #10
 8003d5c:	4944      	ldr	r1, [pc, #272]	; (8003e70 <menu+0x29b0>)
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f008 ff1a 	bl	800cb98 <itoa>
		lcd_print(2, 16, snum);
 8003d64:	4a42      	ldr	r2, [pc, #264]	; (8003e70 <menu+0x29b0>)
 8003d66:	2110      	movs	r1, #16
 8003d68:	2002      	movs	r0, #2
 8003d6a:	f7fc fc7d 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d6e:	2102      	movs	r1, #2
 8003d70:	4840      	ldr	r0, [pc, #256]	; (8003e74 <menu+0x29b4>)
 8003d72:	f005 fee5 	bl	8009b40 <HAL_GPIO_ReadPin>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d115      	bne.n	8003da8 <menu+0x28e8>
 8003d7c:	4b3e      	ldr	r3, [pc, #248]	; (8003e78 <menu+0x29b8>)
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	f083 0301 	eor.w	r3, r3, #1
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00e      	beq.n	8003da8 <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003d8a:	4b45      	ldr	r3, [pc, #276]	; (8003ea0 <menu+0x29e0>)
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	3301      	adds	r3, #1
 8003d90:	b2da      	uxtb	r2, r3
 8003d92:	4b43      	ldr	r3, [pc, #268]	; (8003ea0 <menu+0x29e0>)
 8003d94:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003d96:	4b42      	ldr	r3, [pc, #264]	; (8003ea0 <menu+0x29e0>)
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	2b05      	cmp	r3, #5
 8003d9c:	d902      	bls.n	8003da4 <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 8003d9e:	4b40      	ldr	r3, [pc, #256]	; (8003ea0 <menu+0x29e0>)
 8003da0:	2200      	movs	r2, #0
 8003da2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003da4:	f002 f928 	bl	8005ff8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003da8:	2104      	movs	r1, #4
 8003daa:	4832      	ldr	r0, [pc, #200]	; (8003e74 <menu+0x29b4>)
 8003dac:	f005 fec8 	bl	8009b40 <HAL_GPIO_ReadPin>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d115      	bne.n	8003de2 <menu+0x2922>
 8003db6:	4b30      	ldr	r3, [pc, #192]	; (8003e78 <menu+0x29b8>)
 8003db8:	781b      	ldrb	r3, [r3, #0]
 8003dba:	f083 0301 	eor.w	r3, r3, #1
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d00e      	beq.n	8003de2 <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003dc4:	4b36      	ldr	r3, [pc, #216]	; (8003ea0 <menu+0x29e0>)
 8003dc6:	781b      	ldrb	r3, [r3, #0]
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	b2da      	uxtb	r2, r3
 8003dcc:	4b34      	ldr	r3, [pc, #208]	; (8003ea0 <menu+0x29e0>)
 8003dce:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003dd0:	4b33      	ldr	r3, [pc, #204]	; (8003ea0 <menu+0x29e0>)
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	2b06      	cmp	r3, #6
 8003dd6:	d902      	bls.n	8003dde <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 8003dd8:	4b31      	ldr	r3, [pc, #196]	; (8003ea0 <menu+0x29e0>)
 8003dda:	2205      	movs	r2, #5
 8003ddc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003dde:	f002 f90b 	bl	8005ff8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003de2:	2108      	movs	r1, #8
 8003de4:	4823      	ldr	r0, [pc, #140]	; (8003e74 <menu+0x29b4>)
 8003de6:	f005 feab 	bl	8009b40 <HAL_GPIO_ReadPin>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d10d      	bne.n	8003e0c <menu+0x294c>
 8003df0:	4b21      	ldr	r3, [pc, #132]	; (8003e78 <menu+0x29b8>)
 8003df2:	781b      	ldrb	r3, [r3, #0]
 8003df4:	f083 0301 	eor.w	r3, r3, #1
 8003df8:	b2db      	uxtb	r3, r3
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d006      	beq.n	8003e0c <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 8003dfe:	4b28      	ldr	r3, [pc, #160]	; (8003ea0 <menu+0x29e0>)
 8003e00:	781a      	ldrb	r2, [r3, #0]
 8003e02:	4b1e      	ldr	r3, [pc, #120]	; (8003e7c <menu+0x29bc>)
 8003e04:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003e06:	4b1e      	ldr	r3, [pc, #120]	; (8003e80 <menu+0x29c0>)
 8003e08:	2201      	movs	r2, #1
 8003e0a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003e0c:	4b1d      	ldr	r3, [pc, #116]	; (8003e84 <menu+0x29c4>)
 8003e0e:	781b      	ldrb	r3, [r3, #0]
 8003e10:	2b19      	cmp	r3, #25
 8003e12:	f040 80c4 	bne.w	8003f9e <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 8003e16:	4b1c      	ldr	r3, [pc, #112]	; (8003e88 <menu+0x29c8>)
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d113      	bne.n	8003e46 <menu+0x2986>
			if(dilSecim == 0) {
 8003e1e:	4b11      	ldr	r3, [pc, #68]	; (8003e64 <menu+0x29a4>)
 8003e20:	781b      	ldrb	r3, [r3, #0]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d105      	bne.n	8003e32 <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003e26:	4a1f      	ldr	r2, [pc, #124]	; (8003ea4 <menu+0x29e4>)
 8003e28:	2101      	movs	r1, #1
 8003e2a:	2001      	movs	r0, #1
 8003e2c:	f7fc fc1c 	bl	8000668 <lcd_print>
 8003e30:	e047      	b.n	8003ec2 <menu+0x2a02>
			} else if(dilSecim == 1) {
 8003e32:	4b0c      	ldr	r3, [pc, #48]	; (8003e64 <menu+0x29a4>)
 8003e34:	781b      	ldrb	r3, [r3, #0]
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d143      	bne.n	8003ec2 <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003e3a:	4a1b      	ldr	r2, [pc, #108]	; (8003ea8 <menu+0x29e8>)
 8003e3c:	2101      	movs	r1, #1
 8003e3e:	2001      	movs	r0, #1
 8003e40:	f7fc fc12 	bl	8000668 <lcd_print>
 8003e44:	e03d      	b.n	8003ec2 <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003e46:	4b10      	ldr	r3, [pc, #64]	; (8003e88 <menu+0x29c8>)
 8003e48:	781b      	ldrb	r3, [r3, #0]
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d139      	bne.n	8003ec2 <menu+0x2a02>
			if(dilSecim == 0) {
 8003e4e:	4b05      	ldr	r3, [pc, #20]	; (8003e64 <menu+0x29a4>)
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d12c      	bne.n	8003eb0 <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003e56:	4a15      	ldr	r2, [pc, #84]	; (8003eac <menu+0x29ec>)
 8003e58:	2101      	movs	r1, #1
 8003e5a:	2001      	movs	r0, #1
 8003e5c:	f7fc fc04 	bl	8000668 <lcd_print>
 8003e60:	e02f      	b.n	8003ec2 <menu+0x2a02>
 8003e62:	bf00      	nop
 8003e64:	20000d56 	.word	0x20000d56
 8003e68:	0800e09c 	.word	0x0800e09c
 8003e6c:	20000d4a 	.word	0x20000d4a
 8003e70:	20000cb8 	.word	0x20000cb8
 8003e74:	40010800 	.word	0x40010800
 8003e78:	20000d64 	.word	0x20000d64
 8003e7c:	20000c34 	.word	0x20000c34
 8003e80:	20000d61 	.word	0x20000d61
 8003e84:	20000d35 	.word	0x20000d35
 8003e88:	20000d44 	.word	0x20000d44
 8003e8c:	0800e0d4 	.word	0x0800e0d4
 8003e90:	0800e0e8 	.word	0x0800e0e8
 8003e94:	0800e0fc 	.word	0x0800e0fc
 8003e98:	0800e110 	.word	0x0800e110
 8003e9c:	0800dd28 	.word	0x0800dd28
 8003ea0:	20000d4b 	.word	0x20000d4b
 8003ea4:	0800e124 	.word	0x0800e124
 8003ea8:	0800e138 	.word	0x0800e138
 8003eac:	0800e14c 	.word	0x0800e14c
			} else if(dilSecim == 1) {
 8003eb0:	4b73      	ldr	r3, [pc, #460]	; (8004080 <menu+0x2bc0>)
 8003eb2:	781b      	ldrb	r3, [r3, #0]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d104      	bne.n	8003ec2 <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8003eb8:	4a72      	ldr	r2, [pc, #456]	; (8004084 <menu+0x2bc4>)
 8003eba:	2101      	movs	r1, #1
 8003ebc:	2001      	movs	r0, #1
 8003ebe:	f7fc fbd3 	bl	8000668 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8003ec2:	4b6f      	ldr	r3, [pc, #444]	; (8004080 <menu+0x2bc0>)
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d105      	bne.n	8003ed6 <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 8003eca:	4a6f      	ldr	r2, [pc, #444]	; (8004088 <menu+0x2bc8>)
 8003ecc:	2101      	movs	r1, #1
 8003ece:	2002      	movs	r0, #2
 8003ed0:	f7fc fbca 	bl	8000668 <lcd_print>
 8003ed4:	e008      	b.n	8003ee8 <menu+0x2a28>
			} else if(dilSecim == 1) {
 8003ed6:	4b6a      	ldr	r3, [pc, #424]	; (8004080 <menu+0x2bc0>)
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d104      	bne.n	8003ee8 <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 8003ede:	4a6b      	ldr	r2, [pc, #428]	; (800408c <menu+0x2bcc>)
 8003ee0:	2101      	movs	r1, #1
 8003ee2:	2002      	movs	r0, #2
 8003ee4:	f7fc fbc0 	bl	8000668 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003ee8:	4b69      	ldr	r3, [pc, #420]	; (8004090 <menu+0x2bd0>)
 8003eea:	781b      	ldrb	r3, [r3, #0]
 8003eec:	220a      	movs	r2, #10
 8003eee:	4969      	ldr	r1, [pc, #420]	; (8004094 <menu+0x2bd4>)
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f008 fe51 	bl	800cb98 <itoa>
		lcd_print(2,16,snum);
 8003ef6:	4a67      	ldr	r2, [pc, #412]	; (8004094 <menu+0x2bd4>)
 8003ef8:	2110      	movs	r1, #16
 8003efa:	2002      	movs	r0, #2
 8003efc:	f7fc fbb4 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f00:	2102      	movs	r1, #2
 8003f02:	4865      	ldr	r0, [pc, #404]	; (8004098 <menu+0x2bd8>)
 8003f04:	f005 fe1c 	bl	8009b40 <HAL_GPIO_ReadPin>
 8003f08:	4603      	mov	r3, r0
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d115      	bne.n	8003f3a <menu+0x2a7a>
 8003f0e:	4b63      	ldr	r3, [pc, #396]	; (800409c <menu+0x2bdc>)
 8003f10:	781b      	ldrb	r3, [r3, #0]
 8003f12:	f083 0301 	eor.w	r3, r3, #1
 8003f16:	b2db      	uxtb	r3, r3
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00e      	beq.n	8003f3a <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8003f1c:	4b5c      	ldr	r3, [pc, #368]	; (8004090 <menu+0x2bd0>)
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	3301      	adds	r3, #1
 8003f22:	b2da      	uxtb	r2, r3
 8003f24:	4b5a      	ldr	r3, [pc, #360]	; (8004090 <menu+0x2bd0>)
 8003f26:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003f28:	4b59      	ldr	r3, [pc, #356]	; (8004090 <menu+0x2bd0>)
 8003f2a:	781b      	ldrb	r3, [r3, #0]
 8003f2c:	2b05      	cmp	r3, #5
 8003f2e:	d902      	bls.n	8003f36 <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 8003f30:	4b57      	ldr	r3, [pc, #348]	; (8004090 <menu+0x2bd0>)
 8003f32:	2200      	movs	r2, #0
 8003f34:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003f36:	f002 f85f 	bl	8005ff8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f3a:	2104      	movs	r1, #4
 8003f3c:	4856      	ldr	r0, [pc, #344]	; (8004098 <menu+0x2bd8>)
 8003f3e:	f005 fdff 	bl	8009b40 <HAL_GPIO_ReadPin>
 8003f42:	4603      	mov	r3, r0
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d115      	bne.n	8003f74 <menu+0x2ab4>
 8003f48:	4b54      	ldr	r3, [pc, #336]	; (800409c <menu+0x2bdc>)
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	f083 0301 	eor.w	r3, r3, #1
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d00e      	beq.n	8003f74 <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003f56:	4b4e      	ldr	r3, [pc, #312]	; (8004090 <menu+0x2bd0>)
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	b2da      	uxtb	r2, r3
 8003f5e:	4b4c      	ldr	r3, [pc, #304]	; (8004090 <menu+0x2bd0>)
 8003f60:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003f62:	4b4b      	ldr	r3, [pc, #300]	; (8004090 <menu+0x2bd0>)
 8003f64:	781b      	ldrb	r3, [r3, #0]
 8003f66:	2b06      	cmp	r3, #6
 8003f68:	d902      	bls.n	8003f70 <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 8003f6a:	4b49      	ldr	r3, [pc, #292]	; (8004090 <menu+0x2bd0>)
 8003f6c:	2205      	movs	r2, #5
 8003f6e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003f70:	f002 f842 	bl	8005ff8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f74:	2108      	movs	r1, #8
 8003f76:	4848      	ldr	r0, [pc, #288]	; (8004098 <menu+0x2bd8>)
 8003f78:	f005 fde2 	bl	8009b40 <HAL_GPIO_ReadPin>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d10d      	bne.n	8003f9e <menu+0x2ade>
 8003f82:	4b46      	ldr	r3, [pc, #280]	; (800409c <menu+0x2bdc>)
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	f083 0301 	eor.w	r3, r3, #1
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d006      	beq.n	8003f9e <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003f90:	4b3f      	ldr	r3, [pc, #252]	; (8004090 <menu+0x2bd0>)
 8003f92:	781a      	ldrb	r2, [r3, #0]
 8003f94:	4b42      	ldr	r3, [pc, #264]	; (80040a0 <menu+0x2be0>)
 8003f96:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8003f98:	4b42      	ldr	r3, [pc, #264]	; (80040a4 <menu+0x2be4>)
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003f9e:	4b42      	ldr	r3, [pc, #264]	; (80040a8 <menu+0x2be8>)
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	2b1a      	cmp	r3, #26
 8003fa4:	f040 80ec 	bne.w	8004180 <menu+0x2cc0>
		if(dilSecim == 0) {
 8003fa8:	4b35      	ldr	r3, [pc, #212]	; (8004080 <menu+0x2bc0>)
 8003faa:	781b      	ldrb	r3, [r3, #0]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d105      	bne.n	8003fbc <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8003fb0:	4a3e      	ldr	r2, [pc, #248]	; (80040ac <menu+0x2bec>)
 8003fb2:	2101      	movs	r1, #1
 8003fb4:	2001      	movs	r0, #1
 8003fb6:	f7fc fb57 	bl	8000668 <lcd_print>
 8003fba:	e008      	b.n	8003fce <menu+0x2b0e>
		} else if(dilSecim == 1) {
 8003fbc:	4b30      	ldr	r3, [pc, #192]	; (8004080 <menu+0x2bc0>)
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d104      	bne.n	8003fce <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 8003fc4:	4a3a      	ldr	r2, [pc, #232]	; (80040b0 <menu+0x2bf0>)
 8003fc6:	2101      	movs	r1, #1
 8003fc8:	2001      	movs	r0, #1
 8003fca:	f7fc fb4d 	bl	8000668 <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 8003fce:	4b39      	ldr	r3, [pc, #228]	; (80040b4 <menu+0x2bf4>)
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	2b63      	cmp	r3, #99	; 0x63
 8003fd4:	d91e      	bls.n	8004014 <menu+0x2b54>
			if(dilSecim == 0) {
 8003fd6:	4b2a      	ldr	r3, [pc, #168]	; (8004080 <menu+0x2bc0>)
 8003fd8:	781b      	ldrb	r3, [r3, #0]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d104      	bne.n	8003fe8 <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 8003fde:	4a2a      	ldr	r2, [pc, #168]	; (8004088 <menu+0x2bc8>)
 8003fe0:	2101      	movs	r1, #1
 8003fe2:	2002      	movs	r0, #2
 8003fe4:	f7fc fb40 	bl	8000668 <lcd_print>
			}
			if(dilSecim == 1) {
 8003fe8:	4b25      	ldr	r3, [pc, #148]	; (8004080 <menu+0x2bc0>)
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d104      	bne.n	8003ffa <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 8003ff0:	4a26      	ldr	r2, [pc, #152]	; (800408c <menu+0x2bcc>)
 8003ff2:	2101      	movs	r1, #1
 8003ff4:	2002      	movs	r0, #2
 8003ff6:	f7fc fb37 	bl	8000668 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003ffa:	4b2e      	ldr	r3, [pc, #184]	; (80040b4 <menu+0x2bf4>)
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	220a      	movs	r2, #10
 8004000:	4924      	ldr	r1, [pc, #144]	; (8004094 <menu+0x2bd4>)
 8004002:	4618      	mov	r0, r3
 8004004:	f008 fdc8 	bl	800cb98 <itoa>
			lcd_print(2,14,snum);
 8004008:	4a22      	ldr	r2, [pc, #136]	; (8004094 <menu+0x2bd4>)
 800400a:	210e      	movs	r1, #14
 800400c:	2002      	movs	r0, #2
 800400e:	f7fc fb2b 	bl	8000668 <lcd_print>
 8004012:	e066      	b.n	80040e2 <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8004014:	4b27      	ldr	r3, [pc, #156]	; (80040b4 <menu+0x2bf4>)
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	2b09      	cmp	r3, #9
 800401a:	d923      	bls.n	8004064 <menu+0x2ba4>
 800401c:	4b25      	ldr	r3, [pc, #148]	; (80040b4 <menu+0x2bf4>)
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	2b63      	cmp	r3, #99	; 0x63
 8004022:	d81f      	bhi.n	8004064 <menu+0x2ba4>
			if(dilSecim == 0) {
 8004024:	4b16      	ldr	r3, [pc, #88]	; (8004080 <menu+0x2bc0>)
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d105      	bne.n	8004038 <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 800402c:	4a16      	ldr	r2, [pc, #88]	; (8004088 <menu+0x2bc8>)
 800402e:	2101      	movs	r1, #1
 8004030:	2002      	movs	r0, #2
 8004032:	f7fc fb19 	bl	8000668 <lcd_print>
 8004036:	e008      	b.n	800404a <menu+0x2b8a>
			} else if(dilSecim == 1) {
 8004038:	4b11      	ldr	r3, [pc, #68]	; (8004080 <menu+0x2bc0>)
 800403a:	781b      	ldrb	r3, [r3, #0]
 800403c:	2b01      	cmp	r3, #1
 800403e:	d104      	bne.n	800404a <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 8004040:	4a12      	ldr	r2, [pc, #72]	; (800408c <menu+0x2bcc>)
 8004042:	2101      	movs	r1, #1
 8004044:	2002      	movs	r0, #2
 8004046:	f7fc fb0f 	bl	8000668 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 800404a:	4b1a      	ldr	r3, [pc, #104]	; (80040b4 <menu+0x2bf4>)
 800404c:	781b      	ldrb	r3, [r3, #0]
 800404e:	220a      	movs	r2, #10
 8004050:	4910      	ldr	r1, [pc, #64]	; (8004094 <menu+0x2bd4>)
 8004052:	4618      	mov	r0, r3
 8004054:	f008 fda0 	bl	800cb98 <itoa>
			lcd_print(2, 15, snum);
 8004058:	4a0e      	ldr	r2, [pc, #56]	; (8004094 <menu+0x2bd4>)
 800405a:	210f      	movs	r1, #15
 800405c:	2002      	movs	r0, #2
 800405e:	f7fc fb03 	bl	8000668 <lcd_print>
 8004062:	e03e      	b.n	80040e2 <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 8004064:	4b13      	ldr	r3, [pc, #76]	; (80040b4 <menu+0x2bf4>)
 8004066:	781b      	ldrb	r3, [r3, #0]
 8004068:	2b09      	cmp	r3, #9
 800406a:	d83a      	bhi.n	80040e2 <menu+0x2c22>
			if(dilSecim == 0) {
 800406c:	4b04      	ldr	r3, [pc, #16]	; (8004080 <menu+0x2bc0>)
 800406e:	781b      	ldrb	r3, [r3, #0]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d121      	bne.n	80040b8 <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 8004074:	4a04      	ldr	r2, [pc, #16]	; (8004088 <menu+0x2bc8>)
 8004076:	2101      	movs	r1, #1
 8004078:	2002      	movs	r0, #2
 800407a:	f7fc faf5 	bl	8000668 <lcd_print>
 800407e:	e024      	b.n	80040ca <menu+0x2c0a>
 8004080:	20000d56 	.word	0x20000d56
 8004084:	0800e160 	.word	0x0800e160
 8004088:	0800dd28 	.word	0x0800dd28
 800408c:	0800e09c 	.word	0x0800e09c
 8004090:	20000d4c 	.word	0x20000d4c
 8004094:	20000cb8 	.word	0x20000cb8
 8004098:	40010800 	.word	0x40010800
 800409c:	20000d64 	.word	0x20000d64
 80040a0:	20000c34 	.word	0x20000c34
 80040a4:	20000d61 	.word	0x20000d61
 80040a8:	20000d35 	.word	0x20000d35
 80040ac:	0800e174 	.word	0x0800e174
 80040b0:	0800e188 	.word	0x0800e188
 80040b4:	20000d4d 	.word	0x20000d4d
			} else if(dilSecim == 1) {
 80040b8:	4b8f      	ldr	r3, [pc, #572]	; (80042f8 <menu+0x2e38>)
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d104      	bne.n	80040ca <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 80040c0:	4a8e      	ldr	r2, [pc, #568]	; (80042fc <menu+0x2e3c>)
 80040c2:	2101      	movs	r1, #1
 80040c4:	2002      	movs	r0, #2
 80040c6:	f7fc facf 	bl	8000668 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 80040ca:	4b8d      	ldr	r3, [pc, #564]	; (8004300 <menu+0x2e40>)
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	220a      	movs	r2, #10
 80040d0:	498c      	ldr	r1, [pc, #560]	; (8004304 <menu+0x2e44>)
 80040d2:	4618      	mov	r0, r3
 80040d4:	f008 fd60 	bl	800cb98 <itoa>
			lcd_print(2, 16, snum);
 80040d8:	4a8a      	ldr	r2, [pc, #552]	; (8004304 <menu+0x2e44>)
 80040da:	2110      	movs	r1, #16
 80040dc:	2002      	movs	r0, #2
 80040de:	f7fc fac3 	bl	8000668 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80040e2:	2102      	movs	r1, #2
 80040e4:	4888      	ldr	r0, [pc, #544]	; (8004308 <menu+0x2e48>)
 80040e6:	f005 fd2b 	bl	8009b40 <HAL_GPIO_ReadPin>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d115      	bne.n	800411c <menu+0x2c5c>
 80040f0:	4b86      	ldr	r3, [pc, #536]	; (800430c <menu+0x2e4c>)
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	f083 0301 	eor.w	r3, r3, #1
 80040f8:	b2db      	uxtb	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00e      	beq.n	800411c <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 80040fe:	4b80      	ldr	r3, [pc, #512]	; (8004300 <menu+0x2e40>)
 8004100:	781b      	ldrb	r3, [r3, #0]
 8004102:	3301      	adds	r3, #1
 8004104:	b2da      	uxtb	r2, r3
 8004106:	4b7e      	ldr	r3, [pc, #504]	; (8004300 <menu+0x2e40>)
 8004108:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 800410a:	4b7d      	ldr	r3, [pc, #500]	; (8004300 <menu+0x2e40>)
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	2bb4      	cmp	r3, #180	; 0xb4
 8004110:	d902      	bls.n	8004118 <menu+0x2c58>
				makineCalismaTmr = 0;
 8004112:	4b7b      	ldr	r3, [pc, #492]	; (8004300 <menu+0x2e40>)
 8004114:	2200      	movs	r2, #0
 8004116:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004118:	f001 ff6e 	bl	8005ff8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800411c:	2104      	movs	r1, #4
 800411e:	487a      	ldr	r0, [pc, #488]	; (8004308 <menu+0x2e48>)
 8004120:	f005 fd0e 	bl	8009b40 <HAL_GPIO_ReadPin>
 8004124:	4603      	mov	r3, r0
 8004126:	2b01      	cmp	r3, #1
 8004128:	d115      	bne.n	8004156 <menu+0x2c96>
 800412a:	4b78      	ldr	r3, [pc, #480]	; (800430c <menu+0x2e4c>)
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	f083 0301 	eor.w	r3, r3, #1
 8004132:	b2db      	uxtb	r3, r3
 8004134:	2b00      	cmp	r3, #0
 8004136:	d00e      	beq.n	8004156 <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 8004138:	4b71      	ldr	r3, [pc, #452]	; (8004300 <menu+0x2e40>)
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	3b01      	subs	r3, #1
 800413e:	b2da      	uxtb	r2, r3
 8004140:	4b6f      	ldr	r3, [pc, #444]	; (8004300 <menu+0x2e40>)
 8004142:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 8004144:	4b6e      	ldr	r3, [pc, #440]	; (8004300 <menu+0x2e40>)
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	2bb5      	cmp	r3, #181	; 0xb5
 800414a:	d902      	bls.n	8004152 <menu+0x2c92>
		   		makineCalismaTmr = 180;
 800414c:	4b6c      	ldr	r3, [pc, #432]	; (8004300 <menu+0x2e40>)
 800414e:	22b4      	movs	r2, #180	; 0xb4
 8004150:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004152:	f001 ff51 	bl	8005ff8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004156:	2108      	movs	r1, #8
 8004158:	486b      	ldr	r0, [pc, #428]	; (8004308 <menu+0x2e48>)
 800415a:	f005 fcf1 	bl	8009b40 <HAL_GPIO_ReadPin>
 800415e:	4603      	mov	r3, r0
 8004160:	2b01      	cmp	r3, #1
 8004162:	d10d      	bne.n	8004180 <menu+0x2cc0>
 8004164:	4b69      	ldr	r3, [pc, #420]	; (800430c <menu+0x2e4c>)
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	f083 0301 	eor.w	r3, r3, #1
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d006      	beq.n	8004180 <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 8004172:	4b63      	ldr	r3, [pc, #396]	; (8004300 <menu+0x2e40>)
 8004174:	781a      	ldrb	r2, [r3, #0]
 8004176:	4b66      	ldr	r3, [pc, #408]	; (8004310 <menu+0x2e50>)
 8004178:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 800417a:	4b66      	ldr	r3, [pc, #408]	; (8004314 <menu+0x2e54>)
 800417c:	2201      	movs	r2, #1
 800417e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8004180:	4b65      	ldr	r3, [pc, #404]	; (8004318 <menu+0x2e58>)
 8004182:	781b      	ldrb	r3, [r3, #0]
 8004184:	2b1b      	cmp	r3, #27
 8004186:	f040 8083 	bne.w	8004290 <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 800418a:	4a64      	ldr	r2, [pc, #400]	; (800431c <menu+0x2e5c>)
 800418c:	2101      	movs	r1, #1
 800418e:	2001      	movs	r0, #1
 8004190:	f7fc fa6a 	bl	8000668 <lcd_print>

		if(buzzer == 0) {
 8004194:	4b62      	ldr	r3, [pc, #392]	; (8004320 <menu+0x2e60>)
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d113      	bne.n	80041c4 <menu+0x2d04>
			if(dilSecim == 0) {
 800419c:	4b56      	ldr	r3, [pc, #344]	; (80042f8 <menu+0x2e38>)
 800419e:	781b      	ldrb	r3, [r3, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d105      	bne.n	80041b0 <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 80041a4:	4a5f      	ldr	r2, [pc, #380]	; (8004324 <menu+0x2e64>)
 80041a6:	2101      	movs	r1, #1
 80041a8:	2002      	movs	r0, #2
 80041aa:	f7fc fa5d 	bl	8000668 <lcd_print>
 80041ae:	e020      	b.n	80041f2 <menu+0x2d32>
			} else if(dilSecim == 1) {
 80041b0:	4b51      	ldr	r3, [pc, #324]	; (80042f8 <menu+0x2e38>)
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d11c      	bne.n	80041f2 <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 80041b8:	4a5b      	ldr	r2, [pc, #364]	; (8004328 <menu+0x2e68>)
 80041ba:	2101      	movs	r1, #1
 80041bc:	2002      	movs	r0, #2
 80041be:	f7fc fa53 	bl	8000668 <lcd_print>
 80041c2:	e016      	b.n	80041f2 <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 80041c4:	4b56      	ldr	r3, [pc, #344]	; (8004320 <menu+0x2e60>)
 80041c6:	781b      	ldrb	r3, [r3, #0]
 80041c8:	2b01      	cmp	r3, #1
 80041ca:	d112      	bne.n	80041f2 <menu+0x2d32>
			if(dilSecim == 0) {
 80041cc:	4b4a      	ldr	r3, [pc, #296]	; (80042f8 <menu+0x2e38>)
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d105      	bne.n	80041e0 <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 80041d4:	4a55      	ldr	r2, [pc, #340]	; (800432c <menu+0x2e6c>)
 80041d6:	2101      	movs	r1, #1
 80041d8:	2002      	movs	r0, #2
 80041da:	f7fc fa45 	bl	8000668 <lcd_print>
 80041de:	e008      	b.n	80041f2 <menu+0x2d32>
			} else if(dilSecim == 1) {
 80041e0:	4b45      	ldr	r3, [pc, #276]	; (80042f8 <menu+0x2e38>)
 80041e2:	781b      	ldrb	r3, [r3, #0]
 80041e4:	2b01      	cmp	r3, #1
 80041e6:	d104      	bne.n	80041f2 <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 80041e8:	4a51      	ldr	r2, [pc, #324]	; (8004330 <menu+0x2e70>)
 80041ea:	2101      	movs	r1, #1
 80041ec:	2002      	movs	r0, #2
 80041ee:	f7fc fa3b 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80041f2:	2102      	movs	r1, #2
 80041f4:	4844      	ldr	r0, [pc, #272]	; (8004308 <menu+0x2e48>)
 80041f6:	f005 fca3 	bl	8009b40 <HAL_GPIO_ReadPin>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d115      	bne.n	800422c <menu+0x2d6c>
 8004200:	4b42      	ldr	r3, [pc, #264]	; (800430c <menu+0x2e4c>)
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	f083 0301 	eor.w	r3, r3, #1
 8004208:	b2db      	uxtb	r3, r3
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00e      	beq.n	800422c <menu+0x2d6c>
			buzzer = buzzer + 1;
 800420e:	4b44      	ldr	r3, [pc, #272]	; (8004320 <menu+0x2e60>)
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	3301      	adds	r3, #1
 8004214:	b2da      	uxtb	r2, r3
 8004216:	4b42      	ldr	r3, [pc, #264]	; (8004320 <menu+0x2e60>)
 8004218:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 800421a:	4b41      	ldr	r3, [pc, #260]	; (8004320 <menu+0x2e60>)
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	2b01      	cmp	r3, #1
 8004220:	d902      	bls.n	8004228 <menu+0x2d68>
				buzzer = 0;
 8004222:	4b3f      	ldr	r3, [pc, #252]	; (8004320 <menu+0x2e60>)
 8004224:	2200      	movs	r2, #0
 8004226:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004228:	f001 fee6 	bl	8005ff8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800422c:	2104      	movs	r1, #4
 800422e:	4836      	ldr	r0, [pc, #216]	; (8004308 <menu+0x2e48>)
 8004230:	f005 fc86 	bl	8009b40 <HAL_GPIO_ReadPin>
 8004234:	4603      	mov	r3, r0
 8004236:	2b01      	cmp	r3, #1
 8004238:	d115      	bne.n	8004266 <menu+0x2da6>
 800423a:	4b34      	ldr	r3, [pc, #208]	; (800430c <menu+0x2e4c>)
 800423c:	781b      	ldrb	r3, [r3, #0]
 800423e:	f083 0301 	eor.w	r3, r3, #1
 8004242:	b2db      	uxtb	r3, r3
 8004244:	2b00      	cmp	r3, #0
 8004246:	d00e      	beq.n	8004266 <menu+0x2da6>
			buzzer = buzzer - 1;
 8004248:	4b35      	ldr	r3, [pc, #212]	; (8004320 <menu+0x2e60>)
 800424a:	781b      	ldrb	r3, [r3, #0]
 800424c:	3b01      	subs	r3, #1
 800424e:	b2da      	uxtb	r2, r3
 8004250:	4b33      	ldr	r3, [pc, #204]	; (8004320 <menu+0x2e60>)
 8004252:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 8004254:	4b32      	ldr	r3, [pc, #200]	; (8004320 <menu+0x2e60>)
 8004256:	781b      	ldrb	r3, [r3, #0]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d002      	beq.n	8004262 <menu+0x2da2>
		   		buzzer = 1;
 800425c:	4b30      	ldr	r3, [pc, #192]	; (8004320 <menu+0x2e60>)
 800425e:	2201      	movs	r2, #1
 8004260:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004262:	f001 fec9 	bl	8005ff8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004266:	2108      	movs	r1, #8
 8004268:	4827      	ldr	r0, [pc, #156]	; (8004308 <menu+0x2e48>)
 800426a:	f005 fc69 	bl	8009b40 <HAL_GPIO_ReadPin>
 800426e:	4603      	mov	r3, r0
 8004270:	2b01      	cmp	r3, #1
 8004272:	d10d      	bne.n	8004290 <menu+0x2dd0>
 8004274:	4b25      	ldr	r3, [pc, #148]	; (800430c <menu+0x2e4c>)
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	f083 0301 	eor.w	r3, r3, #1
 800427c:	b2db      	uxtb	r3, r3
 800427e:	2b00      	cmp	r3, #0
 8004280:	d006      	beq.n	8004290 <menu+0x2dd0>
			eepromData[25] = buzzer;
 8004282:	4b27      	ldr	r3, [pc, #156]	; (8004320 <menu+0x2e60>)
 8004284:	781a      	ldrb	r2, [r3, #0]
 8004286:	4b22      	ldr	r3, [pc, #136]	; (8004310 <menu+0x2e50>)
 8004288:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 800428a:	4b22      	ldr	r3, [pc, #136]	; (8004314 <menu+0x2e54>)
 800428c:	2201      	movs	r2, #1
 800428e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8004290:	4b21      	ldr	r3, [pc, #132]	; (8004318 <menu+0x2e58>)
 8004292:	781b      	ldrb	r3, [r3, #0]
 8004294:	2b1c      	cmp	r3, #28
 8004296:	f040 80ab 	bne.w	80043f0 <menu+0x2f30>
		calismaSayModu = 0;
 800429a:	4b26      	ldr	r3, [pc, #152]	; (8004334 <menu+0x2e74>)
 800429c:	2200      	movs	r2, #0
 800429e:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 80042a0:	4a25      	ldr	r2, [pc, #148]	; (8004338 <menu+0x2e78>)
 80042a2:	2101      	movs	r1, #1
 80042a4:	2001      	movs	r0, #1
 80042a6:	f7fc f9df 	bl	8000668 <lcd_print>

		if(demoMode == 0) {
 80042aa:	4b24      	ldr	r3, [pc, #144]	; (800433c <menu+0x2e7c>)
 80042ac:	781b      	ldrb	r3, [r3, #0]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d113      	bne.n	80042da <menu+0x2e1a>
			if(dilSecim == 0) {
 80042b2:	4b11      	ldr	r3, [pc, #68]	; (80042f8 <menu+0x2e38>)
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d105      	bne.n	80042c6 <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 80042ba:	4a1a      	ldr	r2, [pc, #104]	; (8004324 <menu+0x2e64>)
 80042bc:	2101      	movs	r1, #1
 80042be:	2002      	movs	r0, #2
 80042c0:	f7fc f9d2 	bl	8000668 <lcd_print>
 80042c4:	e045      	b.n	8004352 <menu+0x2e92>
			} else if(dilSecim == 1) {
 80042c6:	4b0c      	ldr	r3, [pc, #48]	; (80042f8 <menu+0x2e38>)
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d141      	bne.n	8004352 <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 80042ce:	4a16      	ldr	r2, [pc, #88]	; (8004328 <menu+0x2e68>)
 80042d0:	2101      	movs	r1, #1
 80042d2:	2002      	movs	r0, #2
 80042d4:	f7fc f9c8 	bl	8000668 <lcd_print>
 80042d8:	e03b      	b.n	8004352 <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 80042da:	4b18      	ldr	r3, [pc, #96]	; (800433c <menu+0x2e7c>)
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	2b01      	cmp	r3, #1
 80042e0:	d137      	bne.n	8004352 <menu+0x2e92>
			if(dilSecim == 0){
 80042e2:	4b05      	ldr	r3, [pc, #20]	; (80042f8 <menu+0x2e38>)
 80042e4:	781b      	ldrb	r3, [r3, #0]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d12a      	bne.n	8004340 <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 80042ea:	4a10      	ldr	r2, [pc, #64]	; (800432c <menu+0x2e6c>)
 80042ec:	2101      	movs	r1, #1
 80042ee:	2002      	movs	r0, #2
 80042f0:	f7fc f9ba 	bl	8000668 <lcd_print>
 80042f4:	e02d      	b.n	8004352 <menu+0x2e92>
 80042f6:	bf00      	nop
 80042f8:	20000d56 	.word	0x20000d56
 80042fc:	0800e09c 	.word	0x0800e09c
 8004300:	20000d4d 	.word	0x20000d4d
 8004304:	20000cb8 	.word	0x20000cb8
 8004308:	40010800 	.word	0x40010800
 800430c:	20000d64 	.word	0x20000d64
 8004310:	20000c34 	.word	0x20000c34
 8004314:	20000d61 	.word	0x20000d61
 8004318:	20000d35 	.word	0x20000d35
 800431c:	0800e19c 	.word	0x0800e19c
 8004320:	20000d51 	.word	0x20000d51
 8004324:	0800dac4 	.word	0x0800dac4
 8004328:	0800dad8 	.word	0x0800dad8
 800432c:	0800db24 	.word	0x0800db24
 8004330:	0800db38 	.word	0x0800db38
 8004334:	20000d55 	.word	0x20000d55
 8004338:	0800e1b0 	.word	0x0800e1b0
 800433c:	20000d53 	.word	0x20000d53
			} else if(dilSecim == 1) {
 8004340:	4b71      	ldr	r3, [pc, #452]	; (8004508 <menu+0x3048>)
 8004342:	781b      	ldrb	r3, [r3, #0]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d104      	bne.n	8004352 <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 8004348:	4a70      	ldr	r2, [pc, #448]	; (800450c <menu+0x304c>)
 800434a:	2101      	movs	r1, #1
 800434c:	2002      	movs	r0, #2
 800434e:	f7fc f98b 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004352:	2102      	movs	r1, #2
 8004354:	486e      	ldr	r0, [pc, #440]	; (8004510 <menu+0x3050>)
 8004356:	f005 fbf3 	bl	8009b40 <HAL_GPIO_ReadPin>
 800435a:	4603      	mov	r3, r0
 800435c:	2b01      	cmp	r3, #1
 800435e:	d115      	bne.n	800438c <menu+0x2ecc>
 8004360:	4b6c      	ldr	r3, [pc, #432]	; (8004514 <menu+0x3054>)
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	f083 0301 	eor.w	r3, r3, #1
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d00e      	beq.n	800438c <menu+0x2ecc>
			demoMode = demoMode + 1;
 800436e:	4b6a      	ldr	r3, [pc, #424]	; (8004518 <menu+0x3058>)
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	3301      	adds	r3, #1
 8004374:	b2da      	uxtb	r2, r3
 8004376:	4b68      	ldr	r3, [pc, #416]	; (8004518 <menu+0x3058>)
 8004378:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 800437a:	4b67      	ldr	r3, [pc, #412]	; (8004518 <menu+0x3058>)
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	2b01      	cmp	r3, #1
 8004380:	d902      	bls.n	8004388 <menu+0x2ec8>
				demoMode = 0;
 8004382:	4b65      	ldr	r3, [pc, #404]	; (8004518 <menu+0x3058>)
 8004384:	2200      	movs	r2, #0
 8004386:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004388:	f001 fe36 	bl	8005ff8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800438c:	2104      	movs	r1, #4
 800438e:	4860      	ldr	r0, [pc, #384]	; (8004510 <menu+0x3050>)
 8004390:	f005 fbd6 	bl	8009b40 <HAL_GPIO_ReadPin>
 8004394:	4603      	mov	r3, r0
 8004396:	2b01      	cmp	r3, #1
 8004398:	d115      	bne.n	80043c6 <menu+0x2f06>
 800439a:	4b5e      	ldr	r3, [pc, #376]	; (8004514 <menu+0x3054>)
 800439c:	781b      	ldrb	r3, [r3, #0]
 800439e:	f083 0301 	eor.w	r3, r3, #1
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d00e      	beq.n	80043c6 <menu+0x2f06>
			demoMode = demoMode - 1;
 80043a8:	4b5b      	ldr	r3, [pc, #364]	; (8004518 <menu+0x3058>)
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	3b01      	subs	r3, #1
 80043ae:	b2da      	uxtb	r2, r3
 80043b0:	4b59      	ldr	r3, [pc, #356]	; (8004518 <menu+0x3058>)
 80043b2:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 80043b4:	4b58      	ldr	r3, [pc, #352]	; (8004518 <menu+0x3058>)
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d002      	beq.n	80043c2 <menu+0x2f02>
		   		demoMode = 1;
 80043bc:	4b56      	ldr	r3, [pc, #344]	; (8004518 <menu+0x3058>)
 80043be:	2201      	movs	r2, #1
 80043c0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80043c2:	f001 fe19 	bl	8005ff8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80043c6:	2108      	movs	r1, #8
 80043c8:	4851      	ldr	r0, [pc, #324]	; (8004510 <menu+0x3050>)
 80043ca:	f005 fbb9 	bl	8009b40 <HAL_GPIO_ReadPin>
 80043ce:	4603      	mov	r3, r0
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d10d      	bne.n	80043f0 <menu+0x2f30>
 80043d4:	4b4f      	ldr	r3, [pc, #316]	; (8004514 <menu+0x3054>)
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	f083 0301 	eor.w	r3, r3, #1
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d006      	beq.n	80043f0 <menu+0x2f30>
			eepromData[26] = demoMode;
 80043e2:	4b4d      	ldr	r3, [pc, #308]	; (8004518 <menu+0x3058>)
 80043e4:	781a      	ldrb	r2, [r3, #0]
 80043e6:	4b4d      	ldr	r3, [pc, #308]	; (800451c <menu+0x305c>)
 80043e8:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 80043ea:	4b4d      	ldr	r3, [pc, #308]	; (8004520 <menu+0x3060>)
 80043ec:	2201      	movs	r2, #1
 80043ee:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 80043f0:	4b4c      	ldr	r3, [pc, #304]	; (8004524 <menu+0x3064>)
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	2b1d      	cmp	r3, #29
 80043f6:	f040 8132 	bne.w	800465e <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 80043fa:	4b4b      	ldr	r3, [pc, #300]	; (8004528 <menu+0x3068>)
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d113      	bne.n	800442a <menu+0x2f6a>
 8004402:	4b4a      	ldr	r3, [pc, #296]	; (800452c <menu+0x306c>)
 8004404:	781b      	ldrb	r3, [r3, #0]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d10f      	bne.n	800442a <menu+0x2f6a>
 800440a:	4b49      	ldr	r3, [pc, #292]	; (8004530 <menu+0x3070>)
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d10b      	bne.n	800442a <menu+0x2f6a>
 8004412:	4b48      	ldr	r3, [pc, #288]	; (8004534 <menu+0x3074>)
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d107      	bne.n	800442a <menu+0x2f6a>
 800441a:	4b47      	ldr	r3, [pc, #284]	; (8004538 <menu+0x3078>)
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d103      	bne.n	800442a <menu+0x2f6a>
			calismaSayisiYar = 0;
 8004422:	4b46      	ldr	r3, [pc, #280]	; (800453c <menu+0x307c>)
 8004424:	2200      	movs	r2, #0
 8004426:	701a      	strb	r2, [r3, #0]
 8004428:	e002      	b.n	8004430 <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 800442a:	4b44      	ldr	r3, [pc, #272]	; (800453c <menu+0x307c>)
 800442c:	2201      	movs	r2, #1
 800442e:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 8004430:	4b43      	ldr	r3, [pc, #268]	; (8004540 <menu+0x3080>)
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d154      	bne.n	80044e2 <menu+0x3022>
			if(dilSecim == 0) {
 8004438:	4b33      	ldr	r3, [pc, #204]	; (8004508 <menu+0x3048>)
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d105      	bne.n	800444c <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8004440:	4a40      	ldr	r2, [pc, #256]	; (8004544 <menu+0x3084>)
 8004442:	2101      	movs	r1, #1
 8004444:	2001      	movs	r0, #1
 8004446:	f7fc f90f 	bl	8000668 <lcd_print>
 800444a:	e008      	b.n	800445e <menu+0x2f9e>
			} else if(dilSecim == 1) {
 800444c:	4b2e      	ldr	r3, [pc, #184]	; (8004508 <menu+0x3048>)
 800444e:	781b      	ldrb	r3, [r3, #0]
 8004450:	2b01      	cmp	r3, #1
 8004452:	d104      	bne.n	800445e <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 8004454:	4a3c      	ldr	r2, [pc, #240]	; (8004548 <menu+0x3088>)
 8004456:	2101      	movs	r1, #1
 8004458:	2001      	movs	r0, #1
 800445a:	f7fc f905 	bl	8000668 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 800445e:	4b36      	ldr	r3, [pc, #216]	; (8004538 <menu+0x3078>)
 8004460:	781b      	ldrb	r3, [r3, #0]
 8004462:	220a      	movs	r2, #10
 8004464:	4939      	ldr	r1, [pc, #228]	; (800454c <menu+0x308c>)
 8004466:	4618      	mov	r0, r3
 8004468:	f008 fb96 	bl	800cb98 <itoa>
			lcd_print(2, 12, snum);
 800446c:	4a37      	ldr	r2, [pc, #220]	; (800454c <menu+0x308c>)
 800446e:	210c      	movs	r1, #12
 8004470:	2002      	movs	r0, #2
 8004472:	f7fc f8f9 	bl	8000668 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 8004476:	4b2f      	ldr	r3, [pc, #188]	; (8004534 <menu+0x3074>)
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	220a      	movs	r2, #10
 800447c:	4933      	ldr	r1, [pc, #204]	; (800454c <menu+0x308c>)
 800447e:	4618      	mov	r0, r3
 8004480:	f008 fb8a 	bl	800cb98 <itoa>
			lcd_print(2, 13, snum);
 8004484:	4a31      	ldr	r2, [pc, #196]	; (800454c <menu+0x308c>)
 8004486:	210d      	movs	r1, #13
 8004488:	2002      	movs	r0, #2
 800448a:	f7fc f8ed 	bl	8000668 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 800448e:	4b28      	ldr	r3, [pc, #160]	; (8004530 <menu+0x3070>)
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	220a      	movs	r2, #10
 8004494:	492d      	ldr	r1, [pc, #180]	; (800454c <menu+0x308c>)
 8004496:	4618      	mov	r0, r3
 8004498:	f008 fb7e 	bl	800cb98 <itoa>
			lcd_print(2, 14, snum);
 800449c:	4a2b      	ldr	r2, [pc, #172]	; (800454c <menu+0x308c>)
 800449e:	210e      	movs	r1, #14
 80044a0:	2002      	movs	r0, #2
 80044a2:	f7fc f8e1 	bl	8000668 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 80044a6:	4b21      	ldr	r3, [pc, #132]	; (800452c <menu+0x306c>)
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	220a      	movs	r2, #10
 80044ac:	4927      	ldr	r1, [pc, #156]	; (800454c <menu+0x308c>)
 80044ae:	4618      	mov	r0, r3
 80044b0:	f008 fb72 	bl	800cb98 <itoa>
			lcd_print(2, 15, snum);
 80044b4:	4a25      	ldr	r2, [pc, #148]	; (800454c <menu+0x308c>)
 80044b6:	210f      	movs	r1, #15
 80044b8:	2002      	movs	r0, #2
 80044ba:	f7fc f8d5 	bl	8000668 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 80044be:	4b1a      	ldr	r3, [pc, #104]	; (8004528 <menu+0x3068>)
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	220a      	movs	r2, #10
 80044c4:	4921      	ldr	r1, [pc, #132]	; (800454c <menu+0x308c>)
 80044c6:	4618      	mov	r0, r3
 80044c8:	f008 fb66 	bl	800cb98 <itoa>
			lcd_print(2, 16, snum);
 80044cc:	4a1f      	ldr	r2, [pc, #124]	; (800454c <menu+0x308c>)
 80044ce:	2110      	movs	r1, #16
 80044d0:	2002      	movs	r0, #2
 80044d2:	f7fc f8c9 	bl	8000668 <lcd_print>

			lcd_print(2, 1, "           ");
 80044d6:	4a1e      	ldr	r2, [pc, #120]	; (8004550 <menu+0x3090>)
 80044d8:	2101      	movs	r1, #1
 80044da:	2002      	movs	r0, #2
 80044dc:	f7fc f8c4 	bl	8000668 <lcd_print>
 80044e0:	e048      	b.n	8004574 <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 80044e2:	4b17      	ldr	r3, [pc, #92]	; (8004540 <menu+0x3080>)
 80044e4:	781b      	ldrb	r3, [r3, #0]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d144      	bne.n	8004574 <menu+0x30b4>
			if(dilSecim == 0) {
 80044ea:	4b07      	ldr	r3, [pc, #28]	; (8004508 <menu+0x3048>)
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d132      	bne.n	8004558 <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80044f2:	4a14      	ldr	r2, [pc, #80]	; (8004544 <menu+0x3084>)
 80044f4:	2101      	movs	r1, #1
 80044f6:	2001      	movs	r0, #1
 80044f8:	f7fc f8b6 	bl	8000668 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 80044fc:	4a15      	ldr	r2, [pc, #84]	; (8004554 <menu+0x3094>)
 80044fe:	2101      	movs	r1, #1
 8004500:	2002      	movs	r0, #2
 8004502:	f7fc f8b1 	bl	8000668 <lcd_print>
 8004506:	e035      	b.n	8004574 <menu+0x30b4>
 8004508:	20000d56 	.word	0x20000d56
 800450c:	0800db38 	.word	0x0800db38
 8004510:	40010800 	.word	0x40010800
 8004514:	20000d64 	.word	0x20000d64
 8004518:	20000d53 	.word	0x20000d53
 800451c:	20000c34 	.word	0x20000c34
 8004520:	20000d61 	.word	0x20000d61
 8004524:	20000d35 	.word	0x20000d35
 8004528:	20000d32 	.word	0x20000d32
 800452c:	20000d33 	.word	0x20000d33
 8004530:	200009b1 	.word	0x200009b1
 8004534:	200009b2 	.word	0x200009b2
 8004538:	20000d34 	.word	0x20000d34
 800453c:	20000d76 	.word	0x20000d76
 8004540:	20000d55 	.word	0x20000d55
 8004544:	0800e1c0 	.word	0x0800e1c0
 8004548:	0800e1d4 	.word	0x0800e1d4
 800454c:	20000cb8 	.word	0x20000cb8
 8004550:	0800e1e8 	.word	0x0800e1e8
 8004554:	0800e1f4 	.word	0x0800e1f4
			} else if(dilSecim == 1) {
 8004558:	4b94      	ldr	r3, [pc, #592]	; (80047ac <menu+0x32ec>)
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d109      	bne.n	8004574 <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 8004560:	4a93      	ldr	r2, [pc, #588]	; (80047b0 <menu+0x32f0>)
 8004562:	2101      	movs	r1, #1
 8004564:	2001      	movs	r0, #1
 8004566:	f7fc f87f 	bl	8000668 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 800456a:	4a92      	ldr	r2, [pc, #584]	; (80047b4 <menu+0x32f4>)
 800456c:	2101      	movs	r1, #1
 800456e:	2002      	movs	r0, #2
 8004570:	f7fc f87a 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8004574:	2102      	movs	r1, #2
 8004576:	4890      	ldr	r0, [pc, #576]	; (80047b8 <menu+0x32f8>)
 8004578:	f005 fae2 	bl	8009b40 <HAL_GPIO_ReadPin>
 800457c:	4603      	mov	r3, r0
 800457e:	2b01      	cmp	r3, #1
 8004580:	d119      	bne.n	80045b6 <menu+0x30f6>
 8004582:	4b8e      	ldr	r3, [pc, #568]	; (80047bc <menu+0x32fc>)
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	f083 0301 	eor.w	r3, r3, #1
 800458a:	b2db      	uxtb	r3, r3
 800458c:	2b00      	cmp	r3, #0
 800458e:	d012      	beq.n	80045b6 <menu+0x30f6>
 8004590:	4b8b      	ldr	r3, [pc, #556]	; (80047c0 <menu+0x3300>)
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d00e      	beq.n	80045b6 <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 8004598:	4b8a      	ldr	r3, [pc, #552]	; (80047c4 <menu+0x3304>)
 800459a:	781b      	ldrb	r3, [r3, #0]
 800459c:	3301      	adds	r3, #1
 800459e:	b2da      	uxtb	r2, r3
 80045a0:	4b88      	ldr	r3, [pc, #544]	; (80047c4 <menu+0x3304>)
 80045a2:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 80045a4:	4b87      	ldr	r3, [pc, #540]	; (80047c4 <menu+0x3304>)
 80045a6:	781b      	ldrb	r3, [r3, #0]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d902      	bls.n	80045b2 <menu+0x30f2>
				calismaSayModu = 0;
 80045ac:	4b85      	ldr	r3, [pc, #532]	; (80047c4 <menu+0x3304>)
 80045ae:	2200      	movs	r2, #0
 80045b0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80045b2:	f001 fd21 	bl	8005ff8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80045b6:	2104      	movs	r1, #4
 80045b8:	487f      	ldr	r0, [pc, #508]	; (80047b8 <menu+0x32f8>)
 80045ba:	f005 fac1 	bl	8009b40 <HAL_GPIO_ReadPin>
 80045be:	4603      	mov	r3, r0
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d119      	bne.n	80045f8 <menu+0x3138>
 80045c4:	4b7d      	ldr	r3, [pc, #500]	; (80047bc <menu+0x32fc>)
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	f083 0301 	eor.w	r3, r3, #1
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d012      	beq.n	80045f8 <menu+0x3138>
 80045d2:	4b7b      	ldr	r3, [pc, #492]	; (80047c0 <menu+0x3300>)
 80045d4:	781b      	ldrb	r3, [r3, #0]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00e      	beq.n	80045f8 <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 80045da:	4b7a      	ldr	r3, [pc, #488]	; (80047c4 <menu+0x3304>)
 80045dc:	781b      	ldrb	r3, [r3, #0]
 80045de:	3b01      	subs	r3, #1
 80045e0:	b2da      	uxtb	r2, r3
 80045e2:	4b78      	ldr	r3, [pc, #480]	; (80047c4 <menu+0x3304>)
 80045e4:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 80045e6:	4b77      	ldr	r3, [pc, #476]	; (80047c4 <menu+0x3304>)
 80045e8:	781b      	ldrb	r3, [r3, #0]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d002      	beq.n	80045f4 <menu+0x3134>
		   		calismaSayModu = 1;
 80045ee:	4b75      	ldr	r3, [pc, #468]	; (80047c4 <menu+0x3304>)
 80045f0:	2201      	movs	r2, #1
 80045f2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80045f4:	f001 fd00 	bl	8005ff8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80045f8:	2108      	movs	r1, #8
 80045fa:	486f      	ldr	r0, [pc, #444]	; (80047b8 <menu+0x32f8>)
 80045fc:	f005 faa0 	bl	8009b40 <HAL_GPIO_ReadPin>
 8004600:	4603      	mov	r3, r0
 8004602:	2b01      	cmp	r3, #1
 8004604:	d12b      	bne.n	800465e <menu+0x319e>
 8004606:	4b6d      	ldr	r3, [pc, #436]	; (80047bc <menu+0x32fc>)
 8004608:	781b      	ldrb	r3, [r3, #0]
 800460a:	f083 0301 	eor.w	r3, r3, #1
 800460e:	b2db      	uxtb	r3, r3
 8004610:	2b00      	cmp	r3, #0
 8004612:	d024      	beq.n	800465e <menu+0x319e>
			eepromData[32] = 0;
 8004614:	4b6c      	ldr	r3, [pc, #432]	; (80047c8 <menu+0x3308>)
 8004616:	2200      	movs	r2, #0
 8004618:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 800461c:	4b6a      	ldr	r3, [pc, #424]	; (80047c8 <menu+0x3308>)
 800461e:	2200      	movs	r2, #0
 8004620:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 8004622:	4b69      	ldr	r3, [pc, #420]	; (80047c8 <menu+0x3308>)
 8004624:	2200      	movs	r2, #0
 8004626:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 8004628:	4b67      	ldr	r3, [pc, #412]	; (80047c8 <menu+0x3308>)
 800462a:	2200      	movs	r2, #0
 800462c:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 800462e:	4b66      	ldr	r3, [pc, #408]	; (80047c8 <menu+0x3308>)
 8004630:	2200      	movs	r2, #0
 8004632:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 8004634:	4b65      	ldr	r3, [pc, #404]	; (80047cc <menu+0x330c>)
 8004636:	2200      	movs	r2, #0
 8004638:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 800463a:	4b65      	ldr	r3, [pc, #404]	; (80047d0 <menu+0x3310>)
 800463c:	2200      	movs	r2, #0
 800463e:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 8004640:	4b64      	ldr	r3, [pc, #400]	; (80047d4 <menu+0x3314>)
 8004642:	2200      	movs	r2, #0
 8004644:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 8004646:	4b64      	ldr	r3, [pc, #400]	; (80047d8 <menu+0x3318>)
 8004648:	2200      	movs	r2, #0
 800464a:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 800464c:	4b63      	ldr	r3, [pc, #396]	; (80047dc <menu+0x331c>)
 800464e:	2200      	movs	r2, #0
 8004650:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 8004652:	4b5c      	ldr	r3, [pc, #368]	; (80047c4 <menu+0x3304>)
 8004654:	2200      	movs	r2, #0
 8004656:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8004658:	4b61      	ldr	r3, [pc, #388]	; (80047e0 <menu+0x3320>)
 800465a:	2201      	movs	r2, #1
 800465c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 800465e:	4b61      	ldr	r3, [pc, #388]	; (80047e4 <menu+0x3324>)
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	2b1e      	cmp	r3, #30
 8004664:	d16f      	bne.n	8004746 <menu+0x3286>
		calismaSayModu = 0;
 8004666:	4b57      	ldr	r3, [pc, #348]	; (80047c4 <menu+0x3304>)
 8004668:	2200      	movs	r2, #0
 800466a:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 800466c:	4b4f      	ldr	r3, [pc, #316]	; (80047ac <menu+0x32ec>)
 800466e:	781b      	ldrb	r3, [r3, #0]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d10a      	bne.n	800468a <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 8004674:	4a5c      	ldr	r2, [pc, #368]	; (80047e8 <menu+0x3328>)
 8004676:	2101      	movs	r1, #1
 8004678:	2001      	movs	r0, #1
 800467a:	f7fb fff5 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 800467e:	4a5b      	ldr	r2, [pc, #364]	; (80047ec <menu+0x332c>)
 8004680:	2101      	movs	r1, #1
 8004682:	2002      	movs	r0, #2
 8004684:	f7fb fff0 	bl	8000668 <lcd_print>
 8004688:	e00d      	b.n	80046a6 <menu+0x31e6>
		} else if(dilSecim == 1) {
 800468a:	4b48      	ldr	r3, [pc, #288]	; (80047ac <menu+0x32ec>)
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d109      	bne.n	80046a6 <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 8004692:	4a57      	ldr	r2, [pc, #348]	; (80047f0 <menu+0x3330>)
 8004694:	2101      	movs	r1, #1
 8004696:	2001      	movs	r0, #1
 8004698:	f7fb ffe6 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 800469c:	4a55      	ldr	r2, [pc, #340]	; (80047f4 <menu+0x3334>)
 800469e:	2101      	movs	r1, #1
 80046a0:	2002      	movs	r0, #2
 80046a2:	f7fb ffe1 	bl	8000668 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80046a6:	2102      	movs	r1, #2
 80046a8:	4843      	ldr	r0, [pc, #268]	; (80047b8 <menu+0x32f8>)
 80046aa:	f005 fa49 	bl	8009b40 <HAL_GPIO_ReadPin>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d115      	bne.n	80046e0 <menu+0x3220>
 80046b4:	4b41      	ldr	r3, [pc, #260]	; (80047bc <menu+0x32fc>)
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	f083 0301 	eor.w	r3, r3, #1
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d00e      	beq.n	80046e0 <menu+0x3220>
			dilSecim = dilSecim + 1;
 80046c2:	4b3a      	ldr	r3, [pc, #232]	; (80047ac <menu+0x32ec>)
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	3301      	adds	r3, #1
 80046c8:	b2da      	uxtb	r2, r3
 80046ca:	4b38      	ldr	r3, [pc, #224]	; (80047ac <menu+0x32ec>)
 80046cc:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 80046ce:	4b37      	ldr	r3, [pc, #220]	; (80047ac <menu+0x32ec>)
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	2b01      	cmp	r3, #1
 80046d4:	d902      	bls.n	80046dc <menu+0x321c>
				dilSecim = 0;
 80046d6:	4b35      	ldr	r3, [pc, #212]	; (80047ac <menu+0x32ec>)
 80046d8:	2200      	movs	r2, #0
 80046da:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 80046dc:	f001 fc8c 	bl	8005ff8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80046e0:	2104      	movs	r1, #4
 80046e2:	4835      	ldr	r0, [pc, #212]	; (80047b8 <menu+0x32f8>)
 80046e4:	f005 fa2c 	bl	8009b40 <HAL_GPIO_ReadPin>
 80046e8:	4603      	mov	r3, r0
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d115      	bne.n	800471a <menu+0x325a>
 80046ee:	4b33      	ldr	r3, [pc, #204]	; (80047bc <menu+0x32fc>)
 80046f0:	781b      	ldrb	r3, [r3, #0]
 80046f2:	f083 0301 	eor.w	r3, r3, #1
 80046f6:	b2db      	uxtb	r3, r3
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d00e      	beq.n	800471a <menu+0x325a>
			dilSecim = dilSecim - 1;
 80046fc:	4b2b      	ldr	r3, [pc, #172]	; (80047ac <menu+0x32ec>)
 80046fe:	781b      	ldrb	r3, [r3, #0]
 8004700:	3b01      	subs	r3, #1
 8004702:	b2da      	uxtb	r2, r3
 8004704:	4b29      	ldr	r3, [pc, #164]	; (80047ac <menu+0x32ec>)
 8004706:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 8004708:	4b28      	ldr	r3, [pc, #160]	; (80047ac <menu+0x32ec>)
 800470a:	781b      	ldrb	r3, [r3, #0]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d002      	beq.n	8004716 <menu+0x3256>
		   		dilSecim = 1;
 8004710:	4b26      	ldr	r3, [pc, #152]	; (80047ac <menu+0x32ec>)
 8004712:	2201      	movs	r2, #1
 8004714:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8004716:	f001 fc6f 	bl	8005ff8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800471a:	2108      	movs	r1, #8
 800471c:	4826      	ldr	r0, [pc, #152]	; (80047b8 <menu+0x32f8>)
 800471e:	f005 fa0f 	bl	8009b40 <HAL_GPIO_ReadPin>
 8004722:	4603      	mov	r3, r0
 8004724:	2b01      	cmp	r3, #1
 8004726:	d10e      	bne.n	8004746 <menu+0x3286>
 8004728:	4b24      	ldr	r3, [pc, #144]	; (80047bc <menu+0x32fc>)
 800472a:	781b      	ldrb	r3, [r3, #0]
 800472c:	f083 0301 	eor.w	r3, r3, #1
 8004730:	b2db      	uxtb	r3, r3
 8004732:	2b00      	cmp	r3, #0
 8004734:	d007      	beq.n	8004746 <menu+0x3286>
			eepromData[33] = dilSecim;
 8004736:	4b1d      	ldr	r3, [pc, #116]	; (80047ac <menu+0x32ec>)
 8004738:	781a      	ldrb	r2, [r3, #0]
 800473a:	4b23      	ldr	r3, [pc, #140]	; (80047c8 <menu+0x3308>)
 800473c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 8004740:	4b27      	ldr	r3, [pc, #156]	; (80047e0 <menu+0x3320>)
 8004742:	2201      	movs	r2, #1
 8004744:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8004746:	4b27      	ldr	r3, [pc, #156]	; (80047e4 <menu+0x3324>)
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	2b1f      	cmp	r3, #31
 800474c:	f040 80b7 	bne.w	80048be <menu+0x33fe>
		calismaSayModu = 0;
 8004750:	4b1c      	ldr	r3, [pc, #112]	; (80047c4 <menu+0x3304>)
 8004752:	2200      	movs	r2, #0
 8004754:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 8004756:	4a28      	ldr	r2, [pc, #160]	; (80047f8 <menu+0x3338>)
 8004758:	2101      	movs	r1, #1
 800475a:	2001      	movs	r0, #1
 800475c:	f7fb ff84 	bl	8000668 <lcd_print>

		if(iotMode == 0) {
 8004760:	4b26      	ldr	r3, [pc, #152]	; (80047fc <menu+0x333c>)
 8004762:	781b      	ldrb	r3, [r3, #0]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d113      	bne.n	8004790 <menu+0x32d0>
			if(dilSecim == 0) {
 8004768:	4b10      	ldr	r3, [pc, #64]	; (80047ac <menu+0x32ec>)
 800476a:	781b      	ldrb	r3, [r3, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d105      	bne.n	800477c <menu+0x32bc>
				lcd_print(2, 1, "Pasif           ");
 8004770:	4a23      	ldr	r2, [pc, #140]	; (8004800 <menu+0x3340>)
 8004772:	2101      	movs	r1, #1
 8004774:	2002      	movs	r0, #2
 8004776:	f7fb ff77 	bl	8000668 <lcd_print>
 800477a:	e050      	b.n	800481e <menu+0x335e>
			} else if(dilSecim == 1) {
 800477c:	4b0b      	ldr	r3, [pc, #44]	; (80047ac <menu+0x32ec>)
 800477e:	781b      	ldrb	r3, [r3, #0]
 8004780:	2b01      	cmp	r3, #1
 8004782:	d14c      	bne.n	800481e <menu+0x335e>
				lcd_print(2, 1, "Passive         ");
 8004784:	4a1f      	ldr	r2, [pc, #124]	; (8004804 <menu+0x3344>)
 8004786:	2101      	movs	r1, #1
 8004788:	2002      	movs	r0, #2
 800478a:	f7fb ff6d 	bl	8000668 <lcd_print>
 800478e:	e046      	b.n	800481e <menu+0x335e>
			}
		} else if(iotMode == 1) {
 8004790:	4b1a      	ldr	r3, [pc, #104]	; (80047fc <menu+0x333c>)
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	2b01      	cmp	r3, #1
 8004796:	d142      	bne.n	800481e <menu+0x335e>
			if(dilSecim == 0){
 8004798:	4b04      	ldr	r3, [pc, #16]	; (80047ac <menu+0x32ec>)
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d135      	bne.n	800480c <menu+0x334c>
				lcd_print(2, 1, "Aktif           ");
 80047a0:	4a19      	ldr	r2, [pc, #100]	; (8004808 <menu+0x3348>)
 80047a2:	2101      	movs	r1, #1
 80047a4:	2002      	movs	r0, #2
 80047a6:	f7fb ff5f 	bl	8000668 <lcd_print>
 80047aa:	e038      	b.n	800481e <menu+0x335e>
 80047ac:	20000d56 	.word	0x20000d56
 80047b0:	0800e1d4 	.word	0x0800e1d4
 80047b4:	0800e208 	.word	0x0800e208
 80047b8:	40010800 	.word	0x40010800
 80047bc:	20000d64 	.word	0x20000d64
 80047c0:	20000d76 	.word	0x20000d76
 80047c4:	20000d55 	.word	0x20000d55
 80047c8:	20000c34 	.word	0x20000c34
 80047cc:	20000d34 	.word	0x20000d34
 80047d0:	200009b2 	.word	0x200009b2
 80047d4:	200009b1 	.word	0x200009b1
 80047d8:	20000d33 	.word	0x20000d33
 80047dc:	20000d32 	.word	0x20000d32
 80047e0:	20000d61 	.word	0x20000d61
 80047e4:	20000d35 	.word	0x20000d35
 80047e8:	0800e21c 	.word	0x0800e21c
 80047ec:	0800e230 	.word	0x0800e230
 80047f0:	0800e244 	.word	0x0800e244
 80047f4:	0800e258 	.word	0x0800e258
 80047f8:	0800e26c 	.word	0x0800e26c
 80047fc:	20000d54 	.word	0x20000d54
 8004800:	0800dac4 	.word	0x0800dac4
 8004804:	0800dad8 	.word	0x0800dad8
 8004808:	0800db24 	.word	0x0800db24
			} else if(dilSecim == 1) {
 800480c:	4b94      	ldr	r3, [pc, #592]	; (8004a60 <menu+0x35a0>)
 800480e:	781b      	ldrb	r3, [r3, #0]
 8004810:	2b01      	cmp	r3, #1
 8004812:	d104      	bne.n	800481e <menu+0x335e>
				lcd_print(2, 1, "Active          ");
 8004814:	4a93      	ldr	r2, [pc, #588]	; (8004a64 <menu+0x35a4>)
 8004816:	2101      	movs	r1, #1
 8004818:	2002      	movs	r0, #2
 800481a:	f7fb ff25 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800481e:	2102      	movs	r1, #2
 8004820:	4891      	ldr	r0, [pc, #580]	; (8004a68 <menu+0x35a8>)
 8004822:	f005 f98d 	bl	8009b40 <HAL_GPIO_ReadPin>
 8004826:	4603      	mov	r3, r0
 8004828:	2b01      	cmp	r3, #1
 800482a:	d115      	bne.n	8004858 <menu+0x3398>
 800482c:	4b8f      	ldr	r3, [pc, #572]	; (8004a6c <menu+0x35ac>)
 800482e:	781b      	ldrb	r3, [r3, #0]
 8004830:	f083 0301 	eor.w	r3, r3, #1
 8004834:	b2db      	uxtb	r3, r3
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00e      	beq.n	8004858 <menu+0x3398>
			iotMode = iotMode + 1;
 800483a:	4b8d      	ldr	r3, [pc, #564]	; (8004a70 <menu+0x35b0>)
 800483c:	781b      	ldrb	r3, [r3, #0]
 800483e:	3301      	adds	r3, #1
 8004840:	b2da      	uxtb	r2, r3
 8004842:	4b8b      	ldr	r3, [pc, #556]	; (8004a70 <menu+0x35b0>)
 8004844:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 8004846:	4b8a      	ldr	r3, [pc, #552]	; (8004a70 <menu+0x35b0>)
 8004848:	781b      	ldrb	r3, [r3, #0]
 800484a:	2b01      	cmp	r3, #1
 800484c:	d902      	bls.n	8004854 <menu+0x3394>
				iotMode = 0;
 800484e:	4b88      	ldr	r3, [pc, #544]	; (8004a70 <menu+0x35b0>)
 8004850:	2200      	movs	r2, #0
 8004852:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004854:	f001 fbd0 	bl	8005ff8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004858:	2104      	movs	r1, #4
 800485a:	4883      	ldr	r0, [pc, #524]	; (8004a68 <menu+0x35a8>)
 800485c:	f005 f970 	bl	8009b40 <HAL_GPIO_ReadPin>
 8004860:	4603      	mov	r3, r0
 8004862:	2b01      	cmp	r3, #1
 8004864:	d115      	bne.n	8004892 <menu+0x33d2>
 8004866:	4b81      	ldr	r3, [pc, #516]	; (8004a6c <menu+0x35ac>)
 8004868:	781b      	ldrb	r3, [r3, #0]
 800486a:	f083 0301 	eor.w	r3, r3, #1
 800486e:	b2db      	uxtb	r3, r3
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00e      	beq.n	8004892 <menu+0x33d2>
			iotMode = iotMode - 1;
 8004874:	4b7e      	ldr	r3, [pc, #504]	; (8004a70 <menu+0x35b0>)
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	3b01      	subs	r3, #1
 800487a:	b2da      	uxtb	r2, r3
 800487c:	4b7c      	ldr	r3, [pc, #496]	; (8004a70 <menu+0x35b0>)
 800487e:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8004880:	4b7b      	ldr	r3, [pc, #492]	; (8004a70 <menu+0x35b0>)
 8004882:	781b      	ldrb	r3, [r3, #0]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d002      	beq.n	800488e <menu+0x33ce>
		   		iotMode = 1;
 8004888:	4b79      	ldr	r3, [pc, #484]	; (8004a70 <menu+0x35b0>)
 800488a:	2201      	movs	r2, #1
 800488c:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 800488e:	f001 fbb3 	bl	8005ff8 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004892:	2108      	movs	r1, #8
 8004894:	4874      	ldr	r0, [pc, #464]	; (8004a68 <menu+0x35a8>)
 8004896:	f005 f953 	bl	8009b40 <HAL_GPIO_ReadPin>
 800489a:	4603      	mov	r3, r0
 800489c:	2b01      	cmp	r3, #1
 800489e:	d10e      	bne.n	80048be <menu+0x33fe>
 80048a0:	4b72      	ldr	r3, [pc, #456]	; (8004a6c <menu+0x35ac>)
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	f083 0301 	eor.w	r3, r3, #1
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d007      	beq.n	80048be <menu+0x33fe>
			eepromData[47] = iotMode;
 80048ae:	4b70      	ldr	r3, [pc, #448]	; (8004a70 <menu+0x35b0>)
 80048b0:	781a      	ldrb	r2, [r3, #0]
 80048b2:	4b70      	ldr	r3, [pc, #448]	; (8004a74 <menu+0x35b4>)
 80048b4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
			hafizaYaz = 1;
 80048b8:	4b6f      	ldr	r3, [pc, #444]	; (8004a78 <menu+0x35b8>)
 80048ba:	2201      	movs	r2, #1
 80048bc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 80048be:	4b6f      	ldr	r3, [pc, #444]	; (8004a7c <menu+0x35bc>)
 80048c0:	781b      	ldrb	r3, [r3, #0]
 80048c2:	2b20      	cmp	r3, #32
 80048c4:	d150      	bne.n	8004968 <menu+0x34a8>
		calismaSayModu = 0;
 80048c6:	4b6e      	ldr	r3, [pc, #440]	; (8004a80 <menu+0x35c0>)
 80048c8:	2200      	movs	r2, #0
 80048ca:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "MAKINE ID       ");
 80048cc:	4a6d      	ldr	r2, [pc, #436]	; (8004a84 <menu+0x35c4>)
 80048ce:	2101      	movs	r1, #1
 80048d0:	2001      	movs	r0, #1
 80048d2:	f7fb fec9 	bl	8000668 <lcd_print>

		lcd_print(2, 1, machineID);
 80048d6:	4a6c      	ldr	r2, [pc, #432]	; (8004a88 <menu+0x35c8>)
 80048d8:	2101      	movs	r1, #1
 80048da:	2002      	movs	r0, #2
 80048dc:	f7fb fec4 	bl	8000668 <lcd_print>
		lcd_print(2, 1+strlen(machineID), emptyArray);
 80048e0:	4869      	ldr	r0, [pc, #420]	; (8004a88 <menu+0x35c8>)
 80048e2:	f7fb fc9f 	bl	8000224 <strlen>
 80048e6:	4603      	mov	r3, r0
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	3301      	adds	r3, #1
 80048ec:	b2db      	uxtb	r3, r3
 80048ee:	4a67      	ldr	r2, [pc, #412]	; (8004a8c <menu+0x35cc>)
 80048f0:	4619      	mov	r1, r3
 80048f2:	2002      	movs	r0, #2
 80048f4:	f7fb feb8 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80048f8:	2102      	movs	r1, #2
 80048fa:	485b      	ldr	r0, [pc, #364]	; (8004a68 <menu+0x35a8>)
 80048fc:	f005 f920 	bl	8009b40 <HAL_GPIO_ReadPin>
 8004900:	4603      	mov	r3, r0
 8004902:	2b01      	cmp	r3, #1
 8004904:	d130      	bne.n	8004968 <menu+0x34a8>
 8004906:	2104      	movs	r1, #4
 8004908:	4857      	ldr	r0, [pc, #348]	; (8004a68 <menu+0x35a8>)
 800490a:	f005 f919 	bl	8009b40 <HAL_GPIO_ReadPin>
 800490e:	4603      	mov	r3, r0
 8004910:	2b01      	cmp	r3, #1
 8004912:	d129      	bne.n	8004968 <menu+0x34a8>
 8004914:	4b55      	ldr	r3, [pc, #340]	; (8004a6c <menu+0x35ac>)
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	f083 0301 	eor.w	r3, r3, #1
 800491c:	b2db      	uxtb	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d022      	beq.n	8004968 <menu+0x34a8>
			takeMachineID(0);
 8004922:	2000      	movs	r0, #0
 8004924:	f7fc f8ca 	bl	8000abc <takeMachineID>

			HAL_Delay(50);
 8004928:	2032      	movs	r0, #50	; 0x32
 800492a:	f004 fb39 	bl	8008fa0 <HAL_Delay>

			lcd_print(2, 1, machineID);
 800492e:	4a56      	ldr	r2, [pc, #344]	; (8004a88 <menu+0x35c8>)
 8004930:	2101      	movs	r1, #1
 8004932:	2002      	movs	r0, #2
 8004934:	f7fb fe98 	bl	8000668 <lcd_print>
			lcd_print(2, 13, "    ");
 8004938:	4a55      	ldr	r2, [pc, #340]	; (8004a90 <menu+0x35d0>)
 800493a:	210d      	movs	r1, #13
 800493c:	2002      	movs	r0, #2
 800493e:	f7fb fe93 	bl	8000668 <lcd_print>

			HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8004942:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004946:	9302      	str	r3, [sp, #8]
 8004948:	236e      	movs	r3, #110	; 0x6e
 800494a:	9301      	str	r3, [sp, #4]
 800494c:	4b49      	ldr	r3, [pc, #292]	; (8004a74 <menu+0x35b4>)
 800494e:	9300      	str	r3, [sp, #0]
 8004950:	236e      	movs	r3, #110	; 0x6e
 8004952:	2200      	movs	r2, #0
 8004954:	21a0      	movs	r1, #160	; 0xa0
 8004956:	484f      	ldr	r0, [pc, #316]	; (8004a94 <menu+0x35d4>)
 8004958:	f005 fbac 	bl	800a0b4 <HAL_I2C_Mem_Write>
			HAL_Delay(500);
 800495c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004960:	f004 fb1e 	bl	8008fa0 <HAL_Delay>

			bekle();
 8004964:	f001 fb48 	bl	8005ff8 <bekle>
		}
	}

	if (menuSayac == 33) {
 8004968:	4b44      	ldr	r3, [pc, #272]	; (8004a7c <menu+0x35bc>)
 800496a:	781b      	ldrb	r3, [r3, #0]
 800496c:	2b21      	cmp	r3, #33	; 0x21
 800496e:	d153      	bne.n	8004a18 <menu+0x3558>
		calismaSayModu = 0;
 8004970:	4b43      	ldr	r3, [pc, #268]	; (8004a80 <menu+0x35c0>)
 8004972:	2200      	movs	r2, #0
 8004974:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI SSID       ");
 8004976:	4a48      	ldr	r2, [pc, #288]	; (8004a98 <menu+0x35d8>)
 8004978:	2101      	movs	r1, #1
 800497a:	2001      	movs	r0, #1
 800497c:	f7fb fe74 	bl	8000668 <lcd_print>
		if(strlen(wifiSSID) <=16) {
 8004980:	4846      	ldr	r0, [pc, #280]	; (8004a9c <menu+0x35dc>)
 8004982:	f7fb fc4f 	bl	8000224 <strlen>
 8004986:	4603      	mov	r3, r0
 8004988:	2b10      	cmp	r3, #16
 800498a:	d811      	bhi.n	80049b0 <menu+0x34f0>
			lcd_print(2, 1, wifiSSID);
 800498c:	4a43      	ldr	r2, [pc, #268]	; (8004a9c <menu+0x35dc>)
 800498e:	2101      	movs	r1, #1
 8004990:	2002      	movs	r0, #2
 8004992:	f7fb fe69 	bl	8000668 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 8004996:	4841      	ldr	r0, [pc, #260]	; (8004a9c <menu+0x35dc>)
 8004998:	f7fb fc44 	bl	8000224 <strlen>
 800499c:	4603      	mov	r3, r0
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	3301      	adds	r3, #1
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	4a39      	ldr	r2, [pc, #228]	; (8004a8c <menu+0x35cc>)
 80049a6:	4619      	mov	r1, r3
 80049a8:	2002      	movs	r0, #2
 80049aa:	f7fb fe5d 	bl	8000668 <lcd_print>
 80049ae:	e005      	b.n	80049bc <menu+0x34fc>
		} else {
			slideText(wifiSSID, 1, 2, 0);
 80049b0:	2300      	movs	r3, #0
 80049b2:	2202      	movs	r2, #2
 80049b4:	2101      	movs	r1, #1
 80049b6:	4839      	ldr	r0, [pc, #228]	; (8004a9c <menu+0x35dc>)
 80049b8:	f7fc fcdc 	bl	8001374 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80049bc:	2102      	movs	r1, #2
 80049be:	482a      	ldr	r0, [pc, #168]	; (8004a68 <menu+0x35a8>)
 80049c0:	f005 f8be 	bl	8009b40 <HAL_GPIO_ReadPin>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b01      	cmp	r3, #1
 80049c8:	d126      	bne.n	8004a18 <menu+0x3558>
 80049ca:	2104      	movs	r1, #4
 80049cc:	4826      	ldr	r0, [pc, #152]	; (8004a68 <menu+0x35a8>)
 80049ce:	f005 f8b7 	bl	8009b40 <HAL_GPIO_ReadPin>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d11f      	bne.n	8004a18 <menu+0x3558>
 80049d8:	4b24      	ldr	r3, [pc, #144]	; (8004a6c <menu+0x35ac>)
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	f083 0301 	eor.w	r3, r3, #1
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d018      	beq.n	8004a18 <menu+0x3558>
			takeWifiSSID(0);
 80049e6:	2000      	movs	r0, #0
 80049e8:	f7fc f9ac 	bl	8000d44 <takeWifiSSID>

			HAL_Delay(50);
 80049ec:	2032      	movs	r0, #50	; 0x32
 80049ee:	f004 fad7 	bl	8008fa0 <HAL_Delay>

			lcd_print(2, 1, wifiSSID);
 80049f2:	4a2a      	ldr	r2, [pc, #168]	; (8004a9c <menu+0x35dc>)
 80049f4:	2101      	movs	r1, #1
 80049f6:	2002      	movs	r0, #2
 80049f8:	f7fb fe36 	bl	8000668 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 80049fc:	4827      	ldr	r0, [pc, #156]	; (8004a9c <menu+0x35dc>)
 80049fe:	f7fb fc11 	bl	8000224 <strlen>
 8004a02:	4603      	mov	r3, r0
 8004a04:	b2db      	uxtb	r3, r3
 8004a06:	3301      	adds	r3, #1
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	4a20      	ldr	r2, [pc, #128]	; (8004a8c <menu+0x35cc>)
 8004a0c:	4619      	mov	r1, r3
 8004a0e:	2002      	movs	r0, #2
 8004a10:	f7fb fe2a 	bl	8000668 <lcd_print>

			bekle();
 8004a14:	f001 faf0 	bl	8005ff8 <bekle>
		}
	}

	if (menuSayac == 34) {
 8004a18:	4b18      	ldr	r3, [pc, #96]	; (8004a7c <menu+0x35bc>)
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	2b22      	cmp	r3, #34	; 0x22
 8004a1e:	d177      	bne.n	8004b10 <menu+0x3650>
		calismaSayModu = 0;
 8004a20:	4b17      	ldr	r3, [pc, #92]	; (8004a80 <menu+0x35c0>)
 8004a22:	2200      	movs	r2, #0
 8004a24:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI PASS       ");
 8004a26:	4a1e      	ldr	r2, [pc, #120]	; (8004aa0 <menu+0x35e0>)
 8004a28:	2101      	movs	r1, #1
 8004a2a:	2001      	movs	r0, #1
 8004a2c:	f7fb fe1c 	bl	8000668 <lcd_print>
		if(strlen(wifiPass) <= 16) {
 8004a30:	481c      	ldr	r0, [pc, #112]	; (8004aa4 <menu+0x35e4>)
 8004a32:	f7fb fbf7 	bl	8000224 <strlen>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b10      	cmp	r3, #16
 8004a3a:	d835      	bhi.n	8004aa8 <menu+0x35e8>
			lcd_print(2, 1, wifiPass);
 8004a3c:	4a19      	ldr	r2, [pc, #100]	; (8004aa4 <menu+0x35e4>)
 8004a3e:	2101      	movs	r1, #1
 8004a40:	2002      	movs	r0, #2
 8004a42:	f7fb fe11 	bl	8000668 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 8004a46:	4817      	ldr	r0, [pc, #92]	; (8004aa4 <menu+0x35e4>)
 8004a48:	f7fb fbec 	bl	8000224 <strlen>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	b2db      	uxtb	r3, r3
 8004a50:	3301      	adds	r3, #1
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	4a0d      	ldr	r2, [pc, #52]	; (8004a8c <menu+0x35cc>)
 8004a56:	4619      	mov	r1, r3
 8004a58:	2002      	movs	r0, #2
 8004a5a:	f7fb fe05 	bl	8000668 <lcd_print>
 8004a5e:	e029      	b.n	8004ab4 <menu+0x35f4>
 8004a60:	20000d56 	.word	0x20000d56
 8004a64:	0800db38 	.word	0x0800db38
 8004a68:	40010800 	.word	0x40010800
 8004a6c:	20000d64 	.word	0x20000d64
 8004a70:	20000d54 	.word	0x20000d54
 8004a74:	20000c34 	.word	0x20000c34
 8004a78:	20000d61 	.word	0x20000d61
 8004a7c:	20000d35 	.word	0x20000d35
 8004a80:	20000d55 	.word	0x20000d55
 8004a84:	0800e280 	.word	0x0800e280
 8004a88:	20000ce0 	.word	0x20000ce0
 8004a8c:	2000094c 	.word	0x2000094c
 8004a90:	0800e294 	.word	0x0800e294
 8004a94:	20000b50 	.word	0x20000b50
 8004a98:	0800e29c 	.word	0x0800e29c
 8004a9c:	20000cec 	.word	0x20000cec
 8004aa0:	0800e2b0 	.word	0x0800e2b0
 8004aa4:	20000d10 	.word	0x20000d10
		} else {
			slideText(wifiPass, 1, 2, 1);
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	2202      	movs	r2, #2
 8004aac:	2101      	movs	r1, #1
 8004aae:	4833      	ldr	r0, [pc, #204]	; (8004b7c <menu+0x36bc>)
 8004ab0:	f7fc fc60 	bl	8001374 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004ab4:	2102      	movs	r1, #2
 8004ab6:	4832      	ldr	r0, [pc, #200]	; (8004b80 <menu+0x36c0>)
 8004ab8:	f005 f842 	bl	8009b40 <HAL_GPIO_ReadPin>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d126      	bne.n	8004b10 <menu+0x3650>
 8004ac2:	2104      	movs	r1, #4
 8004ac4:	482e      	ldr	r0, [pc, #184]	; (8004b80 <menu+0x36c0>)
 8004ac6:	f005 f83b 	bl	8009b40 <HAL_GPIO_ReadPin>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d11f      	bne.n	8004b10 <menu+0x3650>
 8004ad0:	4b2c      	ldr	r3, [pc, #176]	; (8004b84 <menu+0x36c4>)
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	f083 0301 	eor.w	r3, r3, #1
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d018      	beq.n	8004b10 <menu+0x3650>
			takeWifiPass(0);
 8004ade:	2000      	movs	r0, #0
 8004ae0:	f7fc faa2 	bl	8001028 <takeWifiPass>

			HAL_Delay(50);
 8004ae4:	2032      	movs	r0, #50	; 0x32
 8004ae6:	f004 fa5b 	bl	8008fa0 <HAL_Delay>

			lcd_print(2, 1, wifiPass);
 8004aea:	4a24      	ldr	r2, [pc, #144]	; (8004b7c <menu+0x36bc>)
 8004aec:	2101      	movs	r1, #1
 8004aee:	2002      	movs	r0, #2
 8004af0:	f7fb fdba 	bl	8000668 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 8004af4:	4821      	ldr	r0, [pc, #132]	; (8004b7c <menu+0x36bc>)
 8004af6:	f7fb fb95 	bl	8000224 <strlen>
 8004afa:	4603      	mov	r3, r0
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	3301      	adds	r3, #1
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	4a21      	ldr	r2, [pc, #132]	; (8004b88 <menu+0x36c8>)
 8004b04:	4619      	mov	r1, r3
 8004b06:	2002      	movs	r0, #2
 8004b08:	f7fb fdae 	bl	8000668 <lcd_print>

			bekle();
 8004b0c:	f001 fa74 	bl	8005ff8 <bekle>
		}
	}

	if (menuSayac == 35) {
 8004b10:	4b1e      	ldr	r3, [pc, #120]	; (8004b8c <menu+0x36cc>)
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	2b23      	cmp	r3, #35	; 0x23
 8004b16:	d12e      	bne.n	8004b76 <menu+0x36b6>
		if(dilSecim == 0) {
 8004b18:	4b1d      	ldr	r3, [pc, #116]	; (8004b90 <menu+0x36d0>)
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d10a      	bne.n	8004b36 <menu+0x3676>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 8004b20:	4a1c      	ldr	r2, [pc, #112]	; (8004b94 <menu+0x36d4>)
 8004b22:	2101      	movs	r1, #1
 8004b24:	2001      	movs	r0, #1
 8004b26:	f7fb fd9f 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8004b2a:	4a1b      	ldr	r2, [pc, #108]	; (8004b98 <menu+0x36d8>)
 8004b2c:	2101      	movs	r1, #1
 8004b2e:	2002      	movs	r0, #2
 8004b30:	f7fb fd9a 	bl	8000668 <lcd_print>
 8004b34:	e00d      	b.n	8004b52 <menu+0x3692>
		} else if(dilSecim == 1) {
 8004b36:	4b16      	ldr	r3, [pc, #88]	; (8004b90 <menu+0x36d0>)
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d109      	bne.n	8004b52 <menu+0x3692>
			lcd_print(1, 1, " EXIT THE MENU  ");
 8004b3e:	4a17      	ldr	r2, [pc, #92]	; (8004b9c <menu+0x36dc>)
 8004b40:	2101      	movs	r1, #1
 8004b42:	2001      	movs	r0, #1
 8004b44:	f7fb fd90 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 8004b48:	4a15      	ldr	r2, [pc, #84]	; (8004ba0 <menu+0x36e0>)
 8004b4a:	2101      	movs	r1, #1
 8004b4c:	2002      	movs	r0, #2
 8004b4e:	f7fb fd8b 	bl	8000668 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8004b52:	2108      	movs	r1, #8
 8004b54:	480a      	ldr	r0, [pc, #40]	; (8004b80 <menu+0x36c0>)
 8004b56:	f004 fff3 	bl	8009b40 <HAL_GPIO_ReadPin>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d10a      	bne.n	8004b76 <menu+0x36b6>
			menuGiris = 0;
 8004b60:	4b10      	ldr	r3, [pc, #64]	; (8004ba4 <menu+0x36e4>)
 8004b62:	2200      	movs	r2, #0
 8004b64:	701a      	strb	r2, [r3, #0]

			lcd_clear();
 8004b66:	f7fb fdab 	bl	80006c0 <lcd_clear>
			HAL_Delay(500);
 8004b6a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004b6e:	f004 fa17 	bl	8008fa0 <HAL_Delay>
			NVIC_SystemReset();
 8004b72:	f7fb fded 	bl	8000750 <__NVIC_SystemReset>
		}
	}
}
 8004b76:	bf00      	nop
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	20000d10 	.word	0x20000d10
 8004b80:	40010800 	.word	0x40010800
 8004b84:	20000d64 	.word	0x20000d64
 8004b88:	2000094c 	.word	0x2000094c
 8004b8c:	20000d35 	.word	0x20000d35
 8004b90:	20000d56 	.word	0x20000d56
 8004b94:	0800e2c4 	.word	0x0800e2c4
 8004b98:	0800e2d8 	.word	0x0800e2d8
 8004b9c:	0800e2ec 	.word	0x0800e2ec
 8004ba0:	0800e300 	.word	0x0800e300
 8004ba4:	20000d52 	.word	0x20000d52

08004ba8 <loadMenuTexts>:

void loadMenuTexts(uint8_t dilSecim) {
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b082      	sub	sp, #8
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	4603      	mov	r3, r0
 8004bb0:	71fb      	strb	r3, [r7, #7]
	mainText = copyText(mainTextGN);
 8004bb2:	48a9      	ldr	r0, [pc, #676]	; (8004e58 <loadMenuTexts+0x2b0>)
 8004bb4:	f7fb fde2 	bl	800077c <copyText>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	4aa8      	ldr	r2, [pc, #672]	; (8004e5c <loadMenuTexts+0x2b4>)
 8004bbc:	6013      	str	r3, [r2, #0]
	mainText2 = copyText(mainText2GN);
 8004bbe:	48a8      	ldr	r0, [pc, #672]	; (8004e60 <loadMenuTexts+0x2b8>)
 8004bc0:	f7fb fddc 	bl	800077c <copyText>
 8004bc4:	4603      	mov	r3, r0
 8004bc6:	4aa7      	ldr	r2, [pc, #668]	; (8004e64 <loadMenuTexts+0x2bc>)
 8004bc8:	6013      	str	r3, [r2, #0]
	ondSafetyText = copyText(ondSafetyTextGN);
 8004bca:	48a7      	ldr	r0, [pc, #668]	; (8004e68 <loadMenuTexts+0x2c0>)
 8004bcc:	f7fb fdd6 	bl	800077c <copyText>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	4aa6      	ldr	r2, [pc, #664]	; (8004e6c <loadMenuTexts+0x2c4>)
 8004bd4:	6013      	str	r3, [r2, #0]
	prudhomeText = copyText(prudhomeTextGN);
 8004bd6:	48a6      	ldr	r0, [pc, #664]	; (8004e70 <loadMenuTexts+0x2c8>)
 8004bd8:	f7fb fdd0 	bl	800077c <copyText>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	4aa5      	ldr	r2, [pc, #660]	; (8004e74 <loadMenuTexts+0x2cc>)
 8004be0:	6013      	str	r3, [r2, #0]
	pizzattoText = copyText(pizzattoTextGN);
 8004be2:	48a5      	ldr	r0, [pc, #660]	; (8004e78 <loadMenuTexts+0x2d0>)
 8004be4:	f7fb fdca 	bl	800077c <copyText>
 8004be8:	4603      	mov	r3, r0
 8004bea:	4aa4      	ldr	r2, [pc, #656]	; (8004e7c <loadMenuTexts+0x2d4>)
 8004bec:	6013      	str	r3, [r2, #0]
	buzzerText = copyText(buzzerTextGN);
 8004bee:	48a4      	ldr	r0, [pc, #656]	; (8004e80 <loadMenuTexts+0x2d8>)
 8004bf0:	f7fb fdc4 	bl	800077c <copyText>
 8004bf4:	4603      	mov	r3, r0
 8004bf6:	4aa3      	ldr	r2, [pc, #652]	; (8004e84 <loadMenuTexts+0x2dc>)
 8004bf8:	6013      	str	r3, [r2, #0]
	demoModText = copyText(demoModTextGN);
 8004bfa:	48a3      	ldr	r0, [pc, #652]	; (8004e88 <loadMenuTexts+0x2e0>)
 8004bfc:	f7fb fdbe 	bl	800077c <copyText>
 8004c00:	4603      	mov	r3, r0
 8004c02:	4aa2      	ldr	r2, [pc, #648]	; (8004e8c <loadMenuTexts+0x2e4>)
 8004c04:	6013      	str	r3, [r2, #0]
	if(dilSecim == 0) {
 8004c06:	79fb      	ldrb	r3, [r7, #7]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	f040 82d1 	bne.w	80051b0 <loadMenuTexts+0x608>
		menuyeGirildiText = copyText(menuyeGirildiTextTR);
 8004c0e:	48a0      	ldr	r0, [pc, #640]	; (8004e90 <loadMenuTexts+0x2e8>)
 8004c10:	f7fb fdb4 	bl	800077c <copyText>
 8004c14:	4603      	mov	r3, r0
 8004c16:	4a9f      	ldr	r2, [pc, #636]	; (8004e94 <loadMenuTexts+0x2ec>)
 8004c18:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextTR);
 8004c1a:	489f      	ldr	r0, [pc, #636]	; (8004e98 <loadMenuTexts+0x2f0>)
 8004c1c:	f7fb fdae 	bl	800077c <copyText>
 8004c20:	4603      	mov	r3, r0
 8004c22:	4a9e      	ldr	r2, [pc, #632]	; (8004e9c <loadMenuTexts+0x2f4>)
 8004c24:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextTR);
 8004c26:	489e      	ldr	r0, [pc, #632]	; (8004ea0 <loadMenuTexts+0x2f8>)
 8004c28:	f7fb fda8 	bl	800077c <copyText>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	4a9d      	ldr	r2, [pc, #628]	; (8004ea4 <loadMenuTexts+0x2fc>)
 8004c30:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextTR);
 8004c32:	489d      	ldr	r0, [pc, #628]	; (8004ea8 <loadMenuTexts+0x300>)
 8004c34:	f7fb fda2 	bl	800077c <copyText>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	4a9c      	ldr	r2, [pc, #624]	; (8004eac <loadMenuTexts+0x304>)
 8004c3c:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextTR);
 8004c3e:	489c      	ldr	r0, [pc, #624]	; (8004eb0 <loadMenuTexts+0x308>)
 8004c40:	f7fb fd9c 	bl	800077c <copyText>
 8004c44:	4603      	mov	r3, r0
 8004c46:	4a9b      	ldr	r2, [pc, #620]	; (8004eb4 <loadMenuTexts+0x30c>)
 8004c48:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextTR);
 8004c4a:	489b      	ldr	r0, [pc, #620]	; (8004eb8 <loadMenuTexts+0x310>)
 8004c4c:	f7fb fd96 	bl	800077c <copyText>
 8004c50:	4603      	mov	r3, r0
 8004c52:	4a9a      	ldr	r2, [pc, #616]	; (8004ebc <loadMenuTexts+0x314>)
 8004c54:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextTR);
 8004c56:	489a      	ldr	r0, [pc, #616]	; (8004ec0 <loadMenuTexts+0x318>)
 8004c58:	f7fb fd90 	bl	800077c <copyText>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	4a99      	ldr	r2, [pc, #612]	; (8004ec4 <loadMenuTexts+0x31c>)
 8004c60:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextTR);
 8004c62:	4899      	ldr	r0, [pc, #612]	; (8004ec8 <loadMenuTexts+0x320>)
 8004c64:	f7fb fd8a 	bl	800077c <copyText>
 8004c68:	4603      	mov	r3, r0
 8004c6a:	4a98      	ldr	r2, [pc, #608]	; (8004ecc <loadMenuTexts+0x324>)
 8004c6c:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextTR);
 8004c6e:	4898      	ldr	r0, [pc, #608]	; (8004ed0 <loadMenuTexts+0x328>)
 8004c70:	f7fb fd84 	bl	800077c <copyText>
 8004c74:	4603      	mov	r3, r0
 8004c76:	4a97      	ldr	r2, [pc, #604]	; (8004ed4 <loadMenuTexts+0x32c>)
 8004c78:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextTR);
 8004c7a:	4897      	ldr	r0, [pc, #604]	; (8004ed8 <loadMenuTexts+0x330>)
 8004c7c:	f7fb fd7e 	bl	800077c <copyText>
 8004c80:	4603      	mov	r3, r0
 8004c82:	4a96      	ldr	r2, [pc, #600]	; (8004edc <loadMenuTexts+0x334>)
 8004c84:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextTR);
 8004c86:	4896      	ldr	r0, [pc, #600]	; (8004ee0 <loadMenuTexts+0x338>)
 8004c88:	f7fb fd78 	bl	800077c <copyText>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	4a95      	ldr	r2, [pc, #596]	; (8004ee4 <loadMenuTexts+0x33c>)
 8004c90:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextTR);
 8004c92:	4895      	ldr	r0, [pc, #596]	; (8004ee8 <loadMenuTexts+0x340>)
 8004c94:	f7fb fd72 	bl	800077c <copyText>
 8004c98:	4603      	mov	r3, r0
 8004c9a:	4a94      	ldr	r2, [pc, #592]	; (8004eec <loadMenuTexts+0x344>)
 8004c9c:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextTR);
 8004c9e:	4894      	ldr	r0, [pc, #592]	; (8004ef0 <loadMenuTexts+0x348>)
 8004ca0:	f7fb fd6c 	bl	800077c <copyText>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	4a93      	ldr	r2, [pc, #588]	; (8004ef4 <loadMenuTexts+0x34c>)
 8004ca8:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextTR);
 8004caa:	4893      	ldr	r0, [pc, #588]	; (8004ef8 <loadMenuTexts+0x350>)
 8004cac:	f7fb fd66 	bl	800077c <copyText>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	4a92      	ldr	r2, [pc, #584]	; (8004efc <loadMenuTexts+0x354>)
 8004cb4:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextTR);
 8004cb6:	4892      	ldr	r0, [pc, #584]	; (8004f00 <loadMenuTexts+0x358>)
 8004cb8:	f7fb fd60 	bl	800077c <copyText>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	4a91      	ldr	r2, [pc, #580]	; (8004f04 <loadMenuTexts+0x35c>)
 8004cc0:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextTR);
 8004cc2:	4891      	ldr	r0, [pc, #580]	; (8004f08 <loadMenuTexts+0x360>)
 8004cc4:	f7fb fd5a 	bl	800077c <copyText>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	4a90      	ldr	r2, [pc, #576]	; (8004f0c <loadMenuTexts+0x364>)
 8004ccc:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextTR);
 8004cce:	4890      	ldr	r0, [pc, #576]	; (8004f10 <loadMenuTexts+0x368>)
 8004cd0:	f7fb fd54 	bl	800077c <copyText>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	4a8f      	ldr	r2, [pc, #572]	; (8004f14 <loadMenuTexts+0x36c>)
 8004cd8:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextTR);
 8004cda:	488f      	ldr	r0, [pc, #572]	; (8004f18 <loadMenuTexts+0x370>)
 8004cdc:	f7fb fd4e 	bl	800077c <copyText>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	4a8e      	ldr	r2, [pc, #568]	; (8004f1c <loadMenuTexts+0x374>)
 8004ce4:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextTR);
 8004ce6:	488e      	ldr	r0, [pc, #568]	; (8004f20 <loadMenuTexts+0x378>)
 8004ce8:	f7fb fd48 	bl	800077c <copyText>
 8004cec:	4603      	mov	r3, r0
 8004cee:	4a8d      	ldr	r2, [pc, #564]	; (8004f24 <loadMenuTexts+0x37c>)
 8004cf0:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextTR);
 8004cf2:	488d      	ldr	r0, [pc, #564]	; (8004f28 <loadMenuTexts+0x380>)
 8004cf4:	f7fb fd42 	bl	800077c <copyText>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	4a8c      	ldr	r2, [pc, #560]	; (8004f2c <loadMenuTexts+0x384>)
 8004cfc:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextTR);
 8004cfe:	488c      	ldr	r0, [pc, #560]	; (8004f30 <loadMenuTexts+0x388>)
 8004d00:	f7fb fd3c 	bl	800077c <copyText>
 8004d04:	4603      	mov	r3, r0
 8004d06:	4a8b      	ldr	r2, [pc, #556]	; (8004f34 <loadMenuTexts+0x38c>)
 8004d08:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextTR);
 8004d0a:	488b      	ldr	r0, [pc, #556]	; (8004f38 <loadMenuTexts+0x390>)
 8004d0c:	f7fb fd36 	bl	800077c <copyText>
 8004d10:	4603      	mov	r3, r0
 8004d12:	4a8a      	ldr	r2, [pc, #552]	; (8004f3c <loadMenuTexts+0x394>)
 8004d14:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextTR);
 8004d16:	488a      	ldr	r0, [pc, #552]	; (8004f40 <loadMenuTexts+0x398>)
 8004d18:	f7fb fd30 	bl	800077c <copyText>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	4a89      	ldr	r2, [pc, #548]	; (8004f44 <loadMenuTexts+0x39c>)
 8004d20:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextTR);
 8004d22:	4889      	ldr	r0, [pc, #548]	; (8004f48 <loadMenuTexts+0x3a0>)
 8004d24:	f7fb fd2a 	bl	800077c <copyText>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	4a88      	ldr	r2, [pc, #544]	; (8004f4c <loadMenuTexts+0x3a4>)
 8004d2c:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextTR);
 8004d2e:	4888      	ldr	r0, [pc, #544]	; (8004f50 <loadMenuTexts+0x3a8>)
 8004d30:	f7fb fd24 	bl	800077c <copyText>
 8004d34:	4603      	mov	r3, r0
 8004d36:	4a87      	ldr	r2, [pc, #540]	; (8004f54 <loadMenuTexts+0x3ac>)
 8004d38:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextTR);
 8004d3a:	4887      	ldr	r0, [pc, #540]	; (8004f58 <loadMenuTexts+0x3b0>)
 8004d3c:	f7fb fd1e 	bl	800077c <copyText>
 8004d40:	4603      	mov	r3, r0
 8004d42:	4a86      	ldr	r2, [pc, #536]	; (8004f5c <loadMenuTexts+0x3b4>)
 8004d44:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextTR);
 8004d46:	4886      	ldr	r0, [pc, #536]	; (8004f60 <loadMenuTexts+0x3b8>)
 8004d48:	f7fb fd18 	bl	800077c <copyText>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	4a85      	ldr	r2, [pc, #532]	; (8004f64 <loadMenuTexts+0x3bc>)
 8004d50:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextTR);
 8004d52:	4885      	ldr	r0, [pc, #532]	; (8004f68 <loadMenuTexts+0x3c0>)
 8004d54:	f7fb fd12 	bl	800077c <copyText>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	4a84      	ldr	r2, [pc, #528]	; (8004f6c <loadMenuTexts+0x3c4>)
 8004d5c:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextTR);
 8004d5e:	4884      	ldr	r0, [pc, #528]	; (8004f70 <loadMenuTexts+0x3c8>)
 8004d60:	f7fb fd0c 	bl	800077c <copyText>
 8004d64:	4603      	mov	r3, r0
 8004d66:	4a83      	ldr	r2, [pc, #524]	; (8004f74 <loadMenuTexts+0x3cc>)
 8004d68:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextTR);
 8004d6a:	4883      	ldr	r0, [pc, #524]	; (8004f78 <loadMenuTexts+0x3d0>)
 8004d6c:	f7fb fd06 	bl	800077c <copyText>
 8004d70:	4603      	mov	r3, r0
 8004d72:	4a82      	ldr	r2, [pc, #520]	; (8004f7c <loadMenuTexts+0x3d4>)
 8004d74:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextTR);
 8004d76:	4882      	ldr	r0, [pc, #520]	; (8004f80 <loadMenuTexts+0x3d8>)
 8004d78:	f7fb fd00 	bl	800077c <copyText>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	4a81      	ldr	r2, [pc, #516]	; (8004f84 <loadMenuTexts+0x3dc>)
 8004d80:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextTR);
 8004d82:	4881      	ldr	r0, [pc, #516]	; (8004f88 <loadMenuTexts+0x3e0>)
 8004d84:	f7fb fcfa 	bl	800077c <copyText>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	4a80      	ldr	r2, [pc, #512]	; (8004f8c <loadMenuTexts+0x3e4>)
 8004d8c:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextTR);
 8004d8e:	4880      	ldr	r0, [pc, #512]	; (8004f90 <loadMenuTexts+0x3e8>)
 8004d90:	f7fb fcf4 	bl	800077c <copyText>
 8004d94:	4603      	mov	r3, r0
 8004d96:	4a7f      	ldr	r2, [pc, #508]	; (8004f94 <loadMenuTexts+0x3ec>)
 8004d98:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextTR);
 8004d9a:	487f      	ldr	r0, [pc, #508]	; (8004f98 <loadMenuTexts+0x3f0>)
 8004d9c:	f7fb fcee 	bl	800077c <copyText>
 8004da0:	4603      	mov	r3, r0
 8004da2:	4a7e      	ldr	r2, [pc, #504]	; (8004f9c <loadMenuTexts+0x3f4>)
 8004da4:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextTR);
 8004da6:	487e      	ldr	r0, [pc, #504]	; (8004fa0 <loadMenuTexts+0x3f8>)
 8004da8:	f7fb fce8 	bl	800077c <copyText>
 8004dac:	4603      	mov	r3, r0
 8004dae:	4a7d      	ldr	r2, [pc, #500]	; (8004fa4 <loadMenuTexts+0x3fc>)
 8004db0:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextTR);
 8004db2:	487d      	ldr	r0, [pc, #500]	; (8004fa8 <loadMenuTexts+0x400>)
 8004db4:	f7fb fce2 	bl	800077c <copyText>
 8004db8:	4603      	mov	r3, r0
 8004dba:	4a7c      	ldr	r2, [pc, #496]	; (8004fac <loadMenuTexts+0x404>)
 8004dbc:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextTR);
 8004dbe:	487c      	ldr	r0, [pc, #496]	; (8004fb0 <loadMenuTexts+0x408>)
 8004dc0:	f7fb fcdc 	bl	800077c <copyText>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	4a7b      	ldr	r2, [pc, #492]	; (8004fb4 <loadMenuTexts+0x40c>)
 8004dc8:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextTR);
 8004dca:	487b      	ldr	r0, [pc, #492]	; (8004fb8 <loadMenuTexts+0x410>)
 8004dcc:	f7fb fcd6 	bl	800077c <copyText>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	4a7a      	ldr	r2, [pc, #488]	; (8004fbc <loadMenuTexts+0x414>)
 8004dd4:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextTR);
 8004dd6:	487a      	ldr	r0, [pc, #488]	; (8004fc0 <loadMenuTexts+0x418>)
 8004dd8:	f7fb fcd0 	bl	800077c <copyText>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	4a79      	ldr	r2, [pc, #484]	; (8004fc4 <loadMenuTexts+0x41c>)
 8004de0:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextTR);
 8004de2:	4879      	ldr	r0, [pc, #484]	; (8004fc8 <loadMenuTexts+0x420>)
 8004de4:	f7fb fcca 	bl	800077c <copyText>
 8004de8:	4603      	mov	r3, r0
 8004dea:	4a78      	ldr	r2, [pc, #480]	; (8004fcc <loadMenuTexts+0x424>)
 8004dec:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextTR);
 8004dee:	4878      	ldr	r0, [pc, #480]	; (8004fd0 <loadMenuTexts+0x428>)
 8004df0:	f7fb fcc4 	bl	800077c <copyText>
 8004df4:	4603      	mov	r3, r0
 8004df6:	4a77      	ldr	r2, [pc, #476]	; (8004fd4 <loadMenuTexts+0x42c>)
 8004df8:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextTR);
 8004dfa:	4877      	ldr	r0, [pc, #476]	; (8004fd8 <loadMenuTexts+0x430>)
 8004dfc:	f7fb fcbe 	bl	800077c <copyText>
 8004e00:	4603      	mov	r3, r0
 8004e02:	4a76      	ldr	r2, [pc, #472]	; (8004fdc <loadMenuTexts+0x434>)
 8004e04:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextTR);
 8004e06:	4876      	ldr	r0, [pc, #472]	; (8004fe0 <loadMenuTexts+0x438>)
 8004e08:	f7fb fcb8 	bl	800077c <copyText>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	4a75      	ldr	r2, [pc, #468]	; (8004fe4 <loadMenuTexts+0x43c>)
 8004e10:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextTR);
 8004e12:	4875      	ldr	r0, [pc, #468]	; (8004fe8 <loadMenuTexts+0x440>)
 8004e14:	f7fb fcb2 	bl	800077c <copyText>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	4a74      	ldr	r2, [pc, #464]	; (8004fec <loadMenuTexts+0x444>)
 8004e1c:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextTR);
 8004e1e:	4874      	ldr	r0, [pc, #464]	; (8004ff0 <loadMenuTexts+0x448>)
 8004e20:	f7fb fcac 	bl	800077c <copyText>
 8004e24:	4603      	mov	r3, r0
 8004e26:	4a73      	ldr	r2, [pc, #460]	; (8004ff4 <loadMenuTexts+0x44c>)
 8004e28:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextTR);
 8004e2a:	4873      	ldr	r0, [pc, #460]	; (8004ff8 <loadMenuTexts+0x450>)
 8004e2c:	f7fb fca6 	bl	800077c <copyText>
 8004e30:	4603      	mov	r3, r0
 8004e32:	4a72      	ldr	r2, [pc, #456]	; (8004ffc <loadMenuTexts+0x454>)
 8004e34:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextTR);
 8004e36:	4872      	ldr	r0, [pc, #456]	; (8005000 <loadMenuTexts+0x458>)
 8004e38:	f7fb fca0 	bl	800077c <copyText>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	4a71      	ldr	r2, [pc, #452]	; (8005004 <loadMenuTexts+0x45c>)
 8004e40:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextTR);
 8004e42:	4871      	ldr	r0, [pc, #452]	; (8005008 <loadMenuTexts+0x460>)
 8004e44:	f7fb fc9a 	bl	800077c <copyText>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	4a70      	ldr	r2, [pc, #448]	; (800500c <loadMenuTexts+0x464>)
 8004e4c:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextTR);
 8004e4e:	4870      	ldr	r0, [pc, #448]	; (8005010 <loadMenuTexts+0x468>)
 8004e50:	f7fb fc94 	bl	800077c <copyText>
 8004e54:	4603      	mov	r3, r0
 8004e56:	e0dd      	b.n	8005014 <loadMenuTexts+0x46c>
 8004e58:	20000000 	.word	0x20000000
 8004e5c:	20000d9c 	.word	0x20000d9c
 8004e60:	20000010 	.word	0x20000010
 8004e64:	20000da0 	.word	0x20000da0
 8004e68:	20000020 	.word	0x20000020
 8004e6c:	20000df8 	.word	0x20000df8
 8004e70:	20000030 	.word	0x20000030
 8004e74:	20000e28 	.word	0x20000e28
 8004e78:	20000040 	.word	0x20000040
 8004e7c:	20000e30 	.word	0x20000e30
 8004e80:	20000050 	.word	0x20000050
 8004e84:	20000ea8 	.word	0x20000ea8
 8004e88:	20000060 	.word	0x20000060
 8004e8c:	20000eac 	.word	0x20000eac
 8004e90:	20000070 	.word	0x20000070
 8004e94:	20000da4 	.word	0x20000da4
 8004e98:	20000080 	.word	0x20000080
 8004e9c:	20000da8 	.word	0x20000da8
 8004ea0:	20000090 	.word	0x20000090
 8004ea4:	20000dac 	.word	0x20000dac
 8004ea8:	200000a0 	.word	0x200000a0
 8004eac:	20000db0 	.word	0x20000db0
 8004eb0:	200000b0 	.word	0x200000b0
 8004eb4:	20000db4 	.word	0x20000db4
 8004eb8:	200000c0 	.word	0x200000c0
 8004ebc:	20000db8 	.word	0x20000db8
 8004ec0:	200000d0 	.word	0x200000d0
 8004ec4:	20000dbc 	.word	0x20000dbc
 8004ec8:	200000e0 	.word	0x200000e0
 8004ecc:	20000dc0 	.word	0x20000dc0
 8004ed0:	200000f0 	.word	0x200000f0
 8004ed4:	20000dc4 	.word	0x20000dc4
 8004ed8:	20000100 	.word	0x20000100
 8004edc:	20000dc8 	.word	0x20000dc8
 8004ee0:	20000110 	.word	0x20000110
 8004ee4:	20000dcc 	.word	0x20000dcc
 8004ee8:	20000120 	.word	0x20000120
 8004eec:	20000dd0 	.word	0x20000dd0
 8004ef0:	20000130 	.word	0x20000130
 8004ef4:	20000dd4 	.word	0x20000dd4
 8004ef8:	20000140 	.word	0x20000140
 8004efc:	20000dd8 	.word	0x20000dd8
 8004f00:	20000150 	.word	0x20000150
 8004f04:	20000ddc 	.word	0x20000ddc
 8004f08:	20000160 	.word	0x20000160
 8004f0c:	20000de0 	.word	0x20000de0
 8004f10:	20000170 	.word	0x20000170
 8004f14:	20000de4 	.word	0x20000de4
 8004f18:	20000180 	.word	0x20000180
 8004f1c:	20000de8 	.word	0x20000de8
 8004f20:	20000190 	.word	0x20000190
 8004f24:	20000dec 	.word	0x20000dec
 8004f28:	200001a0 	.word	0x200001a0
 8004f2c:	20000df0 	.word	0x20000df0
 8004f30:	200001b0 	.word	0x200001b0
 8004f34:	20000df4 	.word	0x20000df4
 8004f38:	200001c0 	.word	0x200001c0
 8004f3c:	20000dfc 	.word	0x20000dfc
 8004f40:	200001d0 	.word	0x200001d0
 8004f44:	20000e00 	.word	0x20000e00
 8004f48:	200001e0 	.word	0x200001e0
 8004f4c:	20000e04 	.word	0x20000e04
 8004f50:	200001f0 	.word	0x200001f0
 8004f54:	20000e08 	.word	0x20000e08
 8004f58:	20000200 	.word	0x20000200
 8004f5c:	20000e0c 	.word	0x20000e0c
 8004f60:	20000210 	.word	0x20000210
 8004f64:	20000e10 	.word	0x20000e10
 8004f68:	20000220 	.word	0x20000220
 8004f6c:	20000e14 	.word	0x20000e14
 8004f70:	20000230 	.word	0x20000230
 8004f74:	20000e18 	.word	0x20000e18
 8004f78:	20000240 	.word	0x20000240
 8004f7c:	20000e1c 	.word	0x20000e1c
 8004f80:	20000250 	.word	0x20000250
 8004f84:	20000e20 	.word	0x20000e20
 8004f88:	20000260 	.word	0x20000260
 8004f8c:	20000e24 	.word	0x20000e24
 8004f90:	20000270 	.word	0x20000270
 8004f94:	20000e2c 	.word	0x20000e2c
 8004f98:	20000280 	.word	0x20000280
 8004f9c:	20000e34 	.word	0x20000e34
 8004fa0:	20000290 	.word	0x20000290
 8004fa4:	20000e38 	.word	0x20000e38
 8004fa8:	200002a0 	.word	0x200002a0
 8004fac:	20000e3c 	.word	0x20000e3c
 8004fb0:	200002b0 	.word	0x200002b0
 8004fb4:	20000e40 	.word	0x20000e40
 8004fb8:	200002c0 	.word	0x200002c0
 8004fbc:	20000e44 	.word	0x20000e44
 8004fc0:	200002d0 	.word	0x200002d0
 8004fc4:	20000e48 	.word	0x20000e48
 8004fc8:	200002e0 	.word	0x200002e0
 8004fcc:	20000e4c 	.word	0x20000e4c
 8004fd0:	200002f0 	.word	0x200002f0
 8004fd4:	20000e50 	.word	0x20000e50
 8004fd8:	20000300 	.word	0x20000300
 8004fdc:	20000e54 	.word	0x20000e54
 8004fe0:	20000310 	.word	0x20000310
 8004fe4:	20000e58 	.word	0x20000e58
 8004fe8:	20000320 	.word	0x20000320
 8004fec:	20000e5c 	.word	0x20000e5c
 8004ff0:	20000330 	.word	0x20000330
 8004ff4:	20000e60 	.word	0x20000e60
 8004ff8:	20000340 	.word	0x20000340
 8004ffc:	20000e64 	.word	0x20000e64
 8005000:	20000350 	.word	0x20000350
 8005004:	20000e68 	.word	0x20000e68
 8005008:	20000360 	.word	0x20000360
 800500c:	20000e6c 	.word	0x20000e6c
 8005010:	20000370 	.word	0x20000370
 8005014:	4a3d      	ldr	r2, [pc, #244]	; (800510c <loadMenuTexts+0x564>)
 8005016:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextTR);
 8005018:	483d      	ldr	r0, [pc, #244]	; (8005110 <loadMenuTexts+0x568>)
 800501a:	f7fb fbaf 	bl	800077c <copyText>
 800501e:	4603      	mov	r3, r0
 8005020:	4a3c      	ldr	r2, [pc, #240]	; (8005114 <loadMenuTexts+0x56c>)
 8005022:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextTR);
 8005024:	483c      	ldr	r0, [pc, #240]	; (8005118 <loadMenuTexts+0x570>)
 8005026:	f7fb fba9 	bl	800077c <copyText>
 800502a:	4603      	mov	r3, r0
 800502c:	4a3b      	ldr	r2, [pc, #236]	; (800511c <loadMenuTexts+0x574>)
 800502e:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextTR);
 8005030:	483b      	ldr	r0, [pc, #236]	; (8005120 <loadMenuTexts+0x578>)
 8005032:	f7fb fba3 	bl	800077c <copyText>
 8005036:	4603      	mov	r3, r0
 8005038:	4a3a      	ldr	r2, [pc, #232]	; (8005124 <loadMenuTexts+0x57c>)
 800503a:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextTR);
 800503c:	483a      	ldr	r0, [pc, #232]	; (8005128 <loadMenuTexts+0x580>)
 800503e:	f7fb fb9d 	bl	800077c <copyText>
 8005042:	4603      	mov	r3, r0
 8005044:	4a39      	ldr	r2, [pc, #228]	; (800512c <loadMenuTexts+0x584>)
 8005046:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextTR);
 8005048:	4839      	ldr	r0, [pc, #228]	; (8005130 <loadMenuTexts+0x588>)
 800504a:	f7fb fb97 	bl	800077c <copyText>
 800504e:	4603      	mov	r3, r0
 8005050:	4a38      	ldr	r2, [pc, #224]	; (8005134 <loadMenuTexts+0x58c>)
 8005052:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextTR);
 8005054:	4838      	ldr	r0, [pc, #224]	; (8005138 <loadMenuTexts+0x590>)
 8005056:	f7fb fb91 	bl	800077c <copyText>
 800505a:	4603      	mov	r3, r0
 800505c:	4a37      	ldr	r2, [pc, #220]	; (800513c <loadMenuTexts+0x594>)
 800505e:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextTR);
 8005060:	4837      	ldr	r0, [pc, #220]	; (8005140 <loadMenuTexts+0x598>)
 8005062:	f7fb fb8b 	bl	800077c <copyText>
 8005066:	4603      	mov	r3, r0
 8005068:	4a36      	ldr	r2, [pc, #216]	; (8005144 <loadMenuTexts+0x59c>)
 800506a:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextTR);
 800506c:	4836      	ldr	r0, [pc, #216]	; (8005148 <loadMenuTexts+0x5a0>)
 800506e:	f7fb fb85 	bl	800077c <copyText>
 8005072:	4603      	mov	r3, r0
 8005074:	4a35      	ldr	r2, [pc, #212]	; (800514c <loadMenuTexts+0x5a4>)
 8005076:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextTR);
 8005078:	4835      	ldr	r0, [pc, #212]	; (8005150 <loadMenuTexts+0x5a8>)
 800507a:	f7fb fb7f 	bl	800077c <copyText>
 800507e:	4603      	mov	r3, r0
 8005080:	4a34      	ldr	r2, [pc, #208]	; (8005154 <loadMenuTexts+0x5ac>)
 8005082:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextTR);
 8005084:	4834      	ldr	r0, [pc, #208]	; (8005158 <loadMenuTexts+0x5b0>)
 8005086:	f7fb fb79 	bl	800077c <copyText>
 800508a:	4603      	mov	r3, r0
 800508c:	4a33      	ldr	r2, [pc, #204]	; (800515c <loadMenuTexts+0x5b4>)
 800508e:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextTR);
 8005090:	4833      	ldr	r0, [pc, #204]	; (8005160 <loadMenuTexts+0x5b8>)
 8005092:	f7fb fb73 	bl	800077c <copyText>
 8005096:	4603      	mov	r3, r0
 8005098:	4a32      	ldr	r2, [pc, #200]	; (8005164 <loadMenuTexts+0x5bc>)
 800509a:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextTR);
 800509c:	4832      	ldr	r0, [pc, #200]	; (8005168 <loadMenuTexts+0x5c0>)
 800509e:	f7fb fb6d 	bl	800077c <copyText>
 80050a2:	4603      	mov	r3, r0
 80050a4:	4a31      	ldr	r2, [pc, #196]	; (800516c <loadMenuTexts+0x5c4>)
 80050a6:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextTR);
 80050a8:	4831      	ldr	r0, [pc, #196]	; (8005170 <loadMenuTexts+0x5c8>)
 80050aa:	f7fb fb67 	bl	800077c <copyText>
 80050ae:	4603      	mov	r3, r0
 80050b0:	4a30      	ldr	r2, [pc, #192]	; (8005174 <loadMenuTexts+0x5cc>)
 80050b2:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextTR);
 80050b4:	4830      	ldr	r0, [pc, #192]	; (8005178 <loadMenuTexts+0x5d0>)
 80050b6:	f7fb fb61 	bl	800077c <copyText>
 80050ba:	4603      	mov	r3, r0
 80050bc:	4a2f      	ldr	r2, [pc, #188]	; (800517c <loadMenuTexts+0x5d4>)
 80050be:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextTR);
 80050c0:	482f      	ldr	r0, [pc, #188]	; (8005180 <loadMenuTexts+0x5d8>)
 80050c2:	f7fb fb5b 	bl	800077c <copyText>
 80050c6:	4603      	mov	r3, r0
 80050c8:	4a2e      	ldr	r2, [pc, #184]	; (8005184 <loadMenuTexts+0x5dc>)
 80050ca:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextTR);
 80050cc:	482e      	ldr	r0, [pc, #184]	; (8005188 <loadMenuTexts+0x5e0>)
 80050ce:	f7fb fb55 	bl	800077c <copyText>
 80050d2:	4603      	mov	r3, r0
 80050d4:	4a2d      	ldr	r2, [pc, #180]	; (800518c <loadMenuTexts+0x5e4>)
 80050d6:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextTR);
 80050d8:	482d      	ldr	r0, [pc, #180]	; (8005190 <loadMenuTexts+0x5e8>)
 80050da:	f7fb fb4f 	bl	800077c <copyText>
 80050de:	4603      	mov	r3, r0
 80050e0:	4a2c      	ldr	r2, [pc, #176]	; (8005194 <loadMenuTexts+0x5ec>)
 80050e2:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextTR);
 80050e4:	482c      	ldr	r0, [pc, #176]	; (8005198 <loadMenuTexts+0x5f0>)
 80050e6:	f7fb fb49 	bl	800077c <copyText>
 80050ea:	4603      	mov	r3, r0
 80050ec:	4a2b      	ldr	r2, [pc, #172]	; (800519c <loadMenuTexts+0x5f4>)
 80050ee:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextTR);
 80050f0:	482b      	ldr	r0, [pc, #172]	; (80051a0 <loadMenuTexts+0x5f8>)
 80050f2:	f7fb fb43 	bl	800077c <copyText>
 80050f6:	4603      	mov	r3, r0
 80050f8:	4a2a      	ldr	r2, [pc, #168]	; (80051a4 <loadMenuTexts+0x5fc>)
 80050fa:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextTR);
 80050fc:	482a      	ldr	r0, [pc, #168]	; (80051a8 <loadMenuTexts+0x600>)
 80050fe:	f7fb fb3d 	bl	800077c <copyText>
 8005102:	4603      	mov	r3, r0
 8005104:	4a29      	ldr	r2, [pc, #164]	; (80051ac <loadMenuTexts+0x604>)
 8005106:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
		menudenCikisText = copyText(menudenCikisTextEN);
		enteraBasinizText = copyText(enteraBasinizTextEN);
		hataKoduText = copyText(hataKoduTextEN);
	}
}
 8005108:	e2d3      	b.n	80056b2 <loadMenuTexts+0xb0a>
 800510a:	bf00      	nop
 800510c:	20000e70 	.word	0x20000e70
 8005110:	20000380 	.word	0x20000380
 8005114:	20000e74 	.word	0x20000e74
 8005118:	20000390 	.word	0x20000390
 800511c:	20000e78 	.word	0x20000e78
 8005120:	200003a0 	.word	0x200003a0
 8005124:	20000e7c 	.word	0x20000e7c
 8005128:	200003b0 	.word	0x200003b0
 800512c:	20000e80 	.word	0x20000e80
 8005130:	200003c0 	.word	0x200003c0
 8005134:	20000e84 	.word	0x20000e84
 8005138:	200003d0 	.word	0x200003d0
 800513c:	20000e88 	.word	0x20000e88
 8005140:	200003e0 	.word	0x200003e0
 8005144:	20000e8c 	.word	0x20000e8c
 8005148:	200003f0 	.word	0x200003f0
 800514c:	20000e90 	.word	0x20000e90
 8005150:	20000400 	.word	0x20000400
 8005154:	20000e94 	.word	0x20000e94
 8005158:	20000410 	.word	0x20000410
 800515c:	20000e98 	.word	0x20000e98
 8005160:	20000420 	.word	0x20000420
 8005164:	20000e9c 	.word	0x20000e9c
 8005168:	20000430 	.word	0x20000430
 800516c:	20000ea0 	.word	0x20000ea0
 8005170:	20000440 	.word	0x20000440
 8005174:	20000ea4 	.word	0x20000ea4
 8005178:	20000450 	.word	0x20000450
 800517c:	20000eb0 	.word	0x20000eb0
 8005180:	20000460 	.word	0x20000460
 8005184:	20000eb4 	.word	0x20000eb4
 8005188:	20000470 	.word	0x20000470
 800518c:	20000eb8 	.word	0x20000eb8
 8005190:	20000480 	.word	0x20000480
 8005194:	20000ebc 	.word	0x20000ebc
 8005198:	20000490 	.word	0x20000490
 800519c:	20000ec0 	.word	0x20000ec0
 80051a0:	200004a0 	.word	0x200004a0
 80051a4:	20000ec4 	.word	0x20000ec4
 80051a8:	200004b0 	.word	0x200004b0
 80051ac:	20000ec8 	.word	0x20000ec8
		menuyeGirildiText = copyText(menuyeGirildiTextEN);
 80051b0:	48a9      	ldr	r0, [pc, #676]	; (8005458 <loadMenuTexts+0x8b0>)
 80051b2:	f7fb fae3 	bl	800077c <copyText>
 80051b6:	4603      	mov	r3, r0
 80051b8:	4aa8      	ldr	r2, [pc, #672]	; (800545c <loadMenuTexts+0x8b4>)
 80051ba:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextEN);
 80051bc:	48a8      	ldr	r0, [pc, #672]	; (8005460 <loadMenuTexts+0x8b8>)
 80051be:	f7fb fadd 	bl	800077c <copyText>
 80051c2:	4603      	mov	r3, r0
 80051c4:	4aa7      	ldr	r2, [pc, #668]	; (8005464 <loadMenuTexts+0x8bc>)
 80051c6:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextEN);
 80051c8:	48a7      	ldr	r0, [pc, #668]	; (8005468 <loadMenuTexts+0x8c0>)
 80051ca:	f7fb fad7 	bl	800077c <copyText>
 80051ce:	4603      	mov	r3, r0
 80051d0:	4aa6      	ldr	r2, [pc, #664]	; (800546c <loadMenuTexts+0x8c4>)
 80051d2:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextEN);
 80051d4:	48a6      	ldr	r0, [pc, #664]	; (8005470 <loadMenuTexts+0x8c8>)
 80051d6:	f7fb fad1 	bl	800077c <copyText>
 80051da:	4603      	mov	r3, r0
 80051dc:	4aa5      	ldr	r2, [pc, #660]	; (8005474 <loadMenuTexts+0x8cc>)
 80051de:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextEN);
 80051e0:	48a5      	ldr	r0, [pc, #660]	; (8005478 <loadMenuTexts+0x8d0>)
 80051e2:	f7fb facb 	bl	800077c <copyText>
 80051e6:	4603      	mov	r3, r0
 80051e8:	4aa4      	ldr	r2, [pc, #656]	; (800547c <loadMenuTexts+0x8d4>)
 80051ea:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextEN);
 80051ec:	48a4      	ldr	r0, [pc, #656]	; (8005480 <loadMenuTexts+0x8d8>)
 80051ee:	f7fb fac5 	bl	800077c <copyText>
 80051f2:	4603      	mov	r3, r0
 80051f4:	4aa3      	ldr	r2, [pc, #652]	; (8005484 <loadMenuTexts+0x8dc>)
 80051f6:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextEN);
 80051f8:	48a3      	ldr	r0, [pc, #652]	; (8005488 <loadMenuTexts+0x8e0>)
 80051fa:	f7fb fabf 	bl	800077c <copyText>
 80051fe:	4603      	mov	r3, r0
 8005200:	4aa2      	ldr	r2, [pc, #648]	; (800548c <loadMenuTexts+0x8e4>)
 8005202:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextEN);
 8005204:	48a2      	ldr	r0, [pc, #648]	; (8005490 <loadMenuTexts+0x8e8>)
 8005206:	f7fb fab9 	bl	800077c <copyText>
 800520a:	4603      	mov	r3, r0
 800520c:	4aa1      	ldr	r2, [pc, #644]	; (8005494 <loadMenuTexts+0x8ec>)
 800520e:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextEN);
 8005210:	48a1      	ldr	r0, [pc, #644]	; (8005498 <loadMenuTexts+0x8f0>)
 8005212:	f7fb fab3 	bl	800077c <copyText>
 8005216:	4603      	mov	r3, r0
 8005218:	4aa0      	ldr	r2, [pc, #640]	; (800549c <loadMenuTexts+0x8f4>)
 800521a:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextEN);
 800521c:	48a0      	ldr	r0, [pc, #640]	; (80054a0 <loadMenuTexts+0x8f8>)
 800521e:	f7fb faad 	bl	800077c <copyText>
 8005222:	4603      	mov	r3, r0
 8005224:	4a9f      	ldr	r2, [pc, #636]	; (80054a4 <loadMenuTexts+0x8fc>)
 8005226:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextEN);
 8005228:	489f      	ldr	r0, [pc, #636]	; (80054a8 <loadMenuTexts+0x900>)
 800522a:	f7fb faa7 	bl	800077c <copyText>
 800522e:	4603      	mov	r3, r0
 8005230:	4a9e      	ldr	r2, [pc, #632]	; (80054ac <loadMenuTexts+0x904>)
 8005232:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextEN);
 8005234:	489e      	ldr	r0, [pc, #632]	; (80054b0 <loadMenuTexts+0x908>)
 8005236:	f7fb faa1 	bl	800077c <copyText>
 800523a:	4603      	mov	r3, r0
 800523c:	4a9d      	ldr	r2, [pc, #628]	; (80054b4 <loadMenuTexts+0x90c>)
 800523e:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextEN);
 8005240:	489d      	ldr	r0, [pc, #628]	; (80054b8 <loadMenuTexts+0x910>)
 8005242:	f7fb fa9b 	bl	800077c <copyText>
 8005246:	4603      	mov	r3, r0
 8005248:	4a9c      	ldr	r2, [pc, #624]	; (80054bc <loadMenuTexts+0x914>)
 800524a:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextEN);
 800524c:	489c      	ldr	r0, [pc, #624]	; (80054c0 <loadMenuTexts+0x918>)
 800524e:	f7fb fa95 	bl	800077c <copyText>
 8005252:	4603      	mov	r3, r0
 8005254:	4a9b      	ldr	r2, [pc, #620]	; (80054c4 <loadMenuTexts+0x91c>)
 8005256:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextEN);
 8005258:	489b      	ldr	r0, [pc, #620]	; (80054c8 <loadMenuTexts+0x920>)
 800525a:	f7fb fa8f 	bl	800077c <copyText>
 800525e:	4603      	mov	r3, r0
 8005260:	4a9a      	ldr	r2, [pc, #616]	; (80054cc <loadMenuTexts+0x924>)
 8005262:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextEN);
 8005264:	489a      	ldr	r0, [pc, #616]	; (80054d0 <loadMenuTexts+0x928>)
 8005266:	f7fb fa89 	bl	800077c <copyText>
 800526a:	4603      	mov	r3, r0
 800526c:	4a99      	ldr	r2, [pc, #612]	; (80054d4 <loadMenuTexts+0x92c>)
 800526e:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextEN);
 8005270:	4899      	ldr	r0, [pc, #612]	; (80054d8 <loadMenuTexts+0x930>)
 8005272:	f7fb fa83 	bl	800077c <copyText>
 8005276:	4603      	mov	r3, r0
 8005278:	4a98      	ldr	r2, [pc, #608]	; (80054dc <loadMenuTexts+0x934>)
 800527a:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextEN);
 800527c:	4898      	ldr	r0, [pc, #608]	; (80054e0 <loadMenuTexts+0x938>)
 800527e:	f7fb fa7d 	bl	800077c <copyText>
 8005282:	4603      	mov	r3, r0
 8005284:	4a97      	ldr	r2, [pc, #604]	; (80054e4 <loadMenuTexts+0x93c>)
 8005286:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextEN);
 8005288:	4897      	ldr	r0, [pc, #604]	; (80054e8 <loadMenuTexts+0x940>)
 800528a:	f7fb fa77 	bl	800077c <copyText>
 800528e:	4603      	mov	r3, r0
 8005290:	4a96      	ldr	r2, [pc, #600]	; (80054ec <loadMenuTexts+0x944>)
 8005292:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextEN);
 8005294:	4896      	ldr	r0, [pc, #600]	; (80054f0 <loadMenuTexts+0x948>)
 8005296:	f7fb fa71 	bl	800077c <copyText>
 800529a:	4603      	mov	r3, r0
 800529c:	4a95      	ldr	r2, [pc, #596]	; (80054f4 <loadMenuTexts+0x94c>)
 800529e:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextEN);
 80052a0:	4895      	ldr	r0, [pc, #596]	; (80054f8 <loadMenuTexts+0x950>)
 80052a2:	f7fb fa6b 	bl	800077c <copyText>
 80052a6:	4603      	mov	r3, r0
 80052a8:	4a94      	ldr	r2, [pc, #592]	; (80054fc <loadMenuTexts+0x954>)
 80052aa:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextEN);
 80052ac:	4894      	ldr	r0, [pc, #592]	; (8005500 <loadMenuTexts+0x958>)
 80052ae:	f7fb fa65 	bl	800077c <copyText>
 80052b2:	4603      	mov	r3, r0
 80052b4:	4a93      	ldr	r2, [pc, #588]	; (8005504 <loadMenuTexts+0x95c>)
 80052b6:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextEN);
 80052b8:	4893      	ldr	r0, [pc, #588]	; (8005508 <loadMenuTexts+0x960>)
 80052ba:	f7fb fa5f 	bl	800077c <copyText>
 80052be:	4603      	mov	r3, r0
 80052c0:	4a92      	ldr	r2, [pc, #584]	; (800550c <loadMenuTexts+0x964>)
 80052c2:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextEN);
 80052c4:	4892      	ldr	r0, [pc, #584]	; (8005510 <loadMenuTexts+0x968>)
 80052c6:	f7fb fa59 	bl	800077c <copyText>
 80052ca:	4603      	mov	r3, r0
 80052cc:	4a91      	ldr	r2, [pc, #580]	; (8005514 <loadMenuTexts+0x96c>)
 80052ce:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextEN);
 80052d0:	4891      	ldr	r0, [pc, #580]	; (8005518 <loadMenuTexts+0x970>)
 80052d2:	f7fb fa53 	bl	800077c <copyText>
 80052d6:	4603      	mov	r3, r0
 80052d8:	4a90      	ldr	r2, [pc, #576]	; (800551c <loadMenuTexts+0x974>)
 80052da:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextEN);
 80052dc:	4890      	ldr	r0, [pc, #576]	; (8005520 <loadMenuTexts+0x978>)
 80052de:	f7fb fa4d 	bl	800077c <copyText>
 80052e2:	4603      	mov	r3, r0
 80052e4:	4a8f      	ldr	r2, [pc, #572]	; (8005524 <loadMenuTexts+0x97c>)
 80052e6:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextEN);
 80052e8:	488f      	ldr	r0, [pc, #572]	; (8005528 <loadMenuTexts+0x980>)
 80052ea:	f7fb fa47 	bl	800077c <copyText>
 80052ee:	4603      	mov	r3, r0
 80052f0:	4a8e      	ldr	r2, [pc, #568]	; (800552c <loadMenuTexts+0x984>)
 80052f2:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextEN);
 80052f4:	488e      	ldr	r0, [pc, #568]	; (8005530 <loadMenuTexts+0x988>)
 80052f6:	f7fb fa41 	bl	800077c <copyText>
 80052fa:	4603      	mov	r3, r0
 80052fc:	4a8d      	ldr	r2, [pc, #564]	; (8005534 <loadMenuTexts+0x98c>)
 80052fe:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextEN);
 8005300:	488d      	ldr	r0, [pc, #564]	; (8005538 <loadMenuTexts+0x990>)
 8005302:	f7fb fa3b 	bl	800077c <copyText>
 8005306:	4603      	mov	r3, r0
 8005308:	4a8c      	ldr	r2, [pc, #560]	; (800553c <loadMenuTexts+0x994>)
 800530a:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextEN);
 800530c:	488c      	ldr	r0, [pc, #560]	; (8005540 <loadMenuTexts+0x998>)
 800530e:	f7fb fa35 	bl	800077c <copyText>
 8005312:	4603      	mov	r3, r0
 8005314:	4a8b      	ldr	r2, [pc, #556]	; (8005544 <loadMenuTexts+0x99c>)
 8005316:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextEN);
 8005318:	488b      	ldr	r0, [pc, #556]	; (8005548 <loadMenuTexts+0x9a0>)
 800531a:	f7fb fa2f 	bl	800077c <copyText>
 800531e:	4603      	mov	r3, r0
 8005320:	4a8a      	ldr	r2, [pc, #552]	; (800554c <loadMenuTexts+0x9a4>)
 8005322:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextEN);
 8005324:	488a      	ldr	r0, [pc, #552]	; (8005550 <loadMenuTexts+0x9a8>)
 8005326:	f7fb fa29 	bl	800077c <copyText>
 800532a:	4603      	mov	r3, r0
 800532c:	4a89      	ldr	r2, [pc, #548]	; (8005554 <loadMenuTexts+0x9ac>)
 800532e:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextEN);
 8005330:	4889      	ldr	r0, [pc, #548]	; (8005558 <loadMenuTexts+0x9b0>)
 8005332:	f7fb fa23 	bl	800077c <copyText>
 8005336:	4603      	mov	r3, r0
 8005338:	4a88      	ldr	r2, [pc, #544]	; (800555c <loadMenuTexts+0x9b4>)
 800533a:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextEN);
 800533c:	4888      	ldr	r0, [pc, #544]	; (8005560 <loadMenuTexts+0x9b8>)
 800533e:	f7fb fa1d 	bl	800077c <copyText>
 8005342:	4603      	mov	r3, r0
 8005344:	4a87      	ldr	r2, [pc, #540]	; (8005564 <loadMenuTexts+0x9bc>)
 8005346:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextEN);
 8005348:	4887      	ldr	r0, [pc, #540]	; (8005568 <loadMenuTexts+0x9c0>)
 800534a:	f7fb fa17 	bl	800077c <copyText>
 800534e:	4603      	mov	r3, r0
 8005350:	4a86      	ldr	r2, [pc, #536]	; (800556c <loadMenuTexts+0x9c4>)
 8005352:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextEN);
 8005354:	4886      	ldr	r0, [pc, #536]	; (8005570 <loadMenuTexts+0x9c8>)
 8005356:	f7fb fa11 	bl	800077c <copyText>
 800535a:	4603      	mov	r3, r0
 800535c:	4a85      	ldr	r2, [pc, #532]	; (8005574 <loadMenuTexts+0x9cc>)
 800535e:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextEN);
 8005360:	4885      	ldr	r0, [pc, #532]	; (8005578 <loadMenuTexts+0x9d0>)
 8005362:	f7fb fa0b 	bl	800077c <copyText>
 8005366:	4603      	mov	r3, r0
 8005368:	4a84      	ldr	r2, [pc, #528]	; (800557c <loadMenuTexts+0x9d4>)
 800536a:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextEN);
 800536c:	4884      	ldr	r0, [pc, #528]	; (8005580 <loadMenuTexts+0x9d8>)
 800536e:	f7fb fa05 	bl	800077c <copyText>
 8005372:	4603      	mov	r3, r0
 8005374:	4a83      	ldr	r2, [pc, #524]	; (8005584 <loadMenuTexts+0x9dc>)
 8005376:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextEN);
 8005378:	4883      	ldr	r0, [pc, #524]	; (8005588 <loadMenuTexts+0x9e0>)
 800537a:	f7fb f9ff 	bl	800077c <copyText>
 800537e:	4603      	mov	r3, r0
 8005380:	4a82      	ldr	r2, [pc, #520]	; (800558c <loadMenuTexts+0x9e4>)
 8005382:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextEN);
 8005384:	4882      	ldr	r0, [pc, #520]	; (8005590 <loadMenuTexts+0x9e8>)
 8005386:	f7fb f9f9 	bl	800077c <copyText>
 800538a:	4603      	mov	r3, r0
 800538c:	4a81      	ldr	r2, [pc, #516]	; (8005594 <loadMenuTexts+0x9ec>)
 800538e:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextEN);
 8005390:	4881      	ldr	r0, [pc, #516]	; (8005598 <loadMenuTexts+0x9f0>)
 8005392:	f7fb f9f3 	bl	800077c <copyText>
 8005396:	4603      	mov	r3, r0
 8005398:	4a80      	ldr	r2, [pc, #512]	; (800559c <loadMenuTexts+0x9f4>)
 800539a:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextEN);
 800539c:	4880      	ldr	r0, [pc, #512]	; (80055a0 <loadMenuTexts+0x9f8>)
 800539e:	f7fb f9ed 	bl	800077c <copyText>
 80053a2:	4603      	mov	r3, r0
 80053a4:	4a7f      	ldr	r2, [pc, #508]	; (80055a4 <loadMenuTexts+0x9fc>)
 80053a6:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextEN);
 80053a8:	487f      	ldr	r0, [pc, #508]	; (80055a8 <loadMenuTexts+0xa00>)
 80053aa:	f7fb f9e7 	bl	800077c <copyText>
 80053ae:	4603      	mov	r3, r0
 80053b0:	4a7e      	ldr	r2, [pc, #504]	; (80055ac <loadMenuTexts+0xa04>)
 80053b2:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextEN);
 80053b4:	487e      	ldr	r0, [pc, #504]	; (80055b0 <loadMenuTexts+0xa08>)
 80053b6:	f7fb f9e1 	bl	800077c <copyText>
 80053ba:	4603      	mov	r3, r0
 80053bc:	4a7d      	ldr	r2, [pc, #500]	; (80055b4 <loadMenuTexts+0xa0c>)
 80053be:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextEN);
 80053c0:	487d      	ldr	r0, [pc, #500]	; (80055b8 <loadMenuTexts+0xa10>)
 80053c2:	f7fb f9db 	bl	800077c <copyText>
 80053c6:	4603      	mov	r3, r0
 80053c8:	4a7c      	ldr	r2, [pc, #496]	; (80055bc <loadMenuTexts+0xa14>)
 80053ca:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextEN);
 80053cc:	487c      	ldr	r0, [pc, #496]	; (80055c0 <loadMenuTexts+0xa18>)
 80053ce:	f7fb f9d5 	bl	800077c <copyText>
 80053d2:	4603      	mov	r3, r0
 80053d4:	4a7b      	ldr	r2, [pc, #492]	; (80055c4 <loadMenuTexts+0xa1c>)
 80053d6:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextEN);
 80053d8:	487b      	ldr	r0, [pc, #492]	; (80055c8 <loadMenuTexts+0xa20>)
 80053da:	f7fb f9cf 	bl	800077c <copyText>
 80053de:	4603      	mov	r3, r0
 80053e0:	4a7a      	ldr	r2, [pc, #488]	; (80055cc <loadMenuTexts+0xa24>)
 80053e2:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextEN);
 80053e4:	487a      	ldr	r0, [pc, #488]	; (80055d0 <loadMenuTexts+0xa28>)
 80053e6:	f7fb f9c9 	bl	800077c <copyText>
 80053ea:	4603      	mov	r3, r0
 80053ec:	4a79      	ldr	r2, [pc, #484]	; (80055d4 <loadMenuTexts+0xa2c>)
 80053ee:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextEN);
 80053f0:	4879      	ldr	r0, [pc, #484]	; (80055d8 <loadMenuTexts+0xa30>)
 80053f2:	f7fb f9c3 	bl	800077c <copyText>
 80053f6:	4603      	mov	r3, r0
 80053f8:	4a78      	ldr	r2, [pc, #480]	; (80055dc <loadMenuTexts+0xa34>)
 80053fa:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextEN);
 80053fc:	4878      	ldr	r0, [pc, #480]	; (80055e0 <loadMenuTexts+0xa38>)
 80053fe:	f7fb f9bd 	bl	800077c <copyText>
 8005402:	4603      	mov	r3, r0
 8005404:	4a77      	ldr	r2, [pc, #476]	; (80055e4 <loadMenuTexts+0xa3c>)
 8005406:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextEN);
 8005408:	4877      	ldr	r0, [pc, #476]	; (80055e8 <loadMenuTexts+0xa40>)
 800540a:	f7fb f9b7 	bl	800077c <copyText>
 800540e:	4603      	mov	r3, r0
 8005410:	4a76      	ldr	r2, [pc, #472]	; (80055ec <loadMenuTexts+0xa44>)
 8005412:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextEN);
 8005414:	4876      	ldr	r0, [pc, #472]	; (80055f0 <loadMenuTexts+0xa48>)
 8005416:	f7fb f9b1 	bl	800077c <copyText>
 800541a:	4603      	mov	r3, r0
 800541c:	4a75      	ldr	r2, [pc, #468]	; (80055f4 <loadMenuTexts+0xa4c>)
 800541e:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextEN);
 8005420:	4875      	ldr	r0, [pc, #468]	; (80055f8 <loadMenuTexts+0xa50>)
 8005422:	f7fb f9ab 	bl	800077c <copyText>
 8005426:	4603      	mov	r3, r0
 8005428:	4a74      	ldr	r2, [pc, #464]	; (80055fc <loadMenuTexts+0xa54>)
 800542a:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextEN);
 800542c:	4874      	ldr	r0, [pc, #464]	; (8005600 <loadMenuTexts+0xa58>)
 800542e:	f7fb f9a5 	bl	800077c <copyText>
 8005432:	4603      	mov	r3, r0
 8005434:	4a73      	ldr	r2, [pc, #460]	; (8005604 <loadMenuTexts+0xa5c>)
 8005436:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextEN);
 8005438:	4873      	ldr	r0, [pc, #460]	; (8005608 <loadMenuTexts+0xa60>)
 800543a:	f7fb f99f 	bl	800077c <copyText>
 800543e:	4603      	mov	r3, r0
 8005440:	4a72      	ldr	r2, [pc, #456]	; (800560c <loadMenuTexts+0xa64>)
 8005442:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextEN);
 8005444:	4872      	ldr	r0, [pc, #456]	; (8005610 <loadMenuTexts+0xa68>)
 8005446:	f7fb f999 	bl	800077c <copyText>
 800544a:	4603      	mov	r3, r0
 800544c:	4a71      	ldr	r2, [pc, #452]	; (8005614 <loadMenuTexts+0xa6c>)
 800544e:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextEN);
 8005450:	4871      	ldr	r0, [pc, #452]	; (8005618 <loadMenuTexts+0xa70>)
 8005452:	f7fb f993 	bl	800077c <copyText>
 8005456:	e0e1      	b.n	800561c <loadMenuTexts+0xa74>
 8005458:	200004c0 	.word	0x200004c0
 800545c:	20000da4 	.word	0x20000da4
 8005460:	200004d0 	.word	0x200004d0
 8005464:	20000da8 	.word	0x20000da8
 8005468:	200004e0 	.word	0x200004e0
 800546c:	20000dac 	.word	0x20000dac
 8005470:	200004f0 	.word	0x200004f0
 8005474:	20000db0 	.word	0x20000db0
 8005478:	20000500 	.word	0x20000500
 800547c:	20000db4 	.word	0x20000db4
 8005480:	20000510 	.word	0x20000510
 8005484:	20000db8 	.word	0x20000db8
 8005488:	20000520 	.word	0x20000520
 800548c:	20000dbc 	.word	0x20000dbc
 8005490:	20000530 	.word	0x20000530
 8005494:	20000dc0 	.word	0x20000dc0
 8005498:	20000540 	.word	0x20000540
 800549c:	20000dc4 	.word	0x20000dc4
 80054a0:	20000550 	.word	0x20000550
 80054a4:	20000dc8 	.word	0x20000dc8
 80054a8:	20000560 	.word	0x20000560
 80054ac:	20000dcc 	.word	0x20000dcc
 80054b0:	20000570 	.word	0x20000570
 80054b4:	20000dd0 	.word	0x20000dd0
 80054b8:	20000580 	.word	0x20000580
 80054bc:	20000dd4 	.word	0x20000dd4
 80054c0:	20000590 	.word	0x20000590
 80054c4:	20000dd8 	.word	0x20000dd8
 80054c8:	200005a0 	.word	0x200005a0
 80054cc:	20000ddc 	.word	0x20000ddc
 80054d0:	200005b0 	.word	0x200005b0
 80054d4:	20000de0 	.word	0x20000de0
 80054d8:	200005c0 	.word	0x200005c0
 80054dc:	20000de4 	.word	0x20000de4
 80054e0:	200005d0 	.word	0x200005d0
 80054e4:	20000de8 	.word	0x20000de8
 80054e8:	200005e0 	.word	0x200005e0
 80054ec:	20000dec 	.word	0x20000dec
 80054f0:	200005f0 	.word	0x200005f0
 80054f4:	20000df0 	.word	0x20000df0
 80054f8:	20000600 	.word	0x20000600
 80054fc:	20000df4 	.word	0x20000df4
 8005500:	20000610 	.word	0x20000610
 8005504:	20000dfc 	.word	0x20000dfc
 8005508:	20000620 	.word	0x20000620
 800550c:	20000e00 	.word	0x20000e00
 8005510:	20000630 	.word	0x20000630
 8005514:	20000e04 	.word	0x20000e04
 8005518:	20000640 	.word	0x20000640
 800551c:	20000e08 	.word	0x20000e08
 8005520:	20000650 	.word	0x20000650
 8005524:	20000e0c 	.word	0x20000e0c
 8005528:	20000660 	.word	0x20000660
 800552c:	20000e10 	.word	0x20000e10
 8005530:	20000670 	.word	0x20000670
 8005534:	20000e14 	.word	0x20000e14
 8005538:	20000680 	.word	0x20000680
 800553c:	20000e18 	.word	0x20000e18
 8005540:	20000690 	.word	0x20000690
 8005544:	20000e1c 	.word	0x20000e1c
 8005548:	200006a0 	.word	0x200006a0
 800554c:	20000e20 	.word	0x20000e20
 8005550:	200006b0 	.word	0x200006b0
 8005554:	20000e24 	.word	0x20000e24
 8005558:	200006c0 	.word	0x200006c0
 800555c:	20000e2c 	.word	0x20000e2c
 8005560:	200006d0 	.word	0x200006d0
 8005564:	20000e34 	.word	0x20000e34
 8005568:	200006e0 	.word	0x200006e0
 800556c:	20000e38 	.word	0x20000e38
 8005570:	200006f0 	.word	0x200006f0
 8005574:	20000e3c 	.word	0x20000e3c
 8005578:	20000700 	.word	0x20000700
 800557c:	20000e40 	.word	0x20000e40
 8005580:	20000710 	.word	0x20000710
 8005584:	20000e44 	.word	0x20000e44
 8005588:	20000720 	.word	0x20000720
 800558c:	20000e48 	.word	0x20000e48
 8005590:	20000730 	.word	0x20000730
 8005594:	20000e4c 	.word	0x20000e4c
 8005598:	20000740 	.word	0x20000740
 800559c:	20000e50 	.word	0x20000e50
 80055a0:	20000750 	.word	0x20000750
 80055a4:	20000e54 	.word	0x20000e54
 80055a8:	20000760 	.word	0x20000760
 80055ac:	20000e58 	.word	0x20000e58
 80055b0:	20000770 	.word	0x20000770
 80055b4:	20000e5c 	.word	0x20000e5c
 80055b8:	20000780 	.word	0x20000780
 80055bc:	20000e60 	.word	0x20000e60
 80055c0:	20000790 	.word	0x20000790
 80055c4:	20000e64 	.word	0x20000e64
 80055c8:	200007a0 	.word	0x200007a0
 80055cc:	20000e68 	.word	0x20000e68
 80055d0:	200007b0 	.word	0x200007b0
 80055d4:	20000e6c 	.word	0x20000e6c
 80055d8:	200007c0 	.word	0x200007c0
 80055dc:	20000e70 	.word	0x20000e70
 80055e0:	200007d0 	.word	0x200007d0
 80055e4:	20000e74 	.word	0x20000e74
 80055e8:	200007e0 	.word	0x200007e0
 80055ec:	20000e78 	.word	0x20000e78
 80055f0:	200007f0 	.word	0x200007f0
 80055f4:	20000e7c 	.word	0x20000e7c
 80055f8:	20000800 	.word	0x20000800
 80055fc:	20000e80 	.word	0x20000e80
 8005600:	20000810 	.word	0x20000810
 8005604:	20000e84 	.word	0x20000e84
 8005608:	20000820 	.word	0x20000820
 800560c:	20000e88 	.word	0x20000e88
 8005610:	20000830 	.word	0x20000830
 8005614:	20000e8c 	.word	0x20000e8c
 8005618:	20000840 	.word	0x20000840
 800561c:	4603      	mov	r3, r0
 800561e:	4a27      	ldr	r2, [pc, #156]	; (80056bc <loadMenuTexts+0xb14>)
 8005620:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextEN);
 8005622:	4827      	ldr	r0, [pc, #156]	; (80056c0 <loadMenuTexts+0xb18>)
 8005624:	f7fb f8aa 	bl	800077c <copyText>
 8005628:	4603      	mov	r3, r0
 800562a:	4a26      	ldr	r2, [pc, #152]	; (80056c4 <loadMenuTexts+0xb1c>)
 800562c:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextEN);
 800562e:	4826      	ldr	r0, [pc, #152]	; (80056c8 <loadMenuTexts+0xb20>)
 8005630:	f7fb f8a4 	bl	800077c <copyText>
 8005634:	4603      	mov	r3, r0
 8005636:	4a25      	ldr	r2, [pc, #148]	; (80056cc <loadMenuTexts+0xb24>)
 8005638:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextEN);
 800563a:	4825      	ldr	r0, [pc, #148]	; (80056d0 <loadMenuTexts+0xb28>)
 800563c:	f7fb f89e 	bl	800077c <copyText>
 8005640:	4603      	mov	r3, r0
 8005642:	4a24      	ldr	r2, [pc, #144]	; (80056d4 <loadMenuTexts+0xb2c>)
 8005644:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextEN);
 8005646:	4824      	ldr	r0, [pc, #144]	; (80056d8 <loadMenuTexts+0xb30>)
 8005648:	f7fb f898 	bl	800077c <copyText>
 800564c:	4603      	mov	r3, r0
 800564e:	4a23      	ldr	r2, [pc, #140]	; (80056dc <loadMenuTexts+0xb34>)
 8005650:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextEN);
 8005652:	4823      	ldr	r0, [pc, #140]	; (80056e0 <loadMenuTexts+0xb38>)
 8005654:	f7fb f892 	bl	800077c <copyText>
 8005658:	4603      	mov	r3, r0
 800565a:	4a22      	ldr	r2, [pc, #136]	; (80056e4 <loadMenuTexts+0xb3c>)
 800565c:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextEN);
 800565e:	4822      	ldr	r0, [pc, #136]	; (80056e8 <loadMenuTexts+0xb40>)
 8005660:	f7fb f88c 	bl	800077c <copyText>
 8005664:	4603      	mov	r3, r0
 8005666:	4a21      	ldr	r2, [pc, #132]	; (80056ec <loadMenuTexts+0xb44>)
 8005668:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextEN);
 800566a:	4821      	ldr	r0, [pc, #132]	; (80056f0 <loadMenuTexts+0xb48>)
 800566c:	f7fb f886 	bl	800077c <copyText>
 8005670:	4603      	mov	r3, r0
 8005672:	4a20      	ldr	r2, [pc, #128]	; (80056f4 <loadMenuTexts+0xb4c>)
 8005674:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextEN);
 8005676:	4820      	ldr	r0, [pc, #128]	; (80056f8 <loadMenuTexts+0xb50>)
 8005678:	f7fb f880 	bl	800077c <copyText>
 800567c:	4603      	mov	r3, r0
 800567e:	4a1f      	ldr	r2, [pc, #124]	; (80056fc <loadMenuTexts+0xb54>)
 8005680:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
 8005682:	481f      	ldr	r0, [pc, #124]	; (8005700 <loadMenuTexts+0xb58>)
 8005684:	f7fb f87a 	bl	800077c <copyText>
 8005688:	4603      	mov	r3, r0
 800568a:	4a1e      	ldr	r2, [pc, #120]	; (8005704 <loadMenuTexts+0xb5c>)
 800568c:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextEN);
 800568e:	481e      	ldr	r0, [pc, #120]	; (8005708 <loadMenuTexts+0xb60>)
 8005690:	f7fb f874 	bl	800077c <copyText>
 8005694:	4603      	mov	r3, r0
 8005696:	4a1d      	ldr	r2, [pc, #116]	; (800570c <loadMenuTexts+0xb64>)
 8005698:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextEN);
 800569a:	481d      	ldr	r0, [pc, #116]	; (8005710 <loadMenuTexts+0xb68>)
 800569c:	f7fb f86e 	bl	800077c <copyText>
 80056a0:	4603      	mov	r3, r0
 80056a2:	4a1c      	ldr	r2, [pc, #112]	; (8005714 <loadMenuTexts+0xb6c>)
 80056a4:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextEN);
 80056a6:	481c      	ldr	r0, [pc, #112]	; (8005718 <loadMenuTexts+0xb70>)
 80056a8:	f7fb f868 	bl	800077c <copyText>
 80056ac:	4603      	mov	r3, r0
 80056ae:	4a1b      	ldr	r2, [pc, #108]	; (800571c <loadMenuTexts+0xb74>)
 80056b0:	6013      	str	r3, [r2, #0]
}
 80056b2:	bf00      	nop
 80056b4:	3708      	adds	r7, #8
 80056b6:	46bd      	mov	sp, r7
 80056b8:	bd80      	pop	{r7, pc}
 80056ba:	bf00      	nop
 80056bc:	20000e90 	.word	0x20000e90
 80056c0:	20000850 	.word	0x20000850
 80056c4:	20000e94 	.word	0x20000e94
 80056c8:	20000860 	.word	0x20000860
 80056cc:	20000e98 	.word	0x20000e98
 80056d0:	20000870 	.word	0x20000870
 80056d4:	20000e9c 	.word	0x20000e9c
 80056d8:	20000880 	.word	0x20000880
 80056dc:	20000ea0 	.word	0x20000ea0
 80056e0:	20000890 	.word	0x20000890
 80056e4:	20000ea4 	.word	0x20000ea4
 80056e8:	200008a0 	.word	0x200008a0
 80056ec:	20000eb0 	.word	0x20000eb0
 80056f0:	200008b0 	.word	0x200008b0
 80056f4:	20000eb4 	.word	0x20000eb4
 80056f8:	200008c0 	.word	0x200008c0
 80056fc:	20000eb8 	.word	0x20000eb8
 8005700:	200008d0 	.word	0x200008d0
 8005704:	20000ebc 	.word	0x20000ebc
 8005708:	200008e0 	.word	0x200008e0
 800570c:	20000ec0 	.word	0x20000ec0
 8005710:	200008f0 	.word	0x200008f0
 8005714:	20000ec4 	.word	0x20000ec4
 8005718:	20000900 	.word	0x20000900
 800571c:	20000ec8 	.word	0x20000ec8

08005720 <lcdUpdate>:
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

//Tüm fonksiyonlar:

void lcdUpdate(uint8_t y) {
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
 8005726:	4603      	mov	r3, r0
 8005728:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 800572a:	79fb      	ldrb	r3, [r7, #7]
 800572c:	2b01      	cmp	r3, #1
 800572e:	d105      	bne.n	800573c <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8005730:	4a22      	ldr	r2, [pc, #136]	; (80057bc <lcdUpdate+0x9c>)
 8005732:	2101      	movs	r1, #1
 8005734:	2002      	movs	r0, #2
 8005736:	f7fa ff97 	bl	8000668 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 1, "    ESP-RMK     ");
		lcd_print(2, 1, "      RUN       ");
	}
}
 800573a:	e03b      	b.n	80057b4 <lcdUpdate+0x94>
	} else if(y==2) {
 800573c:	79fb      	ldrb	r3, [r7, #7]
 800573e:	2b02      	cmp	r3, #2
 8005740:	d105      	bne.n	800574e <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8005742:	4a1e      	ldr	r2, [pc, #120]	; (80057bc <lcdUpdate+0x9c>)
 8005744:	2102      	movs	r1, #2
 8005746:	2002      	movs	r0, #2
 8005748:	f7fa ff8e 	bl	8000668 <lcd_print>
}
 800574c:	e032      	b.n	80057b4 <lcdUpdate+0x94>
	} else if(y==3) {
 800574e:	79fb      	ldrb	r3, [r7, #7]
 8005750:	2b03      	cmp	r3, #3
 8005752:	d105      	bne.n	8005760 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8005754:	4a19      	ldr	r2, [pc, #100]	; (80057bc <lcdUpdate+0x9c>)
 8005756:	2103      	movs	r1, #3
 8005758:	2002      	movs	r0, #2
 800575a:	f7fa ff85 	bl	8000668 <lcd_print>
}
 800575e:	e029      	b.n	80057b4 <lcdUpdate+0x94>
	} else if(y==4) {
 8005760:	79fb      	ldrb	r3, [r7, #7]
 8005762:	2b04      	cmp	r3, #4
 8005764:	d105      	bne.n	8005772 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8005766:	4a15      	ldr	r2, [pc, #84]	; (80057bc <lcdUpdate+0x9c>)
 8005768:	2104      	movs	r1, #4
 800576a:	2002      	movs	r0, #2
 800576c:	f7fa ff7c 	bl	8000668 <lcd_print>
}
 8005770:	e020      	b.n	80057b4 <lcdUpdate+0x94>
	} else if(y==5) {
 8005772:	79fb      	ldrb	r3, [r7, #7]
 8005774:	2b05      	cmp	r3, #5
 8005776:	d105      	bne.n	8005784 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8005778:	4a10      	ldr	r2, [pc, #64]	; (80057bc <lcdUpdate+0x9c>)
 800577a:	2105      	movs	r1, #5
 800577c:	2002      	movs	r0, #2
 800577e:	f7fa ff73 	bl	8000668 <lcd_print>
}
 8005782:	e017      	b.n	80057b4 <lcdUpdate+0x94>
	} else if(y==6) {
 8005784:	79fb      	ldrb	r3, [r7, #7]
 8005786:	2b06      	cmp	r3, #6
 8005788:	d105      	bne.n	8005796 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 800578a:	4a0c      	ldr	r2, [pc, #48]	; (80057bc <lcdUpdate+0x9c>)
 800578c:	2106      	movs	r1, #6
 800578e:	2002      	movs	r0, #2
 8005790:	f7fa ff6a 	bl	8000668 <lcd_print>
}
 8005794:	e00e      	b.n	80057b4 <lcdUpdate+0x94>
	} else if (y==7) {
 8005796:	79fb      	ldrb	r3, [r7, #7]
 8005798:	2b07      	cmp	r3, #7
 800579a:	d10b      	bne.n	80057b4 <lcdUpdate+0x94>
		lcd_clear();
 800579c:	f7fa ff90 	bl	80006c0 <lcd_clear>
		lcd_print(1, 1, "    ESP-RMK     ");
 80057a0:	4a07      	ldr	r2, [pc, #28]	; (80057c0 <lcdUpdate+0xa0>)
 80057a2:	2101      	movs	r1, #1
 80057a4:	2001      	movs	r0, #1
 80057a6:	f7fa ff5f 	bl	8000668 <lcd_print>
		lcd_print(2, 1, "      RUN       ");
 80057aa:	4a06      	ldr	r2, [pc, #24]	; (80057c4 <lcdUpdate+0xa4>)
 80057ac:	2101      	movs	r1, #1
 80057ae:	2002      	movs	r0, #2
 80057b0:	f7fa ff5a 	bl	8000668 <lcd_print>
}
 80057b4:	bf00      	nop
 80057b6:	3708      	adds	r7, #8
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	0800d9e0 	.word	0x0800d9e0
 80057c0:	0800e314 	.word	0x0800e314
 80057c4:	0800e328 	.word	0x0800e328

080057c8 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b082      	sub	sp, #8
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	4603      	mov	r3, r0
 80057d0:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 80057d2:	79fb      	ldrb	r3, [r7, #7]
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d11d      	bne.n	8005814 <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 80057d8:	4b62      	ldr	r3, [pc, #392]	; (8005964 <hataKoduLcdGoster+0x19c>)
 80057da:	781b      	ldrb	r3, [r3, #0]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d105      	bne.n	80057ec <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU    ");
 80057e0:	4a61      	ldr	r2, [pc, #388]	; (8005968 <hataKoduLcdGoster+0x1a0>)
 80057e2:	2101      	movs	r1, #1
 80057e4:	2001      	movs	r0, #1
 80057e6:	f7fa ff3f 	bl	8000668 <lcd_print>
 80057ea:	e008      	b.n	80057fe <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 80057ec:	4b5d      	ldr	r3, [pc, #372]	; (8005964 <hataKoduLcdGoster+0x19c>)
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	2b01      	cmp	r3, #1
 80057f2:	d104      	bne.n	80057fe <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE   ");
 80057f4:	4a5d      	ldr	r2, [pc, #372]	; (800596c <hataKoduLcdGoster+0x1a4>)
 80057f6:	2101      	movs	r1, #1
 80057f8:	2001      	movs	r0, #1
 80057fa:	f7fa ff35 	bl	8000668 <lcd_print>
		}
		lcd_print(2, 1, "1");
 80057fe:	4a5c      	ldr	r2, [pc, #368]	; (8005970 <hataKoduLcdGoster+0x1a8>)
 8005800:	2101      	movs	r1, #1
 8005802:	2002      	movs	r0, #2
 8005804:	f7fa ff30 	bl	8000668 <lcd_print>
		lcd_print(2, 7, "          ");
 8005808:	4a5a      	ldr	r2, [pc, #360]	; (8005974 <hataKoduLcdGoster+0x1ac>)
 800580a:	2107      	movs	r1, #7
 800580c:	2002      	movs	r0, #2
 800580e:	f7fa ff2b 	bl	8000668 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE   ");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8005812:	e0a3      	b.n	800595c <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8005814:	79fb      	ldrb	r3, [r7, #7]
 8005816:	2b02      	cmp	r3, #2
 8005818:	d11d      	bne.n	8005856 <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 800581a:	4b52      	ldr	r3, [pc, #328]	; (8005964 <hataKoduLcdGoster+0x19c>)
 800581c:	781b      	ldrb	r3, [r3, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d105      	bne.n	800582e <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU    ");
 8005822:	4a51      	ldr	r2, [pc, #324]	; (8005968 <hataKoduLcdGoster+0x1a0>)
 8005824:	2101      	movs	r1, #1
 8005826:	2001      	movs	r0, #1
 8005828:	f7fa ff1e 	bl	8000668 <lcd_print>
 800582c:	e008      	b.n	8005840 <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 800582e:	4b4d      	ldr	r3, [pc, #308]	; (8005964 <hataKoduLcdGoster+0x19c>)
 8005830:	781b      	ldrb	r3, [r3, #0]
 8005832:	2b01      	cmp	r3, #1
 8005834:	d104      	bne.n	8005840 <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005836:	4a4d      	ldr	r2, [pc, #308]	; (800596c <hataKoduLcdGoster+0x1a4>)
 8005838:	2101      	movs	r1, #1
 800583a:	2001      	movs	r0, #1
 800583c:	f7fa ff14 	bl	8000668 <lcd_print>
		lcd_print(2, 2, "2");
 8005840:	4a4d      	ldr	r2, [pc, #308]	; (8005978 <hataKoduLcdGoster+0x1b0>)
 8005842:	2102      	movs	r1, #2
 8005844:	2002      	movs	r0, #2
 8005846:	f7fa ff0f 	bl	8000668 <lcd_print>
		lcd_print(2, 7, "          ");
 800584a:	4a4a      	ldr	r2, [pc, #296]	; (8005974 <hataKoduLcdGoster+0x1ac>)
 800584c:	2107      	movs	r1, #7
 800584e:	2002      	movs	r0, #2
 8005850:	f7fa ff0a 	bl	8000668 <lcd_print>
}
 8005854:	e082      	b.n	800595c <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8005856:	79fb      	ldrb	r3, [r7, #7]
 8005858:	2b03      	cmp	r3, #3
 800585a:	d11d      	bne.n	8005898 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 800585c:	4b41      	ldr	r3, [pc, #260]	; (8005964 <hataKoduLcdGoster+0x19c>)
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d105      	bne.n	8005870 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU    ");
 8005864:	4a40      	ldr	r2, [pc, #256]	; (8005968 <hataKoduLcdGoster+0x1a0>)
 8005866:	2101      	movs	r1, #1
 8005868:	2001      	movs	r0, #1
 800586a:	f7fa fefd 	bl	8000668 <lcd_print>
 800586e:	e008      	b.n	8005882 <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8005870:	4b3c      	ldr	r3, [pc, #240]	; (8005964 <hataKoduLcdGoster+0x19c>)
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	2b01      	cmp	r3, #1
 8005876:	d104      	bne.n	8005882 <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005878:	4a3c      	ldr	r2, [pc, #240]	; (800596c <hataKoduLcdGoster+0x1a4>)
 800587a:	2101      	movs	r1, #1
 800587c:	2001      	movs	r0, #1
 800587e:	f7fa fef3 	bl	8000668 <lcd_print>
		lcd_print(2, 3, "3");
 8005882:	4a3e      	ldr	r2, [pc, #248]	; (800597c <hataKoduLcdGoster+0x1b4>)
 8005884:	2103      	movs	r1, #3
 8005886:	2002      	movs	r0, #2
 8005888:	f7fa feee 	bl	8000668 <lcd_print>
		lcd_print(2, 7, "          ");
 800588c:	4a39      	ldr	r2, [pc, #228]	; (8005974 <hataKoduLcdGoster+0x1ac>)
 800588e:	2107      	movs	r1, #7
 8005890:	2002      	movs	r0, #2
 8005892:	f7fa fee9 	bl	8000668 <lcd_print>
}
 8005896:	e061      	b.n	800595c <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8005898:	79fb      	ldrb	r3, [r7, #7]
 800589a:	2b04      	cmp	r3, #4
 800589c:	d11d      	bne.n	80058da <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 800589e:	4b31      	ldr	r3, [pc, #196]	; (8005964 <hataKoduLcdGoster+0x19c>)
 80058a0:	781b      	ldrb	r3, [r3, #0]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d105      	bne.n	80058b2 <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU    ");
 80058a6:	4a30      	ldr	r2, [pc, #192]	; (8005968 <hataKoduLcdGoster+0x1a0>)
 80058a8:	2101      	movs	r1, #1
 80058aa:	2001      	movs	r0, #1
 80058ac:	f7fa fedc 	bl	8000668 <lcd_print>
 80058b0:	e008      	b.n	80058c4 <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 80058b2:	4b2c      	ldr	r3, [pc, #176]	; (8005964 <hataKoduLcdGoster+0x19c>)
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	2b01      	cmp	r3, #1
 80058b8:	d104      	bne.n	80058c4 <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE   ");
 80058ba:	4a2c      	ldr	r2, [pc, #176]	; (800596c <hataKoduLcdGoster+0x1a4>)
 80058bc:	2101      	movs	r1, #1
 80058be:	2001      	movs	r0, #1
 80058c0:	f7fa fed2 	bl	8000668 <lcd_print>
		lcd_print(2, 4, "4");
 80058c4:	4a2e      	ldr	r2, [pc, #184]	; (8005980 <hataKoduLcdGoster+0x1b8>)
 80058c6:	2104      	movs	r1, #4
 80058c8:	2002      	movs	r0, #2
 80058ca:	f7fa fecd 	bl	8000668 <lcd_print>
		lcd_print(2, 7, "          ");
 80058ce:	4a29      	ldr	r2, [pc, #164]	; (8005974 <hataKoduLcdGoster+0x1ac>)
 80058d0:	2107      	movs	r1, #7
 80058d2:	2002      	movs	r0, #2
 80058d4:	f7fa fec8 	bl	8000668 <lcd_print>
}
 80058d8:	e040      	b.n	800595c <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 80058da:	79fb      	ldrb	r3, [r7, #7]
 80058dc:	2b05      	cmp	r3, #5
 80058de:	d11d      	bne.n	800591c <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 80058e0:	4b20      	ldr	r3, [pc, #128]	; (8005964 <hataKoduLcdGoster+0x19c>)
 80058e2:	781b      	ldrb	r3, [r3, #0]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d105      	bne.n	80058f4 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU    ");
 80058e8:	4a1f      	ldr	r2, [pc, #124]	; (8005968 <hataKoduLcdGoster+0x1a0>)
 80058ea:	2101      	movs	r1, #1
 80058ec:	2001      	movs	r0, #1
 80058ee:	f7fa febb 	bl	8000668 <lcd_print>
 80058f2:	e008      	b.n	8005906 <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 80058f4:	4b1b      	ldr	r3, [pc, #108]	; (8005964 <hataKoduLcdGoster+0x19c>)
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	d104      	bne.n	8005906 <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE   ");
 80058fc:	4a1b      	ldr	r2, [pc, #108]	; (800596c <hataKoduLcdGoster+0x1a4>)
 80058fe:	2101      	movs	r1, #1
 8005900:	2001      	movs	r0, #1
 8005902:	f7fa feb1 	bl	8000668 <lcd_print>
		lcd_print(2, 5, "5");
 8005906:	4a1f      	ldr	r2, [pc, #124]	; (8005984 <hataKoduLcdGoster+0x1bc>)
 8005908:	2105      	movs	r1, #5
 800590a:	2002      	movs	r0, #2
 800590c:	f7fa feac 	bl	8000668 <lcd_print>
		lcd_print(2, 7, "          ");
 8005910:	4a18      	ldr	r2, [pc, #96]	; (8005974 <hataKoduLcdGoster+0x1ac>)
 8005912:	2107      	movs	r1, #7
 8005914:	2002      	movs	r0, #2
 8005916:	f7fa fea7 	bl	8000668 <lcd_print>
}
 800591a:	e01f      	b.n	800595c <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 800591c:	79fb      	ldrb	r3, [r7, #7]
 800591e:	2b06      	cmp	r3, #6
 8005920:	d11c      	bne.n	800595c <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8005922:	4b10      	ldr	r3, [pc, #64]	; (8005964 <hataKoduLcdGoster+0x19c>)
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d105      	bne.n	8005936 <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU    ");
 800592a:	4a0f      	ldr	r2, [pc, #60]	; (8005968 <hataKoduLcdGoster+0x1a0>)
 800592c:	2101      	movs	r1, #1
 800592e:	2001      	movs	r0, #1
 8005930:	f7fa fe9a 	bl	8000668 <lcd_print>
 8005934:	e008      	b.n	8005948 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8005936:	4b0b      	ldr	r3, [pc, #44]	; (8005964 <hataKoduLcdGoster+0x19c>)
 8005938:	781b      	ldrb	r3, [r3, #0]
 800593a:	2b01      	cmp	r3, #1
 800593c:	d104      	bne.n	8005948 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE   ");
 800593e:	4a0b      	ldr	r2, [pc, #44]	; (800596c <hataKoduLcdGoster+0x1a4>)
 8005940:	2101      	movs	r1, #1
 8005942:	2001      	movs	r0, #1
 8005944:	f7fa fe90 	bl	8000668 <lcd_print>
		lcd_print(2, 6, "6");
 8005948:	4a0f      	ldr	r2, [pc, #60]	; (8005988 <hataKoduLcdGoster+0x1c0>)
 800594a:	2106      	movs	r1, #6
 800594c:	2002      	movs	r0, #2
 800594e:	f7fa fe8b 	bl	8000668 <lcd_print>
		lcd_print(2, 7, "          ");
 8005952:	4a08      	ldr	r2, [pc, #32]	; (8005974 <hataKoduLcdGoster+0x1ac>)
 8005954:	2107      	movs	r1, #7
 8005956:	2002      	movs	r0, #2
 8005958:	f7fa fe86 	bl	8000668 <lcd_print>
}
 800595c:	bf00      	nop
 800595e:	3708      	adds	r7, #8
 8005960:	46bd      	mov	sp, r7
 8005962:	bd80      	pop	{r7, pc}
 8005964:	20000d56 	.word	0x20000d56
 8005968:	0800e33c 	.word	0x0800e33c
 800596c:	0800e350 	.word	0x0800e350
 8005970:	0800d760 	.word	0x0800d760
 8005974:	0800e364 	.word	0x0800e364
 8005978:	0800d764 	.word	0x0800d764
 800597c:	0800d768 	.word	0x0800d768
 8005980:	0800d76c 	.word	0x0800d76c
 8005984:	0800d770 	.word	0x0800d770
 8005988:	0800d774 	.word	0x0800d774

0800598c <convertAndSendData>:

void convertAndSendData() {
 800598c:	b580      	push	{r7, lr}
 800598e:	b082      	sub	sp, #8
 8005990:	af00      	add	r7, sp, #0
	lcd_print(1, 1, "Veri Esleme");
 8005992:	4a14      	ldr	r2, [pc, #80]	; (80059e4 <convertAndSendData+0x58>)
 8005994:	2101      	movs	r1, #1
 8005996:	2001      	movs	r0, #1
 8005998:	f7fa fe66 	bl	8000668 <lcd_print>
	lcd_print(2, 1, "Baslatildi...");
 800599c:	4a12      	ldr	r2, [pc, #72]	; (80059e8 <convertAndSendData+0x5c>)
 800599e:	2101      	movs	r1, #1
 80059a0:	2002      	movs	r0, #2
 80059a2:	f7fa fe61 	bl	8000668 <lcd_print>
	for(int i=0; i<2; i++) {
 80059a6:	2300      	movs	r3, #0
 80059a8:	607b      	str	r3, [r7, #4]
 80059aa:	e00a      	b.n	80059c2 <convertAndSendData+0x36>
		sendMachineData(&huart1, machineID, mergeData());
 80059ac:	f002 fb44 	bl	8008038 <mergeData>
 80059b0:	4603      	mov	r3, r0
 80059b2:	461a      	mov	r2, r3
 80059b4:	490d      	ldr	r1, [pc, #52]	; (80059ec <convertAndSendData+0x60>)
 80059b6:	480e      	ldr	r0, [pc, #56]	; (80059f0 <convertAndSendData+0x64>)
 80059b8:	f7fa fc3c 	bl	8000234 <sendMachineData>
	for(int i=0; i<2; i++) {
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	3301      	adds	r3, #1
 80059c0:	607b      	str	r3, [r7, #4]
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	ddf1      	ble.n	80059ac <convertAndSendData+0x20>
	}
	HAL_Delay(500);
 80059c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80059cc:	f003 fae8 	bl	8008fa0 <HAL_Delay>
	lcd_clear();
 80059d0:	f7fa fe76 	bl	80006c0 <lcd_clear>
	HAL_Delay(500);
 80059d4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80059d8:	f003 fae2 	bl	8008fa0 <HAL_Delay>
}
 80059dc:	bf00      	nop
 80059de:	3708      	adds	r7, #8
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	0800e370 	.word	0x0800e370
 80059e8:	0800e37c 	.word	0x0800e37c
 80059ec:	20000ce0 	.word	0x20000ce0
 80059f0:	20000bec 	.word	0x20000bec

080059f4 <eepromKontrol>:

void eepromKontrol(int type) {
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b086      	sub	sp, #24
 80059f8:	af04      	add	r7, sp, #16
 80059fa:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80059fc:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005a00:	9302      	str	r3, [sp, #8]
 8005a02:	236e      	movs	r3, #110	; 0x6e
 8005a04:	9301      	str	r3, [sp, #4]
 8005a06:	4b9c      	ldr	r3, [pc, #624]	; (8005c78 <eepromKontrol+0x284>)
 8005a08:	9300      	str	r3, [sp, #0]
 8005a0a:	236e      	movs	r3, #110	; 0x6e
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	21a0      	movs	r1, #160	; 0xa0
 8005a10:	489a      	ldr	r0, [pc, #616]	; (8005c7c <eepromKontrol+0x288>)
 8005a12:	f004 fc49 	bl	800a2a8 <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8005a16:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8005a1a:	f003 fac1 	bl	8008fa0 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 8005a1e:	4b96      	ldr	r3, [pc, #600]	; (8005c78 <eepromKontrol+0x284>)
 8005a20:	78da      	ldrb	r2, [r3, #3]
 8005a22:	4b97      	ldr	r3, [pc, #604]	; (8005c80 <eepromKontrol+0x28c>)
 8005a24:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8005a26:	4b94      	ldr	r3, [pc, #592]	; (8005c78 <eepromKontrol+0x284>)
 8005a28:	785a      	ldrb	r2, [r3, #1]
 8005a2a:	4b96      	ldr	r3, [pc, #600]	; (8005c84 <eepromKontrol+0x290>)
 8005a2c:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 8005a2e:	4b92      	ldr	r3, [pc, #584]	; (8005c78 <eepromKontrol+0x284>)
 8005a30:	789a      	ldrb	r2, [r3, #2]
 8005a32:	4b95      	ldr	r3, [pc, #596]	; (8005c88 <eepromKontrol+0x294>)
 8005a34:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8005a36:	4b90      	ldr	r3, [pc, #576]	; (8005c78 <eepromKontrol+0x284>)
 8005a38:	791a      	ldrb	r2, [r3, #4]
 8005a3a:	4b94      	ldr	r3, [pc, #592]	; (8005c8c <eepromKontrol+0x298>)
 8005a3c:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 8005a3e:	4b8e      	ldr	r3, [pc, #568]	; (8005c78 <eepromKontrol+0x284>)
 8005a40:	795a      	ldrb	r2, [r3, #5]
 8005a42:	4b93      	ldr	r3, [pc, #588]	; (8005c90 <eepromKontrol+0x29c>)
 8005a44:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8005a46:	4b8c      	ldr	r3, [pc, #560]	; (8005c78 <eepromKontrol+0x284>)
 8005a48:	799a      	ldrb	r2, [r3, #6]
 8005a4a:	4b92      	ldr	r3, [pc, #584]	; (8005c94 <eepromKontrol+0x2a0>)
 8005a4c:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 8005a4e:	4b8a      	ldr	r3, [pc, #552]	; (8005c78 <eepromKontrol+0x284>)
 8005a50:	79da      	ldrb	r2, [r3, #7]
 8005a52:	4b91      	ldr	r3, [pc, #580]	; (8005c98 <eepromKontrol+0x2a4>)
 8005a54:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8005a56:	4b88      	ldr	r3, [pc, #544]	; (8005c78 <eepromKontrol+0x284>)
 8005a58:	7a1a      	ldrb	r2, [r3, #8]
 8005a5a:	4b90      	ldr	r3, [pc, #576]	; (8005c9c <eepromKontrol+0x2a8>)
 8005a5c:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 8005a5e:	4b86      	ldr	r3, [pc, #536]	; (8005c78 <eepromKontrol+0x284>)
 8005a60:	7a5a      	ldrb	r2, [r3, #9]
 8005a62:	4b8f      	ldr	r3, [pc, #572]	; (8005ca0 <eepromKontrol+0x2ac>)
 8005a64:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 8005a66:	4b84      	ldr	r3, [pc, #528]	; (8005c78 <eepromKontrol+0x284>)
 8005a68:	7a9a      	ldrb	r2, [r3, #10]
 8005a6a:	4b8e      	ldr	r3, [pc, #568]	; (8005ca4 <eepromKontrol+0x2b0>)
 8005a6c:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 8005a6e:	4b82      	ldr	r3, [pc, #520]	; (8005c78 <eepromKontrol+0x284>)
 8005a70:	7ada      	ldrb	r2, [r3, #11]
 8005a72:	4b8d      	ldr	r3, [pc, #564]	; (8005ca8 <eepromKontrol+0x2b4>)
 8005a74:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 8005a76:	4b80      	ldr	r3, [pc, #512]	; (8005c78 <eepromKontrol+0x284>)
 8005a78:	7b1a      	ldrb	r2, [r3, #12]
 8005a7a:	4b8c      	ldr	r3, [pc, #560]	; (8005cac <eepromKontrol+0x2b8>)
 8005a7c:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 8005a7e:	4b7e      	ldr	r3, [pc, #504]	; (8005c78 <eepromKontrol+0x284>)
 8005a80:	7b5a      	ldrb	r2, [r3, #13]
 8005a82:	4b8b      	ldr	r3, [pc, #556]	; (8005cb0 <eepromKontrol+0x2bc>)
 8005a84:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 8005a86:	4b7c      	ldr	r3, [pc, #496]	; (8005c78 <eepromKontrol+0x284>)
 8005a88:	7b9a      	ldrb	r2, [r3, #14]
 8005a8a:	4b8a      	ldr	r3, [pc, #552]	; (8005cb4 <eepromKontrol+0x2c0>)
 8005a8c:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 8005a8e:	4b7a      	ldr	r3, [pc, #488]	; (8005c78 <eepromKontrol+0x284>)
 8005a90:	7bda      	ldrb	r2, [r3, #15]
 8005a92:	4b89      	ldr	r3, [pc, #548]	; (8005cb8 <eepromKontrol+0x2c4>)
 8005a94:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 8005a96:	4b78      	ldr	r3, [pc, #480]	; (8005c78 <eepromKontrol+0x284>)
 8005a98:	7c1a      	ldrb	r2, [r3, #16]
 8005a9a:	4b88      	ldr	r3, [pc, #544]	; (8005cbc <eepromKontrol+0x2c8>)
 8005a9c:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 8005a9e:	4b76      	ldr	r3, [pc, #472]	; (8005c78 <eepromKontrol+0x284>)
 8005aa0:	7c5a      	ldrb	r2, [r3, #17]
 8005aa2:	4b87      	ldr	r3, [pc, #540]	; (8005cc0 <eepromKontrol+0x2cc>)
 8005aa4:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 8005aa6:	4b74      	ldr	r3, [pc, #464]	; (8005c78 <eepromKontrol+0x284>)
 8005aa8:	7c9a      	ldrb	r2, [r3, #18]
 8005aaa:	4b86      	ldr	r3, [pc, #536]	; (8005cc4 <eepromKontrol+0x2d0>)
 8005aac:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 8005aae:	4b72      	ldr	r3, [pc, #456]	; (8005c78 <eepromKontrol+0x284>)
 8005ab0:	7cda      	ldrb	r2, [r3, #19]
 8005ab2:	4b85      	ldr	r3, [pc, #532]	; (8005cc8 <eepromKontrol+0x2d4>)
 8005ab4:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 8005ab6:	4b70      	ldr	r3, [pc, #448]	; (8005c78 <eepromKontrol+0x284>)
 8005ab8:	7d1a      	ldrb	r2, [r3, #20]
 8005aba:	4b84      	ldr	r3, [pc, #528]	; (8005ccc <eepromKontrol+0x2d8>)
 8005abc:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 8005abe:	4b6e      	ldr	r3, [pc, #440]	; (8005c78 <eepromKontrol+0x284>)
 8005ac0:	7d5a      	ldrb	r2, [r3, #21]
 8005ac2:	4b83      	ldr	r3, [pc, #524]	; (8005cd0 <eepromKontrol+0x2dc>)
 8005ac4:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8005ac6:	4b6c      	ldr	r3, [pc, #432]	; (8005c78 <eepromKontrol+0x284>)
 8005ac8:	7d9a      	ldrb	r2, [r3, #22]
 8005aca:	4b82      	ldr	r3, [pc, #520]	; (8005cd4 <eepromKontrol+0x2e0>)
 8005acc:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 8005ace:	4b6a      	ldr	r3, [pc, #424]	; (8005c78 <eepromKontrol+0x284>)
 8005ad0:	7dda      	ldrb	r2, [r3, #23]
 8005ad2:	4b81      	ldr	r3, [pc, #516]	; (8005cd8 <eepromKontrol+0x2e4>)
 8005ad4:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8005ad6:	4b68      	ldr	r3, [pc, #416]	; (8005c78 <eepromKontrol+0x284>)
 8005ad8:	7e1a      	ldrb	r2, [r3, #24]
 8005ada:	4b80      	ldr	r3, [pc, #512]	; (8005cdc <eepromKontrol+0x2e8>)
 8005adc:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 8005ade:	4b66      	ldr	r3, [pc, #408]	; (8005c78 <eepromKontrol+0x284>)
 8005ae0:	7e5a      	ldrb	r2, [r3, #25]
 8005ae2:	4b7f      	ldr	r3, [pc, #508]	; (8005ce0 <eepromKontrol+0x2ec>)
 8005ae4:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8005ae6:	4b64      	ldr	r3, [pc, #400]	; (8005c78 <eepromKontrol+0x284>)
 8005ae8:	7e9a      	ldrb	r2, [r3, #26]
 8005aea:	4b7e      	ldr	r3, [pc, #504]	; (8005ce4 <eepromKontrol+0x2f0>)
 8005aec:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 8005aee:	4b62      	ldr	r3, [pc, #392]	; (8005c78 <eepromKontrol+0x284>)
 8005af0:	7eda      	ldrb	r2, [r3, #27]
 8005af2:	4b7d      	ldr	r3, [pc, #500]	; (8005ce8 <eepromKontrol+0x2f4>)
 8005af4:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8005af6:	4b60      	ldr	r3, [pc, #384]	; (8005c78 <eepromKontrol+0x284>)
 8005af8:	7f1a      	ldrb	r2, [r3, #28]
 8005afa:	4b7c      	ldr	r3, [pc, #496]	; (8005cec <eepromKontrol+0x2f8>)
 8005afc:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 8005afe:	4b5e      	ldr	r3, [pc, #376]	; (8005c78 <eepromKontrol+0x284>)
 8005b00:	7f5a      	ldrb	r2, [r3, #29]
 8005b02:	4b7b      	ldr	r3, [pc, #492]	; (8005cf0 <eepromKontrol+0x2fc>)
 8005b04:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8005b06:	4b5c      	ldr	r3, [pc, #368]	; (8005c78 <eepromKontrol+0x284>)
 8005b08:	7f9a      	ldrb	r2, [r3, #30]
 8005b0a:	4b7a      	ldr	r3, [pc, #488]	; (8005cf4 <eepromKontrol+0x300>)
 8005b0c:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 8005b0e:	4b5a      	ldr	r3, [pc, #360]	; (8005c78 <eepromKontrol+0x284>)
 8005b10:	7fda      	ldrb	r2, [r3, #31]
 8005b12:	4b79      	ldr	r3, [pc, #484]	; (8005cf8 <eepromKontrol+0x304>)
 8005b14:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8005b16:	4b58      	ldr	r3, [pc, #352]	; (8005c78 <eepromKontrol+0x284>)
 8005b18:	f893 2020 	ldrb.w	r2, [r3, #32]
 8005b1c:	4b77      	ldr	r3, [pc, #476]	; (8005cfc <eepromKontrol+0x308>)
 8005b1e:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 8005b20:	4b55      	ldr	r3, [pc, #340]	; (8005c78 <eepromKontrol+0x284>)
 8005b22:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8005b26:	4b76      	ldr	r3, [pc, #472]	; (8005d00 <eepromKontrol+0x30c>)
 8005b28:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[47];
 8005b2a:	4b53      	ldr	r3, [pc, #332]	; (8005c78 <eepromKontrol+0x284>)
 8005b2c:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8005b30:	4b74      	ldr	r3, [pc, #464]	; (8005d04 <eepromKontrol+0x310>)
 8005b32:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8005b34:	4b50      	ldr	r3, [pc, #320]	; (8005c78 <eepromKontrol+0x284>)
 8005b36:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8005b3a:	4b73      	ldr	r3, [pc, #460]	; (8005d08 <eepromKontrol+0x314>)
 8005b3c:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 8005b3e:	4b4e      	ldr	r3, [pc, #312]	; (8005c78 <eepromKontrol+0x284>)
 8005b40:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8005b44:	4b71      	ldr	r3, [pc, #452]	; (8005d0c <eepromKontrol+0x318>)
 8005b46:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8005b48:	4b4b      	ldr	r3, [pc, #300]	; (8005c78 <eepromKontrol+0x284>)
 8005b4a:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8005b4e:	4b70      	ldr	r3, [pc, #448]	; (8005d10 <eepromKontrol+0x31c>)
 8005b50:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8005b52:	4b49      	ldr	r3, [pc, #292]	; (8005c78 <eepromKontrol+0x284>)
 8005b54:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8005b58:	4b6e      	ldr	r3, [pc, #440]	; (8005d14 <eepromKontrol+0x320>)
 8005b5a:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 8005b5c:	4b46      	ldr	r3, [pc, #280]	; (8005c78 <eepromKontrol+0x284>)
 8005b5e:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8005b62:	4b6d      	ldr	r3, [pc, #436]	; (8005d18 <eepromKontrol+0x324>)
 8005b64:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 8005b66:	4b44      	ldr	r3, [pc, #272]	; (8005c78 <eepromKontrol+0x284>)
 8005b68:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8005b6c:	4b6b      	ldr	r3, [pc, #428]	; (8005d1c <eepromKontrol+0x328>)
 8005b6e:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 8005b70:	4b41      	ldr	r3, [pc, #260]	; (8005c78 <eepromKontrol+0x284>)
 8005b72:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8005b76:	4b6a      	ldr	r3, [pc, #424]	; (8005d20 <eepromKontrol+0x32c>)
 8005b78:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 8005b7a:	4b3f      	ldr	r3, [pc, #252]	; (8005c78 <eepromKontrol+0x284>)
 8005b7c:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8005b80:	4b68      	ldr	r3, [pc, #416]	; (8005d24 <eepromKontrol+0x330>)
 8005b82:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 8005b84:	4b3c      	ldr	r3, [pc, #240]	; (8005c78 <eepromKontrol+0x284>)
 8005b86:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8005b8a:	4b67      	ldr	r3, [pc, #412]	; (8005d28 <eepromKontrol+0x334>)
 8005b8c:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 8005b8e:	4b3a      	ldr	r3, [pc, #232]	; (8005c78 <eepromKontrol+0x284>)
 8005b90:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005b94:	4b65      	ldr	r3, [pc, #404]	; (8005d2c <eepromKontrol+0x338>)
 8005b96:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 8005b98:	4b37      	ldr	r3, [pc, #220]	; (8005c78 <eepromKontrol+0x284>)
 8005b9a:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8005b9e:	4b64      	ldr	r3, [pc, #400]	; (8005d30 <eepromKontrol+0x33c>)
 8005ba0:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 8005ba2:	4b35      	ldr	r3, [pc, #212]	; (8005c78 <eepromKontrol+0x284>)
 8005ba4:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8005ba8:	4b62      	ldr	r3, [pc, #392]	; (8005d34 <eepromKontrol+0x340>)
 8005baa:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 8005bac:	4b32      	ldr	r3, [pc, #200]	; (8005c78 <eepromKontrol+0x284>)
 8005bae:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8005bb2:	4b61      	ldr	r3, [pc, #388]	; (8005d38 <eepromKontrol+0x344>)
 8005bb4:	701a      	strb	r2, [r3, #0]

	loadMenuTexts(dilSecim);
 8005bb6:	4b52      	ldr	r3, [pc, #328]	; (8005d00 <eepromKontrol+0x30c>)
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f7fe fff4 	bl	8004ba8 <loadMenuTexts>

	if(calismaSayisi10000>9) {
 8005bc0:	4b4e      	ldr	r3, [pc, #312]	; (8005cfc <eepromKontrol+0x308>)
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	2b09      	cmp	r3, #9
 8005bc6:	d902      	bls.n	8005bce <eepromKontrol+0x1da>
	    calismaSayisi10000=0;
 8005bc8:	4b4c      	ldr	r3, [pc, #304]	; (8005cfc <eepromKontrol+0x308>)
 8005bca:	2200      	movs	r2, #0
 8005bcc:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 8005bce:	4b4a      	ldr	r3, [pc, #296]	; (8005cf8 <eepromKontrol+0x304>)
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	2b09      	cmp	r3, #9
 8005bd4:	d902      	bls.n	8005bdc <eepromKontrol+0x1e8>
	    calismaSayisi1000=0;
 8005bd6:	4b48      	ldr	r3, [pc, #288]	; (8005cf8 <eepromKontrol+0x304>)
 8005bd8:	2200      	movs	r2, #0
 8005bda:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 8005bdc:	4b45      	ldr	r3, [pc, #276]	; (8005cf4 <eepromKontrol+0x300>)
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	2b09      	cmp	r3, #9
 8005be2:	d902      	bls.n	8005bea <eepromKontrol+0x1f6>
	    calismaSayisi100=0;
 8005be4:	4b43      	ldr	r3, [pc, #268]	; (8005cf4 <eepromKontrol+0x300>)
 8005be6:	2200      	movs	r2, #0
 8005be8:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8005bea:	4b41      	ldr	r3, [pc, #260]	; (8005cf0 <eepromKontrol+0x2fc>)
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	2b09      	cmp	r3, #9
 8005bf0:	d902      	bls.n	8005bf8 <eepromKontrol+0x204>
	    calismaSayisi10=0;
 8005bf2:	4b3f      	ldr	r3, [pc, #252]	; (8005cf0 <eepromKontrol+0x2fc>)
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8005bf8:	4b3c      	ldr	r3, [pc, #240]	; (8005cec <eepromKontrol+0x2f8>)
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	2b09      	cmp	r3, #9
 8005bfe:	d902      	bls.n	8005c06 <eepromKontrol+0x212>
	    calismaSayisi1=0;
 8005c00:	4b3a      	ldr	r3, [pc, #232]	; (8005cec <eepromKontrol+0x2f8>)
 8005c02:	2200      	movs	r2, #0
 8005c04:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8005c06:	4b1f      	ldr	r3, [pc, #124]	; (8005c84 <eepromKontrol+0x290>)
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d902      	bls.n	8005c14 <eepromKontrol+0x220>
	    calismaSekli=0;
 8005c0e:	4b1d      	ldr	r3, [pc, #116]	; (8005c84 <eepromKontrol+0x290>)
 8005c10:	2200      	movs	r2, #0
 8005c12:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8005c14:	4b1c      	ldr	r3, [pc, #112]	; (8005c88 <eepromKontrol+0x294>)
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d902      	bls.n	8005c22 <eepromKontrol+0x22e>
	    emniyetCercevesi=1;
 8005c1c:	4b1a      	ldr	r3, [pc, #104]	; (8005c88 <eepromKontrol+0x294>)
 8005c1e:	2201      	movs	r2, #1
 8005c20:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8005c22:	4b1a      	ldr	r3, [pc, #104]	; (8005c8c <eepromKontrol+0x298>)
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d902      	bls.n	8005c30 <eepromKontrol+0x23c>
	    yavaslamaLimit=0;
 8005c2a:	4b18      	ldr	r3, [pc, #96]	; (8005c8c <eepromKontrol+0x298>)
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 8005c30:	4b17      	ldr	r3, [pc, #92]	; (8005c90 <eepromKontrol+0x29c>)
 8005c32:	781b      	ldrb	r3, [r3, #0]
 8005c34:	2b01      	cmp	r3, #1
 8005c36:	d902      	bls.n	8005c3e <eepromKontrol+0x24a>
	    altLimit=1;
 8005c38:	4b15      	ldr	r3, [pc, #84]	; (8005c90 <eepromKontrol+0x29c>)
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 8005c3e:	4b15      	ldr	r3, [pc, #84]	; (8005c94 <eepromKontrol+0x2a0>)
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d902      	bls.n	8005c4c <eepromKontrol+0x258>
	    basincSalteri=1;
 8005c46:	4b13      	ldr	r3, [pc, #76]	; (8005c94 <eepromKontrol+0x2a0>)
 8005c48:	2201      	movs	r2, #1
 8005c4a:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 8005c4c:	4b12      	ldr	r3, [pc, #72]	; (8005c98 <eepromKontrol+0x2a4>)
 8005c4e:	781b      	ldrb	r3, [r3, #0]
 8005c50:	2b03      	cmp	r3, #3
 8005c52:	d902      	bls.n	8005c5a <eepromKontrol+0x266>
	    kapiSecimleri=3;
 8005c54:	4b10      	ldr	r3, [pc, #64]	; (8005c98 <eepromKontrol+0x2a4>)
 8005c56:	2203      	movs	r2, #3
 8005c58:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8005c5a:	4b2d      	ldr	r3, [pc, #180]	; (8005d10 <eepromKontrol+0x31c>)
 8005c5c:	781b      	ldrb	r3, [r3, #0]
 8005c5e:	2b01      	cmp	r3, #1
 8005c60:	d902      	bls.n	8005c68 <eepromKontrol+0x274>
	    kapiAcTipi=0;
 8005c62:	4b2b      	ldr	r3, [pc, #172]	; (8005d10 <eepromKontrol+0x31c>)
 8005c64:	2200      	movs	r2, #0
 8005c66:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 8005c68:	4b0c      	ldr	r3, [pc, #48]	; (8005c9c <eepromKontrol+0x2a8>)
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	2b02      	cmp	r3, #2
 8005c6e:	d965      	bls.n	8005d3c <eepromKontrol+0x348>
	    kapi1Tip=1;
 8005c70:	4b0a      	ldr	r3, [pc, #40]	; (8005c9c <eepromKontrol+0x2a8>)
 8005c72:	2201      	movs	r2, #1
 8005c74:	701a      	strb	r2, [r3, #0]
 8005c76:	e061      	b.n	8005d3c <eepromKontrol+0x348>
 8005c78:	20000c34 	.word	0x20000c34
 8005c7c:	20000b50 	.word	0x20000b50
 8005c80:	20000cb6 	.word	0x20000cb6
 8005c84:	20000d36 	.word	0x20000d36
 8005c88:	20000d39 	.word	0x20000d39
 8005c8c:	20000d3a 	.word	0x20000d3a
 8005c90:	20000d3b 	.word	0x20000d3b
 8005c94:	20000d3c 	.word	0x20000d3c
 8005c98:	20000d3d 	.word	0x20000d3d
 8005c9c:	20000d3e 	.word	0x20000d3e
 8005ca0:	20000d4e 	.word	0x20000d4e
 8005ca4:	20000d3f 	.word	0x20000d3f
 8005ca8:	20000d4f 	.word	0x20000d4f
 8005cac:	20000d40 	.word	0x20000d40
 8005cb0:	20000d50 	.word	0x20000d50
 8005cb4:	20000d43 	.word	0x20000d43
 8005cb8:	20000d44 	.word	0x20000d44
 8005cbc:	20000d45 	.word	0x20000d45
 8005cc0:	20000d46 	.word	0x20000d46
 8005cc4:	20000d47 	.word	0x20000d47
 8005cc8:	20000d48 	.word	0x20000d48
 8005ccc:	20000d49 	.word	0x20000d49
 8005cd0:	20000d4a 	.word	0x20000d4a
 8005cd4:	20000d4b 	.word	0x20000d4b
 8005cd8:	20000d4c 	.word	0x20000d4c
 8005cdc:	20000d4d 	.word	0x20000d4d
 8005ce0:	20000d51 	.word	0x20000d51
 8005ce4:	20000d53 	.word	0x20000d53
 8005ce8:	20000d31 	.word	0x20000d31
 8005cec:	20000d32 	.word	0x20000d32
 8005cf0:	20000d33 	.word	0x20000d33
 8005cf4:	200009b1 	.word	0x200009b1
 8005cf8:	200009b2 	.word	0x200009b2
 8005cfc:	20000d34 	.word	0x20000d34
 8005d00:	20000d56 	.word	0x20000d56
 8005d04:	20000d54 	.word	0x20000d54
 8005d08:	20000d42 	.word	0x20000d42
 8005d0c:	20000d55 	.word	0x20000d55
 8005d10:	20000d41 	.word	0x20000d41
 8005d14:	20000d57 	.word	0x20000d57
 8005d18:	20000d58 	.word	0x20000d58
 8005d1c:	20000d59 	.word	0x20000d59
 8005d20:	20000d5a 	.word	0x20000d5a
 8005d24:	20000d5b 	.word	0x20000d5b
 8005d28:	20000d5c 	.word	0x20000d5c
 8005d2c:	20000d5d 	.word	0x20000d5d
 8005d30:	20000d5e 	.word	0x20000d5e
 8005d34:	20000d5f 	.word	0x20000d5f
 8005d38:	20000d60 	.word	0x20000d60
	}

	if(kapi1AcSure>5) {
 8005d3c:	4b58      	ldr	r3, [pc, #352]	; (8005ea0 <eepromKontrol+0x4ac>)
 8005d3e:	781b      	ldrb	r3, [r3, #0]
 8005d40:	2b05      	cmp	r3, #5
 8005d42:	d902      	bls.n	8005d4a <eepromKontrol+0x356>
	    kapi1AcSure=5;
 8005d44:	4b56      	ldr	r3, [pc, #344]	; (8005ea0 <eepromKontrol+0x4ac>)
 8005d46:	2205      	movs	r2, #5
 8005d48:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 8005d4a:	4b56      	ldr	r3, [pc, #344]	; (8005ea4 <eepromKontrol+0x4b0>)
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	2b02      	cmp	r3, #2
 8005d50:	d902      	bls.n	8005d58 <eepromKontrol+0x364>
	    kapi2Tip=1;
 8005d52:	4b54      	ldr	r3, [pc, #336]	; (8005ea4 <eepromKontrol+0x4b0>)
 8005d54:	2201      	movs	r2, #1
 8005d56:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 8005d58:	4b53      	ldr	r3, [pc, #332]	; (8005ea8 <eepromKontrol+0x4b4>)
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	2b05      	cmp	r3, #5
 8005d5e:	d902      	bls.n	8005d66 <eepromKontrol+0x372>
	    kapi2AcSure=5;
 8005d60:	4b51      	ldr	r3, [pc, #324]	; (8005ea8 <eepromKontrol+0x4b4>)
 8005d62:	2205      	movs	r2, #5
 8005d64:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 8005d66:	4b51      	ldr	r3, [pc, #324]	; (8005eac <eepromKontrol+0x4b8>)
 8005d68:	781b      	ldrb	r3, [r3, #0]
 8005d6a:	2b02      	cmp	r3, #2
 8005d6c:	d902      	bls.n	8005d74 <eepromKontrol+0x380>
	    kapitablaTip=1;
 8005d6e:	4b4f      	ldr	r3, [pc, #316]	; (8005eac <eepromKontrol+0x4b8>)
 8005d70:	2201      	movs	r2, #1
 8005d72:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 8005d74:	4b4e      	ldr	r3, [pc, #312]	; (8005eb0 <eepromKontrol+0x4bc>)
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d902      	bls.n	8005d82 <eepromKontrol+0x38e>
	    kapiTablaAcKonum=2;
 8005d7c:	4b4c      	ldr	r3, [pc, #304]	; (8005eb0 <eepromKontrol+0x4bc>)
 8005d7e:	2202      	movs	r2, #2
 8005d80:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 8005d82:	4b4c      	ldr	r3, [pc, #304]	; (8005eb4 <eepromKontrol+0x4c0>)
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	2b05      	cmp	r3, #5
 8005d88:	d902      	bls.n	8005d90 <eepromKontrol+0x39c>
	    kapiTablaAcSure=5;
 8005d8a:	4b4a      	ldr	r3, [pc, #296]	; (8005eb4 <eepromKontrol+0x4c0>)
 8005d8c:	2205      	movs	r2, #5
 8005d8e:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 8005d90:	4b49      	ldr	r3, [pc, #292]	; (8005eb8 <eepromKontrol+0x4c4>)
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d902      	bls.n	8005d9e <eepromKontrol+0x3aa>
	    yukariYavasLimit=0;
 8005d98:	4b47      	ldr	r3, [pc, #284]	; (8005eb8 <eepromKontrol+0x4c4>)
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 8005d9e:	4b47      	ldr	r3, [pc, #284]	; (8005ebc <eepromKontrol+0x4c8>)
 8005da0:	781b      	ldrb	r3, [r3, #0]
 8005da2:	2b02      	cmp	r3, #2
 8005da4:	d902      	bls.n	8005dac <eepromKontrol+0x3b8>
	    devirmeYuruyusSecim=0;
 8005da6:	4b45      	ldr	r3, [pc, #276]	; (8005ebc <eepromKontrol+0x4c8>)
 8005da8:	2200      	movs	r2, #0
 8005daa:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 8005dac:	4b44      	ldr	r3, [pc, #272]	; (8005ec0 <eepromKontrol+0x4cc>)
 8005dae:	781b      	ldrb	r3, [r3, #0]
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d902      	bls.n	8005dba <eepromKontrol+0x3c6>
	    devirmeYukariIleriLimit=1;
 8005db4:	4b42      	ldr	r3, [pc, #264]	; (8005ec0 <eepromKontrol+0x4cc>)
 8005db6:	2201      	movs	r2, #1
 8005db8:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 8005dba:	4b42      	ldr	r3, [pc, #264]	; (8005ec4 <eepromKontrol+0x4d0>)
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d902      	bls.n	8005dc8 <eepromKontrol+0x3d4>
	    devirmeAsagiGeriLimit=1;
 8005dc2:	4b40      	ldr	r3, [pc, #256]	; (8005ec4 <eepromKontrol+0x4d0>)
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 8005dc8:	4b3f      	ldr	r3, [pc, #252]	; (8005ec8 <eepromKontrol+0x4d4>)
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d902      	bls.n	8005dd6 <eepromKontrol+0x3e2>
	    devirmeSilindirTipi=0;
 8005dd0:	4b3d      	ldr	r3, [pc, #244]	; (8005ec8 <eepromKontrol+0x4d4>)
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 8005dd6:	4b3d      	ldr	r3, [pc, #244]	; (8005ecc <eepromKontrol+0x4d8>)
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	2b01      	cmp	r3, #1
 8005ddc:	d902      	bls.n	8005de4 <eepromKontrol+0x3f0>
	    platformSilindirTipi=0;
 8005dde:	4b3b      	ldr	r3, [pc, #236]	; (8005ecc <eepromKontrol+0x4d8>)
 8005de0:	2200      	movs	r2, #0
 8005de2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8005de4:	4b3a      	ldr	r3, [pc, #232]	; (8005ed0 <eepromKontrol+0x4dc>)
 8005de6:	781b      	ldrb	r3, [r3, #0]
 8005de8:	2b05      	cmp	r3, #5
 8005dea:	d902      	bls.n	8005df2 <eepromKontrol+0x3fe>
	    yukariValfTmr=0;
 8005dec:	4b38      	ldr	r3, [pc, #224]	; (8005ed0 <eepromKontrol+0x4dc>)
 8005dee:	2200      	movs	r2, #0
 8005df0:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8005df2:	4b38      	ldr	r3, [pc, #224]	; (8005ed4 <eepromKontrol+0x4e0>)
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	2b05      	cmp	r3, #5
 8005df8:	d902      	bls.n	8005e00 <eepromKontrol+0x40c>
	    asagiValfTmr=0;
 8005dfa:	4b36      	ldr	r3, [pc, #216]	; (8005ed4 <eepromKontrol+0x4e0>)
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8005e00:	4b35      	ldr	r3, [pc, #212]	; (8005ed8 <eepromKontrol+0x4e4>)
 8005e02:	781b      	ldrb	r3, [r3, #0]
 8005e04:	2b05      	cmp	r3, #5
 8005e06:	d902      	bls.n	8005e0e <eepromKontrol+0x41a>
	    devirmeYukariIleriTmr=0;
 8005e08:	4b33      	ldr	r3, [pc, #204]	; (8005ed8 <eepromKontrol+0x4e4>)
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8005e0e:	4b33      	ldr	r3, [pc, #204]	; (8005edc <eepromKontrol+0x4e8>)
 8005e10:	781b      	ldrb	r3, [r3, #0]
 8005e12:	2b05      	cmp	r3, #5
 8005e14:	d902      	bls.n	8005e1c <eepromKontrol+0x428>
	    devirmeAsagiGeriTmr=0;
 8005e16:	4b31      	ldr	r3, [pc, #196]	; (8005edc <eepromKontrol+0x4e8>)
 8005e18:	2200      	movs	r2, #0
 8005e1a:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8005e1c:	4b30      	ldr	r3, [pc, #192]	; (8005ee0 <eepromKontrol+0x4ec>)
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	2bb4      	cmp	r3, #180	; 0xb4
 8005e22:	d902      	bls.n	8005e2a <eepromKontrol+0x436>
	    makineCalismaTmr=60;
 8005e24:	4b2e      	ldr	r3, [pc, #184]	; (8005ee0 <eepromKontrol+0x4ec>)
 8005e26:	223c      	movs	r2, #60	; 0x3c
 8005e28:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 8005e2a:	4b2e      	ldr	r3, [pc, #184]	; (8005ee4 <eepromKontrol+0x4f0>)
 8005e2c:	781b      	ldrb	r3, [r3, #0]
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d902      	bls.n	8005e38 <eepromKontrol+0x444>
	    buzzer=0;
 8005e32:	4b2c      	ldr	r3, [pc, #176]	; (8005ee4 <eepromKontrol+0x4f0>)
 8005e34:	2200      	movs	r2, #0
 8005e36:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 8005e38:	4b2b      	ldr	r3, [pc, #172]	; (8005ee8 <eepromKontrol+0x4f4>)
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	2b01      	cmp	r3, #1
 8005e3e:	d902      	bls.n	8005e46 <eepromKontrol+0x452>
	    demoMode=0;
 8005e40:	4b29      	ldr	r3, [pc, #164]	; (8005ee8 <eepromKontrol+0x4f4>)
 8005e42:	2200      	movs	r2, #0
 8005e44:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 8005e46:	4b29      	ldr	r3, [pc, #164]	; (8005eec <eepromKontrol+0x4f8>)
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d902      	bls.n	8005e54 <eepromKontrol+0x460>
	    calismaSayModu=0;
 8005e4e:	4b27      	ldr	r3, [pc, #156]	; (8005eec <eepromKontrol+0x4f8>)
 8005e50:	2200      	movs	r2, #0
 8005e52:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8005e54:	4b26      	ldr	r3, [pc, #152]	; (8005ef0 <eepromKontrol+0x4fc>)
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d902      	bls.n	8005e62 <eepromKontrol+0x46e>
	    dilSecim=0;
 8005e5c:	4b24      	ldr	r3, [pc, #144]	; (8005ef0 <eepromKontrol+0x4fc>)
 8005e5e:	2200      	movs	r2, #0
 8005e60:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 8005e62:	4b24      	ldr	r3, [pc, #144]	; (8005ef4 <eepromKontrol+0x500>)
 8005e64:	781b      	ldrb	r3, [r3, #0]
 8005e66:	2b01      	cmp	r3, #1
 8005e68:	d902      	bls.n	8005e70 <eepromKontrol+0x47c>
		iotMode=0;
 8005e6a:	4b22      	ldr	r3, [pc, #136]	; (8005ef4 <eepromKontrol+0x500>)
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	701a      	strb	r2, [r3, #0]
	}

	memcpy(machineID, &eepromData[49], 12);
 8005e70:	4b21      	ldr	r3, [pc, #132]	; (8005ef8 <eepromKontrol+0x504>)
 8005e72:	4a22      	ldr	r2, [pc, #136]	; (8005efc <eepromKontrol+0x508>)
 8005e74:	3231      	adds	r2, #49	; 0x31
 8005e76:	6810      	ldr	r0, [r2, #0]
 8005e78:	6851      	ldr	r1, [r2, #4]
 8005e7a:	6892      	ldr	r2, [r2, #8]
 8005e7c:	c307      	stmia	r3!, {r0, r1, r2}
	HAL_Delay(500);
 8005e7e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005e82:	f003 f88d 	bl	8008fa0 <HAL_Delay>

	if(iotMode == 1 && type == 1) {
 8005e86:	4b1b      	ldr	r3, [pc, #108]	; (8005ef4 <eepromKontrol+0x500>)
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	2b01      	cmp	r3, #1
 8005e8c:	d104      	bne.n	8005e98 <eepromKontrol+0x4a4>
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d101      	bne.n	8005e98 <eepromKontrol+0x4a4>
		convertAndSendData();
 8005e94:	f7ff fd7a 	bl	800598c <convertAndSendData>
	}
}
 8005e98:	bf00      	nop
 8005e9a:	3708      	adds	r7, #8
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	bd80      	pop	{r7, pc}
 8005ea0:	20000d4e 	.word	0x20000d4e
 8005ea4:	20000d3f 	.word	0x20000d3f
 8005ea8:	20000d4f 	.word	0x20000d4f
 8005eac:	20000d40 	.word	0x20000d40
 8005eb0:	20000d42 	.word	0x20000d42
 8005eb4:	20000d50 	.word	0x20000d50
 8005eb8:	20000d43 	.word	0x20000d43
 8005ebc:	20000d44 	.word	0x20000d44
 8005ec0:	20000d45 	.word	0x20000d45
 8005ec4:	20000d46 	.word	0x20000d46
 8005ec8:	20000d47 	.word	0x20000d47
 8005ecc:	20000d48 	.word	0x20000d48
 8005ed0:	20000d49 	.word	0x20000d49
 8005ed4:	20000d4a 	.word	0x20000d4a
 8005ed8:	20000d4b 	.word	0x20000d4b
 8005edc:	20000d4c 	.word	0x20000d4c
 8005ee0:	20000d4d 	.word	0x20000d4d
 8005ee4:	20000d51 	.word	0x20000d51
 8005ee8:	20000d53 	.word	0x20000d53
 8005eec:	20000d55 	.word	0x20000d55
 8005ef0:	20000d56 	.word	0x20000d56
 8005ef4:	20000d54 	.word	0x20000d54
 8005ef8:	20000ce0 	.word	0x20000ce0
 8005efc:	20000c34 	.word	0x20000c34

08005f00 <hata2EEPROM>:

void hata2EEPROM(uint8_t hataKodu) {
 8005f00:	b590      	push	{r4, r7, lr}
 8005f02:	b089      	sub	sp, #36	; 0x24
 8005f04:	af04      	add	r7, sp, #16
 8005f06:	4603      	mov	r3, r0
 8005f08:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8005f0a:	4b26      	ldr	r3, [pc, #152]	; (8005fa4 <hata2EEPROM+0xa4>)
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	1e5a      	subs	r2, r3, #1
 8005f10:	4b25      	ldr	r3, [pc, #148]	; (8005fa8 <hata2EEPROM+0xa8>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4413      	add	r3, r2
 8005f16:	4a25      	ldr	r2, [pc, #148]	; (8005fac <hata2EEPROM+0xac>)
 8005f18:	5cd3      	ldrb	r3, [r2, r3]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d002      	beq.n	8005f24 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8005f1e:	f000 f849 	bl	8005fb4 <eepromDataFillWithEmpty>
		goto veriEkleme;
 8005f22:	e000      	b.n	8005f26 <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8005f24:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8005f26:	2300      	movs	r3, #0
 8005f28:	60fb      	str	r3, [r7, #12]
 8005f2a:	e012      	b.n	8005f52 <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8005f2c:	4b1e      	ldr	r3, [pc, #120]	; (8005fa8 <hata2EEPROM+0xa8>)
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	4413      	add	r3, r2
 8005f34:	4a1d      	ldr	r2, [pc, #116]	; (8005fac <hata2EEPROM+0xac>)
 8005f36:	5cd3      	ldrb	r3, [r2, r3]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d107      	bne.n	8005f4c <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8005f3c:	4b1a      	ldr	r3, [pc, #104]	; (8005fa8 <hata2EEPROM+0xa8>)
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	4413      	add	r3, r2
 8005f44:	4919      	ldr	r1, [pc, #100]	; (8005fac <hata2EEPROM+0xac>)
 8005f46:	79fa      	ldrb	r2, [r7, #7]
 8005f48:	54ca      	strb	r2, [r1, r3]
					break;
 8005f4a:	e007      	b.n	8005f5c <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	3301      	adds	r3, #1
 8005f50:	60fb      	str	r3, [r7, #12]
 8005f52:	4b14      	ldr	r3, [pc, #80]	; (8005fa4 <hata2EEPROM+0xa4>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	dbe7      	blt.n	8005f2c <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8005f5c:	4b12      	ldr	r3, [pc, #72]	; (8005fa8 <hata2EEPROM+0xa8>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	b299      	uxth	r1, r3
 8005f62:	4b10      	ldr	r3, [pc, #64]	; (8005fa4 <hata2EEPROM+0xa4>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	b298      	uxth	r0, r3
 8005f68:	4b0f      	ldr	r3, [pc, #60]	; (8005fa8 <hata2EEPROM+0xa8>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	4a0f      	ldr	r2, [pc, #60]	; (8005fac <hata2EEPROM+0xac>)
 8005f6e:	4413      	add	r3, r2
 8005f70:	4a0c      	ldr	r2, [pc, #48]	; (8005fa4 <hata2EEPROM+0xa4>)
 8005f72:	6812      	ldr	r2, [r2, #0]
 8005f74:	b292      	uxth	r2, r2
 8005f76:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8005f7a:	9402      	str	r4, [sp, #8]
 8005f7c:	9201      	str	r2, [sp, #4]
 8005f7e:	9300      	str	r3, [sp, #0]
 8005f80:	4603      	mov	r3, r0
 8005f82:	460a      	mov	r2, r1
 8005f84:	21a0      	movs	r1, #160	; 0xa0
 8005f86:	480a      	ldr	r0, [pc, #40]	; (8005fb0 <hata2EEPROM+0xb0>)
 8005f88:	f004 f894 	bl	800a0b4 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8005f8c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005f90:	f003 f806 	bl	8008fa0 <HAL_Delay>
	eepromKontrol(1);
 8005f94:	2001      	movs	r0, #1
 8005f96:	f7ff fd2d 	bl	80059f4 <eepromKontrol>
}
 8005f9a:	bf00      	nop
 8005f9c:	3714      	adds	r7, #20
 8005f9e:	46bd      	mov	sp, r7
 8005fa0:	bd90      	pop	{r4, r7, pc}
 8005fa2:	bf00      	nop
 8005fa4:	20000938 	.word	0x20000938
 8005fa8:	2000093c 	.word	0x2000093c
 8005fac:	20000c34 	.word	0x20000c34
 8005fb0:	20000b50 	.word	0x20000b50

08005fb4 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8005fb4:	b480      	push	{r7}
 8005fb6:	b083      	sub	sp, #12
 8005fb8:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8005fba:	2300      	movs	r3, #0
 8005fbc:	607b      	str	r3, [r7, #4]
 8005fbe:	e009      	b.n	8005fd4 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8005fc0:	4a0a      	ldr	r2, [pc, #40]	; (8005fec <eepromDataFillWithEmpty+0x38>)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fc8:	4a09      	ldr	r2, [pc, #36]	; (8005ff0 <eepromDataFillWithEmpty+0x3c>)
 8005fca:	2100      	movs	r1, #0
 8005fcc:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	607b      	str	r3, [r7, #4]
 8005fd4:	4b07      	ldr	r3, [pc, #28]	; (8005ff4 <eepromDataFillWithEmpty+0x40>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	687a      	ldr	r2, [r7, #4]
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	dbf0      	blt.n	8005fc0 <eepromDataFillWithEmpty+0xc>
	}
}
 8005fde:	bf00      	nop
 8005fe0:	bf00      	nop
 8005fe2:	370c      	adds	r7, #12
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bc80      	pop	{r7}
 8005fe8:	4770      	bx	lr
 8005fea:	bf00      	nop
 8005fec:	20000910 	.word	0x20000910
 8005ff0:	20000c34 	.word	0x20000c34
 8005ff4:	20000938 	.word	0x20000938

08005ff8 <bekle>:
		return 1;
	}
	return 0;
}

void bekle() {
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	af00      	add	r7, sp, #0
	timer1=millis;
 8005ffc:	4b47      	ldr	r3, [pc, #284]	; (800611c <bekle+0x124>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4a47      	ldr	r2, [pc, #284]	; (8006120 <bekle+0x128>)
 8006002:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006004:	e002      	b.n	800600c <bekle+0x14>
    	butonKontrol = 1;
 8006006:	4b47      	ldr	r3, [pc, #284]	; (8006124 <bekle+0x12c>)
 8006008:	2201      	movs	r2, #1
 800600a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800600c:	2101      	movs	r1, #1
 800600e:	4846      	ldr	r0, [pc, #280]	; (8006128 <bekle+0x130>)
 8006010:	f003 fd96 	bl	8009b40 <HAL_GPIO_ReadPin>
 8006014:	4603      	mov	r3, r0
 8006016:	2b01      	cmp	r3, #1
 8006018:	d109      	bne.n	800602e <bekle+0x36>
 800601a:	4b40      	ldr	r3, [pc, #256]	; (800611c <bekle+0x124>)
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	4b40      	ldr	r3, [pc, #256]	; (8006120 <bekle+0x128>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	429a      	cmp	r2, r3
 8006024:	d0ef      	beq.n	8006006 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006026:	e002      	b.n	800602e <bekle+0x36>
    	butonKontrol = 1;
 8006028:	4b3e      	ldr	r3, [pc, #248]	; (8006124 <bekle+0x12c>)
 800602a:	2201      	movs	r2, #1
 800602c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800602e:	2108      	movs	r1, #8
 8006030:	483e      	ldr	r0, [pc, #248]	; (800612c <bekle+0x134>)
 8006032:	f003 fd85 	bl	8009b40 <HAL_GPIO_ReadPin>
 8006036:	4603      	mov	r3, r0
 8006038:	2b01      	cmp	r3, #1
 800603a:	d109      	bne.n	8006050 <bekle+0x58>
 800603c:	4b37      	ldr	r3, [pc, #220]	; (800611c <bekle+0x124>)
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	4b37      	ldr	r3, [pc, #220]	; (8006120 <bekle+0x128>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	429a      	cmp	r2, r3
 8006046:	d0ef      	beq.n	8006028 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006048:	e002      	b.n	8006050 <bekle+0x58>
    	butonKontrol = 1;
 800604a:	4b36      	ldr	r3, [pc, #216]	; (8006124 <bekle+0x12c>)
 800604c:	2201      	movs	r2, #1
 800604e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006050:	2102      	movs	r1, #2
 8006052:	4835      	ldr	r0, [pc, #212]	; (8006128 <bekle+0x130>)
 8006054:	f003 fd74 	bl	8009b40 <HAL_GPIO_ReadPin>
 8006058:	4603      	mov	r3, r0
 800605a:	2b01      	cmp	r3, #1
 800605c:	d109      	bne.n	8006072 <bekle+0x7a>
 800605e:	4b2f      	ldr	r3, [pc, #188]	; (800611c <bekle+0x124>)
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	4b2f      	ldr	r3, [pc, #188]	; (8006120 <bekle+0x128>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	429a      	cmp	r2, r3
 8006068:	d0ef      	beq.n	800604a <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800606a:	e002      	b.n	8006072 <bekle+0x7a>
    	butonKontrol = 1;
 800606c:	4b2d      	ldr	r3, [pc, #180]	; (8006124 <bekle+0x12c>)
 800606e:	2201      	movs	r2, #1
 8006070:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006072:	2104      	movs	r1, #4
 8006074:	482c      	ldr	r0, [pc, #176]	; (8006128 <bekle+0x130>)
 8006076:	f003 fd63 	bl	8009b40 <HAL_GPIO_ReadPin>
 800607a:	4603      	mov	r3, r0
 800607c:	2b01      	cmp	r3, #1
 800607e:	d109      	bne.n	8006094 <bekle+0x9c>
 8006080:	4b26      	ldr	r3, [pc, #152]	; (800611c <bekle+0x124>)
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	4b26      	ldr	r3, [pc, #152]	; (8006120 <bekle+0x128>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	429a      	cmp	r2, r3
 800608a:	d0ef      	beq.n	800606c <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800608c:	e002      	b.n	8006094 <bekle+0x9c>
    	butonKontrol = 1;
 800608e:	4b25      	ldr	r3, [pc, #148]	; (8006124 <bekle+0x12c>)
 8006090:	2201      	movs	r2, #1
 8006092:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006094:	2108      	movs	r1, #8
 8006096:	4824      	ldr	r0, [pc, #144]	; (8006128 <bekle+0x130>)
 8006098:	f003 fd52 	bl	8009b40 <HAL_GPIO_ReadPin>
 800609c:	4603      	mov	r3, r0
 800609e:	2b01      	cmp	r3, #1
 80060a0:	d109      	bne.n	80060b6 <bekle+0xbe>
 80060a2:	4b1e      	ldr	r3, [pc, #120]	; (800611c <bekle+0x124>)
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	4b1e      	ldr	r3, [pc, #120]	; (8006120 <bekle+0x128>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d0ef      	beq.n	800608e <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80060ae:	e002      	b.n	80060b6 <bekle+0xbe>
    	butonKontrol = 1;
 80060b0:	4b1c      	ldr	r3, [pc, #112]	; (8006124 <bekle+0x12c>)
 80060b2:	2201      	movs	r2, #1
 80060b4:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80060b6:	2180      	movs	r1, #128	; 0x80
 80060b8:	481c      	ldr	r0, [pc, #112]	; (800612c <bekle+0x134>)
 80060ba:	f003 fd41 	bl	8009b40 <HAL_GPIO_ReadPin>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d109      	bne.n	80060d8 <bekle+0xe0>
 80060c4:	4b15      	ldr	r3, [pc, #84]	; (800611c <bekle+0x124>)
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	4b15      	ldr	r3, [pc, #84]	; (8006120 <bekle+0x128>)
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d0ef      	beq.n	80060b0 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80060d0:	e002      	b.n	80060d8 <bekle+0xe0>
    	butonKontrol = 1;
 80060d2:	4b14      	ldr	r3, [pc, #80]	; (8006124 <bekle+0x12c>)
 80060d4:	2201      	movs	r2, #1
 80060d6:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80060d8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80060dc:	4813      	ldr	r0, [pc, #76]	; (800612c <bekle+0x134>)
 80060de:	f003 fd2f 	bl	8009b40 <HAL_GPIO_ReadPin>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d109      	bne.n	80060fc <bekle+0x104>
 80060e8:	4b0c      	ldr	r3, [pc, #48]	; (800611c <bekle+0x124>)
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	4b0c      	ldr	r3, [pc, #48]	; (8006120 <bekle+0x128>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d0ee      	beq.n	80060d2 <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 80060f4:	e002      	b.n	80060fc <bekle+0x104>
    	butonKontrol = 1;
 80060f6:	4b0b      	ldr	r3, [pc, #44]	; (8006124 <bekle+0x12c>)
 80060f8:	2201      	movs	r2, #1
 80060fa:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 80060fc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006100:	480a      	ldr	r0, [pc, #40]	; (800612c <bekle+0x134>)
 8006102:	f003 fd1d 	bl	8009b40 <HAL_GPIO_ReadPin>
 8006106:	4603      	mov	r3, r0
 8006108:	2b00      	cmp	r3, #0
 800610a:	d105      	bne.n	8006118 <bekle+0x120>
 800610c:	4b03      	ldr	r3, [pc, #12]	; (800611c <bekle+0x124>)
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	4b03      	ldr	r3, [pc, #12]	; (8006120 <bekle+0x128>)
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	429a      	cmp	r2, r3
 8006116:	d0ee      	beq.n	80060f6 <bekle+0xfe>
    }

}
 8006118:	bf00      	nop
 800611a:	bd80      	pop	{r7, pc}
 800611c:	20000cc0 	.word	0x20000cc0
 8006120:	20000cc8 	.word	0x20000cc8
 8006124:	20000d64 	.word	0x20000d64
 8006128:	40010800 	.word	0x40010800
 800612c:	40011000 	.word	0x40011000

08006130 <i2cTest>:

void i2cTest() {
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8006136:	463b      	mov	r3, r7
 8006138:	2200      	movs	r2, #0
 800613a:	601a      	str	r2, [r3, #0]
 800613c:	605a      	str	r2, [r3, #4]
 800613e:	609a      	str	r2, [r3, #8]
 8006140:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8006142:	4b50      	ldr	r3, [pc, #320]	; (8006284 <i2cTest+0x154>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	4b4e      	ldr	r3, [pc, #312]	; (8006284 <i2cTest+0x154>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f022 0201 	bic.w	r2, r2, #1
 8006150:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8006152:	484c      	ldr	r0, [pc, #304]	; (8006284 <i2cTest+0x154>)
 8006154:	f003 fe80 	bl	8009e58 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006158:	23c0      	movs	r3, #192	; 0xc0
 800615a:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 800615c:	2311      	movs	r3, #17
 800615e:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8006160:	2301      	movs	r3, #1
 8006162:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8006164:	2303      	movs	r3, #3
 8006166:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8006168:	463b      	mov	r3, r7
 800616a:	4619      	mov	r1, r3
 800616c:	4846      	ldr	r0, [pc, #280]	; (8006288 <i2cTest+0x158>)
 800616e:	f003 fa87 	bl	8009680 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8006172:	2201      	movs	r2, #1
 8006174:	2140      	movs	r1, #64	; 0x40
 8006176:	4844      	ldr	r0, [pc, #272]	; (8006288 <i2cTest+0x158>)
 8006178:	f003 fcf9 	bl	8009b6e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800617c:	2201      	movs	r2, #1
 800617e:	2180      	movs	r1, #128	; 0x80
 8006180:	4841      	ldr	r0, [pc, #260]	; (8006288 <i2cTest+0x158>)
 8006182:	f003 fcf4 	bl	8009b6e <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8006186:	200a      	movs	r0, #10
 8006188:	f002 ff0a 	bl	8008fa0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 800618c:	bf00      	nop
 800618e:	2140      	movs	r1, #64	; 0x40
 8006190:	483d      	ldr	r0, [pc, #244]	; (8006288 <i2cTest+0x158>)
 8006192:	f003 fcd5 	bl	8009b40 <HAL_GPIO_ReadPin>
 8006196:	4603      	mov	r3, r0
 8006198:	2b01      	cmp	r3, #1
 800619a:	d006      	beq.n	80061aa <i2cTest+0x7a>
 800619c:	2180      	movs	r1, #128	; 0x80
 800619e:	483a      	ldr	r0, [pc, #232]	; (8006288 <i2cTest+0x158>)
 80061a0:	f003 fcce 	bl	8009b40 <HAL_GPIO_ReadPin>
 80061a4:	4603      	mov	r3, r0
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d1f1      	bne.n	800618e <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80061aa:	2200      	movs	r2, #0
 80061ac:	2180      	movs	r1, #128	; 0x80
 80061ae:	4836      	ldr	r0, [pc, #216]	; (8006288 <i2cTest+0x158>)
 80061b0:	f003 fcdd 	bl	8009b6e <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 80061b4:	200a      	movs	r0, #10
 80061b6:	f002 fef3 	bl	8008fa0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 80061ba:	bf00      	nop
 80061bc:	2180      	movs	r1, #128	; 0x80
 80061be:	4832      	ldr	r0, [pc, #200]	; (8006288 <i2cTest+0x158>)
 80061c0:	f003 fcbe 	bl	8009b40 <HAL_GPIO_ReadPin>
 80061c4:	4603      	mov	r3, r0
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d0f8      	beq.n	80061bc <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80061ca:	2200      	movs	r2, #0
 80061cc:	2140      	movs	r1, #64	; 0x40
 80061ce:	482e      	ldr	r0, [pc, #184]	; (8006288 <i2cTest+0x158>)
 80061d0:	f003 fccd 	bl	8009b6e <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 80061d4:	200a      	movs	r0, #10
 80061d6:	f002 fee3 	bl	8008fa0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 80061da:	bf00      	nop
 80061dc:	2140      	movs	r1, #64	; 0x40
 80061de:	482a      	ldr	r0, [pc, #168]	; (8006288 <i2cTest+0x158>)
 80061e0:	f003 fcae 	bl	8009b40 <HAL_GPIO_ReadPin>
 80061e4:	4603      	mov	r3, r0
 80061e6:	2b01      	cmp	r3, #1
 80061e8:	d0f8      	beq.n	80061dc <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80061ea:	2201      	movs	r2, #1
 80061ec:	2140      	movs	r1, #64	; 0x40
 80061ee:	4826      	ldr	r0, [pc, #152]	; (8006288 <i2cTest+0x158>)
 80061f0:	f003 fcbd 	bl	8009b6e <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 80061f4:	200a      	movs	r0, #10
 80061f6:	f002 fed3 	bl	8008fa0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 80061fa:	bf00      	nop
 80061fc:	2140      	movs	r1, #64	; 0x40
 80061fe:	4822      	ldr	r0, [pc, #136]	; (8006288 <i2cTest+0x158>)
 8006200:	f003 fc9e 	bl	8009b40 <HAL_GPIO_ReadPin>
 8006204:	4603      	mov	r3, r0
 8006206:	2b01      	cmp	r3, #1
 8006208:	d1f8      	bne.n	80061fc <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800620a:	2201      	movs	r2, #1
 800620c:	2180      	movs	r1, #128	; 0x80
 800620e:	481e      	ldr	r0, [pc, #120]	; (8006288 <i2cTest+0x158>)
 8006210:	f003 fcad 	bl	8009b6e <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8006214:	200a      	movs	r0, #10
 8006216:	f002 fec3 	bl	8008fa0 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 800621a:	bf00      	nop
 800621c:	2180      	movs	r1, #128	; 0x80
 800621e:	481a      	ldr	r0, [pc, #104]	; (8006288 <i2cTest+0x158>)
 8006220:	f003 fc8e 	bl	8009b40 <HAL_GPIO_ReadPin>
 8006224:	4603      	mov	r3, r0
 8006226:	2b01      	cmp	r3, #1
 8006228:	d1f8      	bne.n	800621c <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800622a:	23c0      	movs	r3, #192	; 0xc0
 800622c:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 800622e:	2312      	movs	r3, #18
 8006230:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8006232:	2301      	movs	r3, #1
 8006234:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8006236:	2303      	movs	r3, #3
 8006238:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 800623a:	463b      	mov	r3, r7
 800623c:	4619      	mov	r1, r3
 800623e:	4812      	ldr	r0, [pc, #72]	; (8006288 <i2cTest+0x158>)
 8006240:	f003 fa1e 	bl	8009680 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8006244:	4b0f      	ldr	r3, [pc, #60]	; (8006284 <i2cTest+0x154>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	4b0e      	ldr	r3, [pc, #56]	; (8006284 <i2cTest+0x154>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006252:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8006254:	4b0b      	ldr	r3, [pc, #44]	; (8006284 <i2cTest+0x154>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	4b0a      	ldr	r3, [pc, #40]	; (8006284 <i2cTest+0x154>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006262:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8006264:	4b07      	ldr	r3, [pc, #28]	; (8006284 <i2cTest+0x154>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	4b06      	ldr	r3, [pc, #24]	; (8006284 <i2cTest+0x154>)
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f042 0201 	orr.w	r2, r2, #1
 8006272:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8006274:	4803      	ldr	r0, [pc, #12]	; (8006284 <i2cTest+0x154>)
 8006276:	f003 fcab 	bl	8009bd0 <HAL_I2C_Init>
}
 800627a:	bf00      	nop
 800627c:	3710      	adds	r7, #16
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}
 8006282:	bf00      	nop
 8006284:	20000b50 	.word	0x20000b50
 8006288:	40010c00 	.word	0x40010c00

0800628c <checkLCDBacklight>:

void checkLCDBacklight() {
 800628c:	b580      	push	{r7, lr}
 800628e:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8006290:	4b0b      	ldr	r3, [pc, #44]	; (80062c0 <checkLCDBacklight+0x34>)
 8006292:	681a      	ldr	r2, [r3, #0]
 8006294:	4b0b      	ldr	r3, [pc, #44]	; (80062c4 <checkLCDBacklight+0x38>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	1ad2      	subs	r2, r2, r3
 800629a:	4b0b      	ldr	r3, [pc, #44]	; (80062c8 <checkLCDBacklight+0x3c>)
 800629c:	781b      	ldrb	r3, [r3, #0]
 800629e:	4619      	mov	r1, r3
 80062a0:	460b      	mov	r3, r1
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	440b      	add	r3, r1
 80062a6:	005b      	lsls	r3, r3, #1
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d303      	bcc.n	80062b4 <checkLCDBacklight+0x28>
		lcd_backlight(0);
 80062ac:	2000      	movs	r0, #0
 80062ae:	f7fa fa27 	bl	8000700 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 80062b2:	e002      	b.n	80062ba <checkLCDBacklight+0x2e>
		lcd_backlight(1);
 80062b4:	2001      	movs	r0, #1
 80062b6:	f7fa fa23 	bl	8000700 <lcd_backlight>
}
 80062ba:	bf00      	nop
 80062bc:	bd80      	pop	{r7, pc}
 80062be:	bf00      	nop
 80062c0:	20000cc0 	.word	0x20000cc0
 80062c4:	20000cdc 	.word	0x20000cdc
 80062c8:	20000940 	.word	0x20000940

080062cc <checkBasincSalteri>:

void checkBasincSalteri() {
 80062cc:	b580      	push	{r7, lr}
 80062ce:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 80062d0:	4b13      	ldr	r3, [pc, #76]	; (8006320 <checkBasincSalteri+0x54>)
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d102      	bne.n	80062de <checkBasincSalteri+0x12>
		basincVar=1;
 80062d8:	4b12      	ldr	r3, [pc, #72]	; (8006324 <checkBasincSalteri+0x58>)
 80062da:	2201      	movs	r2, #1
 80062dc:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 80062de:	4b10      	ldr	r3, [pc, #64]	; (8006320 <checkBasincSalteri+0x54>)
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d119      	bne.n	800631a <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 80062e6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80062ea:	480f      	ldr	r0, [pc, #60]	; (8006328 <checkBasincSalteri+0x5c>)
 80062ec:	f003 fc28 	bl	8009b40 <HAL_GPIO_ReadPin>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d10a      	bne.n	800630c <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 80062f6:	4b0d      	ldr	r3, [pc, #52]	; (800632c <checkBasincSalteri+0x60>)
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	4b0d      	ldr	r3, [pc, #52]	; (8006330 <checkBasincSalteri+0x64>)
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	1ad3      	subs	r3, r2, r3
 8006300:	2b02      	cmp	r3, #2
 8006302:	d90a      	bls.n	800631a <checkBasincSalteri+0x4e>
				basincVar=1;
 8006304:	4b07      	ldr	r3, [pc, #28]	; (8006324 <checkBasincSalteri+0x58>)
 8006306:	2201      	movs	r2, #1
 8006308:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 800630a:	e006      	b.n	800631a <checkBasincSalteri+0x4e>
			timer5=millis;
 800630c:	4b07      	ldr	r3, [pc, #28]	; (800632c <checkBasincSalteri+0x60>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a07      	ldr	r2, [pc, #28]	; (8006330 <checkBasincSalteri+0x64>)
 8006312:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8006314:	4b03      	ldr	r3, [pc, #12]	; (8006324 <checkBasincSalteri+0x58>)
 8006316:	2200      	movs	r2, #0
 8006318:	701a      	strb	r2, [r3, #0]
}
 800631a:	bf00      	nop
 800631c:	bd80      	pop	{r7, pc}
 800631e:	bf00      	nop
 8006320:	20000d3c 	.word	0x20000d3c
 8006324:	20000d38 	.word	0x20000d38
 8006328:	40011000 	.word	0x40011000
 800632c:	20000cc0 	.word	0x20000cc0
 8006330:	20000cd8 	.word	0x20000cd8

08006334 <checkBasGonder>:

void checkBasGonder() {
 8006334:	b480      	push	{r7}
 8006336:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8006338:	4b1b      	ldr	r3, [pc, #108]	; (80063a8 <checkBasGonder+0x74>)
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	2b01      	cmp	r3, #1
 800633e:	d10b      	bne.n	8006358 <checkBasGonder+0x24>
 8006340:	4b1a      	ldr	r3, [pc, #104]	; (80063ac <checkBasGonder+0x78>)
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d007      	beq.n	8006358 <checkBasGonder+0x24>
 8006348:	4b19      	ldr	r3, [pc, #100]	; (80063b0 <checkBasGonder+0x7c>)
 800634a:	781b      	ldrb	r3, [r3, #0]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d103      	bne.n	8006358 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8006350:	4b18      	ldr	r3, [pc, #96]	; (80063b4 <checkBasGonder+0x80>)
 8006352:	2201      	movs	r2, #1
 8006354:	701a      	strb	r2, [r3, #0]
 8006356:	e009      	b.n	800636c <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8006358:	4b14      	ldr	r3, [pc, #80]	; (80063ac <checkBasGonder+0x78>)
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	f083 0301 	eor.w	r3, r3, #1
 8006360:	b2db      	uxtb	r3, r3
 8006362:	2b00      	cmp	r3, #0
 8006364:	d002      	beq.n	800636c <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8006366:	4b13      	ldr	r3, [pc, #76]	; (80063b4 <checkBasGonder+0x80>)
 8006368:	2200      	movs	r2, #0
 800636a:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 800636c:	4b0e      	ldr	r3, [pc, #56]	; (80063a8 <checkBasGonder+0x74>)
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	2b01      	cmp	r3, #1
 8006372:	d10b      	bne.n	800638c <checkBasGonder+0x58>
 8006374:	4b10      	ldr	r3, [pc, #64]	; (80063b8 <checkBasGonder+0x84>)
 8006376:	781b      	ldrb	r3, [r3, #0]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d007      	beq.n	800638c <checkBasGonder+0x58>
 800637c:	4b0c      	ldr	r3, [pc, #48]	; (80063b0 <checkBasGonder+0x7c>)
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	2b00      	cmp	r3, #0
 8006382:	d103      	bne.n	800638c <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8006384:	4b0d      	ldr	r3, [pc, #52]	; (80063bc <checkBasGonder+0x88>)
 8006386:	2201      	movs	r2, #1
 8006388:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 800638a:	e009      	b.n	80063a0 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 800638c:	4b0a      	ldr	r3, [pc, #40]	; (80063b8 <checkBasGonder+0x84>)
 800638e:	781b      	ldrb	r3, [r3, #0]
 8006390:	f083 0301 	eor.w	r3, r3, #1
 8006394:	b2db      	uxtb	r3, r3
 8006396:	2b00      	cmp	r3, #0
 8006398:	d002      	beq.n	80063a0 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 800639a:	4b08      	ldr	r3, [pc, #32]	; (80063bc <checkBasGonder+0x88>)
 800639c:	2200      	movs	r2, #0
 800639e:	701a      	strb	r2, [r3, #0]
}
 80063a0:	bf00      	nop
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bc80      	pop	{r7}
 80063a6:	4770      	bx	lr
 80063a8:	20000d36 	.word	0x20000d36
 80063ac:	20000d6a 	.word	0x20000d6a
 80063b0:	20000d44 	.word	0x20000d44
 80063b4:	20000d71 	.word	0x20000d71
 80063b8:	20000d6d 	.word	0x20000d6d
 80063bc:	20000d72 	.word	0x20000d72

080063c0 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 80063c0:	b580      	push	{r7, lr}
 80063c2:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 80063c4:	4b24      	ldr	r3, [pc, #144]	; (8006458 <checkKapiSecimleri+0x98>)
 80063c6:	781b      	ldrb	r3, [r3, #0]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d102      	bne.n	80063d2 <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 80063cc:	4b23      	ldr	r3, [pc, #140]	; (800645c <checkKapiSecimleri+0x9c>)
 80063ce:	2201      	movs	r2, #1
 80063d0:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 80063d2:	4b21      	ldr	r3, [pc, #132]	; (8006458 <checkKapiSecimleri+0x98>)
 80063d4:	781b      	ldrb	r3, [r3, #0]
 80063d6:	2b01      	cmp	r3, #1
 80063d8:	d10e      	bne.n	80063f8 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 80063da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80063de:	4820      	ldr	r0, [pc, #128]	; (8006460 <checkKapiSecimleri+0xa0>)
 80063e0:	f003 fbae 	bl	8009b40 <HAL_GPIO_ReadPin>
 80063e4:	4603      	mov	r3, r0
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d103      	bne.n	80063f2 <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 80063ea:	4b1c      	ldr	r3, [pc, #112]	; (800645c <checkKapiSecimleri+0x9c>)
 80063ec:	2201      	movs	r2, #1
 80063ee:	701a      	strb	r2, [r3, #0]
 80063f0:	e002      	b.n	80063f8 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 80063f2:	4b1a      	ldr	r3, [pc, #104]	; (800645c <checkKapiSecimleri+0x9c>)
 80063f4:	2200      	movs	r2, #0
 80063f6:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 80063f8:	4b17      	ldr	r3, [pc, #92]	; (8006458 <checkKapiSecimleri+0x98>)
 80063fa:	781b      	ldrb	r3, [r3, #0]
 80063fc:	2b02      	cmp	r3, #2
 80063fe:	d10e      	bne.n	800641e <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8006400:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006404:	4816      	ldr	r0, [pc, #88]	; (8006460 <checkKapiSecimleri+0xa0>)
 8006406:	f003 fb9b 	bl	8009b40 <HAL_GPIO_ReadPin>
 800640a:	4603      	mov	r3, r0
 800640c:	2b00      	cmp	r3, #0
 800640e:	d103      	bne.n	8006418 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8006410:	4b12      	ldr	r3, [pc, #72]	; (800645c <checkKapiSecimleri+0x9c>)
 8006412:	2201      	movs	r2, #1
 8006414:	701a      	strb	r2, [r3, #0]
 8006416:	e002      	b.n	800641e <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8006418:	4b10      	ldr	r3, [pc, #64]	; (800645c <checkKapiSecimleri+0x9c>)
 800641a:	2200      	movs	r2, #0
 800641c:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 800641e:	4b0e      	ldr	r3, [pc, #56]	; (8006458 <checkKapiSecimleri+0x98>)
 8006420:	781b      	ldrb	r3, [r3, #0]
 8006422:	2b03      	cmp	r3, #3
 8006424:	d116      	bne.n	8006454 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8006426:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800642a:	480d      	ldr	r0, [pc, #52]	; (8006460 <checkKapiSecimleri+0xa0>)
 800642c:	f003 fb88 	bl	8009b40 <HAL_GPIO_ReadPin>
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d10b      	bne.n	800644e <checkKapiSecimleri+0x8e>
 8006436:	f44f 7180 	mov.w	r1, #256	; 0x100
 800643a:	4809      	ldr	r0, [pc, #36]	; (8006460 <checkKapiSecimleri+0xa0>)
 800643c:	f003 fb80 	bl	8009b40 <HAL_GPIO_ReadPin>
 8006440:	4603      	mov	r3, r0
 8006442:	2b00      	cmp	r3, #0
 8006444:	d103      	bne.n	800644e <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8006446:	4b05      	ldr	r3, [pc, #20]	; (800645c <checkKapiSecimleri+0x9c>)
 8006448:	2201      	movs	r2, #1
 800644a:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 800644c:	e002      	b.n	8006454 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 800644e:	4b03      	ldr	r3, [pc, #12]	; (800645c <checkKapiSecimleri+0x9c>)
 8006450:	2200      	movs	r2, #0
 8006452:	701a      	strb	r2, [r3, #0]
}
 8006454:	bf00      	nop
 8006456:	bd80      	pop	{r7, pc}
 8006458:	20000d3d 	.word	0x20000d3d
 800645c:	20000d88 	.word	0x20000d88
 8006460:	40010800 	.word	0x40010800

08006464 <checkAktifCalisma>:

void checkAktifCalisma() {
 8006464:	b580      	push	{r7, lr}
 8006466:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8006468:	4b62      	ldr	r3, [pc, #392]	; (80065f4 <checkAktifCalisma+0x190>)
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	f041 8332 	bne.w	8007ad6 <checkAktifCalisma+0x1672>
 8006472:	4b61      	ldr	r3, [pc, #388]	; (80065f8 <checkAktifCalisma+0x194>)
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	2b00      	cmp	r3, #0
 8006478:	f041 832d 	bne.w	8007ad6 <checkAktifCalisma+0x1672>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 800647c:	4b5f      	ldr	r3, [pc, #380]	; (80065fc <checkAktifCalisma+0x198>)
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d11a      	bne.n	80064ba <checkAktifCalisma+0x56>
 8006484:	4b5e      	ldr	r3, [pc, #376]	; (8006600 <checkAktifCalisma+0x19c>)
 8006486:	781b      	ldrb	r3, [r3, #0]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d116      	bne.n	80064ba <checkAktifCalisma+0x56>
 800648c:	4b5d      	ldr	r3, [pc, #372]	; (8006604 <checkAktifCalisma+0x1a0>)
 800648e:	781b      	ldrb	r3, [r3, #0]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d00a      	beq.n	80064aa <checkAktifCalisma+0x46>
 8006494:	4b5c      	ldr	r3, [pc, #368]	; (8006608 <checkAktifCalisma+0x1a4>)
 8006496:	781b      	ldrb	r3, [r3, #0]
 8006498:	f083 0301 	eor.w	r3, r3, #1
 800649c:	b2db      	uxtb	r3, r3
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d003      	beq.n	80064aa <checkAktifCalisma+0x46>
 80064a2:	4b5a      	ldr	r3, [pc, #360]	; (800660c <checkAktifCalisma+0x1a8>)
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	2b01      	cmp	r3, #1
 80064a8:	d007      	beq.n	80064ba <checkAktifCalisma+0x56>
 80064aa:	4b59      	ldr	r3, [pc, #356]	; (8006610 <checkAktifCalisma+0x1ac>)
 80064ac:	781b      	ldrb	r3, [r3, #0]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d018      	beq.n	80064e4 <checkAktifCalisma+0x80>
 80064b2:	4b58      	ldr	r3, [pc, #352]	; (8006614 <checkAktifCalisma+0x1b0>)
 80064b4:	781b      	ldrb	r3, [r3, #0]
 80064b6:	2b01      	cmp	r3, #1
 80064b8:	d114      	bne.n	80064e4 <checkAktifCalisma+0x80>
 80064ba:	4b57      	ldr	r3, [pc, #348]	; (8006618 <checkAktifCalisma+0x1b4>)
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d010      	beq.n	80064e4 <checkAktifCalisma+0x80>
 80064c2:	4b56      	ldr	r3, [pc, #344]	; (800661c <checkAktifCalisma+0x1b8>)
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	d00c      	beq.n	80064e4 <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 80064ca:	2201      	movs	r2, #1
 80064cc:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80064d0:	4853      	ldr	r0, [pc, #332]	; (8006620 <checkAktifCalisma+0x1bc>)
 80064d2:	f003 fb4c 	bl	8009b6e <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 80064d6:	4b53      	ldr	r3, [pc, #332]	; (8006624 <checkAktifCalisma+0x1c0>)
 80064d8:	2201      	movs	r2, #1
 80064da:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 80064dc:	4b52      	ldr	r3, [pc, #328]	; (8006628 <checkAktifCalisma+0x1c4>)
 80064de:	2201      	movs	r2, #1
 80064e0:	701a      	strb	r2, [r3, #0]
 80064e2:	e008      	b.n	80064f6 <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80064e4:	2200      	movs	r2, #0
 80064e6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80064ea:	484d      	ldr	r0, [pc, #308]	; (8006620 <checkAktifCalisma+0x1bc>)
 80064ec:	f003 fb3f 	bl	8009b6e <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 80064f0:	4b4c      	ldr	r3, [pc, #304]	; (8006624 <checkAktifCalisma+0x1c0>)
 80064f2:	2200      	movs	r2, #0
 80064f4:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 80064f6:	4b40      	ldr	r3, [pc, #256]	; (80065f8 <checkAktifCalisma+0x194>)
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d160      	bne.n	80065c0 <checkAktifCalisma+0x15c>
 80064fe:	4b46      	ldr	r3, [pc, #280]	; (8006618 <checkAktifCalisma+0x1b4>)
 8006500:	781b      	ldrb	r3, [r3, #0]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d05c      	beq.n	80065c0 <checkAktifCalisma+0x15c>
 8006506:	4b45      	ldr	r3, [pc, #276]	; (800661c <checkAktifCalisma+0x1b8>)
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d058      	beq.n	80065c0 <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 800650e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006512:	4843      	ldr	r0, [pc, #268]	; (8006620 <checkAktifCalisma+0x1bc>)
 8006514:	f003 fb14 	bl	8009b40 <HAL_GPIO_ReadPin>
 8006518:	4603      	mov	r3, r0
 800651a:	2b00      	cmp	r3, #0
 800651c:	d003      	beq.n	8006526 <checkAktifCalisma+0xc2>
 800651e:	4b43      	ldr	r3, [pc, #268]	; (800662c <checkAktifCalisma+0x1c8>)
 8006520:	781b      	ldrb	r3, [r3, #0]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d04c      	beq.n	80065c0 <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006526:	2102      	movs	r1, #2
 8006528:	4841      	ldr	r0, [pc, #260]	; (8006630 <checkAktifCalisma+0x1cc>)
 800652a:	f003 fb09 	bl	8009b40 <HAL_GPIO_ReadPin>
 800652e:	4603      	mov	r3, r0
 8006530:	2b00      	cmp	r3, #0
 8006532:	d145      	bne.n	80065c0 <checkAktifCalisma+0x15c>
				&& (basincVar)
 8006534:	4b3f      	ldr	r3, [pc, #252]	; (8006634 <checkAktifCalisma+0x1d0>)
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d041      	beq.n	80065c0 <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 800653c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006540:	4837      	ldr	r0, [pc, #220]	; (8006620 <checkAktifCalisma+0x1bc>)
 8006542:	f003 fafd 	bl	8009b40 <HAL_GPIO_ReadPin>
 8006546:	4603      	mov	r3, r0
 8006548:	2b01      	cmp	r3, #1
 800654a:	d10e      	bne.n	800656a <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 800654c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006550:	4833      	ldr	r0, [pc, #204]	; (8006620 <checkAktifCalisma+0x1bc>)
 8006552:	f003 faf5 	bl	8009b40 <HAL_GPIO_ReadPin>
 8006556:	4603      	mov	r3, r0
 8006558:	2b01      	cmp	r3, #1
 800655a:	d106      	bne.n	800656a <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 800655c:	2140      	movs	r1, #64	; 0x40
 800655e:	4834      	ldr	r0, [pc, #208]	; (8006630 <checkAktifCalisma+0x1cc>)
 8006560:	f003 faee 	bl	8009b40 <HAL_GPIO_ReadPin>
 8006564:	4603      	mov	r3, r0
 8006566:	2b01      	cmp	r3, #1
 8006568:	d003      	beq.n	8006572 <checkAktifCalisma+0x10e>
 800656a:	4b24      	ldr	r3, [pc, #144]	; (80065fc <checkAktifCalisma+0x198>)
 800656c:	781b      	ldrb	r3, [r3, #0]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d026      	beq.n	80065c0 <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 8006572:	4b24      	ldr	r3, [pc, #144]	; (8006604 <checkAktifCalisma+0x1a0>)
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	f083 0301 	eor.w	r3, r3, #1
 800657a:	b2db      	uxtb	r3, r3
 800657c:	2b00      	cmp	r3, #0
 800657e:	d01f      	beq.n	80065c0 <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8006580:	4b1f      	ldr	r3, [pc, #124]	; (8006600 <checkAktifCalisma+0x19c>)
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	f083 0301 	eor.w	r3, r3, #1
 8006588:	b2db      	uxtb	r3, r3
 800658a:	2b00      	cmp	r3, #0
 800658c:	d018      	beq.n	80065c0 <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 800658e:	4b20      	ldr	r3, [pc, #128]	; (8006610 <checkAktifCalisma+0x1ac>)
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	f083 0301 	eor.w	r3, r3, #1
 8006596:	b2db      	uxtb	r3, r3
 8006598:	2b00      	cmp	r3, #0
 800659a:	d011      	beq.n	80065c0 <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 800659c:	4b26      	ldr	r3, [pc, #152]	; (8006638 <checkAktifCalisma+0x1d4>)
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	f083 0301 	eor.w	r3, r3, #1
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d00a      	beq.n	80065c0 <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 80065aa:	4b24      	ldr	r3, [pc, #144]	; (800663c <checkAktifCalisma+0x1d8>)
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	f083 0301 	eor.w	r3, r3, #1
 80065b2:	b2db      	uxtb	r3, r3
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d003      	beq.n	80065c0 <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 80065b8:	4b10      	ldr	r3, [pc, #64]	; (80065fc <checkAktifCalisma+0x198>)
 80065ba:	2201      	movs	r2, #1
 80065bc:	701a      	strb	r2, [r3, #0]
 80065be:	e002      	b.n	80065c6 <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 80065c0:	4b0e      	ldr	r3, [pc, #56]	; (80065fc <checkAktifCalisma+0x198>)
 80065c2:	2200      	movs	r2, #0
 80065c4:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 80065c6:	4b0d      	ldr	r3, [pc, #52]	; (80065fc <checkAktifCalisma+0x198>)
 80065c8:	781b      	ldrb	r3, [r3, #0]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d03a      	beq.n	8006644 <checkAktifCalisma+0x1e0>
 80065ce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80065d2:	4817      	ldr	r0, [pc, #92]	; (8006630 <checkAktifCalisma+0x1cc>)
 80065d4:	f003 fab4 	bl	8009b40 <HAL_GPIO_ReadPin>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b01      	cmp	r3, #1
 80065dc:	d132      	bne.n	8006644 <checkAktifCalisma+0x1e0>
 80065de:	4b18      	ldr	r3, [pc, #96]	; (8006640 <checkAktifCalisma+0x1dc>)
 80065e0:	781b      	ldrb	r3, [r3, #0]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d02e      	beq.n	8006644 <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 80065e6:	2201      	movs	r2, #1
 80065e8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80065ec:	480c      	ldr	r0, [pc, #48]	; (8006620 <checkAktifCalisma+0x1bc>)
 80065ee:	f003 fabe 	bl	8009b6e <HAL_GPIO_WritePin>
 80065f2:	e02d      	b.n	8006650 <checkAktifCalisma+0x1ec>
 80065f4:	20000d53 	.word	0x20000d53
 80065f8:	20000d52 	.word	0x20000d52
 80065fc:	20000d6a 	.word	0x20000d6a
 8006600:	20000d6b 	.word	0x20000d6b
 8006604:	20000d6d 	.word	0x20000d6d
 8006608:	20000d65 	.word	0x20000d65
 800660c:	20000d48 	.word	0x20000d48
 8006610:	20000d6c 	.word	0x20000d6c
 8006614:	20000d47 	.word	0x20000d47
 8006618:	20000d87 	.word	0x20000d87
 800661c:	20000d88 	.word	0x20000d88
 8006620:	40010c00 	.word	0x40010c00
 8006624:	20000d89 	.word	0x20000d89
 8006628:	20000d74 	.word	0x20000d74
 800662c:	20000d71 	.word	0x20000d71
 8006630:	40011000 	.word	0x40011000
 8006634:	20000d38 	.word	0x20000d38
 8006638:	20000d6f 	.word	0x20000d6f
 800663c:	20000d70 	.word	0x20000d70
 8006640:	20000d43 	.word	0x20000d43
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006644:	2200      	movs	r2, #0
 8006646:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800664a:	4860      	ldr	r0, [pc, #384]	; (80067cc <checkAktifCalisma+0x368>)
 800664c:	f003 fa8f 	bl	8009b6e <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8006650:	4b5f      	ldr	r3, [pc, #380]	; (80067d0 <checkAktifCalisma+0x36c>)
 8006652:	781b      	ldrb	r3, [r3, #0]
 8006654:	2b00      	cmp	r3, #0
 8006656:	d013      	beq.n	8006680 <checkAktifCalisma+0x21c>
 8006658:	4b5e      	ldr	r3, [pc, #376]	; (80067d4 <checkAktifCalisma+0x370>)
 800665a:	781b      	ldrb	r3, [r3, #0]
 800665c:	2b01      	cmp	r3, #1
 800665e:	d007      	beq.n	8006670 <checkAktifCalisma+0x20c>
 8006660:	4b5c      	ldr	r3, [pc, #368]	; (80067d4 <checkAktifCalisma+0x370>)
 8006662:	781b      	ldrb	r3, [r3, #0]
 8006664:	2b02      	cmp	r3, #2
 8006666:	d003      	beq.n	8006670 <checkAktifCalisma+0x20c>
 8006668:	4b5b      	ldr	r3, [pc, #364]	; (80067d8 <checkAktifCalisma+0x374>)
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	2b01      	cmp	r3, #1
 800666e:	d107      	bne.n	8006680 <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8006670:	2201      	movs	r2, #1
 8006672:	2104      	movs	r1, #4
 8006674:	4855      	ldr	r0, [pc, #340]	; (80067cc <checkAktifCalisma+0x368>)
 8006676:	f003 fa7a 	bl	8009b6e <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 800667a:	4b58      	ldr	r3, [pc, #352]	; (80067dc <checkAktifCalisma+0x378>)
 800667c:	2201      	movs	r2, #1
 800667e:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8006680:	4b56      	ldr	r3, [pc, #344]	; (80067dc <checkAktifCalisma+0x378>)
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d02f      	beq.n	80066e8 <checkAktifCalisma+0x284>
 8006688:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800668c:	484f      	ldr	r0, [pc, #316]	; (80067cc <checkAktifCalisma+0x368>)
 800668e:	f003 fa57 	bl	8009b40 <HAL_GPIO_ReadPin>
 8006692:	4603      	mov	r3, r0
 8006694:	2b01      	cmp	r3, #1
 8006696:	d106      	bne.n	80066a6 <checkAktifCalisma+0x242>
 8006698:	4b51      	ldr	r3, [pc, #324]	; (80067e0 <checkAktifCalisma+0x37c>)
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	f083 0301 	eor.w	r3, r3, #1
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d106      	bne.n	80066b4 <checkAktifCalisma+0x250>
 80066a6:	2102      	movs	r1, #2
 80066a8:	484e      	ldr	r0, [pc, #312]	; (80067e4 <checkAktifCalisma+0x380>)
 80066aa:	f003 fa49 	bl	8009b40 <HAL_GPIO_ReadPin>
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	d119      	bne.n	80066e8 <checkAktifCalisma+0x284>
 80066b4:	4b4c      	ldr	r3, [pc, #304]	; (80067e8 <checkAktifCalisma+0x384>)
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d015      	beq.n	80066e8 <checkAktifCalisma+0x284>
 80066bc:	4b4b      	ldr	r3, [pc, #300]	; (80067ec <checkAktifCalisma+0x388>)
 80066be:	781b      	ldrb	r3, [r3, #0]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d011      	beq.n	80066e8 <checkAktifCalisma+0x284>
 80066c4:	4b4a      	ldr	r3, [pc, #296]	; (80067f0 <checkAktifCalisma+0x38c>)
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d00d      	beq.n	80066e8 <checkAktifCalisma+0x284>
 80066cc:	4b49      	ldr	r3, [pc, #292]	; (80067f4 <checkAktifCalisma+0x390>)
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	f083 0301 	eor.w	r3, r3, #1
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d006      	beq.n	80066e8 <checkAktifCalisma+0x284>
			timer2=millis;
 80066da:	4b47      	ldr	r3, [pc, #284]	; (80067f8 <checkAktifCalisma+0x394>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	4a47      	ldr	r2, [pc, #284]	; (80067fc <checkAktifCalisma+0x398>)
 80066e0:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 80066e2:	4b44      	ldr	r3, [pc, #272]	; (80067f4 <checkAktifCalisma+0x390>)
 80066e4:	2201      	movs	r2, #1
 80066e6:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 80066e8:	4b43      	ldr	r3, [pc, #268]	; (80067f8 <checkAktifCalisma+0x394>)
 80066ea:	681a      	ldr	r2, [r3, #0]
 80066ec:	4b43      	ldr	r3, [pc, #268]	; (80067fc <checkAktifCalisma+0x398>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	1ad3      	subs	r3, r2, r3
 80066f2:	4a43      	ldr	r2, [pc, #268]	; (8006800 <checkAktifCalisma+0x39c>)
 80066f4:	7812      	ldrb	r2, [r2, #0]
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d303      	bcc.n	8006702 <checkAktifCalisma+0x29e>
 80066fa:	4b3e      	ldr	r3, [pc, #248]	; (80067f4 <checkAktifCalisma+0x390>)
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d111      	bne.n	8006726 <checkAktifCalisma+0x2c2>
 8006702:	4b39      	ldr	r3, [pc, #228]	; (80067e8 <checkAktifCalisma+0x384>)
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	f083 0301 	eor.w	r3, r3, #1
 800670a:	b2db      	uxtb	r3, r3
 800670c:	2b00      	cmp	r3, #0
 800670e:	d10a      	bne.n	8006726 <checkAktifCalisma+0x2c2>
 8006710:	4b36      	ldr	r3, [pc, #216]	; (80067ec <checkAktifCalisma+0x388>)
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	f083 0301 	eor.w	r3, r3, #1
 8006718:	b2db      	uxtb	r3, r3
 800671a:	2b00      	cmp	r3, #0
 800671c:	d103      	bne.n	8006726 <checkAktifCalisma+0x2c2>
 800671e:	4b34      	ldr	r3, [pc, #208]	; (80067f0 <checkAktifCalisma+0x38c>)
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d10a      	bne.n	800673c <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006726:	2200      	movs	r2, #0
 8006728:	2104      	movs	r1, #4
 800672a:	4828      	ldr	r0, [pc, #160]	; (80067cc <checkAktifCalisma+0x368>)
 800672c:	f003 fa1f 	bl	8009b6e <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 8006730:	4b2a      	ldr	r3, [pc, #168]	; (80067dc <checkAktifCalisma+0x378>)
 8006732:	2200      	movs	r2, #0
 8006734:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 8006736:	4b2f      	ldr	r3, [pc, #188]	; (80067f4 <checkAktifCalisma+0x390>)
 8006738:	2200      	movs	r2, #0
 800673a:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 800673c:	4b31      	ldr	r3, [pc, #196]	; (8006804 <checkAktifCalisma+0x3a0>)
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d102      	bne.n	800674a <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 8006744:	4b30      	ldr	r3, [pc, #192]	; (8006808 <checkAktifCalisma+0x3a4>)
 8006746:	2201      	movs	r2, #1
 8006748:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 800674a:	4b2e      	ldr	r3, [pc, #184]	; (8006804 <checkAktifCalisma+0x3a0>)
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	2b01      	cmp	r3, #1
 8006750:	d116      	bne.n	8006780 <checkAktifCalisma+0x31c>
 8006752:	4b2e      	ldr	r3, [pc, #184]	; (800680c <checkAktifCalisma+0x3a8>)
 8006754:	781b      	ldrb	r3, [r3, #0]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d112      	bne.n	8006780 <checkAktifCalisma+0x31c>
 800675a:	2101      	movs	r1, #1
 800675c:	4821      	ldr	r0, [pc, #132]	; (80067e4 <checkAktifCalisma+0x380>)
 800675e:	f003 f9ef 	bl	8009b40 <HAL_GPIO_ReadPin>
 8006762:	4603      	mov	r3, r0
 8006764:	2b00      	cmp	r3, #0
 8006766:	d10b      	bne.n	8006780 <checkAktifCalisma+0x31c>
 8006768:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800676c:	4817      	ldr	r0, [pc, #92]	; (80067cc <checkAktifCalisma+0x368>)
 800676e:	f003 f9e7 	bl	8009b40 <HAL_GPIO_ReadPin>
 8006772:	4603      	mov	r3, r0
 8006774:	2b00      	cmp	r3, #0
 8006776:	d103      	bne.n	8006780 <checkAktifCalisma+0x31c>
			cerceveVar=1;
 8006778:	4b23      	ldr	r3, [pc, #140]	; (8006808 <checkAktifCalisma+0x3a4>)
 800677a:	2201      	movs	r2, #1
 800677c:	701a      	strb	r2, [r3, #0]
 800677e:	e011      	b.n	80067a4 <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8006780:	4b20      	ldr	r3, [pc, #128]	; (8006804 <checkAktifCalisma+0x3a0>)
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	2b01      	cmp	r3, #1
 8006786:	d10d      	bne.n	80067a4 <checkAktifCalisma+0x340>
 8006788:	2101      	movs	r1, #1
 800678a:	4816      	ldr	r0, [pc, #88]	; (80067e4 <checkAktifCalisma+0x380>)
 800678c:	f003 f9d8 	bl	8009b40 <HAL_GPIO_ReadPin>
 8006790:	4603      	mov	r3, r0
 8006792:	2b01      	cmp	r3, #1
 8006794:	d106      	bne.n	80067a4 <checkAktifCalisma+0x340>
 8006796:	4b1d      	ldr	r3, [pc, #116]	; (800680c <checkAktifCalisma+0x3a8>)
 8006798:	781b      	ldrb	r3, [r3, #0]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d102      	bne.n	80067a4 <checkAktifCalisma+0x340>
			cerceveVar=0;
 800679e:	4b1a      	ldr	r3, [pc, #104]	; (8006808 <checkAktifCalisma+0x3a4>)
 80067a0:	2200      	movs	r2, #0
 80067a2:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 80067a4:	4b17      	ldr	r3, [pc, #92]	; (8006804 <checkAktifCalisma+0x3a0>)
 80067a6:	781b      	ldrb	r3, [r3, #0]
 80067a8:	2b01      	cmp	r3, #1
 80067aa:	d134      	bne.n	8006816 <checkAktifCalisma+0x3b2>
 80067ac:	4b17      	ldr	r3, [pc, #92]	; (800680c <checkAktifCalisma+0x3a8>)
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	2b01      	cmp	r3, #1
 80067b2:	d130      	bne.n	8006816 <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 80067b4:	2101      	movs	r1, #1
 80067b6:	480b      	ldr	r0, [pc, #44]	; (80067e4 <checkAktifCalisma+0x380>)
 80067b8:	f003 f9c2 	bl	8009b40 <HAL_GPIO_ReadPin>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d126      	bne.n	8006810 <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 80067c2:	4b11      	ldr	r3, [pc, #68]	; (8006808 <checkAktifCalisma+0x3a4>)
 80067c4:	2201      	movs	r2, #1
 80067c6:	701a      	strb	r2, [r3, #0]
 80067c8:	e025      	b.n	8006816 <checkAktifCalisma+0x3b2>
 80067ca:	bf00      	nop
 80067cc:	40010c00 	.word	0x40010c00
 80067d0:	20000d6a 	.word	0x20000d6a
 80067d4:	20000d44 	.word	0x20000d44
 80067d8:	20000d48 	.word	0x20000d48
 80067dc:	20000d6e 	.word	0x20000d6e
 80067e0:	20000d71 	.word	0x20000d71
 80067e4:	40011000 	.word	0x40011000
 80067e8:	20000d87 	.word	0x20000d87
 80067ec:	20000d88 	.word	0x20000d88
 80067f0:	20000d38 	.word	0x20000d38
 80067f4:	20000d66 	.word	0x20000d66
 80067f8:	20000cc0 	.word	0x20000cc0
 80067fc:	20000ccc 	.word	0x20000ccc
 8006800:	20000d49 	.word	0x20000d49
 8006804:	20000d39 	.word	0x20000d39
 8006808:	20000d8c 	.word	0x20000d8c
 800680c:	20000d36 	.word	0x20000d36
			} else {
				cerceveVar=0;
 8006810:	4b7f      	ldr	r3, [pc, #508]	; (8006a10 <checkAktifCalisma+0x5ac>)
 8006812:	2200      	movs	r2, #0
 8006814:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8006816:	4b7f      	ldr	r3, [pc, #508]	; (8006a14 <checkAktifCalisma+0x5b0>)
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d17c      	bne.n	8006918 <checkAktifCalisma+0x4b4>
 800681e:	4b7e      	ldr	r3, [pc, #504]	; (8006a18 <checkAktifCalisma+0x5b4>)
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d078      	beq.n	8006918 <checkAktifCalisma+0x4b4>
 8006826:	4b7d      	ldr	r3, [pc, #500]	; (8006a1c <checkAktifCalisma+0x5b8>)
 8006828:	781b      	ldrb	r3, [r3, #0]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d074      	beq.n	8006918 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 800682e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006832:	487b      	ldr	r0, [pc, #492]	; (8006a20 <checkAktifCalisma+0x5bc>)
 8006834:	f003 f984 	bl	8009b40 <HAL_GPIO_ReadPin>
 8006838:	4603      	mov	r3, r0
 800683a:	2b00      	cmp	r3, #0
 800683c:	d003      	beq.n	8006846 <checkAktifCalisma+0x3e2>
 800683e:	4b79      	ldr	r3, [pc, #484]	; (8006a24 <checkAktifCalisma+0x5c0>)
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d068      	beq.n	8006918 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 8006846:	4b72      	ldr	r3, [pc, #456]	; (8006a10 <checkAktifCalisma+0x5ac>)
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d064      	beq.n	8006918 <checkAktifCalisma+0x4b4>
 800684e:	4b76      	ldr	r3, [pc, #472]	; (8006a28 <checkAktifCalisma+0x5c4>)
 8006850:	781b      	ldrb	r3, [r3, #0]
 8006852:	f083 0301 	eor.w	r3, r3, #1
 8006856:	b2db      	uxtb	r3, r3
 8006858:	2b00      	cmp	r3, #0
 800685a:	d05d      	beq.n	8006918 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 800685c:	2104      	movs	r1, #4
 800685e:	4873      	ldr	r0, [pc, #460]	; (8006a2c <checkAktifCalisma+0x5c8>)
 8006860:	f003 f96e 	bl	8009b40 <HAL_GPIO_ReadPin>
 8006864:	4603      	mov	r3, r0
 8006866:	2b00      	cmp	r3, #0
 8006868:	d003      	beq.n	8006872 <checkAktifCalisma+0x40e>
 800686a:	4b71      	ldr	r3, [pc, #452]	; (8006a30 <checkAktifCalisma+0x5cc>)
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d152      	bne.n	8006918 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8006872:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006876:	486a      	ldr	r0, [pc, #424]	; (8006a20 <checkAktifCalisma+0x5bc>)
 8006878:	f003 f962 	bl	8009b40 <HAL_GPIO_ReadPin>
 800687c:	4603      	mov	r3, r0
 800687e:	2b01      	cmp	r3, #1
 8006880:	d10e      	bne.n	80068a0 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8006882:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006886:	4866      	ldr	r0, [pc, #408]	; (8006a20 <checkAktifCalisma+0x5bc>)
 8006888:	f003 f95a 	bl	8009b40 <HAL_GPIO_ReadPin>
 800688c:	4603      	mov	r3, r0
 800688e:	2b01      	cmp	r3, #1
 8006890:	d106      	bne.n	80068a0 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8006892:	2140      	movs	r1, #64	; 0x40
 8006894:	4865      	ldr	r0, [pc, #404]	; (8006a2c <checkAktifCalisma+0x5c8>)
 8006896:	f003 f953 	bl	8009b40 <HAL_GPIO_ReadPin>
 800689a:	4603      	mov	r3, r0
 800689c:	2b01      	cmp	r3, #1
 800689e:	d003      	beq.n	80068a8 <checkAktifCalisma+0x444>
 80068a0:	4b64      	ldr	r3, [pc, #400]	; (8006a34 <checkAktifCalisma+0x5d0>)
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d037      	beq.n	8006918 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 80068a8:	4b63      	ldr	r3, [pc, #396]	; (8006a38 <checkAktifCalisma+0x5d4>)
 80068aa:	781b      	ldrb	r3, [r3, #0]
 80068ac:	f083 0301 	eor.w	r3, r3, #1
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d030      	beq.n	8006918 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 80068b6:	4b61      	ldr	r3, [pc, #388]	; (8006a3c <checkAktifCalisma+0x5d8>)
 80068b8:	781b      	ldrb	r3, [r3, #0]
 80068ba:	f083 0301 	eor.w	r3, r3, #1
 80068be:	b2db      	uxtb	r3, r3
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d029      	beq.n	8006918 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 80068c4:	4b5e      	ldr	r3, [pc, #376]	; (8006a40 <checkAktifCalisma+0x5dc>)
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	f083 0301 	eor.w	r3, r3, #1
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d022      	beq.n	8006918 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 80068d2:	4b5c      	ldr	r3, [pc, #368]	; (8006a44 <checkAktifCalisma+0x5e0>)
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	f083 0301 	eor.w	r3, r3, #1
 80068da:	b2db      	uxtb	r3, r3
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d01b      	beq.n	8006918 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 80068e0:	4b59      	ldr	r3, [pc, #356]	; (8006a48 <checkAktifCalisma+0x5e4>)
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	f083 0301 	eor.w	r3, r3, #1
 80068e8:	b2db      	uxtb	r3, r3
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d014      	beq.n	8006918 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 80068ee:	4b57      	ldr	r3, [pc, #348]	; (8006a4c <checkAktifCalisma+0x5e8>)
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	f083 0301 	eor.w	r3, r3, #1
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d00d      	beq.n	8006918 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80068fc:	2201      	movs	r2, #1
 80068fe:	2102      	movs	r1, #2
 8006900:	4847      	ldr	r0, [pc, #284]	; (8006a20 <checkAktifCalisma+0x5bc>)
 8006902:	f003 f934 	bl	8009b6e <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 8006906:	4b4b      	ldr	r3, [pc, #300]	; (8006a34 <checkAktifCalisma+0x5d0>)
 8006908:	2201      	movs	r2, #1
 800690a:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 800690c:	4b50      	ldr	r3, [pc, #320]	; (8006a50 <checkAktifCalisma+0x5ec>)
 800690e:	2201      	movs	r2, #1
 8006910:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 8006912:	4b50      	ldr	r3, [pc, #320]	; (8006a54 <checkAktifCalisma+0x5f0>)
 8006914:	2201      	movs	r2, #1
 8006916:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8006918:	4b46      	ldr	r3, [pc, #280]	; (8006a34 <checkAktifCalisma+0x5d0>)
 800691a:	781b      	ldrb	r3, [r3, #0]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d033      	beq.n	8006988 <checkAktifCalisma+0x524>
 8006920:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006924:	483e      	ldr	r0, [pc, #248]	; (8006a20 <checkAktifCalisma+0x5bc>)
 8006926:	f003 f90b 	bl	8009b40 <HAL_GPIO_ReadPin>
 800692a:	4603      	mov	r3, r0
 800692c:	2b01      	cmp	r3, #1
 800692e:	d106      	bne.n	800693e <checkAktifCalisma+0x4da>
 8006930:	4b3c      	ldr	r3, [pc, #240]	; (8006a24 <checkAktifCalisma+0x5c0>)
 8006932:	781b      	ldrb	r3, [r3, #0]
 8006934:	f083 0301 	eor.w	r3, r3, #1
 8006938:	b2db      	uxtb	r3, r3
 800693a:	2b00      	cmp	r3, #0
 800693c:	d10a      	bne.n	8006954 <checkAktifCalisma+0x4f0>
 800693e:	2104      	movs	r1, #4
 8006940:	483a      	ldr	r0, [pc, #232]	; (8006a2c <checkAktifCalisma+0x5c8>)
 8006942:	f003 f8fd 	bl	8009b40 <HAL_GPIO_ReadPin>
 8006946:	4603      	mov	r3, r0
 8006948:	2b01      	cmp	r3, #1
 800694a:	d11d      	bne.n	8006988 <checkAktifCalisma+0x524>
 800694c:	4b38      	ldr	r3, [pc, #224]	; (8006a30 <checkAktifCalisma+0x5cc>)
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d019      	beq.n	8006988 <checkAktifCalisma+0x524>
 8006954:	4b30      	ldr	r3, [pc, #192]	; (8006a18 <checkAktifCalisma+0x5b4>)
 8006956:	781b      	ldrb	r3, [r3, #0]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d015      	beq.n	8006988 <checkAktifCalisma+0x524>
 800695c:	4b2f      	ldr	r3, [pc, #188]	; (8006a1c <checkAktifCalisma+0x5b8>)
 800695e:	781b      	ldrb	r3, [r3, #0]
 8006960:	2b00      	cmp	r3, #0
 8006962:	d011      	beq.n	8006988 <checkAktifCalisma+0x524>
 8006964:	4b2a      	ldr	r3, [pc, #168]	; (8006a10 <checkAktifCalisma+0x5ac>)
 8006966:	781b      	ldrb	r3, [r3, #0]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d00d      	beq.n	8006988 <checkAktifCalisma+0x524>
 800696c:	4b3a      	ldr	r3, [pc, #232]	; (8006a58 <checkAktifCalisma+0x5f4>)
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	f083 0301 	eor.w	r3, r3, #1
 8006974:	b2db      	uxtb	r3, r3
 8006976:	2b00      	cmp	r3, #0
 8006978:	d006      	beq.n	8006988 <checkAktifCalisma+0x524>
			timer2=millis;
 800697a:	4b38      	ldr	r3, [pc, #224]	; (8006a5c <checkAktifCalisma+0x5f8>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a38      	ldr	r2, [pc, #224]	; (8006a60 <checkAktifCalisma+0x5fc>)
 8006980:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 8006982:	4b35      	ldr	r3, [pc, #212]	; (8006a58 <checkAktifCalisma+0x5f4>)
 8006984:	2201      	movs	r2, #1
 8006986:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8006988:	4b34      	ldr	r3, [pc, #208]	; (8006a5c <checkAktifCalisma+0x5f8>)
 800698a:	681a      	ldr	r2, [r3, #0]
 800698c:	4b34      	ldr	r3, [pc, #208]	; (8006a60 <checkAktifCalisma+0x5fc>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	4a34      	ldr	r2, [pc, #208]	; (8006a64 <checkAktifCalisma+0x600>)
 8006994:	7812      	ldrb	r2, [r2, #0]
 8006996:	4293      	cmp	r3, r2
 8006998:	d303      	bcc.n	80069a2 <checkAktifCalisma+0x53e>
 800699a:	4b2f      	ldr	r3, [pc, #188]	; (8006a58 <checkAktifCalisma+0x5f4>)
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d114      	bne.n	80069cc <checkAktifCalisma+0x568>
 80069a2:	4b1d      	ldr	r3, [pc, #116]	; (8006a18 <checkAktifCalisma+0x5b4>)
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	f083 0301 	eor.w	r3, r3, #1
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d10d      	bne.n	80069cc <checkAktifCalisma+0x568>
 80069b0:	4b1a      	ldr	r3, [pc, #104]	; (8006a1c <checkAktifCalisma+0x5b8>)
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	f083 0301 	eor.w	r3, r3, #1
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d106      	bne.n	80069cc <checkAktifCalisma+0x568>
 80069be:	4b14      	ldr	r3, [pc, #80]	; (8006a10 <checkAktifCalisma+0x5ac>)
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	f083 0301 	eor.w	r3, r3, #1
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d00a      	beq.n	80069e2 <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80069cc:	2200      	movs	r2, #0
 80069ce:	2102      	movs	r1, #2
 80069d0:	4813      	ldr	r0, [pc, #76]	; (8006a20 <checkAktifCalisma+0x5bc>)
 80069d2:	f003 f8cc 	bl	8009b6e <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 80069d6:	4b17      	ldr	r3, [pc, #92]	; (8006a34 <checkAktifCalisma+0x5d0>)
 80069d8:	2200      	movs	r2, #0
 80069da:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 80069dc:	4b1e      	ldr	r3, [pc, #120]	; (8006a58 <checkAktifCalisma+0x5f4>)
 80069de:	2200      	movs	r2, #0
 80069e0:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 80069e2:	4b14      	ldr	r3, [pc, #80]	; (8006a34 <checkAktifCalisma+0x5d0>)
 80069e4:	781b      	ldrb	r3, [r3, #0]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d040      	beq.n	8006a6c <checkAktifCalisma+0x608>
 80069ea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80069ee:	480f      	ldr	r0, [pc, #60]	; (8006a2c <checkAktifCalisma+0x5c8>)
 80069f0:	f003 f8a6 	bl	8009b40 <HAL_GPIO_ReadPin>
 80069f4:	4603      	mov	r3, r0
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d138      	bne.n	8006a6c <checkAktifCalisma+0x608>
 80069fa:	4b1b      	ldr	r3, [pc, #108]	; (8006a68 <checkAktifCalisma+0x604>)
 80069fc:	781b      	ldrb	r3, [r3, #0]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d034      	beq.n	8006a6c <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8006a02:	2201      	movs	r2, #1
 8006a04:	2101      	movs	r1, #1
 8006a06:	4806      	ldr	r0, [pc, #24]	; (8006a20 <checkAktifCalisma+0x5bc>)
 8006a08:	f003 f8b1 	bl	8009b6e <HAL_GPIO_WritePin>
 8006a0c:	e033      	b.n	8006a76 <checkAktifCalisma+0x612>
 8006a0e:	bf00      	nop
 8006a10:	20000d8c 	.word	0x20000d8c
 8006a14:	20000d52 	.word	0x20000d52
 8006a18:	20000d87 	.word	0x20000d87
 8006a1c:	20000d88 	.word	0x20000d88
 8006a20:	40010c00 	.word	0x40010c00
 8006a24:	20000d72 	.word	0x20000d72
 8006a28:	20000d86 	.word	0x20000d86
 8006a2c:	40011000 	.word	0x40011000
 8006a30:	20000d3b 	.word	0x20000d3b
 8006a34:	20000d6d 	.word	0x20000d6d
 8006a38:	20000d6a 	.word	0x20000d6a
 8006a3c:	20000d6e 	.word	0x20000d6e
 8006a40:	20000d6b 	.word	0x20000d6b
 8006a44:	20000d6c 	.word	0x20000d6c
 8006a48:	20000d6f 	.word	0x20000d6f
 8006a4c:	20000d70 	.word	0x20000d70
 8006a50:	20000d75 	.word	0x20000d75
 8006a54:	20000d96 	.word	0x20000d96
 8006a58:	20000d65 	.word	0x20000d65
 8006a5c:	20000cc0 	.word	0x20000cc0
 8006a60:	20000ccc 	.word	0x20000ccc
 8006a64:	20000d4a 	.word	0x20000d4a
 8006a68:	20000d3a 	.word	0x20000d3a
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	2101      	movs	r1, #1
 8006a70:	4836      	ldr	r0, [pc, #216]	; (8006b4c <checkAktifCalisma+0x6e8>)
 8006a72:	f003 f87c 	bl	8009b6e <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 8006a76:	4b36      	ldr	r3, [pc, #216]	; (8006b50 <checkAktifCalisma+0x6ec>)
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	f040 8080 	bne.w	8006b80 <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8006a80:	4b34      	ldr	r3, [pc, #208]	; (8006b54 <checkAktifCalisma+0x6f0>)
 8006a82:	781b      	ldrb	r3, [r3, #0]
 8006a84:	2b01      	cmp	r3, #1
 8006a86:	d003      	beq.n	8006a90 <checkAktifCalisma+0x62c>
 8006a88:	4b32      	ldr	r3, [pc, #200]	; (8006b54 <checkAktifCalisma+0x6f0>)
 8006a8a:	781b      	ldrb	r3, [r3, #0]
 8006a8c:	2b02      	cmp	r3, #2
 8006a8e:	d177      	bne.n	8006b80 <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 8006a90:	4b31      	ldr	r3, [pc, #196]	; (8006b58 <checkAktifCalisma+0x6f4>)
 8006a92:	781b      	ldrb	r3, [r3, #0]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d073      	beq.n	8006b80 <checkAktifCalisma+0x71c>
 8006a98:	4b30      	ldr	r3, [pc, #192]	; (8006b5c <checkAktifCalisma+0x6f8>)
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d06f      	beq.n	8006b80 <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8006aa0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006aa4:	4829      	ldr	r0, [pc, #164]	; (8006b4c <checkAktifCalisma+0x6e8>)
 8006aa6:	f003 f84b 	bl	8009b40 <HAL_GPIO_ReadPin>
 8006aaa:	4603      	mov	r3, r0
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d167      	bne.n	8006b80 <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8006ab0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006ab4:	482a      	ldr	r0, [pc, #168]	; (8006b60 <checkAktifCalisma+0x6fc>)
 8006ab6:	f003 f843 	bl	8009b40 <HAL_GPIO_ReadPin>
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d003      	beq.n	8006ac8 <checkAktifCalisma+0x664>
 8006ac0:	4b28      	ldr	r3, [pc, #160]	; (8006b64 <checkAktifCalisma+0x700>)
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d15b      	bne.n	8006b80 <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8006ac8:	2140      	movs	r1, #64	; 0x40
 8006aca:	4825      	ldr	r0, [pc, #148]	; (8006b60 <checkAktifCalisma+0x6fc>)
 8006acc:	f003 f838 	bl	8009b40 <HAL_GPIO_ReadPin>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b01      	cmp	r3, #1
 8006ad4:	d10f      	bne.n	8006af6 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8006ad6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006ada:	481c      	ldr	r0, [pc, #112]	; (8006b4c <checkAktifCalisma+0x6e8>)
 8006adc:	f003 f830 	bl	8009b40 <HAL_GPIO_ReadPin>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b01      	cmp	r3, #1
 8006ae4:	d107      	bne.n	8006af6 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8006ae6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006aea:	4818      	ldr	r0, [pc, #96]	; (8006b4c <checkAktifCalisma+0x6e8>)
 8006aec:	f003 f828 	bl	8009b40 <HAL_GPIO_ReadPin>
 8006af0:	4603      	mov	r3, r0
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d003      	beq.n	8006afe <checkAktifCalisma+0x69a>
 8006af6:	4b1c      	ldr	r3, [pc, #112]	; (8006b68 <checkAktifCalisma+0x704>)
 8006af8:	781b      	ldrb	r3, [r3, #0]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d040      	beq.n	8006b80 <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 8006afe:	4b1b      	ldr	r3, [pc, #108]	; (8006b6c <checkAktifCalisma+0x708>)
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	f083 0301 	eor.w	r3, r3, #1
 8006b06:	b2db      	uxtb	r3, r3
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d039      	beq.n	8006b80 <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 8006b0c:	4b18      	ldr	r3, [pc, #96]	; (8006b70 <checkAktifCalisma+0x70c>)
 8006b0e:	781b      	ldrb	r3, [r3, #0]
 8006b10:	f083 0301 	eor.w	r3, r3, #1
 8006b14:	b2db      	uxtb	r3, r3
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d032      	beq.n	8006b80 <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 8006b1a:	4b16      	ldr	r3, [pc, #88]	; (8006b74 <checkAktifCalisma+0x710>)
 8006b1c:	781b      	ldrb	r3, [r3, #0]
 8006b1e:	f083 0301 	eor.w	r3, r3, #1
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d02b      	beq.n	8006b80 <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 8006b28:	4b13      	ldr	r3, [pc, #76]	; (8006b78 <checkAktifCalisma+0x714>)
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	f083 0301 	eor.w	r3, r3, #1
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d024      	beq.n	8006b80 <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 8006b36:	4b11      	ldr	r3, [pc, #68]	; (8006b7c <checkAktifCalisma+0x718>)
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	f083 0301 	eor.w	r3, r3, #1
 8006b3e:	b2db      	uxtb	r3, r3
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d01d      	beq.n	8006b80 <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 8006b44:	4b08      	ldr	r3, [pc, #32]	; (8006b68 <checkAktifCalisma+0x704>)
 8006b46:	2201      	movs	r2, #1
 8006b48:	701a      	strb	r2, [r3, #0]
 8006b4a:	e01c      	b.n	8006b86 <checkAktifCalisma+0x722>
 8006b4c:	40010c00 	.word	0x40010c00
 8006b50:	20000d52 	.word	0x20000d52
 8006b54:	20000d44 	.word	0x20000d44
 8006b58:	20000d87 	.word	0x20000d87
 8006b5c:	20000d88 	.word	0x20000d88
 8006b60:	40011000 	.word	0x40011000
 8006b64:	20000d45 	.word	0x20000d45
 8006b68:	20000d6b 	.word	0x20000d6b
 8006b6c:	20000d6a 	.word	0x20000d6a
 8006b70:	20000d6e 	.word	0x20000d6e
 8006b74:	20000d6d 	.word	0x20000d6d
 8006b78:	20000d6c 	.word	0x20000d6c
 8006b7c:	20000d70 	.word	0x20000d70
		} else {
			devmotoryukaricalisiyor=0;
 8006b80:	4b64      	ldr	r3, [pc, #400]	; (8006d14 <checkAktifCalisma+0x8b0>)
 8006b82:	2200      	movs	r2, #0
 8006b84:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 8006b86:	4b63      	ldr	r3, [pc, #396]	; (8006d14 <checkAktifCalisma+0x8b0>)
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d007      	beq.n	8006b9e <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8006b8e:	2201      	movs	r2, #1
 8006b90:	2120      	movs	r1, #32
 8006b92:	4861      	ldr	r0, [pc, #388]	; (8006d18 <checkAktifCalisma+0x8b4>)
 8006b94:	f002 ffeb 	bl	8009b6e <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 8006b98:	4b60      	ldr	r3, [pc, #384]	; (8006d1c <checkAktifCalisma+0x8b8>)
 8006b9a:	2201      	movs	r2, #1
 8006b9c:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8006b9e:	4b5f      	ldr	r3, [pc, #380]	; (8006d1c <checkAktifCalisma+0x8b8>)
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d025      	beq.n	8006bf2 <checkAktifCalisma+0x78e>
 8006ba6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006baa:	485d      	ldr	r0, [pc, #372]	; (8006d20 <checkAktifCalisma+0x8bc>)
 8006bac:	f002 ffc8 	bl	8009b40 <HAL_GPIO_ReadPin>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b01      	cmp	r3, #1
 8006bb4:	d007      	beq.n	8006bc6 <checkAktifCalisma+0x762>
 8006bb6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006bba:	4857      	ldr	r0, [pc, #348]	; (8006d18 <checkAktifCalisma+0x8b4>)
 8006bbc:	f002 ffc0 	bl	8009b40 <HAL_GPIO_ReadPin>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	2b01      	cmp	r3, #1
 8006bc4:	d115      	bne.n	8006bf2 <checkAktifCalisma+0x78e>
 8006bc6:	4b57      	ldr	r3, [pc, #348]	; (8006d24 <checkAktifCalisma+0x8c0>)
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d011      	beq.n	8006bf2 <checkAktifCalisma+0x78e>
 8006bce:	4b56      	ldr	r3, [pc, #344]	; (8006d28 <checkAktifCalisma+0x8c4>)
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d00d      	beq.n	8006bf2 <checkAktifCalisma+0x78e>
 8006bd6:	4b55      	ldr	r3, [pc, #340]	; (8006d2c <checkAktifCalisma+0x8c8>)
 8006bd8:	781b      	ldrb	r3, [r3, #0]
 8006bda:	f083 0301 	eor.w	r3, r3, #1
 8006bde:	b2db      	uxtb	r3, r3
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d006      	beq.n	8006bf2 <checkAktifCalisma+0x78e>
			timer2=millis;
 8006be4:	4b52      	ldr	r3, [pc, #328]	; (8006d30 <checkAktifCalisma+0x8cc>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a52      	ldr	r2, [pc, #328]	; (8006d34 <checkAktifCalisma+0x8d0>)
 8006bea:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 8006bec:	4b4f      	ldr	r3, [pc, #316]	; (8006d2c <checkAktifCalisma+0x8c8>)
 8006bee:	2201      	movs	r2, #1
 8006bf0:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8006bf2:	4b4f      	ldr	r3, [pc, #316]	; (8006d30 <checkAktifCalisma+0x8cc>)
 8006bf4:	681a      	ldr	r2, [r3, #0]
 8006bf6:	4b4f      	ldr	r3, [pc, #316]	; (8006d34 <checkAktifCalisma+0x8d0>)
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	1ad3      	subs	r3, r2, r3
 8006bfc:	4a4e      	ldr	r2, [pc, #312]	; (8006d38 <checkAktifCalisma+0x8d4>)
 8006bfe:	7812      	ldrb	r2, [r2, #0]
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d303      	bcc.n	8006c0c <checkAktifCalisma+0x7a8>
 8006c04:	4b49      	ldr	r3, [pc, #292]	; (8006d2c <checkAktifCalisma+0x8c8>)
 8006c06:	781b      	ldrb	r3, [r3, #0]
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d10d      	bne.n	8006c28 <checkAktifCalisma+0x7c4>
 8006c0c:	4b45      	ldr	r3, [pc, #276]	; (8006d24 <checkAktifCalisma+0x8c0>)
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	f083 0301 	eor.w	r3, r3, #1
 8006c14:	b2db      	uxtb	r3, r3
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d106      	bne.n	8006c28 <checkAktifCalisma+0x7c4>
 8006c1a:	4b43      	ldr	r3, [pc, #268]	; (8006d28 <checkAktifCalisma+0x8c4>)
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	f083 0301 	eor.w	r3, r3, #1
 8006c22:	b2db      	uxtb	r3, r3
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d00a      	beq.n	8006c3e <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006c28:	2200      	movs	r2, #0
 8006c2a:	2120      	movs	r1, #32
 8006c2c:	483a      	ldr	r0, [pc, #232]	; (8006d18 <checkAktifCalisma+0x8b4>)
 8006c2e:	f002 ff9e 	bl	8009b6e <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 8006c32:	4b3a      	ldr	r3, [pc, #232]	; (8006d1c <checkAktifCalisma+0x8b8>)
 8006c34:	2200      	movs	r2, #0
 8006c36:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 8006c38:	4b3c      	ldr	r3, [pc, #240]	; (8006d2c <checkAktifCalisma+0x8c8>)
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 8006c3e:	4b3f      	ldr	r3, [pc, #252]	; (8006d3c <checkAktifCalisma+0x8d8>)
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	f040 8088 	bne.w	8006d58 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8006c48:	4b3d      	ldr	r3, [pc, #244]	; (8006d40 <checkAktifCalisma+0x8dc>)
 8006c4a:	781b      	ldrb	r3, [r3, #0]
 8006c4c:	2b01      	cmp	r3, #1
 8006c4e:	d003      	beq.n	8006c58 <checkAktifCalisma+0x7f4>
 8006c50:	4b3b      	ldr	r3, [pc, #236]	; (8006d40 <checkAktifCalisma+0x8dc>)
 8006c52:	781b      	ldrb	r3, [r3, #0]
 8006c54:	2b02      	cmp	r3, #2
 8006c56:	d17f      	bne.n	8006d58 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 8006c58:	4b32      	ldr	r3, [pc, #200]	; (8006d24 <checkAktifCalisma+0x8c0>)
 8006c5a:	781b      	ldrb	r3, [r3, #0]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d07b      	beq.n	8006d58 <checkAktifCalisma+0x8f4>
 8006c60:	4b31      	ldr	r3, [pc, #196]	; (8006d28 <checkAktifCalisma+0x8c4>)
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d077      	beq.n	8006d58 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8006c68:	2140      	movs	r1, #64	; 0x40
 8006c6a:	482b      	ldr	r0, [pc, #172]	; (8006d18 <checkAktifCalisma+0x8b4>)
 8006c6c:	f002 ff68 	bl	8009b40 <HAL_GPIO_ReadPin>
 8006c70:	4603      	mov	r3, r0
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d170      	bne.n	8006d58 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8006c76:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006c7a:	4827      	ldr	r0, [pc, #156]	; (8006d18 <checkAktifCalisma+0x8b4>)
 8006c7c:	f002 ff60 	bl	8009b40 <HAL_GPIO_ReadPin>
 8006c80:	4603      	mov	r3, r0
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d003      	beq.n	8006c8e <checkAktifCalisma+0x82a>
 8006c86:	4b2f      	ldr	r3, [pc, #188]	; (8006d44 <checkAktifCalisma+0x8e0>)
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d164      	bne.n	8006d58 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8006c8e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006c92:	4823      	ldr	r0, [pc, #140]	; (8006d20 <checkAktifCalisma+0x8bc>)
 8006c94:	f002 ff54 	bl	8009b40 <HAL_GPIO_ReadPin>
 8006c98:	4603      	mov	r3, r0
 8006c9a:	2b01      	cmp	r3, #1
 8006c9c:	d10f      	bne.n	8006cbe <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8006c9e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006ca2:	481f      	ldr	r0, [pc, #124]	; (8006d20 <checkAktifCalisma+0x8bc>)
 8006ca4:	f002 ff4c 	bl	8009b40 <HAL_GPIO_ReadPin>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	d107      	bne.n	8006cbe <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8006cae:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006cb2:	481b      	ldr	r0, [pc, #108]	; (8006d20 <checkAktifCalisma+0x8bc>)
 8006cb4:	f002 ff44 	bl	8009b40 <HAL_GPIO_ReadPin>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	2b01      	cmp	r3, #1
 8006cbc:	d003      	beq.n	8006cc6 <checkAktifCalisma+0x862>
 8006cbe:	4b22      	ldr	r3, [pc, #136]	; (8006d48 <checkAktifCalisma+0x8e4>)
 8006cc0:	781b      	ldrb	r3, [r3, #0]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d048      	beq.n	8006d58 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 8006cc6:	4b21      	ldr	r3, [pc, #132]	; (8006d4c <checkAktifCalisma+0x8e8>)
 8006cc8:	781b      	ldrb	r3, [r3, #0]
 8006cca:	f083 0301 	eor.w	r3, r3, #1
 8006cce:	b2db      	uxtb	r3, r3
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d041      	beq.n	8006d58 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 8006cd4:	4b1e      	ldr	r3, [pc, #120]	; (8006d50 <checkAktifCalisma+0x8ec>)
 8006cd6:	781b      	ldrb	r3, [r3, #0]
 8006cd8:	f083 0301 	eor.w	r3, r3, #1
 8006cdc:	b2db      	uxtb	r3, r3
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d03a      	beq.n	8006d58 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 8006ce2:	4b1c      	ldr	r3, [pc, #112]	; (8006d54 <checkAktifCalisma+0x8f0>)
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	f083 0301 	eor.w	r3, r3, #1
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d033      	beq.n	8006d58 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 8006cf0:	4b0a      	ldr	r3, [pc, #40]	; (8006d1c <checkAktifCalisma+0x8b8>)
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	f083 0301 	eor.w	r3, r3, #1
 8006cf8:	b2db      	uxtb	r3, r3
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d02c      	beq.n	8006d58 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 8006cfe:	4b05      	ldr	r3, [pc, #20]	; (8006d14 <checkAktifCalisma+0x8b0>)
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	f083 0301 	eor.w	r3, r3, #1
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d025      	beq.n	8006d58 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 8006d0c:	4b0e      	ldr	r3, [pc, #56]	; (8006d48 <checkAktifCalisma+0x8e4>)
 8006d0e:	2201      	movs	r2, #1
 8006d10:	701a      	strb	r2, [r3, #0]
 8006d12:	e024      	b.n	8006d5e <checkAktifCalisma+0x8fa>
 8006d14:	20000d6b 	.word	0x20000d6b
 8006d18:	40011000 	.word	0x40011000
 8006d1c:	20000d6f 	.word	0x20000d6f
 8006d20:	40010c00 	.word	0x40010c00
 8006d24:	20000d87 	.word	0x20000d87
 8006d28:	20000d88 	.word	0x20000d88
 8006d2c:	20000d67 	.word	0x20000d67
 8006d30:	20000cc0 	.word	0x20000cc0
 8006d34:	20000ccc 	.word	0x20000ccc
 8006d38:	20000d4b 	.word	0x20000d4b
 8006d3c:	20000d52 	.word	0x20000d52
 8006d40:	20000d44 	.word	0x20000d44
 8006d44:	20000d46 	.word	0x20000d46
 8006d48:	20000d6c 	.word	0x20000d6c
 8006d4c:	20000d6a 	.word	0x20000d6a
 8006d50:	20000d6e 	.word	0x20000d6e
 8006d54:	20000d6d 	.word	0x20000d6d
		} else {
			devmotorasagicalisiyor=0;
 8006d58:	4b96      	ldr	r3, [pc, #600]	; (8006fb4 <checkAktifCalisma+0xb50>)
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 8006d5e:	4b95      	ldr	r3, [pc, #596]	; (8006fb4 <checkAktifCalisma+0xb50>)
 8006d60:	781b      	ldrb	r3, [r3, #0]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d007      	beq.n	8006d76 <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8006d66:	2201      	movs	r2, #1
 8006d68:	2110      	movs	r1, #16
 8006d6a:	4893      	ldr	r0, [pc, #588]	; (8006fb8 <checkAktifCalisma+0xb54>)
 8006d6c:	f002 feff 	bl	8009b6e <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 8006d70:	4b92      	ldr	r3, [pc, #584]	; (8006fbc <checkAktifCalisma+0xb58>)
 8006d72:	2201      	movs	r2, #1
 8006d74:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8006d76:	4b91      	ldr	r3, [pc, #580]	; (8006fbc <checkAktifCalisma+0xb58>)
 8006d78:	781b      	ldrb	r3, [r3, #0]
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d024      	beq.n	8006dc8 <checkAktifCalisma+0x964>
 8006d7e:	2140      	movs	r1, #64	; 0x40
 8006d80:	488d      	ldr	r0, [pc, #564]	; (8006fb8 <checkAktifCalisma+0xb54>)
 8006d82:	f002 fedd 	bl	8009b40 <HAL_GPIO_ReadPin>
 8006d86:	4603      	mov	r3, r0
 8006d88:	2b01      	cmp	r3, #1
 8006d8a:	d007      	beq.n	8006d9c <checkAktifCalisma+0x938>
 8006d8c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006d90:	4889      	ldr	r0, [pc, #548]	; (8006fb8 <checkAktifCalisma+0xb54>)
 8006d92:	f002 fed5 	bl	8009b40 <HAL_GPIO_ReadPin>
 8006d96:	4603      	mov	r3, r0
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d115      	bne.n	8006dc8 <checkAktifCalisma+0x964>
 8006d9c:	4b88      	ldr	r3, [pc, #544]	; (8006fc0 <checkAktifCalisma+0xb5c>)
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d011      	beq.n	8006dc8 <checkAktifCalisma+0x964>
 8006da4:	4b87      	ldr	r3, [pc, #540]	; (8006fc4 <checkAktifCalisma+0xb60>)
 8006da6:	781b      	ldrb	r3, [r3, #0]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d00d      	beq.n	8006dc8 <checkAktifCalisma+0x964>
 8006dac:	4b86      	ldr	r3, [pc, #536]	; (8006fc8 <checkAktifCalisma+0xb64>)
 8006dae:	781b      	ldrb	r3, [r3, #0]
 8006db0:	f083 0301 	eor.w	r3, r3, #1
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d006      	beq.n	8006dc8 <checkAktifCalisma+0x964>
			timer2=millis;
 8006dba:	4b84      	ldr	r3, [pc, #528]	; (8006fcc <checkAktifCalisma+0xb68>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4a84      	ldr	r2, [pc, #528]	; (8006fd0 <checkAktifCalisma+0xb6c>)
 8006dc0:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 8006dc2:	4b81      	ldr	r3, [pc, #516]	; (8006fc8 <checkAktifCalisma+0xb64>)
 8006dc4:	2201      	movs	r2, #1
 8006dc6:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8006dc8:	4b80      	ldr	r3, [pc, #512]	; (8006fcc <checkAktifCalisma+0xb68>)
 8006dca:	681a      	ldr	r2, [r3, #0]
 8006dcc:	4b80      	ldr	r3, [pc, #512]	; (8006fd0 <checkAktifCalisma+0xb6c>)
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	1ad3      	subs	r3, r2, r3
 8006dd2:	4a80      	ldr	r2, [pc, #512]	; (8006fd4 <checkAktifCalisma+0xb70>)
 8006dd4:	7812      	ldrb	r2, [r2, #0]
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d303      	bcc.n	8006de2 <checkAktifCalisma+0x97e>
 8006dda:	4b7b      	ldr	r3, [pc, #492]	; (8006fc8 <checkAktifCalisma+0xb64>)
 8006ddc:	781b      	ldrb	r3, [r3, #0]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d10d      	bne.n	8006dfe <checkAktifCalisma+0x99a>
 8006de2:	4b77      	ldr	r3, [pc, #476]	; (8006fc0 <checkAktifCalisma+0xb5c>)
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	f083 0301 	eor.w	r3, r3, #1
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d106      	bne.n	8006dfe <checkAktifCalisma+0x99a>
 8006df0:	4b74      	ldr	r3, [pc, #464]	; (8006fc4 <checkAktifCalisma+0xb60>)
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	f083 0301 	eor.w	r3, r3, #1
 8006df8:	b2db      	uxtb	r3, r3
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d00a      	beq.n	8006e14 <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006dfe:	2200      	movs	r2, #0
 8006e00:	2110      	movs	r1, #16
 8006e02:	486d      	ldr	r0, [pc, #436]	; (8006fb8 <checkAktifCalisma+0xb54>)
 8006e04:	f002 feb3 	bl	8009b6e <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 8006e08:	4b6c      	ldr	r3, [pc, #432]	; (8006fbc <checkAktifCalisma+0xb58>)
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 8006e0e:	4b6e      	ldr	r3, [pc, #440]	; (8006fc8 <checkAktifCalisma+0xb64>)
 8006e10:	2200      	movs	r2, #0
 8006e12:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8006e14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006e18:	486f      	ldr	r0, [pc, #444]	; (8006fd8 <checkAktifCalisma+0xb74>)
 8006e1a:	f002 fe91 	bl	8009b40 <HAL_GPIO_ReadPin>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d120      	bne.n	8006e66 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8006e24:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006e28:	486b      	ldr	r0, [pc, #428]	; (8006fd8 <checkAktifCalisma+0xb74>)
 8006e2a:	f002 fe89 	bl	8009b40 <HAL_GPIO_ReadPin>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d118      	bne.n	8006e66 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8006e34:	2104      	movs	r1, #4
 8006e36:	4868      	ldr	r0, [pc, #416]	; (8006fd8 <checkAktifCalisma+0xb74>)
 8006e38:	f002 fe82 	bl	8009b40 <HAL_GPIO_ReadPin>
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d111      	bne.n	8006e66 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8006e42:	2102      	movs	r1, #2
 8006e44:	4864      	ldr	r0, [pc, #400]	; (8006fd8 <checkAktifCalisma+0xb74>)
 8006e46:	f002 fe7b 	bl	8009b40 <HAL_GPIO_ReadPin>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d10a      	bne.n	8006e66 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8006e50:	2101      	movs	r1, #1
 8006e52:	4861      	ldr	r0, [pc, #388]	; (8006fd8 <checkAktifCalisma+0xb74>)
 8006e54:	f002 fe74 	bl	8009b40 <HAL_GPIO_ReadPin>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d103      	bne.n	8006e66 <checkAktifCalisma+0xa02>
			makineStop=1;
 8006e5e:	4b5f      	ldr	r3, [pc, #380]	; (8006fdc <checkAktifCalisma+0xb78>)
 8006e60:	2201      	movs	r2, #1
 8006e62:	701a      	strb	r2, [r3, #0]
 8006e64:	e002      	b.n	8006e6c <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 8006e66:	4b5d      	ldr	r3, [pc, #372]	; (8006fdc <checkAktifCalisma+0xb78>)
 8006e68:	2200      	movs	r2, #0
 8006e6a:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006e6c:	4b5c      	ldr	r3, [pc, #368]	; (8006fe0 <checkAktifCalisma+0xb7c>)
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d144      	bne.n	8006efe <checkAktifCalisma+0xa9a>
 8006e74:	4b5b      	ldr	r3, [pc, #364]	; (8006fe4 <checkAktifCalisma+0xb80>)
 8006e76:	781b      	ldrb	r3, [r3, #0]
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d003      	beq.n	8006e84 <checkAktifCalisma+0xa20>
 8006e7c:	4b59      	ldr	r3, [pc, #356]	; (8006fe4 <checkAktifCalisma+0xb80>)
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	2b03      	cmp	r3, #3
 8006e82:	d13c      	bne.n	8006efe <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8006e84:	2180      	movs	r1, #128	; 0x80
 8006e86:	484c      	ldr	r0, [pc, #304]	; (8006fb8 <checkAktifCalisma+0xb54>)
 8006e88:	f002 fe5a 	bl	8009b40 <HAL_GPIO_ReadPin>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d103      	bne.n	8006e9a <checkAktifCalisma+0xa36>
 8006e92:	4b55      	ldr	r3, [pc, #340]	; (8006fe8 <checkAktifCalisma+0xb84>)
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d00b      	beq.n	8006eb2 <checkAktifCalisma+0xa4e>
 8006e9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006e9e:	484e      	ldr	r0, [pc, #312]	; (8006fd8 <checkAktifCalisma+0xb74>)
 8006ea0:	f002 fe4e 	bl	8009b40 <HAL_GPIO_ReadPin>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d129      	bne.n	8006efe <checkAktifCalisma+0xa9a>
 8006eaa:	4b4f      	ldr	r3, [pc, #316]	; (8006fe8 <checkAktifCalisma+0xb84>)
 8006eac:	781b      	ldrb	r3, [r3, #0]
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d125      	bne.n	8006efe <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8006eb2:	2104      	movs	r1, #4
 8006eb4:	4840      	ldr	r0, [pc, #256]	; (8006fb8 <checkAktifCalisma+0xb54>)
 8006eb6:	f002 fe43 	bl	8009b40 <HAL_GPIO_ReadPin>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d003      	beq.n	8006ec8 <checkAktifCalisma+0xa64>
 8006ec0:	4b4a      	ldr	r3, [pc, #296]	; (8006fec <checkAktifCalisma+0xb88>)
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d11a      	bne.n	8006efe <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006ec8:	2102      	movs	r1, #2
 8006eca:	483b      	ldr	r0, [pc, #236]	; (8006fb8 <checkAktifCalisma+0xb54>)
 8006ecc:	f002 fe38 	bl	8009b40 <HAL_GPIO_ReadPin>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d113      	bne.n	8006efe <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 8006ed6:	4b46      	ldr	r3, [pc, #280]	; (8006ff0 <checkAktifCalisma+0xb8c>)
 8006ed8:	781b      	ldrb	r3, [r3, #0]
 8006eda:	f083 0301 	eor.w	r3, r3, #1
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d00c      	beq.n	8006efe <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 8006ee4:	4b3d      	ldr	r3, [pc, #244]	; (8006fdc <checkAktifCalisma+0xb78>)
 8006ee6:	781b      	ldrb	r3, [r3, #0]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d008      	beq.n	8006efe <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 8006eec:	4b41      	ldr	r3, [pc, #260]	; (8006ff4 <checkAktifCalisma+0xb90>)
 8006eee:	2201      	movs	r2, #1
 8006ef0:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8006ef2:	4b36      	ldr	r3, [pc, #216]	; (8006fcc <checkAktifCalisma+0xb68>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a40      	ldr	r2, [pc, #256]	; (8006ff8 <checkAktifCalisma+0xb94>)
 8006ef8:	6013      	str	r3, [r2, #0]
			bekle();
 8006efa:	f7ff f87d 	bl	8005ff8 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8006efe:	4b33      	ldr	r3, [pc, #204]	; (8006fcc <checkAktifCalisma+0xb68>)
 8006f00:	681a      	ldr	r2, [r3, #0]
 8006f02:	4b3d      	ldr	r3, [pc, #244]	; (8006ff8 <checkAktifCalisma+0xb94>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	1ad3      	subs	r3, r2, r3
 8006f08:	4a3c      	ldr	r2, [pc, #240]	; (8006ffc <checkAktifCalisma+0xb98>)
 8006f0a:	7812      	ldrb	r2, [r2, #0]
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d211      	bcs.n	8006f34 <checkAktifCalisma+0xad0>
 8006f10:	2104      	movs	r1, #4
 8006f12:	4829      	ldr	r0, [pc, #164]	; (8006fb8 <checkAktifCalisma+0xb54>)
 8006f14:	f002 fe14 	bl	8009b40 <HAL_GPIO_ReadPin>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d00a      	beq.n	8006f34 <checkAktifCalisma+0xad0>
 8006f1e:	4b33      	ldr	r3, [pc, #204]	; (8006fec <checkAktifCalisma+0xb88>)
 8006f20:	781b      	ldrb	r3, [r3, #0]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d006      	beq.n	8006f34 <checkAktifCalisma+0xad0>
 8006f26:	4b2d      	ldr	r3, [pc, #180]	; (8006fdc <checkAktifCalisma+0xb78>)
 8006f28:	781b      	ldrb	r3, [r3, #0]
 8006f2a:	f083 0301 	eor.w	r3, r3, #1
 8006f2e:	b2db      	uxtb	r3, r3
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d002      	beq.n	8006f3a <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 8006f34:	4b2f      	ldr	r3, [pc, #188]	; (8006ff4 <checkAktifCalisma+0xb90>)
 8006f36:	2200      	movs	r2, #0
 8006f38:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006f3a:	4b29      	ldr	r3, [pc, #164]	; (8006fe0 <checkAktifCalisma+0xb7c>)
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	2b01      	cmp	r3, #1
 8006f40:	d160      	bne.n	8007004 <checkAktifCalisma+0xba0>
 8006f42:	4b28      	ldr	r3, [pc, #160]	; (8006fe4 <checkAktifCalisma+0xb80>)
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	2b01      	cmp	r3, #1
 8006f48:	d003      	beq.n	8006f52 <checkAktifCalisma+0xaee>
 8006f4a:	4b26      	ldr	r3, [pc, #152]	; (8006fe4 <checkAktifCalisma+0xb80>)
 8006f4c:	781b      	ldrb	r3, [r3, #0]
 8006f4e:	2b03      	cmp	r3, #3
 8006f50:	d158      	bne.n	8007004 <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8006f52:	2104      	movs	r1, #4
 8006f54:	4818      	ldr	r0, [pc, #96]	; (8006fb8 <checkAktifCalisma+0xb54>)
 8006f56:	f002 fdf3 	bl	8009b40 <HAL_GPIO_ReadPin>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d003      	beq.n	8006f68 <checkAktifCalisma+0xb04>
 8006f60:	4b22      	ldr	r3, [pc, #136]	; (8006fec <checkAktifCalisma+0xb88>)
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d14d      	bne.n	8007004 <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006f68:	2102      	movs	r1, #2
 8006f6a:	4813      	ldr	r0, [pc, #76]	; (8006fb8 <checkAktifCalisma+0xb54>)
 8006f6c:	f002 fde8 	bl	8009b40 <HAL_GPIO_ReadPin>
 8006f70:	4603      	mov	r3, r0
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d146      	bne.n	8007004 <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8006f76:	2180      	movs	r1, #128	; 0x80
 8006f78:	480f      	ldr	r0, [pc, #60]	; (8006fb8 <checkAktifCalisma+0xb54>)
 8006f7a:	f002 fde1 	bl	8009b40 <HAL_GPIO_ReadPin>
 8006f7e:	4603      	mov	r3, r0
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d103      	bne.n	8006f8c <checkAktifCalisma+0xb28>
 8006f84:	4b18      	ldr	r3, [pc, #96]	; (8006fe8 <checkAktifCalisma+0xb84>)
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d00b      	beq.n	8006fa4 <checkAktifCalisma+0xb40>
 8006f8c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006f90:	4811      	ldr	r0, [pc, #68]	; (8006fd8 <checkAktifCalisma+0xb74>)
 8006f92:	f002 fdd5 	bl	8009b40 <HAL_GPIO_ReadPin>
 8006f96:	4603      	mov	r3, r0
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d133      	bne.n	8007004 <checkAktifCalisma+0xba0>
 8006f9c:	4b12      	ldr	r3, [pc, #72]	; (8006fe8 <checkAktifCalisma+0xb84>)
 8006f9e:	781b      	ldrb	r3, [r3, #0]
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d12f      	bne.n	8007004 <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 8006fa4:	4b0d      	ldr	r3, [pc, #52]	; (8006fdc <checkAktifCalisma+0xb78>)
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d02b      	beq.n	8007004 <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 8006fac:	4b14      	ldr	r3, [pc, #80]	; (8007000 <checkAktifCalisma+0xb9c>)
 8006fae:	2201      	movs	r2, #1
 8006fb0:	701a      	strb	r2, [r3, #0]
 8006fb2:	e02a      	b.n	800700a <checkAktifCalisma+0xba6>
 8006fb4:	20000d6c 	.word	0x20000d6c
 8006fb8:	40011000 	.word	0x40011000
 8006fbc:	20000d70 	.word	0x20000d70
 8006fc0:	20000d87 	.word	0x20000d87
 8006fc4:	20000d88 	.word	0x20000d88
 8006fc8:	20000d68 	.word	0x20000d68
 8006fcc:	20000cc0 	.word	0x20000cc0
 8006fd0:	20000ccc 	.word	0x20000ccc
 8006fd4:	20000d4b 	.word	0x20000d4b
 8006fd8:	40010c00 	.word	0x40010c00
 8006fdc:	20000d77 	.word	0x20000d77
 8006fe0:	20000d3e 	.word	0x20000d3e
 8006fe4:	20000d3d 	.word	0x20000d3d
 8006fe8:	20000d41 	.word	0x20000d41
 8006fec:	20000d3b 	.word	0x20000d3b
 8006ff0:	20000d64 	.word	0x20000d64
 8006ff4:	20000d78 	.word	0x20000d78
 8006ff8:	20000cc4 	.word	0x20000cc4
 8006ffc:	20000d4e 	.word	0x20000d4e
 8007000:	20000d79 	.word	0x20000d79
		} else {
			kapi1butonkontrol=0;
 8007004:	4b8b      	ldr	r3, [pc, #556]	; (8007234 <checkAktifCalisma+0xdd0>)
 8007006:	2200      	movs	r2, #0
 8007008:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800700a:	4b8b      	ldr	r3, [pc, #556]	; (8007238 <checkAktifCalisma+0xdd4>)
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	2b02      	cmp	r3, #2
 8007010:	d121      	bne.n	8007056 <checkAktifCalisma+0xbf2>
 8007012:	4b8a      	ldr	r3, [pc, #552]	; (800723c <checkAktifCalisma+0xdd8>)
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	2b01      	cmp	r3, #1
 8007018:	d003      	beq.n	8007022 <checkAktifCalisma+0xbbe>
 800701a:	4b88      	ldr	r3, [pc, #544]	; (800723c <checkAktifCalisma+0xdd8>)
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	2b03      	cmp	r3, #3
 8007020:	d119      	bne.n	8007056 <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8007022:	2104      	movs	r1, #4
 8007024:	4886      	ldr	r0, [pc, #536]	; (8007240 <checkAktifCalisma+0xddc>)
 8007026:	f002 fd8b 	bl	8009b40 <HAL_GPIO_ReadPin>
 800702a:	4603      	mov	r3, r0
 800702c:	2b01      	cmp	r3, #1
 800702e:	d003      	beq.n	8007038 <checkAktifCalisma+0xbd4>
 8007030:	4b84      	ldr	r3, [pc, #528]	; (8007244 <checkAktifCalisma+0xde0>)
 8007032:	781b      	ldrb	r3, [r3, #0]
 8007034:	2b00      	cmp	r3, #0
 8007036:	d10e      	bne.n	8007056 <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8007038:	2102      	movs	r1, #2
 800703a:	4881      	ldr	r0, [pc, #516]	; (8007240 <checkAktifCalisma+0xddc>)
 800703c:	f002 fd80 	bl	8009b40 <HAL_GPIO_ReadPin>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d107      	bne.n	8007056 <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 8007046:	4b80      	ldr	r3, [pc, #512]	; (8007248 <checkAktifCalisma+0xde4>)
 8007048:	781b      	ldrb	r3, [r3, #0]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d003      	beq.n	8007056 <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 800704e:	4b7f      	ldr	r3, [pc, #508]	; (800724c <checkAktifCalisma+0xde8>)
 8007050:	2201      	movs	r2, #1
 8007052:	701a      	strb	r2, [r3, #0]
 8007054:	e002      	b.n	800705c <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 8007056:	4b7d      	ldr	r3, [pc, #500]	; (800724c <checkAktifCalisma+0xde8>)
 8007058:	2200      	movs	r2, #0
 800705a:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 800705c:	4b75      	ldr	r3, [pc, #468]	; (8007234 <checkAktifCalisma+0xdd0>)
 800705e:	781b      	ldrb	r3, [r3, #0]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d107      	bne.n	8007074 <checkAktifCalisma+0xc10>
 8007064:	4b79      	ldr	r3, [pc, #484]	; (800724c <checkAktifCalisma+0xde8>)
 8007066:	781b      	ldrb	r3, [r3, #0]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d103      	bne.n	8007074 <checkAktifCalisma+0xc10>
 800706c:	4b78      	ldr	r3, [pc, #480]	; (8007250 <checkAktifCalisma+0xdec>)
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d005      	beq.n	8007080 <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8007074:	2201      	movs	r2, #1
 8007076:	2180      	movs	r1, #128	; 0x80
 8007078:	4876      	ldr	r0, [pc, #472]	; (8007254 <checkAktifCalisma+0xdf0>)
 800707a:	f002 fd78 	bl	8009b6e <HAL_GPIO_WritePin>
 800707e:	e004      	b.n	800708a <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007080:	2200      	movs	r2, #0
 8007082:	2180      	movs	r1, #128	; 0x80
 8007084:	4873      	ldr	r0, [pc, #460]	; (8007254 <checkAktifCalisma+0xdf0>)
 8007086:	f002 fd72 	bl	8009b6e <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800708a:	4b73      	ldr	r3, [pc, #460]	; (8007258 <checkAktifCalisma+0xdf4>)
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d141      	bne.n	8007116 <checkAktifCalisma+0xcb2>
 8007092:	4b6a      	ldr	r3, [pc, #424]	; (800723c <checkAktifCalisma+0xdd8>)
 8007094:	781b      	ldrb	r3, [r3, #0]
 8007096:	2b01      	cmp	r3, #1
 8007098:	d003      	beq.n	80070a2 <checkAktifCalisma+0xc3e>
 800709a:	4b68      	ldr	r3, [pc, #416]	; (800723c <checkAktifCalisma+0xdd8>)
 800709c:	781b      	ldrb	r3, [r3, #0]
 800709e:	2b03      	cmp	r3, #3
 80070a0:	d139      	bne.n	8007116 <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 80070a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80070a6:	4866      	ldr	r0, [pc, #408]	; (8007240 <checkAktifCalisma+0xddc>)
 80070a8:	f002 fd4a 	bl	8009b40 <HAL_GPIO_ReadPin>
 80070ac:	4603      	mov	r3, r0
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d103      	bne.n	80070ba <checkAktifCalisma+0xc56>
 80070b2:	4b6a      	ldr	r3, [pc, #424]	; (800725c <checkAktifCalisma+0xdf8>)
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d00b      	beq.n	80070d2 <checkAktifCalisma+0xc6e>
 80070ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80070be:	4868      	ldr	r0, [pc, #416]	; (8007260 <checkAktifCalisma+0xdfc>)
 80070c0:	f002 fd3e 	bl	8009b40 <HAL_GPIO_ReadPin>
 80070c4:	4603      	mov	r3, r0
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d125      	bne.n	8007116 <checkAktifCalisma+0xcb2>
 80070ca:	4b64      	ldr	r3, [pc, #400]	; (800725c <checkAktifCalisma+0xdf8>)
 80070cc:	781b      	ldrb	r3, [r3, #0]
 80070ce:	2b01      	cmp	r3, #1
 80070d0:	d121      	bne.n	8007116 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80070d2:	2102      	movs	r1, #2
 80070d4:	485a      	ldr	r0, [pc, #360]	; (8007240 <checkAktifCalisma+0xddc>)
 80070d6:	f002 fd33 	bl	8009b40 <HAL_GPIO_ReadPin>
 80070da:	4603      	mov	r3, r0
 80070dc:	2b01      	cmp	r3, #1
 80070de:	d11a      	bne.n	8007116 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80070e0:	2104      	movs	r1, #4
 80070e2:	4857      	ldr	r0, [pc, #348]	; (8007240 <checkAktifCalisma+0xddc>)
 80070e4:	f002 fd2c 	bl	8009b40 <HAL_GPIO_ReadPin>
 80070e8:	4603      	mov	r3, r0
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d113      	bne.n	8007116 <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 80070ee:	4b56      	ldr	r3, [pc, #344]	; (8007248 <checkAktifCalisma+0xde4>)
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d00f      	beq.n	8007116 <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 80070f6:	4b5b      	ldr	r3, [pc, #364]	; (8007264 <checkAktifCalisma+0xe00>)
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	f083 0301 	eor.w	r3, r3, #1
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	2b00      	cmp	r3, #0
 8007102:	d008      	beq.n	8007116 <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 8007104:	4b58      	ldr	r3, [pc, #352]	; (8007268 <checkAktifCalisma+0xe04>)
 8007106:	2201      	movs	r2, #1
 8007108:	701a      	strb	r2, [r3, #0]
			timer = millis;
 800710a:	4b58      	ldr	r3, [pc, #352]	; (800726c <checkAktifCalisma+0xe08>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a58      	ldr	r2, [pc, #352]	; (8007270 <checkAktifCalisma+0xe0c>)
 8007110:	6013      	str	r3, [r2, #0]
			bekle();
 8007112:	f7fe ff71 	bl	8005ff8 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8007116:	4b55      	ldr	r3, [pc, #340]	; (800726c <checkAktifCalisma+0xe08>)
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	4b55      	ldr	r3, [pc, #340]	; (8007270 <checkAktifCalisma+0xe0c>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	1ad3      	subs	r3, r2, r3
 8007120:	4a54      	ldr	r2, [pc, #336]	; (8007274 <checkAktifCalisma+0xe10>)
 8007122:	7812      	ldrb	r2, [r2, #0]
 8007124:	4293      	cmp	r3, r2
 8007126:	d20d      	bcs.n	8007144 <checkAktifCalisma+0xce0>
 8007128:	2102      	movs	r1, #2
 800712a:	4845      	ldr	r0, [pc, #276]	; (8007240 <checkAktifCalisma+0xddc>)
 800712c:	f002 fd08 	bl	8009b40 <HAL_GPIO_ReadPin>
 8007130:	4603      	mov	r3, r0
 8007132:	2b00      	cmp	r3, #0
 8007134:	d006      	beq.n	8007144 <checkAktifCalisma+0xce0>
 8007136:	4b44      	ldr	r3, [pc, #272]	; (8007248 <checkAktifCalisma+0xde4>)
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	f083 0301 	eor.w	r3, r3, #1
 800713e:	b2db      	uxtb	r3, r3
 8007140:	2b00      	cmp	r3, #0
 8007142:	d002      	beq.n	800714a <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 8007144:	4b48      	ldr	r3, [pc, #288]	; (8007268 <checkAktifCalisma+0xe04>)
 8007146:	2200      	movs	r2, #0
 8007148:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800714a:	4b43      	ldr	r3, [pc, #268]	; (8007258 <checkAktifCalisma+0xdf4>)
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	2b01      	cmp	r3, #1
 8007150:	d135      	bne.n	80071be <checkAktifCalisma+0xd5a>
 8007152:	4b3a      	ldr	r3, [pc, #232]	; (800723c <checkAktifCalisma+0xdd8>)
 8007154:	781b      	ldrb	r3, [r3, #0]
 8007156:	2b01      	cmp	r3, #1
 8007158:	d003      	beq.n	8007162 <checkAktifCalisma+0xcfe>
 800715a:	4b38      	ldr	r3, [pc, #224]	; (800723c <checkAktifCalisma+0xdd8>)
 800715c:	781b      	ldrb	r3, [r3, #0]
 800715e:	2b03      	cmp	r3, #3
 8007160:	d12d      	bne.n	80071be <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8007162:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007166:	4836      	ldr	r0, [pc, #216]	; (8007240 <checkAktifCalisma+0xddc>)
 8007168:	f002 fcea 	bl	8009b40 <HAL_GPIO_ReadPin>
 800716c:	4603      	mov	r3, r0
 800716e:	2b00      	cmp	r3, #0
 8007170:	d103      	bne.n	800717a <checkAktifCalisma+0xd16>
 8007172:	4b3a      	ldr	r3, [pc, #232]	; (800725c <checkAktifCalisma+0xdf8>)
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d00b      	beq.n	8007192 <checkAktifCalisma+0xd2e>
 800717a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800717e:	4838      	ldr	r0, [pc, #224]	; (8007260 <checkAktifCalisma+0xdfc>)
 8007180:	f002 fcde 	bl	8009b40 <HAL_GPIO_ReadPin>
 8007184:	4603      	mov	r3, r0
 8007186:	2b00      	cmp	r3, #0
 8007188:	d119      	bne.n	80071be <checkAktifCalisma+0xd5a>
 800718a:	4b34      	ldr	r3, [pc, #208]	; (800725c <checkAktifCalisma+0xdf8>)
 800718c:	781b      	ldrb	r3, [r3, #0]
 800718e:	2b01      	cmp	r3, #1
 8007190:	d115      	bne.n	80071be <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007192:	2102      	movs	r1, #2
 8007194:	482a      	ldr	r0, [pc, #168]	; (8007240 <checkAktifCalisma+0xddc>)
 8007196:	f002 fcd3 	bl	8009b40 <HAL_GPIO_ReadPin>
 800719a:	4603      	mov	r3, r0
 800719c:	2b01      	cmp	r3, #1
 800719e:	d10e      	bne.n	80071be <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80071a0:	2104      	movs	r1, #4
 80071a2:	4827      	ldr	r0, [pc, #156]	; (8007240 <checkAktifCalisma+0xddc>)
 80071a4:	f002 fccc 	bl	8009b40 <HAL_GPIO_ReadPin>
 80071a8:	4603      	mov	r3, r0
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d107      	bne.n	80071be <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 80071ae:	4b26      	ldr	r3, [pc, #152]	; (8007248 <checkAktifCalisma+0xde4>)
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d003      	beq.n	80071be <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 80071b6:	4b30      	ldr	r3, [pc, #192]	; (8007278 <checkAktifCalisma+0xe14>)
 80071b8:	2201      	movs	r2, #1
 80071ba:	701a      	strb	r2, [r3, #0]
 80071bc:	e002      	b.n	80071c4 <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 80071be:	4b2e      	ldr	r3, [pc, #184]	; (8007278 <checkAktifCalisma+0xe14>)
 80071c0:	2200      	movs	r2, #0
 80071c2:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80071c4:	4b24      	ldr	r3, [pc, #144]	; (8007258 <checkAktifCalisma+0xdf4>)
 80071c6:	781b      	ldrb	r3, [r3, #0]
 80071c8:	2b02      	cmp	r3, #2
 80071ca:	d11d      	bne.n	8007208 <checkAktifCalisma+0xda4>
 80071cc:	4b1b      	ldr	r3, [pc, #108]	; (800723c <checkAktifCalisma+0xdd8>)
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	2b01      	cmp	r3, #1
 80071d2:	d003      	beq.n	80071dc <checkAktifCalisma+0xd78>
 80071d4:	4b19      	ldr	r3, [pc, #100]	; (800723c <checkAktifCalisma+0xdd8>)
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	2b03      	cmp	r3, #3
 80071da:	d115      	bne.n	8007208 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80071dc:	2102      	movs	r1, #2
 80071de:	4818      	ldr	r0, [pc, #96]	; (8007240 <checkAktifCalisma+0xddc>)
 80071e0:	f002 fcae 	bl	8009b40 <HAL_GPIO_ReadPin>
 80071e4:	4603      	mov	r3, r0
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d10e      	bne.n	8007208 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80071ea:	2104      	movs	r1, #4
 80071ec:	4814      	ldr	r0, [pc, #80]	; (8007240 <checkAktifCalisma+0xddc>)
 80071ee:	f002 fca7 	bl	8009b40 <HAL_GPIO_ReadPin>
 80071f2:	4603      	mov	r3, r0
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d107      	bne.n	8007208 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 80071f8:	4b13      	ldr	r3, [pc, #76]	; (8007248 <checkAktifCalisma+0xde4>)
 80071fa:	781b      	ldrb	r3, [r3, #0]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d003      	beq.n	8007208 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 8007200:	4b1e      	ldr	r3, [pc, #120]	; (800727c <checkAktifCalisma+0xe18>)
 8007202:	2201      	movs	r2, #1
 8007204:	701a      	strb	r2, [r3, #0]
 8007206:	e002      	b.n	800720e <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 8007208:	4b1c      	ldr	r3, [pc, #112]	; (800727c <checkAktifCalisma+0xe18>)
 800720a:	2200      	movs	r2, #0
 800720c:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 800720e:	4b1a      	ldr	r3, [pc, #104]	; (8007278 <checkAktifCalisma+0xe14>)
 8007210:	781b      	ldrb	r3, [r3, #0]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d107      	bne.n	8007226 <checkAktifCalisma+0xdc2>
 8007216:	4b19      	ldr	r3, [pc, #100]	; (800727c <checkAktifCalisma+0xe18>)
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d103      	bne.n	8007226 <checkAktifCalisma+0xdc2>
 800721e:	4b12      	ldr	r3, [pc, #72]	; (8007268 <checkAktifCalisma+0xe04>)
 8007220:	781b      	ldrb	r3, [r3, #0]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d02c      	beq.n	8007280 <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8007226:	2201      	movs	r2, #1
 8007228:	2140      	movs	r1, #64	; 0x40
 800722a:	480a      	ldr	r0, [pc, #40]	; (8007254 <checkAktifCalisma+0xdf0>)
 800722c:	f002 fc9f 	bl	8009b6e <HAL_GPIO_WritePin>
 8007230:	e02b      	b.n	800728a <checkAktifCalisma+0xe26>
 8007232:	bf00      	nop
 8007234:	20000d79 	.word	0x20000d79
 8007238:	20000d3e 	.word	0x20000d3e
 800723c:	20000d3d 	.word	0x20000d3d
 8007240:	40011000 	.word	0x40011000
 8007244:	20000d3b 	.word	0x20000d3b
 8007248:	20000d77 	.word	0x20000d77
 800724c:	20000d7a 	.word	0x20000d7a
 8007250:	20000d78 	.word	0x20000d78
 8007254:	40010800 	.word	0x40010800
 8007258:	20000d3f 	.word	0x20000d3f
 800725c:	20000d41 	.word	0x20000d41
 8007260:	40010c00 	.word	0x40010c00
 8007264:	20000d64 	.word	0x20000d64
 8007268:	20000d7b 	.word	0x20000d7b
 800726c:	20000cc0 	.word	0x20000cc0
 8007270:	20000cc4 	.word	0x20000cc4
 8007274:	20000d4f 	.word	0x20000d4f
 8007278:	20000d7c 	.word	0x20000d7c
 800727c:	20000d7d 	.word	0x20000d7d
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007280:	2200      	movs	r2, #0
 8007282:	2140      	movs	r1, #64	; 0x40
 8007284:	488d      	ldr	r0, [pc, #564]	; (80074bc <checkAktifCalisma+0x1058>)
 8007286:	f002 fc72 	bl	8009b6e <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 800728a:	4b8d      	ldr	r3, [pc, #564]	; (80074c0 <checkAktifCalisma+0x105c>)
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d003      	beq.n	800729a <checkAktifCalisma+0xe36>
 8007292:	4b8b      	ldr	r3, [pc, #556]	; (80074c0 <checkAktifCalisma+0x105c>)
 8007294:	781b      	ldrb	r3, [r3, #0]
 8007296:	2b02      	cmp	r3, #2
 8007298:	d115      	bne.n	80072c6 <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800729a:	2104      	movs	r1, #4
 800729c:	4889      	ldr	r0, [pc, #548]	; (80074c4 <checkAktifCalisma+0x1060>)
 800729e:	f002 fc4f 	bl	8009b40 <HAL_GPIO_ReadPin>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d003      	beq.n	80072b0 <checkAktifCalisma+0xe4c>
 80072a8:	4b87      	ldr	r3, [pc, #540]	; (80074c8 <checkAktifCalisma+0x1064>)
 80072aa:	781b      	ldrb	r3, [r3, #0]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d10a      	bne.n	80072c6 <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 80072b0:	2102      	movs	r1, #2
 80072b2:	4884      	ldr	r0, [pc, #528]	; (80074c4 <checkAktifCalisma+0x1060>)
 80072b4:	f002 fc44 	bl	8009b40 <HAL_GPIO_ReadPin>
 80072b8:	4603      	mov	r3, r0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d103      	bne.n	80072c6 <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 80072be:	4b83      	ldr	r3, [pc, #524]	; (80074cc <checkAktifCalisma+0x1068>)
 80072c0:	2201      	movs	r2, #1
 80072c2:	701a      	strb	r2, [r3, #0]
 80072c4:	e002      	b.n	80072cc <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 80072c6:	4b81      	ldr	r3, [pc, #516]	; (80074cc <checkAktifCalisma+0x1068>)
 80072c8:	2200      	movs	r2, #0
 80072ca:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 80072cc:	4b7c      	ldr	r3, [pc, #496]	; (80074c0 <checkAktifCalisma+0x105c>)
 80072ce:	781b      	ldrb	r3, [r3, #0]
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d003      	beq.n	80072dc <checkAktifCalisma+0xe78>
 80072d4:	4b7a      	ldr	r3, [pc, #488]	; (80074c0 <checkAktifCalisma+0x105c>)
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	2b02      	cmp	r3, #2
 80072da:	d111      	bne.n	8007300 <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80072dc:	2102      	movs	r1, #2
 80072de:	4879      	ldr	r0, [pc, #484]	; (80074c4 <checkAktifCalisma+0x1060>)
 80072e0:	f002 fc2e 	bl	8009b40 <HAL_GPIO_ReadPin>
 80072e4:	4603      	mov	r3, r0
 80072e6:	2b01      	cmp	r3, #1
 80072e8:	d10a      	bne.n	8007300 <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 80072ea:	2104      	movs	r1, #4
 80072ec:	4875      	ldr	r0, [pc, #468]	; (80074c4 <checkAktifCalisma+0x1060>)
 80072ee:	f002 fc27 	bl	8009b40 <HAL_GPIO_ReadPin>
 80072f2:	4603      	mov	r3, r0
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d103      	bne.n	8007300 <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 80072f8:	4b75      	ldr	r3, [pc, #468]	; (80074d0 <checkAktifCalisma+0x106c>)
 80072fa:	2201      	movs	r2, #1
 80072fc:	701a      	strb	r2, [r3, #0]
 80072fe:	e002      	b.n	8007306 <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 8007300:	4b73      	ldr	r3, [pc, #460]	; (80074d0 <checkAktifCalisma+0x106c>)
 8007302:	2200      	movs	r2, #0
 8007304:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 8007306:	4b71      	ldr	r3, [pc, #452]	; (80074cc <checkAktifCalisma+0x1068>)
 8007308:	781b      	ldrb	r3, [r3, #0]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d00f      	beq.n	800732e <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 800730e:	4b71      	ldr	r3, [pc, #452]	; (80074d4 <checkAktifCalisma+0x1070>)
 8007310:	781b      	ldrb	r3, [r3, #0]
 8007312:	2b01      	cmp	r3, #1
 8007314:	d10b      	bne.n	800732e <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8007316:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800731a:	486f      	ldr	r0, [pc, #444]	; (80074d8 <checkAktifCalisma+0x1074>)
 800731c:	f002 fc10 	bl	8009b40 <HAL_GPIO_ReadPin>
 8007320:	4603      	mov	r3, r0
 8007322:	2b00      	cmp	r3, #0
 8007324:	d103      	bne.n	800732e <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8007326:	4b6d      	ldr	r3, [pc, #436]	; (80074dc <checkAktifCalisma+0x1078>)
 8007328:	2201      	movs	r2, #1
 800732a:	701a      	strb	r2, [r3, #0]
 800732c:	e002      	b.n	8007334 <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 800732e:	4b6b      	ldr	r3, [pc, #428]	; (80074dc <checkAktifCalisma+0x1078>)
 8007330:	2200      	movs	r2, #0
 8007332:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8007334:	4b66      	ldr	r3, [pc, #408]	; (80074d0 <checkAktifCalisma+0x106c>)
 8007336:	781b      	ldrb	r3, [r3, #0]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d00f      	beq.n	800735c <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 800733c:	4b65      	ldr	r3, [pc, #404]	; (80074d4 <checkAktifCalisma+0x1070>)
 800733e:	781b      	ldrb	r3, [r3, #0]
 8007340:	2b01      	cmp	r3, #1
 8007342:	d10b      	bne.n	800735c <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8007344:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007348:	4863      	ldr	r0, [pc, #396]	; (80074d8 <checkAktifCalisma+0x1074>)
 800734a:	f002 fbf9 	bl	8009b40 <HAL_GPIO_ReadPin>
 800734e:	4603      	mov	r3, r0
 8007350:	2b00      	cmp	r3, #0
 8007352:	d103      	bne.n	800735c <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8007354:	4b62      	ldr	r3, [pc, #392]	; (80074e0 <checkAktifCalisma+0x107c>)
 8007356:	2201      	movs	r2, #1
 8007358:	701a      	strb	r2, [r3, #0]
 800735a:	e002      	b.n	8007362 <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 800735c:	4b60      	ldr	r3, [pc, #384]	; (80074e0 <checkAktifCalisma+0x107c>)
 800735e:	2200      	movs	r2, #0
 8007360:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8007362:	4b60      	ldr	r3, [pc, #384]	; (80074e4 <checkAktifCalisma+0x1080>)
 8007364:	781b      	ldrb	r3, [r3, #0]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d137      	bne.n	80073da <checkAktifCalisma+0xf76>
 800736a:	4b5f      	ldr	r3, [pc, #380]	; (80074e8 <checkAktifCalisma+0x1084>)
 800736c:	781b      	ldrb	r3, [r3, #0]
 800736e:	2b02      	cmp	r3, #2
 8007370:	d003      	beq.n	800737a <checkAktifCalisma+0xf16>
 8007372:	4b5d      	ldr	r3, [pc, #372]	; (80074e8 <checkAktifCalisma+0x1084>)
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	2b03      	cmp	r3, #3
 8007378:	d12f      	bne.n	80073da <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 800737a:	4b54      	ldr	r3, [pc, #336]	; (80074cc <checkAktifCalisma+0x1068>)
 800737c:	781b      	ldrb	r3, [r3, #0]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d103      	bne.n	800738a <checkAktifCalisma+0xf26>
 8007382:	4b53      	ldr	r3, [pc, #332]	; (80074d0 <checkAktifCalisma+0x106c>)
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d027      	beq.n	80073da <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 800738a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800738e:	484d      	ldr	r0, [pc, #308]	; (80074c4 <checkAktifCalisma+0x1060>)
 8007390:	f002 fbd6 	bl	8009b40 <HAL_GPIO_ReadPin>
 8007394:	4603      	mov	r3, r0
 8007396:	2b00      	cmp	r3, #0
 8007398:	d103      	bne.n	80073a2 <checkAktifCalisma+0xf3e>
 800739a:	4b4e      	ldr	r3, [pc, #312]	; (80074d4 <checkAktifCalisma+0x1070>)
 800739c:	781b      	ldrb	r3, [r3, #0]
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d007      	beq.n	80073b2 <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 80073a2:	4b4e      	ldr	r3, [pc, #312]	; (80074dc <checkAktifCalisma+0x1078>)
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d103      	bne.n	80073b2 <checkAktifCalisma+0xf4e>
 80073aa:	4b4d      	ldr	r3, [pc, #308]	; (80074e0 <checkAktifCalisma+0x107c>)
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d013      	beq.n	80073da <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 80073b2:	4b4e      	ldr	r3, [pc, #312]	; (80074ec <checkAktifCalisma+0x1088>)
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d00f      	beq.n	80073da <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 80073ba:	4b4d      	ldr	r3, [pc, #308]	; (80074f0 <checkAktifCalisma+0x108c>)
 80073bc:	781b      	ldrb	r3, [r3, #0]
 80073be:	f083 0301 	eor.w	r3, r3, #1
 80073c2:	b2db      	uxtb	r3, r3
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d008      	beq.n	80073da <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 80073c8:	4b4a      	ldr	r3, [pc, #296]	; (80074f4 <checkAktifCalisma+0x1090>)
 80073ca:	2201      	movs	r2, #1
 80073cc:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80073ce:	4b4a      	ldr	r3, [pc, #296]	; (80074f8 <checkAktifCalisma+0x1094>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a4a      	ldr	r2, [pc, #296]	; (80074fc <checkAktifCalisma+0x1098>)
 80073d4:	6013      	str	r3, [r2, #0]
			bekle();
 80073d6:	f7fe fe0f 	bl	8005ff8 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 80073da:	4b47      	ldr	r3, [pc, #284]	; (80074f8 <checkAktifCalisma+0x1094>)
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	4b47      	ldr	r3, [pc, #284]	; (80074fc <checkAktifCalisma+0x1098>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	1ad3      	subs	r3, r2, r3
 80073e4:	4a46      	ldr	r2, [pc, #280]	; (8007500 <checkAktifCalisma+0x109c>)
 80073e6:	7812      	ldrb	r2, [r2, #0]
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d214      	bcs.n	8007416 <checkAktifCalisma+0xfb2>
 80073ec:	4b37      	ldr	r3, [pc, #220]	; (80074cc <checkAktifCalisma+0x1068>)
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	f083 0301 	eor.w	r3, r3, #1
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d006      	beq.n	8007408 <checkAktifCalisma+0xfa4>
 80073fa:	4b35      	ldr	r3, [pc, #212]	; (80074d0 <checkAktifCalisma+0x106c>)
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	f083 0301 	eor.w	r3, r3, #1
 8007402:	b2db      	uxtb	r3, r3
 8007404:	2b00      	cmp	r3, #0
 8007406:	d106      	bne.n	8007416 <checkAktifCalisma+0xfb2>
 8007408:	4b38      	ldr	r3, [pc, #224]	; (80074ec <checkAktifCalisma+0x1088>)
 800740a:	781b      	ldrb	r3, [r3, #0]
 800740c:	f083 0301 	eor.w	r3, r3, #1
 8007410:	b2db      	uxtb	r3, r3
 8007412:	2b00      	cmp	r3, #0
 8007414:	d002      	beq.n	800741c <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8007416:	4b37      	ldr	r3, [pc, #220]	; (80074f4 <checkAktifCalisma+0x1090>)
 8007418:	2200      	movs	r2, #0
 800741a:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 800741c:	4b31      	ldr	r3, [pc, #196]	; (80074e4 <checkAktifCalisma+0x1080>)
 800741e:	781b      	ldrb	r3, [r3, #0]
 8007420:	2b01      	cmp	r3, #1
 8007422:	d12b      	bne.n	800747c <checkAktifCalisma+0x1018>
 8007424:	4b30      	ldr	r3, [pc, #192]	; (80074e8 <checkAktifCalisma+0x1084>)
 8007426:	781b      	ldrb	r3, [r3, #0]
 8007428:	2b02      	cmp	r3, #2
 800742a:	d003      	beq.n	8007434 <checkAktifCalisma+0xfd0>
 800742c:	4b2e      	ldr	r3, [pc, #184]	; (80074e8 <checkAktifCalisma+0x1084>)
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	2b03      	cmp	r3, #3
 8007432:	d123      	bne.n	800747c <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8007434:	4b25      	ldr	r3, [pc, #148]	; (80074cc <checkAktifCalisma+0x1068>)
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d103      	bne.n	8007444 <checkAktifCalisma+0xfe0>
 800743c:	4b24      	ldr	r3, [pc, #144]	; (80074d0 <checkAktifCalisma+0x106c>)
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d01b      	beq.n	800747c <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8007444:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007448:	481e      	ldr	r0, [pc, #120]	; (80074c4 <checkAktifCalisma+0x1060>)
 800744a:	f002 fb79 	bl	8009b40 <HAL_GPIO_ReadPin>
 800744e:	4603      	mov	r3, r0
 8007450:	2b00      	cmp	r3, #0
 8007452:	d103      	bne.n	800745c <checkAktifCalisma+0xff8>
 8007454:	4b1f      	ldr	r3, [pc, #124]	; (80074d4 <checkAktifCalisma+0x1070>)
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d007      	beq.n	800746c <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 800745c:	4b1f      	ldr	r3, [pc, #124]	; (80074dc <checkAktifCalisma+0x1078>)
 800745e:	781b      	ldrb	r3, [r3, #0]
 8007460:	2b00      	cmp	r3, #0
 8007462:	d103      	bne.n	800746c <checkAktifCalisma+0x1008>
 8007464:	4b1e      	ldr	r3, [pc, #120]	; (80074e0 <checkAktifCalisma+0x107c>)
 8007466:	781b      	ldrb	r3, [r3, #0]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d007      	beq.n	800747c <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 800746c:	4b1f      	ldr	r3, [pc, #124]	; (80074ec <checkAktifCalisma+0x1088>)
 800746e:	781b      	ldrb	r3, [r3, #0]
 8007470:	2b00      	cmp	r3, #0
 8007472:	d003      	beq.n	800747c <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8007474:	4b23      	ldr	r3, [pc, #140]	; (8007504 <checkAktifCalisma+0x10a0>)
 8007476:	2201      	movs	r2, #1
 8007478:	701a      	strb	r2, [r3, #0]
 800747a:	e002      	b.n	8007482 <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 800747c:	4b21      	ldr	r3, [pc, #132]	; (8007504 <checkAktifCalisma+0x10a0>)
 800747e:	2200      	movs	r2, #0
 8007480:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8007482:	4b18      	ldr	r3, [pc, #96]	; (80074e4 <checkAktifCalisma+0x1080>)
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	2b02      	cmp	r3, #2
 8007488:	d140      	bne.n	800750c <checkAktifCalisma+0x10a8>
 800748a:	4b17      	ldr	r3, [pc, #92]	; (80074e8 <checkAktifCalisma+0x1084>)
 800748c:	781b      	ldrb	r3, [r3, #0]
 800748e:	2b02      	cmp	r3, #2
 8007490:	d003      	beq.n	800749a <checkAktifCalisma+0x1036>
 8007492:	4b15      	ldr	r3, [pc, #84]	; (80074e8 <checkAktifCalisma+0x1084>)
 8007494:	781b      	ldrb	r3, [r3, #0]
 8007496:	2b03      	cmp	r3, #3
 8007498:	d138      	bne.n	800750c <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 800749a:	4b0c      	ldr	r3, [pc, #48]	; (80074cc <checkAktifCalisma+0x1068>)
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d103      	bne.n	80074aa <checkAktifCalisma+0x1046>
 80074a2:	4b0b      	ldr	r3, [pc, #44]	; (80074d0 <checkAktifCalisma+0x106c>)
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d030      	beq.n	800750c <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 80074aa:	4b10      	ldr	r3, [pc, #64]	; (80074ec <checkAktifCalisma+0x1088>)
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d02c      	beq.n	800750c <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 80074b2:	4b15      	ldr	r3, [pc, #84]	; (8007508 <checkAktifCalisma+0x10a4>)
 80074b4:	2201      	movs	r2, #1
 80074b6:	701a      	strb	r2, [r3, #0]
 80074b8:	e02b      	b.n	8007512 <checkAktifCalisma+0x10ae>
 80074ba:	bf00      	nop
 80074bc:	40010800 	.word	0x40010800
 80074c0:	20000d42 	.word	0x20000d42
 80074c4:	40011000 	.word	0x40011000
 80074c8:	20000d3b 	.word	0x20000d3b
 80074cc:	20000d81 	.word	0x20000d81
 80074d0:	20000d82 	.word	0x20000d82
 80074d4:	20000d41 	.word	0x20000d41
 80074d8:	40010c00 	.word	0x40010c00
 80074dc:	20000d91 	.word	0x20000d91
 80074e0:	20000d92 	.word	0x20000d92
 80074e4:	20000d40 	.word	0x20000d40
 80074e8:	20000d3d 	.word	0x20000d3d
 80074ec:	20000d77 	.word	0x20000d77
 80074f0:	20000d64 	.word	0x20000d64
 80074f4:	20000d7e 	.word	0x20000d7e
 80074f8:	20000cc0 	.word	0x20000cc0
 80074fc:	20000cc4 	.word	0x20000cc4
 8007500:	20000d50 	.word	0x20000d50
 8007504:	20000d7f 	.word	0x20000d7f
 8007508:	20000d80 	.word	0x20000d80
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 800750c:	4b89      	ldr	r3, [pc, #548]	; (8007734 <checkAktifCalisma+0x12d0>)
 800750e:	2200      	movs	r2, #0
 8007510:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8007512:	4b89      	ldr	r3, [pc, #548]	; (8007738 <checkAktifCalisma+0x12d4>)
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d107      	bne.n	800752a <checkAktifCalisma+0x10c6>
 800751a:	4b88      	ldr	r3, [pc, #544]	; (800773c <checkAktifCalisma+0x12d8>)
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d103      	bne.n	800752a <checkAktifCalisma+0x10c6>
 8007522:	4b84      	ldr	r3, [pc, #528]	; (8007734 <checkAktifCalisma+0x12d0>)
 8007524:	781b      	ldrb	r3, [r3, #0]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d005      	beq.n	8007536 <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 800752a:	2201      	movs	r2, #1
 800752c:	2120      	movs	r1, #32
 800752e:	4884      	ldr	r0, [pc, #528]	; (8007740 <checkAktifCalisma+0x12dc>)
 8007530:	f002 fb1d 	bl	8009b6e <HAL_GPIO_WritePin>
 8007534:	e004      	b.n	8007540 <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007536:	2200      	movs	r2, #0
 8007538:	2120      	movs	r1, #32
 800753a:	4881      	ldr	r0, [pc, #516]	; (8007740 <checkAktifCalisma+0x12dc>)
 800753c:	f002 fb17 	bl	8009b6e <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8007540:	4b80      	ldr	r3, [pc, #512]	; (8007744 <checkAktifCalisma+0x12e0>)
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d00e      	beq.n	8007566 <checkAktifCalisma+0x1102>
 8007548:	2102      	movs	r1, #2
 800754a:	487f      	ldr	r0, [pc, #508]	; (8007748 <checkAktifCalisma+0x12e4>)
 800754c:	f002 faf8 	bl	8009b40 <HAL_GPIO_ReadPin>
 8007550:	4603      	mov	r3, r0
 8007552:	2b01      	cmp	r3, #1
 8007554:	d107      	bne.n	8007566 <checkAktifCalisma+0x1102>
 8007556:	4b7d      	ldr	r3, [pc, #500]	; (800774c <checkAktifCalisma+0x12e8>)
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d103      	bne.n	8007566 <checkAktifCalisma+0x1102>
 800755e:	4b7c      	ldr	r3, [pc, #496]	; (8007750 <checkAktifCalisma+0x12ec>)
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d112      	bne.n	800758c <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8007566:	4b7b      	ldr	r3, [pc, #492]	; (8007754 <checkAktifCalisma+0x12f0>)
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d066      	beq.n	800763c <checkAktifCalisma+0x11d8>
 800756e:	2104      	movs	r1, #4
 8007570:	4875      	ldr	r0, [pc, #468]	; (8007748 <checkAktifCalisma+0x12e4>)
 8007572:	f002 fae5 	bl	8009b40 <HAL_GPIO_ReadPin>
 8007576:	4603      	mov	r3, r0
 8007578:	2b01      	cmp	r3, #1
 800757a:	d15f      	bne.n	800763c <checkAktifCalisma+0x11d8>
 800757c:	4b73      	ldr	r3, [pc, #460]	; (800774c <checkAktifCalisma+0x12e8>)
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d05b      	beq.n	800763c <checkAktifCalisma+0x11d8>
 8007584:	4b72      	ldr	r3, [pc, #456]	; (8007750 <checkAktifCalisma+0x12ec>)
 8007586:	781b      	ldrb	r3, [r3, #0]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d057      	beq.n	800763c <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 800758c:	4b72      	ldr	r3, [pc, #456]	; (8007758 <checkAktifCalisma+0x12f4>)
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	3301      	adds	r3, #1
 8007592:	b2da      	uxtb	r2, r3
 8007594:	4b70      	ldr	r3, [pc, #448]	; (8007758 <checkAktifCalisma+0x12f4>)
 8007596:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8007598:	4b6f      	ldr	r3, [pc, #444]	; (8007758 <checkAktifCalisma+0x12f4>)
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	2b09      	cmp	r3, #9
 800759e:	d908      	bls.n	80075b2 <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 80075a0:	4b6d      	ldr	r3, [pc, #436]	; (8007758 <checkAktifCalisma+0x12f4>)
 80075a2:	2200      	movs	r2, #0
 80075a4:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 80075a6:	4b6d      	ldr	r3, [pc, #436]	; (800775c <checkAktifCalisma+0x12f8>)
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	3301      	adds	r3, #1
 80075ac:	b2da      	uxtb	r2, r3
 80075ae:	4b6b      	ldr	r3, [pc, #428]	; (800775c <checkAktifCalisma+0x12f8>)
 80075b0:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 80075b2:	4b6a      	ldr	r3, [pc, #424]	; (800775c <checkAktifCalisma+0x12f8>)
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	2b09      	cmp	r3, #9
 80075b8:	d908      	bls.n	80075cc <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 80075ba:	4b68      	ldr	r3, [pc, #416]	; (800775c <checkAktifCalisma+0x12f8>)
 80075bc:	2200      	movs	r2, #0
 80075be:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 80075c0:	4b67      	ldr	r3, [pc, #412]	; (8007760 <checkAktifCalisma+0x12fc>)
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	3301      	adds	r3, #1
 80075c6:	b2da      	uxtb	r2, r3
 80075c8:	4b65      	ldr	r3, [pc, #404]	; (8007760 <checkAktifCalisma+0x12fc>)
 80075ca:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 80075cc:	4b64      	ldr	r3, [pc, #400]	; (8007760 <checkAktifCalisma+0x12fc>)
 80075ce:	781b      	ldrb	r3, [r3, #0]
 80075d0:	2b09      	cmp	r3, #9
 80075d2:	d908      	bls.n	80075e6 <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 80075d4:	4b62      	ldr	r3, [pc, #392]	; (8007760 <checkAktifCalisma+0x12fc>)
 80075d6:	2200      	movs	r2, #0
 80075d8:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 80075da:	4b62      	ldr	r3, [pc, #392]	; (8007764 <checkAktifCalisma+0x1300>)
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	3301      	adds	r3, #1
 80075e0:	b2da      	uxtb	r2, r3
 80075e2:	4b60      	ldr	r3, [pc, #384]	; (8007764 <checkAktifCalisma+0x1300>)
 80075e4:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 80075e6:	4b5f      	ldr	r3, [pc, #380]	; (8007764 <checkAktifCalisma+0x1300>)
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	2b09      	cmp	r3, #9
 80075ec:	d908      	bls.n	8007600 <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 80075ee:	4b5d      	ldr	r3, [pc, #372]	; (8007764 <checkAktifCalisma+0x1300>)
 80075f0:	2200      	movs	r2, #0
 80075f2:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 80075f4:	4b5c      	ldr	r3, [pc, #368]	; (8007768 <checkAktifCalisma+0x1304>)
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	3301      	adds	r3, #1
 80075fa:	b2da      	uxtb	r2, r3
 80075fc:	4b5a      	ldr	r3, [pc, #360]	; (8007768 <checkAktifCalisma+0x1304>)
 80075fe:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8007600:	4b59      	ldr	r3, [pc, #356]	; (8007768 <checkAktifCalisma+0x1304>)
 8007602:	781a      	ldrb	r2, [r3, #0]
 8007604:	4b59      	ldr	r3, [pc, #356]	; (800776c <checkAktifCalisma+0x1308>)
 8007606:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 800760a:	4b56      	ldr	r3, [pc, #344]	; (8007764 <checkAktifCalisma+0x1300>)
 800760c:	781a      	ldrb	r2, [r3, #0]
 800760e:	4b57      	ldr	r3, [pc, #348]	; (800776c <checkAktifCalisma+0x1308>)
 8007610:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8007612:	4b53      	ldr	r3, [pc, #332]	; (8007760 <checkAktifCalisma+0x12fc>)
 8007614:	781a      	ldrb	r2, [r3, #0]
 8007616:	4b55      	ldr	r3, [pc, #340]	; (800776c <checkAktifCalisma+0x1308>)
 8007618:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 800761a:	4b50      	ldr	r3, [pc, #320]	; (800775c <checkAktifCalisma+0x12f8>)
 800761c:	781a      	ldrb	r2, [r3, #0]
 800761e:	4b53      	ldr	r3, [pc, #332]	; (800776c <checkAktifCalisma+0x1308>)
 8007620:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8007622:	4b4d      	ldr	r3, [pc, #308]	; (8007758 <checkAktifCalisma+0x12f4>)
 8007624:	781a      	ldrb	r2, [r3, #0]
 8007626:	4b51      	ldr	r3, [pc, #324]	; (800776c <checkAktifCalisma+0x1308>)
 8007628:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 800762a:	4b51      	ldr	r3, [pc, #324]	; (8007770 <checkAktifCalisma+0x130c>)
 800762c:	2201      	movs	r2, #1
 800762e:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 8007630:	4b44      	ldr	r3, [pc, #272]	; (8007744 <checkAktifCalisma+0x12e0>)
 8007632:	2200      	movs	r2, #0
 8007634:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 8007636:	4b47      	ldr	r3, [pc, #284]	; (8007754 <checkAktifCalisma+0x12f0>)
 8007638:	2200      	movs	r2, #0
 800763a:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 800763c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007640:	484c      	ldr	r0, [pc, #304]	; (8007774 <checkAktifCalisma+0x1310>)
 8007642:	f002 fa7d 	bl	8009b40 <HAL_GPIO_ReadPin>
 8007646:	4603      	mov	r3, r0
 8007648:	2b00      	cmp	r3, #0
 800764a:	d016      	beq.n	800767a <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 800764c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007650:	4848      	ldr	r0, [pc, #288]	; (8007774 <checkAktifCalisma+0x1310>)
 8007652:	f002 fa75 	bl	8009b40 <HAL_GPIO_ReadPin>
 8007656:	4603      	mov	r3, r0
 8007658:	2b00      	cmp	r3, #0
 800765a:	d00e      	beq.n	800767a <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 800765c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007660:	4844      	ldr	r0, [pc, #272]	; (8007774 <checkAktifCalisma+0x1310>)
 8007662:	f002 fa6d 	bl	8009b40 <HAL_GPIO_ReadPin>
 8007666:	4603      	mov	r3, r0
 8007668:	2b00      	cmp	r3, #0
 800766a:	d006      	beq.n	800767a <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 800766c:	2140      	movs	r1, #64	; 0x40
 800766e:	4836      	ldr	r0, [pc, #216]	; (8007748 <checkAktifCalisma+0x12e4>)
 8007670:	f002 fa66 	bl	8009b40 <HAL_GPIO_ReadPin>
 8007674:	4603      	mov	r3, r0
 8007676:	2b00      	cmp	r3, #0
 8007678:	d103      	bne.n	8007682 <checkAktifCalisma+0x121e>
			startBasili=1;
 800767a:	4b3f      	ldr	r3, [pc, #252]	; (8007778 <checkAktifCalisma+0x1314>)
 800767c:	2201      	movs	r2, #1
 800767e:	701a      	strb	r2, [r3, #0]
 8007680:	e002      	b.n	8007688 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 8007682:	4b3d      	ldr	r3, [pc, #244]	; (8007778 <checkAktifCalisma+0x1314>)
 8007684:	2200      	movs	r2, #0
 8007686:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8007688:	4b3b      	ldr	r3, [pc, #236]	; (8007778 <checkAktifCalisma+0x1314>)
 800768a:	781b      	ldrb	r3, [r3, #0]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d014      	beq.n	80076ba <checkAktifCalisma+0x1256>
 8007690:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007694:	4837      	ldr	r0, [pc, #220]	; (8007774 <checkAktifCalisma+0x1310>)
 8007696:	f002 fa53 	bl	8009b40 <HAL_GPIO_ReadPin>
 800769a:	4603      	mov	r3, r0
 800769c:	2b01      	cmp	r3, #1
 800769e:	d10c      	bne.n	80076ba <checkAktifCalisma+0x1256>
			hataVar=1;
 80076a0:	4b36      	ldr	r3, [pc, #216]	; (800777c <checkAktifCalisma+0x1318>)
 80076a2:	2201      	movs	r2, #1
 80076a4:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 80076a6:	2001      	movs	r0, #1
 80076a8:	f7fe f88e 	bl	80057c8 <hataKoduLcdGoster>
			hata2EEPROM(1);
 80076ac:	2001      	movs	r0, #1
 80076ae:	f7fe fc27 	bl	8005f00 <hata2EEPROM>
			acilstophatasi=1;
 80076b2:	4b33      	ldr	r3, [pc, #204]	; (8007780 <checkAktifCalisma+0x131c>)
 80076b4:	2201      	movs	r2, #1
 80076b6:	701a      	strb	r2, [r3, #0]
 80076b8:	e018      	b.n	80076ec <checkAktifCalisma+0x1288>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 80076ba:	4b31      	ldr	r3, [pc, #196]	; (8007780 <checkAktifCalisma+0x131c>)
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d014      	beq.n	80076ec <checkAktifCalisma+0x1288>
 80076c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80076c6:	482b      	ldr	r0, [pc, #172]	; (8007774 <checkAktifCalisma+0x1310>)
 80076c8:	f002 fa3a 	bl	8009b40 <HAL_GPIO_ReadPin>
 80076cc:	4603      	mov	r3, r0
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d10c      	bne.n	80076ec <checkAktifCalisma+0x1288>
 80076d2:	4b29      	ldr	r3, [pc, #164]	; (8007778 <checkAktifCalisma+0x1314>)
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	f083 0301 	eor.w	r3, r3, #1
 80076da:	b2db      	uxtb	r3, r3
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d005      	beq.n	80076ec <checkAktifCalisma+0x1288>
			acilstophatasi=0;
 80076e0:	4b27      	ldr	r3, [pc, #156]	; (8007780 <checkAktifCalisma+0x131c>)
 80076e2:	2200      	movs	r2, #0
 80076e4:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 80076e6:	2001      	movs	r0, #1
 80076e8:	f7fe f81a 	bl	8005720 <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 80076ec:	4b25      	ldr	r3, [pc, #148]	; (8007784 <checkAktifCalisma+0x1320>)
 80076ee:	781b      	ldrb	r3, [r3, #0]
 80076f0:	f083 0301 	eor.w	r3, r3, #1
 80076f4:	b2db      	uxtb	r3, r3
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d04c      	beq.n	8007794 <checkAktifCalisma+0x1330>
 80076fa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80076fe:	481d      	ldr	r0, [pc, #116]	; (8007774 <checkAktifCalisma+0x1310>)
 8007700:	f002 fa1e 	bl	8009b40 <HAL_GPIO_ReadPin>
 8007704:	4603      	mov	r3, r0
 8007706:	2b00      	cmp	r3, #0
 8007708:	d003      	beq.n	8007712 <checkAktifCalisma+0x12ae>
 800770a:	4b1f      	ldr	r3, [pc, #124]	; (8007788 <checkAktifCalisma+0x1324>)
 800770c:	781b      	ldrb	r3, [r3, #0]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d040      	beq.n	8007794 <checkAktifCalisma+0x1330>
 8007712:	4b1e      	ldr	r3, [pc, #120]	; (800778c <checkAktifCalisma+0x1328>)
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	2b01      	cmp	r3, #1
 8007718:	d13c      	bne.n	8007794 <checkAktifCalisma+0x1330>
			hataVar=1;
 800771a:	4b18      	ldr	r3, [pc, #96]	; (800777c <checkAktifCalisma+0x1318>)
 800771c:	2201      	movs	r2, #1
 800771e:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 8007720:	2002      	movs	r0, #2
 8007722:	f7fe f851 	bl	80057c8 <hataKoduLcdGoster>
			hata2EEPROM(2);
 8007726:	2002      	movs	r0, #2
 8007728:	f7fe fbea 	bl	8005f00 <hata2EEPROM>
			emniyetCercevesihatasi=1;
 800772c:	4b18      	ldr	r3, [pc, #96]	; (8007790 <checkAktifCalisma+0x132c>)
 800772e:	2201      	movs	r2, #1
 8007730:	701a      	strb	r2, [r3, #0]
 8007732:	e047      	b.n	80077c4 <checkAktifCalisma+0x1360>
 8007734:	20000d80 	.word	0x20000d80
 8007738:	20000d7f 	.word	0x20000d7f
 800773c:	20000d7e 	.word	0x20000d7e
 8007740:	40010800 	.word	0x40010800
 8007744:	20000d74 	.word	0x20000d74
 8007748:	40011000 	.word	0x40011000
 800774c:	20000d3b 	.word	0x20000d3b
 8007750:	20000d77 	.word	0x20000d77
 8007754:	20000d75 	.word	0x20000d75
 8007758:	20000d32 	.word	0x20000d32
 800775c:	20000d33 	.word	0x20000d33
 8007760:	200009b1 	.word	0x200009b1
 8007764:	200009b2 	.word	0x200009b2
 8007768:	20000d34 	.word	0x20000d34
 800776c:	20000c34 	.word	0x20000c34
 8007770:	20000d61 	.word	0x20000d61
 8007774:	40010c00 	.word	0x40010c00
 8007778:	20000d83 	.word	0x20000d83
 800777c:	20000d8a 	.word	0x20000d8a
 8007780:	20000d85 	.word	0x20000d85
 8007784:	20000d8c 	.word	0x20000d8c
 8007788:	20000d96 	.word	0x20000d96
 800778c:	20000d39 	.word	0x20000d39
 8007790:	20000d86 	.word	0x20000d86
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8007794:	4b97      	ldr	r3, [pc, #604]	; (80079f4 <checkAktifCalisma+0x1590>)
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	2b00      	cmp	r3, #0
 800779a:	d013      	beq.n	80077c4 <checkAktifCalisma+0x1360>
 800779c:	4b96      	ldr	r3, [pc, #600]	; (80079f8 <checkAktifCalisma+0x1594>)
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d00f      	beq.n	80077c4 <checkAktifCalisma+0x1360>
 80077a4:	4b95      	ldr	r3, [pc, #596]	; (80079fc <checkAktifCalisma+0x1598>)
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	f083 0301 	eor.w	r3, r3, #1
 80077ac:	b2db      	uxtb	r3, r3
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d008      	beq.n	80077c4 <checkAktifCalisma+0x1360>
			emniyetCercevesihatasi=0;
 80077b2:	4b90      	ldr	r3, [pc, #576]	; (80079f4 <checkAktifCalisma+0x1590>)
 80077b4:	2200      	movs	r2, #0
 80077b6:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 80077b8:	4b91      	ldr	r3, [pc, #580]	; (8007a00 <checkAktifCalisma+0x159c>)
 80077ba:	2200      	movs	r2, #0
 80077bc:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 80077be:	2002      	movs	r0, #2
 80077c0:	f7fd ffae 	bl	8005720 <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 80077c4:	4b8f      	ldr	r3, [pc, #572]	; (8007a04 <checkAktifCalisma+0x15a0>)
 80077c6:	781b      	ldrb	r3, [r3, #0]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d11c      	bne.n	8007806 <checkAktifCalisma+0x13a2>
 80077cc:	4b8e      	ldr	r3, [pc, #568]	; (8007a08 <checkAktifCalisma+0x15a4>)
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	2b01      	cmp	r3, #1
 80077d2:	d118      	bne.n	8007806 <checkAktifCalisma+0x13a2>
 80077d4:	4b8d      	ldr	r3, [pc, #564]	; (8007a0c <checkAktifCalisma+0x15a8>)
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d014      	beq.n	8007806 <checkAktifCalisma+0x13a2>
 80077dc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80077e0:	488b      	ldr	r0, [pc, #556]	; (8007a10 <checkAktifCalisma+0x15ac>)
 80077e2:	f002 f9ad 	bl	8009b40 <HAL_GPIO_ReadPin>
 80077e6:	4603      	mov	r3, r0
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d10c      	bne.n	8007806 <checkAktifCalisma+0x13a2>
			hataVar=1;
 80077ec:	4b89      	ldr	r3, [pc, #548]	; (8007a14 <checkAktifCalisma+0x15b0>)
 80077ee:	2201      	movs	r2, #1
 80077f0:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 80077f2:	2003      	movs	r0, #3
 80077f4:	f7fd ffe8 	bl	80057c8 <hataKoduLcdGoster>
			hata2EEPROM(3);
 80077f8:	2003      	movs	r0, #3
 80077fa:	f7fe fb81 	bl	8005f00 <hata2EEPROM>
			basinchatasi=1;
 80077fe:	4b86      	ldr	r3, [pc, #536]	; (8007a18 <checkAktifCalisma+0x15b4>)
 8007800:	2201      	movs	r2, #1
 8007802:	701a      	strb	r2, [r3, #0]
 8007804:	e015      	b.n	8007832 <checkAktifCalisma+0x13ce>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 8007806:	4b84      	ldr	r3, [pc, #528]	; (8007a18 <checkAktifCalisma+0x15b4>)
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d011      	beq.n	8007832 <checkAktifCalisma+0x13ce>
 800780e:	4b7d      	ldr	r3, [pc, #500]	; (8007a04 <checkAktifCalisma+0x15a0>)
 8007810:	781b      	ldrb	r3, [r3, #0]
 8007812:	2b01      	cmp	r3, #1
 8007814:	d10d      	bne.n	8007832 <checkAktifCalisma+0x13ce>
 8007816:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800781a:	4880      	ldr	r0, [pc, #512]	; (8007a1c <checkAktifCalisma+0x15b8>)
 800781c:	f002 f990 	bl	8009b40 <HAL_GPIO_ReadPin>
 8007820:	4603      	mov	r3, r0
 8007822:	2b01      	cmp	r3, #1
 8007824:	d105      	bne.n	8007832 <checkAktifCalisma+0x13ce>
			basinchatasi=0;
 8007826:	4b7c      	ldr	r3, [pc, #496]	; (8007a18 <checkAktifCalisma+0x15b4>)
 8007828:	2200      	movs	r2, #0
 800782a:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 800782c:	2003      	movs	r0, #3
 800782e:	f7fd ff77 	bl	8005720 <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8007832:	4b7b      	ldr	r3, [pc, #492]	; (8007a20 <checkAktifCalisma+0x15bc>)
 8007834:	781b      	ldrb	r3, [r3, #0]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d103      	bne.n	8007842 <checkAktifCalisma+0x13de>
 800783a:	4b7a      	ldr	r3, [pc, #488]	; (8007a24 <checkAktifCalisma+0x15c0>)
 800783c:	781b      	ldrb	r3, [r3, #0]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d01c      	beq.n	800787c <checkAktifCalisma+0x1418>
 8007842:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007846:	4878      	ldr	r0, [pc, #480]	; (8007a28 <checkAktifCalisma+0x15c4>)
 8007848:	f002 f97a 	bl	8009b40 <HAL_GPIO_ReadPin>
 800784c:	4603      	mov	r3, r0
 800784e:	2b01      	cmp	r3, #1
 8007850:	d114      	bne.n	800787c <checkAktifCalisma+0x1418>
 8007852:	4b76      	ldr	r3, [pc, #472]	; (8007a2c <checkAktifCalisma+0x15c8>)
 8007854:	781b      	ldrb	r3, [r3, #0]
 8007856:	2b01      	cmp	r3, #1
 8007858:	d003      	beq.n	8007862 <checkAktifCalisma+0x13fe>
 800785a:	4b74      	ldr	r3, [pc, #464]	; (8007a2c <checkAktifCalisma+0x15c8>)
 800785c:	781b      	ldrb	r3, [r3, #0]
 800785e:	2b03      	cmp	r3, #3
 8007860:	d10c      	bne.n	800787c <checkAktifCalisma+0x1418>
			hataVar=1;
 8007862:	4b6c      	ldr	r3, [pc, #432]	; (8007a14 <checkAktifCalisma+0x15b0>)
 8007864:	2201      	movs	r2, #1
 8007866:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 8007868:	2004      	movs	r0, #4
 800786a:	f7fd ffad 	bl	80057c8 <hataKoduLcdGoster>
			hata2EEPROM(4);
 800786e:	2004      	movs	r0, #4
 8007870:	f7fe fb46 	bl	8005f00 <hata2EEPROM>
			katkapisivicihatasi=1;
 8007874:	4b6e      	ldr	r3, [pc, #440]	; (8007a30 <checkAktifCalisma+0x15cc>)
 8007876:	2201      	movs	r2, #1
 8007878:	701a      	strb	r2, [r3, #0]
 800787a:	e01f      	b.n	80078bc <checkAktifCalisma+0x1458>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 800787c:	4b6c      	ldr	r3, [pc, #432]	; (8007a30 <checkAktifCalisma+0x15cc>)
 800787e:	781b      	ldrb	r3, [r3, #0]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d01b      	beq.n	80078bc <checkAktifCalisma+0x1458>
 8007884:	4b6b      	ldr	r3, [pc, #428]	; (8007a34 <checkAktifCalisma+0x15d0>)
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d017      	beq.n	80078bc <checkAktifCalisma+0x1458>
 800788c:	4b64      	ldr	r3, [pc, #400]	; (8007a20 <checkAktifCalisma+0x15bc>)
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	f083 0301 	eor.w	r3, r3, #1
 8007894:	b2db      	uxtb	r3, r3
 8007896:	2b00      	cmp	r3, #0
 8007898:	d010      	beq.n	80078bc <checkAktifCalisma+0x1458>
 800789a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800789e:	4862      	ldr	r0, [pc, #392]	; (8007a28 <checkAktifCalisma+0x15c4>)
 80078a0:	f002 f94e 	bl	8009b40 <HAL_GPIO_ReadPin>
 80078a4:	4603      	mov	r3, r0
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d108      	bne.n	80078bc <checkAktifCalisma+0x1458>
			katkapisivicihatasi=0;
 80078aa:	4b61      	ldr	r3, [pc, #388]	; (8007a30 <checkAktifCalisma+0x15cc>)
 80078ac:	2200      	movs	r2, #0
 80078ae:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 80078b0:	4b5c      	ldr	r3, [pc, #368]	; (8007a24 <checkAktifCalisma+0x15c0>)
 80078b2:	2200      	movs	r2, #0
 80078b4:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 80078b6:	2004      	movs	r0, #4
 80078b8:	f7fd ff32 	bl	8005720 <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 80078bc:	4b58      	ldr	r3, [pc, #352]	; (8007a20 <checkAktifCalisma+0x15bc>)
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d103      	bne.n	80078cc <checkAktifCalisma+0x1468>
 80078c4:	4b5c      	ldr	r3, [pc, #368]	; (8007a38 <checkAktifCalisma+0x15d4>)
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d01c      	beq.n	8007906 <checkAktifCalisma+0x14a2>
 80078cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80078d0:	4855      	ldr	r0, [pc, #340]	; (8007a28 <checkAktifCalisma+0x15c4>)
 80078d2:	f002 f935 	bl	8009b40 <HAL_GPIO_ReadPin>
 80078d6:	4603      	mov	r3, r0
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d114      	bne.n	8007906 <checkAktifCalisma+0x14a2>
 80078dc:	4b53      	ldr	r3, [pc, #332]	; (8007a2c <checkAktifCalisma+0x15c8>)
 80078de:	781b      	ldrb	r3, [r3, #0]
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d003      	beq.n	80078ec <checkAktifCalisma+0x1488>
 80078e4:	4b51      	ldr	r3, [pc, #324]	; (8007a2c <checkAktifCalisma+0x15c8>)
 80078e6:	781b      	ldrb	r3, [r3, #0]
 80078e8:	2b03      	cmp	r3, #3
 80078ea:	d10c      	bne.n	8007906 <checkAktifCalisma+0x14a2>
			hataVar=1;
 80078ec:	4b49      	ldr	r3, [pc, #292]	; (8007a14 <checkAktifCalisma+0x15b0>)
 80078ee:	2201      	movs	r2, #1
 80078f0:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 80078f2:	2005      	movs	r0, #5
 80078f4:	f7fd ff68 	bl	80057c8 <hataKoduLcdGoster>
			hata2EEPROM(5);
 80078f8:	2005      	movs	r0, #5
 80078fa:	f7fe fb01 	bl	8005f00 <hata2EEPROM>
			tablakapisivicihatasi=1;
 80078fe:	4b4f      	ldr	r3, [pc, #316]	; (8007a3c <checkAktifCalisma+0x15d8>)
 8007900:	2201      	movs	r2, #1
 8007902:	701a      	strb	r2, [r3, #0]
 8007904:	e023      	b.n	800794e <checkAktifCalisma+0x14ea>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8007906:	4b4d      	ldr	r3, [pc, #308]	; (8007a3c <checkAktifCalisma+0x15d8>)
 8007908:	781b      	ldrb	r3, [r3, #0]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d01f      	beq.n	800794e <checkAktifCalisma+0x14ea>
 800790e:	4b49      	ldr	r3, [pc, #292]	; (8007a34 <checkAktifCalisma+0x15d0>)
 8007910:	781b      	ldrb	r3, [r3, #0]
 8007912:	2b00      	cmp	r3, #0
 8007914:	d01b      	beq.n	800794e <checkAktifCalisma+0x14ea>
 8007916:	4b42      	ldr	r3, [pc, #264]	; (8007a20 <checkAktifCalisma+0x15bc>)
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	f083 0301 	eor.w	r3, r3, #1
 800791e:	b2db      	uxtb	r3, r3
 8007920:	2b00      	cmp	r3, #0
 8007922:	d014      	beq.n	800794e <checkAktifCalisma+0x14ea>
 8007924:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007928:	483f      	ldr	r0, [pc, #252]	; (8007a28 <checkAktifCalisma+0x15c4>)
 800792a:	f002 f909 	bl	8009b40 <HAL_GPIO_ReadPin>
 800792e:	4603      	mov	r3, r0
 8007930:	2b00      	cmp	r3, #0
 8007932:	d10c      	bne.n	800794e <checkAktifCalisma+0x14ea>
 8007934:	4b3f      	ldr	r3, [pc, #252]	; (8007a34 <checkAktifCalisma+0x15d0>)
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d008      	beq.n	800794e <checkAktifCalisma+0x14ea>
			tablakapisivicihatasi=0;
 800793c:	4b3f      	ldr	r3, [pc, #252]	; (8007a3c <checkAktifCalisma+0x15d8>)
 800793e:	2200      	movs	r2, #0
 8007940:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 8007942:	4b3d      	ldr	r3, [pc, #244]	; (8007a38 <checkAktifCalisma+0x15d4>)
 8007944:	2200      	movs	r2, #0
 8007946:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 8007948:	2005      	movs	r0, #5
 800794a:	f7fd fee9 	bl	8005720 <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 800794e:	4b2f      	ldr	r3, [pc, #188]	; (8007a0c <checkAktifCalisma+0x15a8>)
 8007950:	781b      	ldrb	r3, [r3, #0]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d107      	bne.n	8007966 <checkAktifCalisma+0x1502>
 8007956:	4b29      	ldr	r3, [pc, #164]	; (80079fc <checkAktifCalisma+0x1598>)
 8007958:	781b      	ldrb	r3, [r3, #0]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d103      	bne.n	8007966 <checkAktifCalisma+0x1502>
 800795e:	4b38      	ldr	r3, [pc, #224]	; (8007a40 <checkAktifCalisma+0x15dc>)
 8007960:	781b      	ldrb	r3, [r3, #0]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d014      	beq.n	8007990 <checkAktifCalisma+0x152c>
		    if(millis-timer4>=makineCalismaTmr) {
 8007966:	4b37      	ldr	r3, [pc, #220]	; (8007a44 <checkAktifCalisma+0x15e0>)
 8007968:	681a      	ldr	r2, [r3, #0]
 800796a:	4b37      	ldr	r3, [pc, #220]	; (8007a48 <checkAktifCalisma+0x15e4>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	1ad3      	subs	r3, r2, r3
 8007970:	4a36      	ldr	r2, [pc, #216]	; (8007a4c <checkAktifCalisma+0x15e8>)
 8007972:	7812      	ldrb	r2, [r2, #0]
 8007974:	4293      	cmp	r3, r2
 8007976:	d30b      	bcc.n	8007990 <checkAktifCalisma+0x152c>
			  	hataVar=1;
 8007978:	4b26      	ldr	r3, [pc, #152]	; (8007a14 <checkAktifCalisma+0x15b0>)
 800797a:	2201      	movs	r2, #1
 800797c:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 800797e:	2006      	movs	r0, #6
 8007980:	f7fd ff22 	bl	80057c8 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 8007984:	2006      	movs	r0, #6
 8007986:	f7fe fabb 	bl	8005f00 <hata2EEPROM>
			  	maksimumcalismahatasi=1;
 800798a:	4b31      	ldr	r3, [pc, #196]	; (8007a50 <checkAktifCalisma+0x15ec>)
 800798c:	2201      	movs	r2, #1
 800798e:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8007990:	4b2f      	ldr	r3, [pc, #188]	; (8007a50 <checkAktifCalisma+0x15ec>)
 8007992:	781b      	ldrb	r3, [r3, #0]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d013      	beq.n	80079c0 <checkAktifCalisma+0x155c>
 8007998:	2108      	movs	r1, #8
 800799a:	4823      	ldr	r0, [pc, #140]	; (8007a28 <checkAktifCalisma+0x15c4>)
 800799c:	f002 f8d0 	bl	8009b40 <HAL_GPIO_ReadPin>
 80079a0:	4603      	mov	r3, r0
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d00c      	beq.n	80079c0 <checkAktifCalisma+0x155c>
 80079a6:	4b1e      	ldr	r3, [pc, #120]	; (8007a20 <checkAktifCalisma+0x15bc>)
 80079a8:	781b      	ldrb	r3, [r3, #0]
 80079aa:	f083 0301 	eor.w	r3, r3, #1
 80079ae:	b2db      	uxtb	r3, r3
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d005      	beq.n	80079c0 <checkAktifCalisma+0x155c>
			maksimumcalismahatasi=0;
 80079b4:	4b26      	ldr	r3, [pc, #152]	; (8007a50 <checkAktifCalisma+0x15ec>)
 80079b6:	2200      	movs	r2, #0
 80079b8:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 80079ba:	2006      	movs	r0, #6
 80079bc:	f7fd feb0 	bl	8005720 <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 80079c0:	4b24      	ldr	r3, [pc, #144]	; (8007a54 <checkAktifCalisma+0x15f0>)
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d10b      	bne.n	80079e0 <checkAktifCalisma+0x157c>
 80079c8:	4b0c      	ldr	r3, [pc, #48]	; (80079fc <checkAktifCalisma+0x1598>)
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d107      	bne.n	80079e0 <checkAktifCalisma+0x157c>
 80079d0:	4b21      	ldr	r3, [pc, #132]	; (8007a58 <checkAktifCalisma+0x15f4>)
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d103      	bne.n	80079e0 <checkAktifCalisma+0x157c>
 80079d8:	4b19      	ldr	r3, [pc, #100]	; (8007a40 <checkAktifCalisma+0x15dc>)
 80079da:	781b      	ldrb	r3, [r3, #0]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d03f      	beq.n	8007a60 <checkAktifCalisma+0x15fc>
			makineCalisiyor=0;
 80079e0:	4b1e      	ldr	r3, [pc, #120]	; (8007a5c <checkAktifCalisma+0x15f8>)
 80079e2:	2200      	movs	r2, #0
 80079e4:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 80079e6:	4b0f      	ldr	r3, [pc, #60]	; (8007a24 <checkAktifCalisma+0x15c0>)
 80079e8:	2201      	movs	r2, #1
 80079ea:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 80079ec:	4b12      	ldr	r3, [pc, #72]	; (8007a38 <checkAktifCalisma+0x15d4>)
 80079ee:	2201      	movs	r2, #1
 80079f0:	701a      	strb	r2, [r3, #0]
 80079f2:	e03c      	b.n	8007a6e <checkAktifCalisma+0x160a>
 80079f4:	20000d86 	.word	0x20000d86
 80079f8:	20000d8c 	.word	0x20000d8c
 80079fc:	20000d6d 	.word	0x20000d6d
 8007a00:	20000d96 	.word	0x20000d96
 8007a04:	20000d38 	.word	0x20000d38
 8007a08:	20000d3c 	.word	0x20000d3c
 8007a0c:	20000d89 	.word	0x20000d89
 8007a10:	40011000 	.word	0x40011000
 8007a14:	20000d8a 	.word	0x20000d8a
 8007a18:	20000d93 	.word	0x20000d93
 8007a1c:	40010c00 	.word	0x40010c00
 8007a20:	20000d83 	.word	0x20000d83
 8007a24:	20000d97 	.word	0x20000d97
 8007a28:	40010800 	.word	0x40010800
 8007a2c:	20000d3d 	.word	0x20000d3d
 8007a30:	20000d94 	.word	0x20000d94
 8007a34:	20000d77 	.word	0x20000d77
 8007a38:	20000d98 	.word	0x20000d98
 8007a3c:	20000d95 	.word	0x20000d95
 8007a40:	20000d6c 	.word	0x20000d6c
 8007a44:	20000cc0 	.word	0x20000cc0
 8007a48:	20000cd4 	.word	0x20000cd4
 8007a4c:	20000d4d 	.word	0x20000d4d
 8007a50:	20000d84 	.word	0x20000d84
 8007a54:	20000d6a 	.word	0x20000d6a
 8007a58:	20000d6b 	.word	0x20000d6b
 8007a5c:	20000d8b 	.word	0x20000d8b
		} else {
			makineCalisiyor=1;
 8007a60:	4b1e      	ldr	r3, [pc, #120]	; (8007adc <checkAktifCalisma+0x1678>)
 8007a62:	2201      	movs	r2, #1
 8007a64:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 8007a66:	4b1e      	ldr	r3, [pc, #120]	; (8007ae0 <checkAktifCalisma+0x167c>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a1e      	ldr	r2, [pc, #120]	; (8007ae4 <checkAktifCalisma+0x1680>)
 8007a6c:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8007a6e:	4b1e      	ldr	r3, [pc, #120]	; (8007ae8 <checkAktifCalisma+0x1684>)
 8007a70:	781b      	ldrb	r3, [r3, #0]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d02f      	beq.n	8007ad6 <checkAktifCalisma+0x1672>
 8007a76:	4b1d      	ldr	r3, [pc, #116]	; (8007aec <checkAktifCalisma+0x1688>)
 8007a78:	781b      	ldrb	r3, [r3, #0]
 8007a7a:	f083 0301 	eor.w	r3, r3, #1
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d028      	beq.n	8007ad6 <checkAktifCalisma+0x1672>
 8007a84:	4b1a      	ldr	r3, [pc, #104]	; (8007af0 <checkAktifCalisma+0x168c>)
 8007a86:	781b      	ldrb	r3, [r3, #0]
 8007a88:	f083 0301 	eor.w	r3, r3, #1
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d021      	beq.n	8007ad6 <checkAktifCalisma+0x1672>
 8007a92:	4b18      	ldr	r3, [pc, #96]	; (8007af4 <checkAktifCalisma+0x1690>)
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	f083 0301 	eor.w	r3, r3, #1
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d01a      	beq.n	8007ad6 <checkAktifCalisma+0x1672>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8007aa0:	4b15      	ldr	r3, [pc, #84]	; (8007af8 <checkAktifCalisma+0x1694>)
 8007aa2:	781b      	ldrb	r3, [r3, #0]
 8007aa4:	f083 0301 	eor.w	r3, r3, #1
 8007aa8:	b2db      	uxtb	r3, r3
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d013      	beq.n	8007ad6 <checkAktifCalisma+0x1672>
 8007aae:	4b13      	ldr	r3, [pc, #76]	; (8007afc <checkAktifCalisma+0x1698>)
 8007ab0:	781b      	ldrb	r3, [r3, #0]
 8007ab2:	f083 0301 	eor.w	r3, r3, #1
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d00c      	beq.n	8007ad6 <checkAktifCalisma+0x1672>
 8007abc:	4b10      	ldr	r3, [pc, #64]	; (8007b00 <checkAktifCalisma+0x169c>)
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	f083 0301 	eor.w	r3, r3, #1
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d005      	beq.n	8007ad6 <checkAktifCalisma+0x1672>
			hataVar=0;
 8007aca:	4b07      	ldr	r3, [pc, #28]	; (8007ae8 <checkAktifCalisma+0x1684>)
 8007acc:	2200      	movs	r2, #0
 8007ace:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 8007ad0:	2007      	movs	r0, #7
 8007ad2:	f7fd fe25 	bl	8005720 <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 8007ad6:	bf00      	nop
 8007ad8:	bd80      	pop	{r7, pc}
 8007ada:	bf00      	nop
 8007adc:	20000d8b 	.word	0x20000d8b
 8007ae0:	20000cc0 	.word	0x20000cc0
 8007ae4:	20000cd4 	.word	0x20000cd4
 8007ae8:	20000d8a 	.word	0x20000d8a
 8007aec:	20000d85 	.word	0x20000d85
 8007af0:	20000d86 	.word	0x20000d86
 8007af4:	20000d93 	.word	0x20000d93
 8007af8:	20000d94 	.word	0x20000d94
 8007afc:	20000d95 	.word	0x20000d95
 8007b00:	20000d84 	.word	0x20000d84

08007b04 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8007b04:	b580      	push	{r7, lr}
 8007b06:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8007b08:	4b8b      	ldr	r3, [pc, #556]	; (8007d38 <checkDemoModCalisma+0x234>)
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	2b01      	cmp	r3, #1
 8007b0e:	f040 8229 	bne.w	8007f64 <checkDemoModCalisma+0x460>
 8007b12:	4b8a      	ldr	r3, [pc, #552]	; (8007d3c <checkDemoModCalisma+0x238>)
 8007b14:	781b      	ldrb	r3, [r3, #0]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	f000 8224 	beq.w	8007f64 <checkDemoModCalisma+0x460>
 8007b1c:	4b88      	ldr	r3, [pc, #544]	; (8007d40 <checkDemoModCalisma+0x23c>)
 8007b1e:	781b      	ldrb	r3, [r3, #0]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	f040 821f 	bne.w	8007f64 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8007b26:	2102      	movs	r1, #2
 8007b28:	4886      	ldr	r0, [pc, #536]	; (8007d44 <checkDemoModCalisma+0x240>)
 8007b2a:	f002 f809 	bl	8009b40 <HAL_GPIO_ReadPin>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d11d      	bne.n	8007b70 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 8007b34:	4b84      	ldr	r3, [pc, #528]	; (8007d48 <checkDemoModCalisma+0x244>)
 8007b36:	781b      	ldrb	r3, [r3, #0]
 8007b38:	f083 0301 	eor.w	r3, r3, #1
 8007b3c:	b2db      	uxtb	r3, r3
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d016      	beq.n	8007b70 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 8007b42:	4b82      	ldr	r3, [pc, #520]	; (8007d4c <checkDemoModCalisma+0x248>)
 8007b44:	781b      	ldrb	r3, [r3, #0]
 8007b46:	f083 0301 	eor.w	r3, r3, #1
 8007b4a:	b2db      	uxtb	r3, r3
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d00f      	beq.n	8007b70 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 8007b50:	4b7f      	ldr	r3, [pc, #508]	; (8007d50 <checkDemoModCalisma+0x24c>)
 8007b52:	781b      	ldrb	r3, [r3, #0]
 8007b54:	f083 0301 	eor.w	r3, r3, #1
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d008      	beq.n	8007b70 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8007b5e:	2201      	movs	r2, #1
 8007b60:	2104      	movs	r1, #4
 8007b62:	487c      	ldr	r0, [pc, #496]	; (8007d54 <checkDemoModCalisma+0x250>)
 8007b64:	f002 f803 	bl	8009b6e <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 8007b68:	4b7b      	ldr	r3, [pc, #492]	; (8007d58 <checkDemoModCalisma+0x254>)
 8007b6a:	2201      	movs	r2, #1
 8007b6c:	701a      	strb	r2, [r3, #0]
 8007b6e:	e00e      	b.n	8007b8e <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8007b70:	2102      	movs	r1, #2
 8007b72:	4874      	ldr	r0, [pc, #464]	; (8007d44 <checkDemoModCalisma+0x240>)
 8007b74:	f001 ffe4 	bl	8009b40 <HAL_GPIO_ReadPin>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	2b01      	cmp	r3, #1
 8007b7c:	d107      	bne.n	8007b8e <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007b7e:	2200      	movs	r2, #0
 8007b80:	2104      	movs	r1, #4
 8007b82:	4874      	ldr	r0, [pc, #464]	; (8007d54 <checkDemoModCalisma+0x250>)
 8007b84:	f001 fff3 	bl	8009b6e <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 8007b88:	4b73      	ldr	r3, [pc, #460]	; (8007d58 <checkDemoModCalisma+0x254>)
 8007b8a:	2200      	movs	r2, #0
 8007b8c:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8007b8e:	4b72      	ldr	r3, [pc, #456]	; (8007d58 <checkDemoModCalisma+0x254>)
 8007b90:	781b      	ldrb	r3, [r3, #0]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d10b      	bne.n	8007bae <checkDemoModCalisma+0xaa>
 8007b96:	4b6d      	ldr	r3, [pc, #436]	; (8007d4c <checkDemoModCalisma+0x248>)
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d107      	bne.n	8007bae <checkDemoModCalisma+0xaa>
 8007b9e:	4b6c      	ldr	r3, [pc, #432]	; (8007d50 <checkDemoModCalisma+0x24c>)
 8007ba0:	781b      	ldrb	r3, [r3, #0]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d103      	bne.n	8007bae <checkDemoModCalisma+0xaa>
 8007ba6:	4b68      	ldr	r3, [pc, #416]	; (8007d48 <checkDemoModCalisma+0x244>)
 8007ba8:	781b      	ldrb	r3, [r3, #0]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d00c      	beq.n	8007bc8 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8007bae:	2201      	movs	r2, #1
 8007bb0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007bb4:	4867      	ldr	r0, [pc, #412]	; (8007d54 <checkDemoModCalisma+0x250>)
 8007bb6:	f001 ffda 	bl	8009b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8007bba:	2201      	movs	r2, #1
 8007bbc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007bc0:	4864      	ldr	r0, [pc, #400]	; (8007d54 <checkDemoModCalisma+0x250>)
 8007bc2:	f001 ffd4 	bl	8009b6e <HAL_GPIO_WritePin>
 8007bc6:	e00b      	b.n	8007be0 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007bc8:	2200      	movs	r2, #0
 8007bca:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007bce:	4861      	ldr	r0, [pc, #388]	; (8007d54 <checkDemoModCalisma+0x250>)
 8007bd0:	f001 ffcd 	bl	8009b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007bda:	485e      	ldr	r0, [pc, #376]	; (8007d54 <checkDemoModCalisma+0x250>)
 8007bdc:	f001 ffc7 	bl	8009b6e <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007be0:	2102      	movs	r1, #2
 8007be2:	4858      	ldr	r0, [pc, #352]	; (8007d44 <checkDemoModCalisma+0x240>)
 8007be4:	f001 ffac 	bl	8009b40 <HAL_GPIO_ReadPin>
 8007be8:	4603      	mov	r3, r0
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d10d      	bne.n	8007c0a <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8007bee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007bf2:	4854      	ldr	r0, [pc, #336]	; (8007d44 <checkDemoModCalisma+0x240>)
 8007bf4:	f001 ffa4 	bl	8009b40 <HAL_GPIO_ReadPin>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d105      	bne.n	8007c0a <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 8007bfe:	4b56      	ldr	r3, [pc, #344]	; (8007d58 <checkDemoModCalisma+0x254>)
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	f083 0301 	eor.w	r3, r3, #1
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007c0a:	2102      	movs	r1, #2
 8007c0c:	484d      	ldr	r0, [pc, #308]	; (8007d44 <checkDemoModCalisma+0x240>)
 8007c0e:	f001 ff97 	bl	8009b40 <HAL_GPIO_ReadPin>
 8007c12:	4603      	mov	r3, r0
 8007c14:	2b01      	cmp	r3, #1
 8007c16:	d125      	bne.n	8007c64 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8007c18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007c1c:	4849      	ldr	r0, [pc, #292]	; (8007d44 <checkDemoModCalisma+0x240>)
 8007c1e:	f001 ff8f 	bl	8009b40 <HAL_GPIO_ReadPin>
 8007c22:	4603      	mov	r3, r0
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d11d      	bne.n	8007c64 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 8007c28:	4b4b      	ldr	r3, [pc, #300]	; (8007d58 <checkDemoModCalisma+0x254>)
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	f083 0301 	eor.w	r3, r3, #1
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d016      	beq.n	8007c64 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 8007c36:	4b44      	ldr	r3, [pc, #272]	; (8007d48 <checkDemoModCalisma+0x244>)
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	f083 0301 	eor.w	r3, r3, #1
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d00f      	beq.n	8007c64 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 8007c44:	4b42      	ldr	r3, [pc, #264]	; (8007d50 <checkDemoModCalisma+0x24c>)
 8007c46:	781b      	ldrb	r3, [r3, #0]
 8007c48:	f083 0301 	eor.w	r3, r3, #1
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d008      	beq.n	8007c64 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8007c52:	2201      	movs	r2, #1
 8007c54:	2120      	movs	r1, #32
 8007c56:	483b      	ldr	r0, [pc, #236]	; (8007d44 <checkDemoModCalisma+0x240>)
 8007c58:	f001 ff89 	bl	8009b6e <HAL_GPIO_WritePin>
			demoDevYukari=1;
 8007c5c:	4b3b      	ldr	r3, [pc, #236]	; (8007d4c <checkDemoModCalisma+0x248>)
 8007c5e:	2201      	movs	r2, #1
 8007c60:	701a      	strb	r2, [r3, #0]
 8007c62:	e007      	b.n	8007c74 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007c64:	2200      	movs	r2, #0
 8007c66:	2120      	movs	r1, #32
 8007c68:	4836      	ldr	r0, [pc, #216]	; (8007d44 <checkDemoModCalisma+0x240>)
 8007c6a:	f001 ff80 	bl	8009b6e <HAL_GPIO_WritePin>
			demoDevYukari=0;
 8007c6e:	4b37      	ldr	r3, [pc, #220]	; (8007d4c <checkDemoModCalisma+0x248>)
 8007c70:	2200      	movs	r2, #0
 8007c72:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007c74:	2102      	movs	r1, #2
 8007c76:	4833      	ldr	r0, [pc, #204]	; (8007d44 <checkDemoModCalisma+0x240>)
 8007c78:	f001 ff62 	bl	8009b40 <HAL_GPIO_ReadPin>
 8007c7c:	4603      	mov	r3, r0
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d125      	bne.n	8007cce <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8007c82:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007c86:	482f      	ldr	r0, [pc, #188]	; (8007d44 <checkDemoModCalisma+0x240>)
 8007c88:	f001 ff5a 	bl	8009b40 <HAL_GPIO_ReadPin>
 8007c8c:	4603      	mov	r3, r0
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d11d      	bne.n	8007cce <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 8007c92:	4b31      	ldr	r3, [pc, #196]	; (8007d58 <checkDemoModCalisma+0x254>)
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	f083 0301 	eor.w	r3, r3, #1
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d016      	beq.n	8007cce <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 8007ca0:	4b2a      	ldr	r3, [pc, #168]	; (8007d4c <checkDemoModCalisma+0x248>)
 8007ca2:	781b      	ldrb	r3, [r3, #0]
 8007ca4:	f083 0301 	eor.w	r3, r3, #1
 8007ca8:	b2db      	uxtb	r3, r3
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d00f      	beq.n	8007cce <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 8007cae:	4b26      	ldr	r3, [pc, #152]	; (8007d48 <checkDemoModCalisma+0x244>)
 8007cb0:	781b      	ldrb	r3, [r3, #0]
 8007cb2:	f083 0301 	eor.w	r3, r3, #1
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d008      	beq.n	8007cce <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	2110      	movs	r1, #16
 8007cc0:	4820      	ldr	r0, [pc, #128]	; (8007d44 <checkDemoModCalisma+0x240>)
 8007cc2:	f001 ff54 	bl	8009b6e <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 8007cc6:	4b22      	ldr	r3, [pc, #136]	; (8007d50 <checkDemoModCalisma+0x24c>)
 8007cc8:	2201      	movs	r2, #1
 8007cca:	701a      	strb	r2, [r3, #0]
 8007ccc:	e007      	b.n	8007cde <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007cce:	2200      	movs	r2, #0
 8007cd0:	2110      	movs	r1, #16
 8007cd2:	481c      	ldr	r0, [pc, #112]	; (8007d44 <checkDemoModCalisma+0x240>)
 8007cd4:	f001 ff4b 	bl	8009b6e <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 8007cd8:	4b1d      	ldr	r3, [pc, #116]	; (8007d50 <checkDemoModCalisma+0x24c>)
 8007cda:	2200      	movs	r2, #0
 8007cdc:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8007cde:	2104      	movs	r1, #4
 8007ce0:	4818      	ldr	r0, [pc, #96]	; (8007d44 <checkDemoModCalisma+0x240>)
 8007ce2:	f001 ff2d 	bl	8009b40 <HAL_GPIO_ReadPin>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d139      	bne.n	8007d60 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 8007cec:	4b1a      	ldr	r3, [pc, #104]	; (8007d58 <checkDemoModCalisma+0x254>)
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	f083 0301 	eor.w	r3, r3, #1
 8007cf4:	b2db      	uxtb	r3, r3
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d032      	beq.n	8007d60 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 8007cfa:	4b15      	ldr	r3, [pc, #84]	; (8007d50 <checkDemoModCalisma+0x24c>)
 8007cfc:	781b      	ldrb	r3, [r3, #0]
 8007cfe:	f083 0301 	eor.w	r3, r3, #1
 8007d02:	b2db      	uxtb	r3, r3
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d02b      	beq.n	8007d60 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 8007d08:	4b10      	ldr	r3, [pc, #64]	; (8007d4c <checkDemoModCalisma+0x248>)
 8007d0a:	781b      	ldrb	r3, [r3, #0]
 8007d0c:	f083 0301 	eor.w	r3, r3, #1
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d024      	beq.n	8007d60 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8007d16:	2201      	movs	r2, #1
 8007d18:	2102      	movs	r1, #2
 8007d1a:	480e      	ldr	r0, [pc, #56]	; (8007d54 <checkDemoModCalisma+0x250>)
 8007d1c:	f001 ff27 	bl	8009b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8007d20:	2201      	movs	r2, #1
 8007d22:	2101      	movs	r1, #1
 8007d24:	480b      	ldr	r0, [pc, #44]	; (8007d54 <checkDemoModCalisma+0x250>)
 8007d26:	f001 ff22 	bl	8009b6e <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 8007d2a:	4b07      	ldr	r3, [pc, #28]	; (8007d48 <checkDemoModCalisma+0x244>)
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 8007d30:	4b0a      	ldr	r3, [pc, #40]	; (8007d5c <checkDemoModCalisma+0x258>)
 8007d32:	2201      	movs	r2, #1
 8007d34:	701a      	strb	r2, [r3, #0]
 8007d36:	e027      	b.n	8007d88 <checkDemoModCalisma+0x284>
 8007d38:	20000d53 	.word	0x20000d53
 8007d3c:	20000d87 	.word	0x20000d87
 8007d40:	20000d52 	.word	0x20000d52
 8007d44:	40011000 	.word	0x40011000
 8007d48:	20000d8e 	.word	0x20000d8e
 8007d4c:	20000d8f 	.word	0x20000d8f
 8007d50:	20000d90 	.word	0x20000d90
 8007d54:	40010c00 	.word	0x40010c00
 8007d58:	20000d8d 	.word	0x20000d8d
 8007d5c:	20000d73 	.word	0x20000d73
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8007d60:	2104      	movs	r1, #4
 8007d62:	48a0      	ldr	r0, [pc, #640]	; (8007fe4 <checkDemoModCalisma+0x4e0>)
 8007d64:	f001 feec 	bl	8009b40 <HAL_GPIO_ReadPin>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d10c      	bne.n	8007d88 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007d6e:	2200      	movs	r2, #0
 8007d70:	2102      	movs	r1, #2
 8007d72:	489d      	ldr	r0, [pc, #628]	; (8007fe8 <checkDemoModCalisma+0x4e4>)
 8007d74:	f001 fefb 	bl	8009b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007d78:	2200      	movs	r2, #0
 8007d7a:	2101      	movs	r1, #1
 8007d7c:	489a      	ldr	r0, [pc, #616]	; (8007fe8 <checkDemoModCalisma+0x4e4>)
 8007d7e:	f001 fef6 	bl	8009b6e <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 8007d82:	4b9a      	ldr	r3, [pc, #616]	; (8007fec <checkDemoModCalisma+0x4e8>)
 8007d84:	2200      	movs	r2, #0
 8007d86:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8007d88:	2104      	movs	r1, #4
 8007d8a:	4896      	ldr	r0, [pc, #600]	; (8007fe4 <checkDemoModCalisma+0x4e0>)
 8007d8c:	f001 fed8 	bl	8009b40 <HAL_GPIO_ReadPin>
 8007d90:	4603      	mov	r3, r0
 8007d92:	2b01      	cmp	r3, #1
 8007d94:	d10d      	bne.n	8007db2 <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8007d96:	2201      	movs	r2, #1
 8007d98:	2180      	movs	r1, #128	; 0x80
 8007d9a:	4895      	ldr	r0, [pc, #596]	; (8007ff0 <checkDemoModCalisma+0x4ec>)
 8007d9c:	f001 fee7 	bl	8009b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8007da0:	2201      	movs	r2, #1
 8007da2:	2120      	movs	r1, #32
 8007da4:	4892      	ldr	r0, [pc, #584]	; (8007ff0 <checkDemoModCalisma+0x4ec>)
 8007da6:	f001 fee2 	bl	8009b6e <HAL_GPIO_WritePin>
			timer3 = millis;
 8007daa:	4b92      	ldr	r3, [pc, #584]	; (8007ff4 <checkDemoModCalisma+0x4f0>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	4a92      	ldr	r2, [pc, #584]	; (8007ff8 <checkDemoModCalisma+0x4f4>)
 8007db0:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8007db2:	4b90      	ldr	r3, [pc, #576]	; (8007ff4 <checkDemoModCalisma+0x4f0>)
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	4b90      	ldr	r3, [pc, #576]	; (8007ff8 <checkDemoModCalisma+0x4f4>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	1ad3      	subs	r3, r2, r3
 8007dbc:	2b04      	cmp	r3, #4
 8007dbe:	d909      	bls.n	8007dd4 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	2180      	movs	r1, #128	; 0x80
 8007dc4:	488a      	ldr	r0, [pc, #552]	; (8007ff0 <checkDemoModCalisma+0x4ec>)
 8007dc6:	f001 fed2 	bl	8009b6e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007dca:	2200      	movs	r2, #0
 8007dcc:	2120      	movs	r1, #32
 8007dce:	4888      	ldr	r0, [pc, #544]	; (8007ff0 <checkDemoModCalisma+0x4ec>)
 8007dd0:	f001 fecd 	bl	8009b6e <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8007dd4:	2102      	movs	r1, #2
 8007dd6:	4883      	ldr	r0, [pc, #524]	; (8007fe4 <checkDemoModCalisma+0x4e0>)
 8007dd8:	f001 feb2 	bl	8009b40 <HAL_GPIO_ReadPin>
 8007ddc:	4603      	mov	r3, r0
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d108      	bne.n	8007df4 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8007de2:	2201      	movs	r2, #1
 8007de4:	2140      	movs	r1, #64	; 0x40
 8007de6:	4882      	ldr	r0, [pc, #520]	; (8007ff0 <checkDemoModCalisma+0x4ec>)
 8007de8:	f001 fec1 	bl	8009b6e <HAL_GPIO_WritePin>
			timer3 = millis;
 8007dec:	4b81      	ldr	r3, [pc, #516]	; (8007ff4 <checkDemoModCalisma+0x4f0>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	4a81      	ldr	r2, [pc, #516]	; (8007ff8 <checkDemoModCalisma+0x4f4>)
 8007df2:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8007df4:	4b7f      	ldr	r3, [pc, #508]	; (8007ff4 <checkDemoModCalisma+0x4f0>)
 8007df6:	681a      	ldr	r2, [r3, #0]
 8007df8:	4b7f      	ldr	r3, [pc, #508]	; (8007ff8 <checkDemoModCalisma+0x4f4>)
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	1ad3      	subs	r3, r2, r3
 8007dfe:	2b04      	cmp	r3, #4
 8007e00:	d904      	bls.n	8007e0c <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007e02:	2200      	movs	r2, #0
 8007e04:	2140      	movs	r1, #64	; 0x40
 8007e06:	487a      	ldr	r0, [pc, #488]	; (8007ff0 <checkDemoModCalisma+0x4ec>)
 8007e08:	f001 feb1 	bl	8009b6e <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8007e0c:	4b7b      	ldr	r3, [pc, #492]	; (8007ffc <checkDemoModCalisma+0x4f8>)
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d058      	beq.n	8007ec6 <checkDemoModCalisma+0x3c2>
 8007e14:	4b7a      	ldr	r3, [pc, #488]	; (8008000 <checkDemoModCalisma+0x4fc>)
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d054      	beq.n	8007ec6 <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 8007e1c:	4b79      	ldr	r3, [pc, #484]	; (8008004 <checkDemoModCalisma+0x500>)
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	3301      	adds	r3, #1
 8007e22:	b2da      	uxtb	r2, r3
 8007e24:	4b77      	ldr	r3, [pc, #476]	; (8008004 <checkDemoModCalisma+0x500>)
 8007e26:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 8007e28:	4b76      	ldr	r3, [pc, #472]	; (8008004 <checkDemoModCalisma+0x500>)
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	2b09      	cmp	r3, #9
 8007e2e:	d908      	bls.n	8007e42 <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 8007e30:	4b74      	ldr	r3, [pc, #464]	; (8008004 <checkDemoModCalisma+0x500>)
 8007e32:	2200      	movs	r2, #0
 8007e34:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 8007e36:	4b74      	ldr	r3, [pc, #464]	; (8008008 <checkDemoModCalisma+0x504>)
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	b2da      	uxtb	r2, r3
 8007e3e:	4b72      	ldr	r3, [pc, #456]	; (8008008 <checkDemoModCalisma+0x504>)
 8007e40:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 8007e42:	4b71      	ldr	r3, [pc, #452]	; (8008008 <checkDemoModCalisma+0x504>)
 8007e44:	781b      	ldrb	r3, [r3, #0]
 8007e46:	2b09      	cmp	r3, #9
 8007e48:	d908      	bls.n	8007e5c <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 8007e4a:	4b6f      	ldr	r3, [pc, #444]	; (8008008 <checkDemoModCalisma+0x504>)
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 8007e50:	4b6e      	ldr	r3, [pc, #440]	; (800800c <checkDemoModCalisma+0x508>)
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	3301      	adds	r3, #1
 8007e56:	b2da      	uxtb	r2, r3
 8007e58:	4b6c      	ldr	r3, [pc, #432]	; (800800c <checkDemoModCalisma+0x508>)
 8007e5a:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 8007e5c:	4b6b      	ldr	r3, [pc, #428]	; (800800c <checkDemoModCalisma+0x508>)
 8007e5e:	781b      	ldrb	r3, [r3, #0]
 8007e60:	2b09      	cmp	r3, #9
 8007e62:	d908      	bls.n	8007e76 <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 8007e64:	4b69      	ldr	r3, [pc, #420]	; (800800c <checkDemoModCalisma+0x508>)
 8007e66:	2200      	movs	r2, #0
 8007e68:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 8007e6a:	4b69      	ldr	r3, [pc, #420]	; (8008010 <checkDemoModCalisma+0x50c>)
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	3301      	adds	r3, #1
 8007e70:	b2da      	uxtb	r2, r3
 8007e72:	4b67      	ldr	r3, [pc, #412]	; (8008010 <checkDemoModCalisma+0x50c>)
 8007e74:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 8007e76:	4b66      	ldr	r3, [pc, #408]	; (8008010 <checkDemoModCalisma+0x50c>)
 8007e78:	781b      	ldrb	r3, [r3, #0]
 8007e7a:	2b09      	cmp	r3, #9
 8007e7c:	d908      	bls.n	8007e90 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 8007e7e:	4b64      	ldr	r3, [pc, #400]	; (8008010 <checkDemoModCalisma+0x50c>)
 8007e80:	2200      	movs	r2, #0
 8007e82:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 8007e84:	4b63      	ldr	r3, [pc, #396]	; (8008014 <checkDemoModCalisma+0x510>)
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	3301      	adds	r3, #1
 8007e8a:	b2da      	uxtb	r2, r3
 8007e8c:	4b61      	ldr	r3, [pc, #388]	; (8008014 <checkDemoModCalisma+0x510>)
 8007e8e:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8007e90:	4b60      	ldr	r3, [pc, #384]	; (8008014 <checkDemoModCalisma+0x510>)
 8007e92:	781a      	ldrb	r2, [r3, #0]
 8007e94:	4b60      	ldr	r3, [pc, #384]	; (8008018 <checkDemoModCalisma+0x514>)
 8007e96:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8007e9a:	4b5d      	ldr	r3, [pc, #372]	; (8008010 <checkDemoModCalisma+0x50c>)
 8007e9c:	781a      	ldrb	r2, [r3, #0]
 8007e9e:	4b5e      	ldr	r3, [pc, #376]	; (8008018 <checkDemoModCalisma+0x514>)
 8007ea0:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8007ea2:	4b5a      	ldr	r3, [pc, #360]	; (800800c <checkDemoModCalisma+0x508>)
 8007ea4:	781a      	ldrb	r2, [r3, #0]
 8007ea6:	4b5c      	ldr	r3, [pc, #368]	; (8008018 <checkDemoModCalisma+0x514>)
 8007ea8:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8007eaa:	4b57      	ldr	r3, [pc, #348]	; (8008008 <checkDemoModCalisma+0x504>)
 8007eac:	781a      	ldrb	r2, [r3, #0]
 8007eae:	4b5a      	ldr	r3, [pc, #360]	; (8008018 <checkDemoModCalisma+0x514>)
 8007eb0:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8007eb2:	4b54      	ldr	r3, [pc, #336]	; (8008004 <checkDemoModCalisma+0x500>)
 8007eb4:	781a      	ldrb	r2, [r3, #0]
 8007eb6:	4b58      	ldr	r3, [pc, #352]	; (8008018 <checkDemoModCalisma+0x514>)
 8007eb8:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 8007eba:	4b58      	ldr	r3, [pc, #352]	; (800801c <checkDemoModCalisma+0x518>)
 8007ebc:	2201      	movs	r2, #1
 8007ebe:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 8007ec0:	4b4f      	ldr	r3, [pc, #316]	; (8008000 <checkDemoModCalisma+0x4fc>)
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 8007ec6:	4b56      	ldr	r3, [pc, #344]	; (8008020 <checkDemoModCalisma+0x51c>)
 8007ec8:	781b      	ldrb	r3, [r3, #0]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	f040 8087 	bne.w	8007fde <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 8007ed0:	4a54      	ldr	r2, [pc, #336]	; (8008024 <checkDemoModCalisma+0x520>)
 8007ed2:	2101      	movs	r1, #1
 8007ed4:	2002      	movs	r0, #2
 8007ed6:	f7f8 fbc7 	bl	8000668 <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 8007eda:	4a53      	ldr	r2, [pc, #332]	; (8008028 <checkDemoModCalisma+0x524>)
 8007edc:	2101      	movs	r1, #1
 8007ede:	2001      	movs	r0, #1
 8007ee0:	f7f8 fbc2 	bl	8000668 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 8007ee4:	4b4b      	ldr	r3, [pc, #300]	; (8008014 <checkDemoModCalisma+0x510>)
 8007ee6:	781b      	ldrb	r3, [r3, #0]
 8007ee8:	220a      	movs	r2, #10
 8007eea:	4950      	ldr	r1, [pc, #320]	; (800802c <checkDemoModCalisma+0x528>)
 8007eec:	4618      	mov	r0, r3
 8007eee:	f004 fe53 	bl	800cb98 <itoa>
			lcd_print(2,12,snum);
 8007ef2:	4a4e      	ldr	r2, [pc, #312]	; (800802c <checkDemoModCalisma+0x528>)
 8007ef4:	210c      	movs	r1, #12
 8007ef6:	2002      	movs	r0, #2
 8007ef8:	f7f8 fbb6 	bl	8000668 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 8007efc:	4b44      	ldr	r3, [pc, #272]	; (8008010 <checkDemoModCalisma+0x50c>)
 8007efe:	781b      	ldrb	r3, [r3, #0]
 8007f00:	220a      	movs	r2, #10
 8007f02:	494a      	ldr	r1, [pc, #296]	; (800802c <checkDemoModCalisma+0x528>)
 8007f04:	4618      	mov	r0, r3
 8007f06:	f004 fe47 	bl	800cb98 <itoa>
			lcd_print(2,13,snum);
 8007f0a:	4a48      	ldr	r2, [pc, #288]	; (800802c <checkDemoModCalisma+0x528>)
 8007f0c:	210d      	movs	r1, #13
 8007f0e:	2002      	movs	r0, #2
 8007f10:	f7f8 fbaa 	bl	8000668 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 8007f14:	4b3d      	ldr	r3, [pc, #244]	; (800800c <checkDemoModCalisma+0x508>)
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	220a      	movs	r2, #10
 8007f1a:	4944      	ldr	r1, [pc, #272]	; (800802c <checkDemoModCalisma+0x528>)
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f004 fe3b 	bl	800cb98 <itoa>
			lcd_print(2,14,snum);
 8007f22:	4a42      	ldr	r2, [pc, #264]	; (800802c <checkDemoModCalisma+0x528>)
 8007f24:	210e      	movs	r1, #14
 8007f26:	2002      	movs	r0, #2
 8007f28:	f7f8 fb9e 	bl	8000668 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 8007f2c:	4b36      	ldr	r3, [pc, #216]	; (8008008 <checkDemoModCalisma+0x504>)
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	220a      	movs	r2, #10
 8007f32:	493e      	ldr	r1, [pc, #248]	; (800802c <checkDemoModCalisma+0x528>)
 8007f34:	4618      	mov	r0, r3
 8007f36:	f004 fe2f 	bl	800cb98 <itoa>
			lcd_print(2,15,snum);
 8007f3a:	4a3c      	ldr	r2, [pc, #240]	; (800802c <checkDemoModCalisma+0x528>)
 8007f3c:	210f      	movs	r1, #15
 8007f3e:	2002      	movs	r0, #2
 8007f40:	f7f8 fb92 	bl	8000668 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 8007f44:	4b2f      	ldr	r3, [pc, #188]	; (8008004 <checkDemoModCalisma+0x500>)
 8007f46:	781b      	ldrb	r3, [r3, #0]
 8007f48:	220a      	movs	r2, #10
 8007f4a:	4938      	ldr	r1, [pc, #224]	; (800802c <checkDemoModCalisma+0x528>)
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	f004 fe23 	bl	800cb98 <itoa>
			lcd_print(2,16,snum);
 8007f52:	4a36      	ldr	r2, [pc, #216]	; (800802c <checkDemoModCalisma+0x528>)
 8007f54:	2110      	movs	r1, #16
 8007f56:	2002      	movs	r0, #2
 8007f58:	f7f8 fb86 	bl	8000668 <lcd_print>
			mesajYazildi=1;
 8007f5c:	4b34      	ldr	r3, [pc, #208]	; (8008030 <checkDemoModCalisma+0x52c>)
 8007f5e:	2201      	movs	r2, #1
 8007f60:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 8007f62:	e03c      	b.n	8007fde <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 8007f64:	4b33      	ldr	r3, [pc, #204]	; (8008034 <checkDemoModCalisma+0x530>)
 8007f66:	781b      	ldrb	r3, [r3, #0]
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d003      	beq.n	8007f74 <checkDemoModCalisma+0x470>
 8007f6c:	4b2c      	ldr	r3, [pc, #176]	; (8008020 <checkDemoModCalisma+0x51c>)
 8007f6e:	781b      	ldrb	r3, [r3, #0]
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	d134      	bne.n	8007fde <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007f74:	2200      	movs	r2, #0
 8007f76:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007f7a:	481b      	ldr	r0, [pc, #108]	; (8007fe8 <checkDemoModCalisma+0x4e4>)
 8007f7c:	f001 fdf7 	bl	8009b6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007f80:	2200      	movs	r2, #0
 8007f82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007f86:	4818      	ldr	r0, [pc, #96]	; (8007fe8 <checkDemoModCalisma+0x4e4>)
 8007f88:	f001 fdf1 	bl	8009b6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	2104      	movs	r1, #4
 8007f90:	4815      	ldr	r0, [pc, #84]	; (8007fe8 <checkDemoModCalisma+0x4e4>)
 8007f92:	f001 fdec 	bl	8009b6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007f96:	2200      	movs	r2, #0
 8007f98:	2102      	movs	r1, #2
 8007f9a:	4813      	ldr	r0, [pc, #76]	; (8007fe8 <checkDemoModCalisma+0x4e4>)
 8007f9c:	f001 fde7 	bl	8009b6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	2101      	movs	r1, #1
 8007fa4:	4810      	ldr	r0, [pc, #64]	; (8007fe8 <checkDemoModCalisma+0x4e4>)
 8007fa6:	f001 fde2 	bl	8009b6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007faa:	2200      	movs	r2, #0
 8007fac:	2120      	movs	r1, #32
 8007fae:	480d      	ldr	r0, [pc, #52]	; (8007fe4 <checkDemoModCalisma+0x4e0>)
 8007fb0:	f001 fddd 	bl	8009b6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	2110      	movs	r1, #16
 8007fb8:	480a      	ldr	r0, [pc, #40]	; (8007fe4 <checkDemoModCalisma+0x4e0>)
 8007fba:	f001 fdd8 	bl	8009b6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	2180      	movs	r1, #128	; 0x80
 8007fc2:	480b      	ldr	r0, [pc, #44]	; (8007ff0 <checkDemoModCalisma+0x4ec>)
 8007fc4:	f001 fdd3 	bl	8009b6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007fc8:	2200      	movs	r2, #0
 8007fca:	2140      	movs	r1, #64	; 0x40
 8007fcc:	4808      	ldr	r0, [pc, #32]	; (8007ff0 <checkDemoModCalisma+0x4ec>)
 8007fce:	f001 fdce 	bl	8009b6e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	2120      	movs	r1, #32
 8007fd6:	4806      	ldr	r0, [pc, #24]	; (8007ff0 <checkDemoModCalisma+0x4ec>)
 8007fd8:	f001 fdc9 	bl	8009b6e <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 8007fdc:	e7ff      	b.n	8007fde <checkDemoModCalisma+0x4da>
 8007fde:	bf00      	nop
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop
 8007fe4:	40011000 	.word	0x40011000
 8007fe8:	40010c00 	.word	0x40010c00
 8007fec:	20000d8e 	.word	0x20000d8e
 8007ff0:	40010800 	.word	0x40010800
 8007ff4:	20000cc0 	.word	0x20000cc0
 8007ff8:	20000cd0 	.word	0x20000cd0
 8007ffc:	20000d8d 	.word	0x20000d8d
 8008000:	20000d73 	.word	0x20000d73
 8008004:	20000d32 	.word	0x20000d32
 8008008:	20000d33 	.word	0x20000d33
 800800c:	200009b1 	.word	0x200009b1
 8008010:	200009b2 	.word	0x200009b2
 8008014:	20000d34 	.word	0x20000d34
 8008018:	20000c34 	.word	0x20000c34
 800801c:	20000d61 	.word	0x20000d61
 8008020:	20000d52 	.word	0x20000d52
 8008024:	0800e38c 	.word	0x0800e38c
 8008028:	0800e398 	.word	0x0800e398
 800802c:	20000cb8 	.word	0x20000cb8
 8008030:	20000d69 	.word	0x20000d69
 8008034:	20000d53 	.word	0x20000d53

08008038 <mergeData>:

char* mergeData() {
 8008038:	b580      	push	{r7, lr}
 800803a:	b09e      	sub	sp, #120	; 0x78
 800803c:	af00      	add	r7, sp, #0
	char combinedString[45] = "";
 800803e:	2300      	movs	r3, #0
 8008040:	643b      	str	r3, [r7, #64]	; 0x40
 8008042:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8008046:	2229      	movs	r2, #41	; 0x29
 8008048:	2100      	movs	r1, #0
 800804a:	4618      	mov	r0, r3
 800804c:	f004 febc 	bl	800cdc8 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 8008050:	4b6a      	ldr	r3, [pc, #424]	; (80081fc <mergeData+0x1c4>)
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	713b      	strb	r3, [r7, #4]
 8008056:	4b6a      	ldr	r3, [pc, #424]	; (8008200 <mergeData+0x1c8>)
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	717b      	strb	r3, [r7, #5]
 800805c:	4b69      	ldr	r3, [pc, #420]	; (8008204 <mergeData+0x1cc>)
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	71bb      	strb	r3, [r7, #6]
 8008062:	4b69      	ldr	r3, [pc, #420]	; (8008208 <mergeData+0x1d0>)
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	71fb      	strb	r3, [r7, #7]
 8008068:	4b68      	ldr	r3, [pc, #416]	; (800820c <mergeData+0x1d4>)
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	723b      	strb	r3, [r7, #8]
 800806e:	4b68      	ldr	r3, [pc, #416]	; (8008210 <mergeData+0x1d8>)
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	727b      	strb	r3, [r7, #9]
 8008074:	4b67      	ldr	r3, [pc, #412]	; (8008214 <mergeData+0x1dc>)
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	72bb      	strb	r3, [r7, #10]
 800807a:	4b67      	ldr	r3, [pc, #412]	; (8008218 <mergeData+0x1e0>)
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	72fb      	strb	r3, [r7, #11]
 8008080:	4b66      	ldr	r3, [pc, #408]	; (800821c <mergeData+0x1e4>)
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	733b      	strb	r3, [r7, #12]
 8008086:	4b66      	ldr	r3, [pc, #408]	; (8008220 <mergeData+0x1e8>)
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	737b      	strb	r3, [r7, #13]
 800808c:	4b65      	ldr	r3, [pc, #404]	; (8008224 <mergeData+0x1ec>)
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	73bb      	strb	r3, [r7, #14]
 8008092:	4b65      	ldr	r3, [pc, #404]	; (8008228 <mergeData+0x1f0>)
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	73fb      	strb	r3, [r7, #15]
 8008098:	4b64      	ldr	r3, [pc, #400]	; (800822c <mergeData+0x1f4>)
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	743b      	strb	r3, [r7, #16]
 800809e:	4b64      	ldr	r3, [pc, #400]	; (8008230 <mergeData+0x1f8>)
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	747b      	strb	r3, [r7, #17]
 80080a4:	4b63      	ldr	r3, [pc, #396]	; (8008234 <mergeData+0x1fc>)
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	74bb      	strb	r3, [r7, #18]
 80080aa:	4b63      	ldr	r3, [pc, #396]	; (8008238 <mergeData+0x200>)
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	74fb      	strb	r3, [r7, #19]
 80080b0:	4b62      	ldr	r3, [pc, #392]	; (800823c <mergeData+0x204>)
 80080b2:	781b      	ldrb	r3, [r3, #0]
 80080b4:	753b      	strb	r3, [r7, #20]
 80080b6:	4b62      	ldr	r3, [pc, #392]	; (8008240 <mergeData+0x208>)
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	757b      	strb	r3, [r7, #21]
 80080bc:	4b61      	ldr	r3, [pc, #388]	; (8008244 <mergeData+0x20c>)
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	75bb      	strb	r3, [r7, #22]
 80080c2:	4b61      	ldr	r3, [pc, #388]	; (8008248 <mergeData+0x210>)
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	75fb      	strb	r3, [r7, #23]
 80080c8:	4b60      	ldr	r3, [pc, #384]	; (800824c <mergeData+0x214>)
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	763b      	strb	r3, [r7, #24]
 80080ce:	4b60      	ldr	r3, [pc, #384]	; (8008250 <mergeData+0x218>)
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	767b      	strb	r3, [r7, #25]
 80080d4:	4b5f      	ldr	r3, [pc, #380]	; (8008254 <mergeData+0x21c>)
 80080d6:	781b      	ldrb	r3, [r3, #0]
 80080d8:	76bb      	strb	r3, [r7, #26]
 80080da:	4b5f      	ldr	r3, [pc, #380]	; (8008258 <mergeData+0x220>)
 80080dc:	781b      	ldrb	r3, [r3, #0]
 80080de:	76fb      	strb	r3, [r7, #27]
 80080e0:	4b5e      	ldr	r3, [pc, #376]	; (800825c <mergeData+0x224>)
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	773b      	strb	r3, [r7, #28]
 80080e6:	4b5e      	ldr	r3, [pc, #376]	; (8008260 <mergeData+0x228>)
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	777b      	strb	r3, [r7, #29]
 80080ec:	4b5d      	ldr	r3, [pc, #372]	; (8008264 <mergeData+0x22c>)
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	77bb      	strb	r3, [r7, #30]
 80080f2:	4b5d      	ldr	r3, [pc, #372]	; (8008268 <mergeData+0x230>)
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	77fb      	strb	r3, [r7, #31]
 80080f8:	4b5c      	ldr	r3, [pc, #368]	; (800826c <mergeData+0x234>)
 80080fa:	781b      	ldrb	r3, [r3, #0]
 80080fc:	f887 3020 	strb.w	r3, [r7, #32]
 8008100:	4b5b      	ldr	r3, [pc, #364]	; (8008270 <mergeData+0x238>)
 8008102:	781b      	ldrb	r3, [r3, #0]
 8008104:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8008108:	4b5a      	ldr	r3, [pc, #360]	; (8008274 <mergeData+0x23c>)
 800810a:	781b      	ldrb	r3, [r3, #0]
 800810c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008110:	4b59      	ldr	r3, [pc, #356]	; (8008278 <mergeData+0x240>)
 8008112:	781b      	ldrb	r3, [r3, #0]
 8008114:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008118:	4b58      	ldr	r3, [pc, #352]	; (800827c <mergeData+0x244>)
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[37],
 8008120:	4b57      	ldr	r3, [pc, #348]	; (8008280 <mergeData+0x248>)
 8008122:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	uint8_t uintVariables[] = {
 8008126:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[38],
 800812a:	4b55      	ldr	r3, [pc, #340]	; (8008280 <mergeData+0x248>)
 800812c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 8008130:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[39],
 8008134:	4b52      	ldr	r3, [pc, #328]	; (8008280 <mergeData+0x248>)
 8008136:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 800813a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[40],
 800813e:	4b50      	ldr	r3, [pc, #320]	; (8008280 <mergeData+0x248>)
 8008140:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 8008144:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[41],
 8008148:	4b4d      	ldr	r3, [pc, #308]	; (8008280 <mergeData+0x248>)
 800814a:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 800814e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[42],
 8008152:	4b4b      	ldr	r3, [pc, #300]	; (8008280 <mergeData+0x248>)
 8008154:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 8008158:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[43],
 800815c:	4b48      	ldr	r3, [pc, #288]	; (8008280 <mergeData+0x248>)
 800815e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 8008162:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[44],
 8008166:	4b46      	ldr	r3, [pc, #280]	; (8008280 <mergeData+0x248>)
 8008168:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 800816c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[45],
 8008170:	4b43      	ldr	r3, [pc, #268]	; (8008280 <mergeData+0x248>)
 8008172:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 8008176:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[46],
 800817a:	4b41      	ldr	r3, [pc, #260]	; (8008280 <mergeData+0x248>)
 800817c:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 8008180:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			eepromData[47],
 8008184:	4b3e      	ldr	r3, [pc, #248]	; (8008280 <mergeData+0x248>)
 8008186:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 800818a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800818e:	4b3d      	ldr	r3, [pc, #244]	; (8008284 <mergeData+0x24c>)
 8008190:	781b      	ldrb	r3, [r3, #0]
 8008192:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 8008196:	2300      	movs	r3, #0
 8008198:	677b      	str	r3, [r7, #116]	; 0x74
 800819a:	e015      	b.n	80081c8 <mergeData+0x190>
	    sprintf(temp, "%u", uintVariables[i]);
 800819c:	1d3a      	adds	r2, r7, #4
 800819e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081a0:	4413      	add	r3, r2
 80081a2:	781b      	ldrb	r3, [r3, #0]
 80081a4:	461a      	mov	r2, r3
 80081a6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80081aa:	4937      	ldr	r1, [pc, #220]	; (8008288 <mergeData+0x250>)
 80081ac:	4618      	mov	r0, r3
 80081ae:	f004 fdeb 	bl	800cd88 <siprintf>
	    strcat(combinedString, temp);
 80081b2:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80081b6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80081ba:	4611      	mov	r1, r2
 80081bc:	4618      	mov	r0, r3
 80081be:	f004 fe0b 	bl	800cdd8 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 80081c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081c4:	3301      	adds	r3, #1
 80081c6:	677b      	str	r3, [r7, #116]	; 0x74
 80081c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081ca:	2b2c      	cmp	r3, #44	; 0x2c
 80081cc:	d9e6      	bls.n	800819c <mergeData+0x164>
	}

	char* result = malloc(strlen(combinedString) + 1);
 80081ce:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80081d2:	4618      	mov	r0, r3
 80081d4:	f7f8 f826 	bl	8000224 <strlen>
 80081d8:	4603      	mov	r3, r0
 80081da:	3301      	adds	r3, #1
 80081dc:	4618      	mov	r0, r3
 80081de:	f004 fcdd 	bl	800cb9c <malloc>
 80081e2:	4603      	mov	r3, r0
 80081e4:	673b      	str	r3, [r7, #112]	; 0x70
	strcpy(result, combinedString);
 80081e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80081ea:	4619      	mov	r1, r3
 80081ec:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80081ee:	f004 fe3f 	bl	800ce70 <strcpy>
	return result;
 80081f2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3778      	adds	r7, #120	; 0x78
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}
 80081fc:	20000d44 	.word	0x20000d44
 8008200:	20000d36 	.word	0x20000d36
 8008204:	20000d39 	.word	0x20000d39
 8008208:	20000d3a 	.word	0x20000d3a
 800820c:	20000d3b 	.word	0x20000d3b
 8008210:	20000d42 	.word	0x20000d42
 8008214:	20000d3c 	.word	0x20000d3c
 8008218:	20000d3d 	.word	0x20000d3d
 800821c:	20000d41 	.word	0x20000d41
 8008220:	20000d3e 	.word	0x20000d3e
 8008224:	20000d4e 	.word	0x20000d4e
 8008228:	20000d3f 	.word	0x20000d3f
 800822c:	20000d4f 	.word	0x20000d4f
 8008230:	20000d40 	.word	0x20000d40
 8008234:	20000d50 	.word	0x20000d50
 8008238:	20000d43 	.word	0x20000d43
 800823c:	20000d45 	.word	0x20000d45
 8008240:	20000d46 	.word	0x20000d46
 8008244:	20000d47 	.word	0x20000d47
 8008248:	20000d48 	.word	0x20000d48
 800824c:	20000d49 	.word	0x20000d49
 8008250:	20000d4a 	.word	0x20000d4a
 8008254:	20000d4b 	.word	0x20000d4b
 8008258:	20000d4c 	.word	0x20000d4c
 800825c:	20000d4d 	.word	0x20000d4d
 8008260:	20000d51 	.word	0x20000d51
 8008264:	20000d53 	.word	0x20000d53
 8008268:	20000d32 	.word	0x20000d32
 800826c:	20000d33 	.word	0x20000d33
 8008270:	200009b1 	.word	0x200009b1
 8008274:	200009b2 	.word	0x200009b2
 8008278:	20000d34 	.word	0x20000d34
 800827c:	20000d56 	.word	0x20000d56
 8008280:	20000c34 	.word	0x20000c34
 8008284:	20000940 	.word	0x20000940
 8008288:	0800e3ac 	.word	0x0800e3ac

0800828c <mainLoop>:

void mainLoop() {
 800828c:	b580      	push	{r7, lr}
 800828e:	b084      	sub	sp, #16
 8008290:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 8008292:	f7fd fffb 	bl	800628c <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8008296:	2101      	movs	r1, #1
 8008298:	48ad      	ldr	r0, [pc, #692]	; (8008550 <mainLoop+0x2c4>)
 800829a:	f001 fc51 	bl	8009b40 <HAL_GPIO_ReadPin>
 800829e:	4603      	mov	r3, r0
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d136      	bne.n	8008312 <mainLoop+0x86>
 80082a4:	2108      	movs	r1, #8
 80082a6:	48ab      	ldr	r0, [pc, #684]	; (8008554 <mainLoop+0x2c8>)
 80082a8:	f001 fc4a 	bl	8009b40 <HAL_GPIO_ReadPin>
 80082ac:	4603      	mov	r3, r0
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d12f      	bne.n	8008312 <mainLoop+0x86>
 80082b2:	2102      	movs	r1, #2
 80082b4:	48a6      	ldr	r0, [pc, #664]	; (8008550 <mainLoop+0x2c4>)
 80082b6:	f001 fc43 	bl	8009b40 <HAL_GPIO_ReadPin>
 80082ba:	4603      	mov	r3, r0
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d128      	bne.n	8008312 <mainLoop+0x86>
 80082c0:	2104      	movs	r1, #4
 80082c2:	48a3      	ldr	r0, [pc, #652]	; (8008550 <mainLoop+0x2c4>)
 80082c4:	f001 fc3c 	bl	8009b40 <HAL_GPIO_ReadPin>
 80082c8:	4603      	mov	r3, r0
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d121      	bne.n	8008312 <mainLoop+0x86>
 80082ce:	2108      	movs	r1, #8
 80082d0:	489f      	ldr	r0, [pc, #636]	; (8008550 <mainLoop+0x2c4>)
 80082d2:	f001 fc35 	bl	8009b40 <HAL_GPIO_ReadPin>
 80082d6:	4603      	mov	r3, r0
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d11a      	bne.n	8008312 <mainLoop+0x86>
 80082dc:	2180      	movs	r1, #128	; 0x80
 80082de:	489d      	ldr	r0, [pc, #628]	; (8008554 <mainLoop+0x2c8>)
 80082e0:	f001 fc2e 	bl	8009b40 <HAL_GPIO_ReadPin>
 80082e4:	4603      	mov	r3, r0
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	d113      	bne.n	8008312 <mainLoop+0x86>
 80082ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80082ee:	4899      	ldr	r0, [pc, #612]	; (8008554 <mainLoop+0x2c8>)
 80082f0:	f001 fc26 	bl	8009b40 <HAL_GPIO_ReadPin>
 80082f4:	4603      	mov	r3, r0
 80082f6:	2b01      	cmp	r3, #1
 80082f8:	d10b      	bne.n	8008312 <mainLoop+0x86>
 80082fa:	f44f 7100 	mov.w	r1, #512	; 0x200
 80082fe:	4895      	ldr	r0, [pc, #596]	; (8008554 <mainLoop+0x2c8>)
 8008300:	f001 fc1e 	bl	8009b40 <HAL_GPIO_ReadPin>
 8008304:	4603      	mov	r3, r0
 8008306:	2b01      	cmp	r3, #1
 8008308:	d103      	bne.n	8008312 <mainLoop+0x86>
			butonKontrol=0;
 800830a:	4b93      	ldr	r3, [pc, #588]	; (8008558 <mainLoop+0x2cc>)
 800830c:	2200      	movs	r2, #0
 800830e:	701a      	strb	r2, [r3, #0]
 8008310:	e003      	b.n	800831a <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 8008312:	4b92      	ldr	r3, [pc, #584]	; (800855c <mainLoop+0x2d0>)
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a92      	ldr	r2, [pc, #584]	; (8008560 <mainLoop+0x2d4>)
 8008318:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 800831a:	4b92      	ldr	r3, [pc, #584]	; (8008564 <mainLoop+0x2d8>)
 800831c:	781b      	ldrb	r3, [r3, #0]
 800831e:	2b00      	cmp	r3, #0
 8008320:	d03a      	beq.n	8008398 <mainLoop+0x10c>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008322:	bf00      	nop
 8008324:	4890      	ldr	r0, [pc, #576]	; (8008568 <mainLoop+0x2dc>)
 8008326:	f002 fa34 	bl	800a792 <HAL_I2C_GetError>
 800832a:	4603      	mov	r3, r0
 800832c:	2b04      	cmp	r3, #4
 800832e:	d0f9      	beq.n	8008324 <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008330:	bf00      	nop
 8008332:	488d      	ldr	r0, [pc, #564]	; (8008568 <mainLoop+0x2dc>)
 8008334:	f002 fa20 	bl	800a778 <HAL_I2C_GetState>
 8008338:	4603      	mov	r3, r0
 800833a:	2b20      	cmp	r3, #32
 800833c:	d1f9      	bne.n	8008332 <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 800833e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8008342:	9302      	str	r3, [sp, #8]
 8008344:	236e      	movs	r3, #110	; 0x6e
 8008346:	9301      	str	r3, [sp, #4]
 8008348:	4b88      	ldr	r3, [pc, #544]	; (800856c <mainLoop+0x2e0>)
 800834a:	9300      	str	r3, [sp, #0]
 800834c:	236e      	movs	r3, #110	; 0x6e
 800834e:	2200      	movs	r2, #0
 8008350:	21a0      	movs	r1, #160	; 0xa0
 8008352:	4885      	ldr	r0, [pc, #532]	; (8008568 <mainLoop+0x2dc>)
 8008354:	f001 feae 	bl	800a0b4 <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 8008358:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800835c:	f000 fe20 	bl	8008fa0 <HAL_Delay>

		  hafizaYaz=0;
 8008360:	4b80      	ldr	r3, [pc, #512]	; (8008564 <mainLoop+0x2d8>)
 8008362:	2200      	movs	r2, #0
 8008364:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 8008366:	4b82      	ldr	r3, [pc, #520]	; (8008570 <mainLoop+0x2e4>)
 8008368:	781b      	ldrb	r3, [r3, #0]
 800836a:	2b00      	cmp	r3, #0
 800836c:	d105      	bne.n	800837a <mainLoop+0xee>
			  lcd_print(2,1,"Data yazildi    ");
 800836e:	4a81      	ldr	r2, [pc, #516]	; (8008574 <mainLoop+0x2e8>)
 8008370:	2101      	movs	r1, #1
 8008372:	2002      	movs	r0, #2
 8008374:	f7f8 f978 	bl	8000668 <lcd_print>
 8008378:	e008      	b.n	800838c <mainLoop+0x100>
		  } else if(dilSecim==1) {
 800837a:	4b7d      	ldr	r3, [pc, #500]	; (8008570 <mainLoop+0x2e4>)
 800837c:	781b      	ldrb	r3, [r3, #0]
 800837e:	2b01      	cmp	r3, #1
 8008380:	d104      	bne.n	800838c <mainLoop+0x100>
			  lcd_print(2,1,"Data Wrote      ");
 8008382:	4a7d      	ldr	r2, [pc, #500]	; (8008578 <mainLoop+0x2ec>)
 8008384:	2101      	movs	r1, #1
 8008386:	2002      	movs	r0, #2
 8008388:	f7f8 f96e 	bl	8000668 <lcd_print>
		  }

		  HAL_Delay(1000);
 800838c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008390:	f000 fe06 	bl	8008fa0 <HAL_Delay>
		  lcd_clear();
 8008394:	f7f8 f994 	bl	80006c0 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8008398:	4b78      	ldr	r3, [pc, #480]	; (800857c <mainLoop+0x2f0>)
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	f083 0301 	eor.w	r3, r3, #1
 80083a0:	b2db      	uxtb	r3, r3
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d06e      	beq.n	8008484 <mainLoop+0x1f8>
 80083a6:	4870      	ldr	r0, [pc, #448]	; (8008568 <mainLoop+0x2dc>)
 80083a8:	f002 f9e6 	bl	800a778 <HAL_I2C_GetState>
 80083ac:	4603      	mov	r3, r0
 80083ae:	2b20      	cmp	r3, #32
 80083b0:	d168      	bne.n	8008484 <mainLoop+0x1f8>
		  if(ilkOkuma==0) {
 80083b2:	4b73      	ldr	r3, [pc, #460]	; (8008580 <mainLoop+0x2f4>)
 80083b4:	781b      	ldrb	r3, [r3, #0]
 80083b6:	f083 0301 	eor.w	r3, r3, #1
 80083ba:	b2db      	uxtb	r3, r3
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d044      	beq.n	800844a <mainLoop+0x1be>
			  lcd_print(1,1,"   **EEPROM**   ");
 80083c0:	4a70      	ldr	r2, [pc, #448]	; (8008584 <mainLoop+0x2f8>)
 80083c2:	2101      	movs	r1, #1
 80083c4:	2001      	movs	r0, #1
 80083c6:	f7f8 f94f 	bl	8000668 <lcd_print>
			  if(dilSecim==0) {
 80083ca:	4b69      	ldr	r3, [pc, #420]	; (8008570 <mainLoop+0x2e4>)
 80083cc:	781b      	ldrb	r3, [r3, #0]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d105      	bne.n	80083de <mainLoop+0x152>
				  lcd_print(2,1,"Data Okunuyor...");
 80083d2:	4a6d      	ldr	r2, [pc, #436]	; (8008588 <mainLoop+0x2fc>)
 80083d4:	2101      	movs	r1, #1
 80083d6:	2002      	movs	r0, #2
 80083d8:	f7f8 f946 	bl	8000668 <lcd_print>
 80083dc:	e008      	b.n	80083f0 <mainLoop+0x164>
			  } else if(dilSecim==1) {
 80083de:	4b64      	ldr	r3, [pc, #400]	; (8008570 <mainLoop+0x2e4>)
 80083e0:	781b      	ldrb	r3, [r3, #0]
 80083e2:	2b01      	cmp	r3, #1
 80083e4:	d104      	bne.n	80083f0 <mainLoop+0x164>
				  lcd_print(2,1,"Data Reading... ");
 80083e6:	4a69      	ldr	r2, [pc, #420]	; (800858c <mainLoop+0x300>)
 80083e8:	2101      	movs	r1, #1
 80083ea:	2002      	movs	r0, #2
 80083ec:	f7f8 f93c 	bl	8000668 <lcd_print>
			  }
			  HAL_Delay(1000);
 80083f0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80083f4:	f000 fdd4 	bl	8008fa0 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80083f8:	bf00      	nop
 80083fa:	485b      	ldr	r0, [pc, #364]	; (8008568 <mainLoop+0x2dc>)
 80083fc:	f002 f9c9 	bl	800a792 <HAL_I2C_GetError>
 8008400:	4603      	mov	r3, r0
 8008402:	2b04      	cmp	r3, #4
 8008404:	d0f9      	beq.n	80083fa <mainLoop+0x16e>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8008406:	e003      	b.n	8008410 <mainLoop+0x184>
				  HAL_Delay(1000);
 8008408:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800840c:	f000 fdc8 	bl	8008fa0 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8008410:	4855      	ldr	r0, [pc, #340]	; (8008568 <mainLoop+0x2dc>)
 8008412:	f002 f9b1 	bl	800a778 <HAL_I2C_GetState>
 8008416:	4603      	mov	r3, r0
 8008418:	2b20      	cmp	r3, #32
 800841a:	d1f5      	bne.n	8008408 <mainLoop+0x17c>
			  }

			  if(dilSecim==0) {
 800841c:	4b54      	ldr	r3, [pc, #336]	; (8008570 <mainLoop+0x2e4>)
 800841e:	781b      	ldrb	r3, [r3, #0]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d105      	bne.n	8008430 <mainLoop+0x1a4>
				  lcd_print(2,1,"Data Okundu.    ");
 8008424:	4a5a      	ldr	r2, [pc, #360]	; (8008590 <mainLoop+0x304>)
 8008426:	2101      	movs	r1, #1
 8008428:	2002      	movs	r0, #2
 800842a:	f7f8 f91d 	bl	8000668 <lcd_print>
 800842e:	e008      	b.n	8008442 <mainLoop+0x1b6>
			  } else if(dilSecim==1) {
 8008430:	4b4f      	ldr	r3, [pc, #316]	; (8008570 <mainLoop+0x2e4>)
 8008432:	781b      	ldrb	r3, [r3, #0]
 8008434:	2b01      	cmp	r3, #1
 8008436:	d104      	bne.n	8008442 <mainLoop+0x1b6>
				  lcd_print(2,1,"Data Read.      ");
 8008438:	4a56      	ldr	r2, [pc, #344]	; (8008594 <mainLoop+0x308>)
 800843a:	2101      	movs	r1, #1
 800843c:	2002      	movs	r0, #2
 800843e:	f7f8 f913 	bl	8000668 <lcd_print>
			  }

			  ilkOkuma=1;
 8008442:	4b4f      	ldr	r3, [pc, #316]	; (8008580 <mainLoop+0x2f4>)
 8008444:	2201      	movs	r2, #1
 8008446:	701a      	strb	r2, [r3, #0]
 8008448:	e014      	b.n	8008474 <mainLoop+0x1e8>
		  } else {
			  if(dilSecim==0) {
 800844a:	4b49      	ldr	r3, [pc, #292]	; (8008570 <mainLoop+0x2e4>)
 800844c:	781b      	ldrb	r3, [r3, #0]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d105      	bne.n	800845e <mainLoop+0x1d2>
				  lcd_print(2,1,"Deger Kaydedildi");
 8008452:	4a51      	ldr	r2, [pc, #324]	; (8008598 <mainLoop+0x30c>)
 8008454:	2101      	movs	r1, #1
 8008456:	2002      	movs	r0, #2
 8008458:	f7f8 f906 	bl	8000668 <lcd_print>
 800845c:	e008      	b.n	8008470 <mainLoop+0x1e4>
			  } else if(dilSecim==1) {
 800845e:	4b44      	ldr	r3, [pc, #272]	; (8008570 <mainLoop+0x2e4>)
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	2b01      	cmp	r3, #1
 8008464:	d104      	bne.n	8008470 <mainLoop+0x1e4>
				  lcd_print(2,1,"Value Saved     ");
 8008466:	4a4d      	ldr	r2, [pc, #308]	; (800859c <mainLoop+0x310>)
 8008468:	2101      	movs	r1, #1
 800846a:	2002      	movs	r0, #2
 800846c:	f7f8 f8fc 	bl	8000668 <lcd_print>
			  }
			  lcd_clear();
 8008470:	f7f8 f926 	bl	80006c0 <lcd_clear>
		  }

		  lcd_clear();
 8008474:	f7f8 f924 	bl	80006c0 <lcd_clear>

		  eepromKontrol(1);
 8008478:	2001      	movs	r0, #1
 800847a:	f7fd fabb 	bl	80059f4 <eepromKontrol>
		  hafizaOku=1;
 800847e:	4b3f      	ldr	r3, [pc, #252]	; (800857c <mainLoop+0x2f0>)
 8008480:	2201      	movs	r2, #1
 8008482:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8008484:	4b46      	ldr	r3, [pc, #280]	; (80085a0 <mainLoop+0x314>)
 8008486:	781b      	ldrb	r3, [r3, #0]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d11c      	bne.n	80084c6 <mainLoop+0x23a>
 800848c:	4b45      	ldr	r3, [pc, #276]	; (80085a4 <mainLoop+0x318>)
 800848e:	781b      	ldrb	r3, [r3, #0]
 8008490:	f083 0301 	eor.w	r3, r3, #1
 8008494:	b2db      	uxtb	r3, r3
 8008496:	2b00      	cmp	r3, #0
 8008498:	d015      	beq.n	80084c6 <mainLoop+0x23a>
 800849a:	4b43      	ldr	r3, [pc, #268]	; (80085a8 <mainLoop+0x31c>)
 800849c:	781b      	ldrb	r3, [r3, #0]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d111      	bne.n	80084c6 <mainLoop+0x23a>
			lcd_clear();
 80084a2:	f7f8 f90d 	bl	80006c0 <lcd_clear>
			HAL_Delay(10);
 80084a6:	200a      	movs	r0, #10
 80084a8:	f000 fd7a 	bl	8008fa0 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 80084ac:	4a3f      	ldr	r2, [pc, #252]	; (80085ac <mainLoop+0x320>)
 80084ae:	2101      	movs	r1, #1
 80084b0:	2001      	movs	r0, #1
 80084b2:	f7f8 f8d9 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 80084b6:	4a3e      	ldr	r2, [pc, #248]	; (80085b0 <mainLoop+0x324>)
 80084b8:	2101      	movs	r1, #1
 80084ba:	2002      	movs	r0, #2
 80084bc:	f7f8 f8d4 	bl	8000668 <lcd_print>
			mesajYazildi=1;
 80084c0:	4b38      	ldr	r3, [pc, #224]	; (80085a4 <mainLoop+0x318>)
 80084c2:	2201      	movs	r2, #1
 80084c4:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 80084c6:	4b36      	ldr	r3, [pc, #216]	; (80085a0 <mainLoop+0x314>)
 80084c8:	781b      	ldrb	r3, [r3, #0]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d112      	bne.n	80084f4 <mainLoop+0x268>
 80084ce:	2102      	movs	r1, #2
 80084d0:	481f      	ldr	r0, [pc, #124]	; (8008550 <mainLoop+0x2c4>)
 80084d2:	f001 fb35 	bl	8009b40 <HAL_GPIO_ReadPin>
 80084d6:	4603      	mov	r3, r0
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d10b      	bne.n	80084f4 <mainLoop+0x268>
 80084dc:	2104      	movs	r1, #4
 80084de:	481c      	ldr	r0, [pc, #112]	; (8008550 <mainLoop+0x2c4>)
 80084e0:	f001 fb2e 	bl	8009b40 <HAL_GPIO_ReadPin>
 80084e4:	4603      	mov	r3, r0
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	d104      	bne.n	80084f4 <mainLoop+0x268>
			menuGiris=1;
 80084ea:	4b2d      	ldr	r3, [pc, #180]	; (80085a0 <mainLoop+0x314>)
 80084ec:	2201      	movs	r2, #1
 80084ee:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 80084f0:	f7f8 f8e6 	bl	80006c0 <lcd_clear>
		}

		if(menuGiris==1) {
 80084f4:	4b2a      	ldr	r3, [pc, #168]	; (80085a0 <mainLoop+0x314>)
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d102      	bne.n	8008502 <mainLoop+0x276>
			menu(&hi2c1);
 80084fc:	481a      	ldr	r0, [pc, #104]	; (8008568 <mainLoop+0x2dc>)
 80084fe:	f7f8 ffdf 	bl	80014c0 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8008502:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008506:	4813      	ldr	r0, [pc, #76]	; (8008554 <mainLoop+0x2c8>)
 8008508:	f001 fb49 	bl	8009b9e <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 800850c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008510:	4828      	ldr	r0, [pc, #160]	; (80085b4 <mainLoop+0x328>)
 8008512:	f001 fb15 	bl	8009b40 <HAL_GPIO_ReadPin>
 8008516:	4603      	mov	r3, r0
 8008518:	2b00      	cmp	r3, #0
 800851a:	d10a      	bne.n	8008532 <mainLoop+0x2a6>
 800851c:	4b26      	ldr	r3, [pc, #152]	; (80085b8 <mainLoop+0x32c>)
 800851e:	781b      	ldrb	r3, [r3, #0]
 8008520:	f083 0301 	eor.w	r3, r3, #1
 8008524:	b2db      	uxtb	r3, r3
 8008526:	2b00      	cmp	r3, #0
 8008528:	d003      	beq.n	8008532 <mainLoop+0x2a6>
			stopVar=1;
 800852a:	4b24      	ldr	r3, [pc, #144]	; (80085bc <mainLoop+0x330>)
 800852c:	2201      	movs	r2, #1
 800852e:	701a      	strb	r2, [r3, #0]
 8008530:	e002      	b.n	8008538 <mainLoop+0x2ac>
		} else {
			stopVar=0;
 8008532:	4b22      	ldr	r3, [pc, #136]	; (80085bc <mainLoop+0x330>)
 8008534:	2200      	movs	r2, #0
 8008536:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8008538:	f7fd fec8 	bl	80062cc <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 800853c:	f7fd fefa 	bl	8006334 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8008540:	f7fd ff3e 	bl	80063c0 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8008544:	f7fd ff8e 	bl	8006464 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 8008548:	f7ff fadc 	bl	8007b04 <checkDemoModCalisma>
		checkLCDBacklight();
 800854c:	e6a1      	b.n	8008292 <mainLoop+0x6>
 800854e:	bf00      	nop
 8008550:	40010800 	.word	0x40010800
 8008554:	40011000 	.word	0x40011000
 8008558:	20000d64 	.word	0x20000d64
 800855c:	20000cc0 	.word	0x20000cc0
 8008560:	20000cdc 	.word	0x20000cdc
 8008564:	20000d61 	.word	0x20000d61
 8008568:	20000b50 	.word	0x20000b50
 800856c:	20000c34 	.word	0x20000c34
 8008570:	20000d56 	.word	0x20000d56
 8008574:	0800e3b0 	.word	0x0800e3b0
 8008578:	0800e3c4 	.word	0x0800e3c4
 800857c:	20000d62 	.word	0x20000d62
 8008580:	20000d63 	.word	0x20000d63
 8008584:	0800e3d8 	.word	0x0800e3d8
 8008588:	0800e3ec 	.word	0x0800e3ec
 800858c:	0800e400 	.word	0x0800e400
 8008590:	0800e414 	.word	0x0800e414
 8008594:	0800e428 	.word	0x0800e428
 8008598:	0800e43c 	.word	0x0800e43c
 800859c:	0800e450 	.word	0x0800e450
 80085a0:	20000d52 	.word	0x20000d52
 80085a4:	20000d69 	.word	0x20000d69
 80085a8:	20000d53 	.word	0x20000d53
 80085ac:	0800e314 	.word	0x0800e314
 80085b0:	0800e328 	.word	0x0800e328
 80085b4:	40010c00 	.word	0x40010c00
 80085b8:	20000d8a 	.word	0x20000d8a
 80085bc:	20000d87 	.word	0x20000d87

080085c0 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 80085c0:	b480      	push	{r7}
 80085c2:	b083      	sub	sp, #12
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 80085c8:	4b04      	ldr	r3, [pc, #16]	; (80085dc <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	3301      	adds	r3, #1
 80085ce:	4a03      	ldr	r2, [pc, #12]	; (80085dc <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80085d0:	6013      	str	r3, [r2, #0]
}
 80085d2:	bf00      	nop
 80085d4:	370c      	adds	r7, #12
 80085d6:	46bd      	mov	sp, r7
 80085d8:	bc80      	pop	{r7}
 80085da:	4770      	bx	lr
 80085dc:	20000cc0 	.word	0x20000cc0

080085e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80085e0:	b580      	push	{r7, lr}
 80085e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80085e4:	f000 fc7a 	bl	8008edc <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 80085e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80085ec:	f000 fcd8 	bl	8008fa0 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80085f0:	f000 f8aa 	bl	8008748 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80085f4:	f000 f9cc 	bl	8008990 <MX_GPIO_Init>
  MX_CAN_Init();
 80085f8:	f000 f8ec 	bl	80087d4 <MX_CAN_Init>
  MX_I2C1_Init();
 80085fc:	f000 f91e 	bl	800883c <MX_I2C1_Init>
  MX_TIM1_Init();
 8008600:	f000 f94a 	bl	8008898 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8008604:	f000 f99a 	bl	800893c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8008608:	2201      	movs	r2, #1
 800860a:	2140      	movs	r1, #64	; 0x40
 800860c:	4844      	ldr	r0, [pc, #272]	; (8008720 <main+0x140>)
 800860e:	f001 faae 	bl	8009b6e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8008612:	2201      	movs	r2, #1
 8008614:	2180      	movs	r1, #128	; 0x80
 8008616:	4842      	ldr	r0, [pc, #264]	; (8008720 <main+0x140>)
 8008618:	f001 faa9 	bl	8009b6e <HAL_GPIO_WritePin>
  HAL_Delay(10);
 800861c:	200a      	movs	r0, #10
 800861e:	f000 fcbf 	bl	8008fa0 <HAL_Delay>
  lcd_init();
 8008622:	f7f7 ffef 	bl	8000604 <lcd_init>
  HAL_Delay(10);
 8008626:	200a      	movs	r0, #10
 8008628:	f000 fcba 	bl	8008fa0 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 800862c:	483d      	ldr	r0, [pc, #244]	; (8008724 <main+0x144>)
 800862e:	f003 f951 	bl	800b8d4 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008632:	bf00      	nop
 8008634:	483c      	ldr	r0, [pc, #240]	; (8008728 <main+0x148>)
 8008636:	f002 f8ac 	bl	800a792 <HAL_I2C_GetError>
 800863a:	4603      	mov	r3, r0
 800863c:	2b04      	cmp	r3, #4
 800863e:	d0f9      	beq.n	8008634 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008640:	bf00      	nop
 8008642:	4839      	ldr	r0, [pc, #228]	; (8008728 <main+0x148>)
 8008644:	f002 f898 	bl	800a778 <HAL_I2C_GetState>
 8008648:	4603      	mov	r3, r0
 800864a:	2b20      	cmp	r3, #32
 800864c:	d1f9      	bne.n	8008642 <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 800864e:	2200      	movs	r2, #0
 8008650:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008654:	4832      	ldr	r0, [pc, #200]	; (8008720 <main+0x140>)
 8008656:	f001 fa8a 	bl	8009b6e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800865a:	2200      	movs	r2, #0
 800865c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008660:	482f      	ldr	r0, [pc, #188]	; (8008720 <main+0x140>)
 8008662:	f001 fa84 	bl	8009b6e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8008666:	2200      	movs	r2, #0
 8008668:	2104      	movs	r1, #4
 800866a:	482d      	ldr	r0, [pc, #180]	; (8008720 <main+0x140>)
 800866c:	f001 fa7f 	bl	8009b6e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8008670:	2200      	movs	r2, #0
 8008672:	2102      	movs	r1, #2
 8008674:	482a      	ldr	r0, [pc, #168]	; (8008720 <main+0x140>)
 8008676:	f001 fa7a 	bl	8009b6e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800867a:	2200      	movs	r2, #0
 800867c:	2101      	movs	r1, #1
 800867e:	4828      	ldr	r0, [pc, #160]	; (8008720 <main+0x140>)
 8008680:	f001 fa75 	bl	8009b6e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8008684:	2200      	movs	r2, #0
 8008686:	2120      	movs	r1, #32
 8008688:	4828      	ldr	r0, [pc, #160]	; (800872c <main+0x14c>)
 800868a:	f001 fa70 	bl	8009b6e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800868e:	2200      	movs	r2, #0
 8008690:	2110      	movs	r1, #16
 8008692:	4826      	ldr	r0, [pc, #152]	; (800872c <main+0x14c>)
 8008694:	f001 fa6b 	bl	8009b6e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8008698:	2200      	movs	r2, #0
 800869a:	2180      	movs	r1, #128	; 0x80
 800869c:	4824      	ldr	r0, [pc, #144]	; (8008730 <main+0x150>)
 800869e:	f001 fa66 	bl	8009b6e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80086a2:	2200      	movs	r2, #0
 80086a4:	2140      	movs	r1, #64	; 0x40
 80086a6:	4822      	ldr	r0, [pc, #136]	; (8008730 <main+0x150>)
 80086a8:	f001 fa61 	bl	8009b6e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80086ac:	2200      	movs	r2, #0
 80086ae:	2120      	movs	r1, #32
 80086b0:	481f      	ldr	r0, [pc, #124]	; (8008730 <main+0x150>)
 80086b2:	f001 fa5c 	bl	8009b6e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 80086b6:	2200      	movs	r2, #0
 80086b8:	2110      	movs	r1, #16
 80086ba:	481d      	ldr	r0, [pc, #116]	; (8008730 <main+0x150>)
 80086bc:	f001 fa57 	bl	8009b6e <HAL_GPIO_WritePin>

  i2cTest();
 80086c0:	f7fd fd36 	bl	8006130 <i2cTest>
  HAL_Delay(100);
 80086c4:	2064      	movs	r0, #100	; 0x64
 80086c6:	f000 fc6b 	bl	8008fa0 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 80086ca:	4a1a      	ldr	r2, [pc, #104]	; (8008734 <main+0x154>)
 80086cc:	2101      	movs	r1, #1
 80086ce:	2001      	movs	r0, #1
 80086d0:	f7f7 ffca 	bl	8000668 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 80086d4:	4a18      	ldr	r2, [pc, #96]	; (8008738 <main+0x158>)
 80086d6:	2101      	movs	r1, #1
 80086d8:	2002      	movs	r0, #2
 80086da:	f7f7 ffc5 	bl	8000668 <lcd_print>
  HAL_Delay(1000);
 80086de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80086e2:	f000 fc5d 	bl	8008fa0 <HAL_Delay>
  lcd_clear();
 80086e6:	f7f7 ffeb 	bl	80006c0 <lcd_clear>

  eepromKontrol(0);
 80086ea:	2000      	movs	r0, #0
 80086ec:	f7fd f982 	bl	80059f4 <eepromKontrol>
  HAL_Delay(200);
 80086f0:	20c8      	movs	r0, #200	; 0xc8
 80086f2:	f000 fc55 	bl	8008fa0 <HAL_Delay>

  lcd_clear();
 80086f6:	f7f7 ffe3 	bl	80006c0 <lcd_clear>
  HAL_Delay(200);
 80086fa:	20c8      	movs	r0, #200	; 0xc8
 80086fc:	f000 fc50 	bl	8008fa0 <HAL_Delay>

  backLightTimer = millis;
 8008700:	4b0e      	ldr	r3, [pc, #56]	; (800873c <main+0x15c>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4a0e      	ldr	r2, [pc, #56]	; (8008740 <main+0x160>)
 8008706:	6013      	str	r3, [r2, #0]

  if(strlen(machineID) != 12) {
 8008708:	480e      	ldr	r0, [pc, #56]	; (8008744 <main+0x164>)
 800870a:	f7f7 fd8b 	bl	8000224 <strlen>
 800870e:	4603      	mov	r3, r0
 8008710:	2b0c      	cmp	r3, #12
 8008712:	d002      	beq.n	800871a <main+0x13a>
	  takeMachineID(0);
 8008714:	2000      	movs	r0, #0
 8008716:	f7f8 f9d1 	bl	8000abc <takeMachineID>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 800871a:	f7ff fdb7 	bl	800828c <mainLoop>
 800871e:	e7fc      	b.n	800871a <main+0x13a>
 8008720:	40010c00 	.word	0x40010c00
 8008724:	20000ba4 	.word	0x20000ba4
 8008728:	20000b50 	.word	0x20000b50
 800872c:	40011000 	.word	0x40011000
 8008730:	40010800 	.word	0x40010800
 8008734:	0800e464 	.word	0x0800e464
 8008738:	0800e478 	.word	0x0800e478
 800873c:	20000cc0 	.word	0x20000cc0
 8008740:	20000cdc 	.word	0x20000cdc
 8008744:	20000ce0 	.word	0x20000ce0

08008748 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008748:	b580      	push	{r7, lr}
 800874a:	b090      	sub	sp, #64	; 0x40
 800874c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800874e:	f107 0318 	add.w	r3, r7, #24
 8008752:	2228      	movs	r2, #40	; 0x28
 8008754:	2100      	movs	r1, #0
 8008756:	4618      	mov	r0, r3
 8008758:	f004 fb36 	bl	800cdc8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800875c:	1d3b      	adds	r3, r7, #4
 800875e:	2200      	movs	r2, #0
 8008760:	601a      	str	r2, [r3, #0]
 8008762:	605a      	str	r2, [r3, #4]
 8008764:	609a      	str	r2, [r3, #8]
 8008766:	60da      	str	r2, [r3, #12]
 8008768:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800876a:	2301      	movs	r3, #1
 800876c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800876e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008772:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8008774:	2300      	movs	r3, #0
 8008776:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008778:	2301      	movs	r3, #1
 800877a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800877c:	2302      	movs	r3, #2
 800877e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008780:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008784:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8008786:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800878a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800878c:	f107 0318 	add.w	r3, r7, #24
 8008790:	4618      	mov	r0, r3
 8008792:	f002 fc3f 	bl	800b014 <HAL_RCC_OscConfig>
 8008796:	4603      	mov	r3, r0
 8008798:	2b00      	cmp	r3, #0
 800879a:	d001      	beq.n	80087a0 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800879c:	f000 f9a2 	bl	8008ae4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80087a0:	230f      	movs	r3, #15
 80087a2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80087a4:	2302      	movs	r3, #2
 80087a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80087a8:	2300      	movs	r3, #0
 80087aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80087ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087b0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80087b2:	2300      	movs	r3, #0
 80087b4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80087b6:	1d3b      	adds	r3, r7, #4
 80087b8:	2102      	movs	r1, #2
 80087ba:	4618      	mov	r0, r3
 80087bc:	f002 feac 	bl	800b518 <HAL_RCC_ClockConfig>
 80087c0:	4603      	mov	r3, r0
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d001      	beq.n	80087ca <SystemClock_Config+0x82>
  {
    Error_Handler();
 80087c6:	f000 f98d 	bl	8008ae4 <Error_Handler>
  }
}
 80087ca:	bf00      	nop
 80087cc:	3740      	adds	r7, #64	; 0x40
 80087ce:	46bd      	mov	sp, r7
 80087d0:	bd80      	pop	{r7, pc}
	...

080087d4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80087d4:	b580      	push	{r7, lr}
 80087d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 80087d8:	4b16      	ldr	r3, [pc, #88]	; (8008834 <MX_CAN_Init+0x60>)
 80087da:	4a17      	ldr	r2, [pc, #92]	; (8008838 <MX_CAN_Init+0x64>)
 80087dc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 80087de:	4b15      	ldr	r3, [pc, #84]	; (8008834 <MX_CAN_Init+0x60>)
 80087e0:	2210      	movs	r2, #16
 80087e2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 80087e4:	4b13      	ldr	r3, [pc, #76]	; (8008834 <MX_CAN_Init+0x60>)
 80087e6:	2200      	movs	r2, #0
 80087e8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80087ea:	4b12      	ldr	r3, [pc, #72]	; (8008834 <MX_CAN_Init+0x60>)
 80087ec:	2200      	movs	r2, #0
 80087ee:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 80087f0:	4b10      	ldr	r3, [pc, #64]	; (8008834 <MX_CAN_Init+0x60>)
 80087f2:	2200      	movs	r2, #0
 80087f4:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 80087f6:	4b0f      	ldr	r3, [pc, #60]	; (8008834 <MX_CAN_Init+0x60>)
 80087f8:	2200      	movs	r2, #0
 80087fa:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 80087fc:	4b0d      	ldr	r3, [pc, #52]	; (8008834 <MX_CAN_Init+0x60>)
 80087fe:	2200      	movs	r2, #0
 8008800:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8008802:	4b0c      	ldr	r3, [pc, #48]	; (8008834 <MX_CAN_Init+0x60>)
 8008804:	2200      	movs	r2, #0
 8008806:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8008808:	4b0a      	ldr	r3, [pc, #40]	; (8008834 <MX_CAN_Init+0x60>)
 800880a:	2200      	movs	r2, #0
 800880c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800880e:	4b09      	ldr	r3, [pc, #36]	; (8008834 <MX_CAN_Init+0x60>)
 8008810:	2200      	movs	r2, #0
 8008812:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8008814:	4b07      	ldr	r3, [pc, #28]	; (8008834 <MX_CAN_Init+0x60>)
 8008816:	2200      	movs	r2, #0
 8008818:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800881a:	4b06      	ldr	r3, [pc, #24]	; (8008834 <MX_CAN_Init+0x60>)
 800881c:	2200      	movs	r2, #0
 800881e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8008820:	4804      	ldr	r0, [pc, #16]	; (8008834 <MX_CAN_Init+0x60>)
 8008822:	f000 fbe1 	bl	8008fe8 <HAL_CAN_Init>
 8008826:	4603      	mov	r3, r0
 8008828:	2b00      	cmp	r3, #0
 800882a:	d001      	beq.n	8008830 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 800882c:	f000 f95a 	bl	8008ae4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8008830:	bf00      	nop
 8008832:	bd80      	pop	{r7, pc}
 8008834:	20000b28 	.word	0x20000b28
 8008838:	40006400 	.word	0x40006400

0800883c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800883c:	b580      	push	{r7, lr}
 800883e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8008840:	4b12      	ldr	r3, [pc, #72]	; (800888c <MX_I2C1_Init+0x50>)
 8008842:	4a13      	ldr	r2, [pc, #76]	; (8008890 <MX_I2C1_Init+0x54>)
 8008844:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8008846:	4b11      	ldr	r3, [pc, #68]	; (800888c <MX_I2C1_Init+0x50>)
 8008848:	4a12      	ldr	r2, [pc, #72]	; (8008894 <MX_I2C1_Init+0x58>)
 800884a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800884c:	4b0f      	ldr	r3, [pc, #60]	; (800888c <MX_I2C1_Init+0x50>)
 800884e:	2200      	movs	r2, #0
 8008850:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8008852:	4b0e      	ldr	r3, [pc, #56]	; (800888c <MX_I2C1_Init+0x50>)
 8008854:	2200      	movs	r2, #0
 8008856:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008858:	4b0c      	ldr	r3, [pc, #48]	; (800888c <MX_I2C1_Init+0x50>)
 800885a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800885e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008860:	4b0a      	ldr	r3, [pc, #40]	; (800888c <MX_I2C1_Init+0x50>)
 8008862:	2200      	movs	r2, #0
 8008864:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8008866:	4b09      	ldr	r3, [pc, #36]	; (800888c <MX_I2C1_Init+0x50>)
 8008868:	2200      	movs	r2, #0
 800886a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800886c:	4b07      	ldr	r3, [pc, #28]	; (800888c <MX_I2C1_Init+0x50>)
 800886e:	2200      	movs	r2, #0
 8008870:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008872:	4b06      	ldr	r3, [pc, #24]	; (800888c <MX_I2C1_Init+0x50>)
 8008874:	2200      	movs	r2, #0
 8008876:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008878:	4804      	ldr	r0, [pc, #16]	; (800888c <MX_I2C1_Init+0x50>)
 800887a:	f001 f9a9 	bl	8009bd0 <HAL_I2C_Init>
 800887e:	4603      	mov	r3, r0
 8008880:	2b00      	cmp	r3, #0
 8008882:	d001      	beq.n	8008888 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008884:	f000 f92e 	bl	8008ae4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8008888:	bf00      	nop
 800888a:	bd80      	pop	{r7, pc}
 800888c:	20000b50 	.word	0x20000b50
 8008890:	40005400 	.word	0x40005400
 8008894:	00061a80 	.word	0x00061a80

08008898 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b086      	sub	sp, #24
 800889c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800889e:	f107 0308 	add.w	r3, r7, #8
 80088a2:	2200      	movs	r2, #0
 80088a4:	601a      	str	r2, [r3, #0]
 80088a6:	605a      	str	r2, [r3, #4]
 80088a8:	609a      	str	r2, [r3, #8]
 80088aa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80088ac:	463b      	mov	r3, r7
 80088ae:	2200      	movs	r2, #0
 80088b0:	601a      	str	r2, [r3, #0]
 80088b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80088b4:	4b1f      	ldr	r3, [pc, #124]	; (8008934 <MX_TIM1_Init+0x9c>)
 80088b6:	4a20      	ldr	r2, [pc, #128]	; (8008938 <MX_TIM1_Init+0xa0>)
 80088b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 80088ba:	4b1e      	ldr	r3, [pc, #120]	; (8008934 <MX_TIM1_Init+0x9c>)
 80088bc:	f648 429f 	movw	r2, #35999	; 0x8c9f
 80088c0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80088c2:	4b1c      	ldr	r3, [pc, #112]	; (8008934 <MX_TIM1_Init+0x9c>)
 80088c4:	2200      	movs	r2, #0
 80088c6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 80088c8:	4b1a      	ldr	r3, [pc, #104]	; (8008934 <MX_TIM1_Init+0x9c>)
 80088ca:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80088ce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80088d0:	4b18      	ldr	r3, [pc, #96]	; (8008934 <MX_TIM1_Init+0x9c>)
 80088d2:	2200      	movs	r2, #0
 80088d4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80088d6:	4b17      	ldr	r3, [pc, #92]	; (8008934 <MX_TIM1_Init+0x9c>)
 80088d8:	2200      	movs	r2, #0
 80088da:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80088dc:	4b15      	ldr	r3, [pc, #84]	; (8008934 <MX_TIM1_Init+0x9c>)
 80088de:	2200      	movs	r2, #0
 80088e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80088e2:	4814      	ldr	r0, [pc, #80]	; (8008934 <MX_TIM1_Init+0x9c>)
 80088e4:	f002 ffa6 	bl	800b834 <HAL_TIM_Base_Init>
 80088e8:	4603      	mov	r3, r0
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d001      	beq.n	80088f2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80088ee:	f000 f8f9 	bl	8008ae4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80088f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80088f6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80088f8:	f107 0308 	add.w	r3, r7, #8
 80088fc:	4619      	mov	r1, r3
 80088fe:	480d      	ldr	r0, [pc, #52]	; (8008934 <MX_TIM1_Init+0x9c>)
 8008900:	f003 f950 	bl	800bba4 <HAL_TIM_ConfigClockSource>
 8008904:	4603      	mov	r3, r0
 8008906:	2b00      	cmp	r3, #0
 8008908:	d001      	beq.n	800890e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800890a:	f000 f8eb 	bl	8008ae4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800890e:	2300      	movs	r3, #0
 8008910:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008912:	2300      	movs	r3, #0
 8008914:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008916:	463b      	mov	r3, r7
 8008918:	4619      	mov	r1, r3
 800891a:	4806      	ldr	r0, [pc, #24]	; (8008934 <MX_TIM1_Init+0x9c>)
 800891c:	f003 fb3e 	bl	800bf9c <HAL_TIMEx_MasterConfigSynchronization>
 8008920:	4603      	mov	r3, r0
 8008922:	2b00      	cmp	r3, #0
 8008924:	d001      	beq.n	800892a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8008926:	f000 f8dd 	bl	8008ae4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800892a:	bf00      	nop
 800892c:	3718      	adds	r7, #24
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}
 8008932:	bf00      	nop
 8008934:	20000ba4 	.word	0x20000ba4
 8008938:	40012c00 	.word	0x40012c00

0800893c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008940:	4b11      	ldr	r3, [pc, #68]	; (8008988 <MX_USART1_UART_Init+0x4c>)
 8008942:	4a12      	ldr	r2, [pc, #72]	; (800898c <MX_USART1_UART_Init+0x50>)
 8008944:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008946:	4b10      	ldr	r3, [pc, #64]	; (8008988 <MX_USART1_UART_Init+0x4c>)
 8008948:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800894c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800894e:	4b0e      	ldr	r3, [pc, #56]	; (8008988 <MX_USART1_UART_Init+0x4c>)
 8008950:	2200      	movs	r2, #0
 8008952:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008954:	4b0c      	ldr	r3, [pc, #48]	; (8008988 <MX_USART1_UART_Init+0x4c>)
 8008956:	2200      	movs	r2, #0
 8008958:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800895a:	4b0b      	ldr	r3, [pc, #44]	; (8008988 <MX_USART1_UART_Init+0x4c>)
 800895c:	2200      	movs	r2, #0
 800895e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008960:	4b09      	ldr	r3, [pc, #36]	; (8008988 <MX_USART1_UART_Init+0x4c>)
 8008962:	220c      	movs	r2, #12
 8008964:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008966:	4b08      	ldr	r3, [pc, #32]	; (8008988 <MX_USART1_UART_Init+0x4c>)
 8008968:	2200      	movs	r2, #0
 800896a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800896c:	4b06      	ldr	r3, [pc, #24]	; (8008988 <MX_USART1_UART_Init+0x4c>)
 800896e:	2200      	movs	r2, #0
 8008970:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008972:	4805      	ldr	r0, [pc, #20]	; (8008988 <MX_USART1_UART_Init+0x4c>)
 8008974:	f003 fb90 	bl	800c098 <HAL_UART_Init>
 8008978:	4603      	mov	r3, r0
 800897a:	2b00      	cmp	r3, #0
 800897c:	d001      	beq.n	8008982 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800897e:	f000 f8b1 	bl	8008ae4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008982:	bf00      	nop
 8008984:	bd80      	pop	{r7, pc}
 8008986:	bf00      	nop
 8008988:	20000bec 	.word	0x20000bec
 800898c:	40013800 	.word	0x40013800

08008990 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b088      	sub	sp, #32
 8008994:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008996:	f107 0310 	add.w	r3, r7, #16
 800899a:	2200      	movs	r2, #0
 800899c:	601a      	str	r2, [r3, #0]
 800899e:	605a      	str	r2, [r3, #4]
 80089a0:	609a      	str	r2, [r3, #8]
 80089a2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80089a4:	4b4b      	ldr	r3, [pc, #300]	; (8008ad4 <MX_GPIO_Init+0x144>)
 80089a6:	699b      	ldr	r3, [r3, #24]
 80089a8:	4a4a      	ldr	r2, [pc, #296]	; (8008ad4 <MX_GPIO_Init+0x144>)
 80089aa:	f043 0310 	orr.w	r3, r3, #16
 80089ae:	6193      	str	r3, [r2, #24]
 80089b0:	4b48      	ldr	r3, [pc, #288]	; (8008ad4 <MX_GPIO_Init+0x144>)
 80089b2:	699b      	ldr	r3, [r3, #24]
 80089b4:	f003 0310 	and.w	r3, r3, #16
 80089b8:	60fb      	str	r3, [r7, #12]
 80089ba:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80089bc:	4b45      	ldr	r3, [pc, #276]	; (8008ad4 <MX_GPIO_Init+0x144>)
 80089be:	699b      	ldr	r3, [r3, #24]
 80089c0:	4a44      	ldr	r2, [pc, #272]	; (8008ad4 <MX_GPIO_Init+0x144>)
 80089c2:	f043 0320 	orr.w	r3, r3, #32
 80089c6:	6193      	str	r3, [r2, #24]
 80089c8:	4b42      	ldr	r3, [pc, #264]	; (8008ad4 <MX_GPIO_Init+0x144>)
 80089ca:	699b      	ldr	r3, [r3, #24]
 80089cc:	f003 0320 	and.w	r3, r3, #32
 80089d0:	60bb      	str	r3, [r7, #8]
 80089d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80089d4:	4b3f      	ldr	r3, [pc, #252]	; (8008ad4 <MX_GPIO_Init+0x144>)
 80089d6:	699b      	ldr	r3, [r3, #24]
 80089d8:	4a3e      	ldr	r2, [pc, #248]	; (8008ad4 <MX_GPIO_Init+0x144>)
 80089da:	f043 0304 	orr.w	r3, r3, #4
 80089de:	6193      	str	r3, [r2, #24]
 80089e0:	4b3c      	ldr	r3, [pc, #240]	; (8008ad4 <MX_GPIO_Init+0x144>)
 80089e2:	699b      	ldr	r3, [r3, #24]
 80089e4:	f003 0304 	and.w	r3, r3, #4
 80089e8:	607b      	str	r3, [r7, #4]
 80089ea:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80089ec:	4b39      	ldr	r3, [pc, #228]	; (8008ad4 <MX_GPIO_Init+0x144>)
 80089ee:	699b      	ldr	r3, [r3, #24]
 80089f0:	4a38      	ldr	r2, [pc, #224]	; (8008ad4 <MX_GPIO_Init+0x144>)
 80089f2:	f043 0308 	orr.w	r3, r3, #8
 80089f6:	6193      	str	r3, [r2, #24]
 80089f8:	4b36      	ldr	r3, [pc, #216]	; (8008ad4 <MX_GPIO_Init+0x144>)
 80089fa:	699b      	ldr	r3, [r3, #24]
 80089fc:	f003 0308 	and.w	r3, r3, #8
 8008a00:	603b      	str	r3, [r7, #0]
 8008a02:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8008a04:	2200      	movs	r2, #0
 8008a06:	21f0      	movs	r1, #240	; 0xf0
 8008a08:	4833      	ldr	r0, [pc, #204]	; (8008ad8 <MX_GPIO_Init+0x148>)
 8008a0a:	f001 f8b0 	bl	8009b6e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8008a0e:	2200      	movs	r2, #0
 8008a10:	f241 0130 	movw	r1, #4144	; 0x1030
 8008a14:	4831      	ldr	r0, [pc, #196]	; (8008adc <MX_GPIO_Init+0x14c>)
 8008a16:	f001 f8aa 	bl	8009b6e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008a1a:	2200      	movs	r2, #0
 8008a1c:	f640 4107 	movw	r1, #3079	; 0xc07
 8008a20:	482f      	ldr	r0, [pc, #188]	; (8008ae0 <MX_GPIO_Init+0x150>)
 8008a22:	f001 f8a4 	bl	8009b6e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8008a26:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 8008a2a:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a30:	2300      	movs	r3, #0
 8008a32:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008a34:	f107 0310 	add.w	r3, r7, #16
 8008a38:	4619      	mov	r1, r3
 8008a3a:	4828      	ldr	r0, [pc, #160]	; (8008adc <MX_GPIO_Init+0x14c>)
 8008a3c:	f000 fe20 	bl	8009680 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8008a40:	f248 130f 	movw	r3, #33039	; 0x810f
 8008a44:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008a46:	2300      	movs	r3, #0
 8008a48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a4a:	2300      	movs	r3, #0
 8008a4c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a4e:	f107 0310 	add.w	r3, r7, #16
 8008a52:	4619      	mov	r1, r3
 8008a54:	4820      	ldr	r0, [pc, #128]	; (8008ad8 <MX_GPIO_Init+0x148>)
 8008a56:	f000 fe13 	bl	8009680 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8008a5a:	23f0      	movs	r3, #240	; 0xf0
 8008a5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a62:	2300      	movs	r3, #0
 8008a64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a66:	2302      	movs	r3, #2
 8008a68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a6a:	f107 0310 	add.w	r3, r7, #16
 8008a6e:	4619      	mov	r1, r3
 8008a70:	4819      	ldr	r0, [pc, #100]	; (8008ad8 <MX_GPIO_Init+0x148>)
 8008a72:	f000 fe05 	bl	8009680 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 8008a76:	f241 0330 	movw	r3, #4144	; 0x1030
 8008a7a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008a7c:	2301      	movs	r3, #1
 8008a7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a80:	2300      	movs	r3, #0
 8008a82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a84:	2302      	movs	r3, #2
 8008a86:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008a88:	f107 0310 	add.w	r3, r7, #16
 8008a8c:	4619      	mov	r1, r3
 8008a8e:	4813      	ldr	r0, [pc, #76]	; (8008adc <MX_GPIO_Init+0x14c>)
 8008a90:	f000 fdf6 	bl	8009680 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008a94:	f640 4307 	movw	r3, #3079	; 0xc07
 8008a98:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008aa2:	2302      	movs	r3, #2
 8008aa4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008aa6:	f107 0310 	add.w	r3, r7, #16
 8008aaa:	4619      	mov	r1, r3
 8008aac:	480c      	ldr	r0, [pc, #48]	; (8008ae0 <MX_GPIO_Init+0x150>)
 8008aae:	f000 fde7 	bl	8009680 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8008ab2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8008ab6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008ab8:	2300      	movs	r3, #0
 8008aba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008abc:	2300      	movs	r3, #0
 8008abe:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008ac0:	f107 0310 	add.w	r3, r7, #16
 8008ac4:	4619      	mov	r1, r3
 8008ac6:	4806      	ldr	r0, [pc, #24]	; (8008ae0 <MX_GPIO_Init+0x150>)
 8008ac8:	f000 fdda 	bl	8009680 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008acc:	bf00      	nop
 8008ace:	3720      	adds	r7, #32
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}
 8008ad4:	40021000 	.word	0x40021000
 8008ad8:	40010800 	.word	0x40010800
 8008adc:	40011000 	.word	0x40011000
 8008ae0:	40010c00 	.word	0x40010c00

08008ae4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008ae4:	b480      	push	{r7}
 8008ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8008ae8:	bf00      	nop
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bc80      	pop	{r7}
 8008aee:	4770      	bx	lr

08008af0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b085      	sub	sp, #20
 8008af4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008af6:	4b15      	ldr	r3, [pc, #84]	; (8008b4c <HAL_MspInit+0x5c>)
 8008af8:	699b      	ldr	r3, [r3, #24]
 8008afa:	4a14      	ldr	r2, [pc, #80]	; (8008b4c <HAL_MspInit+0x5c>)
 8008afc:	f043 0301 	orr.w	r3, r3, #1
 8008b00:	6193      	str	r3, [r2, #24]
 8008b02:	4b12      	ldr	r3, [pc, #72]	; (8008b4c <HAL_MspInit+0x5c>)
 8008b04:	699b      	ldr	r3, [r3, #24]
 8008b06:	f003 0301 	and.w	r3, r3, #1
 8008b0a:	60bb      	str	r3, [r7, #8]
 8008b0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008b0e:	4b0f      	ldr	r3, [pc, #60]	; (8008b4c <HAL_MspInit+0x5c>)
 8008b10:	69db      	ldr	r3, [r3, #28]
 8008b12:	4a0e      	ldr	r2, [pc, #56]	; (8008b4c <HAL_MspInit+0x5c>)
 8008b14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b18:	61d3      	str	r3, [r2, #28]
 8008b1a:	4b0c      	ldr	r3, [pc, #48]	; (8008b4c <HAL_MspInit+0x5c>)
 8008b1c:	69db      	ldr	r3, [r3, #28]
 8008b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b22:	607b      	str	r3, [r7, #4]
 8008b24:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008b26:	4b0a      	ldr	r3, [pc, #40]	; (8008b50 <HAL_MspInit+0x60>)
 8008b28:	685b      	ldr	r3, [r3, #4]
 8008b2a:	60fb      	str	r3, [r7, #12]
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8008b32:	60fb      	str	r3, [r7, #12]
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008b3a:	60fb      	str	r3, [r7, #12]
 8008b3c:	4a04      	ldr	r2, [pc, #16]	; (8008b50 <HAL_MspInit+0x60>)
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008b42:	bf00      	nop
 8008b44:	3714      	adds	r7, #20
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bc80      	pop	{r7}
 8008b4a:	4770      	bx	lr
 8008b4c:	40021000 	.word	0x40021000
 8008b50:	40010000 	.word	0x40010000

08008b54 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b088      	sub	sp, #32
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b5c:	f107 0310 	add.w	r3, r7, #16
 8008b60:	2200      	movs	r2, #0
 8008b62:	601a      	str	r2, [r3, #0]
 8008b64:	605a      	str	r2, [r3, #4]
 8008b66:	609a      	str	r2, [r3, #8]
 8008b68:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a1c      	ldr	r2, [pc, #112]	; (8008be0 <HAL_CAN_MspInit+0x8c>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d131      	bne.n	8008bd8 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8008b74:	4b1b      	ldr	r3, [pc, #108]	; (8008be4 <HAL_CAN_MspInit+0x90>)
 8008b76:	69db      	ldr	r3, [r3, #28]
 8008b78:	4a1a      	ldr	r2, [pc, #104]	; (8008be4 <HAL_CAN_MspInit+0x90>)
 8008b7a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008b7e:	61d3      	str	r3, [r2, #28]
 8008b80:	4b18      	ldr	r3, [pc, #96]	; (8008be4 <HAL_CAN_MspInit+0x90>)
 8008b82:	69db      	ldr	r3, [r3, #28]
 8008b84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b88:	60fb      	str	r3, [r7, #12]
 8008b8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008b8c:	4b15      	ldr	r3, [pc, #84]	; (8008be4 <HAL_CAN_MspInit+0x90>)
 8008b8e:	699b      	ldr	r3, [r3, #24]
 8008b90:	4a14      	ldr	r2, [pc, #80]	; (8008be4 <HAL_CAN_MspInit+0x90>)
 8008b92:	f043 0304 	orr.w	r3, r3, #4
 8008b96:	6193      	str	r3, [r2, #24]
 8008b98:	4b12      	ldr	r3, [pc, #72]	; (8008be4 <HAL_CAN_MspInit+0x90>)
 8008b9a:	699b      	ldr	r3, [r3, #24]
 8008b9c:	f003 0304 	and.w	r3, r3, #4
 8008ba0:	60bb      	str	r3, [r7, #8]
 8008ba2:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008ba4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008ba8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008baa:	2300      	movs	r3, #0
 8008bac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bae:	2300      	movs	r3, #0
 8008bb0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008bb2:	f107 0310 	add.w	r3, r7, #16
 8008bb6:	4619      	mov	r1, r3
 8008bb8:	480b      	ldr	r0, [pc, #44]	; (8008be8 <HAL_CAN_MspInit+0x94>)
 8008bba:	f000 fd61 	bl	8009680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008bbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008bc2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008bc4:	2302      	movs	r3, #2
 8008bc6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008bc8:	2303      	movs	r3, #3
 8008bca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008bcc:	f107 0310 	add.w	r3, r7, #16
 8008bd0:	4619      	mov	r1, r3
 8008bd2:	4805      	ldr	r0, [pc, #20]	; (8008be8 <HAL_CAN_MspInit+0x94>)
 8008bd4:	f000 fd54 	bl	8009680 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8008bd8:	bf00      	nop
 8008bda:	3720      	adds	r7, #32
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}
 8008be0:	40006400 	.word	0x40006400
 8008be4:	40021000 	.word	0x40021000
 8008be8:	40010800 	.word	0x40010800

08008bec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b088      	sub	sp, #32
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008bf4:	f107 0310 	add.w	r3, r7, #16
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	601a      	str	r2, [r3, #0]
 8008bfc:	605a      	str	r2, [r3, #4]
 8008bfe:	609a      	str	r2, [r3, #8]
 8008c00:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4a15      	ldr	r2, [pc, #84]	; (8008c5c <HAL_I2C_MspInit+0x70>)
 8008c08:	4293      	cmp	r3, r2
 8008c0a:	d123      	bne.n	8008c54 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008c0c:	4b14      	ldr	r3, [pc, #80]	; (8008c60 <HAL_I2C_MspInit+0x74>)
 8008c0e:	699b      	ldr	r3, [r3, #24]
 8008c10:	4a13      	ldr	r2, [pc, #76]	; (8008c60 <HAL_I2C_MspInit+0x74>)
 8008c12:	f043 0308 	orr.w	r3, r3, #8
 8008c16:	6193      	str	r3, [r2, #24]
 8008c18:	4b11      	ldr	r3, [pc, #68]	; (8008c60 <HAL_I2C_MspInit+0x74>)
 8008c1a:	699b      	ldr	r3, [r3, #24]
 8008c1c:	f003 0308 	and.w	r3, r3, #8
 8008c20:	60fb      	str	r3, [r7, #12]
 8008c22:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008c24:	23c0      	movs	r3, #192	; 0xc0
 8008c26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008c28:	2312      	movs	r3, #18
 8008c2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008c2c:	2303      	movs	r3, #3
 8008c2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008c30:	f107 0310 	add.w	r3, r7, #16
 8008c34:	4619      	mov	r1, r3
 8008c36:	480b      	ldr	r0, [pc, #44]	; (8008c64 <HAL_I2C_MspInit+0x78>)
 8008c38:	f000 fd22 	bl	8009680 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008c3c:	4b08      	ldr	r3, [pc, #32]	; (8008c60 <HAL_I2C_MspInit+0x74>)
 8008c3e:	69db      	ldr	r3, [r3, #28]
 8008c40:	4a07      	ldr	r2, [pc, #28]	; (8008c60 <HAL_I2C_MspInit+0x74>)
 8008c42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008c46:	61d3      	str	r3, [r2, #28]
 8008c48:	4b05      	ldr	r3, [pc, #20]	; (8008c60 <HAL_I2C_MspInit+0x74>)
 8008c4a:	69db      	ldr	r3, [r3, #28]
 8008c4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008c50:	60bb      	str	r3, [r7, #8]
 8008c52:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008c54:	bf00      	nop
 8008c56:	3720      	adds	r7, #32
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bd80      	pop	{r7, pc}
 8008c5c:	40005400 	.word	0x40005400
 8008c60:	40021000 	.word	0x40021000
 8008c64:	40010c00 	.word	0x40010c00

08008c68 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b082      	sub	sp, #8
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4a0a      	ldr	r2, [pc, #40]	; (8008ca0 <HAL_I2C_MspDeInit+0x38>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d10d      	bne.n	8008c96 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8008c7a:	4b0a      	ldr	r3, [pc, #40]	; (8008ca4 <HAL_I2C_MspDeInit+0x3c>)
 8008c7c:	69db      	ldr	r3, [r3, #28]
 8008c7e:	4a09      	ldr	r2, [pc, #36]	; (8008ca4 <HAL_I2C_MspDeInit+0x3c>)
 8008c80:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008c84:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8008c86:	2140      	movs	r1, #64	; 0x40
 8008c88:	4807      	ldr	r0, [pc, #28]	; (8008ca8 <HAL_I2C_MspDeInit+0x40>)
 8008c8a:	f000 fe8d 	bl	80099a8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8008c8e:	2180      	movs	r1, #128	; 0x80
 8008c90:	4805      	ldr	r0, [pc, #20]	; (8008ca8 <HAL_I2C_MspDeInit+0x40>)
 8008c92:	f000 fe89 	bl	80099a8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8008c96:	bf00      	nop
 8008c98:	3708      	adds	r7, #8
 8008c9a:	46bd      	mov	sp, r7
 8008c9c:	bd80      	pop	{r7, pc}
 8008c9e:	bf00      	nop
 8008ca0:	40005400 	.word	0x40005400
 8008ca4:	40021000 	.word	0x40021000
 8008ca8:	40010c00 	.word	0x40010c00

08008cac <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b084      	sub	sp, #16
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a0d      	ldr	r2, [pc, #52]	; (8008cf0 <HAL_TIM_Base_MspInit+0x44>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d113      	bne.n	8008ce6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008cbe:	4b0d      	ldr	r3, [pc, #52]	; (8008cf4 <HAL_TIM_Base_MspInit+0x48>)
 8008cc0:	699b      	ldr	r3, [r3, #24]
 8008cc2:	4a0c      	ldr	r2, [pc, #48]	; (8008cf4 <HAL_TIM_Base_MspInit+0x48>)
 8008cc4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008cc8:	6193      	str	r3, [r2, #24]
 8008cca:	4b0a      	ldr	r3, [pc, #40]	; (8008cf4 <HAL_TIM_Base_MspInit+0x48>)
 8008ccc:	699b      	ldr	r3, [r3, #24]
 8008cce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008cd2:	60fb      	str	r3, [r7, #12]
 8008cd4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	2100      	movs	r1, #0
 8008cda:	2019      	movs	r0, #25
 8008cdc:	f000 fb57 	bl	800938e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8008ce0:	2019      	movs	r0, #25
 8008ce2:	f000 fb70 	bl	80093c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8008ce6:	bf00      	nop
 8008ce8:	3710      	adds	r7, #16
 8008cea:	46bd      	mov	sp, r7
 8008cec:	bd80      	pop	{r7, pc}
 8008cee:	bf00      	nop
 8008cf0:	40012c00 	.word	0x40012c00
 8008cf4:	40021000 	.word	0x40021000

08008cf8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b088      	sub	sp, #32
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d00:	f107 0310 	add.w	r3, r7, #16
 8008d04:	2200      	movs	r2, #0
 8008d06:	601a      	str	r2, [r3, #0]
 8008d08:	605a      	str	r2, [r3, #4]
 8008d0a:	609a      	str	r2, [r3, #8]
 8008d0c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	4a20      	ldr	r2, [pc, #128]	; (8008d94 <HAL_UART_MspInit+0x9c>)
 8008d14:	4293      	cmp	r3, r2
 8008d16:	d139      	bne.n	8008d8c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008d18:	4b1f      	ldr	r3, [pc, #124]	; (8008d98 <HAL_UART_MspInit+0xa0>)
 8008d1a:	699b      	ldr	r3, [r3, #24]
 8008d1c:	4a1e      	ldr	r2, [pc, #120]	; (8008d98 <HAL_UART_MspInit+0xa0>)
 8008d1e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008d22:	6193      	str	r3, [r2, #24]
 8008d24:	4b1c      	ldr	r3, [pc, #112]	; (8008d98 <HAL_UART_MspInit+0xa0>)
 8008d26:	699b      	ldr	r3, [r3, #24]
 8008d28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d2c:	60fb      	str	r3, [r7, #12]
 8008d2e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008d30:	4b19      	ldr	r3, [pc, #100]	; (8008d98 <HAL_UART_MspInit+0xa0>)
 8008d32:	699b      	ldr	r3, [r3, #24]
 8008d34:	4a18      	ldr	r2, [pc, #96]	; (8008d98 <HAL_UART_MspInit+0xa0>)
 8008d36:	f043 0304 	orr.w	r3, r3, #4
 8008d3a:	6193      	str	r3, [r2, #24]
 8008d3c:	4b16      	ldr	r3, [pc, #88]	; (8008d98 <HAL_UART_MspInit+0xa0>)
 8008d3e:	699b      	ldr	r3, [r3, #24]
 8008d40:	f003 0304 	and.w	r3, r3, #4
 8008d44:	60bb      	str	r3, [r7, #8]
 8008d46:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008d48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008d4c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008d4e:	2302      	movs	r3, #2
 8008d50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008d52:	2303      	movs	r3, #3
 8008d54:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d56:	f107 0310 	add.w	r3, r7, #16
 8008d5a:	4619      	mov	r1, r3
 8008d5c:	480f      	ldr	r0, [pc, #60]	; (8008d9c <HAL_UART_MspInit+0xa4>)
 8008d5e:	f000 fc8f 	bl	8009680 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008d62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d66:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008d68:	2300      	movs	r3, #0
 8008d6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008d70:	f107 0310 	add.w	r3, r7, #16
 8008d74:	4619      	mov	r1, r3
 8008d76:	4809      	ldr	r0, [pc, #36]	; (8008d9c <HAL_UART_MspInit+0xa4>)
 8008d78:	f000 fc82 	bl	8009680 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008d7c:	2200      	movs	r2, #0
 8008d7e:	2100      	movs	r1, #0
 8008d80:	2025      	movs	r0, #37	; 0x25
 8008d82:	f000 fb04 	bl	800938e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008d86:	2025      	movs	r0, #37	; 0x25
 8008d88:	f000 fb1d 	bl	80093c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008d8c:	bf00      	nop
 8008d8e:	3720      	adds	r7, #32
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}
 8008d94:	40013800 	.word	0x40013800
 8008d98:	40021000 	.word	0x40021000
 8008d9c:	40010800 	.word	0x40010800

08008da0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008da0:	b480      	push	{r7}
 8008da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008da4:	e7fe      	b.n	8008da4 <NMI_Handler+0x4>

08008da6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008da6:	b480      	push	{r7}
 8008da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008daa:	e7fe      	b.n	8008daa <HardFault_Handler+0x4>

08008dac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008dac:	b480      	push	{r7}
 8008dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008db0:	e7fe      	b.n	8008db0 <MemManage_Handler+0x4>

08008db2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008db2:	b480      	push	{r7}
 8008db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008db6:	e7fe      	b.n	8008db6 <BusFault_Handler+0x4>

08008db8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008db8:	b480      	push	{r7}
 8008dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008dbc:	e7fe      	b.n	8008dbc <UsageFault_Handler+0x4>

08008dbe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008dbe:	b480      	push	{r7}
 8008dc0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008dc2:	bf00      	nop
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bc80      	pop	{r7}
 8008dc8:	4770      	bx	lr

08008dca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008dca:	b480      	push	{r7}
 8008dcc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008dce:	bf00      	nop
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bc80      	pop	{r7}
 8008dd4:	4770      	bx	lr

08008dd6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008dd6:	b480      	push	{r7}
 8008dd8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008dda:	bf00      	nop
 8008ddc:	46bd      	mov	sp, r7
 8008dde:	bc80      	pop	{r7}
 8008de0:	4770      	bx	lr

08008de2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008de2:	b580      	push	{r7, lr}
 8008de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008de6:	f000 f8bf 	bl	8008f68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008dea:	bf00      	nop
 8008dec:	bd80      	pop	{r7, pc}
	...

08008df0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008df4:	4802      	ldr	r0, [pc, #8]	; (8008e00 <TIM1_UP_IRQHandler+0x10>)
 8008df6:	f002 fdcd 	bl	800b994 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8008dfa:	bf00      	nop
 8008dfc:	bd80      	pop	{r7, pc}
 8008dfe:	bf00      	nop
 8008e00:	20000ba4 	.word	0x20000ba4

08008e04 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008e04:	b580      	push	{r7, lr}
 8008e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008e08:	4802      	ldr	r0, [pc, #8]	; (8008e14 <USART1_IRQHandler+0x10>)
 8008e0a:	f003 f9cb 	bl	800c1a4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008e0e:	bf00      	nop
 8008e10:	bd80      	pop	{r7, pc}
 8008e12:	bf00      	nop
 8008e14:	20000bec 	.word	0x20000bec

08008e18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b086      	sub	sp, #24
 8008e1c:	af00      	add	r7, sp, #0
 8008e1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008e20:	4a14      	ldr	r2, [pc, #80]	; (8008e74 <_sbrk+0x5c>)
 8008e22:	4b15      	ldr	r3, [pc, #84]	; (8008e78 <_sbrk+0x60>)
 8008e24:	1ad3      	subs	r3, r2, r3
 8008e26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008e2c:	4b13      	ldr	r3, [pc, #76]	; (8008e7c <_sbrk+0x64>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d102      	bne.n	8008e3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008e34:	4b11      	ldr	r3, [pc, #68]	; (8008e7c <_sbrk+0x64>)
 8008e36:	4a12      	ldr	r2, [pc, #72]	; (8008e80 <_sbrk+0x68>)
 8008e38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008e3a:	4b10      	ldr	r3, [pc, #64]	; (8008e7c <_sbrk+0x64>)
 8008e3c:	681a      	ldr	r2, [r3, #0]
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	4413      	add	r3, r2
 8008e42:	693a      	ldr	r2, [r7, #16]
 8008e44:	429a      	cmp	r2, r3
 8008e46:	d207      	bcs.n	8008e58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008e48:	f003 ffe6 	bl	800ce18 <__errno>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	220c      	movs	r2, #12
 8008e50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008e52:	f04f 33ff 	mov.w	r3, #4294967295
 8008e56:	e009      	b.n	8008e6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008e58:	4b08      	ldr	r3, [pc, #32]	; (8008e7c <_sbrk+0x64>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008e5e:	4b07      	ldr	r3, [pc, #28]	; (8008e7c <_sbrk+0x64>)
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	4413      	add	r3, r2
 8008e66:	4a05      	ldr	r2, [pc, #20]	; (8008e7c <_sbrk+0x64>)
 8008e68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008e6a:	68fb      	ldr	r3, [r7, #12]
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	3718      	adds	r7, #24
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}
 8008e74:	2000c000 	.word	0x2000c000
 8008e78:	00000400 	.word	0x00000400
 8008e7c:	20000ecc 	.word	0x20000ecc
 8008e80:	20001020 	.word	0x20001020

08008e84 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008e84:	b480      	push	{r7}
 8008e86:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008e88:	bf00      	nop
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bc80      	pop	{r7}
 8008e8e:	4770      	bx	lr

08008e90 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008e90:	480c      	ldr	r0, [pc, #48]	; (8008ec4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008e92:	490d      	ldr	r1, [pc, #52]	; (8008ec8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008e94:	4a0d      	ldr	r2, [pc, #52]	; (8008ecc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008e96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008e98:	e002      	b.n	8008ea0 <LoopCopyDataInit>

08008e9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008e9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008e9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008e9e:	3304      	adds	r3, #4

08008ea0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008ea0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008ea2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008ea4:	d3f9      	bcc.n	8008e9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008ea6:	4a0a      	ldr	r2, [pc, #40]	; (8008ed0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008ea8:	4c0a      	ldr	r4, [pc, #40]	; (8008ed4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8008eaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008eac:	e001      	b.n	8008eb2 <LoopFillZerobss>

08008eae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008eae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008eb0:	3204      	adds	r2, #4

08008eb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008eb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008eb4:	d3fb      	bcc.n	8008eae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008eb6:	f7ff ffe5 	bl	8008e84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008eba:	f003 ffb3 	bl	800ce24 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008ebe:	f7ff fb8f 	bl	80085e0 <main>
  bx lr
 8008ec2:	4770      	bx	lr
  ldr r0, =_sdata
 8008ec4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008ec8:	20000a10 	.word	0x20000a10
  ldr r2, =_sidata
 8008ecc:	0800e518 	.word	0x0800e518
  ldr r2, =_sbss
 8008ed0:	20000a10 	.word	0x20000a10
  ldr r4, =_ebss
 8008ed4:	2000101c 	.word	0x2000101c

08008ed8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008ed8:	e7fe      	b.n	8008ed8 <ADC1_2_IRQHandler>
	...

08008edc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008ee0:	4b08      	ldr	r3, [pc, #32]	; (8008f04 <HAL_Init+0x28>)
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	4a07      	ldr	r2, [pc, #28]	; (8008f04 <HAL_Init+0x28>)
 8008ee6:	f043 0310 	orr.w	r3, r3, #16
 8008eea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008eec:	2003      	movs	r0, #3
 8008eee:	f000 fa43 	bl	8009378 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008ef2:	200f      	movs	r0, #15
 8008ef4:	f000 f808 	bl	8008f08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008ef8:	f7ff fdfa 	bl	8008af0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008efc:	2300      	movs	r3, #0
}
 8008efe:	4618      	mov	r0, r3
 8008f00:	bd80      	pop	{r7, pc}
 8008f02:	bf00      	nop
 8008f04:	40022000 	.word	0x40022000

08008f08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b082      	sub	sp, #8
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008f10:	4b12      	ldr	r3, [pc, #72]	; (8008f5c <HAL_InitTick+0x54>)
 8008f12:	681a      	ldr	r2, [r3, #0]
 8008f14:	4b12      	ldr	r3, [pc, #72]	; (8008f60 <HAL_InitTick+0x58>)
 8008f16:	781b      	ldrb	r3, [r3, #0]
 8008f18:	4619      	mov	r1, r3
 8008f1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008f1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008f22:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f26:	4618      	mov	r0, r3
 8008f28:	f000 fa5b 	bl	80093e2 <HAL_SYSTICK_Config>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d001      	beq.n	8008f36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008f32:	2301      	movs	r3, #1
 8008f34:	e00e      	b.n	8008f54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	2b0f      	cmp	r3, #15
 8008f3a:	d80a      	bhi.n	8008f52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	6879      	ldr	r1, [r7, #4]
 8008f40:	f04f 30ff 	mov.w	r0, #4294967295
 8008f44:	f000 fa23 	bl	800938e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008f48:	4a06      	ldr	r2, [pc, #24]	; (8008f64 <HAL_InitTick+0x5c>)
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008f4e:	2300      	movs	r3, #0
 8008f50:	e000      	b.n	8008f54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008f52:	2301      	movs	r3, #1
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3708      	adds	r7, #8
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}
 8008f5c:	200009b4 	.word	0x200009b4
 8008f60:	200009bc 	.word	0x200009bc
 8008f64:	200009b8 	.word	0x200009b8

08008f68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008f68:	b480      	push	{r7}
 8008f6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008f6c:	4b05      	ldr	r3, [pc, #20]	; (8008f84 <HAL_IncTick+0x1c>)
 8008f6e:	781b      	ldrb	r3, [r3, #0]
 8008f70:	461a      	mov	r2, r3
 8008f72:	4b05      	ldr	r3, [pc, #20]	; (8008f88 <HAL_IncTick+0x20>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4413      	add	r3, r2
 8008f78:	4a03      	ldr	r2, [pc, #12]	; (8008f88 <HAL_IncTick+0x20>)
 8008f7a:	6013      	str	r3, [r2, #0]
}
 8008f7c:	bf00      	nop
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	bc80      	pop	{r7}
 8008f82:	4770      	bx	lr
 8008f84:	200009bc 	.word	0x200009bc
 8008f88:	20000ed0 	.word	0x20000ed0

08008f8c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	af00      	add	r7, sp, #0
  return uwTick;
 8008f90:	4b02      	ldr	r3, [pc, #8]	; (8008f9c <HAL_GetTick+0x10>)
 8008f92:	681b      	ldr	r3, [r3, #0]
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	46bd      	mov	sp, r7
 8008f98:	bc80      	pop	{r7}
 8008f9a:	4770      	bx	lr
 8008f9c:	20000ed0 	.word	0x20000ed0

08008fa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b084      	sub	sp, #16
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008fa8:	f7ff fff0 	bl	8008f8c <HAL_GetTick>
 8008fac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fb8:	d005      	beq.n	8008fc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008fba:	4b0a      	ldr	r3, [pc, #40]	; (8008fe4 <HAL_Delay+0x44>)
 8008fbc:	781b      	ldrb	r3, [r3, #0]
 8008fbe:	461a      	mov	r2, r3
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	4413      	add	r3, r2
 8008fc4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008fc6:	bf00      	nop
 8008fc8:	f7ff ffe0 	bl	8008f8c <HAL_GetTick>
 8008fcc:	4602      	mov	r2, r0
 8008fce:	68bb      	ldr	r3, [r7, #8]
 8008fd0:	1ad3      	subs	r3, r2, r3
 8008fd2:	68fa      	ldr	r2, [r7, #12]
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	d8f7      	bhi.n	8008fc8 <HAL_Delay+0x28>
  {
  }
}
 8008fd8:	bf00      	nop
 8008fda:	bf00      	nop
 8008fdc:	3710      	adds	r7, #16
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}
 8008fe2:	bf00      	nop
 8008fe4:	200009bc 	.word	0x200009bc

08008fe8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	b084      	sub	sp, #16
 8008fec:	af00      	add	r7, sp, #0
 8008fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d101      	bne.n	8008ffa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8008ff6:	2301      	movs	r3, #1
 8008ff8:	e0ed      	b.n	80091d6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009000:	b2db      	uxtb	r3, r3
 8009002:	2b00      	cmp	r3, #0
 8009004:	d102      	bne.n	800900c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8009006:	6878      	ldr	r0, [r7, #4]
 8009008:	f7ff fda4 	bl	8008b54 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	681a      	ldr	r2, [r3, #0]
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f042 0201 	orr.w	r2, r2, #1
 800901a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800901c:	f7ff ffb6 	bl	8008f8c <HAL_GetTick>
 8009020:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009022:	e012      	b.n	800904a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009024:	f7ff ffb2 	bl	8008f8c <HAL_GetTick>
 8009028:	4602      	mov	r2, r0
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	1ad3      	subs	r3, r2, r3
 800902e:	2b0a      	cmp	r3, #10
 8009030:	d90b      	bls.n	800904a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009036:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2205      	movs	r2, #5
 8009042:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009046:	2301      	movs	r3, #1
 8009048:	e0c5      	b.n	80091d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	f003 0301 	and.w	r3, r3, #1
 8009054:	2b00      	cmp	r3, #0
 8009056:	d0e5      	beq.n	8009024 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	681a      	ldr	r2, [r3, #0]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f022 0202 	bic.w	r2, r2, #2
 8009066:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009068:	f7ff ff90 	bl	8008f8c <HAL_GetTick>
 800906c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800906e:	e012      	b.n	8009096 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009070:	f7ff ff8c 	bl	8008f8c <HAL_GetTick>
 8009074:	4602      	mov	r2, r0
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	1ad3      	subs	r3, r2, r3
 800907a:	2b0a      	cmp	r3, #10
 800907c:	d90b      	bls.n	8009096 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009082:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2205      	movs	r2, #5
 800908e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009092:	2301      	movs	r3, #1
 8009094:	e09f      	b.n	80091d6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	685b      	ldr	r3, [r3, #4]
 800909c:	f003 0302 	and.w	r3, r3, #2
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d1e5      	bne.n	8009070 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	7e1b      	ldrb	r3, [r3, #24]
 80090a8:	2b01      	cmp	r3, #1
 80090aa:	d108      	bne.n	80090be <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	681a      	ldr	r2, [r3, #0]
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80090ba:	601a      	str	r2, [r3, #0]
 80090bc:	e007      	b.n	80090ce <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	681a      	ldr	r2, [r3, #0]
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80090cc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	7e5b      	ldrb	r3, [r3, #25]
 80090d2:	2b01      	cmp	r3, #1
 80090d4:	d108      	bne.n	80090e8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	681a      	ldr	r2, [r3, #0]
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80090e4:	601a      	str	r2, [r3, #0]
 80090e6:	e007      	b.n	80090f8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681b      	ldr	r3, [r3, #0]
 80090ec:	681a      	ldr	r2, [r3, #0]
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80090f6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	7e9b      	ldrb	r3, [r3, #26]
 80090fc:	2b01      	cmp	r3, #1
 80090fe:	d108      	bne.n	8009112 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	681a      	ldr	r2, [r3, #0]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f042 0220 	orr.w	r2, r2, #32
 800910e:	601a      	str	r2, [r3, #0]
 8009110:	e007      	b.n	8009122 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	681a      	ldr	r2, [r3, #0]
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	681b      	ldr	r3, [r3, #0]
 800911c:	f022 0220 	bic.w	r2, r2, #32
 8009120:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	7edb      	ldrb	r3, [r3, #27]
 8009126:	2b01      	cmp	r3, #1
 8009128:	d108      	bne.n	800913c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	681b      	ldr	r3, [r3, #0]
 800912e:	681a      	ldr	r2, [r3, #0]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f022 0210 	bic.w	r2, r2, #16
 8009138:	601a      	str	r2, [r3, #0]
 800913a:	e007      	b.n	800914c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	681a      	ldr	r2, [r3, #0]
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	f042 0210 	orr.w	r2, r2, #16
 800914a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	7f1b      	ldrb	r3, [r3, #28]
 8009150:	2b01      	cmp	r3, #1
 8009152:	d108      	bne.n	8009166 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	681a      	ldr	r2, [r3, #0]
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	f042 0208 	orr.w	r2, r2, #8
 8009162:	601a      	str	r2, [r3, #0]
 8009164:	e007      	b.n	8009176 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	681a      	ldr	r2, [r3, #0]
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f022 0208 	bic.w	r2, r2, #8
 8009174:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	7f5b      	ldrb	r3, [r3, #29]
 800917a:	2b01      	cmp	r3, #1
 800917c:	d108      	bne.n	8009190 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	681a      	ldr	r2, [r3, #0]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f042 0204 	orr.w	r2, r2, #4
 800918c:	601a      	str	r2, [r3, #0]
 800918e:	e007      	b.n	80091a0 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	681a      	ldr	r2, [r3, #0]
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f022 0204 	bic.w	r2, r2, #4
 800919e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	689a      	ldr	r2, [r3, #8]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	68db      	ldr	r3, [r3, #12]
 80091a8:	431a      	orrs	r2, r3
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	691b      	ldr	r3, [r3, #16]
 80091ae:	431a      	orrs	r2, r3
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	695b      	ldr	r3, [r3, #20]
 80091b4:	ea42 0103 	orr.w	r1, r2, r3
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	685b      	ldr	r3, [r3, #4]
 80091bc:	1e5a      	subs	r2, r3, #1
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	430a      	orrs	r2, r1
 80091c4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2200      	movs	r2, #0
 80091ca:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	2201      	movs	r2, #1
 80091d0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80091d4:	2300      	movs	r3, #0
}
 80091d6:	4618      	mov	r0, r3
 80091d8:	3710      	adds	r7, #16
 80091da:	46bd      	mov	sp, r7
 80091dc:	bd80      	pop	{r7, pc}
	...

080091e0 <__NVIC_SetPriorityGrouping>:
{
 80091e0:	b480      	push	{r7}
 80091e2:	b085      	sub	sp, #20
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	f003 0307 	and.w	r3, r3, #7
 80091ee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80091f0:	4b0c      	ldr	r3, [pc, #48]	; (8009224 <__NVIC_SetPriorityGrouping+0x44>)
 80091f2:	68db      	ldr	r3, [r3, #12]
 80091f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80091f6:	68ba      	ldr	r2, [r7, #8]
 80091f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80091fc:	4013      	ands	r3, r2
 80091fe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009204:	68bb      	ldr	r3, [r7, #8]
 8009206:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009208:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800920c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009212:	4a04      	ldr	r2, [pc, #16]	; (8009224 <__NVIC_SetPriorityGrouping+0x44>)
 8009214:	68bb      	ldr	r3, [r7, #8]
 8009216:	60d3      	str	r3, [r2, #12]
}
 8009218:	bf00      	nop
 800921a:	3714      	adds	r7, #20
 800921c:	46bd      	mov	sp, r7
 800921e:	bc80      	pop	{r7}
 8009220:	4770      	bx	lr
 8009222:	bf00      	nop
 8009224:	e000ed00 	.word	0xe000ed00

08009228 <__NVIC_GetPriorityGrouping>:
{
 8009228:	b480      	push	{r7}
 800922a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800922c:	4b04      	ldr	r3, [pc, #16]	; (8009240 <__NVIC_GetPriorityGrouping+0x18>)
 800922e:	68db      	ldr	r3, [r3, #12]
 8009230:	0a1b      	lsrs	r3, r3, #8
 8009232:	f003 0307 	and.w	r3, r3, #7
}
 8009236:	4618      	mov	r0, r3
 8009238:	46bd      	mov	sp, r7
 800923a:	bc80      	pop	{r7}
 800923c:	4770      	bx	lr
 800923e:	bf00      	nop
 8009240:	e000ed00 	.word	0xe000ed00

08009244 <__NVIC_EnableIRQ>:
{
 8009244:	b480      	push	{r7}
 8009246:	b083      	sub	sp, #12
 8009248:	af00      	add	r7, sp, #0
 800924a:	4603      	mov	r3, r0
 800924c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800924e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009252:	2b00      	cmp	r3, #0
 8009254:	db0b      	blt.n	800926e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009256:	79fb      	ldrb	r3, [r7, #7]
 8009258:	f003 021f 	and.w	r2, r3, #31
 800925c:	4906      	ldr	r1, [pc, #24]	; (8009278 <__NVIC_EnableIRQ+0x34>)
 800925e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009262:	095b      	lsrs	r3, r3, #5
 8009264:	2001      	movs	r0, #1
 8009266:	fa00 f202 	lsl.w	r2, r0, r2
 800926a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800926e:	bf00      	nop
 8009270:	370c      	adds	r7, #12
 8009272:	46bd      	mov	sp, r7
 8009274:	bc80      	pop	{r7}
 8009276:	4770      	bx	lr
 8009278:	e000e100 	.word	0xe000e100

0800927c <__NVIC_SetPriority>:
{
 800927c:	b480      	push	{r7}
 800927e:	b083      	sub	sp, #12
 8009280:	af00      	add	r7, sp, #0
 8009282:	4603      	mov	r3, r0
 8009284:	6039      	str	r1, [r7, #0]
 8009286:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800928c:	2b00      	cmp	r3, #0
 800928e:	db0a      	blt.n	80092a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	b2da      	uxtb	r2, r3
 8009294:	490c      	ldr	r1, [pc, #48]	; (80092c8 <__NVIC_SetPriority+0x4c>)
 8009296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800929a:	0112      	lsls	r2, r2, #4
 800929c:	b2d2      	uxtb	r2, r2
 800929e:	440b      	add	r3, r1
 80092a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80092a4:	e00a      	b.n	80092bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80092a6:	683b      	ldr	r3, [r7, #0]
 80092a8:	b2da      	uxtb	r2, r3
 80092aa:	4908      	ldr	r1, [pc, #32]	; (80092cc <__NVIC_SetPriority+0x50>)
 80092ac:	79fb      	ldrb	r3, [r7, #7]
 80092ae:	f003 030f 	and.w	r3, r3, #15
 80092b2:	3b04      	subs	r3, #4
 80092b4:	0112      	lsls	r2, r2, #4
 80092b6:	b2d2      	uxtb	r2, r2
 80092b8:	440b      	add	r3, r1
 80092ba:	761a      	strb	r2, [r3, #24]
}
 80092bc:	bf00      	nop
 80092be:	370c      	adds	r7, #12
 80092c0:	46bd      	mov	sp, r7
 80092c2:	bc80      	pop	{r7}
 80092c4:	4770      	bx	lr
 80092c6:	bf00      	nop
 80092c8:	e000e100 	.word	0xe000e100
 80092cc:	e000ed00 	.word	0xe000ed00

080092d0 <NVIC_EncodePriority>:
{
 80092d0:	b480      	push	{r7}
 80092d2:	b089      	sub	sp, #36	; 0x24
 80092d4:	af00      	add	r7, sp, #0
 80092d6:	60f8      	str	r0, [r7, #12]
 80092d8:	60b9      	str	r1, [r7, #8]
 80092da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	f003 0307 	and.w	r3, r3, #7
 80092e2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80092e4:	69fb      	ldr	r3, [r7, #28]
 80092e6:	f1c3 0307 	rsb	r3, r3, #7
 80092ea:	2b04      	cmp	r3, #4
 80092ec:	bf28      	it	cs
 80092ee:	2304      	movcs	r3, #4
 80092f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80092f2:	69fb      	ldr	r3, [r7, #28]
 80092f4:	3304      	adds	r3, #4
 80092f6:	2b06      	cmp	r3, #6
 80092f8:	d902      	bls.n	8009300 <NVIC_EncodePriority+0x30>
 80092fa:	69fb      	ldr	r3, [r7, #28]
 80092fc:	3b03      	subs	r3, #3
 80092fe:	e000      	b.n	8009302 <NVIC_EncodePriority+0x32>
 8009300:	2300      	movs	r3, #0
 8009302:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009304:	f04f 32ff 	mov.w	r2, #4294967295
 8009308:	69bb      	ldr	r3, [r7, #24]
 800930a:	fa02 f303 	lsl.w	r3, r2, r3
 800930e:	43da      	mvns	r2, r3
 8009310:	68bb      	ldr	r3, [r7, #8]
 8009312:	401a      	ands	r2, r3
 8009314:	697b      	ldr	r3, [r7, #20]
 8009316:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009318:	f04f 31ff 	mov.w	r1, #4294967295
 800931c:	697b      	ldr	r3, [r7, #20]
 800931e:	fa01 f303 	lsl.w	r3, r1, r3
 8009322:	43d9      	mvns	r1, r3
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009328:	4313      	orrs	r3, r2
}
 800932a:	4618      	mov	r0, r3
 800932c:	3724      	adds	r7, #36	; 0x24
 800932e:	46bd      	mov	sp, r7
 8009330:	bc80      	pop	{r7}
 8009332:	4770      	bx	lr

08009334 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b082      	sub	sp, #8
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	3b01      	subs	r3, #1
 8009340:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009344:	d301      	bcc.n	800934a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009346:	2301      	movs	r3, #1
 8009348:	e00f      	b.n	800936a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800934a:	4a0a      	ldr	r2, [pc, #40]	; (8009374 <SysTick_Config+0x40>)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	3b01      	subs	r3, #1
 8009350:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009352:	210f      	movs	r1, #15
 8009354:	f04f 30ff 	mov.w	r0, #4294967295
 8009358:	f7ff ff90 	bl	800927c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800935c:	4b05      	ldr	r3, [pc, #20]	; (8009374 <SysTick_Config+0x40>)
 800935e:	2200      	movs	r2, #0
 8009360:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009362:	4b04      	ldr	r3, [pc, #16]	; (8009374 <SysTick_Config+0x40>)
 8009364:	2207      	movs	r2, #7
 8009366:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009368:	2300      	movs	r3, #0
}
 800936a:	4618      	mov	r0, r3
 800936c:	3708      	adds	r7, #8
 800936e:	46bd      	mov	sp, r7
 8009370:	bd80      	pop	{r7, pc}
 8009372:	bf00      	nop
 8009374:	e000e010 	.word	0xe000e010

08009378 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b082      	sub	sp, #8
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009380:	6878      	ldr	r0, [r7, #4]
 8009382:	f7ff ff2d 	bl	80091e0 <__NVIC_SetPriorityGrouping>
}
 8009386:	bf00      	nop
 8009388:	3708      	adds	r7, #8
 800938a:	46bd      	mov	sp, r7
 800938c:	bd80      	pop	{r7, pc}

0800938e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800938e:	b580      	push	{r7, lr}
 8009390:	b086      	sub	sp, #24
 8009392:	af00      	add	r7, sp, #0
 8009394:	4603      	mov	r3, r0
 8009396:	60b9      	str	r1, [r7, #8]
 8009398:	607a      	str	r2, [r7, #4]
 800939a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800939c:	2300      	movs	r3, #0
 800939e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80093a0:	f7ff ff42 	bl	8009228 <__NVIC_GetPriorityGrouping>
 80093a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80093a6:	687a      	ldr	r2, [r7, #4]
 80093a8:	68b9      	ldr	r1, [r7, #8]
 80093aa:	6978      	ldr	r0, [r7, #20]
 80093ac:	f7ff ff90 	bl	80092d0 <NVIC_EncodePriority>
 80093b0:	4602      	mov	r2, r0
 80093b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093b6:	4611      	mov	r1, r2
 80093b8:	4618      	mov	r0, r3
 80093ba:	f7ff ff5f 	bl	800927c <__NVIC_SetPriority>
}
 80093be:	bf00      	nop
 80093c0:	3718      	adds	r7, #24
 80093c2:	46bd      	mov	sp, r7
 80093c4:	bd80      	pop	{r7, pc}

080093c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80093c6:	b580      	push	{r7, lr}
 80093c8:	b082      	sub	sp, #8
 80093ca:	af00      	add	r7, sp, #0
 80093cc:	4603      	mov	r3, r0
 80093ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80093d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093d4:	4618      	mov	r0, r3
 80093d6:	f7ff ff35 	bl	8009244 <__NVIC_EnableIRQ>
}
 80093da:	bf00      	nop
 80093dc:	3708      	adds	r7, #8
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}

080093e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80093e2:	b580      	push	{r7, lr}
 80093e4:	b082      	sub	sp, #8
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	f7ff ffa2 	bl	8009334 <SysTick_Config>
 80093f0:	4603      	mov	r3, r0
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3708      	adds	r7, #8
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}

080093fa <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80093fa:	b480      	push	{r7}
 80093fc:	b085      	sub	sp, #20
 80093fe:	af00      	add	r7, sp, #0
 8009400:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009402:	2300      	movs	r3, #0
 8009404:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800940c:	b2db      	uxtb	r3, r3
 800940e:	2b02      	cmp	r3, #2
 8009410:	d008      	beq.n	8009424 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2204      	movs	r2, #4
 8009416:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2200      	movs	r2, #0
 800941c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8009420:	2301      	movs	r3, #1
 8009422:	e020      	b.n	8009466 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	681a      	ldr	r2, [r3, #0]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f022 020e 	bic.w	r2, r2, #14
 8009432:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	681a      	ldr	r2, [r3, #0]
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f022 0201 	bic.w	r2, r2, #1
 8009442:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800944c:	2101      	movs	r1, #1
 800944e:	fa01 f202 	lsl.w	r2, r1, r2
 8009452:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	2201      	movs	r2, #1
 8009458:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2200      	movs	r2, #0
 8009460:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8009464:	7bfb      	ldrb	r3, [r7, #15]
}
 8009466:	4618      	mov	r0, r3
 8009468:	3714      	adds	r7, #20
 800946a:	46bd      	mov	sp, r7
 800946c:	bc80      	pop	{r7}
 800946e:	4770      	bx	lr

08009470 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8009470:	b580      	push	{r7, lr}
 8009472:	b084      	sub	sp, #16
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009478:	2300      	movs	r3, #0
 800947a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009482:	b2db      	uxtb	r3, r3
 8009484:	2b02      	cmp	r3, #2
 8009486:	d005      	beq.n	8009494 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	2204      	movs	r2, #4
 800948c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800948e:	2301      	movs	r3, #1
 8009490:	73fb      	strb	r3, [r7, #15]
 8009492:	e0d6      	b.n	8009642 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	681a      	ldr	r2, [r3, #0]
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	f022 020e 	bic.w	r2, r2, #14
 80094a2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	681a      	ldr	r2, [r3, #0]
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f022 0201 	bic.w	r2, r2, #1
 80094b2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	461a      	mov	r2, r3
 80094ba:	4b64      	ldr	r3, [pc, #400]	; (800964c <HAL_DMA_Abort_IT+0x1dc>)
 80094bc:	429a      	cmp	r2, r3
 80094be:	d958      	bls.n	8009572 <HAL_DMA_Abort_IT+0x102>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	4a62      	ldr	r2, [pc, #392]	; (8009650 <HAL_DMA_Abort_IT+0x1e0>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d04f      	beq.n	800956a <HAL_DMA_Abort_IT+0xfa>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	4a61      	ldr	r2, [pc, #388]	; (8009654 <HAL_DMA_Abort_IT+0x1e4>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d048      	beq.n	8009566 <HAL_DMA_Abort_IT+0xf6>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	4a5f      	ldr	r2, [pc, #380]	; (8009658 <HAL_DMA_Abort_IT+0x1e8>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d040      	beq.n	8009560 <HAL_DMA_Abort_IT+0xf0>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	4a5e      	ldr	r2, [pc, #376]	; (800965c <HAL_DMA_Abort_IT+0x1ec>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d038      	beq.n	800955a <HAL_DMA_Abort_IT+0xea>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4a5c      	ldr	r2, [pc, #368]	; (8009660 <HAL_DMA_Abort_IT+0x1f0>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d030      	beq.n	8009554 <HAL_DMA_Abort_IT+0xe4>
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	4a5b      	ldr	r2, [pc, #364]	; (8009664 <HAL_DMA_Abort_IT+0x1f4>)
 80094f8:	4293      	cmp	r3, r2
 80094fa:	d028      	beq.n	800954e <HAL_DMA_Abort_IT+0xde>
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	4a52      	ldr	r2, [pc, #328]	; (800964c <HAL_DMA_Abort_IT+0x1dc>)
 8009502:	4293      	cmp	r3, r2
 8009504:	d020      	beq.n	8009548 <HAL_DMA_Abort_IT+0xd8>
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	4a57      	ldr	r2, [pc, #348]	; (8009668 <HAL_DMA_Abort_IT+0x1f8>)
 800950c:	4293      	cmp	r3, r2
 800950e:	d019      	beq.n	8009544 <HAL_DMA_Abort_IT+0xd4>
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	4a55      	ldr	r2, [pc, #340]	; (800966c <HAL_DMA_Abort_IT+0x1fc>)
 8009516:	4293      	cmp	r3, r2
 8009518:	d012      	beq.n	8009540 <HAL_DMA_Abort_IT+0xd0>
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	4a54      	ldr	r2, [pc, #336]	; (8009670 <HAL_DMA_Abort_IT+0x200>)
 8009520:	4293      	cmp	r3, r2
 8009522:	d00a      	beq.n	800953a <HAL_DMA_Abort_IT+0xca>
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	4a52      	ldr	r2, [pc, #328]	; (8009674 <HAL_DMA_Abort_IT+0x204>)
 800952a:	4293      	cmp	r3, r2
 800952c:	d102      	bne.n	8009534 <HAL_DMA_Abort_IT+0xc4>
 800952e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009532:	e01b      	b.n	800956c <HAL_DMA_Abort_IT+0xfc>
 8009534:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009538:	e018      	b.n	800956c <HAL_DMA_Abort_IT+0xfc>
 800953a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800953e:	e015      	b.n	800956c <HAL_DMA_Abort_IT+0xfc>
 8009540:	2310      	movs	r3, #16
 8009542:	e013      	b.n	800956c <HAL_DMA_Abort_IT+0xfc>
 8009544:	2301      	movs	r3, #1
 8009546:	e011      	b.n	800956c <HAL_DMA_Abort_IT+0xfc>
 8009548:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800954c:	e00e      	b.n	800956c <HAL_DMA_Abort_IT+0xfc>
 800954e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009552:	e00b      	b.n	800956c <HAL_DMA_Abort_IT+0xfc>
 8009554:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009558:	e008      	b.n	800956c <HAL_DMA_Abort_IT+0xfc>
 800955a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800955e:	e005      	b.n	800956c <HAL_DMA_Abort_IT+0xfc>
 8009560:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009564:	e002      	b.n	800956c <HAL_DMA_Abort_IT+0xfc>
 8009566:	2310      	movs	r3, #16
 8009568:	e000      	b.n	800956c <HAL_DMA_Abort_IT+0xfc>
 800956a:	2301      	movs	r3, #1
 800956c:	4a42      	ldr	r2, [pc, #264]	; (8009678 <HAL_DMA_Abort_IT+0x208>)
 800956e:	6053      	str	r3, [r2, #4]
 8009570:	e057      	b.n	8009622 <HAL_DMA_Abort_IT+0x1b2>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	4a36      	ldr	r2, [pc, #216]	; (8009650 <HAL_DMA_Abort_IT+0x1e0>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d04f      	beq.n	800961c <HAL_DMA_Abort_IT+0x1ac>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4a34      	ldr	r2, [pc, #208]	; (8009654 <HAL_DMA_Abort_IT+0x1e4>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d048      	beq.n	8009618 <HAL_DMA_Abort_IT+0x1a8>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4a33      	ldr	r2, [pc, #204]	; (8009658 <HAL_DMA_Abort_IT+0x1e8>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d040      	beq.n	8009612 <HAL_DMA_Abort_IT+0x1a2>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	4a31      	ldr	r2, [pc, #196]	; (800965c <HAL_DMA_Abort_IT+0x1ec>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d038      	beq.n	800960c <HAL_DMA_Abort_IT+0x19c>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	4a30      	ldr	r2, [pc, #192]	; (8009660 <HAL_DMA_Abort_IT+0x1f0>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d030      	beq.n	8009606 <HAL_DMA_Abort_IT+0x196>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4a2e      	ldr	r2, [pc, #184]	; (8009664 <HAL_DMA_Abort_IT+0x1f4>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d028      	beq.n	8009600 <HAL_DMA_Abort_IT+0x190>
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	4a26      	ldr	r2, [pc, #152]	; (800964c <HAL_DMA_Abort_IT+0x1dc>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d020      	beq.n	80095fa <HAL_DMA_Abort_IT+0x18a>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4a2a      	ldr	r2, [pc, #168]	; (8009668 <HAL_DMA_Abort_IT+0x1f8>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d019      	beq.n	80095f6 <HAL_DMA_Abort_IT+0x186>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	4a29      	ldr	r2, [pc, #164]	; (800966c <HAL_DMA_Abort_IT+0x1fc>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d012      	beq.n	80095f2 <HAL_DMA_Abort_IT+0x182>
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	4a27      	ldr	r2, [pc, #156]	; (8009670 <HAL_DMA_Abort_IT+0x200>)
 80095d2:	4293      	cmp	r3, r2
 80095d4:	d00a      	beq.n	80095ec <HAL_DMA_Abort_IT+0x17c>
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	4a26      	ldr	r2, [pc, #152]	; (8009674 <HAL_DMA_Abort_IT+0x204>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d102      	bne.n	80095e6 <HAL_DMA_Abort_IT+0x176>
 80095e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80095e4:	e01b      	b.n	800961e <HAL_DMA_Abort_IT+0x1ae>
 80095e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80095ea:	e018      	b.n	800961e <HAL_DMA_Abort_IT+0x1ae>
 80095ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80095f0:	e015      	b.n	800961e <HAL_DMA_Abort_IT+0x1ae>
 80095f2:	2310      	movs	r3, #16
 80095f4:	e013      	b.n	800961e <HAL_DMA_Abort_IT+0x1ae>
 80095f6:	2301      	movs	r3, #1
 80095f8:	e011      	b.n	800961e <HAL_DMA_Abort_IT+0x1ae>
 80095fa:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80095fe:	e00e      	b.n	800961e <HAL_DMA_Abort_IT+0x1ae>
 8009600:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009604:	e00b      	b.n	800961e <HAL_DMA_Abort_IT+0x1ae>
 8009606:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800960a:	e008      	b.n	800961e <HAL_DMA_Abort_IT+0x1ae>
 800960c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009610:	e005      	b.n	800961e <HAL_DMA_Abort_IT+0x1ae>
 8009612:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009616:	e002      	b.n	800961e <HAL_DMA_Abort_IT+0x1ae>
 8009618:	2310      	movs	r3, #16
 800961a:	e000      	b.n	800961e <HAL_DMA_Abort_IT+0x1ae>
 800961c:	2301      	movs	r3, #1
 800961e:	4a17      	ldr	r2, [pc, #92]	; (800967c <HAL_DMA_Abort_IT+0x20c>)
 8009620:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	2201      	movs	r2, #1
 8009626:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2200      	movs	r2, #0
 800962e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009636:	2b00      	cmp	r3, #0
 8009638:	d003      	beq.n	8009642 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800963e:	6878      	ldr	r0, [r7, #4]
 8009640:	4798      	blx	r3
    } 
  }
  return status;
 8009642:	7bfb      	ldrb	r3, [r7, #15]
}
 8009644:	4618      	mov	r0, r3
 8009646:	3710      	adds	r7, #16
 8009648:	46bd      	mov	sp, r7
 800964a:	bd80      	pop	{r7, pc}
 800964c:	40020080 	.word	0x40020080
 8009650:	40020008 	.word	0x40020008
 8009654:	4002001c 	.word	0x4002001c
 8009658:	40020030 	.word	0x40020030
 800965c:	40020044 	.word	0x40020044
 8009660:	40020058 	.word	0x40020058
 8009664:	4002006c 	.word	0x4002006c
 8009668:	40020408 	.word	0x40020408
 800966c:	4002041c 	.word	0x4002041c
 8009670:	40020430 	.word	0x40020430
 8009674:	40020444 	.word	0x40020444
 8009678:	40020400 	.word	0x40020400
 800967c:	40020000 	.word	0x40020000

08009680 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009680:	b480      	push	{r7}
 8009682:	b08b      	sub	sp, #44	; 0x2c
 8009684:	af00      	add	r7, sp, #0
 8009686:	6078      	str	r0, [r7, #4]
 8009688:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800968a:	2300      	movs	r3, #0
 800968c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800968e:	2300      	movs	r3, #0
 8009690:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009692:	e179      	b.n	8009988 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8009694:	2201      	movs	r2, #1
 8009696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009698:	fa02 f303 	lsl.w	r3, r2, r3
 800969c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	69fa      	ldr	r2, [r7, #28]
 80096a4:	4013      	ands	r3, r2
 80096a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80096a8:	69ba      	ldr	r2, [r7, #24]
 80096aa:	69fb      	ldr	r3, [r7, #28]
 80096ac:	429a      	cmp	r2, r3
 80096ae:	f040 8168 	bne.w	8009982 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	685b      	ldr	r3, [r3, #4]
 80096b6:	4a96      	ldr	r2, [pc, #600]	; (8009910 <HAL_GPIO_Init+0x290>)
 80096b8:	4293      	cmp	r3, r2
 80096ba:	d05e      	beq.n	800977a <HAL_GPIO_Init+0xfa>
 80096bc:	4a94      	ldr	r2, [pc, #592]	; (8009910 <HAL_GPIO_Init+0x290>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d875      	bhi.n	80097ae <HAL_GPIO_Init+0x12e>
 80096c2:	4a94      	ldr	r2, [pc, #592]	; (8009914 <HAL_GPIO_Init+0x294>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d058      	beq.n	800977a <HAL_GPIO_Init+0xfa>
 80096c8:	4a92      	ldr	r2, [pc, #584]	; (8009914 <HAL_GPIO_Init+0x294>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d86f      	bhi.n	80097ae <HAL_GPIO_Init+0x12e>
 80096ce:	4a92      	ldr	r2, [pc, #584]	; (8009918 <HAL_GPIO_Init+0x298>)
 80096d0:	4293      	cmp	r3, r2
 80096d2:	d052      	beq.n	800977a <HAL_GPIO_Init+0xfa>
 80096d4:	4a90      	ldr	r2, [pc, #576]	; (8009918 <HAL_GPIO_Init+0x298>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d869      	bhi.n	80097ae <HAL_GPIO_Init+0x12e>
 80096da:	4a90      	ldr	r2, [pc, #576]	; (800991c <HAL_GPIO_Init+0x29c>)
 80096dc:	4293      	cmp	r3, r2
 80096de:	d04c      	beq.n	800977a <HAL_GPIO_Init+0xfa>
 80096e0:	4a8e      	ldr	r2, [pc, #568]	; (800991c <HAL_GPIO_Init+0x29c>)
 80096e2:	4293      	cmp	r3, r2
 80096e4:	d863      	bhi.n	80097ae <HAL_GPIO_Init+0x12e>
 80096e6:	4a8e      	ldr	r2, [pc, #568]	; (8009920 <HAL_GPIO_Init+0x2a0>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d046      	beq.n	800977a <HAL_GPIO_Init+0xfa>
 80096ec:	4a8c      	ldr	r2, [pc, #560]	; (8009920 <HAL_GPIO_Init+0x2a0>)
 80096ee:	4293      	cmp	r3, r2
 80096f0:	d85d      	bhi.n	80097ae <HAL_GPIO_Init+0x12e>
 80096f2:	2b12      	cmp	r3, #18
 80096f4:	d82a      	bhi.n	800974c <HAL_GPIO_Init+0xcc>
 80096f6:	2b12      	cmp	r3, #18
 80096f8:	d859      	bhi.n	80097ae <HAL_GPIO_Init+0x12e>
 80096fa:	a201      	add	r2, pc, #4	; (adr r2, 8009700 <HAL_GPIO_Init+0x80>)
 80096fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009700:	0800977b 	.word	0x0800977b
 8009704:	08009755 	.word	0x08009755
 8009708:	08009767 	.word	0x08009767
 800970c:	080097a9 	.word	0x080097a9
 8009710:	080097af 	.word	0x080097af
 8009714:	080097af 	.word	0x080097af
 8009718:	080097af 	.word	0x080097af
 800971c:	080097af 	.word	0x080097af
 8009720:	080097af 	.word	0x080097af
 8009724:	080097af 	.word	0x080097af
 8009728:	080097af 	.word	0x080097af
 800972c:	080097af 	.word	0x080097af
 8009730:	080097af 	.word	0x080097af
 8009734:	080097af 	.word	0x080097af
 8009738:	080097af 	.word	0x080097af
 800973c:	080097af 	.word	0x080097af
 8009740:	080097af 	.word	0x080097af
 8009744:	0800975d 	.word	0x0800975d
 8009748:	08009771 	.word	0x08009771
 800974c:	4a75      	ldr	r2, [pc, #468]	; (8009924 <HAL_GPIO_Init+0x2a4>)
 800974e:	4293      	cmp	r3, r2
 8009750:	d013      	beq.n	800977a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8009752:	e02c      	b.n	80097ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8009754:	683b      	ldr	r3, [r7, #0]
 8009756:	68db      	ldr	r3, [r3, #12]
 8009758:	623b      	str	r3, [r7, #32]
          break;
 800975a:	e029      	b.n	80097b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	68db      	ldr	r3, [r3, #12]
 8009760:	3304      	adds	r3, #4
 8009762:	623b      	str	r3, [r7, #32]
          break;
 8009764:	e024      	b.n	80097b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8009766:	683b      	ldr	r3, [r7, #0]
 8009768:	68db      	ldr	r3, [r3, #12]
 800976a:	3308      	adds	r3, #8
 800976c:	623b      	str	r3, [r7, #32]
          break;
 800976e:	e01f      	b.n	80097b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	68db      	ldr	r3, [r3, #12]
 8009774:	330c      	adds	r3, #12
 8009776:	623b      	str	r3, [r7, #32]
          break;
 8009778:	e01a      	b.n	80097b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	689b      	ldr	r3, [r3, #8]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d102      	bne.n	8009788 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8009782:	2304      	movs	r3, #4
 8009784:	623b      	str	r3, [r7, #32]
          break;
 8009786:	e013      	b.n	80097b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	689b      	ldr	r3, [r3, #8]
 800978c:	2b01      	cmp	r3, #1
 800978e:	d105      	bne.n	800979c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009790:	2308      	movs	r3, #8
 8009792:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	69fa      	ldr	r2, [r7, #28]
 8009798:	611a      	str	r2, [r3, #16]
          break;
 800979a:	e009      	b.n	80097b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800979c:	2308      	movs	r3, #8
 800979e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	69fa      	ldr	r2, [r7, #28]
 80097a4:	615a      	str	r2, [r3, #20]
          break;
 80097a6:	e003      	b.n	80097b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80097a8:	2300      	movs	r3, #0
 80097aa:	623b      	str	r3, [r7, #32]
          break;
 80097ac:	e000      	b.n	80097b0 <HAL_GPIO_Init+0x130>
          break;
 80097ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80097b0:	69bb      	ldr	r3, [r7, #24]
 80097b2:	2bff      	cmp	r3, #255	; 0xff
 80097b4:	d801      	bhi.n	80097ba <HAL_GPIO_Init+0x13a>
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	e001      	b.n	80097be <HAL_GPIO_Init+0x13e>
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	3304      	adds	r3, #4
 80097be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80097c0:	69bb      	ldr	r3, [r7, #24]
 80097c2:	2bff      	cmp	r3, #255	; 0xff
 80097c4:	d802      	bhi.n	80097cc <HAL_GPIO_Init+0x14c>
 80097c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c8:	009b      	lsls	r3, r3, #2
 80097ca:	e002      	b.n	80097d2 <HAL_GPIO_Init+0x152>
 80097cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ce:	3b08      	subs	r3, #8
 80097d0:	009b      	lsls	r3, r3, #2
 80097d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80097d4:	697b      	ldr	r3, [r7, #20]
 80097d6:	681a      	ldr	r2, [r3, #0]
 80097d8:	210f      	movs	r1, #15
 80097da:	693b      	ldr	r3, [r7, #16]
 80097dc:	fa01 f303 	lsl.w	r3, r1, r3
 80097e0:	43db      	mvns	r3, r3
 80097e2:	401a      	ands	r2, r3
 80097e4:	6a39      	ldr	r1, [r7, #32]
 80097e6:	693b      	ldr	r3, [r7, #16]
 80097e8:	fa01 f303 	lsl.w	r3, r1, r3
 80097ec:	431a      	orrs	r2, r3
 80097ee:	697b      	ldr	r3, [r7, #20]
 80097f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80097f2:	683b      	ldr	r3, [r7, #0]
 80097f4:	685b      	ldr	r3, [r3, #4]
 80097f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	f000 80c1 	beq.w	8009982 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8009800:	4b49      	ldr	r3, [pc, #292]	; (8009928 <HAL_GPIO_Init+0x2a8>)
 8009802:	699b      	ldr	r3, [r3, #24]
 8009804:	4a48      	ldr	r2, [pc, #288]	; (8009928 <HAL_GPIO_Init+0x2a8>)
 8009806:	f043 0301 	orr.w	r3, r3, #1
 800980a:	6193      	str	r3, [r2, #24]
 800980c:	4b46      	ldr	r3, [pc, #280]	; (8009928 <HAL_GPIO_Init+0x2a8>)
 800980e:	699b      	ldr	r3, [r3, #24]
 8009810:	f003 0301 	and.w	r3, r3, #1
 8009814:	60bb      	str	r3, [r7, #8]
 8009816:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8009818:	4a44      	ldr	r2, [pc, #272]	; (800992c <HAL_GPIO_Init+0x2ac>)
 800981a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800981c:	089b      	lsrs	r3, r3, #2
 800981e:	3302      	adds	r3, #2
 8009820:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009824:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8009826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009828:	f003 0303 	and.w	r3, r3, #3
 800982c:	009b      	lsls	r3, r3, #2
 800982e:	220f      	movs	r2, #15
 8009830:	fa02 f303 	lsl.w	r3, r2, r3
 8009834:	43db      	mvns	r3, r3
 8009836:	68fa      	ldr	r2, [r7, #12]
 8009838:	4013      	ands	r3, r2
 800983a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	4a3c      	ldr	r2, [pc, #240]	; (8009930 <HAL_GPIO_Init+0x2b0>)
 8009840:	4293      	cmp	r3, r2
 8009842:	d01f      	beq.n	8009884 <HAL_GPIO_Init+0x204>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	4a3b      	ldr	r2, [pc, #236]	; (8009934 <HAL_GPIO_Init+0x2b4>)
 8009848:	4293      	cmp	r3, r2
 800984a:	d019      	beq.n	8009880 <HAL_GPIO_Init+0x200>
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	4a3a      	ldr	r2, [pc, #232]	; (8009938 <HAL_GPIO_Init+0x2b8>)
 8009850:	4293      	cmp	r3, r2
 8009852:	d013      	beq.n	800987c <HAL_GPIO_Init+0x1fc>
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	4a39      	ldr	r2, [pc, #228]	; (800993c <HAL_GPIO_Init+0x2bc>)
 8009858:	4293      	cmp	r3, r2
 800985a:	d00d      	beq.n	8009878 <HAL_GPIO_Init+0x1f8>
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	4a38      	ldr	r2, [pc, #224]	; (8009940 <HAL_GPIO_Init+0x2c0>)
 8009860:	4293      	cmp	r3, r2
 8009862:	d007      	beq.n	8009874 <HAL_GPIO_Init+0x1f4>
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	4a37      	ldr	r2, [pc, #220]	; (8009944 <HAL_GPIO_Init+0x2c4>)
 8009868:	4293      	cmp	r3, r2
 800986a:	d101      	bne.n	8009870 <HAL_GPIO_Init+0x1f0>
 800986c:	2305      	movs	r3, #5
 800986e:	e00a      	b.n	8009886 <HAL_GPIO_Init+0x206>
 8009870:	2306      	movs	r3, #6
 8009872:	e008      	b.n	8009886 <HAL_GPIO_Init+0x206>
 8009874:	2304      	movs	r3, #4
 8009876:	e006      	b.n	8009886 <HAL_GPIO_Init+0x206>
 8009878:	2303      	movs	r3, #3
 800987a:	e004      	b.n	8009886 <HAL_GPIO_Init+0x206>
 800987c:	2302      	movs	r3, #2
 800987e:	e002      	b.n	8009886 <HAL_GPIO_Init+0x206>
 8009880:	2301      	movs	r3, #1
 8009882:	e000      	b.n	8009886 <HAL_GPIO_Init+0x206>
 8009884:	2300      	movs	r3, #0
 8009886:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009888:	f002 0203 	and.w	r2, r2, #3
 800988c:	0092      	lsls	r2, r2, #2
 800988e:	4093      	lsls	r3, r2
 8009890:	68fa      	ldr	r2, [r7, #12]
 8009892:	4313      	orrs	r3, r2
 8009894:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8009896:	4925      	ldr	r1, [pc, #148]	; (800992c <HAL_GPIO_Init+0x2ac>)
 8009898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800989a:	089b      	lsrs	r3, r3, #2
 800989c:	3302      	adds	r3, #2
 800989e:	68fa      	ldr	r2, [r7, #12]
 80098a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	685b      	ldr	r3, [r3, #4]
 80098a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d006      	beq.n	80098be <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80098b0:	4b25      	ldr	r3, [pc, #148]	; (8009948 <HAL_GPIO_Init+0x2c8>)
 80098b2:	689a      	ldr	r2, [r3, #8]
 80098b4:	4924      	ldr	r1, [pc, #144]	; (8009948 <HAL_GPIO_Init+0x2c8>)
 80098b6:	69bb      	ldr	r3, [r7, #24]
 80098b8:	4313      	orrs	r3, r2
 80098ba:	608b      	str	r3, [r1, #8]
 80098bc:	e006      	b.n	80098cc <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80098be:	4b22      	ldr	r3, [pc, #136]	; (8009948 <HAL_GPIO_Init+0x2c8>)
 80098c0:	689a      	ldr	r2, [r3, #8]
 80098c2:	69bb      	ldr	r3, [r7, #24]
 80098c4:	43db      	mvns	r3, r3
 80098c6:	4920      	ldr	r1, [pc, #128]	; (8009948 <HAL_GPIO_Init+0x2c8>)
 80098c8:	4013      	ands	r3, r2
 80098ca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	685b      	ldr	r3, [r3, #4]
 80098d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80098d4:	2b00      	cmp	r3, #0
 80098d6:	d006      	beq.n	80098e6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80098d8:	4b1b      	ldr	r3, [pc, #108]	; (8009948 <HAL_GPIO_Init+0x2c8>)
 80098da:	68da      	ldr	r2, [r3, #12]
 80098dc:	491a      	ldr	r1, [pc, #104]	; (8009948 <HAL_GPIO_Init+0x2c8>)
 80098de:	69bb      	ldr	r3, [r7, #24]
 80098e0:	4313      	orrs	r3, r2
 80098e2:	60cb      	str	r3, [r1, #12]
 80098e4:	e006      	b.n	80098f4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80098e6:	4b18      	ldr	r3, [pc, #96]	; (8009948 <HAL_GPIO_Init+0x2c8>)
 80098e8:	68da      	ldr	r2, [r3, #12]
 80098ea:	69bb      	ldr	r3, [r7, #24]
 80098ec:	43db      	mvns	r3, r3
 80098ee:	4916      	ldr	r1, [pc, #88]	; (8009948 <HAL_GPIO_Init+0x2c8>)
 80098f0:	4013      	ands	r3, r2
 80098f2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80098f4:	683b      	ldr	r3, [r7, #0]
 80098f6:	685b      	ldr	r3, [r3, #4]
 80098f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d025      	beq.n	800994c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8009900:	4b11      	ldr	r3, [pc, #68]	; (8009948 <HAL_GPIO_Init+0x2c8>)
 8009902:	685a      	ldr	r2, [r3, #4]
 8009904:	4910      	ldr	r1, [pc, #64]	; (8009948 <HAL_GPIO_Init+0x2c8>)
 8009906:	69bb      	ldr	r3, [r7, #24]
 8009908:	4313      	orrs	r3, r2
 800990a:	604b      	str	r3, [r1, #4]
 800990c:	e025      	b.n	800995a <HAL_GPIO_Init+0x2da>
 800990e:	bf00      	nop
 8009910:	10320000 	.word	0x10320000
 8009914:	10310000 	.word	0x10310000
 8009918:	10220000 	.word	0x10220000
 800991c:	10210000 	.word	0x10210000
 8009920:	10120000 	.word	0x10120000
 8009924:	10110000 	.word	0x10110000
 8009928:	40021000 	.word	0x40021000
 800992c:	40010000 	.word	0x40010000
 8009930:	40010800 	.word	0x40010800
 8009934:	40010c00 	.word	0x40010c00
 8009938:	40011000 	.word	0x40011000
 800993c:	40011400 	.word	0x40011400
 8009940:	40011800 	.word	0x40011800
 8009944:	40011c00 	.word	0x40011c00
 8009948:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800994c:	4b15      	ldr	r3, [pc, #84]	; (80099a4 <HAL_GPIO_Init+0x324>)
 800994e:	685a      	ldr	r2, [r3, #4]
 8009950:	69bb      	ldr	r3, [r7, #24]
 8009952:	43db      	mvns	r3, r3
 8009954:	4913      	ldr	r1, [pc, #76]	; (80099a4 <HAL_GPIO_Init+0x324>)
 8009956:	4013      	ands	r3, r2
 8009958:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800995a:	683b      	ldr	r3, [r7, #0]
 800995c:	685b      	ldr	r3, [r3, #4]
 800995e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009962:	2b00      	cmp	r3, #0
 8009964:	d006      	beq.n	8009974 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8009966:	4b0f      	ldr	r3, [pc, #60]	; (80099a4 <HAL_GPIO_Init+0x324>)
 8009968:	681a      	ldr	r2, [r3, #0]
 800996a:	490e      	ldr	r1, [pc, #56]	; (80099a4 <HAL_GPIO_Init+0x324>)
 800996c:	69bb      	ldr	r3, [r7, #24]
 800996e:	4313      	orrs	r3, r2
 8009970:	600b      	str	r3, [r1, #0]
 8009972:	e006      	b.n	8009982 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009974:	4b0b      	ldr	r3, [pc, #44]	; (80099a4 <HAL_GPIO_Init+0x324>)
 8009976:	681a      	ldr	r2, [r3, #0]
 8009978:	69bb      	ldr	r3, [r7, #24]
 800997a:	43db      	mvns	r3, r3
 800997c:	4909      	ldr	r1, [pc, #36]	; (80099a4 <HAL_GPIO_Init+0x324>)
 800997e:	4013      	ands	r3, r2
 8009980:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8009982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009984:	3301      	adds	r3, #1
 8009986:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009988:	683b      	ldr	r3, [r7, #0]
 800998a:	681a      	ldr	r2, [r3, #0]
 800998c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800998e:	fa22 f303 	lsr.w	r3, r2, r3
 8009992:	2b00      	cmp	r3, #0
 8009994:	f47f ae7e 	bne.w	8009694 <HAL_GPIO_Init+0x14>
  }
}
 8009998:	bf00      	nop
 800999a:	bf00      	nop
 800999c:	372c      	adds	r7, #44	; 0x2c
 800999e:	46bd      	mov	sp, r7
 80099a0:	bc80      	pop	{r7}
 80099a2:	4770      	bx	lr
 80099a4:	40010400 	.word	0x40010400

080099a8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80099a8:	b480      	push	{r7}
 80099aa:	b089      	sub	sp, #36	; 0x24
 80099ac:	af00      	add	r7, sp, #0
 80099ae:	6078      	str	r0, [r7, #4]
 80099b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80099b2:	2300      	movs	r3, #0
 80099b4:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 80099b6:	e0a6      	b.n	8009b06 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80099b8:	2201      	movs	r2, #1
 80099ba:	69fb      	ldr	r3, [r7, #28]
 80099bc:	fa02 f303 	lsl.w	r3, r2, r3
 80099c0:	683a      	ldr	r2, [r7, #0]
 80099c2:	4013      	ands	r3, r2
 80099c4:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 80099c6:	69bb      	ldr	r3, [r7, #24]
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	f000 8099 	beq.w	8009b00 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 80099ce:	4a54      	ldr	r2, [pc, #336]	; (8009b20 <HAL_GPIO_DeInit+0x178>)
 80099d0:	69fb      	ldr	r3, [r7, #28]
 80099d2:	089b      	lsrs	r3, r3, #2
 80099d4:	3302      	adds	r3, #2
 80099d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80099da:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 80099dc:	69fb      	ldr	r3, [r7, #28]
 80099de:	f003 0303 	and.w	r3, r3, #3
 80099e2:	009b      	lsls	r3, r3, #2
 80099e4:	220f      	movs	r2, #15
 80099e6:	fa02 f303 	lsl.w	r3, r2, r3
 80099ea:	697a      	ldr	r2, [r7, #20]
 80099ec:	4013      	ands	r3, r2
 80099ee:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	4a4c      	ldr	r2, [pc, #304]	; (8009b24 <HAL_GPIO_DeInit+0x17c>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d01f      	beq.n	8009a38 <HAL_GPIO_DeInit+0x90>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	4a4b      	ldr	r2, [pc, #300]	; (8009b28 <HAL_GPIO_DeInit+0x180>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d019      	beq.n	8009a34 <HAL_GPIO_DeInit+0x8c>
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	4a4a      	ldr	r2, [pc, #296]	; (8009b2c <HAL_GPIO_DeInit+0x184>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d013      	beq.n	8009a30 <HAL_GPIO_DeInit+0x88>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	4a49      	ldr	r2, [pc, #292]	; (8009b30 <HAL_GPIO_DeInit+0x188>)
 8009a0c:	4293      	cmp	r3, r2
 8009a0e:	d00d      	beq.n	8009a2c <HAL_GPIO_DeInit+0x84>
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	4a48      	ldr	r2, [pc, #288]	; (8009b34 <HAL_GPIO_DeInit+0x18c>)
 8009a14:	4293      	cmp	r3, r2
 8009a16:	d007      	beq.n	8009a28 <HAL_GPIO_DeInit+0x80>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	4a47      	ldr	r2, [pc, #284]	; (8009b38 <HAL_GPIO_DeInit+0x190>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d101      	bne.n	8009a24 <HAL_GPIO_DeInit+0x7c>
 8009a20:	2305      	movs	r3, #5
 8009a22:	e00a      	b.n	8009a3a <HAL_GPIO_DeInit+0x92>
 8009a24:	2306      	movs	r3, #6
 8009a26:	e008      	b.n	8009a3a <HAL_GPIO_DeInit+0x92>
 8009a28:	2304      	movs	r3, #4
 8009a2a:	e006      	b.n	8009a3a <HAL_GPIO_DeInit+0x92>
 8009a2c:	2303      	movs	r3, #3
 8009a2e:	e004      	b.n	8009a3a <HAL_GPIO_DeInit+0x92>
 8009a30:	2302      	movs	r3, #2
 8009a32:	e002      	b.n	8009a3a <HAL_GPIO_DeInit+0x92>
 8009a34:	2301      	movs	r3, #1
 8009a36:	e000      	b.n	8009a3a <HAL_GPIO_DeInit+0x92>
 8009a38:	2300      	movs	r3, #0
 8009a3a:	69fa      	ldr	r2, [r7, #28]
 8009a3c:	f002 0203 	and.w	r2, r2, #3
 8009a40:	0092      	lsls	r2, r2, #2
 8009a42:	4093      	lsls	r3, r2
 8009a44:	697a      	ldr	r2, [r7, #20]
 8009a46:	429a      	cmp	r2, r3
 8009a48:	d132      	bne.n	8009ab0 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8009a4a:	4b3c      	ldr	r3, [pc, #240]	; (8009b3c <HAL_GPIO_DeInit+0x194>)
 8009a4c:	681a      	ldr	r2, [r3, #0]
 8009a4e:	69bb      	ldr	r3, [r7, #24]
 8009a50:	43db      	mvns	r3, r3
 8009a52:	493a      	ldr	r1, [pc, #232]	; (8009b3c <HAL_GPIO_DeInit+0x194>)
 8009a54:	4013      	ands	r3, r2
 8009a56:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8009a58:	4b38      	ldr	r3, [pc, #224]	; (8009b3c <HAL_GPIO_DeInit+0x194>)
 8009a5a:	685a      	ldr	r2, [r3, #4]
 8009a5c:	69bb      	ldr	r3, [r7, #24]
 8009a5e:	43db      	mvns	r3, r3
 8009a60:	4936      	ldr	r1, [pc, #216]	; (8009b3c <HAL_GPIO_DeInit+0x194>)
 8009a62:	4013      	ands	r3, r2
 8009a64:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8009a66:	4b35      	ldr	r3, [pc, #212]	; (8009b3c <HAL_GPIO_DeInit+0x194>)
 8009a68:	68da      	ldr	r2, [r3, #12]
 8009a6a:	69bb      	ldr	r3, [r7, #24]
 8009a6c:	43db      	mvns	r3, r3
 8009a6e:	4933      	ldr	r1, [pc, #204]	; (8009b3c <HAL_GPIO_DeInit+0x194>)
 8009a70:	4013      	ands	r3, r2
 8009a72:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8009a74:	4b31      	ldr	r3, [pc, #196]	; (8009b3c <HAL_GPIO_DeInit+0x194>)
 8009a76:	689a      	ldr	r2, [r3, #8]
 8009a78:	69bb      	ldr	r3, [r7, #24]
 8009a7a:	43db      	mvns	r3, r3
 8009a7c:	492f      	ldr	r1, [pc, #188]	; (8009b3c <HAL_GPIO_DeInit+0x194>)
 8009a7e:	4013      	ands	r3, r2
 8009a80:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8009a82:	69fb      	ldr	r3, [r7, #28]
 8009a84:	f003 0303 	and.w	r3, r3, #3
 8009a88:	009b      	lsls	r3, r3, #2
 8009a8a:	220f      	movs	r2, #15
 8009a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8009a90:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8009a92:	4a23      	ldr	r2, [pc, #140]	; (8009b20 <HAL_GPIO_DeInit+0x178>)
 8009a94:	69fb      	ldr	r3, [r7, #28]
 8009a96:	089b      	lsrs	r3, r3, #2
 8009a98:	3302      	adds	r3, #2
 8009a9a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009a9e:	697b      	ldr	r3, [r7, #20]
 8009aa0:	43da      	mvns	r2, r3
 8009aa2:	481f      	ldr	r0, [pc, #124]	; (8009b20 <HAL_GPIO_DeInit+0x178>)
 8009aa4:	69fb      	ldr	r3, [r7, #28]
 8009aa6:	089b      	lsrs	r3, r3, #2
 8009aa8:	400a      	ands	r2, r1
 8009aaa:	3302      	adds	r3, #2
 8009aac:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009ab0:	69bb      	ldr	r3, [r7, #24]
 8009ab2:	2bff      	cmp	r3, #255	; 0xff
 8009ab4:	d801      	bhi.n	8009aba <HAL_GPIO_DeInit+0x112>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	e001      	b.n	8009abe <HAL_GPIO_DeInit+0x116>
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	3304      	adds	r3, #4
 8009abe:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009ac0:	69bb      	ldr	r3, [r7, #24]
 8009ac2:	2bff      	cmp	r3, #255	; 0xff
 8009ac4:	d802      	bhi.n	8009acc <HAL_GPIO_DeInit+0x124>
 8009ac6:	69fb      	ldr	r3, [r7, #28]
 8009ac8:	009b      	lsls	r3, r3, #2
 8009aca:	e002      	b.n	8009ad2 <HAL_GPIO_DeInit+0x12a>
 8009acc:	69fb      	ldr	r3, [r7, #28]
 8009ace:	3b08      	subs	r3, #8
 8009ad0:	009b      	lsls	r3, r3, #2
 8009ad2:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8009ad4:	693b      	ldr	r3, [r7, #16]
 8009ad6:	681a      	ldr	r2, [r3, #0]
 8009ad8:	210f      	movs	r1, #15
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	fa01 f303 	lsl.w	r3, r1, r3
 8009ae0:	43db      	mvns	r3, r3
 8009ae2:	401a      	ands	r2, r3
 8009ae4:	2104      	movs	r1, #4
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	fa01 f303 	lsl.w	r3, r1, r3
 8009aec:	431a      	orrs	r2, r3
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	68da      	ldr	r2, [r3, #12]
 8009af6:	69bb      	ldr	r3, [r7, #24]
 8009af8:	43db      	mvns	r3, r3
 8009afa:	401a      	ands	r2, r3
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	60da      	str	r2, [r3, #12]
    }

    position++;
 8009b00:	69fb      	ldr	r3, [r7, #28]
 8009b02:	3301      	adds	r3, #1
 8009b04:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8009b06:	683a      	ldr	r2, [r7, #0]
 8009b08:	69fb      	ldr	r3, [r7, #28]
 8009b0a:	fa22 f303 	lsr.w	r3, r2, r3
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	f47f af52 	bne.w	80099b8 <HAL_GPIO_DeInit+0x10>
  }
}
 8009b14:	bf00      	nop
 8009b16:	bf00      	nop
 8009b18:	3724      	adds	r7, #36	; 0x24
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bc80      	pop	{r7}
 8009b1e:	4770      	bx	lr
 8009b20:	40010000 	.word	0x40010000
 8009b24:	40010800 	.word	0x40010800
 8009b28:	40010c00 	.word	0x40010c00
 8009b2c:	40011000 	.word	0x40011000
 8009b30:	40011400 	.word	0x40011400
 8009b34:	40011800 	.word	0x40011800
 8009b38:	40011c00 	.word	0x40011c00
 8009b3c:	40010400 	.word	0x40010400

08009b40 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b085      	sub	sp, #20
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
 8009b48:	460b      	mov	r3, r1
 8009b4a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	689a      	ldr	r2, [r3, #8]
 8009b50:	887b      	ldrh	r3, [r7, #2]
 8009b52:	4013      	ands	r3, r2
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d002      	beq.n	8009b5e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009b58:	2301      	movs	r3, #1
 8009b5a:	73fb      	strb	r3, [r7, #15]
 8009b5c:	e001      	b.n	8009b62 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009b5e:	2300      	movs	r3, #0
 8009b60:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	3714      	adds	r7, #20
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bc80      	pop	{r7}
 8009b6c:	4770      	bx	lr

08009b6e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009b6e:	b480      	push	{r7}
 8009b70:	b083      	sub	sp, #12
 8009b72:	af00      	add	r7, sp, #0
 8009b74:	6078      	str	r0, [r7, #4]
 8009b76:	460b      	mov	r3, r1
 8009b78:	807b      	strh	r3, [r7, #2]
 8009b7a:	4613      	mov	r3, r2
 8009b7c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009b7e:	787b      	ldrb	r3, [r7, #1]
 8009b80:	2b00      	cmp	r3, #0
 8009b82:	d003      	beq.n	8009b8c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009b84:	887a      	ldrh	r2, [r7, #2]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8009b8a:	e003      	b.n	8009b94 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009b8c:	887b      	ldrh	r3, [r7, #2]
 8009b8e:	041a      	lsls	r2, r3, #16
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	611a      	str	r2, [r3, #16]
}
 8009b94:	bf00      	nop
 8009b96:	370c      	adds	r7, #12
 8009b98:	46bd      	mov	sp, r7
 8009b9a:	bc80      	pop	{r7}
 8009b9c:	4770      	bx	lr

08009b9e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009b9e:	b480      	push	{r7}
 8009ba0:	b085      	sub	sp, #20
 8009ba2:	af00      	add	r7, sp, #0
 8009ba4:	6078      	str	r0, [r7, #4]
 8009ba6:	460b      	mov	r3, r1
 8009ba8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	68db      	ldr	r3, [r3, #12]
 8009bae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009bb0:	887a      	ldrh	r2, [r7, #2]
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	4013      	ands	r3, r2
 8009bb6:	041a      	lsls	r2, r3, #16
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	43d9      	mvns	r1, r3
 8009bbc:	887b      	ldrh	r3, [r7, #2]
 8009bbe:	400b      	ands	r3, r1
 8009bc0:	431a      	orrs	r2, r3
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	611a      	str	r2, [r3, #16]
}
 8009bc6:	bf00      	nop
 8009bc8:	3714      	adds	r7, #20
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	bc80      	pop	{r7}
 8009bce:	4770      	bx	lr

08009bd0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b084      	sub	sp, #16
 8009bd4:	af00      	add	r7, sp, #0
 8009bd6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d101      	bne.n	8009be2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009bde:	2301      	movs	r3, #1
 8009be0:	e12b      	b.n	8009e3a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009be8:	b2db      	uxtb	r3, r3
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d106      	bne.n	8009bfc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009bf6:	6878      	ldr	r0, [r7, #4]
 8009bf8:	f7fe fff8 	bl	8008bec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	2224      	movs	r2, #36	; 0x24
 8009c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	681a      	ldr	r2, [r3, #0]
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	681b      	ldr	r3, [r3, #0]
 8009c0e:	f022 0201 	bic.w	r2, r2, #1
 8009c12:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	681a      	ldr	r2, [r3, #0]
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009c22:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	681a      	ldr	r2, [r3, #0]
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009c32:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009c34:	f001 fdb8 	bl	800b7a8 <HAL_RCC_GetPCLK1Freq>
 8009c38:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	685b      	ldr	r3, [r3, #4]
 8009c3e:	4a81      	ldr	r2, [pc, #516]	; (8009e44 <HAL_I2C_Init+0x274>)
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d807      	bhi.n	8009c54 <HAL_I2C_Init+0x84>
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	4a80      	ldr	r2, [pc, #512]	; (8009e48 <HAL_I2C_Init+0x278>)
 8009c48:	4293      	cmp	r3, r2
 8009c4a:	bf94      	ite	ls
 8009c4c:	2301      	movls	r3, #1
 8009c4e:	2300      	movhi	r3, #0
 8009c50:	b2db      	uxtb	r3, r3
 8009c52:	e006      	b.n	8009c62 <HAL_I2C_Init+0x92>
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	4a7d      	ldr	r2, [pc, #500]	; (8009e4c <HAL_I2C_Init+0x27c>)
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	bf94      	ite	ls
 8009c5c:	2301      	movls	r3, #1
 8009c5e:	2300      	movhi	r3, #0
 8009c60:	b2db      	uxtb	r3, r3
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d001      	beq.n	8009c6a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009c66:	2301      	movs	r3, #1
 8009c68:	e0e7      	b.n	8009e3a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	4a78      	ldr	r2, [pc, #480]	; (8009e50 <HAL_I2C_Init+0x280>)
 8009c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8009c72:	0c9b      	lsrs	r3, r3, #18
 8009c74:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	685b      	ldr	r3, [r3, #4]
 8009c7c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	68ba      	ldr	r2, [r7, #8]
 8009c86:	430a      	orrs	r2, r1
 8009c88:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	6a1b      	ldr	r3, [r3, #32]
 8009c90:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	685b      	ldr	r3, [r3, #4]
 8009c98:	4a6a      	ldr	r2, [pc, #424]	; (8009e44 <HAL_I2C_Init+0x274>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d802      	bhi.n	8009ca4 <HAL_I2C_Init+0xd4>
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	3301      	adds	r3, #1
 8009ca2:	e009      	b.n	8009cb8 <HAL_I2C_Init+0xe8>
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009caa:	fb02 f303 	mul.w	r3, r2, r3
 8009cae:	4a69      	ldr	r2, [pc, #420]	; (8009e54 <HAL_I2C_Init+0x284>)
 8009cb0:	fba2 2303 	umull	r2, r3, r2, r3
 8009cb4:	099b      	lsrs	r3, r3, #6
 8009cb6:	3301      	adds	r3, #1
 8009cb8:	687a      	ldr	r2, [r7, #4]
 8009cba:	6812      	ldr	r2, [r2, #0]
 8009cbc:	430b      	orrs	r3, r1
 8009cbe:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	69db      	ldr	r3, [r3, #28]
 8009cc6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009cca:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	685b      	ldr	r3, [r3, #4]
 8009cd2:	495c      	ldr	r1, [pc, #368]	; (8009e44 <HAL_I2C_Init+0x274>)
 8009cd4:	428b      	cmp	r3, r1
 8009cd6:	d819      	bhi.n	8009d0c <HAL_I2C_Init+0x13c>
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	1e59      	subs	r1, r3, #1
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	685b      	ldr	r3, [r3, #4]
 8009ce0:	005b      	lsls	r3, r3, #1
 8009ce2:	fbb1 f3f3 	udiv	r3, r1, r3
 8009ce6:	1c59      	adds	r1, r3, #1
 8009ce8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009cec:	400b      	ands	r3, r1
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d00a      	beq.n	8009d08 <HAL_I2C_Init+0x138>
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	1e59      	subs	r1, r3, #1
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	685b      	ldr	r3, [r3, #4]
 8009cfa:	005b      	lsls	r3, r3, #1
 8009cfc:	fbb1 f3f3 	udiv	r3, r1, r3
 8009d00:	3301      	adds	r3, #1
 8009d02:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009d06:	e051      	b.n	8009dac <HAL_I2C_Init+0x1dc>
 8009d08:	2304      	movs	r3, #4
 8009d0a:	e04f      	b.n	8009dac <HAL_I2C_Init+0x1dc>
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	689b      	ldr	r3, [r3, #8]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d111      	bne.n	8009d38 <HAL_I2C_Init+0x168>
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	1e58      	subs	r0, r3, #1
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	6859      	ldr	r1, [r3, #4]
 8009d1c:	460b      	mov	r3, r1
 8009d1e:	005b      	lsls	r3, r3, #1
 8009d20:	440b      	add	r3, r1
 8009d22:	fbb0 f3f3 	udiv	r3, r0, r3
 8009d26:	3301      	adds	r3, #1
 8009d28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009d2c:	2b00      	cmp	r3, #0
 8009d2e:	bf0c      	ite	eq
 8009d30:	2301      	moveq	r3, #1
 8009d32:	2300      	movne	r3, #0
 8009d34:	b2db      	uxtb	r3, r3
 8009d36:	e012      	b.n	8009d5e <HAL_I2C_Init+0x18e>
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	1e58      	subs	r0, r3, #1
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6859      	ldr	r1, [r3, #4]
 8009d40:	460b      	mov	r3, r1
 8009d42:	009b      	lsls	r3, r3, #2
 8009d44:	440b      	add	r3, r1
 8009d46:	0099      	lsls	r1, r3, #2
 8009d48:	440b      	add	r3, r1
 8009d4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8009d4e:	3301      	adds	r3, #1
 8009d50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	bf0c      	ite	eq
 8009d58:	2301      	moveq	r3, #1
 8009d5a:	2300      	movne	r3, #0
 8009d5c:	b2db      	uxtb	r3, r3
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d001      	beq.n	8009d66 <HAL_I2C_Init+0x196>
 8009d62:	2301      	movs	r3, #1
 8009d64:	e022      	b.n	8009dac <HAL_I2C_Init+0x1dc>
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	689b      	ldr	r3, [r3, #8]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d10e      	bne.n	8009d8c <HAL_I2C_Init+0x1bc>
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	1e58      	subs	r0, r3, #1
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	6859      	ldr	r1, [r3, #4]
 8009d76:	460b      	mov	r3, r1
 8009d78:	005b      	lsls	r3, r3, #1
 8009d7a:	440b      	add	r3, r1
 8009d7c:	fbb0 f3f3 	udiv	r3, r0, r3
 8009d80:	3301      	adds	r3, #1
 8009d82:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009d86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d8a:	e00f      	b.n	8009dac <HAL_I2C_Init+0x1dc>
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	1e58      	subs	r0, r3, #1
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	6859      	ldr	r1, [r3, #4]
 8009d94:	460b      	mov	r3, r1
 8009d96:	009b      	lsls	r3, r3, #2
 8009d98:	440b      	add	r3, r1
 8009d9a:	0099      	lsls	r1, r3, #2
 8009d9c:	440b      	add	r3, r1
 8009d9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009da2:	3301      	adds	r3, #1
 8009da4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009da8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009dac:	6879      	ldr	r1, [r7, #4]
 8009dae:	6809      	ldr	r1, [r1, #0]
 8009db0:	4313      	orrs	r3, r2
 8009db2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	681b      	ldr	r3, [r3, #0]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	69da      	ldr	r2, [r3, #28]
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6a1b      	ldr	r3, [r3, #32]
 8009dc6:	431a      	orrs	r2, r3
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	430a      	orrs	r2, r1
 8009dce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	689b      	ldr	r3, [r3, #8]
 8009dd6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009dda:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009dde:	687a      	ldr	r2, [r7, #4]
 8009de0:	6911      	ldr	r1, [r2, #16]
 8009de2:	687a      	ldr	r2, [r7, #4]
 8009de4:	68d2      	ldr	r2, [r2, #12]
 8009de6:	4311      	orrs	r1, r2
 8009de8:	687a      	ldr	r2, [r7, #4]
 8009dea:	6812      	ldr	r2, [r2, #0]
 8009dec:	430b      	orrs	r3, r1
 8009dee:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	68db      	ldr	r3, [r3, #12]
 8009df6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	695a      	ldr	r2, [r3, #20]
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	699b      	ldr	r3, [r3, #24]
 8009e02:	431a      	orrs	r2, r3
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	430a      	orrs	r2, r1
 8009e0a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	681a      	ldr	r2, [r3, #0]
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f042 0201 	orr.w	r2, r2, #1
 8009e1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	2200      	movs	r2, #0
 8009e20:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	2220      	movs	r2, #32
 8009e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	2200      	movs	r2, #0
 8009e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009e38:	2300      	movs	r3, #0
}
 8009e3a:	4618      	mov	r0, r3
 8009e3c:	3710      	adds	r7, #16
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}
 8009e42:	bf00      	nop
 8009e44:	000186a0 	.word	0x000186a0
 8009e48:	001e847f 	.word	0x001e847f
 8009e4c:	003d08ff 	.word	0x003d08ff
 8009e50:	431bde83 	.word	0x431bde83
 8009e54:	10624dd3 	.word	0x10624dd3

08009e58 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b082      	sub	sp, #8
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d101      	bne.n	8009e6a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009e66:	2301      	movs	r3, #1
 8009e68:	e021      	b.n	8009eae <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2224      	movs	r2, #36	; 0x24
 8009e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	681a      	ldr	r2, [r3, #0]
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f022 0201 	bic.w	r2, r2, #1
 8009e80:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009e82:	6878      	ldr	r0, [r7, #4]
 8009e84:	f7fe fef0 	bl	8008c68 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2200      	movs	r2, #0
 8009e8c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2200      	movs	r2, #0
 8009e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	2200      	movs	r2, #0
 8009e9a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2200      	movs	r2, #0
 8009ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009eac:	2300      	movs	r3, #0
}
 8009eae:	4618      	mov	r0, r3
 8009eb0:	3708      	adds	r7, #8
 8009eb2:	46bd      	mov	sp, r7
 8009eb4:	bd80      	pop	{r7, pc}
	...

08009eb8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009eb8:	b580      	push	{r7, lr}
 8009eba:	b088      	sub	sp, #32
 8009ebc:	af02      	add	r7, sp, #8
 8009ebe:	60f8      	str	r0, [r7, #12]
 8009ec0:	607a      	str	r2, [r7, #4]
 8009ec2:	461a      	mov	r2, r3
 8009ec4:	460b      	mov	r3, r1
 8009ec6:	817b      	strh	r3, [r7, #10]
 8009ec8:	4613      	mov	r3, r2
 8009eca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009ecc:	f7ff f85e 	bl	8008f8c <HAL_GetTick>
 8009ed0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ed8:	b2db      	uxtb	r3, r3
 8009eda:	2b20      	cmp	r3, #32
 8009edc:	f040 80e0 	bne.w	800a0a0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009ee0:	697b      	ldr	r3, [r7, #20]
 8009ee2:	9300      	str	r3, [sp, #0]
 8009ee4:	2319      	movs	r3, #25
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	4970      	ldr	r1, [pc, #448]	; (800a0ac <HAL_I2C_Master_Transmit+0x1f4>)
 8009eea:	68f8      	ldr	r0, [r7, #12]
 8009eec:	f000 fe5c 	bl	800aba8 <I2C_WaitOnFlagUntilTimeout>
 8009ef0:	4603      	mov	r3, r0
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d001      	beq.n	8009efa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8009ef6:	2302      	movs	r3, #2
 8009ef8:	e0d3      	b.n	800a0a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f00:	2b01      	cmp	r3, #1
 8009f02:	d101      	bne.n	8009f08 <HAL_I2C_Master_Transmit+0x50>
 8009f04:	2302      	movs	r3, #2
 8009f06:	e0cc      	b.n	800a0a2 <HAL_I2C_Master_Transmit+0x1ea>
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	2201      	movs	r2, #1
 8009f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	f003 0301 	and.w	r3, r3, #1
 8009f1a:	2b01      	cmp	r3, #1
 8009f1c:	d007      	beq.n	8009f2e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	681a      	ldr	r2, [r3, #0]
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	f042 0201 	orr.w	r2, r2, #1
 8009f2c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	681a      	ldr	r2, [r3, #0]
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009f3c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	2221      	movs	r2, #33	; 0x21
 8009f42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	2210      	movs	r2, #16
 8009f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	2200      	movs	r2, #0
 8009f52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	687a      	ldr	r2, [r7, #4]
 8009f58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	893a      	ldrh	r2, [r7, #8]
 8009f5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009f60:	68fb      	ldr	r3, [r7, #12]
 8009f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f64:	b29a      	uxth	r2, r3
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	4a50      	ldr	r2, [pc, #320]	; (800a0b0 <HAL_I2C_Master_Transmit+0x1f8>)
 8009f6e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009f70:	8979      	ldrh	r1, [r7, #10]
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	6a3a      	ldr	r2, [r7, #32]
 8009f76:	68f8      	ldr	r0, [r7, #12]
 8009f78:	f000 fc16 	bl	800a7a8 <I2C_MasterRequestWrite>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d001      	beq.n	8009f86 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8009f82:	2301      	movs	r3, #1
 8009f84:	e08d      	b.n	800a0a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009f86:	2300      	movs	r3, #0
 8009f88:	613b      	str	r3, [r7, #16]
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	695b      	ldr	r3, [r3, #20]
 8009f90:	613b      	str	r3, [r7, #16]
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	681b      	ldr	r3, [r3, #0]
 8009f96:	699b      	ldr	r3, [r3, #24]
 8009f98:	613b      	str	r3, [r7, #16]
 8009f9a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009f9c:	e066      	b.n	800a06c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009f9e:	697a      	ldr	r2, [r7, #20]
 8009fa0:	6a39      	ldr	r1, [r7, #32]
 8009fa2:	68f8      	ldr	r0, [r7, #12]
 8009fa4:	f000 ff1a 	bl	800addc <I2C_WaitOnTXEFlagUntilTimeout>
 8009fa8:	4603      	mov	r3, r0
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d00d      	beq.n	8009fca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fb2:	2b04      	cmp	r3, #4
 8009fb4:	d107      	bne.n	8009fc6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	681a      	ldr	r2, [r3, #0]
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009fc4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009fc6:	2301      	movs	r3, #1
 8009fc8:	e06b      	b.n	800a0a2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fce:	781a      	ldrb	r2, [r3, #0]
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009fda:	1c5a      	adds	r2, r3, #1
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009fe4:	b29b      	uxth	r3, r3
 8009fe6:	3b01      	subs	r3, #1
 8009fe8:	b29a      	uxth	r2, r3
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ff2:	3b01      	subs	r3, #1
 8009ff4:	b29a      	uxth	r2, r3
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	681b      	ldr	r3, [r3, #0]
 8009ffe:	695b      	ldr	r3, [r3, #20]
 800a000:	f003 0304 	and.w	r3, r3, #4
 800a004:	2b04      	cmp	r3, #4
 800a006:	d11b      	bne.n	800a040 <HAL_I2C_Master_Transmit+0x188>
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a00c:	2b00      	cmp	r3, #0
 800a00e:	d017      	beq.n	800a040 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a010:	68fb      	ldr	r3, [r7, #12]
 800a012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a014:	781a      	ldrb	r2, [r3, #0]
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a020:	1c5a      	adds	r2, r3, #1
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a02a:	b29b      	uxth	r3, r3
 800a02c:	3b01      	subs	r3, #1
 800a02e:	b29a      	uxth	r2, r3
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a038:	3b01      	subs	r3, #1
 800a03a:	b29a      	uxth	r2, r3
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a040:	697a      	ldr	r2, [r7, #20]
 800a042:	6a39      	ldr	r1, [r7, #32]
 800a044:	68f8      	ldr	r0, [r7, #12]
 800a046:	f000 ff11 	bl	800ae6c <I2C_WaitOnBTFFlagUntilTimeout>
 800a04a:	4603      	mov	r3, r0
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d00d      	beq.n	800a06c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a054:	2b04      	cmp	r3, #4
 800a056:	d107      	bne.n	800a068 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	681a      	ldr	r2, [r3, #0]
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a066:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a068:	2301      	movs	r3, #1
 800a06a:	e01a      	b.n	800a0a2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a070:	2b00      	cmp	r3, #0
 800a072:	d194      	bne.n	8009f9e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	681b      	ldr	r3, [r3, #0]
 800a078:	681a      	ldr	r2, [r3, #0]
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a082:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	2220      	movs	r2, #32
 800a088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	2200      	movs	r2, #0
 800a090:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	2200      	movs	r2, #0
 800a098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a09c:	2300      	movs	r3, #0
 800a09e:	e000      	b.n	800a0a2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a0a0:	2302      	movs	r3, #2
  }
}
 800a0a2:	4618      	mov	r0, r3
 800a0a4:	3718      	adds	r7, #24
 800a0a6:	46bd      	mov	sp, r7
 800a0a8:	bd80      	pop	{r7, pc}
 800a0aa:	bf00      	nop
 800a0ac:	00100002 	.word	0x00100002
 800a0b0:	ffff0000 	.word	0xffff0000

0800a0b4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a0b4:	b580      	push	{r7, lr}
 800a0b6:	b088      	sub	sp, #32
 800a0b8:	af02      	add	r7, sp, #8
 800a0ba:	60f8      	str	r0, [r7, #12]
 800a0bc:	4608      	mov	r0, r1
 800a0be:	4611      	mov	r1, r2
 800a0c0:	461a      	mov	r2, r3
 800a0c2:	4603      	mov	r3, r0
 800a0c4:	817b      	strh	r3, [r7, #10]
 800a0c6:	460b      	mov	r3, r1
 800a0c8:	813b      	strh	r3, [r7, #8]
 800a0ca:	4613      	mov	r3, r2
 800a0cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a0ce:	f7fe ff5d 	bl	8008f8c <HAL_GetTick>
 800a0d2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0da:	b2db      	uxtb	r3, r3
 800a0dc:	2b20      	cmp	r3, #32
 800a0de:	f040 80d9 	bne.w	800a294 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a0e2:	697b      	ldr	r3, [r7, #20]
 800a0e4:	9300      	str	r3, [sp, #0]
 800a0e6:	2319      	movs	r3, #25
 800a0e8:	2201      	movs	r2, #1
 800a0ea:	496d      	ldr	r1, [pc, #436]	; (800a2a0 <HAL_I2C_Mem_Write+0x1ec>)
 800a0ec:	68f8      	ldr	r0, [r7, #12]
 800a0ee:	f000 fd5b 	bl	800aba8 <I2C_WaitOnFlagUntilTimeout>
 800a0f2:	4603      	mov	r3, r0
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	d001      	beq.n	800a0fc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800a0f8:	2302      	movs	r3, #2
 800a0fa:	e0cc      	b.n	800a296 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a102:	2b01      	cmp	r3, #1
 800a104:	d101      	bne.n	800a10a <HAL_I2C_Mem_Write+0x56>
 800a106:	2302      	movs	r3, #2
 800a108:	e0c5      	b.n	800a296 <HAL_I2C_Mem_Write+0x1e2>
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	2201      	movs	r2, #1
 800a10e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	f003 0301 	and.w	r3, r3, #1
 800a11c:	2b01      	cmp	r3, #1
 800a11e:	d007      	beq.n	800a130 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	681a      	ldr	r2, [r3, #0]
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f042 0201 	orr.w	r2, r2, #1
 800a12e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	681a      	ldr	r2, [r3, #0]
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a13e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	2221      	movs	r2, #33	; 0x21
 800a144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	2240      	movs	r2, #64	; 0x40
 800a14c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	2200      	movs	r2, #0
 800a154:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	6a3a      	ldr	r2, [r7, #32]
 800a15a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a160:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a166:	b29a      	uxth	r2, r3
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	4a4d      	ldr	r2, [pc, #308]	; (800a2a4 <HAL_I2C_Mem_Write+0x1f0>)
 800a170:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a172:	88f8      	ldrh	r0, [r7, #6]
 800a174:	893a      	ldrh	r2, [r7, #8]
 800a176:	8979      	ldrh	r1, [r7, #10]
 800a178:	697b      	ldr	r3, [r7, #20]
 800a17a:	9301      	str	r3, [sp, #4]
 800a17c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a17e:	9300      	str	r3, [sp, #0]
 800a180:	4603      	mov	r3, r0
 800a182:	68f8      	ldr	r0, [r7, #12]
 800a184:	f000 fb92 	bl	800a8ac <I2C_RequestMemoryWrite>
 800a188:	4603      	mov	r3, r0
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d052      	beq.n	800a234 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800a18e:	2301      	movs	r3, #1
 800a190:	e081      	b.n	800a296 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a192:	697a      	ldr	r2, [r7, #20]
 800a194:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a196:	68f8      	ldr	r0, [r7, #12]
 800a198:	f000 fe20 	bl	800addc <I2C_WaitOnTXEFlagUntilTimeout>
 800a19c:	4603      	mov	r3, r0
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d00d      	beq.n	800a1be <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1a6:	2b04      	cmp	r3, #4
 800a1a8:	d107      	bne.n	800a1ba <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	681a      	ldr	r2, [r3, #0]
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1b8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a1ba:	2301      	movs	r3, #1
 800a1bc:	e06b      	b.n	800a296 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1c2:	781a      	ldrb	r2, [r3, #0]
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ce:	1c5a      	adds	r2, r3, #1
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a1d8:	3b01      	subs	r3, #1
 800a1da:	b29a      	uxth	r2, r3
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1e4:	b29b      	uxth	r3, r3
 800a1e6:	3b01      	subs	r3, #1
 800a1e8:	b29a      	uxth	r2, r3
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	695b      	ldr	r3, [r3, #20]
 800a1f4:	f003 0304 	and.w	r3, r3, #4
 800a1f8:	2b04      	cmp	r3, #4
 800a1fa:	d11b      	bne.n	800a234 <HAL_I2C_Mem_Write+0x180>
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a200:	2b00      	cmp	r3, #0
 800a202:	d017      	beq.n	800a234 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a208:	781a      	ldrb	r2, [r3, #0]
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a214:	1c5a      	adds	r2, r3, #1
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a21e:	3b01      	subs	r3, #1
 800a220:	b29a      	uxth	r2, r3
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a22a:	b29b      	uxth	r3, r3
 800a22c:	3b01      	subs	r3, #1
 800a22e:	b29a      	uxth	r2, r3
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d1aa      	bne.n	800a192 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a23c:	697a      	ldr	r2, [r7, #20]
 800a23e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a240:	68f8      	ldr	r0, [r7, #12]
 800a242:	f000 fe13 	bl	800ae6c <I2C_WaitOnBTFFlagUntilTimeout>
 800a246:	4603      	mov	r3, r0
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d00d      	beq.n	800a268 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a250:	2b04      	cmp	r3, #4
 800a252:	d107      	bne.n	800a264 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	681a      	ldr	r2, [r3, #0]
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a262:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a264:	2301      	movs	r3, #1
 800a266:	e016      	b.n	800a296 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	681a      	ldr	r2, [r3, #0]
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a276:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	2220      	movs	r2, #32
 800a27c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	2200      	movs	r2, #0
 800a284:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	2200      	movs	r2, #0
 800a28c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a290:	2300      	movs	r3, #0
 800a292:	e000      	b.n	800a296 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800a294:	2302      	movs	r3, #2
  }
}
 800a296:	4618      	mov	r0, r3
 800a298:	3718      	adds	r7, #24
 800a29a:	46bd      	mov	sp, r7
 800a29c:	bd80      	pop	{r7, pc}
 800a29e:	bf00      	nop
 800a2a0:	00100002 	.word	0x00100002
 800a2a4:	ffff0000 	.word	0xffff0000

0800a2a8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a2a8:	b580      	push	{r7, lr}
 800a2aa:	b08c      	sub	sp, #48	; 0x30
 800a2ac:	af02      	add	r7, sp, #8
 800a2ae:	60f8      	str	r0, [r7, #12]
 800a2b0:	4608      	mov	r0, r1
 800a2b2:	4611      	mov	r1, r2
 800a2b4:	461a      	mov	r2, r3
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	817b      	strh	r3, [r7, #10]
 800a2ba:	460b      	mov	r3, r1
 800a2bc:	813b      	strh	r3, [r7, #8]
 800a2be:	4613      	mov	r3, r2
 800a2c0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a2c6:	f7fe fe61 	bl	8008f8c <HAL_GetTick>
 800a2ca:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2d2:	b2db      	uxtb	r3, r3
 800a2d4:	2b20      	cmp	r3, #32
 800a2d6:	f040 8244 	bne.w	800a762 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2dc:	9300      	str	r3, [sp, #0]
 800a2de:	2319      	movs	r3, #25
 800a2e0:	2201      	movs	r2, #1
 800a2e2:	4982      	ldr	r1, [pc, #520]	; (800a4ec <HAL_I2C_Mem_Read+0x244>)
 800a2e4:	68f8      	ldr	r0, [r7, #12]
 800a2e6:	f000 fc5f 	bl	800aba8 <I2C_WaitOnFlagUntilTimeout>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d001      	beq.n	800a2f4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800a2f0:	2302      	movs	r3, #2
 800a2f2:	e237      	b.n	800a764 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a2f4:	68fb      	ldr	r3, [r7, #12]
 800a2f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a2fa:	2b01      	cmp	r3, #1
 800a2fc:	d101      	bne.n	800a302 <HAL_I2C_Mem_Read+0x5a>
 800a2fe:	2302      	movs	r3, #2
 800a300:	e230      	b.n	800a764 <HAL_I2C_Mem_Read+0x4bc>
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	2201      	movs	r2, #1
 800a306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	f003 0301 	and.w	r3, r3, #1
 800a314:	2b01      	cmp	r3, #1
 800a316:	d007      	beq.n	800a328 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	681a      	ldr	r2, [r3, #0]
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f042 0201 	orr.w	r2, r2, #1
 800a326:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	681a      	ldr	r2, [r3, #0]
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a336:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	2222      	movs	r2, #34	; 0x22
 800a33c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	2240      	movs	r2, #64	; 0x40
 800a344:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	2200      	movs	r2, #0
 800a34c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a352:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800a358:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a35e:	b29a      	uxth	r2, r3
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a364:	68fb      	ldr	r3, [r7, #12]
 800a366:	4a62      	ldr	r2, [pc, #392]	; (800a4f0 <HAL_I2C_Mem_Read+0x248>)
 800a368:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a36a:	88f8      	ldrh	r0, [r7, #6]
 800a36c:	893a      	ldrh	r2, [r7, #8]
 800a36e:	8979      	ldrh	r1, [r7, #10]
 800a370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a372:	9301      	str	r3, [sp, #4]
 800a374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a376:	9300      	str	r3, [sp, #0]
 800a378:	4603      	mov	r3, r0
 800a37a:	68f8      	ldr	r0, [r7, #12]
 800a37c:	f000 fb2c 	bl	800a9d8 <I2C_RequestMemoryRead>
 800a380:	4603      	mov	r3, r0
 800a382:	2b00      	cmp	r3, #0
 800a384:	d001      	beq.n	800a38a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800a386:	2301      	movs	r3, #1
 800a388:	e1ec      	b.n	800a764 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d113      	bne.n	800a3ba <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a392:	2300      	movs	r3, #0
 800a394:	61fb      	str	r3, [r7, #28]
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	695b      	ldr	r3, [r3, #20]
 800a39c:	61fb      	str	r3, [r7, #28]
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	699b      	ldr	r3, [r3, #24]
 800a3a4:	61fb      	str	r3, [r7, #28]
 800a3a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	681a      	ldr	r2, [r3, #0]
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a3b6:	601a      	str	r2, [r3, #0]
 800a3b8:	e1c0      	b.n	800a73c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800a3ba:	68fb      	ldr	r3, [r7, #12]
 800a3bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3be:	2b01      	cmp	r3, #1
 800a3c0:	d11e      	bne.n	800a400 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	681a      	ldr	r2, [r3, #0]
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	681b      	ldr	r3, [r3, #0]
 800a3cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a3d0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a3d2:	b672      	cpsid	i
}
 800a3d4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	61bb      	str	r3, [r7, #24]
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	695b      	ldr	r3, [r3, #20]
 800a3e0:	61bb      	str	r3, [r7, #24]
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	699b      	ldr	r3, [r3, #24]
 800a3e8:	61bb      	str	r3, [r7, #24]
 800a3ea:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	681a      	ldr	r2, [r3, #0]
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a3fa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a3fc:	b662      	cpsie	i
}
 800a3fe:	e035      	b.n	800a46c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a404:	2b02      	cmp	r3, #2
 800a406:	d11e      	bne.n	800a446 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	681a      	ldr	r2, [r3, #0]
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a416:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a418:	b672      	cpsid	i
}
 800a41a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a41c:	2300      	movs	r3, #0
 800a41e:	617b      	str	r3, [r7, #20]
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	695b      	ldr	r3, [r3, #20]
 800a426:	617b      	str	r3, [r7, #20]
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	699b      	ldr	r3, [r3, #24]
 800a42e:	617b      	str	r3, [r7, #20]
 800a430:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	681a      	ldr	r2, [r3, #0]
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a440:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a442:	b662      	cpsie	i
}
 800a444:	e012      	b.n	800a46c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	681a      	ldr	r2, [r3, #0]
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a454:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a456:	2300      	movs	r3, #0
 800a458:	613b      	str	r3, [r7, #16]
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	695b      	ldr	r3, [r3, #20]
 800a460:	613b      	str	r3, [r7, #16]
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	699b      	ldr	r3, [r3, #24]
 800a468:	613b      	str	r3, [r7, #16]
 800a46a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800a46c:	e166      	b.n	800a73c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a472:	2b03      	cmp	r3, #3
 800a474:	f200 811f 	bhi.w	800a6b6 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a47c:	2b01      	cmp	r3, #1
 800a47e:	d123      	bne.n	800a4c8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a480:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a482:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a484:	68f8      	ldr	r0, [r7, #12]
 800a486:	f000 fd39 	bl	800aefc <I2C_WaitOnRXNEFlagUntilTimeout>
 800a48a:	4603      	mov	r3, r0
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d001      	beq.n	800a494 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800a490:	2301      	movs	r3, #1
 800a492:	e167      	b.n	800a764 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	681b      	ldr	r3, [r3, #0]
 800a498:	691a      	ldr	r2, [r3, #16]
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a49e:	b2d2      	uxtb	r2, r2
 800a4a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4a6:	1c5a      	adds	r2, r3, #1
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a4ac:	68fb      	ldr	r3, [r7, #12]
 800a4ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4b0:	3b01      	subs	r3, #1
 800a4b2:	b29a      	uxth	r2, r3
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4bc:	b29b      	uxth	r3, r3
 800a4be:	3b01      	subs	r3, #1
 800a4c0:	b29a      	uxth	r2, r3
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a4c6:	e139      	b.n	800a73c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4cc:	2b02      	cmp	r3, #2
 800a4ce:	d152      	bne.n	800a576 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d2:	9300      	str	r3, [sp, #0]
 800a4d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	4906      	ldr	r1, [pc, #24]	; (800a4f4 <HAL_I2C_Mem_Read+0x24c>)
 800a4da:	68f8      	ldr	r0, [r7, #12]
 800a4dc:	f000 fb64 	bl	800aba8 <I2C_WaitOnFlagUntilTimeout>
 800a4e0:	4603      	mov	r3, r0
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d008      	beq.n	800a4f8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800a4e6:	2301      	movs	r3, #1
 800a4e8:	e13c      	b.n	800a764 <HAL_I2C_Mem_Read+0x4bc>
 800a4ea:	bf00      	nop
 800a4ec:	00100002 	.word	0x00100002
 800a4f0:	ffff0000 	.word	0xffff0000
 800a4f4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800a4f8:	b672      	cpsid	i
}
 800a4fa:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	681a      	ldr	r2, [r3, #0]
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a50a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	691a      	ldr	r2, [r3, #16]
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a516:	b2d2      	uxtb	r2, r2
 800a518:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a51e:	1c5a      	adds	r2, r3, #1
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a528:	3b01      	subs	r3, #1
 800a52a:	b29a      	uxth	r2, r3
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a534:	b29b      	uxth	r3, r3
 800a536:	3b01      	subs	r3, #1
 800a538:	b29a      	uxth	r2, r3
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a53e:	b662      	cpsie	i
}
 800a540:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	691a      	ldr	r2, [r3, #16]
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a54c:	b2d2      	uxtb	r2, r2
 800a54e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a554:	1c5a      	adds	r2, r3, #1
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a55e:	3b01      	subs	r3, #1
 800a560:	b29a      	uxth	r2, r3
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a56a:	b29b      	uxth	r3, r3
 800a56c:	3b01      	subs	r3, #1
 800a56e:	b29a      	uxth	r2, r3
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a574:	e0e2      	b.n	800a73c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a578:	9300      	str	r3, [sp, #0]
 800a57a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a57c:	2200      	movs	r2, #0
 800a57e:	497b      	ldr	r1, [pc, #492]	; (800a76c <HAL_I2C_Mem_Read+0x4c4>)
 800a580:	68f8      	ldr	r0, [r7, #12]
 800a582:	f000 fb11 	bl	800aba8 <I2C_WaitOnFlagUntilTimeout>
 800a586:	4603      	mov	r3, r0
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d001      	beq.n	800a590 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800a58c:	2301      	movs	r3, #1
 800a58e:	e0e9      	b.n	800a764 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	681a      	ldr	r2, [r3, #0]
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a59e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a5a0:	b672      	cpsid	i
}
 800a5a2:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	691a      	ldr	r2, [r3, #16]
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ae:	b2d2      	uxtb	r2, r2
 800a5b0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b6:	1c5a      	adds	r2, r3, #1
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5c0:	3b01      	subs	r3, #1
 800a5c2:	b29a      	uxth	r2, r3
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5cc:	b29b      	uxth	r3, r3
 800a5ce:	3b01      	subs	r3, #1
 800a5d0:	b29a      	uxth	r2, r3
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800a5d6:	4b66      	ldr	r3, [pc, #408]	; (800a770 <HAL_I2C_Mem_Read+0x4c8>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	08db      	lsrs	r3, r3, #3
 800a5dc:	4a65      	ldr	r2, [pc, #404]	; (800a774 <HAL_I2C_Mem_Read+0x4cc>)
 800a5de:	fba2 2303 	umull	r2, r3, r2, r3
 800a5e2:	0a1a      	lsrs	r2, r3, #8
 800a5e4:	4613      	mov	r3, r2
 800a5e6:	009b      	lsls	r3, r3, #2
 800a5e8:	4413      	add	r3, r2
 800a5ea:	00da      	lsls	r2, r3, #3
 800a5ec:	1ad3      	subs	r3, r2, r3
 800a5ee:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800a5f0:	6a3b      	ldr	r3, [r7, #32]
 800a5f2:	3b01      	subs	r3, #1
 800a5f4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800a5f6:	6a3b      	ldr	r3, [r7, #32]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d118      	bne.n	800a62e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	2200      	movs	r2, #0
 800a600:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	2220      	movs	r2, #32
 800a606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	2200      	movs	r2, #0
 800a60e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a616:	f043 0220 	orr.w	r2, r3, #32
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800a61e:	b662      	cpsie	i
}
 800a620:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	2200      	movs	r2, #0
 800a626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800a62a:	2301      	movs	r3, #1
 800a62c:	e09a      	b.n	800a764 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	695b      	ldr	r3, [r3, #20]
 800a634:	f003 0304 	and.w	r3, r3, #4
 800a638:	2b04      	cmp	r3, #4
 800a63a:	d1d9      	bne.n	800a5f0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	681a      	ldr	r2, [r3, #0]
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	681b      	ldr	r3, [r3, #0]
 800a646:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a64a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	691a      	ldr	r2, [r3, #16]
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a656:	b2d2      	uxtb	r2, r2
 800a658:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a65e:	1c5a      	adds	r2, r3, #1
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a668:	3b01      	subs	r3, #1
 800a66a:	b29a      	uxth	r2, r3
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a674:	b29b      	uxth	r3, r3
 800a676:	3b01      	subs	r3, #1
 800a678:	b29a      	uxth	r2, r3
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a67e:	b662      	cpsie	i
}
 800a680:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	681b      	ldr	r3, [r3, #0]
 800a686:	691a      	ldr	r2, [r3, #16]
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a68c:	b2d2      	uxtb	r2, r2
 800a68e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a694:	1c5a      	adds	r2, r3, #1
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a69e:	3b01      	subs	r3, #1
 800a6a0:	b29a      	uxth	r2, r3
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6aa:	b29b      	uxth	r3, r3
 800a6ac:	3b01      	subs	r3, #1
 800a6ae:	b29a      	uxth	r2, r3
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a6b4:	e042      	b.n	800a73c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a6b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a6b8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a6ba:	68f8      	ldr	r0, [r7, #12]
 800a6bc:	f000 fc1e 	bl	800aefc <I2C_WaitOnRXNEFlagUntilTimeout>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d001      	beq.n	800a6ca <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800a6c6:	2301      	movs	r3, #1
 800a6c8:	e04c      	b.n	800a764 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	691a      	ldr	r2, [r3, #16]
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6d4:	b2d2      	uxtb	r2, r2
 800a6d6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6dc:	1c5a      	adds	r2, r3, #1
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6e6:	3b01      	subs	r3, #1
 800a6e8:	b29a      	uxth	r2, r3
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6f2:	b29b      	uxth	r3, r3
 800a6f4:	3b01      	subs	r3, #1
 800a6f6:	b29a      	uxth	r2, r3
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	695b      	ldr	r3, [r3, #20]
 800a702:	f003 0304 	and.w	r3, r3, #4
 800a706:	2b04      	cmp	r3, #4
 800a708:	d118      	bne.n	800a73c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a70a:	68fb      	ldr	r3, [r7, #12]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	691a      	ldr	r2, [r3, #16]
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a714:	b2d2      	uxtb	r2, r2
 800a716:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a71c:	1c5a      	adds	r2, r3, #1
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a726:	3b01      	subs	r3, #1
 800a728:	b29a      	uxth	r2, r3
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a72e:	68fb      	ldr	r3, [r7, #12]
 800a730:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a732:	b29b      	uxth	r3, r3
 800a734:	3b01      	subs	r3, #1
 800a736:	b29a      	uxth	r2, r3
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a740:	2b00      	cmp	r3, #0
 800a742:	f47f ae94 	bne.w	800a46e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	2220      	movs	r2, #32
 800a74a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	2200      	movs	r2, #0
 800a752:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	2200      	movs	r2, #0
 800a75a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a75e:	2300      	movs	r3, #0
 800a760:	e000      	b.n	800a764 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800a762:	2302      	movs	r3, #2
  }
}
 800a764:	4618      	mov	r0, r3
 800a766:	3728      	adds	r7, #40	; 0x28
 800a768:	46bd      	mov	sp, r7
 800a76a:	bd80      	pop	{r7, pc}
 800a76c:	00010004 	.word	0x00010004
 800a770:	200009b4 	.word	0x200009b4
 800a774:	14f8b589 	.word	0x14f8b589

0800a778 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a778:	b480      	push	{r7}
 800a77a:	b083      	sub	sp, #12
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a786:	b2db      	uxtb	r3, r3
}
 800a788:	4618      	mov	r0, r3
 800a78a:	370c      	adds	r7, #12
 800a78c:	46bd      	mov	sp, r7
 800a78e:	bc80      	pop	{r7}
 800a790:	4770      	bx	lr

0800a792 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800a792:	b480      	push	{r7}
 800a794:	b083      	sub	sp, #12
 800a796:	af00      	add	r7, sp, #0
 800a798:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	370c      	adds	r7, #12
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bc80      	pop	{r7}
 800a7a6:	4770      	bx	lr

0800a7a8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a7a8:	b580      	push	{r7, lr}
 800a7aa:	b088      	sub	sp, #32
 800a7ac:	af02      	add	r7, sp, #8
 800a7ae:	60f8      	str	r0, [r7, #12]
 800a7b0:	607a      	str	r2, [r7, #4]
 800a7b2:	603b      	str	r3, [r7, #0]
 800a7b4:	460b      	mov	r3, r1
 800a7b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7bc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a7be:	697b      	ldr	r3, [r7, #20]
 800a7c0:	2b08      	cmp	r3, #8
 800a7c2:	d006      	beq.n	800a7d2 <I2C_MasterRequestWrite+0x2a>
 800a7c4:	697b      	ldr	r3, [r7, #20]
 800a7c6:	2b01      	cmp	r3, #1
 800a7c8:	d003      	beq.n	800a7d2 <I2C_MasterRequestWrite+0x2a>
 800a7ca:	697b      	ldr	r3, [r7, #20]
 800a7cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a7d0:	d108      	bne.n	800a7e4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	681a      	ldr	r2, [r3, #0]
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a7e0:	601a      	str	r2, [r3, #0]
 800a7e2:	e00b      	b.n	800a7fc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7e8:	2b12      	cmp	r3, #18
 800a7ea:	d107      	bne.n	800a7fc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	681a      	ldr	r2, [r3, #0]
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a7fa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	9300      	str	r3, [sp, #0]
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	2200      	movs	r2, #0
 800a804:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a808:	68f8      	ldr	r0, [r7, #12]
 800a80a:	f000 f9cd 	bl	800aba8 <I2C_WaitOnFlagUntilTimeout>
 800a80e:	4603      	mov	r3, r0
 800a810:	2b00      	cmp	r3, #0
 800a812:	d00d      	beq.n	800a830 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	681b      	ldr	r3, [r3, #0]
 800a81a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a81e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a822:	d103      	bne.n	800a82c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a82a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a82c:	2303      	movs	r3, #3
 800a82e:	e035      	b.n	800a89c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	691b      	ldr	r3, [r3, #16]
 800a834:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a838:	d108      	bne.n	800a84c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a83a:	897b      	ldrh	r3, [r7, #10]
 800a83c:	b2db      	uxtb	r3, r3
 800a83e:	461a      	mov	r2, r3
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a848:	611a      	str	r2, [r3, #16]
 800a84a:	e01b      	b.n	800a884 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a84c:	897b      	ldrh	r3, [r7, #10]
 800a84e:	11db      	asrs	r3, r3, #7
 800a850:	b2db      	uxtb	r3, r3
 800a852:	f003 0306 	and.w	r3, r3, #6
 800a856:	b2db      	uxtb	r3, r3
 800a858:	f063 030f 	orn	r3, r3, #15
 800a85c:	b2da      	uxtb	r2, r3
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a864:	683b      	ldr	r3, [r7, #0]
 800a866:	687a      	ldr	r2, [r7, #4]
 800a868:	490e      	ldr	r1, [pc, #56]	; (800a8a4 <I2C_MasterRequestWrite+0xfc>)
 800a86a:	68f8      	ldr	r0, [r7, #12]
 800a86c:	f000 fa16 	bl	800ac9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a870:	4603      	mov	r3, r0
 800a872:	2b00      	cmp	r3, #0
 800a874:	d001      	beq.n	800a87a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a876:	2301      	movs	r3, #1
 800a878:	e010      	b.n	800a89c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a87a:	897b      	ldrh	r3, [r7, #10]
 800a87c:	b2da      	uxtb	r2, r3
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	687a      	ldr	r2, [r7, #4]
 800a888:	4907      	ldr	r1, [pc, #28]	; (800a8a8 <I2C_MasterRequestWrite+0x100>)
 800a88a:	68f8      	ldr	r0, [r7, #12]
 800a88c:	f000 fa06 	bl	800ac9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a890:	4603      	mov	r3, r0
 800a892:	2b00      	cmp	r3, #0
 800a894:	d001      	beq.n	800a89a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a896:	2301      	movs	r3, #1
 800a898:	e000      	b.n	800a89c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a89a:	2300      	movs	r3, #0
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	3718      	adds	r7, #24
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	bd80      	pop	{r7, pc}
 800a8a4:	00010008 	.word	0x00010008
 800a8a8:	00010002 	.word	0x00010002

0800a8ac <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a8ac:	b580      	push	{r7, lr}
 800a8ae:	b088      	sub	sp, #32
 800a8b0:	af02      	add	r7, sp, #8
 800a8b2:	60f8      	str	r0, [r7, #12]
 800a8b4:	4608      	mov	r0, r1
 800a8b6:	4611      	mov	r1, r2
 800a8b8:	461a      	mov	r2, r3
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	817b      	strh	r3, [r7, #10]
 800a8be:	460b      	mov	r3, r1
 800a8c0:	813b      	strh	r3, [r7, #8]
 800a8c2:	4613      	mov	r3, r2
 800a8c4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	681a      	ldr	r2, [r3, #0]
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a8d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a8d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8d8:	9300      	str	r3, [sp, #0]
 800a8da:	6a3b      	ldr	r3, [r7, #32]
 800a8dc:	2200      	movs	r2, #0
 800a8de:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a8e2:	68f8      	ldr	r0, [r7, #12]
 800a8e4:	f000 f960 	bl	800aba8 <I2C_WaitOnFlagUntilTimeout>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	d00d      	beq.n	800a90a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8fc:	d103      	bne.n	800a906 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a904:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a906:	2303      	movs	r3, #3
 800a908:	e05f      	b.n	800a9ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a90a:	897b      	ldrh	r3, [r7, #10]
 800a90c:	b2db      	uxtb	r3, r3
 800a90e:	461a      	mov	r2, r3
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a918:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a91a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a91c:	6a3a      	ldr	r2, [r7, #32]
 800a91e:	492d      	ldr	r1, [pc, #180]	; (800a9d4 <I2C_RequestMemoryWrite+0x128>)
 800a920:	68f8      	ldr	r0, [r7, #12]
 800a922:	f000 f9bb 	bl	800ac9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a926:	4603      	mov	r3, r0
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d001      	beq.n	800a930 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a92c:	2301      	movs	r3, #1
 800a92e:	e04c      	b.n	800a9ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a930:	2300      	movs	r3, #0
 800a932:	617b      	str	r3, [r7, #20]
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	695b      	ldr	r3, [r3, #20]
 800a93a:	617b      	str	r3, [r7, #20]
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	699b      	ldr	r3, [r3, #24]
 800a942:	617b      	str	r3, [r7, #20]
 800a944:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a946:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a948:	6a39      	ldr	r1, [r7, #32]
 800a94a:	68f8      	ldr	r0, [r7, #12]
 800a94c:	f000 fa46 	bl	800addc <I2C_WaitOnTXEFlagUntilTimeout>
 800a950:	4603      	mov	r3, r0
 800a952:	2b00      	cmp	r3, #0
 800a954:	d00d      	beq.n	800a972 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a95a:	2b04      	cmp	r3, #4
 800a95c:	d107      	bne.n	800a96e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	681a      	ldr	r2, [r3, #0]
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a96c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a96e:	2301      	movs	r3, #1
 800a970:	e02b      	b.n	800a9ca <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a972:	88fb      	ldrh	r3, [r7, #6]
 800a974:	2b01      	cmp	r3, #1
 800a976:	d105      	bne.n	800a984 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a978:	893b      	ldrh	r3, [r7, #8]
 800a97a:	b2da      	uxtb	r2, r3
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	611a      	str	r2, [r3, #16]
 800a982:	e021      	b.n	800a9c8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a984:	893b      	ldrh	r3, [r7, #8]
 800a986:	0a1b      	lsrs	r3, r3, #8
 800a988:	b29b      	uxth	r3, r3
 800a98a:	b2da      	uxtb	r2, r3
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a992:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a994:	6a39      	ldr	r1, [r7, #32]
 800a996:	68f8      	ldr	r0, [r7, #12]
 800a998:	f000 fa20 	bl	800addc <I2C_WaitOnTXEFlagUntilTimeout>
 800a99c:	4603      	mov	r3, r0
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d00d      	beq.n	800a9be <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9a6:	2b04      	cmp	r3, #4
 800a9a8:	d107      	bne.n	800a9ba <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	681a      	ldr	r2, [r3, #0]
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a9b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a9ba:	2301      	movs	r3, #1
 800a9bc:	e005      	b.n	800a9ca <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a9be:	893b      	ldrh	r3, [r7, #8]
 800a9c0:	b2da      	uxtb	r2, r3
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a9c8:	2300      	movs	r3, #0
}
 800a9ca:	4618      	mov	r0, r3
 800a9cc:	3718      	adds	r7, #24
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	bd80      	pop	{r7, pc}
 800a9d2:	bf00      	nop
 800a9d4:	00010002 	.word	0x00010002

0800a9d8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b088      	sub	sp, #32
 800a9dc:	af02      	add	r7, sp, #8
 800a9de:	60f8      	str	r0, [r7, #12]
 800a9e0:	4608      	mov	r0, r1
 800a9e2:	4611      	mov	r1, r2
 800a9e4:	461a      	mov	r2, r3
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	817b      	strh	r3, [r7, #10]
 800a9ea:	460b      	mov	r3, r1
 800a9ec:	813b      	strh	r3, [r7, #8]
 800a9ee:	4613      	mov	r3, r2
 800a9f0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	681a      	ldr	r2, [r3, #0]
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	681b      	ldr	r3, [r3, #0]
 800a9fc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800aa00:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	681b      	ldr	r3, [r3, #0]
 800aa06:	681a      	ldr	r2, [r3, #0]
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aa10:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800aa12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa14:	9300      	str	r3, [sp, #0]
 800aa16:	6a3b      	ldr	r3, [r7, #32]
 800aa18:	2200      	movs	r2, #0
 800aa1a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800aa1e:	68f8      	ldr	r0, [r7, #12]
 800aa20:	f000 f8c2 	bl	800aba8 <I2C_WaitOnFlagUntilTimeout>
 800aa24:	4603      	mov	r3, r0
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d00d      	beq.n	800aa46 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	681b      	ldr	r3, [r3, #0]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa38:	d103      	bne.n	800aa42 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa40:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800aa42:	2303      	movs	r3, #3
 800aa44:	e0aa      	b.n	800ab9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800aa46:	897b      	ldrh	r3, [r7, #10]
 800aa48:	b2db      	uxtb	r3, r3
 800aa4a:	461a      	mov	r2, r3
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800aa54:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800aa56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa58:	6a3a      	ldr	r2, [r7, #32]
 800aa5a:	4952      	ldr	r1, [pc, #328]	; (800aba4 <I2C_RequestMemoryRead+0x1cc>)
 800aa5c:	68f8      	ldr	r0, [r7, #12]
 800aa5e:	f000 f91d 	bl	800ac9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800aa62:	4603      	mov	r3, r0
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d001      	beq.n	800aa6c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800aa68:	2301      	movs	r3, #1
 800aa6a:	e097      	b.n	800ab9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aa6c:	2300      	movs	r3, #0
 800aa6e:	617b      	str	r3, [r7, #20]
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	695b      	ldr	r3, [r3, #20]
 800aa76:	617b      	str	r3, [r7, #20]
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	699b      	ldr	r3, [r3, #24]
 800aa7e:	617b      	str	r3, [r7, #20]
 800aa80:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aa82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa84:	6a39      	ldr	r1, [r7, #32]
 800aa86:	68f8      	ldr	r0, [r7, #12]
 800aa88:	f000 f9a8 	bl	800addc <I2C_WaitOnTXEFlagUntilTimeout>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d00d      	beq.n	800aaae <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa96:	2b04      	cmp	r3, #4
 800aa98:	d107      	bne.n	800aaaa <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	681a      	ldr	r2, [r3, #0]
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aaa8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800aaaa:	2301      	movs	r3, #1
 800aaac:	e076      	b.n	800ab9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800aaae:	88fb      	ldrh	r3, [r7, #6]
 800aab0:	2b01      	cmp	r3, #1
 800aab2:	d105      	bne.n	800aac0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800aab4:	893b      	ldrh	r3, [r7, #8]
 800aab6:	b2da      	uxtb	r2, r3
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	681b      	ldr	r3, [r3, #0]
 800aabc:	611a      	str	r2, [r3, #16]
 800aabe:	e021      	b.n	800ab04 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800aac0:	893b      	ldrh	r3, [r7, #8]
 800aac2:	0a1b      	lsrs	r3, r3, #8
 800aac4:	b29b      	uxth	r3, r3
 800aac6:	b2da      	uxtb	r2, r3
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aace:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aad0:	6a39      	ldr	r1, [r7, #32]
 800aad2:	68f8      	ldr	r0, [r7, #12]
 800aad4:	f000 f982 	bl	800addc <I2C_WaitOnTXEFlagUntilTimeout>
 800aad8:	4603      	mov	r3, r0
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d00d      	beq.n	800aafa <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aae2:	2b04      	cmp	r3, #4
 800aae4:	d107      	bne.n	800aaf6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	681a      	ldr	r2, [r3, #0]
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aaf4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800aaf6:	2301      	movs	r3, #1
 800aaf8:	e050      	b.n	800ab9c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800aafa:	893b      	ldrh	r3, [r7, #8]
 800aafc:	b2da      	uxtb	r2, r3
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ab04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab06:	6a39      	ldr	r1, [r7, #32]
 800ab08:	68f8      	ldr	r0, [r7, #12]
 800ab0a:	f000 f967 	bl	800addc <I2C_WaitOnTXEFlagUntilTimeout>
 800ab0e:	4603      	mov	r3, r0
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d00d      	beq.n	800ab30 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab18:	2b04      	cmp	r3, #4
 800ab1a:	d107      	bne.n	800ab2c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	681a      	ldr	r2, [r3, #0]
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ab2a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ab2c:	2301      	movs	r3, #1
 800ab2e:	e035      	b.n	800ab9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	681a      	ldr	r2, [r3, #0]
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ab3e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ab40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab42:	9300      	str	r3, [sp, #0]
 800ab44:	6a3b      	ldr	r3, [r7, #32]
 800ab46:	2200      	movs	r2, #0
 800ab48:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ab4c:	68f8      	ldr	r0, [r7, #12]
 800ab4e:	f000 f82b 	bl	800aba8 <I2C_WaitOnFlagUntilTimeout>
 800ab52:	4603      	mov	r3, r0
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d00d      	beq.n	800ab74 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab66:	d103      	bne.n	800ab70 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ab6e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ab70:	2303      	movs	r3, #3
 800ab72:	e013      	b.n	800ab9c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800ab74:	897b      	ldrh	r3, [r7, #10]
 800ab76:	b2db      	uxtb	r3, r3
 800ab78:	f043 0301 	orr.w	r3, r3, #1
 800ab7c:	b2da      	uxtb	r2, r3
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ab84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab86:	6a3a      	ldr	r2, [r7, #32]
 800ab88:	4906      	ldr	r1, [pc, #24]	; (800aba4 <I2C_RequestMemoryRead+0x1cc>)
 800ab8a:	68f8      	ldr	r0, [r7, #12]
 800ab8c:	f000 f886 	bl	800ac9c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ab90:	4603      	mov	r3, r0
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d001      	beq.n	800ab9a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800ab96:	2301      	movs	r3, #1
 800ab98:	e000      	b.n	800ab9c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800ab9a:	2300      	movs	r3, #0
}
 800ab9c:	4618      	mov	r0, r3
 800ab9e:	3718      	adds	r7, #24
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}
 800aba4:	00010002 	.word	0x00010002

0800aba8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800aba8:	b580      	push	{r7, lr}
 800abaa:	b084      	sub	sp, #16
 800abac:	af00      	add	r7, sp, #0
 800abae:	60f8      	str	r0, [r7, #12]
 800abb0:	60b9      	str	r1, [r7, #8]
 800abb2:	603b      	str	r3, [r7, #0]
 800abb4:	4613      	mov	r3, r2
 800abb6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800abb8:	e048      	b.n	800ac4c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abc0:	d044      	beq.n	800ac4c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800abc2:	f7fe f9e3 	bl	8008f8c <HAL_GetTick>
 800abc6:	4602      	mov	r2, r0
 800abc8:	69bb      	ldr	r3, [r7, #24]
 800abca:	1ad3      	subs	r3, r2, r3
 800abcc:	683a      	ldr	r2, [r7, #0]
 800abce:	429a      	cmp	r2, r3
 800abd0:	d302      	bcc.n	800abd8 <I2C_WaitOnFlagUntilTimeout+0x30>
 800abd2:	683b      	ldr	r3, [r7, #0]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d139      	bne.n	800ac4c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800abd8:	68bb      	ldr	r3, [r7, #8]
 800abda:	0c1b      	lsrs	r3, r3, #16
 800abdc:	b2db      	uxtb	r3, r3
 800abde:	2b01      	cmp	r3, #1
 800abe0:	d10d      	bne.n	800abfe <I2C_WaitOnFlagUntilTimeout+0x56>
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	695b      	ldr	r3, [r3, #20]
 800abe8:	43da      	mvns	r2, r3
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	4013      	ands	r3, r2
 800abee:	b29b      	uxth	r3, r3
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	bf0c      	ite	eq
 800abf4:	2301      	moveq	r3, #1
 800abf6:	2300      	movne	r3, #0
 800abf8:	b2db      	uxtb	r3, r3
 800abfa:	461a      	mov	r2, r3
 800abfc:	e00c      	b.n	800ac18 <I2C_WaitOnFlagUntilTimeout+0x70>
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	699b      	ldr	r3, [r3, #24]
 800ac04:	43da      	mvns	r2, r3
 800ac06:	68bb      	ldr	r3, [r7, #8]
 800ac08:	4013      	ands	r3, r2
 800ac0a:	b29b      	uxth	r3, r3
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	bf0c      	ite	eq
 800ac10:	2301      	moveq	r3, #1
 800ac12:	2300      	movne	r3, #0
 800ac14:	b2db      	uxtb	r3, r3
 800ac16:	461a      	mov	r2, r3
 800ac18:	79fb      	ldrb	r3, [r7, #7]
 800ac1a:	429a      	cmp	r2, r3
 800ac1c:	d116      	bne.n	800ac4c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	2200      	movs	r2, #0
 800ac22:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	2220      	movs	r2, #32
 800ac28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	2200      	movs	r2, #0
 800ac30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac38:	f043 0220 	orr.w	r2, r3, #32
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	2200      	movs	r2, #0
 800ac44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800ac48:	2301      	movs	r3, #1
 800ac4a:	e023      	b.n	800ac94 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ac4c:	68bb      	ldr	r3, [r7, #8]
 800ac4e:	0c1b      	lsrs	r3, r3, #16
 800ac50:	b2db      	uxtb	r3, r3
 800ac52:	2b01      	cmp	r3, #1
 800ac54:	d10d      	bne.n	800ac72 <I2C_WaitOnFlagUntilTimeout+0xca>
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	695b      	ldr	r3, [r3, #20]
 800ac5c:	43da      	mvns	r2, r3
 800ac5e:	68bb      	ldr	r3, [r7, #8]
 800ac60:	4013      	ands	r3, r2
 800ac62:	b29b      	uxth	r3, r3
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	bf0c      	ite	eq
 800ac68:	2301      	moveq	r3, #1
 800ac6a:	2300      	movne	r3, #0
 800ac6c:	b2db      	uxtb	r3, r3
 800ac6e:	461a      	mov	r2, r3
 800ac70:	e00c      	b.n	800ac8c <I2C_WaitOnFlagUntilTimeout+0xe4>
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	699b      	ldr	r3, [r3, #24]
 800ac78:	43da      	mvns	r2, r3
 800ac7a:	68bb      	ldr	r3, [r7, #8]
 800ac7c:	4013      	ands	r3, r2
 800ac7e:	b29b      	uxth	r3, r3
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	bf0c      	ite	eq
 800ac84:	2301      	moveq	r3, #1
 800ac86:	2300      	movne	r3, #0
 800ac88:	b2db      	uxtb	r3, r3
 800ac8a:	461a      	mov	r2, r3
 800ac8c:	79fb      	ldrb	r3, [r7, #7]
 800ac8e:	429a      	cmp	r2, r3
 800ac90:	d093      	beq.n	800abba <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ac92:	2300      	movs	r3, #0
}
 800ac94:	4618      	mov	r0, r3
 800ac96:	3710      	adds	r7, #16
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}

0800ac9c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b084      	sub	sp, #16
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	60f8      	str	r0, [r7, #12]
 800aca4:	60b9      	str	r1, [r7, #8]
 800aca6:	607a      	str	r2, [r7, #4]
 800aca8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800acaa:	e071      	b.n	800ad90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	695b      	ldr	r3, [r3, #20]
 800acb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800acb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800acba:	d123      	bne.n	800ad04 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	681a      	ldr	r2, [r3, #0]
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800acca:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800acd4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	2200      	movs	r2, #0
 800acda:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	2220      	movs	r2, #32
 800ace0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	2200      	movs	r2, #0
 800ace8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800acec:	68fb      	ldr	r3, [r7, #12]
 800acee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acf0:	f043 0204 	orr.w	r2, r3, #4
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	2200      	movs	r2, #0
 800acfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ad00:	2301      	movs	r3, #1
 800ad02:	e067      	b.n	800add4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad0a:	d041      	beq.n	800ad90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad0c:	f7fe f93e 	bl	8008f8c <HAL_GetTick>
 800ad10:	4602      	mov	r2, r0
 800ad12:	683b      	ldr	r3, [r7, #0]
 800ad14:	1ad3      	subs	r3, r2, r3
 800ad16:	687a      	ldr	r2, [r7, #4]
 800ad18:	429a      	cmp	r2, r3
 800ad1a:	d302      	bcc.n	800ad22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800ad1c:	687b      	ldr	r3, [r7, #4]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d136      	bne.n	800ad90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800ad22:	68bb      	ldr	r3, [r7, #8]
 800ad24:	0c1b      	lsrs	r3, r3, #16
 800ad26:	b2db      	uxtb	r3, r3
 800ad28:	2b01      	cmp	r3, #1
 800ad2a:	d10c      	bne.n	800ad46 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	695b      	ldr	r3, [r3, #20]
 800ad32:	43da      	mvns	r2, r3
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	4013      	ands	r3, r2
 800ad38:	b29b      	uxth	r3, r3
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	bf14      	ite	ne
 800ad3e:	2301      	movne	r3, #1
 800ad40:	2300      	moveq	r3, #0
 800ad42:	b2db      	uxtb	r3, r3
 800ad44:	e00b      	b.n	800ad5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	699b      	ldr	r3, [r3, #24]
 800ad4c:	43da      	mvns	r2, r3
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	4013      	ands	r3, r2
 800ad52:	b29b      	uxth	r3, r3
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	bf14      	ite	ne
 800ad58:	2301      	movne	r3, #1
 800ad5a:	2300      	moveq	r3, #0
 800ad5c:	b2db      	uxtb	r3, r3
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d016      	beq.n	800ad90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	2200      	movs	r2, #0
 800ad66:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	2220      	movs	r2, #32
 800ad6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ad70:	68fb      	ldr	r3, [r7, #12]
 800ad72:	2200      	movs	r2, #0
 800ad74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad7c:	f043 0220 	orr.w	r2, r3, #32
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	2200      	movs	r2, #0
 800ad88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	e021      	b.n	800add4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ad90:	68bb      	ldr	r3, [r7, #8]
 800ad92:	0c1b      	lsrs	r3, r3, #16
 800ad94:	b2db      	uxtb	r3, r3
 800ad96:	2b01      	cmp	r3, #1
 800ad98:	d10c      	bne.n	800adb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	695b      	ldr	r3, [r3, #20]
 800ada0:	43da      	mvns	r2, r3
 800ada2:	68bb      	ldr	r3, [r7, #8]
 800ada4:	4013      	ands	r3, r2
 800ada6:	b29b      	uxth	r3, r3
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	bf14      	ite	ne
 800adac:	2301      	movne	r3, #1
 800adae:	2300      	moveq	r3, #0
 800adb0:	b2db      	uxtb	r3, r3
 800adb2:	e00b      	b.n	800adcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	699b      	ldr	r3, [r3, #24]
 800adba:	43da      	mvns	r2, r3
 800adbc:	68bb      	ldr	r3, [r7, #8]
 800adbe:	4013      	ands	r3, r2
 800adc0:	b29b      	uxth	r3, r3
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	bf14      	ite	ne
 800adc6:	2301      	movne	r3, #1
 800adc8:	2300      	moveq	r3, #0
 800adca:	b2db      	uxtb	r3, r3
 800adcc:	2b00      	cmp	r3, #0
 800adce:	f47f af6d 	bne.w	800acac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800add2:	2300      	movs	r3, #0
}
 800add4:	4618      	mov	r0, r3
 800add6:	3710      	adds	r7, #16
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}

0800addc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b084      	sub	sp, #16
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	60f8      	str	r0, [r7, #12]
 800ade4:	60b9      	str	r1, [r7, #8]
 800ade6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ade8:	e034      	b.n	800ae54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800adea:	68f8      	ldr	r0, [r7, #12]
 800adec:	f000 f8e3 	bl	800afb6 <I2C_IsAcknowledgeFailed>
 800adf0:	4603      	mov	r3, r0
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d001      	beq.n	800adfa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800adf6:	2301      	movs	r3, #1
 800adf8:	e034      	b.n	800ae64 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae00:	d028      	beq.n	800ae54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae02:	f7fe f8c3 	bl	8008f8c <HAL_GetTick>
 800ae06:	4602      	mov	r2, r0
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	1ad3      	subs	r3, r2, r3
 800ae0c:	68ba      	ldr	r2, [r7, #8]
 800ae0e:	429a      	cmp	r2, r3
 800ae10:	d302      	bcc.n	800ae18 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800ae12:	68bb      	ldr	r3, [r7, #8]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d11d      	bne.n	800ae54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	695b      	ldr	r3, [r3, #20]
 800ae1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae22:	2b80      	cmp	r3, #128	; 0x80
 800ae24:	d016      	beq.n	800ae54 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	2200      	movs	r2, #0
 800ae2a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	2220      	movs	r2, #32
 800ae30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	2200      	movs	r2, #0
 800ae38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae40:	f043 0220 	orr.w	r2, r3, #32
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800ae50:	2301      	movs	r3, #1
 800ae52:	e007      	b.n	800ae64 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	695b      	ldr	r3, [r3, #20]
 800ae5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae5e:	2b80      	cmp	r3, #128	; 0x80
 800ae60:	d1c3      	bne.n	800adea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800ae62:	2300      	movs	r3, #0
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	3710      	adds	r7, #16
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd80      	pop	{r7, pc}

0800ae6c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b084      	sub	sp, #16
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	60f8      	str	r0, [r7, #12]
 800ae74:	60b9      	str	r1, [r7, #8]
 800ae76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ae78:	e034      	b.n	800aee4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ae7a:	68f8      	ldr	r0, [r7, #12]
 800ae7c:	f000 f89b 	bl	800afb6 <I2C_IsAcknowledgeFailed>
 800ae80:	4603      	mov	r3, r0
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d001      	beq.n	800ae8a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ae86:	2301      	movs	r3, #1
 800ae88:	e034      	b.n	800aef4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae8a:	68bb      	ldr	r3, [r7, #8]
 800ae8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae90:	d028      	beq.n	800aee4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae92:	f7fe f87b 	bl	8008f8c <HAL_GetTick>
 800ae96:	4602      	mov	r2, r0
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	1ad3      	subs	r3, r2, r3
 800ae9c:	68ba      	ldr	r2, [r7, #8]
 800ae9e:	429a      	cmp	r2, r3
 800aea0:	d302      	bcc.n	800aea8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800aea2:	68bb      	ldr	r3, [r7, #8]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d11d      	bne.n	800aee4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	695b      	ldr	r3, [r3, #20]
 800aeae:	f003 0304 	and.w	r3, r3, #4
 800aeb2:	2b04      	cmp	r3, #4
 800aeb4:	d016      	beq.n	800aee4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	2200      	movs	r2, #0
 800aeba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	2220      	movs	r2, #32
 800aec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	2200      	movs	r2, #0
 800aec8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aed0:	f043 0220 	orr.w	r2, r3, #32
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	2200      	movs	r2, #0
 800aedc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800aee0:	2301      	movs	r3, #1
 800aee2:	e007      	b.n	800aef4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	695b      	ldr	r3, [r3, #20]
 800aeea:	f003 0304 	and.w	r3, r3, #4
 800aeee:	2b04      	cmp	r3, #4
 800aef0:	d1c3      	bne.n	800ae7a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800aef2:	2300      	movs	r3, #0
}
 800aef4:	4618      	mov	r0, r3
 800aef6:	3710      	adds	r7, #16
 800aef8:	46bd      	mov	sp, r7
 800aefa:	bd80      	pop	{r7, pc}

0800aefc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800aefc:	b580      	push	{r7, lr}
 800aefe:	b084      	sub	sp, #16
 800af00:	af00      	add	r7, sp, #0
 800af02:	60f8      	str	r0, [r7, #12]
 800af04:	60b9      	str	r1, [r7, #8]
 800af06:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800af08:	e049      	b.n	800af9e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	695b      	ldr	r3, [r3, #20]
 800af10:	f003 0310 	and.w	r3, r3, #16
 800af14:	2b10      	cmp	r3, #16
 800af16:	d119      	bne.n	800af4c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	f06f 0210 	mvn.w	r2, #16
 800af20:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	2200      	movs	r2, #0
 800af26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	2220      	movs	r2, #32
 800af2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	2200      	movs	r2, #0
 800af34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800af38:	68fb      	ldr	r3, [r7, #12]
 800af3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	2200      	movs	r2, #0
 800af44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800af48:	2301      	movs	r3, #1
 800af4a:	e030      	b.n	800afae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af4c:	f7fe f81e 	bl	8008f8c <HAL_GetTick>
 800af50:	4602      	mov	r2, r0
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	1ad3      	subs	r3, r2, r3
 800af56:	68ba      	ldr	r2, [r7, #8]
 800af58:	429a      	cmp	r2, r3
 800af5a:	d302      	bcc.n	800af62 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800af5c:	68bb      	ldr	r3, [r7, #8]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d11d      	bne.n	800af9e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800af62:	68fb      	ldr	r3, [r7, #12]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	695b      	ldr	r3, [r3, #20]
 800af68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af6c:	2b40      	cmp	r3, #64	; 0x40
 800af6e:	d016      	beq.n	800af9e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	2200      	movs	r2, #0
 800af74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	2220      	movs	r2, #32
 800af7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	2200      	movs	r2, #0
 800af82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af8a:	f043 0220 	orr.w	r2, r3, #32
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	2200      	movs	r2, #0
 800af96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800af9a:	2301      	movs	r3, #1
 800af9c:	e007      	b.n	800afae <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	695b      	ldr	r3, [r3, #20]
 800afa4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800afa8:	2b40      	cmp	r3, #64	; 0x40
 800afaa:	d1ae      	bne.n	800af0a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800afac:	2300      	movs	r3, #0
}
 800afae:	4618      	mov	r0, r3
 800afb0:	3710      	adds	r7, #16
 800afb2:	46bd      	mov	sp, r7
 800afb4:	bd80      	pop	{r7, pc}

0800afb6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800afb6:	b480      	push	{r7}
 800afb8:	b083      	sub	sp, #12
 800afba:	af00      	add	r7, sp, #0
 800afbc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	695b      	ldr	r3, [r3, #20]
 800afc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800afc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800afcc:	d11b      	bne.n	800b006 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800afd6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2200      	movs	r2, #0
 800afdc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	2220      	movs	r2, #32
 800afe2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	2200      	movs	r2, #0
 800afea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aff2:	f043 0204 	orr.w	r2, r3, #4
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	2200      	movs	r2, #0
 800affe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800b002:	2301      	movs	r3, #1
 800b004:	e000      	b.n	800b008 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b006:	2300      	movs	r3, #0
}
 800b008:	4618      	mov	r0, r3
 800b00a:	370c      	adds	r7, #12
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bc80      	pop	{r7}
 800b010:	4770      	bx	lr
	...

0800b014 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b086      	sub	sp, #24
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d101      	bne.n	800b026 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b022:	2301      	movs	r3, #1
 800b024:	e272      	b.n	800b50c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	f003 0301 	and.w	r3, r3, #1
 800b02e:	2b00      	cmp	r3, #0
 800b030:	f000 8087 	beq.w	800b142 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b034:	4b92      	ldr	r3, [pc, #584]	; (800b280 <HAL_RCC_OscConfig+0x26c>)
 800b036:	685b      	ldr	r3, [r3, #4]
 800b038:	f003 030c 	and.w	r3, r3, #12
 800b03c:	2b04      	cmp	r3, #4
 800b03e:	d00c      	beq.n	800b05a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800b040:	4b8f      	ldr	r3, [pc, #572]	; (800b280 <HAL_RCC_OscConfig+0x26c>)
 800b042:	685b      	ldr	r3, [r3, #4]
 800b044:	f003 030c 	and.w	r3, r3, #12
 800b048:	2b08      	cmp	r3, #8
 800b04a:	d112      	bne.n	800b072 <HAL_RCC_OscConfig+0x5e>
 800b04c:	4b8c      	ldr	r3, [pc, #560]	; (800b280 <HAL_RCC_OscConfig+0x26c>)
 800b04e:	685b      	ldr	r3, [r3, #4]
 800b050:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b054:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b058:	d10b      	bne.n	800b072 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b05a:	4b89      	ldr	r3, [pc, #548]	; (800b280 <HAL_RCC_OscConfig+0x26c>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b062:	2b00      	cmp	r3, #0
 800b064:	d06c      	beq.n	800b140 <HAL_RCC_OscConfig+0x12c>
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	685b      	ldr	r3, [r3, #4]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d168      	bne.n	800b140 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800b06e:	2301      	movs	r3, #1
 800b070:	e24c      	b.n	800b50c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	685b      	ldr	r3, [r3, #4]
 800b076:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b07a:	d106      	bne.n	800b08a <HAL_RCC_OscConfig+0x76>
 800b07c:	4b80      	ldr	r3, [pc, #512]	; (800b280 <HAL_RCC_OscConfig+0x26c>)
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	4a7f      	ldr	r2, [pc, #508]	; (800b280 <HAL_RCC_OscConfig+0x26c>)
 800b082:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b086:	6013      	str	r3, [r2, #0]
 800b088:	e02e      	b.n	800b0e8 <HAL_RCC_OscConfig+0xd4>
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	685b      	ldr	r3, [r3, #4]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d10c      	bne.n	800b0ac <HAL_RCC_OscConfig+0x98>
 800b092:	4b7b      	ldr	r3, [pc, #492]	; (800b280 <HAL_RCC_OscConfig+0x26c>)
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	4a7a      	ldr	r2, [pc, #488]	; (800b280 <HAL_RCC_OscConfig+0x26c>)
 800b098:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b09c:	6013      	str	r3, [r2, #0]
 800b09e:	4b78      	ldr	r3, [pc, #480]	; (800b280 <HAL_RCC_OscConfig+0x26c>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	4a77      	ldr	r2, [pc, #476]	; (800b280 <HAL_RCC_OscConfig+0x26c>)
 800b0a4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b0a8:	6013      	str	r3, [r2, #0]
 800b0aa:	e01d      	b.n	800b0e8 <HAL_RCC_OscConfig+0xd4>
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	685b      	ldr	r3, [r3, #4]
 800b0b0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b0b4:	d10c      	bne.n	800b0d0 <HAL_RCC_OscConfig+0xbc>
 800b0b6:	4b72      	ldr	r3, [pc, #456]	; (800b280 <HAL_RCC_OscConfig+0x26c>)
 800b0b8:	681b      	ldr	r3, [r3, #0]
 800b0ba:	4a71      	ldr	r2, [pc, #452]	; (800b280 <HAL_RCC_OscConfig+0x26c>)
 800b0bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b0c0:	6013      	str	r3, [r2, #0]
 800b0c2:	4b6f      	ldr	r3, [pc, #444]	; (800b280 <HAL_RCC_OscConfig+0x26c>)
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	4a6e      	ldr	r2, [pc, #440]	; (800b280 <HAL_RCC_OscConfig+0x26c>)
 800b0c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b0cc:	6013      	str	r3, [r2, #0]
 800b0ce:	e00b      	b.n	800b0e8 <HAL_RCC_OscConfig+0xd4>
 800b0d0:	4b6b      	ldr	r3, [pc, #428]	; (800b280 <HAL_RCC_OscConfig+0x26c>)
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	4a6a      	ldr	r2, [pc, #424]	; (800b280 <HAL_RCC_OscConfig+0x26c>)
 800b0d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b0da:	6013      	str	r3, [r2, #0]
 800b0dc:	4b68      	ldr	r3, [pc, #416]	; (800b280 <HAL_RCC_OscConfig+0x26c>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	4a67      	ldr	r2, [pc, #412]	; (800b280 <HAL_RCC_OscConfig+0x26c>)
 800b0e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b0e6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	685b      	ldr	r3, [r3, #4]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d013      	beq.n	800b118 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b0f0:	f7fd ff4c 	bl	8008f8c <HAL_GetTick>
 800b0f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b0f6:	e008      	b.n	800b10a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b0f8:	f7fd ff48 	bl	8008f8c <HAL_GetTick>
 800b0fc:	4602      	mov	r2, r0
 800b0fe:	693b      	ldr	r3, [r7, #16]
 800b100:	1ad3      	subs	r3, r2, r3
 800b102:	2b64      	cmp	r3, #100	; 0x64
 800b104:	d901      	bls.n	800b10a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800b106:	2303      	movs	r3, #3
 800b108:	e200      	b.n	800b50c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b10a:	4b5d      	ldr	r3, [pc, #372]	; (800b280 <HAL_RCC_OscConfig+0x26c>)
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b112:	2b00      	cmp	r3, #0
 800b114:	d0f0      	beq.n	800b0f8 <HAL_RCC_OscConfig+0xe4>
 800b116:	e014      	b.n	800b142 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b118:	f7fd ff38 	bl	8008f8c <HAL_GetTick>
 800b11c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b11e:	e008      	b.n	800b132 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b120:	f7fd ff34 	bl	8008f8c <HAL_GetTick>
 800b124:	4602      	mov	r2, r0
 800b126:	693b      	ldr	r3, [r7, #16]
 800b128:	1ad3      	subs	r3, r2, r3
 800b12a:	2b64      	cmp	r3, #100	; 0x64
 800b12c:	d901      	bls.n	800b132 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800b12e:	2303      	movs	r3, #3
 800b130:	e1ec      	b.n	800b50c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b132:	4b53      	ldr	r3, [pc, #332]	; (800b280 <HAL_RCC_OscConfig+0x26c>)
 800b134:	681b      	ldr	r3, [r3, #0]
 800b136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d1f0      	bne.n	800b120 <HAL_RCC_OscConfig+0x10c>
 800b13e:	e000      	b.n	800b142 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b140:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	f003 0302 	and.w	r3, r3, #2
 800b14a:	2b00      	cmp	r3, #0
 800b14c:	d063      	beq.n	800b216 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b14e:	4b4c      	ldr	r3, [pc, #304]	; (800b280 <HAL_RCC_OscConfig+0x26c>)
 800b150:	685b      	ldr	r3, [r3, #4]
 800b152:	f003 030c 	and.w	r3, r3, #12
 800b156:	2b00      	cmp	r3, #0
 800b158:	d00b      	beq.n	800b172 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800b15a:	4b49      	ldr	r3, [pc, #292]	; (800b280 <HAL_RCC_OscConfig+0x26c>)
 800b15c:	685b      	ldr	r3, [r3, #4]
 800b15e:	f003 030c 	and.w	r3, r3, #12
 800b162:	2b08      	cmp	r3, #8
 800b164:	d11c      	bne.n	800b1a0 <HAL_RCC_OscConfig+0x18c>
 800b166:	4b46      	ldr	r3, [pc, #280]	; (800b280 <HAL_RCC_OscConfig+0x26c>)
 800b168:	685b      	ldr	r3, [r3, #4]
 800b16a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d116      	bne.n	800b1a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b172:	4b43      	ldr	r3, [pc, #268]	; (800b280 <HAL_RCC_OscConfig+0x26c>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	f003 0302 	and.w	r3, r3, #2
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d005      	beq.n	800b18a <HAL_RCC_OscConfig+0x176>
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	691b      	ldr	r3, [r3, #16]
 800b182:	2b01      	cmp	r3, #1
 800b184:	d001      	beq.n	800b18a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800b186:	2301      	movs	r3, #1
 800b188:	e1c0      	b.n	800b50c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b18a:	4b3d      	ldr	r3, [pc, #244]	; (800b280 <HAL_RCC_OscConfig+0x26c>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	695b      	ldr	r3, [r3, #20]
 800b196:	00db      	lsls	r3, r3, #3
 800b198:	4939      	ldr	r1, [pc, #228]	; (800b280 <HAL_RCC_OscConfig+0x26c>)
 800b19a:	4313      	orrs	r3, r2
 800b19c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b19e:	e03a      	b.n	800b216 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	691b      	ldr	r3, [r3, #16]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d020      	beq.n	800b1ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b1a8:	4b36      	ldr	r3, [pc, #216]	; (800b284 <HAL_RCC_OscConfig+0x270>)
 800b1aa:	2201      	movs	r2, #1
 800b1ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b1ae:	f7fd feed 	bl	8008f8c <HAL_GetTick>
 800b1b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b1b4:	e008      	b.n	800b1c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b1b6:	f7fd fee9 	bl	8008f8c <HAL_GetTick>
 800b1ba:	4602      	mov	r2, r0
 800b1bc:	693b      	ldr	r3, [r7, #16]
 800b1be:	1ad3      	subs	r3, r2, r3
 800b1c0:	2b02      	cmp	r3, #2
 800b1c2:	d901      	bls.n	800b1c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800b1c4:	2303      	movs	r3, #3
 800b1c6:	e1a1      	b.n	800b50c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b1c8:	4b2d      	ldr	r3, [pc, #180]	; (800b280 <HAL_RCC_OscConfig+0x26c>)
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	f003 0302 	and.w	r3, r3, #2
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	d0f0      	beq.n	800b1b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b1d4:	4b2a      	ldr	r3, [pc, #168]	; (800b280 <HAL_RCC_OscConfig+0x26c>)
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	695b      	ldr	r3, [r3, #20]
 800b1e0:	00db      	lsls	r3, r3, #3
 800b1e2:	4927      	ldr	r1, [pc, #156]	; (800b280 <HAL_RCC_OscConfig+0x26c>)
 800b1e4:	4313      	orrs	r3, r2
 800b1e6:	600b      	str	r3, [r1, #0]
 800b1e8:	e015      	b.n	800b216 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b1ea:	4b26      	ldr	r3, [pc, #152]	; (800b284 <HAL_RCC_OscConfig+0x270>)
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b1f0:	f7fd fecc 	bl	8008f8c <HAL_GetTick>
 800b1f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b1f6:	e008      	b.n	800b20a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b1f8:	f7fd fec8 	bl	8008f8c <HAL_GetTick>
 800b1fc:	4602      	mov	r2, r0
 800b1fe:	693b      	ldr	r3, [r7, #16]
 800b200:	1ad3      	subs	r3, r2, r3
 800b202:	2b02      	cmp	r3, #2
 800b204:	d901      	bls.n	800b20a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800b206:	2303      	movs	r3, #3
 800b208:	e180      	b.n	800b50c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b20a:	4b1d      	ldr	r3, [pc, #116]	; (800b280 <HAL_RCC_OscConfig+0x26c>)
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	f003 0302 	and.w	r3, r3, #2
 800b212:	2b00      	cmp	r3, #0
 800b214:	d1f0      	bne.n	800b1f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	f003 0308 	and.w	r3, r3, #8
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d03a      	beq.n	800b298 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	699b      	ldr	r3, [r3, #24]
 800b226:	2b00      	cmp	r3, #0
 800b228:	d019      	beq.n	800b25e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b22a:	4b17      	ldr	r3, [pc, #92]	; (800b288 <HAL_RCC_OscConfig+0x274>)
 800b22c:	2201      	movs	r2, #1
 800b22e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b230:	f7fd feac 	bl	8008f8c <HAL_GetTick>
 800b234:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b236:	e008      	b.n	800b24a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b238:	f7fd fea8 	bl	8008f8c <HAL_GetTick>
 800b23c:	4602      	mov	r2, r0
 800b23e:	693b      	ldr	r3, [r7, #16]
 800b240:	1ad3      	subs	r3, r2, r3
 800b242:	2b02      	cmp	r3, #2
 800b244:	d901      	bls.n	800b24a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800b246:	2303      	movs	r3, #3
 800b248:	e160      	b.n	800b50c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b24a:	4b0d      	ldr	r3, [pc, #52]	; (800b280 <HAL_RCC_OscConfig+0x26c>)
 800b24c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b24e:	f003 0302 	and.w	r3, r3, #2
 800b252:	2b00      	cmp	r3, #0
 800b254:	d0f0      	beq.n	800b238 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800b256:	2001      	movs	r0, #1
 800b258:	f000 face 	bl	800b7f8 <RCC_Delay>
 800b25c:	e01c      	b.n	800b298 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b25e:	4b0a      	ldr	r3, [pc, #40]	; (800b288 <HAL_RCC_OscConfig+0x274>)
 800b260:	2200      	movs	r2, #0
 800b262:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b264:	f7fd fe92 	bl	8008f8c <HAL_GetTick>
 800b268:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b26a:	e00f      	b.n	800b28c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b26c:	f7fd fe8e 	bl	8008f8c <HAL_GetTick>
 800b270:	4602      	mov	r2, r0
 800b272:	693b      	ldr	r3, [r7, #16]
 800b274:	1ad3      	subs	r3, r2, r3
 800b276:	2b02      	cmp	r3, #2
 800b278:	d908      	bls.n	800b28c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800b27a:	2303      	movs	r3, #3
 800b27c:	e146      	b.n	800b50c <HAL_RCC_OscConfig+0x4f8>
 800b27e:	bf00      	nop
 800b280:	40021000 	.word	0x40021000
 800b284:	42420000 	.word	0x42420000
 800b288:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b28c:	4b92      	ldr	r3, [pc, #584]	; (800b4d8 <HAL_RCC_OscConfig+0x4c4>)
 800b28e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b290:	f003 0302 	and.w	r3, r3, #2
 800b294:	2b00      	cmp	r3, #0
 800b296:	d1e9      	bne.n	800b26c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	f003 0304 	and.w	r3, r3, #4
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	f000 80a6 	beq.w	800b3f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b2a6:	2300      	movs	r3, #0
 800b2a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b2aa:	4b8b      	ldr	r3, [pc, #556]	; (800b4d8 <HAL_RCC_OscConfig+0x4c4>)
 800b2ac:	69db      	ldr	r3, [r3, #28]
 800b2ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d10d      	bne.n	800b2d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b2b6:	4b88      	ldr	r3, [pc, #544]	; (800b4d8 <HAL_RCC_OscConfig+0x4c4>)
 800b2b8:	69db      	ldr	r3, [r3, #28]
 800b2ba:	4a87      	ldr	r2, [pc, #540]	; (800b4d8 <HAL_RCC_OscConfig+0x4c4>)
 800b2bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b2c0:	61d3      	str	r3, [r2, #28]
 800b2c2:	4b85      	ldr	r3, [pc, #532]	; (800b4d8 <HAL_RCC_OscConfig+0x4c4>)
 800b2c4:	69db      	ldr	r3, [r3, #28]
 800b2c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b2ca:	60bb      	str	r3, [r7, #8]
 800b2cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b2ce:	2301      	movs	r3, #1
 800b2d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b2d2:	4b82      	ldr	r3, [pc, #520]	; (800b4dc <HAL_RCC_OscConfig+0x4c8>)
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d118      	bne.n	800b310 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b2de:	4b7f      	ldr	r3, [pc, #508]	; (800b4dc <HAL_RCC_OscConfig+0x4c8>)
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	4a7e      	ldr	r2, [pc, #504]	; (800b4dc <HAL_RCC_OscConfig+0x4c8>)
 800b2e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b2e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b2ea:	f7fd fe4f 	bl	8008f8c <HAL_GetTick>
 800b2ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b2f0:	e008      	b.n	800b304 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b2f2:	f7fd fe4b 	bl	8008f8c <HAL_GetTick>
 800b2f6:	4602      	mov	r2, r0
 800b2f8:	693b      	ldr	r3, [r7, #16]
 800b2fa:	1ad3      	subs	r3, r2, r3
 800b2fc:	2b64      	cmp	r3, #100	; 0x64
 800b2fe:	d901      	bls.n	800b304 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800b300:	2303      	movs	r3, #3
 800b302:	e103      	b.n	800b50c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b304:	4b75      	ldr	r3, [pc, #468]	; (800b4dc <HAL_RCC_OscConfig+0x4c8>)
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b30c:	2b00      	cmp	r3, #0
 800b30e:	d0f0      	beq.n	800b2f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	68db      	ldr	r3, [r3, #12]
 800b314:	2b01      	cmp	r3, #1
 800b316:	d106      	bne.n	800b326 <HAL_RCC_OscConfig+0x312>
 800b318:	4b6f      	ldr	r3, [pc, #444]	; (800b4d8 <HAL_RCC_OscConfig+0x4c4>)
 800b31a:	6a1b      	ldr	r3, [r3, #32]
 800b31c:	4a6e      	ldr	r2, [pc, #440]	; (800b4d8 <HAL_RCC_OscConfig+0x4c4>)
 800b31e:	f043 0301 	orr.w	r3, r3, #1
 800b322:	6213      	str	r3, [r2, #32]
 800b324:	e02d      	b.n	800b382 <HAL_RCC_OscConfig+0x36e>
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	68db      	ldr	r3, [r3, #12]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d10c      	bne.n	800b348 <HAL_RCC_OscConfig+0x334>
 800b32e:	4b6a      	ldr	r3, [pc, #424]	; (800b4d8 <HAL_RCC_OscConfig+0x4c4>)
 800b330:	6a1b      	ldr	r3, [r3, #32]
 800b332:	4a69      	ldr	r2, [pc, #420]	; (800b4d8 <HAL_RCC_OscConfig+0x4c4>)
 800b334:	f023 0301 	bic.w	r3, r3, #1
 800b338:	6213      	str	r3, [r2, #32]
 800b33a:	4b67      	ldr	r3, [pc, #412]	; (800b4d8 <HAL_RCC_OscConfig+0x4c4>)
 800b33c:	6a1b      	ldr	r3, [r3, #32]
 800b33e:	4a66      	ldr	r2, [pc, #408]	; (800b4d8 <HAL_RCC_OscConfig+0x4c4>)
 800b340:	f023 0304 	bic.w	r3, r3, #4
 800b344:	6213      	str	r3, [r2, #32]
 800b346:	e01c      	b.n	800b382 <HAL_RCC_OscConfig+0x36e>
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	68db      	ldr	r3, [r3, #12]
 800b34c:	2b05      	cmp	r3, #5
 800b34e:	d10c      	bne.n	800b36a <HAL_RCC_OscConfig+0x356>
 800b350:	4b61      	ldr	r3, [pc, #388]	; (800b4d8 <HAL_RCC_OscConfig+0x4c4>)
 800b352:	6a1b      	ldr	r3, [r3, #32]
 800b354:	4a60      	ldr	r2, [pc, #384]	; (800b4d8 <HAL_RCC_OscConfig+0x4c4>)
 800b356:	f043 0304 	orr.w	r3, r3, #4
 800b35a:	6213      	str	r3, [r2, #32]
 800b35c:	4b5e      	ldr	r3, [pc, #376]	; (800b4d8 <HAL_RCC_OscConfig+0x4c4>)
 800b35e:	6a1b      	ldr	r3, [r3, #32]
 800b360:	4a5d      	ldr	r2, [pc, #372]	; (800b4d8 <HAL_RCC_OscConfig+0x4c4>)
 800b362:	f043 0301 	orr.w	r3, r3, #1
 800b366:	6213      	str	r3, [r2, #32]
 800b368:	e00b      	b.n	800b382 <HAL_RCC_OscConfig+0x36e>
 800b36a:	4b5b      	ldr	r3, [pc, #364]	; (800b4d8 <HAL_RCC_OscConfig+0x4c4>)
 800b36c:	6a1b      	ldr	r3, [r3, #32]
 800b36e:	4a5a      	ldr	r2, [pc, #360]	; (800b4d8 <HAL_RCC_OscConfig+0x4c4>)
 800b370:	f023 0301 	bic.w	r3, r3, #1
 800b374:	6213      	str	r3, [r2, #32]
 800b376:	4b58      	ldr	r3, [pc, #352]	; (800b4d8 <HAL_RCC_OscConfig+0x4c4>)
 800b378:	6a1b      	ldr	r3, [r3, #32]
 800b37a:	4a57      	ldr	r2, [pc, #348]	; (800b4d8 <HAL_RCC_OscConfig+0x4c4>)
 800b37c:	f023 0304 	bic.w	r3, r3, #4
 800b380:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	68db      	ldr	r3, [r3, #12]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d015      	beq.n	800b3b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b38a:	f7fd fdff 	bl	8008f8c <HAL_GetTick>
 800b38e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b390:	e00a      	b.n	800b3a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b392:	f7fd fdfb 	bl	8008f8c <HAL_GetTick>
 800b396:	4602      	mov	r2, r0
 800b398:	693b      	ldr	r3, [r7, #16]
 800b39a:	1ad3      	subs	r3, r2, r3
 800b39c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3a0:	4293      	cmp	r3, r2
 800b3a2:	d901      	bls.n	800b3a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800b3a4:	2303      	movs	r3, #3
 800b3a6:	e0b1      	b.n	800b50c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b3a8:	4b4b      	ldr	r3, [pc, #300]	; (800b4d8 <HAL_RCC_OscConfig+0x4c4>)
 800b3aa:	6a1b      	ldr	r3, [r3, #32]
 800b3ac:	f003 0302 	and.w	r3, r3, #2
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d0ee      	beq.n	800b392 <HAL_RCC_OscConfig+0x37e>
 800b3b4:	e014      	b.n	800b3e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b3b6:	f7fd fde9 	bl	8008f8c <HAL_GetTick>
 800b3ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b3bc:	e00a      	b.n	800b3d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b3be:	f7fd fde5 	bl	8008f8c <HAL_GetTick>
 800b3c2:	4602      	mov	r2, r0
 800b3c4:	693b      	ldr	r3, [r7, #16]
 800b3c6:	1ad3      	subs	r3, r2, r3
 800b3c8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b3cc:	4293      	cmp	r3, r2
 800b3ce:	d901      	bls.n	800b3d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800b3d0:	2303      	movs	r3, #3
 800b3d2:	e09b      	b.n	800b50c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b3d4:	4b40      	ldr	r3, [pc, #256]	; (800b4d8 <HAL_RCC_OscConfig+0x4c4>)
 800b3d6:	6a1b      	ldr	r3, [r3, #32]
 800b3d8:	f003 0302 	and.w	r3, r3, #2
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d1ee      	bne.n	800b3be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800b3e0:	7dfb      	ldrb	r3, [r7, #23]
 800b3e2:	2b01      	cmp	r3, #1
 800b3e4:	d105      	bne.n	800b3f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b3e6:	4b3c      	ldr	r3, [pc, #240]	; (800b4d8 <HAL_RCC_OscConfig+0x4c4>)
 800b3e8:	69db      	ldr	r3, [r3, #28]
 800b3ea:	4a3b      	ldr	r2, [pc, #236]	; (800b4d8 <HAL_RCC_OscConfig+0x4c4>)
 800b3ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b3f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	69db      	ldr	r3, [r3, #28]
 800b3f6:	2b00      	cmp	r3, #0
 800b3f8:	f000 8087 	beq.w	800b50a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b3fc:	4b36      	ldr	r3, [pc, #216]	; (800b4d8 <HAL_RCC_OscConfig+0x4c4>)
 800b3fe:	685b      	ldr	r3, [r3, #4]
 800b400:	f003 030c 	and.w	r3, r3, #12
 800b404:	2b08      	cmp	r3, #8
 800b406:	d061      	beq.n	800b4cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	69db      	ldr	r3, [r3, #28]
 800b40c:	2b02      	cmp	r3, #2
 800b40e:	d146      	bne.n	800b49e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b410:	4b33      	ldr	r3, [pc, #204]	; (800b4e0 <HAL_RCC_OscConfig+0x4cc>)
 800b412:	2200      	movs	r2, #0
 800b414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b416:	f7fd fdb9 	bl	8008f8c <HAL_GetTick>
 800b41a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b41c:	e008      	b.n	800b430 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b41e:	f7fd fdb5 	bl	8008f8c <HAL_GetTick>
 800b422:	4602      	mov	r2, r0
 800b424:	693b      	ldr	r3, [r7, #16]
 800b426:	1ad3      	subs	r3, r2, r3
 800b428:	2b02      	cmp	r3, #2
 800b42a:	d901      	bls.n	800b430 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800b42c:	2303      	movs	r3, #3
 800b42e:	e06d      	b.n	800b50c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b430:	4b29      	ldr	r3, [pc, #164]	; (800b4d8 <HAL_RCC_OscConfig+0x4c4>)
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d1f0      	bne.n	800b41e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	6a1b      	ldr	r3, [r3, #32]
 800b440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b444:	d108      	bne.n	800b458 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800b446:	4b24      	ldr	r3, [pc, #144]	; (800b4d8 <HAL_RCC_OscConfig+0x4c4>)
 800b448:	685b      	ldr	r3, [r3, #4]
 800b44a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	689b      	ldr	r3, [r3, #8]
 800b452:	4921      	ldr	r1, [pc, #132]	; (800b4d8 <HAL_RCC_OscConfig+0x4c4>)
 800b454:	4313      	orrs	r3, r2
 800b456:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b458:	4b1f      	ldr	r3, [pc, #124]	; (800b4d8 <HAL_RCC_OscConfig+0x4c4>)
 800b45a:	685b      	ldr	r3, [r3, #4]
 800b45c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	6a19      	ldr	r1, [r3, #32]
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b468:	430b      	orrs	r3, r1
 800b46a:	491b      	ldr	r1, [pc, #108]	; (800b4d8 <HAL_RCC_OscConfig+0x4c4>)
 800b46c:	4313      	orrs	r3, r2
 800b46e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b470:	4b1b      	ldr	r3, [pc, #108]	; (800b4e0 <HAL_RCC_OscConfig+0x4cc>)
 800b472:	2201      	movs	r2, #1
 800b474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b476:	f7fd fd89 	bl	8008f8c <HAL_GetTick>
 800b47a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b47c:	e008      	b.n	800b490 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b47e:	f7fd fd85 	bl	8008f8c <HAL_GetTick>
 800b482:	4602      	mov	r2, r0
 800b484:	693b      	ldr	r3, [r7, #16]
 800b486:	1ad3      	subs	r3, r2, r3
 800b488:	2b02      	cmp	r3, #2
 800b48a:	d901      	bls.n	800b490 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800b48c:	2303      	movs	r3, #3
 800b48e:	e03d      	b.n	800b50c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b490:	4b11      	ldr	r3, [pc, #68]	; (800b4d8 <HAL_RCC_OscConfig+0x4c4>)
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d0f0      	beq.n	800b47e <HAL_RCC_OscConfig+0x46a>
 800b49c:	e035      	b.n	800b50a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b49e:	4b10      	ldr	r3, [pc, #64]	; (800b4e0 <HAL_RCC_OscConfig+0x4cc>)
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b4a4:	f7fd fd72 	bl	8008f8c <HAL_GetTick>
 800b4a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b4aa:	e008      	b.n	800b4be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b4ac:	f7fd fd6e 	bl	8008f8c <HAL_GetTick>
 800b4b0:	4602      	mov	r2, r0
 800b4b2:	693b      	ldr	r3, [r7, #16]
 800b4b4:	1ad3      	subs	r3, r2, r3
 800b4b6:	2b02      	cmp	r3, #2
 800b4b8:	d901      	bls.n	800b4be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800b4ba:	2303      	movs	r3, #3
 800b4bc:	e026      	b.n	800b50c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b4be:	4b06      	ldr	r3, [pc, #24]	; (800b4d8 <HAL_RCC_OscConfig+0x4c4>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d1f0      	bne.n	800b4ac <HAL_RCC_OscConfig+0x498>
 800b4ca:	e01e      	b.n	800b50a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	69db      	ldr	r3, [r3, #28]
 800b4d0:	2b01      	cmp	r3, #1
 800b4d2:	d107      	bne.n	800b4e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800b4d4:	2301      	movs	r3, #1
 800b4d6:	e019      	b.n	800b50c <HAL_RCC_OscConfig+0x4f8>
 800b4d8:	40021000 	.word	0x40021000
 800b4dc:	40007000 	.word	0x40007000
 800b4e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800b4e4:	4b0b      	ldr	r3, [pc, #44]	; (800b514 <HAL_RCC_OscConfig+0x500>)
 800b4e6:	685b      	ldr	r3, [r3, #4]
 800b4e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	6a1b      	ldr	r3, [r3, #32]
 800b4f4:	429a      	cmp	r2, r3
 800b4f6:	d106      	bne.n	800b506 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800b4f8:	68fb      	ldr	r3, [r7, #12]
 800b4fa:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b502:	429a      	cmp	r2, r3
 800b504:	d001      	beq.n	800b50a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800b506:	2301      	movs	r3, #1
 800b508:	e000      	b.n	800b50c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800b50a:	2300      	movs	r3, #0
}
 800b50c:	4618      	mov	r0, r3
 800b50e:	3718      	adds	r7, #24
 800b510:	46bd      	mov	sp, r7
 800b512:	bd80      	pop	{r7, pc}
 800b514:	40021000 	.word	0x40021000

0800b518 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b084      	sub	sp, #16
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
 800b520:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d101      	bne.n	800b52c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b528:	2301      	movs	r3, #1
 800b52a:	e0d0      	b.n	800b6ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b52c:	4b6a      	ldr	r3, [pc, #424]	; (800b6d8 <HAL_RCC_ClockConfig+0x1c0>)
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	f003 0307 	and.w	r3, r3, #7
 800b534:	683a      	ldr	r2, [r7, #0]
 800b536:	429a      	cmp	r2, r3
 800b538:	d910      	bls.n	800b55c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b53a:	4b67      	ldr	r3, [pc, #412]	; (800b6d8 <HAL_RCC_ClockConfig+0x1c0>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	f023 0207 	bic.w	r2, r3, #7
 800b542:	4965      	ldr	r1, [pc, #404]	; (800b6d8 <HAL_RCC_ClockConfig+0x1c0>)
 800b544:	683b      	ldr	r3, [r7, #0]
 800b546:	4313      	orrs	r3, r2
 800b548:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b54a:	4b63      	ldr	r3, [pc, #396]	; (800b6d8 <HAL_RCC_ClockConfig+0x1c0>)
 800b54c:	681b      	ldr	r3, [r3, #0]
 800b54e:	f003 0307 	and.w	r3, r3, #7
 800b552:	683a      	ldr	r2, [r7, #0]
 800b554:	429a      	cmp	r2, r3
 800b556:	d001      	beq.n	800b55c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800b558:	2301      	movs	r3, #1
 800b55a:	e0b8      	b.n	800b6ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	f003 0302 	and.w	r3, r3, #2
 800b564:	2b00      	cmp	r3, #0
 800b566:	d020      	beq.n	800b5aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	f003 0304 	and.w	r3, r3, #4
 800b570:	2b00      	cmp	r3, #0
 800b572:	d005      	beq.n	800b580 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b574:	4b59      	ldr	r3, [pc, #356]	; (800b6dc <HAL_RCC_ClockConfig+0x1c4>)
 800b576:	685b      	ldr	r3, [r3, #4]
 800b578:	4a58      	ldr	r2, [pc, #352]	; (800b6dc <HAL_RCC_ClockConfig+0x1c4>)
 800b57a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b57e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	f003 0308 	and.w	r3, r3, #8
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d005      	beq.n	800b598 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b58c:	4b53      	ldr	r3, [pc, #332]	; (800b6dc <HAL_RCC_ClockConfig+0x1c4>)
 800b58e:	685b      	ldr	r3, [r3, #4]
 800b590:	4a52      	ldr	r2, [pc, #328]	; (800b6dc <HAL_RCC_ClockConfig+0x1c4>)
 800b592:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800b596:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b598:	4b50      	ldr	r3, [pc, #320]	; (800b6dc <HAL_RCC_ClockConfig+0x1c4>)
 800b59a:	685b      	ldr	r3, [r3, #4]
 800b59c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	689b      	ldr	r3, [r3, #8]
 800b5a4:	494d      	ldr	r1, [pc, #308]	; (800b6dc <HAL_RCC_ClockConfig+0x1c4>)
 800b5a6:	4313      	orrs	r3, r2
 800b5a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	f003 0301 	and.w	r3, r3, #1
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d040      	beq.n	800b638 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	685b      	ldr	r3, [r3, #4]
 800b5ba:	2b01      	cmp	r3, #1
 800b5bc:	d107      	bne.n	800b5ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b5be:	4b47      	ldr	r3, [pc, #284]	; (800b6dc <HAL_RCC_ClockConfig+0x1c4>)
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d115      	bne.n	800b5f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	e07f      	b.n	800b6ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	685b      	ldr	r3, [r3, #4]
 800b5d2:	2b02      	cmp	r3, #2
 800b5d4:	d107      	bne.n	800b5e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b5d6:	4b41      	ldr	r3, [pc, #260]	; (800b6dc <HAL_RCC_ClockConfig+0x1c4>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d109      	bne.n	800b5f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b5e2:	2301      	movs	r3, #1
 800b5e4:	e073      	b.n	800b6ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b5e6:	4b3d      	ldr	r3, [pc, #244]	; (800b6dc <HAL_RCC_ClockConfig+0x1c4>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	f003 0302 	and.w	r3, r3, #2
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d101      	bne.n	800b5f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b5f2:	2301      	movs	r3, #1
 800b5f4:	e06b      	b.n	800b6ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b5f6:	4b39      	ldr	r3, [pc, #228]	; (800b6dc <HAL_RCC_ClockConfig+0x1c4>)
 800b5f8:	685b      	ldr	r3, [r3, #4]
 800b5fa:	f023 0203 	bic.w	r2, r3, #3
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	685b      	ldr	r3, [r3, #4]
 800b602:	4936      	ldr	r1, [pc, #216]	; (800b6dc <HAL_RCC_ClockConfig+0x1c4>)
 800b604:	4313      	orrs	r3, r2
 800b606:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b608:	f7fd fcc0 	bl	8008f8c <HAL_GetTick>
 800b60c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b60e:	e00a      	b.n	800b626 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b610:	f7fd fcbc 	bl	8008f8c <HAL_GetTick>
 800b614:	4602      	mov	r2, r0
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	1ad3      	subs	r3, r2, r3
 800b61a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b61e:	4293      	cmp	r3, r2
 800b620:	d901      	bls.n	800b626 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b622:	2303      	movs	r3, #3
 800b624:	e053      	b.n	800b6ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b626:	4b2d      	ldr	r3, [pc, #180]	; (800b6dc <HAL_RCC_ClockConfig+0x1c4>)
 800b628:	685b      	ldr	r3, [r3, #4]
 800b62a:	f003 020c 	and.w	r2, r3, #12
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	685b      	ldr	r3, [r3, #4]
 800b632:	009b      	lsls	r3, r3, #2
 800b634:	429a      	cmp	r2, r3
 800b636:	d1eb      	bne.n	800b610 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b638:	4b27      	ldr	r3, [pc, #156]	; (800b6d8 <HAL_RCC_ClockConfig+0x1c0>)
 800b63a:	681b      	ldr	r3, [r3, #0]
 800b63c:	f003 0307 	and.w	r3, r3, #7
 800b640:	683a      	ldr	r2, [r7, #0]
 800b642:	429a      	cmp	r2, r3
 800b644:	d210      	bcs.n	800b668 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b646:	4b24      	ldr	r3, [pc, #144]	; (800b6d8 <HAL_RCC_ClockConfig+0x1c0>)
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	f023 0207 	bic.w	r2, r3, #7
 800b64e:	4922      	ldr	r1, [pc, #136]	; (800b6d8 <HAL_RCC_ClockConfig+0x1c0>)
 800b650:	683b      	ldr	r3, [r7, #0]
 800b652:	4313      	orrs	r3, r2
 800b654:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b656:	4b20      	ldr	r3, [pc, #128]	; (800b6d8 <HAL_RCC_ClockConfig+0x1c0>)
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	f003 0307 	and.w	r3, r3, #7
 800b65e:	683a      	ldr	r2, [r7, #0]
 800b660:	429a      	cmp	r2, r3
 800b662:	d001      	beq.n	800b668 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800b664:	2301      	movs	r3, #1
 800b666:	e032      	b.n	800b6ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	f003 0304 	and.w	r3, r3, #4
 800b670:	2b00      	cmp	r3, #0
 800b672:	d008      	beq.n	800b686 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b674:	4b19      	ldr	r3, [pc, #100]	; (800b6dc <HAL_RCC_ClockConfig+0x1c4>)
 800b676:	685b      	ldr	r3, [r3, #4]
 800b678:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	68db      	ldr	r3, [r3, #12]
 800b680:	4916      	ldr	r1, [pc, #88]	; (800b6dc <HAL_RCC_ClockConfig+0x1c4>)
 800b682:	4313      	orrs	r3, r2
 800b684:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	f003 0308 	and.w	r3, r3, #8
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d009      	beq.n	800b6a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b692:	4b12      	ldr	r3, [pc, #72]	; (800b6dc <HAL_RCC_ClockConfig+0x1c4>)
 800b694:	685b      	ldr	r3, [r3, #4]
 800b696:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	691b      	ldr	r3, [r3, #16]
 800b69e:	00db      	lsls	r3, r3, #3
 800b6a0:	490e      	ldr	r1, [pc, #56]	; (800b6dc <HAL_RCC_ClockConfig+0x1c4>)
 800b6a2:	4313      	orrs	r3, r2
 800b6a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b6a6:	f000 f821 	bl	800b6ec <HAL_RCC_GetSysClockFreq>
 800b6aa:	4602      	mov	r2, r0
 800b6ac:	4b0b      	ldr	r3, [pc, #44]	; (800b6dc <HAL_RCC_ClockConfig+0x1c4>)
 800b6ae:	685b      	ldr	r3, [r3, #4]
 800b6b0:	091b      	lsrs	r3, r3, #4
 800b6b2:	f003 030f 	and.w	r3, r3, #15
 800b6b6:	490a      	ldr	r1, [pc, #40]	; (800b6e0 <HAL_RCC_ClockConfig+0x1c8>)
 800b6b8:	5ccb      	ldrb	r3, [r1, r3]
 800b6ba:	fa22 f303 	lsr.w	r3, r2, r3
 800b6be:	4a09      	ldr	r2, [pc, #36]	; (800b6e4 <HAL_RCC_ClockConfig+0x1cc>)
 800b6c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b6c2:	4b09      	ldr	r3, [pc, #36]	; (800b6e8 <HAL_RCC_ClockConfig+0x1d0>)
 800b6c4:	681b      	ldr	r3, [r3, #0]
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	f7fd fc1e 	bl	8008f08 <HAL_InitTick>

  return HAL_OK;
 800b6cc:	2300      	movs	r3, #0
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	3710      	adds	r7, #16
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}
 800b6d6:	bf00      	nop
 800b6d8:	40022000 	.word	0x40022000
 800b6dc:	40021000 	.word	0x40021000
 800b6e0:	0800e48c 	.word	0x0800e48c
 800b6e4:	200009b4 	.word	0x200009b4
 800b6e8:	200009b8 	.word	0x200009b8

0800b6ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b6ec:	b480      	push	{r7}
 800b6ee:	b087      	sub	sp, #28
 800b6f0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	60fb      	str	r3, [r7, #12]
 800b6f6:	2300      	movs	r3, #0
 800b6f8:	60bb      	str	r3, [r7, #8]
 800b6fa:	2300      	movs	r3, #0
 800b6fc:	617b      	str	r3, [r7, #20]
 800b6fe:	2300      	movs	r3, #0
 800b700:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800b702:	2300      	movs	r3, #0
 800b704:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800b706:	4b1e      	ldr	r3, [pc, #120]	; (800b780 <HAL_RCC_GetSysClockFreq+0x94>)
 800b708:	685b      	ldr	r3, [r3, #4]
 800b70a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	f003 030c 	and.w	r3, r3, #12
 800b712:	2b04      	cmp	r3, #4
 800b714:	d002      	beq.n	800b71c <HAL_RCC_GetSysClockFreq+0x30>
 800b716:	2b08      	cmp	r3, #8
 800b718:	d003      	beq.n	800b722 <HAL_RCC_GetSysClockFreq+0x36>
 800b71a:	e027      	b.n	800b76c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800b71c:	4b19      	ldr	r3, [pc, #100]	; (800b784 <HAL_RCC_GetSysClockFreq+0x98>)
 800b71e:	613b      	str	r3, [r7, #16]
      break;
 800b720:	e027      	b.n	800b772 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	0c9b      	lsrs	r3, r3, #18
 800b726:	f003 030f 	and.w	r3, r3, #15
 800b72a:	4a17      	ldr	r2, [pc, #92]	; (800b788 <HAL_RCC_GetSysClockFreq+0x9c>)
 800b72c:	5cd3      	ldrb	r3, [r2, r3]
 800b72e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b736:	2b00      	cmp	r3, #0
 800b738:	d010      	beq.n	800b75c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800b73a:	4b11      	ldr	r3, [pc, #68]	; (800b780 <HAL_RCC_GetSysClockFreq+0x94>)
 800b73c:	685b      	ldr	r3, [r3, #4]
 800b73e:	0c5b      	lsrs	r3, r3, #17
 800b740:	f003 0301 	and.w	r3, r3, #1
 800b744:	4a11      	ldr	r2, [pc, #68]	; (800b78c <HAL_RCC_GetSysClockFreq+0xa0>)
 800b746:	5cd3      	ldrb	r3, [r2, r3]
 800b748:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	4a0d      	ldr	r2, [pc, #52]	; (800b784 <HAL_RCC_GetSysClockFreq+0x98>)
 800b74e:	fb03 f202 	mul.w	r2, r3, r2
 800b752:	68bb      	ldr	r3, [r7, #8]
 800b754:	fbb2 f3f3 	udiv	r3, r2, r3
 800b758:	617b      	str	r3, [r7, #20]
 800b75a:	e004      	b.n	800b766 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	4a0c      	ldr	r2, [pc, #48]	; (800b790 <HAL_RCC_GetSysClockFreq+0xa4>)
 800b760:	fb02 f303 	mul.w	r3, r2, r3
 800b764:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800b766:	697b      	ldr	r3, [r7, #20]
 800b768:	613b      	str	r3, [r7, #16]
      break;
 800b76a:	e002      	b.n	800b772 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800b76c:	4b05      	ldr	r3, [pc, #20]	; (800b784 <HAL_RCC_GetSysClockFreq+0x98>)
 800b76e:	613b      	str	r3, [r7, #16]
      break;
 800b770:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b772:	693b      	ldr	r3, [r7, #16]
}
 800b774:	4618      	mov	r0, r3
 800b776:	371c      	adds	r7, #28
 800b778:	46bd      	mov	sp, r7
 800b77a:	bc80      	pop	{r7}
 800b77c:	4770      	bx	lr
 800b77e:	bf00      	nop
 800b780:	40021000 	.word	0x40021000
 800b784:	007a1200 	.word	0x007a1200
 800b788:	0800e4a4 	.word	0x0800e4a4
 800b78c:	0800e4b4 	.word	0x0800e4b4
 800b790:	003d0900 	.word	0x003d0900

0800b794 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b794:	b480      	push	{r7}
 800b796:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b798:	4b02      	ldr	r3, [pc, #8]	; (800b7a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800b79a:	681b      	ldr	r3, [r3, #0]
}
 800b79c:	4618      	mov	r0, r3
 800b79e:	46bd      	mov	sp, r7
 800b7a0:	bc80      	pop	{r7}
 800b7a2:	4770      	bx	lr
 800b7a4:	200009b4 	.word	0x200009b4

0800b7a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b7a8:	b580      	push	{r7, lr}
 800b7aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b7ac:	f7ff fff2 	bl	800b794 <HAL_RCC_GetHCLKFreq>
 800b7b0:	4602      	mov	r2, r0
 800b7b2:	4b05      	ldr	r3, [pc, #20]	; (800b7c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b7b4:	685b      	ldr	r3, [r3, #4]
 800b7b6:	0a1b      	lsrs	r3, r3, #8
 800b7b8:	f003 0307 	and.w	r3, r3, #7
 800b7bc:	4903      	ldr	r1, [pc, #12]	; (800b7cc <HAL_RCC_GetPCLK1Freq+0x24>)
 800b7be:	5ccb      	ldrb	r3, [r1, r3]
 800b7c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b7c4:	4618      	mov	r0, r3
 800b7c6:	bd80      	pop	{r7, pc}
 800b7c8:	40021000 	.word	0x40021000
 800b7cc:	0800e49c 	.word	0x0800e49c

0800b7d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b7d4:	f7ff ffde 	bl	800b794 <HAL_RCC_GetHCLKFreq>
 800b7d8:	4602      	mov	r2, r0
 800b7da:	4b05      	ldr	r3, [pc, #20]	; (800b7f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b7dc:	685b      	ldr	r3, [r3, #4]
 800b7de:	0adb      	lsrs	r3, r3, #11
 800b7e0:	f003 0307 	and.w	r3, r3, #7
 800b7e4:	4903      	ldr	r1, [pc, #12]	; (800b7f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b7e6:	5ccb      	ldrb	r3, [r1, r3]
 800b7e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b7ec:	4618      	mov	r0, r3
 800b7ee:	bd80      	pop	{r7, pc}
 800b7f0:	40021000 	.word	0x40021000
 800b7f4:	0800e49c 	.word	0x0800e49c

0800b7f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b085      	sub	sp, #20
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800b800:	4b0a      	ldr	r3, [pc, #40]	; (800b82c <RCC_Delay+0x34>)
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	4a0a      	ldr	r2, [pc, #40]	; (800b830 <RCC_Delay+0x38>)
 800b806:	fba2 2303 	umull	r2, r3, r2, r3
 800b80a:	0a5b      	lsrs	r3, r3, #9
 800b80c:	687a      	ldr	r2, [r7, #4]
 800b80e:	fb02 f303 	mul.w	r3, r2, r3
 800b812:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800b814:	bf00      	nop
  }
  while (Delay --);
 800b816:	68fb      	ldr	r3, [r7, #12]
 800b818:	1e5a      	subs	r2, r3, #1
 800b81a:	60fa      	str	r2, [r7, #12]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d1f9      	bne.n	800b814 <RCC_Delay+0x1c>
}
 800b820:	bf00      	nop
 800b822:	bf00      	nop
 800b824:	3714      	adds	r7, #20
 800b826:	46bd      	mov	sp, r7
 800b828:	bc80      	pop	{r7}
 800b82a:	4770      	bx	lr
 800b82c:	200009b4 	.word	0x200009b4
 800b830:	10624dd3 	.word	0x10624dd3

0800b834 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b082      	sub	sp, #8
 800b838:	af00      	add	r7, sp, #0
 800b83a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d101      	bne.n	800b846 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b842:	2301      	movs	r3, #1
 800b844:	e041      	b.n	800b8ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b84c:	b2db      	uxtb	r3, r3
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d106      	bne.n	800b860 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	2200      	movs	r2, #0
 800b856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b85a:	6878      	ldr	r0, [r7, #4]
 800b85c:	f7fd fa26 	bl	8008cac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2202      	movs	r2, #2
 800b864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681a      	ldr	r2, [r3, #0]
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	3304      	adds	r3, #4
 800b870:	4619      	mov	r1, r3
 800b872:	4610      	mov	r0, r2
 800b874:	f000 fa82 	bl	800bd7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2201      	movs	r2, #1
 800b87c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	2201      	movs	r2, #1
 800b884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2201      	movs	r2, #1
 800b88c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2201      	movs	r2, #1
 800b894:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2201      	movs	r2, #1
 800b89c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2201      	movs	r2, #1
 800b8a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2201      	movs	r2, #1
 800b8ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2201      	movs	r2, #1
 800b8b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2201      	movs	r2, #1
 800b8bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	2201      	movs	r2, #1
 800b8c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b8c8:	2300      	movs	r3, #0
}
 800b8ca:	4618      	mov	r0, r3
 800b8cc:	3708      	adds	r7, #8
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}
	...

0800b8d4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b8d4:	b480      	push	{r7}
 800b8d6:	b085      	sub	sp, #20
 800b8d8:	af00      	add	r7, sp, #0
 800b8da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b8e2:	b2db      	uxtb	r3, r3
 800b8e4:	2b01      	cmp	r3, #1
 800b8e6:	d001      	beq.n	800b8ec <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b8e8:	2301      	movs	r3, #1
 800b8ea:	e044      	b.n	800b976 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8ec:	687b      	ldr	r3, [r7, #4]
 800b8ee:	2202      	movs	r2, #2
 800b8f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	68da      	ldr	r2, [r3, #12]
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	f042 0201 	orr.w	r2, r2, #1
 800b902:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	4a1d      	ldr	r2, [pc, #116]	; (800b980 <HAL_TIM_Base_Start_IT+0xac>)
 800b90a:	4293      	cmp	r3, r2
 800b90c:	d018      	beq.n	800b940 <HAL_TIM_Base_Start_IT+0x6c>
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	4a1c      	ldr	r2, [pc, #112]	; (800b984 <HAL_TIM_Base_Start_IT+0xb0>)
 800b914:	4293      	cmp	r3, r2
 800b916:	d013      	beq.n	800b940 <HAL_TIM_Base_Start_IT+0x6c>
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	681b      	ldr	r3, [r3, #0]
 800b91c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b920:	d00e      	beq.n	800b940 <HAL_TIM_Base_Start_IT+0x6c>
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	681b      	ldr	r3, [r3, #0]
 800b926:	4a18      	ldr	r2, [pc, #96]	; (800b988 <HAL_TIM_Base_Start_IT+0xb4>)
 800b928:	4293      	cmp	r3, r2
 800b92a:	d009      	beq.n	800b940 <HAL_TIM_Base_Start_IT+0x6c>
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	4a16      	ldr	r2, [pc, #88]	; (800b98c <HAL_TIM_Base_Start_IT+0xb8>)
 800b932:	4293      	cmp	r3, r2
 800b934:	d004      	beq.n	800b940 <HAL_TIM_Base_Start_IT+0x6c>
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	4a15      	ldr	r2, [pc, #84]	; (800b990 <HAL_TIM_Base_Start_IT+0xbc>)
 800b93c:	4293      	cmp	r3, r2
 800b93e:	d111      	bne.n	800b964 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	681b      	ldr	r3, [r3, #0]
 800b944:	689b      	ldr	r3, [r3, #8]
 800b946:	f003 0307 	and.w	r3, r3, #7
 800b94a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	2b06      	cmp	r3, #6
 800b950:	d010      	beq.n	800b974 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	681b      	ldr	r3, [r3, #0]
 800b956:	681a      	ldr	r2, [r3, #0]
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	f042 0201 	orr.w	r2, r2, #1
 800b960:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b962:	e007      	b.n	800b974 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	681a      	ldr	r2, [r3, #0]
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	f042 0201 	orr.w	r2, r2, #1
 800b972:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b974:	2300      	movs	r3, #0
}
 800b976:	4618      	mov	r0, r3
 800b978:	3714      	adds	r7, #20
 800b97a:	46bd      	mov	sp, r7
 800b97c:	bc80      	pop	{r7}
 800b97e:	4770      	bx	lr
 800b980:	40012c00 	.word	0x40012c00
 800b984:	40013400 	.word	0x40013400
 800b988:	40000400 	.word	0x40000400
 800b98c:	40000800 	.word	0x40000800
 800b990:	40000c00 	.word	0x40000c00

0800b994 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b082      	sub	sp, #8
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	691b      	ldr	r3, [r3, #16]
 800b9a2:	f003 0302 	and.w	r3, r3, #2
 800b9a6:	2b02      	cmp	r3, #2
 800b9a8:	d122      	bne.n	800b9f0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	68db      	ldr	r3, [r3, #12]
 800b9b0:	f003 0302 	and.w	r3, r3, #2
 800b9b4:	2b02      	cmp	r3, #2
 800b9b6:	d11b      	bne.n	800b9f0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	f06f 0202 	mvn.w	r2, #2
 800b9c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	2201      	movs	r2, #1
 800b9c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	699b      	ldr	r3, [r3, #24]
 800b9ce:	f003 0303 	and.w	r3, r3, #3
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d003      	beq.n	800b9de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b9d6:	6878      	ldr	r0, [r7, #4]
 800b9d8:	f000 f9b4 	bl	800bd44 <HAL_TIM_IC_CaptureCallback>
 800b9dc:	e005      	b.n	800b9ea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b9de:	6878      	ldr	r0, [r7, #4]
 800b9e0:	f000 f9a7 	bl	800bd32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b9e4:	6878      	ldr	r0, [r7, #4]
 800b9e6:	f000 f9b6 	bl	800bd56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	691b      	ldr	r3, [r3, #16]
 800b9f6:	f003 0304 	and.w	r3, r3, #4
 800b9fa:	2b04      	cmp	r3, #4
 800b9fc:	d122      	bne.n	800ba44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	68db      	ldr	r3, [r3, #12]
 800ba04:	f003 0304 	and.w	r3, r3, #4
 800ba08:	2b04      	cmp	r3, #4
 800ba0a:	d11b      	bne.n	800ba44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	f06f 0204 	mvn.w	r2, #4
 800ba14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	2202      	movs	r2, #2
 800ba1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	699b      	ldr	r3, [r3, #24]
 800ba22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d003      	beq.n	800ba32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	f000 f98a 	bl	800bd44 <HAL_TIM_IC_CaptureCallback>
 800ba30:	e005      	b.n	800ba3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f000 f97d 	bl	800bd32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba38:	6878      	ldr	r0, [r7, #4]
 800ba3a:	f000 f98c 	bl	800bd56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2200      	movs	r2, #0
 800ba42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	691b      	ldr	r3, [r3, #16]
 800ba4a:	f003 0308 	and.w	r3, r3, #8
 800ba4e:	2b08      	cmp	r3, #8
 800ba50:	d122      	bne.n	800ba98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	68db      	ldr	r3, [r3, #12]
 800ba58:	f003 0308 	and.w	r3, r3, #8
 800ba5c:	2b08      	cmp	r3, #8
 800ba5e:	d11b      	bne.n	800ba98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	f06f 0208 	mvn.w	r2, #8
 800ba68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	2204      	movs	r2, #4
 800ba6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	69db      	ldr	r3, [r3, #28]
 800ba76:	f003 0303 	and.w	r3, r3, #3
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d003      	beq.n	800ba86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba7e:	6878      	ldr	r0, [r7, #4]
 800ba80:	f000 f960 	bl	800bd44 <HAL_TIM_IC_CaptureCallback>
 800ba84:	e005      	b.n	800ba92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	f000 f953 	bl	800bd32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	f000 f962 	bl	800bd56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	2200      	movs	r2, #0
 800ba96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	691b      	ldr	r3, [r3, #16]
 800ba9e:	f003 0310 	and.w	r3, r3, #16
 800baa2:	2b10      	cmp	r3, #16
 800baa4:	d122      	bne.n	800baec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	68db      	ldr	r3, [r3, #12]
 800baac:	f003 0310 	and.w	r3, r3, #16
 800bab0:	2b10      	cmp	r3, #16
 800bab2:	d11b      	bne.n	800baec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	f06f 0210 	mvn.w	r2, #16
 800babc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	2208      	movs	r2, #8
 800bac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	69db      	ldr	r3, [r3, #28]
 800baca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d003      	beq.n	800bada <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f000 f936 	bl	800bd44 <HAL_TIM_IC_CaptureCallback>
 800bad8:	e005      	b.n	800bae6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bada:	6878      	ldr	r0, [r7, #4]
 800badc:	f000 f929 	bl	800bd32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f000 f938 	bl	800bd56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2200      	movs	r2, #0
 800baea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	691b      	ldr	r3, [r3, #16]
 800baf2:	f003 0301 	and.w	r3, r3, #1
 800baf6:	2b01      	cmp	r3, #1
 800baf8:	d10e      	bne.n	800bb18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	681b      	ldr	r3, [r3, #0]
 800bafe:	68db      	ldr	r3, [r3, #12]
 800bb00:	f003 0301 	and.w	r3, r3, #1
 800bb04:	2b01      	cmp	r3, #1
 800bb06:	d107      	bne.n	800bb18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	f06f 0201 	mvn.w	r2, #1
 800bb10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f7fc fd54 	bl	80085c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	691b      	ldr	r3, [r3, #16]
 800bb1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb22:	2b80      	cmp	r3, #128	; 0x80
 800bb24:	d10e      	bne.n	800bb44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	68db      	ldr	r3, [r3, #12]
 800bb2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bb30:	2b80      	cmp	r3, #128	; 0x80
 800bb32:	d107      	bne.n	800bb44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bb3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bb3e:	6878      	ldr	r0, [r7, #4]
 800bb40:	f000 faa1 	bl	800c086 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	691b      	ldr	r3, [r3, #16]
 800bb4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb4e:	2b40      	cmp	r3, #64	; 0x40
 800bb50:	d10e      	bne.n	800bb70 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	68db      	ldr	r3, [r3, #12]
 800bb58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb5c:	2b40      	cmp	r3, #64	; 0x40
 800bb5e:	d107      	bne.n	800bb70 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bb68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f000 f8fc 	bl	800bd68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	681b      	ldr	r3, [r3, #0]
 800bb74:	691b      	ldr	r3, [r3, #16]
 800bb76:	f003 0320 	and.w	r3, r3, #32
 800bb7a:	2b20      	cmp	r3, #32
 800bb7c:	d10e      	bne.n	800bb9c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	68db      	ldr	r3, [r3, #12]
 800bb84:	f003 0320 	and.w	r3, r3, #32
 800bb88:	2b20      	cmp	r3, #32
 800bb8a:	d107      	bne.n	800bb9c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	f06f 0220 	mvn.w	r2, #32
 800bb94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bb96:	6878      	ldr	r0, [r7, #4]
 800bb98:	f000 fa6c 	bl	800c074 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bb9c:	bf00      	nop
 800bb9e:	3708      	adds	r7, #8
 800bba0:	46bd      	mov	sp, r7
 800bba2:	bd80      	pop	{r7, pc}

0800bba4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bba4:	b580      	push	{r7, lr}
 800bba6:	b084      	sub	sp, #16
 800bba8:	af00      	add	r7, sp, #0
 800bbaa:	6078      	str	r0, [r7, #4]
 800bbac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bbae:	2300      	movs	r3, #0
 800bbb0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bbb2:	687b      	ldr	r3, [r7, #4]
 800bbb4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bbb8:	2b01      	cmp	r3, #1
 800bbba:	d101      	bne.n	800bbc0 <HAL_TIM_ConfigClockSource+0x1c>
 800bbbc:	2302      	movs	r3, #2
 800bbbe:	e0b4      	b.n	800bd2a <HAL_TIM_ConfigClockSource+0x186>
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	2201      	movs	r2, #1
 800bbc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2202      	movs	r2, #2
 800bbcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	689b      	ldr	r3, [r3, #8]
 800bbd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bbd8:	68bb      	ldr	r3, [r7, #8]
 800bbda:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800bbde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bbe0:	68bb      	ldr	r3, [r7, #8]
 800bbe2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bbe6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	68ba      	ldr	r2, [r7, #8]
 800bbee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bbf8:	d03e      	beq.n	800bc78 <HAL_TIM_ConfigClockSource+0xd4>
 800bbfa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bbfe:	f200 8087 	bhi.w	800bd10 <HAL_TIM_ConfigClockSource+0x16c>
 800bc02:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc06:	f000 8086 	beq.w	800bd16 <HAL_TIM_ConfigClockSource+0x172>
 800bc0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc0e:	d87f      	bhi.n	800bd10 <HAL_TIM_ConfigClockSource+0x16c>
 800bc10:	2b70      	cmp	r3, #112	; 0x70
 800bc12:	d01a      	beq.n	800bc4a <HAL_TIM_ConfigClockSource+0xa6>
 800bc14:	2b70      	cmp	r3, #112	; 0x70
 800bc16:	d87b      	bhi.n	800bd10 <HAL_TIM_ConfigClockSource+0x16c>
 800bc18:	2b60      	cmp	r3, #96	; 0x60
 800bc1a:	d050      	beq.n	800bcbe <HAL_TIM_ConfigClockSource+0x11a>
 800bc1c:	2b60      	cmp	r3, #96	; 0x60
 800bc1e:	d877      	bhi.n	800bd10 <HAL_TIM_ConfigClockSource+0x16c>
 800bc20:	2b50      	cmp	r3, #80	; 0x50
 800bc22:	d03c      	beq.n	800bc9e <HAL_TIM_ConfigClockSource+0xfa>
 800bc24:	2b50      	cmp	r3, #80	; 0x50
 800bc26:	d873      	bhi.n	800bd10 <HAL_TIM_ConfigClockSource+0x16c>
 800bc28:	2b40      	cmp	r3, #64	; 0x40
 800bc2a:	d058      	beq.n	800bcde <HAL_TIM_ConfigClockSource+0x13a>
 800bc2c:	2b40      	cmp	r3, #64	; 0x40
 800bc2e:	d86f      	bhi.n	800bd10 <HAL_TIM_ConfigClockSource+0x16c>
 800bc30:	2b30      	cmp	r3, #48	; 0x30
 800bc32:	d064      	beq.n	800bcfe <HAL_TIM_ConfigClockSource+0x15a>
 800bc34:	2b30      	cmp	r3, #48	; 0x30
 800bc36:	d86b      	bhi.n	800bd10 <HAL_TIM_ConfigClockSource+0x16c>
 800bc38:	2b20      	cmp	r3, #32
 800bc3a:	d060      	beq.n	800bcfe <HAL_TIM_ConfigClockSource+0x15a>
 800bc3c:	2b20      	cmp	r3, #32
 800bc3e:	d867      	bhi.n	800bd10 <HAL_TIM_ConfigClockSource+0x16c>
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d05c      	beq.n	800bcfe <HAL_TIM_ConfigClockSource+0x15a>
 800bc44:	2b10      	cmp	r3, #16
 800bc46:	d05a      	beq.n	800bcfe <HAL_TIM_ConfigClockSource+0x15a>
 800bc48:	e062      	b.n	800bd10 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bc4e:	683b      	ldr	r3, [r7, #0]
 800bc50:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bc5a:	f000 f980 	bl	800bf5e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	681b      	ldr	r3, [r3, #0]
 800bc62:	689b      	ldr	r3, [r3, #8]
 800bc64:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bc66:	68bb      	ldr	r3, [r7, #8]
 800bc68:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bc6c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681b      	ldr	r3, [r3, #0]
 800bc72:	68ba      	ldr	r2, [r7, #8]
 800bc74:	609a      	str	r2, [r3, #8]
      break;
 800bc76:	e04f      	b.n	800bd18 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bc7c:	683b      	ldr	r3, [r7, #0]
 800bc7e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bc84:	683b      	ldr	r3, [r7, #0]
 800bc86:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bc88:	f000 f969 	bl	800bf5e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bc8c:	687b      	ldr	r3, [r7, #4]
 800bc8e:	681b      	ldr	r3, [r3, #0]
 800bc90:	689a      	ldr	r2, [r3, #8]
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bc9a:	609a      	str	r2, [r3, #8]
      break;
 800bc9c:	e03c      	b.n	800bd18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bca6:	683b      	ldr	r3, [r7, #0]
 800bca8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bcaa:	461a      	mov	r2, r3
 800bcac:	f000 f8e0 	bl	800be70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	2150      	movs	r1, #80	; 0x50
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	f000 f937 	bl	800bf2a <TIM_ITRx_SetConfig>
      break;
 800bcbc:	e02c      	b.n	800bd18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bcc2:	683b      	ldr	r3, [r7, #0]
 800bcc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bcc6:	683b      	ldr	r3, [r7, #0]
 800bcc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bcca:	461a      	mov	r2, r3
 800bccc:	f000 f8fe 	bl	800becc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	2160      	movs	r1, #96	; 0x60
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	f000 f927 	bl	800bf2a <TIM_ITRx_SetConfig>
      break;
 800bcdc:	e01c      	b.n	800bd18 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bce2:	683b      	ldr	r3, [r7, #0]
 800bce4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bce6:	683b      	ldr	r3, [r7, #0]
 800bce8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bcea:	461a      	mov	r2, r3
 800bcec:	f000 f8c0 	bl	800be70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	2140      	movs	r1, #64	; 0x40
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	f000 f917 	bl	800bf2a <TIM_ITRx_SetConfig>
      break;
 800bcfc:	e00c      	b.n	800bd18 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681a      	ldr	r2, [r3, #0]
 800bd02:	683b      	ldr	r3, [r7, #0]
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	4619      	mov	r1, r3
 800bd08:	4610      	mov	r0, r2
 800bd0a:	f000 f90e 	bl	800bf2a <TIM_ITRx_SetConfig>
      break;
 800bd0e:	e003      	b.n	800bd18 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800bd10:	2301      	movs	r3, #1
 800bd12:	73fb      	strb	r3, [r7, #15]
      break;
 800bd14:	e000      	b.n	800bd18 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800bd16:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2201      	movs	r2, #1
 800bd1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2200      	movs	r2, #0
 800bd24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bd28:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	3710      	adds	r7, #16
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}

0800bd32 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bd32:	b480      	push	{r7}
 800bd34:	b083      	sub	sp, #12
 800bd36:	af00      	add	r7, sp, #0
 800bd38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bd3a:	bf00      	nop
 800bd3c:	370c      	adds	r7, #12
 800bd3e:	46bd      	mov	sp, r7
 800bd40:	bc80      	pop	{r7}
 800bd42:	4770      	bx	lr

0800bd44 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bd44:	b480      	push	{r7}
 800bd46:	b083      	sub	sp, #12
 800bd48:	af00      	add	r7, sp, #0
 800bd4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bd4c:	bf00      	nop
 800bd4e:	370c      	adds	r7, #12
 800bd50:	46bd      	mov	sp, r7
 800bd52:	bc80      	pop	{r7}
 800bd54:	4770      	bx	lr

0800bd56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bd56:	b480      	push	{r7}
 800bd58:	b083      	sub	sp, #12
 800bd5a:	af00      	add	r7, sp, #0
 800bd5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bd5e:	bf00      	nop
 800bd60:	370c      	adds	r7, #12
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bc80      	pop	{r7}
 800bd66:	4770      	bx	lr

0800bd68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bd68:	b480      	push	{r7}
 800bd6a:	b083      	sub	sp, #12
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bd70:	bf00      	nop
 800bd72:	370c      	adds	r7, #12
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bc80      	pop	{r7}
 800bd78:	4770      	bx	lr
	...

0800bd7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bd7c:	b480      	push	{r7}
 800bd7e:	b085      	sub	sp, #20
 800bd80:	af00      	add	r7, sp, #0
 800bd82:	6078      	str	r0, [r7, #4]
 800bd84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	4a33      	ldr	r2, [pc, #204]	; (800be5c <TIM_Base_SetConfig+0xe0>)
 800bd90:	4293      	cmp	r3, r2
 800bd92:	d013      	beq.n	800bdbc <TIM_Base_SetConfig+0x40>
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	4a32      	ldr	r2, [pc, #200]	; (800be60 <TIM_Base_SetConfig+0xe4>)
 800bd98:	4293      	cmp	r3, r2
 800bd9a:	d00f      	beq.n	800bdbc <TIM_Base_SetConfig+0x40>
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bda2:	d00b      	beq.n	800bdbc <TIM_Base_SetConfig+0x40>
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	4a2f      	ldr	r2, [pc, #188]	; (800be64 <TIM_Base_SetConfig+0xe8>)
 800bda8:	4293      	cmp	r3, r2
 800bdaa:	d007      	beq.n	800bdbc <TIM_Base_SetConfig+0x40>
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	4a2e      	ldr	r2, [pc, #184]	; (800be68 <TIM_Base_SetConfig+0xec>)
 800bdb0:	4293      	cmp	r3, r2
 800bdb2:	d003      	beq.n	800bdbc <TIM_Base_SetConfig+0x40>
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	4a2d      	ldr	r2, [pc, #180]	; (800be6c <TIM_Base_SetConfig+0xf0>)
 800bdb8:	4293      	cmp	r3, r2
 800bdba:	d108      	bne.n	800bdce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bdbc:	68fb      	ldr	r3, [r7, #12]
 800bdbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bdc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	685b      	ldr	r3, [r3, #4]
 800bdc8:	68fa      	ldr	r2, [r7, #12]
 800bdca:	4313      	orrs	r3, r2
 800bdcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	4a22      	ldr	r2, [pc, #136]	; (800be5c <TIM_Base_SetConfig+0xe0>)
 800bdd2:	4293      	cmp	r3, r2
 800bdd4:	d013      	beq.n	800bdfe <TIM_Base_SetConfig+0x82>
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	4a21      	ldr	r2, [pc, #132]	; (800be60 <TIM_Base_SetConfig+0xe4>)
 800bdda:	4293      	cmp	r3, r2
 800bddc:	d00f      	beq.n	800bdfe <TIM_Base_SetConfig+0x82>
 800bdde:	687b      	ldr	r3, [r7, #4]
 800bde0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bde4:	d00b      	beq.n	800bdfe <TIM_Base_SetConfig+0x82>
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	4a1e      	ldr	r2, [pc, #120]	; (800be64 <TIM_Base_SetConfig+0xe8>)
 800bdea:	4293      	cmp	r3, r2
 800bdec:	d007      	beq.n	800bdfe <TIM_Base_SetConfig+0x82>
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	4a1d      	ldr	r2, [pc, #116]	; (800be68 <TIM_Base_SetConfig+0xec>)
 800bdf2:	4293      	cmp	r3, r2
 800bdf4:	d003      	beq.n	800bdfe <TIM_Base_SetConfig+0x82>
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	4a1c      	ldr	r2, [pc, #112]	; (800be6c <TIM_Base_SetConfig+0xf0>)
 800bdfa:	4293      	cmp	r3, r2
 800bdfc:	d108      	bne.n	800be10 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800be04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	68db      	ldr	r3, [r3, #12]
 800be0a:	68fa      	ldr	r2, [r7, #12]
 800be0c:	4313      	orrs	r3, r2
 800be0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	695b      	ldr	r3, [r3, #20]
 800be1a:	4313      	orrs	r3, r2
 800be1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	68fa      	ldr	r2, [r7, #12]
 800be22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800be24:	683b      	ldr	r3, [r7, #0]
 800be26:	689a      	ldr	r2, [r3, #8]
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800be2c:	683b      	ldr	r3, [r7, #0]
 800be2e:	681a      	ldr	r2, [r3, #0]
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	4a09      	ldr	r2, [pc, #36]	; (800be5c <TIM_Base_SetConfig+0xe0>)
 800be38:	4293      	cmp	r3, r2
 800be3a:	d003      	beq.n	800be44 <TIM_Base_SetConfig+0xc8>
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	4a08      	ldr	r2, [pc, #32]	; (800be60 <TIM_Base_SetConfig+0xe4>)
 800be40:	4293      	cmp	r3, r2
 800be42:	d103      	bne.n	800be4c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	691a      	ldr	r2, [r3, #16]
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	2201      	movs	r2, #1
 800be50:	615a      	str	r2, [r3, #20]
}
 800be52:	bf00      	nop
 800be54:	3714      	adds	r7, #20
 800be56:	46bd      	mov	sp, r7
 800be58:	bc80      	pop	{r7}
 800be5a:	4770      	bx	lr
 800be5c:	40012c00 	.word	0x40012c00
 800be60:	40013400 	.word	0x40013400
 800be64:	40000400 	.word	0x40000400
 800be68:	40000800 	.word	0x40000800
 800be6c:	40000c00 	.word	0x40000c00

0800be70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800be70:	b480      	push	{r7}
 800be72:	b087      	sub	sp, #28
 800be74:	af00      	add	r7, sp, #0
 800be76:	60f8      	str	r0, [r7, #12]
 800be78:	60b9      	str	r1, [r7, #8]
 800be7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	6a1b      	ldr	r3, [r3, #32]
 800be80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	6a1b      	ldr	r3, [r3, #32]
 800be86:	f023 0201 	bic.w	r2, r3, #1
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	699b      	ldr	r3, [r3, #24]
 800be92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800be94:	693b      	ldr	r3, [r7, #16]
 800be96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800be9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	011b      	lsls	r3, r3, #4
 800bea0:	693a      	ldr	r2, [r7, #16]
 800bea2:	4313      	orrs	r3, r2
 800bea4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bea6:	697b      	ldr	r3, [r7, #20]
 800bea8:	f023 030a 	bic.w	r3, r3, #10
 800beac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800beae:	697a      	ldr	r2, [r7, #20]
 800beb0:	68bb      	ldr	r3, [r7, #8]
 800beb2:	4313      	orrs	r3, r2
 800beb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800beb6:	68fb      	ldr	r3, [r7, #12]
 800beb8:	693a      	ldr	r2, [r7, #16]
 800beba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	697a      	ldr	r2, [r7, #20]
 800bec0:	621a      	str	r2, [r3, #32]
}
 800bec2:	bf00      	nop
 800bec4:	371c      	adds	r7, #28
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bc80      	pop	{r7}
 800beca:	4770      	bx	lr

0800becc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800becc:	b480      	push	{r7}
 800bece:	b087      	sub	sp, #28
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	60f8      	str	r0, [r7, #12]
 800bed4:	60b9      	str	r1, [r7, #8]
 800bed6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800bed8:	68fb      	ldr	r3, [r7, #12]
 800beda:	6a1b      	ldr	r3, [r3, #32]
 800bedc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bede:	68fb      	ldr	r3, [r7, #12]
 800bee0:	6a1b      	ldr	r3, [r3, #32]
 800bee2:	f023 0210 	bic.w	r2, r3, #16
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800beea:	68fb      	ldr	r3, [r7, #12]
 800beec:	699b      	ldr	r3, [r3, #24]
 800beee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bef0:	693b      	ldr	r3, [r7, #16]
 800bef2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bef6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	031b      	lsls	r3, r3, #12
 800befc:	693a      	ldr	r2, [r7, #16]
 800befe:	4313      	orrs	r3, r2
 800bf00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bf02:	697b      	ldr	r3, [r7, #20]
 800bf04:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bf08:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bf0a:	68bb      	ldr	r3, [r7, #8]
 800bf0c:	011b      	lsls	r3, r3, #4
 800bf0e:	697a      	ldr	r2, [r7, #20]
 800bf10:	4313      	orrs	r3, r2
 800bf12:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bf14:	68fb      	ldr	r3, [r7, #12]
 800bf16:	693a      	ldr	r2, [r7, #16]
 800bf18:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	697a      	ldr	r2, [r7, #20]
 800bf1e:	621a      	str	r2, [r3, #32]
}
 800bf20:	bf00      	nop
 800bf22:	371c      	adds	r7, #28
 800bf24:	46bd      	mov	sp, r7
 800bf26:	bc80      	pop	{r7}
 800bf28:	4770      	bx	lr

0800bf2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bf2a:	b480      	push	{r7}
 800bf2c:	b085      	sub	sp, #20
 800bf2e:	af00      	add	r7, sp, #0
 800bf30:	6078      	str	r0, [r7, #4]
 800bf32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	689b      	ldr	r3, [r3, #8]
 800bf38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bf3a:	68fb      	ldr	r3, [r7, #12]
 800bf3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bf42:	683a      	ldr	r2, [r7, #0]
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	4313      	orrs	r3, r2
 800bf48:	f043 0307 	orr.w	r3, r3, #7
 800bf4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	68fa      	ldr	r2, [r7, #12]
 800bf52:	609a      	str	r2, [r3, #8]
}
 800bf54:	bf00      	nop
 800bf56:	3714      	adds	r7, #20
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	bc80      	pop	{r7}
 800bf5c:	4770      	bx	lr

0800bf5e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bf5e:	b480      	push	{r7}
 800bf60:	b087      	sub	sp, #28
 800bf62:	af00      	add	r7, sp, #0
 800bf64:	60f8      	str	r0, [r7, #12]
 800bf66:	60b9      	str	r1, [r7, #8]
 800bf68:	607a      	str	r2, [r7, #4]
 800bf6a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	689b      	ldr	r3, [r3, #8]
 800bf70:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bf72:	697b      	ldr	r3, [r7, #20]
 800bf74:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bf78:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800bf7a:	683b      	ldr	r3, [r7, #0]
 800bf7c:	021a      	lsls	r2, r3, #8
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	431a      	orrs	r2, r3
 800bf82:	68bb      	ldr	r3, [r7, #8]
 800bf84:	4313      	orrs	r3, r2
 800bf86:	697a      	ldr	r2, [r7, #20]
 800bf88:	4313      	orrs	r3, r2
 800bf8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	697a      	ldr	r2, [r7, #20]
 800bf90:	609a      	str	r2, [r3, #8]
}
 800bf92:	bf00      	nop
 800bf94:	371c      	adds	r7, #28
 800bf96:	46bd      	mov	sp, r7
 800bf98:	bc80      	pop	{r7}
 800bf9a:	4770      	bx	lr

0800bf9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bf9c:	b480      	push	{r7}
 800bf9e:	b085      	sub	sp, #20
 800bfa0:	af00      	add	r7, sp, #0
 800bfa2:	6078      	str	r0, [r7, #4]
 800bfa4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bfac:	2b01      	cmp	r3, #1
 800bfae:	d101      	bne.n	800bfb4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bfb0:	2302      	movs	r3, #2
 800bfb2:	e050      	b.n	800c056 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2201      	movs	r2, #1
 800bfb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2202      	movs	r2, #2
 800bfc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	685b      	ldr	r3, [r3, #4]
 800bfca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	689b      	ldr	r3, [r3, #8]
 800bfd2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bfda:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bfdc:	683b      	ldr	r3, [r7, #0]
 800bfde:	681b      	ldr	r3, [r3, #0]
 800bfe0:	68fa      	ldr	r2, [r7, #12]
 800bfe2:	4313      	orrs	r3, r2
 800bfe4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	68fa      	ldr	r2, [r7, #12]
 800bfec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bfee:	687b      	ldr	r3, [r7, #4]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	4a1b      	ldr	r2, [pc, #108]	; (800c060 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800bff4:	4293      	cmp	r3, r2
 800bff6:	d018      	beq.n	800c02a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	4a19      	ldr	r2, [pc, #100]	; (800c064 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800bffe:	4293      	cmp	r3, r2
 800c000:	d013      	beq.n	800c02a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c00a:	d00e      	beq.n	800c02a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	4a15      	ldr	r2, [pc, #84]	; (800c068 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c012:	4293      	cmp	r3, r2
 800c014:	d009      	beq.n	800c02a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	4a14      	ldr	r2, [pc, #80]	; (800c06c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800c01c:	4293      	cmp	r3, r2
 800c01e:	d004      	beq.n	800c02a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	4a12      	ldr	r2, [pc, #72]	; (800c070 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800c026:	4293      	cmp	r3, r2
 800c028:	d10c      	bne.n	800c044 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c02a:	68bb      	ldr	r3, [r7, #8]
 800c02c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c030:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	685b      	ldr	r3, [r3, #4]
 800c036:	68ba      	ldr	r2, [r7, #8]
 800c038:	4313      	orrs	r3, r2
 800c03a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	68ba      	ldr	r2, [r7, #8]
 800c042:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	2201      	movs	r2, #1
 800c048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	2200      	movs	r2, #0
 800c050:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c054:	2300      	movs	r3, #0
}
 800c056:	4618      	mov	r0, r3
 800c058:	3714      	adds	r7, #20
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bc80      	pop	{r7}
 800c05e:	4770      	bx	lr
 800c060:	40012c00 	.word	0x40012c00
 800c064:	40013400 	.word	0x40013400
 800c068:	40000400 	.word	0x40000400
 800c06c:	40000800 	.word	0x40000800
 800c070:	40000c00 	.word	0x40000c00

0800c074 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c074:	b480      	push	{r7}
 800c076:	b083      	sub	sp, #12
 800c078:	af00      	add	r7, sp, #0
 800c07a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c07c:	bf00      	nop
 800c07e:	370c      	adds	r7, #12
 800c080:	46bd      	mov	sp, r7
 800c082:	bc80      	pop	{r7}
 800c084:	4770      	bx	lr

0800c086 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c086:	b480      	push	{r7}
 800c088:	b083      	sub	sp, #12
 800c08a:	af00      	add	r7, sp, #0
 800c08c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c08e:	bf00      	nop
 800c090:	370c      	adds	r7, #12
 800c092:	46bd      	mov	sp, r7
 800c094:	bc80      	pop	{r7}
 800c096:	4770      	bx	lr

0800c098 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c098:	b580      	push	{r7, lr}
 800c09a:	b082      	sub	sp, #8
 800c09c:	af00      	add	r7, sp, #0
 800c09e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d101      	bne.n	800c0aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c0a6:	2301      	movs	r3, #1
 800c0a8:	e042      	b.n	800c130 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c0b0:	b2db      	uxtb	r3, r3
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d106      	bne.n	800c0c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c0be:	6878      	ldr	r0, [r7, #4]
 800c0c0:	f7fc fe1a 	bl	8008cf8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	2224      	movs	r2, #36	; 0x24
 800c0c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	68da      	ldr	r2, [r3, #12]
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c0da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c0dc:	6878      	ldr	r0, [r7, #4]
 800c0de:	f000 fcb5 	bl	800ca4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	691a      	ldr	r2, [r3, #16]
 800c0e8:	687b      	ldr	r3, [r7, #4]
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c0f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	695a      	ldr	r2, [r3, #20]
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c100:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	68da      	ldr	r2, [r3, #12]
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c110:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	2200      	movs	r2, #0
 800c116:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	2220      	movs	r2, #32
 800c11c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	2220      	movs	r2, #32
 800c124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c128:	687b      	ldr	r3, [r7, #4]
 800c12a:	2200      	movs	r2, #0
 800c12c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c12e:	2300      	movs	r3, #0
}
 800c130:	4618      	mov	r0, r3
 800c132:	3708      	adds	r7, #8
 800c134:	46bd      	mov	sp, r7
 800c136:	bd80      	pop	{r7, pc}

0800c138 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c138:	b480      	push	{r7}
 800c13a:	b085      	sub	sp, #20
 800c13c:	af00      	add	r7, sp, #0
 800c13e:	60f8      	str	r0, [r7, #12]
 800c140:	60b9      	str	r1, [r7, #8]
 800c142:	4613      	mov	r3, r2
 800c144:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c14c:	b2db      	uxtb	r3, r3
 800c14e:	2b20      	cmp	r3, #32
 800c150:	d121      	bne.n	800c196 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c152:	68bb      	ldr	r3, [r7, #8]
 800c154:	2b00      	cmp	r3, #0
 800c156:	d002      	beq.n	800c15e <HAL_UART_Transmit_IT+0x26>
 800c158:	88fb      	ldrh	r3, [r7, #6]
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	d101      	bne.n	800c162 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800c15e:	2301      	movs	r3, #1
 800c160:	e01a      	b.n	800c198 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	68ba      	ldr	r2, [r7, #8]
 800c166:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	88fa      	ldrh	r2, [r7, #6]
 800c16c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	88fa      	ldrh	r2, [r7, #6]
 800c172:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	2200      	movs	r2, #0
 800c178:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	2221      	movs	r2, #33	; 0x21
 800c17e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800c182:	68fb      	ldr	r3, [r7, #12]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	68da      	ldr	r2, [r3, #12]
 800c188:	68fb      	ldr	r3, [r7, #12]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c190:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800c192:	2300      	movs	r3, #0
 800c194:	e000      	b.n	800c198 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800c196:	2302      	movs	r3, #2
  }
}
 800c198:	4618      	mov	r0, r3
 800c19a:	3714      	adds	r7, #20
 800c19c:	46bd      	mov	sp, r7
 800c19e:	bc80      	pop	{r7}
 800c1a0:	4770      	bx	lr
	...

0800c1a4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b0ba      	sub	sp, #232	; 0xe8
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	681b      	ldr	r3, [r3, #0]
 800c1b2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	68db      	ldr	r3, [r3, #12]
 800c1bc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	695b      	ldr	r3, [r3, #20]
 800c1c6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c1d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1da:	f003 030f 	and.w	r3, r3, #15
 800c1de:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800c1e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d10f      	bne.n	800c20a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c1ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1ee:	f003 0320 	and.w	r3, r3, #32
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d009      	beq.n	800c20a <HAL_UART_IRQHandler+0x66>
 800c1f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1fa:	f003 0320 	and.w	r3, r3, #32
 800c1fe:	2b00      	cmp	r3, #0
 800c200:	d003      	beq.n	800c20a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c202:	6878      	ldr	r0, [r7, #4]
 800c204:	f000 fb63 	bl	800c8ce <UART_Receive_IT>
      return;
 800c208:	e25b      	b.n	800c6c2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c20a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c20e:	2b00      	cmp	r3, #0
 800c210:	f000 80de 	beq.w	800c3d0 <HAL_UART_IRQHandler+0x22c>
 800c214:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c218:	f003 0301 	and.w	r3, r3, #1
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d106      	bne.n	800c22e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c224:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c228:	2b00      	cmp	r3, #0
 800c22a:	f000 80d1 	beq.w	800c3d0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c22e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c232:	f003 0301 	and.w	r3, r3, #1
 800c236:	2b00      	cmp	r3, #0
 800c238:	d00b      	beq.n	800c252 <HAL_UART_IRQHandler+0xae>
 800c23a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c23e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c242:	2b00      	cmp	r3, #0
 800c244:	d005      	beq.n	800c252 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c24a:	f043 0201 	orr.w	r2, r3, #1
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c256:	f003 0304 	and.w	r3, r3, #4
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d00b      	beq.n	800c276 <HAL_UART_IRQHandler+0xd2>
 800c25e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c262:	f003 0301 	and.w	r3, r3, #1
 800c266:	2b00      	cmp	r3, #0
 800c268:	d005      	beq.n	800c276 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c26e:	f043 0202 	orr.w	r2, r3, #2
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c27a:	f003 0302 	and.w	r3, r3, #2
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d00b      	beq.n	800c29a <HAL_UART_IRQHandler+0xf6>
 800c282:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c286:	f003 0301 	and.w	r3, r3, #1
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d005      	beq.n	800c29a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c292:	f043 0204 	orr.w	r2, r3, #4
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c29a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c29e:	f003 0308 	and.w	r3, r3, #8
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d011      	beq.n	800c2ca <HAL_UART_IRQHandler+0x126>
 800c2a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c2aa:	f003 0320 	and.w	r3, r3, #32
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d105      	bne.n	800c2be <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c2b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c2b6:	f003 0301 	and.w	r3, r3, #1
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d005      	beq.n	800c2ca <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2c2:	f043 0208 	orr.w	r2, r3, #8
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	f000 81f2 	beq.w	800c6b8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c2d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2d8:	f003 0320 	and.w	r3, r3, #32
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d008      	beq.n	800c2f2 <HAL_UART_IRQHandler+0x14e>
 800c2e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c2e4:	f003 0320 	and.w	r3, r3, #32
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d002      	beq.n	800c2f2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c2ec:	6878      	ldr	r0, [r7, #4]
 800c2ee:	f000 faee 	bl	800c8ce <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	695b      	ldr	r3, [r3, #20]
 800c2f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	bf14      	ite	ne
 800c300:	2301      	movne	r3, #1
 800c302:	2300      	moveq	r3, #0
 800c304:	b2db      	uxtb	r3, r3
 800c306:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c30e:	f003 0308 	and.w	r3, r3, #8
 800c312:	2b00      	cmp	r3, #0
 800c314:	d103      	bne.n	800c31e <HAL_UART_IRQHandler+0x17a>
 800c316:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d04f      	beq.n	800c3be <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	f000 f9f8 	bl	800c714 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	695b      	ldr	r3, [r3, #20]
 800c32a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d041      	beq.n	800c3b6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	681b      	ldr	r3, [r3, #0]
 800c336:	3314      	adds	r3, #20
 800c338:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c33c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c340:	e853 3f00 	ldrex	r3, [r3]
 800c344:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c348:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c34c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c350:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	3314      	adds	r3, #20
 800c35a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c35e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c362:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c366:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c36a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c36e:	e841 2300 	strex	r3, r2, [r1]
 800c372:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c376:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	d1d9      	bne.n	800c332 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c382:	2b00      	cmp	r3, #0
 800c384:	d013      	beq.n	800c3ae <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c38a:	4a7e      	ldr	r2, [pc, #504]	; (800c584 <HAL_UART_IRQHandler+0x3e0>)
 800c38c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c392:	4618      	mov	r0, r3
 800c394:	f7fd f86c 	bl	8009470 <HAL_DMA_Abort_IT>
 800c398:	4603      	mov	r3, r0
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d016      	beq.n	800c3cc <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c3a4:	687a      	ldr	r2, [r7, #4]
 800c3a6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c3a8:	4610      	mov	r0, r2
 800c3aa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3ac:	e00e      	b.n	800c3cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c3ae:	6878      	ldr	r0, [r7, #4]
 800c3b0:	f000 f99c 	bl	800c6ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3b4:	e00a      	b.n	800c3cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c3b6:	6878      	ldr	r0, [r7, #4]
 800c3b8:	f000 f998 	bl	800c6ec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3bc:	e006      	b.n	800c3cc <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f000 f994 	bl	800c6ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	2200      	movs	r2, #0
 800c3c8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800c3ca:	e175      	b.n	800c6b8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3cc:	bf00      	nop
    return;
 800c3ce:	e173      	b.n	800c6b8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c3d0:	687b      	ldr	r3, [r7, #4]
 800c3d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3d4:	2b01      	cmp	r3, #1
 800c3d6:	f040 814f 	bne.w	800c678 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c3da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3de:	f003 0310 	and.w	r3, r3, #16
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	f000 8148 	beq.w	800c678 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c3e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c3ec:	f003 0310 	and.w	r3, r3, #16
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	f000 8141 	beq.w	800c678 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c3f6:	2300      	movs	r3, #0
 800c3f8:	60bb      	str	r3, [r7, #8]
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	60bb      	str	r3, [r7, #8]
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	681b      	ldr	r3, [r3, #0]
 800c406:	685b      	ldr	r3, [r3, #4]
 800c408:	60bb      	str	r3, [r7, #8]
 800c40a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	695b      	ldr	r3, [r3, #20]
 800c412:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c416:	2b00      	cmp	r3, #0
 800c418:	f000 80b6 	beq.w	800c588 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c420:	681b      	ldr	r3, [r3, #0]
 800c422:	685b      	ldr	r3, [r3, #4]
 800c424:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c428:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c42c:	2b00      	cmp	r3, #0
 800c42e:	f000 8145 	beq.w	800c6bc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c436:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c43a:	429a      	cmp	r2, r3
 800c43c:	f080 813e 	bcs.w	800c6bc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c446:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c44c:	699b      	ldr	r3, [r3, #24]
 800c44e:	2b20      	cmp	r3, #32
 800c450:	f000 8088 	beq.w	800c564 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	330c      	adds	r3, #12
 800c45a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c45e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c462:	e853 3f00 	ldrex	r3, [r3]
 800c466:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c46a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c46e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c472:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	330c      	adds	r3, #12
 800c47c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c480:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c484:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c488:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c48c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c490:	e841 2300 	strex	r3, r2, [r1]
 800c494:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c498:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d1d9      	bne.n	800c454 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	3314      	adds	r3, #20
 800c4a6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4a8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c4aa:	e853 3f00 	ldrex	r3, [r3]
 800c4ae:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c4b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c4b2:	f023 0301 	bic.w	r3, r3, #1
 800c4b6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	3314      	adds	r3, #20
 800c4c0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c4c4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c4c8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4ca:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c4cc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c4d0:	e841 2300 	strex	r3, r2, [r1]
 800c4d4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c4d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	d1e1      	bne.n	800c4a0 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	3314      	adds	r3, #20
 800c4e2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c4e6:	e853 3f00 	ldrex	r3, [r3]
 800c4ea:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c4ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c4ee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c4f2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	3314      	adds	r3, #20
 800c4fc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c500:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c502:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c504:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c506:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c508:	e841 2300 	strex	r3, r2, [r1]
 800c50c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c50e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c510:	2b00      	cmp	r3, #0
 800c512:	d1e3      	bne.n	800c4dc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	2220      	movs	r2, #32
 800c518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	2200      	movs	r2, #0
 800c520:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	330c      	adds	r3, #12
 800c528:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c52a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c52c:	e853 3f00 	ldrex	r3, [r3]
 800c530:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c532:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c534:	f023 0310 	bic.w	r3, r3, #16
 800c538:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	330c      	adds	r3, #12
 800c542:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c546:	65ba      	str	r2, [r7, #88]	; 0x58
 800c548:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c54a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c54c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c54e:	e841 2300 	strex	r3, r2, [r1]
 800c552:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c554:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c556:	2b00      	cmp	r3, #0
 800c558:	d1e3      	bne.n	800c522 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c55e:	4618      	mov	r0, r3
 800c560:	f7fc ff4b 	bl	80093fa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2202      	movs	r2, #2
 800c568:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c56a:	687b      	ldr	r3, [r7, #4]
 800c56c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c572:	b29b      	uxth	r3, r3
 800c574:	1ad3      	subs	r3, r2, r3
 800c576:	b29b      	uxth	r3, r3
 800c578:	4619      	mov	r1, r3
 800c57a:	6878      	ldr	r0, [r7, #4]
 800c57c:	f000 f8bf 	bl	800c6fe <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c580:	e09c      	b.n	800c6bc <HAL_UART_IRQHandler+0x518>
 800c582:	bf00      	nop
 800c584:	0800c7d9 	.word	0x0800c7d9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c590:	b29b      	uxth	r3, r3
 800c592:	1ad3      	subs	r3, r2, r3
 800c594:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c59c:	b29b      	uxth	r3, r3
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	f000 808e 	beq.w	800c6c0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800c5a4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	f000 8089 	beq.w	800c6c0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	330c      	adds	r3, #12
 800c5b4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5b8:	e853 3f00 	ldrex	r3, [r3]
 800c5bc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c5be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c5c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	330c      	adds	r3, #12
 800c5ce:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c5d2:	647a      	str	r2, [r7, #68]	; 0x44
 800c5d4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5d6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c5d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c5da:	e841 2300 	strex	r3, r2, [r1]
 800c5de:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c5e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d1e3      	bne.n	800c5ae <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	3314      	adds	r3, #20
 800c5ec:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5f0:	e853 3f00 	ldrex	r3, [r3]
 800c5f4:	623b      	str	r3, [r7, #32]
   return(result);
 800c5f6:	6a3b      	ldr	r3, [r7, #32]
 800c5f8:	f023 0301 	bic.w	r3, r3, #1
 800c5fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	681b      	ldr	r3, [r3, #0]
 800c604:	3314      	adds	r3, #20
 800c606:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c60a:	633a      	str	r2, [r7, #48]	; 0x30
 800c60c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c60e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c610:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c612:	e841 2300 	strex	r3, r2, [r1]
 800c616:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	d1e3      	bne.n	800c5e6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	2220      	movs	r2, #32
 800c622:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	2200      	movs	r2, #0
 800c62a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	330c      	adds	r3, #12
 800c632:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c634:	693b      	ldr	r3, [r7, #16]
 800c636:	e853 3f00 	ldrex	r3, [r3]
 800c63a:	60fb      	str	r3, [r7, #12]
   return(result);
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	f023 0310 	bic.w	r3, r3, #16
 800c642:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	681b      	ldr	r3, [r3, #0]
 800c64a:	330c      	adds	r3, #12
 800c64c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c650:	61fa      	str	r2, [r7, #28]
 800c652:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c654:	69b9      	ldr	r1, [r7, #24]
 800c656:	69fa      	ldr	r2, [r7, #28]
 800c658:	e841 2300 	strex	r3, r2, [r1]
 800c65c:	617b      	str	r3, [r7, #20]
   return(result);
 800c65e:	697b      	ldr	r3, [r7, #20]
 800c660:	2b00      	cmp	r3, #0
 800c662:	d1e3      	bne.n	800c62c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2202      	movs	r2, #2
 800c668:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c66a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c66e:	4619      	mov	r1, r3
 800c670:	6878      	ldr	r0, [r7, #4]
 800c672:	f000 f844 	bl	800c6fe <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c676:	e023      	b.n	800c6c0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c67c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c680:	2b00      	cmp	r3, #0
 800c682:	d009      	beq.n	800c698 <HAL_UART_IRQHandler+0x4f4>
 800c684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c688:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d003      	beq.n	800c698 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800c690:	6878      	ldr	r0, [r7, #4]
 800c692:	f000 f8b5 	bl	800c800 <UART_Transmit_IT>
    return;
 800c696:	e014      	b.n	800c6c2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c698:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c69c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d00e      	beq.n	800c6c2 <HAL_UART_IRQHandler+0x51e>
 800c6a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c6a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c6ac:	2b00      	cmp	r3, #0
 800c6ae:	d008      	beq.n	800c6c2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800c6b0:	6878      	ldr	r0, [r7, #4]
 800c6b2:	f000 f8f4 	bl	800c89e <UART_EndTransmit_IT>
    return;
 800c6b6:	e004      	b.n	800c6c2 <HAL_UART_IRQHandler+0x51e>
    return;
 800c6b8:	bf00      	nop
 800c6ba:	e002      	b.n	800c6c2 <HAL_UART_IRQHandler+0x51e>
      return;
 800c6bc:	bf00      	nop
 800c6be:	e000      	b.n	800c6c2 <HAL_UART_IRQHandler+0x51e>
      return;
 800c6c0:	bf00      	nop
  }
}
 800c6c2:	37e8      	adds	r7, #232	; 0xe8
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}

0800c6c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c6c8:	b480      	push	{r7}
 800c6ca:	b083      	sub	sp, #12
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c6d0:	bf00      	nop
 800c6d2:	370c      	adds	r7, #12
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bc80      	pop	{r7}
 800c6d8:	4770      	bx	lr

0800c6da <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c6da:	b480      	push	{r7}
 800c6dc:	b083      	sub	sp, #12
 800c6de:	af00      	add	r7, sp, #0
 800c6e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800c6e2:	bf00      	nop
 800c6e4:	370c      	adds	r7, #12
 800c6e6:	46bd      	mov	sp, r7
 800c6e8:	bc80      	pop	{r7}
 800c6ea:	4770      	bx	lr

0800c6ec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c6ec:	b480      	push	{r7}
 800c6ee:	b083      	sub	sp, #12
 800c6f0:	af00      	add	r7, sp, #0
 800c6f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c6f4:	bf00      	nop
 800c6f6:	370c      	adds	r7, #12
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	bc80      	pop	{r7}
 800c6fc:	4770      	bx	lr

0800c6fe <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c6fe:	b480      	push	{r7}
 800c700:	b083      	sub	sp, #12
 800c702:	af00      	add	r7, sp, #0
 800c704:	6078      	str	r0, [r7, #4]
 800c706:	460b      	mov	r3, r1
 800c708:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c70a:	bf00      	nop
 800c70c:	370c      	adds	r7, #12
 800c70e:	46bd      	mov	sp, r7
 800c710:	bc80      	pop	{r7}
 800c712:	4770      	bx	lr

0800c714 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c714:	b480      	push	{r7}
 800c716:	b095      	sub	sp, #84	; 0x54
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	681b      	ldr	r3, [r3, #0]
 800c720:	330c      	adds	r3, #12
 800c722:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c726:	e853 3f00 	ldrex	r3, [r3]
 800c72a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c72c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c72e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c732:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	681b      	ldr	r3, [r3, #0]
 800c738:	330c      	adds	r3, #12
 800c73a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c73c:	643a      	str	r2, [r7, #64]	; 0x40
 800c73e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c740:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c742:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c744:	e841 2300 	strex	r3, r2, [r1]
 800c748:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c74a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d1e5      	bne.n	800c71c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	3314      	adds	r3, #20
 800c756:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c758:	6a3b      	ldr	r3, [r7, #32]
 800c75a:	e853 3f00 	ldrex	r3, [r3]
 800c75e:	61fb      	str	r3, [r7, #28]
   return(result);
 800c760:	69fb      	ldr	r3, [r7, #28]
 800c762:	f023 0301 	bic.w	r3, r3, #1
 800c766:	64bb      	str	r3, [r7, #72]	; 0x48
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	3314      	adds	r3, #20
 800c76e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c770:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c772:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c774:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c776:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c778:	e841 2300 	strex	r3, r2, [r1]
 800c77c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c77e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c780:	2b00      	cmp	r3, #0
 800c782:	d1e5      	bne.n	800c750 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c788:	2b01      	cmp	r3, #1
 800c78a:	d119      	bne.n	800c7c0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	330c      	adds	r3, #12
 800c792:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	e853 3f00 	ldrex	r3, [r3]
 800c79a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c79c:	68bb      	ldr	r3, [r7, #8]
 800c79e:	f023 0310 	bic.w	r3, r3, #16
 800c7a2:	647b      	str	r3, [r7, #68]	; 0x44
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	681b      	ldr	r3, [r3, #0]
 800c7a8:	330c      	adds	r3, #12
 800c7aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c7ac:	61ba      	str	r2, [r7, #24]
 800c7ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7b0:	6979      	ldr	r1, [r7, #20]
 800c7b2:	69ba      	ldr	r2, [r7, #24]
 800c7b4:	e841 2300 	strex	r3, r2, [r1]
 800c7b8:	613b      	str	r3, [r7, #16]
   return(result);
 800c7ba:	693b      	ldr	r3, [r7, #16]
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d1e5      	bne.n	800c78c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	2220      	movs	r2, #32
 800c7c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	2200      	movs	r2, #0
 800c7cc:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c7ce:	bf00      	nop
 800c7d0:	3754      	adds	r7, #84	; 0x54
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	bc80      	pop	{r7}
 800c7d6:	4770      	bx	lr

0800c7d8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b084      	sub	sp, #16
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c7ec:	68fb      	ldr	r3, [r7, #12]
 800c7ee:	2200      	movs	r2, #0
 800c7f0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c7f2:	68f8      	ldr	r0, [r7, #12]
 800c7f4:	f7ff ff7a 	bl	800c6ec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c7f8:	bf00      	nop
 800c7fa:	3710      	adds	r7, #16
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bd80      	pop	{r7, pc}

0800c800 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c800:	b480      	push	{r7}
 800c802:	b085      	sub	sp, #20
 800c804:	af00      	add	r7, sp, #0
 800c806:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c80e:	b2db      	uxtb	r3, r3
 800c810:	2b21      	cmp	r3, #33	; 0x21
 800c812:	d13e      	bne.n	800c892 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	689b      	ldr	r3, [r3, #8]
 800c818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c81c:	d114      	bne.n	800c848 <UART_Transmit_IT+0x48>
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	691b      	ldr	r3, [r3, #16]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d110      	bne.n	800c848 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	6a1b      	ldr	r3, [r3, #32]
 800c82a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c82c:	68fb      	ldr	r3, [r7, #12]
 800c82e:	881b      	ldrh	r3, [r3, #0]
 800c830:	461a      	mov	r2, r3
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	681b      	ldr	r3, [r3, #0]
 800c836:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c83a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	6a1b      	ldr	r3, [r3, #32]
 800c840:	1c9a      	adds	r2, r3, #2
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	621a      	str	r2, [r3, #32]
 800c846:	e008      	b.n	800c85a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	6a1b      	ldr	r3, [r3, #32]
 800c84c:	1c59      	adds	r1, r3, #1
 800c84e:	687a      	ldr	r2, [r7, #4]
 800c850:	6211      	str	r1, [r2, #32]
 800c852:	781a      	ldrb	r2, [r3, #0]
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c85e:	b29b      	uxth	r3, r3
 800c860:	3b01      	subs	r3, #1
 800c862:	b29b      	uxth	r3, r3
 800c864:	687a      	ldr	r2, [r7, #4]
 800c866:	4619      	mov	r1, r3
 800c868:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d10f      	bne.n	800c88e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	68da      	ldr	r2, [r3, #12]
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c87c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	68da      	ldr	r2, [r3, #12]
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c88c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c88e:	2300      	movs	r3, #0
 800c890:	e000      	b.n	800c894 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c892:	2302      	movs	r3, #2
  }
}
 800c894:	4618      	mov	r0, r3
 800c896:	3714      	adds	r7, #20
 800c898:	46bd      	mov	sp, r7
 800c89a:	bc80      	pop	{r7}
 800c89c:	4770      	bx	lr

0800c89e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c89e:	b580      	push	{r7, lr}
 800c8a0:	b082      	sub	sp, #8
 800c8a2:	af00      	add	r7, sp, #0
 800c8a4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	681b      	ldr	r3, [r3, #0]
 800c8aa:	68da      	ldr	r2, [r3, #12]
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c8b4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	2220      	movs	r2, #32
 800c8ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c8be:	6878      	ldr	r0, [r7, #4]
 800c8c0:	f7ff ff02 	bl	800c6c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c8c4:	2300      	movs	r3, #0
}
 800c8c6:	4618      	mov	r0, r3
 800c8c8:	3708      	adds	r7, #8
 800c8ca:	46bd      	mov	sp, r7
 800c8cc:	bd80      	pop	{r7, pc}

0800c8ce <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c8ce:	b580      	push	{r7, lr}
 800c8d0:	b08c      	sub	sp, #48	; 0x30
 800c8d2:	af00      	add	r7, sp, #0
 800c8d4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c8dc:	b2db      	uxtb	r3, r3
 800c8de:	2b22      	cmp	r3, #34	; 0x22
 800c8e0:	f040 80ae 	bne.w	800ca40 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	689b      	ldr	r3, [r3, #8]
 800c8e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c8ec:	d117      	bne.n	800c91e <UART_Receive_IT+0x50>
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	691b      	ldr	r3, [r3, #16]
 800c8f2:	2b00      	cmp	r3, #0
 800c8f4:	d113      	bne.n	800c91e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c8f6:	2300      	movs	r3, #0
 800c8f8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8fe:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	685b      	ldr	r3, [r3, #4]
 800c906:	b29b      	uxth	r3, r3
 800c908:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c90c:	b29a      	uxth	r2, r3
 800c90e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c910:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c916:	1c9a      	adds	r2, r3, #2
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	629a      	str	r2, [r3, #40]	; 0x28
 800c91c:	e026      	b.n	800c96c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c922:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c924:	2300      	movs	r3, #0
 800c926:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	689b      	ldr	r3, [r3, #8]
 800c92c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c930:	d007      	beq.n	800c942 <UART_Receive_IT+0x74>
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	689b      	ldr	r3, [r3, #8]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d10a      	bne.n	800c950 <UART_Receive_IT+0x82>
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	691b      	ldr	r3, [r3, #16]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d106      	bne.n	800c950 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	685b      	ldr	r3, [r3, #4]
 800c948:	b2da      	uxtb	r2, r3
 800c94a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c94c:	701a      	strb	r2, [r3, #0]
 800c94e:	e008      	b.n	800c962 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	685b      	ldr	r3, [r3, #4]
 800c956:	b2db      	uxtb	r3, r3
 800c958:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c95c:	b2da      	uxtb	r2, r3
 800c95e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c960:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c962:	687b      	ldr	r3, [r7, #4]
 800c964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c966:	1c5a      	adds	r2, r3, #1
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c970:	b29b      	uxth	r3, r3
 800c972:	3b01      	subs	r3, #1
 800c974:	b29b      	uxth	r3, r3
 800c976:	687a      	ldr	r2, [r7, #4]
 800c978:	4619      	mov	r1, r3
 800c97a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d15d      	bne.n	800ca3c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	68da      	ldr	r2, [r3, #12]
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	f022 0220 	bic.w	r2, r2, #32
 800c98e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	68da      	ldr	r2, [r3, #12]
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c99e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c9a0:	687b      	ldr	r3, [r7, #4]
 800c9a2:	681b      	ldr	r3, [r3, #0]
 800c9a4:	695a      	ldr	r2, [r3, #20]
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	f022 0201 	bic.w	r2, r2, #1
 800c9ae:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	2220      	movs	r2, #32
 800c9b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	2200      	movs	r2, #0
 800c9bc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c9c2:	2b01      	cmp	r3, #1
 800c9c4:	d135      	bne.n	800ca32 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	2200      	movs	r2, #0
 800c9ca:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c9cc:	687b      	ldr	r3, [r7, #4]
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	330c      	adds	r3, #12
 800c9d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9d4:	697b      	ldr	r3, [r7, #20]
 800c9d6:	e853 3f00 	ldrex	r3, [r3]
 800c9da:	613b      	str	r3, [r7, #16]
   return(result);
 800c9dc:	693b      	ldr	r3, [r7, #16]
 800c9de:	f023 0310 	bic.w	r3, r3, #16
 800c9e2:	627b      	str	r3, [r7, #36]	; 0x24
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	681b      	ldr	r3, [r3, #0]
 800c9e8:	330c      	adds	r3, #12
 800c9ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c9ec:	623a      	str	r2, [r7, #32]
 800c9ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9f0:	69f9      	ldr	r1, [r7, #28]
 800c9f2:	6a3a      	ldr	r2, [r7, #32]
 800c9f4:	e841 2300 	strex	r3, r2, [r1]
 800c9f8:	61bb      	str	r3, [r7, #24]
   return(result);
 800c9fa:	69bb      	ldr	r3, [r7, #24]
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d1e5      	bne.n	800c9cc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	681b      	ldr	r3, [r3, #0]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	f003 0310 	and.w	r3, r3, #16
 800ca0a:	2b10      	cmp	r3, #16
 800ca0c:	d10a      	bne.n	800ca24 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ca0e:	2300      	movs	r3, #0
 800ca10:	60fb      	str	r3, [r7, #12]
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	60fb      	str	r3, [r7, #12]
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	685b      	ldr	r3, [r3, #4]
 800ca20:	60fb      	str	r3, [r7, #12]
 800ca22:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800ca28:	4619      	mov	r1, r3
 800ca2a:	6878      	ldr	r0, [r7, #4]
 800ca2c:	f7ff fe67 	bl	800c6fe <HAL_UARTEx_RxEventCallback>
 800ca30:	e002      	b.n	800ca38 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800ca32:	6878      	ldr	r0, [r7, #4]
 800ca34:	f7ff fe51 	bl	800c6da <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800ca38:	2300      	movs	r3, #0
 800ca3a:	e002      	b.n	800ca42 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800ca3c:	2300      	movs	r3, #0
 800ca3e:	e000      	b.n	800ca42 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800ca40:	2302      	movs	r3, #2
  }
}
 800ca42:	4618      	mov	r0, r3
 800ca44:	3730      	adds	r7, #48	; 0x30
 800ca46:	46bd      	mov	sp, r7
 800ca48:	bd80      	pop	{r7, pc}
	...

0800ca4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b084      	sub	sp, #16
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	691b      	ldr	r3, [r3, #16]
 800ca5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	68da      	ldr	r2, [r3, #12]
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	430a      	orrs	r2, r1
 800ca68:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	689a      	ldr	r2, [r3, #8]
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	691b      	ldr	r3, [r3, #16]
 800ca72:	431a      	orrs	r2, r3
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	695b      	ldr	r3, [r3, #20]
 800ca78:	4313      	orrs	r3, r2
 800ca7a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	68db      	ldr	r3, [r3, #12]
 800ca82:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800ca86:	f023 030c 	bic.w	r3, r3, #12
 800ca8a:	687a      	ldr	r2, [r7, #4]
 800ca8c:	6812      	ldr	r2, [r2, #0]
 800ca8e:	68b9      	ldr	r1, [r7, #8]
 800ca90:	430b      	orrs	r3, r1
 800ca92:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	695b      	ldr	r3, [r3, #20]
 800ca9a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	699a      	ldr	r2, [r3, #24]
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	430a      	orrs	r2, r1
 800caa8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	4a2c      	ldr	r2, [pc, #176]	; (800cb60 <UART_SetConfig+0x114>)
 800cab0:	4293      	cmp	r3, r2
 800cab2:	d103      	bne.n	800cabc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800cab4:	f7fe fe8c 	bl	800b7d0 <HAL_RCC_GetPCLK2Freq>
 800cab8:	60f8      	str	r0, [r7, #12]
 800caba:	e002      	b.n	800cac2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800cabc:	f7fe fe74 	bl	800b7a8 <HAL_RCC_GetPCLK1Freq>
 800cac0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cac2:	68fa      	ldr	r2, [r7, #12]
 800cac4:	4613      	mov	r3, r2
 800cac6:	009b      	lsls	r3, r3, #2
 800cac8:	4413      	add	r3, r2
 800caca:	009a      	lsls	r2, r3, #2
 800cacc:	441a      	add	r2, r3
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	685b      	ldr	r3, [r3, #4]
 800cad2:	009b      	lsls	r3, r3, #2
 800cad4:	fbb2 f3f3 	udiv	r3, r2, r3
 800cad8:	4a22      	ldr	r2, [pc, #136]	; (800cb64 <UART_SetConfig+0x118>)
 800cada:	fba2 2303 	umull	r2, r3, r2, r3
 800cade:	095b      	lsrs	r3, r3, #5
 800cae0:	0119      	lsls	r1, r3, #4
 800cae2:	68fa      	ldr	r2, [r7, #12]
 800cae4:	4613      	mov	r3, r2
 800cae6:	009b      	lsls	r3, r3, #2
 800cae8:	4413      	add	r3, r2
 800caea:	009a      	lsls	r2, r3, #2
 800caec:	441a      	add	r2, r3
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	685b      	ldr	r3, [r3, #4]
 800caf2:	009b      	lsls	r3, r3, #2
 800caf4:	fbb2 f2f3 	udiv	r2, r2, r3
 800caf8:	4b1a      	ldr	r3, [pc, #104]	; (800cb64 <UART_SetConfig+0x118>)
 800cafa:	fba3 0302 	umull	r0, r3, r3, r2
 800cafe:	095b      	lsrs	r3, r3, #5
 800cb00:	2064      	movs	r0, #100	; 0x64
 800cb02:	fb00 f303 	mul.w	r3, r0, r3
 800cb06:	1ad3      	subs	r3, r2, r3
 800cb08:	011b      	lsls	r3, r3, #4
 800cb0a:	3332      	adds	r3, #50	; 0x32
 800cb0c:	4a15      	ldr	r2, [pc, #84]	; (800cb64 <UART_SetConfig+0x118>)
 800cb0e:	fba2 2303 	umull	r2, r3, r2, r3
 800cb12:	095b      	lsrs	r3, r3, #5
 800cb14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cb18:	4419      	add	r1, r3
 800cb1a:	68fa      	ldr	r2, [r7, #12]
 800cb1c:	4613      	mov	r3, r2
 800cb1e:	009b      	lsls	r3, r3, #2
 800cb20:	4413      	add	r3, r2
 800cb22:	009a      	lsls	r2, r3, #2
 800cb24:	441a      	add	r2, r3
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	685b      	ldr	r3, [r3, #4]
 800cb2a:	009b      	lsls	r3, r3, #2
 800cb2c:	fbb2 f2f3 	udiv	r2, r2, r3
 800cb30:	4b0c      	ldr	r3, [pc, #48]	; (800cb64 <UART_SetConfig+0x118>)
 800cb32:	fba3 0302 	umull	r0, r3, r3, r2
 800cb36:	095b      	lsrs	r3, r3, #5
 800cb38:	2064      	movs	r0, #100	; 0x64
 800cb3a:	fb00 f303 	mul.w	r3, r0, r3
 800cb3e:	1ad3      	subs	r3, r2, r3
 800cb40:	011b      	lsls	r3, r3, #4
 800cb42:	3332      	adds	r3, #50	; 0x32
 800cb44:	4a07      	ldr	r2, [pc, #28]	; (800cb64 <UART_SetConfig+0x118>)
 800cb46:	fba2 2303 	umull	r2, r3, r2, r3
 800cb4a:	095b      	lsrs	r3, r3, #5
 800cb4c:	f003 020f 	and.w	r2, r3, #15
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	440a      	add	r2, r1
 800cb56:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800cb58:	bf00      	nop
 800cb5a:	3710      	adds	r7, #16
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	bd80      	pop	{r7, pc}
 800cb60:	40013800 	.word	0x40013800
 800cb64:	51eb851f 	.word	0x51eb851f

0800cb68 <__itoa>:
 800cb68:	1e93      	subs	r3, r2, #2
 800cb6a:	2b22      	cmp	r3, #34	; 0x22
 800cb6c:	b510      	push	{r4, lr}
 800cb6e:	460c      	mov	r4, r1
 800cb70:	d904      	bls.n	800cb7c <__itoa+0x14>
 800cb72:	2300      	movs	r3, #0
 800cb74:	461c      	mov	r4, r3
 800cb76:	700b      	strb	r3, [r1, #0]
 800cb78:	4620      	mov	r0, r4
 800cb7a:	bd10      	pop	{r4, pc}
 800cb7c:	2a0a      	cmp	r2, #10
 800cb7e:	d109      	bne.n	800cb94 <__itoa+0x2c>
 800cb80:	2800      	cmp	r0, #0
 800cb82:	da07      	bge.n	800cb94 <__itoa+0x2c>
 800cb84:	232d      	movs	r3, #45	; 0x2d
 800cb86:	700b      	strb	r3, [r1, #0]
 800cb88:	2101      	movs	r1, #1
 800cb8a:	4240      	negs	r0, r0
 800cb8c:	4421      	add	r1, r4
 800cb8e:	f000 f8b9 	bl	800cd04 <__utoa>
 800cb92:	e7f1      	b.n	800cb78 <__itoa+0x10>
 800cb94:	2100      	movs	r1, #0
 800cb96:	e7f9      	b.n	800cb8c <__itoa+0x24>

0800cb98 <itoa>:
 800cb98:	f7ff bfe6 	b.w	800cb68 <__itoa>

0800cb9c <malloc>:
 800cb9c:	4b02      	ldr	r3, [pc, #8]	; (800cba8 <malloc+0xc>)
 800cb9e:	4601      	mov	r1, r0
 800cba0:	6818      	ldr	r0, [r3, #0]
 800cba2:	f000 b823 	b.w	800cbec <_malloc_r>
 800cba6:	bf00      	nop
 800cba8:	20000a0c 	.word	0x20000a0c

0800cbac <sbrk_aligned>:
 800cbac:	b570      	push	{r4, r5, r6, lr}
 800cbae:	4e0e      	ldr	r6, [pc, #56]	; (800cbe8 <sbrk_aligned+0x3c>)
 800cbb0:	460c      	mov	r4, r1
 800cbb2:	6831      	ldr	r1, [r6, #0]
 800cbb4:	4605      	mov	r5, r0
 800cbb6:	b911      	cbnz	r1, 800cbbe <sbrk_aligned+0x12>
 800cbb8:	f000 f91e 	bl	800cdf8 <_sbrk_r>
 800cbbc:	6030      	str	r0, [r6, #0]
 800cbbe:	4621      	mov	r1, r4
 800cbc0:	4628      	mov	r0, r5
 800cbc2:	f000 f919 	bl	800cdf8 <_sbrk_r>
 800cbc6:	1c43      	adds	r3, r0, #1
 800cbc8:	d00a      	beq.n	800cbe0 <sbrk_aligned+0x34>
 800cbca:	1cc4      	adds	r4, r0, #3
 800cbcc:	f024 0403 	bic.w	r4, r4, #3
 800cbd0:	42a0      	cmp	r0, r4
 800cbd2:	d007      	beq.n	800cbe4 <sbrk_aligned+0x38>
 800cbd4:	1a21      	subs	r1, r4, r0
 800cbd6:	4628      	mov	r0, r5
 800cbd8:	f000 f90e 	bl	800cdf8 <_sbrk_r>
 800cbdc:	3001      	adds	r0, #1
 800cbde:	d101      	bne.n	800cbe4 <sbrk_aligned+0x38>
 800cbe0:	f04f 34ff 	mov.w	r4, #4294967295
 800cbe4:	4620      	mov	r0, r4
 800cbe6:	bd70      	pop	{r4, r5, r6, pc}
 800cbe8:	20000ed8 	.word	0x20000ed8

0800cbec <_malloc_r>:
 800cbec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbf0:	1ccd      	adds	r5, r1, #3
 800cbf2:	f025 0503 	bic.w	r5, r5, #3
 800cbf6:	3508      	adds	r5, #8
 800cbf8:	2d0c      	cmp	r5, #12
 800cbfa:	bf38      	it	cc
 800cbfc:	250c      	movcc	r5, #12
 800cbfe:	2d00      	cmp	r5, #0
 800cc00:	4607      	mov	r7, r0
 800cc02:	db01      	blt.n	800cc08 <_malloc_r+0x1c>
 800cc04:	42a9      	cmp	r1, r5
 800cc06:	d905      	bls.n	800cc14 <_malloc_r+0x28>
 800cc08:	230c      	movs	r3, #12
 800cc0a:	2600      	movs	r6, #0
 800cc0c:	603b      	str	r3, [r7, #0]
 800cc0e:	4630      	mov	r0, r6
 800cc10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc14:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800cce8 <_malloc_r+0xfc>
 800cc18:	f000 f868 	bl	800ccec <__malloc_lock>
 800cc1c:	f8d8 3000 	ldr.w	r3, [r8]
 800cc20:	461c      	mov	r4, r3
 800cc22:	bb5c      	cbnz	r4, 800cc7c <_malloc_r+0x90>
 800cc24:	4629      	mov	r1, r5
 800cc26:	4638      	mov	r0, r7
 800cc28:	f7ff ffc0 	bl	800cbac <sbrk_aligned>
 800cc2c:	1c43      	adds	r3, r0, #1
 800cc2e:	4604      	mov	r4, r0
 800cc30:	d155      	bne.n	800ccde <_malloc_r+0xf2>
 800cc32:	f8d8 4000 	ldr.w	r4, [r8]
 800cc36:	4626      	mov	r6, r4
 800cc38:	2e00      	cmp	r6, #0
 800cc3a:	d145      	bne.n	800ccc8 <_malloc_r+0xdc>
 800cc3c:	2c00      	cmp	r4, #0
 800cc3e:	d048      	beq.n	800ccd2 <_malloc_r+0xe6>
 800cc40:	6823      	ldr	r3, [r4, #0]
 800cc42:	4631      	mov	r1, r6
 800cc44:	4638      	mov	r0, r7
 800cc46:	eb04 0903 	add.w	r9, r4, r3
 800cc4a:	f000 f8d5 	bl	800cdf8 <_sbrk_r>
 800cc4e:	4581      	cmp	r9, r0
 800cc50:	d13f      	bne.n	800ccd2 <_malloc_r+0xe6>
 800cc52:	6821      	ldr	r1, [r4, #0]
 800cc54:	4638      	mov	r0, r7
 800cc56:	1a6d      	subs	r5, r5, r1
 800cc58:	4629      	mov	r1, r5
 800cc5a:	f7ff ffa7 	bl	800cbac <sbrk_aligned>
 800cc5e:	3001      	adds	r0, #1
 800cc60:	d037      	beq.n	800ccd2 <_malloc_r+0xe6>
 800cc62:	6823      	ldr	r3, [r4, #0]
 800cc64:	442b      	add	r3, r5
 800cc66:	6023      	str	r3, [r4, #0]
 800cc68:	f8d8 3000 	ldr.w	r3, [r8]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d038      	beq.n	800cce2 <_malloc_r+0xf6>
 800cc70:	685a      	ldr	r2, [r3, #4]
 800cc72:	42a2      	cmp	r2, r4
 800cc74:	d12b      	bne.n	800ccce <_malloc_r+0xe2>
 800cc76:	2200      	movs	r2, #0
 800cc78:	605a      	str	r2, [r3, #4]
 800cc7a:	e00f      	b.n	800cc9c <_malloc_r+0xb0>
 800cc7c:	6822      	ldr	r2, [r4, #0]
 800cc7e:	1b52      	subs	r2, r2, r5
 800cc80:	d41f      	bmi.n	800ccc2 <_malloc_r+0xd6>
 800cc82:	2a0b      	cmp	r2, #11
 800cc84:	d917      	bls.n	800ccb6 <_malloc_r+0xca>
 800cc86:	1961      	adds	r1, r4, r5
 800cc88:	42a3      	cmp	r3, r4
 800cc8a:	6025      	str	r5, [r4, #0]
 800cc8c:	bf18      	it	ne
 800cc8e:	6059      	strne	r1, [r3, #4]
 800cc90:	6863      	ldr	r3, [r4, #4]
 800cc92:	bf08      	it	eq
 800cc94:	f8c8 1000 	streq.w	r1, [r8]
 800cc98:	5162      	str	r2, [r4, r5]
 800cc9a:	604b      	str	r3, [r1, #4]
 800cc9c:	4638      	mov	r0, r7
 800cc9e:	f104 060b 	add.w	r6, r4, #11
 800cca2:	f000 f829 	bl	800ccf8 <__malloc_unlock>
 800cca6:	f026 0607 	bic.w	r6, r6, #7
 800ccaa:	1d23      	adds	r3, r4, #4
 800ccac:	1af2      	subs	r2, r6, r3
 800ccae:	d0ae      	beq.n	800cc0e <_malloc_r+0x22>
 800ccb0:	1b9b      	subs	r3, r3, r6
 800ccb2:	50a3      	str	r3, [r4, r2]
 800ccb4:	e7ab      	b.n	800cc0e <_malloc_r+0x22>
 800ccb6:	42a3      	cmp	r3, r4
 800ccb8:	6862      	ldr	r2, [r4, #4]
 800ccba:	d1dd      	bne.n	800cc78 <_malloc_r+0x8c>
 800ccbc:	f8c8 2000 	str.w	r2, [r8]
 800ccc0:	e7ec      	b.n	800cc9c <_malloc_r+0xb0>
 800ccc2:	4623      	mov	r3, r4
 800ccc4:	6864      	ldr	r4, [r4, #4]
 800ccc6:	e7ac      	b.n	800cc22 <_malloc_r+0x36>
 800ccc8:	4634      	mov	r4, r6
 800ccca:	6876      	ldr	r6, [r6, #4]
 800cccc:	e7b4      	b.n	800cc38 <_malloc_r+0x4c>
 800ccce:	4613      	mov	r3, r2
 800ccd0:	e7cc      	b.n	800cc6c <_malloc_r+0x80>
 800ccd2:	230c      	movs	r3, #12
 800ccd4:	4638      	mov	r0, r7
 800ccd6:	603b      	str	r3, [r7, #0]
 800ccd8:	f000 f80e 	bl	800ccf8 <__malloc_unlock>
 800ccdc:	e797      	b.n	800cc0e <_malloc_r+0x22>
 800ccde:	6025      	str	r5, [r4, #0]
 800cce0:	e7dc      	b.n	800cc9c <_malloc_r+0xb0>
 800cce2:	605b      	str	r3, [r3, #4]
 800cce4:	deff      	udf	#255	; 0xff
 800cce6:	bf00      	nop
 800cce8:	20000ed4 	.word	0x20000ed4

0800ccec <__malloc_lock>:
 800ccec:	4801      	ldr	r0, [pc, #4]	; (800ccf4 <__malloc_lock+0x8>)
 800ccee:	f000 b8bd 	b.w	800ce6c <__retarget_lock_acquire_recursive>
 800ccf2:	bf00      	nop
 800ccf4:	20001018 	.word	0x20001018

0800ccf8 <__malloc_unlock>:
 800ccf8:	4801      	ldr	r0, [pc, #4]	; (800cd00 <__malloc_unlock+0x8>)
 800ccfa:	f000 b8b8 	b.w	800ce6e <__retarget_lock_release_recursive>
 800ccfe:	bf00      	nop
 800cd00:	20001018 	.word	0x20001018

0800cd04 <__utoa>:
 800cd04:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cd06:	b08b      	sub	sp, #44	; 0x2c
 800cd08:	4605      	mov	r5, r0
 800cd0a:	460b      	mov	r3, r1
 800cd0c:	466e      	mov	r6, sp
 800cd0e:	4c1d      	ldr	r4, [pc, #116]	; (800cd84 <__utoa+0x80>)
 800cd10:	f104 0c20 	add.w	ip, r4, #32
 800cd14:	4637      	mov	r7, r6
 800cd16:	6820      	ldr	r0, [r4, #0]
 800cd18:	6861      	ldr	r1, [r4, #4]
 800cd1a:	3408      	adds	r4, #8
 800cd1c:	c703      	stmia	r7!, {r0, r1}
 800cd1e:	4564      	cmp	r4, ip
 800cd20:	463e      	mov	r6, r7
 800cd22:	d1f7      	bne.n	800cd14 <__utoa+0x10>
 800cd24:	7921      	ldrb	r1, [r4, #4]
 800cd26:	6820      	ldr	r0, [r4, #0]
 800cd28:	7139      	strb	r1, [r7, #4]
 800cd2a:	1e91      	subs	r1, r2, #2
 800cd2c:	2922      	cmp	r1, #34	; 0x22
 800cd2e:	6038      	str	r0, [r7, #0]
 800cd30:	f04f 0100 	mov.w	r1, #0
 800cd34:	d904      	bls.n	800cd40 <__utoa+0x3c>
 800cd36:	7019      	strb	r1, [r3, #0]
 800cd38:	460b      	mov	r3, r1
 800cd3a:	4618      	mov	r0, r3
 800cd3c:	b00b      	add	sp, #44	; 0x2c
 800cd3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd40:	1e58      	subs	r0, r3, #1
 800cd42:	4684      	mov	ip, r0
 800cd44:	fbb5 f7f2 	udiv	r7, r5, r2
 800cd48:	fb02 5617 	mls	r6, r2, r7, r5
 800cd4c:	3628      	adds	r6, #40	; 0x28
 800cd4e:	446e      	add	r6, sp
 800cd50:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800cd54:	460c      	mov	r4, r1
 800cd56:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800cd5a:	462e      	mov	r6, r5
 800cd5c:	42b2      	cmp	r2, r6
 800cd5e:	463d      	mov	r5, r7
 800cd60:	f101 0101 	add.w	r1, r1, #1
 800cd64:	d9ee      	bls.n	800cd44 <__utoa+0x40>
 800cd66:	2200      	movs	r2, #0
 800cd68:	545a      	strb	r2, [r3, r1]
 800cd6a:	1919      	adds	r1, r3, r4
 800cd6c:	1aa5      	subs	r5, r4, r2
 800cd6e:	42aa      	cmp	r2, r5
 800cd70:	dae3      	bge.n	800cd3a <__utoa+0x36>
 800cd72:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800cd76:	780e      	ldrb	r6, [r1, #0]
 800cd78:	3201      	adds	r2, #1
 800cd7a:	7006      	strb	r6, [r0, #0]
 800cd7c:	f801 5901 	strb.w	r5, [r1], #-1
 800cd80:	e7f4      	b.n	800cd6c <__utoa+0x68>
 800cd82:	bf00      	nop
 800cd84:	0800e4b6 	.word	0x0800e4b6

0800cd88 <siprintf>:
 800cd88:	b40e      	push	{r1, r2, r3}
 800cd8a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cd8e:	b500      	push	{lr}
 800cd90:	b09c      	sub	sp, #112	; 0x70
 800cd92:	ab1d      	add	r3, sp, #116	; 0x74
 800cd94:	9002      	str	r0, [sp, #8]
 800cd96:	9006      	str	r0, [sp, #24]
 800cd98:	9107      	str	r1, [sp, #28]
 800cd9a:	9104      	str	r1, [sp, #16]
 800cd9c:	4808      	ldr	r0, [pc, #32]	; (800cdc0 <siprintf+0x38>)
 800cd9e:	4909      	ldr	r1, [pc, #36]	; (800cdc4 <siprintf+0x3c>)
 800cda0:	f853 2b04 	ldr.w	r2, [r3], #4
 800cda4:	9105      	str	r1, [sp, #20]
 800cda6:	6800      	ldr	r0, [r0, #0]
 800cda8:	a902      	add	r1, sp, #8
 800cdaa:	9301      	str	r3, [sp, #4]
 800cdac:	f000 f90a 	bl	800cfc4 <_svfiprintf_r>
 800cdb0:	2200      	movs	r2, #0
 800cdb2:	9b02      	ldr	r3, [sp, #8]
 800cdb4:	701a      	strb	r2, [r3, #0]
 800cdb6:	b01c      	add	sp, #112	; 0x70
 800cdb8:	f85d eb04 	ldr.w	lr, [sp], #4
 800cdbc:	b003      	add	sp, #12
 800cdbe:	4770      	bx	lr
 800cdc0:	20000a0c 	.word	0x20000a0c
 800cdc4:	ffff0208 	.word	0xffff0208

0800cdc8 <memset>:
 800cdc8:	4603      	mov	r3, r0
 800cdca:	4402      	add	r2, r0
 800cdcc:	4293      	cmp	r3, r2
 800cdce:	d100      	bne.n	800cdd2 <memset+0xa>
 800cdd0:	4770      	bx	lr
 800cdd2:	f803 1b01 	strb.w	r1, [r3], #1
 800cdd6:	e7f9      	b.n	800cdcc <memset+0x4>

0800cdd8 <strcat>:
 800cdd8:	4602      	mov	r2, r0
 800cdda:	b510      	push	{r4, lr}
 800cddc:	7814      	ldrb	r4, [r2, #0]
 800cdde:	4613      	mov	r3, r2
 800cde0:	3201      	adds	r2, #1
 800cde2:	2c00      	cmp	r4, #0
 800cde4:	d1fa      	bne.n	800cddc <strcat+0x4>
 800cde6:	3b01      	subs	r3, #1
 800cde8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cdec:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cdf0:	2a00      	cmp	r2, #0
 800cdf2:	d1f9      	bne.n	800cde8 <strcat+0x10>
 800cdf4:	bd10      	pop	{r4, pc}
	...

0800cdf8 <_sbrk_r>:
 800cdf8:	b538      	push	{r3, r4, r5, lr}
 800cdfa:	2300      	movs	r3, #0
 800cdfc:	4d05      	ldr	r5, [pc, #20]	; (800ce14 <_sbrk_r+0x1c>)
 800cdfe:	4604      	mov	r4, r0
 800ce00:	4608      	mov	r0, r1
 800ce02:	602b      	str	r3, [r5, #0]
 800ce04:	f7fc f808 	bl	8008e18 <_sbrk>
 800ce08:	1c43      	adds	r3, r0, #1
 800ce0a:	d102      	bne.n	800ce12 <_sbrk_r+0x1a>
 800ce0c:	682b      	ldr	r3, [r5, #0]
 800ce0e:	b103      	cbz	r3, 800ce12 <_sbrk_r+0x1a>
 800ce10:	6023      	str	r3, [r4, #0]
 800ce12:	bd38      	pop	{r3, r4, r5, pc}
 800ce14:	20001014 	.word	0x20001014

0800ce18 <__errno>:
 800ce18:	4b01      	ldr	r3, [pc, #4]	; (800ce20 <__errno+0x8>)
 800ce1a:	6818      	ldr	r0, [r3, #0]
 800ce1c:	4770      	bx	lr
 800ce1e:	bf00      	nop
 800ce20:	20000a0c 	.word	0x20000a0c

0800ce24 <__libc_init_array>:
 800ce24:	b570      	push	{r4, r5, r6, lr}
 800ce26:	2600      	movs	r6, #0
 800ce28:	4d0c      	ldr	r5, [pc, #48]	; (800ce5c <__libc_init_array+0x38>)
 800ce2a:	4c0d      	ldr	r4, [pc, #52]	; (800ce60 <__libc_init_array+0x3c>)
 800ce2c:	1b64      	subs	r4, r4, r5
 800ce2e:	10a4      	asrs	r4, r4, #2
 800ce30:	42a6      	cmp	r6, r4
 800ce32:	d109      	bne.n	800ce48 <__libc_init_array+0x24>
 800ce34:	f000 fbc6 	bl	800d5c4 <_init>
 800ce38:	2600      	movs	r6, #0
 800ce3a:	4d0a      	ldr	r5, [pc, #40]	; (800ce64 <__libc_init_array+0x40>)
 800ce3c:	4c0a      	ldr	r4, [pc, #40]	; (800ce68 <__libc_init_array+0x44>)
 800ce3e:	1b64      	subs	r4, r4, r5
 800ce40:	10a4      	asrs	r4, r4, #2
 800ce42:	42a6      	cmp	r6, r4
 800ce44:	d105      	bne.n	800ce52 <__libc_init_array+0x2e>
 800ce46:	bd70      	pop	{r4, r5, r6, pc}
 800ce48:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce4c:	4798      	blx	r3
 800ce4e:	3601      	adds	r6, #1
 800ce50:	e7ee      	b.n	800ce30 <__libc_init_array+0xc>
 800ce52:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce56:	4798      	blx	r3
 800ce58:	3601      	adds	r6, #1
 800ce5a:	e7f2      	b.n	800ce42 <__libc_init_array+0x1e>
 800ce5c:	0800e510 	.word	0x0800e510
 800ce60:	0800e510 	.word	0x0800e510
 800ce64:	0800e510 	.word	0x0800e510
 800ce68:	0800e514 	.word	0x0800e514

0800ce6c <__retarget_lock_acquire_recursive>:
 800ce6c:	4770      	bx	lr

0800ce6e <__retarget_lock_release_recursive>:
 800ce6e:	4770      	bx	lr

0800ce70 <strcpy>:
 800ce70:	4603      	mov	r3, r0
 800ce72:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce76:	f803 2b01 	strb.w	r2, [r3], #1
 800ce7a:	2a00      	cmp	r2, #0
 800ce7c:	d1f9      	bne.n	800ce72 <strcpy+0x2>
 800ce7e:	4770      	bx	lr

0800ce80 <_free_r>:
 800ce80:	b538      	push	{r3, r4, r5, lr}
 800ce82:	4605      	mov	r5, r0
 800ce84:	2900      	cmp	r1, #0
 800ce86:	d040      	beq.n	800cf0a <_free_r+0x8a>
 800ce88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce8c:	1f0c      	subs	r4, r1, #4
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	bfb8      	it	lt
 800ce92:	18e4      	addlt	r4, r4, r3
 800ce94:	f7ff ff2a 	bl	800ccec <__malloc_lock>
 800ce98:	4a1c      	ldr	r2, [pc, #112]	; (800cf0c <_free_r+0x8c>)
 800ce9a:	6813      	ldr	r3, [r2, #0]
 800ce9c:	b933      	cbnz	r3, 800ceac <_free_r+0x2c>
 800ce9e:	6063      	str	r3, [r4, #4]
 800cea0:	6014      	str	r4, [r2, #0]
 800cea2:	4628      	mov	r0, r5
 800cea4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cea8:	f7ff bf26 	b.w	800ccf8 <__malloc_unlock>
 800ceac:	42a3      	cmp	r3, r4
 800ceae:	d908      	bls.n	800cec2 <_free_r+0x42>
 800ceb0:	6820      	ldr	r0, [r4, #0]
 800ceb2:	1821      	adds	r1, r4, r0
 800ceb4:	428b      	cmp	r3, r1
 800ceb6:	bf01      	itttt	eq
 800ceb8:	6819      	ldreq	r1, [r3, #0]
 800ceba:	685b      	ldreq	r3, [r3, #4]
 800cebc:	1809      	addeq	r1, r1, r0
 800cebe:	6021      	streq	r1, [r4, #0]
 800cec0:	e7ed      	b.n	800ce9e <_free_r+0x1e>
 800cec2:	461a      	mov	r2, r3
 800cec4:	685b      	ldr	r3, [r3, #4]
 800cec6:	b10b      	cbz	r3, 800cecc <_free_r+0x4c>
 800cec8:	42a3      	cmp	r3, r4
 800ceca:	d9fa      	bls.n	800cec2 <_free_r+0x42>
 800cecc:	6811      	ldr	r1, [r2, #0]
 800cece:	1850      	adds	r0, r2, r1
 800ced0:	42a0      	cmp	r0, r4
 800ced2:	d10b      	bne.n	800ceec <_free_r+0x6c>
 800ced4:	6820      	ldr	r0, [r4, #0]
 800ced6:	4401      	add	r1, r0
 800ced8:	1850      	adds	r0, r2, r1
 800ceda:	4283      	cmp	r3, r0
 800cedc:	6011      	str	r1, [r2, #0]
 800cede:	d1e0      	bne.n	800cea2 <_free_r+0x22>
 800cee0:	6818      	ldr	r0, [r3, #0]
 800cee2:	685b      	ldr	r3, [r3, #4]
 800cee4:	4408      	add	r0, r1
 800cee6:	6010      	str	r0, [r2, #0]
 800cee8:	6053      	str	r3, [r2, #4]
 800ceea:	e7da      	b.n	800cea2 <_free_r+0x22>
 800ceec:	d902      	bls.n	800cef4 <_free_r+0x74>
 800ceee:	230c      	movs	r3, #12
 800cef0:	602b      	str	r3, [r5, #0]
 800cef2:	e7d6      	b.n	800cea2 <_free_r+0x22>
 800cef4:	6820      	ldr	r0, [r4, #0]
 800cef6:	1821      	adds	r1, r4, r0
 800cef8:	428b      	cmp	r3, r1
 800cefa:	bf01      	itttt	eq
 800cefc:	6819      	ldreq	r1, [r3, #0]
 800cefe:	685b      	ldreq	r3, [r3, #4]
 800cf00:	1809      	addeq	r1, r1, r0
 800cf02:	6021      	streq	r1, [r4, #0]
 800cf04:	6063      	str	r3, [r4, #4]
 800cf06:	6054      	str	r4, [r2, #4]
 800cf08:	e7cb      	b.n	800cea2 <_free_r+0x22>
 800cf0a:	bd38      	pop	{r3, r4, r5, pc}
 800cf0c:	20000ed4 	.word	0x20000ed4

0800cf10 <__ssputs_r>:
 800cf10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf14:	461f      	mov	r7, r3
 800cf16:	688e      	ldr	r6, [r1, #8]
 800cf18:	4682      	mov	sl, r0
 800cf1a:	42be      	cmp	r6, r7
 800cf1c:	460c      	mov	r4, r1
 800cf1e:	4690      	mov	r8, r2
 800cf20:	680b      	ldr	r3, [r1, #0]
 800cf22:	d82c      	bhi.n	800cf7e <__ssputs_r+0x6e>
 800cf24:	898a      	ldrh	r2, [r1, #12]
 800cf26:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cf2a:	d026      	beq.n	800cf7a <__ssputs_r+0x6a>
 800cf2c:	6965      	ldr	r5, [r4, #20]
 800cf2e:	6909      	ldr	r1, [r1, #16]
 800cf30:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cf34:	eba3 0901 	sub.w	r9, r3, r1
 800cf38:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cf3c:	1c7b      	adds	r3, r7, #1
 800cf3e:	444b      	add	r3, r9
 800cf40:	106d      	asrs	r5, r5, #1
 800cf42:	429d      	cmp	r5, r3
 800cf44:	bf38      	it	cc
 800cf46:	461d      	movcc	r5, r3
 800cf48:	0553      	lsls	r3, r2, #21
 800cf4a:	d527      	bpl.n	800cf9c <__ssputs_r+0x8c>
 800cf4c:	4629      	mov	r1, r5
 800cf4e:	f7ff fe4d 	bl	800cbec <_malloc_r>
 800cf52:	4606      	mov	r6, r0
 800cf54:	b360      	cbz	r0, 800cfb0 <__ssputs_r+0xa0>
 800cf56:	464a      	mov	r2, r9
 800cf58:	6921      	ldr	r1, [r4, #16]
 800cf5a:	f000 faed 	bl	800d538 <memcpy>
 800cf5e:	89a3      	ldrh	r3, [r4, #12]
 800cf60:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cf64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf68:	81a3      	strh	r3, [r4, #12]
 800cf6a:	6126      	str	r6, [r4, #16]
 800cf6c:	444e      	add	r6, r9
 800cf6e:	6026      	str	r6, [r4, #0]
 800cf70:	463e      	mov	r6, r7
 800cf72:	6165      	str	r5, [r4, #20]
 800cf74:	eba5 0509 	sub.w	r5, r5, r9
 800cf78:	60a5      	str	r5, [r4, #8]
 800cf7a:	42be      	cmp	r6, r7
 800cf7c:	d900      	bls.n	800cf80 <__ssputs_r+0x70>
 800cf7e:	463e      	mov	r6, r7
 800cf80:	4632      	mov	r2, r6
 800cf82:	4641      	mov	r1, r8
 800cf84:	6820      	ldr	r0, [r4, #0]
 800cf86:	f000 faaf 	bl	800d4e8 <memmove>
 800cf8a:	2000      	movs	r0, #0
 800cf8c:	68a3      	ldr	r3, [r4, #8]
 800cf8e:	1b9b      	subs	r3, r3, r6
 800cf90:	60a3      	str	r3, [r4, #8]
 800cf92:	6823      	ldr	r3, [r4, #0]
 800cf94:	4433      	add	r3, r6
 800cf96:	6023      	str	r3, [r4, #0]
 800cf98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf9c:	462a      	mov	r2, r5
 800cf9e:	f000 fad9 	bl	800d554 <_realloc_r>
 800cfa2:	4606      	mov	r6, r0
 800cfa4:	2800      	cmp	r0, #0
 800cfa6:	d1e0      	bne.n	800cf6a <__ssputs_r+0x5a>
 800cfa8:	4650      	mov	r0, sl
 800cfaa:	6921      	ldr	r1, [r4, #16]
 800cfac:	f7ff ff68 	bl	800ce80 <_free_r>
 800cfb0:	230c      	movs	r3, #12
 800cfb2:	f8ca 3000 	str.w	r3, [sl]
 800cfb6:	89a3      	ldrh	r3, [r4, #12]
 800cfb8:	f04f 30ff 	mov.w	r0, #4294967295
 800cfbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfc0:	81a3      	strh	r3, [r4, #12]
 800cfc2:	e7e9      	b.n	800cf98 <__ssputs_r+0x88>

0800cfc4 <_svfiprintf_r>:
 800cfc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfc8:	4698      	mov	r8, r3
 800cfca:	898b      	ldrh	r3, [r1, #12]
 800cfcc:	4607      	mov	r7, r0
 800cfce:	061b      	lsls	r3, r3, #24
 800cfd0:	460d      	mov	r5, r1
 800cfd2:	4614      	mov	r4, r2
 800cfd4:	b09d      	sub	sp, #116	; 0x74
 800cfd6:	d50e      	bpl.n	800cff6 <_svfiprintf_r+0x32>
 800cfd8:	690b      	ldr	r3, [r1, #16]
 800cfda:	b963      	cbnz	r3, 800cff6 <_svfiprintf_r+0x32>
 800cfdc:	2140      	movs	r1, #64	; 0x40
 800cfde:	f7ff fe05 	bl	800cbec <_malloc_r>
 800cfe2:	6028      	str	r0, [r5, #0]
 800cfe4:	6128      	str	r0, [r5, #16]
 800cfe6:	b920      	cbnz	r0, 800cff2 <_svfiprintf_r+0x2e>
 800cfe8:	230c      	movs	r3, #12
 800cfea:	603b      	str	r3, [r7, #0]
 800cfec:	f04f 30ff 	mov.w	r0, #4294967295
 800cff0:	e0d0      	b.n	800d194 <_svfiprintf_r+0x1d0>
 800cff2:	2340      	movs	r3, #64	; 0x40
 800cff4:	616b      	str	r3, [r5, #20]
 800cff6:	2300      	movs	r3, #0
 800cff8:	9309      	str	r3, [sp, #36]	; 0x24
 800cffa:	2320      	movs	r3, #32
 800cffc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d000:	2330      	movs	r3, #48	; 0x30
 800d002:	f04f 0901 	mov.w	r9, #1
 800d006:	f8cd 800c 	str.w	r8, [sp, #12]
 800d00a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800d1ac <_svfiprintf_r+0x1e8>
 800d00e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d012:	4623      	mov	r3, r4
 800d014:	469a      	mov	sl, r3
 800d016:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d01a:	b10a      	cbz	r2, 800d020 <_svfiprintf_r+0x5c>
 800d01c:	2a25      	cmp	r2, #37	; 0x25
 800d01e:	d1f9      	bne.n	800d014 <_svfiprintf_r+0x50>
 800d020:	ebba 0b04 	subs.w	fp, sl, r4
 800d024:	d00b      	beq.n	800d03e <_svfiprintf_r+0x7a>
 800d026:	465b      	mov	r3, fp
 800d028:	4622      	mov	r2, r4
 800d02a:	4629      	mov	r1, r5
 800d02c:	4638      	mov	r0, r7
 800d02e:	f7ff ff6f 	bl	800cf10 <__ssputs_r>
 800d032:	3001      	adds	r0, #1
 800d034:	f000 80a9 	beq.w	800d18a <_svfiprintf_r+0x1c6>
 800d038:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d03a:	445a      	add	r2, fp
 800d03c:	9209      	str	r2, [sp, #36]	; 0x24
 800d03e:	f89a 3000 	ldrb.w	r3, [sl]
 800d042:	2b00      	cmp	r3, #0
 800d044:	f000 80a1 	beq.w	800d18a <_svfiprintf_r+0x1c6>
 800d048:	2300      	movs	r3, #0
 800d04a:	f04f 32ff 	mov.w	r2, #4294967295
 800d04e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d052:	f10a 0a01 	add.w	sl, sl, #1
 800d056:	9304      	str	r3, [sp, #16]
 800d058:	9307      	str	r3, [sp, #28]
 800d05a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d05e:	931a      	str	r3, [sp, #104]	; 0x68
 800d060:	4654      	mov	r4, sl
 800d062:	2205      	movs	r2, #5
 800d064:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d068:	4850      	ldr	r0, [pc, #320]	; (800d1ac <_svfiprintf_r+0x1e8>)
 800d06a:	f000 fa57 	bl	800d51c <memchr>
 800d06e:	9a04      	ldr	r2, [sp, #16]
 800d070:	b9d8      	cbnz	r0, 800d0aa <_svfiprintf_r+0xe6>
 800d072:	06d0      	lsls	r0, r2, #27
 800d074:	bf44      	itt	mi
 800d076:	2320      	movmi	r3, #32
 800d078:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d07c:	0711      	lsls	r1, r2, #28
 800d07e:	bf44      	itt	mi
 800d080:	232b      	movmi	r3, #43	; 0x2b
 800d082:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d086:	f89a 3000 	ldrb.w	r3, [sl]
 800d08a:	2b2a      	cmp	r3, #42	; 0x2a
 800d08c:	d015      	beq.n	800d0ba <_svfiprintf_r+0xf6>
 800d08e:	4654      	mov	r4, sl
 800d090:	2000      	movs	r0, #0
 800d092:	f04f 0c0a 	mov.w	ip, #10
 800d096:	9a07      	ldr	r2, [sp, #28]
 800d098:	4621      	mov	r1, r4
 800d09a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d09e:	3b30      	subs	r3, #48	; 0x30
 800d0a0:	2b09      	cmp	r3, #9
 800d0a2:	d94d      	bls.n	800d140 <_svfiprintf_r+0x17c>
 800d0a4:	b1b0      	cbz	r0, 800d0d4 <_svfiprintf_r+0x110>
 800d0a6:	9207      	str	r2, [sp, #28]
 800d0a8:	e014      	b.n	800d0d4 <_svfiprintf_r+0x110>
 800d0aa:	eba0 0308 	sub.w	r3, r0, r8
 800d0ae:	fa09 f303 	lsl.w	r3, r9, r3
 800d0b2:	4313      	orrs	r3, r2
 800d0b4:	46a2      	mov	sl, r4
 800d0b6:	9304      	str	r3, [sp, #16]
 800d0b8:	e7d2      	b.n	800d060 <_svfiprintf_r+0x9c>
 800d0ba:	9b03      	ldr	r3, [sp, #12]
 800d0bc:	1d19      	adds	r1, r3, #4
 800d0be:	681b      	ldr	r3, [r3, #0]
 800d0c0:	9103      	str	r1, [sp, #12]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	bfbb      	ittet	lt
 800d0c6:	425b      	neglt	r3, r3
 800d0c8:	f042 0202 	orrlt.w	r2, r2, #2
 800d0cc:	9307      	strge	r3, [sp, #28]
 800d0ce:	9307      	strlt	r3, [sp, #28]
 800d0d0:	bfb8      	it	lt
 800d0d2:	9204      	strlt	r2, [sp, #16]
 800d0d4:	7823      	ldrb	r3, [r4, #0]
 800d0d6:	2b2e      	cmp	r3, #46	; 0x2e
 800d0d8:	d10c      	bne.n	800d0f4 <_svfiprintf_r+0x130>
 800d0da:	7863      	ldrb	r3, [r4, #1]
 800d0dc:	2b2a      	cmp	r3, #42	; 0x2a
 800d0de:	d134      	bne.n	800d14a <_svfiprintf_r+0x186>
 800d0e0:	9b03      	ldr	r3, [sp, #12]
 800d0e2:	3402      	adds	r4, #2
 800d0e4:	1d1a      	adds	r2, r3, #4
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	9203      	str	r2, [sp, #12]
 800d0ea:	2b00      	cmp	r3, #0
 800d0ec:	bfb8      	it	lt
 800d0ee:	f04f 33ff 	movlt.w	r3, #4294967295
 800d0f2:	9305      	str	r3, [sp, #20]
 800d0f4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800d1b0 <_svfiprintf_r+0x1ec>
 800d0f8:	2203      	movs	r2, #3
 800d0fa:	4650      	mov	r0, sl
 800d0fc:	7821      	ldrb	r1, [r4, #0]
 800d0fe:	f000 fa0d 	bl	800d51c <memchr>
 800d102:	b138      	cbz	r0, 800d114 <_svfiprintf_r+0x150>
 800d104:	2240      	movs	r2, #64	; 0x40
 800d106:	9b04      	ldr	r3, [sp, #16]
 800d108:	eba0 000a 	sub.w	r0, r0, sl
 800d10c:	4082      	lsls	r2, r0
 800d10e:	4313      	orrs	r3, r2
 800d110:	3401      	adds	r4, #1
 800d112:	9304      	str	r3, [sp, #16]
 800d114:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d118:	2206      	movs	r2, #6
 800d11a:	4826      	ldr	r0, [pc, #152]	; (800d1b4 <_svfiprintf_r+0x1f0>)
 800d11c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d120:	f000 f9fc 	bl	800d51c <memchr>
 800d124:	2800      	cmp	r0, #0
 800d126:	d038      	beq.n	800d19a <_svfiprintf_r+0x1d6>
 800d128:	4b23      	ldr	r3, [pc, #140]	; (800d1b8 <_svfiprintf_r+0x1f4>)
 800d12a:	bb1b      	cbnz	r3, 800d174 <_svfiprintf_r+0x1b0>
 800d12c:	9b03      	ldr	r3, [sp, #12]
 800d12e:	3307      	adds	r3, #7
 800d130:	f023 0307 	bic.w	r3, r3, #7
 800d134:	3308      	adds	r3, #8
 800d136:	9303      	str	r3, [sp, #12]
 800d138:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d13a:	4433      	add	r3, r6
 800d13c:	9309      	str	r3, [sp, #36]	; 0x24
 800d13e:	e768      	b.n	800d012 <_svfiprintf_r+0x4e>
 800d140:	460c      	mov	r4, r1
 800d142:	2001      	movs	r0, #1
 800d144:	fb0c 3202 	mla	r2, ip, r2, r3
 800d148:	e7a6      	b.n	800d098 <_svfiprintf_r+0xd4>
 800d14a:	2300      	movs	r3, #0
 800d14c:	f04f 0c0a 	mov.w	ip, #10
 800d150:	4619      	mov	r1, r3
 800d152:	3401      	adds	r4, #1
 800d154:	9305      	str	r3, [sp, #20]
 800d156:	4620      	mov	r0, r4
 800d158:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d15c:	3a30      	subs	r2, #48	; 0x30
 800d15e:	2a09      	cmp	r2, #9
 800d160:	d903      	bls.n	800d16a <_svfiprintf_r+0x1a6>
 800d162:	2b00      	cmp	r3, #0
 800d164:	d0c6      	beq.n	800d0f4 <_svfiprintf_r+0x130>
 800d166:	9105      	str	r1, [sp, #20]
 800d168:	e7c4      	b.n	800d0f4 <_svfiprintf_r+0x130>
 800d16a:	4604      	mov	r4, r0
 800d16c:	2301      	movs	r3, #1
 800d16e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d172:	e7f0      	b.n	800d156 <_svfiprintf_r+0x192>
 800d174:	ab03      	add	r3, sp, #12
 800d176:	9300      	str	r3, [sp, #0]
 800d178:	462a      	mov	r2, r5
 800d17a:	4638      	mov	r0, r7
 800d17c:	4b0f      	ldr	r3, [pc, #60]	; (800d1bc <_svfiprintf_r+0x1f8>)
 800d17e:	a904      	add	r1, sp, #16
 800d180:	f3af 8000 	nop.w
 800d184:	1c42      	adds	r2, r0, #1
 800d186:	4606      	mov	r6, r0
 800d188:	d1d6      	bne.n	800d138 <_svfiprintf_r+0x174>
 800d18a:	89ab      	ldrh	r3, [r5, #12]
 800d18c:	065b      	lsls	r3, r3, #25
 800d18e:	f53f af2d 	bmi.w	800cfec <_svfiprintf_r+0x28>
 800d192:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d194:	b01d      	add	sp, #116	; 0x74
 800d196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d19a:	ab03      	add	r3, sp, #12
 800d19c:	9300      	str	r3, [sp, #0]
 800d19e:	462a      	mov	r2, r5
 800d1a0:	4638      	mov	r0, r7
 800d1a2:	4b06      	ldr	r3, [pc, #24]	; (800d1bc <_svfiprintf_r+0x1f8>)
 800d1a4:	a904      	add	r1, sp, #16
 800d1a6:	f000 f87d 	bl	800d2a4 <_printf_i>
 800d1aa:	e7eb      	b.n	800d184 <_svfiprintf_r+0x1c0>
 800d1ac:	0800e4db 	.word	0x0800e4db
 800d1b0:	0800e4e1 	.word	0x0800e4e1
 800d1b4:	0800e4e5 	.word	0x0800e4e5
 800d1b8:	00000000 	.word	0x00000000
 800d1bc:	0800cf11 	.word	0x0800cf11

0800d1c0 <_printf_common>:
 800d1c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1c4:	4616      	mov	r6, r2
 800d1c6:	4699      	mov	r9, r3
 800d1c8:	688a      	ldr	r2, [r1, #8]
 800d1ca:	690b      	ldr	r3, [r1, #16]
 800d1cc:	4607      	mov	r7, r0
 800d1ce:	4293      	cmp	r3, r2
 800d1d0:	bfb8      	it	lt
 800d1d2:	4613      	movlt	r3, r2
 800d1d4:	6033      	str	r3, [r6, #0]
 800d1d6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d1da:	460c      	mov	r4, r1
 800d1dc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d1e0:	b10a      	cbz	r2, 800d1e6 <_printf_common+0x26>
 800d1e2:	3301      	adds	r3, #1
 800d1e4:	6033      	str	r3, [r6, #0]
 800d1e6:	6823      	ldr	r3, [r4, #0]
 800d1e8:	0699      	lsls	r1, r3, #26
 800d1ea:	bf42      	ittt	mi
 800d1ec:	6833      	ldrmi	r3, [r6, #0]
 800d1ee:	3302      	addmi	r3, #2
 800d1f0:	6033      	strmi	r3, [r6, #0]
 800d1f2:	6825      	ldr	r5, [r4, #0]
 800d1f4:	f015 0506 	ands.w	r5, r5, #6
 800d1f8:	d106      	bne.n	800d208 <_printf_common+0x48>
 800d1fa:	f104 0a19 	add.w	sl, r4, #25
 800d1fe:	68e3      	ldr	r3, [r4, #12]
 800d200:	6832      	ldr	r2, [r6, #0]
 800d202:	1a9b      	subs	r3, r3, r2
 800d204:	42ab      	cmp	r3, r5
 800d206:	dc2b      	bgt.n	800d260 <_printf_common+0xa0>
 800d208:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d20c:	1e13      	subs	r3, r2, #0
 800d20e:	6822      	ldr	r2, [r4, #0]
 800d210:	bf18      	it	ne
 800d212:	2301      	movne	r3, #1
 800d214:	0692      	lsls	r2, r2, #26
 800d216:	d430      	bmi.n	800d27a <_printf_common+0xba>
 800d218:	4649      	mov	r1, r9
 800d21a:	4638      	mov	r0, r7
 800d21c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d220:	47c0      	blx	r8
 800d222:	3001      	adds	r0, #1
 800d224:	d023      	beq.n	800d26e <_printf_common+0xae>
 800d226:	6823      	ldr	r3, [r4, #0]
 800d228:	6922      	ldr	r2, [r4, #16]
 800d22a:	f003 0306 	and.w	r3, r3, #6
 800d22e:	2b04      	cmp	r3, #4
 800d230:	bf14      	ite	ne
 800d232:	2500      	movne	r5, #0
 800d234:	6833      	ldreq	r3, [r6, #0]
 800d236:	f04f 0600 	mov.w	r6, #0
 800d23a:	bf08      	it	eq
 800d23c:	68e5      	ldreq	r5, [r4, #12]
 800d23e:	f104 041a 	add.w	r4, r4, #26
 800d242:	bf08      	it	eq
 800d244:	1aed      	subeq	r5, r5, r3
 800d246:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d24a:	bf08      	it	eq
 800d24c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d250:	4293      	cmp	r3, r2
 800d252:	bfc4      	itt	gt
 800d254:	1a9b      	subgt	r3, r3, r2
 800d256:	18ed      	addgt	r5, r5, r3
 800d258:	42b5      	cmp	r5, r6
 800d25a:	d11a      	bne.n	800d292 <_printf_common+0xd2>
 800d25c:	2000      	movs	r0, #0
 800d25e:	e008      	b.n	800d272 <_printf_common+0xb2>
 800d260:	2301      	movs	r3, #1
 800d262:	4652      	mov	r2, sl
 800d264:	4649      	mov	r1, r9
 800d266:	4638      	mov	r0, r7
 800d268:	47c0      	blx	r8
 800d26a:	3001      	adds	r0, #1
 800d26c:	d103      	bne.n	800d276 <_printf_common+0xb6>
 800d26e:	f04f 30ff 	mov.w	r0, #4294967295
 800d272:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d276:	3501      	adds	r5, #1
 800d278:	e7c1      	b.n	800d1fe <_printf_common+0x3e>
 800d27a:	2030      	movs	r0, #48	; 0x30
 800d27c:	18e1      	adds	r1, r4, r3
 800d27e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d282:	1c5a      	adds	r2, r3, #1
 800d284:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d288:	4422      	add	r2, r4
 800d28a:	3302      	adds	r3, #2
 800d28c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d290:	e7c2      	b.n	800d218 <_printf_common+0x58>
 800d292:	2301      	movs	r3, #1
 800d294:	4622      	mov	r2, r4
 800d296:	4649      	mov	r1, r9
 800d298:	4638      	mov	r0, r7
 800d29a:	47c0      	blx	r8
 800d29c:	3001      	adds	r0, #1
 800d29e:	d0e6      	beq.n	800d26e <_printf_common+0xae>
 800d2a0:	3601      	adds	r6, #1
 800d2a2:	e7d9      	b.n	800d258 <_printf_common+0x98>

0800d2a4 <_printf_i>:
 800d2a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d2a8:	7e0f      	ldrb	r7, [r1, #24]
 800d2aa:	4691      	mov	r9, r2
 800d2ac:	2f78      	cmp	r7, #120	; 0x78
 800d2ae:	4680      	mov	r8, r0
 800d2b0:	460c      	mov	r4, r1
 800d2b2:	469a      	mov	sl, r3
 800d2b4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d2b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d2ba:	d807      	bhi.n	800d2cc <_printf_i+0x28>
 800d2bc:	2f62      	cmp	r7, #98	; 0x62
 800d2be:	d80a      	bhi.n	800d2d6 <_printf_i+0x32>
 800d2c0:	2f00      	cmp	r7, #0
 800d2c2:	f000 80d5 	beq.w	800d470 <_printf_i+0x1cc>
 800d2c6:	2f58      	cmp	r7, #88	; 0x58
 800d2c8:	f000 80c1 	beq.w	800d44e <_printf_i+0x1aa>
 800d2cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d2d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d2d4:	e03a      	b.n	800d34c <_printf_i+0xa8>
 800d2d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d2da:	2b15      	cmp	r3, #21
 800d2dc:	d8f6      	bhi.n	800d2cc <_printf_i+0x28>
 800d2de:	a101      	add	r1, pc, #4	; (adr r1, 800d2e4 <_printf_i+0x40>)
 800d2e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d2e4:	0800d33d 	.word	0x0800d33d
 800d2e8:	0800d351 	.word	0x0800d351
 800d2ec:	0800d2cd 	.word	0x0800d2cd
 800d2f0:	0800d2cd 	.word	0x0800d2cd
 800d2f4:	0800d2cd 	.word	0x0800d2cd
 800d2f8:	0800d2cd 	.word	0x0800d2cd
 800d2fc:	0800d351 	.word	0x0800d351
 800d300:	0800d2cd 	.word	0x0800d2cd
 800d304:	0800d2cd 	.word	0x0800d2cd
 800d308:	0800d2cd 	.word	0x0800d2cd
 800d30c:	0800d2cd 	.word	0x0800d2cd
 800d310:	0800d457 	.word	0x0800d457
 800d314:	0800d37d 	.word	0x0800d37d
 800d318:	0800d411 	.word	0x0800d411
 800d31c:	0800d2cd 	.word	0x0800d2cd
 800d320:	0800d2cd 	.word	0x0800d2cd
 800d324:	0800d479 	.word	0x0800d479
 800d328:	0800d2cd 	.word	0x0800d2cd
 800d32c:	0800d37d 	.word	0x0800d37d
 800d330:	0800d2cd 	.word	0x0800d2cd
 800d334:	0800d2cd 	.word	0x0800d2cd
 800d338:	0800d419 	.word	0x0800d419
 800d33c:	682b      	ldr	r3, [r5, #0]
 800d33e:	1d1a      	adds	r2, r3, #4
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	602a      	str	r2, [r5, #0]
 800d344:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d348:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d34c:	2301      	movs	r3, #1
 800d34e:	e0a0      	b.n	800d492 <_printf_i+0x1ee>
 800d350:	6820      	ldr	r0, [r4, #0]
 800d352:	682b      	ldr	r3, [r5, #0]
 800d354:	0607      	lsls	r7, r0, #24
 800d356:	f103 0104 	add.w	r1, r3, #4
 800d35a:	6029      	str	r1, [r5, #0]
 800d35c:	d501      	bpl.n	800d362 <_printf_i+0xbe>
 800d35e:	681e      	ldr	r6, [r3, #0]
 800d360:	e003      	b.n	800d36a <_printf_i+0xc6>
 800d362:	0646      	lsls	r6, r0, #25
 800d364:	d5fb      	bpl.n	800d35e <_printf_i+0xba>
 800d366:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d36a:	2e00      	cmp	r6, #0
 800d36c:	da03      	bge.n	800d376 <_printf_i+0xd2>
 800d36e:	232d      	movs	r3, #45	; 0x2d
 800d370:	4276      	negs	r6, r6
 800d372:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d376:	230a      	movs	r3, #10
 800d378:	4859      	ldr	r0, [pc, #356]	; (800d4e0 <_printf_i+0x23c>)
 800d37a:	e012      	b.n	800d3a2 <_printf_i+0xfe>
 800d37c:	682b      	ldr	r3, [r5, #0]
 800d37e:	6820      	ldr	r0, [r4, #0]
 800d380:	1d19      	adds	r1, r3, #4
 800d382:	6029      	str	r1, [r5, #0]
 800d384:	0605      	lsls	r5, r0, #24
 800d386:	d501      	bpl.n	800d38c <_printf_i+0xe8>
 800d388:	681e      	ldr	r6, [r3, #0]
 800d38a:	e002      	b.n	800d392 <_printf_i+0xee>
 800d38c:	0641      	lsls	r1, r0, #25
 800d38e:	d5fb      	bpl.n	800d388 <_printf_i+0xe4>
 800d390:	881e      	ldrh	r6, [r3, #0]
 800d392:	2f6f      	cmp	r7, #111	; 0x6f
 800d394:	bf0c      	ite	eq
 800d396:	2308      	moveq	r3, #8
 800d398:	230a      	movne	r3, #10
 800d39a:	4851      	ldr	r0, [pc, #324]	; (800d4e0 <_printf_i+0x23c>)
 800d39c:	2100      	movs	r1, #0
 800d39e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d3a2:	6865      	ldr	r5, [r4, #4]
 800d3a4:	2d00      	cmp	r5, #0
 800d3a6:	bfa8      	it	ge
 800d3a8:	6821      	ldrge	r1, [r4, #0]
 800d3aa:	60a5      	str	r5, [r4, #8]
 800d3ac:	bfa4      	itt	ge
 800d3ae:	f021 0104 	bicge.w	r1, r1, #4
 800d3b2:	6021      	strge	r1, [r4, #0]
 800d3b4:	b90e      	cbnz	r6, 800d3ba <_printf_i+0x116>
 800d3b6:	2d00      	cmp	r5, #0
 800d3b8:	d04b      	beq.n	800d452 <_printf_i+0x1ae>
 800d3ba:	4615      	mov	r5, r2
 800d3bc:	fbb6 f1f3 	udiv	r1, r6, r3
 800d3c0:	fb03 6711 	mls	r7, r3, r1, r6
 800d3c4:	5dc7      	ldrb	r7, [r0, r7]
 800d3c6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d3ca:	4637      	mov	r7, r6
 800d3cc:	42bb      	cmp	r3, r7
 800d3ce:	460e      	mov	r6, r1
 800d3d0:	d9f4      	bls.n	800d3bc <_printf_i+0x118>
 800d3d2:	2b08      	cmp	r3, #8
 800d3d4:	d10b      	bne.n	800d3ee <_printf_i+0x14a>
 800d3d6:	6823      	ldr	r3, [r4, #0]
 800d3d8:	07de      	lsls	r6, r3, #31
 800d3da:	d508      	bpl.n	800d3ee <_printf_i+0x14a>
 800d3dc:	6923      	ldr	r3, [r4, #16]
 800d3de:	6861      	ldr	r1, [r4, #4]
 800d3e0:	4299      	cmp	r1, r3
 800d3e2:	bfde      	ittt	le
 800d3e4:	2330      	movle	r3, #48	; 0x30
 800d3e6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d3ea:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d3ee:	1b52      	subs	r2, r2, r5
 800d3f0:	6122      	str	r2, [r4, #16]
 800d3f2:	464b      	mov	r3, r9
 800d3f4:	4621      	mov	r1, r4
 800d3f6:	4640      	mov	r0, r8
 800d3f8:	f8cd a000 	str.w	sl, [sp]
 800d3fc:	aa03      	add	r2, sp, #12
 800d3fe:	f7ff fedf 	bl	800d1c0 <_printf_common>
 800d402:	3001      	adds	r0, #1
 800d404:	d14a      	bne.n	800d49c <_printf_i+0x1f8>
 800d406:	f04f 30ff 	mov.w	r0, #4294967295
 800d40a:	b004      	add	sp, #16
 800d40c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d410:	6823      	ldr	r3, [r4, #0]
 800d412:	f043 0320 	orr.w	r3, r3, #32
 800d416:	6023      	str	r3, [r4, #0]
 800d418:	2778      	movs	r7, #120	; 0x78
 800d41a:	4832      	ldr	r0, [pc, #200]	; (800d4e4 <_printf_i+0x240>)
 800d41c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d420:	6823      	ldr	r3, [r4, #0]
 800d422:	6829      	ldr	r1, [r5, #0]
 800d424:	061f      	lsls	r7, r3, #24
 800d426:	f851 6b04 	ldr.w	r6, [r1], #4
 800d42a:	d402      	bmi.n	800d432 <_printf_i+0x18e>
 800d42c:	065f      	lsls	r7, r3, #25
 800d42e:	bf48      	it	mi
 800d430:	b2b6      	uxthmi	r6, r6
 800d432:	07df      	lsls	r7, r3, #31
 800d434:	bf48      	it	mi
 800d436:	f043 0320 	orrmi.w	r3, r3, #32
 800d43a:	6029      	str	r1, [r5, #0]
 800d43c:	bf48      	it	mi
 800d43e:	6023      	strmi	r3, [r4, #0]
 800d440:	b91e      	cbnz	r6, 800d44a <_printf_i+0x1a6>
 800d442:	6823      	ldr	r3, [r4, #0]
 800d444:	f023 0320 	bic.w	r3, r3, #32
 800d448:	6023      	str	r3, [r4, #0]
 800d44a:	2310      	movs	r3, #16
 800d44c:	e7a6      	b.n	800d39c <_printf_i+0xf8>
 800d44e:	4824      	ldr	r0, [pc, #144]	; (800d4e0 <_printf_i+0x23c>)
 800d450:	e7e4      	b.n	800d41c <_printf_i+0x178>
 800d452:	4615      	mov	r5, r2
 800d454:	e7bd      	b.n	800d3d2 <_printf_i+0x12e>
 800d456:	682b      	ldr	r3, [r5, #0]
 800d458:	6826      	ldr	r6, [r4, #0]
 800d45a:	1d18      	adds	r0, r3, #4
 800d45c:	6961      	ldr	r1, [r4, #20]
 800d45e:	6028      	str	r0, [r5, #0]
 800d460:	0635      	lsls	r5, r6, #24
 800d462:	681b      	ldr	r3, [r3, #0]
 800d464:	d501      	bpl.n	800d46a <_printf_i+0x1c6>
 800d466:	6019      	str	r1, [r3, #0]
 800d468:	e002      	b.n	800d470 <_printf_i+0x1cc>
 800d46a:	0670      	lsls	r0, r6, #25
 800d46c:	d5fb      	bpl.n	800d466 <_printf_i+0x1c2>
 800d46e:	8019      	strh	r1, [r3, #0]
 800d470:	2300      	movs	r3, #0
 800d472:	4615      	mov	r5, r2
 800d474:	6123      	str	r3, [r4, #16]
 800d476:	e7bc      	b.n	800d3f2 <_printf_i+0x14e>
 800d478:	682b      	ldr	r3, [r5, #0]
 800d47a:	2100      	movs	r1, #0
 800d47c:	1d1a      	adds	r2, r3, #4
 800d47e:	602a      	str	r2, [r5, #0]
 800d480:	681d      	ldr	r5, [r3, #0]
 800d482:	6862      	ldr	r2, [r4, #4]
 800d484:	4628      	mov	r0, r5
 800d486:	f000 f849 	bl	800d51c <memchr>
 800d48a:	b108      	cbz	r0, 800d490 <_printf_i+0x1ec>
 800d48c:	1b40      	subs	r0, r0, r5
 800d48e:	6060      	str	r0, [r4, #4]
 800d490:	6863      	ldr	r3, [r4, #4]
 800d492:	6123      	str	r3, [r4, #16]
 800d494:	2300      	movs	r3, #0
 800d496:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d49a:	e7aa      	b.n	800d3f2 <_printf_i+0x14e>
 800d49c:	462a      	mov	r2, r5
 800d49e:	4649      	mov	r1, r9
 800d4a0:	4640      	mov	r0, r8
 800d4a2:	6923      	ldr	r3, [r4, #16]
 800d4a4:	47d0      	blx	sl
 800d4a6:	3001      	adds	r0, #1
 800d4a8:	d0ad      	beq.n	800d406 <_printf_i+0x162>
 800d4aa:	6823      	ldr	r3, [r4, #0]
 800d4ac:	079b      	lsls	r3, r3, #30
 800d4ae:	d413      	bmi.n	800d4d8 <_printf_i+0x234>
 800d4b0:	68e0      	ldr	r0, [r4, #12]
 800d4b2:	9b03      	ldr	r3, [sp, #12]
 800d4b4:	4298      	cmp	r0, r3
 800d4b6:	bfb8      	it	lt
 800d4b8:	4618      	movlt	r0, r3
 800d4ba:	e7a6      	b.n	800d40a <_printf_i+0x166>
 800d4bc:	2301      	movs	r3, #1
 800d4be:	4632      	mov	r2, r6
 800d4c0:	4649      	mov	r1, r9
 800d4c2:	4640      	mov	r0, r8
 800d4c4:	47d0      	blx	sl
 800d4c6:	3001      	adds	r0, #1
 800d4c8:	d09d      	beq.n	800d406 <_printf_i+0x162>
 800d4ca:	3501      	adds	r5, #1
 800d4cc:	68e3      	ldr	r3, [r4, #12]
 800d4ce:	9903      	ldr	r1, [sp, #12]
 800d4d0:	1a5b      	subs	r3, r3, r1
 800d4d2:	42ab      	cmp	r3, r5
 800d4d4:	dcf2      	bgt.n	800d4bc <_printf_i+0x218>
 800d4d6:	e7eb      	b.n	800d4b0 <_printf_i+0x20c>
 800d4d8:	2500      	movs	r5, #0
 800d4da:	f104 0619 	add.w	r6, r4, #25
 800d4de:	e7f5      	b.n	800d4cc <_printf_i+0x228>
 800d4e0:	0800e4ec 	.word	0x0800e4ec
 800d4e4:	0800e4fd 	.word	0x0800e4fd

0800d4e8 <memmove>:
 800d4e8:	4288      	cmp	r0, r1
 800d4ea:	b510      	push	{r4, lr}
 800d4ec:	eb01 0402 	add.w	r4, r1, r2
 800d4f0:	d902      	bls.n	800d4f8 <memmove+0x10>
 800d4f2:	4284      	cmp	r4, r0
 800d4f4:	4623      	mov	r3, r4
 800d4f6:	d807      	bhi.n	800d508 <memmove+0x20>
 800d4f8:	1e43      	subs	r3, r0, #1
 800d4fa:	42a1      	cmp	r1, r4
 800d4fc:	d008      	beq.n	800d510 <memmove+0x28>
 800d4fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d502:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d506:	e7f8      	b.n	800d4fa <memmove+0x12>
 800d508:	4601      	mov	r1, r0
 800d50a:	4402      	add	r2, r0
 800d50c:	428a      	cmp	r2, r1
 800d50e:	d100      	bne.n	800d512 <memmove+0x2a>
 800d510:	bd10      	pop	{r4, pc}
 800d512:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d516:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d51a:	e7f7      	b.n	800d50c <memmove+0x24>

0800d51c <memchr>:
 800d51c:	4603      	mov	r3, r0
 800d51e:	b510      	push	{r4, lr}
 800d520:	b2c9      	uxtb	r1, r1
 800d522:	4402      	add	r2, r0
 800d524:	4293      	cmp	r3, r2
 800d526:	4618      	mov	r0, r3
 800d528:	d101      	bne.n	800d52e <memchr+0x12>
 800d52a:	2000      	movs	r0, #0
 800d52c:	e003      	b.n	800d536 <memchr+0x1a>
 800d52e:	7804      	ldrb	r4, [r0, #0]
 800d530:	3301      	adds	r3, #1
 800d532:	428c      	cmp	r4, r1
 800d534:	d1f6      	bne.n	800d524 <memchr+0x8>
 800d536:	bd10      	pop	{r4, pc}

0800d538 <memcpy>:
 800d538:	440a      	add	r2, r1
 800d53a:	4291      	cmp	r1, r2
 800d53c:	f100 33ff 	add.w	r3, r0, #4294967295
 800d540:	d100      	bne.n	800d544 <memcpy+0xc>
 800d542:	4770      	bx	lr
 800d544:	b510      	push	{r4, lr}
 800d546:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d54a:	4291      	cmp	r1, r2
 800d54c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d550:	d1f9      	bne.n	800d546 <memcpy+0xe>
 800d552:	bd10      	pop	{r4, pc}

0800d554 <_realloc_r>:
 800d554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d558:	4680      	mov	r8, r0
 800d55a:	4614      	mov	r4, r2
 800d55c:	460e      	mov	r6, r1
 800d55e:	b921      	cbnz	r1, 800d56a <_realloc_r+0x16>
 800d560:	4611      	mov	r1, r2
 800d562:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d566:	f7ff bb41 	b.w	800cbec <_malloc_r>
 800d56a:	b92a      	cbnz	r2, 800d578 <_realloc_r+0x24>
 800d56c:	f7ff fc88 	bl	800ce80 <_free_r>
 800d570:	4625      	mov	r5, r4
 800d572:	4628      	mov	r0, r5
 800d574:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d578:	f000 f81b 	bl	800d5b2 <_malloc_usable_size_r>
 800d57c:	4284      	cmp	r4, r0
 800d57e:	4607      	mov	r7, r0
 800d580:	d802      	bhi.n	800d588 <_realloc_r+0x34>
 800d582:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d586:	d812      	bhi.n	800d5ae <_realloc_r+0x5a>
 800d588:	4621      	mov	r1, r4
 800d58a:	4640      	mov	r0, r8
 800d58c:	f7ff fb2e 	bl	800cbec <_malloc_r>
 800d590:	4605      	mov	r5, r0
 800d592:	2800      	cmp	r0, #0
 800d594:	d0ed      	beq.n	800d572 <_realloc_r+0x1e>
 800d596:	42bc      	cmp	r4, r7
 800d598:	4622      	mov	r2, r4
 800d59a:	4631      	mov	r1, r6
 800d59c:	bf28      	it	cs
 800d59e:	463a      	movcs	r2, r7
 800d5a0:	f7ff ffca 	bl	800d538 <memcpy>
 800d5a4:	4631      	mov	r1, r6
 800d5a6:	4640      	mov	r0, r8
 800d5a8:	f7ff fc6a 	bl	800ce80 <_free_r>
 800d5ac:	e7e1      	b.n	800d572 <_realloc_r+0x1e>
 800d5ae:	4635      	mov	r5, r6
 800d5b0:	e7df      	b.n	800d572 <_realloc_r+0x1e>

0800d5b2 <_malloc_usable_size_r>:
 800d5b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d5b6:	1f18      	subs	r0, r3, #4
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	bfbc      	itt	lt
 800d5bc:	580b      	ldrlt	r3, [r1, r0]
 800d5be:	18c0      	addlt	r0, r0, r3
 800d5c0:	4770      	bx	lr
	...

0800d5c4 <_init>:
 800d5c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5c6:	bf00      	nop
 800d5c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5ca:	bc08      	pop	{r3}
 800d5cc:	469e      	mov	lr, r3
 800d5ce:	4770      	bx	lr

0800d5d0 <_fini>:
 800d5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5d2:	bf00      	nop
 800d5d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d5d6:	bc08      	pop	{r3}
 800d5d8:	469e      	mov	lr, r3
 800d5da:	4770      	bx	lr
