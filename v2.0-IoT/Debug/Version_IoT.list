
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d520  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f2c  0800d704  0800d704  0001d704  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e630  0800e630  00020a20  2**0
                  CONTENTS
  4 .ARM          00000000  0800e630  0800e630  00020a20  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e630  0800e630  00020a20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e630  0800e630  0001e630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e634  0800e634  0001e634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a20  20000000  0800e638  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000061c  20000a20  0800f058  00020a20  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000103c  0800f058  0002103c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020a20  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020a49  2**0
                  CONTENTS, READONLY
 13 .debug_info   000136de  00000000  00000000  00020a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026c4  00000000  00000000  0003416a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011c8  00000000  00000000  00036830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e14  00000000  00000000  000379f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aef6  00000000  00000000  0003880c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001898e  00000000  00000000  00053702  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009fd66  00000000  00000000  0006c090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005230  00000000  00000000  0010bdf8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00111028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000a20 	.word	0x20000a20
 8000200:	00000000 	.word	0x00000000
 8000204:	0800d6ec 	.word	0x0800d6ec

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000a24 	.word	0x20000a24
 8000220:	0800d6ec 	.word	0x0800d6ec

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <sendMachineData>:
	sprintf(bufferTX, "%s", str);
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
	HAL_Delay(2000);
}

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *machineData) {
 8000234:	b580      	push	{r7, lr}
 8000236:	b0c6      	sub	sp, #280	; 0x118
 8000238:	af02      	add	r7, sp, #8
 800023a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800023e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000242:	6018      	str	r0, [r3, #0]
 8000244:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000248:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800024c:	6019      	str	r1, [r3, #0]
 800024e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000252:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000256:	601a      	str	r2, [r3, #0]
	char local_txA[200];
	char local_txB[50];
	int len;

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", Server);
 8000258:	4a31      	ldr	r2, [pc, #196]	; (8000320 <sendMachineData+0xec>)
 800025a:	4932      	ldr	r1, [pc, #200]	; (8000324 <sendMachineData+0xf0>)
 800025c:	4832      	ldr	r0, [pc, #200]	; (8000328 <sendMachineData+0xf4>)
 800025e:	f00c fe27 	bl	800ceb0 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000262:	4831      	ldr	r0, [pc, #196]	; (8000328 <sendMachineData+0xf4>)
 8000264:	f7ff ffde 	bl	8000224 <strlen>
 8000268:	4603      	mov	r3, r0
 800026a:	b29a      	uxth	r2, r3
 800026c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000270:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000274:	492c      	ldr	r1, [pc, #176]	; (8000328 <sendMachineData+0xf4>)
 8000276:	6818      	ldr	r0, [r3, #0]
 8000278:	f00b fff2 	bl	800c260 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 800027c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000280:	f008 ff22 	bl	80090c8 <HAL_Delay>

	sprintf(local_txA,
 8000284:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000288:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800028c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000290:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8000294:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000298:	4924      	ldr	r1, [pc, #144]	; (800032c <sendMachineData+0xf8>)
 800029a:	9100      	str	r1, [sp, #0]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	6812      	ldr	r2, [r2, #0]
 80002a0:	4923      	ldr	r1, [pc, #140]	; (8000330 <sendMachineData+0xfc>)
 80002a2:	f00c fe05 	bl	800ceb0 <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", machineID, machineData, Server2);
	len = strlen(local_txA);
 80002a6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80002aa:	4618      	mov	r0, r3
 80002ac:	f7ff ffba 	bl	8000224 <strlen>
 80002b0:	4603      	mov	r3, r0
 80002b2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 80002b6:	f107 0310 	add.w	r3, r7, #16
 80002ba:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80002be:	491d      	ldr	r1, [pc, #116]	; (8000334 <sendMachineData+0x100>)
 80002c0:	4618      	mov	r0, r3
 80002c2:	f00c fdf5 	bl	800ceb0 <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 80002c6:	f107 0310 	add.w	r3, r7, #16
 80002ca:	4618      	mov	r0, r3
 80002cc:	f7ff ffaa 	bl	8000224 <strlen>
 80002d0:	4603      	mov	r3, r0
 80002d2:	b29a      	uxth	r2, r3
 80002d4:	f107 0110 	add.w	r1, r7, #16
 80002d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80002dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80002e0:	6818      	ldr	r0, [r3, #0]
 80002e2:	f00b ffbd 	bl	800c260 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80002e6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002ea:	f008 feed 	bl	80090c8 <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 80002ee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80002f2:	4618      	mov	r0, r3
 80002f4:	f7ff ff96 	bl	8000224 <strlen>
 80002f8:	4603      	mov	r3, r0
 80002fa:	b29a      	uxth	r2, r3
 80002fc:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000300:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000304:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000308:	6818      	ldr	r0, [r3, #0]
 800030a:	f00b ffa9 	bl	800c260 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 800030e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000312:	f008 fed9 	bl	80090c8 <HAL_Delay>
}
 8000316:	bf00      	nop
 8000318:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}
 8000320:	0800d750 	.word	0x0800d750
 8000324:	0800d760 	.word	0x0800d760
 8000328:	20000a3c 	.word	0x20000a3c
 800032c:	0800d7dc 	.word	0x0800d7dc
 8000330:	0800d780 	.word	0x0800d780
 8000334:	0800d7f0 	.word	0x0800d7f0

08000338 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8000338:	b580      	push	{r7, lr}
 800033a:	b086      	sub	sp, #24
 800033c:	af02      	add	r7, sp, #8
 800033e:	4603      	mov	r3, r0
 8000340:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000342:	79fb      	ldrb	r3, [r7, #7]
 8000344:	f023 030f 	bic.w	r3, r3, #15
 8000348:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 800034a:	79fb      	ldrb	r3, [r7, #7]
 800034c:	011b      	lsls	r3, r3, #4
 800034e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000350:	7b7b      	ldrb	r3, [r7, #13]
 8000352:	f043 030c 	orr.w	r3, r3, #12
 8000356:	b2db      	uxtb	r3, r3
 8000358:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800035a:	7b7b      	ldrb	r3, [r7, #13]
 800035c:	f043 0308 	orr.w	r3, r3, #8
 8000360:	b2db      	uxtb	r3, r3
 8000362:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000364:	7b3b      	ldrb	r3, [r7, #12]
 8000366:	f043 030c 	orr.w	r3, r3, #12
 800036a:	b2db      	uxtb	r3, r3
 800036c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800036e:	7b3b      	ldrb	r3, [r7, #12]
 8000370:	f043 0308 	orr.w	r3, r3, #8
 8000374:	b2db      	uxtb	r3, r3
 8000376:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8000378:	bf00      	nop
 800037a:	4825      	ldr	r0, [pc, #148]	; (8000410 <lcd_send_cmd+0xd8>)
 800037c:	f00a fa9d 	bl	800a8ba <HAL_I2C_GetError>
 8000380:	4603      	mov	r3, r0
 8000382:	2b04      	cmp	r3, #4
 8000384:	d0f9      	beq.n	800037a <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000386:	bf00      	nop
 8000388:	4821      	ldr	r0, [pc, #132]	; (8000410 <lcd_send_cmd+0xd8>)
 800038a:	f00a fa89 	bl	800a8a0 <HAL_I2C_GetState>
 800038e:	4603      	mov	r3, r0
 8000390:	2b20      	cmp	r3, #32
 8000392:	d1f9      	bne.n	8000388 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8000394:	4b1f      	ldr	r3, [pc, #124]	; (8000414 <lcd_send_cmd+0xdc>)
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	2b00      	cmp	r3, #0
 800039a:	d116      	bne.n	80003ca <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 800039c:	2300      	movs	r3, #0
 800039e:	73fb      	strb	r3, [r7, #15]
 80003a0:	e00f      	b.n	80003c2 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 80003a2:	7bfb      	ldrb	r3, [r7, #15]
 80003a4:	3310      	adds	r3, #16
 80003a6:	443b      	add	r3, r7
 80003a8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80003ac:	7bfb      	ldrb	r3, [r7, #15]
 80003ae:	f022 0208 	bic.w	r2, r2, #8
 80003b2:	b2d2      	uxtb	r2, r2
 80003b4:	3310      	adds	r3, #16
 80003b6:	443b      	add	r3, r7
 80003b8:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80003bc:	7bfb      	ldrb	r3, [r7, #15]
 80003be:	3301      	adds	r3, #1
 80003c0:	73fb      	strb	r3, [r7, #15]
 80003c2:	7bfb      	ldrb	r3, [r7, #15]
 80003c4:	2b03      	cmp	r3, #3
 80003c6:	d9ec      	bls.n	80003a2 <lcd_send_cmd+0x6a>
 80003c8:	e015      	b.n	80003f6 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80003ca:	2300      	movs	r3, #0
 80003cc:	73bb      	strb	r3, [r7, #14]
 80003ce:	e00f      	b.n	80003f0 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 80003d0:	7bbb      	ldrb	r3, [r7, #14]
 80003d2:	3310      	adds	r3, #16
 80003d4:	443b      	add	r3, r7
 80003d6:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80003da:	7bbb      	ldrb	r3, [r7, #14]
 80003dc:	f042 0208 	orr.w	r2, r2, #8
 80003e0:	b2d2      	uxtb	r2, r2
 80003e2:	3310      	adds	r3, #16
 80003e4:	443b      	add	r3, r7
 80003e6:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80003ea:	7bbb      	ldrb	r3, [r7, #14]
 80003ec:	3301      	adds	r3, #1
 80003ee:	73bb      	strb	r3, [r7, #14]
 80003f0:	7bbb      	ldrb	r3, [r7, #14]
 80003f2:	2b03      	cmp	r3, #3
 80003f4:	d9ec      	bls.n	80003d0 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80003f6:	f107 0208 	add.w	r2, r7, #8
 80003fa:	2364      	movs	r3, #100	; 0x64
 80003fc:	9300      	str	r3, [sp, #0]
 80003fe:	2304      	movs	r3, #4
 8000400:	214e      	movs	r1, #78	; 0x4e
 8000402:	4803      	ldr	r0, [pc, #12]	; (8000410 <lcd_send_cmd+0xd8>)
 8000404:	f009 fdec 	bl	8009fe0 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000408:	bf00      	nop
 800040a:	3710      	adds	r7, #16
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	20000e08 	.word	0x20000e08
 8000414:	20000b36 	.word	0x20000b36

08000418 <lcd_send_data>:

void lcd_send_data (char data) {
 8000418:	b580      	push	{r7, lr}
 800041a:	b086      	sub	sp, #24
 800041c:	af02      	add	r7, sp, #8
 800041e:	4603      	mov	r3, r0
 8000420:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000422:	79fb      	ldrb	r3, [r7, #7]
 8000424:	f023 030f 	bic.w	r3, r3, #15
 8000428:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 800042a:	79fb      	ldrb	r3, [r7, #7]
 800042c:	011b      	lsls	r3, r3, #4
 800042e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000430:	7b7b      	ldrb	r3, [r7, #13]
 8000432:	f043 030d 	orr.w	r3, r3, #13
 8000436:	b2db      	uxtb	r3, r3
 8000438:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800043a:	7b7b      	ldrb	r3, [r7, #13]
 800043c:	f043 0309 	orr.w	r3, r3, #9
 8000440:	b2db      	uxtb	r3, r3
 8000442:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000444:	7b3b      	ldrb	r3, [r7, #12]
 8000446:	f043 030d 	orr.w	r3, r3, #13
 800044a:	b2db      	uxtb	r3, r3
 800044c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800044e:	7b3b      	ldrb	r3, [r7, #12]
 8000450:	f043 0309 	orr.w	r3, r3, #9
 8000454:	b2db      	uxtb	r3, r3
 8000456:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8000458:	bf00      	nop
 800045a:	4825      	ldr	r0, [pc, #148]	; (80004f0 <lcd_send_data+0xd8>)
 800045c:	f00a fa2d 	bl	800a8ba <HAL_I2C_GetError>
 8000460:	4603      	mov	r3, r0
 8000462:	2b04      	cmp	r3, #4
 8000464:	d0f9      	beq.n	800045a <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000466:	bf00      	nop
 8000468:	4821      	ldr	r0, [pc, #132]	; (80004f0 <lcd_send_data+0xd8>)
 800046a:	f00a fa19 	bl	800a8a0 <HAL_I2C_GetState>
 800046e:	4603      	mov	r3, r0
 8000470:	2b20      	cmp	r3, #32
 8000472:	d1f9      	bne.n	8000468 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8000474:	4b1f      	ldr	r3, [pc, #124]	; (80004f4 <lcd_send_data+0xdc>)
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d116      	bne.n	80004aa <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 800047c:	2300      	movs	r3, #0
 800047e:	73fb      	strb	r3, [r7, #15]
 8000480:	e00f      	b.n	80004a2 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 8000482:	7bfb      	ldrb	r3, [r7, #15]
 8000484:	3310      	adds	r3, #16
 8000486:	443b      	add	r3, r7
 8000488:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800048c:	7bfb      	ldrb	r3, [r7, #15]
 800048e:	f022 0208 	bic.w	r2, r2, #8
 8000492:	b2d2      	uxtb	r2, r2
 8000494:	3310      	adds	r3, #16
 8000496:	443b      	add	r3, r7
 8000498:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800049c:	7bfb      	ldrb	r3, [r7, #15]
 800049e:	3301      	adds	r3, #1
 80004a0:	73fb      	strb	r3, [r7, #15]
 80004a2:	7bfb      	ldrb	r3, [r7, #15]
 80004a4:	2b03      	cmp	r3, #3
 80004a6:	d9ec      	bls.n	8000482 <lcd_send_data+0x6a>
 80004a8:	e015      	b.n	80004d6 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80004aa:	2300      	movs	r3, #0
 80004ac:	73bb      	strb	r3, [r7, #14]
 80004ae:	e00f      	b.n	80004d0 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 80004b0:	7bbb      	ldrb	r3, [r7, #14]
 80004b2:	3310      	adds	r3, #16
 80004b4:	443b      	add	r3, r7
 80004b6:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80004ba:	7bbb      	ldrb	r3, [r7, #14]
 80004bc:	f042 0208 	orr.w	r2, r2, #8
 80004c0:	b2d2      	uxtb	r2, r2
 80004c2:	3310      	adds	r3, #16
 80004c4:	443b      	add	r3, r7
 80004c6:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80004ca:	7bbb      	ldrb	r3, [r7, #14]
 80004cc:	3301      	adds	r3, #1
 80004ce:	73bb      	strb	r3, [r7, #14]
 80004d0:	7bbb      	ldrb	r3, [r7, #14]
 80004d2:	2b03      	cmp	r3, #3
 80004d4:	d9ec      	bls.n	80004b0 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80004d6:	f107 0208 	add.w	r2, r7, #8
 80004da:	2364      	movs	r3, #100	; 0x64
 80004dc:	9300      	str	r3, [sp, #0]
 80004de:	2304      	movs	r3, #4
 80004e0:	214e      	movs	r1, #78	; 0x4e
 80004e2:	4803      	ldr	r0, [pc, #12]	; (80004f0 <lcd_send_data+0xd8>)
 80004e4:	f009 fd7c 	bl	8009fe0 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 80004e8:	bf00      	nop
 80004ea:	3710      	adds	r7, #16
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	20000e08 	.word	0x20000e08
 80004f4:	20000b36 	.word	0x20000b36

080004f8 <lcd_send_string>:

void lcd_send_string (char *str) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
	while (*str) {
 8000500:	e006      	b.n	8000510 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	1c5a      	adds	r2, r3, #1
 8000506:	607a      	str	r2, [r7, #4]
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	4618      	mov	r0, r3
 800050c:	f7ff ff84 	bl	8000418 <lcd_send_data>
	while (*str) {
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d1f4      	bne.n	8000502 <lcd_send_string+0xa>
	}
}
 8000518:	bf00      	nop
 800051a:	bf00      	nop
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
	...

08000524 <lcd_send_char>:

void lcd_send_char(char ch) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b086      	sub	sp, #24
 8000528:	af02      	add	r7, sp, #8
 800052a:	4603      	mov	r3, r0
 800052c:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 800052e:	79fb      	ldrb	r3, [r7, #7]
 8000530:	f023 030f 	bic.w	r3, r3, #15
 8000534:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	011b      	lsls	r3, r3, #4
 800053a:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 800053c:	7b7b      	ldrb	r3, [r7, #13]
 800053e:	f043 030d 	orr.w	r3, r3, #13
 8000542:	b2db      	uxtb	r3, r3
 8000544:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8000546:	7b7b      	ldrb	r3, [r7, #13]
 8000548:	f043 0309 	orr.w	r3, r3, #9
 800054c:	b2db      	uxtb	r3, r3
 800054e:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8000550:	7b3b      	ldrb	r3, [r7, #12]
 8000552:	f043 030d 	orr.w	r3, r3, #13
 8000556:	b2db      	uxtb	r3, r3
 8000558:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 800055a:	7b3b      	ldrb	r3, [r7, #12]
 800055c:	f043 0309 	orr.w	r3, r3, #9
 8000560:	b2db      	uxtb	r3, r3
 8000562:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8000564:	bf00      	nop
 8000566:	4825      	ldr	r0, [pc, #148]	; (80005fc <lcd_send_char+0xd8>)
 8000568:	f00a f9a7 	bl	800a8ba <HAL_I2C_GetError>
 800056c:	4603      	mov	r3, r0
 800056e:	2b04      	cmp	r3, #4
 8000570:	d0f9      	beq.n	8000566 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000572:	bf00      	nop
 8000574:	4821      	ldr	r0, [pc, #132]	; (80005fc <lcd_send_char+0xd8>)
 8000576:	f00a f993 	bl	800a8a0 <HAL_I2C_GetState>
 800057a:	4603      	mov	r3, r0
 800057c:	2b20      	cmp	r3, #32
 800057e:	d1f9      	bne.n	8000574 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 8000580:	4b1f      	ldr	r3, [pc, #124]	; (8000600 <lcd_send_char+0xdc>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d116      	bne.n	80005b6 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8000588:	2300      	movs	r3, #0
 800058a:	73fb      	strb	r3, [r7, #15]
 800058c:	e00f      	b.n	80005ae <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 800058e:	7bfb      	ldrb	r3, [r7, #15]
 8000590:	3310      	adds	r3, #16
 8000592:	443b      	add	r3, r7
 8000594:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000598:	7bfb      	ldrb	r3, [r7, #15]
 800059a:	f022 0208 	bic.w	r2, r2, #8
 800059e:	b2d2      	uxtb	r2, r2
 80005a0:	3310      	adds	r3, #16
 80005a2:	443b      	add	r3, r7
 80005a4:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80005a8:	7bfb      	ldrb	r3, [r7, #15]
 80005aa:	3301      	adds	r3, #1
 80005ac:	73fb      	strb	r3, [r7, #15]
 80005ae:	7bfb      	ldrb	r3, [r7, #15]
 80005b0:	2b03      	cmp	r3, #3
 80005b2:	d9ec      	bls.n	800058e <lcd_send_char+0x6a>
 80005b4:	e015      	b.n	80005e2 <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 80005b6:	2300      	movs	r3, #0
 80005b8:	73bb      	strb	r3, [r7, #14]
 80005ba:	e00f      	b.n	80005dc <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 80005bc:	7bbb      	ldrb	r3, [r7, #14]
 80005be:	3310      	adds	r3, #16
 80005c0:	443b      	add	r3, r7
 80005c2:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80005c6:	7bbb      	ldrb	r3, [r7, #14]
 80005c8:	f042 0208 	orr.w	r2, r2, #8
 80005cc:	b2d2      	uxtb	r2, r2
 80005ce:	3310      	adds	r3, #16
 80005d0:	443b      	add	r3, r7
 80005d2:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80005d6:	7bbb      	ldrb	r3, [r7, #14]
 80005d8:	3301      	adds	r3, #1
 80005da:	73bb      	strb	r3, [r7, #14]
 80005dc:	7bbb      	ldrb	r3, [r7, #14]
 80005de:	2b03      	cmp	r3, #3
 80005e0:	d9ec      	bls.n	80005bc <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 80005e2:	f107 0208 	add.w	r2, r7, #8
 80005e6:	2364      	movs	r3, #100	; 0x64
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2304      	movs	r3, #4
 80005ec:	214e      	movs	r1, #78	; 0x4e
 80005ee:	4803      	ldr	r0, [pc, #12]	; (80005fc <lcd_send_char+0xd8>)
 80005f0:	f009 fcf6 	bl	8009fe0 <HAL_I2C_Master_Transmit>
}
 80005f4:	bf00      	nop
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000e08 	.word	0x20000e08
 8000600:	20000b36 	.word	0x20000b36

08000604 <lcd_init>:

void lcd_init (void) {
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8000608:	2002      	movs	r0, #2
 800060a:	f7ff fe95 	bl	8000338 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 800060e:	2028      	movs	r0, #40	; 0x28
 8000610:	f7ff fe92 	bl	8000338 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8000614:	200c      	movs	r0, #12
 8000616:	f7ff fe8f 	bl	8000338 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 800061a:	2080      	movs	r0, #128	; 0x80
 800061c:	f7ff fe8c 	bl	8000338 <lcd_send_cmd>
	lcd_backlight(1);
 8000620:	2001      	movs	r0, #1
 8000622:	f000 f86d 	bl	8000700 <lcd_backlight>
}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}

0800062a <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 800062a:	b580      	push	{r7, lr}
 800062c:	b082      	sub	sp, #8
 800062e:	af00      	add	r7, sp, #0
 8000630:	4603      	mov	r3, r0
 8000632:	460a      	mov	r2, r1
 8000634:	71fb      	strb	r3, [r7, #7]
 8000636:	4613      	mov	r3, r2
 8000638:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	2b01      	cmp	r3, #1
 800063e:	d106      	bne.n	800064e <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8000640:	79bb      	ldrb	r3, [r7, #6]
 8000642:	337f      	adds	r3, #127	; 0x7f
 8000644:	b2db      	uxtb	r3, r3
 8000646:	4618      	mov	r0, r3
 8000648:	f7ff fe76 	bl	8000338 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 800064c:	e008      	b.n	8000660 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	2b02      	cmp	r3, #2
 8000652:	d105      	bne.n	8000660 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8000654:	79bb      	ldrb	r3, [r7, #6]
 8000656:	3b41      	subs	r3, #65	; 0x41
 8000658:	b2db      	uxtb	r3, r3
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff fe6c 	bl	8000338 <lcd_send_cmd>
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	603a      	str	r2, [r7, #0]
 8000672:	71fb      	strb	r3, [r7, #7]
 8000674:	460b      	mov	r3, r1
 8000676:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8000678:	79ba      	ldrb	r2, [r7, #6]
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	4611      	mov	r1, r2
 800067e:	4618      	mov	r0, r3
 8000680:	f7ff ffd3 	bl	800062a <lcd_gotoxy>
	lcd_send_string(str);
 8000684:	6838      	ldr	r0, [r7, #0]
 8000686:	f7ff ff37 	bl	80004f8 <lcd_send_string>
}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}

08000692 <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8000692:	b580      	push	{r7, lr}
 8000694:	b082      	sub	sp, #8
 8000696:	af00      	add	r7, sp, #0
 8000698:	4603      	mov	r3, r0
 800069a:	71fb      	strb	r3, [r7, #7]
 800069c:	460b      	mov	r3, r1
 800069e:	71bb      	strb	r3, [r7, #6]
 80006a0:	4613      	mov	r3, r2
 80006a2:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 80006a4:	79ba      	ldrb	r2, [r7, #6]
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	4611      	mov	r1, r2
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff ffbd 	bl	800062a <lcd_gotoxy>
    lcd_send_char(ch);
 80006b0:	797b      	ldrb	r3, [r7, #5]
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff ff36 	bl	8000524 <lcd_send_char>
}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <lcd_clear>:

void lcd_clear(void) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 80006c4:	2001      	movs	r0, #1
 80006c6:	f7ff fe37 	bl	8000338 <lcd_send_cmd>
    HAL_Delay(2);
 80006ca:	2002      	movs	r0, #2
 80006cc:	f008 fcfc 	bl	80090c8 <HAL_Delay>
}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	460a      	mov	r2, r1
 80006de:	71fb      	strb	r3, [r7, #7]
 80006e0:	4613      	mov	r3, r2
 80006e2:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 80006e4:	79ba      	ldrb	r2, [r7, #6]
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	4611      	mov	r1, r2
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff ff9d 	bl	800062a <lcd_gotoxy>

    lcd_send_char(' ');
 80006f0:	2020      	movs	r0, #32
 80006f2:	f7ff ff17 	bl	8000524 <lcd_send_char>
}
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
	...

08000700 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 800070a:	4a05      	ldr	r2, [pc, #20]	; (8000720 <lcd_backlight+0x20>)
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8000710:	2000      	movs	r0, #0
 8000712:	f7ff fe11 	bl	8000338 <lcd_send_cmd>
}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000b36 	.word	0x20000b36

08000724 <lcd_cursor>:

void lcd_cursor(int state) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2b01      	cmp	r3, #1
 8000730:	d106      	bne.n	8000740 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8000732:	200e      	movs	r0, #14
 8000734:	f7ff fe00 	bl	8000338 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8000738:	200f      	movs	r0, #15
 800073a:	f7ff fdfd 	bl	8000338 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 800073e:	e002      	b.n	8000746 <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8000740:	200c      	movs	r0, #12
 8000742:	f7ff fdf9 	bl	8000338 <lcd_send_cmd>
}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
	...

08000750 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000754:	f3bf 8f4f 	dsb	sy
}
 8000758:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <__NVIC_SystemReset+0x24>)
 800075c:	68db      	ldr	r3, [r3, #12]
 800075e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000762:	4904      	ldr	r1, [pc, #16]	; (8000774 <__NVIC_SystemReset+0x24>)
 8000764:	4b04      	ldr	r3, [pc, #16]	; (8000778 <__NVIC_SystemReset+0x28>)
 8000766:	4313      	orrs	r3, r2
 8000768:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800076a:	f3bf 8f4f 	dsb	sy
}
 800076e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000770:	bf00      	nop
 8000772:	e7fd      	b.n	8000770 <__NVIC_SystemReset+0x20>
 8000774:	e000ed00 	.word	0xe000ed00
 8000778:	05fa0004 	.word	0x05fa0004

0800077c <copyText>:
char *secilenDilText;
char *menudenCikisText;
char *enteraBasinizText;
char *hataKoduText;

char* copyText(const char* text) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
    char* result = (char*)malloc(strlen(text) + 1);
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f7ff fd4d 	bl	8000224 <strlen>
 800078a:	4603      	mov	r3, r0
 800078c:	3301      	adds	r3, #1
 800078e:	4618      	mov	r0, r3
 8000790:	f00c fa98 	bl	800ccc4 <malloc>
 8000794:	4603      	mov	r3, r0
 8000796:	60fb      	str	r3, [r7, #12]
    if (result != NULL) {
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d003      	beq.n	80007a6 <copyText+0x2a>
        strcpy(result, text);
 800079e:	6879      	ldr	r1, [r7, #4]
 80007a0:	68f8      	ldr	r0, [r7, #12]
 80007a2:	f00c fbf9 	bl	800cf98 <strcpy>
    }
    return result;
 80007a6:	68fb      	ldr	r3, [r7, #12]
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3710      	adds	r7, #16
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <printTemplate>:
        }
    }
    return result;
}

void printTemplate(int type, int page) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 80007ba:	20c8      	movs	r0, #200	; 0xc8
 80007bc:	f008 fc84 	bl	80090c8 <HAL_Delay>
	lcd_clear();
 80007c0:	f7ff ff7e 	bl	80006c0 <lcd_clear>
	if(type == 1 && page == 0) {
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d143      	bne.n	8000852 <printTemplate+0xa2>
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d140      	bne.n	8000852 <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 80007d0:	4a9d      	ldr	r2, [pc, #628]	; (8000a48 <printTemplate+0x298>)
 80007d2:	2101      	movs	r1, #1
 80007d4:	2001      	movs	r0, #1
 80007d6:	f7ff ff47 	bl	8000668 <lcd_print>
		lcd_print(2, 3, "0");
 80007da:	4a9c      	ldr	r2, [pc, #624]	; (8000a4c <printTemplate+0x29c>)
 80007dc:	2103      	movs	r1, #3
 80007de:	2002      	movs	r0, #2
 80007e0:	f7ff ff42 	bl	8000668 <lcd_print>
		lcd_print(2, 4, "1");
 80007e4:	4a9a      	ldr	r2, [pc, #616]	; (8000a50 <printTemplate+0x2a0>)
 80007e6:	2104      	movs	r1, #4
 80007e8:	2002      	movs	r0, #2
 80007ea:	f7ff ff3d 	bl	8000668 <lcd_print>
		lcd_print(2, 5, "2");
 80007ee:	4a99      	ldr	r2, [pc, #612]	; (8000a54 <printTemplate+0x2a4>)
 80007f0:	2105      	movs	r1, #5
 80007f2:	2002      	movs	r0, #2
 80007f4:	f7ff ff38 	bl	8000668 <lcd_print>
		lcd_print(2, 6, "3");
 80007f8:	4a97      	ldr	r2, [pc, #604]	; (8000a58 <printTemplate+0x2a8>)
 80007fa:	2106      	movs	r1, #6
 80007fc:	2002      	movs	r0, #2
 80007fe:	f7ff ff33 	bl	8000668 <lcd_print>
		lcd_print(2, 7, "4");
 8000802:	4a96      	ldr	r2, [pc, #600]	; (8000a5c <printTemplate+0x2ac>)
 8000804:	2107      	movs	r1, #7
 8000806:	2002      	movs	r0, #2
 8000808:	f7ff ff2e 	bl	8000668 <lcd_print>
		lcd_print(2, 10, "5");
 800080c:	4a94      	ldr	r2, [pc, #592]	; (8000a60 <printTemplate+0x2b0>)
 800080e:	210a      	movs	r1, #10
 8000810:	2002      	movs	r0, #2
 8000812:	f7ff ff29 	bl	8000668 <lcd_print>
		lcd_print(2, 11, "6");
 8000816:	4a93      	ldr	r2, [pc, #588]	; (8000a64 <printTemplate+0x2b4>)
 8000818:	210b      	movs	r1, #11
 800081a:	2002      	movs	r0, #2
 800081c:	f7ff ff24 	bl	8000668 <lcd_print>
		lcd_print(2, 12, "7");
 8000820:	4a91      	ldr	r2, [pc, #580]	; (8000a68 <printTemplate+0x2b8>)
 8000822:	210c      	movs	r1, #12
 8000824:	2002      	movs	r0, #2
 8000826:	f7ff ff1f 	bl	8000668 <lcd_print>
		lcd_print(2, 13, "8");
 800082a:	4a90      	ldr	r2, [pc, #576]	; (8000a6c <printTemplate+0x2bc>)
 800082c:	210d      	movs	r1, #13
 800082e:	2002      	movs	r0, #2
 8000830:	f7ff ff1a 	bl	8000668 <lcd_print>
		lcd_print(2, 14, "9");
 8000834:	4a8e      	ldr	r2, [pc, #568]	; (8000a70 <printTemplate+0x2c0>)
 8000836:	210e      	movs	r1, #14
 8000838:	2002      	movs	r0, #2
 800083a:	f7ff ff15 	bl	8000668 <lcd_print>
		lcd_print(1, 5, machineID);
 800083e:	4a8d      	ldr	r2, [pc, #564]	; (8000a74 <printTemplate+0x2c4>)
 8000840:	2105      	movs	r1, #5
 8000842:	2001      	movs	r0, #1
 8000844:	f7ff ff10 	bl	8000668 <lcd_print>
		lcd_gotoxy(2, 3);
 8000848:	2103      	movs	r1, #3
 800084a:	2002      	movs	r0, #2
 800084c:	f7ff feed 	bl	800062a <lcd_gotoxy>
			lcd_print(1, 1, "PASS: ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 8000850:	e0f5      	b.n	8000a3e <printTemplate+0x28e>
	} else if(type == 2) {
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2b02      	cmp	r3, #2
 8000856:	d178      	bne.n	800094a <printTemplate+0x19a>
		if(page == 1) {
 8000858:	683b      	ldr	r3, [r7, #0]
 800085a:	2b01      	cmp	r3, #1
 800085c:	d114      	bne.n	8000888 <printTemplate+0xd8>
			lcd_clear();
 800085e:	f7ff ff2f 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 8000862:	2064      	movs	r0, #100	; 0x64
 8000864:	f008 fc30 	bl	80090c8 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000868:	4a83      	ldr	r2, [pc, #524]	; (8000a78 <printTemplate+0x2c8>)
 800086a:	2101      	movs	r1, #1
 800086c:	2001      	movs	r0, #1
 800086e:	f7ff fefb 	bl	8000668 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000872:	4a82      	ldr	r2, [pc, #520]	; (8000a7c <printTemplate+0x2cc>)
 8000874:	2107      	movs	r1, #7
 8000876:	2001      	movs	r0, #1
 8000878:	f7ff fef6 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 800087c:	4a80      	ldr	r2, [pc, #512]	; (8000a80 <printTemplate+0x2d0>)
 800087e:	2101      	movs	r1, #1
 8000880:	2002      	movs	r0, #2
 8000882:	f7ff fef1 	bl	8000668 <lcd_print>
}
 8000886:	e0da      	b.n	8000a3e <printTemplate+0x28e>
		} else if(page == 2) {
 8000888:	683b      	ldr	r3, [r7, #0]
 800088a:	2b02      	cmp	r3, #2
 800088c:	d114      	bne.n	80008b8 <printTemplate+0x108>
			lcd_clear();
 800088e:	f7ff ff17 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 8000892:	2064      	movs	r0, #100	; 0x64
 8000894:	f008 fc18 	bl	80090c8 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000898:	4a77      	ldr	r2, [pc, #476]	; (8000a78 <printTemplate+0x2c8>)
 800089a:	2101      	movs	r1, #1
 800089c:	2001      	movs	r0, #1
 800089e:	f7ff fee3 	bl	8000668 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80008a2:	4a76      	ldr	r2, [pc, #472]	; (8000a7c <printTemplate+0x2cc>)
 80008a4:	2107      	movs	r1, #7
 80008a6:	2001      	movs	r0, #1
 80008a8:	f7ff fede 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 80008ac:	4a75      	ldr	r2, [pc, #468]	; (8000a84 <printTemplate+0x2d4>)
 80008ae:	2101      	movs	r1, #1
 80008b0:	2002      	movs	r0, #2
 80008b2:	f7ff fed9 	bl	8000668 <lcd_print>
}
 80008b6:	e0c2      	b.n	8000a3e <printTemplate+0x28e>
		} else if(page == 3) {
 80008b8:	683b      	ldr	r3, [r7, #0]
 80008ba:	2b03      	cmp	r3, #3
 80008bc:	d114      	bne.n	80008e8 <printTemplate+0x138>
			lcd_clear();
 80008be:	f7ff feff 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 80008c2:	2064      	movs	r0, #100	; 0x64
 80008c4:	f008 fc00 	bl	80090c8 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 80008c8:	4a6b      	ldr	r2, [pc, #428]	; (8000a78 <printTemplate+0x2c8>)
 80008ca:	2101      	movs	r1, #1
 80008cc:	2001      	movs	r0, #1
 80008ce:	f7ff fecb 	bl	8000668 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80008d2:	4a6a      	ldr	r2, [pc, #424]	; (8000a7c <printTemplate+0x2cc>)
 80008d4:	2107      	movs	r1, #7
 80008d6:	2001      	movs	r0, #1
 80008d8:	f7ff fec6 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 80008dc:	4a6a      	ldr	r2, [pc, #424]	; (8000a88 <printTemplate+0x2d8>)
 80008de:	2101      	movs	r1, #1
 80008e0:	2002      	movs	r0, #2
 80008e2:	f7ff fec1 	bl	8000668 <lcd_print>
}
 80008e6:	e0aa      	b.n	8000a3e <printTemplate+0x28e>
		} else if(page == 4) {
 80008e8:	683b      	ldr	r3, [r7, #0]
 80008ea:	2b04      	cmp	r3, #4
 80008ec:	d114      	bne.n	8000918 <printTemplate+0x168>
			lcd_clear();
 80008ee:	f7ff fee7 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 80008f2:	2064      	movs	r0, #100	; 0x64
 80008f4:	f008 fbe8 	bl	80090c8 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 80008f8:	4a5f      	ldr	r2, [pc, #380]	; (8000a78 <printTemplate+0x2c8>)
 80008fa:	2101      	movs	r1, #1
 80008fc:	2001      	movs	r0, #1
 80008fe:	f7ff feb3 	bl	8000668 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000902:	4a5e      	ldr	r2, [pc, #376]	; (8000a7c <printTemplate+0x2cc>)
 8000904:	2107      	movs	r1, #7
 8000906:	2001      	movs	r0, #1
 8000908:	f7ff feae 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 800090c:	4a5f      	ldr	r2, [pc, #380]	; (8000a8c <printTemplate+0x2dc>)
 800090e:	2101      	movs	r1, #1
 8000910:	2002      	movs	r0, #2
 8000912:	f7ff fea9 	bl	8000668 <lcd_print>
}
 8000916:	e092      	b.n	8000a3e <printTemplate+0x28e>
		} else if(page == 5) {
 8000918:	683b      	ldr	r3, [r7, #0]
 800091a:	2b05      	cmp	r3, #5
 800091c:	f040 808f 	bne.w	8000a3e <printTemplate+0x28e>
			lcd_clear();
 8000920:	f7ff fece 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 8000924:	2064      	movs	r0, #100	; 0x64
 8000926:	f008 fbcf 	bl	80090c8 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 800092a:	4a53      	ldr	r2, [pc, #332]	; (8000a78 <printTemplate+0x2c8>)
 800092c:	2101      	movs	r1, #1
 800092e:	2001      	movs	r0, #1
 8000930:	f7ff fe9a 	bl	8000668 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000934:	4a51      	ldr	r2, [pc, #324]	; (8000a7c <printTemplate+0x2cc>)
 8000936:	2107      	movs	r1, #7
 8000938:	2001      	movs	r0, #1
 800093a:	f7ff fe95 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 800093e:	4a54      	ldr	r2, [pc, #336]	; (8000a90 <printTemplate+0x2e0>)
 8000940:	2101      	movs	r1, #1
 8000942:	2002      	movs	r0, #2
 8000944:	f7ff fe90 	bl	8000668 <lcd_print>
}
 8000948:	e079      	b.n	8000a3e <printTemplate+0x28e>
	} else if(type == 3) {
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2b03      	cmp	r3, #3
 800094e:	d176      	bne.n	8000a3e <printTemplate+0x28e>
		if(page == 1) {
 8000950:	683b      	ldr	r3, [r7, #0]
 8000952:	2b01      	cmp	r3, #1
 8000954:	d114      	bne.n	8000980 <printTemplate+0x1d0>
			lcd_clear();
 8000956:	f7ff feb3 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 800095a:	2064      	movs	r0, #100	; 0x64
 800095c:	f008 fbb4 	bl	80090c8 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000960:	4a4c      	ldr	r2, [pc, #304]	; (8000a94 <printTemplate+0x2e4>)
 8000962:	2101      	movs	r1, #1
 8000964:	2001      	movs	r0, #1
 8000966:	f7ff fe7f 	bl	8000668 <lcd_print>
			lcd_print(1, 7, wifiPass);
 800096a:	4a4b      	ldr	r2, [pc, #300]	; (8000a98 <printTemplate+0x2e8>)
 800096c:	2107      	movs	r1, #7
 800096e:	2001      	movs	r0, #1
 8000970:	f7ff fe7a 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000974:	4a42      	ldr	r2, [pc, #264]	; (8000a80 <printTemplate+0x2d0>)
 8000976:	2101      	movs	r1, #1
 8000978:	2002      	movs	r0, #2
 800097a:	f7ff fe75 	bl	8000668 <lcd_print>
}
 800097e:	e05e      	b.n	8000a3e <printTemplate+0x28e>
		} else if(page == 2) {
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	2b02      	cmp	r3, #2
 8000984:	d114      	bne.n	80009b0 <printTemplate+0x200>
			lcd_clear();
 8000986:	f7ff fe9b 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 800098a:	2064      	movs	r0, #100	; 0x64
 800098c:	f008 fb9c 	bl	80090c8 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000990:	4a40      	ldr	r2, [pc, #256]	; (8000a94 <printTemplate+0x2e4>)
 8000992:	2101      	movs	r1, #1
 8000994:	2001      	movs	r0, #1
 8000996:	f7ff fe67 	bl	8000668 <lcd_print>
			lcd_print(1, 7, wifiPass);
 800099a:	4a3f      	ldr	r2, [pc, #252]	; (8000a98 <printTemplate+0x2e8>)
 800099c:	2107      	movs	r1, #7
 800099e:	2001      	movs	r0, #1
 80009a0:	f7ff fe62 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 80009a4:	4a37      	ldr	r2, [pc, #220]	; (8000a84 <printTemplate+0x2d4>)
 80009a6:	2101      	movs	r1, #1
 80009a8:	2002      	movs	r0, #2
 80009aa:	f7ff fe5d 	bl	8000668 <lcd_print>
}
 80009ae:	e046      	b.n	8000a3e <printTemplate+0x28e>
		} else if(page == 3) {
 80009b0:	683b      	ldr	r3, [r7, #0]
 80009b2:	2b03      	cmp	r3, #3
 80009b4:	d114      	bne.n	80009e0 <printTemplate+0x230>
			lcd_clear();
 80009b6:	f7ff fe83 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 80009ba:	2064      	movs	r0, #100	; 0x64
 80009bc:	f008 fb84 	bl	80090c8 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80009c0:	4a34      	ldr	r2, [pc, #208]	; (8000a94 <printTemplate+0x2e4>)
 80009c2:	2101      	movs	r1, #1
 80009c4:	2001      	movs	r0, #1
 80009c6:	f7ff fe4f 	bl	8000668 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80009ca:	4a33      	ldr	r2, [pc, #204]	; (8000a98 <printTemplate+0x2e8>)
 80009cc:	2107      	movs	r1, #7
 80009ce:	2001      	movs	r0, #1
 80009d0:	f7ff fe4a 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 80009d4:	4a2c      	ldr	r2, [pc, #176]	; (8000a88 <printTemplate+0x2d8>)
 80009d6:	2101      	movs	r1, #1
 80009d8:	2002      	movs	r0, #2
 80009da:	f7ff fe45 	bl	8000668 <lcd_print>
}
 80009de:	e02e      	b.n	8000a3e <printTemplate+0x28e>
		} else if(page == 4) {
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	2b04      	cmp	r3, #4
 80009e4:	d114      	bne.n	8000a10 <printTemplate+0x260>
			lcd_clear();
 80009e6:	f7ff fe6b 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 80009ea:	2064      	movs	r0, #100	; 0x64
 80009ec:	f008 fb6c 	bl	80090c8 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80009f0:	4a28      	ldr	r2, [pc, #160]	; (8000a94 <printTemplate+0x2e4>)
 80009f2:	2101      	movs	r1, #1
 80009f4:	2001      	movs	r0, #1
 80009f6:	f7ff fe37 	bl	8000668 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80009fa:	4a27      	ldr	r2, [pc, #156]	; (8000a98 <printTemplate+0x2e8>)
 80009fc:	2107      	movs	r1, #7
 80009fe:	2001      	movs	r0, #1
 8000a00:	f7ff fe32 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000a04:	4a21      	ldr	r2, [pc, #132]	; (8000a8c <printTemplate+0x2dc>)
 8000a06:	2101      	movs	r1, #1
 8000a08:	2002      	movs	r0, #2
 8000a0a:	f7ff fe2d 	bl	8000668 <lcd_print>
}
 8000a0e:	e016      	b.n	8000a3e <printTemplate+0x28e>
		} else if(page == 5) {
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	2b05      	cmp	r3, #5
 8000a14:	d113      	bne.n	8000a3e <printTemplate+0x28e>
			lcd_clear();
 8000a16:	f7ff fe53 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 8000a1a:	2064      	movs	r0, #100	; 0x64
 8000a1c:	f008 fb54 	bl	80090c8 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000a20:	4a1c      	ldr	r2, [pc, #112]	; (8000a94 <printTemplate+0x2e4>)
 8000a22:	2101      	movs	r1, #1
 8000a24:	2001      	movs	r0, #1
 8000a26:	f7ff fe1f 	bl	8000668 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000a2a:	4a1b      	ldr	r2, [pc, #108]	; (8000a98 <printTemplate+0x2e8>)
 8000a2c:	2107      	movs	r1, #7
 8000a2e:	2001      	movs	r0, #1
 8000a30:	f7ff fe1a 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000a34:	4a16      	ldr	r2, [pc, #88]	; (8000a90 <printTemplate+0x2e0>)
 8000a36:	2101      	movs	r1, #1
 8000a38:	2002      	movs	r0, #2
 8000a3a:	f7ff fe15 	bl	8000668 <lcd_print>
}
 8000a3e:	bf00      	nop
 8000a40:	3708      	adds	r7, #8
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	0800d87c 	.word	0x0800d87c
 8000a4c:	0800d884 	.word	0x0800d884
 8000a50:	0800d888 	.word	0x0800d888
 8000a54:	0800d88c 	.word	0x0800d88c
 8000a58:	0800d890 	.word	0x0800d890
 8000a5c:	0800d894 	.word	0x0800d894
 8000a60:	0800d898 	.word	0x0800d898
 8000a64:	0800d89c 	.word	0x0800d89c
 8000a68:	0800d8a0 	.word	0x0800d8a0
 8000a6c:	0800d8a4 	.word	0x0800d8a4
 8000a70:	0800d8a8 	.word	0x0800d8a8
 8000a74:	20000bf4 	.word	0x20000bf4
 8000a78:	0800d8ac 	.word	0x0800d8ac
 8000a7c:	20000c00 	.word	0x20000c00
 8000a80:	0800d8b4 	.word	0x0800d8b4
 8000a84:	0800d8c8 	.word	0x0800d8c8
 8000a88:	0800d8dc 	.word	0x0800d8dc
 8000a8c:	0800d8f0 	.word	0x0800d8f0
 8000a90:	0800d904 	.word	0x0800d904
 8000a94:	0800d918 	.word	0x0800d918
 8000a98:	20000c24 	.word	0x20000c24

08000a9c <getCharFromCursorPosition>:

char getCharFromCursorPosition(int cursorPosition) {
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
    return charactersArray[cursorPosition];
 8000aa4:	4a04      	ldr	r2, [pc, #16]	; (8000ab8 <getCharFromCursorPosition+0x1c>)
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4413      	add	r3, r2
 8000aaa:	781b      	ldrb	r3, [r3, #0]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bc80      	pop	{r7}
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	20000960 	.word	0x20000960

08000abc <getNumbersFromCursorPosition>:

char getNumbersFromCursorPosition(int cursorPosition) {
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
	return numbersArray[cursorPosition];
 8000ac4:	4a04      	ldr	r2, [pc, #16]	; (8000ad8 <getNumbersFromCursorPosition+0x1c>)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	4413      	add	r3, r2
 8000aca:	781b      	ldrb	r3, [r3, #0]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	370c      	adds	r7, #12
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bc80      	pop	{r7}
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	200009b4 	.word	0x200009b4

08000adc <takeMachineID>:

void takeMachineID(int state, I2C_HandleTypeDef *hi2c1) {
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b086      	sub	sp, #24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	6039      	str	r1, [r7, #0]
	mainSection:
	lcd_cursor(1);
 8000ae6:	2001      	movs	r0, #1
 8000ae8:	f7ff fe1c 	bl	8000724 <lcd_cursor>

	if(state == 0) {
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d104      	bne.n	8000afc <takeMachineID+0x20>
	    memset(machineID, 0, sizeof(machineID));
 8000af2:	220c      	movs	r2, #12
 8000af4:	2100      	movs	r1, #0
 8000af6:	4891      	ldr	r0, [pc, #580]	; (8000d3c <takeMachineID+0x260>)
 8000af8:	f00c f9fa 	bl	800cef0 <memset>
	}

    int cursorPosition = 3;
 8000afc:	2303      	movs	r3, #3
 8000afe:	617b      	str	r3, [r7, #20]
    int machineIDLoc = 0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	613b      	str	r3, [r7, #16]
    int writeLoc = 5;
 8000b04:	2305      	movs	r3, #5
 8000b06:	60fb      	str	r3, [r7, #12]

    printTemplate(1, 0);
 8000b08:	2100      	movs	r1, #0
 8000b0a:	2001      	movs	r0, #1
 8000b0c:	f7ff fe50 	bl	80007b0 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000b10:	2108      	movs	r1, #8
 8000b12:	488b      	ldr	r0, [pc, #556]	; (8000d40 <takeMachineID+0x264>)
 8000b14:	f009 f8a8 	bl	8009c68 <HAL_GPIO_ReadPin>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d123      	bne.n	8000b66 <takeMachineID+0x8a>
        	lcd_cursor(0);
 8000b1e:	2000      	movs	r0, #0
 8000b20:	f7ff fe00 	bl	8000724 <lcd_cursor>

        	if(strlen(machineID) != 12) {
 8000b24:	4885      	ldr	r0, [pc, #532]	; (8000d3c <takeMachineID+0x260>)
 8000b26:	f7ff fb7d 	bl	8000224 <strlen>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b0c      	cmp	r3, #12
 8000b2e:	f000 8100 	beq.w	8000d32 <takeMachineID+0x256>
        		lcd_clear();
 8000b32:	f7ff fdc5 	bl	80006c0 <lcd_clear>
        		lcd_print(1, 1, " ID 12 KARAKTER ");
 8000b36:	4a83      	ldr	r2, [pc, #524]	; (8000d44 <takeMachineID+0x268>)
 8000b38:	2101      	movs	r1, #1
 8000b3a:	2001      	movs	r0, #1
 8000b3c:	f7ff fd94 	bl	8000668 <lcd_print>
        		lcd_print(2, 1, " OLMAK ZORUNDA! ");
 8000b40:	4a81      	ldr	r2, [pc, #516]	; (8000d48 <takeMachineID+0x26c>)
 8000b42:	2101      	movs	r1, #1
 8000b44:	2002      	movs	r0, #2
 8000b46:	f7ff fd8f 	bl	8000668 <lcd_print>
        		HAL_Delay(300);
 8000b4a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000b4e:	f008 fabb 	bl	80090c8 <HAL_Delay>
        		memset(machineID, 0, sizeof(machineID));
 8000b52:	220c      	movs	r2, #12
 8000b54:	2100      	movs	r1, #0
 8000b56:	4879      	ldr	r0, [pc, #484]	; (8000d3c <takeMachineID+0x260>)
 8000b58:	f00c f9ca 	bl	800cef0 <memset>
        		HAL_Delay(1200);
 8000b5c:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000b60:	f008 fab2 	bl	80090c8 <HAL_Delay>
        		goto mainSection;
 8000b64:	e7bf      	b.n	8000ae6 <takeMachineID+0xa>
        	}

            break;
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000b66:	2101      	movs	r1, #1
 8000b68:	4875      	ldr	r0, [pc, #468]	; (8000d40 <takeMachineID+0x264>)
 8000b6a:	f009 f87d 	bl	8009c68 <HAL_GPIO_ReadPin>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d112      	bne.n	8000b9a <takeMachineID+0xbe>
        	if(cursorPosition == 7) {
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	2b07      	cmp	r3, #7
 8000b78:	d102      	bne.n	8000b80 <takeMachineID+0xa4>
        		cursorPosition = 10;
 8000b7a:	230a      	movs	r3, #10
 8000b7c:	617b      	str	r3, [r7, #20]
 8000b7e:	e008      	b.n	8000b92 <takeMachineID+0xb6>
        	} else if (cursorPosition == 14) {
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	2b0e      	cmp	r3, #14
 8000b84:	d102      	bne.n	8000b8c <takeMachineID+0xb0>
                cursorPosition = 3;
 8000b86:	2303      	movs	r3, #3
 8000b88:	617b      	str	r3, [r7, #20]
 8000b8a:	e002      	b.n	8000b92 <takeMachineID+0xb6>
            } else {
            	cursorPosition++;
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	3301      	adds	r3, #1
 8000b90:	617b      	str	r3, [r7, #20]
            }

        	HAL_Delay(350);
 8000b92:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000b96:	f008 fa97 	bl	80090c8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8000b9a:	2108      	movs	r1, #8
 8000b9c:	486b      	ldr	r0, [pc, #428]	; (8000d4c <takeMachineID+0x270>)
 8000b9e:	f009 f863 	bl	8009c68 <HAL_GPIO_ReadPin>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d112      	bne.n	8000bce <takeMachineID+0xf2>
            if (cursorPosition == 3) {
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	2b03      	cmp	r3, #3
 8000bac:	d102      	bne.n	8000bb4 <takeMachineID+0xd8>
                cursorPosition = 14;
 8000bae:	230e      	movs	r3, #14
 8000bb0:	617b      	str	r3, [r7, #20]
 8000bb2:	e008      	b.n	8000bc6 <takeMachineID+0xea>
            } else if(cursorPosition == 10) {
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	2b0a      	cmp	r3, #10
 8000bb8:	d102      	bne.n	8000bc0 <takeMachineID+0xe4>
            	cursorPosition = 7;
 8000bba:	2307      	movs	r3, #7
 8000bbc:	617b      	str	r3, [r7, #20]
 8000bbe:	e002      	b.n	8000bc6 <takeMachineID+0xea>
            } else {
            	cursorPosition--;
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	3b01      	subs	r3, #1
 8000bc4:	617b      	str	r3, [r7, #20]
            }

            HAL_Delay(350);
 8000bc6:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000bca:	f008 fa7d 	bl	80090c8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8000bce:	2102      	movs	r1, #2
 8000bd0:	485b      	ldr	r0, [pc, #364]	; (8000d40 <takeMachineID+0x264>)
 8000bd2:	f009 f849 	bl	8009c68 <HAL_GPIO_ReadPin>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d16c      	bne.n	8000cb6 <takeMachineID+0x1da>
        	if(cursorPosition == 3) {
 8000bdc:	697b      	ldr	r3, [r7, #20]
 8000bde:	2b03      	cmp	r3, #3
 8000be0:	d105      	bne.n	8000bee <takeMachineID+0x112>
        		machineID[machineIDLoc] = '0';
 8000be2:	4a56      	ldr	r2, [pc, #344]	; (8000d3c <takeMachineID+0x260>)
 8000be4:	693b      	ldr	r3, [r7, #16]
 8000be6:	4413      	add	r3, r2
 8000be8:	2230      	movs	r2, #48	; 0x30
 8000bea:	701a      	strb	r2, [r3, #0]
 8000bec:	e04f      	b.n	8000c8e <takeMachineID+0x1b2>
        	} else if(cursorPosition == 4) {
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	2b04      	cmp	r3, #4
 8000bf2:	d105      	bne.n	8000c00 <takeMachineID+0x124>
        		machineID[machineIDLoc] = '1';
 8000bf4:	4a51      	ldr	r2, [pc, #324]	; (8000d3c <takeMachineID+0x260>)
 8000bf6:	693b      	ldr	r3, [r7, #16]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	2231      	movs	r2, #49	; 0x31
 8000bfc:	701a      	strb	r2, [r3, #0]
 8000bfe:	e046      	b.n	8000c8e <takeMachineID+0x1b2>
        	} else if(cursorPosition == 5) {
 8000c00:	697b      	ldr	r3, [r7, #20]
 8000c02:	2b05      	cmp	r3, #5
 8000c04:	d105      	bne.n	8000c12 <takeMachineID+0x136>
        		machineID[machineIDLoc] = '2';
 8000c06:	4a4d      	ldr	r2, [pc, #308]	; (8000d3c <takeMachineID+0x260>)
 8000c08:	693b      	ldr	r3, [r7, #16]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	2232      	movs	r2, #50	; 0x32
 8000c0e:	701a      	strb	r2, [r3, #0]
 8000c10:	e03d      	b.n	8000c8e <takeMachineID+0x1b2>
        	} else if(cursorPosition == 6) {
 8000c12:	697b      	ldr	r3, [r7, #20]
 8000c14:	2b06      	cmp	r3, #6
 8000c16:	d105      	bne.n	8000c24 <takeMachineID+0x148>
        		machineID[machineIDLoc] = '3';
 8000c18:	4a48      	ldr	r2, [pc, #288]	; (8000d3c <takeMachineID+0x260>)
 8000c1a:	693b      	ldr	r3, [r7, #16]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	2233      	movs	r2, #51	; 0x33
 8000c20:	701a      	strb	r2, [r3, #0]
 8000c22:	e034      	b.n	8000c8e <takeMachineID+0x1b2>
        	} else if(cursorPosition == 7) {
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	2b07      	cmp	r3, #7
 8000c28:	d105      	bne.n	8000c36 <takeMachineID+0x15a>
        		machineID[machineIDLoc] = '4';
 8000c2a:	4a44      	ldr	r2, [pc, #272]	; (8000d3c <takeMachineID+0x260>)
 8000c2c:	693b      	ldr	r3, [r7, #16]
 8000c2e:	4413      	add	r3, r2
 8000c30:	2234      	movs	r2, #52	; 0x34
 8000c32:	701a      	strb	r2, [r3, #0]
 8000c34:	e02b      	b.n	8000c8e <takeMachineID+0x1b2>
        	} else if(cursorPosition == 10) {
 8000c36:	697b      	ldr	r3, [r7, #20]
 8000c38:	2b0a      	cmp	r3, #10
 8000c3a:	d105      	bne.n	8000c48 <takeMachineID+0x16c>
        		machineID[machineIDLoc] = '5';
 8000c3c:	4a3f      	ldr	r2, [pc, #252]	; (8000d3c <takeMachineID+0x260>)
 8000c3e:	693b      	ldr	r3, [r7, #16]
 8000c40:	4413      	add	r3, r2
 8000c42:	2235      	movs	r2, #53	; 0x35
 8000c44:	701a      	strb	r2, [r3, #0]
 8000c46:	e022      	b.n	8000c8e <takeMachineID+0x1b2>
        	} else if(cursorPosition == 11) {
 8000c48:	697b      	ldr	r3, [r7, #20]
 8000c4a:	2b0b      	cmp	r3, #11
 8000c4c:	d105      	bne.n	8000c5a <takeMachineID+0x17e>
        		machineID[machineIDLoc] = '6';
 8000c4e:	4a3b      	ldr	r2, [pc, #236]	; (8000d3c <takeMachineID+0x260>)
 8000c50:	693b      	ldr	r3, [r7, #16]
 8000c52:	4413      	add	r3, r2
 8000c54:	2236      	movs	r2, #54	; 0x36
 8000c56:	701a      	strb	r2, [r3, #0]
 8000c58:	e019      	b.n	8000c8e <takeMachineID+0x1b2>
        	} else if(cursorPosition == 12) {
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	2b0c      	cmp	r3, #12
 8000c5e:	d105      	bne.n	8000c6c <takeMachineID+0x190>
        		machineID[machineIDLoc] = '7';
 8000c60:	4a36      	ldr	r2, [pc, #216]	; (8000d3c <takeMachineID+0x260>)
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	4413      	add	r3, r2
 8000c66:	2237      	movs	r2, #55	; 0x37
 8000c68:	701a      	strb	r2, [r3, #0]
 8000c6a:	e010      	b.n	8000c8e <takeMachineID+0x1b2>
        	} else if(cursorPosition == 13) {
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	2b0d      	cmp	r3, #13
 8000c70:	d105      	bne.n	8000c7e <takeMachineID+0x1a2>
        		machineID[machineIDLoc] = '8';
 8000c72:	4a32      	ldr	r2, [pc, #200]	; (8000d3c <takeMachineID+0x260>)
 8000c74:	693b      	ldr	r3, [r7, #16]
 8000c76:	4413      	add	r3, r2
 8000c78:	2238      	movs	r2, #56	; 0x38
 8000c7a:	701a      	strb	r2, [r3, #0]
 8000c7c:	e007      	b.n	8000c8e <takeMachineID+0x1b2>
        	} else if(cursorPosition == 14) {
 8000c7e:	697b      	ldr	r3, [r7, #20]
 8000c80:	2b0e      	cmp	r3, #14
 8000c82:	d104      	bne.n	8000c8e <takeMachineID+0x1b2>
        		machineID[machineIDLoc] = '9';
 8000c84:	4a2d      	ldr	r2, [pc, #180]	; (8000d3c <takeMachineID+0x260>)
 8000c86:	693b      	ldr	r3, [r7, #16]
 8000c88:	4413      	add	r3, r2
 8000c8a:	2239      	movs	r2, #57	; 0x39
 8000c8c:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[machineIDLoc]);
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	b2d9      	uxtb	r1, r3
 8000c92:	4a2a      	ldr	r2, [pc, #168]	; (8000d3c <takeMachineID+0x260>)
 8000c94:	693b      	ldr	r3, [r7, #16]
 8000c96:	4413      	add	r3, r2
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	2001      	movs	r0, #1
 8000c9e:	f7ff fcf8 	bl	8000692 <lcd_print_char>

        	writeLoc++;
 8000ca2:	68fb      	ldr	r3, [r7, #12]
 8000ca4:	3301      	adds	r3, #1
 8000ca6:	60fb      	str	r3, [r7, #12]
        	machineIDLoc++;
 8000ca8:	693b      	ldr	r3, [r7, #16]
 8000caa:	3301      	adds	r3, #1
 8000cac:	613b      	str	r3, [r7, #16]

        	HAL_Delay(450);
 8000cae:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8000cb2:	f008 fa09 	bl	80090c8 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8000cb6:	2104      	movs	r1, #4
 8000cb8:	4821      	ldr	r0, [pc, #132]	; (8000d40 <takeMachineID+0x264>)
 8000cba:	f008 ffd5 	bl	8009c68 <HAL_GPIO_ReadPin>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b01      	cmp	r3, #1
 8000cc2:	d12f      	bne.n	8000d24 <takeMachineID+0x248>
            if(strlen(machineID) >= 1) {
 8000cc4:	4b1d      	ldr	r3, [pc, #116]	; (8000d3c <takeMachineID+0x260>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d027      	beq.n	8000d1c <takeMachineID+0x240>

                machineID[machineIDLoc] = '\0';
 8000ccc:	4a1b      	ldr	r2, [pc, #108]	; (8000d3c <takeMachineID+0x260>)
 8000cce:	693b      	ldr	r3, [r7, #16]
 8000cd0:	4413      	add	r3, r2
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	701a      	strb	r2, [r3, #0]

                lcd_delete_char(1, 4+machineIDLoc);
 8000cd6:	693b      	ldr	r3, [r7, #16]
 8000cd8:	b2db      	uxtb	r3, r3
 8000cda:	3304      	adds	r3, #4
 8000cdc:	b2db      	uxtb	r3, r3
 8000cde:	4619      	mov	r1, r3
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	f7ff fcf7 	bl	80006d4 <lcd_delete_char>
                HAL_Delay(50);
 8000ce6:	2032      	movs	r0, #50	; 0x32
 8000ce8:	f008 f9ee 	bl	80090c8 <HAL_Delay>

                if(writeLoc > 5) {
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	2b05      	cmp	r3, #5
 8000cf0:	dd03      	ble.n	8000cfa <takeMachineID+0x21e>
                	writeLoc--;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	3b01      	subs	r3, #1
 8000cf6:	60fb      	str	r3, [r7, #12]
 8000cf8:	e004      	b.n	8000d04 <takeMachineID+0x228>
                } else if(writeLoc < 5) {
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	2b04      	cmp	r3, #4
 8000cfe:	dc01      	bgt.n	8000d04 <takeMachineID+0x228>
                	writeLoc = 5;
 8000d00:	2305      	movs	r3, #5
 8000d02:	60fb      	str	r3, [r7, #12]
                }

                if(machineIDLoc > 0) {
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	dd03      	ble.n	8000d12 <takeMachineID+0x236>
                	machineIDLoc--;
 8000d0a:	693b      	ldr	r3, [r7, #16]
 8000d0c:	3b01      	subs	r3, #1
 8000d0e:	613b      	str	r3, [r7, #16]
 8000d10:	e004      	b.n	8000d1c <takeMachineID+0x240>
                } else if(machineIDLoc < 0) {
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	da01      	bge.n	8000d1c <takeMachineID+0x240>
                	machineIDLoc = 0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	613b      	str	r3, [r7, #16]
                }
            }

            HAL_Delay(350);
 8000d1c:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000d20:	f008 f9d2 	bl	80090c8 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8000d24:	697b      	ldr	r3, [r7, #20]
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	4619      	mov	r1, r3
 8000d2a:	2002      	movs	r0, #2
 8000d2c:	f7ff fc7d 	bl	800062a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000d30:	e6ee      	b.n	8000b10 <takeMachineID+0x34>
            break;
 8000d32:	bf00      	nop
    }
}
 8000d34:	bf00      	nop
 8000d36:	3718      	adds	r7, #24
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20000bf4 	.word	0x20000bf4
 8000d40:	40010800 	.word	0x40010800
 8000d44:	0800d920 	.word	0x0800d920
 8000d48:	0800d934 	.word	0x0800d934
 8000d4c:	40011000 	.word	0x40011000

08000d50 <takeWifiSSID>:

void takeWifiSSID(int state, I2C_HandleTypeDef *hi2c1) {
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b086      	sub	sp, #24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
    lcd_cursor(1);
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	f7ff fce2 	bl	8000724 <lcd_cursor>

    if(state == 0) {
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d104      	bne.n	8000d70 <takeWifiSSID+0x20>
    	memset(wifiSSID, 0, sizeof(wifiSSID));
 8000d66:	2221      	movs	r2, #33	; 0x21
 8000d68:	2100      	movs	r1, #0
 8000d6a:	489d      	ldr	r0, [pc, #628]	; (8000fe0 <takeWifiSSID+0x290>)
 8000d6c:	f00c f8c0 	bl	800cef0 <memset>
    }

    int realCharPos = 1;
 8000d70:	2301      	movs	r3, #1
 8000d72:	617b      	str	r3, [r7, #20]
    cursorPosition = 1;
 8000d74:	4b9b      	ldr	r3, [pc, #620]	; (8000fe4 <takeWifiSSID+0x294>)
 8000d76:	2201      	movs	r2, #1
 8000d78:	601a      	str	r2, [r3, #0]
    page = 1;
 8000d7a:	4b9b      	ldr	r3, [pc, #620]	; (8000fe8 <takeWifiSSID+0x298>)
 8000d7c:	2201      	movs	r2, #1
 8000d7e:	601a      	str	r2, [r3, #0]
    int wifiNameLoc = 0;
 8000d80:	2300      	movs	r3, #0
 8000d82:	613b      	str	r3, [r7, #16]
    int writeLoc = 7;
 8000d84:	2307      	movs	r3, #7
 8000d86:	60fb      	str	r3, [r7, #12]

    printTemplate(2, 1);
 8000d88:	2101      	movs	r1, #1
 8000d8a:	2002      	movs	r0, #2
 8000d8c:	f7ff fd10 	bl	80007b0 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000d90:	2108      	movs	r1, #8
 8000d92:	4896      	ldr	r0, [pc, #600]	; (8000fec <takeWifiSSID+0x29c>)
 8000d94:	f008 ff68 	bl	8009c68 <HAL_GPIO_ReadPin>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	d103      	bne.n	8000da6 <takeWifiSSID+0x56>
            lcd_cursor(0);
 8000d9e:	2000      	movs	r0, #0
 8000da0:	f7ff fcc0 	bl	8000724 <lcd_cursor>

            break;
 8000da4:	e142      	b.n	800102c <takeWifiSSID+0x2dc>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000da6:	2101      	movs	r1, #1
 8000da8:	4890      	ldr	r0, [pc, #576]	; (8000fec <takeWifiSSID+0x29c>)
 8000daa:	f008 ff5d 	bl	8009c68 <HAL_GPIO_ReadPin>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b01      	cmp	r3, #1
 8000db2:	d166      	bne.n	8000e82 <takeWifiSSID+0x132>
        	realCharPos++;
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	3301      	adds	r3, #1
 8000db8:	617b      	str	r3, [r7, #20]
        	if(realCharPos > 80) {
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	2b50      	cmp	r3, #80	; 0x50
 8000dbe:	dd01      	ble.n	8000dc4 <takeWifiSSID+0x74>
        		realCharPos = 1;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	617b      	str	r3, [r7, #20]
        	}
            if (cursorPosition == 16) {
 8000dc4:	4b87      	ldr	r3, [pc, #540]	; (8000fe4 <takeWifiSSID+0x294>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	2b10      	cmp	r3, #16
 8000dca:	d152      	bne.n	8000e72 <takeWifiSSID+0x122>
            	if(page == 1) {
 8000dcc:	4b86      	ldr	r3, [pc, #536]	; (8000fe8 <takeWifiSSID+0x298>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d10c      	bne.n	8000dee <takeWifiSSID+0x9e>
            		cursorPosition = 1;
 8000dd4:	4b83      	ldr	r3, [pc, #524]	; (8000fe4 <takeWifiSSID+0x294>)
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	601a      	str	r2, [r3, #0]
            		page++;
 8000dda:	4b83      	ldr	r3, [pc, #524]	; (8000fe8 <takeWifiSSID+0x298>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	3301      	adds	r3, #1
 8000de0:	4a81      	ldr	r2, [pc, #516]	; (8000fe8 <takeWifiSSID+0x298>)
 8000de2:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 2);
 8000de4:	2102      	movs	r1, #2
 8000de6:	2002      	movs	r0, #2
 8000de8:	f7ff fce2 	bl	80007b0 <printTemplate>
 8000dec:	e046      	b.n	8000e7c <takeWifiSSID+0x12c>
            	} else if(page == 2) {
 8000dee:	4b7e      	ldr	r3, [pc, #504]	; (8000fe8 <takeWifiSSID+0x298>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	2b02      	cmp	r3, #2
 8000df4:	d10c      	bne.n	8000e10 <takeWifiSSID+0xc0>
            		cursorPosition = 1;
 8000df6:	4b7b      	ldr	r3, [pc, #492]	; (8000fe4 <takeWifiSSID+0x294>)
 8000df8:	2201      	movs	r2, #1
 8000dfa:	601a      	str	r2, [r3, #0]
            		page++;
 8000dfc:	4b7a      	ldr	r3, [pc, #488]	; (8000fe8 <takeWifiSSID+0x298>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	3301      	adds	r3, #1
 8000e02:	4a79      	ldr	r2, [pc, #484]	; (8000fe8 <takeWifiSSID+0x298>)
 8000e04:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 3);
 8000e06:	2103      	movs	r1, #3
 8000e08:	2002      	movs	r0, #2
 8000e0a:	f7ff fcd1 	bl	80007b0 <printTemplate>
 8000e0e:	e035      	b.n	8000e7c <takeWifiSSID+0x12c>
            	} else if(page == 3) {
 8000e10:	4b75      	ldr	r3, [pc, #468]	; (8000fe8 <takeWifiSSID+0x298>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	2b03      	cmp	r3, #3
 8000e16:	d10c      	bne.n	8000e32 <takeWifiSSID+0xe2>
            		cursorPosition = 1;
 8000e18:	4b72      	ldr	r3, [pc, #456]	; (8000fe4 <takeWifiSSID+0x294>)
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	601a      	str	r2, [r3, #0]
            		page++;
 8000e1e:	4b72      	ldr	r3, [pc, #456]	; (8000fe8 <takeWifiSSID+0x298>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	3301      	adds	r3, #1
 8000e24:	4a70      	ldr	r2, [pc, #448]	; (8000fe8 <takeWifiSSID+0x298>)
 8000e26:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 4);
 8000e28:	2104      	movs	r1, #4
 8000e2a:	2002      	movs	r0, #2
 8000e2c:	f7ff fcc0 	bl	80007b0 <printTemplate>
 8000e30:	e024      	b.n	8000e7c <takeWifiSSID+0x12c>
            	} else if(page == 4) {
 8000e32:	4b6d      	ldr	r3, [pc, #436]	; (8000fe8 <takeWifiSSID+0x298>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	2b04      	cmp	r3, #4
 8000e38:	d10c      	bne.n	8000e54 <takeWifiSSID+0x104>
            		cursorPosition = 1;
 8000e3a:	4b6a      	ldr	r3, [pc, #424]	; (8000fe4 <takeWifiSSID+0x294>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	601a      	str	r2, [r3, #0]
            		page++;
 8000e40:	4b69      	ldr	r3, [pc, #420]	; (8000fe8 <takeWifiSSID+0x298>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	3301      	adds	r3, #1
 8000e46:	4a68      	ldr	r2, [pc, #416]	; (8000fe8 <takeWifiSSID+0x298>)
 8000e48:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 5);
 8000e4a:	2105      	movs	r1, #5
 8000e4c:	2002      	movs	r0, #2
 8000e4e:	f7ff fcaf 	bl	80007b0 <printTemplate>
 8000e52:	e013      	b.n	8000e7c <takeWifiSSID+0x12c>
            	} else if(page == 5) {
 8000e54:	4b64      	ldr	r3, [pc, #400]	; (8000fe8 <takeWifiSSID+0x298>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b05      	cmp	r3, #5
 8000e5a:	d10f      	bne.n	8000e7c <takeWifiSSID+0x12c>
            		cursorPosition = 1;
 8000e5c:	4b61      	ldr	r3, [pc, #388]	; (8000fe4 <takeWifiSSID+0x294>)
 8000e5e:	2201      	movs	r2, #1
 8000e60:	601a      	str	r2, [r3, #0]
            		page = 1;
 8000e62:	4b61      	ldr	r3, [pc, #388]	; (8000fe8 <takeWifiSSID+0x298>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 8000e68:	2101      	movs	r1, #1
 8000e6a:	2002      	movs	r0, #2
 8000e6c:	f7ff fca0 	bl	80007b0 <printTemplate>
 8000e70:	e004      	b.n	8000e7c <takeWifiSSID+0x12c>
            	}
            } else {
            	cursorPosition++;
 8000e72:	4b5c      	ldr	r3, [pc, #368]	; (8000fe4 <takeWifiSSID+0x294>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	3301      	adds	r3, #1
 8000e78:	4a5a      	ldr	r2, [pc, #360]	; (8000fe4 <takeWifiSSID+0x294>)
 8000e7a:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8000e7c:	20fa      	movs	r0, #250	; 0xfa
 8000e7e:	f008 f923 	bl	80090c8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8000e82:	2108      	movs	r1, #8
 8000e84:	485a      	ldr	r0, [pc, #360]	; (8000ff0 <takeWifiSSID+0x2a0>)
 8000e86:	f008 feef 	bl	8009c68 <HAL_GPIO_ReadPin>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b01      	cmp	r3, #1
 8000e8e:	d15e      	bne.n	8000f4e <takeWifiSSID+0x1fe>
        	realCharPos--;
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	3b01      	subs	r3, #1
 8000e94:	617b      	str	r3, [r7, #20]
        	if(realCharPos < 1) {
 8000e96:	697b      	ldr	r3, [r7, #20]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	dc01      	bgt.n	8000ea0 <takeWifiSSID+0x150>
        		realCharPos = 80;
 8000e9c:	2350      	movs	r3, #80	; 0x50
 8000e9e:	617b      	str	r3, [r7, #20]
        	}
            if(cursorPosition == 1) {
 8000ea0:	4b50      	ldr	r3, [pc, #320]	; (8000fe4 <takeWifiSSID+0x294>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b01      	cmp	r3, #1
 8000ea6:	d14a      	bne.n	8000f3e <takeWifiSSID+0x1ee>
            	if(page == 1) {
 8000ea8:	4b4f      	ldr	r3, [pc, #316]	; (8000fe8 <takeWifiSSID+0x298>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d10a      	bne.n	8000ec6 <takeWifiSSID+0x176>
            		cursorPosition = 16;
 8000eb0:	4b4c      	ldr	r3, [pc, #304]	; (8000fe4 <takeWifiSSID+0x294>)
 8000eb2:	2210      	movs	r2, #16
 8000eb4:	601a      	str	r2, [r3, #0]
            		page = 5;
 8000eb6:	4b4c      	ldr	r3, [pc, #304]	; (8000fe8 <takeWifiSSID+0x298>)
 8000eb8:	2205      	movs	r2, #5
 8000eba:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 5);
 8000ebc:	2105      	movs	r1, #5
 8000ebe:	2002      	movs	r0, #2
 8000ec0:	f7ff fc76 	bl	80007b0 <printTemplate>
 8000ec4:	e040      	b.n	8000f48 <takeWifiSSID+0x1f8>
            	} else if(page == 2) {
 8000ec6:	4b48      	ldr	r3, [pc, #288]	; (8000fe8 <takeWifiSSID+0x298>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	2b02      	cmp	r3, #2
 8000ecc:	d10a      	bne.n	8000ee4 <takeWifiSSID+0x194>
            		cursorPosition = 16;
 8000ece:	4b45      	ldr	r3, [pc, #276]	; (8000fe4 <takeWifiSSID+0x294>)
 8000ed0:	2210      	movs	r2, #16
 8000ed2:	601a      	str	r2, [r3, #0]
            		page = 1;
 8000ed4:	4b44      	ldr	r3, [pc, #272]	; (8000fe8 <takeWifiSSID+0x298>)
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 8000eda:	2101      	movs	r1, #1
 8000edc:	2002      	movs	r0, #2
 8000ede:	f7ff fc67 	bl	80007b0 <printTemplate>
 8000ee2:	e031      	b.n	8000f48 <takeWifiSSID+0x1f8>
            	} else if(page == 3) {
 8000ee4:	4b40      	ldr	r3, [pc, #256]	; (8000fe8 <takeWifiSSID+0x298>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2b03      	cmp	r3, #3
 8000eea:	d10a      	bne.n	8000f02 <takeWifiSSID+0x1b2>
            		cursorPosition = 16;
 8000eec:	4b3d      	ldr	r3, [pc, #244]	; (8000fe4 <takeWifiSSID+0x294>)
 8000eee:	2210      	movs	r2, #16
 8000ef0:	601a      	str	r2, [r3, #0]
            		page = 2;
 8000ef2:	4b3d      	ldr	r3, [pc, #244]	; (8000fe8 <takeWifiSSID+0x298>)
 8000ef4:	2202      	movs	r2, #2
 8000ef6:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 2);
 8000ef8:	2102      	movs	r1, #2
 8000efa:	2002      	movs	r0, #2
 8000efc:	f7ff fc58 	bl	80007b0 <printTemplate>
 8000f00:	e022      	b.n	8000f48 <takeWifiSSID+0x1f8>
            	} else if(page == 4) {
 8000f02:	4b39      	ldr	r3, [pc, #228]	; (8000fe8 <takeWifiSSID+0x298>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	2b04      	cmp	r3, #4
 8000f08:	d10a      	bne.n	8000f20 <takeWifiSSID+0x1d0>
            		cursorPosition = 16;
 8000f0a:	4b36      	ldr	r3, [pc, #216]	; (8000fe4 <takeWifiSSID+0x294>)
 8000f0c:	2210      	movs	r2, #16
 8000f0e:	601a      	str	r2, [r3, #0]
            		page = 3;
 8000f10:	4b35      	ldr	r3, [pc, #212]	; (8000fe8 <takeWifiSSID+0x298>)
 8000f12:	2203      	movs	r2, #3
 8000f14:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 3);
 8000f16:	2103      	movs	r1, #3
 8000f18:	2002      	movs	r0, #2
 8000f1a:	f7ff fc49 	bl	80007b0 <printTemplate>
 8000f1e:	e013      	b.n	8000f48 <takeWifiSSID+0x1f8>
            	} else if(page == 5) {
 8000f20:	4b31      	ldr	r3, [pc, #196]	; (8000fe8 <takeWifiSSID+0x298>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	2b05      	cmp	r3, #5
 8000f26:	d10f      	bne.n	8000f48 <takeWifiSSID+0x1f8>
            		cursorPosition = 16;
 8000f28:	4b2e      	ldr	r3, [pc, #184]	; (8000fe4 <takeWifiSSID+0x294>)
 8000f2a:	2210      	movs	r2, #16
 8000f2c:	601a      	str	r2, [r3, #0]
            		page = 4;
 8000f2e:	4b2e      	ldr	r3, [pc, #184]	; (8000fe8 <takeWifiSSID+0x298>)
 8000f30:	2204      	movs	r2, #4
 8000f32:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 4);
 8000f34:	2104      	movs	r1, #4
 8000f36:	2002      	movs	r0, #2
 8000f38:	f7ff fc3a 	bl	80007b0 <printTemplate>
 8000f3c:	e004      	b.n	8000f48 <takeWifiSSID+0x1f8>
            	}
            } else {
            	cursorPosition--;
 8000f3e:	4b29      	ldr	r3, [pc, #164]	; (8000fe4 <takeWifiSSID+0x294>)
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	3b01      	subs	r3, #1
 8000f44:	4a27      	ldr	r2, [pc, #156]	; (8000fe4 <takeWifiSSID+0x294>)
 8000f46:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8000f48:	20fa      	movs	r0, #250	; 0xfa
 8000f4a:	f008 f8bd 	bl	80090c8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8000f4e:	2102      	movs	r1, #2
 8000f50:	4826      	ldr	r0, [pc, #152]	; (8000fec <takeWifiSSID+0x29c>)
 8000f52:	f008 fe89 	bl	8009c68 <HAL_GPIO_ReadPin>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d11e      	bne.n	8000f9a <takeWifiSSID+0x24a>
            wifiSSID[wifiNameLoc] = getCharFromCursorPosition(realCharPos - 1);
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	3b01      	subs	r3, #1
 8000f60:	4618      	mov	r0, r3
 8000f62:	f7ff fd9b 	bl	8000a9c <getCharFromCursorPosition>
 8000f66:	4603      	mov	r3, r0
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4a1d      	ldr	r2, [pc, #116]	; (8000fe0 <takeWifiSSID+0x290>)
 8000f6c:	693b      	ldr	r3, [r7, #16]
 8000f6e:	4413      	add	r3, r2
 8000f70:	460a      	mov	r2, r1
 8000f72:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiSSID[wifiNameLoc]);
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	b2d9      	uxtb	r1, r3
 8000f78:	4a19      	ldr	r2, [pc, #100]	; (8000fe0 <takeWifiSSID+0x290>)
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	461a      	mov	r2, r3
 8000f82:	2001      	movs	r0, #1
 8000f84:	f7ff fb85 	bl	8000692 <lcd_print_char>

            writeLoc++;
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	3301      	adds	r3, #1
 8000f8c:	60fb      	str	r3, [r7, #12]
            wifiNameLoc++;
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	3301      	adds	r3, #1
 8000f92:	613b      	str	r3, [r7, #16]

            HAL_Delay(250);
 8000f94:	20fa      	movs	r0, #250	; 0xfa
 8000f96:	f008 f897 	bl	80090c8 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8000f9a:	2104      	movs	r1, #4
 8000f9c:	4813      	ldr	r0, [pc, #76]	; (8000fec <takeWifiSSID+0x29c>)
 8000f9e:	f008 fe63 	bl	8009c68 <HAL_GPIO_ReadPin>
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d139      	bne.n	800101c <takeWifiSSID+0x2cc>
        	if(strlen(wifiSSID) >= 1) {
 8000fa8:	4b0d      	ldr	r3, [pc, #52]	; (8000fe0 <takeWifiSSID+0x290>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d032      	beq.n	8001016 <takeWifiSSID+0x2c6>
        		wifiSSID[wifiNameLoc] = '\0';
 8000fb0:	4a0b      	ldr	r2, [pc, #44]	; (8000fe0 <takeWifiSSID+0x290>)
 8000fb2:	693b      	ldr	r3, [r7, #16]
 8000fb4:	4413      	add	r3, r2
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	701a      	strb	r2, [r3, #0]

        		lcd_delete_char(1, 6+wifiNameLoc);
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	3306      	adds	r3, #6
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	4619      	mov	r1, r3
 8000fc4:	2001      	movs	r0, #1
 8000fc6:	f7ff fb85 	bl	80006d4 <lcd_delete_char>
        		HAL_Delay(50);
 8000fca:	2032      	movs	r0, #50	; 0x32
 8000fcc:	f008 f87c 	bl	80090c8 <HAL_Delay>
        		if(writeLoc > 7) {
 8000fd0:	68fb      	ldr	r3, [r7, #12]
 8000fd2:	2b07      	cmp	r3, #7
 8000fd4:	dd0e      	ble.n	8000ff4 <takeWifiSSID+0x2a4>
        			writeLoc--;
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	60fb      	str	r3, [r7, #12]
 8000fdc:	e00f      	b.n	8000ffe <takeWifiSSID+0x2ae>
 8000fde:	bf00      	nop
 8000fe0:	20000c00 	.word	0x20000c00
 8000fe4:	20000944 	.word	0x20000944
 8000fe8:	20000948 	.word	0x20000948
 8000fec:	40010800 	.word	0x40010800
 8000ff0:	40011000 	.word	0x40011000
        		} else if(writeLoc < 7) {
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	2b06      	cmp	r3, #6
 8000ff8:	dc01      	bgt.n	8000ffe <takeWifiSSID+0x2ae>
        			writeLoc = 7;
 8000ffa:	2307      	movs	r3, #7
 8000ffc:	60fb      	str	r3, [r7, #12]
        		}

        		if(wifiNameLoc > 0) {
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	2b00      	cmp	r3, #0
 8001002:	dd03      	ble.n	800100c <takeWifiSSID+0x2bc>
        			wifiNameLoc--;
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	3b01      	subs	r3, #1
 8001008:	613b      	str	r3, [r7, #16]
 800100a:	e004      	b.n	8001016 <takeWifiSSID+0x2c6>
        		} else if(wifiNameLoc < 0) {
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	2b00      	cmp	r3, #0
 8001010:	da01      	bge.n	8001016 <takeWifiSSID+0x2c6>
        			wifiNameLoc = 0;
 8001012:	2300      	movs	r3, #0
 8001014:	613b      	str	r3, [r7, #16]
        		}
        	}

        	HAL_Delay(250);
 8001016:	20fa      	movs	r0, #250	; 0xfa
 8001018:	f008 f856 	bl	80090c8 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 800101c:	4b05      	ldr	r3, [pc, #20]	; (8001034 <takeWifiSSID+0x2e4>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	b2db      	uxtb	r3, r3
 8001022:	4619      	mov	r1, r3
 8001024:	2002      	movs	r0, #2
 8001026:	f7ff fb00 	bl	800062a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800102a:	e6b1      	b.n	8000d90 <takeWifiSSID+0x40>
    }
}
 800102c:	bf00      	nop
 800102e:	3718      	adds	r7, #24
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	20000944 	.word	0x20000944

08001038 <takeWifiPass>:

void takeWifiPass(int state, I2C_HandleTypeDef *hi2c1) {
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
    lcd_cursor(1);
 8001042:	2001      	movs	r0, #1
 8001044:	f7ff fb6e 	bl	8000724 <lcd_cursor>

    if(state == 0) {
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d104      	bne.n	8001058 <takeWifiPass+0x20>
    	memset(wifiPass, 0, sizeof(wifiPass));
 800104e:	2221      	movs	r2, #33	; 0x21
 8001050:	2100      	movs	r1, #0
 8001052:	489d      	ldr	r0, [pc, #628]	; (80012c8 <takeWifiPass+0x290>)
 8001054:	f00b ff4c 	bl	800cef0 <memset>
    }

    int realCharPos = 1;
 8001058:	2301      	movs	r3, #1
 800105a:	617b      	str	r3, [r7, #20]
    cursorPosition = 1;
 800105c:	4b9b      	ldr	r3, [pc, #620]	; (80012cc <takeWifiPass+0x294>)
 800105e:	2201      	movs	r2, #1
 8001060:	601a      	str	r2, [r3, #0]
    page = 1;
 8001062:	4b9b      	ldr	r3, [pc, #620]	; (80012d0 <takeWifiPass+0x298>)
 8001064:	2201      	movs	r2, #1
 8001066:	601a      	str	r2, [r3, #0]
    int wifiPassLoc = 0;
 8001068:	2300      	movs	r3, #0
 800106a:	613b      	str	r3, [r7, #16]
    int writeLoc = 7;
 800106c:	2307      	movs	r3, #7
 800106e:	60fb      	str	r3, [r7, #12]

    printTemplate(3, 1);
 8001070:	2101      	movs	r1, #1
 8001072:	2003      	movs	r0, #3
 8001074:	f7ff fb9c 	bl	80007b0 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8001078:	2108      	movs	r1, #8
 800107a:	4896      	ldr	r0, [pc, #600]	; (80012d4 <takeWifiPass+0x29c>)
 800107c:	f008 fdf4 	bl	8009c68 <HAL_GPIO_ReadPin>
 8001080:	4603      	mov	r3, r0
 8001082:	2b01      	cmp	r3, #1
 8001084:	d103      	bne.n	800108e <takeWifiPass+0x56>
            lcd_cursor(0);
 8001086:	2000      	movs	r0, #0
 8001088:	f7ff fb4c 	bl	8000724 <lcd_cursor>

            break;
 800108c:	e142      	b.n	8001314 <takeWifiPass+0x2dc>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 800108e:	2101      	movs	r1, #1
 8001090:	4890      	ldr	r0, [pc, #576]	; (80012d4 <takeWifiPass+0x29c>)
 8001092:	f008 fde9 	bl	8009c68 <HAL_GPIO_ReadPin>
 8001096:	4603      	mov	r3, r0
 8001098:	2b01      	cmp	r3, #1
 800109a:	d166      	bne.n	800116a <takeWifiPass+0x132>
        	realCharPos++;
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	3301      	adds	r3, #1
 80010a0:	617b      	str	r3, [r7, #20]
        	if(realCharPos > 80) {
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	2b50      	cmp	r3, #80	; 0x50
 80010a6:	dd01      	ble.n	80010ac <takeWifiPass+0x74>
        	    realCharPos = 1;
 80010a8:	2301      	movs	r3, #1
 80010aa:	617b      	str	r3, [r7, #20]
        	}
            if (cursorPosition == 16) {
 80010ac:	4b87      	ldr	r3, [pc, #540]	; (80012cc <takeWifiPass+0x294>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	2b10      	cmp	r3, #16
 80010b2:	d152      	bne.n	800115a <takeWifiPass+0x122>
            	if(page == 1) {
 80010b4:	4b86      	ldr	r3, [pc, #536]	; (80012d0 <takeWifiPass+0x298>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2b01      	cmp	r3, #1
 80010ba:	d10c      	bne.n	80010d6 <takeWifiPass+0x9e>
            		cursorPosition = 1;
 80010bc:	4b83      	ldr	r3, [pc, #524]	; (80012cc <takeWifiPass+0x294>)
 80010be:	2201      	movs	r2, #1
 80010c0:	601a      	str	r2, [r3, #0]
            		page++;
 80010c2:	4b83      	ldr	r3, [pc, #524]	; (80012d0 <takeWifiPass+0x298>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	3301      	adds	r3, #1
 80010c8:	4a81      	ldr	r2, [pc, #516]	; (80012d0 <takeWifiPass+0x298>)
 80010ca:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 2);
 80010cc:	2102      	movs	r1, #2
 80010ce:	2003      	movs	r0, #3
 80010d0:	f7ff fb6e 	bl	80007b0 <printTemplate>
 80010d4:	e046      	b.n	8001164 <takeWifiPass+0x12c>
            	} else if(page == 2) {
 80010d6:	4b7e      	ldr	r3, [pc, #504]	; (80012d0 <takeWifiPass+0x298>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d10c      	bne.n	80010f8 <takeWifiPass+0xc0>
            		cursorPosition = 1;
 80010de:	4b7b      	ldr	r3, [pc, #492]	; (80012cc <takeWifiPass+0x294>)
 80010e0:	2201      	movs	r2, #1
 80010e2:	601a      	str	r2, [r3, #0]
            		page++;
 80010e4:	4b7a      	ldr	r3, [pc, #488]	; (80012d0 <takeWifiPass+0x298>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	3301      	adds	r3, #1
 80010ea:	4a79      	ldr	r2, [pc, #484]	; (80012d0 <takeWifiPass+0x298>)
 80010ec:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 3);
 80010ee:	2103      	movs	r1, #3
 80010f0:	2003      	movs	r0, #3
 80010f2:	f7ff fb5d 	bl	80007b0 <printTemplate>
 80010f6:	e035      	b.n	8001164 <takeWifiPass+0x12c>
            	} else if(page == 3) {
 80010f8:	4b75      	ldr	r3, [pc, #468]	; (80012d0 <takeWifiPass+0x298>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b03      	cmp	r3, #3
 80010fe:	d10c      	bne.n	800111a <takeWifiPass+0xe2>
            		cursorPosition = 1;
 8001100:	4b72      	ldr	r3, [pc, #456]	; (80012cc <takeWifiPass+0x294>)
 8001102:	2201      	movs	r2, #1
 8001104:	601a      	str	r2, [r3, #0]
            		page++;
 8001106:	4b72      	ldr	r3, [pc, #456]	; (80012d0 <takeWifiPass+0x298>)
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	3301      	adds	r3, #1
 800110c:	4a70      	ldr	r2, [pc, #448]	; (80012d0 <takeWifiPass+0x298>)
 800110e:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 4);
 8001110:	2104      	movs	r1, #4
 8001112:	2003      	movs	r0, #3
 8001114:	f7ff fb4c 	bl	80007b0 <printTemplate>
 8001118:	e024      	b.n	8001164 <takeWifiPass+0x12c>
            	} else if(page == 4) {
 800111a:	4b6d      	ldr	r3, [pc, #436]	; (80012d0 <takeWifiPass+0x298>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2b04      	cmp	r3, #4
 8001120:	d10c      	bne.n	800113c <takeWifiPass+0x104>
            		cursorPosition = 1;
 8001122:	4b6a      	ldr	r3, [pc, #424]	; (80012cc <takeWifiPass+0x294>)
 8001124:	2201      	movs	r2, #1
 8001126:	601a      	str	r2, [r3, #0]
            		page++;
 8001128:	4b69      	ldr	r3, [pc, #420]	; (80012d0 <takeWifiPass+0x298>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	3301      	adds	r3, #1
 800112e:	4a68      	ldr	r2, [pc, #416]	; (80012d0 <takeWifiPass+0x298>)
 8001130:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 5);
 8001132:	2105      	movs	r1, #5
 8001134:	2003      	movs	r0, #3
 8001136:	f7ff fb3b 	bl	80007b0 <printTemplate>
 800113a:	e013      	b.n	8001164 <takeWifiPass+0x12c>
            	} else if(page == 5) {
 800113c:	4b64      	ldr	r3, [pc, #400]	; (80012d0 <takeWifiPass+0x298>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	2b05      	cmp	r3, #5
 8001142:	d10f      	bne.n	8001164 <takeWifiPass+0x12c>
            		cursorPosition = 1;
 8001144:	4b61      	ldr	r3, [pc, #388]	; (80012cc <takeWifiPass+0x294>)
 8001146:	2201      	movs	r2, #1
 8001148:	601a      	str	r2, [r3, #0]
            		page = 1;
 800114a:	4b61      	ldr	r3, [pc, #388]	; (80012d0 <takeWifiPass+0x298>)
 800114c:	2201      	movs	r2, #1
 800114e:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 8001150:	2101      	movs	r1, #1
 8001152:	2003      	movs	r0, #3
 8001154:	f7ff fb2c 	bl	80007b0 <printTemplate>
 8001158:	e004      	b.n	8001164 <takeWifiPass+0x12c>
            	}
            } else {
            	cursorPosition++;
 800115a:	4b5c      	ldr	r3, [pc, #368]	; (80012cc <takeWifiPass+0x294>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	3301      	adds	r3, #1
 8001160:	4a5a      	ldr	r2, [pc, #360]	; (80012cc <takeWifiPass+0x294>)
 8001162:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8001164:	20fa      	movs	r0, #250	; 0xfa
 8001166:	f007 ffaf 	bl	80090c8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 800116a:	2108      	movs	r1, #8
 800116c:	485a      	ldr	r0, [pc, #360]	; (80012d8 <takeWifiPass+0x2a0>)
 800116e:	f008 fd7b 	bl	8009c68 <HAL_GPIO_ReadPin>
 8001172:	4603      	mov	r3, r0
 8001174:	2b01      	cmp	r3, #1
 8001176:	d15e      	bne.n	8001236 <takeWifiPass+0x1fe>
        	realCharPos--;
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	3b01      	subs	r3, #1
 800117c:	617b      	str	r3, [r7, #20]
        	if(realCharPos < 1) {
 800117e:	697b      	ldr	r3, [r7, #20]
 8001180:	2b00      	cmp	r3, #0
 8001182:	dc01      	bgt.n	8001188 <takeWifiPass+0x150>
        	    realCharPos = 80;
 8001184:	2350      	movs	r3, #80	; 0x50
 8001186:	617b      	str	r3, [r7, #20]
        	}
            if(cursorPosition == 1) {
 8001188:	4b50      	ldr	r3, [pc, #320]	; (80012cc <takeWifiPass+0x294>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2b01      	cmp	r3, #1
 800118e:	d14a      	bne.n	8001226 <takeWifiPass+0x1ee>
            	if(page == 1) {
 8001190:	4b4f      	ldr	r3, [pc, #316]	; (80012d0 <takeWifiPass+0x298>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b01      	cmp	r3, #1
 8001196:	d10a      	bne.n	80011ae <takeWifiPass+0x176>
            		cursorPosition = 16;
 8001198:	4b4c      	ldr	r3, [pc, #304]	; (80012cc <takeWifiPass+0x294>)
 800119a:	2210      	movs	r2, #16
 800119c:	601a      	str	r2, [r3, #0]
            		page = 5;
 800119e:	4b4c      	ldr	r3, [pc, #304]	; (80012d0 <takeWifiPass+0x298>)
 80011a0:	2205      	movs	r2, #5
 80011a2:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 5);
 80011a4:	2105      	movs	r1, #5
 80011a6:	2003      	movs	r0, #3
 80011a8:	f7ff fb02 	bl	80007b0 <printTemplate>
 80011ac:	e040      	b.n	8001230 <takeWifiPass+0x1f8>
            	} else if(page == 2) {
 80011ae:	4b48      	ldr	r3, [pc, #288]	; (80012d0 <takeWifiPass+0x298>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2b02      	cmp	r3, #2
 80011b4:	d10a      	bne.n	80011cc <takeWifiPass+0x194>
            		cursorPosition = 16;
 80011b6:	4b45      	ldr	r3, [pc, #276]	; (80012cc <takeWifiPass+0x294>)
 80011b8:	2210      	movs	r2, #16
 80011ba:	601a      	str	r2, [r3, #0]
            		page = 1;
 80011bc:	4b44      	ldr	r3, [pc, #272]	; (80012d0 <takeWifiPass+0x298>)
 80011be:	2201      	movs	r2, #1
 80011c0:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 80011c2:	2101      	movs	r1, #1
 80011c4:	2003      	movs	r0, #3
 80011c6:	f7ff faf3 	bl	80007b0 <printTemplate>
 80011ca:	e031      	b.n	8001230 <takeWifiPass+0x1f8>
            	} else if(page == 3) {
 80011cc:	4b40      	ldr	r3, [pc, #256]	; (80012d0 <takeWifiPass+0x298>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2b03      	cmp	r3, #3
 80011d2:	d10a      	bne.n	80011ea <takeWifiPass+0x1b2>
            		cursorPosition = 16;
 80011d4:	4b3d      	ldr	r3, [pc, #244]	; (80012cc <takeWifiPass+0x294>)
 80011d6:	2210      	movs	r2, #16
 80011d8:	601a      	str	r2, [r3, #0]
            		page = 2;
 80011da:	4b3d      	ldr	r3, [pc, #244]	; (80012d0 <takeWifiPass+0x298>)
 80011dc:	2202      	movs	r2, #2
 80011de:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 2);
 80011e0:	2102      	movs	r1, #2
 80011e2:	2003      	movs	r0, #3
 80011e4:	f7ff fae4 	bl	80007b0 <printTemplate>
 80011e8:	e022      	b.n	8001230 <takeWifiPass+0x1f8>
            	} else if(page == 4) {
 80011ea:	4b39      	ldr	r3, [pc, #228]	; (80012d0 <takeWifiPass+0x298>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2b04      	cmp	r3, #4
 80011f0:	d10a      	bne.n	8001208 <takeWifiPass+0x1d0>
            		cursorPosition = 16;
 80011f2:	4b36      	ldr	r3, [pc, #216]	; (80012cc <takeWifiPass+0x294>)
 80011f4:	2210      	movs	r2, #16
 80011f6:	601a      	str	r2, [r3, #0]
            		page = 3;
 80011f8:	4b35      	ldr	r3, [pc, #212]	; (80012d0 <takeWifiPass+0x298>)
 80011fa:	2203      	movs	r2, #3
 80011fc:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 3);
 80011fe:	2103      	movs	r1, #3
 8001200:	2003      	movs	r0, #3
 8001202:	f7ff fad5 	bl	80007b0 <printTemplate>
 8001206:	e013      	b.n	8001230 <takeWifiPass+0x1f8>
            	} else if(page == 5) {
 8001208:	4b31      	ldr	r3, [pc, #196]	; (80012d0 <takeWifiPass+0x298>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2b05      	cmp	r3, #5
 800120e:	d10f      	bne.n	8001230 <takeWifiPass+0x1f8>
            		cursorPosition = 16;
 8001210:	4b2e      	ldr	r3, [pc, #184]	; (80012cc <takeWifiPass+0x294>)
 8001212:	2210      	movs	r2, #16
 8001214:	601a      	str	r2, [r3, #0]
            		page = 4;
 8001216:	4b2e      	ldr	r3, [pc, #184]	; (80012d0 <takeWifiPass+0x298>)
 8001218:	2204      	movs	r2, #4
 800121a:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 4);
 800121c:	2104      	movs	r1, #4
 800121e:	2003      	movs	r0, #3
 8001220:	f7ff fac6 	bl	80007b0 <printTemplate>
 8001224:	e004      	b.n	8001230 <takeWifiPass+0x1f8>
            	}
            } else {
            	cursorPosition--;
 8001226:	4b29      	ldr	r3, [pc, #164]	; (80012cc <takeWifiPass+0x294>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	3b01      	subs	r3, #1
 800122c:	4a27      	ldr	r2, [pc, #156]	; (80012cc <takeWifiPass+0x294>)
 800122e:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8001230:	20fa      	movs	r0, #250	; 0xfa
 8001232:	f007 ff49 	bl	80090c8 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8001236:	2102      	movs	r1, #2
 8001238:	4826      	ldr	r0, [pc, #152]	; (80012d4 <takeWifiPass+0x29c>)
 800123a:	f008 fd15 	bl	8009c68 <HAL_GPIO_ReadPin>
 800123e:	4603      	mov	r3, r0
 8001240:	2b01      	cmp	r3, #1
 8001242:	d11e      	bne.n	8001282 <takeWifiPass+0x24a>
        	wifiPass[wifiPassLoc] = getCharFromCursorPosition(realCharPos - 1);
 8001244:	697b      	ldr	r3, [r7, #20]
 8001246:	3b01      	subs	r3, #1
 8001248:	4618      	mov	r0, r3
 800124a:	f7ff fc27 	bl	8000a9c <getCharFromCursorPosition>
 800124e:	4603      	mov	r3, r0
 8001250:	4619      	mov	r1, r3
 8001252:	4a1d      	ldr	r2, [pc, #116]	; (80012c8 <takeWifiPass+0x290>)
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	4413      	add	r3, r2
 8001258:	460a      	mov	r2, r1
 800125a:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiPass[wifiPassLoc]);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	b2d9      	uxtb	r1, r3
 8001260:	4a19      	ldr	r2, [pc, #100]	; (80012c8 <takeWifiPass+0x290>)
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	4413      	add	r3, r2
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	461a      	mov	r2, r3
 800126a:	2001      	movs	r0, #1
 800126c:	f7ff fa11 	bl	8000692 <lcd_print_char>

            writeLoc++;
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	3301      	adds	r3, #1
 8001274:	60fb      	str	r3, [r7, #12]
            wifiPassLoc++;
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	3301      	adds	r3, #1
 800127a:	613b      	str	r3, [r7, #16]

            HAL_Delay(250);
 800127c:	20fa      	movs	r0, #250	; 0xfa
 800127e:	f007 ff23 	bl	80090c8 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8001282:	2104      	movs	r1, #4
 8001284:	4813      	ldr	r0, [pc, #76]	; (80012d4 <takeWifiPass+0x29c>)
 8001286:	f008 fcef 	bl	8009c68 <HAL_GPIO_ReadPin>
 800128a:	4603      	mov	r3, r0
 800128c:	2b01      	cmp	r3, #1
 800128e:	d139      	bne.n	8001304 <takeWifiPass+0x2cc>
            if(strlen(wifiPass) >= 1) {
 8001290:	4b0d      	ldr	r3, [pc, #52]	; (80012c8 <takeWifiPass+0x290>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d032      	beq.n	80012fe <takeWifiPass+0x2c6>
            	wifiPass[wifiPassLoc] = '\0';
 8001298:	4a0b      	ldr	r2, [pc, #44]	; (80012c8 <takeWifiPass+0x290>)
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	4413      	add	r3, r2
 800129e:	2200      	movs	r2, #0
 80012a0:	701a      	strb	r2, [r3, #0]

            	lcd_delete_char(1, 6+wifiPassLoc);
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	3306      	adds	r3, #6
 80012a8:	b2db      	uxtb	r3, r3
 80012aa:	4619      	mov	r1, r3
 80012ac:	2001      	movs	r0, #1
 80012ae:	f7ff fa11 	bl	80006d4 <lcd_delete_char>
            	HAL_Delay(50);
 80012b2:	2032      	movs	r0, #50	; 0x32
 80012b4:	f007 ff08 	bl	80090c8 <HAL_Delay>

            	if(writeLoc > 7) {
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	2b07      	cmp	r3, #7
 80012bc:	dd0e      	ble.n	80012dc <takeWifiPass+0x2a4>
            		writeLoc--;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	3b01      	subs	r3, #1
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	e00f      	b.n	80012e6 <takeWifiPass+0x2ae>
 80012c6:	bf00      	nop
 80012c8:	20000c24 	.word	0x20000c24
 80012cc:	20000944 	.word	0x20000944
 80012d0:	20000948 	.word	0x20000948
 80012d4:	40010800 	.word	0x40010800
 80012d8:	40011000 	.word	0x40011000
            	} else if(writeLoc < 7) {
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	2b06      	cmp	r3, #6
 80012e0:	dc01      	bgt.n	80012e6 <takeWifiPass+0x2ae>
            		writeLoc = 7;
 80012e2:	2307      	movs	r3, #7
 80012e4:	60fb      	str	r3, [r7, #12]
            	}

            	if(wifiPassLoc > 0) {
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	dd03      	ble.n	80012f4 <takeWifiPass+0x2bc>
            		wifiPassLoc--;
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	3b01      	subs	r3, #1
 80012f0:	613b      	str	r3, [r7, #16]
 80012f2:	e004      	b.n	80012fe <takeWifiPass+0x2c6>
            	} else if(wifiPassLoc < 0) {
 80012f4:	693b      	ldr	r3, [r7, #16]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	da01      	bge.n	80012fe <takeWifiPass+0x2c6>
            		wifiPassLoc = 0;
 80012fa:	2300      	movs	r3, #0
 80012fc:	613b      	str	r3, [r7, #16]
            	}
            }

            HAL_Delay(250);
 80012fe:	20fa      	movs	r0, #250	; 0xfa
 8001300:	f007 fee2 	bl	80090c8 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8001304:	4b05      	ldr	r3, [pc, #20]	; (800131c <takeWifiPass+0x2e4>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	b2db      	uxtb	r3, r3
 800130a:	4619      	mov	r1, r3
 800130c:	2002      	movs	r0, #2
 800130e:	f7ff f98c 	bl	800062a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8001312:	e6b1      	b.n	8001078 <takeWifiPass+0x40>
    }
}
 8001314:	bf00      	nop
 8001316:	3718      	adds	r7, #24
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20000944 	.word	0x20000944

08001320 <checkSlideVal>:

int checkSlideVal(int state) {
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
	if(state == 0) { //ssid (33)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d111      	bne.n	8001352 <checkSlideVal+0x32>
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 800132e:	2101      	movs	r1, #1
 8001330:	4813      	ldr	r0, [pc, #76]	; (8001380 <checkSlideVal+0x60>)
 8001332:	f008 fc99 	bl	8009c68 <HAL_GPIO_ReadPin>
 8001336:	4603      	mov	r3, r0
 8001338:	2b01      	cmp	r3, #1
 800133a:	d101      	bne.n	8001340 <checkSlideVal+0x20>
			return 34;
 800133c:	2322      	movs	r3, #34	; 0x22
 800133e:	e01b      	b.n	8001378 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001340:	2108      	movs	r1, #8
 8001342:	4810      	ldr	r0, [pc, #64]	; (8001384 <checkSlideVal+0x64>)
 8001344:	f008 fc90 	bl	8009c68 <HAL_GPIO_ReadPin>
 8001348:	4603      	mov	r3, r0
 800134a:	2b01      	cmp	r3, #1
 800134c:	d113      	bne.n	8001376 <checkSlideVal+0x56>
			return 32;
 800134e:	2320      	movs	r3, #32
 8001350:	e012      	b.n	8001378 <checkSlideVal+0x58>
		}
	} else { //pass (34)
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8001352:	2101      	movs	r1, #1
 8001354:	480a      	ldr	r0, [pc, #40]	; (8001380 <checkSlideVal+0x60>)
 8001356:	f008 fc87 	bl	8009c68 <HAL_GPIO_ReadPin>
 800135a:	4603      	mov	r3, r0
 800135c:	2b01      	cmp	r3, #1
 800135e:	d101      	bne.n	8001364 <checkSlideVal+0x44>
			return 35;
 8001360:	2323      	movs	r3, #35	; 0x23
 8001362:	e009      	b.n	8001378 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001364:	2108      	movs	r1, #8
 8001366:	4807      	ldr	r0, [pc, #28]	; (8001384 <checkSlideVal+0x64>)
 8001368:	f008 fc7e 	bl	8009c68 <HAL_GPIO_ReadPin>
 800136c:	4603      	mov	r3, r0
 800136e:	2b01      	cmp	r3, #1
 8001370:	d101      	bne.n	8001376 <checkSlideVal+0x56>
			return 33;
 8001372:	2321      	movs	r3, #33	; 0x21
 8001374:	e000      	b.n	8001378 <checkSlideVal+0x58>
		}
	}
	return 0;
 8001376:	2300      	movs	r3, #0
}
 8001378:	4618      	mov	r0, r3
 800137a:	3708      	adds	r7, #8
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	40010800 	.word	0x40010800
 8001384:	40011000 	.word	0x40011000

08001388 <slideText>:

void slideText(const char* text, int startPos, int startLine, int state) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b08a      	sub	sp, #40	; 0x28
 800138c:	af00      	add	r7, sp, #0
 800138e:	60f8      	str	r0, [r7, #12]
 8001390:	60b9      	str	r1, [r7, #8]
 8001392:	607a      	str	r2, [r7, #4]
 8001394:	603b      	str	r3, [r7, #0]
	uint8_t uzunluk = strlen(text);
 8001396:	68f8      	ldr	r0, [r7, #12]
 8001398:	f7fe ff44 	bl	8000224 <strlen>
 800139c:	4603      	mov	r3, r0
 800139e:	75fb      	strb	r3, [r7, #23]
	int mainLoopVal = 1;
 80013a0:	2301      	movs	r3, #1
 80013a2:	627b      	str	r3, [r7, #36]	; 0x24

	while(mainLoopVal == 1) {
 80013a4:	e08a      	b.n	80014bc <slideText+0x134>
		if(checkSlideVal(state) > 0) {
 80013a6:	6838      	ldr	r0, [r7, #0]
 80013a8:	f7ff ffba 	bl	8001320 <checkSlideVal>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	dd07      	ble.n	80013c2 <slideText+0x3a>
			menuSayac = checkSlideVal(state);
 80013b2:	6838      	ldr	r0, [r7, #0]
 80013b4:	f7ff ffb4 	bl	8001320 <checkSlideVal>
 80013b8:	4603      	mov	r3, r0
 80013ba:	b2da      	uxtb	r2, r3
 80013bc:	4b44      	ldr	r3, [pc, #272]	; (80014d0 <slideText+0x148>)
 80013be:	701a      	strb	r2, [r3, #0]
			break;
 80013c0:	e081      	b.n	80014c6 <slideText+0x13e>
		}

		for(int z=0; z < uzunluk; z++) {
 80013c2:	2300      	movs	r3, #0
 80013c4:	623b      	str	r3, [r7, #32]
 80013c6:	e075      	b.n	80014b4 <slideText+0x12c>
			if(checkSlideVal(state) > 0) {
 80013c8:	6838      	ldr	r0, [r7, #0]
 80013ca:	f7ff ffa9 	bl	8001320 <checkSlideVal>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	dd09      	ble.n	80013e8 <slideText+0x60>
				menuSayac = checkSlideVal(state);
 80013d4:	6838      	ldr	r0, [r7, #0]
 80013d6:	f7ff ffa3 	bl	8001320 <checkSlideVal>
 80013da:	4603      	mov	r3, r0
 80013dc:	b2da      	uxtb	r2, r3
 80013de:	4b3c      	ldr	r3, [pc, #240]	; (80014d0 <slideText+0x148>)
 80013e0:	701a      	strb	r2, [r3, #0]
				mainLoopVal = 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 80013e6:	e069      	b.n	80014bc <slideText+0x134>
			}
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 80013e8:	68ba      	ldr	r2, [r7, #8]
 80013ea:	6a3b      	ldr	r3, [r7, #32]
 80013ec:	4413      	add	r3, r2
 80013ee:	61fb      	str	r3, [r7, #28]
 80013f0:	e029      	b.n	8001446 <slideText+0xbe>
				if(checkSlideVal(state) > 0) {
 80013f2:	6838      	ldr	r0, [r7, #0]
 80013f4:	f7ff ff94 	bl	8001320 <checkSlideVal>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	dd0b      	ble.n	8001416 <slideText+0x8e>
					menuSayac = checkSlideVal(state);
 80013fe:	6838      	ldr	r0, [r7, #0]
 8001400:	f7ff ff8e 	bl	8001320 <checkSlideVal>
 8001404:	4603      	mov	r3, r0
 8001406:	b2da      	uxtb	r2, r3
 8001408:	4b31      	ldr	r3, [pc, #196]	; (80014d0 <slideText+0x148>)
 800140a:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 800140c:	7dfb      	ldrb	r3, [r7, #23]
 800140e:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 8001410:	2300      	movs	r3, #0
 8001412:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8001414:	e01d      	b.n	8001452 <slideText+0xca>
				}
				lcd_print_char(startLine, i-z, text[i-startPos]);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	b2d8      	uxtb	r0, r3
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	b2da      	uxtb	r2, r3
 800141e:	6a3b      	ldr	r3, [r7, #32]
 8001420:	b2db      	uxtb	r3, r3
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	b2d9      	uxtb	r1, r3
 8001426:	69fa      	ldr	r2, [r7, #28]
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	461a      	mov	r2, r3
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	4413      	add	r3, r2
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	461a      	mov	r2, r3
 8001436:	f7ff f92c 	bl	8000692 <lcd_print_char>
				HAL_Delay(30);
 800143a:	201e      	movs	r0, #30
 800143c:	f007 fe44 	bl	80090c8 <HAL_Delay>
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	3301      	adds	r3, #1
 8001444:	61fb      	str	r3, [r7, #28]
 8001446:	7dfa      	ldrb	r2, [r7, #23]
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	4413      	add	r3, r2
 800144c:	69fa      	ldr	r2, [r7, #28]
 800144e:	429a      	cmp	r2, r3
 8001450:	dbcf      	blt.n	80013f2 <slideText+0x6a>
			}

			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 8001452:	7dfb      	ldrb	r3, [r7, #23]
 8001454:	3b01      	subs	r3, #1
 8001456:	61bb      	str	r3, [r7, #24]
 8001458:	e023      	b.n	80014a2 <slideText+0x11a>
				if(checkSlideVal(state) > 0) {
 800145a:	6838      	ldr	r0, [r7, #0]
 800145c:	f7ff ff60 	bl	8001320 <checkSlideVal>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	dd0b      	ble.n	800147e <slideText+0xf6>
					menuSayac = checkSlideVal(state);
 8001466:	6838      	ldr	r0, [r7, #0]
 8001468:	f7ff ff5a 	bl	8001320 <checkSlideVal>
 800146c:	4603      	mov	r3, r0
 800146e:	b2da      	uxtb	r2, r3
 8001470:	4b17      	ldr	r3, [pc, #92]	; (80014d0 <slideText+0x148>)
 8001472:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 8001474:	7dfb      	ldrb	r3, [r7, #23]
 8001476:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 8001478:	2300      	movs	r3, #0
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 800147c:	e017      	b.n	80014ae <slideText+0x126>
				}
			     if(j >= startPos) {
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	429a      	cmp	r2, r3
 8001484:	db0a      	blt.n	800149c <slideText+0x114>
			    	 lcd_print_char(startLine, j, ' ');
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	b2db      	uxtb	r3, r3
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	b2d1      	uxtb	r1, r2
 800148e:	2220      	movs	r2, #32
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff f8fe 	bl	8000692 <lcd_print_char>
			    	 HAL_Delay(30);
 8001496:	201e      	movs	r0, #30
 8001498:	f007 fe16 	bl	80090c8 <HAL_Delay>
			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 800149c:	69bb      	ldr	r3, [r7, #24]
 800149e:	3b01      	subs	r3, #1
 80014a0:	61bb      	str	r3, [r7, #24]
 80014a2:	7dfa      	ldrb	r2, [r7, #23]
 80014a4:	6a3b      	ldr	r3, [r7, #32]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	69ba      	ldr	r2, [r7, #24]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	dad5      	bge.n	800145a <slideText+0xd2>
		for(int z=0; z < uzunluk; z++) {
 80014ae:	6a3b      	ldr	r3, [r7, #32]
 80014b0:	3301      	adds	r3, #1
 80014b2:	623b      	str	r3, [r7, #32]
 80014b4:	7dfb      	ldrb	r3, [r7, #23]
 80014b6:	6a3a      	ldr	r2, [r7, #32]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	db85      	blt.n	80013c8 <slideText+0x40>
	while(mainLoopVal == 1) {
 80014bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014be:	2b01      	cmp	r3, #1
 80014c0:	f43f af71 	beq.w	80013a6 <slideText+0x1e>
			     }
			}
		}
	}
}
 80014c4:	bf00      	nop
 80014c6:	bf00      	nop
 80014c8:	3728      	adds	r7, #40	; 0x28
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000c49 	.word	0x20000c49

080014d4 <menu>:

void menu(I2C_HandleTypeDef *hi2c1) {
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 80014dc:	2101      	movs	r1, #1
 80014de:	488f      	ldr	r0, [pc, #572]	; (800171c <menu+0x248>)
 80014e0:	f008 fbc2 	bl	8009c68 <HAL_GPIO_ReadPin>
 80014e4:	4603      	mov	r3, r0
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	f040 808e 	bne.w	8001608 <menu+0x134>
 80014ec:	4b8c      	ldr	r3, [pc, #560]	; (8001720 <menu+0x24c>)
 80014ee:	781b      	ldrb	r3, [r3, #0]
 80014f0:	f083 0301 	eor.w	r3, r3, #1
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	f000 8086 	beq.w	8001608 <menu+0x134>
		menuSayac = menuSayac+1;
 80014fc:	4b89      	ldr	r3, [pc, #548]	; (8001724 <menu+0x250>)
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	3301      	adds	r3, #1
 8001502:	b2da      	uxtb	r2, r3
 8001504:	4b87      	ldr	r3, [pc, #540]	; (8001724 <menu+0x250>)
 8001506:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 8001508:	4b86      	ldr	r3, [pc, #536]	; (8001724 <menu+0x250>)
 800150a:	781b      	ldrb	r3, [r3, #0]
 800150c:	2b24      	cmp	r3, #36	; 0x24
 800150e:	d102      	bne.n	8001516 <menu+0x42>
			menuSayac = 1;
 8001510:	4b84      	ldr	r3, [pc, #528]	; (8001724 <menu+0x250>)
 8001512:	2201      	movs	r2, #1
 8001514:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 8001516:	4b83      	ldr	r3, [pc, #524]	; (8001724 <menu+0x250>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b12      	cmp	r3, #18
 800151c:	d106      	bne.n	800152c <menu+0x58>
 800151e:	4b82      	ldr	r3, [pc, #520]	; (8001728 <menu+0x254>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d102      	bne.n	800152c <menu+0x58>
			menuSayac = 21;
 8001526:	4b7f      	ldr	r3, [pc, #508]	; (8001724 <menu+0x250>)
 8001528:	2215      	movs	r2, #21
 800152a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 800152c:	4b7d      	ldr	r3, [pc, #500]	; (8001724 <menu+0x250>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b08      	cmp	r3, #8
 8001532:	d106      	bne.n	8001542 <menu+0x6e>
 8001534:	4b7d      	ldr	r3, [pc, #500]	; (800172c <menu+0x258>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d102      	bne.n	8001542 <menu+0x6e>
			menuSayac = 16;
 800153c:	4b79      	ldr	r3, [pc, #484]	; (8001724 <menu+0x250>)
 800153e:	2210      	movs	r2, #16
 8001540:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 8001542:	4b78      	ldr	r3, [pc, #480]	; (8001724 <menu+0x250>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	2b0d      	cmp	r3, #13
 8001548:	d106      	bne.n	8001558 <menu+0x84>
 800154a:	4b78      	ldr	r3, [pc, #480]	; (800172c <menu+0x258>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	2b01      	cmp	r3, #1
 8001550:	d102      	bne.n	8001558 <menu+0x84>
			menuSayac = 16;
 8001552:	4b74      	ldr	r3, [pc, #464]	; (8001724 <menu+0x250>)
 8001554:	2210      	movs	r2, #16
 8001556:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 8001558:	4b72      	ldr	r3, [pc, #456]	; (8001724 <menu+0x250>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b09      	cmp	r3, #9
 800155e:	d106      	bne.n	800156e <menu+0x9a>
 8001560:	4b72      	ldr	r3, [pc, #456]	; (800172c <menu+0x258>)
 8001562:	781b      	ldrb	r3, [r3, #0]
 8001564:	2b02      	cmp	r3, #2
 8001566:	d102      	bne.n	800156e <menu+0x9a>
			menuSayac = 13;
 8001568:	4b6e      	ldr	r3, [pc, #440]	; (8001724 <menu+0x250>)
 800156a:	220d      	movs	r2, #13
 800156c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 800156e:	4b6d      	ldr	r3, [pc, #436]	; (8001724 <menu+0x250>)
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	2b0a      	cmp	r3, #10
 8001574:	d10a      	bne.n	800158c <menu+0xb8>
 8001576:	4b6e      	ldr	r3, [pc, #440]	; (8001730 <menu+0x25c>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d003      	beq.n	8001586 <menu+0xb2>
 800157e:	4b6c      	ldr	r3, [pc, #432]	; (8001730 <menu+0x25c>)
 8001580:	781b      	ldrb	r3, [r3, #0]
 8001582:	2b02      	cmp	r3, #2
 8001584:	d102      	bne.n	800158c <menu+0xb8>
			menuSayac = 11;
 8001586:	4b67      	ldr	r3, [pc, #412]	; (8001724 <menu+0x250>)
 8001588:	220b      	movs	r2, #11
 800158a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 800158c:	4b65      	ldr	r3, [pc, #404]	; (8001724 <menu+0x250>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b0c      	cmp	r3, #12
 8001592:	d10e      	bne.n	80015b2 <menu+0xde>
 8001594:	4b67      	ldr	r3, [pc, #412]	; (8001734 <menu+0x260>)
 8001596:	781b      	ldrb	r3, [r3, #0]
 8001598:	2b01      	cmp	r3, #1
 800159a:	d003      	beq.n	80015a4 <menu+0xd0>
 800159c:	4b65      	ldr	r3, [pc, #404]	; (8001734 <menu+0x260>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d106      	bne.n	80015b2 <menu+0xde>
 80015a4:	4b61      	ldr	r3, [pc, #388]	; (800172c <menu+0x258>)
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b01      	cmp	r3, #1
 80015aa:	d102      	bne.n	80015b2 <menu+0xde>
			menuSayac = 16;
 80015ac:	4b5d      	ldr	r3, [pc, #372]	; (8001724 <menu+0x250>)
 80015ae:	2210      	movs	r2, #16
 80015b0:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 80015b2:	4b5c      	ldr	r3, [pc, #368]	; (8001724 <menu+0x250>)
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	2b0c      	cmp	r3, #12
 80015b8:	d10e      	bne.n	80015d8 <menu+0x104>
 80015ba:	4b5e      	ldr	r3, [pc, #376]	; (8001734 <menu+0x260>)
 80015bc:	781b      	ldrb	r3, [r3, #0]
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d003      	beq.n	80015ca <menu+0xf6>
 80015c2:	4b5c      	ldr	r3, [pc, #368]	; (8001734 <menu+0x260>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d106      	bne.n	80015d8 <menu+0x104>
 80015ca:	4b58      	ldr	r3, [pc, #352]	; (800172c <menu+0x258>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	2b03      	cmp	r3, #3
 80015d0:	d102      	bne.n	80015d8 <menu+0x104>
			menuSayac = 13;
 80015d2:	4b54      	ldr	r3, [pc, #336]	; (8001724 <menu+0x250>)
 80015d4:	220d      	movs	r2, #13
 80015d6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80015d8:	4b52      	ldr	r3, [pc, #328]	; (8001724 <menu+0x250>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	2b0f      	cmp	r3, #15
 80015de:	d106      	bne.n	80015ee <menu+0x11a>
 80015e0:	4b55      	ldr	r3, [pc, #340]	; (8001738 <menu+0x264>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d102      	bne.n	80015ee <menu+0x11a>
			menuSayac = 16;
 80015e8:	4b4e      	ldr	r3, [pc, #312]	; (8001724 <menu+0x250>)
 80015ea:	2210      	movs	r2, #16
 80015ec:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 80015ee:	4b4d      	ldr	r3, [pc, #308]	; (8001724 <menu+0x250>)
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	2b18      	cmp	r3, #24
 80015f4:	d106      	bne.n	8001604 <menu+0x130>
 80015f6:	4b4c      	ldr	r3, [pc, #304]	; (8001728 <menu+0x254>)
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d102      	bne.n	8001604 <menu+0x130>
			menuSayac = 26;
 80015fe:	4b49      	ldr	r3, [pc, #292]	; (8001724 <menu+0x250>)
 8001600:	221a      	movs	r2, #26
 8001602:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001604:	f004 fcf2 	bl	8005fec <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001608:	2108      	movs	r1, #8
 800160a:	484c      	ldr	r0, [pc, #304]	; (800173c <menu+0x268>)
 800160c:	f008 fb2c 	bl	8009c68 <HAL_GPIO_ReadPin>
 8001610:	4603      	mov	r3, r0
 8001612:	2b01      	cmp	r3, #1
 8001614:	d175      	bne.n	8001702 <menu+0x22e>
 8001616:	4b42      	ldr	r3, [pc, #264]	; (8001720 <menu+0x24c>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	f083 0301 	eor.w	r3, r3, #1
 800161e:	b2db      	uxtb	r3, r3
 8001620:	2b00      	cmp	r3, #0
 8001622:	d06e      	beq.n	8001702 <menu+0x22e>
		if (menuSayac <= 1) {
 8001624:	4b3f      	ldr	r3, [pc, #252]	; (8001724 <menu+0x250>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d802      	bhi.n	8001632 <menu+0x15e>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 800162c:	4b3d      	ldr	r3, [pc, #244]	; (8001724 <menu+0x250>)
 800162e:	2224      	movs	r2, #36	; 0x24
 8001630:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 8001632:	4b3c      	ldr	r3, [pc, #240]	; (8001724 <menu+0x250>)
 8001634:	781b      	ldrb	r3, [r3, #0]
 8001636:	3b01      	subs	r3, #1
 8001638:	b2da      	uxtb	r2, r3
 800163a:	4b3a      	ldr	r3, [pc, #232]	; (8001724 <menu+0x250>)
 800163c:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 800163e:	4b39      	ldr	r3, [pc, #228]	; (8001724 <menu+0x250>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	2b14      	cmp	r3, #20
 8001644:	d106      	bne.n	8001654 <menu+0x180>
 8001646:	4b38      	ldr	r3, [pc, #224]	; (8001728 <menu+0x254>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d102      	bne.n	8001654 <menu+0x180>
			menuSayac = 17;
 800164e:	4b35      	ldr	r3, [pc, #212]	; (8001724 <menu+0x250>)
 8001650:	2211      	movs	r2, #17
 8001652:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 8001654:	4b33      	ldr	r3, [pc, #204]	; (8001724 <menu+0x250>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b0f      	cmp	r3, #15
 800165a:	d106      	bne.n	800166a <menu+0x196>
 800165c:	4b33      	ldr	r3, [pc, #204]	; (800172c <menu+0x258>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b00      	cmp	r3, #0
 8001662:	d102      	bne.n	800166a <menu+0x196>
			menuSayac = 7;
 8001664:	4b2f      	ldr	r3, [pc, #188]	; (8001724 <menu+0x250>)
 8001666:	2207      	movs	r2, #7
 8001668:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 800166a:	4b2e      	ldr	r3, [pc, #184]	; (8001724 <menu+0x250>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	2b0f      	cmp	r3, #15
 8001670:	d106      	bne.n	8001680 <menu+0x1ac>
 8001672:	4b2e      	ldr	r3, [pc, #184]	; (800172c <menu+0x258>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d102      	bne.n	8001680 <menu+0x1ac>
			menuSayac = 12;
 800167a:	4b2a      	ldr	r3, [pc, #168]	; (8001724 <menu+0x250>)
 800167c:	220c      	movs	r2, #12
 800167e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8001680:	4b28      	ldr	r3, [pc, #160]	; (8001724 <menu+0x250>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b0c      	cmp	r3, #12
 8001686:	d106      	bne.n	8001696 <menu+0x1c2>
 8001688:	4b28      	ldr	r3, [pc, #160]	; (800172c <menu+0x258>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b02      	cmp	r3, #2
 800168e:	d102      	bne.n	8001696 <menu+0x1c2>
			menuSayac = 8;
 8001690:	4b24      	ldr	r3, [pc, #144]	; (8001724 <menu+0x250>)
 8001692:	2208      	movs	r2, #8
 8001694:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001696:	4b23      	ldr	r3, [pc, #140]	; (8001724 <menu+0x250>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	2b0a      	cmp	r3, #10
 800169c:	d10a      	bne.n	80016b4 <menu+0x1e0>
 800169e:	4b24      	ldr	r3, [pc, #144]	; (8001730 <menu+0x25c>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d003      	beq.n	80016ae <menu+0x1da>
 80016a6:	4b22      	ldr	r3, [pc, #136]	; (8001730 <menu+0x25c>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d102      	bne.n	80016b4 <menu+0x1e0>
			menuSayac = 9;
 80016ae:	4b1d      	ldr	r3, [pc, #116]	; (8001724 <menu+0x250>)
 80016b0:	2209      	movs	r2, #9
 80016b2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 80016b4:	4b1b      	ldr	r3, [pc, #108]	; (8001724 <menu+0x250>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	2b0c      	cmp	r3, #12
 80016ba:	d10a      	bne.n	80016d2 <menu+0x1fe>
 80016bc:	4b1d      	ldr	r3, [pc, #116]	; (8001734 <menu+0x260>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	2b01      	cmp	r3, #1
 80016c2:	d003      	beq.n	80016cc <menu+0x1f8>
 80016c4:	4b1b      	ldr	r3, [pc, #108]	; (8001734 <menu+0x260>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	2b02      	cmp	r3, #2
 80016ca:	d102      	bne.n	80016d2 <menu+0x1fe>
			menuSayac = 11;
 80016cc:	4b15      	ldr	r3, [pc, #84]	; (8001724 <menu+0x250>)
 80016ce:	220b      	movs	r2, #11
 80016d0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80016d2:	4b14      	ldr	r3, [pc, #80]	; (8001724 <menu+0x250>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2b0f      	cmp	r3, #15
 80016d8:	d106      	bne.n	80016e8 <menu+0x214>
 80016da:	4b17      	ldr	r3, [pc, #92]	; (8001738 <menu+0x264>)
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b01      	cmp	r3, #1
 80016e0:	d102      	bne.n	80016e8 <menu+0x214>
			menuSayac = 14;
 80016e2:	4b10      	ldr	r3, [pc, #64]	; (8001724 <menu+0x250>)
 80016e4:	220e      	movs	r2, #14
 80016e6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 80016e8:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <menu+0x250>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2b19      	cmp	r3, #25
 80016ee:	d106      	bne.n	80016fe <menu+0x22a>
 80016f0:	4b0d      	ldr	r3, [pc, #52]	; (8001728 <menu+0x254>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d102      	bne.n	80016fe <menu+0x22a>
			menuSayac = 23;
 80016f8:	4b0a      	ldr	r3, [pc, #40]	; (8001724 <menu+0x250>)
 80016fa:	2217      	movs	r2, #23
 80016fc:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80016fe:	f004 fc75 	bl	8005fec <bekle>
	}

	if (menuSayac == 0) {
 8001702:	4b08      	ldr	r3, [pc, #32]	; (8001724 <menu+0x250>)
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d134      	bne.n	8001774 <menu+0x2a0>
		if(dilSecim == 0) {
 800170a:	4b0d      	ldr	r3, [pc, #52]	; (8001740 <menu+0x26c>)
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d122      	bne.n	8001758 <menu+0x284>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 8001712:	4a0c      	ldr	r2, [pc, #48]	; (8001744 <menu+0x270>)
 8001714:	2101      	movs	r1, #1
 8001716:	2001      	movs	r0, #1
 8001718:	e016      	b.n	8001748 <menu+0x274>
 800171a:	bf00      	nop
 800171c:	40010800 	.word	0x40010800
 8001720:	20000c78 	.word	0x20000c78
 8001724:	20000c49 	.word	0x20000c49
 8001728:	20000c58 	.word	0x20000c58
 800172c:	20000c51 	.word	0x20000c51
 8001730:	20000c52 	.word	0x20000c52
 8001734:	20000c53 	.word	0x20000c53
 8001738:	20000c54 	.word	0x20000c54
 800173c:	40011000 	.word	0x40011000
 8001740:	20000c6a 	.word	0x20000c6a
 8001744:	0800d948 	.word	0x0800d948
 8001748:	f7fe ff8e 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 800174c:	4a94      	ldr	r2, [pc, #592]	; (80019a0 <menu+0x4cc>)
 800174e:	2101      	movs	r1, #1
 8001750:	2002      	movs	r0, #2
 8001752:	f7fe ff89 	bl	8000668 <lcd_print>
 8001756:	e00d      	b.n	8001774 <menu+0x2a0>
		} else if(dilSecim  ==  1) {
 8001758:	4b92      	ldr	r3, [pc, #584]	; (80019a4 <menu+0x4d0>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d109      	bne.n	8001774 <menu+0x2a0>
			lcd_print(1, 1, "ENTERED THE MENU");
 8001760:	4a91      	ldr	r2, [pc, #580]	; (80019a8 <menu+0x4d4>)
 8001762:	2101      	movs	r1, #1
 8001764:	2001      	movs	r0, #1
 8001766:	f7fe ff7f 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 800176a:	4a90      	ldr	r2, [pc, #576]	; (80019ac <menu+0x4d8>)
 800176c:	2101      	movs	r1, #1
 800176e:	2002      	movs	r0, #2
 8001770:	f7fe ff7a 	bl	8000668 <lcd_print>
		}
	}

	if (menuSayac == 1) {
 8001774:	4b8e      	ldr	r3, [pc, #568]	; (80019b0 <menu+0x4dc>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	2b01      	cmp	r3, #1
 800177a:	f040 82b5 	bne.w	8001ce8 <menu+0x814>
		if(dilSecim == 0) {
 800177e:	4b89      	ldr	r3, [pc, #548]	; (80019a4 <menu+0x4d0>)
 8001780:	781b      	ldrb	r3, [r3, #0]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d105      	bne.n	8001792 <menu+0x2be>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 8001786:	4a8b      	ldr	r2, [pc, #556]	; (80019b4 <menu+0x4e0>)
 8001788:	2101      	movs	r1, #1
 800178a:	2001      	movs	r0, #1
 800178c:	f7fe ff6c 	bl	8000668 <lcd_print>
 8001790:	e008      	b.n	80017a4 <menu+0x2d0>
		} else if(dilSecim == 1) {
 8001792:	4b84      	ldr	r3, [pc, #528]	; (80019a4 <menu+0x4d0>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d104      	bne.n	80017a4 <menu+0x2d0>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 800179a:	4a87      	ldr	r2, [pc, #540]	; (80019b8 <menu+0x4e4>)
 800179c:	2101      	movs	r1, #1
 800179e:	2001      	movs	r0, #1
 80017a0:	f7fe ff62 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 80017a4:	4b85      	ldr	r3, [pc, #532]	; (80019bc <menu+0x4e8>)
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d123      	bne.n	80017f4 <menu+0x320>
			if(dilSecim == 0) {
 80017ac:	4b7d      	ldr	r3, [pc, #500]	; (80019a4 <menu+0x4d0>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d105      	bne.n	80017c0 <menu+0x2ec>
				lcd_print(2, 1, "1.Hata Kodu: ");
 80017b4:	4a82      	ldr	r2, [pc, #520]	; (80019c0 <menu+0x4ec>)
 80017b6:	2101      	movs	r1, #1
 80017b8:	2002      	movs	r0, #2
 80017ba:	f7fe ff55 	bl	8000668 <lcd_print>
 80017be:	e008      	b.n	80017d2 <menu+0x2fe>

			} else if(dilSecim == 1) {
 80017c0:	4b78      	ldr	r3, [pc, #480]	; (80019a4 <menu+0x4d0>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d104      	bne.n	80017d2 <menu+0x2fe>
				lcd_print(2, 1, "1.Error Code:");
 80017c8:	4a7e      	ldr	r2, [pc, #504]	; (80019c4 <menu+0x4f0>)
 80017ca:	2101      	movs	r1, #1
 80017cc:	2002      	movs	r0, #2
 80017ce:	f7fe ff4b 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "   ");
 80017d2:	4a7d      	ldr	r2, [pc, #500]	; (80019c8 <menu+0x4f4>)
 80017d4:	210f      	movs	r1, #15
 80017d6:	2002      	movs	r0, #2
 80017d8:	f7fe ff46 	bl	8000668 <lcd_print>
			itoa(hataKayit1, snum, 10);
 80017dc:	4b7b      	ldr	r3, [pc, #492]	; (80019cc <menu+0x4f8>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	220a      	movs	r2, #10
 80017e2:	497b      	ldr	r1, [pc, #492]	; (80019d0 <menu+0x4fc>)
 80017e4:	4618      	mov	r0, r3
 80017e6:	f00b fa6b 	bl	800ccc0 <itoa>
			lcd_print(2, 14, snum);
 80017ea:	4a79      	ldr	r2, [pc, #484]	; (80019d0 <menu+0x4fc>)
 80017ec:	210e      	movs	r1, #14
 80017ee:	2002      	movs	r0, #2
 80017f0:	f7fe ff3a 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 80017f4:	4b71      	ldr	r3, [pc, #452]	; (80019bc <menu+0x4e8>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d123      	bne.n	8001844 <menu+0x370>
			if(dilSecim == 0) {
 80017fc:	4b69      	ldr	r3, [pc, #420]	; (80019a4 <menu+0x4d0>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d105      	bne.n	8001810 <menu+0x33c>
				lcd_print(2, 1, "2.Hata Kodu: ");
 8001804:	4a73      	ldr	r2, [pc, #460]	; (80019d4 <menu+0x500>)
 8001806:	2101      	movs	r1, #1
 8001808:	2002      	movs	r0, #2
 800180a:	f7fe ff2d 	bl	8000668 <lcd_print>
 800180e:	e008      	b.n	8001822 <menu+0x34e>
			} else if(dilSecim == 1) {
 8001810:	4b64      	ldr	r3, [pc, #400]	; (80019a4 <menu+0x4d0>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	2b01      	cmp	r3, #1
 8001816:	d104      	bne.n	8001822 <menu+0x34e>
				lcd_print(2, 1, "2.Error Code:");
 8001818:	4a6f      	ldr	r2, [pc, #444]	; (80019d8 <menu+0x504>)
 800181a:	2101      	movs	r1, #1
 800181c:	2002      	movs	r0, #2
 800181e:	f7fe ff23 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001822:	4a6e      	ldr	r2, [pc, #440]	; (80019dc <menu+0x508>)
 8001824:	210f      	movs	r1, #15
 8001826:	2002      	movs	r0, #2
 8001828:	f7fe ff1e 	bl	8000668 <lcd_print>
			itoa(hataKayit2, snum, 10);
 800182c:	4b6c      	ldr	r3, [pc, #432]	; (80019e0 <menu+0x50c>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	220a      	movs	r2, #10
 8001832:	4967      	ldr	r1, [pc, #412]	; (80019d0 <menu+0x4fc>)
 8001834:	4618      	mov	r0, r3
 8001836:	f00b fa43 	bl	800ccc0 <itoa>
			lcd_print(2, 14, snum);
 800183a:	4a65      	ldr	r2, [pc, #404]	; (80019d0 <menu+0x4fc>)
 800183c:	210e      	movs	r1, #14
 800183e:	2002      	movs	r0, #2
 8001840:	f7fe ff12 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 8001844:	4b5d      	ldr	r3, [pc, #372]	; (80019bc <menu+0x4e8>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b02      	cmp	r3, #2
 800184a:	d123      	bne.n	8001894 <menu+0x3c0>
			if(dilSecim == 0) {
 800184c:	4b55      	ldr	r3, [pc, #340]	; (80019a4 <menu+0x4d0>)
 800184e:	781b      	ldrb	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	d105      	bne.n	8001860 <menu+0x38c>
				lcd_print(2, 1, "3.Hata Kodu: ");
 8001854:	4a63      	ldr	r2, [pc, #396]	; (80019e4 <menu+0x510>)
 8001856:	2101      	movs	r1, #1
 8001858:	2002      	movs	r0, #2
 800185a:	f7fe ff05 	bl	8000668 <lcd_print>
 800185e:	e008      	b.n	8001872 <menu+0x39e>
			} else if(dilSecim == 1) {
 8001860:	4b50      	ldr	r3, [pc, #320]	; (80019a4 <menu+0x4d0>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b01      	cmp	r3, #1
 8001866:	d104      	bne.n	8001872 <menu+0x39e>
				lcd_print(2, 1, "3.Error Code:");
 8001868:	4a5f      	ldr	r2, [pc, #380]	; (80019e8 <menu+0x514>)
 800186a:	2101      	movs	r1, #1
 800186c:	2002      	movs	r0, #2
 800186e:	f7fe fefb 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001872:	4a5a      	ldr	r2, [pc, #360]	; (80019dc <menu+0x508>)
 8001874:	210f      	movs	r1, #15
 8001876:	2002      	movs	r0, #2
 8001878:	f7fe fef6 	bl	8000668 <lcd_print>
			itoa(hataKayit3, snum, 10);
 800187c:	4b5b      	ldr	r3, [pc, #364]	; (80019ec <menu+0x518>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	220a      	movs	r2, #10
 8001882:	4953      	ldr	r1, [pc, #332]	; (80019d0 <menu+0x4fc>)
 8001884:	4618      	mov	r0, r3
 8001886:	f00b fa1b 	bl	800ccc0 <itoa>
			lcd_print(2, 14, snum);
 800188a:	4a51      	ldr	r2, [pc, #324]	; (80019d0 <menu+0x4fc>)
 800188c:	210e      	movs	r1, #14
 800188e:	2002      	movs	r0, #2
 8001890:	f7fe feea 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 8001894:	4b49      	ldr	r3, [pc, #292]	; (80019bc <menu+0x4e8>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	2b03      	cmp	r3, #3
 800189a:	d123      	bne.n	80018e4 <menu+0x410>
			if(dilSecim == 0) {
 800189c:	4b41      	ldr	r3, [pc, #260]	; (80019a4 <menu+0x4d0>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d105      	bne.n	80018b0 <menu+0x3dc>
				lcd_print(2, 1, "4.Hata Kodu: ");
 80018a4:	4a52      	ldr	r2, [pc, #328]	; (80019f0 <menu+0x51c>)
 80018a6:	2101      	movs	r1, #1
 80018a8:	2002      	movs	r0, #2
 80018aa:	f7fe fedd 	bl	8000668 <lcd_print>
 80018ae:	e008      	b.n	80018c2 <menu+0x3ee>
			} else if(dilSecim == 1) {
 80018b0:	4b3c      	ldr	r3, [pc, #240]	; (80019a4 <menu+0x4d0>)
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	2b01      	cmp	r3, #1
 80018b6:	d104      	bne.n	80018c2 <menu+0x3ee>
				lcd_print(2, 1, "4.Error Code:");
 80018b8:	4a4e      	ldr	r2, [pc, #312]	; (80019f4 <menu+0x520>)
 80018ba:	2101      	movs	r1, #1
 80018bc:	2002      	movs	r0, #2
 80018be:	f7fe fed3 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80018c2:	4a46      	ldr	r2, [pc, #280]	; (80019dc <menu+0x508>)
 80018c4:	210f      	movs	r1, #15
 80018c6:	2002      	movs	r0, #2
 80018c8:	f7fe fece 	bl	8000668 <lcd_print>
			itoa(hataKayit4, snum, 10);
 80018cc:	4b4a      	ldr	r3, [pc, #296]	; (80019f8 <menu+0x524>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	220a      	movs	r2, #10
 80018d2:	493f      	ldr	r1, [pc, #252]	; (80019d0 <menu+0x4fc>)
 80018d4:	4618      	mov	r0, r3
 80018d6:	f00b f9f3 	bl	800ccc0 <itoa>
			lcd_print(2, 14, snum);
 80018da:	4a3d      	ldr	r2, [pc, #244]	; (80019d0 <menu+0x4fc>)
 80018dc:	210e      	movs	r1, #14
 80018de:	2002      	movs	r0, #2
 80018e0:	f7fe fec2 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 80018e4:	4b35      	ldr	r3, [pc, #212]	; (80019bc <menu+0x4e8>)
 80018e6:	781b      	ldrb	r3, [r3, #0]
 80018e8:	2b04      	cmp	r3, #4
 80018ea:	d123      	bne.n	8001934 <menu+0x460>
			if(dilSecim == 0) {
 80018ec:	4b2d      	ldr	r3, [pc, #180]	; (80019a4 <menu+0x4d0>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d105      	bne.n	8001900 <menu+0x42c>
				lcd_print(2, 1, "5.Hata Kodu: ");
 80018f4:	4a41      	ldr	r2, [pc, #260]	; (80019fc <menu+0x528>)
 80018f6:	2101      	movs	r1, #1
 80018f8:	2002      	movs	r0, #2
 80018fa:	f7fe feb5 	bl	8000668 <lcd_print>
 80018fe:	e008      	b.n	8001912 <menu+0x43e>
			} else if(dilSecim == 1) {
 8001900:	4b28      	ldr	r3, [pc, #160]	; (80019a4 <menu+0x4d0>)
 8001902:	781b      	ldrb	r3, [r3, #0]
 8001904:	2b01      	cmp	r3, #1
 8001906:	d104      	bne.n	8001912 <menu+0x43e>
				lcd_print(2, 1, "5.Error Code:");
 8001908:	4a3d      	ldr	r2, [pc, #244]	; (8001a00 <menu+0x52c>)
 800190a:	2101      	movs	r1, #1
 800190c:	2002      	movs	r0, #2
 800190e:	f7fe feab 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001912:	4a32      	ldr	r2, [pc, #200]	; (80019dc <menu+0x508>)
 8001914:	210f      	movs	r1, #15
 8001916:	2002      	movs	r0, #2
 8001918:	f7fe fea6 	bl	8000668 <lcd_print>
			itoa(hataKayit5, snum, 10);
 800191c:	4b39      	ldr	r3, [pc, #228]	; (8001a04 <menu+0x530>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	220a      	movs	r2, #10
 8001922:	492b      	ldr	r1, [pc, #172]	; (80019d0 <menu+0x4fc>)
 8001924:	4618      	mov	r0, r3
 8001926:	f00b f9cb 	bl	800ccc0 <itoa>
			lcd_print(2, 14, snum);
 800192a:	4a29      	ldr	r2, [pc, #164]	; (80019d0 <menu+0x4fc>)
 800192c:	210e      	movs	r1, #14
 800192e:	2002      	movs	r0, #2
 8001930:	f7fe fe9a 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8001934:	4b21      	ldr	r3, [pc, #132]	; (80019bc <menu+0x4e8>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b05      	cmp	r3, #5
 800193a:	d123      	bne.n	8001984 <menu+0x4b0>
			if(dilSecim == 0) {
 800193c:	4b19      	ldr	r3, [pc, #100]	; (80019a4 <menu+0x4d0>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d105      	bne.n	8001950 <menu+0x47c>
				lcd_print(2, 1, "6.Hata Kodu: ");
 8001944:	4a30      	ldr	r2, [pc, #192]	; (8001a08 <menu+0x534>)
 8001946:	2101      	movs	r1, #1
 8001948:	2002      	movs	r0, #2
 800194a:	f7fe fe8d 	bl	8000668 <lcd_print>
 800194e:	e008      	b.n	8001962 <menu+0x48e>
			} else if(dilSecim == 1) {
 8001950:	4b14      	ldr	r3, [pc, #80]	; (80019a4 <menu+0x4d0>)
 8001952:	781b      	ldrb	r3, [r3, #0]
 8001954:	2b01      	cmp	r3, #1
 8001956:	d104      	bne.n	8001962 <menu+0x48e>
				lcd_print(2, 1, "6.Error Code:");
 8001958:	4a2c      	ldr	r2, [pc, #176]	; (8001a0c <menu+0x538>)
 800195a:	2101      	movs	r1, #1
 800195c:	2002      	movs	r0, #2
 800195e:	f7fe fe83 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001962:	4a1e      	ldr	r2, [pc, #120]	; (80019dc <menu+0x508>)
 8001964:	210f      	movs	r1, #15
 8001966:	2002      	movs	r0, #2
 8001968:	f7fe fe7e 	bl	8000668 <lcd_print>
			itoa(hataKayit6, snum, 10);
 800196c:	4b28      	ldr	r3, [pc, #160]	; (8001a10 <menu+0x53c>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	220a      	movs	r2, #10
 8001972:	4917      	ldr	r1, [pc, #92]	; (80019d0 <menu+0x4fc>)
 8001974:	4618      	mov	r0, r3
 8001976:	f00b f9a3 	bl	800ccc0 <itoa>
			lcd_print(2, 14, snum);
 800197a:	4a15      	ldr	r2, [pc, #84]	; (80019d0 <menu+0x4fc>)
 800197c:	210e      	movs	r1, #14
 800197e:	2002      	movs	r0, #2
 8001980:	f7fe fe72 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8001984:	4b0d      	ldr	r3, [pc, #52]	; (80019bc <menu+0x4e8>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b06      	cmp	r3, #6
 800198a:	d15f      	bne.n	8001a4c <menu+0x578>
			if(dilSecim == 0) {
 800198c:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <menu+0x4d0>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d141      	bne.n	8001a18 <menu+0x544>
				lcd_print(2, 1, "7.Hata Kodu: ");
 8001994:	4a1f      	ldr	r2, [pc, #124]	; (8001a14 <menu+0x540>)
 8001996:	2101      	movs	r1, #1
 8001998:	2002      	movs	r0, #2
 800199a:	f7fe fe65 	bl	8000668 <lcd_print>
 800199e:	e044      	b.n	8001a2a <menu+0x556>
 80019a0:	0800d95c 	.word	0x0800d95c
 80019a4:	20000c6a 	.word	0x20000c6a
 80019a8:	0800d970 	.word	0x0800d970
 80019ac:	0800d984 	.word	0x0800d984
 80019b0:	20000c49 	.word	0x20000c49
 80019b4:	0800d998 	.word	0x0800d998
 80019b8:	0800d9ac 	.word	0x0800d9ac
 80019bc:	20000c4b 	.word	0x20000c4b
 80019c0:	0800d9c0 	.word	0x0800d9c0
 80019c4:	0800d9d0 	.word	0x0800d9d0
 80019c8:	0800d9e0 	.word	0x0800d9e0
 80019cc:	20000c6b 	.word	0x20000c6b
 80019d0:	20000bcc 	.word	0x20000bcc
 80019d4:	0800d9e4 	.word	0x0800d9e4
 80019d8:	0800d9f4 	.word	0x0800d9f4
 80019dc:	0800da04 	.word	0x0800da04
 80019e0:	20000c6c 	.word	0x20000c6c
 80019e4:	0800da08 	.word	0x0800da08
 80019e8:	0800da18 	.word	0x0800da18
 80019ec:	20000c6d 	.word	0x20000c6d
 80019f0:	0800da28 	.word	0x0800da28
 80019f4:	0800da38 	.word	0x0800da38
 80019f8:	20000c6e 	.word	0x20000c6e
 80019fc:	0800da48 	.word	0x0800da48
 8001a00:	0800da58 	.word	0x0800da58
 8001a04:	20000c6f 	.word	0x20000c6f
 8001a08:	0800da68 	.word	0x0800da68
 8001a0c:	0800da78 	.word	0x0800da78
 8001a10:	20000c70 	.word	0x20000c70
 8001a14:	0800da88 	.word	0x0800da88
			} else if(dilSecim == 1) {
 8001a18:	4b4f      	ldr	r3, [pc, #316]	; (8001b58 <menu+0x684>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d104      	bne.n	8001a2a <menu+0x556>
				lcd_print(2, 1, "7.Error Code:");
 8001a20:	4a4e      	ldr	r2, [pc, #312]	; (8001b5c <menu+0x688>)
 8001a22:	2101      	movs	r1, #1
 8001a24:	2002      	movs	r0, #2
 8001a26:	f7fe fe1f 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001a2a:	4a4d      	ldr	r2, [pc, #308]	; (8001b60 <menu+0x68c>)
 8001a2c:	210f      	movs	r1, #15
 8001a2e:	2002      	movs	r0, #2
 8001a30:	f7fe fe1a 	bl	8000668 <lcd_print>
			itoa(hataKayit7, snum, 10);
 8001a34:	4b4b      	ldr	r3, [pc, #300]	; (8001b64 <menu+0x690>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	220a      	movs	r2, #10
 8001a3a:	494b      	ldr	r1, [pc, #300]	; (8001b68 <menu+0x694>)
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f00b f93f 	bl	800ccc0 <itoa>
			lcd_print(2, 14, snum);
 8001a42:	4a49      	ldr	r2, [pc, #292]	; (8001b68 <menu+0x694>)
 8001a44:	210e      	movs	r1, #14
 8001a46:	2002      	movs	r0, #2
 8001a48:	f7fe fe0e 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8001a4c:	4b47      	ldr	r3, [pc, #284]	; (8001b6c <menu+0x698>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b07      	cmp	r3, #7
 8001a52:	d123      	bne.n	8001a9c <menu+0x5c8>
			if(dilSecim == 0) {
 8001a54:	4b40      	ldr	r3, [pc, #256]	; (8001b58 <menu+0x684>)
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d105      	bne.n	8001a68 <menu+0x594>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8001a5c:	4a44      	ldr	r2, [pc, #272]	; (8001b70 <menu+0x69c>)
 8001a5e:	2101      	movs	r1, #1
 8001a60:	2002      	movs	r0, #2
 8001a62:	f7fe fe01 	bl	8000668 <lcd_print>
 8001a66:	e008      	b.n	8001a7a <menu+0x5a6>
			} else if(dilSecim == 1) {
 8001a68:	4b3b      	ldr	r3, [pc, #236]	; (8001b58 <menu+0x684>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d104      	bne.n	8001a7a <menu+0x5a6>
				lcd_print(2, 1, "8.Error Code:");
 8001a70:	4a40      	ldr	r2, [pc, #256]	; (8001b74 <menu+0x6a0>)
 8001a72:	2101      	movs	r1, #1
 8001a74:	2002      	movs	r0, #2
 8001a76:	f7fe fdf7 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001a7a:	4a39      	ldr	r2, [pc, #228]	; (8001b60 <menu+0x68c>)
 8001a7c:	210f      	movs	r1, #15
 8001a7e:	2002      	movs	r0, #2
 8001a80:	f7fe fdf2 	bl	8000668 <lcd_print>
			itoa(hataKayit8, snum, 10);
 8001a84:	4b3c      	ldr	r3, [pc, #240]	; (8001b78 <menu+0x6a4>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	220a      	movs	r2, #10
 8001a8a:	4937      	ldr	r1, [pc, #220]	; (8001b68 <menu+0x694>)
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f00b f917 	bl	800ccc0 <itoa>
			lcd_print(2, 14, snum);
 8001a92:	4a35      	ldr	r2, [pc, #212]	; (8001b68 <menu+0x694>)
 8001a94:	210e      	movs	r1, #14
 8001a96:	2002      	movs	r0, #2
 8001a98:	f7fe fde6 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8001a9c:	4b33      	ldr	r3, [pc, #204]	; (8001b6c <menu+0x698>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	2b08      	cmp	r3, #8
 8001aa2:	d123      	bne.n	8001aec <menu+0x618>
			if(dilSecim == 0) {
 8001aa4:	4b2c      	ldr	r3, [pc, #176]	; (8001b58 <menu+0x684>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d105      	bne.n	8001ab8 <menu+0x5e4>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8001aac:	4a33      	ldr	r2, [pc, #204]	; (8001b7c <menu+0x6a8>)
 8001aae:	2101      	movs	r1, #1
 8001ab0:	2002      	movs	r0, #2
 8001ab2:	f7fe fdd9 	bl	8000668 <lcd_print>
 8001ab6:	e008      	b.n	8001aca <menu+0x5f6>
			} else if(dilSecim == 1) {
 8001ab8:	4b27      	ldr	r3, [pc, #156]	; (8001b58 <menu+0x684>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d104      	bne.n	8001aca <menu+0x5f6>
				lcd_print(2, 1, "9.Error Code:");
 8001ac0:	4a2f      	ldr	r2, [pc, #188]	; (8001b80 <menu+0x6ac>)
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	2002      	movs	r0, #2
 8001ac6:	f7fe fdcf 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001aca:	4a25      	ldr	r2, [pc, #148]	; (8001b60 <menu+0x68c>)
 8001acc:	210f      	movs	r1, #15
 8001ace:	2002      	movs	r0, #2
 8001ad0:	f7fe fdca 	bl	8000668 <lcd_print>
			itoa(hataKayit9, snum, 10);
 8001ad4:	4b2b      	ldr	r3, [pc, #172]	; (8001b84 <menu+0x6b0>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	220a      	movs	r2, #10
 8001ada:	4923      	ldr	r1, [pc, #140]	; (8001b68 <menu+0x694>)
 8001adc:	4618      	mov	r0, r3
 8001ade:	f00b f8ef 	bl	800ccc0 <itoa>
			lcd_print(2, 14, snum);
 8001ae2:	4a21      	ldr	r2, [pc, #132]	; (8001b68 <menu+0x694>)
 8001ae4:	210e      	movs	r1, #14
 8001ae6:	2002      	movs	r0, #2
 8001ae8:	f7fe fdbe 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8001aec:	4b1f      	ldr	r3, [pc, #124]	; (8001b6c <menu+0x698>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b09      	cmp	r3, #9
 8001af2:	d123      	bne.n	8001b3c <menu+0x668>
			if(dilSecim == 0) {
 8001af4:	4b18      	ldr	r3, [pc, #96]	; (8001b58 <menu+0x684>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d105      	bne.n	8001b08 <menu+0x634>
				lcd_print(2, 1, "10.Hata Kodu: ");
 8001afc:	4a22      	ldr	r2, [pc, #136]	; (8001b88 <menu+0x6b4>)
 8001afe:	2101      	movs	r1, #1
 8001b00:	2002      	movs	r0, #2
 8001b02:	f7fe fdb1 	bl	8000668 <lcd_print>
 8001b06:	e008      	b.n	8001b1a <menu+0x646>
			} else if(dilSecim == 1) {
 8001b08:	4b13      	ldr	r3, [pc, #76]	; (8001b58 <menu+0x684>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	2b01      	cmp	r3, #1
 8001b0e:	d104      	bne.n	8001b1a <menu+0x646>
				lcd_print(2, 1, "10.Error Code:");
 8001b10:	4a1e      	ldr	r2, [pc, #120]	; (8001b8c <menu+0x6b8>)
 8001b12:	2101      	movs	r1, #1
 8001b14:	2002      	movs	r0, #2
 8001b16:	f7fe fda7 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 16, " ");
 8001b1a:	4a1d      	ldr	r2, [pc, #116]	; (8001b90 <menu+0x6bc>)
 8001b1c:	2110      	movs	r1, #16
 8001b1e:	2002      	movs	r0, #2
 8001b20:	f7fe fda2 	bl	8000668 <lcd_print>
			itoa(hataKayit10, snum, 10);
 8001b24:	4b1b      	ldr	r3, [pc, #108]	; (8001b94 <menu+0x6c0>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	220a      	movs	r2, #10
 8001b2a:	490f      	ldr	r1, [pc, #60]	; (8001b68 <menu+0x694>)
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f00b f8c7 	bl	800ccc0 <itoa>
			lcd_print(2, 15, snum);
 8001b32:	4a0d      	ldr	r2, [pc, #52]	; (8001b68 <menu+0x694>)
 8001b34:	210f      	movs	r1, #15
 8001b36:	2002      	movs	r0, #2
 8001b38:	f7fe fd96 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001b3c:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <menu+0x698>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b0a      	cmp	r3, #10
 8001b42:	d134      	bne.n	8001bae <menu+0x6da>
			if(dilSecim == 0) {
 8001b44:	4b04      	ldr	r3, [pc, #16]	; (8001b58 <menu+0x684>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d127      	bne.n	8001b9c <menu+0x6c8>
				lcd_print(2, 1, "Silmek icin ent.");
 8001b4c:	4a12      	ldr	r2, [pc, #72]	; (8001b98 <menu+0x6c4>)
 8001b4e:	2101      	movs	r1, #1
 8001b50:	2002      	movs	r0, #2
 8001b52:	f7fe fd89 	bl	8000668 <lcd_print>
 8001b56:	e02a      	b.n	8001bae <menu+0x6da>
 8001b58:	20000c6a 	.word	0x20000c6a
 8001b5c:	0800da98 	.word	0x0800da98
 8001b60:	0800da04 	.word	0x0800da04
 8001b64:	20000c71 	.word	0x20000c71
 8001b68:	20000bcc 	.word	0x20000bcc
 8001b6c:	20000c4b 	.word	0x20000c4b
 8001b70:	0800daa8 	.word	0x0800daa8
 8001b74:	0800dab8 	.word	0x0800dab8
 8001b78:	20000c72 	.word	0x20000c72
 8001b7c:	0800dac8 	.word	0x0800dac8
 8001b80:	0800dad8 	.word	0x0800dad8
 8001b84:	20000c73 	.word	0x20000c73
 8001b88:	0800dae8 	.word	0x0800dae8
 8001b8c:	0800daf8 	.word	0x0800daf8
 8001b90:	0800db08 	.word	0x0800db08
 8001b94:	20000c74 	.word	0x20000c74
 8001b98:	0800db0c 	.word	0x0800db0c
			} else if(dilSecim == 1) {
 8001b9c:	4b82      	ldr	r3, [pc, #520]	; (8001da8 <menu+0x8d4>)
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d104      	bne.n	8001bae <menu+0x6da>
				lcd_print(2, 1, "Del. press enter");
 8001ba4:	4a81      	ldr	r2, [pc, #516]	; (8001dac <menu+0x8d8>)
 8001ba6:	2101      	movs	r1, #1
 8001ba8:	2002      	movs	r0, #2
 8001baa:	f7fe fd5d 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001bae:	2102      	movs	r1, #2
 8001bb0:	487f      	ldr	r0, [pc, #508]	; (8001db0 <menu+0x8dc>)
 8001bb2:	f008 f859 	bl	8009c68 <HAL_GPIO_ReadPin>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d119      	bne.n	8001bf0 <menu+0x71c>
 8001bbc:	4b7d      	ldr	r3, [pc, #500]	; (8001db4 <menu+0x8e0>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	f083 0301 	eor.w	r3, r3, #1
 8001bc4:	b2db      	uxtb	r3, r3
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d012      	beq.n	8001bf0 <menu+0x71c>
 8001bca:	4b7b      	ldr	r3, [pc, #492]	; (8001db8 <menu+0x8e4>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d10e      	bne.n	8001bf0 <menu+0x71c>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001bd2:	4b7a      	ldr	r3, [pc, #488]	; (8001dbc <menu+0x8e8>)
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	b2da      	uxtb	r2, r3
 8001bda:	4b78      	ldr	r3, [pc, #480]	; (8001dbc <menu+0x8e8>)
 8001bdc:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001bde:	4b77      	ldr	r3, [pc, #476]	; (8001dbc <menu+0x8e8>)
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	2b0a      	cmp	r3, #10
 8001be4:	d902      	bls.n	8001bec <menu+0x718>
				hataGostermeSirasi = 0;
 8001be6:	4b75      	ldr	r3, [pc, #468]	; (8001dbc <menu+0x8e8>)
 8001be8:	2200      	movs	r2, #0
 8001bea:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001bec:	f004 f9fe 	bl	8005fec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001bf0:	2104      	movs	r1, #4
 8001bf2:	486f      	ldr	r0, [pc, #444]	; (8001db0 <menu+0x8dc>)
 8001bf4:	f008 f838 	bl	8009c68 <HAL_GPIO_ReadPin>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d119      	bne.n	8001c32 <menu+0x75e>
 8001bfe:	4b6d      	ldr	r3, [pc, #436]	; (8001db4 <menu+0x8e0>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	f083 0301 	eor.w	r3, r3, #1
 8001c06:	b2db      	uxtb	r3, r3
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d012      	beq.n	8001c32 <menu+0x75e>
 8001c0c:	4b6a      	ldr	r3, [pc, #424]	; (8001db8 <menu+0x8e4>)
 8001c0e:	781b      	ldrb	r3, [r3, #0]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d10e      	bne.n	8001c32 <menu+0x75e>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001c14:	4b69      	ldr	r3, [pc, #420]	; (8001dbc <menu+0x8e8>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	3b01      	subs	r3, #1
 8001c1a:	b2da      	uxtb	r2, r3
 8001c1c:	4b67      	ldr	r3, [pc, #412]	; (8001dbc <menu+0x8e8>)
 8001c1e:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001c20:	4b66      	ldr	r3, [pc, #408]	; (8001dbc <menu+0x8e8>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	2b0b      	cmp	r3, #11
 8001c26:	d902      	bls.n	8001c2e <menu+0x75a>
	    		hataGostermeSirasi = 10;
 8001c28:	4b64      	ldr	r3, [pc, #400]	; (8001dbc <menu+0x8e8>)
 8001c2a:	220a      	movs	r2, #10
 8001c2c:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001c2e:	f004 f9dd 	bl	8005fec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001c32:	2108      	movs	r1, #8
 8001c34:	485e      	ldr	r0, [pc, #376]	; (8001db0 <menu+0x8dc>)
 8001c36:	f008 f817 	bl	8009c68 <HAL_GPIO_ReadPin>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d153      	bne.n	8001ce8 <menu+0x814>
 8001c40:	4b5c      	ldr	r3, [pc, #368]	; (8001db4 <menu+0x8e0>)
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	f083 0301 	eor.w	r3, r3, #1
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d04c      	beq.n	8001ce8 <menu+0x814>
 8001c4e:	4b5b      	ldr	r3, [pc, #364]	; (8001dbc <menu+0x8e8>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	2b0a      	cmp	r3, #10
 8001c54:	d148      	bne.n	8001ce8 <menu+0x814>
			hataKayit1 = 0; eepromData[37] = 0;
 8001c56:	4b5a      	ldr	r3, [pc, #360]	; (8001dc0 <menu+0x8ec>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	701a      	strb	r2, [r3, #0]
 8001c5c:	4b59      	ldr	r3, [pc, #356]	; (8001dc4 <menu+0x8f0>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001c64:	4b58      	ldr	r3, [pc, #352]	; (8001dc8 <menu+0x8f4>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	701a      	strb	r2, [r3, #0]
 8001c6a:	4b56      	ldr	r3, [pc, #344]	; (8001dc4 <menu+0x8f0>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001c72:	4b56      	ldr	r3, [pc, #344]	; (8001dcc <menu+0x8f8>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	701a      	strb	r2, [r3, #0]
 8001c78:	4b52      	ldr	r3, [pc, #328]	; (8001dc4 <menu+0x8f0>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001c80:	4b53      	ldr	r3, [pc, #332]	; (8001dd0 <menu+0x8fc>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	701a      	strb	r2, [r3, #0]
 8001c86:	4b4f      	ldr	r3, [pc, #316]	; (8001dc4 <menu+0x8f0>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001c8e:	4b51      	ldr	r3, [pc, #324]	; (8001dd4 <menu+0x900>)
 8001c90:	2200      	movs	r2, #0
 8001c92:	701a      	strb	r2, [r3, #0]
 8001c94:	4b4b      	ldr	r3, [pc, #300]	; (8001dc4 <menu+0x8f0>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001c9c:	4b4e      	ldr	r3, [pc, #312]	; (8001dd8 <menu+0x904>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	701a      	strb	r2, [r3, #0]
 8001ca2:	4b48      	ldr	r3, [pc, #288]	; (8001dc4 <menu+0x8f0>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001caa:	4b4c      	ldr	r3, [pc, #304]	; (8001ddc <menu+0x908>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	701a      	strb	r2, [r3, #0]
 8001cb0:	4b44      	ldr	r3, [pc, #272]	; (8001dc4 <menu+0x8f0>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001cb8:	4b49      	ldr	r3, [pc, #292]	; (8001de0 <menu+0x90c>)
 8001cba:	2200      	movs	r2, #0
 8001cbc:	701a      	strb	r2, [r3, #0]
 8001cbe:	4b41      	ldr	r3, [pc, #260]	; (8001dc4 <menu+0x8f0>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001cc6:	4b47      	ldr	r3, [pc, #284]	; (8001de4 <menu+0x910>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	701a      	strb	r2, [r3, #0]
 8001ccc:	4b3d      	ldr	r3, [pc, #244]	; (8001dc4 <menu+0x8f0>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001cd4:	4b44      	ldr	r3, [pc, #272]	; (8001de8 <menu+0x914>)
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	701a      	strb	r2, [r3, #0]
 8001cda:	4b3a      	ldr	r3, [pc, #232]	; (8001dc4 <menu+0x8f0>)
 8001cdc:	2200      	movs	r2, #0
 8001cde:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8001ce2:	4b42      	ldr	r3, [pc, #264]	; (8001dec <menu+0x918>)
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001ce8:	4b41      	ldr	r3, [pc, #260]	; (8001df0 <menu+0x91c>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	f040 80fc 	bne.w	8001eea <menu+0xa16>
		if(dilSecim == 0) {
 8001cf2:	4b2d      	ldr	r3, [pc, #180]	; (8001da8 <menu+0x8d4>)
 8001cf4:	781b      	ldrb	r3, [r3, #0]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d105      	bne.n	8001d06 <menu+0x832>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8001cfa:	4a3e      	ldr	r2, [pc, #248]	; (8001df4 <menu+0x920>)
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	2001      	movs	r0, #1
 8001d00:	f7fe fcb2 	bl	8000668 <lcd_print>
 8001d04:	e008      	b.n	8001d18 <menu+0x844>
		} else if(dilSecim == 1) {
 8001d06:	4b28      	ldr	r3, [pc, #160]	; (8001da8 <menu+0x8d4>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	2b01      	cmp	r3, #1
 8001d0c:	d104      	bne.n	8001d18 <menu+0x844>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8001d0e:	4a3a      	ldr	r2, [pc, #232]	; (8001df8 <menu+0x924>)
 8001d10:	2101      	movs	r1, #1
 8001d12:	2001      	movs	r0, #1
 8001d14:	f7fe fca8 	bl	8000668 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001d18:	4b27      	ldr	r3, [pc, #156]	; (8001db8 <menu+0x8e4>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d003      	beq.n	8001d28 <menu+0x854>
 8001d20:	4b25      	ldr	r3, [pc, #148]	; (8001db8 <menu+0x8e4>)
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d112      	bne.n	8001d4e <menu+0x87a>
			if(dilSecim == 0) {
 8001d28:	4b1f      	ldr	r3, [pc, #124]	; (8001da8 <menu+0x8d4>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d105      	bne.n	8001d3c <menu+0x868>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8001d30:	4a32      	ldr	r2, [pc, #200]	; (8001dfc <menu+0x928>)
 8001d32:	2101      	movs	r1, #1
 8001d34:	2002      	movs	r0, #2
 8001d36:	f7fe fc97 	bl	8000668 <lcd_print>
 8001d3a:	e008      	b.n	8001d4e <menu+0x87a>
			} else if(dilSecim == 1) {
 8001d3c:	4b1a      	ldr	r3, [pc, #104]	; (8001da8 <menu+0x8d4>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d104      	bne.n	8001d4e <menu+0x87a>
				lcd_print(2, 1, "Tppng Mobil slct");
 8001d44:	4a2e      	ldr	r2, [pc, #184]	; (8001e00 <menu+0x92c>)
 8001d46:	2101      	movs	r1, #1
 8001d48:	2002      	movs	r0, #2
 8001d4a:	f7fe fc8d 	bl	8000668 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001d4e:	4b2d      	ldr	r3, [pc, #180]	; (8001e04 <menu+0x930>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d116      	bne.n	8001d84 <menu+0x8b0>
 8001d56:	4b18      	ldr	r3, [pc, #96]	; (8001db8 <menu+0x8e4>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d112      	bne.n	8001d84 <menu+0x8b0>
			if(dilSecim == 0) {
 8001d5e:	4b12      	ldr	r3, [pc, #72]	; (8001da8 <menu+0x8d4>)
 8001d60:	781b      	ldrb	r3, [r3, #0]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d105      	bne.n	8001d72 <menu+0x89e>
				lcd_print(2, 1, "Bastikca cal.  ");
 8001d66:	4a28      	ldr	r2, [pc, #160]	; (8001e08 <menu+0x934>)
 8001d68:	2101      	movs	r1, #1
 8001d6a:	2002      	movs	r0, #2
 8001d6c:	f7fe fc7c 	bl	8000668 <lcd_print>
 8001d70:	e008      	b.n	8001d84 <menu+0x8b0>
			} else if(dilSecim == 1) {
 8001d72:	4b0d      	ldr	r3, [pc, #52]	; (8001da8 <menu+0x8d4>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d104      	bne.n	8001d84 <menu+0x8b0>
				lcd_print(2, 1, "Deadman Control");
 8001d7a:	4a24      	ldr	r2, [pc, #144]	; (8001e0c <menu+0x938>)
 8001d7c:	2101      	movs	r1, #1
 8001d7e:	2002      	movs	r0, #2
 8001d80:	f7fe fc72 	bl	8000668 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001d84:	4b1f      	ldr	r3, [pc, #124]	; (8001e04 <menu+0x930>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d14c      	bne.n	8001e26 <menu+0x952>
 8001d8c:	4b0a      	ldr	r3, [pc, #40]	; (8001db8 <menu+0x8e4>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d148      	bne.n	8001e26 <menu+0x952>
			if(dilSecim == 0) {
 8001d94:	4b04      	ldr	r3, [pc, #16]	; (8001da8 <menu+0x8d4>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d13b      	bne.n	8001e14 <menu+0x940>
				lcd_print(2, 1, "Bas gonder     ");
 8001d9c:	4a1c      	ldr	r2, [pc, #112]	; (8001e10 <menu+0x93c>)
 8001d9e:	2101      	movs	r1, #1
 8001da0:	2002      	movs	r0, #2
 8001da2:	f7fe fc61 	bl	8000668 <lcd_print>
 8001da6:	e03e      	b.n	8001e26 <menu+0x952>
 8001da8:	20000c6a 	.word	0x20000c6a
 8001dac:	0800db20 	.word	0x0800db20
 8001db0:	40010800 	.word	0x40010800
 8001db4:	20000c78 	.word	0x20000c78
 8001db8:	20000c58 	.word	0x20000c58
 8001dbc:	20000c4b 	.word	0x20000c4b
 8001dc0:	20000c6b 	.word	0x20000c6b
 8001dc4:	20000b38 	.word	0x20000b38
 8001dc8:	20000c6c 	.word	0x20000c6c
 8001dcc:	20000c6d 	.word	0x20000c6d
 8001dd0:	20000c6e 	.word	0x20000c6e
 8001dd4:	20000c6f 	.word	0x20000c6f
 8001dd8:	20000c70 	.word	0x20000c70
 8001ddc:	20000c71 	.word	0x20000c71
 8001de0:	20000c72 	.word	0x20000c72
 8001de4:	20000c73 	.word	0x20000c73
 8001de8:	20000c74 	.word	0x20000c74
 8001dec:	20000c75 	.word	0x20000c75
 8001df0:	20000c49 	.word	0x20000c49
 8001df4:	0800db34 	.word	0x0800db34
 8001df8:	0800db48 	.word	0x0800db48
 8001dfc:	0800db5c 	.word	0x0800db5c
 8001e00:	0800db70 	.word	0x0800db70
 8001e04:	20000c4a 	.word	0x20000c4a
 8001e08:	0800db84 	.word	0x0800db84
 8001e0c:	0800db94 	.word	0x0800db94
 8001e10:	0800dba4 	.word	0x0800dba4
			} else if(dilSecim == 1) {
 8001e14:	4b98      	ldr	r3, [pc, #608]	; (8002078 <menu+0xba4>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d104      	bne.n	8001e26 <menu+0x952>
				lcd_print(2, 1, "Call & Send    ");
 8001e1c:	4a97      	ldr	r2, [pc, #604]	; (800207c <menu+0xba8>)
 8001e1e:	2101      	movs	r1, #1
 8001e20:	2002      	movs	r0, #2
 8001e22:	f7fe fc21 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001e26:	2102      	movs	r1, #2
 8001e28:	4895      	ldr	r0, [pc, #596]	; (8002080 <menu+0xbac>)
 8001e2a:	f007 ff1d 	bl	8009c68 <HAL_GPIO_ReadPin>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b01      	cmp	r3, #1
 8001e32:	d119      	bne.n	8001e68 <menu+0x994>
 8001e34:	4b93      	ldr	r3, [pc, #588]	; (8002084 <menu+0xbb0>)
 8001e36:	781b      	ldrb	r3, [r3, #0]
 8001e38:	f083 0301 	eor.w	r3, r3, #1
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d012      	beq.n	8001e68 <menu+0x994>
 8001e42:	4b91      	ldr	r3, [pc, #580]	; (8002088 <menu+0xbb4>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d10e      	bne.n	8001e68 <menu+0x994>
			calismaSekli = calismaSekli + 1;
 8001e4a:	4b90      	ldr	r3, [pc, #576]	; (800208c <menu+0xbb8>)
 8001e4c:	781b      	ldrb	r3, [r3, #0]
 8001e4e:	3301      	adds	r3, #1
 8001e50:	b2da      	uxtb	r2, r3
 8001e52:	4b8e      	ldr	r3, [pc, #568]	; (800208c <menu+0xbb8>)
 8001e54:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001e56:	4b8d      	ldr	r3, [pc, #564]	; (800208c <menu+0xbb8>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d902      	bls.n	8001e64 <menu+0x990>
				calismaSekli = 0;
 8001e5e:	4b8b      	ldr	r3, [pc, #556]	; (800208c <menu+0xbb8>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001e64:	f004 f8c2 	bl	8005fec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001e68:	2104      	movs	r1, #4
 8001e6a:	4885      	ldr	r0, [pc, #532]	; (8002080 <menu+0xbac>)
 8001e6c:	f007 fefc 	bl	8009c68 <HAL_GPIO_ReadPin>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d119      	bne.n	8001eaa <menu+0x9d6>
 8001e76:	4b83      	ldr	r3, [pc, #524]	; (8002084 <menu+0xbb0>)
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	f083 0301 	eor.w	r3, r3, #1
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d012      	beq.n	8001eaa <menu+0x9d6>
 8001e84:	4b80      	ldr	r3, [pc, #512]	; (8002088 <menu+0xbb4>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d10e      	bne.n	8001eaa <menu+0x9d6>
			calismaSekli = calismaSekli - 1;
 8001e8c:	4b7f      	ldr	r3, [pc, #508]	; (800208c <menu+0xbb8>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	3b01      	subs	r3, #1
 8001e92:	b2da      	uxtb	r2, r3
 8001e94:	4b7d      	ldr	r3, [pc, #500]	; (800208c <menu+0xbb8>)
 8001e96:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001e98:	4b7c      	ldr	r3, [pc, #496]	; (800208c <menu+0xbb8>)
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d002      	beq.n	8001ea6 <menu+0x9d2>
	    		calismaSekli = 1;
 8001ea0:	4b7a      	ldr	r3, [pc, #488]	; (800208c <menu+0xbb8>)
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001ea6:	f004 f8a1 	bl	8005fec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001eaa:	2108      	movs	r1, #8
 8001eac:	4874      	ldr	r0, [pc, #464]	; (8002080 <menu+0xbac>)
 8001eae:	f007 fedb 	bl	8009c68 <HAL_GPIO_ReadPin>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d118      	bne.n	8001eea <menu+0xa16>
 8001eb8:	4b72      	ldr	r3, [pc, #456]	; (8002084 <menu+0xbb0>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	f083 0301 	eor.w	r3, r3, #1
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d011      	beq.n	8001eea <menu+0xa16>
			eepromData[1] = calismaSekli;
 8001ec6:	4b71      	ldr	r3, [pc, #452]	; (800208c <menu+0xbb8>)
 8001ec8:	781a      	ldrb	r2, [r3, #0]
 8001eca:	4b71      	ldr	r3, [pc, #452]	; (8002090 <menu+0xbbc>)
 8001ecc:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001ece:	4b6f      	ldr	r3, [pc, #444]	; (800208c <menu+0xbb8>)
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d106      	bne.n	8001ee4 <menu+0xa10>
				altLimit = 1;
 8001ed6:	4b6f      	ldr	r3, [pc, #444]	; (8002094 <menu+0xbc0>)
 8001ed8:	2201      	movs	r2, #1
 8001eda:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001edc:	4b6d      	ldr	r3, [pc, #436]	; (8002094 <menu+0xbc0>)
 8001ede:	781a      	ldrb	r2, [r3, #0]
 8001ee0:	4b6b      	ldr	r3, [pc, #428]	; (8002090 <menu+0xbbc>)
 8001ee2:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001ee4:	4b6c      	ldr	r3, [pc, #432]	; (8002098 <menu+0xbc4>)
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001eea:	4b6c      	ldr	r3, [pc, #432]	; (800209c <menu+0xbc8>)
 8001eec:	781b      	ldrb	r3, [r3, #0]
 8001eee:	2b03      	cmp	r3, #3
 8001ef0:	f040 8083 	bne.w	8001ffa <menu+0xb26>
		if(dilSecim == 0) {
 8001ef4:	4b60      	ldr	r3, [pc, #384]	; (8002078 <menu+0xba4>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d105      	bne.n	8001f08 <menu+0xa34>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8001efc:	4a68      	ldr	r2, [pc, #416]	; (80020a0 <menu+0xbcc>)
 8001efe:	2101      	movs	r1, #1
 8001f00:	2001      	movs	r0, #1
 8001f02:	f7fe fbb1 	bl	8000668 <lcd_print>
 8001f06:	e008      	b.n	8001f1a <menu+0xa46>
		} else if(dilSecim == 1) {
 8001f08:	4b5b      	ldr	r3, [pc, #364]	; (8002078 <menu+0xba4>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d104      	bne.n	8001f1a <menu+0xa46>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8001f10:	4a64      	ldr	r2, [pc, #400]	; (80020a4 <menu+0xbd0>)
 8001f12:	2101      	movs	r1, #1
 8001f14:	2001      	movs	r0, #1
 8001f16:	f7fe fba7 	bl	8000668 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8001f1a:	4b63      	ldr	r3, [pc, #396]	; (80020a8 <menu+0xbd4>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d113      	bne.n	8001f4a <menu+0xa76>
			if(dilSecim == 0) {
 8001f22:	4b55      	ldr	r3, [pc, #340]	; (8002078 <menu+0xba4>)
 8001f24:	781b      	ldrb	r3, [r3, #0]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d105      	bne.n	8001f36 <menu+0xa62>
				lcd_print(2, 1, "Pasif           ");
 8001f2a:	4a60      	ldr	r2, [pc, #384]	; (80020ac <menu+0xbd8>)
 8001f2c:	2101      	movs	r1, #1
 8001f2e:	2002      	movs	r0, #2
 8001f30:	f7fe fb9a 	bl	8000668 <lcd_print>
 8001f34:	e012      	b.n	8001f5c <menu+0xa88>
			} else if(dilSecim == 1) {
 8001f36:	4b50      	ldr	r3, [pc, #320]	; (8002078 <menu+0xba4>)
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d10e      	bne.n	8001f5c <menu+0xa88>
				lcd_print(2, 1, "Passive         ");
 8001f3e:	4a5c      	ldr	r2, [pc, #368]	; (80020b0 <menu+0xbdc>)
 8001f40:	2101      	movs	r1, #1
 8001f42:	2002      	movs	r0, #2
 8001f44:	f7fe fb90 	bl	8000668 <lcd_print>
 8001f48:	e008      	b.n	8001f5c <menu+0xa88>
			}
		} else if(emniyetCercevesi == 1) {
 8001f4a:	4b57      	ldr	r3, [pc, #348]	; (80020a8 <menu+0xbd4>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d104      	bne.n	8001f5c <menu+0xa88>
			lcd_print(2, 1, "OND Safety     ");
 8001f52:	4a58      	ldr	r2, [pc, #352]	; (80020b4 <menu+0xbe0>)
 8001f54:	2101      	movs	r1, #1
 8001f56:	2002      	movs	r0, #2
 8001f58:	f7fe fb86 	bl	8000668 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f5c:	2102      	movs	r1, #2
 8001f5e:	4848      	ldr	r0, [pc, #288]	; (8002080 <menu+0xbac>)
 8001f60:	f007 fe82 	bl	8009c68 <HAL_GPIO_ReadPin>
 8001f64:	4603      	mov	r3, r0
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d115      	bne.n	8001f96 <menu+0xac2>
 8001f6a:	4b46      	ldr	r3, [pc, #280]	; (8002084 <menu+0xbb0>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	f083 0301 	eor.w	r3, r3, #1
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d00e      	beq.n	8001f96 <menu+0xac2>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001f78:	4b4b      	ldr	r3, [pc, #300]	; (80020a8 <menu+0xbd4>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	3301      	adds	r3, #1
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	4b49      	ldr	r3, [pc, #292]	; (80020a8 <menu+0xbd4>)
 8001f82:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001f84:	4b48      	ldr	r3, [pc, #288]	; (80020a8 <menu+0xbd4>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	2b01      	cmp	r3, #1
 8001f8a:	d902      	bls.n	8001f92 <menu+0xabe>
				emniyetCercevesi = 0;
 8001f8c:	4b46      	ldr	r3, [pc, #280]	; (80020a8 <menu+0xbd4>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001f92:	f004 f82b 	bl	8005fec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f96:	2104      	movs	r1, #4
 8001f98:	4839      	ldr	r0, [pc, #228]	; (8002080 <menu+0xbac>)
 8001f9a:	f007 fe65 	bl	8009c68 <HAL_GPIO_ReadPin>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b01      	cmp	r3, #1
 8001fa2:	d115      	bne.n	8001fd0 <menu+0xafc>
 8001fa4:	4b37      	ldr	r3, [pc, #220]	; (8002084 <menu+0xbb0>)
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	f083 0301 	eor.w	r3, r3, #1
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d00e      	beq.n	8001fd0 <menu+0xafc>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001fb2:	4b3d      	ldr	r3, [pc, #244]	; (80020a8 <menu+0xbd4>)
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	b2da      	uxtb	r2, r3
 8001fba:	4b3b      	ldr	r3, [pc, #236]	; (80020a8 <menu+0xbd4>)
 8001fbc:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001fbe:	4b3a      	ldr	r3, [pc, #232]	; (80020a8 <menu+0xbd4>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d002      	beq.n	8001fcc <menu+0xaf8>
		   		emniyetCercevesi = 1;
 8001fc6:	4b38      	ldr	r3, [pc, #224]	; (80020a8 <menu+0xbd4>)
 8001fc8:	2201      	movs	r2, #1
 8001fca:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001fcc:	f004 f80e 	bl	8005fec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001fd0:	2108      	movs	r1, #8
 8001fd2:	482b      	ldr	r0, [pc, #172]	; (8002080 <menu+0xbac>)
 8001fd4:	f007 fe48 	bl	8009c68 <HAL_GPIO_ReadPin>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b01      	cmp	r3, #1
 8001fdc:	d10d      	bne.n	8001ffa <menu+0xb26>
 8001fde:	4b29      	ldr	r3, [pc, #164]	; (8002084 <menu+0xbb0>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	f083 0301 	eor.w	r3, r3, #1
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d006      	beq.n	8001ffa <menu+0xb26>
			eepromData[2] = emniyetCercevesi;
 8001fec:	4b2e      	ldr	r3, [pc, #184]	; (80020a8 <menu+0xbd4>)
 8001fee:	781a      	ldrb	r2, [r3, #0]
 8001ff0:	4b27      	ldr	r3, [pc, #156]	; (8002090 <menu+0xbbc>)
 8001ff2:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001ff4:	4b28      	ldr	r3, [pc, #160]	; (8002098 <menu+0xbc4>)
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001ffa:	4b28      	ldr	r3, [pc, #160]	; (800209c <menu+0xbc8>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b04      	cmp	r3, #4
 8002000:	f040 80ba 	bne.w	8002178 <menu+0xca4>
		if(dilSecim == 0) {
 8002004:	4b1c      	ldr	r3, [pc, #112]	; (8002078 <menu+0xba4>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d105      	bne.n	8002018 <menu+0xb44>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 800200c:	4a2a      	ldr	r2, [pc, #168]	; (80020b8 <menu+0xbe4>)
 800200e:	2101      	movs	r1, #1
 8002010:	2001      	movs	r0, #1
 8002012:	f7fe fb29 	bl	8000668 <lcd_print>
 8002016:	e008      	b.n	800202a <menu+0xb56>
		} else if(dilSecim == 1) {
 8002018:	4b17      	ldr	r3, [pc, #92]	; (8002078 <menu+0xba4>)
 800201a:	781b      	ldrb	r3, [r3, #0]
 800201c:	2b01      	cmp	r3, #1
 800201e:	d104      	bne.n	800202a <menu+0xb56>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8002020:	4a26      	ldr	r2, [pc, #152]	; (80020bc <menu+0xbe8>)
 8002022:	2101      	movs	r1, #1
 8002024:	2001      	movs	r0, #1
 8002026:	f7fe fb1f 	bl	8000668 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 800202a:	4b25      	ldr	r3, [pc, #148]	; (80020c0 <menu+0xbec>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d113      	bne.n	800205a <menu+0xb86>
			if(dilSecim == 0) {
 8002032:	4b11      	ldr	r3, [pc, #68]	; (8002078 <menu+0xba4>)
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d105      	bne.n	8002046 <menu+0xb72>
				lcd_print(2, 1, "Pasif           ");
 800203a:	4a1c      	ldr	r2, [pc, #112]	; (80020ac <menu+0xbd8>)
 800203c:	2101      	movs	r1, #1
 800203e:	2002      	movs	r0, #2
 8002040:	f7fe fb12 	bl	8000668 <lcd_print>
 8002044:	e049      	b.n	80020da <menu+0xc06>
			} else if(dilSecim == 1) {
 8002046:	4b0c      	ldr	r3, [pc, #48]	; (8002078 <menu+0xba4>)
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d145      	bne.n	80020da <menu+0xc06>
				lcd_print(2, 1, "Passive         ");
 800204e:	4a18      	ldr	r2, [pc, #96]	; (80020b0 <menu+0xbdc>)
 8002050:	2101      	movs	r1, #1
 8002052:	2002      	movs	r0, #2
 8002054:	f7fe fb08 	bl	8000668 <lcd_print>
 8002058:	e03f      	b.n	80020da <menu+0xc06>
			}
		} else if(yavaslamaLimit == 1) {
 800205a:	4b19      	ldr	r3, [pc, #100]	; (80020c0 <menu+0xbec>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d13b      	bne.n	80020da <menu+0xc06>
			if(dilSecim == 0) {
 8002062:	4b05      	ldr	r3, [pc, #20]	; (8002078 <menu+0xba4>)
 8002064:	781b      	ldrb	r3, [r3, #0]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d12e      	bne.n	80020c8 <menu+0xbf4>
				lcd_print(2, 1, "Aktif           ");
 800206a:	4a16      	ldr	r2, [pc, #88]	; (80020c4 <menu+0xbf0>)
 800206c:	2101      	movs	r1, #1
 800206e:	2002      	movs	r0, #2
 8002070:	f7fe fafa 	bl	8000668 <lcd_print>
 8002074:	e031      	b.n	80020da <menu+0xc06>
 8002076:	bf00      	nop
 8002078:	20000c6a 	.word	0x20000c6a
 800207c:	0800dbb4 	.word	0x0800dbb4
 8002080:	40010800 	.word	0x40010800
 8002084:	20000c78 	.word	0x20000c78
 8002088:	20000c58 	.word	0x20000c58
 800208c:	20000c4a 	.word	0x20000c4a
 8002090:	20000b38 	.word	0x20000b38
 8002094:	20000c4f 	.word	0x20000c4f
 8002098:	20000c75 	.word	0x20000c75
 800209c:	20000c49 	.word	0x20000c49
 80020a0:	0800dbc4 	.word	0x0800dbc4
 80020a4:	0800dbd8 	.word	0x0800dbd8
 80020a8:	20000c4d 	.word	0x20000c4d
 80020ac:	0800dbec 	.word	0x0800dbec
 80020b0:	0800dc00 	.word	0x0800dc00
 80020b4:	0800dc14 	.word	0x0800dc14
 80020b8:	0800dc24 	.word	0x0800dc24
 80020bc:	0800dc38 	.word	0x0800dc38
 80020c0:	20000c4e 	.word	0x20000c4e
 80020c4:	0800dc4c 	.word	0x0800dc4c
			} else if(dilSecim == 1) {
 80020c8:	4b92      	ldr	r3, [pc, #584]	; (8002314 <menu+0xe40>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d104      	bne.n	80020da <menu+0xc06>
				lcd_print(2, 1, "Active          ");
 80020d0:	4a91      	ldr	r2, [pc, #580]	; (8002318 <menu+0xe44>)
 80020d2:	2101      	movs	r1, #1
 80020d4:	2002      	movs	r0, #2
 80020d6:	f7fe fac7 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80020da:	2102      	movs	r1, #2
 80020dc:	488f      	ldr	r0, [pc, #572]	; (800231c <menu+0xe48>)
 80020de:	f007 fdc3 	bl	8009c68 <HAL_GPIO_ReadPin>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d115      	bne.n	8002114 <menu+0xc40>
 80020e8:	4b8d      	ldr	r3, [pc, #564]	; (8002320 <menu+0xe4c>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	f083 0301 	eor.w	r3, r3, #1
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d00e      	beq.n	8002114 <menu+0xc40>
			yavaslamaLimit = yavaslamaLimit + 1;
 80020f6:	4b8b      	ldr	r3, [pc, #556]	; (8002324 <menu+0xe50>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	3301      	adds	r3, #1
 80020fc:	b2da      	uxtb	r2, r3
 80020fe:	4b89      	ldr	r3, [pc, #548]	; (8002324 <menu+0xe50>)
 8002100:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8002102:	4b88      	ldr	r3, [pc, #544]	; (8002324 <menu+0xe50>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d902      	bls.n	8002110 <menu+0xc3c>
				yavaslamaLimit = 0;
 800210a:	4b86      	ldr	r3, [pc, #536]	; (8002324 <menu+0xe50>)
 800210c:	2200      	movs	r2, #0
 800210e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002110:	f003 ff6c 	bl	8005fec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002114:	2104      	movs	r1, #4
 8002116:	4881      	ldr	r0, [pc, #516]	; (800231c <menu+0xe48>)
 8002118:	f007 fda6 	bl	8009c68 <HAL_GPIO_ReadPin>
 800211c:	4603      	mov	r3, r0
 800211e:	2b01      	cmp	r3, #1
 8002120:	d115      	bne.n	800214e <menu+0xc7a>
 8002122:	4b7f      	ldr	r3, [pc, #508]	; (8002320 <menu+0xe4c>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	f083 0301 	eor.w	r3, r3, #1
 800212a:	b2db      	uxtb	r3, r3
 800212c:	2b00      	cmp	r3, #0
 800212e:	d00e      	beq.n	800214e <menu+0xc7a>
			yavaslamaLimit = yavaslamaLimit - 1;
 8002130:	4b7c      	ldr	r3, [pc, #496]	; (8002324 <menu+0xe50>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	3b01      	subs	r3, #1
 8002136:	b2da      	uxtb	r2, r3
 8002138:	4b7a      	ldr	r3, [pc, #488]	; (8002324 <menu+0xe50>)
 800213a:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 800213c:	4b79      	ldr	r3, [pc, #484]	; (8002324 <menu+0xe50>)
 800213e:	781b      	ldrb	r3, [r3, #0]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d002      	beq.n	800214a <menu+0xc76>
		   		yavaslamaLimit = 1;
 8002144:	4b77      	ldr	r3, [pc, #476]	; (8002324 <menu+0xe50>)
 8002146:	2201      	movs	r2, #1
 8002148:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800214a:	f003 ff4f 	bl	8005fec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800214e:	2108      	movs	r1, #8
 8002150:	4872      	ldr	r0, [pc, #456]	; (800231c <menu+0xe48>)
 8002152:	f007 fd89 	bl	8009c68 <HAL_GPIO_ReadPin>
 8002156:	4603      	mov	r3, r0
 8002158:	2b01      	cmp	r3, #1
 800215a:	d10d      	bne.n	8002178 <menu+0xca4>
 800215c:	4b70      	ldr	r3, [pc, #448]	; (8002320 <menu+0xe4c>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	f083 0301 	eor.w	r3, r3, #1
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	d006      	beq.n	8002178 <menu+0xca4>
			eepromData[4] = yavaslamaLimit;
 800216a:	4b6e      	ldr	r3, [pc, #440]	; (8002324 <menu+0xe50>)
 800216c:	781a      	ldrb	r2, [r3, #0]
 800216e:	4b6e      	ldr	r3, [pc, #440]	; (8002328 <menu+0xe54>)
 8002170:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8002172:	4b6e      	ldr	r3, [pc, #440]	; (800232c <menu+0xe58>)
 8002174:	2201      	movs	r2, #1
 8002176:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8002178:	4b6d      	ldr	r3, [pc, #436]	; (8002330 <menu+0xe5c>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	2b05      	cmp	r3, #5
 800217e:	f040 80b9 	bne.w	80022f4 <menu+0xe20>
		if(dilSecim == 0) {
 8002182:	4b64      	ldr	r3, [pc, #400]	; (8002314 <menu+0xe40>)
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	2b00      	cmp	r3, #0
 8002188:	d105      	bne.n	8002196 <menu+0xcc2>
			lcd_print(1, 1, "ALT LIMIT       ");
 800218a:	4a6a      	ldr	r2, [pc, #424]	; (8002334 <menu+0xe60>)
 800218c:	2101      	movs	r1, #1
 800218e:	2001      	movs	r0, #1
 8002190:	f7fe fa6a 	bl	8000668 <lcd_print>
 8002194:	e008      	b.n	80021a8 <menu+0xcd4>
		} else if(dilSecim == 1) {
 8002196:	4b5f      	ldr	r3, [pc, #380]	; (8002314 <menu+0xe40>)
 8002198:	781b      	ldrb	r3, [r3, #0]
 800219a:	2b01      	cmp	r3, #1
 800219c:	d104      	bne.n	80021a8 <menu+0xcd4>
			lcd_print(1, 1, "DOWN LIMIT      ");
 800219e:	4a66      	ldr	r2, [pc, #408]	; (8002338 <menu+0xe64>)
 80021a0:	2101      	movs	r1, #1
 80021a2:	2001      	movs	r0, #1
 80021a4:	f7fe fa60 	bl	8000668 <lcd_print>
		}

		if(altLimit == 0) {
 80021a8:	4b64      	ldr	r3, [pc, #400]	; (800233c <menu+0xe68>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d113      	bne.n	80021d8 <menu+0xd04>
			if(dilSecim == 0) {
 80021b0:	4b58      	ldr	r3, [pc, #352]	; (8002314 <menu+0xe40>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d105      	bne.n	80021c4 <menu+0xcf0>
				lcd_print(2, 1, "Pasif           ");
 80021b8:	4a61      	ldr	r2, [pc, #388]	; (8002340 <menu+0xe6c>)
 80021ba:	2101      	movs	r1, #1
 80021bc:	2002      	movs	r0, #2
 80021be:	f7fe fa53 	bl	8000668 <lcd_print>
 80021c2:	e020      	b.n	8002206 <menu+0xd32>
			} else if(dilSecim == 1) {
 80021c4:	4b53      	ldr	r3, [pc, #332]	; (8002314 <menu+0xe40>)
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d11c      	bne.n	8002206 <menu+0xd32>
				lcd_print(2, 1, "Passive         ");
 80021cc:	4a5d      	ldr	r2, [pc, #372]	; (8002344 <menu+0xe70>)
 80021ce:	2101      	movs	r1, #1
 80021d0:	2002      	movs	r0, #2
 80021d2:	f7fe fa49 	bl	8000668 <lcd_print>
 80021d6:	e016      	b.n	8002206 <menu+0xd32>
			}
		} else if(altLimit == 1) {
 80021d8:	4b58      	ldr	r3, [pc, #352]	; (800233c <menu+0xe68>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	2b01      	cmp	r3, #1
 80021de:	d112      	bne.n	8002206 <menu+0xd32>
			if(dilSecim == 0){
 80021e0:	4b4c      	ldr	r3, [pc, #304]	; (8002314 <menu+0xe40>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d105      	bne.n	80021f4 <menu+0xd20>
				lcd_print(2, 1, "Aktif           ");
 80021e8:	4a57      	ldr	r2, [pc, #348]	; (8002348 <menu+0xe74>)
 80021ea:	2101      	movs	r1, #1
 80021ec:	2002      	movs	r0, #2
 80021ee:	f7fe fa3b 	bl	8000668 <lcd_print>
 80021f2:	e008      	b.n	8002206 <menu+0xd32>
			} else if(dilSecim == 1){
 80021f4:	4b47      	ldr	r3, [pc, #284]	; (8002314 <menu+0xe40>)
 80021f6:	781b      	ldrb	r3, [r3, #0]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d104      	bne.n	8002206 <menu+0xd32>
				lcd_print(2, 1, "Active          ");
 80021fc:	4a46      	ldr	r2, [pc, #280]	; (8002318 <menu+0xe44>)
 80021fe:	2101      	movs	r1, #1
 8002200:	2002      	movs	r0, #2
 8002202:	f7fe fa31 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8002206:	2102      	movs	r1, #2
 8002208:	4844      	ldr	r0, [pc, #272]	; (800231c <menu+0xe48>)
 800220a:	f007 fd2d 	bl	8009c68 <HAL_GPIO_ReadPin>
 800220e:	4603      	mov	r3, r0
 8002210:	2b01      	cmp	r3, #1
 8002212:	d119      	bne.n	8002248 <menu+0xd74>
 8002214:	4b42      	ldr	r3, [pc, #264]	; (8002320 <menu+0xe4c>)
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	f083 0301 	eor.w	r3, r3, #1
 800221c:	b2db      	uxtb	r3, r3
 800221e:	2b00      	cmp	r3, #0
 8002220:	d012      	beq.n	8002248 <menu+0xd74>
 8002222:	4b4a      	ldr	r3, [pc, #296]	; (800234c <menu+0xe78>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d10e      	bne.n	8002248 <menu+0xd74>
			altLimit = altLimit + 1;
 800222a:	4b44      	ldr	r3, [pc, #272]	; (800233c <menu+0xe68>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	3301      	adds	r3, #1
 8002230:	b2da      	uxtb	r2, r3
 8002232:	4b42      	ldr	r3, [pc, #264]	; (800233c <menu+0xe68>)
 8002234:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 8002236:	4b41      	ldr	r3, [pc, #260]	; (800233c <menu+0xe68>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	2b01      	cmp	r3, #1
 800223c:	d902      	bls.n	8002244 <menu+0xd70>
				altLimit = 0;
 800223e:	4b3f      	ldr	r3, [pc, #252]	; (800233c <menu+0xe68>)
 8002240:	2200      	movs	r2, #0
 8002242:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002244:	f003 fed2 	bl	8005fec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8002248:	2104      	movs	r1, #4
 800224a:	4834      	ldr	r0, [pc, #208]	; (800231c <menu+0xe48>)
 800224c:	f007 fd0c 	bl	8009c68 <HAL_GPIO_ReadPin>
 8002250:	4603      	mov	r3, r0
 8002252:	2b01      	cmp	r3, #1
 8002254:	d119      	bne.n	800228a <menu+0xdb6>
 8002256:	4b32      	ldr	r3, [pc, #200]	; (8002320 <menu+0xe4c>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	f083 0301 	eor.w	r3, r3, #1
 800225e:	b2db      	uxtb	r3, r3
 8002260:	2b00      	cmp	r3, #0
 8002262:	d012      	beq.n	800228a <menu+0xdb6>
 8002264:	4b39      	ldr	r3, [pc, #228]	; (800234c <menu+0xe78>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d10e      	bne.n	800228a <menu+0xdb6>
			altLimit = altLimit - 1;
 800226c:	4b33      	ldr	r3, [pc, #204]	; (800233c <menu+0xe68>)
 800226e:	781b      	ldrb	r3, [r3, #0]
 8002270:	3b01      	subs	r3, #1
 8002272:	b2da      	uxtb	r2, r3
 8002274:	4b31      	ldr	r3, [pc, #196]	; (800233c <menu+0xe68>)
 8002276:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8002278:	4b30      	ldr	r3, [pc, #192]	; (800233c <menu+0xe68>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d002      	beq.n	8002286 <menu+0xdb2>
		   		altLimit = 1;
 8002280:	4b2e      	ldr	r3, [pc, #184]	; (800233c <menu+0xe68>)
 8002282:	2201      	movs	r2, #1
 8002284:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002286:	f003 feb1 	bl	8005fec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800228a:	2108      	movs	r1, #8
 800228c:	4823      	ldr	r0, [pc, #140]	; (800231c <menu+0xe48>)
 800228e:	f007 fceb 	bl	8009c68 <HAL_GPIO_ReadPin>
 8002292:	4603      	mov	r3, r0
 8002294:	2b01      	cmp	r3, #1
 8002296:	d12d      	bne.n	80022f4 <menu+0xe20>
 8002298:	4b21      	ldr	r3, [pc, #132]	; (8002320 <menu+0xe4c>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	f083 0301 	eor.w	r3, r3, #1
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d026      	beq.n	80022f4 <menu+0xe20>
			eepromData[5] = altLimit;
 80022a6:	4b25      	ldr	r3, [pc, #148]	; (800233c <menu+0xe68>)
 80022a8:	781a      	ldrb	r2, [r3, #0]
 80022aa:	4b1f      	ldr	r3, [pc, #124]	; (8002328 <menu+0xe54>)
 80022ac:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 80022ae:	4b23      	ldr	r3, [pc, #140]	; (800233c <menu+0xe68>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d110      	bne.n	80022d8 <menu+0xe04>
 80022b6:	4b26      	ldr	r3, [pc, #152]	; (8002350 <menu+0xe7c>)
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d003      	beq.n	80022c6 <menu+0xdf2>
 80022be:	4b24      	ldr	r3, [pc, #144]	; (8002350 <menu+0xe7c>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2b02      	cmp	r3, #2
 80022c4:	d108      	bne.n	80022d8 <menu+0xe04>
				kapiTablaAcKonum = 3;
 80022c6:	4b22      	ldr	r3, [pc, #136]	; (8002350 <menu+0xe7c>)
 80022c8:	2203      	movs	r2, #3
 80022ca:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 80022cc:	4b20      	ldr	r3, [pc, #128]	; (8002350 <menu+0xe7c>)
 80022ce:	781a      	ldrb	r2, [r3, #0]
 80022d0:	4b15      	ldr	r3, [pc, #84]	; (8002328 <menu+0xe54>)
 80022d2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80022d6:	e00a      	b.n	80022ee <menu+0xe1a>
			} else if(altLimit == 0) {
 80022d8:	4b18      	ldr	r3, [pc, #96]	; (800233c <menu+0xe68>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d106      	bne.n	80022ee <menu+0xe1a>
				platformSilindirTipi = 0;
 80022e0:	4b1c      	ldr	r3, [pc, #112]	; (8002354 <menu+0xe80>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 80022e6:	4b1b      	ldr	r3, [pc, #108]	; (8002354 <menu+0xe80>)
 80022e8:	781a      	ldrb	r2, [r3, #0]
 80022ea:	4b0f      	ldr	r3, [pc, #60]	; (8002328 <menu+0xe54>)
 80022ec:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 80022ee:	4b0f      	ldr	r3, [pc, #60]	; (800232c <menu+0xe58>)
 80022f0:	2201      	movs	r2, #1
 80022f2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 80022f4:	4b0e      	ldr	r3, [pc, #56]	; (8002330 <menu+0xe5c>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	2b06      	cmp	r3, #6
 80022fa:	f040 80b6 	bne.w	800246a <menu+0xf96>
		if(dilSecim == 0) {
 80022fe:	4b05      	ldr	r3, [pc, #20]	; (8002314 <menu+0xe40>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d12a      	bne.n	800235c <menu+0xe88>
			lcd_print(1, 1, "BASINC SALTERI ");
 8002306:	4a14      	ldr	r2, [pc, #80]	; (8002358 <menu+0xe84>)
 8002308:	2101      	movs	r1, #1
 800230a:	2001      	movs	r0, #1
 800230c:	f7fe f9ac 	bl	8000668 <lcd_print>
 8002310:	e02d      	b.n	800236e <menu+0xe9a>
 8002312:	bf00      	nop
 8002314:	20000c6a 	.word	0x20000c6a
 8002318:	0800dc60 	.word	0x0800dc60
 800231c:	40010800 	.word	0x40010800
 8002320:	20000c78 	.word	0x20000c78
 8002324:	20000c4e 	.word	0x20000c4e
 8002328:	20000b38 	.word	0x20000b38
 800232c:	20000c75 	.word	0x20000c75
 8002330:	20000c49 	.word	0x20000c49
 8002334:	0800dc74 	.word	0x0800dc74
 8002338:	0800dc88 	.word	0x0800dc88
 800233c:	20000c4f 	.word	0x20000c4f
 8002340:	0800dbec 	.word	0x0800dbec
 8002344:	0800dc00 	.word	0x0800dc00
 8002348:	0800dc4c 	.word	0x0800dc4c
 800234c:	20000c4a 	.word	0x20000c4a
 8002350:	20000c56 	.word	0x20000c56
 8002354:	20000c5c 	.word	0x20000c5c
 8002358:	0800dc9c 	.word	0x0800dc9c
		} else if(dilSecim == 1){
 800235c:	4b7a      	ldr	r3, [pc, #488]	; (8002548 <menu+0x1074>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d104      	bne.n	800236e <menu+0xe9a>
			lcd_print(1, 1, "PRESSURE SWITCH");
 8002364:	4a79      	ldr	r2, [pc, #484]	; (800254c <menu+0x1078>)
 8002366:	2101      	movs	r1, #1
 8002368:	2001      	movs	r0, #1
 800236a:	f7fe f97d 	bl	8000668 <lcd_print>
		}
		if(basincSalteri == 0){
 800236e:	4b78      	ldr	r3, [pc, #480]	; (8002550 <menu+0x107c>)
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d113      	bne.n	800239e <menu+0xeca>
			if(dilSecim == 0) {
 8002376:	4b74      	ldr	r3, [pc, #464]	; (8002548 <menu+0x1074>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d105      	bne.n	800238a <menu+0xeb6>
				lcd_print(2, 1, "Pasif           ");
 800237e:	4a75      	ldr	r2, [pc, #468]	; (8002554 <menu+0x1080>)
 8002380:	2101      	movs	r1, #1
 8002382:	2002      	movs	r0, #2
 8002384:	f7fe f970 	bl	8000668 <lcd_print>
 8002388:	e020      	b.n	80023cc <menu+0xef8>
			} else if(dilSecim == 1){
 800238a:	4b6f      	ldr	r3, [pc, #444]	; (8002548 <menu+0x1074>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	2b01      	cmp	r3, #1
 8002390:	d11c      	bne.n	80023cc <menu+0xef8>
				lcd_print(2, 1, "Passive         ");
 8002392:	4a71      	ldr	r2, [pc, #452]	; (8002558 <menu+0x1084>)
 8002394:	2101      	movs	r1, #1
 8002396:	2002      	movs	r0, #2
 8002398:	f7fe f966 	bl	8000668 <lcd_print>
 800239c:	e016      	b.n	80023cc <menu+0xef8>
			}
		} else if(basincSalteri == 1) {
 800239e:	4b6c      	ldr	r3, [pc, #432]	; (8002550 <menu+0x107c>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	2b01      	cmp	r3, #1
 80023a4:	d112      	bne.n	80023cc <menu+0xef8>
			if(dilSecim == 0) {
 80023a6:	4b68      	ldr	r3, [pc, #416]	; (8002548 <menu+0x1074>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d105      	bne.n	80023ba <menu+0xee6>
				lcd_print(2, 1, "Aktif           ");
 80023ae:	4a6b      	ldr	r2, [pc, #428]	; (800255c <menu+0x1088>)
 80023b0:	2101      	movs	r1, #1
 80023b2:	2002      	movs	r0, #2
 80023b4:	f7fe f958 	bl	8000668 <lcd_print>
 80023b8:	e008      	b.n	80023cc <menu+0xef8>
			} else if(dilSecim == 1) {
 80023ba:	4b63      	ldr	r3, [pc, #396]	; (8002548 <menu+0x1074>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d104      	bne.n	80023cc <menu+0xef8>
				lcd_print(2, 1, "Active          ");
 80023c2:	4a67      	ldr	r2, [pc, #412]	; (8002560 <menu+0x108c>)
 80023c4:	2101      	movs	r1, #1
 80023c6:	2002      	movs	r0, #2
 80023c8:	f7fe f94e 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80023cc:	2102      	movs	r1, #2
 80023ce:	4865      	ldr	r0, [pc, #404]	; (8002564 <menu+0x1090>)
 80023d0:	f007 fc4a 	bl	8009c68 <HAL_GPIO_ReadPin>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b01      	cmp	r3, #1
 80023d8:	d115      	bne.n	8002406 <menu+0xf32>
 80023da:	4b63      	ldr	r3, [pc, #396]	; (8002568 <menu+0x1094>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	f083 0301 	eor.w	r3, r3, #1
 80023e2:	b2db      	uxtb	r3, r3
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d00e      	beq.n	8002406 <menu+0xf32>
			basincSalteri = basincSalteri + 1;
 80023e8:	4b59      	ldr	r3, [pc, #356]	; (8002550 <menu+0x107c>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	3301      	adds	r3, #1
 80023ee:	b2da      	uxtb	r2, r3
 80023f0:	4b57      	ldr	r3, [pc, #348]	; (8002550 <menu+0x107c>)
 80023f2:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 80023f4:	4b56      	ldr	r3, [pc, #344]	; (8002550 <menu+0x107c>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d902      	bls.n	8002402 <menu+0xf2e>
				basincSalteri = 0;
 80023fc:	4b54      	ldr	r3, [pc, #336]	; (8002550 <menu+0x107c>)
 80023fe:	2200      	movs	r2, #0
 8002400:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002402:	f003 fdf3 	bl	8005fec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002406:	2104      	movs	r1, #4
 8002408:	4856      	ldr	r0, [pc, #344]	; (8002564 <menu+0x1090>)
 800240a:	f007 fc2d 	bl	8009c68 <HAL_GPIO_ReadPin>
 800240e:	4603      	mov	r3, r0
 8002410:	2b01      	cmp	r3, #1
 8002412:	d115      	bne.n	8002440 <menu+0xf6c>
 8002414:	4b54      	ldr	r3, [pc, #336]	; (8002568 <menu+0x1094>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	f083 0301 	eor.w	r3, r3, #1
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d00e      	beq.n	8002440 <menu+0xf6c>
			basincSalteri = basincSalteri - 1;
 8002422:	4b4b      	ldr	r3, [pc, #300]	; (8002550 <menu+0x107c>)
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	3b01      	subs	r3, #1
 8002428:	b2da      	uxtb	r2, r3
 800242a:	4b49      	ldr	r3, [pc, #292]	; (8002550 <menu+0x107c>)
 800242c:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 800242e:	4b48      	ldr	r3, [pc, #288]	; (8002550 <menu+0x107c>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d002      	beq.n	800243c <menu+0xf68>
		   		basincSalteri = 1;
 8002436:	4b46      	ldr	r3, [pc, #280]	; (8002550 <menu+0x107c>)
 8002438:	2201      	movs	r2, #1
 800243a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800243c:	f003 fdd6 	bl	8005fec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002440:	2108      	movs	r1, #8
 8002442:	4848      	ldr	r0, [pc, #288]	; (8002564 <menu+0x1090>)
 8002444:	f007 fc10 	bl	8009c68 <HAL_GPIO_ReadPin>
 8002448:	4603      	mov	r3, r0
 800244a:	2b01      	cmp	r3, #1
 800244c:	d10d      	bne.n	800246a <menu+0xf96>
 800244e:	4b46      	ldr	r3, [pc, #280]	; (8002568 <menu+0x1094>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	f083 0301 	eor.w	r3, r3, #1
 8002456:	b2db      	uxtb	r3, r3
 8002458:	2b00      	cmp	r3, #0
 800245a:	d006      	beq.n	800246a <menu+0xf96>
			eepromData[6] = basincSalteri;
 800245c:	4b3c      	ldr	r3, [pc, #240]	; (8002550 <menu+0x107c>)
 800245e:	781a      	ldrb	r2, [r3, #0]
 8002460:	4b42      	ldr	r3, [pc, #264]	; (800256c <menu+0x1098>)
 8002462:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 8002464:	4b42      	ldr	r3, [pc, #264]	; (8002570 <menu+0x109c>)
 8002466:	2201      	movs	r2, #1
 8002468:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 800246a:	4b42      	ldr	r3, [pc, #264]	; (8002574 <menu+0x10a0>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	2b07      	cmp	r3, #7
 8002470:	f040 80f5 	bne.w	800265e <menu+0x118a>
		if(dilSecim == 0) {
 8002474:	4b34      	ldr	r3, [pc, #208]	; (8002548 <menu+0x1074>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d105      	bne.n	8002488 <menu+0xfb4>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 800247c:	4a3e      	ldr	r2, [pc, #248]	; (8002578 <menu+0x10a4>)
 800247e:	2101      	movs	r1, #1
 8002480:	2001      	movs	r0, #1
 8002482:	f7fe f8f1 	bl	8000668 <lcd_print>
 8002486:	e008      	b.n	800249a <menu+0xfc6>
		} else if(dilSecim == 1){
 8002488:	4b2f      	ldr	r3, [pc, #188]	; (8002548 <menu+0x1074>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	2b01      	cmp	r3, #1
 800248e:	d104      	bne.n	800249a <menu+0xfc6>
			lcd_print(1, 1, "DOOR SELECTION     ");
 8002490:	4a3a      	ldr	r2, [pc, #232]	; (800257c <menu+0x10a8>)
 8002492:	2101      	movs	r1, #1
 8002494:	2001      	movs	r0, #1
 8002496:	f7fe f8e7 	bl	8000668 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 800249a:	4b39      	ldr	r3, [pc, #228]	; (8002580 <menu+0x10ac>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d113      	bne.n	80024ca <menu+0xff6>
			if(dilSecim == 0) {
 80024a2:	4b29      	ldr	r3, [pc, #164]	; (8002548 <menu+0x1074>)
 80024a4:	781b      	ldrb	r3, [r3, #0]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d105      	bne.n	80024b6 <menu+0xfe2>
				lcd_print(2, 1, "Pasif           ");
 80024aa:	4a2a      	ldr	r2, [pc, #168]	; (8002554 <menu+0x1080>)
 80024ac:	2101      	movs	r1, #1
 80024ae:	2002      	movs	r0, #2
 80024b0:	f7fe f8da 	bl	8000668 <lcd_print>
 80024b4:	e079      	b.n	80025aa <menu+0x10d6>
			} else if(dilSecim == 1){
 80024b6:	4b24      	ldr	r3, [pc, #144]	; (8002548 <menu+0x1074>)
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d175      	bne.n	80025aa <menu+0x10d6>
				lcd_print(2, 1, "Passive         ");
 80024be:	4a26      	ldr	r2, [pc, #152]	; (8002558 <menu+0x1084>)
 80024c0:	2101      	movs	r1, #1
 80024c2:	2002      	movs	r0, #2
 80024c4:	f7fe f8d0 	bl	8000668 <lcd_print>
 80024c8:	e06f      	b.n	80025aa <menu+0x10d6>
			}
		} else if(kapiSecimleri == 1) {
 80024ca:	4b2d      	ldr	r3, [pc, #180]	; (8002580 <menu+0x10ac>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d113      	bne.n	80024fa <menu+0x1026>
			if(dilSecim == 0) {
 80024d2:	4b1d      	ldr	r3, [pc, #116]	; (8002548 <menu+0x1074>)
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d105      	bne.n	80024e6 <menu+0x1012>
				lcd_print(2, 1, "Kat kapisi aktif");
 80024da:	4a2a      	ldr	r2, [pc, #168]	; (8002584 <menu+0x10b0>)
 80024dc:	2101      	movs	r1, #1
 80024de:	2002      	movs	r0, #2
 80024e0:	f7fe f8c2 	bl	8000668 <lcd_print>
 80024e4:	e061      	b.n	80025aa <menu+0x10d6>
			} else if(dilSecim == 1) {
 80024e6:	4b18      	ldr	r3, [pc, #96]	; (8002548 <menu+0x1074>)
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d15d      	bne.n	80025aa <menu+0x10d6>
				lcd_print(2, 1, "Floor door act  ");
 80024ee:	4a26      	ldr	r2, [pc, #152]	; (8002588 <menu+0x10b4>)
 80024f0:	2101      	movs	r1, #1
 80024f2:	2002      	movs	r0, #2
 80024f4:	f7fe f8b8 	bl	8000668 <lcd_print>
 80024f8:	e057      	b.n	80025aa <menu+0x10d6>
			}
		} else if(kapiSecimleri == 2){
 80024fa:	4b21      	ldr	r3, [pc, #132]	; (8002580 <menu+0x10ac>)
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	2b02      	cmp	r3, #2
 8002500:	d113      	bne.n	800252a <menu+0x1056>
			if(dilSecim == 0) {
 8002502:	4b11      	ldr	r3, [pc, #68]	; (8002548 <menu+0x1074>)
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d105      	bne.n	8002516 <menu+0x1042>
				lcd_print(2, 1, "Tabla kapi aktif");
 800250a:	4a20      	ldr	r2, [pc, #128]	; (800258c <menu+0x10b8>)
 800250c:	2101      	movs	r1, #1
 800250e:	2002      	movs	r0, #2
 8002510:	f7fe f8aa 	bl	8000668 <lcd_print>
 8002514:	e049      	b.n	80025aa <menu+0x10d6>
			} else if(dilSecim == 1) {
 8002516:	4b0c      	ldr	r3, [pc, #48]	; (8002548 <menu+0x1074>)
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	2b01      	cmp	r3, #1
 800251c:	d145      	bne.n	80025aa <menu+0x10d6>
				lcd_print(2, 1, "Pltfrm door act ");
 800251e:	4a1c      	ldr	r2, [pc, #112]	; (8002590 <menu+0x10bc>)
 8002520:	2101      	movs	r1, #1
 8002522:	2002      	movs	r0, #2
 8002524:	f7fe f8a0 	bl	8000668 <lcd_print>
 8002528:	e03f      	b.n	80025aa <menu+0x10d6>
			}
		} else if(kapiSecimleri == 3){
 800252a:	4b15      	ldr	r3, [pc, #84]	; (8002580 <menu+0x10ac>)
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	2b03      	cmp	r3, #3
 8002530:	d13b      	bne.n	80025aa <menu+0x10d6>
			if(dilSecim == 0) {
 8002532:	4b05      	ldr	r3, [pc, #20]	; (8002548 <menu+0x1074>)
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d12e      	bne.n	8002598 <menu+0x10c4>
				lcd_print(2, 1, "Kat + Tabl aktif");
 800253a:	4a16      	ldr	r2, [pc, #88]	; (8002594 <menu+0x10c0>)
 800253c:	2101      	movs	r1, #1
 800253e:	2002      	movs	r0, #2
 8002540:	f7fe f892 	bl	8000668 <lcd_print>
 8002544:	e031      	b.n	80025aa <menu+0x10d6>
 8002546:	bf00      	nop
 8002548:	20000c6a 	.word	0x20000c6a
 800254c:	0800dcac 	.word	0x0800dcac
 8002550:	20000c50 	.word	0x20000c50
 8002554:	0800dbec 	.word	0x0800dbec
 8002558:	0800dc00 	.word	0x0800dc00
 800255c:	0800dc4c 	.word	0x0800dc4c
 8002560:	0800dc60 	.word	0x0800dc60
 8002564:	40010800 	.word	0x40010800
 8002568:	20000c78 	.word	0x20000c78
 800256c:	20000b38 	.word	0x20000b38
 8002570:	20000c75 	.word	0x20000c75
 8002574:	20000c49 	.word	0x20000c49
 8002578:	0800dcbc 	.word	0x0800dcbc
 800257c:	0800dcd0 	.word	0x0800dcd0
 8002580:	20000c51 	.word	0x20000c51
 8002584:	0800dce4 	.word	0x0800dce4
 8002588:	0800dcf8 	.word	0x0800dcf8
 800258c:	0800dd0c 	.word	0x0800dd0c
 8002590:	0800dd20 	.word	0x0800dd20
 8002594:	0800dd34 	.word	0x0800dd34
			} else if(dilSecim == 1){
 8002598:	4b99      	ldr	r3, [pc, #612]	; (8002800 <menu+0x132c>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d104      	bne.n	80025aa <menu+0x10d6>
				lcd_print(2, 1, "Flr + Plrfrm act");
 80025a0:	4a98      	ldr	r2, [pc, #608]	; (8002804 <menu+0x1330>)
 80025a2:	2101      	movs	r1, #1
 80025a4:	2002      	movs	r0, #2
 80025a6:	f7fe f85f 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80025aa:	2102      	movs	r1, #2
 80025ac:	4896      	ldr	r0, [pc, #600]	; (8002808 <menu+0x1334>)
 80025ae:	f007 fb5b 	bl	8009c68 <HAL_GPIO_ReadPin>
 80025b2:	4603      	mov	r3, r0
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d115      	bne.n	80025e4 <menu+0x1110>
 80025b8:	4b94      	ldr	r3, [pc, #592]	; (800280c <menu+0x1338>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	f083 0301 	eor.w	r3, r3, #1
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d00e      	beq.n	80025e4 <menu+0x1110>
			kapiSecimleri = kapiSecimleri + 1;
 80025c6:	4b92      	ldr	r3, [pc, #584]	; (8002810 <menu+0x133c>)
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	3301      	adds	r3, #1
 80025cc:	b2da      	uxtb	r2, r3
 80025ce:	4b90      	ldr	r3, [pc, #576]	; (8002810 <menu+0x133c>)
 80025d0:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 80025d2:	4b8f      	ldr	r3, [pc, #572]	; (8002810 <menu+0x133c>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	2b03      	cmp	r3, #3
 80025d8:	d902      	bls.n	80025e0 <menu+0x110c>
				kapiSecimleri = 0;
 80025da:	4b8d      	ldr	r3, [pc, #564]	; (8002810 <menu+0x133c>)
 80025dc:	2200      	movs	r2, #0
 80025de:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80025e0:	f003 fd04 	bl	8005fec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80025e4:	2104      	movs	r1, #4
 80025e6:	4888      	ldr	r0, [pc, #544]	; (8002808 <menu+0x1334>)
 80025e8:	f007 fb3e 	bl	8009c68 <HAL_GPIO_ReadPin>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b01      	cmp	r3, #1
 80025f0:	d115      	bne.n	800261e <menu+0x114a>
 80025f2:	4b86      	ldr	r3, [pc, #536]	; (800280c <menu+0x1338>)
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	f083 0301 	eor.w	r3, r3, #1
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d00e      	beq.n	800261e <menu+0x114a>
			kapiSecimleri = kapiSecimleri - 1;
 8002600:	4b83      	ldr	r3, [pc, #524]	; (8002810 <menu+0x133c>)
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	3b01      	subs	r3, #1
 8002606:	b2da      	uxtb	r2, r3
 8002608:	4b81      	ldr	r3, [pc, #516]	; (8002810 <menu+0x133c>)
 800260a:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 800260c:	4b80      	ldr	r3, [pc, #512]	; (8002810 <menu+0x133c>)
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	2b04      	cmp	r3, #4
 8002612:	d902      	bls.n	800261a <menu+0x1146>
		   		kapiSecimleri = 3;
 8002614:	4b7e      	ldr	r3, [pc, #504]	; (8002810 <menu+0x133c>)
 8002616:	2203      	movs	r2, #3
 8002618:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800261a:	f003 fce7 	bl	8005fec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800261e:	2108      	movs	r1, #8
 8002620:	4879      	ldr	r0, [pc, #484]	; (8002808 <menu+0x1334>)
 8002622:	f007 fb21 	bl	8009c68 <HAL_GPIO_ReadPin>
 8002626:	4603      	mov	r3, r0
 8002628:	2b01      	cmp	r3, #1
 800262a:	d118      	bne.n	800265e <menu+0x118a>
 800262c:	4b77      	ldr	r3, [pc, #476]	; (800280c <menu+0x1338>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	f083 0301 	eor.w	r3, r3, #1
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d011      	beq.n	800265e <menu+0x118a>
			eepromData[7] = kapiSecimleri;
 800263a:	4b75      	ldr	r3, [pc, #468]	; (8002810 <menu+0x133c>)
 800263c:	781a      	ldrb	r2, [r3, #0]
 800263e:	4b75      	ldr	r3, [pc, #468]	; (8002814 <menu+0x1340>)
 8002640:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 8002642:	4b73      	ldr	r3, [pc, #460]	; (8002810 <menu+0x133c>)
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d006      	beq.n	8002658 <menu+0x1184>
				altLimit = 1;
 800264a:	4b73      	ldr	r3, [pc, #460]	; (8002818 <menu+0x1344>)
 800264c:	2201      	movs	r2, #1
 800264e:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002650:	4b71      	ldr	r3, [pc, #452]	; (8002818 <menu+0x1344>)
 8002652:	781a      	ldrb	r2, [r3, #0]
 8002654:	4b6f      	ldr	r3, [pc, #444]	; (8002814 <menu+0x1340>)
 8002656:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002658:	4b70      	ldr	r3, [pc, #448]	; (800281c <menu+0x1348>)
 800265a:	2201      	movs	r2, #1
 800265c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 800265e:	4b70      	ldr	r3, [pc, #448]	; (8002820 <menu+0x134c>)
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	2b08      	cmp	r3, #8
 8002664:	f040 8092 	bne.w	800278c <menu+0x12b8>
		if(dilSecim == 0) {
 8002668:	4b65      	ldr	r3, [pc, #404]	; (8002800 <menu+0x132c>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d105      	bne.n	800267c <menu+0x11a8>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 8002670:	4a6c      	ldr	r2, [pc, #432]	; (8002824 <menu+0x1350>)
 8002672:	2101      	movs	r1, #1
 8002674:	2001      	movs	r0, #1
 8002676:	f7fd fff7 	bl	8000668 <lcd_print>
 800267a:	e008      	b.n	800268e <menu+0x11ba>
		} else if(dilSecim == 1) {
 800267c:	4b60      	ldr	r3, [pc, #384]	; (8002800 <menu+0x132c>)
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d104      	bne.n	800268e <menu+0x11ba>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 8002684:	4a68      	ldr	r2, [pc, #416]	; (8002828 <menu+0x1354>)
 8002686:	2101      	movs	r1, #1
 8002688:	2001      	movs	r0, #1
 800268a:	f7fd ffed 	bl	8000668 <lcd_print>
		}

		if(kapiAcTipi == 0){
 800268e:	4b67      	ldr	r3, [pc, #412]	; (800282c <menu+0x1358>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d113      	bne.n	80026be <menu+0x11ea>
			if(dilSecim == 0) {
 8002696:	4b5a      	ldr	r3, [pc, #360]	; (8002800 <menu+0x132c>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d105      	bne.n	80026aa <menu+0x11d6>
				lcd_print(2, 1, "Kapi butonu ESP");
 800269e:	4a64      	ldr	r2, [pc, #400]	; (8002830 <menu+0x135c>)
 80026a0:	2101      	movs	r1, #1
 80026a2:	2002      	movs	r0, #2
 80026a4:	f7fd ffe0 	bl	8000668 <lcd_print>
 80026a8:	e020      	b.n	80026ec <menu+0x1218>
			} else if(dilSecim == 1) {
 80026aa:	4b55      	ldr	r3, [pc, #340]	; (8002800 <menu+0x132c>)
 80026ac:	781b      	ldrb	r3, [r3, #0]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d11c      	bne.n	80026ec <menu+0x1218>
				lcd_print(2, 1, "Door Button ESP");
 80026b2:	4a60      	ldr	r2, [pc, #384]	; (8002834 <menu+0x1360>)
 80026b4:	2101      	movs	r1, #1
 80026b6:	2002      	movs	r0, #2
 80026b8:	f7fd ffd6 	bl	8000668 <lcd_print>
 80026bc:	e016      	b.n	80026ec <menu+0x1218>
			}
		} else if(kapiAcTipi == 1){
 80026be:	4b5b      	ldr	r3, [pc, #364]	; (800282c <menu+0x1358>)
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	2b01      	cmp	r3, #1
 80026c4:	d112      	bne.n	80026ec <menu+0x1218>
			if(dilSecim == 0){
 80026c6:	4b4e      	ldr	r3, [pc, #312]	; (8002800 <menu+0x132c>)
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d105      	bne.n	80026da <menu+0x1206>
				lcd_print(2, 1, "Kat butonu EXT  ");
 80026ce:	4a5a      	ldr	r2, [pc, #360]	; (8002838 <menu+0x1364>)
 80026d0:	2101      	movs	r1, #1
 80026d2:	2002      	movs	r0, #2
 80026d4:	f7fd ffc8 	bl	8000668 <lcd_print>
 80026d8:	e008      	b.n	80026ec <menu+0x1218>
			} else if(dilSecim == 1){
 80026da:	4b49      	ldr	r3, [pc, #292]	; (8002800 <menu+0x132c>)
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d104      	bne.n	80026ec <menu+0x1218>
				lcd_print(2, 1, "Floor button EXT");
 80026e2:	4a56      	ldr	r2, [pc, #344]	; (800283c <menu+0x1368>)
 80026e4:	2101      	movs	r1, #1
 80026e6:	2002      	movs	r0, #2
 80026e8:	f7fd ffbe 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80026ec:	2102      	movs	r1, #2
 80026ee:	4846      	ldr	r0, [pc, #280]	; (8002808 <menu+0x1334>)
 80026f0:	f007 faba 	bl	8009c68 <HAL_GPIO_ReadPin>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d115      	bne.n	8002726 <menu+0x1252>
 80026fa:	4b44      	ldr	r3, [pc, #272]	; (800280c <menu+0x1338>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	f083 0301 	eor.w	r3, r3, #1
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b00      	cmp	r3, #0
 8002706:	d00e      	beq.n	8002726 <menu+0x1252>
			kapiAcTipi = kapiAcTipi + 1;
 8002708:	4b48      	ldr	r3, [pc, #288]	; (800282c <menu+0x1358>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	3301      	adds	r3, #1
 800270e:	b2da      	uxtb	r2, r3
 8002710:	4b46      	ldr	r3, [pc, #280]	; (800282c <menu+0x1358>)
 8002712:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 8002714:	4b45      	ldr	r3, [pc, #276]	; (800282c <menu+0x1358>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d902      	bls.n	8002722 <menu+0x124e>
				kapiAcTipi = 0;
 800271c:	4b43      	ldr	r3, [pc, #268]	; (800282c <menu+0x1358>)
 800271e:	2200      	movs	r2, #0
 8002720:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002722:	f003 fc63 	bl	8005fec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002726:	2104      	movs	r1, #4
 8002728:	4837      	ldr	r0, [pc, #220]	; (8002808 <menu+0x1334>)
 800272a:	f007 fa9d 	bl	8009c68 <HAL_GPIO_ReadPin>
 800272e:	4603      	mov	r3, r0
 8002730:	2b01      	cmp	r3, #1
 8002732:	d115      	bne.n	8002760 <menu+0x128c>
 8002734:	4b35      	ldr	r3, [pc, #212]	; (800280c <menu+0x1338>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	f083 0301 	eor.w	r3, r3, #1
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00e      	beq.n	8002760 <menu+0x128c>
			kapiAcTipi = kapiAcTipi - 1;
 8002742:	4b3a      	ldr	r3, [pc, #232]	; (800282c <menu+0x1358>)
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	3b01      	subs	r3, #1
 8002748:	b2da      	uxtb	r2, r3
 800274a:	4b38      	ldr	r3, [pc, #224]	; (800282c <menu+0x1358>)
 800274c:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 800274e:	4b37      	ldr	r3, [pc, #220]	; (800282c <menu+0x1358>)
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d002      	beq.n	800275c <menu+0x1288>
		   		kapiAcTipi = 1;
 8002756:	4b35      	ldr	r3, [pc, #212]	; (800282c <menu+0x1358>)
 8002758:	2201      	movs	r2, #1
 800275a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800275c:	f003 fc46 	bl	8005fec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002760:	2108      	movs	r1, #8
 8002762:	4829      	ldr	r0, [pc, #164]	; (8002808 <menu+0x1334>)
 8002764:	f007 fa80 	bl	8009c68 <HAL_GPIO_ReadPin>
 8002768:	4603      	mov	r3, r0
 800276a:	2b01      	cmp	r3, #1
 800276c:	d10e      	bne.n	800278c <menu+0x12b8>
 800276e:	4b27      	ldr	r3, [pc, #156]	; (800280c <menu+0x1338>)
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	f083 0301 	eor.w	r3, r3, #1
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b00      	cmp	r3, #0
 800277a:	d007      	beq.n	800278c <menu+0x12b8>
			eepromData[36] = kapiAcTipi;
 800277c:	4b2b      	ldr	r3, [pc, #172]	; (800282c <menu+0x1358>)
 800277e:	781a      	ldrb	r2, [r3, #0]
 8002780:	4b24      	ldr	r3, [pc, #144]	; (8002814 <menu+0x1340>)
 8002782:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 8002786:	4b25      	ldr	r3, [pc, #148]	; (800281c <menu+0x1348>)
 8002788:	2201      	movs	r2, #1
 800278a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 800278c:	4b24      	ldr	r3, [pc, #144]	; (8002820 <menu+0x134c>)
 800278e:	781b      	ldrb	r3, [r3, #0]
 8002790:	2b09      	cmp	r3, #9
 8002792:	f040 80b9 	bne.w	8002908 <menu+0x1434>
		if(dilSecim == 0){
 8002796:	4b1a      	ldr	r3, [pc, #104]	; (8002800 <menu+0x132c>)
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d105      	bne.n	80027aa <menu+0x12d6>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 800279e:	4a28      	ldr	r2, [pc, #160]	; (8002840 <menu+0x136c>)
 80027a0:	2101      	movs	r1, #1
 80027a2:	2001      	movs	r0, #1
 80027a4:	f7fd ff60 	bl	8000668 <lcd_print>
 80027a8:	e008      	b.n	80027bc <menu+0x12e8>
		} else if(dilSecim == 1) {
 80027aa:	4b15      	ldr	r3, [pc, #84]	; (8002800 <menu+0x132c>)
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	2b01      	cmp	r3, #1
 80027b0:	d104      	bne.n	80027bc <menu+0x12e8>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 80027b2:	4a24      	ldr	r2, [pc, #144]	; (8002844 <menu+0x1370>)
 80027b4:	2101      	movs	r1, #1
 80027b6:	2001      	movs	r0, #1
 80027b8:	f7fd ff56 	bl	8000668 <lcd_print>
		}

		if(kapi1Tip == 0) {
 80027bc:	4b22      	ldr	r3, [pc, #136]	; (8002848 <menu+0x1374>)
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d105      	bne.n	80027d0 <menu+0x12fc>
			lcd_print(2, 1, "Prudhome        ");
 80027c4:	4a21      	ldr	r2, [pc, #132]	; (800284c <menu+0x1378>)
 80027c6:	2101      	movs	r1, #1
 80027c8:	2002      	movs	r0, #2
 80027ca:	f7fd ff4d 	bl	8000668 <lcd_print>
 80027ce:	e04c      	b.n	800286a <menu+0x1396>
		} else if(kapi1Tip == 1) {
 80027d0:	4b1d      	ldr	r3, [pc, #116]	; (8002848 <menu+0x1374>)
 80027d2:	781b      	ldrb	r3, [r3, #0]
 80027d4:	2b01      	cmp	r3, #1
 80027d6:	d13f      	bne.n	8002858 <menu+0x1384>
			if(dilSecim == 0){
 80027d8:	4b09      	ldr	r3, [pc, #36]	; (8002800 <menu+0x132c>)
 80027da:	781b      	ldrb	r3, [r3, #0]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d105      	bne.n	80027ec <menu+0x1318>
				lcd_print(2, 1, "Buton kontrollu");
 80027e0:	4a1b      	ldr	r2, [pc, #108]	; (8002850 <menu+0x137c>)
 80027e2:	2101      	movs	r1, #1
 80027e4:	2002      	movs	r0, #2
 80027e6:	f7fd ff3f 	bl	8000668 <lcd_print>
 80027ea:	e03e      	b.n	800286a <menu+0x1396>
			} else if(dilSecim == 1) {
 80027ec:	4b04      	ldr	r3, [pc, #16]	; (8002800 <menu+0x132c>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d13a      	bne.n	800286a <menu+0x1396>
				lcd_print(2, 1, "Button cntrolled");
 80027f4:	4a17      	ldr	r2, [pc, #92]	; (8002854 <menu+0x1380>)
 80027f6:	2101      	movs	r1, #1
 80027f8:	2002      	movs	r0, #2
 80027fa:	f7fd ff35 	bl	8000668 <lcd_print>
 80027fe:	e034      	b.n	800286a <menu+0x1396>
 8002800:	20000c6a 	.word	0x20000c6a
 8002804:	0800dd48 	.word	0x0800dd48
 8002808:	40010800 	.word	0x40010800
 800280c:	20000c78 	.word	0x20000c78
 8002810:	20000c51 	.word	0x20000c51
 8002814:	20000b38 	.word	0x20000b38
 8002818:	20000c4f 	.word	0x20000c4f
 800281c:	20000c75 	.word	0x20000c75
 8002820:	20000c49 	.word	0x20000c49
 8002824:	0800dd5c 	.word	0x0800dd5c
 8002828:	0800dd70 	.word	0x0800dd70
 800282c:	20000c55 	.word	0x20000c55
 8002830:	0800dd84 	.word	0x0800dd84
 8002834:	0800dd94 	.word	0x0800dd94
 8002838:	0800dda4 	.word	0x0800dda4
 800283c:	0800ddb8 	.word	0x0800ddb8
 8002840:	0800ddcc 	.word	0x0800ddcc
 8002844:	0800dde0 	.word	0x0800dde0
 8002848:	20000c52 	.word	0x20000c52
 800284c:	0800ddf4 	.word	0x0800ddf4
 8002850:	0800de08 	.word	0x0800de08
 8002854:	0800de18 	.word	0x0800de18
			}
		} else if(kapi1Tip == 2) {
 8002858:	4b8a      	ldr	r3, [pc, #552]	; (8002a84 <menu+0x15b0>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	2b02      	cmp	r3, #2
 800285e:	d104      	bne.n	800286a <menu+0x1396>
			lcd_print(2, 1, "Pizzato        ");
 8002860:	4a89      	ldr	r2, [pc, #548]	; (8002a88 <menu+0x15b4>)
 8002862:	2101      	movs	r1, #1
 8002864:	2002      	movs	r0, #2
 8002866:	f7fd feff 	bl	8000668 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800286a:	2102      	movs	r1, #2
 800286c:	4887      	ldr	r0, [pc, #540]	; (8002a8c <menu+0x15b8>)
 800286e:	f007 f9fb 	bl	8009c68 <HAL_GPIO_ReadPin>
 8002872:	4603      	mov	r3, r0
 8002874:	2b01      	cmp	r3, #1
 8002876:	d115      	bne.n	80028a4 <menu+0x13d0>
 8002878:	4b85      	ldr	r3, [pc, #532]	; (8002a90 <menu+0x15bc>)
 800287a:	781b      	ldrb	r3, [r3, #0]
 800287c:	f083 0301 	eor.w	r3, r3, #1
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d00e      	beq.n	80028a4 <menu+0x13d0>
			kapi1Tip = kapi1Tip + 1;
 8002886:	4b7f      	ldr	r3, [pc, #508]	; (8002a84 <menu+0x15b0>)
 8002888:	781b      	ldrb	r3, [r3, #0]
 800288a:	3301      	adds	r3, #1
 800288c:	b2da      	uxtb	r2, r3
 800288e:	4b7d      	ldr	r3, [pc, #500]	; (8002a84 <menu+0x15b0>)
 8002890:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 8002892:	4b7c      	ldr	r3, [pc, #496]	; (8002a84 <menu+0x15b0>)
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	2b02      	cmp	r3, #2
 8002898:	d902      	bls.n	80028a0 <menu+0x13cc>
				kapi1Tip = 0;
 800289a:	4b7a      	ldr	r3, [pc, #488]	; (8002a84 <menu+0x15b0>)
 800289c:	2200      	movs	r2, #0
 800289e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80028a0:	f003 fba4 	bl	8005fec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80028a4:	2104      	movs	r1, #4
 80028a6:	4879      	ldr	r0, [pc, #484]	; (8002a8c <menu+0x15b8>)
 80028a8:	f007 f9de 	bl	8009c68 <HAL_GPIO_ReadPin>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b01      	cmp	r3, #1
 80028b0:	d115      	bne.n	80028de <menu+0x140a>
 80028b2:	4b77      	ldr	r3, [pc, #476]	; (8002a90 <menu+0x15bc>)
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	f083 0301 	eor.w	r3, r3, #1
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d00e      	beq.n	80028de <menu+0x140a>
			kapi1Tip = kapi1Tip - 1;
 80028c0:	4b70      	ldr	r3, [pc, #448]	; (8002a84 <menu+0x15b0>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	3b01      	subs	r3, #1
 80028c6:	b2da      	uxtb	r2, r3
 80028c8:	4b6e      	ldr	r3, [pc, #440]	; (8002a84 <menu+0x15b0>)
 80028ca:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 80028cc:	4b6d      	ldr	r3, [pc, #436]	; (8002a84 <menu+0x15b0>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	2b03      	cmp	r3, #3
 80028d2:	d902      	bls.n	80028da <menu+0x1406>
		   		kapi1Tip = 2;
 80028d4:	4b6b      	ldr	r3, [pc, #428]	; (8002a84 <menu+0x15b0>)
 80028d6:	2202      	movs	r2, #2
 80028d8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80028da:	f003 fb87 	bl	8005fec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80028de:	2108      	movs	r1, #8
 80028e0:	486a      	ldr	r0, [pc, #424]	; (8002a8c <menu+0x15b8>)
 80028e2:	f007 f9c1 	bl	8009c68 <HAL_GPIO_ReadPin>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d10d      	bne.n	8002908 <menu+0x1434>
 80028ec:	4b68      	ldr	r3, [pc, #416]	; (8002a90 <menu+0x15bc>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	f083 0301 	eor.w	r3, r3, #1
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d006      	beq.n	8002908 <menu+0x1434>
			eepromData[8] = kapi1Tip;
 80028fa:	4b62      	ldr	r3, [pc, #392]	; (8002a84 <menu+0x15b0>)
 80028fc:	781a      	ldrb	r2, [r3, #0]
 80028fe:	4b65      	ldr	r3, [pc, #404]	; (8002a94 <menu+0x15c0>)
 8002900:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 8002902:	4b65      	ldr	r3, [pc, #404]	; (8002a98 <menu+0x15c4>)
 8002904:	2201      	movs	r2, #1
 8002906:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 8002908:	4b64      	ldr	r3, [pc, #400]	; (8002a9c <menu+0x15c8>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	2b0a      	cmp	r3, #10
 800290e:	d17f      	bne.n	8002a10 <menu+0x153c>
		if(dilSecim == 0) {
 8002910:	4b63      	ldr	r3, [pc, #396]	; (8002aa0 <menu+0x15cc>)
 8002912:	781b      	ldrb	r3, [r3, #0]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10a      	bne.n	800292e <menu+0x145a>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 8002918:	4a62      	ldr	r2, [pc, #392]	; (8002aa4 <menu+0x15d0>)
 800291a:	2101      	movs	r1, #1
 800291c:	2001      	movs	r0, #1
 800291e:	f7fd fea3 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002922:	4a61      	ldr	r2, [pc, #388]	; (8002aa8 <menu+0x15d4>)
 8002924:	2101      	movs	r1, #1
 8002926:	2002      	movs	r0, #2
 8002928:	f7fd fe9e 	bl	8000668 <lcd_print>
 800292c:	e00d      	b.n	800294a <menu+0x1476>
		} else if(dilSecim == 1) {
 800292e:	4b5c      	ldr	r3, [pc, #368]	; (8002aa0 <menu+0x15cc>)
 8002930:	781b      	ldrb	r3, [r3, #0]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d109      	bne.n	800294a <menu+0x1476>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 8002936:	4a5d      	ldr	r2, [pc, #372]	; (8002aac <menu+0x15d8>)
 8002938:	2101      	movs	r1, #1
 800293a:	2001      	movs	r0, #1
 800293c:	f7fd fe94 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002940:	4a5b      	ldr	r2, [pc, #364]	; (8002ab0 <menu+0x15dc>)
 8002942:	2101      	movs	r1, #1
 8002944:	2002      	movs	r0, #2
 8002946:	f7fd fe8f 	bl	8000668 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 800294a:	4b5a      	ldr	r3, [pc, #360]	; (8002ab4 <menu+0x15e0>)
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	220a      	movs	r2, #10
 8002950:	4959      	ldr	r1, [pc, #356]	; (8002ab8 <menu+0x15e4>)
 8002952:	4618      	mov	r0, r3
 8002954:	f00a f9b4 	bl	800ccc0 <itoa>
		lcd_print(2,16,snum);
 8002958:	4a57      	ldr	r2, [pc, #348]	; (8002ab8 <menu+0x15e4>)
 800295a:	2110      	movs	r1, #16
 800295c:	2002      	movs	r0, #2
 800295e:	f7fd fe83 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002962:	2102      	movs	r1, #2
 8002964:	4849      	ldr	r0, [pc, #292]	; (8002a8c <menu+0x15b8>)
 8002966:	f007 f97f 	bl	8009c68 <HAL_GPIO_ReadPin>
 800296a:	4603      	mov	r3, r0
 800296c:	2b01      	cmp	r3, #1
 800296e:	d119      	bne.n	80029a4 <menu+0x14d0>
 8002970:	4b47      	ldr	r3, [pc, #284]	; (8002a90 <menu+0x15bc>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	f083 0301 	eor.w	r3, r3, #1
 8002978:	b2db      	uxtb	r3, r3
 800297a:	2b00      	cmp	r3, #0
 800297c:	d012      	beq.n	80029a4 <menu+0x14d0>
 800297e:	4b41      	ldr	r3, [pc, #260]	; (8002a84 <menu+0x15b0>)
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d10e      	bne.n	80029a4 <menu+0x14d0>
			kapi1AcSure = kapi1AcSure + 1;
 8002986:	4b4b      	ldr	r3, [pc, #300]	; (8002ab4 <menu+0x15e0>)
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	3301      	adds	r3, #1
 800298c:	b2da      	uxtb	r2, r3
 800298e:	4b49      	ldr	r3, [pc, #292]	; (8002ab4 <menu+0x15e0>)
 8002990:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8002992:	4b48      	ldr	r3, [pc, #288]	; (8002ab4 <menu+0x15e0>)
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	2b05      	cmp	r3, #5
 8002998:	d902      	bls.n	80029a0 <menu+0x14cc>
				kapi1AcSure = 0;
 800299a:	4b46      	ldr	r3, [pc, #280]	; (8002ab4 <menu+0x15e0>)
 800299c:	2200      	movs	r2, #0
 800299e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80029a0:	f003 fb24 	bl	8005fec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 80029a4:	2104      	movs	r1, #4
 80029a6:	4839      	ldr	r0, [pc, #228]	; (8002a8c <menu+0x15b8>)
 80029a8:	f007 f95e 	bl	8009c68 <HAL_GPIO_ReadPin>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d119      	bne.n	80029e6 <menu+0x1512>
 80029b2:	4b37      	ldr	r3, [pc, #220]	; (8002a90 <menu+0x15bc>)
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	f083 0301 	eor.w	r3, r3, #1
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d012      	beq.n	80029e6 <menu+0x1512>
 80029c0:	4b30      	ldr	r3, [pc, #192]	; (8002a84 <menu+0x15b0>)
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d10e      	bne.n	80029e6 <menu+0x1512>
			kapi1AcSure = kapi1AcSure - 1;
 80029c8:	4b3a      	ldr	r3, [pc, #232]	; (8002ab4 <menu+0x15e0>)
 80029ca:	781b      	ldrb	r3, [r3, #0]
 80029cc:	3b01      	subs	r3, #1
 80029ce:	b2da      	uxtb	r2, r3
 80029d0:	4b38      	ldr	r3, [pc, #224]	; (8002ab4 <menu+0x15e0>)
 80029d2:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 80029d4:	4b37      	ldr	r3, [pc, #220]	; (8002ab4 <menu+0x15e0>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	2b06      	cmp	r3, #6
 80029da:	d902      	bls.n	80029e2 <menu+0x150e>
		   		kapi1AcSure = 5;
 80029dc:	4b35      	ldr	r3, [pc, #212]	; (8002ab4 <menu+0x15e0>)
 80029de:	2205      	movs	r2, #5
 80029e0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80029e2:	f003 fb03 	bl	8005fec <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80029e6:	2108      	movs	r1, #8
 80029e8:	4828      	ldr	r0, [pc, #160]	; (8002a8c <menu+0x15b8>)
 80029ea:	f007 f93d 	bl	8009c68 <HAL_GPIO_ReadPin>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d10d      	bne.n	8002a10 <menu+0x153c>
 80029f4:	4b26      	ldr	r3, [pc, #152]	; (8002a90 <menu+0x15bc>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	f083 0301 	eor.w	r3, r3, #1
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d006      	beq.n	8002a10 <menu+0x153c>
			eepromData[9] = kapi1AcSure;
 8002a02:	4b2c      	ldr	r3, [pc, #176]	; (8002ab4 <menu+0x15e0>)
 8002a04:	781a      	ldrb	r2, [r3, #0]
 8002a06:	4b23      	ldr	r3, [pc, #140]	; (8002a94 <menu+0x15c0>)
 8002a08:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8002a0a:	4b23      	ldr	r3, [pc, #140]	; (8002a98 <menu+0x15c4>)
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8002a10:	4b22      	ldr	r3, [pc, #136]	; (8002a9c <menu+0x15c8>)
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	2b0b      	cmp	r3, #11
 8002a16:	f040 80b5 	bne.w	8002b84 <menu+0x16b0>
		if(dilSecim == 0) {
 8002a1a:	4b21      	ldr	r3, [pc, #132]	; (8002aa0 <menu+0x15cc>)
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d105      	bne.n	8002a2e <menu+0x155a>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 8002a22:	4a26      	ldr	r2, [pc, #152]	; (8002abc <menu+0x15e8>)
 8002a24:	2101      	movs	r1, #1
 8002a26:	2001      	movs	r0, #1
 8002a28:	f7fd fe1e 	bl	8000668 <lcd_print>
 8002a2c:	e008      	b.n	8002a40 <menu+0x156c>
		} else if(dilSecim == 1) {
 8002a2e:	4b1c      	ldr	r3, [pc, #112]	; (8002aa0 <menu+0x15cc>)
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d104      	bne.n	8002a40 <menu+0x156c>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 8002a36:	4a22      	ldr	r2, [pc, #136]	; (8002ac0 <menu+0x15ec>)
 8002a38:	2101      	movs	r1, #1
 8002a3a:	2001      	movs	r0, #1
 8002a3c:	f7fd fe14 	bl	8000668 <lcd_print>
		}

		if(kapi2Tip == 0) {
 8002a40:	4b20      	ldr	r3, [pc, #128]	; (8002ac4 <menu+0x15f0>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d105      	bne.n	8002a54 <menu+0x1580>
			lcd_print(2, 1, "Prudhome        ");
 8002a48:	4a1f      	ldr	r2, [pc, #124]	; (8002ac8 <menu+0x15f4>)
 8002a4a:	2101      	movs	r1, #1
 8002a4c:	2002      	movs	r0, #2
 8002a4e:	f7fd fe0b 	bl	8000668 <lcd_print>
 8002a52:	e048      	b.n	8002ae6 <menu+0x1612>
		} else if(kapi2Tip == 1) {
 8002a54:	4b1b      	ldr	r3, [pc, #108]	; (8002ac4 <menu+0x15f0>)
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d13b      	bne.n	8002ad4 <menu+0x1600>
			if(dilSecim == 0) {
 8002a5c:	4b10      	ldr	r3, [pc, #64]	; (8002aa0 <menu+0x15cc>)
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d105      	bne.n	8002a70 <menu+0x159c>
				lcd_print(2, 1, "Buton kontrollu");
 8002a64:	4a19      	ldr	r2, [pc, #100]	; (8002acc <menu+0x15f8>)
 8002a66:	2101      	movs	r1, #1
 8002a68:	2002      	movs	r0, #2
 8002a6a:	f7fd fdfd 	bl	8000668 <lcd_print>
 8002a6e:	e03a      	b.n	8002ae6 <menu+0x1612>
			} else if(dilSecim == 1) {
 8002a70:	4b0b      	ldr	r3, [pc, #44]	; (8002aa0 <menu+0x15cc>)
 8002a72:	781b      	ldrb	r3, [r3, #0]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d136      	bne.n	8002ae6 <menu+0x1612>
				lcd_print(2, 1, "Button cntrolled");
 8002a78:	4a15      	ldr	r2, [pc, #84]	; (8002ad0 <menu+0x15fc>)
 8002a7a:	2101      	movs	r1, #1
 8002a7c:	2002      	movs	r0, #2
 8002a7e:	f7fd fdf3 	bl	8000668 <lcd_print>
 8002a82:	e030      	b.n	8002ae6 <menu+0x1612>
 8002a84:	20000c52 	.word	0x20000c52
 8002a88:	0800de2c 	.word	0x0800de2c
 8002a8c:	40010800 	.word	0x40010800
 8002a90:	20000c78 	.word	0x20000c78
 8002a94:	20000b38 	.word	0x20000b38
 8002a98:	20000c75 	.word	0x20000c75
 8002a9c:	20000c49 	.word	0x20000c49
 8002aa0:	20000c6a 	.word	0x20000c6a
 8002aa4:	0800de3c 	.word	0x0800de3c
 8002aa8:	0800de50 	.word	0x0800de50
 8002aac:	0800de60 	.word	0x0800de60
 8002ab0:	0800de74 	.word	0x0800de74
 8002ab4:	20000c62 	.word	0x20000c62
 8002ab8:	20000bcc 	.word	0x20000bcc
 8002abc:	0800de84 	.word	0x0800de84
 8002ac0:	0800de98 	.word	0x0800de98
 8002ac4:	20000c53 	.word	0x20000c53
 8002ac8:	0800ddf4 	.word	0x0800ddf4
 8002acc:	0800de08 	.word	0x0800de08
 8002ad0:	0800de18 	.word	0x0800de18
			}
		} else if(kapi2Tip == 2) {
 8002ad4:	4b8a      	ldr	r3, [pc, #552]	; (8002d00 <menu+0x182c>)
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d104      	bne.n	8002ae6 <menu+0x1612>
			lcd_print(2, 1, "Pizzato        ");
 8002adc:	4a89      	ldr	r2, [pc, #548]	; (8002d04 <menu+0x1830>)
 8002ade:	2101      	movs	r1, #1
 8002ae0:	2002      	movs	r0, #2
 8002ae2:	f7fd fdc1 	bl	8000668 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ae6:	2102      	movs	r1, #2
 8002ae8:	4887      	ldr	r0, [pc, #540]	; (8002d08 <menu+0x1834>)
 8002aea:	f007 f8bd 	bl	8009c68 <HAL_GPIO_ReadPin>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b01      	cmp	r3, #1
 8002af2:	d115      	bne.n	8002b20 <menu+0x164c>
 8002af4:	4b85      	ldr	r3, [pc, #532]	; (8002d0c <menu+0x1838>)
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	f083 0301 	eor.w	r3, r3, #1
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00e      	beq.n	8002b20 <menu+0x164c>
			kapi2Tip = kapi2Tip + 1;
 8002b02:	4b7f      	ldr	r3, [pc, #508]	; (8002d00 <menu+0x182c>)
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	3301      	adds	r3, #1
 8002b08:	b2da      	uxtb	r2, r3
 8002b0a:	4b7d      	ldr	r3, [pc, #500]	; (8002d00 <menu+0x182c>)
 8002b0c:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8002b0e:	4b7c      	ldr	r3, [pc, #496]	; (8002d00 <menu+0x182c>)
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	2b02      	cmp	r3, #2
 8002b14:	d902      	bls.n	8002b1c <menu+0x1648>
				kapi2Tip = 0;
 8002b16:	4b7a      	ldr	r3, [pc, #488]	; (8002d00 <menu+0x182c>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002b1c:	f003 fa66 	bl	8005fec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b20:	2104      	movs	r1, #4
 8002b22:	4879      	ldr	r0, [pc, #484]	; (8002d08 <menu+0x1834>)
 8002b24:	f007 f8a0 	bl	8009c68 <HAL_GPIO_ReadPin>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d115      	bne.n	8002b5a <menu+0x1686>
 8002b2e:	4b77      	ldr	r3, [pc, #476]	; (8002d0c <menu+0x1838>)
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	f083 0301 	eor.w	r3, r3, #1
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00e      	beq.n	8002b5a <menu+0x1686>
			kapi2Tip = kapi2Tip - 1;
 8002b3c:	4b70      	ldr	r3, [pc, #448]	; (8002d00 <menu+0x182c>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	3b01      	subs	r3, #1
 8002b42:	b2da      	uxtb	r2, r3
 8002b44:	4b6e      	ldr	r3, [pc, #440]	; (8002d00 <menu+0x182c>)
 8002b46:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002b48:	4b6d      	ldr	r3, [pc, #436]	; (8002d00 <menu+0x182c>)
 8002b4a:	781b      	ldrb	r3, [r3, #0]
 8002b4c:	2b03      	cmp	r3, #3
 8002b4e:	d902      	bls.n	8002b56 <menu+0x1682>
		   		kapi2Tip = 2;
 8002b50:	4b6b      	ldr	r3, [pc, #428]	; (8002d00 <menu+0x182c>)
 8002b52:	2202      	movs	r2, #2
 8002b54:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002b56:	f003 fa49 	bl	8005fec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b5a:	2108      	movs	r1, #8
 8002b5c:	486a      	ldr	r0, [pc, #424]	; (8002d08 <menu+0x1834>)
 8002b5e:	f007 f883 	bl	8009c68 <HAL_GPIO_ReadPin>
 8002b62:	4603      	mov	r3, r0
 8002b64:	2b01      	cmp	r3, #1
 8002b66:	d10d      	bne.n	8002b84 <menu+0x16b0>
 8002b68:	4b68      	ldr	r3, [pc, #416]	; (8002d0c <menu+0x1838>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	f083 0301 	eor.w	r3, r3, #1
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d006      	beq.n	8002b84 <menu+0x16b0>
			eepromData[10] = kapi2Tip;
 8002b76:	4b62      	ldr	r3, [pc, #392]	; (8002d00 <menu+0x182c>)
 8002b78:	781a      	ldrb	r2, [r3, #0]
 8002b7a:	4b65      	ldr	r3, [pc, #404]	; (8002d10 <menu+0x183c>)
 8002b7c:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8002b7e:	4b65      	ldr	r3, [pc, #404]	; (8002d14 <menu+0x1840>)
 8002b80:	2201      	movs	r2, #1
 8002b82:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002b84:	4b64      	ldr	r3, [pc, #400]	; (8002d18 <menu+0x1844>)
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	2b0c      	cmp	r3, #12
 8002b8a:	d17f      	bne.n	8002c8c <menu+0x17b8>
		if(dilSecim == 0) {
 8002b8c:	4b63      	ldr	r3, [pc, #396]	; (8002d1c <menu+0x1848>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d10a      	bne.n	8002baa <menu+0x16d6>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8002b94:	4a62      	ldr	r2, [pc, #392]	; (8002d20 <menu+0x184c>)
 8002b96:	2101      	movs	r1, #1
 8002b98:	2001      	movs	r0, #1
 8002b9a:	f7fd fd65 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002b9e:	4a61      	ldr	r2, [pc, #388]	; (8002d24 <menu+0x1850>)
 8002ba0:	2101      	movs	r1, #1
 8002ba2:	2002      	movs	r0, #2
 8002ba4:	f7fd fd60 	bl	8000668 <lcd_print>
 8002ba8:	e00d      	b.n	8002bc6 <menu+0x16f2>
		} else if(dilSecim == 1) {
 8002baa:	4b5c      	ldr	r3, [pc, #368]	; (8002d1c <menu+0x1848>)
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d109      	bne.n	8002bc6 <menu+0x16f2>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8002bb2:	4a5d      	ldr	r2, [pc, #372]	; (8002d28 <menu+0x1854>)
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	2001      	movs	r0, #1
 8002bb8:	f7fd fd56 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002bbc:	4a5b      	ldr	r2, [pc, #364]	; (8002d2c <menu+0x1858>)
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	2002      	movs	r0, #2
 8002bc2:	f7fd fd51 	bl	8000668 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8002bc6:	4b5a      	ldr	r3, [pc, #360]	; (8002d30 <menu+0x185c>)
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	220a      	movs	r2, #10
 8002bcc:	4959      	ldr	r1, [pc, #356]	; (8002d34 <menu+0x1860>)
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f00a f876 	bl	800ccc0 <itoa>
		lcd_print(2,16,snum);
 8002bd4:	4a57      	ldr	r2, [pc, #348]	; (8002d34 <menu+0x1860>)
 8002bd6:	2110      	movs	r1, #16
 8002bd8:	2002      	movs	r0, #2
 8002bda:	f7fd fd45 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002bde:	2102      	movs	r1, #2
 8002be0:	4849      	ldr	r0, [pc, #292]	; (8002d08 <menu+0x1834>)
 8002be2:	f007 f841 	bl	8009c68 <HAL_GPIO_ReadPin>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d119      	bne.n	8002c20 <menu+0x174c>
 8002bec:	4b47      	ldr	r3, [pc, #284]	; (8002d0c <menu+0x1838>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	f083 0301 	eor.w	r3, r3, #1
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d012      	beq.n	8002c20 <menu+0x174c>
 8002bfa:	4b41      	ldr	r3, [pc, #260]	; (8002d00 <menu+0x182c>)
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d10e      	bne.n	8002c20 <menu+0x174c>
			kapi2AcSure = kapi2AcSure + 1;
 8002c02:	4b4b      	ldr	r3, [pc, #300]	; (8002d30 <menu+0x185c>)
 8002c04:	781b      	ldrb	r3, [r3, #0]
 8002c06:	3301      	adds	r3, #1
 8002c08:	b2da      	uxtb	r2, r3
 8002c0a:	4b49      	ldr	r3, [pc, #292]	; (8002d30 <menu+0x185c>)
 8002c0c:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002c0e:	4b48      	ldr	r3, [pc, #288]	; (8002d30 <menu+0x185c>)
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	2b05      	cmp	r3, #5
 8002c14:	d902      	bls.n	8002c1c <menu+0x1748>
				kapi2AcSure = 0;
 8002c16:	4b46      	ldr	r3, [pc, #280]	; (8002d30 <menu+0x185c>)
 8002c18:	2200      	movs	r2, #0
 8002c1a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002c1c:	f003 f9e6 	bl	8005fec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002c20:	2104      	movs	r1, #4
 8002c22:	4839      	ldr	r0, [pc, #228]	; (8002d08 <menu+0x1834>)
 8002c24:	f007 f820 	bl	8009c68 <HAL_GPIO_ReadPin>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d119      	bne.n	8002c62 <menu+0x178e>
 8002c2e:	4b37      	ldr	r3, [pc, #220]	; (8002d0c <menu+0x1838>)
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	f083 0301 	eor.w	r3, r3, #1
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d012      	beq.n	8002c62 <menu+0x178e>
 8002c3c:	4b30      	ldr	r3, [pc, #192]	; (8002d00 <menu+0x182c>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d10e      	bne.n	8002c62 <menu+0x178e>
			kapi2AcSure = kapi2AcSure - 1;
 8002c44:	4b3a      	ldr	r3, [pc, #232]	; (8002d30 <menu+0x185c>)
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	3b01      	subs	r3, #1
 8002c4a:	b2da      	uxtb	r2, r3
 8002c4c:	4b38      	ldr	r3, [pc, #224]	; (8002d30 <menu+0x185c>)
 8002c4e:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002c50:	4b37      	ldr	r3, [pc, #220]	; (8002d30 <menu+0x185c>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b06      	cmp	r3, #6
 8002c56:	d902      	bls.n	8002c5e <menu+0x178a>
		   		kapi2AcSure = 5;
 8002c58:	4b35      	ldr	r3, [pc, #212]	; (8002d30 <menu+0x185c>)
 8002c5a:	2205      	movs	r2, #5
 8002c5c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002c5e:	f003 f9c5 	bl	8005fec <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c62:	2108      	movs	r1, #8
 8002c64:	4828      	ldr	r0, [pc, #160]	; (8002d08 <menu+0x1834>)
 8002c66:	f006 ffff 	bl	8009c68 <HAL_GPIO_ReadPin>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d10d      	bne.n	8002c8c <menu+0x17b8>
 8002c70:	4b26      	ldr	r3, [pc, #152]	; (8002d0c <menu+0x1838>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	f083 0301 	eor.w	r3, r3, #1
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d006      	beq.n	8002c8c <menu+0x17b8>
			eepromData[11] = kapi2AcSure;
 8002c7e:	4b2c      	ldr	r3, [pc, #176]	; (8002d30 <menu+0x185c>)
 8002c80:	781a      	ldrb	r2, [r3, #0]
 8002c82:	4b23      	ldr	r3, [pc, #140]	; (8002d10 <menu+0x183c>)
 8002c84:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8002c86:	4b23      	ldr	r3, [pc, #140]	; (8002d14 <menu+0x1840>)
 8002c88:	2201      	movs	r2, #1
 8002c8a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8002c8c:	4b22      	ldr	r3, [pc, #136]	; (8002d18 <menu+0x1844>)
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	2b0d      	cmp	r3, #13
 8002c92:	f040 80b5 	bne.w	8002e00 <menu+0x192c>
		if(dilSecim == 0) {
 8002c96:	4b21      	ldr	r3, [pc, #132]	; (8002d1c <menu+0x1848>)
 8002c98:	781b      	ldrb	r3, [r3, #0]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d105      	bne.n	8002caa <menu+0x17d6>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 8002c9e:	4a26      	ldr	r2, [pc, #152]	; (8002d38 <menu+0x1864>)
 8002ca0:	2101      	movs	r1, #1
 8002ca2:	2001      	movs	r0, #1
 8002ca4:	f7fd fce0 	bl	8000668 <lcd_print>
 8002ca8:	e008      	b.n	8002cbc <menu+0x17e8>
		} else if(dilSecim == 1){
 8002caa:	4b1c      	ldr	r3, [pc, #112]	; (8002d1c <menu+0x1848>)
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d104      	bne.n	8002cbc <menu+0x17e8>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8002cb2:	4a22      	ldr	r2, [pc, #136]	; (8002d3c <menu+0x1868>)
 8002cb4:	2101      	movs	r1, #1
 8002cb6:	2001      	movs	r0, #1
 8002cb8:	f7fd fcd6 	bl	8000668 <lcd_print>
		}

		if(kapitablaTip == 0) {
 8002cbc:	4b20      	ldr	r3, [pc, #128]	; (8002d40 <menu+0x186c>)
 8002cbe:	781b      	ldrb	r3, [r3, #0]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d105      	bne.n	8002cd0 <menu+0x17fc>
			lcd_print(2, 1, "Prudhome        ");
 8002cc4:	4a1f      	ldr	r2, [pc, #124]	; (8002d44 <menu+0x1870>)
 8002cc6:	2101      	movs	r1, #1
 8002cc8:	2002      	movs	r0, #2
 8002cca:	f7fd fccd 	bl	8000668 <lcd_print>
 8002cce:	e048      	b.n	8002d62 <menu+0x188e>
		} else if(kapitablaTip == 1) {
 8002cd0:	4b1b      	ldr	r3, [pc, #108]	; (8002d40 <menu+0x186c>)
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	2b01      	cmp	r3, #1
 8002cd6:	d13b      	bne.n	8002d50 <menu+0x187c>
			if(dilSecim == 0) {
 8002cd8:	4b10      	ldr	r3, [pc, #64]	; (8002d1c <menu+0x1848>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d105      	bne.n	8002cec <menu+0x1818>
				lcd_print(2, 1, "Buton kontrollu");
 8002ce0:	4a19      	ldr	r2, [pc, #100]	; (8002d48 <menu+0x1874>)
 8002ce2:	2101      	movs	r1, #1
 8002ce4:	2002      	movs	r0, #2
 8002ce6:	f7fd fcbf 	bl	8000668 <lcd_print>
 8002cea:	e03a      	b.n	8002d62 <menu+0x188e>
			} else if(dilSecim == 1) {
 8002cec:	4b0b      	ldr	r3, [pc, #44]	; (8002d1c <menu+0x1848>)
 8002cee:	781b      	ldrb	r3, [r3, #0]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d136      	bne.n	8002d62 <menu+0x188e>
				lcd_print(2, 1, "Button cntrolled");
 8002cf4:	4a15      	ldr	r2, [pc, #84]	; (8002d4c <menu+0x1878>)
 8002cf6:	2101      	movs	r1, #1
 8002cf8:	2002      	movs	r0, #2
 8002cfa:	f7fd fcb5 	bl	8000668 <lcd_print>
 8002cfe:	e030      	b.n	8002d62 <menu+0x188e>
 8002d00:	20000c53 	.word	0x20000c53
 8002d04:	0800de2c 	.word	0x0800de2c
 8002d08:	40010800 	.word	0x40010800
 8002d0c:	20000c78 	.word	0x20000c78
 8002d10:	20000b38 	.word	0x20000b38
 8002d14:	20000c75 	.word	0x20000c75
 8002d18:	20000c49 	.word	0x20000c49
 8002d1c:	20000c6a 	.word	0x20000c6a
 8002d20:	0800deac 	.word	0x0800deac
 8002d24:	0800de50 	.word	0x0800de50
 8002d28:	0800dec0 	.word	0x0800dec0
 8002d2c:	0800de74 	.word	0x0800de74
 8002d30:	20000c63 	.word	0x20000c63
 8002d34:	20000bcc 	.word	0x20000bcc
 8002d38:	0800ded4 	.word	0x0800ded4
 8002d3c:	0800dee8 	.word	0x0800dee8
 8002d40:	20000c54 	.word	0x20000c54
 8002d44:	0800ddf4 	.word	0x0800ddf4
 8002d48:	0800de08 	.word	0x0800de08
 8002d4c:	0800de18 	.word	0x0800de18
			}
		} else if(kapitablaTip == 2) {
 8002d50:	4b5b      	ldr	r3, [pc, #364]	; (8002ec0 <menu+0x19ec>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d104      	bne.n	8002d62 <menu+0x188e>
			lcd_print(2, 1, "Pizzato        ");
 8002d58:	4a5a      	ldr	r2, [pc, #360]	; (8002ec4 <menu+0x19f0>)
 8002d5a:	2101      	movs	r1, #1
 8002d5c:	2002      	movs	r0, #2
 8002d5e:	f7fd fc83 	bl	8000668 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d62:	2102      	movs	r1, #2
 8002d64:	4858      	ldr	r0, [pc, #352]	; (8002ec8 <menu+0x19f4>)
 8002d66:	f006 ff7f 	bl	8009c68 <HAL_GPIO_ReadPin>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	d115      	bne.n	8002d9c <menu+0x18c8>
 8002d70:	4b56      	ldr	r3, [pc, #344]	; (8002ecc <menu+0x19f8>)
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	f083 0301 	eor.w	r3, r3, #1
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d00e      	beq.n	8002d9c <menu+0x18c8>
			kapitablaTip = kapitablaTip + 1;
 8002d7e:	4b50      	ldr	r3, [pc, #320]	; (8002ec0 <menu+0x19ec>)
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	3301      	adds	r3, #1
 8002d84:	b2da      	uxtb	r2, r3
 8002d86:	4b4e      	ldr	r3, [pc, #312]	; (8002ec0 <menu+0x19ec>)
 8002d88:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002d8a:	4b4d      	ldr	r3, [pc, #308]	; (8002ec0 <menu+0x19ec>)
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d902      	bls.n	8002d98 <menu+0x18c4>
				kapitablaTip = 0;
 8002d92:	4b4b      	ldr	r3, [pc, #300]	; (8002ec0 <menu+0x19ec>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002d98:	f003 f928 	bl	8005fec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d9c:	2104      	movs	r1, #4
 8002d9e:	484a      	ldr	r0, [pc, #296]	; (8002ec8 <menu+0x19f4>)
 8002da0:	f006 ff62 	bl	8009c68 <HAL_GPIO_ReadPin>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d115      	bne.n	8002dd6 <menu+0x1902>
 8002daa:	4b48      	ldr	r3, [pc, #288]	; (8002ecc <menu+0x19f8>)
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	f083 0301 	eor.w	r3, r3, #1
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00e      	beq.n	8002dd6 <menu+0x1902>
			kapitablaTip = kapitablaTip - 1;
 8002db8:	4b41      	ldr	r3, [pc, #260]	; (8002ec0 <menu+0x19ec>)
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	b2da      	uxtb	r2, r3
 8002dc0:	4b3f      	ldr	r3, [pc, #252]	; (8002ec0 <menu+0x19ec>)
 8002dc2:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002dc4:	4b3e      	ldr	r3, [pc, #248]	; (8002ec0 <menu+0x19ec>)
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	2b03      	cmp	r3, #3
 8002dca:	d902      	bls.n	8002dd2 <menu+0x18fe>
		   		kapitablaTip = 2;
 8002dcc:	4b3c      	ldr	r3, [pc, #240]	; (8002ec0 <menu+0x19ec>)
 8002dce:	2202      	movs	r2, #2
 8002dd0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002dd2:	f003 f90b 	bl	8005fec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002dd6:	2108      	movs	r1, #8
 8002dd8:	483b      	ldr	r0, [pc, #236]	; (8002ec8 <menu+0x19f4>)
 8002dda:	f006 ff45 	bl	8009c68 <HAL_GPIO_ReadPin>
 8002dde:	4603      	mov	r3, r0
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d10d      	bne.n	8002e00 <menu+0x192c>
 8002de4:	4b39      	ldr	r3, [pc, #228]	; (8002ecc <menu+0x19f8>)
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	f083 0301 	eor.w	r3, r3, #1
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d006      	beq.n	8002e00 <menu+0x192c>
			eepromData[12] = kapitablaTip;
 8002df2:	4b33      	ldr	r3, [pc, #204]	; (8002ec0 <menu+0x19ec>)
 8002df4:	781a      	ldrb	r2, [r3, #0]
 8002df6:	4b36      	ldr	r3, [pc, #216]	; (8002ed0 <menu+0x19fc>)
 8002df8:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002dfa:	4b36      	ldr	r3, [pc, #216]	; (8002ed4 <menu+0x1a00>)
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002e00:	4b35      	ldr	r3, [pc, #212]	; (8002ed8 <menu+0x1a04>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	2b0e      	cmp	r3, #14
 8002e06:	f040 80f2 	bne.w	8002fee <menu+0x1b1a>
		if(dilSecim == 0) {
 8002e0a:	4b34      	ldr	r3, [pc, #208]	; (8002edc <menu+0x1a08>)
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d105      	bne.n	8002e1e <menu+0x194a>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8002e12:	4a33      	ldr	r2, [pc, #204]	; (8002ee0 <menu+0x1a0c>)
 8002e14:	2101      	movs	r1, #1
 8002e16:	2001      	movs	r0, #1
 8002e18:	f7fd fc26 	bl	8000668 <lcd_print>
 8002e1c:	e008      	b.n	8002e30 <menu+0x195c>
		} else if(dilSecim == 1) {
 8002e1e:	4b2f      	ldr	r3, [pc, #188]	; (8002edc <menu+0x1a08>)
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d104      	bne.n	8002e30 <menu+0x195c>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8002e26:	4a2f      	ldr	r2, [pc, #188]	; (8002ee4 <menu+0x1a10>)
 8002e28:	2101      	movs	r1, #1
 8002e2a:	2001      	movs	r0, #1
 8002e2c:	f7fd fc1c 	bl	8000668 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002e30:	4b2d      	ldr	r3, [pc, #180]	; (8002ee8 <menu+0x1a14>)
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d113      	bne.n	8002e60 <menu+0x198c>
			if(dilSecim == 0){
 8002e38:	4b28      	ldr	r3, [pc, #160]	; (8002edc <menu+0x1a08>)
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d105      	bne.n	8002e4c <menu+0x1978>
				lcd_print(2, 1, "1. Katta ac    ");
 8002e40:	4a2a      	ldr	r2, [pc, #168]	; (8002eec <menu+0x1a18>)
 8002e42:	2101      	movs	r1, #1
 8002e44:	2002      	movs	r0, #2
 8002e46:	f7fd fc0f 	bl	8000668 <lcd_print>
 8002e4a:	e071      	b.n	8002f30 <menu+0x1a5c>
			} else if(dilSecim == 1) {
 8002e4c:	4b23      	ldr	r3, [pc, #140]	; (8002edc <menu+0x1a08>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d16d      	bne.n	8002f30 <menu+0x1a5c>
				lcd_print(2, 1, "1. Floor open  ");
 8002e54:	4a26      	ldr	r2, [pc, #152]	; (8002ef0 <menu+0x1a1c>)
 8002e56:	2101      	movs	r1, #1
 8002e58:	2002      	movs	r0, #2
 8002e5a:	f7fd fc05 	bl	8000668 <lcd_print>
 8002e5e:	e067      	b.n	8002f30 <menu+0x1a5c>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002e60:	4b21      	ldr	r3, [pc, #132]	; (8002ee8 <menu+0x1a14>)
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	2b01      	cmp	r3, #1
 8002e66:	d112      	bne.n	8002e8e <menu+0x19ba>
			if(dilSecim == 0){
 8002e68:	4b1c      	ldr	r3, [pc, #112]	; (8002edc <menu+0x1a08>)
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d104      	bne.n	8002e7a <menu+0x19a6>
				lcd_print(2, 1, "2. Katta ac    ");
 8002e70:	4a20      	ldr	r2, [pc, #128]	; (8002ef4 <menu+0x1a20>)
 8002e72:	2101      	movs	r1, #1
 8002e74:	2002      	movs	r0, #2
 8002e76:	f7fd fbf7 	bl	8000668 <lcd_print>
			}
			if(dilSecim == 1){
 8002e7a:	4b18      	ldr	r3, [pc, #96]	; (8002edc <menu+0x1a08>)
 8002e7c:	781b      	ldrb	r3, [r3, #0]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d156      	bne.n	8002f30 <menu+0x1a5c>
				lcd_print(2, 1, "2. Floor open  ");
 8002e82:	4a1d      	ldr	r2, [pc, #116]	; (8002ef8 <menu+0x1a24>)
 8002e84:	2101      	movs	r1, #1
 8002e86:	2002      	movs	r0, #2
 8002e88:	f7fd fbee 	bl	8000668 <lcd_print>
 8002e8c:	e050      	b.n	8002f30 <menu+0x1a5c>
			}
		} else if(kapiTablaAcKonum == 2) {
 8002e8e:	4b16      	ldr	r3, [pc, #88]	; (8002ee8 <menu+0x1a14>)
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d136      	bne.n	8002f04 <menu+0x1a30>
			if(dilSecim == 0){
 8002e96:	4b11      	ldr	r3, [pc, #68]	; (8002edc <menu+0x1a08>)
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d105      	bne.n	8002eaa <menu+0x19d6>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8002e9e:	4a17      	ldr	r2, [pc, #92]	; (8002efc <menu+0x1a28>)
 8002ea0:	2101      	movs	r1, #1
 8002ea2:	2002      	movs	r0, #2
 8002ea4:	f7fd fbe0 	bl	8000668 <lcd_print>
 8002ea8:	e042      	b.n	8002f30 <menu+0x1a5c>
			} else if(dilSecim == 1) {
 8002eaa:	4b0c      	ldr	r3, [pc, #48]	; (8002edc <menu+0x1a08>)
 8002eac:	781b      	ldrb	r3, [r3, #0]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d13e      	bne.n	8002f30 <menu+0x1a5c>
				lcd_print(2, 1, "1.+2. Floor open");
 8002eb2:	4a13      	ldr	r2, [pc, #76]	; (8002f00 <menu+0x1a2c>)
 8002eb4:	2101      	movs	r1, #1
 8002eb6:	2002      	movs	r0, #2
 8002eb8:	f7fd fbd6 	bl	8000668 <lcd_print>
 8002ebc:	e038      	b.n	8002f30 <menu+0x1a5c>
 8002ebe:	bf00      	nop
 8002ec0:	20000c54 	.word	0x20000c54
 8002ec4:	0800de2c 	.word	0x0800de2c
 8002ec8:	40010800 	.word	0x40010800
 8002ecc:	20000c78 	.word	0x20000c78
 8002ed0:	20000b38 	.word	0x20000b38
 8002ed4:	20000c75 	.word	0x20000c75
 8002ed8:	20000c49 	.word	0x20000c49
 8002edc:	20000c6a 	.word	0x20000c6a
 8002ee0:	0800defc 	.word	0x0800defc
 8002ee4:	0800df10 	.word	0x0800df10
 8002ee8:	20000c56 	.word	0x20000c56
 8002eec:	0800df24 	.word	0x0800df24
 8002ef0:	0800df34 	.word	0x0800df34
 8002ef4:	0800df44 	.word	0x0800df44
 8002ef8:	0800df54 	.word	0x0800df54
 8002efc:	0800df64 	.word	0x0800df64
 8002f00:	0800df78 	.word	0x0800df78
			}
		} else if(kapiTablaAcKonum == 3) {
 8002f04:	4b9b      	ldr	r3, [pc, #620]	; (8003174 <menu+0x1ca0>)
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	2b03      	cmp	r3, #3
 8002f0a:	d111      	bne.n	8002f30 <menu+0x1a5c>
			if(dilSecim == 0) {
 8002f0c:	4b9a      	ldr	r3, [pc, #616]	; (8003178 <menu+0x1ca4>)
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d104      	bne.n	8002f1e <menu+0x1a4a>
				lcd_print(2, 1, "Pasif           ");
 8002f14:	4a99      	ldr	r2, [pc, #612]	; (800317c <menu+0x1ca8>)
 8002f16:	2101      	movs	r1, #1
 8002f18:	2002      	movs	r0, #2
 8002f1a:	f7fd fba5 	bl	8000668 <lcd_print>
			}
			if(dilSecim == 1) {
 8002f1e:	4b96      	ldr	r3, [pc, #600]	; (8003178 <menu+0x1ca4>)
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d104      	bne.n	8002f30 <menu+0x1a5c>
				lcd_print(2, 1, "Passive         ");
 8002f26:	4a96      	ldr	r2, [pc, #600]	; (8003180 <menu+0x1cac>)
 8002f28:	2101      	movs	r1, #1
 8002f2a:	2002      	movs	r0, #2
 8002f2c:	f7fd fb9c 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f30:	2102      	movs	r1, #2
 8002f32:	4894      	ldr	r0, [pc, #592]	; (8003184 <menu+0x1cb0>)
 8002f34:	f006 fe98 	bl	8009c68 <HAL_GPIO_ReadPin>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d115      	bne.n	8002f6a <menu+0x1a96>
 8002f3e:	4b92      	ldr	r3, [pc, #584]	; (8003188 <menu+0x1cb4>)
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	f083 0301 	eor.w	r3, r3, #1
 8002f46:	b2db      	uxtb	r3, r3
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d00e      	beq.n	8002f6a <menu+0x1a96>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002f4c:	4b89      	ldr	r3, [pc, #548]	; (8003174 <menu+0x1ca0>)
 8002f4e:	781b      	ldrb	r3, [r3, #0]
 8002f50:	3301      	adds	r3, #1
 8002f52:	b2da      	uxtb	r2, r3
 8002f54:	4b87      	ldr	r3, [pc, #540]	; (8003174 <menu+0x1ca0>)
 8002f56:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002f58:	4b86      	ldr	r3, [pc, #536]	; (8003174 <menu+0x1ca0>)
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	2b02      	cmp	r3, #2
 8002f5e:	d902      	bls.n	8002f66 <menu+0x1a92>
				kapiTablaAcKonum = 0;
 8002f60:	4b84      	ldr	r3, [pc, #528]	; (8003174 <menu+0x1ca0>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f66:	f003 f841 	bl	8005fec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f6a:	2104      	movs	r1, #4
 8002f6c:	4885      	ldr	r0, [pc, #532]	; (8003184 <menu+0x1cb0>)
 8002f6e:	f006 fe7b 	bl	8009c68 <HAL_GPIO_ReadPin>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b01      	cmp	r3, #1
 8002f76:	d115      	bne.n	8002fa4 <menu+0x1ad0>
 8002f78:	4b83      	ldr	r3, [pc, #524]	; (8003188 <menu+0x1cb4>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	f083 0301 	eor.w	r3, r3, #1
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00e      	beq.n	8002fa4 <menu+0x1ad0>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002f86:	4b7b      	ldr	r3, [pc, #492]	; (8003174 <menu+0x1ca0>)
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	b2da      	uxtb	r2, r3
 8002f8e:	4b79      	ldr	r3, [pc, #484]	; (8003174 <menu+0x1ca0>)
 8002f90:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002f92:	4b78      	ldr	r3, [pc, #480]	; (8003174 <menu+0x1ca0>)
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	2b03      	cmp	r3, #3
 8002f98:	d902      	bls.n	8002fa0 <menu+0x1acc>
		   		kapiTablaAcKonum = 2;
 8002f9a:	4b76      	ldr	r3, [pc, #472]	; (8003174 <menu+0x1ca0>)
 8002f9c:	2202      	movs	r2, #2
 8002f9e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002fa0:	f003 f824 	bl	8005fec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002fa4:	2108      	movs	r1, #8
 8002fa6:	4877      	ldr	r0, [pc, #476]	; (8003184 <menu+0x1cb0>)
 8002fa8:	f006 fe5e 	bl	8009c68 <HAL_GPIO_ReadPin>
 8002fac:	4603      	mov	r3, r0
 8002fae:	2b01      	cmp	r3, #1
 8002fb0:	d11d      	bne.n	8002fee <menu+0x1b1a>
 8002fb2:	4b75      	ldr	r3, [pc, #468]	; (8003188 <menu+0x1cb4>)
 8002fb4:	781b      	ldrb	r3, [r3, #0]
 8002fb6:	f083 0301 	eor.w	r3, r3, #1
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d016      	beq.n	8002fee <menu+0x1b1a>
			eepromData[34] = kapiTablaAcKonum;
 8002fc0:	4b6c      	ldr	r3, [pc, #432]	; (8003174 <menu+0x1ca0>)
 8002fc2:	781a      	ldrb	r2, [r3, #0]
 8002fc4:	4b71      	ldr	r3, [pc, #452]	; (800318c <menu+0x1cb8>)
 8002fc6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002fca:	4b6a      	ldr	r3, [pc, #424]	; (8003174 <menu+0x1ca0>)
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <menu+0x1b06>
 8002fd2:	4b68      	ldr	r3, [pc, #416]	; (8003174 <menu+0x1ca0>)
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d106      	bne.n	8002fe8 <menu+0x1b14>
				altLimit = 1;
 8002fda:	4b6d      	ldr	r3, [pc, #436]	; (8003190 <menu+0x1cbc>)
 8002fdc:	2201      	movs	r2, #1
 8002fde:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002fe0:	4b6b      	ldr	r3, [pc, #428]	; (8003190 <menu+0x1cbc>)
 8002fe2:	781a      	ldrb	r2, [r3, #0]
 8002fe4:	4b69      	ldr	r3, [pc, #420]	; (800318c <menu+0x1cb8>)
 8002fe6:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002fe8:	4b6a      	ldr	r3, [pc, #424]	; (8003194 <menu+0x1cc0>)
 8002fea:	2201      	movs	r2, #1
 8002fec:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002fee:	4b6a      	ldr	r3, [pc, #424]	; (8003198 <menu+0x1cc4>)
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	2b0f      	cmp	r3, #15
 8002ff4:	d17f      	bne.n	80030f6 <menu+0x1c22>
		if(dilSecim == 0) {
 8002ff6:	4b60      	ldr	r3, [pc, #384]	; (8003178 <menu+0x1ca4>)
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d10a      	bne.n	8003014 <menu+0x1b40>
			lcd_print(1, 1, "TABLA KP AC SURE");
 8002ffe:	4a67      	ldr	r2, [pc, #412]	; (800319c <menu+0x1cc8>)
 8003000:	2101      	movs	r1, #1
 8003002:	2001      	movs	r0, #1
 8003004:	f7fd fb30 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8003008:	4a65      	ldr	r2, [pc, #404]	; (80031a0 <menu+0x1ccc>)
 800300a:	2101      	movs	r1, #1
 800300c:	2002      	movs	r0, #2
 800300e:	f7fd fb2b 	bl	8000668 <lcd_print>
 8003012:	e00d      	b.n	8003030 <menu+0x1b5c>
		} else if(dilSecim == 1) {
 8003014:	4b58      	ldr	r3, [pc, #352]	; (8003178 <menu+0x1ca4>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d109      	bne.n	8003030 <menu+0x1b5c>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 800301c:	4a61      	ldr	r2, [pc, #388]	; (80031a4 <menu+0x1cd0>)
 800301e:	2101      	movs	r1, #1
 8003020:	2001      	movs	r0, #1
 8003022:	f7fd fb21 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8003026:	4a60      	ldr	r2, [pc, #384]	; (80031a8 <menu+0x1cd4>)
 8003028:	2101      	movs	r1, #1
 800302a:	2002      	movs	r0, #2
 800302c:	f7fd fb1c 	bl	8000668 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8003030:	4b5e      	ldr	r3, [pc, #376]	; (80031ac <menu+0x1cd8>)
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	220a      	movs	r2, #10
 8003036:	495e      	ldr	r1, [pc, #376]	; (80031b0 <menu+0x1cdc>)
 8003038:	4618      	mov	r0, r3
 800303a:	f009 fe41 	bl	800ccc0 <itoa>
		lcd_print(2,16,snum);
 800303e:	4a5c      	ldr	r2, [pc, #368]	; (80031b0 <menu+0x1cdc>)
 8003040:	2110      	movs	r1, #16
 8003042:	2002      	movs	r0, #2
 8003044:	f7fd fb10 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8003048:	2102      	movs	r1, #2
 800304a:	484e      	ldr	r0, [pc, #312]	; (8003184 <menu+0x1cb0>)
 800304c:	f006 fe0c 	bl	8009c68 <HAL_GPIO_ReadPin>
 8003050:	4603      	mov	r3, r0
 8003052:	2b01      	cmp	r3, #1
 8003054:	d119      	bne.n	800308a <menu+0x1bb6>
 8003056:	4b4c      	ldr	r3, [pc, #304]	; (8003188 <menu+0x1cb4>)
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	f083 0301 	eor.w	r3, r3, #1
 800305e:	b2db      	uxtb	r3, r3
 8003060:	2b00      	cmp	r3, #0
 8003062:	d012      	beq.n	800308a <menu+0x1bb6>
 8003064:	4b53      	ldr	r3, [pc, #332]	; (80031b4 <menu+0x1ce0>)
 8003066:	781b      	ldrb	r3, [r3, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d10e      	bne.n	800308a <menu+0x1bb6>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 800306c:	4b4f      	ldr	r3, [pc, #316]	; (80031ac <menu+0x1cd8>)
 800306e:	781b      	ldrb	r3, [r3, #0]
 8003070:	3301      	adds	r3, #1
 8003072:	b2da      	uxtb	r2, r3
 8003074:	4b4d      	ldr	r3, [pc, #308]	; (80031ac <menu+0x1cd8>)
 8003076:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8003078:	4b4c      	ldr	r3, [pc, #304]	; (80031ac <menu+0x1cd8>)
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	2b05      	cmp	r3, #5
 800307e:	d902      	bls.n	8003086 <menu+0x1bb2>
				kapiTablaAcSure = 0;
 8003080:	4b4a      	ldr	r3, [pc, #296]	; (80031ac <menu+0x1cd8>)
 8003082:	2200      	movs	r2, #0
 8003084:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003086:	f002 ffb1 	bl	8005fec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 800308a:	2104      	movs	r1, #4
 800308c:	483d      	ldr	r0, [pc, #244]	; (8003184 <menu+0x1cb0>)
 800308e:	f006 fdeb 	bl	8009c68 <HAL_GPIO_ReadPin>
 8003092:	4603      	mov	r3, r0
 8003094:	2b01      	cmp	r3, #1
 8003096:	d119      	bne.n	80030cc <menu+0x1bf8>
 8003098:	4b3b      	ldr	r3, [pc, #236]	; (8003188 <menu+0x1cb4>)
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	f083 0301 	eor.w	r3, r3, #1
 80030a0:	b2db      	uxtb	r3, r3
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d012      	beq.n	80030cc <menu+0x1bf8>
 80030a6:	4b43      	ldr	r3, [pc, #268]	; (80031b4 <menu+0x1ce0>)
 80030a8:	781b      	ldrb	r3, [r3, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d10e      	bne.n	80030cc <menu+0x1bf8>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 80030ae:	4b3f      	ldr	r3, [pc, #252]	; (80031ac <menu+0x1cd8>)
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	3b01      	subs	r3, #1
 80030b4:	b2da      	uxtb	r2, r3
 80030b6:	4b3d      	ldr	r3, [pc, #244]	; (80031ac <menu+0x1cd8>)
 80030b8:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 80030ba:	4b3c      	ldr	r3, [pc, #240]	; (80031ac <menu+0x1cd8>)
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	2b06      	cmp	r3, #6
 80030c0:	d902      	bls.n	80030c8 <menu+0x1bf4>
		   		kapiTablaAcSure = 5;
 80030c2:	4b3a      	ldr	r3, [pc, #232]	; (80031ac <menu+0x1cd8>)
 80030c4:	2205      	movs	r2, #5
 80030c6:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80030c8:	f002 ff90 	bl	8005fec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80030cc:	2108      	movs	r1, #8
 80030ce:	482d      	ldr	r0, [pc, #180]	; (8003184 <menu+0x1cb0>)
 80030d0:	f006 fdca 	bl	8009c68 <HAL_GPIO_ReadPin>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b01      	cmp	r3, #1
 80030d8:	d10d      	bne.n	80030f6 <menu+0x1c22>
 80030da:	4b2b      	ldr	r3, [pc, #172]	; (8003188 <menu+0x1cb4>)
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	f083 0301 	eor.w	r3, r3, #1
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d006      	beq.n	80030f6 <menu+0x1c22>
			eepromData[13] = kapiTablaAcSure;
 80030e8:	4b30      	ldr	r3, [pc, #192]	; (80031ac <menu+0x1cd8>)
 80030ea:	781a      	ldrb	r2, [r3, #0]
 80030ec:	4b27      	ldr	r3, [pc, #156]	; (800318c <menu+0x1cb8>)
 80030ee:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 80030f0:	4b28      	ldr	r3, [pc, #160]	; (8003194 <menu+0x1cc0>)
 80030f2:	2201      	movs	r2, #1
 80030f4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 80030f6:	4b28      	ldr	r3, [pc, #160]	; (8003198 <menu+0x1cc4>)
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	2b10      	cmp	r3, #16
 80030fc:	f040 80bc 	bne.w	8003278 <menu+0x1da4>
		if(dilSecim == 0) {
 8003100:	4b1d      	ldr	r3, [pc, #116]	; (8003178 <menu+0x1ca4>)
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d105      	bne.n	8003114 <menu+0x1c40>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 8003108:	4a2b      	ldr	r2, [pc, #172]	; (80031b8 <menu+0x1ce4>)
 800310a:	2101      	movs	r1, #1
 800310c:	2001      	movs	r0, #1
 800310e:	f7fd faab 	bl	8000668 <lcd_print>
 8003112:	e008      	b.n	8003126 <menu+0x1c52>
		} else if(dilSecim == 1) {
 8003114:	4b18      	ldr	r3, [pc, #96]	; (8003178 <menu+0x1ca4>)
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	2b01      	cmp	r3, #1
 800311a:	d104      	bne.n	8003126 <menu+0x1c52>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 800311c:	4a27      	ldr	r2, [pc, #156]	; (80031bc <menu+0x1ce8>)
 800311e:	2101      	movs	r1, #1
 8003120:	2001      	movs	r0, #1
 8003122:	f7fd faa1 	bl	8000668 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 8003126:	4b26      	ldr	r3, [pc, #152]	; (80031c0 <menu+0x1cec>)
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d113      	bne.n	8003156 <menu+0x1c82>
			if(dilSecim == 0) {
 800312e:	4b12      	ldr	r3, [pc, #72]	; (8003178 <menu+0x1ca4>)
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d105      	bne.n	8003142 <menu+0x1c6e>
				lcd_print(2, 1, "Pasif           ");
 8003136:	4a11      	ldr	r2, [pc, #68]	; (800317c <menu+0x1ca8>)
 8003138:	2101      	movs	r1, #1
 800313a:	2002      	movs	r0, #2
 800313c:	f7fd fa94 	bl	8000668 <lcd_print>
 8003140:	e04b      	b.n	80031da <menu+0x1d06>
			} else if(dilSecim == 1) {
 8003142:	4b0d      	ldr	r3, [pc, #52]	; (8003178 <menu+0x1ca4>)
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	2b01      	cmp	r3, #1
 8003148:	d147      	bne.n	80031da <menu+0x1d06>
				lcd_print(2, 1, "Passive         ");
 800314a:	4a0d      	ldr	r2, [pc, #52]	; (8003180 <menu+0x1cac>)
 800314c:	2101      	movs	r1, #1
 800314e:	2002      	movs	r0, #2
 8003150:	f7fd fa8a 	bl	8000668 <lcd_print>
 8003154:	e041      	b.n	80031da <menu+0x1d06>
			}
		} else if(yukariYavasLimit == 1) {
 8003156:	4b1a      	ldr	r3, [pc, #104]	; (80031c0 <menu+0x1cec>)
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d13d      	bne.n	80031da <menu+0x1d06>
			if(dilSecim == 0) {
 800315e:	4b06      	ldr	r3, [pc, #24]	; (8003178 <menu+0x1ca4>)
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d130      	bne.n	80031c8 <menu+0x1cf4>
				lcd_print(2, 1, "Aktif           ");
 8003166:	4a17      	ldr	r2, [pc, #92]	; (80031c4 <menu+0x1cf0>)
 8003168:	2101      	movs	r1, #1
 800316a:	2002      	movs	r0, #2
 800316c:	f7fd fa7c 	bl	8000668 <lcd_print>
 8003170:	e033      	b.n	80031da <menu+0x1d06>
 8003172:	bf00      	nop
 8003174:	20000c56 	.word	0x20000c56
 8003178:	20000c6a 	.word	0x20000c6a
 800317c:	0800dbec 	.word	0x0800dbec
 8003180:	0800dc00 	.word	0x0800dc00
 8003184:	40010800 	.word	0x40010800
 8003188:	20000c78 	.word	0x20000c78
 800318c:	20000b38 	.word	0x20000b38
 8003190:	20000c4f 	.word	0x20000c4f
 8003194:	20000c75 	.word	0x20000c75
 8003198:	20000c49 	.word	0x20000c49
 800319c:	0800df8c 	.word	0x0800df8c
 80031a0:	0800de50 	.word	0x0800de50
 80031a4:	0800dfa0 	.word	0x0800dfa0
 80031a8:	0800de74 	.word	0x0800de74
 80031ac:	20000c64 	.word	0x20000c64
 80031b0:	20000bcc 	.word	0x20000bcc
 80031b4:	20000c54 	.word	0x20000c54
 80031b8:	0800dfb4 	.word	0x0800dfb4
 80031bc:	0800dfc8 	.word	0x0800dfc8
 80031c0:	20000c57 	.word	0x20000c57
 80031c4:	0800dc4c 	.word	0x0800dc4c
			} else if(dilSecim == 1) {
 80031c8:	4b99      	ldr	r3, [pc, #612]	; (8003430 <menu+0x1f5c>)
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	2b01      	cmp	r3, #1
 80031ce:	d104      	bne.n	80031da <menu+0x1d06>
				lcd_print(2, 1, "Active          ");
 80031d0:	4a98      	ldr	r2, [pc, #608]	; (8003434 <menu+0x1f60>)
 80031d2:	2101      	movs	r1, #1
 80031d4:	2002      	movs	r0, #2
 80031d6:	f7fd fa47 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80031da:	2102      	movs	r1, #2
 80031dc:	4896      	ldr	r0, [pc, #600]	; (8003438 <menu+0x1f64>)
 80031de:	f006 fd43 	bl	8009c68 <HAL_GPIO_ReadPin>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d115      	bne.n	8003214 <menu+0x1d40>
 80031e8:	4b94      	ldr	r3, [pc, #592]	; (800343c <menu+0x1f68>)
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	f083 0301 	eor.w	r3, r3, #1
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00e      	beq.n	8003214 <menu+0x1d40>
			yukariYavasLimit = yukariYavasLimit + 1;
 80031f6:	4b92      	ldr	r3, [pc, #584]	; (8003440 <menu+0x1f6c>)
 80031f8:	781b      	ldrb	r3, [r3, #0]
 80031fa:	3301      	adds	r3, #1
 80031fc:	b2da      	uxtb	r2, r3
 80031fe:	4b90      	ldr	r3, [pc, #576]	; (8003440 <menu+0x1f6c>)
 8003200:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 8003202:	4b8f      	ldr	r3, [pc, #572]	; (8003440 <menu+0x1f6c>)
 8003204:	781b      	ldrb	r3, [r3, #0]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d902      	bls.n	8003210 <menu+0x1d3c>
				yukariYavasLimit = 0;
 800320a:	4b8d      	ldr	r3, [pc, #564]	; (8003440 <menu+0x1f6c>)
 800320c:	2200      	movs	r2, #0
 800320e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003210:	f002 feec 	bl	8005fec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003214:	2104      	movs	r1, #4
 8003216:	4888      	ldr	r0, [pc, #544]	; (8003438 <menu+0x1f64>)
 8003218:	f006 fd26 	bl	8009c68 <HAL_GPIO_ReadPin>
 800321c:	4603      	mov	r3, r0
 800321e:	2b01      	cmp	r3, #1
 8003220:	d115      	bne.n	800324e <menu+0x1d7a>
 8003222:	4b86      	ldr	r3, [pc, #536]	; (800343c <menu+0x1f68>)
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	f083 0301 	eor.w	r3, r3, #1
 800322a:	b2db      	uxtb	r3, r3
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00e      	beq.n	800324e <menu+0x1d7a>
			yukariYavasLimit = yukariYavasLimit - 1;
 8003230:	4b83      	ldr	r3, [pc, #524]	; (8003440 <menu+0x1f6c>)
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	3b01      	subs	r3, #1
 8003236:	b2da      	uxtb	r2, r3
 8003238:	4b81      	ldr	r3, [pc, #516]	; (8003440 <menu+0x1f6c>)
 800323a:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 800323c:	4b80      	ldr	r3, [pc, #512]	; (8003440 <menu+0x1f6c>)
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d002      	beq.n	800324a <menu+0x1d76>
		   		yukariYavasLimit = 1;
 8003244:	4b7e      	ldr	r3, [pc, #504]	; (8003440 <menu+0x1f6c>)
 8003246:	2201      	movs	r2, #1
 8003248:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800324a:	f002 fecf 	bl	8005fec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800324e:	2108      	movs	r1, #8
 8003250:	4879      	ldr	r0, [pc, #484]	; (8003438 <menu+0x1f64>)
 8003252:	f006 fd09 	bl	8009c68 <HAL_GPIO_ReadPin>
 8003256:	4603      	mov	r3, r0
 8003258:	2b01      	cmp	r3, #1
 800325a:	d10d      	bne.n	8003278 <menu+0x1da4>
 800325c:	4b77      	ldr	r3, [pc, #476]	; (800343c <menu+0x1f68>)
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	f083 0301 	eor.w	r3, r3, #1
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	d006      	beq.n	8003278 <menu+0x1da4>
			eepromData[14] = yukariYavasLimit;
 800326a:	4b75      	ldr	r3, [pc, #468]	; (8003440 <menu+0x1f6c>)
 800326c:	781a      	ldrb	r2, [r3, #0]
 800326e:	4b75      	ldr	r3, [pc, #468]	; (8003444 <menu+0x1f70>)
 8003270:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 8003272:	4b75      	ldr	r3, [pc, #468]	; (8003448 <menu+0x1f74>)
 8003274:	2201      	movs	r2, #1
 8003276:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8003278:	4b74      	ldr	r3, [pc, #464]	; (800344c <menu+0x1f78>)
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	2b11      	cmp	r3, #17
 800327e:	f040 80c3 	bne.w	8003408 <menu+0x1f34>
		if(dilSecim == 0) {
 8003282:	4b6b      	ldr	r3, [pc, #428]	; (8003430 <menu+0x1f5c>)
 8003284:	781b      	ldrb	r3, [r3, #0]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d105      	bne.n	8003296 <menu+0x1dc2>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 800328a:	4a71      	ldr	r2, [pc, #452]	; (8003450 <menu+0x1f7c>)
 800328c:	2101      	movs	r1, #1
 800328e:	2001      	movs	r0, #1
 8003290:	f7fd f9ea 	bl	8000668 <lcd_print>
 8003294:	e008      	b.n	80032a8 <menu+0x1dd4>
		} else if(dilSecim == 1) {
 8003296:	4b66      	ldr	r3, [pc, #408]	; (8003430 <menu+0x1f5c>)
 8003298:	781b      	ldrb	r3, [r3, #0]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d104      	bne.n	80032a8 <menu+0x1dd4>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 800329e:	4a6d      	ldr	r2, [pc, #436]	; (8003454 <menu+0x1f80>)
 80032a0:	2101      	movs	r1, #1
 80032a2:	2001      	movs	r0, #1
 80032a4:	f7fd f9e0 	bl	8000668 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 80032a8:	4b6b      	ldr	r3, [pc, #428]	; (8003458 <menu+0x1f84>)
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d113      	bne.n	80032d8 <menu+0x1e04>
			if(dilSecim == 0){
 80032b0:	4b5f      	ldr	r3, [pc, #380]	; (8003430 <menu+0x1f5c>)
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d105      	bne.n	80032c4 <menu+0x1df0>
				lcd_print(2, 1, "Devirme aktif  ");
 80032b8:	4a68      	ldr	r2, [pc, #416]	; (800345c <menu+0x1f88>)
 80032ba:	2101      	movs	r1, #1
 80032bc:	2002      	movs	r0, #2
 80032be:	f7fd f9d3 	bl	8000668 <lcd_print>
 80032c2:	e038      	b.n	8003336 <menu+0x1e62>
			} else if(dilSecim == 1){
 80032c4:	4b5a      	ldr	r3, [pc, #360]	; (8003430 <menu+0x1f5c>)
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d134      	bne.n	8003336 <menu+0x1e62>
				lcd_print(2, 1, "Tipping active ");
 80032cc:	4a64      	ldr	r2, [pc, #400]	; (8003460 <menu+0x1f8c>)
 80032ce:	2101      	movs	r1, #1
 80032d0:	2002      	movs	r0, #2
 80032d2:	f7fd f9c9 	bl	8000668 <lcd_print>
 80032d6:	e02e      	b.n	8003336 <menu+0x1e62>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80032d8:	4b5f      	ldr	r3, [pc, #380]	; (8003458 <menu+0x1f84>)
 80032da:	781b      	ldrb	r3, [r3, #0]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d113      	bne.n	8003308 <menu+0x1e34>
			if(dilSecim == 0){
 80032e0:	4b53      	ldr	r3, [pc, #332]	; (8003430 <menu+0x1f5c>)
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d105      	bne.n	80032f4 <menu+0x1e20>
				lcd_print(2, 1, "Yuruyus aktif  ");
 80032e8:	4a5e      	ldr	r2, [pc, #376]	; (8003464 <menu+0x1f90>)
 80032ea:	2101      	movs	r1, #1
 80032ec:	2002      	movs	r0, #2
 80032ee:	f7fd f9bb 	bl	8000668 <lcd_print>
 80032f2:	e020      	b.n	8003336 <menu+0x1e62>
			} else if(dilSecim == 1) {
 80032f4:	4b4e      	ldr	r3, [pc, #312]	; (8003430 <menu+0x1f5c>)
 80032f6:	781b      	ldrb	r3, [r3, #0]
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d11c      	bne.n	8003336 <menu+0x1e62>
				lcd_print(2, 1, "Drive active   ");
 80032fc:	4a5a      	ldr	r2, [pc, #360]	; (8003468 <menu+0x1f94>)
 80032fe:	2101      	movs	r1, #1
 8003300:	2002      	movs	r0, #2
 8003302:	f7fd f9b1 	bl	8000668 <lcd_print>
 8003306:	e016      	b.n	8003336 <menu+0x1e62>
			}
		} else if(devirmeYuruyusSecim == 0) {
 8003308:	4b53      	ldr	r3, [pc, #332]	; (8003458 <menu+0x1f84>)
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d112      	bne.n	8003336 <menu+0x1e62>
			if(dilSecim == 0) {
 8003310:	4b47      	ldr	r3, [pc, #284]	; (8003430 <menu+0x1f5c>)
 8003312:	781b      	ldrb	r3, [r3, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d105      	bne.n	8003324 <menu+0x1e50>
				lcd_print(2, 1, "Pasif           ");
 8003318:	4a54      	ldr	r2, [pc, #336]	; (800346c <menu+0x1f98>)
 800331a:	2101      	movs	r1, #1
 800331c:	2002      	movs	r0, #2
 800331e:	f7fd f9a3 	bl	8000668 <lcd_print>
 8003322:	e008      	b.n	8003336 <menu+0x1e62>
			} else if(dilSecim == 1) {
 8003324:	4b42      	ldr	r3, [pc, #264]	; (8003430 <menu+0x1f5c>)
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	2b01      	cmp	r3, #1
 800332a:	d104      	bne.n	8003336 <menu+0x1e62>
				lcd_print(2, 1, "Passive         ");
 800332c:	4a50      	ldr	r2, [pc, #320]	; (8003470 <menu+0x1f9c>)
 800332e:	2101      	movs	r1, #1
 8003330:	2002      	movs	r0, #2
 8003332:	f7fd f999 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003336:	2102      	movs	r1, #2
 8003338:	483f      	ldr	r0, [pc, #252]	; (8003438 <menu+0x1f64>)
 800333a:	f006 fc95 	bl	8009c68 <HAL_GPIO_ReadPin>
 800333e:	4603      	mov	r3, r0
 8003340:	2b01      	cmp	r3, #1
 8003342:	d115      	bne.n	8003370 <menu+0x1e9c>
 8003344:	4b3d      	ldr	r3, [pc, #244]	; (800343c <menu+0x1f68>)
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	f083 0301 	eor.w	r3, r3, #1
 800334c:	b2db      	uxtb	r3, r3
 800334e:	2b00      	cmp	r3, #0
 8003350:	d00e      	beq.n	8003370 <menu+0x1e9c>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 8003352:	4b41      	ldr	r3, [pc, #260]	; (8003458 <menu+0x1f84>)
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	3301      	adds	r3, #1
 8003358:	b2da      	uxtb	r2, r3
 800335a:	4b3f      	ldr	r3, [pc, #252]	; (8003458 <menu+0x1f84>)
 800335c:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 800335e:	4b3e      	ldr	r3, [pc, #248]	; (8003458 <menu+0x1f84>)
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	2b02      	cmp	r3, #2
 8003364:	d902      	bls.n	800336c <menu+0x1e98>
				devirmeYuruyusSecim = 0;
 8003366:	4b3c      	ldr	r3, [pc, #240]	; (8003458 <menu+0x1f84>)
 8003368:	2200      	movs	r2, #0
 800336a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800336c:	f002 fe3e 	bl	8005fec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003370:	2104      	movs	r1, #4
 8003372:	4831      	ldr	r0, [pc, #196]	; (8003438 <menu+0x1f64>)
 8003374:	f006 fc78 	bl	8009c68 <HAL_GPIO_ReadPin>
 8003378:	4603      	mov	r3, r0
 800337a:	2b01      	cmp	r3, #1
 800337c:	d115      	bne.n	80033aa <menu+0x1ed6>
 800337e:	4b2f      	ldr	r3, [pc, #188]	; (800343c <menu+0x1f68>)
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	f083 0301 	eor.w	r3, r3, #1
 8003386:	b2db      	uxtb	r3, r3
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00e      	beq.n	80033aa <menu+0x1ed6>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 800338c:	4b32      	ldr	r3, [pc, #200]	; (8003458 <menu+0x1f84>)
 800338e:	781b      	ldrb	r3, [r3, #0]
 8003390:	3b01      	subs	r3, #1
 8003392:	b2da      	uxtb	r2, r3
 8003394:	4b30      	ldr	r3, [pc, #192]	; (8003458 <menu+0x1f84>)
 8003396:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8003398:	4b2f      	ldr	r3, [pc, #188]	; (8003458 <menu+0x1f84>)
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	2b03      	cmp	r3, #3
 800339e:	d902      	bls.n	80033a6 <menu+0x1ed2>
		   		devirmeYuruyusSecim = 2;
 80033a0:	4b2d      	ldr	r3, [pc, #180]	; (8003458 <menu+0x1f84>)
 80033a2:	2202      	movs	r2, #2
 80033a4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80033a6:	f002 fe21 	bl	8005fec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80033aa:	2108      	movs	r1, #8
 80033ac:	4822      	ldr	r0, [pc, #136]	; (8003438 <menu+0x1f64>)
 80033ae:	f006 fc5b 	bl	8009c68 <HAL_GPIO_ReadPin>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d127      	bne.n	8003408 <menu+0x1f34>
 80033b8:	4b20      	ldr	r3, [pc, #128]	; (800343c <menu+0x1f68>)
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	f083 0301 	eor.w	r3, r3, #1
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d020      	beq.n	8003408 <menu+0x1f34>
			eepromData[15] = devirmeYuruyusSecim;
 80033c6:	4b24      	ldr	r3, [pc, #144]	; (8003458 <menu+0x1f84>)
 80033c8:	781a      	ldrb	r2, [r3, #0]
 80033ca:	4b1e      	ldr	r3, [pc, #120]	; (8003444 <menu+0x1f70>)
 80033cc:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 80033ce:	4b22      	ldr	r3, [pc, #136]	; (8003458 <menu+0x1f84>)
 80033d0:	781b      	ldrb	r3, [r3, #0]
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d003      	beq.n	80033de <menu+0x1f0a>
 80033d6:	4b20      	ldr	r3, [pc, #128]	; (8003458 <menu+0x1f84>)
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d106      	bne.n	80033ec <menu+0x1f18>
				calismaSekli = 0;
 80033de:	4b25      	ldr	r3, [pc, #148]	; (8003474 <menu+0x1fa0>)
 80033e0:	2200      	movs	r2, #0
 80033e2:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 80033e4:	4b23      	ldr	r3, [pc, #140]	; (8003474 <menu+0x1fa0>)
 80033e6:	781a      	ldrb	r2, [r3, #0]
 80033e8:	4b16      	ldr	r3, [pc, #88]	; (8003444 <menu+0x1f70>)
 80033ea:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 80033ec:	4b1a      	ldr	r3, [pc, #104]	; (8003458 <menu+0x1f84>)
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d106      	bne.n	8003402 <menu+0x1f2e>
				devirmeSilindirTipi = 1;
 80033f4:	4b20      	ldr	r3, [pc, #128]	; (8003478 <menu+0x1fa4>)
 80033f6:	2201      	movs	r2, #1
 80033f8:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 80033fa:	4b1f      	ldr	r3, [pc, #124]	; (8003478 <menu+0x1fa4>)
 80033fc:	781a      	ldrb	r2, [r3, #0]
 80033fe:	4b11      	ldr	r3, [pc, #68]	; (8003444 <menu+0x1f70>)
 8003400:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 8003402:	4b11      	ldr	r3, [pc, #68]	; (8003448 <menu+0x1f74>)
 8003404:	2201      	movs	r2, #1
 8003406:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8003408:	4b10      	ldr	r3, [pc, #64]	; (800344c <menu+0x1f78>)
 800340a:	781b      	ldrb	r3, [r3, #0]
 800340c:	2b12      	cmp	r3, #18
 800340e:	f040 80d5 	bne.w	80035bc <menu+0x20e8>
		if(devirmeYuruyusSecim == 2) {
 8003412:	4b11      	ldr	r3, [pc, #68]	; (8003458 <menu+0x1f84>)
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	2b02      	cmp	r3, #2
 8003418:	d13c      	bne.n	8003494 <menu+0x1fc0>
			if(dilSecim == 0) {
 800341a:	4b05      	ldr	r3, [pc, #20]	; (8003430 <menu+0x1f5c>)
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d12e      	bne.n	8003480 <menu+0x1fac>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 8003422:	4a16      	ldr	r2, [pc, #88]	; (800347c <menu+0x1fa8>)
 8003424:	2101      	movs	r1, #1
 8003426:	2001      	movs	r0, #1
 8003428:	f7fd f91e 	bl	8000668 <lcd_print>
 800342c:	e048      	b.n	80034c0 <menu+0x1fec>
 800342e:	bf00      	nop
 8003430:	20000c6a 	.word	0x20000c6a
 8003434:	0800dc60 	.word	0x0800dc60
 8003438:	40010800 	.word	0x40010800
 800343c:	20000c78 	.word	0x20000c78
 8003440:	20000c57 	.word	0x20000c57
 8003444:	20000b38 	.word	0x20000b38
 8003448:	20000c75 	.word	0x20000c75
 800344c:	20000c49 	.word	0x20000c49
 8003450:	0800dfdc 	.word	0x0800dfdc
 8003454:	0800dff0 	.word	0x0800dff0
 8003458:	20000c58 	.word	0x20000c58
 800345c:	0800e004 	.word	0x0800e004
 8003460:	0800e014 	.word	0x0800e014
 8003464:	0800e024 	.word	0x0800e024
 8003468:	0800e034 	.word	0x0800e034
 800346c:	0800dbec 	.word	0x0800dbec
 8003470:	0800dc00 	.word	0x0800dc00
 8003474:	20000c4a 	.word	0x20000c4a
 8003478:	20000c5b 	.word	0x20000c5b
 800347c:	0800e044 	.word	0x0800e044
			} else if(dilSecim == 1) {
 8003480:	4b7b      	ldr	r3, [pc, #492]	; (8003670 <menu+0x219c>)
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	2b01      	cmp	r3, #1
 8003486:	d11b      	bne.n	80034c0 <menu+0x1fec>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 8003488:	4a7a      	ldr	r2, [pc, #488]	; (8003674 <menu+0x21a0>)
 800348a:	2101      	movs	r1, #1
 800348c:	2001      	movs	r0, #1
 800348e:	f7fd f8eb 	bl	8000668 <lcd_print>
 8003492:	e015      	b.n	80034c0 <menu+0x1fec>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003494:	4b78      	ldr	r3, [pc, #480]	; (8003678 <menu+0x21a4>)
 8003496:	781b      	ldrb	r3, [r3, #0]
 8003498:	2b01      	cmp	r3, #1
 800349a:	d111      	bne.n	80034c0 <menu+0x1fec>
			if(dilSecim == 0){
 800349c:	4b74      	ldr	r3, [pc, #464]	; (8003670 <menu+0x219c>)
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d104      	bne.n	80034ae <menu+0x1fda>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 80034a4:	4a75      	ldr	r2, [pc, #468]	; (800367c <menu+0x21a8>)
 80034a6:	2101      	movs	r1, #1
 80034a8:	2001      	movs	r0, #1
 80034aa:	f7fd f8dd 	bl	8000668 <lcd_print>
			}
			if(dilSecim == 1){
 80034ae:	4b70      	ldr	r3, [pc, #448]	; (8003670 <menu+0x219c>)
 80034b0:	781b      	ldrb	r3, [r3, #0]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d104      	bne.n	80034c0 <menu+0x1fec>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 80034b6:	4a72      	ldr	r2, [pc, #456]	; (8003680 <menu+0x21ac>)
 80034b8:	2101      	movs	r1, #1
 80034ba:	2001      	movs	r0, #1
 80034bc:	f7fd f8d4 	bl	8000668 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 80034c0:	4b70      	ldr	r3, [pc, #448]	; (8003684 <menu+0x21b0>)
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d113      	bne.n	80034f0 <menu+0x201c>
			if(dilSecim == 0) {
 80034c8:	4b69      	ldr	r3, [pc, #420]	; (8003670 <menu+0x219c>)
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d105      	bne.n	80034dc <menu+0x2008>
				lcd_print(2, 1, "Pasif           ");
 80034d0:	4a6d      	ldr	r2, [pc, #436]	; (8003688 <menu+0x21b4>)
 80034d2:	2101      	movs	r1, #1
 80034d4:	2002      	movs	r0, #2
 80034d6:	f7fd f8c7 	bl	8000668 <lcd_print>
 80034da:	e020      	b.n	800351e <menu+0x204a>
			} else if(dilSecim == 1){
 80034dc:	4b64      	ldr	r3, [pc, #400]	; (8003670 <menu+0x219c>)
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d11c      	bne.n	800351e <menu+0x204a>
				lcd_print(2, 1, "Passive         ");
 80034e4:	4a69      	ldr	r2, [pc, #420]	; (800368c <menu+0x21b8>)
 80034e6:	2101      	movs	r1, #1
 80034e8:	2002      	movs	r0, #2
 80034ea:	f7fd f8bd 	bl	8000668 <lcd_print>
 80034ee:	e016      	b.n	800351e <menu+0x204a>
			}
		} else if(devirmeYukariIleriLimit == 1){
 80034f0:	4b64      	ldr	r3, [pc, #400]	; (8003684 <menu+0x21b0>)
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d112      	bne.n	800351e <menu+0x204a>
			if(dilSecim == 0){
 80034f8:	4b5d      	ldr	r3, [pc, #372]	; (8003670 <menu+0x219c>)
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d105      	bne.n	800350c <menu+0x2038>
				lcd_print(2, 1, "Aktif           ");
 8003500:	4a63      	ldr	r2, [pc, #396]	; (8003690 <menu+0x21bc>)
 8003502:	2101      	movs	r1, #1
 8003504:	2002      	movs	r0, #2
 8003506:	f7fd f8af 	bl	8000668 <lcd_print>
 800350a:	e008      	b.n	800351e <menu+0x204a>
			} else if(dilSecim == 1){
 800350c:	4b58      	ldr	r3, [pc, #352]	; (8003670 <menu+0x219c>)
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d104      	bne.n	800351e <menu+0x204a>
				lcd_print(2, 1, "Active          ");
 8003514:	4a5f      	ldr	r2, [pc, #380]	; (8003694 <menu+0x21c0>)
 8003516:	2101      	movs	r1, #1
 8003518:	2002      	movs	r0, #2
 800351a:	f7fd f8a5 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800351e:	2102      	movs	r1, #2
 8003520:	485d      	ldr	r0, [pc, #372]	; (8003698 <menu+0x21c4>)
 8003522:	f006 fba1 	bl	8009c68 <HAL_GPIO_ReadPin>
 8003526:	4603      	mov	r3, r0
 8003528:	2b01      	cmp	r3, #1
 800352a:	d115      	bne.n	8003558 <menu+0x2084>
 800352c:	4b5b      	ldr	r3, [pc, #364]	; (800369c <menu+0x21c8>)
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	f083 0301 	eor.w	r3, r3, #1
 8003534:	b2db      	uxtb	r3, r3
 8003536:	2b00      	cmp	r3, #0
 8003538:	d00e      	beq.n	8003558 <menu+0x2084>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 800353a:	4b52      	ldr	r3, [pc, #328]	; (8003684 <menu+0x21b0>)
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	3301      	adds	r3, #1
 8003540:	b2da      	uxtb	r2, r3
 8003542:	4b50      	ldr	r3, [pc, #320]	; (8003684 <menu+0x21b0>)
 8003544:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 8003546:	4b4f      	ldr	r3, [pc, #316]	; (8003684 <menu+0x21b0>)
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d902      	bls.n	8003554 <menu+0x2080>
				devirmeYukariIleriLimit = 0;
 800354e:	4b4d      	ldr	r3, [pc, #308]	; (8003684 <menu+0x21b0>)
 8003550:	2200      	movs	r2, #0
 8003552:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003554:	f002 fd4a 	bl	8005fec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003558:	2104      	movs	r1, #4
 800355a:	484f      	ldr	r0, [pc, #316]	; (8003698 <menu+0x21c4>)
 800355c:	f006 fb84 	bl	8009c68 <HAL_GPIO_ReadPin>
 8003560:	4603      	mov	r3, r0
 8003562:	2b01      	cmp	r3, #1
 8003564:	d115      	bne.n	8003592 <menu+0x20be>
 8003566:	4b4d      	ldr	r3, [pc, #308]	; (800369c <menu+0x21c8>)
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	f083 0301 	eor.w	r3, r3, #1
 800356e:	b2db      	uxtb	r3, r3
 8003570:	2b00      	cmp	r3, #0
 8003572:	d00e      	beq.n	8003592 <menu+0x20be>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 8003574:	4b43      	ldr	r3, [pc, #268]	; (8003684 <menu+0x21b0>)
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	3b01      	subs	r3, #1
 800357a:	b2da      	uxtb	r2, r3
 800357c:	4b41      	ldr	r3, [pc, #260]	; (8003684 <menu+0x21b0>)
 800357e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8003580:	4b40      	ldr	r3, [pc, #256]	; (8003684 <menu+0x21b0>)
 8003582:	781b      	ldrb	r3, [r3, #0]
 8003584:	2b00      	cmp	r3, #0
 8003586:	d002      	beq.n	800358e <menu+0x20ba>
		   		devirmeYukariIleriLimit = 1;
 8003588:	4b3e      	ldr	r3, [pc, #248]	; (8003684 <menu+0x21b0>)
 800358a:	2201      	movs	r2, #1
 800358c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800358e:	f002 fd2d 	bl	8005fec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003592:	2108      	movs	r1, #8
 8003594:	4840      	ldr	r0, [pc, #256]	; (8003698 <menu+0x21c4>)
 8003596:	f006 fb67 	bl	8009c68 <HAL_GPIO_ReadPin>
 800359a:	4603      	mov	r3, r0
 800359c:	2b01      	cmp	r3, #1
 800359e:	d10d      	bne.n	80035bc <menu+0x20e8>
 80035a0:	4b3e      	ldr	r3, [pc, #248]	; (800369c <menu+0x21c8>)
 80035a2:	781b      	ldrb	r3, [r3, #0]
 80035a4:	f083 0301 	eor.w	r3, r3, #1
 80035a8:	b2db      	uxtb	r3, r3
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d006      	beq.n	80035bc <menu+0x20e8>
			eepromData[16] = devirmeYukariIleriLimit;
 80035ae:	4b35      	ldr	r3, [pc, #212]	; (8003684 <menu+0x21b0>)
 80035b0:	781a      	ldrb	r2, [r3, #0]
 80035b2:	4b3b      	ldr	r3, [pc, #236]	; (80036a0 <menu+0x21cc>)
 80035b4:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 80035b6:	4b3b      	ldr	r3, [pc, #236]	; (80036a4 <menu+0x21d0>)
 80035b8:	2201      	movs	r2, #1
 80035ba:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 80035bc:	4b3a      	ldr	r3, [pc, #232]	; (80036a8 <menu+0x21d4>)
 80035be:	781b      	ldrb	r3, [r3, #0]
 80035c0:	2b13      	cmp	r3, #19
 80035c2:	f040 80d5 	bne.w	8003770 <menu+0x229c>
		if(devirmeYuruyusSecim == 2) {
 80035c6:	4b2c      	ldr	r3, [pc, #176]	; (8003678 <menu+0x21a4>)
 80035c8:	781b      	ldrb	r3, [r3, #0]
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d113      	bne.n	80035f6 <menu+0x2122>
			if(dilSecim == 0) {
 80035ce:	4b28      	ldr	r3, [pc, #160]	; (8003670 <menu+0x219c>)
 80035d0:	781b      	ldrb	r3, [r3, #0]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d105      	bne.n	80035e2 <menu+0x210e>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 80035d6:	4a35      	ldr	r2, [pc, #212]	; (80036ac <menu+0x21d8>)
 80035d8:	2101      	movs	r1, #1
 80035da:	2001      	movs	r0, #1
 80035dc:	f7fd f844 	bl	8000668 <lcd_print>
 80035e0:	e01f      	b.n	8003622 <menu+0x214e>
			} else if(dilSecim == 1) {
 80035e2:	4b23      	ldr	r3, [pc, #140]	; (8003670 <menu+0x219c>)
 80035e4:	781b      	ldrb	r3, [r3, #0]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d11b      	bne.n	8003622 <menu+0x214e>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 80035ea:	4a31      	ldr	r2, [pc, #196]	; (80036b0 <menu+0x21dc>)
 80035ec:	2101      	movs	r1, #1
 80035ee:	2001      	movs	r0, #1
 80035f0:	f7fd f83a 	bl	8000668 <lcd_print>
 80035f4:	e015      	b.n	8003622 <menu+0x214e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80035f6:	4b20      	ldr	r3, [pc, #128]	; (8003678 <menu+0x21a4>)
 80035f8:	781b      	ldrb	r3, [r3, #0]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d111      	bne.n	8003622 <menu+0x214e>
			if(dilSecim == 0) {
 80035fe:	4b1c      	ldr	r3, [pc, #112]	; (8003670 <menu+0x219c>)
 8003600:	781b      	ldrb	r3, [r3, #0]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d104      	bne.n	8003610 <menu+0x213c>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 8003606:	4a2b      	ldr	r2, [pc, #172]	; (80036b4 <menu+0x21e0>)
 8003608:	2101      	movs	r1, #1
 800360a:	2001      	movs	r0, #1
 800360c:	f7fd f82c 	bl	8000668 <lcd_print>
			}
			if(dilSecim == 1) {
 8003610:	4b17      	ldr	r3, [pc, #92]	; (8003670 <menu+0x219c>)
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d104      	bne.n	8003622 <menu+0x214e>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 8003618:	4a27      	ldr	r2, [pc, #156]	; (80036b8 <menu+0x21e4>)
 800361a:	2101      	movs	r1, #1
 800361c:	2001      	movs	r0, #1
 800361e:	f7fd f823 	bl	8000668 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 8003622:	4b26      	ldr	r3, [pc, #152]	; (80036bc <menu+0x21e8>)
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d113      	bne.n	8003652 <menu+0x217e>
			if(dilSecim == 0) {
 800362a:	4b11      	ldr	r3, [pc, #68]	; (8003670 <menu+0x219c>)
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d105      	bne.n	800363e <menu+0x216a>
				lcd_print(2, 1, "Pasif           ");
 8003632:	4a15      	ldr	r2, [pc, #84]	; (8003688 <menu+0x21b4>)
 8003634:	2101      	movs	r1, #1
 8003636:	2002      	movs	r0, #2
 8003638:	f7fd f816 	bl	8000668 <lcd_print>
 800363c:	e049      	b.n	80036d2 <menu+0x21fe>
			} else if(dilSecim == 1) {
 800363e:	4b0c      	ldr	r3, [pc, #48]	; (8003670 <menu+0x219c>)
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d145      	bne.n	80036d2 <menu+0x21fe>
				lcd_print(2, 1, "Passive         ");
 8003646:	4a11      	ldr	r2, [pc, #68]	; (800368c <menu+0x21b8>)
 8003648:	2101      	movs	r1, #1
 800364a:	2002      	movs	r0, #2
 800364c:	f7fd f80c 	bl	8000668 <lcd_print>
 8003650:	e03f      	b.n	80036d2 <menu+0x21fe>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 8003652:	4b1a      	ldr	r3, [pc, #104]	; (80036bc <menu+0x21e8>)
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d13b      	bne.n	80036d2 <menu+0x21fe>
			if(dilSecim == 0) {
 800365a:	4b05      	ldr	r3, [pc, #20]	; (8003670 <menu+0x219c>)
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	2b00      	cmp	r3, #0
 8003660:	d12e      	bne.n	80036c0 <menu+0x21ec>
				lcd_print(2, 1, "Aktif           ");
 8003662:	4a0b      	ldr	r2, [pc, #44]	; (8003690 <menu+0x21bc>)
 8003664:	2101      	movs	r1, #1
 8003666:	2002      	movs	r0, #2
 8003668:	f7fc fffe 	bl	8000668 <lcd_print>
 800366c:	e031      	b.n	80036d2 <menu+0x21fe>
 800366e:	bf00      	nop
 8003670:	20000c6a 	.word	0x20000c6a
 8003674:	0800e058 	.word	0x0800e058
 8003678:	20000c58 	.word	0x20000c58
 800367c:	0800e068 	.word	0x0800e068
 8003680:	0800e07c 	.word	0x0800e07c
 8003684:	20000c59 	.word	0x20000c59
 8003688:	0800dbec 	.word	0x0800dbec
 800368c:	0800dc00 	.word	0x0800dc00
 8003690:	0800dc4c 	.word	0x0800dc4c
 8003694:	0800dc60 	.word	0x0800dc60
 8003698:	40010800 	.word	0x40010800
 800369c:	20000c78 	.word	0x20000c78
 80036a0:	20000b38 	.word	0x20000b38
 80036a4:	20000c75 	.word	0x20000c75
 80036a8:	20000c49 	.word	0x20000c49
 80036ac:	0800e090 	.word	0x0800e090
 80036b0:	0800e0a4 	.word	0x0800e0a4
 80036b4:	0800e0b8 	.word	0x0800e0b8
 80036b8:	0800e0cc 	.word	0x0800e0cc
 80036bc:	20000c5a 	.word	0x20000c5a
			} else if(dilSecim == 1) {
 80036c0:	4b90      	ldr	r3, [pc, #576]	; (8003904 <menu+0x2430>)
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d104      	bne.n	80036d2 <menu+0x21fe>
				lcd_print(2, 1, "Active          ");
 80036c8:	4a8f      	ldr	r2, [pc, #572]	; (8003908 <menu+0x2434>)
 80036ca:	2101      	movs	r1, #1
 80036cc:	2002      	movs	r0, #2
 80036ce:	f7fc ffcb 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80036d2:	2102      	movs	r1, #2
 80036d4:	488d      	ldr	r0, [pc, #564]	; (800390c <menu+0x2438>)
 80036d6:	f006 fac7 	bl	8009c68 <HAL_GPIO_ReadPin>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d115      	bne.n	800370c <menu+0x2238>
 80036e0:	4b8b      	ldr	r3, [pc, #556]	; (8003910 <menu+0x243c>)
 80036e2:	781b      	ldrb	r3, [r3, #0]
 80036e4:	f083 0301 	eor.w	r3, r3, #1
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00e      	beq.n	800370c <menu+0x2238>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 80036ee:	4b89      	ldr	r3, [pc, #548]	; (8003914 <menu+0x2440>)
 80036f0:	781b      	ldrb	r3, [r3, #0]
 80036f2:	3301      	adds	r3, #1
 80036f4:	b2da      	uxtb	r2, r3
 80036f6:	4b87      	ldr	r3, [pc, #540]	; (8003914 <menu+0x2440>)
 80036f8:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 80036fa:	4b86      	ldr	r3, [pc, #536]	; (8003914 <menu+0x2440>)
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d902      	bls.n	8003708 <menu+0x2234>
				devirmeAsagiGeriLimit = 0;
 8003702:	4b84      	ldr	r3, [pc, #528]	; (8003914 <menu+0x2440>)
 8003704:	2200      	movs	r2, #0
 8003706:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003708:	f002 fc70 	bl	8005fec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800370c:	2104      	movs	r1, #4
 800370e:	487f      	ldr	r0, [pc, #508]	; (800390c <menu+0x2438>)
 8003710:	f006 faaa 	bl	8009c68 <HAL_GPIO_ReadPin>
 8003714:	4603      	mov	r3, r0
 8003716:	2b01      	cmp	r3, #1
 8003718:	d115      	bne.n	8003746 <menu+0x2272>
 800371a:	4b7d      	ldr	r3, [pc, #500]	; (8003910 <menu+0x243c>)
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	f083 0301 	eor.w	r3, r3, #1
 8003722:	b2db      	uxtb	r3, r3
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00e      	beq.n	8003746 <menu+0x2272>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8003728:	4b7a      	ldr	r3, [pc, #488]	; (8003914 <menu+0x2440>)
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	3b01      	subs	r3, #1
 800372e:	b2da      	uxtb	r2, r3
 8003730:	4b78      	ldr	r3, [pc, #480]	; (8003914 <menu+0x2440>)
 8003732:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8003734:	4b77      	ldr	r3, [pc, #476]	; (8003914 <menu+0x2440>)
 8003736:	781b      	ldrb	r3, [r3, #0]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d002      	beq.n	8003742 <menu+0x226e>
		   		devirmeAsagiGeriLimit = 1;
 800373c:	4b75      	ldr	r3, [pc, #468]	; (8003914 <menu+0x2440>)
 800373e:	2201      	movs	r2, #1
 8003740:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003742:	f002 fc53 	bl	8005fec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003746:	2108      	movs	r1, #8
 8003748:	4870      	ldr	r0, [pc, #448]	; (800390c <menu+0x2438>)
 800374a:	f006 fa8d 	bl	8009c68 <HAL_GPIO_ReadPin>
 800374e:	4603      	mov	r3, r0
 8003750:	2b01      	cmp	r3, #1
 8003752:	d10d      	bne.n	8003770 <menu+0x229c>
 8003754:	4b6e      	ldr	r3, [pc, #440]	; (8003910 <menu+0x243c>)
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	f083 0301 	eor.w	r3, r3, #1
 800375c:	b2db      	uxtb	r3, r3
 800375e:	2b00      	cmp	r3, #0
 8003760:	d006      	beq.n	8003770 <menu+0x229c>
			eepromData[17] = devirmeAsagiGeriLimit;
 8003762:	4b6c      	ldr	r3, [pc, #432]	; (8003914 <menu+0x2440>)
 8003764:	781a      	ldrb	r2, [r3, #0]
 8003766:	4b6c      	ldr	r3, [pc, #432]	; (8003918 <menu+0x2444>)
 8003768:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 800376a:	4b6c      	ldr	r3, [pc, #432]	; (800391c <menu+0x2448>)
 800376c:	2201      	movs	r2, #1
 800376e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8003770:	4b6b      	ldr	r3, [pc, #428]	; (8003920 <menu+0x244c>)
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	2b14      	cmp	r3, #20
 8003776:	f040 80b5 	bne.w	80038e4 <menu+0x2410>
		if(devirmeYuruyusSecim == 1) {
 800377a:	4b6a      	ldr	r3, [pc, #424]	; (8003924 <menu+0x2450>)
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d113      	bne.n	80037aa <menu+0x22d6>
			if(dilSecim == 0) {
 8003782:	4b60      	ldr	r3, [pc, #384]	; (8003904 <menu+0x2430>)
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d105      	bne.n	8003796 <menu+0x22c2>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 800378a:	4a67      	ldr	r2, [pc, #412]	; (8003928 <menu+0x2454>)
 800378c:	2101      	movs	r1, #1
 800378e:	2001      	movs	r0, #1
 8003790:	f7fc ff6a 	bl	8000668 <lcd_print>
 8003794:	e020      	b.n	80037d8 <menu+0x2304>
			} else if(dilSecim == 1) {
 8003796:	4b5b      	ldr	r3, [pc, #364]	; (8003904 <menu+0x2430>)
 8003798:	781b      	ldrb	r3, [r3, #0]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d11c      	bne.n	80037d8 <menu+0x2304>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 800379e:	4a63      	ldr	r2, [pc, #396]	; (800392c <menu+0x2458>)
 80037a0:	2101      	movs	r1, #1
 80037a2:	2001      	movs	r0, #1
 80037a4:	f7fc ff60 	bl	8000668 <lcd_print>
 80037a8:	e016      	b.n	80037d8 <menu+0x2304>
			}
		} else if(devirmeYuruyusSecim == 2) {
 80037aa:	4b5e      	ldr	r3, [pc, #376]	; (8003924 <menu+0x2450>)
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d112      	bne.n	80037d8 <menu+0x2304>
			if(dilSecim == 0) {
 80037b2:	4b54      	ldr	r3, [pc, #336]	; (8003904 <menu+0x2430>)
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d105      	bne.n	80037c6 <menu+0x22f2>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 80037ba:	4a5d      	ldr	r2, [pc, #372]	; (8003930 <menu+0x245c>)
 80037bc:	2101      	movs	r1, #1
 80037be:	2001      	movs	r0, #1
 80037c0:	f7fc ff52 	bl	8000668 <lcd_print>
 80037c4:	e008      	b.n	80037d8 <menu+0x2304>
			} else if(dilSecim == 1) {
 80037c6:	4b4f      	ldr	r3, [pc, #316]	; (8003904 <menu+0x2430>)
 80037c8:	781b      	ldrb	r3, [r3, #0]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d104      	bne.n	80037d8 <menu+0x2304>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 80037ce:	4a59      	ldr	r2, [pc, #356]	; (8003934 <menu+0x2460>)
 80037d0:	2101      	movs	r1, #1
 80037d2:	2001      	movs	r0, #1
 80037d4:	f7fc ff48 	bl	8000668 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 80037d8:	4b57      	ldr	r3, [pc, #348]	; (8003938 <menu+0x2464>)
 80037da:	781b      	ldrb	r3, [r3, #0]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d113      	bne.n	8003808 <menu+0x2334>
			if(dilSecim == 0) {
 80037e0:	4b48      	ldr	r3, [pc, #288]	; (8003904 <menu+0x2430>)
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d105      	bne.n	80037f4 <menu+0x2320>
				lcd_print(2, 1, "Tek tesir       ");
 80037e8:	4a54      	ldr	r2, [pc, #336]	; (800393c <menu+0x2468>)
 80037ea:	2101      	movs	r1, #1
 80037ec:	2002      	movs	r0, #2
 80037ee:	f7fc ff3b 	bl	8000668 <lcd_print>
 80037f2:	e020      	b.n	8003836 <menu+0x2362>
			} else if(dilSecim == 1) {
 80037f4:	4b43      	ldr	r3, [pc, #268]	; (8003904 <menu+0x2430>)
 80037f6:	781b      	ldrb	r3, [r3, #0]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d11c      	bne.n	8003836 <menu+0x2362>
				lcd_print(2, 1, "Single acting  ");
 80037fc:	4a50      	ldr	r2, [pc, #320]	; (8003940 <menu+0x246c>)
 80037fe:	2101      	movs	r1, #1
 8003800:	2002      	movs	r0, #2
 8003802:	f7fc ff31 	bl	8000668 <lcd_print>
 8003806:	e016      	b.n	8003836 <menu+0x2362>
			}
		} else if(devirmeSilindirTipi == 1) {
 8003808:	4b4b      	ldr	r3, [pc, #300]	; (8003938 <menu+0x2464>)
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	2b01      	cmp	r3, #1
 800380e:	d112      	bne.n	8003836 <menu+0x2362>
			if(dilSecim == 0) {
 8003810:	4b3c      	ldr	r3, [pc, #240]	; (8003904 <menu+0x2430>)
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d105      	bne.n	8003824 <menu+0x2350>
				lcd_print(2, 1, "Cift tesir      ");
 8003818:	4a4a      	ldr	r2, [pc, #296]	; (8003944 <menu+0x2470>)
 800381a:	2101      	movs	r1, #1
 800381c:	2002      	movs	r0, #2
 800381e:	f7fc ff23 	bl	8000668 <lcd_print>
 8003822:	e008      	b.n	8003836 <menu+0x2362>
			} else if(dilSecim == 1) {
 8003824:	4b37      	ldr	r3, [pc, #220]	; (8003904 <menu+0x2430>)
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	2b01      	cmp	r3, #1
 800382a:	d104      	bne.n	8003836 <menu+0x2362>
				lcd_print(2, 1, "Double acting  ");
 800382c:	4a46      	ldr	r2, [pc, #280]	; (8003948 <menu+0x2474>)
 800382e:	2101      	movs	r1, #1
 8003830:	2002      	movs	r0, #2
 8003832:	f7fc ff19 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003836:	2102      	movs	r1, #2
 8003838:	4834      	ldr	r0, [pc, #208]	; (800390c <menu+0x2438>)
 800383a:	f006 fa15 	bl	8009c68 <HAL_GPIO_ReadPin>
 800383e:	4603      	mov	r3, r0
 8003840:	2b01      	cmp	r3, #1
 8003842:	d119      	bne.n	8003878 <menu+0x23a4>
 8003844:	4b32      	ldr	r3, [pc, #200]	; (8003910 <menu+0x243c>)
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	f083 0301 	eor.w	r3, r3, #1
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d012      	beq.n	8003878 <menu+0x23a4>
 8003852:	4b34      	ldr	r3, [pc, #208]	; (8003924 <menu+0x2450>)
 8003854:	781b      	ldrb	r3, [r3, #0]
 8003856:	2b02      	cmp	r3, #2
 8003858:	d10e      	bne.n	8003878 <menu+0x23a4>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 800385a:	4b37      	ldr	r3, [pc, #220]	; (8003938 <menu+0x2464>)
 800385c:	781b      	ldrb	r3, [r3, #0]
 800385e:	3301      	adds	r3, #1
 8003860:	b2da      	uxtb	r2, r3
 8003862:	4b35      	ldr	r3, [pc, #212]	; (8003938 <menu+0x2464>)
 8003864:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 8003866:	4b34      	ldr	r3, [pc, #208]	; (8003938 <menu+0x2464>)
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d902      	bls.n	8003874 <menu+0x23a0>
				devirmeSilindirTipi = 0;
 800386e:	4b32      	ldr	r3, [pc, #200]	; (8003938 <menu+0x2464>)
 8003870:	2200      	movs	r2, #0
 8003872:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003874:	f002 fbba 	bl	8005fec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003878:	2104      	movs	r1, #4
 800387a:	4824      	ldr	r0, [pc, #144]	; (800390c <menu+0x2438>)
 800387c:	f006 f9f4 	bl	8009c68 <HAL_GPIO_ReadPin>
 8003880:	4603      	mov	r3, r0
 8003882:	2b01      	cmp	r3, #1
 8003884:	d119      	bne.n	80038ba <menu+0x23e6>
 8003886:	4b22      	ldr	r3, [pc, #136]	; (8003910 <menu+0x243c>)
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	f083 0301 	eor.w	r3, r3, #1
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b00      	cmp	r3, #0
 8003892:	d012      	beq.n	80038ba <menu+0x23e6>
 8003894:	4b23      	ldr	r3, [pc, #140]	; (8003924 <menu+0x2450>)
 8003896:	781b      	ldrb	r3, [r3, #0]
 8003898:	2b02      	cmp	r3, #2
 800389a:	d10e      	bne.n	80038ba <menu+0x23e6>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 800389c:	4b26      	ldr	r3, [pc, #152]	; (8003938 <menu+0x2464>)
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	3b01      	subs	r3, #1
 80038a2:	b2da      	uxtb	r2, r3
 80038a4:	4b24      	ldr	r3, [pc, #144]	; (8003938 <menu+0x2464>)
 80038a6:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 80038a8:	4b23      	ldr	r3, [pc, #140]	; (8003938 <menu+0x2464>)
 80038aa:	781b      	ldrb	r3, [r3, #0]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d002      	beq.n	80038b6 <menu+0x23e2>
		   		devirmeSilindirTipi = 1;
 80038b0:	4b21      	ldr	r3, [pc, #132]	; (8003938 <menu+0x2464>)
 80038b2:	2201      	movs	r2, #1
 80038b4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80038b6:	f002 fb99 	bl	8005fec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80038ba:	2108      	movs	r1, #8
 80038bc:	4813      	ldr	r0, [pc, #76]	; (800390c <menu+0x2438>)
 80038be:	f006 f9d3 	bl	8009c68 <HAL_GPIO_ReadPin>
 80038c2:	4603      	mov	r3, r0
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d10d      	bne.n	80038e4 <menu+0x2410>
 80038c8:	4b11      	ldr	r3, [pc, #68]	; (8003910 <menu+0x243c>)
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	f083 0301 	eor.w	r3, r3, #1
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d006      	beq.n	80038e4 <menu+0x2410>
			eepromData[18] = devirmeSilindirTipi;
 80038d6:	4b18      	ldr	r3, [pc, #96]	; (8003938 <menu+0x2464>)
 80038d8:	781a      	ldrb	r2, [r3, #0]
 80038da:	4b0f      	ldr	r3, [pc, #60]	; (8003918 <menu+0x2444>)
 80038dc:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 80038de:	4b0f      	ldr	r3, [pc, #60]	; (800391c <menu+0x2448>)
 80038e0:	2201      	movs	r2, #1
 80038e2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 80038e4:	4b0e      	ldr	r3, [pc, #56]	; (8003920 <menu+0x244c>)
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	2b15      	cmp	r3, #21
 80038ea:	f040 80c2 	bne.w	8003a72 <menu+0x259e>
		if(dilSecim == 0) {
 80038ee:	4b05      	ldr	r3, [pc, #20]	; (8003904 <menu+0x2430>)
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d12c      	bne.n	8003950 <menu+0x247c>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 80038f6:	4a15      	ldr	r2, [pc, #84]	; (800394c <menu+0x2478>)
 80038f8:	2101      	movs	r1, #1
 80038fa:	2001      	movs	r0, #1
 80038fc:	f7fc feb4 	bl	8000668 <lcd_print>
 8003900:	e02f      	b.n	8003962 <menu+0x248e>
 8003902:	bf00      	nop
 8003904:	20000c6a 	.word	0x20000c6a
 8003908:	0800dc60 	.word	0x0800dc60
 800390c:	40010800 	.word	0x40010800
 8003910:	20000c78 	.word	0x20000c78
 8003914:	20000c5a 	.word	0x20000c5a
 8003918:	20000b38 	.word	0x20000b38
 800391c:	20000c75 	.word	0x20000c75
 8003920:	20000c49 	.word	0x20000c49
 8003924:	20000c58 	.word	0x20000c58
 8003928:	0800e0e0 	.word	0x0800e0e0
 800392c:	0800e0f4 	.word	0x0800e0f4
 8003930:	0800e108 	.word	0x0800e108
 8003934:	0800e11c 	.word	0x0800e11c
 8003938:	20000c5b 	.word	0x20000c5b
 800393c:	0800e130 	.word	0x0800e130
 8003940:	0800e144 	.word	0x0800e144
 8003944:	0800e154 	.word	0x0800e154
 8003948:	0800e168 	.word	0x0800e168
 800394c:	0800e178 	.word	0x0800e178
		} else if(dilSecim == 1) {
 8003950:	4b9c      	ldr	r3, [pc, #624]	; (8003bc4 <menu+0x26f0>)
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d104      	bne.n	8003962 <menu+0x248e>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 8003958:	4a9b      	ldr	r2, [pc, #620]	; (8003bc8 <menu+0x26f4>)
 800395a:	2101      	movs	r1, #1
 800395c:	2001      	movs	r0, #1
 800395e:	f7fc fe83 	bl	8000668 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 8003962:	4b9a      	ldr	r3, [pc, #616]	; (8003bcc <menu+0x26f8>)
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d112      	bne.n	8003990 <menu+0x24bc>
			if(dilSecim == 0) {
 800396a:	4b96      	ldr	r3, [pc, #600]	; (8003bc4 <menu+0x26f0>)
 800396c:	781b      	ldrb	r3, [r3, #0]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d104      	bne.n	800397c <menu+0x24a8>
				lcd_print(2, 1, "Tek tesir       ");
 8003972:	4a97      	ldr	r2, [pc, #604]	; (8003bd0 <menu+0x26fc>)
 8003974:	2101      	movs	r1, #1
 8003976:	2002      	movs	r0, #2
 8003978:	f7fc fe76 	bl	8000668 <lcd_print>
			}
			if(dilSecim == 1) {
 800397c:	4b91      	ldr	r3, [pc, #580]	; (8003bc4 <menu+0x26f0>)
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	2b01      	cmp	r3, #1
 8003982:	d11c      	bne.n	80039be <menu+0x24ea>
				lcd_print(2, 1, "Single acting  ");
 8003984:	4a93      	ldr	r2, [pc, #588]	; (8003bd4 <menu+0x2700>)
 8003986:	2101      	movs	r1, #1
 8003988:	2002      	movs	r0, #2
 800398a:	f7fc fe6d 	bl	8000668 <lcd_print>
 800398e:	e016      	b.n	80039be <menu+0x24ea>
			}
		} else if(platformSilindirTipi == 1) {
 8003990:	4b8e      	ldr	r3, [pc, #568]	; (8003bcc <menu+0x26f8>)
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d112      	bne.n	80039be <menu+0x24ea>
			if(dilSecim == 0) {
 8003998:	4b8a      	ldr	r3, [pc, #552]	; (8003bc4 <menu+0x26f0>)
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d105      	bne.n	80039ac <menu+0x24d8>
				lcd_print(2, 1, "Cift tesir      ");
 80039a0:	4a8d      	ldr	r2, [pc, #564]	; (8003bd8 <menu+0x2704>)
 80039a2:	2101      	movs	r1, #1
 80039a4:	2002      	movs	r0, #2
 80039a6:	f7fc fe5f 	bl	8000668 <lcd_print>
 80039aa:	e008      	b.n	80039be <menu+0x24ea>
			} else if(dilSecim == 1) {
 80039ac:	4b85      	ldr	r3, [pc, #532]	; (8003bc4 <menu+0x26f0>)
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d104      	bne.n	80039be <menu+0x24ea>
				lcd_print(2, 1, "Double acting  ");
 80039b4:	4a89      	ldr	r2, [pc, #548]	; (8003bdc <menu+0x2708>)
 80039b6:	2101      	movs	r1, #1
 80039b8:	2002      	movs	r0, #2
 80039ba:	f7fc fe55 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80039be:	2102      	movs	r1, #2
 80039c0:	4887      	ldr	r0, [pc, #540]	; (8003be0 <menu+0x270c>)
 80039c2:	f006 f951 	bl	8009c68 <HAL_GPIO_ReadPin>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d115      	bne.n	80039f8 <menu+0x2524>
 80039cc:	4b85      	ldr	r3, [pc, #532]	; (8003be4 <menu+0x2710>)
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	f083 0301 	eor.w	r3, r3, #1
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00e      	beq.n	80039f8 <menu+0x2524>
			platformSilindirTipi = platformSilindirTipi + 1;
 80039da:	4b7c      	ldr	r3, [pc, #496]	; (8003bcc <menu+0x26f8>)
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	3301      	adds	r3, #1
 80039e0:	b2da      	uxtb	r2, r3
 80039e2:	4b7a      	ldr	r3, [pc, #488]	; (8003bcc <menu+0x26f8>)
 80039e4:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 80039e6:	4b79      	ldr	r3, [pc, #484]	; (8003bcc <menu+0x26f8>)
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d902      	bls.n	80039f4 <menu+0x2520>
				platformSilindirTipi = 0;
 80039ee:	4b77      	ldr	r3, [pc, #476]	; (8003bcc <menu+0x26f8>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80039f4:	f002 fafa 	bl	8005fec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80039f8:	2104      	movs	r1, #4
 80039fa:	4879      	ldr	r0, [pc, #484]	; (8003be0 <menu+0x270c>)
 80039fc:	f006 f934 	bl	8009c68 <HAL_GPIO_ReadPin>
 8003a00:	4603      	mov	r3, r0
 8003a02:	2b01      	cmp	r3, #1
 8003a04:	d115      	bne.n	8003a32 <menu+0x255e>
 8003a06:	4b77      	ldr	r3, [pc, #476]	; (8003be4 <menu+0x2710>)
 8003a08:	781b      	ldrb	r3, [r3, #0]
 8003a0a:	f083 0301 	eor.w	r3, r3, #1
 8003a0e:	b2db      	uxtb	r3, r3
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d00e      	beq.n	8003a32 <menu+0x255e>
			platformSilindirTipi = platformSilindirTipi - 1;
 8003a14:	4b6d      	ldr	r3, [pc, #436]	; (8003bcc <menu+0x26f8>)
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	3b01      	subs	r3, #1
 8003a1a:	b2da      	uxtb	r2, r3
 8003a1c:	4b6b      	ldr	r3, [pc, #428]	; (8003bcc <menu+0x26f8>)
 8003a1e:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8003a20:	4b6a      	ldr	r3, [pc, #424]	; (8003bcc <menu+0x26f8>)
 8003a22:	781b      	ldrb	r3, [r3, #0]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d002      	beq.n	8003a2e <menu+0x255a>
		   		platformSilindirTipi = 1;
 8003a28:	4b68      	ldr	r3, [pc, #416]	; (8003bcc <menu+0x26f8>)
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003a2e:	f002 fadd 	bl	8005fec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a32:	2108      	movs	r1, #8
 8003a34:	486a      	ldr	r0, [pc, #424]	; (8003be0 <menu+0x270c>)
 8003a36:	f006 f917 	bl	8009c68 <HAL_GPIO_ReadPin>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	2b01      	cmp	r3, #1
 8003a3e:	d118      	bne.n	8003a72 <menu+0x259e>
 8003a40:	4b68      	ldr	r3, [pc, #416]	; (8003be4 <menu+0x2710>)
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	f083 0301 	eor.w	r3, r3, #1
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d011      	beq.n	8003a72 <menu+0x259e>
			eepromData[19] = platformSilindirTipi;
 8003a4e:	4b5f      	ldr	r3, [pc, #380]	; (8003bcc <menu+0x26f8>)
 8003a50:	781a      	ldrb	r2, [r3, #0]
 8003a52:	4b65      	ldr	r3, [pc, #404]	; (8003be8 <menu+0x2714>)
 8003a54:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8003a56:	4b5d      	ldr	r3, [pc, #372]	; (8003bcc <menu+0x26f8>)
 8003a58:	781b      	ldrb	r3, [r3, #0]
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d106      	bne.n	8003a6c <menu+0x2598>
				altLimit = 1;
 8003a5e:	4b63      	ldr	r3, [pc, #396]	; (8003bec <menu+0x2718>)
 8003a60:	2201      	movs	r2, #1
 8003a62:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8003a64:	4b61      	ldr	r3, [pc, #388]	; (8003bec <menu+0x2718>)
 8003a66:	781a      	ldrb	r2, [r3, #0]
 8003a68:	4b5f      	ldr	r3, [pc, #380]	; (8003be8 <menu+0x2714>)
 8003a6a:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8003a6c:	4b60      	ldr	r3, [pc, #384]	; (8003bf0 <menu+0x271c>)
 8003a6e:	2201      	movs	r2, #1
 8003a70:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8003a72:	4b60      	ldr	r3, [pc, #384]	; (8003bf4 <menu+0x2720>)
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	2b16      	cmp	r3, #22
 8003a78:	f040 8081 	bne.w	8003b7e <menu+0x26aa>
		if(dilSecim == 0) {
 8003a7c:	4b51      	ldr	r3, [pc, #324]	; (8003bc4 <menu+0x26f0>)
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d105      	bne.n	8003a90 <menu+0x25bc>
			lcd_print(1, 1, "YUKARI VALF SURE");
 8003a84:	4a5c      	ldr	r2, [pc, #368]	; (8003bf8 <menu+0x2724>)
 8003a86:	2101      	movs	r1, #1
 8003a88:	2001      	movs	r0, #1
 8003a8a:	f7fc fded 	bl	8000668 <lcd_print>
 8003a8e:	e008      	b.n	8003aa2 <menu+0x25ce>
		} else if(dilSecim == 1) {
 8003a90:	4b4c      	ldr	r3, [pc, #304]	; (8003bc4 <menu+0x26f0>)
 8003a92:	781b      	ldrb	r3, [r3, #0]
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d104      	bne.n	8003aa2 <menu+0x25ce>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8003a98:	4a58      	ldr	r2, [pc, #352]	; (8003bfc <menu+0x2728>)
 8003a9a:	2101      	movs	r1, #1
 8003a9c:	2001      	movs	r0, #1
 8003a9e:	f7fc fde3 	bl	8000668 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 8003aa2:	4b48      	ldr	r3, [pc, #288]	; (8003bc4 <menu+0x26f0>)
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d105      	bne.n	8003ab6 <menu+0x25e2>
				lcd_print(2, 1, "Kac Saniye     ");
 8003aaa:	4a55      	ldr	r2, [pc, #340]	; (8003c00 <menu+0x272c>)
 8003aac:	2101      	movs	r1, #1
 8003aae:	2002      	movs	r0, #2
 8003ab0:	f7fc fdda 	bl	8000668 <lcd_print>
 8003ab4:	e008      	b.n	8003ac8 <menu+0x25f4>
			} else if(dilSecim == 1){
 8003ab6:	4b43      	ldr	r3, [pc, #268]	; (8003bc4 <menu+0x26f0>)
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d104      	bne.n	8003ac8 <menu+0x25f4>
				lcd_print(2, 1, "Second         ");
 8003abe:	4a51      	ldr	r2, [pc, #324]	; (8003c04 <menu+0x2730>)
 8003ac0:	2101      	movs	r1, #1
 8003ac2:	2002      	movs	r0, #2
 8003ac4:	f7fc fdd0 	bl	8000668 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8003ac8:	4b4f      	ldr	r3, [pc, #316]	; (8003c08 <menu+0x2734>)
 8003aca:	781b      	ldrb	r3, [r3, #0]
 8003acc:	220a      	movs	r2, #10
 8003ace:	494f      	ldr	r1, [pc, #316]	; (8003c0c <menu+0x2738>)
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f009 f8f5 	bl	800ccc0 <itoa>
		lcd_print(2,16,snum);
 8003ad6:	4a4d      	ldr	r2, [pc, #308]	; (8003c0c <menu+0x2738>)
 8003ad8:	2110      	movs	r1, #16
 8003ada:	2002      	movs	r0, #2
 8003adc:	f7fc fdc4 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ae0:	2102      	movs	r1, #2
 8003ae2:	483f      	ldr	r0, [pc, #252]	; (8003be0 <menu+0x270c>)
 8003ae4:	f006 f8c0 	bl	8009c68 <HAL_GPIO_ReadPin>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	d115      	bne.n	8003b1a <menu+0x2646>
 8003aee:	4b3d      	ldr	r3, [pc, #244]	; (8003be4 <menu+0x2710>)
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	f083 0301 	eor.w	r3, r3, #1
 8003af6:	b2db      	uxtb	r3, r3
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00e      	beq.n	8003b1a <menu+0x2646>
			yukariValfTmr = yukariValfTmr + 1;
 8003afc:	4b42      	ldr	r3, [pc, #264]	; (8003c08 <menu+0x2734>)
 8003afe:	781b      	ldrb	r3, [r3, #0]
 8003b00:	3301      	adds	r3, #1
 8003b02:	b2da      	uxtb	r2, r3
 8003b04:	4b40      	ldr	r3, [pc, #256]	; (8003c08 <menu+0x2734>)
 8003b06:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8003b08:	4b3f      	ldr	r3, [pc, #252]	; (8003c08 <menu+0x2734>)
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	2b05      	cmp	r3, #5
 8003b0e:	d902      	bls.n	8003b16 <menu+0x2642>
				yukariValfTmr = 0;
 8003b10:	4b3d      	ldr	r3, [pc, #244]	; (8003c08 <menu+0x2734>)
 8003b12:	2200      	movs	r2, #0
 8003b14:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003b16:	f002 fa69 	bl	8005fec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b1a:	2104      	movs	r1, #4
 8003b1c:	4830      	ldr	r0, [pc, #192]	; (8003be0 <menu+0x270c>)
 8003b1e:	f006 f8a3 	bl	8009c68 <HAL_GPIO_ReadPin>
 8003b22:	4603      	mov	r3, r0
 8003b24:	2b01      	cmp	r3, #1
 8003b26:	d115      	bne.n	8003b54 <menu+0x2680>
 8003b28:	4b2e      	ldr	r3, [pc, #184]	; (8003be4 <menu+0x2710>)
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	f083 0301 	eor.w	r3, r3, #1
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00e      	beq.n	8003b54 <menu+0x2680>
			yukariValfTmr = yukariValfTmr - 1;
 8003b36:	4b34      	ldr	r3, [pc, #208]	; (8003c08 <menu+0x2734>)
 8003b38:	781b      	ldrb	r3, [r3, #0]
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	b2da      	uxtb	r2, r3
 8003b3e:	4b32      	ldr	r3, [pc, #200]	; (8003c08 <menu+0x2734>)
 8003b40:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8003b42:	4b31      	ldr	r3, [pc, #196]	; (8003c08 <menu+0x2734>)
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	2b06      	cmp	r3, #6
 8003b48:	d902      	bls.n	8003b50 <menu+0x267c>
		   		yukariValfTmr = 5;
 8003b4a:	4b2f      	ldr	r3, [pc, #188]	; (8003c08 <menu+0x2734>)
 8003b4c:	2205      	movs	r2, #5
 8003b4e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003b50:	f002 fa4c 	bl	8005fec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b54:	2108      	movs	r1, #8
 8003b56:	4822      	ldr	r0, [pc, #136]	; (8003be0 <menu+0x270c>)
 8003b58:	f006 f886 	bl	8009c68 <HAL_GPIO_ReadPin>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	d10d      	bne.n	8003b7e <menu+0x26aa>
 8003b62:	4b20      	ldr	r3, [pc, #128]	; (8003be4 <menu+0x2710>)
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	f083 0301 	eor.w	r3, r3, #1
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d006      	beq.n	8003b7e <menu+0x26aa>
			eepromData[20] = yukariValfTmr;
 8003b70:	4b25      	ldr	r3, [pc, #148]	; (8003c08 <menu+0x2734>)
 8003b72:	781a      	ldrb	r2, [r3, #0]
 8003b74:	4b1c      	ldr	r3, [pc, #112]	; (8003be8 <menu+0x2714>)
 8003b76:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8003b78:	4b1d      	ldr	r3, [pc, #116]	; (8003bf0 <menu+0x271c>)
 8003b7a:	2201      	movs	r2, #1
 8003b7c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8003b7e:	4b1d      	ldr	r3, [pc, #116]	; (8003bf4 <menu+0x2720>)
 8003b80:	781b      	ldrb	r3, [r3, #0]
 8003b82:	2b17      	cmp	r3, #23
 8003b84:	f040 80ac 	bne.w	8003ce0 <menu+0x280c>
		if(dilSecim == 0) {
 8003b88:	4b0e      	ldr	r3, [pc, #56]	; (8003bc4 <menu+0x26f0>)
 8003b8a:	781b      	ldrb	r3, [r3, #0]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d105      	bne.n	8003b9c <menu+0x26c8>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8003b90:	4a1f      	ldr	r2, [pc, #124]	; (8003c10 <menu+0x273c>)
 8003b92:	2101      	movs	r1, #1
 8003b94:	2001      	movs	r0, #1
 8003b96:	f7fc fd67 	bl	8000668 <lcd_print>
 8003b9a:	e008      	b.n	8003bae <menu+0x26da>
		} else if(dilSecim == 1) {
 8003b9c:	4b09      	ldr	r3, [pc, #36]	; (8003bc4 <menu+0x26f0>)
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d104      	bne.n	8003bae <menu+0x26da>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8003ba4:	4a1b      	ldr	r2, [pc, #108]	; (8003c14 <menu+0x2740>)
 8003ba6:	2101      	movs	r1, #1
 8003ba8:	2001      	movs	r0, #1
 8003baa:	f7fc fd5d 	bl	8000668 <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 8003bae:	4b05      	ldr	r3, [pc, #20]	; (8003bc4 <menu+0x26f0>)
 8003bb0:	781b      	ldrb	r3, [r3, #0]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d130      	bne.n	8003c18 <menu+0x2744>
				lcd_print(2, 1, "Kac Saniye     ");
 8003bb6:	4a12      	ldr	r2, [pc, #72]	; (8003c00 <menu+0x272c>)
 8003bb8:	2101      	movs	r1, #1
 8003bba:	2002      	movs	r0, #2
 8003bbc:	f7fc fd54 	bl	8000668 <lcd_print>
 8003bc0:	e033      	b.n	8003c2a <menu+0x2756>
 8003bc2:	bf00      	nop
 8003bc4:	20000c6a 	.word	0x20000c6a
 8003bc8:	0800e18c 	.word	0x0800e18c
 8003bcc:	20000c5c 	.word	0x20000c5c
 8003bd0:	0800e130 	.word	0x0800e130
 8003bd4:	0800e144 	.word	0x0800e144
 8003bd8:	0800e154 	.word	0x0800e154
 8003bdc:	0800e168 	.word	0x0800e168
 8003be0:	40010800 	.word	0x40010800
 8003be4:	20000c78 	.word	0x20000c78
 8003be8:	20000b38 	.word	0x20000b38
 8003bec:	20000c4f 	.word	0x20000c4f
 8003bf0:	20000c75 	.word	0x20000c75
 8003bf4:	20000c49 	.word	0x20000c49
 8003bf8:	0800e19c 	.word	0x0800e19c
 8003bfc:	0800e1b0 	.word	0x0800e1b0
 8003c00:	0800de50 	.word	0x0800de50
 8003c04:	0800e1c4 	.word	0x0800e1c4
 8003c08:	20000c5d 	.word	0x20000c5d
 8003c0c:	20000bcc 	.word	0x20000bcc
 8003c10:	0800e1d4 	.word	0x0800e1d4
 8003c14:	0800e1e8 	.word	0x0800e1e8
			} else if(dilSecim == 1) {
 8003c18:	4b98      	ldr	r3, [pc, #608]	; (8003e7c <menu+0x29a8>)
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d104      	bne.n	8003c2a <menu+0x2756>
				lcd_print(2, 1, "Second         ");
 8003c20:	4a97      	ldr	r2, [pc, #604]	; (8003e80 <menu+0x29ac>)
 8003c22:	2101      	movs	r1, #1
 8003c24:	2002      	movs	r0, #2
 8003c26:	f7fc fd1f 	bl	8000668 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8003c2a:	4b96      	ldr	r3, [pc, #600]	; (8003e84 <menu+0x29b0>)
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	220a      	movs	r2, #10
 8003c30:	4995      	ldr	r1, [pc, #596]	; (8003e88 <menu+0x29b4>)
 8003c32:	4618      	mov	r0, r3
 8003c34:	f009 f844 	bl	800ccc0 <itoa>
		lcd_print(2,16,snum);
 8003c38:	4a93      	ldr	r2, [pc, #588]	; (8003e88 <menu+0x29b4>)
 8003c3a:	2110      	movs	r1, #16
 8003c3c:	2002      	movs	r0, #2
 8003c3e:	f7fc fd13 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c42:	2102      	movs	r1, #2
 8003c44:	4891      	ldr	r0, [pc, #580]	; (8003e8c <menu+0x29b8>)
 8003c46:	f006 f80f 	bl	8009c68 <HAL_GPIO_ReadPin>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d115      	bne.n	8003c7c <menu+0x27a8>
 8003c50:	4b8f      	ldr	r3, [pc, #572]	; (8003e90 <menu+0x29bc>)
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	f083 0301 	eor.w	r3, r3, #1
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00e      	beq.n	8003c7c <menu+0x27a8>
			asagiValfTmr = asagiValfTmr + 1;
 8003c5e:	4b89      	ldr	r3, [pc, #548]	; (8003e84 <menu+0x29b0>)
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	3301      	adds	r3, #1
 8003c64:	b2da      	uxtb	r2, r3
 8003c66:	4b87      	ldr	r3, [pc, #540]	; (8003e84 <menu+0x29b0>)
 8003c68:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003c6a:	4b86      	ldr	r3, [pc, #536]	; (8003e84 <menu+0x29b0>)
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	2b05      	cmp	r3, #5
 8003c70:	d902      	bls.n	8003c78 <menu+0x27a4>
				asagiValfTmr = 0;
 8003c72:	4b84      	ldr	r3, [pc, #528]	; (8003e84 <menu+0x29b0>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003c78:	f002 f9b8 	bl	8005fec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c7c:	2104      	movs	r1, #4
 8003c7e:	4883      	ldr	r0, [pc, #524]	; (8003e8c <menu+0x29b8>)
 8003c80:	f005 fff2 	bl	8009c68 <HAL_GPIO_ReadPin>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d115      	bne.n	8003cb6 <menu+0x27e2>
 8003c8a:	4b81      	ldr	r3, [pc, #516]	; (8003e90 <menu+0x29bc>)
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	f083 0301 	eor.w	r3, r3, #1
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00e      	beq.n	8003cb6 <menu+0x27e2>
			asagiValfTmr = asagiValfTmr - 1;
 8003c98:	4b7a      	ldr	r3, [pc, #488]	; (8003e84 <menu+0x29b0>)
 8003c9a:	781b      	ldrb	r3, [r3, #0]
 8003c9c:	3b01      	subs	r3, #1
 8003c9e:	b2da      	uxtb	r2, r3
 8003ca0:	4b78      	ldr	r3, [pc, #480]	; (8003e84 <menu+0x29b0>)
 8003ca2:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003ca4:	4b77      	ldr	r3, [pc, #476]	; (8003e84 <menu+0x29b0>)
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	2b06      	cmp	r3, #6
 8003caa:	d902      	bls.n	8003cb2 <menu+0x27de>
		   		asagiValfTmr = 5;
 8003cac:	4b75      	ldr	r3, [pc, #468]	; (8003e84 <menu+0x29b0>)
 8003cae:	2205      	movs	r2, #5
 8003cb0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003cb2:	f002 f99b 	bl	8005fec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003cb6:	2108      	movs	r1, #8
 8003cb8:	4874      	ldr	r0, [pc, #464]	; (8003e8c <menu+0x29b8>)
 8003cba:	f005 ffd5 	bl	8009c68 <HAL_GPIO_ReadPin>
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d10d      	bne.n	8003ce0 <menu+0x280c>
 8003cc4:	4b72      	ldr	r3, [pc, #456]	; (8003e90 <menu+0x29bc>)
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	f083 0301 	eor.w	r3, r3, #1
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d006      	beq.n	8003ce0 <menu+0x280c>
			eepromData[21] = asagiValfTmr;
 8003cd2:	4b6c      	ldr	r3, [pc, #432]	; (8003e84 <menu+0x29b0>)
 8003cd4:	781a      	ldrb	r2, [r3, #0]
 8003cd6:	4b6f      	ldr	r3, [pc, #444]	; (8003e94 <menu+0x29c0>)
 8003cd8:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8003cda:	4b6f      	ldr	r3, [pc, #444]	; (8003e98 <menu+0x29c4>)
 8003cdc:	2201      	movs	r2, #1
 8003cde:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8003ce0:	4b6e      	ldr	r3, [pc, #440]	; (8003e9c <menu+0x29c8>)
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	2b18      	cmp	r3, #24
 8003ce6:	f040 809d 	bne.w	8003e24 <menu+0x2950>
		if(devirmeYuruyusSecim == 2) {
 8003cea:	4b6d      	ldr	r3, [pc, #436]	; (8003ea0 <menu+0x29cc>)
 8003cec:	781b      	ldrb	r3, [r3, #0]
 8003cee:	2b02      	cmp	r3, #2
 8003cf0:	d113      	bne.n	8003d1a <menu+0x2846>
			if(dilSecim == 0) {
 8003cf2:	4b62      	ldr	r3, [pc, #392]	; (8003e7c <menu+0x29a8>)
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d105      	bne.n	8003d06 <menu+0x2832>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8003cfa:	4a6a      	ldr	r2, [pc, #424]	; (8003ea4 <menu+0x29d0>)
 8003cfc:	2101      	movs	r1, #1
 8003cfe:	2001      	movs	r0, #1
 8003d00:	f7fc fcb2 	bl	8000668 <lcd_print>
 8003d04:	e020      	b.n	8003d48 <menu+0x2874>
			} else if(dilSecim == 1) {
 8003d06:	4b5d      	ldr	r3, [pc, #372]	; (8003e7c <menu+0x29a8>)
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d11c      	bne.n	8003d48 <menu+0x2874>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8003d0e:	4a66      	ldr	r2, [pc, #408]	; (8003ea8 <menu+0x29d4>)
 8003d10:	2101      	movs	r1, #1
 8003d12:	2001      	movs	r0, #1
 8003d14:	f7fc fca8 	bl	8000668 <lcd_print>
 8003d18:	e016      	b.n	8003d48 <menu+0x2874>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003d1a:	4b61      	ldr	r3, [pc, #388]	; (8003ea0 <menu+0x29cc>)
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	2b01      	cmp	r3, #1
 8003d20:	d112      	bne.n	8003d48 <menu+0x2874>
			if(dilSecim == 0) {
 8003d22:	4b56      	ldr	r3, [pc, #344]	; (8003e7c <menu+0x29a8>)
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d105      	bne.n	8003d36 <menu+0x2862>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8003d2a:	4a60      	ldr	r2, [pc, #384]	; (8003eac <menu+0x29d8>)
 8003d2c:	2101      	movs	r1, #1
 8003d2e:	2001      	movs	r0, #1
 8003d30:	f7fc fc9a 	bl	8000668 <lcd_print>
 8003d34:	e008      	b.n	8003d48 <menu+0x2874>
			} else if(dilSecim == 1) {
 8003d36:	4b51      	ldr	r3, [pc, #324]	; (8003e7c <menu+0x29a8>)
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d104      	bne.n	8003d48 <menu+0x2874>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8003d3e:	4a5c      	ldr	r2, [pc, #368]	; (8003eb0 <menu+0x29dc>)
 8003d40:	2101      	movs	r1, #1
 8003d42:	2001      	movs	r0, #1
 8003d44:	f7fc fc90 	bl	8000668 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003d48:	4b4c      	ldr	r3, [pc, #304]	; (8003e7c <menu+0x29a8>)
 8003d4a:	781b      	ldrb	r3, [r3, #0]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d105      	bne.n	8003d5c <menu+0x2888>
				lcd_print(2, 1, "Kac Saniye     ");
 8003d50:	4a58      	ldr	r2, [pc, #352]	; (8003eb4 <menu+0x29e0>)
 8003d52:	2101      	movs	r1, #1
 8003d54:	2002      	movs	r0, #2
 8003d56:	f7fc fc87 	bl	8000668 <lcd_print>
 8003d5a:	e008      	b.n	8003d6e <menu+0x289a>
			} else if(dilSecim == 1) {
 8003d5c:	4b47      	ldr	r3, [pc, #284]	; (8003e7c <menu+0x29a8>)
 8003d5e:	781b      	ldrb	r3, [r3, #0]
 8003d60:	2b01      	cmp	r3, #1
 8003d62:	d104      	bne.n	8003d6e <menu+0x289a>
				lcd_print(2, 1, "Second         ");
 8003d64:	4a46      	ldr	r2, [pc, #280]	; (8003e80 <menu+0x29ac>)
 8003d66:	2101      	movs	r1, #1
 8003d68:	2002      	movs	r0, #2
 8003d6a:	f7fc fc7d 	bl	8000668 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003d6e:	4b52      	ldr	r3, [pc, #328]	; (8003eb8 <menu+0x29e4>)
 8003d70:	781b      	ldrb	r3, [r3, #0]
 8003d72:	220a      	movs	r2, #10
 8003d74:	4944      	ldr	r1, [pc, #272]	; (8003e88 <menu+0x29b4>)
 8003d76:	4618      	mov	r0, r3
 8003d78:	f008 ffa2 	bl	800ccc0 <itoa>
		lcd_print(2, 16, snum);
 8003d7c:	4a42      	ldr	r2, [pc, #264]	; (8003e88 <menu+0x29b4>)
 8003d7e:	2110      	movs	r1, #16
 8003d80:	2002      	movs	r0, #2
 8003d82:	f7fc fc71 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d86:	2102      	movs	r1, #2
 8003d88:	4840      	ldr	r0, [pc, #256]	; (8003e8c <menu+0x29b8>)
 8003d8a:	f005 ff6d 	bl	8009c68 <HAL_GPIO_ReadPin>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d115      	bne.n	8003dc0 <menu+0x28ec>
 8003d94:	4b3e      	ldr	r3, [pc, #248]	; (8003e90 <menu+0x29bc>)
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	f083 0301 	eor.w	r3, r3, #1
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d00e      	beq.n	8003dc0 <menu+0x28ec>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003da2:	4b45      	ldr	r3, [pc, #276]	; (8003eb8 <menu+0x29e4>)
 8003da4:	781b      	ldrb	r3, [r3, #0]
 8003da6:	3301      	adds	r3, #1
 8003da8:	b2da      	uxtb	r2, r3
 8003daa:	4b43      	ldr	r3, [pc, #268]	; (8003eb8 <menu+0x29e4>)
 8003dac:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003dae:	4b42      	ldr	r3, [pc, #264]	; (8003eb8 <menu+0x29e4>)
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	2b05      	cmp	r3, #5
 8003db4:	d902      	bls.n	8003dbc <menu+0x28e8>
				devirmeYukariIleriTmr = 0;
 8003db6:	4b40      	ldr	r3, [pc, #256]	; (8003eb8 <menu+0x29e4>)
 8003db8:	2200      	movs	r2, #0
 8003dba:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003dbc:	f002 f916 	bl	8005fec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003dc0:	2104      	movs	r1, #4
 8003dc2:	4832      	ldr	r0, [pc, #200]	; (8003e8c <menu+0x29b8>)
 8003dc4:	f005 ff50 	bl	8009c68 <HAL_GPIO_ReadPin>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b01      	cmp	r3, #1
 8003dcc:	d115      	bne.n	8003dfa <menu+0x2926>
 8003dce:	4b30      	ldr	r3, [pc, #192]	; (8003e90 <menu+0x29bc>)
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	f083 0301 	eor.w	r3, r3, #1
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d00e      	beq.n	8003dfa <menu+0x2926>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003ddc:	4b36      	ldr	r3, [pc, #216]	; (8003eb8 <menu+0x29e4>)
 8003dde:	781b      	ldrb	r3, [r3, #0]
 8003de0:	3b01      	subs	r3, #1
 8003de2:	b2da      	uxtb	r2, r3
 8003de4:	4b34      	ldr	r3, [pc, #208]	; (8003eb8 <menu+0x29e4>)
 8003de6:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003de8:	4b33      	ldr	r3, [pc, #204]	; (8003eb8 <menu+0x29e4>)
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	2b06      	cmp	r3, #6
 8003dee:	d902      	bls.n	8003df6 <menu+0x2922>
		   		devirmeYukariIleriTmr = 5;
 8003df0:	4b31      	ldr	r3, [pc, #196]	; (8003eb8 <menu+0x29e4>)
 8003df2:	2205      	movs	r2, #5
 8003df4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003df6:	f002 f8f9 	bl	8005fec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003dfa:	2108      	movs	r1, #8
 8003dfc:	4823      	ldr	r0, [pc, #140]	; (8003e8c <menu+0x29b8>)
 8003dfe:	f005 ff33 	bl	8009c68 <HAL_GPIO_ReadPin>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d10d      	bne.n	8003e24 <menu+0x2950>
 8003e08:	4b21      	ldr	r3, [pc, #132]	; (8003e90 <menu+0x29bc>)
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	f083 0301 	eor.w	r3, r3, #1
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d006      	beq.n	8003e24 <menu+0x2950>
			eepromData[22] = devirmeYukariIleriTmr;
 8003e16:	4b28      	ldr	r3, [pc, #160]	; (8003eb8 <menu+0x29e4>)
 8003e18:	781a      	ldrb	r2, [r3, #0]
 8003e1a:	4b1e      	ldr	r3, [pc, #120]	; (8003e94 <menu+0x29c0>)
 8003e1c:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003e1e:	4b1e      	ldr	r3, [pc, #120]	; (8003e98 <menu+0x29c4>)
 8003e20:	2201      	movs	r2, #1
 8003e22:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003e24:	4b1d      	ldr	r3, [pc, #116]	; (8003e9c <menu+0x29c8>)
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	2b19      	cmp	r3, #25
 8003e2a:	f040 80c4 	bne.w	8003fb6 <menu+0x2ae2>
		if(devirmeYuruyusSecim == 2) {
 8003e2e:	4b1c      	ldr	r3, [pc, #112]	; (8003ea0 <menu+0x29cc>)
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	2b02      	cmp	r3, #2
 8003e34:	d113      	bne.n	8003e5e <menu+0x298a>
			if(dilSecim == 0) {
 8003e36:	4b11      	ldr	r3, [pc, #68]	; (8003e7c <menu+0x29a8>)
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d105      	bne.n	8003e4a <menu+0x2976>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003e3e:	4a1f      	ldr	r2, [pc, #124]	; (8003ebc <menu+0x29e8>)
 8003e40:	2101      	movs	r1, #1
 8003e42:	2001      	movs	r0, #1
 8003e44:	f7fc fc10 	bl	8000668 <lcd_print>
 8003e48:	e047      	b.n	8003eda <menu+0x2a06>
			} else if(dilSecim == 1) {
 8003e4a:	4b0c      	ldr	r3, [pc, #48]	; (8003e7c <menu+0x29a8>)
 8003e4c:	781b      	ldrb	r3, [r3, #0]
 8003e4e:	2b01      	cmp	r3, #1
 8003e50:	d143      	bne.n	8003eda <menu+0x2a06>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003e52:	4a1b      	ldr	r2, [pc, #108]	; (8003ec0 <menu+0x29ec>)
 8003e54:	2101      	movs	r1, #1
 8003e56:	2001      	movs	r0, #1
 8003e58:	f7fc fc06 	bl	8000668 <lcd_print>
 8003e5c:	e03d      	b.n	8003eda <menu+0x2a06>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003e5e:	4b10      	ldr	r3, [pc, #64]	; (8003ea0 <menu+0x29cc>)
 8003e60:	781b      	ldrb	r3, [r3, #0]
 8003e62:	2b01      	cmp	r3, #1
 8003e64:	d139      	bne.n	8003eda <menu+0x2a06>
			if(dilSecim == 0) {
 8003e66:	4b05      	ldr	r3, [pc, #20]	; (8003e7c <menu+0x29a8>)
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d12c      	bne.n	8003ec8 <menu+0x29f4>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003e6e:	4a15      	ldr	r2, [pc, #84]	; (8003ec4 <menu+0x29f0>)
 8003e70:	2101      	movs	r1, #1
 8003e72:	2001      	movs	r0, #1
 8003e74:	f7fc fbf8 	bl	8000668 <lcd_print>
 8003e78:	e02f      	b.n	8003eda <menu+0x2a06>
 8003e7a:	bf00      	nop
 8003e7c:	20000c6a 	.word	0x20000c6a
 8003e80:	0800e1c4 	.word	0x0800e1c4
 8003e84:	20000c5e 	.word	0x20000c5e
 8003e88:	20000bcc 	.word	0x20000bcc
 8003e8c:	40010800 	.word	0x40010800
 8003e90:	20000c78 	.word	0x20000c78
 8003e94:	20000b38 	.word	0x20000b38
 8003e98:	20000c75 	.word	0x20000c75
 8003e9c:	20000c49 	.word	0x20000c49
 8003ea0:	20000c58 	.word	0x20000c58
 8003ea4:	0800e1fc 	.word	0x0800e1fc
 8003ea8:	0800e210 	.word	0x0800e210
 8003eac:	0800e224 	.word	0x0800e224
 8003eb0:	0800e238 	.word	0x0800e238
 8003eb4:	0800de50 	.word	0x0800de50
 8003eb8:	20000c5f 	.word	0x20000c5f
 8003ebc:	0800e24c 	.word	0x0800e24c
 8003ec0:	0800e260 	.word	0x0800e260
 8003ec4:	0800e274 	.word	0x0800e274
			} else if(dilSecim == 1) {
 8003ec8:	4b73      	ldr	r3, [pc, #460]	; (8004098 <menu+0x2bc4>)
 8003eca:	781b      	ldrb	r3, [r3, #0]
 8003ecc:	2b01      	cmp	r3, #1
 8003ece:	d104      	bne.n	8003eda <menu+0x2a06>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8003ed0:	4a72      	ldr	r2, [pc, #456]	; (800409c <menu+0x2bc8>)
 8003ed2:	2101      	movs	r1, #1
 8003ed4:	2001      	movs	r0, #1
 8003ed6:	f7fc fbc7 	bl	8000668 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8003eda:	4b6f      	ldr	r3, [pc, #444]	; (8004098 <menu+0x2bc4>)
 8003edc:	781b      	ldrb	r3, [r3, #0]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d105      	bne.n	8003eee <menu+0x2a1a>
				lcd_print(2, 1, "Kac Saniye     ");
 8003ee2:	4a6f      	ldr	r2, [pc, #444]	; (80040a0 <menu+0x2bcc>)
 8003ee4:	2101      	movs	r1, #1
 8003ee6:	2002      	movs	r0, #2
 8003ee8:	f7fc fbbe 	bl	8000668 <lcd_print>
 8003eec:	e008      	b.n	8003f00 <menu+0x2a2c>
			} else if(dilSecim == 1) {
 8003eee:	4b6a      	ldr	r3, [pc, #424]	; (8004098 <menu+0x2bc4>)
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	2b01      	cmp	r3, #1
 8003ef4:	d104      	bne.n	8003f00 <menu+0x2a2c>
				lcd_print(2, 1, "Second         ");
 8003ef6:	4a6b      	ldr	r2, [pc, #428]	; (80040a4 <menu+0x2bd0>)
 8003ef8:	2101      	movs	r1, #1
 8003efa:	2002      	movs	r0, #2
 8003efc:	f7fc fbb4 	bl	8000668 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003f00:	4b69      	ldr	r3, [pc, #420]	; (80040a8 <menu+0x2bd4>)
 8003f02:	781b      	ldrb	r3, [r3, #0]
 8003f04:	220a      	movs	r2, #10
 8003f06:	4969      	ldr	r1, [pc, #420]	; (80040ac <menu+0x2bd8>)
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f008 fed9 	bl	800ccc0 <itoa>
		lcd_print(2,16,snum);
 8003f0e:	4a67      	ldr	r2, [pc, #412]	; (80040ac <menu+0x2bd8>)
 8003f10:	2110      	movs	r1, #16
 8003f12:	2002      	movs	r0, #2
 8003f14:	f7fc fba8 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f18:	2102      	movs	r1, #2
 8003f1a:	4865      	ldr	r0, [pc, #404]	; (80040b0 <menu+0x2bdc>)
 8003f1c:	f005 fea4 	bl	8009c68 <HAL_GPIO_ReadPin>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d115      	bne.n	8003f52 <menu+0x2a7e>
 8003f26:	4b63      	ldr	r3, [pc, #396]	; (80040b4 <menu+0x2be0>)
 8003f28:	781b      	ldrb	r3, [r3, #0]
 8003f2a:	f083 0301 	eor.w	r3, r3, #1
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d00e      	beq.n	8003f52 <menu+0x2a7e>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8003f34:	4b5c      	ldr	r3, [pc, #368]	; (80040a8 <menu+0x2bd4>)
 8003f36:	781b      	ldrb	r3, [r3, #0]
 8003f38:	3301      	adds	r3, #1
 8003f3a:	b2da      	uxtb	r2, r3
 8003f3c:	4b5a      	ldr	r3, [pc, #360]	; (80040a8 <menu+0x2bd4>)
 8003f3e:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003f40:	4b59      	ldr	r3, [pc, #356]	; (80040a8 <menu+0x2bd4>)
 8003f42:	781b      	ldrb	r3, [r3, #0]
 8003f44:	2b05      	cmp	r3, #5
 8003f46:	d902      	bls.n	8003f4e <menu+0x2a7a>
				devirmeAsagiGeriTmr = 0;
 8003f48:	4b57      	ldr	r3, [pc, #348]	; (80040a8 <menu+0x2bd4>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003f4e:	f002 f84d 	bl	8005fec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f52:	2104      	movs	r1, #4
 8003f54:	4856      	ldr	r0, [pc, #344]	; (80040b0 <menu+0x2bdc>)
 8003f56:	f005 fe87 	bl	8009c68 <HAL_GPIO_ReadPin>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b01      	cmp	r3, #1
 8003f5e:	d115      	bne.n	8003f8c <menu+0x2ab8>
 8003f60:	4b54      	ldr	r3, [pc, #336]	; (80040b4 <menu+0x2be0>)
 8003f62:	781b      	ldrb	r3, [r3, #0]
 8003f64:	f083 0301 	eor.w	r3, r3, #1
 8003f68:	b2db      	uxtb	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00e      	beq.n	8003f8c <menu+0x2ab8>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003f6e:	4b4e      	ldr	r3, [pc, #312]	; (80040a8 <menu+0x2bd4>)
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	3b01      	subs	r3, #1
 8003f74:	b2da      	uxtb	r2, r3
 8003f76:	4b4c      	ldr	r3, [pc, #304]	; (80040a8 <menu+0x2bd4>)
 8003f78:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003f7a:	4b4b      	ldr	r3, [pc, #300]	; (80040a8 <menu+0x2bd4>)
 8003f7c:	781b      	ldrb	r3, [r3, #0]
 8003f7e:	2b06      	cmp	r3, #6
 8003f80:	d902      	bls.n	8003f88 <menu+0x2ab4>
		   		devirmeAsagiGeriTmr = 5;
 8003f82:	4b49      	ldr	r3, [pc, #292]	; (80040a8 <menu+0x2bd4>)
 8003f84:	2205      	movs	r2, #5
 8003f86:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003f88:	f002 f830 	bl	8005fec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f8c:	2108      	movs	r1, #8
 8003f8e:	4848      	ldr	r0, [pc, #288]	; (80040b0 <menu+0x2bdc>)
 8003f90:	f005 fe6a 	bl	8009c68 <HAL_GPIO_ReadPin>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d10d      	bne.n	8003fb6 <menu+0x2ae2>
 8003f9a:	4b46      	ldr	r3, [pc, #280]	; (80040b4 <menu+0x2be0>)
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	f083 0301 	eor.w	r3, r3, #1
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d006      	beq.n	8003fb6 <menu+0x2ae2>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003fa8:	4b3f      	ldr	r3, [pc, #252]	; (80040a8 <menu+0x2bd4>)
 8003faa:	781a      	ldrb	r2, [r3, #0]
 8003fac:	4b42      	ldr	r3, [pc, #264]	; (80040b8 <menu+0x2be4>)
 8003fae:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8003fb0:	4b42      	ldr	r3, [pc, #264]	; (80040bc <menu+0x2be8>)
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003fb6:	4b42      	ldr	r3, [pc, #264]	; (80040c0 <menu+0x2bec>)
 8003fb8:	781b      	ldrb	r3, [r3, #0]
 8003fba:	2b1a      	cmp	r3, #26
 8003fbc:	f040 80ec 	bne.w	8004198 <menu+0x2cc4>
		if(dilSecim == 0) {
 8003fc0:	4b35      	ldr	r3, [pc, #212]	; (8004098 <menu+0x2bc4>)
 8003fc2:	781b      	ldrb	r3, [r3, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d105      	bne.n	8003fd4 <menu+0x2b00>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8003fc8:	4a3e      	ldr	r2, [pc, #248]	; (80040c4 <menu+0x2bf0>)
 8003fca:	2101      	movs	r1, #1
 8003fcc:	2001      	movs	r0, #1
 8003fce:	f7fc fb4b 	bl	8000668 <lcd_print>
 8003fd2:	e008      	b.n	8003fe6 <menu+0x2b12>
		} else if(dilSecim == 1) {
 8003fd4:	4b30      	ldr	r3, [pc, #192]	; (8004098 <menu+0x2bc4>)
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d104      	bne.n	8003fe6 <menu+0x2b12>
			lcd_print(1, 1, "WORKING TIME    ");
 8003fdc:	4a3a      	ldr	r2, [pc, #232]	; (80040c8 <menu+0x2bf4>)
 8003fde:	2101      	movs	r1, #1
 8003fe0:	2001      	movs	r0, #1
 8003fe2:	f7fc fb41 	bl	8000668 <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 8003fe6:	4b39      	ldr	r3, [pc, #228]	; (80040cc <menu+0x2bf8>)
 8003fe8:	781b      	ldrb	r3, [r3, #0]
 8003fea:	2b63      	cmp	r3, #99	; 0x63
 8003fec:	d91e      	bls.n	800402c <menu+0x2b58>
			if(dilSecim == 0) {
 8003fee:	4b2a      	ldr	r3, [pc, #168]	; (8004098 <menu+0x2bc4>)
 8003ff0:	781b      	ldrb	r3, [r3, #0]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d104      	bne.n	8004000 <menu+0x2b2c>
				lcd_print(2, 1, "Kac Saniye     ");
 8003ff6:	4a2a      	ldr	r2, [pc, #168]	; (80040a0 <menu+0x2bcc>)
 8003ff8:	2101      	movs	r1, #1
 8003ffa:	2002      	movs	r0, #2
 8003ffc:	f7fc fb34 	bl	8000668 <lcd_print>
			}
			if(dilSecim == 1) {
 8004000:	4b25      	ldr	r3, [pc, #148]	; (8004098 <menu+0x2bc4>)
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	2b01      	cmp	r3, #1
 8004006:	d104      	bne.n	8004012 <menu+0x2b3e>
				lcd_print(2, 1, "Second         ");
 8004008:	4a26      	ldr	r2, [pc, #152]	; (80040a4 <menu+0x2bd0>)
 800400a:	2101      	movs	r1, #1
 800400c:	2002      	movs	r0, #2
 800400e:	f7fc fb2b 	bl	8000668 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8004012:	4b2e      	ldr	r3, [pc, #184]	; (80040cc <menu+0x2bf8>)
 8004014:	781b      	ldrb	r3, [r3, #0]
 8004016:	220a      	movs	r2, #10
 8004018:	4924      	ldr	r1, [pc, #144]	; (80040ac <menu+0x2bd8>)
 800401a:	4618      	mov	r0, r3
 800401c:	f008 fe50 	bl	800ccc0 <itoa>
			lcd_print(2,14,snum);
 8004020:	4a22      	ldr	r2, [pc, #136]	; (80040ac <menu+0x2bd8>)
 8004022:	210e      	movs	r1, #14
 8004024:	2002      	movs	r0, #2
 8004026:	f7fc fb1f 	bl	8000668 <lcd_print>
 800402a:	e066      	b.n	80040fa <menu+0x2c26>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 800402c:	4b27      	ldr	r3, [pc, #156]	; (80040cc <menu+0x2bf8>)
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	2b09      	cmp	r3, #9
 8004032:	d923      	bls.n	800407c <menu+0x2ba8>
 8004034:	4b25      	ldr	r3, [pc, #148]	; (80040cc <menu+0x2bf8>)
 8004036:	781b      	ldrb	r3, [r3, #0]
 8004038:	2b63      	cmp	r3, #99	; 0x63
 800403a:	d81f      	bhi.n	800407c <menu+0x2ba8>
			if(dilSecim == 0) {
 800403c:	4b16      	ldr	r3, [pc, #88]	; (8004098 <menu+0x2bc4>)
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d105      	bne.n	8004050 <menu+0x2b7c>
				lcd_print(2, 1, "Kac Saniye     ");
 8004044:	4a16      	ldr	r2, [pc, #88]	; (80040a0 <menu+0x2bcc>)
 8004046:	2101      	movs	r1, #1
 8004048:	2002      	movs	r0, #2
 800404a:	f7fc fb0d 	bl	8000668 <lcd_print>
 800404e:	e008      	b.n	8004062 <menu+0x2b8e>
			} else if(dilSecim == 1) {
 8004050:	4b11      	ldr	r3, [pc, #68]	; (8004098 <menu+0x2bc4>)
 8004052:	781b      	ldrb	r3, [r3, #0]
 8004054:	2b01      	cmp	r3, #1
 8004056:	d104      	bne.n	8004062 <menu+0x2b8e>
				lcd_print(2, 1, "Second         ");
 8004058:	4a12      	ldr	r2, [pc, #72]	; (80040a4 <menu+0x2bd0>)
 800405a:	2101      	movs	r1, #1
 800405c:	2002      	movs	r0, #2
 800405e:	f7fc fb03 	bl	8000668 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8004062:	4b1a      	ldr	r3, [pc, #104]	; (80040cc <menu+0x2bf8>)
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	220a      	movs	r2, #10
 8004068:	4910      	ldr	r1, [pc, #64]	; (80040ac <menu+0x2bd8>)
 800406a:	4618      	mov	r0, r3
 800406c:	f008 fe28 	bl	800ccc0 <itoa>
			lcd_print(2, 15, snum);
 8004070:	4a0e      	ldr	r2, [pc, #56]	; (80040ac <menu+0x2bd8>)
 8004072:	210f      	movs	r1, #15
 8004074:	2002      	movs	r0, #2
 8004076:	f7fc faf7 	bl	8000668 <lcd_print>
 800407a:	e03e      	b.n	80040fa <menu+0x2c26>
		} else if(makineCalismaTmr <=  9) {
 800407c:	4b13      	ldr	r3, [pc, #76]	; (80040cc <menu+0x2bf8>)
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	2b09      	cmp	r3, #9
 8004082:	d83a      	bhi.n	80040fa <menu+0x2c26>
			if(dilSecim == 0) {
 8004084:	4b04      	ldr	r3, [pc, #16]	; (8004098 <menu+0x2bc4>)
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d121      	bne.n	80040d0 <menu+0x2bfc>
				lcd_print(2, 1, "Kac Saniye     ");
 800408c:	4a04      	ldr	r2, [pc, #16]	; (80040a0 <menu+0x2bcc>)
 800408e:	2101      	movs	r1, #1
 8004090:	2002      	movs	r0, #2
 8004092:	f7fc fae9 	bl	8000668 <lcd_print>
 8004096:	e024      	b.n	80040e2 <menu+0x2c0e>
 8004098:	20000c6a 	.word	0x20000c6a
 800409c:	0800e288 	.word	0x0800e288
 80040a0:	0800de50 	.word	0x0800de50
 80040a4:	0800e1c4 	.word	0x0800e1c4
 80040a8:	20000c60 	.word	0x20000c60
 80040ac:	20000bcc 	.word	0x20000bcc
 80040b0:	40010800 	.word	0x40010800
 80040b4:	20000c78 	.word	0x20000c78
 80040b8:	20000b38 	.word	0x20000b38
 80040bc:	20000c75 	.word	0x20000c75
 80040c0:	20000c49 	.word	0x20000c49
 80040c4:	0800e29c 	.word	0x0800e29c
 80040c8:	0800e2b0 	.word	0x0800e2b0
 80040cc:	20000c61 	.word	0x20000c61
			} else if(dilSecim == 1) {
 80040d0:	4b8f      	ldr	r3, [pc, #572]	; (8004310 <menu+0x2e3c>)
 80040d2:	781b      	ldrb	r3, [r3, #0]
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d104      	bne.n	80040e2 <menu+0x2c0e>
				lcd_print(2, 1, "Second         ");
 80040d8:	4a8e      	ldr	r2, [pc, #568]	; (8004314 <menu+0x2e40>)
 80040da:	2101      	movs	r1, #1
 80040dc:	2002      	movs	r0, #2
 80040de:	f7fc fac3 	bl	8000668 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 80040e2:	4b8d      	ldr	r3, [pc, #564]	; (8004318 <menu+0x2e44>)
 80040e4:	781b      	ldrb	r3, [r3, #0]
 80040e6:	220a      	movs	r2, #10
 80040e8:	498c      	ldr	r1, [pc, #560]	; (800431c <menu+0x2e48>)
 80040ea:	4618      	mov	r0, r3
 80040ec:	f008 fde8 	bl	800ccc0 <itoa>
			lcd_print(2, 16, snum);
 80040f0:	4a8a      	ldr	r2, [pc, #552]	; (800431c <menu+0x2e48>)
 80040f2:	2110      	movs	r1, #16
 80040f4:	2002      	movs	r0, #2
 80040f6:	f7fc fab7 	bl	8000668 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80040fa:	2102      	movs	r1, #2
 80040fc:	4888      	ldr	r0, [pc, #544]	; (8004320 <menu+0x2e4c>)
 80040fe:	f005 fdb3 	bl	8009c68 <HAL_GPIO_ReadPin>
 8004102:	4603      	mov	r3, r0
 8004104:	2b01      	cmp	r3, #1
 8004106:	d115      	bne.n	8004134 <menu+0x2c60>
 8004108:	4b86      	ldr	r3, [pc, #536]	; (8004324 <menu+0x2e50>)
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	f083 0301 	eor.w	r3, r3, #1
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00e      	beq.n	8004134 <menu+0x2c60>
			makineCalismaTmr = makineCalismaTmr + 1;
 8004116:	4b80      	ldr	r3, [pc, #512]	; (8004318 <menu+0x2e44>)
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	3301      	adds	r3, #1
 800411c:	b2da      	uxtb	r2, r3
 800411e:	4b7e      	ldr	r3, [pc, #504]	; (8004318 <menu+0x2e44>)
 8004120:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8004122:	4b7d      	ldr	r3, [pc, #500]	; (8004318 <menu+0x2e44>)
 8004124:	781b      	ldrb	r3, [r3, #0]
 8004126:	2bb4      	cmp	r3, #180	; 0xb4
 8004128:	d902      	bls.n	8004130 <menu+0x2c5c>
				makineCalismaTmr = 0;
 800412a:	4b7b      	ldr	r3, [pc, #492]	; (8004318 <menu+0x2e44>)
 800412c:	2200      	movs	r2, #0
 800412e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004130:	f001 ff5c 	bl	8005fec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004134:	2104      	movs	r1, #4
 8004136:	487a      	ldr	r0, [pc, #488]	; (8004320 <menu+0x2e4c>)
 8004138:	f005 fd96 	bl	8009c68 <HAL_GPIO_ReadPin>
 800413c:	4603      	mov	r3, r0
 800413e:	2b01      	cmp	r3, #1
 8004140:	d115      	bne.n	800416e <menu+0x2c9a>
 8004142:	4b78      	ldr	r3, [pc, #480]	; (8004324 <menu+0x2e50>)
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	f083 0301 	eor.w	r3, r3, #1
 800414a:	b2db      	uxtb	r3, r3
 800414c:	2b00      	cmp	r3, #0
 800414e:	d00e      	beq.n	800416e <menu+0x2c9a>
			makineCalismaTmr = makineCalismaTmr - 1;
 8004150:	4b71      	ldr	r3, [pc, #452]	; (8004318 <menu+0x2e44>)
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	3b01      	subs	r3, #1
 8004156:	b2da      	uxtb	r2, r3
 8004158:	4b6f      	ldr	r3, [pc, #444]	; (8004318 <menu+0x2e44>)
 800415a:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 800415c:	4b6e      	ldr	r3, [pc, #440]	; (8004318 <menu+0x2e44>)
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	2bb5      	cmp	r3, #181	; 0xb5
 8004162:	d902      	bls.n	800416a <menu+0x2c96>
		   		makineCalismaTmr = 180;
 8004164:	4b6c      	ldr	r3, [pc, #432]	; (8004318 <menu+0x2e44>)
 8004166:	22b4      	movs	r2, #180	; 0xb4
 8004168:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800416a:	f001 ff3f 	bl	8005fec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800416e:	2108      	movs	r1, #8
 8004170:	486b      	ldr	r0, [pc, #428]	; (8004320 <menu+0x2e4c>)
 8004172:	f005 fd79 	bl	8009c68 <HAL_GPIO_ReadPin>
 8004176:	4603      	mov	r3, r0
 8004178:	2b01      	cmp	r3, #1
 800417a:	d10d      	bne.n	8004198 <menu+0x2cc4>
 800417c:	4b69      	ldr	r3, [pc, #420]	; (8004324 <menu+0x2e50>)
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	f083 0301 	eor.w	r3, r3, #1
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b00      	cmp	r3, #0
 8004188:	d006      	beq.n	8004198 <menu+0x2cc4>
			eepromData[24] = makineCalismaTmr;
 800418a:	4b63      	ldr	r3, [pc, #396]	; (8004318 <menu+0x2e44>)
 800418c:	781a      	ldrb	r2, [r3, #0]
 800418e:	4b66      	ldr	r3, [pc, #408]	; (8004328 <menu+0x2e54>)
 8004190:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 8004192:	4b66      	ldr	r3, [pc, #408]	; (800432c <menu+0x2e58>)
 8004194:	2201      	movs	r2, #1
 8004196:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8004198:	4b65      	ldr	r3, [pc, #404]	; (8004330 <menu+0x2e5c>)
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	2b1b      	cmp	r3, #27
 800419e:	f040 8083 	bne.w	80042a8 <menu+0x2dd4>
		lcd_print(1, 1, "BUZZER          ");
 80041a2:	4a64      	ldr	r2, [pc, #400]	; (8004334 <menu+0x2e60>)
 80041a4:	2101      	movs	r1, #1
 80041a6:	2001      	movs	r0, #1
 80041a8:	f7fc fa5e 	bl	8000668 <lcd_print>

		if(buzzer == 0) {
 80041ac:	4b62      	ldr	r3, [pc, #392]	; (8004338 <menu+0x2e64>)
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d113      	bne.n	80041dc <menu+0x2d08>
			if(dilSecim == 0) {
 80041b4:	4b56      	ldr	r3, [pc, #344]	; (8004310 <menu+0x2e3c>)
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d105      	bne.n	80041c8 <menu+0x2cf4>
				lcd_print(2, 1, "Pasif           ");
 80041bc:	4a5f      	ldr	r2, [pc, #380]	; (800433c <menu+0x2e68>)
 80041be:	2101      	movs	r1, #1
 80041c0:	2002      	movs	r0, #2
 80041c2:	f7fc fa51 	bl	8000668 <lcd_print>
 80041c6:	e020      	b.n	800420a <menu+0x2d36>
			} else if(dilSecim == 1) {
 80041c8:	4b51      	ldr	r3, [pc, #324]	; (8004310 <menu+0x2e3c>)
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	2b01      	cmp	r3, #1
 80041ce:	d11c      	bne.n	800420a <menu+0x2d36>
				lcd_print(2, 1, "Passive         ");
 80041d0:	4a5b      	ldr	r2, [pc, #364]	; (8004340 <menu+0x2e6c>)
 80041d2:	2101      	movs	r1, #1
 80041d4:	2002      	movs	r0, #2
 80041d6:	f7fc fa47 	bl	8000668 <lcd_print>
 80041da:	e016      	b.n	800420a <menu+0x2d36>
			}
		} else if(buzzer == 1) {
 80041dc:	4b56      	ldr	r3, [pc, #344]	; (8004338 <menu+0x2e64>)
 80041de:	781b      	ldrb	r3, [r3, #0]
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d112      	bne.n	800420a <menu+0x2d36>
			if(dilSecim == 0) {
 80041e4:	4b4a      	ldr	r3, [pc, #296]	; (8004310 <menu+0x2e3c>)
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d105      	bne.n	80041f8 <menu+0x2d24>
				lcd_print(2, 1, "Aktif           ");
 80041ec:	4a55      	ldr	r2, [pc, #340]	; (8004344 <menu+0x2e70>)
 80041ee:	2101      	movs	r1, #1
 80041f0:	2002      	movs	r0, #2
 80041f2:	f7fc fa39 	bl	8000668 <lcd_print>
 80041f6:	e008      	b.n	800420a <menu+0x2d36>
			} else if(dilSecim == 1) {
 80041f8:	4b45      	ldr	r3, [pc, #276]	; (8004310 <menu+0x2e3c>)
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d104      	bne.n	800420a <menu+0x2d36>
				lcd_print(2, 1, "Active          ");
 8004200:	4a51      	ldr	r2, [pc, #324]	; (8004348 <menu+0x2e74>)
 8004202:	2101      	movs	r1, #1
 8004204:	2002      	movs	r0, #2
 8004206:	f7fc fa2f 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800420a:	2102      	movs	r1, #2
 800420c:	4844      	ldr	r0, [pc, #272]	; (8004320 <menu+0x2e4c>)
 800420e:	f005 fd2b 	bl	8009c68 <HAL_GPIO_ReadPin>
 8004212:	4603      	mov	r3, r0
 8004214:	2b01      	cmp	r3, #1
 8004216:	d115      	bne.n	8004244 <menu+0x2d70>
 8004218:	4b42      	ldr	r3, [pc, #264]	; (8004324 <menu+0x2e50>)
 800421a:	781b      	ldrb	r3, [r3, #0]
 800421c:	f083 0301 	eor.w	r3, r3, #1
 8004220:	b2db      	uxtb	r3, r3
 8004222:	2b00      	cmp	r3, #0
 8004224:	d00e      	beq.n	8004244 <menu+0x2d70>
			buzzer = buzzer + 1;
 8004226:	4b44      	ldr	r3, [pc, #272]	; (8004338 <menu+0x2e64>)
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	3301      	adds	r3, #1
 800422c:	b2da      	uxtb	r2, r3
 800422e:	4b42      	ldr	r3, [pc, #264]	; (8004338 <menu+0x2e64>)
 8004230:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 8004232:	4b41      	ldr	r3, [pc, #260]	; (8004338 <menu+0x2e64>)
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	2b01      	cmp	r3, #1
 8004238:	d902      	bls.n	8004240 <menu+0x2d6c>
				buzzer = 0;
 800423a:	4b3f      	ldr	r3, [pc, #252]	; (8004338 <menu+0x2e64>)
 800423c:	2200      	movs	r2, #0
 800423e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004240:	f001 fed4 	bl	8005fec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004244:	2104      	movs	r1, #4
 8004246:	4836      	ldr	r0, [pc, #216]	; (8004320 <menu+0x2e4c>)
 8004248:	f005 fd0e 	bl	8009c68 <HAL_GPIO_ReadPin>
 800424c:	4603      	mov	r3, r0
 800424e:	2b01      	cmp	r3, #1
 8004250:	d115      	bne.n	800427e <menu+0x2daa>
 8004252:	4b34      	ldr	r3, [pc, #208]	; (8004324 <menu+0x2e50>)
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	f083 0301 	eor.w	r3, r3, #1
 800425a:	b2db      	uxtb	r3, r3
 800425c:	2b00      	cmp	r3, #0
 800425e:	d00e      	beq.n	800427e <menu+0x2daa>
			buzzer = buzzer - 1;
 8004260:	4b35      	ldr	r3, [pc, #212]	; (8004338 <menu+0x2e64>)
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	3b01      	subs	r3, #1
 8004266:	b2da      	uxtb	r2, r3
 8004268:	4b33      	ldr	r3, [pc, #204]	; (8004338 <menu+0x2e64>)
 800426a:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 800426c:	4b32      	ldr	r3, [pc, #200]	; (8004338 <menu+0x2e64>)
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d002      	beq.n	800427a <menu+0x2da6>
		   		buzzer = 1;
 8004274:	4b30      	ldr	r3, [pc, #192]	; (8004338 <menu+0x2e64>)
 8004276:	2201      	movs	r2, #1
 8004278:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800427a:	f001 feb7 	bl	8005fec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800427e:	2108      	movs	r1, #8
 8004280:	4827      	ldr	r0, [pc, #156]	; (8004320 <menu+0x2e4c>)
 8004282:	f005 fcf1 	bl	8009c68 <HAL_GPIO_ReadPin>
 8004286:	4603      	mov	r3, r0
 8004288:	2b01      	cmp	r3, #1
 800428a:	d10d      	bne.n	80042a8 <menu+0x2dd4>
 800428c:	4b25      	ldr	r3, [pc, #148]	; (8004324 <menu+0x2e50>)
 800428e:	781b      	ldrb	r3, [r3, #0]
 8004290:	f083 0301 	eor.w	r3, r3, #1
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b00      	cmp	r3, #0
 8004298:	d006      	beq.n	80042a8 <menu+0x2dd4>
			eepromData[25] = buzzer;
 800429a:	4b27      	ldr	r3, [pc, #156]	; (8004338 <menu+0x2e64>)
 800429c:	781a      	ldrb	r2, [r3, #0]
 800429e:	4b22      	ldr	r3, [pc, #136]	; (8004328 <menu+0x2e54>)
 80042a0:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 80042a2:	4b22      	ldr	r3, [pc, #136]	; (800432c <menu+0x2e58>)
 80042a4:	2201      	movs	r2, #1
 80042a6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 80042a8:	4b21      	ldr	r3, [pc, #132]	; (8004330 <menu+0x2e5c>)
 80042aa:	781b      	ldrb	r3, [r3, #0]
 80042ac:	2b1c      	cmp	r3, #28
 80042ae:	f040 80ab 	bne.w	8004408 <menu+0x2f34>
		calismaSayModu = 0;
 80042b2:	4b26      	ldr	r3, [pc, #152]	; (800434c <menu+0x2e78>)
 80042b4:	2200      	movs	r2, #0
 80042b6:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 80042b8:	4a25      	ldr	r2, [pc, #148]	; (8004350 <menu+0x2e7c>)
 80042ba:	2101      	movs	r1, #1
 80042bc:	2001      	movs	r0, #1
 80042be:	f7fc f9d3 	bl	8000668 <lcd_print>

		if(demoMode == 0) {
 80042c2:	4b24      	ldr	r3, [pc, #144]	; (8004354 <menu+0x2e80>)
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d113      	bne.n	80042f2 <menu+0x2e1e>
			if(dilSecim == 0) {
 80042ca:	4b11      	ldr	r3, [pc, #68]	; (8004310 <menu+0x2e3c>)
 80042cc:	781b      	ldrb	r3, [r3, #0]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d105      	bne.n	80042de <menu+0x2e0a>
				lcd_print(2, 1, "Pasif           ");
 80042d2:	4a1a      	ldr	r2, [pc, #104]	; (800433c <menu+0x2e68>)
 80042d4:	2101      	movs	r1, #1
 80042d6:	2002      	movs	r0, #2
 80042d8:	f7fc f9c6 	bl	8000668 <lcd_print>
 80042dc:	e045      	b.n	800436a <menu+0x2e96>
			} else if(dilSecim == 1) {
 80042de:	4b0c      	ldr	r3, [pc, #48]	; (8004310 <menu+0x2e3c>)
 80042e0:	781b      	ldrb	r3, [r3, #0]
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d141      	bne.n	800436a <menu+0x2e96>
				lcd_print(2, 1, "Passive         ");
 80042e6:	4a16      	ldr	r2, [pc, #88]	; (8004340 <menu+0x2e6c>)
 80042e8:	2101      	movs	r1, #1
 80042ea:	2002      	movs	r0, #2
 80042ec:	f7fc f9bc 	bl	8000668 <lcd_print>
 80042f0:	e03b      	b.n	800436a <menu+0x2e96>
			}
		} else if(demoMode == 1) {
 80042f2:	4b18      	ldr	r3, [pc, #96]	; (8004354 <menu+0x2e80>)
 80042f4:	781b      	ldrb	r3, [r3, #0]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d137      	bne.n	800436a <menu+0x2e96>
			if(dilSecim == 0){
 80042fa:	4b05      	ldr	r3, [pc, #20]	; (8004310 <menu+0x2e3c>)
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d12a      	bne.n	8004358 <menu+0x2e84>
				lcd_print(2, 1, "Aktif           ");
 8004302:	4a10      	ldr	r2, [pc, #64]	; (8004344 <menu+0x2e70>)
 8004304:	2101      	movs	r1, #1
 8004306:	2002      	movs	r0, #2
 8004308:	f7fc f9ae 	bl	8000668 <lcd_print>
 800430c:	e02d      	b.n	800436a <menu+0x2e96>
 800430e:	bf00      	nop
 8004310:	20000c6a 	.word	0x20000c6a
 8004314:	0800e1c4 	.word	0x0800e1c4
 8004318:	20000c61 	.word	0x20000c61
 800431c:	20000bcc 	.word	0x20000bcc
 8004320:	40010800 	.word	0x40010800
 8004324:	20000c78 	.word	0x20000c78
 8004328:	20000b38 	.word	0x20000b38
 800432c:	20000c75 	.word	0x20000c75
 8004330:	20000c49 	.word	0x20000c49
 8004334:	0800e2c4 	.word	0x0800e2c4
 8004338:	20000c65 	.word	0x20000c65
 800433c:	0800dbec 	.word	0x0800dbec
 8004340:	0800dc00 	.word	0x0800dc00
 8004344:	0800dc4c 	.word	0x0800dc4c
 8004348:	0800dc60 	.word	0x0800dc60
 800434c:	20000c69 	.word	0x20000c69
 8004350:	0800e2d8 	.word	0x0800e2d8
 8004354:	20000c67 	.word	0x20000c67
			} else if(dilSecim == 1) {
 8004358:	4b71      	ldr	r3, [pc, #452]	; (8004520 <menu+0x304c>)
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d104      	bne.n	800436a <menu+0x2e96>
				lcd_print(2, 1, "Active          ");
 8004360:	4a70      	ldr	r2, [pc, #448]	; (8004524 <menu+0x3050>)
 8004362:	2101      	movs	r1, #1
 8004364:	2002      	movs	r0, #2
 8004366:	f7fc f97f 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800436a:	2102      	movs	r1, #2
 800436c:	486e      	ldr	r0, [pc, #440]	; (8004528 <menu+0x3054>)
 800436e:	f005 fc7b 	bl	8009c68 <HAL_GPIO_ReadPin>
 8004372:	4603      	mov	r3, r0
 8004374:	2b01      	cmp	r3, #1
 8004376:	d115      	bne.n	80043a4 <menu+0x2ed0>
 8004378:	4b6c      	ldr	r3, [pc, #432]	; (800452c <menu+0x3058>)
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	f083 0301 	eor.w	r3, r3, #1
 8004380:	b2db      	uxtb	r3, r3
 8004382:	2b00      	cmp	r3, #0
 8004384:	d00e      	beq.n	80043a4 <menu+0x2ed0>
			demoMode = demoMode + 1;
 8004386:	4b6a      	ldr	r3, [pc, #424]	; (8004530 <menu+0x305c>)
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	3301      	adds	r3, #1
 800438c:	b2da      	uxtb	r2, r3
 800438e:	4b68      	ldr	r3, [pc, #416]	; (8004530 <menu+0x305c>)
 8004390:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 8004392:	4b67      	ldr	r3, [pc, #412]	; (8004530 <menu+0x305c>)
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	2b01      	cmp	r3, #1
 8004398:	d902      	bls.n	80043a0 <menu+0x2ecc>
				demoMode = 0;
 800439a:	4b65      	ldr	r3, [pc, #404]	; (8004530 <menu+0x305c>)
 800439c:	2200      	movs	r2, #0
 800439e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80043a0:	f001 fe24 	bl	8005fec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80043a4:	2104      	movs	r1, #4
 80043a6:	4860      	ldr	r0, [pc, #384]	; (8004528 <menu+0x3054>)
 80043a8:	f005 fc5e 	bl	8009c68 <HAL_GPIO_ReadPin>
 80043ac:	4603      	mov	r3, r0
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d115      	bne.n	80043de <menu+0x2f0a>
 80043b2:	4b5e      	ldr	r3, [pc, #376]	; (800452c <menu+0x3058>)
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	f083 0301 	eor.w	r3, r3, #1
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00e      	beq.n	80043de <menu+0x2f0a>
			demoMode = demoMode - 1;
 80043c0:	4b5b      	ldr	r3, [pc, #364]	; (8004530 <menu+0x305c>)
 80043c2:	781b      	ldrb	r3, [r3, #0]
 80043c4:	3b01      	subs	r3, #1
 80043c6:	b2da      	uxtb	r2, r3
 80043c8:	4b59      	ldr	r3, [pc, #356]	; (8004530 <menu+0x305c>)
 80043ca:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 80043cc:	4b58      	ldr	r3, [pc, #352]	; (8004530 <menu+0x305c>)
 80043ce:	781b      	ldrb	r3, [r3, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d002      	beq.n	80043da <menu+0x2f06>
		   		demoMode = 1;
 80043d4:	4b56      	ldr	r3, [pc, #344]	; (8004530 <menu+0x305c>)
 80043d6:	2201      	movs	r2, #1
 80043d8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80043da:	f001 fe07 	bl	8005fec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80043de:	2108      	movs	r1, #8
 80043e0:	4851      	ldr	r0, [pc, #324]	; (8004528 <menu+0x3054>)
 80043e2:	f005 fc41 	bl	8009c68 <HAL_GPIO_ReadPin>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d10d      	bne.n	8004408 <menu+0x2f34>
 80043ec:	4b4f      	ldr	r3, [pc, #316]	; (800452c <menu+0x3058>)
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	f083 0301 	eor.w	r3, r3, #1
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d006      	beq.n	8004408 <menu+0x2f34>
			eepromData[26] = demoMode;
 80043fa:	4b4d      	ldr	r3, [pc, #308]	; (8004530 <menu+0x305c>)
 80043fc:	781a      	ldrb	r2, [r3, #0]
 80043fe:	4b4d      	ldr	r3, [pc, #308]	; (8004534 <menu+0x3060>)
 8004400:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 8004402:	4b4d      	ldr	r3, [pc, #308]	; (8004538 <menu+0x3064>)
 8004404:	2201      	movs	r2, #1
 8004406:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8004408:	4b4c      	ldr	r3, [pc, #304]	; (800453c <menu+0x3068>)
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	2b1d      	cmp	r3, #29
 800440e:	f040 8132 	bne.w	8004676 <menu+0x31a2>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 8004412:	4b4b      	ldr	r3, [pc, #300]	; (8004540 <menu+0x306c>)
 8004414:	781b      	ldrb	r3, [r3, #0]
 8004416:	2b00      	cmp	r3, #0
 8004418:	d113      	bne.n	8004442 <menu+0x2f6e>
 800441a:	4b4a      	ldr	r3, [pc, #296]	; (8004544 <menu+0x3070>)
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d10f      	bne.n	8004442 <menu+0x2f6e>
 8004422:	4b49      	ldr	r3, [pc, #292]	; (8004548 <menu+0x3074>)
 8004424:	781b      	ldrb	r3, [r3, #0]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d10b      	bne.n	8004442 <menu+0x2f6e>
 800442a:	4b48      	ldr	r3, [pc, #288]	; (800454c <menu+0x3078>)
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d107      	bne.n	8004442 <menu+0x2f6e>
 8004432:	4b47      	ldr	r3, [pc, #284]	; (8004550 <menu+0x307c>)
 8004434:	781b      	ldrb	r3, [r3, #0]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d103      	bne.n	8004442 <menu+0x2f6e>
			calismaSayisiYar = 0;
 800443a:	4b46      	ldr	r3, [pc, #280]	; (8004554 <menu+0x3080>)
 800443c:	2200      	movs	r2, #0
 800443e:	701a      	strb	r2, [r3, #0]
 8004440:	e002      	b.n	8004448 <menu+0x2f74>
		} else {
			calismaSayisiYar = 1;
 8004442:	4b44      	ldr	r3, [pc, #272]	; (8004554 <menu+0x3080>)
 8004444:	2201      	movs	r2, #1
 8004446:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 8004448:	4b43      	ldr	r3, [pc, #268]	; (8004558 <menu+0x3084>)
 800444a:	781b      	ldrb	r3, [r3, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d154      	bne.n	80044fa <menu+0x3026>
			if(dilSecim == 0) {
 8004450:	4b33      	ldr	r3, [pc, #204]	; (8004520 <menu+0x304c>)
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d105      	bne.n	8004464 <menu+0x2f90>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8004458:	4a40      	ldr	r2, [pc, #256]	; (800455c <menu+0x3088>)
 800445a:	2101      	movs	r1, #1
 800445c:	2001      	movs	r0, #1
 800445e:	f7fc f903 	bl	8000668 <lcd_print>
 8004462:	e008      	b.n	8004476 <menu+0x2fa2>
			} else if(dilSecim == 1) {
 8004464:	4b2e      	ldr	r3, [pc, #184]	; (8004520 <menu+0x304c>)
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	2b01      	cmp	r3, #1
 800446a:	d104      	bne.n	8004476 <menu+0x2fa2>
				lcd_print(1, 1, "Working Cycle   ");
 800446c:	4a3c      	ldr	r2, [pc, #240]	; (8004560 <menu+0x308c>)
 800446e:	2101      	movs	r1, #1
 8004470:	2001      	movs	r0, #1
 8004472:	f7fc f8f9 	bl	8000668 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 8004476:	4b36      	ldr	r3, [pc, #216]	; (8004550 <menu+0x307c>)
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	220a      	movs	r2, #10
 800447c:	4939      	ldr	r1, [pc, #228]	; (8004564 <menu+0x3090>)
 800447e:	4618      	mov	r0, r3
 8004480:	f008 fc1e 	bl	800ccc0 <itoa>
			lcd_print(2, 12, snum);
 8004484:	4a37      	ldr	r2, [pc, #220]	; (8004564 <menu+0x3090>)
 8004486:	210c      	movs	r1, #12
 8004488:	2002      	movs	r0, #2
 800448a:	f7fc f8ed 	bl	8000668 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 800448e:	4b2f      	ldr	r3, [pc, #188]	; (800454c <menu+0x3078>)
 8004490:	781b      	ldrb	r3, [r3, #0]
 8004492:	220a      	movs	r2, #10
 8004494:	4933      	ldr	r1, [pc, #204]	; (8004564 <menu+0x3090>)
 8004496:	4618      	mov	r0, r3
 8004498:	f008 fc12 	bl	800ccc0 <itoa>
			lcd_print(2, 13, snum);
 800449c:	4a31      	ldr	r2, [pc, #196]	; (8004564 <menu+0x3090>)
 800449e:	210d      	movs	r1, #13
 80044a0:	2002      	movs	r0, #2
 80044a2:	f7fc f8e1 	bl	8000668 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 80044a6:	4b28      	ldr	r3, [pc, #160]	; (8004548 <menu+0x3074>)
 80044a8:	781b      	ldrb	r3, [r3, #0]
 80044aa:	220a      	movs	r2, #10
 80044ac:	492d      	ldr	r1, [pc, #180]	; (8004564 <menu+0x3090>)
 80044ae:	4618      	mov	r0, r3
 80044b0:	f008 fc06 	bl	800ccc0 <itoa>
			lcd_print(2, 14, snum);
 80044b4:	4a2b      	ldr	r2, [pc, #172]	; (8004564 <menu+0x3090>)
 80044b6:	210e      	movs	r1, #14
 80044b8:	2002      	movs	r0, #2
 80044ba:	f7fc f8d5 	bl	8000668 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 80044be:	4b21      	ldr	r3, [pc, #132]	; (8004544 <menu+0x3070>)
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	220a      	movs	r2, #10
 80044c4:	4927      	ldr	r1, [pc, #156]	; (8004564 <menu+0x3090>)
 80044c6:	4618      	mov	r0, r3
 80044c8:	f008 fbfa 	bl	800ccc0 <itoa>
			lcd_print(2, 15, snum);
 80044cc:	4a25      	ldr	r2, [pc, #148]	; (8004564 <menu+0x3090>)
 80044ce:	210f      	movs	r1, #15
 80044d0:	2002      	movs	r0, #2
 80044d2:	f7fc f8c9 	bl	8000668 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 80044d6:	4b1a      	ldr	r3, [pc, #104]	; (8004540 <menu+0x306c>)
 80044d8:	781b      	ldrb	r3, [r3, #0]
 80044da:	220a      	movs	r2, #10
 80044dc:	4921      	ldr	r1, [pc, #132]	; (8004564 <menu+0x3090>)
 80044de:	4618      	mov	r0, r3
 80044e0:	f008 fbee 	bl	800ccc0 <itoa>
			lcd_print(2, 16, snum);
 80044e4:	4a1f      	ldr	r2, [pc, #124]	; (8004564 <menu+0x3090>)
 80044e6:	2110      	movs	r1, #16
 80044e8:	2002      	movs	r0, #2
 80044ea:	f7fc f8bd 	bl	8000668 <lcd_print>

			lcd_print(2, 1, "           ");
 80044ee:	4a1e      	ldr	r2, [pc, #120]	; (8004568 <menu+0x3094>)
 80044f0:	2101      	movs	r1, #1
 80044f2:	2002      	movs	r0, #2
 80044f4:	f7fc f8b8 	bl	8000668 <lcd_print>
 80044f8:	e048      	b.n	800458c <menu+0x30b8>
		} else if(calismaSayModu == 1) {
 80044fa:	4b17      	ldr	r3, [pc, #92]	; (8004558 <menu+0x3084>)
 80044fc:	781b      	ldrb	r3, [r3, #0]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d144      	bne.n	800458c <menu+0x30b8>
			if(dilSecim == 0) {
 8004502:	4b07      	ldr	r3, [pc, #28]	; (8004520 <menu+0x304c>)
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d132      	bne.n	8004570 <menu+0x309c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 800450a:	4a14      	ldr	r2, [pc, #80]	; (800455c <menu+0x3088>)
 800450c:	2101      	movs	r1, #1
 800450e:	2001      	movs	r0, #1
 8004510:	f7fc f8aa 	bl	8000668 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 8004514:	4a15      	ldr	r2, [pc, #84]	; (800456c <menu+0x3098>)
 8004516:	2101      	movs	r1, #1
 8004518:	2002      	movs	r0, #2
 800451a:	f7fc f8a5 	bl	8000668 <lcd_print>
 800451e:	e035      	b.n	800458c <menu+0x30b8>
 8004520:	20000c6a 	.word	0x20000c6a
 8004524:	0800dc60 	.word	0x0800dc60
 8004528:	40010800 	.word	0x40010800
 800452c:	20000c78 	.word	0x20000c78
 8004530:	20000c67 	.word	0x20000c67
 8004534:	20000b38 	.word	0x20000b38
 8004538:	20000c75 	.word	0x20000c75
 800453c:	20000c49 	.word	0x20000c49
 8004540:	20000c46 	.word	0x20000c46
 8004544:	20000c47 	.word	0x20000c47
 8004548:	200009bf 	.word	0x200009bf
 800454c:	200009c0 	.word	0x200009c0
 8004550:	20000c48 	.word	0x20000c48
 8004554:	20000c8a 	.word	0x20000c8a
 8004558:	20000c69 	.word	0x20000c69
 800455c:	0800e2e8 	.word	0x0800e2e8
 8004560:	0800e2fc 	.word	0x0800e2fc
 8004564:	20000bcc 	.word	0x20000bcc
 8004568:	0800e310 	.word	0x0800e310
 800456c:	0800e31c 	.word	0x0800e31c
			} else if(dilSecim == 1) {
 8004570:	4b94      	ldr	r3, [pc, #592]	; (80047c4 <menu+0x32f0>)
 8004572:	781b      	ldrb	r3, [r3, #0]
 8004574:	2b01      	cmp	r3, #1
 8004576:	d109      	bne.n	800458c <menu+0x30b8>
				lcd_print(1, 1, "Working Cycle   ");
 8004578:	4a93      	ldr	r2, [pc, #588]	; (80047c8 <menu+0x32f4>)
 800457a:	2101      	movs	r1, #1
 800457c:	2001      	movs	r0, #1
 800457e:	f7fc f873 	bl	8000668 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 8004582:	4a92      	ldr	r2, [pc, #584]	; (80047cc <menu+0x32f8>)
 8004584:	2101      	movs	r1, #1
 8004586:	2002      	movs	r0, #2
 8004588:	f7fc f86e 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 800458c:	2102      	movs	r1, #2
 800458e:	4890      	ldr	r0, [pc, #576]	; (80047d0 <menu+0x32fc>)
 8004590:	f005 fb6a 	bl	8009c68 <HAL_GPIO_ReadPin>
 8004594:	4603      	mov	r3, r0
 8004596:	2b01      	cmp	r3, #1
 8004598:	d119      	bne.n	80045ce <menu+0x30fa>
 800459a:	4b8e      	ldr	r3, [pc, #568]	; (80047d4 <menu+0x3300>)
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	f083 0301 	eor.w	r3, r3, #1
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d012      	beq.n	80045ce <menu+0x30fa>
 80045a8:	4b8b      	ldr	r3, [pc, #556]	; (80047d8 <menu+0x3304>)
 80045aa:	781b      	ldrb	r3, [r3, #0]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d00e      	beq.n	80045ce <menu+0x30fa>
			calismaSayModu = calismaSayModu + 1;
 80045b0:	4b8a      	ldr	r3, [pc, #552]	; (80047dc <menu+0x3308>)
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	3301      	adds	r3, #1
 80045b6:	b2da      	uxtb	r2, r3
 80045b8:	4b88      	ldr	r3, [pc, #544]	; (80047dc <menu+0x3308>)
 80045ba:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 80045bc:	4b87      	ldr	r3, [pc, #540]	; (80047dc <menu+0x3308>)
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d902      	bls.n	80045ca <menu+0x30f6>
				calismaSayModu = 0;
 80045c4:	4b85      	ldr	r3, [pc, #532]	; (80047dc <menu+0x3308>)
 80045c6:	2200      	movs	r2, #0
 80045c8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80045ca:	f001 fd0f 	bl	8005fec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80045ce:	2104      	movs	r1, #4
 80045d0:	487f      	ldr	r0, [pc, #508]	; (80047d0 <menu+0x32fc>)
 80045d2:	f005 fb49 	bl	8009c68 <HAL_GPIO_ReadPin>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d119      	bne.n	8004610 <menu+0x313c>
 80045dc:	4b7d      	ldr	r3, [pc, #500]	; (80047d4 <menu+0x3300>)
 80045de:	781b      	ldrb	r3, [r3, #0]
 80045e0:	f083 0301 	eor.w	r3, r3, #1
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d012      	beq.n	8004610 <menu+0x313c>
 80045ea:	4b7b      	ldr	r3, [pc, #492]	; (80047d8 <menu+0x3304>)
 80045ec:	781b      	ldrb	r3, [r3, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d00e      	beq.n	8004610 <menu+0x313c>
			calismaSayModu = calismaSayModu - 1;
 80045f2:	4b7a      	ldr	r3, [pc, #488]	; (80047dc <menu+0x3308>)
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	3b01      	subs	r3, #1
 80045f8:	b2da      	uxtb	r2, r3
 80045fa:	4b78      	ldr	r3, [pc, #480]	; (80047dc <menu+0x3308>)
 80045fc:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 80045fe:	4b77      	ldr	r3, [pc, #476]	; (80047dc <menu+0x3308>)
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d002      	beq.n	800460c <menu+0x3138>
		   		calismaSayModu = 1;
 8004606:	4b75      	ldr	r3, [pc, #468]	; (80047dc <menu+0x3308>)
 8004608:	2201      	movs	r2, #1
 800460a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800460c:	f001 fcee 	bl	8005fec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004610:	2108      	movs	r1, #8
 8004612:	486f      	ldr	r0, [pc, #444]	; (80047d0 <menu+0x32fc>)
 8004614:	f005 fb28 	bl	8009c68 <HAL_GPIO_ReadPin>
 8004618:	4603      	mov	r3, r0
 800461a:	2b01      	cmp	r3, #1
 800461c:	d12b      	bne.n	8004676 <menu+0x31a2>
 800461e:	4b6d      	ldr	r3, [pc, #436]	; (80047d4 <menu+0x3300>)
 8004620:	781b      	ldrb	r3, [r3, #0]
 8004622:	f083 0301 	eor.w	r3, r3, #1
 8004626:	b2db      	uxtb	r3, r3
 8004628:	2b00      	cmp	r3, #0
 800462a:	d024      	beq.n	8004676 <menu+0x31a2>
			eepromData[32] = 0;
 800462c:	4b6c      	ldr	r3, [pc, #432]	; (80047e0 <menu+0x330c>)
 800462e:	2200      	movs	r2, #0
 8004630:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 8004634:	4b6a      	ldr	r3, [pc, #424]	; (80047e0 <menu+0x330c>)
 8004636:	2200      	movs	r2, #0
 8004638:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 800463a:	4b69      	ldr	r3, [pc, #420]	; (80047e0 <menu+0x330c>)
 800463c:	2200      	movs	r2, #0
 800463e:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 8004640:	4b67      	ldr	r3, [pc, #412]	; (80047e0 <menu+0x330c>)
 8004642:	2200      	movs	r2, #0
 8004644:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 8004646:	4b66      	ldr	r3, [pc, #408]	; (80047e0 <menu+0x330c>)
 8004648:	2200      	movs	r2, #0
 800464a:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 800464c:	4b65      	ldr	r3, [pc, #404]	; (80047e4 <menu+0x3310>)
 800464e:	2200      	movs	r2, #0
 8004650:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 8004652:	4b65      	ldr	r3, [pc, #404]	; (80047e8 <menu+0x3314>)
 8004654:	2200      	movs	r2, #0
 8004656:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 8004658:	4b64      	ldr	r3, [pc, #400]	; (80047ec <menu+0x3318>)
 800465a:	2200      	movs	r2, #0
 800465c:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 800465e:	4b64      	ldr	r3, [pc, #400]	; (80047f0 <menu+0x331c>)
 8004660:	2200      	movs	r2, #0
 8004662:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 8004664:	4b63      	ldr	r3, [pc, #396]	; (80047f4 <menu+0x3320>)
 8004666:	2200      	movs	r2, #0
 8004668:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 800466a:	4b5c      	ldr	r3, [pc, #368]	; (80047dc <menu+0x3308>)
 800466c:	2200      	movs	r2, #0
 800466e:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8004670:	4b61      	ldr	r3, [pc, #388]	; (80047f8 <menu+0x3324>)
 8004672:	2201      	movs	r2, #1
 8004674:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 8004676:	4b61      	ldr	r3, [pc, #388]	; (80047fc <menu+0x3328>)
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	2b1e      	cmp	r3, #30
 800467c:	d16f      	bne.n	800475e <menu+0x328a>
		calismaSayModu = 0;
 800467e:	4b57      	ldr	r3, [pc, #348]	; (80047dc <menu+0x3308>)
 8004680:	2200      	movs	r2, #0
 8004682:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 8004684:	4b4f      	ldr	r3, [pc, #316]	; (80047c4 <menu+0x32f0>)
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d10a      	bne.n	80046a2 <menu+0x31ce>
			lcd_print(1, 1, "DIL SECIMI      ");
 800468c:	4a5c      	ldr	r2, [pc, #368]	; (8004800 <menu+0x332c>)
 800468e:	2101      	movs	r1, #1
 8004690:	2001      	movs	r0, #1
 8004692:	f7fb ffe9 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 8004696:	4a5b      	ldr	r2, [pc, #364]	; (8004804 <menu+0x3330>)
 8004698:	2101      	movs	r1, #1
 800469a:	2002      	movs	r0, #2
 800469c:	f7fb ffe4 	bl	8000668 <lcd_print>
 80046a0:	e00d      	b.n	80046be <menu+0x31ea>
		} else if(dilSecim == 1) {
 80046a2:	4b48      	ldr	r3, [pc, #288]	; (80047c4 <menu+0x32f0>)
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d109      	bne.n	80046be <menu+0x31ea>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 80046aa:	4a57      	ldr	r2, [pc, #348]	; (8004808 <menu+0x3334>)
 80046ac:	2101      	movs	r1, #1
 80046ae:	2001      	movs	r0, #1
 80046b0:	f7fb ffda 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 80046b4:	4a55      	ldr	r2, [pc, #340]	; (800480c <menu+0x3338>)
 80046b6:	2101      	movs	r1, #1
 80046b8:	2002      	movs	r0, #2
 80046ba:	f7fb ffd5 	bl	8000668 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80046be:	2102      	movs	r1, #2
 80046c0:	4843      	ldr	r0, [pc, #268]	; (80047d0 <menu+0x32fc>)
 80046c2:	f005 fad1 	bl	8009c68 <HAL_GPIO_ReadPin>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b01      	cmp	r3, #1
 80046ca:	d115      	bne.n	80046f8 <menu+0x3224>
 80046cc:	4b41      	ldr	r3, [pc, #260]	; (80047d4 <menu+0x3300>)
 80046ce:	781b      	ldrb	r3, [r3, #0]
 80046d0:	f083 0301 	eor.w	r3, r3, #1
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d00e      	beq.n	80046f8 <menu+0x3224>
			dilSecim = dilSecim + 1;
 80046da:	4b3a      	ldr	r3, [pc, #232]	; (80047c4 <menu+0x32f0>)
 80046dc:	781b      	ldrb	r3, [r3, #0]
 80046de:	3301      	adds	r3, #1
 80046e0:	b2da      	uxtb	r2, r3
 80046e2:	4b38      	ldr	r3, [pc, #224]	; (80047c4 <menu+0x32f0>)
 80046e4:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 80046e6:	4b37      	ldr	r3, [pc, #220]	; (80047c4 <menu+0x32f0>)
 80046e8:	781b      	ldrb	r3, [r3, #0]
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d902      	bls.n	80046f4 <menu+0x3220>
				dilSecim = 0;
 80046ee:	4b35      	ldr	r3, [pc, #212]	; (80047c4 <menu+0x32f0>)
 80046f0:	2200      	movs	r2, #0
 80046f2:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 80046f4:	f001 fc7a 	bl	8005fec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80046f8:	2104      	movs	r1, #4
 80046fa:	4835      	ldr	r0, [pc, #212]	; (80047d0 <menu+0x32fc>)
 80046fc:	f005 fab4 	bl	8009c68 <HAL_GPIO_ReadPin>
 8004700:	4603      	mov	r3, r0
 8004702:	2b01      	cmp	r3, #1
 8004704:	d115      	bne.n	8004732 <menu+0x325e>
 8004706:	4b33      	ldr	r3, [pc, #204]	; (80047d4 <menu+0x3300>)
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	f083 0301 	eor.w	r3, r3, #1
 800470e:	b2db      	uxtb	r3, r3
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00e      	beq.n	8004732 <menu+0x325e>
			dilSecim = dilSecim - 1;
 8004714:	4b2b      	ldr	r3, [pc, #172]	; (80047c4 <menu+0x32f0>)
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	3b01      	subs	r3, #1
 800471a:	b2da      	uxtb	r2, r3
 800471c:	4b29      	ldr	r3, [pc, #164]	; (80047c4 <menu+0x32f0>)
 800471e:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 8004720:	4b28      	ldr	r3, [pc, #160]	; (80047c4 <menu+0x32f0>)
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d002      	beq.n	800472e <menu+0x325a>
		   		dilSecim = 1;
 8004728:	4b26      	ldr	r3, [pc, #152]	; (80047c4 <menu+0x32f0>)
 800472a:	2201      	movs	r2, #1
 800472c:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 800472e:	f001 fc5d 	bl	8005fec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004732:	2108      	movs	r1, #8
 8004734:	4826      	ldr	r0, [pc, #152]	; (80047d0 <menu+0x32fc>)
 8004736:	f005 fa97 	bl	8009c68 <HAL_GPIO_ReadPin>
 800473a:	4603      	mov	r3, r0
 800473c:	2b01      	cmp	r3, #1
 800473e:	d10e      	bne.n	800475e <menu+0x328a>
 8004740:	4b24      	ldr	r3, [pc, #144]	; (80047d4 <menu+0x3300>)
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	f083 0301 	eor.w	r3, r3, #1
 8004748:	b2db      	uxtb	r3, r3
 800474a:	2b00      	cmp	r3, #0
 800474c:	d007      	beq.n	800475e <menu+0x328a>
			eepromData[33] = dilSecim;
 800474e:	4b1d      	ldr	r3, [pc, #116]	; (80047c4 <menu+0x32f0>)
 8004750:	781a      	ldrb	r2, [r3, #0]
 8004752:	4b23      	ldr	r3, [pc, #140]	; (80047e0 <menu+0x330c>)
 8004754:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 8004758:	4b27      	ldr	r3, [pc, #156]	; (80047f8 <menu+0x3324>)
 800475a:	2201      	movs	r2, #1
 800475c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 800475e:	4b27      	ldr	r3, [pc, #156]	; (80047fc <menu+0x3328>)
 8004760:	781b      	ldrb	r3, [r3, #0]
 8004762:	2b1f      	cmp	r3, #31
 8004764:	f040 80b7 	bne.w	80048d6 <menu+0x3402>
		calismaSayModu = 0;
 8004768:	4b1c      	ldr	r3, [pc, #112]	; (80047dc <menu+0x3308>)
 800476a:	2200      	movs	r2, #0
 800476c:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 800476e:	4a28      	ldr	r2, [pc, #160]	; (8004810 <menu+0x333c>)
 8004770:	2101      	movs	r1, #1
 8004772:	2001      	movs	r0, #1
 8004774:	f7fb ff78 	bl	8000668 <lcd_print>

		if(iotMode == 0) {
 8004778:	4b26      	ldr	r3, [pc, #152]	; (8004814 <menu+0x3340>)
 800477a:	781b      	ldrb	r3, [r3, #0]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d113      	bne.n	80047a8 <menu+0x32d4>
			if(dilSecim == 0) {
 8004780:	4b10      	ldr	r3, [pc, #64]	; (80047c4 <menu+0x32f0>)
 8004782:	781b      	ldrb	r3, [r3, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d105      	bne.n	8004794 <menu+0x32c0>
				lcd_print(2, 1, "Pasif           ");
 8004788:	4a23      	ldr	r2, [pc, #140]	; (8004818 <menu+0x3344>)
 800478a:	2101      	movs	r1, #1
 800478c:	2002      	movs	r0, #2
 800478e:	f7fb ff6b 	bl	8000668 <lcd_print>
 8004792:	e050      	b.n	8004836 <menu+0x3362>
			} else if(dilSecim == 1) {
 8004794:	4b0b      	ldr	r3, [pc, #44]	; (80047c4 <menu+0x32f0>)
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d14c      	bne.n	8004836 <menu+0x3362>
				lcd_print(2, 1, "Passive         ");
 800479c:	4a1f      	ldr	r2, [pc, #124]	; (800481c <menu+0x3348>)
 800479e:	2101      	movs	r1, #1
 80047a0:	2002      	movs	r0, #2
 80047a2:	f7fb ff61 	bl	8000668 <lcd_print>
 80047a6:	e046      	b.n	8004836 <menu+0x3362>
			}
		} else if(iotMode == 1) {
 80047a8:	4b1a      	ldr	r3, [pc, #104]	; (8004814 <menu+0x3340>)
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d142      	bne.n	8004836 <menu+0x3362>
			if(dilSecim == 0){
 80047b0:	4b04      	ldr	r3, [pc, #16]	; (80047c4 <menu+0x32f0>)
 80047b2:	781b      	ldrb	r3, [r3, #0]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d135      	bne.n	8004824 <menu+0x3350>
				lcd_print(2, 1, "Aktif           ");
 80047b8:	4a19      	ldr	r2, [pc, #100]	; (8004820 <menu+0x334c>)
 80047ba:	2101      	movs	r1, #1
 80047bc:	2002      	movs	r0, #2
 80047be:	f7fb ff53 	bl	8000668 <lcd_print>
 80047c2:	e038      	b.n	8004836 <menu+0x3362>
 80047c4:	20000c6a 	.word	0x20000c6a
 80047c8:	0800e2fc 	.word	0x0800e2fc
 80047cc:	0800e330 	.word	0x0800e330
 80047d0:	40010800 	.word	0x40010800
 80047d4:	20000c78 	.word	0x20000c78
 80047d8:	20000c8a 	.word	0x20000c8a
 80047dc:	20000c69 	.word	0x20000c69
 80047e0:	20000b38 	.word	0x20000b38
 80047e4:	20000c48 	.word	0x20000c48
 80047e8:	200009c0 	.word	0x200009c0
 80047ec:	200009bf 	.word	0x200009bf
 80047f0:	20000c47 	.word	0x20000c47
 80047f4:	20000c46 	.word	0x20000c46
 80047f8:	20000c75 	.word	0x20000c75
 80047fc:	20000c49 	.word	0x20000c49
 8004800:	0800e344 	.word	0x0800e344
 8004804:	0800e358 	.word	0x0800e358
 8004808:	0800e36c 	.word	0x0800e36c
 800480c:	0800e380 	.word	0x0800e380
 8004810:	0800e394 	.word	0x0800e394
 8004814:	20000c68 	.word	0x20000c68
 8004818:	0800dbec 	.word	0x0800dbec
 800481c:	0800dc00 	.word	0x0800dc00
 8004820:	0800dc4c 	.word	0x0800dc4c
			} else if(dilSecim == 1) {
 8004824:	4b90      	ldr	r3, [pc, #576]	; (8004a68 <menu+0x3594>)
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	2b01      	cmp	r3, #1
 800482a:	d104      	bne.n	8004836 <menu+0x3362>
				lcd_print(2, 1, "Active          ");
 800482c:	4a8f      	ldr	r2, [pc, #572]	; (8004a6c <menu+0x3598>)
 800482e:	2101      	movs	r1, #1
 8004830:	2002      	movs	r0, #2
 8004832:	f7fb ff19 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004836:	2102      	movs	r1, #2
 8004838:	488d      	ldr	r0, [pc, #564]	; (8004a70 <menu+0x359c>)
 800483a:	f005 fa15 	bl	8009c68 <HAL_GPIO_ReadPin>
 800483e:	4603      	mov	r3, r0
 8004840:	2b01      	cmp	r3, #1
 8004842:	d115      	bne.n	8004870 <menu+0x339c>
 8004844:	4b8b      	ldr	r3, [pc, #556]	; (8004a74 <menu+0x35a0>)
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	f083 0301 	eor.w	r3, r3, #1
 800484c:	b2db      	uxtb	r3, r3
 800484e:	2b00      	cmp	r3, #0
 8004850:	d00e      	beq.n	8004870 <menu+0x339c>
			iotMode = iotMode + 1;
 8004852:	4b89      	ldr	r3, [pc, #548]	; (8004a78 <menu+0x35a4>)
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	3301      	adds	r3, #1
 8004858:	b2da      	uxtb	r2, r3
 800485a:	4b87      	ldr	r3, [pc, #540]	; (8004a78 <menu+0x35a4>)
 800485c:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 800485e:	4b86      	ldr	r3, [pc, #536]	; (8004a78 <menu+0x35a4>)
 8004860:	781b      	ldrb	r3, [r3, #0]
 8004862:	2b01      	cmp	r3, #1
 8004864:	d902      	bls.n	800486c <menu+0x3398>
				iotMode = 0;
 8004866:	4b84      	ldr	r3, [pc, #528]	; (8004a78 <menu+0x35a4>)
 8004868:	2200      	movs	r2, #0
 800486a:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 800486c:	f001 fbbe 	bl	8005fec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004870:	2104      	movs	r1, #4
 8004872:	487f      	ldr	r0, [pc, #508]	; (8004a70 <menu+0x359c>)
 8004874:	f005 f9f8 	bl	8009c68 <HAL_GPIO_ReadPin>
 8004878:	4603      	mov	r3, r0
 800487a:	2b01      	cmp	r3, #1
 800487c:	d115      	bne.n	80048aa <menu+0x33d6>
 800487e:	4b7d      	ldr	r3, [pc, #500]	; (8004a74 <menu+0x35a0>)
 8004880:	781b      	ldrb	r3, [r3, #0]
 8004882:	f083 0301 	eor.w	r3, r3, #1
 8004886:	b2db      	uxtb	r3, r3
 8004888:	2b00      	cmp	r3, #0
 800488a:	d00e      	beq.n	80048aa <menu+0x33d6>
			iotMode = iotMode - 1;
 800488c:	4b7a      	ldr	r3, [pc, #488]	; (8004a78 <menu+0x35a4>)
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	3b01      	subs	r3, #1
 8004892:	b2da      	uxtb	r2, r3
 8004894:	4b78      	ldr	r3, [pc, #480]	; (8004a78 <menu+0x35a4>)
 8004896:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8004898:	4b77      	ldr	r3, [pc, #476]	; (8004a78 <menu+0x35a4>)
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d002      	beq.n	80048a6 <menu+0x33d2>
		   		iotMode = 1;
 80048a0:	4b75      	ldr	r3, [pc, #468]	; (8004a78 <menu+0x35a4>)
 80048a2:	2201      	movs	r2, #1
 80048a4:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80048a6:	f001 fba1 	bl	8005fec <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80048aa:	2108      	movs	r1, #8
 80048ac:	4870      	ldr	r0, [pc, #448]	; (8004a70 <menu+0x359c>)
 80048ae:	f005 f9db 	bl	8009c68 <HAL_GPIO_ReadPin>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d10e      	bne.n	80048d6 <menu+0x3402>
 80048b8:	4b6e      	ldr	r3, [pc, #440]	; (8004a74 <menu+0x35a0>)
 80048ba:	781b      	ldrb	r3, [r3, #0]
 80048bc:	f083 0301 	eor.w	r3, r3, #1
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d007      	beq.n	80048d6 <menu+0x3402>
			eepromData[37] = iotMode;
 80048c6:	4b6c      	ldr	r3, [pc, #432]	; (8004a78 <menu+0x35a4>)
 80048c8:	781a      	ldrb	r2, [r3, #0]
 80048ca:	4b6c      	ldr	r3, [pc, #432]	; (8004a7c <menu+0x35a8>)
 80048cc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hafizaYaz = 1;
 80048d0:	4b6b      	ldr	r3, [pc, #428]	; (8004a80 <menu+0x35ac>)
 80048d2:	2201      	movs	r2, #1
 80048d4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 80048d6:	4b6b      	ldr	r3, [pc, #428]	; (8004a84 <menu+0x35b0>)
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	2b20      	cmp	r3, #32
 80048dc:	d147      	bne.n	800496e <menu+0x349a>
		calismaSayModu = 0;
 80048de:	4b6a      	ldr	r3, [pc, #424]	; (8004a88 <menu+0x35b4>)
 80048e0:	2200      	movs	r2, #0
 80048e2:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "MAKINE ID       ");
 80048e4:	4a69      	ldr	r2, [pc, #420]	; (8004a8c <menu+0x35b8>)
 80048e6:	2101      	movs	r1, #1
 80048e8:	2001      	movs	r0, #1
 80048ea:	f7fb febd 	bl	8000668 <lcd_print>

		lcd_print(2, 1, machineID);
 80048ee:	4a68      	ldr	r2, [pc, #416]	; (8004a90 <menu+0x35bc>)
 80048f0:	2101      	movs	r1, #1
 80048f2:	2002      	movs	r0, #2
 80048f4:	f7fb feb8 	bl	8000668 <lcd_print>
		lcd_print(2, 1+strlen(machineID), emptyArray);
 80048f8:	4865      	ldr	r0, [pc, #404]	; (8004a90 <menu+0x35bc>)
 80048fa:	f7fb fc93 	bl	8000224 <strlen>
 80048fe:	4603      	mov	r3, r0
 8004900:	b2db      	uxtb	r3, r3
 8004902:	3301      	adds	r3, #1
 8004904:	b2db      	uxtb	r3, r3
 8004906:	4a63      	ldr	r2, [pc, #396]	; (8004a94 <menu+0x35c0>)
 8004908:	4619      	mov	r1, r3
 800490a:	2002      	movs	r0, #2
 800490c:	f7fb feac 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004910:	2102      	movs	r1, #2
 8004912:	4857      	ldr	r0, [pc, #348]	; (8004a70 <menu+0x359c>)
 8004914:	f005 f9a8 	bl	8009c68 <HAL_GPIO_ReadPin>
 8004918:	4603      	mov	r3, r0
 800491a:	2b01      	cmp	r3, #1
 800491c:	d127      	bne.n	800496e <menu+0x349a>
 800491e:	2104      	movs	r1, #4
 8004920:	4853      	ldr	r0, [pc, #332]	; (8004a70 <menu+0x359c>)
 8004922:	f005 f9a1 	bl	8009c68 <HAL_GPIO_ReadPin>
 8004926:	4603      	mov	r3, r0
 8004928:	2b01      	cmp	r3, #1
 800492a:	d120      	bne.n	800496e <menu+0x349a>
 800492c:	4b51      	ldr	r3, [pc, #324]	; (8004a74 <menu+0x35a0>)
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	f083 0301 	eor.w	r3, r3, #1
 8004934:	b2db      	uxtb	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d019      	beq.n	800496e <menu+0x349a>
			takeMachineID(0, hi2c1);
 800493a:	6879      	ldr	r1, [r7, #4]
 800493c:	2000      	movs	r0, #0
 800493e:	f7fc f8cd 	bl	8000adc <takeMachineID>

			HAL_Delay(50);
 8004942:	2032      	movs	r0, #50	; 0x32
 8004944:	f004 fbc0 	bl	80090c8 <HAL_Delay>

			lcd_print(2, 1, machineID);
 8004948:	4a51      	ldr	r2, [pc, #324]	; (8004a90 <menu+0x35bc>)
 800494a:	2101      	movs	r1, #1
 800494c:	2002      	movs	r0, #2
 800494e:	f7fb fe8b 	bl	8000668 <lcd_print>
			lcd_print(2, 1+strlen(machineID), emptyArray);
 8004952:	484f      	ldr	r0, [pc, #316]	; (8004a90 <menu+0x35bc>)
 8004954:	f7fb fc66 	bl	8000224 <strlen>
 8004958:	4603      	mov	r3, r0
 800495a:	b2db      	uxtb	r3, r3
 800495c:	3301      	adds	r3, #1
 800495e:	b2db      	uxtb	r3, r3
 8004960:	4a4c      	ldr	r2, [pc, #304]	; (8004a94 <menu+0x35c0>)
 8004962:	4619      	mov	r1, r3
 8004964:	2002      	movs	r0, #2
 8004966:	f7fb fe7f 	bl	8000668 <lcd_print>

			bekle();
 800496a:	f001 fb3f 	bl	8005fec <bekle>
		}
	}

	if (menuSayac == 33) {
 800496e:	4b45      	ldr	r3, [pc, #276]	; (8004a84 <menu+0x35b0>)
 8004970:	781b      	ldrb	r3, [r3, #0]
 8004972:	2b21      	cmp	r3, #33	; 0x21
 8004974:	d154      	bne.n	8004a20 <menu+0x354c>
		calismaSayModu = 0;
 8004976:	4b44      	ldr	r3, [pc, #272]	; (8004a88 <menu+0x35b4>)
 8004978:	2200      	movs	r2, #0
 800497a:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI SSID       ");
 800497c:	4a46      	ldr	r2, [pc, #280]	; (8004a98 <menu+0x35c4>)
 800497e:	2101      	movs	r1, #1
 8004980:	2001      	movs	r0, #1
 8004982:	f7fb fe71 	bl	8000668 <lcd_print>
		if(strlen(wifiSSID) <=16) {
 8004986:	4845      	ldr	r0, [pc, #276]	; (8004a9c <menu+0x35c8>)
 8004988:	f7fb fc4c 	bl	8000224 <strlen>
 800498c:	4603      	mov	r3, r0
 800498e:	2b10      	cmp	r3, #16
 8004990:	d811      	bhi.n	80049b6 <menu+0x34e2>
			lcd_print(2, 1, wifiSSID);
 8004992:	4a42      	ldr	r2, [pc, #264]	; (8004a9c <menu+0x35c8>)
 8004994:	2101      	movs	r1, #1
 8004996:	2002      	movs	r0, #2
 8004998:	f7fb fe66 	bl	8000668 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 800499c:	483f      	ldr	r0, [pc, #252]	; (8004a9c <menu+0x35c8>)
 800499e:	f7fb fc41 	bl	8000224 <strlen>
 80049a2:	4603      	mov	r3, r0
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	3301      	adds	r3, #1
 80049a8:	b2db      	uxtb	r3, r3
 80049aa:	4a3a      	ldr	r2, [pc, #232]	; (8004a94 <menu+0x35c0>)
 80049ac:	4619      	mov	r1, r3
 80049ae:	2002      	movs	r0, #2
 80049b0:	f7fb fe5a 	bl	8000668 <lcd_print>
 80049b4:	e005      	b.n	80049c2 <menu+0x34ee>
		} else {
			slideText(wifiSSID, 1, 2, 0);
 80049b6:	2300      	movs	r3, #0
 80049b8:	2202      	movs	r2, #2
 80049ba:	2101      	movs	r1, #1
 80049bc:	4837      	ldr	r0, [pc, #220]	; (8004a9c <menu+0x35c8>)
 80049be:	f7fc fce3 	bl	8001388 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80049c2:	2102      	movs	r1, #2
 80049c4:	482a      	ldr	r0, [pc, #168]	; (8004a70 <menu+0x359c>)
 80049c6:	f005 f94f 	bl	8009c68 <HAL_GPIO_ReadPin>
 80049ca:	4603      	mov	r3, r0
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d127      	bne.n	8004a20 <menu+0x354c>
 80049d0:	2104      	movs	r1, #4
 80049d2:	4827      	ldr	r0, [pc, #156]	; (8004a70 <menu+0x359c>)
 80049d4:	f005 f948 	bl	8009c68 <HAL_GPIO_ReadPin>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d120      	bne.n	8004a20 <menu+0x354c>
 80049de:	4b25      	ldr	r3, [pc, #148]	; (8004a74 <menu+0x35a0>)
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	f083 0301 	eor.w	r3, r3, #1
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d019      	beq.n	8004a20 <menu+0x354c>
			takeWifiSSID(0, hi2c1);
 80049ec:	6879      	ldr	r1, [r7, #4]
 80049ee:	2000      	movs	r0, #0
 80049f0:	f7fc f9ae 	bl	8000d50 <takeWifiSSID>

			HAL_Delay(50);
 80049f4:	2032      	movs	r0, #50	; 0x32
 80049f6:	f004 fb67 	bl	80090c8 <HAL_Delay>

			lcd_print(2, 1, wifiSSID);
 80049fa:	4a28      	ldr	r2, [pc, #160]	; (8004a9c <menu+0x35c8>)
 80049fc:	2101      	movs	r1, #1
 80049fe:	2002      	movs	r0, #2
 8004a00:	f7fb fe32 	bl	8000668 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 8004a04:	4825      	ldr	r0, [pc, #148]	; (8004a9c <menu+0x35c8>)
 8004a06:	f7fb fc0d 	bl	8000224 <strlen>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	b2db      	uxtb	r3, r3
 8004a0e:	3301      	adds	r3, #1
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	4a20      	ldr	r2, [pc, #128]	; (8004a94 <menu+0x35c0>)
 8004a14:	4619      	mov	r1, r3
 8004a16:	2002      	movs	r0, #2
 8004a18:	f7fb fe26 	bl	8000668 <lcd_print>

			bekle();
 8004a1c:	f001 fae6 	bl	8005fec <bekle>
		}
	}

	if (menuSayac == 34) {
 8004a20:	4b18      	ldr	r3, [pc, #96]	; (8004a84 <menu+0x35b0>)
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	2b22      	cmp	r3, #34	; 0x22
 8004a26:	d174      	bne.n	8004b12 <menu+0x363e>
		calismaSayModu = 0;
 8004a28:	4b17      	ldr	r3, [pc, #92]	; (8004a88 <menu+0x35b4>)
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI PASS       ");
 8004a2e:	4a1c      	ldr	r2, [pc, #112]	; (8004aa0 <menu+0x35cc>)
 8004a30:	2101      	movs	r1, #1
 8004a32:	2001      	movs	r0, #1
 8004a34:	f7fb fe18 	bl	8000668 <lcd_print>
		if(strlen(wifiPass) <= 16) {
 8004a38:	481a      	ldr	r0, [pc, #104]	; (8004aa4 <menu+0x35d0>)
 8004a3a:	f7fb fbf3 	bl	8000224 <strlen>
 8004a3e:	4603      	mov	r3, r0
 8004a40:	2b10      	cmp	r3, #16
 8004a42:	d831      	bhi.n	8004aa8 <menu+0x35d4>
			lcd_print(2, 1, wifiPass);
 8004a44:	4a17      	ldr	r2, [pc, #92]	; (8004aa4 <menu+0x35d0>)
 8004a46:	2101      	movs	r1, #1
 8004a48:	2002      	movs	r0, #2
 8004a4a:	f7fb fe0d 	bl	8000668 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 8004a4e:	4815      	ldr	r0, [pc, #84]	; (8004aa4 <menu+0x35d0>)
 8004a50:	f7fb fbe8 	bl	8000224 <strlen>
 8004a54:	4603      	mov	r3, r0
 8004a56:	b2db      	uxtb	r3, r3
 8004a58:	3301      	adds	r3, #1
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	4a0d      	ldr	r2, [pc, #52]	; (8004a94 <menu+0x35c0>)
 8004a5e:	4619      	mov	r1, r3
 8004a60:	2002      	movs	r0, #2
 8004a62:	f7fb fe01 	bl	8000668 <lcd_print>
 8004a66:	e025      	b.n	8004ab4 <menu+0x35e0>
 8004a68:	20000c6a 	.word	0x20000c6a
 8004a6c:	0800dc60 	.word	0x0800dc60
 8004a70:	40010800 	.word	0x40010800
 8004a74:	20000c78 	.word	0x20000c78
 8004a78:	20000c68 	.word	0x20000c68
 8004a7c:	20000b38 	.word	0x20000b38
 8004a80:	20000c75 	.word	0x20000c75
 8004a84:	20000c49 	.word	0x20000c49
 8004a88:	20000c69 	.word	0x20000c69
 8004a8c:	0800e3a8 	.word	0x0800e3a8
 8004a90:	20000bf4 	.word	0x20000bf4
 8004a94:	2000094c 	.word	0x2000094c
 8004a98:	0800e3bc 	.word	0x0800e3bc
 8004a9c:	20000c00 	.word	0x20000c00
 8004aa0:	0800e3d0 	.word	0x0800e3d0
 8004aa4:	20000c24 	.word	0x20000c24
		} else {
			slideText(wifiPass, 1, 2, 1);
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	2202      	movs	r2, #2
 8004aac:	2101      	movs	r1, #1
 8004aae:	4834      	ldr	r0, [pc, #208]	; (8004b80 <menu+0x36ac>)
 8004ab0:	f7fc fc6a 	bl	8001388 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004ab4:	2102      	movs	r1, #2
 8004ab6:	4833      	ldr	r0, [pc, #204]	; (8004b84 <menu+0x36b0>)
 8004ab8:	f005 f8d6 	bl	8009c68 <HAL_GPIO_ReadPin>
 8004abc:	4603      	mov	r3, r0
 8004abe:	2b01      	cmp	r3, #1
 8004ac0:	d127      	bne.n	8004b12 <menu+0x363e>
 8004ac2:	2104      	movs	r1, #4
 8004ac4:	482f      	ldr	r0, [pc, #188]	; (8004b84 <menu+0x36b0>)
 8004ac6:	f005 f8cf 	bl	8009c68 <HAL_GPIO_ReadPin>
 8004aca:	4603      	mov	r3, r0
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d120      	bne.n	8004b12 <menu+0x363e>
 8004ad0:	4b2d      	ldr	r3, [pc, #180]	; (8004b88 <menu+0x36b4>)
 8004ad2:	781b      	ldrb	r3, [r3, #0]
 8004ad4:	f083 0301 	eor.w	r3, r3, #1
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d019      	beq.n	8004b12 <menu+0x363e>
			takeWifiPass(0, hi2c1);
 8004ade:	6879      	ldr	r1, [r7, #4]
 8004ae0:	2000      	movs	r0, #0
 8004ae2:	f7fc faa9 	bl	8001038 <takeWifiPass>

			HAL_Delay(50);
 8004ae6:	2032      	movs	r0, #50	; 0x32
 8004ae8:	f004 faee 	bl	80090c8 <HAL_Delay>

			lcd_print(2, 1, wifiPass);
 8004aec:	4a24      	ldr	r2, [pc, #144]	; (8004b80 <menu+0x36ac>)
 8004aee:	2101      	movs	r1, #1
 8004af0:	2002      	movs	r0, #2
 8004af2:	f7fb fdb9 	bl	8000668 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 8004af6:	4822      	ldr	r0, [pc, #136]	; (8004b80 <menu+0x36ac>)
 8004af8:	f7fb fb94 	bl	8000224 <strlen>
 8004afc:	4603      	mov	r3, r0
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	3301      	adds	r3, #1
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	4a21      	ldr	r2, [pc, #132]	; (8004b8c <menu+0x36b8>)
 8004b06:	4619      	mov	r1, r3
 8004b08:	2002      	movs	r0, #2
 8004b0a:	f7fb fdad 	bl	8000668 <lcd_print>

			bekle();
 8004b0e:	f001 fa6d 	bl	8005fec <bekle>
		}
	}

	if (menuSayac == 35) {
 8004b12:	4b1f      	ldr	r3, [pc, #124]	; (8004b90 <menu+0x36bc>)
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	2b23      	cmp	r3, #35	; 0x23
 8004b18:	d12e      	bne.n	8004b78 <menu+0x36a4>
		if(dilSecim == 0) {
 8004b1a:	4b1e      	ldr	r3, [pc, #120]	; (8004b94 <menu+0x36c0>)
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d10a      	bne.n	8004b38 <menu+0x3664>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 8004b22:	4a1d      	ldr	r2, [pc, #116]	; (8004b98 <menu+0x36c4>)
 8004b24:	2101      	movs	r1, #1
 8004b26:	2001      	movs	r0, #1
 8004b28:	f7fb fd9e 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8004b2c:	4a1b      	ldr	r2, [pc, #108]	; (8004b9c <menu+0x36c8>)
 8004b2e:	2101      	movs	r1, #1
 8004b30:	2002      	movs	r0, #2
 8004b32:	f7fb fd99 	bl	8000668 <lcd_print>
 8004b36:	e00d      	b.n	8004b54 <menu+0x3680>
		} else if(dilSecim == 1) {
 8004b38:	4b16      	ldr	r3, [pc, #88]	; (8004b94 <menu+0x36c0>)
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d109      	bne.n	8004b54 <menu+0x3680>
			lcd_print(1, 1, " EXIT THE MENU  ");
 8004b40:	4a17      	ldr	r2, [pc, #92]	; (8004ba0 <menu+0x36cc>)
 8004b42:	2101      	movs	r1, #1
 8004b44:	2001      	movs	r0, #1
 8004b46:	f7fb fd8f 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 8004b4a:	4a16      	ldr	r2, [pc, #88]	; (8004ba4 <menu+0x36d0>)
 8004b4c:	2101      	movs	r1, #1
 8004b4e:	2002      	movs	r0, #2
 8004b50:	f7fb fd8a 	bl	8000668 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8004b54:	2108      	movs	r1, #8
 8004b56:	480b      	ldr	r0, [pc, #44]	; (8004b84 <menu+0x36b0>)
 8004b58:	f005 f886 	bl	8009c68 <HAL_GPIO_ReadPin>
 8004b5c:	4603      	mov	r3, r0
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d10a      	bne.n	8004b78 <menu+0x36a4>
			menuGiris = 0;
 8004b62:	4b11      	ldr	r3, [pc, #68]	; (8004ba8 <menu+0x36d4>)
 8004b64:	2200      	movs	r2, #0
 8004b66:	701a      	strb	r2, [r3, #0]

			lcd_clear();
 8004b68:	f7fb fdaa 	bl	80006c0 <lcd_clear>
			HAL_Delay(500);
 8004b6c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004b70:	f004 faaa 	bl	80090c8 <HAL_Delay>
			NVIC_SystemReset();
 8004b74:	f7fb fdec 	bl	8000750 <__NVIC_SystemReset>
		}
	}
}
 8004b78:	bf00      	nop
 8004b7a:	3708      	adds	r7, #8
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	bd80      	pop	{r7, pc}
 8004b80:	20000c24 	.word	0x20000c24
 8004b84:	40010800 	.word	0x40010800
 8004b88:	20000c78 	.word	0x20000c78
 8004b8c:	2000094c 	.word	0x2000094c
 8004b90:	20000c49 	.word	0x20000c49
 8004b94:	20000c6a 	.word	0x20000c6a
 8004b98:	0800e3e4 	.word	0x0800e3e4
 8004b9c:	0800e3f8 	.word	0x0800e3f8
 8004ba0:	0800e40c 	.word	0x0800e40c
 8004ba4:	0800e420 	.word	0x0800e420
 8004ba8:	20000c66 	.word	0x20000c66

08004bac <loadMenuTexts>:

void loadMenuTexts(uint8_t dilSecim) {
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	71fb      	strb	r3, [r7, #7]
	mainText = copyText(mainTextGN);
 8004bb6:	48a9      	ldr	r0, [pc, #676]	; (8004e5c <loadMenuTexts+0x2b0>)
 8004bb8:	f7fb fde0 	bl	800077c <copyText>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	4aa8      	ldr	r2, [pc, #672]	; (8004e60 <loadMenuTexts+0x2b4>)
 8004bc0:	6013      	str	r3, [r2, #0]
	mainText2 = copyText(mainText2GN);
 8004bc2:	48a8      	ldr	r0, [pc, #672]	; (8004e64 <loadMenuTexts+0x2b8>)
 8004bc4:	f7fb fdda 	bl	800077c <copyText>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	4aa7      	ldr	r2, [pc, #668]	; (8004e68 <loadMenuTexts+0x2bc>)
 8004bcc:	6013      	str	r3, [r2, #0]
	ondSafetyText = copyText(ondSafetyTextGN);
 8004bce:	48a7      	ldr	r0, [pc, #668]	; (8004e6c <loadMenuTexts+0x2c0>)
 8004bd0:	f7fb fdd4 	bl	800077c <copyText>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	4aa6      	ldr	r2, [pc, #664]	; (8004e70 <loadMenuTexts+0x2c4>)
 8004bd8:	6013      	str	r3, [r2, #0]
	prudhomeText = copyText(prudhomeTextGN);
 8004bda:	48a6      	ldr	r0, [pc, #664]	; (8004e74 <loadMenuTexts+0x2c8>)
 8004bdc:	f7fb fdce 	bl	800077c <copyText>
 8004be0:	4603      	mov	r3, r0
 8004be2:	4aa5      	ldr	r2, [pc, #660]	; (8004e78 <loadMenuTexts+0x2cc>)
 8004be4:	6013      	str	r3, [r2, #0]
	pizzattoText = copyText(pizzattoTextGN);
 8004be6:	48a5      	ldr	r0, [pc, #660]	; (8004e7c <loadMenuTexts+0x2d0>)
 8004be8:	f7fb fdc8 	bl	800077c <copyText>
 8004bec:	4603      	mov	r3, r0
 8004bee:	4aa4      	ldr	r2, [pc, #656]	; (8004e80 <loadMenuTexts+0x2d4>)
 8004bf0:	6013      	str	r3, [r2, #0]
	buzzerText = copyText(buzzerTextGN);
 8004bf2:	48a4      	ldr	r0, [pc, #656]	; (8004e84 <loadMenuTexts+0x2d8>)
 8004bf4:	f7fb fdc2 	bl	800077c <copyText>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	4aa3      	ldr	r2, [pc, #652]	; (8004e88 <loadMenuTexts+0x2dc>)
 8004bfc:	6013      	str	r3, [r2, #0]
	demoModText = copyText(demoModTextGN);
 8004bfe:	48a3      	ldr	r0, [pc, #652]	; (8004e8c <loadMenuTexts+0x2e0>)
 8004c00:	f7fb fdbc 	bl	800077c <copyText>
 8004c04:	4603      	mov	r3, r0
 8004c06:	4aa2      	ldr	r2, [pc, #648]	; (8004e90 <loadMenuTexts+0x2e4>)
 8004c08:	6013      	str	r3, [r2, #0]
	if(dilSecim == 0) {
 8004c0a:	79fb      	ldrb	r3, [r7, #7]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	f040 82d1 	bne.w	80051b4 <loadMenuTexts+0x608>
		menuyeGirildiText = copyText(menuyeGirildiTextTR);
 8004c12:	48a0      	ldr	r0, [pc, #640]	; (8004e94 <loadMenuTexts+0x2e8>)
 8004c14:	f7fb fdb2 	bl	800077c <copyText>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	4a9f      	ldr	r2, [pc, #636]	; (8004e98 <loadMenuTexts+0x2ec>)
 8004c1c:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextTR);
 8004c1e:	489f      	ldr	r0, [pc, #636]	; (8004e9c <loadMenuTexts+0x2f0>)
 8004c20:	f7fb fdac 	bl	800077c <copyText>
 8004c24:	4603      	mov	r3, r0
 8004c26:	4a9e      	ldr	r2, [pc, #632]	; (8004ea0 <loadMenuTexts+0x2f4>)
 8004c28:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextTR);
 8004c2a:	489e      	ldr	r0, [pc, #632]	; (8004ea4 <loadMenuTexts+0x2f8>)
 8004c2c:	f7fb fda6 	bl	800077c <copyText>
 8004c30:	4603      	mov	r3, r0
 8004c32:	4a9d      	ldr	r2, [pc, #628]	; (8004ea8 <loadMenuTexts+0x2fc>)
 8004c34:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextTR);
 8004c36:	489d      	ldr	r0, [pc, #628]	; (8004eac <loadMenuTexts+0x300>)
 8004c38:	f7fb fda0 	bl	800077c <copyText>
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	4a9c      	ldr	r2, [pc, #624]	; (8004eb0 <loadMenuTexts+0x304>)
 8004c40:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextTR);
 8004c42:	489c      	ldr	r0, [pc, #624]	; (8004eb4 <loadMenuTexts+0x308>)
 8004c44:	f7fb fd9a 	bl	800077c <copyText>
 8004c48:	4603      	mov	r3, r0
 8004c4a:	4a9b      	ldr	r2, [pc, #620]	; (8004eb8 <loadMenuTexts+0x30c>)
 8004c4c:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextTR);
 8004c4e:	489b      	ldr	r0, [pc, #620]	; (8004ebc <loadMenuTexts+0x310>)
 8004c50:	f7fb fd94 	bl	800077c <copyText>
 8004c54:	4603      	mov	r3, r0
 8004c56:	4a9a      	ldr	r2, [pc, #616]	; (8004ec0 <loadMenuTexts+0x314>)
 8004c58:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextTR);
 8004c5a:	489a      	ldr	r0, [pc, #616]	; (8004ec4 <loadMenuTexts+0x318>)
 8004c5c:	f7fb fd8e 	bl	800077c <copyText>
 8004c60:	4603      	mov	r3, r0
 8004c62:	4a99      	ldr	r2, [pc, #612]	; (8004ec8 <loadMenuTexts+0x31c>)
 8004c64:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextTR);
 8004c66:	4899      	ldr	r0, [pc, #612]	; (8004ecc <loadMenuTexts+0x320>)
 8004c68:	f7fb fd88 	bl	800077c <copyText>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	4a98      	ldr	r2, [pc, #608]	; (8004ed0 <loadMenuTexts+0x324>)
 8004c70:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextTR);
 8004c72:	4898      	ldr	r0, [pc, #608]	; (8004ed4 <loadMenuTexts+0x328>)
 8004c74:	f7fb fd82 	bl	800077c <copyText>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	4a97      	ldr	r2, [pc, #604]	; (8004ed8 <loadMenuTexts+0x32c>)
 8004c7c:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextTR);
 8004c7e:	4897      	ldr	r0, [pc, #604]	; (8004edc <loadMenuTexts+0x330>)
 8004c80:	f7fb fd7c 	bl	800077c <copyText>
 8004c84:	4603      	mov	r3, r0
 8004c86:	4a96      	ldr	r2, [pc, #600]	; (8004ee0 <loadMenuTexts+0x334>)
 8004c88:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextTR);
 8004c8a:	4896      	ldr	r0, [pc, #600]	; (8004ee4 <loadMenuTexts+0x338>)
 8004c8c:	f7fb fd76 	bl	800077c <copyText>
 8004c90:	4603      	mov	r3, r0
 8004c92:	4a95      	ldr	r2, [pc, #596]	; (8004ee8 <loadMenuTexts+0x33c>)
 8004c94:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextTR);
 8004c96:	4895      	ldr	r0, [pc, #596]	; (8004eec <loadMenuTexts+0x340>)
 8004c98:	f7fb fd70 	bl	800077c <copyText>
 8004c9c:	4603      	mov	r3, r0
 8004c9e:	4a94      	ldr	r2, [pc, #592]	; (8004ef0 <loadMenuTexts+0x344>)
 8004ca0:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextTR);
 8004ca2:	4894      	ldr	r0, [pc, #592]	; (8004ef4 <loadMenuTexts+0x348>)
 8004ca4:	f7fb fd6a 	bl	800077c <copyText>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	4a93      	ldr	r2, [pc, #588]	; (8004ef8 <loadMenuTexts+0x34c>)
 8004cac:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextTR);
 8004cae:	4893      	ldr	r0, [pc, #588]	; (8004efc <loadMenuTexts+0x350>)
 8004cb0:	f7fb fd64 	bl	800077c <copyText>
 8004cb4:	4603      	mov	r3, r0
 8004cb6:	4a92      	ldr	r2, [pc, #584]	; (8004f00 <loadMenuTexts+0x354>)
 8004cb8:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextTR);
 8004cba:	4892      	ldr	r0, [pc, #584]	; (8004f04 <loadMenuTexts+0x358>)
 8004cbc:	f7fb fd5e 	bl	800077c <copyText>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	4a91      	ldr	r2, [pc, #580]	; (8004f08 <loadMenuTexts+0x35c>)
 8004cc4:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextTR);
 8004cc6:	4891      	ldr	r0, [pc, #580]	; (8004f0c <loadMenuTexts+0x360>)
 8004cc8:	f7fb fd58 	bl	800077c <copyText>
 8004ccc:	4603      	mov	r3, r0
 8004cce:	4a90      	ldr	r2, [pc, #576]	; (8004f10 <loadMenuTexts+0x364>)
 8004cd0:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextTR);
 8004cd2:	4890      	ldr	r0, [pc, #576]	; (8004f14 <loadMenuTexts+0x368>)
 8004cd4:	f7fb fd52 	bl	800077c <copyText>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	4a8f      	ldr	r2, [pc, #572]	; (8004f18 <loadMenuTexts+0x36c>)
 8004cdc:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextTR);
 8004cde:	488f      	ldr	r0, [pc, #572]	; (8004f1c <loadMenuTexts+0x370>)
 8004ce0:	f7fb fd4c 	bl	800077c <copyText>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	4a8e      	ldr	r2, [pc, #568]	; (8004f20 <loadMenuTexts+0x374>)
 8004ce8:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextTR);
 8004cea:	488e      	ldr	r0, [pc, #568]	; (8004f24 <loadMenuTexts+0x378>)
 8004cec:	f7fb fd46 	bl	800077c <copyText>
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	4a8d      	ldr	r2, [pc, #564]	; (8004f28 <loadMenuTexts+0x37c>)
 8004cf4:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextTR);
 8004cf6:	488d      	ldr	r0, [pc, #564]	; (8004f2c <loadMenuTexts+0x380>)
 8004cf8:	f7fb fd40 	bl	800077c <copyText>
 8004cfc:	4603      	mov	r3, r0
 8004cfe:	4a8c      	ldr	r2, [pc, #560]	; (8004f30 <loadMenuTexts+0x384>)
 8004d00:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextTR);
 8004d02:	488c      	ldr	r0, [pc, #560]	; (8004f34 <loadMenuTexts+0x388>)
 8004d04:	f7fb fd3a 	bl	800077c <copyText>
 8004d08:	4603      	mov	r3, r0
 8004d0a:	4a8b      	ldr	r2, [pc, #556]	; (8004f38 <loadMenuTexts+0x38c>)
 8004d0c:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextTR);
 8004d0e:	488b      	ldr	r0, [pc, #556]	; (8004f3c <loadMenuTexts+0x390>)
 8004d10:	f7fb fd34 	bl	800077c <copyText>
 8004d14:	4603      	mov	r3, r0
 8004d16:	4a8a      	ldr	r2, [pc, #552]	; (8004f40 <loadMenuTexts+0x394>)
 8004d18:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextTR);
 8004d1a:	488a      	ldr	r0, [pc, #552]	; (8004f44 <loadMenuTexts+0x398>)
 8004d1c:	f7fb fd2e 	bl	800077c <copyText>
 8004d20:	4603      	mov	r3, r0
 8004d22:	4a89      	ldr	r2, [pc, #548]	; (8004f48 <loadMenuTexts+0x39c>)
 8004d24:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextTR);
 8004d26:	4889      	ldr	r0, [pc, #548]	; (8004f4c <loadMenuTexts+0x3a0>)
 8004d28:	f7fb fd28 	bl	800077c <copyText>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	4a88      	ldr	r2, [pc, #544]	; (8004f50 <loadMenuTexts+0x3a4>)
 8004d30:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextTR);
 8004d32:	4888      	ldr	r0, [pc, #544]	; (8004f54 <loadMenuTexts+0x3a8>)
 8004d34:	f7fb fd22 	bl	800077c <copyText>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	4a87      	ldr	r2, [pc, #540]	; (8004f58 <loadMenuTexts+0x3ac>)
 8004d3c:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextTR);
 8004d3e:	4887      	ldr	r0, [pc, #540]	; (8004f5c <loadMenuTexts+0x3b0>)
 8004d40:	f7fb fd1c 	bl	800077c <copyText>
 8004d44:	4603      	mov	r3, r0
 8004d46:	4a86      	ldr	r2, [pc, #536]	; (8004f60 <loadMenuTexts+0x3b4>)
 8004d48:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextTR);
 8004d4a:	4886      	ldr	r0, [pc, #536]	; (8004f64 <loadMenuTexts+0x3b8>)
 8004d4c:	f7fb fd16 	bl	800077c <copyText>
 8004d50:	4603      	mov	r3, r0
 8004d52:	4a85      	ldr	r2, [pc, #532]	; (8004f68 <loadMenuTexts+0x3bc>)
 8004d54:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextTR);
 8004d56:	4885      	ldr	r0, [pc, #532]	; (8004f6c <loadMenuTexts+0x3c0>)
 8004d58:	f7fb fd10 	bl	800077c <copyText>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	4a84      	ldr	r2, [pc, #528]	; (8004f70 <loadMenuTexts+0x3c4>)
 8004d60:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextTR);
 8004d62:	4884      	ldr	r0, [pc, #528]	; (8004f74 <loadMenuTexts+0x3c8>)
 8004d64:	f7fb fd0a 	bl	800077c <copyText>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	4a83      	ldr	r2, [pc, #524]	; (8004f78 <loadMenuTexts+0x3cc>)
 8004d6c:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextTR);
 8004d6e:	4883      	ldr	r0, [pc, #524]	; (8004f7c <loadMenuTexts+0x3d0>)
 8004d70:	f7fb fd04 	bl	800077c <copyText>
 8004d74:	4603      	mov	r3, r0
 8004d76:	4a82      	ldr	r2, [pc, #520]	; (8004f80 <loadMenuTexts+0x3d4>)
 8004d78:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextTR);
 8004d7a:	4882      	ldr	r0, [pc, #520]	; (8004f84 <loadMenuTexts+0x3d8>)
 8004d7c:	f7fb fcfe 	bl	800077c <copyText>
 8004d80:	4603      	mov	r3, r0
 8004d82:	4a81      	ldr	r2, [pc, #516]	; (8004f88 <loadMenuTexts+0x3dc>)
 8004d84:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextTR);
 8004d86:	4881      	ldr	r0, [pc, #516]	; (8004f8c <loadMenuTexts+0x3e0>)
 8004d88:	f7fb fcf8 	bl	800077c <copyText>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	4a80      	ldr	r2, [pc, #512]	; (8004f90 <loadMenuTexts+0x3e4>)
 8004d90:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextTR);
 8004d92:	4880      	ldr	r0, [pc, #512]	; (8004f94 <loadMenuTexts+0x3e8>)
 8004d94:	f7fb fcf2 	bl	800077c <copyText>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	4a7f      	ldr	r2, [pc, #508]	; (8004f98 <loadMenuTexts+0x3ec>)
 8004d9c:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextTR);
 8004d9e:	487f      	ldr	r0, [pc, #508]	; (8004f9c <loadMenuTexts+0x3f0>)
 8004da0:	f7fb fcec 	bl	800077c <copyText>
 8004da4:	4603      	mov	r3, r0
 8004da6:	4a7e      	ldr	r2, [pc, #504]	; (8004fa0 <loadMenuTexts+0x3f4>)
 8004da8:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextTR);
 8004daa:	487e      	ldr	r0, [pc, #504]	; (8004fa4 <loadMenuTexts+0x3f8>)
 8004dac:	f7fb fce6 	bl	800077c <copyText>
 8004db0:	4603      	mov	r3, r0
 8004db2:	4a7d      	ldr	r2, [pc, #500]	; (8004fa8 <loadMenuTexts+0x3fc>)
 8004db4:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextTR);
 8004db6:	487d      	ldr	r0, [pc, #500]	; (8004fac <loadMenuTexts+0x400>)
 8004db8:	f7fb fce0 	bl	800077c <copyText>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	4a7c      	ldr	r2, [pc, #496]	; (8004fb0 <loadMenuTexts+0x404>)
 8004dc0:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextTR);
 8004dc2:	487c      	ldr	r0, [pc, #496]	; (8004fb4 <loadMenuTexts+0x408>)
 8004dc4:	f7fb fcda 	bl	800077c <copyText>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	4a7b      	ldr	r2, [pc, #492]	; (8004fb8 <loadMenuTexts+0x40c>)
 8004dcc:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextTR);
 8004dce:	487b      	ldr	r0, [pc, #492]	; (8004fbc <loadMenuTexts+0x410>)
 8004dd0:	f7fb fcd4 	bl	800077c <copyText>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	4a7a      	ldr	r2, [pc, #488]	; (8004fc0 <loadMenuTexts+0x414>)
 8004dd8:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextTR);
 8004dda:	487a      	ldr	r0, [pc, #488]	; (8004fc4 <loadMenuTexts+0x418>)
 8004ddc:	f7fb fcce 	bl	800077c <copyText>
 8004de0:	4603      	mov	r3, r0
 8004de2:	4a79      	ldr	r2, [pc, #484]	; (8004fc8 <loadMenuTexts+0x41c>)
 8004de4:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextTR);
 8004de6:	4879      	ldr	r0, [pc, #484]	; (8004fcc <loadMenuTexts+0x420>)
 8004de8:	f7fb fcc8 	bl	800077c <copyText>
 8004dec:	4603      	mov	r3, r0
 8004dee:	4a78      	ldr	r2, [pc, #480]	; (8004fd0 <loadMenuTexts+0x424>)
 8004df0:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextTR);
 8004df2:	4878      	ldr	r0, [pc, #480]	; (8004fd4 <loadMenuTexts+0x428>)
 8004df4:	f7fb fcc2 	bl	800077c <copyText>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	4a77      	ldr	r2, [pc, #476]	; (8004fd8 <loadMenuTexts+0x42c>)
 8004dfc:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextTR);
 8004dfe:	4877      	ldr	r0, [pc, #476]	; (8004fdc <loadMenuTexts+0x430>)
 8004e00:	f7fb fcbc 	bl	800077c <copyText>
 8004e04:	4603      	mov	r3, r0
 8004e06:	4a76      	ldr	r2, [pc, #472]	; (8004fe0 <loadMenuTexts+0x434>)
 8004e08:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextTR);
 8004e0a:	4876      	ldr	r0, [pc, #472]	; (8004fe4 <loadMenuTexts+0x438>)
 8004e0c:	f7fb fcb6 	bl	800077c <copyText>
 8004e10:	4603      	mov	r3, r0
 8004e12:	4a75      	ldr	r2, [pc, #468]	; (8004fe8 <loadMenuTexts+0x43c>)
 8004e14:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextTR);
 8004e16:	4875      	ldr	r0, [pc, #468]	; (8004fec <loadMenuTexts+0x440>)
 8004e18:	f7fb fcb0 	bl	800077c <copyText>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	4a74      	ldr	r2, [pc, #464]	; (8004ff0 <loadMenuTexts+0x444>)
 8004e20:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextTR);
 8004e22:	4874      	ldr	r0, [pc, #464]	; (8004ff4 <loadMenuTexts+0x448>)
 8004e24:	f7fb fcaa 	bl	800077c <copyText>
 8004e28:	4603      	mov	r3, r0
 8004e2a:	4a73      	ldr	r2, [pc, #460]	; (8004ff8 <loadMenuTexts+0x44c>)
 8004e2c:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextTR);
 8004e2e:	4873      	ldr	r0, [pc, #460]	; (8004ffc <loadMenuTexts+0x450>)
 8004e30:	f7fb fca4 	bl	800077c <copyText>
 8004e34:	4603      	mov	r3, r0
 8004e36:	4a72      	ldr	r2, [pc, #456]	; (8005000 <loadMenuTexts+0x454>)
 8004e38:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextTR);
 8004e3a:	4872      	ldr	r0, [pc, #456]	; (8005004 <loadMenuTexts+0x458>)
 8004e3c:	f7fb fc9e 	bl	800077c <copyText>
 8004e40:	4603      	mov	r3, r0
 8004e42:	4a71      	ldr	r2, [pc, #452]	; (8005008 <loadMenuTexts+0x45c>)
 8004e44:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextTR);
 8004e46:	4871      	ldr	r0, [pc, #452]	; (800500c <loadMenuTexts+0x460>)
 8004e48:	f7fb fc98 	bl	800077c <copyText>
 8004e4c:	4603      	mov	r3, r0
 8004e4e:	4a70      	ldr	r2, [pc, #448]	; (8005010 <loadMenuTexts+0x464>)
 8004e50:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextTR);
 8004e52:	4870      	ldr	r0, [pc, #448]	; (8005014 <loadMenuTexts+0x468>)
 8004e54:	f7fb fc92 	bl	800077c <copyText>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	e0dd      	b.n	8005018 <loadMenuTexts+0x46c>
 8004e5c:	20000000 	.word	0x20000000
 8004e60:	20000cb0 	.word	0x20000cb0
 8004e64:	20000010 	.word	0x20000010
 8004e68:	20000cb4 	.word	0x20000cb4
 8004e6c:	20000020 	.word	0x20000020
 8004e70:	20000d0c 	.word	0x20000d0c
 8004e74:	20000030 	.word	0x20000030
 8004e78:	20000d3c 	.word	0x20000d3c
 8004e7c:	20000040 	.word	0x20000040
 8004e80:	20000d44 	.word	0x20000d44
 8004e84:	20000050 	.word	0x20000050
 8004e88:	20000dbc 	.word	0x20000dbc
 8004e8c:	20000060 	.word	0x20000060
 8004e90:	20000dc0 	.word	0x20000dc0
 8004e94:	20000070 	.word	0x20000070
 8004e98:	20000cb8 	.word	0x20000cb8
 8004e9c:	20000080 	.word	0x20000080
 8004ea0:	20000cbc 	.word	0x20000cbc
 8004ea4:	20000090 	.word	0x20000090
 8004ea8:	20000cc0 	.word	0x20000cc0
 8004eac:	200000a0 	.word	0x200000a0
 8004eb0:	20000cc4 	.word	0x20000cc4
 8004eb4:	200000b0 	.word	0x200000b0
 8004eb8:	20000cc8 	.word	0x20000cc8
 8004ebc:	200000c0 	.word	0x200000c0
 8004ec0:	20000ccc 	.word	0x20000ccc
 8004ec4:	200000d0 	.word	0x200000d0
 8004ec8:	20000cd0 	.word	0x20000cd0
 8004ecc:	200000e0 	.word	0x200000e0
 8004ed0:	20000cd4 	.word	0x20000cd4
 8004ed4:	200000f0 	.word	0x200000f0
 8004ed8:	20000cd8 	.word	0x20000cd8
 8004edc:	20000100 	.word	0x20000100
 8004ee0:	20000cdc 	.word	0x20000cdc
 8004ee4:	20000110 	.word	0x20000110
 8004ee8:	20000ce0 	.word	0x20000ce0
 8004eec:	20000120 	.word	0x20000120
 8004ef0:	20000ce4 	.word	0x20000ce4
 8004ef4:	20000130 	.word	0x20000130
 8004ef8:	20000ce8 	.word	0x20000ce8
 8004efc:	20000140 	.word	0x20000140
 8004f00:	20000cec 	.word	0x20000cec
 8004f04:	20000150 	.word	0x20000150
 8004f08:	20000cf0 	.word	0x20000cf0
 8004f0c:	20000160 	.word	0x20000160
 8004f10:	20000cf4 	.word	0x20000cf4
 8004f14:	20000170 	.word	0x20000170
 8004f18:	20000cf8 	.word	0x20000cf8
 8004f1c:	20000180 	.word	0x20000180
 8004f20:	20000cfc 	.word	0x20000cfc
 8004f24:	20000190 	.word	0x20000190
 8004f28:	20000d00 	.word	0x20000d00
 8004f2c:	200001a0 	.word	0x200001a0
 8004f30:	20000d04 	.word	0x20000d04
 8004f34:	200001b0 	.word	0x200001b0
 8004f38:	20000d08 	.word	0x20000d08
 8004f3c:	200001c0 	.word	0x200001c0
 8004f40:	20000d10 	.word	0x20000d10
 8004f44:	200001d0 	.word	0x200001d0
 8004f48:	20000d14 	.word	0x20000d14
 8004f4c:	200001e0 	.word	0x200001e0
 8004f50:	20000d18 	.word	0x20000d18
 8004f54:	200001f0 	.word	0x200001f0
 8004f58:	20000d1c 	.word	0x20000d1c
 8004f5c:	20000200 	.word	0x20000200
 8004f60:	20000d20 	.word	0x20000d20
 8004f64:	20000210 	.word	0x20000210
 8004f68:	20000d24 	.word	0x20000d24
 8004f6c:	20000220 	.word	0x20000220
 8004f70:	20000d28 	.word	0x20000d28
 8004f74:	20000230 	.word	0x20000230
 8004f78:	20000d2c 	.word	0x20000d2c
 8004f7c:	20000240 	.word	0x20000240
 8004f80:	20000d30 	.word	0x20000d30
 8004f84:	20000250 	.word	0x20000250
 8004f88:	20000d34 	.word	0x20000d34
 8004f8c:	20000260 	.word	0x20000260
 8004f90:	20000d38 	.word	0x20000d38
 8004f94:	20000270 	.word	0x20000270
 8004f98:	20000d40 	.word	0x20000d40
 8004f9c:	20000280 	.word	0x20000280
 8004fa0:	20000d48 	.word	0x20000d48
 8004fa4:	20000290 	.word	0x20000290
 8004fa8:	20000d4c 	.word	0x20000d4c
 8004fac:	200002a0 	.word	0x200002a0
 8004fb0:	20000d50 	.word	0x20000d50
 8004fb4:	200002b0 	.word	0x200002b0
 8004fb8:	20000d54 	.word	0x20000d54
 8004fbc:	200002c0 	.word	0x200002c0
 8004fc0:	20000d58 	.word	0x20000d58
 8004fc4:	200002d0 	.word	0x200002d0
 8004fc8:	20000d5c 	.word	0x20000d5c
 8004fcc:	200002e0 	.word	0x200002e0
 8004fd0:	20000d60 	.word	0x20000d60
 8004fd4:	200002f0 	.word	0x200002f0
 8004fd8:	20000d64 	.word	0x20000d64
 8004fdc:	20000300 	.word	0x20000300
 8004fe0:	20000d68 	.word	0x20000d68
 8004fe4:	20000310 	.word	0x20000310
 8004fe8:	20000d6c 	.word	0x20000d6c
 8004fec:	20000320 	.word	0x20000320
 8004ff0:	20000d70 	.word	0x20000d70
 8004ff4:	20000330 	.word	0x20000330
 8004ff8:	20000d74 	.word	0x20000d74
 8004ffc:	20000340 	.word	0x20000340
 8005000:	20000d78 	.word	0x20000d78
 8005004:	20000350 	.word	0x20000350
 8005008:	20000d7c 	.word	0x20000d7c
 800500c:	20000360 	.word	0x20000360
 8005010:	20000d80 	.word	0x20000d80
 8005014:	20000370 	.word	0x20000370
 8005018:	4a3d      	ldr	r2, [pc, #244]	; (8005110 <loadMenuTexts+0x564>)
 800501a:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextTR);
 800501c:	483d      	ldr	r0, [pc, #244]	; (8005114 <loadMenuTexts+0x568>)
 800501e:	f7fb fbad 	bl	800077c <copyText>
 8005022:	4603      	mov	r3, r0
 8005024:	4a3c      	ldr	r2, [pc, #240]	; (8005118 <loadMenuTexts+0x56c>)
 8005026:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextTR);
 8005028:	483c      	ldr	r0, [pc, #240]	; (800511c <loadMenuTexts+0x570>)
 800502a:	f7fb fba7 	bl	800077c <copyText>
 800502e:	4603      	mov	r3, r0
 8005030:	4a3b      	ldr	r2, [pc, #236]	; (8005120 <loadMenuTexts+0x574>)
 8005032:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextTR);
 8005034:	483b      	ldr	r0, [pc, #236]	; (8005124 <loadMenuTexts+0x578>)
 8005036:	f7fb fba1 	bl	800077c <copyText>
 800503a:	4603      	mov	r3, r0
 800503c:	4a3a      	ldr	r2, [pc, #232]	; (8005128 <loadMenuTexts+0x57c>)
 800503e:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextTR);
 8005040:	483a      	ldr	r0, [pc, #232]	; (800512c <loadMenuTexts+0x580>)
 8005042:	f7fb fb9b 	bl	800077c <copyText>
 8005046:	4603      	mov	r3, r0
 8005048:	4a39      	ldr	r2, [pc, #228]	; (8005130 <loadMenuTexts+0x584>)
 800504a:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextTR);
 800504c:	4839      	ldr	r0, [pc, #228]	; (8005134 <loadMenuTexts+0x588>)
 800504e:	f7fb fb95 	bl	800077c <copyText>
 8005052:	4603      	mov	r3, r0
 8005054:	4a38      	ldr	r2, [pc, #224]	; (8005138 <loadMenuTexts+0x58c>)
 8005056:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextTR);
 8005058:	4838      	ldr	r0, [pc, #224]	; (800513c <loadMenuTexts+0x590>)
 800505a:	f7fb fb8f 	bl	800077c <copyText>
 800505e:	4603      	mov	r3, r0
 8005060:	4a37      	ldr	r2, [pc, #220]	; (8005140 <loadMenuTexts+0x594>)
 8005062:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextTR);
 8005064:	4837      	ldr	r0, [pc, #220]	; (8005144 <loadMenuTexts+0x598>)
 8005066:	f7fb fb89 	bl	800077c <copyText>
 800506a:	4603      	mov	r3, r0
 800506c:	4a36      	ldr	r2, [pc, #216]	; (8005148 <loadMenuTexts+0x59c>)
 800506e:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextTR);
 8005070:	4836      	ldr	r0, [pc, #216]	; (800514c <loadMenuTexts+0x5a0>)
 8005072:	f7fb fb83 	bl	800077c <copyText>
 8005076:	4603      	mov	r3, r0
 8005078:	4a35      	ldr	r2, [pc, #212]	; (8005150 <loadMenuTexts+0x5a4>)
 800507a:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextTR);
 800507c:	4835      	ldr	r0, [pc, #212]	; (8005154 <loadMenuTexts+0x5a8>)
 800507e:	f7fb fb7d 	bl	800077c <copyText>
 8005082:	4603      	mov	r3, r0
 8005084:	4a34      	ldr	r2, [pc, #208]	; (8005158 <loadMenuTexts+0x5ac>)
 8005086:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextTR);
 8005088:	4834      	ldr	r0, [pc, #208]	; (800515c <loadMenuTexts+0x5b0>)
 800508a:	f7fb fb77 	bl	800077c <copyText>
 800508e:	4603      	mov	r3, r0
 8005090:	4a33      	ldr	r2, [pc, #204]	; (8005160 <loadMenuTexts+0x5b4>)
 8005092:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextTR);
 8005094:	4833      	ldr	r0, [pc, #204]	; (8005164 <loadMenuTexts+0x5b8>)
 8005096:	f7fb fb71 	bl	800077c <copyText>
 800509a:	4603      	mov	r3, r0
 800509c:	4a32      	ldr	r2, [pc, #200]	; (8005168 <loadMenuTexts+0x5bc>)
 800509e:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextTR);
 80050a0:	4832      	ldr	r0, [pc, #200]	; (800516c <loadMenuTexts+0x5c0>)
 80050a2:	f7fb fb6b 	bl	800077c <copyText>
 80050a6:	4603      	mov	r3, r0
 80050a8:	4a31      	ldr	r2, [pc, #196]	; (8005170 <loadMenuTexts+0x5c4>)
 80050aa:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextTR);
 80050ac:	4831      	ldr	r0, [pc, #196]	; (8005174 <loadMenuTexts+0x5c8>)
 80050ae:	f7fb fb65 	bl	800077c <copyText>
 80050b2:	4603      	mov	r3, r0
 80050b4:	4a30      	ldr	r2, [pc, #192]	; (8005178 <loadMenuTexts+0x5cc>)
 80050b6:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextTR);
 80050b8:	4830      	ldr	r0, [pc, #192]	; (800517c <loadMenuTexts+0x5d0>)
 80050ba:	f7fb fb5f 	bl	800077c <copyText>
 80050be:	4603      	mov	r3, r0
 80050c0:	4a2f      	ldr	r2, [pc, #188]	; (8005180 <loadMenuTexts+0x5d4>)
 80050c2:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextTR);
 80050c4:	482f      	ldr	r0, [pc, #188]	; (8005184 <loadMenuTexts+0x5d8>)
 80050c6:	f7fb fb59 	bl	800077c <copyText>
 80050ca:	4603      	mov	r3, r0
 80050cc:	4a2e      	ldr	r2, [pc, #184]	; (8005188 <loadMenuTexts+0x5dc>)
 80050ce:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextTR);
 80050d0:	482e      	ldr	r0, [pc, #184]	; (800518c <loadMenuTexts+0x5e0>)
 80050d2:	f7fb fb53 	bl	800077c <copyText>
 80050d6:	4603      	mov	r3, r0
 80050d8:	4a2d      	ldr	r2, [pc, #180]	; (8005190 <loadMenuTexts+0x5e4>)
 80050da:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextTR);
 80050dc:	482d      	ldr	r0, [pc, #180]	; (8005194 <loadMenuTexts+0x5e8>)
 80050de:	f7fb fb4d 	bl	800077c <copyText>
 80050e2:	4603      	mov	r3, r0
 80050e4:	4a2c      	ldr	r2, [pc, #176]	; (8005198 <loadMenuTexts+0x5ec>)
 80050e6:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextTR);
 80050e8:	482c      	ldr	r0, [pc, #176]	; (800519c <loadMenuTexts+0x5f0>)
 80050ea:	f7fb fb47 	bl	800077c <copyText>
 80050ee:	4603      	mov	r3, r0
 80050f0:	4a2b      	ldr	r2, [pc, #172]	; (80051a0 <loadMenuTexts+0x5f4>)
 80050f2:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextTR);
 80050f4:	482b      	ldr	r0, [pc, #172]	; (80051a4 <loadMenuTexts+0x5f8>)
 80050f6:	f7fb fb41 	bl	800077c <copyText>
 80050fa:	4603      	mov	r3, r0
 80050fc:	4a2a      	ldr	r2, [pc, #168]	; (80051a8 <loadMenuTexts+0x5fc>)
 80050fe:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextTR);
 8005100:	482a      	ldr	r0, [pc, #168]	; (80051ac <loadMenuTexts+0x600>)
 8005102:	f7fb fb3b 	bl	800077c <copyText>
 8005106:	4603      	mov	r3, r0
 8005108:	4a29      	ldr	r2, [pc, #164]	; (80051b0 <loadMenuTexts+0x604>)
 800510a:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
		menudenCikisText = copyText(menudenCikisTextEN);
		enteraBasinizText = copyText(enteraBasinizTextEN);
		hataKoduText = copyText(hataKoduTextEN);
	}
}
 800510c:	e2d3      	b.n	80056b6 <loadMenuTexts+0xb0a>
 800510e:	bf00      	nop
 8005110:	20000d84 	.word	0x20000d84
 8005114:	20000380 	.word	0x20000380
 8005118:	20000d88 	.word	0x20000d88
 800511c:	20000390 	.word	0x20000390
 8005120:	20000d8c 	.word	0x20000d8c
 8005124:	200003a0 	.word	0x200003a0
 8005128:	20000d90 	.word	0x20000d90
 800512c:	200003b0 	.word	0x200003b0
 8005130:	20000d94 	.word	0x20000d94
 8005134:	200003c0 	.word	0x200003c0
 8005138:	20000d98 	.word	0x20000d98
 800513c:	200003d0 	.word	0x200003d0
 8005140:	20000d9c 	.word	0x20000d9c
 8005144:	200003e0 	.word	0x200003e0
 8005148:	20000da0 	.word	0x20000da0
 800514c:	200003f0 	.word	0x200003f0
 8005150:	20000da4 	.word	0x20000da4
 8005154:	20000400 	.word	0x20000400
 8005158:	20000da8 	.word	0x20000da8
 800515c:	20000410 	.word	0x20000410
 8005160:	20000dac 	.word	0x20000dac
 8005164:	20000420 	.word	0x20000420
 8005168:	20000db0 	.word	0x20000db0
 800516c:	20000430 	.word	0x20000430
 8005170:	20000db4 	.word	0x20000db4
 8005174:	20000440 	.word	0x20000440
 8005178:	20000db8 	.word	0x20000db8
 800517c:	20000450 	.word	0x20000450
 8005180:	20000dc4 	.word	0x20000dc4
 8005184:	20000460 	.word	0x20000460
 8005188:	20000dc8 	.word	0x20000dc8
 800518c:	20000470 	.word	0x20000470
 8005190:	20000dcc 	.word	0x20000dcc
 8005194:	20000480 	.word	0x20000480
 8005198:	20000dd0 	.word	0x20000dd0
 800519c:	20000490 	.word	0x20000490
 80051a0:	20000dd4 	.word	0x20000dd4
 80051a4:	200004a0 	.word	0x200004a0
 80051a8:	20000dd8 	.word	0x20000dd8
 80051ac:	200004b0 	.word	0x200004b0
 80051b0:	20000ddc 	.word	0x20000ddc
		menuyeGirildiText = copyText(menuyeGirildiTextEN);
 80051b4:	48a9      	ldr	r0, [pc, #676]	; (800545c <loadMenuTexts+0x8b0>)
 80051b6:	f7fb fae1 	bl	800077c <copyText>
 80051ba:	4603      	mov	r3, r0
 80051bc:	4aa8      	ldr	r2, [pc, #672]	; (8005460 <loadMenuTexts+0x8b4>)
 80051be:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextEN);
 80051c0:	48a8      	ldr	r0, [pc, #672]	; (8005464 <loadMenuTexts+0x8b8>)
 80051c2:	f7fb fadb 	bl	800077c <copyText>
 80051c6:	4603      	mov	r3, r0
 80051c8:	4aa7      	ldr	r2, [pc, #668]	; (8005468 <loadMenuTexts+0x8bc>)
 80051ca:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextEN);
 80051cc:	48a7      	ldr	r0, [pc, #668]	; (800546c <loadMenuTexts+0x8c0>)
 80051ce:	f7fb fad5 	bl	800077c <copyText>
 80051d2:	4603      	mov	r3, r0
 80051d4:	4aa6      	ldr	r2, [pc, #664]	; (8005470 <loadMenuTexts+0x8c4>)
 80051d6:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextEN);
 80051d8:	48a6      	ldr	r0, [pc, #664]	; (8005474 <loadMenuTexts+0x8c8>)
 80051da:	f7fb facf 	bl	800077c <copyText>
 80051de:	4603      	mov	r3, r0
 80051e0:	4aa5      	ldr	r2, [pc, #660]	; (8005478 <loadMenuTexts+0x8cc>)
 80051e2:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextEN);
 80051e4:	48a5      	ldr	r0, [pc, #660]	; (800547c <loadMenuTexts+0x8d0>)
 80051e6:	f7fb fac9 	bl	800077c <copyText>
 80051ea:	4603      	mov	r3, r0
 80051ec:	4aa4      	ldr	r2, [pc, #656]	; (8005480 <loadMenuTexts+0x8d4>)
 80051ee:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextEN);
 80051f0:	48a4      	ldr	r0, [pc, #656]	; (8005484 <loadMenuTexts+0x8d8>)
 80051f2:	f7fb fac3 	bl	800077c <copyText>
 80051f6:	4603      	mov	r3, r0
 80051f8:	4aa3      	ldr	r2, [pc, #652]	; (8005488 <loadMenuTexts+0x8dc>)
 80051fa:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextEN);
 80051fc:	48a3      	ldr	r0, [pc, #652]	; (800548c <loadMenuTexts+0x8e0>)
 80051fe:	f7fb fabd 	bl	800077c <copyText>
 8005202:	4603      	mov	r3, r0
 8005204:	4aa2      	ldr	r2, [pc, #648]	; (8005490 <loadMenuTexts+0x8e4>)
 8005206:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextEN);
 8005208:	48a2      	ldr	r0, [pc, #648]	; (8005494 <loadMenuTexts+0x8e8>)
 800520a:	f7fb fab7 	bl	800077c <copyText>
 800520e:	4603      	mov	r3, r0
 8005210:	4aa1      	ldr	r2, [pc, #644]	; (8005498 <loadMenuTexts+0x8ec>)
 8005212:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextEN);
 8005214:	48a1      	ldr	r0, [pc, #644]	; (800549c <loadMenuTexts+0x8f0>)
 8005216:	f7fb fab1 	bl	800077c <copyText>
 800521a:	4603      	mov	r3, r0
 800521c:	4aa0      	ldr	r2, [pc, #640]	; (80054a0 <loadMenuTexts+0x8f4>)
 800521e:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextEN);
 8005220:	48a0      	ldr	r0, [pc, #640]	; (80054a4 <loadMenuTexts+0x8f8>)
 8005222:	f7fb faab 	bl	800077c <copyText>
 8005226:	4603      	mov	r3, r0
 8005228:	4a9f      	ldr	r2, [pc, #636]	; (80054a8 <loadMenuTexts+0x8fc>)
 800522a:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextEN);
 800522c:	489f      	ldr	r0, [pc, #636]	; (80054ac <loadMenuTexts+0x900>)
 800522e:	f7fb faa5 	bl	800077c <copyText>
 8005232:	4603      	mov	r3, r0
 8005234:	4a9e      	ldr	r2, [pc, #632]	; (80054b0 <loadMenuTexts+0x904>)
 8005236:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextEN);
 8005238:	489e      	ldr	r0, [pc, #632]	; (80054b4 <loadMenuTexts+0x908>)
 800523a:	f7fb fa9f 	bl	800077c <copyText>
 800523e:	4603      	mov	r3, r0
 8005240:	4a9d      	ldr	r2, [pc, #628]	; (80054b8 <loadMenuTexts+0x90c>)
 8005242:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextEN);
 8005244:	489d      	ldr	r0, [pc, #628]	; (80054bc <loadMenuTexts+0x910>)
 8005246:	f7fb fa99 	bl	800077c <copyText>
 800524a:	4603      	mov	r3, r0
 800524c:	4a9c      	ldr	r2, [pc, #624]	; (80054c0 <loadMenuTexts+0x914>)
 800524e:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextEN);
 8005250:	489c      	ldr	r0, [pc, #624]	; (80054c4 <loadMenuTexts+0x918>)
 8005252:	f7fb fa93 	bl	800077c <copyText>
 8005256:	4603      	mov	r3, r0
 8005258:	4a9b      	ldr	r2, [pc, #620]	; (80054c8 <loadMenuTexts+0x91c>)
 800525a:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextEN);
 800525c:	489b      	ldr	r0, [pc, #620]	; (80054cc <loadMenuTexts+0x920>)
 800525e:	f7fb fa8d 	bl	800077c <copyText>
 8005262:	4603      	mov	r3, r0
 8005264:	4a9a      	ldr	r2, [pc, #616]	; (80054d0 <loadMenuTexts+0x924>)
 8005266:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextEN);
 8005268:	489a      	ldr	r0, [pc, #616]	; (80054d4 <loadMenuTexts+0x928>)
 800526a:	f7fb fa87 	bl	800077c <copyText>
 800526e:	4603      	mov	r3, r0
 8005270:	4a99      	ldr	r2, [pc, #612]	; (80054d8 <loadMenuTexts+0x92c>)
 8005272:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextEN);
 8005274:	4899      	ldr	r0, [pc, #612]	; (80054dc <loadMenuTexts+0x930>)
 8005276:	f7fb fa81 	bl	800077c <copyText>
 800527a:	4603      	mov	r3, r0
 800527c:	4a98      	ldr	r2, [pc, #608]	; (80054e0 <loadMenuTexts+0x934>)
 800527e:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextEN);
 8005280:	4898      	ldr	r0, [pc, #608]	; (80054e4 <loadMenuTexts+0x938>)
 8005282:	f7fb fa7b 	bl	800077c <copyText>
 8005286:	4603      	mov	r3, r0
 8005288:	4a97      	ldr	r2, [pc, #604]	; (80054e8 <loadMenuTexts+0x93c>)
 800528a:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextEN);
 800528c:	4897      	ldr	r0, [pc, #604]	; (80054ec <loadMenuTexts+0x940>)
 800528e:	f7fb fa75 	bl	800077c <copyText>
 8005292:	4603      	mov	r3, r0
 8005294:	4a96      	ldr	r2, [pc, #600]	; (80054f0 <loadMenuTexts+0x944>)
 8005296:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextEN);
 8005298:	4896      	ldr	r0, [pc, #600]	; (80054f4 <loadMenuTexts+0x948>)
 800529a:	f7fb fa6f 	bl	800077c <copyText>
 800529e:	4603      	mov	r3, r0
 80052a0:	4a95      	ldr	r2, [pc, #596]	; (80054f8 <loadMenuTexts+0x94c>)
 80052a2:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextEN);
 80052a4:	4895      	ldr	r0, [pc, #596]	; (80054fc <loadMenuTexts+0x950>)
 80052a6:	f7fb fa69 	bl	800077c <copyText>
 80052aa:	4603      	mov	r3, r0
 80052ac:	4a94      	ldr	r2, [pc, #592]	; (8005500 <loadMenuTexts+0x954>)
 80052ae:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextEN);
 80052b0:	4894      	ldr	r0, [pc, #592]	; (8005504 <loadMenuTexts+0x958>)
 80052b2:	f7fb fa63 	bl	800077c <copyText>
 80052b6:	4603      	mov	r3, r0
 80052b8:	4a93      	ldr	r2, [pc, #588]	; (8005508 <loadMenuTexts+0x95c>)
 80052ba:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextEN);
 80052bc:	4893      	ldr	r0, [pc, #588]	; (800550c <loadMenuTexts+0x960>)
 80052be:	f7fb fa5d 	bl	800077c <copyText>
 80052c2:	4603      	mov	r3, r0
 80052c4:	4a92      	ldr	r2, [pc, #584]	; (8005510 <loadMenuTexts+0x964>)
 80052c6:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextEN);
 80052c8:	4892      	ldr	r0, [pc, #584]	; (8005514 <loadMenuTexts+0x968>)
 80052ca:	f7fb fa57 	bl	800077c <copyText>
 80052ce:	4603      	mov	r3, r0
 80052d0:	4a91      	ldr	r2, [pc, #580]	; (8005518 <loadMenuTexts+0x96c>)
 80052d2:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextEN);
 80052d4:	4891      	ldr	r0, [pc, #580]	; (800551c <loadMenuTexts+0x970>)
 80052d6:	f7fb fa51 	bl	800077c <copyText>
 80052da:	4603      	mov	r3, r0
 80052dc:	4a90      	ldr	r2, [pc, #576]	; (8005520 <loadMenuTexts+0x974>)
 80052de:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextEN);
 80052e0:	4890      	ldr	r0, [pc, #576]	; (8005524 <loadMenuTexts+0x978>)
 80052e2:	f7fb fa4b 	bl	800077c <copyText>
 80052e6:	4603      	mov	r3, r0
 80052e8:	4a8f      	ldr	r2, [pc, #572]	; (8005528 <loadMenuTexts+0x97c>)
 80052ea:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextEN);
 80052ec:	488f      	ldr	r0, [pc, #572]	; (800552c <loadMenuTexts+0x980>)
 80052ee:	f7fb fa45 	bl	800077c <copyText>
 80052f2:	4603      	mov	r3, r0
 80052f4:	4a8e      	ldr	r2, [pc, #568]	; (8005530 <loadMenuTexts+0x984>)
 80052f6:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextEN);
 80052f8:	488e      	ldr	r0, [pc, #568]	; (8005534 <loadMenuTexts+0x988>)
 80052fa:	f7fb fa3f 	bl	800077c <copyText>
 80052fe:	4603      	mov	r3, r0
 8005300:	4a8d      	ldr	r2, [pc, #564]	; (8005538 <loadMenuTexts+0x98c>)
 8005302:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextEN);
 8005304:	488d      	ldr	r0, [pc, #564]	; (800553c <loadMenuTexts+0x990>)
 8005306:	f7fb fa39 	bl	800077c <copyText>
 800530a:	4603      	mov	r3, r0
 800530c:	4a8c      	ldr	r2, [pc, #560]	; (8005540 <loadMenuTexts+0x994>)
 800530e:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextEN);
 8005310:	488c      	ldr	r0, [pc, #560]	; (8005544 <loadMenuTexts+0x998>)
 8005312:	f7fb fa33 	bl	800077c <copyText>
 8005316:	4603      	mov	r3, r0
 8005318:	4a8b      	ldr	r2, [pc, #556]	; (8005548 <loadMenuTexts+0x99c>)
 800531a:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextEN);
 800531c:	488b      	ldr	r0, [pc, #556]	; (800554c <loadMenuTexts+0x9a0>)
 800531e:	f7fb fa2d 	bl	800077c <copyText>
 8005322:	4603      	mov	r3, r0
 8005324:	4a8a      	ldr	r2, [pc, #552]	; (8005550 <loadMenuTexts+0x9a4>)
 8005326:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextEN);
 8005328:	488a      	ldr	r0, [pc, #552]	; (8005554 <loadMenuTexts+0x9a8>)
 800532a:	f7fb fa27 	bl	800077c <copyText>
 800532e:	4603      	mov	r3, r0
 8005330:	4a89      	ldr	r2, [pc, #548]	; (8005558 <loadMenuTexts+0x9ac>)
 8005332:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextEN);
 8005334:	4889      	ldr	r0, [pc, #548]	; (800555c <loadMenuTexts+0x9b0>)
 8005336:	f7fb fa21 	bl	800077c <copyText>
 800533a:	4603      	mov	r3, r0
 800533c:	4a88      	ldr	r2, [pc, #544]	; (8005560 <loadMenuTexts+0x9b4>)
 800533e:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextEN);
 8005340:	4888      	ldr	r0, [pc, #544]	; (8005564 <loadMenuTexts+0x9b8>)
 8005342:	f7fb fa1b 	bl	800077c <copyText>
 8005346:	4603      	mov	r3, r0
 8005348:	4a87      	ldr	r2, [pc, #540]	; (8005568 <loadMenuTexts+0x9bc>)
 800534a:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextEN);
 800534c:	4887      	ldr	r0, [pc, #540]	; (800556c <loadMenuTexts+0x9c0>)
 800534e:	f7fb fa15 	bl	800077c <copyText>
 8005352:	4603      	mov	r3, r0
 8005354:	4a86      	ldr	r2, [pc, #536]	; (8005570 <loadMenuTexts+0x9c4>)
 8005356:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextEN);
 8005358:	4886      	ldr	r0, [pc, #536]	; (8005574 <loadMenuTexts+0x9c8>)
 800535a:	f7fb fa0f 	bl	800077c <copyText>
 800535e:	4603      	mov	r3, r0
 8005360:	4a85      	ldr	r2, [pc, #532]	; (8005578 <loadMenuTexts+0x9cc>)
 8005362:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextEN);
 8005364:	4885      	ldr	r0, [pc, #532]	; (800557c <loadMenuTexts+0x9d0>)
 8005366:	f7fb fa09 	bl	800077c <copyText>
 800536a:	4603      	mov	r3, r0
 800536c:	4a84      	ldr	r2, [pc, #528]	; (8005580 <loadMenuTexts+0x9d4>)
 800536e:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextEN);
 8005370:	4884      	ldr	r0, [pc, #528]	; (8005584 <loadMenuTexts+0x9d8>)
 8005372:	f7fb fa03 	bl	800077c <copyText>
 8005376:	4603      	mov	r3, r0
 8005378:	4a83      	ldr	r2, [pc, #524]	; (8005588 <loadMenuTexts+0x9dc>)
 800537a:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextEN);
 800537c:	4883      	ldr	r0, [pc, #524]	; (800558c <loadMenuTexts+0x9e0>)
 800537e:	f7fb f9fd 	bl	800077c <copyText>
 8005382:	4603      	mov	r3, r0
 8005384:	4a82      	ldr	r2, [pc, #520]	; (8005590 <loadMenuTexts+0x9e4>)
 8005386:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextEN);
 8005388:	4882      	ldr	r0, [pc, #520]	; (8005594 <loadMenuTexts+0x9e8>)
 800538a:	f7fb f9f7 	bl	800077c <copyText>
 800538e:	4603      	mov	r3, r0
 8005390:	4a81      	ldr	r2, [pc, #516]	; (8005598 <loadMenuTexts+0x9ec>)
 8005392:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextEN);
 8005394:	4881      	ldr	r0, [pc, #516]	; (800559c <loadMenuTexts+0x9f0>)
 8005396:	f7fb f9f1 	bl	800077c <copyText>
 800539a:	4603      	mov	r3, r0
 800539c:	4a80      	ldr	r2, [pc, #512]	; (80055a0 <loadMenuTexts+0x9f4>)
 800539e:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextEN);
 80053a0:	4880      	ldr	r0, [pc, #512]	; (80055a4 <loadMenuTexts+0x9f8>)
 80053a2:	f7fb f9eb 	bl	800077c <copyText>
 80053a6:	4603      	mov	r3, r0
 80053a8:	4a7f      	ldr	r2, [pc, #508]	; (80055a8 <loadMenuTexts+0x9fc>)
 80053aa:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextEN);
 80053ac:	487f      	ldr	r0, [pc, #508]	; (80055ac <loadMenuTexts+0xa00>)
 80053ae:	f7fb f9e5 	bl	800077c <copyText>
 80053b2:	4603      	mov	r3, r0
 80053b4:	4a7e      	ldr	r2, [pc, #504]	; (80055b0 <loadMenuTexts+0xa04>)
 80053b6:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextEN);
 80053b8:	487e      	ldr	r0, [pc, #504]	; (80055b4 <loadMenuTexts+0xa08>)
 80053ba:	f7fb f9df 	bl	800077c <copyText>
 80053be:	4603      	mov	r3, r0
 80053c0:	4a7d      	ldr	r2, [pc, #500]	; (80055b8 <loadMenuTexts+0xa0c>)
 80053c2:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextEN);
 80053c4:	487d      	ldr	r0, [pc, #500]	; (80055bc <loadMenuTexts+0xa10>)
 80053c6:	f7fb f9d9 	bl	800077c <copyText>
 80053ca:	4603      	mov	r3, r0
 80053cc:	4a7c      	ldr	r2, [pc, #496]	; (80055c0 <loadMenuTexts+0xa14>)
 80053ce:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextEN);
 80053d0:	487c      	ldr	r0, [pc, #496]	; (80055c4 <loadMenuTexts+0xa18>)
 80053d2:	f7fb f9d3 	bl	800077c <copyText>
 80053d6:	4603      	mov	r3, r0
 80053d8:	4a7b      	ldr	r2, [pc, #492]	; (80055c8 <loadMenuTexts+0xa1c>)
 80053da:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextEN);
 80053dc:	487b      	ldr	r0, [pc, #492]	; (80055cc <loadMenuTexts+0xa20>)
 80053de:	f7fb f9cd 	bl	800077c <copyText>
 80053e2:	4603      	mov	r3, r0
 80053e4:	4a7a      	ldr	r2, [pc, #488]	; (80055d0 <loadMenuTexts+0xa24>)
 80053e6:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextEN);
 80053e8:	487a      	ldr	r0, [pc, #488]	; (80055d4 <loadMenuTexts+0xa28>)
 80053ea:	f7fb f9c7 	bl	800077c <copyText>
 80053ee:	4603      	mov	r3, r0
 80053f0:	4a79      	ldr	r2, [pc, #484]	; (80055d8 <loadMenuTexts+0xa2c>)
 80053f2:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextEN);
 80053f4:	4879      	ldr	r0, [pc, #484]	; (80055dc <loadMenuTexts+0xa30>)
 80053f6:	f7fb f9c1 	bl	800077c <copyText>
 80053fa:	4603      	mov	r3, r0
 80053fc:	4a78      	ldr	r2, [pc, #480]	; (80055e0 <loadMenuTexts+0xa34>)
 80053fe:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextEN);
 8005400:	4878      	ldr	r0, [pc, #480]	; (80055e4 <loadMenuTexts+0xa38>)
 8005402:	f7fb f9bb 	bl	800077c <copyText>
 8005406:	4603      	mov	r3, r0
 8005408:	4a77      	ldr	r2, [pc, #476]	; (80055e8 <loadMenuTexts+0xa3c>)
 800540a:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextEN);
 800540c:	4877      	ldr	r0, [pc, #476]	; (80055ec <loadMenuTexts+0xa40>)
 800540e:	f7fb f9b5 	bl	800077c <copyText>
 8005412:	4603      	mov	r3, r0
 8005414:	4a76      	ldr	r2, [pc, #472]	; (80055f0 <loadMenuTexts+0xa44>)
 8005416:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextEN);
 8005418:	4876      	ldr	r0, [pc, #472]	; (80055f4 <loadMenuTexts+0xa48>)
 800541a:	f7fb f9af 	bl	800077c <copyText>
 800541e:	4603      	mov	r3, r0
 8005420:	4a75      	ldr	r2, [pc, #468]	; (80055f8 <loadMenuTexts+0xa4c>)
 8005422:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextEN);
 8005424:	4875      	ldr	r0, [pc, #468]	; (80055fc <loadMenuTexts+0xa50>)
 8005426:	f7fb f9a9 	bl	800077c <copyText>
 800542a:	4603      	mov	r3, r0
 800542c:	4a74      	ldr	r2, [pc, #464]	; (8005600 <loadMenuTexts+0xa54>)
 800542e:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextEN);
 8005430:	4874      	ldr	r0, [pc, #464]	; (8005604 <loadMenuTexts+0xa58>)
 8005432:	f7fb f9a3 	bl	800077c <copyText>
 8005436:	4603      	mov	r3, r0
 8005438:	4a73      	ldr	r2, [pc, #460]	; (8005608 <loadMenuTexts+0xa5c>)
 800543a:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextEN);
 800543c:	4873      	ldr	r0, [pc, #460]	; (800560c <loadMenuTexts+0xa60>)
 800543e:	f7fb f99d 	bl	800077c <copyText>
 8005442:	4603      	mov	r3, r0
 8005444:	4a72      	ldr	r2, [pc, #456]	; (8005610 <loadMenuTexts+0xa64>)
 8005446:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextEN);
 8005448:	4872      	ldr	r0, [pc, #456]	; (8005614 <loadMenuTexts+0xa68>)
 800544a:	f7fb f997 	bl	800077c <copyText>
 800544e:	4603      	mov	r3, r0
 8005450:	4a71      	ldr	r2, [pc, #452]	; (8005618 <loadMenuTexts+0xa6c>)
 8005452:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextEN);
 8005454:	4871      	ldr	r0, [pc, #452]	; (800561c <loadMenuTexts+0xa70>)
 8005456:	f7fb f991 	bl	800077c <copyText>
 800545a:	e0e1      	b.n	8005620 <loadMenuTexts+0xa74>
 800545c:	200004c0 	.word	0x200004c0
 8005460:	20000cb8 	.word	0x20000cb8
 8005464:	200004d0 	.word	0x200004d0
 8005468:	20000cbc 	.word	0x20000cbc
 800546c:	200004e0 	.word	0x200004e0
 8005470:	20000cc0 	.word	0x20000cc0
 8005474:	200004f0 	.word	0x200004f0
 8005478:	20000cc4 	.word	0x20000cc4
 800547c:	20000500 	.word	0x20000500
 8005480:	20000cc8 	.word	0x20000cc8
 8005484:	20000510 	.word	0x20000510
 8005488:	20000ccc 	.word	0x20000ccc
 800548c:	20000520 	.word	0x20000520
 8005490:	20000cd0 	.word	0x20000cd0
 8005494:	20000530 	.word	0x20000530
 8005498:	20000cd4 	.word	0x20000cd4
 800549c:	20000540 	.word	0x20000540
 80054a0:	20000cd8 	.word	0x20000cd8
 80054a4:	20000550 	.word	0x20000550
 80054a8:	20000cdc 	.word	0x20000cdc
 80054ac:	20000560 	.word	0x20000560
 80054b0:	20000ce0 	.word	0x20000ce0
 80054b4:	20000570 	.word	0x20000570
 80054b8:	20000ce4 	.word	0x20000ce4
 80054bc:	20000580 	.word	0x20000580
 80054c0:	20000ce8 	.word	0x20000ce8
 80054c4:	20000590 	.word	0x20000590
 80054c8:	20000cec 	.word	0x20000cec
 80054cc:	200005a0 	.word	0x200005a0
 80054d0:	20000cf0 	.word	0x20000cf0
 80054d4:	200005b0 	.word	0x200005b0
 80054d8:	20000cf4 	.word	0x20000cf4
 80054dc:	200005c0 	.word	0x200005c0
 80054e0:	20000cf8 	.word	0x20000cf8
 80054e4:	200005d0 	.word	0x200005d0
 80054e8:	20000cfc 	.word	0x20000cfc
 80054ec:	200005e0 	.word	0x200005e0
 80054f0:	20000d00 	.word	0x20000d00
 80054f4:	200005f0 	.word	0x200005f0
 80054f8:	20000d04 	.word	0x20000d04
 80054fc:	20000600 	.word	0x20000600
 8005500:	20000d08 	.word	0x20000d08
 8005504:	20000610 	.word	0x20000610
 8005508:	20000d10 	.word	0x20000d10
 800550c:	20000620 	.word	0x20000620
 8005510:	20000d14 	.word	0x20000d14
 8005514:	20000630 	.word	0x20000630
 8005518:	20000d18 	.word	0x20000d18
 800551c:	20000640 	.word	0x20000640
 8005520:	20000d1c 	.word	0x20000d1c
 8005524:	20000650 	.word	0x20000650
 8005528:	20000d20 	.word	0x20000d20
 800552c:	20000660 	.word	0x20000660
 8005530:	20000d24 	.word	0x20000d24
 8005534:	20000670 	.word	0x20000670
 8005538:	20000d28 	.word	0x20000d28
 800553c:	20000680 	.word	0x20000680
 8005540:	20000d2c 	.word	0x20000d2c
 8005544:	20000690 	.word	0x20000690
 8005548:	20000d30 	.word	0x20000d30
 800554c:	200006a0 	.word	0x200006a0
 8005550:	20000d34 	.word	0x20000d34
 8005554:	200006b0 	.word	0x200006b0
 8005558:	20000d38 	.word	0x20000d38
 800555c:	200006c0 	.word	0x200006c0
 8005560:	20000d40 	.word	0x20000d40
 8005564:	200006d0 	.word	0x200006d0
 8005568:	20000d48 	.word	0x20000d48
 800556c:	200006e0 	.word	0x200006e0
 8005570:	20000d4c 	.word	0x20000d4c
 8005574:	200006f0 	.word	0x200006f0
 8005578:	20000d50 	.word	0x20000d50
 800557c:	20000700 	.word	0x20000700
 8005580:	20000d54 	.word	0x20000d54
 8005584:	20000710 	.word	0x20000710
 8005588:	20000d58 	.word	0x20000d58
 800558c:	20000720 	.word	0x20000720
 8005590:	20000d5c 	.word	0x20000d5c
 8005594:	20000730 	.word	0x20000730
 8005598:	20000d60 	.word	0x20000d60
 800559c:	20000740 	.word	0x20000740
 80055a0:	20000d64 	.word	0x20000d64
 80055a4:	20000750 	.word	0x20000750
 80055a8:	20000d68 	.word	0x20000d68
 80055ac:	20000760 	.word	0x20000760
 80055b0:	20000d6c 	.word	0x20000d6c
 80055b4:	20000770 	.word	0x20000770
 80055b8:	20000d70 	.word	0x20000d70
 80055bc:	20000780 	.word	0x20000780
 80055c0:	20000d74 	.word	0x20000d74
 80055c4:	20000790 	.word	0x20000790
 80055c8:	20000d78 	.word	0x20000d78
 80055cc:	200007a0 	.word	0x200007a0
 80055d0:	20000d7c 	.word	0x20000d7c
 80055d4:	200007b0 	.word	0x200007b0
 80055d8:	20000d80 	.word	0x20000d80
 80055dc:	200007c0 	.word	0x200007c0
 80055e0:	20000d84 	.word	0x20000d84
 80055e4:	200007d0 	.word	0x200007d0
 80055e8:	20000d88 	.word	0x20000d88
 80055ec:	200007e0 	.word	0x200007e0
 80055f0:	20000d8c 	.word	0x20000d8c
 80055f4:	200007f0 	.word	0x200007f0
 80055f8:	20000d90 	.word	0x20000d90
 80055fc:	20000800 	.word	0x20000800
 8005600:	20000d94 	.word	0x20000d94
 8005604:	20000810 	.word	0x20000810
 8005608:	20000d98 	.word	0x20000d98
 800560c:	20000820 	.word	0x20000820
 8005610:	20000d9c 	.word	0x20000d9c
 8005614:	20000830 	.word	0x20000830
 8005618:	20000da0 	.word	0x20000da0
 800561c:	20000840 	.word	0x20000840
 8005620:	4603      	mov	r3, r0
 8005622:	4a27      	ldr	r2, [pc, #156]	; (80056c0 <loadMenuTexts+0xb14>)
 8005624:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextEN);
 8005626:	4827      	ldr	r0, [pc, #156]	; (80056c4 <loadMenuTexts+0xb18>)
 8005628:	f7fb f8a8 	bl	800077c <copyText>
 800562c:	4603      	mov	r3, r0
 800562e:	4a26      	ldr	r2, [pc, #152]	; (80056c8 <loadMenuTexts+0xb1c>)
 8005630:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextEN);
 8005632:	4826      	ldr	r0, [pc, #152]	; (80056cc <loadMenuTexts+0xb20>)
 8005634:	f7fb f8a2 	bl	800077c <copyText>
 8005638:	4603      	mov	r3, r0
 800563a:	4a25      	ldr	r2, [pc, #148]	; (80056d0 <loadMenuTexts+0xb24>)
 800563c:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextEN);
 800563e:	4825      	ldr	r0, [pc, #148]	; (80056d4 <loadMenuTexts+0xb28>)
 8005640:	f7fb f89c 	bl	800077c <copyText>
 8005644:	4603      	mov	r3, r0
 8005646:	4a24      	ldr	r2, [pc, #144]	; (80056d8 <loadMenuTexts+0xb2c>)
 8005648:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextEN);
 800564a:	4824      	ldr	r0, [pc, #144]	; (80056dc <loadMenuTexts+0xb30>)
 800564c:	f7fb f896 	bl	800077c <copyText>
 8005650:	4603      	mov	r3, r0
 8005652:	4a23      	ldr	r2, [pc, #140]	; (80056e0 <loadMenuTexts+0xb34>)
 8005654:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextEN);
 8005656:	4823      	ldr	r0, [pc, #140]	; (80056e4 <loadMenuTexts+0xb38>)
 8005658:	f7fb f890 	bl	800077c <copyText>
 800565c:	4603      	mov	r3, r0
 800565e:	4a22      	ldr	r2, [pc, #136]	; (80056e8 <loadMenuTexts+0xb3c>)
 8005660:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextEN);
 8005662:	4822      	ldr	r0, [pc, #136]	; (80056ec <loadMenuTexts+0xb40>)
 8005664:	f7fb f88a 	bl	800077c <copyText>
 8005668:	4603      	mov	r3, r0
 800566a:	4a21      	ldr	r2, [pc, #132]	; (80056f0 <loadMenuTexts+0xb44>)
 800566c:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextEN);
 800566e:	4821      	ldr	r0, [pc, #132]	; (80056f4 <loadMenuTexts+0xb48>)
 8005670:	f7fb f884 	bl	800077c <copyText>
 8005674:	4603      	mov	r3, r0
 8005676:	4a20      	ldr	r2, [pc, #128]	; (80056f8 <loadMenuTexts+0xb4c>)
 8005678:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextEN);
 800567a:	4820      	ldr	r0, [pc, #128]	; (80056fc <loadMenuTexts+0xb50>)
 800567c:	f7fb f87e 	bl	800077c <copyText>
 8005680:	4603      	mov	r3, r0
 8005682:	4a1f      	ldr	r2, [pc, #124]	; (8005700 <loadMenuTexts+0xb54>)
 8005684:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
 8005686:	481f      	ldr	r0, [pc, #124]	; (8005704 <loadMenuTexts+0xb58>)
 8005688:	f7fb f878 	bl	800077c <copyText>
 800568c:	4603      	mov	r3, r0
 800568e:	4a1e      	ldr	r2, [pc, #120]	; (8005708 <loadMenuTexts+0xb5c>)
 8005690:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextEN);
 8005692:	481e      	ldr	r0, [pc, #120]	; (800570c <loadMenuTexts+0xb60>)
 8005694:	f7fb f872 	bl	800077c <copyText>
 8005698:	4603      	mov	r3, r0
 800569a:	4a1d      	ldr	r2, [pc, #116]	; (8005710 <loadMenuTexts+0xb64>)
 800569c:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextEN);
 800569e:	481d      	ldr	r0, [pc, #116]	; (8005714 <loadMenuTexts+0xb68>)
 80056a0:	f7fb f86c 	bl	800077c <copyText>
 80056a4:	4603      	mov	r3, r0
 80056a6:	4a1c      	ldr	r2, [pc, #112]	; (8005718 <loadMenuTexts+0xb6c>)
 80056a8:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextEN);
 80056aa:	481c      	ldr	r0, [pc, #112]	; (800571c <loadMenuTexts+0xb70>)
 80056ac:	f7fb f866 	bl	800077c <copyText>
 80056b0:	4603      	mov	r3, r0
 80056b2:	4a1b      	ldr	r2, [pc, #108]	; (8005720 <loadMenuTexts+0xb74>)
 80056b4:	6013      	str	r3, [r2, #0]
}
 80056b6:	bf00      	nop
 80056b8:	3708      	adds	r7, #8
 80056ba:	46bd      	mov	sp, r7
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	20000da4 	.word	0x20000da4
 80056c4:	20000850 	.word	0x20000850
 80056c8:	20000da8 	.word	0x20000da8
 80056cc:	20000860 	.word	0x20000860
 80056d0:	20000dac 	.word	0x20000dac
 80056d4:	20000870 	.word	0x20000870
 80056d8:	20000db0 	.word	0x20000db0
 80056dc:	20000880 	.word	0x20000880
 80056e0:	20000db4 	.word	0x20000db4
 80056e4:	20000890 	.word	0x20000890
 80056e8:	20000db8 	.word	0x20000db8
 80056ec:	200008a0 	.word	0x200008a0
 80056f0:	20000dc4 	.word	0x20000dc4
 80056f4:	200008b0 	.word	0x200008b0
 80056f8:	20000dc8 	.word	0x20000dc8
 80056fc:	200008c0 	.word	0x200008c0
 8005700:	20000dcc 	.word	0x20000dcc
 8005704:	200008d0 	.word	0x200008d0
 8005708:	20000dd0 	.word	0x20000dd0
 800570c:	200008e0 	.word	0x200008e0
 8005710:	20000dd4 	.word	0x20000dd4
 8005714:	200008f0 	.word	0x200008f0
 8005718:	20000dd8 	.word	0x20000dd8
 800571c:	20000900 	.word	0x20000900
 8005720:	20000ddc 	.word	0x20000ddc

08005724 <lcdUpdate>:
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

//Tüm fonksiyonlar:

void lcdUpdate(uint8_t y) {
 8005724:	b580      	push	{r7, lr}
 8005726:	b082      	sub	sp, #8
 8005728:	af00      	add	r7, sp, #0
 800572a:	4603      	mov	r3, r0
 800572c:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 800572e:	79fb      	ldrb	r3, [r7, #7]
 8005730:	2b01      	cmp	r3, #1
 8005732:	d105      	bne.n	8005740 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8005734:	4a22      	ldr	r2, [pc, #136]	; (80057c0 <lcdUpdate+0x9c>)
 8005736:	2101      	movs	r1, #1
 8005738:	2002      	movs	r0, #2
 800573a:	f7fa ff95 	bl	8000668 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 1, "    ESP-RMK     ");
		lcd_print(2, 1, "      RUN       ");
	}
}
 800573e:	e03b      	b.n	80057b8 <lcdUpdate+0x94>
	} else if(y==2) {
 8005740:	79fb      	ldrb	r3, [r7, #7]
 8005742:	2b02      	cmp	r3, #2
 8005744:	d105      	bne.n	8005752 <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8005746:	4a1e      	ldr	r2, [pc, #120]	; (80057c0 <lcdUpdate+0x9c>)
 8005748:	2102      	movs	r1, #2
 800574a:	2002      	movs	r0, #2
 800574c:	f7fa ff8c 	bl	8000668 <lcd_print>
}
 8005750:	e032      	b.n	80057b8 <lcdUpdate+0x94>
	} else if(y==3) {
 8005752:	79fb      	ldrb	r3, [r7, #7]
 8005754:	2b03      	cmp	r3, #3
 8005756:	d105      	bne.n	8005764 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8005758:	4a19      	ldr	r2, [pc, #100]	; (80057c0 <lcdUpdate+0x9c>)
 800575a:	2103      	movs	r1, #3
 800575c:	2002      	movs	r0, #2
 800575e:	f7fa ff83 	bl	8000668 <lcd_print>
}
 8005762:	e029      	b.n	80057b8 <lcdUpdate+0x94>
	} else if(y==4) {
 8005764:	79fb      	ldrb	r3, [r7, #7]
 8005766:	2b04      	cmp	r3, #4
 8005768:	d105      	bne.n	8005776 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 800576a:	4a15      	ldr	r2, [pc, #84]	; (80057c0 <lcdUpdate+0x9c>)
 800576c:	2104      	movs	r1, #4
 800576e:	2002      	movs	r0, #2
 8005770:	f7fa ff7a 	bl	8000668 <lcd_print>
}
 8005774:	e020      	b.n	80057b8 <lcdUpdate+0x94>
	} else if(y==5) {
 8005776:	79fb      	ldrb	r3, [r7, #7]
 8005778:	2b05      	cmp	r3, #5
 800577a:	d105      	bne.n	8005788 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 800577c:	4a10      	ldr	r2, [pc, #64]	; (80057c0 <lcdUpdate+0x9c>)
 800577e:	2105      	movs	r1, #5
 8005780:	2002      	movs	r0, #2
 8005782:	f7fa ff71 	bl	8000668 <lcd_print>
}
 8005786:	e017      	b.n	80057b8 <lcdUpdate+0x94>
	} else if(y==6) {
 8005788:	79fb      	ldrb	r3, [r7, #7]
 800578a:	2b06      	cmp	r3, #6
 800578c:	d105      	bne.n	800579a <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 800578e:	4a0c      	ldr	r2, [pc, #48]	; (80057c0 <lcdUpdate+0x9c>)
 8005790:	2106      	movs	r1, #6
 8005792:	2002      	movs	r0, #2
 8005794:	f7fa ff68 	bl	8000668 <lcd_print>
}
 8005798:	e00e      	b.n	80057b8 <lcdUpdate+0x94>
	} else if (y==7) {
 800579a:	79fb      	ldrb	r3, [r7, #7]
 800579c:	2b07      	cmp	r3, #7
 800579e:	d10b      	bne.n	80057b8 <lcdUpdate+0x94>
		lcd_clear();
 80057a0:	f7fa ff8e 	bl	80006c0 <lcd_clear>
		lcd_print(1, 1, "    ESP-RMK     ");
 80057a4:	4a07      	ldr	r2, [pc, #28]	; (80057c4 <lcdUpdate+0xa0>)
 80057a6:	2101      	movs	r1, #1
 80057a8:	2001      	movs	r0, #1
 80057aa:	f7fa ff5d 	bl	8000668 <lcd_print>
		lcd_print(2, 1, "      RUN       ");
 80057ae:	4a06      	ldr	r2, [pc, #24]	; (80057c8 <lcdUpdate+0xa4>)
 80057b0:	2101      	movs	r1, #1
 80057b2:	2002      	movs	r0, #2
 80057b4:	f7fa ff58 	bl	8000668 <lcd_print>
}
 80057b8:	bf00      	nop
 80057ba:	3708      	adds	r7, #8
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd80      	pop	{r7, pc}
 80057c0:	0800db08 	.word	0x0800db08
 80057c4:	0800e434 	.word	0x0800e434
 80057c8:	0800e448 	.word	0x0800e448

080057cc <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	4603      	mov	r3, r0
 80057d4:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 80057d6:	79fb      	ldrb	r3, [r7, #7]
 80057d8:	2b01      	cmp	r3, #1
 80057da:	d11d      	bne.n	8005818 <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 80057dc:	4b62      	ldr	r3, [pc, #392]	; (8005968 <hataKoduLcdGoster+0x19c>)
 80057de:	781b      	ldrb	r3, [r3, #0]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d105      	bne.n	80057f0 <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU    ");
 80057e4:	4a61      	ldr	r2, [pc, #388]	; (800596c <hataKoduLcdGoster+0x1a0>)
 80057e6:	2101      	movs	r1, #1
 80057e8:	2001      	movs	r0, #1
 80057ea:	f7fa ff3d 	bl	8000668 <lcd_print>
 80057ee:	e008      	b.n	8005802 <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 80057f0:	4b5d      	ldr	r3, [pc, #372]	; (8005968 <hataKoduLcdGoster+0x19c>)
 80057f2:	781b      	ldrb	r3, [r3, #0]
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d104      	bne.n	8005802 <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE   ");
 80057f8:	4a5d      	ldr	r2, [pc, #372]	; (8005970 <hataKoduLcdGoster+0x1a4>)
 80057fa:	2101      	movs	r1, #1
 80057fc:	2001      	movs	r0, #1
 80057fe:	f7fa ff33 	bl	8000668 <lcd_print>
		}
		lcd_print(2, 1, "1");
 8005802:	4a5c      	ldr	r2, [pc, #368]	; (8005974 <hataKoduLcdGoster+0x1a8>)
 8005804:	2101      	movs	r1, #1
 8005806:	2002      	movs	r0, #2
 8005808:	f7fa ff2e 	bl	8000668 <lcd_print>
		lcd_print(2, 7, "          ");
 800580c:	4a5a      	ldr	r2, [pc, #360]	; (8005978 <hataKoduLcdGoster+0x1ac>)
 800580e:	2107      	movs	r1, #7
 8005810:	2002      	movs	r0, #2
 8005812:	f7fa ff29 	bl	8000668 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE   ");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8005816:	e0a3      	b.n	8005960 <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8005818:	79fb      	ldrb	r3, [r7, #7]
 800581a:	2b02      	cmp	r3, #2
 800581c:	d11d      	bne.n	800585a <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 800581e:	4b52      	ldr	r3, [pc, #328]	; (8005968 <hataKoduLcdGoster+0x19c>)
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d105      	bne.n	8005832 <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU    ");
 8005826:	4a51      	ldr	r2, [pc, #324]	; (800596c <hataKoduLcdGoster+0x1a0>)
 8005828:	2101      	movs	r1, #1
 800582a:	2001      	movs	r0, #1
 800582c:	f7fa ff1c 	bl	8000668 <lcd_print>
 8005830:	e008      	b.n	8005844 <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 8005832:	4b4d      	ldr	r3, [pc, #308]	; (8005968 <hataKoduLcdGoster+0x19c>)
 8005834:	781b      	ldrb	r3, [r3, #0]
 8005836:	2b01      	cmp	r3, #1
 8005838:	d104      	bne.n	8005844 <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE   ");
 800583a:	4a4d      	ldr	r2, [pc, #308]	; (8005970 <hataKoduLcdGoster+0x1a4>)
 800583c:	2101      	movs	r1, #1
 800583e:	2001      	movs	r0, #1
 8005840:	f7fa ff12 	bl	8000668 <lcd_print>
		lcd_print(2, 2, "2");
 8005844:	4a4d      	ldr	r2, [pc, #308]	; (800597c <hataKoduLcdGoster+0x1b0>)
 8005846:	2102      	movs	r1, #2
 8005848:	2002      	movs	r0, #2
 800584a:	f7fa ff0d 	bl	8000668 <lcd_print>
		lcd_print(2, 7, "          ");
 800584e:	4a4a      	ldr	r2, [pc, #296]	; (8005978 <hataKoduLcdGoster+0x1ac>)
 8005850:	2107      	movs	r1, #7
 8005852:	2002      	movs	r0, #2
 8005854:	f7fa ff08 	bl	8000668 <lcd_print>
}
 8005858:	e082      	b.n	8005960 <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 800585a:	79fb      	ldrb	r3, [r7, #7]
 800585c:	2b03      	cmp	r3, #3
 800585e:	d11d      	bne.n	800589c <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8005860:	4b41      	ldr	r3, [pc, #260]	; (8005968 <hataKoduLcdGoster+0x19c>)
 8005862:	781b      	ldrb	r3, [r3, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d105      	bne.n	8005874 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU    ");
 8005868:	4a40      	ldr	r2, [pc, #256]	; (800596c <hataKoduLcdGoster+0x1a0>)
 800586a:	2101      	movs	r1, #1
 800586c:	2001      	movs	r0, #1
 800586e:	f7fa fefb 	bl	8000668 <lcd_print>
 8005872:	e008      	b.n	8005886 <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8005874:	4b3c      	ldr	r3, [pc, #240]	; (8005968 <hataKoduLcdGoster+0x19c>)
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	2b01      	cmp	r3, #1
 800587a:	d104      	bne.n	8005886 <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE   ");
 800587c:	4a3c      	ldr	r2, [pc, #240]	; (8005970 <hataKoduLcdGoster+0x1a4>)
 800587e:	2101      	movs	r1, #1
 8005880:	2001      	movs	r0, #1
 8005882:	f7fa fef1 	bl	8000668 <lcd_print>
		lcd_print(2, 3, "3");
 8005886:	4a3e      	ldr	r2, [pc, #248]	; (8005980 <hataKoduLcdGoster+0x1b4>)
 8005888:	2103      	movs	r1, #3
 800588a:	2002      	movs	r0, #2
 800588c:	f7fa feec 	bl	8000668 <lcd_print>
		lcd_print(2, 7, "          ");
 8005890:	4a39      	ldr	r2, [pc, #228]	; (8005978 <hataKoduLcdGoster+0x1ac>)
 8005892:	2107      	movs	r1, #7
 8005894:	2002      	movs	r0, #2
 8005896:	f7fa fee7 	bl	8000668 <lcd_print>
}
 800589a:	e061      	b.n	8005960 <hataKoduLcdGoster+0x194>
	} else if(x==4){
 800589c:	79fb      	ldrb	r3, [r7, #7]
 800589e:	2b04      	cmp	r3, #4
 80058a0:	d11d      	bne.n	80058de <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 80058a2:	4b31      	ldr	r3, [pc, #196]	; (8005968 <hataKoduLcdGoster+0x19c>)
 80058a4:	781b      	ldrb	r3, [r3, #0]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d105      	bne.n	80058b6 <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU    ");
 80058aa:	4a30      	ldr	r2, [pc, #192]	; (800596c <hataKoduLcdGoster+0x1a0>)
 80058ac:	2101      	movs	r1, #1
 80058ae:	2001      	movs	r0, #1
 80058b0:	f7fa feda 	bl	8000668 <lcd_print>
 80058b4:	e008      	b.n	80058c8 <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 80058b6:	4b2c      	ldr	r3, [pc, #176]	; (8005968 <hataKoduLcdGoster+0x19c>)
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d104      	bne.n	80058c8 <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE   ");
 80058be:	4a2c      	ldr	r2, [pc, #176]	; (8005970 <hataKoduLcdGoster+0x1a4>)
 80058c0:	2101      	movs	r1, #1
 80058c2:	2001      	movs	r0, #1
 80058c4:	f7fa fed0 	bl	8000668 <lcd_print>
		lcd_print(2, 4, "4");
 80058c8:	4a2e      	ldr	r2, [pc, #184]	; (8005984 <hataKoduLcdGoster+0x1b8>)
 80058ca:	2104      	movs	r1, #4
 80058cc:	2002      	movs	r0, #2
 80058ce:	f7fa fecb 	bl	8000668 <lcd_print>
		lcd_print(2, 7, "          ");
 80058d2:	4a29      	ldr	r2, [pc, #164]	; (8005978 <hataKoduLcdGoster+0x1ac>)
 80058d4:	2107      	movs	r1, #7
 80058d6:	2002      	movs	r0, #2
 80058d8:	f7fa fec6 	bl	8000668 <lcd_print>
}
 80058dc:	e040      	b.n	8005960 <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 80058de:	79fb      	ldrb	r3, [r7, #7]
 80058e0:	2b05      	cmp	r3, #5
 80058e2:	d11d      	bne.n	8005920 <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 80058e4:	4b20      	ldr	r3, [pc, #128]	; (8005968 <hataKoduLcdGoster+0x19c>)
 80058e6:	781b      	ldrb	r3, [r3, #0]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d105      	bne.n	80058f8 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU    ");
 80058ec:	4a1f      	ldr	r2, [pc, #124]	; (800596c <hataKoduLcdGoster+0x1a0>)
 80058ee:	2101      	movs	r1, #1
 80058f0:	2001      	movs	r0, #1
 80058f2:	f7fa feb9 	bl	8000668 <lcd_print>
 80058f6:	e008      	b.n	800590a <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 80058f8:	4b1b      	ldr	r3, [pc, #108]	; (8005968 <hataKoduLcdGoster+0x19c>)
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d104      	bne.n	800590a <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005900:	4a1b      	ldr	r2, [pc, #108]	; (8005970 <hataKoduLcdGoster+0x1a4>)
 8005902:	2101      	movs	r1, #1
 8005904:	2001      	movs	r0, #1
 8005906:	f7fa feaf 	bl	8000668 <lcd_print>
		lcd_print(2, 5, "5");
 800590a:	4a1f      	ldr	r2, [pc, #124]	; (8005988 <hataKoduLcdGoster+0x1bc>)
 800590c:	2105      	movs	r1, #5
 800590e:	2002      	movs	r0, #2
 8005910:	f7fa feaa 	bl	8000668 <lcd_print>
		lcd_print(2, 7, "          ");
 8005914:	4a18      	ldr	r2, [pc, #96]	; (8005978 <hataKoduLcdGoster+0x1ac>)
 8005916:	2107      	movs	r1, #7
 8005918:	2002      	movs	r0, #2
 800591a:	f7fa fea5 	bl	8000668 <lcd_print>
}
 800591e:	e01f      	b.n	8005960 <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8005920:	79fb      	ldrb	r3, [r7, #7]
 8005922:	2b06      	cmp	r3, #6
 8005924:	d11c      	bne.n	8005960 <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8005926:	4b10      	ldr	r3, [pc, #64]	; (8005968 <hataKoduLcdGoster+0x19c>)
 8005928:	781b      	ldrb	r3, [r3, #0]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d105      	bne.n	800593a <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU    ");
 800592e:	4a0f      	ldr	r2, [pc, #60]	; (800596c <hataKoduLcdGoster+0x1a0>)
 8005930:	2101      	movs	r1, #1
 8005932:	2001      	movs	r0, #1
 8005934:	f7fa fe98 	bl	8000668 <lcd_print>
 8005938:	e008      	b.n	800594c <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 800593a:	4b0b      	ldr	r3, [pc, #44]	; (8005968 <hataKoduLcdGoster+0x19c>)
 800593c:	781b      	ldrb	r3, [r3, #0]
 800593e:	2b01      	cmp	r3, #1
 8005940:	d104      	bne.n	800594c <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005942:	4a0b      	ldr	r2, [pc, #44]	; (8005970 <hataKoduLcdGoster+0x1a4>)
 8005944:	2101      	movs	r1, #1
 8005946:	2001      	movs	r0, #1
 8005948:	f7fa fe8e 	bl	8000668 <lcd_print>
		lcd_print(2, 6, "6");
 800594c:	4a0f      	ldr	r2, [pc, #60]	; (800598c <hataKoduLcdGoster+0x1c0>)
 800594e:	2106      	movs	r1, #6
 8005950:	2002      	movs	r0, #2
 8005952:	f7fa fe89 	bl	8000668 <lcd_print>
		lcd_print(2, 7, "          ");
 8005956:	4a08      	ldr	r2, [pc, #32]	; (8005978 <hataKoduLcdGoster+0x1ac>)
 8005958:	2107      	movs	r1, #7
 800595a:	2002      	movs	r0, #2
 800595c:	f7fa fe84 	bl	8000668 <lcd_print>
}
 8005960:	bf00      	nop
 8005962:	3708      	adds	r7, #8
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}
 8005968:	20000c6a 	.word	0x20000c6a
 800596c:	0800e45c 	.word	0x0800e45c
 8005970:	0800e470 	.word	0x0800e470
 8005974:	0800d888 	.word	0x0800d888
 8005978:	0800e484 	.word	0x0800e484
 800597c:	0800d88c 	.word	0x0800d88c
 8005980:	0800d890 	.word	0x0800d890
 8005984:	0800d894 	.word	0x0800d894
 8005988:	0800d898 	.word	0x0800d898
 800598c:	0800d89c 	.word	0x0800d89c

08005990 <convertAndSendData>:

void convertAndSendData() {
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
	lcd_print(1, 1, "Veri Esleme");
 8005996:	4a14      	ldr	r2, [pc, #80]	; (80059e8 <convertAndSendData+0x58>)
 8005998:	2101      	movs	r1, #1
 800599a:	2001      	movs	r0, #1
 800599c:	f7fa fe64 	bl	8000668 <lcd_print>
	lcd_print(2, 1, "Baslatildi...");
 80059a0:	4a12      	ldr	r2, [pc, #72]	; (80059ec <convertAndSendData+0x5c>)
 80059a2:	2101      	movs	r1, #1
 80059a4:	2002      	movs	r0, #2
 80059a6:	f7fa fe5f 	bl	8000668 <lcd_print>
	for(int i=0; i<2; i++) {
 80059aa:	2300      	movs	r3, #0
 80059ac:	607b      	str	r3, [r7, #4]
 80059ae:	e00a      	b.n	80059c6 <convertAndSendData+0x36>
		sendMachineData(&huart1, machineID, mergeData());
 80059b0:	f002 fb3c 	bl	800802c <mergeData>
 80059b4:	4603      	mov	r3, r0
 80059b6:	461a      	mov	r2, r3
 80059b8:	490d      	ldr	r1, [pc, #52]	; (80059f0 <convertAndSendData+0x60>)
 80059ba:	480e      	ldr	r0, [pc, #56]	; (80059f4 <convertAndSendData+0x64>)
 80059bc:	f7fa fc3a 	bl	8000234 <sendMachineData>
	for(int i=0; i<2; i++) {
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	3301      	adds	r3, #1
 80059c4:	607b      	str	r3, [r7, #4]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	ddf1      	ble.n	80059b0 <convertAndSendData+0x20>
	}
	HAL_Delay(500);
 80059cc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80059d0:	f003 fb7a 	bl	80090c8 <HAL_Delay>
	lcd_clear();
 80059d4:	f7fa fe74 	bl	80006c0 <lcd_clear>
	HAL_Delay(500);
 80059d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80059dc:	f003 fb74 	bl	80090c8 <HAL_Delay>
}
 80059e0:	bf00      	nop
 80059e2:	3708      	adds	r7, #8
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}
 80059e8:	0800e490 	.word	0x0800e490
 80059ec:	0800e49c 	.word	0x0800e49c
 80059f0:	20000bf4 	.word	0x20000bf4
 80059f4:	20000ea4 	.word	0x20000ea4

080059f8 <eepromKontrol>:

void eepromKontrol(int type) {
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b086      	sub	sp, #24
 80059fc:	af04      	add	r7, sp, #16
 80059fe:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1,0xA0,0,145,eepromData,145,3000);
 8005a00:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005a04:	9302      	str	r3, [sp, #8]
 8005a06:	2391      	movs	r3, #145	; 0x91
 8005a08:	9301      	str	r3, [sp, #4]
 8005a0a:	4b9c      	ldr	r3, [pc, #624]	; (8005c7c <eepromKontrol+0x284>)
 8005a0c:	9300      	str	r3, [sp, #0]
 8005a0e:	2391      	movs	r3, #145	; 0x91
 8005a10:	2200      	movs	r2, #0
 8005a12:	21a0      	movs	r1, #160	; 0xa0
 8005a14:	489a      	ldr	r0, [pc, #616]	; (8005c80 <eepromKontrol+0x288>)
 8005a16:	f004 fcdb 	bl	800a3d0 <HAL_I2C_Mem_Read>
	HAL_Delay(1000);
 8005a1a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005a1e:	f003 fb53 	bl	80090c8 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 8005a22:	4b96      	ldr	r3, [pc, #600]	; (8005c7c <eepromKontrol+0x284>)
 8005a24:	78da      	ldrb	r2, [r3, #3]
 8005a26:	4b97      	ldr	r3, [pc, #604]	; (8005c84 <eepromKontrol+0x28c>)
 8005a28:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8005a2a:	4b94      	ldr	r3, [pc, #592]	; (8005c7c <eepromKontrol+0x284>)
 8005a2c:	785a      	ldrb	r2, [r3, #1]
 8005a2e:	4b96      	ldr	r3, [pc, #600]	; (8005c88 <eepromKontrol+0x290>)
 8005a30:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 8005a32:	4b92      	ldr	r3, [pc, #584]	; (8005c7c <eepromKontrol+0x284>)
 8005a34:	789a      	ldrb	r2, [r3, #2]
 8005a36:	4b95      	ldr	r3, [pc, #596]	; (8005c8c <eepromKontrol+0x294>)
 8005a38:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8005a3a:	4b90      	ldr	r3, [pc, #576]	; (8005c7c <eepromKontrol+0x284>)
 8005a3c:	791a      	ldrb	r2, [r3, #4]
 8005a3e:	4b94      	ldr	r3, [pc, #592]	; (8005c90 <eepromKontrol+0x298>)
 8005a40:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 8005a42:	4b8e      	ldr	r3, [pc, #568]	; (8005c7c <eepromKontrol+0x284>)
 8005a44:	795a      	ldrb	r2, [r3, #5]
 8005a46:	4b93      	ldr	r3, [pc, #588]	; (8005c94 <eepromKontrol+0x29c>)
 8005a48:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8005a4a:	4b8c      	ldr	r3, [pc, #560]	; (8005c7c <eepromKontrol+0x284>)
 8005a4c:	799a      	ldrb	r2, [r3, #6]
 8005a4e:	4b92      	ldr	r3, [pc, #584]	; (8005c98 <eepromKontrol+0x2a0>)
 8005a50:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 8005a52:	4b8a      	ldr	r3, [pc, #552]	; (8005c7c <eepromKontrol+0x284>)
 8005a54:	79da      	ldrb	r2, [r3, #7]
 8005a56:	4b91      	ldr	r3, [pc, #580]	; (8005c9c <eepromKontrol+0x2a4>)
 8005a58:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8005a5a:	4b88      	ldr	r3, [pc, #544]	; (8005c7c <eepromKontrol+0x284>)
 8005a5c:	7a1a      	ldrb	r2, [r3, #8]
 8005a5e:	4b90      	ldr	r3, [pc, #576]	; (8005ca0 <eepromKontrol+0x2a8>)
 8005a60:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 8005a62:	4b86      	ldr	r3, [pc, #536]	; (8005c7c <eepromKontrol+0x284>)
 8005a64:	7a5a      	ldrb	r2, [r3, #9]
 8005a66:	4b8f      	ldr	r3, [pc, #572]	; (8005ca4 <eepromKontrol+0x2ac>)
 8005a68:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 8005a6a:	4b84      	ldr	r3, [pc, #528]	; (8005c7c <eepromKontrol+0x284>)
 8005a6c:	7a9a      	ldrb	r2, [r3, #10]
 8005a6e:	4b8e      	ldr	r3, [pc, #568]	; (8005ca8 <eepromKontrol+0x2b0>)
 8005a70:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 8005a72:	4b82      	ldr	r3, [pc, #520]	; (8005c7c <eepromKontrol+0x284>)
 8005a74:	7ada      	ldrb	r2, [r3, #11]
 8005a76:	4b8d      	ldr	r3, [pc, #564]	; (8005cac <eepromKontrol+0x2b4>)
 8005a78:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 8005a7a:	4b80      	ldr	r3, [pc, #512]	; (8005c7c <eepromKontrol+0x284>)
 8005a7c:	7b1a      	ldrb	r2, [r3, #12]
 8005a7e:	4b8c      	ldr	r3, [pc, #560]	; (8005cb0 <eepromKontrol+0x2b8>)
 8005a80:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 8005a82:	4b7e      	ldr	r3, [pc, #504]	; (8005c7c <eepromKontrol+0x284>)
 8005a84:	7b5a      	ldrb	r2, [r3, #13]
 8005a86:	4b8b      	ldr	r3, [pc, #556]	; (8005cb4 <eepromKontrol+0x2bc>)
 8005a88:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 8005a8a:	4b7c      	ldr	r3, [pc, #496]	; (8005c7c <eepromKontrol+0x284>)
 8005a8c:	7b9a      	ldrb	r2, [r3, #14]
 8005a8e:	4b8a      	ldr	r3, [pc, #552]	; (8005cb8 <eepromKontrol+0x2c0>)
 8005a90:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 8005a92:	4b7a      	ldr	r3, [pc, #488]	; (8005c7c <eepromKontrol+0x284>)
 8005a94:	7bda      	ldrb	r2, [r3, #15]
 8005a96:	4b89      	ldr	r3, [pc, #548]	; (8005cbc <eepromKontrol+0x2c4>)
 8005a98:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 8005a9a:	4b78      	ldr	r3, [pc, #480]	; (8005c7c <eepromKontrol+0x284>)
 8005a9c:	7c1a      	ldrb	r2, [r3, #16]
 8005a9e:	4b88      	ldr	r3, [pc, #544]	; (8005cc0 <eepromKontrol+0x2c8>)
 8005aa0:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 8005aa2:	4b76      	ldr	r3, [pc, #472]	; (8005c7c <eepromKontrol+0x284>)
 8005aa4:	7c5a      	ldrb	r2, [r3, #17]
 8005aa6:	4b87      	ldr	r3, [pc, #540]	; (8005cc4 <eepromKontrol+0x2cc>)
 8005aa8:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 8005aaa:	4b74      	ldr	r3, [pc, #464]	; (8005c7c <eepromKontrol+0x284>)
 8005aac:	7c9a      	ldrb	r2, [r3, #18]
 8005aae:	4b86      	ldr	r3, [pc, #536]	; (8005cc8 <eepromKontrol+0x2d0>)
 8005ab0:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 8005ab2:	4b72      	ldr	r3, [pc, #456]	; (8005c7c <eepromKontrol+0x284>)
 8005ab4:	7cda      	ldrb	r2, [r3, #19]
 8005ab6:	4b85      	ldr	r3, [pc, #532]	; (8005ccc <eepromKontrol+0x2d4>)
 8005ab8:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 8005aba:	4b70      	ldr	r3, [pc, #448]	; (8005c7c <eepromKontrol+0x284>)
 8005abc:	7d1a      	ldrb	r2, [r3, #20]
 8005abe:	4b84      	ldr	r3, [pc, #528]	; (8005cd0 <eepromKontrol+0x2d8>)
 8005ac0:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 8005ac2:	4b6e      	ldr	r3, [pc, #440]	; (8005c7c <eepromKontrol+0x284>)
 8005ac4:	7d5a      	ldrb	r2, [r3, #21]
 8005ac6:	4b83      	ldr	r3, [pc, #524]	; (8005cd4 <eepromKontrol+0x2dc>)
 8005ac8:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8005aca:	4b6c      	ldr	r3, [pc, #432]	; (8005c7c <eepromKontrol+0x284>)
 8005acc:	7d9a      	ldrb	r2, [r3, #22]
 8005ace:	4b82      	ldr	r3, [pc, #520]	; (8005cd8 <eepromKontrol+0x2e0>)
 8005ad0:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 8005ad2:	4b6a      	ldr	r3, [pc, #424]	; (8005c7c <eepromKontrol+0x284>)
 8005ad4:	7dda      	ldrb	r2, [r3, #23]
 8005ad6:	4b81      	ldr	r3, [pc, #516]	; (8005cdc <eepromKontrol+0x2e4>)
 8005ad8:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8005ada:	4b68      	ldr	r3, [pc, #416]	; (8005c7c <eepromKontrol+0x284>)
 8005adc:	7e1a      	ldrb	r2, [r3, #24]
 8005ade:	4b80      	ldr	r3, [pc, #512]	; (8005ce0 <eepromKontrol+0x2e8>)
 8005ae0:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 8005ae2:	4b66      	ldr	r3, [pc, #408]	; (8005c7c <eepromKontrol+0x284>)
 8005ae4:	7e5a      	ldrb	r2, [r3, #25]
 8005ae6:	4b7f      	ldr	r3, [pc, #508]	; (8005ce4 <eepromKontrol+0x2ec>)
 8005ae8:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8005aea:	4b64      	ldr	r3, [pc, #400]	; (8005c7c <eepromKontrol+0x284>)
 8005aec:	7e9a      	ldrb	r2, [r3, #26]
 8005aee:	4b7e      	ldr	r3, [pc, #504]	; (8005ce8 <eepromKontrol+0x2f0>)
 8005af0:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 8005af2:	4b62      	ldr	r3, [pc, #392]	; (8005c7c <eepromKontrol+0x284>)
 8005af4:	7eda      	ldrb	r2, [r3, #27]
 8005af6:	4b7d      	ldr	r3, [pc, #500]	; (8005cec <eepromKontrol+0x2f4>)
 8005af8:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8005afa:	4b60      	ldr	r3, [pc, #384]	; (8005c7c <eepromKontrol+0x284>)
 8005afc:	7f1a      	ldrb	r2, [r3, #28]
 8005afe:	4b7c      	ldr	r3, [pc, #496]	; (8005cf0 <eepromKontrol+0x2f8>)
 8005b00:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 8005b02:	4b5e      	ldr	r3, [pc, #376]	; (8005c7c <eepromKontrol+0x284>)
 8005b04:	7f5a      	ldrb	r2, [r3, #29]
 8005b06:	4b7b      	ldr	r3, [pc, #492]	; (8005cf4 <eepromKontrol+0x2fc>)
 8005b08:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8005b0a:	4b5c      	ldr	r3, [pc, #368]	; (8005c7c <eepromKontrol+0x284>)
 8005b0c:	7f9a      	ldrb	r2, [r3, #30]
 8005b0e:	4b7a      	ldr	r3, [pc, #488]	; (8005cf8 <eepromKontrol+0x300>)
 8005b10:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 8005b12:	4b5a      	ldr	r3, [pc, #360]	; (8005c7c <eepromKontrol+0x284>)
 8005b14:	7fda      	ldrb	r2, [r3, #31]
 8005b16:	4b79      	ldr	r3, [pc, #484]	; (8005cfc <eepromKontrol+0x304>)
 8005b18:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8005b1a:	4b58      	ldr	r3, [pc, #352]	; (8005c7c <eepromKontrol+0x284>)
 8005b1c:	f893 2020 	ldrb.w	r2, [r3, #32]
 8005b20:	4b77      	ldr	r3, [pc, #476]	; (8005d00 <eepromKontrol+0x308>)
 8005b22:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 8005b24:	4b55      	ldr	r3, [pc, #340]	; (8005c7c <eepromKontrol+0x284>)
 8005b26:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8005b2a:	4b76      	ldr	r3, [pc, #472]	; (8005d04 <eepromKontrol+0x30c>)
 8005b2c:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[37];
 8005b2e:	4b53      	ldr	r3, [pc, #332]	; (8005c7c <eepromKontrol+0x284>)
 8005b30:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8005b34:	4b74      	ldr	r3, [pc, #464]	; (8005d08 <eepromKontrol+0x310>)
 8005b36:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8005b38:	4b50      	ldr	r3, [pc, #320]	; (8005c7c <eepromKontrol+0x284>)
 8005b3a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8005b3e:	4b73      	ldr	r3, [pc, #460]	; (8005d0c <eepromKontrol+0x314>)
 8005b40:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 8005b42:	4b4e      	ldr	r3, [pc, #312]	; (8005c7c <eepromKontrol+0x284>)
 8005b44:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8005b48:	4b71      	ldr	r3, [pc, #452]	; (8005d10 <eepromKontrol+0x318>)
 8005b4a:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8005b4c:	4b4b      	ldr	r3, [pc, #300]	; (8005c7c <eepromKontrol+0x284>)
 8005b4e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8005b52:	4b70      	ldr	r3, [pc, #448]	; (8005d14 <eepromKontrol+0x31c>)
 8005b54:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8005b56:	4b49      	ldr	r3, [pc, #292]	; (8005c7c <eepromKontrol+0x284>)
 8005b58:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8005b5c:	4b6e      	ldr	r3, [pc, #440]	; (8005d18 <eepromKontrol+0x320>)
 8005b5e:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 8005b60:	4b46      	ldr	r3, [pc, #280]	; (8005c7c <eepromKontrol+0x284>)
 8005b62:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8005b66:	4b6d      	ldr	r3, [pc, #436]	; (8005d1c <eepromKontrol+0x324>)
 8005b68:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 8005b6a:	4b44      	ldr	r3, [pc, #272]	; (8005c7c <eepromKontrol+0x284>)
 8005b6c:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8005b70:	4b6b      	ldr	r3, [pc, #428]	; (8005d20 <eepromKontrol+0x328>)
 8005b72:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 8005b74:	4b41      	ldr	r3, [pc, #260]	; (8005c7c <eepromKontrol+0x284>)
 8005b76:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8005b7a:	4b6a      	ldr	r3, [pc, #424]	; (8005d24 <eepromKontrol+0x32c>)
 8005b7c:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 8005b7e:	4b3f      	ldr	r3, [pc, #252]	; (8005c7c <eepromKontrol+0x284>)
 8005b80:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8005b84:	4b68      	ldr	r3, [pc, #416]	; (8005d28 <eepromKontrol+0x330>)
 8005b86:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 8005b88:	4b3c      	ldr	r3, [pc, #240]	; (8005c7c <eepromKontrol+0x284>)
 8005b8a:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8005b8e:	4b67      	ldr	r3, [pc, #412]	; (8005d2c <eepromKontrol+0x334>)
 8005b90:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 8005b92:	4b3a      	ldr	r3, [pc, #232]	; (8005c7c <eepromKontrol+0x284>)
 8005b94:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005b98:	4b65      	ldr	r3, [pc, #404]	; (8005d30 <eepromKontrol+0x338>)
 8005b9a:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 8005b9c:	4b37      	ldr	r3, [pc, #220]	; (8005c7c <eepromKontrol+0x284>)
 8005b9e:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8005ba2:	4b64      	ldr	r3, [pc, #400]	; (8005d34 <eepromKontrol+0x33c>)
 8005ba4:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 8005ba6:	4b35      	ldr	r3, [pc, #212]	; (8005c7c <eepromKontrol+0x284>)
 8005ba8:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8005bac:	4b62      	ldr	r3, [pc, #392]	; (8005d38 <eepromKontrol+0x340>)
 8005bae:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 8005bb0:	4b32      	ldr	r3, [pc, #200]	; (8005c7c <eepromKontrol+0x284>)
 8005bb2:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8005bb6:	4b61      	ldr	r3, [pc, #388]	; (8005d3c <eepromKontrol+0x344>)
 8005bb8:	701a      	strb	r2, [r3, #0]

	loadMenuTexts(dilSecim);
 8005bba:	4b52      	ldr	r3, [pc, #328]	; (8005d04 <eepromKontrol+0x30c>)
 8005bbc:	781b      	ldrb	r3, [r3, #0]
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f7fe fff4 	bl	8004bac <loadMenuTexts>

	if(calismaSayisi10000>9) {
 8005bc4:	4b4e      	ldr	r3, [pc, #312]	; (8005d00 <eepromKontrol+0x308>)
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	2b09      	cmp	r3, #9
 8005bca:	d902      	bls.n	8005bd2 <eepromKontrol+0x1da>
	    calismaSayisi10000=0;
 8005bcc:	4b4c      	ldr	r3, [pc, #304]	; (8005d00 <eepromKontrol+0x308>)
 8005bce:	2200      	movs	r2, #0
 8005bd0:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 8005bd2:	4b4a      	ldr	r3, [pc, #296]	; (8005cfc <eepromKontrol+0x304>)
 8005bd4:	781b      	ldrb	r3, [r3, #0]
 8005bd6:	2b09      	cmp	r3, #9
 8005bd8:	d902      	bls.n	8005be0 <eepromKontrol+0x1e8>
	    calismaSayisi1000=0;
 8005bda:	4b48      	ldr	r3, [pc, #288]	; (8005cfc <eepromKontrol+0x304>)
 8005bdc:	2200      	movs	r2, #0
 8005bde:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 8005be0:	4b45      	ldr	r3, [pc, #276]	; (8005cf8 <eepromKontrol+0x300>)
 8005be2:	781b      	ldrb	r3, [r3, #0]
 8005be4:	2b09      	cmp	r3, #9
 8005be6:	d902      	bls.n	8005bee <eepromKontrol+0x1f6>
	    calismaSayisi100=0;
 8005be8:	4b43      	ldr	r3, [pc, #268]	; (8005cf8 <eepromKontrol+0x300>)
 8005bea:	2200      	movs	r2, #0
 8005bec:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8005bee:	4b41      	ldr	r3, [pc, #260]	; (8005cf4 <eepromKontrol+0x2fc>)
 8005bf0:	781b      	ldrb	r3, [r3, #0]
 8005bf2:	2b09      	cmp	r3, #9
 8005bf4:	d902      	bls.n	8005bfc <eepromKontrol+0x204>
	    calismaSayisi10=0;
 8005bf6:	4b3f      	ldr	r3, [pc, #252]	; (8005cf4 <eepromKontrol+0x2fc>)
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8005bfc:	4b3c      	ldr	r3, [pc, #240]	; (8005cf0 <eepromKontrol+0x2f8>)
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	2b09      	cmp	r3, #9
 8005c02:	d902      	bls.n	8005c0a <eepromKontrol+0x212>
	    calismaSayisi1=0;
 8005c04:	4b3a      	ldr	r3, [pc, #232]	; (8005cf0 <eepromKontrol+0x2f8>)
 8005c06:	2200      	movs	r2, #0
 8005c08:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8005c0a:	4b1f      	ldr	r3, [pc, #124]	; (8005c88 <eepromKontrol+0x290>)
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d902      	bls.n	8005c18 <eepromKontrol+0x220>
	    calismaSekli=0;
 8005c12:	4b1d      	ldr	r3, [pc, #116]	; (8005c88 <eepromKontrol+0x290>)
 8005c14:	2200      	movs	r2, #0
 8005c16:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8005c18:	4b1c      	ldr	r3, [pc, #112]	; (8005c8c <eepromKontrol+0x294>)
 8005c1a:	781b      	ldrb	r3, [r3, #0]
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d902      	bls.n	8005c26 <eepromKontrol+0x22e>
	    emniyetCercevesi=1;
 8005c20:	4b1a      	ldr	r3, [pc, #104]	; (8005c8c <eepromKontrol+0x294>)
 8005c22:	2201      	movs	r2, #1
 8005c24:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8005c26:	4b1a      	ldr	r3, [pc, #104]	; (8005c90 <eepromKontrol+0x298>)
 8005c28:	781b      	ldrb	r3, [r3, #0]
 8005c2a:	2b01      	cmp	r3, #1
 8005c2c:	d902      	bls.n	8005c34 <eepromKontrol+0x23c>
	    yavaslamaLimit=0;
 8005c2e:	4b18      	ldr	r3, [pc, #96]	; (8005c90 <eepromKontrol+0x298>)
 8005c30:	2200      	movs	r2, #0
 8005c32:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 8005c34:	4b17      	ldr	r3, [pc, #92]	; (8005c94 <eepromKontrol+0x29c>)
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	2b01      	cmp	r3, #1
 8005c3a:	d902      	bls.n	8005c42 <eepromKontrol+0x24a>
	    altLimit=1;
 8005c3c:	4b15      	ldr	r3, [pc, #84]	; (8005c94 <eepromKontrol+0x29c>)
 8005c3e:	2201      	movs	r2, #1
 8005c40:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 8005c42:	4b15      	ldr	r3, [pc, #84]	; (8005c98 <eepromKontrol+0x2a0>)
 8005c44:	781b      	ldrb	r3, [r3, #0]
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d902      	bls.n	8005c50 <eepromKontrol+0x258>
	    basincSalteri=1;
 8005c4a:	4b13      	ldr	r3, [pc, #76]	; (8005c98 <eepromKontrol+0x2a0>)
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 8005c50:	4b12      	ldr	r3, [pc, #72]	; (8005c9c <eepromKontrol+0x2a4>)
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	2b03      	cmp	r3, #3
 8005c56:	d902      	bls.n	8005c5e <eepromKontrol+0x266>
	    kapiSecimleri=3;
 8005c58:	4b10      	ldr	r3, [pc, #64]	; (8005c9c <eepromKontrol+0x2a4>)
 8005c5a:	2203      	movs	r2, #3
 8005c5c:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8005c5e:	4b2d      	ldr	r3, [pc, #180]	; (8005d14 <eepromKontrol+0x31c>)
 8005c60:	781b      	ldrb	r3, [r3, #0]
 8005c62:	2b01      	cmp	r3, #1
 8005c64:	d902      	bls.n	8005c6c <eepromKontrol+0x274>
	    kapiAcTipi=0;
 8005c66:	4b2b      	ldr	r3, [pc, #172]	; (8005d14 <eepromKontrol+0x31c>)
 8005c68:	2200      	movs	r2, #0
 8005c6a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 8005c6c:	4b0c      	ldr	r3, [pc, #48]	; (8005ca0 <eepromKontrol+0x2a8>)
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	d965      	bls.n	8005d40 <eepromKontrol+0x348>
	    kapi1Tip=1;
 8005c74:	4b0a      	ldr	r3, [pc, #40]	; (8005ca0 <eepromKontrol+0x2a8>)
 8005c76:	2201      	movs	r2, #1
 8005c78:	701a      	strb	r2, [r3, #0]
 8005c7a:	e061      	b.n	8005d40 <eepromKontrol+0x348>
 8005c7c:	20000b38 	.word	0x20000b38
 8005c80:	20000e08 	.word	0x20000e08
 8005c84:	20000bc9 	.word	0x20000bc9
 8005c88:	20000c4a 	.word	0x20000c4a
 8005c8c:	20000c4d 	.word	0x20000c4d
 8005c90:	20000c4e 	.word	0x20000c4e
 8005c94:	20000c4f 	.word	0x20000c4f
 8005c98:	20000c50 	.word	0x20000c50
 8005c9c:	20000c51 	.word	0x20000c51
 8005ca0:	20000c52 	.word	0x20000c52
 8005ca4:	20000c62 	.word	0x20000c62
 8005ca8:	20000c53 	.word	0x20000c53
 8005cac:	20000c63 	.word	0x20000c63
 8005cb0:	20000c54 	.word	0x20000c54
 8005cb4:	20000c64 	.word	0x20000c64
 8005cb8:	20000c57 	.word	0x20000c57
 8005cbc:	20000c58 	.word	0x20000c58
 8005cc0:	20000c59 	.word	0x20000c59
 8005cc4:	20000c5a 	.word	0x20000c5a
 8005cc8:	20000c5b 	.word	0x20000c5b
 8005ccc:	20000c5c 	.word	0x20000c5c
 8005cd0:	20000c5d 	.word	0x20000c5d
 8005cd4:	20000c5e 	.word	0x20000c5e
 8005cd8:	20000c5f 	.word	0x20000c5f
 8005cdc:	20000c60 	.word	0x20000c60
 8005ce0:	20000c61 	.word	0x20000c61
 8005ce4:	20000c65 	.word	0x20000c65
 8005ce8:	20000c67 	.word	0x20000c67
 8005cec:	20000c45 	.word	0x20000c45
 8005cf0:	20000c46 	.word	0x20000c46
 8005cf4:	20000c47 	.word	0x20000c47
 8005cf8:	200009bf 	.word	0x200009bf
 8005cfc:	200009c0 	.word	0x200009c0
 8005d00:	20000c48 	.word	0x20000c48
 8005d04:	20000c6a 	.word	0x20000c6a
 8005d08:	20000c68 	.word	0x20000c68
 8005d0c:	20000c56 	.word	0x20000c56
 8005d10:	20000c69 	.word	0x20000c69
 8005d14:	20000c55 	.word	0x20000c55
 8005d18:	20000c6b 	.word	0x20000c6b
 8005d1c:	20000c6c 	.word	0x20000c6c
 8005d20:	20000c6d 	.word	0x20000c6d
 8005d24:	20000c6e 	.word	0x20000c6e
 8005d28:	20000c6f 	.word	0x20000c6f
 8005d2c:	20000c70 	.word	0x20000c70
 8005d30:	20000c71 	.word	0x20000c71
 8005d34:	20000c72 	.word	0x20000c72
 8005d38:	20000c73 	.word	0x20000c73
 8005d3c:	20000c74 	.word	0x20000c74
	}

	if(kapi1AcSure>5) {
 8005d40:	4b56      	ldr	r3, [pc, #344]	; (8005e9c <eepromKontrol+0x4a4>)
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	2b05      	cmp	r3, #5
 8005d46:	d902      	bls.n	8005d4e <eepromKontrol+0x356>
	    kapi1AcSure=5;
 8005d48:	4b54      	ldr	r3, [pc, #336]	; (8005e9c <eepromKontrol+0x4a4>)
 8005d4a:	2205      	movs	r2, #5
 8005d4c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 8005d4e:	4b54      	ldr	r3, [pc, #336]	; (8005ea0 <eepromKontrol+0x4a8>)
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d902      	bls.n	8005d5c <eepromKontrol+0x364>
	    kapi2Tip=1;
 8005d56:	4b52      	ldr	r3, [pc, #328]	; (8005ea0 <eepromKontrol+0x4a8>)
 8005d58:	2201      	movs	r2, #1
 8005d5a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 8005d5c:	4b51      	ldr	r3, [pc, #324]	; (8005ea4 <eepromKontrol+0x4ac>)
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	2b05      	cmp	r3, #5
 8005d62:	d902      	bls.n	8005d6a <eepromKontrol+0x372>
	    kapi2AcSure=5;
 8005d64:	4b4f      	ldr	r3, [pc, #316]	; (8005ea4 <eepromKontrol+0x4ac>)
 8005d66:	2205      	movs	r2, #5
 8005d68:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 8005d6a:	4b4f      	ldr	r3, [pc, #316]	; (8005ea8 <eepromKontrol+0x4b0>)
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	2b02      	cmp	r3, #2
 8005d70:	d902      	bls.n	8005d78 <eepromKontrol+0x380>
	    kapitablaTip=1;
 8005d72:	4b4d      	ldr	r3, [pc, #308]	; (8005ea8 <eepromKontrol+0x4b0>)
 8005d74:	2201      	movs	r2, #1
 8005d76:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 8005d78:	4b4c      	ldr	r3, [pc, #304]	; (8005eac <eepromKontrol+0x4b4>)
 8005d7a:	781b      	ldrb	r3, [r3, #0]
 8005d7c:	2b02      	cmp	r3, #2
 8005d7e:	d902      	bls.n	8005d86 <eepromKontrol+0x38e>
	    kapiTablaAcKonum=2;
 8005d80:	4b4a      	ldr	r3, [pc, #296]	; (8005eac <eepromKontrol+0x4b4>)
 8005d82:	2202      	movs	r2, #2
 8005d84:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 8005d86:	4b4a      	ldr	r3, [pc, #296]	; (8005eb0 <eepromKontrol+0x4b8>)
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	2b05      	cmp	r3, #5
 8005d8c:	d902      	bls.n	8005d94 <eepromKontrol+0x39c>
	    kapiTablaAcSure=5;
 8005d8e:	4b48      	ldr	r3, [pc, #288]	; (8005eb0 <eepromKontrol+0x4b8>)
 8005d90:	2205      	movs	r2, #5
 8005d92:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 8005d94:	4b47      	ldr	r3, [pc, #284]	; (8005eb4 <eepromKontrol+0x4bc>)
 8005d96:	781b      	ldrb	r3, [r3, #0]
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d902      	bls.n	8005da2 <eepromKontrol+0x3aa>
	    yukariYavasLimit=0;
 8005d9c:	4b45      	ldr	r3, [pc, #276]	; (8005eb4 <eepromKontrol+0x4bc>)
 8005d9e:	2200      	movs	r2, #0
 8005da0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 8005da2:	4b45      	ldr	r3, [pc, #276]	; (8005eb8 <eepromKontrol+0x4c0>)
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d902      	bls.n	8005db0 <eepromKontrol+0x3b8>
	    devirmeYuruyusSecim=0;
 8005daa:	4b43      	ldr	r3, [pc, #268]	; (8005eb8 <eepromKontrol+0x4c0>)
 8005dac:	2200      	movs	r2, #0
 8005dae:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 8005db0:	4b42      	ldr	r3, [pc, #264]	; (8005ebc <eepromKontrol+0x4c4>)
 8005db2:	781b      	ldrb	r3, [r3, #0]
 8005db4:	2b01      	cmp	r3, #1
 8005db6:	d902      	bls.n	8005dbe <eepromKontrol+0x3c6>
	    devirmeYukariIleriLimit=1;
 8005db8:	4b40      	ldr	r3, [pc, #256]	; (8005ebc <eepromKontrol+0x4c4>)
 8005dba:	2201      	movs	r2, #1
 8005dbc:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 8005dbe:	4b40      	ldr	r3, [pc, #256]	; (8005ec0 <eepromKontrol+0x4c8>)
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	2b01      	cmp	r3, #1
 8005dc4:	d902      	bls.n	8005dcc <eepromKontrol+0x3d4>
	    devirmeAsagiGeriLimit=1;
 8005dc6:	4b3e      	ldr	r3, [pc, #248]	; (8005ec0 <eepromKontrol+0x4c8>)
 8005dc8:	2201      	movs	r2, #1
 8005dca:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 8005dcc:	4b3d      	ldr	r3, [pc, #244]	; (8005ec4 <eepromKontrol+0x4cc>)
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d902      	bls.n	8005dda <eepromKontrol+0x3e2>
	    devirmeSilindirTipi=0;
 8005dd4:	4b3b      	ldr	r3, [pc, #236]	; (8005ec4 <eepromKontrol+0x4cc>)
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 8005dda:	4b3b      	ldr	r3, [pc, #236]	; (8005ec8 <eepromKontrol+0x4d0>)
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d902      	bls.n	8005de8 <eepromKontrol+0x3f0>
	    platformSilindirTipi=0;
 8005de2:	4b39      	ldr	r3, [pc, #228]	; (8005ec8 <eepromKontrol+0x4d0>)
 8005de4:	2200      	movs	r2, #0
 8005de6:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8005de8:	4b38      	ldr	r3, [pc, #224]	; (8005ecc <eepromKontrol+0x4d4>)
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	2b05      	cmp	r3, #5
 8005dee:	d902      	bls.n	8005df6 <eepromKontrol+0x3fe>
	    yukariValfTmr=0;
 8005df0:	4b36      	ldr	r3, [pc, #216]	; (8005ecc <eepromKontrol+0x4d4>)
 8005df2:	2200      	movs	r2, #0
 8005df4:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8005df6:	4b36      	ldr	r3, [pc, #216]	; (8005ed0 <eepromKontrol+0x4d8>)
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	2b05      	cmp	r3, #5
 8005dfc:	d902      	bls.n	8005e04 <eepromKontrol+0x40c>
	    asagiValfTmr=0;
 8005dfe:	4b34      	ldr	r3, [pc, #208]	; (8005ed0 <eepromKontrol+0x4d8>)
 8005e00:	2200      	movs	r2, #0
 8005e02:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8005e04:	4b33      	ldr	r3, [pc, #204]	; (8005ed4 <eepromKontrol+0x4dc>)
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	2b05      	cmp	r3, #5
 8005e0a:	d902      	bls.n	8005e12 <eepromKontrol+0x41a>
	    devirmeYukariIleriTmr=0;
 8005e0c:	4b31      	ldr	r3, [pc, #196]	; (8005ed4 <eepromKontrol+0x4dc>)
 8005e0e:	2200      	movs	r2, #0
 8005e10:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8005e12:	4b31      	ldr	r3, [pc, #196]	; (8005ed8 <eepromKontrol+0x4e0>)
 8005e14:	781b      	ldrb	r3, [r3, #0]
 8005e16:	2b05      	cmp	r3, #5
 8005e18:	d902      	bls.n	8005e20 <eepromKontrol+0x428>
	    devirmeAsagiGeriTmr=0;
 8005e1a:	4b2f      	ldr	r3, [pc, #188]	; (8005ed8 <eepromKontrol+0x4e0>)
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8005e20:	4b2e      	ldr	r3, [pc, #184]	; (8005edc <eepromKontrol+0x4e4>)
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	2bb4      	cmp	r3, #180	; 0xb4
 8005e26:	d902      	bls.n	8005e2e <eepromKontrol+0x436>
	    makineCalismaTmr=60;
 8005e28:	4b2c      	ldr	r3, [pc, #176]	; (8005edc <eepromKontrol+0x4e4>)
 8005e2a:	223c      	movs	r2, #60	; 0x3c
 8005e2c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 8005e2e:	4b2c      	ldr	r3, [pc, #176]	; (8005ee0 <eepromKontrol+0x4e8>)
 8005e30:	781b      	ldrb	r3, [r3, #0]
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d902      	bls.n	8005e3c <eepromKontrol+0x444>
	    buzzer=0;
 8005e36:	4b2a      	ldr	r3, [pc, #168]	; (8005ee0 <eepromKontrol+0x4e8>)
 8005e38:	2200      	movs	r2, #0
 8005e3a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 8005e3c:	4b29      	ldr	r3, [pc, #164]	; (8005ee4 <eepromKontrol+0x4ec>)
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d902      	bls.n	8005e4a <eepromKontrol+0x452>
	    demoMode=0;
 8005e44:	4b27      	ldr	r3, [pc, #156]	; (8005ee4 <eepromKontrol+0x4ec>)
 8005e46:	2200      	movs	r2, #0
 8005e48:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 8005e4a:	4b27      	ldr	r3, [pc, #156]	; (8005ee8 <eepromKontrol+0x4f0>)
 8005e4c:	781b      	ldrb	r3, [r3, #0]
 8005e4e:	2b01      	cmp	r3, #1
 8005e50:	d902      	bls.n	8005e58 <eepromKontrol+0x460>
	    calismaSayModu=0;
 8005e52:	4b25      	ldr	r3, [pc, #148]	; (8005ee8 <eepromKontrol+0x4f0>)
 8005e54:	2200      	movs	r2, #0
 8005e56:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8005e58:	4b24      	ldr	r3, [pc, #144]	; (8005eec <eepromKontrol+0x4f4>)
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d902      	bls.n	8005e66 <eepromKontrol+0x46e>
	    dilSecim=0;
 8005e60:	4b22      	ldr	r3, [pc, #136]	; (8005eec <eepromKontrol+0x4f4>)
 8005e62:	2200      	movs	r2, #0
 8005e64:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 8005e66:	4b22      	ldr	r3, [pc, #136]	; (8005ef0 <eepromKontrol+0x4f8>)
 8005e68:	781b      	ldrb	r3, [r3, #0]
 8005e6a:	2b01      	cmp	r3, #1
 8005e6c:	d902      	bls.n	8005e74 <eepromKontrol+0x47c>
		iotMode=0;
 8005e6e:	4b20      	ldr	r3, [pc, #128]	; (8005ef0 <eepromKontrol+0x4f8>)
 8005e70:	2200      	movs	r2, #0
 8005e72:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(1000);
 8005e74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005e78:	f003 f926 	bl	80090c8 <HAL_Delay>

	if(iotMode == 1 && type == 1) {
 8005e7c:	4b1c      	ldr	r3, [pc, #112]	; (8005ef0 <eepromKontrol+0x4f8>)
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d104      	bne.n	8005e8e <eepromKontrol+0x496>
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2b01      	cmp	r3, #1
 8005e88:	d101      	bne.n	8005e8e <eepromKontrol+0x496>
		convertAndSendData();
 8005e8a:	f7ff fd81 	bl	8005990 <convertAndSendData>
	}

	saveAndConvert(0);
 8005e8e:	2000      	movs	r0, #0
 8005e90:	f002 fbe6 	bl	8008660 <saveAndConvert>
}
 8005e94:	bf00      	nop
 8005e96:	3708      	adds	r7, #8
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}
 8005e9c:	20000c62 	.word	0x20000c62
 8005ea0:	20000c53 	.word	0x20000c53
 8005ea4:	20000c63 	.word	0x20000c63
 8005ea8:	20000c54 	.word	0x20000c54
 8005eac:	20000c56 	.word	0x20000c56
 8005eb0:	20000c64 	.word	0x20000c64
 8005eb4:	20000c57 	.word	0x20000c57
 8005eb8:	20000c58 	.word	0x20000c58
 8005ebc:	20000c59 	.word	0x20000c59
 8005ec0:	20000c5a 	.word	0x20000c5a
 8005ec4:	20000c5b 	.word	0x20000c5b
 8005ec8:	20000c5c 	.word	0x20000c5c
 8005ecc:	20000c5d 	.word	0x20000c5d
 8005ed0:	20000c5e 	.word	0x20000c5e
 8005ed4:	20000c5f 	.word	0x20000c5f
 8005ed8:	20000c60 	.word	0x20000c60
 8005edc:	20000c61 	.word	0x20000c61
 8005ee0:	20000c65 	.word	0x20000c65
 8005ee4:	20000c67 	.word	0x20000c67
 8005ee8:	20000c69 	.word	0x20000c69
 8005eec:	20000c6a 	.word	0x20000c6a
 8005ef0:	20000c68 	.word	0x20000c68

08005ef4 <hata2EEPROM>:

void hata2EEPROM(uint8_t hataKodu) {
 8005ef4:	b590      	push	{r4, r7, lr}
 8005ef6:	b089      	sub	sp, #36	; 0x24
 8005ef8:	af04      	add	r7, sp, #16
 8005efa:	4603      	mov	r3, r0
 8005efc:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8005efe:	4b26      	ldr	r3, [pc, #152]	; (8005f98 <hata2EEPROM+0xa4>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	1e5a      	subs	r2, r3, #1
 8005f04:	4b25      	ldr	r3, [pc, #148]	; (8005f9c <hata2EEPROM+0xa8>)
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	4413      	add	r3, r2
 8005f0a:	4a25      	ldr	r2, [pc, #148]	; (8005fa0 <hata2EEPROM+0xac>)
 8005f0c:	5cd3      	ldrb	r3, [r2, r3]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d002      	beq.n	8005f18 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8005f12:	f000 f849 	bl	8005fa8 <eepromDataFillWithEmpty>
		goto veriEkleme;
 8005f16:	e000      	b.n	8005f1a <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8005f18:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	60fb      	str	r3, [r7, #12]
 8005f1e:	e012      	b.n	8005f46 <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8005f20:	4b1e      	ldr	r3, [pc, #120]	; (8005f9c <hata2EEPROM+0xa8>)
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	4413      	add	r3, r2
 8005f28:	4a1d      	ldr	r2, [pc, #116]	; (8005fa0 <hata2EEPROM+0xac>)
 8005f2a:	5cd3      	ldrb	r3, [r2, r3]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d107      	bne.n	8005f40 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8005f30:	4b1a      	ldr	r3, [pc, #104]	; (8005f9c <hata2EEPROM+0xa8>)
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	4413      	add	r3, r2
 8005f38:	4919      	ldr	r1, [pc, #100]	; (8005fa0 <hata2EEPROM+0xac>)
 8005f3a:	79fa      	ldrb	r2, [r7, #7]
 8005f3c:	54ca      	strb	r2, [r1, r3]
					break;
 8005f3e:	e007      	b.n	8005f50 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	3301      	adds	r3, #1
 8005f44:	60fb      	str	r3, [r7, #12]
 8005f46:	4b14      	ldr	r3, [pc, #80]	; (8005f98 <hata2EEPROM+0xa4>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	dbe7      	blt.n	8005f20 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1,0xA0,eepromHataBaslangic,indeksSayisi,&eepromData[eepromHataBaslangic],indeksSayisi,3000);
 8005f50:	4b12      	ldr	r3, [pc, #72]	; (8005f9c <hata2EEPROM+0xa8>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	b299      	uxth	r1, r3
 8005f56:	4b10      	ldr	r3, [pc, #64]	; (8005f98 <hata2EEPROM+0xa4>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	b298      	uxth	r0, r3
 8005f5c:	4b0f      	ldr	r3, [pc, #60]	; (8005f9c <hata2EEPROM+0xa8>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	4a0f      	ldr	r2, [pc, #60]	; (8005fa0 <hata2EEPROM+0xac>)
 8005f62:	4413      	add	r3, r2
 8005f64:	4a0c      	ldr	r2, [pc, #48]	; (8005f98 <hata2EEPROM+0xa4>)
 8005f66:	6812      	ldr	r2, [r2, #0]
 8005f68:	b292      	uxth	r2, r2
 8005f6a:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8005f6e:	9402      	str	r4, [sp, #8]
 8005f70:	9201      	str	r2, [sp, #4]
 8005f72:	9300      	str	r3, [sp, #0]
 8005f74:	4603      	mov	r3, r0
 8005f76:	460a      	mov	r2, r1
 8005f78:	21a0      	movs	r1, #160	; 0xa0
 8005f7a:	480a      	ldr	r0, [pc, #40]	; (8005fa4 <hata2EEPROM+0xb0>)
 8005f7c:	f004 f92e 	bl	800a1dc <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8005f80:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005f84:	f003 f8a0 	bl	80090c8 <HAL_Delay>
	eepromKontrol(1);
 8005f88:	2001      	movs	r0, #1
 8005f8a:	f7ff fd35 	bl	80059f8 <eepromKontrol>
}
 8005f8e:	bf00      	nop
 8005f90:	3714      	adds	r7, #20
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd90      	pop	{r4, r7, pc}
 8005f96:	bf00      	nop
 8005f98:	20000938 	.word	0x20000938
 8005f9c:	2000093c 	.word	0x2000093c
 8005fa0:	20000b38 	.word	0x20000b38
 8005fa4:	20000e08 	.word	0x20000e08

08005fa8 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8005fa8:	b480      	push	{r7}
 8005faa:	b083      	sub	sp, #12
 8005fac:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8005fae:	2300      	movs	r3, #0
 8005fb0:	607b      	str	r3, [r7, #4]
 8005fb2:	e009      	b.n	8005fc8 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8005fb4:	4a0a      	ldr	r2, [pc, #40]	; (8005fe0 <eepromDataFillWithEmpty+0x38>)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005fbc:	4a09      	ldr	r2, [pc, #36]	; (8005fe4 <eepromDataFillWithEmpty+0x3c>)
 8005fbe:	2100      	movs	r1, #0
 8005fc0:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	607b      	str	r3, [r7, #4]
 8005fc8:	4b07      	ldr	r3, [pc, #28]	; (8005fe8 <eepromDataFillWithEmpty+0x40>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	687a      	ldr	r2, [r7, #4]
 8005fce:	429a      	cmp	r2, r3
 8005fd0:	dbf0      	blt.n	8005fb4 <eepromDataFillWithEmpty+0xc>
	}
}
 8005fd2:	bf00      	nop
 8005fd4:	bf00      	nop
 8005fd6:	370c      	adds	r7, #12
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bc80      	pop	{r7}
 8005fdc:	4770      	bx	lr
 8005fde:	bf00      	nop
 8005fe0:	20000910 	.word	0x20000910
 8005fe4:	20000b38 	.word	0x20000b38
 8005fe8:	20000938 	.word	0x20000938

08005fec <bekle>:
		return 1;
	}
	return 0;
}

void bekle() {
 8005fec:	b580      	push	{r7, lr}
 8005fee:	af00      	add	r7, sp, #0
	timer1=millis;
 8005ff0:	4b47      	ldr	r3, [pc, #284]	; (8006110 <bekle+0x124>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a47      	ldr	r2, [pc, #284]	; (8006114 <bekle+0x128>)
 8005ff6:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005ff8:	e002      	b.n	8006000 <bekle+0x14>
    	butonKontrol = 1;
 8005ffa:	4b47      	ldr	r3, [pc, #284]	; (8006118 <bekle+0x12c>)
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006000:	2101      	movs	r1, #1
 8006002:	4846      	ldr	r0, [pc, #280]	; (800611c <bekle+0x130>)
 8006004:	f003 fe30 	bl	8009c68 <HAL_GPIO_ReadPin>
 8006008:	4603      	mov	r3, r0
 800600a:	2b01      	cmp	r3, #1
 800600c:	d109      	bne.n	8006022 <bekle+0x36>
 800600e:	4b40      	ldr	r3, [pc, #256]	; (8006110 <bekle+0x124>)
 8006010:	681a      	ldr	r2, [r3, #0]
 8006012:	4b40      	ldr	r3, [pc, #256]	; (8006114 <bekle+0x128>)
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	429a      	cmp	r2, r3
 8006018:	d0ef      	beq.n	8005ffa <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800601a:	e002      	b.n	8006022 <bekle+0x36>
    	butonKontrol = 1;
 800601c:	4b3e      	ldr	r3, [pc, #248]	; (8006118 <bekle+0x12c>)
 800601e:	2201      	movs	r2, #1
 8006020:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006022:	2108      	movs	r1, #8
 8006024:	483e      	ldr	r0, [pc, #248]	; (8006120 <bekle+0x134>)
 8006026:	f003 fe1f 	bl	8009c68 <HAL_GPIO_ReadPin>
 800602a:	4603      	mov	r3, r0
 800602c:	2b01      	cmp	r3, #1
 800602e:	d109      	bne.n	8006044 <bekle+0x58>
 8006030:	4b37      	ldr	r3, [pc, #220]	; (8006110 <bekle+0x124>)
 8006032:	681a      	ldr	r2, [r3, #0]
 8006034:	4b37      	ldr	r3, [pc, #220]	; (8006114 <bekle+0x128>)
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	429a      	cmp	r2, r3
 800603a:	d0ef      	beq.n	800601c <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800603c:	e002      	b.n	8006044 <bekle+0x58>
    	butonKontrol = 1;
 800603e:	4b36      	ldr	r3, [pc, #216]	; (8006118 <bekle+0x12c>)
 8006040:	2201      	movs	r2, #1
 8006042:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006044:	2102      	movs	r1, #2
 8006046:	4835      	ldr	r0, [pc, #212]	; (800611c <bekle+0x130>)
 8006048:	f003 fe0e 	bl	8009c68 <HAL_GPIO_ReadPin>
 800604c:	4603      	mov	r3, r0
 800604e:	2b01      	cmp	r3, #1
 8006050:	d109      	bne.n	8006066 <bekle+0x7a>
 8006052:	4b2f      	ldr	r3, [pc, #188]	; (8006110 <bekle+0x124>)
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	4b2f      	ldr	r3, [pc, #188]	; (8006114 <bekle+0x128>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	429a      	cmp	r2, r3
 800605c:	d0ef      	beq.n	800603e <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800605e:	e002      	b.n	8006066 <bekle+0x7a>
    	butonKontrol = 1;
 8006060:	4b2d      	ldr	r3, [pc, #180]	; (8006118 <bekle+0x12c>)
 8006062:	2201      	movs	r2, #1
 8006064:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006066:	2104      	movs	r1, #4
 8006068:	482c      	ldr	r0, [pc, #176]	; (800611c <bekle+0x130>)
 800606a:	f003 fdfd 	bl	8009c68 <HAL_GPIO_ReadPin>
 800606e:	4603      	mov	r3, r0
 8006070:	2b01      	cmp	r3, #1
 8006072:	d109      	bne.n	8006088 <bekle+0x9c>
 8006074:	4b26      	ldr	r3, [pc, #152]	; (8006110 <bekle+0x124>)
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	4b26      	ldr	r3, [pc, #152]	; (8006114 <bekle+0x128>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	429a      	cmp	r2, r3
 800607e:	d0ef      	beq.n	8006060 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006080:	e002      	b.n	8006088 <bekle+0x9c>
    	butonKontrol = 1;
 8006082:	4b25      	ldr	r3, [pc, #148]	; (8006118 <bekle+0x12c>)
 8006084:	2201      	movs	r2, #1
 8006086:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006088:	2108      	movs	r1, #8
 800608a:	4824      	ldr	r0, [pc, #144]	; (800611c <bekle+0x130>)
 800608c:	f003 fdec 	bl	8009c68 <HAL_GPIO_ReadPin>
 8006090:	4603      	mov	r3, r0
 8006092:	2b01      	cmp	r3, #1
 8006094:	d109      	bne.n	80060aa <bekle+0xbe>
 8006096:	4b1e      	ldr	r3, [pc, #120]	; (8006110 <bekle+0x124>)
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	4b1e      	ldr	r3, [pc, #120]	; (8006114 <bekle+0x128>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	429a      	cmp	r2, r3
 80060a0:	d0ef      	beq.n	8006082 <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80060a2:	e002      	b.n	80060aa <bekle+0xbe>
    	butonKontrol = 1;
 80060a4:	4b1c      	ldr	r3, [pc, #112]	; (8006118 <bekle+0x12c>)
 80060a6:	2201      	movs	r2, #1
 80060a8:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80060aa:	2180      	movs	r1, #128	; 0x80
 80060ac:	481c      	ldr	r0, [pc, #112]	; (8006120 <bekle+0x134>)
 80060ae:	f003 fddb 	bl	8009c68 <HAL_GPIO_ReadPin>
 80060b2:	4603      	mov	r3, r0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d109      	bne.n	80060cc <bekle+0xe0>
 80060b8:	4b15      	ldr	r3, [pc, #84]	; (8006110 <bekle+0x124>)
 80060ba:	681a      	ldr	r2, [r3, #0]
 80060bc:	4b15      	ldr	r3, [pc, #84]	; (8006114 <bekle+0x128>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	429a      	cmp	r2, r3
 80060c2:	d0ef      	beq.n	80060a4 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80060c4:	e002      	b.n	80060cc <bekle+0xe0>
    	butonKontrol = 1;
 80060c6:	4b14      	ldr	r3, [pc, #80]	; (8006118 <bekle+0x12c>)
 80060c8:	2201      	movs	r2, #1
 80060ca:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80060cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80060d0:	4813      	ldr	r0, [pc, #76]	; (8006120 <bekle+0x134>)
 80060d2:	f003 fdc9 	bl	8009c68 <HAL_GPIO_ReadPin>
 80060d6:	4603      	mov	r3, r0
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d109      	bne.n	80060f0 <bekle+0x104>
 80060dc:	4b0c      	ldr	r3, [pc, #48]	; (8006110 <bekle+0x124>)
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	4b0c      	ldr	r3, [pc, #48]	; (8006114 <bekle+0x128>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d0ee      	beq.n	80060c6 <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 80060e8:	e002      	b.n	80060f0 <bekle+0x104>
    	butonKontrol = 1;
 80060ea:	4b0b      	ldr	r3, [pc, #44]	; (8006118 <bekle+0x12c>)
 80060ec:	2201      	movs	r2, #1
 80060ee:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 80060f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80060f4:	480a      	ldr	r0, [pc, #40]	; (8006120 <bekle+0x134>)
 80060f6:	f003 fdb7 	bl	8009c68 <HAL_GPIO_ReadPin>
 80060fa:	4603      	mov	r3, r0
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d105      	bne.n	800610c <bekle+0x120>
 8006100:	4b03      	ldr	r3, [pc, #12]	; (8006110 <bekle+0x124>)
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	4b03      	ldr	r3, [pc, #12]	; (8006114 <bekle+0x128>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	429a      	cmp	r2, r3
 800610a:	d0ee      	beq.n	80060ea <bekle+0xfe>
    }

}
 800610c:	bf00      	nop
 800610e:	bd80      	pop	{r7, pc}
 8006110:	20000bd4 	.word	0x20000bd4
 8006114:	20000bdc 	.word	0x20000bdc
 8006118:	20000c78 	.word	0x20000c78
 800611c:	40010800 	.word	0x40010800
 8006120:	40011000 	.word	0x40011000

08006124 <i2cTest>:

void i2cTest() {
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 800612a:	463b      	mov	r3, r7
 800612c:	2200      	movs	r2, #0
 800612e:	601a      	str	r2, [r3, #0]
 8006130:	605a      	str	r2, [r3, #4]
 8006132:	609a      	str	r2, [r3, #8]
 8006134:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 8006136:	4b50      	ldr	r3, [pc, #320]	; (8006278 <i2cTest+0x154>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	4b4e      	ldr	r3, [pc, #312]	; (8006278 <i2cTest+0x154>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f022 0201 	bic.w	r2, r2, #1
 8006144:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 8006146:	484c      	ldr	r0, [pc, #304]	; (8006278 <i2cTest+0x154>)
 8006148:	f003 ff1a 	bl	8009f80 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800614c:	23c0      	movs	r3, #192	; 0xc0
 800614e:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8006150:	2311      	movs	r3, #17
 8006152:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8006154:	2301      	movs	r3, #1
 8006156:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8006158:	2303      	movs	r3, #3
 800615a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 800615c:	463b      	mov	r3, r7
 800615e:	4619      	mov	r1, r3
 8006160:	4846      	ldr	r0, [pc, #280]	; (800627c <i2cTest+0x158>)
 8006162:	f003 fb21 	bl	80097a8 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8006166:	2201      	movs	r2, #1
 8006168:	2140      	movs	r1, #64	; 0x40
 800616a:	4844      	ldr	r0, [pc, #272]	; (800627c <i2cTest+0x158>)
 800616c:	f003 fd93 	bl	8009c96 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8006170:	2201      	movs	r2, #1
 8006172:	2180      	movs	r1, #128	; 0x80
 8006174:	4841      	ldr	r0, [pc, #260]	; (800627c <i2cTest+0x158>)
 8006176:	f003 fd8e 	bl	8009c96 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 800617a:	200a      	movs	r0, #10
 800617c:	f002 ffa4 	bl	80090c8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8006180:	bf00      	nop
 8006182:	2140      	movs	r1, #64	; 0x40
 8006184:	483d      	ldr	r0, [pc, #244]	; (800627c <i2cTest+0x158>)
 8006186:	f003 fd6f 	bl	8009c68 <HAL_GPIO_ReadPin>
 800618a:	4603      	mov	r3, r0
 800618c:	2b01      	cmp	r3, #1
 800618e:	d006      	beq.n	800619e <i2cTest+0x7a>
 8006190:	2180      	movs	r1, #128	; 0x80
 8006192:	483a      	ldr	r0, [pc, #232]	; (800627c <i2cTest+0x158>)
 8006194:	f003 fd68 	bl	8009c68 <HAL_GPIO_ReadPin>
 8006198:	4603      	mov	r3, r0
 800619a:	2b01      	cmp	r3, #1
 800619c:	d1f1      	bne.n	8006182 <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800619e:	2200      	movs	r2, #0
 80061a0:	2180      	movs	r1, #128	; 0x80
 80061a2:	4836      	ldr	r0, [pc, #216]	; (800627c <i2cTest+0x158>)
 80061a4:	f003 fd77 	bl	8009c96 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 80061a8:	200a      	movs	r0, #10
 80061aa:	f002 ff8d 	bl	80090c8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 80061ae:	bf00      	nop
 80061b0:	2180      	movs	r1, #128	; 0x80
 80061b2:	4832      	ldr	r0, [pc, #200]	; (800627c <i2cTest+0x158>)
 80061b4:	f003 fd58 	bl	8009c68 <HAL_GPIO_ReadPin>
 80061b8:	4603      	mov	r3, r0
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d0f8      	beq.n	80061b0 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80061be:	2200      	movs	r2, #0
 80061c0:	2140      	movs	r1, #64	; 0x40
 80061c2:	482e      	ldr	r0, [pc, #184]	; (800627c <i2cTest+0x158>)
 80061c4:	f003 fd67 	bl	8009c96 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 80061c8:	200a      	movs	r0, #10
 80061ca:	f002 ff7d 	bl	80090c8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 80061ce:	bf00      	nop
 80061d0:	2140      	movs	r1, #64	; 0x40
 80061d2:	482a      	ldr	r0, [pc, #168]	; (800627c <i2cTest+0x158>)
 80061d4:	f003 fd48 	bl	8009c68 <HAL_GPIO_ReadPin>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d0f8      	beq.n	80061d0 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80061de:	2201      	movs	r2, #1
 80061e0:	2140      	movs	r1, #64	; 0x40
 80061e2:	4826      	ldr	r0, [pc, #152]	; (800627c <i2cTest+0x158>)
 80061e4:	f003 fd57 	bl	8009c96 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 80061e8:	200a      	movs	r0, #10
 80061ea:	f002 ff6d 	bl	80090c8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 80061ee:	bf00      	nop
 80061f0:	2140      	movs	r1, #64	; 0x40
 80061f2:	4822      	ldr	r0, [pc, #136]	; (800627c <i2cTest+0x158>)
 80061f4:	f003 fd38 	bl	8009c68 <HAL_GPIO_ReadPin>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d1f8      	bne.n	80061f0 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80061fe:	2201      	movs	r2, #1
 8006200:	2180      	movs	r1, #128	; 0x80
 8006202:	481e      	ldr	r0, [pc, #120]	; (800627c <i2cTest+0x158>)
 8006204:	f003 fd47 	bl	8009c96 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8006208:	200a      	movs	r0, #10
 800620a:	f002 ff5d 	bl	80090c8 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 800620e:	bf00      	nop
 8006210:	2180      	movs	r1, #128	; 0x80
 8006212:	481a      	ldr	r0, [pc, #104]	; (800627c <i2cTest+0x158>)
 8006214:	f003 fd28 	bl	8009c68 <HAL_GPIO_ReadPin>
 8006218:	4603      	mov	r3, r0
 800621a:	2b01      	cmp	r3, #1
 800621c:	d1f8      	bne.n	8006210 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800621e:	23c0      	movs	r3, #192	; 0xc0
 8006220:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8006222:	2312      	movs	r3, #18
 8006224:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8006226:	2301      	movs	r3, #1
 8006228:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 800622a:	2303      	movs	r3, #3
 800622c:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 800622e:	463b      	mov	r3, r7
 8006230:	4619      	mov	r1, r3
 8006232:	4812      	ldr	r0, [pc, #72]	; (800627c <i2cTest+0x158>)
 8006234:	f003 fab8 	bl	80097a8 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8006238:	4b0f      	ldr	r3, [pc, #60]	; (8006278 <i2cTest+0x154>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681a      	ldr	r2, [r3, #0]
 800623e:	4b0e      	ldr	r3, [pc, #56]	; (8006278 <i2cTest+0x154>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006246:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8006248:	4b0b      	ldr	r3, [pc, #44]	; (8006278 <i2cTest+0x154>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	4b0a      	ldr	r3, [pc, #40]	; (8006278 <i2cTest+0x154>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006256:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8006258:	4b07      	ldr	r3, [pc, #28]	; (8006278 <i2cTest+0x154>)
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	4b06      	ldr	r3, [pc, #24]	; (8006278 <i2cTest+0x154>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f042 0201 	orr.w	r2, r2, #1
 8006266:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8006268:	4803      	ldr	r0, [pc, #12]	; (8006278 <i2cTest+0x154>)
 800626a:	f003 fd45 	bl	8009cf8 <HAL_I2C_Init>
}
 800626e:	bf00      	nop
 8006270:	3710      	adds	r7, #16
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	20000e08 	.word	0x20000e08
 800627c:	40010c00 	.word	0x40010c00

08006280 <checkLCDBacklight>:

void checkLCDBacklight() {
 8006280:	b580      	push	{r7, lr}
 8006282:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8006284:	4b0b      	ldr	r3, [pc, #44]	; (80062b4 <checkLCDBacklight+0x34>)
 8006286:	681a      	ldr	r2, [r3, #0]
 8006288:	4b0b      	ldr	r3, [pc, #44]	; (80062b8 <checkLCDBacklight+0x38>)
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	1ad2      	subs	r2, r2, r3
 800628e:	4b0b      	ldr	r3, [pc, #44]	; (80062bc <checkLCDBacklight+0x3c>)
 8006290:	781b      	ldrb	r3, [r3, #0]
 8006292:	4619      	mov	r1, r3
 8006294:	460b      	mov	r3, r1
 8006296:	009b      	lsls	r3, r3, #2
 8006298:	440b      	add	r3, r1
 800629a:	005b      	lsls	r3, r3, #1
 800629c:	429a      	cmp	r2, r3
 800629e:	d303      	bcc.n	80062a8 <checkLCDBacklight+0x28>
		lcd_backlight(0);
 80062a0:	2000      	movs	r0, #0
 80062a2:	f7fa fa2d 	bl	8000700 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 80062a6:	e002      	b.n	80062ae <checkLCDBacklight+0x2e>
		lcd_backlight(1);
 80062a8:	2001      	movs	r0, #1
 80062aa:	f7fa fa29 	bl	8000700 <lcd_backlight>
}
 80062ae:	bf00      	nop
 80062b0:	bd80      	pop	{r7, pc}
 80062b2:	bf00      	nop
 80062b4:	20000bd4 	.word	0x20000bd4
 80062b8:	20000bf0 	.word	0x20000bf0
 80062bc:	20000940 	.word	0x20000940

080062c0 <checkBasincSalteri>:

void checkBasincSalteri() {
 80062c0:	b580      	push	{r7, lr}
 80062c2:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 80062c4:	4b13      	ldr	r3, [pc, #76]	; (8006314 <checkBasincSalteri+0x54>)
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d102      	bne.n	80062d2 <checkBasincSalteri+0x12>
		basincVar=1;
 80062cc:	4b12      	ldr	r3, [pc, #72]	; (8006318 <checkBasincSalteri+0x58>)
 80062ce:	2201      	movs	r2, #1
 80062d0:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 80062d2:	4b10      	ldr	r3, [pc, #64]	; (8006314 <checkBasincSalteri+0x54>)
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	2b01      	cmp	r3, #1
 80062d8:	d119      	bne.n	800630e <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 80062da:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80062de:	480f      	ldr	r0, [pc, #60]	; (800631c <checkBasincSalteri+0x5c>)
 80062e0:	f003 fcc2 	bl	8009c68 <HAL_GPIO_ReadPin>
 80062e4:	4603      	mov	r3, r0
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d10a      	bne.n	8006300 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 80062ea:	4b0d      	ldr	r3, [pc, #52]	; (8006320 <checkBasincSalteri+0x60>)
 80062ec:	681a      	ldr	r2, [r3, #0]
 80062ee:	4b0d      	ldr	r3, [pc, #52]	; (8006324 <checkBasincSalteri+0x64>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	1ad3      	subs	r3, r2, r3
 80062f4:	2b02      	cmp	r3, #2
 80062f6:	d90a      	bls.n	800630e <checkBasincSalteri+0x4e>
				basincVar=1;
 80062f8:	4b07      	ldr	r3, [pc, #28]	; (8006318 <checkBasincSalteri+0x58>)
 80062fa:	2201      	movs	r2, #1
 80062fc:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 80062fe:	e006      	b.n	800630e <checkBasincSalteri+0x4e>
			timer5=millis;
 8006300:	4b07      	ldr	r3, [pc, #28]	; (8006320 <checkBasincSalteri+0x60>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a07      	ldr	r2, [pc, #28]	; (8006324 <checkBasincSalteri+0x64>)
 8006306:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8006308:	4b03      	ldr	r3, [pc, #12]	; (8006318 <checkBasincSalteri+0x58>)
 800630a:	2200      	movs	r2, #0
 800630c:	701a      	strb	r2, [r3, #0]
}
 800630e:	bf00      	nop
 8006310:	bd80      	pop	{r7, pc}
 8006312:	bf00      	nop
 8006314:	20000c50 	.word	0x20000c50
 8006318:	20000c4c 	.word	0x20000c4c
 800631c:	40011000 	.word	0x40011000
 8006320:	20000bd4 	.word	0x20000bd4
 8006324:	20000bec 	.word	0x20000bec

08006328 <checkBasGonder>:

void checkBasGonder() {
 8006328:	b480      	push	{r7}
 800632a:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 800632c:	4b1b      	ldr	r3, [pc, #108]	; (800639c <checkBasGonder+0x74>)
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	2b01      	cmp	r3, #1
 8006332:	d10b      	bne.n	800634c <checkBasGonder+0x24>
 8006334:	4b1a      	ldr	r3, [pc, #104]	; (80063a0 <checkBasGonder+0x78>)
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d007      	beq.n	800634c <checkBasGonder+0x24>
 800633c:	4b19      	ldr	r3, [pc, #100]	; (80063a4 <checkBasGonder+0x7c>)
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d103      	bne.n	800634c <checkBasGonder+0x24>
		basgondercalisyukari=1;
 8006344:	4b18      	ldr	r3, [pc, #96]	; (80063a8 <checkBasGonder+0x80>)
 8006346:	2201      	movs	r2, #1
 8006348:	701a      	strb	r2, [r3, #0]
 800634a:	e009      	b.n	8006360 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 800634c:	4b14      	ldr	r3, [pc, #80]	; (80063a0 <checkBasGonder+0x78>)
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	f083 0301 	eor.w	r3, r3, #1
 8006354:	b2db      	uxtb	r3, r3
 8006356:	2b00      	cmp	r3, #0
 8006358:	d002      	beq.n	8006360 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 800635a:	4b13      	ldr	r3, [pc, #76]	; (80063a8 <checkBasGonder+0x80>)
 800635c:	2200      	movs	r2, #0
 800635e:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8006360:	4b0e      	ldr	r3, [pc, #56]	; (800639c <checkBasGonder+0x74>)
 8006362:	781b      	ldrb	r3, [r3, #0]
 8006364:	2b01      	cmp	r3, #1
 8006366:	d10b      	bne.n	8006380 <checkBasGonder+0x58>
 8006368:	4b10      	ldr	r3, [pc, #64]	; (80063ac <checkBasGonder+0x84>)
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d007      	beq.n	8006380 <checkBasGonder+0x58>
 8006370:	4b0c      	ldr	r3, [pc, #48]	; (80063a4 <checkBasGonder+0x7c>)
 8006372:	781b      	ldrb	r3, [r3, #0]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d103      	bne.n	8006380 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8006378:	4b0d      	ldr	r3, [pc, #52]	; (80063b0 <checkBasGonder+0x88>)
 800637a:	2201      	movs	r2, #1
 800637c:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 800637e:	e009      	b.n	8006394 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8006380:	4b0a      	ldr	r3, [pc, #40]	; (80063ac <checkBasGonder+0x84>)
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	f083 0301 	eor.w	r3, r3, #1
 8006388:	b2db      	uxtb	r3, r3
 800638a:	2b00      	cmp	r3, #0
 800638c:	d002      	beq.n	8006394 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 800638e:	4b08      	ldr	r3, [pc, #32]	; (80063b0 <checkBasGonder+0x88>)
 8006390:	2200      	movs	r2, #0
 8006392:	701a      	strb	r2, [r3, #0]
}
 8006394:	bf00      	nop
 8006396:	46bd      	mov	sp, r7
 8006398:	bc80      	pop	{r7}
 800639a:	4770      	bx	lr
 800639c:	20000c4a 	.word	0x20000c4a
 80063a0:	20000c7e 	.word	0x20000c7e
 80063a4:	20000c58 	.word	0x20000c58
 80063a8:	20000c85 	.word	0x20000c85
 80063ac:	20000c81 	.word	0x20000c81
 80063b0:	20000c86 	.word	0x20000c86

080063b4 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 80063b4:	b580      	push	{r7, lr}
 80063b6:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 80063b8:	4b24      	ldr	r3, [pc, #144]	; (800644c <checkKapiSecimleri+0x98>)
 80063ba:	781b      	ldrb	r3, [r3, #0]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d102      	bne.n	80063c6 <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 80063c0:	4b23      	ldr	r3, [pc, #140]	; (8006450 <checkKapiSecimleri+0x9c>)
 80063c2:	2201      	movs	r2, #1
 80063c4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 80063c6:	4b21      	ldr	r3, [pc, #132]	; (800644c <checkKapiSecimleri+0x98>)
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	d10e      	bne.n	80063ec <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 80063ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80063d2:	4820      	ldr	r0, [pc, #128]	; (8006454 <checkKapiSecimleri+0xa0>)
 80063d4:	f003 fc48 	bl	8009c68 <HAL_GPIO_ReadPin>
 80063d8:	4603      	mov	r3, r0
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d103      	bne.n	80063e6 <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 80063de:	4b1c      	ldr	r3, [pc, #112]	; (8006450 <checkKapiSecimleri+0x9c>)
 80063e0:	2201      	movs	r2, #1
 80063e2:	701a      	strb	r2, [r3, #0]
 80063e4:	e002      	b.n	80063ec <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 80063e6:	4b1a      	ldr	r3, [pc, #104]	; (8006450 <checkKapiSecimleri+0x9c>)
 80063e8:	2200      	movs	r2, #0
 80063ea:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 80063ec:	4b17      	ldr	r3, [pc, #92]	; (800644c <checkKapiSecimleri+0x98>)
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	2b02      	cmp	r3, #2
 80063f2:	d10e      	bne.n	8006412 <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 80063f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80063f8:	4816      	ldr	r0, [pc, #88]	; (8006454 <checkKapiSecimleri+0xa0>)
 80063fa:	f003 fc35 	bl	8009c68 <HAL_GPIO_ReadPin>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d103      	bne.n	800640c <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8006404:	4b12      	ldr	r3, [pc, #72]	; (8006450 <checkKapiSecimleri+0x9c>)
 8006406:	2201      	movs	r2, #1
 8006408:	701a      	strb	r2, [r3, #0]
 800640a:	e002      	b.n	8006412 <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 800640c:	4b10      	ldr	r3, [pc, #64]	; (8006450 <checkKapiSecimleri+0x9c>)
 800640e:	2200      	movs	r2, #0
 8006410:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8006412:	4b0e      	ldr	r3, [pc, #56]	; (800644c <checkKapiSecimleri+0x98>)
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	2b03      	cmp	r3, #3
 8006418:	d116      	bne.n	8006448 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 800641a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800641e:	480d      	ldr	r0, [pc, #52]	; (8006454 <checkKapiSecimleri+0xa0>)
 8006420:	f003 fc22 	bl	8009c68 <HAL_GPIO_ReadPin>
 8006424:	4603      	mov	r3, r0
 8006426:	2b00      	cmp	r3, #0
 8006428:	d10b      	bne.n	8006442 <checkKapiSecimleri+0x8e>
 800642a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800642e:	4809      	ldr	r0, [pc, #36]	; (8006454 <checkKapiSecimleri+0xa0>)
 8006430:	f003 fc1a 	bl	8009c68 <HAL_GPIO_ReadPin>
 8006434:	4603      	mov	r3, r0
 8006436:	2b00      	cmp	r3, #0
 8006438:	d103      	bne.n	8006442 <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 800643a:	4b05      	ldr	r3, [pc, #20]	; (8006450 <checkKapiSecimleri+0x9c>)
 800643c:	2201      	movs	r2, #1
 800643e:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8006440:	e002      	b.n	8006448 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 8006442:	4b03      	ldr	r3, [pc, #12]	; (8006450 <checkKapiSecimleri+0x9c>)
 8006444:	2200      	movs	r2, #0
 8006446:	701a      	strb	r2, [r3, #0]
}
 8006448:	bf00      	nop
 800644a:	bd80      	pop	{r7, pc}
 800644c:	20000c51 	.word	0x20000c51
 8006450:	20000c9c 	.word	0x20000c9c
 8006454:	40010800 	.word	0x40010800

08006458 <checkAktifCalisma>:

void checkAktifCalisma() {
 8006458:	b580      	push	{r7, lr}
 800645a:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 800645c:	4b62      	ldr	r3, [pc, #392]	; (80065e8 <checkAktifCalisma+0x190>)
 800645e:	781b      	ldrb	r3, [r3, #0]
 8006460:	2b00      	cmp	r3, #0
 8006462:	f041 8332 	bne.w	8007aca <checkAktifCalisma+0x1672>
 8006466:	4b61      	ldr	r3, [pc, #388]	; (80065ec <checkAktifCalisma+0x194>)
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	2b00      	cmp	r3, #0
 800646c:	f041 832d 	bne.w	8007aca <checkAktifCalisma+0x1672>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8006470:	4b5f      	ldr	r3, [pc, #380]	; (80065f0 <checkAktifCalisma+0x198>)
 8006472:	781b      	ldrb	r3, [r3, #0]
 8006474:	2b00      	cmp	r3, #0
 8006476:	d11a      	bne.n	80064ae <checkAktifCalisma+0x56>
 8006478:	4b5e      	ldr	r3, [pc, #376]	; (80065f4 <checkAktifCalisma+0x19c>)
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d116      	bne.n	80064ae <checkAktifCalisma+0x56>
 8006480:	4b5d      	ldr	r3, [pc, #372]	; (80065f8 <checkAktifCalisma+0x1a0>)
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d00a      	beq.n	800649e <checkAktifCalisma+0x46>
 8006488:	4b5c      	ldr	r3, [pc, #368]	; (80065fc <checkAktifCalisma+0x1a4>)
 800648a:	781b      	ldrb	r3, [r3, #0]
 800648c:	f083 0301 	eor.w	r3, r3, #1
 8006490:	b2db      	uxtb	r3, r3
 8006492:	2b00      	cmp	r3, #0
 8006494:	d003      	beq.n	800649e <checkAktifCalisma+0x46>
 8006496:	4b5a      	ldr	r3, [pc, #360]	; (8006600 <checkAktifCalisma+0x1a8>)
 8006498:	781b      	ldrb	r3, [r3, #0]
 800649a:	2b01      	cmp	r3, #1
 800649c:	d007      	beq.n	80064ae <checkAktifCalisma+0x56>
 800649e:	4b59      	ldr	r3, [pc, #356]	; (8006604 <checkAktifCalisma+0x1ac>)
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d018      	beq.n	80064d8 <checkAktifCalisma+0x80>
 80064a6:	4b58      	ldr	r3, [pc, #352]	; (8006608 <checkAktifCalisma+0x1b0>)
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	2b01      	cmp	r3, #1
 80064ac:	d114      	bne.n	80064d8 <checkAktifCalisma+0x80>
 80064ae:	4b57      	ldr	r3, [pc, #348]	; (800660c <checkAktifCalisma+0x1b4>)
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d010      	beq.n	80064d8 <checkAktifCalisma+0x80>
 80064b6:	4b56      	ldr	r3, [pc, #344]	; (8006610 <checkAktifCalisma+0x1b8>)
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d00c      	beq.n	80064d8 <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 80064be:	2201      	movs	r2, #1
 80064c0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80064c4:	4853      	ldr	r0, [pc, #332]	; (8006614 <checkAktifCalisma+0x1bc>)
 80064c6:	f003 fbe6 	bl	8009c96 <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 80064ca:	4b53      	ldr	r3, [pc, #332]	; (8006618 <checkAktifCalisma+0x1c0>)
 80064cc:	2201      	movs	r2, #1
 80064ce:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 80064d0:	4b52      	ldr	r3, [pc, #328]	; (800661c <checkAktifCalisma+0x1c4>)
 80064d2:	2201      	movs	r2, #1
 80064d4:	701a      	strb	r2, [r3, #0]
 80064d6:	e008      	b.n	80064ea <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80064d8:	2200      	movs	r2, #0
 80064da:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80064de:	484d      	ldr	r0, [pc, #308]	; (8006614 <checkAktifCalisma+0x1bc>)
 80064e0:	f003 fbd9 	bl	8009c96 <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 80064e4:	4b4c      	ldr	r3, [pc, #304]	; (8006618 <checkAktifCalisma+0x1c0>)
 80064e6:	2200      	movs	r2, #0
 80064e8:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 80064ea:	4b40      	ldr	r3, [pc, #256]	; (80065ec <checkAktifCalisma+0x194>)
 80064ec:	781b      	ldrb	r3, [r3, #0]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d160      	bne.n	80065b4 <checkAktifCalisma+0x15c>
 80064f2:	4b46      	ldr	r3, [pc, #280]	; (800660c <checkAktifCalisma+0x1b4>)
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d05c      	beq.n	80065b4 <checkAktifCalisma+0x15c>
 80064fa:	4b45      	ldr	r3, [pc, #276]	; (8006610 <checkAktifCalisma+0x1b8>)
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d058      	beq.n	80065b4 <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8006502:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006506:	4843      	ldr	r0, [pc, #268]	; (8006614 <checkAktifCalisma+0x1bc>)
 8006508:	f003 fbae 	bl	8009c68 <HAL_GPIO_ReadPin>
 800650c:	4603      	mov	r3, r0
 800650e:	2b00      	cmp	r3, #0
 8006510:	d003      	beq.n	800651a <checkAktifCalisma+0xc2>
 8006512:	4b43      	ldr	r3, [pc, #268]	; (8006620 <checkAktifCalisma+0x1c8>)
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d04c      	beq.n	80065b4 <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800651a:	2102      	movs	r1, #2
 800651c:	4841      	ldr	r0, [pc, #260]	; (8006624 <checkAktifCalisma+0x1cc>)
 800651e:	f003 fba3 	bl	8009c68 <HAL_GPIO_ReadPin>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d145      	bne.n	80065b4 <checkAktifCalisma+0x15c>
				&& (basincVar)
 8006528:	4b3f      	ldr	r3, [pc, #252]	; (8006628 <checkAktifCalisma+0x1d0>)
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d041      	beq.n	80065b4 <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8006530:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006534:	4837      	ldr	r0, [pc, #220]	; (8006614 <checkAktifCalisma+0x1bc>)
 8006536:	f003 fb97 	bl	8009c68 <HAL_GPIO_ReadPin>
 800653a:	4603      	mov	r3, r0
 800653c:	2b01      	cmp	r3, #1
 800653e:	d10e      	bne.n	800655e <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8006540:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006544:	4833      	ldr	r0, [pc, #204]	; (8006614 <checkAktifCalisma+0x1bc>)
 8006546:	f003 fb8f 	bl	8009c68 <HAL_GPIO_ReadPin>
 800654a:	4603      	mov	r3, r0
 800654c:	2b01      	cmp	r3, #1
 800654e:	d106      	bne.n	800655e <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8006550:	2140      	movs	r1, #64	; 0x40
 8006552:	4834      	ldr	r0, [pc, #208]	; (8006624 <checkAktifCalisma+0x1cc>)
 8006554:	f003 fb88 	bl	8009c68 <HAL_GPIO_ReadPin>
 8006558:	4603      	mov	r3, r0
 800655a:	2b01      	cmp	r3, #1
 800655c:	d003      	beq.n	8006566 <checkAktifCalisma+0x10e>
 800655e:	4b24      	ldr	r3, [pc, #144]	; (80065f0 <checkAktifCalisma+0x198>)
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d026      	beq.n	80065b4 <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 8006566:	4b24      	ldr	r3, [pc, #144]	; (80065f8 <checkAktifCalisma+0x1a0>)
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	f083 0301 	eor.w	r3, r3, #1
 800656e:	b2db      	uxtb	r3, r3
 8006570:	2b00      	cmp	r3, #0
 8006572:	d01f      	beq.n	80065b4 <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8006574:	4b1f      	ldr	r3, [pc, #124]	; (80065f4 <checkAktifCalisma+0x19c>)
 8006576:	781b      	ldrb	r3, [r3, #0]
 8006578:	f083 0301 	eor.w	r3, r3, #1
 800657c:	b2db      	uxtb	r3, r3
 800657e:	2b00      	cmp	r3, #0
 8006580:	d018      	beq.n	80065b4 <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 8006582:	4b20      	ldr	r3, [pc, #128]	; (8006604 <checkAktifCalisma+0x1ac>)
 8006584:	781b      	ldrb	r3, [r3, #0]
 8006586:	f083 0301 	eor.w	r3, r3, #1
 800658a:	b2db      	uxtb	r3, r3
 800658c:	2b00      	cmp	r3, #0
 800658e:	d011      	beq.n	80065b4 <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 8006590:	4b26      	ldr	r3, [pc, #152]	; (800662c <checkAktifCalisma+0x1d4>)
 8006592:	781b      	ldrb	r3, [r3, #0]
 8006594:	f083 0301 	eor.w	r3, r3, #1
 8006598:	b2db      	uxtb	r3, r3
 800659a:	2b00      	cmp	r3, #0
 800659c:	d00a      	beq.n	80065b4 <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 800659e:	4b24      	ldr	r3, [pc, #144]	; (8006630 <checkAktifCalisma+0x1d8>)
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	f083 0301 	eor.w	r3, r3, #1
 80065a6:	b2db      	uxtb	r3, r3
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d003      	beq.n	80065b4 <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 80065ac:	4b10      	ldr	r3, [pc, #64]	; (80065f0 <checkAktifCalisma+0x198>)
 80065ae:	2201      	movs	r2, #1
 80065b0:	701a      	strb	r2, [r3, #0]
 80065b2:	e002      	b.n	80065ba <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 80065b4:	4b0e      	ldr	r3, [pc, #56]	; (80065f0 <checkAktifCalisma+0x198>)
 80065b6:	2200      	movs	r2, #0
 80065b8:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 80065ba:	4b0d      	ldr	r3, [pc, #52]	; (80065f0 <checkAktifCalisma+0x198>)
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d03a      	beq.n	8006638 <checkAktifCalisma+0x1e0>
 80065c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80065c6:	4817      	ldr	r0, [pc, #92]	; (8006624 <checkAktifCalisma+0x1cc>)
 80065c8:	f003 fb4e 	bl	8009c68 <HAL_GPIO_ReadPin>
 80065cc:	4603      	mov	r3, r0
 80065ce:	2b01      	cmp	r3, #1
 80065d0:	d132      	bne.n	8006638 <checkAktifCalisma+0x1e0>
 80065d2:	4b18      	ldr	r3, [pc, #96]	; (8006634 <checkAktifCalisma+0x1dc>)
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d02e      	beq.n	8006638 <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 80065da:	2201      	movs	r2, #1
 80065dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80065e0:	480c      	ldr	r0, [pc, #48]	; (8006614 <checkAktifCalisma+0x1bc>)
 80065e2:	f003 fb58 	bl	8009c96 <HAL_GPIO_WritePin>
 80065e6:	e02d      	b.n	8006644 <checkAktifCalisma+0x1ec>
 80065e8:	20000c67 	.word	0x20000c67
 80065ec:	20000c66 	.word	0x20000c66
 80065f0:	20000c7e 	.word	0x20000c7e
 80065f4:	20000c7f 	.word	0x20000c7f
 80065f8:	20000c81 	.word	0x20000c81
 80065fc:	20000c79 	.word	0x20000c79
 8006600:	20000c5c 	.word	0x20000c5c
 8006604:	20000c80 	.word	0x20000c80
 8006608:	20000c5b 	.word	0x20000c5b
 800660c:	20000c9b 	.word	0x20000c9b
 8006610:	20000c9c 	.word	0x20000c9c
 8006614:	40010c00 	.word	0x40010c00
 8006618:	20000c9d 	.word	0x20000c9d
 800661c:	20000c88 	.word	0x20000c88
 8006620:	20000c85 	.word	0x20000c85
 8006624:	40011000 	.word	0x40011000
 8006628:	20000c4c 	.word	0x20000c4c
 800662c:	20000c83 	.word	0x20000c83
 8006630:	20000c84 	.word	0x20000c84
 8006634:	20000c57 	.word	0x20000c57
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006638:	2200      	movs	r2, #0
 800663a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800663e:	4860      	ldr	r0, [pc, #384]	; (80067c0 <checkAktifCalisma+0x368>)
 8006640:	f003 fb29 	bl	8009c96 <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8006644:	4b5f      	ldr	r3, [pc, #380]	; (80067c4 <checkAktifCalisma+0x36c>)
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d013      	beq.n	8006674 <checkAktifCalisma+0x21c>
 800664c:	4b5e      	ldr	r3, [pc, #376]	; (80067c8 <checkAktifCalisma+0x370>)
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	2b01      	cmp	r3, #1
 8006652:	d007      	beq.n	8006664 <checkAktifCalisma+0x20c>
 8006654:	4b5c      	ldr	r3, [pc, #368]	; (80067c8 <checkAktifCalisma+0x370>)
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	2b02      	cmp	r3, #2
 800665a:	d003      	beq.n	8006664 <checkAktifCalisma+0x20c>
 800665c:	4b5b      	ldr	r3, [pc, #364]	; (80067cc <checkAktifCalisma+0x374>)
 800665e:	781b      	ldrb	r3, [r3, #0]
 8006660:	2b01      	cmp	r3, #1
 8006662:	d107      	bne.n	8006674 <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8006664:	2201      	movs	r2, #1
 8006666:	2104      	movs	r1, #4
 8006668:	4855      	ldr	r0, [pc, #340]	; (80067c0 <checkAktifCalisma+0x368>)
 800666a:	f003 fb14 	bl	8009c96 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 800666e:	4b58      	ldr	r3, [pc, #352]	; (80067d0 <checkAktifCalisma+0x378>)
 8006670:	2201      	movs	r2, #1
 8006672:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8006674:	4b56      	ldr	r3, [pc, #344]	; (80067d0 <checkAktifCalisma+0x378>)
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d02f      	beq.n	80066dc <checkAktifCalisma+0x284>
 800667c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006680:	484f      	ldr	r0, [pc, #316]	; (80067c0 <checkAktifCalisma+0x368>)
 8006682:	f003 faf1 	bl	8009c68 <HAL_GPIO_ReadPin>
 8006686:	4603      	mov	r3, r0
 8006688:	2b01      	cmp	r3, #1
 800668a:	d106      	bne.n	800669a <checkAktifCalisma+0x242>
 800668c:	4b51      	ldr	r3, [pc, #324]	; (80067d4 <checkAktifCalisma+0x37c>)
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	f083 0301 	eor.w	r3, r3, #1
 8006694:	b2db      	uxtb	r3, r3
 8006696:	2b00      	cmp	r3, #0
 8006698:	d106      	bne.n	80066a8 <checkAktifCalisma+0x250>
 800669a:	2102      	movs	r1, #2
 800669c:	484e      	ldr	r0, [pc, #312]	; (80067d8 <checkAktifCalisma+0x380>)
 800669e:	f003 fae3 	bl	8009c68 <HAL_GPIO_ReadPin>
 80066a2:	4603      	mov	r3, r0
 80066a4:	2b01      	cmp	r3, #1
 80066a6:	d119      	bne.n	80066dc <checkAktifCalisma+0x284>
 80066a8:	4b4c      	ldr	r3, [pc, #304]	; (80067dc <checkAktifCalisma+0x384>)
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d015      	beq.n	80066dc <checkAktifCalisma+0x284>
 80066b0:	4b4b      	ldr	r3, [pc, #300]	; (80067e0 <checkAktifCalisma+0x388>)
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d011      	beq.n	80066dc <checkAktifCalisma+0x284>
 80066b8:	4b4a      	ldr	r3, [pc, #296]	; (80067e4 <checkAktifCalisma+0x38c>)
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d00d      	beq.n	80066dc <checkAktifCalisma+0x284>
 80066c0:	4b49      	ldr	r3, [pc, #292]	; (80067e8 <checkAktifCalisma+0x390>)
 80066c2:	781b      	ldrb	r3, [r3, #0]
 80066c4:	f083 0301 	eor.w	r3, r3, #1
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d006      	beq.n	80066dc <checkAktifCalisma+0x284>
			timer2=millis;
 80066ce:	4b47      	ldr	r3, [pc, #284]	; (80067ec <checkAktifCalisma+0x394>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4a47      	ldr	r2, [pc, #284]	; (80067f0 <checkAktifCalisma+0x398>)
 80066d4:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 80066d6:	4b44      	ldr	r3, [pc, #272]	; (80067e8 <checkAktifCalisma+0x390>)
 80066d8:	2201      	movs	r2, #1
 80066da:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 80066dc:	4b43      	ldr	r3, [pc, #268]	; (80067ec <checkAktifCalisma+0x394>)
 80066de:	681a      	ldr	r2, [r3, #0]
 80066e0:	4b43      	ldr	r3, [pc, #268]	; (80067f0 <checkAktifCalisma+0x398>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	1ad3      	subs	r3, r2, r3
 80066e6:	4a43      	ldr	r2, [pc, #268]	; (80067f4 <checkAktifCalisma+0x39c>)
 80066e8:	7812      	ldrb	r2, [r2, #0]
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d303      	bcc.n	80066f6 <checkAktifCalisma+0x29e>
 80066ee:	4b3e      	ldr	r3, [pc, #248]	; (80067e8 <checkAktifCalisma+0x390>)
 80066f0:	781b      	ldrb	r3, [r3, #0]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d111      	bne.n	800671a <checkAktifCalisma+0x2c2>
 80066f6:	4b39      	ldr	r3, [pc, #228]	; (80067dc <checkAktifCalisma+0x384>)
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	f083 0301 	eor.w	r3, r3, #1
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	2b00      	cmp	r3, #0
 8006702:	d10a      	bne.n	800671a <checkAktifCalisma+0x2c2>
 8006704:	4b36      	ldr	r3, [pc, #216]	; (80067e0 <checkAktifCalisma+0x388>)
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	f083 0301 	eor.w	r3, r3, #1
 800670c:	b2db      	uxtb	r3, r3
 800670e:	2b00      	cmp	r3, #0
 8006710:	d103      	bne.n	800671a <checkAktifCalisma+0x2c2>
 8006712:	4b34      	ldr	r3, [pc, #208]	; (80067e4 <checkAktifCalisma+0x38c>)
 8006714:	781b      	ldrb	r3, [r3, #0]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d10a      	bne.n	8006730 <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800671a:	2200      	movs	r2, #0
 800671c:	2104      	movs	r1, #4
 800671e:	4828      	ldr	r0, [pc, #160]	; (80067c0 <checkAktifCalisma+0x368>)
 8006720:	f003 fab9 	bl	8009c96 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 8006724:	4b2a      	ldr	r3, [pc, #168]	; (80067d0 <checkAktifCalisma+0x378>)
 8006726:	2200      	movs	r2, #0
 8006728:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 800672a:	4b2f      	ldr	r3, [pc, #188]	; (80067e8 <checkAktifCalisma+0x390>)
 800672c:	2200      	movs	r2, #0
 800672e:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 8006730:	4b31      	ldr	r3, [pc, #196]	; (80067f8 <checkAktifCalisma+0x3a0>)
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d102      	bne.n	800673e <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 8006738:	4b30      	ldr	r3, [pc, #192]	; (80067fc <checkAktifCalisma+0x3a4>)
 800673a:	2201      	movs	r2, #1
 800673c:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 800673e:	4b2e      	ldr	r3, [pc, #184]	; (80067f8 <checkAktifCalisma+0x3a0>)
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	2b01      	cmp	r3, #1
 8006744:	d116      	bne.n	8006774 <checkAktifCalisma+0x31c>
 8006746:	4b2e      	ldr	r3, [pc, #184]	; (8006800 <checkAktifCalisma+0x3a8>)
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d112      	bne.n	8006774 <checkAktifCalisma+0x31c>
 800674e:	2101      	movs	r1, #1
 8006750:	4821      	ldr	r0, [pc, #132]	; (80067d8 <checkAktifCalisma+0x380>)
 8006752:	f003 fa89 	bl	8009c68 <HAL_GPIO_ReadPin>
 8006756:	4603      	mov	r3, r0
 8006758:	2b00      	cmp	r3, #0
 800675a:	d10b      	bne.n	8006774 <checkAktifCalisma+0x31c>
 800675c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006760:	4817      	ldr	r0, [pc, #92]	; (80067c0 <checkAktifCalisma+0x368>)
 8006762:	f003 fa81 	bl	8009c68 <HAL_GPIO_ReadPin>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d103      	bne.n	8006774 <checkAktifCalisma+0x31c>
			cerceveVar=1;
 800676c:	4b23      	ldr	r3, [pc, #140]	; (80067fc <checkAktifCalisma+0x3a4>)
 800676e:	2201      	movs	r2, #1
 8006770:	701a      	strb	r2, [r3, #0]
 8006772:	e011      	b.n	8006798 <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8006774:	4b20      	ldr	r3, [pc, #128]	; (80067f8 <checkAktifCalisma+0x3a0>)
 8006776:	781b      	ldrb	r3, [r3, #0]
 8006778:	2b01      	cmp	r3, #1
 800677a:	d10d      	bne.n	8006798 <checkAktifCalisma+0x340>
 800677c:	2101      	movs	r1, #1
 800677e:	4816      	ldr	r0, [pc, #88]	; (80067d8 <checkAktifCalisma+0x380>)
 8006780:	f003 fa72 	bl	8009c68 <HAL_GPIO_ReadPin>
 8006784:	4603      	mov	r3, r0
 8006786:	2b01      	cmp	r3, #1
 8006788:	d106      	bne.n	8006798 <checkAktifCalisma+0x340>
 800678a:	4b1d      	ldr	r3, [pc, #116]	; (8006800 <checkAktifCalisma+0x3a8>)
 800678c:	781b      	ldrb	r3, [r3, #0]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d102      	bne.n	8006798 <checkAktifCalisma+0x340>
			cerceveVar=0;
 8006792:	4b1a      	ldr	r3, [pc, #104]	; (80067fc <checkAktifCalisma+0x3a4>)
 8006794:	2200      	movs	r2, #0
 8006796:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 8006798:	4b17      	ldr	r3, [pc, #92]	; (80067f8 <checkAktifCalisma+0x3a0>)
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	2b01      	cmp	r3, #1
 800679e:	d134      	bne.n	800680a <checkAktifCalisma+0x3b2>
 80067a0:	4b17      	ldr	r3, [pc, #92]	; (8006800 <checkAktifCalisma+0x3a8>)
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d130      	bne.n	800680a <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 80067a8:	2101      	movs	r1, #1
 80067aa:	480b      	ldr	r0, [pc, #44]	; (80067d8 <checkAktifCalisma+0x380>)
 80067ac:	f003 fa5c 	bl	8009c68 <HAL_GPIO_ReadPin>
 80067b0:	4603      	mov	r3, r0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d126      	bne.n	8006804 <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 80067b6:	4b11      	ldr	r3, [pc, #68]	; (80067fc <checkAktifCalisma+0x3a4>)
 80067b8:	2201      	movs	r2, #1
 80067ba:	701a      	strb	r2, [r3, #0]
 80067bc:	e025      	b.n	800680a <checkAktifCalisma+0x3b2>
 80067be:	bf00      	nop
 80067c0:	40010c00 	.word	0x40010c00
 80067c4:	20000c7e 	.word	0x20000c7e
 80067c8:	20000c58 	.word	0x20000c58
 80067cc:	20000c5c 	.word	0x20000c5c
 80067d0:	20000c82 	.word	0x20000c82
 80067d4:	20000c85 	.word	0x20000c85
 80067d8:	40011000 	.word	0x40011000
 80067dc:	20000c9b 	.word	0x20000c9b
 80067e0:	20000c9c 	.word	0x20000c9c
 80067e4:	20000c4c 	.word	0x20000c4c
 80067e8:	20000c7a 	.word	0x20000c7a
 80067ec:	20000bd4 	.word	0x20000bd4
 80067f0:	20000be0 	.word	0x20000be0
 80067f4:	20000c5d 	.word	0x20000c5d
 80067f8:	20000c4d 	.word	0x20000c4d
 80067fc:	20000ca0 	.word	0x20000ca0
 8006800:	20000c4a 	.word	0x20000c4a
			} else {
				cerceveVar=0;
 8006804:	4b7f      	ldr	r3, [pc, #508]	; (8006a04 <checkAktifCalisma+0x5ac>)
 8006806:	2200      	movs	r2, #0
 8006808:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 800680a:	4b7f      	ldr	r3, [pc, #508]	; (8006a08 <checkAktifCalisma+0x5b0>)
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d17c      	bne.n	800690c <checkAktifCalisma+0x4b4>
 8006812:	4b7e      	ldr	r3, [pc, #504]	; (8006a0c <checkAktifCalisma+0x5b4>)
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d078      	beq.n	800690c <checkAktifCalisma+0x4b4>
 800681a:	4b7d      	ldr	r3, [pc, #500]	; (8006a10 <checkAktifCalisma+0x5b8>)
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d074      	beq.n	800690c <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 8006822:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006826:	487b      	ldr	r0, [pc, #492]	; (8006a14 <checkAktifCalisma+0x5bc>)
 8006828:	f003 fa1e 	bl	8009c68 <HAL_GPIO_ReadPin>
 800682c:	4603      	mov	r3, r0
 800682e:	2b00      	cmp	r3, #0
 8006830:	d003      	beq.n	800683a <checkAktifCalisma+0x3e2>
 8006832:	4b79      	ldr	r3, [pc, #484]	; (8006a18 <checkAktifCalisma+0x5c0>)
 8006834:	781b      	ldrb	r3, [r3, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d068      	beq.n	800690c <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 800683a:	4b72      	ldr	r3, [pc, #456]	; (8006a04 <checkAktifCalisma+0x5ac>)
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d064      	beq.n	800690c <checkAktifCalisma+0x4b4>
 8006842:	4b76      	ldr	r3, [pc, #472]	; (8006a1c <checkAktifCalisma+0x5c4>)
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	f083 0301 	eor.w	r3, r3, #1
 800684a:	b2db      	uxtb	r3, r3
 800684c:	2b00      	cmp	r3, #0
 800684e:	d05d      	beq.n	800690c <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8006850:	2104      	movs	r1, #4
 8006852:	4873      	ldr	r0, [pc, #460]	; (8006a20 <checkAktifCalisma+0x5c8>)
 8006854:	f003 fa08 	bl	8009c68 <HAL_GPIO_ReadPin>
 8006858:	4603      	mov	r3, r0
 800685a:	2b00      	cmp	r3, #0
 800685c:	d003      	beq.n	8006866 <checkAktifCalisma+0x40e>
 800685e:	4b71      	ldr	r3, [pc, #452]	; (8006a24 <checkAktifCalisma+0x5cc>)
 8006860:	781b      	ldrb	r3, [r3, #0]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d152      	bne.n	800690c <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8006866:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800686a:	486a      	ldr	r0, [pc, #424]	; (8006a14 <checkAktifCalisma+0x5bc>)
 800686c:	f003 f9fc 	bl	8009c68 <HAL_GPIO_ReadPin>
 8006870:	4603      	mov	r3, r0
 8006872:	2b01      	cmp	r3, #1
 8006874:	d10e      	bne.n	8006894 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8006876:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800687a:	4866      	ldr	r0, [pc, #408]	; (8006a14 <checkAktifCalisma+0x5bc>)
 800687c:	f003 f9f4 	bl	8009c68 <HAL_GPIO_ReadPin>
 8006880:	4603      	mov	r3, r0
 8006882:	2b01      	cmp	r3, #1
 8006884:	d106      	bne.n	8006894 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8006886:	2140      	movs	r1, #64	; 0x40
 8006888:	4865      	ldr	r0, [pc, #404]	; (8006a20 <checkAktifCalisma+0x5c8>)
 800688a:	f003 f9ed 	bl	8009c68 <HAL_GPIO_ReadPin>
 800688e:	4603      	mov	r3, r0
 8006890:	2b01      	cmp	r3, #1
 8006892:	d003      	beq.n	800689c <checkAktifCalisma+0x444>
 8006894:	4b64      	ldr	r3, [pc, #400]	; (8006a28 <checkAktifCalisma+0x5d0>)
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d037      	beq.n	800690c <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 800689c:	4b63      	ldr	r3, [pc, #396]	; (8006a2c <checkAktifCalisma+0x5d4>)
 800689e:	781b      	ldrb	r3, [r3, #0]
 80068a0:	f083 0301 	eor.w	r3, r3, #1
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d030      	beq.n	800690c <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 80068aa:	4b61      	ldr	r3, [pc, #388]	; (8006a30 <checkAktifCalisma+0x5d8>)
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	f083 0301 	eor.w	r3, r3, #1
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d029      	beq.n	800690c <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 80068b8:	4b5e      	ldr	r3, [pc, #376]	; (8006a34 <checkAktifCalisma+0x5dc>)
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	f083 0301 	eor.w	r3, r3, #1
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d022      	beq.n	800690c <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 80068c6:	4b5c      	ldr	r3, [pc, #368]	; (8006a38 <checkAktifCalisma+0x5e0>)
 80068c8:	781b      	ldrb	r3, [r3, #0]
 80068ca:	f083 0301 	eor.w	r3, r3, #1
 80068ce:	b2db      	uxtb	r3, r3
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d01b      	beq.n	800690c <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 80068d4:	4b59      	ldr	r3, [pc, #356]	; (8006a3c <checkAktifCalisma+0x5e4>)
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	f083 0301 	eor.w	r3, r3, #1
 80068dc:	b2db      	uxtb	r3, r3
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d014      	beq.n	800690c <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 80068e2:	4b57      	ldr	r3, [pc, #348]	; (8006a40 <checkAktifCalisma+0x5e8>)
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	f083 0301 	eor.w	r3, r3, #1
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d00d      	beq.n	800690c <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80068f0:	2201      	movs	r2, #1
 80068f2:	2102      	movs	r1, #2
 80068f4:	4847      	ldr	r0, [pc, #284]	; (8006a14 <checkAktifCalisma+0x5bc>)
 80068f6:	f003 f9ce 	bl	8009c96 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 80068fa:	4b4b      	ldr	r3, [pc, #300]	; (8006a28 <checkAktifCalisma+0x5d0>)
 80068fc:	2201      	movs	r2, #1
 80068fe:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 8006900:	4b50      	ldr	r3, [pc, #320]	; (8006a44 <checkAktifCalisma+0x5ec>)
 8006902:	2201      	movs	r2, #1
 8006904:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 8006906:	4b50      	ldr	r3, [pc, #320]	; (8006a48 <checkAktifCalisma+0x5f0>)
 8006908:	2201      	movs	r2, #1
 800690a:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 800690c:	4b46      	ldr	r3, [pc, #280]	; (8006a28 <checkAktifCalisma+0x5d0>)
 800690e:	781b      	ldrb	r3, [r3, #0]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d033      	beq.n	800697c <checkAktifCalisma+0x524>
 8006914:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006918:	483e      	ldr	r0, [pc, #248]	; (8006a14 <checkAktifCalisma+0x5bc>)
 800691a:	f003 f9a5 	bl	8009c68 <HAL_GPIO_ReadPin>
 800691e:	4603      	mov	r3, r0
 8006920:	2b01      	cmp	r3, #1
 8006922:	d106      	bne.n	8006932 <checkAktifCalisma+0x4da>
 8006924:	4b3c      	ldr	r3, [pc, #240]	; (8006a18 <checkAktifCalisma+0x5c0>)
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	f083 0301 	eor.w	r3, r3, #1
 800692c:	b2db      	uxtb	r3, r3
 800692e:	2b00      	cmp	r3, #0
 8006930:	d10a      	bne.n	8006948 <checkAktifCalisma+0x4f0>
 8006932:	2104      	movs	r1, #4
 8006934:	483a      	ldr	r0, [pc, #232]	; (8006a20 <checkAktifCalisma+0x5c8>)
 8006936:	f003 f997 	bl	8009c68 <HAL_GPIO_ReadPin>
 800693a:	4603      	mov	r3, r0
 800693c:	2b01      	cmp	r3, #1
 800693e:	d11d      	bne.n	800697c <checkAktifCalisma+0x524>
 8006940:	4b38      	ldr	r3, [pc, #224]	; (8006a24 <checkAktifCalisma+0x5cc>)
 8006942:	781b      	ldrb	r3, [r3, #0]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d019      	beq.n	800697c <checkAktifCalisma+0x524>
 8006948:	4b30      	ldr	r3, [pc, #192]	; (8006a0c <checkAktifCalisma+0x5b4>)
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	2b00      	cmp	r3, #0
 800694e:	d015      	beq.n	800697c <checkAktifCalisma+0x524>
 8006950:	4b2f      	ldr	r3, [pc, #188]	; (8006a10 <checkAktifCalisma+0x5b8>)
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d011      	beq.n	800697c <checkAktifCalisma+0x524>
 8006958:	4b2a      	ldr	r3, [pc, #168]	; (8006a04 <checkAktifCalisma+0x5ac>)
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d00d      	beq.n	800697c <checkAktifCalisma+0x524>
 8006960:	4b3a      	ldr	r3, [pc, #232]	; (8006a4c <checkAktifCalisma+0x5f4>)
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	f083 0301 	eor.w	r3, r3, #1
 8006968:	b2db      	uxtb	r3, r3
 800696a:	2b00      	cmp	r3, #0
 800696c:	d006      	beq.n	800697c <checkAktifCalisma+0x524>
			timer2=millis;
 800696e:	4b38      	ldr	r3, [pc, #224]	; (8006a50 <checkAktifCalisma+0x5f8>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4a38      	ldr	r2, [pc, #224]	; (8006a54 <checkAktifCalisma+0x5fc>)
 8006974:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 8006976:	4b35      	ldr	r3, [pc, #212]	; (8006a4c <checkAktifCalisma+0x5f4>)
 8006978:	2201      	movs	r2, #1
 800697a:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 800697c:	4b34      	ldr	r3, [pc, #208]	; (8006a50 <checkAktifCalisma+0x5f8>)
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	4b34      	ldr	r3, [pc, #208]	; (8006a54 <checkAktifCalisma+0x5fc>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	1ad3      	subs	r3, r2, r3
 8006986:	4a34      	ldr	r2, [pc, #208]	; (8006a58 <checkAktifCalisma+0x600>)
 8006988:	7812      	ldrb	r2, [r2, #0]
 800698a:	4293      	cmp	r3, r2
 800698c:	d303      	bcc.n	8006996 <checkAktifCalisma+0x53e>
 800698e:	4b2f      	ldr	r3, [pc, #188]	; (8006a4c <checkAktifCalisma+0x5f4>)
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d114      	bne.n	80069c0 <checkAktifCalisma+0x568>
 8006996:	4b1d      	ldr	r3, [pc, #116]	; (8006a0c <checkAktifCalisma+0x5b4>)
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	f083 0301 	eor.w	r3, r3, #1
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d10d      	bne.n	80069c0 <checkAktifCalisma+0x568>
 80069a4:	4b1a      	ldr	r3, [pc, #104]	; (8006a10 <checkAktifCalisma+0x5b8>)
 80069a6:	781b      	ldrb	r3, [r3, #0]
 80069a8:	f083 0301 	eor.w	r3, r3, #1
 80069ac:	b2db      	uxtb	r3, r3
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d106      	bne.n	80069c0 <checkAktifCalisma+0x568>
 80069b2:	4b14      	ldr	r3, [pc, #80]	; (8006a04 <checkAktifCalisma+0x5ac>)
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	f083 0301 	eor.w	r3, r3, #1
 80069ba:	b2db      	uxtb	r3, r3
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d00a      	beq.n	80069d6 <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80069c0:	2200      	movs	r2, #0
 80069c2:	2102      	movs	r1, #2
 80069c4:	4813      	ldr	r0, [pc, #76]	; (8006a14 <checkAktifCalisma+0x5bc>)
 80069c6:	f003 f966 	bl	8009c96 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 80069ca:	4b17      	ldr	r3, [pc, #92]	; (8006a28 <checkAktifCalisma+0x5d0>)
 80069cc:	2200      	movs	r2, #0
 80069ce:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 80069d0:	4b1e      	ldr	r3, [pc, #120]	; (8006a4c <checkAktifCalisma+0x5f4>)
 80069d2:	2200      	movs	r2, #0
 80069d4:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 80069d6:	4b14      	ldr	r3, [pc, #80]	; (8006a28 <checkAktifCalisma+0x5d0>)
 80069d8:	781b      	ldrb	r3, [r3, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d040      	beq.n	8006a60 <checkAktifCalisma+0x608>
 80069de:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80069e2:	480f      	ldr	r0, [pc, #60]	; (8006a20 <checkAktifCalisma+0x5c8>)
 80069e4:	f003 f940 	bl	8009c68 <HAL_GPIO_ReadPin>
 80069e8:	4603      	mov	r3, r0
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d138      	bne.n	8006a60 <checkAktifCalisma+0x608>
 80069ee:	4b1b      	ldr	r3, [pc, #108]	; (8006a5c <checkAktifCalisma+0x604>)
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d034      	beq.n	8006a60 <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80069f6:	2201      	movs	r2, #1
 80069f8:	2101      	movs	r1, #1
 80069fa:	4806      	ldr	r0, [pc, #24]	; (8006a14 <checkAktifCalisma+0x5bc>)
 80069fc:	f003 f94b 	bl	8009c96 <HAL_GPIO_WritePin>
 8006a00:	e033      	b.n	8006a6a <checkAktifCalisma+0x612>
 8006a02:	bf00      	nop
 8006a04:	20000ca0 	.word	0x20000ca0
 8006a08:	20000c66 	.word	0x20000c66
 8006a0c:	20000c9b 	.word	0x20000c9b
 8006a10:	20000c9c 	.word	0x20000c9c
 8006a14:	40010c00 	.word	0x40010c00
 8006a18:	20000c86 	.word	0x20000c86
 8006a1c:	20000c9a 	.word	0x20000c9a
 8006a20:	40011000 	.word	0x40011000
 8006a24:	20000c4f 	.word	0x20000c4f
 8006a28:	20000c81 	.word	0x20000c81
 8006a2c:	20000c7e 	.word	0x20000c7e
 8006a30:	20000c82 	.word	0x20000c82
 8006a34:	20000c7f 	.word	0x20000c7f
 8006a38:	20000c80 	.word	0x20000c80
 8006a3c:	20000c83 	.word	0x20000c83
 8006a40:	20000c84 	.word	0x20000c84
 8006a44:	20000c89 	.word	0x20000c89
 8006a48:	20000caa 	.word	0x20000caa
 8006a4c:	20000c79 	.word	0x20000c79
 8006a50:	20000bd4 	.word	0x20000bd4
 8006a54:	20000be0 	.word	0x20000be0
 8006a58:	20000c5e 	.word	0x20000c5e
 8006a5c:	20000c4e 	.word	0x20000c4e
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006a60:	2200      	movs	r2, #0
 8006a62:	2101      	movs	r1, #1
 8006a64:	4836      	ldr	r0, [pc, #216]	; (8006b40 <checkAktifCalisma+0x6e8>)
 8006a66:	f003 f916 	bl	8009c96 <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 8006a6a:	4b36      	ldr	r3, [pc, #216]	; (8006b44 <checkAktifCalisma+0x6ec>)
 8006a6c:	781b      	ldrb	r3, [r3, #0]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	f040 8080 	bne.w	8006b74 <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8006a74:	4b34      	ldr	r3, [pc, #208]	; (8006b48 <checkAktifCalisma+0x6f0>)
 8006a76:	781b      	ldrb	r3, [r3, #0]
 8006a78:	2b01      	cmp	r3, #1
 8006a7a:	d003      	beq.n	8006a84 <checkAktifCalisma+0x62c>
 8006a7c:	4b32      	ldr	r3, [pc, #200]	; (8006b48 <checkAktifCalisma+0x6f0>)
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	2b02      	cmp	r3, #2
 8006a82:	d177      	bne.n	8006b74 <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 8006a84:	4b31      	ldr	r3, [pc, #196]	; (8006b4c <checkAktifCalisma+0x6f4>)
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d073      	beq.n	8006b74 <checkAktifCalisma+0x71c>
 8006a8c:	4b30      	ldr	r3, [pc, #192]	; (8006b50 <checkAktifCalisma+0x6f8>)
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d06f      	beq.n	8006b74 <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8006a94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006a98:	4829      	ldr	r0, [pc, #164]	; (8006b40 <checkAktifCalisma+0x6e8>)
 8006a9a:	f003 f8e5 	bl	8009c68 <HAL_GPIO_ReadPin>
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d167      	bne.n	8006b74 <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8006aa4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006aa8:	482a      	ldr	r0, [pc, #168]	; (8006b54 <checkAktifCalisma+0x6fc>)
 8006aaa:	f003 f8dd 	bl	8009c68 <HAL_GPIO_ReadPin>
 8006aae:	4603      	mov	r3, r0
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d003      	beq.n	8006abc <checkAktifCalisma+0x664>
 8006ab4:	4b28      	ldr	r3, [pc, #160]	; (8006b58 <checkAktifCalisma+0x700>)
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d15b      	bne.n	8006b74 <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8006abc:	2140      	movs	r1, #64	; 0x40
 8006abe:	4825      	ldr	r0, [pc, #148]	; (8006b54 <checkAktifCalisma+0x6fc>)
 8006ac0:	f003 f8d2 	bl	8009c68 <HAL_GPIO_ReadPin>
 8006ac4:	4603      	mov	r3, r0
 8006ac6:	2b01      	cmp	r3, #1
 8006ac8:	d10f      	bne.n	8006aea <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8006aca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006ace:	481c      	ldr	r0, [pc, #112]	; (8006b40 <checkAktifCalisma+0x6e8>)
 8006ad0:	f003 f8ca 	bl	8009c68 <HAL_GPIO_ReadPin>
 8006ad4:	4603      	mov	r3, r0
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d107      	bne.n	8006aea <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8006ada:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006ade:	4818      	ldr	r0, [pc, #96]	; (8006b40 <checkAktifCalisma+0x6e8>)
 8006ae0:	f003 f8c2 	bl	8009c68 <HAL_GPIO_ReadPin>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	2b01      	cmp	r3, #1
 8006ae8:	d003      	beq.n	8006af2 <checkAktifCalisma+0x69a>
 8006aea:	4b1c      	ldr	r3, [pc, #112]	; (8006b5c <checkAktifCalisma+0x704>)
 8006aec:	781b      	ldrb	r3, [r3, #0]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d040      	beq.n	8006b74 <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 8006af2:	4b1b      	ldr	r3, [pc, #108]	; (8006b60 <checkAktifCalisma+0x708>)
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	f083 0301 	eor.w	r3, r3, #1
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d039      	beq.n	8006b74 <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 8006b00:	4b18      	ldr	r3, [pc, #96]	; (8006b64 <checkAktifCalisma+0x70c>)
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	f083 0301 	eor.w	r3, r3, #1
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d032      	beq.n	8006b74 <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 8006b0e:	4b16      	ldr	r3, [pc, #88]	; (8006b68 <checkAktifCalisma+0x710>)
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	f083 0301 	eor.w	r3, r3, #1
 8006b16:	b2db      	uxtb	r3, r3
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d02b      	beq.n	8006b74 <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 8006b1c:	4b13      	ldr	r3, [pc, #76]	; (8006b6c <checkAktifCalisma+0x714>)
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	f083 0301 	eor.w	r3, r3, #1
 8006b24:	b2db      	uxtb	r3, r3
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d024      	beq.n	8006b74 <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 8006b2a:	4b11      	ldr	r3, [pc, #68]	; (8006b70 <checkAktifCalisma+0x718>)
 8006b2c:	781b      	ldrb	r3, [r3, #0]
 8006b2e:	f083 0301 	eor.w	r3, r3, #1
 8006b32:	b2db      	uxtb	r3, r3
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d01d      	beq.n	8006b74 <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 8006b38:	4b08      	ldr	r3, [pc, #32]	; (8006b5c <checkAktifCalisma+0x704>)
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	701a      	strb	r2, [r3, #0]
 8006b3e:	e01c      	b.n	8006b7a <checkAktifCalisma+0x722>
 8006b40:	40010c00 	.word	0x40010c00
 8006b44:	20000c66 	.word	0x20000c66
 8006b48:	20000c58 	.word	0x20000c58
 8006b4c:	20000c9b 	.word	0x20000c9b
 8006b50:	20000c9c 	.word	0x20000c9c
 8006b54:	40011000 	.word	0x40011000
 8006b58:	20000c59 	.word	0x20000c59
 8006b5c:	20000c7f 	.word	0x20000c7f
 8006b60:	20000c7e 	.word	0x20000c7e
 8006b64:	20000c82 	.word	0x20000c82
 8006b68:	20000c81 	.word	0x20000c81
 8006b6c:	20000c80 	.word	0x20000c80
 8006b70:	20000c84 	.word	0x20000c84
		} else {
			devmotoryukaricalisiyor=0;
 8006b74:	4b64      	ldr	r3, [pc, #400]	; (8006d08 <checkAktifCalisma+0x8b0>)
 8006b76:	2200      	movs	r2, #0
 8006b78:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 8006b7a:	4b63      	ldr	r3, [pc, #396]	; (8006d08 <checkAktifCalisma+0x8b0>)
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d007      	beq.n	8006b92 <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8006b82:	2201      	movs	r2, #1
 8006b84:	2120      	movs	r1, #32
 8006b86:	4861      	ldr	r0, [pc, #388]	; (8006d0c <checkAktifCalisma+0x8b4>)
 8006b88:	f003 f885 	bl	8009c96 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 8006b8c:	4b60      	ldr	r3, [pc, #384]	; (8006d10 <checkAktifCalisma+0x8b8>)
 8006b8e:	2201      	movs	r2, #1
 8006b90:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8006b92:	4b5f      	ldr	r3, [pc, #380]	; (8006d10 <checkAktifCalisma+0x8b8>)
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d025      	beq.n	8006be6 <checkAktifCalisma+0x78e>
 8006b9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006b9e:	485d      	ldr	r0, [pc, #372]	; (8006d14 <checkAktifCalisma+0x8bc>)
 8006ba0:	f003 f862 	bl	8009c68 <HAL_GPIO_ReadPin>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2b01      	cmp	r3, #1
 8006ba8:	d007      	beq.n	8006bba <checkAktifCalisma+0x762>
 8006baa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006bae:	4857      	ldr	r0, [pc, #348]	; (8006d0c <checkAktifCalisma+0x8b4>)
 8006bb0:	f003 f85a 	bl	8009c68 <HAL_GPIO_ReadPin>
 8006bb4:	4603      	mov	r3, r0
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d115      	bne.n	8006be6 <checkAktifCalisma+0x78e>
 8006bba:	4b57      	ldr	r3, [pc, #348]	; (8006d18 <checkAktifCalisma+0x8c0>)
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d011      	beq.n	8006be6 <checkAktifCalisma+0x78e>
 8006bc2:	4b56      	ldr	r3, [pc, #344]	; (8006d1c <checkAktifCalisma+0x8c4>)
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d00d      	beq.n	8006be6 <checkAktifCalisma+0x78e>
 8006bca:	4b55      	ldr	r3, [pc, #340]	; (8006d20 <checkAktifCalisma+0x8c8>)
 8006bcc:	781b      	ldrb	r3, [r3, #0]
 8006bce:	f083 0301 	eor.w	r3, r3, #1
 8006bd2:	b2db      	uxtb	r3, r3
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d006      	beq.n	8006be6 <checkAktifCalisma+0x78e>
			timer2=millis;
 8006bd8:	4b52      	ldr	r3, [pc, #328]	; (8006d24 <checkAktifCalisma+0x8cc>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a52      	ldr	r2, [pc, #328]	; (8006d28 <checkAktifCalisma+0x8d0>)
 8006bde:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 8006be0:	4b4f      	ldr	r3, [pc, #316]	; (8006d20 <checkAktifCalisma+0x8c8>)
 8006be2:	2201      	movs	r2, #1
 8006be4:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8006be6:	4b4f      	ldr	r3, [pc, #316]	; (8006d24 <checkAktifCalisma+0x8cc>)
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	4b4f      	ldr	r3, [pc, #316]	; (8006d28 <checkAktifCalisma+0x8d0>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	1ad3      	subs	r3, r2, r3
 8006bf0:	4a4e      	ldr	r2, [pc, #312]	; (8006d2c <checkAktifCalisma+0x8d4>)
 8006bf2:	7812      	ldrb	r2, [r2, #0]
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d303      	bcc.n	8006c00 <checkAktifCalisma+0x7a8>
 8006bf8:	4b49      	ldr	r3, [pc, #292]	; (8006d20 <checkAktifCalisma+0x8c8>)
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d10d      	bne.n	8006c1c <checkAktifCalisma+0x7c4>
 8006c00:	4b45      	ldr	r3, [pc, #276]	; (8006d18 <checkAktifCalisma+0x8c0>)
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	f083 0301 	eor.w	r3, r3, #1
 8006c08:	b2db      	uxtb	r3, r3
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d106      	bne.n	8006c1c <checkAktifCalisma+0x7c4>
 8006c0e:	4b43      	ldr	r3, [pc, #268]	; (8006d1c <checkAktifCalisma+0x8c4>)
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	f083 0301 	eor.w	r3, r3, #1
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d00a      	beq.n	8006c32 <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	2120      	movs	r1, #32
 8006c20:	483a      	ldr	r0, [pc, #232]	; (8006d0c <checkAktifCalisma+0x8b4>)
 8006c22:	f003 f838 	bl	8009c96 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 8006c26:	4b3a      	ldr	r3, [pc, #232]	; (8006d10 <checkAktifCalisma+0x8b8>)
 8006c28:	2200      	movs	r2, #0
 8006c2a:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 8006c2c:	4b3c      	ldr	r3, [pc, #240]	; (8006d20 <checkAktifCalisma+0x8c8>)
 8006c2e:	2200      	movs	r2, #0
 8006c30:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 8006c32:	4b3f      	ldr	r3, [pc, #252]	; (8006d30 <checkAktifCalisma+0x8d8>)
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	f040 8088 	bne.w	8006d4c <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8006c3c:	4b3d      	ldr	r3, [pc, #244]	; (8006d34 <checkAktifCalisma+0x8dc>)
 8006c3e:	781b      	ldrb	r3, [r3, #0]
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d003      	beq.n	8006c4c <checkAktifCalisma+0x7f4>
 8006c44:	4b3b      	ldr	r3, [pc, #236]	; (8006d34 <checkAktifCalisma+0x8dc>)
 8006c46:	781b      	ldrb	r3, [r3, #0]
 8006c48:	2b02      	cmp	r3, #2
 8006c4a:	d17f      	bne.n	8006d4c <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 8006c4c:	4b32      	ldr	r3, [pc, #200]	; (8006d18 <checkAktifCalisma+0x8c0>)
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d07b      	beq.n	8006d4c <checkAktifCalisma+0x8f4>
 8006c54:	4b31      	ldr	r3, [pc, #196]	; (8006d1c <checkAktifCalisma+0x8c4>)
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d077      	beq.n	8006d4c <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8006c5c:	2140      	movs	r1, #64	; 0x40
 8006c5e:	482b      	ldr	r0, [pc, #172]	; (8006d0c <checkAktifCalisma+0x8b4>)
 8006c60:	f003 f802 	bl	8009c68 <HAL_GPIO_ReadPin>
 8006c64:	4603      	mov	r3, r0
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d170      	bne.n	8006d4c <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8006c6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006c6e:	4827      	ldr	r0, [pc, #156]	; (8006d0c <checkAktifCalisma+0x8b4>)
 8006c70:	f002 fffa 	bl	8009c68 <HAL_GPIO_ReadPin>
 8006c74:	4603      	mov	r3, r0
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d003      	beq.n	8006c82 <checkAktifCalisma+0x82a>
 8006c7a:	4b2f      	ldr	r3, [pc, #188]	; (8006d38 <checkAktifCalisma+0x8e0>)
 8006c7c:	781b      	ldrb	r3, [r3, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d164      	bne.n	8006d4c <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8006c82:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006c86:	4823      	ldr	r0, [pc, #140]	; (8006d14 <checkAktifCalisma+0x8bc>)
 8006c88:	f002 ffee 	bl	8009c68 <HAL_GPIO_ReadPin>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d10f      	bne.n	8006cb2 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8006c92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006c96:	481f      	ldr	r0, [pc, #124]	; (8006d14 <checkAktifCalisma+0x8bc>)
 8006c98:	f002 ffe6 	bl	8009c68 <HAL_GPIO_ReadPin>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d107      	bne.n	8006cb2 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8006ca2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006ca6:	481b      	ldr	r0, [pc, #108]	; (8006d14 <checkAktifCalisma+0x8bc>)
 8006ca8:	f002 ffde 	bl	8009c68 <HAL_GPIO_ReadPin>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d003      	beq.n	8006cba <checkAktifCalisma+0x862>
 8006cb2:	4b22      	ldr	r3, [pc, #136]	; (8006d3c <checkAktifCalisma+0x8e4>)
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d048      	beq.n	8006d4c <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 8006cba:	4b21      	ldr	r3, [pc, #132]	; (8006d40 <checkAktifCalisma+0x8e8>)
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	f083 0301 	eor.w	r3, r3, #1
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d041      	beq.n	8006d4c <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 8006cc8:	4b1e      	ldr	r3, [pc, #120]	; (8006d44 <checkAktifCalisma+0x8ec>)
 8006cca:	781b      	ldrb	r3, [r3, #0]
 8006ccc:	f083 0301 	eor.w	r3, r3, #1
 8006cd0:	b2db      	uxtb	r3, r3
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d03a      	beq.n	8006d4c <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 8006cd6:	4b1c      	ldr	r3, [pc, #112]	; (8006d48 <checkAktifCalisma+0x8f0>)
 8006cd8:	781b      	ldrb	r3, [r3, #0]
 8006cda:	f083 0301 	eor.w	r3, r3, #1
 8006cde:	b2db      	uxtb	r3, r3
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d033      	beq.n	8006d4c <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 8006ce4:	4b0a      	ldr	r3, [pc, #40]	; (8006d10 <checkAktifCalisma+0x8b8>)
 8006ce6:	781b      	ldrb	r3, [r3, #0]
 8006ce8:	f083 0301 	eor.w	r3, r3, #1
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d02c      	beq.n	8006d4c <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 8006cf2:	4b05      	ldr	r3, [pc, #20]	; (8006d08 <checkAktifCalisma+0x8b0>)
 8006cf4:	781b      	ldrb	r3, [r3, #0]
 8006cf6:	f083 0301 	eor.w	r3, r3, #1
 8006cfa:	b2db      	uxtb	r3, r3
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d025      	beq.n	8006d4c <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 8006d00:	4b0e      	ldr	r3, [pc, #56]	; (8006d3c <checkAktifCalisma+0x8e4>)
 8006d02:	2201      	movs	r2, #1
 8006d04:	701a      	strb	r2, [r3, #0]
 8006d06:	e024      	b.n	8006d52 <checkAktifCalisma+0x8fa>
 8006d08:	20000c7f 	.word	0x20000c7f
 8006d0c:	40011000 	.word	0x40011000
 8006d10:	20000c83 	.word	0x20000c83
 8006d14:	40010c00 	.word	0x40010c00
 8006d18:	20000c9b 	.word	0x20000c9b
 8006d1c:	20000c9c 	.word	0x20000c9c
 8006d20:	20000c7b 	.word	0x20000c7b
 8006d24:	20000bd4 	.word	0x20000bd4
 8006d28:	20000be0 	.word	0x20000be0
 8006d2c:	20000c5f 	.word	0x20000c5f
 8006d30:	20000c66 	.word	0x20000c66
 8006d34:	20000c58 	.word	0x20000c58
 8006d38:	20000c5a 	.word	0x20000c5a
 8006d3c:	20000c80 	.word	0x20000c80
 8006d40:	20000c7e 	.word	0x20000c7e
 8006d44:	20000c82 	.word	0x20000c82
 8006d48:	20000c81 	.word	0x20000c81
		} else {
			devmotorasagicalisiyor=0;
 8006d4c:	4b96      	ldr	r3, [pc, #600]	; (8006fa8 <checkAktifCalisma+0xb50>)
 8006d4e:	2200      	movs	r2, #0
 8006d50:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 8006d52:	4b95      	ldr	r3, [pc, #596]	; (8006fa8 <checkAktifCalisma+0xb50>)
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d007      	beq.n	8006d6a <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	2110      	movs	r1, #16
 8006d5e:	4893      	ldr	r0, [pc, #588]	; (8006fac <checkAktifCalisma+0xb54>)
 8006d60:	f002 ff99 	bl	8009c96 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 8006d64:	4b92      	ldr	r3, [pc, #584]	; (8006fb0 <checkAktifCalisma+0xb58>)
 8006d66:	2201      	movs	r2, #1
 8006d68:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8006d6a:	4b91      	ldr	r3, [pc, #580]	; (8006fb0 <checkAktifCalisma+0xb58>)
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d024      	beq.n	8006dbc <checkAktifCalisma+0x964>
 8006d72:	2140      	movs	r1, #64	; 0x40
 8006d74:	488d      	ldr	r0, [pc, #564]	; (8006fac <checkAktifCalisma+0xb54>)
 8006d76:	f002 ff77 	bl	8009c68 <HAL_GPIO_ReadPin>
 8006d7a:	4603      	mov	r3, r0
 8006d7c:	2b01      	cmp	r3, #1
 8006d7e:	d007      	beq.n	8006d90 <checkAktifCalisma+0x938>
 8006d80:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006d84:	4889      	ldr	r0, [pc, #548]	; (8006fac <checkAktifCalisma+0xb54>)
 8006d86:	f002 ff6f 	bl	8009c68 <HAL_GPIO_ReadPin>
 8006d8a:	4603      	mov	r3, r0
 8006d8c:	2b01      	cmp	r3, #1
 8006d8e:	d115      	bne.n	8006dbc <checkAktifCalisma+0x964>
 8006d90:	4b88      	ldr	r3, [pc, #544]	; (8006fb4 <checkAktifCalisma+0xb5c>)
 8006d92:	781b      	ldrb	r3, [r3, #0]
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d011      	beq.n	8006dbc <checkAktifCalisma+0x964>
 8006d98:	4b87      	ldr	r3, [pc, #540]	; (8006fb8 <checkAktifCalisma+0xb60>)
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d00d      	beq.n	8006dbc <checkAktifCalisma+0x964>
 8006da0:	4b86      	ldr	r3, [pc, #536]	; (8006fbc <checkAktifCalisma+0xb64>)
 8006da2:	781b      	ldrb	r3, [r3, #0]
 8006da4:	f083 0301 	eor.w	r3, r3, #1
 8006da8:	b2db      	uxtb	r3, r3
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d006      	beq.n	8006dbc <checkAktifCalisma+0x964>
			timer2=millis;
 8006dae:	4b84      	ldr	r3, [pc, #528]	; (8006fc0 <checkAktifCalisma+0xb68>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	4a84      	ldr	r2, [pc, #528]	; (8006fc4 <checkAktifCalisma+0xb6c>)
 8006db4:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 8006db6:	4b81      	ldr	r3, [pc, #516]	; (8006fbc <checkAktifCalisma+0xb64>)
 8006db8:	2201      	movs	r2, #1
 8006dba:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8006dbc:	4b80      	ldr	r3, [pc, #512]	; (8006fc0 <checkAktifCalisma+0xb68>)
 8006dbe:	681a      	ldr	r2, [r3, #0]
 8006dc0:	4b80      	ldr	r3, [pc, #512]	; (8006fc4 <checkAktifCalisma+0xb6c>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	1ad3      	subs	r3, r2, r3
 8006dc6:	4a80      	ldr	r2, [pc, #512]	; (8006fc8 <checkAktifCalisma+0xb70>)
 8006dc8:	7812      	ldrb	r2, [r2, #0]
 8006dca:	4293      	cmp	r3, r2
 8006dcc:	d303      	bcc.n	8006dd6 <checkAktifCalisma+0x97e>
 8006dce:	4b7b      	ldr	r3, [pc, #492]	; (8006fbc <checkAktifCalisma+0xb64>)
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d10d      	bne.n	8006df2 <checkAktifCalisma+0x99a>
 8006dd6:	4b77      	ldr	r3, [pc, #476]	; (8006fb4 <checkAktifCalisma+0xb5c>)
 8006dd8:	781b      	ldrb	r3, [r3, #0]
 8006dda:	f083 0301 	eor.w	r3, r3, #1
 8006dde:	b2db      	uxtb	r3, r3
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d106      	bne.n	8006df2 <checkAktifCalisma+0x99a>
 8006de4:	4b74      	ldr	r3, [pc, #464]	; (8006fb8 <checkAktifCalisma+0xb60>)
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	f083 0301 	eor.w	r3, r3, #1
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d00a      	beq.n	8006e08 <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006df2:	2200      	movs	r2, #0
 8006df4:	2110      	movs	r1, #16
 8006df6:	486d      	ldr	r0, [pc, #436]	; (8006fac <checkAktifCalisma+0xb54>)
 8006df8:	f002 ff4d 	bl	8009c96 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 8006dfc:	4b6c      	ldr	r3, [pc, #432]	; (8006fb0 <checkAktifCalisma+0xb58>)
 8006dfe:	2200      	movs	r2, #0
 8006e00:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 8006e02:	4b6e      	ldr	r3, [pc, #440]	; (8006fbc <checkAktifCalisma+0xb64>)
 8006e04:	2200      	movs	r2, #0
 8006e06:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8006e08:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006e0c:	486f      	ldr	r0, [pc, #444]	; (8006fcc <checkAktifCalisma+0xb74>)
 8006e0e:	f002 ff2b 	bl	8009c68 <HAL_GPIO_ReadPin>
 8006e12:	4603      	mov	r3, r0
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d120      	bne.n	8006e5a <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8006e18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006e1c:	486b      	ldr	r0, [pc, #428]	; (8006fcc <checkAktifCalisma+0xb74>)
 8006e1e:	f002 ff23 	bl	8009c68 <HAL_GPIO_ReadPin>
 8006e22:	4603      	mov	r3, r0
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d118      	bne.n	8006e5a <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8006e28:	2104      	movs	r1, #4
 8006e2a:	4868      	ldr	r0, [pc, #416]	; (8006fcc <checkAktifCalisma+0xb74>)
 8006e2c:	f002 ff1c 	bl	8009c68 <HAL_GPIO_ReadPin>
 8006e30:	4603      	mov	r3, r0
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d111      	bne.n	8006e5a <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8006e36:	2102      	movs	r1, #2
 8006e38:	4864      	ldr	r0, [pc, #400]	; (8006fcc <checkAktifCalisma+0xb74>)
 8006e3a:	f002 ff15 	bl	8009c68 <HAL_GPIO_ReadPin>
 8006e3e:	4603      	mov	r3, r0
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d10a      	bne.n	8006e5a <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8006e44:	2101      	movs	r1, #1
 8006e46:	4861      	ldr	r0, [pc, #388]	; (8006fcc <checkAktifCalisma+0xb74>)
 8006e48:	f002 ff0e 	bl	8009c68 <HAL_GPIO_ReadPin>
 8006e4c:	4603      	mov	r3, r0
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d103      	bne.n	8006e5a <checkAktifCalisma+0xa02>
			makineStop=1;
 8006e52:	4b5f      	ldr	r3, [pc, #380]	; (8006fd0 <checkAktifCalisma+0xb78>)
 8006e54:	2201      	movs	r2, #1
 8006e56:	701a      	strb	r2, [r3, #0]
 8006e58:	e002      	b.n	8006e60 <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 8006e5a:	4b5d      	ldr	r3, [pc, #372]	; (8006fd0 <checkAktifCalisma+0xb78>)
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006e60:	4b5c      	ldr	r3, [pc, #368]	; (8006fd4 <checkAktifCalisma+0xb7c>)
 8006e62:	781b      	ldrb	r3, [r3, #0]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d144      	bne.n	8006ef2 <checkAktifCalisma+0xa9a>
 8006e68:	4b5b      	ldr	r3, [pc, #364]	; (8006fd8 <checkAktifCalisma+0xb80>)
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d003      	beq.n	8006e78 <checkAktifCalisma+0xa20>
 8006e70:	4b59      	ldr	r3, [pc, #356]	; (8006fd8 <checkAktifCalisma+0xb80>)
 8006e72:	781b      	ldrb	r3, [r3, #0]
 8006e74:	2b03      	cmp	r3, #3
 8006e76:	d13c      	bne.n	8006ef2 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8006e78:	2180      	movs	r1, #128	; 0x80
 8006e7a:	484c      	ldr	r0, [pc, #304]	; (8006fac <checkAktifCalisma+0xb54>)
 8006e7c:	f002 fef4 	bl	8009c68 <HAL_GPIO_ReadPin>
 8006e80:	4603      	mov	r3, r0
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d103      	bne.n	8006e8e <checkAktifCalisma+0xa36>
 8006e86:	4b55      	ldr	r3, [pc, #340]	; (8006fdc <checkAktifCalisma+0xb84>)
 8006e88:	781b      	ldrb	r3, [r3, #0]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d00b      	beq.n	8006ea6 <checkAktifCalisma+0xa4e>
 8006e8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006e92:	484e      	ldr	r0, [pc, #312]	; (8006fcc <checkAktifCalisma+0xb74>)
 8006e94:	f002 fee8 	bl	8009c68 <HAL_GPIO_ReadPin>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d129      	bne.n	8006ef2 <checkAktifCalisma+0xa9a>
 8006e9e:	4b4f      	ldr	r3, [pc, #316]	; (8006fdc <checkAktifCalisma+0xb84>)
 8006ea0:	781b      	ldrb	r3, [r3, #0]
 8006ea2:	2b01      	cmp	r3, #1
 8006ea4:	d125      	bne.n	8006ef2 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8006ea6:	2104      	movs	r1, #4
 8006ea8:	4840      	ldr	r0, [pc, #256]	; (8006fac <checkAktifCalisma+0xb54>)
 8006eaa:	f002 fedd 	bl	8009c68 <HAL_GPIO_ReadPin>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d003      	beq.n	8006ebc <checkAktifCalisma+0xa64>
 8006eb4:	4b4a      	ldr	r3, [pc, #296]	; (8006fe0 <checkAktifCalisma+0xb88>)
 8006eb6:	781b      	ldrb	r3, [r3, #0]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d11a      	bne.n	8006ef2 <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006ebc:	2102      	movs	r1, #2
 8006ebe:	483b      	ldr	r0, [pc, #236]	; (8006fac <checkAktifCalisma+0xb54>)
 8006ec0:	f002 fed2 	bl	8009c68 <HAL_GPIO_ReadPin>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d113      	bne.n	8006ef2 <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 8006eca:	4b46      	ldr	r3, [pc, #280]	; (8006fe4 <checkAktifCalisma+0xb8c>)
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	f083 0301 	eor.w	r3, r3, #1
 8006ed2:	b2db      	uxtb	r3, r3
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d00c      	beq.n	8006ef2 <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 8006ed8:	4b3d      	ldr	r3, [pc, #244]	; (8006fd0 <checkAktifCalisma+0xb78>)
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d008      	beq.n	8006ef2 <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 8006ee0:	4b41      	ldr	r3, [pc, #260]	; (8006fe8 <checkAktifCalisma+0xb90>)
 8006ee2:	2201      	movs	r2, #1
 8006ee4:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8006ee6:	4b36      	ldr	r3, [pc, #216]	; (8006fc0 <checkAktifCalisma+0xb68>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a40      	ldr	r2, [pc, #256]	; (8006fec <checkAktifCalisma+0xb94>)
 8006eec:	6013      	str	r3, [r2, #0]
			bekle();
 8006eee:	f7ff f87d 	bl	8005fec <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8006ef2:	4b33      	ldr	r3, [pc, #204]	; (8006fc0 <checkAktifCalisma+0xb68>)
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	4b3d      	ldr	r3, [pc, #244]	; (8006fec <checkAktifCalisma+0xb94>)
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	1ad3      	subs	r3, r2, r3
 8006efc:	4a3c      	ldr	r2, [pc, #240]	; (8006ff0 <checkAktifCalisma+0xb98>)
 8006efe:	7812      	ldrb	r2, [r2, #0]
 8006f00:	4293      	cmp	r3, r2
 8006f02:	d211      	bcs.n	8006f28 <checkAktifCalisma+0xad0>
 8006f04:	2104      	movs	r1, #4
 8006f06:	4829      	ldr	r0, [pc, #164]	; (8006fac <checkAktifCalisma+0xb54>)
 8006f08:	f002 feae 	bl	8009c68 <HAL_GPIO_ReadPin>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d00a      	beq.n	8006f28 <checkAktifCalisma+0xad0>
 8006f12:	4b33      	ldr	r3, [pc, #204]	; (8006fe0 <checkAktifCalisma+0xb88>)
 8006f14:	781b      	ldrb	r3, [r3, #0]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d006      	beq.n	8006f28 <checkAktifCalisma+0xad0>
 8006f1a:	4b2d      	ldr	r3, [pc, #180]	; (8006fd0 <checkAktifCalisma+0xb78>)
 8006f1c:	781b      	ldrb	r3, [r3, #0]
 8006f1e:	f083 0301 	eor.w	r3, r3, #1
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d002      	beq.n	8006f2e <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 8006f28:	4b2f      	ldr	r3, [pc, #188]	; (8006fe8 <checkAktifCalisma+0xb90>)
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006f2e:	4b29      	ldr	r3, [pc, #164]	; (8006fd4 <checkAktifCalisma+0xb7c>)
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	2b01      	cmp	r3, #1
 8006f34:	d160      	bne.n	8006ff8 <checkAktifCalisma+0xba0>
 8006f36:	4b28      	ldr	r3, [pc, #160]	; (8006fd8 <checkAktifCalisma+0xb80>)
 8006f38:	781b      	ldrb	r3, [r3, #0]
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d003      	beq.n	8006f46 <checkAktifCalisma+0xaee>
 8006f3e:	4b26      	ldr	r3, [pc, #152]	; (8006fd8 <checkAktifCalisma+0xb80>)
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	2b03      	cmp	r3, #3
 8006f44:	d158      	bne.n	8006ff8 <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8006f46:	2104      	movs	r1, #4
 8006f48:	4818      	ldr	r0, [pc, #96]	; (8006fac <checkAktifCalisma+0xb54>)
 8006f4a:	f002 fe8d 	bl	8009c68 <HAL_GPIO_ReadPin>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	2b01      	cmp	r3, #1
 8006f52:	d003      	beq.n	8006f5c <checkAktifCalisma+0xb04>
 8006f54:	4b22      	ldr	r3, [pc, #136]	; (8006fe0 <checkAktifCalisma+0xb88>)
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d14d      	bne.n	8006ff8 <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006f5c:	2102      	movs	r1, #2
 8006f5e:	4813      	ldr	r0, [pc, #76]	; (8006fac <checkAktifCalisma+0xb54>)
 8006f60:	f002 fe82 	bl	8009c68 <HAL_GPIO_ReadPin>
 8006f64:	4603      	mov	r3, r0
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d146      	bne.n	8006ff8 <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8006f6a:	2180      	movs	r1, #128	; 0x80
 8006f6c:	480f      	ldr	r0, [pc, #60]	; (8006fac <checkAktifCalisma+0xb54>)
 8006f6e:	f002 fe7b 	bl	8009c68 <HAL_GPIO_ReadPin>
 8006f72:	4603      	mov	r3, r0
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d103      	bne.n	8006f80 <checkAktifCalisma+0xb28>
 8006f78:	4b18      	ldr	r3, [pc, #96]	; (8006fdc <checkAktifCalisma+0xb84>)
 8006f7a:	781b      	ldrb	r3, [r3, #0]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d00b      	beq.n	8006f98 <checkAktifCalisma+0xb40>
 8006f80:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006f84:	4811      	ldr	r0, [pc, #68]	; (8006fcc <checkAktifCalisma+0xb74>)
 8006f86:	f002 fe6f 	bl	8009c68 <HAL_GPIO_ReadPin>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d133      	bne.n	8006ff8 <checkAktifCalisma+0xba0>
 8006f90:	4b12      	ldr	r3, [pc, #72]	; (8006fdc <checkAktifCalisma+0xb84>)
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d12f      	bne.n	8006ff8 <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 8006f98:	4b0d      	ldr	r3, [pc, #52]	; (8006fd0 <checkAktifCalisma+0xb78>)
 8006f9a:	781b      	ldrb	r3, [r3, #0]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d02b      	beq.n	8006ff8 <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 8006fa0:	4b14      	ldr	r3, [pc, #80]	; (8006ff4 <checkAktifCalisma+0xb9c>)
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	701a      	strb	r2, [r3, #0]
 8006fa6:	e02a      	b.n	8006ffe <checkAktifCalisma+0xba6>
 8006fa8:	20000c80 	.word	0x20000c80
 8006fac:	40011000 	.word	0x40011000
 8006fb0:	20000c84 	.word	0x20000c84
 8006fb4:	20000c9b 	.word	0x20000c9b
 8006fb8:	20000c9c 	.word	0x20000c9c
 8006fbc:	20000c7c 	.word	0x20000c7c
 8006fc0:	20000bd4 	.word	0x20000bd4
 8006fc4:	20000be0 	.word	0x20000be0
 8006fc8:	20000c5f 	.word	0x20000c5f
 8006fcc:	40010c00 	.word	0x40010c00
 8006fd0:	20000c8b 	.word	0x20000c8b
 8006fd4:	20000c52 	.word	0x20000c52
 8006fd8:	20000c51 	.word	0x20000c51
 8006fdc:	20000c55 	.word	0x20000c55
 8006fe0:	20000c4f 	.word	0x20000c4f
 8006fe4:	20000c78 	.word	0x20000c78
 8006fe8:	20000c8c 	.word	0x20000c8c
 8006fec:	20000bd8 	.word	0x20000bd8
 8006ff0:	20000c62 	.word	0x20000c62
 8006ff4:	20000c8d 	.word	0x20000c8d
		} else {
			kapi1butonkontrol=0;
 8006ff8:	4b8b      	ldr	r3, [pc, #556]	; (8007228 <checkAktifCalisma+0xdd0>)
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006ffe:	4b8b      	ldr	r3, [pc, #556]	; (800722c <checkAktifCalisma+0xdd4>)
 8007000:	781b      	ldrb	r3, [r3, #0]
 8007002:	2b02      	cmp	r3, #2
 8007004:	d121      	bne.n	800704a <checkAktifCalisma+0xbf2>
 8007006:	4b8a      	ldr	r3, [pc, #552]	; (8007230 <checkAktifCalisma+0xdd8>)
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	2b01      	cmp	r3, #1
 800700c:	d003      	beq.n	8007016 <checkAktifCalisma+0xbbe>
 800700e:	4b88      	ldr	r3, [pc, #544]	; (8007230 <checkAktifCalisma+0xdd8>)
 8007010:	781b      	ldrb	r3, [r3, #0]
 8007012:	2b03      	cmp	r3, #3
 8007014:	d119      	bne.n	800704a <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8007016:	2104      	movs	r1, #4
 8007018:	4886      	ldr	r0, [pc, #536]	; (8007234 <checkAktifCalisma+0xddc>)
 800701a:	f002 fe25 	bl	8009c68 <HAL_GPIO_ReadPin>
 800701e:	4603      	mov	r3, r0
 8007020:	2b01      	cmp	r3, #1
 8007022:	d003      	beq.n	800702c <checkAktifCalisma+0xbd4>
 8007024:	4b84      	ldr	r3, [pc, #528]	; (8007238 <checkAktifCalisma+0xde0>)
 8007026:	781b      	ldrb	r3, [r3, #0]
 8007028:	2b00      	cmp	r3, #0
 800702a:	d10e      	bne.n	800704a <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800702c:	2102      	movs	r1, #2
 800702e:	4881      	ldr	r0, [pc, #516]	; (8007234 <checkAktifCalisma+0xddc>)
 8007030:	f002 fe1a 	bl	8009c68 <HAL_GPIO_ReadPin>
 8007034:	4603      	mov	r3, r0
 8007036:	2b00      	cmp	r3, #0
 8007038:	d107      	bne.n	800704a <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 800703a:	4b80      	ldr	r3, [pc, #512]	; (800723c <checkAktifCalisma+0xde4>)
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d003      	beq.n	800704a <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 8007042:	4b7f      	ldr	r3, [pc, #508]	; (8007240 <checkAktifCalisma+0xde8>)
 8007044:	2201      	movs	r2, #1
 8007046:	701a      	strb	r2, [r3, #0]
 8007048:	e002      	b.n	8007050 <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 800704a:	4b7d      	ldr	r3, [pc, #500]	; (8007240 <checkAktifCalisma+0xde8>)
 800704c:	2200      	movs	r2, #0
 800704e:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8007050:	4b75      	ldr	r3, [pc, #468]	; (8007228 <checkAktifCalisma+0xdd0>)
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d107      	bne.n	8007068 <checkAktifCalisma+0xc10>
 8007058:	4b79      	ldr	r3, [pc, #484]	; (8007240 <checkAktifCalisma+0xde8>)
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d103      	bne.n	8007068 <checkAktifCalisma+0xc10>
 8007060:	4b78      	ldr	r3, [pc, #480]	; (8007244 <checkAktifCalisma+0xdec>)
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d005      	beq.n	8007074 <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8007068:	2201      	movs	r2, #1
 800706a:	2180      	movs	r1, #128	; 0x80
 800706c:	4876      	ldr	r0, [pc, #472]	; (8007248 <checkAktifCalisma+0xdf0>)
 800706e:	f002 fe12 	bl	8009c96 <HAL_GPIO_WritePin>
 8007072:	e004      	b.n	800707e <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007074:	2200      	movs	r2, #0
 8007076:	2180      	movs	r1, #128	; 0x80
 8007078:	4873      	ldr	r0, [pc, #460]	; (8007248 <checkAktifCalisma+0xdf0>)
 800707a:	f002 fe0c 	bl	8009c96 <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800707e:	4b73      	ldr	r3, [pc, #460]	; (800724c <checkAktifCalisma+0xdf4>)
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d141      	bne.n	800710a <checkAktifCalisma+0xcb2>
 8007086:	4b6a      	ldr	r3, [pc, #424]	; (8007230 <checkAktifCalisma+0xdd8>)
 8007088:	781b      	ldrb	r3, [r3, #0]
 800708a:	2b01      	cmp	r3, #1
 800708c:	d003      	beq.n	8007096 <checkAktifCalisma+0xc3e>
 800708e:	4b68      	ldr	r3, [pc, #416]	; (8007230 <checkAktifCalisma+0xdd8>)
 8007090:	781b      	ldrb	r3, [r3, #0]
 8007092:	2b03      	cmp	r3, #3
 8007094:	d139      	bne.n	800710a <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8007096:	f44f 7180 	mov.w	r1, #256	; 0x100
 800709a:	4866      	ldr	r0, [pc, #408]	; (8007234 <checkAktifCalisma+0xddc>)
 800709c:	f002 fde4 	bl	8009c68 <HAL_GPIO_ReadPin>
 80070a0:	4603      	mov	r3, r0
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d103      	bne.n	80070ae <checkAktifCalisma+0xc56>
 80070a6:	4b6a      	ldr	r3, [pc, #424]	; (8007250 <checkAktifCalisma+0xdf8>)
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d00b      	beq.n	80070c6 <checkAktifCalisma+0xc6e>
 80070ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80070b2:	4868      	ldr	r0, [pc, #416]	; (8007254 <checkAktifCalisma+0xdfc>)
 80070b4:	f002 fdd8 	bl	8009c68 <HAL_GPIO_ReadPin>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d125      	bne.n	800710a <checkAktifCalisma+0xcb2>
 80070be:	4b64      	ldr	r3, [pc, #400]	; (8007250 <checkAktifCalisma+0xdf8>)
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	2b01      	cmp	r3, #1
 80070c4:	d121      	bne.n	800710a <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80070c6:	2102      	movs	r1, #2
 80070c8:	485a      	ldr	r0, [pc, #360]	; (8007234 <checkAktifCalisma+0xddc>)
 80070ca:	f002 fdcd 	bl	8009c68 <HAL_GPIO_ReadPin>
 80070ce:	4603      	mov	r3, r0
 80070d0:	2b01      	cmp	r3, #1
 80070d2:	d11a      	bne.n	800710a <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80070d4:	2104      	movs	r1, #4
 80070d6:	4857      	ldr	r0, [pc, #348]	; (8007234 <checkAktifCalisma+0xddc>)
 80070d8:	f002 fdc6 	bl	8009c68 <HAL_GPIO_ReadPin>
 80070dc:	4603      	mov	r3, r0
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d113      	bne.n	800710a <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 80070e2:	4b56      	ldr	r3, [pc, #344]	; (800723c <checkAktifCalisma+0xde4>)
 80070e4:	781b      	ldrb	r3, [r3, #0]
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d00f      	beq.n	800710a <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 80070ea:	4b5b      	ldr	r3, [pc, #364]	; (8007258 <checkAktifCalisma+0xe00>)
 80070ec:	781b      	ldrb	r3, [r3, #0]
 80070ee:	f083 0301 	eor.w	r3, r3, #1
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d008      	beq.n	800710a <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 80070f8:	4b58      	ldr	r3, [pc, #352]	; (800725c <checkAktifCalisma+0xe04>)
 80070fa:	2201      	movs	r2, #1
 80070fc:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80070fe:	4b58      	ldr	r3, [pc, #352]	; (8007260 <checkAktifCalisma+0xe08>)
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	4a58      	ldr	r2, [pc, #352]	; (8007264 <checkAktifCalisma+0xe0c>)
 8007104:	6013      	str	r3, [r2, #0]
			bekle();
 8007106:	f7fe ff71 	bl	8005fec <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 800710a:	4b55      	ldr	r3, [pc, #340]	; (8007260 <checkAktifCalisma+0xe08>)
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	4b55      	ldr	r3, [pc, #340]	; (8007264 <checkAktifCalisma+0xe0c>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	1ad3      	subs	r3, r2, r3
 8007114:	4a54      	ldr	r2, [pc, #336]	; (8007268 <checkAktifCalisma+0xe10>)
 8007116:	7812      	ldrb	r2, [r2, #0]
 8007118:	4293      	cmp	r3, r2
 800711a:	d20d      	bcs.n	8007138 <checkAktifCalisma+0xce0>
 800711c:	2102      	movs	r1, #2
 800711e:	4845      	ldr	r0, [pc, #276]	; (8007234 <checkAktifCalisma+0xddc>)
 8007120:	f002 fda2 	bl	8009c68 <HAL_GPIO_ReadPin>
 8007124:	4603      	mov	r3, r0
 8007126:	2b00      	cmp	r3, #0
 8007128:	d006      	beq.n	8007138 <checkAktifCalisma+0xce0>
 800712a:	4b44      	ldr	r3, [pc, #272]	; (800723c <checkAktifCalisma+0xde4>)
 800712c:	781b      	ldrb	r3, [r3, #0]
 800712e:	f083 0301 	eor.w	r3, r3, #1
 8007132:	b2db      	uxtb	r3, r3
 8007134:	2b00      	cmp	r3, #0
 8007136:	d002      	beq.n	800713e <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 8007138:	4b48      	ldr	r3, [pc, #288]	; (800725c <checkAktifCalisma+0xe04>)
 800713a:	2200      	movs	r2, #0
 800713c:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800713e:	4b43      	ldr	r3, [pc, #268]	; (800724c <checkAktifCalisma+0xdf4>)
 8007140:	781b      	ldrb	r3, [r3, #0]
 8007142:	2b01      	cmp	r3, #1
 8007144:	d135      	bne.n	80071b2 <checkAktifCalisma+0xd5a>
 8007146:	4b3a      	ldr	r3, [pc, #232]	; (8007230 <checkAktifCalisma+0xdd8>)
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	2b01      	cmp	r3, #1
 800714c:	d003      	beq.n	8007156 <checkAktifCalisma+0xcfe>
 800714e:	4b38      	ldr	r3, [pc, #224]	; (8007230 <checkAktifCalisma+0xdd8>)
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	2b03      	cmp	r3, #3
 8007154:	d12d      	bne.n	80071b2 <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 8007156:	f44f 7180 	mov.w	r1, #256	; 0x100
 800715a:	4836      	ldr	r0, [pc, #216]	; (8007234 <checkAktifCalisma+0xddc>)
 800715c:	f002 fd84 	bl	8009c68 <HAL_GPIO_ReadPin>
 8007160:	4603      	mov	r3, r0
 8007162:	2b00      	cmp	r3, #0
 8007164:	d103      	bne.n	800716e <checkAktifCalisma+0xd16>
 8007166:	4b3a      	ldr	r3, [pc, #232]	; (8007250 <checkAktifCalisma+0xdf8>)
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d00b      	beq.n	8007186 <checkAktifCalisma+0xd2e>
 800716e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007172:	4838      	ldr	r0, [pc, #224]	; (8007254 <checkAktifCalisma+0xdfc>)
 8007174:	f002 fd78 	bl	8009c68 <HAL_GPIO_ReadPin>
 8007178:	4603      	mov	r3, r0
 800717a:	2b00      	cmp	r3, #0
 800717c:	d119      	bne.n	80071b2 <checkAktifCalisma+0xd5a>
 800717e:	4b34      	ldr	r3, [pc, #208]	; (8007250 <checkAktifCalisma+0xdf8>)
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	2b01      	cmp	r3, #1
 8007184:	d115      	bne.n	80071b2 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007186:	2102      	movs	r1, #2
 8007188:	482a      	ldr	r0, [pc, #168]	; (8007234 <checkAktifCalisma+0xddc>)
 800718a:	f002 fd6d 	bl	8009c68 <HAL_GPIO_ReadPin>
 800718e:	4603      	mov	r3, r0
 8007190:	2b01      	cmp	r3, #1
 8007192:	d10e      	bne.n	80071b2 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8007194:	2104      	movs	r1, #4
 8007196:	4827      	ldr	r0, [pc, #156]	; (8007234 <checkAktifCalisma+0xddc>)
 8007198:	f002 fd66 	bl	8009c68 <HAL_GPIO_ReadPin>
 800719c:	4603      	mov	r3, r0
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d107      	bne.n	80071b2 <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 80071a2:	4b26      	ldr	r3, [pc, #152]	; (800723c <checkAktifCalisma+0xde4>)
 80071a4:	781b      	ldrb	r3, [r3, #0]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d003      	beq.n	80071b2 <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 80071aa:	4b30      	ldr	r3, [pc, #192]	; (800726c <checkAktifCalisma+0xe14>)
 80071ac:	2201      	movs	r2, #1
 80071ae:	701a      	strb	r2, [r3, #0]
 80071b0:	e002      	b.n	80071b8 <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 80071b2:	4b2e      	ldr	r3, [pc, #184]	; (800726c <checkAktifCalisma+0xe14>)
 80071b4:	2200      	movs	r2, #0
 80071b6:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80071b8:	4b24      	ldr	r3, [pc, #144]	; (800724c <checkAktifCalisma+0xdf4>)
 80071ba:	781b      	ldrb	r3, [r3, #0]
 80071bc:	2b02      	cmp	r3, #2
 80071be:	d11d      	bne.n	80071fc <checkAktifCalisma+0xda4>
 80071c0:	4b1b      	ldr	r3, [pc, #108]	; (8007230 <checkAktifCalisma+0xdd8>)
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	2b01      	cmp	r3, #1
 80071c6:	d003      	beq.n	80071d0 <checkAktifCalisma+0xd78>
 80071c8:	4b19      	ldr	r3, [pc, #100]	; (8007230 <checkAktifCalisma+0xdd8>)
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	2b03      	cmp	r3, #3
 80071ce:	d115      	bne.n	80071fc <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80071d0:	2102      	movs	r1, #2
 80071d2:	4818      	ldr	r0, [pc, #96]	; (8007234 <checkAktifCalisma+0xddc>)
 80071d4:	f002 fd48 	bl	8009c68 <HAL_GPIO_ReadPin>
 80071d8:	4603      	mov	r3, r0
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d10e      	bne.n	80071fc <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80071de:	2104      	movs	r1, #4
 80071e0:	4814      	ldr	r0, [pc, #80]	; (8007234 <checkAktifCalisma+0xddc>)
 80071e2:	f002 fd41 	bl	8009c68 <HAL_GPIO_ReadPin>
 80071e6:	4603      	mov	r3, r0
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d107      	bne.n	80071fc <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 80071ec:	4b13      	ldr	r3, [pc, #76]	; (800723c <checkAktifCalisma+0xde4>)
 80071ee:	781b      	ldrb	r3, [r3, #0]
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d003      	beq.n	80071fc <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 80071f4:	4b1e      	ldr	r3, [pc, #120]	; (8007270 <checkAktifCalisma+0xe18>)
 80071f6:	2201      	movs	r2, #1
 80071f8:	701a      	strb	r2, [r3, #0]
 80071fa:	e002      	b.n	8007202 <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 80071fc:	4b1c      	ldr	r3, [pc, #112]	; (8007270 <checkAktifCalisma+0xe18>)
 80071fe:	2200      	movs	r2, #0
 8007200:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8007202:	4b1a      	ldr	r3, [pc, #104]	; (800726c <checkAktifCalisma+0xe14>)
 8007204:	781b      	ldrb	r3, [r3, #0]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d107      	bne.n	800721a <checkAktifCalisma+0xdc2>
 800720a:	4b19      	ldr	r3, [pc, #100]	; (8007270 <checkAktifCalisma+0xe18>)
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d103      	bne.n	800721a <checkAktifCalisma+0xdc2>
 8007212:	4b12      	ldr	r3, [pc, #72]	; (800725c <checkAktifCalisma+0xe04>)
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d02c      	beq.n	8007274 <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 800721a:	2201      	movs	r2, #1
 800721c:	2140      	movs	r1, #64	; 0x40
 800721e:	480a      	ldr	r0, [pc, #40]	; (8007248 <checkAktifCalisma+0xdf0>)
 8007220:	f002 fd39 	bl	8009c96 <HAL_GPIO_WritePin>
 8007224:	e02b      	b.n	800727e <checkAktifCalisma+0xe26>
 8007226:	bf00      	nop
 8007228:	20000c8d 	.word	0x20000c8d
 800722c:	20000c52 	.word	0x20000c52
 8007230:	20000c51 	.word	0x20000c51
 8007234:	40011000 	.word	0x40011000
 8007238:	20000c4f 	.word	0x20000c4f
 800723c:	20000c8b 	.word	0x20000c8b
 8007240:	20000c8e 	.word	0x20000c8e
 8007244:	20000c8c 	.word	0x20000c8c
 8007248:	40010800 	.word	0x40010800
 800724c:	20000c53 	.word	0x20000c53
 8007250:	20000c55 	.word	0x20000c55
 8007254:	40010c00 	.word	0x40010c00
 8007258:	20000c78 	.word	0x20000c78
 800725c:	20000c8f 	.word	0x20000c8f
 8007260:	20000bd4 	.word	0x20000bd4
 8007264:	20000bd8 	.word	0x20000bd8
 8007268:	20000c63 	.word	0x20000c63
 800726c:	20000c90 	.word	0x20000c90
 8007270:	20000c91 	.word	0x20000c91
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007274:	2200      	movs	r2, #0
 8007276:	2140      	movs	r1, #64	; 0x40
 8007278:	488d      	ldr	r0, [pc, #564]	; (80074b0 <checkAktifCalisma+0x1058>)
 800727a:	f002 fd0c 	bl	8009c96 <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 800727e:	4b8d      	ldr	r3, [pc, #564]	; (80074b4 <checkAktifCalisma+0x105c>)
 8007280:	781b      	ldrb	r3, [r3, #0]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d003      	beq.n	800728e <checkAktifCalisma+0xe36>
 8007286:	4b8b      	ldr	r3, [pc, #556]	; (80074b4 <checkAktifCalisma+0x105c>)
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	2b02      	cmp	r3, #2
 800728c:	d115      	bne.n	80072ba <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800728e:	2104      	movs	r1, #4
 8007290:	4889      	ldr	r0, [pc, #548]	; (80074b8 <checkAktifCalisma+0x1060>)
 8007292:	f002 fce9 	bl	8009c68 <HAL_GPIO_ReadPin>
 8007296:	4603      	mov	r3, r0
 8007298:	2b01      	cmp	r3, #1
 800729a:	d003      	beq.n	80072a4 <checkAktifCalisma+0xe4c>
 800729c:	4b87      	ldr	r3, [pc, #540]	; (80074bc <checkAktifCalisma+0x1064>)
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d10a      	bne.n	80072ba <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 80072a4:	2102      	movs	r1, #2
 80072a6:	4884      	ldr	r0, [pc, #528]	; (80074b8 <checkAktifCalisma+0x1060>)
 80072a8:	f002 fcde 	bl	8009c68 <HAL_GPIO_ReadPin>
 80072ac:	4603      	mov	r3, r0
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d103      	bne.n	80072ba <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 80072b2:	4b83      	ldr	r3, [pc, #524]	; (80074c0 <checkAktifCalisma+0x1068>)
 80072b4:	2201      	movs	r2, #1
 80072b6:	701a      	strb	r2, [r3, #0]
 80072b8:	e002      	b.n	80072c0 <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 80072ba:	4b81      	ldr	r3, [pc, #516]	; (80074c0 <checkAktifCalisma+0x1068>)
 80072bc:	2200      	movs	r2, #0
 80072be:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 80072c0:	4b7c      	ldr	r3, [pc, #496]	; (80074b4 <checkAktifCalisma+0x105c>)
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	2b01      	cmp	r3, #1
 80072c6:	d003      	beq.n	80072d0 <checkAktifCalisma+0xe78>
 80072c8:	4b7a      	ldr	r3, [pc, #488]	; (80074b4 <checkAktifCalisma+0x105c>)
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	2b02      	cmp	r3, #2
 80072ce:	d111      	bne.n	80072f4 <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80072d0:	2102      	movs	r1, #2
 80072d2:	4879      	ldr	r0, [pc, #484]	; (80074b8 <checkAktifCalisma+0x1060>)
 80072d4:	f002 fcc8 	bl	8009c68 <HAL_GPIO_ReadPin>
 80072d8:	4603      	mov	r3, r0
 80072da:	2b01      	cmp	r3, #1
 80072dc:	d10a      	bne.n	80072f4 <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 80072de:	2104      	movs	r1, #4
 80072e0:	4875      	ldr	r0, [pc, #468]	; (80074b8 <checkAktifCalisma+0x1060>)
 80072e2:	f002 fcc1 	bl	8009c68 <HAL_GPIO_ReadPin>
 80072e6:	4603      	mov	r3, r0
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d103      	bne.n	80072f4 <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 80072ec:	4b75      	ldr	r3, [pc, #468]	; (80074c4 <checkAktifCalisma+0x106c>)
 80072ee:	2201      	movs	r2, #1
 80072f0:	701a      	strb	r2, [r3, #0]
 80072f2:	e002      	b.n	80072fa <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 80072f4:	4b73      	ldr	r3, [pc, #460]	; (80074c4 <checkAktifCalisma+0x106c>)
 80072f6:	2200      	movs	r2, #0
 80072f8:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 80072fa:	4b71      	ldr	r3, [pc, #452]	; (80074c0 <checkAktifCalisma+0x1068>)
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d00f      	beq.n	8007322 <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 8007302:	4b71      	ldr	r3, [pc, #452]	; (80074c8 <checkAktifCalisma+0x1070>)
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	2b01      	cmp	r3, #1
 8007308:	d10b      	bne.n	8007322 <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 800730a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800730e:	486f      	ldr	r0, [pc, #444]	; (80074cc <checkAktifCalisma+0x1074>)
 8007310:	f002 fcaa 	bl	8009c68 <HAL_GPIO_ReadPin>
 8007314:	4603      	mov	r3, r0
 8007316:	2b00      	cmp	r3, #0
 8007318:	d103      	bne.n	8007322 <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 800731a:	4b6d      	ldr	r3, [pc, #436]	; (80074d0 <checkAktifCalisma+0x1078>)
 800731c:	2201      	movs	r2, #1
 800731e:	701a      	strb	r2, [r3, #0]
 8007320:	e002      	b.n	8007328 <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 8007322:	4b6b      	ldr	r3, [pc, #428]	; (80074d0 <checkAktifCalisma+0x1078>)
 8007324:	2200      	movs	r2, #0
 8007326:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8007328:	4b66      	ldr	r3, [pc, #408]	; (80074c4 <checkAktifCalisma+0x106c>)
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d00f      	beq.n	8007350 <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8007330:	4b65      	ldr	r3, [pc, #404]	; (80074c8 <checkAktifCalisma+0x1070>)
 8007332:	781b      	ldrb	r3, [r3, #0]
 8007334:	2b01      	cmp	r3, #1
 8007336:	d10b      	bne.n	8007350 <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8007338:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800733c:	4863      	ldr	r0, [pc, #396]	; (80074cc <checkAktifCalisma+0x1074>)
 800733e:	f002 fc93 	bl	8009c68 <HAL_GPIO_ReadPin>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d103      	bne.n	8007350 <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8007348:	4b62      	ldr	r3, [pc, #392]	; (80074d4 <checkAktifCalisma+0x107c>)
 800734a:	2201      	movs	r2, #1
 800734c:	701a      	strb	r2, [r3, #0]
 800734e:	e002      	b.n	8007356 <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8007350:	4b60      	ldr	r3, [pc, #384]	; (80074d4 <checkAktifCalisma+0x107c>)
 8007352:	2200      	movs	r2, #0
 8007354:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8007356:	4b60      	ldr	r3, [pc, #384]	; (80074d8 <checkAktifCalisma+0x1080>)
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d137      	bne.n	80073ce <checkAktifCalisma+0xf76>
 800735e:	4b5f      	ldr	r3, [pc, #380]	; (80074dc <checkAktifCalisma+0x1084>)
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	2b02      	cmp	r3, #2
 8007364:	d003      	beq.n	800736e <checkAktifCalisma+0xf16>
 8007366:	4b5d      	ldr	r3, [pc, #372]	; (80074dc <checkAktifCalisma+0x1084>)
 8007368:	781b      	ldrb	r3, [r3, #0]
 800736a:	2b03      	cmp	r3, #3
 800736c:	d12f      	bne.n	80073ce <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 800736e:	4b54      	ldr	r3, [pc, #336]	; (80074c0 <checkAktifCalisma+0x1068>)
 8007370:	781b      	ldrb	r3, [r3, #0]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d103      	bne.n	800737e <checkAktifCalisma+0xf26>
 8007376:	4b53      	ldr	r3, [pc, #332]	; (80074c4 <checkAktifCalisma+0x106c>)
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d027      	beq.n	80073ce <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 800737e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007382:	484d      	ldr	r0, [pc, #308]	; (80074b8 <checkAktifCalisma+0x1060>)
 8007384:	f002 fc70 	bl	8009c68 <HAL_GPIO_ReadPin>
 8007388:	4603      	mov	r3, r0
 800738a:	2b00      	cmp	r3, #0
 800738c:	d103      	bne.n	8007396 <checkAktifCalisma+0xf3e>
 800738e:	4b4e      	ldr	r3, [pc, #312]	; (80074c8 <checkAktifCalisma+0x1070>)
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d007      	beq.n	80073a6 <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8007396:	4b4e      	ldr	r3, [pc, #312]	; (80074d0 <checkAktifCalisma+0x1078>)
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d103      	bne.n	80073a6 <checkAktifCalisma+0xf4e>
 800739e:	4b4d      	ldr	r3, [pc, #308]	; (80074d4 <checkAktifCalisma+0x107c>)
 80073a0:	781b      	ldrb	r3, [r3, #0]
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d013      	beq.n	80073ce <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 80073a6:	4b4e      	ldr	r3, [pc, #312]	; (80074e0 <checkAktifCalisma+0x1088>)
 80073a8:	781b      	ldrb	r3, [r3, #0]
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d00f      	beq.n	80073ce <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 80073ae:	4b4d      	ldr	r3, [pc, #308]	; (80074e4 <checkAktifCalisma+0x108c>)
 80073b0:	781b      	ldrb	r3, [r3, #0]
 80073b2:	f083 0301 	eor.w	r3, r3, #1
 80073b6:	b2db      	uxtb	r3, r3
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d008      	beq.n	80073ce <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 80073bc:	4b4a      	ldr	r3, [pc, #296]	; (80074e8 <checkAktifCalisma+0x1090>)
 80073be:	2201      	movs	r2, #1
 80073c0:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80073c2:	4b4a      	ldr	r3, [pc, #296]	; (80074ec <checkAktifCalisma+0x1094>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a4a      	ldr	r2, [pc, #296]	; (80074f0 <checkAktifCalisma+0x1098>)
 80073c8:	6013      	str	r3, [r2, #0]
			bekle();
 80073ca:	f7fe fe0f 	bl	8005fec <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 80073ce:	4b47      	ldr	r3, [pc, #284]	; (80074ec <checkAktifCalisma+0x1094>)
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	4b47      	ldr	r3, [pc, #284]	; (80074f0 <checkAktifCalisma+0x1098>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	1ad3      	subs	r3, r2, r3
 80073d8:	4a46      	ldr	r2, [pc, #280]	; (80074f4 <checkAktifCalisma+0x109c>)
 80073da:	7812      	ldrb	r2, [r2, #0]
 80073dc:	4293      	cmp	r3, r2
 80073de:	d214      	bcs.n	800740a <checkAktifCalisma+0xfb2>
 80073e0:	4b37      	ldr	r3, [pc, #220]	; (80074c0 <checkAktifCalisma+0x1068>)
 80073e2:	781b      	ldrb	r3, [r3, #0]
 80073e4:	f083 0301 	eor.w	r3, r3, #1
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d006      	beq.n	80073fc <checkAktifCalisma+0xfa4>
 80073ee:	4b35      	ldr	r3, [pc, #212]	; (80074c4 <checkAktifCalisma+0x106c>)
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	f083 0301 	eor.w	r3, r3, #1
 80073f6:	b2db      	uxtb	r3, r3
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d106      	bne.n	800740a <checkAktifCalisma+0xfb2>
 80073fc:	4b38      	ldr	r3, [pc, #224]	; (80074e0 <checkAktifCalisma+0x1088>)
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	f083 0301 	eor.w	r3, r3, #1
 8007404:	b2db      	uxtb	r3, r3
 8007406:	2b00      	cmp	r3, #0
 8007408:	d002      	beq.n	8007410 <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 800740a:	4b37      	ldr	r3, [pc, #220]	; (80074e8 <checkAktifCalisma+0x1090>)
 800740c:	2200      	movs	r2, #0
 800740e:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8007410:	4b31      	ldr	r3, [pc, #196]	; (80074d8 <checkAktifCalisma+0x1080>)
 8007412:	781b      	ldrb	r3, [r3, #0]
 8007414:	2b01      	cmp	r3, #1
 8007416:	d12b      	bne.n	8007470 <checkAktifCalisma+0x1018>
 8007418:	4b30      	ldr	r3, [pc, #192]	; (80074dc <checkAktifCalisma+0x1084>)
 800741a:	781b      	ldrb	r3, [r3, #0]
 800741c:	2b02      	cmp	r3, #2
 800741e:	d003      	beq.n	8007428 <checkAktifCalisma+0xfd0>
 8007420:	4b2e      	ldr	r3, [pc, #184]	; (80074dc <checkAktifCalisma+0x1084>)
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	2b03      	cmp	r3, #3
 8007426:	d123      	bne.n	8007470 <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8007428:	4b25      	ldr	r3, [pc, #148]	; (80074c0 <checkAktifCalisma+0x1068>)
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d103      	bne.n	8007438 <checkAktifCalisma+0xfe0>
 8007430:	4b24      	ldr	r3, [pc, #144]	; (80074c4 <checkAktifCalisma+0x106c>)
 8007432:	781b      	ldrb	r3, [r3, #0]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d01b      	beq.n	8007470 <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8007438:	f44f 7100 	mov.w	r1, #512	; 0x200
 800743c:	481e      	ldr	r0, [pc, #120]	; (80074b8 <checkAktifCalisma+0x1060>)
 800743e:	f002 fc13 	bl	8009c68 <HAL_GPIO_ReadPin>
 8007442:	4603      	mov	r3, r0
 8007444:	2b00      	cmp	r3, #0
 8007446:	d103      	bne.n	8007450 <checkAktifCalisma+0xff8>
 8007448:	4b1f      	ldr	r3, [pc, #124]	; (80074c8 <checkAktifCalisma+0x1070>)
 800744a:	781b      	ldrb	r3, [r3, #0]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d007      	beq.n	8007460 <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8007450:	4b1f      	ldr	r3, [pc, #124]	; (80074d0 <checkAktifCalisma+0x1078>)
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d103      	bne.n	8007460 <checkAktifCalisma+0x1008>
 8007458:	4b1e      	ldr	r3, [pc, #120]	; (80074d4 <checkAktifCalisma+0x107c>)
 800745a:	781b      	ldrb	r3, [r3, #0]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d007      	beq.n	8007470 <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8007460:	4b1f      	ldr	r3, [pc, #124]	; (80074e0 <checkAktifCalisma+0x1088>)
 8007462:	781b      	ldrb	r3, [r3, #0]
 8007464:	2b00      	cmp	r3, #0
 8007466:	d003      	beq.n	8007470 <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8007468:	4b23      	ldr	r3, [pc, #140]	; (80074f8 <checkAktifCalisma+0x10a0>)
 800746a:	2201      	movs	r2, #1
 800746c:	701a      	strb	r2, [r3, #0]
 800746e:	e002      	b.n	8007476 <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8007470:	4b21      	ldr	r3, [pc, #132]	; (80074f8 <checkAktifCalisma+0x10a0>)
 8007472:	2200      	movs	r2, #0
 8007474:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8007476:	4b18      	ldr	r3, [pc, #96]	; (80074d8 <checkAktifCalisma+0x1080>)
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	2b02      	cmp	r3, #2
 800747c:	d140      	bne.n	8007500 <checkAktifCalisma+0x10a8>
 800747e:	4b17      	ldr	r3, [pc, #92]	; (80074dc <checkAktifCalisma+0x1084>)
 8007480:	781b      	ldrb	r3, [r3, #0]
 8007482:	2b02      	cmp	r3, #2
 8007484:	d003      	beq.n	800748e <checkAktifCalisma+0x1036>
 8007486:	4b15      	ldr	r3, [pc, #84]	; (80074dc <checkAktifCalisma+0x1084>)
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	2b03      	cmp	r3, #3
 800748c:	d138      	bne.n	8007500 <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 800748e:	4b0c      	ldr	r3, [pc, #48]	; (80074c0 <checkAktifCalisma+0x1068>)
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d103      	bne.n	800749e <checkAktifCalisma+0x1046>
 8007496:	4b0b      	ldr	r3, [pc, #44]	; (80074c4 <checkAktifCalisma+0x106c>)
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d030      	beq.n	8007500 <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 800749e:	4b10      	ldr	r3, [pc, #64]	; (80074e0 <checkAktifCalisma+0x1088>)
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d02c      	beq.n	8007500 <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 80074a6:	4b15      	ldr	r3, [pc, #84]	; (80074fc <checkAktifCalisma+0x10a4>)
 80074a8:	2201      	movs	r2, #1
 80074aa:	701a      	strb	r2, [r3, #0]
 80074ac:	e02b      	b.n	8007506 <checkAktifCalisma+0x10ae>
 80074ae:	bf00      	nop
 80074b0:	40010800 	.word	0x40010800
 80074b4:	20000c56 	.word	0x20000c56
 80074b8:	40011000 	.word	0x40011000
 80074bc:	20000c4f 	.word	0x20000c4f
 80074c0:	20000c95 	.word	0x20000c95
 80074c4:	20000c96 	.word	0x20000c96
 80074c8:	20000c55 	.word	0x20000c55
 80074cc:	40010c00 	.word	0x40010c00
 80074d0:	20000ca5 	.word	0x20000ca5
 80074d4:	20000ca6 	.word	0x20000ca6
 80074d8:	20000c54 	.word	0x20000c54
 80074dc:	20000c51 	.word	0x20000c51
 80074e0:	20000c8b 	.word	0x20000c8b
 80074e4:	20000c78 	.word	0x20000c78
 80074e8:	20000c92 	.word	0x20000c92
 80074ec:	20000bd4 	.word	0x20000bd4
 80074f0:	20000bd8 	.word	0x20000bd8
 80074f4:	20000c64 	.word	0x20000c64
 80074f8:	20000c93 	.word	0x20000c93
 80074fc:	20000c94 	.word	0x20000c94
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 8007500:	4b89      	ldr	r3, [pc, #548]	; (8007728 <checkAktifCalisma+0x12d0>)
 8007502:	2200      	movs	r2, #0
 8007504:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 8007506:	4b89      	ldr	r3, [pc, #548]	; (800772c <checkAktifCalisma+0x12d4>)
 8007508:	781b      	ldrb	r3, [r3, #0]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d107      	bne.n	800751e <checkAktifCalisma+0x10c6>
 800750e:	4b88      	ldr	r3, [pc, #544]	; (8007730 <checkAktifCalisma+0x12d8>)
 8007510:	781b      	ldrb	r3, [r3, #0]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d103      	bne.n	800751e <checkAktifCalisma+0x10c6>
 8007516:	4b84      	ldr	r3, [pc, #528]	; (8007728 <checkAktifCalisma+0x12d0>)
 8007518:	781b      	ldrb	r3, [r3, #0]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d005      	beq.n	800752a <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 800751e:	2201      	movs	r2, #1
 8007520:	2120      	movs	r1, #32
 8007522:	4884      	ldr	r0, [pc, #528]	; (8007734 <checkAktifCalisma+0x12dc>)
 8007524:	f002 fbb7 	bl	8009c96 <HAL_GPIO_WritePin>
 8007528:	e004      	b.n	8007534 <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800752a:	2200      	movs	r2, #0
 800752c:	2120      	movs	r1, #32
 800752e:	4881      	ldr	r0, [pc, #516]	; (8007734 <checkAktifCalisma+0x12dc>)
 8007530:	f002 fbb1 	bl	8009c96 <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 8007534:	4b80      	ldr	r3, [pc, #512]	; (8007738 <checkAktifCalisma+0x12e0>)
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d00e      	beq.n	800755a <checkAktifCalisma+0x1102>
 800753c:	2102      	movs	r1, #2
 800753e:	487f      	ldr	r0, [pc, #508]	; (800773c <checkAktifCalisma+0x12e4>)
 8007540:	f002 fb92 	bl	8009c68 <HAL_GPIO_ReadPin>
 8007544:	4603      	mov	r3, r0
 8007546:	2b01      	cmp	r3, #1
 8007548:	d107      	bne.n	800755a <checkAktifCalisma+0x1102>
 800754a:	4b7d      	ldr	r3, [pc, #500]	; (8007740 <checkAktifCalisma+0x12e8>)
 800754c:	781b      	ldrb	r3, [r3, #0]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d103      	bne.n	800755a <checkAktifCalisma+0x1102>
 8007552:	4b7c      	ldr	r3, [pc, #496]	; (8007744 <checkAktifCalisma+0x12ec>)
 8007554:	781b      	ldrb	r3, [r3, #0]
 8007556:	2b00      	cmp	r3, #0
 8007558:	d112      	bne.n	8007580 <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 800755a:	4b7b      	ldr	r3, [pc, #492]	; (8007748 <checkAktifCalisma+0x12f0>)
 800755c:	781b      	ldrb	r3, [r3, #0]
 800755e:	2b00      	cmp	r3, #0
 8007560:	d066      	beq.n	8007630 <checkAktifCalisma+0x11d8>
 8007562:	2104      	movs	r1, #4
 8007564:	4875      	ldr	r0, [pc, #468]	; (800773c <checkAktifCalisma+0x12e4>)
 8007566:	f002 fb7f 	bl	8009c68 <HAL_GPIO_ReadPin>
 800756a:	4603      	mov	r3, r0
 800756c:	2b01      	cmp	r3, #1
 800756e:	d15f      	bne.n	8007630 <checkAktifCalisma+0x11d8>
 8007570:	4b73      	ldr	r3, [pc, #460]	; (8007740 <checkAktifCalisma+0x12e8>)
 8007572:	781b      	ldrb	r3, [r3, #0]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d05b      	beq.n	8007630 <checkAktifCalisma+0x11d8>
 8007578:	4b72      	ldr	r3, [pc, #456]	; (8007744 <checkAktifCalisma+0x12ec>)
 800757a:	781b      	ldrb	r3, [r3, #0]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d057      	beq.n	8007630 <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 8007580:	4b72      	ldr	r3, [pc, #456]	; (800774c <checkAktifCalisma+0x12f4>)
 8007582:	781b      	ldrb	r3, [r3, #0]
 8007584:	3301      	adds	r3, #1
 8007586:	b2da      	uxtb	r2, r3
 8007588:	4b70      	ldr	r3, [pc, #448]	; (800774c <checkAktifCalisma+0x12f4>)
 800758a:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 800758c:	4b6f      	ldr	r3, [pc, #444]	; (800774c <checkAktifCalisma+0x12f4>)
 800758e:	781b      	ldrb	r3, [r3, #0]
 8007590:	2b09      	cmp	r3, #9
 8007592:	d908      	bls.n	80075a6 <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8007594:	4b6d      	ldr	r3, [pc, #436]	; (800774c <checkAktifCalisma+0x12f4>)
 8007596:	2200      	movs	r2, #0
 8007598:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 800759a:	4b6d      	ldr	r3, [pc, #436]	; (8007750 <checkAktifCalisma+0x12f8>)
 800759c:	781b      	ldrb	r3, [r3, #0]
 800759e:	3301      	adds	r3, #1
 80075a0:	b2da      	uxtb	r2, r3
 80075a2:	4b6b      	ldr	r3, [pc, #428]	; (8007750 <checkAktifCalisma+0x12f8>)
 80075a4:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 80075a6:	4b6a      	ldr	r3, [pc, #424]	; (8007750 <checkAktifCalisma+0x12f8>)
 80075a8:	781b      	ldrb	r3, [r3, #0]
 80075aa:	2b09      	cmp	r3, #9
 80075ac:	d908      	bls.n	80075c0 <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 80075ae:	4b68      	ldr	r3, [pc, #416]	; (8007750 <checkAktifCalisma+0x12f8>)
 80075b0:	2200      	movs	r2, #0
 80075b2:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 80075b4:	4b67      	ldr	r3, [pc, #412]	; (8007754 <checkAktifCalisma+0x12fc>)
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	3301      	adds	r3, #1
 80075ba:	b2da      	uxtb	r2, r3
 80075bc:	4b65      	ldr	r3, [pc, #404]	; (8007754 <checkAktifCalisma+0x12fc>)
 80075be:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 80075c0:	4b64      	ldr	r3, [pc, #400]	; (8007754 <checkAktifCalisma+0x12fc>)
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	2b09      	cmp	r3, #9
 80075c6:	d908      	bls.n	80075da <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 80075c8:	4b62      	ldr	r3, [pc, #392]	; (8007754 <checkAktifCalisma+0x12fc>)
 80075ca:	2200      	movs	r2, #0
 80075cc:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 80075ce:	4b62      	ldr	r3, [pc, #392]	; (8007758 <checkAktifCalisma+0x1300>)
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	3301      	adds	r3, #1
 80075d4:	b2da      	uxtb	r2, r3
 80075d6:	4b60      	ldr	r3, [pc, #384]	; (8007758 <checkAktifCalisma+0x1300>)
 80075d8:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 80075da:	4b5f      	ldr	r3, [pc, #380]	; (8007758 <checkAktifCalisma+0x1300>)
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	2b09      	cmp	r3, #9
 80075e0:	d908      	bls.n	80075f4 <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 80075e2:	4b5d      	ldr	r3, [pc, #372]	; (8007758 <checkAktifCalisma+0x1300>)
 80075e4:	2200      	movs	r2, #0
 80075e6:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 80075e8:	4b5c      	ldr	r3, [pc, #368]	; (800775c <checkAktifCalisma+0x1304>)
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	3301      	adds	r3, #1
 80075ee:	b2da      	uxtb	r2, r3
 80075f0:	4b5a      	ldr	r3, [pc, #360]	; (800775c <checkAktifCalisma+0x1304>)
 80075f2:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 80075f4:	4b59      	ldr	r3, [pc, #356]	; (800775c <checkAktifCalisma+0x1304>)
 80075f6:	781a      	ldrb	r2, [r3, #0]
 80075f8:	4b59      	ldr	r3, [pc, #356]	; (8007760 <checkAktifCalisma+0x1308>)
 80075fa:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 80075fe:	4b56      	ldr	r3, [pc, #344]	; (8007758 <checkAktifCalisma+0x1300>)
 8007600:	781a      	ldrb	r2, [r3, #0]
 8007602:	4b57      	ldr	r3, [pc, #348]	; (8007760 <checkAktifCalisma+0x1308>)
 8007604:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8007606:	4b53      	ldr	r3, [pc, #332]	; (8007754 <checkAktifCalisma+0x12fc>)
 8007608:	781a      	ldrb	r2, [r3, #0]
 800760a:	4b55      	ldr	r3, [pc, #340]	; (8007760 <checkAktifCalisma+0x1308>)
 800760c:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 800760e:	4b50      	ldr	r3, [pc, #320]	; (8007750 <checkAktifCalisma+0x12f8>)
 8007610:	781a      	ldrb	r2, [r3, #0]
 8007612:	4b53      	ldr	r3, [pc, #332]	; (8007760 <checkAktifCalisma+0x1308>)
 8007614:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8007616:	4b4d      	ldr	r3, [pc, #308]	; (800774c <checkAktifCalisma+0x12f4>)
 8007618:	781a      	ldrb	r2, [r3, #0]
 800761a:	4b51      	ldr	r3, [pc, #324]	; (8007760 <checkAktifCalisma+0x1308>)
 800761c:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 800761e:	4b51      	ldr	r3, [pc, #324]	; (8007764 <checkAktifCalisma+0x130c>)
 8007620:	2201      	movs	r2, #1
 8007622:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 8007624:	4b44      	ldr	r3, [pc, #272]	; (8007738 <checkAktifCalisma+0x12e0>)
 8007626:	2200      	movs	r2, #0
 8007628:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 800762a:	4b47      	ldr	r3, [pc, #284]	; (8007748 <checkAktifCalisma+0x12f0>)
 800762c:	2200      	movs	r2, #0
 800762e:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8007630:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007634:	484c      	ldr	r0, [pc, #304]	; (8007768 <checkAktifCalisma+0x1310>)
 8007636:	f002 fb17 	bl	8009c68 <HAL_GPIO_ReadPin>
 800763a:	4603      	mov	r3, r0
 800763c:	2b00      	cmp	r3, #0
 800763e:	d016      	beq.n	800766e <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8007640:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007644:	4848      	ldr	r0, [pc, #288]	; (8007768 <checkAktifCalisma+0x1310>)
 8007646:	f002 fb0f 	bl	8009c68 <HAL_GPIO_ReadPin>
 800764a:	4603      	mov	r3, r0
 800764c:	2b00      	cmp	r3, #0
 800764e:	d00e      	beq.n	800766e <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8007650:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007654:	4844      	ldr	r0, [pc, #272]	; (8007768 <checkAktifCalisma+0x1310>)
 8007656:	f002 fb07 	bl	8009c68 <HAL_GPIO_ReadPin>
 800765a:	4603      	mov	r3, r0
 800765c:	2b00      	cmp	r3, #0
 800765e:	d006      	beq.n	800766e <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8007660:	2140      	movs	r1, #64	; 0x40
 8007662:	4836      	ldr	r0, [pc, #216]	; (800773c <checkAktifCalisma+0x12e4>)
 8007664:	f002 fb00 	bl	8009c68 <HAL_GPIO_ReadPin>
 8007668:	4603      	mov	r3, r0
 800766a:	2b00      	cmp	r3, #0
 800766c:	d103      	bne.n	8007676 <checkAktifCalisma+0x121e>
			startBasili=1;
 800766e:	4b3f      	ldr	r3, [pc, #252]	; (800776c <checkAktifCalisma+0x1314>)
 8007670:	2201      	movs	r2, #1
 8007672:	701a      	strb	r2, [r3, #0]
 8007674:	e002      	b.n	800767c <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 8007676:	4b3d      	ldr	r3, [pc, #244]	; (800776c <checkAktifCalisma+0x1314>)
 8007678:	2200      	movs	r2, #0
 800767a:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 800767c:	4b3b      	ldr	r3, [pc, #236]	; (800776c <checkAktifCalisma+0x1314>)
 800767e:	781b      	ldrb	r3, [r3, #0]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d014      	beq.n	80076ae <checkAktifCalisma+0x1256>
 8007684:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007688:	4837      	ldr	r0, [pc, #220]	; (8007768 <checkAktifCalisma+0x1310>)
 800768a:	f002 faed 	bl	8009c68 <HAL_GPIO_ReadPin>
 800768e:	4603      	mov	r3, r0
 8007690:	2b01      	cmp	r3, #1
 8007692:	d10c      	bne.n	80076ae <checkAktifCalisma+0x1256>
			hataVar=1;
 8007694:	4b36      	ldr	r3, [pc, #216]	; (8007770 <checkAktifCalisma+0x1318>)
 8007696:	2201      	movs	r2, #1
 8007698:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 800769a:	2001      	movs	r0, #1
 800769c:	f7fe f896 	bl	80057cc <hataKoduLcdGoster>
			hata2EEPROM(1);
 80076a0:	2001      	movs	r0, #1
 80076a2:	f7fe fc27 	bl	8005ef4 <hata2EEPROM>
			acilstophatasi=1;
 80076a6:	4b33      	ldr	r3, [pc, #204]	; (8007774 <checkAktifCalisma+0x131c>)
 80076a8:	2201      	movs	r2, #1
 80076aa:	701a      	strb	r2, [r3, #0]
 80076ac:	e018      	b.n	80076e0 <checkAktifCalisma+0x1288>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 80076ae:	4b31      	ldr	r3, [pc, #196]	; (8007774 <checkAktifCalisma+0x131c>)
 80076b0:	781b      	ldrb	r3, [r3, #0]
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d014      	beq.n	80076e0 <checkAktifCalisma+0x1288>
 80076b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80076ba:	482b      	ldr	r0, [pc, #172]	; (8007768 <checkAktifCalisma+0x1310>)
 80076bc:	f002 fad4 	bl	8009c68 <HAL_GPIO_ReadPin>
 80076c0:	4603      	mov	r3, r0
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d10c      	bne.n	80076e0 <checkAktifCalisma+0x1288>
 80076c6:	4b29      	ldr	r3, [pc, #164]	; (800776c <checkAktifCalisma+0x1314>)
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	f083 0301 	eor.w	r3, r3, #1
 80076ce:	b2db      	uxtb	r3, r3
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d005      	beq.n	80076e0 <checkAktifCalisma+0x1288>
			acilstophatasi=0;
 80076d4:	4b27      	ldr	r3, [pc, #156]	; (8007774 <checkAktifCalisma+0x131c>)
 80076d6:	2200      	movs	r2, #0
 80076d8:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 80076da:	2001      	movs	r0, #1
 80076dc:	f7fe f822 	bl	8005724 <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 80076e0:	4b25      	ldr	r3, [pc, #148]	; (8007778 <checkAktifCalisma+0x1320>)
 80076e2:	781b      	ldrb	r3, [r3, #0]
 80076e4:	f083 0301 	eor.w	r3, r3, #1
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d04c      	beq.n	8007788 <checkAktifCalisma+0x1330>
 80076ee:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80076f2:	481d      	ldr	r0, [pc, #116]	; (8007768 <checkAktifCalisma+0x1310>)
 80076f4:	f002 fab8 	bl	8009c68 <HAL_GPIO_ReadPin>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d003      	beq.n	8007706 <checkAktifCalisma+0x12ae>
 80076fe:	4b1f      	ldr	r3, [pc, #124]	; (800777c <checkAktifCalisma+0x1324>)
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d040      	beq.n	8007788 <checkAktifCalisma+0x1330>
 8007706:	4b1e      	ldr	r3, [pc, #120]	; (8007780 <checkAktifCalisma+0x1328>)
 8007708:	781b      	ldrb	r3, [r3, #0]
 800770a:	2b01      	cmp	r3, #1
 800770c:	d13c      	bne.n	8007788 <checkAktifCalisma+0x1330>
			hataVar=1;
 800770e:	4b18      	ldr	r3, [pc, #96]	; (8007770 <checkAktifCalisma+0x1318>)
 8007710:	2201      	movs	r2, #1
 8007712:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 8007714:	2002      	movs	r0, #2
 8007716:	f7fe f859 	bl	80057cc <hataKoduLcdGoster>
			hata2EEPROM(2);
 800771a:	2002      	movs	r0, #2
 800771c:	f7fe fbea 	bl	8005ef4 <hata2EEPROM>
			emniyetCercevesihatasi=1;
 8007720:	4b18      	ldr	r3, [pc, #96]	; (8007784 <checkAktifCalisma+0x132c>)
 8007722:	2201      	movs	r2, #1
 8007724:	701a      	strb	r2, [r3, #0]
 8007726:	e047      	b.n	80077b8 <checkAktifCalisma+0x1360>
 8007728:	20000c94 	.word	0x20000c94
 800772c:	20000c93 	.word	0x20000c93
 8007730:	20000c92 	.word	0x20000c92
 8007734:	40010800 	.word	0x40010800
 8007738:	20000c88 	.word	0x20000c88
 800773c:	40011000 	.word	0x40011000
 8007740:	20000c4f 	.word	0x20000c4f
 8007744:	20000c8b 	.word	0x20000c8b
 8007748:	20000c89 	.word	0x20000c89
 800774c:	20000c46 	.word	0x20000c46
 8007750:	20000c47 	.word	0x20000c47
 8007754:	200009bf 	.word	0x200009bf
 8007758:	200009c0 	.word	0x200009c0
 800775c:	20000c48 	.word	0x20000c48
 8007760:	20000b38 	.word	0x20000b38
 8007764:	20000c75 	.word	0x20000c75
 8007768:	40010c00 	.word	0x40010c00
 800776c:	20000c97 	.word	0x20000c97
 8007770:	20000c9e 	.word	0x20000c9e
 8007774:	20000c99 	.word	0x20000c99
 8007778:	20000ca0 	.word	0x20000ca0
 800777c:	20000caa 	.word	0x20000caa
 8007780:	20000c4d 	.word	0x20000c4d
 8007784:	20000c9a 	.word	0x20000c9a
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8007788:	4b97      	ldr	r3, [pc, #604]	; (80079e8 <checkAktifCalisma+0x1590>)
 800778a:	781b      	ldrb	r3, [r3, #0]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d013      	beq.n	80077b8 <checkAktifCalisma+0x1360>
 8007790:	4b96      	ldr	r3, [pc, #600]	; (80079ec <checkAktifCalisma+0x1594>)
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d00f      	beq.n	80077b8 <checkAktifCalisma+0x1360>
 8007798:	4b95      	ldr	r3, [pc, #596]	; (80079f0 <checkAktifCalisma+0x1598>)
 800779a:	781b      	ldrb	r3, [r3, #0]
 800779c:	f083 0301 	eor.w	r3, r3, #1
 80077a0:	b2db      	uxtb	r3, r3
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d008      	beq.n	80077b8 <checkAktifCalisma+0x1360>
			emniyetCercevesihatasi=0;
 80077a6:	4b90      	ldr	r3, [pc, #576]	; (80079e8 <checkAktifCalisma+0x1590>)
 80077a8:	2200      	movs	r2, #0
 80077aa:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 80077ac:	4b91      	ldr	r3, [pc, #580]	; (80079f4 <checkAktifCalisma+0x159c>)
 80077ae:	2200      	movs	r2, #0
 80077b0:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 80077b2:	2002      	movs	r0, #2
 80077b4:	f7fd ffb6 	bl	8005724 <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 80077b8:	4b8f      	ldr	r3, [pc, #572]	; (80079f8 <checkAktifCalisma+0x15a0>)
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d11c      	bne.n	80077fa <checkAktifCalisma+0x13a2>
 80077c0:	4b8e      	ldr	r3, [pc, #568]	; (80079fc <checkAktifCalisma+0x15a4>)
 80077c2:	781b      	ldrb	r3, [r3, #0]
 80077c4:	2b01      	cmp	r3, #1
 80077c6:	d118      	bne.n	80077fa <checkAktifCalisma+0x13a2>
 80077c8:	4b8d      	ldr	r3, [pc, #564]	; (8007a00 <checkAktifCalisma+0x15a8>)
 80077ca:	781b      	ldrb	r3, [r3, #0]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d014      	beq.n	80077fa <checkAktifCalisma+0x13a2>
 80077d0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80077d4:	488b      	ldr	r0, [pc, #556]	; (8007a04 <checkAktifCalisma+0x15ac>)
 80077d6:	f002 fa47 	bl	8009c68 <HAL_GPIO_ReadPin>
 80077da:	4603      	mov	r3, r0
 80077dc:	2b01      	cmp	r3, #1
 80077de:	d10c      	bne.n	80077fa <checkAktifCalisma+0x13a2>
			hataVar=1;
 80077e0:	4b89      	ldr	r3, [pc, #548]	; (8007a08 <checkAktifCalisma+0x15b0>)
 80077e2:	2201      	movs	r2, #1
 80077e4:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 80077e6:	2003      	movs	r0, #3
 80077e8:	f7fd fff0 	bl	80057cc <hataKoduLcdGoster>
			hata2EEPROM(3);
 80077ec:	2003      	movs	r0, #3
 80077ee:	f7fe fb81 	bl	8005ef4 <hata2EEPROM>
			basinchatasi=1;
 80077f2:	4b86      	ldr	r3, [pc, #536]	; (8007a0c <checkAktifCalisma+0x15b4>)
 80077f4:	2201      	movs	r2, #1
 80077f6:	701a      	strb	r2, [r3, #0]
 80077f8:	e015      	b.n	8007826 <checkAktifCalisma+0x13ce>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 80077fa:	4b84      	ldr	r3, [pc, #528]	; (8007a0c <checkAktifCalisma+0x15b4>)
 80077fc:	781b      	ldrb	r3, [r3, #0]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d011      	beq.n	8007826 <checkAktifCalisma+0x13ce>
 8007802:	4b7d      	ldr	r3, [pc, #500]	; (80079f8 <checkAktifCalisma+0x15a0>)
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	2b01      	cmp	r3, #1
 8007808:	d10d      	bne.n	8007826 <checkAktifCalisma+0x13ce>
 800780a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800780e:	4880      	ldr	r0, [pc, #512]	; (8007a10 <checkAktifCalisma+0x15b8>)
 8007810:	f002 fa2a 	bl	8009c68 <HAL_GPIO_ReadPin>
 8007814:	4603      	mov	r3, r0
 8007816:	2b01      	cmp	r3, #1
 8007818:	d105      	bne.n	8007826 <checkAktifCalisma+0x13ce>
			basinchatasi=0;
 800781a:	4b7c      	ldr	r3, [pc, #496]	; (8007a0c <checkAktifCalisma+0x15b4>)
 800781c:	2200      	movs	r2, #0
 800781e:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 8007820:	2003      	movs	r0, #3
 8007822:	f7fd ff7f 	bl	8005724 <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8007826:	4b7b      	ldr	r3, [pc, #492]	; (8007a14 <checkAktifCalisma+0x15bc>)
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d103      	bne.n	8007836 <checkAktifCalisma+0x13de>
 800782e:	4b7a      	ldr	r3, [pc, #488]	; (8007a18 <checkAktifCalisma+0x15c0>)
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d01c      	beq.n	8007870 <checkAktifCalisma+0x1418>
 8007836:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800783a:	4878      	ldr	r0, [pc, #480]	; (8007a1c <checkAktifCalisma+0x15c4>)
 800783c:	f002 fa14 	bl	8009c68 <HAL_GPIO_ReadPin>
 8007840:	4603      	mov	r3, r0
 8007842:	2b01      	cmp	r3, #1
 8007844:	d114      	bne.n	8007870 <checkAktifCalisma+0x1418>
 8007846:	4b76      	ldr	r3, [pc, #472]	; (8007a20 <checkAktifCalisma+0x15c8>)
 8007848:	781b      	ldrb	r3, [r3, #0]
 800784a:	2b01      	cmp	r3, #1
 800784c:	d003      	beq.n	8007856 <checkAktifCalisma+0x13fe>
 800784e:	4b74      	ldr	r3, [pc, #464]	; (8007a20 <checkAktifCalisma+0x15c8>)
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	2b03      	cmp	r3, #3
 8007854:	d10c      	bne.n	8007870 <checkAktifCalisma+0x1418>
			hataVar=1;
 8007856:	4b6c      	ldr	r3, [pc, #432]	; (8007a08 <checkAktifCalisma+0x15b0>)
 8007858:	2201      	movs	r2, #1
 800785a:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 800785c:	2004      	movs	r0, #4
 800785e:	f7fd ffb5 	bl	80057cc <hataKoduLcdGoster>
			hata2EEPROM(4);
 8007862:	2004      	movs	r0, #4
 8007864:	f7fe fb46 	bl	8005ef4 <hata2EEPROM>
			katkapisivicihatasi=1;
 8007868:	4b6e      	ldr	r3, [pc, #440]	; (8007a24 <checkAktifCalisma+0x15cc>)
 800786a:	2201      	movs	r2, #1
 800786c:	701a      	strb	r2, [r3, #0]
 800786e:	e01f      	b.n	80078b0 <checkAktifCalisma+0x1458>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8007870:	4b6c      	ldr	r3, [pc, #432]	; (8007a24 <checkAktifCalisma+0x15cc>)
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d01b      	beq.n	80078b0 <checkAktifCalisma+0x1458>
 8007878:	4b6b      	ldr	r3, [pc, #428]	; (8007a28 <checkAktifCalisma+0x15d0>)
 800787a:	781b      	ldrb	r3, [r3, #0]
 800787c:	2b00      	cmp	r3, #0
 800787e:	d017      	beq.n	80078b0 <checkAktifCalisma+0x1458>
 8007880:	4b64      	ldr	r3, [pc, #400]	; (8007a14 <checkAktifCalisma+0x15bc>)
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	f083 0301 	eor.w	r3, r3, #1
 8007888:	b2db      	uxtb	r3, r3
 800788a:	2b00      	cmp	r3, #0
 800788c:	d010      	beq.n	80078b0 <checkAktifCalisma+0x1458>
 800788e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007892:	4862      	ldr	r0, [pc, #392]	; (8007a1c <checkAktifCalisma+0x15c4>)
 8007894:	f002 f9e8 	bl	8009c68 <HAL_GPIO_ReadPin>
 8007898:	4603      	mov	r3, r0
 800789a:	2b00      	cmp	r3, #0
 800789c:	d108      	bne.n	80078b0 <checkAktifCalisma+0x1458>
			katkapisivicihatasi=0;
 800789e:	4b61      	ldr	r3, [pc, #388]	; (8007a24 <checkAktifCalisma+0x15cc>)
 80078a0:	2200      	movs	r2, #0
 80078a2:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 80078a4:	4b5c      	ldr	r3, [pc, #368]	; (8007a18 <checkAktifCalisma+0x15c0>)
 80078a6:	2200      	movs	r2, #0
 80078a8:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 80078aa:	2004      	movs	r0, #4
 80078ac:	f7fd ff3a 	bl	8005724 <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 80078b0:	4b58      	ldr	r3, [pc, #352]	; (8007a14 <checkAktifCalisma+0x15bc>)
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d103      	bne.n	80078c0 <checkAktifCalisma+0x1468>
 80078b8:	4b5c      	ldr	r3, [pc, #368]	; (8007a2c <checkAktifCalisma+0x15d4>)
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d01c      	beq.n	80078fa <checkAktifCalisma+0x14a2>
 80078c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80078c4:	4855      	ldr	r0, [pc, #340]	; (8007a1c <checkAktifCalisma+0x15c4>)
 80078c6:	f002 f9cf 	bl	8009c68 <HAL_GPIO_ReadPin>
 80078ca:	4603      	mov	r3, r0
 80078cc:	2b01      	cmp	r3, #1
 80078ce:	d114      	bne.n	80078fa <checkAktifCalisma+0x14a2>
 80078d0:	4b53      	ldr	r3, [pc, #332]	; (8007a20 <checkAktifCalisma+0x15c8>)
 80078d2:	781b      	ldrb	r3, [r3, #0]
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d003      	beq.n	80078e0 <checkAktifCalisma+0x1488>
 80078d8:	4b51      	ldr	r3, [pc, #324]	; (8007a20 <checkAktifCalisma+0x15c8>)
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	2b03      	cmp	r3, #3
 80078de:	d10c      	bne.n	80078fa <checkAktifCalisma+0x14a2>
			hataVar=1;
 80078e0:	4b49      	ldr	r3, [pc, #292]	; (8007a08 <checkAktifCalisma+0x15b0>)
 80078e2:	2201      	movs	r2, #1
 80078e4:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 80078e6:	2005      	movs	r0, #5
 80078e8:	f7fd ff70 	bl	80057cc <hataKoduLcdGoster>
			hata2EEPROM(5);
 80078ec:	2005      	movs	r0, #5
 80078ee:	f7fe fb01 	bl	8005ef4 <hata2EEPROM>
			tablakapisivicihatasi=1;
 80078f2:	4b4f      	ldr	r3, [pc, #316]	; (8007a30 <checkAktifCalisma+0x15d8>)
 80078f4:	2201      	movs	r2, #1
 80078f6:	701a      	strb	r2, [r3, #0]
 80078f8:	e023      	b.n	8007942 <checkAktifCalisma+0x14ea>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 80078fa:	4b4d      	ldr	r3, [pc, #308]	; (8007a30 <checkAktifCalisma+0x15d8>)
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d01f      	beq.n	8007942 <checkAktifCalisma+0x14ea>
 8007902:	4b49      	ldr	r3, [pc, #292]	; (8007a28 <checkAktifCalisma+0x15d0>)
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d01b      	beq.n	8007942 <checkAktifCalisma+0x14ea>
 800790a:	4b42      	ldr	r3, [pc, #264]	; (8007a14 <checkAktifCalisma+0x15bc>)
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	f083 0301 	eor.w	r3, r3, #1
 8007912:	b2db      	uxtb	r3, r3
 8007914:	2b00      	cmp	r3, #0
 8007916:	d014      	beq.n	8007942 <checkAktifCalisma+0x14ea>
 8007918:	f44f 7180 	mov.w	r1, #256	; 0x100
 800791c:	483f      	ldr	r0, [pc, #252]	; (8007a1c <checkAktifCalisma+0x15c4>)
 800791e:	f002 f9a3 	bl	8009c68 <HAL_GPIO_ReadPin>
 8007922:	4603      	mov	r3, r0
 8007924:	2b00      	cmp	r3, #0
 8007926:	d10c      	bne.n	8007942 <checkAktifCalisma+0x14ea>
 8007928:	4b3f      	ldr	r3, [pc, #252]	; (8007a28 <checkAktifCalisma+0x15d0>)
 800792a:	781b      	ldrb	r3, [r3, #0]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d008      	beq.n	8007942 <checkAktifCalisma+0x14ea>
			tablakapisivicihatasi=0;
 8007930:	4b3f      	ldr	r3, [pc, #252]	; (8007a30 <checkAktifCalisma+0x15d8>)
 8007932:	2200      	movs	r2, #0
 8007934:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 8007936:	4b3d      	ldr	r3, [pc, #244]	; (8007a2c <checkAktifCalisma+0x15d4>)
 8007938:	2200      	movs	r2, #0
 800793a:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 800793c:	2005      	movs	r0, #5
 800793e:	f7fd fef1 	bl	8005724 <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 8007942:	4b2f      	ldr	r3, [pc, #188]	; (8007a00 <checkAktifCalisma+0x15a8>)
 8007944:	781b      	ldrb	r3, [r3, #0]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d107      	bne.n	800795a <checkAktifCalisma+0x1502>
 800794a:	4b29      	ldr	r3, [pc, #164]	; (80079f0 <checkAktifCalisma+0x1598>)
 800794c:	781b      	ldrb	r3, [r3, #0]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d103      	bne.n	800795a <checkAktifCalisma+0x1502>
 8007952:	4b38      	ldr	r3, [pc, #224]	; (8007a34 <checkAktifCalisma+0x15dc>)
 8007954:	781b      	ldrb	r3, [r3, #0]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d014      	beq.n	8007984 <checkAktifCalisma+0x152c>
		    if(millis-timer4>=makineCalismaTmr) {
 800795a:	4b37      	ldr	r3, [pc, #220]	; (8007a38 <checkAktifCalisma+0x15e0>)
 800795c:	681a      	ldr	r2, [r3, #0]
 800795e:	4b37      	ldr	r3, [pc, #220]	; (8007a3c <checkAktifCalisma+0x15e4>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	1ad3      	subs	r3, r2, r3
 8007964:	4a36      	ldr	r2, [pc, #216]	; (8007a40 <checkAktifCalisma+0x15e8>)
 8007966:	7812      	ldrb	r2, [r2, #0]
 8007968:	4293      	cmp	r3, r2
 800796a:	d30b      	bcc.n	8007984 <checkAktifCalisma+0x152c>
			  	hataVar=1;
 800796c:	4b26      	ldr	r3, [pc, #152]	; (8007a08 <checkAktifCalisma+0x15b0>)
 800796e:	2201      	movs	r2, #1
 8007970:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 8007972:	2006      	movs	r0, #6
 8007974:	f7fd ff2a 	bl	80057cc <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 8007978:	2006      	movs	r0, #6
 800797a:	f7fe fabb 	bl	8005ef4 <hata2EEPROM>
			  	maksimumcalismahatasi=1;
 800797e:	4b31      	ldr	r3, [pc, #196]	; (8007a44 <checkAktifCalisma+0x15ec>)
 8007980:	2201      	movs	r2, #1
 8007982:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8007984:	4b2f      	ldr	r3, [pc, #188]	; (8007a44 <checkAktifCalisma+0x15ec>)
 8007986:	781b      	ldrb	r3, [r3, #0]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d013      	beq.n	80079b4 <checkAktifCalisma+0x155c>
 800798c:	2108      	movs	r1, #8
 800798e:	4823      	ldr	r0, [pc, #140]	; (8007a1c <checkAktifCalisma+0x15c4>)
 8007990:	f002 f96a 	bl	8009c68 <HAL_GPIO_ReadPin>
 8007994:	4603      	mov	r3, r0
 8007996:	2b00      	cmp	r3, #0
 8007998:	d00c      	beq.n	80079b4 <checkAktifCalisma+0x155c>
 800799a:	4b1e      	ldr	r3, [pc, #120]	; (8007a14 <checkAktifCalisma+0x15bc>)
 800799c:	781b      	ldrb	r3, [r3, #0]
 800799e:	f083 0301 	eor.w	r3, r3, #1
 80079a2:	b2db      	uxtb	r3, r3
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d005      	beq.n	80079b4 <checkAktifCalisma+0x155c>
			maksimumcalismahatasi=0;
 80079a8:	4b26      	ldr	r3, [pc, #152]	; (8007a44 <checkAktifCalisma+0x15ec>)
 80079aa:	2200      	movs	r2, #0
 80079ac:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 80079ae:	2006      	movs	r0, #6
 80079b0:	f7fd feb8 	bl	8005724 <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 80079b4:	4b24      	ldr	r3, [pc, #144]	; (8007a48 <checkAktifCalisma+0x15f0>)
 80079b6:	781b      	ldrb	r3, [r3, #0]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d10b      	bne.n	80079d4 <checkAktifCalisma+0x157c>
 80079bc:	4b0c      	ldr	r3, [pc, #48]	; (80079f0 <checkAktifCalisma+0x1598>)
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d107      	bne.n	80079d4 <checkAktifCalisma+0x157c>
 80079c4:	4b21      	ldr	r3, [pc, #132]	; (8007a4c <checkAktifCalisma+0x15f4>)
 80079c6:	781b      	ldrb	r3, [r3, #0]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d103      	bne.n	80079d4 <checkAktifCalisma+0x157c>
 80079cc:	4b19      	ldr	r3, [pc, #100]	; (8007a34 <checkAktifCalisma+0x15dc>)
 80079ce:	781b      	ldrb	r3, [r3, #0]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d03f      	beq.n	8007a54 <checkAktifCalisma+0x15fc>
			makineCalisiyor=0;
 80079d4:	4b1e      	ldr	r3, [pc, #120]	; (8007a50 <checkAktifCalisma+0x15f8>)
 80079d6:	2200      	movs	r2, #0
 80079d8:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 80079da:	4b0f      	ldr	r3, [pc, #60]	; (8007a18 <checkAktifCalisma+0x15c0>)
 80079dc:	2201      	movs	r2, #1
 80079de:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 80079e0:	4b12      	ldr	r3, [pc, #72]	; (8007a2c <checkAktifCalisma+0x15d4>)
 80079e2:	2201      	movs	r2, #1
 80079e4:	701a      	strb	r2, [r3, #0]
 80079e6:	e03c      	b.n	8007a62 <checkAktifCalisma+0x160a>
 80079e8:	20000c9a 	.word	0x20000c9a
 80079ec:	20000ca0 	.word	0x20000ca0
 80079f0:	20000c81 	.word	0x20000c81
 80079f4:	20000caa 	.word	0x20000caa
 80079f8:	20000c4c 	.word	0x20000c4c
 80079fc:	20000c50 	.word	0x20000c50
 8007a00:	20000c9d 	.word	0x20000c9d
 8007a04:	40011000 	.word	0x40011000
 8007a08:	20000c9e 	.word	0x20000c9e
 8007a0c:	20000ca7 	.word	0x20000ca7
 8007a10:	40010c00 	.word	0x40010c00
 8007a14:	20000c97 	.word	0x20000c97
 8007a18:	20000cab 	.word	0x20000cab
 8007a1c:	40010800 	.word	0x40010800
 8007a20:	20000c51 	.word	0x20000c51
 8007a24:	20000ca8 	.word	0x20000ca8
 8007a28:	20000c8b 	.word	0x20000c8b
 8007a2c:	20000cac 	.word	0x20000cac
 8007a30:	20000ca9 	.word	0x20000ca9
 8007a34:	20000c80 	.word	0x20000c80
 8007a38:	20000bd4 	.word	0x20000bd4
 8007a3c:	20000be8 	.word	0x20000be8
 8007a40:	20000c61 	.word	0x20000c61
 8007a44:	20000c98 	.word	0x20000c98
 8007a48:	20000c7e 	.word	0x20000c7e
 8007a4c:	20000c7f 	.word	0x20000c7f
 8007a50:	20000c9f 	.word	0x20000c9f
		} else {
			makineCalisiyor=1;
 8007a54:	4b1e      	ldr	r3, [pc, #120]	; (8007ad0 <checkAktifCalisma+0x1678>)
 8007a56:	2201      	movs	r2, #1
 8007a58:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 8007a5a:	4b1e      	ldr	r3, [pc, #120]	; (8007ad4 <checkAktifCalisma+0x167c>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a1e      	ldr	r2, [pc, #120]	; (8007ad8 <checkAktifCalisma+0x1680>)
 8007a60:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8007a62:	4b1e      	ldr	r3, [pc, #120]	; (8007adc <checkAktifCalisma+0x1684>)
 8007a64:	781b      	ldrb	r3, [r3, #0]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d02f      	beq.n	8007aca <checkAktifCalisma+0x1672>
 8007a6a:	4b1d      	ldr	r3, [pc, #116]	; (8007ae0 <checkAktifCalisma+0x1688>)
 8007a6c:	781b      	ldrb	r3, [r3, #0]
 8007a6e:	f083 0301 	eor.w	r3, r3, #1
 8007a72:	b2db      	uxtb	r3, r3
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d028      	beq.n	8007aca <checkAktifCalisma+0x1672>
 8007a78:	4b1a      	ldr	r3, [pc, #104]	; (8007ae4 <checkAktifCalisma+0x168c>)
 8007a7a:	781b      	ldrb	r3, [r3, #0]
 8007a7c:	f083 0301 	eor.w	r3, r3, #1
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d021      	beq.n	8007aca <checkAktifCalisma+0x1672>
 8007a86:	4b18      	ldr	r3, [pc, #96]	; (8007ae8 <checkAktifCalisma+0x1690>)
 8007a88:	781b      	ldrb	r3, [r3, #0]
 8007a8a:	f083 0301 	eor.w	r3, r3, #1
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d01a      	beq.n	8007aca <checkAktifCalisma+0x1672>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8007a94:	4b15      	ldr	r3, [pc, #84]	; (8007aec <checkAktifCalisma+0x1694>)
 8007a96:	781b      	ldrb	r3, [r3, #0]
 8007a98:	f083 0301 	eor.w	r3, r3, #1
 8007a9c:	b2db      	uxtb	r3, r3
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d013      	beq.n	8007aca <checkAktifCalisma+0x1672>
 8007aa2:	4b13      	ldr	r3, [pc, #76]	; (8007af0 <checkAktifCalisma+0x1698>)
 8007aa4:	781b      	ldrb	r3, [r3, #0]
 8007aa6:	f083 0301 	eor.w	r3, r3, #1
 8007aaa:	b2db      	uxtb	r3, r3
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d00c      	beq.n	8007aca <checkAktifCalisma+0x1672>
 8007ab0:	4b10      	ldr	r3, [pc, #64]	; (8007af4 <checkAktifCalisma+0x169c>)
 8007ab2:	781b      	ldrb	r3, [r3, #0]
 8007ab4:	f083 0301 	eor.w	r3, r3, #1
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d005      	beq.n	8007aca <checkAktifCalisma+0x1672>
			hataVar=0;
 8007abe:	4b07      	ldr	r3, [pc, #28]	; (8007adc <checkAktifCalisma+0x1684>)
 8007ac0:	2200      	movs	r2, #0
 8007ac2:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 8007ac4:	2007      	movs	r0, #7
 8007ac6:	f7fd fe2d 	bl	8005724 <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 8007aca:	bf00      	nop
 8007acc:	bd80      	pop	{r7, pc}
 8007ace:	bf00      	nop
 8007ad0:	20000c9f 	.word	0x20000c9f
 8007ad4:	20000bd4 	.word	0x20000bd4
 8007ad8:	20000be8 	.word	0x20000be8
 8007adc:	20000c9e 	.word	0x20000c9e
 8007ae0:	20000c99 	.word	0x20000c99
 8007ae4:	20000c9a 	.word	0x20000c9a
 8007ae8:	20000ca7 	.word	0x20000ca7
 8007aec:	20000ca8 	.word	0x20000ca8
 8007af0:	20000ca9 	.word	0x20000ca9
 8007af4:	20000c98 	.word	0x20000c98

08007af8 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8007af8:	b580      	push	{r7, lr}
 8007afa:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8007afc:	4b8b      	ldr	r3, [pc, #556]	; (8007d2c <checkDemoModCalisma+0x234>)
 8007afe:	781b      	ldrb	r3, [r3, #0]
 8007b00:	2b01      	cmp	r3, #1
 8007b02:	f040 8229 	bne.w	8007f58 <checkDemoModCalisma+0x460>
 8007b06:	4b8a      	ldr	r3, [pc, #552]	; (8007d30 <checkDemoModCalisma+0x238>)
 8007b08:	781b      	ldrb	r3, [r3, #0]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	f000 8224 	beq.w	8007f58 <checkDemoModCalisma+0x460>
 8007b10:	4b88      	ldr	r3, [pc, #544]	; (8007d34 <checkDemoModCalisma+0x23c>)
 8007b12:	781b      	ldrb	r3, [r3, #0]
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	f040 821f 	bne.w	8007f58 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8007b1a:	2102      	movs	r1, #2
 8007b1c:	4886      	ldr	r0, [pc, #536]	; (8007d38 <checkDemoModCalisma+0x240>)
 8007b1e:	f002 f8a3 	bl	8009c68 <HAL_GPIO_ReadPin>
 8007b22:	4603      	mov	r3, r0
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d11d      	bne.n	8007b64 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 8007b28:	4b84      	ldr	r3, [pc, #528]	; (8007d3c <checkDemoModCalisma+0x244>)
 8007b2a:	781b      	ldrb	r3, [r3, #0]
 8007b2c:	f083 0301 	eor.w	r3, r3, #1
 8007b30:	b2db      	uxtb	r3, r3
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d016      	beq.n	8007b64 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 8007b36:	4b82      	ldr	r3, [pc, #520]	; (8007d40 <checkDemoModCalisma+0x248>)
 8007b38:	781b      	ldrb	r3, [r3, #0]
 8007b3a:	f083 0301 	eor.w	r3, r3, #1
 8007b3e:	b2db      	uxtb	r3, r3
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d00f      	beq.n	8007b64 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 8007b44:	4b7f      	ldr	r3, [pc, #508]	; (8007d44 <checkDemoModCalisma+0x24c>)
 8007b46:	781b      	ldrb	r3, [r3, #0]
 8007b48:	f083 0301 	eor.w	r3, r3, #1
 8007b4c:	b2db      	uxtb	r3, r3
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d008      	beq.n	8007b64 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8007b52:	2201      	movs	r2, #1
 8007b54:	2104      	movs	r1, #4
 8007b56:	487c      	ldr	r0, [pc, #496]	; (8007d48 <checkDemoModCalisma+0x250>)
 8007b58:	f002 f89d 	bl	8009c96 <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 8007b5c:	4b7b      	ldr	r3, [pc, #492]	; (8007d4c <checkDemoModCalisma+0x254>)
 8007b5e:	2201      	movs	r2, #1
 8007b60:	701a      	strb	r2, [r3, #0]
 8007b62:	e00e      	b.n	8007b82 <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8007b64:	2102      	movs	r1, #2
 8007b66:	4874      	ldr	r0, [pc, #464]	; (8007d38 <checkDemoModCalisma+0x240>)
 8007b68:	f002 f87e 	bl	8009c68 <HAL_GPIO_ReadPin>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d107      	bne.n	8007b82 <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007b72:	2200      	movs	r2, #0
 8007b74:	2104      	movs	r1, #4
 8007b76:	4874      	ldr	r0, [pc, #464]	; (8007d48 <checkDemoModCalisma+0x250>)
 8007b78:	f002 f88d 	bl	8009c96 <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 8007b7c:	4b73      	ldr	r3, [pc, #460]	; (8007d4c <checkDemoModCalisma+0x254>)
 8007b7e:	2200      	movs	r2, #0
 8007b80:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8007b82:	4b72      	ldr	r3, [pc, #456]	; (8007d4c <checkDemoModCalisma+0x254>)
 8007b84:	781b      	ldrb	r3, [r3, #0]
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d10b      	bne.n	8007ba2 <checkDemoModCalisma+0xaa>
 8007b8a:	4b6d      	ldr	r3, [pc, #436]	; (8007d40 <checkDemoModCalisma+0x248>)
 8007b8c:	781b      	ldrb	r3, [r3, #0]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d107      	bne.n	8007ba2 <checkDemoModCalisma+0xaa>
 8007b92:	4b6c      	ldr	r3, [pc, #432]	; (8007d44 <checkDemoModCalisma+0x24c>)
 8007b94:	781b      	ldrb	r3, [r3, #0]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d103      	bne.n	8007ba2 <checkDemoModCalisma+0xaa>
 8007b9a:	4b68      	ldr	r3, [pc, #416]	; (8007d3c <checkDemoModCalisma+0x244>)
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d00c      	beq.n	8007bbc <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8007ba2:	2201      	movs	r2, #1
 8007ba4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007ba8:	4867      	ldr	r0, [pc, #412]	; (8007d48 <checkDemoModCalisma+0x250>)
 8007baa:	f002 f874 	bl	8009c96 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8007bae:	2201      	movs	r2, #1
 8007bb0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007bb4:	4864      	ldr	r0, [pc, #400]	; (8007d48 <checkDemoModCalisma+0x250>)
 8007bb6:	f002 f86e 	bl	8009c96 <HAL_GPIO_WritePin>
 8007bba:	e00b      	b.n	8007bd4 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007bc2:	4861      	ldr	r0, [pc, #388]	; (8007d48 <checkDemoModCalisma+0x250>)
 8007bc4:	f002 f867 	bl	8009c96 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007bc8:	2200      	movs	r2, #0
 8007bca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007bce:	485e      	ldr	r0, [pc, #376]	; (8007d48 <checkDemoModCalisma+0x250>)
 8007bd0:	f002 f861 	bl	8009c96 <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007bd4:	2102      	movs	r1, #2
 8007bd6:	4858      	ldr	r0, [pc, #352]	; (8007d38 <checkDemoModCalisma+0x240>)
 8007bd8:	f002 f846 	bl	8009c68 <HAL_GPIO_ReadPin>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	2b01      	cmp	r3, #1
 8007be0:	d10d      	bne.n	8007bfe <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8007be2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007be6:	4854      	ldr	r0, [pc, #336]	; (8007d38 <checkDemoModCalisma+0x240>)
 8007be8:	f002 f83e 	bl	8009c68 <HAL_GPIO_ReadPin>
 8007bec:	4603      	mov	r3, r0
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d105      	bne.n	8007bfe <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 8007bf2:	4b56      	ldr	r3, [pc, #344]	; (8007d4c <checkDemoModCalisma+0x254>)
 8007bf4:	781b      	ldrb	r3, [r3, #0]
 8007bf6:	f083 0301 	eor.w	r3, r3, #1
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007bfe:	2102      	movs	r1, #2
 8007c00:	484d      	ldr	r0, [pc, #308]	; (8007d38 <checkDemoModCalisma+0x240>)
 8007c02:	f002 f831 	bl	8009c68 <HAL_GPIO_ReadPin>
 8007c06:	4603      	mov	r3, r0
 8007c08:	2b01      	cmp	r3, #1
 8007c0a:	d125      	bne.n	8007c58 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8007c0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007c10:	4849      	ldr	r0, [pc, #292]	; (8007d38 <checkDemoModCalisma+0x240>)
 8007c12:	f002 f829 	bl	8009c68 <HAL_GPIO_ReadPin>
 8007c16:	4603      	mov	r3, r0
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d11d      	bne.n	8007c58 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 8007c1c:	4b4b      	ldr	r3, [pc, #300]	; (8007d4c <checkDemoModCalisma+0x254>)
 8007c1e:	781b      	ldrb	r3, [r3, #0]
 8007c20:	f083 0301 	eor.w	r3, r3, #1
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d016      	beq.n	8007c58 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 8007c2a:	4b44      	ldr	r3, [pc, #272]	; (8007d3c <checkDemoModCalisma+0x244>)
 8007c2c:	781b      	ldrb	r3, [r3, #0]
 8007c2e:	f083 0301 	eor.w	r3, r3, #1
 8007c32:	b2db      	uxtb	r3, r3
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d00f      	beq.n	8007c58 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 8007c38:	4b42      	ldr	r3, [pc, #264]	; (8007d44 <checkDemoModCalisma+0x24c>)
 8007c3a:	781b      	ldrb	r3, [r3, #0]
 8007c3c:	f083 0301 	eor.w	r3, r3, #1
 8007c40:	b2db      	uxtb	r3, r3
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d008      	beq.n	8007c58 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8007c46:	2201      	movs	r2, #1
 8007c48:	2120      	movs	r1, #32
 8007c4a:	483b      	ldr	r0, [pc, #236]	; (8007d38 <checkDemoModCalisma+0x240>)
 8007c4c:	f002 f823 	bl	8009c96 <HAL_GPIO_WritePin>
			demoDevYukari=1;
 8007c50:	4b3b      	ldr	r3, [pc, #236]	; (8007d40 <checkDemoModCalisma+0x248>)
 8007c52:	2201      	movs	r2, #1
 8007c54:	701a      	strb	r2, [r3, #0]
 8007c56:	e007      	b.n	8007c68 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007c58:	2200      	movs	r2, #0
 8007c5a:	2120      	movs	r1, #32
 8007c5c:	4836      	ldr	r0, [pc, #216]	; (8007d38 <checkDemoModCalisma+0x240>)
 8007c5e:	f002 f81a 	bl	8009c96 <HAL_GPIO_WritePin>
			demoDevYukari=0;
 8007c62:	4b37      	ldr	r3, [pc, #220]	; (8007d40 <checkDemoModCalisma+0x248>)
 8007c64:	2200      	movs	r2, #0
 8007c66:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007c68:	2102      	movs	r1, #2
 8007c6a:	4833      	ldr	r0, [pc, #204]	; (8007d38 <checkDemoModCalisma+0x240>)
 8007c6c:	f001 fffc 	bl	8009c68 <HAL_GPIO_ReadPin>
 8007c70:	4603      	mov	r3, r0
 8007c72:	2b01      	cmp	r3, #1
 8007c74:	d125      	bne.n	8007cc2 <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8007c76:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007c7a:	482f      	ldr	r0, [pc, #188]	; (8007d38 <checkDemoModCalisma+0x240>)
 8007c7c:	f001 fff4 	bl	8009c68 <HAL_GPIO_ReadPin>
 8007c80:	4603      	mov	r3, r0
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d11d      	bne.n	8007cc2 <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 8007c86:	4b31      	ldr	r3, [pc, #196]	; (8007d4c <checkDemoModCalisma+0x254>)
 8007c88:	781b      	ldrb	r3, [r3, #0]
 8007c8a:	f083 0301 	eor.w	r3, r3, #1
 8007c8e:	b2db      	uxtb	r3, r3
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d016      	beq.n	8007cc2 <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 8007c94:	4b2a      	ldr	r3, [pc, #168]	; (8007d40 <checkDemoModCalisma+0x248>)
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	f083 0301 	eor.w	r3, r3, #1
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d00f      	beq.n	8007cc2 <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 8007ca2:	4b26      	ldr	r3, [pc, #152]	; (8007d3c <checkDemoModCalisma+0x244>)
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	f083 0301 	eor.w	r3, r3, #1
 8007caa:	b2db      	uxtb	r3, r3
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d008      	beq.n	8007cc2 <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8007cb0:	2201      	movs	r2, #1
 8007cb2:	2110      	movs	r1, #16
 8007cb4:	4820      	ldr	r0, [pc, #128]	; (8007d38 <checkDemoModCalisma+0x240>)
 8007cb6:	f001 ffee 	bl	8009c96 <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 8007cba:	4b22      	ldr	r3, [pc, #136]	; (8007d44 <checkDemoModCalisma+0x24c>)
 8007cbc:	2201      	movs	r2, #1
 8007cbe:	701a      	strb	r2, [r3, #0]
 8007cc0:	e007      	b.n	8007cd2 <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007cc2:	2200      	movs	r2, #0
 8007cc4:	2110      	movs	r1, #16
 8007cc6:	481c      	ldr	r0, [pc, #112]	; (8007d38 <checkDemoModCalisma+0x240>)
 8007cc8:	f001 ffe5 	bl	8009c96 <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 8007ccc:	4b1d      	ldr	r3, [pc, #116]	; (8007d44 <checkDemoModCalisma+0x24c>)
 8007cce:	2200      	movs	r2, #0
 8007cd0:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8007cd2:	2104      	movs	r1, #4
 8007cd4:	4818      	ldr	r0, [pc, #96]	; (8007d38 <checkDemoModCalisma+0x240>)
 8007cd6:	f001 ffc7 	bl	8009c68 <HAL_GPIO_ReadPin>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d139      	bne.n	8007d54 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 8007ce0:	4b1a      	ldr	r3, [pc, #104]	; (8007d4c <checkDemoModCalisma+0x254>)
 8007ce2:	781b      	ldrb	r3, [r3, #0]
 8007ce4:	f083 0301 	eor.w	r3, r3, #1
 8007ce8:	b2db      	uxtb	r3, r3
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d032      	beq.n	8007d54 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 8007cee:	4b15      	ldr	r3, [pc, #84]	; (8007d44 <checkDemoModCalisma+0x24c>)
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	f083 0301 	eor.w	r3, r3, #1
 8007cf6:	b2db      	uxtb	r3, r3
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d02b      	beq.n	8007d54 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 8007cfc:	4b10      	ldr	r3, [pc, #64]	; (8007d40 <checkDemoModCalisma+0x248>)
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	f083 0301 	eor.w	r3, r3, #1
 8007d04:	b2db      	uxtb	r3, r3
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d024      	beq.n	8007d54 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	2102      	movs	r1, #2
 8007d0e:	480e      	ldr	r0, [pc, #56]	; (8007d48 <checkDemoModCalisma+0x250>)
 8007d10:	f001 ffc1 	bl	8009c96 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8007d14:	2201      	movs	r2, #1
 8007d16:	2101      	movs	r1, #1
 8007d18:	480b      	ldr	r0, [pc, #44]	; (8007d48 <checkDemoModCalisma+0x250>)
 8007d1a:	f001 ffbc 	bl	8009c96 <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 8007d1e:	4b07      	ldr	r3, [pc, #28]	; (8007d3c <checkDemoModCalisma+0x244>)
 8007d20:	2201      	movs	r2, #1
 8007d22:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 8007d24:	4b0a      	ldr	r3, [pc, #40]	; (8007d50 <checkDemoModCalisma+0x258>)
 8007d26:	2201      	movs	r2, #1
 8007d28:	701a      	strb	r2, [r3, #0]
 8007d2a:	e027      	b.n	8007d7c <checkDemoModCalisma+0x284>
 8007d2c:	20000c67 	.word	0x20000c67
 8007d30:	20000c9b 	.word	0x20000c9b
 8007d34:	20000c66 	.word	0x20000c66
 8007d38:	40011000 	.word	0x40011000
 8007d3c:	20000ca2 	.word	0x20000ca2
 8007d40:	20000ca3 	.word	0x20000ca3
 8007d44:	20000ca4 	.word	0x20000ca4
 8007d48:	40010c00 	.word	0x40010c00
 8007d4c:	20000ca1 	.word	0x20000ca1
 8007d50:	20000c87 	.word	0x20000c87
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8007d54:	2104      	movs	r1, #4
 8007d56:	48a0      	ldr	r0, [pc, #640]	; (8007fd8 <checkDemoModCalisma+0x4e0>)
 8007d58:	f001 ff86 	bl	8009c68 <HAL_GPIO_ReadPin>
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	d10c      	bne.n	8007d7c <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007d62:	2200      	movs	r2, #0
 8007d64:	2102      	movs	r1, #2
 8007d66:	489d      	ldr	r0, [pc, #628]	; (8007fdc <checkDemoModCalisma+0x4e4>)
 8007d68:	f001 ff95 	bl	8009c96 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	2101      	movs	r1, #1
 8007d70:	489a      	ldr	r0, [pc, #616]	; (8007fdc <checkDemoModCalisma+0x4e4>)
 8007d72:	f001 ff90 	bl	8009c96 <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 8007d76:	4b9a      	ldr	r3, [pc, #616]	; (8007fe0 <checkDemoModCalisma+0x4e8>)
 8007d78:	2200      	movs	r2, #0
 8007d7a:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8007d7c:	2104      	movs	r1, #4
 8007d7e:	4896      	ldr	r0, [pc, #600]	; (8007fd8 <checkDemoModCalisma+0x4e0>)
 8007d80:	f001 ff72 	bl	8009c68 <HAL_GPIO_ReadPin>
 8007d84:	4603      	mov	r3, r0
 8007d86:	2b01      	cmp	r3, #1
 8007d88:	d10d      	bne.n	8007da6 <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	2180      	movs	r1, #128	; 0x80
 8007d8e:	4895      	ldr	r0, [pc, #596]	; (8007fe4 <checkDemoModCalisma+0x4ec>)
 8007d90:	f001 ff81 	bl	8009c96 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8007d94:	2201      	movs	r2, #1
 8007d96:	2120      	movs	r1, #32
 8007d98:	4892      	ldr	r0, [pc, #584]	; (8007fe4 <checkDemoModCalisma+0x4ec>)
 8007d9a:	f001 ff7c 	bl	8009c96 <HAL_GPIO_WritePin>
			timer3 = millis;
 8007d9e:	4b92      	ldr	r3, [pc, #584]	; (8007fe8 <checkDemoModCalisma+0x4f0>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	4a92      	ldr	r2, [pc, #584]	; (8007fec <checkDemoModCalisma+0x4f4>)
 8007da4:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8007da6:	4b90      	ldr	r3, [pc, #576]	; (8007fe8 <checkDemoModCalisma+0x4f0>)
 8007da8:	681a      	ldr	r2, [r3, #0]
 8007daa:	4b90      	ldr	r3, [pc, #576]	; (8007fec <checkDemoModCalisma+0x4f4>)
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	1ad3      	subs	r3, r2, r3
 8007db0:	2b04      	cmp	r3, #4
 8007db2:	d909      	bls.n	8007dc8 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007db4:	2200      	movs	r2, #0
 8007db6:	2180      	movs	r1, #128	; 0x80
 8007db8:	488a      	ldr	r0, [pc, #552]	; (8007fe4 <checkDemoModCalisma+0x4ec>)
 8007dba:	f001 ff6c 	bl	8009c96 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	2120      	movs	r1, #32
 8007dc2:	4888      	ldr	r0, [pc, #544]	; (8007fe4 <checkDemoModCalisma+0x4ec>)
 8007dc4:	f001 ff67 	bl	8009c96 <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8007dc8:	2102      	movs	r1, #2
 8007dca:	4883      	ldr	r0, [pc, #524]	; (8007fd8 <checkDemoModCalisma+0x4e0>)
 8007dcc:	f001 ff4c 	bl	8009c68 <HAL_GPIO_ReadPin>
 8007dd0:	4603      	mov	r3, r0
 8007dd2:	2b01      	cmp	r3, #1
 8007dd4:	d108      	bne.n	8007de8 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8007dd6:	2201      	movs	r2, #1
 8007dd8:	2140      	movs	r1, #64	; 0x40
 8007dda:	4882      	ldr	r0, [pc, #520]	; (8007fe4 <checkDemoModCalisma+0x4ec>)
 8007ddc:	f001 ff5b 	bl	8009c96 <HAL_GPIO_WritePin>
			timer3 = millis;
 8007de0:	4b81      	ldr	r3, [pc, #516]	; (8007fe8 <checkDemoModCalisma+0x4f0>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a81      	ldr	r2, [pc, #516]	; (8007fec <checkDemoModCalisma+0x4f4>)
 8007de6:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8007de8:	4b7f      	ldr	r3, [pc, #508]	; (8007fe8 <checkDemoModCalisma+0x4f0>)
 8007dea:	681a      	ldr	r2, [r3, #0]
 8007dec:	4b7f      	ldr	r3, [pc, #508]	; (8007fec <checkDemoModCalisma+0x4f4>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	1ad3      	subs	r3, r2, r3
 8007df2:	2b04      	cmp	r3, #4
 8007df4:	d904      	bls.n	8007e00 <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007df6:	2200      	movs	r2, #0
 8007df8:	2140      	movs	r1, #64	; 0x40
 8007dfa:	487a      	ldr	r0, [pc, #488]	; (8007fe4 <checkDemoModCalisma+0x4ec>)
 8007dfc:	f001 ff4b 	bl	8009c96 <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8007e00:	4b7b      	ldr	r3, [pc, #492]	; (8007ff0 <checkDemoModCalisma+0x4f8>)
 8007e02:	781b      	ldrb	r3, [r3, #0]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d058      	beq.n	8007eba <checkDemoModCalisma+0x3c2>
 8007e08:	4b7a      	ldr	r3, [pc, #488]	; (8007ff4 <checkDemoModCalisma+0x4fc>)
 8007e0a:	781b      	ldrb	r3, [r3, #0]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d054      	beq.n	8007eba <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 8007e10:	4b79      	ldr	r3, [pc, #484]	; (8007ff8 <checkDemoModCalisma+0x500>)
 8007e12:	781b      	ldrb	r3, [r3, #0]
 8007e14:	3301      	adds	r3, #1
 8007e16:	b2da      	uxtb	r2, r3
 8007e18:	4b77      	ldr	r3, [pc, #476]	; (8007ff8 <checkDemoModCalisma+0x500>)
 8007e1a:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 8007e1c:	4b76      	ldr	r3, [pc, #472]	; (8007ff8 <checkDemoModCalisma+0x500>)
 8007e1e:	781b      	ldrb	r3, [r3, #0]
 8007e20:	2b09      	cmp	r3, #9
 8007e22:	d908      	bls.n	8007e36 <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 8007e24:	4b74      	ldr	r3, [pc, #464]	; (8007ff8 <checkDemoModCalisma+0x500>)
 8007e26:	2200      	movs	r2, #0
 8007e28:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 8007e2a:	4b74      	ldr	r3, [pc, #464]	; (8007ffc <checkDemoModCalisma+0x504>)
 8007e2c:	781b      	ldrb	r3, [r3, #0]
 8007e2e:	3301      	adds	r3, #1
 8007e30:	b2da      	uxtb	r2, r3
 8007e32:	4b72      	ldr	r3, [pc, #456]	; (8007ffc <checkDemoModCalisma+0x504>)
 8007e34:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 8007e36:	4b71      	ldr	r3, [pc, #452]	; (8007ffc <checkDemoModCalisma+0x504>)
 8007e38:	781b      	ldrb	r3, [r3, #0]
 8007e3a:	2b09      	cmp	r3, #9
 8007e3c:	d908      	bls.n	8007e50 <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 8007e3e:	4b6f      	ldr	r3, [pc, #444]	; (8007ffc <checkDemoModCalisma+0x504>)
 8007e40:	2200      	movs	r2, #0
 8007e42:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 8007e44:	4b6e      	ldr	r3, [pc, #440]	; (8008000 <checkDemoModCalisma+0x508>)
 8007e46:	781b      	ldrb	r3, [r3, #0]
 8007e48:	3301      	adds	r3, #1
 8007e4a:	b2da      	uxtb	r2, r3
 8007e4c:	4b6c      	ldr	r3, [pc, #432]	; (8008000 <checkDemoModCalisma+0x508>)
 8007e4e:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 8007e50:	4b6b      	ldr	r3, [pc, #428]	; (8008000 <checkDemoModCalisma+0x508>)
 8007e52:	781b      	ldrb	r3, [r3, #0]
 8007e54:	2b09      	cmp	r3, #9
 8007e56:	d908      	bls.n	8007e6a <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 8007e58:	4b69      	ldr	r3, [pc, #420]	; (8008000 <checkDemoModCalisma+0x508>)
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 8007e5e:	4b69      	ldr	r3, [pc, #420]	; (8008004 <checkDemoModCalisma+0x50c>)
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	3301      	adds	r3, #1
 8007e64:	b2da      	uxtb	r2, r3
 8007e66:	4b67      	ldr	r3, [pc, #412]	; (8008004 <checkDemoModCalisma+0x50c>)
 8007e68:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 8007e6a:	4b66      	ldr	r3, [pc, #408]	; (8008004 <checkDemoModCalisma+0x50c>)
 8007e6c:	781b      	ldrb	r3, [r3, #0]
 8007e6e:	2b09      	cmp	r3, #9
 8007e70:	d908      	bls.n	8007e84 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 8007e72:	4b64      	ldr	r3, [pc, #400]	; (8008004 <checkDemoModCalisma+0x50c>)
 8007e74:	2200      	movs	r2, #0
 8007e76:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 8007e78:	4b63      	ldr	r3, [pc, #396]	; (8008008 <checkDemoModCalisma+0x510>)
 8007e7a:	781b      	ldrb	r3, [r3, #0]
 8007e7c:	3301      	adds	r3, #1
 8007e7e:	b2da      	uxtb	r2, r3
 8007e80:	4b61      	ldr	r3, [pc, #388]	; (8008008 <checkDemoModCalisma+0x510>)
 8007e82:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8007e84:	4b60      	ldr	r3, [pc, #384]	; (8008008 <checkDemoModCalisma+0x510>)
 8007e86:	781a      	ldrb	r2, [r3, #0]
 8007e88:	4b60      	ldr	r3, [pc, #384]	; (800800c <checkDemoModCalisma+0x514>)
 8007e8a:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8007e8e:	4b5d      	ldr	r3, [pc, #372]	; (8008004 <checkDemoModCalisma+0x50c>)
 8007e90:	781a      	ldrb	r2, [r3, #0]
 8007e92:	4b5e      	ldr	r3, [pc, #376]	; (800800c <checkDemoModCalisma+0x514>)
 8007e94:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8007e96:	4b5a      	ldr	r3, [pc, #360]	; (8008000 <checkDemoModCalisma+0x508>)
 8007e98:	781a      	ldrb	r2, [r3, #0]
 8007e9a:	4b5c      	ldr	r3, [pc, #368]	; (800800c <checkDemoModCalisma+0x514>)
 8007e9c:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8007e9e:	4b57      	ldr	r3, [pc, #348]	; (8007ffc <checkDemoModCalisma+0x504>)
 8007ea0:	781a      	ldrb	r2, [r3, #0]
 8007ea2:	4b5a      	ldr	r3, [pc, #360]	; (800800c <checkDemoModCalisma+0x514>)
 8007ea4:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8007ea6:	4b54      	ldr	r3, [pc, #336]	; (8007ff8 <checkDemoModCalisma+0x500>)
 8007ea8:	781a      	ldrb	r2, [r3, #0]
 8007eaa:	4b58      	ldr	r3, [pc, #352]	; (800800c <checkDemoModCalisma+0x514>)
 8007eac:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 8007eae:	4b58      	ldr	r3, [pc, #352]	; (8008010 <checkDemoModCalisma+0x518>)
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 8007eb4:	4b4f      	ldr	r3, [pc, #316]	; (8007ff4 <checkDemoModCalisma+0x4fc>)
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 8007eba:	4b56      	ldr	r3, [pc, #344]	; (8008014 <checkDemoModCalisma+0x51c>)
 8007ebc:	781b      	ldrb	r3, [r3, #0]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	f040 8087 	bne.w	8007fd2 <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 8007ec4:	4a54      	ldr	r2, [pc, #336]	; (8008018 <checkDemoModCalisma+0x520>)
 8007ec6:	2101      	movs	r1, #1
 8007ec8:	2002      	movs	r0, #2
 8007eca:	f7f8 fbcd 	bl	8000668 <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 8007ece:	4a53      	ldr	r2, [pc, #332]	; (800801c <checkDemoModCalisma+0x524>)
 8007ed0:	2101      	movs	r1, #1
 8007ed2:	2001      	movs	r0, #1
 8007ed4:	f7f8 fbc8 	bl	8000668 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 8007ed8:	4b4b      	ldr	r3, [pc, #300]	; (8008008 <checkDemoModCalisma+0x510>)
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	220a      	movs	r2, #10
 8007ede:	4950      	ldr	r1, [pc, #320]	; (8008020 <checkDemoModCalisma+0x528>)
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	f004 feed 	bl	800ccc0 <itoa>
			lcd_print(2,12,snum);
 8007ee6:	4a4e      	ldr	r2, [pc, #312]	; (8008020 <checkDemoModCalisma+0x528>)
 8007ee8:	210c      	movs	r1, #12
 8007eea:	2002      	movs	r0, #2
 8007eec:	f7f8 fbbc 	bl	8000668 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 8007ef0:	4b44      	ldr	r3, [pc, #272]	; (8008004 <checkDemoModCalisma+0x50c>)
 8007ef2:	781b      	ldrb	r3, [r3, #0]
 8007ef4:	220a      	movs	r2, #10
 8007ef6:	494a      	ldr	r1, [pc, #296]	; (8008020 <checkDemoModCalisma+0x528>)
 8007ef8:	4618      	mov	r0, r3
 8007efa:	f004 fee1 	bl	800ccc0 <itoa>
			lcd_print(2,13,snum);
 8007efe:	4a48      	ldr	r2, [pc, #288]	; (8008020 <checkDemoModCalisma+0x528>)
 8007f00:	210d      	movs	r1, #13
 8007f02:	2002      	movs	r0, #2
 8007f04:	f7f8 fbb0 	bl	8000668 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 8007f08:	4b3d      	ldr	r3, [pc, #244]	; (8008000 <checkDemoModCalisma+0x508>)
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	220a      	movs	r2, #10
 8007f0e:	4944      	ldr	r1, [pc, #272]	; (8008020 <checkDemoModCalisma+0x528>)
 8007f10:	4618      	mov	r0, r3
 8007f12:	f004 fed5 	bl	800ccc0 <itoa>
			lcd_print(2,14,snum);
 8007f16:	4a42      	ldr	r2, [pc, #264]	; (8008020 <checkDemoModCalisma+0x528>)
 8007f18:	210e      	movs	r1, #14
 8007f1a:	2002      	movs	r0, #2
 8007f1c:	f7f8 fba4 	bl	8000668 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 8007f20:	4b36      	ldr	r3, [pc, #216]	; (8007ffc <checkDemoModCalisma+0x504>)
 8007f22:	781b      	ldrb	r3, [r3, #0]
 8007f24:	220a      	movs	r2, #10
 8007f26:	493e      	ldr	r1, [pc, #248]	; (8008020 <checkDemoModCalisma+0x528>)
 8007f28:	4618      	mov	r0, r3
 8007f2a:	f004 fec9 	bl	800ccc0 <itoa>
			lcd_print(2,15,snum);
 8007f2e:	4a3c      	ldr	r2, [pc, #240]	; (8008020 <checkDemoModCalisma+0x528>)
 8007f30:	210f      	movs	r1, #15
 8007f32:	2002      	movs	r0, #2
 8007f34:	f7f8 fb98 	bl	8000668 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 8007f38:	4b2f      	ldr	r3, [pc, #188]	; (8007ff8 <checkDemoModCalisma+0x500>)
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	220a      	movs	r2, #10
 8007f3e:	4938      	ldr	r1, [pc, #224]	; (8008020 <checkDemoModCalisma+0x528>)
 8007f40:	4618      	mov	r0, r3
 8007f42:	f004 febd 	bl	800ccc0 <itoa>
			lcd_print(2,16,snum);
 8007f46:	4a36      	ldr	r2, [pc, #216]	; (8008020 <checkDemoModCalisma+0x528>)
 8007f48:	2110      	movs	r1, #16
 8007f4a:	2002      	movs	r0, #2
 8007f4c:	f7f8 fb8c 	bl	8000668 <lcd_print>
			mesajYazildi=1;
 8007f50:	4b34      	ldr	r3, [pc, #208]	; (8008024 <checkDemoModCalisma+0x52c>)
 8007f52:	2201      	movs	r2, #1
 8007f54:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 8007f56:	e03c      	b.n	8007fd2 <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 8007f58:	4b33      	ldr	r3, [pc, #204]	; (8008028 <checkDemoModCalisma+0x530>)
 8007f5a:	781b      	ldrb	r3, [r3, #0]
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d003      	beq.n	8007f68 <checkDemoModCalisma+0x470>
 8007f60:	4b2c      	ldr	r3, [pc, #176]	; (8008014 <checkDemoModCalisma+0x51c>)
 8007f62:	781b      	ldrb	r3, [r3, #0]
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d134      	bne.n	8007fd2 <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007f68:	2200      	movs	r2, #0
 8007f6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007f6e:	481b      	ldr	r0, [pc, #108]	; (8007fdc <checkDemoModCalisma+0x4e4>)
 8007f70:	f001 fe91 	bl	8009c96 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007f74:	2200      	movs	r2, #0
 8007f76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007f7a:	4818      	ldr	r0, [pc, #96]	; (8007fdc <checkDemoModCalisma+0x4e4>)
 8007f7c:	f001 fe8b 	bl	8009c96 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007f80:	2200      	movs	r2, #0
 8007f82:	2104      	movs	r1, #4
 8007f84:	4815      	ldr	r0, [pc, #84]	; (8007fdc <checkDemoModCalisma+0x4e4>)
 8007f86:	f001 fe86 	bl	8009c96 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	2102      	movs	r1, #2
 8007f8e:	4813      	ldr	r0, [pc, #76]	; (8007fdc <checkDemoModCalisma+0x4e4>)
 8007f90:	f001 fe81 	bl	8009c96 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007f94:	2200      	movs	r2, #0
 8007f96:	2101      	movs	r1, #1
 8007f98:	4810      	ldr	r0, [pc, #64]	; (8007fdc <checkDemoModCalisma+0x4e4>)
 8007f9a:	f001 fe7c 	bl	8009c96 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	2120      	movs	r1, #32
 8007fa2:	480d      	ldr	r0, [pc, #52]	; (8007fd8 <checkDemoModCalisma+0x4e0>)
 8007fa4:	f001 fe77 	bl	8009c96 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007fa8:	2200      	movs	r2, #0
 8007faa:	2110      	movs	r1, #16
 8007fac:	480a      	ldr	r0, [pc, #40]	; (8007fd8 <checkDemoModCalisma+0x4e0>)
 8007fae:	f001 fe72 	bl	8009c96 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	2180      	movs	r1, #128	; 0x80
 8007fb6:	480b      	ldr	r0, [pc, #44]	; (8007fe4 <checkDemoModCalisma+0x4ec>)
 8007fb8:	f001 fe6d 	bl	8009c96 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	2140      	movs	r1, #64	; 0x40
 8007fc0:	4808      	ldr	r0, [pc, #32]	; (8007fe4 <checkDemoModCalisma+0x4ec>)
 8007fc2:	f001 fe68 	bl	8009c96 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	2120      	movs	r1, #32
 8007fca:	4806      	ldr	r0, [pc, #24]	; (8007fe4 <checkDemoModCalisma+0x4ec>)
 8007fcc:	f001 fe63 	bl	8009c96 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 8007fd0:	e7ff      	b.n	8007fd2 <checkDemoModCalisma+0x4da>
 8007fd2:	bf00      	nop
 8007fd4:	bd80      	pop	{r7, pc}
 8007fd6:	bf00      	nop
 8007fd8:	40011000 	.word	0x40011000
 8007fdc:	40010c00 	.word	0x40010c00
 8007fe0:	20000ca2 	.word	0x20000ca2
 8007fe4:	40010800 	.word	0x40010800
 8007fe8:	20000bd4 	.word	0x20000bd4
 8007fec:	20000be4 	.word	0x20000be4
 8007ff0:	20000ca1 	.word	0x20000ca1
 8007ff4:	20000c87 	.word	0x20000c87
 8007ff8:	20000c46 	.word	0x20000c46
 8007ffc:	20000c47 	.word	0x20000c47
 8008000:	200009bf 	.word	0x200009bf
 8008004:	200009c0 	.word	0x200009c0
 8008008:	20000c48 	.word	0x20000c48
 800800c:	20000b38 	.word	0x20000b38
 8008010:	20000c75 	.word	0x20000c75
 8008014:	20000c66 	.word	0x20000c66
 8008018:	0800e4ac 	.word	0x0800e4ac
 800801c:	0800e4b8 	.word	0x0800e4b8
 8008020:	20000bcc 	.word	0x20000bcc
 8008024:	20000c7d 	.word	0x20000c7d
 8008028:	20000c67 	.word	0x20000c67

0800802c <mergeData>:

char* mergeData() {
 800802c:	b580      	push	{r7, lr}
 800802e:	b09e      	sub	sp, #120	; 0x78
 8008030:	af00      	add	r7, sp, #0
	char combinedString[45] = "";
 8008032:	2300      	movs	r3, #0
 8008034:	643b      	str	r3, [r7, #64]	; 0x40
 8008036:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800803a:	2229      	movs	r2, #41	; 0x29
 800803c:	2100      	movs	r1, #0
 800803e:	4618      	mov	r0, r3
 8008040:	f004 ff56 	bl	800cef0 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 8008044:	4b6a      	ldr	r3, [pc, #424]	; (80081f0 <mergeData+0x1c4>)
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	713b      	strb	r3, [r7, #4]
 800804a:	4b6a      	ldr	r3, [pc, #424]	; (80081f4 <mergeData+0x1c8>)
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	717b      	strb	r3, [r7, #5]
 8008050:	4b69      	ldr	r3, [pc, #420]	; (80081f8 <mergeData+0x1cc>)
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	71bb      	strb	r3, [r7, #6]
 8008056:	4b69      	ldr	r3, [pc, #420]	; (80081fc <mergeData+0x1d0>)
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	71fb      	strb	r3, [r7, #7]
 800805c:	4b68      	ldr	r3, [pc, #416]	; (8008200 <mergeData+0x1d4>)
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	723b      	strb	r3, [r7, #8]
 8008062:	4b68      	ldr	r3, [pc, #416]	; (8008204 <mergeData+0x1d8>)
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	727b      	strb	r3, [r7, #9]
 8008068:	4b67      	ldr	r3, [pc, #412]	; (8008208 <mergeData+0x1dc>)
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	72bb      	strb	r3, [r7, #10]
 800806e:	4b67      	ldr	r3, [pc, #412]	; (800820c <mergeData+0x1e0>)
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	72fb      	strb	r3, [r7, #11]
 8008074:	4b66      	ldr	r3, [pc, #408]	; (8008210 <mergeData+0x1e4>)
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	733b      	strb	r3, [r7, #12]
 800807a:	4b66      	ldr	r3, [pc, #408]	; (8008214 <mergeData+0x1e8>)
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	737b      	strb	r3, [r7, #13]
 8008080:	4b65      	ldr	r3, [pc, #404]	; (8008218 <mergeData+0x1ec>)
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	73bb      	strb	r3, [r7, #14]
 8008086:	4b65      	ldr	r3, [pc, #404]	; (800821c <mergeData+0x1f0>)
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	73fb      	strb	r3, [r7, #15]
 800808c:	4b64      	ldr	r3, [pc, #400]	; (8008220 <mergeData+0x1f4>)
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	743b      	strb	r3, [r7, #16]
 8008092:	4b64      	ldr	r3, [pc, #400]	; (8008224 <mergeData+0x1f8>)
 8008094:	781b      	ldrb	r3, [r3, #0]
 8008096:	747b      	strb	r3, [r7, #17]
 8008098:	4b63      	ldr	r3, [pc, #396]	; (8008228 <mergeData+0x1fc>)
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	74bb      	strb	r3, [r7, #18]
 800809e:	4b63      	ldr	r3, [pc, #396]	; (800822c <mergeData+0x200>)
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	74fb      	strb	r3, [r7, #19]
 80080a4:	4b62      	ldr	r3, [pc, #392]	; (8008230 <mergeData+0x204>)
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	753b      	strb	r3, [r7, #20]
 80080aa:	4b62      	ldr	r3, [pc, #392]	; (8008234 <mergeData+0x208>)
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	757b      	strb	r3, [r7, #21]
 80080b0:	4b61      	ldr	r3, [pc, #388]	; (8008238 <mergeData+0x20c>)
 80080b2:	781b      	ldrb	r3, [r3, #0]
 80080b4:	75bb      	strb	r3, [r7, #22]
 80080b6:	4b61      	ldr	r3, [pc, #388]	; (800823c <mergeData+0x210>)
 80080b8:	781b      	ldrb	r3, [r3, #0]
 80080ba:	75fb      	strb	r3, [r7, #23]
 80080bc:	4b60      	ldr	r3, [pc, #384]	; (8008240 <mergeData+0x214>)
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	763b      	strb	r3, [r7, #24]
 80080c2:	4b60      	ldr	r3, [pc, #384]	; (8008244 <mergeData+0x218>)
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	767b      	strb	r3, [r7, #25]
 80080c8:	4b5f      	ldr	r3, [pc, #380]	; (8008248 <mergeData+0x21c>)
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	76bb      	strb	r3, [r7, #26]
 80080ce:	4b5f      	ldr	r3, [pc, #380]	; (800824c <mergeData+0x220>)
 80080d0:	781b      	ldrb	r3, [r3, #0]
 80080d2:	76fb      	strb	r3, [r7, #27]
 80080d4:	4b5e      	ldr	r3, [pc, #376]	; (8008250 <mergeData+0x224>)
 80080d6:	781b      	ldrb	r3, [r3, #0]
 80080d8:	773b      	strb	r3, [r7, #28]
 80080da:	4b5e      	ldr	r3, [pc, #376]	; (8008254 <mergeData+0x228>)
 80080dc:	781b      	ldrb	r3, [r3, #0]
 80080de:	777b      	strb	r3, [r7, #29]
 80080e0:	4b5d      	ldr	r3, [pc, #372]	; (8008258 <mergeData+0x22c>)
 80080e2:	781b      	ldrb	r3, [r3, #0]
 80080e4:	77bb      	strb	r3, [r7, #30]
 80080e6:	4b5d      	ldr	r3, [pc, #372]	; (800825c <mergeData+0x230>)
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	77fb      	strb	r3, [r7, #31]
 80080ec:	4b5c      	ldr	r3, [pc, #368]	; (8008260 <mergeData+0x234>)
 80080ee:	781b      	ldrb	r3, [r3, #0]
 80080f0:	f887 3020 	strb.w	r3, [r7, #32]
 80080f4:	4b5b      	ldr	r3, [pc, #364]	; (8008264 <mergeData+0x238>)
 80080f6:	781b      	ldrb	r3, [r3, #0]
 80080f8:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 80080fc:	4b5a      	ldr	r3, [pc, #360]	; (8008268 <mergeData+0x23c>)
 80080fe:	781b      	ldrb	r3, [r3, #0]
 8008100:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008104:	4b59      	ldr	r3, [pc, #356]	; (800826c <mergeData+0x240>)
 8008106:	781b      	ldrb	r3, [r3, #0]
 8008108:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800810c:	4b58      	ldr	r3, [pc, #352]	; (8008270 <mergeData+0x244>)
 800810e:	781b      	ldrb	r3, [r3, #0]
 8008110:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[37],
 8008114:	4b57      	ldr	r3, [pc, #348]	; (8008274 <mergeData+0x248>)
 8008116:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	uint8_t uintVariables[] = {
 800811a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[38],
 800811e:	4b55      	ldr	r3, [pc, #340]	; (8008274 <mergeData+0x248>)
 8008120:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 8008124:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[39],
 8008128:	4b52      	ldr	r3, [pc, #328]	; (8008274 <mergeData+0x248>)
 800812a:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 800812e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[40],
 8008132:	4b50      	ldr	r3, [pc, #320]	; (8008274 <mergeData+0x248>)
 8008134:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 8008138:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[41],
 800813c:	4b4d      	ldr	r3, [pc, #308]	; (8008274 <mergeData+0x248>)
 800813e:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 8008142:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[42],
 8008146:	4b4b      	ldr	r3, [pc, #300]	; (8008274 <mergeData+0x248>)
 8008148:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 800814c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[43],
 8008150:	4b48      	ldr	r3, [pc, #288]	; (8008274 <mergeData+0x248>)
 8008152:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 8008156:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[44],
 800815a:	4b46      	ldr	r3, [pc, #280]	; (8008274 <mergeData+0x248>)
 800815c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 8008160:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[45],
 8008164:	4b43      	ldr	r3, [pc, #268]	; (8008274 <mergeData+0x248>)
 8008166:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 800816a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[46],
 800816e:	4b41      	ldr	r3, [pc, #260]	; (8008274 <mergeData+0x248>)
 8008170:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 8008174:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			eepromData[47],
 8008178:	4b3e      	ldr	r3, [pc, #248]	; (8008274 <mergeData+0x248>)
 800817a:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 800817e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008182:	4b3d      	ldr	r3, [pc, #244]	; (8008278 <mergeData+0x24c>)
 8008184:	781b      	ldrb	r3, [r3, #0]
 8008186:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 800818a:	2300      	movs	r3, #0
 800818c:	677b      	str	r3, [r7, #116]	; 0x74
 800818e:	e015      	b.n	80081bc <mergeData+0x190>
	    sprintf(temp, "%u", uintVariables[i]);
 8008190:	1d3a      	adds	r2, r7, #4
 8008192:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008194:	4413      	add	r3, r2
 8008196:	781b      	ldrb	r3, [r3, #0]
 8008198:	461a      	mov	r2, r3
 800819a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800819e:	4937      	ldr	r1, [pc, #220]	; (800827c <mergeData+0x250>)
 80081a0:	4618      	mov	r0, r3
 80081a2:	f004 fe85 	bl	800ceb0 <siprintf>
	    strcat(combinedString, temp);
 80081a6:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80081aa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80081ae:	4611      	mov	r1, r2
 80081b0:	4618      	mov	r0, r3
 80081b2:	f004 fea5 	bl	800cf00 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 80081b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081b8:	3301      	adds	r3, #1
 80081ba:	677b      	str	r3, [r7, #116]	; 0x74
 80081bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80081be:	2b2c      	cmp	r3, #44	; 0x2c
 80081c0:	d9e6      	bls.n	8008190 <mergeData+0x164>
	}

	char* result = malloc(strlen(combinedString) + 1);
 80081c2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80081c6:	4618      	mov	r0, r3
 80081c8:	f7f8 f82c 	bl	8000224 <strlen>
 80081cc:	4603      	mov	r3, r0
 80081ce:	3301      	adds	r3, #1
 80081d0:	4618      	mov	r0, r3
 80081d2:	f004 fd77 	bl	800ccc4 <malloc>
 80081d6:	4603      	mov	r3, r0
 80081d8:	673b      	str	r3, [r7, #112]	; 0x70
	strcpy(result, combinedString);
 80081da:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80081de:	4619      	mov	r1, r3
 80081e0:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80081e2:	f004 fed9 	bl	800cf98 <strcpy>
	return result;
 80081e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3778      	adds	r7, #120	; 0x78
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}
 80081f0:	20000c58 	.word	0x20000c58
 80081f4:	20000c4a 	.word	0x20000c4a
 80081f8:	20000c4d 	.word	0x20000c4d
 80081fc:	20000c4e 	.word	0x20000c4e
 8008200:	20000c4f 	.word	0x20000c4f
 8008204:	20000c56 	.word	0x20000c56
 8008208:	20000c50 	.word	0x20000c50
 800820c:	20000c51 	.word	0x20000c51
 8008210:	20000c55 	.word	0x20000c55
 8008214:	20000c52 	.word	0x20000c52
 8008218:	20000c62 	.word	0x20000c62
 800821c:	20000c53 	.word	0x20000c53
 8008220:	20000c63 	.word	0x20000c63
 8008224:	20000c54 	.word	0x20000c54
 8008228:	20000c64 	.word	0x20000c64
 800822c:	20000c57 	.word	0x20000c57
 8008230:	20000c59 	.word	0x20000c59
 8008234:	20000c5a 	.word	0x20000c5a
 8008238:	20000c5b 	.word	0x20000c5b
 800823c:	20000c5c 	.word	0x20000c5c
 8008240:	20000c5d 	.word	0x20000c5d
 8008244:	20000c5e 	.word	0x20000c5e
 8008248:	20000c5f 	.word	0x20000c5f
 800824c:	20000c60 	.word	0x20000c60
 8008250:	20000c61 	.word	0x20000c61
 8008254:	20000c65 	.word	0x20000c65
 8008258:	20000c67 	.word	0x20000c67
 800825c:	20000c46 	.word	0x20000c46
 8008260:	20000c47 	.word	0x20000c47
 8008264:	200009bf 	.word	0x200009bf
 8008268:	200009c0 	.word	0x200009c0
 800826c:	20000c48 	.word	0x20000c48
 8008270:	20000c6a 	.word	0x20000c6a
 8008274:	20000b38 	.word	0x20000b38
 8008278:	20000940 	.word	0x20000940
 800827c:	0800e4cc 	.word	0x0800e4cc

08008280 <mainLoop>:

void mainLoop() {
 8008280:	b580      	push	{r7, lr}
 8008282:	b084      	sub	sp, #16
 8008284:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 8008286:	f7fd fffb 	bl	8006280 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 800828a:	2101      	movs	r1, #1
 800828c:	48ac      	ldr	r0, [pc, #688]	; (8008540 <mainLoop+0x2c0>)
 800828e:	f001 fceb 	bl	8009c68 <HAL_GPIO_ReadPin>
 8008292:	4603      	mov	r3, r0
 8008294:	2b00      	cmp	r3, #0
 8008296:	d136      	bne.n	8008306 <mainLoop+0x86>
 8008298:	2108      	movs	r1, #8
 800829a:	48aa      	ldr	r0, [pc, #680]	; (8008544 <mainLoop+0x2c4>)
 800829c:	f001 fce4 	bl	8009c68 <HAL_GPIO_ReadPin>
 80082a0:	4603      	mov	r3, r0
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d12f      	bne.n	8008306 <mainLoop+0x86>
 80082a6:	2102      	movs	r1, #2
 80082a8:	48a5      	ldr	r0, [pc, #660]	; (8008540 <mainLoop+0x2c0>)
 80082aa:	f001 fcdd 	bl	8009c68 <HAL_GPIO_ReadPin>
 80082ae:	4603      	mov	r3, r0
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d128      	bne.n	8008306 <mainLoop+0x86>
 80082b4:	2104      	movs	r1, #4
 80082b6:	48a2      	ldr	r0, [pc, #648]	; (8008540 <mainLoop+0x2c0>)
 80082b8:	f001 fcd6 	bl	8009c68 <HAL_GPIO_ReadPin>
 80082bc:	4603      	mov	r3, r0
 80082be:	2b00      	cmp	r3, #0
 80082c0:	d121      	bne.n	8008306 <mainLoop+0x86>
 80082c2:	2108      	movs	r1, #8
 80082c4:	489e      	ldr	r0, [pc, #632]	; (8008540 <mainLoop+0x2c0>)
 80082c6:	f001 fccf 	bl	8009c68 <HAL_GPIO_ReadPin>
 80082ca:	4603      	mov	r3, r0
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d11a      	bne.n	8008306 <mainLoop+0x86>
 80082d0:	2180      	movs	r1, #128	; 0x80
 80082d2:	489c      	ldr	r0, [pc, #624]	; (8008544 <mainLoop+0x2c4>)
 80082d4:	f001 fcc8 	bl	8009c68 <HAL_GPIO_ReadPin>
 80082d8:	4603      	mov	r3, r0
 80082da:	2b01      	cmp	r3, #1
 80082dc:	d113      	bne.n	8008306 <mainLoop+0x86>
 80082de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80082e2:	4898      	ldr	r0, [pc, #608]	; (8008544 <mainLoop+0x2c4>)
 80082e4:	f001 fcc0 	bl	8009c68 <HAL_GPIO_ReadPin>
 80082e8:	4603      	mov	r3, r0
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	d10b      	bne.n	8008306 <mainLoop+0x86>
 80082ee:	f44f 7100 	mov.w	r1, #512	; 0x200
 80082f2:	4894      	ldr	r0, [pc, #592]	; (8008544 <mainLoop+0x2c4>)
 80082f4:	f001 fcb8 	bl	8009c68 <HAL_GPIO_ReadPin>
 80082f8:	4603      	mov	r3, r0
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d103      	bne.n	8008306 <mainLoop+0x86>
			butonKontrol=0;
 80082fe:	4b92      	ldr	r3, [pc, #584]	; (8008548 <mainLoop+0x2c8>)
 8008300:	2200      	movs	r2, #0
 8008302:	701a      	strb	r2, [r3, #0]
 8008304:	e003      	b.n	800830e <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 8008306:	4b91      	ldr	r3, [pc, #580]	; (800854c <mainLoop+0x2cc>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	4a91      	ldr	r2, [pc, #580]	; (8008550 <mainLoop+0x2d0>)
 800830c:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 800830e:	4b91      	ldr	r3, [pc, #580]	; (8008554 <mainLoop+0x2d4>)
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d039      	beq.n	800838a <mainLoop+0x10a>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008316:	bf00      	nop
 8008318:	488f      	ldr	r0, [pc, #572]	; (8008558 <mainLoop+0x2d8>)
 800831a:	f002 face 	bl	800a8ba <HAL_I2C_GetError>
 800831e:	4603      	mov	r3, r0
 8008320:	2b04      	cmp	r3, #4
 8008322:	d0f9      	beq.n	8008318 <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008324:	bf00      	nop
 8008326:	488c      	ldr	r0, [pc, #560]	; (8008558 <mainLoop+0x2d8>)
 8008328:	f002 faba 	bl	800a8a0 <HAL_I2C_GetState>
 800832c:	4603      	mov	r3, r0
 800832e:	2b20      	cmp	r3, #32
 8008330:	d1f9      	bne.n	8008326 <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1,0xA0,0,63,eepromData,63,3000);
 8008332:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8008336:	9302      	str	r3, [sp, #8]
 8008338:	233f      	movs	r3, #63	; 0x3f
 800833a:	9301      	str	r3, [sp, #4]
 800833c:	4b87      	ldr	r3, [pc, #540]	; (800855c <mainLoop+0x2dc>)
 800833e:	9300      	str	r3, [sp, #0]
 8008340:	233f      	movs	r3, #63	; 0x3f
 8008342:	2200      	movs	r2, #0
 8008344:	21a0      	movs	r1, #160	; 0xa0
 8008346:	4884      	ldr	r0, [pc, #528]	; (8008558 <mainLoop+0x2d8>)
 8008348:	f001 ff48 	bl	800a1dc <HAL_I2C_Mem_Write>
		  HAL_Delay(5);
 800834c:	2005      	movs	r0, #5
 800834e:	f000 febb 	bl	80090c8 <HAL_Delay>

		  hafizaYaz=0;
 8008352:	4b80      	ldr	r3, [pc, #512]	; (8008554 <mainLoop+0x2d4>)
 8008354:	2200      	movs	r2, #0
 8008356:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 8008358:	4b81      	ldr	r3, [pc, #516]	; (8008560 <mainLoop+0x2e0>)
 800835a:	781b      	ldrb	r3, [r3, #0]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d105      	bne.n	800836c <mainLoop+0xec>
			  lcd_print(2,1,"Data yazildi    ");
 8008360:	4a80      	ldr	r2, [pc, #512]	; (8008564 <mainLoop+0x2e4>)
 8008362:	2101      	movs	r1, #1
 8008364:	2002      	movs	r0, #2
 8008366:	f7f8 f97f 	bl	8000668 <lcd_print>
 800836a:	e008      	b.n	800837e <mainLoop+0xfe>
		  } else if(dilSecim==1) {
 800836c:	4b7c      	ldr	r3, [pc, #496]	; (8008560 <mainLoop+0x2e0>)
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	2b01      	cmp	r3, #1
 8008372:	d104      	bne.n	800837e <mainLoop+0xfe>
			  lcd_print(2,1,"Data Wrote      ");
 8008374:	4a7c      	ldr	r2, [pc, #496]	; (8008568 <mainLoop+0x2e8>)
 8008376:	2101      	movs	r1, #1
 8008378:	2002      	movs	r0, #2
 800837a:	f7f8 f975 	bl	8000668 <lcd_print>
		  }

		  HAL_Delay(1000);
 800837e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008382:	f000 fea1 	bl	80090c8 <HAL_Delay>
		  lcd_clear();
 8008386:	f7f8 f99b 	bl	80006c0 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 800838a:	4b78      	ldr	r3, [pc, #480]	; (800856c <mainLoop+0x2ec>)
 800838c:	781b      	ldrb	r3, [r3, #0]
 800838e:	f083 0301 	eor.w	r3, r3, #1
 8008392:	b2db      	uxtb	r3, r3
 8008394:	2b00      	cmp	r3, #0
 8008396:	d06e      	beq.n	8008476 <mainLoop+0x1f6>
 8008398:	486f      	ldr	r0, [pc, #444]	; (8008558 <mainLoop+0x2d8>)
 800839a:	f002 fa81 	bl	800a8a0 <HAL_I2C_GetState>
 800839e:	4603      	mov	r3, r0
 80083a0:	2b20      	cmp	r3, #32
 80083a2:	d168      	bne.n	8008476 <mainLoop+0x1f6>
		  if(ilkOkuma==0) {
 80083a4:	4b72      	ldr	r3, [pc, #456]	; (8008570 <mainLoop+0x2f0>)
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	f083 0301 	eor.w	r3, r3, #1
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d044      	beq.n	800843c <mainLoop+0x1bc>
			  lcd_print(1,1,"   **EEPROM**   ");
 80083b2:	4a70      	ldr	r2, [pc, #448]	; (8008574 <mainLoop+0x2f4>)
 80083b4:	2101      	movs	r1, #1
 80083b6:	2001      	movs	r0, #1
 80083b8:	f7f8 f956 	bl	8000668 <lcd_print>
			  if(dilSecim==0) {
 80083bc:	4b68      	ldr	r3, [pc, #416]	; (8008560 <mainLoop+0x2e0>)
 80083be:	781b      	ldrb	r3, [r3, #0]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d105      	bne.n	80083d0 <mainLoop+0x150>
				  lcd_print(2,1,"Data Okunuyor...");
 80083c4:	4a6c      	ldr	r2, [pc, #432]	; (8008578 <mainLoop+0x2f8>)
 80083c6:	2101      	movs	r1, #1
 80083c8:	2002      	movs	r0, #2
 80083ca:	f7f8 f94d 	bl	8000668 <lcd_print>
 80083ce:	e008      	b.n	80083e2 <mainLoop+0x162>
			  } else if(dilSecim==1) {
 80083d0:	4b63      	ldr	r3, [pc, #396]	; (8008560 <mainLoop+0x2e0>)
 80083d2:	781b      	ldrb	r3, [r3, #0]
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	d104      	bne.n	80083e2 <mainLoop+0x162>
				  lcd_print(2,1,"Data Reading... ");
 80083d8:	4a68      	ldr	r2, [pc, #416]	; (800857c <mainLoop+0x2fc>)
 80083da:	2101      	movs	r1, #1
 80083dc:	2002      	movs	r0, #2
 80083de:	f7f8 f943 	bl	8000668 <lcd_print>
			  }
			  HAL_Delay(1000);
 80083e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80083e6:	f000 fe6f 	bl	80090c8 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80083ea:	bf00      	nop
 80083ec:	485a      	ldr	r0, [pc, #360]	; (8008558 <mainLoop+0x2d8>)
 80083ee:	f002 fa64 	bl	800a8ba <HAL_I2C_GetError>
 80083f2:	4603      	mov	r3, r0
 80083f4:	2b04      	cmp	r3, #4
 80083f6:	d0f9      	beq.n	80083ec <mainLoop+0x16c>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80083f8:	e003      	b.n	8008402 <mainLoop+0x182>
				  HAL_Delay(1000);
 80083fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80083fe:	f000 fe63 	bl	80090c8 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8008402:	4855      	ldr	r0, [pc, #340]	; (8008558 <mainLoop+0x2d8>)
 8008404:	f002 fa4c 	bl	800a8a0 <HAL_I2C_GetState>
 8008408:	4603      	mov	r3, r0
 800840a:	2b20      	cmp	r3, #32
 800840c:	d1f5      	bne.n	80083fa <mainLoop+0x17a>
			  }

			  if(dilSecim==0) {
 800840e:	4b54      	ldr	r3, [pc, #336]	; (8008560 <mainLoop+0x2e0>)
 8008410:	781b      	ldrb	r3, [r3, #0]
 8008412:	2b00      	cmp	r3, #0
 8008414:	d105      	bne.n	8008422 <mainLoop+0x1a2>
				  lcd_print(2,1,"Data Okundu.    ");
 8008416:	4a5a      	ldr	r2, [pc, #360]	; (8008580 <mainLoop+0x300>)
 8008418:	2101      	movs	r1, #1
 800841a:	2002      	movs	r0, #2
 800841c:	f7f8 f924 	bl	8000668 <lcd_print>
 8008420:	e008      	b.n	8008434 <mainLoop+0x1b4>
			  } else if(dilSecim==1) {
 8008422:	4b4f      	ldr	r3, [pc, #316]	; (8008560 <mainLoop+0x2e0>)
 8008424:	781b      	ldrb	r3, [r3, #0]
 8008426:	2b01      	cmp	r3, #1
 8008428:	d104      	bne.n	8008434 <mainLoop+0x1b4>
				  lcd_print(2,1,"Data Read.      ");
 800842a:	4a56      	ldr	r2, [pc, #344]	; (8008584 <mainLoop+0x304>)
 800842c:	2101      	movs	r1, #1
 800842e:	2002      	movs	r0, #2
 8008430:	f7f8 f91a 	bl	8000668 <lcd_print>
			  }

			  ilkOkuma=1;
 8008434:	4b4e      	ldr	r3, [pc, #312]	; (8008570 <mainLoop+0x2f0>)
 8008436:	2201      	movs	r2, #1
 8008438:	701a      	strb	r2, [r3, #0]
 800843a:	e014      	b.n	8008466 <mainLoop+0x1e6>
		  } else {
			  if(dilSecim==0) {
 800843c:	4b48      	ldr	r3, [pc, #288]	; (8008560 <mainLoop+0x2e0>)
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	2b00      	cmp	r3, #0
 8008442:	d105      	bne.n	8008450 <mainLoop+0x1d0>
				  lcd_print(2,1,"Deger Kaydedildi");
 8008444:	4a50      	ldr	r2, [pc, #320]	; (8008588 <mainLoop+0x308>)
 8008446:	2101      	movs	r1, #1
 8008448:	2002      	movs	r0, #2
 800844a:	f7f8 f90d 	bl	8000668 <lcd_print>
 800844e:	e008      	b.n	8008462 <mainLoop+0x1e2>
			  } else if(dilSecim==1) {
 8008450:	4b43      	ldr	r3, [pc, #268]	; (8008560 <mainLoop+0x2e0>)
 8008452:	781b      	ldrb	r3, [r3, #0]
 8008454:	2b01      	cmp	r3, #1
 8008456:	d104      	bne.n	8008462 <mainLoop+0x1e2>
				  lcd_print(2,1,"Value Saved     ");
 8008458:	4a4c      	ldr	r2, [pc, #304]	; (800858c <mainLoop+0x30c>)
 800845a:	2101      	movs	r1, #1
 800845c:	2002      	movs	r0, #2
 800845e:	f7f8 f903 	bl	8000668 <lcd_print>
			  }
			  lcd_clear();
 8008462:	f7f8 f92d 	bl	80006c0 <lcd_clear>
		  }

		  lcd_clear();
 8008466:	f7f8 f92b 	bl	80006c0 <lcd_clear>

		  eepromKontrol(1);
 800846a:	2001      	movs	r0, #1
 800846c:	f7fd fac4 	bl	80059f8 <eepromKontrol>
		  hafizaOku=1;
 8008470:	4b3e      	ldr	r3, [pc, #248]	; (800856c <mainLoop+0x2ec>)
 8008472:	2201      	movs	r2, #1
 8008474:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 8008476:	4b46      	ldr	r3, [pc, #280]	; (8008590 <mainLoop+0x310>)
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d11c      	bne.n	80084b8 <mainLoop+0x238>
 800847e:	4b45      	ldr	r3, [pc, #276]	; (8008594 <mainLoop+0x314>)
 8008480:	781b      	ldrb	r3, [r3, #0]
 8008482:	f083 0301 	eor.w	r3, r3, #1
 8008486:	b2db      	uxtb	r3, r3
 8008488:	2b00      	cmp	r3, #0
 800848a:	d015      	beq.n	80084b8 <mainLoop+0x238>
 800848c:	4b42      	ldr	r3, [pc, #264]	; (8008598 <mainLoop+0x318>)
 800848e:	781b      	ldrb	r3, [r3, #0]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d111      	bne.n	80084b8 <mainLoop+0x238>
			lcd_clear();
 8008494:	f7f8 f914 	bl	80006c0 <lcd_clear>
			HAL_Delay(10);
 8008498:	200a      	movs	r0, #10
 800849a:	f000 fe15 	bl	80090c8 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 800849e:	4a3f      	ldr	r2, [pc, #252]	; (800859c <mainLoop+0x31c>)
 80084a0:	2101      	movs	r1, #1
 80084a2:	2001      	movs	r0, #1
 80084a4:	f7f8 f8e0 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 80084a8:	4a3d      	ldr	r2, [pc, #244]	; (80085a0 <mainLoop+0x320>)
 80084aa:	2101      	movs	r1, #1
 80084ac:	2002      	movs	r0, #2
 80084ae:	f7f8 f8db 	bl	8000668 <lcd_print>
			mesajYazildi=1;
 80084b2:	4b38      	ldr	r3, [pc, #224]	; (8008594 <mainLoop+0x314>)
 80084b4:	2201      	movs	r2, #1
 80084b6:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 80084b8:	4b35      	ldr	r3, [pc, #212]	; (8008590 <mainLoop+0x310>)
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d112      	bne.n	80084e6 <mainLoop+0x266>
 80084c0:	2102      	movs	r1, #2
 80084c2:	481f      	ldr	r0, [pc, #124]	; (8008540 <mainLoop+0x2c0>)
 80084c4:	f001 fbd0 	bl	8009c68 <HAL_GPIO_ReadPin>
 80084c8:	4603      	mov	r3, r0
 80084ca:	2b01      	cmp	r3, #1
 80084cc:	d10b      	bne.n	80084e6 <mainLoop+0x266>
 80084ce:	2104      	movs	r1, #4
 80084d0:	481b      	ldr	r0, [pc, #108]	; (8008540 <mainLoop+0x2c0>)
 80084d2:	f001 fbc9 	bl	8009c68 <HAL_GPIO_ReadPin>
 80084d6:	4603      	mov	r3, r0
 80084d8:	2b01      	cmp	r3, #1
 80084da:	d104      	bne.n	80084e6 <mainLoop+0x266>
			menuGiris=1;
 80084dc:	4b2c      	ldr	r3, [pc, #176]	; (8008590 <mainLoop+0x310>)
 80084de:	2201      	movs	r2, #1
 80084e0:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 80084e2:	f7f8 f8ed 	bl	80006c0 <lcd_clear>
		}

		if(menuGiris==1) {
 80084e6:	4b2a      	ldr	r3, [pc, #168]	; (8008590 <mainLoop+0x310>)
 80084e8:	781b      	ldrb	r3, [r3, #0]
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	d102      	bne.n	80084f4 <mainLoop+0x274>
			menu(&hi2c1);
 80084ee:	481a      	ldr	r0, [pc, #104]	; (8008558 <mainLoop+0x2d8>)
 80084f0:	f7f8 fff0 	bl	80014d4 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 80084f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80084f8:	4812      	ldr	r0, [pc, #72]	; (8008544 <mainLoop+0x2c4>)
 80084fa:	f001 fbe4 	bl	8009cc6 <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 80084fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008502:	4828      	ldr	r0, [pc, #160]	; (80085a4 <mainLoop+0x324>)
 8008504:	f001 fbb0 	bl	8009c68 <HAL_GPIO_ReadPin>
 8008508:	4603      	mov	r3, r0
 800850a:	2b00      	cmp	r3, #0
 800850c:	d10a      	bne.n	8008524 <mainLoop+0x2a4>
 800850e:	4b26      	ldr	r3, [pc, #152]	; (80085a8 <mainLoop+0x328>)
 8008510:	781b      	ldrb	r3, [r3, #0]
 8008512:	f083 0301 	eor.w	r3, r3, #1
 8008516:	b2db      	uxtb	r3, r3
 8008518:	2b00      	cmp	r3, #0
 800851a:	d003      	beq.n	8008524 <mainLoop+0x2a4>
			stopVar=1;
 800851c:	4b23      	ldr	r3, [pc, #140]	; (80085ac <mainLoop+0x32c>)
 800851e:	2201      	movs	r2, #1
 8008520:	701a      	strb	r2, [r3, #0]
 8008522:	e002      	b.n	800852a <mainLoop+0x2aa>
		} else {
			stopVar=0;
 8008524:	4b21      	ldr	r3, [pc, #132]	; (80085ac <mainLoop+0x32c>)
 8008526:	2200      	movs	r2, #0
 8008528:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 800852a:	f7fd fec9 	bl	80062c0 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 800852e:	f7fd fefb 	bl	8006328 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 8008532:	f7fd ff3f 	bl	80063b4 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 8008536:	f7fd ff8f 	bl	8006458 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 800853a:	f7ff fadd 	bl	8007af8 <checkDemoModCalisma>
		checkLCDBacklight();
 800853e:	e6a2      	b.n	8008286 <mainLoop+0x6>
 8008540:	40010800 	.word	0x40010800
 8008544:	40011000 	.word	0x40011000
 8008548:	20000c78 	.word	0x20000c78
 800854c:	20000bd4 	.word	0x20000bd4
 8008550:	20000bf0 	.word	0x20000bf0
 8008554:	20000c75 	.word	0x20000c75
 8008558:	20000e08 	.word	0x20000e08
 800855c:	20000b38 	.word	0x20000b38
 8008560:	20000c6a 	.word	0x20000c6a
 8008564:	0800e4d0 	.word	0x0800e4d0
 8008568:	0800e4e4 	.word	0x0800e4e4
 800856c:	20000c76 	.word	0x20000c76
 8008570:	20000c77 	.word	0x20000c77
 8008574:	0800e4f8 	.word	0x0800e4f8
 8008578:	0800e50c 	.word	0x0800e50c
 800857c:	0800e520 	.word	0x0800e520
 8008580:	0800e534 	.word	0x0800e534
 8008584:	0800e548 	.word	0x0800e548
 8008588:	0800e55c 	.word	0x0800e55c
 800858c:	0800e570 	.word	0x0800e570
 8008590:	20000c66 	.word	0x20000c66
 8008594:	20000c7d 	.word	0x20000c7d
 8008598:	20000c67 	.word	0x20000c67
 800859c:	0800e434 	.word	0x0800e434
 80085a0:	0800e448 	.word	0x0800e448
 80085a4:	40010c00 	.word	0x40010c00
 80085a8:	20000c9e 	.word	0x20000c9e
 80085ac:	20000c9b 	.word	0x20000c9b

080085b0 <convertAndSave>:
	}
}

void convertAndSave(const char* writeArray, int state) {
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b08a      	sub	sp, #40	; 0x28
 80085b4:	af04      	add	r7, sp, #16
 80085b6:	6078      	str	r0, [r7, #4]
 80085b8:	6039      	str	r1, [r7, #0]
	int arrayLength = strlen(writeArray);
 80085ba:	6878      	ldr	r0, [r7, #4]
 80085bc:	f7f7 fe32 	bl	8000224 <strlen>
 80085c0:	4603      	mov	r3, r0
 80085c2:	60bb      	str	r3, [r7, #8]
	int loopVal;

	if(state == 0) {
 80085c4:	683b      	ldr	r3, [r7, #0]
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d12c      	bne.n	8008624 <convertAndSave+0x74>
		loopVal = 60;
 80085ca:	233c      	movs	r3, #60	; 0x3c
 80085cc:	617b      	str	r3, [r7, #20]
		for(int i=0; i<arrayLength; i++) {
 80085ce:	2300      	movs	r3, #0
 80085d0:	613b      	str	r3, [r7, #16]
 80085d2:	e023      	b.n	800861c <convertAndSave+0x6c>
			for(int j=0; j<strlen(numbersArray); j++) {
 80085d4:	2300      	movs	r3, #0
 80085d6:	60fb      	str	r3, [r7, #12]
 80085d8:	e016      	b.n	8008608 <convertAndSave+0x58>
				if(writeArray[i] == numbersArray[j]) {
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	687a      	ldr	r2, [r7, #4]
 80085de:	4413      	add	r3, r2
 80085e0:	781a      	ldrb	r2, [r3, #0]
 80085e2:	491c      	ldr	r1, [pc, #112]	; (8008654 <convertAndSave+0xa4>)
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	440b      	add	r3, r1
 80085e8:	781b      	ldrb	r3, [r3, #0]
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d109      	bne.n	8008602 <convertAndSave+0x52>
					eepromData[loopVal] = j;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	b2d9      	uxtb	r1, r3
 80085f2:	4a19      	ldr	r2, [pc, #100]	; (8008658 <convertAndSave+0xa8>)
 80085f4:	697b      	ldr	r3, [r7, #20]
 80085f6:	4413      	add	r3, r2
 80085f8:	460a      	mov	r2, r1
 80085fa:	701a      	strb	r2, [r3, #0]
					loopVal++;
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	3301      	adds	r3, #1
 8008600:	617b      	str	r3, [r7, #20]
			for(int j=0; j<strlen(numbersArray); j++) {
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	3301      	adds	r3, #1
 8008606:	60fb      	str	r3, [r7, #12]
 8008608:	4812      	ldr	r0, [pc, #72]	; (8008654 <convertAndSave+0xa4>)
 800860a:	f7f7 fe0b 	bl	8000224 <strlen>
 800860e:	4602      	mov	r2, r0
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	429a      	cmp	r2, r3
 8008614:	d8e1      	bhi.n	80085da <convertAndSave+0x2a>
		for(int i=0; i<arrayLength; i++) {
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	3301      	adds	r3, #1
 800861a:	613b      	str	r3, [r7, #16]
 800861c:	693a      	ldr	r2, [r7, #16]
 800861e:	68bb      	ldr	r3, [r7, #8]
 8008620:	429a      	cmp	r2, r3
 8008622:	dbd7      	blt.n	80085d4 <convertAndSave+0x24>
				}
			}
		}
	}

	HAL_Delay(200);
 8008624:	20c8      	movs	r0, #200	; 0xc8
 8008626:	f000 fd4f 	bl	80090c8 <HAL_Delay>
	HAL_I2C_Mem_Write(&hi2c1,0xA0,0,145,&eepromData[0],145,3000);
 800862a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800862e:	9302      	str	r3, [sp, #8]
 8008630:	2391      	movs	r3, #145	; 0x91
 8008632:	9301      	str	r3, [sp, #4]
 8008634:	4b08      	ldr	r3, [pc, #32]	; (8008658 <convertAndSave+0xa8>)
 8008636:	9300      	str	r3, [sp, #0]
 8008638:	2391      	movs	r3, #145	; 0x91
 800863a:	2200      	movs	r2, #0
 800863c:	21a0      	movs	r1, #160	; 0xa0
 800863e:	4807      	ldr	r0, [pc, #28]	; (800865c <convertAndSave+0xac>)
 8008640:	f001 fdcc 	bl	800a1dc <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8008644:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008648:	f000 fd3e 	bl	80090c8 <HAL_Delay>
}
 800864c:	bf00      	nop
 800864e:	3718      	adds	r7, #24
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}
 8008654:	200009b4 	.word	0x200009b4
 8008658:	20000b38 	.word	0x20000b38
 800865c:	20000e08 	.word	0x20000e08

08008660 <saveAndConvert>:

void saveAndConvert(int state) {
 8008660:	b580      	push	{r7, lr}
 8008662:	b088      	sub	sp, #32
 8008664:	af04      	add	r7, sp, #16
 8008666:	6078      	str	r0, [r7, #4]
	int loopVal;

	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 145, eepromData, 145, 3000);
 8008668:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800866c:	9302      	str	r3, [sp, #8]
 800866e:	2391      	movs	r3, #145	; 0x91
 8008670:	9301      	str	r3, [sp, #4]
 8008672:	4b1a      	ldr	r3, [pc, #104]	; (80086dc <saveAndConvert+0x7c>)
 8008674:	9300      	str	r3, [sp, #0]
 8008676:	2391      	movs	r3, #145	; 0x91
 8008678:	2200      	movs	r2, #0
 800867a:	21a0      	movs	r1, #160	; 0xa0
 800867c:	4818      	ldr	r0, [pc, #96]	; (80086e0 <saveAndConvert+0x80>)
 800867e:	f001 fea7 	bl	800a3d0 <HAL_I2C_Mem_Read>
	HAL_Delay(1000);
 8008682:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008686:	f000 fd1f 	bl	80090c8 <HAL_Delay>

	if(state == 0) {
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d121      	bne.n	80086d4 <saveAndConvert+0x74>
		loopVal = 60;
 8008690:	233c      	movs	r3, #60	; 0x3c
 8008692:	60fb      	str	r3, [r7, #12]
		for(int i=0; i<12; i++) {
 8008694:	2300      	movs	r3, #0
 8008696:	60bb      	str	r3, [r7, #8]
 8008698:	e019      	b.n	80086ce <saveAndConvert+0x6e>
			if(eepromData[loopVal] != '\0') {
 800869a:	4a10      	ldr	r2, [pc, #64]	; (80086dc <saveAndConvert+0x7c>)
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	4413      	add	r3, r2
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d010      	beq.n	80086c8 <saveAndConvert+0x68>
				machineID[i] = getNumbersFromCursorPosition(eepromData[loopVal]);
 80086a6:	4a0d      	ldr	r2, [pc, #52]	; (80086dc <saveAndConvert+0x7c>)
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	4413      	add	r3, r2
 80086ac:	781b      	ldrb	r3, [r3, #0]
 80086ae:	4618      	mov	r0, r3
 80086b0:	f7f8 fa04 	bl	8000abc <getNumbersFromCursorPosition>
 80086b4:	4603      	mov	r3, r0
 80086b6:	4619      	mov	r1, r3
 80086b8:	4a0a      	ldr	r2, [pc, #40]	; (80086e4 <saveAndConvert+0x84>)
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	4413      	add	r3, r2
 80086be:	460a      	mov	r2, r1
 80086c0:	701a      	strb	r2, [r3, #0]
				loopVal++;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	3301      	adds	r3, #1
 80086c6:	60fb      	str	r3, [r7, #12]
		for(int i=0; i<12; i++) {
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	3301      	adds	r3, #1
 80086cc:	60bb      	str	r3, [r7, #8]
 80086ce:	68bb      	ldr	r3, [r7, #8]
 80086d0:	2b0b      	cmp	r3, #11
 80086d2:	dde2      	ble.n	800869a <saveAndConvert+0x3a>
			}
		}
	}
}
 80086d4:	bf00      	nop
 80086d6:	3710      	adds	r7, #16
 80086d8:	46bd      	mov	sp, r7
 80086da:	bd80      	pop	{r7, pc}
 80086dc:	20000b38 	.word	0x20000b38
 80086e0:	20000e08 	.word	0x20000e08
 80086e4:	20000bf4 	.word	0x20000bf4

080086e8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 80086e8:	b480      	push	{r7}
 80086ea:	b083      	sub	sp, #12
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 80086f0:	4b04      	ldr	r3, [pc, #16]	; (8008704 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	3301      	adds	r3, #1
 80086f6:	4a03      	ldr	r2, [pc, #12]	; (8008704 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80086f8:	6013      	str	r3, [r2, #0]
}
 80086fa:	bf00      	nop
 80086fc:	370c      	adds	r7, #12
 80086fe:	46bd      	mov	sp, r7
 8008700:	bc80      	pop	{r7}
 8008702:	4770      	bx	lr
 8008704:	20000bd4 	.word	0x20000bd4

08008708 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800870c:	f000 fc7a 	bl	8009004 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8008710:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008714:	f000 fcd8 	bl	80090c8 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008718:	f000 f8aa 	bl	8008870 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800871c:	f000 f9cc 	bl	8008ab8 <MX_GPIO_Init>
  MX_CAN_Init();
 8008720:	f000 f8ec 	bl	80088fc <MX_CAN_Init>
  MX_I2C1_Init();
 8008724:	f000 f91e 	bl	8008964 <MX_I2C1_Init>
  MX_TIM1_Init();
 8008728:	f000 f94a 	bl	80089c0 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800872c:	f000 f99a 	bl	8008a64 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8008730:	2201      	movs	r2, #1
 8008732:	2140      	movs	r1, #64	; 0x40
 8008734:	4844      	ldr	r0, [pc, #272]	; (8008848 <main+0x140>)
 8008736:	f001 faae 	bl	8009c96 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 800873a:	2201      	movs	r2, #1
 800873c:	2180      	movs	r1, #128	; 0x80
 800873e:	4842      	ldr	r0, [pc, #264]	; (8008848 <main+0x140>)
 8008740:	f001 faa9 	bl	8009c96 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8008744:	200a      	movs	r0, #10
 8008746:	f000 fcbf 	bl	80090c8 <HAL_Delay>
  lcd_init();
 800874a:	f7f7 ff5b 	bl	8000604 <lcd_init>
  HAL_Delay(10);
 800874e:	200a      	movs	r0, #10
 8008750:	f000 fcba 	bl	80090c8 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8008754:	483d      	ldr	r0, [pc, #244]	; (800884c <main+0x144>)
 8008756:	f003 f951 	bl	800b9fc <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800875a:	bf00      	nop
 800875c:	483c      	ldr	r0, [pc, #240]	; (8008850 <main+0x148>)
 800875e:	f002 f8ac 	bl	800a8ba <HAL_I2C_GetError>
 8008762:	4603      	mov	r3, r0
 8008764:	2b04      	cmp	r3, #4
 8008766:	d0f9      	beq.n	800875c <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008768:	bf00      	nop
 800876a:	4839      	ldr	r0, [pc, #228]	; (8008850 <main+0x148>)
 800876c:	f002 f898 	bl	800a8a0 <HAL_I2C_GetState>
 8008770:	4603      	mov	r3, r0
 8008772:	2b20      	cmp	r3, #32
 8008774:	d1f9      	bne.n	800876a <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8008776:	2200      	movs	r2, #0
 8008778:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800877c:	4832      	ldr	r0, [pc, #200]	; (8008848 <main+0x140>)
 800877e:	f001 fa8a 	bl	8009c96 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8008782:	2200      	movs	r2, #0
 8008784:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008788:	482f      	ldr	r0, [pc, #188]	; (8008848 <main+0x140>)
 800878a:	f001 fa84 	bl	8009c96 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800878e:	2200      	movs	r2, #0
 8008790:	2104      	movs	r1, #4
 8008792:	482d      	ldr	r0, [pc, #180]	; (8008848 <main+0x140>)
 8008794:	f001 fa7f 	bl	8009c96 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8008798:	2200      	movs	r2, #0
 800879a:	2102      	movs	r1, #2
 800879c:	482a      	ldr	r0, [pc, #168]	; (8008848 <main+0x140>)
 800879e:	f001 fa7a 	bl	8009c96 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80087a2:	2200      	movs	r2, #0
 80087a4:	2101      	movs	r1, #1
 80087a6:	4828      	ldr	r0, [pc, #160]	; (8008848 <main+0x140>)
 80087a8:	f001 fa75 	bl	8009c96 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80087ac:	2200      	movs	r2, #0
 80087ae:	2120      	movs	r1, #32
 80087b0:	4828      	ldr	r0, [pc, #160]	; (8008854 <main+0x14c>)
 80087b2:	f001 fa70 	bl	8009c96 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80087b6:	2200      	movs	r2, #0
 80087b8:	2110      	movs	r1, #16
 80087ba:	4826      	ldr	r0, [pc, #152]	; (8008854 <main+0x14c>)
 80087bc:	f001 fa6b 	bl	8009c96 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80087c0:	2200      	movs	r2, #0
 80087c2:	2180      	movs	r1, #128	; 0x80
 80087c4:	4824      	ldr	r0, [pc, #144]	; (8008858 <main+0x150>)
 80087c6:	f001 fa66 	bl	8009c96 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80087ca:	2200      	movs	r2, #0
 80087cc:	2140      	movs	r1, #64	; 0x40
 80087ce:	4822      	ldr	r0, [pc, #136]	; (8008858 <main+0x150>)
 80087d0:	f001 fa61 	bl	8009c96 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80087d4:	2200      	movs	r2, #0
 80087d6:	2120      	movs	r1, #32
 80087d8:	481f      	ldr	r0, [pc, #124]	; (8008858 <main+0x150>)
 80087da:	f001 fa5c 	bl	8009c96 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 80087de:	2200      	movs	r2, #0
 80087e0:	2110      	movs	r1, #16
 80087e2:	481d      	ldr	r0, [pc, #116]	; (8008858 <main+0x150>)
 80087e4:	f001 fa57 	bl	8009c96 <HAL_GPIO_WritePin>

  i2cTest();
 80087e8:	f7fd fc9c 	bl	8006124 <i2cTest>
  HAL_Delay(100);
 80087ec:	2064      	movs	r0, #100	; 0x64
 80087ee:	f000 fc6b 	bl	80090c8 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 80087f2:	4a1a      	ldr	r2, [pc, #104]	; (800885c <main+0x154>)
 80087f4:	2101      	movs	r1, #1
 80087f6:	2001      	movs	r0, #1
 80087f8:	f7f7 ff36 	bl	8000668 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 80087fc:	4a18      	ldr	r2, [pc, #96]	; (8008860 <main+0x158>)
 80087fe:	2101      	movs	r1, #1
 8008800:	2002      	movs	r0, #2
 8008802:	f7f7 ff31 	bl	8000668 <lcd_print>
  HAL_Delay(1000);
 8008806:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800880a:	f000 fc5d 	bl	80090c8 <HAL_Delay>
  lcd_clear();
 800880e:	f7f7 ff57 	bl	80006c0 <lcd_clear>

  eepromKontrol(0);
 8008812:	2000      	movs	r0, #0
 8008814:	f7fd f8f0 	bl	80059f8 <eepromKontrol>
  HAL_Delay(200);
 8008818:	20c8      	movs	r0, #200	; 0xc8
 800881a:	f000 fc55 	bl	80090c8 <HAL_Delay>

  lcd_clear();
 800881e:	f7f7 ff4f 	bl	80006c0 <lcd_clear>
  HAL_Delay(200);
 8008822:	20c8      	movs	r0, #200	; 0xc8
 8008824:	f000 fc50 	bl	80090c8 <HAL_Delay>

  backLightTimer = millis;
 8008828:	4b0e      	ldr	r3, [pc, #56]	; (8008864 <main+0x15c>)
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	4a0e      	ldr	r2, [pc, #56]	; (8008868 <main+0x160>)
 800882e:	6013      	str	r3, [r2, #0]

  takeMachineID(1, &hi2c1);
 8008830:	4907      	ldr	r1, [pc, #28]	; (8008850 <main+0x148>)
 8008832:	2001      	movs	r0, #1
 8008834:	f7f8 f952 	bl	8000adc <takeMachineID>
  convertAndSave(machineID, 0);
 8008838:	2100      	movs	r1, #0
 800883a:	480c      	ldr	r0, [pc, #48]	; (800886c <main+0x164>)
 800883c:	f7ff feb8 	bl	80085b0 <convertAndSave>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8008840:	f7ff fd1e 	bl	8008280 <mainLoop>
 8008844:	e7fc      	b.n	8008840 <main+0x138>
 8008846:	bf00      	nop
 8008848:	40010c00 	.word	0x40010c00
 800884c:	20000e5c 	.word	0x20000e5c
 8008850:	20000e08 	.word	0x20000e08
 8008854:	40011000 	.word	0x40011000
 8008858:	40010800 	.word	0x40010800
 800885c:	0800e584 	.word	0x0800e584
 8008860:	0800e598 	.word	0x0800e598
 8008864:	20000bd4 	.word	0x20000bd4
 8008868:	20000bf0 	.word	0x20000bf0
 800886c:	20000bf4 	.word	0x20000bf4

08008870 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b090      	sub	sp, #64	; 0x40
 8008874:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008876:	f107 0318 	add.w	r3, r7, #24
 800887a:	2228      	movs	r2, #40	; 0x28
 800887c:	2100      	movs	r1, #0
 800887e:	4618      	mov	r0, r3
 8008880:	f004 fb36 	bl	800cef0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008884:	1d3b      	adds	r3, r7, #4
 8008886:	2200      	movs	r2, #0
 8008888:	601a      	str	r2, [r3, #0]
 800888a:	605a      	str	r2, [r3, #4]
 800888c:	609a      	str	r2, [r3, #8]
 800888e:	60da      	str	r2, [r3, #12]
 8008890:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008892:	2301      	movs	r3, #1
 8008894:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008896:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800889a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800889c:	2300      	movs	r3, #0
 800889e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80088a0:	2301      	movs	r3, #1
 80088a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80088a4:	2302      	movs	r3, #2
 80088a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80088a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80088ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80088ae:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80088b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80088b4:	f107 0318 	add.w	r3, r7, #24
 80088b8:	4618      	mov	r0, r3
 80088ba:	f002 fc3f 	bl	800b13c <HAL_RCC_OscConfig>
 80088be:	4603      	mov	r3, r0
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d001      	beq.n	80088c8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80088c4:	f000 f9a2 	bl	8008c0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80088c8:	230f      	movs	r3, #15
 80088ca:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80088cc:	2302      	movs	r3, #2
 80088ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80088d0:	2300      	movs	r3, #0
 80088d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80088d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80088d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80088da:	2300      	movs	r3, #0
 80088dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80088de:	1d3b      	adds	r3, r7, #4
 80088e0:	2102      	movs	r1, #2
 80088e2:	4618      	mov	r0, r3
 80088e4:	f002 feac 	bl	800b640 <HAL_RCC_ClockConfig>
 80088e8:	4603      	mov	r3, r0
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d001      	beq.n	80088f2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80088ee:	f000 f98d 	bl	8008c0c <Error_Handler>
  }
}
 80088f2:	bf00      	nop
 80088f4:	3740      	adds	r7, #64	; 0x40
 80088f6:	46bd      	mov	sp, r7
 80088f8:	bd80      	pop	{r7, pc}
	...

080088fc <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 80088fc:	b580      	push	{r7, lr}
 80088fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8008900:	4b16      	ldr	r3, [pc, #88]	; (800895c <MX_CAN_Init+0x60>)
 8008902:	4a17      	ldr	r2, [pc, #92]	; (8008960 <MX_CAN_Init+0x64>)
 8008904:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8008906:	4b15      	ldr	r3, [pc, #84]	; (800895c <MX_CAN_Init+0x60>)
 8008908:	2210      	movs	r2, #16
 800890a:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 800890c:	4b13      	ldr	r3, [pc, #76]	; (800895c <MX_CAN_Init+0x60>)
 800890e:	2200      	movs	r2, #0
 8008910:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8008912:	4b12      	ldr	r3, [pc, #72]	; (800895c <MX_CAN_Init+0x60>)
 8008914:	2200      	movs	r2, #0
 8008916:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8008918:	4b10      	ldr	r3, [pc, #64]	; (800895c <MX_CAN_Init+0x60>)
 800891a:	2200      	movs	r2, #0
 800891c:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800891e:	4b0f      	ldr	r3, [pc, #60]	; (800895c <MX_CAN_Init+0x60>)
 8008920:	2200      	movs	r2, #0
 8008922:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8008924:	4b0d      	ldr	r3, [pc, #52]	; (800895c <MX_CAN_Init+0x60>)
 8008926:	2200      	movs	r2, #0
 8008928:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 800892a:	4b0c      	ldr	r3, [pc, #48]	; (800895c <MX_CAN_Init+0x60>)
 800892c:	2200      	movs	r2, #0
 800892e:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8008930:	4b0a      	ldr	r3, [pc, #40]	; (800895c <MX_CAN_Init+0x60>)
 8008932:	2200      	movs	r2, #0
 8008934:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8008936:	4b09      	ldr	r3, [pc, #36]	; (800895c <MX_CAN_Init+0x60>)
 8008938:	2200      	movs	r2, #0
 800893a:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 800893c:	4b07      	ldr	r3, [pc, #28]	; (800895c <MX_CAN_Init+0x60>)
 800893e:	2200      	movs	r2, #0
 8008940:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8008942:	4b06      	ldr	r3, [pc, #24]	; (800895c <MX_CAN_Init+0x60>)
 8008944:	2200      	movs	r2, #0
 8008946:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8008948:	4804      	ldr	r0, [pc, #16]	; (800895c <MX_CAN_Init+0x60>)
 800894a:	f000 fbe1 	bl	8009110 <HAL_CAN_Init>
 800894e:	4603      	mov	r3, r0
 8008950:	2b00      	cmp	r3, #0
 8008952:	d001      	beq.n	8008958 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8008954:	f000 f95a 	bl	8008c0c <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8008958:	bf00      	nop
 800895a:	bd80      	pop	{r7, pc}
 800895c:	20000de0 	.word	0x20000de0
 8008960:	40006400 	.word	0x40006400

08008964 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8008968:	4b12      	ldr	r3, [pc, #72]	; (80089b4 <MX_I2C1_Init+0x50>)
 800896a:	4a13      	ldr	r2, [pc, #76]	; (80089b8 <MX_I2C1_Init+0x54>)
 800896c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800896e:	4b11      	ldr	r3, [pc, #68]	; (80089b4 <MX_I2C1_Init+0x50>)
 8008970:	4a12      	ldr	r2, [pc, #72]	; (80089bc <MX_I2C1_Init+0x58>)
 8008972:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008974:	4b0f      	ldr	r3, [pc, #60]	; (80089b4 <MX_I2C1_Init+0x50>)
 8008976:	2200      	movs	r2, #0
 8008978:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800897a:	4b0e      	ldr	r3, [pc, #56]	; (80089b4 <MX_I2C1_Init+0x50>)
 800897c:	2200      	movs	r2, #0
 800897e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008980:	4b0c      	ldr	r3, [pc, #48]	; (80089b4 <MX_I2C1_Init+0x50>)
 8008982:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008986:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008988:	4b0a      	ldr	r3, [pc, #40]	; (80089b4 <MX_I2C1_Init+0x50>)
 800898a:	2200      	movs	r2, #0
 800898c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800898e:	4b09      	ldr	r3, [pc, #36]	; (80089b4 <MX_I2C1_Init+0x50>)
 8008990:	2200      	movs	r2, #0
 8008992:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008994:	4b07      	ldr	r3, [pc, #28]	; (80089b4 <MX_I2C1_Init+0x50>)
 8008996:	2200      	movs	r2, #0
 8008998:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800899a:	4b06      	ldr	r3, [pc, #24]	; (80089b4 <MX_I2C1_Init+0x50>)
 800899c:	2200      	movs	r2, #0
 800899e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80089a0:	4804      	ldr	r0, [pc, #16]	; (80089b4 <MX_I2C1_Init+0x50>)
 80089a2:	f001 f9a9 	bl	8009cf8 <HAL_I2C_Init>
 80089a6:	4603      	mov	r3, r0
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d001      	beq.n	80089b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80089ac:	f000 f92e 	bl	8008c0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 80089b0:	bf00      	nop
 80089b2:	bd80      	pop	{r7, pc}
 80089b4:	20000e08 	.word	0x20000e08
 80089b8:	40005400 	.word	0x40005400
 80089bc:	00061a80 	.word	0x00061a80

080089c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b086      	sub	sp, #24
 80089c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80089c6:	f107 0308 	add.w	r3, r7, #8
 80089ca:	2200      	movs	r2, #0
 80089cc:	601a      	str	r2, [r3, #0]
 80089ce:	605a      	str	r2, [r3, #4]
 80089d0:	609a      	str	r2, [r3, #8]
 80089d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80089d4:	463b      	mov	r3, r7
 80089d6:	2200      	movs	r2, #0
 80089d8:	601a      	str	r2, [r3, #0]
 80089da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80089dc:	4b1f      	ldr	r3, [pc, #124]	; (8008a5c <MX_TIM1_Init+0x9c>)
 80089de:	4a20      	ldr	r2, [pc, #128]	; (8008a60 <MX_TIM1_Init+0xa0>)
 80089e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 80089e2:	4b1e      	ldr	r3, [pc, #120]	; (8008a5c <MX_TIM1_Init+0x9c>)
 80089e4:	f648 429f 	movw	r2, #35999	; 0x8c9f
 80089e8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80089ea:	4b1c      	ldr	r3, [pc, #112]	; (8008a5c <MX_TIM1_Init+0x9c>)
 80089ec:	2200      	movs	r2, #0
 80089ee:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 80089f0:	4b1a      	ldr	r3, [pc, #104]	; (8008a5c <MX_TIM1_Init+0x9c>)
 80089f2:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80089f6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80089f8:	4b18      	ldr	r3, [pc, #96]	; (8008a5c <MX_TIM1_Init+0x9c>)
 80089fa:	2200      	movs	r2, #0
 80089fc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80089fe:	4b17      	ldr	r3, [pc, #92]	; (8008a5c <MX_TIM1_Init+0x9c>)
 8008a00:	2200      	movs	r2, #0
 8008a02:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008a04:	4b15      	ldr	r3, [pc, #84]	; (8008a5c <MX_TIM1_Init+0x9c>)
 8008a06:	2200      	movs	r2, #0
 8008a08:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8008a0a:	4814      	ldr	r0, [pc, #80]	; (8008a5c <MX_TIM1_Init+0x9c>)
 8008a0c:	f002 ffa6 	bl	800b95c <HAL_TIM_Base_Init>
 8008a10:	4603      	mov	r3, r0
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d001      	beq.n	8008a1a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8008a16:	f000 f8f9 	bl	8008c0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008a1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a1e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008a20:	f107 0308 	add.w	r3, r7, #8
 8008a24:	4619      	mov	r1, r3
 8008a26:	480d      	ldr	r0, [pc, #52]	; (8008a5c <MX_TIM1_Init+0x9c>)
 8008a28:	f003 f950 	bl	800bccc <HAL_TIM_ConfigClockSource>
 8008a2c:	4603      	mov	r3, r0
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d001      	beq.n	8008a36 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8008a32:	f000 f8eb 	bl	8008c0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008a36:	2300      	movs	r3, #0
 8008a38:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008a3e:	463b      	mov	r3, r7
 8008a40:	4619      	mov	r1, r3
 8008a42:	4806      	ldr	r0, [pc, #24]	; (8008a5c <MX_TIM1_Init+0x9c>)
 8008a44:	f003 fb3e 	bl	800c0c4 <HAL_TIMEx_MasterConfigSynchronization>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d001      	beq.n	8008a52 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8008a4e:	f000 f8dd 	bl	8008c0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8008a52:	bf00      	nop
 8008a54:	3718      	adds	r7, #24
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}
 8008a5a:	bf00      	nop
 8008a5c:	20000e5c 	.word	0x20000e5c
 8008a60:	40012c00 	.word	0x40012c00

08008a64 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008a68:	4b11      	ldr	r3, [pc, #68]	; (8008ab0 <MX_USART1_UART_Init+0x4c>)
 8008a6a:	4a12      	ldr	r2, [pc, #72]	; (8008ab4 <MX_USART1_UART_Init+0x50>)
 8008a6c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008a6e:	4b10      	ldr	r3, [pc, #64]	; (8008ab0 <MX_USART1_UART_Init+0x4c>)
 8008a70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008a74:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008a76:	4b0e      	ldr	r3, [pc, #56]	; (8008ab0 <MX_USART1_UART_Init+0x4c>)
 8008a78:	2200      	movs	r2, #0
 8008a7a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008a7c:	4b0c      	ldr	r3, [pc, #48]	; (8008ab0 <MX_USART1_UART_Init+0x4c>)
 8008a7e:	2200      	movs	r2, #0
 8008a80:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008a82:	4b0b      	ldr	r3, [pc, #44]	; (8008ab0 <MX_USART1_UART_Init+0x4c>)
 8008a84:	2200      	movs	r2, #0
 8008a86:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008a88:	4b09      	ldr	r3, [pc, #36]	; (8008ab0 <MX_USART1_UART_Init+0x4c>)
 8008a8a:	220c      	movs	r2, #12
 8008a8c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008a8e:	4b08      	ldr	r3, [pc, #32]	; (8008ab0 <MX_USART1_UART_Init+0x4c>)
 8008a90:	2200      	movs	r2, #0
 8008a92:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008a94:	4b06      	ldr	r3, [pc, #24]	; (8008ab0 <MX_USART1_UART_Init+0x4c>)
 8008a96:	2200      	movs	r2, #0
 8008a98:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008a9a:	4805      	ldr	r0, [pc, #20]	; (8008ab0 <MX_USART1_UART_Init+0x4c>)
 8008a9c:	f003 fb90 	bl	800c1c0 <HAL_UART_Init>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d001      	beq.n	8008aaa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008aa6:	f000 f8b1 	bl	8008c0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008aaa:	bf00      	nop
 8008aac:	bd80      	pop	{r7, pc}
 8008aae:	bf00      	nop
 8008ab0:	20000ea4 	.word	0x20000ea4
 8008ab4:	40013800 	.word	0x40013800

08008ab8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b088      	sub	sp, #32
 8008abc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008abe:	f107 0310 	add.w	r3, r7, #16
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	601a      	str	r2, [r3, #0]
 8008ac6:	605a      	str	r2, [r3, #4]
 8008ac8:	609a      	str	r2, [r3, #8]
 8008aca:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008acc:	4b4b      	ldr	r3, [pc, #300]	; (8008bfc <MX_GPIO_Init+0x144>)
 8008ace:	699b      	ldr	r3, [r3, #24]
 8008ad0:	4a4a      	ldr	r2, [pc, #296]	; (8008bfc <MX_GPIO_Init+0x144>)
 8008ad2:	f043 0310 	orr.w	r3, r3, #16
 8008ad6:	6193      	str	r3, [r2, #24]
 8008ad8:	4b48      	ldr	r3, [pc, #288]	; (8008bfc <MX_GPIO_Init+0x144>)
 8008ada:	699b      	ldr	r3, [r3, #24]
 8008adc:	f003 0310 	and.w	r3, r3, #16
 8008ae0:	60fb      	str	r3, [r7, #12]
 8008ae2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008ae4:	4b45      	ldr	r3, [pc, #276]	; (8008bfc <MX_GPIO_Init+0x144>)
 8008ae6:	699b      	ldr	r3, [r3, #24]
 8008ae8:	4a44      	ldr	r2, [pc, #272]	; (8008bfc <MX_GPIO_Init+0x144>)
 8008aea:	f043 0320 	orr.w	r3, r3, #32
 8008aee:	6193      	str	r3, [r2, #24]
 8008af0:	4b42      	ldr	r3, [pc, #264]	; (8008bfc <MX_GPIO_Init+0x144>)
 8008af2:	699b      	ldr	r3, [r3, #24]
 8008af4:	f003 0320 	and.w	r3, r3, #32
 8008af8:	60bb      	str	r3, [r7, #8]
 8008afa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008afc:	4b3f      	ldr	r3, [pc, #252]	; (8008bfc <MX_GPIO_Init+0x144>)
 8008afe:	699b      	ldr	r3, [r3, #24]
 8008b00:	4a3e      	ldr	r2, [pc, #248]	; (8008bfc <MX_GPIO_Init+0x144>)
 8008b02:	f043 0304 	orr.w	r3, r3, #4
 8008b06:	6193      	str	r3, [r2, #24]
 8008b08:	4b3c      	ldr	r3, [pc, #240]	; (8008bfc <MX_GPIO_Init+0x144>)
 8008b0a:	699b      	ldr	r3, [r3, #24]
 8008b0c:	f003 0304 	and.w	r3, r3, #4
 8008b10:	607b      	str	r3, [r7, #4]
 8008b12:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008b14:	4b39      	ldr	r3, [pc, #228]	; (8008bfc <MX_GPIO_Init+0x144>)
 8008b16:	699b      	ldr	r3, [r3, #24]
 8008b18:	4a38      	ldr	r2, [pc, #224]	; (8008bfc <MX_GPIO_Init+0x144>)
 8008b1a:	f043 0308 	orr.w	r3, r3, #8
 8008b1e:	6193      	str	r3, [r2, #24]
 8008b20:	4b36      	ldr	r3, [pc, #216]	; (8008bfc <MX_GPIO_Init+0x144>)
 8008b22:	699b      	ldr	r3, [r3, #24]
 8008b24:	f003 0308 	and.w	r3, r3, #8
 8008b28:	603b      	str	r3, [r7, #0]
 8008b2a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	21f0      	movs	r1, #240	; 0xf0
 8008b30:	4833      	ldr	r0, [pc, #204]	; (8008c00 <MX_GPIO_Init+0x148>)
 8008b32:	f001 f8b0 	bl	8009c96 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8008b36:	2200      	movs	r2, #0
 8008b38:	f241 0130 	movw	r1, #4144	; 0x1030
 8008b3c:	4831      	ldr	r0, [pc, #196]	; (8008c04 <MX_GPIO_Init+0x14c>)
 8008b3e:	f001 f8aa 	bl	8009c96 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008b42:	2200      	movs	r2, #0
 8008b44:	f640 4107 	movw	r1, #3079	; 0xc07
 8008b48:	482f      	ldr	r0, [pc, #188]	; (8008c08 <MX_GPIO_Init+0x150>)
 8008b4a:	f001 f8a4 	bl	8009c96 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8008b4e:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 8008b52:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008b54:	2300      	movs	r3, #0
 8008b56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b58:	2300      	movs	r3, #0
 8008b5a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008b5c:	f107 0310 	add.w	r3, r7, #16
 8008b60:	4619      	mov	r1, r3
 8008b62:	4828      	ldr	r0, [pc, #160]	; (8008c04 <MX_GPIO_Init+0x14c>)
 8008b64:	f000 fe20 	bl	80097a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8008b68:	f248 130f 	movw	r3, #33039	; 0x810f
 8008b6c:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b72:	2300      	movs	r3, #0
 8008b74:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b76:	f107 0310 	add.w	r3, r7, #16
 8008b7a:	4619      	mov	r1, r3
 8008b7c:	4820      	ldr	r0, [pc, #128]	; (8008c00 <MX_GPIO_Init+0x148>)
 8008b7e:	f000 fe13 	bl	80097a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8008b82:	23f0      	movs	r3, #240	; 0xf0
 8008b84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008b86:	2301      	movs	r3, #1
 8008b88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008b8e:	2302      	movs	r3, #2
 8008b90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b92:	f107 0310 	add.w	r3, r7, #16
 8008b96:	4619      	mov	r1, r3
 8008b98:	4819      	ldr	r0, [pc, #100]	; (8008c00 <MX_GPIO_Init+0x148>)
 8008b9a:	f000 fe05 	bl	80097a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 8008b9e:	f241 0330 	movw	r3, #4144	; 0x1030
 8008ba2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ba8:	2300      	movs	r3, #0
 8008baa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008bac:	2302      	movs	r3, #2
 8008bae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008bb0:	f107 0310 	add.w	r3, r7, #16
 8008bb4:	4619      	mov	r1, r3
 8008bb6:	4813      	ldr	r0, [pc, #76]	; (8008c04 <MX_GPIO_Init+0x14c>)
 8008bb8:	f000 fdf6 	bl	80097a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008bbc:	f640 4307 	movw	r3, #3079	; 0xc07
 8008bc0:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008bc2:	2301      	movs	r3, #1
 8008bc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008bca:	2302      	movs	r3, #2
 8008bcc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008bce:	f107 0310 	add.w	r3, r7, #16
 8008bd2:	4619      	mov	r1, r3
 8008bd4:	480c      	ldr	r0, [pc, #48]	; (8008c08 <MX_GPIO_Init+0x150>)
 8008bd6:	f000 fde7 	bl	80097a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8008bda:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8008bde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008be0:	2300      	movs	r3, #0
 8008be2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008be4:	2300      	movs	r3, #0
 8008be6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008be8:	f107 0310 	add.w	r3, r7, #16
 8008bec:	4619      	mov	r1, r3
 8008bee:	4806      	ldr	r0, [pc, #24]	; (8008c08 <MX_GPIO_Init+0x150>)
 8008bf0:	f000 fdda 	bl	80097a8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008bf4:	bf00      	nop
 8008bf6:	3720      	adds	r7, #32
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}
 8008bfc:	40021000 	.word	0x40021000
 8008c00:	40010800 	.word	0x40010800
 8008c04:	40011000 	.word	0x40011000
 8008c08:	40010c00 	.word	0x40010c00

08008c0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008c0c:	b480      	push	{r7}
 8008c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8008c10:	bf00      	nop
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bc80      	pop	{r7}
 8008c16:	4770      	bx	lr

08008c18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b085      	sub	sp, #20
 8008c1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008c1e:	4b15      	ldr	r3, [pc, #84]	; (8008c74 <HAL_MspInit+0x5c>)
 8008c20:	699b      	ldr	r3, [r3, #24]
 8008c22:	4a14      	ldr	r2, [pc, #80]	; (8008c74 <HAL_MspInit+0x5c>)
 8008c24:	f043 0301 	orr.w	r3, r3, #1
 8008c28:	6193      	str	r3, [r2, #24]
 8008c2a:	4b12      	ldr	r3, [pc, #72]	; (8008c74 <HAL_MspInit+0x5c>)
 8008c2c:	699b      	ldr	r3, [r3, #24]
 8008c2e:	f003 0301 	and.w	r3, r3, #1
 8008c32:	60bb      	str	r3, [r7, #8]
 8008c34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008c36:	4b0f      	ldr	r3, [pc, #60]	; (8008c74 <HAL_MspInit+0x5c>)
 8008c38:	69db      	ldr	r3, [r3, #28]
 8008c3a:	4a0e      	ldr	r2, [pc, #56]	; (8008c74 <HAL_MspInit+0x5c>)
 8008c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c40:	61d3      	str	r3, [r2, #28]
 8008c42:	4b0c      	ldr	r3, [pc, #48]	; (8008c74 <HAL_MspInit+0x5c>)
 8008c44:	69db      	ldr	r3, [r3, #28]
 8008c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c4a:	607b      	str	r3, [r7, #4]
 8008c4c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008c4e:	4b0a      	ldr	r3, [pc, #40]	; (8008c78 <HAL_MspInit+0x60>)
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	60fb      	str	r3, [r7, #12]
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8008c5a:	60fb      	str	r3, [r7, #12]
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008c62:	60fb      	str	r3, [r7, #12]
 8008c64:	4a04      	ldr	r2, [pc, #16]	; (8008c78 <HAL_MspInit+0x60>)
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008c6a:	bf00      	nop
 8008c6c:	3714      	adds	r7, #20
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bc80      	pop	{r7}
 8008c72:	4770      	bx	lr
 8008c74:	40021000 	.word	0x40021000
 8008c78:	40010000 	.word	0x40010000

08008c7c <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b088      	sub	sp, #32
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c84:	f107 0310 	add.w	r3, r7, #16
 8008c88:	2200      	movs	r2, #0
 8008c8a:	601a      	str	r2, [r3, #0]
 8008c8c:	605a      	str	r2, [r3, #4]
 8008c8e:	609a      	str	r2, [r3, #8]
 8008c90:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	4a1c      	ldr	r2, [pc, #112]	; (8008d08 <HAL_CAN_MspInit+0x8c>)
 8008c98:	4293      	cmp	r3, r2
 8008c9a:	d131      	bne.n	8008d00 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8008c9c:	4b1b      	ldr	r3, [pc, #108]	; (8008d0c <HAL_CAN_MspInit+0x90>)
 8008c9e:	69db      	ldr	r3, [r3, #28]
 8008ca0:	4a1a      	ldr	r2, [pc, #104]	; (8008d0c <HAL_CAN_MspInit+0x90>)
 8008ca2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008ca6:	61d3      	str	r3, [r2, #28]
 8008ca8:	4b18      	ldr	r3, [pc, #96]	; (8008d0c <HAL_CAN_MspInit+0x90>)
 8008caa:	69db      	ldr	r3, [r3, #28]
 8008cac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cb0:	60fb      	str	r3, [r7, #12]
 8008cb2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008cb4:	4b15      	ldr	r3, [pc, #84]	; (8008d0c <HAL_CAN_MspInit+0x90>)
 8008cb6:	699b      	ldr	r3, [r3, #24]
 8008cb8:	4a14      	ldr	r2, [pc, #80]	; (8008d0c <HAL_CAN_MspInit+0x90>)
 8008cba:	f043 0304 	orr.w	r3, r3, #4
 8008cbe:	6193      	str	r3, [r2, #24]
 8008cc0:	4b12      	ldr	r3, [pc, #72]	; (8008d0c <HAL_CAN_MspInit+0x90>)
 8008cc2:	699b      	ldr	r3, [r3, #24]
 8008cc4:	f003 0304 	and.w	r3, r3, #4
 8008cc8:	60bb      	str	r3, [r7, #8]
 8008cca:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008ccc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008cd0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008cd2:	2300      	movs	r3, #0
 8008cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008cda:	f107 0310 	add.w	r3, r7, #16
 8008cde:	4619      	mov	r1, r3
 8008ce0:	480b      	ldr	r0, [pc, #44]	; (8008d10 <HAL_CAN_MspInit+0x94>)
 8008ce2:	f000 fd61 	bl	80097a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008ce6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008cea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008cec:	2302      	movs	r3, #2
 8008cee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008cf0:	2303      	movs	r3, #3
 8008cf2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008cf4:	f107 0310 	add.w	r3, r7, #16
 8008cf8:	4619      	mov	r1, r3
 8008cfa:	4805      	ldr	r0, [pc, #20]	; (8008d10 <HAL_CAN_MspInit+0x94>)
 8008cfc:	f000 fd54 	bl	80097a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8008d00:	bf00      	nop
 8008d02:	3720      	adds	r7, #32
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}
 8008d08:	40006400 	.word	0x40006400
 8008d0c:	40021000 	.word	0x40021000
 8008d10:	40010800 	.word	0x40010800

08008d14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b088      	sub	sp, #32
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008d1c:	f107 0310 	add.w	r3, r7, #16
 8008d20:	2200      	movs	r2, #0
 8008d22:	601a      	str	r2, [r3, #0]
 8008d24:	605a      	str	r2, [r3, #4]
 8008d26:	609a      	str	r2, [r3, #8]
 8008d28:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	4a15      	ldr	r2, [pc, #84]	; (8008d84 <HAL_I2C_MspInit+0x70>)
 8008d30:	4293      	cmp	r3, r2
 8008d32:	d123      	bne.n	8008d7c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008d34:	4b14      	ldr	r3, [pc, #80]	; (8008d88 <HAL_I2C_MspInit+0x74>)
 8008d36:	699b      	ldr	r3, [r3, #24]
 8008d38:	4a13      	ldr	r2, [pc, #76]	; (8008d88 <HAL_I2C_MspInit+0x74>)
 8008d3a:	f043 0308 	orr.w	r3, r3, #8
 8008d3e:	6193      	str	r3, [r2, #24]
 8008d40:	4b11      	ldr	r3, [pc, #68]	; (8008d88 <HAL_I2C_MspInit+0x74>)
 8008d42:	699b      	ldr	r3, [r3, #24]
 8008d44:	f003 0308 	and.w	r3, r3, #8
 8008d48:	60fb      	str	r3, [r7, #12]
 8008d4a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008d4c:	23c0      	movs	r3, #192	; 0xc0
 8008d4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008d50:	2312      	movs	r3, #18
 8008d52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008d54:	2303      	movs	r3, #3
 8008d56:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008d58:	f107 0310 	add.w	r3, r7, #16
 8008d5c:	4619      	mov	r1, r3
 8008d5e:	480b      	ldr	r0, [pc, #44]	; (8008d8c <HAL_I2C_MspInit+0x78>)
 8008d60:	f000 fd22 	bl	80097a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008d64:	4b08      	ldr	r3, [pc, #32]	; (8008d88 <HAL_I2C_MspInit+0x74>)
 8008d66:	69db      	ldr	r3, [r3, #28]
 8008d68:	4a07      	ldr	r2, [pc, #28]	; (8008d88 <HAL_I2C_MspInit+0x74>)
 8008d6a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008d6e:	61d3      	str	r3, [r2, #28]
 8008d70:	4b05      	ldr	r3, [pc, #20]	; (8008d88 <HAL_I2C_MspInit+0x74>)
 8008d72:	69db      	ldr	r3, [r3, #28]
 8008d74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008d78:	60bb      	str	r3, [r7, #8]
 8008d7a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008d7c:	bf00      	nop
 8008d7e:	3720      	adds	r7, #32
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}
 8008d84:	40005400 	.word	0x40005400
 8008d88:	40021000 	.word	0x40021000
 8008d8c:	40010c00 	.word	0x40010c00

08008d90 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8008d90:	b580      	push	{r7, lr}
 8008d92:	b082      	sub	sp, #8
 8008d94:	af00      	add	r7, sp, #0
 8008d96:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a0a      	ldr	r2, [pc, #40]	; (8008dc8 <HAL_I2C_MspDeInit+0x38>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d10d      	bne.n	8008dbe <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8008da2:	4b0a      	ldr	r3, [pc, #40]	; (8008dcc <HAL_I2C_MspDeInit+0x3c>)
 8008da4:	69db      	ldr	r3, [r3, #28]
 8008da6:	4a09      	ldr	r2, [pc, #36]	; (8008dcc <HAL_I2C_MspDeInit+0x3c>)
 8008da8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008dac:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8008dae:	2140      	movs	r1, #64	; 0x40
 8008db0:	4807      	ldr	r0, [pc, #28]	; (8008dd0 <HAL_I2C_MspDeInit+0x40>)
 8008db2:	f000 fe8d 	bl	8009ad0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8008db6:	2180      	movs	r1, #128	; 0x80
 8008db8:	4805      	ldr	r0, [pc, #20]	; (8008dd0 <HAL_I2C_MspDeInit+0x40>)
 8008dba:	f000 fe89 	bl	8009ad0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8008dbe:	bf00      	nop
 8008dc0:	3708      	adds	r7, #8
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}
 8008dc6:	bf00      	nop
 8008dc8:	40005400 	.word	0x40005400
 8008dcc:	40021000 	.word	0x40021000
 8008dd0:	40010c00 	.word	0x40010c00

08008dd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b084      	sub	sp, #16
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	4a0d      	ldr	r2, [pc, #52]	; (8008e18 <HAL_TIM_Base_MspInit+0x44>)
 8008de2:	4293      	cmp	r3, r2
 8008de4:	d113      	bne.n	8008e0e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008de6:	4b0d      	ldr	r3, [pc, #52]	; (8008e1c <HAL_TIM_Base_MspInit+0x48>)
 8008de8:	699b      	ldr	r3, [r3, #24]
 8008dea:	4a0c      	ldr	r2, [pc, #48]	; (8008e1c <HAL_TIM_Base_MspInit+0x48>)
 8008dec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008df0:	6193      	str	r3, [r2, #24]
 8008df2:	4b0a      	ldr	r3, [pc, #40]	; (8008e1c <HAL_TIM_Base_MspInit+0x48>)
 8008df4:	699b      	ldr	r3, [r3, #24]
 8008df6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008dfa:	60fb      	str	r3, [r7, #12]
 8008dfc:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8008dfe:	2200      	movs	r2, #0
 8008e00:	2100      	movs	r1, #0
 8008e02:	2019      	movs	r0, #25
 8008e04:	f000 fb57 	bl	80094b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8008e08:	2019      	movs	r0, #25
 8008e0a:	f000 fb70 	bl	80094ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8008e0e:	bf00      	nop
 8008e10:	3710      	adds	r7, #16
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}
 8008e16:	bf00      	nop
 8008e18:	40012c00 	.word	0x40012c00
 8008e1c:	40021000 	.word	0x40021000

08008e20 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b088      	sub	sp, #32
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e28:	f107 0310 	add.w	r3, r7, #16
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	601a      	str	r2, [r3, #0]
 8008e30:	605a      	str	r2, [r3, #4]
 8008e32:	609a      	str	r2, [r3, #8]
 8008e34:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a20      	ldr	r2, [pc, #128]	; (8008ebc <HAL_UART_MspInit+0x9c>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d139      	bne.n	8008eb4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008e40:	4b1f      	ldr	r3, [pc, #124]	; (8008ec0 <HAL_UART_MspInit+0xa0>)
 8008e42:	699b      	ldr	r3, [r3, #24]
 8008e44:	4a1e      	ldr	r2, [pc, #120]	; (8008ec0 <HAL_UART_MspInit+0xa0>)
 8008e46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008e4a:	6193      	str	r3, [r2, #24]
 8008e4c:	4b1c      	ldr	r3, [pc, #112]	; (8008ec0 <HAL_UART_MspInit+0xa0>)
 8008e4e:	699b      	ldr	r3, [r3, #24]
 8008e50:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008e54:	60fb      	str	r3, [r7, #12]
 8008e56:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008e58:	4b19      	ldr	r3, [pc, #100]	; (8008ec0 <HAL_UART_MspInit+0xa0>)
 8008e5a:	699b      	ldr	r3, [r3, #24]
 8008e5c:	4a18      	ldr	r2, [pc, #96]	; (8008ec0 <HAL_UART_MspInit+0xa0>)
 8008e5e:	f043 0304 	orr.w	r3, r3, #4
 8008e62:	6193      	str	r3, [r2, #24]
 8008e64:	4b16      	ldr	r3, [pc, #88]	; (8008ec0 <HAL_UART_MspInit+0xa0>)
 8008e66:	699b      	ldr	r3, [r3, #24]
 8008e68:	f003 0304 	and.w	r3, r3, #4
 8008e6c:	60bb      	str	r3, [r7, #8]
 8008e6e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008e70:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008e74:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008e76:	2302      	movs	r3, #2
 8008e78:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008e7a:	2303      	movs	r3, #3
 8008e7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e7e:	f107 0310 	add.w	r3, r7, #16
 8008e82:	4619      	mov	r1, r3
 8008e84:	480f      	ldr	r0, [pc, #60]	; (8008ec4 <HAL_UART_MspInit+0xa4>)
 8008e86:	f000 fc8f 	bl	80097a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008e8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e8e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008e90:	2300      	movs	r3, #0
 8008e92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008e94:	2300      	movs	r3, #0
 8008e96:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008e98:	f107 0310 	add.w	r3, r7, #16
 8008e9c:	4619      	mov	r1, r3
 8008e9e:	4809      	ldr	r0, [pc, #36]	; (8008ec4 <HAL_UART_MspInit+0xa4>)
 8008ea0:	f000 fc82 	bl	80097a8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	2100      	movs	r1, #0
 8008ea8:	2025      	movs	r0, #37	; 0x25
 8008eaa:	f000 fb04 	bl	80094b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008eae:	2025      	movs	r0, #37	; 0x25
 8008eb0:	f000 fb1d 	bl	80094ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008eb4:	bf00      	nop
 8008eb6:	3720      	adds	r7, #32
 8008eb8:	46bd      	mov	sp, r7
 8008eba:	bd80      	pop	{r7, pc}
 8008ebc:	40013800 	.word	0x40013800
 8008ec0:	40021000 	.word	0x40021000
 8008ec4:	40010800 	.word	0x40010800

08008ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008ec8:	b480      	push	{r7}
 8008eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008ecc:	e7fe      	b.n	8008ecc <NMI_Handler+0x4>

08008ece <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008ece:	b480      	push	{r7}
 8008ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008ed2:	e7fe      	b.n	8008ed2 <HardFault_Handler+0x4>

08008ed4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008ed8:	e7fe      	b.n	8008ed8 <MemManage_Handler+0x4>

08008eda <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008eda:	b480      	push	{r7}
 8008edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008ede:	e7fe      	b.n	8008ede <BusFault_Handler+0x4>

08008ee0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008ee4:	e7fe      	b.n	8008ee4 <UsageFault_Handler+0x4>

08008ee6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008ee6:	b480      	push	{r7}
 8008ee8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008eea:	bf00      	nop
 8008eec:	46bd      	mov	sp, r7
 8008eee:	bc80      	pop	{r7}
 8008ef0:	4770      	bx	lr

08008ef2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008ef2:	b480      	push	{r7}
 8008ef4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008ef6:	bf00      	nop
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	bc80      	pop	{r7}
 8008efc:	4770      	bx	lr

08008efe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008efe:	b480      	push	{r7}
 8008f00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008f02:	bf00      	nop
 8008f04:	46bd      	mov	sp, r7
 8008f06:	bc80      	pop	{r7}
 8008f08:	4770      	bx	lr

08008f0a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008f0a:	b580      	push	{r7, lr}
 8008f0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008f0e:	f000 f8bf 	bl	8009090 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008f12:	bf00      	nop
 8008f14:	bd80      	pop	{r7, pc}
	...

08008f18 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8008f18:	b580      	push	{r7, lr}
 8008f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008f1c:	4802      	ldr	r0, [pc, #8]	; (8008f28 <TIM1_UP_IRQHandler+0x10>)
 8008f1e:	f002 fdcd 	bl	800babc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8008f22:	bf00      	nop
 8008f24:	bd80      	pop	{r7, pc}
 8008f26:	bf00      	nop
 8008f28:	20000e5c 	.word	0x20000e5c

08008f2c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008f30:	4802      	ldr	r0, [pc, #8]	; (8008f3c <USART1_IRQHandler+0x10>)
 8008f32:	f003 f9cb 	bl	800c2cc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008f36:	bf00      	nop
 8008f38:	bd80      	pop	{r7, pc}
 8008f3a:	bf00      	nop
 8008f3c:	20000ea4 	.word	0x20000ea4

08008f40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b086      	sub	sp, #24
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008f48:	4a14      	ldr	r2, [pc, #80]	; (8008f9c <_sbrk+0x5c>)
 8008f4a:	4b15      	ldr	r3, [pc, #84]	; (8008fa0 <_sbrk+0x60>)
 8008f4c:	1ad3      	subs	r3, r2, r3
 8008f4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008f50:	697b      	ldr	r3, [r7, #20]
 8008f52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008f54:	4b13      	ldr	r3, [pc, #76]	; (8008fa4 <_sbrk+0x64>)
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d102      	bne.n	8008f62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008f5c:	4b11      	ldr	r3, [pc, #68]	; (8008fa4 <_sbrk+0x64>)
 8008f5e:	4a12      	ldr	r2, [pc, #72]	; (8008fa8 <_sbrk+0x68>)
 8008f60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008f62:	4b10      	ldr	r3, [pc, #64]	; (8008fa4 <_sbrk+0x64>)
 8008f64:	681a      	ldr	r2, [r3, #0]
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	4413      	add	r3, r2
 8008f6a:	693a      	ldr	r2, [r7, #16]
 8008f6c:	429a      	cmp	r2, r3
 8008f6e:	d207      	bcs.n	8008f80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008f70:	f003 ffe6 	bl	800cf40 <__errno>
 8008f74:	4603      	mov	r3, r0
 8008f76:	220c      	movs	r2, #12
 8008f78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008f7a:	f04f 33ff 	mov.w	r3, #4294967295
 8008f7e:	e009      	b.n	8008f94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008f80:	4b08      	ldr	r3, [pc, #32]	; (8008fa4 <_sbrk+0x64>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008f86:	4b07      	ldr	r3, [pc, #28]	; (8008fa4 <_sbrk+0x64>)
 8008f88:	681a      	ldr	r2, [r3, #0]
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	4413      	add	r3, r2
 8008f8e:	4a05      	ldr	r2, [pc, #20]	; (8008fa4 <_sbrk+0x64>)
 8008f90:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008f92:	68fb      	ldr	r3, [r7, #12]
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3718      	adds	r7, #24
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}
 8008f9c:	2000c000 	.word	0x2000c000
 8008fa0:	00000400 	.word	0x00000400
 8008fa4:	20000eec 	.word	0x20000eec
 8008fa8:	20001040 	.word	0x20001040

08008fac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008fac:	b480      	push	{r7}
 8008fae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008fb0:	bf00      	nop
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bc80      	pop	{r7}
 8008fb6:	4770      	bx	lr

08008fb8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008fb8:	480c      	ldr	r0, [pc, #48]	; (8008fec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008fba:	490d      	ldr	r1, [pc, #52]	; (8008ff0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008fbc:	4a0d      	ldr	r2, [pc, #52]	; (8008ff4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008fbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008fc0:	e002      	b.n	8008fc8 <LoopCopyDataInit>

08008fc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008fc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008fc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008fc6:	3304      	adds	r3, #4

08008fc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008fc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008fca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008fcc:	d3f9      	bcc.n	8008fc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008fce:	4a0a      	ldr	r2, [pc, #40]	; (8008ff8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008fd0:	4c0a      	ldr	r4, [pc, #40]	; (8008ffc <LoopFillZerobss+0x22>)
  movs r3, #0
 8008fd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008fd4:	e001      	b.n	8008fda <LoopFillZerobss>

08008fd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008fd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008fd8:	3204      	adds	r2, #4

08008fda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008fda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008fdc:	d3fb      	bcc.n	8008fd6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008fde:	f7ff ffe5 	bl	8008fac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008fe2:	f003 ffb3 	bl	800cf4c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008fe6:	f7ff fb8f 	bl	8008708 <main>
  bx lr
 8008fea:	4770      	bx	lr
  ldr r0, =_sdata
 8008fec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008ff0:	20000a20 	.word	0x20000a20
  ldr r2, =_sidata
 8008ff4:	0800e638 	.word	0x0800e638
  ldr r2, =_sbss
 8008ff8:	20000a20 	.word	0x20000a20
  ldr r4, =_ebss
 8008ffc:	2000103c 	.word	0x2000103c

08009000 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8009000:	e7fe      	b.n	8009000 <ADC1_2_IRQHandler>
	...

08009004 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8009008:	4b08      	ldr	r3, [pc, #32]	; (800902c <HAL_Init+0x28>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	4a07      	ldr	r2, [pc, #28]	; (800902c <HAL_Init+0x28>)
 800900e:	f043 0310 	orr.w	r3, r3, #16
 8009012:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8009014:	2003      	movs	r0, #3
 8009016:	f000 fa43 	bl	80094a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800901a:	200f      	movs	r0, #15
 800901c:	f000 f808 	bl	8009030 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8009020:	f7ff fdfa 	bl	8008c18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009024:	2300      	movs	r3, #0
}
 8009026:	4618      	mov	r0, r3
 8009028:	bd80      	pop	{r7, pc}
 800902a:	bf00      	nop
 800902c:	40022000 	.word	0x40022000

08009030 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b082      	sub	sp, #8
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8009038:	4b12      	ldr	r3, [pc, #72]	; (8009084 <HAL_InitTick+0x54>)
 800903a:	681a      	ldr	r2, [r3, #0]
 800903c:	4b12      	ldr	r3, [pc, #72]	; (8009088 <HAL_InitTick+0x58>)
 800903e:	781b      	ldrb	r3, [r3, #0]
 8009040:	4619      	mov	r1, r3
 8009042:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8009046:	fbb3 f3f1 	udiv	r3, r3, r1
 800904a:	fbb2 f3f3 	udiv	r3, r2, r3
 800904e:	4618      	mov	r0, r3
 8009050:	f000 fa5b 	bl	800950a <HAL_SYSTICK_Config>
 8009054:	4603      	mov	r3, r0
 8009056:	2b00      	cmp	r3, #0
 8009058:	d001      	beq.n	800905e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800905a:	2301      	movs	r3, #1
 800905c:	e00e      	b.n	800907c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	2b0f      	cmp	r3, #15
 8009062:	d80a      	bhi.n	800907a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009064:	2200      	movs	r2, #0
 8009066:	6879      	ldr	r1, [r7, #4]
 8009068:	f04f 30ff 	mov.w	r0, #4294967295
 800906c:	f000 fa23 	bl	80094b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009070:	4a06      	ldr	r2, [pc, #24]	; (800908c <HAL_InitTick+0x5c>)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8009076:	2300      	movs	r3, #0
 8009078:	e000      	b.n	800907c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800907a:	2301      	movs	r3, #1
}
 800907c:	4618      	mov	r0, r3
 800907e:	3708      	adds	r7, #8
 8009080:	46bd      	mov	sp, r7
 8009082:	bd80      	pop	{r7, pc}
 8009084:	200009c4 	.word	0x200009c4
 8009088:	200009cc 	.word	0x200009cc
 800908c:	200009c8 	.word	0x200009c8

08009090 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009090:	b480      	push	{r7}
 8009092:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009094:	4b05      	ldr	r3, [pc, #20]	; (80090ac <HAL_IncTick+0x1c>)
 8009096:	781b      	ldrb	r3, [r3, #0]
 8009098:	461a      	mov	r2, r3
 800909a:	4b05      	ldr	r3, [pc, #20]	; (80090b0 <HAL_IncTick+0x20>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	4413      	add	r3, r2
 80090a0:	4a03      	ldr	r2, [pc, #12]	; (80090b0 <HAL_IncTick+0x20>)
 80090a2:	6013      	str	r3, [r2, #0]
}
 80090a4:	bf00      	nop
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bc80      	pop	{r7}
 80090aa:	4770      	bx	lr
 80090ac:	200009cc 	.word	0x200009cc
 80090b0:	20000ef0 	.word	0x20000ef0

080090b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80090b4:	b480      	push	{r7}
 80090b6:	af00      	add	r7, sp, #0
  return uwTick;
 80090b8:	4b02      	ldr	r3, [pc, #8]	; (80090c4 <HAL_GetTick+0x10>)
 80090ba:	681b      	ldr	r3, [r3, #0]
}
 80090bc:	4618      	mov	r0, r3
 80090be:	46bd      	mov	sp, r7
 80090c0:	bc80      	pop	{r7}
 80090c2:	4770      	bx	lr
 80090c4:	20000ef0 	.word	0x20000ef0

080090c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b084      	sub	sp, #16
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80090d0:	f7ff fff0 	bl	80090b4 <HAL_GetTick>
 80090d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80090da:	68fb      	ldr	r3, [r7, #12]
 80090dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80090e0:	d005      	beq.n	80090ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80090e2:	4b0a      	ldr	r3, [pc, #40]	; (800910c <HAL_Delay+0x44>)
 80090e4:	781b      	ldrb	r3, [r3, #0]
 80090e6:	461a      	mov	r2, r3
 80090e8:	68fb      	ldr	r3, [r7, #12]
 80090ea:	4413      	add	r3, r2
 80090ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80090ee:	bf00      	nop
 80090f0:	f7ff ffe0 	bl	80090b4 <HAL_GetTick>
 80090f4:	4602      	mov	r2, r0
 80090f6:	68bb      	ldr	r3, [r7, #8]
 80090f8:	1ad3      	subs	r3, r2, r3
 80090fa:	68fa      	ldr	r2, [r7, #12]
 80090fc:	429a      	cmp	r2, r3
 80090fe:	d8f7      	bhi.n	80090f0 <HAL_Delay+0x28>
  {
  }
}
 8009100:	bf00      	nop
 8009102:	bf00      	nop
 8009104:	3710      	adds	r7, #16
 8009106:	46bd      	mov	sp, r7
 8009108:	bd80      	pop	{r7, pc}
 800910a:	bf00      	nop
 800910c:	200009cc 	.word	0x200009cc

08009110 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d101      	bne.n	8009122 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800911e:	2301      	movs	r3, #1
 8009120:	e0ed      	b.n	80092fe <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009128:	b2db      	uxtb	r3, r3
 800912a:	2b00      	cmp	r3, #0
 800912c:	d102      	bne.n	8009134 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f7ff fda4 	bl	8008c7c <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	681a      	ldr	r2, [r3, #0]
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f042 0201 	orr.w	r2, r2, #1
 8009142:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009144:	f7ff ffb6 	bl	80090b4 <HAL_GetTick>
 8009148:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800914a:	e012      	b.n	8009172 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800914c:	f7ff ffb2 	bl	80090b4 <HAL_GetTick>
 8009150:	4602      	mov	r2, r0
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	1ad3      	subs	r3, r2, r3
 8009156:	2b0a      	cmp	r3, #10
 8009158:	d90b      	bls.n	8009172 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800915e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2205      	movs	r2, #5
 800916a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800916e:	2301      	movs	r3, #1
 8009170:	e0c5      	b.n	80092fe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	f003 0301 	and.w	r3, r3, #1
 800917c:	2b00      	cmp	r3, #0
 800917e:	d0e5      	beq.n	800914c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	681b      	ldr	r3, [r3, #0]
 8009184:	681a      	ldr	r2, [r3, #0]
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f022 0202 	bic.w	r2, r2, #2
 800918e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009190:	f7ff ff90 	bl	80090b4 <HAL_GetTick>
 8009194:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009196:	e012      	b.n	80091be <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009198:	f7ff ff8c 	bl	80090b4 <HAL_GetTick>
 800919c:	4602      	mov	r2, r0
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	1ad3      	subs	r3, r2, r3
 80091a2:	2b0a      	cmp	r3, #10
 80091a4:	d90b      	bls.n	80091be <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091aa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	2205      	movs	r2, #5
 80091b6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80091ba:	2301      	movs	r3, #1
 80091bc:	e09f      	b.n	80092fe <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	f003 0302 	and.w	r3, r3, #2
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d1e5      	bne.n	8009198 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	7e1b      	ldrb	r3, [r3, #24]
 80091d0:	2b01      	cmp	r3, #1
 80091d2:	d108      	bne.n	80091e6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	681a      	ldr	r2, [r3, #0]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80091e2:	601a      	str	r2, [r3, #0]
 80091e4:	e007      	b.n	80091f6 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	681a      	ldr	r2, [r3, #0]
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80091f4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	7e5b      	ldrb	r3, [r3, #25]
 80091fa:	2b01      	cmp	r3, #1
 80091fc:	d108      	bne.n	8009210 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	681a      	ldr	r2, [r3, #0]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800920c:	601a      	str	r2, [r3, #0]
 800920e:	e007      	b.n	8009220 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	681a      	ldr	r2, [r3, #0]
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800921e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	7e9b      	ldrb	r3, [r3, #26]
 8009224:	2b01      	cmp	r3, #1
 8009226:	d108      	bne.n	800923a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	681a      	ldr	r2, [r3, #0]
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	f042 0220 	orr.w	r2, r2, #32
 8009236:	601a      	str	r2, [r3, #0]
 8009238:	e007      	b.n	800924a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	681a      	ldr	r2, [r3, #0]
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	f022 0220 	bic.w	r2, r2, #32
 8009248:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	7edb      	ldrb	r3, [r3, #27]
 800924e:	2b01      	cmp	r3, #1
 8009250:	d108      	bne.n	8009264 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	681a      	ldr	r2, [r3, #0]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f022 0210 	bic.w	r2, r2, #16
 8009260:	601a      	str	r2, [r3, #0]
 8009262:	e007      	b.n	8009274 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	681a      	ldr	r2, [r3, #0]
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f042 0210 	orr.w	r2, r2, #16
 8009272:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	7f1b      	ldrb	r3, [r3, #28]
 8009278:	2b01      	cmp	r3, #1
 800927a:	d108      	bne.n	800928e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	681a      	ldr	r2, [r3, #0]
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f042 0208 	orr.w	r2, r2, #8
 800928a:	601a      	str	r2, [r3, #0]
 800928c:	e007      	b.n	800929e <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	681a      	ldr	r2, [r3, #0]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	f022 0208 	bic.w	r2, r2, #8
 800929c:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	7f5b      	ldrb	r3, [r3, #29]
 80092a2:	2b01      	cmp	r3, #1
 80092a4:	d108      	bne.n	80092b8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	681a      	ldr	r2, [r3, #0]
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	f042 0204 	orr.w	r2, r2, #4
 80092b4:	601a      	str	r2, [r3, #0]
 80092b6:	e007      	b.n	80092c8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f022 0204 	bic.w	r2, r2, #4
 80092c6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	689a      	ldr	r2, [r3, #8]
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	68db      	ldr	r3, [r3, #12]
 80092d0:	431a      	orrs	r2, r3
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	691b      	ldr	r3, [r3, #16]
 80092d6:	431a      	orrs	r2, r3
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	695b      	ldr	r3, [r3, #20]
 80092dc:	ea42 0103 	orr.w	r1, r2, r3
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	685b      	ldr	r3, [r3, #4]
 80092e4:	1e5a      	subs	r2, r3, #1
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	430a      	orrs	r2, r1
 80092ec:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2200      	movs	r2, #0
 80092f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2201      	movs	r2, #1
 80092f8:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80092fc:	2300      	movs	r3, #0
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3710      	adds	r7, #16
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}
	...

08009308 <__NVIC_SetPriorityGrouping>:
{
 8009308:	b480      	push	{r7}
 800930a:	b085      	sub	sp, #20
 800930c:	af00      	add	r7, sp, #0
 800930e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f003 0307 	and.w	r3, r3, #7
 8009316:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009318:	4b0c      	ldr	r3, [pc, #48]	; (800934c <__NVIC_SetPriorityGrouping+0x44>)
 800931a:	68db      	ldr	r3, [r3, #12]
 800931c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800931e:	68ba      	ldr	r2, [r7, #8]
 8009320:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009324:	4013      	ands	r3, r2
 8009326:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800932c:	68bb      	ldr	r3, [r7, #8]
 800932e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009330:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8009334:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009338:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800933a:	4a04      	ldr	r2, [pc, #16]	; (800934c <__NVIC_SetPriorityGrouping+0x44>)
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	60d3      	str	r3, [r2, #12]
}
 8009340:	bf00      	nop
 8009342:	3714      	adds	r7, #20
 8009344:	46bd      	mov	sp, r7
 8009346:	bc80      	pop	{r7}
 8009348:	4770      	bx	lr
 800934a:	bf00      	nop
 800934c:	e000ed00 	.word	0xe000ed00

08009350 <__NVIC_GetPriorityGrouping>:
{
 8009350:	b480      	push	{r7}
 8009352:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8009354:	4b04      	ldr	r3, [pc, #16]	; (8009368 <__NVIC_GetPriorityGrouping+0x18>)
 8009356:	68db      	ldr	r3, [r3, #12]
 8009358:	0a1b      	lsrs	r3, r3, #8
 800935a:	f003 0307 	and.w	r3, r3, #7
}
 800935e:	4618      	mov	r0, r3
 8009360:	46bd      	mov	sp, r7
 8009362:	bc80      	pop	{r7}
 8009364:	4770      	bx	lr
 8009366:	bf00      	nop
 8009368:	e000ed00 	.word	0xe000ed00

0800936c <__NVIC_EnableIRQ>:
{
 800936c:	b480      	push	{r7}
 800936e:	b083      	sub	sp, #12
 8009370:	af00      	add	r7, sp, #0
 8009372:	4603      	mov	r3, r0
 8009374:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009376:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800937a:	2b00      	cmp	r3, #0
 800937c:	db0b      	blt.n	8009396 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800937e:	79fb      	ldrb	r3, [r7, #7]
 8009380:	f003 021f 	and.w	r2, r3, #31
 8009384:	4906      	ldr	r1, [pc, #24]	; (80093a0 <__NVIC_EnableIRQ+0x34>)
 8009386:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800938a:	095b      	lsrs	r3, r3, #5
 800938c:	2001      	movs	r0, #1
 800938e:	fa00 f202 	lsl.w	r2, r0, r2
 8009392:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009396:	bf00      	nop
 8009398:	370c      	adds	r7, #12
 800939a:	46bd      	mov	sp, r7
 800939c:	bc80      	pop	{r7}
 800939e:	4770      	bx	lr
 80093a0:	e000e100 	.word	0xe000e100

080093a4 <__NVIC_SetPriority>:
{
 80093a4:	b480      	push	{r7}
 80093a6:	b083      	sub	sp, #12
 80093a8:	af00      	add	r7, sp, #0
 80093aa:	4603      	mov	r3, r0
 80093ac:	6039      	str	r1, [r7, #0]
 80093ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80093b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	db0a      	blt.n	80093ce <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	b2da      	uxtb	r2, r3
 80093bc:	490c      	ldr	r1, [pc, #48]	; (80093f0 <__NVIC_SetPriority+0x4c>)
 80093be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80093c2:	0112      	lsls	r2, r2, #4
 80093c4:	b2d2      	uxtb	r2, r2
 80093c6:	440b      	add	r3, r1
 80093c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80093cc:	e00a      	b.n	80093e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80093ce:	683b      	ldr	r3, [r7, #0]
 80093d0:	b2da      	uxtb	r2, r3
 80093d2:	4908      	ldr	r1, [pc, #32]	; (80093f4 <__NVIC_SetPriority+0x50>)
 80093d4:	79fb      	ldrb	r3, [r7, #7]
 80093d6:	f003 030f 	and.w	r3, r3, #15
 80093da:	3b04      	subs	r3, #4
 80093dc:	0112      	lsls	r2, r2, #4
 80093de:	b2d2      	uxtb	r2, r2
 80093e0:	440b      	add	r3, r1
 80093e2:	761a      	strb	r2, [r3, #24]
}
 80093e4:	bf00      	nop
 80093e6:	370c      	adds	r7, #12
 80093e8:	46bd      	mov	sp, r7
 80093ea:	bc80      	pop	{r7}
 80093ec:	4770      	bx	lr
 80093ee:	bf00      	nop
 80093f0:	e000e100 	.word	0xe000e100
 80093f4:	e000ed00 	.word	0xe000ed00

080093f8 <NVIC_EncodePriority>:
{
 80093f8:	b480      	push	{r7}
 80093fa:	b089      	sub	sp, #36	; 0x24
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	60f8      	str	r0, [r7, #12]
 8009400:	60b9      	str	r1, [r7, #8]
 8009402:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	f003 0307 	and.w	r3, r3, #7
 800940a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800940c:	69fb      	ldr	r3, [r7, #28]
 800940e:	f1c3 0307 	rsb	r3, r3, #7
 8009412:	2b04      	cmp	r3, #4
 8009414:	bf28      	it	cs
 8009416:	2304      	movcs	r3, #4
 8009418:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800941a:	69fb      	ldr	r3, [r7, #28]
 800941c:	3304      	adds	r3, #4
 800941e:	2b06      	cmp	r3, #6
 8009420:	d902      	bls.n	8009428 <NVIC_EncodePriority+0x30>
 8009422:	69fb      	ldr	r3, [r7, #28]
 8009424:	3b03      	subs	r3, #3
 8009426:	e000      	b.n	800942a <NVIC_EncodePriority+0x32>
 8009428:	2300      	movs	r3, #0
 800942a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800942c:	f04f 32ff 	mov.w	r2, #4294967295
 8009430:	69bb      	ldr	r3, [r7, #24]
 8009432:	fa02 f303 	lsl.w	r3, r2, r3
 8009436:	43da      	mvns	r2, r3
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	401a      	ands	r2, r3
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009440:	f04f 31ff 	mov.w	r1, #4294967295
 8009444:	697b      	ldr	r3, [r7, #20]
 8009446:	fa01 f303 	lsl.w	r3, r1, r3
 800944a:	43d9      	mvns	r1, r3
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009450:	4313      	orrs	r3, r2
}
 8009452:	4618      	mov	r0, r3
 8009454:	3724      	adds	r7, #36	; 0x24
 8009456:	46bd      	mov	sp, r7
 8009458:	bc80      	pop	{r7}
 800945a:	4770      	bx	lr

0800945c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800945c:	b580      	push	{r7, lr}
 800945e:	b082      	sub	sp, #8
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	3b01      	subs	r3, #1
 8009468:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800946c:	d301      	bcc.n	8009472 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800946e:	2301      	movs	r3, #1
 8009470:	e00f      	b.n	8009492 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009472:	4a0a      	ldr	r2, [pc, #40]	; (800949c <SysTick_Config+0x40>)
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	3b01      	subs	r3, #1
 8009478:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800947a:	210f      	movs	r1, #15
 800947c:	f04f 30ff 	mov.w	r0, #4294967295
 8009480:	f7ff ff90 	bl	80093a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009484:	4b05      	ldr	r3, [pc, #20]	; (800949c <SysTick_Config+0x40>)
 8009486:	2200      	movs	r2, #0
 8009488:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800948a:	4b04      	ldr	r3, [pc, #16]	; (800949c <SysTick_Config+0x40>)
 800948c:	2207      	movs	r2, #7
 800948e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009490:	2300      	movs	r3, #0
}
 8009492:	4618      	mov	r0, r3
 8009494:	3708      	adds	r7, #8
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}
 800949a:	bf00      	nop
 800949c:	e000e010 	.word	0xe000e010

080094a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b082      	sub	sp, #8
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f7ff ff2d 	bl	8009308 <__NVIC_SetPriorityGrouping>
}
 80094ae:	bf00      	nop
 80094b0:	3708      	adds	r7, #8
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bd80      	pop	{r7, pc}

080094b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80094b6:	b580      	push	{r7, lr}
 80094b8:	b086      	sub	sp, #24
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	4603      	mov	r3, r0
 80094be:	60b9      	str	r1, [r7, #8]
 80094c0:	607a      	str	r2, [r7, #4]
 80094c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80094c4:	2300      	movs	r3, #0
 80094c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80094c8:	f7ff ff42 	bl	8009350 <__NVIC_GetPriorityGrouping>
 80094cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80094ce:	687a      	ldr	r2, [r7, #4]
 80094d0:	68b9      	ldr	r1, [r7, #8]
 80094d2:	6978      	ldr	r0, [r7, #20]
 80094d4:	f7ff ff90 	bl	80093f8 <NVIC_EncodePriority>
 80094d8:	4602      	mov	r2, r0
 80094da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80094de:	4611      	mov	r1, r2
 80094e0:	4618      	mov	r0, r3
 80094e2:	f7ff ff5f 	bl	80093a4 <__NVIC_SetPriority>
}
 80094e6:	bf00      	nop
 80094e8:	3718      	adds	r7, #24
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}

080094ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80094ee:	b580      	push	{r7, lr}
 80094f0:	b082      	sub	sp, #8
 80094f2:	af00      	add	r7, sp, #0
 80094f4:	4603      	mov	r3, r0
 80094f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80094f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80094fc:	4618      	mov	r0, r3
 80094fe:	f7ff ff35 	bl	800936c <__NVIC_EnableIRQ>
}
 8009502:	bf00      	nop
 8009504:	3708      	adds	r7, #8
 8009506:	46bd      	mov	sp, r7
 8009508:	bd80      	pop	{r7, pc}

0800950a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800950a:	b580      	push	{r7, lr}
 800950c:	b082      	sub	sp, #8
 800950e:	af00      	add	r7, sp, #0
 8009510:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f7ff ffa2 	bl	800945c <SysTick_Config>
 8009518:	4603      	mov	r3, r0
}
 800951a:	4618      	mov	r0, r3
 800951c:	3708      	adds	r7, #8
 800951e:	46bd      	mov	sp, r7
 8009520:	bd80      	pop	{r7, pc}

08009522 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009522:	b480      	push	{r7}
 8009524:	b085      	sub	sp, #20
 8009526:	af00      	add	r7, sp, #0
 8009528:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800952a:	2300      	movs	r3, #0
 800952c:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009534:	b2db      	uxtb	r3, r3
 8009536:	2b02      	cmp	r3, #2
 8009538:	d008      	beq.n	800954c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2204      	movs	r2, #4
 800953e:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	2200      	movs	r2, #0
 8009544:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8009548:	2301      	movs	r3, #1
 800954a:	e020      	b.n	800958e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	681a      	ldr	r2, [r3, #0]
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	f022 020e 	bic.w	r2, r2, #14
 800955a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	681a      	ldr	r2, [r3, #0]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f022 0201 	bic.w	r2, r2, #1
 800956a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009574:	2101      	movs	r1, #1
 8009576:	fa01 f202 	lsl.w	r2, r1, r2
 800957a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	2201      	movs	r2, #1
 8009580:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	2200      	movs	r2, #0
 8009588:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800958c:	7bfb      	ldrb	r3, [r7, #15]
}
 800958e:	4618      	mov	r0, r3
 8009590:	3714      	adds	r7, #20
 8009592:	46bd      	mov	sp, r7
 8009594:	bc80      	pop	{r7}
 8009596:	4770      	bx	lr

08009598 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8009598:	b580      	push	{r7, lr}
 800959a:	b084      	sub	sp, #16
 800959c:	af00      	add	r7, sp, #0
 800959e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80095a0:	2300      	movs	r3, #0
 80095a2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80095aa:	b2db      	uxtb	r3, r3
 80095ac:	2b02      	cmp	r3, #2
 80095ae:	d005      	beq.n	80095bc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	2204      	movs	r2, #4
 80095b4:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80095b6:	2301      	movs	r3, #1
 80095b8:	73fb      	strb	r3, [r7, #15]
 80095ba:	e0d6      	b.n	800976a <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	681a      	ldr	r2, [r3, #0]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	f022 020e 	bic.w	r2, r2, #14
 80095ca:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	681a      	ldr	r2, [r3, #0]
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f022 0201 	bic.w	r2, r2, #1
 80095da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	461a      	mov	r2, r3
 80095e2:	4b64      	ldr	r3, [pc, #400]	; (8009774 <HAL_DMA_Abort_IT+0x1dc>)
 80095e4:	429a      	cmp	r2, r3
 80095e6:	d958      	bls.n	800969a <HAL_DMA_Abort_IT+0x102>
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	4a62      	ldr	r2, [pc, #392]	; (8009778 <HAL_DMA_Abort_IT+0x1e0>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d04f      	beq.n	8009692 <HAL_DMA_Abort_IT+0xfa>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	4a61      	ldr	r2, [pc, #388]	; (800977c <HAL_DMA_Abort_IT+0x1e4>)
 80095f8:	4293      	cmp	r3, r2
 80095fa:	d048      	beq.n	800968e <HAL_DMA_Abort_IT+0xf6>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	681b      	ldr	r3, [r3, #0]
 8009600:	4a5f      	ldr	r2, [pc, #380]	; (8009780 <HAL_DMA_Abort_IT+0x1e8>)
 8009602:	4293      	cmp	r3, r2
 8009604:	d040      	beq.n	8009688 <HAL_DMA_Abort_IT+0xf0>
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	4a5e      	ldr	r2, [pc, #376]	; (8009784 <HAL_DMA_Abort_IT+0x1ec>)
 800960c:	4293      	cmp	r3, r2
 800960e:	d038      	beq.n	8009682 <HAL_DMA_Abort_IT+0xea>
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	4a5c      	ldr	r2, [pc, #368]	; (8009788 <HAL_DMA_Abort_IT+0x1f0>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d030      	beq.n	800967c <HAL_DMA_Abort_IT+0xe4>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	4a5b      	ldr	r2, [pc, #364]	; (800978c <HAL_DMA_Abort_IT+0x1f4>)
 8009620:	4293      	cmp	r3, r2
 8009622:	d028      	beq.n	8009676 <HAL_DMA_Abort_IT+0xde>
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	4a52      	ldr	r2, [pc, #328]	; (8009774 <HAL_DMA_Abort_IT+0x1dc>)
 800962a:	4293      	cmp	r3, r2
 800962c:	d020      	beq.n	8009670 <HAL_DMA_Abort_IT+0xd8>
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	4a57      	ldr	r2, [pc, #348]	; (8009790 <HAL_DMA_Abort_IT+0x1f8>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d019      	beq.n	800966c <HAL_DMA_Abort_IT+0xd4>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a55      	ldr	r2, [pc, #340]	; (8009794 <HAL_DMA_Abort_IT+0x1fc>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d012      	beq.n	8009668 <HAL_DMA_Abort_IT+0xd0>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4a54      	ldr	r2, [pc, #336]	; (8009798 <HAL_DMA_Abort_IT+0x200>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d00a      	beq.n	8009662 <HAL_DMA_Abort_IT+0xca>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a52      	ldr	r2, [pc, #328]	; (800979c <HAL_DMA_Abort_IT+0x204>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d102      	bne.n	800965c <HAL_DMA_Abort_IT+0xc4>
 8009656:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800965a:	e01b      	b.n	8009694 <HAL_DMA_Abort_IT+0xfc>
 800965c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009660:	e018      	b.n	8009694 <HAL_DMA_Abort_IT+0xfc>
 8009662:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009666:	e015      	b.n	8009694 <HAL_DMA_Abort_IT+0xfc>
 8009668:	2310      	movs	r3, #16
 800966a:	e013      	b.n	8009694 <HAL_DMA_Abort_IT+0xfc>
 800966c:	2301      	movs	r3, #1
 800966e:	e011      	b.n	8009694 <HAL_DMA_Abort_IT+0xfc>
 8009670:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009674:	e00e      	b.n	8009694 <HAL_DMA_Abort_IT+0xfc>
 8009676:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800967a:	e00b      	b.n	8009694 <HAL_DMA_Abort_IT+0xfc>
 800967c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009680:	e008      	b.n	8009694 <HAL_DMA_Abort_IT+0xfc>
 8009682:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009686:	e005      	b.n	8009694 <HAL_DMA_Abort_IT+0xfc>
 8009688:	f44f 7380 	mov.w	r3, #256	; 0x100
 800968c:	e002      	b.n	8009694 <HAL_DMA_Abort_IT+0xfc>
 800968e:	2310      	movs	r3, #16
 8009690:	e000      	b.n	8009694 <HAL_DMA_Abort_IT+0xfc>
 8009692:	2301      	movs	r3, #1
 8009694:	4a42      	ldr	r2, [pc, #264]	; (80097a0 <HAL_DMA_Abort_IT+0x208>)
 8009696:	6053      	str	r3, [r2, #4]
 8009698:	e057      	b.n	800974a <HAL_DMA_Abort_IT+0x1b2>
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	4a36      	ldr	r2, [pc, #216]	; (8009778 <HAL_DMA_Abort_IT+0x1e0>)
 80096a0:	4293      	cmp	r3, r2
 80096a2:	d04f      	beq.n	8009744 <HAL_DMA_Abort_IT+0x1ac>
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	4a34      	ldr	r2, [pc, #208]	; (800977c <HAL_DMA_Abort_IT+0x1e4>)
 80096aa:	4293      	cmp	r3, r2
 80096ac:	d048      	beq.n	8009740 <HAL_DMA_Abort_IT+0x1a8>
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	4a33      	ldr	r2, [pc, #204]	; (8009780 <HAL_DMA_Abort_IT+0x1e8>)
 80096b4:	4293      	cmp	r3, r2
 80096b6:	d040      	beq.n	800973a <HAL_DMA_Abort_IT+0x1a2>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	4a31      	ldr	r2, [pc, #196]	; (8009784 <HAL_DMA_Abort_IT+0x1ec>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d038      	beq.n	8009734 <HAL_DMA_Abort_IT+0x19c>
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	4a30      	ldr	r2, [pc, #192]	; (8009788 <HAL_DMA_Abort_IT+0x1f0>)
 80096c8:	4293      	cmp	r3, r2
 80096ca:	d030      	beq.n	800972e <HAL_DMA_Abort_IT+0x196>
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	4a2e      	ldr	r2, [pc, #184]	; (800978c <HAL_DMA_Abort_IT+0x1f4>)
 80096d2:	4293      	cmp	r3, r2
 80096d4:	d028      	beq.n	8009728 <HAL_DMA_Abort_IT+0x190>
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	4a26      	ldr	r2, [pc, #152]	; (8009774 <HAL_DMA_Abort_IT+0x1dc>)
 80096dc:	4293      	cmp	r3, r2
 80096de:	d020      	beq.n	8009722 <HAL_DMA_Abort_IT+0x18a>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	4a2a      	ldr	r2, [pc, #168]	; (8009790 <HAL_DMA_Abort_IT+0x1f8>)
 80096e6:	4293      	cmp	r3, r2
 80096e8:	d019      	beq.n	800971e <HAL_DMA_Abort_IT+0x186>
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	681b      	ldr	r3, [r3, #0]
 80096ee:	4a29      	ldr	r2, [pc, #164]	; (8009794 <HAL_DMA_Abort_IT+0x1fc>)
 80096f0:	4293      	cmp	r3, r2
 80096f2:	d012      	beq.n	800971a <HAL_DMA_Abort_IT+0x182>
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	4a27      	ldr	r2, [pc, #156]	; (8009798 <HAL_DMA_Abort_IT+0x200>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d00a      	beq.n	8009714 <HAL_DMA_Abort_IT+0x17c>
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	4a26      	ldr	r2, [pc, #152]	; (800979c <HAL_DMA_Abort_IT+0x204>)
 8009704:	4293      	cmp	r3, r2
 8009706:	d102      	bne.n	800970e <HAL_DMA_Abort_IT+0x176>
 8009708:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800970c:	e01b      	b.n	8009746 <HAL_DMA_Abort_IT+0x1ae>
 800970e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009712:	e018      	b.n	8009746 <HAL_DMA_Abort_IT+0x1ae>
 8009714:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009718:	e015      	b.n	8009746 <HAL_DMA_Abort_IT+0x1ae>
 800971a:	2310      	movs	r3, #16
 800971c:	e013      	b.n	8009746 <HAL_DMA_Abort_IT+0x1ae>
 800971e:	2301      	movs	r3, #1
 8009720:	e011      	b.n	8009746 <HAL_DMA_Abort_IT+0x1ae>
 8009722:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009726:	e00e      	b.n	8009746 <HAL_DMA_Abort_IT+0x1ae>
 8009728:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800972c:	e00b      	b.n	8009746 <HAL_DMA_Abort_IT+0x1ae>
 800972e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009732:	e008      	b.n	8009746 <HAL_DMA_Abort_IT+0x1ae>
 8009734:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009738:	e005      	b.n	8009746 <HAL_DMA_Abort_IT+0x1ae>
 800973a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800973e:	e002      	b.n	8009746 <HAL_DMA_Abort_IT+0x1ae>
 8009740:	2310      	movs	r3, #16
 8009742:	e000      	b.n	8009746 <HAL_DMA_Abort_IT+0x1ae>
 8009744:	2301      	movs	r3, #1
 8009746:	4a17      	ldr	r2, [pc, #92]	; (80097a4 <HAL_DMA_Abort_IT+0x20c>)
 8009748:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2201      	movs	r2, #1
 800974e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2200      	movs	r2, #0
 8009756:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800975e:	2b00      	cmp	r3, #0
 8009760:	d003      	beq.n	800976a <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	4798      	blx	r3
    } 
  }
  return status;
 800976a:	7bfb      	ldrb	r3, [r7, #15]
}
 800976c:	4618      	mov	r0, r3
 800976e:	3710      	adds	r7, #16
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}
 8009774:	40020080 	.word	0x40020080
 8009778:	40020008 	.word	0x40020008
 800977c:	4002001c 	.word	0x4002001c
 8009780:	40020030 	.word	0x40020030
 8009784:	40020044 	.word	0x40020044
 8009788:	40020058 	.word	0x40020058
 800978c:	4002006c 	.word	0x4002006c
 8009790:	40020408 	.word	0x40020408
 8009794:	4002041c 	.word	0x4002041c
 8009798:	40020430 	.word	0x40020430
 800979c:	40020444 	.word	0x40020444
 80097a0:	40020400 	.word	0x40020400
 80097a4:	40020000 	.word	0x40020000

080097a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b08b      	sub	sp, #44	; 0x2c
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
 80097b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80097b2:	2300      	movs	r3, #0
 80097b4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80097b6:	2300      	movs	r3, #0
 80097b8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80097ba:	e179      	b.n	8009ab0 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80097bc:	2201      	movs	r2, #1
 80097be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097c0:	fa02 f303 	lsl.w	r3, r2, r3
 80097c4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80097c6:	683b      	ldr	r3, [r7, #0]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	69fa      	ldr	r2, [r7, #28]
 80097cc:	4013      	ands	r3, r2
 80097ce:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80097d0:	69ba      	ldr	r2, [r7, #24]
 80097d2:	69fb      	ldr	r3, [r7, #28]
 80097d4:	429a      	cmp	r2, r3
 80097d6:	f040 8168 	bne.w	8009aaa <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	685b      	ldr	r3, [r3, #4]
 80097de:	4a96      	ldr	r2, [pc, #600]	; (8009a38 <HAL_GPIO_Init+0x290>)
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d05e      	beq.n	80098a2 <HAL_GPIO_Init+0xfa>
 80097e4:	4a94      	ldr	r2, [pc, #592]	; (8009a38 <HAL_GPIO_Init+0x290>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d875      	bhi.n	80098d6 <HAL_GPIO_Init+0x12e>
 80097ea:	4a94      	ldr	r2, [pc, #592]	; (8009a3c <HAL_GPIO_Init+0x294>)
 80097ec:	4293      	cmp	r3, r2
 80097ee:	d058      	beq.n	80098a2 <HAL_GPIO_Init+0xfa>
 80097f0:	4a92      	ldr	r2, [pc, #584]	; (8009a3c <HAL_GPIO_Init+0x294>)
 80097f2:	4293      	cmp	r3, r2
 80097f4:	d86f      	bhi.n	80098d6 <HAL_GPIO_Init+0x12e>
 80097f6:	4a92      	ldr	r2, [pc, #584]	; (8009a40 <HAL_GPIO_Init+0x298>)
 80097f8:	4293      	cmp	r3, r2
 80097fa:	d052      	beq.n	80098a2 <HAL_GPIO_Init+0xfa>
 80097fc:	4a90      	ldr	r2, [pc, #576]	; (8009a40 <HAL_GPIO_Init+0x298>)
 80097fe:	4293      	cmp	r3, r2
 8009800:	d869      	bhi.n	80098d6 <HAL_GPIO_Init+0x12e>
 8009802:	4a90      	ldr	r2, [pc, #576]	; (8009a44 <HAL_GPIO_Init+0x29c>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d04c      	beq.n	80098a2 <HAL_GPIO_Init+0xfa>
 8009808:	4a8e      	ldr	r2, [pc, #568]	; (8009a44 <HAL_GPIO_Init+0x29c>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d863      	bhi.n	80098d6 <HAL_GPIO_Init+0x12e>
 800980e:	4a8e      	ldr	r2, [pc, #568]	; (8009a48 <HAL_GPIO_Init+0x2a0>)
 8009810:	4293      	cmp	r3, r2
 8009812:	d046      	beq.n	80098a2 <HAL_GPIO_Init+0xfa>
 8009814:	4a8c      	ldr	r2, [pc, #560]	; (8009a48 <HAL_GPIO_Init+0x2a0>)
 8009816:	4293      	cmp	r3, r2
 8009818:	d85d      	bhi.n	80098d6 <HAL_GPIO_Init+0x12e>
 800981a:	2b12      	cmp	r3, #18
 800981c:	d82a      	bhi.n	8009874 <HAL_GPIO_Init+0xcc>
 800981e:	2b12      	cmp	r3, #18
 8009820:	d859      	bhi.n	80098d6 <HAL_GPIO_Init+0x12e>
 8009822:	a201      	add	r2, pc, #4	; (adr r2, 8009828 <HAL_GPIO_Init+0x80>)
 8009824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009828:	080098a3 	.word	0x080098a3
 800982c:	0800987d 	.word	0x0800987d
 8009830:	0800988f 	.word	0x0800988f
 8009834:	080098d1 	.word	0x080098d1
 8009838:	080098d7 	.word	0x080098d7
 800983c:	080098d7 	.word	0x080098d7
 8009840:	080098d7 	.word	0x080098d7
 8009844:	080098d7 	.word	0x080098d7
 8009848:	080098d7 	.word	0x080098d7
 800984c:	080098d7 	.word	0x080098d7
 8009850:	080098d7 	.word	0x080098d7
 8009854:	080098d7 	.word	0x080098d7
 8009858:	080098d7 	.word	0x080098d7
 800985c:	080098d7 	.word	0x080098d7
 8009860:	080098d7 	.word	0x080098d7
 8009864:	080098d7 	.word	0x080098d7
 8009868:	080098d7 	.word	0x080098d7
 800986c:	08009885 	.word	0x08009885
 8009870:	08009899 	.word	0x08009899
 8009874:	4a75      	ldr	r2, [pc, #468]	; (8009a4c <HAL_GPIO_Init+0x2a4>)
 8009876:	4293      	cmp	r3, r2
 8009878:	d013      	beq.n	80098a2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800987a:	e02c      	b.n	80098d6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800987c:	683b      	ldr	r3, [r7, #0]
 800987e:	68db      	ldr	r3, [r3, #12]
 8009880:	623b      	str	r3, [r7, #32]
          break;
 8009882:	e029      	b.n	80098d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	68db      	ldr	r3, [r3, #12]
 8009888:	3304      	adds	r3, #4
 800988a:	623b      	str	r3, [r7, #32]
          break;
 800988c:	e024      	b.n	80098d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	68db      	ldr	r3, [r3, #12]
 8009892:	3308      	adds	r3, #8
 8009894:	623b      	str	r3, [r7, #32]
          break;
 8009896:	e01f      	b.n	80098d8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	68db      	ldr	r3, [r3, #12]
 800989c:	330c      	adds	r3, #12
 800989e:	623b      	str	r3, [r7, #32]
          break;
 80098a0:	e01a      	b.n	80098d8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80098a2:	683b      	ldr	r3, [r7, #0]
 80098a4:	689b      	ldr	r3, [r3, #8]
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d102      	bne.n	80098b0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80098aa:	2304      	movs	r3, #4
 80098ac:	623b      	str	r3, [r7, #32]
          break;
 80098ae:	e013      	b.n	80098d8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	689b      	ldr	r3, [r3, #8]
 80098b4:	2b01      	cmp	r3, #1
 80098b6:	d105      	bne.n	80098c4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80098b8:	2308      	movs	r3, #8
 80098ba:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	69fa      	ldr	r2, [r7, #28]
 80098c0:	611a      	str	r2, [r3, #16]
          break;
 80098c2:	e009      	b.n	80098d8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80098c4:	2308      	movs	r3, #8
 80098c6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	69fa      	ldr	r2, [r7, #28]
 80098cc:	615a      	str	r2, [r3, #20]
          break;
 80098ce:	e003      	b.n	80098d8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80098d0:	2300      	movs	r3, #0
 80098d2:	623b      	str	r3, [r7, #32]
          break;
 80098d4:	e000      	b.n	80098d8 <HAL_GPIO_Init+0x130>
          break;
 80098d6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80098d8:	69bb      	ldr	r3, [r7, #24]
 80098da:	2bff      	cmp	r3, #255	; 0xff
 80098dc:	d801      	bhi.n	80098e2 <HAL_GPIO_Init+0x13a>
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	e001      	b.n	80098e6 <HAL_GPIO_Init+0x13e>
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	3304      	adds	r3, #4
 80098e6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80098e8:	69bb      	ldr	r3, [r7, #24]
 80098ea:	2bff      	cmp	r3, #255	; 0xff
 80098ec:	d802      	bhi.n	80098f4 <HAL_GPIO_Init+0x14c>
 80098ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f0:	009b      	lsls	r3, r3, #2
 80098f2:	e002      	b.n	80098fa <HAL_GPIO_Init+0x152>
 80098f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f6:	3b08      	subs	r3, #8
 80098f8:	009b      	lsls	r3, r3, #2
 80098fa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80098fc:	697b      	ldr	r3, [r7, #20]
 80098fe:	681a      	ldr	r2, [r3, #0]
 8009900:	210f      	movs	r1, #15
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	fa01 f303 	lsl.w	r3, r1, r3
 8009908:	43db      	mvns	r3, r3
 800990a:	401a      	ands	r2, r3
 800990c:	6a39      	ldr	r1, [r7, #32]
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	fa01 f303 	lsl.w	r3, r1, r3
 8009914:	431a      	orrs	r2, r3
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	685b      	ldr	r3, [r3, #4]
 800991e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009922:	2b00      	cmp	r3, #0
 8009924:	f000 80c1 	beq.w	8009aaa <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8009928:	4b49      	ldr	r3, [pc, #292]	; (8009a50 <HAL_GPIO_Init+0x2a8>)
 800992a:	699b      	ldr	r3, [r3, #24]
 800992c:	4a48      	ldr	r2, [pc, #288]	; (8009a50 <HAL_GPIO_Init+0x2a8>)
 800992e:	f043 0301 	orr.w	r3, r3, #1
 8009932:	6193      	str	r3, [r2, #24]
 8009934:	4b46      	ldr	r3, [pc, #280]	; (8009a50 <HAL_GPIO_Init+0x2a8>)
 8009936:	699b      	ldr	r3, [r3, #24]
 8009938:	f003 0301 	and.w	r3, r3, #1
 800993c:	60bb      	str	r3, [r7, #8]
 800993e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8009940:	4a44      	ldr	r2, [pc, #272]	; (8009a54 <HAL_GPIO_Init+0x2ac>)
 8009942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009944:	089b      	lsrs	r3, r3, #2
 8009946:	3302      	adds	r3, #2
 8009948:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800994c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800994e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009950:	f003 0303 	and.w	r3, r3, #3
 8009954:	009b      	lsls	r3, r3, #2
 8009956:	220f      	movs	r2, #15
 8009958:	fa02 f303 	lsl.w	r3, r2, r3
 800995c:	43db      	mvns	r3, r3
 800995e:	68fa      	ldr	r2, [r7, #12]
 8009960:	4013      	ands	r3, r2
 8009962:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	4a3c      	ldr	r2, [pc, #240]	; (8009a58 <HAL_GPIO_Init+0x2b0>)
 8009968:	4293      	cmp	r3, r2
 800996a:	d01f      	beq.n	80099ac <HAL_GPIO_Init+0x204>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	4a3b      	ldr	r2, [pc, #236]	; (8009a5c <HAL_GPIO_Init+0x2b4>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d019      	beq.n	80099a8 <HAL_GPIO_Init+0x200>
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	4a3a      	ldr	r2, [pc, #232]	; (8009a60 <HAL_GPIO_Init+0x2b8>)
 8009978:	4293      	cmp	r3, r2
 800997a:	d013      	beq.n	80099a4 <HAL_GPIO_Init+0x1fc>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	4a39      	ldr	r2, [pc, #228]	; (8009a64 <HAL_GPIO_Init+0x2bc>)
 8009980:	4293      	cmp	r3, r2
 8009982:	d00d      	beq.n	80099a0 <HAL_GPIO_Init+0x1f8>
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	4a38      	ldr	r2, [pc, #224]	; (8009a68 <HAL_GPIO_Init+0x2c0>)
 8009988:	4293      	cmp	r3, r2
 800998a:	d007      	beq.n	800999c <HAL_GPIO_Init+0x1f4>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	4a37      	ldr	r2, [pc, #220]	; (8009a6c <HAL_GPIO_Init+0x2c4>)
 8009990:	4293      	cmp	r3, r2
 8009992:	d101      	bne.n	8009998 <HAL_GPIO_Init+0x1f0>
 8009994:	2305      	movs	r3, #5
 8009996:	e00a      	b.n	80099ae <HAL_GPIO_Init+0x206>
 8009998:	2306      	movs	r3, #6
 800999a:	e008      	b.n	80099ae <HAL_GPIO_Init+0x206>
 800999c:	2304      	movs	r3, #4
 800999e:	e006      	b.n	80099ae <HAL_GPIO_Init+0x206>
 80099a0:	2303      	movs	r3, #3
 80099a2:	e004      	b.n	80099ae <HAL_GPIO_Init+0x206>
 80099a4:	2302      	movs	r3, #2
 80099a6:	e002      	b.n	80099ae <HAL_GPIO_Init+0x206>
 80099a8:	2301      	movs	r3, #1
 80099aa:	e000      	b.n	80099ae <HAL_GPIO_Init+0x206>
 80099ac:	2300      	movs	r3, #0
 80099ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099b0:	f002 0203 	and.w	r2, r2, #3
 80099b4:	0092      	lsls	r2, r2, #2
 80099b6:	4093      	lsls	r3, r2
 80099b8:	68fa      	ldr	r2, [r7, #12]
 80099ba:	4313      	orrs	r3, r2
 80099bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80099be:	4925      	ldr	r1, [pc, #148]	; (8009a54 <HAL_GPIO_Init+0x2ac>)
 80099c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099c2:	089b      	lsrs	r3, r3, #2
 80099c4:	3302      	adds	r3, #2
 80099c6:	68fa      	ldr	r2, [r7, #12]
 80099c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80099cc:	683b      	ldr	r3, [r7, #0]
 80099ce:	685b      	ldr	r3, [r3, #4]
 80099d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d006      	beq.n	80099e6 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80099d8:	4b25      	ldr	r3, [pc, #148]	; (8009a70 <HAL_GPIO_Init+0x2c8>)
 80099da:	689a      	ldr	r2, [r3, #8]
 80099dc:	4924      	ldr	r1, [pc, #144]	; (8009a70 <HAL_GPIO_Init+0x2c8>)
 80099de:	69bb      	ldr	r3, [r7, #24]
 80099e0:	4313      	orrs	r3, r2
 80099e2:	608b      	str	r3, [r1, #8]
 80099e4:	e006      	b.n	80099f4 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80099e6:	4b22      	ldr	r3, [pc, #136]	; (8009a70 <HAL_GPIO_Init+0x2c8>)
 80099e8:	689a      	ldr	r2, [r3, #8]
 80099ea:	69bb      	ldr	r3, [r7, #24]
 80099ec:	43db      	mvns	r3, r3
 80099ee:	4920      	ldr	r1, [pc, #128]	; (8009a70 <HAL_GPIO_Init+0x2c8>)
 80099f0:	4013      	ands	r3, r2
 80099f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	685b      	ldr	r3, [r3, #4]
 80099f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d006      	beq.n	8009a0e <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8009a00:	4b1b      	ldr	r3, [pc, #108]	; (8009a70 <HAL_GPIO_Init+0x2c8>)
 8009a02:	68da      	ldr	r2, [r3, #12]
 8009a04:	491a      	ldr	r1, [pc, #104]	; (8009a70 <HAL_GPIO_Init+0x2c8>)
 8009a06:	69bb      	ldr	r3, [r7, #24]
 8009a08:	4313      	orrs	r3, r2
 8009a0a:	60cb      	str	r3, [r1, #12]
 8009a0c:	e006      	b.n	8009a1c <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8009a0e:	4b18      	ldr	r3, [pc, #96]	; (8009a70 <HAL_GPIO_Init+0x2c8>)
 8009a10:	68da      	ldr	r2, [r3, #12]
 8009a12:	69bb      	ldr	r3, [r7, #24]
 8009a14:	43db      	mvns	r3, r3
 8009a16:	4916      	ldr	r1, [pc, #88]	; (8009a70 <HAL_GPIO_Init+0x2c8>)
 8009a18:	4013      	ands	r3, r2
 8009a1a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009a1c:	683b      	ldr	r3, [r7, #0]
 8009a1e:	685b      	ldr	r3, [r3, #4]
 8009a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d025      	beq.n	8009a74 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8009a28:	4b11      	ldr	r3, [pc, #68]	; (8009a70 <HAL_GPIO_Init+0x2c8>)
 8009a2a:	685a      	ldr	r2, [r3, #4]
 8009a2c:	4910      	ldr	r1, [pc, #64]	; (8009a70 <HAL_GPIO_Init+0x2c8>)
 8009a2e:	69bb      	ldr	r3, [r7, #24]
 8009a30:	4313      	orrs	r3, r2
 8009a32:	604b      	str	r3, [r1, #4]
 8009a34:	e025      	b.n	8009a82 <HAL_GPIO_Init+0x2da>
 8009a36:	bf00      	nop
 8009a38:	10320000 	.word	0x10320000
 8009a3c:	10310000 	.word	0x10310000
 8009a40:	10220000 	.word	0x10220000
 8009a44:	10210000 	.word	0x10210000
 8009a48:	10120000 	.word	0x10120000
 8009a4c:	10110000 	.word	0x10110000
 8009a50:	40021000 	.word	0x40021000
 8009a54:	40010000 	.word	0x40010000
 8009a58:	40010800 	.word	0x40010800
 8009a5c:	40010c00 	.word	0x40010c00
 8009a60:	40011000 	.word	0x40011000
 8009a64:	40011400 	.word	0x40011400
 8009a68:	40011800 	.word	0x40011800
 8009a6c:	40011c00 	.word	0x40011c00
 8009a70:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8009a74:	4b15      	ldr	r3, [pc, #84]	; (8009acc <HAL_GPIO_Init+0x324>)
 8009a76:	685a      	ldr	r2, [r3, #4]
 8009a78:	69bb      	ldr	r3, [r7, #24]
 8009a7a:	43db      	mvns	r3, r3
 8009a7c:	4913      	ldr	r1, [pc, #76]	; (8009acc <HAL_GPIO_Init+0x324>)
 8009a7e:	4013      	ands	r3, r2
 8009a80:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	685b      	ldr	r3, [r3, #4]
 8009a86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d006      	beq.n	8009a9c <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8009a8e:	4b0f      	ldr	r3, [pc, #60]	; (8009acc <HAL_GPIO_Init+0x324>)
 8009a90:	681a      	ldr	r2, [r3, #0]
 8009a92:	490e      	ldr	r1, [pc, #56]	; (8009acc <HAL_GPIO_Init+0x324>)
 8009a94:	69bb      	ldr	r3, [r7, #24]
 8009a96:	4313      	orrs	r3, r2
 8009a98:	600b      	str	r3, [r1, #0]
 8009a9a:	e006      	b.n	8009aaa <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009a9c:	4b0b      	ldr	r3, [pc, #44]	; (8009acc <HAL_GPIO_Init+0x324>)
 8009a9e:	681a      	ldr	r2, [r3, #0]
 8009aa0:	69bb      	ldr	r3, [r7, #24]
 8009aa2:	43db      	mvns	r3, r3
 8009aa4:	4909      	ldr	r1, [pc, #36]	; (8009acc <HAL_GPIO_Init+0x324>)
 8009aa6:	4013      	ands	r3, r2
 8009aa8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8009aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aac:	3301      	adds	r3, #1
 8009aae:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	681a      	ldr	r2, [r3, #0]
 8009ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	f47f ae7e 	bne.w	80097bc <HAL_GPIO_Init+0x14>
  }
}
 8009ac0:	bf00      	nop
 8009ac2:	bf00      	nop
 8009ac4:	372c      	adds	r7, #44	; 0x2c
 8009ac6:	46bd      	mov	sp, r7
 8009ac8:	bc80      	pop	{r7}
 8009aca:	4770      	bx	lr
 8009acc:	40010400 	.word	0x40010400

08009ad0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009ad0:	b480      	push	{r7}
 8009ad2:	b089      	sub	sp, #36	; 0x24
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
 8009ad8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009ada:	2300      	movs	r3, #0
 8009adc:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8009ade:	e0a6      	b.n	8009c2e <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8009ae0:	2201      	movs	r2, #1
 8009ae2:	69fb      	ldr	r3, [r7, #28]
 8009ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8009ae8:	683a      	ldr	r2, [r7, #0]
 8009aea:	4013      	ands	r3, r2
 8009aec:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8009aee:	69bb      	ldr	r3, [r7, #24]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	f000 8099 	beq.w	8009c28 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8009af6:	4a54      	ldr	r2, [pc, #336]	; (8009c48 <HAL_GPIO_DeInit+0x178>)
 8009af8:	69fb      	ldr	r3, [r7, #28]
 8009afa:	089b      	lsrs	r3, r3, #2
 8009afc:	3302      	adds	r3, #2
 8009afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b02:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8009b04:	69fb      	ldr	r3, [r7, #28]
 8009b06:	f003 0303 	and.w	r3, r3, #3
 8009b0a:	009b      	lsls	r3, r3, #2
 8009b0c:	220f      	movs	r2, #15
 8009b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8009b12:	697a      	ldr	r2, [r7, #20]
 8009b14:	4013      	ands	r3, r2
 8009b16:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	4a4c      	ldr	r2, [pc, #304]	; (8009c4c <HAL_GPIO_DeInit+0x17c>)
 8009b1c:	4293      	cmp	r3, r2
 8009b1e:	d01f      	beq.n	8009b60 <HAL_GPIO_DeInit+0x90>
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	4a4b      	ldr	r2, [pc, #300]	; (8009c50 <HAL_GPIO_DeInit+0x180>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d019      	beq.n	8009b5c <HAL_GPIO_DeInit+0x8c>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	4a4a      	ldr	r2, [pc, #296]	; (8009c54 <HAL_GPIO_DeInit+0x184>)
 8009b2c:	4293      	cmp	r3, r2
 8009b2e:	d013      	beq.n	8009b58 <HAL_GPIO_DeInit+0x88>
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	4a49      	ldr	r2, [pc, #292]	; (8009c58 <HAL_GPIO_DeInit+0x188>)
 8009b34:	4293      	cmp	r3, r2
 8009b36:	d00d      	beq.n	8009b54 <HAL_GPIO_DeInit+0x84>
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	4a48      	ldr	r2, [pc, #288]	; (8009c5c <HAL_GPIO_DeInit+0x18c>)
 8009b3c:	4293      	cmp	r3, r2
 8009b3e:	d007      	beq.n	8009b50 <HAL_GPIO_DeInit+0x80>
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	4a47      	ldr	r2, [pc, #284]	; (8009c60 <HAL_GPIO_DeInit+0x190>)
 8009b44:	4293      	cmp	r3, r2
 8009b46:	d101      	bne.n	8009b4c <HAL_GPIO_DeInit+0x7c>
 8009b48:	2305      	movs	r3, #5
 8009b4a:	e00a      	b.n	8009b62 <HAL_GPIO_DeInit+0x92>
 8009b4c:	2306      	movs	r3, #6
 8009b4e:	e008      	b.n	8009b62 <HAL_GPIO_DeInit+0x92>
 8009b50:	2304      	movs	r3, #4
 8009b52:	e006      	b.n	8009b62 <HAL_GPIO_DeInit+0x92>
 8009b54:	2303      	movs	r3, #3
 8009b56:	e004      	b.n	8009b62 <HAL_GPIO_DeInit+0x92>
 8009b58:	2302      	movs	r3, #2
 8009b5a:	e002      	b.n	8009b62 <HAL_GPIO_DeInit+0x92>
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	e000      	b.n	8009b62 <HAL_GPIO_DeInit+0x92>
 8009b60:	2300      	movs	r3, #0
 8009b62:	69fa      	ldr	r2, [r7, #28]
 8009b64:	f002 0203 	and.w	r2, r2, #3
 8009b68:	0092      	lsls	r2, r2, #2
 8009b6a:	4093      	lsls	r3, r2
 8009b6c:	697a      	ldr	r2, [r7, #20]
 8009b6e:	429a      	cmp	r2, r3
 8009b70:	d132      	bne.n	8009bd8 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8009b72:	4b3c      	ldr	r3, [pc, #240]	; (8009c64 <HAL_GPIO_DeInit+0x194>)
 8009b74:	681a      	ldr	r2, [r3, #0]
 8009b76:	69bb      	ldr	r3, [r7, #24]
 8009b78:	43db      	mvns	r3, r3
 8009b7a:	493a      	ldr	r1, [pc, #232]	; (8009c64 <HAL_GPIO_DeInit+0x194>)
 8009b7c:	4013      	ands	r3, r2
 8009b7e:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8009b80:	4b38      	ldr	r3, [pc, #224]	; (8009c64 <HAL_GPIO_DeInit+0x194>)
 8009b82:	685a      	ldr	r2, [r3, #4]
 8009b84:	69bb      	ldr	r3, [r7, #24]
 8009b86:	43db      	mvns	r3, r3
 8009b88:	4936      	ldr	r1, [pc, #216]	; (8009c64 <HAL_GPIO_DeInit+0x194>)
 8009b8a:	4013      	ands	r3, r2
 8009b8c:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8009b8e:	4b35      	ldr	r3, [pc, #212]	; (8009c64 <HAL_GPIO_DeInit+0x194>)
 8009b90:	68da      	ldr	r2, [r3, #12]
 8009b92:	69bb      	ldr	r3, [r7, #24]
 8009b94:	43db      	mvns	r3, r3
 8009b96:	4933      	ldr	r1, [pc, #204]	; (8009c64 <HAL_GPIO_DeInit+0x194>)
 8009b98:	4013      	ands	r3, r2
 8009b9a:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8009b9c:	4b31      	ldr	r3, [pc, #196]	; (8009c64 <HAL_GPIO_DeInit+0x194>)
 8009b9e:	689a      	ldr	r2, [r3, #8]
 8009ba0:	69bb      	ldr	r3, [r7, #24]
 8009ba2:	43db      	mvns	r3, r3
 8009ba4:	492f      	ldr	r1, [pc, #188]	; (8009c64 <HAL_GPIO_DeInit+0x194>)
 8009ba6:	4013      	ands	r3, r2
 8009ba8:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8009baa:	69fb      	ldr	r3, [r7, #28]
 8009bac:	f003 0303 	and.w	r3, r3, #3
 8009bb0:	009b      	lsls	r3, r3, #2
 8009bb2:	220f      	movs	r2, #15
 8009bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8009bb8:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8009bba:	4a23      	ldr	r2, [pc, #140]	; (8009c48 <HAL_GPIO_DeInit+0x178>)
 8009bbc:	69fb      	ldr	r3, [r7, #28]
 8009bbe:	089b      	lsrs	r3, r3, #2
 8009bc0:	3302      	adds	r3, #2
 8009bc2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	43da      	mvns	r2, r3
 8009bca:	481f      	ldr	r0, [pc, #124]	; (8009c48 <HAL_GPIO_DeInit+0x178>)
 8009bcc:	69fb      	ldr	r3, [r7, #28]
 8009bce:	089b      	lsrs	r3, r3, #2
 8009bd0:	400a      	ands	r2, r1
 8009bd2:	3302      	adds	r3, #2
 8009bd4:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009bd8:	69bb      	ldr	r3, [r7, #24]
 8009bda:	2bff      	cmp	r3, #255	; 0xff
 8009bdc:	d801      	bhi.n	8009be2 <HAL_GPIO_DeInit+0x112>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	e001      	b.n	8009be6 <HAL_GPIO_DeInit+0x116>
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	3304      	adds	r3, #4
 8009be6:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009be8:	69bb      	ldr	r3, [r7, #24]
 8009bea:	2bff      	cmp	r3, #255	; 0xff
 8009bec:	d802      	bhi.n	8009bf4 <HAL_GPIO_DeInit+0x124>
 8009bee:	69fb      	ldr	r3, [r7, #28]
 8009bf0:	009b      	lsls	r3, r3, #2
 8009bf2:	e002      	b.n	8009bfa <HAL_GPIO_DeInit+0x12a>
 8009bf4:	69fb      	ldr	r3, [r7, #28]
 8009bf6:	3b08      	subs	r3, #8
 8009bf8:	009b      	lsls	r3, r3, #2
 8009bfa:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8009bfc:	693b      	ldr	r3, [r7, #16]
 8009bfe:	681a      	ldr	r2, [r3, #0]
 8009c00:	210f      	movs	r1, #15
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	fa01 f303 	lsl.w	r3, r1, r3
 8009c08:	43db      	mvns	r3, r3
 8009c0a:	401a      	ands	r2, r3
 8009c0c:	2104      	movs	r1, #4
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	fa01 f303 	lsl.w	r3, r1, r3
 8009c14:	431a      	orrs	r2, r3
 8009c16:	693b      	ldr	r3, [r7, #16]
 8009c18:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	68da      	ldr	r2, [r3, #12]
 8009c1e:	69bb      	ldr	r3, [r7, #24]
 8009c20:	43db      	mvns	r3, r3
 8009c22:	401a      	ands	r2, r3
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	60da      	str	r2, [r3, #12]
    }

    position++;
 8009c28:	69fb      	ldr	r3, [r7, #28]
 8009c2a:	3301      	adds	r3, #1
 8009c2c:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8009c2e:	683a      	ldr	r2, [r7, #0]
 8009c30:	69fb      	ldr	r3, [r7, #28]
 8009c32:	fa22 f303 	lsr.w	r3, r2, r3
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	f47f af52 	bne.w	8009ae0 <HAL_GPIO_DeInit+0x10>
  }
}
 8009c3c:	bf00      	nop
 8009c3e:	bf00      	nop
 8009c40:	3724      	adds	r7, #36	; 0x24
 8009c42:	46bd      	mov	sp, r7
 8009c44:	bc80      	pop	{r7}
 8009c46:	4770      	bx	lr
 8009c48:	40010000 	.word	0x40010000
 8009c4c:	40010800 	.word	0x40010800
 8009c50:	40010c00 	.word	0x40010c00
 8009c54:	40011000 	.word	0x40011000
 8009c58:	40011400 	.word	0x40011400
 8009c5c:	40011800 	.word	0x40011800
 8009c60:	40011c00 	.word	0x40011c00
 8009c64:	40010400 	.word	0x40010400

08009c68 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009c68:	b480      	push	{r7}
 8009c6a:	b085      	sub	sp, #20
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
 8009c70:	460b      	mov	r3, r1
 8009c72:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	689a      	ldr	r2, [r3, #8]
 8009c78:	887b      	ldrh	r3, [r7, #2]
 8009c7a:	4013      	ands	r3, r2
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d002      	beq.n	8009c86 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009c80:	2301      	movs	r3, #1
 8009c82:	73fb      	strb	r3, [r7, #15]
 8009c84:	e001      	b.n	8009c8a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009c86:	2300      	movs	r3, #0
 8009c88:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009c8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009c8c:	4618      	mov	r0, r3
 8009c8e:	3714      	adds	r7, #20
 8009c90:	46bd      	mov	sp, r7
 8009c92:	bc80      	pop	{r7}
 8009c94:	4770      	bx	lr

08009c96 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009c96:	b480      	push	{r7}
 8009c98:	b083      	sub	sp, #12
 8009c9a:	af00      	add	r7, sp, #0
 8009c9c:	6078      	str	r0, [r7, #4]
 8009c9e:	460b      	mov	r3, r1
 8009ca0:	807b      	strh	r3, [r7, #2]
 8009ca2:	4613      	mov	r3, r2
 8009ca4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009ca6:	787b      	ldrb	r3, [r7, #1]
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d003      	beq.n	8009cb4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009cac:	887a      	ldrh	r2, [r7, #2]
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8009cb2:	e003      	b.n	8009cbc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009cb4:	887b      	ldrh	r3, [r7, #2]
 8009cb6:	041a      	lsls	r2, r3, #16
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	611a      	str	r2, [r3, #16]
}
 8009cbc:	bf00      	nop
 8009cbe:	370c      	adds	r7, #12
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	bc80      	pop	{r7}
 8009cc4:	4770      	bx	lr

08009cc6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009cc6:	b480      	push	{r7}
 8009cc8:	b085      	sub	sp, #20
 8009cca:	af00      	add	r7, sp, #0
 8009ccc:	6078      	str	r0, [r7, #4]
 8009cce:	460b      	mov	r3, r1
 8009cd0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	68db      	ldr	r3, [r3, #12]
 8009cd6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009cd8:	887a      	ldrh	r2, [r7, #2]
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	4013      	ands	r3, r2
 8009cde:	041a      	lsls	r2, r3, #16
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	43d9      	mvns	r1, r3
 8009ce4:	887b      	ldrh	r3, [r7, #2]
 8009ce6:	400b      	ands	r3, r1
 8009ce8:	431a      	orrs	r2, r3
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	611a      	str	r2, [r3, #16]
}
 8009cee:	bf00      	nop
 8009cf0:	3714      	adds	r7, #20
 8009cf2:	46bd      	mov	sp, r7
 8009cf4:	bc80      	pop	{r7}
 8009cf6:	4770      	bx	lr

08009cf8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b084      	sub	sp, #16
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2b00      	cmp	r3, #0
 8009d04:	d101      	bne.n	8009d0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009d06:	2301      	movs	r3, #1
 8009d08:	e12b      	b.n	8009f62 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d10:	b2db      	uxtb	r3, r3
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d106      	bne.n	8009d24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009d1e:	6878      	ldr	r0, [r7, #4]
 8009d20:	f7fe fff8 	bl	8008d14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	2224      	movs	r2, #36	; 0x24
 8009d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	681a      	ldr	r2, [r3, #0]
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	681b      	ldr	r3, [r3, #0]
 8009d36:	f022 0201 	bic.w	r2, r2, #1
 8009d3a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	681a      	ldr	r2, [r3, #0]
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009d4a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	681a      	ldr	r2, [r3, #0]
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009d5a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009d5c:	f001 fdb8 	bl	800b8d0 <HAL_RCC_GetPCLK1Freq>
 8009d60:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	685b      	ldr	r3, [r3, #4]
 8009d66:	4a81      	ldr	r2, [pc, #516]	; (8009f6c <HAL_I2C_Init+0x274>)
 8009d68:	4293      	cmp	r3, r2
 8009d6a:	d807      	bhi.n	8009d7c <HAL_I2C_Init+0x84>
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	4a80      	ldr	r2, [pc, #512]	; (8009f70 <HAL_I2C_Init+0x278>)
 8009d70:	4293      	cmp	r3, r2
 8009d72:	bf94      	ite	ls
 8009d74:	2301      	movls	r3, #1
 8009d76:	2300      	movhi	r3, #0
 8009d78:	b2db      	uxtb	r3, r3
 8009d7a:	e006      	b.n	8009d8a <HAL_I2C_Init+0x92>
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	4a7d      	ldr	r2, [pc, #500]	; (8009f74 <HAL_I2C_Init+0x27c>)
 8009d80:	4293      	cmp	r3, r2
 8009d82:	bf94      	ite	ls
 8009d84:	2301      	movls	r3, #1
 8009d86:	2300      	movhi	r3, #0
 8009d88:	b2db      	uxtb	r3, r3
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	d001      	beq.n	8009d92 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009d8e:	2301      	movs	r3, #1
 8009d90:	e0e7      	b.n	8009f62 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	4a78      	ldr	r2, [pc, #480]	; (8009f78 <HAL_I2C_Init+0x280>)
 8009d96:	fba2 2303 	umull	r2, r3, r2, r3
 8009d9a:	0c9b      	lsrs	r3, r3, #18
 8009d9c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	685b      	ldr	r3, [r3, #4]
 8009da4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	68ba      	ldr	r2, [r7, #8]
 8009dae:	430a      	orrs	r2, r1
 8009db0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	6a1b      	ldr	r3, [r3, #32]
 8009db8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	685b      	ldr	r3, [r3, #4]
 8009dc0:	4a6a      	ldr	r2, [pc, #424]	; (8009f6c <HAL_I2C_Init+0x274>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d802      	bhi.n	8009dcc <HAL_I2C_Init+0xd4>
 8009dc6:	68bb      	ldr	r3, [r7, #8]
 8009dc8:	3301      	adds	r3, #1
 8009dca:	e009      	b.n	8009de0 <HAL_I2C_Init+0xe8>
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009dd2:	fb02 f303 	mul.w	r3, r2, r3
 8009dd6:	4a69      	ldr	r2, [pc, #420]	; (8009f7c <HAL_I2C_Init+0x284>)
 8009dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8009ddc:	099b      	lsrs	r3, r3, #6
 8009dde:	3301      	adds	r3, #1
 8009de0:	687a      	ldr	r2, [r7, #4]
 8009de2:	6812      	ldr	r2, [r2, #0]
 8009de4:	430b      	orrs	r3, r1
 8009de6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	69db      	ldr	r3, [r3, #28]
 8009dee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009df2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	685b      	ldr	r3, [r3, #4]
 8009dfa:	495c      	ldr	r1, [pc, #368]	; (8009f6c <HAL_I2C_Init+0x274>)
 8009dfc:	428b      	cmp	r3, r1
 8009dfe:	d819      	bhi.n	8009e34 <HAL_I2C_Init+0x13c>
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	1e59      	subs	r1, r3, #1
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	685b      	ldr	r3, [r3, #4]
 8009e08:	005b      	lsls	r3, r3, #1
 8009e0a:	fbb1 f3f3 	udiv	r3, r1, r3
 8009e0e:	1c59      	adds	r1, r3, #1
 8009e10:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009e14:	400b      	ands	r3, r1
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d00a      	beq.n	8009e30 <HAL_I2C_Init+0x138>
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	1e59      	subs	r1, r3, #1
 8009e1e:	687b      	ldr	r3, [r7, #4]
 8009e20:	685b      	ldr	r3, [r3, #4]
 8009e22:	005b      	lsls	r3, r3, #1
 8009e24:	fbb1 f3f3 	udiv	r3, r1, r3
 8009e28:	3301      	adds	r3, #1
 8009e2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e2e:	e051      	b.n	8009ed4 <HAL_I2C_Init+0x1dc>
 8009e30:	2304      	movs	r3, #4
 8009e32:	e04f      	b.n	8009ed4 <HAL_I2C_Init+0x1dc>
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	689b      	ldr	r3, [r3, #8]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d111      	bne.n	8009e60 <HAL_I2C_Init+0x168>
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	1e58      	subs	r0, r3, #1
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6859      	ldr	r1, [r3, #4]
 8009e44:	460b      	mov	r3, r1
 8009e46:	005b      	lsls	r3, r3, #1
 8009e48:	440b      	add	r3, r1
 8009e4a:	fbb0 f3f3 	udiv	r3, r0, r3
 8009e4e:	3301      	adds	r3, #1
 8009e50:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	bf0c      	ite	eq
 8009e58:	2301      	moveq	r3, #1
 8009e5a:	2300      	movne	r3, #0
 8009e5c:	b2db      	uxtb	r3, r3
 8009e5e:	e012      	b.n	8009e86 <HAL_I2C_Init+0x18e>
 8009e60:	68fb      	ldr	r3, [r7, #12]
 8009e62:	1e58      	subs	r0, r3, #1
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	6859      	ldr	r1, [r3, #4]
 8009e68:	460b      	mov	r3, r1
 8009e6a:	009b      	lsls	r3, r3, #2
 8009e6c:	440b      	add	r3, r1
 8009e6e:	0099      	lsls	r1, r3, #2
 8009e70:	440b      	add	r3, r1
 8009e72:	fbb0 f3f3 	udiv	r3, r0, r3
 8009e76:	3301      	adds	r3, #1
 8009e78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	bf0c      	ite	eq
 8009e80:	2301      	moveq	r3, #1
 8009e82:	2300      	movne	r3, #0
 8009e84:	b2db      	uxtb	r3, r3
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d001      	beq.n	8009e8e <HAL_I2C_Init+0x196>
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	e022      	b.n	8009ed4 <HAL_I2C_Init+0x1dc>
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	689b      	ldr	r3, [r3, #8]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d10e      	bne.n	8009eb4 <HAL_I2C_Init+0x1bc>
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	1e58      	subs	r0, r3, #1
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6859      	ldr	r1, [r3, #4]
 8009e9e:	460b      	mov	r3, r1
 8009ea0:	005b      	lsls	r3, r3, #1
 8009ea2:	440b      	add	r3, r1
 8009ea4:	fbb0 f3f3 	udiv	r3, r0, r3
 8009ea8:	3301      	adds	r3, #1
 8009eaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009eae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009eb2:	e00f      	b.n	8009ed4 <HAL_I2C_Init+0x1dc>
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	1e58      	subs	r0, r3, #1
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	6859      	ldr	r1, [r3, #4]
 8009ebc:	460b      	mov	r3, r1
 8009ebe:	009b      	lsls	r3, r3, #2
 8009ec0:	440b      	add	r3, r1
 8009ec2:	0099      	lsls	r1, r3, #2
 8009ec4:	440b      	add	r3, r1
 8009ec6:	fbb0 f3f3 	udiv	r3, r0, r3
 8009eca:	3301      	adds	r3, #1
 8009ecc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009ed0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009ed4:	6879      	ldr	r1, [r7, #4]
 8009ed6:	6809      	ldr	r1, [r1, #0]
 8009ed8:	4313      	orrs	r3, r2
 8009eda:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	69da      	ldr	r2, [r3, #28]
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	6a1b      	ldr	r3, [r3, #32]
 8009eee:	431a      	orrs	r2, r3
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	681b      	ldr	r3, [r3, #0]
 8009ef4:	430a      	orrs	r2, r1
 8009ef6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	689b      	ldr	r3, [r3, #8]
 8009efe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009f02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009f06:	687a      	ldr	r2, [r7, #4]
 8009f08:	6911      	ldr	r1, [r2, #16]
 8009f0a:	687a      	ldr	r2, [r7, #4]
 8009f0c:	68d2      	ldr	r2, [r2, #12]
 8009f0e:	4311      	orrs	r1, r2
 8009f10:	687a      	ldr	r2, [r7, #4]
 8009f12:	6812      	ldr	r2, [r2, #0]
 8009f14:	430b      	orrs	r3, r1
 8009f16:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	68db      	ldr	r3, [r3, #12]
 8009f1e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	695a      	ldr	r2, [r3, #20]
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	699b      	ldr	r3, [r3, #24]
 8009f2a:	431a      	orrs	r2, r3
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	430a      	orrs	r2, r1
 8009f32:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	681a      	ldr	r2, [r3, #0]
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	f042 0201 	orr.w	r2, r2, #1
 8009f42:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2200      	movs	r2, #0
 8009f48:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2220      	movs	r2, #32
 8009f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2200      	movs	r2, #0
 8009f56:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2200      	movs	r2, #0
 8009f5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009f60:	2300      	movs	r3, #0
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3710      	adds	r7, #16
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}
 8009f6a:	bf00      	nop
 8009f6c:	000186a0 	.word	0x000186a0
 8009f70:	001e847f 	.word	0x001e847f
 8009f74:	003d08ff 	.word	0x003d08ff
 8009f78:	431bde83 	.word	0x431bde83
 8009f7c:	10624dd3 	.word	0x10624dd3

08009f80 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b082      	sub	sp, #8
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d101      	bne.n	8009f92 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009f8e:	2301      	movs	r3, #1
 8009f90:	e021      	b.n	8009fd6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2224      	movs	r2, #36	; 0x24
 8009f96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	681a      	ldr	r2, [r3, #0]
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	f022 0201 	bic.w	r2, r2, #1
 8009fa8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	f7fe fef0 	bl	8008d90 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	2200      	movs	r2, #0
 8009fb4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	2200      	movs	r2, #0
 8009fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2200      	movs	r2, #0
 8009fc2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2200      	movs	r2, #0
 8009fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009fd4:	2300      	movs	r3, #0
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3708      	adds	r7, #8
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}
	...

08009fe0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009fe0:	b580      	push	{r7, lr}
 8009fe2:	b088      	sub	sp, #32
 8009fe4:	af02      	add	r7, sp, #8
 8009fe6:	60f8      	str	r0, [r7, #12]
 8009fe8:	607a      	str	r2, [r7, #4]
 8009fea:	461a      	mov	r2, r3
 8009fec:	460b      	mov	r3, r1
 8009fee:	817b      	strh	r3, [r7, #10]
 8009ff0:	4613      	mov	r3, r2
 8009ff2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009ff4:	f7ff f85e 	bl	80090b4 <HAL_GetTick>
 8009ff8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a000:	b2db      	uxtb	r3, r3
 800a002:	2b20      	cmp	r3, #32
 800a004:	f040 80e0 	bne.w	800a1c8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a008:	697b      	ldr	r3, [r7, #20]
 800a00a:	9300      	str	r3, [sp, #0]
 800a00c:	2319      	movs	r3, #25
 800a00e:	2201      	movs	r2, #1
 800a010:	4970      	ldr	r1, [pc, #448]	; (800a1d4 <HAL_I2C_Master_Transmit+0x1f4>)
 800a012:	68f8      	ldr	r0, [r7, #12]
 800a014:	f000 fe5c 	bl	800acd0 <I2C_WaitOnFlagUntilTimeout>
 800a018:	4603      	mov	r3, r0
 800a01a:	2b00      	cmp	r3, #0
 800a01c:	d001      	beq.n	800a022 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800a01e:	2302      	movs	r3, #2
 800a020:	e0d3      	b.n	800a1ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a028:	2b01      	cmp	r3, #1
 800a02a:	d101      	bne.n	800a030 <HAL_I2C_Master_Transmit+0x50>
 800a02c:	2302      	movs	r3, #2
 800a02e:	e0cc      	b.n	800a1ca <HAL_I2C_Master_Transmit+0x1ea>
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	2201      	movs	r2, #1
 800a034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	f003 0301 	and.w	r3, r3, #1
 800a042:	2b01      	cmp	r3, #1
 800a044:	d007      	beq.n	800a056 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	681a      	ldr	r2, [r3, #0]
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	681b      	ldr	r3, [r3, #0]
 800a050:	f042 0201 	orr.w	r2, r2, #1
 800a054:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	681a      	ldr	r2, [r3, #0]
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a064:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	2221      	movs	r2, #33	; 0x21
 800a06a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	2210      	movs	r2, #16
 800a072:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	2200      	movs	r2, #0
 800a07a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	687a      	ldr	r2, [r7, #4]
 800a080:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	893a      	ldrh	r2, [r7, #8]
 800a086:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a08c:	b29a      	uxth	r2, r3
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	4a50      	ldr	r2, [pc, #320]	; (800a1d8 <HAL_I2C_Master_Transmit+0x1f8>)
 800a096:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a098:	8979      	ldrh	r1, [r7, #10]
 800a09a:	697b      	ldr	r3, [r7, #20]
 800a09c:	6a3a      	ldr	r2, [r7, #32]
 800a09e:	68f8      	ldr	r0, [r7, #12]
 800a0a0:	f000 fc16 	bl	800a8d0 <I2C_MasterRequestWrite>
 800a0a4:	4603      	mov	r3, r0
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d001      	beq.n	800a0ae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	e08d      	b.n	800a1ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	613b      	str	r3, [r7, #16]
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	695b      	ldr	r3, [r3, #20]
 800a0b8:	613b      	str	r3, [r7, #16]
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	681b      	ldr	r3, [r3, #0]
 800a0be:	699b      	ldr	r3, [r3, #24]
 800a0c0:	613b      	str	r3, [r7, #16]
 800a0c2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800a0c4:	e066      	b.n	800a194 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a0c6:	697a      	ldr	r2, [r7, #20]
 800a0c8:	6a39      	ldr	r1, [r7, #32]
 800a0ca:	68f8      	ldr	r0, [r7, #12]
 800a0cc:	f000 ff1a 	bl	800af04 <I2C_WaitOnTXEFlagUntilTimeout>
 800a0d0:	4603      	mov	r3, r0
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d00d      	beq.n	800a0f2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0da:	2b04      	cmp	r3, #4
 800a0dc:	d107      	bne.n	800a0ee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	681a      	ldr	r2, [r3, #0]
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a0ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a0ee:	2301      	movs	r3, #1
 800a0f0:	e06b      	b.n	800a1ca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0f6:	781a      	ldrb	r2, [r3, #0]
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a102:	1c5a      	adds	r2, r3, #1
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a10c:	b29b      	uxth	r3, r3
 800a10e:	3b01      	subs	r3, #1
 800a110:	b29a      	uxth	r2, r3
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a11a:	3b01      	subs	r3, #1
 800a11c:	b29a      	uxth	r2, r3
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	695b      	ldr	r3, [r3, #20]
 800a128:	f003 0304 	and.w	r3, r3, #4
 800a12c:	2b04      	cmp	r3, #4
 800a12e:	d11b      	bne.n	800a168 <HAL_I2C_Master_Transmit+0x188>
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a134:	2b00      	cmp	r3, #0
 800a136:	d017      	beq.n	800a168 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a13c:	781a      	ldrb	r2, [r3, #0]
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a148:	1c5a      	adds	r2, r3, #1
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a152:	b29b      	uxth	r3, r3
 800a154:	3b01      	subs	r3, #1
 800a156:	b29a      	uxth	r2, r3
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a160:	3b01      	subs	r3, #1
 800a162:	b29a      	uxth	r2, r3
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a168:	697a      	ldr	r2, [r7, #20]
 800a16a:	6a39      	ldr	r1, [r7, #32]
 800a16c:	68f8      	ldr	r0, [r7, #12]
 800a16e:	f000 ff11 	bl	800af94 <I2C_WaitOnBTFFlagUntilTimeout>
 800a172:	4603      	mov	r3, r0
 800a174:	2b00      	cmp	r3, #0
 800a176:	d00d      	beq.n	800a194 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a17c:	2b04      	cmp	r3, #4
 800a17e:	d107      	bne.n	800a190 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	681a      	ldr	r2, [r3, #0]
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a18e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a190:	2301      	movs	r3, #1
 800a192:	e01a      	b.n	800a1ca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d194      	bne.n	800a0c6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	681a      	ldr	r2, [r3, #0]
 800a1a2:	68fb      	ldr	r3, [r7, #12]
 800a1a4:	681b      	ldr	r3, [r3, #0]
 800a1a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	2220      	movs	r2, #32
 800a1b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	2200      	movs	r2, #0
 800a1c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	e000      	b.n	800a1ca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a1c8:	2302      	movs	r3, #2
  }
}
 800a1ca:	4618      	mov	r0, r3
 800a1cc:	3718      	adds	r7, #24
 800a1ce:	46bd      	mov	sp, r7
 800a1d0:	bd80      	pop	{r7, pc}
 800a1d2:	bf00      	nop
 800a1d4:	00100002 	.word	0x00100002
 800a1d8:	ffff0000 	.word	0xffff0000

0800a1dc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b088      	sub	sp, #32
 800a1e0:	af02      	add	r7, sp, #8
 800a1e2:	60f8      	str	r0, [r7, #12]
 800a1e4:	4608      	mov	r0, r1
 800a1e6:	4611      	mov	r1, r2
 800a1e8:	461a      	mov	r2, r3
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	817b      	strh	r3, [r7, #10]
 800a1ee:	460b      	mov	r3, r1
 800a1f0:	813b      	strh	r3, [r7, #8]
 800a1f2:	4613      	mov	r3, r2
 800a1f4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a1f6:	f7fe ff5d 	bl	80090b4 <HAL_GetTick>
 800a1fa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a202:	b2db      	uxtb	r3, r3
 800a204:	2b20      	cmp	r3, #32
 800a206:	f040 80d9 	bne.w	800a3bc <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	9300      	str	r3, [sp, #0]
 800a20e:	2319      	movs	r3, #25
 800a210:	2201      	movs	r2, #1
 800a212:	496d      	ldr	r1, [pc, #436]	; (800a3c8 <HAL_I2C_Mem_Write+0x1ec>)
 800a214:	68f8      	ldr	r0, [r7, #12]
 800a216:	f000 fd5b 	bl	800acd0 <I2C_WaitOnFlagUntilTimeout>
 800a21a:	4603      	mov	r3, r0
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d001      	beq.n	800a224 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800a220:	2302      	movs	r3, #2
 800a222:	e0cc      	b.n	800a3be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a22a:	2b01      	cmp	r3, #1
 800a22c:	d101      	bne.n	800a232 <HAL_I2C_Mem_Write+0x56>
 800a22e:	2302      	movs	r3, #2
 800a230:	e0c5      	b.n	800a3be <HAL_I2C_Mem_Write+0x1e2>
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	2201      	movs	r2, #1
 800a236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	f003 0301 	and.w	r3, r3, #1
 800a244:	2b01      	cmp	r3, #1
 800a246:	d007      	beq.n	800a258 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	681a      	ldr	r2, [r3, #0]
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	f042 0201 	orr.w	r2, r2, #1
 800a256:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	681a      	ldr	r2, [r3, #0]
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a266:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	2221      	movs	r2, #33	; 0x21
 800a26c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	2240      	movs	r2, #64	; 0x40
 800a274:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	2200      	movs	r2, #0
 800a27c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	6a3a      	ldr	r2, [r7, #32]
 800a282:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a288:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a28e:	b29a      	uxth	r2, r3
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	4a4d      	ldr	r2, [pc, #308]	; (800a3cc <HAL_I2C_Mem_Write+0x1f0>)
 800a298:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a29a:	88f8      	ldrh	r0, [r7, #6]
 800a29c:	893a      	ldrh	r2, [r7, #8]
 800a29e:	8979      	ldrh	r1, [r7, #10]
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	9301      	str	r3, [sp, #4]
 800a2a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2a6:	9300      	str	r3, [sp, #0]
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	68f8      	ldr	r0, [r7, #12]
 800a2ac:	f000 fb92 	bl	800a9d4 <I2C_RequestMemoryWrite>
 800a2b0:	4603      	mov	r3, r0
 800a2b2:	2b00      	cmp	r3, #0
 800a2b4:	d052      	beq.n	800a35c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800a2b6:	2301      	movs	r3, #1
 800a2b8:	e081      	b.n	800a3be <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a2ba:	697a      	ldr	r2, [r7, #20]
 800a2bc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a2be:	68f8      	ldr	r0, [r7, #12]
 800a2c0:	f000 fe20 	bl	800af04 <I2C_WaitOnTXEFlagUntilTimeout>
 800a2c4:	4603      	mov	r3, r0
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d00d      	beq.n	800a2e6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2ce:	2b04      	cmp	r3, #4
 800a2d0:	d107      	bne.n	800a2e2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	681a      	ldr	r2, [r3, #0]
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a2e0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a2e2:	2301      	movs	r3, #1
 800a2e4:	e06b      	b.n	800a3be <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2ea:	781a      	ldrb	r2, [r3, #0]
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2f6:	1c5a      	adds	r2, r3, #1
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a300:	3b01      	subs	r3, #1
 800a302:	b29a      	uxth	r2, r3
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a308:	68fb      	ldr	r3, [r7, #12]
 800a30a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a30c:	b29b      	uxth	r3, r3
 800a30e:	3b01      	subs	r3, #1
 800a310:	b29a      	uxth	r2, r3
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	695b      	ldr	r3, [r3, #20]
 800a31c:	f003 0304 	and.w	r3, r3, #4
 800a320:	2b04      	cmp	r3, #4
 800a322:	d11b      	bne.n	800a35c <HAL_I2C_Mem_Write+0x180>
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d017      	beq.n	800a35c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a330:	781a      	ldrb	r2, [r3, #0]
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a33c:	1c5a      	adds	r2, r3, #1
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a346:	3b01      	subs	r3, #1
 800a348:	b29a      	uxth	r2, r3
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a352:	b29b      	uxth	r3, r3
 800a354:	3b01      	subs	r3, #1
 800a356:	b29a      	uxth	r2, r3
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a360:	2b00      	cmp	r3, #0
 800a362:	d1aa      	bne.n	800a2ba <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a364:	697a      	ldr	r2, [r7, #20]
 800a366:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a368:	68f8      	ldr	r0, [r7, #12]
 800a36a:	f000 fe13 	bl	800af94 <I2C_WaitOnBTFFlagUntilTimeout>
 800a36e:	4603      	mov	r3, r0
 800a370:	2b00      	cmp	r3, #0
 800a372:	d00d      	beq.n	800a390 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a378:	2b04      	cmp	r3, #4
 800a37a:	d107      	bne.n	800a38c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	681a      	ldr	r2, [r3, #0]
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a38a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a38c:	2301      	movs	r3, #1
 800a38e:	e016      	b.n	800a3be <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	681a      	ldr	r2, [r3, #0]
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a39e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	2220      	movs	r2, #32
 800a3a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a3b0:	68fb      	ldr	r3, [r7, #12]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	e000      	b.n	800a3be <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800a3bc:	2302      	movs	r3, #2
  }
}
 800a3be:	4618      	mov	r0, r3
 800a3c0:	3718      	adds	r7, #24
 800a3c2:	46bd      	mov	sp, r7
 800a3c4:	bd80      	pop	{r7, pc}
 800a3c6:	bf00      	nop
 800a3c8:	00100002 	.word	0x00100002
 800a3cc:	ffff0000 	.word	0xffff0000

0800a3d0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b08c      	sub	sp, #48	; 0x30
 800a3d4:	af02      	add	r7, sp, #8
 800a3d6:	60f8      	str	r0, [r7, #12]
 800a3d8:	4608      	mov	r0, r1
 800a3da:	4611      	mov	r1, r2
 800a3dc:	461a      	mov	r2, r3
 800a3de:	4603      	mov	r3, r0
 800a3e0:	817b      	strh	r3, [r7, #10]
 800a3e2:	460b      	mov	r3, r1
 800a3e4:	813b      	strh	r3, [r7, #8]
 800a3e6:	4613      	mov	r3, r2
 800a3e8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a3ee:	f7fe fe61 	bl	80090b4 <HAL_GetTick>
 800a3f2:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3fa:	b2db      	uxtb	r3, r3
 800a3fc:	2b20      	cmp	r3, #32
 800a3fe:	f040 8244 	bne.w	800a88a <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a404:	9300      	str	r3, [sp, #0]
 800a406:	2319      	movs	r3, #25
 800a408:	2201      	movs	r2, #1
 800a40a:	4982      	ldr	r1, [pc, #520]	; (800a614 <HAL_I2C_Mem_Read+0x244>)
 800a40c:	68f8      	ldr	r0, [r7, #12]
 800a40e:	f000 fc5f 	bl	800acd0 <I2C_WaitOnFlagUntilTimeout>
 800a412:	4603      	mov	r3, r0
 800a414:	2b00      	cmp	r3, #0
 800a416:	d001      	beq.n	800a41c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800a418:	2302      	movs	r3, #2
 800a41a:	e237      	b.n	800a88c <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a422:	2b01      	cmp	r3, #1
 800a424:	d101      	bne.n	800a42a <HAL_I2C_Mem_Read+0x5a>
 800a426:	2302      	movs	r3, #2
 800a428:	e230      	b.n	800a88c <HAL_I2C_Mem_Read+0x4bc>
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	2201      	movs	r2, #1
 800a42e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	f003 0301 	and.w	r3, r3, #1
 800a43c:	2b01      	cmp	r3, #1
 800a43e:	d007      	beq.n	800a450 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	681a      	ldr	r2, [r3, #0]
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f042 0201 	orr.w	r2, r2, #1
 800a44e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	681a      	ldr	r2, [r3, #0]
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a45e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	2222      	movs	r2, #34	; 0x22
 800a464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2240      	movs	r2, #64	; 0x40
 800a46c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a470:	68fb      	ldr	r3, [r7, #12]
 800a472:	2200      	movs	r2, #0
 800a474:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a47a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800a480:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a486:	b29a      	uxth	r2, r3
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	4a62      	ldr	r2, [pc, #392]	; (800a618 <HAL_I2C_Mem_Read+0x248>)
 800a490:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a492:	88f8      	ldrh	r0, [r7, #6]
 800a494:	893a      	ldrh	r2, [r7, #8]
 800a496:	8979      	ldrh	r1, [r7, #10]
 800a498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a49a:	9301      	str	r3, [sp, #4]
 800a49c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a49e:	9300      	str	r3, [sp, #0]
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	68f8      	ldr	r0, [r7, #12]
 800a4a4:	f000 fb2c 	bl	800ab00 <I2C_RequestMemoryRead>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d001      	beq.n	800a4b2 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800a4ae:	2301      	movs	r3, #1
 800a4b0:	e1ec      	b.n	800a88c <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4b6:	2b00      	cmp	r3, #0
 800a4b8:	d113      	bne.n	800a4e2 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	61fb      	str	r3, [r7, #28]
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	695b      	ldr	r3, [r3, #20]
 800a4c4:	61fb      	str	r3, [r7, #28]
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	699b      	ldr	r3, [r3, #24]
 800a4cc:	61fb      	str	r3, [r7, #28]
 800a4ce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	681a      	ldr	r2, [r3, #0]
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a4de:	601a      	str	r2, [r3, #0]
 800a4e0:	e1c0      	b.n	800a864 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4e6:	2b01      	cmp	r3, #1
 800a4e8:	d11e      	bne.n	800a528 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a4ea:	68fb      	ldr	r3, [r7, #12]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	681a      	ldr	r2, [r3, #0]
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a4f8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a4fa:	b672      	cpsid	i
}
 800a4fc:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a4fe:	2300      	movs	r3, #0
 800a500:	61bb      	str	r3, [r7, #24]
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	695b      	ldr	r3, [r3, #20]
 800a508:	61bb      	str	r3, [r7, #24]
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	699b      	ldr	r3, [r3, #24]
 800a510:	61bb      	str	r3, [r7, #24]
 800a512:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	681a      	ldr	r2, [r3, #0]
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a522:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a524:	b662      	cpsie	i
}
 800a526:	e035      	b.n	800a594 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a52c:	2b02      	cmp	r3, #2
 800a52e:	d11e      	bne.n	800a56e <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	681a      	ldr	r2, [r3, #0]
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a53e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a540:	b672      	cpsid	i
}
 800a542:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a544:	2300      	movs	r3, #0
 800a546:	617b      	str	r3, [r7, #20]
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	695b      	ldr	r3, [r3, #20]
 800a54e:	617b      	str	r3, [r7, #20]
 800a550:	68fb      	ldr	r3, [r7, #12]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	699b      	ldr	r3, [r3, #24]
 800a556:	617b      	str	r3, [r7, #20]
 800a558:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	681a      	ldr	r2, [r3, #0]
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a568:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a56a:	b662      	cpsie	i
}
 800a56c:	e012      	b.n	800a594 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	681a      	ldr	r2, [r3, #0]
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a57c:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a57e:	2300      	movs	r3, #0
 800a580:	613b      	str	r3, [r7, #16]
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	695b      	ldr	r3, [r3, #20]
 800a588:	613b      	str	r3, [r7, #16]
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	699b      	ldr	r3, [r3, #24]
 800a590:	613b      	str	r3, [r7, #16]
 800a592:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800a594:	e166      	b.n	800a864 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a59a:	2b03      	cmp	r3, #3
 800a59c:	f200 811f 	bhi.w	800a7de <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5a4:	2b01      	cmp	r3, #1
 800a5a6:	d123      	bne.n	800a5f0 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a5a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a5aa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a5ac:	68f8      	ldr	r0, [r7, #12]
 800a5ae:	f000 fd39 	bl	800b024 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a5b2:	4603      	mov	r3, r0
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d001      	beq.n	800a5bc <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800a5b8:	2301      	movs	r3, #1
 800a5ba:	e167      	b.n	800a88c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	691a      	ldr	r2, [r3, #16]
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5c6:	b2d2      	uxtb	r2, r2
 800a5c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ce:	1c5a      	adds	r2, r3, #1
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5d8:	3b01      	subs	r3, #1
 800a5da:	b29a      	uxth	r2, r3
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5e4:	b29b      	uxth	r3, r3
 800a5e6:	3b01      	subs	r3, #1
 800a5e8:	b29a      	uxth	r2, r3
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a5ee:	e139      	b.n	800a864 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5f4:	2b02      	cmp	r3, #2
 800a5f6:	d152      	bne.n	800a69e <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a5f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5fa:	9300      	str	r3, [sp, #0]
 800a5fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5fe:	2200      	movs	r2, #0
 800a600:	4906      	ldr	r1, [pc, #24]	; (800a61c <HAL_I2C_Mem_Read+0x24c>)
 800a602:	68f8      	ldr	r0, [r7, #12]
 800a604:	f000 fb64 	bl	800acd0 <I2C_WaitOnFlagUntilTimeout>
 800a608:	4603      	mov	r3, r0
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d008      	beq.n	800a620 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800a60e:	2301      	movs	r3, #1
 800a610:	e13c      	b.n	800a88c <HAL_I2C_Mem_Read+0x4bc>
 800a612:	bf00      	nop
 800a614:	00100002 	.word	0x00100002
 800a618:	ffff0000 	.word	0xffff0000
 800a61c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800a620:	b672      	cpsid	i
}
 800a622:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	681a      	ldr	r2, [r3, #0]
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a632:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	691a      	ldr	r2, [r3, #16]
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a63e:	b2d2      	uxtb	r2, r2
 800a640:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a646:	1c5a      	adds	r2, r3, #1
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a650:	3b01      	subs	r3, #1
 800a652:	b29a      	uxth	r2, r3
 800a654:	68fb      	ldr	r3, [r7, #12]
 800a656:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a65c:	b29b      	uxth	r3, r3
 800a65e:	3b01      	subs	r3, #1
 800a660:	b29a      	uxth	r2, r3
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a666:	b662      	cpsie	i
}
 800a668:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	691a      	ldr	r2, [r3, #16]
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a674:	b2d2      	uxtb	r2, r2
 800a676:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a67c:	1c5a      	adds	r2, r3, #1
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a686:	3b01      	subs	r3, #1
 800a688:	b29a      	uxth	r2, r3
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a692:	b29b      	uxth	r3, r3
 800a694:	3b01      	subs	r3, #1
 800a696:	b29a      	uxth	r2, r3
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a69c:	e0e2      	b.n	800a864 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a0:	9300      	str	r3, [sp, #0]
 800a6a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	497b      	ldr	r1, [pc, #492]	; (800a894 <HAL_I2C_Mem_Read+0x4c4>)
 800a6a8:	68f8      	ldr	r0, [r7, #12]
 800a6aa:	f000 fb11 	bl	800acd0 <I2C_WaitOnFlagUntilTimeout>
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d001      	beq.n	800a6b8 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800a6b4:	2301      	movs	r3, #1
 800a6b6:	e0e9      	b.n	800a88c <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	681a      	ldr	r2, [r3, #0]
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a6c6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a6c8:	b672      	cpsid	i
}
 800a6ca:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	691a      	ldr	r2, [r3, #16]
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6d6:	b2d2      	uxtb	r2, r2
 800a6d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6de:	1c5a      	adds	r2, r3, #1
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6e8:	3b01      	subs	r3, #1
 800a6ea:	b29a      	uxth	r2, r3
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6f4:	b29b      	uxth	r3, r3
 800a6f6:	3b01      	subs	r3, #1
 800a6f8:	b29a      	uxth	r2, r3
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800a6fe:	4b66      	ldr	r3, [pc, #408]	; (800a898 <HAL_I2C_Mem_Read+0x4c8>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	08db      	lsrs	r3, r3, #3
 800a704:	4a65      	ldr	r2, [pc, #404]	; (800a89c <HAL_I2C_Mem_Read+0x4cc>)
 800a706:	fba2 2303 	umull	r2, r3, r2, r3
 800a70a:	0a1a      	lsrs	r2, r3, #8
 800a70c:	4613      	mov	r3, r2
 800a70e:	009b      	lsls	r3, r3, #2
 800a710:	4413      	add	r3, r2
 800a712:	00da      	lsls	r2, r3, #3
 800a714:	1ad3      	subs	r3, r2, r3
 800a716:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800a718:	6a3b      	ldr	r3, [r7, #32]
 800a71a:	3b01      	subs	r3, #1
 800a71c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800a71e:	6a3b      	ldr	r3, [r7, #32]
 800a720:	2b00      	cmp	r3, #0
 800a722:	d118      	bne.n	800a756 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	2200      	movs	r2, #0
 800a728:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	2220      	movs	r2, #32
 800a72e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2200      	movs	r2, #0
 800a736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a73e:	f043 0220 	orr.w	r2, r3, #32
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800a746:	b662      	cpsie	i
}
 800a748:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	2200      	movs	r2, #0
 800a74e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800a752:	2301      	movs	r3, #1
 800a754:	e09a      	b.n	800a88c <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	695b      	ldr	r3, [r3, #20]
 800a75c:	f003 0304 	and.w	r3, r3, #4
 800a760:	2b04      	cmp	r3, #4
 800a762:	d1d9      	bne.n	800a718 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a764:	68fb      	ldr	r3, [r7, #12]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	681a      	ldr	r2, [r3, #0]
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a772:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	691a      	ldr	r2, [r3, #16]
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a77e:	b2d2      	uxtb	r2, r2
 800a780:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a786:	1c5a      	adds	r2, r3, #1
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a790:	3b01      	subs	r3, #1
 800a792:	b29a      	uxth	r2, r3
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a79c:	b29b      	uxth	r3, r3
 800a79e:	3b01      	subs	r3, #1
 800a7a0:	b29a      	uxth	r2, r3
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a7a6:	b662      	cpsie	i
}
 800a7a8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	691a      	ldr	r2, [r3, #16]
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7b4:	b2d2      	uxtb	r2, r2
 800a7b6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7bc:	1c5a      	adds	r2, r3, #1
 800a7be:	68fb      	ldr	r3, [r7, #12]
 800a7c0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a7c6:	3b01      	subs	r3, #1
 800a7c8:	b29a      	uxth	r2, r3
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7d2:	b29b      	uxth	r3, r3
 800a7d4:	3b01      	subs	r3, #1
 800a7d6:	b29a      	uxth	r2, r3
 800a7d8:	68fb      	ldr	r3, [r7, #12]
 800a7da:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a7dc:	e042      	b.n	800a864 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a7de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7e0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a7e2:	68f8      	ldr	r0, [r7, #12]
 800a7e4:	f000 fc1e 	bl	800b024 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d001      	beq.n	800a7f2 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	e04c      	b.n	800a88c <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	691a      	ldr	r2, [r3, #16]
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7fc:	b2d2      	uxtb	r2, r2
 800a7fe:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a804:	1c5a      	adds	r2, r3, #1
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a80e:	3b01      	subs	r3, #1
 800a810:	b29a      	uxth	r2, r3
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a81a:	b29b      	uxth	r3, r3
 800a81c:	3b01      	subs	r3, #1
 800a81e:	b29a      	uxth	r2, r3
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	695b      	ldr	r3, [r3, #20]
 800a82a:	f003 0304 	and.w	r3, r3, #4
 800a82e:	2b04      	cmp	r3, #4
 800a830:	d118      	bne.n	800a864 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	691a      	ldr	r2, [r3, #16]
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a83c:	b2d2      	uxtb	r2, r2
 800a83e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a844:	1c5a      	adds	r2, r3, #1
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a84e:	3b01      	subs	r3, #1
 800a850:	b29a      	uxth	r2, r3
 800a852:	68fb      	ldr	r3, [r7, #12]
 800a854:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a85a:	b29b      	uxth	r3, r3
 800a85c:	3b01      	subs	r3, #1
 800a85e:	b29a      	uxth	r2, r3
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a868:	2b00      	cmp	r3, #0
 800a86a:	f47f ae94 	bne.w	800a596 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	2220      	movs	r2, #32
 800a872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	2200      	movs	r2, #0
 800a87a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	2200      	movs	r2, #0
 800a882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a886:	2300      	movs	r3, #0
 800a888:	e000      	b.n	800a88c <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800a88a:	2302      	movs	r3, #2
  }
}
 800a88c:	4618      	mov	r0, r3
 800a88e:	3728      	adds	r7, #40	; 0x28
 800a890:	46bd      	mov	sp, r7
 800a892:	bd80      	pop	{r7, pc}
 800a894:	00010004 	.word	0x00010004
 800a898:	200009c4 	.word	0x200009c4
 800a89c:	14f8b589 	.word	0x14f8b589

0800a8a0 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a8a0:	b480      	push	{r7}
 800a8a2:	b083      	sub	sp, #12
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a8ae:	b2db      	uxtb	r3, r3
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	370c      	adds	r7, #12
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bc80      	pop	{r7}
 800a8b8:	4770      	bx	lr

0800a8ba <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800a8ba:	b480      	push	{r7}
 800a8bc:	b083      	sub	sp, #12
 800a8be:	af00      	add	r7, sp, #0
 800a8c0:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	370c      	adds	r7, #12
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bc80      	pop	{r7}
 800a8ce:	4770      	bx	lr

0800a8d0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b088      	sub	sp, #32
 800a8d4:	af02      	add	r7, sp, #8
 800a8d6:	60f8      	str	r0, [r7, #12]
 800a8d8:	607a      	str	r2, [r7, #4]
 800a8da:	603b      	str	r3, [r7, #0]
 800a8dc:	460b      	mov	r3, r1
 800a8de:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a8e4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a8e6:	697b      	ldr	r3, [r7, #20]
 800a8e8:	2b08      	cmp	r3, #8
 800a8ea:	d006      	beq.n	800a8fa <I2C_MasterRequestWrite+0x2a>
 800a8ec:	697b      	ldr	r3, [r7, #20]
 800a8ee:	2b01      	cmp	r3, #1
 800a8f0:	d003      	beq.n	800a8fa <I2C_MasterRequestWrite+0x2a>
 800a8f2:	697b      	ldr	r3, [r7, #20]
 800a8f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a8f8:	d108      	bne.n	800a90c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	681a      	ldr	r2, [r3, #0]
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a908:	601a      	str	r2, [r3, #0]
 800a90a:	e00b      	b.n	800a924 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a910:	2b12      	cmp	r3, #18
 800a912:	d107      	bne.n	800a924 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	681a      	ldr	r2, [r3, #0]
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a922:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a924:	683b      	ldr	r3, [r7, #0]
 800a926:	9300      	str	r3, [sp, #0]
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	2200      	movs	r2, #0
 800a92c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a930:	68f8      	ldr	r0, [r7, #12]
 800a932:	f000 f9cd 	bl	800acd0 <I2C_WaitOnFlagUntilTimeout>
 800a936:	4603      	mov	r3, r0
 800a938:	2b00      	cmp	r3, #0
 800a93a:	d00d      	beq.n	800a958 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a946:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a94a:	d103      	bne.n	800a954 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a952:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a954:	2303      	movs	r3, #3
 800a956:	e035      	b.n	800a9c4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	691b      	ldr	r3, [r3, #16]
 800a95c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a960:	d108      	bne.n	800a974 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a962:	897b      	ldrh	r3, [r7, #10]
 800a964:	b2db      	uxtb	r3, r3
 800a966:	461a      	mov	r2, r3
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a970:	611a      	str	r2, [r3, #16]
 800a972:	e01b      	b.n	800a9ac <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a974:	897b      	ldrh	r3, [r7, #10]
 800a976:	11db      	asrs	r3, r3, #7
 800a978:	b2db      	uxtb	r3, r3
 800a97a:	f003 0306 	and.w	r3, r3, #6
 800a97e:	b2db      	uxtb	r3, r3
 800a980:	f063 030f 	orn	r3, r3, #15
 800a984:	b2da      	uxtb	r2, r3
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	687a      	ldr	r2, [r7, #4]
 800a990:	490e      	ldr	r1, [pc, #56]	; (800a9cc <I2C_MasterRequestWrite+0xfc>)
 800a992:	68f8      	ldr	r0, [r7, #12]
 800a994:	f000 fa16 	bl	800adc4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a998:	4603      	mov	r3, r0
 800a99a:	2b00      	cmp	r3, #0
 800a99c:	d001      	beq.n	800a9a2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a99e:	2301      	movs	r3, #1
 800a9a0:	e010      	b.n	800a9c4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a9a2:	897b      	ldrh	r3, [r7, #10]
 800a9a4:	b2da      	uxtb	r2, r3
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	687a      	ldr	r2, [r7, #4]
 800a9b0:	4907      	ldr	r1, [pc, #28]	; (800a9d0 <I2C_MasterRequestWrite+0x100>)
 800a9b2:	68f8      	ldr	r0, [r7, #12]
 800a9b4:	f000 fa06 	bl	800adc4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a9b8:	4603      	mov	r3, r0
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d001      	beq.n	800a9c2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a9be:	2301      	movs	r3, #1
 800a9c0:	e000      	b.n	800a9c4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a9c2:	2300      	movs	r3, #0
}
 800a9c4:	4618      	mov	r0, r3
 800a9c6:	3718      	adds	r7, #24
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	bd80      	pop	{r7, pc}
 800a9cc:	00010008 	.word	0x00010008
 800a9d0:	00010002 	.word	0x00010002

0800a9d4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a9d4:	b580      	push	{r7, lr}
 800a9d6:	b088      	sub	sp, #32
 800a9d8:	af02      	add	r7, sp, #8
 800a9da:	60f8      	str	r0, [r7, #12]
 800a9dc:	4608      	mov	r0, r1
 800a9de:	4611      	mov	r1, r2
 800a9e0:	461a      	mov	r2, r3
 800a9e2:	4603      	mov	r3, r0
 800a9e4:	817b      	strh	r3, [r7, #10]
 800a9e6:	460b      	mov	r3, r1
 800a9e8:	813b      	strh	r3, [r7, #8]
 800a9ea:	4613      	mov	r3, r2
 800a9ec:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	681a      	ldr	r2, [r3, #0]
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	681b      	ldr	r3, [r3, #0]
 800a9f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a9fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa00:	9300      	str	r3, [sp, #0]
 800aa02:	6a3b      	ldr	r3, [r7, #32]
 800aa04:	2200      	movs	r2, #0
 800aa06:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800aa0a:	68f8      	ldr	r0, [r7, #12]
 800aa0c:	f000 f960 	bl	800acd0 <I2C_WaitOnFlagUntilTimeout>
 800aa10:	4603      	mov	r3, r0
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d00d      	beq.n	800aa32 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	681b      	ldr	r3, [r3, #0]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aa20:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aa24:	d103      	bne.n	800aa2e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa2c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800aa2e:	2303      	movs	r3, #3
 800aa30:	e05f      	b.n	800aaf2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800aa32:	897b      	ldrh	r3, [r7, #10]
 800aa34:	b2db      	uxtb	r3, r3
 800aa36:	461a      	mov	r2, r3
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800aa40:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800aa42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa44:	6a3a      	ldr	r2, [r7, #32]
 800aa46:	492d      	ldr	r1, [pc, #180]	; (800aafc <I2C_RequestMemoryWrite+0x128>)
 800aa48:	68f8      	ldr	r0, [r7, #12]
 800aa4a:	f000 f9bb 	bl	800adc4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800aa4e:	4603      	mov	r3, r0
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d001      	beq.n	800aa58 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800aa54:	2301      	movs	r3, #1
 800aa56:	e04c      	b.n	800aaf2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aa58:	2300      	movs	r3, #0
 800aa5a:	617b      	str	r3, [r7, #20]
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	695b      	ldr	r3, [r3, #20]
 800aa62:	617b      	str	r3, [r7, #20]
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	699b      	ldr	r3, [r3, #24]
 800aa6a:	617b      	str	r3, [r7, #20]
 800aa6c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aa6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa70:	6a39      	ldr	r1, [r7, #32]
 800aa72:	68f8      	ldr	r0, [r7, #12]
 800aa74:	f000 fa46 	bl	800af04 <I2C_WaitOnTXEFlagUntilTimeout>
 800aa78:	4603      	mov	r3, r0
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d00d      	beq.n	800aa9a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa82:	2b04      	cmp	r3, #4
 800aa84:	d107      	bne.n	800aa96 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	681a      	ldr	r2, [r3, #0]
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa94:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800aa96:	2301      	movs	r3, #1
 800aa98:	e02b      	b.n	800aaf2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800aa9a:	88fb      	ldrh	r3, [r7, #6]
 800aa9c:	2b01      	cmp	r3, #1
 800aa9e:	d105      	bne.n	800aaac <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800aaa0:	893b      	ldrh	r3, [r7, #8]
 800aaa2:	b2da      	uxtb	r2, r3
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	611a      	str	r2, [r3, #16]
 800aaaa:	e021      	b.n	800aaf0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800aaac:	893b      	ldrh	r3, [r7, #8]
 800aaae:	0a1b      	lsrs	r3, r3, #8
 800aab0:	b29b      	uxth	r3, r3
 800aab2:	b2da      	uxtb	r2, r3
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aaba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aabc:	6a39      	ldr	r1, [r7, #32]
 800aabe:	68f8      	ldr	r0, [r7, #12]
 800aac0:	f000 fa20 	bl	800af04 <I2C_WaitOnTXEFlagUntilTimeout>
 800aac4:	4603      	mov	r3, r0
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d00d      	beq.n	800aae6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aace:	2b04      	cmp	r3, #4
 800aad0:	d107      	bne.n	800aae2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	681b      	ldr	r3, [r3, #0]
 800aad6:	681a      	ldr	r2, [r3, #0]
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aae0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800aae2:	2301      	movs	r3, #1
 800aae4:	e005      	b.n	800aaf2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800aae6:	893b      	ldrh	r3, [r7, #8]
 800aae8:	b2da      	uxtb	r2, r3
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800aaf0:	2300      	movs	r3, #0
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	3718      	adds	r7, #24
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}
 800aafa:	bf00      	nop
 800aafc:	00010002 	.word	0x00010002

0800ab00 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800ab00:	b580      	push	{r7, lr}
 800ab02:	b088      	sub	sp, #32
 800ab04:	af02      	add	r7, sp, #8
 800ab06:	60f8      	str	r0, [r7, #12]
 800ab08:	4608      	mov	r0, r1
 800ab0a:	4611      	mov	r1, r2
 800ab0c:	461a      	mov	r2, r3
 800ab0e:	4603      	mov	r3, r0
 800ab10:	817b      	strh	r3, [r7, #10]
 800ab12:	460b      	mov	r3, r1
 800ab14:	813b      	strh	r3, [r7, #8]
 800ab16:	4613      	mov	r3, r2
 800ab18:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ab1a:	68fb      	ldr	r3, [r7, #12]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	681a      	ldr	r2, [r3, #0]
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ab28:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	681a      	ldr	r2, [r3, #0]
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ab38:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ab3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab3c:	9300      	str	r3, [sp, #0]
 800ab3e:	6a3b      	ldr	r3, [r7, #32]
 800ab40:	2200      	movs	r2, #0
 800ab42:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ab46:	68f8      	ldr	r0, [r7, #12]
 800ab48:	f000 f8c2 	bl	800acd0 <I2C_WaitOnFlagUntilTimeout>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d00d      	beq.n	800ab6e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab5c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ab60:	d103      	bne.n	800ab6a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ab68:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ab6a:	2303      	movs	r3, #3
 800ab6c:	e0aa      	b.n	800acc4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ab6e:	897b      	ldrh	r3, [r7, #10]
 800ab70:	b2db      	uxtb	r3, r3
 800ab72:	461a      	mov	r2, r3
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800ab7c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ab7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab80:	6a3a      	ldr	r2, [r7, #32]
 800ab82:	4952      	ldr	r1, [pc, #328]	; (800accc <I2C_RequestMemoryRead+0x1cc>)
 800ab84:	68f8      	ldr	r0, [r7, #12]
 800ab86:	f000 f91d 	bl	800adc4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ab8a:	4603      	mov	r3, r0
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d001      	beq.n	800ab94 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800ab90:	2301      	movs	r3, #1
 800ab92:	e097      	b.n	800acc4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ab94:	2300      	movs	r3, #0
 800ab96:	617b      	str	r3, [r7, #20]
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	695b      	ldr	r3, [r3, #20]
 800ab9e:	617b      	str	r3, [r7, #20]
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	699b      	ldr	r3, [r3, #24]
 800aba6:	617b      	str	r3, [r7, #20]
 800aba8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800abaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abac:	6a39      	ldr	r1, [r7, #32]
 800abae:	68f8      	ldr	r0, [r7, #12]
 800abb0:	f000 f9a8 	bl	800af04 <I2C_WaitOnTXEFlagUntilTimeout>
 800abb4:	4603      	mov	r3, r0
 800abb6:	2b00      	cmp	r3, #0
 800abb8:	d00d      	beq.n	800abd6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abbe:	2b04      	cmp	r3, #4
 800abc0:	d107      	bne.n	800abd2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	681a      	ldr	r2, [r3, #0]
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800abd0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800abd2:	2301      	movs	r3, #1
 800abd4:	e076      	b.n	800acc4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800abd6:	88fb      	ldrh	r3, [r7, #6]
 800abd8:	2b01      	cmp	r3, #1
 800abda:	d105      	bne.n	800abe8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800abdc:	893b      	ldrh	r3, [r7, #8]
 800abde:	b2da      	uxtb	r2, r3
 800abe0:	68fb      	ldr	r3, [r7, #12]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	611a      	str	r2, [r3, #16]
 800abe6:	e021      	b.n	800ac2c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800abe8:	893b      	ldrh	r3, [r7, #8]
 800abea:	0a1b      	lsrs	r3, r3, #8
 800abec:	b29b      	uxth	r3, r3
 800abee:	b2da      	uxtb	r2, r3
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800abf6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800abf8:	6a39      	ldr	r1, [r7, #32]
 800abfa:	68f8      	ldr	r0, [r7, #12]
 800abfc:	f000 f982 	bl	800af04 <I2C_WaitOnTXEFlagUntilTimeout>
 800ac00:	4603      	mov	r3, r0
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d00d      	beq.n	800ac22 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac0a:	2b04      	cmp	r3, #4
 800ac0c:	d107      	bne.n	800ac1e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	681a      	ldr	r2, [r3, #0]
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	681b      	ldr	r3, [r3, #0]
 800ac18:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ac1c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800ac1e:	2301      	movs	r3, #1
 800ac20:	e050      	b.n	800acc4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ac22:	893b      	ldrh	r3, [r7, #8]
 800ac24:	b2da      	uxtb	r2, r3
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ac2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ac2e:	6a39      	ldr	r1, [r7, #32]
 800ac30:	68f8      	ldr	r0, [r7, #12]
 800ac32:	f000 f967 	bl	800af04 <I2C_WaitOnTXEFlagUntilTimeout>
 800ac36:	4603      	mov	r3, r0
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d00d      	beq.n	800ac58 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac40:	2b04      	cmp	r3, #4
 800ac42:	d107      	bne.n	800ac54 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	681a      	ldr	r2, [r3, #0]
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ac52:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ac54:	2301      	movs	r3, #1
 800ac56:	e035      	b.n	800acc4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	681a      	ldr	r2, [r3, #0]
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ac66:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800ac68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac6a:	9300      	str	r3, [sp, #0]
 800ac6c:	6a3b      	ldr	r3, [r7, #32]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ac74:	68f8      	ldr	r0, [r7, #12]
 800ac76:	f000 f82b 	bl	800acd0 <I2C_WaitOnFlagUntilTimeout>
 800ac7a:	4603      	mov	r3, r0
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d00d      	beq.n	800ac9c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	681b      	ldr	r3, [r3, #0]
 800ac86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ac8e:	d103      	bne.n	800ac98 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ac96:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ac98:	2303      	movs	r3, #3
 800ac9a:	e013      	b.n	800acc4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800ac9c:	897b      	ldrh	r3, [r7, #10]
 800ac9e:	b2db      	uxtb	r3, r3
 800aca0:	f043 0301 	orr.w	r3, r3, #1
 800aca4:	b2da      	uxtb	r2, r3
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800acac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acae:	6a3a      	ldr	r2, [r7, #32]
 800acb0:	4906      	ldr	r1, [pc, #24]	; (800accc <I2C_RequestMemoryRead+0x1cc>)
 800acb2:	68f8      	ldr	r0, [r7, #12]
 800acb4:	f000 f886 	bl	800adc4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800acb8:	4603      	mov	r3, r0
 800acba:	2b00      	cmp	r3, #0
 800acbc:	d001      	beq.n	800acc2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800acbe:	2301      	movs	r3, #1
 800acc0:	e000      	b.n	800acc4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800acc2:	2300      	movs	r3, #0
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	3718      	adds	r7, #24
 800acc8:	46bd      	mov	sp, r7
 800acca:	bd80      	pop	{r7, pc}
 800accc:	00010002 	.word	0x00010002

0800acd0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b084      	sub	sp, #16
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	60f8      	str	r0, [r7, #12]
 800acd8:	60b9      	str	r1, [r7, #8]
 800acda:	603b      	str	r3, [r7, #0]
 800acdc:	4613      	mov	r3, r2
 800acde:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ace0:	e048      	b.n	800ad74 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ace2:	683b      	ldr	r3, [r7, #0]
 800ace4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ace8:	d044      	beq.n	800ad74 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800acea:	f7fe f9e3 	bl	80090b4 <HAL_GetTick>
 800acee:	4602      	mov	r2, r0
 800acf0:	69bb      	ldr	r3, [r7, #24]
 800acf2:	1ad3      	subs	r3, r2, r3
 800acf4:	683a      	ldr	r2, [r7, #0]
 800acf6:	429a      	cmp	r2, r3
 800acf8:	d302      	bcc.n	800ad00 <I2C_WaitOnFlagUntilTimeout+0x30>
 800acfa:	683b      	ldr	r3, [r7, #0]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d139      	bne.n	800ad74 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	0c1b      	lsrs	r3, r3, #16
 800ad04:	b2db      	uxtb	r3, r3
 800ad06:	2b01      	cmp	r3, #1
 800ad08:	d10d      	bne.n	800ad26 <I2C_WaitOnFlagUntilTimeout+0x56>
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	695b      	ldr	r3, [r3, #20]
 800ad10:	43da      	mvns	r2, r3
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	4013      	ands	r3, r2
 800ad16:	b29b      	uxth	r3, r3
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	bf0c      	ite	eq
 800ad1c:	2301      	moveq	r3, #1
 800ad1e:	2300      	movne	r3, #0
 800ad20:	b2db      	uxtb	r3, r3
 800ad22:	461a      	mov	r2, r3
 800ad24:	e00c      	b.n	800ad40 <I2C_WaitOnFlagUntilTimeout+0x70>
 800ad26:	68fb      	ldr	r3, [r7, #12]
 800ad28:	681b      	ldr	r3, [r3, #0]
 800ad2a:	699b      	ldr	r3, [r3, #24]
 800ad2c:	43da      	mvns	r2, r3
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	4013      	ands	r3, r2
 800ad32:	b29b      	uxth	r3, r3
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	bf0c      	ite	eq
 800ad38:	2301      	moveq	r3, #1
 800ad3a:	2300      	movne	r3, #0
 800ad3c:	b2db      	uxtb	r3, r3
 800ad3e:	461a      	mov	r2, r3
 800ad40:	79fb      	ldrb	r3, [r7, #7]
 800ad42:	429a      	cmp	r2, r3
 800ad44:	d116      	bne.n	800ad74 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	2200      	movs	r2, #0
 800ad4a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	2220      	movs	r2, #32
 800ad50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	2200      	movs	r2, #0
 800ad58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad60:	f043 0220 	orr.w	r2, r3, #32
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800ad70:	2301      	movs	r3, #1
 800ad72:	e023      	b.n	800adbc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ad74:	68bb      	ldr	r3, [r7, #8]
 800ad76:	0c1b      	lsrs	r3, r3, #16
 800ad78:	b2db      	uxtb	r3, r3
 800ad7a:	2b01      	cmp	r3, #1
 800ad7c:	d10d      	bne.n	800ad9a <I2C_WaitOnFlagUntilTimeout+0xca>
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	695b      	ldr	r3, [r3, #20]
 800ad84:	43da      	mvns	r2, r3
 800ad86:	68bb      	ldr	r3, [r7, #8]
 800ad88:	4013      	ands	r3, r2
 800ad8a:	b29b      	uxth	r3, r3
 800ad8c:	2b00      	cmp	r3, #0
 800ad8e:	bf0c      	ite	eq
 800ad90:	2301      	moveq	r3, #1
 800ad92:	2300      	movne	r3, #0
 800ad94:	b2db      	uxtb	r3, r3
 800ad96:	461a      	mov	r2, r3
 800ad98:	e00c      	b.n	800adb4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	699b      	ldr	r3, [r3, #24]
 800ada0:	43da      	mvns	r2, r3
 800ada2:	68bb      	ldr	r3, [r7, #8]
 800ada4:	4013      	ands	r3, r2
 800ada6:	b29b      	uxth	r3, r3
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	bf0c      	ite	eq
 800adac:	2301      	moveq	r3, #1
 800adae:	2300      	movne	r3, #0
 800adb0:	b2db      	uxtb	r3, r3
 800adb2:	461a      	mov	r2, r3
 800adb4:	79fb      	ldrb	r3, [r7, #7]
 800adb6:	429a      	cmp	r2, r3
 800adb8:	d093      	beq.n	800ace2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800adba:	2300      	movs	r3, #0
}
 800adbc:	4618      	mov	r0, r3
 800adbe:	3710      	adds	r7, #16
 800adc0:	46bd      	mov	sp, r7
 800adc2:	bd80      	pop	{r7, pc}

0800adc4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b084      	sub	sp, #16
 800adc8:	af00      	add	r7, sp, #0
 800adca:	60f8      	str	r0, [r7, #12]
 800adcc:	60b9      	str	r1, [r7, #8]
 800adce:	607a      	str	r2, [r7, #4]
 800add0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800add2:	e071      	b.n	800aeb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	695b      	ldr	r3, [r3, #20]
 800adda:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800adde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ade2:	d123      	bne.n	800ae2c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	681a      	ldr	r2, [r3, #0]
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800adf2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800adfc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	2200      	movs	r2, #0
 800ae02:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	2220      	movs	r2, #32
 800ae08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ae0c:	68fb      	ldr	r3, [r7, #12]
 800ae0e:	2200      	movs	r2, #0
 800ae10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae18:	f043 0204 	orr.w	r2, r3, #4
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ae20:	68fb      	ldr	r3, [r7, #12]
 800ae22:	2200      	movs	r2, #0
 800ae24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ae28:	2301      	movs	r3, #1
 800ae2a:	e067      	b.n	800aefc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae32:	d041      	beq.n	800aeb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae34:	f7fe f93e 	bl	80090b4 <HAL_GetTick>
 800ae38:	4602      	mov	r2, r0
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	1ad3      	subs	r3, r2, r3
 800ae3e:	687a      	ldr	r2, [r7, #4]
 800ae40:	429a      	cmp	r2, r3
 800ae42:	d302      	bcc.n	800ae4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d136      	bne.n	800aeb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800ae4a:	68bb      	ldr	r3, [r7, #8]
 800ae4c:	0c1b      	lsrs	r3, r3, #16
 800ae4e:	b2db      	uxtb	r3, r3
 800ae50:	2b01      	cmp	r3, #1
 800ae52:	d10c      	bne.n	800ae6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	695b      	ldr	r3, [r3, #20]
 800ae5a:	43da      	mvns	r2, r3
 800ae5c:	68bb      	ldr	r3, [r7, #8]
 800ae5e:	4013      	ands	r3, r2
 800ae60:	b29b      	uxth	r3, r3
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	bf14      	ite	ne
 800ae66:	2301      	movne	r3, #1
 800ae68:	2300      	moveq	r3, #0
 800ae6a:	b2db      	uxtb	r3, r3
 800ae6c:	e00b      	b.n	800ae86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800ae6e:	68fb      	ldr	r3, [r7, #12]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	699b      	ldr	r3, [r3, #24]
 800ae74:	43da      	mvns	r2, r3
 800ae76:	68bb      	ldr	r3, [r7, #8]
 800ae78:	4013      	ands	r3, r2
 800ae7a:	b29b      	uxth	r3, r3
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	bf14      	ite	ne
 800ae80:	2301      	movne	r3, #1
 800ae82:	2300      	moveq	r3, #0
 800ae84:	b2db      	uxtb	r3, r3
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	d016      	beq.n	800aeb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	2200      	movs	r2, #0
 800ae8e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	2220      	movs	r2, #32
 800ae94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aea4:	f043 0220 	orr.w	r2, r3, #32
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	2200      	movs	r2, #0
 800aeb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800aeb4:	2301      	movs	r3, #1
 800aeb6:	e021      	b.n	800aefc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800aeb8:	68bb      	ldr	r3, [r7, #8]
 800aeba:	0c1b      	lsrs	r3, r3, #16
 800aebc:	b2db      	uxtb	r3, r3
 800aebe:	2b01      	cmp	r3, #1
 800aec0:	d10c      	bne.n	800aedc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	695b      	ldr	r3, [r3, #20]
 800aec8:	43da      	mvns	r2, r3
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	4013      	ands	r3, r2
 800aece:	b29b      	uxth	r3, r3
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	bf14      	ite	ne
 800aed4:	2301      	movne	r3, #1
 800aed6:	2300      	moveq	r3, #0
 800aed8:	b2db      	uxtb	r3, r3
 800aeda:	e00b      	b.n	800aef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	699b      	ldr	r3, [r3, #24]
 800aee2:	43da      	mvns	r2, r3
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	4013      	ands	r3, r2
 800aee8:	b29b      	uxth	r3, r3
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	bf14      	ite	ne
 800aeee:	2301      	movne	r3, #1
 800aef0:	2300      	moveq	r3, #0
 800aef2:	b2db      	uxtb	r3, r3
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	f47f af6d 	bne.w	800add4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800aefa:	2300      	movs	r3, #0
}
 800aefc:	4618      	mov	r0, r3
 800aefe:	3710      	adds	r7, #16
 800af00:	46bd      	mov	sp, r7
 800af02:	bd80      	pop	{r7, pc}

0800af04 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	b084      	sub	sp, #16
 800af08:	af00      	add	r7, sp, #0
 800af0a:	60f8      	str	r0, [r7, #12]
 800af0c:	60b9      	str	r1, [r7, #8]
 800af0e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800af10:	e034      	b.n	800af7c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800af12:	68f8      	ldr	r0, [r7, #12]
 800af14:	f000 f8e3 	bl	800b0de <I2C_IsAcknowledgeFailed>
 800af18:	4603      	mov	r3, r0
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d001      	beq.n	800af22 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800af1e:	2301      	movs	r3, #1
 800af20:	e034      	b.n	800af8c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af28:	d028      	beq.n	800af7c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800af2a:	f7fe f8c3 	bl	80090b4 <HAL_GetTick>
 800af2e:	4602      	mov	r2, r0
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	1ad3      	subs	r3, r2, r3
 800af34:	68ba      	ldr	r2, [r7, #8]
 800af36:	429a      	cmp	r2, r3
 800af38:	d302      	bcc.n	800af40 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800af3a:	68bb      	ldr	r3, [r7, #8]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	d11d      	bne.n	800af7c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800af40:	68fb      	ldr	r3, [r7, #12]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	695b      	ldr	r3, [r3, #20]
 800af46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af4a:	2b80      	cmp	r3, #128	; 0x80
 800af4c:	d016      	beq.n	800af7c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	2200      	movs	r2, #0
 800af52:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	2220      	movs	r2, #32
 800af58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	2200      	movs	r2, #0
 800af60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800af64:	68fb      	ldr	r3, [r7, #12]
 800af66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af68:	f043 0220 	orr.w	r2, r3, #32
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	2200      	movs	r2, #0
 800af74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800af78:	2301      	movs	r3, #1
 800af7a:	e007      	b.n	800af8c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	695b      	ldr	r3, [r3, #20]
 800af82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af86:	2b80      	cmp	r3, #128	; 0x80
 800af88:	d1c3      	bne.n	800af12 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800af8a:	2300      	movs	r3, #0
}
 800af8c:	4618      	mov	r0, r3
 800af8e:	3710      	adds	r7, #16
 800af90:	46bd      	mov	sp, r7
 800af92:	bd80      	pop	{r7, pc}

0800af94 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b084      	sub	sp, #16
 800af98:	af00      	add	r7, sp, #0
 800af9a:	60f8      	str	r0, [r7, #12]
 800af9c:	60b9      	str	r1, [r7, #8]
 800af9e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800afa0:	e034      	b.n	800b00c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800afa2:	68f8      	ldr	r0, [r7, #12]
 800afa4:	f000 f89b 	bl	800b0de <I2C_IsAcknowledgeFailed>
 800afa8:	4603      	mov	r3, r0
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d001      	beq.n	800afb2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800afae:	2301      	movs	r3, #1
 800afb0:	e034      	b.n	800b01c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800afb2:	68bb      	ldr	r3, [r7, #8]
 800afb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afb8:	d028      	beq.n	800b00c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800afba:	f7fe f87b 	bl	80090b4 <HAL_GetTick>
 800afbe:	4602      	mov	r2, r0
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	1ad3      	subs	r3, r2, r3
 800afc4:	68ba      	ldr	r2, [r7, #8]
 800afc6:	429a      	cmp	r2, r3
 800afc8:	d302      	bcc.n	800afd0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800afca:	68bb      	ldr	r3, [r7, #8]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d11d      	bne.n	800b00c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	695b      	ldr	r3, [r3, #20]
 800afd6:	f003 0304 	and.w	r3, r3, #4
 800afda:	2b04      	cmp	r3, #4
 800afdc:	d016      	beq.n	800b00c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	2200      	movs	r2, #0
 800afe2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	2220      	movs	r2, #32
 800afe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	2200      	movs	r2, #0
 800aff0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aff8:	f043 0220 	orr.w	r2, r3, #32
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	2200      	movs	r2, #0
 800b004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800b008:	2301      	movs	r3, #1
 800b00a:	e007      	b.n	800b01c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	695b      	ldr	r3, [r3, #20]
 800b012:	f003 0304 	and.w	r3, r3, #4
 800b016:	2b04      	cmp	r3, #4
 800b018:	d1c3      	bne.n	800afa2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b01a:	2300      	movs	r3, #0
}
 800b01c:	4618      	mov	r0, r3
 800b01e:	3710      	adds	r7, #16
 800b020:	46bd      	mov	sp, r7
 800b022:	bd80      	pop	{r7, pc}

0800b024 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b084      	sub	sp, #16
 800b028:	af00      	add	r7, sp, #0
 800b02a:	60f8      	str	r0, [r7, #12]
 800b02c:	60b9      	str	r1, [r7, #8]
 800b02e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b030:	e049      	b.n	800b0c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	695b      	ldr	r3, [r3, #20]
 800b038:	f003 0310 	and.w	r3, r3, #16
 800b03c:	2b10      	cmp	r3, #16
 800b03e:	d119      	bne.n	800b074 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b040:	68fb      	ldr	r3, [r7, #12]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	f06f 0210 	mvn.w	r2, #16
 800b048:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	2200      	movs	r2, #0
 800b04e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	2220      	movs	r2, #32
 800b054:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	2200      	movs	r2, #0
 800b05c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	2200      	movs	r2, #0
 800b06c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b070:	2301      	movs	r3, #1
 800b072:	e030      	b.n	800b0d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b074:	f7fe f81e 	bl	80090b4 <HAL_GetTick>
 800b078:	4602      	mov	r2, r0
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	1ad3      	subs	r3, r2, r3
 800b07e:	68ba      	ldr	r2, [r7, #8]
 800b080:	429a      	cmp	r2, r3
 800b082:	d302      	bcc.n	800b08a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b084:	68bb      	ldr	r3, [r7, #8]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d11d      	bne.n	800b0c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	695b      	ldr	r3, [r3, #20]
 800b090:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b094:	2b40      	cmp	r3, #64	; 0x40
 800b096:	d016      	beq.n	800b0c6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	2200      	movs	r2, #0
 800b09c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	2220      	movs	r2, #32
 800b0a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0b2:	f043 0220 	orr.w	r2, r3, #32
 800b0b6:	68fb      	ldr	r3, [r7, #12]
 800b0b8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	2200      	movs	r2, #0
 800b0be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b0c2:	2301      	movs	r3, #1
 800b0c4:	e007      	b.n	800b0d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b0c6:	68fb      	ldr	r3, [r7, #12]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	695b      	ldr	r3, [r3, #20]
 800b0cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b0d0:	2b40      	cmp	r3, #64	; 0x40
 800b0d2:	d1ae      	bne.n	800b032 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b0d4:	2300      	movs	r3, #0
}
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	3710      	adds	r7, #16
 800b0da:	46bd      	mov	sp, r7
 800b0dc:	bd80      	pop	{r7, pc}

0800b0de <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b0de:	b480      	push	{r7}
 800b0e0:	b083      	sub	sp, #12
 800b0e2:	af00      	add	r7, sp, #0
 800b0e4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	695b      	ldr	r3, [r3, #20]
 800b0ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b0f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b0f4:	d11b      	bne.n	800b12e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b0fe:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	2200      	movs	r2, #0
 800b104:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	2220      	movs	r2, #32
 800b10a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	2200      	movs	r2, #0
 800b112:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b11a:	f043 0204 	orr.w	r2, r3, #4
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	2200      	movs	r2, #0
 800b126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800b12a:	2301      	movs	r3, #1
 800b12c:	e000      	b.n	800b130 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b12e:	2300      	movs	r3, #0
}
 800b130:	4618      	mov	r0, r3
 800b132:	370c      	adds	r7, #12
 800b134:	46bd      	mov	sp, r7
 800b136:	bc80      	pop	{r7}
 800b138:	4770      	bx	lr
	...

0800b13c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b086      	sub	sp, #24
 800b140:	af00      	add	r7, sp, #0
 800b142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d101      	bne.n	800b14e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b14a:	2301      	movs	r3, #1
 800b14c:	e272      	b.n	800b634 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	681b      	ldr	r3, [r3, #0]
 800b152:	f003 0301 	and.w	r3, r3, #1
 800b156:	2b00      	cmp	r3, #0
 800b158:	f000 8087 	beq.w	800b26a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b15c:	4b92      	ldr	r3, [pc, #584]	; (800b3a8 <HAL_RCC_OscConfig+0x26c>)
 800b15e:	685b      	ldr	r3, [r3, #4]
 800b160:	f003 030c 	and.w	r3, r3, #12
 800b164:	2b04      	cmp	r3, #4
 800b166:	d00c      	beq.n	800b182 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800b168:	4b8f      	ldr	r3, [pc, #572]	; (800b3a8 <HAL_RCC_OscConfig+0x26c>)
 800b16a:	685b      	ldr	r3, [r3, #4]
 800b16c:	f003 030c 	and.w	r3, r3, #12
 800b170:	2b08      	cmp	r3, #8
 800b172:	d112      	bne.n	800b19a <HAL_RCC_OscConfig+0x5e>
 800b174:	4b8c      	ldr	r3, [pc, #560]	; (800b3a8 <HAL_RCC_OscConfig+0x26c>)
 800b176:	685b      	ldr	r3, [r3, #4]
 800b178:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b17c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b180:	d10b      	bne.n	800b19a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b182:	4b89      	ldr	r3, [pc, #548]	; (800b3a8 <HAL_RCC_OscConfig+0x26c>)
 800b184:	681b      	ldr	r3, [r3, #0]
 800b186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d06c      	beq.n	800b268 <HAL_RCC_OscConfig+0x12c>
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	685b      	ldr	r3, [r3, #4]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d168      	bne.n	800b268 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800b196:	2301      	movs	r3, #1
 800b198:	e24c      	b.n	800b634 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	685b      	ldr	r3, [r3, #4]
 800b19e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b1a2:	d106      	bne.n	800b1b2 <HAL_RCC_OscConfig+0x76>
 800b1a4:	4b80      	ldr	r3, [pc, #512]	; (800b3a8 <HAL_RCC_OscConfig+0x26c>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	4a7f      	ldr	r2, [pc, #508]	; (800b3a8 <HAL_RCC_OscConfig+0x26c>)
 800b1aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b1ae:	6013      	str	r3, [r2, #0]
 800b1b0:	e02e      	b.n	800b210 <HAL_RCC_OscConfig+0xd4>
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	685b      	ldr	r3, [r3, #4]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d10c      	bne.n	800b1d4 <HAL_RCC_OscConfig+0x98>
 800b1ba:	4b7b      	ldr	r3, [pc, #492]	; (800b3a8 <HAL_RCC_OscConfig+0x26c>)
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	4a7a      	ldr	r2, [pc, #488]	; (800b3a8 <HAL_RCC_OscConfig+0x26c>)
 800b1c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b1c4:	6013      	str	r3, [r2, #0]
 800b1c6:	4b78      	ldr	r3, [pc, #480]	; (800b3a8 <HAL_RCC_OscConfig+0x26c>)
 800b1c8:	681b      	ldr	r3, [r3, #0]
 800b1ca:	4a77      	ldr	r2, [pc, #476]	; (800b3a8 <HAL_RCC_OscConfig+0x26c>)
 800b1cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b1d0:	6013      	str	r3, [r2, #0]
 800b1d2:	e01d      	b.n	800b210 <HAL_RCC_OscConfig+0xd4>
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	685b      	ldr	r3, [r3, #4]
 800b1d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b1dc:	d10c      	bne.n	800b1f8 <HAL_RCC_OscConfig+0xbc>
 800b1de:	4b72      	ldr	r3, [pc, #456]	; (800b3a8 <HAL_RCC_OscConfig+0x26c>)
 800b1e0:	681b      	ldr	r3, [r3, #0]
 800b1e2:	4a71      	ldr	r2, [pc, #452]	; (800b3a8 <HAL_RCC_OscConfig+0x26c>)
 800b1e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b1e8:	6013      	str	r3, [r2, #0]
 800b1ea:	4b6f      	ldr	r3, [pc, #444]	; (800b3a8 <HAL_RCC_OscConfig+0x26c>)
 800b1ec:	681b      	ldr	r3, [r3, #0]
 800b1ee:	4a6e      	ldr	r2, [pc, #440]	; (800b3a8 <HAL_RCC_OscConfig+0x26c>)
 800b1f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b1f4:	6013      	str	r3, [r2, #0]
 800b1f6:	e00b      	b.n	800b210 <HAL_RCC_OscConfig+0xd4>
 800b1f8:	4b6b      	ldr	r3, [pc, #428]	; (800b3a8 <HAL_RCC_OscConfig+0x26c>)
 800b1fa:	681b      	ldr	r3, [r3, #0]
 800b1fc:	4a6a      	ldr	r2, [pc, #424]	; (800b3a8 <HAL_RCC_OscConfig+0x26c>)
 800b1fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b202:	6013      	str	r3, [r2, #0]
 800b204:	4b68      	ldr	r3, [pc, #416]	; (800b3a8 <HAL_RCC_OscConfig+0x26c>)
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	4a67      	ldr	r2, [pc, #412]	; (800b3a8 <HAL_RCC_OscConfig+0x26c>)
 800b20a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b20e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	685b      	ldr	r3, [r3, #4]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d013      	beq.n	800b240 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b218:	f7fd ff4c 	bl	80090b4 <HAL_GetTick>
 800b21c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b21e:	e008      	b.n	800b232 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b220:	f7fd ff48 	bl	80090b4 <HAL_GetTick>
 800b224:	4602      	mov	r2, r0
 800b226:	693b      	ldr	r3, [r7, #16]
 800b228:	1ad3      	subs	r3, r2, r3
 800b22a:	2b64      	cmp	r3, #100	; 0x64
 800b22c:	d901      	bls.n	800b232 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800b22e:	2303      	movs	r3, #3
 800b230:	e200      	b.n	800b634 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b232:	4b5d      	ldr	r3, [pc, #372]	; (800b3a8 <HAL_RCC_OscConfig+0x26c>)
 800b234:	681b      	ldr	r3, [r3, #0]
 800b236:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	d0f0      	beq.n	800b220 <HAL_RCC_OscConfig+0xe4>
 800b23e:	e014      	b.n	800b26a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b240:	f7fd ff38 	bl	80090b4 <HAL_GetTick>
 800b244:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b246:	e008      	b.n	800b25a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b248:	f7fd ff34 	bl	80090b4 <HAL_GetTick>
 800b24c:	4602      	mov	r2, r0
 800b24e:	693b      	ldr	r3, [r7, #16]
 800b250:	1ad3      	subs	r3, r2, r3
 800b252:	2b64      	cmp	r3, #100	; 0x64
 800b254:	d901      	bls.n	800b25a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800b256:	2303      	movs	r3, #3
 800b258:	e1ec      	b.n	800b634 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b25a:	4b53      	ldr	r3, [pc, #332]	; (800b3a8 <HAL_RCC_OscConfig+0x26c>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b262:	2b00      	cmp	r3, #0
 800b264:	d1f0      	bne.n	800b248 <HAL_RCC_OscConfig+0x10c>
 800b266:	e000      	b.n	800b26a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b268:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f003 0302 	and.w	r3, r3, #2
 800b272:	2b00      	cmp	r3, #0
 800b274:	d063      	beq.n	800b33e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b276:	4b4c      	ldr	r3, [pc, #304]	; (800b3a8 <HAL_RCC_OscConfig+0x26c>)
 800b278:	685b      	ldr	r3, [r3, #4]
 800b27a:	f003 030c 	and.w	r3, r3, #12
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d00b      	beq.n	800b29a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800b282:	4b49      	ldr	r3, [pc, #292]	; (800b3a8 <HAL_RCC_OscConfig+0x26c>)
 800b284:	685b      	ldr	r3, [r3, #4]
 800b286:	f003 030c 	and.w	r3, r3, #12
 800b28a:	2b08      	cmp	r3, #8
 800b28c:	d11c      	bne.n	800b2c8 <HAL_RCC_OscConfig+0x18c>
 800b28e:	4b46      	ldr	r3, [pc, #280]	; (800b3a8 <HAL_RCC_OscConfig+0x26c>)
 800b290:	685b      	ldr	r3, [r3, #4]
 800b292:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b296:	2b00      	cmp	r3, #0
 800b298:	d116      	bne.n	800b2c8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b29a:	4b43      	ldr	r3, [pc, #268]	; (800b3a8 <HAL_RCC_OscConfig+0x26c>)
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	f003 0302 	and.w	r3, r3, #2
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d005      	beq.n	800b2b2 <HAL_RCC_OscConfig+0x176>
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	691b      	ldr	r3, [r3, #16]
 800b2aa:	2b01      	cmp	r3, #1
 800b2ac:	d001      	beq.n	800b2b2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800b2ae:	2301      	movs	r3, #1
 800b2b0:	e1c0      	b.n	800b634 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b2b2:	4b3d      	ldr	r3, [pc, #244]	; (800b3a8 <HAL_RCC_OscConfig+0x26c>)
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	695b      	ldr	r3, [r3, #20]
 800b2be:	00db      	lsls	r3, r3, #3
 800b2c0:	4939      	ldr	r1, [pc, #228]	; (800b3a8 <HAL_RCC_OscConfig+0x26c>)
 800b2c2:	4313      	orrs	r3, r2
 800b2c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b2c6:	e03a      	b.n	800b33e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	691b      	ldr	r3, [r3, #16]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d020      	beq.n	800b312 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b2d0:	4b36      	ldr	r3, [pc, #216]	; (800b3ac <HAL_RCC_OscConfig+0x270>)
 800b2d2:	2201      	movs	r2, #1
 800b2d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b2d6:	f7fd feed 	bl	80090b4 <HAL_GetTick>
 800b2da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b2dc:	e008      	b.n	800b2f0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b2de:	f7fd fee9 	bl	80090b4 <HAL_GetTick>
 800b2e2:	4602      	mov	r2, r0
 800b2e4:	693b      	ldr	r3, [r7, #16]
 800b2e6:	1ad3      	subs	r3, r2, r3
 800b2e8:	2b02      	cmp	r3, #2
 800b2ea:	d901      	bls.n	800b2f0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800b2ec:	2303      	movs	r3, #3
 800b2ee:	e1a1      	b.n	800b634 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b2f0:	4b2d      	ldr	r3, [pc, #180]	; (800b3a8 <HAL_RCC_OscConfig+0x26c>)
 800b2f2:	681b      	ldr	r3, [r3, #0]
 800b2f4:	f003 0302 	and.w	r3, r3, #2
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d0f0      	beq.n	800b2de <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b2fc:	4b2a      	ldr	r3, [pc, #168]	; (800b3a8 <HAL_RCC_OscConfig+0x26c>)
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	695b      	ldr	r3, [r3, #20]
 800b308:	00db      	lsls	r3, r3, #3
 800b30a:	4927      	ldr	r1, [pc, #156]	; (800b3a8 <HAL_RCC_OscConfig+0x26c>)
 800b30c:	4313      	orrs	r3, r2
 800b30e:	600b      	str	r3, [r1, #0]
 800b310:	e015      	b.n	800b33e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b312:	4b26      	ldr	r3, [pc, #152]	; (800b3ac <HAL_RCC_OscConfig+0x270>)
 800b314:	2200      	movs	r2, #0
 800b316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b318:	f7fd fecc 	bl	80090b4 <HAL_GetTick>
 800b31c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b31e:	e008      	b.n	800b332 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b320:	f7fd fec8 	bl	80090b4 <HAL_GetTick>
 800b324:	4602      	mov	r2, r0
 800b326:	693b      	ldr	r3, [r7, #16]
 800b328:	1ad3      	subs	r3, r2, r3
 800b32a:	2b02      	cmp	r3, #2
 800b32c:	d901      	bls.n	800b332 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800b32e:	2303      	movs	r3, #3
 800b330:	e180      	b.n	800b634 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b332:	4b1d      	ldr	r3, [pc, #116]	; (800b3a8 <HAL_RCC_OscConfig+0x26c>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	f003 0302 	and.w	r3, r3, #2
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d1f0      	bne.n	800b320 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	681b      	ldr	r3, [r3, #0]
 800b342:	f003 0308 	and.w	r3, r3, #8
 800b346:	2b00      	cmp	r3, #0
 800b348:	d03a      	beq.n	800b3c0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	699b      	ldr	r3, [r3, #24]
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d019      	beq.n	800b386 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b352:	4b17      	ldr	r3, [pc, #92]	; (800b3b0 <HAL_RCC_OscConfig+0x274>)
 800b354:	2201      	movs	r2, #1
 800b356:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b358:	f7fd feac 	bl	80090b4 <HAL_GetTick>
 800b35c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b35e:	e008      	b.n	800b372 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b360:	f7fd fea8 	bl	80090b4 <HAL_GetTick>
 800b364:	4602      	mov	r2, r0
 800b366:	693b      	ldr	r3, [r7, #16]
 800b368:	1ad3      	subs	r3, r2, r3
 800b36a:	2b02      	cmp	r3, #2
 800b36c:	d901      	bls.n	800b372 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800b36e:	2303      	movs	r3, #3
 800b370:	e160      	b.n	800b634 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b372:	4b0d      	ldr	r3, [pc, #52]	; (800b3a8 <HAL_RCC_OscConfig+0x26c>)
 800b374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b376:	f003 0302 	and.w	r3, r3, #2
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d0f0      	beq.n	800b360 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800b37e:	2001      	movs	r0, #1
 800b380:	f000 face 	bl	800b920 <RCC_Delay>
 800b384:	e01c      	b.n	800b3c0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b386:	4b0a      	ldr	r3, [pc, #40]	; (800b3b0 <HAL_RCC_OscConfig+0x274>)
 800b388:	2200      	movs	r2, #0
 800b38a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b38c:	f7fd fe92 	bl	80090b4 <HAL_GetTick>
 800b390:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b392:	e00f      	b.n	800b3b4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b394:	f7fd fe8e 	bl	80090b4 <HAL_GetTick>
 800b398:	4602      	mov	r2, r0
 800b39a:	693b      	ldr	r3, [r7, #16]
 800b39c:	1ad3      	subs	r3, r2, r3
 800b39e:	2b02      	cmp	r3, #2
 800b3a0:	d908      	bls.n	800b3b4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800b3a2:	2303      	movs	r3, #3
 800b3a4:	e146      	b.n	800b634 <HAL_RCC_OscConfig+0x4f8>
 800b3a6:	bf00      	nop
 800b3a8:	40021000 	.word	0x40021000
 800b3ac:	42420000 	.word	0x42420000
 800b3b0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b3b4:	4b92      	ldr	r3, [pc, #584]	; (800b600 <HAL_RCC_OscConfig+0x4c4>)
 800b3b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3b8:	f003 0302 	and.w	r3, r3, #2
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d1e9      	bne.n	800b394 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	f003 0304 	and.w	r3, r3, #4
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	f000 80a6 	beq.w	800b51a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b3ce:	2300      	movs	r3, #0
 800b3d0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b3d2:	4b8b      	ldr	r3, [pc, #556]	; (800b600 <HAL_RCC_OscConfig+0x4c4>)
 800b3d4:	69db      	ldr	r3, [r3, #28]
 800b3d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d10d      	bne.n	800b3fa <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b3de:	4b88      	ldr	r3, [pc, #544]	; (800b600 <HAL_RCC_OscConfig+0x4c4>)
 800b3e0:	69db      	ldr	r3, [r3, #28]
 800b3e2:	4a87      	ldr	r2, [pc, #540]	; (800b600 <HAL_RCC_OscConfig+0x4c4>)
 800b3e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b3e8:	61d3      	str	r3, [r2, #28]
 800b3ea:	4b85      	ldr	r3, [pc, #532]	; (800b600 <HAL_RCC_OscConfig+0x4c4>)
 800b3ec:	69db      	ldr	r3, [r3, #28]
 800b3ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b3f2:	60bb      	str	r3, [r7, #8]
 800b3f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b3f6:	2301      	movs	r3, #1
 800b3f8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b3fa:	4b82      	ldr	r3, [pc, #520]	; (800b604 <HAL_RCC_OscConfig+0x4c8>)
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b402:	2b00      	cmp	r3, #0
 800b404:	d118      	bne.n	800b438 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b406:	4b7f      	ldr	r3, [pc, #508]	; (800b604 <HAL_RCC_OscConfig+0x4c8>)
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	4a7e      	ldr	r2, [pc, #504]	; (800b604 <HAL_RCC_OscConfig+0x4c8>)
 800b40c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b410:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b412:	f7fd fe4f 	bl	80090b4 <HAL_GetTick>
 800b416:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b418:	e008      	b.n	800b42c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b41a:	f7fd fe4b 	bl	80090b4 <HAL_GetTick>
 800b41e:	4602      	mov	r2, r0
 800b420:	693b      	ldr	r3, [r7, #16]
 800b422:	1ad3      	subs	r3, r2, r3
 800b424:	2b64      	cmp	r3, #100	; 0x64
 800b426:	d901      	bls.n	800b42c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800b428:	2303      	movs	r3, #3
 800b42a:	e103      	b.n	800b634 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b42c:	4b75      	ldr	r3, [pc, #468]	; (800b604 <HAL_RCC_OscConfig+0x4c8>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b434:	2b00      	cmp	r3, #0
 800b436:	d0f0      	beq.n	800b41a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	68db      	ldr	r3, [r3, #12]
 800b43c:	2b01      	cmp	r3, #1
 800b43e:	d106      	bne.n	800b44e <HAL_RCC_OscConfig+0x312>
 800b440:	4b6f      	ldr	r3, [pc, #444]	; (800b600 <HAL_RCC_OscConfig+0x4c4>)
 800b442:	6a1b      	ldr	r3, [r3, #32]
 800b444:	4a6e      	ldr	r2, [pc, #440]	; (800b600 <HAL_RCC_OscConfig+0x4c4>)
 800b446:	f043 0301 	orr.w	r3, r3, #1
 800b44a:	6213      	str	r3, [r2, #32]
 800b44c:	e02d      	b.n	800b4aa <HAL_RCC_OscConfig+0x36e>
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	68db      	ldr	r3, [r3, #12]
 800b452:	2b00      	cmp	r3, #0
 800b454:	d10c      	bne.n	800b470 <HAL_RCC_OscConfig+0x334>
 800b456:	4b6a      	ldr	r3, [pc, #424]	; (800b600 <HAL_RCC_OscConfig+0x4c4>)
 800b458:	6a1b      	ldr	r3, [r3, #32]
 800b45a:	4a69      	ldr	r2, [pc, #420]	; (800b600 <HAL_RCC_OscConfig+0x4c4>)
 800b45c:	f023 0301 	bic.w	r3, r3, #1
 800b460:	6213      	str	r3, [r2, #32]
 800b462:	4b67      	ldr	r3, [pc, #412]	; (800b600 <HAL_RCC_OscConfig+0x4c4>)
 800b464:	6a1b      	ldr	r3, [r3, #32]
 800b466:	4a66      	ldr	r2, [pc, #408]	; (800b600 <HAL_RCC_OscConfig+0x4c4>)
 800b468:	f023 0304 	bic.w	r3, r3, #4
 800b46c:	6213      	str	r3, [r2, #32]
 800b46e:	e01c      	b.n	800b4aa <HAL_RCC_OscConfig+0x36e>
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	68db      	ldr	r3, [r3, #12]
 800b474:	2b05      	cmp	r3, #5
 800b476:	d10c      	bne.n	800b492 <HAL_RCC_OscConfig+0x356>
 800b478:	4b61      	ldr	r3, [pc, #388]	; (800b600 <HAL_RCC_OscConfig+0x4c4>)
 800b47a:	6a1b      	ldr	r3, [r3, #32]
 800b47c:	4a60      	ldr	r2, [pc, #384]	; (800b600 <HAL_RCC_OscConfig+0x4c4>)
 800b47e:	f043 0304 	orr.w	r3, r3, #4
 800b482:	6213      	str	r3, [r2, #32]
 800b484:	4b5e      	ldr	r3, [pc, #376]	; (800b600 <HAL_RCC_OscConfig+0x4c4>)
 800b486:	6a1b      	ldr	r3, [r3, #32]
 800b488:	4a5d      	ldr	r2, [pc, #372]	; (800b600 <HAL_RCC_OscConfig+0x4c4>)
 800b48a:	f043 0301 	orr.w	r3, r3, #1
 800b48e:	6213      	str	r3, [r2, #32]
 800b490:	e00b      	b.n	800b4aa <HAL_RCC_OscConfig+0x36e>
 800b492:	4b5b      	ldr	r3, [pc, #364]	; (800b600 <HAL_RCC_OscConfig+0x4c4>)
 800b494:	6a1b      	ldr	r3, [r3, #32]
 800b496:	4a5a      	ldr	r2, [pc, #360]	; (800b600 <HAL_RCC_OscConfig+0x4c4>)
 800b498:	f023 0301 	bic.w	r3, r3, #1
 800b49c:	6213      	str	r3, [r2, #32]
 800b49e:	4b58      	ldr	r3, [pc, #352]	; (800b600 <HAL_RCC_OscConfig+0x4c4>)
 800b4a0:	6a1b      	ldr	r3, [r3, #32]
 800b4a2:	4a57      	ldr	r2, [pc, #348]	; (800b600 <HAL_RCC_OscConfig+0x4c4>)
 800b4a4:	f023 0304 	bic.w	r3, r3, #4
 800b4a8:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	68db      	ldr	r3, [r3, #12]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d015      	beq.n	800b4de <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b4b2:	f7fd fdff 	bl	80090b4 <HAL_GetTick>
 800b4b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b4b8:	e00a      	b.n	800b4d0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b4ba:	f7fd fdfb 	bl	80090b4 <HAL_GetTick>
 800b4be:	4602      	mov	r2, r0
 800b4c0:	693b      	ldr	r3, [r7, #16]
 800b4c2:	1ad3      	subs	r3, r2, r3
 800b4c4:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4c8:	4293      	cmp	r3, r2
 800b4ca:	d901      	bls.n	800b4d0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800b4cc:	2303      	movs	r3, #3
 800b4ce:	e0b1      	b.n	800b634 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b4d0:	4b4b      	ldr	r3, [pc, #300]	; (800b600 <HAL_RCC_OscConfig+0x4c4>)
 800b4d2:	6a1b      	ldr	r3, [r3, #32]
 800b4d4:	f003 0302 	and.w	r3, r3, #2
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d0ee      	beq.n	800b4ba <HAL_RCC_OscConfig+0x37e>
 800b4dc:	e014      	b.n	800b508 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b4de:	f7fd fde9 	bl	80090b4 <HAL_GetTick>
 800b4e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b4e4:	e00a      	b.n	800b4fc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b4e6:	f7fd fde5 	bl	80090b4 <HAL_GetTick>
 800b4ea:	4602      	mov	r2, r0
 800b4ec:	693b      	ldr	r3, [r7, #16]
 800b4ee:	1ad3      	subs	r3, r2, r3
 800b4f0:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4f4:	4293      	cmp	r3, r2
 800b4f6:	d901      	bls.n	800b4fc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800b4f8:	2303      	movs	r3, #3
 800b4fa:	e09b      	b.n	800b634 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b4fc:	4b40      	ldr	r3, [pc, #256]	; (800b600 <HAL_RCC_OscConfig+0x4c4>)
 800b4fe:	6a1b      	ldr	r3, [r3, #32]
 800b500:	f003 0302 	and.w	r3, r3, #2
 800b504:	2b00      	cmp	r3, #0
 800b506:	d1ee      	bne.n	800b4e6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800b508:	7dfb      	ldrb	r3, [r7, #23]
 800b50a:	2b01      	cmp	r3, #1
 800b50c:	d105      	bne.n	800b51a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b50e:	4b3c      	ldr	r3, [pc, #240]	; (800b600 <HAL_RCC_OscConfig+0x4c4>)
 800b510:	69db      	ldr	r3, [r3, #28]
 800b512:	4a3b      	ldr	r2, [pc, #236]	; (800b600 <HAL_RCC_OscConfig+0x4c4>)
 800b514:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b518:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	69db      	ldr	r3, [r3, #28]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	f000 8087 	beq.w	800b632 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b524:	4b36      	ldr	r3, [pc, #216]	; (800b600 <HAL_RCC_OscConfig+0x4c4>)
 800b526:	685b      	ldr	r3, [r3, #4]
 800b528:	f003 030c 	and.w	r3, r3, #12
 800b52c:	2b08      	cmp	r3, #8
 800b52e:	d061      	beq.n	800b5f4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	69db      	ldr	r3, [r3, #28]
 800b534:	2b02      	cmp	r3, #2
 800b536:	d146      	bne.n	800b5c6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b538:	4b33      	ldr	r3, [pc, #204]	; (800b608 <HAL_RCC_OscConfig+0x4cc>)
 800b53a:	2200      	movs	r2, #0
 800b53c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b53e:	f7fd fdb9 	bl	80090b4 <HAL_GetTick>
 800b542:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b544:	e008      	b.n	800b558 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b546:	f7fd fdb5 	bl	80090b4 <HAL_GetTick>
 800b54a:	4602      	mov	r2, r0
 800b54c:	693b      	ldr	r3, [r7, #16]
 800b54e:	1ad3      	subs	r3, r2, r3
 800b550:	2b02      	cmp	r3, #2
 800b552:	d901      	bls.n	800b558 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800b554:	2303      	movs	r3, #3
 800b556:	e06d      	b.n	800b634 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b558:	4b29      	ldr	r3, [pc, #164]	; (800b600 <HAL_RCC_OscConfig+0x4c4>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b560:	2b00      	cmp	r3, #0
 800b562:	d1f0      	bne.n	800b546 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	6a1b      	ldr	r3, [r3, #32]
 800b568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b56c:	d108      	bne.n	800b580 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800b56e:	4b24      	ldr	r3, [pc, #144]	; (800b600 <HAL_RCC_OscConfig+0x4c4>)
 800b570:	685b      	ldr	r3, [r3, #4]
 800b572:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	689b      	ldr	r3, [r3, #8]
 800b57a:	4921      	ldr	r1, [pc, #132]	; (800b600 <HAL_RCC_OscConfig+0x4c4>)
 800b57c:	4313      	orrs	r3, r2
 800b57e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b580:	4b1f      	ldr	r3, [pc, #124]	; (800b600 <HAL_RCC_OscConfig+0x4c4>)
 800b582:	685b      	ldr	r3, [r3, #4]
 800b584:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800b588:	687b      	ldr	r3, [r7, #4]
 800b58a:	6a19      	ldr	r1, [r3, #32]
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b590:	430b      	orrs	r3, r1
 800b592:	491b      	ldr	r1, [pc, #108]	; (800b600 <HAL_RCC_OscConfig+0x4c4>)
 800b594:	4313      	orrs	r3, r2
 800b596:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b598:	4b1b      	ldr	r3, [pc, #108]	; (800b608 <HAL_RCC_OscConfig+0x4cc>)
 800b59a:	2201      	movs	r2, #1
 800b59c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b59e:	f7fd fd89 	bl	80090b4 <HAL_GetTick>
 800b5a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b5a4:	e008      	b.n	800b5b8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b5a6:	f7fd fd85 	bl	80090b4 <HAL_GetTick>
 800b5aa:	4602      	mov	r2, r0
 800b5ac:	693b      	ldr	r3, [r7, #16]
 800b5ae:	1ad3      	subs	r3, r2, r3
 800b5b0:	2b02      	cmp	r3, #2
 800b5b2:	d901      	bls.n	800b5b8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800b5b4:	2303      	movs	r3, #3
 800b5b6:	e03d      	b.n	800b634 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b5b8:	4b11      	ldr	r3, [pc, #68]	; (800b600 <HAL_RCC_OscConfig+0x4c4>)
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d0f0      	beq.n	800b5a6 <HAL_RCC_OscConfig+0x46a>
 800b5c4:	e035      	b.n	800b632 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b5c6:	4b10      	ldr	r3, [pc, #64]	; (800b608 <HAL_RCC_OscConfig+0x4cc>)
 800b5c8:	2200      	movs	r2, #0
 800b5ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b5cc:	f7fd fd72 	bl	80090b4 <HAL_GetTick>
 800b5d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b5d2:	e008      	b.n	800b5e6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b5d4:	f7fd fd6e 	bl	80090b4 <HAL_GetTick>
 800b5d8:	4602      	mov	r2, r0
 800b5da:	693b      	ldr	r3, [r7, #16]
 800b5dc:	1ad3      	subs	r3, r2, r3
 800b5de:	2b02      	cmp	r3, #2
 800b5e0:	d901      	bls.n	800b5e6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800b5e2:	2303      	movs	r3, #3
 800b5e4:	e026      	b.n	800b634 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b5e6:	4b06      	ldr	r3, [pc, #24]	; (800b600 <HAL_RCC_OscConfig+0x4c4>)
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d1f0      	bne.n	800b5d4 <HAL_RCC_OscConfig+0x498>
 800b5f2:	e01e      	b.n	800b632 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	69db      	ldr	r3, [r3, #28]
 800b5f8:	2b01      	cmp	r3, #1
 800b5fa:	d107      	bne.n	800b60c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800b5fc:	2301      	movs	r3, #1
 800b5fe:	e019      	b.n	800b634 <HAL_RCC_OscConfig+0x4f8>
 800b600:	40021000 	.word	0x40021000
 800b604:	40007000 	.word	0x40007000
 800b608:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800b60c:	4b0b      	ldr	r3, [pc, #44]	; (800b63c <HAL_RCC_OscConfig+0x500>)
 800b60e:	685b      	ldr	r3, [r3, #4]
 800b610:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b612:	68fb      	ldr	r3, [r7, #12]
 800b614:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	6a1b      	ldr	r3, [r3, #32]
 800b61c:	429a      	cmp	r2, r3
 800b61e:	d106      	bne.n	800b62e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b62a:	429a      	cmp	r2, r3
 800b62c:	d001      	beq.n	800b632 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800b62e:	2301      	movs	r3, #1
 800b630:	e000      	b.n	800b634 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800b632:	2300      	movs	r3, #0
}
 800b634:	4618      	mov	r0, r3
 800b636:	3718      	adds	r7, #24
 800b638:	46bd      	mov	sp, r7
 800b63a:	bd80      	pop	{r7, pc}
 800b63c:	40021000 	.word	0x40021000

0800b640 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b640:	b580      	push	{r7, lr}
 800b642:	b084      	sub	sp, #16
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
 800b648:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d101      	bne.n	800b654 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b650:	2301      	movs	r3, #1
 800b652:	e0d0      	b.n	800b7f6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b654:	4b6a      	ldr	r3, [pc, #424]	; (800b800 <HAL_RCC_ClockConfig+0x1c0>)
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	f003 0307 	and.w	r3, r3, #7
 800b65c:	683a      	ldr	r2, [r7, #0]
 800b65e:	429a      	cmp	r2, r3
 800b660:	d910      	bls.n	800b684 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b662:	4b67      	ldr	r3, [pc, #412]	; (800b800 <HAL_RCC_ClockConfig+0x1c0>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	f023 0207 	bic.w	r2, r3, #7
 800b66a:	4965      	ldr	r1, [pc, #404]	; (800b800 <HAL_RCC_ClockConfig+0x1c0>)
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	4313      	orrs	r3, r2
 800b670:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b672:	4b63      	ldr	r3, [pc, #396]	; (800b800 <HAL_RCC_ClockConfig+0x1c0>)
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	f003 0307 	and.w	r3, r3, #7
 800b67a:	683a      	ldr	r2, [r7, #0]
 800b67c:	429a      	cmp	r2, r3
 800b67e:	d001      	beq.n	800b684 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800b680:	2301      	movs	r3, #1
 800b682:	e0b8      	b.n	800b7f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f003 0302 	and.w	r3, r3, #2
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d020      	beq.n	800b6d2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	f003 0304 	and.w	r3, r3, #4
 800b698:	2b00      	cmp	r3, #0
 800b69a:	d005      	beq.n	800b6a8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b69c:	4b59      	ldr	r3, [pc, #356]	; (800b804 <HAL_RCC_ClockConfig+0x1c4>)
 800b69e:	685b      	ldr	r3, [r3, #4]
 800b6a0:	4a58      	ldr	r2, [pc, #352]	; (800b804 <HAL_RCC_ClockConfig+0x1c4>)
 800b6a2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b6a6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	f003 0308 	and.w	r3, r3, #8
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d005      	beq.n	800b6c0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b6b4:	4b53      	ldr	r3, [pc, #332]	; (800b804 <HAL_RCC_ClockConfig+0x1c4>)
 800b6b6:	685b      	ldr	r3, [r3, #4]
 800b6b8:	4a52      	ldr	r2, [pc, #328]	; (800b804 <HAL_RCC_ClockConfig+0x1c4>)
 800b6ba:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800b6be:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b6c0:	4b50      	ldr	r3, [pc, #320]	; (800b804 <HAL_RCC_ClockConfig+0x1c4>)
 800b6c2:	685b      	ldr	r3, [r3, #4]
 800b6c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	689b      	ldr	r3, [r3, #8]
 800b6cc:	494d      	ldr	r1, [pc, #308]	; (800b804 <HAL_RCC_ClockConfig+0x1c4>)
 800b6ce:	4313      	orrs	r3, r2
 800b6d0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	f003 0301 	and.w	r3, r3, #1
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d040      	beq.n	800b760 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	685b      	ldr	r3, [r3, #4]
 800b6e2:	2b01      	cmp	r3, #1
 800b6e4:	d107      	bne.n	800b6f6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b6e6:	4b47      	ldr	r3, [pc, #284]	; (800b804 <HAL_RCC_ClockConfig+0x1c4>)
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d115      	bne.n	800b71e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b6f2:	2301      	movs	r3, #1
 800b6f4:	e07f      	b.n	800b7f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	685b      	ldr	r3, [r3, #4]
 800b6fa:	2b02      	cmp	r3, #2
 800b6fc:	d107      	bne.n	800b70e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b6fe:	4b41      	ldr	r3, [pc, #260]	; (800b804 <HAL_RCC_ClockConfig+0x1c4>)
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b706:	2b00      	cmp	r3, #0
 800b708:	d109      	bne.n	800b71e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b70a:	2301      	movs	r3, #1
 800b70c:	e073      	b.n	800b7f6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b70e:	4b3d      	ldr	r3, [pc, #244]	; (800b804 <HAL_RCC_ClockConfig+0x1c4>)
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	f003 0302 	and.w	r3, r3, #2
 800b716:	2b00      	cmp	r3, #0
 800b718:	d101      	bne.n	800b71e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b71a:	2301      	movs	r3, #1
 800b71c:	e06b      	b.n	800b7f6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b71e:	4b39      	ldr	r3, [pc, #228]	; (800b804 <HAL_RCC_ClockConfig+0x1c4>)
 800b720:	685b      	ldr	r3, [r3, #4]
 800b722:	f023 0203 	bic.w	r2, r3, #3
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	685b      	ldr	r3, [r3, #4]
 800b72a:	4936      	ldr	r1, [pc, #216]	; (800b804 <HAL_RCC_ClockConfig+0x1c4>)
 800b72c:	4313      	orrs	r3, r2
 800b72e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b730:	f7fd fcc0 	bl	80090b4 <HAL_GetTick>
 800b734:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b736:	e00a      	b.n	800b74e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b738:	f7fd fcbc 	bl	80090b4 <HAL_GetTick>
 800b73c:	4602      	mov	r2, r0
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	1ad3      	subs	r3, r2, r3
 800b742:	f241 3288 	movw	r2, #5000	; 0x1388
 800b746:	4293      	cmp	r3, r2
 800b748:	d901      	bls.n	800b74e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b74a:	2303      	movs	r3, #3
 800b74c:	e053      	b.n	800b7f6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b74e:	4b2d      	ldr	r3, [pc, #180]	; (800b804 <HAL_RCC_ClockConfig+0x1c4>)
 800b750:	685b      	ldr	r3, [r3, #4]
 800b752:	f003 020c 	and.w	r2, r3, #12
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	685b      	ldr	r3, [r3, #4]
 800b75a:	009b      	lsls	r3, r3, #2
 800b75c:	429a      	cmp	r2, r3
 800b75e:	d1eb      	bne.n	800b738 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b760:	4b27      	ldr	r3, [pc, #156]	; (800b800 <HAL_RCC_ClockConfig+0x1c0>)
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	f003 0307 	and.w	r3, r3, #7
 800b768:	683a      	ldr	r2, [r7, #0]
 800b76a:	429a      	cmp	r2, r3
 800b76c:	d210      	bcs.n	800b790 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b76e:	4b24      	ldr	r3, [pc, #144]	; (800b800 <HAL_RCC_ClockConfig+0x1c0>)
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	f023 0207 	bic.w	r2, r3, #7
 800b776:	4922      	ldr	r1, [pc, #136]	; (800b800 <HAL_RCC_ClockConfig+0x1c0>)
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	4313      	orrs	r3, r2
 800b77c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b77e:	4b20      	ldr	r3, [pc, #128]	; (800b800 <HAL_RCC_ClockConfig+0x1c0>)
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	f003 0307 	and.w	r3, r3, #7
 800b786:	683a      	ldr	r2, [r7, #0]
 800b788:	429a      	cmp	r2, r3
 800b78a:	d001      	beq.n	800b790 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800b78c:	2301      	movs	r3, #1
 800b78e:	e032      	b.n	800b7f6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	f003 0304 	and.w	r3, r3, #4
 800b798:	2b00      	cmp	r3, #0
 800b79a:	d008      	beq.n	800b7ae <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b79c:	4b19      	ldr	r3, [pc, #100]	; (800b804 <HAL_RCC_ClockConfig+0x1c4>)
 800b79e:	685b      	ldr	r3, [r3, #4]
 800b7a0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	68db      	ldr	r3, [r3, #12]
 800b7a8:	4916      	ldr	r1, [pc, #88]	; (800b804 <HAL_RCC_ClockConfig+0x1c4>)
 800b7aa:	4313      	orrs	r3, r2
 800b7ac:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	681b      	ldr	r3, [r3, #0]
 800b7b2:	f003 0308 	and.w	r3, r3, #8
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d009      	beq.n	800b7ce <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b7ba:	4b12      	ldr	r3, [pc, #72]	; (800b804 <HAL_RCC_ClockConfig+0x1c4>)
 800b7bc:	685b      	ldr	r3, [r3, #4]
 800b7be:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	691b      	ldr	r3, [r3, #16]
 800b7c6:	00db      	lsls	r3, r3, #3
 800b7c8:	490e      	ldr	r1, [pc, #56]	; (800b804 <HAL_RCC_ClockConfig+0x1c4>)
 800b7ca:	4313      	orrs	r3, r2
 800b7cc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b7ce:	f000 f821 	bl	800b814 <HAL_RCC_GetSysClockFreq>
 800b7d2:	4602      	mov	r2, r0
 800b7d4:	4b0b      	ldr	r3, [pc, #44]	; (800b804 <HAL_RCC_ClockConfig+0x1c4>)
 800b7d6:	685b      	ldr	r3, [r3, #4]
 800b7d8:	091b      	lsrs	r3, r3, #4
 800b7da:	f003 030f 	and.w	r3, r3, #15
 800b7de:	490a      	ldr	r1, [pc, #40]	; (800b808 <HAL_RCC_ClockConfig+0x1c8>)
 800b7e0:	5ccb      	ldrb	r3, [r1, r3]
 800b7e2:	fa22 f303 	lsr.w	r3, r2, r3
 800b7e6:	4a09      	ldr	r2, [pc, #36]	; (800b80c <HAL_RCC_ClockConfig+0x1cc>)
 800b7e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b7ea:	4b09      	ldr	r3, [pc, #36]	; (800b810 <HAL_RCC_ClockConfig+0x1d0>)
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	f7fd fc1e 	bl	8009030 <HAL_InitTick>

  return HAL_OK;
 800b7f4:	2300      	movs	r3, #0
}
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	3710      	adds	r7, #16
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	bd80      	pop	{r7, pc}
 800b7fe:	bf00      	nop
 800b800:	40022000 	.word	0x40022000
 800b804:	40021000 	.word	0x40021000
 800b808:	0800e5ac 	.word	0x0800e5ac
 800b80c:	200009c4 	.word	0x200009c4
 800b810:	200009c8 	.word	0x200009c8

0800b814 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b814:	b480      	push	{r7}
 800b816:	b087      	sub	sp, #28
 800b818:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800b81a:	2300      	movs	r3, #0
 800b81c:	60fb      	str	r3, [r7, #12]
 800b81e:	2300      	movs	r3, #0
 800b820:	60bb      	str	r3, [r7, #8]
 800b822:	2300      	movs	r3, #0
 800b824:	617b      	str	r3, [r7, #20]
 800b826:	2300      	movs	r3, #0
 800b828:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800b82a:	2300      	movs	r3, #0
 800b82c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800b82e:	4b1e      	ldr	r3, [pc, #120]	; (800b8a8 <HAL_RCC_GetSysClockFreq+0x94>)
 800b830:	685b      	ldr	r3, [r3, #4]
 800b832:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	f003 030c 	and.w	r3, r3, #12
 800b83a:	2b04      	cmp	r3, #4
 800b83c:	d002      	beq.n	800b844 <HAL_RCC_GetSysClockFreq+0x30>
 800b83e:	2b08      	cmp	r3, #8
 800b840:	d003      	beq.n	800b84a <HAL_RCC_GetSysClockFreq+0x36>
 800b842:	e027      	b.n	800b894 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800b844:	4b19      	ldr	r3, [pc, #100]	; (800b8ac <HAL_RCC_GetSysClockFreq+0x98>)
 800b846:	613b      	str	r3, [r7, #16]
      break;
 800b848:	e027      	b.n	800b89a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	0c9b      	lsrs	r3, r3, #18
 800b84e:	f003 030f 	and.w	r3, r3, #15
 800b852:	4a17      	ldr	r2, [pc, #92]	; (800b8b0 <HAL_RCC_GetSysClockFreq+0x9c>)
 800b854:	5cd3      	ldrb	r3, [r2, r3]
 800b856:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d010      	beq.n	800b884 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800b862:	4b11      	ldr	r3, [pc, #68]	; (800b8a8 <HAL_RCC_GetSysClockFreq+0x94>)
 800b864:	685b      	ldr	r3, [r3, #4]
 800b866:	0c5b      	lsrs	r3, r3, #17
 800b868:	f003 0301 	and.w	r3, r3, #1
 800b86c:	4a11      	ldr	r2, [pc, #68]	; (800b8b4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800b86e:	5cd3      	ldrb	r3, [r2, r3]
 800b870:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	4a0d      	ldr	r2, [pc, #52]	; (800b8ac <HAL_RCC_GetSysClockFreq+0x98>)
 800b876:	fb03 f202 	mul.w	r2, r3, r2
 800b87a:	68bb      	ldr	r3, [r7, #8]
 800b87c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b880:	617b      	str	r3, [r7, #20]
 800b882:	e004      	b.n	800b88e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	4a0c      	ldr	r2, [pc, #48]	; (800b8b8 <HAL_RCC_GetSysClockFreq+0xa4>)
 800b888:	fb02 f303 	mul.w	r3, r2, r3
 800b88c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800b88e:	697b      	ldr	r3, [r7, #20]
 800b890:	613b      	str	r3, [r7, #16]
      break;
 800b892:	e002      	b.n	800b89a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800b894:	4b05      	ldr	r3, [pc, #20]	; (800b8ac <HAL_RCC_GetSysClockFreq+0x98>)
 800b896:	613b      	str	r3, [r7, #16]
      break;
 800b898:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b89a:	693b      	ldr	r3, [r7, #16]
}
 800b89c:	4618      	mov	r0, r3
 800b89e:	371c      	adds	r7, #28
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bc80      	pop	{r7}
 800b8a4:	4770      	bx	lr
 800b8a6:	bf00      	nop
 800b8a8:	40021000 	.word	0x40021000
 800b8ac:	007a1200 	.word	0x007a1200
 800b8b0:	0800e5c4 	.word	0x0800e5c4
 800b8b4:	0800e5d4 	.word	0x0800e5d4
 800b8b8:	003d0900 	.word	0x003d0900

0800b8bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b8bc:	b480      	push	{r7}
 800b8be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b8c0:	4b02      	ldr	r3, [pc, #8]	; (800b8cc <HAL_RCC_GetHCLKFreq+0x10>)
 800b8c2:	681b      	ldr	r3, [r3, #0]
}
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	46bd      	mov	sp, r7
 800b8c8:	bc80      	pop	{r7}
 800b8ca:	4770      	bx	lr
 800b8cc:	200009c4 	.word	0x200009c4

0800b8d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b8d4:	f7ff fff2 	bl	800b8bc <HAL_RCC_GetHCLKFreq>
 800b8d8:	4602      	mov	r2, r0
 800b8da:	4b05      	ldr	r3, [pc, #20]	; (800b8f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b8dc:	685b      	ldr	r3, [r3, #4]
 800b8de:	0a1b      	lsrs	r3, r3, #8
 800b8e0:	f003 0307 	and.w	r3, r3, #7
 800b8e4:	4903      	ldr	r1, [pc, #12]	; (800b8f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b8e6:	5ccb      	ldrb	r3, [r1, r3]
 800b8e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b8ec:	4618      	mov	r0, r3
 800b8ee:	bd80      	pop	{r7, pc}
 800b8f0:	40021000 	.word	0x40021000
 800b8f4:	0800e5bc 	.word	0x0800e5bc

0800b8f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b8f8:	b580      	push	{r7, lr}
 800b8fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b8fc:	f7ff ffde 	bl	800b8bc <HAL_RCC_GetHCLKFreq>
 800b900:	4602      	mov	r2, r0
 800b902:	4b05      	ldr	r3, [pc, #20]	; (800b918 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b904:	685b      	ldr	r3, [r3, #4]
 800b906:	0adb      	lsrs	r3, r3, #11
 800b908:	f003 0307 	and.w	r3, r3, #7
 800b90c:	4903      	ldr	r1, [pc, #12]	; (800b91c <HAL_RCC_GetPCLK2Freq+0x24>)
 800b90e:	5ccb      	ldrb	r3, [r1, r3]
 800b910:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b914:	4618      	mov	r0, r3
 800b916:	bd80      	pop	{r7, pc}
 800b918:	40021000 	.word	0x40021000
 800b91c:	0800e5bc 	.word	0x0800e5bc

0800b920 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800b920:	b480      	push	{r7}
 800b922:	b085      	sub	sp, #20
 800b924:	af00      	add	r7, sp, #0
 800b926:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800b928:	4b0a      	ldr	r3, [pc, #40]	; (800b954 <RCC_Delay+0x34>)
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	4a0a      	ldr	r2, [pc, #40]	; (800b958 <RCC_Delay+0x38>)
 800b92e:	fba2 2303 	umull	r2, r3, r2, r3
 800b932:	0a5b      	lsrs	r3, r3, #9
 800b934:	687a      	ldr	r2, [r7, #4]
 800b936:	fb02 f303 	mul.w	r3, r2, r3
 800b93a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800b93c:	bf00      	nop
  }
  while (Delay --);
 800b93e:	68fb      	ldr	r3, [r7, #12]
 800b940:	1e5a      	subs	r2, r3, #1
 800b942:	60fa      	str	r2, [r7, #12]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d1f9      	bne.n	800b93c <RCC_Delay+0x1c>
}
 800b948:	bf00      	nop
 800b94a:	bf00      	nop
 800b94c:	3714      	adds	r7, #20
 800b94e:	46bd      	mov	sp, r7
 800b950:	bc80      	pop	{r7}
 800b952:	4770      	bx	lr
 800b954:	200009c4 	.word	0x200009c4
 800b958:	10624dd3 	.word	0x10624dd3

0800b95c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b082      	sub	sp, #8
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2b00      	cmp	r3, #0
 800b968:	d101      	bne.n	800b96e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b96a:	2301      	movs	r3, #1
 800b96c:	e041      	b.n	800b9f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b974:	b2db      	uxtb	r3, r3
 800b976:	2b00      	cmp	r3, #0
 800b978:	d106      	bne.n	800b988 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2200      	movs	r2, #0
 800b97e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f7fd fa26 	bl	8008dd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2202      	movs	r2, #2
 800b98c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	681a      	ldr	r2, [r3, #0]
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	3304      	adds	r3, #4
 800b998:	4619      	mov	r1, r3
 800b99a:	4610      	mov	r0, r2
 800b99c:	f000 fa82 	bl	800bea4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2201      	movs	r2, #1
 800b9a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	2201      	movs	r2, #1
 800b9ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	2201      	movs	r2, #1
 800b9b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	2201      	movs	r2, #1
 800b9bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2201      	movs	r2, #1
 800b9c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	2201      	movs	r2, #1
 800b9cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	2201      	movs	r2, #1
 800b9d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2201      	movs	r2, #1
 800b9dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2201      	movs	r2, #1
 800b9e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	2201      	movs	r2, #1
 800b9ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b9f0:	2300      	movs	r3, #0
}
 800b9f2:	4618      	mov	r0, r3
 800b9f4:	3708      	adds	r7, #8
 800b9f6:	46bd      	mov	sp, r7
 800b9f8:	bd80      	pop	{r7, pc}
	...

0800b9fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b9fc:	b480      	push	{r7}
 800b9fe:	b085      	sub	sp, #20
 800ba00:	af00      	add	r7, sp, #0
 800ba02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ba0a:	b2db      	uxtb	r3, r3
 800ba0c:	2b01      	cmp	r3, #1
 800ba0e:	d001      	beq.n	800ba14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ba10:	2301      	movs	r3, #1
 800ba12:	e044      	b.n	800ba9e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	2202      	movs	r2, #2
 800ba18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	68da      	ldr	r2, [r3, #12]
 800ba22:	687b      	ldr	r3, [r7, #4]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	f042 0201 	orr.w	r2, r2, #1
 800ba2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	4a1d      	ldr	r2, [pc, #116]	; (800baa8 <HAL_TIM_Base_Start_IT+0xac>)
 800ba32:	4293      	cmp	r3, r2
 800ba34:	d018      	beq.n	800ba68 <HAL_TIM_Base_Start_IT+0x6c>
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	4a1c      	ldr	r2, [pc, #112]	; (800baac <HAL_TIM_Base_Start_IT+0xb0>)
 800ba3c:	4293      	cmp	r3, r2
 800ba3e:	d013      	beq.n	800ba68 <HAL_TIM_Base_Start_IT+0x6c>
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ba48:	d00e      	beq.n	800ba68 <HAL_TIM_Base_Start_IT+0x6c>
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	4a18      	ldr	r2, [pc, #96]	; (800bab0 <HAL_TIM_Base_Start_IT+0xb4>)
 800ba50:	4293      	cmp	r3, r2
 800ba52:	d009      	beq.n	800ba68 <HAL_TIM_Base_Start_IT+0x6c>
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	681b      	ldr	r3, [r3, #0]
 800ba58:	4a16      	ldr	r2, [pc, #88]	; (800bab4 <HAL_TIM_Base_Start_IT+0xb8>)
 800ba5a:	4293      	cmp	r3, r2
 800ba5c:	d004      	beq.n	800ba68 <HAL_TIM_Base_Start_IT+0x6c>
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	4a15      	ldr	r2, [pc, #84]	; (800bab8 <HAL_TIM_Base_Start_IT+0xbc>)
 800ba64:	4293      	cmp	r3, r2
 800ba66:	d111      	bne.n	800ba8c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	681b      	ldr	r3, [r3, #0]
 800ba6c:	689b      	ldr	r3, [r3, #8]
 800ba6e:	f003 0307 	and.w	r3, r3, #7
 800ba72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	2b06      	cmp	r3, #6
 800ba78:	d010      	beq.n	800ba9c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	681a      	ldr	r2, [r3, #0]
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	681b      	ldr	r3, [r3, #0]
 800ba84:	f042 0201 	orr.w	r2, r2, #1
 800ba88:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ba8a:	e007      	b.n	800ba9c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	681a      	ldr	r2, [r3, #0]
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	f042 0201 	orr.w	r2, r2, #1
 800ba9a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ba9c:	2300      	movs	r3, #0
}
 800ba9e:	4618      	mov	r0, r3
 800baa0:	3714      	adds	r7, #20
 800baa2:	46bd      	mov	sp, r7
 800baa4:	bc80      	pop	{r7}
 800baa6:	4770      	bx	lr
 800baa8:	40012c00 	.word	0x40012c00
 800baac:	40013400 	.word	0x40013400
 800bab0:	40000400 	.word	0x40000400
 800bab4:	40000800 	.word	0x40000800
 800bab8:	40000c00 	.word	0x40000c00

0800babc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800babc:	b580      	push	{r7, lr}
 800babe:	b082      	sub	sp, #8
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	691b      	ldr	r3, [r3, #16]
 800baca:	f003 0302 	and.w	r3, r3, #2
 800bace:	2b02      	cmp	r3, #2
 800bad0:	d122      	bne.n	800bb18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	68db      	ldr	r3, [r3, #12]
 800bad8:	f003 0302 	and.w	r3, r3, #2
 800badc:	2b02      	cmp	r3, #2
 800bade:	d11b      	bne.n	800bb18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	f06f 0202 	mvn.w	r2, #2
 800bae8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	2201      	movs	r2, #1
 800baee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	699b      	ldr	r3, [r3, #24]
 800baf6:	f003 0303 	and.w	r3, r3, #3
 800bafa:	2b00      	cmp	r3, #0
 800bafc:	d003      	beq.n	800bb06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bafe:	6878      	ldr	r0, [r7, #4]
 800bb00:	f000 f9b4 	bl	800be6c <HAL_TIM_IC_CaptureCallback>
 800bb04:	e005      	b.n	800bb12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	f000 f9a7 	bl	800be5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	f000 f9b6 	bl	800be7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	2200      	movs	r2, #0
 800bb16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	691b      	ldr	r3, [r3, #16]
 800bb1e:	f003 0304 	and.w	r3, r3, #4
 800bb22:	2b04      	cmp	r3, #4
 800bb24:	d122      	bne.n	800bb6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	68db      	ldr	r3, [r3, #12]
 800bb2c:	f003 0304 	and.w	r3, r3, #4
 800bb30:	2b04      	cmp	r3, #4
 800bb32:	d11b      	bne.n	800bb6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	681b      	ldr	r3, [r3, #0]
 800bb38:	f06f 0204 	mvn.w	r2, #4
 800bb3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2202      	movs	r2, #2
 800bb42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	699b      	ldr	r3, [r3, #24]
 800bb4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d003      	beq.n	800bb5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb52:	6878      	ldr	r0, [r7, #4]
 800bb54:	f000 f98a 	bl	800be6c <HAL_TIM_IC_CaptureCallback>
 800bb58:	e005      	b.n	800bb66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb5a:	6878      	ldr	r0, [r7, #4]
 800bb5c:	f000 f97d 	bl	800be5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	f000 f98c 	bl	800be7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	2200      	movs	r2, #0
 800bb6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	691b      	ldr	r3, [r3, #16]
 800bb72:	f003 0308 	and.w	r3, r3, #8
 800bb76:	2b08      	cmp	r3, #8
 800bb78:	d122      	bne.n	800bbc0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	68db      	ldr	r3, [r3, #12]
 800bb80:	f003 0308 	and.w	r3, r3, #8
 800bb84:	2b08      	cmp	r3, #8
 800bb86:	d11b      	bne.n	800bbc0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	f06f 0208 	mvn.w	r2, #8
 800bb90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	2204      	movs	r2, #4
 800bb96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	69db      	ldr	r3, [r3, #28]
 800bb9e:	f003 0303 	and.w	r3, r3, #3
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	d003      	beq.n	800bbae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	f000 f960 	bl	800be6c <HAL_TIM_IC_CaptureCallback>
 800bbac:	e005      	b.n	800bbba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bbae:	6878      	ldr	r0, [r7, #4]
 800bbb0:	f000 f953 	bl	800be5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bbb4:	6878      	ldr	r0, [r7, #4]
 800bbb6:	f000 f962 	bl	800be7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	691b      	ldr	r3, [r3, #16]
 800bbc6:	f003 0310 	and.w	r3, r3, #16
 800bbca:	2b10      	cmp	r3, #16
 800bbcc:	d122      	bne.n	800bc14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	68db      	ldr	r3, [r3, #12]
 800bbd4:	f003 0310 	and.w	r3, r3, #16
 800bbd8:	2b10      	cmp	r3, #16
 800bbda:	d11b      	bne.n	800bc14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	f06f 0210 	mvn.w	r2, #16
 800bbe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2208      	movs	r2, #8
 800bbea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	69db      	ldr	r3, [r3, #28]
 800bbf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bbf6:	2b00      	cmp	r3, #0
 800bbf8:	d003      	beq.n	800bc02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	f000 f936 	bl	800be6c <HAL_TIM_IC_CaptureCallback>
 800bc00:	e005      	b.n	800bc0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	f000 f929 	bl	800be5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc08:	6878      	ldr	r0, [r7, #4]
 800bc0a:	f000 f938 	bl	800be7e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	2200      	movs	r2, #0
 800bc12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	691b      	ldr	r3, [r3, #16]
 800bc1a:	f003 0301 	and.w	r3, r3, #1
 800bc1e:	2b01      	cmp	r3, #1
 800bc20:	d10e      	bne.n	800bc40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	68db      	ldr	r3, [r3, #12]
 800bc28:	f003 0301 	and.w	r3, r3, #1
 800bc2c:	2b01      	cmp	r3, #1
 800bc2e:	d107      	bne.n	800bc40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	681b      	ldr	r3, [r3, #0]
 800bc34:	f06f 0201 	mvn.w	r2, #1
 800bc38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	f7fc fd54 	bl	80086e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	691b      	ldr	r3, [r3, #16]
 800bc46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc4a:	2b80      	cmp	r3, #128	; 0x80
 800bc4c:	d10e      	bne.n	800bc6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	68db      	ldr	r3, [r3, #12]
 800bc54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc58:	2b80      	cmp	r3, #128	; 0x80
 800bc5a:	d107      	bne.n	800bc6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bc64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bc66:	6878      	ldr	r0, [r7, #4]
 800bc68:	f000 faa1 	bl	800c1ae <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	691b      	ldr	r3, [r3, #16]
 800bc72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc76:	2b40      	cmp	r3, #64	; 0x40
 800bc78:	d10e      	bne.n	800bc98 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	68db      	ldr	r3, [r3, #12]
 800bc80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc84:	2b40      	cmp	r3, #64	; 0x40
 800bc86:	d107      	bne.n	800bc98 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bc90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bc92:	6878      	ldr	r0, [r7, #4]
 800bc94:	f000 f8fc 	bl	800be90 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	691b      	ldr	r3, [r3, #16]
 800bc9e:	f003 0320 	and.w	r3, r3, #32
 800bca2:	2b20      	cmp	r3, #32
 800bca4:	d10e      	bne.n	800bcc4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	68db      	ldr	r3, [r3, #12]
 800bcac:	f003 0320 	and.w	r3, r3, #32
 800bcb0:	2b20      	cmp	r3, #32
 800bcb2:	d107      	bne.n	800bcc4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	f06f 0220 	mvn.w	r2, #32
 800bcbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bcbe:	6878      	ldr	r0, [r7, #4]
 800bcc0:	f000 fa6c 	bl	800c19c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bcc4:	bf00      	nop
 800bcc6:	3708      	adds	r7, #8
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bd80      	pop	{r7, pc}

0800bccc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b084      	sub	sp, #16
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	6078      	str	r0, [r7, #4]
 800bcd4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bce0:	2b01      	cmp	r3, #1
 800bce2:	d101      	bne.n	800bce8 <HAL_TIM_ConfigClockSource+0x1c>
 800bce4:	2302      	movs	r3, #2
 800bce6:	e0b4      	b.n	800be52 <HAL_TIM_ConfigClockSource+0x186>
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	2201      	movs	r2, #1
 800bcec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	2202      	movs	r2, #2
 800bcf4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	689b      	ldr	r3, [r3, #8]
 800bcfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800bd06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bd08:	68bb      	ldr	r3, [r7, #8]
 800bd0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bd0e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	68ba      	ldr	r2, [r7, #8]
 800bd16:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd20:	d03e      	beq.n	800bda0 <HAL_TIM_ConfigClockSource+0xd4>
 800bd22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd26:	f200 8087 	bhi.w	800be38 <HAL_TIM_ConfigClockSource+0x16c>
 800bd2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd2e:	f000 8086 	beq.w	800be3e <HAL_TIM_ConfigClockSource+0x172>
 800bd32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd36:	d87f      	bhi.n	800be38 <HAL_TIM_ConfigClockSource+0x16c>
 800bd38:	2b70      	cmp	r3, #112	; 0x70
 800bd3a:	d01a      	beq.n	800bd72 <HAL_TIM_ConfigClockSource+0xa6>
 800bd3c:	2b70      	cmp	r3, #112	; 0x70
 800bd3e:	d87b      	bhi.n	800be38 <HAL_TIM_ConfigClockSource+0x16c>
 800bd40:	2b60      	cmp	r3, #96	; 0x60
 800bd42:	d050      	beq.n	800bde6 <HAL_TIM_ConfigClockSource+0x11a>
 800bd44:	2b60      	cmp	r3, #96	; 0x60
 800bd46:	d877      	bhi.n	800be38 <HAL_TIM_ConfigClockSource+0x16c>
 800bd48:	2b50      	cmp	r3, #80	; 0x50
 800bd4a:	d03c      	beq.n	800bdc6 <HAL_TIM_ConfigClockSource+0xfa>
 800bd4c:	2b50      	cmp	r3, #80	; 0x50
 800bd4e:	d873      	bhi.n	800be38 <HAL_TIM_ConfigClockSource+0x16c>
 800bd50:	2b40      	cmp	r3, #64	; 0x40
 800bd52:	d058      	beq.n	800be06 <HAL_TIM_ConfigClockSource+0x13a>
 800bd54:	2b40      	cmp	r3, #64	; 0x40
 800bd56:	d86f      	bhi.n	800be38 <HAL_TIM_ConfigClockSource+0x16c>
 800bd58:	2b30      	cmp	r3, #48	; 0x30
 800bd5a:	d064      	beq.n	800be26 <HAL_TIM_ConfigClockSource+0x15a>
 800bd5c:	2b30      	cmp	r3, #48	; 0x30
 800bd5e:	d86b      	bhi.n	800be38 <HAL_TIM_ConfigClockSource+0x16c>
 800bd60:	2b20      	cmp	r3, #32
 800bd62:	d060      	beq.n	800be26 <HAL_TIM_ConfigClockSource+0x15a>
 800bd64:	2b20      	cmp	r3, #32
 800bd66:	d867      	bhi.n	800be38 <HAL_TIM_ConfigClockSource+0x16c>
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d05c      	beq.n	800be26 <HAL_TIM_ConfigClockSource+0x15a>
 800bd6c:	2b10      	cmp	r3, #16
 800bd6e:	d05a      	beq.n	800be26 <HAL_TIM_ConfigClockSource+0x15a>
 800bd70:	e062      	b.n	800be38 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bd7e:	683b      	ldr	r3, [r7, #0]
 800bd80:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bd82:	f000 f980 	bl	800c086 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	689b      	ldr	r3, [r3, #8]
 800bd8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bd8e:	68bb      	ldr	r3, [r7, #8]
 800bd90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bd94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	681b      	ldr	r3, [r3, #0]
 800bd9a:	68ba      	ldr	r2, [r7, #8]
 800bd9c:	609a      	str	r2, [r3, #8]
      break;
 800bd9e:	e04f      	b.n	800be40 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bdac:	683b      	ldr	r3, [r7, #0]
 800bdae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bdb0:	f000 f969 	bl	800c086 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	689a      	ldr	r2, [r3, #8]
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bdc2:	609a      	str	r2, [r3, #8]
      break;
 800bdc4:	e03c      	b.n	800be40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bdca:	683b      	ldr	r3, [r7, #0]
 800bdcc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bdd2:	461a      	mov	r2, r3
 800bdd4:	f000 f8e0 	bl	800bf98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	2150      	movs	r1, #80	; 0x50
 800bdde:	4618      	mov	r0, r3
 800bde0:	f000 f937 	bl	800c052 <TIM_ITRx_SetConfig>
      break;
 800bde4:	e02c      	b.n	800be40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bdea:	683b      	ldr	r3, [r7, #0]
 800bdec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bdf2:	461a      	mov	r2, r3
 800bdf4:	f000 f8fe 	bl	800bff4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	2160      	movs	r1, #96	; 0x60
 800bdfe:	4618      	mov	r0, r3
 800be00:	f000 f927 	bl	800c052 <TIM_ITRx_SetConfig>
      break;
 800be04:	e01c      	b.n	800be40 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800be0a:	683b      	ldr	r3, [r7, #0]
 800be0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800be12:	461a      	mov	r2, r3
 800be14:	f000 f8c0 	bl	800bf98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	2140      	movs	r1, #64	; 0x40
 800be1e:	4618      	mov	r0, r3
 800be20:	f000 f917 	bl	800c052 <TIM_ITRx_SetConfig>
      break;
 800be24:	e00c      	b.n	800be40 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	681a      	ldr	r2, [r3, #0]
 800be2a:	683b      	ldr	r3, [r7, #0]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	4619      	mov	r1, r3
 800be30:	4610      	mov	r0, r2
 800be32:	f000 f90e 	bl	800c052 <TIM_ITRx_SetConfig>
      break;
 800be36:	e003      	b.n	800be40 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800be38:	2301      	movs	r3, #1
 800be3a:	73fb      	strb	r3, [r7, #15]
      break;
 800be3c:	e000      	b.n	800be40 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800be3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	2201      	movs	r2, #1
 800be44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	2200      	movs	r2, #0
 800be4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800be50:	7bfb      	ldrb	r3, [r7, #15]
}
 800be52:	4618      	mov	r0, r3
 800be54:	3710      	adds	r7, #16
 800be56:	46bd      	mov	sp, r7
 800be58:	bd80      	pop	{r7, pc}

0800be5a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800be5a:	b480      	push	{r7}
 800be5c:	b083      	sub	sp, #12
 800be5e:	af00      	add	r7, sp, #0
 800be60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800be62:	bf00      	nop
 800be64:	370c      	adds	r7, #12
 800be66:	46bd      	mov	sp, r7
 800be68:	bc80      	pop	{r7}
 800be6a:	4770      	bx	lr

0800be6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800be6c:	b480      	push	{r7}
 800be6e:	b083      	sub	sp, #12
 800be70:	af00      	add	r7, sp, #0
 800be72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800be74:	bf00      	nop
 800be76:	370c      	adds	r7, #12
 800be78:	46bd      	mov	sp, r7
 800be7a:	bc80      	pop	{r7}
 800be7c:	4770      	bx	lr

0800be7e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800be7e:	b480      	push	{r7}
 800be80:	b083      	sub	sp, #12
 800be82:	af00      	add	r7, sp, #0
 800be84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800be86:	bf00      	nop
 800be88:	370c      	adds	r7, #12
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bc80      	pop	{r7}
 800be8e:	4770      	bx	lr

0800be90 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800be90:	b480      	push	{r7}
 800be92:	b083      	sub	sp, #12
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800be98:	bf00      	nop
 800be9a:	370c      	adds	r7, #12
 800be9c:	46bd      	mov	sp, r7
 800be9e:	bc80      	pop	{r7}
 800bea0:	4770      	bx	lr
	...

0800bea4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bea4:	b480      	push	{r7}
 800bea6:	b085      	sub	sp, #20
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	6078      	str	r0, [r7, #4]
 800beac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	4a33      	ldr	r2, [pc, #204]	; (800bf84 <TIM_Base_SetConfig+0xe0>)
 800beb8:	4293      	cmp	r3, r2
 800beba:	d013      	beq.n	800bee4 <TIM_Base_SetConfig+0x40>
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	4a32      	ldr	r2, [pc, #200]	; (800bf88 <TIM_Base_SetConfig+0xe4>)
 800bec0:	4293      	cmp	r3, r2
 800bec2:	d00f      	beq.n	800bee4 <TIM_Base_SetConfig+0x40>
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800beca:	d00b      	beq.n	800bee4 <TIM_Base_SetConfig+0x40>
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	4a2f      	ldr	r2, [pc, #188]	; (800bf8c <TIM_Base_SetConfig+0xe8>)
 800bed0:	4293      	cmp	r3, r2
 800bed2:	d007      	beq.n	800bee4 <TIM_Base_SetConfig+0x40>
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	4a2e      	ldr	r2, [pc, #184]	; (800bf90 <TIM_Base_SetConfig+0xec>)
 800bed8:	4293      	cmp	r3, r2
 800beda:	d003      	beq.n	800bee4 <TIM_Base_SetConfig+0x40>
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	4a2d      	ldr	r2, [pc, #180]	; (800bf94 <TIM_Base_SetConfig+0xf0>)
 800bee0:	4293      	cmp	r3, r2
 800bee2:	d108      	bne.n	800bef6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bee4:	68fb      	ldr	r3, [r7, #12]
 800bee6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800beea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800beec:	683b      	ldr	r3, [r7, #0]
 800beee:	685b      	ldr	r3, [r3, #4]
 800bef0:	68fa      	ldr	r2, [r7, #12]
 800bef2:	4313      	orrs	r3, r2
 800bef4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	4a22      	ldr	r2, [pc, #136]	; (800bf84 <TIM_Base_SetConfig+0xe0>)
 800befa:	4293      	cmp	r3, r2
 800befc:	d013      	beq.n	800bf26 <TIM_Base_SetConfig+0x82>
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	4a21      	ldr	r2, [pc, #132]	; (800bf88 <TIM_Base_SetConfig+0xe4>)
 800bf02:	4293      	cmp	r3, r2
 800bf04:	d00f      	beq.n	800bf26 <TIM_Base_SetConfig+0x82>
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf0c:	d00b      	beq.n	800bf26 <TIM_Base_SetConfig+0x82>
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	4a1e      	ldr	r2, [pc, #120]	; (800bf8c <TIM_Base_SetConfig+0xe8>)
 800bf12:	4293      	cmp	r3, r2
 800bf14:	d007      	beq.n	800bf26 <TIM_Base_SetConfig+0x82>
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	4a1d      	ldr	r2, [pc, #116]	; (800bf90 <TIM_Base_SetConfig+0xec>)
 800bf1a:	4293      	cmp	r3, r2
 800bf1c:	d003      	beq.n	800bf26 <TIM_Base_SetConfig+0x82>
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	4a1c      	ldr	r2, [pc, #112]	; (800bf94 <TIM_Base_SetConfig+0xf0>)
 800bf22:	4293      	cmp	r3, r2
 800bf24:	d108      	bne.n	800bf38 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bf26:	68fb      	ldr	r3, [r7, #12]
 800bf28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bf2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bf2e:	683b      	ldr	r3, [r7, #0]
 800bf30:	68db      	ldr	r3, [r3, #12]
 800bf32:	68fa      	ldr	r2, [r7, #12]
 800bf34:	4313      	orrs	r3, r2
 800bf36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bf3e:	683b      	ldr	r3, [r7, #0]
 800bf40:	695b      	ldr	r3, [r3, #20]
 800bf42:	4313      	orrs	r3, r2
 800bf44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	68fa      	ldr	r2, [r7, #12]
 800bf4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bf4c:	683b      	ldr	r3, [r7, #0]
 800bf4e:	689a      	ldr	r2, [r3, #8]
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	681a      	ldr	r2, [r3, #0]
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	4a09      	ldr	r2, [pc, #36]	; (800bf84 <TIM_Base_SetConfig+0xe0>)
 800bf60:	4293      	cmp	r3, r2
 800bf62:	d003      	beq.n	800bf6c <TIM_Base_SetConfig+0xc8>
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	4a08      	ldr	r2, [pc, #32]	; (800bf88 <TIM_Base_SetConfig+0xe4>)
 800bf68:	4293      	cmp	r3, r2
 800bf6a:	d103      	bne.n	800bf74 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bf6c:	683b      	ldr	r3, [r7, #0]
 800bf6e:	691a      	ldr	r2, [r3, #16]
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	2201      	movs	r2, #1
 800bf78:	615a      	str	r2, [r3, #20]
}
 800bf7a:	bf00      	nop
 800bf7c:	3714      	adds	r7, #20
 800bf7e:	46bd      	mov	sp, r7
 800bf80:	bc80      	pop	{r7}
 800bf82:	4770      	bx	lr
 800bf84:	40012c00 	.word	0x40012c00
 800bf88:	40013400 	.word	0x40013400
 800bf8c:	40000400 	.word	0x40000400
 800bf90:	40000800 	.word	0x40000800
 800bf94:	40000c00 	.word	0x40000c00

0800bf98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bf98:	b480      	push	{r7}
 800bf9a:	b087      	sub	sp, #28
 800bf9c:	af00      	add	r7, sp, #0
 800bf9e:	60f8      	str	r0, [r7, #12]
 800bfa0:	60b9      	str	r1, [r7, #8]
 800bfa2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	6a1b      	ldr	r3, [r3, #32]
 800bfa8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	6a1b      	ldr	r3, [r3, #32]
 800bfae:	f023 0201 	bic.w	r2, r3, #1
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	699b      	ldr	r3, [r3, #24]
 800bfba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bfbc:	693b      	ldr	r3, [r7, #16]
 800bfbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bfc2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	011b      	lsls	r3, r3, #4
 800bfc8:	693a      	ldr	r2, [r7, #16]
 800bfca:	4313      	orrs	r3, r2
 800bfcc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bfce:	697b      	ldr	r3, [r7, #20]
 800bfd0:	f023 030a 	bic.w	r3, r3, #10
 800bfd4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bfd6:	697a      	ldr	r2, [r7, #20]
 800bfd8:	68bb      	ldr	r3, [r7, #8]
 800bfda:	4313      	orrs	r3, r2
 800bfdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bfde:	68fb      	ldr	r3, [r7, #12]
 800bfe0:	693a      	ldr	r2, [r7, #16]
 800bfe2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	697a      	ldr	r2, [r7, #20]
 800bfe8:	621a      	str	r2, [r3, #32]
}
 800bfea:	bf00      	nop
 800bfec:	371c      	adds	r7, #28
 800bfee:	46bd      	mov	sp, r7
 800bff0:	bc80      	pop	{r7}
 800bff2:	4770      	bx	lr

0800bff4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bff4:	b480      	push	{r7}
 800bff6:	b087      	sub	sp, #28
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	60f8      	str	r0, [r7, #12]
 800bffc:	60b9      	str	r1, [r7, #8]
 800bffe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	6a1b      	ldr	r3, [r3, #32]
 800c004:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	6a1b      	ldr	r3, [r3, #32]
 800c00a:	f023 0210 	bic.w	r2, r3, #16
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	699b      	ldr	r3, [r3, #24]
 800c016:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c018:	693b      	ldr	r3, [r7, #16]
 800c01a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c01e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	031b      	lsls	r3, r3, #12
 800c024:	693a      	ldr	r2, [r7, #16]
 800c026:	4313      	orrs	r3, r2
 800c028:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c02a:	697b      	ldr	r3, [r7, #20]
 800c02c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c030:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c032:	68bb      	ldr	r3, [r7, #8]
 800c034:	011b      	lsls	r3, r3, #4
 800c036:	697a      	ldr	r2, [r7, #20]
 800c038:	4313      	orrs	r3, r2
 800c03a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c03c:	68fb      	ldr	r3, [r7, #12]
 800c03e:	693a      	ldr	r2, [r7, #16]
 800c040:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	697a      	ldr	r2, [r7, #20]
 800c046:	621a      	str	r2, [r3, #32]
}
 800c048:	bf00      	nop
 800c04a:	371c      	adds	r7, #28
 800c04c:	46bd      	mov	sp, r7
 800c04e:	bc80      	pop	{r7}
 800c050:	4770      	bx	lr

0800c052 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c052:	b480      	push	{r7}
 800c054:	b085      	sub	sp, #20
 800c056:	af00      	add	r7, sp, #0
 800c058:	6078      	str	r0, [r7, #4]
 800c05a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	689b      	ldr	r3, [r3, #8]
 800c060:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c068:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c06a:	683a      	ldr	r2, [r7, #0]
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	4313      	orrs	r3, r2
 800c070:	f043 0307 	orr.w	r3, r3, #7
 800c074:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	68fa      	ldr	r2, [r7, #12]
 800c07a:	609a      	str	r2, [r3, #8]
}
 800c07c:	bf00      	nop
 800c07e:	3714      	adds	r7, #20
 800c080:	46bd      	mov	sp, r7
 800c082:	bc80      	pop	{r7}
 800c084:	4770      	bx	lr

0800c086 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c086:	b480      	push	{r7}
 800c088:	b087      	sub	sp, #28
 800c08a:	af00      	add	r7, sp, #0
 800c08c:	60f8      	str	r0, [r7, #12]
 800c08e:	60b9      	str	r1, [r7, #8]
 800c090:	607a      	str	r2, [r7, #4]
 800c092:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	689b      	ldr	r3, [r3, #8]
 800c098:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c09a:	697b      	ldr	r3, [r7, #20]
 800c09c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c0a0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c0a2:	683b      	ldr	r3, [r7, #0]
 800c0a4:	021a      	lsls	r2, r3, #8
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	431a      	orrs	r2, r3
 800c0aa:	68bb      	ldr	r3, [r7, #8]
 800c0ac:	4313      	orrs	r3, r2
 800c0ae:	697a      	ldr	r2, [r7, #20]
 800c0b0:	4313      	orrs	r3, r2
 800c0b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c0b4:	68fb      	ldr	r3, [r7, #12]
 800c0b6:	697a      	ldr	r2, [r7, #20]
 800c0b8:	609a      	str	r2, [r3, #8]
}
 800c0ba:	bf00      	nop
 800c0bc:	371c      	adds	r7, #28
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	bc80      	pop	{r7}
 800c0c2:	4770      	bx	lr

0800c0c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	b085      	sub	sp, #20
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
 800c0cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c0d4:	2b01      	cmp	r3, #1
 800c0d6:	d101      	bne.n	800c0dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c0d8:	2302      	movs	r3, #2
 800c0da:	e050      	b.n	800c17e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2201      	movs	r2, #1
 800c0e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	2202      	movs	r2, #2
 800c0e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	685b      	ldr	r3, [r3, #4]
 800c0f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	689b      	ldr	r3, [r3, #8]
 800c0fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c102:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c104:	683b      	ldr	r3, [r7, #0]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	68fa      	ldr	r2, [r7, #12]
 800c10a:	4313      	orrs	r3, r2
 800c10c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	68fa      	ldr	r2, [r7, #12]
 800c114:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	4a1b      	ldr	r2, [pc, #108]	; (800c188 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800c11c:	4293      	cmp	r3, r2
 800c11e:	d018      	beq.n	800c152 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	4a19      	ldr	r2, [pc, #100]	; (800c18c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c126:	4293      	cmp	r3, r2
 800c128:	d013      	beq.n	800c152 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c132:	d00e      	beq.n	800c152 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	681b      	ldr	r3, [r3, #0]
 800c138:	4a15      	ldr	r2, [pc, #84]	; (800c190 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c13a:	4293      	cmp	r3, r2
 800c13c:	d009      	beq.n	800c152 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	4a14      	ldr	r2, [pc, #80]	; (800c194 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800c144:	4293      	cmp	r3, r2
 800c146:	d004      	beq.n	800c152 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	4a12      	ldr	r2, [pc, #72]	; (800c198 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800c14e:	4293      	cmp	r3, r2
 800c150:	d10c      	bne.n	800c16c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c152:	68bb      	ldr	r3, [r7, #8]
 800c154:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c158:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	685b      	ldr	r3, [r3, #4]
 800c15e:	68ba      	ldr	r2, [r7, #8]
 800c160:	4313      	orrs	r3, r2
 800c162:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	68ba      	ldr	r2, [r7, #8]
 800c16a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2201      	movs	r2, #1
 800c170:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2200      	movs	r2, #0
 800c178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c17c:	2300      	movs	r3, #0
}
 800c17e:	4618      	mov	r0, r3
 800c180:	3714      	adds	r7, #20
 800c182:	46bd      	mov	sp, r7
 800c184:	bc80      	pop	{r7}
 800c186:	4770      	bx	lr
 800c188:	40012c00 	.word	0x40012c00
 800c18c:	40013400 	.word	0x40013400
 800c190:	40000400 	.word	0x40000400
 800c194:	40000800 	.word	0x40000800
 800c198:	40000c00 	.word	0x40000c00

0800c19c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c19c:	b480      	push	{r7}
 800c19e:	b083      	sub	sp, #12
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c1a4:	bf00      	nop
 800c1a6:	370c      	adds	r7, #12
 800c1a8:	46bd      	mov	sp, r7
 800c1aa:	bc80      	pop	{r7}
 800c1ac:	4770      	bx	lr

0800c1ae <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c1ae:	b480      	push	{r7}
 800c1b0:	b083      	sub	sp, #12
 800c1b2:	af00      	add	r7, sp, #0
 800c1b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c1b6:	bf00      	nop
 800c1b8:	370c      	adds	r7, #12
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bc80      	pop	{r7}
 800c1be:	4770      	bx	lr

0800c1c0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b082      	sub	sp, #8
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d101      	bne.n	800c1d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	e042      	b.n	800c258 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c1d8:	b2db      	uxtb	r3, r3
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d106      	bne.n	800c1ec <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c1e6:	6878      	ldr	r0, [r7, #4]
 800c1e8:	f7fc fe1a 	bl	8008e20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2224      	movs	r2, #36	; 0x24
 800c1f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	68da      	ldr	r2, [r3, #12]
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c202:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c204:	6878      	ldr	r0, [r7, #4]
 800c206:	f000 fcb5 	bl	800cb74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	691a      	ldr	r2, [r3, #16]
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	681b      	ldr	r3, [r3, #0]
 800c214:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c218:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	695a      	ldr	r2, [r3, #20]
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c228:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	68da      	ldr	r2, [r3, #12]
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c238:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	2200      	movs	r2, #0
 800c23e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	2220      	movs	r2, #32
 800c244:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2220      	movs	r2, #32
 800c24c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	2200      	movs	r2, #0
 800c254:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c256:	2300      	movs	r3, #0
}
 800c258:	4618      	mov	r0, r3
 800c25a:	3708      	adds	r7, #8
 800c25c:	46bd      	mov	sp, r7
 800c25e:	bd80      	pop	{r7, pc}

0800c260 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c260:	b480      	push	{r7}
 800c262:	b085      	sub	sp, #20
 800c264:	af00      	add	r7, sp, #0
 800c266:	60f8      	str	r0, [r7, #12]
 800c268:	60b9      	str	r1, [r7, #8]
 800c26a:	4613      	mov	r3, r2
 800c26c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c26e:	68fb      	ldr	r3, [r7, #12]
 800c270:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c274:	b2db      	uxtb	r3, r3
 800c276:	2b20      	cmp	r3, #32
 800c278:	d121      	bne.n	800c2be <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c27a:	68bb      	ldr	r3, [r7, #8]
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d002      	beq.n	800c286 <HAL_UART_Transmit_IT+0x26>
 800c280:	88fb      	ldrh	r3, [r7, #6]
 800c282:	2b00      	cmp	r3, #0
 800c284:	d101      	bne.n	800c28a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800c286:	2301      	movs	r3, #1
 800c288:	e01a      	b.n	800c2c0 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800c28a:	68fb      	ldr	r3, [r7, #12]
 800c28c:	68ba      	ldr	r2, [r7, #8]
 800c28e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800c290:	68fb      	ldr	r3, [r7, #12]
 800c292:	88fa      	ldrh	r2, [r7, #6]
 800c294:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c296:	68fb      	ldr	r3, [r7, #12]
 800c298:	88fa      	ldrh	r2, [r7, #6]
 800c29a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	2200      	movs	r2, #0
 800c2a0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	2221      	movs	r2, #33	; 0x21
 800c2a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	68da      	ldr	r2, [r3, #12]
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c2b8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800c2ba:	2300      	movs	r3, #0
 800c2bc:	e000      	b.n	800c2c0 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800c2be:	2302      	movs	r3, #2
  }
}
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	3714      	adds	r7, #20
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bc80      	pop	{r7}
 800c2c8:	4770      	bx	lr
	...

0800c2cc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b0ba      	sub	sp, #232	; 0xe8
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	68db      	ldr	r3, [r3, #12]
 800c2e4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	695b      	ldr	r3, [r3, #20]
 800c2ee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800c2f2:	2300      	movs	r3, #0
 800c2f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800c2f8:	2300      	movs	r3, #0
 800c2fa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c2fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c302:	f003 030f 	and.w	r3, r3, #15
 800c306:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800c30a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d10f      	bne.n	800c332 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c316:	f003 0320 	and.w	r3, r3, #32
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d009      	beq.n	800c332 <HAL_UART_IRQHandler+0x66>
 800c31e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c322:	f003 0320 	and.w	r3, r3, #32
 800c326:	2b00      	cmp	r3, #0
 800c328:	d003      	beq.n	800c332 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c32a:	6878      	ldr	r0, [r7, #4]
 800c32c:	f000 fb63 	bl	800c9f6 <UART_Receive_IT>
      return;
 800c330:	e25b      	b.n	800c7ea <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c332:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c336:	2b00      	cmp	r3, #0
 800c338:	f000 80de 	beq.w	800c4f8 <HAL_UART_IRQHandler+0x22c>
 800c33c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c340:	f003 0301 	and.w	r3, r3, #1
 800c344:	2b00      	cmp	r3, #0
 800c346:	d106      	bne.n	800c356 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c34c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c350:	2b00      	cmp	r3, #0
 800c352:	f000 80d1 	beq.w	800c4f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c356:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c35a:	f003 0301 	and.w	r3, r3, #1
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d00b      	beq.n	800c37a <HAL_UART_IRQHandler+0xae>
 800c362:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c36a:	2b00      	cmp	r3, #0
 800c36c:	d005      	beq.n	800c37a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c372:	f043 0201 	orr.w	r2, r3, #1
 800c376:	687b      	ldr	r3, [r7, #4]
 800c378:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c37a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c37e:	f003 0304 	and.w	r3, r3, #4
 800c382:	2b00      	cmp	r3, #0
 800c384:	d00b      	beq.n	800c39e <HAL_UART_IRQHandler+0xd2>
 800c386:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c38a:	f003 0301 	and.w	r3, r3, #1
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d005      	beq.n	800c39e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c396:	f043 0202 	orr.w	r2, r3, #2
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c39e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3a2:	f003 0302 	and.w	r3, r3, #2
 800c3a6:	2b00      	cmp	r3, #0
 800c3a8:	d00b      	beq.n	800c3c2 <HAL_UART_IRQHandler+0xf6>
 800c3aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c3ae:	f003 0301 	and.w	r3, r3, #1
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d005      	beq.n	800c3c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3ba:	f043 0204 	orr.w	r2, r3, #4
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c3c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c3c6:	f003 0308 	and.w	r3, r3, #8
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	d011      	beq.n	800c3f2 <HAL_UART_IRQHandler+0x126>
 800c3ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c3d2:	f003 0320 	and.w	r3, r3, #32
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d105      	bne.n	800c3e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c3da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c3de:	f003 0301 	and.w	r3, r3, #1
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d005      	beq.n	800c3f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3ea:	f043 0208 	orr.w	r2, r3, #8
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c3f2:	687b      	ldr	r3, [r7, #4]
 800c3f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	f000 81f2 	beq.w	800c7e0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c3fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c400:	f003 0320 	and.w	r3, r3, #32
 800c404:	2b00      	cmp	r3, #0
 800c406:	d008      	beq.n	800c41a <HAL_UART_IRQHandler+0x14e>
 800c408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c40c:	f003 0320 	and.w	r3, r3, #32
 800c410:	2b00      	cmp	r3, #0
 800c412:	d002      	beq.n	800c41a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c414:	6878      	ldr	r0, [r7, #4]
 800c416:	f000 faee 	bl	800c9f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	695b      	ldr	r3, [r3, #20]
 800c420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c424:	2b00      	cmp	r3, #0
 800c426:	bf14      	ite	ne
 800c428:	2301      	movne	r3, #1
 800c42a:	2300      	moveq	r3, #0
 800c42c:	b2db      	uxtb	r3, r3
 800c42e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c436:	f003 0308 	and.w	r3, r3, #8
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d103      	bne.n	800c446 <HAL_UART_IRQHandler+0x17a>
 800c43e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c442:	2b00      	cmp	r3, #0
 800c444:	d04f      	beq.n	800c4e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	f000 f9f8 	bl	800c83c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	695b      	ldr	r3, [r3, #20]
 800c452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c456:	2b00      	cmp	r3, #0
 800c458:	d041      	beq.n	800c4de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c45a:	687b      	ldr	r3, [r7, #4]
 800c45c:	681b      	ldr	r3, [r3, #0]
 800c45e:	3314      	adds	r3, #20
 800c460:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c464:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c468:	e853 3f00 	ldrex	r3, [r3]
 800c46c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c470:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c474:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c478:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	3314      	adds	r3, #20
 800c482:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c486:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c48a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c48e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c492:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c496:	e841 2300 	strex	r3, r2, [r1]
 800c49a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c49e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d1d9      	bne.n	800c45a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d013      	beq.n	800c4d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4b2:	4a7e      	ldr	r2, [pc, #504]	; (800c6ac <HAL_UART_IRQHandler+0x3e0>)
 800c4b4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4ba:	4618      	mov	r0, r3
 800c4bc:	f7fd f86c 	bl	8009598 <HAL_DMA_Abort_IT>
 800c4c0:	4603      	mov	r3, r0
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d016      	beq.n	800c4f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c4cc:	687a      	ldr	r2, [r7, #4]
 800c4ce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c4d0:	4610      	mov	r0, r2
 800c4d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4d4:	e00e      	b.n	800c4f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f000 f99c 	bl	800c814 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4dc:	e00a      	b.n	800c4f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	f000 f998 	bl	800c814 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4e4:	e006      	b.n	800c4f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c4e6:	6878      	ldr	r0, [r7, #4]
 800c4e8:	f000 f994 	bl	800c814 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	2200      	movs	r2, #0
 800c4f0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800c4f2:	e175      	b.n	800c7e0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c4f4:	bf00      	nop
    return;
 800c4f6:	e173      	b.n	800c7e0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4fc:	2b01      	cmp	r3, #1
 800c4fe:	f040 814f 	bne.w	800c7a0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c502:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c506:	f003 0310 	and.w	r3, r3, #16
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	f000 8148 	beq.w	800c7a0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c510:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c514:	f003 0310 	and.w	r3, r3, #16
 800c518:	2b00      	cmp	r3, #0
 800c51a:	f000 8141 	beq.w	800c7a0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c51e:	2300      	movs	r3, #0
 800c520:	60bb      	str	r3, [r7, #8]
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	681b      	ldr	r3, [r3, #0]
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	60bb      	str	r3, [r7, #8]
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	685b      	ldr	r3, [r3, #4]
 800c530:	60bb      	str	r3, [r7, #8]
 800c532:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	695b      	ldr	r3, [r3, #20]
 800c53a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c53e:	2b00      	cmp	r3, #0
 800c540:	f000 80b6 	beq.w	800c6b0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c548:	681b      	ldr	r3, [r3, #0]
 800c54a:	685b      	ldr	r3, [r3, #4]
 800c54c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c550:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c554:	2b00      	cmp	r3, #0
 800c556:	f000 8145 	beq.w	800c7e4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c55a:	687b      	ldr	r3, [r7, #4]
 800c55c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c55e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c562:	429a      	cmp	r2, r3
 800c564:	f080 813e 	bcs.w	800c7e4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c56e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c574:	699b      	ldr	r3, [r3, #24]
 800c576:	2b20      	cmp	r3, #32
 800c578:	f000 8088 	beq.w	800c68c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	681b      	ldr	r3, [r3, #0]
 800c580:	330c      	adds	r3, #12
 800c582:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c586:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c58a:	e853 3f00 	ldrex	r3, [r3]
 800c58e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c592:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c596:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c59a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	330c      	adds	r3, #12
 800c5a4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c5a8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c5ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5b0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c5b4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c5b8:	e841 2300 	strex	r3, r2, [r1]
 800c5bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c5c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d1d9      	bne.n	800c57c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	3314      	adds	r3, #20
 800c5ce:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c5d2:	e853 3f00 	ldrex	r3, [r3]
 800c5d6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c5d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c5da:	f023 0301 	bic.w	r3, r3, #1
 800c5de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	3314      	adds	r3, #20
 800c5e8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c5ec:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c5f0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5f2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c5f4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c5f8:	e841 2300 	strex	r3, r2, [r1]
 800c5fc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c5fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c600:	2b00      	cmp	r3, #0
 800c602:	d1e1      	bne.n	800c5c8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	3314      	adds	r3, #20
 800c60a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c60c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c60e:	e853 3f00 	ldrex	r3, [r3]
 800c612:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c614:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c616:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c61a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	3314      	adds	r3, #20
 800c624:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c628:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c62a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c62c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c62e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c630:	e841 2300 	strex	r3, r2, [r1]
 800c634:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c636:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d1e3      	bne.n	800c604 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	2220      	movs	r2, #32
 800c640:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	2200      	movs	r2, #0
 800c648:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c64a:	687b      	ldr	r3, [r7, #4]
 800c64c:	681b      	ldr	r3, [r3, #0]
 800c64e:	330c      	adds	r3, #12
 800c650:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c652:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c654:	e853 3f00 	ldrex	r3, [r3]
 800c658:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c65a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c65c:	f023 0310 	bic.w	r3, r3, #16
 800c660:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	330c      	adds	r3, #12
 800c66a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c66e:	65ba      	str	r2, [r7, #88]	; 0x58
 800c670:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c672:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c674:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c676:	e841 2300 	strex	r3, r2, [r1]
 800c67a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c67c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d1e3      	bne.n	800c64a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c686:	4618      	mov	r0, r3
 800c688:	f7fc ff4b 	bl	8009522 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2202      	movs	r2, #2
 800c690:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c69a:	b29b      	uxth	r3, r3
 800c69c:	1ad3      	subs	r3, r2, r3
 800c69e:	b29b      	uxth	r3, r3
 800c6a0:	4619      	mov	r1, r3
 800c6a2:	6878      	ldr	r0, [r7, #4]
 800c6a4:	f000 f8bf 	bl	800c826 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c6a8:	e09c      	b.n	800c7e4 <HAL_UART_IRQHandler+0x518>
 800c6aa:	bf00      	nop
 800c6ac:	0800c901 	.word	0x0800c901
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c6b8:	b29b      	uxth	r3, r3
 800c6ba:	1ad3      	subs	r3, r2, r3
 800c6bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c6c4:	b29b      	uxth	r3, r3
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	f000 808e 	beq.w	800c7e8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800c6cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	f000 8089 	beq.w	800c7e8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c6d6:	687b      	ldr	r3, [r7, #4]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	330c      	adds	r3, #12
 800c6dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6e0:	e853 3f00 	ldrex	r3, [r3]
 800c6e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c6e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c6ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	330c      	adds	r3, #12
 800c6f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c6fa:	647a      	str	r2, [r7, #68]	; 0x44
 800c6fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c700:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c702:	e841 2300 	strex	r3, r2, [r1]
 800c706:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c708:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d1e3      	bne.n	800c6d6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	3314      	adds	r3, #20
 800c714:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c718:	e853 3f00 	ldrex	r3, [r3]
 800c71c:	623b      	str	r3, [r7, #32]
   return(result);
 800c71e:	6a3b      	ldr	r3, [r7, #32]
 800c720:	f023 0301 	bic.w	r3, r3, #1
 800c724:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	3314      	adds	r3, #20
 800c72e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c732:	633a      	str	r2, [r7, #48]	; 0x30
 800c734:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c736:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c738:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c73a:	e841 2300 	strex	r3, r2, [r1]
 800c73e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c742:	2b00      	cmp	r3, #0
 800c744:	d1e3      	bne.n	800c70e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2220      	movs	r2, #32
 800c74a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	2200      	movs	r2, #0
 800c752:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	330c      	adds	r3, #12
 800c75a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c75c:	693b      	ldr	r3, [r7, #16]
 800c75e:	e853 3f00 	ldrex	r3, [r3]
 800c762:	60fb      	str	r3, [r7, #12]
   return(result);
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	f023 0310 	bic.w	r3, r3, #16
 800c76a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	330c      	adds	r3, #12
 800c774:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c778:	61fa      	str	r2, [r7, #28]
 800c77a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c77c:	69b9      	ldr	r1, [r7, #24]
 800c77e:	69fa      	ldr	r2, [r7, #28]
 800c780:	e841 2300 	strex	r3, r2, [r1]
 800c784:	617b      	str	r3, [r7, #20]
   return(result);
 800c786:	697b      	ldr	r3, [r7, #20]
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d1e3      	bne.n	800c754 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	2202      	movs	r2, #2
 800c790:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c792:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c796:	4619      	mov	r1, r3
 800c798:	6878      	ldr	r0, [r7, #4]
 800c79a:	f000 f844 	bl	800c826 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c79e:	e023      	b.n	800c7e8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c7a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d009      	beq.n	800c7c0 <HAL_UART_IRQHandler+0x4f4>
 800c7ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c7b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d003      	beq.n	800c7c0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800c7b8:	6878      	ldr	r0, [r7, #4]
 800c7ba:	f000 f8b5 	bl	800c928 <UART_Transmit_IT>
    return;
 800c7be:	e014      	b.n	800c7ea <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c7c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d00e      	beq.n	800c7ea <HAL_UART_IRQHandler+0x51e>
 800c7cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c7d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d008      	beq.n	800c7ea <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800c7d8:	6878      	ldr	r0, [r7, #4]
 800c7da:	f000 f8f4 	bl	800c9c6 <UART_EndTransmit_IT>
    return;
 800c7de:	e004      	b.n	800c7ea <HAL_UART_IRQHandler+0x51e>
    return;
 800c7e0:	bf00      	nop
 800c7e2:	e002      	b.n	800c7ea <HAL_UART_IRQHandler+0x51e>
      return;
 800c7e4:	bf00      	nop
 800c7e6:	e000      	b.n	800c7ea <HAL_UART_IRQHandler+0x51e>
      return;
 800c7e8:	bf00      	nop
  }
}
 800c7ea:	37e8      	adds	r7, #232	; 0xe8
 800c7ec:	46bd      	mov	sp, r7
 800c7ee:	bd80      	pop	{r7, pc}

0800c7f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c7f0:	b480      	push	{r7}
 800c7f2:	b083      	sub	sp, #12
 800c7f4:	af00      	add	r7, sp, #0
 800c7f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c7f8:	bf00      	nop
 800c7fa:	370c      	adds	r7, #12
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bc80      	pop	{r7}
 800c800:	4770      	bx	lr

0800c802 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c802:	b480      	push	{r7}
 800c804:	b083      	sub	sp, #12
 800c806:	af00      	add	r7, sp, #0
 800c808:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800c80a:	bf00      	nop
 800c80c:	370c      	adds	r7, #12
 800c80e:	46bd      	mov	sp, r7
 800c810:	bc80      	pop	{r7}
 800c812:	4770      	bx	lr

0800c814 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c814:	b480      	push	{r7}
 800c816:	b083      	sub	sp, #12
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c81c:	bf00      	nop
 800c81e:	370c      	adds	r7, #12
 800c820:	46bd      	mov	sp, r7
 800c822:	bc80      	pop	{r7}
 800c824:	4770      	bx	lr

0800c826 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c826:	b480      	push	{r7}
 800c828:	b083      	sub	sp, #12
 800c82a:	af00      	add	r7, sp, #0
 800c82c:	6078      	str	r0, [r7, #4]
 800c82e:	460b      	mov	r3, r1
 800c830:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c832:	bf00      	nop
 800c834:	370c      	adds	r7, #12
 800c836:	46bd      	mov	sp, r7
 800c838:	bc80      	pop	{r7}
 800c83a:	4770      	bx	lr

0800c83c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c83c:	b480      	push	{r7}
 800c83e:	b095      	sub	sp, #84	; 0x54
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	330c      	adds	r3, #12
 800c84a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c84c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c84e:	e853 3f00 	ldrex	r3, [r3]
 800c852:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c856:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c85a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	330c      	adds	r3, #12
 800c862:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c864:	643a      	str	r2, [r7, #64]	; 0x40
 800c866:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c868:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c86a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c86c:	e841 2300 	strex	r3, r2, [r1]
 800c870:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c874:	2b00      	cmp	r3, #0
 800c876:	d1e5      	bne.n	800c844 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	681b      	ldr	r3, [r3, #0]
 800c87c:	3314      	adds	r3, #20
 800c87e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c880:	6a3b      	ldr	r3, [r7, #32]
 800c882:	e853 3f00 	ldrex	r3, [r3]
 800c886:	61fb      	str	r3, [r7, #28]
   return(result);
 800c888:	69fb      	ldr	r3, [r7, #28]
 800c88a:	f023 0301 	bic.w	r3, r3, #1
 800c88e:	64bb      	str	r3, [r7, #72]	; 0x48
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	3314      	adds	r3, #20
 800c896:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c898:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c89a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c89c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c89e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8a0:	e841 2300 	strex	r3, r2, [r1]
 800c8a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d1e5      	bne.n	800c878 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8b0:	2b01      	cmp	r3, #1
 800c8b2:	d119      	bne.n	800c8e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	681b      	ldr	r3, [r3, #0]
 800c8b8:	330c      	adds	r3, #12
 800c8ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	e853 3f00 	ldrex	r3, [r3]
 800c8c2:	60bb      	str	r3, [r7, #8]
   return(result);
 800c8c4:	68bb      	ldr	r3, [r7, #8]
 800c8c6:	f023 0310 	bic.w	r3, r3, #16
 800c8ca:	647b      	str	r3, [r7, #68]	; 0x44
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	330c      	adds	r3, #12
 800c8d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c8d4:	61ba      	str	r2, [r7, #24]
 800c8d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8d8:	6979      	ldr	r1, [r7, #20]
 800c8da:	69ba      	ldr	r2, [r7, #24]
 800c8dc:	e841 2300 	strex	r3, r2, [r1]
 800c8e0:	613b      	str	r3, [r7, #16]
   return(result);
 800c8e2:	693b      	ldr	r3, [r7, #16]
 800c8e4:	2b00      	cmp	r3, #0
 800c8e6:	d1e5      	bne.n	800c8b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2220      	movs	r2, #32
 800c8ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	2200      	movs	r2, #0
 800c8f4:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c8f6:	bf00      	nop
 800c8f8:	3754      	adds	r7, #84	; 0x54
 800c8fa:	46bd      	mov	sp, r7
 800c8fc:	bc80      	pop	{r7}
 800c8fe:	4770      	bx	lr

0800c900 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c900:	b580      	push	{r7, lr}
 800c902:	b084      	sub	sp, #16
 800c904:	af00      	add	r7, sp, #0
 800c906:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c90c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	2200      	movs	r2, #0
 800c912:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c914:	68fb      	ldr	r3, [r7, #12]
 800c916:	2200      	movs	r2, #0
 800c918:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c91a:	68f8      	ldr	r0, [r7, #12]
 800c91c:	f7ff ff7a 	bl	800c814 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c920:	bf00      	nop
 800c922:	3710      	adds	r7, #16
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}

0800c928 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c928:	b480      	push	{r7}
 800c92a:	b085      	sub	sp, #20
 800c92c:	af00      	add	r7, sp, #0
 800c92e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c936:	b2db      	uxtb	r3, r3
 800c938:	2b21      	cmp	r3, #33	; 0x21
 800c93a:	d13e      	bne.n	800c9ba <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	689b      	ldr	r3, [r3, #8]
 800c940:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c944:	d114      	bne.n	800c970 <UART_Transmit_IT+0x48>
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	691b      	ldr	r3, [r3, #16]
 800c94a:	2b00      	cmp	r3, #0
 800c94c:	d110      	bne.n	800c970 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	6a1b      	ldr	r3, [r3, #32]
 800c952:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c954:	68fb      	ldr	r3, [r7, #12]
 800c956:	881b      	ldrh	r3, [r3, #0]
 800c958:	461a      	mov	r2, r3
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c962:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	6a1b      	ldr	r3, [r3, #32]
 800c968:	1c9a      	adds	r2, r3, #2
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	621a      	str	r2, [r3, #32]
 800c96e:	e008      	b.n	800c982 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	6a1b      	ldr	r3, [r3, #32]
 800c974:	1c59      	adds	r1, r3, #1
 800c976:	687a      	ldr	r2, [r7, #4]
 800c978:	6211      	str	r1, [r2, #32]
 800c97a:	781a      	ldrb	r2, [r3, #0]
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	681b      	ldr	r3, [r3, #0]
 800c980:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c986:	b29b      	uxth	r3, r3
 800c988:	3b01      	subs	r3, #1
 800c98a:	b29b      	uxth	r3, r3
 800c98c:	687a      	ldr	r2, [r7, #4]
 800c98e:	4619      	mov	r1, r3
 800c990:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c992:	2b00      	cmp	r3, #0
 800c994:	d10f      	bne.n	800c9b6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	681b      	ldr	r3, [r3, #0]
 800c99a:	68da      	ldr	r2, [r3, #12]
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c9a4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	68da      	ldr	r2, [r3, #12]
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c9b4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	e000      	b.n	800c9bc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c9ba:	2302      	movs	r3, #2
  }
}
 800c9bc:	4618      	mov	r0, r3
 800c9be:	3714      	adds	r7, #20
 800c9c0:	46bd      	mov	sp, r7
 800c9c2:	bc80      	pop	{r7}
 800c9c4:	4770      	bx	lr

0800c9c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c9c6:	b580      	push	{r7, lr}
 800c9c8:	b082      	sub	sp, #8
 800c9ca:	af00      	add	r7, sp, #0
 800c9cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	68da      	ldr	r2, [r3, #12]
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c9dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	2220      	movs	r2, #32
 800c9e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c9e6:	6878      	ldr	r0, [r7, #4]
 800c9e8:	f7ff ff02 	bl	800c7f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c9ec:	2300      	movs	r3, #0
}
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	3708      	adds	r7, #8
 800c9f2:	46bd      	mov	sp, r7
 800c9f4:	bd80      	pop	{r7, pc}

0800c9f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c9f6:	b580      	push	{r7, lr}
 800c9f8:	b08c      	sub	sp, #48	; 0x30
 800c9fa:	af00      	add	r7, sp, #0
 800c9fc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800ca04:	b2db      	uxtb	r3, r3
 800ca06:	2b22      	cmp	r3, #34	; 0x22
 800ca08:	f040 80ae 	bne.w	800cb68 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	689b      	ldr	r3, [r3, #8]
 800ca10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca14:	d117      	bne.n	800ca46 <UART_Receive_IT+0x50>
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	691b      	ldr	r3, [r3, #16]
 800ca1a:	2b00      	cmp	r3, #0
 800ca1c:	d113      	bne.n	800ca46 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800ca1e:	2300      	movs	r3, #0
 800ca20:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca26:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	685b      	ldr	r3, [r3, #4]
 800ca2e:	b29b      	uxth	r3, r3
 800ca30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca34:	b29a      	uxth	r2, r3
 800ca36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca38:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca3e:	1c9a      	adds	r2, r3, #2
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	629a      	str	r2, [r3, #40]	; 0x28
 800ca44:	e026      	b.n	800ca94 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	689b      	ldr	r3, [r3, #8]
 800ca54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca58:	d007      	beq.n	800ca6a <UART_Receive_IT+0x74>
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	689b      	ldr	r3, [r3, #8]
 800ca5e:	2b00      	cmp	r3, #0
 800ca60:	d10a      	bne.n	800ca78 <UART_Receive_IT+0x82>
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	691b      	ldr	r3, [r3, #16]
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	d106      	bne.n	800ca78 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	681b      	ldr	r3, [r3, #0]
 800ca6e:	685b      	ldr	r3, [r3, #4]
 800ca70:	b2da      	uxtb	r2, r3
 800ca72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca74:	701a      	strb	r2, [r3, #0]
 800ca76:	e008      	b.n	800ca8a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	685b      	ldr	r3, [r3, #4]
 800ca7e:	b2db      	uxtb	r3, r3
 800ca80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ca84:	b2da      	uxtb	r2, r3
 800ca86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca88:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca8e:	1c5a      	adds	r2, r3, #1
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ca98:	b29b      	uxth	r3, r3
 800ca9a:	3b01      	subs	r3, #1
 800ca9c:	b29b      	uxth	r3, r3
 800ca9e:	687a      	ldr	r2, [r7, #4]
 800caa0:	4619      	mov	r1, r3
 800caa2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d15d      	bne.n	800cb64 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	68da      	ldr	r2, [r3, #12]
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	f022 0220 	bic.w	r2, r2, #32
 800cab6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	68da      	ldr	r2, [r3, #12]
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800cac6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	695a      	ldr	r2, [r3, #20]
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	681b      	ldr	r3, [r3, #0]
 800cad2:	f022 0201 	bic.w	r2, r2, #1
 800cad6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	2220      	movs	r2, #32
 800cadc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	2200      	movs	r2, #0
 800cae4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800caea:	2b01      	cmp	r3, #1
 800caec:	d135      	bne.n	800cb5a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	2200      	movs	r2, #0
 800caf2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	681b      	ldr	r3, [r3, #0]
 800caf8:	330c      	adds	r3, #12
 800cafa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cafc:	697b      	ldr	r3, [r7, #20]
 800cafe:	e853 3f00 	ldrex	r3, [r3]
 800cb02:	613b      	str	r3, [r7, #16]
   return(result);
 800cb04:	693b      	ldr	r3, [r7, #16]
 800cb06:	f023 0310 	bic.w	r3, r3, #16
 800cb0a:	627b      	str	r3, [r7, #36]	; 0x24
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	330c      	adds	r3, #12
 800cb12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cb14:	623a      	str	r2, [r7, #32]
 800cb16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb18:	69f9      	ldr	r1, [r7, #28]
 800cb1a:	6a3a      	ldr	r2, [r7, #32]
 800cb1c:	e841 2300 	strex	r3, r2, [r1]
 800cb20:	61bb      	str	r3, [r7, #24]
   return(result);
 800cb22:	69bb      	ldr	r3, [r7, #24]
 800cb24:	2b00      	cmp	r3, #0
 800cb26:	d1e5      	bne.n	800caf4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	681b      	ldr	r3, [r3, #0]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	f003 0310 	and.w	r3, r3, #16
 800cb32:	2b10      	cmp	r3, #16
 800cb34:	d10a      	bne.n	800cb4c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800cb36:	2300      	movs	r3, #0
 800cb38:	60fb      	str	r3, [r7, #12]
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	681b      	ldr	r3, [r3, #0]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	60fb      	str	r3, [r7, #12]
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	685b      	ldr	r3, [r3, #4]
 800cb48:	60fb      	str	r3, [r7, #12]
 800cb4a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800cb50:	4619      	mov	r1, r3
 800cb52:	6878      	ldr	r0, [r7, #4]
 800cb54:	f7ff fe67 	bl	800c826 <HAL_UARTEx_RxEventCallback>
 800cb58:	e002      	b.n	800cb60 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cb5a:	6878      	ldr	r0, [r7, #4]
 800cb5c:	f7ff fe51 	bl	800c802 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800cb60:	2300      	movs	r3, #0
 800cb62:	e002      	b.n	800cb6a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800cb64:	2300      	movs	r3, #0
 800cb66:	e000      	b.n	800cb6a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800cb68:	2302      	movs	r3, #2
  }
}
 800cb6a:	4618      	mov	r0, r3
 800cb6c:	3730      	adds	r7, #48	; 0x30
 800cb6e:	46bd      	mov	sp, r7
 800cb70:	bd80      	pop	{r7, pc}
	...

0800cb74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cb74:	b580      	push	{r7, lr}
 800cb76:	b084      	sub	sp, #16
 800cb78:	af00      	add	r7, sp, #0
 800cb7a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	681b      	ldr	r3, [r3, #0]
 800cb80:	691b      	ldr	r3, [r3, #16]
 800cb82:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	68da      	ldr	r2, [r3, #12]
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	681b      	ldr	r3, [r3, #0]
 800cb8e:	430a      	orrs	r2, r1
 800cb90:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800cb92:	687b      	ldr	r3, [r7, #4]
 800cb94:	689a      	ldr	r2, [r3, #8]
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	691b      	ldr	r3, [r3, #16]
 800cb9a:	431a      	orrs	r2, r3
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	695b      	ldr	r3, [r3, #20]
 800cba0:	4313      	orrs	r3, r2
 800cba2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	681b      	ldr	r3, [r3, #0]
 800cba8:	68db      	ldr	r3, [r3, #12]
 800cbaa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800cbae:	f023 030c 	bic.w	r3, r3, #12
 800cbb2:	687a      	ldr	r2, [r7, #4]
 800cbb4:	6812      	ldr	r2, [r2, #0]
 800cbb6:	68b9      	ldr	r1, [r7, #8]
 800cbb8:	430b      	orrs	r3, r1
 800cbba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	695b      	ldr	r3, [r3, #20]
 800cbc2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	699a      	ldr	r2, [r3, #24]
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	430a      	orrs	r2, r1
 800cbd0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	681b      	ldr	r3, [r3, #0]
 800cbd6:	4a2c      	ldr	r2, [pc, #176]	; (800cc88 <UART_SetConfig+0x114>)
 800cbd8:	4293      	cmp	r3, r2
 800cbda:	d103      	bne.n	800cbe4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800cbdc:	f7fe fe8c 	bl	800b8f8 <HAL_RCC_GetPCLK2Freq>
 800cbe0:	60f8      	str	r0, [r7, #12]
 800cbe2:	e002      	b.n	800cbea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800cbe4:	f7fe fe74 	bl	800b8d0 <HAL_RCC_GetPCLK1Freq>
 800cbe8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cbea:	68fa      	ldr	r2, [r7, #12]
 800cbec:	4613      	mov	r3, r2
 800cbee:	009b      	lsls	r3, r3, #2
 800cbf0:	4413      	add	r3, r2
 800cbf2:	009a      	lsls	r2, r3, #2
 800cbf4:	441a      	add	r2, r3
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	685b      	ldr	r3, [r3, #4]
 800cbfa:	009b      	lsls	r3, r3, #2
 800cbfc:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc00:	4a22      	ldr	r2, [pc, #136]	; (800cc8c <UART_SetConfig+0x118>)
 800cc02:	fba2 2303 	umull	r2, r3, r2, r3
 800cc06:	095b      	lsrs	r3, r3, #5
 800cc08:	0119      	lsls	r1, r3, #4
 800cc0a:	68fa      	ldr	r2, [r7, #12]
 800cc0c:	4613      	mov	r3, r2
 800cc0e:	009b      	lsls	r3, r3, #2
 800cc10:	4413      	add	r3, r2
 800cc12:	009a      	lsls	r2, r3, #2
 800cc14:	441a      	add	r2, r3
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	685b      	ldr	r3, [r3, #4]
 800cc1a:	009b      	lsls	r3, r3, #2
 800cc1c:	fbb2 f2f3 	udiv	r2, r2, r3
 800cc20:	4b1a      	ldr	r3, [pc, #104]	; (800cc8c <UART_SetConfig+0x118>)
 800cc22:	fba3 0302 	umull	r0, r3, r3, r2
 800cc26:	095b      	lsrs	r3, r3, #5
 800cc28:	2064      	movs	r0, #100	; 0x64
 800cc2a:	fb00 f303 	mul.w	r3, r0, r3
 800cc2e:	1ad3      	subs	r3, r2, r3
 800cc30:	011b      	lsls	r3, r3, #4
 800cc32:	3332      	adds	r3, #50	; 0x32
 800cc34:	4a15      	ldr	r2, [pc, #84]	; (800cc8c <UART_SetConfig+0x118>)
 800cc36:	fba2 2303 	umull	r2, r3, r2, r3
 800cc3a:	095b      	lsrs	r3, r3, #5
 800cc3c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cc40:	4419      	add	r1, r3
 800cc42:	68fa      	ldr	r2, [r7, #12]
 800cc44:	4613      	mov	r3, r2
 800cc46:	009b      	lsls	r3, r3, #2
 800cc48:	4413      	add	r3, r2
 800cc4a:	009a      	lsls	r2, r3, #2
 800cc4c:	441a      	add	r2, r3
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	685b      	ldr	r3, [r3, #4]
 800cc52:	009b      	lsls	r3, r3, #2
 800cc54:	fbb2 f2f3 	udiv	r2, r2, r3
 800cc58:	4b0c      	ldr	r3, [pc, #48]	; (800cc8c <UART_SetConfig+0x118>)
 800cc5a:	fba3 0302 	umull	r0, r3, r3, r2
 800cc5e:	095b      	lsrs	r3, r3, #5
 800cc60:	2064      	movs	r0, #100	; 0x64
 800cc62:	fb00 f303 	mul.w	r3, r0, r3
 800cc66:	1ad3      	subs	r3, r2, r3
 800cc68:	011b      	lsls	r3, r3, #4
 800cc6a:	3332      	adds	r3, #50	; 0x32
 800cc6c:	4a07      	ldr	r2, [pc, #28]	; (800cc8c <UART_SetConfig+0x118>)
 800cc6e:	fba2 2303 	umull	r2, r3, r2, r3
 800cc72:	095b      	lsrs	r3, r3, #5
 800cc74:	f003 020f 	and.w	r2, r3, #15
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	440a      	add	r2, r1
 800cc7e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800cc80:	bf00      	nop
 800cc82:	3710      	adds	r7, #16
 800cc84:	46bd      	mov	sp, r7
 800cc86:	bd80      	pop	{r7, pc}
 800cc88:	40013800 	.word	0x40013800
 800cc8c:	51eb851f 	.word	0x51eb851f

0800cc90 <__itoa>:
 800cc90:	1e93      	subs	r3, r2, #2
 800cc92:	2b22      	cmp	r3, #34	; 0x22
 800cc94:	b510      	push	{r4, lr}
 800cc96:	460c      	mov	r4, r1
 800cc98:	d904      	bls.n	800cca4 <__itoa+0x14>
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	461c      	mov	r4, r3
 800cc9e:	700b      	strb	r3, [r1, #0]
 800cca0:	4620      	mov	r0, r4
 800cca2:	bd10      	pop	{r4, pc}
 800cca4:	2a0a      	cmp	r2, #10
 800cca6:	d109      	bne.n	800ccbc <__itoa+0x2c>
 800cca8:	2800      	cmp	r0, #0
 800ccaa:	da07      	bge.n	800ccbc <__itoa+0x2c>
 800ccac:	232d      	movs	r3, #45	; 0x2d
 800ccae:	700b      	strb	r3, [r1, #0]
 800ccb0:	2101      	movs	r1, #1
 800ccb2:	4240      	negs	r0, r0
 800ccb4:	4421      	add	r1, r4
 800ccb6:	f000 f8b9 	bl	800ce2c <__utoa>
 800ccba:	e7f1      	b.n	800cca0 <__itoa+0x10>
 800ccbc:	2100      	movs	r1, #0
 800ccbe:	e7f9      	b.n	800ccb4 <__itoa+0x24>

0800ccc0 <itoa>:
 800ccc0:	f7ff bfe6 	b.w	800cc90 <__itoa>

0800ccc4 <malloc>:
 800ccc4:	4b02      	ldr	r3, [pc, #8]	; (800ccd0 <malloc+0xc>)
 800ccc6:	4601      	mov	r1, r0
 800ccc8:	6818      	ldr	r0, [r3, #0]
 800ccca:	f000 b823 	b.w	800cd14 <_malloc_r>
 800ccce:	bf00      	nop
 800ccd0:	20000a1c 	.word	0x20000a1c

0800ccd4 <sbrk_aligned>:
 800ccd4:	b570      	push	{r4, r5, r6, lr}
 800ccd6:	4e0e      	ldr	r6, [pc, #56]	; (800cd10 <sbrk_aligned+0x3c>)
 800ccd8:	460c      	mov	r4, r1
 800ccda:	6831      	ldr	r1, [r6, #0]
 800ccdc:	4605      	mov	r5, r0
 800ccde:	b911      	cbnz	r1, 800cce6 <sbrk_aligned+0x12>
 800cce0:	f000 f91e 	bl	800cf20 <_sbrk_r>
 800cce4:	6030      	str	r0, [r6, #0]
 800cce6:	4621      	mov	r1, r4
 800cce8:	4628      	mov	r0, r5
 800ccea:	f000 f919 	bl	800cf20 <_sbrk_r>
 800ccee:	1c43      	adds	r3, r0, #1
 800ccf0:	d00a      	beq.n	800cd08 <sbrk_aligned+0x34>
 800ccf2:	1cc4      	adds	r4, r0, #3
 800ccf4:	f024 0403 	bic.w	r4, r4, #3
 800ccf8:	42a0      	cmp	r0, r4
 800ccfa:	d007      	beq.n	800cd0c <sbrk_aligned+0x38>
 800ccfc:	1a21      	subs	r1, r4, r0
 800ccfe:	4628      	mov	r0, r5
 800cd00:	f000 f90e 	bl	800cf20 <_sbrk_r>
 800cd04:	3001      	adds	r0, #1
 800cd06:	d101      	bne.n	800cd0c <sbrk_aligned+0x38>
 800cd08:	f04f 34ff 	mov.w	r4, #4294967295
 800cd0c:	4620      	mov	r0, r4
 800cd0e:	bd70      	pop	{r4, r5, r6, pc}
 800cd10:	20000ef8 	.word	0x20000ef8

0800cd14 <_malloc_r>:
 800cd14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd18:	1ccd      	adds	r5, r1, #3
 800cd1a:	f025 0503 	bic.w	r5, r5, #3
 800cd1e:	3508      	adds	r5, #8
 800cd20:	2d0c      	cmp	r5, #12
 800cd22:	bf38      	it	cc
 800cd24:	250c      	movcc	r5, #12
 800cd26:	2d00      	cmp	r5, #0
 800cd28:	4607      	mov	r7, r0
 800cd2a:	db01      	blt.n	800cd30 <_malloc_r+0x1c>
 800cd2c:	42a9      	cmp	r1, r5
 800cd2e:	d905      	bls.n	800cd3c <_malloc_r+0x28>
 800cd30:	230c      	movs	r3, #12
 800cd32:	2600      	movs	r6, #0
 800cd34:	603b      	str	r3, [r7, #0]
 800cd36:	4630      	mov	r0, r6
 800cd38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd3c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ce10 <_malloc_r+0xfc>
 800cd40:	f000 f868 	bl	800ce14 <__malloc_lock>
 800cd44:	f8d8 3000 	ldr.w	r3, [r8]
 800cd48:	461c      	mov	r4, r3
 800cd4a:	bb5c      	cbnz	r4, 800cda4 <_malloc_r+0x90>
 800cd4c:	4629      	mov	r1, r5
 800cd4e:	4638      	mov	r0, r7
 800cd50:	f7ff ffc0 	bl	800ccd4 <sbrk_aligned>
 800cd54:	1c43      	adds	r3, r0, #1
 800cd56:	4604      	mov	r4, r0
 800cd58:	d155      	bne.n	800ce06 <_malloc_r+0xf2>
 800cd5a:	f8d8 4000 	ldr.w	r4, [r8]
 800cd5e:	4626      	mov	r6, r4
 800cd60:	2e00      	cmp	r6, #0
 800cd62:	d145      	bne.n	800cdf0 <_malloc_r+0xdc>
 800cd64:	2c00      	cmp	r4, #0
 800cd66:	d048      	beq.n	800cdfa <_malloc_r+0xe6>
 800cd68:	6823      	ldr	r3, [r4, #0]
 800cd6a:	4631      	mov	r1, r6
 800cd6c:	4638      	mov	r0, r7
 800cd6e:	eb04 0903 	add.w	r9, r4, r3
 800cd72:	f000 f8d5 	bl	800cf20 <_sbrk_r>
 800cd76:	4581      	cmp	r9, r0
 800cd78:	d13f      	bne.n	800cdfa <_malloc_r+0xe6>
 800cd7a:	6821      	ldr	r1, [r4, #0]
 800cd7c:	4638      	mov	r0, r7
 800cd7e:	1a6d      	subs	r5, r5, r1
 800cd80:	4629      	mov	r1, r5
 800cd82:	f7ff ffa7 	bl	800ccd4 <sbrk_aligned>
 800cd86:	3001      	adds	r0, #1
 800cd88:	d037      	beq.n	800cdfa <_malloc_r+0xe6>
 800cd8a:	6823      	ldr	r3, [r4, #0]
 800cd8c:	442b      	add	r3, r5
 800cd8e:	6023      	str	r3, [r4, #0]
 800cd90:	f8d8 3000 	ldr.w	r3, [r8]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d038      	beq.n	800ce0a <_malloc_r+0xf6>
 800cd98:	685a      	ldr	r2, [r3, #4]
 800cd9a:	42a2      	cmp	r2, r4
 800cd9c:	d12b      	bne.n	800cdf6 <_malloc_r+0xe2>
 800cd9e:	2200      	movs	r2, #0
 800cda0:	605a      	str	r2, [r3, #4]
 800cda2:	e00f      	b.n	800cdc4 <_malloc_r+0xb0>
 800cda4:	6822      	ldr	r2, [r4, #0]
 800cda6:	1b52      	subs	r2, r2, r5
 800cda8:	d41f      	bmi.n	800cdea <_malloc_r+0xd6>
 800cdaa:	2a0b      	cmp	r2, #11
 800cdac:	d917      	bls.n	800cdde <_malloc_r+0xca>
 800cdae:	1961      	adds	r1, r4, r5
 800cdb0:	42a3      	cmp	r3, r4
 800cdb2:	6025      	str	r5, [r4, #0]
 800cdb4:	bf18      	it	ne
 800cdb6:	6059      	strne	r1, [r3, #4]
 800cdb8:	6863      	ldr	r3, [r4, #4]
 800cdba:	bf08      	it	eq
 800cdbc:	f8c8 1000 	streq.w	r1, [r8]
 800cdc0:	5162      	str	r2, [r4, r5]
 800cdc2:	604b      	str	r3, [r1, #4]
 800cdc4:	4638      	mov	r0, r7
 800cdc6:	f104 060b 	add.w	r6, r4, #11
 800cdca:	f000 f829 	bl	800ce20 <__malloc_unlock>
 800cdce:	f026 0607 	bic.w	r6, r6, #7
 800cdd2:	1d23      	adds	r3, r4, #4
 800cdd4:	1af2      	subs	r2, r6, r3
 800cdd6:	d0ae      	beq.n	800cd36 <_malloc_r+0x22>
 800cdd8:	1b9b      	subs	r3, r3, r6
 800cdda:	50a3      	str	r3, [r4, r2]
 800cddc:	e7ab      	b.n	800cd36 <_malloc_r+0x22>
 800cdde:	42a3      	cmp	r3, r4
 800cde0:	6862      	ldr	r2, [r4, #4]
 800cde2:	d1dd      	bne.n	800cda0 <_malloc_r+0x8c>
 800cde4:	f8c8 2000 	str.w	r2, [r8]
 800cde8:	e7ec      	b.n	800cdc4 <_malloc_r+0xb0>
 800cdea:	4623      	mov	r3, r4
 800cdec:	6864      	ldr	r4, [r4, #4]
 800cdee:	e7ac      	b.n	800cd4a <_malloc_r+0x36>
 800cdf0:	4634      	mov	r4, r6
 800cdf2:	6876      	ldr	r6, [r6, #4]
 800cdf4:	e7b4      	b.n	800cd60 <_malloc_r+0x4c>
 800cdf6:	4613      	mov	r3, r2
 800cdf8:	e7cc      	b.n	800cd94 <_malloc_r+0x80>
 800cdfa:	230c      	movs	r3, #12
 800cdfc:	4638      	mov	r0, r7
 800cdfe:	603b      	str	r3, [r7, #0]
 800ce00:	f000 f80e 	bl	800ce20 <__malloc_unlock>
 800ce04:	e797      	b.n	800cd36 <_malloc_r+0x22>
 800ce06:	6025      	str	r5, [r4, #0]
 800ce08:	e7dc      	b.n	800cdc4 <_malloc_r+0xb0>
 800ce0a:	605b      	str	r3, [r3, #4]
 800ce0c:	deff      	udf	#255	; 0xff
 800ce0e:	bf00      	nop
 800ce10:	20000ef4 	.word	0x20000ef4

0800ce14 <__malloc_lock>:
 800ce14:	4801      	ldr	r0, [pc, #4]	; (800ce1c <__malloc_lock+0x8>)
 800ce16:	f000 b8bd 	b.w	800cf94 <__retarget_lock_acquire_recursive>
 800ce1a:	bf00      	nop
 800ce1c:	20001038 	.word	0x20001038

0800ce20 <__malloc_unlock>:
 800ce20:	4801      	ldr	r0, [pc, #4]	; (800ce28 <__malloc_unlock+0x8>)
 800ce22:	f000 b8b8 	b.w	800cf96 <__retarget_lock_release_recursive>
 800ce26:	bf00      	nop
 800ce28:	20001038 	.word	0x20001038

0800ce2c <__utoa>:
 800ce2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ce2e:	b08b      	sub	sp, #44	; 0x2c
 800ce30:	4605      	mov	r5, r0
 800ce32:	460b      	mov	r3, r1
 800ce34:	466e      	mov	r6, sp
 800ce36:	4c1d      	ldr	r4, [pc, #116]	; (800ceac <__utoa+0x80>)
 800ce38:	f104 0c20 	add.w	ip, r4, #32
 800ce3c:	4637      	mov	r7, r6
 800ce3e:	6820      	ldr	r0, [r4, #0]
 800ce40:	6861      	ldr	r1, [r4, #4]
 800ce42:	3408      	adds	r4, #8
 800ce44:	c703      	stmia	r7!, {r0, r1}
 800ce46:	4564      	cmp	r4, ip
 800ce48:	463e      	mov	r6, r7
 800ce4a:	d1f7      	bne.n	800ce3c <__utoa+0x10>
 800ce4c:	7921      	ldrb	r1, [r4, #4]
 800ce4e:	6820      	ldr	r0, [r4, #0]
 800ce50:	7139      	strb	r1, [r7, #4]
 800ce52:	1e91      	subs	r1, r2, #2
 800ce54:	2922      	cmp	r1, #34	; 0x22
 800ce56:	6038      	str	r0, [r7, #0]
 800ce58:	f04f 0100 	mov.w	r1, #0
 800ce5c:	d904      	bls.n	800ce68 <__utoa+0x3c>
 800ce5e:	7019      	strb	r1, [r3, #0]
 800ce60:	460b      	mov	r3, r1
 800ce62:	4618      	mov	r0, r3
 800ce64:	b00b      	add	sp, #44	; 0x2c
 800ce66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce68:	1e58      	subs	r0, r3, #1
 800ce6a:	4684      	mov	ip, r0
 800ce6c:	fbb5 f7f2 	udiv	r7, r5, r2
 800ce70:	fb02 5617 	mls	r6, r2, r7, r5
 800ce74:	3628      	adds	r6, #40	; 0x28
 800ce76:	446e      	add	r6, sp
 800ce78:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800ce7c:	460c      	mov	r4, r1
 800ce7e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800ce82:	462e      	mov	r6, r5
 800ce84:	42b2      	cmp	r2, r6
 800ce86:	463d      	mov	r5, r7
 800ce88:	f101 0101 	add.w	r1, r1, #1
 800ce8c:	d9ee      	bls.n	800ce6c <__utoa+0x40>
 800ce8e:	2200      	movs	r2, #0
 800ce90:	545a      	strb	r2, [r3, r1]
 800ce92:	1919      	adds	r1, r3, r4
 800ce94:	1aa5      	subs	r5, r4, r2
 800ce96:	42aa      	cmp	r2, r5
 800ce98:	dae3      	bge.n	800ce62 <__utoa+0x36>
 800ce9a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800ce9e:	780e      	ldrb	r6, [r1, #0]
 800cea0:	3201      	adds	r2, #1
 800cea2:	7006      	strb	r6, [r0, #0]
 800cea4:	f801 5901 	strb.w	r5, [r1], #-1
 800cea8:	e7f4      	b.n	800ce94 <__utoa+0x68>
 800ceaa:	bf00      	nop
 800ceac:	0800e5d6 	.word	0x0800e5d6

0800ceb0 <siprintf>:
 800ceb0:	b40e      	push	{r1, r2, r3}
 800ceb2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ceb6:	b500      	push	{lr}
 800ceb8:	b09c      	sub	sp, #112	; 0x70
 800ceba:	ab1d      	add	r3, sp, #116	; 0x74
 800cebc:	9002      	str	r0, [sp, #8]
 800cebe:	9006      	str	r0, [sp, #24]
 800cec0:	9107      	str	r1, [sp, #28]
 800cec2:	9104      	str	r1, [sp, #16]
 800cec4:	4808      	ldr	r0, [pc, #32]	; (800cee8 <siprintf+0x38>)
 800cec6:	4909      	ldr	r1, [pc, #36]	; (800ceec <siprintf+0x3c>)
 800cec8:	f853 2b04 	ldr.w	r2, [r3], #4
 800cecc:	9105      	str	r1, [sp, #20]
 800cece:	6800      	ldr	r0, [r0, #0]
 800ced0:	a902      	add	r1, sp, #8
 800ced2:	9301      	str	r3, [sp, #4]
 800ced4:	f000 f90a 	bl	800d0ec <_svfiprintf_r>
 800ced8:	2200      	movs	r2, #0
 800ceda:	9b02      	ldr	r3, [sp, #8]
 800cedc:	701a      	strb	r2, [r3, #0]
 800cede:	b01c      	add	sp, #112	; 0x70
 800cee0:	f85d eb04 	ldr.w	lr, [sp], #4
 800cee4:	b003      	add	sp, #12
 800cee6:	4770      	bx	lr
 800cee8:	20000a1c 	.word	0x20000a1c
 800ceec:	ffff0208 	.word	0xffff0208

0800cef0 <memset>:
 800cef0:	4603      	mov	r3, r0
 800cef2:	4402      	add	r2, r0
 800cef4:	4293      	cmp	r3, r2
 800cef6:	d100      	bne.n	800cefa <memset+0xa>
 800cef8:	4770      	bx	lr
 800cefa:	f803 1b01 	strb.w	r1, [r3], #1
 800cefe:	e7f9      	b.n	800cef4 <memset+0x4>

0800cf00 <strcat>:
 800cf00:	4602      	mov	r2, r0
 800cf02:	b510      	push	{r4, lr}
 800cf04:	7814      	ldrb	r4, [r2, #0]
 800cf06:	4613      	mov	r3, r2
 800cf08:	3201      	adds	r2, #1
 800cf0a:	2c00      	cmp	r4, #0
 800cf0c:	d1fa      	bne.n	800cf04 <strcat+0x4>
 800cf0e:	3b01      	subs	r3, #1
 800cf10:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cf14:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cf18:	2a00      	cmp	r2, #0
 800cf1a:	d1f9      	bne.n	800cf10 <strcat+0x10>
 800cf1c:	bd10      	pop	{r4, pc}
	...

0800cf20 <_sbrk_r>:
 800cf20:	b538      	push	{r3, r4, r5, lr}
 800cf22:	2300      	movs	r3, #0
 800cf24:	4d05      	ldr	r5, [pc, #20]	; (800cf3c <_sbrk_r+0x1c>)
 800cf26:	4604      	mov	r4, r0
 800cf28:	4608      	mov	r0, r1
 800cf2a:	602b      	str	r3, [r5, #0]
 800cf2c:	f7fc f808 	bl	8008f40 <_sbrk>
 800cf30:	1c43      	adds	r3, r0, #1
 800cf32:	d102      	bne.n	800cf3a <_sbrk_r+0x1a>
 800cf34:	682b      	ldr	r3, [r5, #0]
 800cf36:	b103      	cbz	r3, 800cf3a <_sbrk_r+0x1a>
 800cf38:	6023      	str	r3, [r4, #0]
 800cf3a:	bd38      	pop	{r3, r4, r5, pc}
 800cf3c:	20001034 	.word	0x20001034

0800cf40 <__errno>:
 800cf40:	4b01      	ldr	r3, [pc, #4]	; (800cf48 <__errno+0x8>)
 800cf42:	6818      	ldr	r0, [r3, #0]
 800cf44:	4770      	bx	lr
 800cf46:	bf00      	nop
 800cf48:	20000a1c 	.word	0x20000a1c

0800cf4c <__libc_init_array>:
 800cf4c:	b570      	push	{r4, r5, r6, lr}
 800cf4e:	2600      	movs	r6, #0
 800cf50:	4d0c      	ldr	r5, [pc, #48]	; (800cf84 <__libc_init_array+0x38>)
 800cf52:	4c0d      	ldr	r4, [pc, #52]	; (800cf88 <__libc_init_array+0x3c>)
 800cf54:	1b64      	subs	r4, r4, r5
 800cf56:	10a4      	asrs	r4, r4, #2
 800cf58:	42a6      	cmp	r6, r4
 800cf5a:	d109      	bne.n	800cf70 <__libc_init_array+0x24>
 800cf5c:	f000 fbc6 	bl	800d6ec <_init>
 800cf60:	2600      	movs	r6, #0
 800cf62:	4d0a      	ldr	r5, [pc, #40]	; (800cf8c <__libc_init_array+0x40>)
 800cf64:	4c0a      	ldr	r4, [pc, #40]	; (800cf90 <__libc_init_array+0x44>)
 800cf66:	1b64      	subs	r4, r4, r5
 800cf68:	10a4      	asrs	r4, r4, #2
 800cf6a:	42a6      	cmp	r6, r4
 800cf6c:	d105      	bne.n	800cf7a <__libc_init_array+0x2e>
 800cf6e:	bd70      	pop	{r4, r5, r6, pc}
 800cf70:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf74:	4798      	blx	r3
 800cf76:	3601      	adds	r6, #1
 800cf78:	e7ee      	b.n	800cf58 <__libc_init_array+0xc>
 800cf7a:	f855 3b04 	ldr.w	r3, [r5], #4
 800cf7e:	4798      	blx	r3
 800cf80:	3601      	adds	r6, #1
 800cf82:	e7f2      	b.n	800cf6a <__libc_init_array+0x1e>
 800cf84:	0800e630 	.word	0x0800e630
 800cf88:	0800e630 	.word	0x0800e630
 800cf8c:	0800e630 	.word	0x0800e630
 800cf90:	0800e634 	.word	0x0800e634

0800cf94 <__retarget_lock_acquire_recursive>:
 800cf94:	4770      	bx	lr

0800cf96 <__retarget_lock_release_recursive>:
 800cf96:	4770      	bx	lr

0800cf98 <strcpy>:
 800cf98:	4603      	mov	r3, r0
 800cf9a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cf9e:	f803 2b01 	strb.w	r2, [r3], #1
 800cfa2:	2a00      	cmp	r2, #0
 800cfa4:	d1f9      	bne.n	800cf9a <strcpy+0x2>
 800cfa6:	4770      	bx	lr

0800cfa8 <_free_r>:
 800cfa8:	b538      	push	{r3, r4, r5, lr}
 800cfaa:	4605      	mov	r5, r0
 800cfac:	2900      	cmp	r1, #0
 800cfae:	d040      	beq.n	800d032 <_free_r+0x8a>
 800cfb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cfb4:	1f0c      	subs	r4, r1, #4
 800cfb6:	2b00      	cmp	r3, #0
 800cfb8:	bfb8      	it	lt
 800cfba:	18e4      	addlt	r4, r4, r3
 800cfbc:	f7ff ff2a 	bl	800ce14 <__malloc_lock>
 800cfc0:	4a1c      	ldr	r2, [pc, #112]	; (800d034 <_free_r+0x8c>)
 800cfc2:	6813      	ldr	r3, [r2, #0]
 800cfc4:	b933      	cbnz	r3, 800cfd4 <_free_r+0x2c>
 800cfc6:	6063      	str	r3, [r4, #4]
 800cfc8:	6014      	str	r4, [r2, #0]
 800cfca:	4628      	mov	r0, r5
 800cfcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cfd0:	f7ff bf26 	b.w	800ce20 <__malloc_unlock>
 800cfd4:	42a3      	cmp	r3, r4
 800cfd6:	d908      	bls.n	800cfea <_free_r+0x42>
 800cfd8:	6820      	ldr	r0, [r4, #0]
 800cfda:	1821      	adds	r1, r4, r0
 800cfdc:	428b      	cmp	r3, r1
 800cfde:	bf01      	itttt	eq
 800cfe0:	6819      	ldreq	r1, [r3, #0]
 800cfe2:	685b      	ldreq	r3, [r3, #4]
 800cfe4:	1809      	addeq	r1, r1, r0
 800cfe6:	6021      	streq	r1, [r4, #0]
 800cfe8:	e7ed      	b.n	800cfc6 <_free_r+0x1e>
 800cfea:	461a      	mov	r2, r3
 800cfec:	685b      	ldr	r3, [r3, #4]
 800cfee:	b10b      	cbz	r3, 800cff4 <_free_r+0x4c>
 800cff0:	42a3      	cmp	r3, r4
 800cff2:	d9fa      	bls.n	800cfea <_free_r+0x42>
 800cff4:	6811      	ldr	r1, [r2, #0]
 800cff6:	1850      	adds	r0, r2, r1
 800cff8:	42a0      	cmp	r0, r4
 800cffa:	d10b      	bne.n	800d014 <_free_r+0x6c>
 800cffc:	6820      	ldr	r0, [r4, #0]
 800cffe:	4401      	add	r1, r0
 800d000:	1850      	adds	r0, r2, r1
 800d002:	4283      	cmp	r3, r0
 800d004:	6011      	str	r1, [r2, #0]
 800d006:	d1e0      	bne.n	800cfca <_free_r+0x22>
 800d008:	6818      	ldr	r0, [r3, #0]
 800d00a:	685b      	ldr	r3, [r3, #4]
 800d00c:	4408      	add	r0, r1
 800d00e:	6010      	str	r0, [r2, #0]
 800d010:	6053      	str	r3, [r2, #4]
 800d012:	e7da      	b.n	800cfca <_free_r+0x22>
 800d014:	d902      	bls.n	800d01c <_free_r+0x74>
 800d016:	230c      	movs	r3, #12
 800d018:	602b      	str	r3, [r5, #0]
 800d01a:	e7d6      	b.n	800cfca <_free_r+0x22>
 800d01c:	6820      	ldr	r0, [r4, #0]
 800d01e:	1821      	adds	r1, r4, r0
 800d020:	428b      	cmp	r3, r1
 800d022:	bf01      	itttt	eq
 800d024:	6819      	ldreq	r1, [r3, #0]
 800d026:	685b      	ldreq	r3, [r3, #4]
 800d028:	1809      	addeq	r1, r1, r0
 800d02a:	6021      	streq	r1, [r4, #0]
 800d02c:	6063      	str	r3, [r4, #4]
 800d02e:	6054      	str	r4, [r2, #4]
 800d030:	e7cb      	b.n	800cfca <_free_r+0x22>
 800d032:	bd38      	pop	{r3, r4, r5, pc}
 800d034:	20000ef4 	.word	0x20000ef4

0800d038 <__ssputs_r>:
 800d038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d03c:	461f      	mov	r7, r3
 800d03e:	688e      	ldr	r6, [r1, #8]
 800d040:	4682      	mov	sl, r0
 800d042:	42be      	cmp	r6, r7
 800d044:	460c      	mov	r4, r1
 800d046:	4690      	mov	r8, r2
 800d048:	680b      	ldr	r3, [r1, #0]
 800d04a:	d82c      	bhi.n	800d0a6 <__ssputs_r+0x6e>
 800d04c:	898a      	ldrh	r2, [r1, #12]
 800d04e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d052:	d026      	beq.n	800d0a2 <__ssputs_r+0x6a>
 800d054:	6965      	ldr	r5, [r4, #20]
 800d056:	6909      	ldr	r1, [r1, #16]
 800d058:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d05c:	eba3 0901 	sub.w	r9, r3, r1
 800d060:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d064:	1c7b      	adds	r3, r7, #1
 800d066:	444b      	add	r3, r9
 800d068:	106d      	asrs	r5, r5, #1
 800d06a:	429d      	cmp	r5, r3
 800d06c:	bf38      	it	cc
 800d06e:	461d      	movcc	r5, r3
 800d070:	0553      	lsls	r3, r2, #21
 800d072:	d527      	bpl.n	800d0c4 <__ssputs_r+0x8c>
 800d074:	4629      	mov	r1, r5
 800d076:	f7ff fe4d 	bl	800cd14 <_malloc_r>
 800d07a:	4606      	mov	r6, r0
 800d07c:	b360      	cbz	r0, 800d0d8 <__ssputs_r+0xa0>
 800d07e:	464a      	mov	r2, r9
 800d080:	6921      	ldr	r1, [r4, #16]
 800d082:	f000 faed 	bl	800d660 <memcpy>
 800d086:	89a3      	ldrh	r3, [r4, #12]
 800d088:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d08c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d090:	81a3      	strh	r3, [r4, #12]
 800d092:	6126      	str	r6, [r4, #16]
 800d094:	444e      	add	r6, r9
 800d096:	6026      	str	r6, [r4, #0]
 800d098:	463e      	mov	r6, r7
 800d09a:	6165      	str	r5, [r4, #20]
 800d09c:	eba5 0509 	sub.w	r5, r5, r9
 800d0a0:	60a5      	str	r5, [r4, #8]
 800d0a2:	42be      	cmp	r6, r7
 800d0a4:	d900      	bls.n	800d0a8 <__ssputs_r+0x70>
 800d0a6:	463e      	mov	r6, r7
 800d0a8:	4632      	mov	r2, r6
 800d0aa:	4641      	mov	r1, r8
 800d0ac:	6820      	ldr	r0, [r4, #0]
 800d0ae:	f000 faaf 	bl	800d610 <memmove>
 800d0b2:	2000      	movs	r0, #0
 800d0b4:	68a3      	ldr	r3, [r4, #8]
 800d0b6:	1b9b      	subs	r3, r3, r6
 800d0b8:	60a3      	str	r3, [r4, #8]
 800d0ba:	6823      	ldr	r3, [r4, #0]
 800d0bc:	4433      	add	r3, r6
 800d0be:	6023      	str	r3, [r4, #0]
 800d0c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d0c4:	462a      	mov	r2, r5
 800d0c6:	f000 fad9 	bl	800d67c <_realloc_r>
 800d0ca:	4606      	mov	r6, r0
 800d0cc:	2800      	cmp	r0, #0
 800d0ce:	d1e0      	bne.n	800d092 <__ssputs_r+0x5a>
 800d0d0:	4650      	mov	r0, sl
 800d0d2:	6921      	ldr	r1, [r4, #16]
 800d0d4:	f7ff ff68 	bl	800cfa8 <_free_r>
 800d0d8:	230c      	movs	r3, #12
 800d0da:	f8ca 3000 	str.w	r3, [sl]
 800d0de:	89a3      	ldrh	r3, [r4, #12]
 800d0e0:	f04f 30ff 	mov.w	r0, #4294967295
 800d0e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d0e8:	81a3      	strh	r3, [r4, #12]
 800d0ea:	e7e9      	b.n	800d0c0 <__ssputs_r+0x88>

0800d0ec <_svfiprintf_r>:
 800d0ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0f0:	4698      	mov	r8, r3
 800d0f2:	898b      	ldrh	r3, [r1, #12]
 800d0f4:	4607      	mov	r7, r0
 800d0f6:	061b      	lsls	r3, r3, #24
 800d0f8:	460d      	mov	r5, r1
 800d0fa:	4614      	mov	r4, r2
 800d0fc:	b09d      	sub	sp, #116	; 0x74
 800d0fe:	d50e      	bpl.n	800d11e <_svfiprintf_r+0x32>
 800d100:	690b      	ldr	r3, [r1, #16]
 800d102:	b963      	cbnz	r3, 800d11e <_svfiprintf_r+0x32>
 800d104:	2140      	movs	r1, #64	; 0x40
 800d106:	f7ff fe05 	bl	800cd14 <_malloc_r>
 800d10a:	6028      	str	r0, [r5, #0]
 800d10c:	6128      	str	r0, [r5, #16]
 800d10e:	b920      	cbnz	r0, 800d11a <_svfiprintf_r+0x2e>
 800d110:	230c      	movs	r3, #12
 800d112:	603b      	str	r3, [r7, #0]
 800d114:	f04f 30ff 	mov.w	r0, #4294967295
 800d118:	e0d0      	b.n	800d2bc <_svfiprintf_r+0x1d0>
 800d11a:	2340      	movs	r3, #64	; 0x40
 800d11c:	616b      	str	r3, [r5, #20]
 800d11e:	2300      	movs	r3, #0
 800d120:	9309      	str	r3, [sp, #36]	; 0x24
 800d122:	2320      	movs	r3, #32
 800d124:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d128:	2330      	movs	r3, #48	; 0x30
 800d12a:	f04f 0901 	mov.w	r9, #1
 800d12e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d132:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800d2d4 <_svfiprintf_r+0x1e8>
 800d136:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d13a:	4623      	mov	r3, r4
 800d13c:	469a      	mov	sl, r3
 800d13e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d142:	b10a      	cbz	r2, 800d148 <_svfiprintf_r+0x5c>
 800d144:	2a25      	cmp	r2, #37	; 0x25
 800d146:	d1f9      	bne.n	800d13c <_svfiprintf_r+0x50>
 800d148:	ebba 0b04 	subs.w	fp, sl, r4
 800d14c:	d00b      	beq.n	800d166 <_svfiprintf_r+0x7a>
 800d14e:	465b      	mov	r3, fp
 800d150:	4622      	mov	r2, r4
 800d152:	4629      	mov	r1, r5
 800d154:	4638      	mov	r0, r7
 800d156:	f7ff ff6f 	bl	800d038 <__ssputs_r>
 800d15a:	3001      	adds	r0, #1
 800d15c:	f000 80a9 	beq.w	800d2b2 <_svfiprintf_r+0x1c6>
 800d160:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d162:	445a      	add	r2, fp
 800d164:	9209      	str	r2, [sp, #36]	; 0x24
 800d166:	f89a 3000 	ldrb.w	r3, [sl]
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	f000 80a1 	beq.w	800d2b2 <_svfiprintf_r+0x1c6>
 800d170:	2300      	movs	r3, #0
 800d172:	f04f 32ff 	mov.w	r2, #4294967295
 800d176:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d17a:	f10a 0a01 	add.w	sl, sl, #1
 800d17e:	9304      	str	r3, [sp, #16]
 800d180:	9307      	str	r3, [sp, #28]
 800d182:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d186:	931a      	str	r3, [sp, #104]	; 0x68
 800d188:	4654      	mov	r4, sl
 800d18a:	2205      	movs	r2, #5
 800d18c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d190:	4850      	ldr	r0, [pc, #320]	; (800d2d4 <_svfiprintf_r+0x1e8>)
 800d192:	f000 fa57 	bl	800d644 <memchr>
 800d196:	9a04      	ldr	r2, [sp, #16]
 800d198:	b9d8      	cbnz	r0, 800d1d2 <_svfiprintf_r+0xe6>
 800d19a:	06d0      	lsls	r0, r2, #27
 800d19c:	bf44      	itt	mi
 800d19e:	2320      	movmi	r3, #32
 800d1a0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1a4:	0711      	lsls	r1, r2, #28
 800d1a6:	bf44      	itt	mi
 800d1a8:	232b      	movmi	r3, #43	; 0x2b
 800d1aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1ae:	f89a 3000 	ldrb.w	r3, [sl]
 800d1b2:	2b2a      	cmp	r3, #42	; 0x2a
 800d1b4:	d015      	beq.n	800d1e2 <_svfiprintf_r+0xf6>
 800d1b6:	4654      	mov	r4, sl
 800d1b8:	2000      	movs	r0, #0
 800d1ba:	f04f 0c0a 	mov.w	ip, #10
 800d1be:	9a07      	ldr	r2, [sp, #28]
 800d1c0:	4621      	mov	r1, r4
 800d1c2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d1c6:	3b30      	subs	r3, #48	; 0x30
 800d1c8:	2b09      	cmp	r3, #9
 800d1ca:	d94d      	bls.n	800d268 <_svfiprintf_r+0x17c>
 800d1cc:	b1b0      	cbz	r0, 800d1fc <_svfiprintf_r+0x110>
 800d1ce:	9207      	str	r2, [sp, #28]
 800d1d0:	e014      	b.n	800d1fc <_svfiprintf_r+0x110>
 800d1d2:	eba0 0308 	sub.w	r3, r0, r8
 800d1d6:	fa09 f303 	lsl.w	r3, r9, r3
 800d1da:	4313      	orrs	r3, r2
 800d1dc:	46a2      	mov	sl, r4
 800d1de:	9304      	str	r3, [sp, #16]
 800d1e0:	e7d2      	b.n	800d188 <_svfiprintf_r+0x9c>
 800d1e2:	9b03      	ldr	r3, [sp, #12]
 800d1e4:	1d19      	adds	r1, r3, #4
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	9103      	str	r1, [sp, #12]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	bfbb      	ittet	lt
 800d1ee:	425b      	neglt	r3, r3
 800d1f0:	f042 0202 	orrlt.w	r2, r2, #2
 800d1f4:	9307      	strge	r3, [sp, #28]
 800d1f6:	9307      	strlt	r3, [sp, #28]
 800d1f8:	bfb8      	it	lt
 800d1fa:	9204      	strlt	r2, [sp, #16]
 800d1fc:	7823      	ldrb	r3, [r4, #0]
 800d1fe:	2b2e      	cmp	r3, #46	; 0x2e
 800d200:	d10c      	bne.n	800d21c <_svfiprintf_r+0x130>
 800d202:	7863      	ldrb	r3, [r4, #1]
 800d204:	2b2a      	cmp	r3, #42	; 0x2a
 800d206:	d134      	bne.n	800d272 <_svfiprintf_r+0x186>
 800d208:	9b03      	ldr	r3, [sp, #12]
 800d20a:	3402      	adds	r4, #2
 800d20c:	1d1a      	adds	r2, r3, #4
 800d20e:	681b      	ldr	r3, [r3, #0]
 800d210:	9203      	str	r2, [sp, #12]
 800d212:	2b00      	cmp	r3, #0
 800d214:	bfb8      	it	lt
 800d216:	f04f 33ff 	movlt.w	r3, #4294967295
 800d21a:	9305      	str	r3, [sp, #20]
 800d21c:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800d2d8 <_svfiprintf_r+0x1ec>
 800d220:	2203      	movs	r2, #3
 800d222:	4650      	mov	r0, sl
 800d224:	7821      	ldrb	r1, [r4, #0]
 800d226:	f000 fa0d 	bl	800d644 <memchr>
 800d22a:	b138      	cbz	r0, 800d23c <_svfiprintf_r+0x150>
 800d22c:	2240      	movs	r2, #64	; 0x40
 800d22e:	9b04      	ldr	r3, [sp, #16]
 800d230:	eba0 000a 	sub.w	r0, r0, sl
 800d234:	4082      	lsls	r2, r0
 800d236:	4313      	orrs	r3, r2
 800d238:	3401      	adds	r4, #1
 800d23a:	9304      	str	r3, [sp, #16]
 800d23c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d240:	2206      	movs	r2, #6
 800d242:	4826      	ldr	r0, [pc, #152]	; (800d2dc <_svfiprintf_r+0x1f0>)
 800d244:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d248:	f000 f9fc 	bl	800d644 <memchr>
 800d24c:	2800      	cmp	r0, #0
 800d24e:	d038      	beq.n	800d2c2 <_svfiprintf_r+0x1d6>
 800d250:	4b23      	ldr	r3, [pc, #140]	; (800d2e0 <_svfiprintf_r+0x1f4>)
 800d252:	bb1b      	cbnz	r3, 800d29c <_svfiprintf_r+0x1b0>
 800d254:	9b03      	ldr	r3, [sp, #12]
 800d256:	3307      	adds	r3, #7
 800d258:	f023 0307 	bic.w	r3, r3, #7
 800d25c:	3308      	adds	r3, #8
 800d25e:	9303      	str	r3, [sp, #12]
 800d260:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d262:	4433      	add	r3, r6
 800d264:	9309      	str	r3, [sp, #36]	; 0x24
 800d266:	e768      	b.n	800d13a <_svfiprintf_r+0x4e>
 800d268:	460c      	mov	r4, r1
 800d26a:	2001      	movs	r0, #1
 800d26c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d270:	e7a6      	b.n	800d1c0 <_svfiprintf_r+0xd4>
 800d272:	2300      	movs	r3, #0
 800d274:	f04f 0c0a 	mov.w	ip, #10
 800d278:	4619      	mov	r1, r3
 800d27a:	3401      	adds	r4, #1
 800d27c:	9305      	str	r3, [sp, #20]
 800d27e:	4620      	mov	r0, r4
 800d280:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d284:	3a30      	subs	r2, #48	; 0x30
 800d286:	2a09      	cmp	r2, #9
 800d288:	d903      	bls.n	800d292 <_svfiprintf_r+0x1a6>
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d0c6      	beq.n	800d21c <_svfiprintf_r+0x130>
 800d28e:	9105      	str	r1, [sp, #20]
 800d290:	e7c4      	b.n	800d21c <_svfiprintf_r+0x130>
 800d292:	4604      	mov	r4, r0
 800d294:	2301      	movs	r3, #1
 800d296:	fb0c 2101 	mla	r1, ip, r1, r2
 800d29a:	e7f0      	b.n	800d27e <_svfiprintf_r+0x192>
 800d29c:	ab03      	add	r3, sp, #12
 800d29e:	9300      	str	r3, [sp, #0]
 800d2a0:	462a      	mov	r2, r5
 800d2a2:	4638      	mov	r0, r7
 800d2a4:	4b0f      	ldr	r3, [pc, #60]	; (800d2e4 <_svfiprintf_r+0x1f8>)
 800d2a6:	a904      	add	r1, sp, #16
 800d2a8:	f3af 8000 	nop.w
 800d2ac:	1c42      	adds	r2, r0, #1
 800d2ae:	4606      	mov	r6, r0
 800d2b0:	d1d6      	bne.n	800d260 <_svfiprintf_r+0x174>
 800d2b2:	89ab      	ldrh	r3, [r5, #12]
 800d2b4:	065b      	lsls	r3, r3, #25
 800d2b6:	f53f af2d 	bmi.w	800d114 <_svfiprintf_r+0x28>
 800d2ba:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d2bc:	b01d      	add	sp, #116	; 0x74
 800d2be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2c2:	ab03      	add	r3, sp, #12
 800d2c4:	9300      	str	r3, [sp, #0]
 800d2c6:	462a      	mov	r2, r5
 800d2c8:	4638      	mov	r0, r7
 800d2ca:	4b06      	ldr	r3, [pc, #24]	; (800d2e4 <_svfiprintf_r+0x1f8>)
 800d2cc:	a904      	add	r1, sp, #16
 800d2ce:	f000 f87d 	bl	800d3cc <_printf_i>
 800d2d2:	e7eb      	b.n	800d2ac <_svfiprintf_r+0x1c0>
 800d2d4:	0800e5fb 	.word	0x0800e5fb
 800d2d8:	0800e601 	.word	0x0800e601
 800d2dc:	0800e605 	.word	0x0800e605
 800d2e0:	00000000 	.word	0x00000000
 800d2e4:	0800d039 	.word	0x0800d039

0800d2e8 <_printf_common>:
 800d2e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2ec:	4616      	mov	r6, r2
 800d2ee:	4699      	mov	r9, r3
 800d2f0:	688a      	ldr	r2, [r1, #8]
 800d2f2:	690b      	ldr	r3, [r1, #16]
 800d2f4:	4607      	mov	r7, r0
 800d2f6:	4293      	cmp	r3, r2
 800d2f8:	bfb8      	it	lt
 800d2fa:	4613      	movlt	r3, r2
 800d2fc:	6033      	str	r3, [r6, #0]
 800d2fe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d302:	460c      	mov	r4, r1
 800d304:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d308:	b10a      	cbz	r2, 800d30e <_printf_common+0x26>
 800d30a:	3301      	adds	r3, #1
 800d30c:	6033      	str	r3, [r6, #0]
 800d30e:	6823      	ldr	r3, [r4, #0]
 800d310:	0699      	lsls	r1, r3, #26
 800d312:	bf42      	ittt	mi
 800d314:	6833      	ldrmi	r3, [r6, #0]
 800d316:	3302      	addmi	r3, #2
 800d318:	6033      	strmi	r3, [r6, #0]
 800d31a:	6825      	ldr	r5, [r4, #0]
 800d31c:	f015 0506 	ands.w	r5, r5, #6
 800d320:	d106      	bne.n	800d330 <_printf_common+0x48>
 800d322:	f104 0a19 	add.w	sl, r4, #25
 800d326:	68e3      	ldr	r3, [r4, #12]
 800d328:	6832      	ldr	r2, [r6, #0]
 800d32a:	1a9b      	subs	r3, r3, r2
 800d32c:	42ab      	cmp	r3, r5
 800d32e:	dc2b      	bgt.n	800d388 <_printf_common+0xa0>
 800d330:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d334:	1e13      	subs	r3, r2, #0
 800d336:	6822      	ldr	r2, [r4, #0]
 800d338:	bf18      	it	ne
 800d33a:	2301      	movne	r3, #1
 800d33c:	0692      	lsls	r2, r2, #26
 800d33e:	d430      	bmi.n	800d3a2 <_printf_common+0xba>
 800d340:	4649      	mov	r1, r9
 800d342:	4638      	mov	r0, r7
 800d344:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d348:	47c0      	blx	r8
 800d34a:	3001      	adds	r0, #1
 800d34c:	d023      	beq.n	800d396 <_printf_common+0xae>
 800d34e:	6823      	ldr	r3, [r4, #0]
 800d350:	6922      	ldr	r2, [r4, #16]
 800d352:	f003 0306 	and.w	r3, r3, #6
 800d356:	2b04      	cmp	r3, #4
 800d358:	bf14      	ite	ne
 800d35a:	2500      	movne	r5, #0
 800d35c:	6833      	ldreq	r3, [r6, #0]
 800d35e:	f04f 0600 	mov.w	r6, #0
 800d362:	bf08      	it	eq
 800d364:	68e5      	ldreq	r5, [r4, #12]
 800d366:	f104 041a 	add.w	r4, r4, #26
 800d36a:	bf08      	it	eq
 800d36c:	1aed      	subeq	r5, r5, r3
 800d36e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d372:	bf08      	it	eq
 800d374:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d378:	4293      	cmp	r3, r2
 800d37a:	bfc4      	itt	gt
 800d37c:	1a9b      	subgt	r3, r3, r2
 800d37e:	18ed      	addgt	r5, r5, r3
 800d380:	42b5      	cmp	r5, r6
 800d382:	d11a      	bne.n	800d3ba <_printf_common+0xd2>
 800d384:	2000      	movs	r0, #0
 800d386:	e008      	b.n	800d39a <_printf_common+0xb2>
 800d388:	2301      	movs	r3, #1
 800d38a:	4652      	mov	r2, sl
 800d38c:	4649      	mov	r1, r9
 800d38e:	4638      	mov	r0, r7
 800d390:	47c0      	blx	r8
 800d392:	3001      	adds	r0, #1
 800d394:	d103      	bne.n	800d39e <_printf_common+0xb6>
 800d396:	f04f 30ff 	mov.w	r0, #4294967295
 800d39a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d39e:	3501      	adds	r5, #1
 800d3a0:	e7c1      	b.n	800d326 <_printf_common+0x3e>
 800d3a2:	2030      	movs	r0, #48	; 0x30
 800d3a4:	18e1      	adds	r1, r4, r3
 800d3a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d3aa:	1c5a      	adds	r2, r3, #1
 800d3ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d3b0:	4422      	add	r2, r4
 800d3b2:	3302      	adds	r3, #2
 800d3b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d3b8:	e7c2      	b.n	800d340 <_printf_common+0x58>
 800d3ba:	2301      	movs	r3, #1
 800d3bc:	4622      	mov	r2, r4
 800d3be:	4649      	mov	r1, r9
 800d3c0:	4638      	mov	r0, r7
 800d3c2:	47c0      	blx	r8
 800d3c4:	3001      	adds	r0, #1
 800d3c6:	d0e6      	beq.n	800d396 <_printf_common+0xae>
 800d3c8:	3601      	adds	r6, #1
 800d3ca:	e7d9      	b.n	800d380 <_printf_common+0x98>

0800d3cc <_printf_i>:
 800d3cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d3d0:	7e0f      	ldrb	r7, [r1, #24]
 800d3d2:	4691      	mov	r9, r2
 800d3d4:	2f78      	cmp	r7, #120	; 0x78
 800d3d6:	4680      	mov	r8, r0
 800d3d8:	460c      	mov	r4, r1
 800d3da:	469a      	mov	sl, r3
 800d3dc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d3de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d3e2:	d807      	bhi.n	800d3f4 <_printf_i+0x28>
 800d3e4:	2f62      	cmp	r7, #98	; 0x62
 800d3e6:	d80a      	bhi.n	800d3fe <_printf_i+0x32>
 800d3e8:	2f00      	cmp	r7, #0
 800d3ea:	f000 80d5 	beq.w	800d598 <_printf_i+0x1cc>
 800d3ee:	2f58      	cmp	r7, #88	; 0x58
 800d3f0:	f000 80c1 	beq.w	800d576 <_printf_i+0x1aa>
 800d3f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d3f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d3fc:	e03a      	b.n	800d474 <_printf_i+0xa8>
 800d3fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d402:	2b15      	cmp	r3, #21
 800d404:	d8f6      	bhi.n	800d3f4 <_printf_i+0x28>
 800d406:	a101      	add	r1, pc, #4	; (adr r1, 800d40c <_printf_i+0x40>)
 800d408:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d40c:	0800d465 	.word	0x0800d465
 800d410:	0800d479 	.word	0x0800d479
 800d414:	0800d3f5 	.word	0x0800d3f5
 800d418:	0800d3f5 	.word	0x0800d3f5
 800d41c:	0800d3f5 	.word	0x0800d3f5
 800d420:	0800d3f5 	.word	0x0800d3f5
 800d424:	0800d479 	.word	0x0800d479
 800d428:	0800d3f5 	.word	0x0800d3f5
 800d42c:	0800d3f5 	.word	0x0800d3f5
 800d430:	0800d3f5 	.word	0x0800d3f5
 800d434:	0800d3f5 	.word	0x0800d3f5
 800d438:	0800d57f 	.word	0x0800d57f
 800d43c:	0800d4a5 	.word	0x0800d4a5
 800d440:	0800d539 	.word	0x0800d539
 800d444:	0800d3f5 	.word	0x0800d3f5
 800d448:	0800d3f5 	.word	0x0800d3f5
 800d44c:	0800d5a1 	.word	0x0800d5a1
 800d450:	0800d3f5 	.word	0x0800d3f5
 800d454:	0800d4a5 	.word	0x0800d4a5
 800d458:	0800d3f5 	.word	0x0800d3f5
 800d45c:	0800d3f5 	.word	0x0800d3f5
 800d460:	0800d541 	.word	0x0800d541
 800d464:	682b      	ldr	r3, [r5, #0]
 800d466:	1d1a      	adds	r2, r3, #4
 800d468:	681b      	ldr	r3, [r3, #0]
 800d46a:	602a      	str	r2, [r5, #0]
 800d46c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d470:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d474:	2301      	movs	r3, #1
 800d476:	e0a0      	b.n	800d5ba <_printf_i+0x1ee>
 800d478:	6820      	ldr	r0, [r4, #0]
 800d47a:	682b      	ldr	r3, [r5, #0]
 800d47c:	0607      	lsls	r7, r0, #24
 800d47e:	f103 0104 	add.w	r1, r3, #4
 800d482:	6029      	str	r1, [r5, #0]
 800d484:	d501      	bpl.n	800d48a <_printf_i+0xbe>
 800d486:	681e      	ldr	r6, [r3, #0]
 800d488:	e003      	b.n	800d492 <_printf_i+0xc6>
 800d48a:	0646      	lsls	r6, r0, #25
 800d48c:	d5fb      	bpl.n	800d486 <_printf_i+0xba>
 800d48e:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d492:	2e00      	cmp	r6, #0
 800d494:	da03      	bge.n	800d49e <_printf_i+0xd2>
 800d496:	232d      	movs	r3, #45	; 0x2d
 800d498:	4276      	negs	r6, r6
 800d49a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d49e:	230a      	movs	r3, #10
 800d4a0:	4859      	ldr	r0, [pc, #356]	; (800d608 <_printf_i+0x23c>)
 800d4a2:	e012      	b.n	800d4ca <_printf_i+0xfe>
 800d4a4:	682b      	ldr	r3, [r5, #0]
 800d4a6:	6820      	ldr	r0, [r4, #0]
 800d4a8:	1d19      	adds	r1, r3, #4
 800d4aa:	6029      	str	r1, [r5, #0]
 800d4ac:	0605      	lsls	r5, r0, #24
 800d4ae:	d501      	bpl.n	800d4b4 <_printf_i+0xe8>
 800d4b0:	681e      	ldr	r6, [r3, #0]
 800d4b2:	e002      	b.n	800d4ba <_printf_i+0xee>
 800d4b4:	0641      	lsls	r1, r0, #25
 800d4b6:	d5fb      	bpl.n	800d4b0 <_printf_i+0xe4>
 800d4b8:	881e      	ldrh	r6, [r3, #0]
 800d4ba:	2f6f      	cmp	r7, #111	; 0x6f
 800d4bc:	bf0c      	ite	eq
 800d4be:	2308      	moveq	r3, #8
 800d4c0:	230a      	movne	r3, #10
 800d4c2:	4851      	ldr	r0, [pc, #324]	; (800d608 <_printf_i+0x23c>)
 800d4c4:	2100      	movs	r1, #0
 800d4c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d4ca:	6865      	ldr	r5, [r4, #4]
 800d4cc:	2d00      	cmp	r5, #0
 800d4ce:	bfa8      	it	ge
 800d4d0:	6821      	ldrge	r1, [r4, #0]
 800d4d2:	60a5      	str	r5, [r4, #8]
 800d4d4:	bfa4      	itt	ge
 800d4d6:	f021 0104 	bicge.w	r1, r1, #4
 800d4da:	6021      	strge	r1, [r4, #0]
 800d4dc:	b90e      	cbnz	r6, 800d4e2 <_printf_i+0x116>
 800d4de:	2d00      	cmp	r5, #0
 800d4e0:	d04b      	beq.n	800d57a <_printf_i+0x1ae>
 800d4e2:	4615      	mov	r5, r2
 800d4e4:	fbb6 f1f3 	udiv	r1, r6, r3
 800d4e8:	fb03 6711 	mls	r7, r3, r1, r6
 800d4ec:	5dc7      	ldrb	r7, [r0, r7]
 800d4ee:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d4f2:	4637      	mov	r7, r6
 800d4f4:	42bb      	cmp	r3, r7
 800d4f6:	460e      	mov	r6, r1
 800d4f8:	d9f4      	bls.n	800d4e4 <_printf_i+0x118>
 800d4fa:	2b08      	cmp	r3, #8
 800d4fc:	d10b      	bne.n	800d516 <_printf_i+0x14a>
 800d4fe:	6823      	ldr	r3, [r4, #0]
 800d500:	07de      	lsls	r6, r3, #31
 800d502:	d508      	bpl.n	800d516 <_printf_i+0x14a>
 800d504:	6923      	ldr	r3, [r4, #16]
 800d506:	6861      	ldr	r1, [r4, #4]
 800d508:	4299      	cmp	r1, r3
 800d50a:	bfde      	ittt	le
 800d50c:	2330      	movle	r3, #48	; 0x30
 800d50e:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d512:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d516:	1b52      	subs	r2, r2, r5
 800d518:	6122      	str	r2, [r4, #16]
 800d51a:	464b      	mov	r3, r9
 800d51c:	4621      	mov	r1, r4
 800d51e:	4640      	mov	r0, r8
 800d520:	f8cd a000 	str.w	sl, [sp]
 800d524:	aa03      	add	r2, sp, #12
 800d526:	f7ff fedf 	bl	800d2e8 <_printf_common>
 800d52a:	3001      	adds	r0, #1
 800d52c:	d14a      	bne.n	800d5c4 <_printf_i+0x1f8>
 800d52e:	f04f 30ff 	mov.w	r0, #4294967295
 800d532:	b004      	add	sp, #16
 800d534:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d538:	6823      	ldr	r3, [r4, #0]
 800d53a:	f043 0320 	orr.w	r3, r3, #32
 800d53e:	6023      	str	r3, [r4, #0]
 800d540:	2778      	movs	r7, #120	; 0x78
 800d542:	4832      	ldr	r0, [pc, #200]	; (800d60c <_printf_i+0x240>)
 800d544:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d548:	6823      	ldr	r3, [r4, #0]
 800d54a:	6829      	ldr	r1, [r5, #0]
 800d54c:	061f      	lsls	r7, r3, #24
 800d54e:	f851 6b04 	ldr.w	r6, [r1], #4
 800d552:	d402      	bmi.n	800d55a <_printf_i+0x18e>
 800d554:	065f      	lsls	r7, r3, #25
 800d556:	bf48      	it	mi
 800d558:	b2b6      	uxthmi	r6, r6
 800d55a:	07df      	lsls	r7, r3, #31
 800d55c:	bf48      	it	mi
 800d55e:	f043 0320 	orrmi.w	r3, r3, #32
 800d562:	6029      	str	r1, [r5, #0]
 800d564:	bf48      	it	mi
 800d566:	6023      	strmi	r3, [r4, #0]
 800d568:	b91e      	cbnz	r6, 800d572 <_printf_i+0x1a6>
 800d56a:	6823      	ldr	r3, [r4, #0]
 800d56c:	f023 0320 	bic.w	r3, r3, #32
 800d570:	6023      	str	r3, [r4, #0]
 800d572:	2310      	movs	r3, #16
 800d574:	e7a6      	b.n	800d4c4 <_printf_i+0xf8>
 800d576:	4824      	ldr	r0, [pc, #144]	; (800d608 <_printf_i+0x23c>)
 800d578:	e7e4      	b.n	800d544 <_printf_i+0x178>
 800d57a:	4615      	mov	r5, r2
 800d57c:	e7bd      	b.n	800d4fa <_printf_i+0x12e>
 800d57e:	682b      	ldr	r3, [r5, #0]
 800d580:	6826      	ldr	r6, [r4, #0]
 800d582:	1d18      	adds	r0, r3, #4
 800d584:	6961      	ldr	r1, [r4, #20]
 800d586:	6028      	str	r0, [r5, #0]
 800d588:	0635      	lsls	r5, r6, #24
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	d501      	bpl.n	800d592 <_printf_i+0x1c6>
 800d58e:	6019      	str	r1, [r3, #0]
 800d590:	e002      	b.n	800d598 <_printf_i+0x1cc>
 800d592:	0670      	lsls	r0, r6, #25
 800d594:	d5fb      	bpl.n	800d58e <_printf_i+0x1c2>
 800d596:	8019      	strh	r1, [r3, #0]
 800d598:	2300      	movs	r3, #0
 800d59a:	4615      	mov	r5, r2
 800d59c:	6123      	str	r3, [r4, #16]
 800d59e:	e7bc      	b.n	800d51a <_printf_i+0x14e>
 800d5a0:	682b      	ldr	r3, [r5, #0]
 800d5a2:	2100      	movs	r1, #0
 800d5a4:	1d1a      	adds	r2, r3, #4
 800d5a6:	602a      	str	r2, [r5, #0]
 800d5a8:	681d      	ldr	r5, [r3, #0]
 800d5aa:	6862      	ldr	r2, [r4, #4]
 800d5ac:	4628      	mov	r0, r5
 800d5ae:	f000 f849 	bl	800d644 <memchr>
 800d5b2:	b108      	cbz	r0, 800d5b8 <_printf_i+0x1ec>
 800d5b4:	1b40      	subs	r0, r0, r5
 800d5b6:	6060      	str	r0, [r4, #4]
 800d5b8:	6863      	ldr	r3, [r4, #4]
 800d5ba:	6123      	str	r3, [r4, #16]
 800d5bc:	2300      	movs	r3, #0
 800d5be:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d5c2:	e7aa      	b.n	800d51a <_printf_i+0x14e>
 800d5c4:	462a      	mov	r2, r5
 800d5c6:	4649      	mov	r1, r9
 800d5c8:	4640      	mov	r0, r8
 800d5ca:	6923      	ldr	r3, [r4, #16]
 800d5cc:	47d0      	blx	sl
 800d5ce:	3001      	adds	r0, #1
 800d5d0:	d0ad      	beq.n	800d52e <_printf_i+0x162>
 800d5d2:	6823      	ldr	r3, [r4, #0]
 800d5d4:	079b      	lsls	r3, r3, #30
 800d5d6:	d413      	bmi.n	800d600 <_printf_i+0x234>
 800d5d8:	68e0      	ldr	r0, [r4, #12]
 800d5da:	9b03      	ldr	r3, [sp, #12]
 800d5dc:	4298      	cmp	r0, r3
 800d5de:	bfb8      	it	lt
 800d5e0:	4618      	movlt	r0, r3
 800d5e2:	e7a6      	b.n	800d532 <_printf_i+0x166>
 800d5e4:	2301      	movs	r3, #1
 800d5e6:	4632      	mov	r2, r6
 800d5e8:	4649      	mov	r1, r9
 800d5ea:	4640      	mov	r0, r8
 800d5ec:	47d0      	blx	sl
 800d5ee:	3001      	adds	r0, #1
 800d5f0:	d09d      	beq.n	800d52e <_printf_i+0x162>
 800d5f2:	3501      	adds	r5, #1
 800d5f4:	68e3      	ldr	r3, [r4, #12]
 800d5f6:	9903      	ldr	r1, [sp, #12]
 800d5f8:	1a5b      	subs	r3, r3, r1
 800d5fa:	42ab      	cmp	r3, r5
 800d5fc:	dcf2      	bgt.n	800d5e4 <_printf_i+0x218>
 800d5fe:	e7eb      	b.n	800d5d8 <_printf_i+0x20c>
 800d600:	2500      	movs	r5, #0
 800d602:	f104 0619 	add.w	r6, r4, #25
 800d606:	e7f5      	b.n	800d5f4 <_printf_i+0x228>
 800d608:	0800e60c 	.word	0x0800e60c
 800d60c:	0800e61d 	.word	0x0800e61d

0800d610 <memmove>:
 800d610:	4288      	cmp	r0, r1
 800d612:	b510      	push	{r4, lr}
 800d614:	eb01 0402 	add.w	r4, r1, r2
 800d618:	d902      	bls.n	800d620 <memmove+0x10>
 800d61a:	4284      	cmp	r4, r0
 800d61c:	4623      	mov	r3, r4
 800d61e:	d807      	bhi.n	800d630 <memmove+0x20>
 800d620:	1e43      	subs	r3, r0, #1
 800d622:	42a1      	cmp	r1, r4
 800d624:	d008      	beq.n	800d638 <memmove+0x28>
 800d626:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d62a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d62e:	e7f8      	b.n	800d622 <memmove+0x12>
 800d630:	4601      	mov	r1, r0
 800d632:	4402      	add	r2, r0
 800d634:	428a      	cmp	r2, r1
 800d636:	d100      	bne.n	800d63a <memmove+0x2a>
 800d638:	bd10      	pop	{r4, pc}
 800d63a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d63e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d642:	e7f7      	b.n	800d634 <memmove+0x24>

0800d644 <memchr>:
 800d644:	4603      	mov	r3, r0
 800d646:	b510      	push	{r4, lr}
 800d648:	b2c9      	uxtb	r1, r1
 800d64a:	4402      	add	r2, r0
 800d64c:	4293      	cmp	r3, r2
 800d64e:	4618      	mov	r0, r3
 800d650:	d101      	bne.n	800d656 <memchr+0x12>
 800d652:	2000      	movs	r0, #0
 800d654:	e003      	b.n	800d65e <memchr+0x1a>
 800d656:	7804      	ldrb	r4, [r0, #0]
 800d658:	3301      	adds	r3, #1
 800d65a:	428c      	cmp	r4, r1
 800d65c:	d1f6      	bne.n	800d64c <memchr+0x8>
 800d65e:	bd10      	pop	{r4, pc}

0800d660 <memcpy>:
 800d660:	440a      	add	r2, r1
 800d662:	4291      	cmp	r1, r2
 800d664:	f100 33ff 	add.w	r3, r0, #4294967295
 800d668:	d100      	bne.n	800d66c <memcpy+0xc>
 800d66a:	4770      	bx	lr
 800d66c:	b510      	push	{r4, lr}
 800d66e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d672:	4291      	cmp	r1, r2
 800d674:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d678:	d1f9      	bne.n	800d66e <memcpy+0xe>
 800d67a:	bd10      	pop	{r4, pc}

0800d67c <_realloc_r>:
 800d67c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d680:	4680      	mov	r8, r0
 800d682:	4614      	mov	r4, r2
 800d684:	460e      	mov	r6, r1
 800d686:	b921      	cbnz	r1, 800d692 <_realloc_r+0x16>
 800d688:	4611      	mov	r1, r2
 800d68a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d68e:	f7ff bb41 	b.w	800cd14 <_malloc_r>
 800d692:	b92a      	cbnz	r2, 800d6a0 <_realloc_r+0x24>
 800d694:	f7ff fc88 	bl	800cfa8 <_free_r>
 800d698:	4625      	mov	r5, r4
 800d69a:	4628      	mov	r0, r5
 800d69c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6a0:	f000 f81b 	bl	800d6da <_malloc_usable_size_r>
 800d6a4:	4284      	cmp	r4, r0
 800d6a6:	4607      	mov	r7, r0
 800d6a8:	d802      	bhi.n	800d6b0 <_realloc_r+0x34>
 800d6aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d6ae:	d812      	bhi.n	800d6d6 <_realloc_r+0x5a>
 800d6b0:	4621      	mov	r1, r4
 800d6b2:	4640      	mov	r0, r8
 800d6b4:	f7ff fb2e 	bl	800cd14 <_malloc_r>
 800d6b8:	4605      	mov	r5, r0
 800d6ba:	2800      	cmp	r0, #0
 800d6bc:	d0ed      	beq.n	800d69a <_realloc_r+0x1e>
 800d6be:	42bc      	cmp	r4, r7
 800d6c0:	4622      	mov	r2, r4
 800d6c2:	4631      	mov	r1, r6
 800d6c4:	bf28      	it	cs
 800d6c6:	463a      	movcs	r2, r7
 800d6c8:	f7ff ffca 	bl	800d660 <memcpy>
 800d6cc:	4631      	mov	r1, r6
 800d6ce:	4640      	mov	r0, r8
 800d6d0:	f7ff fc6a 	bl	800cfa8 <_free_r>
 800d6d4:	e7e1      	b.n	800d69a <_realloc_r+0x1e>
 800d6d6:	4635      	mov	r5, r6
 800d6d8:	e7df      	b.n	800d69a <_realloc_r+0x1e>

0800d6da <_malloc_usable_size_r>:
 800d6da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d6de:	1f18      	subs	r0, r3, #4
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	bfbc      	itt	lt
 800d6e4:	580b      	ldrlt	r3, [r1, r0]
 800d6e6:	18c0      	addlt	r0, r0, r3
 800d6e8:	4770      	bx	lr
	...

0800d6ec <_init>:
 800d6ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6ee:	bf00      	nop
 800d6f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6f2:	bc08      	pop	{r3}
 800d6f4:	469e      	mov	lr, r3
 800d6f6:	4770      	bx	lr

0800d6f8 <_fini>:
 800d6f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6fa:	bf00      	nop
 800d6fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6fe:	bc08      	pop	{r3}
 800d700:	469e      	mov	lr, r3
 800d702:	4770      	bx	lr
