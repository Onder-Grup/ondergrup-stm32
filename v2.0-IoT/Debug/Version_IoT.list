
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca7c  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000dc4  0800cc60  0800cc60  0001cc60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800da24  0800da24  00020a14  2**0
                  CONTENTS
  4 .ARM          00000000  0800da24  0800da24  00020a14  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800da24  0800da24  00020a14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800da24  0800da24  0001da24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800da28  0800da28  0001da28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a14  20000000  0800da2c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004e0  20000a14  0800e440  00020a14  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ef4  0800e440  00020ef4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020a14  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020a3d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012e9f  00000000  00000000  00020a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024ad  00000000  00000000  0003391f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001190  00000000  00000000  00035dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000deb  00000000  00000000  00036f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002495  00000000  00000000  00037d4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001804c  00000000  00000000  0003a1e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009fc2e  00000000  00000000  0005222c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004ed8  00000000  00000000  000f1e5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000f6d34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000a14 	.word	0x20000a14
 8000200:	00000000 	.word	0x00000000
 8000204:	0800cc48 	.word	0x0800cc48

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000a18 	.word	0x20000a18
 8000220:	0800cc48 	.word	0x0800cc48

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8000234:	b580      	push	{r7, lr}
 8000236:	b086      	sub	sp, #24
 8000238:	af02      	add	r7, sp, #8
 800023a:	4603      	mov	r3, r0
 800023c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 800023e:	79fb      	ldrb	r3, [r7, #7]
 8000240:	f023 030f 	bic.w	r3, r3, #15
 8000244:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 8000246:	79fb      	ldrb	r3, [r7, #7]
 8000248:	011b      	lsls	r3, r3, #4
 800024a:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 800024c:	7b7b      	ldrb	r3, [r7, #13]
 800024e:	f043 030c 	orr.w	r3, r3, #12
 8000252:	b2db      	uxtb	r3, r3
 8000254:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000256:	7b7b      	ldrb	r3, [r7, #13]
 8000258:	f043 0308 	orr.w	r3, r3, #8
 800025c:	b2db      	uxtb	r3, r3
 800025e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000260:	7b3b      	ldrb	r3, [r7, #12]
 8000262:	f043 030c 	orr.w	r3, r3, #12
 8000266:	b2db      	uxtb	r3, r3
 8000268:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800026a:	7b3b      	ldrb	r3, [r7, #12]
 800026c:	f043 0308 	orr.w	r3, r3, #8
 8000270:	b2db      	uxtb	r3, r3
 8000272:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8000274:	bf00      	nop
 8000276:	4825      	ldr	r0, [pc, #148]	; (800030c <lcd_send_cmd+0xd8>)
 8000278:	f00a f9d5 	bl	800a626 <HAL_I2C_GetError>
 800027c:	4603      	mov	r3, r0
 800027e:	2b04      	cmp	r3, #4
 8000280:	d0f9      	beq.n	8000276 <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000282:	bf00      	nop
 8000284:	4821      	ldr	r0, [pc, #132]	; (800030c <lcd_send_cmd+0xd8>)
 8000286:	f00a f9c1 	bl	800a60c <HAL_I2C_GetState>
 800028a:	4603      	mov	r3, r0
 800028c:	2b20      	cmp	r3, #32
 800028e:	d1f9      	bne.n	8000284 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8000290:	4b1f      	ldr	r3, [pc, #124]	; (8000310 <lcd_send_cmd+0xdc>)
 8000292:	781b      	ldrb	r3, [r3, #0]
 8000294:	2b00      	cmp	r3, #0
 8000296:	d116      	bne.n	80002c6 <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8000298:	2300      	movs	r3, #0
 800029a:	73fb      	strb	r3, [r7, #15]
 800029c:	e00f      	b.n	80002be <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 800029e:	7bfb      	ldrb	r3, [r7, #15]
 80002a0:	3310      	adds	r3, #16
 80002a2:	443b      	add	r3, r7
 80002a4:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80002a8:	7bfb      	ldrb	r3, [r7, #15]
 80002aa:	f022 0208 	bic.w	r2, r2, #8
 80002ae:	b2d2      	uxtb	r2, r2
 80002b0:	3310      	adds	r3, #16
 80002b2:	443b      	add	r3, r7
 80002b4:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80002b8:	7bfb      	ldrb	r3, [r7, #15]
 80002ba:	3301      	adds	r3, #1
 80002bc:	73fb      	strb	r3, [r7, #15]
 80002be:	7bfb      	ldrb	r3, [r7, #15]
 80002c0:	2b03      	cmp	r3, #3
 80002c2:	d9ec      	bls.n	800029e <lcd_send_cmd+0x6a>
 80002c4:	e015      	b.n	80002f2 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80002c6:	2300      	movs	r3, #0
 80002c8:	73bb      	strb	r3, [r7, #14]
 80002ca:	e00f      	b.n	80002ec <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 80002cc:	7bbb      	ldrb	r3, [r7, #14]
 80002ce:	3310      	adds	r3, #16
 80002d0:	443b      	add	r3, r7
 80002d2:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80002d6:	7bbb      	ldrb	r3, [r7, #14]
 80002d8:	f042 0208 	orr.w	r2, r2, #8
 80002dc:	b2d2      	uxtb	r2, r2
 80002de:	3310      	adds	r3, #16
 80002e0:	443b      	add	r3, r7
 80002e2:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80002e6:	7bbb      	ldrb	r3, [r7, #14]
 80002e8:	3301      	adds	r3, #1
 80002ea:	73bb      	strb	r3, [r7, #14]
 80002ec:	7bbb      	ldrb	r3, [r7, #14]
 80002ee:	2b03      	cmp	r3, #3
 80002f0:	d9ec      	bls.n	80002cc <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80002f2:	f107 0208 	add.w	r2, r7, #8
 80002f6:	2364      	movs	r3, #100	; 0x64
 80002f8:	9300      	str	r3, [sp, #0]
 80002fa:	2304      	movs	r3, #4
 80002fc:	214e      	movs	r1, #78	; 0x4e
 80002fe:	4803      	ldr	r0, [pc, #12]	; (800030c <lcd_send_cmd+0xd8>)
 8000300:	f009 fd24 	bl	8009d4c <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000304:	bf00      	nop
 8000306:	3710      	adds	r7, #16
 8000308:	46bd      	mov	sp, r7
 800030a:	bd80      	pop	{r7, pc}
 800030c:	20000a5c 	.word	0x20000a5c
 8000310:	20000a30 	.word	0x20000a30

08000314 <lcd_send_data>:

void lcd_send_data (char data) {
 8000314:	b580      	push	{r7, lr}
 8000316:	b086      	sub	sp, #24
 8000318:	af02      	add	r7, sp, #8
 800031a:	4603      	mov	r3, r0
 800031c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800031e:	79fb      	ldrb	r3, [r7, #7]
 8000320:	f023 030f 	bic.w	r3, r3, #15
 8000324:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 8000326:	79fb      	ldrb	r3, [r7, #7]
 8000328:	011b      	lsls	r3, r3, #4
 800032a:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 800032c:	7b7b      	ldrb	r3, [r7, #13]
 800032e:	f043 030d 	orr.w	r3, r3, #13
 8000332:	b2db      	uxtb	r3, r3
 8000334:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000336:	7b7b      	ldrb	r3, [r7, #13]
 8000338:	f043 0309 	orr.w	r3, r3, #9
 800033c:	b2db      	uxtb	r3, r3
 800033e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000340:	7b3b      	ldrb	r3, [r7, #12]
 8000342:	f043 030d 	orr.w	r3, r3, #13
 8000346:	b2db      	uxtb	r3, r3
 8000348:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800034a:	7b3b      	ldrb	r3, [r7, #12]
 800034c:	f043 0309 	orr.w	r3, r3, #9
 8000350:	b2db      	uxtb	r3, r3
 8000352:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8000354:	bf00      	nop
 8000356:	4825      	ldr	r0, [pc, #148]	; (80003ec <lcd_send_data+0xd8>)
 8000358:	f00a f965 	bl	800a626 <HAL_I2C_GetError>
 800035c:	4603      	mov	r3, r0
 800035e:	2b04      	cmp	r3, #4
 8000360:	d0f9      	beq.n	8000356 <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000362:	bf00      	nop
 8000364:	4821      	ldr	r0, [pc, #132]	; (80003ec <lcd_send_data+0xd8>)
 8000366:	f00a f951 	bl	800a60c <HAL_I2C_GetState>
 800036a:	4603      	mov	r3, r0
 800036c:	2b20      	cmp	r3, #32
 800036e:	d1f9      	bne.n	8000364 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8000370:	4b1f      	ldr	r3, [pc, #124]	; (80003f0 <lcd_send_data+0xdc>)
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	2b00      	cmp	r3, #0
 8000376:	d116      	bne.n	80003a6 <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 8000378:	2300      	movs	r3, #0
 800037a:	73fb      	strb	r3, [r7, #15]
 800037c:	e00f      	b.n	800039e <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 800037e:	7bfb      	ldrb	r3, [r7, #15]
 8000380:	3310      	adds	r3, #16
 8000382:	443b      	add	r3, r7
 8000384:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000388:	7bfb      	ldrb	r3, [r7, #15]
 800038a:	f022 0208 	bic.w	r2, r2, #8
 800038e:	b2d2      	uxtb	r2, r2
 8000390:	3310      	adds	r3, #16
 8000392:	443b      	add	r3, r7
 8000394:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 8000398:	7bfb      	ldrb	r3, [r7, #15]
 800039a:	3301      	adds	r3, #1
 800039c:	73fb      	strb	r3, [r7, #15]
 800039e:	7bfb      	ldrb	r3, [r7, #15]
 80003a0:	2b03      	cmp	r3, #3
 80003a2:	d9ec      	bls.n	800037e <lcd_send_data+0x6a>
 80003a4:	e015      	b.n	80003d2 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80003a6:	2300      	movs	r3, #0
 80003a8:	73bb      	strb	r3, [r7, #14]
 80003aa:	e00f      	b.n	80003cc <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 80003ac:	7bbb      	ldrb	r3, [r7, #14]
 80003ae:	3310      	adds	r3, #16
 80003b0:	443b      	add	r3, r7
 80003b2:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80003b6:	7bbb      	ldrb	r3, [r7, #14]
 80003b8:	f042 0208 	orr.w	r2, r2, #8
 80003bc:	b2d2      	uxtb	r2, r2
 80003be:	3310      	adds	r3, #16
 80003c0:	443b      	add	r3, r7
 80003c2:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80003c6:	7bbb      	ldrb	r3, [r7, #14]
 80003c8:	3301      	adds	r3, #1
 80003ca:	73bb      	strb	r3, [r7, #14]
 80003cc:	7bbb      	ldrb	r3, [r7, #14]
 80003ce:	2b03      	cmp	r3, #3
 80003d0:	d9ec      	bls.n	80003ac <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80003d2:	f107 0208 	add.w	r2, r7, #8
 80003d6:	2364      	movs	r3, #100	; 0x64
 80003d8:	9300      	str	r3, [sp, #0]
 80003da:	2304      	movs	r3, #4
 80003dc:	214e      	movs	r1, #78	; 0x4e
 80003de:	4803      	ldr	r0, [pc, #12]	; (80003ec <lcd_send_data+0xd8>)
 80003e0:	f009 fcb4 	bl	8009d4c <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 80003e4:	bf00      	nop
 80003e6:	3710      	adds	r7, #16
 80003e8:	46bd      	mov	sp, r7
 80003ea:	bd80      	pop	{r7, pc}
 80003ec:	20000a5c 	.word	0x20000a5c
 80003f0:	20000a30 	.word	0x20000a30

080003f4 <lcd_send_string>:

void lcd_send_string (char *str) {
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
	while (*str) {
 80003fc:	e006      	b.n	800040c <lcd_send_string+0x18>
		lcd_send_data (*str++);
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	1c5a      	adds	r2, r3, #1
 8000402:	607a      	str	r2, [r7, #4]
 8000404:	781b      	ldrb	r3, [r3, #0]
 8000406:	4618      	mov	r0, r3
 8000408:	f7ff ff84 	bl	8000314 <lcd_send_data>
	while (*str) {
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	781b      	ldrb	r3, [r3, #0]
 8000410:	2b00      	cmp	r3, #0
 8000412:	d1f4      	bne.n	80003fe <lcd_send_string+0xa>
	}
}
 8000414:	bf00      	nop
 8000416:	bf00      	nop
 8000418:	3708      	adds	r7, #8
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}
	...

08000420 <lcd_send_char>:

void lcd_send_char(char ch) {
 8000420:	b580      	push	{r7, lr}
 8000422:	b086      	sub	sp, #24
 8000424:	af02      	add	r7, sp, #8
 8000426:	4603      	mov	r3, r0
 8000428:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 800042a:	79fb      	ldrb	r3, [r7, #7]
 800042c:	f023 030f 	bic.w	r3, r3, #15
 8000430:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8000432:	79fb      	ldrb	r3, [r7, #7]
 8000434:	011b      	lsls	r3, r3, #4
 8000436:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 8000438:	7b7b      	ldrb	r3, [r7, #13]
 800043a:	f043 030d 	orr.w	r3, r3, #13
 800043e:	b2db      	uxtb	r3, r3
 8000440:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8000442:	7b7b      	ldrb	r3, [r7, #13]
 8000444:	f043 0309 	orr.w	r3, r3, #9
 8000448:	b2db      	uxtb	r3, r3
 800044a:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 800044c:	7b3b      	ldrb	r3, [r7, #12]
 800044e:	f043 030d 	orr.w	r3, r3, #13
 8000452:	b2db      	uxtb	r3, r3
 8000454:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 8000456:	7b3b      	ldrb	r3, [r7, #12]
 8000458:	f043 0309 	orr.w	r3, r3, #9
 800045c:	b2db      	uxtb	r3, r3
 800045e:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8000460:	bf00      	nop
 8000462:	4825      	ldr	r0, [pc, #148]	; (80004f8 <lcd_send_char+0xd8>)
 8000464:	f00a f8df 	bl	800a626 <HAL_I2C_GetError>
 8000468:	4603      	mov	r3, r0
 800046a:	2b04      	cmp	r3, #4
 800046c:	d0f9      	beq.n	8000462 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 800046e:	bf00      	nop
 8000470:	4821      	ldr	r0, [pc, #132]	; (80004f8 <lcd_send_char+0xd8>)
 8000472:	f00a f8cb 	bl	800a60c <HAL_I2C_GetState>
 8000476:	4603      	mov	r3, r0
 8000478:	2b20      	cmp	r3, #32
 800047a:	d1f9      	bne.n	8000470 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 800047c:	4b1f      	ldr	r3, [pc, #124]	; (80004fc <lcd_send_char+0xdc>)
 800047e:	781b      	ldrb	r3, [r3, #0]
 8000480:	2b00      	cmp	r3, #0
 8000482:	d116      	bne.n	80004b2 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8000484:	2300      	movs	r3, #0
 8000486:	73fb      	strb	r3, [r7, #15]
 8000488:	e00f      	b.n	80004aa <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 800048a:	7bfb      	ldrb	r3, [r7, #15]
 800048c:	3310      	adds	r3, #16
 800048e:	443b      	add	r3, r7
 8000490:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000494:	7bfb      	ldrb	r3, [r7, #15]
 8000496:	f022 0208 	bic.w	r2, r2, #8
 800049a:	b2d2      	uxtb	r2, r2
 800049c:	3310      	adds	r3, #16
 800049e:	443b      	add	r3, r7
 80004a0:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80004a4:	7bfb      	ldrb	r3, [r7, #15]
 80004a6:	3301      	adds	r3, #1
 80004a8:	73fb      	strb	r3, [r7, #15]
 80004aa:	7bfb      	ldrb	r3, [r7, #15]
 80004ac:	2b03      	cmp	r3, #3
 80004ae:	d9ec      	bls.n	800048a <lcd_send_char+0x6a>
 80004b0:	e015      	b.n	80004de <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 80004b2:	2300      	movs	r3, #0
 80004b4:	73bb      	strb	r3, [r7, #14]
 80004b6:	e00f      	b.n	80004d8 <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 80004b8:	7bbb      	ldrb	r3, [r7, #14]
 80004ba:	3310      	adds	r3, #16
 80004bc:	443b      	add	r3, r7
 80004be:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80004c2:	7bbb      	ldrb	r3, [r7, #14]
 80004c4:	f042 0208 	orr.w	r2, r2, #8
 80004c8:	b2d2      	uxtb	r2, r2
 80004ca:	3310      	adds	r3, #16
 80004cc:	443b      	add	r3, r7
 80004ce:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80004d2:	7bbb      	ldrb	r3, [r7, #14]
 80004d4:	3301      	adds	r3, #1
 80004d6:	73bb      	strb	r3, [r7, #14]
 80004d8:	7bbb      	ldrb	r3, [r7, #14]
 80004da:	2b03      	cmp	r3, #3
 80004dc:	d9ec      	bls.n	80004b8 <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 80004de:	f107 0208 	add.w	r2, r7, #8
 80004e2:	2364      	movs	r3, #100	; 0x64
 80004e4:	9300      	str	r3, [sp, #0]
 80004e6:	2304      	movs	r3, #4
 80004e8:	214e      	movs	r1, #78	; 0x4e
 80004ea:	4803      	ldr	r0, [pc, #12]	; (80004f8 <lcd_send_char+0xd8>)
 80004ec:	f009 fc2e 	bl	8009d4c <HAL_I2C_Master_Transmit>
}
 80004f0:	bf00      	nop
 80004f2:	3710      	adds	r7, #16
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	20000a5c 	.word	0x20000a5c
 80004fc:	20000a30 	.word	0x20000a30

08000500 <lcd_init>:

void lcd_init (void) {
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8000504:	2002      	movs	r0, #2
 8000506:	f7ff fe95 	bl	8000234 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 800050a:	2028      	movs	r0, #40	; 0x28
 800050c:	f7ff fe92 	bl	8000234 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8000510:	200c      	movs	r0, #12
 8000512:	f7ff fe8f 	bl	8000234 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 8000516:	2080      	movs	r0, #128	; 0x80
 8000518:	f7ff fe8c 	bl	8000234 <lcd_send_cmd>
	lcd_backlight(1);
 800051c:	2001      	movs	r0, #1
 800051e:	f000 f86d 	bl	80005fc <lcd_backlight>
}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}

08000526 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 8000526:	b580      	push	{r7, lr}
 8000528:	b082      	sub	sp, #8
 800052a:	af00      	add	r7, sp, #0
 800052c:	4603      	mov	r3, r0
 800052e:	460a      	mov	r2, r1
 8000530:	71fb      	strb	r3, [r7, #7]
 8000532:	4613      	mov	r3, r2
 8000534:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	2b01      	cmp	r3, #1
 800053a:	d106      	bne.n	800054a <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 800053c:	79bb      	ldrb	r3, [r7, #6]
 800053e:	337f      	adds	r3, #127	; 0x7f
 8000540:	b2db      	uxtb	r3, r3
 8000542:	4618      	mov	r0, r3
 8000544:	f7ff fe76 	bl	8000234 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 8000548:	e008      	b.n	800055c <lcd_gotoxy+0x36>
	} else if(row == 2) {
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	2b02      	cmp	r3, #2
 800054e:	d105      	bne.n	800055c <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8000550:	79bb      	ldrb	r3, [r7, #6]
 8000552:	3b41      	subs	r3, #65	; 0x41
 8000554:	b2db      	uxtb	r3, r3
 8000556:	4618      	mov	r0, r3
 8000558:	f7ff fe6c 	bl	8000234 <lcd_send_cmd>
}
 800055c:	bf00      	nop
 800055e:	3708      	adds	r7, #8
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}

08000564 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8000564:	b580      	push	{r7, lr}
 8000566:	b082      	sub	sp, #8
 8000568:	af00      	add	r7, sp, #0
 800056a:	4603      	mov	r3, r0
 800056c:	603a      	str	r2, [r7, #0]
 800056e:	71fb      	strb	r3, [r7, #7]
 8000570:	460b      	mov	r3, r1
 8000572:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8000574:	79ba      	ldrb	r2, [r7, #6]
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	4611      	mov	r1, r2
 800057a:	4618      	mov	r0, r3
 800057c:	f7ff ffd3 	bl	8000526 <lcd_gotoxy>
	lcd_send_string(str);
 8000580:	6838      	ldr	r0, [r7, #0]
 8000582:	f7ff ff37 	bl	80003f4 <lcd_send_string>
}
 8000586:	bf00      	nop
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}

0800058e <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 800058e:	b580      	push	{r7, lr}
 8000590:	b082      	sub	sp, #8
 8000592:	af00      	add	r7, sp, #0
 8000594:	4603      	mov	r3, r0
 8000596:	71fb      	strb	r3, [r7, #7]
 8000598:	460b      	mov	r3, r1
 800059a:	71bb      	strb	r3, [r7, #6]
 800059c:	4613      	mov	r3, r2
 800059e:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 80005a0:	79ba      	ldrb	r2, [r7, #6]
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	4611      	mov	r1, r2
 80005a6:	4618      	mov	r0, r3
 80005a8:	f7ff ffbd 	bl	8000526 <lcd_gotoxy>
    lcd_send_char(ch);
 80005ac:	797b      	ldrb	r3, [r7, #5]
 80005ae:	4618      	mov	r0, r3
 80005b0:	f7ff ff36 	bl	8000420 <lcd_send_char>
}
 80005b4:	bf00      	nop
 80005b6:	3708      	adds	r7, #8
 80005b8:	46bd      	mov	sp, r7
 80005ba:	bd80      	pop	{r7, pc}

080005bc <lcd_clear>:

void lcd_clear(void) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 80005c0:	2001      	movs	r0, #1
 80005c2:	f7ff fe37 	bl	8000234 <lcd_send_cmd>
    HAL_Delay(2);
 80005c6:	2002      	movs	r0, #2
 80005c8:	f008 fc34 	bl	8008e34 <HAL_Delay>
}
 80005cc:	bf00      	nop
 80005ce:	bd80      	pop	{r7, pc}

080005d0 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	4603      	mov	r3, r0
 80005d8:	460a      	mov	r2, r1
 80005da:	71fb      	strb	r3, [r7, #7]
 80005dc:	4613      	mov	r3, r2
 80005de:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 80005e0:	79ba      	ldrb	r2, [r7, #6]
 80005e2:	79fb      	ldrb	r3, [r7, #7]
 80005e4:	4611      	mov	r1, r2
 80005e6:	4618      	mov	r0, r3
 80005e8:	f7ff ff9d 	bl	8000526 <lcd_gotoxy>

    lcd_send_char(' ');
 80005ec:	2020      	movs	r0, #32
 80005ee:	f7ff ff17 	bl	8000420 <lcd_send_char>
}
 80005f2:	bf00      	nop
 80005f4:	3708      	adds	r7, #8
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
	...

080005fc <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	4603      	mov	r3, r0
 8000604:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 8000606:	4a05      	ldr	r2, [pc, #20]	; (800061c <lcd_backlight+0x20>)
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 800060c:	2000      	movs	r0, #0
 800060e:	f7ff fe11 	bl	8000234 <lcd_send_cmd>
}
 8000612:	bf00      	nop
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	20000a30 	.word	0x20000a30

08000620 <lcd_cursor>:

void lcd_cursor(int state) {
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2b01      	cmp	r3, #1
 800062c:	d106      	bne.n	800063c <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 800062e:	200e      	movs	r0, #14
 8000630:	f7ff fe00 	bl	8000234 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8000634:	200f      	movs	r0, #15
 8000636:	f7ff fdfd 	bl	8000234 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 800063a:	e002      	b.n	8000642 <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 800063c:	200c      	movs	r0, #12
 800063e:	f7ff fdf9 	bl	8000234 <lcd_send_cmd>
}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	bd80      	pop	{r7, pc}
	...

0800064c <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 800064c:	b480      	push	{r7}
 800064e:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000650:	f3bf 8f4f 	dsb	sy
}
 8000654:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000656:	4b06      	ldr	r3, [pc, #24]	; (8000670 <__NVIC_SystemReset+0x24>)
 8000658:	68db      	ldr	r3, [r3, #12]
 800065a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800065e:	4904      	ldr	r1, [pc, #16]	; (8000670 <__NVIC_SystemReset+0x24>)
 8000660:	4b04      	ldr	r3, [pc, #16]	; (8000674 <__NVIC_SystemReset+0x28>)
 8000662:	4313      	orrs	r3, r2
 8000664:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000666:	f3bf 8f4f 	dsb	sy
}
 800066a:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 800066c:	bf00      	nop
 800066e:	e7fd      	b.n	800066c <__NVIC_SystemReset+0x20>
 8000670:	e000ed00 	.word	0xe000ed00
 8000674:	05fa0004 	.word	0x05fa0004

08000678 <copyText>:
char *secilenDilText;
char *menudenCikisText;
char *enteraBasinizText;
char *hataKoduText;

char* copyText(const char* text) {
 8000678:	b580      	push	{r7, lr}
 800067a:	b084      	sub	sp, #16
 800067c:	af00      	add	r7, sp, #0
 800067e:	6078      	str	r0, [r7, #4]
    char* result = (char*)malloc(strlen(text) + 1);
 8000680:	6878      	ldr	r0, [r7, #4]
 8000682:	f7ff fdcf 	bl	8000224 <strlen>
 8000686:	4603      	mov	r3, r0
 8000688:	3301      	adds	r3, #1
 800068a:	4618      	mov	r0, r3
 800068c:	f00c f99a 	bl	800c9c4 <malloc>
 8000690:	4603      	mov	r3, r0
 8000692:	60fb      	str	r3, [r7, #12]
    if (result != NULL) {
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	2b00      	cmp	r3, #0
 8000698:	d003      	beq.n	80006a2 <copyText+0x2a>
        strcpy(result, text);
 800069a:	6879      	ldr	r1, [r7, #4]
 800069c:	68f8      	ldr	r0, [r7, #12]
 800069e:	f00c facb 	bl	800cc38 <strcpy>
    }
    return result;
 80006a2:	68fb      	ldr	r3, [r7, #12]
}
 80006a4:	4618      	mov	r0, r3
 80006a6:	3710      	adds	r7, #16
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <printTemplate>:
        }
    }
    return result;
}

void printTemplate(int type, int page) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
 80006b4:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 80006b6:	20c8      	movs	r0, #200	; 0xc8
 80006b8:	f008 fbbc 	bl	8008e34 <HAL_Delay>
	lcd_clear();
 80006bc:	f7ff ff7e 	bl	80005bc <lcd_clear>
	if(type == 1 && page == 0) {
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2b01      	cmp	r3, #1
 80006c4:	d143      	bne.n	800074e <printTemplate+0xa2>
 80006c6:	683b      	ldr	r3, [r7, #0]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d140      	bne.n	800074e <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 80006cc:	4a9d      	ldr	r2, [pc, #628]	; (8000944 <printTemplate+0x298>)
 80006ce:	2101      	movs	r1, #1
 80006d0:	2001      	movs	r0, #1
 80006d2:	f7ff ff47 	bl	8000564 <lcd_print>
		lcd_print(2, 3, "0");
 80006d6:	4a9c      	ldr	r2, [pc, #624]	; (8000948 <printTemplate+0x29c>)
 80006d8:	2103      	movs	r1, #3
 80006da:	2002      	movs	r0, #2
 80006dc:	f7ff ff42 	bl	8000564 <lcd_print>
		lcd_print(2, 4, "1");
 80006e0:	4a9a      	ldr	r2, [pc, #616]	; (800094c <printTemplate+0x2a0>)
 80006e2:	2104      	movs	r1, #4
 80006e4:	2002      	movs	r0, #2
 80006e6:	f7ff ff3d 	bl	8000564 <lcd_print>
		lcd_print(2, 5, "2");
 80006ea:	4a99      	ldr	r2, [pc, #612]	; (8000950 <printTemplate+0x2a4>)
 80006ec:	2105      	movs	r1, #5
 80006ee:	2002      	movs	r0, #2
 80006f0:	f7ff ff38 	bl	8000564 <lcd_print>
		lcd_print(2, 6, "3");
 80006f4:	4a97      	ldr	r2, [pc, #604]	; (8000954 <printTemplate+0x2a8>)
 80006f6:	2106      	movs	r1, #6
 80006f8:	2002      	movs	r0, #2
 80006fa:	f7ff ff33 	bl	8000564 <lcd_print>
		lcd_print(2, 7, "4");
 80006fe:	4a96      	ldr	r2, [pc, #600]	; (8000958 <printTemplate+0x2ac>)
 8000700:	2107      	movs	r1, #7
 8000702:	2002      	movs	r0, #2
 8000704:	f7ff ff2e 	bl	8000564 <lcd_print>
		lcd_print(2, 10, "5");
 8000708:	4a94      	ldr	r2, [pc, #592]	; (800095c <printTemplate+0x2b0>)
 800070a:	210a      	movs	r1, #10
 800070c:	2002      	movs	r0, #2
 800070e:	f7ff ff29 	bl	8000564 <lcd_print>
		lcd_print(2, 11, "6");
 8000712:	4a93      	ldr	r2, [pc, #588]	; (8000960 <printTemplate+0x2b4>)
 8000714:	210b      	movs	r1, #11
 8000716:	2002      	movs	r0, #2
 8000718:	f7ff ff24 	bl	8000564 <lcd_print>
		lcd_print(2, 12, "7");
 800071c:	4a91      	ldr	r2, [pc, #580]	; (8000964 <printTemplate+0x2b8>)
 800071e:	210c      	movs	r1, #12
 8000720:	2002      	movs	r0, #2
 8000722:	f7ff ff1f 	bl	8000564 <lcd_print>
		lcd_print(2, 13, "8");
 8000726:	4a90      	ldr	r2, [pc, #576]	; (8000968 <printTemplate+0x2bc>)
 8000728:	210d      	movs	r1, #13
 800072a:	2002      	movs	r0, #2
 800072c:	f7ff ff1a 	bl	8000564 <lcd_print>
		lcd_print(2, 14, "9");
 8000730:	4a8e      	ldr	r2, [pc, #568]	; (800096c <printTemplate+0x2c0>)
 8000732:	210e      	movs	r1, #14
 8000734:	2002      	movs	r0, #2
 8000736:	f7ff ff15 	bl	8000564 <lcd_print>
		lcd_print(1, 5, machineID);
 800073a:	4a8d      	ldr	r2, [pc, #564]	; (8000970 <printTemplate+0x2c4>)
 800073c:	2105      	movs	r1, #5
 800073e:	2001      	movs	r0, #1
 8000740:	f7ff ff10 	bl	8000564 <lcd_print>
		lcd_gotoxy(2, 3);
 8000744:	2103      	movs	r1, #3
 8000746:	2002      	movs	r0, #2
 8000748:	f7ff feed 	bl	8000526 <lcd_gotoxy>
			lcd_print(1, 1, "PASS: ");
			lcd_print(1, 7, wifiPass);
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 800074c:	e0f5      	b.n	800093a <printTemplate+0x28e>
	} else if(type == 2) {
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	2b02      	cmp	r3, #2
 8000752:	d178      	bne.n	8000846 <printTemplate+0x19a>
		if(page == 1) {
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	2b01      	cmp	r3, #1
 8000758:	d114      	bne.n	8000784 <printTemplate+0xd8>
			lcd_clear();
 800075a:	f7ff ff2f 	bl	80005bc <lcd_clear>
			HAL_Delay(100);
 800075e:	2064      	movs	r0, #100	; 0x64
 8000760:	f008 fb68 	bl	8008e34 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000764:	4a83      	ldr	r2, [pc, #524]	; (8000974 <printTemplate+0x2c8>)
 8000766:	2101      	movs	r1, #1
 8000768:	2001      	movs	r0, #1
 800076a:	f7ff fefb 	bl	8000564 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 800076e:	4a82      	ldr	r2, [pc, #520]	; (8000978 <printTemplate+0x2cc>)
 8000770:	2107      	movs	r1, #7
 8000772:	2001      	movs	r0, #1
 8000774:	f7ff fef6 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000778:	4a80      	ldr	r2, [pc, #512]	; (800097c <printTemplate+0x2d0>)
 800077a:	2101      	movs	r1, #1
 800077c:	2002      	movs	r0, #2
 800077e:	f7ff fef1 	bl	8000564 <lcd_print>
}
 8000782:	e0da      	b.n	800093a <printTemplate+0x28e>
		} else if(page == 2) {
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	2b02      	cmp	r3, #2
 8000788:	d114      	bne.n	80007b4 <printTemplate+0x108>
			lcd_clear();
 800078a:	f7ff ff17 	bl	80005bc <lcd_clear>
			HAL_Delay(100);
 800078e:	2064      	movs	r0, #100	; 0x64
 8000790:	f008 fb50 	bl	8008e34 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000794:	4a77      	ldr	r2, [pc, #476]	; (8000974 <printTemplate+0x2c8>)
 8000796:	2101      	movs	r1, #1
 8000798:	2001      	movs	r0, #1
 800079a:	f7ff fee3 	bl	8000564 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 800079e:	4a76      	ldr	r2, [pc, #472]	; (8000978 <printTemplate+0x2cc>)
 80007a0:	2107      	movs	r1, #7
 80007a2:	2001      	movs	r0, #1
 80007a4:	f7ff fede 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 80007a8:	4a75      	ldr	r2, [pc, #468]	; (8000980 <printTemplate+0x2d4>)
 80007aa:	2101      	movs	r1, #1
 80007ac:	2002      	movs	r0, #2
 80007ae:	f7ff fed9 	bl	8000564 <lcd_print>
}
 80007b2:	e0c2      	b.n	800093a <printTemplate+0x28e>
		} else if(page == 3) {
 80007b4:	683b      	ldr	r3, [r7, #0]
 80007b6:	2b03      	cmp	r3, #3
 80007b8:	d114      	bne.n	80007e4 <printTemplate+0x138>
			lcd_clear();
 80007ba:	f7ff feff 	bl	80005bc <lcd_clear>
			HAL_Delay(100);
 80007be:	2064      	movs	r0, #100	; 0x64
 80007c0:	f008 fb38 	bl	8008e34 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 80007c4:	4a6b      	ldr	r2, [pc, #428]	; (8000974 <printTemplate+0x2c8>)
 80007c6:	2101      	movs	r1, #1
 80007c8:	2001      	movs	r0, #1
 80007ca:	f7ff fecb 	bl	8000564 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80007ce:	4a6a      	ldr	r2, [pc, #424]	; (8000978 <printTemplate+0x2cc>)
 80007d0:	2107      	movs	r1, #7
 80007d2:	2001      	movs	r0, #1
 80007d4:	f7ff fec6 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 80007d8:	4a6a      	ldr	r2, [pc, #424]	; (8000984 <printTemplate+0x2d8>)
 80007da:	2101      	movs	r1, #1
 80007dc:	2002      	movs	r0, #2
 80007de:	f7ff fec1 	bl	8000564 <lcd_print>
}
 80007e2:	e0aa      	b.n	800093a <printTemplate+0x28e>
		} else if(page == 4) {
 80007e4:	683b      	ldr	r3, [r7, #0]
 80007e6:	2b04      	cmp	r3, #4
 80007e8:	d114      	bne.n	8000814 <printTemplate+0x168>
			lcd_clear();
 80007ea:	f7ff fee7 	bl	80005bc <lcd_clear>
			HAL_Delay(100);
 80007ee:	2064      	movs	r0, #100	; 0x64
 80007f0:	f008 fb20 	bl	8008e34 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 80007f4:	4a5f      	ldr	r2, [pc, #380]	; (8000974 <printTemplate+0x2c8>)
 80007f6:	2101      	movs	r1, #1
 80007f8:	2001      	movs	r0, #1
 80007fa:	f7ff feb3 	bl	8000564 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 80007fe:	4a5e      	ldr	r2, [pc, #376]	; (8000978 <printTemplate+0x2cc>)
 8000800:	2107      	movs	r1, #7
 8000802:	2001      	movs	r0, #1
 8000804:	f7ff feae 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000808:	4a5f      	ldr	r2, [pc, #380]	; (8000988 <printTemplate+0x2dc>)
 800080a:	2101      	movs	r1, #1
 800080c:	2002      	movs	r0, #2
 800080e:	f7ff fea9 	bl	8000564 <lcd_print>
}
 8000812:	e092      	b.n	800093a <printTemplate+0x28e>
		} else if(page == 5) {
 8000814:	683b      	ldr	r3, [r7, #0]
 8000816:	2b05      	cmp	r3, #5
 8000818:	f040 808f 	bne.w	800093a <printTemplate+0x28e>
			lcd_clear();
 800081c:	f7ff fece 	bl	80005bc <lcd_clear>
			HAL_Delay(100);
 8000820:	2064      	movs	r0, #100	; 0x64
 8000822:	f008 fb07 	bl	8008e34 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000826:	4a53      	ldr	r2, [pc, #332]	; (8000974 <printTemplate+0x2c8>)
 8000828:	2101      	movs	r1, #1
 800082a:	2001      	movs	r0, #1
 800082c:	f7ff fe9a 	bl	8000564 <lcd_print>
			lcd_print(1, 7, wifiSSID);
 8000830:	4a51      	ldr	r2, [pc, #324]	; (8000978 <printTemplate+0x2cc>)
 8000832:	2107      	movs	r1, #7
 8000834:	2001      	movs	r0, #1
 8000836:	f7ff fe95 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 800083a:	4a54      	ldr	r2, [pc, #336]	; (800098c <printTemplate+0x2e0>)
 800083c:	2101      	movs	r1, #1
 800083e:	2002      	movs	r0, #2
 8000840:	f7ff fe90 	bl	8000564 <lcd_print>
}
 8000844:	e079      	b.n	800093a <printTemplate+0x28e>
	} else if(type == 3) {
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2b03      	cmp	r3, #3
 800084a:	d176      	bne.n	800093a <printTemplate+0x28e>
		if(page == 1) {
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	2b01      	cmp	r3, #1
 8000850:	d114      	bne.n	800087c <printTemplate+0x1d0>
			lcd_clear();
 8000852:	f7ff feb3 	bl	80005bc <lcd_clear>
			HAL_Delay(100);
 8000856:	2064      	movs	r0, #100	; 0x64
 8000858:	f008 faec 	bl	8008e34 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 800085c:	4a4c      	ldr	r2, [pc, #304]	; (8000990 <printTemplate+0x2e4>)
 800085e:	2101      	movs	r1, #1
 8000860:	2001      	movs	r0, #1
 8000862:	f7ff fe7f 	bl	8000564 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000866:	4a4b      	ldr	r2, [pc, #300]	; (8000994 <printTemplate+0x2e8>)
 8000868:	2107      	movs	r1, #7
 800086a:	2001      	movs	r0, #1
 800086c:	f7ff fe7a 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000870:	4a42      	ldr	r2, [pc, #264]	; (800097c <printTemplate+0x2d0>)
 8000872:	2101      	movs	r1, #1
 8000874:	2002      	movs	r0, #2
 8000876:	f7ff fe75 	bl	8000564 <lcd_print>
}
 800087a:	e05e      	b.n	800093a <printTemplate+0x28e>
		} else if(page == 2) {
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	2b02      	cmp	r3, #2
 8000880:	d114      	bne.n	80008ac <printTemplate+0x200>
			lcd_clear();
 8000882:	f7ff fe9b 	bl	80005bc <lcd_clear>
			HAL_Delay(100);
 8000886:	2064      	movs	r0, #100	; 0x64
 8000888:	f008 fad4 	bl	8008e34 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 800088c:	4a40      	ldr	r2, [pc, #256]	; (8000990 <printTemplate+0x2e4>)
 800088e:	2101      	movs	r1, #1
 8000890:	2001      	movs	r0, #1
 8000892:	f7ff fe67 	bl	8000564 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000896:	4a3f      	ldr	r2, [pc, #252]	; (8000994 <printTemplate+0x2e8>)
 8000898:	2107      	movs	r1, #7
 800089a:	2001      	movs	r0, #1
 800089c:	f7ff fe62 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 80008a0:	4a37      	ldr	r2, [pc, #220]	; (8000980 <printTemplate+0x2d4>)
 80008a2:	2101      	movs	r1, #1
 80008a4:	2002      	movs	r0, #2
 80008a6:	f7ff fe5d 	bl	8000564 <lcd_print>
}
 80008aa:	e046      	b.n	800093a <printTemplate+0x28e>
		} else if(page == 3) {
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	2b03      	cmp	r3, #3
 80008b0:	d114      	bne.n	80008dc <printTemplate+0x230>
			lcd_clear();
 80008b2:	f7ff fe83 	bl	80005bc <lcd_clear>
			HAL_Delay(100);
 80008b6:	2064      	movs	r0, #100	; 0x64
 80008b8:	f008 fabc 	bl	8008e34 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80008bc:	4a34      	ldr	r2, [pc, #208]	; (8000990 <printTemplate+0x2e4>)
 80008be:	2101      	movs	r1, #1
 80008c0:	2001      	movs	r0, #1
 80008c2:	f7ff fe4f 	bl	8000564 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80008c6:	4a33      	ldr	r2, [pc, #204]	; (8000994 <printTemplate+0x2e8>)
 80008c8:	2107      	movs	r1, #7
 80008ca:	2001      	movs	r0, #1
 80008cc:	f7ff fe4a 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 80008d0:	4a2c      	ldr	r2, [pc, #176]	; (8000984 <printTemplate+0x2d8>)
 80008d2:	2101      	movs	r1, #1
 80008d4:	2002      	movs	r0, #2
 80008d6:	f7ff fe45 	bl	8000564 <lcd_print>
}
 80008da:	e02e      	b.n	800093a <printTemplate+0x28e>
		} else if(page == 4) {
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	2b04      	cmp	r3, #4
 80008e0:	d114      	bne.n	800090c <printTemplate+0x260>
			lcd_clear();
 80008e2:	f7ff fe6b 	bl	80005bc <lcd_clear>
			HAL_Delay(100);
 80008e6:	2064      	movs	r0, #100	; 0x64
 80008e8:	f008 faa4 	bl	8008e34 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80008ec:	4a28      	ldr	r2, [pc, #160]	; (8000990 <printTemplate+0x2e4>)
 80008ee:	2101      	movs	r1, #1
 80008f0:	2001      	movs	r0, #1
 80008f2:	f7ff fe37 	bl	8000564 <lcd_print>
			lcd_print(1, 7, wifiPass);
 80008f6:	4a27      	ldr	r2, [pc, #156]	; (8000994 <printTemplate+0x2e8>)
 80008f8:	2107      	movs	r1, #7
 80008fa:	2001      	movs	r0, #1
 80008fc:	f7ff fe32 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000900:	4a21      	ldr	r2, [pc, #132]	; (8000988 <printTemplate+0x2dc>)
 8000902:	2101      	movs	r1, #1
 8000904:	2002      	movs	r0, #2
 8000906:	f7ff fe2d 	bl	8000564 <lcd_print>
}
 800090a:	e016      	b.n	800093a <printTemplate+0x28e>
		} else if(page == 5) {
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	2b05      	cmp	r3, #5
 8000910:	d113      	bne.n	800093a <printTemplate+0x28e>
			lcd_clear();
 8000912:	f7ff fe53 	bl	80005bc <lcd_clear>
			HAL_Delay(100);
 8000916:	2064      	movs	r0, #100	; 0x64
 8000918:	f008 fa8c 	bl	8008e34 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 800091c:	4a1c      	ldr	r2, [pc, #112]	; (8000990 <printTemplate+0x2e4>)
 800091e:	2101      	movs	r1, #1
 8000920:	2001      	movs	r0, #1
 8000922:	f7ff fe1f 	bl	8000564 <lcd_print>
			lcd_print(1, 7, wifiPass);
 8000926:	4a1b      	ldr	r2, [pc, #108]	; (8000994 <printTemplate+0x2e8>)
 8000928:	2107      	movs	r1, #7
 800092a:	2001      	movs	r0, #1
 800092c:	f7ff fe1a 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000930:	4a16      	ldr	r2, [pc, #88]	; (800098c <printTemplate+0x2e0>)
 8000932:	2101      	movs	r1, #1
 8000934:	2002      	movs	r0, #2
 8000936:	f7ff fe15 	bl	8000564 <lcd_print>
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	0800cc60 	.word	0x0800cc60
 8000948:	0800cc68 	.word	0x0800cc68
 800094c:	0800cc6c 	.word	0x0800cc6c
 8000950:	0800cc70 	.word	0x0800cc70
 8000954:	0800cc74 	.word	0x0800cc74
 8000958:	0800cc78 	.word	0x0800cc78
 800095c:	0800cc7c 	.word	0x0800cc7c
 8000960:	0800cc80 	.word	0x0800cc80
 8000964:	0800cc84 	.word	0x0800cc84
 8000968:	0800cc88 	.word	0x0800cc88
 800096c:	0800cc8c 	.word	0x0800cc8c
 8000970:	20000bd8 	.word	0x20000bd8
 8000974:	0800cc90 	.word	0x0800cc90
 8000978:	20000be4 	.word	0x20000be4
 800097c:	0800cc98 	.word	0x0800cc98
 8000980:	0800ccac 	.word	0x0800ccac
 8000984:	0800ccc0 	.word	0x0800ccc0
 8000988:	0800ccd4 	.word	0x0800ccd4
 800098c:	0800cce8 	.word	0x0800cce8
 8000990:	0800ccfc 	.word	0x0800ccfc
 8000994:	20000bf8 	.word	0x20000bf8

08000998 <getCharFromCursorPosition>:

char getCharFromCursorPosition(int cursorPosition) {
 8000998:	b480      	push	{r7}
 800099a:	b083      	sub	sp, #12
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
    return charactersArray[cursorPosition];
 80009a0:	4a04      	ldr	r2, [pc, #16]	; (80009b4 <getCharFromCursorPosition+0x1c>)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4413      	add	r3, r2
 80009a6:	781b      	ldrb	r3, [r3, #0]
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bc80      	pop	{r7}
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	20000960 	.word	0x20000960

080009b8 <getPosFromChar>:

uint8_t getPosFromChar(char cursorChar) {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	4603      	mov	r3, r0
 80009c0:	71fb      	strb	r3, [r7, #7]
	for(int i=0; i<strlen(charactersArray); i++) {
 80009c2:	2300      	movs	r3, #0
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	e00c      	b.n	80009e2 <getPosFromChar+0x2a>
		if(cursorChar == charactersArray[i]) {
 80009c8:	4a0c      	ldr	r2, [pc, #48]	; (80009fc <getPosFromChar+0x44>)
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	4413      	add	r3, r2
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	79fa      	ldrb	r2, [r7, #7]
 80009d2:	429a      	cmp	r2, r3
 80009d4:	d102      	bne.n	80009dc <getPosFromChar+0x24>
			return i;
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	e00a      	b.n	80009f2 <getPosFromChar+0x3a>
	for(int i=0; i<strlen(charactersArray); i++) {
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	3301      	adds	r3, #1
 80009e0:	60fb      	str	r3, [r7, #12]
 80009e2:	4806      	ldr	r0, [pc, #24]	; (80009fc <getPosFromChar+0x44>)
 80009e4:	f7ff fc1e 	bl	8000224 <strlen>
 80009e8:	4602      	mov	r2, r0
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d8eb      	bhi.n	80009c8 <getPosFromChar+0x10>
		}
	}
	return -1;
 80009f0:	23ff      	movs	r3, #255	; 0xff
}
 80009f2:	4618      	mov	r0, r3
 80009f4:	3710      	adds	r7, #16
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000960 	.word	0x20000960

08000a00 <convertArrays>:

void convertArrays(int state) {
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08a      	sub	sp, #40	; 0x28
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
	int startVal;

	if(state == 0) {
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d130      	bne.n	8000a70 <convertArrays+0x70>
		startVal = ssidStartPos;
 8000a0e:	4b32      	ldr	r3, [pc, #200]	; (8000ad8 <convertArrays+0xd8>)
 8000a10:	781b      	ldrb	r3, [r3, #0]
 8000a12:	60fb      	str	r3, [r7, #12]
		int uzunluk = 0;
 8000a14:	2300      	movs	r3, #0
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24

		for(int i=0; i<20; i++) {
 8000a18:	2300      	movs	r3, #0
 8000a1a:	623b      	str	r3, [r7, #32]
 8000a1c:	e00c      	b.n	8000a38 <convertArrays+0x38>
			if(eepromData[startVal + i] != '\0') {
 8000a1e:	68fa      	ldr	r2, [r7, #12]
 8000a20:	6a3b      	ldr	r3, [r7, #32]
 8000a22:	4413      	add	r3, r2
 8000a24:	4a2d      	ldr	r2, [pc, #180]	; (8000adc <convertArrays+0xdc>)
 8000a26:	5cd3      	ldrb	r3, [r2, r3]
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d002      	beq.n	8000a32 <convertArrays+0x32>
				uzunluk++;
 8000a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a2e:	3301      	adds	r3, #1
 8000a30:	627b      	str	r3, [r7, #36]	; 0x24
		for(int i=0; i<20; i++) {
 8000a32:	6a3b      	ldr	r3, [r7, #32]
 8000a34:	3301      	adds	r3, #1
 8000a36:	623b      	str	r3, [r7, #32]
 8000a38:	6a3b      	ldr	r3, [r7, #32]
 8000a3a:	2b13      	cmp	r3, #19
 8000a3c:	ddef      	ble.n	8000a1e <convertArrays+0x1e>
			}
		}

		for(int k=0; k<uzunluk; k++) {
 8000a3e:	2300      	movs	r3, #0
 8000a40:	61fb      	str	r3, [r7, #28]
 8000a42:	e010      	b.n	8000a66 <convertArrays+0x66>
			wifiSSID[k] = getCharFromCursorPosition(eepromData[k]);
 8000a44:	4a25      	ldr	r2, [pc, #148]	; (8000adc <convertArrays+0xdc>)
 8000a46:	69fb      	ldr	r3, [r7, #28]
 8000a48:	4413      	add	r3, r2
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff ffa3 	bl	8000998 <getCharFromCursorPosition>
 8000a52:	4603      	mov	r3, r0
 8000a54:	4619      	mov	r1, r3
 8000a56:	4a22      	ldr	r2, [pc, #136]	; (8000ae0 <convertArrays+0xe0>)
 8000a58:	69fb      	ldr	r3, [r7, #28]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	460a      	mov	r2, r1
 8000a5e:	701a      	strb	r2, [r3, #0]
		for(int k=0; k<uzunluk; k++) {
 8000a60:	69fb      	ldr	r3, [r7, #28]
 8000a62:	3301      	adds	r3, #1
 8000a64:	61fb      	str	r3, [r7, #28]
 8000a66:	69fa      	ldr	r2, [r7, #28]
 8000a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	dbea      	blt.n	8000a44 <convertArrays+0x44>

		for(int k=0; k<uzunluk; k++) {
			wifiPass[k] = getCharFromCursorPosition(eepromData[k]);
		}
	}
}
 8000a6e:	e02f      	b.n	8000ad0 <convertArrays+0xd0>
		startVal = passStartPos;
 8000a70:	4b1c      	ldr	r3, [pc, #112]	; (8000ae4 <convertArrays+0xe4>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	60fb      	str	r3, [r7, #12]
		int uzunluk = 0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61bb      	str	r3, [r7, #24]
		for(int i=0; i<20; i++) {
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	617b      	str	r3, [r7, #20]
 8000a7e:	e00c      	b.n	8000a9a <convertArrays+0x9a>
			if(eepromData[startVal + i] != '\0') {
 8000a80:	68fa      	ldr	r2, [r7, #12]
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	4413      	add	r3, r2
 8000a86:	4a15      	ldr	r2, [pc, #84]	; (8000adc <convertArrays+0xdc>)
 8000a88:	5cd3      	ldrb	r3, [r2, r3]
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d002      	beq.n	8000a94 <convertArrays+0x94>
				uzunluk++;
 8000a8e:	69bb      	ldr	r3, [r7, #24]
 8000a90:	3301      	adds	r3, #1
 8000a92:	61bb      	str	r3, [r7, #24]
		for(int i=0; i<20; i++) {
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	3301      	adds	r3, #1
 8000a98:	617b      	str	r3, [r7, #20]
 8000a9a:	697b      	ldr	r3, [r7, #20]
 8000a9c:	2b13      	cmp	r3, #19
 8000a9e:	ddef      	ble.n	8000a80 <convertArrays+0x80>
		for(int k=0; k<uzunluk; k++) {
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	613b      	str	r3, [r7, #16]
 8000aa4:	e010      	b.n	8000ac8 <convertArrays+0xc8>
			wifiPass[k] = getCharFromCursorPosition(eepromData[k]);
 8000aa6:	4a0d      	ldr	r2, [pc, #52]	; (8000adc <convertArrays+0xdc>)
 8000aa8:	693b      	ldr	r3, [r7, #16]
 8000aaa:	4413      	add	r3, r2
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	4618      	mov	r0, r3
 8000ab0:	f7ff ff72 	bl	8000998 <getCharFromCursorPosition>
 8000ab4:	4603      	mov	r3, r0
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4a0b      	ldr	r2, [pc, #44]	; (8000ae8 <convertArrays+0xe8>)
 8000aba:	693b      	ldr	r3, [r7, #16]
 8000abc:	4413      	add	r3, r2
 8000abe:	460a      	mov	r2, r1
 8000ac0:	701a      	strb	r2, [r3, #0]
		for(int k=0; k<uzunluk; k++) {
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	613b      	str	r3, [r7, #16]
 8000ac8:	693a      	ldr	r2, [r7, #16]
 8000aca:	69bb      	ldr	r3, [r7, #24]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	dbea      	blt.n	8000aa6 <convertArrays+0xa6>
}
 8000ad0:	bf00      	nop
 8000ad2:	3728      	adds	r7, #40	; 0x28
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	200009b2 	.word	0x200009b2
 8000adc:	20000b40 	.word	0x20000b40
 8000ae0:	20000be4 	.word	0x20000be4
 8000ae4:	200009b3 	.word	0x200009b3
 8000ae8:	20000bf8 	.word	0x20000bf8

08000aec <takeMachineID>:

void takeMachineID(int state) {
 8000aec:	b590      	push	{r4, r7, lr}
 8000aee:	b08b      	sub	sp, #44	; 0x2c
 8000af0:	af04      	add	r7, sp, #16
 8000af2:	6078      	str	r0, [r7, #4]
	mainSection:
	lcd_cursor(1);
 8000af4:	2001      	movs	r0, #1
 8000af6:	f7ff fd93 	bl	8000620 <lcd_cursor>

    int cursorPosition = 3;
 8000afa:	2303      	movs	r3, #3
 8000afc:	617b      	str	r3, [r7, #20]
    int machineIDLoc = 0;
 8000afe:	2300      	movs	r3, #0
 8000b00:	613b      	str	r3, [r7, #16]
    int writeLoc = 5;
 8000b02:	2305      	movs	r3, #5
 8000b04:	60fb      	str	r3, [r7, #12]

    if(state == 0) {
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d104      	bne.n	8000b16 <takeMachineID+0x2a>
    	memset(machineID, 0, sizeof(machineID));
 8000b0c:	220c      	movs	r2, #12
 8000b0e:	2100      	movs	r1, #0
 8000b10:	4899      	ldr	r0, [pc, #612]	; (8000d78 <takeMachineID+0x28c>)
 8000b12:	f00c f84d 	bl	800cbb0 <memset>
    }
    HAL_Delay(100);
 8000b16:	2064      	movs	r0, #100	; 0x64
 8000b18:	f008 f98c 	bl	8008e34 <HAL_Delay>

    printTemplate(1, 0);
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	2001      	movs	r0, #1
 8000b20:	f7ff fdc4 	bl	80006ac <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000b24:	2108      	movs	r1, #8
 8000b26:	4895      	ldr	r0, [pc, #596]	; (8000d7c <takeMachineID+0x290>)
 8000b28:	f008 ff54 	bl	80099d4 <HAL_GPIO_ReadPin>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b01      	cmp	r3, #1
 8000b30:	d138      	bne.n	8000ba4 <takeMachineID+0xb8>
        	lcd_cursor(0);
 8000b32:	2000      	movs	r0, #0
 8000b34:	f7ff fd74 	bl	8000620 <lcd_cursor>

        	if(machineID[11] == '\0') {
 8000b38:	4b8f      	ldr	r3, [pc, #572]	; (8000d78 <takeMachineID+0x28c>)
 8000b3a:	7adb      	ldrb	r3, [r3, #11]
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d110      	bne.n	8000b62 <takeMachineID+0x76>
        		lcd_clear();
 8000b40:	f7ff fd3c 	bl	80005bc <lcd_clear>
        		lcd_print(1, 1, " ID 12 KARAKTER ");
 8000b44:	4a8e      	ldr	r2, [pc, #568]	; (8000d80 <takeMachineID+0x294>)
 8000b46:	2101      	movs	r1, #1
 8000b48:	2001      	movs	r0, #1
 8000b4a:	f7ff fd0b 	bl	8000564 <lcd_print>
        		lcd_print(2, 1, " OLMAK ZORUNDA! ");
 8000b4e:	4a8d      	ldr	r2, [pc, #564]	; (8000d84 <takeMachineID+0x298>)
 8000b50:	2101      	movs	r1, #1
 8000b52:	2002      	movs	r0, #2
 8000b54:	f7ff fd06 	bl	8000564 <lcd_print>
        		HAL_Delay(1200);
 8000b58:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000b5c:	f008 f96a 	bl	8008e34 <HAL_Delay>
        		goto mainSection;
 8000b60:	e7c8      	b.n	8000af4 <takeMachineID+0x8>
        		goto mainSection;
        	} else {
        		eepromData[49] = 1;
        	}*/

        	memcpy(&eepromData[idStartPos], machineID, 12);
 8000b62:	4b89      	ldr	r3, [pc, #548]	; (8000d88 <takeMachineID+0x29c>)
 8000b64:	781b      	ldrb	r3, [r3, #0]
 8000b66:	461a      	mov	r2, r3
 8000b68:	4b88      	ldr	r3, [pc, #544]	; (8000d8c <takeMachineID+0x2a0>)
 8000b6a:	4413      	add	r3, r2
 8000b6c:	4a82      	ldr	r2, [pc, #520]	; (8000d78 <takeMachineID+0x28c>)
 8000b6e:	461c      	mov	r4, r3
 8000b70:	4613      	mov	r3, r2
 8000b72:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000b74:	6020      	str	r0, [r4, #0]
 8000b76:	6061      	str	r1, [r4, #4]
 8000b78:	60a2      	str	r2, [r4, #8]
        	HAL_Delay(200);
 8000b7a:	20c8      	movs	r0, #200	; 0xc8
 8000b7c:	f008 f95a 	bl	8008e34 <HAL_Delay>

        	HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8000b80:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000b84:	9302      	str	r3, [sp, #8]
 8000b86:	236e      	movs	r3, #110	; 0x6e
 8000b88:	9301      	str	r3, [sp, #4]
 8000b8a:	4b80      	ldr	r3, [pc, #512]	; (8000d8c <takeMachineID+0x2a0>)
 8000b8c:	9300      	str	r3, [sp, #0]
 8000b8e:	236e      	movs	r3, #110	; 0x6e
 8000b90:	2200      	movs	r2, #0
 8000b92:	21a0      	movs	r1, #160	; 0xa0
 8000b94:	487e      	ldr	r0, [pc, #504]	; (8000d90 <takeMachineID+0x2a4>)
 8000b96:	f009 f9d7 	bl	8009f48 <HAL_I2C_Mem_Write>
        	HAL_Delay(500);
 8000b9a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b9e:	f008 f949 	bl	8008e34 <HAL_Delay>

            break;
 8000ba2:	e0e5      	b.n	8000d70 <takeMachineID+0x284>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000ba4:	2101      	movs	r1, #1
 8000ba6:	4875      	ldr	r0, [pc, #468]	; (8000d7c <takeMachineID+0x290>)
 8000ba8:	f008 ff14 	bl	80099d4 <HAL_GPIO_ReadPin>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b01      	cmp	r3, #1
 8000bb0:	d112      	bne.n	8000bd8 <takeMachineID+0xec>
        	if(cursorPosition == 7) {
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	2b07      	cmp	r3, #7
 8000bb6:	d102      	bne.n	8000bbe <takeMachineID+0xd2>
        		cursorPosition = 10;
 8000bb8:	230a      	movs	r3, #10
 8000bba:	617b      	str	r3, [r7, #20]
 8000bbc:	e008      	b.n	8000bd0 <takeMachineID+0xe4>
        	} else if (cursorPosition == 14) {
 8000bbe:	697b      	ldr	r3, [r7, #20]
 8000bc0:	2b0e      	cmp	r3, #14
 8000bc2:	d102      	bne.n	8000bca <takeMachineID+0xde>
                cursorPosition = 3;
 8000bc4:	2303      	movs	r3, #3
 8000bc6:	617b      	str	r3, [r7, #20]
 8000bc8:	e002      	b.n	8000bd0 <takeMachineID+0xe4>
            } else {
            	cursorPosition++;
 8000bca:	697b      	ldr	r3, [r7, #20]
 8000bcc:	3301      	adds	r3, #1
 8000bce:	617b      	str	r3, [r7, #20]
            }

        	HAL_Delay(350);
 8000bd0:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000bd4:	f008 f92e 	bl	8008e34 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8000bd8:	2108      	movs	r1, #8
 8000bda:	486e      	ldr	r0, [pc, #440]	; (8000d94 <takeMachineID+0x2a8>)
 8000bdc:	f008 fefa 	bl	80099d4 <HAL_GPIO_ReadPin>
 8000be0:	4603      	mov	r3, r0
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d112      	bne.n	8000c0c <takeMachineID+0x120>
            if (cursorPosition == 3) {
 8000be6:	697b      	ldr	r3, [r7, #20]
 8000be8:	2b03      	cmp	r3, #3
 8000bea:	d102      	bne.n	8000bf2 <takeMachineID+0x106>
                cursorPosition = 14;
 8000bec:	230e      	movs	r3, #14
 8000bee:	617b      	str	r3, [r7, #20]
 8000bf0:	e008      	b.n	8000c04 <takeMachineID+0x118>
            } else if(cursorPosition == 10) {
 8000bf2:	697b      	ldr	r3, [r7, #20]
 8000bf4:	2b0a      	cmp	r3, #10
 8000bf6:	d102      	bne.n	8000bfe <takeMachineID+0x112>
            	cursorPosition = 7;
 8000bf8:	2307      	movs	r3, #7
 8000bfa:	617b      	str	r3, [r7, #20]
 8000bfc:	e002      	b.n	8000c04 <takeMachineID+0x118>
            } else {
            	cursorPosition--;
 8000bfe:	697b      	ldr	r3, [r7, #20]
 8000c00:	3b01      	subs	r3, #1
 8000c02:	617b      	str	r3, [r7, #20]
            }

            HAL_Delay(350);
 8000c04:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000c08:	f008 f914 	bl	8008e34 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8000c0c:	2102      	movs	r1, #2
 8000c0e:	485b      	ldr	r0, [pc, #364]	; (8000d7c <takeMachineID+0x290>)
 8000c10:	f008 fee0 	bl	80099d4 <HAL_GPIO_ReadPin>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d16c      	bne.n	8000cf4 <takeMachineID+0x208>
        	if(cursorPosition == 3) {
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	2b03      	cmp	r3, #3
 8000c1e:	d105      	bne.n	8000c2c <takeMachineID+0x140>
        		machineID[machineIDLoc] = '0';
 8000c20:	4a55      	ldr	r2, [pc, #340]	; (8000d78 <takeMachineID+0x28c>)
 8000c22:	693b      	ldr	r3, [r7, #16]
 8000c24:	4413      	add	r3, r2
 8000c26:	2230      	movs	r2, #48	; 0x30
 8000c28:	701a      	strb	r2, [r3, #0]
 8000c2a:	e04f      	b.n	8000ccc <takeMachineID+0x1e0>
        	} else if(cursorPosition == 4) {
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	2b04      	cmp	r3, #4
 8000c30:	d105      	bne.n	8000c3e <takeMachineID+0x152>
        		machineID[machineIDLoc] = '1';
 8000c32:	4a51      	ldr	r2, [pc, #324]	; (8000d78 <takeMachineID+0x28c>)
 8000c34:	693b      	ldr	r3, [r7, #16]
 8000c36:	4413      	add	r3, r2
 8000c38:	2231      	movs	r2, #49	; 0x31
 8000c3a:	701a      	strb	r2, [r3, #0]
 8000c3c:	e046      	b.n	8000ccc <takeMachineID+0x1e0>
        	} else if(cursorPosition == 5) {
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	2b05      	cmp	r3, #5
 8000c42:	d105      	bne.n	8000c50 <takeMachineID+0x164>
        		machineID[machineIDLoc] = '2';
 8000c44:	4a4c      	ldr	r2, [pc, #304]	; (8000d78 <takeMachineID+0x28c>)
 8000c46:	693b      	ldr	r3, [r7, #16]
 8000c48:	4413      	add	r3, r2
 8000c4a:	2232      	movs	r2, #50	; 0x32
 8000c4c:	701a      	strb	r2, [r3, #0]
 8000c4e:	e03d      	b.n	8000ccc <takeMachineID+0x1e0>
        	} else if(cursorPosition == 6) {
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	2b06      	cmp	r3, #6
 8000c54:	d105      	bne.n	8000c62 <takeMachineID+0x176>
        		machineID[machineIDLoc] = '3';
 8000c56:	4a48      	ldr	r2, [pc, #288]	; (8000d78 <takeMachineID+0x28c>)
 8000c58:	693b      	ldr	r3, [r7, #16]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	2233      	movs	r2, #51	; 0x33
 8000c5e:	701a      	strb	r2, [r3, #0]
 8000c60:	e034      	b.n	8000ccc <takeMachineID+0x1e0>
        	} else if(cursorPosition == 7) {
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	2b07      	cmp	r3, #7
 8000c66:	d105      	bne.n	8000c74 <takeMachineID+0x188>
        		machineID[machineIDLoc] = '4';
 8000c68:	4a43      	ldr	r2, [pc, #268]	; (8000d78 <takeMachineID+0x28c>)
 8000c6a:	693b      	ldr	r3, [r7, #16]
 8000c6c:	4413      	add	r3, r2
 8000c6e:	2234      	movs	r2, #52	; 0x34
 8000c70:	701a      	strb	r2, [r3, #0]
 8000c72:	e02b      	b.n	8000ccc <takeMachineID+0x1e0>
        	} else if(cursorPosition == 10) {
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	2b0a      	cmp	r3, #10
 8000c78:	d105      	bne.n	8000c86 <takeMachineID+0x19a>
        		machineID[machineIDLoc] = '5';
 8000c7a:	4a3f      	ldr	r2, [pc, #252]	; (8000d78 <takeMachineID+0x28c>)
 8000c7c:	693b      	ldr	r3, [r7, #16]
 8000c7e:	4413      	add	r3, r2
 8000c80:	2235      	movs	r2, #53	; 0x35
 8000c82:	701a      	strb	r2, [r3, #0]
 8000c84:	e022      	b.n	8000ccc <takeMachineID+0x1e0>
        	} else if(cursorPosition == 11) {
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	2b0b      	cmp	r3, #11
 8000c8a:	d105      	bne.n	8000c98 <takeMachineID+0x1ac>
        		machineID[machineIDLoc] = '6';
 8000c8c:	4a3a      	ldr	r2, [pc, #232]	; (8000d78 <takeMachineID+0x28c>)
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	4413      	add	r3, r2
 8000c92:	2236      	movs	r2, #54	; 0x36
 8000c94:	701a      	strb	r2, [r3, #0]
 8000c96:	e019      	b.n	8000ccc <takeMachineID+0x1e0>
        	} else if(cursorPosition == 12) {
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	2b0c      	cmp	r3, #12
 8000c9c:	d105      	bne.n	8000caa <takeMachineID+0x1be>
        		machineID[machineIDLoc] = '7';
 8000c9e:	4a36      	ldr	r2, [pc, #216]	; (8000d78 <takeMachineID+0x28c>)
 8000ca0:	693b      	ldr	r3, [r7, #16]
 8000ca2:	4413      	add	r3, r2
 8000ca4:	2237      	movs	r2, #55	; 0x37
 8000ca6:	701a      	strb	r2, [r3, #0]
 8000ca8:	e010      	b.n	8000ccc <takeMachineID+0x1e0>
        	} else if(cursorPosition == 13) {
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	2b0d      	cmp	r3, #13
 8000cae:	d105      	bne.n	8000cbc <takeMachineID+0x1d0>
        		machineID[machineIDLoc] = '8';
 8000cb0:	4a31      	ldr	r2, [pc, #196]	; (8000d78 <takeMachineID+0x28c>)
 8000cb2:	693b      	ldr	r3, [r7, #16]
 8000cb4:	4413      	add	r3, r2
 8000cb6:	2238      	movs	r2, #56	; 0x38
 8000cb8:	701a      	strb	r2, [r3, #0]
 8000cba:	e007      	b.n	8000ccc <takeMachineID+0x1e0>
        	} else if(cursorPosition == 14) {
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	2b0e      	cmp	r3, #14
 8000cc0:	d104      	bne.n	8000ccc <takeMachineID+0x1e0>
        		machineID[machineIDLoc] = '9';
 8000cc2:	4a2d      	ldr	r2, [pc, #180]	; (8000d78 <takeMachineID+0x28c>)
 8000cc4:	693b      	ldr	r3, [r7, #16]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	2239      	movs	r2, #57	; 0x39
 8000cca:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[machineIDLoc]);
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	b2d9      	uxtb	r1, r3
 8000cd0:	4a29      	ldr	r2, [pc, #164]	; (8000d78 <takeMachineID+0x28c>)
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	461a      	mov	r2, r3
 8000cda:	2001      	movs	r0, #1
 8000cdc:	f7ff fc57 	bl	800058e <lcd_print_char>

        	writeLoc++;
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	3301      	adds	r3, #1
 8000ce4:	60fb      	str	r3, [r7, #12]
        	machineIDLoc++;
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	613b      	str	r3, [r7, #16]

        	HAL_Delay(450);
 8000cec:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 8000cf0:	f008 f8a0 	bl	8008e34 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8000cf4:	2104      	movs	r1, #4
 8000cf6:	4821      	ldr	r0, [pc, #132]	; (8000d7c <takeMachineID+0x290>)
 8000cf8:	f008 fe6c 	bl	80099d4 <HAL_GPIO_ReadPin>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d12f      	bne.n	8000d62 <takeMachineID+0x276>
            if(strlen(machineID) >= 1) {
 8000d02:	4b1d      	ldr	r3, [pc, #116]	; (8000d78 <takeMachineID+0x28c>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d027      	beq.n	8000d5a <takeMachineID+0x26e>

                machineID[machineIDLoc] = '\0';
 8000d0a:	4a1b      	ldr	r2, [pc, #108]	; (8000d78 <takeMachineID+0x28c>)
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	4413      	add	r3, r2
 8000d10:	2200      	movs	r2, #0
 8000d12:	701a      	strb	r2, [r3, #0]

                lcd_delete_char(1, 4+machineIDLoc);
 8000d14:	693b      	ldr	r3, [r7, #16]
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	3304      	adds	r3, #4
 8000d1a:	b2db      	uxtb	r3, r3
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	2001      	movs	r0, #1
 8000d20:	f7ff fc56 	bl	80005d0 <lcd_delete_char>
                HAL_Delay(50);
 8000d24:	2032      	movs	r0, #50	; 0x32
 8000d26:	f008 f885 	bl	8008e34 <HAL_Delay>

                if(writeLoc > 5) {
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	2b05      	cmp	r3, #5
 8000d2e:	dd03      	ble.n	8000d38 <takeMachineID+0x24c>
                	writeLoc--;
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	60fb      	str	r3, [r7, #12]
 8000d36:	e004      	b.n	8000d42 <takeMachineID+0x256>
                } else if(writeLoc < 5) {
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	2b04      	cmp	r3, #4
 8000d3c:	dc01      	bgt.n	8000d42 <takeMachineID+0x256>
                	writeLoc = 5;
 8000d3e:	2305      	movs	r3, #5
 8000d40:	60fb      	str	r3, [r7, #12]
                }

                if(machineIDLoc > 0) {
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	dd03      	ble.n	8000d50 <takeMachineID+0x264>
                	machineIDLoc--;
 8000d48:	693b      	ldr	r3, [r7, #16]
 8000d4a:	3b01      	subs	r3, #1
 8000d4c:	613b      	str	r3, [r7, #16]
 8000d4e:	e004      	b.n	8000d5a <takeMachineID+0x26e>
                } else if(machineIDLoc < 0) {
 8000d50:	693b      	ldr	r3, [r7, #16]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	da01      	bge.n	8000d5a <takeMachineID+0x26e>
                	machineIDLoc = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]
                }
            }

            HAL_Delay(350);
 8000d5a:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000d5e:	f008 f869 	bl	8008e34 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	b2db      	uxtb	r3, r3
 8000d66:	4619      	mov	r1, r3
 8000d68:	2002      	movs	r0, #2
 8000d6a:	f7ff fbdc 	bl	8000526 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000d6e:	e6d9      	b.n	8000b24 <takeMachineID+0x38>
    }
}
 8000d70:	bf00      	nop
 8000d72:	371c      	adds	r7, #28
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd90      	pop	{r4, r7, pc}
 8000d78:	20000bd8 	.word	0x20000bd8
 8000d7c:	40010800 	.word	0x40010800
 8000d80:	0800cd04 	.word	0x0800cd04
 8000d84:	0800cd18 	.word	0x0800cd18
 8000d88:	200009b1 	.word	0x200009b1
 8000d8c:	20000b40 	.word	0x20000b40
 8000d90:	20000a5c 	.word	0x20000a5c
 8000d94:	40011000 	.word	0x40011000

08000d98 <takeWifiSSID>:

void takeWifiSSID(int state) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b08a      	sub	sp, #40	; 0x28
 8000d9c:	af04      	add	r7, sp, #16
 8000d9e:	6078      	str	r0, [r7, #4]
	mainSSIDSection:
    lcd_cursor(1);
 8000da0:	2001      	movs	r0, #1
 8000da2:	f7ff fc3d 	bl	8000620 <lcd_cursor>

    if(state == 0) {
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d104      	bne.n	8000db6 <takeWifiSSID+0x1e>
    	memset(wifiSSID, 0, sizeof(wifiSSID));
 8000dac:	2214      	movs	r2, #20
 8000dae:	2100      	movs	r1, #0
 8000db0:	488a      	ldr	r0, [pc, #552]	; (8000fdc <takeWifiSSID+0x244>)
 8000db2:	f00b fefd 	bl	800cbb0 <memset>
    }

    int realCharPos = 1;
 8000db6:	2301      	movs	r3, #1
 8000db8:	617b      	str	r3, [r7, #20]
    cursorPosition = 1;
 8000dba:	4b89      	ldr	r3, [pc, #548]	; (8000fe0 <takeWifiSSID+0x248>)
 8000dbc:	2201      	movs	r2, #1
 8000dbe:	601a      	str	r2, [r3, #0]
    page = 1;
 8000dc0:	4b88      	ldr	r3, [pc, #544]	; (8000fe4 <takeWifiSSID+0x24c>)
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	601a      	str	r2, [r3, #0]
    int wifiNameLoc = 0;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	613b      	str	r3, [r7, #16]
    int writeLoc = 7;
 8000dca:	2307      	movs	r3, #7
 8000dcc:	60fb      	str	r3, [r7, #12]

    int saveVal = ssidStartPos;
 8000dce:	4b86      	ldr	r3, [pc, #536]	; (8000fe8 <takeWifiSSID+0x250>)
 8000dd0:	781b      	ldrb	r3, [r3, #0]
 8000dd2:	60bb      	str	r3, [r7, #8]

    printTemplate(2, 1);
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	2002      	movs	r0, #2
 8000dd8:	f7ff fc68 	bl	80006ac <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000ddc:	2108      	movs	r1, #8
 8000dde:	4883      	ldr	r0, [pc, #524]	; (8000fec <takeWifiSSID+0x254>)
 8000de0:	f008 fdf8 	bl	80099d4 <HAL_GPIO_ReadPin>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d12b      	bne.n	8000e42 <takeWifiSSID+0xaa>
            lcd_cursor(0);
 8000dea:	2000      	movs	r0, #0
 8000dec:	f7ff fc18 	bl	8000620 <lcd_cursor>

            if(strlen(wifiSSID) > 20) {
 8000df0:	487a      	ldr	r0, [pc, #488]	; (8000fdc <takeWifiSSID+0x244>)
 8000df2:	f7ff fa17 	bl	8000224 <strlen>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b14      	cmp	r3, #20
 8000dfa:	d910      	bls.n	8000e1e <takeWifiSSID+0x86>
                lcd_clear();
 8000dfc:	f7ff fbde 	bl	80005bc <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 8000e00:	4a7b      	ldr	r2, [pc, #492]	; (8000ff0 <takeWifiSSID+0x258>)
 8000e02:	2101      	movs	r1, #1
 8000e04:	2001      	movs	r0, #1
 8000e06:	f7ff fbad 	bl	8000564 <lcd_print>
                lcd_print(2, 1, "FAZLA SSID OLMAZ");
 8000e0a:	4a7a      	ldr	r2, [pc, #488]	; (8000ff4 <takeWifiSSID+0x25c>)
 8000e0c:	2101      	movs	r1, #1
 8000e0e:	2002      	movs	r0, #2
 8000e10:	f7ff fba8 	bl	8000564 <lcd_print>
                HAL_Delay(1200);
 8000e14:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000e18:	f008 f80c 	bl	8008e34 <HAL_Delay>
                goto mainSSIDSection;
 8000e1c:	e7c0      	b.n	8000da0 <takeWifiSSID+0x8>
            }

            HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8000e1e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000e22:	9302      	str	r3, [sp, #8]
 8000e24:	236e      	movs	r3, #110	; 0x6e
 8000e26:	9301      	str	r3, [sp, #4]
 8000e28:	4b73      	ldr	r3, [pc, #460]	; (8000ff8 <takeWifiSSID+0x260>)
 8000e2a:	9300      	str	r3, [sp, #0]
 8000e2c:	236e      	movs	r3, #110	; 0x6e
 8000e2e:	2200      	movs	r2, #0
 8000e30:	21a0      	movs	r1, #160	; 0xa0
 8000e32:	4872      	ldr	r0, [pc, #456]	; (8000ffc <takeWifiSSID+0x264>)
 8000e34:	f009 f888 	bl	8009f48 <HAL_I2C_Mem_Write>
            HAL_Delay(500);
 8000e38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e3c:	f007 fffa 	bl	8008e34 <HAL_Delay>

            break;
 8000e40:	e15f      	b.n	8001102 <takeWifiSSID+0x36a>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000e42:	2101      	movs	r1, #1
 8000e44:	4869      	ldr	r0, [pc, #420]	; (8000fec <takeWifiSSID+0x254>)
 8000e46:	f008 fdc5 	bl	80099d4 <HAL_GPIO_ReadPin>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d166      	bne.n	8000f1e <takeWifiSSID+0x186>
        	realCharPos++;
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	3301      	adds	r3, #1
 8000e54:	617b      	str	r3, [r7, #20]
        	if(realCharPos > 80) {
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	2b50      	cmp	r3, #80	; 0x50
 8000e5a:	dd01      	ble.n	8000e60 <takeWifiSSID+0xc8>
        		realCharPos = 1;
 8000e5c:	2301      	movs	r3, #1
 8000e5e:	617b      	str	r3, [r7, #20]
        	}
            if (cursorPosition == 16) {
 8000e60:	4b5f      	ldr	r3, [pc, #380]	; (8000fe0 <takeWifiSSID+0x248>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	2b10      	cmp	r3, #16
 8000e66:	d152      	bne.n	8000f0e <takeWifiSSID+0x176>
            	if(page == 1) {
 8000e68:	4b5e      	ldr	r3, [pc, #376]	; (8000fe4 <takeWifiSSID+0x24c>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d10c      	bne.n	8000e8a <takeWifiSSID+0xf2>
            		cursorPosition = 1;
 8000e70:	4b5b      	ldr	r3, [pc, #364]	; (8000fe0 <takeWifiSSID+0x248>)
 8000e72:	2201      	movs	r2, #1
 8000e74:	601a      	str	r2, [r3, #0]
            		page++;
 8000e76:	4b5b      	ldr	r3, [pc, #364]	; (8000fe4 <takeWifiSSID+0x24c>)
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	3301      	adds	r3, #1
 8000e7c:	4a59      	ldr	r2, [pc, #356]	; (8000fe4 <takeWifiSSID+0x24c>)
 8000e7e:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 2);
 8000e80:	2102      	movs	r1, #2
 8000e82:	2002      	movs	r0, #2
 8000e84:	f7ff fc12 	bl	80006ac <printTemplate>
 8000e88:	e046      	b.n	8000f18 <takeWifiSSID+0x180>
            	} else if(page == 2) {
 8000e8a:	4b56      	ldr	r3, [pc, #344]	; (8000fe4 <takeWifiSSID+0x24c>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	2b02      	cmp	r3, #2
 8000e90:	d10c      	bne.n	8000eac <takeWifiSSID+0x114>
            		cursorPosition = 1;
 8000e92:	4b53      	ldr	r3, [pc, #332]	; (8000fe0 <takeWifiSSID+0x248>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	601a      	str	r2, [r3, #0]
            		page++;
 8000e98:	4b52      	ldr	r3, [pc, #328]	; (8000fe4 <takeWifiSSID+0x24c>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	4a51      	ldr	r2, [pc, #324]	; (8000fe4 <takeWifiSSID+0x24c>)
 8000ea0:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 3);
 8000ea2:	2103      	movs	r1, #3
 8000ea4:	2002      	movs	r0, #2
 8000ea6:	f7ff fc01 	bl	80006ac <printTemplate>
 8000eaa:	e035      	b.n	8000f18 <takeWifiSSID+0x180>
            	} else if(page == 3) {
 8000eac:	4b4d      	ldr	r3, [pc, #308]	; (8000fe4 <takeWifiSSID+0x24c>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	2b03      	cmp	r3, #3
 8000eb2:	d10c      	bne.n	8000ece <takeWifiSSID+0x136>
            		cursorPosition = 1;
 8000eb4:	4b4a      	ldr	r3, [pc, #296]	; (8000fe0 <takeWifiSSID+0x248>)
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	601a      	str	r2, [r3, #0]
            		page++;
 8000eba:	4b4a      	ldr	r3, [pc, #296]	; (8000fe4 <takeWifiSSID+0x24c>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	4a48      	ldr	r2, [pc, #288]	; (8000fe4 <takeWifiSSID+0x24c>)
 8000ec2:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 4);
 8000ec4:	2104      	movs	r1, #4
 8000ec6:	2002      	movs	r0, #2
 8000ec8:	f7ff fbf0 	bl	80006ac <printTemplate>
 8000ecc:	e024      	b.n	8000f18 <takeWifiSSID+0x180>
            	} else if(page == 4) {
 8000ece:	4b45      	ldr	r3, [pc, #276]	; (8000fe4 <takeWifiSSID+0x24c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	2b04      	cmp	r3, #4
 8000ed4:	d10c      	bne.n	8000ef0 <takeWifiSSID+0x158>
            		cursorPosition = 1;
 8000ed6:	4b42      	ldr	r3, [pc, #264]	; (8000fe0 <takeWifiSSID+0x248>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	601a      	str	r2, [r3, #0]
            		page++;
 8000edc:	4b41      	ldr	r3, [pc, #260]	; (8000fe4 <takeWifiSSID+0x24c>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	4a40      	ldr	r2, [pc, #256]	; (8000fe4 <takeWifiSSID+0x24c>)
 8000ee4:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 5);
 8000ee6:	2105      	movs	r1, #5
 8000ee8:	2002      	movs	r0, #2
 8000eea:	f7ff fbdf 	bl	80006ac <printTemplate>
 8000eee:	e013      	b.n	8000f18 <takeWifiSSID+0x180>
            	} else if(page == 5) {
 8000ef0:	4b3c      	ldr	r3, [pc, #240]	; (8000fe4 <takeWifiSSID+0x24c>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	2b05      	cmp	r3, #5
 8000ef6:	d10f      	bne.n	8000f18 <takeWifiSSID+0x180>
            		cursorPosition = 1;
 8000ef8:	4b39      	ldr	r3, [pc, #228]	; (8000fe0 <takeWifiSSID+0x248>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	601a      	str	r2, [r3, #0]
            		page = 1;
 8000efe:	4b39      	ldr	r3, [pc, #228]	; (8000fe4 <takeWifiSSID+0x24c>)
 8000f00:	2201      	movs	r2, #1
 8000f02:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 8000f04:	2101      	movs	r1, #1
 8000f06:	2002      	movs	r0, #2
 8000f08:	f7ff fbd0 	bl	80006ac <printTemplate>
 8000f0c:	e004      	b.n	8000f18 <takeWifiSSID+0x180>
            	}
            } else {
            	cursorPosition++;
 8000f0e:	4b34      	ldr	r3, [pc, #208]	; (8000fe0 <takeWifiSSID+0x248>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	3301      	adds	r3, #1
 8000f14:	4a32      	ldr	r2, [pc, #200]	; (8000fe0 <takeWifiSSID+0x248>)
 8000f16:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8000f18:	20fa      	movs	r0, #250	; 0xfa
 8000f1a:	f007 ff8b 	bl	8008e34 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8000f1e:	2108      	movs	r1, #8
 8000f20:	4837      	ldr	r0, [pc, #220]	; (8001000 <takeWifiSSID+0x268>)
 8000f22:	f008 fd57 	bl	80099d4 <HAL_GPIO_ReadPin>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d173      	bne.n	8001014 <takeWifiSSID+0x27c>
        	realCharPos--;
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	617b      	str	r3, [r7, #20]
        	if(realCharPos < 1) {
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	dc01      	bgt.n	8000f3c <takeWifiSSID+0x1a4>
        		realCharPos = 80;
 8000f38:	2350      	movs	r3, #80	; 0x50
 8000f3a:	617b      	str	r3, [r7, #20]
        	}
            if(cursorPosition == 1) {
 8000f3c:	4b28      	ldr	r3, [pc, #160]	; (8000fe0 <takeWifiSSID+0x248>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d15f      	bne.n	8001004 <takeWifiSSID+0x26c>
            	if(page == 1) {
 8000f44:	4b27      	ldr	r3, [pc, #156]	; (8000fe4 <takeWifiSSID+0x24c>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d10a      	bne.n	8000f62 <takeWifiSSID+0x1ca>
            		cursorPosition = 16;
 8000f4c:	4b24      	ldr	r3, [pc, #144]	; (8000fe0 <takeWifiSSID+0x248>)
 8000f4e:	2210      	movs	r2, #16
 8000f50:	601a      	str	r2, [r3, #0]
            		page = 5;
 8000f52:	4b24      	ldr	r3, [pc, #144]	; (8000fe4 <takeWifiSSID+0x24c>)
 8000f54:	2205      	movs	r2, #5
 8000f56:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 5);
 8000f58:	2105      	movs	r1, #5
 8000f5a:	2002      	movs	r0, #2
 8000f5c:	f7ff fba6 	bl	80006ac <printTemplate>
 8000f60:	e055      	b.n	800100e <takeWifiSSID+0x276>
            	} else if(page == 2) {
 8000f62:	4b20      	ldr	r3, [pc, #128]	; (8000fe4 <takeWifiSSID+0x24c>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	2b02      	cmp	r3, #2
 8000f68:	d10a      	bne.n	8000f80 <takeWifiSSID+0x1e8>
            		cursorPosition = 16;
 8000f6a:	4b1d      	ldr	r3, [pc, #116]	; (8000fe0 <takeWifiSSID+0x248>)
 8000f6c:	2210      	movs	r2, #16
 8000f6e:	601a      	str	r2, [r3, #0]
            		page = 1;
 8000f70:	4b1c      	ldr	r3, [pc, #112]	; (8000fe4 <takeWifiSSID+0x24c>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 8000f76:	2101      	movs	r1, #1
 8000f78:	2002      	movs	r0, #2
 8000f7a:	f7ff fb97 	bl	80006ac <printTemplate>
 8000f7e:	e046      	b.n	800100e <takeWifiSSID+0x276>
            	} else if(page == 3) {
 8000f80:	4b18      	ldr	r3, [pc, #96]	; (8000fe4 <takeWifiSSID+0x24c>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b03      	cmp	r3, #3
 8000f86:	d10a      	bne.n	8000f9e <takeWifiSSID+0x206>
            		cursorPosition = 16;
 8000f88:	4b15      	ldr	r3, [pc, #84]	; (8000fe0 <takeWifiSSID+0x248>)
 8000f8a:	2210      	movs	r2, #16
 8000f8c:	601a      	str	r2, [r3, #0]
            		page = 2;
 8000f8e:	4b15      	ldr	r3, [pc, #84]	; (8000fe4 <takeWifiSSID+0x24c>)
 8000f90:	2202      	movs	r2, #2
 8000f92:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 2);
 8000f94:	2102      	movs	r1, #2
 8000f96:	2002      	movs	r0, #2
 8000f98:	f7ff fb88 	bl	80006ac <printTemplate>
 8000f9c:	e037      	b.n	800100e <takeWifiSSID+0x276>
            	} else if(page == 4) {
 8000f9e:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <takeWifiSSID+0x24c>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2b04      	cmp	r3, #4
 8000fa4:	d10a      	bne.n	8000fbc <takeWifiSSID+0x224>
            		cursorPosition = 16;
 8000fa6:	4b0e      	ldr	r3, [pc, #56]	; (8000fe0 <takeWifiSSID+0x248>)
 8000fa8:	2210      	movs	r2, #16
 8000faa:	601a      	str	r2, [r3, #0]
            		page = 3;
 8000fac:	4b0d      	ldr	r3, [pc, #52]	; (8000fe4 <takeWifiSSID+0x24c>)
 8000fae:	2203      	movs	r2, #3
 8000fb0:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 3);
 8000fb2:	2103      	movs	r1, #3
 8000fb4:	2002      	movs	r0, #2
 8000fb6:	f7ff fb79 	bl	80006ac <printTemplate>
 8000fba:	e028      	b.n	800100e <takeWifiSSID+0x276>
            	} else if(page == 5) {
 8000fbc:	4b09      	ldr	r3, [pc, #36]	; (8000fe4 <takeWifiSSID+0x24c>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	2b05      	cmp	r3, #5
 8000fc2:	d124      	bne.n	800100e <takeWifiSSID+0x276>
            		cursorPosition = 16;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <takeWifiSSID+0x248>)
 8000fc6:	2210      	movs	r2, #16
 8000fc8:	601a      	str	r2, [r3, #0]
            		page = 4;
 8000fca:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <takeWifiSSID+0x24c>)
 8000fcc:	2204      	movs	r2, #4
 8000fce:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 4);
 8000fd0:	2104      	movs	r1, #4
 8000fd2:	2002      	movs	r0, #2
 8000fd4:	f7ff fb6a 	bl	80006ac <printTemplate>
 8000fd8:	e019      	b.n	800100e <takeWifiSSID+0x276>
 8000fda:	bf00      	nop
 8000fdc:	20000be4 	.word	0x20000be4
 8000fe0:	20000944 	.word	0x20000944
 8000fe4:	20000948 	.word	0x20000948
 8000fe8:	200009b2 	.word	0x200009b2
 8000fec:	40010800 	.word	0x40010800
 8000ff0:	0800cd2c 	.word	0x0800cd2c
 8000ff4:	0800cd40 	.word	0x0800cd40
 8000ff8:	20000b40 	.word	0x20000b40
 8000ffc:	20000a5c 	.word	0x20000a5c
 8001000:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 8001004:	4b41      	ldr	r3, [pc, #260]	; (800110c <takeWifiSSID+0x374>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	3b01      	subs	r3, #1
 800100a:	4a40      	ldr	r2, [pc, #256]	; (800110c <takeWifiSSID+0x374>)
 800100c:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 800100e:	20fa      	movs	r0, #250	; 0xfa
 8001010:	f007 ff10 	bl	8008e34 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8001014:	2102      	movs	r1, #2
 8001016:	483e      	ldr	r0, [pc, #248]	; (8001110 <takeWifiSSID+0x378>)
 8001018:	f008 fcdc 	bl	80099d4 <HAL_GPIO_ReadPin>
 800101c:	4603      	mov	r3, r0
 800101e:	2b01      	cmp	r3, #1
 8001020:	d131      	bne.n	8001086 <takeWifiSSID+0x2ee>
            wifiSSID[wifiNameLoc] = getCharFromCursorPosition(realCharPos - 1);
 8001022:	697b      	ldr	r3, [r7, #20]
 8001024:	3b01      	subs	r3, #1
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff fcb6 	bl	8000998 <getCharFromCursorPosition>
 800102c:	4603      	mov	r3, r0
 800102e:	4619      	mov	r1, r3
 8001030:	4a38      	ldr	r2, [pc, #224]	; (8001114 <takeWifiSSID+0x37c>)
 8001032:	693b      	ldr	r3, [r7, #16]
 8001034:	4413      	add	r3, r2
 8001036:	460a      	mov	r2, r1
 8001038:	701a      	strb	r2, [r3, #0]
            eepromData[saveVal] = getPosFromChar(getCharFromCursorPosition(realCharPos - 1));
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	3b01      	subs	r3, #1
 800103e:	4618      	mov	r0, r3
 8001040:	f7ff fcaa 	bl	8000998 <getCharFromCursorPosition>
 8001044:	4603      	mov	r3, r0
 8001046:	4618      	mov	r0, r3
 8001048:	f7ff fcb6 	bl	80009b8 <getPosFromChar>
 800104c:	4603      	mov	r3, r0
 800104e:	4619      	mov	r1, r3
 8001050:	4a31      	ldr	r2, [pc, #196]	; (8001118 <takeWifiSSID+0x380>)
 8001052:	68bb      	ldr	r3, [r7, #8]
 8001054:	4413      	add	r3, r2
 8001056:	460a      	mov	r2, r1
 8001058:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiSSID[wifiNameLoc]);
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	b2d9      	uxtb	r1, r3
 800105e:	4a2d      	ldr	r2, [pc, #180]	; (8001114 <takeWifiSSID+0x37c>)
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	4413      	add	r3, r2
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	461a      	mov	r2, r3
 8001068:	2001      	movs	r0, #1
 800106a:	f7ff fa90 	bl	800058e <lcd_print_char>

            saveVal++;
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	3301      	adds	r3, #1
 8001072:	60bb      	str	r3, [r7, #8]
            writeLoc++;
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	3301      	adds	r3, #1
 8001078:	60fb      	str	r3, [r7, #12]
            wifiNameLoc++;
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	3301      	adds	r3, #1
 800107e:	613b      	str	r3, [r7, #16]

            HAL_Delay(250);
 8001080:	20fa      	movs	r0, #250	; 0xfa
 8001082:	f007 fed7 	bl	8008e34 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8001086:	2104      	movs	r1, #4
 8001088:	4821      	ldr	r0, [pc, #132]	; (8001110 <takeWifiSSID+0x378>)
 800108a:	f008 fca3 	bl	80099d4 <HAL_GPIO_ReadPin>
 800108e:	4603      	mov	r3, r0
 8001090:	2b01      	cmp	r3, #1
 8001092:	d12e      	bne.n	80010f2 <takeWifiSSID+0x35a>
        	if(strlen(wifiSSID) >= 1) {
 8001094:	4b1f      	ldr	r3, [pc, #124]	; (8001114 <takeWifiSSID+0x37c>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d027      	beq.n	80010ec <takeWifiSSID+0x354>
        		wifiSSID[wifiNameLoc] = '\0';
 800109c:	4a1d      	ldr	r2, [pc, #116]	; (8001114 <takeWifiSSID+0x37c>)
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	4413      	add	r3, r2
 80010a2:	2200      	movs	r2, #0
 80010a4:	701a      	strb	r2, [r3, #0]

        		lcd_delete_char(1, 6+wifiNameLoc);
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	b2db      	uxtb	r3, r3
 80010aa:	3306      	adds	r3, #6
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	4619      	mov	r1, r3
 80010b0:	2001      	movs	r0, #1
 80010b2:	f7ff fa8d 	bl	80005d0 <lcd_delete_char>
        		HAL_Delay(50);
 80010b6:	2032      	movs	r0, #50	; 0x32
 80010b8:	f007 febc 	bl	8008e34 <HAL_Delay>
        		if(writeLoc > 7) {
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	2b07      	cmp	r3, #7
 80010c0:	dd03      	ble.n	80010ca <takeWifiSSID+0x332>
        			writeLoc--;
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	3b01      	subs	r3, #1
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	e004      	b.n	80010d4 <takeWifiSSID+0x33c>
        		} else if(writeLoc < 7) {
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	2b06      	cmp	r3, #6
 80010ce:	dc01      	bgt.n	80010d4 <takeWifiSSID+0x33c>
        			writeLoc = 7;
 80010d0:	2307      	movs	r3, #7
 80010d2:	60fb      	str	r3, [r7, #12]
        		}

        		if(wifiNameLoc > 0) {
 80010d4:	693b      	ldr	r3, [r7, #16]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	dd03      	ble.n	80010e2 <takeWifiSSID+0x34a>
        			wifiNameLoc--;
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	3b01      	subs	r3, #1
 80010de:	613b      	str	r3, [r7, #16]
 80010e0:	e004      	b.n	80010ec <takeWifiSSID+0x354>
        		} else if(wifiNameLoc < 0) {
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	da01      	bge.n	80010ec <takeWifiSSID+0x354>
        			wifiNameLoc = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	613b      	str	r3, [r7, #16]
        		}
        	}

        	HAL_Delay(250);
 80010ec:	20fa      	movs	r0, #250	; 0xfa
 80010ee:	f007 fea1 	bl	8008e34 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80010f2:	4b06      	ldr	r3, [pc, #24]	; (800110c <takeWifiSSID+0x374>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	4619      	mov	r1, r3
 80010fa:	2002      	movs	r0, #2
 80010fc:	f7ff fa13 	bl	8000526 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8001100:	e66c      	b.n	8000ddc <takeWifiSSID+0x44>
    }
}
 8001102:	bf00      	nop
 8001104:	3718      	adds	r7, #24
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	20000944 	.word	0x20000944
 8001110:	40010800 	.word	0x40010800
 8001114:	20000be4 	.word	0x20000be4
 8001118:	20000b40 	.word	0x20000b40

0800111c <takeWifiPass>:

void takeWifiPass(int state) {
 800111c:	b580      	push	{r7, lr}
 800111e:	b08a      	sub	sp, #40	; 0x28
 8001120:	af04      	add	r7, sp, #16
 8001122:	6078      	str	r0, [r7, #4]
	mainPASSSection:
    lcd_cursor(1);
 8001124:	2001      	movs	r0, #1
 8001126:	f7ff fa7b 	bl	8000620 <lcd_cursor>

    if(state == 0) {
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d104      	bne.n	800113a <takeWifiPass+0x1e>
    	memset(wifiPass, 0, sizeof(wifiPass));
 8001130:	2214      	movs	r2, #20
 8001132:	2100      	movs	r1, #0
 8001134:	488a      	ldr	r0, [pc, #552]	; (8001360 <takeWifiPass+0x244>)
 8001136:	f00b fd3b 	bl	800cbb0 <memset>
    }

    int realCharPos = 1;
 800113a:	2301      	movs	r3, #1
 800113c:	617b      	str	r3, [r7, #20]
    cursorPosition = 1;
 800113e:	4b89      	ldr	r3, [pc, #548]	; (8001364 <takeWifiPass+0x248>)
 8001140:	2201      	movs	r2, #1
 8001142:	601a      	str	r2, [r3, #0]
    page = 1;
 8001144:	4b88      	ldr	r3, [pc, #544]	; (8001368 <takeWifiPass+0x24c>)
 8001146:	2201      	movs	r2, #1
 8001148:	601a      	str	r2, [r3, #0]
    int wifiPassLoc = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	613b      	str	r3, [r7, #16]
    int writeLoc = 7;
 800114e:	2307      	movs	r3, #7
 8001150:	60fb      	str	r3, [r7, #12]

    int saveVal = passStartPos;
 8001152:	4b86      	ldr	r3, [pc, #536]	; (800136c <takeWifiPass+0x250>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	60bb      	str	r3, [r7, #8]

    printTemplate(3, 1);
 8001158:	2101      	movs	r1, #1
 800115a:	2003      	movs	r0, #3
 800115c:	f7ff faa6 	bl	80006ac <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8001160:	2108      	movs	r1, #8
 8001162:	4883      	ldr	r0, [pc, #524]	; (8001370 <takeWifiPass+0x254>)
 8001164:	f008 fc36 	bl	80099d4 <HAL_GPIO_ReadPin>
 8001168:	4603      	mov	r3, r0
 800116a:	2b01      	cmp	r3, #1
 800116c:	d12b      	bne.n	80011c6 <takeWifiPass+0xaa>
            lcd_cursor(0);
 800116e:	2000      	movs	r0, #0
 8001170:	f7ff fa56 	bl	8000620 <lcd_cursor>

            if(strlen(wifiPass) > 20) {
 8001174:	487a      	ldr	r0, [pc, #488]	; (8001360 <takeWifiPass+0x244>)
 8001176:	f7ff f855 	bl	8000224 <strlen>
 800117a:	4603      	mov	r3, r0
 800117c:	2b14      	cmp	r3, #20
 800117e:	d910      	bls.n	80011a2 <takeWifiPass+0x86>
                lcd_clear();
 8001180:	f7ff fa1c 	bl	80005bc <lcd_clear>
                lcd_print(1, 1, " 20 KARAKTERDEN ");
 8001184:	4a7b      	ldr	r2, [pc, #492]	; (8001374 <takeWifiPass+0x258>)
 8001186:	2101      	movs	r1, #1
 8001188:	2001      	movs	r0, #1
 800118a:	f7ff f9eb 	bl	8000564 <lcd_print>
                lcd_print(2, 1, "FAZLA PASS OLMAZ");
 800118e:	4a7a      	ldr	r2, [pc, #488]	; (8001378 <takeWifiPass+0x25c>)
 8001190:	2101      	movs	r1, #1
 8001192:	2002      	movs	r0, #2
 8001194:	f7ff f9e6 	bl	8000564 <lcd_print>
                HAL_Delay(1200);
 8001198:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 800119c:	f007 fe4a 	bl	8008e34 <HAL_Delay>
                goto mainPASSSection;
 80011a0:	e7c0      	b.n	8001124 <takeWifiPass+0x8>
            }

            HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80011a2:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80011a6:	9302      	str	r3, [sp, #8]
 80011a8:	236e      	movs	r3, #110	; 0x6e
 80011aa:	9301      	str	r3, [sp, #4]
 80011ac:	4b73      	ldr	r3, [pc, #460]	; (800137c <takeWifiPass+0x260>)
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	236e      	movs	r3, #110	; 0x6e
 80011b2:	2200      	movs	r2, #0
 80011b4:	21a0      	movs	r1, #160	; 0xa0
 80011b6:	4872      	ldr	r0, [pc, #456]	; (8001380 <takeWifiPass+0x264>)
 80011b8:	f008 fec6 	bl	8009f48 <HAL_I2C_Mem_Write>
            HAL_Delay(500);
 80011bc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011c0:	f007 fe38 	bl	8008e34 <HAL_Delay>

            break;
 80011c4:	e15f      	b.n	8001486 <takeWifiPass+0x36a>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80011c6:	2101      	movs	r1, #1
 80011c8:	4869      	ldr	r0, [pc, #420]	; (8001370 <takeWifiPass+0x254>)
 80011ca:	f008 fc03 	bl	80099d4 <HAL_GPIO_ReadPin>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b01      	cmp	r3, #1
 80011d2:	d166      	bne.n	80012a2 <takeWifiPass+0x186>
        	realCharPos++;
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	3301      	adds	r3, #1
 80011d8:	617b      	str	r3, [r7, #20]
        	if(realCharPos > 80) {
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	2b50      	cmp	r3, #80	; 0x50
 80011de:	dd01      	ble.n	80011e4 <takeWifiPass+0xc8>
        	    realCharPos = 1;
 80011e0:	2301      	movs	r3, #1
 80011e2:	617b      	str	r3, [r7, #20]
        	}
            if (cursorPosition == 16) {
 80011e4:	4b5f      	ldr	r3, [pc, #380]	; (8001364 <takeWifiPass+0x248>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	2b10      	cmp	r3, #16
 80011ea:	d152      	bne.n	8001292 <takeWifiPass+0x176>
            	if(page == 1) {
 80011ec:	4b5e      	ldr	r3, [pc, #376]	; (8001368 <takeWifiPass+0x24c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2b01      	cmp	r3, #1
 80011f2:	d10c      	bne.n	800120e <takeWifiPass+0xf2>
            		cursorPosition = 1;
 80011f4:	4b5b      	ldr	r3, [pc, #364]	; (8001364 <takeWifiPass+0x248>)
 80011f6:	2201      	movs	r2, #1
 80011f8:	601a      	str	r2, [r3, #0]
            		page++;
 80011fa:	4b5b      	ldr	r3, [pc, #364]	; (8001368 <takeWifiPass+0x24c>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	3301      	adds	r3, #1
 8001200:	4a59      	ldr	r2, [pc, #356]	; (8001368 <takeWifiPass+0x24c>)
 8001202:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 2);
 8001204:	2102      	movs	r1, #2
 8001206:	2003      	movs	r0, #3
 8001208:	f7ff fa50 	bl	80006ac <printTemplate>
 800120c:	e046      	b.n	800129c <takeWifiPass+0x180>
            	} else if(page == 2) {
 800120e:	4b56      	ldr	r3, [pc, #344]	; (8001368 <takeWifiPass+0x24c>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	2b02      	cmp	r3, #2
 8001214:	d10c      	bne.n	8001230 <takeWifiPass+0x114>
            		cursorPosition = 1;
 8001216:	4b53      	ldr	r3, [pc, #332]	; (8001364 <takeWifiPass+0x248>)
 8001218:	2201      	movs	r2, #1
 800121a:	601a      	str	r2, [r3, #0]
            		page++;
 800121c:	4b52      	ldr	r3, [pc, #328]	; (8001368 <takeWifiPass+0x24c>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	3301      	adds	r3, #1
 8001222:	4a51      	ldr	r2, [pc, #324]	; (8001368 <takeWifiPass+0x24c>)
 8001224:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 3);
 8001226:	2103      	movs	r1, #3
 8001228:	2003      	movs	r0, #3
 800122a:	f7ff fa3f 	bl	80006ac <printTemplate>
 800122e:	e035      	b.n	800129c <takeWifiPass+0x180>
            	} else if(page == 3) {
 8001230:	4b4d      	ldr	r3, [pc, #308]	; (8001368 <takeWifiPass+0x24c>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	2b03      	cmp	r3, #3
 8001236:	d10c      	bne.n	8001252 <takeWifiPass+0x136>
            		cursorPosition = 1;
 8001238:	4b4a      	ldr	r3, [pc, #296]	; (8001364 <takeWifiPass+0x248>)
 800123a:	2201      	movs	r2, #1
 800123c:	601a      	str	r2, [r3, #0]
            		page++;
 800123e:	4b4a      	ldr	r3, [pc, #296]	; (8001368 <takeWifiPass+0x24c>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	3301      	adds	r3, #1
 8001244:	4a48      	ldr	r2, [pc, #288]	; (8001368 <takeWifiPass+0x24c>)
 8001246:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 4);
 8001248:	2104      	movs	r1, #4
 800124a:	2003      	movs	r0, #3
 800124c:	f7ff fa2e 	bl	80006ac <printTemplate>
 8001250:	e024      	b.n	800129c <takeWifiPass+0x180>
            	} else if(page == 4) {
 8001252:	4b45      	ldr	r3, [pc, #276]	; (8001368 <takeWifiPass+0x24c>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2b04      	cmp	r3, #4
 8001258:	d10c      	bne.n	8001274 <takeWifiPass+0x158>
            		cursorPosition = 1;
 800125a:	4b42      	ldr	r3, [pc, #264]	; (8001364 <takeWifiPass+0x248>)
 800125c:	2201      	movs	r2, #1
 800125e:	601a      	str	r2, [r3, #0]
            		page++;
 8001260:	4b41      	ldr	r3, [pc, #260]	; (8001368 <takeWifiPass+0x24c>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	3301      	adds	r3, #1
 8001266:	4a40      	ldr	r2, [pc, #256]	; (8001368 <takeWifiPass+0x24c>)
 8001268:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 5);
 800126a:	2105      	movs	r1, #5
 800126c:	2003      	movs	r0, #3
 800126e:	f7ff fa1d 	bl	80006ac <printTemplate>
 8001272:	e013      	b.n	800129c <takeWifiPass+0x180>
            	} else if(page == 5) {
 8001274:	4b3c      	ldr	r3, [pc, #240]	; (8001368 <takeWifiPass+0x24c>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b05      	cmp	r3, #5
 800127a:	d10f      	bne.n	800129c <takeWifiPass+0x180>
            		cursorPosition = 1;
 800127c:	4b39      	ldr	r3, [pc, #228]	; (8001364 <takeWifiPass+0x248>)
 800127e:	2201      	movs	r2, #1
 8001280:	601a      	str	r2, [r3, #0]
            		page = 1;
 8001282:	4b39      	ldr	r3, [pc, #228]	; (8001368 <takeWifiPass+0x24c>)
 8001284:	2201      	movs	r2, #1
 8001286:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 8001288:	2101      	movs	r1, #1
 800128a:	2003      	movs	r0, #3
 800128c:	f7ff fa0e 	bl	80006ac <printTemplate>
 8001290:	e004      	b.n	800129c <takeWifiPass+0x180>
            	}
            } else {
            	cursorPosition++;
 8001292:	4b34      	ldr	r3, [pc, #208]	; (8001364 <takeWifiPass+0x248>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	3301      	adds	r3, #1
 8001298:	4a32      	ldr	r2, [pc, #200]	; (8001364 <takeWifiPass+0x248>)
 800129a:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 800129c:	20fa      	movs	r0, #250	; 0xfa
 800129e:	f007 fdc9 	bl	8008e34 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80012a2:	2108      	movs	r1, #8
 80012a4:	4837      	ldr	r0, [pc, #220]	; (8001384 <takeWifiPass+0x268>)
 80012a6:	f008 fb95 	bl	80099d4 <HAL_GPIO_ReadPin>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d173      	bne.n	8001398 <takeWifiPass+0x27c>
        	realCharPos--;
 80012b0:	697b      	ldr	r3, [r7, #20]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	617b      	str	r3, [r7, #20]
        	if(realCharPos < 1) {
 80012b6:	697b      	ldr	r3, [r7, #20]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	dc01      	bgt.n	80012c0 <takeWifiPass+0x1a4>
        	    realCharPos = 80;
 80012bc:	2350      	movs	r3, #80	; 0x50
 80012be:	617b      	str	r3, [r7, #20]
        	}
            if(cursorPosition == 1) {
 80012c0:	4b28      	ldr	r3, [pc, #160]	; (8001364 <takeWifiPass+0x248>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	2b01      	cmp	r3, #1
 80012c6:	d15f      	bne.n	8001388 <takeWifiPass+0x26c>
            	if(page == 1) {
 80012c8:	4b27      	ldr	r3, [pc, #156]	; (8001368 <takeWifiPass+0x24c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d10a      	bne.n	80012e6 <takeWifiPass+0x1ca>
            		cursorPosition = 16;
 80012d0:	4b24      	ldr	r3, [pc, #144]	; (8001364 <takeWifiPass+0x248>)
 80012d2:	2210      	movs	r2, #16
 80012d4:	601a      	str	r2, [r3, #0]
            		page = 5;
 80012d6:	4b24      	ldr	r3, [pc, #144]	; (8001368 <takeWifiPass+0x24c>)
 80012d8:	2205      	movs	r2, #5
 80012da:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 5);
 80012dc:	2105      	movs	r1, #5
 80012de:	2003      	movs	r0, #3
 80012e0:	f7ff f9e4 	bl	80006ac <printTemplate>
 80012e4:	e055      	b.n	8001392 <takeWifiPass+0x276>
            	} else if(page == 2) {
 80012e6:	4b20      	ldr	r3, [pc, #128]	; (8001368 <takeWifiPass+0x24c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d10a      	bne.n	8001304 <takeWifiPass+0x1e8>
            		cursorPosition = 16;
 80012ee:	4b1d      	ldr	r3, [pc, #116]	; (8001364 <takeWifiPass+0x248>)
 80012f0:	2210      	movs	r2, #16
 80012f2:	601a      	str	r2, [r3, #0]
            		page = 1;
 80012f4:	4b1c      	ldr	r3, [pc, #112]	; (8001368 <takeWifiPass+0x24c>)
 80012f6:	2201      	movs	r2, #1
 80012f8:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 80012fa:	2101      	movs	r1, #1
 80012fc:	2003      	movs	r0, #3
 80012fe:	f7ff f9d5 	bl	80006ac <printTemplate>
 8001302:	e046      	b.n	8001392 <takeWifiPass+0x276>
            	} else if(page == 3) {
 8001304:	4b18      	ldr	r3, [pc, #96]	; (8001368 <takeWifiPass+0x24c>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2b03      	cmp	r3, #3
 800130a:	d10a      	bne.n	8001322 <takeWifiPass+0x206>
            		cursorPosition = 16;
 800130c:	4b15      	ldr	r3, [pc, #84]	; (8001364 <takeWifiPass+0x248>)
 800130e:	2210      	movs	r2, #16
 8001310:	601a      	str	r2, [r3, #0]
            		page = 2;
 8001312:	4b15      	ldr	r3, [pc, #84]	; (8001368 <takeWifiPass+0x24c>)
 8001314:	2202      	movs	r2, #2
 8001316:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 2);
 8001318:	2102      	movs	r1, #2
 800131a:	2003      	movs	r0, #3
 800131c:	f7ff f9c6 	bl	80006ac <printTemplate>
 8001320:	e037      	b.n	8001392 <takeWifiPass+0x276>
            	} else if(page == 4) {
 8001322:	4b11      	ldr	r3, [pc, #68]	; (8001368 <takeWifiPass+0x24c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2b04      	cmp	r3, #4
 8001328:	d10a      	bne.n	8001340 <takeWifiPass+0x224>
            		cursorPosition = 16;
 800132a:	4b0e      	ldr	r3, [pc, #56]	; (8001364 <takeWifiPass+0x248>)
 800132c:	2210      	movs	r2, #16
 800132e:	601a      	str	r2, [r3, #0]
            		page = 3;
 8001330:	4b0d      	ldr	r3, [pc, #52]	; (8001368 <takeWifiPass+0x24c>)
 8001332:	2203      	movs	r2, #3
 8001334:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 3);
 8001336:	2103      	movs	r1, #3
 8001338:	2003      	movs	r0, #3
 800133a:	f7ff f9b7 	bl	80006ac <printTemplate>
 800133e:	e028      	b.n	8001392 <takeWifiPass+0x276>
            	} else if(page == 5) {
 8001340:	4b09      	ldr	r3, [pc, #36]	; (8001368 <takeWifiPass+0x24c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2b05      	cmp	r3, #5
 8001346:	d124      	bne.n	8001392 <takeWifiPass+0x276>
            		cursorPosition = 16;
 8001348:	4b06      	ldr	r3, [pc, #24]	; (8001364 <takeWifiPass+0x248>)
 800134a:	2210      	movs	r2, #16
 800134c:	601a      	str	r2, [r3, #0]
            		page = 4;
 800134e:	4b06      	ldr	r3, [pc, #24]	; (8001368 <takeWifiPass+0x24c>)
 8001350:	2204      	movs	r2, #4
 8001352:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 4);
 8001354:	2104      	movs	r1, #4
 8001356:	2003      	movs	r0, #3
 8001358:	f7ff f9a8 	bl	80006ac <printTemplate>
 800135c:	e019      	b.n	8001392 <takeWifiPass+0x276>
 800135e:	bf00      	nop
 8001360:	20000bf8 	.word	0x20000bf8
 8001364:	20000944 	.word	0x20000944
 8001368:	20000948 	.word	0x20000948
 800136c:	200009b3 	.word	0x200009b3
 8001370:	40010800 	.word	0x40010800
 8001374:	0800cd2c 	.word	0x0800cd2c
 8001378:	0800cd54 	.word	0x0800cd54
 800137c:	20000b40 	.word	0x20000b40
 8001380:	20000a5c 	.word	0x20000a5c
 8001384:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 8001388:	4b41      	ldr	r3, [pc, #260]	; (8001490 <takeWifiPass+0x374>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	3b01      	subs	r3, #1
 800138e:	4a40      	ldr	r2, [pc, #256]	; (8001490 <takeWifiPass+0x374>)
 8001390:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8001392:	20fa      	movs	r0, #250	; 0xfa
 8001394:	f007 fd4e 	bl	8008e34 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8001398:	2102      	movs	r1, #2
 800139a:	483e      	ldr	r0, [pc, #248]	; (8001494 <takeWifiPass+0x378>)
 800139c:	f008 fb1a 	bl	80099d4 <HAL_GPIO_ReadPin>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b01      	cmp	r3, #1
 80013a4:	d131      	bne.n	800140a <takeWifiPass+0x2ee>
        	wifiPass[wifiPassLoc] = getCharFromCursorPosition(realCharPos - 1);
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	3b01      	subs	r3, #1
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff faf4 	bl	8000998 <getCharFromCursorPosition>
 80013b0:	4603      	mov	r3, r0
 80013b2:	4619      	mov	r1, r3
 80013b4:	4a38      	ldr	r2, [pc, #224]	; (8001498 <takeWifiPass+0x37c>)
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	4413      	add	r3, r2
 80013ba:	460a      	mov	r2, r1
 80013bc:	701a      	strb	r2, [r3, #0]
        	eepromData[saveVal] = getPosFromChar(getCharFromCursorPosition(realCharPos - 1));
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	3b01      	subs	r3, #1
 80013c2:	4618      	mov	r0, r3
 80013c4:	f7ff fae8 	bl	8000998 <getCharFromCursorPosition>
 80013c8:	4603      	mov	r3, r0
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff faf4 	bl	80009b8 <getPosFromChar>
 80013d0:	4603      	mov	r3, r0
 80013d2:	4619      	mov	r1, r3
 80013d4:	4a31      	ldr	r2, [pc, #196]	; (800149c <takeWifiPass+0x380>)
 80013d6:	68bb      	ldr	r3, [r7, #8]
 80013d8:	4413      	add	r3, r2
 80013da:	460a      	mov	r2, r1
 80013dc:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiPass[wifiPassLoc]);
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	b2d9      	uxtb	r1, r3
 80013e2:	4a2d      	ldr	r2, [pc, #180]	; (8001498 <takeWifiPass+0x37c>)
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	4413      	add	r3, r2
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	461a      	mov	r2, r3
 80013ec:	2001      	movs	r0, #1
 80013ee:	f7ff f8ce 	bl	800058e <lcd_print_char>

            saveVal++;
 80013f2:	68bb      	ldr	r3, [r7, #8]
 80013f4:	3301      	adds	r3, #1
 80013f6:	60bb      	str	r3, [r7, #8]
            writeLoc++;
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	3301      	adds	r3, #1
 80013fc:	60fb      	str	r3, [r7, #12]
            wifiPassLoc++;
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	3301      	adds	r3, #1
 8001402:	613b      	str	r3, [r7, #16]

            HAL_Delay(250);
 8001404:	20fa      	movs	r0, #250	; 0xfa
 8001406:	f007 fd15 	bl	8008e34 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 800140a:	2104      	movs	r1, #4
 800140c:	4821      	ldr	r0, [pc, #132]	; (8001494 <takeWifiPass+0x378>)
 800140e:	f008 fae1 	bl	80099d4 <HAL_GPIO_ReadPin>
 8001412:	4603      	mov	r3, r0
 8001414:	2b01      	cmp	r3, #1
 8001416:	d12e      	bne.n	8001476 <takeWifiPass+0x35a>
            if(strlen(wifiPass) >= 1) {
 8001418:	4b1f      	ldr	r3, [pc, #124]	; (8001498 <takeWifiPass+0x37c>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	d027      	beq.n	8001470 <takeWifiPass+0x354>
            	wifiPass[wifiPassLoc] = '\0';
 8001420:	4a1d      	ldr	r2, [pc, #116]	; (8001498 <takeWifiPass+0x37c>)
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	4413      	add	r3, r2
 8001426:	2200      	movs	r2, #0
 8001428:	701a      	strb	r2, [r3, #0]

            	lcd_delete_char(1, 6+wifiPassLoc);
 800142a:	693b      	ldr	r3, [r7, #16]
 800142c:	b2db      	uxtb	r3, r3
 800142e:	3306      	adds	r3, #6
 8001430:	b2db      	uxtb	r3, r3
 8001432:	4619      	mov	r1, r3
 8001434:	2001      	movs	r0, #1
 8001436:	f7ff f8cb 	bl	80005d0 <lcd_delete_char>
            	HAL_Delay(50);
 800143a:	2032      	movs	r0, #50	; 0x32
 800143c:	f007 fcfa 	bl	8008e34 <HAL_Delay>

            	if(writeLoc > 7) {
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	2b07      	cmp	r3, #7
 8001444:	dd03      	ble.n	800144e <takeWifiPass+0x332>
            		writeLoc--;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	3b01      	subs	r3, #1
 800144a:	60fb      	str	r3, [r7, #12]
 800144c:	e004      	b.n	8001458 <takeWifiPass+0x33c>
            	} else if(writeLoc < 7) {
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	2b06      	cmp	r3, #6
 8001452:	dc01      	bgt.n	8001458 <takeWifiPass+0x33c>
            		writeLoc = 7;
 8001454:	2307      	movs	r3, #7
 8001456:	60fb      	str	r3, [r7, #12]
            	}

            	if(wifiPassLoc > 0) {
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	2b00      	cmp	r3, #0
 800145c:	dd03      	ble.n	8001466 <takeWifiPass+0x34a>
            		wifiPassLoc--;
 800145e:	693b      	ldr	r3, [r7, #16]
 8001460:	3b01      	subs	r3, #1
 8001462:	613b      	str	r3, [r7, #16]
 8001464:	e004      	b.n	8001470 <takeWifiPass+0x354>
            	} else if(wifiPassLoc < 0) {
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	2b00      	cmp	r3, #0
 800146a:	da01      	bge.n	8001470 <takeWifiPass+0x354>
            		wifiPassLoc = 0;
 800146c:	2300      	movs	r3, #0
 800146e:	613b      	str	r3, [r7, #16]
            	}
            }

            HAL_Delay(250);
 8001470:	20fa      	movs	r0, #250	; 0xfa
 8001472:	f007 fcdf 	bl	8008e34 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8001476:	4b06      	ldr	r3, [pc, #24]	; (8001490 <takeWifiPass+0x374>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	b2db      	uxtb	r3, r3
 800147c:	4619      	mov	r1, r3
 800147e:	2002      	movs	r0, #2
 8001480:	f7ff f851 	bl	8000526 <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8001484:	e66c      	b.n	8001160 <takeWifiPass+0x44>
    }
}
 8001486:	bf00      	nop
 8001488:	3718      	adds	r7, #24
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000944 	.word	0x20000944
 8001494:	40010800 	.word	0x40010800
 8001498:	20000bf8 	.word	0x20000bf8
 800149c:	20000b40 	.word	0x20000b40

080014a0 <checkSlideVal>:

int checkSlideVal(int state) {
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b082      	sub	sp, #8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
	if(state == 0) { //ssid (33)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d111      	bne.n	80014d2 <checkSlideVal+0x32>
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80014ae:	2101      	movs	r1, #1
 80014b0:	4813      	ldr	r0, [pc, #76]	; (8001500 <checkSlideVal+0x60>)
 80014b2:	f008 fa8f 	bl	80099d4 <HAL_GPIO_ReadPin>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b01      	cmp	r3, #1
 80014ba:	d101      	bne.n	80014c0 <checkSlideVal+0x20>
			return 34;
 80014bc:	2322      	movs	r3, #34	; 0x22
 80014be:	e01b      	b.n	80014f8 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80014c0:	2108      	movs	r1, #8
 80014c2:	4810      	ldr	r0, [pc, #64]	; (8001504 <checkSlideVal+0x64>)
 80014c4:	f008 fa86 	bl	80099d4 <HAL_GPIO_ReadPin>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d113      	bne.n	80014f6 <checkSlideVal+0x56>
			return 32;
 80014ce:	2320      	movs	r3, #32
 80014d0:	e012      	b.n	80014f8 <checkSlideVal+0x58>
		}
	} else { //pass (34)
		if(HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80014d2:	2101      	movs	r1, #1
 80014d4:	480a      	ldr	r0, [pc, #40]	; (8001500 <checkSlideVal+0x60>)
 80014d6:	f008 fa7d 	bl	80099d4 <HAL_GPIO_ReadPin>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b01      	cmp	r3, #1
 80014de:	d101      	bne.n	80014e4 <checkSlideVal+0x44>
			return 35;
 80014e0:	2323      	movs	r3, #35	; 0x23
 80014e2:	e009      	b.n	80014f8 <checkSlideVal+0x58>
		}

		if(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 80014e4:	2108      	movs	r1, #8
 80014e6:	4807      	ldr	r0, [pc, #28]	; (8001504 <checkSlideVal+0x64>)
 80014e8:	f008 fa74 	bl	80099d4 <HAL_GPIO_ReadPin>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d101      	bne.n	80014f6 <checkSlideVal+0x56>
			return 33;
 80014f2:	2321      	movs	r3, #33	; 0x21
 80014f4:	e000      	b.n	80014f8 <checkSlideVal+0x58>
		}
	}
	return 0;
 80014f6:	2300      	movs	r3, #0
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	3708      	adds	r7, #8
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40010800 	.word	0x40010800
 8001504:	40011000 	.word	0x40011000

08001508 <slideText>:

void slideText(const char* text, int startPos, int startLine, int state) {
 8001508:	b580      	push	{r7, lr}
 800150a:	b08a      	sub	sp, #40	; 0x28
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
 8001514:	603b      	str	r3, [r7, #0]
	uint8_t uzunluk = strlen(text);
 8001516:	68f8      	ldr	r0, [r7, #12]
 8001518:	f7fe fe84 	bl	8000224 <strlen>
 800151c:	4603      	mov	r3, r0
 800151e:	75fb      	strb	r3, [r7, #23]
	int mainLoopVal = 1;
 8001520:	2301      	movs	r3, #1
 8001522:	627b      	str	r3, [r7, #36]	; 0x24

	while(mainLoopVal == 1) {
 8001524:	e08a      	b.n	800163c <slideText+0x134>
		if(checkSlideVal(state) > 0) {
 8001526:	6838      	ldr	r0, [r7, #0]
 8001528:	f7ff ffba 	bl	80014a0 <checkSlideVal>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	dd07      	ble.n	8001542 <slideText+0x3a>
			menuSayac = checkSlideVal(state);
 8001532:	6838      	ldr	r0, [r7, #0]
 8001534:	f7ff ffb4 	bl	80014a0 <checkSlideVal>
 8001538:	4603      	mov	r3, r0
 800153a:	b2da      	uxtb	r2, r3
 800153c:	4b44      	ldr	r3, [pc, #272]	; (8001650 <slideText+0x148>)
 800153e:	701a      	strb	r2, [r3, #0]
			break;
 8001540:	e081      	b.n	8001646 <slideText+0x13e>
		}

		for(int z=0; z < uzunluk; z++) {
 8001542:	2300      	movs	r3, #0
 8001544:	623b      	str	r3, [r7, #32]
 8001546:	e075      	b.n	8001634 <slideText+0x12c>
			if(checkSlideVal(state) > 0) {
 8001548:	6838      	ldr	r0, [r7, #0]
 800154a:	f7ff ffa9 	bl	80014a0 <checkSlideVal>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	dd09      	ble.n	8001568 <slideText+0x60>
				menuSayac = checkSlideVal(state);
 8001554:	6838      	ldr	r0, [r7, #0]
 8001556:	f7ff ffa3 	bl	80014a0 <checkSlideVal>
 800155a:	4603      	mov	r3, r0
 800155c:	b2da      	uxtb	r2, r3
 800155e:	4b3c      	ldr	r3, [pc, #240]	; (8001650 <slideText+0x148>)
 8001560:	701a      	strb	r2, [r3, #0]
				mainLoopVal = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	627b      	str	r3, [r7, #36]	; 0x24
				break;
 8001566:	e069      	b.n	800163c <slideText+0x134>
			}
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 8001568:	68ba      	ldr	r2, [r7, #8]
 800156a:	6a3b      	ldr	r3, [r7, #32]
 800156c:	4413      	add	r3, r2
 800156e:	61fb      	str	r3, [r7, #28]
 8001570:	e029      	b.n	80015c6 <slideText+0xbe>
				if(checkSlideVal(state) > 0) {
 8001572:	6838      	ldr	r0, [r7, #0]
 8001574:	f7ff ff94 	bl	80014a0 <checkSlideVal>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	dd0b      	ble.n	8001596 <slideText+0x8e>
					menuSayac = checkSlideVal(state);
 800157e:	6838      	ldr	r0, [r7, #0]
 8001580:	f7ff ff8e 	bl	80014a0 <checkSlideVal>
 8001584:	4603      	mov	r3, r0
 8001586:	b2da      	uxtb	r2, r3
 8001588:	4b31      	ldr	r3, [pc, #196]	; (8001650 <slideText+0x148>)
 800158a:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 800158c:	7dfb      	ldrb	r3, [r7, #23]
 800158e:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 8001590:	2300      	movs	r3, #0
 8001592:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 8001594:	e01d      	b.n	80015d2 <slideText+0xca>
				}
				lcd_print_char(startLine, i-z, text[i-startPos]);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	b2d8      	uxtb	r0, r3
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	b2da      	uxtb	r2, r3
 800159e:	6a3b      	ldr	r3, [r7, #32]
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	b2d9      	uxtb	r1, r3
 80015a6:	69fa      	ldr	r2, [r7, #28]
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	1ad3      	subs	r3, r2, r3
 80015ac:	461a      	mov	r2, r3
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	4413      	add	r3, r2
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	461a      	mov	r2, r3
 80015b6:	f7fe ffea 	bl	800058e <lcd_print_char>
				HAL_Delay(30);
 80015ba:	201e      	movs	r0, #30
 80015bc:	f007 fc3a 	bl	8008e34 <HAL_Delay>
			for(int i=startPos + z; i < uzunluk + startPos; i++) {
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	3301      	adds	r3, #1
 80015c4:	61fb      	str	r3, [r7, #28]
 80015c6:	7dfa      	ldrb	r2, [r7, #23]
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	4413      	add	r3, r2
 80015cc:	69fa      	ldr	r2, [r7, #28]
 80015ce:	429a      	cmp	r2, r3
 80015d0:	dbcf      	blt.n	8001572 <slideText+0x6a>
			}

			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 80015d2:	7dfb      	ldrb	r3, [r7, #23]
 80015d4:	3b01      	subs	r3, #1
 80015d6:	61bb      	str	r3, [r7, #24]
 80015d8:	e023      	b.n	8001622 <slideText+0x11a>
				if(checkSlideVal(state) > 0) {
 80015da:	6838      	ldr	r0, [r7, #0]
 80015dc:	f7ff ff60 	bl	80014a0 <checkSlideVal>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	dd0b      	ble.n	80015fe <slideText+0xf6>
					menuSayac = checkSlideVal(state);
 80015e6:	6838      	ldr	r0, [r7, #0]
 80015e8:	f7ff ff5a 	bl	80014a0 <checkSlideVal>
 80015ec:	4603      	mov	r3, r0
 80015ee:	b2da      	uxtb	r2, r3
 80015f0:	4b17      	ldr	r3, [pc, #92]	; (8001650 <slideText+0x148>)
 80015f2:	701a      	strb	r2, [r3, #0]
					z = uzunluk;
 80015f4:	7dfb      	ldrb	r3, [r7, #23]
 80015f6:	623b      	str	r3, [r7, #32]
					mainLoopVal = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80015fc:	e017      	b.n	800162e <slideText+0x126>
				}
			     if(j >= startPos) {
 80015fe:	69ba      	ldr	r2, [r7, #24]
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	429a      	cmp	r2, r3
 8001604:	db0a      	blt.n	800161c <slideText+0x114>
			    	 lcd_print_char(startLine, j, ' ');
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	b2db      	uxtb	r3, r3
 800160a:	69ba      	ldr	r2, [r7, #24]
 800160c:	b2d1      	uxtb	r1, r2
 800160e:	2220      	movs	r2, #32
 8001610:	4618      	mov	r0, r3
 8001612:	f7fe ffbc 	bl	800058e <lcd_print_char>
			    	 HAL_Delay(30);
 8001616:	201e      	movs	r0, #30
 8001618:	f007 fc0c 	bl	8008e34 <HAL_Delay>
			for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 800161c:	69bb      	ldr	r3, [r7, #24]
 800161e:	3b01      	subs	r3, #1
 8001620:	61bb      	str	r3, [r7, #24]
 8001622:	7dfa      	ldrb	r2, [r7, #23]
 8001624:	6a3b      	ldr	r3, [r7, #32]
 8001626:	1ad3      	subs	r3, r2, r3
 8001628:	69ba      	ldr	r2, [r7, #24]
 800162a:	429a      	cmp	r2, r3
 800162c:	dad5      	bge.n	80015da <slideText+0xd2>
		for(int z=0; z < uzunluk; z++) {
 800162e:	6a3b      	ldr	r3, [r7, #32]
 8001630:	3301      	adds	r3, #1
 8001632:	623b      	str	r3, [r7, #32]
 8001634:	7dfb      	ldrb	r3, [r7, #23]
 8001636:	6a3a      	ldr	r2, [r7, #32]
 8001638:	429a      	cmp	r2, r3
 800163a:	db85      	blt.n	8001548 <slideText+0x40>
	while(mainLoopVal == 1) {
 800163c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163e:	2b01      	cmp	r3, #1
 8001640:	f43f af71 	beq.w	8001526 <slideText+0x1e>
			     }
			}
		}
	}
}
 8001644:	bf00      	nop
 8001646:	bf00      	nop
 8001648:	3728      	adds	r7, #40	; 0x28
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}
 800164e:	bf00      	nop
 8001650:	20000c10 	.word	0x20000c10

08001654 <menu>:

void menu() {
 8001654:	b580      	push	{r7, lr}
 8001656:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001658:	2101      	movs	r1, #1
 800165a:	488f      	ldr	r0, [pc, #572]	; (8001898 <menu+0x244>)
 800165c:	f008 f9ba 	bl	80099d4 <HAL_GPIO_ReadPin>
 8001660:	4603      	mov	r3, r0
 8001662:	2b01      	cmp	r3, #1
 8001664:	f040 808e 	bne.w	8001784 <menu+0x130>
 8001668:	4b8c      	ldr	r3, [pc, #560]	; (800189c <menu+0x248>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	f083 0301 	eor.w	r3, r3, #1
 8001670:	b2db      	uxtb	r3, r3
 8001672:	2b00      	cmp	r3, #0
 8001674:	f000 8086 	beq.w	8001784 <menu+0x130>
		menuSayac = menuSayac+1;
 8001678:	4b89      	ldr	r3, [pc, #548]	; (80018a0 <menu+0x24c>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	3301      	adds	r3, #1
 800167e:	b2da      	uxtb	r2, r3
 8001680:	4b87      	ldr	r3, [pc, #540]	; (80018a0 <menu+0x24c>)
 8001682:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 8001684:	4b86      	ldr	r3, [pc, #536]	; (80018a0 <menu+0x24c>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b24      	cmp	r3, #36	; 0x24
 800168a:	d102      	bne.n	8001692 <menu+0x3e>
			menuSayac = 1;
 800168c:	4b84      	ldr	r3, [pc, #528]	; (80018a0 <menu+0x24c>)
 800168e:	2201      	movs	r2, #1
 8001690:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 8001692:	4b83      	ldr	r3, [pc, #524]	; (80018a0 <menu+0x24c>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b12      	cmp	r3, #18
 8001698:	d106      	bne.n	80016a8 <menu+0x54>
 800169a:	4b82      	ldr	r3, [pc, #520]	; (80018a4 <menu+0x250>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d102      	bne.n	80016a8 <menu+0x54>
			menuSayac = 21;
 80016a2:	4b7f      	ldr	r3, [pc, #508]	; (80018a0 <menu+0x24c>)
 80016a4:	2215      	movs	r2, #21
 80016a6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 80016a8:	4b7d      	ldr	r3, [pc, #500]	; (80018a0 <menu+0x24c>)
 80016aa:	781b      	ldrb	r3, [r3, #0]
 80016ac:	2b08      	cmp	r3, #8
 80016ae:	d106      	bne.n	80016be <menu+0x6a>
 80016b0:	4b7d      	ldr	r3, [pc, #500]	; (80018a8 <menu+0x254>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d102      	bne.n	80016be <menu+0x6a>
			menuSayac = 16;
 80016b8:	4b79      	ldr	r3, [pc, #484]	; (80018a0 <menu+0x24c>)
 80016ba:	2210      	movs	r2, #16
 80016bc:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 80016be:	4b78      	ldr	r3, [pc, #480]	; (80018a0 <menu+0x24c>)
 80016c0:	781b      	ldrb	r3, [r3, #0]
 80016c2:	2b0d      	cmp	r3, #13
 80016c4:	d106      	bne.n	80016d4 <menu+0x80>
 80016c6:	4b78      	ldr	r3, [pc, #480]	; (80018a8 <menu+0x254>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d102      	bne.n	80016d4 <menu+0x80>
			menuSayac = 16;
 80016ce:	4b74      	ldr	r3, [pc, #464]	; (80018a0 <menu+0x24c>)
 80016d0:	2210      	movs	r2, #16
 80016d2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 80016d4:	4b72      	ldr	r3, [pc, #456]	; (80018a0 <menu+0x24c>)
 80016d6:	781b      	ldrb	r3, [r3, #0]
 80016d8:	2b09      	cmp	r3, #9
 80016da:	d106      	bne.n	80016ea <menu+0x96>
 80016dc:	4b72      	ldr	r3, [pc, #456]	; (80018a8 <menu+0x254>)
 80016de:	781b      	ldrb	r3, [r3, #0]
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d102      	bne.n	80016ea <menu+0x96>
			menuSayac = 13;
 80016e4:	4b6e      	ldr	r3, [pc, #440]	; (80018a0 <menu+0x24c>)
 80016e6:	220d      	movs	r2, #13
 80016e8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 80016ea:	4b6d      	ldr	r3, [pc, #436]	; (80018a0 <menu+0x24c>)
 80016ec:	781b      	ldrb	r3, [r3, #0]
 80016ee:	2b0a      	cmp	r3, #10
 80016f0:	d10a      	bne.n	8001708 <menu+0xb4>
 80016f2:	4b6e      	ldr	r3, [pc, #440]	; (80018ac <menu+0x258>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d003      	beq.n	8001702 <menu+0xae>
 80016fa:	4b6c      	ldr	r3, [pc, #432]	; (80018ac <menu+0x258>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d102      	bne.n	8001708 <menu+0xb4>
			menuSayac = 11;
 8001702:	4b67      	ldr	r3, [pc, #412]	; (80018a0 <menu+0x24c>)
 8001704:	220b      	movs	r2, #11
 8001706:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 8001708:	4b65      	ldr	r3, [pc, #404]	; (80018a0 <menu+0x24c>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	2b0c      	cmp	r3, #12
 800170e:	d10e      	bne.n	800172e <menu+0xda>
 8001710:	4b67      	ldr	r3, [pc, #412]	; (80018b0 <menu+0x25c>)
 8001712:	781b      	ldrb	r3, [r3, #0]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d003      	beq.n	8001720 <menu+0xcc>
 8001718:	4b65      	ldr	r3, [pc, #404]	; (80018b0 <menu+0x25c>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b02      	cmp	r3, #2
 800171e:	d106      	bne.n	800172e <menu+0xda>
 8001720:	4b61      	ldr	r3, [pc, #388]	; (80018a8 <menu+0x254>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d102      	bne.n	800172e <menu+0xda>
			menuSayac = 16;
 8001728:	4b5d      	ldr	r3, [pc, #372]	; (80018a0 <menu+0x24c>)
 800172a:	2210      	movs	r2, #16
 800172c:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 800172e:	4b5c      	ldr	r3, [pc, #368]	; (80018a0 <menu+0x24c>)
 8001730:	781b      	ldrb	r3, [r3, #0]
 8001732:	2b0c      	cmp	r3, #12
 8001734:	d10e      	bne.n	8001754 <menu+0x100>
 8001736:	4b5e      	ldr	r3, [pc, #376]	; (80018b0 <menu+0x25c>)
 8001738:	781b      	ldrb	r3, [r3, #0]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d003      	beq.n	8001746 <menu+0xf2>
 800173e:	4b5c      	ldr	r3, [pc, #368]	; (80018b0 <menu+0x25c>)
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	2b02      	cmp	r3, #2
 8001744:	d106      	bne.n	8001754 <menu+0x100>
 8001746:	4b58      	ldr	r3, [pc, #352]	; (80018a8 <menu+0x254>)
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	2b03      	cmp	r3, #3
 800174c:	d102      	bne.n	8001754 <menu+0x100>
			menuSayac = 13;
 800174e:	4b54      	ldr	r3, [pc, #336]	; (80018a0 <menu+0x24c>)
 8001750:	220d      	movs	r2, #13
 8001752:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001754:	4b52      	ldr	r3, [pc, #328]	; (80018a0 <menu+0x24c>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	2b0f      	cmp	r3, #15
 800175a:	d106      	bne.n	800176a <menu+0x116>
 800175c:	4b55      	ldr	r3, [pc, #340]	; (80018b4 <menu+0x260>)
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	2b01      	cmp	r3, #1
 8001762:	d102      	bne.n	800176a <menu+0x116>
			menuSayac = 16;
 8001764:	4b4e      	ldr	r3, [pc, #312]	; (80018a0 <menu+0x24c>)
 8001766:	2210      	movs	r2, #16
 8001768:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 800176a:	4b4d      	ldr	r3, [pc, #308]	; (80018a0 <menu+0x24c>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	2b18      	cmp	r3, #24
 8001770:	d106      	bne.n	8001780 <menu+0x12c>
 8001772:	4b4c      	ldr	r3, [pc, #304]	; (80018a4 <menu+0x250>)
 8001774:	781b      	ldrb	r3, [r3, #0]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d102      	bne.n	8001780 <menu+0x12c>
			menuSayac = 26;
 800177a:	4b49      	ldr	r3, [pc, #292]	; (80018a0 <menu+0x24c>)
 800177c:	221a      	movs	r2, #26
 800177e:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001780:	f004 fcb0 	bl	80060e4 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001784:	2108      	movs	r1, #8
 8001786:	484c      	ldr	r0, [pc, #304]	; (80018b8 <menu+0x264>)
 8001788:	f008 f924 	bl	80099d4 <HAL_GPIO_ReadPin>
 800178c:	4603      	mov	r3, r0
 800178e:	2b01      	cmp	r3, #1
 8001790:	d175      	bne.n	800187e <menu+0x22a>
 8001792:	4b42      	ldr	r3, [pc, #264]	; (800189c <menu+0x248>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	f083 0301 	eor.w	r3, r3, #1
 800179a:	b2db      	uxtb	r3, r3
 800179c:	2b00      	cmp	r3, #0
 800179e:	d06e      	beq.n	800187e <menu+0x22a>
		if (menuSayac <= 1) {
 80017a0:	4b3f      	ldr	r3, [pc, #252]	; (80018a0 <menu+0x24c>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	2b01      	cmp	r3, #1
 80017a6:	d802      	bhi.n	80017ae <menu+0x15a>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 80017a8:	4b3d      	ldr	r3, [pc, #244]	; (80018a0 <menu+0x24c>)
 80017aa:	2224      	movs	r2, #36	; 0x24
 80017ac:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 80017ae:	4b3c      	ldr	r3, [pc, #240]	; (80018a0 <menu+0x24c>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	3b01      	subs	r3, #1
 80017b4:	b2da      	uxtb	r2, r3
 80017b6:	4b3a      	ldr	r3, [pc, #232]	; (80018a0 <menu+0x24c>)
 80017b8:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 80017ba:	4b39      	ldr	r3, [pc, #228]	; (80018a0 <menu+0x24c>)
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	2b14      	cmp	r3, #20
 80017c0:	d106      	bne.n	80017d0 <menu+0x17c>
 80017c2:	4b38      	ldr	r3, [pc, #224]	; (80018a4 <menu+0x250>)
 80017c4:	781b      	ldrb	r3, [r3, #0]
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d102      	bne.n	80017d0 <menu+0x17c>
			menuSayac = 17;
 80017ca:	4b35      	ldr	r3, [pc, #212]	; (80018a0 <menu+0x24c>)
 80017cc:	2211      	movs	r2, #17
 80017ce:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 80017d0:	4b33      	ldr	r3, [pc, #204]	; (80018a0 <menu+0x24c>)
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	2b0f      	cmp	r3, #15
 80017d6:	d106      	bne.n	80017e6 <menu+0x192>
 80017d8:	4b33      	ldr	r3, [pc, #204]	; (80018a8 <menu+0x254>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d102      	bne.n	80017e6 <menu+0x192>
			menuSayac = 7;
 80017e0:	4b2f      	ldr	r3, [pc, #188]	; (80018a0 <menu+0x24c>)
 80017e2:	2207      	movs	r2, #7
 80017e4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 80017e6:	4b2e      	ldr	r3, [pc, #184]	; (80018a0 <menu+0x24c>)
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	2b0f      	cmp	r3, #15
 80017ec:	d106      	bne.n	80017fc <menu+0x1a8>
 80017ee:	4b2e      	ldr	r3, [pc, #184]	; (80018a8 <menu+0x254>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	2b01      	cmp	r3, #1
 80017f4:	d102      	bne.n	80017fc <menu+0x1a8>
			menuSayac = 12;
 80017f6:	4b2a      	ldr	r3, [pc, #168]	; (80018a0 <menu+0x24c>)
 80017f8:	220c      	movs	r2, #12
 80017fa:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 80017fc:	4b28      	ldr	r3, [pc, #160]	; (80018a0 <menu+0x24c>)
 80017fe:	781b      	ldrb	r3, [r3, #0]
 8001800:	2b0c      	cmp	r3, #12
 8001802:	d106      	bne.n	8001812 <menu+0x1be>
 8001804:	4b28      	ldr	r3, [pc, #160]	; (80018a8 <menu+0x254>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	2b02      	cmp	r3, #2
 800180a:	d102      	bne.n	8001812 <menu+0x1be>
			menuSayac = 8;
 800180c:	4b24      	ldr	r3, [pc, #144]	; (80018a0 <menu+0x24c>)
 800180e:	2208      	movs	r2, #8
 8001810:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001812:	4b23      	ldr	r3, [pc, #140]	; (80018a0 <menu+0x24c>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	2b0a      	cmp	r3, #10
 8001818:	d10a      	bne.n	8001830 <menu+0x1dc>
 800181a:	4b24      	ldr	r3, [pc, #144]	; (80018ac <menu+0x258>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	2b01      	cmp	r3, #1
 8001820:	d003      	beq.n	800182a <menu+0x1d6>
 8001822:	4b22      	ldr	r3, [pc, #136]	; (80018ac <menu+0x258>)
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	2b02      	cmp	r3, #2
 8001828:	d102      	bne.n	8001830 <menu+0x1dc>
			menuSayac = 9;
 800182a:	4b1d      	ldr	r3, [pc, #116]	; (80018a0 <menu+0x24c>)
 800182c:	2209      	movs	r2, #9
 800182e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 8001830:	4b1b      	ldr	r3, [pc, #108]	; (80018a0 <menu+0x24c>)
 8001832:	781b      	ldrb	r3, [r3, #0]
 8001834:	2b0c      	cmp	r3, #12
 8001836:	d10a      	bne.n	800184e <menu+0x1fa>
 8001838:	4b1d      	ldr	r3, [pc, #116]	; (80018b0 <menu+0x25c>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b01      	cmp	r3, #1
 800183e:	d003      	beq.n	8001848 <menu+0x1f4>
 8001840:	4b1b      	ldr	r3, [pc, #108]	; (80018b0 <menu+0x25c>)
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	2b02      	cmp	r3, #2
 8001846:	d102      	bne.n	800184e <menu+0x1fa>
			menuSayac = 11;
 8001848:	4b15      	ldr	r3, [pc, #84]	; (80018a0 <menu+0x24c>)
 800184a:	220b      	movs	r2, #11
 800184c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 800184e:	4b14      	ldr	r3, [pc, #80]	; (80018a0 <menu+0x24c>)
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	2b0f      	cmp	r3, #15
 8001854:	d106      	bne.n	8001864 <menu+0x210>
 8001856:	4b17      	ldr	r3, [pc, #92]	; (80018b4 <menu+0x260>)
 8001858:	781b      	ldrb	r3, [r3, #0]
 800185a:	2b01      	cmp	r3, #1
 800185c:	d102      	bne.n	8001864 <menu+0x210>
			menuSayac = 14;
 800185e:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <menu+0x24c>)
 8001860:	220e      	movs	r2, #14
 8001862:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 8001864:	4b0e      	ldr	r3, [pc, #56]	; (80018a0 <menu+0x24c>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b19      	cmp	r3, #25
 800186a:	d106      	bne.n	800187a <menu+0x226>
 800186c:	4b0d      	ldr	r3, [pc, #52]	; (80018a4 <menu+0x250>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d102      	bne.n	800187a <menu+0x226>
			menuSayac = 23;
 8001874:	4b0a      	ldr	r3, [pc, #40]	; (80018a0 <menu+0x24c>)
 8001876:	2217      	movs	r2, #23
 8001878:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 800187a:	f004 fc33 	bl	80060e4 <bekle>
	}

	if (menuSayac == 0) {
 800187e:	4b08      	ldr	r3, [pc, #32]	; (80018a0 <menu+0x24c>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d134      	bne.n	80018f0 <menu+0x29c>
		if(dilSecim == 0) {
 8001886:	4b0d      	ldr	r3, [pc, #52]	; (80018bc <menu+0x268>)
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d122      	bne.n	80018d4 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 800188e:	4a0c      	ldr	r2, [pc, #48]	; (80018c0 <menu+0x26c>)
 8001890:	2101      	movs	r1, #1
 8001892:	2001      	movs	r0, #1
 8001894:	e016      	b.n	80018c4 <menu+0x270>
 8001896:	bf00      	nop
 8001898:	40010800 	.word	0x40010800
 800189c:	20000c3f 	.word	0x20000c3f
 80018a0:	20000c10 	.word	0x20000c10
 80018a4:	20000c1f 	.word	0x20000c1f
 80018a8:	20000c18 	.word	0x20000c18
 80018ac:	20000c19 	.word	0x20000c19
 80018b0:	20000c1a 	.word	0x20000c1a
 80018b4:	20000c1b 	.word	0x20000c1b
 80018b8:	40011000 	.word	0x40011000
 80018bc:	20000c31 	.word	0x20000c31
 80018c0:	0800cd68 	.word	0x0800cd68
 80018c4:	f7fe fe4e 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 80018c8:	4a94      	ldr	r2, [pc, #592]	; (8001b1c <menu+0x4c8>)
 80018ca:	2101      	movs	r1, #1
 80018cc:	2002      	movs	r0, #2
 80018ce:	f7fe fe49 	bl	8000564 <lcd_print>
 80018d2:	e00d      	b.n	80018f0 <menu+0x29c>
		} else if(dilSecim  ==  1) {
 80018d4:	4b92      	ldr	r3, [pc, #584]	; (8001b20 <menu+0x4cc>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d109      	bne.n	80018f0 <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 80018dc:	4a91      	ldr	r2, [pc, #580]	; (8001b24 <menu+0x4d0>)
 80018de:	2101      	movs	r1, #1
 80018e0:	2001      	movs	r0, #1
 80018e2:	f7fe fe3f 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 80018e6:	4a90      	ldr	r2, [pc, #576]	; (8001b28 <menu+0x4d4>)
 80018e8:	2101      	movs	r1, #1
 80018ea:	2002      	movs	r0, #2
 80018ec:	f7fe fe3a 	bl	8000564 <lcd_print>
		}
	}

	if (menuSayac == 1) {
 80018f0:	4b8e      	ldr	r3, [pc, #568]	; (8001b2c <menu+0x4d8>)
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	2b01      	cmp	r3, #1
 80018f6:	f040 82b5 	bne.w	8001e64 <menu+0x810>
		if(dilSecim == 0) {
 80018fa:	4b89      	ldr	r3, [pc, #548]	; (8001b20 <menu+0x4cc>)
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d105      	bne.n	800190e <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 8001902:	4a8b      	ldr	r2, [pc, #556]	; (8001b30 <menu+0x4dc>)
 8001904:	2101      	movs	r1, #1
 8001906:	2001      	movs	r0, #1
 8001908:	f7fe fe2c 	bl	8000564 <lcd_print>
 800190c:	e008      	b.n	8001920 <menu+0x2cc>
		} else if(dilSecim == 1) {
 800190e:	4b84      	ldr	r3, [pc, #528]	; (8001b20 <menu+0x4cc>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	2b01      	cmp	r3, #1
 8001914:	d104      	bne.n	8001920 <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 8001916:	4a87      	ldr	r2, [pc, #540]	; (8001b34 <menu+0x4e0>)
 8001918:	2101      	movs	r1, #1
 800191a:	2001      	movs	r0, #1
 800191c:	f7fe fe22 	bl	8000564 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 8001920:	4b85      	ldr	r3, [pc, #532]	; (8001b38 <menu+0x4e4>)
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d123      	bne.n	8001970 <menu+0x31c>
			if(dilSecim == 0) {
 8001928:	4b7d      	ldr	r3, [pc, #500]	; (8001b20 <menu+0x4cc>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d105      	bne.n	800193c <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 8001930:	4a82      	ldr	r2, [pc, #520]	; (8001b3c <menu+0x4e8>)
 8001932:	2101      	movs	r1, #1
 8001934:	2002      	movs	r0, #2
 8001936:	f7fe fe15 	bl	8000564 <lcd_print>
 800193a:	e008      	b.n	800194e <menu+0x2fa>

			} else if(dilSecim == 1) {
 800193c:	4b78      	ldr	r3, [pc, #480]	; (8001b20 <menu+0x4cc>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d104      	bne.n	800194e <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 8001944:	4a7e      	ldr	r2, [pc, #504]	; (8001b40 <menu+0x4ec>)
 8001946:	2101      	movs	r1, #1
 8001948:	2002      	movs	r0, #2
 800194a:	f7fe fe0b 	bl	8000564 <lcd_print>
			}
			lcd_print(2, 15, "   ");
 800194e:	4a7d      	ldr	r2, [pc, #500]	; (8001b44 <menu+0x4f0>)
 8001950:	210f      	movs	r1, #15
 8001952:	2002      	movs	r0, #2
 8001954:	f7fe fe06 	bl	8000564 <lcd_print>
			itoa(hataKayit1, snum, 10);
 8001958:	4b7b      	ldr	r3, [pc, #492]	; (8001b48 <menu+0x4f4>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	220a      	movs	r2, #10
 800195e:	497b      	ldr	r1, [pc, #492]	; (8001b4c <menu+0x4f8>)
 8001960:	4618      	mov	r0, r3
 8001962:	f00b f82d 	bl	800c9c0 <itoa>
			lcd_print(2, 14, snum);
 8001966:	4a79      	ldr	r2, [pc, #484]	; (8001b4c <menu+0x4f8>)
 8001968:	210e      	movs	r1, #14
 800196a:	2002      	movs	r0, #2
 800196c:	f7fe fdfa 	bl	8000564 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 8001970:	4b71      	ldr	r3, [pc, #452]	; (8001b38 <menu+0x4e4>)
 8001972:	781b      	ldrb	r3, [r3, #0]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d123      	bne.n	80019c0 <menu+0x36c>
			if(dilSecim == 0) {
 8001978:	4b69      	ldr	r3, [pc, #420]	; (8001b20 <menu+0x4cc>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d105      	bne.n	800198c <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 8001980:	4a73      	ldr	r2, [pc, #460]	; (8001b50 <menu+0x4fc>)
 8001982:	2101      	movs	r1, #1
 8001984:	2002      	movs	r0, #2
 8001986:	f7fe fded 	bl	8000564 <lcd_print>
 800198a:	e008      	b.n	800199e <menu+0x34a>
			} else if(dilSecim == 1) {
 800198c:	4b64      	ldr	r3, [pc, #400]	; (8001b20 <menu+0x4cc>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	2b01      	cmp	r3, #1
 8001992:	d104      	bne.n	800199e <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 8001994:	4a6f      	ldr	r2, [pc, #444]	; (8001b54 <menu+0x500>)
 8001996:	2101      	movs	r1, #1
 8001998:	2002      	movs	r0, #2
 800199a:	f7fe fde3 	bl	8000564 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800199e:	4a6e      	ldr	r2, [pc, #440]	; (8001b58 <menu+0x504>)
 80019a0:	210f      	movs	r1, #15
 80019a2:	2002      	movs	r0, #2
 80019a4:	f7fe fdde 	bl	8000564 <lcd_print>
			itoa(hataKayit2, snum, 10);
 80019a8:	4b6c      	ldr	r3, [pc, #432]	; (8001b5c <menu+0x508>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	220a      	movs	r2, #10
 80019ae:	4967      	ldr	r1, [pc, #412]	; (8001b4c <menu+0x4f8>)
 80019b0:	4618      	mov	r0, r3
 80019b2:	f00b f805 	bl	800c9c0 <itoa>
			lcd_print(2, 14, snum);
 80019b6:	4a65      	ldr	r2, [pc, #404]	; (8001b4c <menu+0x4f8>)
 80019b8:	210e      	movs	r1, #14
 80019ba:	2002      	movs	r0, #2
 80019bc:	f7fe fdd2 	bl	8000564 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 80019c0:	4b5d      	ldr	r3, [pc, #372]	; (8001b38 <menu+0x4e4>)
 80019c2:	781b      	ldrb	r3, [r3, #0]
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	d123      	bne.n	8001a10 <menu+0x3bc>
			if(dilSecim == 0) {
 80019c8:	4b55      	ldr	r3, [pc, #340]	; (8001b20 <menu+0x4cc>)
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d105      	bne.n	80019dc <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 80019d0:	4a63      	ldr	r2, [pc, #396]	; (8001b60 <menu+0x50c>)
 80019d2:	2101      	movs	r1, #1
 80019d4:	2002      	movs	r0, #2
 80019d6:	f7fe fdc5 	bl	8000564 <lcd_print>
 80019da:	e008      	b.n	80019ee <menu+0x39a>
			} else if(dilSecim == 1) {
 80019dc:	4b50      	ldr	r3, [pc, #320]	; (8001b20 <menu+0x4cc>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d104      	bne.n	80019ee <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 80019e4:	4a5f      	ldr	r2, [pc, #380]	; (8001b64 <menu+0x510>)
 80019e6:	2101      	movs	r1, #1
 80019e8:	2002      	movs	r0, #2
 80019ea:	f7fe fdbb 	bl	8000564 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80019ee:	4a5a      	ldr	r2, [pc, #360]	; (8001b58 <menu+0x504>)
 80019f0:	210f      	movs	r1, #15
 80019f2:	2002      	movs	r0, #2
 80019f4:	f7fe fdb6 	bl	8000564 <lcd_print>
			itoa(hataKayit3, snum, 10);
 80019f8:	4b5b      	ldr	r3, [pc, #364]	; (8001b68 <menu+0x514>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	220a      	movs	r2, #10
 80019fe:	4953      	ldr	r1, [pc, #332]	; (8001b4c <menu+0x4f8>)
 8001a00:	4618      	mov	r0, r3
 8001a02:	f00a ffdd 	bl	800c9c0 <itoa>
			lcd_print(2, 14, snum);
 8001a06:	4a51      	ldr	r2, [pc, #324]	; (8001b4c <menu+0x4f8>)
 8001a08:	210e      	movs	r1, #14
 8001a0a:	2002      	movs	r0, #2
 8001a0c:	f7fe fdaa 	bl	8000564 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 8001a10:	4b49      	ldr	r3, [pc, #292]	; (8001b38 <menu+0x4e4>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	2b03      	cmp	r3, #3
 8001a16:	d123      	bne.n	8001a60 <menu+0x40c>
			if(dilSecim == 0) {
 8001a18:	4b41      	ldr	r3, [pc, #260]	; (8001b20 <menu+0x4cc>)
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d105      	bne.n	8001a2c <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 8001a20:	4a52      	ldr	r2, [pc, #328]	; (8001b6c <menu+0x518>)
 8001a22:	2101      	movs	r1, #1
 8001a24:	2002      	movs	r0, #2
 8001a26:	f7fe fd9d 	bl	8000564 <lcd_print>
 8001a2a:	e008      	b.n	8001a3e <menu+0x3ea>
			} else if(dilSecim == 1) {
 8001a2c:	4b3c      	ldr	r3, [pc, #240]	; (8001b20 <menu+0x4cc>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	2b01      	cmp	r3, #1
 8001a32:	d104      	bne.n	8001a3e <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 8001a34:	4a4e      	ldr	r2, [pc, #312]	; (8001b70 <menu+0x51c>)
 8001a36:	2101      	movs	r1, #1
 8001a38:	2002      	movs	r0, #2
 8001a3a:	f7fe fd93 	bl	8000564 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001a3e:	4a46      	ldr	r2, [pc, #280]	; (8001b58 <menu+0x504>)
 8001a40:	210f      	movs	r1, #15
 8001a42:	2002      	movs	r0, #2
 8001a44:	f7fe fd8e 	bl	8000564 <lcd_print>
			itoa(hataKayit4, snum, 10);
 8001a48:	4b4a      	ldr	r3, [pc, #296]	; (8001b74 <menu+0x520>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	220a      	movs	r2, #10
 8001a4e:	493f      	ldr	r1, [pc, #252]	; (8001b4c <menu+0x4f8>)
 8001a50:	4618      	mov	r0, r3
 8001a52:	f00a ffb5 	bl	800c9c0 <itoa>
			lcd_print(2, 14, snum);
 8001a56:	4a3d      	ldr	r2, [pc, #244]	; (8001b4c <menu+0x4f8>)
 8001a58:	210e      	movs	r1, #14
 8001a5a:	2002      	movs	r0, #2
 8001a5c:	f7fe fd82 	bl	8000564 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 8001a60:	4b35      	ldr	r3, [pc, #212]	; (8001b38 <menu+0x4e4>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	2b04      	cmp	r3, #4
 8001a66:	d123      	bne.n	8001ab0 <menu+0x45c>
			if(dilSecim == 0) {
 8001a68:	4b2d      	ldr	r3, [pc, #180]	; (8001b20 <menu+0x4cc>)
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d105      	bne.n	8001a7c <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 8001a70:	4a41      	ldr	r2, [pc, #260]	; (8001b78 <menu+0x524>)
 8001a72:	2101      	movs	r1, #1
 8001a74:	2002      	movs	r0, #2
 8001a76:	f7fe fd75 	bl	8000564 <lcd_print>
 8001a7a:	e008      	b.n	8001a8e <menu+0x43a>
			} else if(dilSecim == 1) {
 8001a7c:	4b28      	ldr	r3, [pc, #160]	; (8001b20 <menu+0x4cc>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d104      	bne.n	8001a8e <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 8001a84:	4a3d      	ldr	r2, [pc, #244]	; (8001b7c <menu+0x528>)
 8001a86:	2101      	movs	r1, #1
 8001a88:	2002      	movs	r0, #2
 8001a8a:	f7fe fd6b 	bl	8000564 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001a8e:	4a32      	ldr	r2, [pc, #200]	; (8001b58 <menu+0x504>)
 8001a90:	210f      	movs	r1, #15
 8001a92:	2002      	movs	r0, #2
 8001a94:	f7fe fd66 	bl	8000564 <lcd_print>
			itoa(hataKayit5, snum, 10);
 8001a98:	4b39      	ldr	r3, [pc, #228]	; (8001b80 <menu+0x52c>)
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	220a      	movs	r2, #10
 8001a9e:	492b      	ldr	r1, [pc, #172]	; (8001b4c <menu+0x4f8>)
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f00a ff8d 	bl	800c9c0 <itoa>
			lcd_print(2, 14, snum);
 8001aa6:	4a29      	ldr	r2, [pc, #164]	; (8001b4c <menu+0x4f8>)
 8001aa8:	210e      	movs	r1, #14
 8001aaa:	2002      	movs	r0, #2
 8001aac:	f7fe fd5a 	bl	8000564 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8001ab0:	4b21      	ldr	r3, [pc, #132]	; (8001b38 <menu+0x4e4>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	2b05      	cmp	r3, #5
 8001ab6:	d123      	bne.n	8001b00 <menu+0x4ac>
			if(dilSecim == 0) {
 8001ab8:	4b19      	ldr	r3, [pc, #100]	; (8001b20 <menu+0x4cc>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d105      	bne.n	8001acc <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 8001ac0:	4a30      	ldr	r2, [pc, #192]	; (8001b84 <menu+0x530>)
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	2002      	movs	r0, #2
 8001ac6:	f7fe fd4d 	bl	8000564 <lcd_print>
 8001aca:	e008      	b.n	8001ade <menu+0x48a>
			} else if(dilSecim == 1) {
 8001acc:	4b14      	ldr	r3, [pc, #80]	; (8001b20 <menu+0x4cc>)
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	2b01      	cmp	r3, #1
 8001ad2:	d104      	bne.n	8001ade <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 8001ad4:	4a2c      	ldr	r2, [pc, #176]	; (8001b88 <menu+0x534>)
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	2002      	movs	r0, #2
 8001ada:	f7fe fd43 	bl	8000564 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001ade:	4a1e      	ldr	r2, [pc, #120]	; (8001b58 <menu+0x504>)
 8001ae0:	210f      	movs	r1, #15
 8001ae2:	2002      	movs	r0, #2
 8001ae4:	f7fe fd3e 	bl	8000564 <lcd_print>
			itoa(hataKayit6, snum, 10);
 8001ae8:	4b28      	ldr	r3, [pc, #160]	; (8001b8c <menu+0x538>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	220a      	movs	r2, #10
 8001aee:	4917      	ldr	r1, [pc, #92]	; (8001b4c <menu+0x4f8>)
 8001af0:	4618      	mov	r0, r3
 8001af2:	f00a ff65 	bl	800c9c0 <itoa>
			lcd_print(2, 14, snum);
 8001af6:	4a15      	ldr	r2, [pc, #84]	; (8001b4c <menu+0x4f8>)
 8001af8:	210e      	movs	r1, #14
 8001afa:	2002      	movs	r0, #2
 8001afc:	f7fe fd32 	bl	8000564 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8001b00:	4b0d      	ldr	r3, [pc, #52]	; (8001b38 <menu+0x4e4>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	2b06      	cmp	r3, #6
 8001b06:	d15f      	bne.n	8001bc8 <menu+0x574>
			if(dilSecim == 0) {
 8001b08:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <menu+0x4cc>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d141      	bne.n	8001b94 <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 8001b10:	4a1f      	ldr	r2, [pc, #124]	; (8001b90 <menu+0x53c>)
 8001b12:	2101      	movs	r1, #1
 8001b14:	2002      	movs	r0, #2
 8001b16:	f7fe fd25 	bl	8000564 <lcd_print>
 8001b1a:	e044      	b.n	8001ba6 <menu+0x552>
 8001b1c:	0800cd7c 	.word	0x0800cd7c
 8001b20:	20000c31 	.word	0x20000c31
 8001b24:	0800cd90 	.word	0x0800cd90
 8001b28:	0800cda4 	.word	0x0800cda4
 8001b2c:	20000c10 	.word	0x20000c10
 8001b30:	0800cdb8 	.word	0x0800cdb8
 8001b34:	0800cdcc 	.word	0x0800cdcc
 8001b38:	20000c12 	.word	0x20000c12
 8001b3c:	0800cde0 	.word	0x0800cde0
 8001b40:	0800cdf0 	.word	0x0800cdf0
 8001b44:	0800ce00 	.word	0x0800ce00
 8001b48:	20000c32 	.word	0x20000c32
 8001b4c:	20000bb0 	.word	0x20000bb0
 8001b50:	0800ce04 	.word	0x0800ce04
 8001b54:	0800ce14 	.word	0x0800ce14
 8001b58:	0800ce24 	.word	0x0800ce24
 8001b5c:	20000c33 	.word	0x20000c33
 8001b60:	0800ce28 	.word	0x0800ce28
 8001b64:	0800ce38 	.word	0x0800ce38
 8001b68:	20000c34 	.word	0x20000c34
 8001b6c:	0800ce48 	.word	0x0800ce48
 8001b70:	0800ce58 	.word	0x0800ce58
 8001b74:	20000c35 	.word	0x20000c35
 8001b78:	0800ce68 	.word	0x0800ce68
 8001b7c:	0800ce78 	.word	0x0800ce78
 8001b80:	20000c36 	.word	0x20000c36
 8001b84:	0800ce88 	.word	0x0800ce88
 8001b88:	0800ce98 	.word	0x0800ce98
 8001b8c:	20000c37 	.word	0x20000c37
 8001b90:	0800cea8 	.word	0x0800cea8
			} else if(dilSecim == 1) {
 8001b94:	4b4f      	ldr	r3, [pc, #316]	; (8001cd4 <menu+0x680>)
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d104      	bne.n	8001ba6 <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 8001b9c:	4a4e      	ldr	r2, [pc, #312]	; (8001cd8 <menu+0x684>)
 8001b9e:	2101      	movs	r1, #1
 8001ba0:	2002      	movs	r0, #2
 8001ba2:	f7fe fcdf 	bl	8000564 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001ba6:	4a4d      	ldr	r2, [pc, #308]	; (8001cdc <menu+0x688>)
 8001ba8:	210f      	movs	r1, #15
 8001baa:	2002      	movs	r0, #2
 8001bac:	f7fe fcda 	bl	8000564 <lcd_print>
			itoa(hataKayit7, snum, 10);
 8001bb0:	4b4b      	ldr	r3, [pc, #300]	; (8001ce0 <menu+0x68c>)
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	220a      	movs	r2, #10
 8001bb6:	494b      	ldr	r1, [pc, #300]	; (8001ce4 <menu+0x690>)
 8001bb8:	4618      	mov	r0, r3
 8001bba:	f00a ff01 	bl	800c9c0 <itoa>
			lcd_print(2, 14, snum);
 8001bbe:	4a49      	ldr	r2, [pc, #292]	; (8001ce4 <menu+0x690>)
 8001bc0:	210e      	movs	r1, #14
 8001bc2:	2002      	movs	r0, #2
 8001bc4:	f7fe fcce 	bl	8000564 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8001bc8:	4b47      	ldr	r3, [pc, #284]	; (8001ce8 <menu+0x694>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b07      	cmp	r3, #7
 8001bce:	d123      	bne.n	8001c18 <menu+0x5c4>
			if(dilSecim == 0) {
 8001bd0:	4b40      	ldr	r3, [pc, #256]	; (8001cd4 <menu+0x680>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d105      	bne.n	8001be4 <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8001bd8:	4a44      	ldr	r2, [pc, #272]	; (8001cec <menu+0x698>)
 8001bda:	2101      	movs	r1, #1
 8001bdc:	2002      	movs	r0, #2
 8001bde:	f7fe fcc1 	bl	8000564 <lcd_print>
 8001be2:	e008      	b.n	8001bf6 <menu+0x5a2>
			} else if(dilSecim == 1) {
 8001be4:	4b3b      	ldr	r3, [pc, #236]	; (8001cd4 <menu+0x680>)
 8001be6:	781b      	ldrb	r3, [r3, #0]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d104      	bne.n	8001bf6 <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 8001bec:	4a40      	ldr	r2, [pc, #256]	; (8001cf0 <menu+0x69c>)
 8001bee:	2101      	movs	r1, #1
 8001bf0:	2002      	movs	r0, #2
 8001bf2:	f7fe fcb7 	bl	8000564 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001bf6:	4a39      	ldr	r2, [pc, #228]	; (8001cdc <menu+0x688>)
 8001bf8:	210f      	movs	r1, #15
 8001bfa:	2002      	movs	r0, #2
 8001bfc:	f7fe fcb2 	bl	8000564 <lcd_print>
			itoa(hataKayit8, snum, 10);
 8001c00:	4b3c      	ldr	r3, [pc, #240]	; (8001cf4 <menu+0x6a0>)
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	220a      	movs	r2, #10
 8001c06:	4937      	ldr	r1, [pc, #220]	; (8001ce4 <menu+0x690>)
 8001c08:	4618      	mov	r0, r3
 8001c0a:	f00a fed9 	bl	800c9c0 <itoa>
			lcd_print(2, 14, snum);
 8001c0e:	4a35      	ldr	r2, [pc, #212]	; (8001ce4 <menu+0x690>)
 8001c10:	210e      	movs	r1, #14
 8001c12:	2002      	movs	r0, #2
 8001c14:	f7fe fca6 	bl	8000564 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8001c18:	4b33      	ldr	r3, [pc, #204]	; (8001ce8 <menu+0x694>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	2b08      	cmp	r3, #8
 8001c1e:	d123      	bne.n	8001c68 <menu+0x614>
			if(dilSecim == 0) {
 8001c20:	4b2c      	ldr	r3, [pc, #176]	; (8001cd4 <menu+0x680>)
 8001c22:	781b      	ldrb	r3, [r3, #0]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d105      	bne.n	8001c34 <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8001c28:	4a33      	ldr	r2, [pc, #204]	; (8001cf8 <menu+0x6a4>)
 8001c2a:	2101      	movs	r1, #1
 8001c2c:	2002      	movs	r0, #2
 8001c2e:	f7fe fc99 	bl	8000564 <lcd_print>
 8001c32:	e008      	b.n	8001c46 <menu+0x5f2>
			} else if(dilSecim == 1) {
 8001c34:	4b27      	ldr	r3, [pc, #156]	; (8001cd4 <menu+0x680>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	d104      	bne.n	8001c46 <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 8001c3c:	4a2f      	ldr	r2, [pc, #188]	; (8001cfc <menu+0x6a8>)
 8001c3e:	2101      	movs	r1, #1
 8001c40:	2002      	movs	r0, #2
 8001c42:	f7fe fc8f 	bl	8000564 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001c46:	4a25      	ldr	r2, [pc, #148]	; (8001cdc <menu+0x688>)
 8001c48:	210f      	movs	r1, #15
 8001c4a:	2002      	movs	r0, #2
 8001c4c:	f7fe fc8a 	bl	8000564 <lcd_print>
			itoa(hataKayit9, snum, 10);
 8001c50:	4b2b      	ldr	r3, [pc, #172]	; (8001d00 <menu+0x6ac>)
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	220a      	movs	r2, #10
 8001c56:	4923      	ldr	r1, [pc, #140]	; (8001ce4 <menu+0x690>)
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f00a feb1 	bl	800c9c0 <itoa>
			lcd_print(2, 14, snum);
 8001c5e:	4a21      	ldr	r2, [pc, #132]	; (8001ce4 <menu+0x690>)
 8001c60:	210e      	movs	r1, #14
 8001c62:	2002      	movs	r0, #2
 8001c64:	f7fe fc7e 	bl	8000564 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8001c68:	4b1f      	ldr	r3, [pc, #124]	; (8001ce8 <menu+0x694>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	2b09      	cmp	r3, #9
 8001c6e:	d123      	bne.n	8001cb8 <menu+0x664>
			if(dilSecim == 0) {
 8001c70:	4b18      	ldr	r3, [pc, #96]	; (8001cd4 <menu+0x680>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d105      	bne.n	8001c84 <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 8001c78:	4a22      	ldr	r2, [pc, #136]	; (8001d04 <menu+0x6b0>)
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	2002      	movs	r0, #2
 8001c7e:	f7fe fc71 	bl	8000564 <lcd_print>
 8001c82:	e008      	b.n	8001c96 <menu+0x642>
			} else if(dilSecim == 1) {
 8001c84:	4b13      	ldr	r3, [pc, #76]	; (8001cd4 <menu+0x680>)
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d104      	bne.n	8001c96 <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 8001c8c:	4a1e      	ldr	r2, [pc, #120]	; (8001d08 <menu+0x6b4>)
 8001c8e:	2101      	movs	r1, #1
 8001c90:	2002      	movs	r0, #2
 8001c92:	f7fe fc67 	bl	8000564 <lcd_print>
			}
			lcd_print(2, 16, " ");
 8001c96:	4a1d      	ldr	r2, [pc, #116]	; (8001d0c <menu+0x6b8>)
 8001c98:	2110      	movs	r1, #16
 8001c9a:	2002      	movs	r0, #2
 8001c9c:	f7fe fc62 	bl	8000564 <lcd_print>
			itoa(hataKayit10, snum, 10);
 8001ca0:	4b1b      	ldr	r3, [pc, #108]	; (8001d10 <menu+0x6bc>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	220a      	movs	r2, #10
 8001ca6:	490f      	ldr	r1, [pc, #60]	; (8001ce4 <menu+0x690>)
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f00a fe89 	bl	800c9c0 <itoa>
			lcd_print(2, 15, snum);
 8001cae:	4a0d      	ldr	r2, [pc, #52]	; (8001ce4 <menu+0x690>)
 8001cb0:	210f      	movs	r1, #15
 8001cb2:	2002      	movs	r0, #2
 8001cb4:	f7fe fc56 	bl	8000564 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001cb8:	4b0b      	ldr	r3, [pc, #44]	; (8001ce8 <menu+0x694>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2b0a      	cmp	r3, #10
 8001cbe:	d134      	bne.n	8001d2a <menu+0x6d6>
			if(dilSecim == 0) {
 8001cc0:	4b04      	ldr	r3, [pc, #16]	; (8001cd4 <menu+0x680>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d127      	bne.n	8001d18 <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 8001cc8:	4a12      	ldr	r2, [pc, #72]	; (8001d14 <menu+0x6c0>)
 8001cca:	2101      	movs	r1, #1
 8001ccc:	2002      	movs	r0, #2
 8001cce:	f7fe fc49 	bl	8000564 <lcd_print>
 8001cd2:	e02a      	b.n	8001d2a <menu+0x6d6>
 8001cd4:	20000c31 	.word	0x20000c31
 8001cd8:	0800ceb8 	.word	0x0800ceb8
 8001cdc:	0800ce24 	.word	0x0800ce24
 8001ce0:	20000c38 	.word	0x20000c38
 8001ce4:	20000bb0 	.word	0x20000bb0
 8001ce8:	20000c12 	.word	0x20000c12
 8001cec:	0800cec8 	.word	0x0800cec8
 8001cf0:	0800ced8 	.word	0x0800ced8
 8001cf4:	20000c39 	.word	0x20000c39
 8001cf8:	0800cee8 	.word	0x0800cee8
 8001cfc:	0800cef8 	.word	0x0800cef8
 8001d00:	20000c3a 	.word	0x20000c3a
 8001d04:	0800cf08 	.word	0x0800cf08
 8001d08:	0800cf18 	.word	0x0800cf18
 8001d0c:	0800cf28 	.word	0x0800cf28
 8001d10:	20000c3b 	.word	0x20000c3b
 8001d14:	0800cf2c 	.word	0x0800cf2c
			} else if(dilSecim == 1) {
 8001d18:	4b82      	ldr	r3, [pc, #520]	; (8001f24 <menu+0x8d0>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b01      	cmp	r3, #1
 8001d1e:	d104      	bne.n	8001d2a <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 8001d20:	4a81      	ldr	r2, [pc, #516]	; (8001f28 <menu+0x8d4>)
 8001d22:	2101      	movs	r1, #1
 8001d24:	2002      	movs	r0, #2
 8001d26:	f7fe fc1d 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001d2a:	2102      	movs	r1, #2
 8001d2c:	487f      	ldr	r0, [pc, #508]	; (8001f2c <menu+0x8d8>)
 8001d2e:	f007 fe51 	bl	80099d4 <HAL_GPIO_ReadPin>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d119      	bne.n	8001d6c <menu+0x718>
 8001d38:	4b7d      	ldr	r3, [pc, #500]	; (8001f30 <menu+0x8dc>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	f083 0301 	eor.w	r3, r3, #1
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d012      	beq.n	8001d6c <menu+0x718>
 8001d46:	4b7b      	ldr	r3, [pc, #492]	; (8001f34 <menu+0x8e0>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d10e      	bne.n	8001d6c <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001d4e:	4b7a      	ldr	r3, [pc, #488]	; (8001f38 <menu+0x8e4>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	3301      	adds	r3, #1
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	4b78      	ldr	r3, [pc, #480]	; (8001f38 <menu+0x8e4>)
 8001d58:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001d5a:	4b77      	ldr	r3, [pc, #476]	; (8001f38 <menu+0x8e4>)
 8001d5c:	781b      	ldrb	r3, [r3, #0]
 8001d5e:	2b0a      	cmp	r3, #10
 8001d60:	d902      	bls.n	8001d68 <menu+0x714>
				hataGostermeSirasi = 0;
 8001d62:	4b75      	ldr	r3, [pc, #468]	; (8001f38 <menu+0x8e4>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001d68:	f004 f9bc 	bl	80060e4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001d6c:	2104      	movs	r1, #4
 8001d6e:	486f      	ldr	r0, [pc, #444]	; (8001f2c <menu+0x8d8>)
 8001d70:	f007 fe30 	bl	80099d4 <HAL_GPIO_ReadPin>
 8001d74:	4603      	mov	r3, r0
 8001d76:	2b01      	cmp	r3, #1
 8001d78:	d119      	bne.n	8001dae <menu+0x75a>
 8001d7a:	4b6d      	ldr	r3, [pc, #436]	; (8001f30 <menu+0x8dc>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	f083 0301 	eor.w	r3, r3, #1
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d012      	beq.n	8001dae <menu+0x75a>
 8001d88:	4b6a      	ldr	r3, [pc, #424]	; (8001f34 <menu+0x8e0>)
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d10e      	bne.n	8001dae <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001d90:	4b69      	ldr	r3, [pc, #420]	; (8001f38 <menu+0x8e4>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	3b01      	subs	r3, #1
 8001d96:	b2da      	uxtb	r2, r3
 8001d98:	4b67      	ldr	r3, [pc, #412]	; (8001f38 <menu+0x8e4>)
 8001d9a:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001d9c:	4b66      	ldr	r3, [pc, #408]	; (8001f38 <menu+0x8e4>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	2b0b      	cmp	r3, #11
 8001da2:	d902      	bls.n	8001daa <menu+0x756>
	    		hataGostermeSirasi = 10;
 8001da4:	4b64      	ldr	r3, [pc, #400]	; (8001f38 <menu+0x8e4>)
 8001da6:	220a      	movs	r2, #10
 8001da8:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001daa:	f004 f99b 	bl	80060e4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001dae:	2108      	movs	r1, #8
 8001db0:	485e      	ldr	r0, [pc, #376]	; (8001f2c <menu+0x8d8>)
 8001db2:	f007 fe0f 	bl	80099d4 <HAL_GPIO_ReadPin>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d153      	bne.n	8001e64 <menu+0x810>
 8001dbc:	4b5c      	ldr	r3, [pc, #368]	; (8001f30 <menu+0x8dc>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	f083 0301 	eor.w	r3, r3, #1
 8001dc4:	b2db      	uxtb	r3, r3
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d04c      	beq.n	8001e64 <menu+0x810>
 8001dca:	4b5b      	ldr	r3, [pc, #364]	; (8001f38 <menu+0x8e4>)
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	2b0a      	cmp	r3, #10
 8001dd0:	d148      	bne.n	8001e64 <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 8001dd2:	4b5a      	ldr	r3, [pc, #360]	; (8001f3c <menu+0x8e8>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	701a      	strb	r2, [r3, #0]
 8001dd8:	4b59      	ldr	r3, [pc, #356]	; (8001f40 <menu+0x8ec>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001de0:	4b58      	ldr	r3, [pc, #352]	; (8001f44 <menu+0x8f0>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	701a      	strb	r2, [r3, #0]
 8001de6:	4b56      	ldr	r3, [pc, #344]	; (8001f40 <menu+0x8ec>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001dee:	4b56      	ldr	r3, [pc, #344]	; (8001f48 <menu+0x8f4>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	701a      	strb	r2, [r3, #0]
 8001df4:	4b52      	ldr	r3, [pc, #328]	; (8001f40 <menu+0x8ec>)
 8001df6:	2200      	movs	r2, #0
 8001df8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001dfc:	4b53      	ldr	r3, [pc, #332]	; (8001f4c <menu+0x8f8>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	701a      	strb	r2, [r3, #0]
 8001e02:	4b4f      	ldr	r3, [pc, #316]	; (8001f40 <menu+0x8ec>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001e0a:	4b51      	ldr	r3, [pc, #324]	; (8001f50 <menu+0x8fc>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	701a      	strb	r2, [r3, #0]
 8001e10:	4b4b      	ldr	r3, [pc, #300]	; (8001f40 <menu+0x8ec>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001e18:	4b4e      	ldr	r3, [pc, #312]	; (8001f54 <menu+0x900>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	701a      	strb	r2, [r3, #0]
 8001e1e:	4b48      	ldr	r3, [pc, #288]	; (8001f40 <menu+0x8ec>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001e26:	4b4c      	ldr	r3, [pc, #304]	; (8001f58 <menu+0x904>)
 8001e28:	2200      	movs	r2, #0
 8001e2a:	701a      	strb	r2, [r3, #0]
 8001e2c:	4b44      	ldr	r3, [pc, #272]	; (8001f40 <menu+0x8ec>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001e34:	4b49      	ldr	r3, [pc, #292]	; (8001f5c <menu+0x908>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	701a      	strb	r2, [r3, #0]
 8001e3a:	4b41      	ldr	r3, [pc, #260]	; (8001f40 <menu+0x8ec>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001e42:	4b47      	ldr	r3, [pc, #284]	; (8001f60 <menu+0x90c>)
 8001e44:	2200      	movs	r2, #0
 8001e46:	701a      	strb	r2, [r3, #0]
 8001e48:	4b3d      	ldr	r3, [pc, #244]	; (8001f40 <menu+0x8ec>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001e50:	4b44      	ldr	r3, [pc, #272]	; (8001f64 <menu+0x910>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	701a      	strb	r2, [r3, #0]
 8001e56:	4b3a      	ldr	r3, [pc, #232]	; (8001f40 <menu+0x8ec>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8001e5e:	4b42      	ldr	r3, [pc, #264]	; (8001f68 <menu+0x914>)
 8001e60:	2201      	movs	r2, #1
 8001e62:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001e64:	4b41      	ldr	r3, [pc, #260]	; (8001f6c <menu+0x918>)
 8001e66:	781b      	ldrb	r3, [r3, #0]
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	f040 80fc 	bne.w	8002066 <menu+0xa12>
		if(dilSecim == 0) {
 8001e6e:	4b2d      	ldr	r3, [pc, #180]	; (8001f24 <menu+0x8d0>)
 8001e70:	781b      	ldrb	r3, [r3, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d105      	bne.n	8001e82 <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8001e76:	4a3e      	ldr	r2, [pc, #248]	; (8001f70 <menu+0x91c>)
 8001e78:	2101      	movs	r1, #1
 8001e7a:	2001      	movs	r0, #1
 8001e7c:	f7fe fb72 	bl	8000564 <lcd_print>
 8001e80:	e008      	b.n	8001e94 <menu+0x840>
		} else if(dilSecim == 1) {
 8001e82:	4b28      	ldr	r3, [pc, #160]	; (8001f24 <menu+0x8d0>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d104      	bne.n	8001e94 <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8001e8a:	4a3a      	ldr	r2, [pc, #232]	; (8001f74 <menu+0x920>)
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	2001      	movs	r0, #1
 8001e90:	f7fe fb68 	bl	8000564 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001e94:	4b27      	ldr	r3, [pc, #156]	; (8001f34 <menu+0x8e0>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	2b01      	cmp	r3, #1
 8001e9a:	d003      	beq.n	8001ea4 <menu+0x850>
 8001e9c:	4b25      	ldr	r3, [pc, #148]	; (8001f34 <menu+0x8e0>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b02      	cmp	r3, #2
 8001ea2:	d112      	bne.n	8001eca <menu+0x876>
			if(dilSecim == 0) {
 8001ea4:	4b1f      	ldr	r3, [pc, #124]	; (8001f24 <menu+0x8d0>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d105      	bne.n	8001eb8 <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8001eac:	4a32      	ldr	r2, [pc, #200]	; (8001f78 <menu+0x924>)
 8001eae:	2101      	movs	r1, #1
 8001eb0:	2002      	movs	r0, #2
 8001eb2:	f7fe fb57 	bl	8000564 <lcd_print>
 8001eb6:	e008      	b.n	8001eca <menu+0x876>
			} else if(dilSecim == 1) {
 8001eb8:	4b1a      	ldr	r3, [pc, #104]	; (8001f24 <menu+0x8d0>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d104      	bne.n	8001eca <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 8001ec0:	4a2e      	ldr	r2, [pc, #184]	; (8001f7c <menu+0x928>)
 8001ec2:	2101      	movs	r1, #1
 8001ec4:	2002      	movs	r0, #2
 8001ec6:	f7fe fb4d 	bl	8000564 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001eca:	4b2d      	ldr	r3, [pc, #180]	; (8001f80 <menu+0x92c>)
 8001ecc:	781b      	ldrb	r3, [r3, #0]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d116      	bne.n	8001f00 <menu+0x8ac>
 8001ed2:	4b18      	ldr	r3, [pc, #96]	; (8001f34 <menu+0x8e0>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d112      	bne.n	8001f00 <menu+0x8ac>
			if(dilSecim == 0) {
 8001eda:	4b12      	ldr	r3, [pc, #72]	; (8001f24 <menu+0x8d0>)
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d105      	bne.n	8001eee <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 8001ee2:	4a28      	ldr	r2, [pc, #160]	; (8001f84 <menu+0x930>)
 8001ee4:	2101      	movs	r1, #1
 8001ee6:	2002      	movs	r0, #2
 8001ee8:	f7fe fb3c 	bl	8000564 <lcd_print>
 8001eec:	e008      	b.n	8001f00 <menu+0x8ac>
			} else if(dilSecim == 1) {
 8001eee:	4b0d      	ldr	r3, [pc, #52]	; (8001f24 <menu+0x8d0>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d104      	bne.n	8001f00 <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 8001ef6:	4a24      	ldr	r2, [pc, #144]	; (8001f88 <menu+0x934>)
 8001ef8:	2101      	movs	r1, #1
 8001efa:	2002      	movs	r0, #2
 8001efc:	f7fe fb32 	bl	8000564 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001f00:	4b1f      	ldr	r3, [pc, #124]	; (8001f80 <menu+0x92c>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	2b01      	cmp	r3, #1
 8001f06:	d14c      	bne.n	8001fa2 <menu+0x94e>
 8001f08:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <menu+0x8e0>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d148      	bne.n	8001fa2 <menu+0x94e>
			if(dilSecim == 0) {
 8001f10:	4b04      	ldr	r3, [pc, #16]	; (8001f24 <menu+0x8d0>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d13b      	bne.n	8001f90 <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 8001f18:	4a1c      	ldr	r2, [pc, #112]	; (8001f8c <menu+0x938>)
 8001f1a:	2101      	movs	r1, #1
 8001f1c:	2002      	movs	r0, #2
 8001f1e:	f7fe fb21 	bl	8000564 <lcd_print>
 8001f22:	e03e      	b.n	8001fa2 <menu+0x94e>
 8001f24:	20000c31 	.word	0x20000c31
 8001f28:	0800cf40 	.word	0x0800cf40
 8001f2c:	40010800 	.word	0x40010800
 8001f30:	20000c3f 	.word	0x20000c3f
 8001f34:	20000c1f 	.word	0x20000c1f
 8001f38:	20000c12 	.word	0x20000c12
 8001f3c:	20000c32 	.word	0x20000c32
 8001f40:	20000b40 	.word	0x20000b40
 8001f44:	20000c33 	.word	0x20000c33
 8001f48:	20000c34 	.word	0x20000c34
 8001f4c:	20000c35 	.word	0x20000c35
 8001f50:	20000c36 	.word	0x20000c36
 8001f54:	20000c37 	.word	0x20000c37
 8001f58:	20000c38 	.word	0x20000c38
 8001f5c:	20000c39 	.word	0x20000c39
 8001f60:	20000c3a 	.word	0x20000c3a
 8001f64:	20000c3b 	.word	0x20000c3b
 8001f68:	20000c3c 	.word	0x20000c3c
 8001f6c:	20000c10 	.word	0x20000c10
 8001f70:	0800cf54 	.word	0x0800cf54
 8001f74:	0800cf68 	.word	0x0800cf68
 8001f78:	0800cf7c 	.word	0x0800cf7c
 8001f7c:	0800cf90 	.word	0x0800cf90
 8001f80:	20000c11 	.word	0x20000c11
 8001f84:	0800cfa4 	.word	0x0800cfa4
 8001f88:	0800cfb4 	.word	0x0800cfb4
 8001f8c:	0800cfc4 	.word	0x0800cfc4
			} else if(dilSecim == 1) {
 8001f90:	4b98      	ldr	r3, [pc, #608]	; (80021f4 <menu+0xba0>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d104      	bne.n	8001fa2 <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 8001f98:	4a97      	ldr	r2, [pc, #604]	; (80021f8 <menu+0xba4>)
 8001f9a:	2101      	movs	r1, #1
 8001f9c:	2002      	movs	r0, #2
 8001f9e:	f7fe fae1 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001fa2:	2102      	movs	r1, #2
 8001fa4:	4895      	ldr	r0, [pc, #596]	; (80021fc <menu+0xba8>)
 8001fa6:	f007 fd15 	bl	80099d4 <HAL_GPIO_ReadPin>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d119      	bne.n	8001fe4 <menu+0x990>
 8001fb0:	4b93      	ldr	r3, [pc, #588]	; (8002200 <menu+0xbac>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	f083 0301 	eor.w	r3, r3, #1
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d012      	beq.n	8001fe4 <menu+0x990>
 8001fbe:	4b91      	ldr	r3, [pc, #580]	; (8002204 <menu+0xbb0>)
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d10e      	bne.n	8001fe4 <menu+0x990>
			calismaSekli = calismaSekli + 1;
 8001fc6:	4b90      	ldr	r3, [pc, #576]	; (8002208 <menu+0xbb4>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	4b8e      	ldr	r3, [pc, #568]	; (8002208 <menu+0xbb4>)
 8001fd0:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001fd2:	4b8d      	ldr	r3, [pc, #564]	; (8002208 <menu+0xbb4>)
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d902      	bls.n	8001fe0 <menu+0x98c>
				calismaSekli = 0;
 8001fda:	4b8b      	ldr	r3, [pc, #556]	; (8002208 <menu+0xbb4>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001fe0:	f004 f880 	bl	80060e4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001fe4:	2104      	movs	r1, #4
 8001fe6:	4885      	ldr	r0, [pc, #532]	; (80021fc <menu+0xba8>)
 8001fe8:	f007 fcf4 	bl	80099d4 <HAL_GPIO_ReadPin>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d119      	bne.n	8002026 <menu+0x9d2>
 8001ff2:	4b83      	ldr	r3, [pc, #524]	; (8002200 <menu+0xbac>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	f083 0301 	eor.w	r3, r3, #1
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d012      	beq.n	8002026 <menu+0x9d2>
 8002000:	4b80      	ldr	r3, [pc, #512]	; (8002204 <menu+0xbb0>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d10e      	bne.n	8002026 <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 8002008:	4b7f      	ldr	r3, [pc, #508]	; (8002208 <menu+0xbb4>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	3b01      	subs	r3, #1
 800200e:	b2da      	uxtb	r2, r3
 8002010:	4b7d      	ldr	r3, [pc, #500]	; (8002208 <menu+0xbb4>)
 8002012:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8002014:	4b7c      	ldr	r3, [pc, #496]	; (8002208 <menu+0xbb4>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d002      	beq.n	8002022 <menu+0x9ce>
	    		calismaSekli = 1;
 800201c:	4b7a      	ldr	r3, [pc, #488]	; (8002208 <menu+0xbb4>)
 800201e:	2201      	movs	r2, #1
 8002020:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8002022:	f004 f85f 	bl	80060e4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002026:	2108      	movs	r1, #8
 8002028:	4874      	ldr	r0, [pc, #464]	; (80021fc <menu+0xba8>)
 800202a:	f007 fcd3 	bl	80099d4 <HAL_GPIO_ReadPin>
 800202e:	4603      	mov	r3, r0
 8002030:	2b01      	cmp	r3, #1
 8002032:	d118      	bne.n	8002066 <menu+0xa12>
 8002034:	4b72      	ldr	r3, [pc, #456]	; (8002200 <menu+0xbac>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	f083 0301 	eor.w	r3, r3, #1
 800203c:	b2db      	uxtb	r3, r3
 800203e:	2b00      	cmp	r3, #0
 8002040:	d011      	beq.n	8002066 <menu+0xa12>
			eepromData[1] = calismaSekli;
 8002042:	4b71      	ldr	r3, [pc, #452]	; (8002208 <menu+0xbb4>)
 8002044:	781a      	ldrb	r2, [r3, #0]
 8002046:	4b71      	ldr	r3, [pc, #452]	; (800220c <menu+0xbb8>)
 8002048:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 800204a:	4b6f      	ldr	r3, [pc, #444]	; (8002208 <menu+0xbb4>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d106      	bne.n	8002060 <menu+0xa0c>
				altLimit = 1;
 8002052:	4b6f      	ldr	r3, [pc, #444]	; (8002210 <menu+0xbbc>)
 8002054:	2201      	movs	r2, #1
 8002056:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002058:	4b6d      	ldr	r3, [pc, #436]	; (8002210 <menu+0xbbc>)
 800205a:	781a      	ldrb	r2, [r3, #0]
 800205c:	4b6b      	ldr	r3, [pc, #428]	; (800220c <menu+0xbb8>)
 800205e:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002060:	4b6c      	ldr	r3, [pc, #432]	; (8002214 <menu+0xbc0>)
 8002062:	2201      	movs	r2, #1
 8002064:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8002066:	4b6c      	ldr	r3, [pc, #432]	; (8002218 <menu+0xbc4>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2b03      	cmp	r3, #3
 800206c:	f040 8083 	bne.w	8002176 <menu+0xb22>
		if(dilSecim == 0) {
 8002070:	4b60      	ldr	r3, [pc, #384]	; (80021f4 <menu+0xba0>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d105      	bne.n	8002084 <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8002078:	4a68      	ldr	r2, [pc, #416]	; (800221c <menu+0xbc8>)
 800207a:	2101      	movs	r1, #1
 800207c:	2001      	movs	r0, #1
 800207e:	f7fe fa71 	bl	8000564 <lcd_print>
 8002082:	e008      	b.n	8002096 <menu+0xa42>
		} else if(dilSecim == 1) {
 8002084:	4b5b      	ldr	r3, [pc, #364]	; (80021f4 <menu+0xba0>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d104      	bne.n	8002096 <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 800208c:	4a64      	ldr	r2, [pc, #400]	; (8002220 <menu+0xbcc>)
 800208e:	2101      	movs	r1, #1
 8002090:	2001      	movs	r0, #1
 8002092:	f7fe fa67 	bl	8000564 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8002096:	4b63      	ldr	r3, [pc, #396]	; (8002224 <menu+0xbd0>)
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d113      	bne.n	80020c6 <menu+0xa72>
			if(dilSecim == 0) {
 800209e:	4b55      	ldr	r3, [pc, #340]	; (80021f4 <menu+0xba0>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d105      	bne.n	80020b2 <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 80020a6:	4a60      	ldr	r2, [pc, #384]	; (8002228 <menu+0xbd4>)
 80020a8:	2101      	movs	r1, #1
 80020aa:	2002      	movs	r0, #2
 80020ac:	f7fe fa5a 	bl	8000564 <lcd_print>
 80020b0:	e012      	b.n	80020d8 <menu+0xa84>
			} else if(dilSecim == 1) {
 80020b2:	4b50      	ldr	r3, [pc, #320]	; (80021f4 <menu+0xba0>)
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d10e      	bne.n	80020d8 <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 80020ba:	4a5c      	ldr	r2, [pc, #368]	; (800222c <menu+0xbd8>)
 80020bc:	2101      	movs	r1, #1
 80020be:	2002      	movs	r0, #2
 80020c0:	f7fe fa50 	bl	8000564 <lcd_print>
 80020c4:	e008      	b.n	80020d8 <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 80020c6:	4b57      	ldr	r3, [pc, #348]	; (8002224 <menu+0xbd0>)
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d104      	bne.n	80020d8 <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 80020ce:	4a58      	ldr	r2, [pc, #352]	; (8002230 <menu+0xbdc>)
 80020d0:	2101      	movs	r1, #1
 80020d2:	2002      	movs	r0, #2
 80020d4:	f7fe fa46 	bl	8000564 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80020d8:	2102      	movs	r1, #2
 80020da:	4848      	ldr	r0, [pc, #288]	; (80021fc <menu+0xba8>)
 80020dc:	f007 fc7a 	bl	80099d4 <HAL_GPIO_ReadPin>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d115      	bne.n	8002112 <menu+0xabe>
 80020e6:	4b46      	ldr	r3, [pc, #280]	; (8002200 <menu+0xbac>)
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	f083 0301 	eor.w	r3, r3, #1
 80020ee:	b2db      	uxtb	r3, r3
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d00e      	beq.n	8002112 <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 80020f4:	4b4b      	ldr	r3, [pc, #300]	; (8002224 <menu+0xbd0>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	3301      	adds	r3, #1
 80020fa:	b2da      	uxtb	r2, r3
 80020fc:	4b49      	ldr	r3, [pc, #292]	; (8002224 <menu+0xbd0>)
 80020fe:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8002100:	4b48      	ldr	r3, [pc, #288]	; (8002224 <menu+0xbd0>)
 8002102:	781b      	ldrb	r3, [r3, #0]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d902      	bls.n	800210e <menu+0xaba>
				emniyetCercevesi = 0;
 8002108:	4b46      	ldr	r3, [pc, #280]	; (8002224 <menu+0xbd0>)
 800210a:	2200      	movs	r2, #0
 800210c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800210e:	f003 ffe9 	bl	80060e4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002112:	2104      	movs	r1, #4
 8002114:	4839      	ldr	r0, [pc, #228]	; (80021fc <menu+0xba8>)
 8002116:	f007 fc5d 	bl	80099d4 <HAL_GPIO_ReadPin>
 800211a:	4603      	mov	r3, r0
 800211c:	2b01      	cmp	r3, #1
 800211e:	d115      	bne.n	800214c <menu+0xaf8>
 8002120:	4b37      	ldr	r3, [pc, #220]	; (8002200 <menu+0xbac>)
 8002122:	781b      	ldrb	r3, [r3, #0]
 8002124:	f083 0301 	eor.w	r3, r3, #1
 8002128:	b2db      	uxtb	r3, r3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d00e      	beq.n	800214c <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 800212e:	4b3d      	ldr	r3, [pc, #244]	; (8002224 <menu+0xbd0>)
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	3b01      	subs	r3, #1
 8002134:	b2da      	uxtb	r2, r3
 8002136:	4b3b      	ldr	r3, [pc, #236]	; (8002224 <menu+0xbd0>)
 8002138:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 800213a:	4b3a      	ldr	r3, [pc, #232]	; (8002224 <menu+0xbd0>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d002      	beq.n	8002148 <menu+0xaf4>
		   		emniyetCercevesi = 1;
 8002142:	4b38      	ldr	r3, [pc, #224]	; (8002224 <menu+0xbd0>)
 8002144:	2201      	movs	r2, #1
 8002146:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002148:	f003 ffcc 	bl	80060e4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 800214c:	2108      	movs	r1, #8
 800214e:	482b      	ldr	r0, [pc, #172]	; (80021fc <menu+0xba8>)
 8002150:	f007 fc40 	bl	80099d4 <HAL_GPIO_ReadPin>
 8002154:	4603      	mov	r3, r0
 8002156:	2b01      	cmp	r3, #1
 8002158:	d10d      	bne.n	8002176 <menu+0xb22>
 800215a:	4b29      	ldr	r3, [pc, #164]	; (8002200 <menu+0xbac>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	f083 0301 	eor.w	r3, r3, #1
 8002162:	b2db      	uxtb	r3, r3
 8002164:	2b00      	cmp	r3, #0
 8002166:	d006      	beq.n	8002176 <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 8002168:	4b2e      	ldr	r3, [pc, #184]	; (8002224 <menu+0xbd0>)
 800216a:	781a      	ldrb	r2, [r3, #0]
 800216c:	4b27      	ldr	r3, [pc, #156]	; (800220c <menu+0xbb8>)
 800216e:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8002170:	4b28      	ldr	r3, [pc, #160]	; (8002214 <menu+0xbc0>)
 8002172:	2201      	movs	r2, #1
 8002174:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8002176:	4b28      	ldr	r3, [pc, #160]	; (8002218 <menu+0xbc4>)
 8002178:	781b      	ldrb	r3, [r3, #0]
 800217a:	2b04      	cmp	r3, #4
 800217c:	f040 80ba 	bne.w	80022f4 <menu+0xca0>
		if(dilSecim == 0) {
 8002180:	4b1c      	ldr	r3, [pc, #112]	; (80021f4 <menu+0xba0>)
 8002182:	781b      	ldrb	r3, [r3, #0]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d105      	bne.n	8002194 <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 8002188:	4a2a      	ldr	r2, [pc, #168]	; (8002234 <menu+0xbe0>)
 800218a:	2101      	movs	r1, #1
 800218c:	2001      	movs	r0, #1
 800218e:	f7fe f9e9 	bl	8000564 <lcd_print>
 8002192:	e008      	b.n	80021a6 <menu+0xb52>
		} else if(dilSecim == 1) {
 8002194:	4b17      	ldr	r3, [pc, #92]	; (80021f4 <menu+0xba0>)
 8002196:	781b      	ldrb	r3, [r3, #0]
 8002198:	2b01      	cmp	r3, #1
 800219a:	d104      	bne.n	80021a6 <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 800219c:	4a26      	ldr	r2, [pc, #152]	; (8002238 <menu+0xbe4>)
 800219e:	2101      	movs	r1, #1
 80021a0:	2001      	movs	r0, #1
 80021a2:	f7fe f9df 	bl	8000564 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 80021a6:	4b25      	ldr	r3, [pc, #148]	; (800223c <menu+0xbe8>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d113      	bne.n	80021d6 <menu+0xb82>
			if(dilSecim == 0) {
 80021ae:	4b11      	ldr	r3, [pc, #68]	; (80021f4 <menu+0xba0>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d105      	bne.n	80021c2 <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 80021b6:	4a1c      	ldr	r2, [pc, #112]	; (8002228 <menu+0xbd4>)
 80021b8:	2101      	movs	r1, #1
 80021ba:	2002      	movs	r0, #2
 80021bc:	f7fe f9d2 	bl	8000564 <lcd_print>
 80021c0:	e049      	b.n	8002256 <menu+0xc02>
			} else if(dilSecim == 1) {
 80021c2:	4b0c      	ldr	r3, [pc, #48]	; (80021f4 <menu+0xba0>)
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d145      	bne.n	8002256 <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 80021ca:	4a18      	ldr	r2, [pc, #96]	; (800222c <menu+0xbd8>)
 80021cc:	2101      	movs	r1, #1
 80021ce:	2002      	movs	r0, #2
 80021d0:	f7fe f9c8 	bl	8000564 <lcd_print>
 80021d4:	e03f      	b.n	8002256 <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 80021d6:	4b19      	ldr	r3, [pc, #100]	; (800223c <menu+0xbe8>)
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	2b01      	cmp	r3, #1
 80021dc:	d13b      	bne.n	8002256 <menu+0xc02>
			if(dilSecim == 0) {
 80021de:	4b05      	ldr	r3, [pc, #20]	; (80021f4 <menu+0xba0>)
 80021e0:	781b      	ldrb	r3, [r3, #0]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d12e      	bne.n	8002244 <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 80021e6:	4a16      	ldr	r2, [pc, #88]	; (8002240 <menu+0xbec>)
 80021e8:	2101      	movs	r1, #1
 80021ea:	2002      	movs	r0, #2
 80021ec:	f7fe f9ba 	bl	8000564 <lcd_print>
 80021f0:	e031      	b.n	8002256 <menu+0xc02>
 80021f2:	bf00      	nop
 80021f4:	20000c31 	.word	0x20000c31
 80021f8:	0800cfd4 	.word	0x0800cfd4
 80021fc:	40010800 	.word	0x40010800
 8002200:	20000c3f 	.word	0x20000c3f
 8002204:	20000c1f 	.word	0x20000c1f
 8002208:	20000c11 	.word	0x20000c11
 800220c:	20000b40 	.word	0x20000b40
 8002210:	20000c16 	.word	0x20000c16
 8002214:	20000c3c 	.word	0x20000c3c
 8002218:	20000c10 	.word	0x20000c10
 800221c:	0800cfe4 	.word	0x0800cfe4
 8002220:	0800cff8 	.word	0x0800cff8
 8002224:	20000c14 	.word	0x20000c14
 8002228:	0800d00c 	.word	0x0800d00c
 800222c:	0800d020 	.word	0x0800d020
 8002230:	0800d034 	.word	0x0800d034
 8002234:	0800d044 	.word	0x0800d044
 8002238:	0800d058 	.word	0x0800d058
 800223c:	20000c15 	.word	0x20000c15
 8002240:	0800d06c 	.word	0x0800d06c
			} else if(dilSecim == 1) {
 8002244:	4b92      	ldr	r3, [pc, #584]	; (8002490 <menu+0xe3c>)
 8002246:	781b      	ldrb	r3, [r3, #0]
 8002248:	2b01      	cmp	r3, #1
 800224a:	d104      	bne.n	8002256 <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 800224c:	4a91      	ldr	r2, [pc, #580]	; (8002494 <menu+0xe40>)
 800224e:	2101      	movs	r1, #1
 8002250:	2002      	movs	r0, #2
 8002252:	f7fe f987 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002256:	2102      	movs	r1, #2
 8002258:	488f      	ldr	r0, [pc, #572]	; (8002498 <menu+0xe44>)
 800225a:	f007 fbbb 	bl	80099d4 <HAL_GPIO_ReadPin>
 800225e:	4603      	mov	r3, r0
 8002260:	2b01      	cmp	r3, #1
 8002262:	d115      	bne.n	8002290 <menu+0xc3c>
 8002264:	4b8d      	ldr	r3, [pc, #564]	; (800249c <menu+0xe48>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	f083 0301 	eor.w	r3, r3, #1
 800226c:	b2db      	uxtb	r3, r3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00e      	beq.n	8002290 <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 8002272:	4b8b      	ldr	r3, [pc, #556]	; (80024a0 <menu+0xe4c>)
 8002274:	781b      	ldrb	r3, [r3, #0]
 8002276:	3301      	adds	r3, #1
 8002278:	b2da      	uxtb	r2, r3
 800227a:	4b89      	ldr	r3, [pc, #548]	; (80024a0 <menu+0xe4c>)
 800227c:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 800227e:	4b88      	ldr	r3, [pc, #544]	; (80024a0 <menu+0xe4c>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	2b01      	cmp	r3, #1
 8002284:	d902      	bls.n	800228c <menu+0xc38>
				yavaslamaLimit = 0;
 8002286:	4b86      	ldr	r3, [pc, #536]	; (80024a0 <menu+0xe4c>)
 8002288:	2200      	movs	r2, #0
 800228a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800228c:	f003 ff2a 	bl	80060e4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002290:	2104      	movs	r1, #4
 8002292:	4881      	ldr	r0, [pc, #516]	; (8002498 <menu+0xe44>)
 8002294:	f007 fb9e 	bl	80099d4 <HAL_GPIO_ReadPin>
 8002298:	4603      	mov	r3, r0
 800229a:	2b01      	cmp	r3, #1
 800229c:	d115      	bne.n	80022ca <menu+0xc76>
 800229e:	4b7f      	ldr	r3, [pc, #508]	; (800249c <menu+0xe48>)
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	f083 0301 	eor.w	r3, r3, #1
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d00e      	beq.n	80022ca <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 80022ac:	4b7c      	ldr	r3, [pc, #496]	; (80024a0 <menu+0xe4c>)
 80022ae:	781b      	ldrb	r3, [r3, #0]
 80022b0:	3b01      	subs	r3, #1
 80022b2:	b2da      	uxtb	r2, r3
 80022b4:	4b7a      	ldr	r3, [pc, #488]	; (80024a0 <menu+0xe4c>)
 80022b6:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 80022b8:	4b79      	ldr	r3, [pc, #484]	; (80024a0 <menu+0xe4c>)
 80022ba:	781b      	ldrb	r3, [r3, #0]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d002      	beq.n	80022c6 <menu+0xc72>
		   		yavaslamaLimit = 1;
 80022c0:	4b77      	ldr	r3, [pc, #476]	; (80024a0 <menu+0xe4c>)
 80022c2:	2201      	movs	r2, #1
 80022c4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80022c6:	f003 ff0d 	bl	80060e4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80022ca:	2108      	movs	r1, #8
 80022cc:	4872      	ldr	r0, [pc, #456]	; (8002498 <menu+0xe44>)
 80022ce:	f007 fb81 	bl	80099d4 <HAL_GPIO_ReadPin>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d10d      	bne.n	80022f4 <menu+0xca0>
 80022d8:	4b70      	ldr	r3, [pc, #448]	; (800249c <menu+0xe48>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	f083 0301 	eor.w	r3, r3, #1
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d006      	beq.n	80022f4 <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 80022e6:	4b6e      	ldr	r3, [pc, #440]	; (80024a0 <menu+0xe4c>)
 80022e8:	781a      	ldrb	r2, [r3, #0]
 80022ea:	4b6e      	ldr	r3, [pc, #440]	; (80024a4 <menu+0xe50>)
 80022ec:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 80022ee:	4b6e      	ldr	r3, [pc, #440]	; (80024a8 <menu+0xe54>)
 80022f0:	2201      	movs	r2, #1
 80022f2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 80022f4:	4b6d      	ldr	r3, [pc, #436]	; (80024ac <menu+0xe58>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	2b05      	cmp	r3, #5
 80022fa:	f040 80b9 	bne.w	8002470 <menu+0xe1c>
		if(dilSecim == 0) {
 80022fe:	4b64      	ldr	r3, [pc, #400]	; (8002490 <menu+0xe3c>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d105      	bne.n	8002312 <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 8002306:	4a6a      	ldr	r2, [pc, #424]	; (80024b0 <menu+0xe5c>)
 8002308:	2101      	movs	r1, #1
 800230a:	2001      	movs	r0, #1
 800230c:	f7fe f92a 	bl	8000564 <lcd_print>
 8002310:	e008      	b.n	8002324 <menu+0xcd0>
		} else if(dilSecim == 1) {
 8002312:	4b5f      	ldr	r3, [pc, #380]	; (8002490 <menu+0xe3c>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d104      	bne.n	8002324 <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 800231a:	4a66      	ldr	r2, [pc, #408]	; (80024b4 <menu+0xe60>)
 800231c:	2101      	movs	r1, #1
 800231e:	2001      	movs	r0, #1
 8002320:	f7fe f920 	bl	8000564 <lcd_print>
		}

		if(altLimit == 0) {
 8002324:	4b64      	ldr	r3, [pc, #400]	; (80024b8 <menu+0xe64>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d113      	bne.n	8002354 <menu+0xd00>
			if(dilSecim == 0) {
 800232c:	4b58      	ldr	r3, [pc, #352]	; (8002490 <menu+0xe3c>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d105      	bne.n	8002340 <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 8002334:	4a61      	ldr	r2, [pc, #388]	; (80024bc <menu+0xe68>)
 8002336:	2101      	movs	r1, #1
 8002338:	2002      	movs	r0, #2
 800233a:	f7fe f913 	bl	8000564 <lcd_print>
 800233e:	e020      	b.n	8002382 <menu+0xd2e>
			} else if(dilSecim == 1) {
 8002340:	4b53      	ldr	r3, [pc, #332]	; (8002490 <menu+0xe3c>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	2b01      	cmp	r3, #1
 8002346:	d11c      	bne.n	8002382 <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 8002348:	4a5d      	ldr	r2, [pc, #372]	; (80024c0 <menu+0xe6c>)
 800234a:	2101      	movs	r1, #1
 800234c:	2002      	movs	r0, #2
 800234e:	f7fe f909 	bl	8000564 <lcd_print>
 8002352:	e016      	b.n	8002382 <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 8002354:	4b58      	ldr	r3, [pc, #352]	; (80024b8 <menu+0xe64>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2b01      	cmp	r3, #1
 800235a:	d112      	bne.n	8002382 <menu+0xd2e>
			if(dilSecim == 0){
 800235c:	4b4c      	ldr	r3, [pc, #304]	; (8002490 <menu+0xe3c>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d105      	bne.n	8002370 <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 8002364:	4a57      	ldr	r2, [pc, #348]	; (80024c4 <menu+0xe70>)
 8002366:	2101      	movs	r1, #1
 8002368:	2002      	movs	r0, #2
 800236a:	f7fe f8fb 	bl	8000564 <lcd_print>
 800236e:	e008      	b.n	8002382 <menu+0xd2e>
			} else if(dilSecim == 1){
 8002370:	4b47      	ldr	r3, [pc, #284]	; (8002490 <menu+0xe3c>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d104      	bne.n	8002382 <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 8002378:	4a46      	ldr	r2, [pc, #280]	; (8002494 <menu+0xe40>)
 800237a:	2101      	movs	r1, #1
 800237c:	2002      	movs	r0, #2
 800237e:	f7fe f8f1 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8002382:	2102      	movs	r1, #2
 8002384:	4844      	ldr	r0, [pc, #272]	; (8002498 <menu+0xe44>)
 8002386:	f007 fb25 	bl	80099d4 <HAL_GPIO_ReadPin>
 800238a:	4603      	mov	r3, r0
 800238c:	2b01      	cmp	r3, #1
 800238e:	d119      	bne.n	80023c4 <menu+0xd70>
 8002390:	4b42      	ldr	r3, [pc, #264]	; (800249c <menu+0xe48>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	f083 0301 	eor.w	r3, r3, #1
 8002398:	b2db      	uxtb	r3, r3
 800239a:	2b00      	cmp	r3, #0
 800239c:	d012      	beq.n	80023c4 <menu+0xd70>
 800239e:	4b4a      	ldr	r3, [pc, #296]	; (80024c8 <menu+0xe74>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d10e      	bne.n	80023c4 <menu+0xd70>
			altLimit = altLimit + 1;
 80023a6:	4b44      	ldr	r3, [pc, #272]	; (80024b8 <menu+0xe64>)
 80023a8:	781b      	ldrb	r3, [r3, #0]
 80023aa:	3301      	adds	r3, #1
 80023ac:	b2da      	uxtb	r2, r3
 80023ae:	4b42      	ldr	r3, [pc, #264]	; (80024b8 <menu+0xe64>)
 80023b0:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 80023b2:	4b41      	ldr	r3, [pc, #260]	; (80024b8 <menu+0xe64>)
 80023b4:	781b      	ldrb	r3, [r3, #0]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d902      	bls.n	80023c0 <menu+0xd6c>
				altLimit = 0;
 80023ba:	4b3f      	ldr	r3, [pc, #252]	; (80024b8 <menu+0xe64>)
 80023bc:	2200      	movs	r2, #0
 80023be:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80023c0:	f003 fe90 	bl	80060e4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 80023c4:	2104      	movs	r1, #4
 80023c6:	4834      	ldr	r0, [pc, #208]	; (8002498 <menu+0xe44>)
 80023c8:	f007 fb04 	bl	80099d4 <HAL_GPIO_ReadPin>
 80023cc:	4603      	mov	r3, r0
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d119      	bne.n	8002406 <menu+0xdb2>
 80023d2:	4b32      	ldr	r3, [pc, #200]	; (800249c <menu+0xe48>)
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	f083 0301 	eor.w	r3, r3, #1
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d012      	beq.n	8002406 <menu+0xdb2>
 80023e0:	4b39      	ldr	r3, [pc, #228]	; (80024c8 <menu+0xe74>)
 80023e2:	781b      	ldrb	r3, [r3, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d10e      	bne.n	8002406 <menu+0xdb2>
			altLimit = altLimit - 1;
 80023e8:	4b33      	ldr	r3, [pc, #204]	; (80024b8 <menu+0xe64>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	3b01      	subs	r3, #1
 80023ee:	b2da      	uxtb	r2, r3
 80023f0:	4b31      	ldr	r3, [pc, #196]	; (80024b8 <menu+0xe64>)
 80023f2:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 80023f4:	4b30      	ldr	r3, [pc, #192]	; (80024b8 <menu+0xe64>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d002      	beq.n	8002402 <menu+0xdae>
		   		altLimit = 1;
 80023fc:	4b2e      	ldr	r3, [pc, #184]	; (80024b8 <menu+0xe64>)
 80023fe:	2201      	movs	r2, #1
 8002400:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002402:	f003 fe6f 	bl	80060e4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002406:	2108      	movs	r1, #8
 8002408:	4823      	ldr	r0, [pc, #140]	; (8002498 <menu+0xe44>)
 800240a:	f007 fae3 	bl	80099d4 <HAL_GPIO_ReadPin>
 800240e:	4603      	mov	r3, r0
 8002410:	2b01      	cmp	r3, #1
 8002412:	d12d      	bne.n	8002470 <menu+0xe1c>
 8002414:	4b21      	ldr	r3, [pc, #132]	; (800249c <menu+0xe48>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	f083 0301 	eor.w	r3, r3, #1
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	d026      	beq.n	8002470 <menu+0xe1c>
			eepromData[5] = altLimit;
 8002422:	4b25      	ldr	r3, [pc, #148]	; (80024b8 <menu+0xe64>)
 8002424:	781a      	ldrb	r2, [r3, #0]
 8002426:	4b1f      	ldr	r3, [pc, #124]	; (80024a4 <menu+0xe50>)
 8002428:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 800242a:	4b23      	ldr	r3, [pc, #140]	; (80024b8 <menu+0xe64>)
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d110      	bne.n	8002454 <menu+0xe00>
 8002432:	4b26      	ldr	r3, [pc, #152]	; (80024cc <menu+0xe78>)
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d003      	beq.n	8002442 <menu+0xdee>
 800243a:	4b24      	ldr	r3, [pc, #144]	; (80024cc <menu+0xe78>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	2b02      	cmp	r3, #2
 8002440:	d108      	bne.n	8002454 <menu+0xe00>
				kapiTablaAcKonum = 3;
 8002442:	4b22      	ldr	r3, [pc, #136]	; (80024cc <menu+0xe78>)
 8002444:	2203      	movs	r2, #3
 8002446:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8002448:	4b20      	ldr	r3, [pc, #128]	; (80024cc <menu+0xe78>)
 800244a:	781a      	ldrb	r2, [r3, #0]
 800244c:	4b15      	ldr	r3, [pc, #84]	; (80024a4 <menu+0xe50>)
 800244e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8002452:	e00a      	b.n	800246a <menu+0xe16>
			} else if(altLimit == 0) {
 8002454:	4b18      	ldr	r3, [pc, #96]	; (80024b8 <menu+0xe64>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d106      	bne.n	800246a <menu+0xe16>
				platformSilindirTipi = 0;
 800245c:	4b1c      	ldr	r3, [pc, #112]	; (80024d0 <menu+0xe7c>)
 800245e:	2200      	movs	r2, #0
 8002460:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 8002462:	4b1b      	ldr	r3, [pc, #108]	; (80024d0 <menu+0xe7c>)
 8002464:	781a      	ldrb	r2, [r3, #0]
 8002466:	4b0f      	ldr	r3, [pc, #60]	; (80024a4 <menu+0xe50>)
 8002468:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 800246a:	4b0f      	ldr	r3, [pc, #60]	; (80024a8 <menu+0xe54>)
 800246c:	2201      	movs	r2, #1
 800246e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 8002470:	4b0e      	ldr	r3, [pc, #56]	; (80024ac <menu+0xe58>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	2b06      	cmp	r3, #6
 8002476:	f040 80b6 	bne.w	80025e6 <menu+0xf92>
		if(dilSecim == 0) {
 800247a:	4b05      	ldr	r3, [pc, #20]	; (8002490 <menu+0xe3c>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d12a      	bne.n	80024d8 <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 8002482:	4a14      	ldr	r2, [pc, #80]	; (80024d4 <menu+0xe80>)
 8002484:	2101      	movs	r1, #1
 8002486:	2001      	movs	r0, #1
 8002488:	f7fe f86c 	bl	8000564 <lcd_print>
 800248c:	e02d      	b.n	80024ea <menu+0xe96>
 800248e:	bf00      	nop
 8002490:	20000c31 	.word	0x20000c31
 8002494:	0800d080 	.word	0x0800d080
 8002498:	40010800 	.word	0x40010800
 800249c:	20000c3f 	.word	0x20000c3f
 80024a0:	20000c15 	.word	0x20000c15
 80024a4:	20000b40 	.word	0x20000b40
 80024a8:	20000c3c 	.word	0x20000c3c
 80024ac:	20000c10 	.word	0x20000c10
 80024b0:	0800d094 	.word	0x0800d094
 80024b4:	0800d0a8 	.word	0x0800d0a8
 80024b8:	20000c16 	.word	0x20000c16
 80024bc:	0800d00c 	.word	0x0800d00c
 80024c0:	0800d020 	.word	0x0800d020
 80024c4:	0800d06c 	.word	0x0800d06c
 80024c8:	20000c11 	.word	0x20000c11
 80024cc:	20000c1d 	.word	0x20000c1d
 80024d0:	20000c23 	.word	0x20000c23
 80024d4:	0800d0bc 	.word	0x0800d0bc
		} else if(dilSecim == 1){
 80024d8:	4b7a      	ldr	r3, [pc, #488]	; (80026c4 <menu+0x1070>)
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d104      	bne.n	80024ea <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 80024e0:	4a79      	ldr	r2, [pc, #484]	; (80026c8 <menu+0x1074>)
 80024e2:	2101      	movs	r1, #1
 80024e4:	2001      	movs	r0, #1
 80024e6:	f7fe f83d 	bl	8000564 <lcd_print>
		}
		if(basincSalteri == 0){
 80024ea:	4b78      	ldr	r3, [pc, #480]	; (80026cc <menu+0x1078>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d113      	bne.n	800251a <menu+0xec6>
			if(dilSecim == 0) {
 80024f2:	4b74      	ldr	r3, [pc, #464]	; (80026c4 <menu+0x1070>)
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d105      	bne.n	8002506 <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 80024fa:	4a75      	ldr	r2, [pc, #468]	; (80026d0 <menu+0x107c>)
 80024fc:	2101      	movs	r1, #1
 80024fe:	2002      	movs	r0, #2
 8002500:	f7fe f830 	bl	8000564 <lcd_print>
 8002504:	e020      	b.n	8002548 <menu+0xef4>
			} else if(dilSecim == 1){
 8002506:	4b6f      	ldr	r3, [pc, #444]	; (80026c4 <menu+0x1070>)
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d11c      	bne.n	8002548 <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 800250e:	4a71      	ldr	r2, [pc, #452]	; (80026d4 <menu+0x1080>)
 8002510:	2101      	movs	r1, #1
 8002512:	2002      	movs	r0, #2
 8002514:	f7fe f826 	bl	8000564 <lcd_print>
 8002518:	e016      	b.n	8002548 <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 800251a:	4b6c      	ldr	r3, [pc, #432]	; (80026cc <menu+0x1078>)
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d112      	bne.n	8002548 <menu+0xef4>
			if(dilSecim == 0) {
 8002522:	4b68      	ldr	r3, [pc, #416]	; (80026c4 <menu+0x1070>)
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d105      	bne.n	8002536 <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 800252a:	4a6b      	ldr	r2, [pc, #428]	; (80026d8 <menu+0x1084>)
 800252c:	2101      	movs	r1, #1
 800252e:	2002      	movs	r0, #2
 8002530:	f7fe f818 	bl	8000564 <lcd_print>
 8002534:	e008      	b.n	8002548 <menu+0xef4>
			} else if(dilSecim == 1) {
 8002536:	4b63      	ldr	r3, [pc, #396]	; (80026c4 <menu+0x1070>)
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	2b01      	cmp	r3, #1
 800253c:	d104      	bne.n	8002548 <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 800253e:	4a67      	ldr	r2, [pc, #412]	; (80026dc <menu+0x1088>)
 8002540:	2101      	movs	r1, #1
 8002542:	2002      	movs	r0, #2
 8002544:	f7fe f80e 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002548:	2102      	movs	r1, #2
 800254a:	4865      	ldr	r0, [pc, #404]	; (80026e0 <menu+0x108c>)
 800254c:	f007 fa42 	bl	80099d4 <HAL_GPIO_ReadPin>
 8002550:	4603      	mov	r3, r0
 8002552:	2b01      	cmp	r3, #1
 8002554:	d115      	bne.n	8002582 <menu+0xf2e>
 8002556:	4b63      	ldr	r3, [pc, #396]	; (80026e4 <menu+0x1090>)
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	f083 0301 	eor.w	r3, r3, #1
 800255e:	b2db      	uxtb	r3, r3
 8002560:	2b00      	cmp	r3, #0
 8002562:	d00e      	beq.n	8002582 <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 8002564:	4b59      	ldr	r3, [pc, #356]	; (80026cc <menu+0x1078>)
 8002566:	781b      	ldrb	r3, [r3, #0]
 8002568:	3301      	adds	r3, #1
 800256a:	b2da      	uxtb	r2, r3
 800256c:	4b57      	ldr	r3, [pc, #348]	; (80026cc <menu+0x1078>)
 800256e:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 8002570:	4b56      	ldr	r3, [pc, #344]	; (80026cc <menu+0x1078>)
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d902      	bls.n	800257e <menu+0xf2a>
				basincSalteri = 0;
 8002578:	4b54      	ldr	r3, [pc, #336]	; (80026cc <menu+0x1078>)
 800257a:	2200      	movs	r2, #0
 800257c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800257e:	f003 fdb1 	bl	80060e4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002582:	2104      	movs	r1, #4
 8002584:	4856      	ldr	r0, [pc, #344]	; (80026e0 <menu+0x108c>)
 8002586:	f007 fa25 	bl	80099d4 <HAL_GPIO_ReadPin>
 800258a:	4603      	mov	r3, r0
 800258c:	2b01      	cmp	r3, #1
 800258e:	d115      	bne.n	80025bc <menu+0xf68>
 8002590:	4b54      	ldr	r3, [pc, #336]	; (80026e4 <menu+0x1090>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	f083 0301 	eor.w	r3, r3, #1
 8002598:	b2db      	uxtb	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00e      	beq.n	80025bc <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 800259e:	4b4b      	ldr	r3, [pc, #300]	; (80026cc <menu+0x1078>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	3b01      	subs	r3, #1
 80025a4:	b2da      	uxtb	r2, r3
 80025a6:	4b49      	ldr	r3, [pc, #292]	; (80026cc <menu+0x1078>)
 80025a8:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 80025aa:	4b48      	ldr	r3, [pc, #288]	; (80026cc <menu+0x1078>)
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d002      	beq.n	80025b8 <menu+0xf64>
		   		basincSalteri = 1;
 80025b2:	4b46      	ldr	r3, [pc, #280]	; (80026cc <menu+0x1078>)
 80025b4:	2201      	movs	r2, #1
 80025b6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80025b8:	f003 fd94 	bl	80060e4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80025bc:	2108      	movs	r1, #8
 80025be:	4848      	ldr	r0, [pc, #288]	; (80026e0 <menu+0x108c>)
 80025c0:	f007 fa08 	bl	80099d4 <HAL_GPIO_ReadPin>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b01      	cmp	r3, #1
 80025c8:	d10d      	bne.n	80025e6 <menu+0xf92>
 80025ca:	4b46      	ldr	r3, [pc, #280]	; (80026e4 <menu+0x1090>)
 80025cc:	781b      	ldrb	r3, [r3, #0]
 80025ce:	f083 0301 	eor.w	r3, r3, #1
 80025d2:	b2db      	uxtb	r3, r3
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d006      	beq.n	80025e6 <menu+0xf92>
			eepromData[6] = basincSalteri;
 80025d8:	4b3c      	ldr	r3, [pc, #240]	; (80026cc <menu+0x1078>)
 80025da:	781a      	ldrb	r2, [r3, #0]
 80025dc:	4b42      	ldr	r3, [pc, #264]	; (80026e8 <menu+0x1094>)
 80025de:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 80025e0:	4b42      	ldr	r3, [pc, #264]	; (80026ec <menu+0x1098>)
 80025e2:	2201      	movs	r2, #1
 80025e4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 80025e6:	4b42      	ldr	r3, [pc, #264]	; (80026f0 <menu+0x109c>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	2b07      	cmp	r3, #7
 80025ec:	f040 80f5 	bne.w	80027da <menu+0x1186>
		if(dilSecim == 0) {
 80025f0:	4b34      	ldr	r3, [pc, #208]	; (80026c4 <menu+0x1070>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d105      	bne.n	8002604 <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 80025f8:	4a3e      	ldr	r2, [pc, #248]	; (80026f4 <menu+0x10a0>)
 80025fa:	2101      	movs	r1, #1
 80025fc:	2001      	movs	r0, #1
 80025fe:	f7fd ffb1 	bl	8000564 <lcd_print>
 8002602:	e008      	b.n	8002616 <menu+0xfc2>
		} else if(dilSecim == 1){
 8002604:	4b2f      	ldr	r3, [pc, #188]	; (80026c4 <menu+0x1070>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	2b01      	cmp	r3, #1
 800260a:	d104      	bne.n	8002616 <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 800260c:	4a3a      	ldr	r2, [pc, #232]	; (80026f8 <menu+0x10a4>)
 800260e:	2101      	movs	r1, #1
 8002610:	2001      	movs	r0, #1
 8002612:	f7fd ffa7 	bl	8000564 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 8002616:	4b39      	ldr	r3, [pc, #228]	; (80026fc <menu+0x10a8>)
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d113      	bne.n	8002646 <menu+0xff2>
			if(dilSecim == 0) {
 800261e:	4b29      	ldr	r3, [pc, #164]	; (80026c4 <menu+0x1070>)
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d105      	bne.n	8002632 <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 8002626:	4a2a      	ldr	r2, [pc, #168]	; (80026d0 <menu+0x107c>)
 8002628:	2101      	movs	r1, #1
 800262a:	2002      	movs	r0, #2
 800262c:	f7fd ff9a 	bl	8000564 <lcd_print>
 8002630:	e079      	b.n	8002726 <menu+0x10d2>
			} else if(dilSecim == 1){
 8002632:	4b24      	ldr	r3, [pc, #144]	; (80026c4 <menu+0x1070>)
 8002634:	781b      	ldrb	r3, [r3, #0]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d175      	bne.n	8002726 <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 800263a:	4a26      	ldr	r2, [pc, #152]	; (80026d4 <menu+0x1080>)
 800263c:	2101      	movs	r1, #1
 800263e:	2002      	movs	r0, #2
 8002640:	f7fd ff90 	bl	8000564 <lcd_print>
 8002644:	e06f      	b.n	8002726 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 8002646:	4b2d      	ldr	r3, [pc, #180]	; (80026fc <menu+0x10a8>)
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	2b01      	cmp	r3, #1
 800264c:	d113      	bne.n	8002676 <menu+0x1022>
			if(dilSecim == 0) {
 800264e:	4b1d      	ldr	r3, [pc, #116]	; (80026c4 <menu+0x1070>)
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d105      	bne.n	8002662 <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 8002656:	4a2a      	ldr	r2, [pc, #168]	; (8002700 <menu+0x10ac>)
 8002658:	2101      	movs	r1, #1
 800265a:	2002      	movs	r0, #2
 800265c:	f7fd ff82 	bl	8000564 <lcd_print>
 8002660:	e061      	b.n	8002726 <menu+0x10d2>
			} else if(dilSecim == 1) {
 8002662:	4b18      	ldr	r3, [pc, #96]	; (80026c4 <menu+0x1070>)
 8002664:	781b      	ldrb	r3, [r3, #0]
 8002666:	2b01      	cmp	r3, #1
 8002668:	d15d      	bne.n	8002726 <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 800266a:	4a26      	ldr	r2, [pc, #152]	; (8002704 <menu+0x10b0>)
 800266c:	2101      	movs	r1, #1
 800266e:	2002      	movs	r0, #2
 8002670:	f7fd ff78 	bl	8000564 <lcd_print>
 8002674:	e057      	b.n	8002726 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 8002676:	4b21      	ldr	r3, [pc, #132]	; (80026fc <menu+0x10a8>)
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	2b02      	cmp	r3, #2
 800267c:	d113      	bne.n	80026a6 <menu+0x1052>
			if(dilSecim == 0) {
 800267e:	4b11      	ldr	r3, [pc, #68]	; (80026c4 <menu+0x1070>)
 8002680:	781b      	ldrb	r3, [r3, #0]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d105      	bne.n	8002692 <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 8002686:	4a20      	ldr	r2, [pc, #128]	; (8002708 <menu+0x10b4>)
 8002688:	2101      	movs	r1, #1
 800268a:	2002      	movs	r0, #2
 800268c:	f7fd ff6a 	bl	8000564 <lcd_print>
 8002690:	e049      	b.n	8002726 <menu+0x10d2>
			} else if(dilSecim == 1) {
 8002692:	4b0c      	ldr	r3, [pc, #48]	; (80026c4 <menu+0x1070>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d145      	bne.n	8002726 <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 800269a:	4a1c      	ldr	r2, [pc, #112]	; (800270c <menu+0x10b8>)
 800269c:	2101      	movs	r1, #1
 800269e:	2002      	movs	r0, #2
 80026a0:	f7fd ff60 	bl	8000564 <lcd_print>
 80026a4:	e03f      	b.n	8002726 <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 80026a6:	4b15      	ldr	r3, [pc, #84]	; (80026fc <menu+0x10a8>)
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	2b03      	cmp	r3, #3
 80026ac:	d13b      	bne.n	8002726 <menu+0x10d2>
			if(dilSecim == 0) {
 80026ae:	4b05      	ldr	r3, [pc, #20]	; (80026c4 <menu+0x1070>)
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d12e      	bne.n	8002714 <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 80026b6:	4a16      	ldr	r2, [pc, #88]	; (8002710 <menu+0x10bc>)
 80026b8:	2101      	movs	r1, #1
 80026ba:	2002      	movs	r0, #2
 80026bc:	f7fd ff52 	bl	8000564 <lcd_print>
 80026c0:	e031      	b.n	8002726 <menu+0x10d2>
 80026c2:	bf00      	nop
 80026c4:	20000c31 	.word	0x20000c31
 80026c8:	0800d0cc 	.word	0x0800d0cc
 80026cc:	20000c17 	.word	0x20000c17
 80026d0:	0800d00c 	.word	0x0800d00c
 80026d4:	0800d020 	.word	0x0800d020
 80026d8:	0800d06c 	.word	0x0800d06c
 80026dc:	0800d080 	.word	0x0800d080
 80026e0:	40010800 	.word	0x40010800
 80026e4:	20000c3f 	.word	0x20000c3f
 80026e8:	20000b40 	.word	0x20000b40
 80026ec:	20000c3c 	.word	0x20000c3c
 80026f0:	20000c10 	.word	0x20000c10
 80026f4:	0800d0dc 	.word	0x0800d0dc
 80026f8:	0800d0f0 	.word	0x0800d0f0
 80026fc:	20000c18 	.word	0x20000c18
 8002700:	0800d104 	.word	0x0800d104
 8002704:	0800d118 	.word	0x0800d118
 8002708:	0800d12c 	.word	0x0800d12c
 800270c:	0800d140 	.word	0x0800d140
 8002710:	0800d154 	.word	0x0800d154
			} else if(dilSecim == 1){
 8002714:	4b99      	ldr	r3, [pc, #612]	; (800297c <menu+0x1328>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d104      	bne.n	8002726 <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 800271c:	4a98      	ldr	r2, [pc, #608]	; (8002980 <menu+0x132c>)
 800271e:	2101      	movs	r1, #1
 8002720:	2002      	movs	r0, #2
 8002722:	f7fd ff1f 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002726:	2102      	movs	r1, #2
 8002728:	4896      	ldr	r0, [pc, #600]	; (8002984 <menu+0x1330>)
 800272a:	f007 f953 	bl	80099d4 <HAL_GPIO_ReadPin>
 800272e:	4603      	mov	r3, r0
 8002730:	2b01      	cmp	r3, #1
 8002732:	d115      	bne.n	8002760 <menu+0x110c>
 8002734:	4b94      	ldr	r3, [pc, #592]	; (8002988 <menu+0x1334>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	f083 0301 	eor.w	r3, r3, #1
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00e      	beq.n	8002760 <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 8002742:	4b92      	ldr	r3, [pc, #584]	; (800298c <menu+0x1338>)
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	3301      	adds	r3, #1
 8002748:	b2da      	uxtb	r2, r3
 800274a:	4b90      	ldr	r3, [pc, #576]	; (800298c <menu+0x1338>)
 800274c:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 800274e:	4b8f      	ldr	r3, [pc, #572]	; (800298c <menu+0x1338>)
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	2b03      	cmp	r3, #3
 8002754:	d902      	bls.n	800275c <menu+0x1108>
				kapiSecimleri = 0;
 8002756:	4b8d      	ldr	r3, [pc, #564]	; (800298c <menu+0x1338>)
 8002758:	2200      	movs	r2, #0
 800275a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800275c:	f003 fcc2 	bl	80060e4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002760:	2104      	movs	r1, #4
 8002762:	4888      	ldr	r0, [pc, #544]	; (8002984 <menu+0x1330>)
 8002764:	f007 f936 	bl	80099d4 <HAL_GPIO_ReadPin>
 8002768:	4603      	mov	r3, r0
 800276a:	2b01      	cmp	r3, #1
 800276c:	d115      	bne.n	800279a <menu+0x1146>
 800276e:	4b86      	ldr	r3, [pc, #536]	; (8002988 <menu+0x1334>)
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	f083 0301 	eor.w	r3, r3, #1
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00e      	beq.n	800279a <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 800277c:	4b83      	ldr	r3, [pc, #524]	; (800298c <menu+0x1338>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	3b01      	subs	r3, #1
 8002782:	b2da      	uxtb	r2, r3
 8002784:	4b81      	ldr	r3, [pc, #516]	; (800298c <menu+0x1338>)
 8002786:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 8002788:	4b80      	ldr	r3, [pc, #512]	; (800298c <menu+0x1338>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	2b04      	cmp	r3, #4
 800278e:	d902      	bls.n	8002796 <menu+0x1142>
		   		kapiSecimleri = 3;
 8002790:	4b7e      	ldr	r3, [pc, #504]	; (800298c <menu+0x1338>)
 8002792:	2203      	movs	r2, #3
 8002794:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002796:	f003 fca5 	bl	80060e4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800279a:	2108      	movs	r1, #8
 800279c:	4879      	ldr	r0, [pc, #484]	; (8002984 <menu+0x1330>)
 800279e:	f007 f919 	bl	80099d4 <HAL_GPIO_ReadPin>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d118      	bne.n	80027da <menu+0x1186>
 80027a8:	4b77      	ldr	r3, [pc, #476]	; (8002988 <menu+0x1334>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	f083 0301 	eor.w	r3, r3, #1
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d011      	beq.n	80027da <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 80027b6:	4b75      	ldr	r3, [pc, #468]	; (800298c <menu+0x1338>)
 80027b8:	781a      	ldrb	r2, [r3, #0]
 80027ba:	4b75      	ldr	r3, [pc, #468]	; (8002990 <menu+0x133c>)
 80027bc:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 80027be:	4b73      	ldr	r3, [pc, #460]	; (800298c <menu+0x1338>)
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d006      	beq.n	80027d4 <menu+0x1180>
				altLimit = 1;
 80027c6:	4b73      	ldr	r3, [pc, #460]	; (8002994 <menu+0x1340>)
 80027c8:	2201      	movs	r2, #1
 80027ca:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80027cc:	4b71      	ldr	r3, [pc, #452]	; (8002994 <menu+0x1340>)
 80027ce:	781a      	ldrb	r2, [r3, #0]
 80027d0:	4b6f      	ldr	r3, [pc, #444]	; (8002990 <menu+0x133c>)
 80027d2:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 80027d4:	4b70      	ldr	r3, [pc, #448]	; (8002998 <menu+0x1344>)
 80027d6:	2201      	movs	r2, #1
 80027d8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 80027da:	4b70      	ldr	r3, [pc, #448]	; (800299c <menu+0x1348>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2b08      	cmp	r3, #8
 80027e0:	f040 8092 	bne.w	8002908 <menu+0x12b4>
		if(dilSecim == 0) {
 80027e4:	4b65      	ldr	r3, [pc, #404]	; (800297c <menu+0x1328>)
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d105      	bne.n	80027f8 <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 80027ec:	4a6c      	ldr	r2, [pc, #432]	; (80029a0 <menu+0x134c>)
 80027ee:	2101      	movs	r1, #1
 80027f0:	2001      	movs	r0, #1
 80027f2:	f7fd feb7 	bl	8000564 <lcd_print>
 80027f6:	e008      	b.n	800280a <menu+0x11b6>
		} else if(dilSecim == 1) {
 80027f8:	4b60      	ldr	r3, [pc, #384]	; (800297c <menu+0x1328>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	2b01      	cmp	r3, #1
 80027fe:	d104      	bne.n	800280a <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 8002800:	4a68      	ldr	r2, [pc, #416]	; (80029a4 <menu+0x1350>)
 8002802:	2101      	movs	r1, #1
 8002804:	2001      	movs	r0, #1
 8002806:	f7fd fead 	bl	8000564 <lcd_print>
		}

		if(kapiAcTipi == 0){
 800280a:	4b67      	ldr	r3, [pc, #412]	; (80029a8 <menu+0x1354>)
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d113      	bne.n	800283a <menu+0x11e6>
			if(dilSecim == 0) {
 8002812:	4b5a      	ldr	r3, [pc, #360]	; (800297c <menu+0x1328>)
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d105      	bne.n	8002826 <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 800281a:	4a64      	ldr	r2, [pc, #400]	; (80029ac <menu+0x1358>)
 800281c:	2101      	movs	r1, #1
 800281e:	2002      	movs	r0, #2
 8002820:	f7fd fea0 	bl	8000564 <lcd_print>
 8002824:	e020      	b.n	8002868 <menu+0x1214>
			} else if(dilSecim == 1) {
 8002826:	4b55      	ldr	r3, [pc, #340]	; (800297c <menu+0x1328>)
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d11c      	bne.n	8002868 <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 800282e:	4a60      	ldr	r2, [pc, #384]	; (80029b0 <menu+0x135c>)
 8002830:	2101      	movs	r1, #1
 8002832:	2002      	movs	r0, #2
 8002834:	f7fd fe96 	bl	8000564 <lcd_print>
 8002838:	e016      	b.n	8002868 <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 800283a:	4b5b      	ldr	r3, [pc, #364]	; (80029a8 <menu+0x1354>)
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d112      	bne.n	8002868 <menu+0x1214>
			if(dilSecim == 0){
 8002842:	4b4e      	ldr	r3, [pc, #312]	; (800297c <menu+0x1328>)
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d105      	bne.n	8002856 <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 800284a:	4a5a      	ldr	r2, [pc, #360]	; (80029b4 <menu+0x1360>)
 800284c:	2101      	movs	r1, #1
 800284e:	2002      	movs	r0, #2
 8002850:	f7fd fe88 	bl	8000564 <lcd_print>
 8002854:	e008      	b.n	8002868 <menu+0x1214>
			} else if(dilSecim == 1){
 8002856:	4b49      	ldr	r3, [pc, #292]	; (800297c <menu+0x1328>)
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	2b01      	cmp	r3, #1
 800285c:	d104      	bne.n	8002868 <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 800285e:	4a56      	ldr	r2, [pc, #344]	; (80029b8 <menu+0x1364>)
 8002860:	2101      	movs	r1, #1
 8002862:	2002      	movs	r0, #2
 8002864:	f7fd fe7e 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002868:	2102      	movs	r1, #2
 800286a:	4846      	ldr	r0, [pc, #280]	; (8002984 <menu+0x1330>)
 800286c:	f007 f8b2 	bl	80099d4 <HAL_GPIO_ReadPin>
 8002870:	4603      	mov	r3, r0
 8002872:	2b01      	cmp	r3, #1
 8002874:	d115      	bne.n	80028a2 <menu+0x124e>
 8002876:	4b44      	ldr	r3, [pc, #272]	; (8002988 <menu+0x1334>)
 8002878:	781b      	ldrb	r3, [r3, #0]
 800287a:	f083 0301 	eor.w	r3, r3, #1
 800287e:	b2db      	uxtb	r3, r3
 8002880:	2b00      	cmp	r3, #0
 8002882:	d00e      	beq.n	80028a2 <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 8002884:	4b48      	ldr	r3, [pc, #288]	; (80029a8 <menu+0x1354>)
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	3301      	adds	r3, #1
 800288a:	b2da      	uxtb	r2, r3
 800288c:	4b46      	ldr	r3, [pc, #280]	; (80029a8 <menu+0x1354>)
 800288e:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 8002890:	4b45      	ldr	r3, [pc, #276]	; (80029a8 <menu+0x1354>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d902      	bls.n	800289e <menu+0x124a>
				kapiAcTipi = 0;
 8002898:	4b43      	ldr	r3, [pc, #268]	; (80029a8 <menu+0x1354>)
 800289a:	2200      	movs	r2, #0
 800289c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800289e:	f003 fc21 	bl	80060e4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80028a2:	2104      	movs	r1, #4
 80028a4:	4837      	ldr	r0, [pc, #220]	; (8002984 <menu+0x1330>)
 80028a6:	f007 f895 	bl	80099d4 <HAL_GPIO_ReadPin>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b01      	cmp	r3, #1
 80028ae:	d115      	bne.n	80028dc <menu+0x1288>
 80028b0:	4b35      	ldr	r3, [pc, #212]	; (8002988 <menu+0x1334>)
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	f083 0301 	eor.w	r3, r3, #1
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00e      	beq.n	80028dc <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 80028be:	4b3a      	ldr	r3, [pc, #232]	; (80029a8 <menu+0x1354>)
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	3b01      	subs	r3, #1
 80028c4:	b2da      	uxtb	r2, r3
 80028c6:	4b38      	ldr	r3, [pc, #224]	; (80029a8 <menu+0x1354>)
 80028c8:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 80028ca:	4b37      	ldr	r3, [pc, #220]	; (80029a8 <menu+0x1354>)
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d002      	beq.n	80028d8 <menu+0x1284>
		   		kapiAcTipi = 1;
 80028d2:	4b35      	ldr	r3, [pc, #212]	; (80029a8 <menu+0x1354>)
 80028d4:	2201      	movs	r2, #1
 80028d6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80028d8:	f003 fc04 	bl	80060e4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80028dc:	2108      	movs	r1, #8
 80028de:	4829      	ldr	r0, [pc, #164]	; (8002984 <menu+0x1330>)
 80028e0:	f007 f878 	bl	80099d4 <HAL_GPIO_ReadPin>
 80028e4:	4603      	mov	r3, r0
 80028e6:	2b01      	cmp	r3, #1
 80028e8:	d10e      	bne.n	8002908 <menu+0x12b4>
 80028ea:	4b27      	ldr	r3, [pc, #156]	; (8002988 <menu+0x1334>)
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	f083 0301 	eor.w	r3, r3, #1
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d007      	beq.n	8002908 <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 80028f8:	4b2b      	ldr	r3, [pc, #172]	; (80029a8 <menu+0x1354>)
 80028fa:	781a      	ldrb	r2, [r3, #0]
 80028fc:	4b24      	ldr	r3, [pc, #144]	; (8002990 <menu+0x133c>)
 80028fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 8002902:	4b25      	ldr	r3, [pc, #148]	; (8002998 <menu+0x1344>)
 8002904:	2201      	movs	r2, #1
 8002906:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 8002908:	4b24      	ldr	r3, [pc, #144]	; (800299c <menu+0x1348>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	2b09      	cmp	r3, #9
 800290e:	f040 80b9 	bne.w	8002a84 <menu+0x1430>
		if(dilSecim == 0){
 8002912:	4b1a      	ldr	r3, [pc, #104]	; (800297c <menu+0x1328>)
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d105      	bne.n	8002926 <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 800291a:	4a28      	ldr	r2, [pc, #160]	; (80029bc <menu+0x1368>)
 800291c:	2101      	movs	r1, #1
 800291e:	2001      	movs	r0, #1
 8002920:	f7fd fe20 	bl	8000564 <lcd_print>
 8002924:	e008      	b.n	8002938 <menu+0x12e4>
		} else if(dilSecim == 1) {
 8002926:	4b15      	ldr	r3, [pc, #84]	; (800297c <menu+0x1328>)
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d104      	bne.n	8002938 <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 800292e:	4a24      	ldr	r2, [pc, #144]	; (80029c0 <menu+0x136c>)
 8002930:	2101      	movs	r1, #1
 8002932:	2001      	movs	r0, #1
 8002934:	f7fd fe16 	bl	8000564 <lcd_print>
		}

		if(kapi1Tip == 0) {
 8002938:	4b22      	ldr	r3, [pc, #136]	; (80029c4 <menu+0x1370>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d105      	bne.n	800294c <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 8002940:	4a21      	ldr	r2, [pc, #132]	; (80029c8 <menu+0x1374>)
 8002942:	2101      	movs	r1, #1
 8002944:	2002      	movs	r0, #2
 8002946:	f7fd fe0d 	bl	8000564 <lcd_print>
 800294a:	e04c      	b.n	80029e6 <menu+0x1392>
		} else if(kapi1Tip == 1) {
 800294c:	4b1d      	ldr	r3, [pc, #116]	; (80029c4 <menu+0x1370>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d13f      	bne.n	80029d4 <menu+0x1380>
			if(dilSecim == 0){
 8002954:	4b09      	ldr	r3, [pc, #36]	; (800297c <menu+0x1328>)
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d105      	bne.n	8002968 <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 800295c:	4a1b      	ldr	r2, [pc, #108]	; (80029cc <menu+0x1378>)
 800295e:	2101      	movs	r1, #1
 8002960:	2002      	movs	r0, #2
 8002962:	f7fd fdff 	bl	8000564 <lcd_print>
 8002966:	e03e      	b.n	80029e6 <menu+0x1392>
			} else if(dilSecim == 1) {
 8002968:	4b04      	ldr	r3, [pc, #16]	; (800297c <menu+0x1328>)
 800296a:	781b      	ldrb	r3, [r3, #0]
 800296c:	2b01      	cmp	r3, #1
 800296e:	d13a      	bne.n	80029e6 <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 8002970:	4a17      	ldr	r2, [pc, #92]	; (80029d0 <menu+0x137c>)
 8002972:	2101      	movs	r1, #1
 8002974:	2002      	movs	r0, #2
 8002976:	f7fd fdf5 	bl	8000564 <lcd_print>
 800297a:	e034      	b.n	80029e6 <menu+0x1392>
 800297c:	20000c31 	.word	0x20000c31
 8002980:	0800d168 	.word	0x0800d168
 8002984:	40010800 	.word	0x40010800
 8002988:	20000c3f 	.word	0x20000c3f
 800298c:	20000c18 	.word	0x20000c18
 8002990:	20000b40 	.word	0x20000b40
 8002994:	20000c16 	.word	0x20000c16
 8002998:	20000c3c 	.word	0x20000c3c
 800299c:	20000c10 	.word	0x20000c10
 80029a0:	0800d17c 	.word	0x0800d17c
 80029a4:	0800d190 	.word	0x0800d190
 80029a8:	20000c1c 	.word	0x20000c1c
 80029ac:	0800d1a4 	.word	0x0800d1a4
 80029b0:	0800d1b4 	.word	0x0800d1b4
 80029b4:	0800d1c4 	.word	0x0800d1c4
 80029b8:	0800d1d8 	.word	0x0800d1d8
 80029bc:	0800d1ec 	.word	0x0800d1ec
 80029c0:	0800d200 	.word	0x0800d200
 80029c4:	20000c19 	.word	0x20000c19
 80029c8:	0800d214 	.word	0x0800d214
 80029cc:	0800d228 	.word	0x0800d228
 80029d0:	0800d238 	.word	0x0800d238
			}
		} else if(kapi1Tip == 2) {
 80029d4:	4b8a      	ldr	r3, [pc, #552]	; (8002c00 <menu+0x15ac>)
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d104      	bne.n	80029e6 <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 80029dc:	4a89      	ldr	r2, [pc, #548]	; (8002c04 <menu+0x15b0>)
 80029de:	2101      	movs	r1, #1
 80029e0:	2002      	movs	r0, #2
 80029e2:	f7fd fdbf 	bl	8000564 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80029e6:	2102      	movs	r1, #2
 80029e8:	4887      	ldr	r0, [pc, #540]	; (8002c08 <menu+0x15b4>)
 80029ea:	f006 fff3 	bl	80099d4 <HAL_GPIO_ReadPin>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d115      	bne.n	8002a20 <menu+0x13cc>
 80029f4:	4b85      	ldr	r3, [pc, #532]	; (8002c0c <menu+0x15b8>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	f083 0301 	eor.w	r3, r3, #1
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d00e      	beq.n	8002a20 <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 8002a02:	4b7f      	ldr	r3, [pc, #508]	; (8002c00 <menu+0x15ac>)
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	3301      	adds	r3, #1
 8002a08:	b2da      	uxtb	r2, r3
 8002a0a:	4b7d      	ldr	r3, [pc, #500]	; (8002c00 <menu+0x15ac>)
 8002a0c:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 8002a0e:	4b7c      	ldr	r3, [pc, #496]	; (8002c00 <menu+0x15ac>)
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d902      	bls.n	8002a1c <menu+0x13c8>
				kapi1Tip = 0;
 8002a16:	4b7a      	ldr	r3, [pc, #488]	; (8002c00 <menu+0x15ac>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002a1c:	f003 fb62 	bl	80060e4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a20:	2104      	movs	r1, #4
 8002a22:	4879      	ldr	r0, [pc, #484]	; (8002c08 <menu+0x15b4>)
 8002a24:	f006 ffd6 	bl	80099d4 <HAL_GPIO_ReadPin>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	2b01      	cmp	r3, #1
 8002a2c:	d115      	bne.n	8002a5a <menu+0x1406>
 8002a2e:	4b77      	ldr	r3, [pc, #476]	; (8002c0c <menu+0x15b8>)
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	f083 0301 	eor.w	r3, r3, #1
 8002a36:	b2db      	uxtb	r3, r3
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d00e      	beq.n	8002a5a <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 8002a3c:	4b70      	ldr	r3, [pc, #448]	; (8002c00 <menu+0x15ac>)
 8002a3e:	781b      	ldrb	r3, [r3, #0]
 8002a40:	3b01      	subs	r3, #1
 8002a42:	b2da      	uxtb	r2, r3
 8002a44:	4b6e      	ldr	r3, [pc, #440]	; (8002c00 <menu+0x15ac>)
 8002a46:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8002a48:	4b6d      	ldr	r3, [pc, #436]	; (8002c00 <menu+0x15ac>)
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	2b03      	cmp	r3, #3
 8002a4e:	d902      	bls.n	8002a56 <menu+0x1402>
		   		kapi1Tip = 2;
 8002a50:	4b6b      	ldr	r3, [pc, #428]	; (8002c00 <menu+0x15ac>)
 8002a52:	2202      	movs	r2, #2
 8002a54:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002a56:	f003 fb45 	bl	80060e4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a5a:	2108      	movs	r1, #8
 8002a5c:	486a      	ldr	r0, [pc, #424]	; (8002c08 <menu+0x15b4>)
 8002a5e:	f006 ffb9 	bl	80099d4 <HAL_GPIO_ReadPin>
 8002a62:	4603      	mov	r3, r0
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	d10d      	bne.n	8002a84 <menu+0x1430>
 8002a68:	4b68      	ldr	r3, [pc, #416]	; (8002c0c <menu+0x15b8>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	f083 0301 	eor.w	r3, r3, #1
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d006      	beq.n	8002a84 <menu+0x1430>
			eepromData[8] = kapi1Tip;
 8002a76:	4b62      	ldr	r3, [pc, #392]	; (8002c00 <menu+0x15ac>)
 8002a78:	781a      	ldrb	r2, [r3, #0]
 8002a7a:	4b65      	ldr	r3, [pc, #404]	; (8002c10 <menu+0x15bc>)
 8002a7c:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 8002a7e:	4b65      	ldr	r3, [pc, #404]	; (8002c14 <menu+0x15c0>)
 8002a80:	2201      	movs	r2, #1
 8002a82:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 8002a84:	4b64      	ldr	r3, [pc, #400]	; (8002c18 <menu+0x15c4>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	2b0a      	cmp	r3, #10
 8002a8a:	d17f      	bne.n	8002b8c <menu+0x1538>
		if(dilSecim == 0) {
 8002a8c:	4b63      	ldr	r3, [pc, #396]	; (8002c1c <menu+0x15c8>)
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d10a      	bne.n	8002aaa <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 8002a94:	4a62      	ldr	r2, [pc, #392]	; (8002c20 <menu+0x15cc>)
 8002a96:	2101      	movs	r1, #1
 8002a98:	2001      	movs	r0, #1
 8002a9a:	f7fd fd63 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002a9e:	4a61      	ldr	r2, [pc, #388]	; (8002c24 <menu+0x15d0>)
 8002aa0:	2101      	movs	r1, #1
 8002aa2:	2002      	movs	r0, #2
 8002aa4:	f7fd fd5e 	bl	8000564 <lcd_print>
 8002aa8:	e00d      	b.n	8002ac6 <menu+0x1472>
		} else if(dilSecim == 1) {
 8002aaa:	4b5c      	ldr	r3, [pc, #368]	; (8002c1c <menu+0x15c8>)
 8002aac:	781b      	ldrb	r3, [r3, #0]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d109      	bne.n	8002ac6 <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 8002ab2:	4a5d      	ldr	r2, [pc, #372]	; (8002c28 <menu+0x15d4>)
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	2001      	movs	r0, #1
 8002ab8:	f7fd fd54 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002abc:	4a5b      	ldr	r2, [pc, #364]	; (8002c2c <menu+0x15d8>)
 8002abe:	2101      	movs	r1, #1
 8002ac0:	2002      	movs	r0, #2
 8002ac2:	f7fd fd4f 	bl	8000564 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 8002ac6:	4b5a      	ldr	r3, [pc, #360]	; (8002c30 <menu+0x15dc>)
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	220a      	movs	r2, #10
 8002acc:	4959      	ldr	r1, [pc, #356]	; (8002c34 <menu+0x15e0>)
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f009 ff76 	bl	800c9c0 <itoa>
		lcd_print(2,16,snum);
 8002ad4:	4a57      	ldr	r2, [pc, #348]	; (8002c34 <menu+0x15e0>)
 8002ad6:	2110      	movs	r1, #16
 8002ad8:	2002      	movs	r0, #2
 8002ada:	f7fd fd43 	bl	8000564 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002ade:	2102      	movs	r1, #2
 8002ae0:	4849      	ldr	r0, [pc, #292]	; (8002c08 <menu+0x15b4>)
 8002ae2:	f006 ff77 	bl	80099d4 <HAL_GPIO_ReadPin>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	2b01      	cmp	r3, #1
 8002aea:	d119      	bne.n	8002b20 <menu+0x14cc>
 8002aec:	4b47      	ldr	r3, [pc, #284]	; (8002c0c <menu+0x15b8>)
 8002aee:	781b      	ldrb	r3, [r3, #0]
 8002af0:	f083 0301 	eor.w	r3, r3, #1
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d012      	beq.n	8002b20 <menu+0x14cc>
 8002afa:	4b41      	ldr	r3, [pc, #260]	; (8002c00 <menu+0x15ac>)
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d10e      	bne.n	8002b20 <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 8002b02:	4b4b      	ldr	r3, [pc, #300]	; (8002c30 <menu+0x15dc>)
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	3301      	adds	r3, #1
 8002b08:	b2da      	uxtb	r2, r3
 8002b0a:	4b49      	ldr	r3, [pc, #292]	; (8002c30 <menu+0x15dc>)
 8002b0c:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8002b0e:	4b48      	ldr	r3, [pc, #288]	; (8002c30 <menu+0x15dc>)
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	2b05      	cmp	r3, #5
 8002b14:	d902      	bls.n	8002b1c <menu+0x14c8>
				kapi1AcSure = 0;
 8002b16:	4b46      	ldr	r3, [pc, #280]	; (8002c30 <menu+0x15dc>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002b1c:	f003 fae2 	bl	80060e4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002b20:	2104      	movs	r1, #4
 8002b22:	4839      	ldr	r0, [pc, #228]	; (8002c08 <menu+0x15b4>)
 8002b24:	f006 ff56 	bl	80099d4 <HAL_GPIO_ReadPin>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d119      	bne.n	8002b62 <menu+0x150e>
 8002b2e:	4b37      	ldr	r3, [pc, #220]	; (8002c0c <menu+0x15b8>)
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	f083 0301 	eor.w	r3, r3, #1
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d012      	beq.n	8002b62 <menu+0x150e>
 8002b3c:	4b30      	ldr	r3, [pc, #192]	; (8002c00 <menu+0x15ac>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d10e      	bne.n	8002b62 <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 8002b44:	4b3a      	ldr	r3, [pc, #232]	; (8002c30 <menu+0x15dc>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	b2da      	uxtb	r2, r3
 8002b4c:	4b38      	ldr	r3, [pc, #224]	; (8002c30 <menu+0x15dc>)
 8002b4e:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8002b50:	4b37      	ldr	r3, [pc, #220]	; (8002c30 <menu+0x15dc>)
 8002b52:	781b      	ldrb	r3, [r3, #0]
 8002b54:	2b06      	cmp	r3, #6
 8002b56:	d902      	bls.n	8002b5e <menu+0x150a>
		   		kapi1AcSure = 5;
 8002b58:	4b35      	ldr	r3, [pc, #212]	; (8002c30 <menu+0x15dc>)
 8002b5a:	2205      	movs	r2, #5
 8002b5c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002b5e:	f003 fac1 	bl	80060e4 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b62:	2108      	movs	r1, #8
 8002b64:	4828      	ldr	r0, [pc, #160]	; (8002c08 <menu+0x15b4>)
 8002b66:	f006 ff35 	bl	80099d4 <HAL_GPIO_ReadPin>
 8002b6a:	4603      	mov	r3, r0
 8002b6c:	2b01      	cmp	r3, #1
 8002b6e:	d10d      	bne.n	8002b8c <menu+0x1538>
 8002b70:	4b26      	ldr	r3, [pc, #152]	; (8002c0c <menu+0x15b8>)
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	f083 0301 	eor.w	r3, r3, #1
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d006      	beq.n	8002b8c <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 8002b7e:	4b2c      	ldr	r3, [pc, #176]	; (8002c30 <menu+0x15dc>)
 8002b80:	781a      	ldrb	r2, [r3, #0]
 8002b82:	4b23      	ldr	r3, [pc, #140]	; (8002c10 <menu+0x15bc>)
 8002b84:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8002b86:	4b23      	ldr	r3, [pc, #140]	; (8002c14 <menu+0x15c0>)
 8002b88:	2201      	movs	r2, #1
 8002b8a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8002b8c:	4b22      	ldr	r3, [pc, #136]	; (8002c18 <menu+0x15c4>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	2b0b      	cmp	r3, #11
 8002b92:	f040 80b5 	bne.w	8002d00 <menu+0x16ac>
		if(dilSecim == 0) {
 8002b96:	4b21      	ldr	r3, [pc, #132]	; (8002c1c <menu+0x15c8>)
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d105      	bne.n	8002baa <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 8002b9e:	4a26      	ldr	r2, [pc, #152]	; (8002c38 <menu+0x15e4>)
 8002ba0:	2101      	movs	r1, #1
 8002ba2:	2001      	movs	r0, #1
 8002ba4:	f7fd fcde 	bl	8000564 <lcd_print>
 8002ba8:	e008      	b.n	8002bbc <menu+0x1568>
		} else if(dilSecim == 1) {
 8002baa:	4b1c      	ldr	r3, [pc, #112]	; (8002c1c <menu+0x15c8>)
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d104      	bne.n	8002bbc <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 8002bb2:	4a22      	ldr	r2, [pc, #136]	; (8002c3c <menu+0x15e8>)
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	2001      	movs	r0, #1
 8002bb8:	f7fd fcd4 	bl	8000564 <lcd_print>
		}

		if(kapi2Tip == 0) {
 8002bbc:	4b20      	ldr	r3, [pc, #128]	; (8002c40 <menu+0x15ec>)
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d105      	bne.n	8002bd0 <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 8002bc4:	4a1f      	ldr	r2, [pc, #124]	; (8002c44 <menu+0x15f0>)
 8002bc6:	2101      	movs	r1, #1
 8002bc8:	2002      	movs	r0, #2
 8002bca:	f7fd fccb 	bl	8000564 <lcd_print>
 8002bce:	e048      	b.n	8002c62 <menu+0x160e>
		} else if(kapi2Tip == 1) {
 8002bd0:	4b1b      	ldr	r3, [pc, #108]	; (8002c40 <menu+0x15ec>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d13b      	bne.n	8002c50 <menu+0x15fc>
			if(dilSecim == 0) {
 8002bd8:	4b10      	ldr	r3, [pc, #64]	; (8002c1c <menu+0x15c8>)
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d105      	bne.n	8002bec <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 8002be0:	4a19      	ldr	r2, [pc, #100]	; (8002c48 <menu+0x15f4>)
 8002be2:	2101      	movs	r1, #1
 8002be4:	2002      	movs	r0, #2
 8002be6:	f7fd fcbd 	bl	8000564 <lcd_print>
 8002bea:	e03a      	b.n	8002c62 <menu+0x160e>
			} else if(dilSecim == 1) {
 8002bec:	4b0b      	ldr	r3, [pc, #44]	; (8002c1c <menu+0x15c8>)
 8002bee:	781b      	ldrb	r3, [r3, #0]
 8002bf0:	2b01      	cmp	r3, #1
 8002bf2:	d136      	bne.n	8002c62 <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 8002bf4:	4a15      	ldr	r2, [pc, #84]	; (8002c4c <menu+0x15f8>)
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	2002      	movs	r0, #2
 8002bfa:	f7fd fcb3 	bl	8000564 <lcd_print>
 8002bfe:	e030      	b.n	8002c62 <menu+0x160e>
 8002c00:	20000c19 	.word	0x20000c19
 8002c04:	0800d24c 	.word	0x0800d24c
 8002c08:	40010800 	.word	0x40010800
 8002c0c:	20000c3f 	.word	0x20000c3f
 8002c10:	20000b40 	.word	0x20000b40
 8002c14:	20000c3c 	.word	0x20000c3c
 8002c18:	20000c10 	.word	0x20000c10
 8002c1c:	20000c31 	.word	0x20000c31
 8002c20:	0800d25c 	.word	0x0800d25c
 8002c24:	0800d270 	.word	0x0800d270
 8002c28:	0800d280 	.word	0x0800d280
 8002c2c:	0800d294 	.word	0x0800d294
 8002c30:	20000c29 	.word	0x20000c29
 8002c34:	20000bb0 	.word	0x20000bb0
 8002c38:	0800d2a4 	.word	0x0800d2a4
 8002c3c:	0800d2b8 	.word	0x0800d2b8
 8002c40:	20000c1a 	.word	0x20000c1a
 8002c44:	0800d214 	.word	0x0800d214
 8002c48:	0800d228 	.word	0x0800d228
 8002c4c:	0800d238 	.word	0x0800d238
			}
		} else if(kapi2Tip == 2) {
 8002c50:	4b8a      	ldr	r3, [pc, #552]	; (8002e7c <menu+0x1828>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d104      	bne.n	8002c62 <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 8002c58:	4a89      	ldr	r2, [pc, #548]	; (8002e80 <menu+0x182c>)
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	2002      	movs	r0, #2
 8002c5e:	f7fd fc81 	bl	8000564 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c62:	2102      	movs	r1, #2
 8002c64:	4887      	ldr	r0, [pc, #540]	; (8002e84 <menu+0x1830>)
 8002c66:	f006 feb5 	bl	80099d4 <HAL_GPIO_ReadPin>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d115      	bne.n	8002c9c <menu+0x1648>
 8002c70:	4b85      	ldr	r3, [pc, #532]	; (8002e88 <menu+0x1834>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	f083 0301 	eor.w	r3, r3, #1
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00e      	beq.n	8002c9c <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 8002c7e:	4b7f      	ldr	r3, [pc, #508]	; (8002e7c <menu+0x1828>)
 8002c80:	781b      	ldrb	r3, [r3, #0]
 8002c82:	3301      	adds	r3, #1
 8002c84:	b2da      	uxtb	r2, r3
 8002c86:	4b7d      	ldr	r3, [pc, #500]	; (8002e7c <menu+0x1828>)
 8002c88:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8002c8a:	4b7c      	ldr	r3, [pc, #496]	; (8002e7c <menu+0x1828>)
 8002c8c:	781b      	ldrb	r3, [r3, #0]
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d902      	bls.n	8002c98 <menu+0x1644>
				kapi2Tip = 0;
 8002c92:	4b7a      	ldr	r3, [pc, #488]	; (8002e7c <menu+0x1828>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002c98:	f003 fa24 	bl	80060e4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002c9c:	2104      	movs	r1, #4
 8002c9e:	4879      	ldr	r0, [pc, #484]	; (8002e84 <menu+0x1830>)
 8002ca0:	f006 fe98 	bl	80099d4 <HAL_GPIO_ReadPin>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d115      	bne.n	8002cd6 <menu+0x1682>
 8002caa:	4b77      	ldr	r3, [pc, #476]	; (8002e88 <menu+0x1834>)
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	f083 0301 	eor.w	r3, r3, #1
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d00e      	beq.n	8002cd6 <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 8002cb8:	4b70      	ldr	r3, [pc, #448]	; (8002e7c <menu+0x1828>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	b2da      	uxtb	r2, r3
 8002cc0:	4b6e      	ldr	r3, [pc, #440]	; (8002e7c <menu+0x1828>)
 8002cc2:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002cc4:	4b6d      	ldr	r3, [pc, #436]	; (8002e7c <menu+0x1828>)
 8002cc6:	781b      	ldrb	r3, [r3, #0]
 8002cc8:	2b03      	cmp	r3, #3
 8002cca:	d902      	bls.n	8002cd2 <menu+0x167e>
		   		kapi2Tip = 2;
 8002ccc:	4b6b      	ldr	r3, [pc, #428]	; (8002e7c <menu+0x1828>)
 8002cce:	2202      	movs	r2, #2
 8002cd0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002cd2:	f003 fa07 	bl	80060e4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cd6:	2108      	movs	r1, #8
 8002cd8:	486a      	ldr	r0, [pc, #424]	; (8002e84 <menu+0x1830>)
 8002cda:	f006 fe7b 	bl	80099d4 <HAL_GPIO_ReadPin>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b01      	cmp	r3, #1
 8002ce2:	d10d      	bne.n	8002d00 <menu+0x16ac>
 8002ce4:	4b68      	ldr	r3, [pc, #416]	; (8002e88 <menu+0x1834>)
 8002ce6:	781b      	ldrb	r3, [r3, #0]
 8002ce8:	f083 0301 	eor.w	r3, r3, #1
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d006      	beq.n	8002d00 <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 8002cf2:	4b62      	ldr	r3, [pc, #392]	; (8002e7c <menu+0x1828>)
 8002cf4:	781a      	ldrb	r2, [r3, #0]
 8002cf6:	4b65      	ldr	r3, [pc, #404]	; (8002e8c <menu+0x1838>)
 8002cf8:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8002cfa:	4b65      	ldr	r3, [pc, #404]	; (8002e90 <menu+0x183c>)
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002d00:	4b64      	ldr	r3, [pc, #400]	; (8002e94 <menu+0x1840>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	2b0c      	cmp	r3, #12
 8002d06:	d17f      	bne.n	8002e08 <menu+0x17b4>
		if(dilSecim == 0) {
 8002d08:	4b63      	ldr	r3, [pc, #396]	; (8002e98 <menu+0x1844>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d10a      	bne.n	8002d26 <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8002d10:	4a62      	ldr	r2, [pc, #392]	; (8002e9c <menu+0x1848>)
 8002d12:	2101      	movs	r1, #1
 8002d14:	2001      	movs	r0, #1
 8002d16:	f7fd fc25 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002d1a:	4a61      	ldr	r2, [pc, #388]	; (8002ea0 <menu+0x184c>)
 8002d1c:	2101      	movs	r1, #1
 8002d1e:	2002      	movs	r0, #2
 8002d20:	f7fd fc20 	bl	8000564 <lcd_print>
 8002d24:	e00d      	b.n	8002d42 <menu+0x16ee>
		} else if(dilSecim == 1) {
 8002d26:	4b5c      	ldr	r3, [pc, #368]	; (8002e98 <menu+0x1844>)
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d109      	bne.n	8002d42 <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8002d2e:	4a5d      	ldr	r2, [pc, #372]	; (8002ea4 <menu+0x1850>)
 8002d30:	2101      	movs	r1, #1
 8002d32:	2001      	movs	r0, #1
 8002d34:	f7fd fc16 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002d38:	4a5b      	ldr	r2, [pc, #364]	; (8002ea8 <menu+0x1854>)
 8002d3a:	2101      	movs	r1, #1
 8002d3c:	2002      	movs	r0, #2
 8002d3e:	f7fd fc11 	bl	8000564 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8002d42:	4b5a      	ldr	r3, [pc, #360]	; (8002eac <menu+0x1858>)
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	220a      	movs	r2, #10
 8002d48:	4959      	ldr	r1, [pc, #356]	; (8002eb0 <menu+0x185c>)
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f009 fe38 	bl	800c9c0 <itoa>
		lcd_print(2,16,snum);
 8002d50:	4a57      	ldr	r2, [pc, #348]	; (8002eb0 <menu+0x185c>)
 8002d52:	2110      	movs	r1, #16
 8002d54:	2002      	movs	r0, #2
 8002d56:	f7fd fc05 	bl	8000564 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002d5a:	2102      	movs	r1, #2
 8002d5c:	4849      	ldr	r0, [pc, #292]	; (8002e84 <menu+0x1830>)
 8002d5e:	f006 fe39 	bl	80099d4 <HAL_GPIO_ReadPin>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d119      	bne.n	8002d9c <menu+0x1748>
 8002d68:	4b47      	ldr	r3, [pc, #284]	; (8002e88 <menu+0x1834>)
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	f083 0301 	eor.w	r3, r3, #1
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d012      	beq.n	8002d9c <menu+0x1748>
 8002d76:	4b41      	ldr	r3, [pc, #260]	; (8002e7c <menu+0x1828>)
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d10e      	bne.n	8002d9c <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 8002d7e:	4b4b      	ldr	r3, [pc, #300]	; (8002eac <menu+0x1858>)
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	3301      	adds	r3, #1
 8002d84:	b2da      	uxtb	r2, r3
 8002d86:	4b49      	ldr	r3, [pc, #292]	; (8002eac <menu+0x1858>)
 8002d88:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002d8a:	4b48      	ldr	r3, [pc, #288]	; (8002eac <menu+0x1858>)
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	2b05      	cmp	r3, #5
 8002d90:	d902      	bls.n	8002d98 <menu+0x1744>
				kapi2AcSure = 0;
 8002d92:	4b46      	ldr	r3, [pc, #280]	; (8002eac <menu+0x1858>)
 8002d94:	2200      	movs	r2, #0
 8002d96:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002d98:	f003 f9a4 	bl	80060e4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002d9c:	2104      	movs	r1, #4
 8002d9e:	4839      	ldr	r0, [pc, #228]	; (8002e84 <menu+0x1830>)
 8002da0:	f006 fe18 	bl	80099d4 <HAL_GPIO_ReadPin>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b01      	cmp	r3, #1
 8002da8:	d119      	bne.n	8002dde <menu+0x178a>
 8002daa:	4b37      	ldr	r3, [pc, #220]	; (8002e88 <menu+0x1834>)
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	f083 0301 	eor.w	r3, r3, #1
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d012      	beq.n	8002dde <menu+0x178a>
 8002db8:	4b30      	ldr	r3, [pc, #192]	; (8002e7c <menu+0x1828>)
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d10e      	bne.n	8002dde <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 8002dc0:	4b3a      	ldr	r3, [pc, #232]	; (8002eac <menu+0x1858>)
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	b2da      	uxtb	r2, r3
 8002dc8:	4b38      	ldr	r3, [pc, #224]	; (8002eac <menu+0x1858>)
 8002dca:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002dcc:	4b37      	ldr	r3, [pc, #220]	; (8002eac <menu+0x1858>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	2b06      	cmp	r3, #6
 8002dd2:	d902      	bls.n	8002dda <menu+0x1786>
		   		kapi2AcSure = 5;
 8002dd4:	4b35      	ldr	r3, [pc, #212]	; (8002eac <menu+0x1858>)
 8002dd6:	2205      	movs	r2, #5
 8002dd8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002dda:	f003 f983 	bl	80060e4 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002dde:	2108      	movs	r1, #8
 8002de0:	4828      	ldr	r0, [pc, #160]	; (8002e84 <menu+0x1830>)
 8002de2:	f006 fdf7 	bl	80099d4 <HAL_GPIO_ReadPin>
 8002de6:	4603      	mov	r3, r0
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d10d      	bne.n	8002e08 <menu+0x17b4>
 8002dec:	4b26      	ldr	r3, [pc, #152]	; (8002e88 <menu+0x1834>)
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	f083 0301 	eor.w	r3, r3, #1
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d006      	beq.n	8002e08 <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 8002dfa:	4b2c      	ldr	r3, [pc, #176]	; (8002eac <menu+0x1858>)
 8002dfc:	781a      	ldrb	r2, [r3, #0]
 8002dfe:	4b23      	ldr	r3, [pc, #140]	; (8002e8c <menu+0x1838>)
 8002e00:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8002e02:	4b23      	ldr	r3, [pc, #140]	; (8002e90 <menu+0x183c>)
 8002e04:	2201      	movs	r2, #1
 8002e06:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8002e08:	4b22      	ldr	r3, [pc, #136]	; (8002e94 <menu+0x1840>)
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	2b0d      	cmp	r3, #13
 8002e0e:	f040 80b5 	bne.w	8002f7c <menu+0x1928>
		if(dilSecim == 0) {
 8002e12:	4b21      	ldr	r3, [pc, #132]	; (8002e98 <menu+0x1844>)
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d105      	bne.n	8002e26 <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 8002e1a:	4a26      	ldr	r2, [pc, #152]	; (8002eb4 <menu+0x1860>)
 8002e1c:	2101      	movs	r1, #1
 8002e1e:	2001      	movs	r0, #1
 8002e20:	f7fd fba0 	bl	8000564 <lcd_print>
 8002e24:	e008      	b.n	8002e38 <menu+0x17e4>
		} else if(dilSecim == 1){
 8002e26:	4b1c      	ldr	r3, [pc, #112]	; (8002e98 <menu+0x1844>)
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d104      	bne.n	8002e38 <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8002e2e:	4a22      	ldr	r2, [pc, #136]	; (8002eb8 <menu+0x1864>)
 8002e30:	2101      	movs	r1, #1
 8002e32:	2001      	movs	r0, #1
 8002e34:	f7fd fb96 	bl	8000564 <lcd_print>
		}

		if(kapitablaTip == 0) {
 8002e38:	4b20      	ldr	r3, [pc, #128]	; (8002ebc <menu+0x1868>)
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d105      	bne.n	8002e4c <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 8002e40:	4a1f      	ldr	r2, [pc, #124]	; (8002ec0 <menu+0x186c>)
 8002e42:	2101      	movs	r1, #1
 8002e44:	2002      	movs	r0, #2
 8002e46:	f7fd fb8d 	bl	8000564 <lcd_print>
 8002e4a:	e048      	b.n	8002ede <menu+0x188a>
		} else if(kapitablaTip == 1) {
 8002e4c:	4b1b      	ldr	r3, [pc, #108]	; (8002ebc <menu+0x1868>)
 8002e4e:	781b      	ldrb	r3, [r3, #0]
 8002e50:	2b01      	cmp	r3, #1
 8002e52:	d13b      	bne.n	8002ecc <menu+0x1878>
			if(dilSecim == 0) {
 8002e54:	4b10      	ldr	r3, [pc, #64]	; (8002e98 <menu+0x1844>)
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d105      	bne.n	8002e68 <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 8002e5c:	4a19      	ldr	r2, [pc, #100]	; (8002ec4 <menu+0x1870>)
 8002e5e:	2101      	movs	r1, #1
 8002e60:	2002      	movs	r0, #2
 8002e62:	f7fd fb7f 	bl	8000564 <lcd_print>
 8002e66:	e03a      	b.n	8002ede <menu+0x188a>
			} else if(dilSecim == 1) {
 8002e68:	4b0b      	ldr	r3, [pc, #44]	; (8002e98 <menu+0x1844>)
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d136      	bne.n	8002ede <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 8002e70:	4a15      	ldr	r2, [pc, #84]	; (8002ec8 <menu+0x1874>)
 8002e72:	2101      	movs	r1, #1
 8002e74:	2002      	movs	r0, #2
 8002e76:	f7fd fb75 	bl	8000564 <lcd_print>
 8002e7a:	e030      	b.n	8002ede <menu+0x188a>
 8002e7c:	20000c1a 	.word	0x20000c1a
 8002e80:	0800d24c 	.word	0x0800d24c
 8002e84:	40010800 	.word	0x40010800
 8002e88:	20000c3f 	.word	0x20000c3f
 8002e8c:	20000b40 	.word	0x20000b40
 8002e90:	20000c3c 	.word	0x20000c3c
 8002e94:	20000c10 	.word	0x20000c10
 8002e98:	20000c31 	.word	0x20000c31
 8002e9c:	0800d2cc 	.word	0x0800d2cc
 8002ea0:	0800d270 	.word	0x0800d270
 8002ea4:	0800d2e0 	.word	0x0800d2e0
 8002ea8:	0800d294 	.word	0x0800d294
 8002eac:	20000c2a 	.word	0x20000c2a
 8002eb0:	20000bb0 	.word	0x20000bb0
 8002eb4:	0800d2f4 	.word	0x0800d2f4
 8002eb8:	0800d308 	.word	0x0800d308
 8002ebc:	20000c1b 	.word	0x20000c1b
 8002ec0:	0800d214 	.word	0x0800d214
 8002ec4:	0800d228 	.word	0x0800d228
 8002ec8:	0800d238 	.word	0x0800d238
			}
		} else if(kapitablaTip == 2) {
 8002ecc:	4b5b      	ldr	r3, [pc, #364]	; (800303c <menu+0x19e8>)
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	2b02      	cmp	r3, #2
 8002ed2:	d104      	bne.n	8002ede <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 8002ed4:	4a5a      	ldr	r2, [pc, #360]	; (8003040 <menu+0x19ec>)
 8002ed6:	2101      	movs	r1, #1
 8002ed8:	2002      	movs	r0, #2
 8002eda:	f7fd fb43 	bl	8000564 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ede:	2102      	movs	r1, #2
 8002ee0:	4858      	ldr	r0, [pc, #352]	; (8003044 <menu+0x19f0>)
 8002ee2:	f006 fd77 	bl	80099d4 <HAL_GPIO_ReadPin>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d115      	bne.n	8002f18 <menu+0x18c4>
 8002eec:	4b56      	ldr	r3, [pc, #344]	; (8003048 <menu+0x19f4>)
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	f083 0301 	eor.w	r3, r3, #1
 8002ef4:	b2db      	uxtb	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d00e      	beq.n	8002f18 <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 8002efa:	4b50      	ldr	r3, [pc, #320]	; (800303c <menu+0x19e8>)
 8002efc:	781b      	ldrb	r3, [r3, #0]
 8002efe:	3301      	adds	r3, #1
 8002f00:	b2da      	uxtb	r2, r3
 8002f02:	4b4e      	ldr	r3, [pc, #312]	; (800303c <menu+0x19e8>)
 8002f04:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002f06:	4b4d      	ldr	r3, [pc, #308]	; (800303c <menu+0x19e8>)
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	2b02      	cmp	r3, #2
 8002f0c:	d902      	bls.n	8002f14 <menu+0x18c0>
				kapitablaTip = 0;
 8002f0e:	4b4b      	ldr	r3, [pc, #300]	; (800303c <menu+0x19e8>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f14:	f003 f8e6 	bl	80060e4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f18:	2104      	movs	r1, #4
 8002f1a:	484a      	ldr	r0, [pc, #296]	; (8003044 <menu+0x19f0>)
 8002f1c:	f006 fd5a 	bl	80099d4 <HAL_GPIO_ReadPin>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d115      	bne.n	8002f52 <menu+0x18fe>
 8002f26:	4b48      	ldr	r3, [pc, #288]	; (8003048 <menu+0x19f4>)
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	f083 0301 	eor.w	r3, r3, #1
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00e      	beq.n	8002f52 <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 8002f34:	4b41      	ldr	r3, [pc, #260]	; (800303c <menu+0x19e8>)
 8002f36:	781b      	ldrb	r3, [r3, #0]
 8002f38:	3b01      	subs	r3, #1
 8002f3a:	b2da      	uxtb	r2, r3
 8002f3c:	4b3f      	ldr	r3, [pc, #252]	; (800303c <menu+0x19e8>)
 8002f3e:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002f40:	4b3e      	ldr	r3, [pc, #248]	; (800303c <menu+0x19e8>)
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	2b03      	cmp	r3, #3
 8002f46:	d902      	bls.n	8002f4e <menu+0x18fa>
		   		kapitablaTip = 2;
 8002f48:	4b3c      	ldr	r3, [pc, #240]	; (800303c <menu+0x19e8>)
 8002f4a:	2202      	movs	r2, #2
 8002f4c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002f4e:	f003 f8c9 	bl	80060e4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f52:	2108      	movs	r1, #8
 8002f54:	483b      	ldr	r0, [pc, #236]	; (8003044 <menu+0x19f0>)
 8002f56:	f006 fd3d 	bl	80099d4 <HAL_GPIO_ReadPin>
 8002f5a:	4603      	mov	r3, r0
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d10d      	bne.n	8002f7c <menu+0x1928>
 8002f60:	4b39      	ldr	r3, [pc, #228]	; (8003048 <menu+0x19f4>)
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	f083 0301 	eor.w	r3, r3, #1
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d006      	beq.n	8002f7c <menu+0x1928>
			eepromData[12] = kapitablaTip;
 8002f6e:	4b33      	ldr	r3, [pc, #204]	; (800303c <menu+0x19e8>)
 8002f70:	781a      	ldrb	r2, [r3, #0]
 8002f72:	4b36      	ldr	r3, [pc, #216]	; (800304c <menu+0x19f8>)
 8002f74:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002f76:	4b36      	ldr	r3, [pc, #216]	; (8003050 <menu+0x19fc>)
 8002f78:	2201      	movs	r2, #1
 8002f7a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002f7c:	4b35      	ldr	r3, [pc, #212]	; (8003054 <menu+0x1a00>)
 8002f7e:	781b      	ldrb	r3, [r3, #0]
 8002f80:	2b0e      	cmp	r3, #14
 8002f82:	f040 80f2 	bne.w	800316a <menu+0x1b16>
		if(dilSecim == 0) {
 8002f86:	4b34      	ldr	r3, [pc, #208]	; (8003058 <menu+0x1a04>)
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d105      	bne.n	8002f9a <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8002f8e:	4a33      	ldr	r2, [pc, #204]	; (800305c <menu+0x1a08>)
 8002f90:	2101      	movs	r1, #1
 8002f92:	2001      	movs	r0, #1
 8002f94:	f7fd fae6 	bl	8000564 <lcd_print>
 8002f98:	e008      	b.n	8002fac <menu+0x1958>
		} else if(dilSecim == 1) {
 8002f9a:	4b2f      	ldr	r3, [pc, #188]	; (8003058 <menu+0x1a04>)
 8002f9c:	781b      	ldrb	r3, [r3, #0]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d104      	bne.n	8002fac <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8002fa2:	4a2f      	ldr	r2, [pc, #188]	; (8003060 <menu+0x1a0c>)
 8002fa4:	2101      	movs	r1, #1
 8002fa6:	2001      	movs	r0, #1
 8002fa8:	f7fd fadc 	bl	8000564 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002fac:	4b2d      	ldr	r3, [pc, #180]	; (8003064 <menu+0x1a10>)
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d113      	bne.n	8002fdc <menu+0x1988>
			if(dilSecim == 0){
 8002fb4:	4b28      	ldr	r3, [pc, #160]	; (8003058 <menu+0x1a04>)
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d105      	bne.n	8002fc8 <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 8002fbc:	4a2a      	ldr	r2, [pc, #168]	; (8003068 <menu+0x1a14>)
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	2002      	movs	r0, #2
 8002fc2:	f7fd facf 	bl	8000564 <lcd_print>
 8002fc6:	e071      	b.n	80030ac <menu+0x1a58>
			} else if(dilSecim == 1) {
 8002fc8:	4b23      	ldr	r3, [pc, #140]	; (8003058 <menu+0x1a04>)
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d16d      	bne.n	80030ac <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 8002fd0:	4a26      	ldr	r2, [pc, #152]	; (800306c <menu+0x1a18>)
 8002fd2:	2101      	movs	r1, #1
 8002fd4:	2002      	movs	r0, #2
 8002fd6:	f7fd fac5 	bl	8000564 <lcd_print>
 8002fda:	e067      	b.n	80030ac <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002fdc:	4b21      	ldr	r3, [pc, #132]	; (8003064 <menu+0x1a10>)
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d112      	bne.n	800300a <menu+0x19b6>
			if(dilSecim == 0){
 8002fe4:	4b1c      	ldr	r3, [pc, #112]	; (8003058 <menu+0x1a04>)
 8002fe6:	781b      	ldrb	r3, [r3, #0]
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d104      	bne.n	8002ff6 <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8002fec:	4a20      	ldr	r2, [pc, #128]	; (8003070 <menu+0x1a1c>)
 8002fee:	2101      	movs	r1, #1
 8002ff0:	2002      	movs	r0, #2
 8002ff2:	f7fd fab7 	bl	8000564 <lcd_print>
			}
			if(dilSecim == 1){
 8002ff6:	4b18      	ldr	r3, [pc, #96]	; (8003058 <menu+0x1a04>)
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d156      	bne.n	80030ac <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 8002ffe:	4a1d      	ldr	r2, [pc, #116]	; (8003074 <menu+0x1a20>)
 8003000:	2101      	movs	r1, #1
 8003002:	2002      	movs	r0, #2
 8003004:	f7fd faae 	bl	8000564 <lcd_print>
 8003008:	e050      	b.n	80030ac <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 800300a:	4b16      	ldr	r3, [pc, #88]	; (8003064 <menu+0x1a10>)
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	2b02      	cmp	r3, #2
 8003010:	d136      	bne.n	8003080 <menu+0x1a2c>
			if(dilSecim == 0){
 8003012:	4b11      	ldr	r3, [pc, #68]	; (8003058 <menu+0x1a04>)
 8003014:	781b      	ldrb	r3, [r3, #0]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d105      	bne.n	8003026 <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 800301a:	4a17      	ldr	r2, [pc, #92]	; (8003078 <menu+0x1a24>)
 800301c:	2101      	movs	r1, #1
 800301e:	2002      	movs	r0, #2
 8003020:	f7fd faa0 	bl	8000564 <lcd_print>
 8003024:	e042      	b.n	80030ac <menu+0x1a58>
			} else if(dilSecim == 1) {
 8003026:	4b0c      	ldr	r3, [pc, #48]	; (8003058 <menu+0x1a04>)
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d13e      	bne.n	80030ac <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 800302e:	4a13      	ldr	r2, [pc, #76]	; (800307c <menu+0x1a28>)
 8003030:	2101      	movs	r1, #1
 8003032:	2002      	movs	r0, #2
 8003034:	f7fd fa96 	bl	8000564 <lcd_print>
 8003038:	e038      	b.n	80030ac <menu+0x1a58>
 800303a:	bf00      	nop
 800303c:	20000c1b 	.word	0x20000c1b
 8003040:	0800d24c 	.word	0x0800d24c
 8003044:	40010800 	.word	0x40010800
 8003048:	20000c3f 	.word	0x20000c3f
 800304c:	20000b40 	.word	0x20000b40
 8003050:	20000c3c 	.word	0x20000c3c
 8003054:	20000c10 	.word	0x20000c10
 8003058:	20000c31 	.word	0x20000c31
 800305c:	0800d31c 	.word	0x0800d31c
 8003060:	0800d330 	.word	0x0800d330
 8003064:	20000c1d 	.word	0x20000c1d
 8003068:	0800d344 	.word	0x0800d344
 800306c:	0800d354 	.word	0x0800d354
 8003070:	0800d364 	.word	0x0800d364
 8003074:	0800d374 	.word	0x0800d374
 8003078:	0800d384 	.word	0x0800d384
 800307c:	0800d398 	.word	0x0800d398
			}
		} else if(kapiTablaAcKonum == 3) {
 8003080:	4b9b      	ldr	r3, [pc, #620]	; (80032f0 <menu+0x1c9c>)
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	2b03      	cmp	r3, #3
 8003086:	d111      	bne.n	80030ac <menu+0x1a58>
			if(dilSecim == 0) {
 8003088:	4b9a      	ldr	r3, [pc, #616]	; (80032f4 <menu+0x1ca0>)
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d104      	bne.n	800309a <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 8003090:	4a99      	ldr	r2, [pc, #612]	; (80032f8 <menu+0x1ca4>)
 8003092:	2101      	movs	r1, #1
 8003094:	2002      	movs	r0, #2
 8003096:	f7fd fa65 	bl	8000564 <lcd_print>
			}
			if(dilSecim == 1) {
 800309a:	4b96      	ldr	r3, [pc, #600]	; (80032f4 <menu+0x1ca0>)
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d104      	bne.n	80030ac <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 80030a2:	4a96      	ldr	r2, [pc, #600]	; (80032fc <menu+0x1ca8>)
 80030a4:	2101      	movs	r1, #1
 80030a6:	2002      	movs	r0, #2
 80030a8:	f7fd fa5c 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80030ac:	2102      	movs	r1, #2
 80030ae:	4894      	ldr	r0, [pc, #592]	; (8003300 <menu+0x1cac>)
 80030b0:	f006 fc90 	bl	80099d4 <HAL_GPIO_ReadPin>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b01      	cmp	r3, #1
 80030b8:	d115      	bne.n	80030e6 <menu+0x1a92>
 80030ba:	4b92      	ldr	r3, [pc, #584]	; (8003304 <menu+0x1cb0>)
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	f083 0301 	eor.w	r3, r3, #1
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00e      	beq.n	80030e6 <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 80030c8:	4b89      	ldr	r3, [pc, #548]	; (80032f0 <menu+0x1c9c>)
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	3301      	adds	r3, #1
 80030ce:	b2da      	uxtb	r2, r3
 80030d0:	4b87      	ldr	r3, [pc, #540]	; (80032f0 <menu+0x1c9c>)
 80030d2:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 80030d4:	4b86      	ldr	r3, [pc, #536]	; (80032f0 <menu+0x1c9c>)
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	2b02      	cmp	r3, #2
 80030da:	d902      	bls.n	80030e2 <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 80030dc:	4b84      	ldr	r3, [pc, #528]	; (80032f0 <menu+0x1c9c>)
 80030de:	2200      	movs	r2, #0
 80030e0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80030e2:	f002 ffff 	bl	80060e4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80030e6:	2104      	movs	r1, #4
 80030e8:	4885      	ldr	r0, [pc, #532]	; (8003300 <menu+0x1cac>)
 80030ea:	f006 fc73 	bl	80099d4 <HAL_GPIO_ReadPin>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d115      	bne.n	8003120 <menu+0x1acc>
 80030f4:	4b83      	ldr	r3, [pc, #524]	; (8003304 <menu+0x1cb0>)
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	f083 0301 	eor.w	r3, r3, #1
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00e      	beq.n	8003120 <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8003102:	4b7b      	ldr	r3, [pc, #492]	; (80032f0 <menu+0x1c9c>)
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	3b01      	subs	r3, #1
 8003108:	b2da      	uxtb	r2, r3
 800310a:	4b79      	ldr	r3, [pc, #484]	; (80032f0 <menu+0x1c9c>)
 800310c:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 800310e:	4b78      	ldr	r3, [pc, #480]	; (80032f0 <menu+0x1c9c>)
 8003110:	781b      	ldrb	r3, [r3, #0]
 8003112:	2b03      	cmp	r3, #3
 8003114:	d902      	bls.n	800311c <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 8003116:	4b76      	ldr	r3, [pc, #472]	; (80032f0 <menu+0x1c9c>)
 8003118:	2202      	movs	r2, #2
 800311a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800311c:	f002 ffe2 	bl	80060e4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003120:	2108      	movs	r1, #8
 8003122:	4877      	ldr	r0, [pc, #476]	; (8003300 <menu+0x1cac>)
 8003124:	f006 fc56 	bl	80099d4 <HAL_GPIO_ReadPin>
 8003128:	4603      	mov	r3, r0
 800312a:	2b01      	cmp	r3, #1
 800312c:	d11d      	bne.n	800316a <menu+0x1b16>
 800312e:	4b75      	ldr	r3, [pc, #468]	; (8003304 <menu+0x1cb0>)
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	f083 0301 	eor.w	r3, r3, #1
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b00      	cmp	r3, #0
 800313a:	d016      	beq.n	800316a <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 800313c:	4b6c      	ldr	r3, [pc, #432]	; (80032f0 <menu+0x1c9c>)
 800313e:	781a      	ldrb	r2, [r3, #0]
 8003140:	4b71      	ldr	r3, [pc, #452]	; (8003308 <menu+0x1cb4>)
 8003142:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8003146:	4b6a      	ldr	r3, [pc, #424]	; (80032f0 <menu+0x1c9c>)
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d003      	beq.n	8003156 <menu+0x1b02>
 800314e:	4b68      	ldr	r3, [pc, #416]	; (80032f0 <menu+0x1c9c>)
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	2b02      	cmp	r3, #2
 8003154:	d106      	bne.n	8003164 <menu+0x1b10>
				altLimit = 1;
 8003156:	4b6d      	ldr	r3, [pc, #436]	; (800330c <menu+0x1cb8>)
 8003158:	2201      	movs	r2, #1
 800315a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 800315c:	4b6b      	ldr	r3, [pc, #428]	; (800330c <menu+0x1cb8>)
 800315e:	781a      	ldrb	r2, [r3, #0]
 8003160:	4b69      	ldr	r3, [pc, #420]	; (8003308 <menu+0x1cb4>)
 8003162:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8003164:	4b6a      	ldr	r3, [pc, #424]	; (8003310 <menu+0x1cbc>)
 8003166:	2201      	movs	r2, #1
 8003168:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 800316a:	4b6a      	ldr	r3, [pc, #424]	; (8003314 <menu+0x1cc0>)
 800316c:	781b      	ldrb	r3, [r3, #0]
 800316e:	2b0f      	cmp	r3, #15
 8003170:	d17f      	bne.n	8003272 <menu+0x1c1e>
		if(dilSecim == 0) {
 8003172:	4b60      	ldr	r3, [pc, #384]	; (80032f4 <menu+0x1ca0>)
 8003174:	781b      	ldrb	r3, [r3, #0]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10a      	bne.n	8003190 <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 800317a:	4a67      	ldr	r2, [pc, #412]	; (8003318 <menu+0x1cc4>)
 800317c:	2101      	movs	r1, #1
 800317e:	2001      	movs	r0, #1
 8003180:	f7fd f9f0 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8003184:	4a65      	ldr	r2, [pc, #404]	; (800331c <menu+0x1cc8>)
 8003186:	2101      	movs	r1, #1
 8003188:	2002      	movs	r0, #2
 800318a:	f7fd f9eb 	bl	8000564 <lcd_print>
 800318e:	e00d      	b.n	80031ac <menu+0x1b58>
		} else if(dilSecim == 1) {
 8003190:	4b58      	ldr	r3, [pc, #352]	; (80032f4 <menu+0x1ca0>)
 8003192:	781b      	ldrb	r3, [r3, #0]
 8003194:	2b01      	cmp	r3, #1
 8003196:	d109      	bne.n	80031ac <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 8003198:	4a61      	ldr	r2, [pc, #388]	; (8003320 <menu+0x1ccc>)
 800319a:	2101      	movs	r1, #1
 800319c:	2001      	movs	r0, #1
 800319e:	f7fd f9e1 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 80031a2:	4a60      	ldr	r2, [pc, #384]	; (8003324 <menu+0x1cd0>)
 80031a4:	2101      	movs	r1, #1
 80031a6:	2002      	movs	r0, #2
 80031a8:	f7fd f9dc 	bl	8000564 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 80031ac:	4b5e      	ldr	r3, [pc, #376]	; (8003328 <menu+0x1cd4>)
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	220a      	movs	r2, #10
 80031b2:	495e      	ldr	r1, [pc, #376]	; (800332c <menu+0x1cd8>)
 80031b4:	4618      	mov	r0, r3
 80031b6:	f009 fc03 	bl	800c9c0 <itoa>
		lcd_print(2,16,snum);
 80031ba:	4a5c      	ldr	r2, [pc, #368]	; (800332c <menu+0x1cd8>)
 80031bc:	2110      	movs	r1, #16
 80031be:	2002      	movs	r0, #2
 80031c0:	f7fd f9d0 	bl	8000564 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 80031c4:	2102      	movs	r1, #2
 80031c6:	484e      	ldr	r0, [pc, #312]	; (8003300 <menu+0x1cac>)
 80031c8:	f006 fc04 	bl	80099d4 <HAL_GPIO_ReadPin>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b01      	cmp	r3, #1
 80031d0:	d119      	bne.n	8003206 <menu+0x1bb2>
 80031d2:	4b4c      	ldr	r3, [pc, #304]	; (8003304 <menu+0x1cb0>)
 80031d4:	781b      	ldrb	r3, [r3, #0]
 80031d6:	f083 0301 	eor.w	r3, r3, #1
 80031da:	b2db      	uxtb	r3, r3
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d012      	beq.n	8003206 <menu+0x1bb2>
 80031e0:	4b53      	ldr	r3, [pc, #332]	; (8003330 <menu+0x1cdc>)
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d10e      	bne.n	8003206 <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 80031e8:	4b4f      	ldr	r3, [pc, #316]	; (8003328 <menu+0x1cd4>)
 80031ea:	781b      	ldrb	r3, [r3, #0]
 80031ec:	3301      	adds	r3, #1
 80031ee:	b2da      	uxtb	r2, r3
 80031f0:	4b4d      	ldr	r3, [pc, #308]	; (8003328 <menu+0x1cd4>)
 80031f2:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 80031f4:	4b4c      	ldr	r3, [pc, #304]	; (8003328 <menu+0x1cd4>)
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	2b05      	cmp	r3, #5
 80031fa:	d902      	bls.n	8003202 <menu+0x1bae>
				kapiTablaAcSure = 0;
 80031fc:	4b4a      	ldr	r3, [pc, #296]	; (8003328 <menu+0x1cd4>)
 80031fe:	2200      	movs	r2, #0
 8003200:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003202:	f002 ff6f 	bl	80060e4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8003206:	2104      	movs	r1, #4
 8003208:	483d      	ldr	r0, [pc, #244]	; (8003300 <menu+0x1cac>)
 800320a:	f006 fbe3 	bl	80099d4 <HAL_GPIO_ReadPin>
 800320e:	4603      	mov	r3, r0
 8003210:	2b01      	cmp	r3, #1
 8003212:	d119      	bne.n	8003248 <menu+0x1bf4>
 8003214:	4b3b      	ldr	r3, [pc, #236]	; (8003304 <menu+0x1cb0>)
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	f083 0301 	eor.w	r3, r3, #1
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d012      	beq.n	8003248 <menu+0x1bf4>
 8003222:	4b43      	ldr	r3, [pc, #268]	; (8003330 <menu+0x1cdc>)
 8003224:	781b      	ldrb	r3, [r3, #0]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10e      	bne.n	8003248 <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 800322a:	4b3f      	ldr	r3, [pc, #252]	; (8003328 <menu+0x1cd4>)
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	3b01      	subs	r3, #1
 8003230:	b2da      	uxtb	r2, r3
 8003232:	4b3d      	ldr	r3, [pc, #244]	; (8003328 <menu+0x1cd4>)
 8003234:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8003236:	4b3c      	ldr	r3, [pc, #240]	; (8003328 <menu+0x1cd4>)
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	2b06      	cmp	r3, #6
 800323c:	d902      	bls.n	8003244 <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 800323e:	4b3a      	ldr	r3, [pc, #232]	; (8003328 <menu+0x1cd4>)
 8003240:	2205      	movs	r2, #5
 8003242:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8003244:	f002 ff4e 	bl	80060e4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003248:	2108      	movs	r1, #8
 800324a:	482d      	ldr	r0, [pc, #180]	; (8003300 <menu+0x1cac>)
 800324c:	f006 fbc2 	bl	80099d4 <HAL_GPIO_ReadPin>
 8003250:	4603      	mov	r3, r0
 8003252:	2b01      	cmp	r3, #1
 8003254:	d10d      	bne.n	8003272 <menu+0x1c1e>
 8003256:	4b2b      	ldr	r3, [pc, #172]	; (8003304 <menu+0x1cb0>)
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	f083 0301 	eor.w	r3, r3, #1
 800325e:	b2db      	uxtb	r3, r3
 8003260:	2b00      	cmp	r3, #0
 8003262:	d006      	beq.n	8003272 <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 8003264:	4b30      	ldr	r3, [pc, #192]	; (8003328 <menu+0x1cd4>)
 8003266:	781a      	ldrb	r2, [r3, #0]
 8003268:	4b27      	ldr	r3, [pc, #156]	; (8003308 <menu+0x1cb4>)
 800326a:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 800326c:	4b28      	ldr	r3, [pc, #160]	; (8003310 <menu+0x1cbc>)
 800326e:	2201      	movs	r2, #1
 8003270:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8003272:	4b28      	ldr	r3, [pc, #160]	; (8003314 <menu+0x1cc0>)
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	2b10      	cmp	r3, #16
 8003278:	f040 80bc 	bne.w	80033f4 <menu+0x1da0>
		if(dilSecim == 0) {
 800327c:	4b1d      	ldr	r3, [pc, #116]	; (80032f4 <menu+0x1ca0>)
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d105      	bne.n	8003290 <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 8003284:	4a2b      	ldr	r2, [pc, #172]	; (8003334 <menu+0x1ce0>)
 8003286:	2101      	movs	r1, #1
 8003288:	2001      	movs	r0, #1
 800328a:	f7fd f96b 	bl	8000564 <lcd_print>
 800328e:	e008      	b.n	80032a2 <menu+0x1c4e>
		} else if(dilSecim == 1) {
 8003290:	4b18      	ldr	r3, [pc, #96]	; (80032f4 <menu+0x1ca0>)
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	2b01      	cmp	r3, #1
 8003296:	d104      	bne.n	80032a2 <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 8003298:	4a27      	ldr	r2, [pc, #156]	; (8003338 <menu+0x1ce4>)
 800329a:	2101      	movs	r1, #1
 800329c:	2001      	movs	r0, #1
 800329e:	f7fd f961 	bl	8000564 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 80032a2:	4b26      	ldr	r3, [pc, #152]	; (800333c <menu+0x1ce8>)
 80032a4:	781b      	ldrb	r3, [r3, #0]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d113      	bne.n	80032d2 <menu+0x1c7e>
			if(dilSecim == 0) {
 80032aa:	4b12      	ldr	r3, [pc, #72]	; (80032f4 <menu+0x1ca0>)
 80032ac:	781b      	ldrb	r3, [r3, #0]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d105      	bne.n	80032be <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 80032b2:	4a11      	ldr	r2, [pc, #68]	; (80032f8 <menu+0x1ca4>)
 80032b4:	2101      	movs	r1, #1
 80032b6:	2002      	movs	r0, #2
 80032b8:	f7fd f954 	bl	8000564 <lcd_print>
 80032bc:	e04b      	b.n	8003356 <menu+0x1d02>
			} else if(dilSecim == 1) {
 80032be:	4b0d      	ldr	r3, [pc, #52]	; (80032f4 <menu+0x1ca0>)
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	2b01      	cmp	r3, #1
 80032c4:	d147      	bne.n	8003356 <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 80032c6:	4a0d      	ldr	r2, [pc, #52]	; (80032fc <menu+0x1ca8>)
 80032c8:	2101      	movs	r1, #1
 80032ca:	2002      	movs	r0, #2
 80032cc:	f7fd f94a 	bl	8000564 <lcd_print>
 80032d0:	e041      	b.n	8003356 <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 80032d2:	4b1a      	ldr	r3, [pc, #104]	; (800333c <menu+0x1ce8>)
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	d13d      	bne.n	8003356 <menu+0x1d02>
			if(dilSecim == 0) {
 80032da:	4b06      	ldr	r3, [pc, #24]	; (80032f4 <menu+0x1ca0>)
 80032dc:	781b      	ldrb	r3, [r3, #0]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d130      	bne.n	8003344 <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 80032e2:	4a17      	ldr	r2, [pc, #92]	; (8003340 <menu+0x1cec>)
 80032e4:	2101      	movs	r1, #1
 80032e6:	2002      	movs	r0, #2
 80032e8:	f7fd f93c 	bl	8000564 <lcd_print>
 80032ec:	e033      	b.n	8003356 <menu+0x1d02>
 80032ee:	bf00      	nop
 80032f0:	20000c1d 	.word	0x20000c1d
 80032f4:	20000c31 	.word	0x20000c31
 80032f8:	0800d00c 	.word	0x0800d00c
 80032fc:	0800d020 	.word	0x0800d020
 8003300:	40010800 	.word	0x40010800
 8003304:	20000c3f 	.word	0x20000c3f
 8003308:	20000b40 	.word	0x20000b40
 800330c:	20000c16 	.word	0x20000c16
 8003310:	20000c3c 	.word	0x20000c3c
 8003314:	20000c10 	.word	0x20000c10
 8003318:	0800d3ac 	.word	0x0800d3ac
 800331c:	0800d270 	.word	0x0800d270
 8003320:	0800d3c0 	.word	0x0800d3c0
 8003324:	0800d294 	.word	0x0800d294
 8003328:	20000c2b 	.word	0x20000c2b
 800332c:	20000bb0 	.word	0x20000bb0
 8003330:	20000c1b 	.word	0x20000c1b
 8003334:	0800d3d4 	.word	0x0800d3d4
 8003338:	0800d3e8 	.word	0x0800d3e8
 800333c:	20000c1e 	.word	0x20000c1e
 8003340:	0800d06c 	.word	0x0800d06c
			} else if(dilSecim == 1) {
 8003344:	4b99      	ldr	r3, [pc, #612]	; (80035ac <menu+0x1f58>)
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	2b01      	cmp	r3, #1
 800334a:	d104      	bne.n	8003356 <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 800334c:	4a98      	ldr	r2, [pc, #608]	; (80035b0 <menu+0x1f5c>)
 800334e:	2101      	movs	r1, #1
 8003350:	2002      	movs	r0, #2
 8003352:	f7fd f907 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003356:	2102      	movs	r1, #2
 8003358:	4896      	ldr	r0, [pc, #600]	; (80035b4 <menu+0x1f60>)
 800335a:	f006 fb3b 	bl	80099d4 <HAL_GPIO_ReadPin>
 800335e:	4603      	mov	r3, r0
 8003360:	2b01      	cmp	r3, #1
 8003362:	d115      	bne.n	8003390 <menu+0x1d3c>
 8003364:	4b94      	ldr	r3, [pc, #592]	; (80035b8 <menu+0x1f64>)
 8003366:	781b      	ldrb	r3, [r3, #0]
 8003368:	f083 0301 	eor.w	r3, r3, #1
 800336c:	b2db      	uxtb	r3, r3
 800336e:	2b00      	cmp	r3, #0
 8003370:	d00e      	beq.n	8003390 <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 8003372:	4b92      	ldr	r3, [pc, #584]	; (80035bc <menu+0x1f68>)
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	3301      	adds	r3, #1
 8003378:	b2da      	uxtb	r2, r3
 800337a:	4b90      	ldr	r3, [pc, #576]	; (80035bc <menu+0x1f68>)
 800337c:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 800337e:	4b8f      	ldr	r3, [pc, #572]	; (80035bc <menu+0x1f68>)
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	2b01      	cmp	r3, #1
 8003384:	d902      	bls.n	800338c <menu+0x1d38>
				yukariYavasLimit = 0;
 8003386:	4b8d      	ldr	r3, [pc, #564]	; (80035bc <menu+0x1f68>)
 8003388:	2200      	movs	r2, #0
 800338a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800338c:	f002 feaa 	bl	80060e4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003390:	2104      	movs	r1, #4
 8003392:	4888      	ldr	r0, [pc, #544]	; (80035b4 <menu+0x1f60>)
 8003394:	f006 fb1e 	bl	80099d4 <HAL_GPIO_ReadPin>
 8003398:	4603      	mov	r3, r0
 800339a:	2b01      	cmp	r3, #1
 800339c:	d115      	bne.n	80033ca <menu+0x1d76>
 800339e:	4b86      	ldr	r3, [pc, #536]	; (80035b8 <menu+0x1f64>)
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	f083 0301 	eor.w	r3, r3, #1
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00e      	beq.n	80033ca <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 80033ac:	4b83      	ldr	r3, [pc, #524]	; (80035bc <menu+0x1f68>)
 80033ae:	781b      	ldrb	r3, [r3, #0]
 80033b0:	3b01      	subs	r3, #1
 80033b2:	b2da      	uxtb	r2, r3
 80033b4:	4b81      	ldr	r3, [pc, #516]	; (80035bc <menu+0x1f68>)
 80033b6:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 80033b8:	4b80      	ldr	r3, [pc, #512]	; (80035bc <menu+0x1f68>)
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d002      	beq.n	80033c6 <menu+0x1d72>
		   		yukariYavasLimit = 1;
 80033c0:	4b7e      	ldr	r3, [pc, #504]	; (80035bc <menu+0x1f68>)
 80033c2:	2201      	movs	r2, #1
 80033c4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80033c6:	f002 fe8d 	bl	80060e4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80033ca:	2108      	movs	r1, #8
 80033cc:	4879      	ldr	r0, [pc, #484]	; (80035b4 <menu+0x1f60>)
 80033ce:	f006 fb01 	bl	80099d4 <HAL_GPIO_ReadPin>
 80033d2:	4603      	mov	r3, r0
 80033d4:	2b01      	cmp	r3, #1
 80033d6:	d10d      	bne.n	80033f4 <menu+0x1da0>
 80033d8:	4b77      	ldr	r3, [pc, #476]	; (80035b8 <menu+0x1f64>)
 80033da:	781b      	ldrb	r3, [r3, #0]
 80033dc:	f083 0301 	eor.w	r3, r3, #1
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d006      	beq.n	80033f4 <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 80033e6:	4b75      	ldr	r3, [pc, #468]	; (80035bc <menu+0x1f68>)
 80033e8:	781a      	ldrb	r2, [r3, #0]
 80033ea:	4b75      	ldr	r3, [pc, #468]	; (80035c0 <menu+0x1f6c>)
 80033ec:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 80033ee:	4b75      	ldr	r3, [pc, #468]	; (80035c4 <menu+0x1f70>)
 80033f0:	2201      	movs	r2, #1
 80033f2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 80033f4:	4b74      	ldr	r3, [pc, #464]	; (80035c8 <menu+0x1f74>)
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	2b11      	cmp	r3, #17
 80033fa:	f040 80c3 	bne.w	8003584 <menu+0x1f30>
		if(dilSecim == 0) {
 80033fe:	4b6b      	ldr	r3, [pc, #428]	; (80035ac <menu+0x1f58>)
 8003400:	781b      	ldrb	r3, [r3, #0]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d105      	bne.n	8003412 <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 8003406:	4a71      	ldr	r2, [pc, #452]	; (80035cc <menu+0x1f78>)
 8003408:	2101      	movs	r1, #1
 800340a:	2001      	movs	r0, #1
 800340c:	f7fd f8aa 	bl	8000564 <lcd_print>
 8003410:	e008      	b.n	8003424 <menu+0x1dd0>
		} else if(dilSecim == 1) {
 8003412:	4b66      	ldr	r3, [pc, #408]	; (80035ac <menu+0x1f58>)
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d104      	bne.n	8003424 <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 800341a:	4a6d      	ldr	r2, [pc, #436]	; (80035d0 <menu+0x1f7c>)
 800341c:	2101      	movs	r1, #1
 800341e:	2001      	movs	r0, #1
 8003420:	f7fd f8a0 	bl	8000564 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 8003424:	4b6b      	ldr	r3, [pc, #428]	; (80035d4 <menu+0x1f80>)
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	2b02      	cmp	r3, #2
 800342a:	d113      	bne.n	8003454 <menu+0x1e00>
			if(dilSecim == 0){
 800342c:	4b5f      	ldr	r3, [pc, #380]	; (80035ac <menu+0x1f58>)
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d105      	bne.n	8003440 <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 8003434:	4a68      	ldr	r2, [pc, #416]	; (80035d8 <menu+0x1f84>)
 8003436:	2101      	movs	r1, #1
 8003438:	2002      	movs	r0, #2
 800343a:	f7fd f893 	bl	8000564 <lcd_print>
 800343e:	e038      	b.n	80034b2 <menu+0x1e5e>
			} else if(dilSecim == 1){
 8003440:	4b5a      	ldr	r3, [pc, #360]	; (80035ac <menu+0x1f58>)
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d134      	bne.n	80034b2 <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 8003448:	4a64      	ldr	r2, [pc, #400]	; (80035dc <menu+0x1f88>)
 800344a:	2101      	movs	r1, #1
 800344c:	2002      	movs	r0, #2
 800344e:	f7fd f889 	bl	8000564 <lcd_print>
 8003452:	e02e      	b.n	80034b2 <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003454:	4b5f      	ldr	r3, [pc, #380]	; (80035d4 <menu+0x1f80>)
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d113      	bne.n	8003484 <menu+0x1e30>
			if(dilSecim == 0){
 800345c:	4b53      	ldr	r3, [pc, #332]	; (80035ac <menu+0x1f58>)
 800345e:	781b      	ldrb	r3, [r3, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d105      	bne.n	8003470 <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 8003464:	4a5e      	ldr	r2, [pc, #376]	; (80035e0 <menu+0x1f8c>)
 8003466:	2101      	movs	r1, #1
 8003468:	2002      	movs	r0, #2
 800346a:	f7fd f87b 	bl	8000564 <lcd_print>
 800346e:	e020      	b.n	80034b2 <menu+0x1e5e>
			} else if(dilSecim == 1) {
 8003470:	4b4e      	ldr	r3, [pc, #312]	; (80035ac <menu+0x1f58>)
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	2b01      	cmp	r3, #1
 8003476:	d11c      	bne.n	80034b2 <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 8003478:	4a5a      	ldr	r2, [pc, #360]	; (80035e4 <menu+0x1f90>)
 800347a:	2101      	movs	r1, #1
 800347c:	2002      	movs	r0, #2
 800347e:	f7fd f871 	bl	8000564 <lcd_print>
 8003482:	e016      	b.n	80034b2 <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 8003484:	4b53      	ldr	r3, [pc, #332]	; (80035d4 <menu+0x1f80>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d112      	bne.n	80034b2 <menu+0x1e5e>
			if(dilSecim == 0) {
 800348c:	4b47      	ldr	r3, [pc, #284]	; (80035ac <menu+0x1f58>)
 800348e:	781b      	ldrb	r3, [r3, #0]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d105      	bne.n	80034a0 <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 8003494:	4a54      	ldr	r2, [pc, #336]	; (80035e8 <menu+0x1f94>)
 8003496:	2101      	movs	r1, #1
 8003498:	2002      	movs	r0, #2
 800349a:	f7fd f863 	bl	8000564 <lcd_print>
 800349e:	e008      	b.n	80034b2 <menu+0x1e5e>
			} else if(dilSecim == 1) {
 80034a0:	4b42      	ldr	r3, [pc, #264]	; (80035ac <menu+0x1f58>)
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d104      	bne.n	80034b2 <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 80034a8:	4a50      	ldr	r2, [pc, #320]	; (80035ec <menu+0x1f98>)
 80034aa:	2101      	movs	r1, #1
 80034ac:	2002      	movs	r0, #2
 80034ae:	f7fd f859 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80034b2:	2102      	movs	r1, #2
 80034b4:	483f      	ldr	r0, [pc, #252]	; (80035b4 <menu+0x1f60>)
 80034b6:	f006 fa8d 	bl	80099d4 <HAL_GPIO_ReadPin>
 80034ba:	4603      	mov	r3, r0
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d115      	bne.n	80034ec <menu+0x1e98>
 80034c0:	4b3d      	ldr	r3, [pc, #244]	; (80035b8 <menu+0x1f64>)
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	f083 0301 	eor.w	r3, r3, #1
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00e      	beq.n	80034ec <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 80034ce:	4b41      	ldr	r3, [pc, #260]	; (80035d4 <menu+0x1f80>)
 80034d0:	781b      	ldrb	r3, [r3, #0]
 80034d2:	3301      	adds	r3, #1
 80034d4:	b2da      	uxtb	r2, r3
 80034d6:	4b3f      	ldr	r3, [pc, #252]	; (80035d4 <menu+0x1f80>)
 80034d8:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 80034da:	4b3e      	ldr	r3, [pc, #248]	; (80035d4 <menu+0x1f80>)
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d902      	bls.n	80034e8 <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 80034e2:	4b3c      	ldr	r3, [pc, #240]	; (80035d4 <menu+0x1f80>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80034e8:	f002 fdfc 	bl	80060e4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80034ec:	2104      	movs	r1, #4
 80034ee:	4831      	ldr	r0, [pc, #196]	; (80035b4 <menu+0x1f60>)
 80034f0:	f006 fa70 	bl	80099d4 <HAL_GPIO_ReadPin>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b01      	cmp	r3, #1
 80034f8:	d115      	bne.n	8003526 <menu+0x1ed2>
 80034fa:	4b2f      	ldr	r3, [pc, #188]	; (80035b8 <menu+0x1f64>)
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	f083 0301 	eor.w	r3, r3, #1
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b00      	cmp	r3, #0
 8003506:	d00e      	beq.n	8003526 <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8003508:	4b32      	ldr	r3, [pc, #200]	; (80035d4 <menu+0x1f80>)
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	3b01      	subs	r3, #1
 800350e:	b2da      	uxtb	r2, r3
 8003510:	4b30      	ldr	r3, [pc, #192]	; (80035d4 <menu+0x1f80>)
 8003512:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8003514:	4b2f      	ldr	r3, [pc, #188]	; (80035d4 <menu+0x1f80>)
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	2b03      	cmp	r3, #3
 800351a:	d902      	bls.n	8003522 <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 800351c:	4b2d      	ldr	r3, [pc, #180]	; (80035d4 <menu+0x1f80>)
 800351e:	2202      	movs	r2, #2
 8003520:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003522:	f002 fddf 	bl	80060e4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003526:	2108      	movs	r1, #8
 8003528:	4822      	ldr	r0, [pc, #136]	; (80035b4 <menu+0x1f60>)
 800352a:	f006 fa53 	bl	80099d4 <HAL_GPIO_ReadPin>
 800352e:	4603      	mov	r3, r0
 8003530:	2b01      	cmp	r3, #1
 8003532:	d127      	bne.n	8003584 <menu+0x1f30>
 8003534:	4b20      	ldr	r3, [pc, #128]	; (80035b8 <menu+0x1f64>)
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	f083 0301 	eor.w	r3, r3, #1
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d020      	beq.n	8003584 <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 8003542:	4b24      	ldr	r3, [pc, #144]	; (80035d4 <menu+0x1f80>)
 8003544:	781a      	ldrb	r2, [r3, #0]
 8003546:	4b1e      	ldr	r3, [pc, #120]	; (80035c0 <menu+0x1f6c>)
 8003548:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 800354a:	4b22      	ldr	r3, [pc, #136]	; (80035d4 <menu+0x1f80>)
 800354c:	781b      	ldrb	r3, [r3, #0]
 800354e:	2b02      	cmp	r3, #2
 8003550:	d003      	beq.n	800355a <menu+0x1f06>
 8003552:	4b20      	ldr	r3, [pc, #128]	; (80035d4 <menu+0x1f80>)
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	2b01      	cmp	r3, #1
 8003558:	d106      	bne.n	8003568 <menu+0x1f14>
				calismaSekli = 0;
 800355a:	4b25      	ldr	r3, [pc, #148]	; (80035f0 <menu+0x1f9c>)
 800355c:	2200      	movs	r2, #0
 800355e:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 8003560:	4b23      	ldr	r3, [pc, #140]	; (80035f0 <menu+0x1f9c>)
 8003562:	781a      	ldrb	r2, [r3, #0]
 8003564:	4b16      	ldr	r3, [pc, #88]	; (80035c0 <menu+0x1f6c>)
 8003566:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8003568:	4b1a      	ldr	r3, [pc, #104]	; (80035d4 <menu+0x1f80>)
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	2b01      	cmp	r3, #1
 800356e:	d106      	bne.n	800357e <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 8003570:	4b20      	ldr	r3, [pc, #128]	; (80035f4 <menu+0x1fa0>)
 8003572:	2201      	movs	r2, #1
 8003574:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 8003576:	4b1f      	ldr	r3, [pc, #124]	; (80035f4 <menu+0x1fa0>)
 8003578:	781a      	ldrb	r2, [r3, #0]
 800357a:	4b11      	ldr	r3, [pc, #68]	; (80035c0 <menu+0x1f6c>)
 800357c:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 800357e:	4b11      	ldr	r3, [pc, #68]	; (80035c4 <menu+0x1f70>)
 8003580:	2201      	movs	r2, #1
 8003582:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8003584:	4b10      	ldr	r3, [pc, #64]	; (80035c8 <menu+0x1f74>)
 8003586:	781b      	ldrb	r3, [r3, #0]
 8003588:	2b12      	cmp	r3, #18
 800358a:	f040 80d5 	bne.w	8003738 <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 800358e:	4b11      	ldr	r3, [pc, #68]	; (80035d4 <menu+0x1f80>)
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	2b02      	cmp	r3, #2
 8003594:	d13c      	bne.n	8003610 <menu+0x1fbc>
			if(dilSecim == 0) {
 8003596:	4b05      	ldr	r3, [pc, #20]	; (80035ac <menu+0x1f58>)
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d12e      	bne.n	80035fc <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 800359e:	4a16      	ldr	r2, [pc, #88]	; (80035f8 <menu+0x1fa4>)
 80035a0:	2101      	movs	r1, #1
 80035a2:	2001      	movs	r0, #1
 80035a4:	f7fc ffde 	bl	8000564 <lcd_print>
 80035a8:	e048      	b.n	800363c <menu+0x1fe8>
 80035aa:	bf00      	nop
 80035ac:	20000c31 	.word	0x20000c31
 80035b0:	0800d080 	.word	0x0800d080
 80035b4:	40010800 	.word	0x40010800
 80035b8:	20000c3f 	.word	0x20000c3f
 80035bc:	20000c1e 	.word	0x20000c1e
 80035c0:	20000b40 	.word	0x20000b40
 80035c4:	20000c3c 	.word	0x20000c3c
 80035c8:	20000c10 	.word	0x20000c10
 80035cc:	0800d3fc 	.word	0x0800d3fc
 80035d0:	0800d410 	.word	0x0800d410
 80035d4:	20000c1f 	.word	0x20000c1f
 80035d8:	0800d424 	.word	0x0800d424
 80035dc:	0800d434 	.word	0x0800d434
 80035e0:	0800d444 	.word	0x0800d444
 80035e4:	0800d454 	.word	0x0800d454
 80035e8:	0800d00c 	.word	0x0800d00c
 80035ec:	0800d020 	.word	0x0800d020
 80035f0:	20000c11 	.word	0x20000c11
 80035f4:	20000c22 	.word	0x20000c22
 80035f8:	0800d464 	.word	0x0800d464
			} else if(dilSecim == 1) {
 80035fc:	4b7b      	ldr	r3, [pc, #492]	; (80037ec <menu+0x2198>)
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d11b      	bne.n	800363c <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 8003604:	4a7a      	ldr	r2, [pc, #488]	; (80037f0 <menu+0x219c>)
 8003606:	2101      	movs	r1, #1
 8003608:	2001      	movs	r0, #1
 800360a:	f7fc ffab 	bl	8000564 <lcd_print>
 800360e:	e015      	b.n	800363c <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003610:	4b78      	ldr	r3, [pc, #480]	; (80037f4 <menu+0x21a0>)
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d111      	bne.n	800363c <menu+0x1fe8>
			if(dilSecim == 0){
 8003618:	4b74      	ldr	r3, [pc, #464]	; (80037ec <menu+0x2198>)
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d104      	bne.n	800362a <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 8003620:	4a75      	ldr	r2, [pc, #468]	; (80037f8 <menu+0x21a4>)
 8003622:	2101      	movs	r1, #1
 8003624:	2001      	movs	r0, #1
 8003626:	f7fc ff9d 	bl	8000564 <lcd_print>
			}
			if(dilSecim == 1){
 800362a:	4b70      	ldr	r3, [pc, #448]	; (80037ec <menu+0x2198>)
 800362c:	781b      	ldrb	r3, [r3, #0]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d104      	bne.n	800363c <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 8003632:	4a72      	ldr	r2, [pc, #456]	; (80037fc <menu+0x21a8>)
 8003634:	2101      	movs	r1, #1
 8003636:	2001      	movs	r0, #1
 8003638:	f7fc ff94 	bl	8000564 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 800363c:	4b70      	ldr	r3, [pc, #448]	; (8003800 <menu+0x21ac>)
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d113      	bne.n	800366c <menu+0x2018>
			if(dilSecim == 0) {
 8003644:	4b69      	ldr	r3, [pc, #420]	; (80037ec <menu+0x2198>)
 8003646:	781b      	ldrb	r3, [r3, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d105      	bne.n	8003658 <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 800364c:	4a6d      	ldr	r2, [pc, #436]	; (8003804 <menu+0x21b0>)
 800364e:	2101      	movs	r1, #1
 8003650:	2002      	movs	r0, #2
 8003652:	f7fc ff87 	bl	8000564 <lcd_print>
 8003656:	e020      	b.n	800369a <menu+0x2046>
			} else if(dilSecim == 1){
 8003658:	4b64      	ldr	r3, [pc, #400]	; (80037ec <menu+0x2198>)
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d11c      	bne.n	800369a <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 8003660:	4a69      	ldr	r2, [pc, #420]	; (8003808 <menu+0x21b4>)
 8003662:	2101      	movs	r1, #1
 8003664:	2002      	movs	r0, #2
 8003666:	f7fc ff7d 	bl	8000564 <lcd_print>
 800366a:	e016      	b.n	800369a <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 800366c:	4b64      	ldr	r3, [pc, #400]	; (8003800 <menu+0x21ac>)
 800366e:	781b      	ldrb	r3, [r3, #0]
 8003670:	2b01      	cmp	r3, #1
 8003672:	d112      	bne.n	800369a <menu+0x2046>
			if(dilSecim == 0){
 8003674:	4b5d      	ldr	r3, [pc, #372]	; (80037ec <menu+0x2198>)
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d105      	bne.n	8003688 <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 800367c:	4a63      	ldr	r2, [pc, #396]	; (800380c <menu+0x21b8>)
 800367e:	2101      	movs	r1, #1
 8003680:	2002      	movs	r0, #2
 8003682:	f7fc ff6f 	bl	8000564 <lcd_print>
 8003686:	e008      	b.n	800369a <menu+0x2046>
			} else if(dilSecim == 1){
 8003688:	4b58      	ldr	r3, [pc, #352]	; (80037ec <menu+0x2198>)
 800368a:	781b      	ldrb	r3, [r3, #0]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d104      	bne.n	800369a <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 8003690:	4a5f      	ldr	r2, [pc, #380]	; (8003810 <menu+0x21bc>)
 8003692:	2101      	movs	r1, #1
 8003694:	2002      	movs	r0, #2
 8003696:	f7fc ff65 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800369a:	2102      	movs	r1, #2
 800369c:	485d      	ldr	r0, [pc, #372]	; (8003814 <menu+0x21c0>)
 800369e:	f006 f999 	bl	80099d4 <HAL_GPIO_ReadPin>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d115      	bne.n	80036d4 <menu+0x2080>
 80036a8:	4b5b      	ldr	r3, [pc, #364]	; (8003818 <menu+0x21c4>)
 80036aa:	781b      	ldrb	r3, [r3, #0]
 80036ac:	f083 0301 	eor.w	r3, r3, #1
 80036b0:	b2db      	uxtb	r3, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00e      	beq.n	80036d4 <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 80036b6:	4b52      	ldr	r3, [pc, #328]	; (8003800 <menu+0x21ac>)
 80036b8:	781b      	ldrb	r3, [r3, #0]
 80036ba:	3301      	adds	r3, #1
 80036bc:	b2da      	uxtb	r2, r3
 80036be:	4b50      	ldr	r3, [pc, #320]	; (8003800 <menu+0x21ac>)
 80036c0:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 80036c2:	4b4f      	ldr	r3, [pc, #316]	; (8003800 <menu+0x21ac>)
 80036c4:	781b      	ldrb	r3, [r3, #0]
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d902      	bls.n	80036d0 <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 80036ca:	4b4d      	ldr	r3, [pc, #308]	; (8003800 <menu+0x21ac>)
 80036cc:	2200      	movs	r2, #0
 80036ce:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80036d0:	f002 fd08 	bl	80060e4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80036d4:	2104      	movs	r1, #4
 80036d6:	484f      	ldr	r0, [pc, #316]	; (8003814 <menu+0x21c0>)
 80036d8:	f006 f97c 	bl	80099d4 <HAL_GPIO_ReadPin>
 80036dc:	4603      	mov	r3, r0
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d115      	bne.n	800370e <menu+0x20ba>
 80036e2:	4b4d      	ldr	r3, [pc, #308]	; (8003818 <menu+0x21c4>)
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	f083 0301 	eor.w	r3, r3, #1
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d00e      	beq.n	800370e <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 80036f0:	4b43      	ldr	r3, [pc, #268]	; (8003800 <menu+0x21ac>)
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	3b01      	subs	r3, #1
 80036f6:	b2da      	uxtb	r2, r3
 80036f8:	4b41      	ldr	r3, [pc, #260]	; (8003800 <menu+0x21ac>)
 80036fa:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 80036fc:	4b40      	ldr	r3, [pc, #256]	; (8003800 <menu+0x21ac>)
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d002      	beq.n	800370a <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 8003704:	4b3e      	ldr	r3, [pc, #248]	; (8003800 <menu+0x21ac>)
 8003706:	2201      	movs	r2, #1
 8003708:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800370a:	f002 fceb 	bl	80060e4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800370e:	2108      	movs	r1, #8
 8003710:	4840      	ldr	r0, [pc, #256]	; (8003814 <menu+0x21c0>)
 8003712:	f006 f95f 	bl	80099d4 <HAL_GPIO_ReadPin>
 8003716:	4603      	mov	r3, r0
 8003718:	2b01      	cmp	r3, #1
 800371a:	d10d      	bne.n	8003738 <menu+0x20e4>
 800371c:	4b3e      	ldr	r3, [pc, #248]	; (8003818 <menu+0x21c4>)
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	f083 0301 	eor.w	r3, r3, #1
 8003724:	b2db      	uxtb	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d006      	beq.n	8003738 <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 800372a:	4b35      	ldr	r3, [pc, #212]	; (8003800 <menu+0x21ac>)
 800372c:	781a      	ldrb	r2, [r3, #0]
 800372e:	4b3b      	ldr	r3, [pc, #236]	; (800381c <menu+0x21c8>)
 8003730:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 8003732:	4b3b      	ldr	r3, [pc, #236]	; (8003820 <menu+0x21cc>)
 8003734:	2201      	movs	r2, #1
 8003736:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8003738:	4b3a      	ldr	r3, [pc, #232]	; (8003824 <menu+0x21d0>)
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	2b13      	cmp	r3, #19
 800373e:	f040 80d5 	bne.w	80038ec <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 8003742:	4b2c      	ldr	r3, [pc, #176]	; (80037f4 <menu+0x21a0>)
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	2b02      	cmp	r3, #2
 8003748:	d113      	bne.n	8003772 <menu+0x211e>
			if(dilSecim == 0) {
 800374a:	4b28      	ldr	r3, [pc, #160]	; (80037ec <menu+0x2198>)
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d105      	bne.n	800375e <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 8003752:	4a35      	ldr	r2, [pc, #212]	; (8003828 <menu+0x21d4>)
 8003754:	2101      	movs	r1, #1
 8003756:	2001      	movs	r0, #1
 8003758:	f7fc ff04 	bl	8000564 <lcd_print>
 800375c:	e01f      	b.n	800379e <menu+0x214a>
			} else if(dilSecim == 1) {
 800375e:	4b23      	ldr	r3, [pc, #140]	; (80037ec <menu+0x2198>)
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d11b      	bne.n	800379e <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 8003766:	4a31      	ldr	r2, [pc, #196]	; (800382c <menu+0x21d8>)
 8003768:	2101      	movs	r1, #1
 800376a:	2001      	movs	r0, #1
 800376c:	f7fc fefa 	bl	8000564 <lcd_print>
 8003770:	e015      	b.n	800379e <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003772:	4b20      	ldr	r3, [pc, #128]	; (80037f4 <menu+0x21a0>)
 8003774:	781b      	ldrb	r3, [r3, #0]
 8003776:	2b01      	cmp	r3, #1
 8003778:	d111      	bne.n	800379e <menu+0x214a>
			if(dilSecim == 0) {
 800377a:	4b1c      	ldr	r3, [pc, #112]	; (80037ec <menu+0x2198>)
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d104      	bne.n	800378c <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 8003782:	4a2b      	ldr	r2, [pc, #172]	; (8003830 <menu+0x21dc>)
 8003784:	2101      	movs	r1, #1
 8003786:	2001      	movs	r0, #1
 8003788:	f7fc feec 	bl	8000564 <lcd_print>
			}
			if(dilSecim == 1) {
 800378c:	4b17      	ldr	r3, [pc, #92]	; (80037ec <menu+0x2198>)
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d104      	bne.n	800379e <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 8003794:	4a27      	ldr	r2, [pc, #156]	; (8003834 <menu+0x21e0>)
 8003796:	2101      	movs	r1, #1
 8003798:	2001      	movs	r0, #1
 800379a:	f7fc fee3 	bl	8000564 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 800379e:	4b26      	ldr	r3, [pc, #152]	; (8003838 <menu+0x21e4>)
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d113      	bne.n	80037ce <menu+0x217a>
			if(dilSecim == 0) {
 80037a6:	4b11      	ldr	r3, [pc, #68]	; (80037ec <menu+0x2198>)
 80037a8:	781b      	ldrb	r3, [r3, #0]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d105      	bne.n	80037ba <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 80037ae:	4a15      	ldr	r2, [pc, #84]	; (8003804 <menu+0x21b0>)
 80037b0:	2101      	movs	r1, #1
 80037b2:	2002      	movs	r0, #2
 80037b4:	f7fc fed6 	bl	8000564 <lcd_print>
 80037b8:	e049      	b.n	800384e <menu+0x21fa>
			} else if(dilSecim == 1) {
 80037ba:	4b0c      	ldr	r3, [pc, #48]	; (80037ec <menu+0x2198>)
 80037bc:	781b      	ldrb	r3, [r3, #0]
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d145      	bne.n	800384e <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 80037c2:	4a11      	ldr	r2, [pc, #68]	; (8003808 <menu+0x21b4>)
 80037c4:	2101      	movs	r1, #1
 80037c6:	2002      	movs	r0, #2
 80037c8:	f7fc fecc 	bl	8000564 <lcd_print>
 80037cc:	e03f      	b.n	800384e <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 80037ce:	4b1a      	ldr	r3, [pc, #104]	; (8003838 <menu+0x21e4>)
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d13b      	bne.n	800384e <menu+0x21fa>
			if(dilSecim == 0) {
 80037d6:	4b05      	ldr	r3, [pc, #20]	; (80037ec <menu+0x2198>)
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d12e      	bne.n	800383c <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 80037de:	4a0b      	ldr	r2, [pc, #44]	; (800380c <menu+0x21b8>)
 80037e0:	2101      	movs	r1, #1
 80037e2:	2002      	movs	r0, #2
 80037e4:	f7fc febe 	bl	8000564 <lcd_print>
 80037e8:	e031      	b.n	800384e <menu+0x21fa>
 80037ea:	bf00      	nop
 80037ec:	20000c31 	.word	0x20000c31
 80037f0:	0800d478 	.word	0x0800d478
 80037f4:	20000c1f 	.word	0x20000c1f
 80037f8:	0800d488 	.word	0x0800d488
 80037fc:	0800d49c 	.word	0x0800d49c
 8003800:	20000c20 	.word	0x20000c20
 8003804:	0800d00c 	.word	0x0800d00c
 8003808:	0800d020 	.word	0x0800d020
 800380c:	0800d06c 	.word	0x0800d06c
 8003810:	0800d080 	.word	0x0800d080
 8003814:	40010800 	.word	0x40010800
 8003818:	20000c3f 	.word	0x20000c3f
 800381c:	20000b40 	.word	0x20000b40
 8003820:	20000c3c 	.word	0x20000c3c
 8003824:	20000c10 	.word	0x20000c10
 8003828:	0800d4b0 	.word	0x0800d4b0
 800382c:	0800d4c4 	.word	0x0800d4c4
 8003830:	0800d4d8 	.word	0x0800d4d8
 8003834:	0800d4ec 	.word	0x0800d4ec
 8003838:	20000c21 	.word	0x20000c21
			} else if(dilSecim == 1) {
 800383c:	4b90      	ldr	r3, [pc, #576]	; (8003a80 <menu+0x242c>)
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d104      	bne.n	800384e <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 8003844:	4a8f      	ldr	r2, [pc, #572]	; (8003a84 <menu+0x2430>)
 8003846:	2101      	movs	r1, #1
 8003848:	2002      	movs	r0, #2
 800384a:	f7fc fe8b 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800384e:	2102      	movs	r1, #2
 8003850:	488d      	ldr	r0, [pc, #564]	; (8003a88 <menu+0x2434>)
 8003852:	f006 f8bf 	bl	80099d4 <HAL_GPIO_ReadPin>
 8003856:	4603      	mov	r3, r0
 8003858:	2b01      	cmp	r3, #1
 800385a:	d115      	bne.n	8003888 <menu+0x2234>
 800385c:	4b8b      	ldr	r3, [pc, #556]	; (8003a8c <menu+0x2438>)
 800385e:	781b      	ldrb	r3, [r3, #0]
 8003860:	f083 0301 	eor.w	r3, r3, #1
 8003864:	b2db      	uxtb	r3, r3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d00e      	beq.n	8003888 <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 800386a:	4b89      	ldr	r3, [pc, #548]	; (8003a90 <menu+0x243c>)
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	3301      	adds	r3, #1
 8003870:	b2da      	uxtb	r2, r3
 8003872:	4b87      	ldr	r3, [pc, #540]	; (8003a90 <menu+0x243c>)
 8003874:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 8003876:	4b86      	ldr	r3, [pc, #536]	; (8003a90 <menu+0x243c>)
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d902      	bls.n	8003884 <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 800387e:	4b84      	ldr	r3, [pc, #528]	; (8003a90 <menu+0x243c>)
 8003880:	2200      	movs	r2, #0
 8003882:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003884:	f002 fc2e 	bl	80060e4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003888:	2104      	movs	r1, #4
 800388a:	487f      	ldr	r0, [pc, #508]	; (8003a88 <menu+0x2434>)
 800388c:	f006 f8a2 	bl	80099d4 <HAL_GPIO_ReadPin>
 8003890:	4603      	mov	r3, r0
 8003892:	2b01      	cmp	r3, #1
 8003894:	d115      	bne.n	80038c2 <menu+0x226e>
 8003896:	4b7d      	ldr	r3, [pc, #500]	; (8003a8c <menu+0x2438>)
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	f083 0301 	eor.w	r3, r3, #1
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d00e      	beq.n	80038c2 <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 80038a4:	4b7a      	ldr	r3, [pc, #488]	; (8003a90 <menu+0x243c>)
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	3b01      	subs	r3, #1
 80038aa:	b2da      	uxtb	r2, r3
 80038ac:	4b78      	ldr	r3, [pc, #480]	; (8003a90 <menu+0x243c>)
 80038ae:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 80038b0:	4b77      	ldr	r3, [pc, #476]	; (8003a90 <menu+0x243c>)
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d002      	beq.n	80038be <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 80038b8:	4b75      	ldr	r3, [pc, #468]	; (8003a90 <menu+0x243c>)
 80038ba:	2201      	movs	r2, #1
 80038bc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80038be:	f002 fc11 	bl	80060e4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80038c2:	2108      	movs	r1, #8
 80038c4:	4870      	ldr	r0, [pc, #448]	; (8003a88 <menu+0x2434>)
 80038c6:	f006 f885 	bl	80099d4 <HAL_GPIO_ReadPin>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d10d      	bne.n	80038ec <menu+0x2298>
 80038d0:	4b6e      	ldr	r3, [pc, #440]	; (8003a8c <menu+0x2438>)
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	f083 0301 	eor.w	r3, r3, #1
 80038d8:	b2db      	uxtb	r3, r3
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d006      	beq.n	80038ec <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 80038de:	4b6c      	ldr	r3, [pc, #432]	; (8003a90 <menu+0x243c>)
 80038e0:	781a      	ldrb	r2, [r3, #0]
 80038e2:	4b6c      	ldr	r3, [pc, #432]	; (8003a94 <menu+0x2440>)
 80038e4:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 80038e6:	4b6c      	ldr	r3, [pc, #432]	; (8003a98 <menu+0x2444>)
 80038e8:	2201      	movs	r2, #1
 80038ea:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 80038ec:	4b6b      	ldr	r3, [pc, #428]	; (8003a9c <menu+0x2448>)
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	2b14      	cmp	r3, #20
 80038f2:	f040 80b5 	bne.w	8003a60 <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 80038f6:	4b6a      	ldr	r3, [pc, #424]	; (8003aa0 <menu+0x244c>)
 80038f8:	781b      	ldrb	r3, [r3, #0]
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d113      	bne.n	8003926 <menu+0x22d2>
			if(dilSecim == 0) {
 80038fe:	4b60      	ldr	r3, [pc, #384]	; (8003a80 <menu+0x242c>)
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d105      	bne.n	8003912 <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 8003906:	4a67      	ldr	r2, [pc, #412]	; (8003aa4 <menu+0x2450>)
 8003908:	2101      	movs	r1, #1
 800390a:	2001      	movs	r0, #1
 800390c:	f7fc fe2a 	bl	8000564 <lcd_print>
 8003910:	e020      	b.n	8003954 <menu+0x2300>
			} else if(dilSecim == 1) {
 8003912:	4b5b      	ldr	r3, [pc, #364]	; (8003a80 <menu+0x242c>)
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d11c      	bne.n	8003954 <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 800391a:	4a63      	ldr	r2, [pc, #396]	; (8003aa8 <menu+0x2454>)
 800391c:	2101      	movs	r1, #1
 800391e:	2001      	movs	r0, #1
 8003920:	f7fc fe20 	bl	8000564 <lcd_print>
 8003924:	e016      	b.n	8003954 <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 8003926:	4b5e      	ldr	r3, [pc, #376]	; (8003aa0 <menu+0x244c>)
 8003928:	781b      	ldrb	r3, [r3, #0]
 800392a:	2b02      	cmp	r3, #2
 800392c:	d112      	bne.n	8003954 <menu+0x2300>
			if(dilSecim == 0) {
 800392e:	4b54      	ldr	r3, [pc, #336]	; (8003a80 <menu+0x242c>)
 8003930:	781b      	ldrb	r3, [r3, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d105      	bne.n	8003942 <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 8003936:	4a5d      	ldr	r2, [pc, #372]	; (8003aac <menu+0x2458>)
 8003938:	2101      	movs	r1, #1
 800393a:	2001      	movs	r0, #1
 800393c:	f7fc fe12 	bl	8000564 <lcd_print>
 8003940:	e008      	b.n	8003954 <menu+0x2300>
			} else if(dilSecim == 1) {
 8003942:	4b4f      	ldr	r3, [pc, #316]	; (8003a80 <menu+0x242c>)
 8003944:	781b      	ldrb	r3, [r3, #0]
 8003946:	2b01      	cmp	r3, #1
 8003948:	d104      	bne.n	8003954 <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 800394a:	4a59      	ldr	r2, [pc, #356]	; (8003ab0 <menu+0x245c>)
 800394c:	2101      	movs	r1, #1
 800394e:	2001      	movs	r0, #1
 8003950:	f7fc fe08 	bl	8000564 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 8003954:	4b57      	ldr	r3, [pc, #348]	; (8003ab4 <menu+0x2460>)
 8003956:	781b      	ldrb	r3, [r3, #0]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d113      	bne.n	8003984 <menu+0x2330>
			if(dilSecim == 0) {
 800395c:	4b48      	ldr	r3, [pc, #288]	; (8003a80 <menu+0x242c>)
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d105      	bne.n	8003970 <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 8003964:	4a54      	ldr	r2, [pc, #336]	; (8003ab8 <menu+0x2464>)
 8003966:	2101      	movs	r1, #1
 8003968:	2002      	movs	r0, #2
 800396a:	f7fc fdfb 	bl	8000564 <lcd_print>
 800396e:	e020      	b.n	80039b2 <menu+0x235e>
			} else if(dilSecim == 1) {
 8003970:	4b43      	ldr	r3, [pc, #268]	; (8003a80 <menu+0x242c>)
 8003972:	781b      	ldrb	r3, [r3, #0]
 8003974:	2b01      	cmp	r3, #1
 8003976:	d11c      	bne.n	80039b2 <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 8003978:	4a50      	ldr	r2, [pc, #320]	; (8003abc <menu+0x2468>)
 800397a:	2101      	movs	r1, #1
 800397c:	2002      	movs	r0, #2
 800397e:	f7fc fdf1 	bl	8000564 <lcd_print>
 8003982:	e016      	b.n	80039b2 <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 8003984:	4b4b      	ldr	r3, [pc, #300]	; (8003ab4 <menu+0x2460>)
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	2b01      	cmp	r3, #1
 800398a:	d112      	bne.n	80039b2 <menu+0x235e>
			if(dilSecim == 0) {
 800398c:	4b3c      	ldr	r3, [pc, #240]	; (8003a80 <menu+0x242c>)
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d105      	bne.n	80039a0 <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 8003994:	4a4a      	ldr	r2, [pc, #296]	; (8003ac0 <menu+0x246c>)
 8003996:	2101      	movs	r1, #1
 8003998:	2002      	movs	r0, #2
 800399a:	f7fc fde3 	bl	8000564 <lcd_print>
 800399e:	e008      	b.n	80039b2 <menu+0x235e>
			} else if(dilSecim == 1) {
 80039a0:	4b37      	ldr	r3, [pc, #220]	; (8003a80 <menu+0x242c>)
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	d104      	bne.n	80039b2 <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 80039a8:	4a46      	ldr	r2, [pc, #280]	; (8003ac4 <menu+0x2470>)
 80039aa:	2101      	movs	r1, #1
 80039ac:	2002      	movs	r0, #2
 80039ae:	f7fc fdd9 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 80039b2:	2102      	movs	r1, #2
 80039b4:	4834      	ldr	r0, [pc, #208]	; (8003a88 <menu+0x2434>)
 80039b6:	f006 f80d 	bl	80099d4 <HAL_GPIO_ReadPin>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b01      	cmp	r3, #1
 80039be:	d119      	bne.n	80039f4 <menu+0x23a0>
 80039c0:	4b32      	ldr	r3, [pc, #200]	; (8003a8c <menu+0x2438>)
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	f083 0301 	eor.w	r3, r3, #1
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d012      	beq.n	80039f4 <menu+0x23a0>
 80039ce:	4b34      	ldr	r3, [pc, #208]	; (8003aa0 <menu+0x244c>)
 80039d0:	781b      	ldrb	r3, [r3, #0]
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d10e      	bne.n	80039f4 <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 80039d6:	4b37      	ldr	r3, [pc, #220]	; (8003ab4 <menu+0x2460>)
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	3301      	adds	r3, #1
 80039dc:	b2da      	uxtb	r2, r3
 80039de:	4b35      	ldr	r3, [pc, #212]	; (8003ab4 <menu+0x2460>)
 80039e0:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 80039e2:	4b34      	ldr	r3, [pc, #208]	; (8003ab4 <menu+0x2460>)
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	2b01      	cmp	r3, #1
 80039e8:	d902      	bls.n	80039f0 <menu+0x239c>
				devirmeSilindirTipi = 0;
 80039ea:	4b32      	ldr	r3, [pc, #200]	; (8003ab4 <menu+0x2460>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80039f0:	f002 fb78 	bl	80060e4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 80039f4:	2104      	movs	r1, #4
 80039f6:	4824      	ldr	r0, [pc, #144]	; (8003a88 <menu+0x2434>)
 80039f8:	f005 ffec 	bl	80099d4 <HAL_GPIO_ReadPin>
 80039fc:	4603      	mov	r3, r0
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d119      	bne.n	8003a36 <menu+0x23e2>
 8003a02:	4b22      	ldr	r3, [pc, #136]	; (8003a8c <menu+0x2438>)
 8003a04:	781b      	ldrb	r3, [r3, #0]
 8003a06:	f083 0301 	eor.w	r3, r3, #1
 8003a0a:	b2db      	uxtb	r3, r3
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d012      	beq.n	8003a36 <menu+0x23e2>
 8003a10:	4b23      	ldr	r3, [pc, #140]	; (8003aa0 <menu+0x244c>)
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d10e      	bne.n	8003a36 <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8003a18:	4b26      	ldr	r3, [pc, #152]	; (8003ab4 <menu+0x2460>)
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	b2da      	uxtb	r2, r3
 8003a20:	4b24      	ldr	r3, [pc, #144]	; (8003ab4 <menu+0x2460>)
 8003a22:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8003a24:	4b23      	ldr	r3, [pc, #140]	; (8003ab4 <menu+0x2460>)
 8003a26:	781b      	ldrb	r3, [r3, #0]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d002      	beq.n	8003a32 <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 8003a2c:	4b21      	ldr	r3, [pc, #132]	; (8003ab4 <menu+0x2460>)
 8003a2e:	2201      	movs	r2, #1
 8003a30:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003a32:	f002 fb57 	bl	80060e4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a36:	2108      	movs	r1, #8
 8003a38:	4813      	ldr	r0, [pc, #76]	; (8003a88 <menu+0x2434>)
 8003a3a:	f005 ffcb 	bl	80099d4 <HAL_GPIO_ReadPin>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d10d      	bne.n	8003a60 <menu+0x240c>
 8003a44:	4b11      	ldr	r3, [pc, #68]	; (8003a8c <menu+0x2438>)
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	f083 0301 	eor.w	r3, r3, #1
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d006      	beq.n	8003a60 <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 8003a52:	4b18      	ldr	r3, [pc, #96]	; (8003ab4 <menu+0x2460>)
 8003a54:	781a      	ldrb	r2, [r3, #0]
 8003a56:	4b0f      	ldr	r3, [pc, #60]	; (8003a94 <menu+0x2440>)
 8003a58:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8003a5a:	4b0f      	ldr	r3, [pc, #60]	; (8003a98 <menu+0x2444>)
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 8003a60:	4b0e      	ldr	r3, [pc, #56]	; (8003a9c <menu+0x2448>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	2b15      	cmp	r3, #21
 8003a66:	f040 80c2 	bne.w	8003bee <menu+0x259a>
		if(dilSecim == 0) {
 8003a6a:	4b05      	ldr	r3, [pc, #20]	; (8003a80 <menu+0x242c>)
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d12c      	bne.n	8003acc <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 8003a72:	4a15      	ldr	r2, [pc, #84]	; (8003ac8 <menu+0x2474>)
 8003a74:	2101      	movs	r1, #1
 8003a76:	2001      	movs	r0, #1
 8003a78:	f7fc fd74 	bl	8000564 <lcd_print>
 8003a7c:	e02f      	b.n	8003ade <menu+0x248a>
 8003a7e:	bf00      	nop
 8003a80:	20000c31 	.word	0x20000c31
 8003a84:	0800d080 	.word	0x0800d080
 8003a88:	40010800 	.word	0x40010800
 8003a8c:	20000c3f 	.word	0x20000c3f
 8003a90:	20000c21 	.word	0x20000c21
 8003a94:	20000b40 	.word	0x20000b40
 8003a98:	20000c3c 	.word	0x20000c3c
 8003a9c:	20000c10 	.word	0x20000c10
 8003aa0:	20000c1f 	.word	0x20000c1f
 8003aa4:	0800d500 	.word	0x0800d500
 8003aa8:	0800d514 	.word	0x0800d514
 8003aac:	0800d528 	.word	0x0800d528
 8003ab0:	0800d53c 	.word	0x0800d53c
 8003ab4:	20000c22 	.word	0x20000c22
 8003ab8:	0800d550 	.word	0x0800d550
 8003abc:	0800d564 	.word	0x0800d564
 8003ac0:	0800d574 	.word	0x0800d574
 8003ac4:	0800d588 	.word	0x0800d588
 8003ac8:	0800d598 	.word	0x0800d598
		} else if(dilSecim == 1) {
 8003acc:	4b9c      	ldr	r3, [pc, #624]	; (8003d40 <menu+0x26ec>)
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	d104      	bne.n	8003ade <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 8003ad4:	4a9b      	ldr	r2, [pc, #620]	; (8003d44 <menu+0x26f0>)
 8003ad6:	2101      	movs	r1, #1
 8003ad8:	2001      	movs	r0, #1
 8003ada:	f7fc fd43 	bl	8000564 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 8003ade:	4b9a      	ldr	r3, [pc, #616]	; (8003d48 <menu+0x26f4>)
 8003ae0:	781b      	ldrb	r3, [r3, #0]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d112      	bne.n	8003b0c <menu+0x24b8>
			if(dilSecim == 0) {
 8003ae6:	4b96      	ldr	r3, [pc, #600]	; (8003d40 <menu+0x26ec>)
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d104      	bne.n	8003af8 <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 8003aee:	4a97      	ldr	r2, [pc, #604]	; (8003d4c <menu+0x26f8>)
 8003af0:	2101      	movs	r1, #1
 8003af2:	2002      	movs	r0, #2
 8003af4:	f7fc fd36 	bl	8000564 <lcd_print>
			}
			if(dilSecim == 1) {
 8003af8:	4b91      	ldr	r3, [pc, #580]	; (8003d40 <menu+0x26ec>)
 8003afa:	781b      	ldrb	r3, [r3, #0]
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d11c      	bne.n	8003b3a <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 8003b00:	4a93      	ldr	r2, [pc, #588]	; (8003d50 <menu+0x26fc>)
 8003b02:	2101      	movs	r1, #1
 8003b04:	2002      	movs	r0, #2
 8003b06:	f7fc fd2d 	bl	8000564 <lcd_print>
 8003b0a:	e016      	b.n	8003b3a <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 8003b0c:	4b8e      	ldr	r3, [pc, #568]	; (8003d48 <menu+0x26f4>)
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d112      	bne.n	8003b3a <menu+0x24e6>
			if(dilSecim == 0) {
 8003b14:	4b8a      	ldr	r3, [pc, #552]	; (8003d40 <menu+0x26ec>)
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d105      	bne.n	8003b28 <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 8003b1c:	4a8d      	ldr	r2, [pc, #564]	; (8003d54 <menu+0x2700>)
 8003b1e:	2101      	movs	r1, #1
 8003b20:	2002      	movs	r0, #2
 8003b22:	f7fc fd1f 	bl	8000564 <lcd_print>
 8003b26:	e008      	b.n	8003b3a <menu+0x24e6>
			} else if(dilSecim == 1) {
 8003b28:	4b85      	ldr	r3, [pc, #532]	; (8003d40 <menu+0x26ec>)
 8003b2a:	781b      	ldrb	r3, [r3, #0]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d104      	bne.n	8003b3a <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 8003b30:	4a89      	ldr	r2, [pc, #548]	; (8003d58 <menu+0x2704>)
 8003b32:	2101      	movs	r1, #1
 8003b34:	2002      	movs	r0, #2
 8003b36:	f7fc fd15 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b3a:	2102      	movs	r1, #2
 8003b3c:	4887      	ldr	r0, [pc, #540]	; (8003d5c <menu+0x2708>)
 8003b3e:	f005 ff49 	bl	80099d4 <HAL_GPIO_ReadPin>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b01      	cmp	r3, #1
 8003b46:	d115      	bne.n	8003b74 <menu+0x2520>
 8003b48:	4b85      	ldr	r3, [pc, #532]	; (8003d60 <menu+0x270c>)
 8003b4a:	781b      	ldrb	r3, [r3, #0]
 8003b4c:	f083 0301 	eor.w	r3, r3, #1
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d00e      	beq.n	8003b74 <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 8003b56:	4b7c      	ldr	r3, [pc, #496]	; (8003d48 <menu+0x26f4>)
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	b2da      	uxtb	r2, r3
 8003b5e:	4b7a      	ldr	r3, [pc, #488]	; (8003d48 <menu+0x26f4>)
 8003b60:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 8003b62:	4b79      	ldr	r3, [pc, #484]	; (8003d48 <menu+0x26f4>)
 8003b64:	781b      	ldrb	r3, [r3, #0]
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d902      	bls.n	8003b70 <menu+0x251c>
				platformSilindirTipi = 0;
 8003b6a:	4b77      	ldr	r3, [pc, #476]	; (8003d48 <menu+0x26f4>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003b70:	f002 fab8 	bl	80060e4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b74:	2104      	movs	r1, #4
 8003b76:	4879      	ldr	r0, [pc, #484]	; (8003d5c <menu+0x2708>)
 8003b78:	f005 ff2c 	bl	80099d4 <HAL_GPIO_ReadPin>
 8003b7c:	4603      	mov	r3, r0
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d115      	bne.n	8003bae <menu+0x255a>
 8003b82:	4b77      	ldr	r3, [pc, #476]	; (8003d60 <menu+0x270c>)
 8003b84:	781b      	ldrb	r3, [r3, #0]
 8003b86:	f083 0301 	eor.w	r3, r3, #1
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00e      	beq.n	8003bae <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 8003b90:	4b6d      	ldr	r3, [pc, #436]	; (8003d48 <menu+0x26f4>)
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	3b01      	subs	r3, #1
 8003b96:	b2da      	uxtb	r2, r3
 8003b98:	4b6b      	ldr	r3, [pc, #428]	; (8003d48 <menu+0x26f4>)
 8003b9a:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8003b9c:	4b6a      	ldr	r3, [pc, #424]	; (8003d48 <menu+0x26f4>)
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d002      	beq.n	8003baa <menu+0x2556>
		   		platformSilindirTipi = 1;
 8003ba4:	4b68      	ldr	r3, [pc, #416]	; (8003d48 <menu+0x26f4>)
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003baa:	f002 fa9b 	bl	80060e4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003bae:	2108      	movs	r1, #8
 8003bb0:	486a      	ldr	r0, [pc, #424]	; (8003d5c <menu+0x2708>)
 8003bb2:	f005 ff0f 	bl	80099d4 <HAL_GPIO_ReadPin>
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	2b01      	cmp	r3, #1
 8003bba:	d118      	bne.n	8003bee <menu+0x259a>
 8003bbc:	4b68      	ldr	r3, [pc, #416]	; (8003d60 <menu+0x270c>)
 8003bbe:	781b      	ldrb	r3, [r3, #0]
 8003bc0:	f083 0301 	eor.w	r3, r3, #1
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d011      	beq.n	8003bee <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 8003bca:	4b5f      	ldr	r3, [pc, #380]	; (8003d48 <menu+0x26f4>)
 8003bcc:	781a      	ldrb	r2, [r3, #0]
 8003bce:	4b65      	ldr	r3, [pc, #404]	; (8003d64 <menu+0x2710>)
 8003bd0:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8003bd2:	4b5d      	ldr	r3, [pc, #372]	; (8003d48 <menu+0x26f4>)
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d106      	bne.n	8003be8 <menu+0x2594>
				altLimit = 1;
 8003bda:	4b63      	ldr	r3, [pc, #396]	; (8003d68 <menu+0x2714>)
 8003bdc:	2201      	movs	r2, #1
 8003bde:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8003be0:	4b61      	ldr	r3, [pc, #388]	; (8003d68 <menu+0x2714>)
 8003be2:	781a      	ldrb	r2, [r3, #0]
 8003be4:	4b5f      	ldr	r3, [pc, #380]	; (8003d64 <menu+0x2710>)
 8003be6:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8003be8:	4b60      	ldr	r3, [pc, #384]	; (8003d6c <menu+0x2718>)
 8003bea:	2201      	movs	r2, #1
 8003bec:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8003bee:	4b60      	ldr	r3, [pc, #384]	; (8003d70 <menu+0x271c>)
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	2b16      	cmp	r3, #22
 8003bf4:	f040 8081 	bne.w	8003cfa <menu+0x26a6>
		if(dilSecim == 0) {
 8003bf8:	4b51      	ldr	r3, [pc, #324]	; (8003d40 <menu+0x26ec>)
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d105      	bne.n	8003c0c <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 8003c00:	4a5c      	ldr	r2, [pc, #368]	; (8003d74 <menu+0x2720>)
 8003c02:	2101      	movs	r1, #1
 8003c04:	2001      	movs	r0, #1
 8003c06:	f7fc fcad 	bl	8000564 <lcd_print>
 8003c0a:	e008      	b.n	8003c1e <menu+0x25ca>
		} else if(dilSecim == 1) {
 8003c0c:	4b4c      	ldr	r3, [pc, #304]	; (8003d40 <menu+0x26ec>)
 8003c0e:	781b      	ldrb	r3, [r3, #0]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d104      	bne.n	8003c1e <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8003c14:	4a58      	ldr	r2, [pc, #352]	; (8003d78 <menu+0x2724>)
 8003c16:	2101      	movs	r1, #1
 8003c18:	2001      	movs	r0, #1
 8003c1a:	f7fc fca3 	bl	8000564 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 8003c1e:	4b48      	ldr	r3, [pc, #288]	; (8003d40 <menu+0x26ec>)
 8003c20:	781b      	ldrb	r3, [r3, #0]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d105      	bne.n	8003c32 <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 8003c26:	4a55      	ldr	r2, [pc, #340]	; (8003d7c <menu+0x2728>)
 8003c28:	2101      	movs	r1, #1
 8003c2a:	2002      	movs	r0, #2
 8003c2c:	f7fc fc9a 	bl	8000564 <lcd_print>
 8003c30:	e008      	b.n	8003c44 <menu+0x25f0>
			} else if(dilSecim == 1){
 8003c32:	4b43      	ldr	r3, [pc, #268]	; (8003d40 <menu+0x26ec>)
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d104      	bne.n	8003c44 <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 8003c3a:	4a51      	ldr	r2, [pc, #324]	; (8003d80 <menu+0x272c>)
 8003c3c:	2101      	movs	r1, #1
 8003c3e:	2002      	movs	r0, #2
 8003c40:	f7fc fc90 	bl	8000564 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8003c44:	4b4f      	ldr	r3, [pc, #316]	; (8003d84 <menu+0x2730>)
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	220a      	movs	r2, #10
 8003c4a:	494f      	ldr	r1, [pc, #316]	; (8003d88 <menu+0x2734>)
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	f008 feb7 	bl	800c9c0 <itoa>
		lcd_print(2,16,snum);
 8003c52:	4a4d      	ldr	r2, [pc, #308]	; (8003d88 <menu+0x2734>)
 8003c54:	2110      	movs	r1, #16
 8003c56:	2002      	movs	r0, #2
 8003c58:	f7fc fc84 	bl	8000564 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c5c:	2102      	movs	r1, #2
 8003c5e:	483f      	ldr	r0, [pc, #252]	; (8003d5c <menu+0x2708>)
 8003c60:	f005 feb8 	bl	80099d4 <HAL_GPIO_ReadPin>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b01      	cmp	r3, #1
 8003c68:	d115      	bne.n	8003c96 <menu+0x2642>
 8003c6a:	4b3d      	ldr	r3, [pc, #244]	; (8003d60 <menu+0x270c>)
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	f083 0301 	eor.w	r3, r3, #1
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00e      	beq.n	8003c96 <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 8003c78:	4b42      	ldr	r3, [pc, #264]	; (8003d84 <menu+0x2730>)
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	b2da      	uxtb	r2, r3
 8003c80:	4b40      	ldr	r3, [pc, #256]	; (8003d84 <menu+0x2730>)
 8003c82:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8003c84:	4b3f      	ldr	r3, [pc, #252]	; (8003d84 <menu+0x2730>)
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	2b05      	cmp	r3, #5
 8003c8a:	d902      	bls.n	8003c92 <menu+0x263e>
				yukariValfTmr = 0;
 8003c8c:	4b3d      	ldr	r3, [pc, #244]	; (8003d84 <menu+0x2730>)
 8003c8e:	2200      	movs	r2, #0
 8003c90:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003c92:	f002 fa27 	bl	80060e4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c96:	2104      	movs	r1, #4
 8003c98:	4830      	ldr	r0, [pc, #192]	; (8003d5c <menu+0x2708>)
 8003c9a:	f005 fe9b 	bl	80099d4 <HAL_GPIO_ReadPin>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d115      	bne.n	8003cd0 <menu+0x267c>
 8003ca4:	4b2e      	ldr	r3, [pc, #184]	; (8003d60 <menu+0x270c>)
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	f083 0301 	eor.w	r3, r3, #1
 8003cac:	b2db      	uxtb	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00e      	beq.n	8003cd0 <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 8003cb2:	4b34      	ldr	r3, [pc, #208]	; (8003d84 <menu+0x2730>)
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	b2da      	uxtb	r2, r3
 8003cba:	4b32      	ldr	r3, [pc, #200]	; (8003d84 <menu+0x2730>)
 8003cbc:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8003cbe:	4b31      	ldr	r3, [pc, #196]	; (8003d84 <menu+0x2730>)
 8003cc0:	781b      	ldrb	r3, [r3, #0]
 8003cc2:	2b06      	cmp	r3, #6
 8003cc4:	d902      	bls.n	8003ccc <menu+0x2678>
		   		yukariValfTmr = 5;
 8003cc6:	4b2f      	ldr	r3, [pc, #188]	; (8003d84 <menu+0x2730>)
 8003cc8:	2205      	movs	r2, #5
 8003cca:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003ccc:	f002 fa0a 	bl	80060e4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003cd0:	2108      	movs	r1, #8
 8003cd2:	4822      	ldr	r0, [pc, #136]	; (8003d5c <menu+0x2708>)
 8003cd4:	f005 fe7e 	bl	80099d4 <HAL_GPIO_ReadPin>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d10d      	bne.n	8003cfa <menu+0x26a6>
 8003cde:	4b20      	ldr	r3, [pc, #128]	; (8003d60 <menu+0x270c>)
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	f083 0301 	eor.w	r3, r3, #1
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d006      	beq.n	8003cfa <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 8003cec:	4b25      	ldr	r3, [pc, #148]	; (8003d84 <menu+0x2730>)
 8003cee:	781a      	ldrb	r2, [r3, #0]
 8003cf0:	4b1c      	ldr	r3, [pc, #112]	; (8003d64 <menu+0x2710>)
 8003cf2:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8003cf4:	4b1d      	ldr	r3, [pc, #116]	; (8003d6c <menu+0x2718>)
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8003cfa:	4b1d      	ldr	r3, [pc, #116]	; (8003d70 <menu+0x271c>)
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	2b17      	cmp	r3, #23
 8003d00:	f040 80ac 	bne.w	8003e5c <menu+0x2808>
		if(dilSecim == 0) {
 8003d04:	4b0e      	ldr	r3, [pc, #56]	; (8003d40 <menu+0x26ec>)
 8003d06:	781b      	ldrb	r3, [r3, #0]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d105      	bne.n	8003d18 <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8003d0c:	4a1f      	ldr	r2, [pc, #124]	; (8003d8c <menu+0x2738>)
 8003d0e:	2101      	movs	r1, #1
 8003d10:	2001      	movs	r0, #1
 8003d12:	f7fc fc27 	bl	8000564 <lcd_print>
 8003d16:	e008      	b.n	8003d2a <menu+0x26d6>
		} else if(dilSecim == 1) {
 8003d18:	4b09      	ldr	r3, [pc, #36]	; (8003d40 <menu+0x26ec>)
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d104      	bne.n	8003d2a <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8003d20:	4a1b      	ldr	r2, [pc, #108]	; (8003d90 <menu+0x273c>)
 8003d22:	2101      	movs	r1, #1
 8003d24:	2001      	movs	r0, #1
 8003d26:	f7fc fc1d 	bl	8000564 <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 8003d2a:	4b05      	ldr	r3, [pc, #20]	; (8003d40 <menu+0x26ec>)
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d130      	bne.n	8003d94 <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 8003d32:	4a12      	ldr	r2, [pc, #72]	; (8003d7c <menu+0x2728>)
 8003d34:	2101      	movs	r1, #1
 8003d36:	2002      	movs	r0, #2
 8003d38:	f7fc fc14 	bl	8000564 <lcd_print>
 8003d3c:	e033      	b.n	8003da6 <menu+0x2752>
 8003d3e:	bf00      	nop
 8003d40:	20000c31 	.word	0x20000c31
 8003d44:	0800d5ac 	.word	0x0800d5ac
 8003d48:	20000c23 	.word	0x20000c23
 8003d4c:	0800d550 	.word	0x0800d550
 8003d50:	0800d564 	.word	0x0800d564
 8003d54:	0800d574 	.word	0x0800d574
 8003d58:	0800d588 	.word	0x0800d588
 8003d5c:	40010800 	.word	0x40010800
 8003d60:	20000c3f 	.word	0x20000c3f
 8003d64:	20000b40 	.word	0x20000b40
 8003d68:	20000c16 	.word	0x20000c16
 8003d6c:	20000c3c 	.word	0x20000c3c
 8003d70:	20000c10 	.word	0x20000c10
 8003d74:	0800d5bc 	.word	0x0800d5bc
 8003d78:	0800d5d0 	.word	0x0800d5d0
 8003d7c:	0800d270 	.word	0x0800d270
 8003d80:	0800d5e4 	.word	0x0800d5e4
 8003d84:	20000c24 	.word	0x20000c24
 8003d88:	20000bb0 	.word	0x20000bb0
 8003d8c:	0800d5f4 	.word	0x0800d5f4
 8003d90:	0800d608 	.word	0x0800d608
			} else if(dilSecim == 1) {
 8003d94:	4b98      	ldr	r3, [pc, #608]	; (8003ff8 <menu+0x29a4>)
 8003d96:	781b      	ldrb	r3, [r3, #0]
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d104      	bne.n	8003da6 <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 8003d9c:	4a97      	ldr	r2, [pc, #604]	; (8003ffc <menu+0x29a8>)
 8003d9e:	2101      	movs	r1, #1
 8003da0:	2002      	movs	r0, #2
 8003da2:	f7fc fbdf 	bl	8000564 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8003da6:	4b96      	ldr	r3, [pc, #600]	; (8004000 <menu+0x29ac>)
 8003da8:	781b      	ldrb	r3, [r3, #0]
 8003daa:	220a      	movs	r2, #10
 8003dac:	4995      	ldr	r1, [pc, #596]	; (8004004 <menu+0x29b0>)
 8003dae:	4618      	mov	r0, r3
 8003db0:	f008 fe06 	bl	800c9c0 <itoa>
		lcd_print(2,16,snum);
 8003db4:	4a93      	ldr	r2, [pc, #588]	; (8004004 <menu+0x29b0>)
 8003db6:	2110      	movs	r1, #16
 8003db8:	2002      	movs	r0, #2
 8003dba:	f7fc fbd3 	bl	8000564 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003dbe:	2102      	movs	r1, #2
 8003dc0:	4891      	ldr	r0, [pc, #580]	; (8004008 <menu+0x29b4>)
 8003dc2:	f005 fe07 	bl	80099d4 <HAL_GPIO_ReadPin>
 8003dc6:	4603      	mov	r3, r0
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d115      	bne.n	8003df8 <menu+0x27a4>
 8003dcc:	4b8f      	ldr	r3, [pc, #572]	; (800400c <menu+0x29b8>)
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	f083 0301 	eor.w	r3, r3, #1
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00e      	beq.n	8003df8 <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 8003dda:	4b89      	ldr	r3, [pc, #548]	; (8004000 <menu+0x29ac>)
 8003ddc:	781b      	ldrb	r3, [r3, #0]
 8003dde:	3301      	adds	r3, #1
 8003de0:	b2da      	uxtb	r2, r3
 8003de2:	4b87      	ldr	r3, [pc, #540]	; (8004000 <menu+0x29ac>)
 8003de4:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003de6:	4b86      	ldr	r3, [pc, #536]	; (8004000 <menu+0x29ac>)
 8003de8:	781b      	ldrb	r3, [r3, #0]
 8003dea:	2b05      	cmp	r3, #5
 8003dec:	d902      	bls.n	8003df4 <menu+0x27a0>
				asagiValfTmr = 0;
 8003dee:	4b84      	ldr	r3, [pc, #528]	; (8004000 <menu+0x29ac>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003df4:	f002 f976 	bl	80060e4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003df8:	2104      	movs	r1, #4
 8003dfa:	4883      	ldr	r0, [pc, #524]	; (8004008 <menu+0x29b4>)
 8003dfc:	f005 fdea 	bl	80099d4 <HAL_GPIO_ReadPin>
 8003e00:	4603      	mov	r3, r0
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	d115      	bne.n	8003e32 <menu+0x27de>
 8003e06:	4b81      	ldr	r3, [pc, #516]	; (800400c <menu+0x29b8>)
 8003e08:	781b      	ldrb	r3, [r3, #0]
 8003e0a:	f083 0301 	eor.w	r3, r3, #1
 8003e0e:	b2db      	uxtb	r3, r3
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d00e      	beq.n	8003e32 <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 8003e14:	4b7a      	ldr	r3, [pc, #488]	; (8004000 <menu+0x29ac>)
 8003e16:	781b      	ldrb	r3, [r3, #0]
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	b2da      	uxtb	r2, r3
 8003e1c:	4b78      	ldr	r3, [pc, #480]	; (8004000 <menu+0x29ac>)
 8003e1e:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003e20:	4b77      	ldr	r3, [pc, #476]	; (8004000 <menu+0x29ac>)
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	2b06      	cmp	r3, #6
 8003e26:	d902      	bls.n	8003e2e <menu+0x27da>
		   		asagiValfTmr = 5;
 8003e28:	4b75      	ldr	r3, [pc, #468]	; (8004000 <menu+0x29ac>)
 8003e2a:	2205      	movs	r2, #5
 8003e2c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003e2e:	f002 f959 	bl	80060e4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e32:	2108      	movs	r1, #8
 8003e34:	4874      	ldr	r0, [pc, #464]	; (8004008 <menu+0x29b4>)
 8003e36:	f005 fdcd 	bl	80099d4 <HAL_GPIO_ReadPin>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d10d      	bne.n	8003e5c <menu+0x2808>
 8003e40:	4b72      	ldr	r3, [pc, #456]	; (800400c <menu+0x29b8>)
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	f083 0301 	eor.w	r3, r3, #1
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d006      	beq.n	8003e5c <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 8003e4e:	4b6c      	ldr	r3, [pc, #432]	; (8004000 <menu+0x29ac>)
 8003e50:	781a      	ldrb	r2, [r3, #0]
 8003e52:	4b6f      	ldr	r3, [pc, #444]	; (8004010 <menu+0x29bc>)
 8003e54:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8003e56:	4b6f      	ldr	r3, [pc, #444]	; (8004014 <menu+0x29c0>)
 8003e58:	2201      	movs	r2, #1
 8003e5a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8003e5c:	4b6e      	ldr	r3, [pc, #440]	; (8004018 <menu+0x29c4>)
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	2b18      	cmp	r3, #24
 8003e62:	f040 809d 	bne.w	8003fa0 <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 8003e66:	4b6d      	ldr	r3, [pc, #436]	; (800401c <menu+0x29c8>)
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	2b02      	cmp	r3, #2
 8003e6c:	d113      	bne.n	8003e96 <menu+0x2842>
			if(dilSecim == 0) {
 8003e6e:	4b62      	ldr	r3, [pc, #392]	; (8003ff8 <menu+0x29a4>)
 8003e70:	781b      	ldrb	r3, [r3, #0]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d105      	bne.n	8003e82 <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8003e76:	4a6a      	ldr	r2, [pc, #424]	; (8004020 <menu+0x29cc>)
 8003e78:	2101      	movs	r1, #1
 8003e7a:	2001      	movs	r0, #1
 8003e7c:	f7fc fb72 	bl	8000564 <lcd_print>
 8003e80:	e020      	b.n	8003ec4 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003e82:	4b5d      	ldr	r3, [pc, #372]	; (8003ff8 <menu+0x29a4>)
 8003e84:	781b      	ldrb	r3, [r3, #0]
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d11c      	bne.n	8003ec4 <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8003e8a:	4a66      	ldr	r2, [pc, #408]	; (8004024 <menu+0x29d0>)
 8003e8c:	2101      	movs	r1, #1
 8003e8e:	2001      	movs	r0, #1
 8003e90:	f7fc fb68 	bl	8000564 <lcd_print>
 8003e94:	e016      	b.n	8003ec4 <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003e96:	4b61      	ldr	r3, [pc, #388]	; (800401c <menu+0x29c8>)
 8003e98:	781b      	ldrb	r3, [r3, #0]
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d112      	bne.n	8003ec4 <menu+0x2870>
			if(dilSecim == 0) {
 8003e9e:	4b56      	ldr	r3, [pc, #344]	; (8003ff8 <menu+0x29a4>)
 8003ea0:	781b      	ldrb	r3, [r3, #0]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d105      	bne.n	8003eb2 <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8003ea6:	4a60      	ldr	r2, [pc, #384]	; (8004028 <menu+0x29d4>)
 8003ea8:	2101      	movs	r1, #1
 8003eaa:	2001      	movs	r0, #1
 8003eac:	f7fc fb5a 	bl	8000564 <lcd_print>
 8003eb0:	e008      	b.n	8003ec4 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003eb2:	4b51      	ldr	r3, [pc, #324]	; (8003ff8 <menu+0x29a4>)
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	2b01      	cmp	r3, #1
 8003eb8:	d104      	bne.n	8003ec4 <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8003eba:	4a5c      	ldr	r2, [pc, #368]	; (800402c <menu+0x29d8>)
 8003ebc:	2101      	movs	r1, #1
 8003ebe:	2001      	movs	r0, #1
 8003ec0:	f7fc fb50 	bl	8000564 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003ec4:	4b4c      	ldr	r3, [pc, #304]	; (8003ff8 <menu+0x29a4>)
 8003ec6:	781b      	ldrb	r3, [r3, #0]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d105      	bne.n	8003ed8 <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 8003ecc:	4a58      	ldr	r2, [pc, #352]	; (8004030 <menu+0x29dc>)
 8003ece:	2101      	movs	r1, #1
 8003ed0:	2002      	movs	r0, #2
 8003ed2:	f7fc fb47 	bl	8000564 <lcd_print>
 8003ed6:	e008      	b.n	8003eea <menu+0x2896>
			} else if(dilSecim == 1) {
 8003ed8:	4b47      	ldr	r3, [pc, #284]	; (8003ff8 <menu+0x29a4>)
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d104      	bne.n	8003eea <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 8003ee0:	4a46      	ldr	r2, [pc, #280]	; (8003ffc <menu+0x29a8>)
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	2002      	movs	r0, #2
 8003ee6:	f7fc fb3d 	bl	8000564 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003eea:	4b52      	ldr	r3, [pc, #328]	; (8004034 <menu+0x29e0>)
 8003eec:	781b      	ldrb	r3, [r3, #0]
 8003eee:	220a      	movs	r2, #10
 8003ef0:	4944      	ldr	r1, [pc, #272]	; (8004004 <menu+0x29b0>)
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f008 fd64 	bl	800c9c0 <itoa>
		lcd_print(2, 16, snum);
 8003ef8:	4a42      	ldr	r2, [pc, #264]	; (8004004 <menu+0x29b0>)
 8003efa:	2110      	movs	r1, #16
 8003efc:	2002      	movs	r0, #2
 8003efe:	f7fc fb31 	bl	8000564 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f02:	2102      	movs	r1, #2
 8003f04:	4840      	ldr	r0, [pc, #256]	; (8004008 <menu+0x29b4>)
 8003f06:	f005 fd65 	bl	80099d4 <HAL_GPIO_ReadPin>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d115      	bne.n	8003f3c <menu+0x28e8>
 8003f10:	4b3e      	ldr	r3, [pc, #248]	; (800400c <menu+0x29b8>)
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	f083 0301 	eor.w	r3, r3, #1
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00e      	beq.n	8003f3c <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003f1e:	4b45      	ldr	r3, [pc, #276]	; (8004034 <menu+0x29e0>)
 8003f20:	781b      	ldrb	r3, [r3, #0]
 8003f22:	3301      	adds	r3, #1
 8003f24:	b2da      	uxtb	r2, r3
 8003f26:	4b43      	ldr	r3, [pc, #268]	; (8004034 <menu+0x29e0>)
 8003f28:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003f2a:	4b42      	ldr	r3, [pc, #264]	; (8004034 <menu+0x29e0>)
 8003f2c:	781b      	ldrb	r3, [r3, #0]
 8003f2e:	2b05      	cmp	r3, #5
 8003f30:	d902      	bls.n	8003f38 <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 8003f32:	4b40      	ldr	r3, [pc, #256]	; (8004034 <menu+0x29e0>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003f38:	f002 f8d4 	bl	80060e4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f3c:	2104      	movs	r1, #4
 8003f3e:	4832      	ldr	r0, [pc, #200]	; (8004008 <menu+0x29b4>)
 8003f40:	f005 fd48 	bl	80099d4 <HAL_GPIO_ReadPin>
 8003f44:	4603      	mov	r3, r0
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d115      	bne.n	8003f76 <menu+0x2922>
 8003f4a:	4b30      	ldr	r3, [pc, #192]	; (800400c <menu+0x29b8>)
 8003f4c:	781b      	ldrb	r3, [r3, #0]
 8003f4e:	f083 0301 	eor.w	r3, r3, #1
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00e      	beq.n	8003f76 <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003f58:	4b36      	ldr	r3, [pc, #216]	; (8004034 <menu+0x29e0>)
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	b2da      	uxtb	r2, r3
 8003f60:	4b34      	ldr	r3, [pc, #208]	; (8004034 <menu+0x29e0>)
 8003f62:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003f64:	4b33      	ldr	r3, [pc, #204]	; (8004034 <menu+0x29e0>)
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	2b06      	cmp	r3, #6
 8003f6a:	d902      	bls.n	8003f72 <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 8003f6c:	4b31      	ldr	r3, [pc, #196]	; (8004034 <menu+0x29e0>)
 8003f6e:	2205      	movs	r2, #5
 8003f70:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003f72:	f002 f8b7 	bl	80060e4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f76:	2108      	movs	r1, #8
 8003f78:	4823      	ldr	r0, [pc, #140]	; (8004008 <menu+0x29b4>)
 8003f7a:	f005 fd2b 	bl	80099d4 <HAL_GPIO_ReadPin>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b01      	cmp	r3, #1
 8003f82:	d10d      	bne.n	8003fa0 <menu+0x294c>
 8003f84:	4b21      	ldr	r3, [pc, #132]	; (800400c <menu+0x29b8>)
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	f083 0301 	eor.w	r3, r3, #1
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d006      	beq.n	8003fa0 <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 8003f92:	4b28      	ldr	r3, [pc, #160]	; (8004034 <menu+0x29e0>)
 8003f94:	781a      	ldrb	r2, [r3, #0]
 8003f96:	4b1e      	ldr	r3, [pc, #120]	; (8004010 <menu+0x29bc>)
 8003f98:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003f9a:	4b1e      	ldr	r3, [pc, #120]	; (8004014 <menu+0x29c0>)
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003fa0:	4b1d      	ldr	r3, [pc, #116]	; (8004018 <menu+0x29c4>)
 8003fa2:	781b      	ldrb	r3, [r3, #0]
 8003fa4:	2b19      	cmp	r3, #25
 8003fa6:	f040 80c4 	bne.w	8004132 <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 8003faa:	4b1c      	ldr	r3, [pc, #112]	; (800401c <menu+0x29c8>)
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d113      	bne.n	8003fda <menu+0x2986>
			if(dilSecim == 0) {
 8003fb2:	4b11      	ldr	r3, [pc, #68]	; (8003ff8 <menu+0x29a4>)
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d105      	bne.n	8003fc6 <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003fba:	4a1f      	ldr	r2, [pc, #124]	; (8004038 <menu+0x29e4>)
 8003fbc:	2101      	movs	r1, #1
 8003fbe:	2001      	movs	r0, #1
 8003fc0:	f7fc fad0 	bl	8000564 <lcd_print>
 8003fc4:	e047      	b.n	8004056 <menu+0x2a02>
			} else if(dilSecim == 1) {
 8003fc6:	4b0c      	ldr	r3, [pc, #48]	; (8003ff8 <menu+0x29a4>)
 8003fc8:	781b      	ldrb	r3, [r3, #0]
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d143      	bne.n	8004056 <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003fce:	4a1b      	ldr	r2, [pc, #108]	; (800403c <menu+0x29e8>)
 8003fd0:	2101      	movs	r1, #1
 8003fd2:	2001      	movs	r0, #1
 8003fd4:	f7fc fac6 	bl	8000564 <lcd_print>
 8003fd8:	e03d      	b.n	8004056 <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003fda:	4b10      	ldr	r3, [pc, #64]	; (800401c <menu+0x29c8>)
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d139      	bne.n	8004056 <menu+0x2a02>
			if(dilSecim == 0) {
 8003fe2:	4b05      	ldr	r3, [pc, #20]	; (8003ff8 <menu+0x29a4>)
 8003fe4:	781b      	ldrb	r3, [r3, #0]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d12c      	bne.n	8004044 <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003fea:	4a15      	ldr	r2, [pc, #84]	; (8004040 <menu+0x29ec>)
 8003fec:	2101      	movs	r1, #1
 8003fee:	2001      	movs	r0, #1
 8003ff0:	f7fc fab8 	bl	8000564 <lcd_print>
 8003ff4:	e02f      	b.n	8004056 <menu+0x2a02>
 8003ff6:	bf00      	nop
 8003ff8:	20000c31 	.word	0x20000c31
 8003ffc:	0800d5e4 	.word	0x0800d5e4
 8004000:	20000c25 	.word	0x20000c25
 8004004:	20000bb0 	.word	0x20000bb0
 8004008:	40010800 	.word	0x40010800
 800400c:	20000c3f 	.word	0x20000c3f
 8004010:	20000b40 	.word	0x20000b40
 8004014:	20000c3c 	.word	0x20000c3c
 8004018:	20000c10 	.word	0x20000c10
 800401c:	20000c1f 	.word	0x20000c1f
 8004020:	0800d61c 	.word	0x0800d61c
 8004024:	0800d630 	.word	0x0800d630
 8004028:	0800d644 	.word	0x0800d644
 800402c:	0800d658 	.word	0x0800d658
 8004030:	0800d270 	.word	0x0800d270
 8004034:	20000c26 	.word	0x20000c26
 8004038:	0800d66c 	.word	0x0800d66c
 800403c:	0800d680 	.word	0x0800d680
 8004040:	0800d694 	.word	0x0800d694
			} else if(dilSecim == 1) {
 8004044:	4b73      	ldr	r3, [pc, #460]	; (8004214 <menu+0x2bc0>)
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d104      	bne.n	8004056 <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 800404c:	4a72      	ldr	r2, [pc, #456]	; (8004218 <menu+0x2bc4>)
 800404e:	2101      	movs	r1, #1
 8004050:	2001      	movs	r0, #1
 8004052:	f7fc fa87 	bl	8000564 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8004056:	4b6f      	ldr	r3, [pc, #444]	; (8004214 <menu+0x2bc0>)
 8004058:	781b      	ldrb	r3, [r3, #0]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d105      	bne.n	800406a <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 800405e:	4a6f      	ldr	r2, [pc, #444]	; (800421c <menu+0x2bc8>)
 8004060:	2101      	movs	r1, #1
 8004062:	2002      	movs	r0, #2
 8004064:	f7fc fa7e 	bl	8000564 <lcd_print>
 8004068:	e008      	b.n	800407c <menu+0x2a28>
			} else if(dilSecim == 1) {
 800406a:	4b6a      	ldr	r3, [pc, #424]	; (8004214 <menu+0x2bc0>)
 800406c:	781b      	ldrb	r3, [r3, #0]
 800406e:	2b01      	cmp	r3, #1
 8004070:	d104      	bne.n	800407c <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 8004072:	4a6b      	ldr	r2, [pc, #428]	; (8004220 <menu+0x2bcc>)
 8004074:	2101      	movs	r1, #1
 8004076:	2002      	movs	r0, #2
 8004078:	f7fc fa74 	bl	8000564 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 800407c:	4b69      	ldr	r3, [pc, #420]	; (8004224 <menu+0x2bd0>)
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	220a      	movs	r2, #10
 8004082:	4969      	ldr	r1, [pc, #420]	; (8004228 <menu+0x2bd4>)
 8004084:	4618      	mov	r0, r3
 8004086:	f008 fc9b 	bl	800c9c0 <itoa>
		lcd_print(2,16,snum);
 800408a:	4a67      	ldr	r2, [pc, #412]	; (8004228 <menu+0x2bd4>)
 800408c:	2110      	movs	r1, #16
 800408e:	2002      	movs	r0, #2
 8004090:	f7fc fa68 	bl	8000564 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004094:	2102      	movs	r1, #2
 8004096:	4865      	ldr	r0, [pc, #404]	; (800422c <menu+0x2bd8>)
 8004098:	f005 fc9c 	bl	80099d4 <HAL_GPIO_ReadPin>
 800409c:	4603      	mov	r3, r0
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d115      	bne.n	80040ce <menu+0x2a7a>
 80040a2:	4b63      	ldr	r3, [pc, #396]	; (8004230 <menu+0x2bdc>)
 80040a4:	781b      	ldrb	r3, [r3, #0]
 80040a6:	f083 0301 	eor.w	r3, r3, #1
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00e      	beq.n	80040ce <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 80040b0:	4b5c      	ldr	r3, [pc, #368]	; (8004224 <menu+0x2bd0>)
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	3301      	adds	r3, #1
 80040b6:	b2da      	uxtb	r2, r3
 80040b8:	4b5a      	ldr	r3, [pc, #360]	; (8004224 <menu+0x2bd0>)
 80040ba:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 80040bc:	4b59      	ldr	r3, [pc, #356]	; (8004224 <menu+0x2bd0>)
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	2b05      	cmp	r3, #5
 80040c2:	d902      	bls.n	80040ca <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 80040c4:	4b57      	ldr	r3, [pc, #348]	; (8004224 <menu+0x2bd0>)
 80040c6:	2200      	movs	r2, #0
 80040c8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80040ca:	f002 f80b 	bl	80060e4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80040ce:	2104      	movs	r1, #4
 80040d0:	4856      	ldr	r0, [pc, #344]	; (800422c <menu+0x2bd8>)
 80040d2:	f005 fc7f 	bl	80099d4 <HAL_GPIO_ReadPin>
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b01      	cmp	r3, #1
 80040da:	d115      	bne.n	8004108 <menu+0x2ab4>
 80040dc:	4b54      	ldr	r3, [pc, #336]	; (8004230 <menu+0x2bdc>)
 80040de:	781b      	ldrb	r3, [r3, #0]
 80040e0:	f083 0301 	eor.w	r3, r3, #1
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00e      	beq.n	8004108 <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 80040ea:	4b4e      	ldr	r3, [pc, #312]	; (8004224 <menu+0x2bd0>)
 80040ec:	781b      	ldrb	r3, [r3, #0]
 80040ee:	3b01      	subs	r3, #1
 80040f0:	b2da      	uxtb	r2, r3
 80040f2:	4b4c      	ldr	r3, [pc, #304]	; (8004224 <menu+0x2bd0>)
 80040f4:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 80040f6:	4b4b      	ldr	r3, [pc, #300]	; (8004224 <menu+0x2bd0>)
 80040f8:	781b      	ldrb	r3, [r3, #0]
 80040fa:	2b06      	cmp	r3, #6
 80040fc:	d902      	bls.n	8004104 <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 80040fe:	4b49      	ldr	r3, [pc, #292]	; (8004224 <menu+0x2bd0>)
 8004100:	2205      	movs	r2, #5
 8004102:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004104:	f001 ffee 	bl	80060e4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004108:	2108      	movs	r1, #8
 800410a:	4848      	ldr	r0, [pc, #288]	; (800422c <menu+0x2bd8>)
 800410c:	f005 fc62 	bl	80099d4 <HAL_GPIO_ReadPin>
 8004110:	4603      	mov	r3, r0
 8004112:	2b01      	cmp	r3, #1
 8004114:	d10d      	bne.n	8004132 <menu+0x2ade>
 8004116:	4b46      	ldr	r3, [pc, #280]	; (8004230 <menu+0x2bdc>)
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	f083 0301 	eor.w	r3, r3, #1
 800411e:	b2db      	uxtb	r3, r3
 8004120:	2b00      	cmp	r3, #0
 8004122:	d006      	beq.n	8004132 <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8004124:	4b3f      	ldr	r3, [pc, #252]	; (8004224 <menu+0x2bd0>)
 8004126:	781a      	ldrb	r2, [r3, #0]
 8004128:	4b42      	ldr	r3, [pc, #264]	; (8004234 <menu+0x2be0>)
 800412a:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 800412c:	4b42      	ldr	r3, [pc, #264]	; (8004238 <menu+0x2be4>)
 800412e:	2201      	movs	r2, #1
 8004130:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8004132:	4b42      	ldr	r3, [pc, #264]	; (800423c <menu+0x2be8>)
 8004134:	781b      	ldrb	r3, [r3, #0]
 8004136:	2b1a      	cmp	r3, #26
 8004138:	f040 80ec 	bne.w	8004314 <menu+0x2cc0>
		if(dilSecim == 0) {
 800413c:	4b35      	ldr	r3, [pc, #212]	; (8004214 <menu+0x2bc0>)
 800413e:	781b      	ldrb	r3, [r3, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d105      	bne.n	8004150 <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8004144:	4a3e      	ldr	r2, [pc, #248]	; (8004240 <menu+0x2bec>)
 8004146:	2101      	movs	r1, #1
 8004148:	2001      	movs	r0, #1
 800414a:	f7fc fa0b 	bl	8000564 <lcd_print>
 800414e:	e008      	b.n	8004162 <menu+0x2b0e>
		} else if(dilSecim == 1) {
 8004150:	4b30      	ldr	r3, [pc, #192]	; (8004214 <menu+0x2bc0>)
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	2b01      	cmp	r3, #1
 8004156:	d104      	bne.n	8004162 <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 8004158:	4a3a      	ldr	r2, [pc, #232]	; (8004244 <menu+0x2bf0>)
 800415a:	2101      	movs	r1, #1
 800415c:	2001      	movs	r0, #1
 800415e:	f7fc fa01 	bl	8000564 <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 8004162:	4b39      	ldr	r3, [pc, #228]	; (8004248 <menu+0x2bf4>)
 8004164:	781b      	ldrb	r3, [r3, #0]
 8004166:	2b63      	cmp	r3, #99	; 0x63
 8004168:	d91e      	bls.n	80041a8 <menu+0x2b54>
			if(dilSecim == 0) {
 800416a:	4b2a      	ldr	r3, [pc, #168]	; (8004214 <menu+0x2bc0>)
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d104      	bne.n	800417c <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 8004172:	4a2a      	ldr	r2, [pc, #168]	; (800421c <menu+0x2bc8>)
 8004174:	2101      	movs	r1, #1
 8004176:	2002      	movs	r0, #2
 8004178:	f7fc f9f4 	bl	8000564 <lcd_print>
			}
			if(dilSecim == 1) {
 800417c:	4b25      	ldr	r3, [pc, #148]	; (8004214 <menu+0x2bc0>)
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	2b01      	cmp	r3, #1
 8004182:	d104      	bne.n	800418e <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 8004184:	4a26      	ldr	r2, [pc, #152]	; (8004220 <menu+0x2bcc>)
 8004186:	2101      	movs	r1, #1
 8004188:	2002      	movs	r0, #2
 800418a:	f7fc f9eb 	bl	8000564 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 800418e:	4b2e      	ldr	r3, [pc, #184]	; (8004248 <menu+0x2bf4>)
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	220a      	movs	r2, #10
 8004194:	4924      	ldr	r1, [pc, #144]	; (8004228 <menu+0x2bd4>)
 8004196:	4618      	mov	r0, r3
 8004198:	f008 fc12 	bl	800c9c0 <itoa>
			lcd_print(2,14,snum);
 800419c:	4a22      	ldr	r2, [pc, #136]	; (8004228 <menu+0x2bd4>)
 800419e:	210e      	movs	r1, #14
 80041a0:	2002      	movs	r0, #2
 80041a2:	f7fc f9df 	bl	8000564 <lcd_print>
 80041a6:	e066      	b.n	8004276 <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 80041a8:	4b27      	ldr	r3, [pc, #156]	; (8004248 <menu+0x2bf4>)
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	2b09      	cmp	r3, #9
 80041ae:	d923      	bls.n	80041f8 <menu+0x2ba4>
 80041b0:	4b25      	ldr	r3, [pc, #148]	; (8004248 <menu+0x2bf4>)
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	2b63      	cmp	r3, #99	; 0x63
 80041b6:	d81f      	bhi.n	80041f8 <menu+0x2ba4>
			if(dilSecim == 0) {
 80041b8:	4b16      	ldr	r3, [pc, #88]	; (8004214 <menu+0x2bc0>)
 80041ba:	781b      	ldrb	r3, [r3, #0]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d105      	bne.n	80041cc <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 80041c0:	4a16      	ldr	r2, [pc, #88]	; (800421c <menu+0x2bc8>)
 80041c2:	2101      	movs	r1, #1
 80041c4:	2002      	movs	r0, #2
 80041c6:	f7fc f9cd 	bl	8000564 <lcd_print>
 80041ca:	e008      	b.n	80041de <menu+0x2b8a>
			} else if(dilSecim == 1) {
 80041cc:	4b11      	ldr	r3, [pc, #68]	; (8004214 <menu+0x2bc0>)
 80041ce:	781b      	ldrb	r3, [r3, #0]
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d104      	bne.n	80041de <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 80041d4:	4a12      	ldr	r2, [pc, #72]	; (8004220 <menu+0x2bcc>)
 80041d6:	2101      	movs	r1, #1
 80041d8:	2002      	movs	r0, #2
 80041da:	f7fc f9c3 	bl	8000564 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 80041de:	4b1a      	ldr	r3, [pc, #104]	; (8004248 <menu+0x2bf4>)
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	220a      	movs	r2, #10
 80041e4:	4910      	ldr	r1, [pc, #64]	; (8004228 <menu+0x2bd4>)
 80041e6:	4618      	mov	r0, r3
 80041e8:	f008 fbea 	bl	800c9c0 <itoa>
			lcd_print(2, 15, snum);
 80041ec:	4a0e      	ldr	r2, [pc, #56]	; (8004228 <menu+0x2bd4>)
 80041ee:	210f      	movs	r1, #15
 80041f0:	2002      	movs	r0, #2
 80041f2:	f7fc f9b7 	bl	8000564 <lcd_print>
 80041f6:	e03e      	b.n	8004276 <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 80041f8:	4b13      	ldr	r3, [pc, #76]	; (8004248 <menu+0x2bf4>)
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	2b09      	cmp	r3, #9
 80041fe:	d83a      	bhi.n	8004276 <menu+0x2c22>
			if(dilSecim == 0) {
 8004200:	4b04      	ldr	r3, [pc, #16]	; (8004214 <menu+0x2bc0>)
 8004202:	781b      	ldrb	r3, [r3, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d121      	bne.n	800424c <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 8004208:	4a04      	ldr	r2, [pc, #16]	; (800421c <menu+0x2bc8>)
 800420a:	2101      	movs	r1, #1
 800420c:	2002      	movs	r0, #2
 800420e:	f7fc f9a9 	bl	8000564 <lcd_print>
 8004212:	e024      	b.n	800425e <menu+0x2c0a>
 8004214:	20000c31 	.word	0x20000c31
 8004218:	0800d6a8 	.word	0x0800d6a8
 800421c:	0800d270 	.word	0x0800d270
 8004220:	0800d5e4 	.word	0x0800d5e4
 8004224:	20000c27 	.word	0x20000c27
 8004228:	20000bb0 	.word	0x20000bb0
 800422c:	40010800 	.word	0x40010800
 8004230:	20000c3f 	.word	0x20000c3f
 8004234:	20000b40 	.word	0x20000b40
 8004238:	20000c3c 	.word	0x20000c3c
 800423c:	20000c10 	.word	0x20000c10
 8004240:	0800d6bc 	.word	0x0800d6bc
 8004244:	0800d6d0 	.word	0x0800d6d0
 8004248:	20000c28 	.word	0x20000c28
			} else if(dilSecim == 1) {
 800424c:	4b8f      	ldr	r3, [pc, #572]	; (800448c <menu+0x2e38>)
 800424e:	781b      	ldrb	r3, [r3, #0]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d104      	bne.n	800425e <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 8004254:	4a8e      	ldr	r2, [pc, #568]	; (8004490 <menu+0x2e3c>)
 8004256:	2101      	movs	r1, #1
 8004258:	2002      	movs	r0, #2
 800425a:	f7fc f983 	bl	8000564 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 800425e:	4b8d      	ldr	r3, [pc, #564]	; (8004494 <menu+0x2e40>)
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	220a      	movs	r2, #10
 8004264:	498c      	ldr	r1, [pc, #560]	; (8004498 <menu+0x2e44>)
 8004266:	4618      	mov	r0, r3
 8004268:	f008 fbaa 	bl	800c9c0 <itoa>
			lcd_print(2, 16, snum);
 800426c:	4a8a      	ldr	r2, [pc, #552]	; (8004498 <menu+0x2e44>)
 800426e:	2110      	movs	r1, #16
 8004270:	2002      	movs	r0, #2
 8004272:	f7fc f977 	bl	8000564 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004276:	2102      	movs	r1, #2
 8004278:	4888      	ldr	r0, [pc, #544]	; (800449c <menu+0x2e48>)
 800427a:	f005 fbab 	bl	80099d4 <HAL_GPIO_ReadPin>
 800427e:	4603      	mov	r3, r0
 8004280:	2b01      	cmp	r3, #1
 8004282:	d115      	bne.n	80042b0 <menu+0x2c5c>
 8004284:	4b86      	ldr	r3, [pc, #536]	; (80044a0 <menu+0x2e4c>)
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	f083 0301 	eor.w	r3, r3, #1
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00e      	beq.n	80042b0 <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 8004292:	4b80      	ldr	r3, [pc, #512]	; (8004494 <menu+0x2e40>)
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	3301      	adds	r3, #1
 8004298:	b2da      	uxtb	r2, r3
 800429a:	4b7e      	ldr	r3, [pc, #504]	; (8004494 <menu+0x2e40>)
 800429c:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 800429e:	4b7d      	ldr	r3, [pc, #500]	; (8004494 <menu+0x2e40>)
 80042a0:	781b      	ldrb	r3, [r3, #0]
 80042a2:	2bb4      	cmp	r3, #180	; 0xb4
 80042a4:	d902      	bls.n	80042ac <menu+0x2c58>
				makineCalismaTmr = 0;
 80042a6:	4b7b      	ldr	r3, [pc, #492]	; (8004494 <menu+0x2e40>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80042ac:	f001 ff1a 	bl	80060e4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80042b0:	2104      	movs	r1, #4
 80042b2:	487a      	ldr	r0, [pc, #488]	; (800449c <menu+0x2e48>)
 80042b4:	f005 fb8e 	bl	80099d4 <HAL_GPIO_ReadPin>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d115      	bne.n	80042ea <menu+0x2c96>
 80042be:	4b78      	ldr	r3, [pc, #480]	; (80044a0 <menu+0x2e4c>)
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	f083 0301 	eor.w	r3, r3, #1
 80042c6:	b2db      	uxtb	r3, r3
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d00e      	beq.n	80042ea <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 80042cc:	4b71      	ldr	r3, [pc, #452]	; (8004494 <menu+0x2e40>)
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	3b01      	subs	r3, #1
 80042d2:	b2da      	uxtb	r2, r3
 80042d4:	4b6f      	ldr	r3, [pc, #444]	; (8004494 <menu+0x2e40>)
 80042d6:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 80042d8:	4b6e      	ldr	r3, [pc, #440]	; (8004494 <menu+0x2e40>)
 80042da:	781b      	ldrb	r3, [r3, #0]
 80042dc:	2bb5      	cmp	r3, #181	; 0xb5
 80042de:	d902      	bls.n	80042e6 <menu+0x2c92>
		   		makineCalismaTmr = 180;
 80042e0:	4b6c      	ldr	r3, [pc, #432]	; (8004494 <menu+0x2e40>)
 80042e2:	22b4      	movs	r2, #180	; 0xb4
 80042e4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80042e6:	f001 fefd 	bl	80060e4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80042ea:	2108      	movs	r1, #8
 80042ec:	486b      	ldr	r0, [pc, #428]	; (800449c <menu+0x2e48>)
 80042ee:	f005 fb71 	bl	80099d4 <HAL_GPIO_ReadPin>
 80042f2:	4603      	mov	r3, r0
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d10d      	bne.n	8004314 <menu+0x2cc0>
 80042f8:	4b69      	ldr	r3, [pc, #420]	; (80044a0 <menu+0x2e4c>)
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	f083 0301 	eor.w	r3, r3, #1
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b00      	cmp	r3, #0
 8004304:	d006      	beq.n	8004314 <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 8004306:	4b63      	ldr	r3, [pc, #396]	; (8004494 <menu+0x2e40>)
 8004308:	781a      	ldrb	r2, [r3, #0]
 800430a:	4b66      	ldr	r3, [pc, #408]	; (80044a4 <menu+0x2e50>)
 800430c:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 800430e:	4b66      	ldr	r3, [pc, #408]	; (80044a8 <menu+0x2e54>)
 8004310:	2201      	movs	r2, #1
 8004312:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8004314:	4b65      	ldr	r3, [pc, #404]	; (80044ac <menu+0x2e58>)
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	2b1b      	cmp	r3, #27
 800431a:	f040 8083 	bne.w	8004424 <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 800431e:	4a64      	ldr	r2, [pc, #400]	; (80044b0 <menu+0x2e5c>)
 8004320:	2101      	movs	r1, #1
 8004322:	2001      	movs	r0, #1
 8004324:	f7fc f91e 	bl	8000564 <lcd_print>

		if(buzzer == 0) {
 8004328:	4b62      	ldr	r3, [pc, #392]	; (80044b4 <menu+0x2e60>)
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d113      	bne.n	8004358 <menu+0x2d04>
			if(dilSecim == 0) {
 8004330:	4b56      	ldr	r3, [pc, #344]	; (800448c <menu+0x2e38>)
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d105      	bne.n	8004344 <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 8004338:	4a5f      	ldr	r2, [pc, #380]	; (80044b8 <menu+0x2e64>)
 800433a:	2101      	movs	r1, #1
 800433c:	2002      	movs	r0, #2
 800433e:	f7fc f911 	bl	8000564 <lcd_print>
 8004342:	e020      	b.n	8004386 <menu+0x2d32>
			} else if(dilSecim == 1) {
 8004344:	4b51      	ldr	r3, [pc, #324]	; (800448c <menu+0x2e38>)
 8004346:	781b      	ldrb	r3, [r3, #0]
 8004348:	2b01      	cmp	r3, #1
 800434a:	d11c      	bne.n	8004386 <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 800434c:	4a5b      	ldr	r2, [pc, #364]	; (80044bc <menu+0x2e68>)
 800434e:	2101      	movs	r1, #1
 8004350:	2002      	movs	r0, #2
 8004352:	f7fc f907 	bl	8000564 <lcd_print>
 8004356:	e016      	b.n	8004386 <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 8004358:	4b56      	ldr	r3, [pc, #344]	; (80044b4 <menu+0x2e60>)
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d112      	bne.n	8004386 <menu+0x2d32>
			if(dilSecim == 0) {
 8004360:	4b4a      	ldr	r3, [pc, #296]	; (800448c <menu+0x2e38>)
 8004362:	781b      	ldrb	r3, [r3, #0]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d105      	bne.n	8004374 <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 8004368:	4a55      	ldr	r2, [pc, #340]	; (80044c0 <menu+0x2e6c>)
 800436a:	2101      	movs	r1, #1
 800436c:	2002      	movs	r0, #2
 800436e:	f7fc f8f9 	bl	8000564 <lcd_print>
 8004372:	e008      	b.n	8004386 <menu+0x2d32>
			} else if(dilSecim == 1) {
 8004374:	4b45      	ldr	r3, [pc, #276]	; (800448c <menu+0x2e38>)
 8004376:	781b      	ldrb	r3, [r3, #0]
 8004378:	2b01      	cmp	r3, #1
 800437a:	d104      	bne.n	8004386 <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 800437c:	4a51      	ldr	r2, [pc, #324]	; (80044c4 <menu+0x2e70>)
 800437e:	2101      	movs	r1, #1
 8004380:	2002      	movs	r0, #2
 8004382:	f7fc f8ef 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004386:	2102      	movs	r1, #2
 8004388:	4844      	ldr	r0, [pc, #272]	; (800449c <menu+0x2e48>)
 800438a:	f005 fb23 	bl	80099d4 <HAL_GPIO_ReadPin>
 800438e:	4603      	mov	r3, r0
 8004390:	2b01      	cmp	r3, #1
 8004392:	d115      	bne.n	80043c0 <menu+0x2d6c>
 8004394:	4b42      	ldr	r3, [pc, #264]	; (80044a0 <menu+0x2e4c>)
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	f083 0301 	eor.w	r3, r3, #1
 800439c:	b2db      	uxtb	r3, r3
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d00e      	beq.n	80043c0 <menu+0x2d6c>
			buzzer = buzzer + 1;
 80043a2:	4b44      	ldr	r3, [pc, #272]	; (80044b4 <menu+0x2e60>)
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	3301      	adds	r3, #1
 80043a8:	b2da      	uxtb	r2, r3
 80043aa:	4b42      	ldr	r3, [pc, #264]	; (80044b4 <menu+0x2e60>)
 80043ac:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 80043ae:	4b41      	ldr	r3, [pc, #260]	; (80044b4 <menu+0x2e60>)
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d902      	bls.n	80043bc <menu+0x2d68>
				buzzer = 0;
 80043b6:	4b3f      	ldr	r3, [pc, #252]	; (80044b4 <menu+0x2e60>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80043bc:	f001 fe92 	bl	80060e4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80043c0:	2104      	movs	r1, #4
 80043c2:	4836      	ldr	r0, [pc, #216]	; (800449c <menu+0x2e48>)
 80043c4:	f005 fb06 	bl	80099d4 <HAL_GPIO_ReadPin>
 80043c8:	4603      	mov	r3, r0
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d115      	bne.n	80043fa <menu+0x2da6>
 80043ce:	4b34      	ldr	r3, [pc, #208]	; (80044a0 <menu+0x2e4c>)
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	f083 0301 	eor.w	r3, r3, #1
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d00e      	beq.n	80043fa <menu+0x2da6>
			buzzer = buzzer - 1;
 80043dc:	4b35      	ldr	r3, [pc, #212]	; (80044b4 <menu+0x2e60>)
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	3b01      	subs	r3, #1
 80043e2:	b2da      	uxtb	r2, r3
 80043e4:	4b33      	ldr	r3, [pc, #204]	; (80044b4 <menu+0x2e60>)
 80043e6:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 80043e8:	4b32      	ldr	r3, [pc, #200]	; (80044b4 <menu+0x2e60>)
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d002      	beq.n	80043f6 <menu+0x2da2>
		   		buzzer = 1;
 80043f0:	4b30      	ldr	r3, [pc, #192]	; (80044b4 <menu+0x2e60>)
 80043f2:	2201      	movs	r2, #1
 80043f4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80043f6:	f001 fe75 	bl	80060e4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80043fa:	2108      	movs	r1, #8
 80043fc:	4827      	ldr	r0, [pc, #156]	; (800449c <menu+0x2e48>)
 80043fe:	f005 fae9 	bl	80099d4 <HAL_GPIO_ReadPin>
 8004402:	4603      	mov	r3, r0
 8004404:	2b01      	cmp	r3, #1
 8004406:	d10d      	bne.n	8004424 <menu+0x2dd0>
 8004408:	4b25      	ldr	r3, [pc, #148]	; (80044a0 <menu+0x2e4c>)
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	f083 0301 	eor.w	r3, r3, #1
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b00      	cmp	r3, #0
 8004414:	d006      	beq.n	8004424 <menu+0x2dd0>
			eepromData[25] = buzzer;
 8004416:	4b27      	ldr	r3, [pc, #156]	; (80044b4 <menu+0x2e60>)
 8004418:	781a      	ldrb	r2, [r3, #0]
 800441a:	4b22      	ldr	r3, [pc, #136]	; (80044a4 <menu+0x2e50>)
 800441c:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 800441e:	4b22      	ldr	r3, [pc, #136]	; (80044a8 <menu+0x2e54>)
 8004420:	2201      	movs	r2, #1
 8004422:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8004424:	4b21      	ldr	r3, [pc, #132]	; (80044ac <menu+0x2e58>)
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	2b1c      	cmp	r3, #28
 800442a:	f040 80ab 	bne.w	8004584 <menu+0x2f30>
		calismaSayModu = 0;
 800442e:	4b26      	ldr	r3, [pc, #152]	; (80044c8 <menu+0x2e74>)
 8004430:	2200      	movs	r2, #0
 8004432:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8004434:	4a25      	ldr	r2, [pc, #148]	; (80044cc <menu+0x2e78>)
 8004436:	2101      	movs	r1, #1
 8004438:	2001      	movs	r0, #1
 800443a:	f7fc f893 	bl	8000564 <lcd_print>

		if(demoMode == 0) {
 800443e:	4b24      	ldr	r3, [pc, #144]	; (80044d0 <menu+0x2e7c>)
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d113      	bne.n	800446e <menu+0x2e1a>
			if(dilSecim == 0) {
 8004446:	4b11      	ldr	r3, [pc, #68]	; (800448c <menu+0x2e38>)
 8004448:	781b      	ldrb	r3, [r3, #0]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d105      	bne.n	800445a <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 800444e:	4a1a      	ldr	r2, [pc, #104]	; (80044b8 <menu+0x2e64>)
 8004450:	2101      	movs	r1, #1
 8004452:	2002      	movs	r0, #2
 8004454:	f7fc f886 	bl	8000564 <lcd_print>
 8004458:	e045      	b.n	80044e6 <menu+0x2e92>
			} else if(dilSecim == 1) {
 800445a:	4b0c      	ldr	r3, [pc, #48]	; (800448c <menu+0x2e38>)
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	2b01      	cmp	r3, #1
 8004460:	d141      	bne.n	80044e6 <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 8004462:	4a16      	ldr	r2, [pc, #88]	; (80044bc <menu+0x2e68>)
 8004464:	2101      	movs	r1, #1
 8004466:	2002      	movs	r0, #2
 8004468:	f7fc f87c 	bl	8000564 <lcd_print>
 800446c:	e03b      	b.n	80044e6 <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 800446e:	4b18      	ldr	r3, [pc, #96]	; (80044d0 <menu+0x2e7c>)
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	2b01      	cmp	r3, #1
 8004474:	d137      	bne.n	80044e6 <menu+0x2e92>
			if(dilSecim == 0){
 8004476:	4b05      	ldr	r3, [pc, #20]	; (800448c <menu+0x2e38>)
 8004478:	781b      	ldrb	r3, [r3, #0]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d12a      	bne.n	80044d4 <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 800447e:	4a10      	ldr	r2, [pc, #64]	; (80044c0 <menu+0x2e6c>)
 8004480:	2101      	movs	r1, #1
 8004482:	2002      	movs	r0, #2
 8004484:	f7fc f86e 	bl	8000564 <lcd_print>
 8004488:	e02d      	b.n	80044e6 <menu+0x2e92>
 800448a:	bf00      	nop
 800448c:	20000c31 	.word	0x20000c31
 8004490:	0800d5e4 	.word	0x0800d5e4
 8004494:	20000c28 	.word	0x20000c28
 8004498:	20000bb0 	.word	0x20000bb0
 800449c:	40010800 	.word	0x40010800
 80044a0:	20000c3f 	.word	0x20000c3f
 80044a4:	20000b40 	.word	0x20000b40
 80044a8:	20000c3c 	.word	0x20000c3c
 80044ac:	20000c10 	.word	0x20000c10
 80044b0:	0800d6e4 	.word	0x0800d6e4
 80044b4:	20000c2c 	.word	0x20000c2c
 80044b8:	0800d00c 	.word	0x0800d00c
 80044bc:	0800d020 	.word	0x0800d020
 80044c0:	0800d06c 	.word	0x0800d06c
 80044c4:	0800d080 	.word	0x0800d080
 80044c8:	20000c30 	.word	0x20000c30
 80044cc:	0800d6f8 	.word	0x0800d6f8
 80044d0:	20000c2e 	.word	0x20000c2e
			} else if(dilSecim == 1) {
 80044d4:	4b71      	ldr	r3, [pc, #452]	; (800469c <menu+0x3048>)
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	2b01      	cmp	r3, #1
 80044da:	d104      	bne.n	80044e6 <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 80044dc:	4a70      	ldr	r2, [pc, #448]	; (80046a0 <menu+0x304c>)
 80044de:	2101      	movs	r1, #1
 80044e0:	2002      	movs	r0, #2
 80044e2:	f7fc f83f 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80044e6:	2102      	movs	r1, #2
 80044e8:	486e      	ldr	r0, [pc, #440]	; (80046a4 <menu+0x3050>)
 80044ea:	f005 fa73 	bl	80099d4 <HAL_GPIO_ReadPin>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d115      	bne.n	8004520 <menu+0x2ecc>
 80044f4:	4b6c      	ldr	r3, [pc, #432]	; (80046a8 <menu+0x3054>)
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	f083 0301 	eor.w	r3, r3, #1
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00e      	beq.n	8004520 <menu+0x2ecc>
			demoMode = demoMode + 1;
 8004502:	4b6a      	ldr	r3, [pc, #424]	; (80046ac <menu+0x3058>)
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	3301      	adds	r3, #1
 8004508:	b2da      	uxtb	r2, r3
 800450a:	4b68      	ldr	r3, [pc, #416]	; (80046ac <menu+0x3058>)
 800450c:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 800450e:	4b67      	ldr	r3, [pc, #412]	; (80046ac <menu+0x3058>)
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d902      	bls.n	800451c <menu+0x2ec8>
				demoMode = 0;
 8004516:	4b65      	ldr	r3, [pc, #404]	; (80046ac <menu+0x3058>)
 8004518:	2200      	movs	r2, #0
 800451a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800451c:	f001 fde2 	bl	80060e4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004520:	2104      	movs	r1, #4
 8004522:	4860      	ldr	r0, [pc, #384]	; (80046a4 <menu+0x3050>)
 8004524:	f005 fa56 	bl	80099d4 <HAL_GPIO_ReadPin>
 8004528:	4603      	mov	r3, r0
 800452a:	2b01      	cmp	r3, #1
 800452c:	d115      	bne.n	800455a <menu+0x2f06>
 800452e:	4b5e      	ldr	r3, [pc, #376]	; (80046a8 <menu+0x3054>)
 8004530:	781b      	ldrb	r3, [r3, #0]
 8004532:	f083 0301 	eor.w	r3, r3, #1
 8004536:	b2db      	uxtb	r3, r3
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00e      	beq.n	800455a <menu+0x2f06>
			demoMode = demoMode - 1;
 800453c:	4b5b      	ldr	r3, [pc, #364]	; (80046ac <menu+0x3058>)
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	3b01      	subs	r3, #1
 8004542:	b2da      	uxtb	r2, r3
 8004544:	4b59      	ldr	r3, [pc, #356]	; (80046ac <menu+0x3058>)
 8004546:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 8004548:	4b58      	ldr	r3, [pc, #352]	; (80046ac <menu+0x3058>)
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d002      	beq.n	8004556 <menu+0x2f02>
		   		demoMode = 1;
 8004550:	4b56      	ldr	r3, [pc, #344]	; (80046ac <menu+0x3058>)
 8004552:	2201      	movs	r2, #1
 8004554:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004556:	f001 fdc5 	bl	80060e4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800455a:	2108      	movs	r1, #8
 800455c:	4851      	ldr	r0, [pc, #324]	; (80046a4 <menu+0x3050>)
 800455e:	f005 fa39 	bl	80099d4 <HAL_GPIO_ReadPin>
 8004562:	4603      	mov	r3, r0
 8004564:	2b01      	cmp	r3, #1
 8004566:	d10d      	bne.n	8004584 <menu+0x2f30>
 8004568:	4b4f      	ldr	r3, [pc, #316]	; (80046a8 <menu+0x3054>)
 800456a:	781b      	ldrb	r3, [r3, #0]
 800456c:	f083 0301 	eor.w	r3, r3, #1
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d006      	beq.n	8004584 <menu+0x2f30>
			eepromData[26] = demoMode;
 8004576:	4b4d      	ldr	r3, [pc, #308]	; (80046ac <menu+0x3058>)
 8004578:	781a      	ldrb	r2, [r3, #0]
 800457a:	4b4d      	ldr	r3, [pc, #308]	; (80046b0 <menu+0x305c>)
 800457c:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 800457e:	4b4d      	ldr	r3, [pc, #308]	; (80046b4 <menu+0x3060>)
 8004580:	2201      	movs	r2, #1
 8004582:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8004584:	4b4c      	ldr	r3, [pc, #304]	; (80046b8 <menu+0x3064>)
 8004586:	781b      	ldrb	r3, [r3, #0]
 8004588:	2b1d      	cmp	r3, #29
 800458a:	f040 8132 	bne.w	80047f2 <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 800458e:	4b4b      	ldr	r3, [pc, #300]	; (80046bc <menu+0x3068>)
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d113      	bne.n	80045be <menu+0x2f6a>
 8004596:	4b4a      	ldr	r3, [pc, #296]	; (80046c0 <menu+0x306c>)
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d10f      	bne.n	80045be <menu+0x2f6a>
 800459e:	4b49      	ldr	r3, [pc, #292]	; (80046c4 <menu+0x3070>)
 80045a0:	781b      	ldrb	r3, [r3, #0]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d10b      	bne.n	80045be <menu+0x2f6a>
 80045a6:	4b48      	ldr	r3, [pc, #288]	; (80046c8 <menu+0x3074>)
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d107      	bne.n	80045be <menu+0x2f6a>
 80045ae:	4b47      	ldr	r3, [pc, #284]	; (80046cc <menu+0x3078>)
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d103      	bne.n	80045be <menu+0x2f6a>
			calismaSayisiYar = 0;
 80045b6:	4b46      	ldr	r3, [pc, #280]	; (80046d0 <menu+0x307c>)
 80045b8:	2200      	movs	r2, #0
 80045ba:	701a      	strb	r2, [r3, #0]
 80045bc:	e002      	b.n	80045c4 <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 80045be:	4b44      	ldr	r3, [pc, #272]	; (80046d0 <menu+0x307c>)
 80045c0:	2201      	movs	r2, #1
 80045c2:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 80045c4:	4b43      	ldr	r3, [pc, #268]	; (80046d4 <menu+0x3080>)
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d154      	bne.n	8004676 <menu+0x3022>
			if(dilSecim == 0) {
 80045cc:	4b33      	ldr	r3, [pc, #204]	; (800469c <menu+0x3048>)
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d105      	bne.n	80045e0 <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80045d4:	4a40      	ldr	r2, [pc, #256]	; (80046d8 <menu+0x3084>)
 80045d6:	2101      	movs	r1, #1
 80045d8:	2001      	movs	r0, #1
 80045da:	f7fb ffc3 	bl	8000564 <lcd_print>
 80045de:	e008      	b.n	80045f2 <menu+0x2f9e>
			} else if(dilSecim == 1) {
 80045e0:	4b2e      	ldr	r3, [pc, #184]	; (800469c <menu+0x3048>)
 80045e2:	781b      	ldrb	r3, [r3, #0]
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d104      	bne.n	80045f2 <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 80045e8:	4a3c      	ldr	r2, [pc, #240]	; (80046dc <menu+0x3088>)
 80045ea:	2101      	movs	r1, #1
 80045ec:	2001      	movs	r0, #1
 80045ee:	f7fb ffb9 	bl	8000564 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 80045f2:	4b36      	ldr	r3, [pc, #216]	; (80046cc <menu+0x3078>)
 80045f4:	781b      	ldrb	r3, [r3, #0]
 80045f6:	220a      	movs	r2, #10
 80045f8:	4939      	ldr	r1, [pc, #228]	; (80046e0 <menu+0x308c>)
 80045fa:	4618      	mov	r0, r3
 80045fc:	f008 f9e0 	bl	800c9c0 <itoa>
			lcd_print(2, 12, snum);
 8004600:	4a37      	ldr	r2, [pc, #220]	; (80046e0 <menu+0x308c>)
 8004602:	210c      	movs	r1, #12
 8004604:	2002      	movs	r0, #2
 8004606:	f7fb ffad 	bl	8000564 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 800460a:	4b2f      	ldr	r3, [pc, #188]	; (80046c8 <menu+0x3074>)
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	220a      	movs	r2, #10
 8004610:	4933      	ldr	r1, [pc, #204]	; (80046e0 <menu+0x308c>)
 8004612:	4618      	mov	r0, r3
 8004614:	f008 f9d4 	bl	800c9c0 <itoa>
			lcd_print(2, 13, snum);
 8004618:	4a31      	ldr	r2, [pc, #196]	; (80046e0 <menu+0x308c>)
 800461a:	210d      	movs	r1, #13
 800461c:	2002      	movs	r0, #2
 800461e:	f7fb ffa1 	bl	8000564 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 8004622:	4b28      	ldr	r3, [pc, #160]	; (80046c4 <menu+0x3070>)
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	220a      	movs	r2, #10
 8004628:	492d      	ldr	r1, [pc, #180]	; (80046e0 <menu+0x308c>)
 800462a:	4618      	mov	r0, r3
 800462c:	f008 f9c8 	bl	800c9c0 <itoa>
			lcd_print(2, 14, snum);
 8004630:	4a2b      	ldr	r2, [pc, #172]	; (80046e0 <menu+0x308c>)
 8004632:	210e      	movs	r1, #14
 8004634:	2002      	movs	r0, #2
 8004636:	f7fb ff95 	bl	8000564 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 800463a:	4b21      	ldr	r3, [pc, #132]	; (80046c0 <menu+0x306c>)
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	220a      	movs	r2, #10
 8004640:	4927      	ldr	r1, [pc, #156]	; (80046e0 <menu+0x308c>)
 8004642:	4618      	mov	r0, r3
 8004644:	f008 f9bc 	bl	800c9c0 <itoa>
			lcd_print(2, 15, snum);
 8004648:	4a25      	ldr	r2, [pc, #148]	; (80046e0 <menu+0x308c>)
 800464a:	210f      	movs	r1, #15
 800464c:	2002      	movs	r0, #2
 800464e:	f7fb ff89 	bl	8000564 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 8004652:	4b1a      	ldr	r3, [pc, #104]	; (80046bc <menu+0x3068>)
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	220a      	movs	r2, #10
 8004658:	4921      	ldr	r1, [pc, #132]	; (80046e0 <menu+0x308c>)
 800465a:	4618      	mov	r0, r3
 800465c:	f008 f9b0 	bl	800c9c0 <itoa>
			lcd_print(2, 16, snum);
 8004660:	4a1f      	ldr	r2, [pc, #124]	; (80046e0 <menu+0x308c>)
 8004662:	2110      	movs	r1, #16
 8004664:	2002      	movs	r0, #2
 8004666:	f7fb ff7d 	bl	8000564 <lcd_print>

			lcd_print(2, 1, "           ");
 800466a:	4a1e      	ldr	r2, [pc, #120]	; (80046e4 <menu+0x3090>)
 800466c:	2101      	movs	r1, #1
 800466e:	2002      	movs	r0, #2
 8004670:	f7fb ff78 	bl	8000564 <lcd_print>
 8004674:	e048      	b.n	8004708 <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 8004676:	4b17      	ldr	r3, [pc, #92]	; (80046d4 <menu+0x3080>)
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	2b01      	cmp	r3, #1
 800467c:	d144      	bne.n	8004708 <menu+0x30b4>
			if(dilSecim == 0) {
 800467e:	4b07      	ldr	r3, [pc, #28]	; (800469c <menu+0x3048>)
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d132      	bne.n	80046ec <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8004686:	4a14      	ldr	r2, [pc, #80]	; (80046d8 <menu+0x3084>)
 8004688:	2101      	movs	r1, #1
 800468a:	2001      	movs	r0, #1
 800468c:	f7fb ff6a 	bl	8000564 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 8004690:	4a15      	ldr	r2, [pc, #84]	; (80046e8 <menu+0x3094>)
 8004692:	2101      	movs	r1, #1
 8004694:	2002      	movs	r0, #2
 8004696:	f7fb ff65 	bl	8000564 <lcd_print>
 800469a:	e035      	b.n	8004708 <menu+0x30b4>
 800469c:	20000c31 	.word	0x20000c31
 80046a0:	0800d080 	.word	0x0800d080
 80046a4:	40010800 	.word	0x40010800
 80046a8:	20000c3f 	.word	0x20000c3f
 80046ac:	20000c2e 	.word	0x20000c2e
 80046b0:	20000b40 	.word	0x20000b40
 80046b4:	20000c3c 	.word	0x20000c3c
 80046b8:	20000c10 	.word	0x20000c10
 80046bc:	20000c0d 	.word	0x20000c0d
 80046c0:	20000c0e 	.word	0x20000c0e
 80046c4:	200009b4 	.word	0x200009b4
 80046c8:	200009b5 	.word	0x200009b5
 80046cc:	20000c0f 	.word	0x20000c0f
 80046d0:	20000c51 	.word	0x20000c51
 80046d4:	20000c30 	.word	0x20000c30
 80046d8:	0800d708 	.word	0x0800d708
 80046dc:	0800d71c 	.word	0x0800d71c
 80046e0:	20000bb0 	.word	0x20000bb0
 80046e4:	0800d730 	.word	0x0800d730
 80046e8:	0800d73c 	.word	0x0800d73c
			} else if(dilSecim == 1) {
 80046ec:	4b94      	ldr	r3, [pc, #592]	; (8004940 <menu+0x32ec>)
 80046ee:	781b      	ldrb	r3, [r3, #0]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d109      	bne.n	8004708 <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 80046f4:	4a93      	ldr	r2, [pc, #588]	; (8004944 <menu+0x32f0>)
 80046f6:	2101      	movs	r1, #1
 80046f8:	2001      	movs	r0, #1
 80046fa:	f7fb ff33 	bl	8000564 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 80046fe:	4a92      	ldr	r2, [pc, #584]	; (8004948 <menu+0x32f4>)
 8004700:	2101      	movs	r1, #1
 8004702:	2002      	movs	r0, #2
 8004704:	f7fb ff2e 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8004708:	2102      	movs	r1, #2
 800470a:	4890      	ldr	r0, [pc, #576]	; (800494c <menu+0x32f8>)
 800470c:	f005 f962 	bl	80099d4 <HAL_GPIO_ReadPin>
 8004710:	4603      	mov	r3, r0
 8004712:	2b01      	cmp	r3, #1
 8004714:	d119      	bne.n	800474a <menu+0x30f6>
 8004716:	4b8e      	ldr	r3, [pc, #568]	; (8004950 <menu+0x32fc>)
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	f083 0301 	eor.w	r3, r3, #1
 800471e:	b2db      	uxtb	r3, r3
 8004720:	2b00      	cmp	r3, #0
 8004722:	d012      	beq.n	800474a <menu+0x30f6>
 8004724:	4b8b      	ldr	r3, [pc, #556]	; (8004954 <menu+0x3300>)
 8004726:	781b      	ldrb	r3, [r3, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00e      	beq.n	800474a <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 800472c:	4b8a      	ldr	r3, [pc, #552]	; (8004958 <menu+0x3304>)
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	3301      	adds	r3, #1
 8004732:	b2da      	uxtb	r2, r3
 8004734:	4b88      	ldr	r3, [pc, #544]	; (8004958 <menu+0x3304>)
 8004736:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8004738:	4b87      	ldr	r3, [pc, #540]	; (8004958 <menu+0x3304>)
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	2b01      	cmp	r3, #1
 800473e:	d902      	bls.n	8004746 <menu+0x30f2>
				calismaSayModu = 0;
 8004740:	4b85      	ldr	r3, [pc, #532]	; (8004958 <menu+0x3304>)
 8004742:	2200      	movs	r2, #0
 8004744:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004746:	f001 fccd 	bl	80060e4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 800474a:	2104      	movs	r1, #4
 800474c:	487f      	ldr	r0, [pc, #508]	; (800494c <menu+0x32f8>)
 800474e:	f005 f941 	bl	80099d4 <HAL_GPIO_ReadPin>
 8004752:	4603      	mov	r3, r0
 8004754:	2b01      	cmp	r3, #1
 8004756:	d119      	bne.n	800478c <menu+0x3138>
 8004758:	4b7d      	ldr	r3, [pc, #500]	; (8004950 <menu+0x32fc>)
 800475a:	781b      	ldrb	r3, [r3, #0]
 800475c:	f083 0301 	eor.w	r3, r3, #1
 8004760:	b2db      	uxtb	r3, r3
 8004762:	2b00      	cmp	r3, #0
 8004764:	d012      	beq.n	800478c <menu+0x3138>
 8004766:	4b7b      	ldr	r3, [pc, #492]	; (8004954 <menu+0x3300>)
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d00e      	beq.n	800478c <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 800476e:	4b7a      	ldr	r3, [pc, #488]	; (8004958 <menu+0x3304>)
 8004770:	781b      	ldrb	r3, [r3, #0]
 8004772:	3b01      	subs	r3, #1
 8004774:	b2da      	uxtb	r2, r3
 8004776:	4b78      	ldr	r3, [pc, #480]	; (8004958 <menu+0x3304>)
 8004778:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 800477a:	4b77      	ldr	r3, [pc, #476]	; (8004958 <menu+0x3304>)
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d002      	beq.n	8004788 <menu+0x3134>
		   		calismaSayModu = 1;
 8004782:	4b75      	ldr	r3, [pc, #468]	; (8004958 <menu+0x3304>)
 8004784:	2201      	movs	r2, #1
 8004786:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004788:	f001 fcac 	bl	80060e4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800478c:	2108      	movs	r1, #8
 800478e:	486f      	ldr	r0, [pc, #444]	; (800494c <menu+0x32f8>)
 8004790:	f005 f920 	bl	80099d4 <HAL_GPIO_ReadPin>
 8004794:	4603      	mov	r3, r0
 8004796:	2b01      	cmp	r3, #1
 8004798:	d12b      	bne.n	80047f2 <menu+0x319e>
 800479a:	4b6d      	ldr	r3, [pc, #436]	; (8004950 <menu+0x32fc>)
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	f083 0301 	eor.w	r3, r3, #1
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d024      	beq.n	80047f2 <menu+0x319e>
			eepromData[32] = 0;
 80047a8:	4b6c      	ldr	r3, [pc, #432]	; (800495c <menu+0x3308>)
 80047aa:	2200      	movs	r2, #0
 80047ac:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 80047b0:	4b6a      	ldr	r3, [pc, #424]	; (800495c <menu+0x3308>)
 80047b2:	2200      	movs	r2, #0
 80047b4:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 80047b6:	4b69      	ldr	r3, [pc, #420]	; (800495c <menu+0x3308>)
 80047b8:	2200      	movs	r2, #0
 80047ba:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 80047bc:	4b67      	ldr	r3, [pc, #412]	; (800495c <menu+0x3308>)
 80047be:	2200      	movs	r2, #0
 80047c0:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 80047c2:	4b66      	ldr	r3, [pc, #408]	; (800495c <menu+0x3308>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 80047c8:	4b65      	ldr	r3, [pc, #404]	; (8004960 <menu+0x330c>)
 80047ca:	2200      	movs	r2, #0
 80047cc:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 80047ce:	4b65      	ldr	r3, [pc, #404]	; (8004964 <menu+0x3310>)
 80047d0:	2200      	movs	r2, #0
 80047d2:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 80047d4:	4b64      	ldr	r3, [pc, #400]	; (8004968 <menu+0x3314>)
 80047d6:	2200      	movs	r2, #0
 80047d8:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 80047da:	4b64      	ldr	r3, [pc, #400]	; (800496c <menu+0x3318>)
 80047dc:	2200      	movs	r2, #0
 80047de:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 80047e0:	4b63      	ldr	r3, [pc, #396]	; (8004970 <menu+0x331c>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 80047e6:	4b5c      	ldr	r3, [pc, #368]	; (8004958 <menu+0x3304>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 80047ec:	4b61      	ldr	r3, [pc, #388]	; (8004974 <menu+0x3320>)
 80047ee:	2201      	movs	r2, #1
 80047f0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 80047f2:	4b61      	ldr	r3, [pc, #388]	; (8004978 <menu+0x3324>)
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	2b1e      	cmp	r3, #30
 80047f8:	d16f      	bne.n	80048da <menu+0x3286>
		calismaSayModu = 0;
 80047fa:	4b57      	ldr	r3, [pc, #348]	; (8004958 <menu+0x3304>)
 80047fc:	2200      	movs	r2, #0
 80047fe:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 8004800:	4b4f      	ldr	r3, [pc, #316]	; (8004940 <menu+0x32ec>)
 8004802:	781b      	ldrb	r3, [r3, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d10a      	bne.n	800481e <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 8004808:	4a5c      	ldr	r2, [pc, #368]	; (800497c <menu+0x3328>)
 800480a:	2101      	movs	r1, #1
 800480c:	2001      	movs	r0, #1
 800480e:	f7fb fea9 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 8004812:	4a5b      	ldr	r2, [pc, #364]	; (8004980 <menu+0x332c>)
 8004814:	2101      	movs	r1, #1
 8004816:	2002      	movs	r0, #2
 8004818:	f7fb fea4 	bl	8000564 <lcd_print>
 800481c:	e00d      	b.n	800483a <menu+0x31e6>
		} else if(dilSecim == 1) {
 800481e:	4b48      	ldr	r3, [pc, #288]	; (8004940 <menu+0x32ec>)
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	2b01      	cmp	r3, #1
 8004824:	d109      	bne.n	800483a <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 8004826:	4a57      	ldr	r2, [pc, #348]	; (8004984 <menu+0x3330>)
 8004828:	2101      	movs	r1, #1
 800482a:	2001      	movs	r0, #1
 800482c:	f7fb fe9a 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 8004830:	4a55      	ldr	r2, [pc, #340]	; (8004988 <menu+0x3334>)
 8004832:	2101      	movs	r1, #1
 8004834:	2002      	movs	r0, #2
 8004836:	f7fb fe95 	bl	8000564 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800483a:	2102      	movs	r1, #2
 800483c:	4843      	ldr	r0, [pc, #268]	; (800494c <menu+0x32f8>)
 800483e:	f005 f8c9 	bl	80099d4 <HAL_GPIO_ReadPin>
 8004842:	4603      	mov	r3, r0
 8004844:	2b01      	cmp	r3, #1
 8004846:	d115      	bne.n	8004874 <menu+0x3220>
 8004848:	4b41      	ldr	r3, [pc, #260]	; (8004950 <menu+0x32fc>)
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	f083 0301 	eor.w	r3, r3, #1
 8004850:	b2db      	uxtb	r3, r3
 8004852:	2b00      	cmp	r3, #0
 8004854:	d00e      	beq.n	8004874 <menu+0x3220>
			dilSecim = dilSecim + 1;
 8004856:	4b3a      	ldr	r3, [pc, #232]	; (8004940 <menu+0x32ec>)
 8004858:	781b      	ldrb	r3, [r3, #0]
 800485a:	3301      	adds	r3, #1
 800485c:	b2da      	uxtb	r2, r3
 800485e:	4b38      	ldr	r3, [pc, #224]	; (8004940 <menu+0x32ec>)
 8004860:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 8004862:	4b37      	ldr	r3, [pc, #220]	; (8004940 <menu+0x32ec>)
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	2b01      	cmp	r3, #1
 8004868:	d902      	bls.n	8004870 <menu+0x321c>
				dilSecim = 0;
 800486a:	4b35      	ldr	r3, [pc, #212]	; (8004940 <menu+0x32ec>)
 800486c:	2200      	movs	r2, #0
 800486e:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004870:	f001 fc38 	bl	80060e4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004874:	2104      	movs	r1, #4
 8004876:	4835      	ldr	r0, [pc, #212]	; (800494c <menu+0x32f8>)
 8004878:	f005 f8ac 	bl	80099d4 <HAL_GPIO_ReadPin>
 800487c:	4603      	mov	r3, r0
 800487e:	2b01      	cmp	r3, #1
 8004880:	d115      	bne.n	80048ae <menu+0x325a>
 8004882:	4b33      	ldr	r3, [pc, #204]	; (8004950 <menu+0x32fc>)
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	f083 0301 	eor.w	r3, r3, #1
 800488a:	b2db      	uxtb	r3, r3
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00e      	beq.n	80048ae <menu+0x325a>
			dilSecim = dilSecim - 1;
 8004890:	4b2b      	ldr	r3, [pc, #172]	; (8004940 <menu+0x32ec>)
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	3b01      	subs	r3, #1
 8004896:	b2da      	uxtb	r2, r3
 8004898:	4b29      	ldr	r3, [pc, #164]	; (8004940 <menu+0x32ec>)
 800489a:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 800489c:	4b28      	ldr	r3, [pc, #160]	; (8004940 <menu+0x32ec>)
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d002      	beq.n	80048aa <menu+0x3256>
		   		dilSecim = 1;
 80048a4:	4b26      	ldr	r3, [pc, #152]	; (8004940 <menu+0x32ec>)
 80048a6:	2201      	movs	r2, #1
 80048a8:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80048aa:	f001 fc1b 	bl	80060e4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80048ae:	2108      	movs	r1, #8
 80048b0:	4826      	ldr	r0, [pc, #152]	; (800494c <menu+0x32f8>)
 80048b2:	f005 f88f 	bl	80099d4 <HAL_GPIO_ReadPin>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d10e      	bne.n	80048da <menu+0x3286>
 80048bc:	4b24      	ldr	r3, [pc, #144]	; (8004950 <menu+0x32fc>)
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	f083 0301 	eor.w	r3, r3, #1
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d007      	beq.n	80048da <menu+0x3286>
			eepromData[33] = dilSecim;
 80048ca:	4b1d      	ldr	r3, [pc, #116]	; (8004940 <menu+0x32ec>)
 80048cc:	781a      	ldrb	r2, [r3, #0]
 80048ce:	4b23      	ldr	r3, [pc, #140]	; (800495c <menu+0x3308>)
 80048d0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 80048d4:	4b27      	ldr	r3, [pc, #156]	; (8004974 <menu+0x3320>)
 80048d6:	2201      	movs	r2, #1
 80048d8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 80048da:	4b27      	ldr	r3, [pc, #156]	; (8004978 <menu+0x3324>)
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	2b1f      	cmp	r3, #31
 80048e0:	f040 80b7 	bne.w	8004a52 <menu+0x33fe>
		calismaSayModu = 0;
 80048e4:	4b1c      	ldr	r3, [pc, #112]	; (8004958 <menu+0x3304>)
 80048e6:	2200      	movs	r2, #0
 80048e8:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 80048ea:	4a28      	ldr	r2, [pc, #160]	; (800498c <menu+0x3338>)
 80048ec:	2101      	movs	r1, #1
 80048ee:	2001      	movs	r0, #1
 80048f0:	f7fb fe38 	bl	8000564 <lcd_print>

		if(iotMode == 0) {
 80048f4:	4b26      	ldr	r3, [pc, #152]	; (8004990 <menu+0x333c>)
 80048f6:	781b      	ldrb	r3, [r3, #0]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d113      	bne.n	8004924 <menu+0x32d0>
			if(dilSecim == 0) {
 80048fc:	4b10      	ldr	r3, [pc, #64]	; (8004940 <menu+0x32ec>)
 80048fe:	781b      	ldrb	r3, [r3, #0]
 8004900:	2b00      	cmp	r3, #0
 8004902:	d105      	bne.n	8004910 <menu+0x32bc>
				lcd_print(2, 1, "Pasif           ");
 8004904:	4a23      	ldr	r2, [pc, #140]	; (8004994 <menu+0x3340>)
 8004906:	2101      	movs	r1, #1
 8004908:	2002      	movs	r0, #2
 800490a:	f7fb fe2b 	bl	8000564 <lcd_print>
 800490e:	e050      	b.n	80049b2 <menu+0x335e>
			} else if(dilSecim == 1) {
 8004910:	4b0b      	ldr	r3, [pc, #44]	; (8004940 <menu+0x32ec>)
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	2b01      	cmp	r3, #1
 8004916:	d14c      	bne.n	80049b2 <menu+0x335e>
				lcd_print(2, 1, "Passive         ");
 8004918:	4a1f      	ldr	r2, [pc, #124]	; (8004998 <menu+0x3344>)
 800491a:	2101      	movs	r1, #1
 800491c:	2002      	movs	r0, #2
 800491e:	f7fb fe21 	bl	8000564 <lcd_print>
 8004922:	e046      	b.n	80049b2 <menu+0x335e>
			}
		} else if(iotMode == 1) {
 8004924:	4b1a      	ldr	r3, [pc, #104]	; (8004990 <menu+0x333c>)
 8004926:	781b      	ldrb	r3, [r3, #0]
 8004928:	2b01      	cmp	r3, #1
 800492a:	d142      	bne.n	80049b2 <menu+0x335e>
			if(dilSecim == 0){
 800492c:	4b04      	ldr	r3, [pc, #16]	; (8004940 <menu+0x32ec>)
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d135      	bne.n	80049a0 <menu+0x334c>
				lcd_print(2, 1, "Aktif           ");
 8004934:	4a19      	ldr	r2, [pc, #100]	; (800499c <menu+0x3348>)
 8004936:	2101      	movs	r1, #1
 8004938:	2002      	movs	r0, #2
 800493a:	f7fb fe13 	bl	8000564 <lcd_print>
 800493e:	e038      	b.n	80049b2 <menu+0x335e>
 8004940:	20000c31 	.word	0x20000c31
 8004944:	0800d71c 	.word	0x0800d71c
 8004948:	0800d750 	.word	0x0800d750
 800494c:	40010800 	.word	0x40010800
 8004950:	20000c3f 	.word	0x20000c3f
 8004954:	20000c51 	.word	0x20000c51
 8004958:	20000c30 	.word	0x20000c30
 800495c:	20000b40 	.word	0x20000b40
 8004960:	20000c0f 	.word	0x20000c0f
 8004964:	200009b5 	.word	0x200009b5
 8004968:	200009b4 	.word	0x200009b4
 800496c:	20000c0e 	.word	0x20000c0e
 8004970:	20000c0d 	.word	0x20000c0d
 8004974:	20000c3c 	.word	0x20000c3c
 8004978:	20000c10 	.word	0x20000c10
 800497c:	0800d764 	.word	0x0800d764
 8004980:	0800d778 	.word	0x0800d778
 8004984:	0800d78c 	.word	0x0800d78c
 8004988:	0800d7a0 	.word	0x0800d7a0
 800498c:	0800d7b4 	.word	0x0800d7b4
 8004990:	20000c2f 	.word	0x20000c2f
 8004994:	0800d00c 	.word	0x0800d00c
 8004998:	0800d020 	.word	0x0800d020
 800499c:	0800d06c 	.word	0x0800d06c
			} else if(dilSecim == 1) {
 80049a0:	4baf      	ldr	r3, [pc, #700]	; (8004c60 <menu+0x360c>)
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d104      	bne.n	80049b2 <menu+0x335e>
				lcd_print(2, 1, "Active          ");
 80049a8:	4aae      	ldr	r2, [pc, #696]	; (8004c64 <menu+0x3610>)
 80049aa:	2101      	movs	r1, #1
 80049ac:	2002      	movs	r0, #2
 80049ae:	f7fb fdd9 	bl	8000564 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80049b2:	2102      	movs	r1, #2
 80049b4:	48ac      	ldr	r0, [pc, #688]	; (8004c68 <menu+0x3614>)
 80049b6:	f005 f80d 	bl	80099d4 <HAL_GPIO_ReadPin>
 80049ba:	4603      	mov	r3, r0
 80049bc:	2b01      	cmp	r3, #1
 80049be:	d115      	bne.n	80049ec <menu+0x3398>
 80049c0:	4baa      	ldr	r3, [pc, #680]	; (8004c6c <menu+0x3618>)
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	f083 0301 	eor.w	r3, r3, #1
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d00e      	beq.n	80049ec <menu+0x3398>
			iotMode = iotMode + 1;
 80049ce:	4ba8      	ldr	r3, [pc, #672]	; (8004c70 <menu+0x361c>)
 80049d0:	781b      	ldrb	r3, [r3, #0]
 80049d2:	3301      	adds	r3, #1
 80049d4:	b2da      	uxtb	r2, r3
 80049d6:	4ba6      	ldr	r3, [pc, #664]	; (8004c70 <menu+0x361c>)
 80049d8:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 80049da:	4ba5      	ldr	r3, [pc, #660]	; (8004c70 <menu+0x361c>)
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	2b01      	cmp	r3, #1
 80049e0:	d902      	bls.n	80049e8 <menu+0x3394>
				iotMode = 0;
 80049e2:	4ba3      	ldr	r3, [pc, #652]	; (8004c70 <menu+0x361c>)
 80049e4:	2200      	movs	r2, #0
 80049e6:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 80049e8:	f001 fb7c 	bl	80060e4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80049ec:	2104      	movs	r1, #4
 80049ee:	489e      	ldr	r0, [pc, #632]	; (8004c68 <menu+0x3614>)
 80049f0:	f004 fff0 	bl	80099d4 <HAL_GPIO_ReadPin>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d115      	bne.n	8004a26 <menu+0x33d2>
 80049fa:	4b9c      	ldr	r3, [pc, #624]	; (8004c6c <menu+0x3618>)
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	f083 0301 	eor.w	r3, r3, #1
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d00e      	beq.n	8004a26 <menu+0x33d2>
			iotMode = iotMode - 1;
 8004a08:	4b99      	ldr	r3, [pc, #612]	; (8004c70 <menu+0x361c>)
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	b2da      	uxtb	r2, r3
 8004a10:	4b97      	ldr	r3, [pc, #604]	; (8004c70 <menu+0x361c>)
 8004a12:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8004a14:	4b96      	ldr	r3, [pc, #600]	; (8004c70 <menu+0x361c>)
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d002      	beq.n	8004a22 <menu+0x33ce>
		   		iotMode = 1;
 8004a1c:	4b94      	ldr	r3, [pc, #592]	; (8004c70 <menu+0x361c>)
 8004a1e:	2201      	movs	r2, #1
 8004a20:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8004a22:	f001 fb5f 	bl	80060e4 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004a26:	2108      	movs	r1, #8
 8004a28:	488f      	ldr	r0, [pc, #572]	; (8004c68 <menu+0x3614>)
 8004a2a:	f004 ffd3 	bl	80099d4 <HAL_GPIO_ReadPin>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d10e      	bne.n	8004a52 <menu+0x33fe>
 8004a34:	4b8d      	ldr	r3, [pc, #564]	; (8004c6c <menu+0x3618>)
 8004a36:	781b      	ldrb	r3, [r3, #0]
 8004a38:	f083 0301 	eor.w	r3, r3, #1
 8004a3c:	b2db      	uxtb	r3, r3
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d007      	beq.n	8004a52 <menu+0x33fe>
			eepromData[48] = iotMode;
 8004a42:	4b8b      	ldr	r3, [pc, #556]	; (8004c70 <menu+0x361c>)
 8004a44:	781a      	ldrb	r2, [r3, #0]
 8004a46:	4b8b      	ldr	r3, [pc, #556]	; (8004c74 <menu+0x3620>)
 8004a48:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
			hafizaYaz = 1;
 8004a4c:	4b8a      	ldr	r3, [pc, #552]	; (8004c78 <menu+0x3624>)
 8004a4e:	2201      	movs	r2, #1
 8004a50:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 8004a52:	4b8a      	ldr	r3, [pc, #552]	; (8004c7c <menu+0x3628>)
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	2b20      	cmp	r3, #32
 8004a58:	d138      	bne.n	8004acc <menu+0x3478>
		calismaSayModu = 0;
 8004a5a:	4b89      	ldr	r3, [pc, #548]	; (8004c80 <menu+0x362c>)
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "MAKINE ID       ");
 8004a60:	4a88      	ldr	r2, [pc, #544]	; (8004c84 <menu+0x3630>)
 8004a62:	2101      	movs	r1, #1
 8004a64:	2001      	movs	r0, #1
 8004a66:	f7fb fd7d 	bl	8000564 <lcd_print>

		lcd_print(2, 1, machineID);
 8004a6a:	4a87      	ldr	r2, [pc, #540]	; (8004c88 <menu+0x3634>)
 8004a6c:	2101      	movs	r1, #1
 8004a6e:	2002      	movs	r0, #2
 8004a70:	f7fb fd78 	bl	8000564 <lcd_print>
		lcd_print(2, 13, "    ");
 8004a74:	4a85      	ldr	r2, [pc, #532]	; (8004c8c <menu+0x3638>)
 8004a76:	210d      	movs	r1, #13
 8004a78:	2002      	movs	r0, #2
 8004a7a:	f7fb fd73 	bl	8000564 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004a7e:	2102      	movs	r1, #2
 8004a80:	4879      	ldr	r0, [pc, #484]	; (8004c68 <menu+0x3614>)
 8004a82:	f004 ffa7 	bl	80099d4 <HAL_GPIO_ReadPin>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d11f      	bne.n	8004acc <menu+0x3478>
 8004a8c:	2104      	movs	r1, #4
 8004a8e:	4876      	ldr	r0, [pc, #472]	; (8004c68 <menu+0x3614>)
 8004a90:	f004 ffa0 	bl	80099d4 <HAL_GPIO_ReadPin>
 8004a94:	4603      	mov	r3, r0
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d118      	bne.n	8004acc <menu+0x3478>
 8004a9a:	4b74      	ldr	r3, [pc, #464]	; (8004c6c <menu+0x3618>)
 8004a9c:	781b      	ldrb	r3, [r3, #0]
 8004a9e:	f083 0301 	eor.w	r3, r3, #1
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d011      	beq.n	8004acc <menu+0x3478>
			takeMachineID(0);
 8004aa8:	2000      	movs	r0, #0
 8004aaa:	f7fc f81f 	bl	8000aec <takeMachineID>

			HAL_Delay(50);
 8004aae:	2032      	movs	r0, #50	; 0x32
 8004ab0:	f004 f9c0 	bl	8008e34 <HAL_Delay>

			lcd_print(2, 1, machineID);
 8004ab4:	4a74      	ldr	r2, [pc, #464]	; (8004c88 <menu+0x3634>)
 8004ab6:	2101      	movs	r1, #1
 8004ab8:	2002      	movs	r0, #2
 8004aba:	f7fb fd53 	bl	8000564 <lcd_print>
			lcd_print(2, 13, "    ");
 8004abe:	4a73      	ldr	r2, [pc, #460]	; (8004c8c <menu+0x3638>)
 8004ac0:	210d      	movs	r1, #13
 8004ac2:	2002      	movs	r0, #2
 8004ac4:	f7fb fd4e 	bl	8000564 <lcd_print>

			bekle();
 8004ac8:	f001 fb0c 	bl	80060e4 <bekle>
		}
	}

	if (menuSayac == 33) {
 8004acc:	4b6b      	ldr	r3, [pc, #428]	; (8004c7c <menu+0x3628>)
 8004ace:	781b      	ldrb	r3, [r3, #0]
 8004ad0:	2b21      	cmp	r3, #33	; 0x21
 8004ad2:	d156      	bne.n	8004b82 <menu+0x352e>
		calismaSayModu = 0;
 8004ad4:	4b6a      	ldr	r3, [pc, #424]	; (8004c80 <menu+0x362c>)
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	701a      	strb	r2, [r3, #0]

		convertArrays(0);
 8004ada:	2000      	movs	r0, #0
 8004adc:	f7fb ff90 	bl	8000a00 <convertArrays>

		lcd_print(1, 1, "WIFI SSID       ");
 8004ae0:	4a6b      	ldr	r2, [pc, #428]	; (8004c90 <menu+0x363c>)
 8004ae2:	2101      	movs	r1, #1
 8004ae4:	2001      	movs	r0, #1
 8004ae6:	f7fb fd3d 	bl	8000564 <lcd_print>
		if(strlen(wifiSSID) <=16) {
 8004aea:	486a      	ldr	r0, [pc, #424]	; (8004c94 <menu+0x3640>)
 8004aec:	f7fb fb9a 	bl	8000224 <strlen>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b10      	cmp	r3, #16
 8004af4:	d811      	bhi.n	8004b1a <menu+0x34c6>
			lcd_print(2, 1, wifiSSID);
 8004af6:	4a67      	ldr	r2, [pc, #412]	; (8004c94 <menu+0x3640>)
 8004af8:	2101      	movs	r1, #1
 8004afa:	2002      	movs	r0, #2
 8004afc:	f7fb fd32 	bl	8000564 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 8004b00:	4864      	ldr	r0, [pc, #400]	; (8004c94 <menu+0x3640>)
 8004b02:	f7fb fb8f 	bl	8000224 <strlen>
 8004b06:	4603      	mov	r3, r0
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	4a62      	ldr	r2, [pc, #392]	; (8004c98 <menu+0x3644>)
 8004b10:	4619      	mov	r1, r3
 8004b12:	2002      	movs	r0, #2
 8004b14:	f7fb fd26 	bl	8000564 <lcd_print>
 8004b18:	e005      	b.n	8004b26 <menu+0x34d2>
		} else {
			slideText(wifiSSID, 1, 2, 0);
 8004b1a:	2300      	movs	r3, #0
 8004b1c:	2202      	movs	r2, #2
 8004b1e:	2101      	movs	r1, #1
 8004b20:	485c      	ldr	r0, [pc, #368]	; (8004c94 <menu+0x3640>)
 8004b22:	f7fc fcf1 	bl	8001508 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004b26:	2102      	movs	r1, #2
 8004b28:	484f      	ldr	r0, [pc, #316]	; (8004c68 <menu+0x3614>)
 8004b2a:	f004 ff53 	bl	80099d4 <HAL_GPIO_ReadPin>
 8004b2e:	4603      	mov	r3, r0
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d126      	bne.n	8004b82 <menu+0x352e>
 8004b34:	2104      	movs	r1, #4
 8004b36:	484c      	ldr	r0, [pc, #304]	; (8004c68 <menu+0x3614>)
 8004b38:	f004 ff4c 	bl	80099d4 <HAL_GPIO_ReadPin>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d11f      	bne.n	8004b82 <menu+0x352e>
 8004b42:	4b4a      	ldr	r3, [pc, #296]	; (8004c6c <menu+0x3618>)
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	f083 0301 	eor.w	r3, r3, #1
 8004b4a:	b2db      	uxtb	r3, r3
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d018      	beq.n	8004b82 <menu+0x352e>
			takeWifiSSID(0);
 8004b50:	2000      	movs	r0, #0
 8004b52:	f7fc f921 	bl	8000d98 <takeWifiSSID>

			HAL_Delay(100);
 8004b56:	2064      	movs	r0, #100	; 0x64
 8004b58:	f004 f96c 	bl	8008e34 <HAL_Delay>

			lcd_print(2, 1, wifiSSID);
 8004b5c:	4a4d      	ldr	r2, [pc, #308]	; (8004c94 <menu+0x3640>)
 8004b5e:	2101      	movs	r1, #1
 8004b60:	2002      	movs	r0, #2
 8004b62:	f7fb fcff 	bl	8000564 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 8004b66:	484b      	ldr	r0, [pc, #300]	; (8004c94 <menu+0x3640>)
 8004b68:	f7fb fb5c 	bl	8000224 <strlen>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	3301      	adds	r3, #1
 8004b72:	b2db      	uxtb	r3, r3
 8004b74:	4a48      	ldr	r2, [pc, #288]	; (8004c98 <menu+0x3644>)
 8004b76:	4619      	mov	r1, r3
 8004b78:	2002      	movs	r0, #2
 8004b7a:	f7fb fcf3 	bl	8000564 <lcd_print>

			bekle();
 8004b7e:	f001 fab1 	bl	80060e4 <bekle>
		}
	}

	if (menuSayac == 34) {
 8004b82:	4b3e      	ldr	r3, [pc, #248]	; (8004c7c <menu+0x3628>)
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	2b22      	cmp	r3, #34	; 0x22
 8004b88:	d156      	bne.n	8004c38 <menu+0x35e4>
		calismaSayModu = 0;
 8004b8a:	4b3d      	ldr	r3, [pc, #244]	; (8004c80 <menu+0x362c>)
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	701a      	strb	r2, [r3, #0]

		convertArrays(1);
 8004b90:	2001      	movs	r0, #1
 8004b92:	f7fb ff35 	bl	8000a00 <convertArrays>

		lcd_print(1, 1, "WIFI PASS       ");
 8004b96:	4a41      	ldr	r2, [pc, #260]	; (8004c9c <menu+0x3648>)
 8004b98:	2101      	movs	r1, #1
 8004b9a:	2001      	movs	r0, #1
 8004b9c:	f7fb fce2 	bl	8000564 <lcd_print>
		if(strlen(wifiPass) <= 16) {
 8004ba0:	483f      	ldr	r0, [pc, #252]	; (8004ca0 <menu+0x364c>)
 8004ba2:	f7fb fb3f 	bl	8000224 <strlen>
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	2b10      	cmp	r3, #16
 8004baa:	d811      	bhi.n	8004bd0 <menu+0x357c>
			lcd_print(2, 1, wifiPass);
 8004bac:	4a3c      	ldr	r2, [pc, #240]	; (8004ca0 <menu+0x364c>)
 8004bae:	2101      	movs	r1, #1
 8004bb0:	2002      	movs	r0, #2
 8004bb2:	f7fb fcd7 	bl	8000564 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 8004bb6:	483a      	ldr	r0, [pc, #232]	; (8004ca0 <menu+0x364c>)
 8004bb8:	f7fb fb34 	bl	8000224 <strlen>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	3301      	adds	r3, #1
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	4a34      	ldr	r2, [pc, #208]	; (8004c98 <menu+0x3644>)
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	2002      	movs	r0, #2
 8004bca:	f7fb fccb 	bl	8000564 <lcd_print>
 8004bce:	e005      	b.n	8004bdc <menu+0x3588>
		} else {
			slideText(wifiPass, 1, 2, 1);
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	2202      	movs	r2, #2
 8004bd4:	2101      	movs	r1, #1
 8004bd6:	4832      	ldr	r0, [pc, #200]	; (8004ca0 <menu+0x364c>)
 8004bd8:	f7fc fc96 	bl	8001508 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004bdc:	2102      	movs	r1, #2
 8004bde:	4822      	ldr	r0, [pc, #136]	; (8004c68 <menu+0x3614>)
 8004be0:	f004 fef8 	bl	80099d4 <HAL_GPIO_ReadPin>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d126      	bne.n	8004c38 <menu+0x35e4>
 8004bea:	2104      	movs	r1, #4
 8004bec:	481e      	ldr	r0, [pc, #120]	; (8004c68 <menu+0x3614>)
 8004bee:	f004 fef1 	bl	80099d4 <HAL_GPIO_ReadPin>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d11f      	bne.n	8004c38 <menu+0x35e4>
 8004bf8:	4b1c      	ldr	r3, [pc, #112]	; (8004c6c <menu+0x3618>)
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	f083 0301 	eor.w	r3, r3, #1
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d018      	beq.n	8004c38 <menu+0x35e4>
			takeWifiPass(0);
 8004c06:	2000      	movs	r0, #0
 8004c08:	f7fc fa88 	bl	800111c <takeWifiPass>

			HAL_Delay(50);
 8004c0c:	2032      	movs	r0, #50	; 0x32
 8004c0e:	f004 f911 	bl	8008e34 <HAL_Delay>

			lcd_print(2, 1, wifiPass);
 8004c12:	4a23      	ldr	r2, [pc, #140]	; (8004ca0 <menu+0x364c>)
 8004c14:	2101      	movs	r1, #1
 8004c16:	2002      	movs	r0, #2
 8004c18:	f7fb fca4 	bl	8000564 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 8004c1c:	4820      	ldr	r0, [pc, #128]	; (8004ca0 <menu+0x364c>)
 8004c1e:	f7fb fb01 	bl	8000224 <strlen>
 8004c22:	4603      	mov	r3, r0
 8004c24:	b2db      	uxtb	r3, r3
 8004c26:	3301      	adds	r3, #1
 8004c28:	b2db      	uxtb	r3, r3
 8004c2a:	4a1b      	ldr	r2, [pc, #108]	; (8004c98 <menu+0x3644>)
 8004c2c:	4619      	mov	r1, r3
 8004c2e:	2002      	movs	r0, #2
 8004c30:	f7fb fc98 	bl	8000564 <lcd_print>

			bekle();
 8004c34:	f001 fa56 	bl	80060e4 <bekle>
		}
	}

	if (menuSayac == 35) {
 8004c38:	4b10      	ldr	r3, [pc, #64]	; (8004c7c <menu+0x3628>)
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	2b23      	cmp	r3, #35	; 0x23
 8004c3e:	d155      	bne.n	8004cec <menu+0x3698>
		if(dilSecim == 0) {
 8004c40:	4b07      	ldr	r3, [pc, #28]	; (8004c60 <menu+0x360c>)
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d131      	bne.n	8004cac <menu+0x3658>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 8004c48:	4a16      	ldr	r2, [pc, #88]	; (8004ca4 <menu+0x3650>)
 8004c4a:	2101      	movs	r1, #1
 8004c4c:	2001      	movs	r0, #1
 8004c4e:	f7fb fc89 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8004c52:	4a15      	ldr	r2, [pc, #84]	; (8004ca8 <menu+0x3654>)
 8004c54:	2101      	movs	r1, #1
 8004c56:	2002      	movs	r0, #2
 8004c58:	f7fb fc84 	bl	8000564 <lcd_print>
 8004c5c:	e034      	b.n	8004cc8 <menu+0x3674>
 8004c5e:	bf00      	nop
 8004c60:	20000c31 	.word	0x20000c31
 8004c64:	0800d080 	.word	0x0800d080
 8004c68:	40010800 	.word	0x40010800
 8004c6c:	20000c3f 	.word	0x20000c3f
 8004c70:	20000c2f 	.word	0x20000c2f
 8004c74:	20000b40 	.word	0x20000b40
 8004c78:	20000c3c 	.word	0x20000c3c
 8004c7c:	20000c10 	.word	0x20000c10
 8004c80:	20000c30 	.word	0x20000c30
 8004c84:	0800d7c8 	.word	0x0800d7c8
 8004c88:	20000bd8 	.word	0x20000bd8
 8004c8c:	0800d7dc 	.word	0x0800d7dc
 8004c90:	0800d7e4 	.word	0x0800d7e4
 8004c94:	20000be4 	.word	0x20000be4
 8004c98:	2000094c 	.word	0x2000094c
 8004c9c:	0800d7f8 	.word	0x0800d7f8
 8004ca0:	20000bf8 	.word	0x20000bf8
 8004ca4:	0800d80c 	.word	0x0800d80c
 8004ca8:	0800d820 	.word	0x0800d820
		} else if(dilSecim == 1) {
 8004cac:	4b10      	ldr	r3, [pc, #64]	; (8004cf0 <menu+0x369c>)
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d109      	bne.n	8004cc8 <menu+0x3674>
			lcd_print(1, 1, " EXIT THE MENU  ");
 8004cb4:	4a0f      	ldr	r2, [pc, #60]	; (8004cf4 <menu+0x36a0>)
 8004cb6:	2101      	movs	r1, #1
 8004cb8:	2001      	movs	r0, #1
 8004cba:	f7fb fc53 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 8004cbe:	4a0e      	ldr	r2, [pc, #56]	; (8004cf8 <menu+0x36a4>)
 8004cc0:	2101      	movs	r1, #1
 8004cc2:	2002      	movs	r0, #2
 8004cc4:	f7fb fc4e 	bl	8000564 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8004cc8:	2108      	movs	r1, #8
 8004cca:	480c      	ldr	r0, [pc, #48]	; (8004cfc <menu+0x36a8>)
 8004ccc:	f004 fe82 	bl	80099d4 <HAL_GPIO_ReadPin>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d10a      	bne.n	8004cec <menu+0x3698>
			menuGiris = 0;
 8004cd6:	4b0a      	ldr	r3, [pc, #40]	; (8004d00 <menu+0x36ac>)
 8004cd8:	2200      	movs	r2, #0
 8004cda:	701a      	strb	r2, [r3, #0]

			lcd_clear();
 8004cdc:	f7fb fc6e 	bl	80005bc <lcd_clear>
			HAL_Delay(500);
 8004ce0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004ce4:	f004 f8a6 	bl	8008e34 <HAL_Delay>
			NVIC_SystemReset();
 8004ce8:	f7fb fcb0 	bl	800064c <__NVIC_SystemReset>
		}
	}
}
 8004cec:	bf00      	nop
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	20000c31 	.word	0x20000c31
 8004cf4:	0800d834 	.word	0x0800d834
 8004cf8:	0800d848 	.word	0x0800d848
 8004cfc:	40010800 	.word	0x40010800
 8004d00:	20000c2d 	.word	0x20000c2d

08004d04 <loadMenuTexts>:

void loadMenuTexts(uint8_t dilSecim) {
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b082      	sub	sp, #8
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	71fb      	strb	r3, [r7, #7]
	mainText = copyText(mainTextGN);
 8004d0e:	48a9      	ldr	r0, [pc, #676]	; (8004fb4 <loadMenuTexts+0x2b0>)
 8004d10:	f7fb fcb2 	bl	8000678 <copyText>
 8004d14:	4603      	mov	r3, r0
 8004d16:	4aa8      	ldr	r2, [pc, #672]	; (8004fb8 <loadMenuTexts+0x2b4>)
 8004d18:	6013      	str	r3, [r2, #0]
	mainText2 = copyText(mainText2GN);
 8004d1a:	48a8      	ldr	r0, [pc, #672]	; (8004fbc <loadMenuTexts+0x2b8>)
 8004d1c:	f7fb fcac 	bl	8000678 <copyText>
 8004d20:	4603      	mov	r3, r0
 8004d22:	4aa7      	ldr	r2, [pc, #668]	; (8004fc0 <loadMenuTexts+0x2bc>)
 8004d24:	6013      	str	r3, [r2, #0]
	ondSafetyText = copyText(ondSafetyTextGN);
 8004d26:	48a7      	ldr	r0, [pc, #668]	; (8004fc4 <loadMenuTexts+0x2c0>)
 8004d28:	f7fb fca6 	bl	8000678 <copyText>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	4aa6      	ldr	r2, [pc, #664]	; (8004fc8 <loadMenuTexts+0x2c4>)
 8004d30:	6013      	str	r3, [r2, #0]
	prudhomeText = copyText(prudhomeTextGN);
 8004d32:	48a6      	ldr	r0, [pc, #664]	; (8004fcc <loadMenuTexts+0x2c8>)
 8004d34:	f7fb fca0 	bl	8000678 <copyText>
 8004d38:	4603      	mov	r3, r0
 8004d3a:	4aa5      	ldr	r2, [pc, #660]	; (8004fd0 <loadMenuTexts+0x2cc>)
 8004d3c:	6013      	str	r3, [r2, #0]
	pizzattoText = copyText(pizzattoTextGN);
 8004d3e:	48a5      	ldr	r0, [pc, #660]	; (8004fd4 <loadMenuTexts+0x2d0>)
 8004d40:	f7fb fc9a 	bl	8000678 <copyText>
 8004d44:	4603      	mov	r3, r0
 8004d46:	4aa4      	ldr	r2, [pc, #656]	; (8004fd8 <loadMenuTexts+0x2d4>)
 8004d48:	6013      	str	r3, [r2, #0]
	buzzerText = copyText(buzzerTextGN);
 8004d4a:	48a4      	ldr	r0, [pc, #656]	; (8004fdc <loadMenuTexts+0x2d8>)
 8004d4c:	f7fb fc94 	bl	8000678 <copyText>
 8004d50:	4603      	mov	r3, r0
 8004d52:	4aa3      	ldr	r2, [pc, #652]	; (8004fe0 <loadMenuTexts+0x2dc>)
 8004d54:	6013      	str	r3, [r2, #0]
	demoModText = copyText(demoModTextGN);
 8004d56:	48a3      	ldr	r0, [pc, #652]	; (8004fe4 <loadMenuTexts+0x2e0>)
 8004d58:	f7fb fc8e 	bl	8000678 <copyText>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	4aa2      	ldr	r2, [pc, #648]	; (8004fe8 <loadMenuTexts+0x2e4>)
 8004d60:	6013      	str	r3, [r2, #0]
	if(dilSecim == 0) {
 8004d62:	79fb      	ldrb	r3, [r7, #7]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	f040 82d1 	bne.w	800530c <loadMenuTexts+0x608>
		menuyeGirildiText = copyText(menuyeGirildiTextTR);
 8004d6a:	48a0      	ldr	r0, [pc, #640]	; (8004fec <loadMenuTexts+0x2e8>)
 8004d6c:	f7fb fc84 	bl	8000678 <copyText>
 8004d70:	4603      	mov	r3, r0
 8004d72:	4a9f      	ldr	r2, [pc, #636]	; (8004ff0 <loadMenuTexts+0x2ec>)
 8004d74:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextTR);
 8004d76:	489f      	ldr	r0, [pc, #636]	; (8004ff4 <loadMenuTexts+0x2f0>)
 8004d78:	f7fb fc7e 	bl	8000678 <copyText>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	4a9e      	ldr	r2, [pc, #632]	; (8004ff8 <loadMenuTexts+0x2f4>)
 8004d80:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextTR);
 8004d82:	489e      	ldr	r0, [pc, #632]	; (8004ffc <loadMenuTexts+0x2f8>)
 8004d84:	f7fb fc78 	bl	8000678 <copyText>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	4a9d      	ldr	r2, [pc, #628]	; (8005000 <loadMenuTexts+0x2fc>)
 8004d8c:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextTR);
 8004d8e:	489d      	ldr	r0, [pc, #628]	; (8005004 <loadMenuTexts+0x300>)
 8004d90:	f7fb fc72 	bl	8000678 <copyText>
 8004d94:	4603      	mov	r3, r0
 8004d96:	4a9c      	ldr	r2, [pc, #624]	; (8005008 <loadMenuTexts+0x304>)
 8004d98:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextTR);
 8004d9a:	489c      	ldr	r0, [pc, #624]	; (800500c <loadMenuTexts+0x308>)
 8004d9c:	f7fb fc6c 	bl	8000678 <copyText>
 8004da0:	4603      	mov	r3, r0
 8004da2:	4a9b      	ldr	r2, [pc, #620]	; (8005010 <loadMenuTexts+0x30c>)
 8004da4:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextTR);
 8004da6:	489b      	ldr	r0, [pc, #620]	; (8005014 <loadMenuTexts+0x310>)
 8004da8:	f7fb fc66 	bl	8000678 <copyText>
 8004dac:	4603      	mov	r3, r0
 8004dae:	4a9a      	ldr	r2, [pc, #616]	; (8005018 <loadMenuTexts+0x314>)
 8004db0:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextTR);
 8004db2:	489a      	ldr	r0, [pc, #616]	; (800501c <loadMenuTexts+0x318>)
 8004db4:	f7fb fc60 	bl	8000678 <copyText>
 8004db8:	4603      	mov	r3, r0
 8004dba:	4a99      	ldr	r2, [pc, #612]	; (8005020 <loadMenuTexts+0x31c>)
 8004dbc:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextTR);
 8004dbe:	4899      	ldr	r0, [pc, #612]	; (8005024 <loadMenuTexts+0x320>)
 8004dc0:	f7fb fc5a 	bl	8000678 <copyText>
 8004dc4:	4603      	mov	r3, r0
 8004dc6:	4a98      	ldr	r2, [pc, #608]	; (8005028 <loadMenuTexts+0x324>)
 8004dc8:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextTR);
 8004dca:	4898      	ldr	r0, [pc, #608]	; (800502c <loadMenuTexts+0x328>)
 8004dcc:	f7fb fc54 	bl	8000678 <copyText>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	4a97      	ldr	r2, [pc, #604]	; (8005030 <loadMenuTexts+0x32c>)
 8004dd4:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextTR);
 8004dd6:	4897      	ldr	r0, [pc, #604]	; (8005034 <loadMenuTexts+0x330>)
 8004dd8:	f7fb fc4e 	bl	8000678 <copyText>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	4a96      	ldr	r2, [pc, #600]	; (8005038 <loadMenuTexts+0x334>)
 8004de0:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextTR);
 8004de2:	4896      	ldr	r0, [pc, #600]	; (800503c <loadMenuTexts+0x338>)
 8004de4:	f7fb fc48 	bl	8000678 <copyText>
 8004de8:	4603      	mov	r3, r0
 8004dea:	4a95      	ldr	r2, [pc, #596]	; (8005040 <loadMenuTexts+0x33c>)
 8004dec:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextTR);
 8004dee:	4895      	ldr	r0, [pc, #596]	; (8005044 <loadMenuTexts+0x340>)
 8004df0:	f7fb fc42 	bl	8000678 <copyText>
 8004df4:	4603      	mov	r3, r0
 8004df6:	4a94      	ldr	r2, [pc, #592]	; (8005048 <loadMenuTexts+0x344>)
 8004df8:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextTR);
 8004dfa:	4894      	ldr	r0, [pc, #592]	; (800504c <loadMenuTexts+0x348>)
 8004dfc:	f7fb fc3c 	bl	8000678 <copyText>
 8004e00:	4603      	mov	r3, r0
 8004e02:	4a93      	ldr	r2, [pc, #588]	; (8005050 <loadMenuTexts+0x34c>)
 8004e04:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextTR);
 8004e06:	4893      	ldr	r0, [pc, #588]	; (8005054 <loadMenuTexts+0x350>)
 8004e08:	f7fb fc36 	bl	8000678 <copyText>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	4a92      	ldr	r2, [pc, #584]	; (8005058 <loadMenuTexts+0x354>)
 8004e10:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextTR);
 8004e12:	4892      	ldr	r0, [pc, #584]	; (800505c <loadMenuTexts+0x358>)
 8004e14:	f7fb fc30 	bl	8000678 <copyText>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	4a91      	ldr	r2, [pc, #580]	; (8005060 <loadMenuTexts+0x35c>)
 8004e1c:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextTR);
 8004e1e:	4891      	ldr	r0, [pc, #580]	; (8005064 <loadMenuTexts+0x360>)
 8004e20:	f7fb fc2a 	bl	8000678 <copyText>
 8004e24:	4603      	mov	r3, r0
 8004e26:	4a90      	ldr	r2, [pc, #576]	; (8005068 <loadMenuTexts+0x364>)
 8004e28:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextTR);
 8004e2a:	4890      	ldr	r0, [pc, #576]	; (800506c <loadMenuTexts+0x368>)
 8004e2c:	f7fb fc24 	bl	8000678 <copyText>
 8004e30:	4603      	mov	r3, r0
 8004e32:	4a8f      	ldr	r2, [pc, #572]	; (8005070 <loadMenuTexts+0x36c>)
 8004e34:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextTR);
 8004e36:	488f      	ldr	r0, [pc, #572]	; (8005074 <loadMenuTexts+0x370>)
 8004e38:	f7fb fc1e 	bl	8000678 <copyText>
 8004e3c:	4603      	mov	r3, r0
 8004e3e:	4a8e      	ldr	r2, [pc, #568]	; (8005078 <loadMenuTexts+0x374>)
 8004e40:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextTR);
 8004e42:	488e      	ldr	r0, [pc, #568]	; (800507c <loadMenuTexts+0x378>)
 8004e44:	f7fb fc18 	bl	8000678 <copyText>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	4a8d      	ldr	r2, [pc, #564]	; (8005080 <loadMenuTexts+0x37c>)
 8004e4c:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextTR);
 8004e4e:	488d      	ldr	r0, [pc, #564]	; (8005084 <loadMenuTexts+0x380>)
 8004e50:	f7fb fc12 	bl	8000678 <copyText>
 8004e54:	4603      	mov	r3, r0
 8004e56:	4a8c      	ldr	r2, [pc, #560]	; (8005088 <loadMenuTexts+0x384>)
 8004e58:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextTR);
 8004e5a:	488c      	ldr	r0, [pc, #560]	; (800508c <loadMenuTexts+0x388>)
 8004e5c:	f7fb fc0c 	bl	8000678 <copyText>
 8004e60:	4603      	mov	r3, r0
 8004e62:	4a8b      	ldr	r2, [pc, #556]	; (8005090 <loadMenuTexts+0x38c>)
 8004e64:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextTR);
 8004e66:	488b      	ldr	r0, [pc, #556]	; (8005094 <loadMenuTexts+0x390>)
 8004e68:	f7fb fc06 	bl	8000678 <copyText>
 8004e6c:	4603      	mov	r3, r0
 8004e6e:	4a8a      	ldr	r2, [pc, #552]	; (8005098 <loadMenuTexts+0x394>)
 8004e70:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextTR);
 8004e72:	488a      	ldr	r0, [pc, #552]	; (800509c <loadMenuTexts+0x398>)
 8004e74:	f7fb fc00 	bl	8000678 <copyText>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	4a89      	ldr	r2, [pc, #548]	; (80050a0 <loadMenuTexts+0x39c>)
 8004e7c:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextTR);
 8004e7e:	4889      	ldr	r0, [pc, #548]	; (80050a4 <loadMenuTexts+0x3a0>)
 8004e80:	f7fb fbfa 	bl	8000678 <copyText>
 8004e84:	4603      	mov	r3, r0
 8004e86:	4a88      	ldr	r2, [pc, #544]	; (80050a8 <loadMenuTexts+0x3a4>)
 8004e88:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextTR);
 8004e8a:	4888      	ldr	r0, [pc, #544]	; (80050ac <loadMenuTexts+0x3a8>)
 8004e8c:	f7fb fbf4 	bl	8000678 <copyText>
 8004e90:	4603      	mov	r3, r0
 8004e92:	4a87      	ldr	r2, [pc, #540]	; (80050b0 <loadMenuTexts+0x3ac>)
 8004e94:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextTR);
 8004e96:	4887      	ldr	r0, [pc, #540]	; (80050b4 <loadMenuTexts+0x3b0>)
 8004e98:	f7fb fbee 	bl	8000678 <copyText>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	4a86      	ldr	r2, [pc, #536]	; (80050b8 <loadMenuTexts+0x3b4>)
 8004ea0:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextTR);
 8004ea2:	4886      	ldr	r0, [pc, #536]	; (80050bc <loadMenuTexts+0x3b8>)
 8004ea4:	f7fb fbe8 	bl	8000678 <copyText>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	4a85      	ldr	r2, [pc, #532]	; (80050c0 <loadMenuTexts+0x3bc>)
 8004eac:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextTR);
 8004eae:	4885      	ldr	r0, [pc, #532]	; (80050c4 <loadMenuTexts+0x3c0>)
 8004eb0:	f7fb fbe2 	bl	8000678 <copyText>
 8004eb4:	4603      	mov	r3, r0
 8004eb6:	4a84      	ldr	r2, [pc, #528]	; (80050c8 <loadMenuTexts+0x3c4>)
 8004eb8:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextTR);
 8004eba:	4884      	ldr	r0, [pc, #528]	; (80050cc <loadMenuTexts+0x3c8>)
 8004ebc:	f7fb fbdc 	bl	8000678 <copyText>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	4a83      	ldr	r2, [pc, #524]	; (80050d0 <loadMenuTexts+0x3cc>)
 8004ec4:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextTR);
 8004ec6:	4883      	ldr	r0, [pc, #524]	; (80050d4 <loadMenuTexts+0x3d0>)
 8004ec8:	f7fb fbd6 	bl	8000678 <copyText>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	4a82      	ldr	r2, [pc, #520]	; (80050d8 <loadMenuTexts+0x3d4>)
 8004ed0:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextTR);
 8004ed2:	4882      	ldr	r0, [pc, #520]	; (80050dc <loadMenuTexts+0x3d8>)
 8004ed4:	f7fb fbd0 	bl	8000678 <copyText>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	4a81      	ldr	r2, [pc, #516]	; (80050e0 <loadMenuTexts+0x3dc>)
 8004edc:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextTR);
 8004ede:	4881      	ldr	r0, [pc, #516]	; (80050e4 <loadMenuTexts+0x3e0>)
 8004ee0:	f7fb fbca 	bl	8000678 <copyText>
 8004ee4:	4603      	mov	r3, r0
 8004ee6:	4a80      	ldr	r2, [pc, #512]	; (80050e8 <loadMenuTexts+0x3e4>)
 8004ee8:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextTR);
 8004eea:	4880      	ldr	r0, [pc, #512]	; (80050ec <loadMenuTexts+0x3e8>)
 8004eec:	f7fb fbc4 	bl	8000678 <copyText>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	4a7f      	ldr	r2, [pc, #508]	; (80050f0 <loadMenuTexts+0x3ec>)
 8004ef4:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextTR);
 8004ef6:	487f      	ldr	r0, [pc, #508]	; (80050f4 <loadMenuTexts+0x3f0>)
 8004ef8:	f7fb fbbe 	bl	8000678 <copyText>
 8004efc:	4603      	mov	r3, r0
 8004efe:	4a7e      	ldr	r2, [pc, #504]	; (80050f8 <loadMenuTexts+0x3f4>)
 8004f00:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextTR);
 8004f02:	487e      	ldr	r0, [pc, #504]	; (80050fc <loadMenuTexts+0x3f8>)
 8004f04:	f7fb fbb8 	bl	8000678 <copyText>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	4a7d      	ldr	r2, [pc, #500]	; (8005100 <loadMenuTexts+0x3fc>)
 8004f0c:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextTR);
 8004f0e:	487d      	ldr	r0, [pc, #500]	; (8005104 <loadMenuTexts+0x400>)
 8004f10:	f7fb fbb2 	bl	8000678 <copyText>
 8004f14:	4603      	mov	r3, r0
 8004f16:	4a7c      	ldr	r2, [pc, #496]	; (8005108 <loadMenuTexts+0x404>)
 8004f18:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextTR);
 8004f1a:	487c      	ldr	r0, [pc, #496]	; (800510c <loadMenuTexts+0x408>)
 8004f1c:	f7fb fbac 	bl	8000678 <copyText>
 8004f20:	4603      	mov	r3, r0
 8004f22:	4a7b      	ldr	r2, [pc, #492]	; (8005110 <loadMenuTexts+0x40c>)
 8004f24:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextTR);
 8004f26:	487b      	ldr	r0, [pc, #492]	; (8005114 <loadMenuTexts+0x410>)
 8004f28:	f7fb fba6 	bl	8000678 <copyText>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	4a7a      	ldr	r2, [pc, #488]	; (8005118 <loadMenuTexts+0x414>)
 8004f30:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextTR);
 8004f32:	487a      	ldr	r0, [pc, #488]	; (800511c <loadMenuTexts+0x418>)
 8004f34:	f7fb fba0 	bl	8000678 <copyText>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	4a79      	ldr	r2, [pc, #484]	; (8005120 <loadMenuTexts+0x41c>)
 8004f3c:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextTR);
 8004f3e:	4879      	ldr	r0, [pc, #484]	; (8005124 <loadMenuTexts+0x420>)
 8004f40:	f7fb fb9a 	bl	8000678 <copyText>
 8004f44:	4603      	mov	r3, r0
 8004f46:	4a78      	ldr	r2, [pc, #480]	; (8005128 <loadMenuTexts+0x424>)
 8004f48:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextTR);
 8004f4a:	4878      	ldr	r0, [pc, #480]	; (800512c <loadMenuTexts+0x428>)
 8004f4c:	f7fb fb94 	bl	8000678 <copyText>
 8004f50:	4603      	mov	r3, r0
 8004f52:	4a77      	ldr	r2, [pc, #476]	; (8005130 <loadMenuTexts+0x42c>)
 8004f54:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextTR);
 8004f56:	4877      	ldr	r0, [pc, #476]	; (8005134 <loadMenuTexts+0x430>)
 8004f58:	f7fb fb8e 	bl	8000678 <copyText>
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	4a76      	ldr	r2, [pc, #472]	; (8005138 <loadMenuTexts+0x434>)
 8004f60:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextTR);
 8004f62:	4876      	ldr	r0, [pc, #472]	; (800513c <loadMenuTexts+0x438>)
 8004f64:	f7fb fb88 	bl	8000678 <copyText>
 8004f68:	4603      	mov	r3, r0
 8004f6a:	4a75      	ldr	r2, [pc, #468]	; (8005140 <loadMenuTexts+0x43c>)
 8004f6c:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextTR);
 8004f6e:	4875      	ldr	r0, [pc, #468]	; (8005144 <loadMenuTexts+0x440>)
 8004f70:	f7fb fb82 	bl	8000678 <copyText>
 8004f74:	4603      	mov	r3, r0
 8004f76:	4a74      	ldr	r2, [pc, #464]	; (8005148 <loadMenuTexts+0x444>)
 8004f78:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextTR);
 8004f7a:	4874      	ldr	r0, [pc, #464]	; (800514c <loadMenuTexts+0x448>)
 8004f7c:	f7fb fb7c 	bl	8000678 <copyText>
 8004f80:	4603      	mov	r3, r0
 8004f82:	4a73      	ldr	r2, [pc, #460]	; (8005150 <loadMenuTexts+0x44c>)
 8004f84:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextTR);
 8004f86:	4873      	ldr	r0, [pc, #460]	; (8005154 <loadMenuTexts+0x450>)
 8004f88:	f7fb fb76 	bl	8000678 <copyText>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	4a72      	ldr	r2, [pc, #456]	; (8005158 <loadMenuTexts+0x454>)
 8004f90:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextTR);
 8004f92:	4872      	ldr	r0, [pc, #456]	; (800515c <loadMenuTexts+0x458>)
 8004f94:	f7fb fb70 	bl	8000678 <copyText>
 8004f98:	4603      	mov	r3, r0
 8004f9a:	4a71      	ldr	r2, [pc, #452]	; (8005160 <loadMenuTexts+0x45c>)
 8004f9c:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextTR);
 8004f9e:	4871      	ldr	r0, [pc, #452]	; (8005164 <loadMenuTexts+0x460>)
 8004fa0:	f7fb fb6a 	bl	8000678 <copyText>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	4a70      	ldr	r2, [pc, #448]	; (8005168 <loadMenuTexts+0x464>)
 8004fa8:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextTR);
 8004faa:	4870      	ldr	r0, [pc, #448]	; (800516c <loadMenuTexts+0x468>)
 8004fac:	f7fb fb64 	bl	8000678 <copyText>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	e0dd      	b.n	8005170 <loadMenuTexts+0x46c>
 8004fb4:	20000000 	.word	0x20000000
 8004fb8:	20000c74 	.word	0x20000c74
 8004fbc:	20000010 	.word	0x20000010
 8004fc0:	20000c78 	.word	0x20000c78
 8004fc4:	20000020 	.word	0x20000020
 8004fc8:	20000cd0 	.word	0x20000cd0
 8004fcc:	20000030 	.word	0x20000030
 8004fd0:	20000d00 	.word	0x20000d00
 8004fd4:	20000040 	.word	0x20000040
 8004fd8:	20000d08 	.word	0x20000d08
 8004fdc:	20000050 	.word	0x20000050
 8004fe0:	20000d80 	.word	0x20000d80
 8004fe4:	20000060 	.word	0x20000060
 8004fe8:	20000d84 	.word	0x20000d84
 8004fec:	20000070 	.word	0x20000070
 8004ff0:	20000c7c 	.word	0x20000c7c
 8004ff4:	20000080 	.word	0x20000080
 8004ff8:	20000c80 	.word	0x20000c80
 8004ffc:	20000090 	.word	0x20000090
 8005000:	20000c84 	.word	0x20000c84
 8005004:	200000a0 	.word	0x200000a0
 8005008:	20000c88 	.word	0x20000c88
 800500c:	200000b0 	.word	0x200000b0
 8005010:	20000c8c 	.word	0x20000c8c
 8005014:	200000c0 	.word	0x200000c0
 8005018:	20000c90 	.word	0x20000c90
 800501c:	200000d0 	.word	0x200000d0
 8005020:	20000c94 	.word	0x20000c94
 8005024:	200000e0 	.word	0x200000e0
 8005028:	20000c98 	.word	0x20000c98
 800502c:	200000f0 	.word	0x200000f0
 8005030:	20000c9c 	.word	0x20000c9c
 8005034:	20000100 	.word	0x20000100
 8005038:	20000ca0 	.word	0x20000ca0
 800503c:	20000110 	.word	0x20000110
 8005040:	20000ca4 	.word	0x20000ca4
 8005044:	20000120 	.word	0x20000120
 8005048:	20000ca8 	.word	0x20000ca8
 800504c:	20000130 	.word	0x20000130
 8005050:	20000cac 	.word	0x20000cac
 8005054:	20000140 	.word	0x20000140
 8005058:	20000cb0 	.word	0x20000cb0
 800505c:	20000150 	.word	0x20000150
 8005060:	20000cb4 	.word	0x20000cb4
 8005064:	20000160 	.word	0x20000160
 8005068:	20000cb8 	.word	0x20000cb8
 800506c:	20000170 	.word	0x20000170
 8005070:	20000cbc 	.word	0x20000cbc
 8005074:	20000180 	.word	0x20000180
 8005078:	20000cc0 	.word	0x20000cc0
 800507c:	20000190 	.word	0x20000190
 8005080:	20000cc4 	.word	0x20000cc4
 8005084:	200001a0 	.word	0x200001a0
 8005088:	20000cc8 	.word	0x20000cc8
 800508c:	200001b0 	.word	0x200001b0
 8005090:	20000ccc 	.word	0x20000ccc
 8005094:	200001c0 	.word	0x200001c0
 8005098:	20000cd4 	.word	0x20000cd4
 800509c:	200001d0 	.word	0x200001d0
 80050a0:	20000cd8 	.word	0x20000cd8
 80050a4:	200001e0 	.word	0x200001e0
 80050a8:	20000cdc 	.word	0x20000cdc
 80050ac:	200001f0 	.word	0x200001f0
 80050b0:	20000ce0 	.word	0x20000ce0
 80050b4:	20000200 	.word	0x20000200
 80050b8:	20000ce4 	.word	0x20000ce4
 80050bc:	20000210 	.word	0x20000210
 80050c0:	20000ce8 	.word	0x20000ce8
 80050c4:	20000220 	.word	0x20000220
 80050c8:	20000cec 	.word	0x20000cec
 80050cc:	20000230 	.word	0x20000230
 80050d0:	20000cf0 	.word	0x20000cf0
 80050d4:	20000240 	.word	0x20000240
 80050d8:	20000cf4 	.word	0x20000cf4
 80050dc:	20000250 	.word	0x20000250
 80050e0:	20000cf8 	.word	0x20000cf8
 80050e4:	20000260 	.word	0x20000260
 80050e8:	20000cfc 	.word	0x20000cfc
 80050ec:	20000270 	.word	0x20000270
 80050f0:	20000d04 	.word	0x20000d04
 80050f4:	20000280 	.word	0x20000280
 80050f8:	20000d0c 	.word	0x20000d0c
 80050fc:	20000290 	.word	0x20000290
 8005100:	20000d10 	.word	0x20000d10
 8005104:	200002a0 	.word	0x200002a0
 8005108:	20000d14 	.word	0x20000d14
 800510c:	200002b0 	.word	0x200002b0
 8005110:	20000d18 	.word	0x20000d18
 8005114:	200002c0 	.word	0x200002c0
 8005118:	20000d1c 	.word	0x20000d1c
 800511c:	200002d0 	.word	0x200002d0
 8005120:	20000d20 	.word	0x20000d20
 8005124:	200002e0 	.word	0x200002e0
 8005128:	20000d24 	.word	0x20000d24
 800512c:	200002f0 	.word	0x200002f0
 8005130:	20000d28 	.word	0x20000d28
 8005134:	20000300 	.word	0x20000300
 8005138:	20000d2c 	.word	0x20000d2c
 800513c:	20000310 	.word	0x20000310
 8005140:	20000d30 	.word	0x20000d30
 8005144:	20000320 	.word	0x20000320
 8005148:	20000d34 	.word	0x20000d34
 800514c:	20000330 	.word	0x20000330
 8005150:	20000d38 	.word	0x20000d38
 8005154:	20000340 	.word	0x20000340
 8005158:	20000d3c 	.word	0x20000d3c
 800515c:	20000350 	.word	0x20000350
 8005160:	20000d40 	.word	0x20000d40
 8005164:	20000360 	.word	0x20000360
 8005168:	20000d44 	.word	0x20000d44
 800516c:	20000370 	.word	0x20000370
 8005170:	4a3d      	ldr	r2, [pc, #244]	; (8005268 <loadMenuTexts+0x564>)
 8005172:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextTR);
 8005174:	483d      	ldr	r0, [pc, #244]	; (800526c <loadMenuTexts+0x568>)
 8005176:	f7fb fa7f 	bl	8000678 <copyText>
 800517a:	4603      	mov	r3, r0
 800517c:	4a3c      	ldr	r2, [pc, #240]	; (8005270 <loadMenuTexts+0x56c>)
 800517e:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextTR);
 8005180:	483c      	ldr	r0, [pc, #240]	; (8005274 <loadMenuTexts+0x570>)
 8005182:	f7fb fa79 	bl	8000678 <copyText>
 8005186:	4603      	mov	r3, r0
 8005188:	4a3b      	ldr	r2, [pc, #236]	; (8005278 <loadMenuTexts+0x574>)
 800518a:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextTR);
 800518c:	483b      	ldr	r0, [pc, #236]	; (800527c <loadMenuTexts+0x578>)
 800518e:	f7fb fa73 	bl	8000678 <copyText>
 8005192:	4603      	mov	r3, r0
 8005194:	4a3a      	ldr	r2, [pc, #232]	; (8005280 <loadMenuTexts+0x57c>)
 8005196:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextTR);
 8005198:	483a      	ldr	r0, [pc, #232]	; (8005284 <loadMenuTexts+0x580>)
 800519a:	f7fb fa6d 	bl	8000678 <copyText>
 800519e:	4603      	mov	r3, r0
 80051a0:	4a39      	ldr	r2, [pc, #228]	; (8005288 <loadMenuTexts+0x584>)
 80051a2:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextTR);
 80051a4:	4839      	ldr	r0, [pc, #228]	; (800528c <loadMenuTexts+0x588>)
 80051a6:	f7fb fa67 	bl	8000678 <copyText>
 80051aa:	4603      	mov	r3, r0
 80051ac:	4a38      	ldr	r2, [pc, #224]	; (8005290 <loadMenuTexts+0x58c>)
 80051ae:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextTR);
 80051b0:	4838      	ldr	r0, [pc, #224]	; (8005294 <loadMenuTexts+0x590>)
 80051b2:	f7fb fa61 	bl	8000678 <copyText>
 80051b6:	4603      	mov	r3, r0
 80051b8:	4a37      	ldr	r2, [pc, #220]	; (8005298 <loadMenuTexts+0x594>)
 80051ba:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextTR);
 80051bc:	4837      	ldr	r0, [pc, #220]	; (800529c <loadMenuTexts+0x598>)
 80051be:	f7fb fa5b 	bl	8000678 <copyText>
 80051c2:	4603      	mov	r3, r0
 80051c4:	4a36      	ldr	r2, [pc, #216]	; (80052a0 <loadMenuTexts+0x59c>)
 80051c6:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextTR);
 80051c8:	4836      	ldr	r0, [pc, #216]	; (80052a4 <loadMenuTexts+0x5a0>)
 80051ca:	f7fb fa55 	bl	8000678 <copyText>
 80051ce:	4603      	mov	r3, r0
 80051d0:	4a35      	ldr	r2, [pc, #212]	; (80052a8 <loadMenuTexts+0x5a4>)
 80051d2:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextTR);
 80051d4:	4835      	ldr	r0, [pc, #212]	; (80052ac <loadMenuTexts+0x5a8>)
 80051d6:	f7fb fa4f 	bl	8000678 <copyText>
 80051da:	4603      	mov	r3, r0
 80051dc:	4a34      	ldr	r2, [pc, #208]	; (80052b0 <loadMenuTexts+0x5ac>)
 80051de:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextTR);
 80051e0:	4834      	ldr	r0, [pc, #208]	; (80052b4 <loadMenuTexts+0x5b0>)
 80051e2:	f7fb fa49 	bl	8000678 <copyText>
 80051e6:	4603      	mov	r3, r0
 80051e8:	4a33      	ldr	r2, [pc, #204]	; (80052b8 <loadMenuTexts+0x5b4>)
 80051ea:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextTR);
 80051ec:	4833      	ldr	r0, [pc, #204]	; (80052bc <loadMenuTexts+0x5b8>)
 80051ee:	f7fb fa43 	bl	8000678 <copyText>
 80051f2:	4603      	mov	r3, r0
 80051f4:	4a32      	ldr	r2, [pc, #200]	; (80052c0 <loadMenuTexts+0x5bc>)
 80051f6:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextTR);
 80051f8:	4832      	ldr	r0, [pc, #200]	; (80052c4 <loadMenuTexts+0x5c0>)
 80051fa:	f7fb fa3d 	bl	8000678 <copyText>
 80051fe:	4603      	mov	r3, r0
 8005200:	4a31      	ldr	r2, [pc, #196]	; (80052c8 <loadMenuTexts+0x5c4>)
 8005202:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextTR);
 8005204:	4831      	ldr	r0, [pc, #196]	; (80052cc <loadMenuTexts+0x5c8>)
 8005206:	f7fb fa37 	bl	8000678 <copyText>
 800520a:	4603      	mov	r3, r0
 800520c:	4a30      	ldr	r2, [pc, #192]	; (80052d0 <loadMenuTexts+0x5cc>)
 800520e:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextTR);
 8005210:	4830      	ldr	r0, [pc, #192]	; (80052d4 <loadMenuTexts+0x5d0>)
 8005212:	f7fb fa31 	bl	8000678 <copyText>
 8005216:	4603      	mov	r3, r0
 8005218:	4a2f      	ldr	r2, [pc, #188]	; (80052d8 <loadMenuTexts+0x5d4>)
 800521a:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextTR);
 800521c:	482f      	ldr	r0, [pc, #188]	; (80052dc <loadMenuTexts+0x5d8>)
 800521e:	f7fb fa2b 	bl	8000678 <copyText>
 8005222:	4603      	mov	r3, r0
 8005224:	4a2e      	ldr	r2, [pc, #184]	; (80052e0 <loadMenuTexts+0x5dc>)
 8005226:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextTR);
 8005228:	482e      	ldr	r0, [pc, #184]	; (80052e4 <loadMenuTexts+0x5e0>)
 800522a:	f7fb fa25 	bl	8000678 <copyText>
 800522e:	4603      	mov	r3, r0
 8005230:	4a2d      	ldr	r2, [pc, #180]	; (80052e8 <loadMenuTexts+0x5e4>)
 8005232:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextTR);
 8005234:	482d      	ldr	r0, [pc, #180]	; (80052ec <loadMenuTexts+0x5e8>)
 8005236:	f7fb fa1f 	bl	8000678 <copyText>
 800523a:	4603      	mov	r3, r0
 800523c:	4a2c      	ldr	r2, [pc, #176]	; (80052f0 <loadMenuTexts+0x5ec>)
 800523e:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextTR);
 8005240:	482c      	ldr	r0, [pc, #176]	; (80052f4 <loadMenuTexts+0x5f0>)
 8005242:	f7fb fa19 	bl	8000678 <copyText>
 8005246:	4603      	mov	r3, r0
 8005248:	4a2b      	ldr	r2, [pc, #172]	; (80052f8 <loadMenuTexts+0x5f4>)
 800524a:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextTR);
 800524c:	482b      	ldr	r0, [pc, #172]	; (80052fc <loadMenuTexts+0x5f8>)
 800524e:	f7fb fa13 	bl	8000678 <copyText>
 8005252:	4603      	mov	r3, r0
 8005254:	4a2a      	ldr	r2, [pc, #168]	; (8005300 <loadMenuTexts+0x5fc>)
 8005256:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextTR);
 8005258:	482a      	ldr	r0, [pc, #168]	; (8005304 <loadMenuTexts+0x600>)
 800525a:	f7fb fa0d 	bl	8000678 <copyText>
 800525e:	4603      	mov	r3, r0
 8005260:	4a29      	ldr	r2, [pc, #164]	; (8005308 <loadMenuTexts+0x604>)
 8005262:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
		menudenCikisText = copyText(menudenCikisTextEN);
		enteraBasinizText = copyText(enteraBasinizTextEN);
		hataKoduText = copyText(hataKoduTextEN);
	}
}
 8005264:	e2d3      	b.n	800580e <loadMenuTexts+0xb0a>
 8005266:	bf00      	nop
 8005268:	20000d48 	.word	0x20000d48
 800526c:	20000380 	.word	0x20000380
 8005270:	20000d4c 	.word	0x20000d4c
 8005274:	20000390 	.word	0x20000390
 8005278:	20000d50 	.word	0x20000d50
 800527c:	200003a0 	.word	0x200003a0
 8005280:	20000d54 	.word	0x20000d54
 8005284:	200003b0 	.word	0x200003b0
 8005288:	20000d58 	.word	0x20000d58
 800528c:	200003c0 	.word	0x200003c0
 8005290:	20000d5c 	.word	0x20000d5c
 8005294:	200003d0 	.word	0x200003d0
 8005298:	20000d60 	.word	0x20000d60
 800529c:	200003e0 	.word	0x200003e0
 80052a0:	20000d64 	.word	0x20000d64
 80052a4:	200003f0 	.word	0x200003f0
 80052a8:	20000d68 	.word	0x20000d68
 80052ac:	20000400 	.word	0x20000400
 80052b0:	20000d6c 	.word	0x20000d6c
 80052b4:	20000410 	.word	0x20000410
 80052b8:	20000d70 	.word	0x20000d70
 80052bc:	20000420 	.word	0x20000420
 80052c0:	20000d74 	.word	0x20000d74
 80052c4:	20000430 	.word	0x20000430
 80052c8:	20000d78 	.word	0x20000d78
 80052cc:	20000440 	.word	0x20000440
 80052d0:	20000d7c 	.word	0x20000d7c
 80052d4:	20000450 	.word	0x20000450
 80052d8:	20000d88 	.word	0x20000d88
 80052dc:	20000460 	.word	0x20000460
 80052e0:	20000d8c 	.word	0x20000d8c
 80052e4:	20000470 	.word	0x20000470
 80052e8:	20000d90 	.word	0x20000d90
 80052ec:	20000480 	.word	0x20000480
 80052f0:	20000d94 	.word	0x20000d94
 80052f4:	20000490 	.word	0x20000490
 80052f8:	20000d98 	.word	0x20000d98
 80052fc:	200004a0 	.word	0x200004a0
 8005300:	20000d9c 	.word	0x20000d9c
 8005304:	200004b0 	.word	0x200004b0
 8005308:	20000da0 	.word	0x20000da0
		menuyeGirildiText = copyText(menuyeGirildiTextEN);
 800530c:	48a9      	ldr	r0, [pc, #676]	; (80055b4 <loadMenuTexts+0x8b0>)
 800530e:	f7fb f9b3 	bl	8000678 <copyText>
 8005312:	4603      	mov	r3, r0
 8005314:	4aa8      	ldr	r2, [pc, #672]	; (80055b8 <loadMenuTexts+0x8b4>)
 8005316:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextEN);
 8005318:	48a8      	ldr	r0, [pc, #672]	; (80055bc <loadMenuTexts+0x8b8>)
 800531a:	f7fb f9ad 	bl	8000678 <copyText>
 800531e:	4603      	mov	r3, r0
 8005320:	4aa7      	ldr	r2, [pc, #668]	; (80055c0 <loadMenuTexts+0x8bc>)
 8005322:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextEN);
 8005324:	48a7      	ldr	r0, [pc, #668]	; (80055c4 <loadMenuTexts+0x8c0>)
 8005326:	f7fb f9a7 	bl	8000678 <copyText>
 800532a:	4603      	mov	r3, r0
 800532c:	4aa6      	ldr	r2, [pc, #664]	; (80055c8 <loadMenuTexts+0x8c4>)
 800532e:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextEN);
 8005330:	48a6      	ldr	r0, [pc, #664]	; (80055cc <loadMenuTexts+0x8c8>)
 8005332:	f7fb f9a1 	bl	8000678 <copyText>
 8005336:	4603      	mov	r3, r0
 8005338:	4aa5      	ldr	r2, [pc, #660]	; (80055d0 <loadMenuTexts+0x8cc>)
 800533a:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextEN);
 800533c:	48a5      	ldr	r0, [pc, #660]	; (80055d4 <loadMenuTexts+0x8d0>)
 800533e:	f7fb f99b 	bl	8000678 <copyText>
 8005342:	4603      	mov	r3, r0
 8005344:	4aa4      	ldr	r2, [pc, #656]	; (80055d8 <loadMenuTexts+0x8d4>)
 8005346:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextEN);
 8005348:	48a4      	ldr	r0, [pc, #656]	; (80055dc <loadMenuTexts+0x8d8>)
 800534a:	f7fb f995 	bl	8000678 <copyText>
 800534e:	4603      	mov	r3, r0
 8005350:	4aa3      	ldr	r2, [pc, #652]	; (80055e0 <loadMenuTexts+0x8dc>)
 8005352:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextEN);
 8005354:	48a3      	ldr	r0, [pc, #652]	; (80055e4 <loadMenuTexts+0x8e0>)
 8005356:	f7fb f98f 	bl	8000678 <copyText>
 800535a:	4603      	mov	r3, r0
 800535c:	4aa2      	ldr	r2, [pc, #648]	; (80055e8 <loadMenuTexts+0x8e4>)
 800535e:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextEN);
 8005360:	48a2      	ldr	r0, [pc, #648]	; (80055ec <loadMenuTexts+0x8e8>)
 8005362:	f7fb f989 	bl	8000678 <copyText>
 8005366:	4603      	mov	r3, r0
 8005368:	4aa1      	ldr	r2, [pc, #644]	; (80055f0 <loadMenuTexts+0x8ec>)
 800536a:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextEN);
 800536c:	48a1      	ldr	r0, [pc, #644]	; (80055f4 <loadMenuTexts+0x8f0>)
 800536e:	f7fb f983 	bl	8000678 <copyText>
 8005372:	4603      	mov	r3, r0
 8005374:	4aa0      	ldr	r2, [pc, #640]	; (80055f8 <loadMenuTexts+0x8f4>)
 8005376:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextEN);
 8005378:	48a0      	ldr	r0, [pc, #640]	; (80055fc <loadMenuTexts+0x8f8>)
 800537a:	f7fb f97d 	bl	8000678 <copyText>
 800537e:	4603      	mov	r3, r0
 8005380:	4a9f      	ldr	r2, [pc, #636]	; (8005600 <loadMenuTexts+0x8fc>)
 8005382:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextEN);
 8005384:	489f      	ldr	r0, [pc, #636]	; (8005604 <loadMenuTexts+0x900>)
 8005386:	f7fb f977 	bl	8000678 <copyText>
 800538a:	4603      	mov	r3, r0
 800538c:	4a9e      	ldr	r2, [pc, #632]	; (8005608 <loadMenuTexts+0x904>)
 800538e:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextEN);
 8005390:	489e      	ldr	r0, [pc, #632]	; (800560c <loadMenuTexts+0x908>)
 8005392:	f7fb f971 	bl	8000678 <copyText>
 8005396:	4603      	mov	r3, r0
 8005398:	4a9d      	ldr	r2, [pc, #628]	; (8005610 <loadMenuTexts+0x90c>)
 800539a:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextEN);
 800539c:	489d      	ldr	r0, [pc, #628]	; (8005614 <loadMenuTexts+0x910>)
 800539e:	f7fb f96b 	bl	8000678 <copyText>
 80053a2:	4603      	mov	r3, r0
 80053a4:	4a9c      	ldr	r2, [pc, #624]	; (8005618 <loadMenuTexts+0x914>)
 80053a6:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextEN);
 80053a8:	489c      	ldr	r0, [pc, #624]	; (800561c <loadMenuTexts+0x918>)
 80053aa:	f7fb f965 	bl	8000678 <copyText>
 80053ae:	4603      	mov	r3, r0
 80053b0:	4a9b      	ldr	r2, [pc, #620]	; (8005620 <loadMenuTexts+0x91c>)
 80053b2:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextEN);
 80053b4:	489b      	ldr	r0, [pc, #620]	; (8005624 <loadMenuTexts+0x920>)
 80053b6:	f7fb f95f 	bl	8000678 <copyText>
 80053ba:	4603      	mov	r3, r0
 80053bc:	4a9a      	ldr	r2, [pc, #616]	; (8005628 <loadMenuTexts+0x924>)
 80053be:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextEN);
 80053c0:	489a      	ldr	r0, [pc, #616]	; (800562c <loadMenuTexts+0x928>)
 80053c2:	f7fb f959 	bl	8000678 <copyText>
 80053c6:	4603      	mov	r3, r0
 80053c8:	4a99      	ldr	r2, [pc, #612]	; (8005630 <loadMenuTexts+0x92c>)
 80053ca:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextEN);
 80053cc:	4899      	ldr	r0, [pc, #612]	; (8005634 <loadMenuTexts+0x930>)
 80053ce:	f7fb f953 	bl	8000678 <copyText>
 80053d2:	4603      	mov	r3, r0
 80053d4:	4a98      	ldr	r2, [pc, #608]	; (8005638 <loadMenuTexts+0x934>)
 80053d6:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextEN);
 80053d8:	4898      	ldr	r0, [pc, #608]	; (800563c <loadMenuTexts+0x938>)
 80053da:	f7fb f94d 	bl	8000678 <copyText>
 80053de:	4603      	mov	r3, r0
 80053e0:	4a97      	ldr	r2, [pc, #604]	; (8005640 <loadMenuTexts+0x93c>)
 80053e2:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextEN);
 80053e4:	4897      	ldr	r0, [pc, #604]	; (8005644 <loadMenuTexts+0x940>)
 80053e6:	f7fb f947 	bl	8000678 <copyText>
 80053ea:	4603      	mov	r3, r0
 80053ec:	4a96      	ldr	r2, [pc, #600]	; (8005648 <loadMenuTexts+0x944>)
 80053ee:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextEN);
 80053f0:	4896      	ldr	r0, [pc, #600]	; (800564c <loadMenuTexts+0x948>)
 80053f2:	f7fb f941 	bl	8000678 <copyText>
 80053f6:	4603      	mov	r3, r0
 80053f8:	4a95      	ldr	r2, [pc, #596]	; (8005650 <loadMenuTexts+0x94c>)
 80053fa:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextEN);
 80053fc:	4895      	ldr	r0, [pc, #596]	; (8005654 <loadMenuTexts+0x950>)
 80053fe:	f7fb f93b 	bl	8000678 <copyText>
 8005402:	4603      	mov	r3, r0
 8005404:	4a94      	ldr	r2, [pc, #592]	; (8005658 <loadMenuTexts+0x954>)
 8005406:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextEN);
 8005408:	4894      	ldr	r0, [pc, #592]	; (800565c <loadMenuTexts+0x958>)
 800540a:	f7fb f935 	bl	8000678 <copyText>
 800540e:	4603      	mov	r3, r0
 8005410:	4a93      	ldr	r2, [pc, #588]	; (8005660 <loadMenuTexts+0x95c>)
 8005412:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextEN);
 8005414:	4893      	ldr	r0, [pc, #588]	; (8005664 <loadMenuTexts+0x960>)
 8005416:	f7fb f92f 	bl	8000678 <copyText>
 800541a:	4603      	mov	r3, r0
 800541c:	4a92      	ldr	r2, [pc, #584]	; (8005668 <loadMenuTexts+0x964>)
 800541e:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextEN);
 8005420:	4892      	ldr	r0, [pc, #584]	; (800566c <loadMenuTexts+0x968>)
 8005422:	f7fb f929 	bl	8000678 <copyText>
 8005426:	4603      	mov	r3, r0
 8005428:	4a91      	ldr	r2, [pc, #580]	; (8005670 <loadMenuTexts+0x96c>)
 800542a:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextEN);
 800542c:	4891      	ldr	r0, [pc, #580]	; (8005674 <loadMenuTexts+0x970>)
 800542e:	f7fb f923 	bl	8000678 <copyText>
 8005432:	4603      	mov	r3, r0
 8005434:	4a90      	ldr	r2, [pc, #576]	; (8005678 <loadMenuTexts+0x974>)
 8005436:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextEN);
 8005438:	4890      	ldr	r0, [pc, #576]	; (800567c <loadMenuTexts+0x978>)
 800543a:	f7fb f91d 	bl	8000678 <copyText>
 800543e:	4603      	mov	r3, r0
 8005440:	4a8f      	ldr	r2, [pc, #572]	; (8005680 <loadMenuTexts+0x97c>)
 8005442:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextEN);
 8005444:	488f      	ldr	r0, [pc, #572]	; (8005684 <loadMenuTexts+0x980>)
 8005446:	f7fb f917 	bl	8000678 <copyText>
 800544a:	4603      	mov	r3, r0
 800544c:	4a8e      	ldr	r2, [pc, #568]	; (8005688 <loadMenuTexts+0x984>)
 800544e:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextEN);
 8005450:	488e      	ldr	r0, [pc, #568]	; (800568c <loadMenuTexts+0x988>)
 8005452:	f7fb f911 	bl	8000678 <copyText>
 8005456:	4603      	mov	r3, r0
 8005458:	4a8d      	ldr	r2, [pc, #564]	; (8005690 <loadMenuTexts+0x98c>)
 800545a:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextEN);
 800545c:	488d      	ldr	r0, [pc, #564]	; (8005694 <loadMenuTexts+0x990>)
 800545e:	f7fb f90b 	bl	8000678 <copyText>
 8005462:	4603      	mov	r3, r0
 8005464:	4a8c      	ldr	r2, [pc, #560]	; (8005698 <loadMenuTexts+0x994>)
 8005466:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextEN);
 8005468:	488c      	ldr	r0, [pc, #560]	; (800569c <loadMenuTexts+0x998>)
 800546a:	f7fb f905 	bl	8000678 <copyText>
 800546e:	4603      	mov	r3, r0
 8005470:	4a8b      	ldr	r2, [pc, #556]	; (80056a0 <loadMenuTexts+0x99c>)
 8005472:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextEN);
 8005474:	488b      	ldr	r0, [pc, #556]	; (80056a4 <loadMenuTexts+0x9a0>)
 8005476:	f7fb f8ff 	bl	8000678 <copyText>
 800547a:	4603      	mov	r3, r0
 800547c:	4a8a      	ldr	r2, [pc, #552]	; (80056a8 <loadMenuTexts+0x9a4>)
 800547e:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextEN);
 8005480:	488a      	ldr	r0, [pc, #552]	; (80056ac <loadMenuTexts+0x9a8>)
 8005482:	f7fb f8f9 	bl	8000678 <copyText>
 8005486:	4603      	mov	r3, r0
 8005488:	4a89      	ldr	r2, [pc, #548]	; (80056b0 <loadMenuTexts+0x9ac>)
 800548a:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextEN);
 800548c:	4889      	ldr	r0, [pc, #548]	; (80056b4 <loadMenuTexts+0x9b0>)
 800548e:	f7fb f8f3 	bl	8000678 <copyText>
 8005492:	4603      	mov	r3, r0
 8005494:	4a88      	ldr	r2, [pc, #544]	; (80056b8 <loadMenuTexts+0x9b4>)
 8005496:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextEN);
 8005498:	4888      	ldr	r0, [pc, #544]	; (80056bc <loadMenuTexts+0x9b8>)
 800549a:	f7fb f8ed 	bl	8000678 <copyText>
 800549e:	4603      	mov	r3, r0
 80054a0:	4a87      	ldr	r2, [pc, #540]	; (80056c0 <loadMenuTexts+0x9bc>)
 80054a2:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextEN);
 80054a4:	4887      	ldr	r0, [pc, #540]	; (80056c4 <loadMenuTexts+0x9c0>)
 80054a6:	f7fb f8e7 	bl	8000678 <copyText>
 80054aa:	4603      	mov	r3, r0
 80054ac:	4a86      	ldr	r2, [pc, #536]	; (80056c8 <loadMenuTexts+0x9c4>)
 80054ae:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextEN);
 80054b0:	4886      	ldr	r0, [pc, #536]	; (80056cc <loadMenuTexts+0x9c8>)
 80054b2:	f7fb f8e1 	bl	8000678 <copyText>
 80054b6:	4603      	mov	r3, r0
 80054b8:	4a85      	ldr	r2, [pc, #532]	; (80056d0 <loadMenuTexts+0x9cc>)
 80054ba:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextEN);
 80054bc:	4885      	ldr	r0, [pc, #532]	; (80056d4 <loadMenuTexts+0x9d0>)
 80054be:	f7fb f8db 	bl	8000678 <copyText>
 80054c2:	4603      	mov	r3, r0
 80054c4:	4a84      	ldr	r2, [pc, #528]	; (80056d8 <loadMenuTexts+0x9d4>)
 80054c6:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextEN);
 80054c8:	4884      	ldr	r0, [pc, #528]	; (80056dc <loadMenuTexts+0x9d8>)
 80054ca:	f7fb f8d5 	bl	8000678 <copyText>
 80054ce:	4603      	mov	r3, r0
 80054d0:	4a83      	ldr	r2, [pc, #524]	; (80056e0 <loadMenuTexts+0x9dc>)
 80054d2:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextEN);
 80054d4:	4883      	ldr	r0, [pc, #524]	; (80056e4 <loadMenuTexts+0x9e0>)
 80054d6:	f7fb f8cf 	bl	8000678 <copyText>
 80054da:	4603      	mov	r3, r0
 80054dc:	4a82      	ldr	r2, [pc, #520]	; (80056e8 <loadMenuTexts+0x9e4>)
 80054de:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextEN);
 80054e0:	4882      	ldr	r0, [pc, #520]	; (80056ec <loadMenuTexts+0x9e8>)
 80054e2:	f7fb f8c9 	bl	8000678 <copyText>
 80054e6:	4603      	mov	r3, r0
 80054e8:	4a81      	ldr	r2, [pc, #516]	; (80056f0 <loadMenuTexts+0x9ec>)
 80054ea:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextEN);
 80054ec:	4881      	ldr	r0, [pc, #516]	; (80056f4 <loadMenuTexts+0x9f0>)
 80054ee:	f7fb f8c3 	bl	8000678 <copyText>
 80054f2:	4603      	mov	r3, r0
 80054f4:	4a80      	ldr	r2, [pc, #512]	; (80056f8 <loadMenuTexts+0x9f4>)
 80054f6:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextEN);
 80054f8:	4880      	ldr	r0, [pc, #512]	; (80056fc <loadMenuTexts+0x9f8>)
 80054fa:	f7fb f8bd 	bl	8000678 <copyText>
 80054fe:	4603      	mov	r3, r0
 8005500:	4a7f      	ldr	r2, [pc, #508]	; (8005700 <loadMenuTexts+0x9fc>)
 8005502:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextEN);
 8005504:	487f      	ldr	r0, [pc, #508]	; (8005704 <loadMenuTexts+0xa00>)
 8005506:	f7fb f8b7 	bl	8000678 <copyText>
 800550a:	4603      	mov	r3, r0
 800550c:	4a7e      	ldr	r2, [pc, #504]	; (8005708 <loadMenuTexts+0xa04>)
 800550e:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextEN);
 8005510:	487e      	ldr	r0, [pc, #504]	; (800570c <loadMenuTexts+0xa08>)
 8005512:	f7fb f8b1 	bl	8000678 <copyText>
 8005516:	4603      	mov	r3, r0
 8005518:	4a7d      	ldr	r2, [pc, #500]	; (8005710 <loadMenuTexts+0xa0c>)
 800551a:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextEN);
 800551c:	487d      	ldr	r0, [pc, #500]	; (8005714 <loadMenuTexts+0xa10>)
 800551e:	f7fb f8ab 	bl	8000678 <copyText>
 8005522:	4603      	mov	r3, r0
 8005524:	4a7c      	ldr	r2, [pc, #496]	; (8005718 <loadMenuTexts+0xa14>)
 8005526:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextEN);
 8005528:	487c      	ldr	r0, [pc, #496]	; (800571c <loadMenuTexts+0xa18>)
 800552a:	f7fb f8a5 	bl	8000678 <copyText>
 800552e:	4603      	mov	r3, r0
 8005530:	4a7b      	ldr	r2, [pc, #492]	; (8005720 <loadMenuTexts+0xa1c>)
 8005532:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextEN);
 8005534:	487b      	ldr	r0, [pc, #492]	; (8005724 <loadMenuTexts+0xa20>)
 8005536:	f7fb f89f 	bl	8000678 <copyText>
 800553a:	4603      	mov	r3, r0
 800553c:	4a7a      	ldr	r2, [pc, #488]	; (8005728 <loadMenuTexts+0xa24>)
 800553e:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextEN);
 8005540:	487a      	ldr	r0, [pc, #488]	; (800572c <loadMenuTexts+0xa28>)
 8005542:	f7fb f899 	bl	8000678 <copyText>
 8005546:	4603      	mov	r3, r0
 8005548:	4a79      	ldr	r2, [pc, #484]	; (8005730 <loadMenuTexts+0xa2c>)
 800554a:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextEN);
 800554c:	4879      	ldr	r0, [pc, #484]	; (8005734 <loadMenuTexts+0xa30>)
 800554e:	f7fb f893 	bl	8000678 <copyText>
 8005552:	4603      	mov	r3, r0
 8005554:	4a78      	ldr	r2, [pc, #480]	; (8005738 <loadMenuTexts+0xa34>)
 8005556:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextEN);
 8005558:	4878      	ldr	r0, [pc, #480]	; (800573c <loadMenuTexts+0xa38>)
 800555a:	f7fb f88d 	bl	8000678 <copyText>
 800555e:	4603      	mov	r3, r0
 8005560:	4a77      	ldr	r2, [pc, #476]	; (8005740 <loadMenuTexts+0xa3c>)
 8005562:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextEN);
 8005564:	4877      	ldr	r0, [pc, #476]	; (8005744 <loadMenuTexts+0xa40>)
 8005566:	f7fb f887 	bl	8000678 <copyText>
 800556a:	4603      	mov	r3, r0
 800556c:	4a76      	ldr	r2, [pc, #472]	; (8005748 <loadMenuTexts+0xa44>)
 800556e:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextEN);
 8005570:	4876      	ldr	r0, [pc, #472]	; (800574c <loadMenuTexts+0xa48>)
 8005572:	f7fb f881 	bl	8000678 <copyText>
 8005576:	4603      	mov	r3, r0
 8005578:	4a75      	ldr	r2, [pc, #468]	; (8005750 <loadMenuTexts+0xa4c>)
 800557a:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextEN);
 800557c:	4875      	ldr	r0, [pc, #468]	; (8005754 <loadMenuTexts+0xa50>)
 800557e:	f7fb f87b 	bl	8000678 <copyText>
 8005582:	4603      	mov	r3, r0
 8005584:	4a74      	ldr	r2, [pc, #464]	; (8005758 <loadMenuTexts+0xa54>)
 8005586:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextEN);
 8005588:	4874      	ldr	r0, [pc, #464]	; (800575c <loadMenuTexts+0xa58>)
 800558a:	f7fb f875 	bl	8000678 <copyText>
 800558e:	4603      	mov	r3, r0
 8005590:	4a73      	ldr	r2, [pc, #460]	; (8005760 <loadMenuTexts+0xa5c>)
 8005592:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextEN);
 8005594:	4873      	ldr	r0, [pc, #460]	; (8005764 <loadMenuTexts+0xa60>)
 8005596:	f7fb f86f 	bl	8000678 <copyText>
 800559a:	4603      	mov	r3, r0
 800559c:	4a72      	ldr	r2, [pc, #456]	; (8005768 <loadMenuTexts+0xa64>)
 800559e:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextEN);
 80055a0:	4872      	ldr	r0, [pc, #456]	; (800576c <loadMenuTexts+0xa68>)
 80055a2:	f7fb f869 	bl	8000678 <copyText>
 80055a6:	4603      	mov	r3, r0
 80055a8:	4a71      	ldr	r2, [pc, #452]	; (8005770 <loadMenuTexts+0xa6c>)
 80055aa:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextEN);
 80055ac:	4871      	ldr	r0, [pc, #452]	; (8005774 <loadMenuTexts+0xa70>)
 80055ae:	f7fb f863 	bl	8000678 <copyText>
 80055b2:	e0e1      	b.n	8005778 <loadMenuTexts+0xa74>
 80055b4:	200004c0 	.word	0x200004c0
 80055b8:	20000c7c 	.word	0x20000c7c
 80055bc:	200004d0 	.word	0x200004d0
 80055c0:	20000c80 	.word	0x20000c80
 80055c4:	200004e0 	.word	0x200004e0
 80055c8:	20000c84 	.word	0x20000c84
 80055cc:	200004f0 	.word	0x200004f0
 80055d0:	20000c88 	.word	0x20000c88
 80055d4:	20000500 	.word	0x20000500
 80055d8:	20000c8c 	.word	0x20000c8c
 80055dc:	20000510 	.word	0x20000510
 80055e0:	20000c90 	.word	0x20000c90
 80055e4:	20000520 	.word	0x20000520
 80055e8:	20000c94 	.word	0x20000c94
 80055ec:	20000530 	.word	0x20000530
 80055f0:	20000c98 	.word	0x20000c98
 80055f4:	20000540 	.word	0x20000540
 80055f8:	20000c9c 	.word	0x20000c9c
 80055fc:	20000550 	.word	0x20000550
 8005600:	20000ca0 	.word	0x20000ca0
 8005604:	20000560 	.word	0x20000560
 8005608:	20000ca4 	.word	0x20000ca4
 800560c:	20000570 	.word	0x20000570
 8005610:	20000ca8 	.word	0x20000ca8
 8005614:	20000580 	.word	0x20000580
 8005618:	20000cac 	.word	0x20000cac
 800561c:	20000590 	.word	0x20000590
 8005620:	20000cb0 	.word	0x20000cb0
 8005624:	200005a0 	.word	0x200005a0
 8005628:	20000cb4 	.word	0x20000cb4
 800562c:	200005b0 	.word	0x200005b0
 8005630:	20000cb8 	.word	0x20000cb8
 8005634:	200005c0 	.word	0x200005c0
 8005638:	20000cbc 	.word	0x20000cbc
 800563c:	200005d0 	.word	0x200005d0
 8005640:	20000cc0 	.word	0x20000cc0
 8005644:	200005e0 	.word	0x200005e0
 8005648:	20000cc4 	.word	0x20000cc4
 800564c:	200005f0 	.word	0x200005f0
 8005650:	20000cc8 	.word	0x20000cc8
 8005654:	20000600 	.word	0x20000600
 8005658:	20000ccc 	.word	0x20000ccc
 800565c:	20000610 	.word	0x20000610
 8005660:	20000cd4 	.word	0x20000cd4
 8005664:	20000620 	.word	0x20000620
 8005668:	20000cd8 	.word	0x20000cd8
 800566c:	20000630 	.word	0x20000630
 8005670:	20000cdc 	.word	0x20000cdc
 8005674:	20000640 	.word	0x20000640
 8005678:	20000ce0 	.word	0x20000ce0
 800567c:	20000650 	.word	0x20000650
 8005680:	20000ce4 	.word	0x20000ce4
 8005684:	20000660 	.word	0x20000660
 8005688:	20000ce8 	.word	0x20000ce8
 800568c:	20000670 	.word	0x20000670
 8005690:	20000cec 	.word	0x20000cec
 8005694:	20000680 	.word	0x20000680
 8005698:	20000cf0 	.word	0x20000cf0
 800569c:	20000690 	.word	0x20000690
 80056a0:	20000cf4 	.word	0x20000cf4
 80056a4:	200006a0 	.word	0x200006a0
 80056a8:	20000cf8 	.word	0x20000cf8
 80056ac:	200006b0 	.word	0x200006b0
 80056b0:	20000cfc 	.word	0x20000cfc
 80056b4:	200006c0 	.word	0x200006c0
 80056b8:	20000d04 	.word	0x20000d04
 80056bc:	200006d0 	.word	0x200006d0
 80056c0:	20000d0c 	.word	0x20000d0c
 80056c4:	200006e0 	.word	0x200006e0
 80056c8:	20000d10 	.word	0x20000d10
 80056cc:	200006f0 	.word	0x200006f0
 80056d0:	20000d14 	.word	0x20000d14
 80056d4:	20000700 	.word	0x20000700
 80056d8:	20000d18 	.word	0x20000d18
 80056dc:	20000710 	.word	0x20000710
 80056e0:	20000d1c 	.word	0x20000d1c
 80056e4:	20000720 	.word	0x20000720
 80056e8:	20000d20 	.word	0x20000d20
 80056ec:	20000730 	.word	0x20000730
 80056f0:	20000d24 	.word	0x20000d24
 80056f4:	20000740 	.word	0x20000740
 80056f8:	20000d28 	.word	0x20000d28
 80056fc:	20000750 	.word	0x20000750
 8005700:	20000d2c 	.word	0x20000d2c
 8005704:	20000760 	.word	0x20000760
 8005708:	20000d30 	.word	0x20000d30
 800570c:	20000770 	.word	0x20000770
 8005710:	20000d34 	.word	0x20000d34
 8005714:	20000780 	.word	0x20000780
 8005718:	20000d38 	.word	0x20000d38
 800571c:	20000790 	.word	0x20000790
 8005720:	20000d3c 	.word	0x20000d3c
 8005724:	200007a0 	.word	0x200007a0
 8005728:	20000d40 	.word	0x20000d40
 800572c:	200007b0 	.word	0x200007b0
 8005730:	20000d44 	.word	0x20000d44
 8005734:	200007c0 	.word	0x200007c0
 8005738:	20000d48 	.word	0x20000d48
 800573c:	200007d0 	.word	0x200007d0
 8005740:	20000d4c 	.word	0x20000d4c
 8005744:	200007e0 	.word	0x200007e0
 8005748:	20000d50 	.word	0x20000d50
 800574c:	200007f0 	.word	0x200007f0
 8005750:	20000d54 	.word	0x20000d54
 8005754:	20000800 	.word	0x20000800
 8005758:	20000d58 	.word	0x20000d58
 800575c:	20000810 	.word	0x20000810
 8005760:	20000d5c 	.word	0x20000d5c
 8005764:	20000820 	.word	0x20000820
 8005768:	20000d60 	.word	0x20000d60
 800576c:	20000830 	.word	0x20000830
 8005770:	20000d64 	.word	0x20000d64
 8005774:	20000840 	.word	0x20000840
 8005778:	4603      	mov	r3, r0
 800577a:	4a27      	ldr	r2, [pc, #156]	; (8005818 <loadMenuTexts+0xb14>)
 800577c:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextEN);
 800577e:	4827      	ldr	r0, [pc, #156]	; (800581c <loadMenuTexts+0xb18>)
 8005780:	f7fa ff7a 	bl	8000678 <copyText>
 8005784:	4603      	mov	r3, r0
 8005786:	4a26      	ldr	r2, [pc, #152]	; (8005820 <loadMenuTexts+0xb1c>)
 8005788:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextEN);
 800578a:	4826      	ldr	r0, [pc, #152]	; (8005824 <loadMenuTexts+0xb20>)
 800578c:	f7fa ff74 	bl	8000678 <copyText>
 8005790:	4603      	mov	r3, r0
 8005792:	4a25      	ldr	r2, [pc, #148]	; (8005828 <loadMenuTexts+0xb24>)
 8005794:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextEN);
 8005796:	4825      	ldr	r0, [pc, #148]	; (800582c <loadMenuTexts+0xb28>)
 8005798:	f7fa ff6e 	bl	8000678 <copyText>
 800579c:	4603      	mov	r3, r0
 800579e:	4a24      	ldr	r2, [pc, #144]	; (8005830 <loadMenuTexts+0xb2c>)
 80057a0:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextEN);
 80057a2:	4824      	ldr	r0, [pc, #144]	; (8005834 <loadMenuTexts+0xb30>)
 80057a4:	f7fa ff68 	bl	8000678 <copyText>
 80057a8:	4603      	mov	r3, r0
 80057aa:	4a23      	ldr	r2, [pc, #140]	; (8005838 <loadMenuTexts+0xb34>)
 80057ac:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextEN);
 80057ae:	4823      	ldr	r0, [pc, #140]	; (800583c <loadMenuTexts+0xb38>)
 80057b0:	f7fa ff62 	bl	8000678 <copyText>
 80057b4:	4603      	mov	r3, r0
 80057b6:	4a22      	ldr	r2, [pc, #136]	; (8005840 <loadMenuTexts+0xb3c>)
 80057b8:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextEN);
 80057ba:	4822      	ldr	r0, [pc, #136]	; (8005844 <loadMenuTexts+0xb40>)
 80057bc:	f7fa ff5c 	bl	8000678 <copyText>
 80057c0:	4603      	mov	r3, r0
 80057c2:	4a21      	ldr	r2, [pc, #132]	; (8005848 <loadMenuTexts+0xb44>)
 80057c4:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextEN);
 80057c6:	4821      	ldr	r0, [pc, #132]	; (800584c <loadMenuTexts+0xb48>)
 80057c8:	f7fa ff56 	bl	8000678 <copyText>
 80057cc:	4603      	mov	r3, r0
 80057ce:	4a20      	ldr	r2, [pc, #128]	; (8005850 <loadMenuTexts+0xb4c>)
 80057d0:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextEN);
 80057d2:	4820      	ldr	r0, [pc, #128]	; (8005854 <loadMenuTexts+0xb50>)
 80057d4:	f7fa ff50 	bl	8000678 <copyText>
 80057d8:	4603      	mov	r3, r0
 80057da:	4a1f      	ldr	r2, [pc, #124]	; (8005858 <loadMenuTexts+0xb54>)
 80057dc:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
 80057de:	481f      	ldr	r0, [pc, #124]	; (800585c <loadMenuTexts+0xb58>)
 80057e0:	f7fa ff4a 	bl	8000678 <copyText>
 80057e4:	4603      	mov	r3, r0
 80057e6:	4a1e      	ldr	r2, [pc, #120]	; (8005860 <loadMenuTexts+0xb5c>)
 80057e8:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextEN);
 80057ea:	481e      	ldr	r0, [pc, #120]	; (8005864 <loadMenuTexts+0xb60>)
 80057ec:	f7fa ff44 	bl	8000678 <copyText>
 80057f0:	4603      	mov	r3, r0
 80057f2:	4a1d      	ldr	r2, [pc, #116]	; (8005868 <loadMenuTexts+0xb64>)
 80057f4:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextEN);
 80057f6:	481d      	ldr	r0, [pc, #116]	; (800586c <loadMenuTexts+0xb68>)
 80057f8:	f7fa ff3e 	bl	8000678 <copyText>
 80057fc:	4603      	mov	r3, r0
 80057fe:	4a1c      	ldr	r2, [pc, #112]	; (8005870 <loadMenuTexts+0xb6c>)
 8005800:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextEN);
 8005802:	481c      	ldr	r0, [pc, #112]	; (8005874 <loadMenuTexts+0xb70>)
 8005804:	f7fa ff38 	bl	8000678 <copyText>
 8005808:	4603      	mov	r3, r0
 800580a:	4a1b      	ldr	r2, [pc, #108]	; (8005878 <loadMenuTexts+0xb74>)
 800580c:	6013      	str	r3, [r2, #0]
}
 800580e:	bf00      	nop
 8005810:	3708      	adds	r7, #8
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
 8005816:	bf00      	nop
 8005818:	20000d68 	.word	0x20000d68
 800581c:	20000850 	.word	0x20000850
 8005820:	20000d6c 	.word	0x20000d6c
 8005824:	20000860 	.word	0x20000860
 8005828:	20000d70 	.word	0x20000d70
 800582c:	20000870 	.word	0x20000870
 8005830:	20000d74 	.word	0x20000d74
 8005834:	20000880 	.word	0x20000880
 8005838:	20000d78 	.word	0x20000d78
 800583c:	20000890 	.word	0x20000890
 8005840:	20000d7c 	.word	0x20000d7c
 8005844:	200008a0 	.word	0x200008a0
 8005848:	20000d88 	.word	0x20000d88
 800584c:	200008b0 	.word	0x200008b0
 8005850:	20000d8c 	.word	0x20000d8c
 8005854:	200008c0 	.word	0x200008c0
 8005858:	20000d90 	.word	0x20000d90
 800585c:	200008d0 	.word	0x200008d0
 8005860:	20000d94 	.word	0x20000d94
 8005864:	200008e0 	.word	0x200008e0
 8005868:	20000d98 	.word	0x20000d98
 800586c:	200008f0 	.word	0x200008f0
 8005870:	20000d9c 	.word	0x20000d9c
 8005874:	20000900 	.word	0x20000900
 8005878:	20000da0 	.word	0x20000da0

0800587c <lcdUpdate>:
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

//Tüm fonksiyonlar:

void lcdUpdate(uint8_t y) {
 800587c:	b580      	push	{r7, lr}
 800587e:	b082      	sub	sp, #8
 8005880:	af00      	add	r7, sp, #0
 8005882:	4603      	mov	r3, r0
 8005884:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8005886:	79fb      	ldrb	r3, [r7, #7]
 8005888:	2b01      	cmp	r3, #1
 800588a:	d105      	bne.n	8005898 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 800588c:	4a22      	ldr	r2, [pc, #136]	; (8005918 <lcdUpdate+0x9c>)
 800588e:	2101      	movs	r1, #1
 8005890:	2002      	movs	r0, #2
 8005892:	f7fa fe67 	bl	8000564 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 1, "    ESP-RMK     ");
		lcd_print(2, 1, "      RUN       ");
	}
}
 8005896:	e03b      	b.n	8005910 <lcdUpdate+0x94>
	} else if(y==2) {
 8005898:	79fb      	ldrb	r3, [r7, #7]
 800589a:	2b02      	cmp	r3, #2
 800589c:	d105      	bne.n	80058aa <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 800589e:	4a1e      	ldr	r2, [pc, #120]	; (8005918 <lcdUpdate+0x9c>)
 80058a0:	2102      	movs	r1, #2
 80058a2:	2002      	movs	r0, #2
 80058a4:	f7fa fe5e 	bl	8000564 <lcd_print>
}
 80058a8:	e032      	b.n	8005910 <lcdUpdate+0x94>
	} else if(y==3) {
 80058aa:	79fb      	ldrb	r3, [r7, #7]
 80058ac:	2b03      	cmp	r3, #3
 80058ae:	d105      	bne.n	80058bc <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 80058b0:	4a19      	ldr	r2, [pc, #100]	; (8005918 <lcdUpdate+0x9c>)
 80058b2:	2103      	movs	r1, #3
 80058b4:	2002      	movs	r0, #2
 80058b6:	f7fa fe55 	bl	8000564 <lcd_print>
}
 80058ba:	e029      	b.n	8005910 <lcdUpdate+0x94>
	} else if(y==4) {
 80058bc:	79fb      	ldrb	r3, [r7, #7]
 80058be:	2b04      	cmp	r3, #4
 80058c0:	d105      	bne.n	80058ce <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 80058c2:	4a15      	ldr	r2, [pc, #84]	; (8005918 <lcdUpdate+0x9c>)
 80058c4:	2104      	movs	r1, #4
 80058c6:	2002      	movs	r0, #2
 80058c8:	f7fa fe4c 	bl	8000564 <lcd_print>
}
 80058cc:	e020      	b.n	8005910 <lcdUpdate+0x94>
	} else if(y==5) {
 80058ce:	79fb      	ldrb	r3, [r7, #7]
 80058d0:	2b05      	cmp	r3, #5
 80058d2:	d105      	bne.n	80058e0 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 80058d4:	4a10      	ldr	r2, [pc, #64]	; (8005918 <lcdUpdate+0x9c>)
 80058d6:	2105      	movs	r1, #5
 80058d8:	2002      	movs	r0, #2
 80058da:	f7fa fe43 	bl	8000564 <lcd_print>
}
 80058de:	e017      	b.n	8005910 <lcdUpdate+0x94>
	} else if(y==6) {
 80058e0:	79fb      	ldrb	r3, [r7, #7]
 80058e2:	2b06      	cmp	r3, #6
 80058e4:	d105      	bne.n	80058f2 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 80058e6:	4a0c      	ldr	r2, [pc, #48]	; (8005918 <lcdUpdate+0x9c>)
 80058e8:	2106      	movs	r1, #6
 80058ea:	2002      	movs	r0, #2
 80058ec:	f7fa fe3a 	bl	8000564 <lcd_print>
}
 80058f0:	e00e      	b.n	8005910 <lcdUpdate+0x94>
	} else if (y==7) {
 80058f2:	79fb      	ldrb	r3, [r7, #7]
 80058f4:	2b07      	cmp	r3, #7
 80058f6:	d10b      	bne.n	8005910 <lcdUpdate+0x94>
		lcd_clear();
 80058f8:	f7fa fe60 	bl	80005bc <lcd_clear>
		lcd_print(1, 1, "    ESP-RMK     ");
 80058fc:	4a07      	ldr	r2, [pc, #28]	; (800591c <lcdUpdate+0xa0>)
 80058fe:	2101      	movs	r1, #1
 8005900:	2001      	movs	r0, #1
 8005902:	f7fa fe2f 	bl	8000564 <lcd_print>
		lcd_print(2, 1, "      RUN       ");
 8005906:	4a06      	ldr	r2, [pc, #24]	; (8005920 <lcdUpdate+0xa4>)
 8005908:	2101      	movs	r1, #1
 800590a:	2002      	movs	r0, #2
 800590c:	f7fa fe2a 	bl	8000564 <lcd_print>
}
 8005910:	bf00      	nop
 8005912:	3708      	adds	r7, #8
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}
 8005918:	0800cf28 	.word	0x0800cf28
 800591c:	0800d85c 	.word	0x0800d85c
 8005920:	0800d870 	.word	0x0800d870

08005924 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8005924:	b580      	push	{r7, lr}
 8005926:	b082      	sub	sp, #8
 8005928:	af00      	add	r7, sp, #0
 800592a:	4603      	mov	r3, r0
 800592c:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 800592e:	79fb      	ldrb	r3, [r7, #7]
 8005930:	2b01      	cmp	r3, #1
 8005932:	d11d      	bne.n	8005970 <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8005934:	4b62      	ldr	r3, [pc, #392]	; (8005ac0 <hataKoduLcdGoster+0x19c>)
 8005936:	781b      	ldrb	r3, [r3, #0]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d105      	bne.n	8005948 <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU    ");
 800593c:	4a61      	ldr	r2, [pc, #388]	; (8005ac4 <hataKoduLcdGoster+0x1a0>)
 800593e:	2101      	movs	r1, #1
 8005940:	2001      	movs	r0, #1
 8005942:	f7fa fe0f 	bl	8000564 <lcd_print>
 8005946:	e008      	b.n	800595a <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 8005948:	4b5d      	ldr	r3, [pc, #372]	; (8005ac0 <hataKoduLcdGoster+0x19c>)
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	2b01      	cmp	r3, #1
 800594e:	d104      	bne.n	800595a <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005950:	4a5d      	ldr	r2, [pc, #372]	; (8005ac8 <hataKoduLcdGoster+0x1a4>)
 8005952:	2101      	movs	r1, #1
 8005954:	2001      	movs	r0, #1
 8005956:	f7fa fe05 	bl	8000564 <lcd_print>
		}
		lcd_print(2, 1, "1");
 800595a:	4a5c      	ldr	r2, [pc, #368]	; (8005acc <hataKoduLcdGoster+0x1a8>)
 800595c:	2101      	movs	r1, #1
 800595e:	2002      	movs	r0, #2
 8005960:	f7fa fe00 	bl	8000564 <lcd_print>
		lcd_print(2, 7, "          ");
 8005964:	4a5a      	ldr	r2, [pc, #360]	; (8005ad0 <hataKoduLcdGoster+0x1ac>)
 8005966:	2107      	movs	r1, #7
 8005968:	2002      	movs	r0, #2
 800596a:	f7fa fdfb 	bl	8000564 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE   ");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 800596e:	e0a3      	b.n	8005ab8 <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8005970:	79fb      	ldrb	r3, [r7, #7]
 8005972:	2b02      	cmp	r3, #2
 8005974:	d11d      	bne.n	80059b2 <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8005976:	4b52      	ldr	r3, [pc, #328]	; (8005ac0 <hataKoduLcdGoster+0x19c>)
 8005978:	781b      	ldrb	r3, [r3, #0]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d105      	bne.n	800598a <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU    ");
 800597e:	4a51      	ldr	r2, [pc, #324]	; (8005ac4 <hataKoduLcdGoster+0x1a0>)
 8005980:	2101      	movs	r1, #1
 8005982:	2001      	movs	r0, #1
 8005984:	f7fa fdee 	bl	8000564 <lcd_print>
 8005988:	e008      	b.n	800599c <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 800598a:	4b4d      	ldr	r3, [pc, #308]	; (8005ac0 <hataKoduLcdGoster+0x19c>)
 800598c:	781b      	ldrb	r3, [r3, #0]
 800598e:	2b01      	cmp	r3, #1
 8005990:	d104      	bne.n	800599c <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005992:	4a4d      	ldr	r2, [pc, #308]	; (8005ac8 <hataKoduLcdGoster+0x1a4>)
 8005994:	2101      	movs	r1, #1
 8005996:	2001      	movs	r0, #1
 8005998:	f7fa fde4 	bl	8000564 <lcd_print>
		lcd_print(2, 2, "2");
 800599c:	4a4d      	ldr	r2, [pc, #308]	; (8005ad4 <hataKoduLcdGoster+0x1b0>)
 800599e:	2102      	movs	r1, #2
 80059a0:	2002      	movs	r0, #2
 80059a2:	f7fa fddf 	bl	8000564 <lcd_print>
		lcd_print(2, 7, "          ");
 80059a6:	4a4a      	ldr	r2, [pc, #296]	; (8005ad0 <hataKoduLcdGoster+0x1ac>)
 80059a8:	2107      	movs	r1, #7
 80059aa:	2002      	movs	r0, #2
 80059ac:	f7fa fdda 	bl	8000564 <lcd_print>
}
 80059b0:	e082      	b.n	8005ab8 <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 80059b2:	79fb      	ldrb	r3, [r7, #7]
 80059b4:	2b03      	cmp	r3, #3
 80059b6:	d11d      	bne.n	80059f4 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 80059b8:	4b41      	ldr	r3, [pc, #260]	; (8005ac0 <hataKoduLcdGoster+0x19c>)
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d105      	bne.n	80059cc <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU    ");
 80059c0:	4a40      	ldr	r2, [pc, #256]	; (8005ac4 <hataKoduLcdGoster+0x1a0>)
 80059c2:	2101      	movs	r1, #1
 80059c4:	2001      	movs	r0, #1
 80059c6:	f7fa fdcd 	bl	8000564 <lcd_print>
 80059ca:	e008      	b.n	80059de <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 80059cc:	4b3c      	ldr	r3, [pc, #240]	; (8005ac0 <hataKoduLcdGoster+0x19c>)
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	2b01      	cmp	r3, #1
 80059d2:	d104      	bne.n	80059de <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE   ");
 80059d4:	4a3c      	ldr	r2, [pc, #240]	; (8005ac8 <hataKoduLcdGoster+0x1a4>)
 80059d6:	2101      	movs	r1, #1
 80059d8:	2001      	movs	r0, #1
 80059da:	f7fa fdc3 	bl	8000564 <lcd_print>
		lcd_print(2, 3, "3");
 80059de:	4a3e      	ldr	r2, [pc, #248]	; (8005ad8 <hataKoduLcdGoster+0x1b4>)
 80059e0:	2103      	movs	r1, #3
 80059e2:	2002      	movs	r0, #2
 80059e4:	f7fa fdbe 	bl	8000564 <lcd_print>
		lcd_print(2, 7, "          ");
 80059e8:	4a39      	ldr	r2, [pc, #228]	; (8005ad0 <hataKoduLcdGoster+0x1ac>)
 80059ea:	2107      	movs	r1, #7
 80059ec:	2002      	movs	r0, #2
 80059ee:	f7fa fdb9 	bl	8000564 <lcd_print>
}
 80059f2:	e061      	b.n	8005ab8 <hataKoduLcdGoster+0x194>
	} else if(x==4){
 80059f4:	79fb      	ldrb	r3, [r7, #7]
 80059f6:	2b04      	cmp	r3, #4
 80059f8:	d11d      	bne.n	8005a36 <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 80059fa:	4b31      	ldr	r3, [pc, #196]	; (8005ac0 <hataKoduLcdGoster+0x19c>)
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d105      	bne.n	8005a0e <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU    ");
 8005a02:	4a30      	ldr	r2, [pc, #192]	; (8005ac4 <hataKoduLcdGoster+0x1a0>)
 8005a04:	2101      	movs	r1, #1
 8005a06:	2001      	movs	r0, #1
 8005a08:	f7fa fdac 	bl	8000564 <lcd_print>
 8005a0c:	e008      	b.n	8005a20 <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8005a0e:	4b2c      	ldr	r3, [pc, #176]	; (8005ac0 <hataKoduLcdGoster+0x19c>)
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d104      	bne.n	8005a20 <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005a16:	4a2c      	ldr	r2, [pc, #176]	; (8005ac8 <hataKoduLcdGoster+0x1a4>)
 8005a18:	2101      	movs	r1, #1
 8005a1a:	2001      	movs	r0, #1
 8005a1c:	f7fa fda2 	bl	8000564 <lcd_print>
		lcd_print(2, 4, "4");
 8005a20:	4a2e      	ldr	r2, [pc, #184]	; (8005adc <hataKoduLcdGoster+0x1b8>)
 8005a22:	2104      	movs	r1, #4
 8005a24:	2002      	movs	r0, #2
 8005a26:	f7fa fd9d 	bl	8000564 <lcd_print>
		lcd_print(2, 7, "          ");
 8005a2a:	4a29      	ldr	r2, [pc, #164]	; (8005ad0 <hataKoduLcdGoster+0x1ac>)
 8005a2c:	2107      	movs	r1, #7
 8005a2e:	2002      	movs	r0, #2
 8005a30:	f7fa fd98 	bl	8000564 <lcd_print>
}
 8005a34:	e040      	b.n	8005ab8 <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8005a36:	79fb      	ldrb	r3, [r7, #7]
 8005a38:	2b05      	cmp	r3, #5
 8005a3a:	d11d      	bne.n	8005a78 <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8005a3c:	4b20      	ldr	r3, [pc, #128]	; (8005ac0 <hataKoduLcdGoster+0x19c>)
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d105      	bne.n	8005a50 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU    ");
 8005a44:	4a1f      	ldr	r2, [pc, #124]	; (8005ac4 <hataKoduLcdGoster+0x1a0>)
 8005a46:	2101      	movs	r1, #1
 8005a48:	2001      	movs	r0, #1
 8005a4a:	f7fa fd8b 	bl	8000564 <lcd_print>
 8005a4e:	e008      	b.n	8005a62 <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8005a50:	4b1b      	ldr	r3, [pc, #108]	; (8005ac0 <hataKoduLcdGoster+0x19c>)
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d104      	bne.n	8005a62 <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005a58:	4a1b      	ldr	r2, [pc, #108]	; (8005ac8 <hataKoduLcdGoster+0x1a4>)
 8005a5a:	2101      	movs	r1, #1
 8005a5c:	2001      	movs	r0, #1
 8005a5e:	f7fa fd81 	bl	8000564 <lcd_print>
		lcd_print(2, 5, "5");
 8005a62:	4a1f      	ldr	r2, [pc, #124]	; (8005ae0 <hataKoduLcdGoster+0x1bc>)
 8005a64:	2105      	movs	r1, #5
 8005a66:	2002      	movs	r0, #2
 8005a68:	f7fa fd7c 	bl	8000564 <lcd_print>
		lcd_print(2, 7, "          ");
 8005a6c:	4a18      	ldr	r2, [pc, #96]	; (8005ad0 <hataKoduLcdGoster+0x1ac>)
 8005a6e:	2107      	movs	r1, #7
 8005a70:	2002      	movs	r0, #2
 8005a72:	f7fa fd77 	bl	8000564 <lcd_print>
}
 8005a76:	e01f      	b.n	8005ab8 <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8005a78:	79fb      	ldrb	r3, [r7, #7]
 8005a7a:	2b06      	cmp	r3, #6
 8005a7c:	d11c      	bne.n	8005ab8 <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8005a7e:	4b10      	ldr	r3, [pc, #64]	; (8005ac0 <hataKoduLcdGoster+0x19c>)
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d105      	bne.n	8005a92 <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU    ");
 8005a86:	4a0f      	ldr	r2, [pc, #60]	; (8005ac4 <hataKoduLcdGoster+0x1a0>)
 8005a88:	2101      	movs	r1, #1
 8005a8a:	2001      	movs	r0, #1
 8005a8c:	f7fa fd6a 	bl	8000564 <lcd_print>
 8005a90:	e008      	b.n	8005aa4 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8005a92:	4b0b      	ldr	r3, [pc, #44]	; (8005ac0 <hataKoduLcdGoster+0x19c>)
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d104      	bne.n	8005aa4 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005a9a:	4a0b      	ldr	r2, [pc, #44]	; (8005ac8 <hataKoduLcdGoster+0x1a4>)
 8005a9c:	2101      	movs	r1, #1
 8005a9e:	2001      	movs	r0, #1
 8005aa0:	f7fa fd60 	bl	8000564 <lcd_print>
		lcd_print(2, 6, "6");
 8005aa4:	4a0f      	ldr	r2, [pc, #60]	; (8005ae4 <hataKoduLcdGoster+0x1c0>)
 8005aa6:	2106      	movs	r1, #6
 8005aa8:	2002      	movs	r0, #2
 8005aaa:	f7fa fd5b 	bl	8000564 <lcd_print>
		lcd_print(2, 7, "          ");
 8005aae:	4a08      	ldr	r2, [pc, #32]	; (8005ad0 <hataKoduLcdGoster+0x1ac>)
 8005ab0:	2107      	movs	r1, #7
 8005ab2:	2002      	movs	r0, #2
 8005ab4:	f7fa fd56 	bl	8000564 <lcd_print>
}
 8005ab8:	bf00      	nop
 8005aba:	3708      	adds	r7, #8
 8005abc:	46bd      	mov	sp, r7
 8005abe:	bd80      	pop	{r7, pc}
 8005ac0:	20000c31 	.word	0x20000c31
 8005ac4:	0800d884 	.word	0x0800d884
 8005ac8:	0800d898 	.word	0x0800d898
 8005acc:	0800cc6c 	.word	0x0800cc6c
 8005ad0:	0800d8ac 	.word	0x0800d8ac
 8005ad4:	0800cc70 	.word	0x0800cc70
 8005ad8:	0800cc74 	.word	0x0800cc74
 8005adc:	0800cc78 	.word	0x0800cc78
 8005ae0:	0800cc7c 	.word	0x0800cc7c
 8005ae4:	0800cc80 	.word	0x0800cc80

08005ae8 <eepromKontrol>:
	HAL_Delay(500);
	lcd_clear();
	HAL_Delay(500);
}

void eepromKontrol(int type) {
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b086      	sub	sp, #24
 8005aec:	af04      	add	r7, sp, #16
 8005aee:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 8005af0:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005af4:	9302      	str	r3, [sp, #8]
 8005af6:	236e      	movs	r3, #110	; 0x6e
 8005af8:	9301      	str	r3, [sp, #4]
 8005afa:	4b9c      	ldr	r3, [pc, #624]	; (8005d6c <eepromKontrol+0x284>)
 8005afc:	9300      	str	r3, [sp, #0]
 8005afe:	236e      	movs	r3, #110	; 0x6e
 8005b00:	2200      	movs	r2, #0
 8005b02:	21a0      	movs	r1, #160	; 0xa0
 8005b04:	489a      	ldr	r0, [pc, #616]	; (8005d70 <eepromKontrol+0x288>)
 8005b06:	f004 fb19 	bl	800a13c <HAL_I2C_Mem_Read>
	HAL_Delay(1500);
 8005b0a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8005b0e:	f003 f991 	bl	8008e34 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 8005b12:	4b96      	ldr	r3, [pc, #600]	; (8005d6c <eepromKontrol+0x284>)
 8005b14:	78da      	ldrb	r2, [r3, #3]
 8005b16:	4b97      	ldr	r3, [pc, #604]	; (8005d74 <eepromKontrol+0x28c>)
 8005b18:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8005b1a:	4b94      	ldr	r3, [pc, #592]	; (8005d6c <eepromKontrol+0x284>)
 8005b1c:	785a      	ldrb	r2, [r3, #1]
 8005b1e:	4b96      	ldr	r3, [pc, #600]	; (8005d78 <eepromKontrol+0x290>)
 8005b20:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 8005b22:	4b92      	ldr	r3, [pc, #584]	; (8005d6c <eepromKontrol+0x284>)
 8005b24:	789a      	ldrb	r2, [r3, #2]
 8005b26:	4b95      	ldr	r3, [pc, #596]	; (8005d7c <eepromKontrol+0x294>)
 8005b28:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8005b2a:	4b90      	ldr	r3, [pc, #576]	; (8005d6c <eepromKontrol+0x284>)
 8005b2c:	791a      	ldrb	r2, [r3, #4]
 8005b2e:	4b94      	ldr	r3, [pc, #592]	; (8005d80 <eepromKontrol+0x298>)
 8005b30:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 8005b32:	4b8e      	ldr	r3, [pc, #568]	; (8005d6c <eepromKontrol+0x284>)
 8005b34:	795a      	ldrb	r2, [r3, #5]
 8005b36:	4b93      	ldr	r3, [pc, #588]	; (8005d84 <eepromKontrol+0x29c>)
 8005b38:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8005b3a:	4b8c      	ldr	r3, [pc, #560]	; (8005d6c <eepromKontrol+0x284>)
 8005b3c:	799a      	ldrb	r2, [r3, #6]
 8005b3e:	4b92      	ldr	r3, [pc, #584]	; (8005d88 <eepromKontrol+0x2a0>)
 8005b40:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 8005b42:	4b8a      	ldr	r3, [pc, #552]	; (8005d6c <eepromKontrol+0x284>)
 8005b44:	79da      	ldrb	r2, [r3, #7]
 8005b46:	4b91      	ldr	r3, [pc, #580]	; (8005d8c <eepromKontrol+0x2a4>)
 8005b48:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8005b4a:	4b88      	ldr	r3, [pc, #544]	; (8005d6c <eepromKontrol+0x284>)
 8005b4c:	7a1a      	ldrb	r2, [r3, #8]
 8005b4e:	4b90      	ldr	r3, [pc, #576]	; (8005d90 <eepromKontrol+0x2a8>)
 8005b50:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 8005b52:	4b86      	ldr	r3, [pc, #536]	; (8005d6c <eepromKontrol+0x284>)
 8005b54:	7a5a      	ldrb	r2, [r3, #9]
 8005b56:	4b8f      	ldr	r3, [pc, #572]	; (8005d94 <eepromKontrol+0x2ac>)
 8005b58:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 8005b5a:	4b84      	ldr	r3, [pc, #528]	; (8005d6c <eepromKontrol+0x284>)
 8005b5c:	7a9a      	ldrb	r2, [r3, #10]
 8005b5e:	4b8e      	ldr	r3, [pc, #568]	; (8005d98 <eepromKontrol+0x2b0>)
 8005b60:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 8005b62:	4b82      	ldr	r3, [pc, #520]	; (8005d6c <eepromKontrol+0x284>)
 8005b64:	7ada      	ldrb	r2, [r3, #11]
 8005b66:	4b8d      	ldr	r3, [pc, #564]	; (8005d9c <eepromKontrol+0x2b4>)
 8005b68:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 8005b6a:	4b80      	ldr	r3, [pc, #512]	; (8005d6c <eepromKontrol+0x284>)
 8005b6c:	7b1a      	ldrb	r2, [r3, #12]
 8005b6e:	4b8c      	ldr	r3, [pc, #560]	; (8005da0 <eepromKontrol+0x2b8>)
 8005b70:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 8005b72:	4b7e      	ldr	r3, [pc, #504]	; (8005d6c <eepromKontrol+0x284>)
 8005b74:	7b5a      	ldrb	r2, [r3, #13]
 8005b76:	4b8b      	ldr	r3, [pc, #556]	; (8005da4 <eepromKontrol+0x2bc>)
 8005b78:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 8005b7a:	4b7c      	ldr	r3, [pc, #496]	; (8005d6c <eepromKontrol+0x284>)
 8005b7c:	7b9a      	ldrb	r2, [r3, #14]
 8005b7e:	4b8a      	ldr	r3, [pc, #552]	; (8005da8 <eepromKontrol+0x2c0>)
 8005b80:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 8005b82:	4b7a      	ldr	r3, [pc, #488]	; (8005d6c <eepromKontrol+0x284>)
 8005b84:	7bda      	ldrb	r2, [r3, #15]
 8005b86:	4b89      	ldr	r3, [pc, #548]	; (8005dac <eepromKontrol+0x2c4>)
 8005b88:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 8005b8a:	4b78      	ldr	r3, [pc, #480]	; (8005d6c <eepromKontrol+0x284>)
 8005b8c:	7c1a      	ldrb	r2, [r3, #16]
 8005b8e:	4b88      	ldr	r3, [pc, #544]	; (8005db0 <eepromKontrol+0x2c8>)
 8005b90:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 8005b92:	4b76      	ldr	r3, [pc, #472]	; (8005d6c <eepromKontrol+0x284>)
 8005b94:	7c5a      	ldrb	r2, [r3, #17]
 8005b96:	4b87      	ldr	r3, [pc, #540]	; (8005db4 <eepromKontrol+0x2cc>)
 8005b98:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 8005b9a:	4b74      	ldr	r3, [pc, #464]	; (8005d6c <eepromKontrol+0x284>)
 8005b9c:	7c9a      	ldrb	r2, [r3, #18]
 8005b9e:	4b86      	ldr	r3, [pc, #536]	; (8005db8 <eepromKontrol+0x2d0>)
 8005ba0:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 8005ba2:	4b72      	ldr	r3, [pc, #456]	; (8005d6c <eepromKontrol+0x284>)
 8005ba4:	7cda      	ldrb	r2, [r3, #19]
 8005ba6:	4b85      	ldr	r3, [pc, #532]	; (8005dbc <eepromKontrol+0x2d4>)
 8005ba8:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 8005baa:	4b70      	ldr	r3, [pc, #448]	; (8005d6c <eepromKontrol+0x284>)
 8005bac:	7d1a      	ldrb	r2, [r3, #20]
 8005bae:	4b84      	ldr	r3, [pc, #528]	; (8005dc0 <eepromKontrol+0x2d8>)
 8005bb0:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 8005bb2:	4b6e      	ldr	r3, [pc, #440]	; (8005d6c <eepromKontrol+0x284>)
 8005bb4:	7d5a      	ldrb	r2, [r3, #21]
 8005bb6:	4b83      	ldr	r3, [pc, #524]	; (8005dc4 <eepromKontrol+0x2dc>)
 8005bb8:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8005bba:	4b6c      	ldr	r3, [pc, #432]	; (8005d6c <eepromKontrol+0x284>)
 8005bbc:	7d9a      	ldrb	r2, [r3, #22]
 8005bbe:	4b82      	ldr	r3, [pc, #520]	; (8005dc8 <eepromKontrol+0x2e0>)
 8005bc0:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 8005bc2:	4b6a      	ldr	r3, [pc, #424]	; (8005d6c <eepromKontrol+0x284>)
 8005bc4:	7dda      	ldrb	r2, [r3, #23]
 8005bc6:	4b81      	ldr	r3, [pc, #516]	; (8005dcc <eepromKontrol+0x2e4>)
 8005bc8:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8005bca:	4b68      	ldr	r3, [pc, #416]	; (8005d6c <eepromKontrol+0x284>)
 8005bcc:	7e1a      	ldrb	r2, [r3, #24]
 8005bce:	4b80      	ldr	r3, [pc, #512]	; (8005dd0 <eepromKontrol+0x2e8>)
 8005bd0:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 8005bd2:	4b66      	ldr	r3, [pc, #408]	; (8005d6c <eepromKontrol+0x284>)
 8005bd4:	7e5a      	ldrb	r2, [r3, #25]
 8005bd6:	4b7f      	ldr	r3, [pc, #508]	; (8005dd4 <eepromKontrol+0x2ec>)
 8005bd8:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8005bda:	4b64      	ldr	r3, [pc, #400]	; (8005d6c <eepromKontrol+0x284>)
 8005bdc:	7e9a      	ldrb	r2, [r3, #26]
 8005bde:	4b7e      	ldr	r3, [pc, #504]	; (8005dd8 <eepromKontrol+0x2f0>)
 8005be0:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 8005be2:	4b62      	ldr	r3, [pc, #392]	; (8005d6c <eepromKontrol+0x284>)
 8005be4:	7eda      	ldrb	r2, [r3, #27]
 8005be6:	4b7d      	ldr	r3, [pc, #500]	; (8005ddc <eepromKontrol+0x2f4>)
 8005be8:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8005bea:	4b60      	ldr	r3, [pc, #384]	; (8005d6c <eepromKontrol+0x284>)
 8005bec:	7f1a      	ldrb	r2, [r3, #28]
 8005bee:	4b7c      	ldr	r3, [pc, #496]	; (8005de0 <eepromKontrol+0x2f8>)
 8005bf0:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 8005bf2:	4b5e      	ldr	r3, [pc, #376]	; (8005d6c <eepromKontrol+0x284>)
 8005bf4:	7f5a      	ldrb	r2, [r3, #29]
 8005bf6:	4b7b      	ldr	r3, [pc, #492]	; (8005de4 <eepromKontrol+0x2fc>)
 8005bf8:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8005bfa:	4b5c      	ldr	r3, [pc, #368]	; (8005d6c <eepromKontrol+0x284>)
 8005bfc:	7f9a      	ldrb	r2, [r3, #30]
 8005bfe:	4b7a      	ldr	r3, [pc, #488]	; (8005de8 <eepromKontrol+0x300>)
 8005c00:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 8005c02:	4b5a      	ldr	r3, [pc, #360]	; (8005d6c <eepromKontrol+0x284>)
 8005c04:	7fda      	ldrb	r2, [r3, #31]
 8005c06:	4b79      	ldr	r3, [pc, #484]	; (8005dec <eepromKontrol+0x304>)
 8005c08:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8005c0a:	4b58      	ldr	r3, [pc, #352]	; (8005d6c <eepromKontrol+0x284>)
 8005c0c:	f893 2020 	ldrb.w	r2, [r3, #32]
 8005c10:	4b77      	ldr	r3, [pc, #476]	; (8005df0 <eepromKontrol+0x308>)
 8005c12:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 8005c14:	4b55      	ldr	r3, [pc, #340]	; (8005d6c <eepromKontrol+0x284>)
 8005c16:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8005c1a:	4b76      	ldr	r3, [pc, #472]	; (8005df4 <eepromKontrol+0x30c>)
 8005c1c:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[48];
 8005c1e:	4b53      	ldr	r3, [pc, #332]	; (8005d6c <eepromKontrol+0x284>)
 8005c20:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8005c24:	4b74      	ldr	r3, [pc, #464]	; (8005df8 <eepromKontrol+0x310>)
 8005c26:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8005c28:	4b50      	ldr	r3, [pc, #320]	; (8005d6c <eepromKontrol+0x284>)
 8005c2a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8005c2e:	4b73      	ldr	r3, [pc, #460]	; (8005dfc <eepromKontrol+0x314>)
 8005c30:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 8005c32:	4b4e      	ldr	r3, [pc, #312]	; (8005d6c <eepromKontrol+0x284>)
 8005c34:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8005c38:	4b71      	ldr	r3, [pc, #452]	; (8005e00 <eepromKontrol+0x318>)
 8005c3a:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8005c3c:	4b4b      	ldr	r3, [pc, #300]	; (8005d6c <eepromKontrol+0x284>)
 8005c3e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8005c42:	4b70      	ldr	r3, [pc, #448]	; (8005e04 <eepromKontrol+0x31c>)
 8005c44:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8005c46:	4b49      	ldr	r3, [pc, #292]	; (8005d6c <eepromKontrol+0x284>)
 8005c48:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8005c4c:	4b6e      	ldr	r3, [pc, #440]	; (8005e08 <eepromKontrol+0x320>)
 8005c4e:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 8005c50:	4b46      	ldr	r3, [pc, #280]	; (8005d6c <eepromKontrol+0x284>)
 8005c52:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8005c56:	4b6d      	ldr	r3, [pc, #436]	; (8005e0c <eepromKontrol+0x324>)
 8005c58:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 8005c5a:	4b44      	ldr	r3, [pc, #272]	; (8005d6c <eepromKontrol+0x284>)
 8005c5c:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8005c60:	4b6b      	ldr	r3, [pc, #428]	; (8005e10 <eepromKontrol+0x328>)
 8005c62:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 8005c64:	4b41      	ldr	r3, [pc, #260]	; (8005d6c <eepromKontrol+0x284>)
 8005c66:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8005c6a:	4b6a      	ldr	r3, [pc, #424]	; (8005e14 <eepromKontrol+0x32c>)
 8005c6c:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 8005c6e:	4b3f      	ldr	r3, [pc, #252]	; (8005d6c <eepromKontrol+0x284>)
 8005c70:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8005c74:	4b68      	ldr	r3, [pc, #416]	; (8005e18 <eepromKontrol+0x330>)
 8005c76:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 8005c78:	4b3c      	ldr	r3, [pc, #240]	; (8005d6c <eepromKontrol+0x284>)
 8005c7a:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8005c7e:	4b67      	ldr	r3, [pc, #412]	; (8005e1c <eepromKontrol+0x334>)
 8005c80:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 8005c82:	4b3a      	ldr	r3, [pc, #232]	; (8005d6c <eepromKontrol+0x284>)
 8005c84:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005c88:	4b65      	ldr	r3, [pc, #404]	; (8005e20 <eepromKontrol+0x338>)
 8005c8a:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 8005c8c:	4b37      	ldr	r3, [pc, #220]	; (8005d6c <eepromKontrol+0x284>)
 8005c8e:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8005c92:	4b64      	ldr	r3, [pc, #400]	; (8005e24 <eepromKontrol+0x33c>)
 8005c94:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 8005c96:	4b35      	ldr	r3, [pc, #212]	; (8005d6c <eepromKontrol+0x284>)
 8005c98:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8005c9c:	4b62      	ldr	r3, [pc, #392]	; (8005e28 <eepromKontrol+0x340>)
 8005c9e:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 8005ca0:	4b32      	ldr	r3, [pc, #200]	; (8005d6c <eepromKontrol+0x284>)
 8005ca2:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8005ca6:	4b61      	ldr	r3, [pc, #388]	; (8005e2c <eepromKontrol+0x344>)
 8005ca8:	701a      	strb	r2, [r3, #0]

	loadMenuTexts(dilSecim);
 8005caa:	4b52      	ldr	r3, [pc, #328]	; (8005df4 <eepromKontrol+0x30c>)
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f7ff f828 	bl	8004d04 <loadMenuTexts>

	if(calismaSayisi10000>9) {
 8005cb4:	4b4e      	ldr	r3, [pc, #312]	; (8005df0 <eepromKontrol+0x308>)
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	2b09      	cmp	r3, #9
 8005cba:	d902      	bls.n	8005cc2 <eepromKontrol+0x1da>
	    calismaSayisi10000=0;
 8005cbc:	4b4c      	ldr	r3, [pc, #304]	; (8005df0 <eepromKontrol+0x308>)
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 8005cc2:	4b4a      	ldr	r3, [pc, #296]	; (8005dec <eepromKontrol+0x304>)
 8005cc4:	781b      	ldrb	r3, [r3, #0]
 8005cc6:	2b09      	cmp	r3, #9
 8005cc8:	d902      	bls.n	8005cd0 <eepromKontrol+0x1e8>
	    calismaSayisi1000=0;
 8005cca:	4b48      	ldr	r3, [pc, #288]	; (8005dec <eepromKontrol+0x304>)
 8005ccc:	2200      	movs	r2, #0
 8005cce:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 8005cd0:	4b45      	ldr	r3, [pc, #276]	; (8005de8 <eepromKontrol+0x300>)
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	2b09      	cmp	r3, #9
 8005cd6:	d902      	bls.n	8005cde <eepromKontrol+0x1f6>
	    calismaSayisi100=0;
 8005cd8:	4b43      	ldr	r3, [pc, #268]	; (8005de8 <eepromKontrol+0x300>)
 8005cda:	2200      	movs	r2, #0
 8005cdc:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8005cde:	4b41      	ldr	r3, [pc, #260]	; (8005de4 <eepromKontrol+0x2fc>)
 8005ce0:	781b      	ldrb	r3, [r3, #0]
 8005ce2:	2b09      	cmp	r3, #9
 8005ce4:	d902      	bls.n	8005cec <eepromKontrol+0x204>
	    calismaSayisi10=0;
 8005ce6:	4b3f      	ldr	r3, [pc, #252]	; (8005de4 <eepromKontrol+0x2fc>)
 8005ce8:	2200      	movs	r2, #0
 8005cea:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8005cec:	4b3c      	ldr	r3, [pc, #240]	; (8005de0 <eepromKontrol+0x2f8>)
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	2b09      	cmp	r3, #9
 8005cf2:	d902      	bls.n	8005cfa <eepromKontrol+0x212>
	    calismaSayisi1=0;
 8005cf4:	4b3a      	ldr	r3, [pc, #232]	; (8005de0 <eepromKontrol+0x2f8>)
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8005cfa:	4b1f      	ldr	r3, [pc, #124]	; (8005d78 <eepromKontrol+0x290>)
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	2b01      	cmp	r3, #1
 8005d00:	d902      	bls.n	8005d08 <eepromKontrol+0x220>
	    calismaSekli=0;
 8005d02:	4b1d      	ldr	r3, [pc, #116]	; (8005d78 <eepromKontrol+0x290>)
 8005d04:	2200      	movs	r2, #0
 8005d06:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8005d08:	4b1c      	ldr	r3, [pc, #112]	; (8005d7c <eepromKontrol+0x294>)
 8005d0a:	781b      	ldrb	r3, [r3, #0]
 8005d0c:	2b01      	cmp	r3, #1
 8005d0e:	d902      	bls.n	8005d16 <eepromKontrol+0x22e>
	    emniyetCercevesi=1;
 8005d10:	4b1a      	ldr	r3, [pc, #104]	; (8005d7c <eepromKontrol+0x294>)
 8005d12:	2201      	movs	r2, #1
 8005d14:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8005d16:	4b1a      	ldr	r3, [pc, #104]	; (8005d80 <eepromKontrol+0x298>)
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	2b01      	cmp	r3, #1
 8005d1c:	d902      	bls.n	8005d24 <eepromKontrol+0x23c>
	    yavaslamaLimit=0;
 8005d1e:	4b18      	ldr	r3, [pc, #96]	; (8005d80 <eepromKontrol+0x298>)
 8005d20:	2200      	movs	r2, #0
 8005d22:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 8005d24:	4b17      	ldr	r3, [pc, #92]	; (8005d84 <eepromKontrol+0x29c>)
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d902      	bls.n	8005d32 <eepromKontrol+0x24a>
	    altLimit=1;
 8005d2c:	4b15      	ldr	r3, [pc, #84]	; (8005d84 <eepromKontrol+0x29c>)
 8005d2e:	2201      	movs	r2, #1
 8005d30:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 8005d32:	4b15      	ldr	r3, [pc, #84]	; (8005d88 <eepromKontrol+0x2a0>)
 8005d34:	781b      	ldrb	r3, [r3, #0]
 8005d36:	2b01      	cmp	r3, #1
 8005d38:	d902      	bls.n	8005d40 <eepromKontrol+0x258>
	    basincSalteri=1;
 8005d3a:	4b13      	ldr	r3, [pc, #76]	; (8005d88 <eepromKontrol+0x2a0>)
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 8005d40:	4b12      	ldr	r3, [pc, #72]	; (8005d8c <eepromKontrol+0x2a4>)
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	2b03      	cmp	r3, #3
 8005d46:	d902      	bls.n	8005d4e <eepromKontrol+0x266>
	    kapiSecimleri=3;
 8005d48:	4b10      	ldr	r3, [pc, #64]	; (8005d8c <eepromKontrol+0x2a4>)
 8005d4a:	2203      	movs	r2, #3
 8005d4c:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8005d4e:	4b2d      	ldr	r3, [pc, #180]	; (8005e04 <eepromKontrol+0x31c>)
 8005d50:	781b      	ldrb	r3, [r3, #0]
 8005d52:	2b01      	cmp	r3, #1
 8005d54:	d902      	bls.n	8005d5c <eepromKontrol+0x274>
	    kapiAcTipi=0;
 8005d56:	4b2b      	ldr	r3, [pc, #172]	; (8005e04 <eepromKontrol+0x31c>)
 8005d58:	2200      	movs	r2, #0
 8005d5a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 8005d5c:	4b0c      	ldr	r3, [pc, #48]	; (8005d90 <eepromKontrol+0x2a8>)
 8005d5e:	781b      	ldrb	r3, [r3, #0]
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	d965      	bls.n	8005e30 <eepromKontrol+0x348>
	    kapi1Tip=1;
 8005d64:	4b0a      	ldr	r3, [pc, #40]	; (8005d90 <eepromKontrol+0x2a8>)
 8005d66:	2201      	movs	r2, #1
 8005d68:	701a      	strb	r2, [r3, #0]
 8005d6a:	e061      	b.n	8005e30 <eepromKontrol+0x348>
 8005d6c:	20000b40 	.word	0x20000b40
 8005d70:	20000a5c 	.word	0x20000a5c
 8005d74:	20000bae 	.word	0x20000bae
 8005d78:	20000c11 	.word	0x20000c11
 8005d7c:	20000c14 	.word	0x20000c14
 8005d80:	20000c15 	.word	0x20000c15
 8005d84:	20000c16 	.word	0x20000c16
 8005d88:	20000c17 	.word	0x20000c17
 8005d8c:	20000c18 	.word	0x20000c18
 8005d90:	20000c19 	.word	0x20000c19
 8005d94:	20000c29 	.word	0x20000c29
 8005d98:	20000c1a 	.word	0x20000c1a
 8005d9c:	20000c2a 	.word	0x20000c2a
 8005da0:	20000c1b 	.word	0x20000c1b
 8005da4:	20000c2b 	.word	0x20000c2b
 8005da8:	20000c1e 	.word	0x20000c1e
 8005dac:	20000c1f 	.word	0x20000c1f
 8005db0:	20000c20 	.word	0x20000c20
 8005db4:	20000c21 	.word	0x20000c21
 8005db8:	20000c22 	.word	0x20000c22
 8005dbc:	20000c23 	.word	0x20000c23
 8005dc0:	20000c24 	.word	0x20000c24
 8005dc4:	20000c25 	.word	0x20000c25
 8005dc8:	20000c26 	.word	0x20000c26
 8005dcc:	20000c27 	.word	0x20000c27
 8005dd0:	20000c28 	.word	0x20000c28
 8005dd4:	20000c2c 	.word	0x20000c2c
 8005dd8:	20000c2e 	.word	0x20000c2e
 8005ddc:	20000c0c 	.word	0x20000c0c
 8005de0:	20000c0d 	.word	0x20000c0d
 8005de4:	20000c0e 	.word	0x20000c0e
 8005de8:	200009b4 	.word	0x200009b4
 8005dec:	200009b5 	.word	0x200009b5
 8005df0:	20000c0f 	.word	0x20000c0f
 8005df4:	20000c31 	.word	0x20000c31
 8005df8:	20000c2f 	.word	0x20000c2f
 8005dfc:	20000c1d 	.word	0x20000c1d
 8005e00:	20000c30 	.word	0x20000c30
 8005e04:	20000c1c 	.word	0x20000c1c
 8005e08:	20000c32 	.word	0x20000c32
 8005e0c:	20000c33 	.word	0x20000c33
 8005e10:	20000c34 	.word	0x20000c34
 8005e14:	20000c35 	.word	0x20000c35
 8005e18:	20000c36 	.word	0x20000c36
 8005e1c:	20000c37 	.word	0x20000c37
 8005e20:	20000c38 	.word	0x20000c38
 8005e24:	20000c39 	.word	0x20000c39
 8005e28:	20000c3a 	.word	0x20000c3a
 8005e2c:	20000c3b 	.word	0x20000c3b
	}

	if(kapi1AcSure>5) {
 8005e30:	4b55      	ldr	r3, [pc, #340]	; (8005f88 <eepromKontrol+0x4a0>)
 8005e32:	781b      	ldrb	r3, [r3, #0]
 8005e34:	2b05      	cmp	r3, #5
 8005e36:	d902      	bls.n	8005e3e <eepromKontrol+0x356>
	    kapi1AcSure=5;
 8005e38:	4b53      	ldr	r3, [pc, #332]	; (8005f88 <eepromKontrol+0x4a0>)
 8005e3a:	2205      	movs	r2, #5
 8005e3c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 8005e3e:	4b53      	ldr	r3, [pc, #332]	; (8005f8c <eepromKontrol+0x4a4>)
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	d902      	bls.n	8005e4c <eepromKontrol+0x364>
	    kapi2Tip=1;
 8005e46:	4b51      	ldr	r3, [pc, #324]	; (8005f8c <eepromKontrol+0x4a4>)
 8005e48:	2201      	movs	r2, #1
 8005e4a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 8005e4c:	4b50      	ldr	r3, [pc, #320]	; (8005f90 <eepromKontrol+0x4a8>)
 8005e4e:	781b      	ldrb	r3, [r3, #0]
 8005e50:	2b05      	cmp	r3, #5
 8005e52:	d902      	bls.n	8005e5a <eepromKontrol+0x372>
	    kapi2AcSure=5;
 8005e54:	4b4e      	ldr	r3, [pc, #312]	; (8005f90 <eepromKontrol+0x4a8>)
 8005e56:	2205      	movs	r2, #5
 8005e58:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 8005e5a:	4b4e      	ldr	r3, [pc, #312]	; (8005f94 <eepromKontrol+0x4ac>)
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	2b02      	cmp	r3, #2
 8005e60:	d902      	bls.n	8005e68 <eepromKontrol+0x380>
	    kapitablaTip=1;
 8005e62:	4b4c      	ldr	r3, [pc, #304]	; (8005f94 <eepromKontrol+0x4ac>)
 8005e64:	2201      	movs	r2, #1
 8005e66:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 8005e68:	4b4b      	ldr	r3, [pc, #300]	; (8005f98 <eepromKontrol+0x4b0>)
 8005e6a:	781b      	ldrb	r3, [r3, #0]
 8005e6c:	2b02      	cmp	r3, #2
 8005e6e:	d902      	bls.n	8005e76 <eepromKontrol+0x38e>
	    kapiTablaAcKonum=2;
 8005e70:	4b49      	ldr	r3, [pc, #292]	; (8005f98 <eepromKontrol+0x4b0>)
 8005e72:	2202      	movs	r2, #2
 8005e74:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 8005e76:	4b49      	ldr	r3, [pc, #292]	; (8005f9c <eepromKontrol+0x4b4>)
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	2b05      	cmp	r3, #5
 8005e7c:	d902      	bls.n	8005e84 <eepromKontrol+0x39c>
	    kapiTablaAcSure=5;
 8005e7e:	4b47      	ldr	r3, [pc, #284]	; (8005f9c <eepromKontrol+0x4b4>)
 8005e80:	2205      	movs	r2, #5
 8005e82:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 8005e84:	4b46      	ldr	r3, [pc, #280]	; (8005fa0 <eepromKontrol+0x4b8>)
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d902      	bls.n	8005e92 <eepromKontrol+0x3aa>
	    yukariYavasLimit=0;
 8005e8c:	4b44      	ldr	r3, [pc, #272]	; (8005fa0 <eepromKontrol+0x4b8>)
 8005e8e:	2200      	movs	r2, #0
 8005e90:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 8005e92:	4b44      	ldr	r3, [pc, #272]	; (8005fa4 <eepromKontrol+0x4bc>)
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	2b02      	cmp	r3, #2
 8005e98:	d902      	bls.n	8005ea0 <eepromKontrol+0x3b8>
	    devirmeYuruyusSecim=0;
 8005e9a:	4b42      	ldr	r3, [pc, #264]	; (8005fa4 <eepromKontrol+0x4bc>)
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 8005ea0:	4b41      	ldr	r3, [pc, #260]	; (8005fa8 <eepromKontrol+0x4c0>)
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d902      	bls.n	8005eae <eepromKontrol+0x3c6>
	    devirmeYukariIleriLimit=1;
 8005ea8:	4b3f      	ldr	r3, [pc, #252]	; (8005fa8 <eepromKontrol+0x4c0>)
 8005eaa:	2201      	movs	r2, #1
 8005eac:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 8005eae:	4b3f      	ldr	r3, [pc, #252]	; (8005fac <eepromKontrol+0x4c4>)
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d902      	bls.n	8005ebc <eepromKontrol+0x3d4>
	    devirmeAsagiGeriLimit=1;
 8005eb6:	4b3d      	ldr	r3, [pc, #244]	; (8005fac <eepromKontrol+0x4c4>)
 8005eb8:	2201      	movs	r2, #1
 8005eba:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 8005ebc:	4b3c      	ldr	r3, [pc, #240]	; (8005fb0 <eepromKontrol+0x4c8>)
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d902      	bls.n	8005eca <eepromKontrol+0x3e2>
	    devirmeSilindirTipi=0;
 8005ec4:	4b3a      	ldr	r3, [pc, #232]	; (8005fb0 <eepromKontrol+0x4c8>)
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 8005eca:	4b3a      	ldr	r3, [pc, #232]	; (8005fb4 <eepromKontrol+0x4cc>)
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	2b01      	cmp	r3, #1
 8005ed0:	d902      	bls.n	8005ed8 <eepromKontrol+0x3f0>
	    platformSilindirTipi=0;
 8005ed2:	4b38      	ldr	r3, [pc, #224]	; (8005fb4 <eepromKontrol+0x4cc>)
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8005ed8:	4b37      	ldr	r3, [pc, #220]	; (8005fb8 <eepromKontrol+0x4d0>)
 8005eda:	781b      	ldrb	r3, [r3, #0]
 8005edc:	2b05      	cmp	r3, #5
 8005ede:	d902      	bls.n	8005ee6 <eepromKontrol+0x3fe>
	    yukariValfTmr=0;
 8005ee0:	4b35      	ldr	r3, [pc, #212]	; (8005fb8 <eepromKontrol+0x4d0>)
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8005ee6:	4b35      	ldr	r3, [pc, #212]	; (8005fbc <eepromKontrol+0x4d4>)
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	2b05      	cmp	r3, #5
 8005eec:	d902      	bls.n	8005ef4 <eepromKontrol+0x40c>
	    asagiValfTmr=0;
 8005eee:	4b33      	ldr	r3, [pc, #204]	; (8005fbc <eepromKontrol+0x4d4>)
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8005ef4:	4b32      	ldr	r3, [pc, #200]	; (8005fc0 <eepromKontrol+0x4d8>)
 8005ef6:	781b      	ldrb	r3, [r3, #0]
 8005ef8:	2b05      	cmp	r3, #5
 8005efa:	d902      	bls.n	8005f02 <eepromKontrol+0x41a>
	    devirmeYukariIleriTmr=0;
 8005efc:	4b30      	ldr	r3, [pc, #192]	; (8005fc0 <eepromKontrol+0x4d8>)
 8005efe:	2200      	movs	r2, #0
 8005f00:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8005f02:	4b30      	ldr	r3, [pc, #192]	; (8005fc4 <eepromKontrol+0x4dc>)
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	2b05      	cmp	r3, #5
 8005f08:	d902      	bls.n	8005f10 <eepromKontrol+0x428>
	    devirmeAsagiGeriTmr=0;
 8005f0a:	4b2e      	ldr	r3, [pc, #184]	; (8005fc4 <eepromKontrol+0x4dc>)
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8005f10:	4b2d      	ldr	r3, [pc, #180]	; (8005fc8 <eepromKontrol+0x4e0>)
 8005f12:	781b      	ldrb	r3, [r3, #0]
 8005f14:	2bb4      	cmp	r3, #180	; 0xb4
 8005f16:	d902      	bls.n	8005f1e <eepromKontrol+0x436>
	    makineCalismaTmr=60;
 8005f18:	4b2b      	ldr	r3, [pc, #172]	; (8005fc8 <eepromKontrol+0x4e0>)
 8005f1a:	223c      	movs	r2, #60	; 0x3c
 8005f1c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 8005f1e:	4b2b      	ldr	r3, [pc, #172]	; (8005fcc <eepromKontrol+0x4e4>)
 8005f20:	781b      	ldrb	r3, [r3, #0]
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d902      	bls.n	8005f2c <eepromKontrol+0x444>
	    buzzer=0;
 8005f26:	4b29      	ldr	r3, [pc, #164]	; (8005fcc <eepromKontrol+0x4e4>)
 8005f28:	2200      	movs	r2, #0
 8005f2a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 8005f2c:	4b28      	ldr	r3, [pc, #160]	; (8005fd0 <eepromKontrol+0x4e8>)
 8005f2e:	781b      	ldrb	r3, [r3, #0]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d902      	bls.n	8005f3a <eepromKontrol+0x452>
	    demoMode=0;
 8005f34:	4b26      	ldr	r3, [pc, #152]	; (8005fd0 <eepromKontrol+0x4e8>)
 8005f36:	2200      	movs	r2, #0
 8005f38:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 8005f3a:	4b26      	ldr	r3, [pc, #152]	; (8005fd4 <eepromKontrol+0x4ec>)
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d902      	bls.n	8005f48 <eepromKontrol+0x460>
	    calismaSayModu=0;
 8005f42:	4b24      	ldr	r3, [pc, #144]	; (8005fd4 <eepromKontrol+0x4ec>)
 8005f44:	2200      	movs	r2, #0
 8005f46:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8005f48:	4b23      	ldr	r3, [pc, #140]	; (8005fd8 <eepromKontrol+0x4f0>)
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d902      	bls.n	8005f56 <eepromKontrol+0x46e>
	    dilSecim=0;
 8005f50:	4b21      	ldr	r3, [pc, #132]	; (8005fd8 <eepromKontrol+0x4f0>)
 8005f52:	2200      	movs	r2, #0
 8005f54:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 8005f56:	4b21      	ldr	r3, [pc, #132]	; (8005fdc <eepromKontrol+0x4f4>)
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d902      	bls.n	8005f64 <eepromKontrol+0x47c>
		iotMode=0;
 8005f5e:	4b1f      	ldr	r3, [pc, #124]	; (8005fdc <eepromKontrol+0x4f4>)
 8005f60:	2200      	movs	r2, #0
 8005f62:	701a      	strb	r2, [r3, #0]
	}

	//memset(wifiSSID, 0, sizeof(wifiSSID));
	//memset(wifiPass, 0, sizeof(wifiPass));

	memcpy(machineID, &eepromData[idStartPos], 12);
 8005f64:	4b1e      	ldr	r3, [pc, #120]	; (8005fe0 <eepromKontrol+0x4f8>)
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	461a      	mov	r2, r3
 8005f6a:	4b1e      	ldr	r3, [pc, #120]	; (8005fe4 <eepromKontrol+0x4fc>)
 8005f6c:	441a      	add	r2, r3
 8005f6e:	4b1e      	ldr	r3, [pc, #120]	; (8005fe8 <eepromKontrol+0x500>)
 8005f70:	6810      	ldr	r0, [r2, #0]
 8005f72:	6851      	ldr	r1, [r2, #4]
 8005f74:	6892      	ldr	r2, [r2, #8]
 8005f76:	c307      	stmia	r3!, {r0, r1, r2}
	HAL_Delay(100);
 8005f78:	2064      	movs	r0, #100	; 0x64
 8005f7a:	f002 ff5b 	bl	8008e34 <HAL_Delay>

	if(iotMode == 1 && type == 1) {
		//convertAndSendData();
	}
}
 8005f7e:	bf00      	nop
 8005f80:	3708      	adds	r7, #8
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	20000c29 	.word	0x20000c29
 8005f8c:	20000c1a 	.word	0x20000c1a
 8005f90:	20000c2a 	.word	0x20000c2a
 8005f94:	20000c1b 	.word	0x20000c1b
 8005f98:	20000c1d 	.word	0x20000c1d
 8005f9c:	20000c2b 	.word	0x20000c2b
 8005fa0:	20000c1e 	.word	0x20000c1e
 8005fa4:	20000c1f 	.word	0x20000c1f
 8005fa8:	20000c20 	.word	0x20000c20
 8005fac:	20000c21 	.word	0x20000c21
 8005fb0:	20000c22 	.word	0x20000c22
 8005fb4:	20000c23 	.word	0x20000c23
 8005fb8:	20000c24 	.word	0x20000c24
 8005fbc:	20000c25 	.word	0x20000c25
 8005fc0:	20000c26 	.word	0x20000c26
 8005fc4:	20000c27 	.word	0x20000c27
 8005fc8:	20000c28 	.word	0x20000c28
 8005fcc:	20000c2c 	.word	0x20000c2c
 8005fd0:	20000c2e 	.word	0x20000c2e
 8005fd4:	20000c30 	.word	0x20000c30
 8005fd8:	20000c31 	.word	0x20000c31
 8005fdc:	20000c2f 	.word	0x20000c2f
 8005fe0:	200009b1 	.word	0x200009b1
 8005fe4:	20000b40 	.word	0x20000b40
 8005fe8:	20000bd8 	.word	0x20000bd8

08005fec <hata2EEPROM>:

void hata2EEPROM(uint8_t hataKodu) {
 8005fec:	b590      	push	{r4, r7, lr}
 8005fee:	b089      	sub	sp, #36	; 0x24
 8005ff0:	af04      	add	r7, sp, #16
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8005ff6:	4b26      	ldr	r3, [pc, #152]	; (8006090 <hata2EEPROM+0xa4>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	1e5a      	subs	r2, r3, #1
 8005ffc:	4b25      	ldr	r3, [pc, #148]	; (8006094 <hata2EEPROM+0xa8>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	4413      	add	r3, r2
 8006002:	4a25      	ldr	r2, [pc, #148]	; (8006098 <hata2EEPROM+0xac>)
 8006004:	5cd3      	ldrb	r3, [r2, r3]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d002      	beq.n	8006010 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 800600a:	f000 f849 	bl	80060a0 <eepromDataFillWithEmpty>
		goto veriEkleme;
 800600e:	e000      	b.n	8006012 <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8006010:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8006012:	2300      	movs	r3, #0
 8006014:	60fb      	str	r3, [r7, #12]
 8006016:	e012      	b.n	800603e <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8006018:	4b1e      	ldr	r3, [pc, #120]	; (8006094 <hata2EEPROM+0xa8>)
 800601a:	681a      	ldr	r2, [r3, #0]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	4413      	add	r3, r2
 8006020:	4a1d      	ldr	r2, [pc, #116]	; (8006098 <hata2EEPROM+0xac>)
 8006022:	5cd3      	ldrb	r3, [r2, r3]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d107      	bne.n	8006038 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8006028:	4b1a      	ldr	r3, [pc, #104]	; (8006094 <hata2EEPROM+0xa8>)
 800602a:	681a      	ldr	r2, [r3, #0]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	4413      	add	r3, r2
 8006030:	4919      	ldr	r1, [pc, #100]	; (8006098 <hata2EEPROM+0xac>)
 8006032:	79fa      	ldrb	r2, [r7, #7]
 8006034:	54ca      	strb	r2, [r1, r3]
					break;
 8006036:	e007      	b.n	8006048 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	3301      	adds	r3, #1
 800603c:	60fb      	str	r3, [r7, #12]
 800603e:	4b14      	ldr	r3, [pc, #80]	; (8006090 <hata2EEPROM+0xa4>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	429a      	cmp	r2, r3
 8006046:	dbe7      	blt.n	8006018 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, eepromHataBaslangic, indeksSayisi, &eepromData[eepromHataBaslangic], indeksSayisi, 3000);
 8006048:	4b12      	ldr	r3, [pc, #72]	; (8006094 <hata2EEPROM+0xa8>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	b299      	uxth	r1, r3
 800604e:	4b10      	ldr	r3, [pc, #64]	; (8006090 <hata2EEPROM+0xa4>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	b298      	uxth	r0, r3
 8006054:	4b0f      	ldr	r3, [pc, #60]	; (8006094 <hata2EEPROM+0xa8>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a0f      	ldr	r2, [pc, #60]	; (8006098 <hata2EEPROM+0xac>)
 800605a:	4413      	add	r3, r2
 800605c:	4a0c      	ldr	r2, [pc, #48]	; (8006090 <hata2EEPROM+0xa4>)
 800605e:	6812      	ldr	r2, [r2, #0]
 8006060:	b292      	uxth	r2, r2
 8006062:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8006066:	9402      	str	r4, [sp, #8]
 8006068:	9201      	str	r2, [sp, #4]
 800606a:	9300      	str	r3, [sp, #0]
 800606c:	4603      	mov	r3, r0
 800606e:	460a      	mov	r2, r1
 8006070:	21a0      	movs	r1, #160	; 0xa0
 8006072:	480a      	ldr	r0, [pc, #40]	; (800609c <hata2EEPROM+0xb0>)
 8006074:	f003 ff68 	bl	8009f48 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8006078:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800607c:	f002 feda 	bl	8008e34 <HAL_Delay>
	eepromKontrol(1);
 8006080:	2001      	movs	r0, #1
 8006082:	f7ff fd31 	bl	8005ae8 <eepromKontrol>
}
 8006086:	bf00      	nop
 8006088:	3714      	adds	r7, #20
 800608a:	46bd      	mov	sp, r7
 800608c:	bd90      	pop	{r4, r7, pc}
 800608e:	bf00      	nop
 8006090:	20000938 	.word	0x20000938
 8006094:	2000093c 	.word	0x2000093c
 8006098:	20000b40 	.word	0x20000b40
 800609c:	20000a5c 	.word	0x20000a5c

080060a0 <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 80060a6:	2300      	movs	r3, #0
 80060a8:	607b      	str	r3, [r7, #4]
 80060aa:	e009      	b.n	80060c0 <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 80060ac:	4a0a      	ldr	r2, [pc, #40]	; (80060d8 <eepromDataFillWithEmpty+0x38>)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060b4:	4a09      	ldr	r2, [pc, #36]	; (80060dc <eepromDataFillWithEmpty+0x3c>)
 80060b6:	2100      	movs	r1, #0
 80060b8:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	3301      	adds	r3, #1
 80060be:	607b      	str	r3, [r7, #4]
 80060c0:	4b07      	ldr	r3, [pc, #28]	; (80060e0 <eepromDataFillWithEmpty+0x40>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	dbf0      	blt.n	80060ac <eepromDataFillWithEmpty+0xc>
	}
}
 80060ca:	bf00      	nop
 80060cc:	bf00      	nop
 80060ce:	370c      	adds	r7, #12
 80060d0:	46bd      	mov	sp, r7
 80060d2:	bc80      	pop	{r7}
 80060d4:	4770      	bx	lr
 80060d6:	bf00      	nop
 80060d8:	20000910 	.word	0x20000910
 80060dc:	20000b40 	.word	0x20000b40
 80060e0:	20000938 	.word	0x20000938

080060e4 <bekle>:
		return 1;
	}
	return 0;
}

void bekle() {
 80060e4:	b580      	push	{r7, lr}
 80060e6:	af00      	add	r7, sp, #0
	timer1=millis;
 80060e8:	4b47      	ldr	r3, [pc, #284]	; (8006208 <bekle+0x124>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a47      	ldr	r2, [pc, #284]	; (800620c <bekle+0x128>)
 80060ee:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80060f0:	e002      	b.n	80060f8 <bekle+0x14>
    	butonKontrol = 1;
 80060f2:	4b47      	ldr	r3, [pc, #284]	; (8006210 <bekle+0x12c>)
 80060f4:	2201      	movs	r2, #1
 80060f6:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80060f8:	2101      	movs	r1, #1
 80060fa:	4846      	ldr	r0, [pc, #280]	; (8006214 <bekle+0x130>)
 80060fc:	f003 fc6a 	bl	80099d4 <HAL_GPIO_ReadPin>
 8006100:	4603      	mov	r3, r0
 8006102:	2b01      	cmp	r3, #1
 8006104:	d109      	bne.n	800611a <bekle+0x36>
 8006106:	4b40      	ldr	r3, [pc, #256]	; (8006208 <bekle+0x124>)
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	4b40      	ldr	r3, [pc, #256]	; (800620c <bekle+0x128>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	429a      	cmp	r2, r3
 8006110:	d0ef      	beq.n	80060f2 <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006112:	e002      	b.n	800611a <bekle+0x36>
    	butonKontrol = 1;
 8006114:	4b3e      	ldr	r3, [pc, #248]	; (8006210 <bekle+0x12c>)
 8006116:	2201      	movs	r2, #1
 8006118:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800611a:	2108      	movs	r1, #8
 800611c:	483e      	ldr	r0, [pc, #248]	; (8006218 <bekle+0x134>)
 800611e:	f003 fc59 	bl	80099d4 <HAL_GPIO_ReadPin>
 8006122:	4603      	mov	r3, r0
 8006124:	2b01      	cmp	r3, #1
 8006126:	d109      	bne.n	800613c <bekle+0x58>
 8006128:	4b37      	ldr	r3, [pc, #220]	; (8006208 <bekle+0x124>)
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	4b37      	ldr	r3, [pc, #220]	; (800620c <bekle+0x128>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	429a      	cmp	r2, r3
 8006132:	d0ef      	beq.n	8006114 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006134:	e002      	b.n	800613c <bekle+0x58>
    	butonKontrol = 1;
 8006136:	4b36      	ldr	r3, [pc, #216]	; (8006210 <bekle+0x12c>)
 8006138:	2201      	movs	r2, #1
 800613a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800613c:	2102      	movs	r1, #2
 800613e:	4835      	ldr	r0, [pc, #212]	; (8006214 <bekle+0x130>)
 8006140:	f003 fc48 	bl	80099d4 <HAL_GPIO_ReadPin>
 8006144:	4603      	mov	r3, r0
 8006146:	2b01      	cmp	r3, #1
 8006148:	d109      	bne.n	800615e <bekle+0x7a>
 800614a:	4b2f      	ldr	r3, [pc, #188]	; (8006208 <bekle+0x124>)
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	4b2f      	ldr	r3, [pc, #188]	; (800620c <bekle+0x128>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	429a      	cmp	r2, r3
 8006154:	d0ef      	beq.n	8006136 <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006156:	e002      	b.n	800615e <bekle+0x7a>
    	butonKontrol = 1;
 8006158:	4b2d      	ldr	r3, [pc, #180]	; (8006210 <bekle+0x12c>)
 800615a:	2201      	movs	r2, #1
 800615c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800615e:	2104      	movs	r1, #4
 8006160:	482c      	ldr	r0, [pc, #176]	; (8006214 <bekle+0x130>)
 8006162:	f003 fc37 	bl	80099d4 <HAL_GPIO_ReadPin>
 8006166:	4603      	mov	r3, r0
 8006168:	2b01      	cmp	r3, #1
 800616a:	d109      	bne.n	8006180 <bekle+0x9c>
 800616c:	4b26      	ldr	r3, [pc, #152]	; (8006208 <bekle+0x124>)
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	4b26      	ldr	r3, [pc, #152]	; (800620c <bekle+0x128>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	429a      	cmp	r2, r3
 8006176:	d0ef      	beq.n	8006158 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006178:	e002      	b.n	8006180 <bekle+0x9c>
    	butonKontrol = 1;
 800617a:	4b25      	ldr	r3, [pc, #148]	; (8006210 <bekle+0x12c>)
 800617c:	2201      	movs	r2, #1
 800617e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006180:	2108      	movs	r1, #8
 8006182:	4824      	ldr	r0, [pc, #144]	; (8006214 <bekle+0x130>)
 8006184:	f003 fc26 	bl	80099d4 <HAL_GPIO_ReadPin>
 8006188:	4603      	mov	r3, r0
 800618a:	2b01      	cmp	r3, #1
 800618c:	d109      	bne.n	80061a2 <bekle+0xbe>
 800618e:	4b1e      	ldr	r3, [pc, #120]	; (8006208 <bekle+0x124>)
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	4b1e      	ldr	r3, [pc, #120]	; (800620c <bekle+0x128>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	429a      	cmp	r2, r3
 8006198:	d0ef      	beq.n	800617a <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 800619a:	e002      	b.n	80061a2 <bekle+0xbe>
    	butonKontrol = 1;
 800619c:	4b1c      	ldr	r3, [pc, #112]	; (8006210 <bekle+0x12c>)
 800619e:	2201      	movs	r2, #1
 80061a0:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80061a2:	2180      	movs	r1, #128	; 0x80
 80061a4:	481c      	ldr	r0, [pc, #112]	; (8006218 <bekle+0x134>)
 80061a6:	f003 fc15 	bl	80099d4 <HAL_GPIO_ReadPin>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d109      	bne.n	80061c4 <bekle+0xe0>
 80061b0:	4b15      	ldr	r3, [pc, #84]	; (8006208 <bekle+0x124>)
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	4b15      	ldr	r3, [pc, #84]	; (800620c <bekle+0x128>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d0ef      	beq.n	800619c <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80061bc:	e002      	b.n	80061c4 <bekle+0xe0>
    	butonKontrol = 1;
 80061be:	4b14      	ldr	r3, [pc, #80]	; (8006210 <bekle+0x12c>)
 80061c0:	2201      	movs	r2, #1
 80061c2:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 80061c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80061c8:	4813      	ldr	r0, [pc, #76]	; (8006218 <bekle+0x134>)
 80061ca:	f003 fc03 	bl	80099d4 <HAL_GPIO_ReadPin>
 80061ce:	4603      	mov	r3, r0
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d109      	bne.n	80061e8 <bekle+0x104>
 80061d4:	4b0c      	ldr	r3, [pc, #48]	; (8006208 <bekle+0x124>)
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	4b0c      	ldr	r3, [pc, #48]	; (800620c <bekle+0x128>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	429a      	cmp	r2, r3
 80061de:	d0ee      	beq.n	80061be <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 80061e0:	e002      	b.n	80061e8 <bekle+0x104>
    	butonKontrol = 1;
 80061e2:	4b0b      	ldr	r3, [pc, #44]	; (8006210 <bekle+0x12c>)
 80061e4:	2201      	movs	r2, #1
 80061e6:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 80061e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80061ec:	480a      	ldr	r0, [pc, #40]	; (8006218 <bekle+0x134>)
 80061ee:	f003 fbf1 	bl	80099d4 <HAL_GPIO_ReadPin>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d105      	bne.n	8006204 <bekle+0x120>
 80061f8:	4b03      	ldr	r3, [pc, #12]	; (8006208 <bekle+0x124>)
 80061fa:	681a      	ldr	r2, [r3, #0]
 80061fc:	4b03      	ldr	r3, [pc, #12]	; (800620c <bekle+0x128>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	429a      	cmp	r2, r3
 8006202:	d0ee      	beq.n	80061e2 <bekle+0xfe>
    }

}
 8006204:	bf00      	nop
 8006206:	bd80      	pop	{r7, pc}
 8006208:	20000bb8 	.word	0x20000bb8
 800620c:	20000bc0 	.word	0x20000bc0
 8006210:	20000c3f 	.word	0x20000c3f
 8006214:	40010800 	.word	0x40010800
 8006218:	40011000 	.word	0x40011000

0800621c <i2cTest>:

void i2cTest() {
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 8006222:	463b      	mov	r3, r7
 8006224:	2200      	movs	r2, #0
 8006226:	601a      	str	r2, [r3, #0]
 8006228:	605a      	str	r2, [r3, #4]
 800622a:	609a      	str	r2, [r3, #8]
 800622c:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 800622e:	4b50      	ldr	r3, [pc, #320]	; (8006370 <i2cTest+0x154>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	4b4e      	ldr	r3, [pc, #312]	; (8006370 <i2cTest+0x154>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f022 0201 	bic.w	r2, r2, #1
 800623c:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 800623e:	484c      	ldr	r0, [pc, #304]	; (8006370 <i2cTest+0x154>)
 8006240:	f003 fd54 	bl	8009cec <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006244:	23c0      	movs	r3, #192	; 0xc0
 8006246:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8006248:	2311      	movs	r3, #17
 800624a:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 800624c:	2301      	movs	r3, #1
 800624e:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8006250:	2303      	movs	r3, #3
 8006252:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8006254:	463b      	mov	r3, r7
 8006256:	4619      	mov	r1, r3
 8006258:	4846      	ldr	r0, [pc, #280]	; (8006374 <i2cTest+0x158>)
 800625a:	f003 f95b 	bl	8009514 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800625e:	2201      	movs	r2, #1
 8006260:	2140      	movs	r1, #64	; 0x40
 8006262:	4844      	ldr	r0, [pc, #272]	; (8006374 <i2cTest+0x158>)
 8006264:	f003 fbcd 	bl	8009a02 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8006268:	2201      	movs	r2, #1
 800626a:	2180      	movs	r1, #128	; 0x80
 800626c:	4841      	ldr	r0, [pc, #260]	; (8006374 <i2cTest+0x158>)
 800626e:	f003 fbc8 	bl	8009a02 <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 8006272:	200a      	movs	r0, #10
 8006274:	f002 fdde 	bl	8008e34 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8006278:	bf00      	nop
 800627a:	2140      	movs	r1, #64	; 0x40
 800627c:	483d      	ldr	r0, [pc, #244]	; (8006374 <i2cTest+0x158>)
 800627e:	f003 fba9 	bl	80099d4 <HAL_GPIO_ReadPin>
 8006282:	4603      	mov	r3, r0
 8006284:	2b01      	cmp	r3, #1
 8006286:	d006      	beq.n	8006296 <i2cTest+0x7a>
 8006288:	2180      	movs	r1, #128	; 0x80
 800628a:	483a      	ldr	r0, [pc, #232]	; (8006374 <i2cTest+0x158>)
 800628c:	f003 fba2 	bl	80099d4 <HAL_GPIO_ReadPin>
 8006290:	4603      	mov	r3, r0
 8006292:	2b01      	cmp	r3, #1
 8006294:	d1f1      	bne.n	800627a <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8006296:	2200      	movs	r2, #0
 8006298:	2180      	movs	r1, #128	; 0x80
 800629a:	4836      	ldr	r0, [pc, #216]	; (8006374 <i2cTest+0x158>)
 800629c:	f003 fbb1 	bl	8009a02 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 80062a0:	200a      	movs	r0, #10
 80062a2:	f002 fdc7 	bl	8008e34 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 80062a6:	bf00      	nop
 80062a8:	2180      	movs	r1, #128	; 0x80
 80062aa:	4832      	ldr	r0, [pc, #200]	; (8006374 <i2cTest+0x158>)
 80062ac:	f003 fb92 	bl	80099d4 <HAL_GPIO_ReadPin>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d0f8      	beq.n	80062a8 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80062b6:	2200      	movs	r2, #0
 80062b8:	2140      	movs	r1, #64	; 0x40
 80062ba:	482e      	ldr	r0, [pc, #184]	; (8006374 <i2cTest+0x158>)
 80062bc:	f003 fba1 	bl	8009a02 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 80062c0:	200a      	movs	r0, #10
 80062c2:	f002 fdb7 	bl	8008e34 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 80062c6:	bf00      	nop
 80062c8:	2140      	movs	r1, #64	; 0x40
 80062ca:	482a      	ldr	r0, [pc, #168]	; (8006374 <i2cTest+0x158>)
 80062cc:	f003 fb82 	bl	80099d4 <HAL_GPIO_ReadPin>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b01      	cmp	r3, #1
 80062d4:	d0f8      	beq.n	80062c8 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80062d6:	2201      	movs	r2, #1
 80062d8:	2140      	movs	r1, #64	; 0x40
 80062da:	4826      	ldr	r0, [pc, #152]	; (8006374 <i2cTest+0x158>)
 80062dc:	f003 fb91 	bl	8009a02 <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 80062e0:	200a      	movs	r0, #10
 80062e2:	f002 fda7 	bl	8008e34 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 80062e6:	bf00      	nop
 80062e8:	2140      	movs	r1, #64	; 0x40
 80062ea:	4822      	ldr	r0, [pc, #136]	; (8006374 <i2cTest+0x158>)
 80062ec:	f003 fb72 	bl	80099d4 <HAL_GPIO_ReadPin>
 80062f0:	4603      	mov	r3, r0
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d1f8      	bne.n	80062e8 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80062f6:	2201      	movs	r2, #1
 80062f8:	2180      	movs	r1, #128	; 0x80
 80062fa:	481e      	ldr	r0, [pc, #120]	; (8006374 <i2cTest+0x158>)
 80062fc:	f003 fb81 	bl	8009a02 <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 8006300:	200a      	movs	r0, #10
 8006302:	f002 fd97 	bl	8008e34 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8006306:	bf00      	nop
 8006308:	2180      	movs	r1, #128	; 0x80
 800630a:	481a      	ldr	r0, [pc, #104]	; (8006374 <i2cTest+0x158>)
 800630c:	f003 fb62 	bl	80099d4 <HAL_GPIO_ReadPin>
 8006310:	4603      	mov	r3, r0
 8006312:	2b01      	cmp	r3, #1
 8006314:	d1f8      	bne.n	8006308 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006316:	23c0      	movs	r3, #192	; 0xc0
 8006318:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 800631a:	2312      	movs	r3, #18
 800631c:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 800631e:	2301      	movs	r3, #1
 8006320:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 8006322:	2303      	movs	r3, #3
 8006324:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8006326:	463b      	mov	r3, r7
 8006328:	4619      	mov	r1, r3
 800632a:	4812      	ldr	r0, [pc, #72]	; (8006374 <i2cTest+0x158>)
 800632c:	f003 f8f2 	bl	8009514 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 8006330:	4b0f      	ldr	r3, [pc, #60]	; (8006370 <i2cTest+0x154>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	681a      	ldr	r2, [r3, #0]
 8006336:	4b0e      	ldr	r3, [pc, #56]	; (8006370 <i2cTest+0x154>)
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800633e:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 8006340:	4b0b      	ldr	r3, [pc, #44]	; (8006370 <i2cTest+0x154>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	4b0a      	ldr	r3, [pc, #40]	; (8006370 <i2cTest+0x154>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800634e:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 8006350:	4b07      	ldr	r3, [pc, #28]	; (8006370 <i2cTest+0x154>)
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	681a      	ldr	r2, [r3, #0]
 8006356:	4b06      	ldr	r3, [pc, #24]	; (8006370 <i2cTest+0x154>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f042 0201 	orr.w	r2, r2, #1
 800635e:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 8006360:	4803      	ldr	r0, [pc, #12]	; (8006370 <i2cTest+0x154>)
 8006362:	f003 fb7f 	bl	8009a64 <HAL_I2C_Init>
}
 8006366:	bf00      	nop
 8006368:	3710      	adds	r7, #16
 800636a:	46bd      	mov	sp, r7
 800636c:	bd80      	pop	{r7, pc}
 800636e:	bf00      	nop
 8006370:	20000a5c 	.word	0x20000a5c
 8006374:	40010c00 	.word	0x40010c00

08006378 <checkLCDBacklight>:

void checkLCDBacklight() {
 8006378:	b580      	push	{r7, lr}
 800637a:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 800637c:	4b0b      	ldr	r3, [pc, #44]	; (80063ac <checkLCDBacklight+0x34>)
 800637e:	681a      	ldr	r2, [r3, #0]
 8006380:	4b0b      	ldr	r3, [pc, #44]	; (80063b0 <checkLCDBacklight+0x38>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	1ad2      	subs	r2, r2, r3
 8006386:	4b0b      	ldr	r3, [pc, #44]	; (80063b4 <checkLCDBacklight+0x3c>)
 8006388:	781b      	ldrb	r3, [r3, #0]
 800638a:	4619      	mov	r1, r3
 800638c:	460b      	mov	r3, r1
 800638e:	009b      	lsls	r3, r3, #2
 8006390:	440b      	add	r3, r1
 8006392:	005b      	lsls	r3, r3, #1
 8006394:	429a      	cmp	r2, r3
 8006396:	d303      	bcc.n	80063a0 <checkLCDBacklight+0x28>
		lcd_backlight(0);
 8006398:	2000      	movs	r0, #0
 800639a:	f7fa f92f 	bl	80005fc <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 800639e:	e002      	b.n	80063a6 <checkLCDBacklight+0x2e>
		lcd_backlight(1);
 80063a0:	2001      	movs	r0, #1
 80063a2:	f7fa f92b 	bl	80005fc <lcd_backlight>
}
 80063a6:	bf00      	nop
 80063a8:	bd80      	pop	{r7, pc}
 80063aa:	bf00      	nop
 80063ac:	20000bb8 	.word	0x20000bb8
 80063b0:	20000bd4 	.word	0x20000bd4
 80063b4:	20000940 	.word	0x20000940

080063b8 <checkBasincSalteri>:

void checkBasincSalteri() {
 80063b8:	b580      	push	{r7, lr}
 80063ba:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 80063bc:	4b13      	ldr	r3, [pc, #76]	; (800640c <checkBasincSalteri+0x54>)
 80063be:	781b      	ldrb	r3, [r3, #0]
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d102      	bne.n	80063ca <checkBasincSalteri+0x12>
		basincVar=1;
 80063c4:	4b12      	ldr	r3, [pc, #72]	; (8006410 <checkBasincSalteri+0x58>)
 80063c6:	2201      	movs	r2, #1
 80063c8:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 80063ca:	4b10      	ldr	r3, [pc, #64]	; (800640c <checkBasincSalteri+0x54>)
 80063cc:	781b      	ldrb	r3, [r3, #0]
 80063ce:	2b01      	cmp	r3, #1
 80063d0:	d119      	bne.n	8006406 <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 80063d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80063d6:	480f      	ldr	r0, [pc, #60]	; (8006414 <checkBasincSalteri+0x5c>)
 80063d8:	f003 fafc 	bl	80099d4 <HAL_GPIO_ReadPin>
 80063dc:	4603      	mov	r3, r0
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d10a      	bne.n	80063f8 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 80063e2:	4b0d      	ldr	r3, [pc, #52]	; (8006418 <checkBasincSalteri+0x60>)
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	4b0d      	ldr	r3, [pc, #52]	; (800641c <checkBasincSalteri+0x64>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	1ad3      	subs	r3, r2, r3
 80063ec:	2b02      	cmp	r3, #2
 80063ee:	d90a      	bls.n	8006406 <checkBasincSalteri+0x4e>
				basincVar=1;
 80063f0:	4b07      	ldr	r3, [pc, #28]	; (8006410 <checkBasincSalteri+0x58>)
 80063f2:	2201      	movs	r2, #1
 80063f4:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 80063f6:	e006      	b.n	8006406 <checkBasincSalteri+0x4e>
			timer5=millis;
 80063f8:	4b07      	ldr	r3, [pc, #28]	; (8006418 <checkBasincSalteri+0x60>)
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	4a07      	ldr	r2, [pc, #28]	; (800641c <checkBasincSalteri+0x64>)
 80063fe:	6013      	str	r3, [r2, #0]
			basincVar=0;
 8006400:	4b03      	ldr	r3, [pc, #12]	; (8006410 <checkBasincSalteri+0x58>)
 8006402:	2200      	movs	r2, #0
 8006404:	701a      	strb	r2, [r3, #0]
}
 8006406:	bf00      	nop
 8006408:	bd80      	pop	{r7, pc}
 800640a:	bf00      	nop
 800640c:	20000c17 	.word	0x20000c17
 8006410:	20000c13 	.word	0x20000c13
 8006414:	40011000 	.word	0x40011000
 8006418:	20000bb8 	.word	0x20000bb8
 800641c:	20000bd0 	.word	0x20000bd0

08006420 <checkBasGonder>:

void checkBasGonder() {
 8006420:	b480      	push	{r7}
 8006422:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8006424:	4b1b      	ldr	r3, [pc, #108]	; (8006494 <checkBasGonder+0x74>)
 8006426:	781b      	ldrb	r3, [r3, #0]
 8006428:	2b01      	cmp	r3, #1
 800642a:	d10b      	bne.n	8006444 <checkBasGonder+0x24>
 800642c:	4b1a      	ldr	r3, [pc, #104]	; (8006498 <checkBasGonder+0x78>)
 800642e:	781b      	ldrb	r3, [r3, #0]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d007      	beq.n	8006444 <checkBasGonder+0x24>
 8006434:	4b19      	ldr	r3, [pc, #100]	; (800649c <checkBasGonder+0x7c>)
 8006436:	781b      	ldrb	r3, [r3, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d103      	bne.n	8006444 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 800643c:	4b18      	ldr	r3, [pc, #96]	; (80064a0 <checkBasGonder+0x80>)
 800643e:	2201      	movs	r2, #1
 8006440:	701a      	strb	r2, [r3, #0]
 8006442:	e009      	b.n	8006458 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 8006444:	4b14      	ldr	r3, [pc, #80]	; (8006498 <checkBasGonder+0x78>)
 8006446:	781b      	ldrb	r3, [r3, #0]
 8006448:	f083 0301 	eor.w	r3, r3, #1
 800644c:	b2db      	uxtb	r3, r3
 800644e:	2b00      	cmp	r3, #0
 8006450:	d002      	beq.n	8006458 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 8006452:	4b13      	ldr	r3, [pc, #76]	; (80064a0 <checkBasGonder+0x80>)
 8006454:	2200      	movs	r2, #0
 8006456:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8006458:	4b0e      	ldr	r3, [pc, #56]	; (8006494 <checkBasGonder+0x74>)
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	2b01      	cmp	r3, #1
 800645e:	d10b      	bne.n	8006478 <checkBasGonder+0x58>
 8006460:	4b10      	ldr	r3, [pc, #64]	; (80064a4 <checkBasGonder+0x84>)
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d007      	beq.n	8006478 <checkBasGonder+0x58>
 8006468:	4b0c      	ldr	r3, [pc, #48]	; (800649c <checkBasGonder+0x7c>)
 800646a:	781b      	ldrb	r3, [r3, #0]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d103      	bne.n	8006478 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 8006470:	4b0d      	ldr	r3, [pc, #52]	; (80064a8 <checkBasGonder+0x88>)
 8006472:	2201      	movs	r2, #1
 8006474:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8006476:	e009      	b.n	800648c <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8006478:	4b0a      	ldr	r3, [pc, #40]	; (80064a4 <checkBasGonder+0x84>)
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	f083 0301 	eor.w	r3, r3, #1
 8006480:	b2db      	uxtb	r3, r3
 8006482:	2b00      	cmp	r3, #0
 8006484:	d002      	beq.n	800648c <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8006486:	4b08      	ldr	r3, [pc, #32]	; (80064a8 <checkBasGonder+0x88>)
 8006488:	2200      	movs	r2, #0
 800648a:	701a      	strb	r2, [r3, #0]
}
 800648c:	bf00      	nop
 800648e:	46bd      	mov	sp, r7
 8006490:	bc80      	pop	{r7}
 8006492:	4770      	bx	lr
 8006494:	20000c11 	.word	0x20000c11
 8006498:	20000c45 	.word	0x20000c45
 800649c:	20000c1f 	.word	0x20000c1f
 80064a0:	20000c4c 	.word	0x20000c4c
 80064a4:	20000c48 	.word	0x20000c48
 80064a8:	20000c4d 	.word	0x20000c4d

080064ac <checkKapiSecimleri>:

void checkKapiSecimleri() {
 80064ac:	b580      	push	{r7, lr}
 80064ae:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 80064b0:	4b24      	ldr	r3, [pc, #144]	; (8006544 <checkKapiSecimleri+0x98>)
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d102      	bne.n	80064be <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 80064b8:	4b23      	ldr	r3, [pc, #140]	; (8006548 <checkKapiSecimleri+0x9c>)
 80064ba:	2201      	movs	r2, #1
 80064bc:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 80064be:	4b21      	ldr	r3, [pc, #132]	; (8006544 <checkKapiSecimleri+0x98>)
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d10e      	bne.n	80064e4 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 80064c6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80064ca:	4820      	ldr	r0, [pc, #128]	; (800654c <checkKapiSecimleri+0xa0>)
 80064cc:	f003 fa82 	bl	80099d4 <HAL_GPIO_ReadPin>
 80064d0:	4603      	mov	r3, r0
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d103      	bne.n	80064de <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 80064d6:	4b1c      	ldr	r3, [pc, #112]	; (8006548 <checkKapiSecimleri+0x9c>)
 80064d8:	2201      	movs	r2, #1
 80064da:	701a      	strb	r2, [r3, #0]
 80064dc:	e002      	b.n	80064e4 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 80064de:	4b1a      	ldr	r3, [pc, #104]	; (8006548 <checkKapiSecimleri+0x9c>)
 80064e0:	2200      	movs	r2, #0
 80064e2:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 80064e4:	4b17      	ldr	r3, [pc, #92]	; (8006544 <checkKapiSecimleri+0x98>)
 80064e6:	781b      	ldrb	r3, [r3, #0]
 80064e8:	2b02      	cmp	r3, #2
 80064ea:	d10e      	bne.n	800650a <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 80064ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80064f0:	4816      	ldr	r0, [pc, #88]	; (800654c <checkKapiSecimleri+0xa0>)
 80064f2:	f003 fa6f 	bl	80099d4 <HAL_GPIO_ReadPin>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d103      	bne.n	8006504 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 80064fc:	4b12      	ldr	r3, [pc, #72]	; (8006548 <checkKapiSecimleri+0x9c>)
 80064fe:	2201      	movs	r2, #1
 8006500:	701a      	strb	r2, [r3, #0]
 8006502:	e002      	b.n	800650a <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8006504:	4b10      	ldr	r3, [pc, #64]	; (8006548 <checkKapiSecimleri+0x9c>)
 8006506:	2200      	movs	r2, #0
 8006508:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 800650a:	4b0e      	ldr	r3, [pc, #56]	; (8006544 <checkKapiSecimleri+0x98>)
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	2b03      	cmp	r3, #3
 8006510:	d116      	bne.n	8006540 <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 8006512:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006516:	480d      	ldr	r0, [pc, #52]	; (800654c <checkKapiSecimleri+0xa0>)
 8006518:	f003 fa5c 	bl	80099d4 <HAL_GPIO_ReadPin>
 800651c:	4603      	mov	r3, r0
 800651e:	2b00      	cmp	r3, #0
 8006520:	d10b      	bne.n	800653a <checkKapiSecimleri+0x8e>
 8006522:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006526:	4809      	ldr	r0, [pc, #36]	; (800654c <checkKapiSecimleri+0xa0>)
 8006528:	f003 fa54 	bl	80099d4 <HAL_GPIO_ReadPin>
 800652c:	4603      	mov	r3, r0
 800652e:	2b00      	cmp	r3, #0
 8006530:	d103      	bne.n	800653a <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 8006532:	4b05      	ldr	r3, [pc, #20]	; (8006548 <checkKapiSecimleri+0x9c>)
 8006534:	2201      	movs	r2, #1
 8006536:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 8006538:	e002      	b.n	8006540 <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 800653a:	4b03      	ldr	r3, [pc, #12]	; (8006548 <checkKapiSecimleri+0x9c>)
 800653c:	2200      	movs	r2, #0
 800653e:	701a      	strb	r2, [r3, #0]
}
 8006540:	bf00      	nop
 8006542:	bd80      	pop	{r7, pc}
 8006544:	20000c18 	.word	0x20000c18
 8006548:	20000c63 	.word	0x20000c63
 800654c:	40010800 	.word	0x40010800

08006550 <checkAktifCalisma>:

void checkAktifCalisma() {
 8006550:	b580      	push	{r7, lr}
 8006552:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8006554:	4b62      	ldr	r3, [pc, #392]	; (80066e0 <checkAktifCalisma+0x190>)
 8006556:	781b      	ldrb	r3, [r3, #0]
 8006558:	2b00      	cmp	r3, #0
 800655a:	f041 8332 	bne.w	8007bc2 <checkAktifCalisma+0x1672>
 800655e:	4b61      	ldr	r3, [pc, #388]	; (80066e4 <checkAktifCalisma+0x194>)
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	2b00      	cmp	r3, #0
 8006564:	f041 832d 	bne.w	8007bc2 <checkAktifCalisma+0x1672>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8006568:	4b5f      	ldr	r3, [pc, #380]	; (80066e8 <checkAktifCalisma+0x198>)
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d11a      	bne.n	80065a6 <checkAktifCalisma+0x56>
 8006570:	4b5e      	ldr	r3, [pc, #376]	; (80066ec <checkAktifCalisma+0x19c>)
 8006572:	781b      	ldrb	r3, [r3, #0]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d116      	bne.n	80065a6 <checkAktifCalisma+0x56>
 8006578:	4b5d      	ldr	r3, [pc, #372]	; (80066f0 <checkAktifCalisma+0x1a0>)
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	2b00      	cmp	r3, #0
 800657e:	d00a      	beq.n	8006596 <checkAktifCalisma+0x46>
 8006580:	4b5c      	ldr	r3, [pc, #368]	; (80066f4 <checkAktifCalisma+0x1a4>)
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	f083 0301 	eor.w	r3, r3, #1
 8006588:	b2db      	uxtb	r3, r3
 800658a:	2b00      	cmp	r3, #0
 800658c:	d003      	beq.n	8006596 <checkAktifCalisma+0x46>
 800658e:	4b5a      	ldr	r3, [pc, #360]	; (80066f8 <checkAktifCalisma+0x1a8>)
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	2b01      	cmp	r3, #1
 8006594:	d007      	beq.n	80065a6 <checkAktifCalisma+0x56>
 8006596:	4b59      	ldr	r3, [pc, #356]	; (80066fc <checkAktifCalisma+0x1ac>)
 8006598:	781b      	ldrb	r3, [r3, #0]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d018      	beq.n	80065d0 <checkAktifCalisma+0x80>
 800659e:	4b58      	ldr	r3, [pc, #352]	; (8006700 <checkAktifCalisma+0x1b0>)
 80065a0:	781b      	ldrb	r3, [r3, #0]
 80065a2:	2b01      	cmp	r3, #1
 80065a4:	d114      	bne.n	80065d0 <checkAktifCalisma+0x80>
 80065a6:	4b57      	ldr	r3, [pc, #348]	; (8006704 <checkAktifCalisma+0x1b4>)
 80065a8:	781b      	ldrb	r3, [r3, #0]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d010      	beq.n	80065d0 <checkAktifCalisma+0x80>
 80065ae:	4b56      	ldr	r3, [pc, #344]	; (8006708 <checkAktifCalisma+0x1b8>)
 80065b0:	781b      	ldrb	r3, [r3, #0]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00c      	beq.n	80065d0 <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 80065b6:	2201      	movs	r2, #1
 80065b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80065bc:	4853      	ldr	r0, [pc, #332]	; (800670c <checkAktifCalisma+0x1bc>)
 80065be:	f003 fa20 	bl	8009a02 <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 80065c2:	4b53      	ldr	r3, [pc, #332]	; (8006710 <checkAktifCalisma+0x1c0>)
 80065c4:	2201      	movs	r2, #1
 80065c6:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 80065c8:	4b52      	ldr	r3, [pc, #328]	; (8006714 <checkAktifCalisma+0x1c4>)
 80065ca:	2201      	movs	r2, #1
 80065cc:	701a      	strb	r2, [r3, #0]
 80065ce:	e008      	b.n	80065e2 <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80065d0:	2200      	movs	r2, #0
 80065d2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80065d6:	484d      	ldr	r0, [pc, #308]	; (800670c <checkAktifCalisma+0x1bc>)
 80065d8:	f003 fa13 	bl	8009a02 <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 80065dc:	4b4c      	ldr	r3, [pc, #304]	; (8006710 <checkAktifCalisma+0x1c0>)
 80065de:	2200      	movs	r2, #0
 80065e0:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 80065e2:	4b40      	ldr	r3, [pc, #256]	; (80066e4 <checkAktifCalisma+0x194>)
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d160      	bne.n	80066ac <checkAktifCalisma+0x15c>
 80065ea:	4b46      	ldr	r3, [pc, #280]	; (8006704 <checkAktifCalisma+0x1b4>)
 80065ec:	781b      	ldrb	r3, [r3, #0]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d05c      	beq.n	80066ac <checkAktifCalisma+0x15c>
 80065f2:	4b45      	ldr	r3, [pc, #276]	; (8006708 <checkAktifCalisma+0x1b8>)
 80065f4:	781b      	ldrb	r3, [r3, #0]
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d058      	beq.n	80066ac <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 80065fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80065fe:	4843      	ldr	r0, [pc, #268]	; (800670c <checkAktifCalisma+0x1bc>)
 8006600:	f003 f9e8 	bl	80099d4 <HAL_GPIO_ReadPin>
 8006604:	4603      	mov	r3, r0
 8006606:	2b00      	cmp	r3, #0
 8006608:	d003      	beq.n	8006612 <checkAktifCalisma+0xc2>
 800660a:	4b43      	ldr	r3, [pc, #268]	; (8006718 <checkAktifCalisma+0x1c8>)
 800660c:	781b      	ldrb	r3, [r3, #0]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d04c      	beq.n	80066ac <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006612:	2102      	movs	r1, #2
 8006614:	4841      	ldr	r0, [pc, #260]	; (800671c <checkAktifCalisma+0x1cc>)
 8006616:	f003 f9dd 	bl	80099d4 <HAL_GPIO_ReadPin>
 800661a:	4603      	mov	r3, r0
 800661c:	2b00      	cmp	r3, #0
 800661e:	d145      	bne.n	80066ac <checkAktifCalisma+0x15c>
				&& (basincVar)
 8006620:	4b3f      	ldr	r3, [pc, #252]	; (8006720 <checkAktifCalisma+0x1d0>)
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	2b00      	cmp	r3, #0
 8006626:	d041      	beq.n	80066ac <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 8006628:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800662c:	4837      	ldr	r0, [pc, #220]	; (800670c <checkAktifCalisma+0x1bc>)
 800662e:	f003 f9d1 	bl	80099d4 <HAL_GPIO_ReadPin>
 8006632:	4603      	mov	r3, r0
 8006634:	2b01      	cmp	r3, #1
 8006636:	d10e      	bne.n	8006656 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8006638:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800663c:	4833      	ldr	r0, [pc, #204]	; (800670c <checkAktifCalisma+0x1bc>)
 800663e:	f003 f9c9 	bl	80099d4 <HAL_GPIO_ReadPin>
 8006642:	4603      	mov	r3, r0
 8006644:	2b01      	cmp	r3, #1
 8006646:	d106      	bne.n	8006656 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8006648:	2140      	movs	r1, #64	; 0x40
 800664a:	4834      	ldr	r0, [pc, #208]	; (800671c <checkAktifCalisma+0x1cc>)
 800664c:	f003 f9c2 	bl	80099d4 <HAL_GPIO_ReadPin>
 8006650:	4603      	mov	r3, r0
 8006652:	2b01      	cmp	r3, #1
 8006654:	d003      	beq.n	800665e <checkAktifCalisma+0x10e>
 8006656:	4b24      	ldr	r3, [pc, #144]	; (80066e8 <checkAktifCalisma+0x198>)
 8006658:	781b      	ldrb	r3, [r3, #0]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d026      	beq.n	80066ac <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 800665e:	4b24      	ldr	r3, [pc, #144]	; (80066f0 <checkAktifCalisma+0x1a0>)
 8006660:	781b      	ldrb	r3, [r3, #0]
 8006662:	f083 0301 	eor.w	r3, r3, #1
 8006666:	b2db      	uxtb	r3, r3
 8006668:	2b00      	cmp	r3, #0
 800666a:	d01f      	beq.n	80066ac <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 800666c:	4b1f      	ldr	r3, [pc, #124]	; (80066ec <checkAktifCalisma+0x19c>)
 800666e:	781b      	ldrb	r3, [r3, #0]
 8006670:	f083 0301 	eor.w	r3, r3, #1
 8006674:	b2db      	uxtb	r3, r3
 8006676:	2b00      	cmp	r3, #0
 8006678:	d018      	beq.n	80066ac <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 800667a:	4b20      	ldr	r3, [pc, #128]	; (80066fc <checkAktifCalisma+0x1ac>)
 800667c:	781b      	ldrb	r3, [r3, #0]
 800667e:	f083 0301 	eor.w	r3, r3, #1
 8006682:	b2db      	uxtb	r3, r3
 8006684:	2b00      	cmp	r3, #0
 8006686:	d011      	beq.n	80066ac <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 8006688:	4b26      	ldr	r3, [pc, #152]	; (8006724 <checkAktifCalisma+0x1d4>)
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	f083 0301 	eor.w	r3, r3, #1
 8006690:	b2db      	uxtb	r3, r3
 8006692:	2b00      	cmp	r3, #0
 8006694:	d00a      	beq.n	80066ac <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 8006696:	4b24      	ldr	r3, [pc, #144]	; (8006728 <checkAktifCalisma+0x1d8>)
 8006698:	781b      	ldrb	r3, [r3, #0]
 800669a:	f083 0301 	eor.w	r3, r3, #1
 800669e:	b2db      	uxtb	r3, r3
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d003      	beq.n	80066ac <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 80066a4:	4b10      	ldr	r3, [pc, #64]	; (80066e8 <checkAktifCalisma+0x198>)
 80066a6:	2201      	movs	r2, #1
 80066a8:	701a      	strb	r2, [r3, #0]
 80066aa:	e002      	b.n	80066b2 <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 80066ac:	4b0e      	ldr	r3, [pc, #56]	; (80066e8 <checkAktifCalisma+0x198>)
 80066ae:	2200      	movs	r2, #0
 80066b0:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 80066b2:	4b0d      	ldr	r3, [pc, #52]	; (80066e8 <checkAktifCalisma+0x198>)
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d03a      	beq.n	8006730 <checkAktifCalisma+0x1e0>
 80066ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80066be:	4817      	ldr	r0, [pc, #92]	; (800671c <checkAktifCalisma+0x1cc>)
 80066c0:	f003 f988 	bl	80099d4 <HAL_GPIO_ReadPin>
 80066c4:	4603      	mov	r3, r0
 80066c6:	2b01      	cmp	r3, #1
 80066c8:	d132      	bne.n	8006730 <checkAktifCalisma+0x1e0>
 80066ca:	4b18      	ldr	r3, [pc, #96]	; (800672c <checkAktifCalisma+0x1dc>)
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d02e      	beq.n	8006730 <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 80066d2:	2201      	movs	r2, #1
 80066d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80066d8:	480c      	ldr	r0, [pc, #48]	; (800670c <checkAktifCalisma+0x1bc>)
 80066da:	f003 f992 	bl	8009a02 <HAL_GPIO_WritePin>
 80066de:	e02d      	b.n	800673c <checkAktifCalisma+0x1ec>
 80066e0:	20000c2e 	.word	0x20000c2e
 80066e4:	20000c2d 	.word	0x20000c2d
 80066e8:	20000c45 	.word	0x20000c45
 80066ec:	20000c46 	.word	0x20000c46
 80066f0:	20000c48 	.word	0x20000c48
 80066f4:	20000c40 	.word	0x20000c40
 80066f8:	20000c23 	.word	0x20000c23
 80066fc:	20000c47 	.word	0x20000c47
 8006700:	20000c22 	.word	0x20000c22
 8006704:	20000c62 	.word	0x20000c62
 8006708:	20000c63 	.word	0x20000c63
 800670c:	40010c00 	.word	0x40010c00
 8006710:	20000c64 	.word	0x20000c64
 8006714:	20000c4f 	.word	0x20000c4f
 8006718:	20000c4c 	.word	0x20000c4c
 800671c:	40011000 	.word	0x40011000
 8006720:	20000c13 	.word	0x20000c13
 8006724:	20000c4a 	.word	0x20000c4a
 8006728:	20000c4b 	.word	0x20000c4b
 800672c:	20000c1e 	.word	0x20000c1e
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006730:	2200      	movs	r2, #0
 8006732:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006736:	4860      	ldr	r0, [pc, #384]	; (80068b8 <checkAktifCalisma+0x368>)
 8006738:	f003 f963 	bl	8009a02 <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 800673c:	4b5f      	ldr	r3, [pc, #380]	; (80068bc <checkAktifCalisma+0x36c>)
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d013      	beq.n	800676c <checkAktifCalisma+0x21c>
 8006744:	4b5e      	ldr	r3, [pc, #376]	; (80068c0 <checkAktifCalisma+0x370>)
 8006746:	781b      	ldrb	r3, [r3, #0]
 8006748:	2b01      	cmp	r3, #1
 800674a:	d007      	beq.n	800675c <checkAktifCalisma+0x20c>
 800674c:	4b5c      	ldr	r3, [pc, #368]	; (80068c0 <checkAktifCalisma+0x370>)
 800674e:	781b      	ldrb	r3, [r3, #0]
 8006750:	2b02      	cmp	r3, #2
 8006752:	d003      	beq.n	800675c <checkAktifCalisma+0x20c>
 8006754:	4b5b      	ldr	r3, [pc, #364]	; (80068c4 <checkAktifCalisma+0x374>)
 8006756:	781b      	ldrb	r3, [r3, #0]
 8006758:	2b01      	cmp	r3, #1
 800675a:	d107      	bne.n	800676c <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 800675c:	2201      	movs	r2, #1
 800675e:	2104      	movs	r1, #4
 8006760:	4855      	ldr	r0, [pc, #340]	; (80068b8 <checkAktifCalisma+0x368>)
 8006762:	f003 f94e 	bl	8009a02 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 8006766:	4b58      	ldr	r3, [pc, #352]	; (80068c8 <checkAktifCalisma+0x378>)
 8006768:	2201      	movs	r2, #1
 800676a:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 800676c:	4b56      	ldr	r3, [pc, #344]	; (80068c8 <checkAktifCalisma+0x378>)
 800676e:	781b      	ldrb	r3, [r3, #0]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d02f      	beq.n	80067d4 <checkAktifCalisma+0x284>
 8006774:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006778:	484f      	ldr	r0, [pc, #316]	; (80068b8 <checkAktifCalisma+0x368>)
 800677a:	f003 f92b 	bl	80099d4 <HAL_GPIO_ReadPin>
 800677e:	4603      	mov	r3, r0
 8006780:	2b01      	cmp	r3, #1
 8006782:	d106      	bne.n	8006792 <checkAktifCalisma+0x242>
 8006784:	4b51      	ldr	r3, [pc, #324]	; (80068cc <checkAktifCalisma+0x37c>)
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	f083 0301 	eor.w	r3, r3, #1
 800678c:	b2db      	uxtb	r3, r3
 800678e:	2b00      	cmp	r3, #0
 8006790:	d106      	bne.n	80067a0 <checkAktifCalisma+0x250>
 8006792:	2102      	movs	r1, #2
 8006794:	484e      	ldr	r0, [pc, #312]	; (80068d0 <checkAktifCalisma+0x380>)
 8006796:	f003 f91d 	bl	80099d4 <HAL_GPIO_ReadPin>
 800679a:	4603      	mov	r3, r0
 800679c:	2b01      	cmp	r3, #1
 800679e:	d119      	bne.n	80067d4 <checkAktifCalisma+0x284>
 80067a0:	4b4c      	ldr	r3, [pc, #304]	; (80068d4 <checkAktifCalisma+0x384>)
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d015      	beq.n	80067d4 <checkAktifCalisma+0x284>
 80067a8:	4b4b      	ldr	r3, [pc, #300]	; (80068d8 <checkAktifCalisma+0x388>)
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d011      	beq.n	80067d4 <checkAktifCalisma+0x284>
 80067b0:	4b4a      	ldr	r3, [pc, #296]	; (80068dc <checkAktifCalisma+0x38c>)
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d00d      	beq.n	80067d4 <checkAktifCalisma+0x284>
 80067b8:	4b49      	ldr	r3, [pc, #292]	; (80068e0 <checkAktifCalisma+0x390>)
 80067ba:	781b      	ldrb	r3, [r3, #0]
 80067bc:	f083 0301 	eor.w	r3, r3, #1
 80067c0:	b2db      	uxtb	r3, r3
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d006      	beq.n	80067d4 <checkAktifCalisma+0x284>
			timer2=millis;
 80067c6:	4b47      	ldr	r3, [pc, #284]	; (80068e4 <checkAktifCalisma+0x394>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	4a47      	ldr	r2, [pc, #284]	; (80068e8 <checkAktifCalisma+0x398>)
 80067cc:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 80067ce:	4b44      	ldr	r3, [pc, #272]	; (80068e0 <checkAktifCalisma+0x390>)
 80067d0:	2201      	movs	r2, #1
 80067d2:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 80067d4:	4b43      	ldr	r3, [pc, #268]	; (80068e4 <checkAktifCalisma+0x394>)
 80067d6:	681a      	ldr	r2, [r3, #0]
 80067d8:	4b43      	ldr	r3, [pc, #268]	; (80068e8 <checkAktifCalisma+0x398>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	1ad3      	subs	r3, r2, r3
 80067de:	4a43      	ldr	r2, [pc, #268]	; (80068ec <checkAktifCalisma+0x39c>)
 80067e0:	7812      	ldrb	r2, [r2, #0]
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d303      	bcc.n	80067ee <checkAktifCalisma+0x29e>
 80067e6:	4b3e      	ldr	r3, [pc, #248]	; (80068e0 <checkAktifCalisma+0x390>)
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d111      	bne.n	8006812 <checkAktifCalisma+0x2c2>
 80067ee:	4b39      	ldr	r3, [pc, #228]	; (80068d4 <checkAktifCalisma+0x384>)
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	f083 0301 	eor.w	r3, r3, #1
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d10a      	bne.n	8006812 <checkAktifCalisma+0x2c2>
 80067fc:	4b36      	ldr	r3, [pc, #216]	; (80068d8 <checkAktifCalisma+0x388>)
 80067fe:	781b      	ldrb	r3, [r3, #0]
 8006800:	f083 0301 	eor.w	r3, r3, #1
 8006804:	b2db      	uxtb	r3, r3
 8006806:	2b00      	cmp	r3, #0
 8006808:	d103      	bne.n	8006812 <checkAktifCalisma+0x2c2>
 800680a:	4b34      	ldr	r3, [pc, #208]	; (80068dc <checkAktifCalisma+0x38c>)
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d10a      	bne.n	8006828 <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006812:	2200      	movs	r2, #0
 8006814:	2104      	movs	r1, #4
 8006816:	4828      	ldr	r0, [pc, #160]	; (80068b8 <checkAktifCalisma+0x368>)
 8006818:	f003 f8f3 	bl	8009a02 <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 800681c:	4b2a      	ldr	r3, [pc, #168]	; (80068c8 <checkAktifCalisma+0x378>)
 800681e:	2200      	movs	r2, #0
 8006820:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 8006822:	4b2f      	ldr	r3, [pc, #188]	; (80068e0 <checkAktifCalisma+0x390>)
 8006824:	2200      	movs	r2, #0
 8006826:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 8006828:	4b31      	ldr	r3, [pc, #196]	; (80068f0 <checkAktifCalisma+0x3a0>)
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d102      	bne.n	8006836 <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 8006830:	4b30      	ldr	r3, [pc, #192]	; (80068f4 <checkAktifCalisma+0x3a4>)
 8006832:	2201      	movs	r2, #1
 8006834:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8006836:	4b2e      	ldr	r3, [pc, #184]	; (80068f0 <checkAktifCalisma+0x3a0>)
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	2b01      	cmp	r3, #1
 800683c:	d116      	bne.n	800686c <checkAktifCalisma+0x31c>
 800683e:	4b2e      	ldr	r3, [pc, #184]	; (80068f8 <checkAktifCalisma+0x3a8>)
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d112      	bne.n	800686c <checkAktifCalisma+0x31c>
 8006846:	2101      	movs	r1, #1
 8006848:	4821      	ldr	r0, [pc, #132]	; (80068d0 <checkAktifCalisma+0x380>)
 800684a:	f003 f8c3 	bl	80099d4 <HAL_GPIO_ReadPin>
 800684e:	4603      	mov	r3, r0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d10b      	bne.n	800686c <checkAktifCalisma+0x31c>
 8006854:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006858:	4817      	ldr	r0, [pc, #92]	; (80068b8 <checkAktifCalisma+0x368>)
 800685a:	f003 f8bb 	bl	80099d4 <HAL_GPIO_ReadPin>
 800685e:	4603      	mov	r3, r0
 8006860:	2b00      	cmp	r3, #0
 8006862:	d103      	bne.n	800686c <checkAktifCalisma+0x31c>
			cerceveVar=1;
 8006864:	4b23      	ldr	r3, [pc, #140]	; (80068f4 <checkAktifCalisma+0x3a4>)
 8006866:	2201      	movs	r2, #1
 8006868:	701a      	strb	r2, [r3, #0]
 800686a:	e011      	b.n	8006890 <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 800686c:	4b20      	ldr	r3, [pc, #128]	; (80068f0 <checkAktifCalisma+0x3a0>)
 800686e:	781b      	ldrb	r3, [r3, #0]
 8006870:	2b01      	cmp	r3, #1
 8006872:	d10d      	bne.n	8006890 <checkAktifCalisma+0x340>
 8006874:	2101      	movs	r1, #1
 8006876:	4816      	ldr	r0, [pc, #88]	; (80068d0 <checkAktifCalisma+0x380>)
 8006878:	f003 f8ac 	bl	80099d4 <HAL_GPIO_ReadPin>
 800687c:	4603      	mov	r3, r0
 800687e:	2b01      	cmp	r3, #1
 8006880:	d106      	bne.n	8006890 <checkAktifCalisma+0x340>
 8006882:	4b1d      	ldr	r3, [pc, #116]	; (80068f8 <checkAktifCalisma+0x3a8>)
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d102      	bne.n	8006890 <checkAktifCalisma+0x340>
			cerceveVar=0;
 800688a:	4b1a      	ldr	r3, [pc, #104]	; (80068f4 <checkAktifCalisma+0x3a4>)
 800688c:	2200      	movs	r2, #0
 800688e:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 8006890:	4b17      	ldr	r3, [pc, #92]	; (80068f0 <checkAktifCalisma+0x3a0>)
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	2b01      	cmp	r3, #1
 8006896:	d134      	bne.n	8006902 <checkAktifCalisma+0x3b2>
 8006898:	4b17      	ldr	r3, [pc, #92]	; (80068f8 <checkAktifCalisma+0x3a8>)
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	2b01      	cmp	r3, #1
 800689e:	d130      	bne.n	8006902 <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 80068a0:	2101      	movs	r1, #1
 80068a2:	480b      	ldr	r0, [pc, #44]	; (80068d0 <checkAktifCalisma+0x380>)
 80068a4:	f003 f896 	bl	80099d4 <HAL_GPIO_ReadPin>
 80068a8:	4603      	mov	r3, r0
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d126      	bne.n	80068fc <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 80068ae:	4b11      	ldr	r3, [pc, #68]	; (80068f4 <checkAktifCalisma+0x3a4>)
 80068b0:	2201      	movs	r2, #1
 80068b2:	701a      	strb	r2, [r3, #0]
 80068b4:	e025      	b.n	8006902 <checkAktifCalisma+0x3b2>
 80068b6:	bf00      	nop
 80068b8:	40010c00 	.word	0x40010c00
 80068bc:	20000c45 	.word	0x20000c45
 80068c0:	20000c1f 	.word	0x20000c1f
 80068c4:	20000c23 	.word	0x20000c23
 80068c8:	20000c49 	.word	0x20000c49
 80068cc:	20000c4c 	.word	0x20000c4c
 80068d0:	40011000 	.word	0x40011000
 80068d4:	20000c62 	.word	0x20000c62
 80068d8:	20000c63 	.word	0x20000c63
 80068dc:	20000c13 	.word	0x20000c13
 80068e0:	20000c41 	.word	0x20000c41
 80068e4:	20000bb8 	.word	0x20000bb8
 80068e8:	20000bc4 	.word	0x20000bc4
 80068ec:	20000c24 	.word	0x20000c24
 80068f0:	20000c14 	.word	0x20000c14
 80068f4:	20000c67 	.word	0x20000c67
 80068f8:	20000c11 	.word	0x20000c11
			} else {
				cerceveVar=0;
 80068fc:	4b7f      	ldr	r3, [pc, #508]	; (8006afc <checkAktifCalisma+0x5ac>)
 80068fe:	2200      	movs	r2, #0
 8006900:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8006902:	4b7f      	ldr	r3, [pc, #508]	; (8006b00 <checkAktifCalisma+0x5b0>)
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d17c      	bne.n	8006a04 <checkAktifCalisma+0x4b4>
 800690a:	4b7e      	ldr	r3, [pc, #504]	; (8006b04 <checkAktifCalisma+0x5b4>)
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d078      	beq.n	8006a04 <checkAktifCalisma+0x4b4>
 8006912:	4b7d      	ldr	r3, [pc, #500]	; (8006b08 <checkAktifCalisma+0x5b8>)
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d074      	beq.n	8006a04 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 800691a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800691e:	487b      	ldr	r0, [pc, #492]	; (8006b0c <checkAktifCalisma+0x5bc>)
 8006920:	f003 f858 	bl	80099d4 <HAL_GPIO_ReadPin>
 8006924:	4603      	mov	r3, r0
 8006926:	2b00      	cmp	r3, #0
 8006928:	d003      	beq.n	8006932 <checkAktifCalisma+0x3e2>
 800692a:	4b79      	ldr	r3, [pc, #484]	; (8006b10 <checkAktifCalisma+0x5c0>)
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d068      	beq.n	8006a04 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 8006932:	4b72      	ldr	r3, [pc, #456]	; (8006afc <checkAktifCalisma+0x5ac>)
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d064      	beq.n	8006a04 <checkAktifCalisma+0x4b4>
 800693a:	4b76      	ldr	r3, [pc, #472]	; (8006b14 <checkAktifCalisma+0x5c4>)
 800693c:	781b      	ldrb	r3, [r3, #0]
 800693e:	f083 0301 	eor.w	r3, r3, #1
 8006942:	b2db      	uxtb	r3, r3
 8006944:	2b00      	cmp	r3, #0
 8006946:	d05d      	beq.n	8006a04 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8006948:	2104      	movs	r1, #4
 800694a:	4873      	ldr	r0, [pc, #460]	; (8006b18 <checkAktifCalisma+0x5c8>)
 800694c:	f003 f842 	bl	80099d4 <HAL_GPIO_ReadPin>
 8006950:	4603      	mov	r3, r0
 8006952:	2b00      	cmp	r3, #0
 8006954:	d003      	beq.n	800695e <checkAktifCalisma+0x40e>
 8006956:	4b71      	ldr	r3, [pc, #452]	; (8006b1c <checkAktifCalisma+0x5cc>)
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d152      	bne.n	8006a04 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800695e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006962:	486a      	ldr	r0, [pc, #424]	; (8006b0c <checkAktifCalisma+0x5bc>)
 8006964:	f003 f836 	bl	80099d4 <HAL_GPIO_ReadPin>
 8006968:	4603      	mov	r3, r0
 800696a:	2b01      	cmp	r3, #1
 800696c:	d10e      	bne.n	800698c <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 800696e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006972:	4866      	ldr	r0, [pc, #408]	; (8006b0c <checkAktifCalisma+0x5bc>)
 8006974:	f003 f82e 	bl	80099d4 <HAL_GPIO_ReadPin>
 8006978:	4603      	mov	r3, r0
 800697a:	2b01      	cmp	r3, #1
 800697c:	d106      	bne.n	800698c <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 800697e:	2140      	movs	r1, #64	; 0x40
 8006980:	4865      	ldr	r0, [pc, #404]	; (8006b18 <checkAktifCalisma+0x5c8>)
 8006982:	f003 f827 	bl	80099d4 <HAL_GPIO_ReadPin>
 8006986:	4603      	mov	r3, r0
 8006988:	2b01      	cmp	r3, #1
 800698a:	d003      	beq.n	8006994 <checkAktifCalisma+0x444>
 800698c:	4b64      	ldr	r3, [pc, #400]	; (8006b20 <checkAktifCalisma+0x5d0>)
 800698e:	781b      	ldrb	r3, [r3, #0]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d037      	beq.n	8006a04 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 8006994:	4b63      	ldr	r3, [pc, #396]	; (8006b24 <checkAktifCalisma+0x5d4>)
 8006996:	781b      	ldrb	r3, [r3, #0]
 8006998:	f083 0301 	eor.w	r3, r3, #1
 800699c:	b2db      	uxtb	r3, r3
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d030      	beq.n	8006a04 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 80069a2:	4b61      	ldr	r3, [pc, #388]	; (8006b28 <checkAktifCalisma+0x5d8>)
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	f083 0301 	eor.w	r3, r3, #1
 80069aa:	b2db      	uxtb	r3, r3
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d029      	beq.n	8006a04 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 80069b0:	4b5e      	ldr	r3, [pc, #376]	; (8006b2c <checkAktifCalisma+0x5dc>)
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	f083 0301 	eor.w	r3, r3, #1
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d022      	beq.n	8006a04 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 80069be:	4b5c      	ldr	r3, [pc, #368]	; (8006b30 <checkAktifCalisma+0x5e0>)
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	f083 0301 	eor.w	r3, r3, #1
 80069c6:	b2db      	uxtb	r3, r3
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d01b      	beq.n	8006a04 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 80069cc:	4b59      	ldr	r3, [pc, #356]	; (8006b34 <checkAktifCalisma+0x5e4>)
 80069ce:	781b      	ldrb	r3, [r3, #0]
 80069d0:	f083 0301 	eor.w	r3, r3, #1
 80069d4:	b2db      	uxtb	r3, r3
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d014      	beq.n	8006a04 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 80069da:	4b57      	ldr	r3, [pc, #348]	; (8006b38 <checkAktifCalisma+0x5e8>)
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	f083 0301 	eor.w	r3, r3, #1
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d00d      	beq.n	8006a04 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80069e8:	2201      	movs	r2, #1
 80069ea:	2102      	movs	r1, #2
 80069ec:	4847      	ldr	r0, [pc, #284]	; (8006b0c <checkAktifCalisma+0x5bc>)
 80069ee:	f003 f808 	bl	8009a02 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 80069f2:	4b4b      	ldr	r3, [pc, #300]	; (8006b20 <checkAktifCalisma+0x5d0>)
 80069f4:	2201      	movs	r2, #1
 80069f6:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 80069f8:	4b50      	ldr	r3, [pc, #320]	; (8006b3c <checkAktifCalisma+0x5ec>)
 80069fa:	2201      	movs	r2, #1
 80069fc:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 80069fe:	4b50      	ldr	r3, [pc, #320]	; (8006b40 <checkAktifCalisma+0x5f0>)
 8006a00:	2201      	movs	r2, #1
 8006a02:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8006a04:	4b46      	ldr	r3, [pc, #280]	; (8006b20 <checkAktifCalisma+0x5d0>)
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d033      	beq.n	8006a74 <checkAktifCalisma+0x524>
 8006a0c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006a10:	483e      	ldr	r0, [pc, #248]	; (8006b0c <checkAktifCalisma+0x5bc>)
 8006a12:	f002 ffdf 	bl	80099d4 <HAL_GPIO_ReadPin>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d106      	bne.n	8006a2a <checkAktifCalisma+0x4da>
 8006a1c:	4b3c      	ldr	r3, [pc, #240]	; (8006b10 <checkAktifCalisma+0x5c0>)
 8006a1e:	781b      	ldrb	r3, [r3, #0]
 8006a20:	f083 0301 	eor.w	r3, r3, #1
 8006a24:	b2db      	uxtb	r3, r3
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d10a      	bne.n	8006a40 <checkAktifCalisma+0x4f0>
 8006a2a:	2104      	movs	r1, #4
 8006a2c:	483a      	ldr	r0, [pc, #232]	; (8006b18 <checkAktifCalisma+0x5c8>)
 8006a2e:	f002 ffd1 	bl	80099d4 <HAL_GPIO_ReadPin>
 8006a32:	4603      	mov	r3, r0
 8006a34:	2b01      	cmp	r3, #1
 8006a36:	d11d      	bne.n	8006a74 <checkAktifCalisma+0x524>
 8006a38:	4b38      	ldr	r3, [pc, #224]	; (8006b1c <checkAktifCalisma+0x5cc>)
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d019      	beq.n	8006a74 <checkAktifCalisma+0x524>
 8006a40:	4b30      	ldr	r3, [pc, #192]	; (8006b04 <checkAktifCalisma+0x5b4>)
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d015      	beq.n	8006a74 <checkAktifCalisma+0x524>
 8006a48:	4b2f      	ldr	r3, [pc, #188]	; (8006b08 <checkAktifCalisma+0x5b8>)
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d011      	beq.n	8006a74 <checkAktifCalisma+0x524>
 8006a50:	4b2a      	ldr	r3, [pc, #168]	; (8006afc <checkAktifCalisma+0x5ac>)
 8006a52:	781b      	ldrb	r3, [r3, #0]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d00d      	beq.n	8006a74 <checkAktifCalisma+0x524>
 8006a58:	4b3a      	ldr	r3, [pc, #232]	; (8006b44 <checkAktifCalisma+0x5f4>)
 8006a5a:	781b      	ldrb	r3, [r3, #0]
 8006a5c:	f083 0301 	eor.w	r3, r3, #1
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d006      	beq.n	8006a74 <checkAktifCalisma+0x524>
			timer2=millis;
 8006a66:	4b38      	ldr	r3, [pc, #224]	; (8006b48 <checkAktifCalisma+0x5f8>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a38      	ldr	r2, [pc, #224]	; (8006b4c <checkAktifCalisma+0x5fc>)
 8006a6c:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 8006a6e:	4b35      	ldr	r3, [pc, #212]	; (8006b44 <checkAktifCalisma+0x5f4>)
 8006a70:	2201      	movs	r2, #1
 8006a72:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8006a74:	4b34      	ldr	r3, [pc, #208]	; (8006b48 <checkAktifCalisma+0x5f8>)
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	4b34      	ldr	r3, [pc, #208]	; (8006b4c <checkAktifCalisma+0x5fc>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	1ad3      	subs	r3, r2, r3
 8006a7e:	4a34      	ldr	r2, [pc, #208]	; (8006b50 <checkAktifCalisma+0x600>)
 8006a80:	7812      	ldrb	r2, [r2, #0]
 8006a82:	4293      	cmp	r3, r2
 8006a84:	d303      	bcc.n	8006a8e <checkAktifCalisma+0x53e>
 8006a86:	4b2f      	ldr	r3, [pc, #188]	; (8006b44 <checkAktifCalisma+0x5f4>)
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d114      	bne.n	8006ab8 <checkAktifCalisma+0x568>
 8006a8e:	4b1d      	ldr	r3, [pc, #116]	; (8006b04 <checkAktifCalisma+0x5b4>)
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	f083 0301 	eor.w	r3, r3, #1
 8006a96:	b2db      	uxtb	r3, r3
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d10d      	bne.n	8006ab8 <checkAktifCalisma+0x568>
 8006a9c:	4b1a      	ldr	r3, [pc, #104]	; (8006b08 <checkAktifCalisma+0x5b8>)
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	f083 0301 	eor.w	r3, r3, #1
 8006aa4:	b2db      	uxtb	r3, r3
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d106      	bne.n	8006ab8 <checkAktifCalisma+0x568>
 8006aaa:	4b14      	ldr	r3, [pc, #80]	; (8006afc <checkAktifCalisma+0x5ac>)
 8006aac:	781b      	ldrb	r3, [r3, #0]
 8006aae:	f083 0301 	eor.w	r3, r3, #1
 8006ab2:	b2db      	uxtb	r3, r3
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d00a      	beq.n	8006ace <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006ab8:	2200      	movs	r2, #0
 8006aba:	2102      	movs	r1, #2
 8006abc:	4813      	ldr	r0, [pc, #76]	; (8006b0c <checkAktifCalisma+0x5bc>)
 8006abe:	f002 ffa0 	bl	8009a02 <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 8006ac2:	4b17      	ldr	r3, [pc, #92]	; (8006b20 <checkAktifCalisma+0x5d0>)
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 8006ac8:	4b1e      	ldr	r3, [pc, #120]	; (8006b44 <checkAktifCalisma+0x5f4>)
 8006aca:	2200      	movs	r2, #0
 8006acc:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8006ace:	4b14      	ldr	r3, [pc, #80]	; (8006b20 <checkAktifCalisma+0x5d0>)
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d040      	beq.n	8006b58 <checkAktifCalisma+0x608>
 8006ad6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006ada:	480f      	ldr	r0, [pc, #60]	; (8006b18 <checkAktifCalisma+0x5c8>)
 8006adc:	f002 ff7a 	bl	80099d4 <HAL_GPIO_ReadPin>
 8006ae0:	4603      	mov	r3, r0
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d138      	bne.n	8006b58 <checkAktifCalisma+0x608>
 8006ae6:	4b1b      	ldr	r3, [pc, #108]	; (8006b54 <checkAktifCalisma+0x604>)
 8006ae8:	781b      	ldrb	r3, [r3, #0]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d034      	beq.n	8006b58 <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8006aee:	2201      	movs	r2, #1
 8006af0:	2101      	movs	r1, #1
 8006af2:	4806      	ldr	r0, [pc, #24]	; (8006b0c <checkAktifCalisma+0x5bc>)
 8006af4:	f002 ff85 	bl	8009a02 <HAL_GPIO_WritePin>
 8006af8:	e033      	b.n	8006b62 <checkAktifCalisma+0x612>
 8006afa:	bf00      	nop
 8006afc:	20000c67 	.word	0x20000c67
 8006b00:	20000c2d 	.word	0x20000c2d
 8006b04:	20000c62 	.word	0x20000c62
 8006b08:	20000c63 	.word	0x20000c63
 8006b0c:	40010c00 	.word	0x40010c00
 8006b10:	20000c4d 	.word	0x20000c4d
 8006b14:	20000c61 	.word	0x20000c61
 8006b18:	40011000 	.word	0x40011000
 8006b1c:	20000c16 	.word	0x20000c16
 8006b20:	20000c48 	.word	0x20000c48
 8006b24:	20000c45 	.word	0x20000c45
 8006b28:	20000c49 	.word	0x20000c49
 8006b2c:	20000c46 	.word	0x20000c46
 8006b30:	20000c47 	.word	0x20000c47
 8006b34:	20000c4a 	.word	0x20000c4a
 8006b38:	20000c4b 	.word	0x20000c4b
 8006b3c:	20000c50 	.word	0x20000c50
 8006b40:	20000c71 	.word	0x20000c71
 8006b44:	20000c40 	.word	0x20000c40
 8006b48:	20000bb8 	.word	0x20000bb8
 8006b4c:	20000bc4 	.word	0x20000bc4
 8006b50:	20000c25 	.word	0x20000c25
 8006b54:	20000c15 	.word	0x20000c15
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006b58:	2200      	movs	r2, #0
 8006b5a:	2101      	movs	r1, #1
 8006b5c:	4836      	ldr	r0, [pc, #216]	; (8006c38 <checkAktifCalisma+0x6e8>)
 8006b5e:	f002 ff50 	bl	8009a02 <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 8006b62:	4b36      	ldr	r3, [pc, #216]	; (8006c3c <checkAktifCalisma+0x6ec>)
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	f040 8080 	bne.w	8006c6c <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8006b6c:	4b34      	ldr	r3, [pc, #208]	; (8006c40 <checkAktifCalisma+0x6f0>)
 8006b6e:	781b      	ldrb	r3, [r3, #0]
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d003      	beq.n	8006b7c <checkAktifCalisma+0x62c>
 8006b74:	4b32      	ldr	r3, [pc, #200]	; (8006c40 <checkAktifCalisma+0x6f0>)
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	2b02      	cmp	r3, #2
 8006b7a:	d177      	bne.n	8006c6c <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 8006b7c:	4b31      	ldr	r3, [pc, #196]	; (8006c44 <checkAktifCalisma+0x6f4>)
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d073      	beq.n	8006c6c <checkAktifCalisma+0x71c>
 8006b84:	4b30      	ldr	r3, [pc, #192]	; (8006c48 <checkAktifCalisma+0x6f8>)
 8006b86:	781b      	ldrb	r3, [r3, #0]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d06f      	beq.n	8006c6c <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8006b8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006b90:	4829      	ldr	r0, [pc, #164]	; (8006c38 <checkAktifCalisma+0x6e8>)
 8006b92:	f002 ff1f 	bl	80099d4 <HAL_GPIO_ReadPin>
 8006b96:	4603      	mov	r3, r0
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d167      	bne.n	8006c6c <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8006b9c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006ba0:	482a      	ldr	r0, [pc, #168]	; (8006c4c <checkAktifCalisma+0x6fc>)
 8006ba2:	f002 ff17 	bl	80099d4 <HAL_GPIO_ReadPin>
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d003      	beq.n	8006bb4 <checkAktifCalisma+0x664>
 8006bac:	4b28      	ldr	r3, [pc, #160]	; (8006c50 <checkAktifCalisma+0x700>)
 8006bae:	781b      	ldrb	r3, [r3, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d15b      	bne.n	8006c6c <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8006bb4:	2140      	movs	r1, #64	; 0x40
 8006bb6:	4825      	ldr	r0, [pc, #148]	; (8006c4c <checkAktifCalisma+0x6fc>)
 8006bb8:	f002 ff0c 	bl	80099d4 <HAL_GPIO_ReadPin>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d10f      	bne.n	8006be2 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8006bc2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006bc6:	481c      	ldr	r0, [pc, #112]	; (8006c38 <checkAktifCalisma+0x6e8>)
 8006bc8:	f002 ff04 	bl	80099d4 <HAL_GPIO_ReadPin>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b01      	cmp	r3, #1
 8006bd0:	d107      	bne.n	8006be2 <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8006bd2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006bd6:	4818      	ldr	r0, [pc, #96]	; (8006c38 <checkAktifCalisma+0x6e8>)
 8006bd8:	f002 fefc 	bl	80099d4 <HAL_GPIO_ReadPin>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	2b01      	cmp	r3, #1
 8006be0:	d003      	beq.n	8006bea <checkAktifCalisma+0x69a>
 8006be2:	4b1c      	ldr	r3, [pc, #112]	; (8006c54 <checkAktifCalisma+0x704>)
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d040      	beq.n	8006c6c <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 8006bea:	4b1b      	ldr	r3, [pc, #108]	; (8006c58 <checkAktifCalisma+0x708>)
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	f083 0301 	eor.w	r3, r3, #1
 8006bf2:	b2db      	uxtb	r3, r3
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d039      	beq.n	8006c6c <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 8006bf8:	4b18      	ldr	r3, [pc, #96]	; (8006c5c <checkAktifCalisma+0x70c>)
 8006bfa:	781b      	ldrb	r3, [r3, #0]
 8006bfc:	f083 0301 	eor.w	r3, r3, #1
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d032      	beq.n	8006c6c <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 8006c06:	4b16      	ldr	r3, [pc, #88]	; (8006c60 <checkAktifCalisma+0x710>)
 8006c08:	781b      	ldrb	r3, [r3, #0]
 8006c0a:	f083 0301 	eor.w	r3, r3, #1
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d02b      	beq.n	8006c6c <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 8006c14:	4b13      	ldr	r3, [pc, #76]	; (8006c64 <checkAktifCalisma+0x714>)
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	f083 0301 	eor.w	r3, r3, #1
 8006c1c:	b2db      	uxtb	r3, r3
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d024      	beq.n	8006c6c <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 8006c22:	4b11      	ldr	r3, [pc, #68]	; (8006c68 <checkAktifCalisma+0x718>)
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	f083 0301 	eor.w	r3, r3, #1
 8006c2a:	b2db      	uxtb	r3, r3
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d01d      	beq.n	8006c6c <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 8006c30:	4b08      	ldr	r3, [pc, #32]	; (8006c54 <checkAktifCalisma+0x704>)
 8006c32:	2201      	movs	r2, #1
 8006c34:	701a      	strb	r2, [r3, #0]
 8006c36:	e01c      	b.n	8006c72 <checkAktifCalisma+0x722>
 8006c38:	40010c00 	.word	0x40010c00
 8006c3c:	20000c2d 	.word	0x20000c2d
 8006c40:	20000c1f 	.word	0x20000c1f
 8006c44:	20000c62 	.word	0x20000c62
 8006c48:	20000c63 	.word	0x20000c63
 8006c4c:	40011000 	.word	0x40011000
 8006c50:	20000c20 	.word	0x20000c20
 8006c54:	20000c46 	.word	0x20000c46
 8006c58:	20000c45 	.word	0x20000c45
 8006c5c:	20000c49 	.word	0x20000c49
 8006c60:	20000c48 	.word	0x20000c48
 8006c64:	20000c47 	.word	0x20000c47
 8006c68:	20000c4b 	.word	0x20000c4b
		} else {
			devmotoryukaricalisiyor=0;
 8006c6c:	4b64      	ldr	r3, [pc, #400]	; (8006e00 <checkAktifCalisma+0x8b0>)
 8006c6e:	2200      	movs	r2, #0
 8006c70:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 8006c72:	4b63      	ldr	r3, [pc, #396]	; (8006e00 <checkAktifCalisma+0x8b0>)
 8006c74:	781b      	ldrb	r3, [r3, #0]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d007      	beq.n	8006c8a <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8006c7a:	2201      	movs	r2, #1
 8006c7c:	2120      	movs	r1, #32
 8006c7e:	4861      	ldr	r0, [pc, #388]	; (8006e04 <checkAktifCalisma+0x8b4>)
 8006c80:	f002 febf 	bl	8009a02 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 8006c84:	4b60      	ldr	r3, [pc, #384]	; (8006e08 <checkAktifCalisma+0x8b8>)
 8006c86:	2201      	movs	r2, #1
 8006c88:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8006c8a:	4b5f      	ldr	r3, [pc, #380]	; (8006e08 <checkAktifCalisma+0x8b8>)
 8006c8c:	781b      	ldrb	r3, [r3, #0]
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d025      	beq.n	8006cde <checkAktifCalisma+0x78e>
 8006c92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006c96:	485d      	ldr	r0, [pc, #372]	; (8006e0c <checkAktifCalisma+0x8bc>)
 8006c98:	f002 fe9c 	bl	80099d4 <HAL_GPIO_ReadPin>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	2b01      	cmp	r3, #1
 8006ca0:	d007      	beq.n	8006cb2 <checkAktifCalisma+0x762>
 8006ca2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006ca6:	4857      	ldr	r0, [pc, #348]	; (8006e04 <checkAktifCalisma+0x8b4>)
 8006ca8:	f002 fe94 	bl	80099d4 <HAL_GPIO_ReadPin>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d115      	bne.n	8006cde <checkAktifCalisma+0x78e>
 8006cb2:	4b57      	ldr	r3, [pc, #348]	; (8006e10 <checkAktifCalisma+0x8c0>)
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d011      	beq.n	8006cde <checkAktifCalisma+0x78e>
 8006cba:	4b56      	ldr	r3, [pc, #344]	; (8006e14 <checkAktifCalisma+0x8c4>)
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00d      	beq.n	8006cde <checkAktifCalisma+0x78e>
 8006cc2:	4b55      	ldr	r3, [pc, #340]	; (8006e18 <checkAktifCalisma+0x8c8>)
 8006cc4:	781b      	ldrb	r3, [r3, #0]
 8006cc6:	f083 0301 	eor.w	r3, r3, #1
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d006      	beq.n	8006cde <checkAktifCalisma+0x78e>
			timer2=millis;
 8006cd0:	4b52      	ldr	r3, [pc, #328]	; (8006e1c <checkAktifCalisma+0x8cc>)
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a52      	ldr	r2, [pc, #328]	; (8006e20 <checkAktifCalisma+0x8d0>)
 8006cd6:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 8006cd8:	4b4f      	ldr	r3, [pc, #316]	; (8006e18 <checkAktifCalisma+0x8c8>)
 8006cda:	2201      	movs	r2, #1
 8006cdc:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8006cde:	4b4f      	ldr	r3, [pc, #316]	; (8006e1c <checkAktifCalisma+0x8cc>)
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	4b4f      	ldr	r3, [pc, #316]	; (8006e20 <checkAktifCalisma+0x8d0>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	1ad3      	subs	r3, r2, r3
 8006ce8:	4a4e      	ldr	r2, [pc, #312]	; (8006e24 <checkAktifCalisma+0x8d4>)
 8006cea:	7812      	ldrb	r2, [r2, #0]
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d303      	bcc.n	8006cf8 <checkAktifCalisma+0x7a8>
 8006cf0:	4b49      	ldr	r3, [pc, #292]	; (8006e18 <checkAktifCalisma+0x8c8>)
 8006cf2:	781b      	ldrb	r3, [r3, #0]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d10d      	bne.n	8006d14 <checkAktifCalisma+0x7c4>
 8006cf8:	4b45      	ldr	r3, [pc, #276]	; (8006e10 <checkAktifCalisma+0x8c0>)
 8006cfa:	781b      	ldrb	r3, [r3, #0]
 8006cfc:	f083 0301 	eor.w	r3, r3, #1
 8006d00:	b2db      	uxtb	r3, r3
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d106      	bne.n	8006d14 <checkAktifCalisma+0x7c4>
 8006d06:	4b43      	ldr	r3, [pc, #268]	; (8006e14 <checkAktifCalisma+0x8c4>)
 8006d08:	781b      	ldrb	r3, [r3, #0]
 8006d0a:	f083 0301 	eor.w	r3, r3, #1
 8006d0e:	b2db      	uxtb	r3, r3
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d00a      	beq.n	8006d2a <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006d14:	2200      	movs	r2, #0
 8006d16:	2120      	movs	r1, #32
 8006d18:	483a      	ldr	r0, [pc, #232]	; (8006e04 <checkAktifCalisma+0x8b4>)
 8006d1a:	f002 fe72 	bl	8009a02 <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 8006d1e:	4b3a      	ldr	r3, [pc, #232]	; (8006e08 <checkAktifCalisma+0x8b8>)
 8006d20:	2200      	movs	r2, #0
 8006d22:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 8006d24:	4b3c      	ldr	r3, [pc, #240]	; (8006e18 <checkAktifCalisma+0x8c8>)
 8006d26:	2200      	movs	r2, #0
 8006d28:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 8006d2a:	4b3f      	ldr	r3, [pc, #252]	; (8006e28 <checkAktifCalisma+0x8d8>)
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	f040 8088 	bne.w	8006e44 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8006d34:	4b3d      	ldr	r3, [pc, #244]	; (8006e2c <checkAktifCalisma+0x8dc>)
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	2b01      	cmp	r3, #1
 8006d3a:	d003      	beq.n	8006d44 <checkAktifCalisma+0x7f4>
 8006d3c:	4b3b      	ldr	r3, [pc, #236]	; (8006e2c <checkAktifCalisma+0x8dc>)
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	2b02      	cmp	r3, #2
 8006d42:	d17f      	bne.n	8006e44 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 8006d44:	4b32      	ldr	r3, [pc, #200]	; (8006e10 <checkAktifCalisma+0x8c0>)
 8006d46:	781b      	ldrb	r3, [r3, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d07b      	beq.n	8006e44 <checkAktifCalisma+0x8f4>
 8006d4c:	4b31      	ldr	r3, [pc, #196]	; (8006e14 <checkAktifCalisma+0x8c4>)
 8006d4e:	781b      	ldrb	r3, [r3, #0]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d077      	beq.n	8006e44 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8006d54:	2140      	movs	r1, #64	; 0x40
 8006d56:	482b      	ldr	r0, [pc, #172]	; (8006e04 <checkAktifCalisma+0x8b4>)
 8006d58:	f002 fe3c 	bl	80099d4 <HAL_GPIO_ReadPin>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d170      	bne.n	8006e44 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8006d62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006d66:	4827      	ldr	r0, [pc, #156]	; (8006e04 <checkAktifCalisma+0x8b4>)
 8006d68:	f002 fe34 	bl	80099d4 <HAL_GPIO_ReadPin>
 8006d6c:	4603      	mov	r3, r0
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d003      	beq.n	8006d7a <checkAktifCalisma+0x82a>
 8006d72:	4b2f      	ldr	r3, [pc, #188]	; (8006e30 <checkAktifCalisma+0x8e0>)
 8006d74:	781b      	ldrb	r3, [r3, #0]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d164      	bne.n	8006e44 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8006d7a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006d7e:	4823      	ldr	r0, [pc, #140]	; (8006e0c <checkAktifCalisma+0x8bc>)
 8006d80:	f002 fe28 	bl	80099d4 <HAL_GPIO_ReadPin>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b01      	cmp	r3, #1
 8006d88:	d10f      	bne.n	8006daa <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8006d8a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006d8e:	481f      	ldr	r0, [pc, #124]	; (8006e0c <checkAktifCalisma+0x8bc>)
 8006d90:	f002 fe20 	bl	80099d4 <HAL_GPIO_ReadPin>
 8006d94:	4603      	mov	r3, r0
 8006d96:	2b01      	cmp	r3, #1
 8006d98:	d107      	bne.n	8006daa <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8006d9a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006d9e:	481b      	ldr	r0, [pc, #108]	; (8006e0c <checkAktifCalisma+0x8bc>)
 8006da0:	f002 fe18 	bl	80099d4 <HAL_GPIO_ReadPin>
 8006da4:	4603      	mov	r3, r0
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d003      	beq.n	8006db2 <checkAktifCalisma+0x862>
 8006daa:	4b22      	ldr	r3, [pc, #136]	; (8006e34 <checkAktifCalisma+0x8e4>)
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d048      	beq.n	8006e44 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 8006db2:	4b21      	ldr	r3, [pc, #132]	; (8006e38 <checkAktifCalisma+0x8e8>)
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	f083 0301 	eor.w	r3, r3, #1
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d041      	beq.n	8006e44 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 8006dc0:	4b1e      	ldr	r3, [pc, #120]	; (8006e3c <checkAktifCalisma+0x8ec>)
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	f083 0301 	eor.w	r3, r3, #1
 8006dc8:	b2db      	uxtb	r3, r3
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d03a      	beq.n	8006e44 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 8006dce:	4b1c      	ldr	r3, [pc, #112]	; (8006e40 <checkAktifCalisma+0x8f0>)
 8006dd0:	781b      	ldrb	r3, [r3, #0]
 8006dd2:	f083 0301 	eor.w	r3, r3, #1
 8006dd6:	b2db      	uxtb	r3, r3
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d033      	beq.n	8006e44 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 8006ddc:	4b0a      	ldr	r3, [pc, #40]	; (8006e08 <checkAktifCalisma+0x8b8>)
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	f083 0301 	eor.w	r3, r3, #1
 8006de4:	b2db      	uxtb	r3, r3
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d02c      	beq.n	8006e44 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 8006dea:	4b05      	ldr	r3, [pc, #20]	; (8006e00 <checkAktifCalisma+0x8b0>)
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	f083 0301 	eor.w	r3, r3, #1
 8006df2:	b2db      	uxtb	r3, r3
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d025      	beq.n	8006e44 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 8006df8:	4b0e      	ldr	r3, [pc, #56]	; (8006e34 <checkAktifCalisma+0x8e4>)
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	701a      	strb	r2, [r3, #0]
 8006dfe:	e024      	b.n	8006e4a <checkAktifCalisma+0x8fa>
 8006e00:	20000c46 	.word	0x20000c46
 8006e04:	40011000 	.word	0x40011000
 8006e08:	20000c4a 	.word	0x20000c4a
 8006e0c:	40010c00 	.word	0x40010c00
 8006e10:	20000c62 	.word	0x20000c62
 8006e14:	20000c63 	.word	0x20000c63
 8006e18:	20000c42 	.word	0x20000c42
 8006e1c:	20000bb8 	.word	0x20000bb8
 8006e20:	20000bc4 	.word	0x20000bc4
 8006e24:	20000c26 	.word	0x20000c26
 8006e28:	20000c2d 	.word	0x20000c2d
 8006e2c:	20000c1f 	.word	0x20000c1f
 8006e30:	20000c21 	.word	0x20000c21
 8006e34:	20000c47 	.word	0x20000c47
 8006e38:	20000c45 	.word	0x20000c45
 8006e3c:	20000c49 	.word	0x20000c49
 8006e40:	20000c48 	.word	0x20000c48
		} else {
			devmotorasagicalisiyor=0;
 8006e44:	4b96      	ldr	r3, [pc, #600]	; (80070a0 <checkAktifCalisma+0xb50>)
 8006e46:	2200      	movs	r2, #0
 8006e48:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 8006e4a:	4b95      	ldr	r3, [pc, #596]	; (80070a0 <checkAktifCalisma+0xb50>)
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d007      	beq.n	8006e62 <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8006e52:	2201      	movs	r2, #1
 8006e54:	2110      	movs	r1, #16
 8006e56:	4893      	ldr	r0, [pc, #588]	; (80070a4 <checkAktifCalisma+0xb54>)
 8006e58:	f002 fdd3 	bl	8009a02 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 8006e5c:	4b92      	ldr	r3, [pc, #584]	; (80070a8 <checkAktifCalisma+0xb58>)
 8006e5e:	2201      	movs	r2, #1
 8006e60:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8006e62:	4b91      	ldr	r3, [pc, #580]	; (80070a8 <checkAktifCalisma+0xb58>)
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d024      	beq.n	8006eb4 <checkAktifCalisma+0x964>
 8006e6a:	2140      	movs	r1, #64	; 0x40
 8006e6c:	488d      	ldr	r0, [pc, #564]	; (80070a4 <checkAktifCalisma+0xb54>)
 8006e6e:	f002 fdb1 	bl	80099d4 <HAL_GPIO_ReadPin>
 8006e72:	4603      	mov	r3, r0
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d007      	beq.n	8006e88 <checkAktifCalisma+0x938>
 8006e78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006e7c:	4889      	ldr	r0, [pc, #548]	; (80070a4 <checkAktifCalisma+0xb54>)
 8006e7e:	f002 fda9 	bl	80099d4 <HAL_GPIO_ReadPin>
 8006e82:	4603      	mov	r3, r0
 8006e84:	2b01      	cmp	r3, #1
 8006e86:	d115      	bne.n	8006eb4 <checkAktifCalisma+0x964>
 8006e88:	4b88      	ldr	r3, [pc, #544]	; (80070ac <checkAktifCalisma+0xb5c>)
 8006e8a:	781b      	ldrb	r3, [r3, #0]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d011      	beq.n	8006eb4 <checkAktifCalisma+0x964>
 8006e90:	4b87      	ldr	r3, [pc, #540]	; (80070b0 <checkAktifCalisma+0xb60>)
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d00d      	beq.n	8006eb4 <checkAktifCalisma+0x964>
 8006e98:	4b86      	ldr	r3, [pc, #536]	; (80070b4 <checkAktifCalisma+0xb64>)
 8006e9a:	781b      	ldrb	r3, [r3, #0]
 8006e9c:	f083 0301 	eor.w	r3, r3, #1
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d006      	beq.n	8006eb4 <checkAktifCalisma+0x964>
			timer2=millis;
 8006ea6:	4b84      	ldr	r3, [pc, #528]	; (80070b8 <checkAktifCalisma+0xb68>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	4a84      	ldr	r2, [pc, #528]	; (80070bc <checkAktifCalisma+0xb6c>)
 8006eac:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 8006eae:	4b81      	ldr	r3, [pc, #516]	; (80070b4 <checkAktifCalisma+0xb64>)
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8006eb4:	4b80      	ldr	r3, [pc, #512]	; (80070b8 <checkAktifCalisma+0xb68>)
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	4b80      	ldr	r3, [pc, #512]	; (80070bc <checkAktifCalisma+0xb6c>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	1ad3      	subs	r3, r2, r3
 8006ebe:	4a80      	ldr	r2, [pc, #512]	; (80070c0 <checkAktifCalisma+0xb70>)
 8006ec0:	7812      	ldrb	r2, [r2, #0]
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d303      	bcc.n	8006ece <checkAktifCalisma+0x97e>
 8006ec6:	4b7b      	ldr	r3, [pc, #492]	; (80070b4 <checkAktifCalisma+0xb64>)
 8006ec8:	781b      	ldrb	r3, [r3, #0]
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d10d      	bne.n	8006eea <checkAktifCalisma+0x99a>
 8006ece:	4b77      	ldr	r3, [pc, #476]	; (80070ac <checkAktifCalisma+0xb5c>)
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	f083 0301 	eor.w	r3, r3, #1
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d106      	bne.n	8006eea <checkAktifCalisma+0x99a>
 8006edc:	4b74      	ldr	r3, [pc, #464]	; (80070b0 <checkAktifCalisma+0xb60>)
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	f083 0301 	eor.w	r3, r3, #1
 8006ee4:	b2db      	uxtb	r3, r3
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d00a      	beq.n	8006f00 <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006eea:	2200      	movs	r2, #0
 8006eec:	2110      	movs	r1, #16
 8006eee:	486d      	ldr	r0, [pc, #436]	; (80070a4 <checkAktifCalisma+0xb54>)
 8006ef0:	f002 fd87 	bl	8009a02 <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 8006ef4:	4b6c      	ldr	r3, [pc, #432]	; (80070a8 <checkAktifCalisma+0xb58>)
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 8006efa:	4b6e      	ldr	r3, [pc, #440]	; (80070b4 <checkAktifCalisma+0xb64>)
 8006efc:	2200      	movs	r2, #0
 8006efe:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8006f00:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006f04:	486f      	ldr	r0, [pc, #444]	; (80070c4 <checkAktifCalisma+0xb74>)
 8006f06:	f002 fd65 	bl	80099d4 <HAL_GPIO_ReadPin>
 8006f0a:	4603      	mov	r3, r0
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d120      	bne.n	8006f52 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8006f10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006f14:	486b      	ldr	r0, [pc, #428]	; (80070c4 <checkAktifCalisma+0xb74>)
 8006f16:	f002 fd5d 	bl	80099d4 <HAL_GPIO_ReadPin>
 8006f1a:	4603      	mov	r3, r0
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d118      	bne.n	8006f52 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8006f20:	2104      	movs	r1, #4
 8006f22:	4868      	ldr	r0, [pc, #416]	; (80070c4 <checkAktifCalisma+0xb74>)
 8006f24:	f002 fd56 	bl	80099d4 <HAL_GPIO_ReadPin>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d111      	bne.n	8006f52 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8006f2e:	2102      	movs	r1, #2
 8006f30:	4864      	ldr	r0, [pc, #400]	; (80070c4 <checkAktifCalisma+0xb74>)
 8006f32:	f002 fd4f 	bl	80099d4 <HAL_GPIO_ReadPin>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d10a      	bne.n	8006f52 <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8006f3c:	2101      	movs	r1, #1
 8006f3e:	4861      	ldr	r0, [pc, #388]	; (80070c4 <checkAktifCalisma+0xb74>)
 8006f40:	f002 fd48 	bl	80099d4 <HAL_GPIO_ReadPin>
 8006f44:	4603      	mov	r3, r0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d103      	bne.n	8006f52 <checkAktifCalisma+0xa02>
			makineStop=1;
 8006f4a:	4b5f      	ldr	r3, [pc, #380]	; (80070c8 <checkAktifCalisma+0xb78>)
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	701a      	strb	r2, [r3, #0]
 8006f50:	e002      	b.n	8006f58 <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 8006f52:	4b5d      	ldr	r3, [pc, #372]	; (80070c8 <checkAktifCalisma+0xb78>)
 8006f54:	2200      	movs	r2, #0
 8006f56:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006f58:	4b5c      	ldr	r3, [pc, #368]	; (80070cc <checkAktifCalisma+0xb7c>)
 8006f5a:	781b      	ldrb	r3, [r3, #0]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d144      	bne.n	8006fea <checkAktifCalisma+0xa9a>
 8006f60:	4b5b      	ldr	r3, [pc, #364]	; (80070d0 <checkAktifCalisma+0xb80>)
 8006f62:	781b      	ldrb	r3, [r3, #0]
 8006f64:	2b01      	cmp	r3, #1
 8006f66:	d003      	beq.n	8006f70 <checkAktifCalisma+0xa20>
 8006f68:	4b59      	ldr	r3, [pc, #356]	; (80070d0 <checkAktifCalisma+0xb80>)
 8006f6a:	781b      	ldrb	r3, [r3, #0]
 8006f6c:	2b03      	cmp	r3, #3
 8006f6e:	d13c      	bne.n	8006fea <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8006f70:	2180      	movs	r1, #128	; 0x80
 8006f72:	484c      	ldr	r0, [pc, #304]	; (80070a4 <checkAktifCalisma+0xb54>)
 8006f74:	f002 fd2e 	bl	80099d4 <HAL_GPIO_ReadPin>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d103      	bne.n	8006f86 <checkAktifCalisma+0xa36>
 8006f7e:	4b55      	ldr	r3, [pc, #340]	; (80070d4 <checkAktifCalisma+0xb84>)
 8006f80:	781b      	ldrb	r3, [r3, #0]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d00b      	beq.n	8006f9e <checkAktifCalisma+0xa4e>
 8006f86:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006f8a:	484e      	ldr	r0, [pc, #312]	; (80070c4 <checkAktifCalisma+0xb74>)
 8006f8c:	f002 fd22 	bl	80099d4 <HAL_GPIO_ReadPin>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d129      	bne.n	8006fea <checkAktifCalisma+0xa9a>
 8006f96:	4b4f      	ldr	r3, [pc, #316]	; (80070d4 <checkAktifCalisma+0xb84>)
 8006f98:	781b      	ldrb	r3, [r3, #0]
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d125      	bne.n	8006fea <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8006f9e:	2104      	movs	r1, #4
 8006fa0:	4840      	ldr	r0, [pc, #256]	; (80070a4 <checkAktifCalisma+0xb54>)
 8006fa2:	f002 fd17 	bl	80099d4 <HAL_GPIO_ReadPin>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d003      	beq.n	8006fb4 <checkAktifCalisma+0xa64>
 8006fac:	4b4a      	ldr	r3, [pc, #296]	; (80070d8 <checkAktifCalisma+0xb88>)
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d11a      	bne.n	8006fea <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006fb4:	2102      	movs	r1, #2
 8006fb6:	483b      	ldr	r0, [pc, #236]	; (80070a4 <checkAktifCalisma+0xb54>)
 8006fb8:	f002 fd0c 	bl	80099d4 <HAL_GPIO_ReadPin>
 8006fbc:	4603      	mov	r3, r0
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d113      	bne.n	8006fea <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 8006fc2:	4b46      	ldr	r3, [pc, #280]	; (80070dc <checkAktifCalisma+0xb8c>)
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	f083 0301 	eor.w	r3, r3, #1
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d00c      	beq.n	8006fea <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 8006fd0:	4b3d      	ldr	r3, [pc, #244]	; (80070c8 <checkAktifCalisma+0xb78>)
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d008      	beq.n	8006fea <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 8006fd8:	4b41      	ldr	r3, [pc, #260]	; (80070e0 <checkAktifCalisma+0xb90>)
 8006fda:	2201      	movs	r2, #1
 8006fdc:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8006fde:	4b36      	ldr	r3, [pc, #216]	; (80070b8 <checkAktifCalisma+0xb68>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a40      	ldr	r2, [pc, #256]	; (80070e4 <checkAktifCalisma+0xb94>)
 8006fe4:	6013      	str	r3, [r2, #0]
			bekle();
 8006fe6:	f7ff f87d 	bl	80060e4 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8006fea:	4b33      	ldr	r3, [pc, #204]	; (80070b8 <checkAktifCalisma+0xb68>)
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	4b3d      	ldr	r3, [pc, #244]	; (80070e4 <checkAktifCalisma+0xb94>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	1ad3      	subs	r3, r2, r3
 8006ff4:	4a3c      	ldr	r2, [pc, #240]	; (80070e8 <checkAktifCalisma+0xb98>)
 8006ff6:	7812      	ldrb	r2, [r2, #0]
 8006ff8:	4293      	cmp	r3, r2
 8006ffa:	d211      	bcs.n	8007020 <checkAktifCalisma+0xad0>
 8006ffc:	2104      	movs	r1, #4
 8006ffe:	4829      	ldr	r0, [pc, #164]	; (80070a4 <checkAktifCalisma+0xb54>)
 8007000:	f002 fce8 	bl	80099d4 <HAL_GPIO_ReadPin>
 8007004:	4603      	mov	r3, r0
 8007006:	2b00      	cmp	r3, #0
 8007008:	d00a      	beq.n	8007020 <checkAktifCalisma+0xad0>
 800700a:	4b33      	ldr	r3, [pc, #204]	; (80070d8 <checkAktifCalisma+0xb88>)
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d006      	beq.n	8007020 <checkAktifCalisma+0xad0>
 8007012:	4b2d      	ldr	r3, [pc, #180]	; (80070c8 <checkAktifCalisma+0xb78>)
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	f083 0301 	eor.w	r3, r3, #1
 800701a:	b2db      	uxtb	r3, r3
 800701c:	2b00      	cmp	r3, #0
 800701e:	d002      	beq.n	8007026 <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 8007020:	4b2f      	ldr	r3, [pc, #188]	; (80070e0 <checkAktifCalisma+0xb90>)
 8007022:	2200      	movs	r2, #0
 8007024:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8007026:	4b29      	ldr	r3, [pc, #164]	; (80070cc <checkAktifCalisma+0xb7c>)
 8007028:	781b      	ldrb	r3, [r3, #0]
 800702a:	2b01      	cmp	r3, #1
 800702c:	d160      	bne.n	80070f0 <checkAktifCalisma+0xba0>
 800702e:	4b28      	ldr	r3, [pc, #160]	; (80070d0 <checkAktifCalisma+0xb80>)
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	2b01      	cmp	r3, #1
 8007034:	d003      	beq.n	800703e <checkAktifCalisma+0xaee>
 8007036:	4b26      	ldr	r3, [pc, #152]	; (80070d0 <checkAktifCalisma+0xb80>)
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	2b03      	cmp	r3, #3
 800703c:	d158      	bne.n	80070f0 <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800703e:	2104      	movs	r1, #4
 8007040:	4818      	ldr	r0, [pc, #96]	; (80070a4 <checkAktifCalisma+0xb54>)
 8007042:	f002 fcc7 	bl	80099d4 <HAL_GPIO_ReadPin>
 8007046:	4603      	mov	r3, r0
 8007048:	2b01      	cmp	r3, #1
 800704a:	d003      	beq.n	8007054 <checkAktifCalisma+0xb04>
 800704c:	4b22      	ldr	r3, [pc, #136]	; (80070d8 <checkAktifCalisma+0xb88>)
 800704e:	781b      	ldrb	r3, [r3, #0]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d14d      	bne.n	80070f0 <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8007054:	2102      	movs	r1, #2
 8007056:	4813      	ldr	r0, [pc, #76]	; (80070a4 <checkAktifCalisma+0xb54>)
 8007058:	f002 fcbc 	bl	80099d4 <HAL_GPIO_ReadPin>
 800705c:	4603      	mov	r3, r0
 800705e:	2b00      	cmp	r3, #0
 8007060:	d146      	bne.n	80070f0 <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8007062:	2180      	movs	r1, #128	; 0x80
 8007064:	480f      	ldr	r0, [pc, #60]	; (80070a4 <checkAktifCalisma+0xb54>)
 8007066:	f002 fcb5 	bl	80099d4 <HAL_GPIO_ReadPin>
 800706a:	4603      	mov	r3, r0
 800706c:	2b00      	cmp	r3, #0
 800706e:	d103      	bne.n	8007078 <checkAktifCalisma+0xb28>
 8007070:	4b18      	ldr	r3, [pc, #96]	; (80070d4 <checkAktifCalisma+0xb84>)
 8007072:	781b      	ldrb	r3, [r3, #0]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d00b      	beq.n	8007090 <checkAktifCalisma+0xb40>
 8007078:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800707c:	4811      	ldr	r0, [pc, #68]	; (80070c4 <checkAktifCalisma+0xb74>)
 800707e:	f002 fca9 	bl	80099d4 <HAL_GPIO_ReadPin>
 8007082:	4603      	mov	r3, r0
 8007084:	2b00      	cmp	r3, #0
 8007086:	d133      	bne.n	80070f0 <checkAktifCalisma+0xba0>
 8007088:	4b12      	ldr	r3, [pc, #72]	; (80070d4 <checkAktifCalisma+0xb84>)
 800708a:	781b      	ldrb	r3, [r3, #0]
 800708c:	2b01      	cmp	r3, #1
 800708e:	d12f      	bne.n	80070f0 <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 8007090:	4b0d      	ldr	r3, [pc, #52]	; (80070c8 <checkAktifCalisma+0xb78>)
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d02b      	beq.n	80070f0 <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 8007098:	4b14      	ldr	r3, [pc, #80]	; (80070ec <checkAktifCalisma+0xb9c>)
 800709a:	2201      	movs	r2, #1
 800709c:	701a      	strb	r2, [r3, #0]
 800709e:	e02a      	b.n	80070f6 <checkAktifCalisma+0xba6>
 80070a0:	20000c47 	.word	0x20000c47
 80070a4:	40011000 	.word	0x40011000
 80070a8:	20000c4b 	.word	0x20000c4b
 80070ac:	20000c62 	.word	0x20000c62
 80070b0:	20000c63 	.word	0x20000c63
 80070b4:	20000c43 	.word	0x20000c43
 80070b8:	20000bb8 	.word	0x20000bb8
 80070bc:	20000bc4 	.word	0x20000bc4
 80070c0:	20000c26 	.word	0x20000c26
 80070c4:	40010c00 	.word	0x40010c00
 80070c8:	20000c52 	.word	0x20000c52
 80070cc:	20000c19 	.word	0x20000c19
 80070d0:	20000c18 	.word	0x20000c18
 80070d4:	20000c1c 	.word	0x20000c1c
 80070d8:	20000c16 	.word	0x20000c16
 80070dc:	20000c3f 	.word	0x20000c3f
 80070e0:	20000c53 	.word	0x20000c53
 80070e4:	20000bbc 	.word	0x20000bbc
 80070e8:	20000c29 	.word	0x20000c29
 80070ec:	20000c54 	.word	0x20000c54
		} else {
			kapi1butonkontrol=0;
 80070f0:	4b8b      	ldr	r3, [pc, #556]	; (8007320 <checkAktifCalisma+0xdd0>)
 80070f2:	2200      	movs	r2, #0
 80070f4:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80070f6:	4b8b      	ldr	r3, [pc, #556]	; (8007324 <checkAktifCalisma+0xdd4>)
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	2b02      	cmp	r3, #2
 80070fc:	d121      	bne.n	8007142 <checkAktifCalisma+0xbf2>
 80070fe:	4b8a      	ldr	r3, [pc, #552]	; (8007328 <checkAktifCalisma+0xdd8>)
 8007100:	781b      	ldrb	r3, [r3, #0]
 8007102:	2b01      	cmp	r3, #1
 8007104:	d003      	beq.n	800710e <checkAktifCalisma+0xbbe>
 8007106:	4b88      	ldr	r3, [pc, #544]	; (8007328 <checkAktifCalisma+0xdd8>)
 8007108:	781b      	ldrb	r3, [r3, #0]
 800710a:	2b03      	cmp	r3, #3
 800710c:	d119      	bne.n	8007142 <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800710e:	2104      	movs	r1, #4
 8007110:	4886      	ldr	r0, [pc, #536]	; (800732c <checkAktifCalisma+0xddc>)
 8007112:	f002 fc5f 	bl	80099d4 <HAL_GPIO_ReadPin>
 8007116:	4603      	mov	r3, r0
 8007118:	2b01      	cmp	r3, #1
 800711a:	d003      	beq.n	8007124 <checkAktifCalisma+0xbd4>
 800711c:	4b84      	ldr	r3, [pc, #528]	; (8007330 <checkAktifCalisma+0xde0>)
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d10e      	bne.n	8007142 <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8007124:	2102      	movs	r1, #2
 8007126:	4881      	ldr	r0, [pc, #516]	; (800732c <checkAktifCalisma+0xddc>)
 8007128:	f002 fc54 	bl	80099d4 <HAL_GPIO_ReadPin>
 800712c:	4603      	mov	r3, r0
 800712e:	2b00      	cmp	r3, #0
 8007130:	d107      	bne.n	8007142 <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 8007132:	4b80      	ldr	r3, [pc, #512]	; (8007334 <checkAktifCalisma+0xde4>)
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d003      	beq.n	8007142 <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 800713a:	4b7f      	ldr	r3, [pc, #508]	; (8007338 <checkAktifCalisma+0xde8>)
 800713c:	2201      	movs	r2, #1
 800713e:	701a      	strb	r2, [r3, #0]
 8007140:	e002      	b.n	8007148 <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 8007142:	4b7d      	ldr	r3, [pc, #500]	; (8007338 <checkAktifCalisma+0xde8>)
 8007144:	2200      	movs	r2, #0
 8007146:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8007148:	4b75      	ldr	r3, [pc, #468]	; (8007320 <checkAktifCalisma+0xdd0>)
 800714a:	781b      	ldrb	r3, [r3, #0]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d107      	bne.n	8007160 <checkAktifCalisma+0xc10>
 8007150:	4b79      	ldr	r3, [pc, #484]	; (8007338 <checkAktifCalisma+0xde8>)
 8007152:	781b      	ldrb	r3, [r3, #0]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d103      	bne.n	8007160 <checkAktifCalisma+0xc10>
 8007158:	4b78      	ldr	r3, [pc, #480]	; (800733c <checkAktifCalisma+0xdec>)
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d005      	beq.n	800716c <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8007160:	2201      	movs	r2, #1
 8007162:	2180      	movs	r1, #128	; 0x80
 8007164:	4876      	ldr	r0, [pc, #472]	; (8007340 <checkAktifCalisma+0xdf0>)
 8007166:	f002 fc4c 	bl	8009a02 <HAL_GPIO_WritePin>
 800716a:	e004      	b.n	8007176 <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 800716c:	2200      	movs	r2, #0
 800716e:	2180      	movs	r1, #128	; 0x80
 8007170:	4873      	ldr	r0, [pc, #460]	; (8007340 <checkAktifCalisma+0xdf0>)
 8007172:	f002 fc46 	bl	8009a02 <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8007176:	4b73      	ldr	r3, [pc, #460]	; (8007344 <checkAktifCalisma+0xdf4>)
 8007178:	781b      	ldrb	r3, [r3, #0]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d141      	bne.n	8007202 <checkAktifCalisma+0xcb2>
 800717e:	4b6a      	ldr	r3, [pc, #424]	; (8007328 <checkAktifCalisma+0xdd8>)
 8007180:	781b      	ldrb	r3, [r3, #0]
 8007182:	2b01      	cmp	r3, #1
 8007184:	d003      	beq.n	800718e <checkAktifCalisma+0xc3e>
 8007186:	4b68      	ldr	r3, [pc, #416]	; (8007328 <checkAktifCalisma+0xdd8>)
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	2b03      	cmp	r3, #3
 800718c:	d139      	bne.n	8007202 <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 800718e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007192:	4866      	ldr	r0, [pc, #408]	; (800732c <checkAktifCalisma+0xddc>)
 8007194:	f002 fc1e 	bl	80099d4 <HAL_GPIO_ReadPin>
 8007198:	4603      	mov	r3, r0
 800719a:	2b00      	cmp	r3, #0
 800719c:	d103      	bne.n	80071a6 <checkAktifCalisma+0xc56>
 800719e:	4b6a      	ldr	r3, [pc, #424]	; (8007348 <checkAktifCalisma+0xdf8>)
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00b      	beq.n	80071be <checkAktifCalisma+0xc6e>
 80071a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80071aa:	4868      	ldr	r0, [pc, #416]	; (800734c <checkAktifCalisma+0xdfc>)
 80071ac:	f002 fc12 	bl	80099d4 <HAL_GPIO_ReadPin>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d125      	bne.n	8007202 <checkAktifCalisma+0xcb2>
 80071b6:	4b64      	ldr	r3, [pc, #400]	; (8007348 <checkAktifCalisma+0xdf8>)
 80071b8:	781b      	ldrb	r3, [r3, #0]
 80071ba:	2b01      	cmp	r3, #1
 80071bc:	d121      	bne.n	8007202 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80071be:	2102      	movs	r1, #2
 80071c0:	485a      	ldr	r0, [pc, #360]	; (800732c <checkAktifCalisma+0xddc>)
 80071c2:	f002 fc07 	bl	80099d4 <HAL_GPIO_ReadPin>
 80071c6:	4603      	mov	r3, r0
 80071c8:	2b01      	cmp	r3, #1
 80071ca:	d11a      	bne.n	8007202 <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80071cc:	2104      	movs	r1, #4
 80071ce:	4857      	ldr	r0, [pc, #348]	; (800732c <checkAktifCalisma+0xddc>)
 80071d0:	f002 fc00 	bl	80099d4 <HAL_GPIO_ReadPin>
 80071d4:	4603      	mov	r3, r0
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d113      	bne.n	8007202 <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 80071da:	4b56      	ldr	r3, [pc, #344]	; (8007334 <checkAktifCalisma+0xde4>)
 80071dc:	781b      	ldrb	r3, [r3, #0]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d00f      	beq.n	8007202 <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 80071e2:	4b5b      	ldr	r3, [pc, #364]	; (8007350 <checkAktifCalisma+0xe00>)
 80071e4:	781b      	ldrb	r3, [r3, #0]
 80071e6:	f083 0301 	eor.w	r3, r3, #1
 80071ea:	b2db      	uxtb	r3, r3
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d008      	beq.n	8007202 <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 80071f0:	4b58      	ldr	r3, [pc, #352]	; (8007354 <checkAktifCalisma+0xe04>)
 80071f2:	2201      	movs	r2, #1
 80071f4:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80071f6:	4b58      	ldr	r3, [pc, #352]	; (8007358 <checkAktifCalisma+0xe08>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	4a58      	ldr	r2, [pc, #352]	; (800735c <checkAktifCalisma+0xe0c>)
 80071fc:	6013      	str	r3, [r2, #0]
			bekle();
 80071fe:	f7fe ff71 	bl	80060e4 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 8007202:	4b55      	ldr	r3, [pc, #340]	; (8007358 <checkAktifCalisma+0xe08>)
 8007204:	681a      	ldr	r2, [r3, #0]
 8007206:	4b55      	ldr	r3, [pc, #340]	; (800735c <checkAktifCalisma+0xe0c>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	1ad3      	subs	r3, r2, r3
 800720c:	4a54      	ldr	r2, [pc, #336]	; (8007360 <checkAktifCalisma+0xe10>)
 800720e:	7812      	ldrb	r2, [r2, #0]
 8007210:	4293      	cmp	r3, r2
 8007212:	d20d      	bcs.n	8007230 <checkAktifCalisma+0xce0>
 8007214:	2102      	movs	r1, #2
 8007216:	4845      	ldr	r0, [pc, #276]	; (800732c <checkAktifCalisma+0xddc>)
 8007218:	f002 fbdc 	bl	80099d4 <HAL_GPIO_ReadPin>
 800721c:	4603      	mov	r3, r0
 800721e:	2b00      	cmp	r3, #0
 8007220:	d006      	beq.n	8007230 <checkAktifCalisma+0xce0>
 8007222:	4b44      	ldr	r3, [pc, #272]	; (8007334 <checkAktifCalisma+0xde4>)
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	f083 0301 	eor.w	r3, r3, #1
 800722a:	b2db      	uxtb	r3, r3
 800722c:	2b00      	cmp	r3, #0
 800722e:	d002      	beq.n	8007236 <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 8007230:	4b48      	ldr	r3, [pc, #288]	; (8007354 <checkAktifCalisma+0xe04>)
 8007232:	2200      	movs	r2, #0
 8007234:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8007236:	4b43      	ldr	r3, [pc, #268]	; (8007344 <checkAktifCalisma+0xdf4>)
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	2b01      	cmp	r3, #1
 800723c:	d135      	bne.n	80072aa <checkAktifCalisma+0xd5a>
 800723e:	4b3a      	ldr	r3, [pc, #232]	; (8007328 <checkAktifCalisma+0xdd8>)
 8007240:	781b      	ldrb	r3, [r3, #0]
 8007242:	2b01      	cmp	r3, #1
 8007244:	d003      	beq.n	800724e <checkAktifCalisma+0xcfe>
 8007246:	4b38      	ldr	r3, [pc, #224]	; (8007328 <checkAktifCalisma+0xdd8>)
 8007248:	781b      	ldrb	r3, [r3, #0]
 800724a:	2b03      	cmp	r3, #3
 800724c:	d12d      	bne.n	80072aa <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 800724e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007252:	4836      	ldr	r0, [pc, #216]	; (800732c <checkAktifCalisma+0xddc>)
 8007254:	f002 fbbe 	bl	80099d4 <HAL_GPIO_ReadPin>
 8007258:	4603      	mov	r3, r0
 800725a:	2b00      	cmp	r3, #0
 800725c:	d103      	bne.n	8007266 <checkAktifCalisma+0xd16>
 800725e:	4b3a      	ldr	r3, [pc, #232]	; (8007348 <checkAktifCalisma+0xdf8>)
 8007260:	781b      	ldrb	r3, [r3, #0]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d00b      	beq.n	800727e <checkAktifCalisma+0xd2e>
 8007266:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800726a:	4838      	ldr	r0, [pc, #224]	; (800734c <checkAktifCalisma+0xdfc>)
 800726c:	f002 fbb2 	bl	80099d4 <HAL_GPIO_ReadPin>
 8007270:	4603      	mov	r3, r0
 8007272:	2b00      	cmp	r3, #0
 8007274:	d119      	bne.n	80072aa <checkAktifCalisma+0xd5a>
 8007276:	4b34      	ldr	r3, [pc, #208]	; (8007348 <checkAktifCalisma+0xdf8>)
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	2b01      	cmp	r3, #1
 800727c:	d115      	bne.n	80072aa <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800727e:	2102      	movs	r1, #2
 8007280:	482a      	ldr	r0, [pc, #168]	; (800732c <checkAktifCalisma+0xddc>)
 8007282:	f002 fba7 	bl	80099d4 <HAL_GPIO_ReadPin>
 8007286:	4603      	mov	r3, r0
 8007288:	2b01      	cmp	r3, #1
 800728a:	d10e      	bne.n	80072aa <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 800728c:	2104      	movs	r1, #4
 800728e:	4827      	ldr	r0, [pc, #156]	; (800732c <checkAktifCalisma+0xddc>)
 8007290:	f002 fba0 	bl	80099d4 <HAL_GPIO_ReadPin>
 8007294:	4603      	mov	r3, r0
 8007296:	2b00      	cmp	r3, #0
 8007298:	d107      	bne.n	80072aa <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 800729a:	4b26      	ldr	r3, [pc, #152]	; (8007334 <checkAktifCalisma+0xde4>)
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d003      	beq.n	80072aa <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 80072a2:	4b30      	ldr	r3, [pc, #192]	; (8007364 <checkAktifCalisma+0xe14>)
 80072a4:	2201      	movs	r2, #1
 80072a6:	701a      	strb	r2, [r3, #0]
 80072a8:	e002      	b.n	80072b0 <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 80072aa:	4b2e      	ldr	r3, [pc, #184]	; (8007364 <checkAktifCalisma+0xe14>)
 80072ac:	2200      	movs	r2, #0
 80072ae:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80072b0:	4b24      	ldr	r3, [pc, #144]	; (8007344 <checkAktifCalisma+0xdf4>)
 80072b2:	781b      	ldrb	r3, [r3, #0]
 80072b4:	2b02      	cmp	r3, #2
 80072b6:	d11d      	bne.n	80072f4 <checkAktifCalisma+0xda4>
 80072b8:	4b1b      	ldr	r3, [pc, #108]	; (8007328 <checkAktifCalisma+0xdd8>)
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	2b01      	cmp	r3, #1
 80072be:	d003      	beq.n	80072c8 <checkAktifCalisma+0xd78>
 80072c0:	4b19      	ldr	r3, [pc, #100]	; (8007328 <checkAktifCalisma+0xdd8>)
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	2b03      	cmp	r3, #3
 80072c6:	d115      	bne.n	80072f4 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80072c8:	2102      	movs	r1, #2
 80072ca:	4818      	ldr	r0, [pc, #96]	; (800732c <checkAktifCalisma+0xddc>)
 80072cc:	f002 fb82 	bl	80099d4 <HAL_GPIO_ReadPin>
 80072d0:	4603      	mov	r3, r0
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d10e      	bne.n	80072f4 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 80072d6:	2104      	movs	r1, #4
 80072d8:	4814      	ldr	r0, [pc, #80]	; (800732c <checkAktifCalisma+0xddc>)
 80072da:	f002 fb7b 	bl	80099d4 <HAL_GPIO_ReadPin>
 80072de:	4603      	mov	r3, r0
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d107      	bne.n	80072f4 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 80072e4:	4b13      	ldr	r3, [pc, #76]	; (8007334 <checkAktifCalisma+0xde4>)
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d003      	beq.n	80072f4 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 80072ec:	4b1e      	ldr	r3, [pc, #120]	; (8007368 <checkAktifCalisma+0xe18>)
 80072ee:	2201      	movs	r2, #1
 80072f0:	701a      	strb	r2, [r3, #0]
 80072f2:	e002      	b.n	80072fa <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 80072f4:	4b1c      	ldr	r3, [pc, #112]	; (8007368 <checkAktifCalisma+0xe18>)
 80072f6:	2200      	movs	r2, #0
 80072f8:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 80072fa:	4b1a      	ldr	r3, [pc, #104]	; (8007364 <checkAktifCalisma+0xe14>)
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d107      	bne.n	8007312 <checkAktifCalisma+0xdc2>
 8007302:	4b19      	ldr	r3, [pc, #100]	; (8007368 <checkAktifCalisma+0xe18>)
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d103      	bne.n	8007312 <checkAktifCalisma+0xdc2>
 800730a:	4b12      	ldr	r3, [pc, #72]	; (8007354 <checkAktifCalisma+0xe04>)
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d02c      	beq.n	800736c <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8007312:	2201      	movs	r2, #1
 8007314:	2140      	movs	r1, #64	; 0x40
 8007316:	480a      	ldr	r0, [pc, #40]	; (8007340 <checkAktifCalisma+0xdf0>)
 8007318:	f002 fb73 	bl	8009a02 <HAL_GPIO_WritePin>
 800731c:	e02b      	b.n	8007376 <checkAktifCalisma+0xe26>
 800731e:	bf00      	nop
 8007320:	20000c54 	.word	0x20000c54
 8007324:	20000c19 	.word	0x20000c19
 8007328:	20000c18 	.word	0x20000c18
 800732c:	40011000 	.word	0x40011000
 8007330:	20000c16 	.word	0x20000c16
 8007334:	20000c52 	.word	0x20000c52
 8007338:	20000c55 	.word	0x20000c55
 800733c:	20000c53 	.word	0x20000c53
 8007340:	40010800 	.word	0x40010800
 8007344:	20000c1a 	.word	0x20000c1a
 8007348:	20000c1c 	.word	0x20000c1c
 800734c:	40010c00 	.word	0x40010c00
 8007350:	20000c3f 	.word	0x20000c3f
 8007354:	20000c56 	.word	0x20000c56
 8007358:	20000bb8 	.word	0x20000bb8
 800735c:	20000bbc 	.word	0x20000bbc
 8007360:	20000c2a 	.word	0x20000c2a
 8007364:	20000c57 	.word	0x20000c57
 8007368:	20000c58 	.word	0x20000c58
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 800736c:	2200      	movs	r2, #0
 800736e:	2140      	movs	r1, #64	; 0x40
 8007370:	488d      	ldr	r0, [pc, #564]	; (80075a8 <checkAktifCalisma+0x1058>)
 8007372:	f002 fb46 	bl	8009a02 <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8007376:	4b8d      	ldr	r3, [pc, #564]	; (80075ac <checkAktifCalisma+0x105c>)
 8007378:	781b      	ldrb	r3, [r3, #0]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d003      	beq.n	8007386 <checkAktifCalisma+0xe36>
 800737e:	4b8b      	ldr	r3, [pc, #556]	; (80075ac <checkAktifCalisma+0x105c>)
 8007380:	781b      	ldrb	r3, [r3, #0]
 8007382:	2b02      	cmp	r3, #2
 8007384:	d115      	bne.n	80073b2 <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8007386:	2104      	movs	r1, #4
 8007388:	4889      	ldr	r0, [pc, #548]	; (80075b0 <checkAktifCalisma+0x1060>)
 800738a:	f002 fb23 	bl	80099d4 <HAL_GPIO_ReadPin>
 800738e:	4603      	mov	r3, r0
 8007390:	2b01      	cmp	r3, #1
 8007392:	d003      	beq.n	800739c <checkAktifCalisma+0xe4c>
 8007394:	4b87      	ldr	r3, [pc, #540]	; (80075b4 <checkAktifCalisma+0x1064>)
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d10a      	bne.n	80073b2 <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 800739c:	2102      	movs	r1, #2
 800739e:	4884      	ldr	r0, [pc, #528]	; (80075b0 <checkAktifCalisma+0x1060>)
 80073a0:	f002 fb18 	bl	80099d4 <HAL_GPIO_ReadPin>
 80073a4:	4603      	mov	r3, r0
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d103      	bne.n	80073b2 <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 80073aa:	4b83      	ldr	r3, [pc, #524]	; (80075b8 <checkAktifCalisma+0x1068>)
 80073ac:	2201      	movs	r2, #1
 80073ae:	701a      	strb	r2, [r3, #0]
 80073b0:	e002      	b.n	80073b8 <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 80073b2:	4b81      	ldr	r3, [pc, #516]	; (80075b8 <checkAktifCalisma+0x1068>)
 80073b4:	2200      	movs	r2, #0
 80073b6:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 80073b8:	4b7c      	ldr	r3, [pc, #496]	; (80075ac <checkAktifCalisma+0x105c>)
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d003      	beq.n	80073c8 <checkAktifCalisma+0xe78>
 80073c0:	4b7a      	ldr	r3, [pc, #488]	; (80075ac <checkAktifCalisma+0x105c>)
 80073c2:	781b      	ldrb	r3, [r3, #0]
 80073c4:	2b02      	cmp	r3, #2
 80073c6:	d111      	bne.n	80073ec <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80073c8:	2102      	movs	r1, #2
 80073ca:	4879      	ldr	r0, [pc, #484]	; (80075b0 <checkAktifCalisma+0x1060>)
 80073cc:	f002 fb02 	bl	80099d4 <HAL_GPIO_ReadPin>
 80073d0:	4603      	mov	r3, r0
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d10a      	bne.n	80073ec <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 80073d6:	2104      	movs	r1, #4
 80073d8:	4875      	ldr	r0, [pc, #468]	; (80075b0 <checkAktifCalisma+0x1060>)
 80073da:	f002 fafb 	bl	80099d4 <HAL_GPIO_ReadPin>
 80073de:	4603      	mov	r3, r0
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d103      	bne.n	80073ec <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 80073e4:	4b75      	ldr	r3, [pc, #468]	; (80075bc <checkAktifCalisma+0x106c>)
 80073e6:	2201      	movs	r2, #1
 80073e8:	701a      	strb	r2, [r3, #0]
 80073ea:	e002      	b.n	80073f2 <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 80073ec:	4b73      	ldr	r3, [pc, #460]	; (80075bc <checkAktifCalisma+0x106c>)
 80073ee:	2200      	movs	r2, #0
 80073f0:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 80073f2:	4b71      	ldr	r3, [pc, #452]	; (80075b8 <checkAktifCalisma+0x1068>)
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d00f      	beq.n	800741a <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 80073fa:	4b71      	ldr	r3, [pc, #452]	; (80075c0 <checkAktifCalisma+0x1070>)
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	2b01      	cmp	r3, #1
 8007400:	d10b      	bne.n	800741a <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 8007402:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007406:	486f      	ldr	r0, [pc, #444]	; (80075c4 <checkAktifCalisma+0x1074>)
 8007408:	f002 fae4 	bl	80099d4 <HAL_GPIO_ReadPin>
 800740c:	4603      	mov	r3, r0
 800740e:	2b00      	cmp	r3, #0
 8007410:	d103      	bne.n	800741a <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 8007412:	4b6d      	ldr	r3, [pc, #436]	; (80075c8 <checkAktifCalisma+0x1078>)
 8007414:	2201      	movs	r2, #1
 8007416:	701a      	strb	r2, [r3, #0]
 8007418:	e002      	b.n	8007420 <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 800741a:	4b6b      	ldr	r3, [pc, #428]	; (80075c8 <checkAktifCalisma+0x1078>)
 800741c:	2200      	movs	r2, #0
 800741e:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 8007420:	4b66      	ldr	r3, [pc, #408]	; (80075bc <checkAktifCalisma+0x106c>)
 8007422:	781b      	ldrb	r3, [r3, #0]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d00f      	beq.n	8007448 <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 8007428:	4b65      	ldr	r3, [pc, #404]	; (80075c0 <checkAktifCalisma+0x1070>)
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	2b01      	cmp	r3, #1
 800742e:	d10b      	bne.n	8007448 <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 8007430:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007434:	4863      	ldr	r0, [pc, #396]	; (80075c4 <checkAktifCalisma+0x1074>)
 8007436:	f002 facd 	bl	80099d4 <HAL_GPIO_ReadPin>
 800743a:	4603      	mov	r3, r0
 800743c:	2b00      	cmp	r3, #0
 800743e:	d103      	bne.n	8007448 <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 8007440:	4b62      	ldr	r3, [pc, #392]	; (80075cc <checkAktifCalisma+0x107c>)
 8007442:	2201      	movs	r2, #1
 8007444:	701a      	strb	r2, [r3, #0]
 8007446:	e002      	b.n	800744e <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 8007448:	4b60      	ldr	r3, [pc, #384]	; (80075cc <checkAktifCalisma+0x107c>)
 800744a:	2200      	movs	r2, #0
 800744c:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 800744e:	4b60      	ldr	r3, [pc, #384]	; (80075d0 <checkAktifCalisma+0x1080>)
 8007450:	781b      	ldrb	r3, [r3, #0]
 8007452:	2b00      	cmp	r3, #0
 8007454:	d137      	bne.n	80074c6 <checkAktifCalisma+0xf76>
 8007456:	4b5f      	ldr	r3, [pc, #380]	; (80075d4 <checkAktifCalisma+0x1084>)
 8007458:	781b      	ldrb	r3, [r3, #0]
 800745a:	2b02      	cmp	r3, #2
 800745c:	d003      	beq.n	8007466 <checkAktifCalisma+0xf16>
 800745e:	4b5d      	ldr	r3, [pc, #372]	; (80075d4 <checkAktifCalisma+0x1084>)
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	2b03      	cmp	r3, #3
 8007464:	d12f      	bne.n	80074c6 <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8007466:	4b54      	ldr	r3, [pc, #336]	; (80075b8 <checkAktifCalisma+0x1068>)
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d103      	bne.n	8007476 <checkAktifCalisma+0xf26>
 800746e:	4b53      	ldr	r3, [pc, #332]	; (80075bc <checkAktifCalisma+0x106c>)
 8007470:	781b      	ldrb	r3, [r3, #0]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d027      	beq.n	80074c6 <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8007476:	f44f 7100 	mov.w	r1, #512	; 0x200
 800747a:	484d      	ldr	r0, [pc, #308]	; (80075b0 <checkAktifCalisma+0x1060>)
 800747c:	f002 faaa 	bl	80099d4 <HAL_GPIO_ReadPin>
 8007480:	4603      	mov	r3, r0
 8007482:	2b00      	cmp	r3, #0
 8007484:	d103      	bne.n	800748e <checkAktifCalisma+0xf3e>
 8007486:	4b4e      	ldr	r3, [pc, #312]	; (80075c0 <checkAktifCalisma+0x1070>)
 8007488:	781b      	ldrb	r3, [r3, #0]
 800748a:	2b00      	cmp	r3, #0
 800748c:	d007      	beq.n	800749e <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 800748e:	4b4e      	ldr	r3, [pc, #312]	; (80075c8 <checkAktifCalisma+0x1078>)
 8007490:	781b      	ldrb	r3, [r3, #0]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d103      	bne.n	800749e <checkAktifCalisma+0xf4e>
 8007496:	4b4d      	ldr	r3, [pc, #308]	; (80075cc <checkAktifCalisma+0x107c>)
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d013      	beq.n	80074c6 <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 800749e:	4b4e      	ldr	r3, [pc, #312]	; (80075d8 <checkAktifCalisma+0x1088>)
 80074a0:	781b      	ldrb	r3, [r3, #0]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d00f      	beq.n	80074c6 <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 80074a6:	4b4d      	ldr	r3, [pc, #308]	; (80075dc <checkAktifCalisma+0x108c>)
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	f083 0301 	eor.w	r3, r3, #1
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d008      	beq.n	80074c6 <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 80074b4:	4b4a      	ldr	r3, [pc, #296]	; (80075e0 <checkAktifCalisma+0x1090>)
 80074b6:	2201      	movs	r2, #1
 80074b8:	701a      	strb	r2, [r3, #0]
			timer = millis;
 80074ba:	4b4a      	ldr	r3, [pc, #296]	; (80075e4 <checkAktifCalisma+0x1094>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	4a4a      	ldr	r2, [pc, #296]	; (80075e8 <checkAktifCalisma+0x1098>)
 80074c0:	6013      	str	r3, [r2, #0]
			bekle();
 80074c2:	f7fe fe0f 	bl	80060e4 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 80074c6:	4b47      	ldr	r3, [pc, #284]	; (80075e4 <checkAktifCalisma+0x1094>)
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	4b47      	ldr	r3, [pc, #284]	; (80075e8 <checkAktifCalisma+0x1098>)
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	1ad3      	subs	r3, r2, r3
 80074d0:	4a46      	ldr	r2, [pc, #280]	; (80075ec <checkAktifCalisma+0x109c>)
 80074d2:	7812      	ldrb	r2, [r2, #0]
 80074d4:	4293      	cmp	r3, r2
 80074d6:	d214      	bcs.n	8007502 <checkAktifCalisma+0xfb2>
 80074d8:	4b37      	ldr	r3, [pc, #220]	; (80075b8 <checkAktifCalisma+0x1068>)
 80074da:	781b      	ldrb	r3, [r3, #0]
 80074dc:	f083 0301 	eor.w	r3, r3, #1
 80074e0:	b2db      	uxtb	r3, r3
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d006      	beq.n	80074f4 <checkAktifCalisma+0xfa4>
 80074e6:	4b35      	ldr	r3, [pc, #212]	; (80075bc <checkAktifCalisma+0x106c>)
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	f083 0301 	eor.w	r3, r3, #1
 80074ee:	b2db      	uxtb	r3, r3
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d106      	bne.n	8007502 <checkAktifCalisma+0xfb2>
 80074f4:	4b38      	ldr	r3, [pc, #224]	; (80075d8 <checkAktifCalisma+0x1088>)
 80074f6:	781b      	ldrb	r3, [r3, #0]
 80074f8:	f083 0301 	eor.w	r3, r3, #1
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d002      	beq.n	8007508 <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 8007502:	4b37      	ldr	r3, [pc, #220]	; (80075e0 <checkAktifCalisma+0x1090>)
 8007504:	2200      	movs	r2, #0
 8007506:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8007508:	4b31      	ldr	r3, [pc, #196]	; (80075d0 <checkAktifCalisma+0x1080>)
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	2b01      	cmp	r3, #1
 800750e:	d12b      	bne.n	8007568 <checkAktifCalisma+0x1018>
 8007510:	4b30      	ldr	r3, [pc, #192]	; (80075d4 <checkAktifCalisma+0x1084>)
 8007512:	781b      	ldrb	r3, [r3, #0]
 8007514:	2b02      	cmp	r3, #2
 8007516:	d003      	beq.n	8007520 <checkAktifCalisma+0xfd0>
 8007518:	4b2e      	ldr	r3, [pc, #184]	; (80075d4 <checkAktifCalisma+0x1084>)
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	2b03      	cmp	r3, #3
 800751e:	d123      	bne.n	8007568 <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8007520:	4b25      	ldr	r3, [pc, #148]	; (80075b8 <checkAktifCalisma+0x1068>)
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d103      	bne.n	8007530 <checkAktifCalisma+0xfe0>
 8007528:	4b24      	ldr	r3, [pc, #144]	; (80075bc <checkAktifCalisma+0x106c>)
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d01b      	beq.n	8007568 <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8007530:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007534:	481e      	ldr	r0, [pc, #120]	; (80075b0 <checkAktifCalisma+0x1060>)
 8007536:	f002 fa4d 	bl	80099d4 <HAL_GPIO_ReadPin>
 800753a:	4603      	mov	r3, r0
 800753c:	2b00      	cmp	r3, #0
 800753e:	d103      	bne.n	8007548 <checkAktifCalisma+0xff8>
 8007540:	4b1f      	ldr	r3, [pc, #124]	; (80075c0 <checkAktifCalisma+0x1070>)
 8007542:	781b      	ldrb	r3, [r3, #0]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d007      	beq.n	8007558 <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8007548:	4b1f      	ldr	r3, [pc, #124]	; (80075c8 <checkAktifCalisma+0x1078>)
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d103      	bne.n	8007558 <checkAktifCalisma+0x1008>
 8007550:	4b1e      	ldr	r3, [pc, #120]	; (80075cc <checkAktifCalisma+0x107c>)
 8007552:	781b      	ldrb	r3, [r3, #0]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d007      	beq.n	8007568 <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 8007558:	4b1f      	ldr	r3, [pc, #124]	; (80075d8 <checkAktifCalisma+0x1088>)
 800755a:	781b      	ldrb	r3, [r3, #0]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d003      	beq.n	8007568 <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 8007560:	4b23      	ldr	r3, [pc, #140]	; (80075f0 <checkAktifCalisma+0x10a0>)
 8007562:	2201      	movs	r2, #1
 8007564:	701a      	strb	r2, [r3, #0]
 8007566:	e002      	b.n	800756e <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8007568:	4b21      	ldr	r3, [pc, #132]	; (80075f0 <checkAktifCalisma+0x10a0>)
 800756a:	2200      	movs	r2, #0
 800756c:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 800756e:	4b18      	ldr	r3, [pc, #96]	; (80075d0 <checkAktifCalisma+0x1080>)
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	2b02      	cmp	r3, #2
 8007574:	d140      	bne.n	80075f8 <checkAktifCalisma+0x10a8>
 8007576:	4b17      	ldr	r3, [pc, #92]	; (80075d4 <checkAktifCalisma+0x1084>)
 8007578:	781b      	ldrb	r3, [r3, #0]
 800757a:	2b02      	cmp	r3, #2
 800757c:	d003      	beq.n	8007586 <checkAktifCalisma+0x1036>
 800757e:	4b15      	ldr	r3, [pc, #84]	; (80075d4 <checkAktifCalisma+0x1084>)
 8007580:	781b      	ldrb	r3, [r3, #0]
 8007582:	2b03      	cmp	r3, #3
 8007584:	d138      	bne.n	80075f8 <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8007586:	4b0c      	ldr	r3, [pc, #48]	; (80075b8 <checkAktifCalisma+0x1068>)
 8007588:	781b      	ldrb	r3, [r3, #0]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d103      	bne.n	8007596 <checkAktifCalisma+0x1046>
 800758e:	4b0b      	ldr	r3, [pc, #44]	; (80075bc <checkAktifCalisma+0x106c>)
 8007590:	781b      	ldrb	r3, [r3, #0]
 8007592:	2b00      	cmp	r3, #0
 8007594:	d030      	beq.n	80075f8 <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 8007596:	4b10      	ldr	r3, [pc, #64]	; (80075d8 <checkAktifCalisma+0x1088>)
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d02c      	beq.n	80075f8 <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 800759e:	4b15      	ldr	r3, [pc, #84]	; (80075f4 <checkAktifCalisma+0x10a4>)
 80075a0:	2201      	movs	r2, #1
 80075a2:	701a      	strb	r2, [r3, #0]
 80075a4:	e02b      	b.n	80075fe <checkAktifCalisma+0x10ae>
 80075a6:	bf00      	nop
 80075a8:	40010800 	.word	0x40010800
 80075ac:	20000c1d 	.word	0x20000c1d
 80075b0:	40011000 	.word	0x40011000
 80075b4:	20000c16 	.word	0x20000c16
 80075b8:	20000c5c 	.word	0x20000c5c
 80075bc:	20000c5d 	.word	0x20000c5d
 80075c0:	20000c1c 	.word	0x20000c1c
 80075c4:	40010c00 	.word	0x40010c00
 80075c8:	20000c6c 	.word	0x20000c6c
 80075cc:	20000c6d 	.word	0x20000c6d
 80075d0:	20000c1b 	.word	0x20000c1b
 80075d4:	20000c18 	.word	0x20000c18
 80075d8:	20000c52 	.word	0x20000c52
 80075dc:	20000c3f 	.word	0x20000c3f
 80075e0:	20000c59 	.word	0x20000c59
 80075e4:	20000bb8 	.word	0x20000bb8
 80075e8:	20000bbc 	.word	0x20000bbc
 80075ec:	20000c2b 	.word	0x20000c2b
 80075f0:	20000c5a 	.word	0x20000c5a
 80075f4:	20000c5b 	.word	0x20000c5b
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 80075f8:	4b89      	ldr	r3, [pc, #548]	; (8007820 <checkAktifCalisma+0x12d0>)
 80075fa:	2200      	movs	r2, #0
 80075fc:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 80075fe:	4b89      	ldr	r3, [pc, #548]	; (8007824 <checkAktifCalisma+0x12d4>)
 8007600:	781b      	ldrb	r3, [r3, #0]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d107      	bne.n	8007616 <checkAktifCalisma+0x10c6>
 8007606:	4b88      	ldr	r3, [pc, #544]	; (8007828 <checkAktifCalisma+0x12d8>)
 8007608:	781b      	ldrb	r3, [r3, #0]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d103      	bne.n	8007616 <checkAktifCalisma+0x10c6>
 800760e:	4b84      	ldr	r3, [pc, #528]	; (8007820 <checkAktifCalisma+0x12d0>)
 8007610:	781b      	ldrb	r3, [r3, #0]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d005      	beq.n	8007622 <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8007616:	2201      	movs	r2, #1
 8007618:	2120      	movs	r1, #32
 800761a:	4884      	ldr	r0, [pc, #528]	; (800782c <checkAktifCalisma+0x12dc>)
 800761c:	f002 f9f1 	bl	8009a02 <HAL_GPIO_WritePin>
 8007620:	e004      	b.n	800762c <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007622:	2200      	movs	r2, #0
 8007624:	2120      	movs	r1, #32
 8007626:	4881      	ldr	r0, [pc, #516]	; (800782c <checkAktifCalisma+0x12dc>)
 8007628:	f002 f9eb 	bl	8009a02 <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 800762c:	4b80      	ldr	r3, [pc, #512]	; (8007830 <checkAktifCalisma+0x12e0>)
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d00e      	beq.n	8007652 <checkAktifCalisma+0x1102>
 8007634:	2102      	movs	r1, #2
 8007636:	487f      	ldr	r0, [pc, #508]	; (8007834 <checkAktifCalisma+0x12e4>)
 8007638:	f002 f9cc 	bl	80099d4 <HAL_GPIO_ReadPin>
 800763c:	4603      	mov	r3, r0
 800763e:	2b01      	cmp	r3, #1
 8007640:	d107      	bne.n	8007652 <checkAktifCalisma+0x1102>
 8007642:	4b7d      	ldr	r3, [pc, #500]	; (8007838 <checkAktifCalisma+0x12e8>)
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d103      	bne.n	8007652 <checkAktifCalisma+0x1102>
 800764a:	4b7c      	ldr	r3, [pc, #496]	; (800783c <checkAktifCalisma+0x12ec>)
 800764c:	781b      	ldrb	r3, [r3, #0]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d112      	bne.n	8007678 <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8007652:	4b7b      	ldr	r3, [pc, #492]	; (8007840 <checkAktifCalisma+0x12f0>)
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	2b00      	cmp	r3, #0
 8007658:	d066      	beq.n	8007728 <checkAktifCalisma+0x11d8>
 800765a:	2104      	movs	r1, #4
 800765c:	4875      	ldr	r0, [pc, #468]	; (8007834 <checkAktifCalisma+0x12e4>)
 800765e:	f002 f9b9 	bl	80099d4 <HAL_GPIO_ReadPin>
 8007662:	4603      	mov	r3, r0
 8007664:	2b01      	cmp	r3, #1
 8007666:	d15f      	bne.n	8007728 <checkAktifCalisma+0x11d8>
 8007668:	4b73      	ldr	r3, [pc, #460]	; (8007838 <checkAktifCalisma+0x12e8>)
 800766a:	781b      	ldrb	r3, [r3, #0]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d05b      	beq.n	8007728 <checkAktifCalisma+0x11d8>
 8007670:	4b72      	ldr	r3, [pc, #456]	; (800783c <checkAktifCalisma+0x12ec>)
 8007672:	781b      	ldrb	r3, [r3, #0]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d057      	beq.n	8007728 <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 8007678:	4b72      	ldr	r3, [pc, #456]	; (8007844 <checkAktifCalisma+0x12f4>)
 800767a:	781b      	ldrb	r3, [r3, #0]
 800767c:	3301      	adds	r3, #1
 800767e:	b2da      	uxtb	r2, r3
 8007680:	4b70      	ldr	r3, [pc, #448]	; (8007844 <checkAktifCalisma+0x12f4>)
 8007682:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8007684:	4b6f      	ldr	r3, [pc, #444]	; (8007844 <checkAktifCalisma+0x12f4>)
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	2b09      	cmp	r3, #9
 800768a:	d908      	bls.n	800769e <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 800768c:	4b6d      	ldr	r3, [pc, #436]	; (8007844 <checkAktifCalisma+0x12f4>)
 800768e:	2200      	movs	r2, #0
 8007690:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 8007692:	4b6d      	ldr	r3, [pc, #436]	; (8007848 <checkAktifCalisma+0x12f8>)
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	3301      	adds	r3, #1
 8007698:	b2da      	uxtb	r2, r3
 800769a:	4b6b      	ldr	r3, [pc, #428]	; (8007848 <checkAktifCalisma+0x12f8>)
 800769c:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 800769e:	4b6a      	ldr	r3, [pc, #424]	; (8007848 <checkAktifCalisma+0x12f8>)
 80076a0:	781b      	ldrb	r3, [r3, #0]
 80076a2:	2b09      	cmp	r3, #9
 80076a4:	d908      	bls.n	80076b8 <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 80076a6:	4b68      	ldr	r3, [pc, #416]	; (8007848 <checkAktifCalisma+0x12f8>)
 80076a8:	2200      	movs	r2, #0
 80076aa:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 80076ac:	4b67      	ldr	r3, [pc, #412]	; (800784c <checkAktifCalisma+0x12fc>)
 80076ae:	781b      	ldrb	r3, [r3, #0]
 80076b0:	3301      	adds	r3, #1
 80076b2:	b2da      	uxtb	r2, r3
 80076b4:	4b65      	ldr	r3, [pc, #404]	; (800784c <checkAktifCalisma+0x12fc>)
 80076b6:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 80076b8:	4b64      	ldr	r3, [pc, #400]	; (800784c <checkAktifCalisma+0x12fc>)
 80076ba:	781b      	ldrb	r3, [r3, #0]
 80076bc:	2b09      	cmp	r3, #9
 80076be:	d908      	bls.n	80076d2 <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 80076c0:	4b62      	ldr	r3, [pc, #392]	; (800784c <checkAktifCalisma+0x12fc>)
 80076c2:	2200      	movs	r2, #0
 80076c4:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 80076c6:	4b62      	ldr	r3, [pc, #392]	; (8007850 <checkAktifCalisma+0x1300>)
 80076c8:	781b      	ldrb	r3, [r3, #0]
 80076ca:	3301      	adds	r3, #1
 80076cc:	b2da      	uxtb	r2, r3
 80076ce:	4b60      	ldr	r3, [pc, #384]	; (8007850 <checkAktifCalisma+0x1300>)
 80076d0:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 80076d2:	4b5f      	ldr	r3, [pc, #380]	; (8007850 <checkAktifCalisma+0x1300>)
 80076d4:	781b      	ldrb	r3, [r3, #0]
 80076d6:	2b09      	cmp	r3, #9
 80076d8:	d908      	bls.n	80076ec <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 80076da:	4b5d      	ldr	r3, [pc, #372]	; (8007850 <checkAktifCalisma+0x1300>)
 80076dc:	2200      	movs	r2, #0
 80076de:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 80076e0:	4b5c      	ldr	r3, [pc, #368]	; (8007854 <checkAktifCalisma+0x1304>)
 80076e2:	781b      	ldrb	r3, [r3, #0]
 80076e4:	3301      	adds	r3, #1
 80076e6:	b2da      	uxtb	r2, r3
 80076e8:	4b5a      	ldr	r3, [pc, #360]	; (8007854 <checkAktifCalisma+0x1304>)
 80076ea:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 80076ec:	4b59      	ldr	r3, [pc, #356]	; (8007854 <checkAktifCalisma+0x1304>)
 80076ee:	781a      	ldrb	r2, [r3, #0]
 80076f0:	4b59      	ldr	r3, [pc, #356]	; (8007858 <checkAktifCalisma+0x1308>)
 80076f2:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 80076f6:	4b56      	ldr	r3, [pc, #344]	; (8007850 <checkAktifCalisma+0x1300>)
 80076f8:	781a      	ldrb	r2, [r3, #0]
 80076fa:	4b57      	ldr	r3, [pc, #348]	; (8007858 <checkAktifCalisma+0x1308>)
 80076fc:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 80076fe:	4b53      	ldr	r3, [pc, #332]	; (800784c <checkAktifCalisma+0x12fc>)
 8007700:	781a      	ldrb	r2, [r3, #0]
 8007702:	4b55      	ldr	r3, [pc, #340]	; (8007858 <checkAktifCalisma+0x1308>)
 8007704:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8007706:	4b50      	ldr	r3, [pc, #320]	; (8007848 <checkAktifCalisma+0x12f8>)
 8007708:	781a      	ldrb	r2, [r3, #0]
 800770a:	4b53      	ldr	r3, [pc, #332]	; (8007858 <checkAktifCalisma+0x1308>)
 800770c:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 800770e:	4b4d      	ldr	r3, [pc, #308]	; (8007844 <checkAktifCalisma+0x12f4>)
 8007710:	781a      	ldrb	r2, [r3, #0]
 8007712:	4b51      	ldr	r3, [pc, #324]	; (8007858 <checkAktifCalisma+0x1308>)
 8007714:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 8007716:	4b51      	ldr	r3, [pc, #324]	; (800785c <checkAktifCalisma+0x130c>)
 8007718:	2201      	movs	r2, #1
 800771a:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 800771c:	4b44      	ldr	r3, [pc, #272]	; (8007830 <checkAktifCalisma+0x12e0>)
 800771e:	2200      	movs	r2, #0
 8007720:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 8007722:	4b47      	ldr	r3, [pc, #284]	; (8007840 <checkAktifCalisma+0x12f0>)
 8007724:	2200      	movs	r2, #0
 8007726:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8007728:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800772c:	484c      	ldr	r0, [pc, #304]	; (8007860 <checkAktifCalisma+0x1310>)
 800772e:	f002 f951 	bl	80099d4 <HAL_GPIO_ReadPin>
 8007732:	4603      	mov	r3, r0
 8007734:	2b00      	cmp	r3, #0
 8007736:	d016      	beq.n	8007766 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8007738:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800773c:	4848      	ldr	r0, [pc, #288]	; (8007860 <checkAktifCalisma+0x1310>)
 800773e:	f002 f949 	bl	80099d4 <HAL_GPIO_ReadPin>
 8007742:	4603      	mov	r3, r0
 8007744:	2b00      	cmp	r3, #0
 8007746:	d00e      	beq.n	8007766 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8007748:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800774c:	4844      	ldr	r0, [pc, #272]	; (8007860 <checkAktifCalisma+0x1310>)
 800774e:	f002 f941 	bl	80099d4 <HAL_GPIO_ReadPin>
 8007752:	4603      	mov	r3, r0
 8007754:	2b00      	cmp	r3, #0
 8007756:	d006      	beq.n	8007766 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8007758:	2140      	movs	r1, #64	; 0x40
 800775a:	4836      	ldr	r0, [pc, #216]	; (8007834 <checkAktifCalisma+0x12e4>)
 800775c:	f002 f93a 	bl	80099d4 <HAL_GPIO_ReadPin>
 8007760:	4603      	mov	r3, r0
 8007762:	2b00      	cmp	r3, #0
 8007764:	d103      	bne.n	800776e <checkAktifCalisma+0x121e>
			startBasili=1;
 8007766:	4b3f      	ldr	r3, [pc, #252]	; (8007864 <checkAktifCalisma+0x1314>)
 8007768:	2201      	movs	r2, #1
 800776a:	701a      	strb	r2, [r3, #0]
 800776c:	e002      	b.n	8007774 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 800776e:	4b3d      	ldr	r3, [pc, #244]	; (8007864 <checkAktifCalisma+0x1314>)
 8007770:	2200      	movs	r2, #0
 8007772:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8007774:	4b3b      	ldr	r3, [pc, #236]	; (8007864 <checkAktifCalisma+0x1314>)
 8007776:	781b      	ldrb	r3, [r3, #0]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d014      	beq.n	80077a6 <checkAktifCalisma+0x1256>
 800777c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007780:	4837      	ldr	r0, [pc, #220]	; (8007860 <checkAktifCalisma+0x1310>)
 8007782:	f002 f927 	bl	80099d4 <HAL_GPIO_ReadPin>
 8007786:	4603      	mov	r3, r0
 8007788:	2b01      	cmp	r3, #1
 800778a:	d10c      	bne.n	80077a6 <checkAktifCalisma+0x1256>
			hataVar=1;
 800778c:	4b36      	ldr	r3, [pc, #216]	; (8007868 <checkAktifCalisma+0x1318>)
 800778e:	2201      	movs	r2, #1
 8007790:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 8007792:	2001      	movs	r0, #1
 8007794:	f7fe f8c6 	bl	8005924 <hataKoduLcdGoster>
			hata2EEPROM(1);
 8007798:	2001      	movs	r0, #1
 800779a:	f7fe fc27 	bl	8005fec <hata2EEPROM>
			acilstophatasi=1;
 800779e:	4b33      	ldr	r3, [pc, #204]	; (800786c <checkAktifCalisma+0x131c>)
 80077a0:	2201      	movs	r2, #1
 80077a2:	701a      	strb	r2, [r3, #0]
 80077a4:	e018      	b.n	80077d8 <checkAktifCalisma+0x1288>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 80077a6:	4b31      	ldr	r3, [pc, #196]	; (800786c <checkAktifCalisma+0x131c>)
 80077a8:	781b      	ldrb	r3, [r3, #0]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d014      	beq.n	80077d8 <checkAktifCalisma+0x1288>
 80077ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80077b2:	482b      	ldr	r0, [pc, #172]	; (8007860 <checkAktifCalisma+0x1310>)
 80077b4:	f002 f90e 	bl	80099d4 <HAL_GPIO_ReadPin>
 80077b8:	4603      	mov	r3, r0
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d10c      	bne.n	80077d8 <checkAktifCalisma+0x1288>
 80077be:	4b29      	ldr	r3, [pc, #164]	; (8007864 <checkAktifCalisma+0x1314>)
 80077c0:	781b      	ldrb	r3, [r3, #0]
 80077c2:	f083 0301 	eor.w	r3, r3, #1
 80077c6:	b2db      	uxtb	r3, r3
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d005      	beq.n	80077d8 <checkAktifCalisma+0x1288>
			acilstophatasi=0;
 80077cc:	4b27      	ldr	r3, [pc, #156]	; (800786c <checkAktifCalisma+0x131c>)
 80077ce:	2200      	movs	r2, #0
 80077d0:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 80077d2:	2001      	movs	r0, #1
 80077d4:	f7fe f852 	bl	800587c <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 80077d8:	4b25      	ldr	r3, [pc, #148]	; (8007870 <checkAktifCalisma+0x1320>)
 80077da:	781b      	ldrb	r3, [r3, #0]
 80077dc:	f083 0301 	eor.w	r3, r3, #1
 80077e0:	b2db      	uxtb	r3, r3
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d04c      	beq.n	8007880 <checkAktifCalisma+0x1330>
 80077e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80077ea:	481d      	ldr	r0, [pc, #116]	; (8007860 <checkAktifCalisma+0x1310>)
 80077ec:	f002 f8f2 	bl	80099d4 <HAL_GPIO_ReadPin>
 80077f0:	4603      	mov	r3, r0
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d003      	beq.n	80077fe <checkAktifCalisma+0x12ae>
 80077f6:	4b1f      	ldr	r3, [pc, #124]	; (8007874 <checkAktifCalisma+0x1324>)
 80077f8:	781b      	ldrb	r3, [r3, #0]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d040      	beq.n	8007880 <checkAktifCalisma+0x1330>
 80077fe:	4b1e      	ldr	r3, [pc, #120]	; (8007878 <checkAktifCalisma+0x1328>)
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	2b01      	cmp	r3, #1
 8007804:	d13c      	bne.n	8007880 <checkAktifCalisma+0x1330>
			hataVar=1;
 8007806:	4b18      	ldr	r3, [pc, #96]	; (8007868 <checkAktifCalisma+0x1318>)
 8007808:	2201      	movs	r2, #1
 800780a:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 800780c:	2002      	movs	r0, #2
 800780e:	f7fe f889 	bl	8005924 <hataKoduLcdGoster>
			hata2EEPROM(2);
 8007812:	2002      	movs	r0, #2
 8007814:	f7fe fbea 	bl	8005fec <hata2EEPROM>
			emniyetCercevesihatasi=1;
 8007818:	4b18      	ldr	r3, [pc, #96]	; (800787c <checkAktifCalisma+0x132c>)
 800781a:	2201      	movs	r2, #1
 800781c:	701a      	strb	r2, [r3, #0]
 800781e:	e047      	b.n	80078b0 <checkAktifCalisma+0x1360>
 8007820:	20000c5b 	.word	0x20000c5b
 8007824:	20000c5a 	.word	0x20000c5a
 8007828:	20000c59 	.word	0x20000c59
 800782c:	40010800 	.word	0x40010800
 8007830:	20000c4f 	.word	0x20000c4f
 8007834:	40011000 	.word	0x40011000
 8007838:	20000c16 	.word	0x20000c16
 800783c:	20000c52 	.word	0x20000c52
 8007840:	20000c50 	.word	0x20000c50
 8007844:	20000c0d 	.word	0x20000c0d
 8007848:	20000c0e 	.word	0x20000c0e
 800784c:	200009b4 	.word	0x200009b4
 8007850:	200009b5 	.word	0x200009b5
 8007854:	20000c0f 	.word	0x20000c0f
 8007858:	20000b40 	.word	0x20000b40
 800785c:	20000c3c 	.word	0x20000c3c
 8007860:	40010c00 	.word	0x40010c00
 8007864:	20000c5e 	.word	0x20000c5e
 8007868:	20000c65 	.word	0x20000c65
 800786c:	20000c60 	.word	0x20000c60
 8007870:	20000c67 	.word	0x20000c67
 8007874:	20000c71 	.word	0x20000c71
 8007878:	20000c14 	.word	0x20000c14
 800787c:	20000c61 	.word	0x20000c61
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8007880:	4b97      	ldr	r3, [pc, #604]	; (8007ae0 <checkAktifCalisma+0x1590>)
 8007882:	781b      	ldrb	r3, [r3, #0]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d013      	beq.n	80078b0 <checkAktifCalisma+0x1360>
 8007888:	4b96      	ldr	r3, [pc, #600]	; (8007ae4 <checkAktifCalisma+0x1594>)
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d00f      	beq.n	80078b0 <checkAktifCalisma+0x1360>
 8007890:	4b95      	ldr	r3, [pc, #596]	; (8007ae8 <checkAktifCalisma+0x1598>)
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	f083 0301 	eor.w	r3, r3, #1
 8007898:	b2db      	uxtb	r3, r3
 800789a:	2b00      	cmp	r3, #0
 800789c:	d008      	beq.n	80078b0 <checkAktifCalisma+0x1360>
			emniyetCercevesihatasi=0;
 800789e:	4b90      	ldr	r3, [pc, #576]	; (8007ae0 <checkAktifCalisma+0x1590>)
 80078a0:	2200      	movs	r2, #0
 80078a2:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 80078a4:	4b91      	ldr	r3, [pc, #580]	; (8007aec <checkAktifCalisma+0x159c>)
 80078a6:	2200      	movs	r2, #0
 80078a8:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 80078aa:	2002      	movs	r0, #2
 80078ac:	f7fd ffe6 	bl	800587c <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 80078b0:	4b8f      	ldr	r3, [pc, #572]	; (8007af0 <checkAktifCalisma+0x15a0>)
 80078b2:	781b      	ldrb	r3, [r3, #0]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d11c      	bne.n	80078f2 <checkAktifCalisma+0x13a2>
 80078b8:	4b8e      	ldr	r3, [pc, #568]	; (8007af4 <checkAktifCalisma+0x15a4>)
 80078ba:	781b      	ldrb	r3, [r3, #0]
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d118      	bne.n	80078f2 <checkAktifCalisma+0x13a2>
 80078c0:	4b8d      	ldr	r3, [pc, #564]	; (8007af8 <checkAktifCalisma+0x15a8>)
 80078c2:	781b      	ldrb	r3, [r3, #0]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d014      	beq.n	80078f2 <checkAktifCalisma+0x13a2>
 80078c8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80078cc:	488b      	ldr	r0, [pc, #556]	; (8007afc <checkAktifCalisma+0x15ac>)
 80078ce:	f002 f881 	bl	80099d4 <HAL_GPIO_ReadPin>
 80078d2:	4603      	mov	r3, r0
 80078d4:	2b01      	cmp	r3, #1
 80078d6:	d10c      	bne.n	80078f2 <checkAktifCalisma+0x13a2>
			hataVar=1;
 80078d8:	4b89      	ldr	r3, [pc, #548]	; (8007b00 <checkAktifCalisma+0x15b0>)
 80078da:	2201      	movs	r2, #1
 80078dc:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 80078de:	2003      	movs	r0, #3
 80078e0:	f7fe f820 	bl	8005924 <hataKoduLcdGoster>
			hata2EEPROM(3);
 80078e4:	2003      	movs	r0, #3
 80078e6:	f7fe fb81 	bl	8005fec <hata2EEPROM>
			basinchatasi=1;
 80078ea:	4b86      	ldr	r3, [pc, #536]	; (8007b04 <checkAktifCalisma+0x15b4>)
 80078ec:	2201      	movs	r2, #1
 80078ee:	701a      	strb	r2, [r3, #0]
 80078f0:	e015      	b.n	800791e <checkAktifCalisma+0x13ce>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 80078f2:	4b84      	ldr	r3, [pc, #528]	; (8007b04 <checkAktifCalisma+0x15b4>)
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d011      	beq.n	800791e <checkAktifCalisma+0x13ce>
 80078fa:	4b7d      	ldr	r3, [pc, #500]	; (8007af0 <checkAktifCalisma+0x15a0>)
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	2b01      	cmp	r3, #1
 8007900:	d10d      	bne.n	800791e <checkAktifCalisma+0x13ce>
 8007902:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007906:	4880      	ldr	r0, [pc, #512]	; (8007b08 <checkAktifCalisma+0x15b8>)
 8007908:	f002 f864 	bl	80099d4 <HAL_GPIO_ReadPin>
 800790c:	4603      	mov	r3, r0
 800790e:	2b01      	cmp	r3, #1
 8007910:	d105      	bne.n	800791e <checkAktifCalisma+0x13ce>
			basinchatasi=0;
 8007912:	4b7c      	ldr	r3, [pc, #496]	; (8007b04 <checkAktifCalisma+0x15b4>)
 8007914:	2200      	movs	r2, #0
 8007916:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 8007918:	2003      	movs	r0, #3
 800791a:	f7fd ffaf 	bl	800587c <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 800791e:	4b7b      	ldr	r3, [pc, #492]	; (8007b0c <checkAktifCalisma+0x15bc>)
 8007920:	781b      	ldrb	r3, [r3, #0]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d103      	bne.n	800792e <checkAktifCalisma+0x13de>
 8007926:	4b7a      	ldr	r3, [pc, #488]	; (8007b10 <checkAktifCalisma+0x15c0>)
 8007928:	781b      	ldrb	r3, [r3, #0]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d01c      	beq.n	8007968 <checkAktifCalisma+0x1418>
 800792e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007932:	4878      	ldr	r0, [pc, #480]	; (8007b14 <checkAktifCalisma+0x15c4>)
 8007934:	f002 f84e 	bl	80099d4 <HAL_GPIO_ReadPin>
 8007938:	4603      	mov	r3, r0
 800793a:	2b01      	cmp	r3, #1
 800793c:	d114      	bne.n	8007968 <checkAktifCalisma+0x1418>
 800793e:	4b76      	ldr	r3, [pc, #472]	; (8007b18 <checkAktifCalisma+0x15c8>)
 8007940:	781b      	ldrb	r3, [r3, #0]
 8007942:	2b01      	cmp	r3, #1
 8007944:	d003      	beq.n	800794e <checkAktifCalisma+0x13fe>
 8007946:	4b74      	ldr	r3, [pc, #464]	; (8007b18 <checkAktifCalisma+0x15c8>)
 8007948:	781b      	ldrb	r3, [r3, #0]
 800794a:	2b03      	cmp	r3, #3
 800794c:	d10c      	bne.n	8007968 <checkAktifCalisma+0x1418>
			hataVar=1;
 800794e:	4b6c      	ldr	r3, [pc, #432]	; (8007b00 <checkAktifCalisma+0x15b0>)
 8007950:	2201      	movs	r2, #1
 8007952:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 8007954:	2004      	movs	r0, #4
 8007956:	f7fd ffe5 	bl	8005924 <hataKoduLcdGoster>
			hata2EEPROM(4);
 800795a:	2004      	movs	r0, #4
 800795c:	f7fe fb46 	bl	8005fec <hata2EEPROM>
			katkapisivicihatasi=1;
 8007960:	4b6e      	ldr	r3, [pc, #440]	; (8007b1c <checkAktifCalisma+0x15cc>)
 8007962:	2201      	movs	r2, #1
 8007964:	701a      	strb	r2, [r3, #0]
 8007966:	e01f      	b.n	80079a8 <checkAktifCalisma+0x1458>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8007968:	4b6c      	ldr	r3, [pc, #432]	; (8007b1c <checkAktifCalisma+0x15cc>)
 800796a:	781b      	ldrb	r3, [r3, #0]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d01b      	beq.n	80079a8 <checkAktifCalisma+0x1458>
 8007970:	4b6b      	ldr	r3, [pc, #428]	; (8007b20 <checkAktifCalisma+0x15d0>)
 8007972:	781b      	ldrb	r3, [r3, #0]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d017      	beq.n	80079a8 <checkAktifCalisma+0x1458>
 8007978:	4b64      	ldr	r3, [pc, #400]	; (8007b0c <checkAktifCalisma+0x15bc>)
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	f083 0301 	eor.w	r3, r3, #1
 8007980:	b2db      	uxtb	r3, r3
 8007982:	2b00      	cmp	r3, #0
 8007984:	d010      	beq.n	80079a8 <checkAktifCalisma+0x1458>
 8007986:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800798a:	4862      	ldr	r0, [pc, #392]	; (8007b14 <checkAktifCalisma+0x15c4>)
 800798c:	f002 f822 	bl	80099d4 <HAL_GPIO_ReadPin>
 8007990:	4603      	mov	r3, r0
 8007992:	2b00      	cmp	r3, #0
 8007994:	d108      	bne.n	80079a8 <checkAktifCalisma+0x1458>
			katkapisivicihatasi=0;
 8007996:	4b61      	ldr	r3, [pc, #388]	; (8007b1c <checkAktifCalisma+0x15cc>)
 8007998:	2200      	movs	r2, #0
 800799a:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 800799c:	4b5c      	ldr	r3, [pc, #368]	; (8007b10 <checkAktifCalisma+0x15c0>)
 800799e:	2200      	movs	r2, #0
 80079a0:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 80079a2:	2004      	movs	r0, #4
 80079a4:	f7fd ff6a 	bl	800587c <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 80079a8:	4b58      	ldr	r3, [pc, #352]	; (8007b0c <checkAktifCalisma+0x15bc>)
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d103      	bne.n	80079b8 <checkAktifCalisma+0x1468>
 80079b0:	4b5c      	ldr	r3, [pc, #368]	; (8007b24 <checkAktifCalisma+0x15d4>)
 80079b2:	781b      	ldrb	r3, [r3, #0]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d01c      	beq.n	80079f2 <checkAktifCalisma+0x14a2>
 80079b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80079bc:	4855      	ldr	r0, [pc, #340]	; (8007b14 <checkAktifCalisma+0x15c4>)
 80079be:	f002 f809 	bl	80099d4 <HAL_GPIO_ReadPin>
 80079c2:	4603      	mov	r3, r0
 80079c4:	2b01      	cmp	r3, #1
 80079c6:	d114      	bne.n	80079f2 <checkAktifCalisma+0x14a2>
 80079c8:	4b53      	ldr	r3, [pc, #332]	; (8007b18 <checkAktifCalisma+0x15c8>)
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	2b01      	cmp	r3, #1
 80079ce:	d003      	beq.n	80079d8 <checkAktifCalisma+0x1488>
 80079d0:	4b51      	ldr	r3, [pc, #324]	; (8007b18 <checkAktifCalisma+0x15c8>)
 80079d2:	781b      	ldrb	r3, [r3, #0]
 80079d4:	2b03      	cmp	r3, #3
 80079d6:	d10c      	bne.n	80079f2 <checkAktifCalisma+0x14a2>
			hataVar=1;
 80079d8:	4b49      	ldr	r3, [pc, #292]	; (8007b00 <checkAktifCalisma+0x15b0>)
 80079da:	2201      	movs	r2, #1
 80079dc:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 80079de:	2005      	movs	r0, #5
 80079e0:	f7fd ffa0 	bl	8005924 <hataKoduLcdGoster>
			hata2EEPROM(5);
 80079e4:	2005      	movs	r0, #5
 80079e6:	f7fe fb01 	bl	8005fec <hata2EEPROM>
			tablakapisivicihatasi=1;
 80079ea:	4b4f      	ldr	r3, [pc, #316]	; (8007b28 <checkAktifCalisma+0x15d8>)
 80079ec:	2201      	movs	r2, #1
 80079ee:	701a      	strb	r2, [r3, #0]
 80079f0:	e023      	b.n	8007a3a <checkAktifCalisma+0x14ea>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 80079f2:	4b4d      	ldr	r3, [pc, #308]	; (8007b28 <checkAktifCalisma+0x15d8>)
 80079f4:	781b      	ldrb	r3, [r3, #0]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d01f      	beq.n	8007a3a <checkAktifCalisma+0x14ea>
 80079fa:	4b49      	ldr	r3, [pc, #292]	; (8007b20 <checkAktifCalisma+0x15d0>)
 80079fc:	781b      	ldrb	r3, [r3, #0]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d01b      	beq.n	8007a3a <checkAktifCalisma+0x14ea>
 8007a02:	4b42      	ldr	r3, [pc, #264]	; (8007b0c <checkAktifCalisma+0x15bc>)
 8007a04:	781b      	ldrb	r3, [r3, #0]
 8007a06:	f083 0301 	eor.w	r3, r3, #1
 8007a0a:	b2db      	uxtb	r3, r3
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d014      	beq.n	8007a3a <checkAktifCalisma+0x14ea>
 8007a10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007a14:	483f      	ldr	r0, [pc, #252]	; (8007b14 <checkAktifCalisma+0x15c4>)
 8007a16:	f001 ffdd 	bl	80099d4 <HAL_GPIO_ReadPin>
 8007a1a:	4603      	mov	r3, r0
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d10c      	bne.n	8007a3a <checkAktifCalisma+0x14ea>
 8007a20:	4b3f      	ldr	r3, [pc, #252]	; (8007b20 <checkAktifCalisma+0x15d0>)
 8007a22:	781b      	ldrb	r3, [r3, #0]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d008      	beq.n	8007a3a <checkAktifCalisma+0x14ea>
			tablakapisivicihatasi=0;
 8007a28:	4b3f      	ldr	r3, [pc, #252]	; (8007b28 <checkAktifCalisma+0x15d8>)
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 8007a2e:	4b3d      	ldr	r3, [pc, #244]	; (8007b24 <checkAktifCalisma+0x15d4>)
 8007a30:	2200      	movs	r2, #0
 8007a32:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 8007a34:	2005      	movs	r0, #5
 8007a36:	f7fd ff21 	bl	800587c <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 8007a3a:	4b2f      	ldr	r3, [pc, #188]	; (8007af8 <checkAktifCalisma+0x15a8>)
 8007a3c:	781b      	ldrb	r3, [r3, #0]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d107      	bne.n	8007a52 <checkAktifCalisma+0x1502>
 8007a42:	4b29      	ldr	r3, [pc, #164]	; (8007ae8 <checkAktifCalisma+0x1598>)
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d103      	bne.n	8007a52 <checkAktifCalisma+0x1502>
 8007a4a:	4b38      	ldr	r3, [pc, #224]	; (8007b2c <checkAktifCalisma+0x15dc>)
 8007a4c:	781b      	ldrb	r3, [r3, #0]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d014      	beq.n	8007a7c <checkAktifCalisma+0x152c>
		    if(millis-timer4>=makineCalismaTmr) {
 8007a52:	4b37      	ldr	r3, [pc, #220]	; (8007b30 <checkAktifCalisma+0x15e0>)
 8007a54:	681a      	ldr	r2, [r3, #0]
 8007a56:	4b37      	ldr	r3, [pc, #220]	; (8007b34 <checkAktifCalisma+0x15e4>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	1ad3      	subs	r3, r2, r3
 8007a5c:	4a36      	ldr	r2, [pc, #216]	; (8007b38 <checkAktifCalisma+0x15e8>)
 8007a5e:	7812      	ldrb	r2, [r2, #0]
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d30b      	bcc.n	8007a7c <checkAktifCalisma+0x152c>
			  	hataVar=1;
 8007a64:	4b26      	ldr	r3, [pc, #152]	; (8007b00 <checkAktifCalisma+0x15b0>)
 8007a66:	2201      	movs	r2, #1
 8007a68:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 8007a6a:	2006      	movs	r0, #6
 8007a6c:	f7fd ff5a 	bl	8005924 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 8007a70:	2006      	movs	r0, #6
 8007a72:	f7fe fabb 	bl	8005fec <hata2EEPROM>
			  	maksimumcalismahatasi=1;
 8007a76:	4b31      	ldr	r3, [pc, #196]	; (8007b3c <checkAktifCalisma+0x15ec>)
 8007a78:	2201      	movs	r2, #1
 8007a7a:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8007a7c:	4b2f      	ldr	r3, [pc, #188]	; (8007b3c <checkAktifCalisma+0x15ec>)
 8007a7e:	781b      	ldrb	r3, [r3, #0]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d013      	beq.n	8007aac <checkAktifCalisma+0x155c>
 8007a84:	2108      	movs	r1, #8
 8007a86:	4823      	ldr	r0, [pc, #140]	; (8007b14 <checkAktifCalisma+0x15c4>)
 8007a88:	f001 ffa4 	bl	80099d4 <HAL_GPIO_ReadPin>
 8007a8c:	4603      	mov	r3, r0
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d00c      	beq.n	8007aac <checkAktifCalisma+0x155c>
 8007a92:	4b1e      	ldr	r3, [pc, #120]	; (8007b0c <checkAktifCalisma+0x15bc>)
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	f083 0301 	eor.w	r3, r3, #1
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d005      	beq.n	8007aac <checkAktifCalisma+0x155c>
			maksimumcalismahatasi=0;
 8007aa0:	4b26      	ldr	r3, [pc, #152]	; (8007b3c <checkAktifCalisma+0x15ec>)
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 8007aa6:	2006      	movs	r0, #6
 8007aa8:	f7fd fee8 	bl	800587c <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8007aac:	4b24      	ldr	r3, [pc, #144]	; (8007b40 <checkAktifCalisma+0x15f0>)
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d10b      	bne.n	8007acc <checkAktifCalisma+0x157c>
 8007ab4:	4b0c      	ldr	r3, [pc, #48]	; (8007ae8 <checkAktifCalisma+0x1598>)
 8007ab6:	781b      	ldrb	r3, [r3, #0]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d107      	bne.n	8007acc <checkAktifCalisma+0x157c>
 8007abc:	4b21      	ldr	r3, [pc, #132]	; (8007b44 <checkAktifCalisma+0x15f4>)
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d103      	bne.n	8007acc <checkAktifCalisma+0x157c>
 8007ac4:	4b19      	ldr	r3, [pc, #100]	; (8007b2c <checkAktifCalisma+0x15dc>)
 8007ac6:	781b      	ldrb	r3, [r3, #0]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d03f      	beq.n	8007b4c <checkAktifCalisma+0x15fc>
			makineCalisiyor=0;
 8007acc:	4b1e      	ldr	r3, [pc, #120]	; (8007b48 <checkAktifCalisma+0x15f8>)
 8007ace:	2200      	movs	r2, #0
 8007ad0:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 8007ad2:	4b0f      	ldr	r3, [pc, #60]	; (8007b10 <checkAktifCalisma+0x15c0>)
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 8007ad8:	4b12      	ldr	r3, [pc, #72]	; (8007b24 <checkAktifCalisma+0x15d4>)
 8007ada:	2201      	movs	r2, #1
 8007adc:	701a      	strb	r2, [r3, #0]
 8007ade:	e03c      	b.n	8007b5a <checkAktifCalisma+0x160a>
 8007ae0:	20000c61 	.word	0x20000c61
 8007ae4:	20000c67 	.word	0x20000c67
 8007ae8:	20000c48 	.word	0x20000c48
 8007aec:	20000c71 	.word	0x20000c71
 8007af0:	20000c13 	.word	0x20000c13
 8007af4:	20000c17 	.word	0x20000c17
 8007af8:	20000c64 	.word	0x20000c64
 8007afc:	40011000 	.word	0x40011000
 8007b00:	20000c65 	.word	0x20000c65
 8007b04:	20000c6e 	.word	0x20000c6e
 8007b08:	40010c00 	.word	0x40010c00
 8007b0c:	20000c5e 	.word	0x20000c5e
 8007b10:	20000c72 	.word	0x20000c72
 8007b14:	40010800 	.word	0x40010800
 8007b18:	20000c18 	.word	0x20000c18
 8007b1c:	20000c6f 	.word	0x20000c6f
 8007b20:	20000c52 	.word	0x20000c52
 8007b24:	20000c73 	.word	0x20000c73
 8007b28:	20000c70 	.word	0x20000c70
 8007b2c:	20000c47 	.word	0x20000c47
 8007b30:	20000bb8 	.word	0x20000bb8
 8007b34:	20000bcc 	.word	0x20000bcc
 8007b38:	20000c28 	.word	0x20000c28
 8007b3c:	20000c5f 	.word	0x20000c5f
 8007b40:	20000c45 	.word	0x20000c45
 8007b44:	20000c46 	.word	0x20000c46
 8007b48:	20000c66 	.word	0x20000c66
		} else {
			makineCalisiyor=1;
 8007b4c:	4b1e      	ldr	r3, [pc, #120]	; (8007bc8 <checkAktifCalisma+0x1678>)
 8007b4e:	2201      	movs	r2, #1
 8007b50:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 8007b52:	4b1e      	ldr	r3, [pc, #120]	; (8007bcc <checkAktifCalisma+0x167c>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a1e      	ldr	r2, [pc, #120]	; (8007bd0 <checkAktifCalisma+0x1680>)
 8007b58:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8007b5a:	4b1e      	ldr	r3, [pc, #120]	; (8007bd4 <checkAktifCalisma+0x1684>)
 8007b5c:	781b      	ldrb	r3, [r3, #0]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d02f      	beq.n	8007bc2 <checkAktifCalisma+0x1672>
 8007b62:	4b1d      	ldr	r3, [pc, #116]	; (8007bd8 <checkAktifCalisma+0x1688>)
 8007b64:	781b      	ldrb	r3, [r3, #0]
 8007b66:	f083 0301 	eor.w	r3, r3, #1
 8007b6a:	b2db      	uxtb	r3, r3
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d028      	beq.n	8007bc2 <checkAktifCalisma+0x1672>
 8007b70:	4b1a      	ldr	r3, [pc, #104]	; (8007bdc <checkAktifCalisma+0x168c>)
 8007b72:	781b      	ldrb	r3, [r3, #0]
 8007b74:	f083 0301 	eor.w	r3, r3, #1
 8007b78:	b2db      	uxtb	r3, r3
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d021      	beq.n	8007bc2 <checkAktifCalisma+0x1672>
 8007b7e:	4b18      	ldr	r3, [pc, #96]	; (8007be0 <checkAktifCalisma+0x1690>)
 8007b80:	781b      	ldrb	r3, [r3, #0]
 8007b82:	f083 0301 	eor.w	r3, r3, #1
 8007b86:	b2db      	uxtb	r3, r3
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d01a      	beq.n	8007bc2 <checkAktifCalisma+0x1672>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8007b8c:	4b15      	ldr	r3, [pc, #84]	; (8007be4 <checkAktifCalisma+0x1694>)
 8007b8e:	781b      	ldrb	r3, [r3, #0]
 8007b90:	f083 0301 	eor.w	r3, r3, #1
 8007b94:	b2db      	uxtb	r3, r3
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d013      	beq.n	8007bc2 <checkAktifCalisma+0x1672>
 8007b9a:	4b13      	ldr	r3, [pc, #76]	; (8007be8 <checkAktifCalisma+0x1698>)
 8007b9c:	781b      	ldrb	r3, [r3, #0]
 8007b9e:	f083 0301 	eor.w	r3, r3, #1
 8007ba2:	b2db      	uxtb	r3, r3
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d00c      	beq.n	8007bc2 <checkAktifCalisma+0x1672>
 8007ba8:	4b10      	ldr	r3, [pc, #64]	; (8007bec <checkAktifCalisma+0x169c>)
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	f083 0301 	eor.w	r3, r3, #1
 8007bb0:	b2db      	uxtb	r3, r3
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d005      	beq.n	8007bc2 <checkAktifCalisma+0x1672>
			hataVar=0;
 8007bb6:	4b07      	ldr	r3, [pc, #28]	; (8007bd4 <checkAktifCalisma+0x1684>)
 8007bb8:	2200      	movs	r2, #0
 8007bba:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 8007bbc:	2007      	movs	r0, #7
 8007bbe:	f7fd fe5d 	bl	800587c <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 8007bc2:	bf00      	nop
 8007bc4:	bd80      	pop	{r7, pc}
 8007bc6:	bf00      	nop
 8007bc8:	20000c66 	.word	0x20000c66
 8007bcc:	20000bb8 	.word	0x20000bb8
 8007bd0:	20000bcc 	.word	0x20000bcc
 8007bd4:	20000c65 	.word	0x20000c65
 8007bd8:	20000c60 	.word	0x20000c60
 8007bdc:	20000c61 	.word	0x20000c61
 8007be0:	20000c6e 	.word	0x20000c6e
 8007be4:	20000c6f 	.word	0x20000c6f
 8007be8:	20000c70 	.word	0x20000c70
 8007bec:	20000c5f 	.word	0x20000c5f

08007bf0 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8007bf0:	b580      	push	{r7, lr}
 8007bf2:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8007bf4:	4b8b      	ldr	r3, [pc, #556]	; (8007e24 <checkDemoModCalisma+0x234>)
 8007bf6:	781b      	ldrb	r3, [r3, #0]
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	f040 8229 	bne.w	8008050 <checkDemoModCalisma+0x460>
 8007bfe:	4b8a      	ldr	r3, [pc, #552]	; (8007e28 <checkDemoModCalisma+0x238>)
 8007c00:	781b      	ldrb	r3, [r3, #0]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	f000 8224 	beq.w	8008050 <checkDemoModCalisma+0x460>
 8007c08:	4b88      	ldr	r3, [pc, #544]	; (8007e2c <checkDemoModCalisma+0x23c>)
 8007c0a:	781b      	ldrb	r3, [r3, #0]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	f040 821f 	bne.w	8008050 <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8007c12:	2102      	movs	r1, #2
 8007c14:	4886      	ldr	r0, [pc, #536]	; (8007e30 <checkDemoModCalisma+0x240>)
 8007c16:	f001 fedd 	bl	80099d4 <HAL_GPIO_ReadPin>
 8007c1a:	4603      	mov	r3, r0
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d11d      	bne.n	8007c5c <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 8007c20:	4b84      	ldr	r3, [pc, #528]	; (8007e34 <checkDemoModCalisma+0x244>)
 8007c22:	781b      	ldrb	r3, [r3, #0]
 8007c24:	f083 0301 	eor.w	r3, r3, #1
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d016      	beq.n	8007c5c <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 8007c2e:	4b82      	ldr	r3, [pc, #520]	; (8007e38 <checkDemoModCalisma+0x248>)
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	f083 0301 	eor.w	r3, r3, #1
 8007c36:	b2db      	uxtb	r3, r3
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d00f      	beq.n	8007c5c <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 8007c3c:	4b7f      	ldr	r3, [pc, #508]	; (8007e3c <checkDemoModCalisma+0x24c>)
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	f083 0301 	eor.w	r3, r3, #1
 8007c44:	b2db      	uxtb	r3, r3
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d008      	beq.n	8007c5c <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	2104      	movs	r1, #4
 8007c4e:	487c      	ldr	r0, [pc, #496]	; (8007e40 <checkDemoModCalisma+0x250>)
 8007c50:	f001 fed7 	bl	8009a02 <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 8007c54:	4b7b      	ldr	r3, [pc, #492]	; (8007e44 <checkDemoModCalisma+0x254>)
 8007c56:	2201      	movs	r2, #1
 8007c58:	701a      	strb	r2, [r3, #0]
 8007c5a:	e00e      	b.n	8007c7a <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8007c5c:	2102      	movs	r1, #2
 8007c5e:	4874      	ldr	r0, [pc, #464]	; (8007e30 <checkDemoModCalisma+0x240>)
 8007c60:	f001 feb8 	bl	80099d4 <HAL_GPIO_ReadPin>
 8007c64:	4603      	mov	r3, r0
 8007c66:	2b01      	cmp	r3, #1
 8007c68:	d107      	bne.n	8007c7a <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007c6a:	2200      	movs	r2, #0
 8007c6c:	2104      	movs	r1, #4
 8007c6e:	4874      	ldr	r0, [pc, #464]	; (8007e40 <checkDemoModCalisma+0x250>)
 8007c70:	f001 fec7 	bl	8009a02 <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 8007c74:	4b73      	ldr	r3, [pc, #460]	; (8007e44 <checkDemoModCalisma+0x254>)
 8007c76:	2200      	movs	r2, #0
 8007c78:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8007c7a:	4b72      	ldr	r3, [pc, #456]	; (8007e44 <checkDemoModCalisma+0x254>)
 8007c7c:	781b      	ldrb	r3, [r3, #0]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d10b      	bne.n	8007c9a <checkDemoModCalisma+0xaa>
 8007c82:	4b6d      	ldr	r3, [pc, #436]	; (8007e38 <checkDemoModCalisma+0x248>)
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d107      	bne.n	8007c9a <checkDemoModCalisma+0xaa>
 8007c8a:	4b6c      	ldr	r3, [pc, #432]	; (8007e3c <checkDemoModCalisma+0x24c>)
 8007c8c:	781b      	ldrb	r3, [r3, #0]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d103      	bne.n	8007c9a <checkDemoModCalisma+0xaa>
 8007c92:	4b68      	ldr	r3, [pc, #416]	; (8007e34 <checkDemoModCalisma+0x244>)
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d00c      	beq.n	8007cb4 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007ca0:	4867      	ldr	r0, [pc, #412]	; (8007e40 <checkDemoModCalisma+0x250>)
 8007ca2:	f001 feae 	bl	8009a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8007ca6:	2201      	movs	r2, #1
 8007ca8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007cac:	4864      	ldr	r0, [pc, #400]	; (8007e40 <checkDemoModCalisma+0x250>)
 8007cae:	f001 fea8 	bl	8009a02 <HAL_GPIO_WritePin>
 8007cb2:	e00b      	b.n	8007ccc <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007cba:	4861      	ldr	r0, [pc, #388]	; (8007e40 <checkDemoModCalisma+0x250>)
 8007cbc:	f001 fea1 	bl	8009a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007cc6:	485e      	ldr	r0, [pc, #376]	; (8007e40 <checkDemoModCalisma+0x250>)
 8007cc8:	f001 fe9b 	bl	8009a02 <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007ccc:	2102      	movs	r1, #2
 8007cce:	4858      	ldr	r0, [pc, #352]	; (8007e30 <checkDemoModCalisma+0x240>)
 8007cd0:	f001 fe80 	bl	80099d4 <HAL_GPIO_ReadPin>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	2b01      	cmp	r3, #1
 8007cd8:	d10d      	bne.n	8007cf6 <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8007cda:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007cde:	4854      	ldr	r0, [pc, #336]	; (8007e30 <checkDemoModCalisma+0x240>)
 8007ce0:	f001 fe78 	bl	80099d4 <HAL_GPIO_ReadPin>
 8007ce4:	4603      	mov	r3, r0
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d105      	bne.n	8007cf6 <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 8007cea:	4b56      	ldr	r3, [pc, #344]	; (8007e44 <checkDemoModCalisma+0x254>)
 8007cec:	781b      	ldrb	r3, [r3, #0]
 8007cee:	f083 0301 	eor.w	r3, r3, #1
 8007cf2:	b2db      	uxtb	r3, r3
 8007cf4:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007cf6:	2102      	movs	r1, #2
 8007cf8:	484d      	ldr	r0, [pc, #308]	; (8007e30 <checkDemoModCalisma+0x240>)
 8007cfa:	f001 fe6b 	bl	80099d4 <HAL_GPIO_ReadPin>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	2b01      	cmp	r3, #1
 8007d02:	d125      	bne.n	8007d50 <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8007d04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007d08:	4849      	ldr	r0, [pc, #292]	; (8007e30 <checkDemoModCalisma+0x240>)
 8007d0a:	f001 fe63 	bl	80099d4 <HAL_GPIO_ReadPin>
 8007d0e:	4603      	mov	r3, r0
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d11d      	bne.n	8007d50 <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 8007d14:	4b4b      	ldr	r3, [pc, #300]	; (8007e44 <checkDemoModCalisma+0x254>)
 8007d16:	781b      	ldrb	r3, [r3, #0]
 8007d18:	f083 0301 	eor.w	r3, r3, #1
 8007d1c:	b2db      	uxtb	r3, r3
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d016      	beq.n	8007d50 <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 8007d22:	4b44      	ldr	r3, [pc, #272]	; (8007e34 <checkDemoModCalisma+0x244>)
 8007d24:	781b      	ldrb	r3, [r3, #0]
 8007d26:	f083 0301 	eor.w	r3, r3, #1
 8007d2a:	b2db      	uxtb	r3, r3
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d00f      	beq.n	8007d50 <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 8007d30:	4b42      	ldr	r3, [pc, #264]	; (8007e3c <checkDemoModCalisma+0x24c>)
 8007d32:	781b      	ldrb	r3, [r3, #0]
 8007d34:	f083 0301 	eor.w	r3, r3, #1
 8007d38:	b2db      	uxtb	r3, r3
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d008      	beq.n	8007d50 <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8007d3e:	2201      	movs	r2, #1
 8007d40:	2120      	movs	r1, #32
 8007d42:	483b      	ldr	r0, [pc, #236]	; (8007e30 <checkDemoModCalisma+0x240>)
 8007d44:	f001 fe5d 	bl	8009a02 <HAL_GPIO_WritePin>
			demoDevYukari=1;
 8007d48:	4b3b      	ldr	r3, [pc, #236]	; (8007e38 <checkDemoModCalisma+0x248>)
 8007d4a:	2201      	movs	r2, #1
 8007d4c:	701a      	strb	r2, [r3, #0]
 8007d4e:	e007      	b.n	8007d60 <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007d50:	2200      	movs	r2, #0
 8007d52:	2120      	movs	r1, #32
 8007d54:	4836      	ldr	r0, [pc, #216]	; (8007e30 <checkDemoModCalisma+0x240>)
 8007d56:	f001 fe54 	bl	8009a02 <HAL_GPIO_WritePin>
			demoDevYukari=0;
 8007d5a:	4b37      	ldr	r3, [pc, #220]	; (8007e38 <checkDemoModCalisma+0x248>)
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007d60:	2102      	movs	r1, #2
 8007d62:	4833      	ldr	r0, [pc, #204]	; (8007e30 <checkDemoModCalisma+0x240>)
 8007d64:	f001 fe36 	bl	80099d4 <HAL_GPIO_ReadPin>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d125      	bne.n	8007dba <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8007d6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007d72:	482f      	ldr	r0, [pc, #188]	; (8007e30 <checkDemoModCalisma+0x240>)
 8007d74:	f001 fe2e 	bl	80099d4 <HAL_GPIO_ReadPin>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d11d      	bne.n	8007dba <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 8007d7e:	4b31      	ldr	r3, [pc, #196]	; (8007e44 <checkDemoModCalisma+0x254>)
 8007d80:	781b      	ldrb	r3, [r3, #0]
 8007d82:	f083 0301 	eor.w	r3, r3, #1
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d016      	beq.n	8007dba <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 8007d8c:	4b2a      	ldr	r3, [pc, #168]	; (8007e38 <checkDemoModCalisma+0x248>)
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	f083 0301 	eor.w	r3, r3, #1
 8007d94:	b2db      	uxtb	r3, r3
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d00f      	beq.n	8007dba <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 8007d9a:	4b26      	ldr	r3, [pc, #152]	; (8007e34 <checkDemoModCalisma+0x244>)
 8007d9c:	781b      	ldrb	r3, [r3, #0]
 8007d9e:	f083 0301 	eor.w	r3, r3, #1
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d008      	beq.n	8007dba <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8007da8:	2201      	movs	r2, #1
 8007daa:	2110      	movs	r1, #16
 8007dac:	4820      	ldr	r0, [pc, #128]	; (8007e30 <checkDemoModCalisma+0x240>)
 8007dae:	f001 fe28 	bl	8009a02 <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 8007db2:	4b22      	ldr	r3, [pc, #136]	; (8007e3c <checkDemoModCalisma+0x24c>)
 8007db4:	2201      	movs	r2, #1
 8007db6:	701a      	strb	r2, [r3, #0]
 8007db8:	e007      	b.n	8007dca <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007dba:	2200      	movs	r2, #0
 8007dbc:	2110      	movs	r1, #16
 8007dbe:	481c      	ldr	r0, [pc, #112]	; (8007e30 <checkDemoModCalisma+0x240>)
 8007dc0:	f001 fe1f 	bl	8009a02 <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 8007dc4:	4b1d      	ldr	r3, [pc, #116]	; (8007e3c <checkDemoModCalisma+0x24c>)
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8007dca:	2104      	movs	r1, #4
 8007dcc:	4818      	ldr	r0, [pc, #96]	; (8007e30 <checkDemoModCalisma+0x240>)
 8007dce:	f001 fe01 	bl	80099d4 <HAL_GPIO_ReadPin>
 8007dd2:	4603      	mov	r3, r0
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d139      	bne.n	8007e4c <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 8007dd8:	4b1a      	ldr	r3, [pc, #104]	; (8007e44 <checkDemoModCalisma+0x254>)
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	f083 0301 	eor.w	r3, r3, #1
 8007de0:	b2db      	uxtb	r3, r3
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d032      	beq.n	8007e4c <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 8007de6:	4b15      	ldr	r3, [pc, #84]	; (8007e3c <checkDemoModCalisma+0x24c>)
 8007de8:	781b      	ldrb	r3, [r3, #0]
 8007dea:	f083 0301 	eor.w	r3, r3, #1
 8007dee:	b2db      	uxtb	r3, r3
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d02b      	beq.n	8007e4c <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 8007df4:	4b10      	ldr	r3, [pc, #64]	; (8007e38 <checkDemoModCalisma+0x248>)
 8007df6:	781b      	ldrb	r3, [r3, #0]
 8007df8:	f083 0301 	eor.w	r3, r3, #1
 8007dfc:	b2db      	uxtb	r3, r3
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d024      	beq.n	8007e4c <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8007e02:	2201      	movs	r2, #1
 8007e04:	2102      	movs	r1, #2
 8007e06:	480e      	ldr	r0, [pc, #56]	; (8007e40 <checkDemoModCalisma+0x250>)
 8007e08:	f001 fdfb 	bl	8009a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	2101      	movs	r1, #1
 8007e10:	480b      	ldr	r0, [pc, #44]	; (8007e40 <checkDemoModCalisma+0x250>)
 8007e12:	f001 fdf6 	bl	8009a02 <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 8007e16:	4b07      	ldr	r3, [pc, #28]	; (8007e34 <checkDemoModCalisma+0x244>)
 8007e18:	2201      	movs	r2, #1
 8007e1a:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 8007e1c:	4b0a      	ldr	r3, [pc, #40]	; (8007e48 <checkDemoModCalisma+0x258>)
 8007e1e:	2201      	movs	r2, #1
 8007e20:	701a      	strb	r2, [r3, #0]
 8007e22:	e027      	b.n	8007e74 <checkDemoModCalisma+0x284>
 8007e24:	20000c2e 	.word	0x20000c2e
 8007e28:	20000c62 	.word	0x20000c62
 8007e2c:	20000c2d 	.word	0x20000c2d
 8007e30:	40011000 	.word	0x40011000
 8007e34:	20000c69 	.word	0x20000c69
 8007e38:	20000c6a 	.word	0x20000c6a
 8007e3c:	20000c6b 	.word	0x20000c6b
 8007e40:	40010c00 	.word	0x40010c00
 8007e44:	20000c68 	.word	0x20000c68
 8007e48:	20000c4e 	.word	0x20000c4e
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8007e4c:	2104      	movs	r1, #4
 8007e4e:	48a0      	ldr	r0, [pc, #640]	; (80080d0 <checkDemoModCalisma+0x4e0>)
 8007e50:	f001 fdc0 	bl	80099d4 <HAL_GPIO_ReadPin>
 8007e54:	4603      	mov	r3, r0
 8007e56:	2b01      	cmp	r3, #1
 8007e58:	d10c      	bne.n	8007e74 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	2102      	movs	r1, #2
 8007e5e:	489d      	ldr	r0, [pc, #628]	; (80080d4 <checkDemoModCalisma+0x4e4>)
 8007e60:	f001 fdcf 	bl	8009a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007e64:	2200      	movs	r2, #0
 8007e66:	2101      	movs	r1, #1
 8007e68:	489a      	ldr	r0, [pc, #616]	; (80080d4 <checkDemoModCalisma+0x4e4>)
 8007e6a:	f001 fdca 	bl	8009a02 <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 8007e6e:	4b9a      	ldr	r3, [pc, #616]	; (80080d8 <checkDemoModCalisma+0x4e8>)
 8007e70:	2200      	movs	r2, #0
 8007e72:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8007e74:	2104      	movs	r1, #4
 8007e76:	4896      	ldr	r0, [pc, #600]	; (80080d0 <checkDemoModCalisma+0x4e0>)
 8007e78:	f001 fdac 	bl	80099d4 <HAL_GPIO_ReadPin>
 8007e7c:	4603      	mov	r3, r0
 8007e7e:	2b01      	cmp	r3, #1
 8007e80:	d10d      	bne.n	8007e9e <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8007e82:	2201      	movs	r2, #1
 8007e84:	2180      	movs	r1, #128	; 0x80
 8007e86:	4895      	ldr	r0, [pc, #596]	; (80080dc <checkDemoModCalisma+0x4ec>)
 8007e88:	f001 fdbb 	bl	8009a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8007e8c:	2201      	movs	r2, #1
 8007e8e:	2120      	movs	r1, #32
 8007e90:	4892      	ldr	r0, [pc, #584]	; (80080dc <checkDemoModCalisma+0x4ec>)
 8007e92:	f001 fdb6 	bl	8009a02 <HAL_GPIO_WritePin>
			timer3 = millis;
 8007e96:	4b92      	ldr	r3, [pc, #584]	; (80080e0 <checkDemoModCalisma+0x4f0>)
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	4a92      	ldr	r2, [pc, #584]	; (80080e4 <checkDemoModCalisma+0x4f4>)
 8007e9c:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8007e9e:	4b90      	ldr	r3, [pc, #576]	; (80080e0 <checkDemoModCalisma+0x4f0>)
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	4b90      	ldr	r3, [pc, #576]	; (80080e4 <checkDemoModCalisma+0x4f4>)
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	1ad3      	subs	r3, r2, r3
 8007ea8:	2b04      	cmp	r3, #4
 8007eaa:	d909      	bls.n	8007ec0 <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007eac:	2200      	movs	r2, #0
 8007eae:	2180      	movs	r1, #128	; 0x80
 8007eb0:	488a      	ldr	r0, [pc, #552]	; (80080dc <checkDemoModCalisma+0x4ec>)
 8007eb2:	f001 fda6 	bl	8009a02 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	2120      	movs	r1, #32
 8007eba:	4888      	ldr	r0, [pc, #544]	; (80080dc <checkDemoModCalisma+0x4ec>)
 8007ebc:	f001 fda1 	bl	8009a02 <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8007ec0:	2102      	movs	r1, #2
 8007ec2:	4883      	ldr	r0, [pc, #524]	; (80080d0 <checkDemoModCalisma+0x4e0>)
 8007ec4:	f001 fd86 	bl	80099d4 <HAL_GPIO_ReadPin>
 8007ec8:	4603      	mov	r3, r0
 8007eca:	2b01      	cmp	r3, #1
 8007ecc:	d108      	bne.n	8007ee0 <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8007ece:	2201      	movs	r2, #1
 8007ed0:	2140      	movs	r1, #64	; 0x40
 8007ed2:	4882      	ldr	r0, [pc, #520]	; (80080dc <checkDemoModCalisma+0x4ec>)
 8007ed4:	f001 fd95 	bl	8009a02 <HAL_GPIO_WritePin>
			timer3 = millis;
 8007ed8:	4b81      	ldr	r3, [pc, #516]	; (80080e0 <checkDemoModCalisma+0x4f0>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	4a81      	ldr	r2, [pc, #516]	; (80080e4 <checkDemoModCalisma+0x4f4>)
 8007ede:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8007ee0:	4b7f      	ldr	r3, [pc, #508]	; (80080e0 <checkDemoModCalisma+0x4f0>)
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	4b7f      	ldr	r3, [pc, #508]	; (80080e4 <checkDemoModCalisma+0x4f4>)
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	1ad3      	subs	r3, r2, r3
 8007eea:	2b04      	cmp	r3, #4
 8007eec:	d904      	bls.n	8007ef8 <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007eee:	2200      	movs	r2, #0
 8007ef0:	2140      	movs	r1, #64	; 0x40
 8007ef2:	487a      	ldr	r0, [pc, #488]	; (80080dc <checkDemoModCalisma+0x4ec>)
 8007ef4:	f001 fd85 	bl	8009a02 <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8007ef8:	4b7b      	ldr	r3, [pc, #492]	; (80080e8 <checkDemoModCalisma+0x4f8>)
 8007efa:	781b      	ldrb	r3, [r3, #0]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d058      	beq.n	8007fb2 <checkDemoModCalisma+0x3c2>
 8007f00:	4b7a      	ldr	r3, [pc, #488]	; (80080ec <checkDemoModCalisma+0x4fc>)
 8007f02:	781b      	ldrb	r3, [r3, #0]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d054      	beq.n	8007fb2 <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 8007f08:	4b79      	ldr	r3, [pc, #484]	; (80080f0 <checkDemoModCalisma+0x500>)
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	3301      	adds	r3, #1
 8007f0e:	b2da      	uxtb	r2, r3
 8007f10:	4b77      	ldr	r3, [pc, #476]	; (80080f0 <checkDemoModCalisma+0x500>)
 8007f12:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 8007f14:	4b76      	ldr	r3, [pc, #472]	; (80080f0 <checkDemoModCalisma+0x500>)
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	2b09      	cmp	r3, #9
 8007f1a:	d908      	bls.n	8007f2e <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 8007f1c:	4b74      	ldr	r3, [pc, #464]	; (80080f0 <checkDemoModCalisma+0x500>)
 8007f1e:	2200      	movs	r2, #0
 8007f20:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 8007f22:	4b74      	ldr	r3, [pc, #464]	; (80080f4 <checkDemoModCalisma+0x504>)
 8007f24:	781b      	ldrb	r3, [r3, #0]
 8007f26:	3301      	adds	r3, #1
 8007f28:	b2da      	uxtb	r2, r3
 8007f2a:	4b72      	ldr	r3, [pc, #456]	; (80080f4 <checkDemoModCalisma+0x504>)
 8007f2c:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 8007f2e:	4b71      	ldr	r3, [pc, #452]	; (80080f4 <checkDemoModCalisma+0x504>)
 8007f30:	781b      	ldrb	r3, [r3, #0]
 8007f32:	2b09      	cmp	r3, #9
 8007f34:	d908      	bls.n	8007f48 <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 8007f36:	4b6f      	ldr	r3, [pc, #444]	; (80080f4 <checkDemoModCalisma+0x504>)
 8007f38:	2200      	movs	r2, #0
 8007f3a:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 8007f3c:	4b6e      	ldr	r3, [pc, #440]	; (80080f8 <checkDemoModCalisma+0x508>)
 8007f3e:	781b      	ldrb	r3, [r3, #0]
 8007f40:	3301      	adds	r3, #1
 8007f42:	b2da      	uxtb	r2, r3
 8007f44:	4b6c      	ldr	r3, [pc, #432]	; (80080f8 <checkDemoModCalisma+0x508>)
 8007f46:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 8007f48:	4b6b      	ldr	r3, [pc, #428]	; (80080f8 <checkDemoModCalisma+0x508>)
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	2b09      	cmp	r3, #9
 8007f4e:	d908      	bls.n	8007f62 <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 8007f50:	4b69      	ldr	r3, [pc, #420]	; (80080f8 <checkDemoModCalisma+0x508>)
 8007f52:	2200      	movs	r2, #0
 8007f54:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 8007f56:	4b69      	ldr	r3, [pc, #420]	; (80080fc <checkDemoModCalisma+0x50c>)
 8007f58:	781b      	ldrb	r3, [r3, #0]
 8007f5a:	3301      	adds	r3, #1
 8007f5c:	b2da      	uxtb	r2, r3
 8007f5e:	4b67      	ldr	r3, [pc, #412]	; (80080fc <checkDemoModCalisma+0x50c>)
 8007f60:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 8007f62:	4b66      	ldr	r3, [pc, #408]	; (80080fc <checkDemoModCalisma+0x50c>)
 8007f64:	781b      	ldrb	r3, [r3, #0]
 8007f66:	2b09      	cmp	r3, #9
 8007f68:	d908      	bls.n	8007f7c <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 8007f6a:	4b64      	ldr	r3, [pc, #400]	; (80080fc <checkDemoModCalisma+0x50c>)
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 8007f70:	4b63      	ldr	r3, [pc, #396]	; (8008100 <checkDemoModCalisma+0x510>)
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	3301      	adds	r3, #1
 8007f76:	b2da      	uxtb	r2, r3
 8007f78:	4b61      	ldr	r3, [pc, #388]	; (8008100 <checkDemoModCalisma+0x510>)
 8007f7a:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8007f7c:	4b60      	ldr	r3, [pc, #384]	; (8008100 <checkDemoModCalisma+0x510>)
 8007f7e:	781a      	ldrb	r2, [r3, #0]
 8007f80:	4b60      	ldr	r3, [pc, #384]	; (8008104 <checkDemoModCalisma+0x514>)
 8007f82:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8007f86:	4b5d      	ldr	r3, [pc, #372]	; (80080fc <checkDemoModCalisma+0x50c>)
 8007f88:	781a      	ldrb	r2, [r3, #0]
 8007f8a:	4b5e      	ldr	r3, [pc, #376]	; (8008104 <checkDemoModCalisma+0x514>)
 8007f8c:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8007f8e:	4b5a      	ldr	r3, [pc, #360]	; (80080f8 <checkDemoModCalisma+0x508>)
 8007f90:	781a      	ldrb	r2, [r3, #0]
 8007f92:	4b5c      	ldr	r3, [pc, #368]	; (8008104 <checkDemoModCalisma+0x514>)
 8007f94:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8007f96:	4b57      	ldr	r3, [pc, #348]	; (80080f4 <checkDemoModCalisma+0x504>)
 8007f98:	781a      	ldrb	r2, [r3, #0]
 8007f9a:	4b5a      	ldr	r3, [pc, #360]	; (8008104 <checkDemoModCalisma+0x514>)
 8007f9c:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8007f9e:	4b54      	ldr	r3, [pc, #336]	; (80080f0 <checkDemoModCalisma+0x500>)
 8007fa0:	781a      	ldrb	r2, [r3, #0]
 8007fa2:	4b58      	ldr	r3, [pc, #352]	; (8008104 <checkDemoModCalisma+0x514>)
 8007fa4:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 8007fa6:	4b58      	ldr	r3, [pc, #352]	; (8008108 <checkDemoModCalisma+0x518>)
 8007fa8:	2201      	movs	r2, #1
 8007faa:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 8007fac:	4b4f      	ldr	r3, [pc, #316]	; (80080ec <checkDemoModCalisma+0x4fc>)
 8007fae:	2200      	movs	r2, #0
 8007fb0:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 8007fb2:	4b56      	ldr	r3, [pc, #344]	; (800810c <checkDemoModCalisma+0x51c>)
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	f040 8087 	bne.w	80080ca <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 8007fbc:	4a54      	ldr	r2, [pc, #336]	; (8008110 <checkDemoModCalisma+0x520>)
 8007fbe:	2101      	movs	r1, #1
 8007fc0:	2002      	movs	r0, #2
 8007fc2:	f7f8 facf 	bl	8000564 <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 8007fc6:	4a53      	ldr	r2, [pc, #332]	; (8008114 <checkDemoModCalisma+0x524>)
 8007fc8:	2101      	movs	r1, #1
 8007fca:	2001      	movs	r0, #1
 8007fcc:	f7f8 faca 	bl	8000564 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 8007fd0:	4b4b      	ldr	r3, [pc, #300]	; (8008100 <checkDemoModCalisma+0x510>)
 8007fd2:	781b      	ldrb	r3, [r3, #0]
 8007fd4:	220a      	movs	r2, #10
 8007fd6:	4950      	ldr	r1, [pc, #320]	; (8008118 <checkDemoModCalisma+0x528>)
 8007fd8:	4618      	mov	r0, r3
 8007fda:	f004 fcf1 	bl	800c9c0 <itoa>
			lcd_print(2,12,snum);
 8007fde:	4a4e      	ldr	r2, [pc, #312]	; (8008118 <checkDemoModCalisma+0x528>)
 8007fe0:	210c      	movs	r1, #12
 8007fe2:	2002      	movs	r0, #2
 8007fe4:	f7f8 fabe 	bl	8000564 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 8007fe8:	4b44      	ldr	r3, [pc, #272]	; (80080fc <checkDemoModCalisma+0x50c>)
 8007fea:	781b      	ldrb	r3, [r3, #0]
 8007fec:	220a      	movs	r2, #10
 8007fee:	494a      	ldr	r1, [pc, #296]	; (8008118 <checkDemoModCalisma+0x528>)
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	f004 fce5 	bl	800c9c0 <itoa>
			lcd_print(2,13,snum);
 8007ff6:	4a48      	ldr	r2, [pc, #288]	; (8008118 <checkDemoModCalisma+0x528>)
 8007ff8:	210d      	movs	r1, #13
 8007ffa:	2002      	movs	r0, #2
 8007ffc:	f7f8 fab2 	bl	8000564 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 8008000:	4b3d      	ldr	r3, [pc, #244]	; (80080f8 <checkDemoModCalisma+0x508>)
 8008002:	781b      	ldrb	r3, [r3, #0]
 8008004:	220a      	movs	r2, #10
 8008006:	4944      	ldr	r1, [pc, #272]	; (8008118 <checkDemoModCalisma+0x528>)
 8008008:	4618      	mov	r0, r3
 800800a:	f004 fcd9 	bl	800c9c0 <itoa>
			lcd_print(2,14,snum);
 800800e:	4a42      	ldr	r2, [pc, #264]	; (8008118 <checkDemoModCalisma+0x528>)
 8008010:	210e      	movs	r1, #14
 8008012:	2002      	movs	r0, #2
 8008014:	f7f8 faa6 	bl	8000564 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 8008018:	4b36      	ldr	r3, [pc, #216]	; (80080f4 <checkDemoModCalisma+0x504>)
 800801a:	781b      	ldrb	r3, [r3, #0]
 800801c:	220a      	movs	r2, #10
 800801e:	493e      	ldr	r1, [pc, #248]	; (8008118 <checkDemoModCalisma+0x528>)
 8008020:	4618      	mov	r0, r3
 8008022:	f004 fccd 	bl	800c9c0 <itoa>
			lcd_print(2,15,snum);
 8008026:	4a3c      	ldr	r2, [pc, #240]	; (8008118 <checkDemoModCalisma+0x528>)
 8008028:	210f      	movs	r1, #15
 800802a:	2002      	movs	r0, #2
 800802c:	f7f8 fa9a 	bl	8000564 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 8008030:	4b2f      	ldr	r3, [pc, #188]	; (80080f0 <checkDemoModCalisma+0x500>)
 8008032:	781b      	ldrb	r3, [r3, #0]
 8008034:	220a      	movs	r2, #10
 8008036:	4938      	ldr	r1, [pc, #224]	; (8008118 <checkDemoModCalisma+0x528>)
 8008038:	4618      	mov	r0, r3
 800803a:	f004 fcc1 	bl	800c9c0 <itoa>
			lcd_print(2,16,snum);
 800803e:	4a36      	ldr	r2, [pc, #216]	; (8008118 <checkDemoModCalisma+0x528>)
 8008040:	2110      	movs	r1, #16
 8008042:	2002      	movs	r0, #2
 8008044:	f7f8 fa8e 	bl	8000564 <lcd_print>
			mesajYazildi=1;
 8008048:	4b34      	ldr	r3, [pc, #208]	; (800811c <checkDemoModCalisma+0x52c>)
 800804a:	2201      	movs	r2, #1
 800804c:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 800804e:	e03c      	b.n	80080ca <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 8008050:	4b33      	ldr	r3, [pc, #204]	; (8008120 <checkDemoModCalisma+0x530>)
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	2b01      	cmp	r3, #1
 8008056:	d003      	beq.n	8008060 <checkDemoModCalisma+0x470>
 8008058:	4b2c      	ldr	r3, [pc, #176]	; (800810c <checkDemoModCalisma+0x51c>)
 800805a:	781b      	ldrb	r3, [r3, #0]
 800805c:	2b01      	cmp	r3, #1
 800805e:	d134      	bne.n	80080ca <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8008060:	2200      	movs	r2, #0
 8008062:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008066:	481b      	ldr	r0, [pc, #108]	; (80080d4 <checkDemoModCalisma+0x4e4>)
 8008068:	f001 fccb 	bl	8009a02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800806c:	2200      	movs	r2, #0
 800806e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008072:	4818      	ldr	r0, [pc, #96]	; (80080d4 <checkDemoModCalisma+0x4e4>)
 8008074:	f001 fcc5 	bl	8009a02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8008078:	2200      	movs	r2, #0
 800807a:	2104      	movs	r1, #4
 800807c:	4815      	ldr	r0, [pc, #84]	; (80080d4 <checkDemoModCalisma+0x4e4>)
 800807e:	f001 fcc0 	bl	8009a02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8008082:	2200      	movs	r2, #0
 8008084:	2102      	movs	r1, #2
 8008086:	4813      	ldr	r0, [pc, #76]	; (80080d4 <checkDemoModCalisma+0x4e4>)
 8008088:	f001 fcbb 	bl	8009a02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 800808c:	2200      	movs	r2, #0
 800808e:	2101      	movs	r1, #1
 8008090:	4810      	ldr	r0, [pc, #64]	; (80080d4 <checkDemoModCalisma+0x4e4>)
 8008092:	f001 fcb6 	bl	8009a02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8008096:	2200      	movs	r2, #0
 8008098:	2120      	movs	r1, #32
 800809a:	480d      	ldr	r0, [pc, #52]	; (80080d0 <checkDemoModCalisma+0x4e0>)
 800809c:	f001 fcb1 	bl	8009a02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 80080a0:	2200      	movs	r2, #0
 80080a2:	2110      	movs	r1, #16
 80080a4:	480a      	ldr	r0, [pc, #40]	; (80080d0 <checkDemoModCalisma+0x4e0>)
 80080a6:	f001 fcac 	bl	8009a02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80080aa:	2200      	movs	r2, #0
 80080ac:	2180      	movs	r1, #128	; 0x80
 80080ae:	480b      	ldr	r0, [pc, #44]	; (80080dc <checkDemoModCalisma+0x4ec>)
 80080b0:	f001 fca7 	bl	8009a02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80080b4:	2200      	movs	r2, #0
 80080b6:	2140      	movs	r1, #64	; 0x40
 80080b8:	4808      	ldr	r0, [pc, #32]	; (80080dc <checkDemoModCalisma+0x4ec>)
 80080ba:	f001 fca2 	bl	8009a02 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80080be:	2200      	movs	r2, #0
 80080c0:	2120      	movs	r1, #32
 80080c2:	4806      	ldr	r0, [pc, #24]	; (80080dc <checkDemoModCalisma+0x4ec>)
 80080c4:	f001 fc9d 	bl	8009a02 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 80080c8:	e7ff      	b.n	80080ca <checkDemoModCalisma+0x4da>
 80080ca:	bf00      	nop
 80080cc:	bd80      	pop	{r7, pc}
 80080ce:	bf00      	nop
 80080d0:	40011000 	.word	0x40011000
 80080d4:	40010c00 	.word	0x40010c00
 80080d8:	20000c69 	.word	0x20000c69
 80080dc:	40010800 	.word	0x40010800
 80080e0:	20000bb8 	.word	0x20000bb8
 80080e4:	20000bc8 	.word	0x20000bc8
 80080e8:	20000c68 	.word	0x20000c68
 80080ec:	20000c4e 	.word	0x20000c4e
 80080f0:	20000c0d 	.word	0x20000c0d
 80080f4:	20000c0e 	.word	0x20000c0e
 80080f8:	200009b4 	.word	0x200009b4
 80080fc:	200009b5 	.word	0x200009b5
 8008100:	20000c0f 	.word	0x20000c0f
 8008104:	20000b40 	.word	0x20000b40
 8008108:	20000c3c 	.word	0x20000c3c
 800810c:	20000c2d 	.word	0x20000c2d
 8008110:	0800d8d4 	.word	0x0800d8d4
 8008114:	0800d8e0 	.word	0x0800d8e0
 8008118:	20000bb0 	.word	0x20000bb0
 800811c:	20000c44 	.word	0x20000c44
 8008120:	20000c2e 	.word	0x20000c2e

08008124 <mainLoop>:
	char* result = malloc(strlen(combinedString) + 1);
	strcpy(result, combinedString);
	return result;
}

void mainLoop() {
 8008124:	b580      	push	{r7, lr}
 8008126:	b084      	sub	sp, #16
 8008128:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 800812a:	f7fe f925 	bl	8006378 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 800812e:	2101      	movs	r1, #1
 8008130:	48ad      	ldr	r0, [pc, #692]	; (80083e8 <mainLoop+0x2c4>)
 8008132:	f001 fc4f 	bl	80099d4 <HAL_GPIO_ReadPin>
 8008136:	4603      	mov	r3, r0
 8008138:	2b00      	cmp	r3, #0
 800813a:	d136      	bne.n	80081aa <mainLoop+0x86>
 800813c:	2108      	movs	r1, #8
 800813e:	48ab      	ldr	r0, [pc, #684]	; (80083ec <mainLoop+0x2c8>)
 8008140:	f001 fc48 	bl	80099d4 <HAL_GPIO_ReadPin>
 8008144:	4603      	mov	r3, r0
 8008146:	2b00      	cmp	r3, #0
 8008148:	d12f      	bne.n	80081aa <mainLoop+0x86>
 800814a:	2102      	movs	r1, #2
 800814c:	48a6      	ldr	r0, [pc, #664]	; (80083e8 <mainLoop+0x2c4>)
 800814e:	f001 fc41 	bl	80099d4 <HAL_GPIO_ReadPin>
 8008152:	4603      	mov	r3, r0
 8008154:	2b00      	cmp	r3, #0
 8008156:	d128      	bne.n	80081aa <mainLoop+0x86>
 8008158:	2104      	movs	r1, #4
 800815a:	48a3      	ldr	r0, [pc, #652]	; (80083e8 <mainLoop+0x2c4>)
 800815c:	f001 fc3a 	bl	80099d4 <HAL_GPIO_ReadPin>
 8008160:	4603      	mov	r3, r0
 8008162:	2b00      	cmp	r3, #0
 8008164:	d121      	bne.n	80081aa <mainLoop+0x86>
 8008166:	2108      	movs	r1, #8
 8008168:	489f      	ldr	r0, [pc, #636]	; (80083e8 <mainLoop+0x2c4>)
 800816a:	f001 fc33 	bl	80099d4 <HAL_GPIO_ReadPin>
 800816e:	4603      	mov	r3, r0
 8008170:	2b00      	cmp	r3, #0
 8008172:	d11a      	bne.n	80081aa <mainLoop+0x86>
 8008174:	2180      	movs	r1, #128	; 0x80
 8008176:	489d      	ldr	r0, [pc, #628]	; (80083ec <mainLoop+0x2c8>)
 8008178:	f001 fc2c 	bl	80099d4 <HAL_GPIO_ReadPin>
 800817c:	4603      	mov	r3, r0
 800817e:	2b01      	cmp	r3, #1
 8008180:	d113      	bne.n	80081aa <mainLoop+0x86>
 8008182:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008186:	4899      	ldr	r0, [pc, #612]	; (80083ec <mainLoop+0x2c8>)
 8008188:	f001 fc24 	bl	80099d4 <HAL_GPIO_ReadPin>
 800818c:	4603      	mov	r3, r0
 800818e:	2b01      	cmp	r3, #1
 8008190:	d10b      	bne.n	80081aa <mainLoop+0x86>
 8008192:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008196:	4895      	ldr	r0, [pc, #596]	; (80083ec <mainLoop+0x2c8>)
 8008198:	f001 fc1c 	bl	80099d4 <HAL_GPIO_ReadPin>
 800819c:	4603      	mov	r3, r0
 800819e:	2b01      	cmp	r3, #1
 80081a0:	d103      	bne.n	80081aa <mainLoop+0x86>
			butonKontrol=0;
 80081a2:	4b93      	ldr	r3, [pc, #588]	; (80083f0 <mainLoop+0x2cc>)
 80081a4:	2200      	movs	r2, #0
 80081a6:	701a      	strb	r2, [r3, #0]
 80081a8:	e003      	b.n	80081b2 <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 80081aa:	4b92      	ldr	r3, [pc, #584]	; (80083f4 <mainLoop+0x2d0>)
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4a92      	ldr	r2, [pc, #584]	; (80083f8 <mainLoop+0x2d4>)
 80081b0:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 80081b2:	4b92      	ldr	r3, [pc, #584]	; (80083fc <mainLoop+0x2d8>)
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d03a      	beq.n	8008230 <mainLoop+0x10c>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80081ba:	bf00      	nop
 80081bc:	4890      	ldr	r0, [pc, #576]	; (8008400 <mainLoop+0x2dc>)
 80081be:	f002 fa32 	bl	800a626 <HAL_I2C_GetError>
 80081c2:	4603      	mov	r3, r0
 80081c4:	2b04      	cmp	r3, #4
 80081c6:	d0f9      	beq.n	80081bc <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80081c8:	bf00      	nop
 80081ca:	488d      	ldr	r0, [pc, #564]	; (8008400 <mainLoop+0x2dc>)
 80081cc:	f002 fa1e 	bl	800a60c <HAL_I2C_GetState>
 80081d0:	4603      	mov	r3, r0
 80081d2:	2b20      	cmp	r3, #32
 80081d4:	d1f9      	bne.n	80081ca <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1, 0xA0, 0, 110, eepromData, 110, 3000);
 80081d6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80081da:	9302      	str	r3, [sp, #8]
 80081dc:	236e      	movs	r3, #110	; 0x6e
 80081de:	9301      	str	r3, [sp, #4]
 80081e0:	4b88      	ldr	r3, [pc, #544]	; (8008404 <mainLoop+0x2e0>)
 80081e2:	9300      	str	r3, [sp, #0]
 80081e4:	236e      	movs	r3, #110	; 0x6e
 80081e6:	2200      	movs	r2, #0
 80081e8:	21a0      	movs	r1, #160	; 0xa0
 80081ea:	4885      	ldr	r0, [pc, #532]	; (8008400 <mainLoop+0x2dc>)
 80081ec:	f001 feac 	bl	8009f48 <HAL_I2C_Mem_Write>
		  HAL_Delay(500);
 80081f0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80081f4:	f000 fe1e 	bl	8008e34 <HAL_Delay>

		  hafizaYaz=0;
 80081f8:	4b80      	ldr	r3, [pc, #512]	; (80083fc <mainLoop+0x2d8>)
 80081fa:	2200      	movs	r2, #0
 80081fc:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 80081fe:	4b82      	ldr	r3, [pc, #520]	; (8008408 <mainLoop+0x2e4>)
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d105      	bne.n	8008212 <mainLoop+0xee>
			  lcd_print(2,1,"Data yazildi    ");
 8008206:	4a81      	ldr	r2, [pc, #516]	; (800840c <mainLoop+0x2e8>)
 8008208:	2101      	movs	r1, #1
 800820a:	2002      	movs	r0, #2
 800820c:	f7f8 f9aa 	bl	8000564 <lcd_print>
 8008210:	e008      	b.n	8008224 <mainLoop+0x100>
		  } else if(dilSecim==1) {
 8008212:	4b7d      	ldr	r3, [pc, #500]	; (8008408 <mainLoop+0x2e4>)
 8008214:	781b      	ldrb	r3, [r3, #0]
 8008216:	2b01      	cmp	r3, #1
 8008218:	d104      	bne.n	8008224 <mainLoop+0x100>
			  lcd_print(2,1,"Data Wrote      ");
 800821a:	4a7d      	ldr	r2, [pc, #500]	; (8008410 <mainLoop+0x2ec>)
 800821c:	2101      	movs	r1, #1
 800821e:	2002      	movs	r0, #2
 8008220:	f7f8 f9a0 	bl	8000564 <lcd_print>
		  }

		  HAL_Delay(1000);
 8008224:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008228:	f000 fe04 	bl	8008e34 <HAL_Delay>
		  lcd_clear();
 800822c:	f7f8 f9c6 	bl	80005bc <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 8008230:	4b78      	ldr	r3, [pc, #480]	; (8008414 <mainLoop+0x2f0>)
 8008232:	781b      	ldrb	r3, [r3, #0]
 8008234:	f083 0301 	eor.w	r3, r3, #1
 8008238:	b2db      	uxtb	r3, r3
 800823a:	2b00      	cmp	r3, #0
 800823c:	d06e      	beq.n	800831c <mainLoop+0x1f8>
 800823e:	4870      	ldr	r0, [pc, #448]	; (8008400 <mainLoop+0x2dc>)
 8008240:	f002 f9e4 	bl	800a60c <HAL_I2C_GetState>
 8008244:	4603      	mov	r3, r0
 8008246:	2b20      	cmp	r3, #32
 8008248:	d168      	bne.n	800831c <mainLoop+0x1f8>
		  if(ilkOkuma==0) {
 800824a:	4b73      	ldr	r3, [pc, #460]	; (8008418 <mainLoop+0x2f4>)
 800824c:	781b      	ldrb	r3, [r3, #0]
 800824e:	f083 0301 	eor.w	r3, r3, #1
 8008252:	b2db      	uxtb	r3, r3
 8008254:	2b00      	cmp	r3, #0
 8008256:	d044      	beq.n	80082e2 <mainLoop+0x1be>
			  lcd_print(1,1,"   **EEPROM**   ");
 8008258:	4a70      	ldr	r2, [pc, #448]	; (800841c <mainLoop+0x2f8>)
 800825a:	2101      	movs	r1, #1
 800825c:	2001      	movs	r0, #1
 800825e:	f7f8 f981 	bl	8000564 <lcd_print>
			  if(dilSecim==0) {
 8008262:	4b69      	ldr	r3, [pc, #420]	; (8008408 <mainLoop+0x2e4>)
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d105      	bne.n	8008276 <mainLoop+0x152>
				  lcd_print(2,1,"Data Okunuyor...");
 800826a:	4a6d      	ldr	r2, [pc, #436]	; (8008420 <mainLoop+0x2fc>)
 800826c:	2101      	movs	r1, #1
 800826e:	2002      	movs	r0, #2
 8008270:	f7f8 f978 	bl	8000564 <lcd_print>
 8008274:	e008      	b.n	8008288 <mainLoop+0x164>
			  } else if(dilSecim==1) {
 8008276:	4b64      	ldr	r3, [pc, #400]	; (8008408 <mainLoop+0x2e4>)
 8008278:	781b      	ldrb	r3, [r3, #0]
 800827a:	2b01      	cmp	r3, #1
 800827c:	d104      	bne.n	8008288 <mainLoop+0x164>
				  lcd_print(2,1,"Data Reading... ");
 800827e:	4a69      	ldr	r2, [pc, #420]	; (8008424 <mainLoop+0x300>)
 8008280:	2101      	movs	r1, #1
 8008282:	2002      	movs	r0, #2
 8008284:	f7f8 f96e 	bl	8000564 <lcd_print>
			  }
			  HAL_Delay(1000);
 8008288:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800828c:	f000 fdd2 	bl	8008e34 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008290:	bf00      	nop
 8008292:	485b      	ldr	r0, [pc, #364]	; (8008400 <mainLoop+0x2dc>)
 8008294:	f002 f9c7 	bl	800a626 <HAL_I2C_GetError>
 8008298:	4603      	mov	r3, r0
 800829a:	2b04      	cmp	r3, #4
 800829c:	d0f9      	beq.n	8008292 <mainLoop+0x16e>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800829e:	e003      	b.n	80082a8 <mainLoop+0x184>
				  HAL_Delay(1000);
 80082a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80082a4:	f000 fdc6 	bl	8008e34 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 80082a8:	4855      	ldr	r0, [pc, #340]	; (8008400 <mainLoop+0x2dc>)
 80082aa:	f002 f9af 	bl	800a60c <HAL_I2C_GetState>
 80082ae:	4603      	mov	r3, r0
 80082b0:	2b20      	cmp	r3, #32
 80082b2:	d1f5      	bne.n	80082a0 <mainLoop+0x17c>
			  }

			  if(dilSecim==0) {
 80082b4:	4b54      	ldr	r3, [pc, #336]	; (8008408 <mainLoop+0x2e4>)
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	d105      	bne.n	80082c8 <mainLoop+0x1a4>
				  lcd_print(2,1,"Data Okundu.    ");
 80082bc:	4a5a      	ldr	r2, [pc, #360]	; (8008428 <mainLoop+0x304>)
 80082be:	2101      	movs	r1, #1
 80082c0:	2002      	movs	r0, #2
 80082c2:	f7f8 f94f 	bl	8000564 <lcd_print>
 80082c6:	e008      	b.n	80082da <mainLoop+0x1b6>
			  } else if(dilSecim==1) {
 80082c8:	4b4f      	ldr	r3, [pc, #316]	; (8008408 <mainLoop+0x2e4>)
 80082ca:	781b      	ldrb	r3, [r3, #0]
 80082cc:	2b01      	cmp	r3, #1
 80082ce:	d104      	bne.n	80082da <mainLoop+0x1b6>
				  lcd_print(2,1,"Data Read.      ");
 80082d0:	4a56      	ldr	r2, [pc, #344]	; (800842c <mainLoop+0x308>)
 80082d2:	2101      	movs	r1, #1
 80082d4:	2002      	movs	r0, #2
 80082d6:	f7f8 f945 	bl	8000564 <lcd_print>
			  }

			  ilkOkuma=1;
 80082da:	4b4f      	ldr	r3, [pc, #316]	; (8008418 <mainLoop+0x2f4>)
 80082dc:	2201      	movs	r2, #1
 80082de:	701a      	strb	r2, [r3, #0]
 80082e0:	e014      	b.n	800830c <mainLoop+0x1e8>
		  } else {
			  if(dilSecim==0) {
 80082e2:	4b49      	ldr	r3, [pc, #292]	; (8008408 <mainLoop+0x2e4>)
 80082e4:	781b      	ldrb	r3, [r3, #0]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d105      	bne.n	80082f6 <mainLoop+0x1d2>
				  lcd_print(2,1,"Deger Kaydedildi");
 80082ea:	4a51      	ldr	r2, [pc, #324]	; (8008430 <mainLoop+0x30c>)
 80082ec:	2101      	movs	r1, #1
 80082ee:	2002      	movs	r0, #2
 80082f0:	f7f8 f938 	bl	8000564 <lcd_print>
 80082f4:	e008      	b.n	8008308 <mainLoop+0x1e4>
			  } else if(dilSecim==1) {
 80082f6:	4b44      	ldr	r3, [pc, #272]	; (8008408 <mainLoop+0x2e4>)
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	2b01      	cmp	r3, #1
 80082fc:	d104      	bne.n	8008308 <mainLoop+0x1e4>
				  lcd_print(2,1,"Value Saved     ");
 80082fe:	4a4d      	ldr	r2, [pc, #308]	; (8008434 <mainLoop+0x310>)
 8008300:	2101      	movs	r1, #1
 8008302:	2002      	movs	r0, #2
 8008304:	f7f8 f92e 	bl	8000564 <lcd_print>
			  }
			  lcd_clear();
 8008308:	f7f8 f958 	bl	80005bc <lcd_clear>
		  }

		  lcd_clear();
 800830c:	f7f8 f956 	bl	80005bc <lcd_clear>

		  eepromKontrol(1);
 8008310:	2001      	movs	r0, #1
 8008312:	f7fd fbe9 	bl	8005ae8 <eepromKontrol>
		  hafizaOku=1;
 8008316:	4b3f      	ldr	r3, [pc, #252]	; (8008414 <mainLoop+0x2f0>)
 8008318:	2201      	movs	r2, #1
 800831a:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 800831c:	4b46      	ldr	r3, [pc, #280]	; (8008438 <mainLoop+0x314>)
 800831e:	781b      	ldrb	r3, [r3, #0]
 8008320:	2b00      	cmp	r3, #0
 8008322:	d11c      	bne.n	800835e <mainLoop+0x23a>
 8008324:	4b45      	ldr	r3, [pc, #276]	; (800843c <mainLoop+0x318>)
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	f083 0301 	eor.w	r3, r3, #1
 800832c:	b2db      	uxtb	r3, r3
 800832e:	2b00      	cmp	r3, #0
 8008330:	d015      	beq.n	800835e <mainLoop+0x23a>
 8008332:	4b43      	ldr	r3, [pc, #268]	; (8008440 <mainLoop+0x31c>)
 8008334:	781b      	ldrb	r3, [r3, #0]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d111      	bne.n	800835e <mainLoop+0x23a>
			lcd_clear();
 800833a:	f7f8 f93f 	bl	80005bc <lcd_clear>
			HAL_Delay(10);
 800833e:	200a      	movs	r0, #10
 8008340:	f000 fd78 	bl	8008e34 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 8008344:	4a3f      	ldr	r2, [pc, #252]	; (8008444 <mainLoop+0x320>)
 8008346:	2101      	movs	r1, #1
 8008348:	2001      	movs	r0, #1
 800834a:	f7f8 f90b 	bl	8000564 <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 800834e:	4a3e      	ldr	r2, [pc, #248]	; (8008448 <mainLoop+0x324>)
 8008350:	2101      	movs	r1, #1
 8008352:	2002      	movs	r0, #2
 8008354:	f7f8 f906 	bl	8000564 <lcd_print>
			mesajYazildi=1;
 8008358:	4b38      	ldr	r3, [pc, #224]	; (800843c <mainLoop+0x318>)
 800835a:	2201      	movs	r2, #1
 800835c:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 800835e:	4b36      	ldr	r3, [pc, #216]	; (8008438 <mainLoop+0x314>)
 8008360:	781b      	ldrb	r3, [r3, #0]
 8008362:	2b00      	cmp	r3, #0
 8008364:	d112      	bne.n	800838c <mainLoop+0x268>
 8008366:	2102      	movs	r1, #2
 8008368:	481f      	ldr	r0, [pc, #124]	; (80083e8 <mainLoop+0x2c4>)
 800836a:	f001 fb33 	bl	80099d4 <HAL_GPIO_ReadPin>
 800836e:	4603      	mov	r3, r0
 8008370:	2b01      	cmp	r3, #1
 8008372:	d10b      	bne.n	800838c <mainLoop+0x268>
 8008374:	2104      	movs	r1, #4
 8008376:	481c      	ldr	r0, [pc, #112]	; (80083e8 <mainLoop+0x2c4>)
 8008378:	f001 fb2c 	bl	80099d4 <HAL_GPIO_ReadPin>
 800837c:	4603      	mov	r3, r0
 800837e:	2b01      	cmp	r3, #1
 8008380:	d104      	bne.n	800838c <mainLoop+0x268>
			menuGiris=1;
 8008382:	4b2d      	ldr	r3, [pc, #180]	; (8008438 <mainLoop+0x314>)
 8008384:	2201      	movs	r2, #1
 8008386:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8008388:	f7f8 f918 	bl	80005bc <lcd_clear>
		}

		if(menuGiris==1) {
 800838c:	4b2a      	ldr	r3, [pc, #168]	; (8008438 <mainLoop+0x314>)
 800838e:	781b      	ldrb	r3, [r3, #0]
 8008390:	2b01      	cmp	r3, #1
 8008392:	d102      	bne.n	800839a <mainLoop+0x276>
			menu(&hi2c1);
 8008394:	481a      	ldr	r0, [pc, #104]	; (8008400 <mainLoop+0x2dc>)
 8008396:	f7f9 f95d 	bl	8001654 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 800839a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800839e:	4813      	ldr	r0, [pc, #76]	; (80083ec <mainLoop+0x2c8>)
 80083a0:	f001 fb47 	bl	8009a32 <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 80083a4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80083a8:	4828      	ldr	r0, [pc, #160]	; (800844c <mainLoop+0x328>)
 80083aa:	f001 fb13 	bl	80099d4 <HAL_GPIO_ReadPin>
 80083ae:	4603      	mov	r3, r0
 80083b0:	2b00      	cmp	r3, #0
 80083b2:	d10a      	bne.n	80083ca <mainLoop+0x2a6>
 80083b4:	4b26      	ldr	r3, [pc, #152]	; (8008450 <mainLoop+0x32c>)
 80083b6:	781b      	ldrb	r3, [r3, #0]
 80083b8:	f083 0301 	eor.w	r3, r3, #1
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d003      	beq.n	80083ca <mainLoop+0x2a6>
			stopVar=1;
 80083c2:	4b24      	ldr	r3, [pc, #144]	; (8008454 <mainLoop+0x330>)
 80083c4:	2201      	movs	r2, #1
 80083c6:	701a      	strb	r2, [r3, #0]
 80083c8:	e002      	b.n	80083d0 <mainLoop+0x2ac>
		} else {
			stopVar=0;
 80083ca:	4b22      	ldr	r3, [pc, #136]	; (8008454 <mainLoop+0x330>)
 80083cc:	2200      	movs	r2, #0
 80083ce:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 80083d0:	f7fd fff2 	bl	80063b8 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 80083d4:	f7fe f824 	bl	8006420 <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 80083d8:	f7fe f868 	bl	80064ac <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 80083dc:	f7fe f8b8 	bl	8006550 <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 80083e0:	f7ff fc06 	bl	8007bf0 <checkDemoModCalisma>
		checkLCDBacklight();
 80083e4:	e6a1      	b.n	800812a <mainLoop+0x6>
 80083e6:	bf00      	nop
 80083e8:	40010800 	.word	0x40010800
 80083ec:	40011000 	.word	0x40011000
 80083f0:	20000c3f 	.word	0x20000c3f
 80083f4:	20000bb8 	.word	0x20000bb8
 80083f8:	20000bd4 	.word	0x20000bd4
 80083fc:	20000c3c 	.word	0x20000c3c
 8008400:	20000a5c 	.word	0x20000a5c
 8008404:	20000b40 	.word	0x20000b40
 8008408:	20000c31 	.word	0x20000c31
 800840c:	0800d8f8 	.word	0x0800d8f8
 8008410:	0800d90c 	.word	0x0800d90c
 8008414:	20000c3d 	.word	0x20000c3d
 8008418:	20000c3e 	.word	0x20000c3e
 800841c:	0800d920 	.word	0x0800d920
 8008420:	0800d934 	.word	0x0800d934
 8008424:	0800d948 	.word	0x0800d948
 8008428:	0800d95c 	.word	0x0800d95c
 800842c:	0800d970 	.word	0x0800d970
 8008430:	0800d984 	.word	0x0800d984
 8008434:	0800d998 	.word	0x0800d998
 8008438:	20000c2d 	.word	0x20000c2d
 800843c:	20000c44 	.word	0x20000c44
 8008440:	20000c2e 	.word	0x20000c2e
 8008444:	0800d85c 	.word	0x0800d85c
 8008448:	0800d870 	.word	0x0800d870
 800844c:	40010c00 	.word	0x40010c00
 8008450:	20000c65 	.word	0x20000c65
 8008454:	20000c62 	.word	0x20000c62

08008458 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8008458:	b480      	push	{r7}
 800845a:	b083      	sub	sp, #12
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8008460:	4b04      	ldr	r3, [pc, #16]	; (8008474 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	3301      	adds	r3, #1
 8008466:	4a03      	ldr	r2, [pc, #12]	; (8008474 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8008468:	6013      	str	r3, [r2, #0]
}
 800846a:	bf00      	nop
 800846c:	370c      	adds	r7, #12
 800846e:	46bd      	mov	sp, r7
 8008470:	bc80      	pop	{r7}
 8008472:	4770      	bx	lr
 8008474:	20000bb8 	.word	0x20000bb8

08008478 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800847c:	f000 fc78 	bl	8008d70 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8008480:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008484:	f000 fcd6 	bl	8008e34 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008488:	f000 f8a8 	bl	80085dc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800848c:	f000 f9ca 	bl	8008824 <MX_GPIO_Init>
  MX_CAN_Init();
 8008490:	f000 f8ea 	bl	8008668 <MX_CAN_Init>
  MX_I2C1_Init();
 8008494:	f000 f91c 	bl	80086d0 <MX_I2C1_Init>
  MX_TIM1_Init();
 8008498:	f000 f948 	bl	800872c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800849c:	f000 f998 	bl	80087d0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80084a0:	2201      	movs	r2, #1
 80084a2:	2140      	movs	r1, #64	; 0x40
 80084a4:	4843      	ldr	r0, [pc, #268]	; (80085b4 <main+0x13c>)
 80084a6:	f001 faac 	bl	8009a02 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80084aa:	2201      	movs	r2, #1
 80084ac:	2180      	movs	r1, #128	; 0x80
 80084ae:	4841      	ldr	r0, [pc, #260]	; (80085b4 <main+0x13c>)
 80084b0:	f001 faa7 	bl	8009a02 <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80084b4:	200a      	movs	r0, #10
 80084b6:	f000 fcbd 	bl	8008e34 <HAL_Delay>
  lcd_init();
 80084ba:	f7f8 f821 	bl	8000500 <lcd_init>
  HAL_Delay(10);
 80084be:	200a      	movs	r0, #10
 80084c0:	f000 fcb8 	bl	8008e34 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 80084c4:	483c      	ldr	r0, [pc, #240]	; (80085b8 <main+0x140>)
 80084c6:	f003 f94f 	bl	800b768 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80084ca:	bf00      	nop
 80084cc:	483b      	ldr	r0, [pc, #236]	; (80085bc <main+0x144>)
 80084ce:	f002 f8aa 	bl	800a626 <HAL_I2C_GetError>
 80084d2:	4603      	mov	r3, r0
 80084d4:	2b04      	cmp	r3, #4
 80084d6:	d0f9      	beq.n	80084cc <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80084d8:	bf00      	nop
 80084da:	4838      	ldr	r0, [pc, #224]	; (80085bc <main+0x144>)
 80084dc:	f002 f896 	bl	800a60c <HAL_I2C_GetState>
 80084e0:	4603      	mov	r3, r0
 80084e2:	2b20      	cmp	r3, #32
 80084e4:	d1f9      	bne.n	80084da <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80084e6:	2200      	movs	r2, #0
 80084e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80084ec:	4831      	ldr	r0, [pc, #196]	; (80085b4 <main+0x13c>)
 80084ee:	f001 fa88 	bl	8009a02 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80084f2:	2200      	movs	r2, #0
 80084f4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80084f8:	482e      	ldr	r0, [pc, #184]	; (80085b4 <main+0x13c>)
 80084fa:	f001 fa82 	bl	8009a02 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80084fe:	2200      	movs	r2, #0
 8008500:	2104      	movs	r1, #4
 8008502:	482c      	ldr	r0, [pc, #176]	; (80085b4 <main+0x13c>)
 8008504:	f001 fa7d 	bl	8009a02 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8008508:	2200      	movs	r2, #0
 800850a:	2102      	movs	r1, #2
 800850c:	4829      	ldr	r0, [pc, #164]	; (80085b4 <main+0x13c>)
 800850e:	f001 fa78 	bl	8009a02 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8008512:	2200      	movs	r2, #0
 8008514:	2101      	movs	r1, #1
 8008516:	4827      	ldr	r0, [pc, #156]	; (80085b4 <main+0x13c>)
 8008518:	f001 fa73 	bl	8009a02 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 800851c:	2200      	movs	r2, #0
 800851e:	2120      	movs	r1, #32
 8008520:	4827      	ldr	r0, [pc, #156]	; (80085c0 <main+0x148>)
 8008522:	f001 fa6e 	bl	8009a02 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8008526:	2200      	movs	r2, #0
 8008528:	2110      	movs	r1, #16
 800852a:	4825      	ldr	r0, [pc, #148]	; (80085c0 <main+0x148>)
 800852c:	f001 fa69 	bl	8009a02 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8008530:	2200      	movs	r2, #0
 8008532:	2180      	movs	r1, #128	; 0x80
 8008534:	4823      	ldr	r0, [pc, #140]	; (80085c4 <main+0x14c>)
 8008536:	f001 fa64 	bl	8009a02 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 800853a:	2200      	movs	r2, #0
 800853c:	2140      	movs	r1, #64	; 0x40
 800853e:	4821      	ldr	r0, [pc, #132]	; (80085c4 <main+0x14c>)
 8008540:	f001 fa5f 	bl	8009a02 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8008544:	2200      	movs	r2, #0
 8008546:	2120      	movs	r1, #32
 8008548:	481e      	ldr	r0, [pc, #120]	; (80085c4 <main+0x14c>)
 800854a:	f001 fa5a 	bl	8009a02 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 800854e:	2200      	movs	r2, #0
 8008550:	2110      	movs	r1, #16
 8008552:	481c      	ldr	r0, [pc, #112]	; (80085c4 <main+0x14c>)
 8008554:	f001 fa55 	bl	8009a02 <HAL_GPIO_WritePin>

  i2cTest();
 8008558:	f7fd fe60 	bl	800621c <i2cTest>
  HAL_Delay(100);
 800855c:	2064      	movs	r0, #100	; 0x64
 800855e:	f000 fc69 	bl	8008e34 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 8008562:	4a19      	ldr	r2, [pc, #100]	; (80085c8 <main+0x150>)
 8008564:	2101      	movs	r1, #1
 8008566:	2001      	movs	r0, #1
 8008568:	f7f7 fffc 	bl	8000564 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 800856c:	4a17      	ldr	r2, [pc, #92]	; (80085cc <main+0x154>)
 800856e:	2101      	movs	r1, #1
 8008570:	2002      	movs	r0, #2
 8008572:	f7f7 fff7 	bl	8000564 <lcd_print>
  HAL_Delay(1000);
 8008576:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800857a:	f000 fc5b 	bl	8008e34 <HAL_Delay>
  lcd_clear();
 800857e:	f7f8 f81d 	bl	80005bc <lcd_clear>

  eepromKontrol(0);
 8008582:	2000      	movs	r0, #0
 8008584:	f7fd fab0 	bl	8005ae8 <eepromKontrol>
  HAL_Delay(200);
 8008588:	20c8      	movs	r0, #200	; 0xc8
 800858a:	f000 fc53 	bl	8008e34 <HAL_Delay>

  lcd_clear();
 800858e:	f7f8 f815 	bl	80005bc <lcd_clear>
  HAL_Delay(200);
 8008592:	20c8      	movs	r0, #200	; 0xc8
 8008594:	f000 fc4e 	bl	8008e34 <HAL_Delay>

  backLightTimer = millis;
 8008598:	4b0d      	ldr	r3, [pc, #52]	; (80085d0 <main+0x158>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	4a0d      	ldr	r2, [pc, #52]	; (80085d4 <main+0x15c>)
 800859e:	6013      	str	r3, [r2, #0]

  //ESP8266_Init(&huart1, "H.İ.D.", "asdasd0099123");

  if(machineID[11] == '\0') {
 80085a0:	4b0d      	ldr	r3, [pc, #52]	; (80085d8 <main+0x160>)
 80085a2:	7adb      	ldrb	r3, [r3, #11]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d102      	bne.n	80085ae <main+0x136>
	  takeMachineID(0);
 80085a8:	2000      	movs	r0, #0
 80085aa:	f7f8 fa9f 	bl	8000aec <takeMachineID>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 80085ae:	f7ff fdb9 	bl	8008124 <mainLoop>
 80085b2:	e7fc      	b.n	80085ae <main+0x136>
 80085b4:	40010c00 	.word	0x40010c00
 80085b8:	20000ab0 	.word	0x20000ab0
 80085bc:	20000a5c 	.word	0x20000a5c
 80085c0:	40011000 	.word	0x40011000
 80085c4:	40010800 	.word	0x40010800
 80085c8:	0800d9ac 	.word	0x0800d9ac
 80085cc:	0800d9c0 	.word	0x0800d9c0
 80085d0:	20000bb8 	.word	0x20000bb8
 80085d4:	20000bd4 	.word	0x20000bd4
 80085d8:	20000bd8 	.word	0x20000bd8

080085dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b090      	sub	sp, #64	; 0x40
 80085e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80085e2:	f107 0318 	add.w	r3, r7, #24
 80085e6:	2228      	movs	r2, #40	; 0x28
 80085e8:	2100      	movs	r1, #0
 80085ea:	4618      	mov	r0, r3
 80085ec:	f004 fae0 	bl	800cbb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80085f0:	1d3b      	adds	r3, r7, #4
 80085f2:	2200      	movs	r2, #0
 80085f4:	601a      	str	r2, [r3, #0]
 80085f6:	605a      	str	r2, [r3, #4]
 80085f8:	609a      	str	r2, [r3, #8]
 80085fa:	60da      	str	r2, [r3, #12]
 80085fc:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80085fe:	2301      	movs	r3, #1
 8008600:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008602:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008606:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8008608:	2300      	movs	r3, #0
 800860a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800860c:	2301      	movs	r3, #1
 800860e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008610:	2302      	movs	r3, #2
 8008612:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008614:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008618:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800861a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800861e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008620:	f107 0318 	add.w	r3, r7, #24
 8008624:	4618      	mov	r0, r3
 8008626:	f002 fc3f 	bl	800aea8 <HAL_RCC_OscConfig>
 800862a:	4603      	mov	r3, r0
 800862c:	2b00      	cmp	r3, #0
 800862e:	d001      	beq.n	8008634 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8008630:	f000 f9a2 	bl	8008978 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008634:	230f      	movs	r3, #15
 8008636:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008638:	2302      	movs	r3, #2
 800863a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800863c:	2300      	movs	r3, #0
 800863e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008640:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008644:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008646:	2300      	movs	r3, #0
 8008648:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800864a:	1d3b      	adds	r3, r7, #4
 800864c:	2102      	movs	r1, #2
 800864e:	4618      	mov	r0, r3
 8008650:	f002 feac 	bl	800b3ac <HAL_RCC_ClockConfig>
 8008654:	4603      	mov	r3, r0
 8008656:	2b00      	cmp	r3, #0
 8008658:	d001      	beq.n	800865e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800865a:	f000 f98d 	bl	8008978 <Error_Handler>
  }
}
 800865e:	bf00      	nop
 8008660:	3740      	adds	r7, #64	; 0x40
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
	...

08008668 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 800866c:	4b16      	ldr	r3, [pc, #88]	; (80086c8 <MX_CAN_Init+0x60>)
 800866e:	4a17      	ldr	r2, [pc, #92]	; (80086cc <MX_CAN_Init+0x64>)
 8008670:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8008672:	4b15      	ldr	r3, [pc, #84]	; (80086c8 <MX_CAN_Init+0x60>)
 8008674:	2210      	movs	r2, #16
 8008676:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8008678:	4b13      	ldr	r3, [pc, #76]	; (80086c8 <MX_CAN_Init+0x60>)
 800867a:	2200      	movs	r2, #0
 800867c:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800867e:	4b12      	ldr	r3, [pc, #72]	; (80086c8 <MX_CAN_Init+0x60>)
 8008680:	2200      	movs	r2, #0
 8008682:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8008684:	4b10      	ldr	r3, [pc, #64]	; (80086c8 <MX_CAN_Init+0x60>)
 8008686:	2200      	movs	r2, #0
 8008688:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 800868a:	4b0f      	ldr	r3, [pc, #60]	; (80086c8 <MX_CAN_Init+0x60>)
 800868c:	2200      	movs	r2, #0
 800868e:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8008690:	4b0d      	ldr	r3, [pc, #52]	; (80086c8 <MX_CAN_Init+0x60>)
 8008692:	2200      	movs	r2, #0
 8008694:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8008696:	4b0c      	ldr	r3, [pc, #48]	; (80086c8 <MX_CAN_Init+0x60>)
 8008698:	2200      	movs	r2, #0
 800869a:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 800869c:	4b0a      	ldr	r3, [pc, #40]	; (80086c8 <MX_CAN_Init+0x60>)
 800869e:	2200      	movs	r2, #0
 80086a0:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 80086a2:	4b09      	ldr	r3, [pc, #36]	; (80086c8 <MX_CAN_Init+0x60>)
 80086a4:	2200      	movs	r2, #0
 80086a6:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80086a8:	4b07      	ldr	r3, [pc, #28]	; (80086c8 <MX_CAN_Init+0x60>)
 80086aa:	2200      	movs	r2, #0
 80086ac:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80086ae:	4b06      	ldr	r3, [pc, #24]	; (80086c8 <MX_CAN_Init+0x60>)
 80086b0:	2200      	movs	r2, #0
 80086b2:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80086b4:	4804      	ldr	r0, [pc, #16]	; (80086c8 <MX_CAN_Init+0x60>)
 80086b6:	f000 fbe1 	bl	8008e7c <HAL_CAN_Init>
 80086ba:	4603      	mov	r3, r0
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d001      	beq.n	80086c4 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 80086c0:	f000 f95a 	bl	8008978 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 80086c4:	bf00      	nop
 80086c6:	bd80      	pop	{r7, pc}
 80086c8:	20000a34 	.word	0x20000a34
 80086cc:	40006400 	.word	0x40006400

080086d0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80086d4:	4b12      	ldr	r3, [pc, #72]	; (8008720 <MX_I2C1_Init+0x50>)
 80086d6:	4a13      	ldr	r2, [pc, #76]	; (8008724 <MX_I2C1_Init+0x54>)
 80086d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80086da:	4b11      	ldr	r3, [pc, #68]	; (8008720 <MX_I2C1_Init+0x50>)
 80086dc:	4a12      	ldr	r2, [pc, #72]	; (8008728 <MX_I2C1_Init+0x58>)
 80086de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80086e0:	4b0f      	ldr	r3, [pc, #60]	; (8008720 <MX_I2C1_Init+0x50>)
 80086e2:	2200      	movs	r2, #0
 80086e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80086e6:	4b0e      	ldr	r3, [pc, #56]	; (8008720 <MX_I2C1_Init+0x50>)
 80086e8:	2200      	movs	r2, #0
 80086ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80086ec:	4b0c      	ldr	r3, [pc, #48]	; (8008720 <MX_I2C1_Init+0x50>)
 80086ee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80086f2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80086f4:	4b0a      	ldr	r3, [pc, #40]	; (8008720 <MX_I2C1_Init+0x50>)
 80086f6:	2200      	movs	r2, #0
 80086f8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80086fa:	4b09      	ldr	r3, [pc, #36]	; (8008720 <MX_I2C1_Init+0x50>)
 80086fc:	2200      	movs	r2, #0
 80086fe:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008700:	4b07      	ldr	r3, [pc, #28]	; (8008720 <MX_I2C1_Init+0x50>)
 8008702:	2200      	movs	r2, #0
 8008704:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008706:	4b06      	ldr	r3, [pc, #24]	; (8008720 <MX_I2C1_Init+0x50>)
 8008708:	2200      	movs	r2, #0
 800870a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800870c:	4804      	ldr	r0, [pc, #16]	; (8008720 <MX_I2C1_Init+0x50>)
 800870e:	f001 f9a9 	bl	8009a64 <HAL_I2C_Init>
 8008712:	4603      	mov	r3, r0
 8008714:	2b00      	cmp	r3, #0
 8008716:	d001      	beq.n	800871c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008718:	f000 f92e 	bl	8008978 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 800871c:	bf00      	nop
 800871e:	bd80      	pop	{r7, pc}
 8008720:	20000a5c 	.word	0x20000a5c
 8008724:	40005400 	.word	0x40005400
 8008728:	00061a80 	.word	0x00061a80

0800872c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800872c:	b580      	push	{r7, lr}
 800872e:	b086      	sub	sp, #24
 8008730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008732:	f107 0308 	add.w	r3, r7, #8
 8008736:	2200      	movs	r2, #0
 8008738:	601a      	str	r2, [r3, #0]
 800873a:	605a      	str	r2, [r3, #4]
 800873c:	609a      	str	r2, [r3, #8]
 800873e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008740:	463b      	mov	r3, r7
 8008742:	2200      	movs	r2, #0
 8008744:	601a      	str	r2, [r3, #0]
 8008746:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008748:	4b1f      	ldr	r3, [pc, #124]	; (80087c8 <MX_TIM1_Init+0x9c>)
 800874a:	4a20      	ldr	r2, [pc, #128]	; (80087cc <MX_TIM1_Init+0xa0>)
 800874c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 800874e:	4b1e      	ldr	r3, [pc, #120]	; (80087c8 <MX_TIM1_Init+0x9c>)
 8008750:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8008754:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008756:	4b1c      	ldr	r3, [pc, #112]	; (80087c8 <MX_TIM1_Init+0x9c>)
 8008758:	2200      	movs	r2, #0
 800875a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 800875c:	4b1a      	ldr	r3, [pc, #104]	; (80087c8 <MX_TIM1_Init+0x9c>)
 800875e:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8008762:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008764:	4b18      	ldr	r3, [pc, #96]	; (80087c8 <MX_TIM1_Init+0x9c>)
 8008766:	2200      	movs	r2, #0
 8008768:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800876a:	4b17      	ldr	r3, [pc, #92]	; (80087c8 <MX_TIM1_Init+0x9c>)
 800876c:	2200      	movs	r2, #0
 800876e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008770:	4b15      	ldr	r3, [pc, #84]	; (80087c8 <MX_TIM1_Init+0x9c>)
 8008772:	2200      	movs	r2, #0
 8008774:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8008776:	4814      	ldr	r0, [pc, #80]	; (80087c8 <MX_TIM1_Init+0x9c>)
 8008778:	f002 ffa6 	bl	800b6c8 <HAL_TIM_Base_Init>
 800877c:	4603      	mov	r3, r0
 800877e:	2b00      	cmp	r3, #0
 8008780:	d001      	beq.n	8008786 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8008782:	f000 f8f9 	bl	8008978 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008786:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800878a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800878c:	f107 0308 	add.w	r3, r7, #8
 8008790:	4619      	mov	r1, r3
 8008792:	480d      	ldr	r0, [pc, #52]	; (80087c8 <MX_TIM1_Init+0x9c>)
 8008794:	f003 f950 	bl	800ba38 <HAL_TIM_ConfigClockSource>
 8008798:	4603      	mov	r3, r0
 800879a:	2b00      	cmp	r3, #0
 800879c:	d001      	beq.n	80087a2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800879e:	f000 f8eb 	bl	8008978 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80087a2:	2300      	movs	r3, #0
 80087a4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80087a6:	2300      	movs	r3, #0
 80087a8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80087aa:	463b      	mov	r3, r7
 80087ac:	4619      	mov	r1, r3
 80087ae:	4806      	ldr	r0, [pc, #24]	; (80087c8 <MX_TIM1_Init+0x9c>)
 80087b0:	f003 fb3e 	bl	800be30 <HAL_TIMEx_MasterConfigSynchronization>
 80087b4:	4603      	mov	r3, r0
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d001      	beq.n	80087be <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80087ba:	f000 f8dd 	bl	8008978 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80087be:	bf00      	nop
 80087c0:	3718      	adds	r7, #24
 80087c2:	46bd      	mov	sp, r7
 80087c4:	bd80      	pop	{r7, pc}
 80087c6:	bf00      	nop
 80087c8:	20000ab0 	.word	0x20000ab0
 80087cc:	40012c00 	.word	0x40012c00

080087d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80087d4:	4b11      	ldr	r3, [pc, #68]	; (800881c <MX_USART1_UART_Init+0x4c>)
 80087d6:	4a12      	ldr	r2, [pc, #72]	; (8008820 <MX_USART1_UART_Init+0x50>)
 80087d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80087da:	4b10      	ldr	r3, [pc, #64]	; (800881c <MX_USART1_UART_Init+0x4c>)
 80087dc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80087e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80087e2:	4b0e      	ldr	r3, [pc, #56]	; (800881c <MX_USART1_UART_Init+0x4c>)
 80087e4:	2200      	movs	r2, #0
 80087e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80087e8:	4b0c      	ldr	r3, [pc, #48]	; (800881c <MX_USART1_UART_Init+0x4c>)
 80087ea:	2200      	movs	r2, #0
 80087ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80087ee:	4b0b      	ldr	r3, [pc, #44]	; (800881c <MX_USART1_UART_Init+0x4c>)
 80087f0:	2200      	movs	r2, #0
 80087f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80087f4:	4b09      	ldr	r3, [pc, #36]	; (800881c <MX_USART1_UART_Init+0x4c>)
 80087f6:	220c      	movs	r2, #12
 80087f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80087fa:	4b08      	ldr	r3, [pc, #32]	; (800881c <MX_USART1_UART_Init+0x4c>)
 80087fc:	2200      	movs	r2, #0
 80087fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008800:	4b06      	ldr	r3, [pc, #24]	; (800881c <MX_USART1_UART_Init+0x4c>)
 8008802:	2200      	movs	r2, #0
 8008804:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008806:	4805      	ldr	r0, [pc, #20]	; (800881c <MX_USART1_UART_Init+0x4c>)
 8008808:	f003 fb90 	bl	800bf2c <HAL_UART_Init>
 800880c:	4603      	mov	r3, r0
 800880e:	2b00      	cmp	r3, #0
 8008810:	d001      	beq.n	8008816 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008812:	f000 f8b1 	bl	8008978 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008816:	bf00      	nop
 8008818:	bd80      	pop	{r7, pc}
 800881a:	bf00      	nop
 800881c:	20000af8 	.word	0x20000af8
 8008820:	40013800 	.word	0x40013800

08008824 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b088      	sub	sp, #32
 8008828:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800882a:	f107 0310 	add.w	r3, r7, #16
 800882e:	2200      	movs	r2, #0
 8008830:	601a      	str	r2, [r3, #0]
 8008832:	605a      	str	r2, [r3, #4]
 8008834:	609a      	str	r2, [r3, #8]
 8008836:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008838:	4b4b      	ldr	r3, [pc, #300]	; (8008968 <MX_GPIO_Init+0x144>)
 800883a:	699b      	ldr	r3, [r3, #24]
 800883c:	4a4a      	ldr	r2, [pc, #296]	; (8008968 <MX_GPIO_Init+0x144>)
 800883e:	f043 0310 	orr.w	r3, r3, #16
 8008842:	6193      	str	r3, [r2, #24]
 8008844:	4b48      	ldr	r3, [pc, #288]	; (8008968 <MX_GPIO_Init+0x144>)
 8008846:	699b      	ldr	r3, [r3, #24]
 8008848:	f003 0310 	and.w	r3, r3, #16
 800884c:	60fb      	str	r3, [r7, #12]
 800884e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008850:	4b45      	ldr	r3, [pc, #276]	; (8008968 <MX_GPIO_Init+0x144>)
 8008852:	699b      	ldr	r3, [r3, #24]
 8008854:	4a44      	ldr	r2, [pc, #272]	; (8008968 <MX_GPIO_Init+0x144>)
 8008856:	f043 0320 	orr.w	r3, r3, #32
 800885a:	6193      	str	r3, [r2, #24]
 800885c:	4b42      	ldr	r3, [pc, #264]	; (8008968 <MX_GPIO_Init+0x144>)
 800885e:	699b      	ldr	r3, [r3, #24]
 8008860:	f003 0320 	and.w	r3, r3, #32
 8008864:	60bb      	str	r3, [r7, #8]
 8008866:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008868:	4b3f      	ldr	r3, [pc, #252]	; (8008968 <MX_GPIO_Init+0x144>)
 800886a:	699b      	ldr	r3, [r3, #24]
 800886c:	4a3e      	ldr	r2, [pc, #248]	; (8008968 <MX_GPIO_Init+0x144>)
 800886e:	f043 0304 	orr.w	r3, r3, #4
 8008872:	6193      	str	r3, [r2, #24]
 8008874:	4b3c      	ldr	r3, [pc, #240]	; (8008968 <MX_GPIO_Init+0x144>)
 8008876:	699b      	ldr	r3, [r3, #24]
 8008878:	f003 0304 	and.w	r3, r3, #4
 800887c:	607b      	str	r3, [r7, #4]
 800887e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008880:	4b39      	ldr	r3, [pc, #228]	; (8008968 <MX_GPIO_Init+0x144>)
 8008882:	699b      	ldr	r3, [r3, #24]
 8008884:	4a38      	ldr	r2, [pc, #224]	; (8008968 <MX_GPIO_Init+0x144>)
 8008886:	f043 0308 	orr.w	r3, r3, #8
 800888a:	6193      	str	r3, [r2, #24]
 800888c:	4b36      	ldr	r3, [pc, #216]	; (8008968 <MX_GPIO_Init+0x144>)
 800888e:	699b      	ldr	r3, [r3, #24]
 8008890:	f003 0308 	and.w	r3, r3, #8
 8008894:	603b      	str	r3, [r7, #0]
 8008896:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8008898:	2200      	movs	r2, #0
 800889a:	21f0      	movs	r1, #240	; 0xf0
 800889c:	4833      	ldr	r0, [pc, #204]	; (800896c <MX_GPIO_Init+0x148>)
 800889e:	f001 f8b0 	bl	8009a02 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 80088a2:	2200      	movs	r2, #0
 80088a4:	f241 0130 	movw	r1, #4144	; 0x1030
 80088a8:	4831      	ldr	r0, [pc, #196]	; (8008970 <MX_GPIO_Init+0x14c>)
 80088aa:	f001 f8aa 	bl	8009a02 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 80088ae:	2200      	movs	r2, #0
 80088b0:	f640 4107 	movw	r1, #3079	; 0xc07
 80088b4:	482f      	ldr	r0, [pc, #188]	; (8008974 <MX_GPIO_Init+0x150>)
 80088b6:	f001 f8a4 	bl	8009a02 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 80088ba:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 80088be:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80088c0:	2300      	movs	r3, #0
 80088c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088c4:	2300      	movs	r3, #0
 80088c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80088c8:	f107 0310 	add.w	r3, r7, #16
 80088cc:	4619      	mov	r1, r3
 80088ce:	4828      	ldr	r0, [pc, #160]	; (8008970 <MX_GPIO_Init+0x14c>)
 80088d0:	f000 fe20 	bl	8009514 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 80088d4:	f248 130f 	movw	r3, #33039	; 0x810f
 80088d8:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80088da:	2300      	movs	r3, #0
 80088dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088de:	2300      	movs	r3, #0
 80088e0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088e2:	f107 0310 	add.w	r3, r7, #16
 80088e6:	4619      	mov	r1, r3
 80088e8:	4820      	ldr	r0, [pc, #128]	; (800896c <MX_GPIO_Init+0x148>)
 80088ea:	f000 fe13 	bl	8009514 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 80088ee:	23f0      	movs	r3, #240	; 0xf0
 80088f0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80088f2:	2301      	movs	r3, #1
 80088f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80088f6:	2300      	movs	r3, #0
 80088f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80088fa:	2302      	movs	r3, #2
 80088fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088fe:	f107 0310 	add.w	r3, r7, #16
 8008902:	4619      	mov	r1, r3
 8008904:	4819      	ldr	r0, [pc, #100]	; (800896c <MX_GPIO_Init+0x148>)
 8008906:	f000 fe05 	bl	8009514 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 800890a:	f241 0330 	movw	r3, #4144	; 0x1030
 800890e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008910:	2301      	movs	r3, #1
 8008912:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008914:	2300      	movs	r3, #0
 8008916:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008918:	2302      	movs	r3, #2
 800891a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800891c:	f107 0310 	add.w	r3, r7, #16
 8008920:	4619      	mov	r1, r3
 8008922:	4813      	ldr	r0, [pc, #76]	; (8008970 <MX_GPIO_Init+0x14c>)
 8008924:	f000 fdf6 	bl	8009514 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008928:	f640 4307 	movw	r3, #3079	; 0xc07
 800892c:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800892e:	2301      	movs	r3, #1
 8008930:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008932:	2300      	movs	r3, #0
 8008934:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008936:	2302      	movs	r3, #2
 8008938:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800893a:	f107 0310 	add.w	r3, r7, #16
 800893e:	4619      	mov	r1, r3
 8008940:	480c      	ldr	r0, [pc, #48]	; (8008974 <MX_GPIO_Init+0x150>)
 8008942:	f000 fde7 	bl	8009514 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8008946:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800894a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800894c:	2300      	movs	r3, #0
 800894e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008950:	2300      	movs	r3, #0
 8008952:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008954:	f107 0310 	add.w	r3, r7, #16
 8008958:	4619      	mov	r1, r3
 800895a:	4806      	ldr	r0, [pc, #24]	; (8008974 <MX_GPIO_Init+0x150>)
 800895c:	f000 fdda 	bl	8009514 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008960:	bf00      	nop
 8008962:	3720      	adds	r7, #32
 8008964:	46bd      	mov	sp, r7
 8008966:	bd80      	pop	{r7, pc}
 8008968:	40021000 	.word	0x40021000
 800896c:	40010800 	.word	0x40010800
 8008970:	40011000 	.word	0x40011000
 8008974:	40010c00 	.word	0x40010c00

08008978 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008978:	b480      	push	{r7}
 800897a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 800897c:	bf00      	nop
 800897e:	46bd      	mov	sp, r7
 8008980:	bc80      	pop	{r7}
 8008982:	4770      	bx	lr

08008984 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008984:	b480      	push	{r7}
 8008986:	b085      	sub	sp, #20
 8008988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800898a:	4b15      	ldr	r3, [pc, #84]	; (80089e0 <HAL_MspInit+0x5c>)
 800898c:	699b      	ldr	r3, [r3, #24]
 800898e:	4a14      	ldr	r2, [pc, #80]	; (80089e0 <HAL_MspInit+0x5c>)
 8008990:	f043 0301 	orr.w	r3, r3, #1
 8008994:	6193      	str	r3, [r2, #24]
 8008996:	4b12      	ldr	r3, [pc, #72]	; (80089e0 <HAL_MspInit+0x5c>)
 8008998:	699b      	ldr	r3, [r3, #24]
 800899a:	f003 0301 	and.w	r3, r3, #1
 800899e:	60bb      	str	r3, [r7, #8]
 80089a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80089a2:	4b0f      	ldr	r3, [pc, #60]	; (80089e0 <HAL_MspInit+0x5c>)
 80089a4:	69db      	ldr	r3, [r3, #28]
 80089a6:	4a0e      	ldr	r2, [pc, #56]	; (80089e0 <HAL_MspInit+0x5c>)
 80089a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089ac:	61d3      	str	r3, [r2, #28]
 80089ae:	4b0c      	ldr	r3, [pc, #48]	; (80089e0 <HAL_MspInit+0x5c>)
 80089b0:	69db      	ldr	r3, [r3, #28]
 80089b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089b6:	607b      	str	r3, [r7, #4]
 80089b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80089ba:	4b0a      	ldr	r3, [pc, #40]	; (80089e4 <HAL_MspInit+0x60>)
 80089bc:	685b      	ldr	r3, [r3, #4]
 80089be:	60fb      	str	r3, [r7, #12]
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80089c6:	60fb      	str	r3, [r7, #12]
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80089ce:	60fb      	str	r3, [r7, #12]
 80089d0:	4a04      	ldr	r2, [pc, #16]	; (80089e4 <HAL_MspInit+0x60>)
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80089d6:	bf00      	nop
 80089d8:	3714      	adds	r7, #20
 80089da:	46bd      	mov	sp, r7
 80089dc:	bc80      	pop	{r7}
 80089de:	4770      	bx	lr
 80089e0:	40021000 	.word	0x40021000
 80089e4:	40010000 	.word	0x40010000

080089e8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b088      	sub	sp, #32
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80089f0:	f107 0310 	add.w	r3, r7, #16
 80089f4:	2200      	movs	r2, #0
 80089f6:	601a      	str	r2, [r3, #0]
 80089f8:	605a      	str	r2, [r3, #4]
 80089fa:	609a      	str	r2, [r3, #8]
 80089fc:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4a1c      	ldr	r2, [pc, #112]	; (8008a74 <HAL_CAN_MspInit+0x8c>)
 8008a04:	4293      	cmp	r3, r2
 8008a06:	d131      	bne.n	8008a6c <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8008a08:	4b1b      	ldr	r3, [pc, #108]	; (8008a78 <HAL_CAN_MspInit+0x90>)
 8008a0a:	69db      	ldr	r3, [r3, #28]
 8008a0c:	4a1a      	ldr	r2, [pc, #104]	; (8008a78 <HAL_CAN_MspInit+0x90>)
 8008a0e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008a12:	61d3      	str	r3, [r2, #28]
 8008a14:	4b18      	ldr	r3, [pc, #96]	; (8008a78 <HAL_CAN_MspInit+0x90>)
 8008a16:	69db      	ldr	r3, [r3, #28]
 8008a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008a1c:	60fb      	str	r3, [r7, #12]
 8008a1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008a20:	4b15      	ldr	r3, [pc, #84]	; (8008a78 <HAL_CAN_MspInit+0x90>)
 8008a22:	699b      	ldr	r3, [r3, #24]
 8008a24:	4a14      	ldr	r2, [pc, #80]	; (8008a78 <HAL_CAN_MspInit+0x90>)
 8008a26:	f043 0304 	orr.w	r3, r3, #4
 8008a2a:	6193      	str	r3, [r2, #24]
 8008a2c:	4b12      	ldr	r3, [pc, #72]	; (8008a78 <HAL_CAN_MspInit+0x90>)
 8008a2e:	699b      	ldr	r3, [r3, #24]
 8008a30:	f003 0304 	and.w	r3, r3, #4
 8008a34:	60bb      	str	r3, [r7, #8]
 8008a36:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008a38:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008a3c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a42:	2300      	movs	r3, #0
 8008a44:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a46:	f107 0310 	add.w	r3, r7, #16
 8008a4a:	4619      	mov	r1, r3
 8008a4c:	480b      	ldr	r0, [pc, #44]	; (8008a7c <HAL_CAN_MspInit+0x94>)
 8008a4e:	f000 fd61 	bl	8009514 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008a52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a56:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a58:	2302      	movs	r3, #2
 8008a5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008a5c:	2303      	movs	r3, #3
 8008a5e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008a60:	f107 0310 	add.w	r3, r7, #16
 8008a64:	4619      	mov	r1, r3
 8008a66:	4805      	ldr	r0, [pc, #20]	; (8008a7c <HAL_CAN_MspInit+0x94>)
 8008a68:	f000 fd54 	bl	8009514 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8008a6c:	bf00      	nop
 8008a6e:	3720      	adds	r7, #32
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}
 8008a74:	40006400 	.word	0x40006400
 8008a78:	40021000 	.word	0x40021000
 8008a7c:	40010800 	.word	0x40010800

08008a80 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b088      	sub	sp, #32
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008a88:	f107 0310 	add.w	r3, r7, #16
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	601a      	str	r2, [r3, #0]
 8008a90:	605a      	str	r2, [r3, #4]
 8008a92:	609a      	str	r2, [r3, #8]
 8008a94:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	4a15      	ldr	r2, [pc, #84]	; (8008af0 <HAL_I2C_MspInit+0x70>)
 8008a9c:	4293      	cmp	r3, r2
 8008a9e:	d123      	bne.n	8008ae8 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008aa0:	4b14      	ldr	r3, [pc, #80]	; (8008af4 <HAL_I2C_MspInit+0x74>)
 8008aa2:	699b      	ldr	r3, [r3, #24]
 8008aa4:	4a13      	ldr	r2, [pc, #76]	; (8008af4 <HAL_I2C_MspInit+0x74>)
 8008aa6:	f043 0308 	orr.w	r3, r3, #8
 8008aaa:	6193      	str	r3, [r2, #24]
 8008aac:	4b11      	ldr	r3, [pc, #68]	; (8008af4 <HAL_I2C_MspInit+0x74>)
 8008aae:	699b      	ldr	r3, [r3, #24]
 8008ab0:	f003 0308 	and.w	r3, r3, #8
 8008ab4:	60fb      	str	r3, [r7, #12]
 8008ab6:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008ab8:	23c0      	movs	r3, #192	; 0xc0
 8008aba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008abc:	2312      	movs	r3, #18
 8008abe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008ac0:	2303      	movs	r3, #3
 8008ac2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008ac4:	f107 0310 	add.w	r3, r7, #16
 8008ac8:	4619      	mov	r1, r3
 8008aca:	480b      	ldr	r0, [pc, #44]	; (8008af8 <HAL_I2C_MspInit+0x78>)
 8008acc:	f000 fd22 	bl	8009514 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008ad0:	4b08      	ldr	r3, [pc, #32]	; (8008af4 <HAL_I2C_MspInit+0x74>)
 8008ad2:	69db      	ldr	r3, [r3, #28]
 8008ad4:	4a07      	ldr	r2, [pc, #28]	; (8008af4 <HAL_I2C_MspInit+0x74>)
 8008ad6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008ada:	61d3      	str	r3, [r2, #28]
 8008adc:	4b05      	ldr	r3, [pc, #20]	; (8008af4 <HAL_I2C_MspInit+0x74>)
 8008ade:	69db      	ldr	r3, [r3, #28]
 8008ae0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008ae4:	60bb      	str	r3, [r7, #8]
 8008ae6:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008ae8:	bf00      	nop
 8008aea:	3720      	adds	r7, #32
 8008aec:	46bd      	mov	sp, r7
 8008aee:	bd80      	pop	{r7, pc}
 8008af0:	40005400 	.word	0x40005400
 8008af4:	40021000 	.word	0x40021000
 8008af8:	40010c00 	.word	0x40010c00

08008afc <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8008afc:	b580      	push	{r7, lr}
 8008afe:	b082      	sub	sp, #8
 8008b00:	af00      	add	r7, sp, #0
 8008b02:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a0a      	ldr	r2, [pc, #40]	; (8008b34 <HAL_I2C_MspDeInit+0x38>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d10d      	bne.n	8008b2a <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8008b0e:	4b0a      	ldr	r3, [pc, #40]	; (8008b38 <HAL_I2C_MspDeInit+0x3c>)
 8008b10:	69db      	ldr	r3, [r3, #28]
 8008b12:	4a09      	ldr	r2, [pc, #36]	; (8008b38 <HAL_I2C_MspDeInit+0x3c>)
 8008b14:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008b18:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8008b1a:	2140      	movs	r1, #64	; 0x40
 8008b1c:	4807      	ldr	r0, [pc, #28]	; (8008b3c <HAL_I2C_MspDeInit+0x40>)
 8008b1e:	f000 fe8d 	bl	800983c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8008b22:	2180      	movs	r1, #128	; 0x80
 8008b24:	4805      	ldr	r0, [pc, #20]	; (8008b3c <HAL_I2C_MspDeInit+0x40>)
 8008b26:	f000 fe89 	bl	800983c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8008b2a:	bf00      	nop
 8008b2c:	3708      	adds	r7, #8
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop
 8008b34:	40005400 	.word	0x40005400
 8008b38:	40021000 	.word	0x40021000
 8008b3c:	40010c00 	.word	0x40010c00

08008b40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b084      	sub	sp, #16
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a0d      	ldr	r2, [pc, #52]	; (8008b84 <HAL_TIM_Base_MspInit+0x44>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d113      	bne.n	8008b7a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008b52:	4b0d      	ldr	r3, [pc, #52]	; (8008b88 <HAL_TIM_Base_MspInit+0x48>)
 8008b54:	699b      	ldr	r3, [r3, #24]
 8008b56:	4a0c      	ldr	r2, [pc, #48]	; (8008b88 <HAL_TIM_Base_MspInit+0x48>)
 8008b58:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008b5c:	6193      	str	r3, [r2, #24]
 8008b5e:	4b0a      	ldr	r3, [pc, #40]	; (8008b88 <HAL_TIM_Base_MspInit+0x48>)
 8008b60:	699b      	ldr	r3, [r3, #24]
 8008b62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008b66:	60fb      	str	r3, [r7, #12]
 8008b68:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	2100      	movs	r1, #0
 8008b6e:	2019      	movs	r0, #25
 8008b70:	f000 fb57 	bl	8009222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8008b74:	2019      	movs	r0, #25
 8008b76:	f000 fb70 	bl	800925a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8008b7a:	bf00      	nop
 8008b7c:	3710      	adds	r7, #16
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}
 8008b82:	bf00      	nop
 8008b84:	40012c00 	.word	0x40012c00
 8008b88:	40021000 	.word	0x40021000

08008b8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b088      	sub	sp, #32
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b94:	f107 0310 	add.w	r3, r7, #16
 8008b98:	2200      	movs	r2, #0
 8008b9a:	601a      	str	r2, [r3, #0]
 8008b9c:	605a      	str	r2, [r3, #4]
 8008b9e:	609a      	str	r2, [r3, #8]
 8008ba0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	4a20      	ldr	r2, [pc, #128]	; (8008c28 <HAL_UART_MspInit+0x9c>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d139      	bne.n	8008c20 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008bac:	4b1f      	ldr	r3, [pc, #124]	; (8008c2c <HAL_UART_MspInit+0xa0>)
 8008bae:	699b      	ldr	r3, [r3, #24]
 8008bb0:	4a1e      	ldr	r2, [pc, #120]	; (8008c2c <HAL_UART_MspInit+0xa0>)
 8008bb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008bb6:	6193      	str	r3, [r2, #24]
 8008bb8:	4b1c      	ldr	r3, [pc, #112]	; (8008c2c <HAL_UART_MspInit+0xa0>)
 8008bba:	699b      	ldr	r3, [r3, #24]
 8008bbc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008bc0:	60fb      	str	r3, [r7, #12]
 8008bc2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008bc4:	4b19      	ldr	r3, [pc, #100]	; (8008c2c <HAL_UART_MspInit+0xa0>)
 8008bc6:	699b      	ldr	r3, [r3, #24]
 8008bc8:	4a18      	ldr	r2, [pc, #96]	; (8008c2c <HAL_UART_MspInit+0xa0>)
 8008bca:	f043 0304 	orr.w	r3, r3, #4
 8008bce:	6193      	str	r3, [r2, #24]
 8008bd0:	4b16      	ldr	r3, [pc, #88]	; (8008c2c <HAL_UART_MspInit+0xa0>)
 8008bd2:	699b      	ldr	r3, [r3, #24]
 8008bd4:	f003 0304 	and.w	r3, r3, #4
 8008bd8:	60bb      	str	r3, [r7, #8]
 8008bda:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008bdc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008be0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008be2:	2302      	movs	r3, #2
 8008be4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008be6:	2303      	movs	r3, #3
 8008be8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008bea:	f107 0310 	add.w	r3, r7, #16
 8008bee:	4619      	mov	r1, r3
 8008bf0:	480f      	ldr	r0, [pc, #60]	; (8008c30 <HAL_UART_MspInit+0xa4>)
 8008bf2:	f000 fc8f 	bl	8009514 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008bf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008bfa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008bfc:	2300      	movs	r3, #0
 8008bfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008c00:	2300      	movs	r3, #0
 8008c02:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008c04:	f107 0310 	add.w	r3, r7, #16
 8008c08:	4619      	mov	r1, r3
 8008c0a:	4809      	ldr	r0, [pc, #36]	; (8008c30 <HAL_UART_MspInit+0xa4>)
 8008c0c:	f000 fc82 	bl	8009514 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008c10:	2200      	movs	r2, #0
 8008c12:	2100      	movs	r1, #0
 8008c14:	2025      	movs	r0, #37	; 0x25
 8008c16:	f000 fb04 	bl	8009222 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008c1a:	2025      	movs	r0, #37	; 0x25
 8008c1c:	f000 fb1d 	bl	800925a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008c20:	bf00      	nop
 8008c22:	3720      	adds	r7, #32
 8008c24:	46bd      	mov	sp, r7
 8008c26:	bd80      	pop	{r7, pc}
 8008c28:	40013800 	.word	0x40013800
 8008c2c:	40021000 	.word	0x40021000
 8008c30:	40010800 	.word	0x40010800

08008c34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008c34:	b480      	push	{r7}
 8008c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008c38:	e7fe      	b.n	8008c38 <NMI_Handler+0x4>

08008c3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008c3a:	b480      	push	{r7}
 8008c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008c3e:	e7fe      	b.n	8008c3e <HardFault_Handler+0x4>

08008c40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008c40:	b480      	push	{r7}
 8008c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008c44:	e7fe      	b.n	8008c44 <MemManage_Handler+0x4>

08008c46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008c46:	b480      	push	{r7}
 8008c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008c4a:	e7fe      	b.n	8008c4a <BusFault_Handler+0x4>

08008c4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008c4c:	b480      	push	{r7}
 8008c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008c50:	e7fe      	b.n	8008c50 <UsageFault_Handler+0x4>

08008c52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008c52:	b480      	push	{r7}
 8008c54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008c56:	bf00      	nop
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	bc80      	pop	{r7}
 8008c5c:	4770      	bx	lr

08008c5e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008c5e:	b480      	push	{r7}
 8008c60:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008c62:	bf00      	nop
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bc80      	pop	{r7}
 8008c68:	4770      	bx	lr

08008c6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008c6a:	b480      	push	{r7}
 8008c6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008c6e:	bf00      	nop
 8008c70:	46bd      	mov	sp, r7
 8008c72:	bc80      	pop	{r7}
 8008c74:	4770      	bx	lr

08008c76 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008c76:	b580      	push	{r7, lr}
 8008c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008c7a:	f000 f8bf 	bl	8008dfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008c7e:	bf00      	nop
 8008c80:	bd80      	pop	{r7, pc}
	...

08008c84 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008c88:	4802      	ldr	r0, [pc, #8]	; (8008c94 <TIM1_UP_IRQHandler+0x10>)
 8008c8a:	f002 fdcd 	bl	800b828 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8008c8e:	bf00      	nop
 8008c90:	bd80      	pop	{r7, pc}
 8008c92:	bf00      	nop
 8008c94:	20000ab0 	.word	0x20000ab0

08008c98 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008c98:	b580      	push	{r7, lr}
 8008c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008c9c:	4802      	ldr	r0, [pc, #8]	; (8008ca8 <USART1_IRQHandler+0x10>)
 8008c9e:	f003 f995 	bl	800bfcc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008ca2:	bf00      	nop
 8008ca4:	bd80      	pop	{r7, pc}
 8008ca6:	bf00      	nop
 8008ca8:	20000af8 	.word	0x20000af8

08008cac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008cac:	b580      	push	{r7, lr}
 8008cae:	b086      	sub	sp, #24
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008cb4:	4a14      	ldr	r2, [pc, #80]	; (8008d08 <_sbrk+0x5c>)
 8008cb6:	4b15      	ldr	r3, [pc, #84]	; (8008d0c <_sbrk+0x60>)
 8008cb8:	1ad3      	subs	r3, r2, r3
 8008cba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008cbc:	697b      	ldr	r3, [r7, #20]
 8008cbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008cc0:	4b13      	ldr	r3, [pc, #76]	; (8008d10 <_sbrk+0x64>)
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d102      	bne.n	8008cce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008cc8:	4b11      	ldr	r3, [pc, #68]	; (8008d10 <_sbrk+0x64>)
 8008cca:	4a12      	ldr	r2, [pc, #72]	; (8008d14 <_sbrk+0x68>)
 8008ccc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008cce:	4b10      	ldr	r3, [pc, #64]	; (8008d10 <_sbrk+0x64>)
 8008cd0:	681a      	ldr	r2, [r3, #0]
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	4413      	add	r3, r2
 8008cd6:	693a      	ldr	r2, [r7, #16]
 8008cd8:	429a      	cmp	r2, r3
 8008cda:	d207      	bcs.n	8008cec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008cdc:	f003 ff80 	bl	800cbe0 <__errno>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	220c      	movs	r2, #12
 8008ce4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008ce6:	f04f 33ff 	mov.w	r3, #4294967295
 8008cea:	e009      	b.n	8008d00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008cec:	4b08      	ldr	r3, [pc, #32]	; (8008d10 <_sbrk+0x64>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008cf2:	4b07      	ldr	r3, [pc, #28]	; (8008d10 <_sbrk+0x64>)
 8008cf4:	681a      	ldr	r2, [r3, #0]
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	4413      	add	r3, r2
 8008cfa:	4a05      	ldr	r2, [pc, #20]	; (8008d10 <_sbrk+0x64>)
 8008cfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	3718      	adds	r7, #24
 8008d04:	46bd      	mov	sp, r7
 8008d06:	bd80      	pop	{r7, pc}
 8008d08:	2000c000 	.word	0x2000c000
 8008d0c:	00000400 	.word	0x00000400
 8008d10:	20000da4 	.word	0x20000da4
 8008d14:	20000ef8 	.word	0x20000ef8

08008d18 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008d1c:	bf00      	nop
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	bc80      	pop	{r7}
 8008d22:	4770      	bx	lr

08008d24 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008d24:	480c      	ldr	r0, [pc, #48]	; (8008d58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008d26:	490d      	ldr	r1, [pc, #52]	; (8008d5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008d28:	4a0d      	ldr	r2, [pc, #52]	; (8008d60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008d2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008d2c:	e002      	b.n	8008d34 <LoopCopyDataInit>

08008d2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008d2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008d30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008d32:	3304      	adds	r3, #4

08008d34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008d34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008d36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008d38:	d3f9      	bcc.n	8008d2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008d3a:	4a0a      	ldr	r2, [pc, #40]	; (8008d64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008d3c:	4c0a      	ldr	r4, [pc, #40]	; (8008d68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8008d3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008d40:	e001      	b.n	8008d46 <LoopFillZerobss>

08008d42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008d42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008d44:	3204      	adds	r2, #4

08008d46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008d46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008d48:	d3fb      	bcc.n	8008d42 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008d4a:	f7ff ffe5 	bl	8008d18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008d4e:	f003 ff4d 	bl	800cbec <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008d52:	f7ff fb91 	bl	8008478 <main>
  bx lr
 8008d56:	4770      	bx	lr
  ldr r0, =_sdata
 8008d58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008d5c:	20000a14 	.word	0x20000a14
  ldr r2, =_sidata
 8008d60:	0800da2c 	.word	0x0800da2c
  ldr r2, =_sbss
 8008d64:	20000a14 	.word	0x20000a14
  ldr r4, =_ebss
 8008d68:	20000ef4 	.word	0x20000ef4

08008d6c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008d6c:	e7fe      	b.n	8008d6c <ADC1_2_IRQHandler>
	...

08008d70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008d70:	b580      	push	{r7, lr}
 8008d72:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008d74:	4b08      	ldr	r3, [pc, #32]	; (8008d98 <HAL_Init+0x28>)
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4a07      	ldr	r2, [pc, #28]	; (8008d98 <HAL_Init+0x28>)
 8008d7a:	f043 0310 	orr.w	r3, r3, #16
 8008d7e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008d80:	2003      	movs	r0, #3
 8008d82:	f000 fa43 	bl	800920c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008d86:	200f      	movs	r0, #15
 8008d88:	f000 f808 	bl	8008d9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008d8c:	f7ff fdfa 	bl	8008984 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008d90:	2300      	movs	r3, #0
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	bd80      	pop	{r7, pc}
 8008d96:	bf00      	nop
 8008d98:	40022000 	.word	0x40022000

08008d9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b082      	sub	sp, #8
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008da4:	4b12      	ldr	r3, [pc, #72]	; (8008df0 <HAL_InitTick+0x54>)
 8008da6:	681a      	ldr	r2, [r3, #0]
 8008da8:	4b12      	ldr	r3, [pc, #72]	; (8008df4 <HAL_InitTick+0x58>)
 8008daa:	781b      	ldrb	r3, [r3, #0]
 8008dac:	4619      	mov	r1, r3
 8008dae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008db2:	fbb3 f3f1 	udiv	r3, r3, r1
 8008db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8008dba:	4618      	mov	r0, r3
 8008dbc:	f000 fa5b 	bl	8009276 <HAL_SYSTICK_Config>
 8008dc0:	4603      	mov	r3, r0
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d001      	beq.n	8008dca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	e00e      	b.n	8008de8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2b0f      	cmp	r3, #15
 8008dce:	d80a      	bhi.n	8008de6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	6879      	ldr	r1, [r7, #4]
 8008dd4:	f04f 30ff 	mov.w	r0, #4294967295
 8008dd8:	f000 fa23 	bl	8009222 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008ddc:	4a06      	ldr	r2, [pc, #24]	; (8008df8 <HAL_InitTick+0x5c>)
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008de2:	2300      	movs	r3, #0
 8008de4:	e000      	b.n	8008de8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008de6:	2301      	movs	r3, #1
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3708      	adds	r7, #8
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}
 8008df0:	200009b8 	.word	0x200009b8
 8008df4:	200009c0 	.word	0x200009c0
 8008df8:	200009bc 	.word	0x200009bc

08008dfc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008e00:	4b05      	ldr	r3, [pc, #20]	; (8008e18 <HAL_IncTick+0x1c>)
 8008e02:	781b      	ldrb	r3, [r3, #0]
 8008e04:	461a      	mov	r2, r3
 8008e06:	4b05      	ldr	r3, [pc, #20]	; (8008e1c <HAL_IncTick+0x20>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	4413      	add	r3, r2
 8008e0c:	4a03      	ldr	r2, [pc, #12]	; (8008e1c <HAL_IncTick+0x20>)
 8008e0e:	6013      	str	r3, [r2, #0]
}
 8008e10:	bf00      	nop
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bc80      	pop	{r7}
 8008e16:	4770      	bx	lr
 8008e18:	200009c0 	.word	0x200009c0
 8008e1c:	20000da8 	.word	0x20000da8

08008e20 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008e20:	b480      	push	{r7}
 8008e22:	af00      	add	r7, sp, #0
  return uwTick;
 8008e24:	4b02      	ldr	r3, [pc, #8]	; (8008e30 <HAL_GetTick+0x10>)
 8008e26:	681b      	ldr	r3, [r3, #0]
}
 8008e28:	4618      	mov	r0, r3
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bc80      	pop	{r7}
 8008e2e:	4770      	bx	lr
 8008e30:	20000da8 	.word	0x20000da8

08008e34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b084      	sub	sp, #16
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008e3c:	f7ff fff0 	bl	8008e20 <HAL_GetTick>
 8008e40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e4c:	d005      	beq.n	8008e5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008e4e:	4b0a      	ldr	r3, [pc, #40]	; (8008e78 <HAL_Delay+0x44>)
 8008e50:	781b      	ldrb	r3, [r3, #0]
 8008e52:	461a      	mov	r2, r3
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	4413      	add	r3, r2
 8008e58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008e5a:	bf00      	nop
 8008e5c:	f7ff ffe0 	bl	8008e20 <HAL_GetTick>
 8008e60:	4602      	mov	r2, r0
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	1ad3      	subs	r3, r2, r3
 8008e66:	68fa      	ldr	r2, [r7, #12]
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d8f7      	bhi.n	8008e5c <HAL_Delay+0x28>
  {
  }
}
 8008e6c:	bf00      	nop
 8008e6e:	bf00      	nop
 8008e70:	3710      	adds	r7, #16
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
 8008e76:	bf00      	nop
 8008e78:	200009c0 	.word	0x200009c0

08008e7c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b084      	sub	sp, #16
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d101      	bne.n	8008e8e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	e0ed      	b.n	800906a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d102      	bne.n	8008ea0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8008e9a:	6878      	ldr	r0, [r7, #4]
 8008e9c:	f7ff fda4 	bl	80089e8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	681a      	ldr	r2, [r3, #0]
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	f042 0201 	orr.w	r2, r2, #1
 8008eae:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008eb0:	f7ff ffb6 	bl	8008e20 <HAL_GetTick>
 8008eb4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008eb6:	e012      	b.n	8008ede <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008eb8:	f7ff ffb2 	bl	8008e20 <HAL_GetTick>
 8008ebc:	4602      	mov	r2, r0
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	1ad3      	subs	r3, r2, r3
 8008ec2:	2b0a      	cmp	r3, #10
 8008ec4:	d90b      	bls.n	8008ede <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eca:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	2205      	movs	r2, #5
 8008ed6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008eda:	2301      	movs	r3, #1
 8008edc:	e0c5      	b.n	800906a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	f003 0301 	and.w	r3, r3, #1
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d0e5      	beq.n	8008eb8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	681a      	ldr	r2, [r3, #0]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f022 0202 	bic.w	r2, r2, #2
 8008efa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008efc:	f7ff ff90 	bl	8008e20 <HAL_GetTick>
 8008f00:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008f02:	e012      	b.n	8008f2a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008f04:	f7ff ff8c 	bl	8008e20 <HAL_GetTick>
 8008f08:	4602      	mov	r2, r0
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	1ad3      	subs	r3, r2, r3
 8008f0e:	2b0a      	cmp	r3, #10
 8008f10:	d90b      	bls.n	8008f2a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f16:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	2205      	movs	r2, #5
 8008f22:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008f26:	2301      	movs	r3, #1
 8008f28:	e09f      	b.n	800906a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	f003 0302 	and.w	r3, r3, #2
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d1e5      	bne.n	8008f04 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	7e1b      	ldrb	r3, [r3, #24]
 8008f3c:	2b01      	cmp	r3, #1
 8008f3e:	d108      	bne.n	8008f52 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	681a      	ldr	r2, [r3, #0]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008f4e:	601a      	str	r2, [r3, #0]
 8008f50:	e007      	b.n	8008f62 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	681a      	ldr	r2, [r3, #0]
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f60:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	7e5b      	ldrb	r3, [r3, #25]
 8008f66:	2b01      	cmp	r3, #1
 8008f68:	d108      	bne.n	8008f7c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	681a      	ldr	r2, [r3, #0]
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008f78:	601a      	str	r2, [r3, #0]
 8008f7a:	e007      	b.n	8008f8c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	681a      	ldr	r2, [r3, #0]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008f8a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	7e9b      	ldrb	r3, [r3, #26]
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d108      	bne.n	8008fa6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	681a      	ldr	r2, [r3, #0]
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	f042 0220 	orr.w	r2, r2, #32
 8008fa2:	601a      	str	r2, [r3, #0]
 8008fa4:	e007      	b.n	8008fb6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	681a      	ldr	r2, [r3, #0]
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f022 0220 	bic.w	r2, r2, #32
 8008fb4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	7edb      	ldrb	r3, [r3, #27]
 8008fba:	2b01      	cmp	r3, #1
 8008fbc:	d108      	bne.n	8008fd0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	681a      	ldr	r2, [r3, #0]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	681b      	ldr	r3, [r3, #0]
 8008fc8:	f022 0210 	bic.w	r2, r2, #16
 8008fcc:	601a      	str	r2, [r3, #0]
 8008fce:	e007      	b.n	8008fe0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	681a      	ldr	r2, [r3, #0]
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f042 0210 	orr.w	r2, r2, #16
 8008fde:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	7f1b      	ldrb	r3, [r3, #28]
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	d108      	bne.n	8008ffa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	681a      	ldr	r2, [r3, #0]
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f042 0208 	orr.w	r2, r2, #8
 8008ff6:	601a      	str	r2, [r3, #0]
 8008ff8:	e007      	b.n	800900a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	681a      	ldr	r2, [r3, #0]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f022 0208 	bic.w	r2, r2, #8
 8009008:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	7f5b      	ldrb	r3, [r3, #29]
 800900e:	2b01      	cmp	r3, #1
 8009010:	d108      	bne.n	8009024 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	681a      	ldr	r2, [r3, #0]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	f042 0204 	orr.w	r2, r2, #4
 8009020:	601a      	str	r2, [r3, #0]
 8009022:	e007      	b.n	8009034 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	681a      	ldr	r2, [r3, #0]
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	f022 0204 	bic.w	r2, r2, #4
 8009032:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	689a      	ldr	r2, [r3, #8]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	68db      	ldr	r3, [r3, #12]
 800903c:	431a      	orrs	r2, r3
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	691b      	ldr	r3, [r3, #16]
 8009042:	431a      	orrs	r2, r3
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	695b      	ldr	r3, [r3, #20]
 8009048:	ea42 0103 	orr.w	r1, r2, r3
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	1e5a      	subs	r2, r3, #1
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	430a      	orrs	r2, r1
 8009058:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2200      	movs	r2, #0
 800905e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	2201      	movs	r2, #1
 8009064:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8009068:	2300      	movs	r3, #0
}
 800906a:	4618      	mov	r0, r3
 800906c:	3710      	adds	r7, #16
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
	...

08009074 <__NVIC_SetPriorityGrouping>:
{
 8009074:	b480      	push	{r7}
 8009076:	b085      	sub	sp, #20
 8009078:	af00      	add	r7, sp, #0
 800907a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	f003 0307 	and.w	r3, r3, #7
 8009082:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009084:	4b0c      	ldr	r3, [pc, #48]	; (80090b8 <__NVIC_SetPriorityGrouping+0x44>)
 8009086:	68db      	ldr	r3, [r3, #12]
 8009088:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800908a:	68ba      	ldr	r2, [r7, #8]
 800908c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009090:	4013      	ands	r3, r2
 8009092:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009098:	68bb      	ldr	r3, [r7, #8]
 800909a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800909c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80090a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80090a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80090a6:	4a04      	ldr	r2, [pc, #16]	; (80090b8 <__NVIC_SetPriorityGrouping+0x44>)
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	60d3      	str	r3, [r2, #12]
}
 80090ac:	bf00      	nop
 80090ae:	3714      	adds	r7, #20
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bc80      	pop	{r7}
 80090b4:	4770      	bx	lr
 80090b6:	bf00      	nop
 80090b8:	e000ed00 	.word	0xe000ed00

080090bc <__NVIC_GetPriorityGrouping>:
{
 80090bc:	b480      	push	{r7}
 80090be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80090c0:	4b04      	ldr	r3, [pc, #16]	; (80090d4 <__NVIC_GetPriorityGrouping+0x18>)
 80090c2:	68db      	ldr	r3, [r3, #12]
 80090c4:	0a1b      	lsrs	r3, r3, #8
 80090c6:	f003 0307 	and.w	r3, r3, #7
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bc80      	pop	{r7}
 80090d0:	4770      	bx	lr
 80090d2:	bf00      	nop
 80090d4:	e000ed00 	.word	0xe000ed00

080090d8 <__NVIC_EnableIRQ>:
{
 80090d8:	b480      	push	{r7}
 80090da:	b083      	sub	sp, #12
 80090dc:	af00      	add	r7, sp, #0
 80090de:	4603      	mov	r3, r0
 80090e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80090e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	db0b      	blt.n	8009102 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80090ea:	79fb      	ldrb	r3, [r7, #7]
 80090ec:	f003 021f 	and.w	r2, r3, #31
 80090f0:	4906      	ldr	r1, [pc, #24]	; (800910c <__NVIC_EnableIRQ+0x34>)
 80090f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80090f6:	095b      	lsrs	r3, r3, #5
 80090f8:	2001      	movs	r0, #1
 80090fa:	fa00 f202 	lsl.w	r2, r0, r2
 80090fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8009102:	bf00      	nop
 8009104:	370c      	adds	r7, #12
 8009106:	46bd      	mov	sp, r7
 8009108:	bc80      	pop	{r7}
 800910a:	4770      	bx	lr
 800910c:	e000e100 	.word	0xe000e100

08009110 <__NVIC_SetPriority>:
{
 8009110:	b480      	push	{r7}
 8009112:	b083      	sub	sp, #12
 8009114:	af00      	add	r7, sp, #0
 8009116:	4603      	mov	r3, r0
 8009118:	6039      	str	r1, [r7, #0]
 800911a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800911c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009120:	2b00      	cmp	r3, #0
 8009122:	db0a      	blt.n	800913a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	b2da      	uxtb	r2, r3
 8009128:	490c      	ldr	r1, [pc, #48]	; (800915c <__NVIC_SetPriority+0x4c>)
 800912a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800912e:	0112      	lsls	r2, r2, #4
 8009130:	b2d2      	uxtb	r2, r2
 8009132:	440b      	add	r3, r1
 8009134:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009138:	e00a      	b.n	8009150 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800913a:	683b      	ldr	r3, [r7, #0]
 800913c:	b2da      	uxtb	r2, r3
 800913e:	4908      	ldr	r1, [pc, #32]	; (8009160 <__NVIC_SetPriority+0x50>)
 8009140:	79fb      	ldrb	r3, [r7, #7]
 8009142:	f003 030f 	and.w	r3, r3, #15
 8009146:	3b04      	subs	r3, #4
 8009148:	0112      	lsls	r2, r2, #4
 800914a:	b2d2      	uxtb	r2, r2
 800914c:	440b      	add	r3, r1
 800914e:	761a      	strb	r2, [r3, #24]
}
 8009150:	bf00      	nop
 8009152:	370c      	adds	r7, #12
 8009154:	46bd      	mov	sp, r7
 8009156:	bc80      	pop	{r7}
 8009158:	4770      	bx	lr
 800915a:	bf00      	nop
 800915c:	e000e100 	.word	0xe000e100
 8009160:	e000ed00 	.word	0xe000ed00

08009164 <NVIC_EncodePriority>:
{
 8009164:	b480      	push	{r7}
 8009166:	b089      	sub	sp, #36	; 0x24
 8009168:	af00      	add	r7, sp, #0
 800916a:	60f8      	str	r0, [r7, #12]
 800916c:	60b9      	str	r1, [r7, #8]
 800916e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	f003 0307 	and.w	r3, r3, #7
 8009176:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009178:	69fb      	ldr	r3, [r7, #28]
 800917a:	f1c3 0307 	rsb	r3, r3, #7
 800917e:	2b04      	cmp	r3, #4
 8009180:	bf28      	it	cs
 8009182:	2304      	movcs	r3, #4
 8009184:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009186:	69fb      	ldr	r3, [r7, #28]
 8009188:	3304      	adds	r3, #4
 800918a:	2b06      	cmp	r3, #6
 800918c:	d902      	bls.n	8009194 <NVIC_EncodePriority+0x30>
 800918e:	69fb      	ldr	r3, [r7, #28]
 8009190:	3b03      	subs	r3, #3
 8009192:	e000      	b.n	8009196 <NVIC_EncodePriority+0x32>
 8009194:	2300      	movs	r3, #0
 8009196:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009198:	f04f 32ff 	mov.w	r2, #4294967295
 800919c:	69bb      	ldr	r3, [r7, #24]
 800919e:	fa02 f303 	lsl.w	r3, r2, r3
 80091a2:	43da      	mvns	r2, r3
 80091a4:	68bb      	ldr	r3, [r7, #8]
 80091a6:	401a      	ands	r2, r3
 80091a8:	697b      	ldr	r3, [r7, #20]
 80091aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80091ac:	f04f 31ff 	mov.w	r1, #4294967295
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	fa01 f303 	lsl.w	r3, r1, r3
 80091b6:	43d9      	mvns	r1, r3
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80091bc:	4313      	orrs	r3, r2
}
 80091be:	4618      	mov	r0, r3
 80091c0:	3724      	adds	r7, #36	; 0x24
 80091c2:	46bd      	mov	sp, r7
 80091c4:	bc80      	pop	{r7}
 80091c6:	4770      	bx	lr

080091c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b082      	sub	sp, #8
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	3b01      	subs	r3, #1
 80091d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80091d8:	d301      	bcc.n	80091de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80091da:	2301      	movs	r3, #1
 80091dc:	e00f      	b.n	80091fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80091de:	4a0a      	ldr	r2, [pc, #40]	; (8009208 <SysTick_Config+0x40>)
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	3b01      	subs	r3, #1
 80091e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80091e6:	210f      	movs	r1, #15
 80091e8:	f04f 30ff 	mov.w	r0, #4294967295
 80091ec:	f7ff ff90 	bl	8009110 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80091f0:	4b05      	ldr	r3, [pc, #20]	; (8009208 <SysTick_Config+0x40>)
 80091f2:	2200      	movs	r2, #0
 80091f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80091f6:	4b04      	ldr	r3, [pc, #16]	; (8009208 <SysTick_Config+0x40>)
 80091f8:	2207      	movs	r2, #7
 80091fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80091fc:	2300      	movs	r3, #0
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3708      	adds	r7, #8
 8009202:	46bd      	mov	sp, r7
 8009204:	bd80      	pop	{r7, pc}
 8009206:	bf00      	nop
 8009208:	e000e010 	.word	0xe000e010

0800920c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800920c:	b580      	push	{r7, lr}
 800920e:	b082      	sub	sp, #8
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009214:	6878      	ldr	r0, [r7, #4]
 8009216:	f7ff ff2d 	bl	8009074 <__NVIC_SetPriorityGrouping>
}
 800921a:	bf00      	nop
 800921c:	3708      	adds	r7, #8
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}

08009222 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009222:	b580      	push	{r7, lr}
 8009224:	b086      	sub	sp, #24
 8009226:	af00      	add	r7, sp, #0
 8009228:	4603      	mov	r3, r0
 800922a:	60b9      	str	r1, [r7, #8]
 800922c:	607a      	str	r2, [r7, #4]
 800922e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8009230:	2300      	movs	r3, #0
 8009232:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009234:	f7ff ff42 	bl	80090bc <__NVIC_GetPriorityGrouping>
 8009238:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800923a:	687a      	ldr	r2, [r7, #4]
 800923c:	68b9      	ldr	r1, [r7, #8]
 800923e:	6978      	ldr	r0, [r7, #20]
 8009240:	f7ff ff90 	bl	8009164 <NVIC_EncodePriority>
 8009244:	4602      	mov	r2, r0
 8009246:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800924a:	4611      	mov	r1, r2
 800924c:	4618      	mov	r0, r3
 800924e:	f7ff ff5f 	bl	8009110 <__NVIC_SetPriority>
}
 8009252:	bf00      	nop
 8009254:	3718      	adds	r7, #24
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}

0800925a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800925a:	b580      	push	{r7, lr}
 800925c:	b082      	sub	sp, #8
 800925e:	af00      	add	r7, sp, #0
 8009260:	4603      	mov	r3, r0
 8009262:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009264:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009268:	4618      	mov	r0, r3
 800926a:	f7ff ff35 	bl	80090d8 <__NVIC_EnableIRQ>
}
 800926e:	bf00      	nop
 8009270:	3708      	adds	r7, #8
 8009272:	46bd      	mov	sp, r7
 8009274:	bd80      	pop	{r7, pc}

08009276 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009276:	b580      	push	{r7, lr}
 8009278:	b082      	sub	sp, #8
 800927a:	af00      	add	r7, sp, #0
 800927c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f7ff ffa2 	bl	80091c8 <SysTick_Config>
 8009284:	4603      	mov	r3, r0
}
 8009286:	4618      	mov	r0, r3
 8009288:	3708      	adds	r7, #8
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}

0800928e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800928e:	b480      	push	{r7}
 8009290:	b085      	sub	sp, #20
 8009292:	af00      	add	r7, sp, #0
 8009294:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009296:	2300      	movs	r3, #0
 8009298:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80092a0:	b2db      	uxtb	r3, r3
 80092a2:	2b02      	cmp	r3, #2
 80092a4:	d008      	beq.n	80092b8 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	2204      	movs	r2, #4
 80092aa:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2200      	movs	r2, #0
 80092b0:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80092b4:	2301      	movs	r3, #1
 80092b6:	e020      	b.n	80092fa <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	681a      	ldr	r2, [r3, #0]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f022 020e 	bic.w	r2, r2, #14
 80092c6:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	681a      	ldr	r2, [r3, #0]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	f022 0201 	bic.w	r2, r2, #1
 80092d6:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80092e0:	2101      	movs	r1, #1
 80092e2:	fa01 f202 	lsl.w	r2, r1, r2
 80092e6:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	2201      	movs	r2, #1
 80092ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2200      	movs	r2, #0
 80092f4:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80092f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80092fa:	4618      	mov	r0, r3
 80092fc:	3714      	adds	r7, #20
 80092fe:	46bd      	mov	sp, r7
 8009300:	bc80      	pop	{r7}
 8009302:	4770      	bx	lr

08009304 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8009304:	b580      	push	{r7, lr}
 8009306:	b084      	sub	sp, #16
 8009308:	af00      	add	r7, sp, #0
 800930a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800930c:	2300      	movs	r3, #0
 800930e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009316:	b2db      	uxtb	r3, r3
 8009318:	2b02      	cmp	r3, #2
 800931a:	d005      	beq.n	8009328 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2204      	movs	r2, #4
 8009320:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8009322:	2301      	movs	r3, #1
 8009324:	73fb      	strb	r3, [r7, #15]
 8009326:	e0d6      	b.n	80094d6 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	681a      	ldr	r2, [r3, #0]
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	f022 020e 	bic.w	r2, r2, #14
 8009336:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	681a      	ldr	r2, [r3, #0]
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	f022 0201 	bic.w	r2, r2, #1
 8009346:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	461a      	mov	r2, r3
 800934e:	4b64      	ldr	r3, [pc, #400]	; (80094e0 <HAL_DMA_Abort_IT+0x1dc>)
 8009350:	429a      	cmp	r2, r3
 8009352:	d958      	bls.n	8009406 <HAL_DMA_Abort_IT+0x102>
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	4a62      	ldr	r2, [pc, #392]	; (80094e4 <HAL_DMA_Abort_IT+0x1e0>)
 800935a:	4293      	cmp	r3, r2
 800935c:	d04f      	beq.n	80093fe <HAL_DMA_Abort_IT+0xfa>
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	4a61      	ldr	r2, [pc, #388]	; (80094e8 <HAL_DMA_Abort_IT+0x1e4>)
 8009364:	4293      	cmp	r3, r2
 8009366:	d048      	beq.n	80093fa <HAL_DMA_Abort_IT+0xf6>
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	4a5f      	ldr	r2, [pc, #380]	; (80094ec <HAL_DMA_Abort_IT+0x1e8>)
 800936e:	4293      	cmp	r3, r2
 8009370:	d040      	beq.n	80093f4 <HAL_DMA_Abort_IT+0xf0>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	4a5e      	ldr	r2, [pc, #376]	; (80094f0 <HAL_DMA_Abort_IT+0x1ec>)
 8009378:	4293      	cmp	r3, r2
 800937a:	d038      	beq.n	80093ee <HAL_DMA_Abort_IT+0xea>
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4a5c      	ldr	r2, [pc, #368]	; (80094f4 <HAL_DMA_Abort_IT+0x1f0>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d030      	beq.n	80093e8 <HAL_DMA_Abort_IT+0xe4>
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	4a5b      	ldr	r2, [pc, #364]	; (80094f8 <HAL_DMA_Abort_IT+0x1f4>)
 800938c:	4293      	cmp	r3, r2
 800938e:	d028      	beq.n	80093e2 <HAL_DMA_Abort_IT+0xde>
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	4a52      	ldr	r2, [pc, #328]	; (80094e0 <HAL_DMA_Abort_IT+0x1dc>)
 8009396:	4293      	cmp	r3, r2
 8009398:	d020      	beq.n	80093dc <HAL_DMA_Abort_IT+0xd8>
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	4a57      	ldr	r2, [pc, #348]	; (80094fc <HAL_DMA_Abort_IT+0x1f8>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d019      	beq.n	80093d8 <HAL_DMA_Abort_IT+0xd4>
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	4a55      	ldr	r2, [pc, #340]	; (8009500 <HAL_DMA_Abort_IT+0x1fc>)
 80093aa:	4293      	cmp	r3, r2
 80093ac:	d012      	beq.n	80093d4 <HAL_DMA_Abort_IT+0xd0>
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	4a54      	ldr	r2, [pc, #336]	; (8009504 <HAL_DMA_Abort_IT+0x200>)
 80093b4:	4293      	cmp	r3, r2
 80093b6:	d00a      	beq.n	80093ce <HAL_DMA_Abort_IT+0xca>
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	4a52      	ldr	r2, [pc, #328]	; (8009508 <HAL_DMA_Abort_IT+0x204>)
 80093be:	4293      	cmp	r3, r2
 80093c0:	d102      	bne.n	80093c8 <HAL_DMA_Abort_IT+0xc4>
 80093c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80093c6:	e01b      	b.n	8009400 <HAL_DMA_Abort_IT+0xfc>
 80093c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80093cc:	e018      	b.n	8009400 <HAL_DMA_Abort_IT+0xfc>
 80093ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80093d2:	e015      	b.n	8009400 <HAL_DMA_Abort_IT+0xfc>
 80093d4:	2310      	movs	r3, #16
 80093d6:	e013      	b.n	8009400 <HAL_DMA_Abort_IT+0xfc>
 80093d8:	2301      	movs	r3, #1
 80093da:	e011      	b.n	8009400 <HAL_DMA_Abort_IT+0xfc>
 80093dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80093e0:	e00e      	b.n	8009400 <HAL_DMA_Abort_IT+0xfc>
 80093e2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80093e6:	e00b      	b.n	8009400 <HAL_DMA_Abort_IT+0xfc>
 80093e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80093ec:	e008      	b.n	8009400 <HAL_DMA_Abort_IT+0xfc>
 80093ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80093f2:	e005      	b.n	8009400 <HAL_DMA_Abort_IT+0xfc>
 80093f4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80093f8:	e002      	b.n	8009400 <HAL_DMA_Abort_IT+0xfc>
 80093fa:	2310      	movs	r3, #16
 80093fc:	e000      	b.n	8009400 <HAL_DMA_Abort_IT+0xfc>
 80093fe:	2301      	movs	r3, #1
 8009400:	4a42      	ldr	r2, [pc, #264]	; (800950c <HAL_DMA_Abort_IT+0x208>)
 8009402:	6053      	str	r3, [r2, #4]
 8009404:	e057      	b.n	80094b6 <HAL_DMA_Abort_IT+0x1b2>
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4a36      	ldr	r2, [pc, #216]	; (80094e4 <HAL_DMA_Abort_IT+0x1e0>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d04f      	beq.n	80094b0 <HAL_DMA_Abort_IT+0x1ac>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4a34      	ldr	r2, [pc, #208]	; (80094e8 <HAL_DMA_Abort_IT+0x1e4>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d048      	beq.n	80094ac <HAL_DMA_Abort_IT+0x1a8>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	4a33      	ldr	r2, [pc, #204]	; (80094ec <HAL_DMA_Abort_IT+0x1e8>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d040      	beq.n	80094a6 <HAL_DMA_Abort_IT+0x1a2>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4a31      	ldr	r2, [pc, #196]	; (80094f0 <HAL_DMA_Abort_IT+0x1ec>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d038      	beq.n	80094a0 <HAL_DMA_Abort_IT+0x19c>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4a30      	ldr	r2, [pc, #192]	; (80094f4 <HAL_DMA_Abort_IT+0x1f0>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d030      	beq.n	800949a <HAL_DMA_Abort_IT+0x196>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4a2e      	ldr	r2, [pc, #184]	; (80094f8 <HAL_DMA_Abort_IT+0x1f4>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d028      	beq.n	8009494 <HAL_DMA_Abort_IT+0x190>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	4a26      	ldr	r2, [pc, #152]	; (80094e0 <HAL_DMA_Abort_IT+0x1dc>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d020      	beq.n	800948e <HAL_DMA_Abort_IT+0x18a>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4a2a      	ldr	r2, [pc, #168]	; (80094fc <HAL_DMA_Abort_IT+0x1f8>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d019      	beq.n	800948a <HAL_DMA_Abort_IT+0x186>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4a29      	ldr	r2, [pc, #164]	; (8009500 <HAL_DMA_Abort_IT+0x1fc>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d012      	beq.n	8009486 <HAL_DMA_Abort_IT+0x182>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a27      	ldr	r2, [pc, #156]	; (8009504 <HAL_DMA_Abort_IT+0x200>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d00a      	beq.n	8009480 <HAL_DMA_Abort_IT+0x17c>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4a26      	ldr	r2, [pc, #152]	; (8009508 <HAL_DMA_Abort_IT+0x204>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d102      	bne.n	800947a <HAL_DMA_Abort_IT+0x176>
 8009474:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009478:	e01b      	b.n	80094b2 <HAL_DMA_Abort_IT+0x1ae>
 800947a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800947e:	e018      	b.n	80094b2 <HAL_DMA_Abort_IT+0x1ae>
 8009480:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009484:	e015      	b.n	80094b2 <HAL_DMA_Abort_IT+0x1ae>
 8009486:	2310      	movs	r3, #16
 8009488:	e013      	b.n	80094b2 <HAL_DMA_Abort_IT+0x1ae>
 800948a:	2301      	movs	r3, #1
 800948c:	e011      	b.n	80094b2 <HAL_DMA_Abort_IT+0x1ae>
 800948e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009492:	e00e      	b.n	80094b2 <HAL_DMA_Abort_IT+0x1ae>
 8009494:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009498:	e00b      	b.n	80094b2 <HAL_DMA_Abort_IT+0x1ae>
 800949a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800949e:	e008      	b.n	80094b2 <HAL_DMA_Abort_IT+0x1ae>
 80094a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80094a4:	e005      	b.n	80094b2 <HAL_DMA_Abort_IT+0x1ae>
 80094a6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80094aa:	e002      	b.n	80094b2 <HAL_DMA_Abort_IT+0x1ae>
 80094ac:	2310      	movs	r3, #16
 80094ae:	e000      	b.n	80094b2 <HAL_DMA_Abort_IT+0x1ae>
 80094b0:	2301      	movs	r3, #1
 80094b2:	4a17      	ldr	r2, [pc, #92]	; (8009510 <HAL_DMA_Abort_IT+0x20c>)
 80094b4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2201      	movs	r2, #1
 80094ba:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2200      	movs	r2, #0
 80094c2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	d003      	beq.n	80094d6 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094d2:	6878      	ldr	r0, [r7, #4]
 80094d4:	4798      	blx	r3
    } 
  }
  return status;
 80094d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3710      	adds	r7, #16
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}
 80094e0:	40020080 	.word	0x40020080
 80094e4:	40020008 	.word	0x40020008
 80094e8:	4002001c 	.word	0x4002001c
 80094ec:	40020030 	.word	0x40020030
 80094f0:	40020044 	.word	0x40020044
 80094f4:	40020058 	.word	0x40020058
 80094f8:	4002006c 	.word	0x4002006c
 80094fc:	40020408 	.word	0x40020408
 8009500:	4002041c 	.word	0x4002041c
 8009504:	40020430 	.word	0x40020430
 8009508:	40020444 	.word	0x40020444
 800950c:	40020400 	.word	0x40020400
 8009510:	40020000 	.word	0x40020000

08009514 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009514:	b480      	push	{r7}
 8009516:	b08b      	sub	sp, #44	; 0x2c
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800951e:	2300      	movs	r3, #0
 8009520:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8009522:	2300      	movs	r3, #0
 8009524:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009526:	e179      	b.n	800981c <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8009528:	2201      	movs	r2, #1
 800952a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800952c:	fa02 f303 	lsl.w	r3, r2, r3
 8009530:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009532:	683b      	ldr	r3, [r7, #0]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	69fa      	ldr	r2, [r7, #28]
 8009538:	4013      	ands	r3, r2
 800953a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800953c:	69ba      	ldr	r2, [r7, #24]
 800953e:	69fb      	ldr	r3, [r7, #28]
 8009540:	429a      	cmp	r2, r3
 8009542:	f040 8168 	bne.w	8009816 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8009546:	683b      	ldr	r3, [r7, #0]
 8009548:	685b      	ldr	r3, [r3, #4]
 800954a:	4a96      	ldr	r2, [pc, #600]	; (80097a4 <HAL_GPIO_Init+0x290>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d05e      	beq.n	800960e <HAL_GPIO_Init+0xfa>
 8009550:	4a94      	ldr	r2, [pc, #592]	; (80097a4 <HAL_GPIO_Init+0x290>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d875      	bhi.n	8009642 <HAL_GPIO_Init+0x12e>
 8009556:	4a94      	ldr	r2, [pc, #592]	; (80097a8 <HAL_GPIO_Init+0x294>)
 8009558:	4293      	cmp	r3, r2
 800955a:	d058      	beq.n	800960e <HAL_GPIO_Init+0xfa>
 800955c:	4a92      	ldr	r2, [pc, #584]	; (80097a8 <HAL_GPIO_Init+0x294>)
 800955e:	4293      	cmp	r3, r2
 8009560:	d86f      	bhi.n	8009642 <HAL_GPIO_Init+0x12e>
 8009562:	4a92      	ldr	r2, [pc, #584]	; (80097ac <HAL_GPIO_Init+0x298>)
 8009564:	4293      	cmp	r3, r2
 8009566:	d052      	beq.n	800960e <HAL_GPIO_Init+0xfa>
 8009568:	4a90      	ldr	r2, [pc, #576]	; (80097ac <HAL_GPIO_Init+0x298>)
 800956a:	4293      	cmp	r3, r2
 800956c:	d869      	bhi.n	8009642 <HAL_GPIO_Init+0x12e>
 800956e:	4a90      	ldr	r2, [pc, #576]	; (80097b0 <HAL_GPIO_Init+0x29c>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d04c      	beq.n	800960e <HAL_GPIO_Init+0xfa>
 8009574:	4a8e      	ldr	r2, [pc, #568]	; (80097b0 <HAL_GPIO_Init+0x29c>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d863      	bhi.n	8009642 <HAL_GPIO_Init+0x12e>
 800957a:	4a8e      	ldr	r2, [pc, #568]	; (80097b4 <HAL_GPIO_Init+0x2a0>)
 800957c:	4293      	cmp	r3, r2
 800957e:	d046      	beq.n	800960e <HAL_GPIO_Init+0xfa>
 8009580:	4a8c      	ldr	r2, [pc, #560]	; (80097b4 <HAL_GPIO_Init+0x2a0>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d85d      	bhi.n	8009642 <HAL_GPIO_Init+0x12e>
 8009586:	2b12      	cmp	r3, #18
 8009588:	d82a      	bhi.n	80095e0 <HAL_GPIO_Init+0xcc>
 800958a:	2b12      	cmp	r3, #18
 800958c:	d859      	bhi.n	8009642 <HAL_GPIO_Init+0x12e>
 800958e:	a201      	add	r2, pc, #4	; (adr r2, 8009594 <HAL_GPIO_Init+0x80>)
 8009590:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009594:	0800960f 	.word	0x0800960f
 8009598:	080095e9 	.word	0x080095e9
 800959c:	080095fb 	.word	0x080095fb
 80095a0:	0800963d 	.word	0x0800963d
 80095a4:	08009643 	.word	0x08009643
 80095a8:	08009643 	.word	0x08009643
 80095ac:	08009643 	.word	0x08009643
 80095b0:	08009643 	.word	0x08009643
 80095b4:	08009643 	.word	0x08009643
 80095b8:	08009643 	.word	0x08009643
 80095bc:	08009643 	.word	0x08009643
 80095c0:	08009643 	.word	0x08009643
 80095c4:	08009643 	.word	0x08009643
 80095c8:	08009643 	.word	0x08009643
 80095cc:	08009643 	.word	0x08009643
 80095d0:	08009643 	.word	0x08009643
 80095d4:	08009643 	.word	0x08009643
 80095d8:	080095f1 	.word	0x080095f1
 80095dc:	08009605 	.word	0x08009605
 80095e0:	4a75      	ldr	r2, [pc, #468]	; (80097b8 <HAL_GPIO_Init+0x2a4>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d013      	beq.n	800960e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80095e6:	e02c      	b.n	8009642 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	68db      	ldr	r3, [r3, #12]
 80095ec:	623b      	str	r3, [r7, #32]
          break;
 80095ee:	e029      	b.n	8009644 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	68db      	ldr	r3, [r3, #12]
 80095f4:	3304      	adds	r3, #4
 80095f6:	623b      	str	r3, [r7, #32]
          break;
 80095f8:	e024      	b.n	8009644 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	68db      	ldr	r3, [r3, #12]
 80095fe:	3308      	adds	r3, #8
 8009600:	623b      	str	r3, [r7, #32]
          break;
 8009602:	e01f      	b.n	8009644 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8009604:	683b      	ldr	r3, [r7, #0]
 8009606:	68db      	ldr	r3, [r3, #12]
 8009608:	330c      	adds	r3, #12
 800960a:	623b      	str	r3, [r7, #32]
          break;
 800960c:	e01a      	b.n	8009644 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	689b      	ldr	r3, [r3, #8]
 8009612:	2b00      	cmp	r3, #0
 8009614:	d102      	bne.n	800961c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8009616:	2304      	movs	r3, #4
 8009618:	623b      	str	r3, [r7, #32]
          break;
 800961a:	e013      	b.n	8009644 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800961c:	683b      	ldr	r3, [r7, #0]
 800961e:	689b      	ldr	r3, [r3, #8]
 8009620:	2b01      	cmp	r3, #1
 8009622:	d105      	bne.n	8009630 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009624:	2308      	movs	r3, #8
 8009626:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	69fa      	ldr	r2, [r7, #28]
 800962c:	611a      	str	r2, [r3, #16]
          break;
 800962e:	e009      	b.n	8009644 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009630:	2308      	movs	r3, #8
 8009632:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	69fa      	ldr	r2, [r7, #28]
 8009638:	615a      	str	r2, [r3, #20]
          break;
 800963a:	e003      	b.n	8009644 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800963c:	2300      	movs	r3, #0
 800963e:	623b      	str	r3, [r7, #32]
          break;
 8009640:	e000      	b.n	8009644 <HAL_GPIO_Init+0x130>
          break;
 8009642:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009644:	69bb      	ldr	r3, [r7, #24]
 8009646:	2bff      	cmp	r3, #255	; 0xff
 8009648:	d801      	bhi.n	800964e <HAL_GPIO_Init+0x13a>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	e001      	b.n	8009652 <HAL_GPIO_Init+0x13e>
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	3304      	adds	r3, #4
 8009652:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009654:	69bb      	ldr	r3, [r7, #24]
 8009656:	2bff      	cmp	r3, #255	; 0xff
 8009658:	d802      	bhi.n	8009660 <HAL_GPIO_Init+0x14c>
 800965a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800965c:	009b      	lsls	r3, r3, #2
 800965e:	e002      	b.n	8009666 <HAL_GPIO_Init+0x152>
 8009660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009662:	3b08      	subs	r3, #8
 8009664:	009b      	lsls	r3, r3, #2
 8009666:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	681a      	ldr	r2, [r3, #0]
 800966c:	210f      	movs	r1, #15
 800966e:	693b      	ldr	r3, [r7, #16]
 8009670:	fa01 f303 	lsl.w	r3, r1, r3
 8009674:	43db      	mvns	r3, r3
 8009676:	401a      	ands	r2, r3
 8009678:	6a39      	ldr	r1, [r7, #32]
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	fa01 f303 	lsl.w	r3, r1, r3
 8009680:	431a      	orrs	r2, r3
 8009682:	697b      	ldr	r3, [r7, #20]
 8009684:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	685b      	ldr	r3, [r3, #4]
 800968a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800968e:	2b00      	cmp	r3, #0
 8009690:	f000 80c1 	beq.w	8009816 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8009694:	4b49      	ldr	r3, [pc, #292]	; (80097bc <HAL_GPIO_Init+0x2a8>)
 8009696:	699b      	ldr	r3, [r3, #24]
 8009698:	4a48      	ldr	r2, [pc, #288]	; (80097bc <HAL_GPIO_Init+0x2a8>)
 800969a:	f043 0301 	orr.w	r3, r3, #1
 800969e:	6193      	str	r3, [r2, #24]
 80096a0:	4b46      	ldr	r3, [pc, #280]	; (80097bc <HAL_GPIO_Init+0x2a8>)
 80096a2:	699b      	ldr	r3, [r3, #24]
 80096a4:	f003 0301 	and.w	r3, r3, #1
 80096a8:	60bb      	str	r3, [r7, #8]
 80096aa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80096ac:	4a44      	ldr	r2, [pc, #272]	; (80097c0 <HAL_GPIO_Init+0x2ac>)
 80096ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096b0:	089b      	lsrs	r3, r3, #2
 80096b2:	3302      	adds	r3, #2
 80096b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80096b8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80096ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096bc:	f003 0303 	and.w	r3, r3, #3
 80096c0:	009b      	lsls	r3, r3, #2
 80096c2:	220f      	movs	r2, #15
 80096c4:	fa02 f303 	lsl.w	r3, r2, r3
 80096c8:	43db      	mvns	r3, r3
 80096ca:	68fa      	ldr	r2, [r7, #12]
 80096cc:	4013      	ands	r3, r2
 80096ce:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	4a3c      	ldr	r2, [pc, #240]	; (80097c4 <HAL_GPIO_Init+0x2b0>)
 80096d4:	4293      	cmp	r3, r2
 80096d6:	d01f      	beq.n	8009718 <HAL_GPIO_Init+0x204>
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	4a3b      	ldr	r2, [pc, #236]	; (80097c8 <HAL_GPIO_Init+0x2b4>)
 80096dc:	4293      	cmp	r3, r2
 80096de:	d019      	beq.n	8009714 <HAL_GPIO_Init+0x200>
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	4a3a      	ldr	r2, [pc, #232]	; (80097cc <HAL_GPIO_Init+0x2b8>)
 80096e4:	4293      	cmp	r3, r2
 80096e6:	d013      	beq.n	8009710 <HAL_GPIO_Init+0x1fc>
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	4a39      	ldr	r2, [pc, #228]	; (80097d0 <HAL_GPIO_Init+0x2bc>)
 80096ec:	4293      	cmp	r3, r2
 80096ee:	d00d      	beq.n	800970c <HAL_GPIO_Init+0x1f8>
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	4a38      	ldr	r2, [pc, #224]	; (80097d4 <HAL_GPIO_Init+0x2c0>)
 80096f4:	4293      	cmp	r3, r2
 80096f6:	d007      	beq.n	8009708 <HAL_GPIO_Init+0x1f4>
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	4a37      	ldr	r2, [pc, #220]	; (80097d8 <HAL_GPIO_Init+0x2c4>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d101      	bne.n	8009704 <HAL_GPIO_Init+0x1f0>
 8009700:	2305      	movs	r3, #5
 8009702:	e00a      	b.n	800971a <HAL_GPIO_Init+0x206>
 8009704:	2306      	movs	r3, #6
 8009706:	e008      	b.n	800971a <HAL_GPIO_Init+0x206>
 8009708:	2304      	movs	r3, #4
 800970a:	e006      	b.n	800971a <HAL_GPIO_Init+0x206>
 800970c:	2303      	movs	r3, #3
 800970e:	e004      	b.n	800971a <HAL_GPIO_Init+0x206>
 8009710:	2302      	movs	r3, #2
 8009712:	e002      	b.n	800971a <HAL_GPIO_Init+0x206>
 8009714:	2301      	movs	r3, #1
 8009716:	e000      	b.n	800971a <HAL_GPIO_Init+0x206>
 8009718:	2300      	movs	r3, #0
 800971a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800971c:	f002 0203 	and.w	r2, r2, #3
 8009720:	0092      	lsls	r2, r2, #2
 8009722:	4093      	lsls	r3, r2
 8009724:	68fa      	ldr	r2, [r7, #12]
 8009726:	4313      	orrs	r3, r2
 8009728:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800972a:	4925      	ldr	r1, [pc, #148]	; (80097c0 <HAL_GPIO_Init+0x2ac>)
 800972c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800972e:	089b      	lsrs	r3, r3, #2
 8009730:	3302      	adds	r3, #2
 8009732:	68fa      	ldr	r2, [r7, #12]
 8009734:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	685b      	ldr	r3, [r3, #4]
 800973c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009740:	2b00      	cmp	r3, #0
 8009742:	d006      	beq.n	8009752 <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8009744:	4b25      	ldr	r3, [pc, #148]	; (80097dc <HAL_GPIO_Init+0x2c8>)
 8009746:	689a      	ldr	r2, [r3, #8]
 8009748:	4924      	ldr	r1, [pc, #144]	; (80097dc <HAL_GPIO_Init+0x2c8>)
 800974a:	69bb      	ldr	r3, [r7, #24]
 800974c:	4313      	orrs	r3, r2
 800974e:	608b      	str	r3, [r1, #8]
 8009750:	e006      	b.n	8009760 <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8009752:	4b22      	ldr	r3, [pc, #136]	; (80097dc <HAL_GPIO_Init+0x2c8>)
 8009754:	689a      	ldr	r2, [r3, #8]
 8009756:	69bb      	ldr	r3, [r7, #24]
 8009758:	43db      	mvns	r3, r3
 800975a:	4920      	ldr	r1, [pc, #128]	; (80097dc <HAL_GPIO_Init+0x2c8>)
 800975c:	4013      	ands	r3, r2
 800975e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009760:	683b      	ldr	r3, [r7, #0]
 8009762:	685b      	ldr	r3, [r3, #4]
 8009764:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009768:	2b00      	cmp	r3, #0
 800976a:	d006      	beq.n	800977a <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800976c:	4b1b      	ldr	r3, [pc, #108]	; (80097dc <HAL_GPIO_Init+0x2c8>)
 800976e:	68da      	ldr	r2, [r3, #12]
 8009770:	491a      	ldr	r1, [pc, #104]	; (80097dc <HAL_GPIO_Init+0x2c8>)
 8009772:	69bb      	ldr	r3, [r7, #24]
 8009774:	4313      	orrs	r3, r2
 8009776:	60cb      	str	r3, [r1, #12]
 8009778:	e006      	b.n	8009788 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800977a:	4b18      	ldr	r3, [pc, #96]	; (80097dc <HAL_GPIO_Init+0x2c8>)
 800977c:	68da      	ldr	r2, [r3, #12]
 800977e:	69bb      	ldr	r3, [r7, #24]
 8009780:	43db      	mvns	r3, r3
 8009782:	4916      	ldr	r1, [pc, #88]	; (80097dc <HAL_GPIO_Init+0x2c8>)
 8009784:	4013      	ands	r3, r2
 8009786:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009788:	683b      	ldr	r3, [r7, #0]
 800978a:	685b      	ldr	r3, [r3, #4]
 800978c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009790:	2b00      	cmp	r3, #0
 8009792:	d025      	beq.n	80097e0 <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8009794:	4b11      	ldr	r3, [pc, #68]	; (80097dc <HAL_GPIO_Init+0x2c8>)
 8009796:	685a      	ldr	r2, [r3, #4]
 8009798:	4910      	ldr	r1, [pc, #64]	; (80097dc <HAL_GPIO_Init+0x2c8>)
 800979a:	69bb      	ldr	r3, [r7, #24]
 800979c:	4313      	orrs	r3, r2
 800979e:	604b      	str	r3, [r1, #4]
 80097a0:	e025      	b.n	80097ee <HAL_GPIO_Init+0x2da>
 80097a2:	bf00      	nop
 80097a4:	10320000 	.word	0x10320000
 80097a8:	10310000 	.word	0x10310000
 80097ac:	10220000 	.word	0x10220000
 80097b0:	10210000 	.word	0x10210000
 80097b4:	10120000 	.word	0x10120000
 80097b8:	10110000 	.word	0x10110000
 80097bc:	40021000 	.word	0x40021000
 80097c0:	40010000 	.word	0x40010000
 80097c4:	40010800 	.word	0x40010800
 80097c8:	40010c00 	.word	0x40010c00
 80097cc:	40011000 	.word	0x40011000
 80097d0:	40011400 	.word	0x40011400
 80097d4:	40011800 	.word	0x40011800
 80097d8:	40011c00 	.word	0x40011c00
 80097dc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80097e0:	4b15      	ldr	r3, [pc, #84]	; (8009838 <HAL_GPIO_Init+0x324>)
 80097e2:	685a      	ldr	r2, [r3, #4]
 80097e4:	69bb      	ldr	r3, [r7, #24]
 80097e6:	43db      	mvns	r3, r3
 80097e8:	4913      	ldr	r1, [pc, #76]	; (8009838 <HAL_GPIO_Init+0x324>)
 80097ea:	4013      	ands	r3, r2
 80097ec:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	685b      	ldr	r3, [r3, #4]
 80097f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d006      	beq.n	8009808 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80097fa:	4b0f      	ldr	r3, [pc, #60]	; (8009838 <HAL_GPIO_Init+0x324>)
 80097fc:	681a      	ldr	r2, [r3, #0]
 80097fe:	490e      	ldr	r1, [pc, #56]	; (8009838 <HAL_GPIO_Init+0x324>)
 8009800:	69bb      	ldr	r3, [r7, #24]
 8009802:	4313      	orrs	r3, r2
 8009804:	600b      	str	r3, [r1, #0]
 8009806:	e006      	b.n	8009816 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009808:	4b0b      	ldr	r3, [pc, #44]	; (8009838 <HAL_GPIO_Init+0x324>)
 800980a:	681a      	ldr	r2, [r3, #0]
 800980c:	69bb      	ldr	r3, [r7, #24]
 800980e:	43db      	mvns	r3, r3
 8009810:	4909      	ldr	r1, [pc, #36]	; (8009838 <HAL_GPIO_Init+0x324>)
 8009812:	4013      	ands	r3, r2
 8009814:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8009816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009818:	3301      	adds	r3, #1
 800981a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800981c:	683b      	ldr	r3, [r7, #0]
 800981e:	681a      	ldr	r2, [r3, #0]
 8009820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009822:	fa22 f303 	lsr.w	r3, r2, r3
 8009826:	2b00      	cmp	r3, #0
 8009828:	f47f ae7e 	bne.w	8009528 <HAL_GPIO_Init+0x14>
  }
}
 800982c:	bf00      	nop
 800982e:	bf00      	nop
 8009830:	372c      	adds	r7, #44	; 0x2c
 8009832:	46bd      	mov	sp, r7
 8009834:	bc80      	pop	{r7}
 8009836:	4770      	bx	lr
 8009838:	40010400 	.word	0x40010400

0800983c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800983c:	b480      	push	{r7}
 800983e:	b089      	sub	sp, #36	; 0x24
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
 8009844:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009846:	2300      	movs	r3, #0
 8009848:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 800984a:	e0a6      	b.n	800999a <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 800984c:	2201      	movs	r2, #1
 800984e:	69fb      	ldr	r3, [r7, #28]
 8009850:	fa02 f303 	lsl.w	r3, r2, r3
 8009854:	683a      	ldr	r2, [r7, #0]
 8009856:	4013      	ands	r3, r2
 8009858:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 800985a:	69bb      	ldr	r3, [r7, #24]
 800985c:	2b00      	cmp	r3, #0
 800985e:	f000 8099 	beq.w	8009994 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8009862:	4a54      	ldr	r2, [pc, #336]	; (80099b4 <HAL_GPIO_DeInit+0x178>)
 8009864:	69fb      	ldr	r3, [r7, #28]
 8009866:	089b      	lsrs	r3, r3, #2
 8009868:	3302      	adds	r3, #2
 800986a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800986e:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8009870:	69fb      	ldr	r3, [r7, #28]
 8009872:	f003 0303 	and.w	r3, r3, #3
 8009876:	009b      	lsls	r3, r3, #2
 8009878:	220f      	movs	r2, #15
 800987a:	fa02 f303 	lsl.w	r3, r2, r3
 800987e:	697a      	ldr	r2, [r7, #20]
 8009880:	4013      	ands	r3, r2
 8009882:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	4a4c      	ldr	r2, [pc, #304]	; (80099b8 <HAL_GPIO_DeInit+0x17c>)
 8009888:	4293      	cmp	r3, r2
 800988a:	d01f      	beq.n	80098cc <HAL_GPIO_DeInit+0x90>
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	4a4b      	ldr	r2, [pc, #300]	; (80099bc <HAL_GPIO_DeInit+0x180>)
 8009890:	4293      	cmp	r3, r2
 8009892:	d019      	beq.n	80098c8 <HAL_GPIO_DeInit+0x8c>
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	4a4a      	ldr	r2, [pc, #296]	; (80099c0 <HAL_GPIO_DeInit+0x184>)
 8009898:	4293      	cmp	r3, r2
 800989a:	d013      	beq.n	80098c4 <HAL_GPIO_DeInit+0x88>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	4a49      	ldr	r2, [pc, #292]	; (80099c4 <HAL_GPIO_DeInit+0x188>)
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d00d      	beq.n	80098c0 <HAL_GPIO_DeInit+0x84>
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	4a48      	ldr	r2, [pc, #288]	; (80099c8 <HAL_GPIO_DeInit+0x18c>)
 80098a8:	4293      	cmp	r3, r2
 80098aa:	d007      	beq.n	80098bc <HAL_GPIO_DeInit+0x80>
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	4a47      	ldr	r2, [pc, #284]	; (80099cc <HAL_GPIO_DeInit+0x190>)
 80098b0:	4293      	cmp	r3, r2
 80098b2:	d101      	bne.n	80098b8 <HAL_GPIO_DeInit+0x7c>
 80098b4:	2305      	movs	r3, #5
 80098b6:	e00a      	b.n	80098ce <HAL_GPIO_DeInit+0x92>
 80098b8:	2306      	movs	r3, #6
 80098ba:	e008      	b.n	80098ce <HAL_GPIO_DeInit+0x92>
 80098bc:	2304      	movs	r3, #4
 80098be:	e006      	b.n	80098ce <HAL_GPIO_DeInit+0x92>
 80098c0:	2303      	movs	r3, #3
 80098c2:	e004      	b.n	80098ce <HAL_GPIO_DeInit+0x92>
 80098c4:	2302      	movs	r3, #2
 80098c6:	e002      	b.n	80098ce <HAL_GPIO_DeInit+0x92>
 80098c8:	2301      	movs	r3, #1
 80098ca:	e000      	b.n	80098ce <HAL_GPIO_DeInit+0x92>
 80098cc:	2300      	movs	r3, #0
 80098ce:	69fa      	ldr	r2, [r7, #28]
 80098d0:	f002 0203 	and.w	r2, r2, #3
 80098d4:	0092      	lsls	r2, r2, #2
 80098d6:	4093      	lsls	r3, r2
 80098d8:	697a      	ldr	r2, [r7, #20]
 80098da:	429a      	cmp	r2, r3
 80098dc:	d132      	bne.n	8009944 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80098de:	4b3c      	ldr	r3, [pc, #240]	; (80099d0 <HAL_GPIO_DeInit+0x194>)
 80098e0:	681a      	ldr	r2, [r3, #0]
 80098e2:	69bb      	ldr	r3, [r7, #24]
 80098e4:	43db      	mvns	r3, r3
 80098e6:	493a      	ldr	r1, [pc, #232]	; (80099d0 <HAL_GPIO_DeInit+0x194>)
 80098e8:	4013      	ands	r3, r2
 80098ea:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80098ec:	4b38      	ldr	r3, [pc, #224]	; (80099d0 <HAL_GPIO_DeInit+0x194>)
 80098ee:	685a      	ldr	r2, [r3, #4]
 80098f0:	69bb      	ldr	r3, [r7, #24]
 80098f2:	43db      	mvns	r3, r3
 80098f4:	4936      	ldr	r1, [pc, #216]	; (80099d0 <HAL_GPIO_DeInit+0x194>)
 80098f6:	4013      	ands	r3, r2
 80098f8:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80098fa:	4b35      	ldr	r3, [pc, #212]	; (80099d0 <HAL_GPIO_DeInit+0x194>)
 80098fc:	68da      	ldr	r2, [r3, #12]
 80098fe:	69bb      	ldr	r3, [r7, #24]
 8009900:	43db      	mvns	r3, r3
 8009902:	4933      	ldr	r1, [pc, #204]	; (80099d0 <HAL_GPIO_DeInit+0x194>)
 8009904:	4013      	ands	r3, r2
 8009906:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8009908:	4b31      	ldr	r3, [pc, #196]	; (80099d0 <HAL_GPIO_DeInit+0x194>)
 800990a:	689a      	ldr	r2, [r3, #8]
 800990c:	69bb      	ldr	r3, [r7, #24]
 800990e:	43db      	mvns	r3, r3
 8009910:	492f      	ldr	r1, [pc, #188]	; (80099d0 <HAL_GPIO_DeInit+0x194>)
 8009912:	4013      	ands	r3, r2
 8009914:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8009916:	69fb      	ldr	r3, [r7, #28]
 8009918:	f003 0303 	and.w	r3, r3, #3
 800991c:	009b      	lsls	r3, r3, #2
 800991e:	220f      	movs	r2, #15
 8009920:	fa02 f303 	lsl.w	r3, r2, r3
 8009924:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8009926:	4a23      	ldr	r2, [pc, #140]	; (80099b4 <HAL_GPIO_DeInit+0x178>)
 8009928:	69fb      	ldr	r3, [r7, #28]
 800992a:	089b      	lsrs	r3, r3, #2
 800992c:	3302      	adds	r3, #2
 800992e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009932:	697b      	ldr	r3, [r7, #20]
 8009934:	43da      	mvns	r2, r3
 8009936:	481f      	ldr	r0, [pc, #124]	; (80099b4 <HAL_GPIO_DeInit+0x178>)
 8009938:	69fb      	ldr	r3, [r7, #28]
 800993a:	089b      	lsrs	r3, r3, #2
 800993c:	400a      	ands	r2, r1
 800993e:	3302      	adds	r3, #2
 8009940:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009944:	69bb      	ldr	r3, [r7, #24]
 8009946:	2bff      	cmp	r3, #255	; 0xff
 8009948:	d801      	bhi.n	800994e <HAL_GPIO_DeInit+0x112>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	e001      	b.n	8009952 <HAL_GPIO_DeInit+0x116>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	3304      	adds	r3, #4
 8009952:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009954:	69bb      	ldr	r3, [r7, #24]
 8009956:	2bff      	cmp	r3, #255	; 0xff
 8009958:	d802      	bhi.n	8009960 <HAL_GPIO_DeInit+0x124>
 800995a:	69fb      	ldr	r3, [r7, #28]
 800995c:	009b      	lsls	r3, r3, #2
 800995e:	e002      	b.n	8009966 <HAL_GPIO_DeInit+0x12a>
 8009960:	69fb      	ldr	r3, [r7, #28]
 8009962:	3b08      	subs	r3, #8
 8009964:	009b      	lsls	r3, r3, #2
 8009966:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8009968:	693b      	ldr	r3, [r7, #16]
 800996a:	681a      	ldr	r2, [r3, #0]
 800996c:	210f      	movs	r1, #15
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	fa01 f303 	lsl.w	r3, r1, r3
 8009974:	43db      	mvns	r3, r3
 8009976:	401a      	ands	r2, r3
 8009978:	2104      	movs	r1, #4
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	fa01 f303 	lsl.w	r3, r1, r3
 8009980:	431a      	orrs	r2, r3
 8009982:	693b      	ldr	r3, [r7, #16]
 8009984:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	68da      	ldr	r2, [r3, #12]
 800998a:	69bb      	ldr	r3, [r7, #24]
 800998c:	43db      	mvns	r3, r3
 800998e:	401a      	ands	r2, r3
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	60da      	str	r2, [r3, #12]
    }

    position++;
 8009994:	69fb      	ldr	r3, [r7, #28]
 8009996:	3301      	adds	r3, #1
 8009998:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 800999a:	683a      	ldr	r2, [r7, #0]
 800999c:	69fb      	ldr	r3, [r7, #28]
 800999e:	fa22 f303 	lsr.w	r3, r2, r3
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	f47f af52 	bne.w	800984c <HAL_GPIO_DeInit+0x10>
  }
}
 80099a8:	bf00      	nop
 80099aa:	bf00      	nop
 80099ac:	3724      	adds	r7, #36	; 0x24
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bc80      	pop	{r7}
 80099b2:	4770      	bx	lr
 80099b4:	40010000 	.word	0x40010000
 80099b8:	40010800 	.word	0x40010800
 80099bc:	40010c00 	.word	0x40010c00
 80099c0:	40011000 	.word	0x40011000
 80099c4:	40011400 	.word	0x40011400
 80099c8:	40011800 	.word	0x40011800
 80099cc:	40011c00 	.word	0x40011c00
 80099d0:	40010400 	.word	0x40010400

080099d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80099d4:	b480      	push	{r7}
 80099d6:	b085      	sub	sp, #20
 80099d8:	af00      	add	r7, sp, #0
 80099da:	6078      	str	r0, [r7, #4]
 80099dc:	460b      	mov	r3, r1
 80099de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	689a      	ldr	r2, [r3, #8]
 80099e4:	887b      	ldrh	r3, [r7, #2]
 80099e6:	4013      	ands	r3, r2
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d002      	beq.n	80099f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80099ec:	2301      	movs	r3, #1
 80099ee:	73fb      	strb	r3, [r7, #15]
 80099f0:	e001      	b.n	80099f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80099f2:	2300      	movs	r3, #0
 80099f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80099f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3714      	adds	r7, #20
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bc80      	pop	{r7}
 8009a00:	4770      	bx	lr

08009a02 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009a02:	b480      	push	{r7}
 8009a04:	b083      	sub	sp, #12
 8009a06:	af00      	add	r7, sp, #0
 8009a08:	6078      	str	r0, [r7, #4]
 8009a0a:	460b      	mov	r3, r1
 8009a0c:	807b      	strh	r3, [r7, #2]
 8009a0e:	4613      	mov	r3, r2
 8009a10:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009a12:	787b      	ldrb	r3, [r7, #1]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d003      	beq.n	8009a20 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009a18:	887a      	ldrh	r2, [r7, #2]
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8009a1e:	e003      	b.n	8009a28 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009a20:	887b      	ldrh	r3, [r7, #2]
 8009a22:	041a      	lsls	r2, r3, #16
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	611a      	str	r2, [r3, #16]
}
 8009a28:	bf00      	nop
 8009a2a:	370c      	adds	r7, #12
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bc80      	pop	{r7}
 8009a30:	4770      	bx	lr

08009a32 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009a32:	b480      	push	{r7}
 8009a34:	b085      	sub	sp, #20
 8009a36:	af00      	add	r7, sp, #0
 8009a38:	6078      	str	r0, [r7, #4]
 8009a3a:	460b      	mov	r3, r1
 8009a3c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	68db      	ldr	r3, [r3, #12]
 8009a42:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009a44:	887a      	ldrh	r2, [r7, #2]
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	4013      	ands	r3, r2
 8009a4a:	041a      	lsls	r2, r3, #16
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	43d9      	mvns	r1, r3
 8009a50:	887b      	ldrh	r3, [r7, #2]
 8009a52:	400b      	ands	r3, r1
 8009a54:	431a      	orrs	r2, r3
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	611a      	str	r2, [r3, #16]
}
 8009a5a:	bf00      	nop
 8009a5c:	3714      	adds	r7, #20
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bc80      	pop	{r7}
 8009a62:	4770      	bx	lr

08009a64 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b084      	sub	sp, #16
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2b00      	cmp	r3, #0
 8009a70:	d101      	bne.n	8009a76 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009a72:	2301      	movs	r3, #1
 8009a74:	e12b      	b.n	8009cce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a7c:	b2db      	uxtb	r3, r3
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d106      	bne.n	8009a90 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2200      	movs	r2, #0
 8009a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009a8a:	6878      	ldr	r0, [r7, #4]
 8009a8c:	f7fe fff8 	bl	8008a80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2224      	movs	r2, #36	; 0x24
 8009a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	681a      	ldr	r2, [r3, #0]
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f022 0201 	bic.w	r2, r2, #1
 8009aa6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	681a      	ldr	r2, [r3, #0]
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009ab6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	681a      	ldr	r2, [r3, #0]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009ac6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009ac8:	f001 fdb8 	bl	800b63c <HAL_RCC_GetPCLK1Freq>
 8009acc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	685b      	ldr	r3, [r3, #4]
 8009ad2:	4a81      	ldr	r2, [pc, #516]	; (8009cd8 <HAL_I2C_Init+0x274>)
 8009ad4:	4293      	cmp	r3, r2
 8009ad6:	d807      	bhi.n	8009ae8 <HAL_I2C_Init+0x84>
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	4a80      	ldr	r2, [pc, #512]	; (8009cdc <HAL_I2C_Init+0x278>)
 8009adc:	4293      	cmp	r3, r2
 8009ade:	bf94      	ite	ls
 8009ae0:	2301      	movls	r3, #1
 8009ae2:	2300      	movhi	r3, #0
 8009ae4:	b2db      	uxtb	r3, r3
 8009ae6:	e006      	b.n	8009af6 <HAL_I2C_Init+0x92>
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	4a7d      	ldr	r2, [pc, #500]	; (8009ce0 <HAL_I2C_Init+0x27c>)
 8009aec:	4293      	cmp	r3, r2
 8009aee:	bf94      	ite	ls
 8009af0:	2301      	movls	r3, #1
 8009af2:	2300      	movhi	r3, #0
 8009af4:	b2db      	uxtb	r3, r3
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d001      	beq.n	8009afe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009afa:	2301      	movs	r3, #1
 8009afc:	e0e7      	b.n	8009cce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	4a78      	ldr	r2, [pc, #480]	; (8009ce4 <HAL_I2C_Init+0x280>)
 8009b02:	fba2 2303 	umull	r2, r3, r2, r3
 8009b06:	0c9b      	lsrs	r3, r3, #18
 8009b08:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	685b      	ldr	r3, [r3, #4]
 8009b10:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	68ba      	ldr	r2, [r7, #8]
 8009b1a:	430a      	orrs	r2, r1
 8009b1c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	6a1b      	ldr	r3, [r3, #32]
 8009b24:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	685b      	ldr	r3, [r3, #4]
 8009b2c:	4a6a      	ldr	r2, [pc, #424]	; (8009cd8 <HAL_I2C_Init+0x274>)
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d802      	bhi.n	8009b38 <HAL_I2C_Init+0xd4>
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	3301      	adds	r3, #1
 8009b36:	e009      	b.n	8009b4c <HAL_I2C_Init+0xe8>
 8009b38:	68bb      	ldr	r3, [r7, #8]
 8009b3a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009b3e:	fb02 f303 	mul.w	r3, r2, r3
 8009b42:	4a69      	ldr	r2, [pc, #420]	; (8009ce8 <HAL_I2C_Init+0x284>)
 8009b44:	fba2 2303 	umull	r2, r3, r2, r3
 8009b48:	099b      	lsrs	r3, r3, #6
 8009b4a:	3301      	adds	r3, #1
 8009b4c:	687a      	ldr	r2, [r7, #4]
 8009b4e:	6812      	ldr	r2, [r2, #0]
 8009b50:	430b      	orrs	r3, r1
 8009b52:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	69db      	ldr	r3, [r3, #28]
 8009b5a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009b5e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	685b      	ldr	r3, [r3, #4]
 8009b66:	495c      	ldr	r1, [pc, #368]	; (8009cd8 <HAL_I2C_Init+0x274>)
 8009b68:	428b      	cmp	r3, r1
 8009b6a:	d819      	bhi.n	8009ba0 <HAL_I2C_Init+0x13c>
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	1e59      	subs	r1, r3, #1
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	685b      	ldr	r3, [r3, #4]
 8009b74:	005b      	lsls	r3, r3, #1
 8009b76:	fbb1 f3f3 	udiv	r3, r1, r3
 8009b7a:	1c59      	adds	r1, r3, #1
 8009b7c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009b80:	400b      	ands	r3, r1
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d00a      	beq.n	8009b9c <HAL_I2C_Init+0x138>
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	1e59      	subs	r1, r3, #1
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	685b      	ldr	r3, [r3, #4]
 8009b8e:	005b      	lsls	r3, r3, #1
 8009b90:	fbb1 f3f3 	udiv	r3, r1, r3
 8009b94:	3301      	adds	r3, #1
 8009b96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009b9a:	e051      	b.n	8009c40 <HAL_I2C_Init+0x1dc>
 8009b9c:	2304      	movs	r3, #4
 8009b9e:	e04f      	b.n	8009c40 <HAL_I2C_Init+0x1dc>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	689b      	ldr	r3, [r3, #8]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d111      	bne.n	8009bcc <HAL_I2C_Init+0x168>
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	1e58      	subs	r0, r3, #1
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	6859      	ldr	r1, [r3, #4]
 8009bb0:	460b      	mov	r3, r1
 8009bb2:	005b      	lsls	r3, r3, #1
 8009bb4:	440b      	add	r3, r1
 8009bb6:	fbb0 f3f3 	udiv	r3, r0, r3
 8009bba:	3301      	adds	r3, #1
 8009bbc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	bf0c      	ite	eq
 8009bc4:	2301      	moveq	r3, #1
 8009bc6:	2300      	movne	r3, #0
 8009bc8:	b2db      	uxtb	r3, r3
 8009bca:	e012      	b.n	8009bf2 <HAL_I2C_Init+0x18e>
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	1e58      	subs	r0, r3, #1
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	6859      	ldr	r1, [r3, #4]
 8009bd4:	460b      	mov	r3, r1
 8009bd6:	009b      	lsls	r3, r3, #2
 8009bd8:	440b      	add	r3, r1
 8009bda:	0099      	lsls	r1, r3, #2
 8009bdc:	440b      	add	r3, r1
 8009bde:	fbb0 f3f3 	udiv	r3, r0, r3
 8009be2:	3301      	adds	r3, #1
 8009be4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	bf0c      	ite	eq
 8009bec:	2301      	moveq	r3, #1
 8009bee:	2300      	movne	r3, #0
 8009bf0:	b2db      	uxtb	r3, r3
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d001      	beq.n	8009bfa <HAL_I2C_Init+0x196>
 8009bf6:	2301      	movs	r3, #1
 8009bf8:	e022      	b.n	8009c40 <HAL_I2C_Init+0x1dc>
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	689b      	ldr	r3, [r3, #8]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	d10e      	bne.n	8009c20 <HAL_I2C_Init+0x1bc>
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	1e58      	subs	r0, r3, #1
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	6859      	ldr	r1, [r3, #4]
 8009c0a:	460b      	mov	r3, r1
 8009c0c:	005b      	lsls	r3, r3, #1
 8009c0e:	440b      	add	r3, r1
 8009c10:	fbb0 f3f3 	udiv	r3, r0, r3
 8009c14:	3301      	adds	r3, #1
 8009c16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009c1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c1e:	e00f      	b.n	8009c40 <HAL_I2C_Init+0x1dc>
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	1e58      	subs	r0, r3, #1
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6859      	ldr	r1, [r3, #4]
 8009c28:	460b      	mov	r3, r1
 8009c2a:	009b      	lsls	r3, r3, #2
 8009c2c:	440b      	add	r3, r1
 8009c2e:	0099      	lsls	r1, r3, #2
 8009c30:	440b      	add	r3, r1
 8009c32:	fbb0 f3f3 	udiv	r3, r0, r3
 8009c36:	3301      	adds	r3, #1
 8009c38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009c3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009c40:	6879      	ldr	r1, [r7, #4]
 8009c42:	6809      	ldr	r1, [r1, #0]
 8009c44:	4313      	orrs	r3, r2
 8009c46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	69da      	ldr	r2, [r3, #28]
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	6a1b      	ldr	r3, [r3, #32]
 8009c5a:	431a      	orrs	r2, r3
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	430a      	orrs	r2, r1
 8009c62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	689b      	ldr	r3, [r3, #8]
 8009c6a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009c6e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009c72:	687a      	ldr	r2, [r7, #4]
 8009c74:	6911      	ldr	r1, [r2, #16]
 8009c76:	687a      	ldr	r2, [r7, #4]
 8009c78:	68d2      	ldr	r2, [r2, #12]
 8009c7a:	4311      	orrs	r1, r2
 8009c7c:	687a      	ldr	r2, [r7, #4]
 8009c7e:	6812      	ldr	r2, [r2, #0]
 8009c80:	430b      	orrs	r3, r1
 8009c82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	68db      	ldr	r3, [r3, #12]
 8009c8a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	695a      	ldr	r2, [r3, #20]
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	699b      	ldr	r3, [r3, #24]
 8009c96:	431a      	orrs	r2, r3
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	430a      	orrs	r2, r1
 8009c9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	681b      	ldr	r3, [r3, #0]
 8009ca4:	681a      	ldr	r2, [r3, #0]
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	f042 0201 	orr.w	r2, r2, #1
 8009cae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2200      	movs	r2, #0
 8009cb4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2220      	movs	r2, #32
 8009cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2200      	movs	r2, #0
 8009cc2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009ccc:	2300      	movs	r3, #0
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3710      	adds	r7, #16
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}
 8009cd6:	bf00      	nop
 8009cd8:	000186a0 	.word	0x000186a0
 8009cdc:	001e847f 	.word	0x001e847f
 8009ce0:	003d08ff 	.word	0x003d08ff
 8009ce4:	431bde83 	.word	0x431bde83
 8009ce8:	10624dd3 	.word	0x10624dd3

08009cec <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b082      	sub	sp, #8
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d101      	bne.n	8009cfe <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009cfa:	2301      	movs	r3, #1
 8009cfc:	e021      	b.n	8009d42 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	2224      	movs	r2, #36	; 0x24
 8009d02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	681a      	ldr	r2, [r3, #0]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	f022 0201 	bic.w	r2, r2, #1
 8009d14:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009d16:	6878      	ldr	r0, [r7, #4]
 8009d18:	f7fe fef0 	bl	8008afc <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2200      	movs	r2, #0
 8009d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2200      	movs	r2, #0
 8009d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009d40:	2300      	movs	r3, #0
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	3708      	adds	r7, #8
 8009d46:	46bd      	mov	sp, r7
 8009d48:	bd80      	pop	{r7, pc}
	...

08009d4c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b088      	sub	sp, #32
 8009d50:	af02      	add	r7, sp, #8
 8009d52:	60f8      	str	r0, [r7, #12]
 8009d54:	607a      	str	r2, [r7, #4]
 8009d56:	461a      	mov	r2, r3
 8009d58:	460b      	mov	r3, r1
 8009d5a:	817b      	strh	r3, [r7, #10]
 8009d5c:	4613      	mov	r3, r2
 8009d5e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009d60:	f7ff f85e 	bl	8008e20 <HAL_GetTick>
 8009d64:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d6c:	b2db      	uxtb	r3, r3
 8009d6e:	2b20      	cmp	r3, #32
 8009d70:	f040 80e0 	bne.w	8009f34 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009d74:	697b      	ldr	r3, [r7, #20]
 8009d76:	9300      	str	r3, [sp, #0]
 8009d78:	2319      	movs	r3, #25
 8009d7a:	2201      	movs	r2, #1
 8009d7c:	4970      	ldr	r1, [pc, #448]	; (8009f40 <HAL_I2C_Master_Transmit+0x1f4>)
 8009d7e:	68f8      	ldr	r0, [r7, #12]
 8009d80:	f000 fe5c 	bl	800aa3c <I2C_WaitOnFlagUntilTimeout>
 8009d84:	4603      	mov	r3, r0
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d001      	beq.n	8009d8e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8009d8a:	2302      	movs	r3, #2
 8009d8c:	e0d3      	b.n	8009f36 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d94:	2b01      	cmp	r3, #1
 8009d96:	d101      	bne.n	8009d9c <HAL_I2C_Master_Transmit+0x50>
 8009d98:	2302      	movs	r3, #2
 8009d9a:	e0cc      	b.n	8009f36 <HAL_I2C_Master_Transmit+0x1ea>
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	2201      	movs	r2, #1
 8009da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	f003 0301 	and.w	r3, r3, #1
 8009dae:	2b01      	cmp	r3, #1
 8009db0:	d007      	beq.n	8009dc2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	681a      	ldr	r2, [r3, #0]
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f042 0201 	orr.w	r2, r2, #1
 8009dc0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	681a      	ldr	r2, [r3, #0]
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009dd0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	2221      	movs	r2, #33	; 0x21
 8009dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	2210      	movs	r2, #16
 8009dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	2200      	movs	r2, #0
 8009de6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	687a      	ldr	r2, [r7, #4]
 8009dec:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	893a      	ldrh	r2, [r7, #8]
 8009df2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009df8:	b29a      	uxth	r2, r3
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	4a50      	ldr	r2, [pc, #320]	; (8009f44 <HAL_I2C_Master_Transmit+0x1f8>)
 8009e02:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009e04:	8979      	ldrh	r1, [r7, #10]
 8009e06:	697b      	ldr	r3, [r7, #20]
 8009e08:	6a3a      	ldr	r2, [r7, #32]
 8009e0a:	68f8      	ldr	r0, [r7, #12]
 8009e0c:	f000 fc16 	bl	800a63c <I2C_MasterRequestWrite>
 8009e10:	4603      	mov	r3, r0
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d001      	beq.n	8009e1a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8009e16:	2301      	movs	r3, #1
 8009e18:	e08d      	b.n	8009f36 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009e1a:	2300      	movs	r3, #0
 8009e1c:	613b      	str	r3, [r7, #16]
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	695b      	ldr	r3, [r3, #20]
 8009e24:	613b      	str	r3, [r7, #16]
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	699b      	ldr	r3, [r3, #24]
 8009e2c:	613b      	str	r3, [r7, #16]
 8009e2e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009e30:	e066      	b.n	8009f00 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009e32:	697a      	ldr	r2, [r7, #20]
 8009e34:	6a39      	ldr	r1, [r7, #32]
 8009e36:	68f8      	ldr	r0, [r7, #12]
 8009e38:	f000 ff1a 	bl	800ac70 <I2C_WaitOnTXEFlagUntilTimeout>
 8009e3c:	4603      	mov	r3, r0
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d00d      	beq.n	8009e5e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e46:	2b04      	cmp	r3, #4
 8009e48:	d107      	bne.n	8009e5a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	681a      	ldr	r2, [r3, #0]
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009e58:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009e5a:	2301      	movs	r3, #1
 8009e5c:	e06b      	b.n	8009f36 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e62:	781a      	ldrb	r2, [r3, #0]
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e6e:	1c5a      	adds	r2, r3, #1
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009e78:	b29b      	uxth	r3, r3
 8009e7a:	3b01      	subs	r3, #1
 8009e7c:	b29a      	uxth	r2, r3
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009e82:	68fb      	ldr	r3, [r7, #12]
 8009e84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009e86:	3b01      	subs	r3, #1
 8009e88:	b29a      	uxth	r2, r3
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	695b      	ldr	r3, [r3, #20]
 8009e94:	f003 0304 	and.w	r3, r3, #4
 8009e98:	2b04      	cmp	r3, #4
 8009e9a:	d11b      	bne.n	8009ed4 <HAL_I2C_Master_Transmit+0x188>
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d017      	beq.n	8009ed4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ea8:	781a      	ldrb	r2, [r3, #0]
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009eb4:	1c5a      	adds	r2, r3, #1
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ebe:	b29b      	uxth	r3, r3
 8009ec0:	3b01      	subs	r3, #1
 8009ec2:	b29a      	uxth	r2, r3
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ecc:	3b01      	subs	r3, #1
 8009ece:	b29a      	uxth	r2, r3
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009ed4:	697a      	ldr	r2, [r7, #20]
 8009ed6:	6a39      	ldr	r1, [r7, #32]
 8009ed8:	68f8      	ldr	r0, [r7, #12]
 8009eda:	f000 ff11 	bl	800ad00 <I2C_WaitOnBTFFlagUntilTimeout>
 8009ede:	4603      	mov	r3, r0
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d00d      	beq.n	8009f00 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009ee4:	68fb      	ldr	r3, [r7, #12]
 8009ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ee8:	2b04      	cmp	r3, #4
 8009eea:	d107      	bne.n	8009efc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	681a      	ldr	r2, [r3, #0]
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009efa:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009efc:	2301      	movs	r3, #1
 8009efe:	e01a      	b.n	8009f36 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009f00:	68fb      	ldr	r3, [r7, #12]
 8009f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d194      	bne.n	8009e32 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f08:	68fb      	ldr	r3, [r7, #12]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	681a      	ldr	r2, [r3, #0]
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f16:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	2220      	movs	r2, #32
 8009f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	2200      	movs	r2, #0
 8009f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	2200      	movs	r2, #0
 8009f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009f30:	2300      	movs	r3, #0
 8009f32:	e000      	b.n	8009f36 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009f34:	2302      	movs	r3, #2
  }
}
 8009f36:	4618      	mov	r0, r3
 8009f38:	3718      	adds	r7, #24
 8009f3a:	46bd      	mov	sp, r7
 8009f3c:	bd80      	pop	{r7, pc}
 8009f3e:	bf00      	nop
 8009f40:	00100002 	.word	0x00100002
 8009f44:	ffff0000 	.word	0xffff0000

08009f48 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b088      	sub	sp, #32
 8009f4c:	af02      	add	r7, sp, #8
 8009f4e:	60f8      	str	r0, [r7, #12]
 8009f50:	4608      	mov	r0, r1
 8009f52:	4611      	mov	r1, r2
 8009f54:	461a      	mov	r2, r3
 8009f56:	4603      	mov	r3, r0
 8009f58:	817b      	strh	r3, [r7, #10]
 8009f5a:	460b      	mov	r3, r1
 8009f5c:	813b      	strh	r3, [r7, #8]
 8009f5e:	4613      	mov	r3, r2
 8009f60:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009f62:	f7fe ff5d 	bl	8008e20 <HAL_GetTick>
 8009f66:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009f68:	68fb      	ldr	r3, [r7, #12]
 8009f6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009f6e:	b2db      	uxtb	r3, r3
 8009f70:	2b20      	cmp	r3, #32
 8009f72:	f040 80d9 	bne.w	800a128 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009f76:	697b      	ldr	r3, [r7, #20]
 8009f78:	9300      	str	r3, [sp, #0]
 8009f7a:	2319      	movs	r3, #25
 8009f7c:	2201      	movs	r2, #1
 8009f7e:	496d      	ldr	r1, [pc, #436]	; (800a134 <HAL_I2C_Mem_Write+0x1ec>)
 8009f80:	68f8      	ldr	r0, [r7, #12]
 8009f82:	f000 fd5b 	bl	800aa3c <I2C_WaitOnFlagUntilTimeout>
 8009f86:	4603      	mov	r3, r0
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d001      	beq.n	8009f90 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8009f8c:	2302      	movs	r3, #2
 8009f8e:	e0cc      	b.n	800a12a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f96:	2b01      	cmp	r3, #1
 8009f98:	d101      	bne.n	8009f9e <HAL_I2C_Mem_Write+0x56>
 8009f9a:	2302      	movs	r3, #2
 8009f9c:	e0c5      	b.n	800a12a <HAL_I2C_Mem_Write+0x1e2>
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	2201      	movs	r2, #1
 8009fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	681b      	ldr	r3, [r3, #0]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f003 0301 	and.w	r3, r3, #1
 8009fb0:	2b01      	cmp	r3, #1
 8009fb2:	d007      	beq.n	8009fc4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	681a      	ldr	r2, [r3, #0]
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	f042 0201 	orr.w	r2, r2, #1
 8009fc2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	681a      	ldr	r2, [r3, #0]
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009fd2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	2221      	movs	r2, #33	; 0x21
 8009fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	2240      	movs	r2, #64	; 0x40
 8009fe0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	6a3a      	ldr	r2, [r7, #32]
 8009fee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009ff4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ffa:	b29a      	uxth	r2, r3
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	4a4d      	ldr	r2, [pc, #308]	; (800a138 <HAL_I2C_Mem_Write+0x1f0>)
 800a004:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a006:	88f8      	ldrh	r0, [r7, #6]
 800a008:	893a      	ldrh	r2, [r7, #8]
 800a00a:	8979      	ldrh	r1, [r7, #10]
 800a00c:	697b      	ldr	r3, [r7, #20]
 800a00e:	9301      	str	r3, [sp, #4]
 800a010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a012:	9300      	str	r3, [sp, #0]
 800a014:	4603      	mov	r3, r0
 800a016:	68f8      	ldr	r0, [r7, #12]
 800a018:	f000 fb92 	bl	800a740 <I2C_RequestMemoryWrite>
 800a01c:	4603      	mov	r3, r0
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d052      	beq.n	800a0c8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800a022:	2301      	movs	r3, #1
 800a024:	e081      	b.n	800a12a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a026:	697a      	ldr	r2, [r7, #20]
 800a028:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a02a:	68f8      	ldr	r0, [r7, #12]
 800a02c:	f000 fe20 	bl	800ac70 <I2C_WaitOnTXEFlagUntilTimeout>
 800a030:	4603      	mov	r3, r0
 800a032:	2b00      	cmp	r3, #0
 800a034:	d00d      	beq.n	800a052 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a03a:	2b04      	cmp	r3, #4
 800a03c:	d107      	bne.n	800a04e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	681a      	ldr	r2, [r3, #0]
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a04c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a04e:	2301      	movs	r3, #1
 800a050:	e06b      	b.n	800a12a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a056:	781a      	ldrb	r2, [r3, #0]
 800a058:	68fb      	ldr	r3, [r7, #12]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a062:	1c5a      	adds	r2, r3, #1
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a06c:	3b01      	subs	r3, #1
 800a06e:	b29a      	uxth	r2, r3
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a078:	b29b      	uxth	r3, r3
 800a07a:	3b01      	subs	r3, #1
 800a07c:	b29a      	uxth	r2, r3
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	695b      	ldr	r3, [r3, #20]
 800a088:	f003 0304 	and.w	r3, r3, #4
 800a08c:	2b04      	cmp	r3, #4
 800a08e:	d11b      	bne.n	800a0c8 <HAL_I2C_Mem_Write+0x180>
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a094:	2b00      	cmp	r3, #0
 800a096:	d017      	beq.n	800a0c8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a09c:	781a      	ldrb	r2, [r3, #0]
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0a8:	1c5a      	adds	r2, r3, #1
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0b2:	3b01      	subs	r3, #1
 800a0b4:	b29a      	uxth	r2, r3
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0be:	b29b      	uxth	r3, r3
 800a0c0:	3b01      	subs	r3, #1
 800a0c2:	b29a      	uxth	r2, r3
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d1aa      	bne.n	800a026 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a0d0:	697a      	ldr	r2, [r7, #20]
 800a0d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a0d4:	68f8      	ldr	r0, [r7, #12]
 800a0d6:	f000 fe13 	bl	800ad00 <I2C_WaitOnBTFFlagUntilTimeout>
 800a0da:	4603      	mov	r3, r0
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d00d      	beq.n	800a0fc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a0e4:	2b04      	cmp	r3, #4
 800a0e6:	d107      	bne.n	800a0f8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	681a      	ldr	r2, [r3, #0]
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a0f6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a0f8:	2301      	movs	r3, #1
 800a0fa:	e016      	b.n	800a12a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	681a      	ldr	r2, [r3, #0]
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a10a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	2220      	movs	r2, #32
 800a110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	2200      	movs	r2, #0
 800a118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	2200      	movs	r2, #0
 800a120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a124:	2300      	movs	r3, #0
 800a126:	e000      	b.n	800a12a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800a128:	2302      	movs	r3, #2
  }
}
 800a12a:	4618      	mov	r0, r3
 800a12c:	3718      	adds	r7, #24
 800a12e:	46bd      	mov	sp, r7
 800a130:	bd80      	pop	{r7, pc}
 800a132:	bf00      	nop
 800a134:	00100002 	.word	0x00100002
 800a138:	ffff0000 	.word	0xffff0000

0800a13c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b08c      	sub	sp, #48	; 0x30
 800a140:	af02      	add	r7, sp, #8
 800a142:	60f8      	str	r0, [r7, #12]
 800a144:	4608      	mov	r0, r1
 800a146:	4611      	mov	r1, r2
 800a148:	461a      	mov	r2, r3
 800a14a:	4603      	mov	r3, r0
 800a14c:	817b      	strh	r3, [r7, #10]
 800a14e:	460b      	mov	r3, r1
 800a150:	813b      	strh	r3, [r7, #8]
 800a152:	4613      	mov	r3, r2
 800a154:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800a156:	2300      	movs	r3, #0
 800a158:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a15a:	f7fe fe61 	bl	8008e20 <HAL_GetTick>
 800a15e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a160:	68fb      	ldr	r3, [r7, #12]
 800a162:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a166:	b2db      	uxtb	r3, r3
 800a168:	2b20      	cmp	r3, #32
 800a16a:	f040 8244 	bne.w	800a5f6 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a170:	9300      	str	r3, [sp, #0]
 800a172:	2319      	movs	r3, #25
 800a174:	2201      	movs	r2, #1
 800a176:	4982      	ldr	r1, [pc, #520]	; (800a380 <HAL_I2C_Mem_Read+0x244>)
 800a178:	68f8      	ldr	r0, [r7, #12]
 800a17a:	f000 fc5f 	bl	800aa3c <I2C_WaitOnFlagUntilTimeout>
 800a17e:	4603      	mov	r3, r0
 800a180:	2b00      	cmp	r3, #0
 800a182:	d001      	beq.n	800a188 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800a184:	2302      	movs	r3, #2
 800a186:	e237      	b.n	800a5f8 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a18e:	2b01      	cmp	r3, #1
 800a190:	d101      	bne.n	800a196 <HAL_I2C_Mem_Read+0x5a>
 800a192:	2302      	movs	r3, #2
 800a194:	e230      	b.n	800a5f8 <HAL_I2C_Mem_Read+0x4bc>
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	2201      	movs	r2, #1
 800a19a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	f003 0301 	and.w	r3, r3, #1
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	d007      	beq.n	800a1bc <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	681a      	ldr	r2, [r3, #0]
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f042 0201 	orr.w	r2, r2, #1
 800a1ba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	681a      	ldr	r2, [r3, #0]
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a1ca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	2222      	movs	r2, #34	; 0x22
 800a1d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	2240      	movs	r2, #64	; 0x40
 800a1d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a1e2:	68fb      	ldr	r3, [r7, #12]
 800a1e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800a1ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a1f2:	b29a      	uxth	r2, r3
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	4a62      	ldr	r2, [pc, #392]	; (800a384 <HAL_I2C_Mem_Read+0x248>)
 800a1fc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a1fe:	88f8      	ldrh	r0, [r7, #6]
 800a200:	893a      	ldrh	r2, [r7, #8]
 800a202:	8979      	ldrh	r1, [r7, #10]
 800a204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a206:	9301      	str	r3, [sp, #4]
 800a208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a20a:	9300      	str	r3, [sp, #0]
 800a20c:	4603      	mov	r3, r0
 800a20e:	68f8      	ldr	r0, [r7, #12]
 800a210:	f000 fb2c 	bl	800a86c <I2C_RequestMemoryRead>
 800a214:	4603      	mov	r3, r0
 800a216:	2b00      	cmp	r3, #0
 800a218:	d001      	beq.n	800a21e <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800a21a:	2301      	movs	r3, #1
 800a21c:	e1ec      	b.n	800a5f8 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a222:	2b00      	cmp	r3, #0
 800a224:	d113      	bne.n	800a24e <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a226:	2300      	movs	r3, #0
 800a228:	61fb      	str	r3, [r7, #28]
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	695b      	ldr	r3, [r3, #20]
 800a230:	61fb      	str	r3, [r7, #28]
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	699b      	ldr	r3, [r3, #24]
 800a238:	61fb      	str	r3, [r7, #28]
 800a23a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	681a      	ldr	r2, [r3, #0]
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a24a:	601a      	str	r2, [r3, #0]
 800a24c:	e1c0      	b.n	800a5d0 <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a252:	2b01      	cmp	r3, #1
 800a254:	d11e      	bne.n	800a294 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	681a      	ldr	r2, [r3, #0]
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a264:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a266:	b672      	cpsid	i
}
 800a268:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a26a:	2300      	movs	r3, #0
 800a26c:	61bb      	str	r3, [r7, #24]
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	695b      	ldr	r3, [r3, #20]
 800a274:	61bb      	str	r3, [r7, #24]
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	699b      	ldr	r3, [r3, #24]
 800a27c:	61bb      	str	r3, [r7, #24]
 800a27e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	681a      	ldr	r2, [r3, #0]
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a28e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a290:	b662      	cpsie	i
}
 800a292:	e035      	b.n	800a300 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a298:	2b02      	cmp	r3, #2
 800a29a:	d11e      	bne.n	800a2da <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a29c:	68fb      	ldr	r3, [r7, #12]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	681a      	ldr	r2, [r3, #0]
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a2aa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a2ac:	b672      	cpsid	i
}
 800a2ae:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a2b0:	2300      	movs	r3, #0
 800a2b2:	617b      	str	r3, [r7, #20]
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	695b      	ldr	r3, [r3, #20]
 800a2ba:	617b      	str	r3, [r7, #20]
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	699b      	ldr	r3, [r3, #24]
 800a2c2:	617b      	str	r3, [r7, #20]
 800a2c4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	681a      	ldr	r2, [r3, #0]
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a2d4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a2d6:	b662      	cpsie	i
}
 800a2d8:	e012      	b.n	800a300 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	681a      	ldr	r2, [r3, #0]
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a2e8:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	613b      	str	r3, [r7, #16]
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	695b      	ldr	r3, [r3, #20]
 800a2f4:	613b      	str	r3, [r7, #16]
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	699b      	ldr	r3, [r3, #24]
 800a2fc:	613b      	str	r3, [r7, #16]
 800a2fe:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800a300:	e166      	b.n	800a5d0 <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a306:	2b03      	cmp	r3, #3
 800a308:	f200 811f 	bhi.w	800a54a <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a310:	2b01      	cmp	r3, #1
 800a312:	d123      	bne.n	800a35c <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a316:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a318:	68f8      	ldr	r0, [r7, #12]
 800a31a:	f000 fd39 	bl	800ad90 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a31e:	4603      	mov	r3, r0
 800a320:	2b00      	cmp	r3, #0
 800a322:	d001      	beq.n	800a328 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800a324:	2301      	movs	r3, #1
 800a326:	e167      	b.n	800a5f8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	691a      	ldr	r2, [r3, #16]
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a332:	b2d2      	uxtb	r2, r2
 800a334:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a33a:	1c5a      	adds	r2, r3, #1
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a344:	3b01      	subs	r3, #1
 800a346:	b29a      	uxth	r2, r3
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a350:	b29b      	uxth	r3, r3
 800a352:	3b01      	subs	r3, #1
 800a354:	b29a      	uxth	r2, r3
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a35a:	e139      	b.n	800a5d0 <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a360:	2b02      	cmp	r3, #2
 800a362:	d152      	bne.n	800a40a <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a366:	9300      	str	r3, [sp, #0]
 800a368:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a36a:	2200      	movs	r2, #0
 800a36c:	4906      	ldr	r1, [pc, #24]	; (800a388 <HAL_I2C_Mem_Read+0x24c>)
 800a36e:	68f8      	ldr	r0, [r7, #12]
 800a370:	f000 fb64 	bl	800aa3c <I2C_WaitOnFlagUntilTimeout>
 800a374:	4603      	mov	r3, r0
 800a376:	2b00      	cmp	r3, #0
 800a378:	d008      	beq.n	800a38c <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800a37a:	2301      	movs	r3, #1
 800a37c:	e13c      	b.n	800a5f8 <HAL_I2C_Mem_Read+0x4bc>
 800a37e:	bf00      	nop
 800a380:	00100002 	.word	0x00100002
 800a384:	ffff0000 	.word	0xffff0000
 800a388:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800a38c:	b672      	cpsid	i
}
 800a38e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	681a      	ldr	r2, [r3, #0]
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	681b      	ldr	r3, [r3, #0]
 800a39a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a39e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	691a      	ldr	r2, [r3, #16]
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3aa:	b2d2      	uxtb	r2, r2
 800a3ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b2:	1c5a      	adds	r2, r3, #1
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3bc:	3b01      	subs	r3, #1
 800a3be:	b29a      	uxth	r2, r3
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3c8:	b29b      	uxth	r3, r3
 800a3ca:	3b01      	subs	r3, #1
 800a3cc:	b29a      	uxth	r2, r3
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a3d2:	b662      	cpsie	i
}
 800a3d4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	691a      	ldr	r2, [r3, #16]
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e0:	b2d2      	uxtb	r2, r2
 800a3e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e8:	1c5a      	adds	r2, r3, #1
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3f2:	3b01      	subs	r3, #1
 800a3f4:	b29a      	uxth	r2, r3
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3fe:	b29b      	uxth	r3, r3
 800a400:	3b01      	subs	r3, #1
 800a402:	b29a      	uxth	r2, r3
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a408:	e0e2      	b.n	800a5d0 <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a40a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a40c:	9300      	str	r3, [sp, #0]
 800a40e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a410:	2200      	movs	r2, #0
 800a412:	497b      	ldr	r1, [pc, #492]	; (800a600 <HAL_I2C_Mem_Read+0x4c4>)
 800a414:	68f8      	ldr	r0, [r7, #12]
 800a416:	f000 fb11 	bl	800aa3c <I2C_WaitOnFlagUntilTimeout>
 800a41a:	4603      	mov	r3, r0
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d001      	beq.n	800a424 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800a420:	2301      	movs	r3, #1
 800a422:	e0e9      	b.n	800a5f8 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	681a      	ldr	r2, [r3, #0]
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a432:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a434:	b672      	cpsid	i
}
 800a436:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	691a      	ldr	r2, [r3, #16]
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a442:	b2d2      	uxtb	r2, r2
 800a444:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a44a:	1c5a      	adds	r2, r3, #1
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a454:	3b01      	subs	r3, #1
 800a456:	b29a      	uxth	r2, r3
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a460:	b29b      	uxth	r3, r3
 800a462:	3b01      	subs	r3, #1
 800a464:	b29a      	uxth	r2, r3
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800a46a:	4b66      	ldr	r3, [pc, #408]	; (800a604 <HAL_I2C_Mem_Read+0x4c8>)
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	08db      	lsrs	r3, r3, #3
 800a470:	4a65      	ldr	r2, [pc, #404]	; (800a608 <HAL_I2C_Mem_Read+0x4cc>)
 800a472:	fba2 2303 	umull	r2, r3, r2, r3
 800a476:	0a1a      	lsrs	r2, r3, #8
 800a478:	4613      	mov	r3, r2
 800a47a:	009b      	lsls	r3, r3, #2
 800a47c:	4413      	add	r3, r2
 800a47e:	00da      	lsls	r2, r3, #3
 800a480:	1ad3      	subs	r3, r2, r3
 800a482:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800a484:	6a3b      	ldr	r3, [r7, #32]
 800a486:	3b01      	subs	r3, #1
 800a488:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800a48a:	6a3b      	ldr	r3, [r7, #32]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d118      	bne.n	800a4c2 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	2200      	movs	r2, #0
 800a494:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	2220      	movs	r2, #32
 800a49a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4aa:	f043 0220 	orr.w	r2, r3, #32
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800a4b2:	b662      	cpsie	i
}
 800a4b4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800a4be:	2301      	movs	r3, #1
 800a4c0:	e09a      	b.n	800a5f8 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800a4c2:	68fb      	ldr	r3, [r7, #12]
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	695b      	ldr	r3, [r3, #20]
 800a4c8:	f003 0304 	and.w	r3, r3, #4
 800a4cc:	2b04      	cmp	r3, #4
 800a4ce:	d1d9      	bne.n	800a484 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	681a      	ldr	r2, [r3, #0]
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a4de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	691a      	ldr	r2, [r3, #16]
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ea:	b2d2      	uxtb	r2, r2
 800a4ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4f2:	1c5a      	adds	r2, r3, #1
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4fc:	3b01      	subs	r3, #1
 800a4fe:	b29a      	uxth	r2, r3
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a508:	b29b      	uxth	r3, r3
 800a50a:	3b01      	subs	r3, #1
 800a50c:	b29a      	uxth	r2, r3
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a512:	b662      	cpsie	i
}
 800a514:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	691a      	ldr	r2, [r3, #16]
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a520:	b2d2      	uxtb	r2, r2
 800a522:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a528:	1c5a      	adds	r2, r3, #1
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a532:	3b01      	subs	r3, #1
 800a534:	b29a      	uxth	r2, r3
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a53e:	b29b      	uxth	r3, r3
 800a540:	3b01      	subs	r3, #1
 800a542:	b29a      	uxth	r2, r3
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a548:	e042      	b.n	800a5d0 <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a54a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a54c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a54e:	68f8      	ldr	r0, [r7, #12]
 800a550:	f000 fc1e 	bl	800ad90 <I2C_WaitOnRXNEFlagUntilTimeout>
 800a554:	4603      	mov	r3, r0
 800a556:	2b00      	cmp	r3, #0
 800a558:	d001      	beq.n	800a55e <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800a55a:	2301      	movs	r3, #1
 800a55c:	e04c      	b.n	800a5f8 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	691a      	ldr	r2, [r3, #16]
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a568:	b2d2      	uxtb	r2, r2
 800a56a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a570:	1c5a      	adds	r2, r3, #1
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a57a:	3b01      	subs	r3, #1
 800a57c:	b29a      	uxth	r2, r3
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a586:	b29b      	uxth	r3, r3
 800a588:	3b01      	subs	r3, #1
 800a58a:	b29a      	uxth	r2, r3
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	695b      	ldr	r3, [r3, #20]
 800a596:	f003 0304 	and.w	r3, r3, #4
 800a59a:	2b04      	cmp	r3, #4
 800a59c:	d118      	bne.n	800a5d0 <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	691a      	ldr	r2, [r3, #16]
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5a8:	b2d2      	uxtb	r2, r2
 800a5aa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b0:	1c5a      	adds	r2, r3, #1
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5ba:	3b01      	subs	r3, #1
 800a5bc:	b29a      	uxth	r2, r3
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5c6:	b29b      	uxth	r3, r3
 800a5c8:	3b01      	subs	r3, #1
 800a5ca:	b29a      	uxth	r2, r3
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	f47f ae94 	bne.w	800a302 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	2220      	movs	r2, #32
 800a5de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	e000      	b.n	800a5f8 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800a5f6:	2302      	movs	r3, #2
  }
}
 800a5f8:	4618      	mov	r0, r3
 800a5fa:	3728      	adds	r7, #40	; 0x28
 800a5fc:	46bd      	mov	sp, r7
 800a5fe:	bd80      	pop	{r7, pc}
 800a600:	00010004 	.word	0x00010004
 800a604:	200009b8 	.word	0x200009b8
 800a608:	14f8b589 	.word	0x14f8b589

0800a60c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a60c:	b480      	push	{r7}
 800a60e:	b083      	sub	sp, #12
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a61a:	b2db      	uxtb	r3, r3
}
 800a61c:	4618      	mov	r0, r3
 800a61e:	370c      	adds	r7, #12
 800a620:	46bd      	mov	sp, r7
 800a622:	bc80      	pop	{r7}
 800a624:	4770      	bx	lr

0800a626 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800a626:	b480      	push	{r7}
 800a628:	b083      	sub	sp, #12
 800a62a:	af00      	add	r7, sp, #0
 800a62c:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800a632:	4618      	mov	r0, r3
 800a634:	370c      	adds	r7, #12
 800a636:	46bd      	mov	sp, r7
 800a638:	bc80      	pop	{r7}
 800a63a:	4770      	bx	lr

0800a63c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b088      	sub	sp, #32
 800a640:	af02      	add	r7, sp, #8
 800a642:	60f8      	str	r0, [r7, #12]
 800a644:	607a      	str	r2, [r7, #4]
 800a646:	603b      	str	r3, [r7, #0]
 800a648:	460b      	mov	r3, r1
 800a64a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a650:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	2b08      	cmp	r3, #8
 800a656:	d006      	beq.n	800a666 <I2C_MasterRequestWrite+0x2a>
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	2b01      	cmp	r3, #1
 800a65c:	d003      	beq.n	800a666 <I2C_MasterRequestWrite+0x2a>
 800a65e:	697b      	ldr	r3, [r7, #20]
 800a660:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a664:	d108      	bne.n	800a678 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	681a      	ldr	r2, [r3, #0]
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a674:	601a      	str	r2, [r3, #0]
 800a676:	e00b      	b.n	800a690 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a67c:	2b12      	cmp	r3, #18
 800a67e:	d107      	bne.n	800a690 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	681a      	ldr	r2, [r3, #0]
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a68e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	9300      	str	r3, [sp, #0]
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2200      	movs	r2, #0
 800a698:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a69c:	68f8      	ldr	r0, [r7, #12]
 800a69e:	f000 f9cd 	bl	800aa3c <I2C_WaitOnFlagUntilTimeout>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d00d      	beq.n	800a6c4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6b6:	d103      	bne.n	800a6c0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
 800a6ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a6be:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a6c0:	2303      	movs	r3, #3
 800a6c2:	e035      	b.n	800a730 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	691b      	ldr	r3, [r3, #16]
 800a6c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a6cc:	d108      	bne.n	800a6e0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a6ce:	897b      	ldrh	r3, [r7, #10]
 800a6d0:	b2db      	uxtb	r3, r3
 800a6d2:	461a      	mov	r2, r3
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a6dc:	611a      	str	r2, [r3, #16]
 800a6de:	e01b      	b.n	800a718 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a6e0:	897b      	ldrh	r3, [r7, #10]
 800a6e2:	11db      	asrs	r3, r3, #7
 800a6e4:	b2db      	uxtb	r3, r3
 800a6e6:	f003 0306 	and.w	r3, r3, #6
 800a6ea:	b2db      	uxtb	r3, r3
 800a6ec:	f063 030f 	orn	r3, r3, #15
 800a6f0:	b2da      	uxtb	r2, r3
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	687a      	ldr	r2, [r7, #4]
 800a6fc:	490e      	ldr	r1, [pc, #56]	; (800a738 <I2C_MasterRequestWrite+0xfc>)
 800a6fe:	68f8      	ldr	r0, [r7, #12]
 800a700:	f000 fa16 	bl	800ab30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a704:	4603      	mov	r3, r0
 800a706:	2b00      	cmp	r3, #0
 800a708:	d001      	beq.n	800a70e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a70a:	2301      	movs	r3, #1
 800a70c:	e010      	b.n	800a730 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a70e:	897b      	ldrh	r3, [r7, #10]
 800a710:	b2da      	uxtb	r2, r3
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	687a      	ldr	r2, [r7, #4]
 800a71c:	4907      	ldr	r1, [pc, #28]	; (800a73c <I2C_MasterRequestWrite+0x100>)
 800a71e:	68f8      	ldr	r0, [r7, #12]
 800a720:	f000 fa06 	bl	800ab30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a724:	4603      	mov	r3, r0
 800a726:	2b00      	cmp	r3, #0
 800a728:	d001      	beq.n	800a72e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a72a:	2301      	movs	r3, #1
 800a72c:	e000      	b.n	800a730 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a72e:	2300      	movs	r3, #0
}
 800a730:	4618      	mov	r0, r3
 800a732:	3718      	adds	r7, #24
 800a734:	46bd      	mov	sp, r7
 800a736:	bd80      	pop	{r7, pc}
 800a738:	00010008 	.word	0x00010008
 800a73c:	00010002 	.word	0x00010002

0800a740 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b088      	sub	sp, #32
 800a744:	af02      	add	r7, sp, #8
 800a746:	60f8      	str	r0, [r7, #12]
 800a748:	4608      	mov	r0, r1
 800a74a:	4611      	mov	r1, r2
 800a74c:	461a      	mov	r2, r3
 800a74e:	4603      	mov	r3, r0
 800a750:	817b      	strh	r3, [r7, #10]
 800a752:	460b      	mov	r3, r1
 800a754:	813b      	strh	r3, [r7, #8]
 800a756:	4613      	mov	r3, r2
 800a758:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	681a      	ldr	r2, [r3, #0]
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a768:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a76c:	9300      	str	r3, [sp, #0]
 800a76e:	6a3b      	ldr	r3, [r7, #32]
 800a770:	2200      	movs	r2, #0
 800a772:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a776:	68f8      	ldr	r0, [r7, #12]
 800a778:	f000 f960 	bl	800aa3c <I2C_WaitOnFlagUntilTimeout>
 800a77c:	4603      	mov	r3, r0
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d00d      	beq.n	800a79e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a78c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a790:	d103      	bne.n	800a79a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a798:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a79a:	2303      	movs	r3, #3
 800a79c:	e05f      	b.n	800a85e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a79e:	897b      	ldrh	r3, [r7, #10]
 800a7a0:	b2db      	uxtb	r3, r3
 800a7a2:	461a      	mov	r2, r3
 800a7a4:	68fb      	ldr	r3, [r7, #12]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a7ac:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a7ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7b0:	6a3a      	ldr	r2, [r7, #32]
 800a7b2:	492d      	ldr	r1, [pc, #180]	; (800a868 <I2C_RequestMemoryWrite+0x128>)
 800a7b4:	68f8      	ldr	r0, [r7, #12]
 800a7b6:	f000 f9bb 	bl	800ab30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a7ba:	4603      	mov	r3, r0
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d001      	beq.n	800a7c4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	e04c      	b.n	800a85e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	617b      	str	r3, [r7, #20]
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	695b      	ldr	r3, [r3, #20]
 800a7ce:	617b      	str	r3, [r7, #20]
 800a7d0:	68fb      	ldr	r3, [r7, #12]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	699b      	ldr	r3, [r3, #24]
 800a7d6:	617b      	str	r3, [r7, #20]
 800a7d8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a7da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a7dc:	6a39      	ldr	r1, [r7, #32]
 800a7de:	68f8      	ldr	r0, [r7, #12]
 800a7e0:	f000 fa46 	bl	800ac70 <I2C_WaitOnTXEFlagUntilTimeout>
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d00d      	beq.n	800a806 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7ee:	2b04      	cmp	r3, #4
 800a7f0:	d107      	bne.n	800a802 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	681a      	ldr	r2, [r3, #0]
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a800:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a802:	2301      	movs	r3, #1
 800a804:	e02b      	b.n	800a85e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a806:	88fb      	ldrh	r3, [r7, #6]
 800a808:	2b01      	cmp	r3, #1
 800a80a:	d105      	bne.n	800a818 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a80c:	893b      	ldrh	r3, [r7, #8]
 800a80e:	b2da      	uxtb	r2, r3
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	611a      	str	r2, [r3, #16]
 800a816:	e021      	b.n	800a85c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a818:	893b      	ldrh	r3, [r7, #8]
 800a81a:	0a1b      	lsrs	r3, r3, #8
 800a81c:	b29b      	uxth	r3, r3
 800a81e:	b2da      	uxtb	r2, r3
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a826:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a828:	6a39      	ldr	r1, [r7, #32]
 800a82a:	68f8      	ldr	r0, [r7, #12]
 800a82c:	f000 fa20 	bl	800ac70 <I2C_WaitOnTXEFlagUntilTimeout>
 800a830:	4603      	mov	r3, r0
 800a832:	2b00      	cmp	r3, #0
 800a834:	d00d      	beq.n	800a852 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a83a:	2b04      	cmp	r3, #4
 800a83c:	d107      	bne.n	800a84e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	681a      	ldr	r2, [r3, #0]
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a84c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a84e:	2301      	movs	r3, #1
 800a850:	e005      	b.n	800a85e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a852:	893b      	ldrh	r3, [r7, #8]
 800a854:	b2da      	uxtb	r2, r3
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a85c:	2300      	movs	r3, #0
}
 800a85e:	4618      	mov	r0, r3
 800a860:	3718      	adds	r7, #24
 800a862:	46bd      	mov	sp, r7
 800a864:	bd80      	pop	{r7, pc}
 800a866:	bf00      	nop
 800a868:	00010002 	.word	0x00010002

0800a86c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b088      	sub	sp, #32
 800a870:	af02      	add	r7, sp, #8
 800a872:	60f8      	str	r0, [r7, #12]
 800a874:	4608      	mov	r0, r1
 800a876:	4611      	mov	r1, r2
 800a878:	461a      	mov	r2, r3
 800a87a:	4603      	mov	r3, r0
 800a87c:	817b      	strh	r3, [r7, #10]
 800a87e:	460b      	mov	r3, r1
 800a880:	813b      	strh	r3, [r7, #8]
 800a882:	4613      	mov	r3, r2
 800a884:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	681a      	ldr	r2, [r3, #0]
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a894:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	681a      	ldr	r2, [r3, #0]
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a8a4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8a8:	9300      	str	r3, [sp, #0]
 800a8aa:	6a3b      	ldr	r3, [r7, #32]
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a8b2:	68f8      	ldr	r0, [r7, #12]
 800a8b4:	f000 f8c2 	bl	800aa3c <I2C_WaitOnFlagUntilTimeout>
 800a8b8:	4603      	mov	r3, r0
 800a8ba:	2b00      	cmp	r3, #0
 800a8bc:	d00d      	beq.n	800a8da <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8cc:	d103      	bne.n	800a8d6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a8d4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a8d6:	2303      	movs	r3, #3
 800a8d8:	e0aa      	b.n	800aa30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a8da:	897b      	ldrh	r3, [r7, #10]
 800a8dc:	b2db      	uxtb	r3, r3
 800a8de:	461a      	mov	r2, r3
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a8e8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a8ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8ec:	6a3a      	ldr	r2, [r7, #32]
 800a8ee:	4952      	ldr	r1, [pc, #328]	; (800aa38 <I2C_RequestMemoryRead+0x1cc>)
 800a8f0:	68f8      	ldr	r0, [r7, #12]
 800a8f2:	f000 f91d 	bl	800ab30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d001      	beq.n	800a900 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	e097      	b.n	800aa30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a900:	2300      	movs	r3, #0
 800a902:	617b      	str	r3, [r7, #20]
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	681b      	ldr	r3, [r3, #0]
 800a908:	695b      	ldr	r3, [r3, #20]
 800a90a:	617b      	str	r3, [r7, #20]
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	699b      	ldr	r3, [r3, #24]
 800a912:	617b      	str	r3, [r7, #20]
 800a914:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a916:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a918:	6a39      	ldr	r1, [r7, #32]
 800a91a:	68f8      	ldr	r0, [r7, #12]
 800a91c:	f000 f9a8 	bl	800ac70 <I2C_WaitOnTXEFlagUntilTimeout>
 800a920:	4603      	mov	r3, r0
 800a922:	2b00      	cmp	r3, #0
 800a924:	d00d      	beq.n	800a942 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a92a:	2b04      	cmp	r3, #4
 800a92c:	d107      	bne.n	800a93e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	681a      	ldr	r2, [r3, #0]
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a93c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a93e:	2301      	movs	r3, #1
 800a940:	e076      	b.n	800aa30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a942:	88fb      	ldrh	r3, [r7, #6]
 800a944:	2b01      	cmp	r3, #1
 800a946:	d105      	bne.n	800a954 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a948:	893b      	ldrh	r3, [r7, #8]
 800a94a:	b2da      	uxtb	r2, r3
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	611a      	str	r2, [r3, #16]
 800a952:	e021      	b.n	800a998 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a954:	893b      	ldrh	r3, [r7, #8]
 800a956:	0a1b      	lsrs	r3, r3, #8
 800a958:	b29b      	uxth	r3, r3
 800a95a:	b2da      	uxtb	r2, r3
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a962:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a964:	6a39      	ldr	r1, [r7, #32]
 800a966:	68f8      	ldr	r0, [r7, #12]
 800a968:	f000 f982 	bl	800ac70 <I2C_WaitOnTXEFlagUntilTimeout>
 800a96c:	4603      	mov	r3, r0
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d00d      	beq.n	800a98e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a976:	2b04      	cmp	r3, #4
 800a978:	d107      	bne.n	800a98a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	681a      	ldr	r2, [r3, #0]
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a988:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a98a:	2301      	movs	r3, #1
 800a98c:	e050      	b.n	800aa30 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a98e:	893b      	ldrh	r3, [r7, #8]
 800a990:	b2da      	uxtb	r2, r3
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a99a:	6a39      	ldr	r1, [r7, #32]
 800a99c:	68f8      	ldr	r0, [r7, #12]
 800a99e:	f000 f967 	bl	800ac70 <I2C_WaitOnTXEFlagUntilTimeout>
 800a9a2:	4603      	mov	r3, r0
 800a9a4:	2b00      	cmp	r3, #0
 800a9a6:	d00d      	beq.n	800a9c4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9ac:	2b04      	cmp	r3, #4
 800a9ae:	d107      	bne.n	800a9c0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a9b0:	68fb      	ldr	r3, [r7, #12]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	681a      	ldr	r2, [r3, #0]
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a9be:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a9c0:	2301      	movs	r3, #1
 800a9c2:	e035      	b.n	800aa30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	681a      	ldr	r2, [r3, #0]
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a9d2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d6:	9300      	str	r3, [sp, #0]
 800a9d8:	6a3b      	ldr	r3, [r7, #32]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a9e0:	68f8      	ldr	r0, [r7, #12]
 800a9e2:	f000 f82b 	bl	800aa3c <I2C_WaitOnFlagUntilTimeout>
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d00d      	beq.n	800aa08 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	681b      	ldr	r3, [r3, #0]
 800a9f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9fa:	d103      	bne.n	800aa04 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aa02:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800aa04:	2303      	movs	r3, #3
 800aa06:	e013      	b.n	800aa30 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800aa08:	897b      	ldrh	r3, [r7, #10]
 800aa0a:	b2db      	uxtb	r3, r3
 800aa0c:	f043 0301 	orr.w	r3, r3, #1
 800aa10:	b2da      	uxtb	r2, r3
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	681b      	ldr	r3, [r3, #0]
 800aa16:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800aa18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa1a:	6a3a      	ldr	r2, [r7, #32]
 800aa1c:	4906      	ldr	r1, [pc, #24]	; (800aa38 <I2C_RequestMemoryRead+0x1cc>)
 800aa1e:	68f8      	ldr	r0, [r7, #12]
 800aa20:	f000 f886 	bl	800ab30 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800aa24:	4603      	mov	r3, r0
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d001      	beq.n	800aa2e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	e000      	b.n	800aa30 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800aa2e:	2300      	movs	r3, #0
}
 800aa30:	4618      	mov	r0, r3
 800aa32:	3718      	adds	r7, #24
 800aa34:	46bd      	mov	sp, r7
 800aa36:	bd80      	pop	{r7, pc}
 800aa38:	00010002 	.word	0x00010002

0800aa3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800aa3c:	b580      	push	{r7, lr}
 800aa3e:	b084      	sub	sp, #16
 800aa40:	af00      	add	r7, sp, #0
 800aa42:	60f8      	str	r0, [r7, #12]
 800aa44:	60b9      	str	r1, [r7, #8]
 800aa46:	603b      	str	r3, [r7, #0]
 800aa48:	4613      	mov	r3, r2
 800aa4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aa4c:	e048      	b.n	800aae0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa54:	d044      	beq.n	800aae0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa56:	f7fe f9e3 	bl	8008e20 <HAL_GetTick>
 800aa5a:	4602      	mov	r2, r0
 800aa5c:	69bb      	ldr	r3, [r7, #24]
 800aa5e:	1ad3      	subs	r3, r2, r3
 800aa60:	683a      	ldr	r2, [r7, #0]
 800aa62:	429a      	cmp	r2, r3
 800aa64:	d302      	bcc.n	800aa6c <I2C_WaitOnFlagUntilTimeout+0x30>
 800aa66:	683b      	ldr	r3, [r7, #0]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d139      	bne.n	800aae0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800aa6c:	68bb      	ldr	r3, [r7, #8]
 800aa6e:	0c1b      	lsrs	r3, r3, #16
 800aa70:	b2db      	uxtb	r3, r3
 800aa72:	2b01      	cmp	r3, #1
 800aa74:	d10d      	bne.n	800aa92 <I2C_WaitOnFlagUntilTimeout+0x56>
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	695b      	ldr	r3, [r3, #20]
 800aa7c:	43da      	mvns	r2, r3
 800aa7e:	68bb      	ldr	r3, [r7, #8]
 800aa80:	4013      	ands	r3, r2
 800aa82:	b29b      	uxth	r3, r3
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	bf0c      	ite	eq
 800aa88:	2301      	moveq	r3, #1
 800aa8a:	2300      	movne	r3, #0
 800aa8c:	b2db      	uxtb	r3, r3
 800aa8e:	461a      	mov	r2, r3
 800aa90:	e00c      	b.n	800aaac <I2C_WaitOnFlagUntilTimeout+0x70>
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	699b      	ldr	r3, [r3, #24]
 800aa98:	43da      	mvns	r2, r3
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	4013      	ands	r3, r2
 800aa9e:	b29b      	uxth	r3, r3
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	bf0c      	ite	eq
 800aaa4:	2301      	moveq	r3, #1
 800aaa6:	2300      	movne	r3, #0
 800aaa8:	b2db      	uxtb	r3, r3
 800aaaa:	461a      	mov	r2, r3
 800aaac:	79fb      	ldrb	r3, [r7, #7]
 800aaae:	429a      	cmp	r2, r3
 800aab0:	d116      	bne.n	800aae0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	2200      	movs	r2, #0
 800aab6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	2220      	movs	r2, #32
 800aabc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	2200      	movs	r2, #0
 800aac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aacc:	f043 0220 	orr.w	r2, r3, #32
 800aad0:	68fb      	ldr	r3, [r7, #12]
 800aad2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	2200      	movs	r2, #0
 800aad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800aadc:	2301      	movs	r3, #1
 800aade:	e023      	b.n	800ab28 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	0c1b      	lsrs	r3, r3, #16
 800aae4:	b2db      	uxtb	r3, r3
 800aae6:	2b01      	cmp	r3, #1
 800aae8:	d10d      	bne.n	800ab06 <I2C_WaitOnFlagUntilTimeout+0xca>
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	695b      	ldr	r3, [r3, #20]
 800aaf0:	43da      	mvns	r2, r3
 800aaf2:	68bb      	ldr	r3, [r7, #8]
 800aaf4:	4013      	ands	r3, r2
 800aaf6:	b29b      	uxth	r3, r3
 800aaf8:	2b00      	cmp	r3, #0
 800aafa:	bf0c      	ite	eq
 800aafc:	2301      	moveq	r3, #1
 800aafe:	2300      	movne	r3, #0
 800ab00:	b2db      	uxtb	r3, r3
 800ab02:	461a      	mov	r2, r3
 800ab04:	e00c      	b.n	800ab20 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	699b      	ldr	r3, [r3, #24]
 800ab0c:	43da      	mvns	r2, r3
 800ab0e:	68bb      	ldr	r3, [r7, #8]
 800ab10:	4013      	ands	r3, r2
 800ab12:	b29b      	uxth	r3, r3
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	bf0c      	ite	eq
 800ab18:	2301      	moveq	r3, #1
 800ab1a:	2300      	movne	r3, #0
 800ab1c:	b2db      	uxtb	r3, r3
 800ab1e:	461a      	mov	r2, r3
 800ab20:	79fb      	ldrb	r3, [r7, #7]
 800ab22:	429a      	cmp	r2, r3
 800ab24:	d093      	beq.n	800aa4e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ab26:	2300      	movs	r3, #0
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3710      	adds	r7, #16
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}

0800ab30 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800ab30:	b580      	push	{r7, lr}
 800ab32:	b084      	sub	sp, #16
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	60f8      	str	r0, [r7, #12]
 800ab38:	60b9      	str	r1, [r7, #8]
 800ab3a:	607a      	str	r2, [r7, #4]
 800ab3c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ab3e:	e071      	b.n	800ac24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	695b      	ldr	r3, [r3, #20]
 800ab46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ab4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab4e:	d123      	bne.n	800ab98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	681a      	ldr	r2, [r3, #0]
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ab5e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ab68:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	2220      	movs	r2, #32
 800ab74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	2200      	movs	r2, #0
 800ab7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ab84:	f043 0204 	orr.w	r2, r3, #4
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	2200      	movs	r2, #0
 800ab90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ab94:	2301      	movs	r3, #1
 800ab96:	e067      	b.n	800ac68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab9e:	d041      	beq.n	800ac24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aba0:	f7fe f93e 	bl	8008e20 <HAL_GetTick>
 800aba4:	4602      	mov	r2, r0
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	1ad3      	subs	r3, r2, r3
 800abaa:	687a      	ldr	r2, [r7, #4]
 800abac:	429a      	cmp	r2, r3
 800abae:	d302      	bcc.n	800abb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d136      	bne.n	800ac24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800abb6:	68bb      	ldr	r3, [r7, #8]
 800abb8:	0c1b      	lsrs	r3, r3, #16
 800abba:	b2db      	uxtb	r3, r3
 800abbc:	2b01      	cmp	r3, #1
 800abbe:	d10c      	bne.n	800abda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	681b      	ldr	r3, [r3, #0]
 800abc4:	695b      	ldr	r3, [r3, #20]
 800abc6:	43da      	mvns	r2, r3
 800abc8:	68bb      	ldr	r3, [r7, #8]
 800abca:	4013      	ands	r3, r2
 800abcc:	b29b      	uxth	r3, r3
 800abce:	2b00      	cmp	r3, #0
 800abd0:	bf14      	ite	ne
 800abd2:	2301      	movne	r3, #1
 800abd4:	2300      	moveq	r3, #0
 800abd6:	b2db      	uxtb	r3, r3
 800abd8:	e00b      	b.n	800abf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	699b      	ldr	r3, [r3, #24]
 800abe0:	43da      	mvns	r2, r3
 800abe2:	68bb      	ldr	r3, [r7, #8]
 800abe4:	4013      	ands	r3, r2
 800abe6:	b29b      	uxth	r3, r3
 800abe8:	2b00      	cmp	r3, #0
 800abea:	bf14      	ite	ne
 800abec:	2301      	movne	r3, #1
 800abee:	2300      	moveq	r3, #0
 800abf0:	b2db      	uxtb	r3, r3
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d016      	beq.n	800ac24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	2200      	movs	r2, #0
 800abfa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	2220      	movs	r2, #32
 800ac00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	2200      	movs	r2, #0
 800ac08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac10:	f043 0220 	orr.w	r2, r3, #32
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	2200      	movs	r2, #0
 800ac1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800ac20:	2301      	movs	r3, #1
 800ac22:	e021      	b.n	800ac68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ac24:	68bb      	ldr	r3, [r7, #8]
 800ac26:	0c1b      	lsrs	r3, r3, #16
 800ac28:	b2db      	uxtb	r3, r3
 800ac2a:	2b01      	cmp	r3, #1
 800ac2c:	d10c      	bne.n	800ac48 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	695b      	ldr	r3, [r3, #20]
 800ac34:	43da      	mvns	r2, r3
 800ac36:	68bb      	ldr	r3, [r7, #8]
 800ac38:	4013      	ands	r3, r2
 800ac3a:	b29b      	uxth	r3, r3
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	bf14      	ite	ne
 800ac40:	2301      	movne	r3, #1
 800ac42:	2300      	moveq	r3, #0
 800ac44:	b2db      	uxtb	r3, r3
 800ac46:	e00b      	b.n	800ac60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800ac48:	68fb      	ldr	r3, [r7, #12]
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	699b      	ldr	r3, [r3, #24]
 800ac4e:	43da      	mvns	r2, r3
 800ac50:	68bb      	ldr	r3, [r7, #8]
 800ac52:	4013      	ands	r3, r2
 800ac54:	b29b      	uxth	r3, r3
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	bf14      	ite	ne
 800ac5a:	2301      	movne	r3, #1
 800ac5c:	2300      	moveq	r3, #0
 800ac5e:	b2db      	uxtb	r3, r3
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	f47f af6d 	bne.w	800ab40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800ac66:	2300      	movs	r3, #0
}
 800ac68:	4618      	mov	r0, r3
 800ac6a:	3710      	adds	r7, #16
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bd80      	pop	{r7, pc}

0800ac70 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b084      	sub	sp, #16
 800ac74:	af00      	add	r7, sp, #0
 800ac76:	60f8      	str	r0, [r7, #12]
 800ac78:	60b9      	str	r1, [r7, #8]
 800ac7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ac7c:	e034      	b.n	800ace8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ac7e:	68f8      	ldr	r0, [r7, #12]
 800ac80:	f000 f8e3 	bl	800ae4a <I2C_IsAcknowledgeFailed>
 800ac84:	4603      	mov	r3, r0
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d001      	beq.n	800ac8e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ac8a:	2301      	movs	r3, #1
 800ac8c:	e034      	b.n	800acf8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac8e:	68bb      	ldr	r3, [r7, #8]
 800ac90:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac94:	d028      	beq.n	800ace8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac96:	f7fe f8c3 	bl	8008e20 <HAL_GetTick>
 800ac9a:	4602      	mov	r2, r0
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	1ad3      	subs	r3, r2, r3
 800aca0:	68ba      	ldr	r2, [r7, #8]
 800aca2:	429a      	cmp	r2, r3
 800aca4:	d302      	bcc.n	800acac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800aca6:	68bb      	ldr	r3, [r7, #8]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d11d      	bne.n	800ace8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	695b      	ldr	r3, [r3, #20]
 800acb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acb6:	2b80      	cmp	r3, #128	; 0x80
 800acb8:	d016      	beq.n	800ace8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800acba:	68fb      	ldr	r3, [r7, #12]
 800acbc:	2200      	movs	r2, #0
 800acbe:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	2220      	movs	r2, #32
 800acc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	2200      	movs	r2, #0
 800accc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acd4:	f043 0220 	orr.w	r2, r3, #32
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	2200      	movs	r2, #0
 800ace0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800ace4:	2301      	movs	r3, #1
 800ace6:	e007      	b.n	800acf8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	695b      	ldr	r3, [r3, #20]
 800acee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acf2:	2b80      	cmp	r3, #128	; 0x80
 800acf4:	d1c3      	bne.n	800ac7e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800acf6:	2300      	movs	r3, #0
}
 800acf8:	4618      	mov	r0, r3
 800acfa:	3710      	adds	r7, #16
 800acfc:	46bd      	mov	sp, r7
 800acfe:	bd80      	pop	{r7, pc}

0800ad00 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b084      	sub	sp, #16
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	60f8      	str	r0, [r7, #12]
 800ad08:	60b9      	str	r1, [r7, #8]
 800ad0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ad0c:	e034      	b.n	800ad78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ad0e:	68f8      	ldr	r0, [r7, #12]
 800ad10:	f000 f89b 	bl	800ae4a <I2C_IsAcknowledgeFailed>
 800ad14:	4603      	mov	r3, r0
 800ad16:	2b00      	cmp	r3, #0
 800ad18:	d001      	beq.n	800ad1e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ad1a:	2301      	movs	r3, #1
 800ad1c:	e034      	b.n	800ad88 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad1e:	68bb      	ldr	r3, [r7, #8]
 800ad20:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad24:	d028      	beq.n	800ad78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad26:	f7fe f87b 	bl	8008e20 <HAL_GetTick>
 800ad2a:	4602      	mov	r2, r0
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	1ad3      	subs	r3, r2, r3
 800ad30:	68ba      	ldr	r2, [r7, #8]
 800ad32:	429a      	cmp	r2, r3
 800ad34:	d302      	bcc.n	800ad3c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800ad36:	68bb      	ldr	r3, [r7, #8]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	d11d      	bne.n	800ad78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	695b      	ldr	r3, [r3, #20]
 800ad42:	f003 0304 	and.w	r3, r3, #4
 800ad46:	2b04      	cmp	r3, #4
 800ad48:	d016      	beq.n	800ad78 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	2220      	movs	r2, #32
 800ad54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	2200      	movs	r2, #0
 800ad5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad64:	f043 0220 	orr.w	r2, r3, #32
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ad6c:	68fb      	ldr	r3, [r7, #12]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800ad74:	2301      	movs	r3, #1
 800ad76:	e007      	b.n	800ad88 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ad78:	68fb      	ldr	r3, [r7, #12]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	695b      	ldr	r3, [r3, #20]
 800ad7e:	f003 0304 	and.w	r3, r3, #4
 800ad82:	2b04      	cmp	r3, #4
 800ad84:	d1c3      	bne.n	800ad0e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800ad86:	2300      	movs	r3, #0
}
 800ad88:	4618      	mov	r0, r3
 800ad8a:	3710      	adds	r7, #16
 800ad8c:	46bd      	mov	sp, r7
 800ad8e:	bd80      	pop	{r7, pc}

0800ad90 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ad90:	b580      	push	{r7, lr}
 800ad92:	b084      	sub	sp, #16
 800ad94:	af00      	add	r7, sp, #0
 800ad96:	60f8      	str	r0, [r7, #12]
 800ad98:	60b9      	str	r1, [r7, #8]
 800ad9a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ad9c:	e049      	b.n	800ae32 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	695b      	ldr	r3, [r3, #20]
 800ada4:	f003 0310 	and.w	r3, r3, #16
 800ada8:	2b10      	cmp	r3, #16
 800adaa:	d119      	bne.n	800ade0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	f06f 0210 	mvn.w	r2, #16
 800adb4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	2200      	movs	r2, #0
 800adba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800adbc:	68fb      	ldr	r3, [r7, #12]
 800adbe:	2220      	movs	r2, #32
 800adc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	2200      	movs	r2, #0
 800adc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800adcc:	68fb      	ldr	r3, [r7, #12]
 800adce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	2200      	movs	r2, #0
 800add8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800addc:	2301      	movs	r3, #1
 800adde:	e030      	b.n	800ae42 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ade0:	f7fe f81e 	bl	8008e20 <HAL_GetTick>
 800ade4:	4602      	mov	r2, r0
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	1ad3      	subs	r3, r2, r3
 800adea:	68ba      	ldr	r2, [r7, #8]
 800adec:	429a      	cmp	r2, r3
 800adee:	d302      	bcc.n	800adf6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800adf0:	68bb      	ldr	r3, [r7, #8]
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d11d      	bne.n	800ae32 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800adf6:	68fb      	ldr	r3, [r7, #12]
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	695b      	ldr	r3, [r3, #20]
 800adfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae00:	2b40      	cmp	r3, #64	; 0x40
 800ae02:	d016      	beq.n	800ae32 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800ae04:	68fb      	ldr	r3, [r7, #12]
 800ae06:	2200      	movs	r2, #0
 800ae08:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	2220      	movs	r2, #32
 800ae0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ae12:	68fb      	ldr	r3, [r7, #12]
 800ae14:	2200      	movs	r2, #0
 800ae16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ae1a:	68fb      	ldr	r3, [r7, #12]
 800ae1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae1e:	f043 0220 	orr.w	r2, r3, #32
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	2200      	movs	r2, #0
 800ae2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800ae2e:	2301      	movs	r3, #1
 800ae30:	e007      	b.n	800ae42 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ae32:	68fb      	ldr	r3, [r7, #12]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	695b      	ldr	r3, [r3, #20]
 800ae38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae3c:	2b40      	cmp	r3, #64	; 0x40
 800ae3e:	d1ae      	bne.n	800ad9e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800ae40:	2300      	movs	r3, #0
}
 800ae42:	4618      	mov	r0, r3
 800ae44:	3710      	adds	r7, #16
 800ae46:	46bd      	mov	sp, r7
 800ae48:	bd80      	pop	{r7, pc}

0800ae4a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800ae4a:	b480      	push	{r7}
 800ae4c:	b083      	sub	sp, #12
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	695b      	ldr	r3, [r3, #20]
 800ae58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ae5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ae60:	d11b      	bne.n	800ae9a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ae6a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	2200      	movs	r2, #0
 800ae70:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	2220      	movs	r2, #32
 800ae76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae86:	f043 0204 	orr.w	r2, r3, #4
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2200      	movs	r2, #0
 800ae92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800ae96:	2301      	movs	r3, #1
 800ae98:	e000      	b.n	800ae9c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800ae9a:	2300      	movs	r3, #0
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	370c      	adds	r7, #12
 800aea0:	46bd      	mov	sp, r7
 800aea2:	bc80      	pop	{r7}
 800aea4:	4770      	bx	lr
	...

0800aea8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800aea8:	b580      	push	{r7, lr}
 800aeaa:	b086      	sub	sp, #24
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d101      	bne.n	800aeba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	e272      	b.n	800b3a0 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	f003 0301 	and.w	r3, r3, #1
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	f000 8087 	beq.w	800afd6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800aec8:	4b92      	ldr	r3, [pc, #584]	; (800b114 <HAL_RCC_OscConfig+0x26c>)
 800aeca:	685b      	ldr	r3, [r3, #4]
 800aecc:	f003 030c 	and.w	r3, r3, #12
 800aed0:	2b04      	cmp	r3, #4
 800aed2:	d00c      	beq.n	800aeee <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800aed4:	4b8f      	ldr	r3, [pc, #572]	; (800b114 <HAL_RCC_OscConfig+0x26c>)
 800aed6:	685b      	ldr	r3, [r3, #4]
 800aed8:	f003 030c 	and.w	r3, r3, #12
 800aedc:	2b08      	cmp	r3, #8
 800aede:	d112      	bne.n	800af06 <HAL_RCC_OscConfig+0x5e>
 800aee0:	4b8c      	ldr	r3, [pc, #560]	; (800b114 <HAL_RCC_OscConfig+0x26c>)
 800aee2:	685b      	ldr	r3, [r3, #4]
 800aee4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aee8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aeec:	d10b      	bne.n	800af06 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800aeee:	4b89      	ldr	r3, [pc, #548]	; (800b114 <HAL_RCC_OscConfig+0x26c>)
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d06c      	beq.n	800afd4 <HAL_RCC_OscConfig+0x12c>
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	685b      	ldr	r3, [r3, #4]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d168      	bne.n	800afd4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800af02:	2301      	movs	r3, #1
 800af04:	e24c      	b.n	800b3a0 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	685b      	ldr	r3, [r3, #4]
 800af0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af0e:	d106      	bne.n	800af1e <HAL_RCC_OscConfig+0x76>
 800af10:	4b80      	ldr	r3, [pc, #512]	; (800b114 <HAL_RCC_OscConfig+0x26c>)
 800af12:	681b      	ldr	r3, [r3, #0]
 800af14:	4a7f      	ldr	r2, [pc, #508]	; (800b114 <HAL_RCC_OscConfig+0x26c>)
 800af16:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af1a:	6013      	str	r3, [r2, #0]
 800af1c:	e02e      	b.n	800af7c <HAL_RCC_OscConfig+0xd4>
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	685b      	ldr	r3, [r3, #4]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d10c      	bne.n	800af40 <HAL_RCC_OscConfig+0x98>
 800af26:	4b7b      	ldr	r3, [pc, #492]	; (800b114 <HAL_RCC_OscConfig+0x26c>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	4a7a      	ldr	r2, [pc, #488]	; (800b114 <HAL_RCC_OscConfig+0x26c>)
 800af2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800af30:	6013      	str	r3, [r2, #0]
 800af32:	4b78      	ldr	r3, [pc, #480]	; (800b114 <HAL_RCC_OscConfig+0x26c>)
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	4a77      	ldr	r2, [pc, #476]	; (800b114 <HAL_RCC_OscConfig+0x26c>)
 800af38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800af3c:	6013      	str	r3, [r2, #0]
 800af3e:	e01d      	b.n	800af7c <HAL_RCC_OscConfig+0xd4>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	685b      	ldr	r3, [r3, #4]
 800af44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800af48:	d10c      	bne.n	800af64 <HAL_RCC_OscConfig+0xbc>
 800af4a:	4b72      	ldr	r3, [pc, #456]	; (800b114 <HAL_RCC_OscConfig+0x26c>)
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	4a71      	ldr	r2, [pc, #452]	; (800b114 <HAL_RCC_OscConfig+0x26c>)
 800af50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800af54:	6013      	str	r3, [r2, #0]
 800af56:	4b6f      	ldr	r3, [pc, #444]	; (800b114 <HAL_RCC_OscConfig+0x26c>)
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	4a6e      	ldr	r2, [pc, #440]	; (800b114 <HAL_RCC_OscConfig+0x26c>)
 800af5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800af60:	6013      	str	r3, [r2, #0]
 800af62:	e00b      	b.n	800af7c <HAL_RCC_OscConfig+0xd4>
 800af64:	4b6b      	ldr	r3, [pc, #428]	; (800b114 <HAL_RCC_OscConfig+0x26c>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	4a6a      	ldr	r2, [pc, #424]	; (800b114 <HAL_RCC_OscConfig+0x26c>)
 800af6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800af6e:	6013      	str	r3, [r2, #0]
 800af70:	4b68      	ldr	r3, [pc, #416]	; (800b114 <HAL_RCC_OscConfig+0x26c>)
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	4a67      	ldr	r2, [pc, #412]	; (800b114 <HAL_RCC_OscConfig+0x26c>)
 800af76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800af7a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	685b      	ldr	r3, [r3, #4]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d013      	beq.n	800afac <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800af84:	f7fd ff4c 	bl	8008e20 <HAL_GetTick>
 800af88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800af8a:	e008      	b.n	800af9e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800af8c:	f7fd ff48 	bl	8008e20 <HAL_GetTick>
 800af90:	4602      	mov	r2, r0
 800af92:	693b      	ldr	r3, [r7, #16]
 800af94:	1ad3      	subs	r3, r2, r3
 800af96:	2b64      	cmp	r3, #100	; 0x64
 800af98:	d901      	bls.n	800af9e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800af9a:	2303      	movs	r3, #3
 800af9c:	e200      	b.n	800b3a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800af9e:	4b5d      	ldr	r3, [pc, #372]	; (800b114 <HAL_RCC_OscConfig+0x26c>)
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d0f0      	beq.n	800af8c <HAL_RCC_OscConfig+0xe4>
 800afaa:	e014      	b.n	800afd6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800afac:	f7fd ff38 	bl	8008e20 <HAL_GetTick>
 800afb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800afb2:	e008      	b.n	800afc6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800afb4:	f7fd ff34 	bl	8008e20 <HAL_GetTick>
 800afb8:	4602      	mov	r2, r0
 800afba:	693b      	ldr	r3, [r7, #16]
 800afbc:	1ad3      	subs	r3, r2, r3
 800afbe:	2b64      	cmp	r3, #100	; 0x64
 800afc0:	d901      	bls.n	800afc6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800afc2:	2303      	movs	r3, #3
 800afc4:	e1ec      	b.n	800b3a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800afc6:	4b53      	ldr	r3, [pc, #332]	; (800b114 <HAL_RCC_OscConfig+0x26c>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d1f0      	bne.n	800afb4 <HAL_RCC_OscConfig+0x10c>
 800afd2:	e000      	b.n	800afd6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800afd4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f003 0302 	and.w	r3, r3, #2
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d063      	beq.n	800b0aa <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800afe2:	4b4c      	ldr	r3, [pc, #304]	; (800b114 <HAL_RCC_OscConfig+0x26c>)
 800afe4:	685b      	ldr	r3, [r3, #4]
 800afe6:	f003 030c 	and.w	r3, r3, #12
 800afea:	2b00      	cmp	r3, #0
 800afec:	d00b      	beq.n	800b006 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800afee:	4b49      	ldr	r3, [pc, #292]	; (800b114 <HAL_RCC_OscConfig+0x26c>)
 800aff0:	685b      	ldr	r3, [r3, #4]
 800aff2:	f003 030c 	and.w	r3, r3, #12
 800aff6:	2b08      	cmp	r3, #8
 800aff8:	d11c      	bne.n	800b034 <HAL_RCC_OscConfig+0x18c>
 800affa:	4b46      	ldr	r3, [pc, #280]	; (800b114 <HAL_RCC_OscConfig+0x26c>)
 800affc:	685b      	ldr	r3, [r3, #4]
 800affe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b002:	2b00      	cmp	r3, #0
 800b004:	d116      	bne.n	800b034 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b006:	4b43      	ldr	r3, [pc, #268]	; (800b114 <HAL_RCC_OscConfig+0x26c>)
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	f003 0302 	and.w	r3, r3, #2
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d005      	beq.n	800b01e <HAL_RCC_OscConfig+0x176>
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	691b      	ldr	r3, [r3, #16]
 800b016:	2b01      	cmp	r3, #1
 800b018:	d001      	beq.n	800b01e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800b01a:	2301      	movs	r3, #1
 800b01c:	e1c0      	b.n	800b3a0 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b01e:	4b3d      	ldr	r3, [pc, #244]	; (800b114 <HAL_RCC_OscConfig+0x26c>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	695b      	ldr	r3, [r3, #20]
 800b02a:	00db      	lsls	r3, r3, #3
 800b02c:	4939      	ldr	r1, [pc, #228]	; (800b114 <HAL_RCC_OscConfig+0x26c>)
 800b02e:	4313      	orrs	r3, r2
 800b030:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b032:	e03a      	b.n	800b0aa <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	691b      	ldr	r3, [r3, #16]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d020      	beq.n	800b07e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b03c:	4b36      	ldr	r3, [pc, #216]	; (800b118 <HAL_RCC_OscConfig+0x270>)
 800b03e:	2201      	movs	r2, #1
 800b040:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b042:	f7fd feed 	bl	8008e20 <HAL_GetTick>
 800b046:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b048:	e008      	b.n	800b05c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b04a:	f7fd fee9 	bl	8008e20 <HAL_GetTick>
 800b04e:	4602      	mov	r2, r0
 800b050:	693b      	ldr	r3, [r7, #16]
 800b052:	1ad3      	subs	r3, r2, r3
 800b054:	2b02      	cmp	r3, #2
 800b056:	d901      	bls.n	800b05c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800b058:	2303      	movs	r3, #3
 800b05a:	e1a1      	b.n	800b3a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b05c:	4b2d      	ldr	r3, [pc, #180]	; (800b114 <HAL_RCC_OscConfig+0x26c>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	f003 0302 	and.w	r3, r3, #2
 800b064:	2b00      	cmp	r3, #0
 800b066:	d0f0      	beq.n	800b04a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b068:	4b2a      	ldr	r3, [pc, #168]	; (800b114 <HAL_RCC_OscConfig+0x26c>)
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	695b      	ldr	r3, [r3, #20]
 800b074:	00db      	lsls	r3, r3, #3
 800b076:	4927      	ldr	r1, [pc, #156]	; (800b114 <HAL_RCC_OscConfig+0x26c>)
 800b078:	4313      	orrs	r3, r2
 800b07a:	600b      	str	r3, [r1, #0]
 800b07c:	e015      	b.n	800b0aa <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b07e:	4b26      	ldr	r3, [pc, #152]	; (800b118 <HAL_RCC_OscConfig+0x270>)
 800b080:	2200      	movs	r2, #0
 800b082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b084:	f7fd fecc 	bl	8008e20 <HAL_GetTick>
 800b088:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b08a:	e008      	b.n	800b09e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b08c:	f7fd fec8 	bl	8008e20 <HAL_GetTick>
 800b090:	4602      	mov	r2, r0
 800b092:	693b      	ldr	r3, [r7, #16]
 800b094:	1ad3      	subs	r3, r2, r3
 800b096:	2b02      	cmp	r3, #2
 800b098:	d901      	bls.n	800b09e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800b09a:	2303      	movs	r3, #3
 800b09c:	e180      	b.n	800b3a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b09e:	4b1d      	ldr	r3, [pc, #116]	; (800b114 <HAL_RCC_OscConfig+0x26c>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	f003 0302 	and.w	r3, r3, #2
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d1f0      	bne.n	800b08c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	f003 0308 	and.w	r3, r3, #8
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d03a      	beq.n	800b12c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	699b      	ldr	r3, [r3, #24]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d019      	beq.n	800b0f2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b0be:	4b17      	ldr	r3, [pc, #92]	; (800b11c <HAL_RCC_OscConfig+0x274>)
 800b0c0:	2201      	movs	r2, #1
 800b0c2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b0c4:	f7fd feac 	bl	8008e20 <HAL_GetTick>
 800b0c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b0ca:	e008      	b.n	800b0de <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b0cc:	f7fd fea8 	bl	8008e20 <HAL_GetTick>
 800b0d0:	4602      	mov	r2, r0
 800b0d2:	693b      	ldr	r3, [r7, #16]
 800b0d4:	1ad3      	subs	r3, r2, r3
 800b0d6:	2b02      	cmp	r3, #2
 800b0d8:	d901      	bls.n	800b0de <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800b0da:	2303      	movs	r3, #3
 800b0dc:	e160      	b.n	800b3a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b0de:	4b0d      	ldr	r3, [pc, #52]	; (800b114 <HAL_RCC_OscConfig+0x26c>)
 800b0e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0e2:	f003 0302 	and.w	r3, r3, #2
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d0f0      	beq.n	800b0cc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800b0ea:	2001      	movs	r0, #1
 800b0ec:	f000 face 	bl	800b68c <RCC_Delay>
 800b0f0:	e01c      	b.n	800b12c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b0f2:	4b0a      	ldr	r3, [pc, #40]	; (800b11c <HAL_RCC_OscConfig+0x274>)
 800b0f4:	2200      	movs	r2, #0
 800b0f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b0f8:	f7fd fe92 	bl	8008e20 <HAL_GetTick>
 800b0fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b0fe:	e00f      	b.n	800b120 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b100:	f7fd fe8e 	bl	8008e20 <HAL_GetTick>
 800b104:	4602      	mov	r2, r0
 800b106:	693b      	ldr	r3, [r7, #16]
 800b108:	1ad3      	subs	r3, r2, r3
 800b10a:	2b02      	cmp	r3, #2
 800b10c:	d908      	bls.n	800b120 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800b10e:	2303      	movs	r3, #3
 800b110:	e146      	b.n	800b3a0 <HAL_RCC_OscConfig+0x4f8>
 800b112:	bf00      	nop
 800b114:	40021000 	.word	0x40021000
 800b118:	42420000 	.word	0x42420000
 800b11c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b120:	4b92      	ldr	r3, [pc, #584]	; (800b36c <HAL_RCC_OscConfig+0x4c4>)
 800b122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b124:	f003 0302 	and.w	r3, r3, #2
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d1e9      	bne.n	800b100 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	f003 0304 	and.w	r3, r3, #4
 800b134:	2b00      	cmp	r3, #0
 800b136:	f000 80a6 	beq.w	800b286 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b13a:	2300      	movs	r3, #0
 800b13c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b13e:	4b8b      	ldr	r3, [pc, #556]	; (800b36c <HAL_RCC_OscConfig+0x4c4>)
 800b140:	69db      	ldr	r3, [r3, #28]
 800b142:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b146:	2b00      	cmp	r3, #0
 800b148:	d10d      	bne.n	800b166 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b14a:	4b88      	ldr	r3, [pc, #544]	; (800b36c <HAL_RCC_OscConfig+0x4c4>)
 800b14c:	69db      	ldr	r3, [r3, #28]
 800b14e:	4a87      	ldr	r2, [pc, #540]	; (800b36c <HAL_RCC_OscConfig+0x4c4>)
 800b150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b154:	61d3      	str	r3, [r2, #28]
 800b156:	4b85      	ldr	r3, [pc, #532]	; (800b36c <HAL_RCC_OscConfig+0x4c4>)
 800b158:	69db      	ldr	r3, [r3, #28]
 800b15a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b15e:	60bb      	str	r3, [r7, #8]
 800b160:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b162:	2301      	movs	r3, #1
 800b164:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b166:	4b82      	ldr	r3, [pc, #520]	; (800b370 <HAL_RCC_OscConfig+0x4c8>)
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b16e:	2b00      	cmp	r3, #0
 800b170:	d118      	bne.n	800b1a4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b172:	4b7f      	ldr	r3, [pc, #508]	; (800b370 <HAL_RCC_OscConfig+0x4c8>)
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	4a7e      	ldr	r2, [pc, #504]	; (800b370 <HAL_RCC_OscConfig+0x4c8>)
 800b178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b17c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b17e:	f7fd fe4f 	bl	8008e20 <HAL_GetTick>
 800b182:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b184:	e008      	b.n	800b198 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b186:	f7fd fe4b 	bl	8008e20 <HAL_GetTick>
 800b18a:	4602      	mov	r2, r0
 800b18c:	693b      	ldr	r3, [r7, #16]
 800b18e:	1ad3      	subs	r3, r2, r3
 800b190:	2b64      	cmp	r3, #100	; 0x64
 800b192:	d901      	bls.n	800b198 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800b194:	2303      	movs	r3, #3
 800b196:	e103      	b.n	800b3a0 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b198:	4b75      	ldr	r3, [pc, #468]	; (800b370 <HAL_RCC_OscConfig+0x4c8>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d0f0      	beq.n	800b186 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	68db      	ldr	r3, [r3, #12]
 800b1a8:	2b01      	cmp	r3, #1
 800b1aa:	d106      	bne.n	800b1ba <HAL_RCC_OscConfig+0x312>
 800b1ac:	4b6f      	ldr	r3, [pc, #444]	; (800b36c <HAL_RCC_OscConfig+0x4c4>)
 800b1ae:	6a1b      	ldr	r3, [r3, #32]
 800b1b0:	4a6e      	ldr	r2, [pc, #440]	; (800b36c <HAL_RCC_OscConfig+0x4c4>)
 800b1b2:	f043 0301 	orr.w	r3, r3, #1
 800b1b6:	6213      	str	r3, [r2, #32]
 800b1b8:	e02d      	b.n	800b216 <HAL_RCC_OscConfig+0x36e>
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	68db      	ldr	r3, [r3, #12]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d10c      	bne.n	800b1dc <HAL_RCC_OscConfig+0x334>
 800b1c2:	4b6a      	ldr	r3, [pc, #424]	; (800b36c <HAL_RCC_OscConfig+0x4c4>)
 800b1c4:	6a1b      	ldr	r3, [r3, #32]
 800b1c6:	4a69      	ldr	r2, [pc, #420]	; (800b36c <HAL_RCC_OscConfig+0x4c4>)
 800b1c8:	f023 0301 	bic.w	r3, r3, #1
 800b1cc:	6213      	str	r3, [r2, #32]
 800b1ce:	4b67      	ldr	r3, [pc, #412]	; (800b36c <HAL_RCC_OscConfig+0x4c4>)
 800b1d0:	6a1b      	ldr	r3, [r3, #32]
 800b1d2:	4a66      	ldr	r2, [pc, #408]	; (800b36c <HAL_RCC_OscConfig+0x4c4>)
 800b1d4:	f023 0304 	bic.w	r3, r3, #4
 800b1d8:	6213      	str	r3, [r2, #32]
 800b1da:	e01c      	b.n	800b216 <HAL_RCC_OscConfig+0x36e>
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	68db      	ldr	r3, [r3, #12]
 800b1e0:	2b05      	cmp	r3, #5
 800b1e2:	d10c      	bne.n	800b1fe <HAL_RCC_OscConfig+0x356>
 800b1e4:	4b61      	ldr	r3, [pc, #388]	; (800b36c <HAL_RCC_OscConfig+0x4c4>)
 800b1e6:	6a1b      	ldr	r3, [r3, #32]
 800b1e8:	4a60      	ldr	r2, [pc, #384]	; (800b36c <HAL_RCC_OscConfig+0x4c4>)
 800b1ea:	f043 0304 	orr.w	r3, r3, #4
 800b1ee:	6213      	str	r3, [r2, #32]
 800b1f0:	4b5e      	ldr	r3, [pc, #376]	; (800b36c <HAL_RCC_OscConfig+0x4c4>)
 800b1f2:	6a1b      	ldr	r3, [r3, #32]
 800b1f4:	4a5d      	ldr	r2, [pc, #372]	; (800b36c <HAL_RCC_OscConfig+0x4c4>)
 800b1f6:	f043 0301 	orr.w	r3, r3, #1
 800b1fa:	6213      	str	r3, [r2, #32]
 800b1fc:	e00b      	b.n	800b216 <HAL_RCC_OscConfig+0x36e>
 800b1fe:	4b5b      	ldr	r3, [pc, #364]	; (800b36c <HAL_RCC_OscConfig+0x4c4>)
 800b200:	6a1b      	ldr	r3, [r3, #32]
 800b202:	4a5a      	ldr	r2, [pc, #360]	; (800b36c <HAL_RCC_OscConfig+0x4c4>)
 800b204:	f023 0301 	bic.w	r3, r3, #1
 800b208:	6213      	str	r3, [r2, #32]
 800b20a:	4b58      	ldr	r3, [pc, #352]	; (800b36c <HAL_RCC_OscConfig+0x4c4>)
 800b20c:	6a1b      	ldr	r3, [r3, #32]
 800b20e:	4a57      	ldr	r2, [pc, #348]	; (800b36c <HAL_RCC_OscConfig+0x4c4>)
 800b210:	f023 0304 	bic.w	r3, r3, #4
 800b214:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	68db      	ldr	r3, [r3, #12]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d015      	beq.n	800b24a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b21e:	f7fd fdff 	bl	8008e20 <HAL_GetTick>
 800b222:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b224:	e00a      	b.n	800b23c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b226:	f7fd fdfb 	bl	8008e20 <HAL_GetTick>
 800b22a:	4602      	mov	r2, r0
 800b22c:	693b      	ldr	r3, [r7, #16]
 800b22e:	1ad3      	subs	r3, r2, r3
 800b230:	f241 3288 	movw	r2, #5000	; 0x1388
 800b234:	4293      	cmp	r3, r2
 800b236:	d901      	bls.n	800b23c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800b238:	2303      	movs	r3, #3
 800b23a:	e0b1      	b.n	800b3a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b23c:	4b4b      	ldr	r3, [pc, #300]	; (800b36c <HAL_RCC_OscConfig+0x4c4>)
 800b23e:	6a1b      	ldr	r3, [r3, #32]
 800b240:	f003 0302 	and.w	r3, r3, #2
 800b244:	2b00      	cmp	r3, #0
 800b246:	d0ee      	beq.n	800b226 <HAL_RCC_OscConfig+0x37e>
 800b248:	e014      	b.n	800b274 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b24a:	f7fd fde9 	bl	8008e20 <HAL_GetTick>
 800b24e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b250:	e00a      	b.n	800b268 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b252:	f7fd fde5 	bl	8008e20 <HAL_GetTick>
 800b256:	4602      	mov	r2, r0
 800b258:	693b      	ldr	r3, [r7, #16]
 800b25a:	1ad3      	subs	r3, r2, r3
 800b25c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b260:	4293      	cmp	r3, r2
 800b262:	d901      	bls.n	800b268 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800b264:	2303      	movs	r3, #3
 800b266:	e09b      	b.n	800b3a0 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b268:	4b40      	ldr	r3, [pc, #256]	; (800b36c <HAL_RCC_OscConfig+0x4c4>)
 800b26a:	6a1b      	ldr	r3, [r3, #32]
 800b26c:	f003 0302 	and.w	r3, r3, #2
 800b270:	2b00      	cmp	r3, #0
 800b272:	d1ee      	bne.n	800b252 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800b274:	7dfb      	ldrb	r3, [r7, #23]
 800b276:	2b01      	cmp	r3, #1
 800b278:	d105      	bne.n	800b286 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b27a:	4b3c      	ldr	r3, [pc, #240]	; (800b36c <HAL_RCC_OscConfig+0x4c4>)
 800b27c:	69db      	ldr	r3, [r3, #28]
 800b27e:	4a3b      	ldr	r2, [pc, #236]	; (800b36c <HAL_RCC_OscConfig+0x4c4>)
 800b280:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b284:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	69db      	ldr	r3, [r3, #28]
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	f000 8087 	beq.w	800b39e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b290:	4b36      	ldr	r3, [pc, #216]	; (800b36c <HAL_RCC_OscConfig+0x4c4>)
 800b292:	685b      	ldr	r3, [r3, #4]
 800b294:	f003 030c 	and.w	r3, r3, #12
 800b298:	2b08      	cmp	r3, #8
 800b29a:	d061      	beq.n	800b360 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	69db      	ldr	r3, [r3, #28]
 800b2a0:	2b02      	cmp	r3, #2
 800b2a2:	d146      	bne.n	800b332 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b2a4:	4b33      	ldr	r3, [pc, #204]	; (800b374 <HAL_RCC_OscConfig+0x4cc>)
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b2aa:	f7fd fdb9 	bl	8008e20 <HAL_GetTick>
 800b2ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b2b0:	e008      	b.n	800b2c4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b2b2:	f7fd fdb5 	bl	8008e20 <HAL_GetTick>
 800b2b6:	4602      	mov	r2, r0
 800b2b8:	693b      	ldr	r3, [r7, #16]
 800b2ba:	1ad3      	subs	r3, r2, r3
 800b2bc:	2b02      	cmp	r3, #2
 800b2be:	d901      	bls.n	800b2c4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800b2c0:	2303      	movs	r3, #3
 800b2c2:	e06d      	b.n	800b3a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b2c4:	4b29      	ldr	r3, [pc, #164]	; (800b36c <HAL_RCC_OscConfig+0x4c4>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d1f0      	bne.n	800b2b2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	6a1b      	ldr	r3, [r3, #32]
 800b2d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b2d8:	d108      	bne.n	800b2ec <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800b2da:	4b24      	ldr	r3, [pc, #144]	; (800b36c <HAL_RCC_OscConfig+0x4c4>)
 800b2dc:	685b      	ldr	r3, [r3, #4]
 800b2de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	689b      	ldr	r3, [r3, #8]
 800b2e6:	4921      	ldr	r1, [pc, #132]	; (800b36c <HAL_RCC_OscConfig+0x4c4>)
 800b2e8:	4313      	orrs	r3, r2
 800b2ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b2ec:	4b1f      	ldr	r3, [pc, #124]	; (800b36c <HAL_RCC_OscConfig+0x4c4>)
 800b2ee:	685b      	ldr	r3, [r3, #4]
 800b2f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	6a19      	ldr	r1, [r3, #32]
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2fc:	430b      	orrs	r3, r1
 800b2fe:	491b      	ldr	r1, [pc, #108]	; (800b36c <HAL_RCC_OscConfig+0x4c4>)
 800b300:	4313      	orrs	r3, r2
 800b302:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b304:	4b1b      	ldr	r3, [pc, #108]	; (800b374 <HAL_RCC_OscConfig+0x4cc>)
 800b306:	2201      	movs	r2, #1
 800b308:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b30a:	f7fd fd89 	bl	8008e20 <HAL_GetTick>
 800b30e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b310:	e008      	b.n	800b324 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b312:	f7fd fd85 	bl	8008e20 <HAL_GetTick>
 800b316:	4602      	mov	r2, r0
 800b318:	693b      	ldr	r3, [r7, #16]
 800b31a:	1ad3      	subs	r3, r2, r3
 800b31c:	2b02      	cmp	r3, #2
 800b31e:	d901      	bls.n	800b324 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800b320:	2303      	movs	r3, #3
 800b322:	e03d      	b.n	800b3a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b324:	4b11      	ldr	r3, [pc, #68]	; (800b36c <HAL_RCC_OscConfig+0x4c4>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d0f0      	beq.n	800b312 <HAL_RCC_OscConfig+0x46a>
 800b330:	e035      	b.n	800b39e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b332:	4b10      	ldr	r3, [pc, #64]	; (800b374 <HAL_RCC_OscConfig+0x4cc>)
 800b334:	2200      	movs	r2, #0
 800b336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b338:	f7fd fd72 	bl	8008e20 <HAL_GetTick>
 800b33c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b33e:	e008      	b.n	800b352 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b340:	f7fd fd6e 	bl	8008e20 <HAL_GetTick>
 800b344:	4602      	mov	r2, r0
 800b346:	693b      	ldr	r3, [r7, #16]
 800b348:	1ad3      	subs	r3, r2, r3
 800b34a:	2b02      	cmp	r3, #2
 800b34c:	d901      	bls.n	800b352 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800b34e:	2303      	movs	r3, #3
 800b350:	e026      	b.n	800b3a0 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b352:	4b06      	ldr	r3, [pc, #24]	; (800b36c <HAL_RCC_OscConfig+0x4c4>)
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b35a:	2b00      	cmp	r3, #0
 800b35c:	d1f0      	bne.n	800b340 <HAL_RCC_OscConfig+0x498>
 800b35e:	e01e      	b.n	800b39e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	69db      	ldr	r3, [r3, #28]
 800b364:	2b01      	cmp	r3, #1
 800b366:	d107      	bne.n	800b378 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800b368:	2301      	movs	r3, #1
 800b36a:	e019      	b.n	800b3a0 <HAL_RCC_OscConfig+0x4f8>
 800b36c:	40021000 	.word	0x40021000
 800b370:	40007000 	.word	0x40007000
 800b374:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800b378:	4b0b      	ldr	r3, [pc, #44]	; (800b3a8 <HAL_RCC_OscConfig+0x500>)
 800b37a:	685b      	ldr	r3, [r3, #4]
 800b37c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	6a1b      	ldr	r3, [r3, #32]
 800b388:	429a      	cmp	r2, r3
 800b38a:	d106      	bne.n	800b39a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b396:	429a      	cmp	r2, r3
 800b398:	d001      	beq.n	800b39e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800b39a:	2301      	movs	r3, #1
 800b39c:	e000      	b.n	800b3a0 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800b39e:	2300      	movs	r3, #0
}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	3718      	adds	r7, #24
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}
 800b3a8:	40021000 	.word	0x40021000

0800b3ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b084      	sub	sp, #16
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
 800b3b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d101      	bne.n	800b3c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b3bc:	2301      	movs	r3, #1
 800b3be:	e0d0      	b.n	800b562 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b3c0:	4b6a      	ldr	r3, [pc, #424]	; (800b56c <HAL_RCC_ClockConfig+0x1c0>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	f003 0307 	and.w	r3, r3, #7
 800b3c8:	683a      	ldr	r2, [r7, #0]
 800b3ca:	429a      	cmp	r2, r3
 800b3cc:	d910      	bls.n	800b3f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b3ce:	4b67      	ldr	r3, [pc, #412]	; (800b56c <HAL_RCC_ClockConfig+0x1c0>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	f023 0207 	bic.w	r2, r3, #7
 800b3d6:	4965      	ldr	r1, [pc, #404]	; (800b56c <HAL_RCC_ClockConfig+0x1c0>)
 800b3d8:	683b      	ldr	r3, [r7, #0]
 800b3da:	4313      	orrs	r3, r2
 800b3dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b3de:	4b63      	ldr	r3, [pc, #396]	; (800b56c <HAL_RCC_ClockConfig+0x1c0>)
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	f003 0307 	and.w	r3, r3, #7
 800b3e6:	683a      	ldr	r2, [r7, #0]
 800b3e8:	429a      	cmp	r2, r3
 800b3ea:	d001      	beq.n	800b3f0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800b3ec:	2301      	movs	r3, #1
 800b3ee:	e0b8      	b.n	800b562 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	681b      	ldr	r3, [r3, #0]
 800b3f4:	f003 0302 	and.w	r3, r3, #2
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d020      	beq.n	800b43e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f003 0304 	and.w	r3, r3, #4
 800b404:	2b00      	cmp	r3, #0
 800b406:	d005      	beq.n	800b414 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b408:	4b59      	ldr	r3, [pc, #356]	; (800b570 <HAL_RCC_ClockConfig+0x1c4>)
 800b40a:	685b      	ldr	r3, [r3, #4]
 800b40c:	4a58      	ldr	r2, [pc, #352]	; (800b570 <HAL_RCC_ClockConfig+0x1c4>)
 800b40e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b412:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	f003 0308 	and.w	r3, r3, #8
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d005      	beq.n	800b42c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b420:	4b53      	ldr	r3, [pc, #332]	; (800b570 <HAL_RCC_ClockConfig+0x1c4>)
 800b422:	685b      	ldr	r3, [r3, #4]
 800b424:	4a52      	ldr	r2, [pc, #328]	; (800b570 <HAL_RCC_ClockConfig+0x1c4>)
 800b426:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800b42a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b42c:	4b50      	ldr	r3, [pc, #320]	; (800b570 <HAL_RCC_ClockConfig+0x1c4>)
 800b42e:	685b      	ldr	r3, [r3, #4]
 800b430:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	689b      	ldr	r3, [r3, #8]
 800b438:	494d      	ldr	r1, [pc, #308]	; (800b570 <HAL_RCC_ClockConfig+0x1c4>)
 800b43a:	4313      	orrs	r3, r2
 800b43c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	f003 0301 	and.w	r3, r3, #1
 800b446:	2b00      	cmp	r3, #0
 800b448:	d040      	beq.n	800b4cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	685b      	ldr	r3, [r3, #4]
 800b44e:	2b01      	cmp	r3, #1
 800b450:	d107      	bne.n	800b462 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b452:	4b47      	ldr	r3, [pc, #284]	; (800b570 <HAL_RCC_ClockConfig+0x1c4>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d115      	bne.n	800b48a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b45e:	2301      	movs	r3, #1
 800b460:	e07f      	b.n	800b562 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	685b      	ldr	r3, [r3, #4]
 800b466:	2b02      	cmp	r3, #2
 800b468:	d107      	bne.n	800b47a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b46a:	4b41      	ldr	r3, [pc, #260]	; (800b570 <HAL_RCC_ClockConfig+0x1c4>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b472:	2b00      	cmp	r3, #0
 800b474:	d109      	bne.n	800b48a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b476:	2301      	movs	r3, #1
 800b478:	e073      	b.n	800b562 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b47a:	4b3d      	ldr	r3, [pc, #244]	; (800b570 <HAL_RCC_ClockConfig+0x1c4>)
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	f003 0302 	and.w	r3, r3, #2
 800b482:	2b00      	cmp	r3, #0
 800b484:	d101      	bne.n	800b48a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b486:	2301      	movs	r3, #1
 800b488:	e06b      	b.n	800b562 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b48a:	4b39      	ldr	r3, [pc, #228]	; (800b570 <HAL_RCC_ClockConfig+0x1c4>)
 800b48c:	685b      	ldr	r3, [r3, #4]
 800b48e:	f023 0203 	bic.w	r2, r3, #3
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	685b      	ldr	r3, [r3, #4]
 800b496:	4936      	ldr	r1, [pc, #216]	; (800b570 <HAL_RCC_ClockConfig+0x1c4>)
 800b498:	4313      	orrs	r3, r2
 800b49a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b49c:	f7fd fcc0 	bl	8008e20 <HAL_GetTick>
 800b4a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b4a2:	e00a      	b.n	800b4ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b4a4:	f7fd fcbc 	bl	8008e20 <HAL_GetTick>
 800b4a8:	4602      	mov	r2, r0
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	1ad3      	subs	r3, r2, r3
 800b4ae:	f241 3288 	movw	r2, #5000	; 0x1388
 800b4b2:	4293      	cmp	r3, r2
 800b4b4:	d901      	bls.n	800b4ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b4b6:	2303      	movs	r3, #3
 800b4b8:	e053      	b.n	800b562 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b4ba:	4b2d      	ldr	r3, [pc, #180]	; (800b570 <HAL_RCC_ClockConfig+0x1c4>)
 800b4bc:	685b      	ldr	r3, [r3, #4]
 800b4be:	f003 020c 	and.w	r2, r3, #12
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	685b      	ldr	r3, [r3, #4]
 800b4c6:	009b      	lsls	r3, r3, #2
 800b4c8:	429a      	cmp	r2, r3
 800b4ca:	d1eb      	bne.n	800b4a4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b4cc:	4b27      	ldr	r3, [pc, #156]	; (800b56c <HAL_RCC_ClockConfig+0x1c0>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f003 0307 	and.w	r3, r3, #7
 800b4d4:	683a      	ldr	r2, [r7, #0]
 800b4d6:	429a      	cmp	r2, r3
 800b4d8:	d210      	bcs.n	800b4fc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b4da:	4b24      	ldr	r3, [pc, #144]	; (800b56c <HAL_RCC_ClockConfig+0x1c0>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	f023 0207 	bic.w	r2, r3, #7
 800b4e2:	4922      	ldr	r1, [pc, #136]	; (800b56c <HAL_RCC_ClockConfig+0x1c0>)
 800b4e4:	683b      	ldr	r3, [r7, #0]
 800b4e6:	4313      	orrs	r3, r2
 800b4e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b4ea:	4b20      	ldr	r3, [pc, #128]	; (800b56c <HAL_RCC_ClockConfig+0x1c0>)
 800b4ec:	681b      	ldr	r3, [r3, #0]
 800b4ee:	f003 0307 	and.w	r3, r3, #7
 800b4f2:	683a      	ldr	r2, [r7, #0]
 800b4f4:	429a      	cmp	r2, r3
 800b4f6:	d001      	beq.n	800b4fc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	e032      	b.n	800b562 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	f003 0304 	and.w	r3, r3, #4
 800b504:	2b00      	cmp	r3, #0
 800b506:	d008      	beq.n	800b51a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b508:	4b19      	ldr	r3, [pc, #100]	; (800b570 <HAL_RCC_ClockConfig+0x1c4>)
 800b50a:	685b      	ldr	r3, [r3, #4]
 800b50c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	68db      	ldr	r3, [r3, #12]
 800b514:	4916      	ldr	r1, [pc, #88]	; (800b570 <HAL_RCC_ClockConfig+0x1c4>)
 800b516:	4313      	orrs	r3, r2
 800b518:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f003 0308 	and.w	r3, r3, #8
 800b522:	2b00      	cmp	r3, #0
 800b524:	d009      	beq.n	800b53a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b526:	4b12      	ldr	r3, [pc, #72]	; (800b570 <HAL_RCC_ClockConfig+0x1c4>)
 800b528:	685b      	ldr	r3, [r3, #4]
 800b52a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	691b      	ldr	r3, [r3, #16]
 800b532:	00db      	lsls	r3, r3, #3
 800b534:	490e      	ldr	r1, [pc, #56]	; (800b570 <HAL_RCC_ClockConfig+0x1c4>)
 800b536:	4313      	orrs	r3, r2
 800b538:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b53a:	f000 f821 	bl	800b580 <HAL_RCC_GetSysClockFreq>
 800b53e:	4602      	mov	r2, r0
 800b540:	4b0b      	ldr	r3, [pc, #44]	; (800b570 <HAL_RCC_ClockConfig+0x1c4>)
 800b542:	685b      	ldr	r3, [r3, #4]
 800b544:	091b      	lsrs	r3, r3, #4
 800b546:	f003 030f 	and.w	r3, r3, #15
 800b54a:	490a      	ldr	r1, [pc, #40]	; (800b574 <HAL_RCC_ClockConfig+0x1c8>)
 800b54c:	5ccb      	ldrb	r3, [r1, r3]
 800b54e:	fa22 f303 	lsr.w	r3, r2, r3
 800b552:	4a09      	ldr	r2, [pc, #36]	; (800b578 <HAL_RCC_ClockConfig+0x1cc>)
 800b554:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b556:	4b09      	ldr	r3, [pc, #36]	; (800b57c <HAL_RCC_ClockConfig+0x1d0>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	4618      	mov	r0, r3
 800b55c:	f7fd fc1e 	bl	8008d9c <HAL_InitTick>

  return HAL_OK;
 800b560:	2300      	movs	r3, #0
}
 800b562:	4618      	mov	r0, r3
 800b564:	3710      	adds	r7, #16
 800b566:	46bd      	mov	sp, r7
 800b568:	bd80      	pop	{r7, pc}
 800b56a:	bf00      	nop
 800b56c:	40022000 	.word	0x40022000
 800b570:	40021000 	.word	0x40021000
 800b574:	0800d9d4 	.word	0x0800d9d4
 800b578:	200009b8 	.word	0x200009b8
 800b57c:	200009bc 	.word	0x200009bc

0800b580 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b580:	b480      	push	{r7}
 800b582:	b087      	sub	sp, #28
 800b584:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800b586:	2300      	movs	r3, #0
 800b588:	60fb      	str	r3, [r7, #12]
 800b58a:	2300      	movs	r3, #0
 800b58c:	60bb      	str	r3, [r7, #8]
 800b58e:	2300      	movs	r3, #0
 800b590:	617b      	str	r3, [r7, #20]
 800b592:	2300      	movs	r3, #0
 800b594:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800b596:	2300      	movs	r3, #0
 800b598:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800b59a:	4b1e      	ldr	r3, [pc, #120]	; (800b614 <HAL_RCC_GetSysClockFreq+0x94>)
 800b59c:	685b      	ldr	r3, [r3, #4]
 800b59e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	f003 030c 	and.w	r3, r3, #12
 800b5a6:	2b04      	cmp	r3, #4
 800b5a8:	d002      	beq.n	800b5b0 <HAL_RCC_GetSysClockFreq+0x30>
 800b5aa:	2b08      	cmp	r3, #8
 800b5ac:	d003      	beq.n	800b5b6 <HAL_RCC_GetSysClockFreq+0x36>
 800b5ae:	e027      	b.n	800b600 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800b5b0:	4b19      	ldr	r3, [pc, #100]	; (800b618 <HAL_RCC_GetSysClockFreq+0x98>)
 800b5b2:	613b      	str	r3, [r7, #16]
      break;
 800b5b4:	e027      	b.n	800b606 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	0c9b      	lsrs	r3, r3, #18
 800b5ba:	f003 030f 	and.w	r3, r3, #15
 800b5be:	4a17      	ldr	r2, [pc, #92]	; (800b61c <HAL_RCC_GetSysClockFreq+0x9c>)
 800b5c0:	5cd3      	ldrb	r3, [r2, r3]
 800b5c2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d010      	beq.n	800b5f0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800b5ce:	4b11      	ldr	r3, [pc, #68]	; (800b614 <HAL_RCC_GetSysClockFreq+0x94>)
 800b5d0:	685b      	ldr	r3, [r3, #4]
 800b5d2:	0c5b      	lsrs	r3, r3, #17
 800b5d4:	f003 0301 	and.w	r3, r3, #1
 800b5d8:	4a11      	ldr	r2, [pc, #68]	; (800b620 <HAL_RCC_GetSysClockFreq+0xa0>)
 800b5da:	5cd3      	ldrb	r3, [r2, r3]
 800b5dc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	4a0d      	ldr	r2, [pc, #52]	; (800b618 <HAL_RCC_GetSysClockFreq+0x98>)
 800b5e2:	fb03 f202 	mul.w	r2, r3, r2
 800b5e6:	68bb      	ldr	r3, [r7, #8]
 800b5e8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5ec:	617b      	str	r3, [r7, #20]
 800b5ee:	e004      	b.n	800b5fa <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	4a0c      	ldr	r2, [pc, #48]	; (800b624 <HAL_RCC_GetSysClockFreq+0xa4>)
 800b5f4:	fb02 f303 	mul.w	r3, r2, r3
 800b5f8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800b5fa:	697b      	ldr	r3, [r7, #20]
 800b5fc:	613b      	str	r3, [r7, #16]
      break;
 800b5fe:	e002      	b.n	800b606 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800b600:	4b05      	ldr	r3, [pc, #20]	; (800b618 <HAL_RCC_GetSysClockFreq+0x98>)
 800b602:	613b      	str	r3, [r7, #16]
      break;
 800b604:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b606:	693b      	ldr	r3, [r7, #16]
}
 800b608:	4618      	mov	r0, r3
 800b60a:	371c      	adds	r7, #28
 800b60c:	46bd      	mov	sp, r7
 800b60e:	bc80      	pop	{r7}
 800b610:	4770      	bx	lr
 800b612:	bf00      	nop
 800b614:	40021000 	.word	0x40021000
 800b618:	007a1200 	.word	0x007a1200
 800b61c:	0800d9ec 	.word	0x0800d9ec
 800b620:	0800d9fc 	.word	0x0800d9fc
 800b624:	003d0900 	.word	0x003d0900

0800b628 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b628:	b480      	push	{r7}
 800b62a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b62c:	4b02      	ldr	r3, [pc, #8]	; (800b638 <HAL_RCC_GetHCLKFreq+0x10>)
 800b62e:	681b      	ldr	r3, [r3, #0]
}
 800b630:	4618      	mov	r0, r3
 800b632:	46bd      	mov	sp, r7
 800b634:	bc80      	pop	{r7}
 800b636:	4770      	bx	lr
 800b638:	200009b8 	.word	0x200009b8

0800b63c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b63c:	b580      	push	{r7, lr}
 800b63e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b640:	f7ff fff2 	bl	800b628 <HAL_RCC_GetHCLKFreq>
 800b644:	4602      	mov	r2, r0
 800b646:	4b05      	ldr	r3, [pc, #20]	; (800b65c <HAL_RCC_GetPCLK1Freq+0x20>)
 800b648:	685b      	ldr	r3, [r3, #4]
 800b64a:	0a1b      	lsrs	r3, r3, #8
 800b64c:	f003 0307 	and.w	r3, r3, #7
 800b650:	4903      	ldr	r1, [pc, #12]	; (800b660 <HAL_RCC_GetPCLK1Freq+0x24>)
 800b652:	5ccb      	ldrb	r3, [r1, r3]
 800b654:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b658:	4618      	mov	r0, r3
 800b65a:	bd80      	pop	{r7, pc}
 800b65c:	40021000 	.word	0x40021000
 800b660:	0800d9e4 	.word	0x0800d9e4

0800b664 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b664:	b580      	push	{r7, lr}
 800b666:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b668:	f7ff ffde 	bl	800b628 <HAL_RCC_GetHCLKFreq>
 800b66c:	4602      	mov	r2, r0
 800b66e:	4b05      	ldr	r3, [pc, #20]	; (800b684 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b670:	685b      	ldr	r3, [r3, #4]
 800b672:	0adb      	lsrs	r3, r3, #11
 800b674:	f003 0307 	and.w	r3, r3, #7
 800b678:	4903      	ldr	r1, [pc, #12]	; (800b688 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b67a:	5ccb      	ldrb	r3, [r1, r3]
 800b67c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b680:	4618      	mov	r0, r3
 800b682:	bd80      	pop	{r7, pc}
 800b684:	40021000 	.word	0x40021000
 800b688:	0800d9e4 	.word	0x0800d9e4

0800b68c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800b68c:	b480      	push	{r7}
 800b68e:	b085      	sub	sp, #20
 800b690:	af00      	add	r7, sp, #0
 800b692:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800b694:	4b0a      	ldr	r3, [pc, #40]	; (800b6c0 <RCC_Delay+0x34>)
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	4a0a      	ldr	r2, [pc, #40]	; (800b6c4 <RCC_Delay+0x38>)
 800b69a:	fba2 2303 	umull	r2, r3, r2, r3
 800b69e:	0a5b      	lsrs	r3, r3, #9
 800b6a0:	687a      	ldr	r2, [r7, #4]
 800b6a2:	fb02 f303 	mul.w	r3, r2, r3
 800b6a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800b6a8:	bf00      	nop
  }
  while (Delay --);
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	1e5a      	subs	r2, r3, #1
 800b6ae:	60fa      	str	r2, [r7, #12]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d1f9      	bne.n	800b6a8 <RCC_Delay+0x1c>
}
 800b6b4:	bf00      	nop
 800b6b6:	bf00      	nop
 800b6b8:	3714      	adds	r7, #20
 800b6ba:	46bd      	mov	sp, r7
 800b6bc:	bc80      	pop	{r7}
 800b6be:	4770      	bx	lr
 800b6c0:	200009b8 	.word	0x200009b8
 800b6c4:	10624dd3 	.word	0x10624dd3

0800b6c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b082      	sub	sp, #8
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d101      	bne.n	800b6da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b6d6:	2301      	movs	r3, #1
 800b6d8:	e041      	b.n	800b75e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b6e0:	b2db      	uxtb	r3, r3
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d106      	bne.n	800b6f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f7fd fa26 	bl	8008b40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2202      	movs	r2, #2
 800b6f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	681a      	ldr	r2, [r3, #0]
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	3304      	adds	r3, #4
 800b704:	4619      	mov	r1, r3
 800b706:	4610      	mov	r0, r2
 800b708:	f000 fa82 	bl	800bc10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2201      	movs	r2, #1
 800b710:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b714:	687b      	ldr	r3, [r7, #4]
 800b716:	2201      	movs	r2, #1
 800b718:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2201      	movs	r2, #1
 800b720:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	2201      	movs	r2, #1
 800b728:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	2201      	movs	r2, #1
 800b730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	2201      	movs	r2, #1
 800b738:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2201      	movs	r2, #1
 800b740:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2201      	movs	r2, #1
 800b748:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2201      	movs	r2, #1
 800b750:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2201      	movs	r2, #1
 800b758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b75c:	2300      	movs	r3, #0
}
 800b75e:	4618      	mov	r0, r3
 800b760:	3708      	adds	r7, #8
 800b762:	46bd      	mov	sp, r7
 800b764:	bd80      	pop	{r7, pc}
	...

0800b768 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b768:	b480      	push	{r7}
 800b76a:	b085      	sub	sp, #20
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b776:	b2db      	uxtb	r3, r3
 800b778:	2b01      	cmp	r3, #1
 800b77a:	d001      	beq.n	800b780 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b77c:	2301      	movs	r3, #1
 800b77e:	e044      	b.n	800b80a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2202      	movs	r2, #2
 800b784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	68da      	ldr	r2, [r3, #12]
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	f042 0201 	orr.w	r2, r2, #1
 800b796:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	4a1d      	ldr	r2, [pc, #116]	; (800b814 <HAL_TIM_Base_Start_IT+0xac>)
 800b79e:	4293      	cmp	r3, r2
 800b7a0:	d018      	beq.n	800b7d4 <HAL_TIM_Base_Start_IT+0x6c>
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	4a1c      	ldr	r2, [pc, #112]	; (800b818 <HAL_TIM_Base_Start_IT+0xb0>)
 800b7a8:	4293      	cmp	r3, r2
 800b7aa:	d013      	beq.n	800b7d4 <HAL_TIM_Base_Start_IT+0x6c>
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b7b4:	d00e      	beq.n	800b7d4 <HAL_TIM_Base_Start_IT+0x6c>
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	4a18      	ldr	r2, [pc, #96]	; (800b81c <HAL_TIM_Base_Start_IT+0xb4>)
 800b7bc:	4293      	cmp	r3, r2
 800b7be:	d009      	beq.n	800b7d4 <HAL_TIM_Base_Start_IT+0x6c>
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	4a16      	ldr	r2, [pc, #88]	; (800b820 <HAL_TIM_Base_Start_IT+0xb8>)
 800b7c6:	4293      	cmp	r3, r2
 800b7c8:	d004      	beq.n	800b7d4 <HAL_TIM_Base_Start_IT+0x6c>
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	4a15      	ldr	r2, [pc, #84]	; (800b824 <HAL_TIM_Base_Start_IT+0xbc>)
 800b7d0:	4293      	cmp	r3, r2
 800b7d2:	d111      	bne.n	800b7f8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	689b      	ldr	r3, [r3, #8]
 800b7da:	f003 0307 	and.w	r3, r3, #7
 800b7de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	2b06      	cmp	r3, #6
 800b7e4:	d010      	beq.n	800b808 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	681a      	ldr	r2, [r3, #0]
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	f042 0201 	orr.w	r2, r2, #1
 800b7f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b7f6:	e007      	b.n	800b808 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	681a      	ldr	r2, [r3, #0]
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	f042 0201 	orr.w	r2, r2, #1
 800b806:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b808:	2300      	movs	r3, #0
}
 800b80a:	4618      	mov	r0, r3
 800b80c:	3714      	adds	r7, #20
 800b80e:	46bd      	mov	sp, r7
 800b810:	bc80      	pop	{r7}
 800b812:	4770      	bx	lr
 800b814:	40012c00 	.word	0x40012c00
 800b818:	40013400 	.word	0x40013400
 800b81c:	40000400 	.word	0x40000400
 800b820:	40000800 	.word	0x40000800
 800b824:	40000c00 	.word	0x40000c00

0800b828 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b828:	b580      	push	{r7, lr}
 800b82a:	b082      	sub	sp, #8
 800b82c:	af00      	add	r7, sp, #0
 800b82e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	691b      	ldr	r3, [r3, #16]
 800b836:	f003 0302 	and.w	r3, r3, #2
 800b83a:	2b02      	cmp	r3, #2
 800b83c:	d122      	bne.n	800b884 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	68db      	ldr	r3, [r3, #12]
 800b844:	f003 0302 	and.w	r3, r3, #2
 800b848:	2b02      	cmp	r3, #2
 800b84a:	d11b      	bne.n	800b884 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	681b      	ldr	r3, [r3, #0]
 800b850:	f06f 0202 	mvn.w	r2, #2
 800b854:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b856:	687b      	ldr	r3, [r7, #4]
 800b858:	2201      	movs	r2, #1
 800b85a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	699b      	ldr	r3, [r3, #24]
 800b862:	f003 0303 	and.w	r3, r3, #3
 800b866:	2b00      	cmp	r3, #0
 800b868:	d003      	beq.n	800b872 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b86a:	6878      	ldr	r0, [r7, #4]
 800b86c:	f000 f9b4 	bl	800bbd8 <HAL_TIM_IC_CaptureCallback>
 800b870:	e005      	b.n	800b87e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f000 f9a7 	bl	800bbc6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b878:	6878      	ldr	r0, [r7, #4]
 800b87a:	f000 f9b6 	bl	800bbea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	2200      	movs	r2, #0
 800b882:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	691b      	ldr	r3, [r3, #16]
 800b88a:	f003 0304 	and.w	r3, r3, #4
 800b88e:	2b04      	cmp	r3, #4
 800b890:	d122      	bne.n	800b8d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	68db      	ldr	r3, [r3, #12]
 800b898:	f003 0304 	and.w	r3, r3, #4
 800b89c:	2b04      	cmp	r3, #4
 800b89e:	d11b      	bne.n	800b8d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	f06f 0204 	mvn.w	r2, #4
 800b8a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2202      	movs	r2, #2
 800b8ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	699b      	ldr	r3, [r3, #24]
 800b8b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d003      	beq.n	800b8c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	f000 f98a 	bl	800bbd8 <HAL_TIM_IC_CaptureCallback>
 800b8c4:	e005      	b.n	800b8d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f000 f97d 	bl	800bbc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b8cc:	6878      	ldr	r0, [r7, #4]
 800b8ce:	f000 f98c 	bl	800bbea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	691b      	ldr	r3, [r3, #16]
 800b8de:	f003 0308 	and.w	r3, r3, #8
 800b8e2:	2b08      	cmp	r3, #8
 800b8e4:	d122      	bne.n	800b92c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	68db      	ldr	r3, [r3, #12]
 800b8ec:	f003 0308 	and.w	r3, r3, #8
 800b8f0:	2b08      	cmp	r3, #8
 800b8f2:	d11b      	bne.n	800b92c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	f06f 0208 	mvn.w	r2, #8
 800b8fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2204      	movs	r2, #4
 800b902:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	69db      	ldr	r3, [r3, #28]
 800b90a:	f003 0303 	and.w	r3, r3, #3
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d003      	beq.n	800b91a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b912:	6878      	ldr	r0, [r7, #4]
 800b914:	f000 f960 	bl	800bbd8 <HAL_TIM_IC_CaptureCallback>
 800b918:	e005      	b.n	800b926 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b91a:	6878      	ldr	r0, [r7, #4]
 800b91c:	f000 f953 	bl	800bbc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b920:	6878      	ldr	r0, [r7, #4]
 800b922:	f000 f962 	bl	800bbea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	2200      	movs	r2, #0
 800b92a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	691b      	ldr	r3, [r3, #16]
 800b932:	f003 0310 	and.w	r3, r3, #16
 800b936:	2b10      	cmp	r3, #16
 800b938:	d122      	bne.n	800b980 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	68db      	ldr	r3, [r3, #12]
 800b940:	f003 0310 	and.w	r3, r3, #16
 800b944:	2b10      	cmp	r3, #16
 800b946:	d11b      	bne.n	800b980 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	f06f 0210 	mvn.w	r2, #16
 800b950:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2208      	movs	r2, #8
 800b956:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	69db      	ldr	r3, [r3, #28]
 800b95e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b962:	2b00      	cmp	r3, #0
 800b964:	d003      	beq.n	800b96e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b966:	6878      	ldr	r0, [r7, #4]
 800b968:	f000 f936 	bl	800bbd8 <HAL_TIM_IC_CaptureCallback>
 800b96c:	e005      	b.n	800b97a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b96e:	6878      	ldr	r0, [r7, #4]
 800b970:	f000 f929 	bl	800bbc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b974:	6878      	ldr	r0, [r7, #4]
 800b976:	f000 f938 	bl	800bbea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2200      	movs	r2, #0
 800b97e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	691b      	ldr	r3, [r3, #16]
 800b986:	f003 0301 	and.w	r3, r3, #1
 800b98a:	2b01      	cmp	r3, #1
 800b98c:	d10e      	bne.n	800b9ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	68db      	ldr	r3, [r3, #12]
 800b994:	f003 0301 	and.w	r3, r3, #1
 800b998:	2b01      	cmp	r3, #1
 800b99a:	d107      	bne.n	800b9ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	f06f 0201 	mvn.w	r2, #1
 800b9a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b9a6:	6878      	ldr	r0, [r7, #4]
 800b9a8:	f7fc fd56 	bl	8008458 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	691b      	ldr	r3, [r3, #16]
 800b9b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9b6:	2b80      	cmp	r3, #128	; 0x80
 800b9b8:	d10e      	bne.n	800b9d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	68db      	ldr	r3, [r3, #12]
 800b9c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9c4:	2b80      	cmp	r3, #128	; 0x80
 800b9c6:	d107      	bne.n	800b9d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800b9d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b9d2:	6878      	ldr	r0, [r7, #4]
 800b9d4:	f000 faa1 	bl	800bf1a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	691b      	ldr	r3, [r3, #16]
 800b9de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9e2:	2b40      	cmp	r3, #64	; 0x40
 800b9e4:	d10e      	bne.n	800ba04 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	68db      	ldr	r3, [r3, #12]
 800b9ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9f0:	2b40      	cmp	r3, #64	; 0x40
 800b9f2:	d107      	bne.n	800ba04 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b9fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	f000 f8fc 	bl	800bbfc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	691b      	ldr	r3, [r3, #16]
 800ba0a:	f003 0320 	and.w	r3, r3, #32
 800ba0e:	2b20      	cmp	r3, #32
 800ba10:	d10e      	bne.n	800ba30 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	68db      	ldr	r3, [r3, #12]
 800ba18:	f003 0320 	and.w	r3, r3, #32
 800ba1c:	2b20      	cmp	r3, #32
 800ba1e:	d107      	bne.n	800ba30 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	f06f 0220 	mvn.w	r2, #32
 800ba28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ba2a:	6878      	ldr	r0, [r7, #4]
 800ba2c:	f000 fa6c 	bl	800bf08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ba30:	bf00      	nop
 800ba32:	3708      	adds	r7, #8
 800ba34:	46bd      	mov	sp, r7
 800ba36:	bd80      	pop	{r7, pc}

0800ba38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ba38:	b580      	push	{r7, lr}
 800ba3a:	b084      	sub	sp, #16
 800ba3c:	af00      	add	r7, sp, #0
 800ba3e:	6078      	str	r0, [r7, #4]
 800ba40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ba42:	2300      	movs	r3, #0
 800ba44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ba4c:	2b01      	cmp	r3, #1
 800ba4e:	d101      	bne.n	800ba54 <HAL_TIM_ConfigClockSource+0x1c>
 800ba50:	2302      	movs	r3, #2
 800ba52:	e0b4      	b.n	800bbbe <HAL_TIM_ConfigClockSource+0x186>
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2201      	movs	r2, #1
 800ba58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	2202      	movs	r2, #2
 800ba60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	681b      	ldr	r3, [r3, #0]
 800ba68:	689b      	ldr	r3, [r3, #8]
 800ba6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ba6c:	68bb      	ldr	r3, [r7, #8]
 800ba6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ba72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ba7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	68ba      	ldr	r2, [r7, #8]
 800ba82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ba84:	683b      	ldr	r3, [r7, #0]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba8c:	d03e      	beq.n	800bb0c <HAL_TIM_ConfigClockSource+0xd4>
 800ba8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba92:	f200 8087 	bhi.w	800bba4 <HAL_TIM_ConfigClockSource+0x16c>
 800ba96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba9a:	f000 8086 	beq.w	800bbaa <HAL_TIM_ConfigClockSource+0x172>
 800ba9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800baa2:	d87f      	bhi.n	800bba4 <HAL_TIM_ConfigClockSource+0x16c>
 800baa4:	2b70      	cmp	r3, #112	; 0x70
 800baa6:	d01a      	beq.n	800bade <HAL_TIM_ConfigClockSource+0xa6>
 800baa8:	2b70      	cmp	r3, #112	; 0x70
 800baaa:	d87b      	bhi.n	800bba4 <HAL_TIM_ConfigClockSource+0x16c>
 800baac:	2b60      	cmp	r3, #96	; 0x60
 800baae:	d050      	beq.n	800bb52 <HAL_TIM_ConfigClockSource+0x11a>
 800bab0:	2b60      	cmp	r3, #96	; 0x60
 800bab2:	d877      	bhi.n	800bba4 <HAL_TIM_ConfigClockSource+0x16c>
 800bab4:	2b50      	cmp	r3, #80	; 0x50
 800bab6:	d03c      	beq.n	800bb32 <HAL_TIM_ConfigClockSource+0xfa>
 800bab8:	2b50      	cmp	r3, #80	; 0x50
 800baba:	d873      	bhi.n	800bba4 <HAL_TIM_ConfigClockSource+0x16c>
 800babc:	2b40      	cmp	r3, #64	; 0x40
 800babe:	d058      	beq.n	800bb72 <HAL_TIM_ConfigClockSource+0x13a>
 800bac0:	2b40      	cmp	r3, #64	; 0x40
 800bac2:	d86f      	bhi.n	800bba4 <HAL_TIM_ConfigClockSource+0x16c>
 800bac4:	2b30      	cmp	r3, #48	; 0x30
 800bac6:	d064      	beq.n	800bb92 <HAL_TIM_ConfigClockSource+0x15a>
 800bac8:	2b30      	cmp	r3, #48	; 0x30
 800baca:	d86b      	bhi.n	800bba4 <HAL_TIM_ConfigClockSource+0x16c>
 800bacc:	2b20      	cmp	r3, #32
 800bace:	d060      	beq.n	800bb92 <HAL_TIM_ConfigClockSource+0x15a>
 800bad0:	2b20      	cmp	r3, #32
 800bad2:	d867      	bhi.n	800bba4 <HAL_TIM_ConfigClockSource+0x16c>
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d05c      	beq.n	800bb92 <HAL_TIM_ConfigClockSource+0x15a>
 800bad8:	2b10      	cmp	r3, #16
 800bada:	d05a      	beq.n	800bb92 <HAL_TIM_ConfigClockSource+0x15a>
 800badc:	e062      	b.n	800bba4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800baee:	f000 f980 	bl	800bdf2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	689b      	ldr	r3, [r3, #8]
 800baf8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bafa:	68bb      	ldr	r3, [r7, #8]
 800bafc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bb00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	68ba      	ldr	r2, [r7, #8]
 800bb08:	609a      	str	r2, [r3, #8]
      break;
 800bb0a:	e04f      	b.n	800bbac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bb18:	683b      	ldr	r3, [r7, #0]
 800bb1a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bb1c:	f000 f969 	bl	800bdf2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	689a      	ldr	r2, [r3, #8]
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bb2e:	609a      	str	r2, [r3, #8]
      break;
 800bb30:	e03c      	b.n	800bbac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb3e:	461a      	mov	r2, r3
 800bb40:	f000 f8e0 	bl	800bd04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	2150      	movs	r1, #80	; 0x50
 800bb4a:	4618      	mov	r0, r3
 800bb4c:	f000 f937 	bl	800bdbe <TIM_ITRx_SetConfig>
      break;
 800bb50:	e02c      	b.n	800bbac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bb5e:	461a      	mov	r2, r3
 800bb60:	f000 f8fe 	bl	800bd60 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	2160      	movs	r1, #96	; 0x60
 800bb6a:	4618      	mov	r0, r3
 800bb6c:	f000 f927 	bl	800bdbe <TIM_ITRx_SetConfig>
      break;
 800bb70:	e01c      	b.n	800bbac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bb76:	683b      	ldr	r3, [r7, #0]
 800bb78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bb7a:	683b      	ldr	r3, [r7, #0]
 800bb7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bb7e:	461a      	mov	r2, r3
 800bb80:	f000 f8c0 	bl	800bd04 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	2140      	movs	r1, #64	; 0x40
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	f000 f917 	bl	800bdbe <TIM_ITRx_SetConfig>
      break;
 800bb90:	e00c      	b.n	800bbac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681a      	ldr	r2, [r3, #0]
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	4619      	mov	r1, r3
 800bb9c:	4610      	mov	r0, r2
 800bb9e:	f000 f90e 	bl	800bdbe <TIM_ITRx_SetConfig>
      break;
 800bba2:	e003      	b.n	800bbac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800bba4:	2301      	movs	r3, #1
 800bba6:	73fb      	strb	r3, [r7, #15]
      break;
 800bba8:	e000      	b.n	800bbac <HAL_TIM_ConfigClockSource+0x174>
      break;
 800bbaa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2201      	movs	r2, #1
 800bbb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	2200      	movs	r2, #0
 800bbb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bbbc:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbbe:	4618      	mov	r0, r3
 800bbc0:	3710      	adds	r7, #16
 800bbc2:	46bd      	mov	sp, r7
 800bbc4:	bd80      	pop	{r7, pc}

0800bbc6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bbc6:	b480      	push	{r7}
 800bbc8:	b083      	sub	sp, #12
 800bbca:	af00      	add	r7, sp, #0
 800bbcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bbce:	bf00      	nop
 800bbd0:	370c      	adds	r7, #12
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bc80      	pop	{r7}
 800bbd6:	4770      	bx	lr

0800bbd8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bbd8:	b480      	push	{r7}
 800bbda:	b083      	sub	sp, #12
 800bbdc:	af00      	add	r7, sp, #0
 800bbde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bbe0:	bf00      	nop
 800bbe2:	370c      	adds	r7, #12
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bc80      	pop	{r7}
 800bbe8:	4770      	bx	lr

0800bbea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bbea:	b480      	push	{r7}
 800bbec:	b083      	sub	sp, #12
 800bbee:	af00      	add	r7, sp, #0
 800bbf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bbf2:	bf00      	nop
 800bbf4:	370c      	adds	r7, #12
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	bc80      	pop	{r7}
 800bbfa:	4770      	bx	lr

0800bbfc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bbfc:	b480      	push	{r7}
 800bbfe:	b083      	sub	sp, #12
 800bc00:	af00      	add	r7, sp, #0
 800bc02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bc04:	bf00      	nop
 800bc06:	370c      	adds	r7, #12
 800bc08:	46bd      	mov	sp, r7
 800bc0a:	bc80      	pop	{r7}
 800bc0c:	4770      	bx	lr
	...

0800bc10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bc10:	b480      	push	{r7}
 800bc12:	b085      	sub	sp, #20
 800bc14:	af00      	add	r7, sp, #0
 800bc16:	6078      	str	r0, [r7, #4]
 800bc18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	681b      	ldr	r3, [r3, #0]
 800bc1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	4a33      	ldr	r2, [pc, #204]	; (800bcf0 <TIM_Base_SetConfig+0xe0>)
 800bc24:	4293      	cmp	r3, r2
 800bc26:	d013      	beq.n	800bc50 <TIM_Base_SetConfig+0x40>
 800bc28:	687b      	ldr	r3, [r7, #4]
 800bc2a:	4a32      	ldr	r2, [pc, #200]	; (800bcf4 <TIM_Base_SetConfig+0xe4>)
 800bc2c:	4293      	cmp	r3, r2
 800bc2e:	d00f      	beq.n	800bc50 <TIM_Base_SetConfig+0x40>
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc36:	d00b      	beq.n	800bc50 <TIM_Base_SetConfig+0x40>
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	4a2f      	ldr	r2, [pc, #188]	; (800bcf8 <TIM_Base_SetConfig+0xe8>)
 800bc3c:	4293      	cmp	r3, r2
 800bc3e:	d007      	beq.n	800bc50 <TIM_Base_SetConfig+0x40>
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	4a2e      	ldr	r2, [pc, #184]	; (800bcfc <TIM_Base_SetConfig+0xec>)
 800bc44:	4293      	cmp	r3, r2
 800bc46:	d003      	beq.n	800bc50 <TIM_Base_SetConfig+0x40>
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	4a2d      	ldr	r2, [pc, #180]	; (800bd00 <TIM_Base_SetConfig+0xf0>)
 800bc4c:	4293      	cmp	r3, r2
 800bc4e:	d108      	bne.n	800bc62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bc58:	683b      	ldr	r3, [r7, #0]
 800bc5a:	685b      	ldr	r3, [r3, #4]
 800bc5c:	68fa      	ldr	r2, [r7, #12]
 800bc5e:	4313      	orrs	r3, r2
 800bc60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	4a22      	ldr	r2, [pc, #136]	; (800bcf0 <TIM_Base_SetConfig+0xe0>)
 800bc66:	4293      	cmp	r3, r2
 800bc68:	d013      	beq.n	800bc92 <TIM_Base_SetConfig+0x82>
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	4a21      	ldr	r2, [pc, #132]	; (800bcf4 <TIM_Base_SetConfig+0xe4>)
 800bc6e:	4293      	cmp	r3, r2
 800bc70:	d00f      	beq.n	800bc92 <TIM_Base_SetConfig+0x82>
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bc78:	d00b      	beq.n	800bc92 <TIM_Base_SetConfig+0x82>
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	4a1e      	ldr	r2, [pc, #120]	; (800bcf8 <TIM_Base_SetConfig+0xe8>)
 800bc7e:	4293      	cmp	r3, r2
 800bc80:	d007      	beq.n	800bc92 <TIM_Base_SetConfig+0x82>
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	4a1d      	ldr	r2, [pc, #116]	; (800bcfc <TIM_Base_SetConfig+0xec>)
 800bc86:	4293      	cmp	r3, r2
 800bc88:	d003      	beq.n	800bc92 <TIM_Base_SetConfig+0x82>
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	4a1c      	ldr	r2, [pc, #112]	; (800bd00 <TIM_Base_SetConfig+0xf0>)
 800bc8e:	4293      	cmp	r3, r2
 800bc90:	d108      	bne.n	800bca4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bc98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bc9a:	683b      	ldr	r3, [r7, #0]
 800bc9c:	68db      	ldr	r3, [r3, #12]
 800bc9e:	68fa      	ldr	r2, [r7, #12]
 800bca0:	4313      	orrs	r3, r2
 800bca2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	695b      	ldr	r3, [r3, #20]
 800bcae:	4313      	orrs	r3, r2
 800bcb0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	68fa      	ldr	r2, [r7, #12]
 800bcb6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	689a      	ldr	r2, [r3, #8]
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	681a      	ldr	r2, [r3, #0]
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	4a09      	ldr	r2, [pc, #36]	; (800bcf0 <TIM_Base_SetConfig+0xe0>)
 800bccc:	4293      	cmp	r3, r2
 800bcce:	d003      	beq.n	800bcd8 <TIM_Base_SetConfig+0xc8>
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	4a08      	ldr	r2, [pc, #32]	; (800bcf4 <TIM_Base_SetConfig+0xe4>)
 800bcd4:	4293      	cmp	r3, r2
 800bcd6:	d103      	bne.n	800bce0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	691a      	ldr	r2, [r3, #16]
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2201      	movs	r2, #1
 800bce4:	615a      	str	r2, [r3, #20]
}
 800bce6:	bf00      	nop
 800bce8:	3714      	adds	r7, #20
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bc80      	pop	{r7}
 800bcee:	4770      	bx	lr
 800bcf0:	40012c00 	.word	0x40012c00
 800bcf4:	40013400 	.word	0x40013400
 800bcf8:	40000400 	.word	0x40000400
 800bcfc:	40000800 	.word	0x40000800
 800bd00:	40000c00 	.word	0x40000c00

0800bd04 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bd04:	b480      	push	{r7}
 800bd06:	b087      	sub	sp, #28
 800bd08:	af00      	add	r7, sp, #0
 800bd0a:	60f8      	str	r0, [r7, #12]
 800bd0c:	60b9      	str	r1, [r7, #8]
 800bd0e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	6a1b      	ldr	r3, [r3, #32]
 800bd14:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	6a1b      	ldr	r3, [r3, #32]
 800bd1a:	f023 0201 	bic.w	r2, r3, #1
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	699b      	ldr	r3, [r3, #24]
 800bd26:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bd28:	693b      	ldr	r3, [r7, #16]
 800bd2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bd2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	011b      	lsls	r3, r3, #4
 800bd34:	693a      	ldr	r2, [r7, #16]
 800bd36:	4313      	orrs	r3, r2
 800bd38:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bd3a:	697b      	ldr	r3, [r7, #20]
 800bd3c:	f023 030a 	bic.w	r3, r3, #10
 800bd40:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bd42:	697a      	ldr	r2, [r7, #20]
 800bd44:	68bb      	ldr	r3, [r7, #8]
 800bd46:	4313      	orrs	r3, r2
 800bd48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	693a      	ldr	r2, [r7, #16]
 800bd4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	697a      	ldr	r2, [r7, #20]
 800bd54:	621a      	str	r2, [r3, #32]
}
 800bd56:	bf00      	nop
 800bd58:	371c      	adds	r7, #28
 800bd5a:	46bd      	mov	sp, r7
 800bd5c:	bc80      	pop	{r7}
 800bd5e:	4770      	bx	lr

0800bd60 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bd60:	b480      	push	{r7}
 800bd62:	b087      	sub	sp, #28
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	60f8      	str	r0, [r7, #12]
 800bd68:	60b9      	str	r1, [r7, #8]
 800bd6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	6a1b      	ldr	r3, [r3, #32]
 800bd70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	6a1b      	ldr	r3, [r3, #32]
 800bd76:	f023 0210 	bic.w	r2, r3, #16
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	699b      	ldr	r3, [r3, #24]
 800bd82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800bd84:	693b      	ldr	r3, [r7, #16]
 800bd86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800bd8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	031b      	lsls	r3, r3, #12
 800bd90:	693a      	ldr	r2, [r7, #16]
 800bd92:	4313      	orrs	r3, r2
 800bd94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800bd96:	697b      	ldr	r3, [r7, #20]
 800bd98:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800bd9c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800bd9e:	68bb      	ldr	r3, [r7, #8]
 800bda0:	011b      	lsls	r3, r3, #4
 800bda2:	697a      	ldr	r2, [r7, #20]
 800bda4:	4313      	orrs	r3, r2
 800bda6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800bda8:	68fb      	ldr	r3, [r7, #12]
 800bdaa:	693a      	ldr	r2, [r7, #16]
 800bdac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bdae:	68fb      	ldr	r3, [r7, #12]
 800bdb0:	697a      	ldr	r2, [r7, #20]
 800bdb2:	621a      	str	r2, [r3, #32]
}
 800bdb4:	bf00      	nop
 800bdb6:	371c      	adds	r7, #28
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	bc80      	pop	{r7}
 800bdbc:	4770      	bx	lr

0800bdbe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800bdbe:	b480      	push	{r7}
 800bdc0:	b085      	sub	sp, #20
 800bdc2:	af00      	add	r7, sp, #0
 800bdc4:	6078      	str	r0, [r7, #4]
 800bdc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	689b      	ldr	r3, [r3, #8]
 800bdcc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800bdce:	68fb      	ldr	r3, [r7, #12]
 800bdd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bdd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800bdd6:	683a      	ldr	r2, [r7, #0]
 800bdd8:	68fb      	ldr	r3, [r7, #12]
 800bdda:	4313      	orrs	r3, r2
 800bddc:	f043 0307 	orr.w	r3, r3, #7
 800bde0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	68fa      	ldr	r2, [r7, #12]
 800bde6:	609a      	str	r2, [r3, #8]
}
 800bde8:	bf00      	nop
 800bdea:	3714      	adds	r7, #20
 800bdec:	46bd      	mov	sp, r7
 800bdee:	bc80      	pop	{r7}
 800bdf0:	4770      	bx	lr

0800bdf2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bdf2:	b480      	push	{r7}
 800bdf4:	b087      	sub	sp, #28
 800bdf6:	af00      	add	r7, sp, #0
 800bdf8:	60f8      	str	r0, [r7, #12]
 800bdfa:	60b9      	str	r1, [r7, #8]
 800bdfc:	607a      	str	r2, [r7, #4]
 800bdfe:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	689b      	ldr	r3, [r3, #8]
 800be04:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800be06:	697b      	ldr	r3, [r7, #20]
 800be08:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800be0c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800be0e:	683b      	ldr	r3, [r7, #0]
 800be10:	021a      	lsls	r2, r3, #8
 800be12:	687b      	ldr	r3, [r7, #4]
 800be14:	431a      	orrs	r2, r3
 800be16:	68bb      	ldr	r3, [r7, #8]
 800be18:	4313      	orrs	r3, r2
 800be1a:	697a      	ldr	r2, [r7, #20]
 800be1c:	4313      	orrs	r3, r2
 800be1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	697a      	ldr	r2, [r7, #20]
 800be24:	609a      	str	r2, [r3, #8]
}
 800be26:	bf00      	nop
 800be28:	371c      	adds	r7, #28
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bc80      	pop	{r7}
 800be2e:	4770      	bx	lr

0800be30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800be30:	b480      	push	{r7}
 800be32:	b085      	sub	sp, #20
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
 800be38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800be40:	2b01      	cmp	r3, #1
 800be42:	d101      	bne.n	800be48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800be44:	2302      	movs	r3, #2
 800be46:	e050      	b.n	800beea <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	2201      	movs	r2, #1
 800be4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2202      	movs	r2, #2
 800be54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	685b      	ldr	r3, [r3, #4]
 800be5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	689b      	ldr	r3, [r3, #8]
 800be66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800be70:	683b      	ldr	r3, [r7, #0]
 800be72:	681b      	ldr	r3, [r3, #0]
 800be74:	68fa      	ldr	r2, [r7, #12]
 800be76:	4313      	orrs	r3, r2
 800be78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	68fa      	ldr	r2, [r7, #12]
 800be80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	681b      	ldr	r3, [r3, #0]
 800be86:	4a1b      	ldr	r2, [pc, #108]	; (800bef4 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800be88:	4293      	cmp	r3, r2
 800be8a:	d018      	beq.n	800bebe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	4a19      	ldr	r2, [pc, #100]	; (800bef8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800be92:	4293      	cmp	r3, r2
 800be94:	d013      	beq.n	800bebe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be9e:	d00e      	beq.n	800bebe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bea0:	687b      	ldr	r3, [r7, #4]
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	4a15      	ldr	r2, [pc, #84]	; (800befc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800bea6:	4293      	cmp	r3, r2
 800bea8:	d009      	beq.n	800bebe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	4a14      	ldr	r2, [pc, #80]	; (800bf00 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800beb0:	4293      	cmp	r3, r2
 800beb2:	d004      	beq.n	800bebe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	4a12      	ldr	r2, [pc, #72]	; (800bf04 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800beba:	4293      	cmp	r3, r2
 800bebc:	d10c      	bne.n	800bed8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bebe:	68bb      	ldr	r3, [r7, #8]
 800bec0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bec4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	685b      	ldr	r3, [r3, #4]
 800beca:	68ba      	ldr	r2, [r7, #8]
 800becc:	4313      	orrs	r3, r2
 800bece:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	68ba      	ldr	r2, [r7, #8]
 800bed6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2201      	movs	r2, #1
 800bedc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2200      	movs	r2, #0
 800bee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bee8:	2300      	movs	r3, #0
}
 800beea:	4618      	mov	r0, r3
 800beec:	3714      	adds	r7, #20
 800beee:	46bd      	mov	sp, r7
 800bef0:	bc80      	pop	{r7}
 800bef2:	4770      	bx	lr
 800bef4:	40012c00 	.word	0x40012c00
 800bef8:	40013400 	.word	0x40013400
 800befc:	40000400 	.word	0x40000400
 800bf00:	40000800 	.word	0x40000800
 800bf04:	40000c00 	.word	0x40000c00

0800bf08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bf08:	b480      	push	{r7}
 800bf0a:	b083      	sub	sp, #12
 800bf0c:	af00      	add	r7, sp, #0
 800bf0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bf10:	bf00      	nop
 800bf12:	370c      	adds	r7, #12
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bc80      	pop	{r7}
 800bf18:	4770      	bx	lr

0800bf1a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bf1a:	b480      	push	{r7}
 800bf1c:	b083      	sub	sp, #12
 800bf1e:	af00      	add	r7, sp, #0
 800bf20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bf22:	bf00      	nop
 800bf24:	370c      	adds	r7, #12
 800bf26:	46bd      	mov	sp, r7
 800bf28:	bc80      	pop	{r7}
 800bf2a:	4770      	bx	lr

0800bf2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bf2c:	b580      	push	{r7, lr}
 800bf2e:	b082      	sub	sp, #8
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d101      	bne.n	800bf3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bf3a:	2301      	movs	r3, #1
 800bf3c:	e042      	b.n	800bfc4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800bf44:	b2db      	uxtb	r3, r3
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d106      	bne.n	800bf58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	f7fc fe1a 	bl	8008b8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2224      	movs	r2, #36	; 0x24
 800bf5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	68da      	ldr	r2, [r3, #12]
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800bf6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800bf70:	6878      	ldr	r0, [r7, #4]
 800bf72:	f000 fc7f 	bl	800c874 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	691a      	ldr	r2, [r3, #16]
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bf84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	695a      	ldr	r2, [r3, #20]
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bf94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	68da      	ldr	r2, [r3, #12]
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800bfa4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2200      	movs	r2, #0
 800bfaa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	2220      	movs	r2, #32
 800bfb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2220      	movs	r2, #32
 800bfb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800bfc2:	2300      	movs	r3, #0
}
 800bfc4:	4618      	mov	r0, r3
 800bfc6:	3708      	adds	r7, #8
 800bfc8:	46bd      	mov	sp, r7
 800bfca:	bd80      	pop	{r7, pc}

0800bfcc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800bfcc:	b580      	push	{r7, lr}
 800bfce:	b0ba      	sub	sp, #232	; 0xe8
 800bfd0:	af00      	add	r7, sp, #0
 800bfd2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	68db      	ldr	r3, [r3, #12]
 800bfe4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	695b      	ldr	r3, [r3, #20]
 800bfee:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800bff2:	2300      	movs	r3, #0
 800bff4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800bff8:	2300      	movs	r3, #0
 800bffa:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800bffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c002:	f003 030f 	and.w	r3, r3, #15
 800c006:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800c00a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d10f      	bne.n	800c032 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c012:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c016:	f003 0320 	and.w	r3, r3, #32
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d009      	beq.n	800c032 <HAL_UART_IRQHandler+0x66>
 800c01e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c022:	f003 0320 	and.w	r3, r3, #32
 800c026:	2b00      	cmp	r3, #0
 800c028:	d003      	beq.n	800c032 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c02a:	6878      	ldr	r0, [r7, #4]
 800c02c:	f000 fb63 	bl	800c6f6 <UART_Receive_IT>
      return;
 800c030:	e25b      	b.n	800c4ea <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c032:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c036:	2b00      	cmp	r3, #0
 800c038:	f000 80de 	beq.w	800c1f8 <HAL_UART_IRQHandler+0x22c>
 800c03c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c040:	f003 0301 	and.w	r3, r3, #1
 800c044:	2b00      	cmp	r3, #0
 800c046:	d106      	bne.n	800c056 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c04c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c050:	2b00      	cmp	r3, #0
 800c052:	f000 80d1 	beq.w	800c1f8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c056:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c05a:	f003 0301 	and.w	r3, r3, #1
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d00b      	beq.n	800c07a <HAL_UART_IRQHandler+0xae>
 800c062:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c066:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c06a:	2b00      	cmp	r3, #0
 800c06c:	d005      	beq.n	800c07a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c072:	f043 0201 	orr.w	r2, r3, #1
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c07a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c07e:	f003 0304 	and.w	r3, r3, #4
 800c082:	2b00      	cmp	r3, #0
 800c084:	d00b      	beq.n	800c09e <HAL_UART_IRQHandler+0xd2>
 800c086:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c08a:	f003 0301 	and.w	r3, r3, #1
 800c08e:	2b00      	cmp	r3, #0
 800c090:	d005      	beq.n	800c09e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c096:	f043 0202 	orr.w	r2, r3, #2
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c09e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0a2:	f003 0302 	and.w	r3, r3, #2
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d00b      	beq.n	800c0c2 <HAL_UART_IRQHandler+0xf6>
 800c0aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c0ae:	f003 0301 	and.w	r3, r3, #1
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d005      	beq.n	800c0c2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0ba:	f043 0204 	orr.w	r2, r3, #4
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c0c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c0c6:	f003 0308 	and.w	r3, r3, #8
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d011      	beq.n	800c0f2 <HAL_UART_IRQHandler+0x126>
 800c0ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c0d2:	f003 0320 	and.w	r3, r3, #32
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d105      	bne.n	800c0e6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c0da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c0de:	f003 0301 	and.w	r3, r3, #1
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d005      	beq.n	800c0f2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0ea:	f043 0208 	orr.w	r2, r3, #8
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	f000 81f2 	beq.w	800c4e0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c0fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c100:	f003 0320 	and.w	r3, r3, #32
 800c104:	2b00      	cmp	r3, #0
 800c106:	d008      	beq.n	800c11a <HAL_UART_IRQHandler+0x14e>
 800c108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c10c:	f003 0320 	and.w	r3, r3, #32
 800c110:	2b00      	cmp	r3, #0
 800c112:	d002      	beq.n	800c11a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	f000 faee 	bl	800c6f6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	695b      	ldr	r3, [r3, #20]
 800c120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c124:	2b00      	cmp	r3, #0
 800c126:	bf14      	ite	ne
 800c128:	2301      	movne	r3, #1
 800c12a:	2300      	moveq	r3, #0
 800c12c:	b2db      	uxtb	r3, r3
 800c12e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c136:	f003 0308 	and.w	r3, r3, #8
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d103      	bne.n	800c146 <HAL_UART_IRQHandler+0x17a>
 800c13e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c142:	2b00      	cmp	r3, #0
 800c144:	d04f      	beq.n	800c1e6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c146:	6878      	ldr	r0, [r7, #4]
 800c148:	f000 f9f8 	bl	800c53c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c14c:	687b      	ldr	r3, [r7, #4]
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	695b      	ldr	r3, [r3, #20]
 800c152:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c156:	2b00      	cmp	r3, #0
 800c158:	d041      	beq.n	800c1de <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	3314      	adds	r3, #20
 800c160:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c164:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c168:	e853 3f00 	ldrex	r3, [r3]
 800c16c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c170:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c174:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c178:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	681b      	ldr	r3, [r3, #0]
 800c180:	3314      	adds	r3, #20
 800c182:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c186:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c18a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c18e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c192:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c196:	e841 2300 	strex	r3, r2, [r1]
 800c19a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c19e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d1d9      	bne.n	800c15a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1aa:	2b00      	cmp	r3, #0
 800c1ac:	d013      	beq.n	800c1d6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c1ae:	687b      	ldr	r3, [r7, #4]
 800c1b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1b2:	4a7e      	ldr	r2, [pc, #504]	; (800c3ac <HAL_UART_IRQHandler+0x3e0>)
 800c1b4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f7fd f8a2 	bl	8009304 <HAL_DMA_Abort_IT>
 800c1c0:	4603      	mov	r3, r0
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	d016      	beq.n	800c1f4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c1cc:	687a      	ldr	r2, [r7, #4]
 800c1ce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c1d0:	4610      	mov	r0, r2
 800c1d2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1d4:	e00e      	b.n	800c1f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c1d6:	6878      	ldr	r0, [r7, #4]
 800c1d8:	f000 f99c 	bl	800c514 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1dc:	e00a      	b.n	800c1f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c1de:	6878      	ldr	r0, [r7, #4]
 800c1e0:	f000 f998 	bl	800c514 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1e4:	e006      	b.n	800c1f4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c1e6:	6878      	ldr	r0, [r7, #4]
 800c1e8:	f000 f994 	bl	800c514 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2200      	movs	r2, #0
 800c1f0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800c1f2:	e175      	b.n	800c4e0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c1f4:	bf00      	nop
    return;
 800c1f6:	e173      	b.n	800c4e0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1fc:	2b01      	cmp	r3, #1
 800c1fe:	f040 814f 	bne.w	800c4a0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c206:	f003 0310 	and.w	r3, r3, #16
 800c20a:	2b00      	cmp	r3, #0
 800c20c:	f000 8148 	beq.w	800c4a0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c214:	f003 0310 	and.w	r3, r3, #16
 800c218:	2b00      	cmp	r3, #0
 800c21a:	f000 8141 	beq.w	800c4a0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c21e:	2300      	movs	r3, #0
 800c220:	60bb      	str	r3, [r7, #8]
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	60bb      	str	r3, [r7, #8]
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	681b      	ldr	r3, [r3, #0]
 800c22e:	685b      	ldr	r3, [r3, #4]
 800c230:	60bb      	str	r3, [r7, #8]
 800c232:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	695b      	ldr	r3, [r3, #20]
 800c23a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c23e:	2b00      	cmp	r3, #0
 800c240:	f000 80b6 	beq.w	800c3b0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c248:	681b      	ldr	r3, [r3, #0]
 800c24a:	685b      	ldr	r3, [r3, #4]
 800c24c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c250:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c254:	2b00      	cmp	r3, #0
 800c256:	f000 8145 	beq.w	800c4e4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c25e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c262:	429a      	cmp	r2, r3
 800c264:	f080 813e 	bcs.w	800c4e4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c26e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c274:	699b      	ldr	r3, [r3, #24]
 800c276:	2b20      	cmp	r3, #32
 800c278:	f000 8088 	beq.w	800c38c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	681b      	ldr	r3, [r3, #0]
 800c280:	330c      	adds	r3, #12
 800c282:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c286:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c28a:	e853 3f00 	ldrex	r3, [r3]
 800c28e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c292:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c296:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c29a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	330c      	adds	r3, #12
 800c2a4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c2a8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c2ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2b0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c2b4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c2b8:	e841 2300 	strex	r3, r2, [r1]
 800c2bc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c2c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d1d9      	bne.n	800c27c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	3314      	adds	r3, #20
 800c2ce:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c2d2:	e853 3f00 	ldrex	r3, [r3]
 800c2d6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c2d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c2da:	f023 0301 	bic.w	r3, r3, #1
 800c2de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	3314      	adds	r3, #20
 800c2e8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c2ec:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c2f0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2f2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c2f4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c2f8:	e841 2300 	strex	r3, r2, [r1]
 800c2fc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c2fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c300:	2b00      	cmp	r3, #0
 800c302:	d1e1      	bne.n	800c2c8 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	3314      	adds	r3, #20
 800c30a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c30c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c30e:	e853 3f00 	ldrex	r3, [r3]
 800c312:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c314:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c316:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c31a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	3314      	adds	r3, #20
 800c324:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c328:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c32a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c32c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c32e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c330:	e841 2300 	strex	r3, r2, [r1]
 800c334:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c336:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d1e3      	bne.n	800c304 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2220      	movs	r2, #32
 800c340:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	2200      	movs	r2, #0
 800c348:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	330c      	adds	r3, #12
 800c350:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c352:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c354:	e853 3f00 	ldrex	r3, [r3]
 800c358:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c35a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c35c:	f023 0310 	bic.w	r3, r3, #16
 800c360:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	330c      	adds	r3, #12
 800c36a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c36e:	65ba      	str	r2, [r7, #88]	; 0x58
 800c370:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c372:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c374:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c376:	e841 2300 	strex	r3, r2, [r1]
 800c37a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c37c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d1e3      	bne.n	800c34a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c386:	4618      	mov	r0, r3
 800c388:	f7fc ff81 	bl	800928e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	2202      	movs	r2, #2
 800c390:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c39a:	b29b      	uxth	r3, r3
 800c39c:	1ad3      	subs	r3, r2, r3
 800c39e:	b29b      	uxth	r3, r3
 800c3a0:	4619      	mov	r1, r3
 800c3a2:	6878      	ldr	r0, [r7, #4]
 800c3a4:	f000 f8bf 	bl	800c526 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c3a8:	e09c      	b.n	800c4e4 <HAL_UART_IRQHandler+0x518>
 800c3aa:	bf00      	nop
 800c3ac:	0800c601 	.word	0x0800c601
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c3b8:	b29b      	uxth	r3, r3
 800c3ba:	1ad3      	subs	r3, r2, r3
 800c3bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c3c4:	b29b      	uxth	r3, r3
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	f000 808e 	beq.w	800c4e8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800c3cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	f000 8089 	beq.w	800c4e8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	681b      	ldr	r3, [r3, #0]
 800c3da:	330c      	adds	r3, #12
 800c3dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3e0:	e853 3f00 	ldrex	r3, [r3]
 800c3e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c3e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c3ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	330c      	adds	r3, #12
 800c3f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c3fa:	647a      	str	r2, [r7, #68]	; 0x44
 800c3fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c400:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c402:	e841 2300 	strex	r3, r2, [r1]
 800c406:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d1e3      	bne.n	800c3d6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	681b      	ldr	r3, [r3, #0]
 800c412:	3314      	adds	r3, #20
 800c414:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c418:	e853 3f00 	ldrex	r3, [r3]
 800c41c:	623b      	str	r3, [r7, #32]
   return(result);
 800c41e:	6a3b      	ldr	r3, [r7, #32]
 800c420:	f023 0301 	bic.w	r3, r3, #1
 800c424:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	3314      	adds	r3, #20
 800c42e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c432:	633a      	str	r2, [r7, #48]	; 0x30
 800c434:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c436:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c43a:	e841 2300 	strex	r3, r2, [r1]
 800c43e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c442:	2b00      	cmp	r3, #0
 800c444:	d1e3      	bne.n	800c40e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2220      	movs	r2, #32
 800c44a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2200      	movs	r2, #0
 800c452:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	681b      	ldr	r3, [r3, #0]
 800c458:	330c      	adds	r3, #12
 800c45a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c45c:	693b      	ldr	r3, [r7, #16]
 800c45e:	e853 3f00 	ldrex	r3, [r3]
 800c462:	60fb      	str	r3, [r7, #12]
   return(result);
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	f023 0310 	bic.w	r3, r3, #16
 800c46a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	330c      	adds	r3, #12
 800c474:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c478:	61fa      	str	r2, [r7, #28]
 800c47a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c47c:	69b9      	ldr	r1, [r7, #24]
 800c47e:	69fa      	ldr	r2, [r7, #28]
 800c480:	e841 2300 	strex	r3, r2, [r1]
 800c484:	617b      	str	r3, [r7, #20]
   return(result);
 800c486:	697b      	ldr	r3, [r7, #20]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d1e3      	bne.n	800c454 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2202      	movs	r2, #2
 800c490:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c492:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c496:	4619      	mov	r1, r3
 800c498:	6878      	ldr	r0, [r7, #4]
 800c49a:	f000 f844 	bl	800c526 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c49e:	e023      	b.n	800c4e8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c4a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d009      	beq.n	800c4c0 <HAL_UART_IRQHandler+0x4f4>
 800c4ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c4b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d003      	beq.n	800c4c0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800c4b8:	6878      	ldr	r0, [r7, #4]
 800c4ba:	f000 f8b5 	bl	800c628 <UART_Transmit_IT>
    return;
 800c4be:	e014      	b.n	800c4ea <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c4c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c4c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d00e      	beq.n	800c4ea <HAL_UART_IRQHandler+0x51e>
 800c4cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c4d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c4d4:	2b00      	cmp	r3, #0
 800c4d6:	d008      	beq.n	800c4ea <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800c4d8:	6878      	ldr	r0, [r7, #4]
 800c4da:	f000 f8f4 	bl	800c6c6 <UART_EndTransmit_IT>
    return;
 800c4de:	e004      	b.n	800c4ea <HAL_UART_IRQHandler+0x51e>
    return;
 800c4e0:	bf00      	nop
 800c4e2:	e002      	b.n	800c4ea <HAL_UART_IRQHandler+0x51e>
      return;
 800c4e4:	bf00      	nop
 800c4e6:	e000      	b.n	800c4ea <HAL_UART_IRQHandler+0x51e>
      return;
 800c4e8:	bf00      	nop
  }
}
 800c4ea:	37e8      	adds	r7, #232	; 0xe8
 800c4ec:	46bd      	mov	sp, r7
 800c4ee:	bd80      	pop	{r7, pc}

0800c4f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c4f0:	b480      	push	{r7}
 800c4f2:	b083      	sub	sp, #12
 800c4f4:	af00      	add	r7, sp, #0
 800c4f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c4f8:	bf00      	nop
 800c4fa:	370c      	adds	r7, #12
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	bc80      	pop	{r7}
 800c500:	4770      	bx	lr

0800c502 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c502:	b480      	push	{r7}
 800c504:	b083      	sub	sp, #12
 800c506:	af00      	add	r7, sp, #0
 800c508:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800c50a:	bf00      	nop
 800c50c:	370c      	adds	r7, #12
 800c50e:	46bd      	mov	sp, r7
 800c510:	bc80      	pop	{r7}
 800c512:	4770      	bx	lr

0800c514 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c514:	b480      	push	{r7}
 800c516:	b083      	sub	sp, #12
 800c518:	af00      	add	r7, sp, #0
 800c51a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c51c:	bf00      	nop
 800c51e:	370c      	adds	r7, #12
 800c520:	46bd      	mov	sp, r7
 800c522:	bc80      	pop	{r7}
 800c524:	4770      	bx	lr

0800c526 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c526:	b480      	push	{r7}
 800c528:	b083      	sub	sp, #12
 800c52a:	af00      	add	r7, sp, #0
 800c52c:	6078      	str	r0, [r7, #4]
 800c52e:	460b      	mov	r3, r1
 800c530:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c532:	bf00      	nop
 800c534:	370c      	adds	r7, #12
 800c536:	46bd      	mov	sp, r7
 800c538:	bc80      	pop	{r7}
 800c53a:	4770      	bx	lr

0800c53c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c53c:	b480      	push	{r7}
 800c53e:	b095      	sub	sp, #84	; 0x54
 800c540:	af00      	add	r7, sp, #0
 800c542:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	330c      	adds	r3, #12
 800c54a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c54c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c54e:	e853 3f00 	ldrex	r3, [r3]
 800c552:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c556:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c55a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	330c      	adds	r3, #12
 800c562:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c564:	643a      	str	r2, [r7, #64]	; 0x40
 800c566:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c568:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c56a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c56c:	e841 2300 	strex	r3, r2, [r1]
 800c570:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c574:	2b00      	cmp	r3, #0
 800c576:	d1e5      	bne.n	800c544 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c578:	687b      	ldr	r3, [r7, #4]
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	3314      	adds	r3, #20
 800c57e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c580:	6a3b      	ldr	r3, [r7, #32]
 800c582:	e853 3f00 	ldrex	r3, [r3]
 800c586:	61fb      	str	r3, [r7, #28]
   return(result);
 800c588:	69fb      	ldr	r3, [r7, #28]
 800c58a:	f023 0301 	bic.w	r3, r3, #1
 800c58e:	64bb      	str	r3, [r7, #72]	; 0x48
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	681b      	ldr	r3, [r3, #0]
 800c594:	3314      	adds	r3, #20
 800c596:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c598:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c59a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c59c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c59e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c5a0:	e841 2300 	strex	r3, r2, [r1]
 800c5a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d1e5      	bne.n	800c578 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c5b0:	2b01      	cmp	r3, #1
 800c5b2:	d119      	bne.n	800c5e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	330c      	adds	r3, #12
 800c5ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5bc:	68fb      	ldr	r3, [r7, #12]
 800c5be:	e853 3f00 	ldrex	r3, [r3]
 800c5c2:	60bb      	str	r3, [r7, #8]
   return(result);
 800c5c4:	68bb      	ldr	r3, [r7, #8]
 800c5c6:	f023 0310 	bic.w	r3, r3, #16
 800c5ca:	647b      	str	r3, [r7, #68]	; 0x44
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	330c      	adds	r3, #12
 800c5d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c5d4:	61ba      	str	r2, [r7, #24]
 800c5d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5d8:	6979      	ldr	r1, [r7, #20]
 800c5da:	69ba      	ldr	r2, [r7, #24]
 800c5dc:	e841 2300 	strex	r3, r2, [r1]
 800c5e0:	613b      	str	r3, [r7, #16]
   return(result);
 800c5e2:	693b      	ldr	r3, [r7, #16]
 800c5e4:	2b00      	cmp	r3, #0
 800c5e6:	d1e5      	bne.n	800c5b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	2220      	movs	r2, #32
 800c5ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	2200      	movs	r2, #0
 800c5f4:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c5f6:	bf00      	nop
 800c5f8:	3754      	adds	r7, #84	; 0x54
 800c5fa:	46bd      	mov	sp, r7
 800c5fc:	bc80      	pop	{r7}
 800c5fe:	4770      	bx	lr

0800c600 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b084      	sub	sp, #16
 800c604:	af00      	add	r7, sp, #0
 800c606:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c60c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	2200      	movs	r2, #0
 800c612:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	2200      	movs	r2, #0
 800c618:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c61a:	68f8      	ldr	r0, [r7, #12]
 800c61c:	f7ff ff7a 	bl	800c514 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c620:	bf00      	nop
 800c622:	3710      	adds	r7, #16
 800c624:	46bd      	mov	sp, r7
 800c626:	bd80      	pop	{r7, pc}

0800c628 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c628:	b480      	push	{r7}
 800c62a:	b085      	sub	sp, #20
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c636:	b2db      	uxtb	r3, r3
 800c638:	2b21      	cmp	r3, #33	; 0x21
 800c63a:	d13e      	bne.n	800c6ba <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	689b      	ldr	r3, [r3, #8]
 800c640:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c644:	d114      	bne.n	800c670 <UART_Transmit_IT+0x48>
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	691b      	ldr	r3, [r3, #16]
 800c64a:	2b00      	cmp	r3, #0
 800c64c:	d110      	bne.n	800c670 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c64e:	687b      	ldr	r3, [r7, #4]
 800c650:	6a1b      	ldr	r3, [r3, #32]
 800c652:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	881b      	ldrh	r3, [r3, #0]
 800c658:	461a      	mov	r2, r3
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c662:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	6a1b      	ldr	r3, [r3, #32]
 800c668:	1c9a      	adds	r2, r3, #2
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	621a      	str	r2, [r3, #32]
 800c66e:	e008      	b.n	800c682 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	6a1b      	ldr	r3, [r3, #32]
 800c674:	1c59      	adds	r1, r3, #1
 800c676:	687a      	ldr	r2, [r7, #4]
 800c678:	6211      	str	r1, [r2, #32]
 800c67a:	781a      	ldrb	r2, [r3, #0]
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	681b      	ldr	r3, [r3, #0]
 800c680:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c686:	b29b      	uxth	r3, r3
 800c688:	3b01      	subs	r3, #1
 800c68a:	b29b      	uxth	r3, r3
 800c68c:	687a      	ldr	r2, [r7, #4]
 800c68e:	4619      	mov	r1, r3
 800c690:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c692:	2b00      	cmp	r3, #0
 800c694:	d10f      	bne.n	800c6b6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	68da      	ldr	r2, [r3, #12]
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c6a4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	68da      	ldr	r2, [r3, #12]
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c6b4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c6b6:	2300      	movs	r3, #0
 800c6b8:	e000      	b.n	800c6bc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c6ba:	2302      	movs	r3, #2
  }
}
 800c6bc:	4618      	mov	r0, r3
 800c6be:	3714      	adds	r7, #20
 800c6c0:	46bd      	mov	sp, r7
 800c6c2:	bc80      	pop	{r7}
 800c6c4:	4770      	bx	lr

0800c6c6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c6c6:	b580      	push	{r7, lr}
 800c6c8:	b082      	sub	sp, #8
 800c6ca:	af00      	add	r7, sp, #0
 800c6cc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	68da      	ldr	r2, [r3, #12]
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c6dc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c6de:	687b      	ldr	r3, [r7, #4]
 800c6e0:	2220      	movs	r2, #32
 800c6e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c6e6:	6878      	ldr	r0, [r7, #4]
 800c6e8:	f7ff ff02 	bl	800c4f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c6ec:	2300      	movs	r3, #0
}
 800c6ee:	4618      	mov	r0, r3
 800c6f0:	3708      	adds	r7, #8
 800c6f2:	46bd      	mov	sp, r7
 800c6f4:	bd80      	pop	{r7, pc}

0800c6f6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c6f6:	b580      	push	{r7, lr}
 800c6f8:	b08c      	sub	sp, #48	; 0x30
 800c6fa:	af00      	add	r7, sp, #0
 800c6fc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c704:	b2db      	uxtb	r3, r3
 800c706:	2b22      	cmp	r3, #34	; 0x22
 800c708:	f040 80ae 	bne.w	800c868 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	689b      	ldr	r3, [r3, #8]
 800c710:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c714:	d117      	bne.n	800c746 <UART_Receive_IT+0x50>
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	691b      	ldr	r3, [r3, #16]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d113      	bne.n	800c746 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c71e:	2300      	movs	r3, #0
 800c720:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c726:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	685b      	ldr	r3, [r3, #4]
 800c72e:	b29b      	uxth	r3, r3
 800c730:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c734:	b29a      	uxth	r2, r3
 800c736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c738:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c73e:	1c9a      	adds	r2, r3, #2
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	629a      	str	r2, [r3, #40]	; 0x28
 800c744:	e026      	b.n	800c794 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c74a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c74c:	2300      	movs	r3, #0
 800c74e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	689b      	ldr	r3, [r3, #8]
 800c754:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c758:	d007      	beq.n	800c76a <UART_Receive_IT+0x74>
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	689b      	ldr	r3, [r3, #8]
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d10a      	bne.n	800c778 <UART_Receive_IT+0x82>
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	691b      	ldr	r3, [r3, #16]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d106      	bne.n	800c778 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	685b      	ldr	r3, [r3, #4]
 800c770:	b2da      	uxtb	r2, r3
 800c772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c774:	701a      	strb	r2, [r3, #0]
 800c776:	e008      	b.n	800c78a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	681b      	ldr	r3, [r3, #0]
 800c77c:	685b      	ldr	r3, [r3, #4]
 800c77e:	b2db      	uxtb	r3, r3
 800c780:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c784:	b2da      	uxtb	r2, r3
 800c786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c788:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c78e:	1c5a      	adds	r2, r3, #1
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c798:	b29b      	uxth	r3, r3
 800c79a:	3b01      	subs	r3, #1
 800c79c:	b29b      	uxth	r3, r3
 800c79e:	687a      	ldr	r2, [r7, #4]
 800c7a0:	4619      	mov	r1, r3
 800c7a2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d15d      	bne.n	800c864 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c7a8:	687b      	ldr	r3, [r7, #4]
 800c7aa:	681b      	ldr	r3, [r3, #0]
 800c7ac:	68da      	ldr	r2, [r3, #12]
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	f022 0220 	bic.w	r2, r2, #32
 800c7b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	68da      	ldr	r2, [r3, #12]
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	681b      	ldr	r3, [r3, #0]
 800c7c2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c7c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	695a      	ldr	r2, [r3, #20]
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	681b      	ldr	r3, [r3, #0]
 800c7d2:	f022 0201 	bic.w	r2, r2, #1
 800c7d6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2220      	movs	r2, #32
 800c7dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	2200      	movs	r2, #0
 800c7e4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7ea:	2b01      	cmp	r3, #1
 800c7ec:	d135      	bne.n	800c85a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	2200      	movs	r2, #0
 800c7f2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	330c      	adds	r3, #12
 800c7fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7fc:	697b      	ldr	r3, [r7, #20]
 800c7fe:	e853 3f00 	ldrex	r3, [r3]
 800c802:	613b      	str	r3, [r7, #16]
   return(result);
 800c804:	693b      	ldr	r3, [r7, #16]
 800c806:	f023 0310 	bic.w	r3, r3, #16
 800c80a:	627b      	str	r3, [r7, #36]	; 0x24
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	330c      	adds	r3, #12
 800c812:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c814:	623a      	str	r2, [r7, #32]
 800c816:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c818:	69f9      	ldr	r1, [r7, #28]
 800c81a:	6a3a      	ldr	r2, [r7, #32]
 800c81c:	e841 2300 	strex	r3, r2, [r1]
 800c820:	61bb      	str	r3, [r7, #24]
   return(result);
 800c822:	69bb      	ldr	r3, [r7, #24]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d1e5      	bne.n	800c7f4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	681b      	ldr	r3, [r3, #0]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	f003 0310 	and.w	r3, r3, #16
 800c832:	2b10      	cmp	r3, #16
 800c834:	d10a      	bne.n	800c84c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c836:	2300      	movs	r3, #0
 800c838:	60fb      	str	r3, [r7, #12]
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	60fb      	str	r3, [r7, #12]
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	685b      	ldr	r3, [r3, #4]
 800c848:	60fb      	str	r3, [r7, #12]
 800c84a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c850:	4619      	mov	r1, r3
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	f7ff fe67 	bl	800c526 <HAL_UARTEx_RxEventCallback>
 800c858:	e002      	b.n	800c860 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c85a:	6878      	ldr	r0, [r7, #4]
 800c85c:	f7ff fe51 	bl	800c502 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c860:	2300      	movs	r3, #0
 800c862:	e002      	b.n	800c86a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c864:	2300      	movs	r3, #0
 800c866:	e000      	b.n	800c86a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c868:	2302      	movs	r3, #2
  }
}
 800c86a:	4618      	mov	r0, r3
 800c86c:	3730      	adds	r7, #48	; 0x30
 800c86e:	46bd      	mov	sp, r7
 800c870:	bd80      	pop	{r7, pc}
	...

0800c874 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c874:	b580      	push	{r7, lr}
 800c876:	b084      	sub	sp, #16
 800c878:	af00      	add	r7, sp, #0
 800c87a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	691b      	ldr	r3, [r3, #16]
 800c882:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	68da      	ldr	r2, [r3, #12]
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	430a      	orrs	r2, r1
 800c890:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	689a      	ldr	r2, [r3, #8]
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	691b      	ldr	r3, [r3, #16]
 800c89a:	431a      	orrs	r2, r3
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	695b      	ldr	r3, [r3, #20]
 800c8a0:	4313      	orrs	r3, r2
 800c8a2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	68db      	ldr	r3, [r3, #12]
 800c8aa:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800c8ae:	f023 030c 	bic.w	r3, r3, #12
 800c8b2:	687a      	ldr	r2, [r7, #4]
 800c8b4:	6812      	ldr	r2, [r2, #0]
 800c8b6:	68b9      	ldr	r1, [r7, #8]
 800c8b8:	430b      	orrs	r3, r1
 800c8ba:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	695b      	ldr	r3, [r3, #20]
 800c8c2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	699a      	ldr	r2, [r3, #24]
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	430a      	orrs	r2, r1
 800c8d0:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	681b      	ldr	r3, [r3, #0]
 800c8d6:	4a2c      	ldr	r2, [pc, #176]	; (800c988 <UART_SetConfig+0x114>)
 800c8d8:	4293      	cmp	r3, r2
 800c8da:	d103      	bne.n	800c8e4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800c8dc:	f7fe fec2 	bl	800b664 <HAL_RCC_GetPCLK2Freq>
 800c8e0:	60f8      	str	r0, [r7, #12]
 800c8e2:	e002      	b.n	800c8ea <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800c8e4:	f7fe feaa 	bl	800b63c <HAL_RCC_GetPCLK1Freq>
 800c8e8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c8ea:	68fa      	ldr	r2, [r7, #12]
 800c8ec:	4613      	mov	r3, r2
 800c8ee:	009b      	lsls	r3, r3, #2
 800c8f0:	4413      	add	r3, r2
 800c8f2:	009a      	lsls	r2, r3, #2
 800c8f4:	441a      	add	r2, r3
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	685b      	ldr	r3, [r3, #4]
 800c8fa:	009b      	lsls	r3, r3, #2
 800c8fc:	fbb2 f3f3 	udiv	r3, r2, r3
 800c900:	4a22      	ldr	r2, [pc, #136]	; (800c98c <UART_SetConfig+0x118>)
 800c902:	fba2 2303 	umull	r2, r3, r2, r3
 800c906:	095b      	lsrs	r3, r3, #5
 800c908:	0119      	lsls	r1, r3, #4
 800c90a:	68fa      	ldr	r2, [r7, #12]
 800c90c:	4613      	mov	r3, r2
 800c90e:	009b      	lsls	r3, r3, #2
 800c910:	4413      	add	r3, r2
 800c912:	009a      	lsls	r2, r3, #2
 800c914:	441a      	add	r2, r3
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	685b      	ldr	r3, [r3, #4]
 800c91a:	009b      	lsls	r3, r3, #2
 800c91c:	fbb2 f2f3 	udiv	r2, r2, r3
 800c920:	4b1a      	ldr	r3, [pc, #104]	; (800c98c <UART_SetConfig+0x118>)
 800c922:	fba3 0302 	umull	r0, r3, r3, r2
 800c926:	095b      	lsrs	r3, r3, #5
 800c928:	2064      	movs	r0, #100	; 0x64
 800c92a:	fb00 f303 	mul.w	r3, r0, r3
 800c92e:	1ad3      	subs	r3, r2, r3
 800c930:	011b      	lsls	r3, r3, #4
 800c932:	3332      	adds	r3, #50	; 0x32
 800c934:	4a15      	ldr	r2, [pc, #84]	; (800c98c <UART_SetConfig+0x118>)
 800c936:	fba2 2303 	umull	r2, r3, r2, r3
 800c93a:	095b      	lsrs	r3, r3, #5
 800c93c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c940:	4419      	add	r1, r3
 800c942:	68fa      	ldr	r2, [r7, #12]
 800c944:	4613      	mov	r3, r2
 800c946:	009b      	lsls	r3, r3, #2
 800c948:	4413      	add	r3, r2
 800c94a:	009a      	lsls	r2, r3, #2
 800c94c:	441a      	add	r2, r3
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	685b      	ldr	r3, [r3, #4]
 800c952:	009b      	lsls	r3, r3, #2
 800c954:	fbb2 f2f3 	udiv	r2, r2, r3
 800c958:	4b0c      	ldr	r3, [pc, #48]	; (800c98c <UART_SetConfig+0x118>)
 800c95a:	fba3 0302 	umull	r0, r3, r3, r2
 800c95e:	095b      	lsrs	r3, r3, #5
 800c960:	2064      	movs	r0, #100	; 0x64
 800c962:	fb00 f303 	mul.w	r3, r0, r3
 800c966:	1ad3      	subs	r3, r2, r3
 800c968:	011b      	lsls	r3, r3, #4
 800c96a:	3332      	adds	r3, #50	; 0x32
 800c96c:	4a07      	ldr	r2, [pc, #28]	; (800c98c <UART_SetConfig+0x118>)
 800c96e:	fba2 2303 	umull	r2, r3, r2, r3
 800c972:	095b      	lsrs	r3, r3, #5
 800c974:	f003 020f 	and.w	r2, r3, #15
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	440a      	add	r2, r1
 800c97e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800c980:	bf00      	nop
 800c982:	3710      	adds	r7, #16
 800c984:	46bd      	mov	sp, r7
 800c986:	bd80      	pop	{r7, pc}
 800c988:	40013800 	.word	0x40013800
 800c98c:	51eb851f 	.word	0x51eb851f

0800c990 <__itoa>:
 800c990:	1e93      	subs	r3, r2, #2
 800c992:	2b22      	cmp	r3, #34	; 0x22
 800c994:	b510      	push	{r4, lr}
 800c996:	460c      	mov	r4, r1
 800c998:	d904      	bls.n	800c9a4 <__itoa+0x14>
 800c99a:	2300      	movs	r3, #0
 800c99c:	461c      	mov	r4, r3
 800c99e:	700b      	strb	r3, [r1, #0]
 800c9a0:	4620      	mov	r0, r4
 800c9a2:	bd10      	pop	{r4, pc}
 800c9a4:	2a0a      	cmp	r2, #10
 800c9a6:	d109      	bne.n	800c9bc <__itoa+0x2c>
 800c9a8:	2800      	cmp	r0, #0
 800c9aa:	da07      	bge.n	800c9bc <__itoa+0x2c>
 800c9ac:	232d      	movs	r3, #45	; 0x2d
 800c9ae:	700b      	strb	r3, [r1, #0]
 800c9b0:	2101      	movs	r1, #1
 800c9b2:	4240      	negs	r0, r0
 800c9b4:	4421      	add	r1, r4
 800c9b6:	f000 f8b9 	bl	800cb2c <__utoa>
 800c9ba:	e7f1      	b.n	800c9a0 <__itoa+0x10>
 800c9bc:	2100      	movs	r1, #0
 800c9be:	e7f9      	b.n	800c9b4 <__itoa+0x24>

0800c9c0 <itoa>:
 800c9c0:	f7ff bfe6 	b.w	800c990 <__itoa>

0800c9c4 <malloc>:
 800c9c4:	4b02      	ldr	r3, [pc, #8]	; (800c9d0 <malloc+0xc>)
 800c9c6:	4601      	mov	r1, r0
 800c9c8:	6818      	ldr	r0, [r3, #0]
 800c9ca:	f000 b823 	b.w	800ca14 <_malloc_r>
 800c9ce:	bf00      	nop
 800c9d0:	20000a10 	.word	0x20000a10

0800c9d4 <sbrk_aligned>:
 800c9d4:	b570      	push	{r4, r5, r6, lr}
 800c9d6:	4e0e      	ldr	r6, [pc, #56]	; (800ca10 <sbrk_aligned+0x3c>)
 800c9d8:	460c      	mov	r4, r1
 800c9da:	6831      	ldr	r1, [r6, #0]
 800c9dc:	4605      	mov	r5, r0
 800c9de:	b911      	cbnz	r1, 800c9e6 <sbrk_aligned+0x12>
 800c9e0:	f000 f8ee 	bl	800cbc0 <_sbrk_r>
 800c9e4:	6030      	str	r0, [r6, #0]
 800c9e6:	4621      	mov	r1, r4
 800c9e8:	4628      	mov	r0, r5
 800c9ea:	f000 f8e9 	bl	800cbc0 <_sbrk_r>
 800c9ee:	1c43      	adds	r3, r0, #1
 800c9f0:	d00a      	beq.n	800ca08 <sbrk_aligned+0x34>
 800c9f2:	1cc4      	adds	r4, r0, #3
 800c9f4:	f024 0403 	bic.w	r4, r4, #3
 800c9f8:	42a0      	cmp	r0, r4
 800c9fa:	d007      	beq.n	800ca0c <sbrk_aligned+0x38>
 800c9fc:	1a21      	subs	r1, r4, r0
 800c9fe:	4628      	mov	r0, r5
 800ca00:	f000 f8de 	bl	800cbc0 <_sbrk_r>
 800ca04:	3001      	adds	r0, #1
 800ca06:	d101      	bne.n	800ca0c <sbrk_aligned+0x38>
 800ca08:	f04f 34ff 	mov.w	r4, #4294967295
 800ca0c:	4620      	mov	r0, r4
 800ca0e:	bd70      	pop	{r4, r5, r6, pc}
 800ca10:	20000db0 	.word	0x20000db0

0800ca14 <_malloc_r>:
 800ca14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca18:	1ccd      	adds	r5, r1, #3
 800ca1a:	f025 0503 	bic.w	r5, r5, #3
 800ca1e:	3508      	adds	r5, #8
 800ca20:	2d0c      	cmp	r5, #12
 800ca22:	bf38      	it	cc
 800ca24:	250c      	movcc	r5, #12
 800ca26:	2d00      	cmp	r5, #0
 800ca28:	4607      	mov	r7, r0
 800ca2a:	db01      	blt.n	800ca30 <_malloc_r+0x1c>
 800ca2c:	42a9      	cmp	r1, r5
 800ca2e:	d905      	bls.n	800ca3c <_malloc_r+0x28>
 800ca30:	230c      	movs	r3, #12
 800ca32:	2600      	movs	r6, #0
 800ca34:	603b      	str	r3, [r7, #0]
 800ca36:	4630      	mov	r0, r6
 800ca38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca3c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800cb10 <_malloc_r+0xfc>
 800ca40:	f000 f868 	bl	800cb14 <__malloc_lock>
 800ca44:	f8d8 3000 	ldr.w	r3, [r8]
 800ca48:	461c      	mov	r4, r3
 800ca4a:	bb5c      	cbnz	r4, 800caa4 <_malloc_r+0x90>
 800ca4c:	4629      	mov	r1, r5
 800ca4e:	4638      	mov	r0, r7
 800ca50:	f7ff ffc0 	bl	800c9d4 <sbrk_aligned>
 800ca54:	1c43      	adds	r3, r0, #1
 800ca56:	4604      	mov	r4, r0
 800ca58:	d155      	bne.n	800cb06 <_malloc_r+0xf2>
 800ca5a:	f8d8 4000 	ldr.w	r4, [r8]
 800ca5e:	4626      	mov	r6, r4
 800ca60:	2e00      	cmp	r6, #0
 800ca62:	d145      	bne.n	800caf0 <_malloc_r+0xdc>
 800ca64:	2c00      	cmp	r4, #0
 800ca66:	d048      	beq.n	800cafa <_malloc_r+0xe6>
 800ca68:	6823      	ldr	r3, [r4, #0]
 800ca6a:	4631      	mov	r1, r6
 800ca6c:	4638      	mov	r0, r7
 800ca6e:	eb04 0903 	add.w	r9, r4, r3
 800ca72:	f000 f8a5 	bl	800cbc0 <_sbrk_r>
 800ca76:	4581      	cmp	r9, r0
 800ca78:	d13f      	bne.n	800cafa <_malloc_r+0xe6>
 800ca7a:	6821      	ldr	r1, [r4, #0]
 800ca7c:	4638      	mov	r0, r7
 800ca7e:	1a6d      	subs	r5, r5, r1
 800ca80:	4629      	mov	r1, r5
 800ca82:	f7ff ffa7 	bl	800c9d4 <sbrk_aligned>
 800ca86:	3001      	adds	r0, #1
 800ca88:	d037      	beq.n	800cafa <_malloc_r+0xe6>
 800ca8a:	6823      	ldr	r3, [r4, #0]
 800ca8c:	442b      	add	r3, r5
 800ca8e:	6023      	str	r3, [r4, #0]
 800ca90:	f8d8 3000 	ldr.w	r3, [r8]
 800ca94:	2b00      	cmp	r3, #0
 800ca96:	d038      	beq.n	800cb0a <_malloc_r+0xf6>
 800ca98:	685a      	ldr	r2, [r3, #4]
 800ca9a:	42a2      	cmp	r2, r4
 800ca9c:	d12b      	bne.n	800caf6 <_malloc_r+0xe2>
 800ca9e:	2200      	movs	r2, #0
 800caa0:	605a      	str	r2, [r3, #4]
 800caa2:	e00f      	b.n	800cac4 <_malloc_r+0xb0>
 800caa4:	6822      	ldr	r2, [r4, #0]
 800caa6:	1b52      	subs	r2, r2, r5
 800caa8:	d41f      	bmi.n	800caea <_malloc_r+0xd6>
 800caaa:	2a0b      	cmp	r2, #11
 800caac:	d917      	bls.n	800cade <_malloc_r+0xca>
 800caae:	1961      	adds	r1, r4, r5
 800cab0:	42a3      	cmp	r3, r4
 800cab2:	6025      	str	r5, [r4, #0]
 800cab4:	bf18      	it	ne
 800cab6:	6059      	strne	r1, [r3, #4]
 800cab8:	6863      	ldr	r3, [r4, #4]
 800caba:	bf08      	it	eq
 800cabc:	f8c8 1000 	streq.w	r1, [r8]
 800cac0:	5162      	str	r2, [r4, r5]
 800cac2:	604b      	str	r3, [r1, #4]
 800cac4:	4638      	mov	r0, r7
 800cac6:	f104 060b 	add.w	r6, r4, #11
 800caca:	f000 f829 	bl	800cb20 <__malloc_unlock>
 800cace:	f026 0607 	bic.w	r6, r6, #7
 800cad2:	1d23      	adds	r3, r4, #4
 800cad4:	1af2      	subs	r2, r6, r3
 800cad6:	d0ae      	beq.n	800ca36 <_malloc_r+0x22>
 800cad8:	1b9b      	subs	r3, r3, r6
 800cada:	50a3      	str	r3, [r4, r2]
 800cadc:	e7ab      	b.n	800ca36 <_malloc_r+0x22>
 800cade:	42a3      	cmp	r3, r4
 800cae0:	6862      	ldr	r2, [r4, #4]
 800cae2:	d1dd      	bne.n	800caa0 <_malloc_r+0x8c>
 800cae4:	f8c8 2000 	str.w	r2, [r8]
 800cae8:	e7ec      	b.n	800cac4 <_malloc_r+0xb0>
 800caea:	4623      	mov	r3, r4
 800caec:	6864      	ldr	r4, [r4, #4]
 800caee:	e7ac      	b.n	800ca4a <_malloc_r+0x36>
 800caf0:	4634      	mov	r4, r6
 800caf2:	6876      	ldr	r6, [r6, #4]
 800caf4:	e7b4      	b.n	800ca60 <_malloc_r+0x4c>
 800caf6:	4613      	mov	r3, r2
 800caf8:	e7cc      	b.n	800ca94 <_malloc_r+0x80>
 800cafa:	230c      	movs	r3, #12
 800cafc:	4638      	mov	r0, r7
 800cafe:	603b      	str	r3, [r7, #0]
 800cb00:	f000 f80e 	bl	800cb20 <__malloc_unlock>
 800cb04:	e797      	b.n	800ca36 <_malloc_r+0x22>
 800cb06:	6025      	str	r5, [r4, #0]
 800cb08:	e7dc      	b.n	800cac4 <_malloc_r+0xb0>
 800cb0a:	605b      	str	r3, [r3, #4]
 800cb0c:	deff      	udf	#255	; 0xff
 800cb0e:	bf00      	nop
 800cb10:	20000dac 	.word	0x20000dac

0800cb14 <__malloc_lock>:
 800cb14:	4801      	ldr	r0, [pc, #4]	; (800cb1c <__malloc_lock+0x8>)
 800cb16:	f000 b88d 	b.w	800cc34 <__retarget_lock_acquire_recursive>
 800cb1a:	bf00      	nop
 800cb1c:	20000ef0 	.word	0x20000ef0

0800cb20 <__malloc_unlock>:
 800cb20:	4801      	ldr	r0, [pc, #4]	; (800cb28 <__malloc_unlock+0x8>)
 800cb22:	f000 b888 	b.w	800cc36 <__retarget_lock_release_recursive>
 800cb26:	bf00      	nop
 800cb28:	20000ef0 	.word	0x20000ef0

0800cb2c <__utoa>:
 800cb2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb2e:	b08b      	sub	sp, #44	; 0x2c
 800cb30:	4605      	mov	r5, r0
 800cb32:	460b      	mov	r3, r1
 800cb34:	466e      	mov	r6, sp
 800cb36:	4c1d      	ldr	r4, [pc, #116]	; (800cbac <__utoa+0x80>)
 800cb38:	f104 0c20 	add.w	ip, r4, #32
 800cb3c:	4637      	mov	r7, r6
 800cb3e:	6820      	ldr	r0, [r4, #0]
 800cb40:	6861      	ldr	r1, [r4, #4]
 800cb42:	3408      	adds	r4, #8
 800cb44:	c703      	stmia	r7!, {r0, r1}
 800cb46:	4564      	cmp	r4, ip
 800cb48:	463e      	mov	r6, r7
 800cb4a:	d1f7      	bne.n	800cb3c <__utoa+0x10>
 800cb4c:	7921      	ldrb	r1, [r4, #4]
 800cb4e:	6820      	ldr	r0, [r4, #0]
 800cb50:	7139      	strb	r1, [r7, #4]
 800cb52:	1e91      	subs	r1, r2, #2
 800cb54:	2922      	cmp	r1, #34	; 0x22
 800cb56:	6038      	str	r0, [r7, #0]
 800cb58:	f04f 0100 	mov.w	r1, #0
 800cb5c:	d904      	bls.n	800cb68 <__utoa+0x3c>
 800cb5e:	7019      	strb	r1, [r3, #0]
 800cb60:	460b      	mov	r3, r1
 800cb62:	4618      	mov	r0, r3
 800cb64:	b00b      	add	sp, #44	; 0x2c
 800cb66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb68:	1e58      	subs	r0, r3, #1
 800cb6a:	4684      	mov	ip, r0
 800cb6c:	fbb5 f7f2 	udiv	r7, r5, r2
 800cb70:	fb02 5617 	mls	r6, r2, r7, r5
 800cb74:	3628      	adds	r6, #40	; 0x28
 800cb76:	446e      	add	r6, sp
 800cb78:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800cb7c:	460c      	mov	r4, r1
 800cb7e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800cb82:	462e      	mov	r6, r5
 800cb84:	42b2      	cmp	r2, r6
 800cb86:	463d      	mov	r5, r7
 800cb88:	f101 0101 	add.w	r1, r1, #1
 800cb8c:	d9ee      	bls.n	800cb6c <__utoa+0x40>
 800cb8e:	2200      	movs	r2, #0
 800cb90:	545a      	strb	r2, [r3, r1]
 800cb92:	1919      	adds	r1, r3, r4
 800cb94:	1aa5      	subs	r5, r4, r2
 800cb96:	42aa      	cmp	r2, r5
 800cb98:	dae3      	bge.n	800cb62 <__utoa+0x36>
 800cb9a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800cb9e:	780e      	ldrb	r6, [r1, #0]
 800cba0:	3201      	adds	r2, #1
 800cba2:	7006      	strb	r6, [r0, #0]
 800cba4:	f801 5901 	strb.w	r5, [r1], #-1
 800cba8:	e7f4      	b.n	800cb94 <__utoa+0x68>
 800cbaa:	bf00      	nop
 800cbac:	0800d9fe 	.word	0x0800d9fe

0800cbb0 <memset>:
 800cbb0:	4603      	mov	r3, r0
 800cbb2:	4402      	add	r2, r0
 800cbb4:	4293      	cmp	r3, r2
 800cbb6:	d100      	bne.n	800cbba <memset+0xa>
 800cbb8:	4770      	bx	lr
 800cbba:	f803 1b01 	strb.w	r1, [r3], #1
 800cbbe:	e7f9      	b.n	800cbb4 <memset+0x4>

0800cbc0 <_sbrk_r>:
 800cbc0:	b538      	push	{r3, r4, r5, lr}
 800cbc2:	2300      	movs	r3, #0
 800cbc4:	4d05      	ldr	r5, [pc, #20]	; (800cbdc <_sbrk_r+0x1c>)
 800cbc6:	4604      	mov	r4, r0
 800cbc8:	4608      	mov	r0, r1
 800cbca:	602b      	str	r3, [r5, #0]
 800cbcc:	f7fc f86e 	bl	8008cac <_sbrk>
 800cbd0:	1c43      	adds	r3, r0, #1
 800cbd2:	d102      	bne.n	800cbda <_sbrk_r+0x1a>
 800cbd4:	682b      	ldr	r3, [r5, #0]
 800cbd6:	b103      	cbz	r3, 800cbda <_sbrk_r+0x1a>
 800cbd8:	6023      	str	r3, [r4, #0]
 800cbda:	bd38      	pop	{r3, r4, r5, pc}
 800cbdc:	20000eec 	.word	0x20000eec

0800cbe0 <__errno>:
 800cbe0:	4b01      	ldr	r3, [pc, #4]	; (800cbe8 <__errno+0x8>)
 800cbe2:	6818      	ldr	r0, [r3, #0]
 800cbe4:	4770      	bx	lr
 800cbe6:	bf00      	nop
 800cbe8:	20000a10 	.word	0x20000a10

0800cbec <__libc_init_array>:
 800cbec:	b570      	push	{r4, r5, r6, lr}
 800cbee:	2600      	movs	r6, #0
 800cbf0:	4d0c      	ldr	r5, [pc, #48]	; (800cc24 <__libc_init_array+0x38>)
 800cbf2:	4c0d      	ldr	r4, [pc, #52]	; (800cc28 <__libc_init_array+0x3c>)
 800cbf4:	1b64      	subs	r4, r4, r5
 800cbf6:	10a4      	asrs	r4, r4, #2
 800cbf8:	42a6      	cmp	r6, r4
 800cbfa:	d109      	bne.n	800cc10 <__libc_init_array+0x24>
 800cbfc:	f000 f824 	bl	800cc48 <_init>
 800cc00:	2600      	movs	r6, #0
 800cc02:	4d0a      	ldr	r5, [pc, #40]	; (800cc2c <__libc_init_array+0x40>)
 800cc04:	4c0a      	ldr	r4, [pc, #40]	; (800cc30 <__libc_init_array+0x44>)
 800cc06:	1b64      	subs	r4, r4, r5
 800cc08:	10a4      	asrs	r4, r4, #2
 800cc0a:	42a6      	cmp	r6, r4
 800cc0c:	d105      	bne.n	800cc1a <__libc_init_array+0x2e>
 800cc0e:	bd70      	pop	{r4, r5, r6, pc}
 800cc10:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc14:	4798      	blx	r3
 800cc16:	3601      	adds	r6, #1
 800cc18:	e7ee      	b.n	800cbf8 <__libc_init_array+0xc>
 800cc1a:	f855 3b04 	ldr.w	r3, [r5], #4
 800cc1e:	4798      	blx	r3
 800cc20:	3601      	adds	r6, #1
 800cc22:	e7f2      	b.n	800cc0a <__libc_init_array+0x1e>
 800cc24:	0800da24 	.word	0x0800da24
 800cc28:	0800da24 	.word	0x0800da24
 800cc2c:	0800da24 	.word	0x0800da24
 800cc30:	0800da28 	.word	0x0800da28

0800cc34 <__retarget_lock_acquire_recursive>:
 800cc34:	4770      	bx	lr

0800cc36 <__retarget_lock_release_recursive>:
 800cc36:	4770      	bx	lr

0800cc38 <strcpy>:
 800cc38:	4603      	mov	r3, r0
 800cc3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cc3e:	f803 2b01 	strb.w	r2, [r3], #1
 800cc42:	2a00      	cmp	r2, #0
 800cc44:	d1f9      	bne.n	800cc3a <strcpy+0x2>
 800cc46:	4770      	bx	lr

0800cc48 <_init>:
 800cc48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc4a:	bf00      	nop
 800cc4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc4e:	bc08      	pop	{r3}
 800cc50:	469e      	mov	lr, r3
 800cc52:	4770      	bx	lr

0800cc54 <_fini>:
 800cc54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc56:	bf00      	nop
 800cc58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc5a:	bc08      	pop	{r3}
 800cc5c:	469e      	mov	lr, r3
 800cc5e:	4770      	bx	lr
