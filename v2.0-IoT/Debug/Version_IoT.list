
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d8d8  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f04  0800dabc  0800dabc  0001dabc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e9c0  0800e9c0  00020a20  2**0
                  CONTENTS
  4 .ARM          00000000  0800e9c0  0800e9c0  00020a20  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e9c0  0800e9c0  00020a20  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e9c0  0800e9c0  0001e9c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e9c4  0800e9c4  0001e9c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a20  20000000  0800e9c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000670  20000a20  0800f3e8  00020a20  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001090  0800f3e8  00021090  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020a20  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020a49  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013810  00000000  00000000  00020a8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026b3  00000000  00000000  0003429c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011e0  00000000  00000000  00036950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e27  00000000  00000000  00037b30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001af02  00000000  00000000  00038957  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018a35  00000000  00000000  00053859  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009fdf4  00000000  00000000  0006c28e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000528c  00000000  00000000  0010c084  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00111310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000a20 	.word	0x20000a20
 8000200:	00000000 	.word	0x00000000
 8000204:	0800daa4 	.word	0x0800daa4

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000a24 	.word	0x20000a24
 8000220:	0800daa4 	.word	0x0800daa4

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <ESP8266_Init>:
#include "ESP8266.h"
#include "WifiData.h"

void ESP8266_Init(UART_HandleTypeDef *huart1, const char *wifiSS, const char *wifiPA) {
 8000234:	b580      	push	{r7, lr}
 8000236:	b09e      	sub	sp, #120	; 0x78
 8000238:	af00      	add	r7, sp, #0
 800023a:	60f8      	str	r0, [r7, #12]
 800023c:	60b9      	str	r1, [r7, #8]
 800023e:	607a      	str	r2, [r7, #4]
	sprintf(bufferTX, "AT+RESTORE\r\n");
 8000240:	4947      	ldr	r1, [pc, #284]	; (8000360 <ESP8266_Init+0x12c>)
 8000242:	4848      	ldr	r0, [pc, #288]	; (8000364 <ESP8266_Init+0x130>)
 8000244:	f00d f810 	bl	800d268 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000248:	4846      	ldr	r0, [pc, #280]	; (8000364 <ESP8266_Init+0x130>)
 800024a:	f7ff ffeb 	bl	8000224 <strlen>
 800024e:	4603      	mov	r3, r0
 8000250:	b29b      	uxth	r3, r3
 8000252:	461a      	mov	r2, r3
 8000254:	4943      	ldr	r1, [pc, #268]	; (8000364 <ESP8266_Init+0x130>)
 8000256:	68f8      	ldr	r0, [r7, #12]
 8000258:	f00c f9de 	bl	800c618 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 800025c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000260:	f009 f90e 	bl	8009480 <HAL_Delay>

	sprintf(bufferTX, "AT+RST\r\n");
 8000264:	4940      	ldr	r1, [pc, #256]	; (8000368 <ESP8266_Init+0x134>)
 8000266:	483f      	ldr	r0, [pc, #252]	; (8000364 <ESP8266_Init+0x130>)
 8000268:	f00c fffe 	bl	800d268 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 800026c:	483d      	ldr	r0, [pc, #244]	; (8000364 <ESP8266_Init+0x130>)
 800026e:	f7ff ffd9 	bl	8000224 <strlen>
 8000272:	4603      	mov	r3, r0
 8000274:	b29b      	uxth	r3, r3
 8000276:	461a      	mov	r2, r3
 8000278:	493a      	ldr	r1, [pc, #232]	; (8000364 <ESP8266_Init+0x130>)
 800027a:	68f8      	ldr	r0, [r7, #12]
 800027c:	f00c f9cc 	bl	800c618 <HAL_UART_Transmit_IT>
	HAL_Delay(1000);
 8000280:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000284:	f009 f8fc 	bl	8009480 <HAL_Delay>

	sprintf(bufferTX, "AT\r\n");
 8000288:	4938      	ldr	r1, [pc, #224]	; (800036c <ESP8266_Init+0x138>)
 800028a:	4836      	ldr	r0, [pc, #216]	; (8000364 <ESP8266_Init+0x130>)
 800028c:	f00c ffec 	bl	800d268 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000290:	4834      	ldr	r0, [pc, #208]	; (8000364 <ESP8266_Init+0x130>)
 8000292:	f7ff ffc7 	bl	8000224 <strlen>
 8000296:	4603      	mov	r3, r0
 8000298:	b29b      	uxth	r3, r3
 800029a:	461a      	mov	r2, r3
 800029c:	4931      	ldr	r1, [pc, #196]	; (8000364 <ESP8266_Init+0x130>)
 800029e:	68f8      	ldr	r0, [r7, #12]
 80002a0:	f00c f9ba 	bl	800c618 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80002a4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002a8:	f009 f8ea 	bl	8009480 <HAL_Delay>

	sprintf(bufferTX, "AT+CWMODE=1\r\n");
 80002ac:	4930      	ldr	r1, [pc, #192]	; (8000370 <ESP8266_Init+0x13c>)
 80002ae:	482d      	ldr	r0, [pc, #180]	; (8000364 <ESP8266_Init+0x130>)
 80002b0:	f00c ffda 	bl	800d268 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80002b4:	482b      	ldr	r0, [pc, #172]	; (8000364 <ESP8266_Init+0x130>)
 80002b6:	f7ff ffb5 	bl	8000224 <strlen>
 80002ba:	4603      	mov	r3, r0
 80002bc:	b29b      	uxth	r3, r3
 80002be:	461a      	mov	r2, r3
 80002c0:	4928      	ldr	r1, [pc, #160]	; (8000364 <ESP8266_Init+0x130>)
 80002c2:	68f8      	ldr	r0, [r7, #12]
 80002c4:	f00c f9a8 	bl	800c618 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80002c8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002cc:	f009 f8d8 	bl	8009480 <HAL_Delay>

	char str[100];
	strcpy(str, "AT+CWJAP=\"");
 80002d0:	f107 0314 	add.w	r3, r7, #20
 80002d4:	4a27      	ldr	r2, [pc, #156]	; (8000374 <ESP8266_Init+0x140>)
 80002d6:	ca07      	ldmia	r2, {r0, r1, r2}
 80002d8:	c303      	stmia	r3!, {r0, r1}
 80002da:	801a      	strh	r2, [r3, #0]
 80002dc:	3302      	adds	r3, #2
 80002de:	0c12      	lsrs	r2, r2, #16
 80002e0:	701a      	strb	r2, [r3, #0]
	strcat(str, wifiSS);
 80002e2:	f107 0314 	add.w	r3, r7, #20
 80002e6:	68b9      	ldr	r1, [r7, #8]
 80002e8:	4618      	mov	r0, r3
 80002ea:	f00c ffe5 	bl	800d2b8 <strcat>
	strcat(str, "\",\"");
 80002ee:	f107 0314 	add.w	r3, r7, #20
 80002f2:	4618      	mov	r0, r3
 80002f4:	f7ff ff96 	bl	8000224 <strlen>
 80002f8:	4603      	mov	r3, r0
 80002fa:	461a      	mov	r2, r3
 80002fc:	f107 0314 	add.w	r3, r7, #20
 8000300:	4413      	add	r3, r2
 8000302:	4a1d      	ldr	r2, [pc, #116]	; (8000378 <ESP8266_Init+0x144>)
 8000304:	6810      	ldr	r0, [r2, #0]
 8000306:	6018      	str	r0, [r3, #0]
	strcat(str, wifiPA);
 8000308:	f107 0314 	add.w	r3, r7, #20
 800030c:	6879      	ldr	r1, [r7, #4]
 800030e:	4618      	mov	r0, r3
 8000310:	f00c ffd2 	bl	800d2b8 <strcat>
	strcat(str, "\"\r\n");
 8000314:	f107 0314 	add.w	r3, r7, #20
 8000318:	4618      	mov	r0, r3
 800031a:	f7ff ff83 	bl	8000224 <strlen>
 800031e:	4603      	mov	r3, r0
 8000320:	461a      	mov	r2, r3
 8000322:	f107 0314 	add.w	r3, r7, #20
 8000326:	4413      	add	r3, r2
 8000328:	4a14      	ldr	r2, [pc, #80]	; (800037c <ESP8266_Init+0x148>)
 800032a:	6810      	ldr	r0, [r2, #0]
 800032c:	6018      	str	r0, [r3, #0]
	sprintf(bufferTX, "%s", str);
 800032e:	f107 0314 	add.w	r3, r7, #20
 8000332:	461a      	mov	r2, r3
 8000334:	4912      	ldr	r1, [pc, #72]	; (8000380 <ESP8266_Init+0x14c>)
 8000336:	480b      	ldr	r0, [pc, #44]	; (8000364 <ESP8266_Init+0x130>)
 8000338:	f00c ff96 	bl	800d268 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 800033c:	4809      	ldr	r0, [pc, #36]	; (8000364 <ESP8266_Init+0x130>)
 800033e:	f7ff ff71 	bl	8000224 <strlen>
 8000342:	4603      	mov	r3, r0
 8000344:	b29b      	uxth	r3, r3
 8000346:	461a      	mov	r2, r3
 8000348:	4906      	ldr	r1, [pc, #24]	; (8000364 <ESP8266_Init+0x130>)
 800034a:	68f8      	ldr	r0, [r7, #12]
 800034c:	f00c f964 	bl	800c618 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000350:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000354:	f009 f894 	bl	8009480 <HAL_Delay>
}
 8000358:	bf00      	nop
 800035a:	3778      	adds	r7, #120	; 0x78
 800035c:	46bd      	mov	sp, r7
 800035e:	bd80      	pop	{r7, pc}
 8000360:	0800dabc 	.word	0x0800dabc
 8000364:	20000a3c 	.word	0x20000a3c
 8000368:	0800dacc 	.word	0x0800dacc
 800036c:	0800dad8 	.word	0x0800dad8
 8000370:	0800dae0 	.word	0x0800dae0
 8000374:	0800daf0 	.word	0x0800daf0
 8000378:	0800dafc 	.word	0x0800dafc
 800037c:	0800db00 	.word	0x0800db00
 8000380:	0800db04 	.word	0x0800db04

08000384 <sendMachineData>:

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *machineData) {
 8000384:	b580      	push	{r7, lr}
 8000386:	b0c6      	sub	sp, #280	; 0x118
 8000388:	af02      	add	r7, sp, #8
 800038a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800038e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000392:	6018      	str	r0, [r3, #0]
 8000394:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000398:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800039c:	6019      	str	r1, [r3, #0]
 800039e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80003a2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80003a6:	601a      	str	r2, [r3, #0]
	char local_txA[200];
	char local_txB[50];
	int len;

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", Server);
 80003a8:	4a31      	ldr	r2, [pc, #196]	; (8000470 <sendMachineData+0xec>)
 80003aa:	4932      	ldr	r1, [pc, #200]	; (8000474 <sendMachineData+0xf0>)
 80003ac:	4832      	ldr	r0, [pc, #200]	; (8000478 <sendMachineData+0xf4>)
 80003ae:	f00c ff5b 	bl	800d268 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 80003b2:	4831      	ldr	r0, [pc, #196]	; (8000478 <sendMachineData+0xf4>)
 80003b4:	f7ff ff36 	bl	8000224 <strlen>
 80003b8:	4603      	mov	r3, r0
 80003ba:	b29a      	uxth	r2, r3
 80003bc:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80003c0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80003c4:	492c      	ldr	r1, [pc, #176]	; (8000478 <sendMachineData+0xf4>)
 80003c6:	6818      	ldr	r0, [r3, #0]
 80003c8:	f00c f926 	bl	800c618 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80003cc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80003d0:	f009 f856 	bl	8009480 <HAL_Delay>

	sprintf(local_txA,
 80003d4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80003d8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80003dc:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80003e0:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 80003e4:	f107 0044 	add.w	r0, r7, #68	; 0x44
 80003e8:	4924      	ldr	r1, [pc, #144]	; (800047c <sendMachineData+0xf8>)
 80003ea:	9100      	str	r1, [sp, #0]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	6812      	ldr	r2, [r2, #0]
 80003f0:	4923      	ldr	r1, [pc, #140]	; (8000480 <sendMachineData+0xfc>)
 80003f2:	f00c ff39 	bl	800d268 <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", machineID, machineData, Server2);
	len = strlen(local_txA);
 80003f6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80003fa:	4618      	mov	r0, r3
 80003fc:	f7ff ff12 	bl	8000224 <strlen>
 8000400:	4603      	mov	r3, r0
 8000402:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 8000406:	f107 0310 	add.w	r3, r7, #16
 800040a:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 800040e:	491d      	ldr	r1, [pc, #116]	; (8000484 <sendMachineData+0x100>)
 8000410:	4618      	mov	r0, r3
 8000412:	f00c ff29 	bl	800d268 <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 8000416:	f107 0310 	add.w	r3, r7, #16
 800041a:	4618      	mov	r0, r3
 800041c:	f7ff ff02 	bl	8000224 <strlen>
 8000420:	4603      	mov	r3, r0
 8000422:	b29a      	uxth	r2, r3
 8000424:	f107 0110 	add.w	r1, r7, #16
 8000428:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800042c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000430:	6818      	ldr	r0, [r3, #0]
 8000432:	f00c f8f1 	bl	800c618 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 8000436:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800043a:	f009 f821 	bl	8009480 <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 800043e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000442:	4618      	mov	r0, r3
 8000444:	f7ff feee 	bl	8000224 <strlen>
 8000448:	4603      	mov	r3, r0
 800044a:	b29a      	uxth	r2, r3
 800044c:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000450:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000454:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000458:	6818      	ldr	r0, [r3, #0]
 800045a:	f00c f8dd 	bl	800c618 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 800045e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000462:	f009 f80d 	bl	8009480 <HAL_Delay>
}
 8000466:	bf00      	nop
 8000468:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800046c:	46bd      	mov	sp, r7
 800046e:	bd80      	pop	{r7, pc}
 8000470:	0800db08 	.word	0x0800db08
 8000474:	0800db18 	.word	0x0800db18
 8000478:	20000a3c 	.word	0x20000a3c
 800047c:	0800db94 	.word	0x0800db94
 8000480:	0800db38 	.word	0x0800db38
 8000484:	0800dba8 	.word	0x0800dba8

08000488 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8000488:	b580      	push	{r7, lr}
 800048a:	b086      	sub	sp, #24
 800048c:	af02      	add	r7, sp, #8
 800048e:	4603      	mov	r3, r0
 8000490:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000492:	79fb      	ldrb	r3, [r7, #7]
 8000494:	f023 030f 	bic.w	r3, r3, #15
 8000498:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 800049a:	79fb      	ldrb	r3, [r7, #7]
 800049c:	011b      	lsls	r3, r3, #4
 800049e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80004a0:	7b7b      	ldrb	r3, [r7, #13]
 80004a2:	f043 030c 	orr.w	r3, r3, #12
 80004a6:	b2db      	uxtb	r3, r3
 80004a8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80004aa:	7b7b      	ldrb	r3, [r7, #13]
 80004ac:	f043 0308 	orr.w	r3, r3, #8
 80004b0:	b2db      	uxtb	r3, r3
 80004b2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80004b4:	7b3b      	ldrb	r3, [r7, #12]
 80004b6:	f043 030c 	orr.w	r3, r3, #12
 80004ba:	b2db      	uxtb	r3, r3
 80004bc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80004be:	7b3b      	ldrb	r3, [r7, #12]
 80004c0:	f043 0308 	orr.w	r3, r3, #8
 80004c4:	b2db      	uxtb	r3, r3
 80004c6:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80004c8:	bf00      	nop
 80004ca:	4825      	ldr	r0, [pc, #148]	; (8000560 <lcd_send_cmd+0xd8>)
 80004cc:	f00a fbd1 	bl	800ac72 <HAL_I2C_GetError>
 80004d0:	4603      	mov	r3, r0
 80004d2:	2b04      	cmp	r3, #4
 80004d4:	d0f9      	beq.n	80004ca <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80004d6:	bf00      	nop
 80004d8:	4821      	ldr	r0, [pc, #132]	; (8000560 <lcd_send_cmd+0xd8>)
 80004da:	f00a fbbd 	bl	800ac58 <HAL_I2C_GetState>
 80004de:	4603      	mov	r3, r0
 80004e0:	2b20      	cmp	r3, #32
 80004e2:	d1f9      	bne.n	80004d8 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 80004e4:	4b1f      	ldr	r3, [pc, #124]	; (8000564 <lcd_send_cmd+0xdc>)
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d116      	bne.n	800051a <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80004ec:	2300      	movs	r3, #0
 80004ee:	73fb      	strb	r3, [r7, #15]
 80004f0:	e00f      	b.n	8000512 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 80004f2:	7bfb      	ldrb	r3, [r7, #15]
 80004f4:	3310      	adds	r3, #16
 80004f6:	443b      	add	r3, r7
 80004f8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80004fc:	7bfb      	ldrb	r3, [r7, #15]
 80004fe:	f022 0208 	bic.w	r2, r2, #8
 8000502:	b2d2      	uxtb	r2, r2
 8000504:	3310      	adds	r3, #16
 8000506:	443b      	add	r3, r7
 8000508:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800050c:	7bfb      	ldrb	r3, [r7, #15]
 800050e:	3301      	adds	r3, #1
 8000510:	73fb      	strb	r3, [r7, #15]
 8000512:	7bfb      	ldrb	r3, [r7, #15]
 8000514:	2b03      	cmp	r3, #3
 8000516:	d9ec      	bls.n	80004f2 <lcd_send_cmd+0x6a>
 8000518:	e015      	b.n	8000546 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 800051a:	2300      	movs	r3, #0
 800051c:	73bb      	strb	r3, [r7, #14]
 800051e:	e00f      	b.n	8000540 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8000520:	7bbb      	ldrb	r3, [r7, #14]
 8000522:	3310      	adds	r3, #16
 8000524:	443b      	add	r3, r7
 8000526:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800052a:	7bbb      	ldrb	r3, [r7, #14]
 800052c:	f042 0208 	orr.w	r2, r2, #8
 8000530:	b2d2      	uxtb	r2, r2
 8000532:	3310      	adds	r3, #16
 8000534:	443b      	add	r3, r7
 8000536:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800053a:	7bbb      	ldrb	r3, [r7, #14]
 800053c:	3301      	adds	r3, #1
 800053e:	73bb      	strb	r3, [r7, #14]
 8000540:	7bbb      	ldrb	r3, [r7, #14]
 8000542:	2b03      	cmp	r3, #3
 8000544:	d9ec      	bls.n	8000520 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000546:	f107 0208 	add.w	r2, r7, #8
 800054a:	2364      	movs	r3, #100	; 0x64
 800054c:	9300      	str	r3, [sp, #0]
 800054e:	2304      	movs	r3, #4
 8000550:	214e      	movs	r1, #78	; 0x4e
 8000552:	4803      	ldr	r0, [pc, #12]	; (8000560 <lcd_send_cmd+0xd8>)
 8000554:	f009 ff20 	bl	800a398 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000558:	bf00      	nop
 800055a:	3710      	adds	r7, #16
 800055c:	46bd      	mov	sp, r7
 800055e:	bd80      	pop	{r7, pc}
 8000560:	20000e5c 	.word	0x20000e5c
 8000564:	20000b36 	.word	0x20000b36

08000568 <lcd_send_data>:

void lcd_send_data (char data) {
 8000568:	b580      	push	{r7, lr}
 800056a:	b086      	sub	sp, #24
 800056c:	af02      	add	r7, sp, #8
 800056e:	4603      	mov	r3, r0
 8000570:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000572:	79fb      	ldrb	r3, [r7, #7]
 8000574:	f023 030f 	bic.w	r3, r3, #15
 8000578:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 800057a:	79fb      	ldrb	r3, [r7, #7]
 800057c:	011b      	lsls	r3, r3, #4
 800057e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000580:	7b7b      	ldrb	r3, [r7, #13]
 8000582:	f043 030d 	orr.w	r3, r3, #13
 8000586:	b2db      	uxtb	r3, r3
 8000588:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800058a:	7b7b      	ldrb	r3, [r7, #13]
 800058c:	f043 0309 	orr.w	r3, r3, #9
 8000590:	b2db      	uxtb	r3, r3
 8000592:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000594:	7b3b      	ldrb	r3, [r7, #12]
 8000596:	f043 030d 	orr.w	r3, r3, #13
 800059a:	b2db      	uxtb	r3, r3
 800059c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800059e:	7b3b      	ldrb	r3, [r7, #12]
 80005a0:	f043 0309 	orr.w	r3, r3, #9
 80005a4:	b2db      	uxtb	r3, r3
 80005a6:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80005a8:	bf00      	nop
 80005aa:	4825      	ldr	r0, [pc, #148]	; (8000640 <lcd_send_data+0xd8>)
 80005ac:	f00a fb61 	bl	800ac72 <HAL_I2C_GetError>
 80005b0:	4603      	mov	r3, r0
 80005b2:	2b04      	cmp	r3, #4
 80005b4:	d0f9      	beq.n	80005aa <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80005b6:	bf00      	nop
 80005b8:	4821      	ldr	r0, [pc, #132]	; (8000640 <lcd_send_data+0xd8>)
 80005ba:	f00a fb4d 	bl	800ac58 <HAL_I2C_GetState>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b20      	cmp	r3, #32
 80005c2:	d1f9      	bne.n	80005b8 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 80005c4:	4b1f      	ldr	r3, [pc, #124]	; (8000644 <lcd_send_data+0xdc>)
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d116      	bne.n	80005fa <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80005cc:	2300      	movs	r3, #0
 80005ce:	73fb      	strb	r3, [r7, #15]
 80005d0:	e00f      	b.n	80005f2 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 80005d2:	7bfb      	ldrb	r3, [r7, #15]
 80005d4:	3310      	adds	r3, #16
 80005d6:	443b      	add	r3, r7
 80005d8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80005dc:	7bfb      	ldrb	r3, [r7, #15]
 80005de:	f022 0208 	bic.w	r2, r2, #8
 80005e2:	b2d2      	uxtb	r2, r2
 80005e4:	3310      	adds	r3, #16
 80005e6:	443b      	add	r3, r7
 80005e8:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80005ec:	7bfb      	ldrb	r3, [r7, #15]
 80005ee:	3301      	adds	r3, #1
 80005f0:	73fb      	strb	r3, [r7, #15]
 80005f2:	7bfb      	ldrb	r3, [r7, #15]
 80005f4:	2b03      	cmp	r3, #3
 80005f6:	d9ec      	bls.n	80005d2 <lcd_send_data+0x6a>
 80005f8:	e015      	b.n	8000626 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80005fa:	2300      	movs	r3, #0
 80005fc:	73bb      	strb	r3, [r7, #14]
 80005fe:	e00f      	b.n	8000620 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8000600:	7bbb      	ldrb	r3, [r7, #14]
 8000602:	3310      	adds	r3, #16
 8000604:	443b      	add	r3, r7
 8000606:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800060a:	7bbb      	ldrb	r3, [r7, #14]
 800060c:	f042 0208 	orr.w	r2, r2, #8
 8000610:	b2d2      	uxtb	r2, r2
 8000612:	3310      	adds	r3, #16
 8000614:	443b      	add	r3, r7
 8000616:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800061a:	7bbb      	ldrb	r3, [r7, #14]
 800061c:	3301      	adds	r3, #1
 800061e:	73bb      	strb	r3, [r7, #14]
 8000620:	7bbb      	ldrb	r3, [r7, #14]
 8000622:	2b03      	cmp	r3, #3
 8000624:	d9ec      	bls.n	8000600 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000626:	f107 0208 	add.w	r2, r7, #8
 800062a:	2364      	movs	r3, #100	; 0x64
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	2304      	movs	r3, #4
 8000630:	214e      	movs	r1, #78	; 0x4e
 8000632:	4803      	ldr	r0, [pc, #12]	; (8000640 <lcd_send_data+0xd8>)
 8000634:	f009 feb0 	bl	800a398 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000638:	bf00      	nop
 800063a:	3710      	adds	r7, #16
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	20000e5c 	.word	0x20000e5c
 8000644:	20000b36 	.word	0x20000b36

08000648 <lcd_send_string>:

void lcd_send_string (char *str) {
 8000648:	b580      	push	{r7, lr}
 800064a:	b082      	sub	sp, #8
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
	while (*str) {
 8000650:	e006      	b.n	8000660 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	1c5a      	adds	r2, r3, #1
 8000656:	607a      	str	r2, [r7, #4]
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff ff84 	bl	8000568 <lcd_send_data>
	while (*str) {
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	781b      	ldrb	r3, [r3, #0]
 8000664:	2b00      	cmp	r3, #0
 8000666:	d1f4      	bne.n	8000652 <lcd_send_string+0xa>
	}
}
 8000668:	bf00      	nop
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
	...

08000674 <lcd_send_char>:

void lcd_send_char(char ch) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af02      	add	r7, sp, #8
 800067a:	4603      	mov	r3, r0
 800067c:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 800067e:	79fb      	ldrb	r3, [r7, #7]
 8000680:	f023 030f 	bic.w	r3, r3, #15
 8000684:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	011b      	lsls	r3, r3, #4
 800068a:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 800068c:	7b7b      	ldrb	r3, [r7, #13]
 800068e:	f043 030d 	orr.w	r3, r3, #13
 8000692:	b2db      	uxtb	r3, r3
 8000694:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8000696:	7b7b      	ldrb	r3, [r7, #13]
 8000698:	f043 0309 	orr.w	r3, r3, #9
 800069c:	b2db      	uxtb	r3, r3
 800069e:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 80006a0:	7b3b      	ldrb	r3, [r7, #12]
 80006a2:	f043 030d 	orr.w	r3, r3, #13
 80006a6:	b2db      	uxtb	r3, r3
 80006a8:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 80006aa:	7b3b      	ldrb	r3, [r7, #12]
 80006ac:	f043 0309 	orr.w	r3, r3, #9
 80006b0:	b2db      	uxtb	r3, r3
 80006b2:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80006b4:	bf00      	nop
 80006b6:	4825      	ldr	r0, [pc, #148]	; (800074c <lcd_send_char+0xd8>)
 80006b8:	f00a fadb 	bl	800ac72 <HAL_I2C_GetError>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b04      	cmp	r3, #4
 80006c0:	d0f9      	beq.n	80006b6 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80006c2:	bf00      	nop
 80006c4:	4821      	ldr	r0, [pc, #132]	; (800074c <lcd_send_char+0xd8>)
 80006c6:	f00a fac7 	bl	800ac58 <HAL_I2C_GetState>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b20      	cmp	r3, #32
 80006ce:	d1f9      	bne.n	80006c4 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 80006d0:	4b1f      	ldr	r3, [pc, #124]	; (8000750 <lcd_send_char+0xdc>)
 80006d2:	781b      	ldrb	r3, [r3, #0]
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d116      	bne.n	8000706 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 80006d8:	2300      	movs	r3, #0
 80006da:	73fb      	strb	r3, [r7, #15]
 80006dc:	e00f      	b.n	80006fe <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 80006de:	7bfb      	ldrb	r3, [r7, #15]
 80006e0:	3310      	adds	r3, #16
 80006e2:	443b      	add	r3, r7
 80006e4:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80006e8:	7bfb      	ldrb	r3, [r7, #15]
 80006ea:	f022 0208 	bic.w	r2, r2, #8
 80006ee:	b2d2      	uxtb	r2, r2
 80006f0:	3310      	adds	r3, #16
 80006f2:	443b      	add	r3, r7
 80006f4:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80006f8:	7bfb      	ldrb	r3, [r7, #15]
 80006fa:	3301      	adds	r3, #1
 80006fc:	73fb      	strb	r3, [r7, #15]
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
 8000700:	2b03      	cmp	r3, #3
 8000702:	d9ec      	bls.n	80006de <lcd_send_char+0x6a>
 8000704:	e015      	b.n	8000732 <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 8000706:	2300      	movs	r3, #0
 8000708:	73bb      	strb	r3, [r7, #14]
 800070a:	e00f      	b.n	800072c <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 800070c:	7bbb      	ldrb	r3, [r7, #14]
 800070e:	3310      	adds	r3, #16
 8000710:	443b      	add	r3, r7
 8000712:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000716:	7bbb      	ldrb	r3, [r7, #14]
 8000718:	f042 0208 	orr.w	r2, r2, #8
 800071c:	b2d2      	uxtb	r2, r2
 800071e:	3310      	adds	r3, #16
 8000720:	443b      	add	r3, r7
 8000722:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 8000726:	7bbb      	ldrb	r3, [r7, #14]
 8000728:	3301      	adds	r3, #1
 800072a:	73bb      	strb	r3, [r7, #14]
 800072c:	7bbb      	ldrb	r3, [r7, #14]
 800072e:	2b03      	cmp	r3, #3
 8000730:	d9ec      	bls.n	800070c <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 8000732:	f107 0208 	add.w	r2, r7, #8
 8000736:	2364      	movs	r3, #100	; 0x64
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	2304      	movs	r3, #4
 800073c:	214e      	movs	r1, #78	; 0x4e
 800073e:	4803      	ldr	r0, [pc, #12]	; (800074c <lcd_send_char+0xd8>)
 8000740:	f009 fe2a 	bl	800a398 <HAL_I2C_Master_Transmit>
}
 8000744:	bf00      	nop
 8000746:	3710      	adds	r7, #16
 8000748:	46bd      	mov	sp, r7
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000e5c 	.word	0x20000e5c
 8000750:	20000b36 	.word	0x20000b36

08000754 <lcd_init>:

void lcd_init (void) {
 8000754:	b580      	push	{r7, lr}
 8000756:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8000758:	2002      	movs	r0, #2
 800075a:	f7ff fe95 	bl	8000488 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 800075e:	2028      	movs	r0, #40	; 0x28
 8000760:	f7ff fe92 	bl	8000488 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8000764:	200c      	movs	r0, #12
 8000766:	f7ff fe8f 	bl	8000488 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 800076a:	2080      	movs	r0, #128	; 0x80
 800076c:	f7ff fe8c 	bl	8000488 <lcd_send_cmd>
	lcd_backlight(1);
 8000770:	2001      	movs	r0, #1
 8000772:	f000 f86d 	bl	8000850 <lcd_backlight>
}
 8000776:	bf00      	nop
 8000778:	bd80      	pop	{r7, pc}

0800077a <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 800077a:	b580      	push	{r7, lr}
 800077c:	b082      	sub	sp, #8
 800077e:	af00      	add	r7, sp, #0
 8000780:	4603      	mov	r3, r0
 8000782:	460a      	mov	r2, r1
 8000784:	71fb      	strb	r3, [r7, #7]
 8000786:	4613      	mov	r3, r2
 8000788:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	2b01      	cmp	r3, #1
 800078e:	d106      	bne.n	800079e <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8000790:	79bb      	ldrb	r3, [r7, #6]
 8000792:	337f      	adds	r3, #127	; 0x7f
 8000794:	b2db      	uxtb	r3, r3
 8000796:	4618      	mov	r0, r3
 8000798:	f7ff fe76 	bl	8000488 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 800079c:	e008      	b.n	80007b0 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 800079e:	79fb      	ldrb	r3, [r7, #7]
 80007a0:	2b02      	cmp	r3, #2
 80007a2:	d105      	bne.n	80007b0 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 80007a4:	79bb      	ldrb	r3, [r7, #6]
 80007a6:	3b41      	subs	r3, #65	; 0x41
 80007a8:	b2db      	uxtb	r3, r3
 80007aa:	4618      	mov	r0, r3
 80007ac:	f7ff fe6c 	bl	8000488 <lcd_send_cmd>
}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}

080007b8 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	603a      	str	r2, [r7, #0]
 80007c2:	71fb      	strb	r3, [r7, #7]
 80007c4:	460b      	mov	r3, r1
 80007c6:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 80007c8:	79ba      	ldrb	r2, [r7, #6]
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	4611      	mov	r1, r2
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff ffd3 	bl	800077a <lcd_gotoxy>
	lcd_send_string(str);
 80007d4:	6838      	ldr	r0, [r7, #0]
 80007d6:	f7ff ff37 	bl	8000648 <lcd_send_string>
}
 80007da:	bf00      	nop
 80007dc:	3708      	adds	r7, #8
 80007de:	46bd      	mov	sp, r7
 80007e0:	bd80      	pop	{r7, pc}

080007e2 <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 80007e2:	b580      	push	{r7, lr}
 80007e4:	b082      	sub	sp, #8
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	4603      	mov	r3, r0
 80007ea:	71fb      	strb	r3, [r7, #7]
 80007ec:	460b      	mov	r3, r1
 80007ee:	71bb      	strb	r3, [r7, #6]
 80007f0:	4613      	mov	r3, r2
 80007f2:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 80007f4:	79ba      	ldrb	r2, [r7, #6]
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	4611      	mov	r1, r2
 80007fa:	4618      	mov	r0, r3
 80007fc:	f7ff ffbd 	bl	800077a <lcd_gotoxy>
    lcd_send_char(ch);
 8000800:	797b      	ldrb	r3, [r7, #5]
 8000802:	4618      	mov	r0, r3
 8000804:	f7ff ff36 	bl	8000674 <lcd_send_char>
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}

08000810 <lcd_clear>:

void lcd_clear(void) {
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8000814:	2001      	movs	r0, #1
 8000816:	f7ff fe37 	bl	8000488 <lcd_send_cmd>
    HAL_Delay(2);
 800081a:	2002      	movs	r0, #2
 800081c:	f008 fe30 	bl	8009480 <HAL_Delay>
}
 8000820:	bf00      	nop
 8000822:	bd80      	pop	{r7, pc}

08000824 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	460a      	mov	r2, r1
 800082e:	71fb      	strb	r3, [r7, #7]
 8000830:	4613      	mov	r3, r2
 8000832:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 8000834:	79ba      	ldrb	r2, [r7, #6]
 8000836:	79fb      	ldrb	r3, [r7, #7]
 8000838:	4611      	mov	r1, r2
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff ff9d 	bl	800077a <lcd_gotoxy>

    lcd_send_char(' ');
 8000840:	2020      	movs	r0, #32
 8000842:	f7ff ff17 	bl	8000674 <lcd_send_char>
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
	...

08000850 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
 8000856:	4603      	mov	r3, r0
 8000858:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 800085a:	4a05      	ldr	r2, [pc, #20]	; (8000870 <lcd_backlight+0x20>)
 800085c:	79fb      	ldrb	r3, [r7, #7]
 800085e:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8000860:	2000      	movs	r0, #0
 8000862:	f7ff fe11 	bl	8000488 <lcd_send_cmd>
}
 8000866:	bf00      	nop
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
 800086e:	bf00      	nop
 8000870:	20000b36 	.word	0x20000b36

08000874 <lcd_cursor>:

void lcd_cursor(int state) {
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2b01      	cmp	r3, #1
 8000880:	d106      	bne.n	8000890 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8000882:	200e      	movs	r0, #14
 8000884:	f7ff fe00 	bl	8000488 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8000888:	200f      	movs	r0, #15
 800088a:	f7ff fdfd 	bl	8000488 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 800088e:	e002      	b.n	8000896 <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8000890:	200c      	movs	r0, #12
 8000892:	f7ff fdf9 	bl	8000488 <lcd_send_cmd>
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
	...

080008a0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80008a4:	f3bf 8f4f 	dsb	sy
}
 80008a8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <__NVIC_SystemReset+0x24>)
 80008ac:	68db      	ldr	r3, [r3, #12]
 80008ae:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80008b2:	4904      	ldr	r1, [pc, #16]	; (80008c4 <__NVIC_SystemReset+0x24>)
 80008b4:	4b04      	ldr	r3, [pc, #16]	; (80008c8 <__NVIC_SystemReset+0x28>)
 80008b6:	4313      	orrs	r3, r2
 80008b8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80008ba:	f3bf 8f4f 	dsb	sy
}
 80008be:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80008c0:	bf00      	nop
 80008c2:	e7fd      	b.n	80008c0 <__NVIC_SystemReset+0x20>
 80008c4:	e000ed00 	.word	0xe000ed00
 80008c8:	05fa0004 	.word	0x05fa0004

080008cc <copyText>:
char *secilenDilText;
char *menudenCikisText;
char *enteraBasinizText;
char *hataKoduText;

char* copyText(const char* text) {
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b084      	sub	sp, #16
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
    char* result = (char*)malloc(strlen(text) + 1);
 80008d4:	6878      	ldr	r0, [r7, #4]
 80008d6:	f7ff fca5 	bl	8000224 <strlen>
 80008da:	4603      	mov	r3, r0
 80008dc:	3301      	adds	r3, #1
 80008de:	4618      	mov	r0, r3
 80008e0:	f00c fbcc 	bl	800d07c <malloc>
 80008e4:	4603      	mov	r3, r0
 80008e6:	60fb      	str	r3, [r7, #12]
    if (result != NULL) {
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d003      	beq.n	80008f6 <copyText+0x2a>
        strcpy(result, text);
 80008ee:	6879      	ldr	r1, [r7, #4]
 80008f0:	68f8      	ldr	r0, [r7, #12]
 80008f2:	f00c fd2d 	bl	800d350 <strcpy>
    }
    return result;
 80008f6:	68fb      	ldr	r3, [r7, #12]
}
 80008f8:	4618      	mov	r0, r3
 80008fa:	3710      	adds	r7, #16
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}

08000900 <printTemplate>:
        }
    }
    return result;
}

void printTemplate(int type, int page) {
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
 8000908:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 800090a:	20c8      	movs	r0, #200	; 0xc8
 800090c:	f008 fdb8 	bl	8009480 <HAL_Delay>
	lcd_clear();
 8000910:	f7ff ff7e 	bl	8000810 <lcd_clear>
	if(type == 1 && page == 0) {
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	2b01      	cmp	r3, #1
 8000918:	d143      	bne.n	80009a2 <printTemplate+0xa2>
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d140      	bne.n	80009a2 <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 8000920:	4ac1      	ldr	r2, [pc, #772]	; (8000c28 <printTemplate+0x328>)
 8000922:	2101      	movs	r1, #1
 8000924:	2001      	movs	r0, #1
 8000926:	f7ff ff47 	bl	80007b8 <lcd_print>
		lcd_print(2, 3, "0");
 800092a:	4ac0      	ldr	r2, [pc, #768]	; (8000c2c <printTemplate+0x32c>)
 800092c:	2103      	movs	r1, #3
 800092e:	2002      	movs	r0, #2
 8000930:	f7ff ff42 	bl	80007b8 <lcd_print>
		lcd_print(2, 4, "1");
 8000934:	4abe      	ldr	r2, [pc, #760]	; (8000c30 <printTemplate+0x330>)
 8000936:	2104      	movs	r1, #4
 8000938:	2002      	movs	r0, #2
 800093a:	f7ff ff3d 	bl	80007b8 <lcd_print>
		lcd_print(2, 5, "2");
 800093e:	4abd      	ldr	r2, [pc, #756]	; (8000c34 <printTemplate+0x334>)
 8000940:	2105      	movs	r1, #5
 8000942:	2002      	movs	r0, #2
 8000944:	f7ff ff38 	bl	80007b8 <lcd_print>
		lcd_print(2, 6, "3");
 8000948:	4abb      	ldr	r2, [pc, #748]	; (8000c38 <printTemplate+0x338>)
 800094a:	2106      	movs	r1, #6
 800094c:	2002      	movs	r0, #2
 800094e:	f7ff ff33 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "4");
 8000952:	4aba      	ldr	r2, [pc, #744]	; (8000c3c <printTemplate+0x33c>)
 8000954:	2107      	movs	r1, #7
 8000956:	2002      	movs	r0, #2
 8000958:	f7ff ff2e 	bl	80007b8 <lcd_print>
		lcd_print(2, 10, "5");
 800095c:	4ab8      	ldr	r2, [pc, #736]	; (8000c40 <printTemplate+0x340>)
 800095e:	210a      	movs	r1, #10
 8000960:	2002      	movs	r0, #2
 8000962:	f7ff ff29 	bl	80007b8 <lcd_print>
		lcd_print(2, 11, "6");
 8000966:	4ab7      	ldr	r2, [pc, #732]	; (8000c44 <printTemplate+0x344>)
 8000968:	210b      	movs	r1, #11
 800096a:	2002      	movs	r0, #2
 800096c:	f7ff ff24 	bl	80007b8 <lcd_print>
		lcd_print(2, 12, "7");
 8000970:	4ab5      	ldr	r2, [pc, #724]	; (8000c48 <printTemplate+0x348>)
 8000972:	210c      	movs	r1, #12
 8000974:	2002      	movs	r0, #2
 8000976:	f7ff ff1f 	bl	80007b8 <lcd_print>
		lcd_print(2, 13, "8");
 800097a:	4ab4      	ldr	r2, [pc, #720]	; (8000c4c <printTemplate+0x34c>)
 800097c:	210d      	movs	r1, #13
 800097e:	2002      	movs	r0, #2
 8000980:	f7ff ff1a 	bl	80007b8 <lcd_print>
		lcd_print(2, 14, "9");
 8000984:	4ab2      	ldr	r2, [pc, #712]	; (8000c50 <printTemplate+0x350>)
 8000986:	210e      	movs	r1, #14
 8000988:	2002      	movs	r0, #2
 800098a:	f7ff ff15 	bl	80007b8 <lcd_print>
		lcd_print(1, 5, machineID);
 800098e:	4ab1      	ldr	r2, [pc, #708]	; (8000c54 <printTemplate+0x354>)
 8000990:	2105      	movs	r1, #5
 8000992:	2001      	movs	r0, #1
 8000994:	f7ff ff10 	bl	80007b8 <lcd_print>
		lcd_gotoxy(2, 3);
 8000998:	2103      	movs	r1, #3
 800099a:	2002      	movs	r0, #2
 800099c:	f7ff feed 	bl	800077a <lcd_gotoxy>
				slideText(wifiPass, 7, 1);
			}
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 80009a0:	e19a      	b.n	8000cd8 <printTemplate+0x3d8>
	} else if(type == 2) {
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2b02      	cmp	r3, #2
 80009a6:	f040 80b5 	bne.w	8000b14 <printTemplate+0x214>
		if(page == 1) {
 80009aa:	683b      	ldr	r3, [r7, #0]
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d120      	bne.n	80009f2 <printTemplate+0xf2>
			lcd_clear();
 80009b0:	f7ff ff2e 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 80009b4:	2064      	movs	r0, #100	; 0x64
 80009b6:	f008 fd63 	bl	8009480 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 80009ba:	4aa7      	ldr	r2, [pc, #668]	; (8000c58 <printTemplate+0x358>)
 80009bc:	2101      	movs	r1, #1
 80009be:	2001      	movs	r0, #1
 80009c0:	f7ff fefa 	bl	80007b8 <lcd_print>
			if(strlen(wifiSSID) <= 10) {
 80009c4:	48a5      	ldr	r0, [pc, #660]	; (8000c5c <printTemplate+0x35c>)
 80009c6:	f7ff fc2d 	bl	8000224 <strlen>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b0a      	cmp	r3, #10
 80009ce:	d805      	bhi.n	80009dc <printTemplate+0xdc>
				lcd_print(1, 7, wifiSSID);
 80009d0:	4aa2      	ldr	r2, [pc, #648]	; (8000c5c <printTemplate+0x35c>)
 80009d2:	2107      	movs	r1, #7
 80009d4:	2001      	movs	r0, #1
 80009d6:	f7ff feef 	bl	80007b8 <lcd_print>
 80009da:	e004      	b.n	80009e6 <printTemplate+0xe6>
				slideText(wifiSSID, 7, 1);
 80009dc:	2201      	movs	r2, #1
 80009de:	2107      	movs	r1, #7
 80009e0:	489e      	ldr	r0, [pc, #632]	; (8000c5c <printTemplate+0x35c>)
 80009e2:	f000 ff65 	bl	80018b0 <slideText>
			lcd_print(2, 1, "abcdefghijklmnop");
 80009e6:	4a9e      	ldr	r2, [pc, #632]	; (8000c60 <printTemplate+0x360>)
 80009e8:	2101      	movs	r1, #1
 80009ea:	2002      	movs	r0, #2
 80009ec:	f7ff fee4 	bl	80007b8 <lcd_print>
}
 80009f0:	e172      	b.n	8000cd8 <printTemplate+0x3d8>
		} else if(page == 2) {
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	2b02      	cmp	r3, #2
 80009f6:	d120      	bne.n	8000a3a <printTemplate+0x13a>
			lcd_clear();
 80009f8:	f7ff ff0a 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 80009fc:	2064      	movs	r0, #100	; 0x64
 80009fe:	f008 fd3f 	bl	8009480 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000a02:	4a95      	ldr	r2, [pc, #596]	; (8000c58 <printTemplate+0x358>)
 8000a04:	2101      	movs	r1, #1
 8000a06:	2001      	movs	r0, #1
 8000a08:	f7ff fed6 	bl	80007b8 <lcd_print>
			if(strlen(wifiSSID) <= 10) {
 8000a0c:	4893      	ldr	r0, [pc, #588]	; (8000c5c <printTemplate+0x35c>)
 8000a0e:	f7ff fc09 	bl	8000224 <strlen>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b0a      	cmp	r3, #10
 8000a16:	d805      	bhi.n	8000a24 <printTemplate+0x124>
				lcd_print(1, 7, wifiSSID);
 8000a18:	4a90      	ldr	r2, [pc, #576]	; (8000c5c <printTemplate+0x35c>)
 8000a1a:	2107      	movs	r1, #7
 8000a1c:	2001      	movs	r0, #1
 8000a1e:	f7ff fecb 	bl	80007b8 <lcd_print>
 8000a22:	e004      	b.n	8000a2e <printTemplate+0x12e>
				slideText(wifiSSID, 7, 1);
 8000a24:	2201      	movs	r2, #1
 8000a26:	2107      	movs	r1, #7
 8000a28:	488c      	ldr	r0, [pc, #560]	; (8000c5c <printTemplate+0x35c>)
 8000a2a:	f000 ff41 	bl	80018b0 <slideText>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000a2e:	4a8d      	ldr	r2, [pc, #564]	; (8000c64 <printTemplate+0x364>)
 8000a30:	2101      	movs	r1, #1
 8000a32:	2002      	movs	r0, #2
 8000a34:	f7ff fec0 	bl	80007b8 <lcd_print>
}
 8000a38:	e14e      	b.n	8000cd8 <printTemplate+0x3d8>
		} else if(page == 3) {
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	2b03      	cmp	r3, #3
 8000a3e:	d120      	bne.n	8000a82 <printTemplate+0x182>
			lcd_clear();
 8000a40:	f7ff fee6 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000a44:	2064      	movs	r0, #100	; 0x64
 8000a46:	f008 fd1b 	bl	8009480 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000a4a:	4a83      	ldr	r2, [pc, #524]	; (8000c58 <printTemplate+0x358>)
 8000a4c:	2101      	movs	r1, #1
 8000a4e:	2001      	movs	r0, #1
 8000a50:	f7ff feb2 	bl	80007b8 <lcd_print>
			if(strlen(wifiSSID) <= 10) {
 8000a54:	4881      	ldr	r0, [pc, #516]	; (8000c5c <printTemplate+0x35c>)
 8000a56:	f7ff fbe5 	bl	8000224 <strlen>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b0a      	cmp	r3, #10
 8000a5e:	d805      	bhi.n	8000a6c <printTemplate+0x16c>
				lcd_print(1, 7, wifiSSID);
 8000a60:	4a7e      	ldr	r2, [pc, #504]	; (8000c5c <printTemplate+0x35c>)
 8000a62:	2107      	movs	r1, #7
 8000a64:	2001      	movs	r0, #1
 8000a66:	f7ff fea7 	bl	80007b8 <lcd_print>
 8000a6a:	e004      	b.n	8000a76 <printTemplate+0x176>
				slideText(wifiSSID, 7, 1);
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	2107      	movs	r1, #7
 8000a70:	487a      	ldr	r0, [pc, #488]	; (8000c5c <printTemplate+0x35c>)
 8000a72:	f000 ff1d 	bl	80018b0 <slideText>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000a76:	4a7c      	ldr	r2, [pc, #496]	; (8000c68 <printTemplate+0x368>)
 8000a78:	2101      	movs	r1, #1
 8000a7a:	2002      	movs	r0, #2
 8000a7c:	f7ff fe9c 	bl	80007b8 <lcd_print>
}
 8000a80:	e12a      	b.n	8000cd8 <printTemplate+0x3d8>
		} else if(page == 4) {
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	2b04      	cmp	r3, #4
 8000a86:	d120      	bne.n	8000aca <printTemplate+0x1ca>
			lcd_clear();
 8000a88:	f7ff fec2 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000a8c:	2064      	movs	r0, #100	; 0x64
 8000a8e:	f008 fcf7 	bl	8009480 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000a92:	4a71      	ldr	r2, [pc, #452]	; (8000c58 <printTemplate+0x358>)
 8000a94:	2101      	movs	r1, #1
 8000a96:	2001      	movs	r0, #1
 8000a98:	f7ff fe8e 	bl	80007b8 <lcd_print>
			if(strlen(wifiSSID) <= 10) {
 8000a9c:	486f      	ldr	r0, [pc, #444]	; (8000c5c <printTemplate+0x35c>)
 8000a9e:	f7ff fbc1 	bl	8000224 <strlen>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b0a      	cmp	r3, #10
 8000aa6:	d805      	bhi.n	8000ab4 <printTemplate+0x1b4>
				lcd_print(1, 7, wifiSSID);
 8000aa8:	4a6c      	ldr	r2, [pc, #432]	; (8000c5c <printTemplate+0x35c>)
 8000aaa:	2107      	movs	r1, #7
 8000aac:	2001      	movs	r0, #1
 8000aae:	f7ff fe83 	bl	80007b8 <lcd_print>
 8000ab2:	e004      	b.n	8000abe <printTemplate+0x1be>
				slideText(wifiSSID, 7, 1);
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	2107      	movs	r1, #7
 8000ab8:	4868      	ldr	r0, [pc, #416]	; (8000c5c <printTemplate+0x35c>)
 8000aba:	f000 fef9 	bl	80018b0 <slideText>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000abe:	4a6b      	ldr	r2, [pc, #428]	; (8000c6c <printTemplate+0x36c>)
 8000ac0:	2101      	movs	r1, #1
 8000ac2:	2002      	movs	r0, #2
 8000ac4:	f7ff fe78 	bl	80007b8 <lcd_print>
}
 8000ac8:	e106      	b.n	8000cd8 <printTemplate+0x3d8>
		} else if(page == 5) {
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	2b05      	cmp	r3, #5
 8000ace:	f040 8103 	bne.w	8000cd8 <printTemplate+0x3d8>
			lcd_clear();
 8000ad2:	f7ff fe9d 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000ad6:	2064      	movs	r0, #100	; 0x64
 8000ad8:	f008 fcd2 	bl	8009480 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000adc:	4a5e      	ldr	r2, [pc, #376]	; (8000c58 <printTemplate+0x358>)
 8000ade:	2101      	movs	r1, #1
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	f7ff fe69 	bl	80007b8 <lcd_print>
			if(strlen(wifiSSID) <= 10) {
 8000ae6:	485d      	ldr	r0, [pc, #372]	; (8000c5c <printTemplate+0x35c>)
 8000ae8:	f7ff fb9c 	bl	8000224 <strlen>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b0a      	cmp	r3, #10
 8000af0:	d805      	bhi.n	8000afe <printTemplate+0x1fe>
				lcd_print(1, 7, wifiSSID);
 8000af2:	4a5a      	ldr	r2, [pc, #360]	; (8000c5c <printTemplate+0x35c>)
 8000af4:	2107      	movs	r1, #7
 8000af6:	2001      	movs	r0, #1
 8000af8:	f7ff fe5e 	bl	80007b8 <lcd_print>
 8000afc:	e004      	b.n	8000b08 <printTemplate+0x208>
				slideText(wifiSSID, 7, 1);
 8000afe:	2201      	movs	r2, #1
 8000b00:	2107      	movs	r1, #7
 8000b02:	4856      	ldr	r0, [pc, #344]	; (8000c5c <printTemplate+0x35c>)
 8000b04:	f000 fed4 	bl	80018b0 <slideText>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000b08:	4a59      	ldr	r2, [pc, #356]	; (8000c70 <printTemplate+0x370>)
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	2002      	movs	r0, #2
 8000b0e:	f7ff fe53 	bl	80007b8 <lcd_print>
}
 8000b12:	e0e1      	b.n	8000cd8 <printTemplate+0x3d8>
	} else if(type == 3) {
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2b03      	cmp	r3, #3
 8000b18:	f040 80de 	bne.w	8000cd8 <printTemplate+0x3d8>
		if(page == 1) {
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	2b01      	cmp	r3, #1
 8000b20:	d120      	bne.n	8000b64 <printTemplate+0x264>
			lcd_clear();
 8000b22:	f7ff fe75 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000b26:	2064      	movs	r0, #100	; 0x64
 8000b28:	f008 fcaa 	bl	8009480 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000b2c:	4a51      	ldr	r2, [pc, #324]	; (8000c74 <printTemplate+0x374>)
 8000b2e:	2101      	movs	r1, #1
 8000b30:	2001      	movs	r0, #1
 8000b32:	f7ff fe41 	bl	80007b8 <lcd_print>
			if(strlen(wifiPass) <= 10) {
 8000b36:	4850      	ldr	r0, [pc, #320]	; (8000c78 <printTemplate+0x378>)
 8000b38:	f7ff fb74 	bl	8000224 <strlen>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b0a      	cmp	r3, #10
 8000b40:	d805      	bhi.n	8000b4e <printTemplate+0x24e>
				lcd_print(1, 7, wifiPass);
 8000b42:	4a4d      	ldr	r2, [pc, #308]	; (8000c78 <printTemplate+0x378>)
 8000b44:	2107      	movs	r1, #7
 8000b46:	2001      	movs	r0, #1
 8000b48:	f7ff fe36 	bl	80007b8 <lcd_print>
 8000b4c:	e004      	b.n	8000b58 <printTemplate+0x258>
				slideText(wifiPass, 7, 1);
 8000b4e:	2201      	movs	r2, #1
 8000b50:	2107      	movs	r1, #7
 8000b52:	4849      	ldr	r0, [pc, #292]	; (8000c78 <printTemplate+0x378>)
 8000b54:	f000 feac 	bl	80018b0 <slideText>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000b58:	4a41      	ldr	r2, [pc, #260]	; (8000c60 <printTemplate+0x360>)
 8000b5a:	2101      	movs	r1, #1
 8000b5c:	2002      	movs	r0, #2
 8000b5e:	f7ff fe2b 	bl	80007b8 <lcd_print>
}
 8000b62:	e0b9      	b.n	8000cd8 <printTemplate+0x3d8>
		} else if(page == 2) {
 8000b64:	683b      	ldr	r3, [r7, #0]
 8000b66:	2b02      	cmp	r3, #2
 8000b68:	d120      	bne.n	8000bac <printTemplate+0x2ac>
			lcd_clear();
 8000b6a:	f7ff fe51 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000b6e:	2064      	movs	r0, #100	; 0x64
 8000b70:	f008 fc86 	bl	8009480 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000b74:	4a3f      	ldr	r2, [pc, #252]	; (8000c74 <printTemplate+0x374>)
 8000b76:	2101      	movs	r1, #1
 8000b78:	2001      	movs	r0, #1
 8000b7a:	f7ff fe1d 	bl	80007b8 <lcd_print>
			if(strlen(wifiPass) <= 10) {
 8000b7e:	483e      	ldr	r0, [pc, #248]	; (8000c78 <printTemplate+0x378>)
 8000b80:	f7ff fb50 	bl	8000224 <strlen>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b0a      	cmp	r3, #10
 8000b88:	d805      	bhi.n	8000b96 <printTemplate+0x296>
				lcd_print(1, 7, wifiPass);
 8000b8a:	4a3b      	ldr	r2, [pc, #236]	; (8000c78 <printTemplate+0x378>)
 8000b8c:	2107      	movs	r1, #7
 8000b8e:	2001      	movs	r0, #1
 8000b90:	f7ff fe12 	bl	80007b8 <lcd_print>
 8000b94:	e004      	b.n	8000ba0 <printTemplate+0x2a0>
				slideText(wifiPass, 7, 1);
 8000b96:	2201      	movs	r2, #1
 8000b98:	2107      	movs	r1, #7
 8000b9a:	4837      	ldr	r0, [pc, #220]	; (8000c78 <printTemplate+0x378>)
 8000b9c:	f000 fe88 	bl	80018b0 <slideText>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000ba0:	4a30      	ldr	r2, [pc, #192]	; (8000c64 <printTemplate+0x364>)
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	2002      	movs	r0, #2
 8000ba6:	f7ff fe07 	bl	80007b8 <lcd_print>
}
 8000baa:	e095      	b.n	8000cd8 <printTemplate+0x3d8>
		} else if(page == 3) {
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	2b03      	cmp	r3, #3
 8000bb0:	d120      	bne.n	8000bf4 <printTemplate+0x2f4>
			lcd_clear();
 8000bb2:	f7ff fe2d 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000bb6:	2064      	movs	r0, #100	; 0x64
 8000bb8:	f008 fc62 	bl	8009480 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000bbc:	4a2d      	ldr	r2, [pc, #180]	; (8000c74 <printTemplate+0x374>)
 8000bbe:	2101      	movs	r1, #1
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	f7ff fdf9 	bl	80007b8 <lcd_print>
			if(strlen(wifiPass) <= 10) {
 8000bc6:	482c      	ldr	r0, [pc, #176]	; (8000c78 <printTemplate+0x378>)
 8000bc8:	f7ff fb2c 	bl	8000224 <strlen>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b0a      	cmp	r3, #10
 8000bd0:	d805      	bhi.n	8000bde <printTemplate+0x2de>
				lcd_print(1, 7, wifiPass);
 8000bd2:	4a29      	ldr	r2, [pc, #164]	; (8000c78 <printTemplate+0x378>)
 8000bd4:	2107      	movs	r1, #7
 8000bd6:	2001      	movs	r0, #1
 8000bd8:	f7ff fdee 	bl	80007b8 <lcd_print>
 8000bdc:	e004      	b.n	8000be8 <printTemplate+0x2e8>
				slideText(wifiPass, 7, 1);
 8000bde:	2201      	movs	r2, #1
 8000be0:	2107      	movs	r1, #7
 8000be2:	4825      	ldr	r0, [pc, #148]	; (8000c78 <printTemplate+0x378>)
 8000be4:	f000 fe64 	bl	80018b0 <slideText>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000be8:	4a1f      	ldr	r2, [pc, #124]	; (8000c68 <printTemplate+0x368>)
 8000bea:	2101      	movs	r1, #1
 8000bec:	2002      	movs	r0, #2
 8000bee:	f7ff fde3 	bl	80007b8 <lcd_print>
}
 8000bf2:	e071      	b.n	8000cd8 <printTemplate+0x3d8>
		} else if(page == 4) {
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	2b04      	cmp	r3, #4
 8000bf8:	d14b      	bne.n	8000c92 <printTemplate+0x392>
			lcd_clear();
 8000bfa:	f7ff fe09 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000bfe:	2064      	movs	r0, #100	; 0x64
 8000c00:	f008 fc3e 	bl	8009480 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000c04:	4a1b      	ldr	r2, [pc, #108]	; (8000c74 <printTemplate+0x374>)
 8000c06:	2101      	movs	r1, #1
 8000c08:	2001      	movs	r0, #1
 8000c0a:	f7ff fdd5 	bl	80007b8 <lcd_print>
			if(strlen(wifiPass) <= 10) {
 8000c0e:	481a      	ldr	r0, [pc, #104]	; (8000c78 <printTemplate+0x378>)
 8000c10:	f7ff fb08 	bl	8000224 <strlen>
 8000c14:	4603      	mov	r3, r0
 8000c16:	2b0a      	cmp	r3, #10
 8000c18:	d830      	bhi.n	8000c7c <printTemplate+0x37c>
				lcd_print(1, 7, wifiPass);
 8000c1a:	4a17      	ldr	r2, [pc, #92]	; (8000c78 <printTemplate+0x378>)
 8000c1c:	2107      	movs	r1, #7
 8000c1e:	2001      	movs	r0, #1
 8000c20:	f7ff fdca 	bl	80007b8 <lcd_print>
 8000c24:	e02f      	b.n	8000c86 <printTemplate+0x386>
 8000c26:	bf00      	nop
 8000c28:	0800dc0c 	.word	0x0800dc0c
 8000c2c:	0800dc14 	.word	0x0800dc14
 8000c30:	0800dc18 	.word	0x0800dc18
 8000c34:	0800dc1c 	.word	0x0800dc1c
 8000c38:	0800dc20 	.word	0x0800dc20
 8000c3c:	0800dc24 	.word	0x0800dc24
 8000c40:	0800dc28 	.word	0x0800dc28
 8000c44:	0800dc2c 	.word	0x0800dc2c
 8000c48:	0800dc30 	.word	0x0800dc30
 8000c4c:	0800dc34 	.word	0x0800dc34
 8000c50:	0800dc38 	.word	0x0800dc38
 8000c54:	20000bf4 	.word	0x20000bf4
 8000c58:	0800dc3c 	.word	0x0800dc3c
 8000c5c:	20000c00 	.word	0x20000c00
 8000c60:	0800dc44 	.word	0x0800dc44
 8000c64:	0800dc58 	.word	0x0800dc58
 8000c68:	0800dc6c 	.word	0x0800dc6c
 8000c6c:	0800dc80 	.word	0x0800dc80
 8000c70:	0800dc94 	.word	0x0800dc94
 8000c74:	0800dca8 	.word	0x0800dca8
 8000c78:	20000c24 	.word	0x20000c24
				slideText(wifiPass, 7, 1);
 8000c7c:	2201      	movs	r2, #1
 8000c7e:	2107      	movs	r1, #7
 8000c80:	4817      	ldr	r0, [pc, #92]	; (8000ce0 <printTemplate+0x3e0>)
 8000c82:	f000 fe15 	bl	80018b0 <slideText>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000c86:	4a17      	ldr	r2, [pc, #92]	; (8000ce4 <printTemplate+0x3e4>)
 8000c88:	2101      	movs	r1, #1
 8000c8a:	2002      	movs	r0, #2
 8000c8c:	f7ff fd94 	bl	80007b8 <lcd_print>
}
 8000c90:	e022      	b.n	8000cd8 <printTemplate+0x3d8>
		} else if(page == 5) {
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	2b05      	cmp	r3, #5
 8000c96:	d11f      	bne.n	8000cd8 <printTemplate+0x3d8>
			lcd_clear();
 8000c98:	f7ff fdba 	bl	8000810 <lcd_clear>
			HAL_Delay(100);
 8000c9c:	2064      	movs	r0, #100	; 0x64
 8000c9e:	f008 fbef 	bl	8009480 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000ca2:	4a11      	ldr	r2, [pc, #68]	; (8000ce8 <printTemplate+0x3e8>)
 8000ca4:	2101      	movs	r1, #1
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	f7ff fd86 	bl	80007b8 <lcd_print>
			if(strlen(wifiPass) <= 10) {
 8000cac:	480c      	ldr	r0, [pc, #48]	; (8000ce0 <printTemplate+0x3e0>)
 8000cae:	f7ff fab9 	bl	8000224 <strlen>
 8000cb2:	4603      	mov	r3, r0
 8000cb4:	2b0a      	cmp	r3, #10
 8000cb6:	d805      	bhi.n	8000cc4 <printTemplate+0x3c4>
				lcd_print(1, 7, wifiPass);
 8000cb8:	4a09      	ldr	r2, [pc, #36]	; (8000ce0 <printTemplate+0x3e0>)
 8000cba:	2107      	movs	r1, #7
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	f7ff fd7b 	bl	80007b8 <lcd_print>
 8000cc2:	e004      	b.n	8000cce <printTemplate+0x3ce>
				slideText(wifiPass, 7, 1);
 8000cc4:	2201      	movs	r2, #1
 8000cc6:	2107      	movs	r1, #7
 8000cc8:	4805      	ldr	r0, [pc, #20]	; (8000ce0 <printTemplate+0x3e0>)
 8000cca:	f000 fdf1 	bl	80018b0 <slideText>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000cce:	4a07      	ldr	r2, [pc, #28]	; (8000cec <printTemplate+0x3ec>)
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	2002      	movs	r0, #2
 8000cd4:	f7ff fd70 	bl	80007b8 <lcd_print>
}
 8000cd8:	bf00      	nop
 8000cda:	3708      	adds	r7, #8
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	20000c24 	.word	0x20000c24
 8000ce4:	0800dc80 	.word	0x0800dc80
 8000ce8:	0800dca8 	.word	0x0800dca8
 8000cec:	0800dc94 	.word	0x0800dc94

08000cf0 <getCharFromCursorPosition>:

char getCharFromCursorPosition(int cursorPosition) {
 8000cf0:	b480      	push	{r7}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
    return charactersArray[cursorPosition];
 8000cf8:	4a04      	ldr	r2, [pc, #16]	; (8000d0c <getCharFromCursorPosition+0x1c>)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	781b      	ldrb	r3, [r3, #0]
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bc80      	pop	{r7}
 8000d08:	4770      	bx	lr
 8000d0a:	bf00      	nop
 8000d0c:	20000960 	.word	0x20000960

08000d10 <takeMachineID>:

void takeMachineID(int state, I2C_HandleTypeDef *hi2c1) {
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
	lcd_cursor(1);
 8000d1a:	2001      	movs	r0, #1
 8000d1c:	f7ff fdaa 	bl	8000874 <lcd_cursor>

	if(state == 0) {
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d104      	bne.n	8000d30 <takeMachineID+0x20>
	    memset(machineID, 0, sizeof(machineID));
 8000d26:	220c      	movs	r2, #12
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4883      	ldr	r0, [pc, #524]	; (8000f38 <takeMachineID+0x228>)
 8000d2c:	f00c fabc 	bl	800d2a8 <memset>
	}

    int cursorPosition = 3;
 8000d30:	2303      	movs	r3, #3
 8000d32:	617b      	str	r3, [r7, #20]
    int machineIDLoc = 0;
 8000d34:	2300      	movs	r3, #0
 8000d36:	613b      	str	r3, [r7, #16]
    int writeLoc = 5;
 8000d38:	2305      	movs	r3, #5
 8000d3a:	60fb      	str	r3, [r7, #12]

    printTemplate(1, 0);
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	2001      	movs	r0, #1
 8000d40:	f7ff fdde 	bl	8000900 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000d44:	2108      	movs	r1, #8
 8000d46:	487d      	ldr	r0, [pc, #500]	; (8000f3c <takeMachineID+0x22c>)
 8000d48:	f009 f96a 	bl	800a020 <HAL_GPIO_ReadPin>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d108      	bne.n	8000d64 <takeMachineID+0x54>
        	lcd_cursor(0);
 8000d52:	2000      	movs	r0, #0
 8000d54:	f7ff fd8e 	bl	8000874 <lcd_cursor>

        	writeCharToEEPROM4ID(&hi2c1, machineID);
 8000d58:	463b      	mov	r3, r7
 8000d5a:	4977      	ldr	r1, [pc, #476]	; (8000f38 <takeMachineID+0x228>)
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	f000 fc29 	bl	80015b4 <writeCharToEEPROM4ID>

            break;
 8000d62:	e0e4      	b.n	8000f2e <takeMachineID+0x21e>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000d64:	2101      	movs	r1, #1
 8000d66:	4875      	ldr	r0, [pc, #468]	; (8000f3c <takeMachineID+0x22c>)
 8000d68:	f009 f95a 	bl	800a020 <HAL_GPIO_ReadPin>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b01      	cmp	r3, #1
 8000d70:	d112      	bne.n	8000d98 <takeMachineID+0x88>
        	if(cursorPosition == 7) {
 8000d72:	697b      	ldr	r3, [r7, #20]
 8000d74:	2b07      	cmp	r3, #7
 8000d76:	d102      	bne.n	8000d7e <takeMachineID+0x6e>
        		cursorPosition = 10;
 8000d78:	230a      	movs	r3, #10
 8000d7a:	617b      	str	r3, [r7, #20]
 8000d7c:	e008      	b.n	8000d90 <takeMachineID+0x80>
        	} else if (cursorPosition == 14) {
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	2b0e      	cmp	r3, #14
 8000d82:	d102      	bne.n	8000d8a <takeMachineID+0x7a>
                cursorPosition = 3;
 8000d84:	2303      	movs	r3, #3
 8000d86:	617b      	str	r3, [r7, #20]
 8000d88:	e002      	b.n	8000d90 <takeMachineID+0x80>
            } else {
            	cursorPosition++;
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	617b      	str	r3, [r7, #20]
            }

        	HAL_Delay(350);
 8000d90:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000d94:	f008 fb74 	bl	8009480 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8000d98:	2108      	movs	r1, #8
 8000d9a:	4869      	ldr	r0, [pc, #420]	; (8000f40 <takeMachineID+0x230>)
 8000d9c:	f009 f940 	bl	800a020 <HAL_GPIO_ReadPin>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b01      	cmp	r3, #1
 8000da4:	d112      	bne.n	8000dcc <takeMachineID+0xbc>
            if (cursorPosition == 3) {
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	2b03      	cmp	r3, #3
 8000daa:	d102      	bne.n	8000db2 <takeMachineID+0xa2>
                cursorPosition = 14;
 8000dac:	230e      	movs	r3, #14
 8000dae:	617b      	str	r3, [r7, #20]
 8000db0:	e008      	b.n	8000dc4 <takeMachineID+0xb4>
            } else if(cursorPosition == 10) {
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	2b0a      	cmp	r3, #10
 8000db6:	d102      	bne.n	8000dbe <takeMachineID+0xae>
            	cursorPosition = 7;
 8000db8:	2307      	movs	r3, #7
 8000dba:	617b      	str	r3, [r7, #20]
 8000dbc:	e002      	b.n	8000dc4 <takeMachineID+0xb4>
            } else {
            	cursorPosition--;
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	617b      	str	r3, [r7, #20]
            }

            HAL_Delay(350);
 8000dc4:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000dc8:	f008 fb5a 	bl	8009480 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8000dcc:	2102      	movs	r1, #2
 8000dce:	485b      	ldr	r0, [pc, #364]	; (8000f3c <takeMachineID+0x22c>)
 8000dd0:	f009 f926 	bl	800a020 <HAL_GPIO_ReadPin>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d16c      	bne.n	8000eb4 <takeMachineID+0x1a4>
        	if(cursorPosition == 3) {
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	2b03      	cmp	r3, #3
 8000dde:	d105      	bne.n	8000dec <takeMachineID+0xdc>
        		machineID[machineIDLoc] = '0';
 8000de0:	4a55      	ldr	r2, [pc, #340]	; (8000f38 <takeMachineID+0x228>)
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	4413      	add	r3, r2
 8000de6:	2230      	movs	r2, #48	; 0x30
 8000de8:	701a      	strb	r2, [r3, #0]
 8000dea:	e04f      	b.n	8000e8c <takeMachineID+0x17c>
        	} else if(cursorPosition == 4) {
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	2b04      	cmp	r3, #4
 8000df0:	d105      	bne.n	8000dfe <takeMachineID+0xee>
        		machineID[machineIDLoc] = '1';
 8000df2:	4a51      	ldr	r2, [pc, #324]	; (8000f38 <takeMachineID+0x228>)
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	4413      	add	r3, r2
 8000df8:	2231      	movs	r2, #49	; 0x31
 8000dfa:	701a      	strb	r2, [r3, #0]
 8000dfc:	e046      	b.n	8000e8c <takeMachineID+0x17c>
        	} else if(cursorPosition == 5) {
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	2b05      	cmp	r3, #5
 8000e02:	d105      	bne.n	8000e10 <takeMachineID+0x100>
        		machineID[machineIDLoc] = '2';
 8000e04:	4a4c      	ldr	r2, [pc, #304]	; (8000f38 <takeMachineID+0x228>)
 8000e06:	693b      	ldr	r3, [r7, #16]
 8000e08:	4413      	add	r3, r2
 8000e0a:	2232      	movs	r2, #50	; 0x32
 8000e0c:	701a      	strb	r2, [r3, #0]
 8000e0e:	e03d      	b.n	8000e8c <takeMachineID+0x17c>
        	} else if(cursorPosition == 6) {
 8000e10:	697b      	ldr	r3, [r7, #20]
 8000e12:	2b06      	cmp	r3, #6
 8000e14:	d105      	bne.n	8000e22 <takeMachineID+0x112>
        		machineID[machineIDLoc] = '3';
 8000e16:	4a48      	ldr	r2, [pc, #288]	; (8000f38 <takeMachineID+0x228>)
 8000e18:	693b      	ldr	r3, [r7, #16]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	2233      	movs	r2, #51	; 0x33
 8000e1e:	701a      	strb	r2, [r3, #0]
 8000e20:	e034      	b.n	8000e8c <takeMachineID+0x17c>
        	} else if(cursorPosition == 7) {
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	2b07      	cmp	r3, #7
 8000e26:	d105      	bne.n	8000e34 <takeMachineID+0x124>
        		machineID[machineIDLoc] = '4';
 8000e28:	4a43      	ldr	r2, [pc, #268]	; (8000f38 <takeMachineID+0x228>)
 8000e2a:	693b      	ldr	r3, [r7, #16]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	2234      	movs	r2, #52	; 0x34
 8000e30:	701a      	strb	r2, [r3, #0]
 8000e32:	e02b      	b.n	8000e8c <takeMachineID+0x17c>
        	} else if(cursorPosition == 10) {
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	2b0a      	cmp	r3, #10
 8000e38:	d105      	bne.n	8000e46 <takeMachineID+0x136>
        		machineID[machineIDLoc] = '5';
 8000e3a:	4a3f      	ldr	r2, [pc, #252]	; (8000f38 <takeMachineID+0x228>)
 8000e3c:	693b      	ldr	r3, [r7, #16]
 8000e3e:	4413      	add	r3, r2
 8000e40:	2235      	movs	r2, #53	; 0x35
 8000e42:	701a      	strb	r2, [r3, #0]
 8000e44:	e022      	b.n	8000e8c <takeMachineID+0x17c>
        	} else if(cursorPosition == 11) {
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	2b0b      	cmp	r3, #11
 8000e4a:	d105      	bne.n	8000e58 <takeMachineID+0x148>
        		machineID[machineIDLoc] = '6';
 8000e4c:	4a3a      	ldr	r2, [pc, #232]	; (8000f38 <takeMachineID+0x228>)
 8000e4e:	693b      	ldr	r3, [r7, #16]
 8000e50:	4413      	add	r3, r2
 8000e52:	2236      	movs	r2, #54	; 0x36
 8000e54:	701a      	strb	r2, [r3, #0]
 8000e56:	e019      	b.n	8000e8c <takeMachineID+0x17c>
        	} else if(cursorPosition == 12) {
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	2b0c      	cmp	r3, #12
 8000e5c:	d105      	bne.n	8000e6a <takeMachineID+0x15a>
        		machineID[machineIDLoc] = '7';
 8000e5e:	4a36      	ldr	r2, [pc, #216]	; (8000f38 <takeMachineID+0x228>)
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	4413      	add	r3, r2
 8000e64:	2237      	movs	r2, #55	; 0x37
 8000e66:	701a      	strb	r2, [r3, #0]
 8000e68:	e010      	b.n	8000e8c <takeMachineID+0x17c>
        	} else if(cursorPosition == 13) {
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	2b0d      	cmp	r3, #13
 8000e6e:	d105      	bne.n	8000e7c <takeMachineID+0x16c>
        		machineID[machineIDLoc] = '8';
 8000e70:	4a31      	ldr	r2, [pc, #196]	; (8000f38 <takeMachineID+0x228>)
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	4413      	add	r3, r2
 8000e76:	2238      	movs	r2, #56	; 0x38
 8000e78:	701a      	strb	r2, [r3, #0]
 8000e7a:	e007      	b.n	8000e8c <takeMachineID+0x17c>
        	} else if(cursorPosition == 14) {
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	2b0e      	cmp	r3, #14
 8000e80:	d104      	bne.n	8000e8c <takeMachineID+0x17c>
        		machineID[machineIDLoc] = '9';
 8000e82:	4a2d      	ldr	r2, [pc, #180]	; (8000f38 <takeMachineID+0x228>)
 8000e84:	693b      	ldr	r3, [r7, #16]
 8000e86:	4413      	add	r3, r2
 8000e88:	2239      	movs	r2, #57	; 0x39
 8000e8a:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[machineIDLoc]);
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	b2d9      	uxtb	r1, r3
 8000e90:	4a29      	ldr	r2, [pc, #164]	; (8000f38 <takeMachineID+0x228>)
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	4413      	add	r3, r2
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	f7ff fca1 	bl	80007e2 <lcd_print_char>

        	writeLoc++;
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	60fb      	str	r3, [r7, #12]
        	machineIDLoc++;
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	613b      	str	r3, [r7, #16]

        	HAL_Delay(350);
 8000eac:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000eb0:	f008 fae6 	bl	8009480 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8000eb4:	2104      	movs	r1, #4
 8000eb6:	4821      	ldr	r0, [pc, #132]	; (8000f3c <takeMachineID+0x22c>)
 8000eb8:	f009 f8b2 	bl	800a020 <HAL_GPIO_ReadPin>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b01      	cmp	r3, #1
 8000ec0:	d12e      	bne.n	8000f20 <takeMachineID+0x210>
            if(strlen(machineID) >= 1) {
 8000ec2:	4b1d      	ldr	r3, [pc, #116]	; (8000f38 <takeMachineID+0x228>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d027      	beq.n	8000f1a <takeMachineID+0x20a>

                machineID[machineIDLoc] = '\0';
 8000eca:	4a1b      	ldr	r2, [pc, #108]	; (8000f38 <takeMachineID+0x228>)
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	4413      	add	r3, r2
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	701a      	strb	r2, [r3, #0]

                lcd_delete_char(1, 4+machineIDLoc);
 8000ed4:	693b      	ldr	r3, [r7, #16]
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	3304      	adds	r3, #4
 8000eda:	b2db      	uxtb	r3, r3
 8000edc:	4619      	mov	r1, r3
 8000ede:	2001      	movs	r0, #1
 8000ee0:	f7ff fca0 	bl	8000824 <lcd_delete_char>
                HAL_Delay(50);
 8000ee4:	2032      	movs	r0, #50	; 0x32
 8000ee6:	f008 facb 	bl	8009480 <HAL_Delay>

                if(writeLoc > 5) {
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	2b05      	cmp	r3, #5
 8000eee:	dd03      	ble.n	8000ef8 <takeMachineID+0x1e8>
                	writeLoc--;
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	60fb      	str	r3, [r7, #12]
 8000ef6:	e004      	b.n	8000f02 <takeMachineID+0x1f2>
                } else if(writeLoc < 5) {
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	2b04      	cmp	r3, #4
 8000efc:	dc01      	bgt.n	8000f02 <takeMachineID+0x1f2>
                	writeLoc = 5;
 8000efe:	2305      	movs	r3, #5
 8000f00:	60fb      	str	r3, [r7, #12]
                }

                if(machineIDLoc > 0) {
 8000f02:	693b      	ldr	r3, [r7, #16]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	dd03      	ble.n	8000f10 <takeMachineID+0x200>
                	machineIDLoc--;
 8000f08:	693b      	ldr	r3, [r7, #16]
 8000f0a:	3b01      	subs	r3, #1
 8000f0c:	613b      	str	r3, [r7, #16]
 8000f0e:	e004      	b.n	8000f1a <takeMachineID+0x20a>
                } else if(machineIDLoc < 0) {
 8000f10:	693b      	ldr	r3, [r7, #16]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	da01      	bge.n	8000f1a <takeMachineID+0x20a>
                	machineIDLoc = 0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	613b      	str	r3, [r7, #16]
                }
            }

            HAL_Delay(250);
 8000f1a:	20fa      	movs	r0, #250	; 0xfa
 8000f1c:	f008 fab0 	bl	8009480 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	4619      	mov	r1, r3
 8000f26:	2002      	movs	r0, #2
 8000f28:	f7ff fc27 	bl	800077a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000f2c:	e70a      	b.n	8000d44 <takeMachineID+0x34>
    }
}
 8000f2e:	bf00      	nop
 8000f30:	3718      	adds	r7, #24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000bf4 	.word	0x20000bf4
 8000f3c:	40010800 	.word	0x40010800
 8000f40:	40011000 	.word	0x40011000

08000f44 <takeWifiSSID>:

void takeWifiSSID(int state, I2C_HandleTypeDef *hi2c1) {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b08e      	sub	sp, #56	; 0x38
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
    lcd_cursor(1);
 8000f4e:	2001      	movs	r0, #1
 8000f50:	f7ff fc90 	bl	8000874 <lcd_cursor>

    if(state == 0) {
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d104      	bne.n	8000f64 <takeWifiSSID+0x20>
    	memset(wifiSSID, 0, sizeof(wifiSSID));
 8000f5a:	2221      	movs	r2, #33	; 0x21
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4878      	ldr	r0, [pc, #480]	; (8001140 <takeWifiSSID+0x1fc>)
 8000f60:	f00c f9a2 	bl	800d2a8 <memset>
    }

    int realCharPos = 1;
 8000f64:	2301      	movs	r3, #1
 8000f66:	637b      	str	r3, [r7, #52]	; 0x34
    cursorPosition = 1;
 8000f68:	4b76      	ldr	r3, [pc, #472]	; (8001144 <takeWifiSSID+0x200>)
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	601a      	str	r2, [r3, #0]
    page = 1;
 8000f6e:	4b76      	ldr	r3, [pc, #472]	; (8001148 <takeWifiSSID+0x204>)
 8000f70:	2201      	movs	r2, #1
 8000f72:	601a      	str	r2, [r3, #0]
    int wifiNameLoc = 0;
 8000f74:	2300      	movs	r3, #0
 8000f76:	633b      	str	r3, [r7, #48]	; 0x30
    int writeLoc = 7;
 8000f78:	2307      	movs	r3, #7
 8000f7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t realCharPosLoc[33];

    printTemplate(2, 1);
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	2002      	movs	r0, #2
 8000f80:	f7ff fcbe 	bl	8000900 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000f84:	2108      	movs	r1, #8
 8000f86:	4871      	ldr	r0, [pc, #452]	; (800114c <takeWifiSSID+0x208>)
 8000f88:	f009 f84a 	bl	800a020 <HAL_GPIO_ReadPin>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d109      	bne.n	8000fa6 <takeWifiSSID+0x62>
            lcd_cursor(0);
 8000f92:	2000      	movs	r0, #0
 8000f94:	f7ff fc6e 	bl	8000874 <lcd_cursor>

            writeCharToEEPROM4Wifi(&hi2c1, wifiSSID, 1);
 8000f98:	463b      	mov	r3, r7
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	4968      	ldr	r1, [pc, #416]	; (8001140 <takeWifiSSID+0x1fc>)
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f000 fb56 	bl	8001650 <writeCharToEEPROM4Wifi>

            break;
 8000fa4:	e14c      	b.n	8001240 <takeWifiSSID+0x2fc>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000fa6:	2101      	movs	r1, #1
 8000fa8:	4868      	ldr	r0, [pc, #416]	; (800114c <takeWifiSSID+0x208>)
 8000faa:	f009 f839 	bl	800a020 <HAL_GPIO_ReadPin>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b01      	cmp	r3, #1
 8000fb2:	d166      	bne.n	8001082 <takeWifiSSID+0x13e>
        	realCharPos++;
 8000fb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	637b      	str	r3, [r7, #52]	; 0x34
        	if(realCharPos > 80) {
 8000fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fbc:	2b50      	cmp	r3, #80	; 0x50
 8000fbe:	dd01      	ble.n	8000fc4 <takeWifiSSID+0x80>
        		realCharPos = 1;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	637b      	str	r3, [r7, #52]	; 0x34
        	}
            if (cursorPosition == 16) {
 8000fc4:	4b5f      	ldr	r3, [pc, #380]	; (8001144 <takeWifiSSID+0x200>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2b10      	cmp	r3, #16
 8000fca:	d152      	bne.n	8001072 <takeWifiSSID+0x12e>
            	if(page == 1) {
 8000fcc:	4b5e      	ldr	r3, [pc, #376]	; (8001148 <takeWifiSSID+0x204>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d10c      	bne.n	8000fee <takeWifiSSID+0xaa>
            		cursorPosition = 1;
 8000fd4:	4b5b      	ldr	r3, [pc, #364]	; (8001144 <takeWifiSSID+0x200>)
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	601a      	str	r2, [r3, #0]
            		page++;
 8000fda:	4b5b      	ldr	r3, [pc, #364]	; (8001148 <takeWifiSSID+0x204>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	4a59      	ldr	r2, [pc, #356]	; (8001148 <takeWifiSSID+0x204>)
 8000fe2:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 2);
 8000fe4:	2102      	movs	r1, #2
 8000fe6:	2002      	movs	r0, #2
 8000fe8:	f7ff fc8a 	bl	8000900 <printTemplate>
 8000fec:	e046      	b.n	800107c <takeWifiSSID+0x138>
            	} else if(page == 2) {
 8000fee:	4b56      	ldr	r3, [pc, #344]	; (8001148 <takeWifiSSID+0x204>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2b02      	cmp	r3, #2
 8000ff4:	d10c      	bne.n	8001010 <takeWifiSSID+0xcc>
            		cursorPosition = 1;
 8000ff6:	4b53      	ldr	r3, [pc, #332]	; (8001144 <takeWifiSSID+0x200>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	601a      	str	r2, [r3, #0]
            		page++;
 8000ffc:	4b52      	ldr	r3, [pc, #328]	; (8001148 <takeWifiSSID+0x204>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	3301      	adds	r3, #1
 8001002:	4a51      	ldr	r2, [pc, #324]	; (8001148 <takeWifiSSID+0x204>)
 8001004:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 3);
 8001006:	2103      	movs	r1, #3
 8001008:	2002      	movs	r0, #2
 800100a:	f7ff fc79 	bl	8000900 <printTemplate>
 800100e:	e035      	b.n	800107c <takeWifiSSID+0x138>
            	} else if(page == 3) {
 8001010:	4b4d      	ldr	r3, [pc, #308]	; (8001148 <takeWifiSSID+0x204>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2b03      	cmp	r3, #3
 8001016:	d10c      	bne.n	8001032 <takeWifiSSID+0xee>
            		cursorPosition = 1;
 8001018:	4b4a      	ldr	r3, [pc, #296]	; (8001144 <takeWifiSSID+0x200>)
 800101a:	2201      	movs	r2, #1
 800101c:	601a      	str	r2, [r3, #0]
            		page++;
 800101e:	4b4a      	ldr	r3, [pc, #296]	; (8001148 <takeWifiSSID+0x204>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	3301      	adds	r3, #1
 8001024:	4a48      	ldr	r2, [pc, #288]	; (8001148 <takeWifiSSID+0x204>)
 8001026:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 4);
 8001028:	2104      	movs	r1, #4
 800102a:	2002      	movs	r0, #2
 800102c:	f7ff fc68 	bl	8000900 <printTemplate>
 8001030:	e024      	b.n	800107c <takeWifiSSID+0x138>
            	} else if(page == 4) {
 8001032:	4b45      	ldr	r3, [pc, #276]	; (8001148 <takeWifiSSID+0x204>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2b04      	cmp	r3, #4
 8001038:	d10c      	bne.n	8001054 <takeWifiSSID+0x110>
            		cursorPosition = 1;
 800103a:	4b42      	ldr	r3, [pc, #264]	; (8001144 <takeWifiSSID+0x200>)
 800103c:	2201      	movs	r2, #1
 800103e:	601a      	str	r2, [r3, #0]
            		page++;
 8001040:	4b41      	ldr	r3, [pc, #260]	; (8001148 <takeWifiSSID+0x204>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	3301      	adds	r3, #1
 8001046:	4a40      	ldr	r2, [pc, #256]	; (8001148 <takeWifiSSID+0x204>)
 8001048:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 5);
 800104a:	2105      	movs	r1, #5
 800104c:	2002      	movs	r0, #2
 800104e:	f7ff fc57 	bl	8000900 <printTemplate>
 8001052:	e013      	b.n	800107c <takeWifiSSID+0x138>
            	} else if(page == 5) {
 8001054:	4b3c      	ldr	r3, [pc, #240]	; (8001148 <takeWifiSSID+0x204>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	2b05      	cmp	r3, #5
 800105a:	d10f      	bne.n	800107c <takeWifiSSID+0x138>
            		cursorPosition = 1;
 800105c:	4b39      	ldr	r3, [pc, #228]	; (8001144 <takeWifiSSID+0x200>)
 800105e:	2201      	movs	r2, #1
 8001060:	601a      	str	r2, [r3, #0]
            		page = 1;
 8001062:	4b39      	ldr	r3, [pc, #228]	; (8001148 <takeWifiSSID+0x204>)
 8001064:	2201      	movs	r2, #1
 8001066:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 8001068:	2101      	movs	r1, #1
 800106a:	2002      	movs	r0, #2
 800106c:	f7ff fc48 	bl	8000900 <printTemplate>
 8001070:	e004      	b.n	800107c <takeWifiSSID+0x138>
            	}
            } else {
            	cursorPosition++;
 8001072:	4b34      	ldr	r3, [pc, #208]	; (8001144 <takeWifiSSID+0x200>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	3301      	adds	r3, #1
 8001078:	4a32      	ldr	r2, [pc, #200]	; (8001144 <takeWifiSSID+0x200>)
 800107a:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 800107c:	20fa      	movs	r0, #250	; 0xfa
 800107e:	f008 f9ff 	bl	8009480 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001082:	2108      	movs	r1, #8
 8001084:	4832      	ldr	r0, [pc, #200]	; (8001150 <takeWifiSSID+0x20c>)
 8001086:	f008 ffcb 	bl	800a020 <HAL_GPIO_ReadPin>
 800108a:	4603      	mov	r3, r0
 800108c:	2b01      	cmp	r3, #1
 800108e:	d169      	bne.n	8001164 <takeWifiSSID+0x220>
        	realCharPos--;
 8001090:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001092:	3b01      	subs	r3, #1
 8001094:	637b      	str	r3, [r7, #52]	; 0x34
        	if(realCharPos < 1) {
 8001096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001098:	2b00      	cmp	r3, #0
 800109a:	dc01      	bgt.n	80010a0 <takeWifiSSID+0x15c>
        		realCharPos = 80;
 800109c:	2350      	movs	r3, #80	; 0x50
 800109e:	637b      	str	r3, [r7, #52]	; 0x34
        	}
            if(cursorPosition == 1) {
 80010a0:	4b28      	ldr	r3, [pc, #160]	; (8001144 <takeWifiSSID+0x200>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d155      	bne.n	8001154 <takeWifiSSID+0x210>
            	if(page == 1) {
 80010a8:	4b27      	ldr	r3, [pc, #156]	; (8001148 <takeWifiSSID+0x204>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d10a      	bne.n	80010c6 <takeWifiSSID+0x182>
            		cursorPosition = 16;
 80010b0:	4b24      	ldr	r3, [pc, #144]	; (8001144 <takeWifiSSID+0x200>)
 80010b2:	2210      	movs	r2, #16
 80010b4:	601a      	str	r2, [r3, #0]
            		page = 5;
 80010b6:	4b24      	ldr	r3, [pc, #144]	; (8001148 <takeWifiSSID+0x204>)
 80010b8:	2205      	movs	r2, #5
 80010ba:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 5);
 80010bc:	2105      	movs	r1, #5
 80010be:	2002      	movs	r0, #2
 80010c0:	f7ff fc1e 	bl	8000900 <printTemplate>
 80010c4:	e04b      	b.n	800115e <takeWifiSSID+0x21a>
            	} else if(page == 2) {
 80010c6:	4b20      	ldr	r3, [pc, #128]	; (8001148 <takeWifiSSID+0x204>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2b02      	cmp	r3, #2
 80010cc:	d10a      	bne.n	80010e4 <takeWifiSSID+0x1a0>
            		cursorPosition = 16;
 80010ce:	4b1d      	ldr	r3, [pc, #116]	; (8001144 <takeWifiSSID+0x200>)
 80010d0:	2210      	movs	r2, #16
 80010d2:	601a      	str	r2, [r3, #0]
            		page = 1;
 80010d4:	4b1c      	ldr	r3, [pc, #112]	; (8001148 <takeWifiSSID+0x204>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 80010da:	2101      	movs	r1, #1
 80010dc:	2002      	movs	r0, #2
 80010de:	f7ff fc0f 	bl	8000900 <printTemplate>
 80010e2:	e03c      	b.n	800115e <takeWifiSSID+0x21a>
            	} else if(page == 3) {
 80010e4:	4b18      	ldr	r3, [pc, #96]	; (8001148 <takeWifiSSID+0x204>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2b03      	cmp	r3, #3
 80010ea:	d10a      	bne.n	8001102 <takeWifiSSID+0x1be>
            		cursorPosition = 16;
 80010ec:	4b15      	ldr	r3, [pc, #84]	; (8001144 <takeWifiSSID+0x200>)
 80010ee:	2210      	movs	r2, #16
 80010f0:	601a      	str	r2, [r3, #0]
            		page = 2;
 80010f2:	4b15      	ldr	r3, [pc, #84]	; (8001148 <takeWifiSSID+0x204>)
 80010f4:	2202      	movs	r2, #2
 80010f6:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 2);
 80010f8:	2102      	movs	r1, #2
 80010fa:	2002      	movs	r0, #2
 80010fc:	f7ff fc00 	bl	8000900 <printTemplate>
 8001100:	e02d      	b.n	800115e <takeWifiSSID+0x21a>
            	} else if(page == 4) {
 8001102:	4b11      	ldr	r3, [pc, #68]	; (8001148 <takeWifiSSID+0x204>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	2b04      	cmp	r3, #4
 8001108:	d10a      	bne.n	8001120 <takeWifiSSID+0x1dc>
            		cursorPosition = 16;
 800110a:	4b0e      	ldr	r3, [pc, #56]	; (8001144 <takeWifiSSID+0x200>)
 800110c:	2210      	movs	r2, #16
 800110e:	601a      	str	r2, [r3, #0]
            		page = 3;
 8001110:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <takeWifiSSID+0x204>)
 8001112:	2203      	movs	r2, #3
 8001114:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 3);
 8001116:	2103      	movs	r1, #3
 8001118:	2002      	movs	r0, #2
 800111a:	f7ff fbf1 	bl	8000900 <printTemplate>
 800111e:	e01e      	b.n	800115e <takeWifiSSID+0x21a>
            	} else if(page == 5) {
 8001120:	4b09      	ldr	r3, [pc, #36]	; (8001148 <takeWifiSSID+0x204>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	2b05      	cmp	r3, #5
 8001126:	d11a      	bne.n	800115e <takeWifiSSID+0x21a>
            		cursorPosition = 16;
 8001128:	4b06      	ldr	r3, [pc, #24]	; (8001144 <takeWifiSSID+0x200>)
 800112a:	2210      	movs	r2, #16
 800112c:	601a      	str	r2, [r3, #0]
            		page = 4;
 800112e:	4b06      	ldr	r3, [pc, #24]	; (8001148 <takeWifiSSID+0x204>)
 8001130:	2204      	movs	r2, #4
 8001132:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 4);
 8001134:	2104      	movs	r1, #4
 8001136:	2002      	movs	r0, #2
 8001138:	f7ff fbe2 	bl	8000900 <printTemplate>
 800113c:	e00f      	b.n	800115e <takeWifiSSID+0x21a>
 800113e:	bf00      	nop
 8001140:	20000c00 	.word	0x20000c00
 8001144:	20000944 	.word	0x20000944
 8001148:	20000948 	.word	0x20000948
 800114c:	40010800 	.word	0x40010800
 8001150:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 8001154:	4b3c      	ldr	r3, [pc, #240]	; (8001248 <takeWifiSSID+0x304>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	3b01      	subs	r3, #1
 800115a:	4a3b      	ldr	r2, [pc, #236]	; (8001248 <takeWifiSSID+0x304>)
 800115c:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 800115e:	20fa      	movs	r0, #250	; 0xfa
 8001160:	f008 f98e 	bl	8009480 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8001164:	2102      	movs	r1, #2
 8001166:	4839      	ldr	r0, [pc, #228]	; (800124c <takeWifiSSID+0x308>)
 8001168:	f008 ff5a 	bl	800a020 <HAL_GPIO_ReadPin>
 800116c:	4603      	mov	r3, r0
 800116e:	2b01      	cmp	r3, #1
 8001170:	d128      	bne.n	80011c4 <takeWifiSSID+0x280>
            wifiSSID[wifiNameLoc] = getCharFromCursorPosition(realCharPos - 1);
 8001172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001174:	3b01      	subs	r3, #1
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff fdba 	bl	8000cf0 <getCharFromCursorPosition>
 800117c:	4603      	mov	r3, r0
 800117e:	4619      	mov	r1, r3
 8001180:	4a33      	ldr	r2, [pc, #204]	; (8001250 <takeWifiSSID+0x30c>)
 8001182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001184:	4413      	add	r3, r2
 8001186:	460a      	mov	r2, r1
 8001188:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiSSID[wifiNameLoc]);
 800118a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800118c:	b2d9      	uxtb	r1, r3
 800118e:	4a30      	ldr	r2, [pc, #192]	; (8001250 <takeWifiSSID+0x30c>)
 8001190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001192:	4413      	add	r3, r2
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	461a      	mov	r2, r3
 8001198:	2001      	movs	r0, #1
 800119a:	f7ff fb22 	bl	80007e2 <lcd_print_char>

            realCharPosLoc[wifiNameLoc] = realCharPos-1;
 800119e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011a0:	b2db      	uxtb	r3, r3
 80011a2:	3b01      	subs	r3, #1
 80011a4:	b2d9      	uxtb	r1, r3
 80011a6:	f107 0208 	add.w	r2, r7, #8
 80011aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011ac:	4413      	add	r3, r2
 80011ae:	460a      	mov	r2, r1
 80011b0:	701a      	strb	r2, [r3, #0]

            writeLoc++;
 80011b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011b4:	3301      	adds	r3, #1
 80011b6:	62fb      	str	r3, [r7, #44]	; 0x2c
            wifiNameLoc++;
 80011b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011ba:	3301      	adds	r3, #1
 80011bc:	633b      	str	r3, [r7, #48]	; 0x30

            HAL_Delay(250);
 80011be:	20fa      	movs	r0, #250	; 0xfa
 80011c0:	f008 f95e 	bl	8009480 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80011c4:	2104      	movs	r1, #4
 80011c6:	4821      	ldr	r0, [pc, #132]	; (800124c <takeWifiSSID+0x308>)
 80011c8:	f008 ff2a 	bl	800a020 <HAL_GPIO_ReadPin>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d12e      	bne.n	8001230 <takeWifiSSID+0x2ec>
        	if(strlen(wifiSSID) >= 1) {
 80011d2:	4b1f      	ldr	r3, [pc, #124]	; (8001250 <takeWifiSSID+0x30c>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d027      	beq.n	800122a <takeWifiSSID+0x2e6>
        		wifiSSID[wifiNameLoc] = '\0';
 80011da:	4a1d      	ldr	r2, [pc, #116]	; (8001250 <takeWifiSSID+0x30c>)
 80011dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011de:	4413      	add	r3, r2
 80011e0:	2200      	movs	r2, #0
 80011e2:	701a      	strb	r2, [r3, #0]

        		lcd_delete_char(1, 6+wifiNameLoc);
 80011e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011e6:	b2db      	uxtb	r3, r3
 80011e8:	3306      	adds	r3, #6
 80011ea:	b2db      	uxtb	r3, r3
 80011ec:	4619      	mov	r1, r3
 80011ee:	2001      	movs	r0, #1
 80011f0:	f7ff fb18 	bl	8000824 <lcd_delete_char>
        		HAL_Delay(50);
 80011f4:	2032      	movs	r0, #50	; 0x32
 80011f6:	f008 f943 	bl	8009480 <HAL_Delay>
        		if(writeLoc > 7) {
 80011fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011fc:	2b07      	cmp	r3, #7
 80011fe:	dd03      	ble.n	8001208 <takeWifiSSID+0x2c4>
        			writeLoc--;
 8001200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001202:	3b01      	subs	r3, #1
 8001204:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001206:	e004      	b.n	8001212 <takeWifiSSID+0x2ce>
        		} else if(writeLoc < 7) {
 8001208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800120a:	2b06      	cmp	r3, #6
 800120c:	dc01      	bgt.n	8001212 <takeWifiSSID+0x2ce>
        			writeLoc = 7;
 800120e:	2307      	movs	r3, #7
 8001210:	62fb      	str	r3, [r7, #44]	; 0x2c
        		}

        		if(wifiNameLoc > 0) {
 8001212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001214:	2b00      	cmp	r3, #0
 8001216:	dd03      	ble.n	8001220 <takeWifiSSID+0x2dc>
        			wifiNameLoc--;
 8001218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800121a:	3b01      	subs	r3, #1
 800121c:	633b      	str	r3, [r7, #48]	; 0x30
 800121e:	e004      	b.n	800122a <takeWifiSSID+0x2e6>
        		} else if(wifiNameLoc < 0) {
 8001220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001222:	2b00      	cmp	r3, #0
 8001224:	da01      	bge.n	800122a <takeWifiSSID+0x2e6>
        			wifiNameLoc = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	633b      	str	r3, [r7, #48]	; 0x30
        		}
        	}

        	HAL_Delay(250);
 800122a:	20fa      	movs	r0, #250	; 0xfa
 800122c:	f008 f928 	bl	8009480 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8001230:	4b05      	ldr	r3, [pc, #20]	; (8001248 <takeWifiSSID+0x304>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	b2db      	uxtb	r3, r3
 8001236:	4619      	mov	r1, r3
 8001238:	2002      	movs	r0, #2
 800123a:	f7ff fa9e 	bl	800077a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800123e:	e6a1      	b.n	8000f84 <takeWifiSSID+0x40>
    }
}
 8001240:	bf00      	nop
 8001242:	3738      	adds	r7, #56	; 0x38
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20000944 	.word	0x20000944
 800124c:	40010800 	.word	0x40010800
 8001250:	20000c00 	.word	0x20000c00

08001254 <takeWifiPass>:

void takeWifiPass(int state, I2C_HandleTypeDef *hi2c1) {
 8001254:	b580      	push	{r7, lr}
 8001256:	b08e      	sub	sp, #56	; 0x38
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
    lcd_cursor(1);
 800125e:	2001      	movs	r0, #1
 8001260:	f7ff fb08 	bl	8000874 <lcd_cursor>

    if(state == 0) {
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d104      	bne.n	8001274 <takeWifiPass+0x20>
    	memset(wifiPass, 0, sizeof(wifiPass));
 800126a:	2221      	movs	r2, #33	; 0x21
 800126c:	2100      	movs	r1, #0
 800126e:	4878      	ldr	r0, [pc, #480]	; (8001450 <takeWifiPass+0x1fc>)
 8001270:	f00c f81a 	bl	800d2a8 <memset>
    }

    int realCharPos = 1;
 8001274:	2301      	movs	r3, #1
 8001276:	637b      	str	r3, [r7, #52]	; 0x34
    cursorPosition = 1;
 8001278:	4b76      	ldr	r3, [pc, #472]	; (8001454 <takeWifiPass+0x200>)
 800127a:	2201      	movs	r2, #1
 800127c:	601a      	str	r2, [r3, #0]
    page = 1;
 800127e:	4b76      	ldr	r3, [pc, #472]	; (8001458 <takeWifiPass+0x204>)
 8001280:	2201      	movs	r2, #1
 8001282:	601a      	str	r2, [r3, #0]
    int wifiPassLoc = 0;
 8001284:	2300      	movs	r3, #0
 8001286:	633b      	str	r3, [r7, #48]	; 0x30
    int writeLoc = 7;
 8001288:	2307      	movs	r3, #7
 800128a:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t realCharPosLoc[33];

    printTemplate(3, 1);
 800128c:	2101      	movs	r1, #1
 800128e:	2003      	movs	r0, #3
 8001290:	f7ff fb36 	bl	8000900 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8001294:	2108      	movs	r1, #8
 8001296:	4871      	ldr	r0, [pc, #452]	; (800145c <takeWifiPass+0x208>)
 8001298:	f008 fec2 	bl	800a020 <HAL_GPIO_ReadPin>
 800129c:	4603      	mov	r3, r0
 800129e:	2b01      	cmp	r3, #1
 80012a0:	d109      	bne.n	80012b6 <takeWifiPass+0x62>
            lcd_cursor(0);
 80012a2:	2000      	movs	r0, #0
 80012a4:	f7ff fae6 	bl	8000874 <lcd_cursor>

            writeCharToEEPROM4Wifi(&hi2c1, wifiPass, 2);
 80012a8:	463b      	mov	r3, r7
 80012aa:	2202      	movs	r2, #2
 80012ac:	4968      	ldr	r1, [pc, #416]	; (8001450 <takeWifiPass+0x1fc>)
 80012ae:	4618      	mov	r0, r3
 80012b0:	f000 f9ce 	bl	8001650 <writeCharToEEPROM4Wifi>

            break;
 80012b4:	e14c      	b.n	8001550 <takeWifiPass+0x2fc>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 80012b6:	2101      	movs	r1, #1
 80012b8:	4868      	ldr	r0, [pc, #416]	; (800145c <takeWifiPass+0x208>)
 80012ba:	f008 feb1 	bl	800a020 <HAL_GPIO_ReadPin>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d166      	bne.n	8001392 <takeWifiPass+0x13e>
        	realCharPos++;
 80012c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012c6:	3301      	adds	r3, #1
 80012c8:	637b      	str	r3, [r7, #52]	; 0x34
        	if(realCharPos > 80) {
 80012ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80012cc:	2b50      	cmp	r3, #80	; 0x50
 80012ce:	dd01      	ble.n	80012d4 <takeWifiPass+0x80>
        	    realCharPos = 1;
 80012d0:	2301      	movs	r3, #1
 80012d2:	637b      	str	r3, [r7, #52]	; 0x34
        	}
            if (cursorPosition == 16) {
 80012d4:	4b5f      	ldr	r3, [pc, #380]	; (8001454 <takeWifiPass+0x200>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2b10      	cmp	r3, #16
 80012da:	d152      	bne.n	8001382 <takeWifiPass+0x12e>
            	if(page == 1) {
 80012dc:	4b5e      	ldr	r3, [pc, #376]	; (8001458 <takeWifiPass+0x204>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d10c      	bne.n	80012fe <takeWifiPass+0xaa>
            		cursorPosition = 1;
 80012e4:	4b5b      	ldr	r3, [pc, #364]	; (8001454 <takeWifiPass+0x200>)
 80012e6:	2201      	movs	r2, #1
 80012e8:	601a      	str	r2, [r3, #0]
            		page++;
 80012ea:	4b5b      	ldr	r3, [pc, #364]	; (8001458 <takeWifiPass+0x204>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	3301      	adds	r3, #1
 80012f0:	4a59      	ldr	r2, [pc, #356]	; (8001458 <takeWifiPass+0x204>)
 80012f2:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 2);
 80012f4:	2102      	movs	r1, #2
 80012f6:	2003      	movs	r0, #3
 80012f8:	f7ff fb02 	bl	8000900 <printTemplate>
 80012fc:	e046      	b.n	800138c <takeWifiPass+0x138>
            	} else if(page == 2) {
 80012fe:	4b56      	ldr	r3, [pc, #344]	; (8001458 <takeWifiPass+0x204>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2b02      	cmp	r3, #2
 8001304:	d10c      	bne.n	8001320 <takeWifiPass+0xcc>
            		cursorPosition = 1;
 8001306:	4b53      	ldr	r3, [pc, #332]	; (8001454 <takeWifiPass+0x200>)
 8001308:	2201      	movs	r2, #1
 800130a:	601a      	str	r2, [r3, #0]
            		page++;
 800130c:	4b52      	ldr	r3, [pc, #328]	; (8001458 <takeWifiPass+0x204>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	3301      	adds	r3, #1
 8001312:	4a51      	ldr	r2, [pc, #324]	; (8001458 <takeWifiPass+0x204>)
 8001314:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 3);
 8001316:	2103      	movs	r1, #3
 8001318:	2003      	movs	r0, #3
 800131a:	f7ff faf1 	bl	8000900 <printTemplate>
 800131e:	e035      	b.n	800138c <takeWifiPass+0x138>
            	} else if(page == 3) {
 8001320:	4b4d      	ldr	r3, [pc, #308]	; (8001458 <takeWifiPass+0x204>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b03      	cmp	r3, #3
 8001326:	d10c      	bne.n	8001342 <takeWifiPass+0xee>
            		cursorPosition = 1;
 8001328:	4b4a      	ldr	r3, [pc, #296]	; (8001454 <takeWifiPass+0x200>)
 800132a:	2201      	movs	r2, #1
 800132c:	601a      	str	r2, [r3, #0]
            		page++;
 800132e:	4b4a      	ldr	r3, [pc, #296]	; (8001458 <takeWifiPass+0x204>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	3301      	adds	r3, #1
 8001334:	4a48      	ldr	r2, [pc, #288]	; (8001458 <takeWifiPass+0x204>)
 8001336:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 4);
 8001338:	2104      	movs	r1, #4
 800133a:	2003      	movs	r0, #3
 800133c:	f7ff fae0 	bl	8000900 <printTemplate>
 8001340:	e024      	b.n	800138c <takeWifiPass+0x138>
            	} else if(page == 4) {
 8001342:	4b45      	ldr	r3, [pc, #276]	; (8001458 <takeWifiPass+0x204>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	2b04      	cmp	r3, #4
 8001348:	d10c      	bne.n	8001364 <takeWifiPass+0x110>
            		cursorPosition = 1;
 800134a:	4b42      	ldr	r3, [pc, #264]	; (8001454 <takeWifiPass+0x200>)
 800134c:	2201      	movs	r2, #1
 800134e:	601a      	str	r2, [r3, #0]
            		page++;
 8001350:	4b41      	ldr	r3, [pc, #260]	; (8001458 <takeWifiPass+0x204>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	3301      	adds	r3, #1
 8001356:	4a40      	ldr	r2, [pc, #256]	; (8001458 <takeWifiPass+0x204>)
 8001358:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 5);
 800135a:	2105      	movs	r1, #5
 800135c:	2003      	movs	r0, #3
 800135e:	f7ff facf 	bl	8000900 <printTemplate>
 8001362:	e013      	b.n	800138c <takeWifiPass+0x138>
            	} else if(page == 5) {
 8001364:	4b3c      	ldr	r3, [pc, #240]	; (8001458 <takeWifiPass+0x204>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2b05      	cmp	r3, #5
 800136a:	d10f      	bne.n	800138c <takeWifiPass+0x138>
            		cursorPosition = 1;
 800136c:	4b39      	ldr	r3, [pc, #228]	; (8001454 <takeWifiPass+0x200>)
 800136e:	2201      	movs	r2, #1
 8001370:	601a      	str	r2, [r3, #0]
            		page = 1;
 8001372:	4b39      	ldr	r3, [pc, #228]	; (8001458 <takeWifiPass+0x204>)
 8001374:	2201      	movs	r2, #1
 8001376:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 8001378:	2101      	movs	r1, #1
 800137a:	2003      	movs	r0, #3
 800137c:	f7ff fac0 	bl	8000900 <printTemplate>
 8001380:	e004      	b.n	800138c <takeWifiPass+0x138>
            	}
            } else {
            	cursorPosition++;
 8001382:	4b34      	ldr	r3, [pc, #208]	; (8001454 <takeWifiPass+0x200>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	3301      	adds	r3, #1
 8001388:	4a32      	ldr	r2, [pc, #200]	; (8001454 <takeWifiPass+0x200>)
 800138a:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 800138c:	20fa      	movs	r0, #250	; 0xfa
 800138e:	f008 f877 	bl	8009480 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001392:	2108      	movs	r1, #8
 8001394:	4832      	ldr	r0, [pc, #200]	; (8001460 <takeWifiPass+0x20c>)
 8001396:	f008 fe43 	bl	800a020 <HAL_GPIO_ReadPin>
 800139a:	4603      	mov	r3, r0
 800139c:	2b01      	cmp	r3, #1
 800139e:	d169      	bne.n	8001474 <takeWifiPass+0x220>
        	realCharPos--;
 80013a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013a2:	3b01      	subs	r3, #1
 80013a4:	637b      	str	r3, [r7, #52]	; 0x34
        	if(realCharPos < 1) {
 80013a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	dc01      	bgt.n	80013b0 <takeWifiPass+0x15c>
        	    realCharPos = 80;
 80013ac:	2350      	movs	r3, #80	; 0x50
 80013ae:	637b      	str	r3, [r7, #52]	; 0x34
        	}
            if(cursorPosition == 1) {
 80013b0:	4b28      	ldr	r3, [pc, #160]	; (8001454 <takeWifiPass+0x200>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d155      	bne.n	8001464 <takeWifiPass+0x210>
            	if(page == 1) {
 80013b8:	4b27      	ldr	r3, [pc, #156]	; (8001458 <takeWifiPass+0x204>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d10a      	bne.n	80013d6 <takeWifiPass+0x182>
            		cursorPosition = 16;
 80013c0:	4b24      	ldr	r3, [pc, #144]	; (8001454 <takeWifiPass+0x200>)
 80013c2:	2210      	movs	r2, #16
 80013c4:	601a      	str	r2, [r3, #0]
            		page = 5;
 80013c6:	4b24      	ldr	r3, [pc, #144]	; (8001458 <takeWifiPass+0x204>)
 80013c8:	2205      	movs	r2, #5
 80013ca:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 5);
 80013cc:	2105      	movs	r1, #5
 80013ce:	2003      	movs	r0, #3
 80013d0:	f7ff fa96 	bl	8000900 <printTemplate>
 80013d4:	e04b      	b.n	800146e <takeWifiPass+0x21a>
            	} else if(page == 2) {
 80013d6:	4b20      	ldr	r3, [pc, #128]	; (8001458 <takeWifiPass+0x204>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d10a      	bne.n	80013f4 <takeWifiPass+0x1a0>
            		cursorPosition = 16;
 80013de:	4b1d      	ldr	r3, [pc, #116]	; (8001454 <takeWifiPass+0x200>)
 80013e0:	2210      	movs	r2, #16
 80013e2:	601a      	str	r2, [r3, #0]
            		page = 1;
 80013e4:	4b1c      	ldr	r3, [pc, #112]	; (8001458 <takeWifiPass+0x204>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 80013ea:	2101      	movs	r1, #1
 80013ec:	2003      	movs	r0, #3
 80013ee:	f7ff fa87 	bl	8000900 <printTemplate>
 80013f2:	e03c      	b.n	800146e <takeWifiPass+0x21a>
            	} else if(page == 3) {
 80013f4:	4b18      	ldr	r3, [pc, #96]	; (8001458 <takeWifiPass+0x204>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	2b03      	cmp	r3, #3
 80013fa:	d10a      	bne.n	8001412 <takeWifiPass+0x1be>
            		cursorPosition = 16;
 80013fc:	4b15      	ldr	r3, [pc, #84]	; (8001454 <takeWifiPass+0x200>)
 80013fe:	2210      	movs	r2, #16
 8001400:	601a      	str	r2, [r3, #0]
            		page = 2;
 8001402:	4b15      	ldr	r3, [pc, #84]	; (8001458 <takeWifiPass+0x204>)
 8001404:	2202      	movs	r2, #2
 8001406:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 2);
 8001408:	2102      	movs	r1, #2
 800140a:	2003      	movs	r0, #3
 800140c:	f7ff fa78 	bl	8000900 <printTemplate>
 8001410:	e02d      	b.n	800146e <takeWifiPass+0x21a>
            	} else if(page == 4) {
 8001412:	4b11      	ldr	r3, [pc, #68]	; (8001458 <takeWifiPass+0x204>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2b04      	cmp	r3, #4
 8001418:	d10a      	bne.n	8001430 <takeWifiPass+0x1dc>
            		cursorPosition = 16;
 800141a:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <takeWifiPass+0x200>)
 800141c:	2210      	movs	r2, #16
 800141e:	601a      	str	r2, [r3, #0]
            		page = 3;
 8001420:	4b0d      	ldr	r3, [pc, #52]	; (8001458 <takeWifiPass+0x204>)
 8001422:	2203      	movs	r2, #3
 8001424:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 3);
 8001426:	2103      	movs	r1, #3
 8001428:	2003      	movs	r0, #3
 800142a:	f7ff fa69 	bl	8000900 <printTemplate>
 800142e:	e01e      	b.n	800146e <takeWifiPass+0x21a>
            	} else if(page == 5) {
 8001430:	4b09      	ldr	r3, [pc, #36]	; (8001458 <takeWifiPass+0x204>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b05      	cmp	r3, #5
 8001436:	d11a      	bne.n	800146e <takeWifiPass+0x21a>
            		cursorPosition = 16;
 8001438:	4b06      	ldr	r3, [pc, #24]	; (8001454 <takeWifiPass+0x200>)
 800143a:	2210      	movs	r2, #16
 800143c:	601a      	str	r2, [r3, #0]
            		page = 4;
 800143e:	4b06      	ldr	r3, [pc, #24]	; (8001458 <takeWifiPass+0x204>)
 8001440:	2204      	movs	r2, #4
 8001442:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 4);
 8001444:	2104      	movs	r1, #4
 8001446:	2003      	movs	r0, #3
 8001448:	f7ff fa5a 	bl	8000900 <printTemplate>
 800144c:	e00f      	b.n	800146e <takeWifiPass+0x21a>
 800144e:	bf00      	nop
 8001450:	20000c24 	.word	0x20000c24
 8001454:	20000944 	.word	0x20000944
 8001458:	20000948 	.word	0x20000948
 800145c:	40010800 	.word	0x40010800
 8001460:	40011000 	.word	0x40011000
            	}
            } else {
            	cursorPosition--;
 8001464:	4b3c      	ldr	r3, [pc, #240]	; (8001558 <takeWifiPass+0x304>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	3b01      	subs	r3, #1
 800146a:	4a3b      	ldr	r2, [pc, #236]	; (8001558 <takeWifiPass+0x304>)
 800146c:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 800146e:	20fa      	movs	r0, #250	; 0xfa
 8001470:	f008 f806 	bl	8009480 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8001474:	2102      	movs	r1, #2
 8001476:	4839      	ldr	r0, [pc, #228]	; (800155c <takeWifiPass+0x308>)
 8001478:	f008 fdd2 	bl	800a020 <HAL_GPIO_ReadPin>
 800147c:	4603      	mov	r3, r0
 800147e:	2b01      	cmp	r3, #1
 8001480:	d128      	bne.n	80014d4 <takeWifiPass+0x280>
        	wifiPass[wifiPassLoc] = getCharFromCursorPosition(realCharPos - 1);
 8001482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001484:	3b01      	subs	r3, #1
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff fc32 	bl	8000cf0 <getCharFromCursorPosition>
 800148c:	4603      	mov	r3, r0
 800148e:	4619      	mov	r1, r3
 8001490:	4a33      	ldr	r2, [pc, #204]	; (8001560 <takeWifiPass+0x30c>)
 8001492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001494:	4413      	add	r3, r2
 8001496:	460a      	mov	r2, r1
 8001498:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiPass[wifiPassLoc]);
 800149a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800149c:	b2d9      	uxtb	r1, r3
 800149e:	4a30      	ldr	r2, [pc, #192]	; (8001560 <takeWifiPass+0x30c>)
 80014a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014a2:	4413      	add	r3, r2
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	461a      	mov	r2, r3
 80014a8:	2001      	movs	r0, #1
 80014aa:	f7ff f99a 	bl	80007e2 <lcd_print_char>

            realCharPosLoc[wifiPassLoc] = realCharPos-1;
 80014ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80014b0:	b2db      	uxtb	r3, r3
 80014b2:	3b01      	subs	r3, #1
 80014b4:	b2d9      	uxtb	r1, r3
 80014b6:	f107 0208 	add.w	r2, r7, #8
 80014ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014bc:	4413      	add	r3, r2
 80014be:	460a      	mov	r2, r1
 80014c0:	701a      	strb	r2, [r3, #0]

            writeLoc++;
 80014c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014c4:	3301      	adds	r3, #1
 80014c6:	62fb      	str	r3, [r7, #44]	; 0x2c
            wifiPassLoc++;
 80014c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014ca:	3301      	adds	r3, #1
 80014cc:	633b      	str	r3, [r7, #48]	; 0x30

            HAL_Delay(250);
 80014ce:	20fa      	movs	r0, #250	; 0xfa
 80014d0:	f007 ffd6 	bl	8009480 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 80014d4:	2104      	movs	r1, #4
 80014d6:	4821      	ldr	r0, [pc, #132]	; (800155c <takeWifiPass+0x308>)
 80014d8:	f008 fda2 	bl	800a020 <HAL_GPIO_ReadPin>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d12e      	bne.n	8001540 <takeWifiPass+0x2ec>
            if(strlen(wifiPass) >= 1) {
 80014e2:	4b1f      	ldr	r3, [pc, #124]	; (8001560 <takeWifiPass+0x30c>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d027      	beq.n	800153a <takeWifiPass+0x2e6>
            	wifiPass[wifiPassLoc] = '\0';
 80014ea:	4a1d      	ldr	r2, [pc, #116]	; (8001560 <takeWifiPass+0x30c>)
 80014ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014ee:	4413      	add	r3, r2
 80014f0:	2200      	movs	r2, #0
 80014f2:	701a      	strb	r2, [r3, #0]

            	lcd_delete_char(1, 6+wifiPassLoc);
 80014f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	3306      	adds	r3, #6
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	4619      	mov	r1, r3
 80014fe:	2001      	movs	r0, #1
 8001500:	f7ff f990 	bl	8000824 <lcd_delete_char>
            	HAL_Delay(50);
 8001504:	2032      	movs	r0, #50	; 0x32
 8001506:	f007 ffbb 	bl	8009480 <HAL_Delay>

            	if(writeLoc > 7) {
 800150a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800150c:	2b07      	cmp	r3, #7
 800150e:	dd03      	ble.n	8001518 <takeWifiPass+0x2c4>
            		writeLoc--;
 8001510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001512:	3b01      	subs	r3, #1
 8001514:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001516:	e004      	b.n	8001522 <takeWifiPass+0x2ce>
            	} else if(writeLoc < 7) {
 8001518:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800151a:	2b06      	cmp	r3, #6
 800151c:	dc01      	bgt.n	8001522 <takeWifiPass+0x2ce>
            		writeLoc = 7;
 800151e:	2307      	movs	r3, #7
 8001520:	62fb      	str	r3, [r7, #44]	; 0x2c
            	}

            	if(wifiPassLoc > 0) {
 8001522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001524:	2b00      	cmp	r3, #0
 8001526:	dd03      	ble.n	8001530 <takeWifiPass+0x2dc>
            		wifiPassLoc--;
 8001528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800152a:	3b01      	subs	r3, #1
 800152c:	633b      	str	r3, [r7, #48]	; 0x30
 800152e:	e004      	b.n	800153a <takeWifiPass+0x2e6>
            	} else if(wifiPassLoc < 0) {
 8001530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001532:	2b00      	cmp	r3, #0
 8001534:	da01      	bge.n	800153a <takeWifiPass+0x2e6>
            		wifiPassLoc = 0;
 8001536:	2300      	movs	r3, #0
 8001538:	633b      	str	r3, [r7, #48]	; 0x30
            	}
            }

            HAL_Delay(250);
 800153a:	20fa      	movs	r0, #250	; 0xfa
 800153c:	f007 ffa0 	bl	8009480 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8001540:	4b05      	ldr	r3, [pc, #20]	; (8001558 <takeWifiPass+0x304>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	b2db      	uxtb	r3, r3
 8001546:	4619      	mov	r1, r3
 8001548:	2002      	movs	r0, #2
 800154a:	f7ff f916 	bl	800077a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 800154e:	e6a1      	b.n	8001294 <takeWifiPass+0x40>
    }
}
 8001550:	bf00      	nop
 8001552:	3738      	adds	r7, #56	; 0x38
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	20000944 	.word	0x20000944
 800155c:	40010800 	.word	0x40010800
 8001560:	20000c24 	.word	0x20000c24

08001564 <writeDataToEEPROM>:

void writeDataToEEPROM(I2C_HandleTypeDef *hi2c1, const uint8_t* transferData, uint8_t startPos) {
 8001564:	b5b0      	push	{r4, r5, r7, lr}
 8001566:	b08a      	sub	sp, #40	; 0x28
 8001568:	af04      	add	r7, sp, #16
 800156a:	60f8      	str	r0, [r7, #12]
 800156c:	60b9      	str	r1, [r7, #8]
 800156e:	4613      	mov	r3, r2
 8001570:	71fb      	strb	r3, [r7, #7]
	uint8_t arrayLength = sizeof(transferData)/sizeof(transferData[0]);
 8001572:	2304      	movs	r3, #4
 8001574:	75fb      	strb	r3, [r7, #23]

	HAL_I2C_Mem_Write(&hi2c1, 0xA0, startPos, arrayLength, &eepromData[arrayLength], arrayLength, 3000);
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	b299      	uxth	r1, r3
 800157a:	7dfb      	ldrb	r3, [r7, #23]
 800157c:	b29c      	uxth	r4, r3
 800157e:	7dfb      	ldrb	r3, [r7, #23]
 8001580:	4a0b      	ldr	r2, [pc, #44]	; (80015b0 <writeDataToEEPROM+0x4c>)
 8001582:	4413      	add	r3, r2
 8001584:	7dfa      	ldrb	r2, [r7, #23]
 8001586:	b292      	uxth	r2, r2
 8001588:	f107 000c 	add.w	r0, r7, #12
 800158c:	f640 35b8 	movw	r5, #3000	; 0xbb8
 8001590:	9502      	str	r5, [sp, #8]
 8001592:	9201      	str	r2, [sp, #4]
 8001594:	9300      	str	r3, [sp, #0]
 8001596:	4623      	mov	r3, r4
 8001598:	460a      	mov	r2, r1
 800159a:	21a0      	movs	r1, #160	; 0xa0
 800159c:	f008 fffa 	bl	800a594 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 80015a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80015a4:	f007 ff6c 	bl	8009480 <HAL_Delay>
}
 80015a8:	bf00      	nop
 80015aa:	3718      	adds	r7, #24
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bdb0      	pop	{r4, r5, r7, pc}
 80015b0:	20000b38 	.word	0x20000b38

080015b4 <writeCharToEEPROM4ID>:

void writeCharToEEPROM4ID(I2C_HandleTypeDef *hi2c1, const char* sendArray) {
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b08a      	sub	sp, #40	; 0x28
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
	uint8_t charPos[12];
	uint8_t karakterLength = strlen(sendArray);
 80015be:	6838      	ldr	r0, [r7, #0]
 80015c0:	f7fe fe30 	bl	8000224 <strlen>
 80015c4:	4603      	mov	r3, r0
 80015c6:	76fb      	strb	r3, [r7, #27]
	uint8_t tempArrayLength = strlen(numbersArray);
 80015c8:	481f      	ldr	r0, [pc, #124]	; (8001648 <writeCharToEEPROM4ID+0x94>)
 80015ca:	f7fe fe2b 	bl	8000224 <strlen>
 80015ce:	4603      	mov	r3, r0
 80015d0:	76bb      	strb	r3, [r7, #26]

	uint8_t loopVal = 0;
 80015d2:	2300      	movs	r3, #0
 80015d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	for(int i=0; i<karakterLength; i++) {
 80015d8:	2300      	movs	r3, #0
 80015da:	623b      	str	r3, [r7, #32]
 80015dc:	e023      	b.n	8001626 <writeCharToEEPROM4ID+0x72>
		for(int z=0; z<tempArrayLength; z++) {
 80015de:	2300      	movs	r3, #0
 80015e0:	61fb      	str	r3, [r7, #28]
 80015e2:	e019      	b.n	8001618 <writeCharToEEPROM4ID+0x64>
			if(sendArray[i] == numbersArray[z]) {
 80015e4:	6a3b      	ldr	r3, [r7, #32]
 80015e6:	683a      	ldr	r2, [r7, #0]
 80015e8:	4413      	add	r3, r2
 80015ea:	781a      	ldrb	r2, [r3, #0]
 80015ec:	4916      	ldr	r1, [pc, #88]	; (8001648 <writeCharToEEPROM4ID+0x94>)
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	440b      	add	r3, r1
 80015f2:	781b      	ldrb	r3, [r3, #0]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d10c      	bne.n	8001612 <writeCharToEEPROM4ID+0x5e>
				charPos[loopVal] = z;
 80015f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015fc:	69fa      	ldr	r2, [r7, #28]
 80015fe:	b2d2      	uxtb	r2, r2
 8001600:	3328      	adds	r3, #40	; 0x28
 8001602:	443b      	add	r3, r7
 8001604:	f803 2c1c 	strb.w	r2, [r3, #-28]
				loopVal++;
 8001608:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800160c:	3301      	adds	r3, #1
 800160e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		for(int z=0; z<tempArrayLength; z++) {
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	3301      	adds	r3, #1
 8001616:	61fb      	str	r3, [r7, #28]
 8001618:	7ebb      	ldrb	r3, [r7, #26]
 800161a:	69fa      	ldr	r2, [r7, #28]
 800161c:	429a      	cmp	r2, r3
 800161e:	dbe1      	blt.n	80015e4 <writeCharToEEPROM4ID+0x30>
	for(int i=0; i<karakterLength; i++) {
 8001620:	6a3b      	ldr	r3, [r7, #32]
 8001622:	3301      	adds	r3, #1
 8001624:	623b      	str	r3, [r7, #32]
 8001626:	7efb      	ldrb	r3, [r7, #27]
 8001628:	6a3a      	ldr	r2, [r7, #32]
 800162a:	429a      	cmp	r2, r3
 800162c:	dbd7      	blt.n	80015de <writeCharToEEPROM4ID+0x2a>
			}
		}
	}

	writeDataToEEPROM(&hi2c1, charPos, idStartPos);
 800162e:	4b07      	ldr	r3, [pc, #28]	; (800164c <writeCharToEEPROM4ID+0x98>)
 8001630:	781a      	ldrb	r2, [r3, #0]
 8001632:	f107 010c 	add.w	r1, r7, #12
 8001636:	1d3b      	adds	r3, r7, #4
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff ff93 	bl	8001564 <writeDataToEEPROM>
}
 800163e:	bf00      	nop
 8001640:	3728      	adds	r7, #40	; 0x28
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	200009b4 	.word	0x200009b4
 800164c:	200009bf 	.word	0x200009bf

08001650 <writeCharToEEPROM4Wifi>:

void writeCharToEEPROM4Wifi(I2C_HandleTypeDef *hi2c1, const char* sendArray, uint8_t stat) {
 8001650:	b580      	push	{r7, lr}
 8001652:	b090      	sub	sp, #64	; 0x40
 8001654:	af00      	add	r7, sp, #0
 8001656:	60f8      	str	r0, [r7, #12]
 8001658:	60b9      	str	r1, [r7, #8]
 800165a:	4613      	mov	r3, r2
 800165c:	71fb      	strb	r3, [r7, #7]
	uint8_t charPos[33];
	uint8_t karakterLength = strlen(sendArray);
 800165e:	68b8      	ldr	r0, [r7, #8]
 8001660:	f7fe fde0 	bl	8000224 <strlen>
 8001664:	4603      	mov	r3, r0
 8001666:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
	uint8_t tempArrayLength = strlen(charactersArray);
 800166a:	4828      	ldr	r0, [pc, #160]	; (800170c <writeCharToEEPROM4Wifi+0xbc>)
 800166c:	f7fe fdda 	bl	8000224 <strlen>
 8001670:	4603      	mov	r3, r0
 8001672:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32

	uint8_t loopVal = 0;
 8001676:	2300      	movs	r3, #0
 8001678:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	for(int i=0; i<karakterLength; i++) {
 800167c:	2300      	movs	r3, #0
 800167e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001680:	e024      	b.n	80016cc <writeCharToEEPROM4Wifi+0x7c>
		for(int z=0; z<tempArrayLength; z++) {
 8001682:	2300      	movs	r3, #0
 8001684:	637b      	str	r3, [r7, #52]	; 0x34
 8001686:	e019      	b.n	80016bc <writeCharToEEPROM4Wifi+0x6c>
			if(sendArray[i] == charactersArray[z]) {
 8001688:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800168a:	68ba      	ldr	r2, [r7, #8]
 800168c:	4413      	add	r3, r2
 800168e:	781a      	ldrb	r2, [r3, #0]
 8001690:	491e      	ldr	r1, [pc, #120]	; (800170c <writeCharToEEPROM4Wifi+0xbc>)
 8001692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001694:	440b      	add	r3, r1
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	429a      	cmp	r2, r3
 800169a:	d10c      	bne.n	80016b6 <writeCharToEEPROM4Wifi+0x66>
				charPos[loopVal] = z;
 800169c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80016a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80016a2:	b2d2      	uxtb	r2, r2
 80016a4:	3340      	adds	r3, #64	; 0x40
 80016a6:	443b      	add	r3, r7
 80016a8:	f803 2c30 	strb.w	r2, [r3, #-48]
				loopVal++;
 80016ac:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80016b0:	3301      	adds	r3, #1
 80016b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		for(int z=0; z<tempArrayLength; z++) {
 80016b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016b8:	3301      	adds	r3, #1
 80016ba:	637b      	str	r3, [r7, #52]	; 0x34
 80016bc:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 80016c0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80016c2:	429a      	cmp	r2, r3
 80016c4:	dbe0      	blt.n	8001688 <writeCharToEEPROM4Wifi+0x38>
	for(int i=0; i<karakterLength; i++) {
 80016c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80016c8:	3301      	adds	r3, #1
 80016ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80016cc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80016d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80016d2:	429a      	cmp	r2, r3
 80016d4:	dbd5      	blt.n	8001682 <writeCharToEEPROM4Wifi+0x32>
			}
		}
	}

	if(stat == 1) {
 80016d6:	79fb      	ldrb	r3, [r7, #7]
 80016d8:	2b01      	cmp	r3, #1
 80016da:	d109      	bne.n	80016f0 <writeCharToEEPROM4Wifi+0xa0>
		writeDataToEEPROM(&hi2c1, charPos, ssidStartPos);
 80016dc:	4b0c      	ldr	r3, [pc, #48]	; (8001710 <writeCharToEEPROM4Wifi+0xc0>)
 80016de:	781a      	ldrb	r2, [r3, #0]
 80016e0:	f107 0110 	add.w	r1, r7, #16
 80016e4:	f107 030c 	add.w	r3, r7, #12
 80016e8:	4618      	mov	r0, r3
 80016ea:	f7ff ff3b 	bl	8001564 <writeDataToEEPROM>
	} else {
		writeDataToEEPROM(&hi2c1, charPos, passStartPos);
	}
}
 80016ee:	e008      	b.n	8001702 <writeCharToEEPROM4Wifi+0xb2>
		writeDataToEEPROM(&hi2c1, charPos, passStartPos);
 80016f0:	4b08      	ldr	r3, [pc, #32]	; (8001714 <writeCharToEEPROM4Wifi+0xc4>)
 80016f2:	781a      	ldrb	r2, [r3, #0]
 80016f4:	f107 0110 	add.w	r1, r7, #16
 80016f8:	f107 030c 	add.w	r3, r7, #12
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff ff31 	bl	8001564 <writeDataToEEPROM>
}
 8001702:	bf00      	nop
 8001704:	3740      	adds	r7, #64	; 0x40
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	20000960 	.word	0x20000960
 8001710:	200009c0 	.word	0x200009c0
 8001714:	200009c1 	.word	0x200009c1

08001718 <convertChars>:

void convertChars(const uint8_t* writeArray, uint8_t state) {
 8001718:	b480      	push	{r7}
 800171a:	b087      	sub	sp, #28
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	460b      	mov	r3, r1
 8001722:	70fb      	strb	r3, [r7, #3]
	uint8_t arrayLength = sizeof(writeArray)/sizeof(writeArray[0]);
 8001724:	2304      	movs	r3, #4
 8001726:	72fb      	strb	r3, [r7, #11]

	if(state == 0) {
 8001728:	78fb      	ldrb	r3, [r7, #3]
 800172a:	2b00      	cmp	r3, #0
 800172c:	d116      	bne.n	800175c <convertChars+0x44>
		for(int i=0; i<arrayLength; i++) {
 800172e:	2300      	movs	r3, #0
 8001730:	617b      	str	r3, [r7, #20]
 8001732:	e00e      	b.n	8001752 <convertChars+0x3a>
			machineID[i] = numbersArray[writeArray[i]];
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	4413      	add	r3, r2
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	461a      	mov	r2, r3
 800173e:	4b22      	ldr	r3, [pc, #136]	; (80017c8 <convertChars+0xb0>)
 8001740:	5c99      	ldrb	r1, [r3, r2]
 8001742:	4a22      	ldr	r2, [pc, #136]	; (80017cc <convertChars+0xb4>)
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	4413      	add	r3, r2
 8001748:	460a      	mov	r2, r1
 800174a:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<arrayLength; i++) {
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	3301      	adds	r3, #1
 8001750:	617b      	str	r3, [r7, #20]
 8001752:	7afb      	ldrb	r3, [r7, #11]
 8001754:	697a      	ldr	r2, [r7, #20]
 8001756:	429a      	cmp	r2, r3
 8001758:	dbec      	blt.n	8001734 <convertChars+0x1c>
	} else {
		for(int i=0; i<arrayLength; i++) {
			wifiPass[i] = charactersArray[writeArray[i]];
		}
	}
}
 800175a:	e02f      	b.n	80017bc <convertChars+0xa4>
	} else if(state == 1) {
 800175c:	78fb      	ldrb	r3, [r7, #3]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d116      	bne.n	8001790 <convertChars+0x78>
		for(int i=0; i<arrayLength; i++) {
 8001762:	2300      	movs	r3, #0
 8001764:	613b      	str	r3, [r7, #16]
 8001766:	e00e      	b.n	8001786 <convertChars+0x6e>
			wifiSSID[i] = charactersArray[writeArray[i]];
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	4413      	add	r3, r2
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	461a      	mov	r2, r3
 8001772:	4b17      	ldr	r3, [pc, #92]	; (80017d0 <convertChars+0xb8>)
 8001774:	5c99      	ldrb	r1, [r3, r2]
 8001776:	4a17      	ldr	r2, [pc, #92]	; (80017d4 <convertChars+0xbc>)
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	4413      	add	r3, r2
 800177c:	460a      	mov	r2, r1
 800177e:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<arrayLength; i++) {
 8001780:	693b      	ldr	r3, [r7, #16]
 8001782:	3301      	adds	r3, #1
 8001784:	613b      	str	r3, [r7, #16]
 8001786:	7afb      	ldrb	r3, [r7, #11]
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	429a      	cmp	r2, r3
 800178c:	dbec      	blt.n	8001768 <convertChars+0x50>
}
 800178e:	e015      	b.n	80017bc <convertChars+0xa4>
		for(int i=0; i<arrayLength; i++) {
 8001790:	2300      	movs	r3, #0
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	e00e      	b.n	80017b4 <convertChars+0x9c>
			wifiPass[i] = charactersArray[writeArray[i]];
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	687a      	ldr	r2, [r7, #4]
 800179a:	4413      	add	r3, r2
 800179c:	781b      	ldrb	r3, [r3, #0]
 800179e:	461a      	mov	r2, r3
 80017a0:	4b0b      	ldr	r3, [pc, #44]	; (80017d0 <convertChars+0xb8>)
 80017a2:	5c99      	ldrb	r1, [r3, r2]
 80017a4:	4a0c      	ldr	r2, [pc, #48]	; (80017d8 <convertChars+0xc0>)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	4413      	add	r3, r2
 80017aa:	460a      	mov	r2, r1
 80017ac:	701a      	strb	r2, [r3, #0]
		for(int i=0; i<arrayLength; i++) {
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	3301      	adds	r3, #1
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	7afb      	ldrb	r3, [r7, #11]
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	dbec      	blt.n	8001796 <convertChars+0x7e>
}
 80017bc:	bf00      	nop
 80017be:	371c      	adds	r7, #28
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc80      	pop	{r7}
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	200009b4 	.word	0x200009b4
 80017cc:	20000bf4 	.word	0x20000bf4
 80017d0:	20000960 	.word	0x20000960
 80017d4:	20000c00 	.word	0x20000c00
 80017d8:	20000c24 	.word	0x20000c24

080017dc <takeCharFromEEPROM4ID>:

void takeCharFromEEPROM4ID(I2C_HandleTypeDef *hi2c1) {
 80017dc:	b580      	push	{r7, lr}
 80017de:	b086      	sub	sp, #24
 80017e0:	af04      	add	r7, sp, #16
 80017e2:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1, 0xA0, idStartPos, 11, readedID, 11, 3000);
 80017e4:	4b0d      	ldr	r3, [pc, #52]	; (800181c <takeCharFromEEPROM4ID+0x40>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	b29a      	uxth	r2, r3
 80017ea:	1d38      	adds	r0, r7, #4
 80017ec:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80017f0:	9302      	str	r3, [sp, #8]
 80017f2:	230b      	movs	r3, #11
 80017f4:	9301      	str	r3, [sp, #4]
 80017f6:	4b0a      	ldr	r3, [pc, #40]	; (8001820 <takeCharFromEEPROM4ID+0x44>)
 80017f8:	9300      	str	r3, [sp, #0]
 80017fa:	230b      	movs	r3, #11
 80017fc:	21a0      	movs	r1, #160	; 0xa0
 80017fe:	f008 ffc3 	bl	800a788 <HAL_I2C_Mem_Read>
	HAL_Delay(1000);
 8001802:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001806:	f007 fe3b 	bl	8009480 <HAL_Delay>

	convertChars(readedID, 0);
 800180a:	2100      	movs	r1, #0
 800180c:	4804      	ldr	r0, [pc, #16]	; (8001820 <takeCharFromEEPROM4ID+0x44>)
 800180e:	f7ff ff83 	bl	8001718 <convertChars>
}
 8001812:	bf00      	nop
 8001814:	3708      	adds	r7, #8
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	200009bf 	.word	0x200009bf
 8001820:	20000c48 	.word	0x20000c48

08001824 <takeCharFromEEPROM4Wifi>:

void takeCharFromEEPROM4Wifi(I2C_HandleTypeDef *hi2c1, uint8_t state) {
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af04      	add	r7, sp, #16
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	460b      	mov	r3, r1
 800182e:	70fb      	strb	r3, [r7, #3]
	if(state == 1) {
 8001830:	78fb      	ldrb	r3, [r7, #3]
 8001832:	2b01      	cmp	r3, #1
 8001834:	d118      	bne.n	8001868 <takeCharFromEEPROM4Wifi+0x44>
		HAL_I2C_Mem_Read(&hi2c1, 0xA0, ssidStartPos, 32, readedSSID, 32, 3000);
 8001836:	4b1a      	ldr	r3, [pc, #104]	; (80018a0 <takeCharFromEEPROM4Wifi+0x7c>)
 8001838:	781b      	ldrb	r3, [r3, #0]
 800183a:	b29a      	uxth	r2, r3
 800183c:	1d38      	adds	r0, r7, #4
 800183e:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001842:	9302      	str	r3, [sp, #8]
 8001844:	2320      	movs	r3, #32
 8001846:	9301      	str	r3, [sp, #4]
 8001848:	4b16      	ldr	r3, [pc, #88]	; (80018a4 <takeCharFromEEPROM4Wifi+0x80>)
 800184a:	9300      	str	r3, [sp, #0]
 800184c:	2320      	movs	r3, #32
 800184e:	21a0      	movs	r1, #160	; 0xa0
 8001850:	f008 ff9a 	bl	800a788 <HAL_I2C_Mem_Read>
		HAL_Delay(1000);
 8001854:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001858:	f007 fe12 	bl	8009480 <HAL_Delay>

		convertChars(readedSSID, state);
 800185c:	78fb      	ldrb	r3, [r7, #3]
 800185e:	4619      	mov	r1, r3
 8001860:	4810      	ldr	r0, [pc, #64]	; (80018a4 <takeCharFromEEPROM4Wifi+0x80>)
 8001862:	f7ff ff59 	bl	8001718 <convertChars>
		HAL_I2C_Mem_Read(&hi2c1, 0xA0, passStartPos, 32, readedPASS, 32, 3000);
		HAL_Delay(1000);

		convertChars(readedPASS, state);
	}
}
 8001866:	e017      	b.n	8001898 <takeCharFromEEPROM4Wifi+0x74>
		HAL_I2C_Mem_Read(&hi2c1, 0xA0, passStartPos, 32, readedPASS, 32, 3000);
 8001868:	4b0f      	ldr	r3, [pc, #60]	; (80018a8 <takeCharFromEEPROM4Wifi+0x84>)
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	b29a      	uxth	r2, r3
 800186e:	1d38      	adds	r0, r7, #4
 8001870:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8001874:	9302      	str	r3, [sp, #8]
 8001876:	2320      	movs	r3, #32
 8001878:	9301      	str	r3, [sp, #4]
 800187a:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <takeCharFromEEPROM4Wifi+0x88>)
 800187c:	9300      	str	r3, [sp, #0]
 800187e:	2320      	movs	r3, #32
 8001880:	21a0      	movs	r1, #160	; 0xa0
 8001882:	f008 ff81 	bl	800a788 <HAL_I2C_Mem_Read>
		HAL_Delay(1000);
 8001886:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800188a:	f007 fdf9 	bl	8009480 <HAL_Delay>
		convertChars(readedPASS, state);
 800188e:	78fb      	ldrb	r3, [r7, #3]
 8001890:	4619      	mov	r1, r3
 8001892:	4806      	ldr	r0, [pc, #24]	; (80018ac <takeCharFromEEPROM4Wifi+0x88>)
 8001894:	f7ff ff40 	bl	8001718 <convertChars>
}
 8001898:	bf00      	nop
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	200009c0 	.word	0x200009c0
 80018a4:	20000c54 	.word	0x20000c54
 80018a8:	200009c1 	.word	0x200009c1
 80018ac:	20000c78 	.word	0x20000c78

080018b0 <slideText>:

void slideText(const char* text, int startPos, int startLine) {
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b086      	sub	sp, #24
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
	for(int z=0; z < strlen(text); z++) {
 80018bc:	2300      	movs	r3, #0
 80018be:	617b      	str	r3, [r7, #20]
 80018c0:	e023      	b.n	800190a <slideText+0x5a>
		for(int i=startPos + z; i < strlen(text); i++) {
 80018c2:	68ba      	ldr	r2, [r7, #8]
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	4413      	add	r3, r2
 80018c8:	613b      	str	r3, [r7, #16]
 80018ca:	e014      	b.n	80018f6 <slideText+0x46>
			lcd_print_char(startLine, i-z, text[i]);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	b2d8      	uxtb	r0, r3
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	b2da      	uxtb	r2, r3
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	b2d9      	uxtb	r1, r3
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	68fa      	ldr	r2, [r7, #12]
 80018e0:	4413      	add	r3, r2
 80018e2:	781b      	ldrb	r3, [r3, #0]
 80018e4:	461a      	mov	r2, r3
 80018e6:	f7fe ff7c 	bl	80007e2 <lcd_print_char>
			HAL_Delay(50);
 80018ea:	2032      	movs	r0, #50	; 0x32
 80018ec:	f007 fdc8 	bl	8009480 <HAL_Delay>
		for(int i=startPos + z; i < strlen(text); i++) {
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	3301      	adds	r3, #1
 80018f4:	613b      	str	r3, [r7, #16]
 80018f6:	68f8      	ldr	r0, [r7, #12]
 80018f8:	f7fe fc94 	bl	8000224 <strlen>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	429a      	cmp	r2, r3
 8001902:	d8e3      	bhi.n	80018cc <slideText+0x1c>
	for(int z=0; z < strlen(text); z++) {
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	3301      	adds	r3, #1
 8001908:	617b      	str	r3, [r7, #20]
 800190a:	68f8      	ldr	r0, [r7, #12]
 800190c:	f7fe fc8a 	bl	8000224 <strlen>
 8001910:	4602      	mov	r2, r0
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	429a      	cmp	r2, r3
 8001916:	d8d4      	bhi.n	80018c2 <slideText+0x12>
		}
	}
}
 8001918:	bf00      	nop
 800191a:	bf00      	nop
 800191c:	3718      	adds	r7, #24
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
	...

08001924 <menu>:

void menu(I2C_HandleTypeDef *hi2c1) {
 8001924:	b580      	push	{r7, lr}
 8001926:	b082      	sub	sp, #8
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 800192c:	2101      	movs	r1, #1
 800192e:	488f      	ldr	r0, [pc, #572]	; (8001b6c <menu+0x248>)
 8001930:	f008 fb76 	bl	800a020 <HAL_GPIO_ReadPin>
 8001934:	4603      	mov	r3, r0
 8001936:	2b01      	cmp	r3, #1
 8001938:	f040 808e 	bne.w	8001a58 <menu+0x134>
 800193c:	4b8c      	ldr	r3, [pc, #560]	; (8001b70 <menu+0x24c>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	f083 0301 	eor.w	r3, r3, #1
 8001944:	b2db      	uxtb	r3, r3
 8001946:	2b00      	cmp	r3, #0
 8001948:	f000 8086 	beq.w	8001a58 <menu+0x134>
		menuSayac = menuSayac+1;
 800194c:	4b89      	ldr	r3, [pc, #548]	; (8001b74 <menu+0x250>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	3301      	adds	r3, #1
 8001952:	b2da      	uxtb	r2, r3
 8001954:	4b87      	ldr	r3, [pc, #540]	; (8001b74 <menu+0x250>)
 8001956:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 8001958:	4b86      	ldr	r3, [pc, #536]	; (8001b74 <menu+0x250>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	2b24      	cmp	r3, #36	; 0x24
 800195e:	d102      	bne.n	8001966 <menu+0x42>
			menuSayac = 1;
 8001960:	4b84      	ldr	r3, [pc, #528]	; (8001b74 <menu+0x250>)
 8001962:	2201      	movs	r2, #1
 8001964:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 8001966:	4b83      	ldr	r3, [pc, #524]	; (8001b74 <menu+0x250>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b12      	cmp	r3, #18
 800196c:	d106      	bne.n	800197c <menu+0x58>
 800196e:	4b82      	ldr	r3, [pc, #520]	; (8001b78 <menu+0x254>)
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d102      	bne.n	800197c <menu+0x58>
			menuSayac = 21;
 8001976:	4b7f      	ldr	r3, [pc, #508]	; (8001b74 <menu+0x250>)
 8001978:	2215      	movs	r2, #21
 800197a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 800197c:	4b7d      	ldr	r3, [pc, #500]	; (8001b74 <menu+0x250>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b08      	cmp	r3, #8
 8001982:	d106      	bne.n	8001992 <menu+0x6e>
 8001984:	4b7d      	ldr	r3, [pc, #500]	; (8001b7c <menu+0x258>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d102      	bne.n	8001992 <menu+0x6e>
			menuSayac = 16;
 800198c:	4b79      	ldr	r3, [pc, #484]	; (8001b74 <menu+0x250>)
 800198e:	2210      	movs	r2, #16
 8001990:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 8001992:	4b78      	ldr	r3, [pc, #480]	; (8001b74 <menu+0x250>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b0d      	cmp	r3, #13
 8001998:	d106      	bne.n	80019a8 <menu+0x84>
 800199a:	4b78      	ldr	r3, [pc, #480]	; (8001b7c <menu+0x258>)
 800199c:	781b      	ldrb	r3, [r3, #0]
 800199e:	2b01      	cmp	r3, #1
 80019a0:	d102      	bne.n	80019a8 <menu+0x84>
			menuSayac = 16;
 80019a2:	4b74      	ldr	r3, [pc, #464]	; (8001b74 <menu+0x250>)
 80019a4:	2210      	movs	r2, #16
 80019a6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 80019a8:	4b72      	ldr	r3, [pc, #456]	; (8001b74 <menu+0x250>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	2b09      	cmp	r3, #9
 80019ae:	d106      	bne.n	80019be <menu+0x9a>
 80019b0:	4b72      	ldr	r3, [pc, #456]	; (8001b7c <menu+0x258>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d102      	bne.n	80019be <menu+0x9a>
			menuSayac = 13;
 80019b8:	4b6e      	ldr	r3, [pc, #440]	; (8001b74 <menu+0x250>)
 80019ba:	220d      	movs	r2, #13
 80019bc:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 80019be:	4b6d      	ldr	r3, [pc, #436]	; (8001b74 <menu+0x250>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	2b0a      	cmp	r3, #10
 80019c4:	d10a      	bne.n	80019dc <menu+0xb8>
 80019c6:	4b6e      	ldr	r3, [pc, #440]	; (8001b80 <menu+0x25c>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d003      	beq.n	80019d6 <menu+0xb2>
 80019ce:	4b6c      	ldr	r3, [pc, #432]	; (8001b80 <menu+0x25c>)
 80019d0:	781b      	ldrb	r3, [r3, #0]
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d102      	bne.n	80019dc <menu+0xb8>
			menuSayac = 11;
 80019d6:	4b67      	ldr	r3, [pc, #412]	; (8001b74 <menu+0x250>)
 80019d8:	220b      	movs	r2, #11
 80019da:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 80019dc:	4b65      	ldr	r3, [pc, #404]	; (8001b74 <menu+0x250>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b0c      	cmp	r3, #12
 80019e2:	d10e      	bne.n	8001a02 <menu+0xde>
 80019e4:	4b67      	ldr	r3, [pc, #412]	; (8001b84 <menu+0x260>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b01      	cmp	r3, #1
 80019ea:	d003      	beq.n	80019f4 <menu+0xd0>
 80019ec:	4b65      	ldr	r3, [pc, #404]	; (8001b84 <menu+0x260>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d106      	bne.n	8001a02 <menu+0xde>
 80019f4:	4b61      	ldr	r3, [pc, #388]	; (8001b7c <menu+0x258>)
 80019f6:	781b      	ldrb	r3, [r3, #0]
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d102      	bne.n	8001a02 <menu+0xde>
			menuSayac = 16;
 80019fc:	4b5d      	ldr	r3, [pc, #372]	; (8001b74 <menu+0x250>)
 80019fe:	2210      	movs	r2, #16
 8001a00:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 8001a02:	4b5c      	ldr	r3, [pc, #368]	; (8001b74 <menu+0x250>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	2b0c      	cmp	r3, #12
 8001a08:	d10e      	bne.n	8001a28 <menu+0x104>
 8001a0a:	4b5e      	ldr	r3, [pc, #376]	; (8001b84 <menu+0x260>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d003      	beq.n	8001a1a <menu+0xf6>
 8001a12:	4b5c      	ldr	r3, [pc, #368]	; (8001b84 <menu+0x260>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	2b02      	cmp	r3, #2
 8001a18:	d106      	bne.n	8001a28 <menu+0x104>
 8001a1a:	4b58      	ldr	r3, [pc, #352]	; (8001b7c <menu+0x258>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	2b03      	cmp	r3, #3
 8001a20:	d102      	bne.n	8001a28 <menu+0x104>
			menuSayac = 13;
 8001a22:	4b54      	ldr	r3, [pc, #336]	; (8001b74 <menu+0x250>)
 8001a24:	220d      	movs	r2, #13
 8001a26:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001a28:	4b52      	ldr	r3, [pc, #328]	; (8001b74 <menu+0x250>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b0f      	cmp	r3, #15
 8001a2e:	d106      	bne.n	8001a3e <menu+0x11a>
 8001a30:	4b55      	ldr	r3, [pc, #340]	; (8001b88 <menu+0x264>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	2b01      	cmp	r3, #1
 8001a36:	d102      	bne.n	8001a3e <menu+0x11a>
			menuSayac = 16;
 8001a38:	4b4e      	ldr	r3, [pc, #312]	; (8001b74 <menu+0x250>)
 8001a3a:	2210      	movs	r2, #16
 8001a3c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 8001a3e:	4b4d      	ldr	r3, [pc, #308]	; (8001b74 <menu+0x250>)
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	2b18      	cmp	r3, #24
 8001a44:	d106      	bne.n	8001a54 <menu+0x130>
 8001a46:	4b4c      	ldr	r3, [pc, #304]	; (8001b78 <menu+0x254>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d102      	bne.n	8001a54 <menu+0x130>
			menuSayac = 26;
 8001a4e:	4b49      	ldr	r3, [pc, #292]	; (8001b74 <menu+0x250>)
 8001a50:	221a      	movs	r2, #26
 8001a52:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001a54:	f004 fd04 	bl	8006460 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001a58:	2108      	movs	r1, #8
 8001a5a:	484c      	ldr	r0, [pc, #304]	; (8001b8c <menu+0x268>)
 8001a5c:	f008 fae0 	bl	800a020 <HAL_GPIO_ReadPin>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b01      	cmp	r3, #1
 8001a64:	d175      	bne.n	8001b52 <menu+0x22e>
 8001a66:	4b42      	ldr	r3, [pc, #264]	; (8001b70 <menu+0x24c>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	f083 0301 	eor.w	r3, r3, #1
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d06e      	beq.n	8001b52 <menu+0x22e>
		if (menuSayac <= 1) {
 8001a74:	4b3f      	ldr	r3, [pc, #252]	; (8001b74 <menu+0x250>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d802      	bhi.n	8001a82 <menu+0x15e>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 8001a7c:	4b3d      	ldr	r3, [pc, #244]	; (8001b74 <menu+0x250>)
 8001a7e:	2224      	movs	r2, #36	; 0x24
 8001a80:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 8001a82:	4b3c      	ldr	r3, [pc, #240]	; (8001b74 <menu+0x250>)
 8001a84:	781b      	ldrb	r3, [r3, #0]
 8001a86:	3b01      	subs	r3, #1
 8001a88:	b2da      	uxtb	r2, r3
 8001a8a:	4b3a      	ldr	r3, [pc, #232]	; (8001b74 <menu+0x250>)
 8001a8c:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 8001a8e:	4b39      	ldr	r3, [pc, #228]	; (8001b74 <menu+0x250>)
 8001a90:	781b      	ldrb	r3, [r3, #0]
 8001a92:	2b14      	cmp	r3, #20
 8001a94:	d106      	bne.n	8001aa4 <menu+0x180>
 8001a96:	4b38      	ldr	r3, [pc, #224]	; (8001b78 <menu+0x254>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d102      	bne.n	8001aa4 <menu+0x180>
			menuSayac = 17;
 8001a9e:	4b35      	ldr	r3, [pc, #212]	; (8001b74 <menu+0x250>)
 8001aa0:	2211      	movs	r2, #17
 8001aa2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 8001aa4:	4b33      	ldr	r3, [pc, #204]	; (8001b74 <menu+0x250>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b0f      	cmp	r3, #15
 8001aaa:	d106      	bne.n	8001aba <menu+0x196>
 8001aac:	4b33      	ldr	r3, [pc, #204]	; (8001b7c <menu+0x258>)
 8001aae:	781b      	ldrb	r3, [r3, #0]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d102      	bne.n	8001aba <menu+0x196>
			menuSayac = 7;
 8001ab4:	4b2f      	ldr	r3, [pc, #188]	; (8001b74 <menu+0x250>)
 8001ab6:	2207      	movs	r2, #7
 8001ab8:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 8001aba:	4b2e      	ldr	r3, [pc, #184]	; (8001b74 <menu+0x250>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	2b0f      	cmp	r3, #15
 8001ac0:	d106      	bne.n	8001ad0 <menu+0x1ac>
 8001ac2:	4b2e      	ldr	r3, [pc, #184]	; (8001b7c <menu+0x258>)
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d102      	bne.n	8001ad0 <menu+0x1ac>
			menuSayac = 12;
 8001aca:	4b2a      	ldr	r3, [pc, #168]	; (8001b74 <menu+0x250>)
 8001acc:	220c      	movs	r2, #12
 8001ace:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8001ad0:	4b28      	ldr	r3, [pc, #160]	; (8001b74 <menu+0x250>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	2b0c      	cmp	r3, #12
 8001ad6:	d106      	bne.n	8001ae6 <menu+0x1c2>
 8001ad8:	4b28      	ldr	r3, [pc, #160]	; (8001b7c <menu+0x258>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	2b02      	cmp	r3, #2
 8001ade:	d102      	bne.n	8001ae6 <menu+0x1c2>
			menuSayac = 8;
 8001ae0:	4b24      	ldr	r3, [pc, #144]	; (8001b74 <menu+0x250>)
 8001ae2:	2208      	movs	r2, #8
 8001ae4:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001ae6:	4b23      	ldr	r3, [pc, #140]	; (8001b74 <menu+0x250>)
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	2b0a      	cmp	r3, #10
 8001aec:	d10a      	bne.n	8001b04 <menu+0x1e0>
 8001aee:	4b24      	ldr	r3, [pc, #144]	; (8001b80 <menu+0x25c>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d003      	beq.n	8001afe <menu+0x1da>
 8001af6:	4b22      	ldr	r3, [pc, #136]	; (8001b80 <menu+0x25c>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d102      	bne.n	8001b04 <menu+0x1e0>
			menuSayac = 9;
 8001afe:	4b1d      	ldr	r3, [pc, #116]	; (8001b74 <menu+0x250>)
 8001b00:	2209      	movs	r2, #9
 8001b02:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 8001b04:	4b1b      	ldr	r3, [pc, #108]	; (8001b74 <menu+0x250>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b0c      	cmp	r3, #12
 8001b0a:	d10a      	bne.n	8001b22 <menu+0x1fe>
 8001b0c:	4b1d      	ldr	r3, [pc, #116]	; (8001b84 <menu+0x260>)
 8001b0e:	781b      	ldrb	r3, [r3, #0]
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d003      	beq.n	8001b1c <menu+0x1f8>
 8001b14:	4b1b      	ldr	r3, [pc, #108]	; (8001b84 <menu+0x260>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d102      	bne.n	8001b22 <menu+0x1fe>
			menuSayac = 11;
 8001b1c:	4b15      	ldr	r3, [pc, #84]	; (8001b74 <menu+0x250>)
 8001b1e:	220b      	movs	r2, #11
 8001b20:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001b22:	4b14      	ldr	r3, [pc, #80]	; (8001b74 <menu+0x250>)
 8001b24:	781b      	ldrb	r3, [r3, #0]
 8001b26:	2b0f      	cmp	r3, #15
 8001b28:	d106      	bne.n	8001b38 <menu+0x214>
 8001b2a:	4b17      	ldr	r3, [pc, #92]	; (8001b88 <menu+0x264>)
 8001b2c:	781b      	ldrb	r3, [r3, #0]
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d102      	bne.n	8001b38 <menu+0x214>
			menuSayac = 14;
 8001b32:	4b10      	ldr	r3, [pc, #64]	; (8001b74 <menu+0x250>)
 8001b34:	220e      	movs	r2, #14
 8001b36:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 8001b38:	4b0e      	ldr	r3, [pc, #56]	; (8001b74 <menu+0x250>)
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	2b19      	cmp	r3, #25
 8001b3e:	d106      	bne.n	8001b4e <menu+0x22a>
 8001b40:	4b0d      	ldr	r3, [pc, #52]	; (8001b78 <menu+0x254>)
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d102      	bne.n	8001b4e <menu+0x22a>
			menuSayac = 23;
 8001b48:	4b0a      	ldr	r3, [pc, #40]	; (8001b74 <menu+0x250>)
 8001b4a:	2217      	movs	r2, #23
 8001b4c:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001b4e:	f004 fc87 	bl	8006460 <bekle>
	}

	if (menuSayac == 0) {
 8001b52:	4b08      	ldr	r3, [pc, #32]	; (8001b74 <menu+0x250>)
 8001b54:	781b      	ldrb	r3, [r3, #0]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d134      	bne.n	8001bc4 <menu+0x2a0>
		if(dilSecim == 0) {
 8001b5a:	4b0d      	ldr	r3, [pc, #52]	; (8001b90 <menu+0x26c>)
 8001b5c:	781b      	ldrb	r3, [r3, #0]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d122      	bne.n	8001ba8 <menu+0x284>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 8001b62:	4a0c      	ldr	r2, [pc, #48]	; (8001b94 <menu+0x270>)
 8001b64:	2101      	movs	r1, #1
 8001b66:	2001      	movs	r0, #1
 8001b68:	e016      	b.n	8001b98 <menu+0x274>
 8001b6a:	bf00      	nop
 8001b6c:	40010800 	.word	0x40010800
 8001b70:	20000ccc 	.word	0x20000ccc
 8001b74:	20000c9d 	.word	0x20000c9d
 8001b78:	20000cac 	.word	0x20000cac
 8001b7c:	20000ca5 	.word	0x20000ca5
 8001b80:	20000ca6 	.word	0x20000ca6
 8001b84:	20000ca7 	.word	0x20000ca7
 8001b88:	20000ca8 	.word	0x20000ca8
 8001b8c:	40011000 	.word	0x40011000
 8001b90:	20000cbe 	.word	0x20000cbe
 8001b94:	0800dcb0 	.word	0x0800dcb0
 8001b98:	f7fe fe0e 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 8001b9c:	4a94      	ldr	r2, [pc, #592]	; (8001df0 <menu+0x4cc>)
 8001b9e:	2101      	movs	r1, #1
 8001ba0:	2002      	movs	r0, #2
 8001ba2:	f7fe fe09 	bl	80007b8 <lcd_print>
 8001ba6:	e00d      	b.n	8001bc4 <menu+0x2a0>
		} else if(dilSecim  ==  1) {
 8001ba8:	4b92      	ldr	r3, [pc, #584]	; (8001df4 <menu+0x4d0>)
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d109      	bne.n	8001bc4 <menu+0x2a0>
			lcd_print(1, 1, "ENTERED THE MENU");
 8001bb0:	4a91      	ldr	r2, [pc, #580]	; (8001df8 <menu+0x4d4>)
 8001bb2:	2101      	movs	r1, #1
 8001bb4:	2001      	movs	r0, #1
 8001bb6:	f7fe fdff 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 8001bba:	4a90      	ldr	r2, [pc, #576]	; (8001dfc <menu+0x4d8>)
 8001bbc:	2101      	movs	r1, #1
 8001bbe:	2002      	movs	r0, #2
 8001bc0:	f7fe fdfa 	bl	80007b8 <lcd_print>
		}
	}

	if (menuSayac == 1) {
 8001bc4:	4b8e      	ldr	r3, [pc, #568]	; (8001e00 <menu+0x4dc>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	f040 82b5 	bne.w	8002138 <menu+0x814>
		if(dilSecim == 0) {
 8001bce:	4b89      	ldr	r3, [pc, #548]	; (8001df4 <menu+0x4d0>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d105      	bne.n	8001be2 <menu+0x2be>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 8001bd6:	4a8b      	ldr	r2, [pc, #556]	; (8001e04 <menu+0x4e0>)
 8001bd8:	2101      	movs	r1, #1
 8001bda:	2001      	movs	r0, #1
 8001bdc:	f7fe fdec 	bl	80007b8 <lcd_print>
 8001be0:	e008      	b.n	8001bf4 <menu+0x2d0>
		} else if(dilSecim == 1) {
 8001be2:	4b84      	ldr	r3, [pc, #528]	; (8001df4 <menu+0x4d0>)
 8001be4:	781b      	ldrb	r3, [r3, #0]
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d104      	bne.n	8001bf4 <menu+0x2d0>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 8001bea:	4a87      	ldr	r2, [pc, #540]	; (8001e08 <menu+0x4e4>)
 8001bec:	2101      	movs	r1, #1
 8001bee:	2001      	movs	r0, #1
 8001bf0:	f7fe fde2 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 8001bf4:	4b85      	ldr	r3, [pc, #532]	; (8001e0c <menu+0x4e8>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d123      	bne.n	8001c44 <menu+0x320>
			if(dilSecim == 0) {
 8001bfc:	4b7d      	ldr	r3, [pc, #500]	; (8001df4 <menu+0x4d0>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d105      	bne.n	8001c10 <menu+0x2ec>
				lcd_print(2, 1, "1.Hata Kodu: ");
 8001c04:	4a82      	ldr	r2, [pc, #520]	; (8001e10 <menu+0x4ec>)
 8001c06:	2101      	movs	r1, #1
 8001c08:	2002      	movs	r0, #2
 8001c0a:	f7fe fdd5 	bl	80007b8 <lcd_print>
 8001c0e:	e008      	b.n	8001c22 <menu+0x2fe>

			} else if(dilSecim == 1) {
 8001c10:	4b78      	ldr	r3, [pc, #480]	; (8001df4 <menu+0x4d0>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d104      	bne.n	8001c22 <menu+0x2fe>
				lcd_print(2, 1, "1.Error Code:");
 8001c18:	4a7e      	ldr	r2, [pc, #504]	; (8001e14 <menu+0x4f0>)
 8001c1a:	2101      	movs	r1, #1
 8001c1c:	2002      	movs	r0, #2
 8001c1e:	f7fe fdcb 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "   ");
 8001c22:	4a7d      	ldr	r2, [pc, #500]	; (8001e18 <menu+0x4f4>)
 8001c24:	210f      	movs	r1, #15
 8001c26:	2002      	movs	r0, #2
 8001c28:	f7fe fdc6 	bl	80007b8 <lcd_print>
			itoa(hataKayit1, snum, 10);
 8001c2c:	4b7b      	ldr	r3, [pc, #492]	; (8001e1c <menu+0x4f8>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	220a      	movs	r2, #10
 8001c32:	497b      	ldr	r1, [pc, #492]	; (8001e20 <menu+0x4fc>)
 8001c34:	4618      	mov	r0, r3
 8001c36:	f00b fa1f 	bl	800d078 <itoa>
			lcd_print(2, 14, snum);
 8001c3a:	4a79      	ldr	r2, [pc, #484]	; (8001e20 <menu+0x4fc>)
 8001c3c:	210e      	movs	r1, #14
 8001c3e:	2002      	movs	r0, #2
 8001c40:	f7fe fdba 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 8001c44:	4b71      	ldr	r3, [pc, #452]	; (8001e0c <menu+0x4e8>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d123      	bne.n	8001c94 <menu+0x370>
			if(dilSecim == 0) {
 8001c4c:	4b69      	ldr	r3, [pc, #420]	; (8001df4 <menu+0x4d0>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d105      	bne.n	8001c60 <menu+0x33c>
				lcd_print(2, 1, "2.Hata Kodu: ");
 8001c54:	4a73      	ldr	r2, [pc, #460]	; (8001e24 <menu+0x500>)
 8001c56:	2101      	movs	r1, #1
 8001c58:	2002      	movs	r0, #2
 8001c5a:	f7fe fdad 	bl	80007b8 <lcd_print>
 8001c5e:	e008      	b.n	8001c72 <menu+0x34e>
			} else if(dilSecim == 1) {
 8001c60:	4b64      	ldr	r3, [pc, #400]	; (8001df4 <menu+0x4d0>)
 8001c62:	781b      	ldrb	r3, [r3, #0]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d104      	bne.n	8001c72 <menu+0x34e>
				lcd_print(2, 1, "2.Error Code:");
 8001c68:	4a6f      	ldr	r2, [pc, #444]	; (8001e28 <menu+0x504>)
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	2002      	movs	r0, #2
 8001c6e:	f7fe fda3 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001c72:	4a6e      	ldr	r2, [pc, #440]	; (8001e2c <menu+0x508>)
 8001c74:	210f      	movs	r1, #15
 8001c76:	2002      	movs	r0, #2
 8001c78:	f7fe fd9e 	bl	80007b8 <lcd_print>
			itoa(hataKayit2, snum, 10);
 8001c7c:	4b6c      	ldr	r3, [pc, #432]	; (8001e30 <menu+0x50c>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	220a      	movs	r2, #10
 8001c82:	4967      	ldr	r1, [pc, #412]	; (8001e20 <menu+0x4fc>)
 8001c84:	4618      	mov	r0, r3
 8001c86:	f00b f9f7 	bl	800d078 <itoa>
			lcd_print(2, 14, snum);
 8001c8a:	4a65      	ldr	r2, [pc, #404]	; (8001e20 <menu+0x4fc>)
 8001c8c:	210e      	movs	r1, #14
 8001c8e:	2002      	movs	r0, #2
 8001c90:	f7fe fd92 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 8001c94:	4b5d      	ldr	r3, [pc, #372]	; (8001e0c <menu+0x4e8>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	2b02      	cmp	r3, #2
 8001c9a:	d123      	bne.n	8001ce4 <menu+0x3c0>
			if(dilSecim == 0) {
 8001c9c:	4b55      	ldr	r3, [pc, #340]	; (8001df4 <menu+0x4d0>)
 8001c9e:	781b      	ldrb	r3, [r3, #0]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d105      	bne.n	8001cb0 <menu+0x38c>
				lcd_print(2, 1, "3.Hata Kodu: ");
 8001ca4:	4a63      	ldr	r2, [pc, #396]	; (8001e34 <menu+0x510>)
 8001ca6:	2101      	movs	r1, #1
 8001ca8:	2002      	movs	r0, #2
 8001caa:	f7fe fd85 	bl	80007b8 <lcd_print>
 8001cae:	e008      	b.n	8001cc2 <menu+0x39e>
			} else if(dilSecim == 1) {
 8001cb0:	4b50      	ldr	r3, [pc, #320]	; (8001df4 <menu+0x4d0>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d104      	bne.n	8001cc2 <menu+0x39e>
				lcd_print(2, 1, "3.Error Code:");
 8001cb8:	4a5f      	ldr	r2, [pc, #380]	; (8001e38 <menu+0x514>)
 8001cba:	2101      	movs	r1, #1
 8001cbc:	2002      	movs	r0, #2
 8001cbe:	f7fe fd7b 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001cc2:	4a5a      	ldr	r2, [pc, #360]	; (8001e2c <menu+0x508>)
 8001cc4:	210f      	movs	r1, #15
 8001cc6:	2002      	movs	r0, #2
 8001cc8:	f7fe fd76 	bl	80007b8 <lcd_print>
			itoa(hataKayit3, snum, 10);
 8001ccc:	4b5b      	ldr	r3, [pc, #364]	; (8001e3c <menu+0x518>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	220a      	movs	r2, #10
 8001cd2:	4953      	ldr	r1, [pc, #332]	; (8001e20 <menu+0x4fc>)
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f00b f9cf 	bl	800d078 <itoa>
			lcd_print(2, 14, snum);
 8001cda:	4a51      	ldr	r2, [pc, #324]	; (8001e20 <menu+0x4fc>)
 8001cdc:	210e      	movs	r1, #14
 8001cde:	2002      	movs	r0, #2
 8001ce0:	f7fe fd6a 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 8001ce4:	4b49      	ldr	r3, [pc, #292]	; (8001e0c <menu+0x4e8>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2b03      	cmp	r3, #3
 8001cea:	d123      	bne.n	8001d34 <menu+0x410>
			if(dilSecim == 0) {
 8001cec:	4b41      	ldr	r3, [pc, #260]	; (8001df4 <menu+0x4d0>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d105      	bne.n	8001d00 <menu+0x3dc>
				lcd_print(2, 1, "4.Hata Kodu: ");
 8001cf4:	4a52      	ldr	r2, [pc, #328]	; (8001e40 <menu+0x51c>)
 8001cf6:	2101      	movs	r1, #1
 8001cf8:	2002      	movs	r0, #2
 8001cfa:	f7fe fd5d 	bl	80007b8 <lcd_print>
 8001cfe:	e008      	b.n	8001d12 <menu+0x3ee>
			} else if(dilSecim == 1) {
 8001d00:	4b3c      	ldr	r3, [pc, #240]	; (8001df4 <menu+0x4d0>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b01      	cmp	r3, #1
 8001d06:	d104      	bne.n	8001d12 <menu+0x3ee>
				lcd_print(2, 1, "4.Error Code:");
 8001d08:	4a4e      	ldr	r2, [pc, #312]	; (8001e44 <menu+0x520>)
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	2002      	movs	r0, #2
 8001d0e:	f7fe fd53 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001d12:	4a46      	ldr	r2, [pc, #280]	; (8001e2c <menu+0x508>)
 8001d14:	210f      	movs	r1, #15
 8001d16:	2002      	movs	r0, #2
 8001d18:	f7fe fd4e 	bl	80007b8 <lcd_print>
			itoa(hataKayit4, snum, 10);
 8001d1c:	4b4a      	ldr	r3, [pc, #296]	; (8001e48 <menu+0x524>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	220a      	movs	r2, #10
 8001d22:	493f      	ldr	r1, [pc, #252]	; (8001e20 <menu+0x4fc>)
 8001d24:	4618      	mov	r0, r3
 8001d26:	f00b f9a7 	bl	800d078 <itoa>
			lcd_print(2, 14, snum);
 8001d2a:	4a3d      	ldr	r2, [pc, #244]	; (8001e20 <menu+0x4fc>)
 8001d2c:	210e      	movs	r1, #14
 8001d2e:	2002      	movs	r0, #2
 8001d30:	f7fe fd42 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 8001d34:	4b35      	ldr	r3, [pc, #212]	; (8001e0c <menu+0x4e8>)
 8001d36:	781b      	ldrb	r3, [r3, #0]
 8001d38:	2b04      	cmp	r3, #4
 8001d3a:	d123      	bne.n	8001d84 <menu+0x460>
			if(dilSecim == 0) {
 8001d3c:	4b2d      	ldr	r3, [pc, #180]	; (8001df4 <menu+0x4d0>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d105      	bne.n	8001d50 <menu+0x42c>
				lcd_print(2, 1, "5.Hata Kodu: ");
 8001d44:	4a41      	ldr	r2, [pc, #260]	; (8001e4c <menu+0x528>)
 8001d46:	2101      	movs	r1, #1
 8001d48:	2002      	movs	r0, #2
 8001d4a:	f7fe fd35 	bl	80007b8 <lcd_print>
 8001d4e:	e008      	b.n	8001d62 <menu+0x43e>
			} else if(dilSecim == 1) {
 8001d50:	4b28      	ldr	r3, [pc, #160]	; (8001df4 <menu+0x4d0>)
 8001d52:	781b      	ldrb	r3, [r3, #0]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d104      	bne.n	8001d62 <menu+0x43e>
				lcd_print(2, 1, "5.Error Code:");
 8001d58:	4a3d      	ldr	r2, [pc, #244]	; (8001e50 <menu+0x52c>)
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	2002      	movs	r0, #2
 8001d5e:	f7fe fd2b 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001d62:	4a32      	ldr	r2, [pc, #200]	; (8001e2c <menu+0x508>)
 8001d64:	210f      	movs	r1, #15
 8001d66:	2002      	movs	r0, #2
 8001d68:	f7fe fd26 	bl	80007b8 <lcd_print>
			itoa(hataKayit5, snum, 10);
 8001d6c:	4b39      	ldr	r3, [pc, #228]	; (8001e54 <menu+0x530>)
 8001d6e:	781b      	ldrb	r3, [r3, #0]
 8001d70:	220a      	movs	r2, #10
 8001d72:	492b      	ldr	r1, [pc, #172]	; (8001e20 <menu+0x4fc>)
 8001d74:	4618      	mov	r0, r3
 8001d76:	f00b f97f 	bl	800d078 <itoa>
			lcd_print(2, 14, snum);
 8001d7a:	4a29      	ldr	r2, [pc, #164]	; (8001e20 <menu+0x4fc>)
 8001d7c:	210e      	movs	r1, #14
 8001d7e:	2002      	movs	r0, #2
 8001d80:	f7fe fd1a 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8001d84:	4b21      	ldr	r3, [pc, #132]	; (8001e0c <menu+0x4e8>)
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	2b05      	cmp	r3, #5
 8001d8a:	d123      	bne.n	8001dd4 <menu+0x4b0>
			if(dilSecim == 0) {
 8001d8c:	4b19      	ldr	r3, [pc, #100]	; (8001df4 <menu+0x4d0>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d105      	bne.n	8001da0 <menu+0x47c>
				lcd_print(2, 1, "6.Hata Kodu: ");
 8001d94:	4a30      	ldr	r2, [pc, #192]	; (8001e58 <menu+0x534>)
 8001d96:	2101      	movs	r1, #1
 8001d98:	2002      	movs	r0, #2
 8001d9a:	f7fe fd0d 	bl	80007b8 <lcd_print>
 8001d9e:	e008      	b.n	8001db2 <menu+0x48e>
			} else if(dilSecim == 1) {
 8001da0:	4b14      	ldr	r3, [pc, #80]	; (8001df4 <menu+0x4d0>)
 8001da2:	781b      	ldrb	r3, [r3, #0]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d104      	bne.n	8001db2 <menu+0x48e>
				lcd_print(2, 1, "6.Error Code:");
 8001da8:	4a2c      	ldr	r2, [pc, #176]	; (8001e5c <menu+0x538>)
 8001daa:	2101      	movs	r1, #1
 8001dac:	2002      	movs	r0, #2
 8001dae:	f7fe fd03 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001db2:	4a1e      	ldr	r2, [pc, #120]	; (8001e2c <menu+0x508>)
 8001db4:	210f      	movs	r1, #15
 8001db6:	2002      	movs	r0, #2
 8001db8:	f7fe fcfe 	bl	80007b8 <lcd_print>
			itoa(hataKayit6, snum, 10);
 8001dbc:	4b28      	ldr	r3, [pc, #160]	; (8001e60 <menu+0x53c>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	220a      	movs	r2, #10
 8001dc2:	4917      	ldr	r1, [pc, #92]	; (8001e20 <menu+0x4fc>)
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f00b f957 	bl	800d078 <itoa>
			lcd_print(2, 14, snum);
 8001dca:	4a15      	ldr	r2, [pc, #84]	; (8001e20 <menu+0x4fc>)
 8001dcc:	210e      	movs	r1, #14
 8001dce:	2002      	movs	r0, #2
 8001dd0:	f7fe fcf2 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8001dd4:	4b0d      	ldr	r3, [pc, #52]	; (8001e0c <menu+0x4e8>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b06      	cmp	r3, #6
 8001dda:	d15f      	bne.n	8001e9c <menu+0x578>
			if(dilSecim == 0) {
 8001ddc:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <menu+0x4d0>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d141      	bne.n	8001e68 <menu+0x544>
				lcd_print(2, 1, "7.Hata Kodu: ");
 8001de4:	4a1f      	ldr	r2, [pc, #124]	; (8001e64 <menu+0x540>)
 8001de6:	2101      	movs	r1, #1
 8001de8:	2002      	movs	r0, #2
 8001dea:	f7fe fce5 	bl	80007b8 <lcd_print>
 8001dee:	e044      	b.n	8001e7a <menu+0x556>
 8001df0:	0800dcc4 	.word	0x0800dcc4
 8001df4:	20000cbe 	.word	0x20000cbe
 8001df8:	0800dcd8 	.word	0x0800dcd8
 8001dfc:	0800dcec 	.word	0x0800dcec
 8001e00:	20000c9d 	.word	0x20000c9d
 8001e04:	0800dd00 	.word	0x0800dd00
 8001e08:	0800dd14 	.word	0x0800dd14
 8001e0c:	20000c9f 	.word	0x20000c9f
 8001e10:	0800dd28 	.word	0x0800dd28
 8001e14:	0800dd38 	.word	0x0800dd38
 8001e18:	0800dd48 	.word	0x0800dd48
 8001e1c:	20000cbf 	.word	0x20000cbf
 8001e20:	20000bcc 	.word	0x20000bcc
 8001e24:	0800dd4c 	.word	0x0800dd4c
 8001e28:	0800dd5c 	.word	0x0800dd5c
 8001e2c:	0800dd6c 	.word	0x0800dd6c
 8001e30:	20000cc0 	.word	0x20000cc0
 8001e34:	0800dd70 	.word	0x0800dd70
 8001e38:	0800dd80 	.word	0x0800dd80
 8001e3c:	20000cc1 	.word	0x20000cc1
 8001e40:	0800dd90 	.word	0x0800dd90
 8001e44:	0800dda0 	.word	0x0800dda0
 8001e48:	20000cc2 	.word	0x20000cc2
 8001e4c:	0800ddb0 	.word	0x0800ddb0
 8001e50:	0800ddc0 	.word	0x0800ddc0
 8001e54:	20000cc3 	.word	0x20000cc3
 8001e58:	0800ddd0 	.word	0x0800ddd0
 8001e5c:	0800dde0 	.word	0x0800dde0
 8001e60:	20000cc4 	.word	0x20000cc4
 8001e64:	0800ddf0 	.word	0x0800ddf0
			} else if(dilSecim == 1) {
 8001e68:	4b4f      	ldr	r3, [pc, #316]	; (8001fa8 <menu+0x684>)
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	2b01      	cmp	r3, #1
 8001e6e:	d104      	bne.n	8001e7a <menu+0x556>
				lcd_print(2, 1, "7.Error Code:");
 8001e70:	4a4e      	ldr	r2, [pc, #312]	; (8001fac <menu+0x688>)
 8001e72:	2101      	movs	r1, #1
 8001e74:	2002      	movs	r0, #2
 8001e76:	f7fe fc9f 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001e7a:	4a4d      	ldr	r2, [pc, #308]	; (8001fb0 <menu+0x68c>)
 8001e7c:	210f      	movs	r1, #15
 8001e7e:	2002      	movs	r0, #2
 8001e80:	f7fe fc9a 	bl	80007b8 <lcd_print>
			itoa(hataKayit7, snum, 10);
 8001e84:	4b4b      	ldr	r3, [pc, #300]	; (8001fb4 <menu+0x690>)
 8001e86:	781b      	ldrb	r3, [r3, #0]
 8001e88:	220a      	movs	r2, #10
 8001e8a:	494b      	ldr	r1, [pc, #300]	; (8001fb8 <menu+0x694>)
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f00b f8f3 	bl	800d078 <itoa>
			lcd_print(2, 14, snum);
 8001e92:	4a49      	ldr	r2, [pc, #292]	; (8001fb8 <menu+0x694>)
 8001e94:	210e      	movs	r1, #14
 8001e96:	2002      	movs	r0, #2
 8001e98:	f7fe fc8e 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8001e9c:	4b47      	ldr	r3, [pc, #284]	; (8001fbc <menu+0x698>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	2b07      	cmp	r3, #7
 8001ea2:	d123      	bne.n	8001eec <menu+0x5c8>
			if(dilSecim == 0) {
 8001ea4:	4b40      	ldr	r3, [pc, #256]	; (8001fa8 <menu+0x684>)
 8001ea6:	781b      	ldrb	r3, [r3, #0]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d105      	bne.n	8001eb8 <menu+0x594>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8001eac:	4a44      	ldr	r2, [pc, #272]	; (8001fc0 <menu+0x69c>)
 8001eae:	2101      	movs	r1, #1
 8001eb0:	2002      	movs	r0, #2
 8001eb2:	f7fe fc81 	bl	80007b8 <lcd_print>
 8001eb6:	e008      	b.n	8001eca <menu+0x5a6>
			} else if(dilSecim == 1) {
 8001eb8:	4b3b      	ldr	r3, [pc, #236]	; (8001fa8 <menu+0x684>)
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	2b01      	cmp	r3, #1
 8001ebe:	d104      	bne.n	8001eca <menu+0x5a6>
				lcd_print(2, 1, "8.Error Code:");
 8001ec0:	4a40      	ldr	r2, [pc, #256]	; (8001fc4 <menu+0x6a0>)
 8001ec2:	2101      	movs	r1, #1
 8001ec4:	2002      	movs	r0, #2
 8001ec6:	f7fe fc77 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001eca:	4a39      	ldr	r2, [pc, #228]	; (8001fb0 <menu+0x68c>)
 8001ecc:	210f      	movs	r1, #15
 8001ece:	2002      	movs	r0, #2
 8001ed0:	f7fe fc72 	bl	80007b8 <lcd_print>
			itoa(hataKayit8, snum, 10);
 8001ed4:	4b3c      	ldr	r3, [pc, #240]	; (8001fc8 <menu+0x6a4>)
 8001ed6:	781b      	ldrb	r3, [r3, #0]
 8001ed8:	220a      	movs	r2, #10
 8001eda:	4937      	ldr	r1, [pc, #220]	; (8001fb8 <menu+0x694>)
 8001edc:	4618      	mov	r0, r3
 8001ede:	f00b f8cb 	bl	800d078 <itoa>
			lcd_print(2, 14, snum);
 8001ee2:	4a35      	ldr	r2, [pc, #212]	; (8001fb8 <menu+0x694>)
 8001ee4:	210e      	movs	r1, #14
 8001ee6:	2002      	movs	r0, #2
 8001ee8:	f7fe fc66 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8001eec:	4b33      	ldr	r3, [pc, #204]	; (8001fbc <menu+0x698>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	2b08      	cmp	r3, #8
 8001ef2:	d123      	bne.n	8001f3c <menu+0x618>
			if(dilSecim == 0) {
 8001ef4:	4b2c      	ldr	r3, [pc, #176]	; (8001fa8 <menu+0x684>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d105      	bne.n	8001f08 <menu+0x5e4>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8001efc:	4a33      	ldr	r2, [pc, #204]	; (8001fcc <menu+0x6a8>)
 8001efe:	2101      	movs	r1, #1
 8001f00:	2002      	movs	r0, #2
 8001f02:	f7fe fc59 	bl	80007b8 <lcd_print>
 8001f06:	e008      	b.n	8001f1a <menu+0x5f6>
			} else if(dilSecim == 1) {
 8001f08:	4b27      	ldr	r3, [pc, #156]	; (8001fa8 <menu+0x684>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d104      	bne.n	8001f1a <menu+0x5f6>
				lcd_print(2, 1, "9.Error Code:");
 8001f10:	4a2f      	ldr	r2, [pc, #188]	; (8001fd0 <menu+0x6ac>)
 8001f12:	2101      	movs	r1, #1
 8001f14:	2002      	movs	r0, #2
 8001f16:	f7fe fc4f 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001f1a:	4a25      	ldr	r2, [pc, #148]	; (8001fb0 <menu+0x68c>)
 8001f1c:	210f      	movs	r1, #15
 8001f1e:	2002      	movs	r0, #2
 8001f20:	f7fe fc4a 	bl	80007b8 <lcd_print>
			itoa(hataKayit9, snum, 10);
 8001f24:	4b2b      	ldr	r3, [pc, #172]	; (8001fd4 <menu+0x6b0>)
 8001f26:	781b      	ldrb	r3, [r3, #0]
 8001f28:	220a      	movs	r2, #10
 8001f2a:	4923      	ldr	r1, [pc, #140]	; (8001fb8 <menu+0x694>)
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f00b f8a3 	bl	800d078 <itoa>
			lcd_print(2, 14, snum);
 8001f32:	4a21      	ldr	r2, [pc, #132]	; (8001fb8 <menu+0x694>)
 8001f34:	210e      	movs	r1, #14
 8001f36:	2002      	movs	r0, #2
 8001f38:	f7fe fc3e 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8001f3c:	4b1f      	ldr	r3, [pc, #124]	; (8001fbc <menu+0x698>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	2b09      	cmp	r3, #9
 8001f42:	d123      	bne.n	8001f8c <menu+0x668>
			if(dilSecim == 0) {
 8001f44:	4b18      	ldr	r3, [pc, #96]	; (8001fa8 <menu+0x684>)
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d105      	bne.n	8001f58 <menu+0x634>
				lcd_print(2, 1, "10.Hata Kodu: ");
 8001f4c:	4a22      	ldr	r2, [pc, #136]	; (8001fd8 <menu+0x6b4>)
 8001f4e:	2101      	movs	r1, #1
 8001f50:	2002      	movs	r0, #2
 8001f52:	f7fe fc31 	bl	80007b8 <lcd_print>
 8001f56:	e008      	b.n	8001f6a <menu+0x646>
			} else if(dilSecim == 1) {
 8001f58:	4b13      	ldr	r3, [pc, #76]	; (8001fa8 <menu+0x684>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d104      	bne.n	8001f6a <menu+0x646>
				lcd_print(2, 1, "10.Error Code:");
 8001f60:	4a1e      	ldr	r2, [pc, #120]	; (8001fdc <menu+0x6b8>)
 8001f62:	2101      	movs	r1, #1
 8001f64:	2002      	movs	r0, #2
 8001f66:	f7fe fc27 	bl	80007b8 <lcd_print>
			}
			lcd_print(2, 16, " ");
 8001f6a:	4a1d      	ldr	r2, [pc, #116]	; (8001fe0 <menu+0x6bc>)
 8001f6c:	2110      	movs	r1, #16
 8001f6e:	2002      	movs	r0, #2
 8001f70:	f7fe fc22 	bl	80007b8 <lcd_print>
			itoa(hataKayit10, snum, 10);
 8001f74:	4b1b      	ldr	r3, [pc, #108]	; (8001fe4 <menu+0x6c0>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	220a      	movs	r2, #10
 8001f7a:	490f      	ldr	r1, [pc, #60]	; (8001fb8 <menu+0x694>)
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f00b f87b 	bl	800d078 <itoa>
			lcd_print(2, 15, snum);
 8001f82:	4a0d      	ldr	r2, [pc, #52]	; (8001fb8 <menu+0x694>)
 8001f84:	210f      	movs	r1, #15
 8001f86:	2002      	movs	r0, #2
 8001f88:	f7fe fc16 	bl	80007b8 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001f8c:	4b0b      	ldr	r3, [pc, #44]	; (8001fbc <menu+0x698>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	2b0a      	cmp	r3, #10
 8001f92:	d134      	bne.n	8001ffe <menu+0x6da>
			if(dilSecim == 0) {
 8001f94:	4b04      	ldr	r3, [pc, #16]	; (8001fa8 <menu+0x684>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d127      	bne.n	8001fec <menu+0x6c8>
				lcd_print(2, 1, "Silmek icin ent.");
 8001f9c:	4a12      	ldr	r2, [pc, #72]	; (8001fe8 <menu+0x6c4>)
 8001f9e:	2101      	movs	r1, #1
 8001fa0:	2002      	movs	r0, #2
 8001fa2:	f7fe fc09 	bl	80007b8 <lcd_print>
 8001fa6:	e02a      	b.n	8001ffe <menu+0x6da>
 8001fa8:	20000cbe 	.word	0x20000cbe
 8001fac:	0800de00 	.word	0x0800de00
 8001fb0:	0800dd6c 	.word	0x0800dd6c
 8001fb4:	20000cc5 	.word	0x20000cc5
 8001fb8:	20000bcc 	.word	0x20000bcc
 8001fbc:	20000c9f 	.word	0x20000c9f
 8001fc0:	0800de10 	.word	0x0800de10
 8001fc4:	0800de20 	.word	0x0800de20
 8001fc8:	20000cc6 	.word	0x20000cc6
 8001fcc:	0800de30 	.word	0x0800de30
 8001fd0:	0800de40 	.word	0x0800de40
 8001fd4:	20000cc7 	.word	0x20000cc7
 8001fd8:	0800de50 	.word	0x0800de50
 8001fdc:	0800de60 	.word	0x0800de60
 8001fe0:	0800de70 	.word	0x0800de70
 8001fe4:	20000cc8 	.word	0x20000cc8
 8001fe8:	0800de74 	.word	0x0800de74
			} else if(dilSecim == 1) {
 8001fec:	4b82      	ldr	r3, [pc, #520]	; (80021f8 <menu+0x8d4>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d104      	bne.n	8001ffe <menu+0x6da>
				lcd_print(2, 1, "Del. press enter");
 8001ff4:	4a81      	ldr	r2, [pc, #516]	; (80021fc <menu+0x8d8>)
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	2002      	movs	r0, #2
 8001ffa:	f7fe fbdd 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001ffe:	2102      	movs	r1, #2
 8002000:	487f      	ldr	r0, [pc, #508]	; (8002200 <menu+0x8dc>)
 8002002:	f008 f80d 	bl	800a020 <HAL_GPIO_ReadPin>
 8002006:	4603      	mov	r3, r0
 8002008:	2b01      	cmp	r3, #1
 800200a:	d119      	bne.n	8002040 <menu+0x71c>
 800200c:	4b7d      	ldr	r3, [pc, #500]	; (8002204 <menu+0x8e0>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	f083 0301 	eor.w	r3, r3, #1
 8002014:	b2db      	uxtb	r3, r3
 8002016:	2b00      	cmp	r3, #0
 8002018:	d012      	beq.n	8002040 <menu+0x71c>
 800201a:	4b7b      	ldr	r3, [pc, #492]	; (8002208 <menu+0x8e4>)
 800201c:	781b      	ldrb	r3, [r3, #0]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d10e      	bne.n	8002040 <menu+0x71c>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8002022:	4b7a      	ldr	r3, [pc, #488]	; (800220c <menu+0x8e8>)
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	3301      	adds	r3, #1
 8002028:	b2da      	uxtb	r2, r3
 800202a:	4b78      	ldr	r3, [pc, #480]	; (800220c <menu+0x8e8>)
 800202c:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 800202e:	4b77      	ldr	r3, [pc, #476]	; (800220c <menu+0x8e8>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	2b0a      	cmp	r3, #10
 8002034:	d902      	bls.n	800203c <menu+0x718>
				hataGostermeSirasi = 0;
 8002036:	4b75      	ldr	r3, [pc, #468]	; (800220c <menu+0x8e8>)
 8002038:	2200      	movs	r2, #0
 800203a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800203c:	f004 fa10 	bl	8006460 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8002040:	2104      	movs	r1, #4
 8002042:	486f      	ldr	r0, [pc, #444]	; (8002200 <menu+0x8dc>)
 8002044:	f007 ffec 	bl	800a020 <HAL_GPIO_ReadPin>
 8002048:	4603      	mov	r3, r0
 800204a:	2b01      	cmp	r3, #1
 800204c:	d119      	bne.n	8002082 <menu+0x75e>
 800204e:	4b6d      	ldr	r3, [pc, #436]	; (8002204 <menu+0x8e0>)
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	f083 0301 	eor.w	r3, r3, #1
 8002056:	b2db      	uxtb	r3, r3
 8002058:	2b00      	cmp	r3, #0
 800205a:	d012      	beq.n	8002082 <menu+0x75e>
 800205c:	4b6a      	ldr	r3, [pc, #424]	; (8002208 <menu+0x8e4>)
 800205e:	781b      	ldrb	r3, [r3, #0]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d10e      	bne.n	8002082 <menu+0x75e>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8002064:	4b69      	ldr	r3, [pc, #420]	; (800220c <menu+0x8e8>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	3b01      	subs	r3, #1
 800206a:	b2da      	uxtb	r2, r3
 800206c:	4b67      	ldr	r3, [pc, #412]	; (800220c <menu+0x8e8>)
 800206e:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8002070:	4b66      	ldr	r3, [pc, #408]	; (800220c <menu+0x8e8>)
 8002072:	781b      	ldrb	r3, [r3, #0]
 8002074:	2b0b      	cmp	r3, #11
 8002076:	d902      	bls.n	800207e <menu+0x75a>
	    		hataGostermeSirasi = 10;
 8002078:	4b64      	ldr	r3, [pc, #400]	; (800220c <menu+0x8e8>)
 800207a:	220a      	movs	r2, #10
 800207c:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 800207e:	f004 f9ef 	bl	8006460 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8002082:	2108      	movs	r1, #8
 8002084:	485e      	ldr	r0, [pc, #376]	; (8002200 <menu+0x8dc>)
 8002086:	f007 ffcb 	bl	800a020 <HAL_GPIO_ReadPin>
 800208a:	4603      	mov	r3, r0
 800208c:	2b01      	cmp	r3, #1
 800208e:	d153      	bne.n	8002138 <menu+0x814>
 8002090:	4b5c      	ldr	r3, [pc, #368]	; (8002204 <menu+0x8e0>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	f083 0301 	eor.w	r3, r3, #1
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d04c      	beq.n	8002138 <menu+0x814>
 800209e:	4b5b      	ldr	r3, [pc, #364]	; (800220c <menu+0x8e8>)
 80020a0:	781b      	ldrb	r3, [r3, #0]
 80020a2:	2b0a      	cmp	r3, #10
 80020a4:	d148      	bne.n	8002138 <menu+0x814>
			hataKayit1 = 0; eepromData[37] = 0;
 80020a6:	4b5a      	ldr	r3, [pc, #360]	; (8002210 <menu+0x8ec>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	701a      	strb	r2, [r3, #0]
 80020ac:	4b59      	ldr	r3, [pc, #356]	; (8002214 <menu+0x8f0>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 80020b4:	4b58      	ldr	r3, [pc, #352]	; (8002218 <menu+0x8f4>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	701a      	strb	r2, [r3, #0]
 80020ba:	4b56      	ldr	r3, [pc, #344]	; (8002214 <menu+0x8f0>)
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 80020c2:	4b56      	ldr	r3, [pc, #344]	; (800221c <menu+0x8f8>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	701a      	strb	r2, [r3, #0]
 80020c8:	4b52      	ldr	r3, [pc, #328]	; (8002214 <menu+0x8f0>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 80020d0:	4b53      	ldr	r3, [pc, #332]	; (8002220 <menu+0x8fc>)
 80020d2:	2200      	movs	r2, #0
 80020d4:	701a      	strb	r2, [r3, #0]
 80020d6:	4b4f      	ldr	r3, [pc, #316]	; (8002214 <menu+0x8f0>)
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 80020de:	4b51      	ldr	r3, [pc, #324]	; (8002224 <menu+0x900>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	701a      	strb	r2, [r3, #0]
 80020e4:	4b4b      	ldr	r3, [pc, #300]	; (8002214 <menu+0x8f0>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 80020ec:	4b4e      	ldr	r3, [pc, #312]	; (8002228 <menu+0x904>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	701a      	strb	r2, [r3, #0]
 80020f2:	4b48      	ldr	r3, [pc, #288]	; (8002214 <menu+0x8f0>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 80020fa:	4b4c      	ldr	r3, [pc, #304]	; (800222c <menu+0x908>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	701a      	strb	r2, [r3, #0]
 8002100:	4b44      	ldr	r3, [pc, #272]	; (8002214 <menu+0x8f0>)
 8002102:	2200      	movs	r2, #0
 8002104:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8002108:	4b49      	ldr	r3, [pc, #292]	; (8002230 <menu+0x90c>)
 800210a:	2200      	movs	r2, #0
 800210c:	701a      	strb	r2, [r3, #0]
 800210e:	4b41      	ldr	r3, [pc, #260]	; (8002214 <menu+0x8f0>)
 8002110:	2200      	movs	r2, #0
 8002112:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8002116:	4b47      	ldr	r3, [pc, #284]	; (8002234 <menu+0x910>)
 8002118:	2200      	movs	r2, #0
 800211a:	701a      	strb	r2, [r3, #0]
 800211c:	4b3d      	ldr	r3, [pc, #244]	; (8002214 <menu+0x8f0>)
 800211e:	2200      	movs	r2, #0
 8002120:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8002124:	4b44      	ldr	r3, [pc, #272]	; (8002238 <menu+0x914>)
 8002126:	2200      	movs	r2, #0
 8002128:	701a      	strb	r2, [r3, #0]
 800212a:	4b3a      	ldr	r3, [pc, #232]	; (8002214 <menu+0x8f0>)
 800212c:	2200      	movs	r2, #0
 800212e:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8002132:	4b42      	ldr	r3, [pc, #264]	; (800223c <menu+0x918>)
 8002134:	2201      	movs	r2, #1
 8002136:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8002138:	4b41      	ldr	r3, [pc, #260]	; (8002240 <menu+0x91c>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	2b02      	cmp	r3, #2
 800213e:	f040 80fc 	bne.w	800233a <menu+0xa16>
		if(dilSecim == 0) {
 8002142:	4b2d      	ldr	r3, [pc, #180]	; (80021f8 <menu+0x8d4>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d105      	bne.n	8002156 <menu+0x832>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 800214a:	4a3e      	ldr	r2, [pc, #248]	; (8002244 <menu+0x920>)
 800214c:	2101      	movs	r1, #1
 800214e:	2001      	movs	r0, #1
 8002150:	f7fe fb32 	bl	80007b8 <lcd_print>
 8002154:	e008      	b.n	8002168 <menu+0x844>
		} else if(dilSecim == 1) {
 8002156:	4b28      	ldr	r3, [pc, #160]	; (80021f8 <menu+0x8d4>)
 8002158:	781b      	ldrb	r3, [r3, #0]
 800215a:	2b01      	cmp	r3, #1
 800215c:	d104      	bne.n	8002168 <menu+0x844>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 800215e:	4a3a      	ldr	r2, [pc, #232]	; (8002248 <menu+0x924>)
 8002160:	2101      	movs	r1, #1
 8002162:	2001      	movs	r0, #1
 8002164:	f7fe fb28 	bl	80007b8 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8002168:	4b27      	ldr	r3, [pc, #156]	; (8002208 <menu+0x8e4>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	2b01      	cmp	r3, #1
 800216e:	d003      	beq.n	8002178 <menu+0x854>
 8002170:	4b25      	ldr	r3, [pc, #148]	; (8002208 <menu+0x8e4>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	2b02      	cmp	r3, #2
 8002176:	d112      	bne.n	800219e <menu+0x87a>
			if(dilSecim == 0) {
 8002178:	4b1f      	ldr	r3, [pc, #124]	; (80021f8 <menu+0x8d4>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d105      	bne.n	800218c <menu+0x868>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8002180:	4a32      	ldr	r2, [pc, #200]	; (800224c <menu+0x928>)
 8002182:	2101      	movs	r1, #1
 8002184:	2002      	movs	r0, #2
 8002186:	f7fe fb17 	bl	80007b8 <lcd_print>
 800218a:	e008      	b.n	800219e <menu+0x87a>
			} else if(dilSecim == 1) {
 800218c:	4b1a      	ldr	r3, [pc, #104]	; (80021f8 <menu+0x8d4>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d104      	bne.n	800219e <menu+0x87a>
				lcd_print(2, 1, "Tppng Mobil slct");
 8002194:	4a2e      	ldr	r2, [pc, #184]	; (8002250 <menu+0x92c>)
 8002196:	2101      	movs	r1, #1
 8002198:	2002      	movs	r0, #2
 800219a:	f7fe fb0d 	bl	80007b8 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 800219e:	4b2d      	ldr	r3, [pc, #180]	; (8002254 <menu+0x930>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d116      	bne.n	80021d4 <menu+0x8b0>
 80021a6:	4b18      	ldr	r3, [pc, #96]	; (8002208 <menu+0x8e4>)
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d112      	bne.n	80021d4 <menu+0x8b0>
			if(dilSecim == 0) {
 80021ae:	4b12      	ldr	r3, [pc, #72]	; (80021f8 <menu+0x8d4>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d105      	bne.n	80021c2 <menu+0x89e>
				lcd_print(2, 1, "Bastikca cal.  ");
 80021b6:	4a28      	ldr	r2, [pc, #160]	; (8002258 <menu+0x934>)
 80021b8:	2101      	movs	r1, #1
 80021ba:	2002      	movs	r0, #2
 80021bc:	f7fe fafc 	bl	80007b8 <lcd_print>
 80021c0:	e008      	b.n	80021d4 <menu+0x8b0>
			} else if(dilSecim == 1) {
 80021c2:	4b0d      	ldr	r3, [pc, #52]	; (80021f8 <menu+0x8d4>)
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d104      	bne.n	80021d4 <menu+0x8b0>
				lcd_print(2, 1, "Deadman Control");
 80021ca:	4a24      	ldr	r2, [pc, #144]	; (800225c <menu+0x938>)
 80021cc:	2101      	movs	r1, #1
 80021ce:	2002      	movs	r0, #2
 80021d0:	f7fe faf2 	bl	80007b8 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 80021d4:	4b1f      	ldr	r3, [pc, #124]	; (8002254 <menu+0x930>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d14c      	bne.n	8002276 <menu+0x952>
 80021dc:	4b0a      	ldr	r3, [pc, #40]	; (8002208 <menu+0x8e4>)
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d148      	bne.n	8002276 <menu+0x952>
			if(dilSecim == 0) {
 80021e4:	4b04      	ldr	r3, [pc, #16]	; (80021f8 <menu+0x8d4>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d13b      	bne.n	8002264 <menu+0x940>
				lcd_print(2, 1, "Bas gonder     ");
 80021ec:	4a1c      	ldr	r2, [pc, #112]	; (8002260 <menu+0x93c>)
 80021ee:	2101      	movs	r1, #1
 80021f0:	2002      	movs	r0, #2
 80021f2:	f7fe fae1 	bl	80007b8 <lcd_print>
 80021f6:	e03e      	b.n	8002276 <menu+0x952>
 80021f8:	20000cbe 	.word	0x20000cbe
 80021fc:	0800de88 	.word	0x0800de88
 8002200:	40010800 	.word	0x40010800
 8002204:	20000ccc 	.word	0x20000ccc
 8002208:	20000cac 	.word	0x20000cac
 800220c:	20000c9f 	.word	0x20000c9f
 8002210:	20000cbf 	.word	0x20000cbf
 8002214:	20000b38 	.word	0x20000b38
 8002218:	20000cc0 	.word	0x20000cc0
 800221c:	20000cc1 	.word	0x20000cc1
 8002220:	20000cc2 	.word	0x20000cc2
 8002224:	20000cc3 	.word	0x20000cc3
 8002228:	20000cc4 	.word	0x20000cc4
 800222c:	20000cc5 	.word	0x20000cc5
 8002230:	20000cc6 	.word	0x20000cc6
 8002234:	20000cc7 	.word	0x20000cc7
 8002238:	20000cc8 	.word	0x20000cc8
 800223c:	20000cc9 	.word	0x20000cc9
 8002240:	20000c9d 	.word	0x20000c9d
 8002244:	0800de9c 	.word	0x0800de9c
 8002248:	0800deb0 	.word	0x0800deb0
 800224c:	0800dec4 	.word	0x0800dec4
 8002250:	0800ded8 	.word	0x0800ded8
 8002254:	20000c9e 	.word	0x20000c9e
 8002258:	0800deec 	.word	0x0800deec
 800225c:	0800defc 	.word	0x0800defc
 8002260:	0800df0c 	.word	0x0800df0c
			} else if(dilSecim == 1) {
 8002264:	4b98      	ldr	r3, [pc, #608]	; (80024c8 <menu+0xba4>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b01      	cmp	r3, #1
 800226a:	d104      	bne.n	8002276 <menu+0x952>
				lcd_print(2, 1, "Call & Send    ");
 800226c:	4a97      	ldr	r2, [pc, #604]	; (80024cc <menu+0xba8>)
 800226e:	2101      	movs	r1, #1
 8002270:	2002      	movs	r0, #2
 8002272:	f7fe faa1 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8002276:	2102      	movs	r1, #2
 8002278:	4895      	ldr	r0, [pc, #596]	; (80024d0 <menu+0xbac>)
 800227a:	f007 fed1 	bl	800a020 <HAL_GPIO_ReadPin>
 800227e:	4603      	mov	r3, r0
 8002280:	2b01      	cmp	r3, #1
 8002282:	d119      	bne.n	80022b8 <menu+0x994>
 8002284:	4b93      	ldr	r3, [pc, #588]	; (80024d4 <menu+0xbb0>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	f083 0301 	eor.w	r3, r3, #1
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d012      	beq.n	80022b8 <menu+0x994>
 8002292:	4b91      	ldr	r3, [pc, #580]	; (80024d8 <menu+0xbb4>)
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d10e      	bne.n	80022b8 <menu+0x994>
			calismaSekli = calismaSekli + 1;
 800229a:	4b90      	ldr	r3, [pc, #576]	; (80024dc <menu+0xbb8>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	3301      	adds	r3, #1
 80022a0:	b2da      	uxtb	r2, r3
 80022a2:	4b8e      	ldr	r3, [pc, #568]	; (80024dc <menu+0xbb8>)
 80022a4:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 80022a6:	4b8d      	ldr	r3, [pc, #564]	; (80024dc <menu+0xbb8>)
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d902      	bls.n	80022b4 <menu+0x990>
				calismaSekli = 0;
 80022ae:	4b8b      	ldr	r3, [pc, #556]	; (80024dc <menu+0xbb8>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80022b4:	f004 f8d4 	bl	8006460 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 80022b8:	2104      	movs	r1, #4
 80022ba:	4885      	ldr	r0, [pc, #532]	; (80024d0 <menu+0xbac>)
 80022bc:	f007 feb0 	bl	800a020 <HAL_GPIO_ReadPin>
 80022c0:	4603      	mov	r3, r0
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d119      	bne.n	80022fa <menu+0x9d6>
 80022c6:	4b83      	ldr	r3, [pc, #524]	; (80024d4 <menu+0xbb0>)
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	f083 0301 	eor.w	r3, r3, #1
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d012      	beq.n	80022fa <menu+0x9d6>
 80022d4:	4b80      	ldr	r3, [pc, #512]	; (80024d8 <menu+0xbb4>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d10e      	bne.n	80022fa <menu+0x9d6>
			calismaSekli = calismaSekli - 1;
 80022dc:	4b7f      	ldr	r3, [pc, #508]	; (80024dc <menu+0xbb8>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	3b01      	subs	r3, #1
 80022e2:	b2da      	uxtb	r2, r3
 80022e4:	4b7d      	ldr	r3, [pc, #500]	; (80024dc <menu+0xbb8>)
 80022e6:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 80022e8:	4b7c      	ldr	r3, [pc, #496]	; (80024dc <menu+0xbb8>)
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d002      	beq.n	80022f6 <menu+0x9d2>
	    		calismaSekli = 1;
 80022f0:	4b7a      	ldr	r3, [pc, #488]	; (80024dc <menu+0xbb8>)
 80022f2:	2201      	movs	r2, #1
 80022f4:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 80022f6:	f004 f8b3 	bl	8006460 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80022fa:	2108      	movs	r1, #8
 80022fc:	4874      	ldr	r0, [pc, #464]	; (80024d0 <menu+0xbac>)
 80022fe:	f007 fe8f 	bl	800a020 <HAL_GPIO_ReadPin>
 8002302:	4603      	mov	r3, r0
 8002304:	2b01      	cmp	r3, #1
 8002306:	d118      	bne.n	800233a <menu+0xa16>
 8002308:	4b72      	ldr	r3, [pc, #456]	; (80024d4 <menu+0xbb0>)
 800230a:	781b      	ldrb	r3, [r3, #0]
 800230c:	f083 0301 	eor.w	r3, r3, #1
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b00      	cmp	r3, #0
 8002314:	d011      	beq.n	800233a <menu+0xa16>
			eepromData[1] = calismaSekli;
 8002316:	4b71      	ldr	r3, [pc, #452]	; (80024dc <menu+0xbb8>)
 8002318:	781a      	ldrb	r2, [r3, #0]
 800231a:	4b71      	ldr	r3, [pc, #452]	; (80024e0 <menu+0xbbc>)
 800231c:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 800231e:	4b6f      	ldr	r3, [pc, #444]	; (80024dc <menu+0xbb8>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d106      	bne.n	8002334 <menu+0xa10>
				altLimit = 1;
 8002326:	4b6f      	ldr	r3, [pc, #444]	; (80024e4 <menu+0xbc0>)
 8002328:	2201      	movs	r2, #1
 800232a:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 800232c:	4b6d      	ldr	r3, [pc, #436]	; (80024e4 <menu+0xbc0>)
 800232e:	781a      	ldrb	r2, [r3, #0]
 8002330:	4b6b      	ldr	r3, [pc, #428]	; (80024e0 <menu+0xbbc>)
 8002332:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002334:	4b6c      	ldr	r3, [pc, #432]	; (80024e8 <menu+0xbc4>)
 8002336:	2201      	movs	r2, #1
 8002338:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 800233a:	4b6c      	ldr	r3, [pc, #432]	; (80024ec <menu+0xbc8>)
 800233c:	781b      	ldrb	r3, [r3, #0]
 800233e:	2b03      	cmp	r3, #3
 8002340:	f040 8083 	bne.w	800244a <menu+0xb26>
		if(dilSecim == 0) {
 8002344:	4b60      	ldr	r3, [pc, #384]	; (80024c8 <menu+0xba4>)
 8002346:	781b      	ldrb	r3, [r3, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d105      	bne.n	8002358 <menu+0xa34>
			lcd_print(1, 1, "EMNIYET CER.    ");
 800234c:	4a68      	ldr	r2, [pc, #416]	; (80024f0 <menu+0xbcc>)
 800234e:	2101      	movs	r1, #1
 8002350:	2001      	movs	r0, #1
 8002352:	f7fe fa31 	bl	80007b8 <lcd_print>
 8002356:	e008      	b.n	800236a <menu+0xa46>
		} else if(dilSecim == 1) {
 8002358:	4b5b      	ldr	r3, [pc, #364]	; (80024c8 <menu+0xba4>)
 800235a:	781b      	ldrb	r3, [r3, #0]
 800235c:	2b01      	cmp	r3, #1
 800235e:	d104      	bne.n	800236a <menu+0xa46>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8002360:	4a64      	ldr	r2, [pc, #400]	; (80024f4 <menu+0xbd0>)
 8002362:	2101      	movs	r1, #1
 8002364:	2001      	movs	r0, #1
 8002366:	f7fe fa27 	bl	80007b8 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 800236a:	4b63      	ldr	r3, [pc, #396]	; (80024f8 <menu+0xbd4>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d113      	bne.n	800239a <menu+0xa76>
			if(dilSecim == 0) {
 8002372:	4b55      	ldr	r3, [pc, #340]	; (80024c8 <menu+0xba4>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d105      	bne.n	8002386 <menu+0xa62>
				lcd_print(2, 1, "Pasif           ");
 800237a:	4a60      	ldr	r2, [pc, #384]	; (80024fc <menu+0xbd8>)
 800237c:	2101      	movs	r1, #1
 800237e:	2002      	movs	r0, #2
 8002380:	f7fe fa1a 	bl	80007b8 <lcd_print>
 8002384:	e012      	b.n	80023ac <menu+0xa88>
			} else if(dilSecim == 1) {
 8002386:	4b50      	ldr	r3, [pc, #320]	; (80024c8 <menu+0xba4>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	2b01      	cmp	r3, #1
 800238c:	d10e      	bne.n	80023ac <menu+0xa88>
				lcd_print(2, 1, "Passive         ");
 800238e:	4a5c      	ldr	r2, [pc, #368]	; (8002500 <menu+0xbdc>)
 8002390:	2101      	movs	r1, #1
 8002392:	2002      	movs	r0, #2
 8002394:	f7fe fa10 	bl	80007b8 <lcd_print>
 8002398:	e008      	b.n	80023ac <menu+0xa88>
			}
		} else if(emniyetCercevesi == 1) {
 800239a:	4b57      	ldr	r3, [pc, #348]	; (80024f8 <menu+0xbd4>)
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d104      	bne.n	80023ac <menu+0xa88>
			lcd_print(2, 1, "OND Safety     ");
 80023a2:	4a58      	ldr	r2, [pc, #352]	; (8002504 <menu+0xbe0>)
 80023a4:	2101      	movs	r1, #1
 80023a6:	2002      	movs	r0, #2
 80023a8:	f7fe fa06 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80023ac:	2102      	movs	r1, #2
 80023ae:	4848      	ldr	r0, [pc, #288]	; (80024d0 <menu+0xbac>)
 80023b0:	f007 fe36 	bl	800a020 <HAL_GPIO_ReadPin>
 80023b4:	4603      	mov	r3, r0
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d115      	bne.n	80023e6 <menu+0xac2>
 80023ba:	4b46      	ldr	r3, [pc, #280]	; (80024d4 <menu+0xbb0>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	f083 0301 	eor.w	r3, r3, #1
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d00e      	beq.n	80023e6 <menu+0xac2>
			emniyetCercevesi = emniyetCercevesi + 1;
 80023c8:	4b4b      	ldr	r3, [pc, #300]	; (80024f8 <menu+0xbd4>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	3301      	adds	r3, #1
 80023ce:	b2da      	uxtb	r2, r3
 80023d0:	4b49      	ldr	r3, [pc, #292]	; (80024f8 <menu+0xbd4>)
 80023d2:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 80023d4:	4b48      	ldr	r3, [pc, #288]	; (80024f8 <menu+0xbd4>)
 80023d6:	781b      	ldrb	r3, [r3, #0]
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d902      	bls.n	80023e2 <menu+0xabe>
				emniyetCercevesi = 0;
 80023dc:	4b46      	ldr	r3, [pc, #280]	; (80024f8 <menu+0xbd4>)
 80023de:	2200      	movs	r2, #0
 80023e0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80023e2:	f004 f83d 	bl	8006460 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80023e6:	2104      	movs	r1, #4
 80023e8:	4839      	ldr	r0, [pc, #228]	; (80024d0 <menu+0xbac>)
 80023ea:	f007 fe19 	bl	800a020 <HAL_GPIO_ReadPin>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d115      	bne.n	8002420 <menu+0xafc>
 80023f4:	4b37      	ldr	r3, [pc, #220]	; (80024d4 <menu+0xbb0>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	f083 0301 	eor.w	r3, r3, #1
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00e      	beq.n	8002420 <menu+0xafc>
			emniyetCercevesi = emniyetCercevesi - 1;
 8002402:	4b3d      	ldr	r3, [pc, #244]	; (80024f8 <menu+0xbd4>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	3b01      	subs	r3, #1
 8002408:	b2da      	uxtb	r2, r3
 800240a:	4b3b      	ldr	r3, [pc, #236]	; (80024f8 <menu+0xbd4>)
 800240c:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 800240e:	4b3a      	ldr	r3, [pc, #232]	; (80024f8 <menu+0xbd4>)
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d002      	beq.n	800241c <menu+0xaf8>
		   		emniyetCercevesi = 1;
 8002416:	4b38      	ldr	r3, [pc, #224]	; (80024f8 <menu+0xbd4>)
 8002418:	2201      	movs	r2, #1
 800241a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800241c:	f004 f820 	bl	8006460 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8002420:	2108      	movs	r1, #8
 8002422:	482b      	ldr	r0, [pc, #172]	; (80024d0 <menu+0xbac>)
 8002424:	f007 fdfc 	bl	800a020 <HAL_GPIO_ReadPin>
 8002428:	4603      	mov	r3, r0
 800242a:	2b01      	cmp	r3, #1
 800242c:	d10d      	bne.n	800244a <menu+0xb26>
 800242e:	4b29      	ldr	r3, [pc, #164]	; (80024d4 <menu+0xbb0>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	f083 0301 	eor.w	r3, r3, #1
 8002436:	b2db      	uxtb	r3, r3
 8002438:	2b00      	cmp	r3, #0
 800243a:	d006      	beq.n	800244a <menu+0xb26>
			eepromData[2] = emniyetCercevesi;
 800243c:	4b2e      	ldr	r3, [pc, #184]	; (80024f8 <menu+0xbd4>)
 800243e:	781a      	ldrb	r2, [r3, #0]
 8002440:	4b27      	ldr	r3, [pc, #156]	; (80024e0 <menu+0xbbc>)
 8002442:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8002444:	4b28      	ldr	r3, [pc, #160]	; (80024e8 <menu+0xbc4>)
 8002446:	2201      	movs	r2, #1
 8002448:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 800244a:	4b28      	ldr	r3, [pc, #160]	; (80024ec <menu+0xbc8>)
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	2b04      	cmp	r3, #4
 8002450:	f040 80ba 	bne.w	80025c8 <menu+0xca4>
		if(dilSecim == 0) {
 8002454:	4b1c      	ldr	r3, [pc, #112]	; (80024c8 <menu+0xba4>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d105      	bne.n	8002468 <menu+0xb44>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 800245c:	4a2a      	ldr	r2, [pc, #168]	; (8002508 <menu+0xbe4>)
 800245e:	2101      	movs	r1, #1
 8002460:	2001      	movs	r0, #1
 8002462:	f7fe f9a9 	bl	80007b8 <lcd_print>
 8002466:	e008      	b.n	800247a <menu+0xb56>
		} else if(dilSecim == 1) {
 8002468:	4b17      	ldr	r3, [pc, #92]	; (80024c8 <menu+0xba4>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d104      	bne.n	800247a <menu+0xb56>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8002470:	4a26      	ldr	r2, [pc, #152]	; (800250c <menu+0xbe8>)
 8002472:	2101      	movs	r1, #1
 8002474:	2001      	movs	r0, #1
 8002476:	f7fe f99f 	bl	80007b8 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 800247a:	4b25      	ldr	r3, [pc, #148]	; (8002510 <menu+0xbec>)
 800247c:	781b      	ldrb	r3, [r3, #0]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d113      	bne.n	80024aa <menu+0xb86>
			if(dilSecim == 0) {
 8002482:	4b11      	ldr	r3, [pc, #68]	; (80024c8 <menu+0xba4>)
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d105      	bne.n	8002496 <menu+0xb72>
				lcd_print(2, 1, "Pasif           ");
 800248a:	4a1c      	ldr	r2, [pc, #112]	; (80024fc <menu+0xbd8>)
 800248c:	2101      	movs	r1, #1
 800248e:	2002      	movs	r0, #2
 8002490:	f7fe f992 	bl	80007b8 <lcd_print>
 8002494:	e049      	b.n	800252a <menu+0xc06>
			} else if(dilSecim == 1) {
 8002496:	4b0c      	ldr	r3, [pc, #48]	; (80024c8 <menu+0xba4>)
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d145      	bne.n	800252a <menu+0xc06>
				lcd_print(2, 1, "Passive         ");
 800249e:	4a18      	ldr	r2, [pc, #96]	; (8002500 <menu+0xbdc>)
 80024a0:	2101      	movs	r1, #1
 80024a2:	2002      	movs	r0, #2
 80024a4:	f7fe f988 	bl	80007b8 <lcd_print>
 80024a8:	e03f      	b.n	800252a <menu+0xc06>
			}
		} else if(yavaslamaLimit == 1) {
 80024aa:	4b19      	ldr	r3, [pc, #100]	; (8002510 <menu+0xbec>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d13b      	bne.n	800252a <menu+0xc06>
			if(dilSecim == 0) {
 80024b2:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <menu+0xba4>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d12e      	bne.n	8002518 <menu+0xbf4>
				lcd_print(2, 1, "Aktif           ");
 80024ba:	4a16      	ldr	r2, [pc, #88]	; (8002514 <menu+0xbf0>)
 80024bc:	2101      	movs	r1, #1
 80024be:	2002      	movs	r0, #2
 80024c0:	f7fe f97a 	bl	80007b8 <lcd_print>
 80024c4:	e031      	b.n	800252a <menu+0xc06>
 80024c6:	bf00      	nop
 80024c8:	20000cbe 	.word	0x20000cbe
 80024cc:	0800df1c 	.word	0x0800df1c
 80024d0:	40010800 	.word	0x40010800
 80024d4:	20000ccc 	.word	0x20000ccc
 80024d8:	20000cac 	.word	0x20000cac
 80024dc:	20000c9e 	.word	0x20000c9e
 80024e0:	20000b38 	.word	0x20000b38
 80024e4:	20000ca3 	.word	0x20000ca3
 80024e8:	20000cc9 	.word	0x20000cc9
 80024ec:	20000c9d 	.word	0x20000c9d
 80024f0:	0800df2c 	.word	0x0800df2c
 80024f4:	0800df40 	.word	0x0800df40
 80024f8:	20000ca1 	.word	0x20000ca1
 80024fc:	0800df54 	.word	0x0800df54
 8002500:	0800df68 	.word	0x0800df68
 8002504:	0800df7c 	.word	0x0800df7c
 8002508:	0800df8c 	.word	0x0800df8c
 800250c:	0800dfa0 	.word	0x0800dfa0
 8002510:	20000ca2 	.word	0x20000ca2
 8002514:	0800dfb4 	.word	0x0800dfb4
			} else if(dilSecim == 1) {
 8002518:	4b92      	ldr	r3, [pc, #584]	; (8002764 <menu+0xe40>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d104      	bne.n	800252a <menu+0xc06>
				lcd_print(2, 1, "Active          ");
 8002520:	4a91      	ldr	r2, [pc, #580]	; (8002768 <menu+0xe44>)
 8002522:	2101      	movs	r1, #1
 8002524:	2002      	movs	r0, #2
 8002526:	f7fe f947 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800252a:	2102      	movs	r1, #2
 800252c:	488f      	ldr	r0, [pc, #572]	; (800276c <menu+0xe48>)
 800252e:	f007 fd77 	bl	800a020 <HAL_GPIO_ReadPin>
 8002532:	4603      	mov	r3, r0
 8002534:	2b01      	cmp	r3, #1
 8002536:	d115      	bne.n	8002564 <menu+0xc40>
 8002538:	4b8d      	ldr	r3, [pc, #564]	; (8002770 <menu+0xe4c>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	f083 0301 	eor.w	r3, r3, #1
 8002540:	b2db      	uxtb	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	d00e      	beq.n	8002564 <menu+0xc40>
			yavaslamaLimit = yavaslamaLimit + 1;
 8002546:	4b8b      	ldr	r3, [pc, #556]	; (8002774 <menu+0xe50>)
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	3301      	adds	r3, #1
 800254c:	b2da      	uxtb	r2, r3
 800254e:	4b89      	ldr	r3, [pc, #548]	; (8002774 <menu+0xe50>)
 8002550:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 8002552:	4b88      	ldr	r3, [pc, #544]	; (8002774 <menu+0xe50>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d902      	bls.n	8002560 <menu+0xc3c>
				yavaslamaLimit = 0;
 800255a:	4b86      	ldr	r3, [pc, #536]	; (8002774 <menu+0xe50>)
 800255c:	2200      	movs	r2, #0
 800255e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002560:	f003 ff7e 	bl	8006460 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002564:	2104      	movs	r1, #4
 8002566:	4881      	ldr	r0, [pc, #516]	; (800276c <menu+0xe48>)
 8002568:	f007 fd5a 	bl	800a020 <HAL_GPIO_ReadPin>
 800256c:	4603      	mov	r3, r0
 800256e:	2b01      	cmp	r3, #1
 8002570:	d115      	bne.n	800259e <menu+0xc7a>
 8002572:	4b7f      	ldr	r3, [pc, #508]	; (8002770 <menu+0xe4c>)
 8002574:	781b      	ldrb	r3, [r3, #0]
 8002576:	f083 0301 	eor.w	r3, r3, #1
 800257a:	b2db      	uxtb	r3, r3
 800257c:	2b00      	cmp	r3, #0
 800257e:	d00e      	beq.n	800259e <menu+0xc7a>
			yavaslamaLimit = yavaslamaLimit - 1;
 8002580:	4b7c      	ldr	r3, [pc, #496]	; (8002774 <menu+0xe50>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	3b01      	subs	r3, #1
 8002586:	b2da      	uxtb	r2, r3
 8002588:	4b7a      	ldr	r3, [pc, #488]	; (8002774 <menu+0xe50>)
 800258a:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 800258c:	4b79      	ldr	r3, [pc, #484]	; (8002774 <menu+0xe50>)
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d002      	beq.n	800259a <menu+0xc76>
		   		yavaslamaLimit = 1;
 8002594:	4b77      	ldr	r3, [pc, #476]	; (8002774 <menu+0xe50>)
 8002596:	2201      	movs	r2, #1
 8002598:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800259a:	f003 ff61 	bl	8006460 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800259e:	2108      	movs	r1, #8
 80025a0:	4872      	ldr	r0, [pc, #456]	; (800276c <menu+0xe48>)
 80025a2:	f007 fd3d 	bl	800a020 <HAL_GPIO_ReadPin>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d10d      	bne.n	80025c8 <menu+0xca4>
 80025ac:	4b70      	ldr	r3, [pc, #448]	; (8002770 <menu+0xe4c>)
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	f083 0301 	eor.w	r3, r3, #1
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d006      	beq.n	80025c8 <menu+0xca4>
			eepromData[4] = yavaslamaLimit;
 80025ba:	4b6e      	ldr	r3, [pc, #440]	; (8002774 <menu+0xe50>)
 80025bc:	781a      	ldrb	r2, [r3, #0]
 80025be:	4b6e      	ldr	r3, [pc, #440]	; (8002778 <menu+0xe54>)
 80025c0:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 80025c2:	4b6e      	ldr	r3, [pc, #440]	; (800277c <menu+0xe58>)
 80025c4:	2201      	movs	r2, #1
 80025c6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 80025c8:	4b6d      	ldr	r3, [pc, #436]	; (8002780 <menu+0xe5c>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	2b05      	cmp	r3, #5
 80025ce:	f040 80b9 	bne.w	8002744 <menu+0xe20>
		if(dilSecim == 0) {
 80025d2:	4b64      	ldr	r3, [pc, #400]	; (8002764 <menu+0xe40>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d105      	bne.n	80025e6 <menu+0xcc2>
			lcd_print(1, 1, "ALT LIMIT       ");
 80025da:	4a6a      	ldr	r2, [pc, #424]	; (8002784 <menu+0xe60>)
 80025dc:	2101      	movs	r1, #1
 80025de:	2001      	movs	r0, #1
 80025e0:	f7fe f8ea 	bl	80007b8 <lcd_print>
 80025e4:	e008      	b.n	80025f8 <menu+0xcd4>
		} else if(dilSecim == 1) {
 80025e6:	4b5f      	ldr	r3, [pc, #380]	; (8002764 <menu+0xe40>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d104      	bne.n	80025f8 <menu+0xcd4>
			lcd_print(1, 1, "DOWN LIMIT      ");
 80025ee:	4a66      	ldr	r2, [pc, #408]	; (8002788 <menu+0xe64>)
 80025f0:	2101      	movs	r1, #1
 80025f2:	2001      	movs	r0, #1
 80025f4:	f7fe f8e0 	bl	80007b8 <lcd_print>
		}

		if(altLimit == 0) {
 80025f8:	4b64      	ldr	r3, [pc, #400]	; (800278c <menu+0xe68>)
 80025fa:	781b      	ldrb	r3, [r3, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d113      	bne.n	8002628 <menu+0xd04>
			if(dilSecim == 0) {
 8002600:	4b58      	ldr	r3, [pc, #352]	; (8002764 <menu+0xe40>)
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d105      	bne.n	8002614 <menu+0xcf0>
				lcd_print(2, 1, "Pasif           ");
 8002608:	4a61      	ldr	r2, [pc, #388]	; (8002790 <menu+0xe6c>)
 800260a:	2101      	movs	r1, #1
 800260c:	2002      	movs	r0, #2
 800260e:	f7fe f8d3 	bl	80007b8 <lcd_print>
 8002612:	e020      	b.n	8002656 <menu+0xd32>
			} else if(dilSecim == 1) {
 8002614:	4b53      	ldr	r3, [pc, #332]	; (8002764 <menu+0xe40>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d11c      	bne.n	8002656 <menu+0xd32>
				lcd_print(2, 1, "Passive         ");
 800261c:	4a5d      	ldr	r2, [pc, #372]	; (8002794 <menu+0xe70>)
 800261e:	2101      	movs	r1, #1
 8002620:	2002      	movs	r0, #2
 8002622:	f7fe f8c9 	bl	80007b8 <lcd_print>
 8002626:	e016      	b.n	8002656 <menu+0xd32>
			}
		} else if(altLimit == 1) {
 8002628:	4b58      	ldr	r3, [pc, #352]	; (800278c <menu+0xe68>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2b01      	cmp	r3, #1
 800262e:	d112      	bne.n	8002656 <menu+0xd32>
			if(dilSecim == 0){
 8002630:	4b4c      	ldr	r3, [pc, #304]	; (8002764 <menu+0xe40>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d105      	bne.n	8002644 <menu+0xd20>
				lcd_print(2, 1, "Aktif           ");
 8002638:	4a57      	ldr	r2, [pc, #348]	; (8002798 <menu+0xe74>)
 800263a:	2101      	movs	r1, #1
 800263c:	2002      	movs	r0, #2
 800263e:	f7fe f8bb 	bl	80007b8 <lcd_print>
 8002642:	e008      	b.n	8002656 <menu+0xd32>
			} else if(dilSecim == 1){
 8002644:	4b47      	ldr	r3, [pc, #284]	; (8002764 <menu+0xe40>)
 8002646:	781b      	ldrb	r3, [r3, #0]
 8002648:	2b01      	cmp	r3, #1
 800264a:	d104      	bne.n	8002656 <menu+0xd32>
				lcd_print(2, 1, "Active          ");
 800264c:	4a46      	ldr	r2, [pc, #280]	; (8002768 <menu+0xe44>)
 800264e:	2101      	movs	r1, #1
 8002650:	2002      	movs	r0, #2
 8002652:	f7fe f8b1 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 8002656:	2102      	movs	r1, #2
 8002658:	4844      	ldr	r0, [pc, #272]	; (800276c <menu+0xe48>)
 800265a:	f007 fce1 	bl	800a020 <HAL_GPIO_ReadPin>
 800265e:	4603      	mov	r3, r0
 8002660:	2b01      	cmp	r3, #1
 8002662:	d119      	bne.n	8002698 <menu+0xd74>
 8002664:	4b42      	ldr	r3, [pc, #264]	; (8002770 <menu+0xe4c>)
 8002666:	781b      	ldrb	r3, [r3, #0]
 8002668:	f083 0301 	eor.w	r3, r3, #1
 800266c:	b2db      	uxtb	r3, r3
 800266e:	2b00      	cmp	r3, #0
 8002670:	d012      	beq.n	8002698 <menu+0xd74>
 8002672:	4b4a      	ldr	r3, [pc, #296]	; (800279c <menu+0xe78>)
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d10e      	bne.n	8002698 <menu+0xd74>
			altLimit = altLimit + 1;
 800267a:	4b44      	ldr	r3, [pc, #272]	; (800278c <menu+0xe68>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	3301      	adds	r3, #1
 8002680:	b2da      	uxtb	r2, r3
 8002682:	4b42      	ldr	r3, [pc, #264]	; (800278c <menu+0xe68>)
 8002684:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 8002686:	4b41      	ldr	r3, [pc, #260]	; (800278c <menu+0xe68>)
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d902      	bls.n	8002694 <menu+0xd70>
				altLimit = 0;
 800268e:	4b3f      	ldr	r3, [pc, #252]	; (800278c <menu+0xe68>)
 8002690:	2200      	movs	r2, #0
 8002692:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002694:	f003 fee4 	bl	8006460 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8002698:	2104      	movs	r1, #4
 800269a:	4834      	ldr	r0, [pc, #208]	; (800276c <menu+0xe48>)
 800269c:	f007 fcc0 	bl	800a020 <HAL_GPIO_ReadPin>
 80026a0:	4603      	mov	r3, r0
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d119      	bne.n	80026da <menu+0xdb6>
 80026a6:	4b32      	ldr	r3, [pc, #200]	; (8002770 <menu+0xe4c>)
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	f083 0301 	eor.w	r3, r3, #1
 80026ae:	b2db      	uxtb	r3, r3
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d012      	beq.n	80026da <menu+0xdb6>
 80026b4:	4b39      	ldr	r3, [pc, #228]	; (800279c <menu+0xe78>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d10e      	bne.n	80026da <menu+0xdb6>
			altLimit = altLimit - 1;
 80026bc:	4b33      	ldr	r3, [pc, #204]	; (800278c <menu+0xe68>)
 80026be:	781b      	ldrb	r3, [r3, #0]
 80026c0:	3b01      	subs	r3, #1
 80026c2:	b2da      	uxtb	r2, r3
 80026c4:	4b31      	ldr	r3, [pc, #196]	; (800278c <menu+0xe68>)
 80026c6:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 80026c8:	4b30      	ldr	r3, [pc, #192]	; (800278c <menu+0xe68>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d002      	beq.n	80026d6 <menu+0xdb2>
		   		altLimit = 1;
 80026d0:	4b2e      	ldr	r3, [pc, #184]	; (800278c <menu+0xe68>)
 80026d2:	2201      	movs	r2, #1
 80026d4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80026d6:	f003 fec3 	bl	8006460 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80026da:	2108      	movs	r1, #8
 80026dc:	4823      	ldr	r0, [pc, #140]	; (800276c <menu+0xe48>)
 80026de:	f007 fc9f 	bl	800a020 <HAL_GPIO_ReadPin>
 80026e2:	4603      	mov	r3, r0
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d12d      	bne.n	8002744 <menu+0xe20>
 80026e8:	4b21      	ldr	r3, [pc, #132]	; (8002770 <menu+0xe4c>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	f083 0301 	eor.w	r3, r3, #1
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d026      	beq.n	8002744 <menu+0xe20>
			eepromData[5] = altLimit;
 80026f6:	4b25      	ldr	r3, [pc, #148]	; (800278c <menu+0xe68>)
 80026f8:	781a      	ldrb	r2, [r3, #0]
 80026fa:	4b1f      	ldr	r3, [pc, #124]	; (8002778 <menu+0xe54>)
 80026fc:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 80026fe:	4b23      	ldr	r3, [pc, #140]	; (800278c <menu+0xe68>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d110      	bne.n	8002728 <menu+0xe04>
 8002706:	4b26      	ldr	r3, [pc, #152]	; (80027a0 <menu+0xe7c>)
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <menu+0xdf2>
 800270e:	4b24      	ldr	r3, [pc, #144]	; (80027a0 <menu+0xe7c>)
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	2b02      	cmp	r3, #2
 8002714:	d108      	bne.n	8002728 <menu+0xe04>
				kapiTablaAcKonum = 3;
 8002716:	4b22      	ldr	r3, [pc, #136]	; (80027a0 <menu+0xe7c>)
 8002718:	2203      	movs	r2, #3
 800271a:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 800271c:	4b20      	ldr	r3, [pc, #128]	; (80027a0 <menu+0xe7c>)
 800271e:	781a      	ldrb	r2, [r3, #0]
 8002720:	4b15      	ldr	r3, [pc, #84]	; (8002778 <menu+0xe54>)
 8002722:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 8002726:	e00a      	b.n	800273e <menu+0xe1a>
			} else if(altLimit == 0) {
 8002728:	4b18      	ldr	r3, [pc, #96]	; (800278c <menu+0xe68>)
 800272a:	781b      	ldrb	r3, [r3, #0]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d106      	bne.n	800273e <menu+0xe1a>
				platformSilindirTipi = 0;
 8002730:	4b1c      	ldr	r3, [pc, #112]	; (80027a4 <menu+0xe80>)
 8002732:	2200      	movs	r2, #0
 8002734:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 8002736:	4b1b      	ldr	r3, [pc, #108]	; (80027a4 <menu+0xe80>)
 8002738:	781a      	ldrb	r2, [r3, #0]
 800273a:	4b0f      	ldr	r3, [pc, #60]	; (8002778 <menu+0xe54>)
 800273c:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 800273e:	4b0f      	ldr	r3, [pc, #60]	; (800277c <menu+0xe58>)
 8002740:	2201      	movs	r2, #1
 8002742:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 8002744:	4b0e      	ldr	r3, [pc, #56]	; (8002780 <menu+0xe5c>)
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	2b06      	cmp	r3, #6
 800274a:	f040 80b6 	bne.w	80028ba <menu+0xf96>
		if(dilSecim == 0) {
 800274e:	4b05      	ldr	r3, [pc, #20]	; (8002764 <menu+0xe40>)
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d12a      	bne.n	80027ac <menu+0xe88>
			lcd_print(1, 1, "BASINC SALTERI ");
 8002756:	4a14      	ldr	r2, [pc, #80]	; (80027a8 <menu+0xe84>)
 8002758:	2101      	movs	r1, #1
 800275a:	2001      	movs	r0, #1
 800275c:	f7fe f82c 	bl	80007b8 <lcd_print>
 8002760:	e02d      	b.n	80027be <menu+0xe9a>
 8002762:	bf00      	nop
 8002764:	20000cbe 	.word	0x20000cbe
 8002768:	0800dfc8 	.word	0x0800dfc8
 800276c:	40010800 	.word	0x40010800
 8002770:	20000ccc 	.word	0x20000ccc
 8002774:	20000ca2 	.word	0x20000ca2
 8002778:	20000b38 	.word	0x20000b38
 800277c:	20000cc9 	.word	0x20000cc9
 8002780:	20000c9d 	.word	0x20000c9d
 8002784:	0800dfdc 	.word	0x0800dfdc
 8002788:	0800dff0 	.word	0x0800dff0
 800278c:	20000ca3 	.word	0x20000ca3
 8002790:	0800df54 	.word	0x0800df54
 8002794:	0800df68 	.word	0x0800df68
 8002798:	0800dfb4 	.word	0x0800dfb4
 800279c:	20000c9e 	.word	0x20000c9e
 80027a0:	20000caa 	.word	0x20000caa
 80027a4:	20000cb0 	.word	0x20000cb0
 80027a8:	0800e004 	.word	0x0800e004
		} else if(dilSecim == 1){
 80027ac:	4b7a      	ldr	r3, [pc, #488]	; (8002998 <menu+0x1074>)
 80027ae:	781b      	ldrb	r3, [r3, #0]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d104      	bne.n	80027be <menu+0xe9a>
			lcd_print(1, 1, "PRESSURE SWITCH");
 80027b4:	4a79      	ldr	r2, [pc, #484]	; (800299c <menu+0x1078>)
 80027b6:	2101      	movs	r1, #1
 80027b8:	2001      	movs	r0, #1
 80027ba:	f7fd fffd 	bl	80007b8 <lcd_print>
		}
		if(basincSalteri == 0){
 80027be:	4b78      	ldr	r3, [pc, #480]	; (80029a0 <menu+0x107c>)
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d113      	bne.n	80027ee <menu+0xeca>
			if(dilSecim == 0) {
 80027c6:	4b74      	ldr	r3, [pc, #464]	; (8002998 <menu+0x1074>)
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d105      	bne.n	80027da <menu+0xeb6>
				lcd_print(2, 1, "Pasif           ");
 80027ce:	4a75      	ldr	r2, [pc, #468]	; (80029a4 <menu+0x1080>)
 80027d0:	2101      	movs	r1, #1
 80027d2:	2002      	movs	r0, #2
 80027d4:	f7fd fff0 	bl	80007b8 <lcd_print>
 80027d8:	e020      	b.n	800281c <menu+0xef8>
			} else if(dilSecim == 1){
 80027da:	4b6f      	ldr	r3, [pc, #444]	; (8002998 <menu+0x1074>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d11c      	bne.n	800281c <menu+0xef8>
				lcd_print(2, 1, "Passive         ");
 80027e2:	4a71      	ldr	r2, [pc, #452]	; (80029a8 <menu+0x1084>)
 80027e4:	2101      	movs	r1, #1
 80027e6:	2002      	movs	r0, #2
 80027e8:	f7fd ffe6 	bl	80007b8 <lcd_print>
 80027ec:	e016      	b.n	800281c <menu+0xef8>
			}
		} else if(basincSalteri == 1) {
 80027ee:	4b6c      	ldr	r3, [pc, #432]	; (80029a0 <menu+0x107c>)
 80027f0:	781b      	ldrb	r3, [r3, #0]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d112      	bne.n	800281c <menu+0xef8>
			if(dilSecim == 0) {
 80027f6:	4b68      	ldr	r3, [pc, #416]	; (8002998 <menu+0x1074>)
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d105      	bne.n	800280a <menu+0xee6>
				lcd_print(2, 1, "Aktif           ");
 80027fe:	4a6b      	ldr	r2, [pc, #428]	; (80029ac <menu+0x1088>)
 8002800:	2101      	movs	r1, #1
 8002802:	2002      	movs	r0, #2
 8002804:	f7fd ffd8 	bl	80007b8 <lcd_print>
 8002808:	e008      	b.n	800281c <menu+0xef8>
			} else if(dilSecim == 1) {
 800280a:	4b63      	ldr	r3, [pc, #396]	; (8002998 <menu+0x1074>)
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d104      	bne.n	800281c <menu+0xef8>
				lcd_print(2, 1, "Active          ");
 8002812:	4a67      	ldr	r2, [pc, #412]	; (80029b0 <menu+0x108c>)
 8002814:	2101      	movs	r1, #1
 8002816:	2002      	movs	r0, #2
 8002818:	f7fd ffce 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800281c:	2102      	movs	r1, #2
 800281e:	4865      	ldr	r0, [pc, #404]	; (80029b4 <menu+0x1090>)
 8002820:	f007 fbfe 	bl	800a020 <HAL_GPIO_ReadPin>
 8002824:	4603      	mov	r3, r0
 8002826:	2b01      	cmp	r3, #1
 8002828:	d115      	bne.n	8002856 <menu+0xf32>
 800282a:	4b63      	ldr	r3, [pc, #396]	; (80029b8 <menu+0x1094>)
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	f083 0301 	eor.w	r3, r3, #1
 8002832:	b2db      	uxtb	r3, r3
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00e      	beq.n	8002856 <menu+0xf32>
			basincSalteri = basincSalteri + 1;
 8002838:	4b59      	ldr	r3, [pc, #356]	; (80029a0 <menu+0x107c>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	3301      	adds	r3, #1
 800283e:	b2da      	uxtb	r2, r3
 8002840:	4b57      	ldr	r3, [pc, #348]	; (80029a0 <menu+0x107c>)
 8002842:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 8002844:	4b56      	ldr	r3, [pc, #344]	; (80029a0 <menu+0x107c>)
 8002846:	781b      	ldrb	r3, [r3, #0]
 8002848:	2b01      	cmp	r3, #1
 800284a:	d902      	bls.n	8002852 <menu+0xf2e>
				basincSalteri = 0;
 800284c:	4b54      	ldr	r3, [pc, #336]	; (80029a0 <menu+0x107c>)
 800284e:	2200      	movs	r2, #0
 8002850:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002852:	f003 fe05 	bl	8006460 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002856:	2104      	movs	r1, #4
 8002858:	4856      	ldr	r0, [pc, #344]	; (80029b4 <menu+0x1090>)
 800285a:	f007 fbe1 	bl	800a020 <HAL_GPIO_ReadPin>
 800285e:	4603      	mov	r3, r0
 8002860:	2b01      	cmp	r3, #1
 8002862:	d115      	bne.n	8002890 <menu+0xf6c>
 8002864:	4b54      	ldr	r3, [pc, #336]	; (80029b8 <menu+0x1094>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	f083 0301 	eor.w	r3, r3, #1
 800286c:	b2db      	uxtb	r3, r3
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00e      	beq.n	8002890 <menu+0xf6c>
			basincSalteri = basincSalteri - 1;
 8002872:	4b4b      	ldr	r3, [pc, #300]	; (80029a0 <menu+0x107c>)
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	3b01      	subs	r3, #1
 8002878:	b2da      	uxtb	r2, r3
 800287a:	4b49      	ldr	r3, [pc, #292]	; (80029a0 <menu+0x107c>)
 800287c:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 800287e:	4b48      	ldr	r3, [pc, #288]	; (80029a0 <menu+0x107c>)
 8002880:	781b      	ldrb	r3, [r3, #0]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d002      	beq.n	800288c <menu+0xf68>
		   		basincSalteri = 1;
 8002886:	4b46      	ldr	r3, [pc, #280]	; (80029a0 <menu+0x107c>)
 8002888:	2201      	movs	r2, #1
 800288a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800288c:	f003 fde8 	bl	8006460 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002890:	2108      	movs	r1, #8
 8002892:	4848      	ldr	r0, [pc, #288]	; (80029b4 <menu+0x1090>)
 8002894:	f007 fbc4 	bl	800a020 <HAL_GPIO_ReadPin>
 8002898:	4603      	mov	r3, r0
 800289a:	2b01      	cmp	r3, #1
 800289c:	d10d      	bne.n	80028ba <menu+0xf96>
 800289e:	4b46      	ldr	r3, [pc, #280]	; (80029b8 <menu+0x1094>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	f083 0301 	eor.w	r3, r3, #1
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d006      	beq.n	80028ba <menu+0xf96>
			eepromData[6] = basincSalteri;
 80028ac:	4b3c      	ldr	r3, [pc, #240]	; (80029a0 <menu+0x107c>)
 80028ae:	781a      	ldrb	r2, [r3, #0]
 80028b0:	4b42      	ldr	r3, [pc, #264]	; (80029bc <menu+0x1098>)
 80028b2:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 80028b4:	4b42      	ldr	r3, [pc, #264]	; (80029c0 <menu+0x109c>)
 80028b6:	2201      	movs	r2, #1
 80028b8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 80028ba:	4b42      	ldr	r3, [pc, #264]	; (80029c4 <menu+0x10a0>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	2b07      	cmp	r3, #7
 80028c0:	f040 80f5 	bne.w	8002aae <menu+0x118a>
		if(dilSecim == 0) {
 80028c4:	4b34      	ldr	r3, [pc, #208]	; (8002998 <menu+0x1074>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d105      	bne.n	80028d8 <menu+0xfb4>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 80028cc:	4a3e      	ldr	r2, [pc, #248]	; (80029c8 <menu+0x10a4>)
 80028ce:	2101      	movs	r1, #1
 80028d0:	2001      	movs	r0, #1
 80028d2:	f7fd ff71 	bl	80007b8 <lcd_print>
 80028d6:	e008      	b.n	80028ea <menu+0xfc6>
		} else if(dilSecim == 1){
 80028d8:	4b2f      	ldr	r3, [pc, #188]	; (8002998 <menu+0x1074>)
 80028da:	781b      	ldrb	r3, [r3, #0]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d104      	bne.n	80028ea <menu+0xfc6>
			lcd_print(1, 1, "DOOR SELECTION     ");
 80028e0:	4a3a      	ldr	r2, [pc, #232]	; (80029cc <menu+0x10a8>)
 80028e2:	2101      	movs	r1, #1
 80028e4:	2001      	movs	r0, #1
 80028e6:	f7fd ff67 	bl	80007b8 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 80028ea:	4b39      	ldr	r3, [pc, #228]	; (80029d0 <menu+0x10ac>)
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d113      	bne.n	800291a <menu+0xff6>
			if(dilSecim == 0) {
 80028f2:	4b29      	ldr	r3, [pc, #164]	; (8002998 <menu+0x1074>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d105      	bne.n	8002906 <menu+0xfe2>
				lcd_print(2, 1, "Pasif           ");
 80028fa:	4a2a      	ldr	r2, [pc, #168]	; (80029a4 <menu+0x1080>)
 80028fc:	2101      	movs	r1, #1
 80028fe:	2002      	movs	r0, #2
 8002900:	f7fd ff5a 	bl	80007b8 <lcd_print>
 8002904:	e079      	b.n	80029fa <menu+0x10d6>
			} else if(dilSecim == 1){
 8002906:	4b24      	ldr	r3, [pc, #144]	; (8002998 <menu+0x1074>)
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	2b01      	cmp	r3, #1
 800290c:	d175      	bne.n	80029fa <menu+0x10d6>
				lcd_print(2, 1, "Passive         ");
 800290e:	4a26      	ldr	r2, [pc, #152]	; (80029a8 <menu+0x1084>)
 8002910:	2101      	movs	r1, #1
 8002912:	2002      	movs	r0, #2
 8002914:	f7fd ff50 	bl	80007b8 <lcd_print>
 8002918:	e06f      	b.n	80029fa <menu+0x10d6>
			}
		} else if(kapiSecimleri == 1) {
 800291a:	4b2d      	ldr	r3, [pc, #180]	; (80029d0 <menu+0x10ac>)
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	2b01      	cmp	r3, #1
 8002920:	d113      	bne.n	800294a <menu+0x1026>
			if(dilSecim == 0) {
 8002922:	4b1d      	ldr	r3, [pc, #116]	; (8002998 <menu+0x1074>)
 8002924:	781b      	ldrb	r3, [r3, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d105      	bne.n	8002936 <menu+0x1012>
				lcd_print(2, 1, "Kat kapisi aktif");
 800292a:	4a2a      	ldr	r2, [pc, #168]	; (80029d4 <menu+0x10b0>)
 800292c:	2101      	movs	r1, #1
 800292e:	2002      	movs	r0, #2
 8002930:	f7fd ff42 	bl	80007b8 <lcd_print>
 8002934:	e061      	b.n	80029fa <menu+0x10d6>
			} else if(dilSecim == 1) {
 8002936:	4b18      	ldr	r3, [pc, #96]	; (8002998 <menu+0x1074>)
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d15d      	bne.n	80029fa <menu+0x10d6>
				lcd_print(2, 1, "Floor door act  ");
 800293e:	4a26      	ldr	r2, [pc, #152]	; (80029d8 <menu+0x10b4>)
 8002940:	2101      	movs	r1, #1
 8002942:	2002      	movs	r0, #2
 8002944:	f7fd ff38 	bl	80007b8 <lcd_print>
 8002948:	e057      	b.n	80029fa <menu+0x10d6>
			}
		} else if(kapiSecimleri == 2){
 800294a:	4b21      	ldr	r3, [pc, #132]	; (80029d0 <menu+0x10ac>)
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	2b02      	cmp	r3, #2
 8002950:	d113      	bne.n	800297a <menu+0x1056>
			if(dilSecim == 0) {
 8002952:	4b11      	ldr	r3, [pc, #68]	; (8002998 <menu+0x1074>)
 8002954:	781b      	ldrb	r3, [r3, #0]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d105      	bne.n	8002966 <menu+0x1042>
				lcd_print(2, 1, "Tabla kapi aktif");
 800295a:	4a20      	ldr	r2, [pc, #128]	; (80029dc <menu+0x10b8>)
 800295c:	2101      	movs	r1, #1
 800295e:	2002      	movs	r0, #2
 8002960:	f7fd ff2a 	bl	80007b8 <lcd_print>
 8002964:	e049      	b.n	80029fa <menu+0x10d6>
			} else if(dilSecim == 1) {
 8002966:	4b0c      	ldr	r3, [pc, #48]	; (8002998 <menu+0x1074>)
 8002968:	781b      	ldrb	r3, [r3, #0]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d145      	bne.n	80029fa <menu+0x10d6>
				lcd_print(2, 1, "Pltfrm door act ");
 800296e:	4a1c      	ldr	r2, [pc, #112]	; (80029e0 <menu+0x10bc>)
 8002970:	2101      	movs	r1, #1
 8002972:	2002      	movs	r0, #2
 8002974:	f7fd ff20 	bl	80007b8 <lcd_print>
 8002978:	e03f      	b.n	80029fa <menu+0x10d6>
			}
		} else if(kapiSecimleri == 3){
 800297a:	4b15      	ldr	r3, [pc, #84]	; (80029d0 <menu+0x10ac>)
 800297c:	781b      	ldrb	r3, [r3, #0]
 800297e:	2b03      	cmp	r3, #3
 8002980:	d13b      	bne.n	80029fa <menu+0x10d6>
			if(dilSecim == 0) {
 8002982:	4b05      	ldr	r3, [pc, #20]	; (8002998 <menu+0x1074>)
 8002984:	781b      	ldrb	r3, [r3, #0]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d12e      	bne.n	80029e8 <menu+0x10c4>
				lcd_print(2, 1, "Kat + Tabl aktif");
 800298a:	4a16      	ldr	r2, [pc, #88]	; (80029e4 <menu+0x10c0>)
 800298c:	2101      	movs	r1, #1
 800298e:	2002      	movs	r0, #2
 8002990:	f7fd ff12 	bl	80007b8 <lcd_print>
 8002994:	e031      	b.n	80029fa <menu+0x10d6>
 8002996:	bf00      	nop
 8002998:	20000cbe 	.word	0x20000cbe
 800299c:	0800e014 	.word	0x0800e014
 80029a0:	20000ca4 	.word	0x20000ca4
 80029a4:	0800df54 	.word	0x0800df54
 80029a8:	0800df68 	.word	0x0800df68
 80029ac:	0800dfb4 	.word	0x0800dfb4
 80029b0:	0800dfc8 	.word	0x0800dfc8
 80029b4:	40010800 	.word	0x40010800
 80029b8:	20000ccc 	.word	0x20000ccc
 80029bc:	20000b38 	.word	0x20000b38
 80029c0:	20000cc9 	.word	0x20000cc9
 80029c4:	20000c9d 	.word	0x20000c9d
 80029c8:	0800e024 	.word	0x0800e024
 80029cc:	0800e038 	.word	0x0800e038
 80029d0:	20000ca5 	.word	0x20000ca5
 80029d4:	0800e04c 	.word	0x0800e04c
 80029d8:	0800e060 	.word	0x0800e060
 80029dc:	0800e074 	.word	0x0800e074
 80029e0:	0800e088 	.word	0x0800e088
 80029e4:	0800e09c 	.word	0x0800e09c
			} else if(dilSecim == 1){
 80029e8:	4b99      	ldr	r3, [pc, #612]	; (8002c50 <menu+0x132c>)
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d104      	bne.n	80029fa <menu+0x10d6>
				lcd_print(2, 1, "Flr + Plrfrm act");
 80029f0:	4a98      	ldr	r2, [pc, #608]	; (8002c54 <menu+0x1330>)
 80029f2:	2101      	movs	r1, #1
 80029f4:	2002      	movs	r0, #2
 80029f6:	f7fd fedf 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80029fa:	2102      	movs	r1, #2
 80029fc:	4896      	ldr	r0, [pc, #600]	; (8002c58 <menu+0x1334>)
 80029fe:	f007 fb0f 	bl	800a020 <HAL_GPIO_ReadPin>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d115      	bne.n	8002a34 <menu+0x1110>
 8002a08:	4b94      	ldr	r3, [pc, #592]	; (8002c5c <menu+0x1338>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	f083 0301 	eor.w	r3, r3, #1
 8002a10:	b2db      	uxtb	r3, r3
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d00e      	beq.n	8002a34 <menu+0x1110>
			kapiSecimleri = kapiSecimleri + 1;
 8002a16:	4b92      	ldr	r3, [pc, #584]	; (8002c60 <menu+0x133c>)
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	3301      	adds	r3, #1
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	4b90      	ldr	r3, [pc, #576]	; (8002c60 <menu+0x133c>)
 8002a20:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 8002a22:	4b8f      	ldr	r3, [pc, #572]	; (8002c60 <menu+0x133c>)
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	2b03      	cmp	r3, #3
 8002a28:	d902      	bls.n	8002a30 <menu+0x110c>
				kapiSecimleri = 0;
 8002a2a:	4b8d      	ldr	r3, [pc, #564]	; (8002c60 <menu+0x133c>)
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002a30:	f003 fd16 	bl	8006460 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a34:	2104      	movs	r1, #4
 8002a36:	4888      	ldr	r0, [pc, #544]	; (8002c58 <menu+0x1334>)
 8002a38:	f007 faf2 	bl	800a020 <HAL_GPIO_ReadPin>
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d115      	bne.n	8002a6e <menu+0x114a>
 8002a42:	4b86      	ldr	r3, [pc, #536]	; (8002c5c <menu+0x1338>)
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	f083 0301 	eor.w	r3, r3, #1
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d00e      	beq.n	8002a6e <menu+0x114a>
			kapiSecimleri = kapiSecimleri - 1;
 8002a50:	4b83      	ldr	r3, [pc, #524]	; (8002c60 <menu+0x133c>)
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	3b01      	subs	r3, #1
 8002a56:	b2da      	uxtb	r2, r3
 8002a58:	4b81      	ldr	r3, [pc, #516]	; (8002c60 <menu+0x133c>)
 8002a5a:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 8002a5c:	4b80      	ldr	r3, [pc, #512]	; (8002c60 <menu+0x133c>)
 8002a5e:	781b      	ldrb	r3, [r3, #0]
 8002a60:	2b04      	cmp	r3, #4
 8002a62:	d902      	bls.n	8002a6a <menu+0x1146>
		   		kapiSecimleri = 3;
 8002a64:	4b7e      	ldr	r3, [pc, #504]	; (8002c60 <menu+0x133c>)
 8002a66:	2203      	movs	r2, #3
 8002a68:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002a6a:	f003 fcf9 	bl	8006460 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a6e:	2108      	movs	r1, #8
 8002a70:	4879      	ldr	r0, [pc, #484]	; (8002c58 <menu+0x1334>)
 8002a72:	f007 fad5 	bl	800a020 <HAL_GPIO_ReadPin>
 8002a76:	4603      	mov	r3, r0
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d118      	bne.n	8002aae <menu+0x118a>
 8002a7c:	4b77      	ldr	r3, [pc, #476]	; (8002c5c <menu+0x1338>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	f083 0301 	eor.w	r3, r3, #1
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d011      	beq.n	8002aae <menu+0x118a>
			eepromData[7] = kapiSecimleri;
 8002a8a:	4b75      	ldr	r3, [pc, #468]	; (8002c60 <menu+0x133c>)
 8002a8c:	781a      	ldrb	r2, [r3, #0]
 8002a8e:	4b75      	ldr	r3, [pc, #468]	; (8002c64 <menu+0x1340>)
 8002a90:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 8002a92:	4b73      	ldr	r3, [pc, #460]	; (8002c60 <menu+0x133c>)
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d006      	beq.n	8002aa8 <menu+0x1184>
				altLimit = 1;
 8002a9a:	4b73      	ldr	r3, [pc, #460]	; (8002c68 <menu+0x1344>)
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002aa0:	4b71      	ldr	r3, [pc, #452]	; (8002c68 <menu+0x1344>)
 8002aa2:	781a      	ldrb	r2, [r3, #0]
 8002aa4:	4b6f      	ldr	r3, [pc, #444]	; (8002c64 <menu+0x1340>)
 8002aa6:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002aa8:	4b70      	ldr	r3, [pc, #448]	; (8002c6c <menu+0x1348>)
 8002aaa:	2201      	movs	r2, #1
 8002aac:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 8002aae:	4b70      	ldr	r3, [pc, #448]	; (8002c70 <menu+0x134c>)
 8002ab0:	781b      	ldrb	r3, [r3, #0]
 8002ab2:	2b08      	cmp	r3, #8
 8002ab4:	f040 8092 	bne.w	8002bdc <menu+0x12b8>
		if(dilSecim == 0) {
 8002ab8:	4b65      	ldr	r3, [pc, #404]	; (8002c50 <menu+0x132c>)
 8002aba:	781b      	ldrb	r3, [r3, #0]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d105      	bne.n	8002acc <menu+0x11a8>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 8002ac0:	4a6c      	ldr	r2, [pc, #432]	; (8002c74 <menu+0x1350>)
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	2001      	movs	r0, #1
 8002ac6:	f7fd fe77 	bl	80007b8 <lcd_print>
 8002aca:	e008      	b.n	8002ade <menu+0x11ba>
		} else if(dilSecim == 1) {
 8002acc:	4b60      	ldr	r3, [pc, #384]	; (8002c50 <menu+0x132c>)
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d104      	bne.n	8002ade <menu+0x11ba>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 8002ad4:	4a68      	ldr	r2, [pc, #416]	; (8002c78 <menu+0x1354>)
 8002ad6:	2101      	movs	r1, #1
 8002ad8:	2001      	movs	r0, #1
 8002ada:	f7fd fe6d 	bl	80007b8 <lcd_print>
		}

		if(kapiAcTipi == 0){
 8002ade:	4b67      	ldr	r3, [pc, #412]	; (8002c7c <menu+0x1358>)
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d113      	bne.n	8002b0e <menu+0x11ea>
			if(dilSecim == 0) {
 8002ae6:	4b5a      	ldr	r3, [pc, #360]	; (8002c50 <menu+0x132c>)
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d105      	bne.n	8002afa <menu+0x11d6>
				lcd_print(2, 1, "Kapi butonu ESP");
 8002aee:	4a64      	ldr	r2, [pc, #400]	; (8002c80 <menu+0x135c>)
 8002af0:	2101      	movs	r1, #1
 8002af2:	2002      	movs	r0, #2
 8002af4:	f7fd fe60 	bl	80007b8 <lcd_print>
 8002af8:	e020      	b.n	8002b3c <menu+0x1218>
			} else if(dilSecim == 1) {
 8002afa:	4b55      	ldr	r3, [pc, #340]	; (8002c50 <menu+0x132c>)
 8002afc:	781b      	ldrb	r3, [r3, #0]
 8002afe:	2b01      	cmp	r3, #1
 8002b00:	d11c      	bne.n	8002b3c <menu+0x1218>
				lcd_print(2, 1, "Door Button ESP");
 8002b02:	4a60      	ldr	r2, [pc, #384]	; (8002c84 <menu+0x1360>)
 8002b04:	2101      	movs	r1, #1
 8002b06:	2002      	movs	r0, #2
 8002b08:	f7fd fe56 	bl	80007b8 <lcd_print>
 8002b0c:	e016      	b.n	8002b3c <menu+0x1218>
			}
		} else if(kapiAcTipi == 1){
 8002b0e:	4b5b      	ldr	r3, [pc, #364]	; (8002c7c <menu+0x1358>)
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d112      	bne.n	8002b3c <menu+0x1218>
			if(dilSecim == 0){
 8002b16:	4b4e      	ldr	r3, [pc, #312]	; (8002c50 <menu+0x132c>)
 8002b18:	781b      	ldrb	r3, [r3, #0]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d105      	bne.n	8002b2a <menu+0x1206>
				lcd_print(2, 1, "Kat butonu EXT  ");
 8002b1e:	4a5a      	ldr	r2, [pc, #360]	; (8002c88 <menu+0x1364>)
 8002b20:	2101      	movs	r1, #1
 8002b22:	2002      	movs	r0, #2
 8002b24:	f7fd fe48 	bl	80007b8 <lcd_print>
 8002b28:	e008      	b.n	8002b3c <menu+0x1218>
			} else if(dilSecim == 1){
 8002b2a:	4b49      	ldr	r3, [pc, #292]	; (8002c50 <menu+0x132c>)
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d104      	bne.n	8002b3c <menu+0x1218>
				lcd_print(2, 1, "Floor button EXT");
 8002b32:	4a56      	ldr	r2, [pc, #344]	; (8002c8c <menu+0x1368>)
 8002b34:	2101      	movs	r1, #1
 8002b36:	2002      	movs	r0, #2
 8002b38:	f7fd fe3e 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b3c:	2102      	movs	r1, #2
 8002b3e:	4846      	ldr	r0, [pc, #280]	; (8002c58 <menu+0x1334>)
 8002b40:	f007 fa6e 	bl	800a020 <HAL_GPIO_ReadPin>
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d115      	bne.n	8002b76 <menu+0x1252>
 8002b4a:	4b44      	ldr	r3, [pc, #272]	; (8002c5c <menu+0x1338>)
 8002b4c:	781b      	ldrb	r3, [r3, #0]
 8002b4e:	f083 0301 	eor.w	r3, r3, #1
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d00e      	beq.n	8002b76 <menu+0x1252>
			kapiAcTipi = kapiAcTipi + 1;
 8002b58:	4b48      	ldr	r3, [pc, #288]	; (8002c7c <menu+0x1358>)
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	b2da      	uxtb	r2, r3
 8002b60:	4b46      	ldr	r3, [pc, #280]	; (8002c7c <menu+0x1358>)
 8002b62:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 8002b64:	4b45      	ldr	r3, [pc, #276]	; (8002c7c <menu+0x1358>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d902      	bls.n	8002b72 <menu+0x124e>
				kapiAcTipi = 0;
 8002b6c:	4b43      	ldr	r3, [pc, #268]	; (8002c7c <menu+0x1358>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002b72:	f003 fc75 	bl	8006460 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b76:	2104      	movs	r1, #4
 8002b78:	4837      	ldr	r0, [pc, #220]	; (8002c58 <menu+0x1334>)
 8002b7a:	f007 fa51 	bl	800a020 <HAL_GPIO_ReadPin>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d115      	bne.n	8002bb0 <menu+0x128c>
 8002b84:	4b35      	ldr	r3, [pc, #212]	; (8002c5c <menu+0x1338>)
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	f083 0301 	eor.w	r3, r3, #1
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d00e      	beq.n	8002bb0 <menu+0x128c>
			kapiAcTipi = kapiAcTipi - 1;
 8002b92:	4b3a      	ldr	r3, [pc, #232]	; (8002c7c <menu+0x1358>)
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	3b01      	subs	r3, #1
 8002b98:	b2da      	uxtb	r2, r3
 8002b9a:	4b38      	ldr	r3, [pc, #224]	; (8002c7c <menu+0x1358>)
 8002b9c:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8002b9e:	4b37      	ldr	r3, [pc, #220]	; (8002c7c <menu+0x1358>)
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d002      	beq.n	8002bac <menu+0x1288>
		   		kapiAcTipi = 1;
 8002ba6:	4b35      	ldr	r3, [pc, #212]	; (8002c7c <menu+0x1358>)
 8002ba8:	2201      	movs	r2, #1
 8002baa:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002bac:	f003 fc58 	bl	8006460 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bb0:	2108      	movs	r1, #8
 8002bb2:	4829      	ldr	r0, [pc, #164]	; (8002c58 <menu+0x1334>)
 8002bb4:	f007 fa34 	bl	800a020 <HAL_GPIO_ReadPin>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d10e      	bne.n	8002bdc <menu+0x12b8>
 8002bbe:	4b27      	ldr	r3, [pc, #156]	; (8002c5c <menu+0x1338>)
 8002bc0:	781b      	ldrb	r3, [r3, #0]
 8002bc2:	f083 0301 	eor.w	r3, r3, #1
 8002bc6:	b2db      	uxtb	r3, r3
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d007      	beq.n	8002bdc <menu+0x12b8>
			eepromData[36] = kapiAcTipi;
 8002bcc:	4b2b      	ldr	r3, [pc, #172]	; (8002c7c <menu+0x1358>)
 8002bce:	781a      	ldrb	r2, [r3, #0]
 8002bd0:	4b24      	ldr	r3, [pc, #144]	; (8002c64 <menu+0x1340>)
 8002bd2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 8002bd6:	4b25      	ldr	r3, [pc, #148]	; (8002c6c <menu+0x1348>)
 8002bd8:	2201      	movs	r2, #1
 8002bda:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 8002bdc:	4b24      	ldr	r3, [pc, #144]	; (8002c70 <menu+0x134c>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	2b09      	cmp	r3, #9
 8002be2:	f040 80b9 	bne.w	8002d58 <menu+0x1434>
		if(dilSecim == 0){
 8002be6:	4b1a      	ldr	r3, [pc, #104]	; (8002c50 <menu+0x132c>)
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d105      	bne.n	8002bfa <menu+0x12d6>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 8002bee:	4a28      	ldr	r2, [pc, #160]	; (8002c90 <menu+0x136c>)
 8002bf0:	2101      	movs	r1, #1
 8002bf2:	2001      	movs	r0, #1
 8002bf4:	f7fd fde0 	bl	80007b8 <lcd_print>
 8002bf8:	e008      	b.n	8002c0c <menu+0x12e8>
		} else if(dilSecim == 1) {
 8002bfa:	4b15      	ldr	r3, [pc, #84]	; (8002c50 <menu+0x132c>)
 8002bfc:	781b      	ldrb	r3, [r3, #0]
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d104      	bne.n	8002c0c <menu+0x12e8>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 8002c02:	4a24      	ldr	r2, [pc, #144]	; (8002c94 <menu+0x1370>)
 8002c04:	2101      	movs	r1, #1
 8002c06:	2001      	movs	r0, #1
 8002c08:	f7fd fdd6 	bl	80007b8 <lcd_print>
		}

		if(kapi1Tip == 0) {
 8002c0c:	4b22      	ldr	r3, [pc, #136]	; (8002c98 <menu+0x1374>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d105      	bne.n	8002c20 <menu+0x12fc>
			lcd_print(2, 1, "Prudhome        ");
 8002c14:	4a21      	ldr	r2, [pc, #132]	; (8002c9c <menu+0x1378>)
 8002c16:	2101      	movs	r1, #1
 8002c18:	2002      	movs	r0, #2
 8002c1a:	f7fd fdcd 	bl	80007b8 <lcd_print>
 8002c1e:	e04c      	b.n	8002cba <menu+0x1396>
		} else if(kapi1Tip == 1) {
 8002c20:	4b1d      	ldr	r3, [pc, #116]	; (8002c98 <menu+0x1374>)
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d13f      	bne.n	8002ca8 <menu+0x1384>
			if(dilSecim == 0){
 8002c28:	4b09      	ldr	r3, [pc, #36]	; (8002c50 <menu+0x132c>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d105      	bne.n	8002c3c <menu+0x1318>
				lcd_print(2, 1, "Buton kontrollu");
 8002c30:	4a1b      	ldr	r2, [pc, #108]	; (8002ca0 <menu+0x137c>)
 8002c32:	2101      	movs	r1, #1
 8002c34:	2002      	movs	r0, #2
 8002c36:	f7fd fdbf 	bl	80007b8 <lcd_print>
 8002c3a:	e03e      	b.n	8002cba <menu+0x1396>
			} else if(dilSecim == 1) {
 8002c3c:	4b04      	ldr	r3, [pc, #16]	; (8002c50 <menu+0x132c>)
 8002c3e:	781b      	ldrb	r3, [r3, #0]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d13a      	bne.n	8002cba <menu+0x1396>
				lcd_print(2, 1, "Button cntrolled");
 8002c44:	4a17      	ldr	r2, [pc, #92]	; (8002ca4 <menu+0x1380>)
 8002c46:	2101      	movs	r1, #1
 8002c48:	2002      	movs	r0, #2
 8002c4a:	f7fd fdb5 	bl	80007b8 <lcd_print>
 8002c4e:	e034      	b.n	8002cba <menu+0x1396>
 8002c50:	20000cbe 	.word	0x20000cbe
 8002c54:	0800e0b0 	.word	0x0800e0b0
 8002c58:	40010800 	.word	0x40010800
 8002c5c:	20000ccc 	.word	0x20000ccc
 8002c60:	20000ca5 	.word	0x20000ca5
 8002c64:	20000b38 	.word	0x20000b38
 8002c68:	20000ca3 	.word	0x20000ca3
 8002c6c:	20000cc9 	.word	0x20000cc9
 8002c70:	20000c9d 	.word	0x20000c9d
 8002c74:	0800e0c4 	.word	0x0800e0c4
 8002c78:	0800e0d8 	.word	0x0800e0d8
 8002c7c:	20000ca9 	.word	0x20000ca9
 8002c80:	0800e0ec 	.word	0x0800e0ec
 8002c84:	0800e0fc 	.word	0x0800e0fc
 8002c88:	0800e10c 	.word	0x0800e10c
 8002c8c:	0800e120 	.word	0x0800e120
 8002c90:	0800e134 	.word	0x0800e134
 8002c94:	0800e148 	.word	0x0800e148
 8002c98:	20000ca6 	.word	0x20000ca6
 8002c9c:	0800e15c 	.word	0x0800e15c
 8002ca0:	0800e170 	.word	0x0800e170
 8002ca4:	0800e180 	.word	0x0800e180
			}
		} else if(kapi1Tip == 2) {
 8002ca8:	4b8a      	ldr	r3, [pc, #552]	; (8002ed4 <menu+0x15b0>)
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	2b02      	cmp	r3, #2
 8002cae:	d104      	bne.n	8002cba <menu+0x1396>
			lcd_print(2, 1, "Pizzato        ");
 8002cb0:	4a89      	ldr	r2, [pc, #548]	; (8002ed8 <menu+0x15b4>)
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	2002      	movs	r0, #2
 8002cb6:	f7fd fd7f 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cba:	2102      	movs	r1, #2
 8002cbc:	4887      	ldr	r0, [pc, #540]	; (8002edc <menu+0x15b8>)
 8002cbe:	f007 f9af 	bl	800a020 <HAL_GPIO_ReadPin>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d115      	bne.n	8002cf4 <menu+0x13d0>
 8002cc8:	4b85      	ldr	r3, [pc, #532]	; (8002ee0 <menu+0x15bc>)
 8002cca:	781b      	ldrb	r3, [r3, #0]
 8002ccc:	f083 0301 	eor.w	r3, r3, #1
 8002cd0:	b2db      	uxtb	r3, r3
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00e      	beq.n	8002cf4 <menu+0x13d0>
			kapi1Tip = kapi1Tip + 1;
 8002cd6:	4b7f      	ldr	r3, [pc, #508]	; (8002ed4 <menu+0x15b0>)
 8002cd8:	781b      	ldrb	r3, [r3, #0]
 8002cda:	3301      	adds	r3, #1
 8002cdc:	b2da      	uxtb	r2, r3
 8002cde:	4b7d      	ldr	r3, [pc, #500]	; (8002ed4 <menu+0x15b0>)
 8002ce0:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 8002ce2:	4b7c      	ldr	r3, [pc, #496]	; (8002ed4 <menu+0x15b0>)
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d902      	bls.n	8002cf0 <menu+0x13cc>
				kapi1Tip = 0;
 8002cea:	4b7a      	ldr	r3, [pc, #488]	; (8002ed4 <menu+0x15b0>)
 8002cec:	2200      	movs	r2, #0
 8002cee:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002cf0:	f003 fbb6 	bl	8006460 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cf4:	2104      	movs	r1, #4
 8002cf6:	4879      	ldr	r0, [pc, #484]	; (8002edc <menu+0x15b8>)
 8002cf8:	f007 f992 	bl	800a020 <HAL_GPIO_ReadPin>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d115      	bne.n	8002d2e <menu+0x140a>
 8002d02:	4b77      	ldr	r3, [pc, #476]	; (8002ee0 <menu+0x15bc>)
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	f083 0301 	eor.w	r3, r3, #1
 8002d0a:	b2db      	uxtb	r3, r3
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00e      	beq.n	8002d2e <menu+0x140a>
			kapi1Tip = kapi1Tip - 1;
 8002d10:	4b70      	ldr	r3, [pc, #448]	; (8002ed4 <menu+0x15b0>)
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	3b01      	subs	r3, #1
 8002d16:	b2da      	uxtb	r2, r3
 8002d18:	4b6e      	ldr	r3, [pc, #440]	; (8002ed4 <menu+0x15b0>)
 8002d1a:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8002d1c:	4b6d      	ldr	r3, [pc, #436]	; (8002ed4 <menu+0x15b0>)
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	2b03      	cmp	r3, #3
 8002d22:	d902      	bls.n	8002d2a <menu+0x1406>
		   		kapi1Tip = 2;
 8002d24:	4b6b      	ldr	r3, [pc, #428]	; (8002ed4 <menu+0x15b0>)
 8002d26:	2202      	movs	r2, #2
 8002d28:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002d2a:	f003 fb99 	bl	8006460 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d2e:	2108      	movs	r1, #8
 8002d30:	486a      	ldr	r0, [pc, #424]	; (8002edc <menu+0x15b8>)
 8002d32:	f007 f975 	bl	800a020 <HAL_GPIO_ReadPin>
 8002d36:	4603      	mov	r3, r0
 8002d38:	2b01      	cmp	r3, #1
 8002d3a:	d10d      	bne.n	8002d58 <menu+0x1434>
 8002d3c:	4b68      	ldr	r3, [pc, #416]	; (8002ee0 <menu+0x15bc>)
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	f083 0301 	eor.w	r3, r3, #1
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d006      	beq.n	8002d58 <menu+0x1434>
			eepromData[8] = kapi1Tip;
 8002d4a:	4b62      	ldr	r3, [pc, #392]	; (8002ed4 <menu+0x15b0>)
 8002d4c:	781a      	ldrb	r2, [r3, #0]
 8002d4e:	4b65      	ldr	r3, [pc, #404]	; (8002ee4 <menu+0x15c0>)
 8002d50:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 8002d52:	4b65      	ldr	r3, [pc, #404]	; (8002ee8 <menu+0x15c4>)
 8002d54:	2201      	movs	r2, #1
 8002d56:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 8002d58:	4b64      	ldr	r3, [pc, #400]	; (8002eec <menu+0x15c8>)
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	2b0a      	cmp	r3, #10
 8002d5e:	d17f      	bne.n	8002e60 <menu+0x153c>
		if(dilSecim == 0) {
 8002d60:	4b63      	ldr	r3, [pc, #396]	; (8002ef0 <menu+0x15cc>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d10a      	bne.n	8002d7e <menu+0x145a>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 8002d68:	4a62      	ldr	r2, [pc, #392]	; (8002ef4 <menu+0x15d0>)
 8002d6a:	2101      	movs	r1, #1
 8002d6c:	2001      	movs	r0, #1
 8002d6e:	f7fd fd23 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002d72:	4a61      	ldr	r2, [pc, #388]	; (8002ef8 <menu+0x15d4>)
 8002d74:	2101      	movs	r1, #1
 8002d76:	2002      	movs	r0, #2
 8002d78:	f7fd fd1e 	bl	80007b8 <lcd_print>
 8002d7c:	e00d      	b.n	8002d9a <menu+0x1476>
		} else if(dilSecim == 1) {
 8002d7e:	4b5c      	ldr	r3, [pc, #368]	; (8002ef0 <menu+0x15cc>)
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d109      	bne.n	8002d9a <menu+0x1476>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 8002d86:	4a5d      	ldr	r2, [pc, #372]	; (8002efc <menu+0x15d8>)
 8002d88:	2101      	movs	r1, #1
 8002d8a:	2001      	movs	r0, #1
 8002d8c:	f7fd fd14 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002d90:	4a5b      	ldr	r2, [pc, #364]	; (8002f00 <menu+0x15dc>)
 8002d92:	2101      	movs	r1, #1
 8002d94:	2002      	movs	r0, #2
 8002d96:	f7fd fd0f 	bl	80007b8 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 8002d9a:	4b5a      	ldr	r3, [pc, #360]	; (8002f04 <menu+0x15e0>)
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	220a      	movs	r2, #10
 8002da0:	4959      	ldr	r1, [pc, #356]	; (8002f08 <menu+0x15e4>)
 8002da2:	4618      	mov	r0, r3
 8002da4:	f00a f968 	bl	800d078 <itoa>
		lcd_print(2,16,snum);
 8002da8:	4a57      	ldr	r2, [pc, #348]	; (8002f08 <menu+0x15e4>)
 8002daa:	2110      	movs	r1, #16
 8002dac:	2002      	movs	r0, #2
 8002dae:	f7fd fd03 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002db2:	2102      	movs	r1, #2
 8002db4:	4849      	ldr	r0, [pc, #292]	; (8002edc <menu+0x15b8>)
 8002db6:	f007 f933 	bl	800a020 <HAL_GPIO_ReadPin>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d119      	bne.n	8002df4 <menu+0x14d0>
 8002dc0:	4b47      	ldr	r3, [pc, #284]	; (8002ee0 <menu+0x15bc>)
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	f083 0301 	eor.w	r3, r3, #1
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d012      	beq.n	8002df4 <menu+0x14d0>
 8002dce:	4b41      	ldr	r3, [pc, #260]	; (8002ed4 <menu+0x15b0>)
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d10e      	bne.n	8002df4 <menu+0x14d0>
			kapi1AcSure = kapi1AcSure + 1;
 8002dd6:	4b4b      	ldr	r3, [pc, #300]	; (8002f04 <menu+0x15e0>)
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	3301      	adds	r3, #1
 8002ddc:	b2da      	uxtb	r2, r3
 8002dde:	4b49      	ldr	r3, [pc, #292]	; (8002f04 <menu+0x15e0>)
 8002de0:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8002de2:	4b48      	ldr	r3, [pc, #288]	; (8002f04 <menu+0x15e0>)
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	2b05      	cmp	r3, #5
 8002de8:	d902      	bls.n	8002df0 <menu+0x14cc>
				kapi1AcSure = 0;
 8002dea:	4b46      	ldr	r3, [pc, #280]	; (8002f04 <menu+0x15e0>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002df0:	f003 fb36 	bl	8006460 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8002df4:	2104      	movs	r1, #4
 8002df6:	4839      	ldr	r0, [pc, #228]	; (8002edc <menu+0x15b8>)
 8002df8:	f007 f912 	bl	800a020 <HAL_GPIO_ReadPin>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d119      	bne.n	8002e36 <menu+0x1512>
 8002e02:	4b37      	ldr	r3, [pc, #220]	; (8002ee0 <menu+0x15bc>)
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	f083 0301 	eor.w	r3, r3, #1
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d012      	beq.n	8002e36 <menu+0x1512>
 8002e10:	4b30      	ldr	r3, [pc, #192]	; (8002ed4 <menu+0x15b0>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d10e      	bne.n	8002e36 <menu+0x1512>
			kapi1AcSure = kapi1AcSure - 1;
 8002e18:	4b3a      	ldr	r3, [pc, #232]	; (8002f04 <menu+0x15e0>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	3b01      	subs	r3, #1
 8002e1e:	b2da      	uxtb	r2, r3
 8002e20:	4b38      	ldr	r3, [pc, #224]	; (8002f04 <menu+0x15e0>)
 8002e22:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8002e24:	4b37      	ldr	r3, [pc, #220]	; (8002f04 <menu+0x15e0>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	2b06      	cmp	r3, #6
 8002e2a:	d902      	bls.n	8002e32 <menu+0x150e>
		   		kapi1AcSure = 5;
 8002e2c:	4b35      	ldr	r3, [pc, #212]	; (8002f04 <menu+0x15e0>)
 8002e2e:	2205      	movs	r2, #5
 8002e30:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002e32:	f003 fb15 	bl	8006460 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e36:	2108      	movs	r1, #8
 8002e38:	4828      	ldr	r0, [pc, #160]	; (8002edc <menu+0x15b8>)
 8002e3a:	f007 f8f1 	bl	800a020 <HAL_GPIO_ReadPin>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d10d      	bne.n	8002e60 <menu+0x153c>
 8002e44:	4b26      	ldr	r3, [pc, #152]	; (8002ee0 <menu+0x15bc>)
 8002e46:	781b      	ldrb	r3, [r3, #0]
 8002e48:	f083 0301 	eor.w	r3, r3, #1
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d006      	beq.n	8002e60 <menu+0x153c>
			eepromData[9] = kapi1AcSure;
 8002e52:	4b2c      	ldr	r3, [pc, #176]	; (8002f04 <menu+0x15e0>)
 8002e54:	781a      	ldrb	r2, [r3, #0]
 8002e56:	4b23      	ldr	r3, [pc, #140]	; (8002ee4 <menu+0x15c0>)
 8002e58:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8002e5a:	4b23      	ldr	r3, [pc, #140]	; (8002ee8 <menu+0x15c4>)
 8002e5c:	2201      	movs	r2, #1
 8002e5e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8002e60:	4b22      	ldr	r3, [pc, #136]	; (8002eec <menu+0x15c8>)
 8002e62:	781b      	ldrb	r3, [r3, #0]
 8002e64:	2b0b      	cmp	r3, #11
 8002e66:	f040 80b5 	bne.w	8002fd4 <menu+0x16b0>
		if(dilSecim == 0) {
 8002e6a:	4b21      	ldr	r3, [pc, #132]	; (8002ef0 <menu+0x15cc>)
 8002e6c:	781b      	ldrb	r3, [r3, #0]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d105      	bne.n	8002e7e <menu+0x155a>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 8002e72:	4a26      	ldr	r2, [pc, #152]	; (8002f0c <menu+0x15e8>)
 8002e74:	2101      	movs	r1, #1
 8002e76:	2001      	movs	r0, #1
 8002e78:	f7fd fc9e 	bl	80007b8 <lcd_print>
 8002e7c:	e008      	b.n	8002e90 <menu+0x156c>
		} else if(dilSecim == 1) {
 8002e7e:	4b1c      	ldr	r3, [pc, #112]	; (8002ef0 <menu+0x15cc>)
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d104      	bne.n	8002e90 <menu+0x156c>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 8002e86:	4a22      	ldr	r2, [pc, #136]	; (8002f10 <menu+0x15ec>)
 8002e88:	2101      	movs	r1, #1
 8002e8a:	2001      	movs	r0, #1
 8002e8c:	f7fd fc94 	bl	80007b8 <lcd_print>
		}

		if(kapi2Tip == 0) {
 8002e90:	4b20      	ldr	r3, [pc, #128]	; (8002f14 <menu+0x15f0>)
 8002e92:	781b      	ldrb	r3, [r3, #0]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d105      	bne.n	8002ea4 <menu+0x1580>
			lcd_print(2, 1, "Prudhome        ");
 8002e98:	4a1f      	ldr	r2, [pc, #124]	; (8002f18 <menu+0x15f4>)
 8002e9a:	2101      	movs	r1, #1
 8002e9c:	2002      	movs	r0, #2
 8002e9e:	f7fd fc8b 	bl	80007b8 <lcd_print>
 8002ea2:	e048      	b.n	8002f36 <menu+0x1612>
		} else if(kapi2Tip == 1) {
 8002ea4:	4b1b      	ldr	r3, [pc, #108]	; (8002f14 <menu+0x15f0>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d13b      	bne.n	8002f24 <menu+0x1600>
			if(dilSecim == 0) {
 8002eac:	4b10      	ldr	r3, [pc, #64]	; (8002ef0 <menu+0x15cc>)
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d105      	bne.n	8002ec0 <menu+0x159c>
				lcd_print(2, 1, "Buton kontrollu");
 8002eb4:	4a19      	ldr	r2, [pc, #100]	; (8002f1c <menu+0x15f8>)
 8002eb6:	2101      	movs	r1, #1
 8002eb8:	2002      	movs	r0, #2
 8002eba:	f7fd fc7d 	bl	80007b8 <lcd_print>
 8002ebe:	e03a      	b.n	8002f36 <menu+0x1612>
			} else if(dilSecim == 1) {
 8002ec0:	4b0b      	ldr	r3, [pc, #44]	; (8002ef0 <menu+0x15cc>)
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d136      	bne.n	8002f36 <menu+0x1612>
				lcd_print(2, 1, "Button cntrolled");
 8002ec8:	4a15      	ldr	r2, [pc, #84]	; (8002f20 <menu+0x15fc>)
 8002eca:	2101      	movs	r1, #1
 8002ecc:	2002      	movs	r0, #2
 8002ece:	f7fd fc73 	bl	80007b8 <lcd_print>
 8002ed2:	e030      	b.n	8002f36 <menu+0x1612>
 8002ed4:	20000ca6 	.word	0x20000ca6
 8002ed8:	0800e194 	.word	0x0800e194
 8002edc:	40010800 	.word	0x40010800
 8002ee0:	20000ccc 	.word	0x20000ccc
 8002ee4:	20000b38 	.word	0x20000b38
 8002ee8:	20000cc9 	.word	0x20000cc9
 8002eec:	20000c9d 	.word	0x20000c9d
 8002ef0:	20000cbe 	.word	0x20000cbe
 8002ef4:	0800e1a4 	.word	0x0800e1a4
 8002ef8:	0800e1b8 	.word	0x0800e1b8
 8002efc:	0800e1c8 	.word	0x0800e1c8
 8002f00:	0800e1dc 	.word	0x0800e1dc
 8002f04:	20000cb6 	.word	0x20000cb6
 8002f08:	20000bcc 	.word	0x20000bcc
 8002f0c:	0800e1ec 	.word	0x0800e1ec
 8002f10:	0800e200 	.word	0x0800e200
 8002f14:	20000ca7 	.word	0x20000ca7
 8002f18:	0800e15c 	.word	0x0800e15c
 8002f1c:	0800e170 	.word	0x0800e170
 8002f20:	0800e180 	.word	0x0800e180
			}
		} else if(kapi2Tip == 2) {
 8002f24:	4b8a      	ldr	r3, [pc, #552]	; (8003150 <menu+0x182c>)
 8002f26:	781b      	ldrb	r3, [r3, #0]
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d104      	bne.n	8002f36 <menu+0x1612>
			lcd_print(2, 1, "Pizzato        ");
 8002f2c:	4a89      	ldr	r2, [pc, #548]	; (8003154 <menu+0x1830>)
 8002f2e:	2101      	movs	r1, #1
 8002f30:	2002      	movs	r0, #2
 8002f32:	f7fd fc41 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f36:	2102      	movs	r1, #2
 8002f38:	4887      	ldr	r0, [pc, #540]	; (8003158 <menu+0x1834>)
 8002f3a:	f007 f871 	bl	800a020 <HAL_GPIO_ReadPin>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d115      	bne.n	8002f70 <menu+0x164c>
 8002f44:	4b85      	ldr	r3, [pc, #532]	; (800315c <menu+0x1838>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	f083 0301 	eor.w	r3, r3, #1
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00e      	beq.n	8002f70 <menu+0x164c>
			kapi2Tip = kapi2Tip + 1;
 8002f52:	4b7f      	ldr	r3, [pc, #508]	; (8003150 <menu+0x182c>)
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	3301      	adds	r3, #1
 8002f58:	b2da      	uxtb	r2, r3
 8002f5a:	4b7d      	ldr	r3, [pc, #500]	; (8003150 <menu+0x182c>)
 8002f5c:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8002f5e:	4b7c      	ldr	r3, [pc, #496]	; (8003150 <menu+0x182c>)
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d902      	bls.n	8002f6c <menu+0x1648>
				kapi2Tip = 0;
 8002f66:	4b7a      	ldr	r3, [pc, #488]	; (8003150 <menu+0x182c>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f6c:	f003 fa78 	bl	8006460 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f70:	2104      	movs	r1, #4
 8002f72:	4879      	ldr	r0, [pc, #484]	; (8003158 <menu+0x1834>)
 8002f74:	f007 f854 	bl	800a020 <HAL_GPIO_ReadPin>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d115      	bne.n	8002faa <menu+0x1686>
 8002f7e:	4b77      	ldr	r3, [pc, #476]	; (800315c <menu+0x1838>)
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	f083 0301 	eor.w	r3, r3, #1
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d00e      	beq.n	8002faa <menu+0x1686>
			kapi2Tip = kapi2Tip - 1;
 8002f8c:	4b70      	ldr	r3, [pc, #448]	; (8003150 <menu+0x182c>)
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	3b01      	subs	r3, #1
 8002f92:	b2da      	uxtb	r2, r3
 8002f94:	4b6e      	ldr	r3, [pc, #440]	; (8003150 <menu+0x182c>)
 8002f96:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002f98:	4b6d      	ldr	r3, [pc, #436]	; (8003150 <menu+0x182c>)
 8002f9a:	781b      	ldrb	r3, [r3, #0]
 8002f9c:	2b03      	cmp	r3, #3
 8002f9e:	d902      	bls.n	8002fa6 <menu+0x1682>
		   		kapi2Tip = 2;
 8002fa0:	4b6b      	ldr	r3, [pc, #428]	; (8003150 <menu+0x182c>)
 8002fa2:	2202      	movs	r2, #2
 8002fa4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002fa6:	f003 fa5b 	bl	8006460 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002faa:	2108      	movs	r1, #8
 8002fac:	486a      	ldr	r0, [pc, #424]	; (8003158 <menu+0x1834>)
 8002fae:	f007 f837 	bl	800a020 <HAL_GPIO_ReadPin>
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d10d      	bne.n	8002fd4 <menu+0x16b0>
 8002fb8:	4b68      	ldr	r3, [pc, #416]	; (800315c <menu+0x1838>)
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	f083 0301 	eor.w	r3, r3, #1
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d006      	beq.n	8002fd4 <menu+0x16b0>
			eepromData[10] = kapi2Tip;
 8002fc6:	4b62      	ldr	r3, [pc, #392]	; (8003150 <menu+0x182c>)
 8002fc8:	781a      	ldrb	r2, [r3, #0]
 8002fca:	4b65      	ldr	r3, [pc, #404]	; (8003160 <menu+0x183c>)
 8002fcc:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8002fce:	4b65      	ldr	r3, [pc, #404]	; (8003164 <menu+0x1840>)
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002fd4:	4b64      	ldr	r3, [pc, #400]	; (8003168 <menu+0x1844>)
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	2b0c      	cmp	r3, #12
 8002fda:	d17f      	bne.n	80030dc <menu+0x17b8>
		if(dilSecim == 0) {
 8002fdc:	4b63      	ldr	r3, [pc, #396]	; (800316c <menu+0x1848>)
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d10a      	bne.n	8002ffa <menu+0x16d6>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8002fe4:	4a62      	ldr	r2, [pc, #392]	; (8003170 <menu+0x184c>)
 8002fe6:	2101      	movs	r1, #1
 8002fe8:	2001      	movs	r0, #1
 8002fea:	f7fd fbe5 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002fee:	4a61      	ldr	r2, [pc, #388]	; (8003174 <menu+0x1850>)
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	2002      	movs	r0, #2
 8002ff4:	f7fd fbe0 	bl	80007b8 <lcd_print>
 8002ff8:	e00d      	b.n	8003016 <menu+0x16f2>
		} else if(dilSecim == 1) {
 8002ffa:	4b5c      	ldr	r3, [pc, #368]	; (800316c <menu+0x1848>)
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d109      	bne.n	8003016 <menu+0x16f2>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8003002:	4a5d      	ldr	r2, [pc, #372]	; (8003178 <menu+0x1854>)
 8003004:	2101      	movs	r1, #1
 8003006:	2001      	movs	r0, #1
 8003008:	f7fd fbd6 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 800300c:	4a5b      	ldr	r2, [pc, #364]	; (800317c <menu+0x1858>)
 800300e:	2101      	movs	r1, #1
 8003010:	2002      	movs	r0, #2
 8003012:	f7fd fbd1 	bl	80007b8 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8003016:	4b5a      	ldr	r3, [pc, #360]	; (8003180 <menu+0x185c>)
 8003018:	781b      	ldrb	r3, [r3, #0]
 800301a:	220a      	movs	r2, #10
 800301c:	4959      	ldr	r1, [pc, #356]	; (8003184 <menu+0x1860>)
 800301e:	4618      	mov	r0, r3
 8003020:	f00a f82a 	bl	800d078 <itoa>
		lcd_print(2,16,snum);
 8003024:	4a57      	ldr	r2, [pc, #348]	; (8003184 <menu+0x1860>)
 8003026:	2110      	movs	r1, #16
 8003028:	2002      	movs	r0, #2
 800302a:	f7fd fbc5 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 800302e:	2102      	movs	r1, #2
 8003030:	4849      	ldr	r0, [pc, #292]	; (8003158 <menu+0x1834>)
 8003032:	f006 fff5 	bl	800a020 <HAL_GPIO_ReadPin>
 8003036:	4603      	mov	r3, r0
 8003038:	2b01      	cmp	r3, #1
 800303a:	d119      	bne.n	8003070 <menu+0x174c>
 800303c:	4b47      	ldr	r3, [pc, #284]	; (800315c <menu+0x1838>)
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	f083 0301 	eor.w	r3, r3, #1
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d012      	beq.n	8003070 <menu+0x174c>
 800304a:	4b41      	ldr	r3, [pc, #260]	; (8003150 <menu+0x182c>)
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10e      	bne.n	8003070 <menu+0x174c>
			kapi2AcSure = kapi2AcSure + 1;
 8003052:	4b4b      	ldr	r3, [pc, #300]	; (8003180 <menu+0x185c>)
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	3301      	adds	r3, #1
 8003058:	b2da      	uxtb	r2, r3
 800305a:	4b49      	ldr	r3, [pc, #292]	; (8003180 <menu+0x185c>)
 800305c:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 800305e:	4b48      	ldr	r3, [pc, #288]	; (8003180 <menu+0x185c>)
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	2b05      	cmp	r3, #5
 8003064:	d902      	bls.n	800306c <menu+0x1748>
				kapi2AcSure = 0;
 8003066:	4b46      	ldr	r3, [pc, #280]	; (8003180 <menu+0x185c>)
 8003068:	2200      	movs	r2, #0
 800306a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800306c:	f003 f9f8 	bl	8006460 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8003070:	2104      	movs	r1, #4
 8003072:	4839      	ldr	r0, [pc, #228]	; (8003158 <menu+0x1834>)
 8003074:	f006 ffd4 	bl	800a020 <HAL_GPIO_ReadPin>
 8003078:	4603      	mov	r3, r0
 800307a:	2b01      	cmp	r3, #1
 800307c:	d119      	bne.n	80030b2 <menu+0x178e>
 800307e:	4b37      	ldr	r3, [pc, #220]	; (800315c <menu+0x1838>)
 8003080:	781b      	ldrb	r3, [r3, #0]
 8003082:	f083 0301 	eor.w	r3, r3, #1
 8003086:	b2db      	uxtb	r3, r3
 8003088:	2b00      	cmp	r3, #0
 800308a:	d012      	beq.n	80030b2 <menu+0x178e>
 800308c:	4b30      	ldr	r3, [pc, #192]	; (8003150 <menu+0x182c>)
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d10e      	bne.n	80030b2 <menu+0x178e>
			kapi2AcSure = kapi2AcSure - 1;
 8003094:	4b3a      	ldr	r3, [pc, #232]	; (8003180 <menu+0x185c>)
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	3b01      	subs	r3, #1
 800309a:	b2da      	uxtb	r2, r3
 800309c:	4b38      	ldr	r3, [pc, #224]	; (8003180 <menu+0x185c>)
 800309e:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 80030a0:	4b37      	ldr	r3, [pc, #220]	; (8003180 <menu+0x185c>)
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	2b06      	cmp	r3, #6
 80030a6:	d902      	bls.n	80030ae <menu+0x178a>
		   		kapi2AcSure = 5;
 80030a8:	4b35      	ldr	r3, [pc, #212]	; (8003180 <menu+0x185c>)
 80030aa:	2205      	movs	r2, #5
 80030ac:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80030ae:	f003 f9d7 	bl	8006460 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80030b2:	2108      	movs	r1, #8
 80030b4:	4828      	ldr	r0, [pc, #160]	; (8003158 <menu+0x1834>)
 80030b6:	f006 ffb3 	bl	800a020 <HAL_GPIO_ReadPin>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d10d      	bne.n	80030dc <menu+0x17b8>
 80030c0:	4b26      	ldr	r3, [pc, #152]	; (800315c <menu+0x1838>)
 80030c2:	781b      	ldrb	r3, [r3, #0]
 80030c4:	f083 0301 	eor.w	r3, r3, #1
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d006      	beq.n	80030dc <menu+0x17b8>
			eepromData[11] = kapi2AcSure;
 80030ce:	4b2c      	ldr	r3, [pc, #176]	; (8003180 <menu+0x185c>)
 80030d0:	781a      	ldrb	r2, [r3, #0]
 80030d2:	4b23      	ldr	r3, [pc, #140]	; (8003160 <menu+0x183c>)
 80030d4:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 80030d6:	4b23      	ldr	r3, [pc, #140]	; (8003164 <menu+0x1840>)
 80030d8:	2201      	movs	r2, #1
 80030da:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 80030dc:	4b22      	ldr	r3, [pc, #136]	; (8003168 <menu+0x1844>)
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	2b0d      	cmp	r3, #13
 80030e2:	f040 80b5 	bne.w	8003250 <menu+0x192c>
		if(dilSecim == 0) {
 80030e6:	4b21      	ldr	r3, [pc, #132]	; (800316c <menu+0x1848>)
 80030e8:	781b      	ldrb	r3, [r3, #0]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d105      	bne.n	80030fa <menu+0x17d6>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 80030ee:	4a26      	ldr	r2, [pc, #152]	; (8003188 <menu+0x1864>)
 80030f0:	2101      	movs	r1, #1
 80030f2:	2001      	movs	r0, #1
 80030f4:	f7fd fb60 	bl	80007b8 <lcd_print>
 80030f8:	e008      	b.n	800310c <menu+0x17e8>
		} else if(dilSecim == 1){
 80030fa:	4b1c      	ldr	r3, [pc, #112]	; (800316c <menu+0x1848>)
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d104      	bne.n	800310c <menu+0x17e8>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8003102:	4a22      	ldr	r2, [pc, #136]	; (800318c <menu+0x1868>)
 8003104:	2101      	movs	r1, #1
 8003106:	2001      	movs	r0, #1
 8003108:	f7fd fb56 	bl	80007b8 <lcd_print>
		}

		if(kapitablaTip == 0) {
 800310c:	4b20      	ldr	r3, [pc, #128]	; (8003190 <menu+0x186c>)
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d105      	bne.n	8003120 <menu+0x17fc>
			lcd_print(2, 1, "Prudhome        ");
 8003114:	4a1f      	ldr	r2, [pc, #124]	; (8003194 <menu+0x1870>)
 8003116:	2101      	movs	r1, #1
 8003118:	2002      	movs	r0, #2
 800311a:	f7fd fb4d 	bl	80007b8 <lcd_print>
 800311e:	e048      	b.n	80031b2 <menu+0x188e>
		} else if(kapitablaTip == 1) {
 8003120:	4b1b      	ldr	r3, [pc, #108]	; (8003190 <menu+0x186c>)
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d13b      	bne.n	80031a0 <menu+0x187c>
			if(dilSecim == 0) {
 8003128:	4b10      	ldr	r3, [pc, #64]	; (800316c <menu+0x1848>)
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d105      	bne.n	800313c <menu+0x1818>
				lcd_print(2, 1, "Buton kontrollu");
 8003130:	4a19      	ldr	r2, [pc, #100]	; (8003198 <menu+0x1874>)
 8003132:	2101      	movs	r1, #1
 8003134:	2002      	movs	r0, #2
 8003136:	f7fd fb3f 	bl	80007b8 <lcd_print>
 800313a:	e03a      	b.n	80031b2 <menu+0x188e>
			} else if(dilSecim == 1) {
 800313c:	4b0b      	ldr	r3, [pc, #44]	; (800316c <menu+0x1848>)
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d136      	bne.n	80031b2 <menu+0x188e>
				lcd_print(2, 1, "Button cntrolled");
 8003144:	4a15      	ldr	r2, [pc, #84]	; (800319c <menu+0x1878>)
 8003146:	2101      	movs	r1, #1
 8003148:	2002      	movs	r0, #2
 800314a:	f7fd fb35 	bl	80007b8 <lcd_print>
 800314e:	e030      	b.n	80031b2 <menu+0x188e>
 8003150:	20000ca7 	.word	0x20000ca7
 8003154:	0800e194 	.word	0x0800e194
 8003158:	40010800 	.word	0x40010800
 800315c:	20000ccc 	.word	0x20000ccc
 8003160:	20000b38 	.word	0x20000b38
 8003164:	20000cc9 	.word	0x20000cc9
 8003168:	20000c9d 	.word	0x20000c9d
 800316c:	20000cbe 	.word	0x20000cbe
 8003170:	0800e214 	.word	0x0800e214
 8003174:	0800e1b8 	.word	0x0800e1b8
 8003178:	0800e228 	.word	0x0800e228
 800317c:	0800e1dc 	.word	0x0800e1dc
 8003180:	20000cb7 	.word	0x20000cb7
 8003184:	20000bcc 	.word	0x20000bcc
 8003188:	0800e23c 	.word	0x0800e23c
 800318c:	0800e250 	.word	0x0800e250
 8003190:	20000ca8 	.word	0x20000ca8
 8003194:	0800e15c 	.word	0x0800e15c
 8003198:	0800e170 	.word	0x0800e170
 800319c:	0800e180 	.word	0x0800e180
			}
		} else if(kapitablaTip == 2) {
 80031a0:	4b5b      	ldr	r3, [pc, #364]	; (8003310 <menu+0x19ec>)
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d104      	bne.n	80031b2 <menu+0x188e>
			lcd_print(2, 1, "Pizzato        ");
 80031a8:	4a5a      	ldr	r2, [pc, #360]	; (8003314 <menu+0x19f0>)
 80031aa:	2101      	movs	r1, #1
 80031ac:	2002      	movs	r0, #2
 80031ae:	f7fd fb03 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80031b2:	2102      	movs	r1, #2
 80031b4:	4858      	ldr	r0, [pc, #352]	; (8003318 <menu+0x19f4>)
 80031b6:	f006 ff33 	bl	800a020 <HAL_GPIO_ReadPin>
 80031ba:	4603      	mov	r3, r0
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d115      	bne.n	80031ec <menu+0x18c8>
 80031c0:	4b56      	ldr	r3, [pc, #344]	; (800331c <menu+0x19f8>)
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	f083 0301 	eor.w	r3, r3, #1
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00e      	beq.n	80031ec <menu+0x18c8>
			kapitablaTip = kapitablaTip + 1;
 80031ce:	4b50      	ldr	r3, [pc, #320]	; (8003310 <menu+0x19ec>)
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	3301      	adds	r3, #1
 80031d4:	b2da      	uxtb	r2, r3
 80031d6:	4b4e      	ldr	r3, [pc, #312]	; (8003310 <menu+0x19ec>)
 80031d8:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 80031da:	4b4d      	ldr	r3, [pc, #308]	; (8003310 <menu+0x19ec>)
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	2b02      	cmp	r3, #2
 80031e0:	d902      	bls.n	80031e8 <menu+0x18c4>
				kapitablaTip = 0;
 80031e2:	4b4b      	ldr	r3, [pc, #300]	; (8003310 <menu+0x19ec>)
 80031e4:	2200      	movs	r2, #0
 80031e6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80031e8:	f003 f93a 	bl	8006460 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80031ec:	2104      	movs	r1, #4
 80031ee:	484a      	ldr	r0, [pc, #296]	; (8003318 <menu+0x19f4>)
 80031f0:	f006 ff16 	bl	800a020 <HAL_GPIO_ReadPin>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d115      	bne.n	8003226 <menu+0x1902>
 80031fa:	4b48      	ldr	r3, [pc, #288]	; (800331c <menu+0x19f8>)
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	f083 0301 	eor.w	r3, r3, #1
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b00      	cmp	r3, #0
 8003206:	d00e      	beq.n	8003226 <menu+0x1902>
			kapitablaTip = kapitablaTip - 1;
 8003208:	4b41      	ldr	r3, [pc, #260]	; (8003310 <menu+0x19ec>)
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	3b01      	subs	r3, #1
 800320e:	b2da      	uxtb	r2, r3
 8003210:	4b3f      	ldr	r3, [pc, #252]	; (8003310 <menu+0x19ec>)
 8003212:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8003214:	4b3e      	ldr	r3, [pc, #248]	; (8003310 <menu+0x19ec>)
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	2b03      	cmp	r3, #3
 800321a:	d902      	bls.n	8003222 <menu+0x18fe>
		   		kapitablaTip = 2;
 800321c:	4b3c      	ldr	r3, [pc, #240]	; (8003310 <menu+0x19ec>)
 800321e:	2202      	movs	r2, #2
 8003220:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003222:	f003 f91d 	bl	8006460 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003226:	2108      	movs	r1, #8
 8003228:	483b      	ldr	r0, [pc, #236]	; (8003318 <menu+0x19f4>)
 800322a:	f006 fef9 	bl	800a020 <HAL_GPIO_ReadPin>
 800322e:	4603      	mov	r3, r0
 8003230:	2b01      	cmp	r3, #1
 8003232:	d10d      	bne.n	8003250 <menu+0x192c>
 8003234:	4b39      	ldr	r3, [pc, #228]	; (800331c <menu+0x19f8>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	f083 0301 	eor.w	r3, r3, #1
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d006      	beq.n	8003250 <menu+0x192c>
			eepromData[12] = kapitablaTip;
 8003242:	4b33      	ldr	r3, [pc, #204]	; (8003310 <menu+0x19ec>)
 8003244:	781a      	ldrb	r2, [r3, #0]
 8003246:	4b36      	ldr	r3, [pc, #216]	; (8003320 <menu+0x19fc>)
 8003248:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 800324a:	4b36      	ldr	r3, [pc, #216]	; (8003324 <menu+0x1a00>)
 800324c:	2201      	movs	r2, #1
 800324e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8003250:	4b35      	ldr	r3, [pc, #212]	; (8003328 <menu+0x1a04>)
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	2b0e      	cmp	r3, #14
 8003256:	f040 80f2 	bne.w	800343e <menu+0x1b1a>
		if(dilSecim == 0) {
 800325a:	4b34      	ldr	r3, [pc, #208]	; (800332c <menu+0x1a08>)
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d105      	bne.n	800326e <menu+0x194a>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8003262:	4a33      	ldr	r2, [pc, #204]	; (8003330 <menu+0x1a0c>)
 8003264:	2101      	movs	r1, #1
 8003266:	2001      	movs	r0, #1
 8003268:	f7fd faa6 	bl	80007b8 <lcd_print>
 800326c:	e008      	b.n	8003280 <menu+0x195c>
		} else if(dilSecim == 1) {
 800326e:	4b2f      	ldr	r3, [pc, #188]	; (800332c <menu+0x1a08>)
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d104      	bne.n	8003280 <menu+0x195c>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8003276:	4a2f      	ldr	r2, [pc, #188]	; (8003334 <menu+0x1a10>)
 8003278:	2101      	movs	r1, #1
 800327a:	2001      	movs	r0, #1
 800327c:	f7fd fa9c 	bl	80007b8 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8003280:	4b2d      	ldr	r3, [pc, #180]	; (8003338 <menu+0x1a14>)
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d113      	bne.n	80032b0 <menu+0x198c>
			if(dilSecim == 0){
 8003288:	4b28      	ldr	r3, [pc, #160]	; (800332c <menu+0x1a08>)
 800328a:	781b      	ldrb	r3, [r3, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d105      	bne.n	800329c <menu+0x1978>
				lcd_print(2, 1, "1. Katta ac    ");
 8003290:	4a2a      	ldr	r2, [pc, #168]	; (800333c <menu+0x1a18>)
 8003292:	2101      	movs	r1, #1
 8003294:	2002      	movs	r0, #2
 8003296:	f7fd fa8f 	bl	80007b8 <lcd_print>
 800329a:	e071      	b.n	8003380 <menu+0x1a5c>
			} else if(dilSecim == 1) {
 800329c:	4b23      	ldr	r3, [pc, #140]	; (800332c <menu+0x1a08>)
 800329e:	781b      	ldrb	r3, [r3, #0]
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d16d      	bne.n	8003380 <menu+0x1a5c>
				lcd_print(2, 1, "1. Floor open  ");
 80032a4:	4a26      	ldr	r2, [pc, #152]	; (8003340 <menu+0x1a1c>)
 80032a6:	2101      	movs	r1, #1
 80032a8:	2002      	movs	r0, #2
 80032aa:	f7fd fa85 	bl	80007b8 <lcd_print>
 80032ae:	e067      	b.n	8003380 <menu+0x1a5c>
			}
		} else if(kapiTablaAcKonum == 1) {
 80032b0:	4b21      	ldr	r3, [pc, #132]	; (8003338 <menu+0x1a14>)
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d112      	bne.n	80032de <menu+0x19ba>
			if(dilSecim == 0){
 80032b8:	4b1c      	ldr	r3, [pc, #112]	; (800332c <menu+0x1a08>)
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d104      	bne.n	80032ca <menu+0x19a6>
				lcd_print(2, 1, "2. Katta ac    ");
 80032c0:	4a20      	ldr	r2, [pc, #128]	; (8003344 <menu+0x1a20>)
 80032c2:	2101      	movs	r1, #1
 80032c4:	2002      	movs	r0, #2
 80032c6:	f7fd fa77 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1){
 80032ca:	4b18      	ldr	r3, [pc, #96]	; (800332c <menu+0x1a08>)
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d156      	bne.n	8003380 <menu+0x1a5c>
				lcd_print(2, 1, "2. Floor open  ");
 80032d2:	4a1d      	ldr	r2, [pc, #116]	; (8003348 <menu+0x1a24>)
 80032d4:	2101      	movs	r1, #1
 80032d6:	2002      	movs	r0, #2
 80032d8:	f7fd fa6e 	bl	80007b8 <lcd_print>
 80032dc:	e050      	b.n	8003380 <menu+0x1a5c>
			}
		} else if(kapiTablaAcKonum == 2) {
 80032de:	4b16      	ldr	r3, [pc, #88]	; (8003338 <menu+0x1a14>)
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d136      	bne.n	8003354 <menu+0x1a30>
			if(dilSecim == 0){
 80032e6:	4b11      	ldr	r3, [pc, #68]	; (800332c <menu+0x1a08>)
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d105      	bne.n	80032fa <menu+0x19d6>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 80032ee:	4a17      	ldr	r2, [pc, #92]	; (800334c <menu+0x1a28>)
 80032f0:	2101      	movs	r1, #1
 80032f2:	2002      	movs	r0, #2
 80032f4:	f7fd fa60 	bl	80007b8 <lcd_print>
 80032f8:	e042      	b.n	8003380 <menu+0x1a5c>
			} else if(dilSecim == 1) {
 80032fa:	4b0c      	ldr	r3, [pc, #48]	; (800332c <menu+0x1a08>)
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d13e      	bne.n	8003380 <menu+0x1a5c>
				lcd_print(2, 1, "1.+2. Floor open");
 8003302:	4a13      	ldr	r2, [pc, #76]	; (8003350 <menu+0x1a2c>)
 8003304:	2101      	movs	r1, #1
 8003306:	2002      	movs	r0, #2
 8003308:	f7fd fa56 	bl	80007b8 <lcd_print>
 800330c:	e038      	b.n	8003380 <menu+0x1a5c>
 800330e:	bf00      	nop
 8003310:	20000ca8 	.word	0x20000ca8
 8003314:	0800e194 	.word	0x0800e194
 8003318:	40010800 	.word	0x40010800
 800331c:	20000ccc 	.word	0x20000ccc
 8003320:	20000b38 	.word	0x20000b38
 8003324:	20000cc9 	.word	0x20000cc9
 8003328:	20000c9d 	.word	0x20000c9d
 800332c:	20000cbe 	.word	0x20000cbe
 8003330:	0800e264 	.word	0x0800e264
 8003334:	0800e278 	.word	0x0800e278
 8003338:	20000caa 	.word	0x20000caa
 800333c:	0800e28c 	.word	0x0800e28c
 8003340:	0800e29c 	.word	0x0800e29c
 8003344:	0800e2ac 	.word	0x0800e2ac
 8003348:	0800e2bc 	.word	0x0800e2bc
 800334c:	0800e2cc 	.word	0x0800e2cc
 8003350:	0800e2e0 	.word	0x0800e2e0
			}
		} else if(kapiTablaAcKonum == 3) {
 8003354:	4b9b      	ldr	r3, [pc, #620]	; (80035c4 <menu+0x1ca0>)
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	2b03      	cmp	r3, #3
 800335a:	d111      	bne.n	8003380 <menu+0x1a5c>
			if(dilSecim == 0) {
 800335c:	4b9a      	ldr	r3, [pc, #616]	; (80035c8 <menu+0x1ca4>)
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d104      	bne.n	800336e <menu+0x1a4a>
				lcd_print(2, 1, "Pasif           ");
 8003364:	4a99      	ldr	r2, [pc, #612]	; (80035cc <menu+0x1ca8>)
 8003366:	2101      	movs	r1, #1
 8003368:	2002      	movs	r0, #2
 800336a:	f7fd fa25 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1) {
 800336e:	4b96      	ldr	r3, [pc, #600]	; (80035c8 <menu+0x1ca4>)
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d104      	bne.n	8003380 <menu+0x1a5c>
				lcd_print(2, 1, "Passive         ");
 8003376:	4a96      	ldr	r2, [pc, #600]	; (80035d0 <menu+0x1cac>)
 8003378:	2101      	movs	r1, #1
 800337a:	2002      	movs	r0, #2
 800337c:	f7fd fa1c 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003380:	2102      	movs	r1, #2
 8003382:	4894      	ldr	r0, [pc, #592]	; (80035d4 <menu+0x1cb0>)
 8003384:	f006 fe4c 	bl	800a020 <HAL_GPIO_ReadPin>
 8003388:	4603      	mov	r3, r0
 800338a:	2b01      	cmp	r3, #1
 800338c:	d115      	bne.n	80033ba <menu+0x1a96>
 800338e:	4b92      	ldr	r3, [pc, #584]	; (80035d8 <menu+0x1cb4>)
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	f083 0301 	eor.w	r3, r3, #1
 8003396:	b2db      	uxtb	r3, r3
 8003398:	2b00      	cmp	r3, #0
 800339a:	d00e      	beq.n	80033ba <menu+0x1a96>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 800339c:	4b89      	ldr	r3, [pc, #548]	; (80035c4 <menu+0x1ca0>)
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	3301      	adds	r3, #1
 80033a2:	b2da      	uxtb	r2, r3
 80033a4:	4b87      	ldr	r3, [pc, #540]	; (80035c4 <menu+0x1ca0>)
 80033a6:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 80033a8:	4b86      	ldr	r3, [pc, #536]	; (80035c4 <menu+0x1ca0>)
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d902      	bls.n	80033b6 <menu+0x1a92>
				kapiTablaAcKonum = 0;
 80033b0:	4b84      	ldr	r3, [pc, #528]	; (80035c4 <menu+0x1ca0>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80033b6:	f003 f853 	bl	8006460 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80033ba:	2104      	movs	r1, #4
 80033bc:	4885      	ldr	r0, [pc, #532]	; (80035d4 <menu+0x1cb0>)
 80033be:	f006 fe2f 	bl	800a020 <HAL_GPIO_ReadPin>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d115      	bne.n	80033f4 <menu+0x1ad0>
 80033c8:	4b83      	ldr	r3, [pc, #524]	; (80035d8 <menu+0x1cb4>)
 80033ca:	781b      	ldrb	r3, [r3, #0]
 80033cc:	f083 0301 	eor.w	r3, r3, #1
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d00e      	beq.n	80033f4 <menu+0x1ad0>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 80033d6:	4b7b      	ldr	r3, [pc, #492]	; (80035c4 <menu+0x1ca0>)
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	3b01      	subs	r3, #1
 80033dc:	b2da      	uxtb	r2, r3
 80033de:	4b79      	ldr	r3, [pc, #484]	; (80035c4 <menu+0x1ca0>)
 80033e0:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 80033e2:	4b78      	ldr	r3, [pc, #480]	; (80035c4 <menu+0x1ca0>)
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	2b03      	cmp	r3, #3
 80033e8:	d902      	bls.n	80033f0 <menu+0x1acc>
		   		kapiTablaAcKonum = 2;
 80033ea:	4b76      	ldr	r3, [pc, #472]	; (80035c4 <menu+0x1ca0>)
 80033ec:	2202      	movs	r2, #2
 80033ee:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80033f0:	f003 f836 	bl	8006460 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80033f4:	2108      	movs	r1, #8
 80033f6:	4877      	ldr	r0, [pc, #476]	; (80035d4 <menu+0x1cb0>)
 80033f8:	f006 fe12 	bl	800a020 <HAL_GPIO_ReadPin>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d11d      	bne.n	800343e <menu+0x1b1a>
 8003402:	4b75      	ldr	r3, [pc, #468]	; (80035d8 <menu+0x1cb4>)
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	f083 0301 	eor.w	r3, r3, #1
 800340a:	b2db      	uxtb	r3, r3
 800340c:	2b00      	cmp	r3, #0
 800340e:	d016      	beq.n	800343e <menu+0x1b1a>
			eepromData[34] = kapiTablaAcKonum;
 8003410:	4b6c      	ldr	r3, [pc, #432]	; (80035c4 <menu+0x1ca0>)
 8003412:	781a      	ldrb	r2, [r3, #0]
 8003414:	4b71      	ldr	r3, [pc, #452]	; (80035dc <menu+0x1cb8>)
 8003416:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 800341a:	4b6a      	ldr	r3, [pc, #424]	; (80035c4 <menu+0x1ca0>)
 800341c:	781b      	ldrb	r3, [r3, #0]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d003      	beq.n	800342a <menu+0x1b06>
 8003422:	4b68      	ldr	r3, [pc, #416]	; (80035c4 <menu+0x1ca0>)
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	2b02      	cmp	r3, #2
 8003428:	d106      	bne.n	8003438 <menu+0x1b14>
				altLimit = 1;
 800342a:	4b6d      	ldr	r3, [pc, #436]	; (80035e0 <menu+0x1cbc>)
 800342c:	2201      	movs	r2, #1
 800342e:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8003430:	4b6b      	ldr	r3, [pc, #428]	; (80035e0 <menu+0x1cbc>)
 8003432:	781a      	ldrb	r2, [r3, #0]
 8003434:	4b69      	ldr	r3, [pc, #420]	; (80035dc <menu+0x1cb8>)
 8003436:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8003438:	4b6a      	ldr	r3, [pc, #424]	; (80035e4 <menu+0x1cc0>)
 800343a:	2201      	movs	r2, #1
 800343c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 800343e:	4b6a      	ldr	r3, [pc, #424]	; (80035e8 <menu+0x1cc4>)
 8003440:	781b      	ldrb	r3, [r3, #0]
 8003442:	2b0f      	cmp	r3, #15
 8003444:	d17f      	bne.n	8003546 <menu+0x1c22>
		if(dilSecim == 0) {
 8003446:	4b60      	ldr	r3, [pc, #384]	; (80035c8 <menu+0x1ca4>)
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10a      	bne.n	8003464 <menu+0x1b40>
			lcd_print(1, 1, "TABLA KP AC SURE");
 800344e:	4a67      	ldr	r2, [pc, #412]	; (80035ec <menu+0x1cc8>)
 8003450:	2101      	movs	r1, #1
 8003452:	2001      	movs	r0, #1
 8003454:	f7fd f9b0 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8003458:	4a65      	ldr	r2, [pc, #404]	; (80035f0 <menu+0x1ccc>)
 800345a:	2101      	movs	r1, #1
 800345c:	2002      	movs	r0, #2
 800345e:	f7fd f9ab 	bl	80007b8 <lcd_print>
 8003462:	e00d      	b.n	8003480 <menu+0x1b5c>
		} else if(dilSecim == 1) {
 8003464:	4b58      	ldr	r3, [pc, #352]	; (80035c8 <menu+0x1ca4>)
 8003466:	781b      	ldrb	r3, [r3, #0]
 8003468:	2b01      	cmp	r3, #1
 800346a:	d109      	bne.n	8003480 <menu+0x1b5c>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 800346c:	4a61      	ldr	r2, [pc, #388]	; (80035f4 <menu+0x1cd0>)
 800346e:	2101      	movs	r1, #1
 8003470:	2001      	movs	r0, #1
 8003472:	f7fd f9a1 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8003476:	4a60      	ldr	r2, [pc, #384]	; (80035f8 <menu+0x1cd4>)
 8003478:	2101      	movs	r1, #1
 800347a:	2002      	movs	r0, #2
 800347c:	f7fd f99c 	bl	80007b8 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8003480:	4b5e      	ldr	r3, [pc, #376]	; (80035fc <menu+0x1cd8>)
 8003482:	781b      	ldrb	r3, [r3, #0]
 8003484:	220a      	movs	r2, #10
 8003486:	495e      	ldr	r1, [pc, #376]	; (8003600 <menu+0x1cdc>)
 8003488:	4618      	mov	r0, r3
 800348a:	f009 fdf5 	bl	800d078 <itoa>
		lcd_print(2,16,snum);
 800348e:	4a5c      	ldr	r2, [pc, #368]	; (8003600 <menu+0x1cdc>)
 8003490:	2110      	movs	r1, #16
 8003492:	2002      	movs	r0, #2
 8003494:	f7fd f990 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8003498:	2102      	movs	r1, #2
 800349a:	484e      	ldr	r0, [pc, #312]	; (80035d4 <menu+0x1cb0>)
 800349c:	f006 fdc0 	bl	800a020 <HAL_GPIO_ReadPin>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d119      	bne.n	80034da <menu+0x1bb6>
 80034a6:	4b4c      	ldr	r3, [pc, #304]	; (80035d8 <menu+0x1cb4>)
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	f083 0301 	eor.w	r3, r3, #1
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d012      	beq.n	80034da <menu+0x1bb6>
 80034b4:	4b53      	ldr	r3, [pc, #332]	; (8003604 <menu+0x1ce0>)
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d10e      	bne.n	80034da <menu+0x1bb6>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 80034bc:	4b4f      	ldr	r3, [pc, #316]	; (80035fc <menu+0x1cd8>)
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	3301      	adds	r3, #1
 80034c2:	b2da      	uxtb	r2, r3
 80034c4:	4b4d      	ldr	r3, [pc, #308]	; (80035fc <menu+0x1cd8>)
 80034c6:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 80034c8:	4b4c      	ldr	r3, [pc, #304]	; (80035fc <menu+0x1cd8>)
 80034ca:	781b      	ldrb	r3, [r3, #0]
 80034cc:	2b05      	cmp	r3, #5
 80034ce:	d902      	bls.n	80034d6 <menu+0x1bb2>
				kapiTablaAcSure = 0;
 80034d0:	4b4a      	ldr	r3, [pc, #296]	; (80035fc <menu+0x1cd8>)
 80034d2:	2200      	movs	r2, #0
 80034d4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80034d6:	f002 ffc3 	bl	8006460 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 80034da:	2104      	movs	r1, #4
 80034dc:	483d      	ldr	r0, [pc, #244]	; (80035d4 <menu+0x1cb0>)
 80034de:	f006 fd9f 	bl	800a020 <HAL_GPIO_ReadPin>
 80034e2:	4603      	mov	r3, r0
 80034e4:	2b01      	cmp	r3, #1
 80034e6:	d119      	bne.n	800351c <menu+0x1bf8>
 80034e8:	4b3b      	ldr	r3, [pc, #236]	; (80035d8 <menu+0x1cb4>)
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	f083 0301 	eor.w	r3, r3, #1
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d012      	beq.n	800351c <menu+0x1bf8>
 80034f6:	4b43      	ldr	r3, [pc, #268]	; (8003604 <menu+0x1ce0>)
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d10e      	bne.n	800351c <menu+0x1bf8>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 80034fe:	4b3f      	ldr	r3, [pc, #252]	; (80035fc <menu+0x1cd8>)
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	3b01      	subs	r3, #1
 8003504:	b2da      	uxtb	r2, r3
 8003506:	4b3d      	ldr	r3, [pc, #244]	; (80035fc <menu+0x1cd8>)
 8003508:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 800350a:	4b3c      	ldr	r3, [pc, #240]	; (80035fc <menu+0x1cd8>)
 800350c:	781b      	ldrb	r3, [r3, #0]
 800350e:	2b06      	cmp	r3, #6
 8003510:	d902      	bls.n	8003518 <menu+0x1bf4>
		   		kapiTablaAcSure = 5;
 8003512:	4b3a      	ldr	r3, [pc, #232]	; (80035fc <menu+0x1cd8>)
 8003514:	2205      	movs	r2, #5
 8003516:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8003518:	f002 ffa2 	bl	8006460 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800351c:	2108      	movs	r1, #8
 800351e:	482d      	ldr	r0, [pc, #180]	; (80035d4 <menu+0x1cb0>)
 8003520:	f006 fd7e 	bl	800a020 <HAL_GPIO_ReadPin>
 8003524:	4603      	mov	r3, r0
 8003526:	2b01      	cmp	r3, #1
 8003528:	d10d      	bne.n	8003546 <menu+0x1c22>
 800352a:	4b2b      	ldr	r3, [pc, #172]	; (80035d8 <menu+0x1cb4>)
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	f083 0301 	eor.w	r3, r3, #1
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b00      	cmp	r3, #0
 8003536:	d006      	beq.n	8003546 <menu+0x1c22>
			eepromData[13] = kapiTablaAcSure;
 8003538:	4b30      	ldr	r3, [pc, #192]	; (80035fc <menu+0x1cd8>)
 800353a:	781a      	ldrb	r2, [r3, #0]
 800353c:	4b27      	ldr	r3, [pc, #156]	; (80035dc <menu+0x1cb8>)
 800353e:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8003540:	4b28      	ldr	r3, [pc, #160]	; (80035e4 <menu+0x1cc0>)
 8003542:	2201      	movs	r2, #1
 8003544:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 8003546:	4b28      	ldr	r3, [pc, #160]	; (80035e8 <menu+0x1cc4>)
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	2b10      	cmp	r3, #16
 800354c:	f040 80bc 	bne.w	80036c8 <menu+0x1da4>
		if(dilSecim == 0) {
 8003550:	4b1d      	ldr	r3, [pc, #116]	; (80035c8 <menu+0x1ca4>)
 8003552:	781b      	ldrb	r3, [r3, #0]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d105      	bne.n	8003564 <menu+0x1c40>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 8003558:	4a2b      	ldr	r2, [pc, #172]	; (8003608 <menu+0x1ce4>)
 800355a:	2101      	movs	r1, #1
 800355c:	2001      	movs	r0, #1
 800355e:	f7fd f92b 	bl	80007b8 <lcd_print>
 8003562:	e008      	b.n	8003576 <menu+0x1c52>
		} else if(dilSecim == 1) {
 8003564:	4b18      	ldr	r3, [pc, #96]	; (80035c8 <menu+0x1ca4>)
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	2b01      	cmp	r3, #1
 800356a:	d104      	bne.n	8003576 <menu+0x1c52>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 800356c:	4a27      	ldr	r2, [pc, #156]	; (800360c <menu+0x1ce8>)
 800356e:	2101      	movs	r1, #1
 8003570:	2001      	movs	r0, #1
 8003572:	f7fd f921 	bl	80007b8 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 8003576:	4b26      	ldr	r3, [pc, #152]	; (8003610 <menu+0x1cec>)
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d113      	bne.n	80035a6 <menu+0x1c82>
			if(dilSecim == 0) {
 800357e:	4b12      	ldr	r3, [pc, #72]	; (80035c8 <menu+0x1ca4>)
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d105      	bne.n	8003592 <menu+0x1c6e>
				lcd_print(2, 1, "Pasif           ");
 8003586:	4a11      	ldr	r2, [pc, #68]	; (80035cc <menu+0x1ca8>)
 8003588:	2101      	movs	r1, #1
 800358a:	2002      	movs	r0, #2
 800358c:	f7fd f914 	bl	80007b8 <lcd_print>
 8003590:	e04b      	b.n	800362a <menu+0x1d06>
			} else if(dilSecim == 1) {
 8003592:	4b0d      	ldr	r3, [pc, #52]	; (80035c8 <menu+0x1ca4>)
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d147      	bne.n	800362a <menu+0x1d06>
				lcd_print(2, 1, "Passive         ");
 800359a:	4a0d      	ldr	r2, [pc, #52]	; (80035d0 <menu+0x1cac>)
 800359c:	2101      	movs	r1, #1
 800359e:	2002      	movs	r0, #2
 80035a0:	f7fd f90a 	bl	80007b8 <lcd_print>
 80035a4:	e041      	b.n	800362a <menu+0x1d06>
			}
		} else if(yukariYavasLimit == 1) {
 80035a6:	4b1a      	ldr	r3, [pc, #104]	; (8003610 <menu+0x1cec>)
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d13d      	bne.n	800362a <menu+0x1d06>
			if(dilSecim == 0) {
 80035ae:	4b06      	ldr	r3, [pc, #24]	; (80035c8 <menu+0x1ca4>)
 80035b0:	781b      	ldrb	r3, [r3, #0]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d130      	bne.n	8003618 <menu+0x1cf4>
				lcd_print(2, 1, "Aktif           ");
 80035b6:	4a17      	ldr	r2, [pc, #92]	; (8003614 <menu+0x1cf0>)
 80035b8:	2101      	movs	r1, #1
 80035ba:	2002      	movs	r0, #2
 80035bc:	f7fd f8fc 	bl	80007b8 <lcd_print>
 80035c0:	e033      	b.n	800362a <menu+0x1d06>
 80035c2:	bf00      	nop
 80035c4:	20000caa 	.word	0x20000caa
 80035c8:	20000cbe 	.word	0x20000cbe
 80035cc:	0800df54 	.word	0x0800df54
 80035d0:	0800df68 	.word	0x0800df68
 80035d4:	40010800 	.word	0x40010800
 80035d8:	20000ccc 	.word	0x20000ccc
 80035dc:	20000b38 	.word	0x20000b38
 80035e0:	20000ca3 	.word	0x20000ca3
 80035e4:	20000cc9 	.word	0x20000cc9
 80035e8:	20000c9d 	.word	0x20000c9d
 80035ec:	0800e2f4 	.word	0x0800e2f4
 80035f0:	0800e1b8 	.word	0x0800e1b8
 80035f4:	0800e308 	.word	0x0800e308
 80035f8:	0800e1dc 	.word	0x0800e1dc
 80035fc:	20000cb8 	.word	0x20000cb8
 8003600:	20000bcc 	.word	0x20000bcc
 8003604:	20000ca8 	.word	0x20000ca8
 8003608:	0800e31c 	.word	0x0800e31c
 800360c:	0800e330 	.word	0x0800e330
 8003610:	20000cab 	.word	0x20000cab
 8003614:	0800dfb4 	.word	0x0800dfb4
			} else if(dilSecim == 1) {
 8003618:	4b99      	ldr	r3, [pc, #612]	; (8003880 <menu+0x1f5c>)
 800361a:	781b      	ldrb	r3, [r3, #0]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d104      	bne.n	800362a <menu+0x1d06>
				lcd_print(2, 1, "Active          ");
 8003620:	4a98      	ldr	r2, [pc, #608]	; (8003884 <menu+0x1f60>)
 8003622:	2101      	movs	r1, #1
 8003624:	2002      	movs	r0, #2
 8003626:	f7fd f8c7 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800362a:	2102      	movs	r1, #2
 800362c:	4896      	ldr	r0, [pc, #600]	; (8003888 <menu+0x1f64>)
 800362e:	f006 fcf7 	bl	800a020 <HAL_GPIO_ReadPin>
 8003632:	4603      	mov	r3, r0
 8003634:	2b01      	cmp	r3, #1
 8003636:	d115      	bne.n	8003664 <menu+0x1d40>
 8003638:	4b94      	ldr	r3, [pc, #592]	; (800388c <menu+0x1f68>)
 800363a:	781b      	ldrb	r3, [r3, #0]
 800363c:	f083 0301 	eor.w	r3, r3, #1
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d00e      	beq.n	8003664 <menu+0x1d40>
			yukariYavasLimit = yukariYavasLimit + 1;
 8003646:	4b92      	ldr	r3, [pc, #584]	; (8003890 <menu+0x1f6c>)
 8003648:	781b      	ldrb	r3, [r3, #0]
 800364a:	3301      	adds	r3, #1
 800364c:	b2da      	uxtb	r2, r3
 800364e:	4b90      	ldr	r3, [pc, #576]	; (8003890 <menu+0x1f6c>)
 8003650:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 8003652:	4b8f      	ldr	r3, [pc, #572]	; (8003890 <menu+0x1f6c>)
 8003654:	781b      	ldrb	r3, [r3, #0]
 8003656:	2b01      	cmp	r3, #1
 8003658:	d902      	bls.n	8003660 <menu+0x1d3c>
				yukariYavasLimit = 0;
 800365a:	4b8d      	ldr	r3, [pc, #564]	; (8003890 <menu+0x1f6c>)
 800365c:	2200      	movs	r2, #0
 800365e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003660:	f002 fefe 	bl	8006460 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003664:	2104      	movs	r1, #4
 8003666:	4888      	ldr	r0, [pc, #544]	; (8003888 <menu+0x1f64>)
 8003668:	f006 fcda 	bl	800a020 <HAL_GPIO_ReadPin>
 800366c:	4603      	mov	r3, r0
 800366e:	2b01      	cmp	r3, #1
 8003670:	d115      	bne.n	800369e <menu+0x1d7a>
 8003672:	4b86      	ldr	r3, [pc, #536]	; (800388c <menu+0x1f68>)
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	f083 0301 	eor.w	r3, r3, #1
 800367a:	b2db      	uxtb	r3, r3
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00e      	beq.n	800369e <menu+0x1d7a>
			yukariYavasLimit = yukariYavasLimit - 1;
 8003680:	4b83      	ldr	r3, [pc, #524]	; (8003890 <menu+0x1f6c>)
 8003682:	781b      	ldrb	r3, [r3, #0]
 8003684:	3b01      	subs	r3, #1
 8003686:	b2da      	uxtb	r2, r3
 8003688:	4b81      	ldr	r3, [pc, #516]	; (8003890 <menu+0x1f6c>)
 800368a:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 800368c:	4b80      	ldr	r3, [pc, #512]	; (8003890 <menu+0x1f6c>)
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d002      	beq.n	800369a <menu+0x1d76>
		   		yukariYavasLimit = 1;
 8003694:	4b7e      	ldr	r3, [pc, #504]	; (8003890 <menu+0x1f6c>)
 8003696:	2201      	movs	r2, #1
 8003698:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800369a:	f002 fee1 	bl	8006460 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800369e:	2108      	movs	r1, #8
 80036a0:	4879      	ldr	r0, [pc, #484]	; (8003888 <menu+0x1f64>)
 80036a2:	f006 fcbd 	bl	800a020 <HAL_GPIO_ReadPin>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d10d      	bne.n	80036c8 <menu+0x1da4>
 80036ac:	4b77      	ldr	r3, [pc, #476]	; (800388c <menu+0x1f68>)
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	f083 0301 	eor.w	r3, r3, #1
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d006      	beq.n	80036c8 <menu+0x1da4>
			eepromData[14] = yukariYavasLimit;
 80036ba:	4b75      	ldr	r3, [pc, #468]	; (8003890 <menu+0x1f6c>)
 80036bc:	781a      	ldrb	r2, [r3, #0]
 80036be:	4b75      	ldr	r3, [pc, #468]	; (8003894 <menu+0x1f70>)
 80036c0:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 80036c2:	4b75      	ldr	r3, [pc, #468]	; (8003898 <menu+0x1f74>)
 80036c4:	2201      	movs	r2, #1
 80036c6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 80036c8:	4b74      	ldr	r3, [pc, #464]	; (800389c <menu+0x1f78>)
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	2b11      	cmp	r3, #17
 80036ce:	f040 80c3 	bne.w	8003858 <menu+0x1f34>
		if(dilSecim == 0) {
 80036d2:	4b6b      	ldr	r3, [pc, #428]	; (8003880 <menu+0x1f5c>)
 80036d4:	781b      	ldrb	r3, [r3, #0]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d105      	bne.n	80036e6 <menu+0x1dc2>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 80036da:	4a71      	ldr	r2, [pc, #452]	; (80038a0 <menu+0x1f7c>)
 80036dc:	2101      	movs	r1, #1
 80036de:	2001      	movs	r0, #1
 80036e0:	f7fd f86a 	bl	80007b8 <lcd_print>
 80036e4:	e008      	b.n	80036f8 <menu+0x1dd4>
		} else if(dilSecim == 1) {
 80036e6:	4b66      	ldr	r3, [pc, #408]	; (8003880 <menu+0x1f5c>)
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d104      	bne.n	80036f8 <menu+0x1dd4>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 80036ee:	4a6d      	ldr	r2, [pc, #436]	; (80038a4 <menu+0x1f80>)
 80036f0:	2101      	movs	r1, #1
 80036f2:	2001      	movs	r0, #1
 80036f4:	f7fd f860 	bl	80007b8 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 80036f8:	4b6b      	ldr	r3, [pc, #428]	; (80038a8 <menu+0x1f84>)
 80036fa:	781b      	ldrb	r3, [r3, #0]
 80036fc:	2b02      	cmp	r3, #2
 80036fe:	d113      	bne.n	8003728 <menu+0x1e04>
			if(dilSecim == 0){
 8003700:	4b5f      	ldr	r3, [pc, #380]	; (8003880 <menu+0x1f5c>)
 8003702:	781b      	ldrb	r3, [r3, #0]
 8003704:	2b00      	cmp	r3, #0
 8003706:	d105      	bne.n	8003714 <menu+0x1df0>
				lcd_print(2, 1, "Devirme aktif  ");
 8003708:	4a68      	ldr	r2, [pc, #416]	; (80038ac <menu+0x1f88>)
 800370a:	2101      	movs	r1, #1
 800370c:	2002      	movs	r0, #2
 800370e:	f7fd f853 	bl	80007b8 <lcd_print>
 8003712:	e038      	b.n	8003786 <menu+0x1e62>
			} else if(dilSecim == 1){
 8003714:	4b5a      	ldr	r3, [pc, #360]	; (8003880 <menu+0x1f5c>)
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	2b01      	cmp	r3, #1
 800371a:	d134      	bne.n	8003786 <menu+0x1e62>
				lcd_print(2, 1, "Tipping active ");
 800371c:	4a64      	ldr	r2, [pc, #400]	; (80038b0 <menu+0x1f8c>)
 800371e:	2101      	movs	r1, #1
 8003720:	2002      	movs	r0, #2
 8003722:	f7fd f849 	bl	80007b8 <lcd_print>
 8003726:	e02e      	b.n	8003786 <menu+0x1e62>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003728:	4b5f      	ldr	r3, [pc, #380]	; (80038a8 <menu+0x1f84>)
 800372a:	781b      	ldrb	r3, [r3, #0]
 800372c:	2b01      	cmp	r3, #1
 800372e:	d113      	bne.n	8003758 <menu+0x1e34>
			if(dilSecim == 0){
 8003730:	4b53      	ldr	r3, [pc, #332]	; (8003880 <menu+0x1f5c>)
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d105      	bne.n	8003744 <menu+0x1e20>
				lcd_print(2, 1, "Yuruyus aktif  ");
 8003738:	4a5e      	ldr	r2, [pc, #376]	; (80038b4 <menu+0x1f90>)
 800373a:	2101      	movs	r1, #1
 800373c:	2002      	movs	r0, #2
 800373e:	f7fd f83b 	bl	80007b8 <lcd_print>
 8003742:	e020      	b.n	8003786 <menu+0x1e62>
			} else if(dilSecim == 1) {
 8003744:	4b4e      	ldr	r3, [pc, #312]	; (8003880 <menu+0x1f5c>)
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	2b01      	cmp	r3, #1
 800374a:	d11c      	bne.n	8003786 <menu+0x1e62>
				lcd_print(2, 1, "Drive active   ");
 800374c:	4a5a      	ldr	r2, [pc, #360]	; (80038b8 <menu+0x1f94>)
 800374e:	2101      	movs	r1, #1
 8003750:	2002      	movs	r0, #2
 8003752:	f7fd f831 	bl	80007b8 <lcd_print>
 8003756:	e016      	b.n	8003786 <menu+0x1e62>
			}
		} else if(devirmeYuruyusSecim == 0) {
 8003758:	4b53      	ldr	r3, [pc, #332]	; (80038a8 <menu+0x1f84>)
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d112      	bne.n	8003786 <menu+0x1e62>
			if(dilSecim == 0) {
 8003760:	4b47      	ldr	r3, [pc, #284]	; (8003880 <menu+0x1f5c>)
 8003762:	781b      	ldrb	r3, [r3, #0]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d105      	bne.n	8003774 <menu+0x1e50>
				lcd_print(2, 1, "Pasif           ");
 8003768:	4a54      	ldr	r2, [pc, #336]	; (80038bc <menu+0x1f98>)
 800376a:	2101      	movs	r1, #1
 800376c:	2002      	movs	r0, #2
 800376e:	f7fd f823 	bl	80007b8 <lcd_print>
 8003772:	e008      	b.n	8003786 <menu+0x1e62>
			} else if(dilSecim == 1) {
 8003774:	4b42      	ldr	r3, [pc, #264]	; (8003880 <menu+0x1f5c>)
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d104      	bne.n	8003786 <menu+0x1e62>
				lcd_print(2, 1, "Passive         ");
 800377c:	4a50      	ldr	r2, [pc, #320]	; (80038c0 <menu+0x1f9c>)
 800377e:	2101      	movs	r1, #1
 8003780:	2002      	movs	r0, #2
 8003782:	f7fd f819 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003786:	2102      	movs	r1, #2
 8003788:	483f      	ldr	r0, [pc, #252]	; (8003888 <menu+0x1f64>)
 800378a:	f006 fc49 	bl	800a020 <HAL_GPIO_ReadPin>
 800378e:	4603      	mov	r3, r0
 8003790:	2b01      	cmp	r3, #1
 8003792:	d115      	bne.n	80037c0 <menu+0x1e9c>
 8003794:	4b3d      	ldr	r3, [pc, #244]	; (800388c <menu+0x1f68>)
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	f083 0301 	eor.w	r3, r3, #1
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d00e      	beq.n	80037c0 <menu+0x1e9c>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 80037a2:	4b41      	ldr	r3, [pc, #260]	; (80038a8 <menu+0x1f84>)
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	3301      	adds	r3, #1
 80037a8:	b2da      	uxtb	r2, r3
 80037aa:	4b3f      	ldr	r3, [pc, #252]	; (80038a8 <menu+0x1f84>)
 80037ac:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 80037ae:	4b3e      	ldr	r3, [pc, #248]	; (80038a8 <menu+0x1f84>)
 80037b0:	781b      	ldrb	r3, [r3, #0]
 80037b2:	2b02      	cmp	r3, #2
 80037b4:	d902      	bls.n	80037bc <menu+0x1e98>
				devirmeYuruyusSecim = 0;
 80037b6:	4b3c      	ldr	r3, [pc, #240]	; (80038a8 <menu+0x1f84>)
 80037b8:	2200      	movs	r2, #0
 80037ba:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80037bc:	f002 fe50 	bl	8006460 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80037c0:	2104      	movs	r1, #4
 80037c2:	4831      	ldr	r0, [pc, #196]	; (8003888 <menu+0x1f64>)
 80037c4:	f006 fc2c 	bl	800a020 <HAL_GPIO_ReadPin>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d115      	bne.n	80037fa <menu+0x1ed6>
 80037ce:	4b2f      	ldr	r3, [pc, #188]	; (800388c <menu+0x1f68>)
 80037d0:	781b      	ldrb	r3, [r3, #0]
 80037d2:	f083 0301 	eor.w	r3, r3, #1
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d00e      	beq.n	80037fa <menu+0x1ed6>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 80037dc:	4b32      	ldr	r3, [pc, #200]	; (80038a8 <menu+0x1f84>)
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	3b01      	subs	r3, #1
 80037e2:	b2da      	uxtb	r2, r3
 80037e4:	4b30      	ldr	r3, [pc, #192]	; (80038a8 <menu+0x1f84>)
 80037e6:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 80037e8:	4b2f      	ldr	r3, [pc, #188]	; (80038a8 <menu+0x1f84>)
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	2b03      	cmp	r3, #3
 80037ee:	d902      	bls.n	80037f6 <menu+0x1ed2>
		   		devirmeYuruyusSecim = 2;
 80037f0:	4b2d      	ldr	r3, [pc, #180]	; (80038a8 <menu+0x1f84>)
 80037f2:	2202      	movs	r2, #2
 80037f4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80037f6:	f002 fe33 	bl	8006460 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80037fa:	2108      	movs	r1, #8
 80037fc:	4822      	ldr	r0, [pc, #136]	; (8003888 <menu+0x1f64>)
 80037fe:	f006 fc0f 	bl	800a020 <HAL_GPIO_ReadPin>
 8003802:	4603      	mov	r3, r0
 8003804:	2b01      	cmp	r3, #1
 8003806:	d127      	bne.n	8003858 <menu+0x1f34>
 8003808:	4b20      	ldr	r3, [pc, #128]	; (800388c <menu+0x1f68>)
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	f083 0301 	eor.w	r3, r3, #1
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d020      	beq.n	8003858 <menu+0x1f34>
			eepromData[15] = devirmeYuruyusSecim;
 8003816:	4b24      	ldr	r3, [pc, #144]	; (80038a8 <menu+0x1f84>)
 8003818:	781a      	ldrb	r2, [r3, #0]
 800381a:	4b1e      	ldr	r3, [pc, #120]	; (8003894 <menu+0x1f70>)
 800381c:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 800381e:	4b22      	ldr	r3, [pc, #136]	; (80038a8 <menu+0x1f84>)
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	2b02      	cmp	r3, #2
 8003824:	d003      	beq.n	800382e <menu+0x1f0a>
 8003826:	4b20      	ldr	r3, [pc, #128]	; (80038a8 <menu+0x1f84>)
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d106      	bne.n	800383c <menu+0x1f18>
				calismaSekli = 0;
 800382e:	4b25      	ldr	r3, [pc, #148]	; (80038c4 <menu+0x1fa0>)
 8003830:	2200      	movs	r2, #0
 8003832:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 8003834:	4b23      	ldr	r3, [pc, #140]	; (80038c4 <menu+0x1fa0>)
 8003836:	781a      	ldrb	r2, [r3, #0]
 8003838:	4b16      	ldr	r3, [pc, #88]	; (8003894 <menu+0x1f70>)
 800383a:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 800383c:	4b1a      	ldr	r3, [pc, #104]	; (80038a8 <menu+0x1f84>)
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	2b01      	cmp	r3, #1
 8003842:	d106      	bne.n	8003852 <menu+0x1f2e>
				devirmeSilindirTipi = 1;
 8003844:	4b20      	ldr	r3, [pc, #128]	; (80038c8 <menu+0x1fa4>)
 8003846:	2201      	movs	r2, #1
 8003848:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 800384a:	4b1f      	ldr	r3, [pc, #124]	; (80038c8 <menu+0x1fa4>)
 800384c:	781a      	ldrb	r2, [r3, #0]
 800384e:	4b11      	ldr	r3, [pc, #68]	; (8003894 <menu+0x1f70>)
 8003850:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 8003852:	4b11      	ldr	r3, [pc, #68]	; (8003898 <menu+0x1f74>)
 8003854:	2201      	movs	r2, #1
 8003856:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 8003858:	4b10      	ldr	r3, [pc, #64]	; (800389c <menu+0x1f78>)
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	2b12      	cmp	r3, #18
 800385e:	f040 80d5 	bne.w	8003a0c <menu+0x20e8>
		if(devirmeYuruyusSecim == 2) {
 8003862:	4b11      	ldr	r3, [pc, #68]	; (80038a8 <menu+0x1f84>)
 8003864:	781b      	ldrb	r3, [r3, #0]
 8003866:	2b02      	cmp	r3, #2
 8003868:	d13c      	bne.n	80038e4 <menu+0x1fc0>
			if(dilSecim == 0) {
 800386a:	4b05      	ldr	r3, [pc, #20]	; (8003880 <menu+0x1f5c>)
 800386c:	781b      	ldrb	r3, [r3, #0]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d12e      	bne.n	80038d0 <menu+0x1fac>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 8003872:	4a16      	ldr	r2, [pc, #88]	; (80038cc <menu+0x1fa8>)
 8003874:	2101      	movs	r1, #1
 8003876:	2001      	movs	r0, #1
 8003878:	f7fc ff9e 	bl	80007b8 <lcd_print>
 800387c:	e048      	b.n	8003910 <menu+0x1fec>
 800387e:	bf00      	nop
 8003880:	20000cbe 	.word	0x20000cbe
 8003884:	0800dfc8 	.word	0x0800dfc8
 8003888:	40010800 	.word	0x40010800
 800388c:	20000ccc 	.word	0x20000ccc
 8003890:	20000cab 	.word	0x20000cab
 8003894:	20000b38 	.word	0x20000b38
 8003898:	20000cc9 	.word	0x20000cc9
 800389c:	20000c9d 	.word	0x20000c9d
 80038a0:	0800e344 	.word	0x0800e344
 80038a4:	0800e358 	.word	0x0800e358
 80038a8:	20000cac 	.word	0x20000cac
 80038ac:	0800e36c 	.word	0x0800e36c
 80038b0:	0800e37c 	.word	0x0800e37c
 80038b4:	0800e38c 	.word	0x0800e38c
 80038b8:	0800e39c 	.word	0x0800e39c
 80038bc:	0800df54 	.word	0x0800df54
 80038c0:	0800df68 	.word	0x0800df68
 80038c4:	20000c9e 	.word	0x20000c9e
 80038c8:	20000caf 	.word	0x20000caf
 80038cc:	0800e3ac 	.word	0x0800e3ac
			} else if(dilSecim == 1) {
 80038d0:	4b7b      	ldr	r3, [pc, #492]	; (8003ac0 <menu+0x219c>)
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d11b      	bne.n	8003910 <menu+0x1fec>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 80038d8:	4a7a      	ldr	r2, [pc, #488]	; (8003ac4 <menu+0x21a0>)
 80038da:	2101      	movs	r1, #1
 80038dc:	2001      	movs	r0, #1
 80038de:	f7fc ff6b 	bl	80007b8 <lcd_print>
 80038e2:	e015      	b.n	8003910 <menu+0x1fec>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80038e4:	4b78      	ldr	r3, [pc, #480]	; (8003ac8 <menu+0x21a4>)
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d111      	bne.n	8003910 <menu+0x1fec>
			if(dilSecim == 0){
 80038ec:	4b74      	ldr	r3, [pc, #464]	; (8003ac0 <menu+0x219c>)
 80038ee:	781b      	ldrb	r3, [r3, #0]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d104      	bne.n	80038fe <menu+0x1fda>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 80038f4:	4a75      	ldr	r2, [pc, #468]	; (8003acc <menu+0x21a8>)
 80038f6:	2101      	movs	r1, #1
 80038f8:	2001      	movs	r0, #1
 80038fa:	f7fc ff5d 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1){
 80038fe:	4b70      	ldr	r3, [pc, #448]	; (8003ac0 <menu+0x219c>)
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	2b01      	cmp	r3, #1
 8003904:	d104      	bne.n	8003910 <menu+0x1fec>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 8003906:	4a72      	ldr	r2, [pc, #456]	; (8003ad0 <menu+0x21ac>)
 8003908:	2101      	movs	r1, #1
 800390a:	2001      	movs	r0, #1
 800390c:	f7fc ff54 	bl	80007b8 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 8003910:	4b70      	ldr	r3, [pc, #448]	; (8003ad4 <menu+0x21b0>)
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d113      	bne.n	8003940 <menu+0x201c>
			if(dilSecim == 0) {
 8003918:	4b69      	ldr	r3, [pc, #420]	; (8003ac0 <menu+0x219c>)
 800391a:	781b      	ldrb	r3, [r3, #0]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d105      	bne.n	800392c <menu+0x2008>
				lcd_print(2, 1, "Pasif           ");
 8003920:	4a6d      	ldr	r2, [pc, #436]	; (8003ad8 <menu+0x21b4>)
 8003922:	2101      	movs	r1, #1
 8003924:	2002      	movs	r0, #2
 8003926:	f7fc ff47 	bl	80007b8 <lcd_print>
 800392a:	e020      	b.n	800396e <menu+0x204a>
			} else if(dilSecim == 1){
 800392c:	4b64      	ldr	r3, [pc, #400]	; (8003ac0 <menu+0x219c>)
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d11c      	bne.n	800396e <menu+0x204a>
				lcd_print(2, 1, "Passive         ");
 8003934:	4a69      	ldr	r2, [pc, #420]	; (8003adc <menu+0x21b8>)
 8003936:	2101      	movs	r1, #1
 8003938:	2002      	movs	r0, #2
 800393a:	f7fc ff3d 	bl	80007b8 <lcd_print>
 800393e:	e016      	b.n	800396e <menu+0x204a>
			}
		} else if(devirmeYukariIleriLimit == 1){
 8003940:	4b64      	ldr	r3, [pc, #400]	; (8003ad4 <menu+0x21b0>)
 8003942:	781b      	ldrb	r3, [r3, #0]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d112      	bne.n	800396e <menu+0x204a>
			if(dilSecim == 0){
 8003948:	4b5d      	ldr	r3, [pc, #372]	; (8003ac0 <menu+0x219c>)
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d105      	bne.n	800395c <menu+0x2038>
				lcd_print(2, 1, "Aktif           ");
 8003950:	4a63      	ldr	r2, [pc, #396]	; (8003ae0 <menu+0x21bc>)
 8003952:	2101      	movs	r1, #1
 8003954:	2002      	movs	r0, #2
 8003956:	f7fc ff2f 	bl	80007b8 <lcd_print>
 800395a:	e008      	b.n	800396e <menu+0x204a>
			} else if(dilSecim == 1){
 800395c:	4b58      	ldr	r3, [pc, #352]	; (8003ac0 <menu+0x219c>)
 800395e:	781b      	ldrb	r3, [r3, #0]
 8003960:	2b01      	cmp	r3, #1
 8003962:	d104      	bne.n	800396e <menu+0x204a>
				lcd_print(2, 1, "Active          ");
 8003964:	4a5f      	ldr	r2, [pc, #380]	; (8003ae4 <menu+0x21c0>)
 8003966:	2101      	movs	r1, #1
 8003968:	2002      	movs	r0, #2
 800396a:	f7fc ff25 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800396e:	2102      	movs	r1, #2
 8003970:	485d      	ldr	r0, [pc, #372]	; (8003ae8 <menu+0x21c4>)
 8003972:	f006 fb55 	bl	800a020 <HAL_GPIO_ReadPin>
 8003976:	4603      	mov	r3, r0
 8003978:	2b01      	cmp	r3, #1
 800397a:	d115      	bne.n	80039a8 <menu+0x2084>
 800397c:	4b5b      	ldr	r3, [pc, #364]	; (8003aec <menu+0x21c8>)
 800397e:	781b      	ldrb	r3, [r3, #0]
 8003980:	f083 0301 	eor.w	r3, r3, #1
 8003984:	b2db      	uxtb	r3, r3
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00e      	beq.n	80039a8 <menu+0x2084>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 800398a:	4b52      	ldr	r3, [pc, #328]	; (8003ad4 <menu+0x21b0>)
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	3301      	adds	r3, #1
 8003990:	b2da      	uxtb	r2, r3
 8003992:	4b50      	ldr	r3, [pc, #320]	; (8003ad4 <menu+0x21b0>)
 8003994:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 8003996:	4b4f      	ldr	r3, [pc, #316]	; (8003ad4 <menu+0x21b0>)
 8003998:	781b      	ldrb	r3, [r3, #0]
 800399a:	2b01      	cmp	r3, #1
 800399c:	d902      	bls.n	80039a4 <menu+0x2080>
				devirmeYukariIleriLimit = 0;
 800399e:	4b4d      	ldr	r3, [pc, #308]	; (8003ad4 <menu+0x21b0>)
 80039a0:	2200      	movs	r2, #0
 80039a2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80039a4:	f002 fd5c 	bl	8006460 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80039a8:	2104      	movs	r1, #4
 80039aa:	484f      	ldr	r0, [pc, #316]	; (8003ae8 <menu+0x21c4>)
 80039ac:	f006 fb38 	bl	800a020 <HAL_GPIO_ReadPin>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d115      	bne.n	80039e2 <menu+0x20be>
 80039b6:	4b4d      	ldr	r3, [pc, #308]	; (8003aec <menu+0x21c8>)
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	f083 0301 	eor.w	r3, r3, #1
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d00e      	beq.n	80039e2 <menu+0x20be>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 80039c4:	4b43      	ldr	r3, [pc, #268]	; (8003ad4 <menu+0x21b0>)
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	3b01      	subs	r3, #1
 80039ca:	b2da      	uxtb	r2, r3
 80039cc:	4b41      	ldr	r3, [pc, #260]	; (8003ad4 <menu+0x21b0>)
 80039ce:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 80039d0:	4b40      	ldr	r3, [pc, #256]	; (8003ad4 <menu+0x21b0>)
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d002      	beq.n	80039de <menu+0x20ba>
		   		devirmeYukariIleriLimit = 1;
 80039d8:	4b3e      	ldr	r3, [pc, #248]	; (8003ad4 <menu+0x21b0>)
 80039da:	2201      	movs	r2, #1
 80039dc:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80039de:	f002 fd3f 	bl	8006460 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80039e2:	2108      	movs	r1, #8
 80039e4:	4840      	ldr	r0, [pc, #256]	; (8003ae8 <menu+0x21c4>)
 80039e6:	f006 fb1b 	bl	800a020 <HAL_GPIO_ReadPin>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d10d      	bne.n	8003a0c <menu+0x20e8>
 80039f0:	4b3e      	ldr	r3, [pc, #248]	; (8003aec <menu+0x21c8>)
 80039f2:	781b      	ldrb	r3, [r3, #0]
 80039f4:	f083 0301 	eor.w	r3, r3, #1
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d006      	beq.n	8003a0c <menu+0x20e8>
			eepromData[16] = devirmeYukariIleriLimit;
 80039fe:	4b35      	ldr	r3, [pc, #212]	; (8003ad4 <menu+0x21b0>)
 8003a00:	781a      	ldrb	r2, [r3, #0]
 8003a02:	4b3b      	ldr	r3, [pc, #236]	; (8003af0 <menu+0x21cc>)
 8003a04:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 8003a06:	4b3b      	ldr	r3, [pc, #236]	; (8003af4 <menu+0x21d0>)
 8003a08:	2201      	movs	r2, #1
 8003a0a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8003a0c:	4b3a      	ldr	r3, [pc, #232]	; (8003af8 <menu+0x21d4>)
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	2b13      	cmp	r3, #19
 8003a12:	f040 80d5 	bne.w	8003bc0 <menu+0x229c>
		if(devirmeYuruyusSecim == 2) {
 8003a16:	4b2c      	ldr	r3, [pc, #176]	; (8003ac8 <menu+0x21a4>)
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d113      	bne.n	8003a46 <menu+0x2122>
			if(dilSecim == 0) {
 8003a1e:	4b28      	ldr	r3, [pc, #160]	; (8003ac0 <menu+0x219c>)
 8003a20:	781b      	ldrb	r3, [r3, #0]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d105      	bne.n	8003a32 <menu+0x210e>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 8003a26:	4a35      	ldr	r2, [pc, #212]	; (8003afc <menu+0x21d8>)
 8003a28:	2101      	movs	r1, #1
 8003a2a:	2001      	movs	r0, #1
 8003a2c:	f7fc fec4 	bl	80007b8 <lcd_print>
 8003a30:	e01f      	b.n	8003a72 <menu+0x214e>
			} else if(dilSecim == 1) {
 8003a32:	4b23      	ldr	r3, [pc, #140]	; (8003ac0 <menu+0x219c>)
 8003a34:	781b      	ldrb	r3, [r3, #0]
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d11b      	bne.n	8003a72 <menu+0x214e>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 8003a3a:	4a31      	ldr	r2, [pc, #196]	; (8003b00 <menu+0x21dc>)
 8003a3c:	2101      	movs	r1, #1
 8003a3e:	2001      	movs	r0, #1
 8003a40:	f7fc feba 	bl	80007b8 <lcd_print>
 8003a44:	e015      	b.n	8003a72 <menu+0x214e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003a46:	4b20      	ldr	r3, [pc, #128]	; (8003ac8 <menu+0x21a4>)
 8003a48:	781b      	ldrb	r3, [r3, #0]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d111      	bne.n	8003a72 <menu+0x214e>
			if(dilSecim == 0) {
 8003a4e:	4b1c      	ldr	r3, [pc, #112]	; (8003ac0 <menu+0x219c>)
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d104      	bne.n	8003a60 <menu+0x213c>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 8003a56:	4a2b      	ldr	r2, [pc, #172]	; (8003b04 <menu+0x21e0>)
 8003a58:	2101      	movs	r1, #1
 8003a5a:	2001      	movs	r0, #1
 8003a5c:	f7fc feac 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1) {
 8003a60:	4b17      	ldr	r3, [pc, #92]	; (8003ac0 <menu+0x219c>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	d104      	bne.n	8003a72 <menu+0x214e>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 8003a68:	4a27      	ldr	r2, [pc, #156]	; (8003b08 <menu+0x21e4>)
 8003a6a:	2101      	movs	r1, #1
 8003a6c:	2001      	movs	r0, #1
 8003a6e:	f7fc fea3 	bl	80007b8 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 8003a72:	4b26      	ldr	r3, [pc, #152]	; (8003b0c <menu+0x21e8>)
 8003a74:	781b      	ldrb	r3, [r3, #0]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d113      	bne.n	8003aa2 <menu+0x217e>
			if(dilSecim == 0) {
 8003a7a:	4b11      	ldr	r3, [pc, #68]	; (8003ac0 <menu+0x219c>)
 8003a7c:	781b      	ldrb	r3, [r3, #0]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d105      	bne.n	8003a8e <menu+0x216a>
				lcd_print(2, 1, "Pasif           ");
 8003a82:	4a15      	ldr	r2, [pc, #84]	; (8003ad8 <menu+0x21b4>)
 8003a84:	2101      	movs	r1, #1
 8003a86:	2002      	movs	r0, #2
 8003a88:	f7fc fe96 	bl	80007b8 <lcd_print>
 8003a8c:	e049      	b.n	8003b22 <menu+0x21fe>
			} else if(dilSecim == 1) {
 8003a8e:	4b0c      	ldr	r3, [pc, #48]	; (8003ac0 <menu+0x219c>)
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d145      	bne.n	8003b22 <menu+0x21fe>
				lcd_print(2, 1, "Passive         ");
 8003a96:	4a11      	ldr	r2, [pc, #68]	; (8003adc <menu+0x21b8>)
 8003a98:	2101      	movs	r1, #1
 8003a9a:	2002      	movs	r0, #2
 8003a9c:	f7fc fe8c 	bl	80007b8 <lcd_print>
 8003aa0:	e03f      	b.n	8003b22 <menu+0x21fe>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 8003aa2:	4b1a      	ldr	r3, [pc, #104]	; (8003b0c <menu+0x21e8>)
 8003aa4:	781b      	ldrb	r3, [r3, #0]
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	d13b      	bne.n	8003b22 <menu+0x21fe>
			if(dilSecim == 0) {
 8003aaa:	4b05      	ldr	r3, [pc, #20]	; (8003ac0 <menu+0x219c>)
 8003aac:	781b      	ldrb	r3, [r3, #0]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d12e      	bne.n	8003b10 <menu+0x21ec>
				lcd_print(2, 1, "Aktif           ");
 8003ab2:	4a0b      	ldr	r2, [pc, #44]	; (8003ae0 <menu+0x21bc>)
 8003ab4:	2101      	movs	r1, #1
 8003ab6:	2002      	movs	r0, #2
 8003ab8:	f7fc fe7e 	bl	80007b8 <lcd_print>
 8003abc:	e031      	b.n	8003b22 <menu+0x21fe>
 8003abe:	bf00      	nop
 8003ac0:	20000cbe 	.word	0x20000cbe
 8003ac4:	0800e3c0 	.word	0x0800e3c0
 8003ac8:	20000cac 	.word	0x20000cac
 8003acc:	0800e3d0 	.word	0x0800e3d0
 8003ad0:	0800e3e4 	.word	0x0800e3e4
 8003ad4:	20000cad 	.word	0x20000cad
 8003ad8:	0800df54 	.word	0x0800df54
 8003adc:	0800df68 	.word	0x0800df68
 8003ae0:	0800dfb4 	.word	0x0800dfb4
 8003ae4:	0800dfc8 	.word	0x0800dfc8
 8003ae8:	40010800 	.word	0x40010800
 8003aec:	20000ccc 	.word	0x20000ccc
 8003af0:	20000b38 	.word	0x20000b38
 8003af4:	20000cc9 	.word	0x20000cc9
 8003af8:	20000c9d 	.word	0x20000c9d
 8003afc:	0800e3f8 	.word	0x0800e3f8
 8003b00:	0800e40c 	.word	0x0800e40c
 8003b04:	0800e420 	.word	0x0800e420
 8003b08:	0800e434 	.word	0x0800e434
 8003b0c:	20000cae 	.word	0x20000cae
			} else if(dilSecim == 1) {
 8003b10:	4b90      	ldr	r3, [pc, #576]	; (8003d54 <menu+0x2430>)
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d104      	bne.n	8003b22 <menu+0x21fe>
				lcd_print(2, 1, "Active          ");
 8003b18:	4a8f      	ldr	r2, [pc, #572]	; (8003d58 <menu+0x2434>)
 8003b1a:	2101      	movs	r1, #1
 8003b1c:	2002      	movs	r0, #2
 8003b1e:	f7fc fe4b 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b22:	2102      	movs	r1, #2
 8003b24:	488d      	ldr	r0, [pc, #564]	; (8003d5c <menu+0x2438>)
 8003b26:	f006 fa7b 	bl	800a020 <HAL_GPIO_ReadPin>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d115      	bne.n	8003b5c <menu+0x2238>
 8003b30:	4b8b      	ldr	r3, [pc, #556]	; (8003d60 <menu+0x243c>)
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	f083 0301 	eor.w	r3, r3, #1
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00e      	beq.n	8003b5c <menu+0x2238>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 8003b3e:	4b89      	ldr	r3, [pc, #548]	; (8003d64 <menu+0x2440>)
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	3301      	adds	r3, #1
 8003b44:	b2da      	uxtb	r2, r3
 8003b46:	4b87      	ldr	r3, [pc, #540]	; (8003d64 <menu+0x2440>)
 8003b48:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 8003b4a:	4b86      	ldr	r3, [pc, #536]	; (8003d64 <menu+0x2440>)
 8003b4c:	781b      	ldrb	r3, [r3, #0]
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d902      	bls.n	8003b58 <menu+0x2234>
				devirmeAsagiGeriLimit = 0;
 8003b52:	4b84      	ldr	r3, [pc, #528]	; (8003d64 <menu+0x2440>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003b58:	f002 fc82 	bl	8006460 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b5c:	2104      	movs	r1, #4
 8003b5e:	487f      	ldr	r0, [pc, #508]	; (8003d5c <menu+0x2438>)
 8003b60:	f006 fa5e 	bl	800a020 <HAL_GPIO_ReadPin>
 8003b64:	4603      	mov	r3, r0
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d115      	bne.n	8003b96 <menu+0x2272>
 8003b6a:	4b7d      	ldr	r3, [pc, #500]	; (8003d60 <menu+0x243c>)
 8003b6c:	781b      	ldrb	r3, [r3, #0]
 8003b6e:	f083 0301 	eor.w	r3, r3, #1
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00e      	beq.n	8003b96 <menu+0x2272>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8003b78:	4b7a      	ldr	r3, [pc, #488]	; (8003d64 <menu+0x2440>)
 8003b7a:	781b      	ldrb	r3, [r3, #0]
 8003b7c:	3b01      	subs	r3, #1
 8003b7e:	b2da      	uxtb	r2, r3
 8003b80:	4b78      	ldr	r3, [pc, #480]	; (8003d64 <menu+0x2440>)
 8003b82:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8003b84:	4b77      	ldr	r3, [pc, #476]	; (8003d64 <menu+0x2440>)
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d002      	beq.n	8003b92 <menu+0x226e>
		   		devirmeAsagiGeriLimit = 1;
 8003b8c:	4b75      	ldr	r3, [pc, #468]	; (8003d64 <menu+0x2440>)
 8003b8e:	2201      	movs	r2, #1
 8003b90:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003b92:	f002 fc65 	bl	8006460 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b96:	2108      	movs	r1, #8
 8003b98:	4870      	ldr	r0, [pc, #448]	; (8003d5c <menu+0x2438>)
 8003b9a:	f006 fa41 	bl	800a020 <HAL_GPIO_ReadPin>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b01      	cmp	r3, #1
 8003ba2:	d10d      	bne.n	8003bc0 <menu+0x229c>
 8003ba4:	4b6e      	ldr	r3, [pc, #440]	; (8003d60 <menu+0x243c>)
 8003ba6:	781b      	ldrb	r3, [r3, #0]
 8003ba8:	f083 0301 	eor.w	r3, r3, #1
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d006      	beq.n	8003bc0 <menu+0x229c>
			eepromData[17] = devirmeAsagiGeriLimit;
 8003bb2:	4b6c      	ldr	r3, [pc, #432]	; (8003d64 <menu+0x2440>)
 8003bb4:	781a      	ldrb	r2, [r3, #0]
 8003bb6:	4b6c      	ldr	r3, [pc, #432]	; (8003d68 <menu+0x2444>)
 8003bb8:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8003bba:	4b6c      	ldr	r3, [pc, #432]	; (8003d6c <menu+0x2448>)
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8003bc0:	4b6b      	ldr	r3, [pc, #428]	; (8003d70 <menu+0x244c>)
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	2b14      	cmp	r3, #20
 8003bc6:	f040 80b5 	bne.w	8003d34 <menu+0x2410>
		if(devirmeYuruyusSecim == 1) {
 8003bca:	4b6a      	ldr	r3, [pc, #424]	; (8003d74 <menu+0x2450>)
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d113      	bne.n	8003bfa <menu+0x22d6>
			if(dilSecim == 0) {
 8003bd2:	4b60      	ldr	r3, [pc, #384]	; (8003d54 <menu+0x2430>)
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d105      	bne.n	8003be6 <menu+0x22c2>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 8003bda:	4a67      	ldr	r2, [pc, #412]	; (8003d78 <menu+0x2454>)
 8003bdc:	2101      	movs	r1, #1
 8003bde:	2001      	movs	r0, #1
 8003be0:	f7fc fdea 	bl	80007b8 <lcd_print>
 8003be4:	e020      	b.n	8003c28 <menu+0x2304>
			} else if(dilSecim == 1) {
 8003be6:	4b5b      	ldr	r3, [pc, #364]	; (8003d54 <menu+0x2430>)
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d11c      	bne.n	8003c28 <menu+0x2304>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 8003bee:	4a63      	ldr	r2, [pc, #396]	; (8003d7c <menu+0x2458>)
 8003bf0:	2101      	movs	r1, #1
 8003bf2:	2001      	movs	r0, #1
 8003bf4:	f7fc fde0 	bl	80007b8 <lcd_print>
 8003bf8:	e016      	b.n	8003c28 <menu+0x2304>
			}
		} else if(devirmeYuruyusSecim == 2) {
 8003bfa:	4b5e      	ldr	r3, [pc, #376]	; (8003d74 <menu+0x2450>)
 8003bfc:	781b      	ldrb	r3, [r3, #0]
 8003bfe:	2b02      	cmp	r3, #2
 8003c00:	d112      	bne.n	8003c28 <menu+0x2304>
			if(dilSecim == 0) {
 8003c02:	4b54      	ldr	r3, [pc, #336]	; (8003d54 <menu+0x2430>)
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d105      	bne.n	8003c16 <menu+0x22f2>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 8003c0a:	4a5d      	ldr	r2, [pc, #372]	; (8003d80 <menu+0x245c>)
 8003c0c:	2101      	movs	r1, #1
 8003c0e:	2001      	movs	r0, #1
 8003c10:	f7fc fdd2 	bl	80007b8 <lcd_print>
 8003c14:	e008      	b.n	8003c28 <menu+0x2304>
			} else if(dilSecim == 1) {
 8003c16:	4b4f      	ldr	r3, [pc, #316]	; (8003d54 <menu+0x2430>)
 8003c18:	781b      	ldrb	r3, [r3, #0]
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d104      	bne.n	8003c28 <menu+0x2304>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 8003c1e:	4a59      	ldr	r2, [pc, #356]	; (8003d84 <menu+0x2460>)
 8003c20:	2101      	movs	r1, #1
 8003c22:	2001      	movs	r0, #1
 8003c24:	f7fc fdc8 	bl	80007b8 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 8003c28:	4b57      	ldr	r3, [pc, #348]	; (8003d88 <menu+0x2464>)
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d113      	bne.n	8003c58 <menu+0x2334>
			if(dilSecim == 0) {
 8003c30:	4b48      	ldr	r3, [pc, #288]	; (8003d54 <menu+0x2430>)
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d105      	bne.n	8003c44 <menu+0x2320>
				lcd_print(2, 1, "Tek tesir       ");
 8003c38:	4a54      	ldr	r2, [pc, #336]	; (8003d8c <menu+0x2468>)
 8003c3a:	2101      	movs	r1, #1
 8003c3c:	2002      	movs	r0, #2
 8003c3e:	f7fc fdbb 	bl	80007b8 <lcd_print>
 8003c42:	e020      	b.n	8003c86 <menu+0x2362>
			} else if(dilSecim == 1) {
 8003c44:	4b43      	ldr	r3, [pc, #268]	; (8003d54 <menu+0x2430>)
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d11c      	bne.n	8003c86 <menu+0x2362>
				lcd_print(2, 1, "Single acting  ");
 8003c4c:	4a50      	ldr	r2, [pc, #320]	; (8003d90 <menu+0x246c>)
 8003c4e:	2101      	movs	r1, #1
 8003c50:	2002      	movs	r0, #2
 8003c52:	f7fc fdb1 	bl	80007b8 <lcd_print>
 8003c56:	e016      	b.n	8003c86 <menu+0x2362>
			}
		} else if(devirmeSilindirTipi == 1) {
 8003c58:	4b4b      	ldr	r3, [pc, #300]	; (8003d88 <menu+0x2464>)
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	d112      	bne.n	8003c86 <menu+0x2362>
			if(dilSecim == 0) {
 8003c60:	4b3c      	ldr	r3, [pc, #240]	; (8003d54 <menu+0x2430>)
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d105      	bne.n	8003c74 <menu+0x2350>
				lcd_print(2, 1, "Cift tesir      ");
 8003c68:	4a4a      	ldr	r2, [pc, #296]	; (8003d94 <menu+0x2470>)
 8003c6a:	2101      	movs	r1, #1
 8003c6c:	2002      	movs	r0, #2
 8003c6e:	f7fc fda3 	bl	80007b8 <lcd_print>
 8003c72:	e008      	b.n	8003c86 <menu+0x2362>
			} else if(dilSecim == 1) {
 8003c74:	4b37      	ldr	r3, [pc, #220]	; (8003d54 <menu+0x2430>)
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d104      	bne.n	8003c86 <menu+0x2362>
				lcd_print(2, 1, "Double acting  ");
 8003c7c:	4a46      	ldr	r2, [pc, #280]	; (8003d98 <menu+0x2474>)
 8003c7e:	2101      	movs	r1, #1
 8003c80:	2002      	movs	r0, #2
 8003c82:	f7fc fd99 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003c86:	2102      	movs	r1, #2
 8003c88:	4834      	ldr	r0, [pc, #208]	; (8003d5c <menu+0x2438>)
 8003c8a:	f006 f9c9 	bl	800a020 <HAL_GPIO_ReadPin>
 8003c8e:	4603      	mov	r3, r0
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d119      	bne.n	8003cc8 <menu+0x23a4>
 8003c94:	4b32      	ldr	r3, [pc, #200]	; (8003d60 <menu+0x243c>)
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	f083 0301 	eor.w	r3, r3, #1
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d012      	beq.n	8003cc8 <menu+0x23a4>
 8003ca2:	4b34      	ldr	r3, [pc, #208]	; (8003d74 <menu+0x2450>)
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	2b02      	cmp	r3, #2
 8003ca8:	d10e      	bne.n	8003cc8 <menu+0x23a4>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8003caa:	4b37      	ldr	r3, [pc, #220]	; (8003d88 <menu+0x2464>)
 8003cac:	781b      	ldrb	r3, [r3, #0]
 8003cae:	3301      	adds	r3, #1
 8003cb0:	b2da      	uxtb	r2, r3
 8003cb2:	4b35      	ldr	r3, [pc, #212]	; (8003d88 <menu+0x2464>)
 8003cb4:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 8003cb6:	4b34      	ldr	r3, [pc, #208]	; (8003d88 <menu+0x2464>)
 8003cb8:	781b      	ldrb	r3, [r3, #0]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d902      	bls.n	8003cc4 <menu+0x23a0>
				devirmeSilindirTipi = 0;
 8003cbe:	4b32      	ldr	r3, [pc, #200]	; (8003d88 <menu+0x2464>)
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003cc4:	f002 fbcc 	bl	8006460 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003cc8:	2104      	movs	r1, #4
 8003cca:	4824      	ldr	r0, [pc, #144]	; (8003d5c <menu+0x2438>)
 8003ccc:	f006 f9a8 	bl	800a020 <HAL_GPIO_ReadPin>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d119      	bne.n	8003d0a <menu+0x23e6>
 8003cd6:	4b22      	ldr	r3, [pc, #136]	; (8003d60 <menu+0x243c>)
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	f083 0301 	eor.w	r3, r3, #1
 8003cde:	b2db      	uxtb	r3, r3
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d012      	beq.n	8003d0a <menu+0x23e6>
 8003ce4:	4b23      	ldr	r3, [pc, #140]	; (8003d74 <menu+0x2450>)
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d10e      	bne.n	8003d0a <menu+0x23e6>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8003cec:	4b26      	ldr	r3, [pc, #152]	; (8003d88 <menu+0x2464>)
 8003cee:	781b      	ldrb	r3, [r3, #0]
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	b2da      	uxtb	r2, r3
 8003cf4:	4b24      	ldr	r3, [pc, #144]	; (8003d88 <menu+0x2464>)
 8003cf6:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8003cf8:	4b23      	ldr	r3, [pc, #140]	; (8003d88 <menu+0x2464>)
 8003cfa:	781b      	ldrb	r3, [r3, #0]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d002      	beq.n	8003d06 <menu+0x23e2>
		   		devirmeSilindirTipi = 1;
 8003d00:	4b21      	ldr	r3, [pc, #132]	; (8003d88 <menu+0x2464>)
 8003d02:	2201      	movs	r2, #1
 8003d04:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003d06:	f002 fbab 	bl	8006460 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d0a:	2108      	movs	r1, #8
 8003d0c:	4813      	ldr	r0, [pc, #76]	; (8003d5c <menu+0x2438>)
 8003d0e:	f006 f987 	bl	800a020 <HAL_GPIO_ReadPin>
 8003d12:	4603      	mov	r3, r0
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d10d      	bne.n	8003d34 <menu+0x2410>
 8003d18:	4b11      	ldr	r3, [pc, #68]	; (8003d60 <menu+0x243c>)
 8003d1a:	781b      	ldrb	r3, [r3, #0]
 8003d1c:	f083 0301 	eor.w	r3, r3, #1
 8003d20:	b2db      	uxtb	r3, r3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d006      	beq.n	8003d34 <menu+0x2410>
			eepromData[18] = devirmeSilindirTipi;
 8003d26:	4b18      	ldr	r3, [pc, #96]	; (8003d88 <menu+0x2464>)
 8003d28:	781a      	ldrb	r2, [r3, #0]
 8003d2a:	4b0f      	ldr	r3, [pc, #60]	; (8003d68 <menu+0x2444>)
 8003d2c:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8003d2e:	4b0f      	ldr	r3, [pc, #60]	; (8003d6c <menu+0x2448>)
 8003d30:	2201      	movs	r2, #1
 8003d32:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 8003d34:	4b0e      	ldr	r3, [pc, #56]	; (8003d70 <menu+0x244c>)
 8003d36:	781b      	ldrb	r3, [r3, #0]
 8003d38:	2b15      	cmp	r3, #21
 8003d3a:	f040 80c2 	bne.w	8003ec2 <menu+0x259e>
		if(dilSecim == 0) {
 8003d3e:	4b05      	ldr	r3, [pc, #20]	; (8003d54 <menu+0x2430>)
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d12c      	bne.n	8003da0 <menu+0x247c>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 8003d46:	4a15      	ldr	r2, [pc, #84]	; (8003d9c <menu+0x2478>)
 8003d48:	2101      	movs	r1, #1
 8003d4a:	2001      	movs	r0, #1
 8003d4c:	f7fc fd34 	bl	80007b8 <lcd_print>
 8003d50:	e02f      	b.n	8003db2 <menu+0x248e>
 8003d52:	bf00      	nop
 8003d54:	20000cbe 	.word	0x20000cbe
 8003d58:	0800dfc8 	.word	0x0800dfc8
 8003d5c:	40010800 	.word	0x40010800
 8003d60:	20000ccc 	.word	0x20000ccc
 8003d64:	20000cae 	.word	0x20000cae
 8003d68:	20000b38 	.word	0x20000b38
 8003d6c:	20000cc9 	.word	0x20000cc9
 8003d70:	20000c9d 	.word	0x20000c9d
 8003d74:	20000cac 	.word	0x20000cac
 8003d78:	0800e448 	.word	0x0800e448
 8003d7c:	0800e45c 	.word	0x0800e45c
 8003d80:	0800e470 	.word	0x0800e470
 8003d84:	0800e484 	.word	0x0800e484
 8003d88:	20000caf 	.word	0x20000caf
 8003d8c:	0800e498 	.word	0x0800e498
 8003d90:	0800e4ac 	.word	0x0800e4ac
 8003d94:	0800e4bc 	.word	0x0800e4bc
 8003d98:	0800e4d0 	.word	0x0800e4d0
 8003d9c:	0800e4e0 	.word	0x0800e4e0
		} else if(dilSecim == 1) {
 8003da0:	4b9c      	ldr	r3, [pc, #624]	; (8004014 <menu+0x26f0>)
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	d104      	bne.n	8003db2 <menu+0x248e>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 8003da8:	4a9b      	ldr	r2, [pc, #620]	; (8004018 <menu+0x26f4>)
 8003daa:	2101      	movs	r1, #1
 8003dac:	2001      	movs	r0, #1
 8003dae:	f7fc fd03 	bl	80007b8 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 8003db2:	4b9a      	ldr	r3, [pc, #616]	; (800401c <menu+0x26f8>)
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d112      	bne.n	8003de0 <menu+0x24bc>
			if(dilSecim == 0) {
 8003dba:	4b96      	ldr	r3, [pc, #600]	; (8004014 <menu+0x26f0>)
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d104      	bne.n	8003dcc <menu+0x24a8>
				lcd_print(2, 1, "Tek tesir       ");
 8003dc2:	4a97      	ldr	r2, [pc, #604]	; (8004020 <menu+0x26fc>)
 8003dc4:	2101      	movs	r1, #1
 8003dc6:	2002      	movs	r0, #2
 8003dc8:	f7fc fcf6 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1) {
 8003dcc:	4b91      	ldr	r3, [pc, #580]	; (8004014 <menu+0x26f0>)
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	2b01      	cmp	r3, #1
 8003dd2:	d11c      	bne.n	8003e0e <menu+0x24ea>
				lcd_print(2, 1, "Single acting  ");
 8003dd4:	4a93      	ldr	r2, [pc, #588]	; (8004024 <menu+0x2700>)
 8003dd6:	2101      	movs	r1, #1
 8003dd8:	2002      	movs	r0, #2
 8003dda:	f7fc fced 	bl	80007b8 <lcd_print>
 8003dde:	e016      	b.n	8003e0e <menu+0x24ea>
			}
		} else if(platformSilindirTipi == 1) {
 8003de0:	4b8e      	ldr	r3, [pc, #568]	; (800401c <menu+0x26f8>)
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	2b01      	cmp	r3, #1
 8003de6:	d112      	bne.n	8003e0e <menu+0x24ea>
			if(dilSecim == 0) {
 8003de8:	4b8a      	ldr	r3, [pc, #552]	; (8004014 <menu+0x26f0>)
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d105      	bne.n	8003dfc <menu+0x24d8>
				lcd_print(2, 1, "Cift tesir      ");
 8003df0:	4a8d      	ldr	r2, [pc, #564]	; (8004028 <menu+0x2704>)
 8003df2:	2101      	movs	r1, #1
 8003df4:	2002      	movs	r0, #2
 8003df6:	f7fc fcdf 	bl	80007b8 <lcd_print>
 8003dfa:	e008      	b.n	8003e0e <menu+0x24ea>
			} else if(dilSecim == 1) {
 8003dfc:	4b85      	ldr	r3, [pc, #532]	; (8004014 <menu+0x26f0>)
 8003dfe:	781b      	ldrb	r3, [r3, #0]
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d104      	bne.n	8003e0e <menu+0x24ea>
				lcd_print(2, 1, "Double acting  ");
 8003e04:	4a89      	ldr	r2, [pc, #548]	; (800402c <menu+0x2708>)
 8003e06:	2101      	movs	r1, #1
 8003e08:	2002      	movs	r0, #2
 8003e0a:	f7fc fcd5 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e0e:	2102      	movs	r1, #2
 8003e10:	4887      	ldr	r0, [pc, #540]	; (8004030 <menu+0x270c>)
 8003e12:	f006 f905 	bl	800a020 <HAL_GPIO_ReadPin>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d115      	bne.n	8003e48 <menu+0x2524>
 8003e1c:	4b85      	ldr	r3, [pc, #532]	; (8004034 <menu+0x2710>)
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	f083 0301 	eor.w	r3, r3, #1
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00e      	beq.n	8003e48 <menu+0x2524>
			platformSilindirTipi = platformSilindirTipi + 1;
 8003e2a:	4b7c      	ldr	r3, [pc, #496]	; (800401c <menu+0x26f8>)
 8003e2c:	781b      	ldrb	r3, [r3, #0]
 8003e2e:	3301      	adds	r3, #1
 8003e30:	b2da      	uxtb	r2, r3
 8003e32:	4b7a      	ldr	r3, [pc, #488]	; (800401c <menu+0x26f8>)
 8003e34:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 8003e36:	4b79      	ldr	r3, [pc, #484]	; (800401c <menu+0x26f8>)
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d902      	bls.n	8003e44 <menu+0x2520>
				platformSilindirTipi = 0;
 8003e3e:	4b77      	ldr	r3, [pc, #476]	; (800401c <menu+0x26f8>)
 8003e40:	2200      	movs	r2, #0
 8003e42:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003e44:	f002 fb0c 	bl	8006460 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e48:	2104      	movs	r1, #4
 8003e4a:	4879      	ldr	r0, [pc, #484]	; (8004030 <menu+0x270c>)
 8003e4c:	f006 f8e8 	bl	800a020 <HAL_GPIO_ReadPin>
 8003e50:	4603      	mov	r3, r0
 8003e52:	2b01      	cmp	r3, #1
 8003e54:	d115      	bne.n	8003e82 <menu+0x255e>
 8003e56:	4b77      	ldr	r3, [pc, #476]	; (8004034 <menu+0x2710>)
 8003e58:	781b      	ldrb	r3, [r3, #0]
 8003e5a:	f083 0301 	eor.w	r3, r3, #1
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d00e      	beq.n	8003e82 <menu+0x255e>
			platformSilindirTipi = platformSilindirTipi - 1;
 8003e64:	4b6d      	ldr	r3, [pc, #436]	; (800401c <menu+0x26f8>)
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	3b01      	subs	r3, #1
 8003e6a:	b2da      	uxtb	r2, r3
 8003e6c:	4b6b      	ldr	r3, [pc, #428]	; (800401c <menu+0x26f8>)
 8003e6e:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8003e70:	4b6a      	ldr	r3, [pc, #424]	; (800401c <menu+0x26f8>)
 8003e72:	781b      	ldrb	r3, [r3, #0]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d002      	beq.n	8003e7e <menu+0x255a>
		   		platformSilindirTipi = 1;
 8003e78:	4b68      	ldr	r3, [pc, #416]	; (800401c <menu+0x26f8>)
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003e7e:	f002 faef 	bl	8006460 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003e82:	2108      	movs	r1, #8
 8003e84:	486a      	ldr	r0, [pc, #424]	; (8004030 <menu+0x270c>)
 8003e86:	f006 f8cb 	bl	800a020 <HAL_GPIO_ReadPin>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d118      	bne.n	8003ec2 <menu+0x259e>
 8003e90:	4b68      	ldr	r3, [pc, #416]	; (8004034 <menu+0x2710>)
 8003e92:	781b      	ldrb	r3, [r3, #0]
 8003e94:	f083 0301 	eor.w	r3, r3, #1
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d011      	beq.n	8003ec2 <menu+0x259e>
			eepromData[19] = platformSilindirTipi;
 8003e9e:	4b5f      	ldr	r3, [pc, #380]	; (800401c <menu+0x26f8>)
 8003ea0:	781a      	ldrb	r2, [r3, #0]
 8003ea2:	4b65      	ldr	r3, [pc, #404]	; (8004038 <menu+0x2714>)
 8003ea4:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8003ea6:	4b5d      	ldr	r3, [pc, #372]	; (800401c <menu+0x26f8>)
 8003ea8:	781b      	ldrb	r3, [r3, #0]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d106      	bne.n	8003ebc <menu+0x2598>
				altLimit = 1;
 8003eae:	4b63      	ldr	r3, [pc, #396]	; (800403c <menu+0x2718>)
 8003eb0:	2201      	movs	r2, #1
 8003eb2:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8003eb4:	4b61      	ldr	r3, [pc, #388]	; (800403c <menu+0x2718>)
 8003eb6:	781a      	ldrb	r2, [r3, #0]
 8003eb8:	4b5f      	ldr	r3, [pc, #380]	; (8004038 <menu+0x2714>)
 8003eba:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8003ebc:	4b60      	ldr	r3, [pc, #384]	; (8004040 <menu+0x271c>)
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8003ec2:	4b60      	ldr	r3, [pc, #384]	; (8004044 <menu+0x2720>)
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	2b16      	cmp	r3, #22
 8003ec8:	f040 8081 	bne.w	8003fce <menu+0x26aa>
		if(dilSecim == 0) {
 8003ecc:	4b51      	ldr	r3, [pc, #324]	; (8004014 <menu+0x26f0>)
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d105      	bne.n	8003ee0 <menu+0x25bc>
			lcd_print(1, 1, "YUKARI VALF SURE");
 8003ed4:	4a5c      	ldr	r2, [pc, #368]	; (8004048 <menu+0x2724>)
 8003ed6:	2101      	movs	r1, #1
 8003ed8:	2001      	movs	r0, #1
 8003eda:	f7fc fc6d 	bl	80007b8 <lcd_print>
 8003ede:	e008      	b.n	8003ef2 <menu+0x25ce>
		} else if(dilSecim == 1) {
 8003ee0:	4b4c      	ldr	r3, [pc, #304]	; (8004014 <menu+0x26f0>)
 8003ee2:	781b      	ldrb	r3, [r3, #0]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d104      	bne.n	8003ef2 <menu+0x25ce>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8003ee8:	4a58      	ldr	r2, [pc, #352]	; (800404c <menu+0x2728>)
 8003eea:	2101      	movs	r1, #1
 8003eec:	2001      	movs	r0, #1
 8003eee:	f7fc fc63 	bl	80007b8 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 8003ef2:	4b48      	ldr	r3, [pc, #288]	; (8004014 <menu+0x26f0>)
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d105      	bne.n	8003f06 <menu+0x25e2>
				lcd_print(2, 1, "Kac Saniye     ");
 8003efa:	4a55      	ldr	r2, [pc, #340]	; (8004050 <menu+0x272c>)
 8003efc:	2101      	movs	r1, #1
 8003efe:	2002      	movs	r0, #2
 8003f00:	f7fc fc5a 	bl	80007b8 <lcd_print>
 8003f04:	e008      	b.n	8003f18 <menu+0x25f4>
			} else if(dilSecim == 1){
 8003f06:	4b43      	ldr	r3, [pc, #268]	; (8004014 <menu+0x26f0>)
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d104      	bne.n	8003f18 <menu+0x25f4>
				lcd_print(2, 1, "Second         ");
 8003f0e:	4a51      	ldr	r2, [pc, #324]	; (8004054 <menu+0x2730>)
 8003f10:	2101      	movs	r1, #1
 8003f12:	2002      	movs	r0, #2
 8003f14:	f7fc fc50 	bl	80007b8 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8003f18:	4b4f      	ldr	r3, [pc, #316]	; (8004058 <menu+0x2734>)
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	220a      	movs	r2, #10
 8003f1e:	494f      	ldr	r1, [pc, #316]	; (800405c <menu+0x2738>)
 8003f20:	4618      	mov	r0, r3
 8003f22:	f009 f8a9 	bl	800d078 <itoa>
		lcd_print(2,16,snum);
 8003f26:	4a4d      	ldr	r2, [pc, #308]	; (800405c <menu+0x2738>)
 8003f28:	2110      	movs	r1, #16
 8003f2a:	2002      	movs	r0, #2
 8003f2c:	f7fc fc44 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f30:	2102      	movs	r1, #2
 8003f32:	483f      	ldr	r0, [pc, #252]	; (8004030 <menu+0x270c>)
 8003f34:	f006 f874 	bl	800a020 <HAL_GPIO_ReadPin>
 8003f38:	4603      	mov	r3, r0
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d115      	bne.n	8003f6a <menu+0x2646>
 8003f3e:	4b3d      	ldr	r3, [pc, #244]	; (8004034 <menu+0x2710>)
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	f083 0301 	eor.w	r3, r3, #1
 8003f46:	b2db      	uxtb	r3, r3
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d00e      	beq.n	8003f6a <menu+0x2646>
			yukariValfTmr = yukariValfTmr + 1;
 8003f4c:	4b42      	ldr	r3, [pc, #264]	; (8004058 <menu+0x2734>)
 8003f4e:	781b      	ldrb	r3, [r3, #0]
 8003f50:	3301      	adds	r3, #1
 8003f52:	b2da      	uxtb	r2, r3
 8003f54:	4b40      	ldr	r3, [pc, #256]	; (8004058 <menu+0x2734>)
 8003f56:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8003f58:	4b3f      	ldr	r3, [pc, #252]	; (8004058 <menu+0x2734>)
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	2b05      	cmp	r3, #5
 8003f5e:	d902      	bls.n	8003f66 <menu+0x2642>
				yukariValfTmr = 0;
 8003f60:	4b3d      	ldr	r3, [pc, #244]	; (8004058 <menu+0x2734>)
 8003f62:	2200      	movs	r2, #0
 8003f64:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003f66:	f002 fa7b 	bl	8006460 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f6a:	2104      	movs	r1, #4
 8003f6c:	4830      	ldr	r0, [pc, #192]	; (8004030 <menu+0x270c>)
 8003f6e:	f006 f857 	bl	800a020 <HAL_GPIO_ReadPin>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d115      	bne.n	8003fa4 <menu+0x2680>
 8003f78:	4b2e      	ldr	r3, [pc, #184]	; (8004034 <menu+0x2710>)
 8003f7a:	781b      	ldrb	r3, [r3, #0]
 8003f7c:	f083 0301 	eor.w	r3, r3, #1
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d00e      	beq.n	8003fa4 <menu+0x2680>
			yukariValfTmr = yukariValfTmr - 1;
 8003f86:	4b34      	ldr	r3, [pc, #208]	; (8004058 <menu+0x2734>)
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	b2da      	uxtb	r2, r3
 8003f8e:	4b32      	ldr	r3, [pc, #200]	; (8004058 <menu+0x2734>)
 8003f90:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8003f92:	4b31      	ldr	r3, [pc, #196]	; (8004058 <menu+0x2734>)
 8003f94:	781b      	ldrb	r3, [r3, #0]
 8003f96:	2b06      	cmp	r3, #6
 8003f98:	d902      	bls.n	8003fa0 <menu+0x267c>
		   		yukariValfTmr = 5;
 8003f9a:	4b2f      	ldr	r3, [pc, #188]	; (8004058 <menu+0x2734>)
 8003f9c:	2205      	movs	r2, #5
 8003f9e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003fa0:	f002 fa5e 	bl	8006460 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003fa4:	2108      	movs	r1, #8
 8003fa6:	4822      	ldr	r0, [pc, #136]	; (8004030 <menu+0x270c>)
 8003fa8:	f006 f83a 	bl	800a020 <HAL_GPIO_ReadPin>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d10d      	bne.n	8003fce <menu+0x26aa>
 8003fb2:	4b20      	ldr	r3, [pc, #128]	; (8004034 <menu+0x2710>)
 8003fb4:	781b      	ldrb	r3, [r3, #0]
 8003fb6:	f083 0301 	eor.w	r3, r3, #1
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d006      	beq.n	8003fce <menu+0x26aa>
			eepromData[20] = yukariValfTmr;
 8003fc0:	4b25      	ldr	r3, [pc, #148]	; (8004058 <menu+0x2734>)
 8003fc2:	781a      	ldrb	r2, [r3, #0]
 8003fc4:	4b1c      	ldr	r3, [pc, #112]	; (8004038 <menu+0x2714>)
 8003fc6:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8003fc8:	4b1d      	ldr	r3, [pc, #116]	; (8004040 <menu+0x271c>)
 8003fca:	2201      	movs	r2, #1
 8003fcc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8003fce:	4b1d      	ldr	r3, [pc, #116]	; (8004044 <menu+0x2720>)
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	2b17      	cmp	r3, #23
 8003fd4:	f040 80ac 	bne.w	8004130 <menu+0x280c>
		if(dilSecim == 0) {
 8003fd8:	4b0e      	ldr	r3, [pc, #56]	; (8004014 <menu+0x26f0>)
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d105      	bne.n	8003fec <menu+0x26c8>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8003fe0:	4a1f      	ldr	r2, [pc, #124]	; (8004060 <menu+0x273c>)
 8003fe2:	2101      	movs	r1, #1
 8003fe4:	2001      	movs	r0, #1
 8003fe6:	f7fc fbe7 	bl	80007b8 <lcd_print>
 8003fea:	e008      	b.n	8003ffe <menu+0x26da>
		} else if(dilSecim == 1) {
 8003fec:	4b09      	ldr	r3, [pc, #36]	; (8004014 <menu+0x26f0>)
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	2b01      	cmp	r3, #1
 8003ff2:	d104      	bne.n	8003ffe <menu+0x26da>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8003ff4:	4a1b      	ldr	r2, [pc, #108]	; (8004064 <menu+0x2740>)
 8003ff6:	2101      	movs	r1, #1
 8003ff8:	2001      	movs	r0, #1
 8003ffa:	f7fc fbdd 	bl	80007b8 <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 8003ffe:	4b05      	ldr	r3, [pc, #20]	; (8004014 <menu+0x26f0>)
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d130      	bne.n	8004068 <menu+0x2744>
				lcd_print(2, 1, "Kac Saniye     ");
 8004006:	4a12      	ldr	r2, [pc, #72]	; (8004050 <menu+0x272c>)
 8004008:	2101      	movs	r1, #1
 800400a:	2002      	movs	r0, #2
 800400c:	f7fc fbd4 	bl	80007b8 <lcd_print>
 8004010:	e033      	b.n	800407a <menu+0x2756>
 8004012:	bf00      	nop
 8004014:	20000cbe 	.word	0x20000cbe
 8004018:	0800e4f4 	.word	0x0800e4f4
 800401c:	20000cb0 	.word	0x20000cb0
 8004020:	0800e498 	.word	0x0800e498
 8004024:	0800e4ac 	.word	0x0800e4ac
 8004028:	0800e4bc 	.word	0x0800e4bc
 800402c:	0800e4d0 	.word	0x0800e4d0
 8004030:	40010800 	.word	0x40010800
 8004034:	20000ccc 	.word	0x20000ccc
 8004038:	20000b38 	.word	0x20000b38
 800403c:	20000ca3 	.word	0x20000ca3
 8004040:	20000cc9 	.word	0x20000cc9
 8004044:	20000c9d 	.word	0x20000c9d
 8004048:	0800e504 	.word	0x0800e504
 800404c:	0800e518 	.word	0x0800e518
 8004050:	0800e1b8 	.word	0x0800e1b8
 8004054:	0800e52c 	.word	0x0800e52c
 8004058:	20000cb1 	.word	0x20000cb1
 800405c:	20000bcc 	.word	0x20000bcc
 8004060:	0800e53c 	.word	0x0800e53c
 8004064:	0800e550 	.word	0x0800e550
			} else if(dilSecim == 1) {
 8004068:	4b98      	ldr	r3, [pc, #608]	; (80042cc <menu+0x29a8>)
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d104      	bne.n	800407a <menu+0x2756>
				lcd_print(2, 1, "Second         ");
 8004070:	4a97      	ldr	r2, [pc, #604]	; (80042d0 <menu+0x29ac>)
 8004072:	2101      	movs	r1, #1
 8004074:	2002      	movs	r0, #2
 8004076:	f7fc fb9f 	bl	80007b8 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 800407a:	4b96      	ldr	r3, [pc, #600]	; (80042d4 <menu+0x29b0>)
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	220a      	movs	r2, #10
 8004080:	4995      	ldr	r1, [pc, #596]	; (80042d8 <menu+0x29b4>)
 8004082:	4618      	mov	r0, r3
 8004084:	f008 fff8 	bl	800d078 <itoa>
		lcd_print(2,16,snum);
 8004088:	4a93      	ldr	r2, [pc, #588]	; (80042d8 <menu+0x29b4>)
 800408a:	2110      	movs	r1, #16
 800408c:	2002      	movs	r0, #2
 800408e:	f7fc fb93 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004092:	2102      	movs	r1, #2
 8004094:	4891      	ldr	r0, [pc, #580]	; (80042dc <menu+0x29b8>)
 8004096:	f005 ffc3 	bl	800a020 <HAL_GPIO_ReadPin>
 800409a:	4603      	mov	r3, r0
 800409c:	2b01      	cmp	r3, #1
 800409e:	d115      	bne.n	80040cc <menu+0x27a8>
 80040a0:	4b8f      	ldr	r3, [pc, #572]	; (80042e0 <menu+0x29bc>)
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	f083 0301 	eor.w	r3, r3, #1
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00e      	beq.n	80040cc <menu+0x27a8>
			asagiValfTmr = asagiValfTmr + 1;
 80040ae:	4b89      	ldr	r3, [pc, #548]	; (80042d4 <menu+0x29b0>)
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	3301      	adds	r3, #1
 80040b4:	b2da      	uxtb	r2, r3
 80040b6:	4b87      	ldr	r3, [pc, #540]	; (80042d4 <menu+0x29b0>)
 80040b8:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 80040ba:	4b86      	ldr	r3, [pc, #536]	; (80042d4 <menu+0x29b0>)
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	2b05      	cmp	r3, #5
 80040c0:	d902      	bls.n	80040c8 <menu+0x27a4>
				asagiValfTmr = 0;
 80040c2:	4b84      	ldr	r3, [pc, #528]	; (80042d4 <menu+0x29b0>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80040c8:	f002 f9ca 	bl	8006460 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80040cc:	2104      	movs	r1, #4
 80040ce:	4883      	ldr	r0, [pc, #524]	; (80042dc <menu+0x29b8>)
 80040d0:	f005 ffa6 	bl	800a020 <HAL_GPIO_ReadPin>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d115      	bne.n	8004106 <menu+0x27e2>
 80040da:	4b81      	ldr	r3, [pc, #516]	; (80042e0 <menu+0x29bc>)
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	f083 0301 	eor.w	r3, r3, #1
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00e      	beq.n	8004106 <menu+0x27e2>
			asagiValfTmr = asagiValfTmr - 1;
 80040e8:	4b7a      	ldr	r3, [pc, #488]	; (80042d4 <menu+0x29b0>)
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	3b01      	subs	r3, #1
 80040ee:	b2da      	uxtb	r2, r3
 80040f0:	4b78      	ldr	r3, [pc, #480]	; (80042d4 <menu+0x29b0>)
 80040f2:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 80040f4:	4b77      	ldr	r3, [pc, #476]	; (80042d4 <menu+0x29b0>)
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	2b06      	cmp	r3, #6
 80040fa:	d902      	bls.n	8004102 <menu+0x27de>
		   		asagiValfTmr = 5;
 80040fc:	4b75      	ldr	r3, [pc, #468]	; (80042d4 <menu+0x29b0>)
 80040fe:	2205      	movs	r2, #5
 8004100:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004102:	f002 f9ad 	bl	8006460 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004106:	2108      	movs	r1, #8
 8004108:	4874      	ldr	r0, [pc, #464]	; (80042dc <menu+0x29b8>)
 800410a:	f005 ff89 	bl	800a020 <HAL_GPIO_ReadPin>
 800410e:	4603      	mov	r3, r0
 8004110:	2b01      	cmp	r3, #1
 8004112:	d10d      	bne.n	8004130 <menu+0x280c>
 8004114:	4b72      	ldr	r3, [pc, #456]	; (80042e0 <menu+0x29bc>)
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	f083 0301 	eor.w	r3, r3, #1
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d006      	beq.n	8004130 <menu+0x280c>
			eepromData[21] = asagiValfTmr;
 8004122:	4b6c      	ldr	r3, [pc, #432]	; (80042d4 <menu+0x29b0>)
 8004124:	781a      	ldrb	r2, [r3, #0]
 8004126:	4b6f      	ldr	r3, [pc, #444]	; (80042e4 <menu+0x29c0>)
 8004128:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 800412a:	4b6f      	ldr	r3, [pc, #444]	; (80042e8 <menu+0x29c4>)
 800412c:	2201      	movs	r2, #1
 800412e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8004130:	4b6e      	ldr	r3, [pc, #440]	; (80042ec <menu+0x29c8>)
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	2b18      	cmp	r3, #24
 8004136:	f040 809d 	bne.w	8004274 <menu+0x2950>
		if(devirmeYuruyusSecim == 2) {
 800413a:	4b6d      	ldr	r3, [pc, #436]	; (80042f0 <menu+0x29cc>)
 800413c:	781b      	ldrb	r3, [r3, #0]
 800413e:	2b02      	cmp	r3, #2
 8004140:	d113      	bne.n	800416a <menu+0x2846>
			if(dilSecim == 0) {
 8004142:	4b62      	ldr	r3, [pc, #392]	; (80042cc <menu+0x29a8>)
 8004144:	781b      	ldrb	r3, [r3, #0]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d105      	bne.n	8004156 <menu+0x2832>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 800414a:	4a6a      	ldr	r2, [pc, #424]	; (80042f4 <menu+0x29d0>)
 800414c:	2101      	movs	r1, #1
 800414e:	2001      	movs	r0, #1
 8004150:	f7fc fb32 	bl	80007b8 <lcd_print>
 8004154:	e020      	b.n	8004198 <menu+0x2874>
			} else if(dilSecim == 1) {
 8004156:	4b5d      	ldr	r3, [pc, #372]	; (80042cc <menu+0x29a8>)
 8004158:	781b      	ldrb	r3, [r3, #0]
 800415a:	2b01      	cmp	r3, #1
 800415c:	d11c      	bne.n	8004198 <menu+0x2874>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 800415e:	4a66      	ldr	r2, [pc, #408]	; (80042f8 <menu+0x29d4>)
 8004160:	2101      	movs	r1, #1
 8004162:	2001      	movs	r0, #1
 8004164:	f7fc fb28 	bl	80007b8 <lcd_print>
 8004168:	e016      	b.n	8004198 <menu+0x2874>
			}
		} else if(devirmeYuruyusSecim == 1) {
 800416a:	4b61      	ldr	r3, [pc, #388]	; (80042f0 <menu+0x29cc>)
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	2b01      	cmp	r3, #1
 8004170:	d112      	bne.n	8004198 <menu+0x2874>
			if(dilSecim == 0) {
 8004172:	4b56      	ldr	r3, [pc, #344]	; (80042cc <menu+0x29a8>)
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d105      	bne.n	8004186 <menu+0x2862>
				lcd_print(1, 1, "iLERi VALF SURE ");
 800417a:	4a60      	ldr	r2, [pc, #384]	; (80042fc <menu+0x29d8>)
 800417c:	2101      	movs	r1, #1
 800417e:	2001      	movs	r0, #1
 8004180:	f7fc fb1a 	bl	80007b8 <lcd_print>
 8004184:	e008      	b.n	8004198 <menu+0x2874>
			} else if(dilSecim == 1) {
 8004186:	4b51      	ldr	r3, [pc, #324]	; (80042cc <menu+0x29a8>)
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	2b01      	cmp	r3, #1
 800418c:	d104      	bne.n	8004198 <menu+0x2874>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 800418e:	4a5c      	ldr	r2, [pc, #368]	; (8004300 <menu+0x29dc>)
 8004190:	2101      	movs	r1, #1
 8004192:	2001      	movs	r0, #1
 8004194:	f7fc fb10 	bl	80007b8 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8004198:	4b4c      	ldr	r3, [pc, #304]	; (80042cc <menu+0x29a8>)
 800419a:	781b      	ldrb	r3, [r3, #0]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d105      	bne.n	80041ac <menu+0x2888>
				lcd_print(2, 1, "Kac Saniye     ");
 80041a0:	4a58      	ldr	r2, [pc, #352]	; (8004304 <menu+0x29e0>)
 80041a2:	2101      	movs	r1, #1
 80041a4:	2002      	movs	r0, #2
 80041a6:	f7fc fb07 	bl	80007b8 <lcd_print>
 80041aa:	e008      	b.n	80041be <menu+0x289a>
			} else if(dilSecim == 1) {
 80041ac:	4b47      	ldr	r3, [pc, #284]	; (80042cc <menu+0x29a8>)
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d104      	bne.n	80041be <menu+0x289a>
				lcd_print(2, 1, "Second         ");
 80041b4:	4a46      	ldr	r2, [pc, #280]	; (80042d0 <menu+0x29ac>)
 80041b6:	2101      	movs	r1, #1
 80041b8:	2002      	movs	r0, #2
 80041ba:	f7fc fafd 	bl	80007b8 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 80041be:	4b52      	ldr	r3, [pc, #328]	; (8004308 <menu+0x29e4>)
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	220a      	movs	r2, #10
 80041c4:	4944      	ldr	r1, [pc, #272]	; (80042d8 <menu+0x29b4>)
 80041c6:	4618      	mov	r0, r3
 80041c8:	f008 ff56 	bl	800d078 <itoa>
		lcd_print(2, 16, snum);
 80041cc:	4a42      	ldr	r2, [pc, #264]	; (80042d8 <menu+0x29b4>)
 80041ce:	2110      	movs	r1, #16
 80041d0:	2002      	movs	r0, #2
 80041d2:	f7fc faf1 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80041d6:	2102      	movs	r1, #2
 80041d8:	4840      	ldr	r0, [pc, #256]	; (80042dc <menu+0x29b8>)
 80041da:	f005 ff21 	bl	800a020 <HAL_GPIO_ReadPin>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d115      	bne.n	8004210 <menu+0x28ec>
 80041e4:	4b3e      	ldr	r3, [pc, #248]	; (80042e0 <menu+0x29bc>)
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	f083 0301 	eor.w	r3, r3, #1
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d00e      	beq.n	8004210 <menu+0x28ec>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 80041f2:	4b45      	ldr	r3, [pc, #276]	; (8004308 <menu+0x29e4>)
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	3301      	adds	r3, #1
 80041f8:	b2da      	uxtb	r2, r3
 80041fa:	4b43      	ldr	r3, [pc, #268]	; (8004308 <menu+0x29e4>)
 80041fc:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 80041fe:	4b42      	ldr	r3, [pc, #264]	; (8004308 <menu+0x29e4>)
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	2b05      	cmp	r3, #5
 8004204:	d902      	bls.n	800420c <menu+0x28e8>
				devirmeYukariIleriTmr = 0;
 8004206:	4b40      	ldr	r3, [pc, #256]	; (8004308 <menu+0x29e4>)
 8004208:	2200      	movs	r2, #0
 800420a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800420c:	f002 f928 	bl	8006460 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004210:	2104      	movs	r1, #4
 8004212:	4832      	ldr	r0, [pc, #200]	; (80042dc <menu+0x29b8>)
 8004214:	f005 ff04 	bl	800a020 <HAL_GPIO_ReadPin>
 8004218:	4603      	mov	r3, r0
 800421a:	2b01      	cmp	r3, #1
 800421c:	d115      	bne.n	800424a <menu+0x2926>
 800421e:	4b30      	ldr	r3, [pc, #192]	; (80042e0 <menu+0x29bc>)
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	f083 0301 	eor.w	r3, r3, #1
 8004226:	b2db      	uxtb	r3, r3
 8004228:	2b00      	cmp	r3, #0
 800422a:	d00e      	beq.n	800424a <menu+0x2926>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 800422c:	4b36      	ldr	r3, [pc, #216]	; (8004308 <menu+0x29e4>)
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	3b01      	subs	r3, #1
 8004232:	b2da      	uxtb	r2, r3
 8004234:	4b34      	ldr	r3, [pc, #208]	; (8004308 <menu+0x29e4>)
 8004236:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8004238:	4b33      	ldr	r3, [pc, #204]	; (8004308 <menu+0x29e4>)
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	2b06      	cmp	r3, #6
 800423e:	d902      	bls.n	8004246 <menu+0x2922>
		   		devirmeYukariIleriTmr = 5;
 8004240:	4b31      	ldr	r3, [pc, #196]	; (8004308 <menu+0x29e4>)
 8004242:	2205      	movs	r2, #5
 8004244:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004246:	f002 f90b 	bl	8006460 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800424a:	2108      	movs	r1, #8
 800424c:	4823      	ldr	r0, [pc, #140]	; (80042dc <menu+0x29b8>)
 800424e:	f005 fee7 	bl	800a020 <HAL_GPIO_ReadPin>
 8004252:	4603      	mov	r3, r0
 8004254:	2b01      	cmp	r3, #1
 8004256:	d10d      	bne.n	8004274 <menu+0x2950>
 8004258:	4b21      	ldr	r3, [pc, #132]	; (80042e0 <menu+0x29bc>)
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	f083 0301 	eor.w	r3, r3, #1
 8004260:	b2db      	uxtb	r3, r3
 8004262:	2b00      	cmp	r3, #0
 8004264:	d006      	beq.n	8004274 <menu+0x2950>
			eepromData[22] = devirmeYukariIleriTmr;
 8004266:	4b28      	ldr	r3, [pc, #160]	; (8004308 <menu+0x29e4>)
 8004268:	781a      	ldrb	r2, [r3, #0]
 800426a:	4b1e      	ldr	r3, [pc, #120]	; (80042e4 <menu+0x29c0>)
 800426c:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 800426e:	4b1e      	ldr	r3, [pc, #120]	; (80042e8 <menu+0x29c4>)
 8004270:	2201      	movs	r2, #1
 8004272:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8004274:	4b1d      	ldr	r3, [pc, #116]	; (80042ec <menu+0x29c8>)
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	2b19      	cmp	r3, #25
 800427a:	f040 80c4 	bne.w	8004406 <menu+0x2ae2>
		if(devirmeYuruyusSecim == 2) {
 800427e:	4b1c      	ldr	r3, [pc, #112]	; (80042f0 <menu+0x29cc>)
 8004280:	781b      	ldrb	r3, [r3, #0]
 8004282:	2b02      	cmp	r3, #2
 8004284:	d113      	bne.n	80042ae <menu+0x298a>
			if(dilSecim == 0) {
 8004286:	4b11      	ldr	r3, [pc, #68]	; (80042cc <menu+0x29a8>)
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d105      	bne.n	800429a <menu+0x2976>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 800428e:	4a1f      	ldr	r2, [pc, #124]	; (800430c <menu+0x29e8>)
 8004290:	2101      	movs	r1, #1
 8004292:	2001      	movs	r0, #1
 8004294:	f7fc fa90 	bl	80007b8 <lcd_print>
 8004298:	e047      	b.n	800432a <menu+0x2a06>
			} else if(dilSecim == 1) {
 800429a:	4b0c      	ldr	r3, [pc, #48]	; (80042cc <menu+0x29a8>)
 800429c:	781b      	ldrb	r3, [r3, #0]
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d143      	bne.n	800432a <menu+0x2a06>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 80042a2:	4a1b      	ldr	r2, [pc, #108]	; (8004310 <menu+0x29ec>)
 80042a4:	2101      	movs	r1, #1
 80042a6:	2001      	movs	r0, #1
 80042a8:	f7fc fa86 	bl	80007b8 <lcd_print>
 80042ac:	e03d      	b.n	800432a <menu+0x2a06>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80042ae:	4b10      	ldr	r3, [pc, #64]	; (80042f0 <menu+0x29cc>)
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	2b01      	cmp	r3, #1
 80042b4:	d139      	bne.n	800432a <menu+0x2a06>
			if(dilSecim == 0) {
 80042b6:	4b05      	ldr	r3, [pc, #20]	; (80042cc <menu+0x29a8>)
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d12c      	bne.n	8004318 <menu+0x29f4>
				lcd_print(1, 1, "GERi VALF SURE  ");
 80042be:	4a15      	ldr	r2, [pc, #84]	; (8004314 <menu+0x29f0>)
 80042c0:	2101      	movs	r1, #1
 80042c2:	2001      	movs	r0, #1
 80042c4:	f7fc fa78 	bl	80007b8 <lcd_print>
 80042c8:	e02f      	b.n	800432a <menu+0x2a06>
 80042ca:	bf00      	nop
 80042cc:	20000cbe 	.word	0x20000cbe
 80042d0:	0800e52c 	.word	0x0800e52c
 80042d4:	20000cb2 	.word	0x20000cb2
 80042d8:	20000bcc 	.word	0x20000bcc
 80042dc:	40010800 	.word	0x40010800
 80042e0:	20000ccc 	.word	0x20000ccc
 80042e4:	20000b38 	.word	0x20000b38
 80042e8:	20000cc9 	.word	0x20000cc9
 80042ec:	20000c9d 	.word	0x20000c9d
 80042f0:	20000cac 	.word	0x20000cac
 80042f4:	0800e564 	.word	0x0800e564
 80042f8:	0800e578 	.word	0x0800e578
 80042fc:	0800e58c 	.word	0x0800e58c
 8004300:	0800e5a0 	.word	0x0800e5a0
 8004304:	0800e1b8 	.word	0x0800e1b8
 8004308:	20000cb3 	.word	0x20000cb3
 800430c:	0800e5b4 	.word	0x0800e5b4
 8004310:	0800e5c8 	.word	0x0800e5c8
 8004314:	0800e5dc 	.word	0x0800e5dc
			} else if(dilSecim == 1) {
 8004318:	4b73      	ldr	r3, [pc, #460]	; (80044e8 <menu+0x2bc4>)
 800431a:	781b      	ldrb	r3, [r3, #0]
 800431c:	2b01      	cmp	r3, #1
 800431e:	d104      	bne.n	800432a <menu+0x2a06>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8004320:	4a72      	ldr	r2, [pc, #456]	; (80044ec <menu+0x2bc8>)
 8004322:	2101      	movs	r1, #1
 8004324:	2001      	movs	r0, #1
 8004326:	f7fc fa47 	bl	80007b8 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 800432a:	4b6f      	ldr	r3, [pc, #444]	; (80044e8 <menu+0x2bc4>)
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d105      	bne.n	800433e <menu+0x2a1a>
				lcd_print(2, 1, "Kac Saniye     ");
 8004332:	4a6f      	ldr	r2, [pc, #444]	; (80044f0 <menu+0x2bcc>)
 8004334:	2101      	movs	r1, #1
 8004336:	2002      	movs	r0, #2
 8004338:	f7fc fa3e 	bl	80007b8 <lcd_print>
 800433c:	e008      	b.n	8004350 <menu+0x2a2c>
			} else if(dilSecim == 1) {
 800433e:	4b6a      	ldr	r3, [pc, #424]	; (80044e8 <menu+0x2bc4>)
 8004340:	781b      	ldrb	r3, [r3, #0]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d104      	bne.n	8004350 <menu+0x2a2c>
				lcd_print(2, 1, "Second         ");
 8004346:	4a6b      	ldr	r2, [pc, #428]	; (80044f4 <menu+0x2bd0>)
 8004348:	2101      	movs	r1, #1
 800434a:	2002      	movs	r0, #2
 800434c:	f7fc fa34 	bl	80007b8 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8004350:	4b69      	ldr	r3, [pc, #420]	; (80044f8 <menu+0x2bd4>)
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	220a      	movs	r2, #10
 8004356:	4969      	ldr	r1, [pc, #420]	; (80044fc <menu+0x2bd8>)
 8004358:	4618      	mov	r0, r3
 800435a:	f008 fe8d 	bl	800d078 <itoa>
		lcd_print(2,16,snum);
 800435e:	4a67      	ldr	r2, [pc, #412]	; (80044fc <menu+0x2bd8>)
 8004360:	2110      	movs	r1, #16
 8004362:	2002      	movs	r0, #2
 8004364:	f7fc fa28 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004368:	2102      	movs	r1, #2
 800436a:	4865      	ldr	r0, [pc, #404]	; (8004500 <menu+0x2bdc>)
 800436c:	f005 fe58 	bl	800a020 <HAL_GPIO_ReadPin>
 8004370:	4603      	mov	r3, r0
 8004372:	2b01      	cmp	r3, #1
 8004374:	d115      	bne.n	80043a2 <menu+0x2a7e>
 8004376:	4b63      	ldr	r3, [pc, #396]	; (8004504 <menu+0x2be0>)
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	f083 0301 	eor.w	r3, r3, #1
 800437e:	b2db      	uxtb	r3, r3
 8004380:	2b00      	cmp	r3, #0
 8004382:	d00e      	beq.n	80043a2 <menu+0x2a7e>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8004384:	4b5c      	ldr	r3, [pc, #368]	; (80044f8 <menu+0x2bd4>)
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	3301      	adds	r3, #1
 800438a:	b2da      	uxtb	r2, r3
 800438c:	4b5a      	ldr	r3, [pc, #360]	; (80044f8 <menu+0x2bd4>)
 800438e:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8004390:	4b59      	ldr	r3, [pc, #356]	; (80044f8 <menu+0x2bd4>)
 8004392:	781b      	ldrb	r3, [r3, #0]
 8004394:	2b05      	cmp	r3, #5
 8004396:	d902      	bls.n	800439e <menu+0x2a7a>
				devirmeAsagiGeriTmr = 0;
 8004398:	4b57      	ldr	r3, [pc, #348]	; (80044f8 <menu+0x2bd4>)
 800439a:	2200      	movs	r2, #0
 800439c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800439e:	f002 f85f 	bl	8006460 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80043a2:	2104      	movs	r1, #4
 80043a4:	4856      	ldr	r0, [pc, #344]	; (8004500 <menu+0x2bdc>)
 80043a6:	f005 fe3b 	bl	800a020 <HAL_GPIO_ReadPin>
 80043aa:	4603      	mov	r3, r0
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	d115      	bne.n	80043dc <menu+0x2ab8>
 80043b0:	4b54      	ldr	r3, [pc, #336]	; (8004504 <menu+0x2be0>)
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	f083 0301 	eor.w	r3, r3, #1
 80043b8:	b2db      	uxtb	r3, r3
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d00e      	beq.n	80043dc <menu+0x2ab8>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 80043be:	4b4e      	ldr	r3, [pc, #312]	; (80044f8 <menu+0x2bd4>)
 80043c0:	781b      	ldrb	r3, [r3, #0]
 80043c2:	3b01      	subs	r3, #1
 80043c4:	b2da      	uxtb	r2, r3
 80043c6:	4b4c      	ldr	r3, [pc, #304]	; (80044f8 <menu+0x2bd4>)
 80043c8:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 80043ca:	4b4b      	ldr	r3, [pc, #300]	; (80044f8 <menu+0x2bd4>)
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	2b06      	cmp	r3, #6
 80043d0:	d902      	bls.n	80043d8 <menu+0x2ab4>
		   		devirmeAsagiGeriTmr = 5;
 80043d2:	4b49      	ldr	r3, [pc, #292]	; (80044f8 <menu+0x2bd4>)
 80043d4:	2205      	movs	r2, #5
 80043d6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80043d8:	f002 f842 	bl	8006460 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80043dc:	2108      	movs	r1, #8
 80043de:	4848      	ldr	r0, [pc, #288]	; (8004500 <menu+0x2bdc>)
 80043e0:	f005 fe1e 	bl	800a020 <HAL_GPIO_ReadPin>
 80043e4:	4603      	mov	r3, r0
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	d10d      	bne.n	8004406 <menu+0x2ae2>
 80043ea:	4b46      	ldr	r3, [pc, #280]	; (8004504 <menu+0x2be0>)
 80043ec:	781b      	ldrb	r3, [r3, #0]
 80043ee:	f083 0301 	eor.w	r3, r3, #1
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d006      	beq.n	8004406 <menu+0x2ae2>
			eepromData[23] = devirmeAsagiGeriTmr;
 80043f8:	4b3f      	ldr	r3, [pc, #252]	; (80044f8 <menu+0x2bd4>)
 80043fa:	781a      	ldrb	r2, [r3, #0]
 80043fc:	4b42      	ldr	r3, [pc, #264]	; (8004508 <menu+0x2be4>)
 80043fe:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8004400:	4b42      	ldr	r3, [pc, #264]	; (800450c <menu+0x2be8>)
 8004402:	2201      	movs	r2, #1
 8004404:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8004406:	4b42      	ldr	r3, [pc, #264]	; (8004510 <menu+0x2bec>)
 8004408:	781b      	ldrb	r3, [r3, #0]
 800440a:	2b1a      	cmp	r3, #26
 800440c:	f040 80ec 	bne.w	80045e8 <menu+0x2cc4>
		if(dilSecim == 0) {
 8004410:	4b35      	ldr	r3, [pc, #212]	; (80044e8 <menu+0x2bc4>)
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d105      	bne.n	8004424 <menu+0x2b00>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8004418:	4a3e      	ldr	r2, [pc, #248]	; (8004514 <menu+0x2bf0>)
 800441a:	2101      	movs	r1, #1
 800441c:	2001      	movs	r0, #1
 800441e:	f7fc f9cb 	bl	80007b8 <lcd_print>
 8004422:	e008      	b.n	8004436 <menu+0x2b12>
		} else if(dilSecim == 1) {
 8004424:	4b30      	ldr	r3, [pc, #192]	; (80044e8 <menu+0x2bc4>)
 8004426:	781b      	ldrb	r3, [r3, #0]
 8004428:	2b01      	cmp	r3, #1
 800442a:	d104      	bne.n	8004436 <menu+0x2b12>
			lcd_print(1, 1, "WORKING TIME    ");
 800442c:	4a3a      	ldr	r2, [pc, #232]	; (8004518 <menu+0x2bf4>)
 800442e:	2101      	movs	r1, #1
 8004430:	2001      	movs	r0, #1
 8004432:	f7fc f9c1 	bl	80007b8 <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 8004436:	4b39      	ldr	r3, [pc, #228]	; (800451c <menu+0x2bf8>)
 8004438:	781b      	ldrb	r3, [r3, #0]
 800443a:	2b63      	cmp	r3, #99	; 0x63
 800443c:	d91e      	bls.n	800447c <menu+0x2b58>
			if(dilSecim == 0) {
 800443e:	4b2a      	ldr	r3, [pc, #168]	; (80044e8 <menu+0x2bc4>)
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d104      	bne.n	8004450 <menu+0x2b2c>
				lcd_print(2, 1, "Kac Saniye     ");
 8004446:	4a2a      	ldr	r2, [pc, #168]	; (80044f0 <menu+0x2bcc>)
 8004448:	2101      	movs	r1, #1
 800444a:	2002      	movs	r0, #2
 800444c:	f7fc f9b4 	bl	80007b8 <lcd_print>
			}
			if(dilSecim == 1) {
 8004450:	4b25      	ldr	r3, [pc, #148]	; (80044e8 <menu+0x2bc4>)
 8004452:	781b      	ldrb	r3, [r3, #0]
 8004454:	2b01      	cmp	r3, #1
 8004456:	d104      	bne.n	8004462 <menu+0x2b3e>
				lcd_print(2, 1, "Second         ");
 8004458:	4a26      	ldr	r2, [pc, #152]	; (80044f4 <menu+0x2bd0>)
 800445a:	2101      	movs	r1, #1
 800445c:	2002      	movs	r0, #2
 800445e:	f7fc f9ab 	bl	80007b8 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8004462:	4b2e      	ldr	r3, [pc, #184]	; (800451c <menu+0x2bf8>)
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	220a      	movs	r2, #10
 8004468:	4924      	ldr	r1, [pc, #144]	; (80044fc <menu+0x2bd8>)
 800446a:	4618      	mov	r0, r3
 800446c:	f008 fe04 	bl	800d078 <itoa>
			lcd_print(2,14,snum);
 8004470:	4a22      	ldr	r2, [pc, #136]	; (80044fc <menu+0x2bd8>)
 8004472:	210e      	movs	r1, #14
 8004474:	2002      	movs	r0, #2
 8004476:	f7fc f99f 	bl	80007b8 <lcd_print>
 800447a:	e066      	b.n	800454a <menu+0x2c26>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 800447c:	4b27      	ldr	r3, [pc, #156]	; (800451c <menu+0x2bf8>)
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	2b09      	cmp	r3, #9
 8004482:	d923      	bls.n	80044cc <menu+0x2ba8>
 8004484:	4b25      	ldr	r3, [pc, #148]	; (800451c <menu+0x2bf8>)
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	2b63      	cmp	r3, #99	; 0x63
 800448a:	d81f      	bhi.n	80044cc <menu+0x2ba8>
			if(dilSecim == 0) {
 800448c:	4b16      	ldr	r3, [pc, #88]	; (80044e8 <menu+0x2bc4>)
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d105      	bne.n	80044a0 <menu+0x2b7c>
				lcd_print(2, 1, "Kac Saniye     ");
 8004494:	4a16      	ldr	r2, [pc, #88]	; (80044f0 <menu+0x2bcc>)
 8004496:	2101      	movs	r1, #1
 8004498:	2002      	movs	r0, #2
 800449a:	f7fc f98d 	bl	80007b8 <lcd_print>
 800449e:	e008      	b.n	80044b2 <menu+0x2b8e>
			} else if(dilSecim == 1) {
 80044a0:	4b11      	ldr	r3, [pc, #68]	; (80044e8 <menu+0x2bc4>)
 80044a2:	781b      	ldrb	r3, [r3, #0]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d104      	bne.n	80044b2 <menu+0x2b8e>
				lcd_print(2, 1, "Second         ");
 80044a8:	4a12      	ldr	r2, [pc, #72]	; (80044f4 <menu+0x2bd0>)
 80044aa:	2101      	movs	r1, #1
 80044ac:	2002      	movs	r0, #2
 80044ae:	f7fc f983 	bl	80007b8 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 80044b2:	4b1a      	ldr	r3, [pc, #104]	; (800451c <menu+0x2bf8>)
 80044b4:	781b      	ldrb	r3, [r3, #0]
 80044b6:	220a      	movs	r2, #10
 80044b8:	4910      	ldr	r1, [pc, #64]	; (80044fc <menu+0x2bd8>)
 80044ba:	4618      	mov	r0, r3
 80044bc:	f008 fddc 	bl	800d078 <itoa>
			lcd_print(2, 15, snum);
 80044c0:	4a0e      	ldr	r2, [pc, #56]	; (80044fc <menu+0x2bd8>)
 80044c2:	210f      	movs	r1, #15
 80044c4:	2002      	movs	r0, #2
 80044c6:	f7fc f977 	bl	80007b8 <lcd_print>
 80044ca:	e03e      	b.n	800454a <menu+0x2c26>
		} else if(makineCalismaTmr <=  9) {
 80044cc:	4b13      	ldr	r3, [pc, #76]	; (800451c <menu+0x2bf8>)
 80044ce:	781b      	ldrb	r3, [r3, #0]
 80044d0:	2b09      	cmp	r3, #9
 80044d2:	d83a      	bhi.n	800454a <menu+0x2c26>
			if(dilSecim == 0) {
 80044d4:	4b04      	ldr	r3, [pc, #16]	; (80044e8 <menu+0x2bc4>)
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d121      	bne.n	8004520 <menu+0x2bfc>
				lcd_print(2, 1, "Kac Saniye     ");
 80044dc:	4a04      	ldr	r2, [pc, #16]	; (80044f0 <menu+0x2bcc>)
 80044de:	2101      	movs	r1, #1
 80044e0:	2002      	movs	r0, #2
 80044e2:	f7fc f969 	bl	80007b8 <lcd_print>
 80044e6:	e024      	b.n	8004532 <menu+0x2c0e>
 80044e8:	20000cbe 	.word	0x20000cbe
 80044ec:	0800e5f0 	.word	0x0800e5f0
 80044f0:	0800e1b8 	.word	0x0800e1b8
 80044f4:	0800e52c 	.word	0x0800e52c
 80044f8:	20000cb4 	.word	0x20000cb4
 80044fc:	20000bcc 	.word	0x20000bcc
 8004500:	40010800 	.word	0x40010800
 8004504:	20000ccc 	.word	0x20000ccc
 8004508:	20000b38 	.word	0x20000b38
 800450c:	20000cc9 	.word	0x20000cc9
 8004510:	20000c9d 	.word	0x20000c9d
 8004514:	0800e604 	.word	0x0800e604
 8004518:	0800e618 	.word	0x0800e618
 800451c:	20000cb5 	.word	0x20000cb5
			} else if(dilSecim == 1) {
 8004520:	4b8f      	ldr	r3, [pc, #572]	; (8004760 <menu+0x2e3c>)
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d104      	bne.n	8004532 <menu+0x2c0e>
				lcd_print(2, 1, "Second         ");
 8004528:	4a8e      	ldr	r2, [pc, #568]	; (8004764 <menu+0x2e40>)
 800452a:	2101      	movs	r1, #1
 800452c:	2002      	movs	r0, #2
 800452e:	f7fc f943 	bl	80007b8 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8004532:	4b8d      	ldr	r3, [pc, #564]	; (8004768 <menu+0x2e44>)
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	220a      	movs	r2, #10
 8004538:	498c      	ldr	r1, [pc, #560]	; (800476c <menu+0x2e48>)
 800453a:	4618      	mov	r0, r3
 800453c:	f008 fd9c 	bl	800d078 <itoa>
			lcd_print(2, 16, snum);
 8004540:	4a8a      	ldr	r2, [pc, #552]	; (800476c <menu+0x2e48>)
 8004542:	2110      	movs	r1, #16
 8004544:	2002      	movs	r0, #2
 8004546:	f7fc f937 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800454a:	2102      	movs	r1, #2
 800454c:	4888      	ldr	r0, [pc, #544]	; (8004770 <menu+0x2e4c>)
 800454e:	f005 fd67 	bl	800a020 <HAL_GPIO_ReadPin>
 8004552:	4603      	mov	r3, r0
 8004554:	2b01      	cmp	r3, #1
 8004556:	d115      	bne.n	8004584 <menu+0x2c60>
 8004558:	4b86      	ldr	r3, [pc, #536]	; (8004774 <menu+0x2e50>)
 800455a:	781b      	ldrb	r3, [r3, #0]
 800455c:	f083 0301 	eor.w	r3, r3, #1
 8004560:	b2db      	uxtb	r3, r3
 8004562:	2b00      	cmp	r3, #0
 8004564:	d00e      	beq.n	8004584 <menu+0x2c60>
			makineCalismaTmr = makineCalismaTmr + 1;
 8004566:	4b80      	ldr	r3, [pc, #512]	; (8004768 <menu+0x2e44>)
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	3301      	adds	r3, #1
 800456c:	b2da      	uxtb	r2, r3
 800456e:	4b7e      	ldr	r3, [pc, #504]	; (8004768 <menu+0x2e44>)
 8004570:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8004572:	4b7d      	ldr	r3, [pc, #500]	; (8004768 <menu+0x2e44>)
 8004574:	781b      	ldrb	r3, [r3, #0]
 8004576:	2bb4      	cmp	r3, #180	; 0xb4
 8004578:	d902      	bls.n	8004580 <menu+0x2c5c>
				makineCalismaTmr = 0;
 800457a:	4b7b      	ldr	r3, [pc, #492]	; (8004768 <menu+0x2e44>)
 800457c:	2200      	movs	r2, #0
 800457e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004580:	f001 ff6e 	bl	8006460 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004584:	2104      	movs	r1, #4
 8004586:	487a      	ldr	r0, [pc, #488]	; (8004770 <menu+0x2e4c>)
 8004588:	f005 fd4a 	bl	800a020 <HAL_GPIO_ReadPin>
 800458c:	4603      	mov	r3, r0
 800458e:	2b01      	cmp	r3, #1
 8004590:	d115      	bne.n	80045be <menu+0x2c9a>
 8004592:	4b78      	ldr	r3, [pc, #480]	; (8004774 <menu+0x2e50>)
 8004594:	781b      	ldrb	r3, [r3, #0]
 8004596:	f083 0301 	eor.w	r3, r3, #1
 800459a:	b2db      	uxtb	r3, r3
 800459c:	2b00      	cmp	r3, #0
 800459e:	d00e      	beq.n	80045be <menu+0x2c9a>
			makineCalismaTmr = makineCalismaTmr - 1;
 80045a0:	4b71      	ldr	r3, [pc, #452]	; (8004768 <menu+0x2e44>)
 80045a2:	781b      	ldrb	r3, [r3, #0]
 80045a4:	3b01      	subs	r3, #1
 80045a6:	b2da      	uxtb	r2, r3
 80045a8:	4b6f      	ldr	r3, [pc, #444]	; (8004768 <menu+0x2e44>)
 80045aa:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 80045ac:	4b6e      	ldr	r3, [pc, #440]	; (8004768 <menu+0x2e44>)
 80045ae:	781b      	ldrb	r3, [r3, #0]
 80045b0:	2bb5      	cmp	r3, #181	; 0xb5
 80045b2:	d902      	bls.n	80045ba <menu+0x2c96>
		   		makineCalismaTmr = 180;
 80045b4:	4b6c      	ldr	r3, [pc, #432]	; (8004768 <menu+0x2e44>)
 80045b6:	22b4      	movs	r2, #180	; 0xb4
 80045b8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80045ba:	f001 ff51 	bl	8006460 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80045be:	2108      	movs	r1, #8
 80045c0:	486b      	ldr	r0, [pc, #428]	; (8004770 <menu+0x2e4c>)
 80045c2:	f005 fd2d 	bl	800a020 <HAL_GPIO_ReadPin>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b01      	cmp	r3, #1
 80045ca:	d10d      	bne.n	80045e8 <menu+0x2cc4>
 80045cc:	4b69      	ldr	r3, [pc, #420]	; (8004774 <menu+0x2e50>)
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	f083 0301 	eor.w	r3, r3, #1
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d006      	beq.n	80045e8 <menu+0x2cc4>
			eepromData[24] = makineCalismaTmr;
 80045da:	4b63      	ldr	r3, [pc, #396]	; (8004768 <menu+0x2e44>)
 80045dc:	781a      	ldrb	r2, [r3, #0]
 80045de:	4b66      	ldr	r3, [pc, #408]	; (8004778 <menu+0x2e54>)
 80045e0:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 80045e2:	4b66      	ldr	r3, [pc, #408]	; (800477c <menu+0x2e58>)
 80045e4:	2201      	movs	r2, #1
 80045e6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 80045e8:	4b65      	ldr	r3, [pc, #404]	; (8004780 <menu+0x2e5c>)
 80045ea:	781b      	ldrb	r3, [r3, #0]
 80045ec:	2b1b      	cmp	r3, #27
 80045ee:	f040 8083 	bne.w	80046f8 <menu+0x2dd4>
		lcd_print(1, 1, "BUZZER          ");
 80045f2:	4a64      	ldr	r2, [pc, #400]	; (8004784 <menu+0x2e60>)
 80045f4:	2101      	movs	r1, #1
 80045f6:	2001      	movs	r0, #1
 80045f8:	f7fc f8de 	bl	80007b8 <lcd_print>

		if(buzzer == 0) {
 80045fc:	4b62      	ldr	r3, [pc, #392]	; (8004788 <menu+0x2e64>)
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d113      	bne.n	800462c <menu+0x2d08>
			if(dilSecim == 0) {
 8004604:	4b56      	ldr	r3, [pc, #344]	; (8004760 <menu+0x2e3c>)
 8004606:	781b      	ldrb	r3, [r3, #0]
 8004608:	2b00      	cmp	r3, #0
 800460a:	d105      	bne.n	8004618 <menu+0x2cf4>
				lcd_print(2, 1, "Pasif           ");
 800460c:	4a5f      	ldr	r2, [pc, #380]	; (800478c <menu+0x2e68>)
 800460e:	2101      	movs	r1, #1
 8004610:	2002      	movs	r0, #2
 8004612:	f7fc f8d1 	bl	80007b8 <lcd_print>
 8004616:	e020      	b.n	800465a <menu+0x2d36>
			} else if(dilSecim == 1) {
 8004618:	4b51      	ldr	r3, [pc, #324]	; (8004760 <menu+0x2e3c>)
 800461a:	781b      	ldrb	r3, [r3, #0]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d11c      	bne.n	800465a <menu+0x2d36>
				lcd_print(2, 1, "Passive         ");
 8004620:	4a5b      	ldr	r2, [pc, #364]	; (8004790 <menu+0x2e6c>)
 8004622:	2101      	movs	r1, #1
 8004624:	2002      	movs	r0, #2
 8004626:	f7fc f8c7 	bl	80007b8 <lcd_print>
 800462a:	e016      	b.n	800465a <menu+0x2d36>
			}
		} else if(buzzer == 1) {
 800462c:	4b56      	ldr	r3, [pc, #344]	; (8004788 <menu+0x2e64>)
 800462e:	781b      	ldrb	r3, [r3, #0]
 8004630:	2b01      	cmp	r3, #1
 8004632:	d112      	bne.n	800465a <menu+0x2d36>
			if(dilSecim == 0) {
 8004634:	4b4a      	ldr	r3, [pc, #296]	; (8004760 <menu+0x2e3c>)
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d105      	bne.n	8004648 <menu+0x2d24>
				lcd_print(2, 1, "Aktif           ");
 800463c:	4a55      	ldr	r2, [pc, #340]	; (8004794 <menu+0x2e70>)
 800463e:	2101      	movs	r1, #1
 8004640:	2002      	movs	r0, #2
 8004642:	f7fc f8b9 	bl	80007b8 <lcd_print>
 8004646:	e008      	b.n	800465a <menu+0x2d36>
			} else if(dilSecim == 1) {
 8004648:	4b45      	ldr	r3, [pc, #276]	; (8004760 <menu+0x2e3c>)
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	2b01      	cmp	r3, #1
 800464e:	d104      	bne.n	800465a <menu+0x2d36>
				lcd_print(2, 1, "Active          ");
 8004650:	4a51      	ldr	r2, [pc, #324]	; (8004798 <menu+0x2e74>)
 8004652:	2101      	movs	r1, #1
 8004654:	2002      	movs	r0, #2
 8004656:	f7fc f8af 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800465a:	2102      	movs	r1, #2
 800465c:	4844      	ldr	r0, [pc, #272]	; (8004770 <menu+0x2e4c>)
 800465e:	f005 fcdf 	bl	800a020 <HAL_GPIO_ReadPin>
 8004662:	4603      	mov	r3, r0
 8004664:	2b01      	cmp	r3, #1
 8004666:	d115      	bne.n	8004694 <menu+0x2d70>
 8004668:	4b42      	ldr	r3, [pc, #264]	; (8004774 <menu+0x2e50>)
 800466a:	781b      	ldrb	r3, [r3, #0]
 800466c:	f083 0301 	eor.w	r3, r3, #1
 8004670:	b2db      	uxtb	r3, r3
 8004672:	2b00      	cmp	r3, #0
 8004674:	d00e      	beq.n	8004694 <menu+0x2d70>
			buzzer = buzzer + 1;
 8004676:	4b44      	ldr	r3, [pc, #272]	; (8004788 <menu+0x2e64>)
 8004678:	781b      	ldrb	r3, [r3, #0]
 800467a:	3301      	adds	r3, #1
 800467c:	b2da      	uxtb	r2, r3
 800467e:	4b42      	ldr	r3, [pc, #264]	; (8004788 <menu+0x2e64>)
 8004680:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 8004682:	4b41      	ldr	r3, [pc, #260]	; (8004788 <menu+0x2e64>)
 8004684:	781b      	ldrb	r3, [r3, #0]
 8004686:	2b01      	cmp	r3, #1
 8004688:	d902      	bls.n	8004690 <menu+0x2d6c>
				buzzer = 0;
 800468a:	4b3f      	ldr	r3, [pc, #252]	; (8004788 <menu+0x2e64>)
 800468c:	2200      	movs	r2, #0
 800468e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004690:	f001 fee6 	bl	8006460 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004694:	2104      	movs	r1, #4
 8004696:	4836      	ldr	r0, [pc, #216]	; (8004770 <menu+0x2e4c>)
 8004698:	f005 fcc2 	bl	800a020 <HAL_GPIO_ReadPin>
 800469c:	4603      	mov	r3, r0
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d115      	bne.n	80046ce <menu+0x2daa>
 80046a2:	4b34      	ldr	r3, [pc, #208]	; (8004774 <menu+0x2e50>)
 80046a4:	781b      	ldrb	r3, [r3, #0]
 80046a6:	f083 0301 	eor.w	r3, r3, #1
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d00e      	beq.n	80046ce <menu+0x2daa>
			buzzer = buzzer - 1;
 80046b0:	4b35      	ldr	r3, [pc, #212]	; (8004788 <menu+0x2e64>)
 80046b2:	781b      	ldrb	r3, [r3, #0]
 80046b4:	3b01      	subs	r3, #1
 80046b6:	b2da      	uxtb	r2, r3
 80046b8:	4b33      	ldr	r3, [pc, #204]	; (8004788 <menu+0x2e64>)
 80046ba:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 80046bc:	4b32      	ldr	r3, [pc, #200]	; (8004788 <menu+0x2e64>)
 80046be:	781b      	ldrb	r3, [r3, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d002      	beq.n	80046ca <menu+0x2da6>
		   		buzzer = 1;
 80046c4:	4b30      	ldr	r3, [pc, #192]	; (8004788 <menu+0x2e64>)
 80046c6:	2201      	movs	r2, #1
 80046c8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80046ca:	f001 fec9 	bl	8006460 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80046ce:	2108      	movs	r1, #8
 80046d0:	4827      	ldr	r0, [pc, #156]	; (8004770 <menu+0x2e4c>)
 80046d2:	f005 fca5 	bl	800a020 <HAL_GPIO_ReadPin>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b01      	cmp	r3, #1
 80046da:	d10d      	bne.n	80046f8 <menu+0x2dd4>
 80046dc:	4b25      	ldr	r3, [pc, #148]	; (8004774 <menu+0x2e50>)
 80046de:	781b      	ldrb	r3, [r3, #0]
 80046e0:	f083 0301 	eor.w	r3, r3, #1
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d006      	beq.n	80046f8 <menu+0x2dd4>
			eepromData[25] = buzzer;
 80046ea:	4b27      	ldr	r3, [pc, #156]	; (8004788 <menu+0x2e64>)
 80046ec:	781a      	ldrb	r2, [r3, #0]
 80046ee:	4b22      	ldr	r3, [pc, #136]	; (8004778 <menu+0x2e54>)
 80046f0:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 80046f2:	4b22      	ldr	r3, [pc, #136]	; (800477c <menu+0x2e58>)
 80046f4:	2201      	movs	r2, #1
 80046f6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 80046f8:	4b21      	ldr	r3, [pc, #132]	; (8004780 <menu+0x2e5c>)
 80046fa:	781b      	ldrb	r3, [r3, #0]
 80046fc:	2b1c      	cmp	r3, #28
 80046fe:	f040 80ab 	bne.w	8004858 <menu+0x2f34>
		calismaSayModu = 0;
 8004702:	4b26      	ldr	r3, [pc, #152]	; (800479c <menu+0x2e78>)
 8004704:	2200      	movs	r2, #0
 8004706:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8004708:	4a25      	ldr	r2, [pc, #148]	; (80047a0 <menu+0x2e7c>)
 800470a:	2101      	movs	r1, #1
 800470c:	2001      	movs	r0, #1
 800470e:	f7fc f853 	bl	80007b8 <lcd_print>

		if(demoMode == 0) {
 8004712:	4b24      	ldr	r3, [pc, #144]	; (80047a4 <menu+0x2e80>)
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d113      	bne.n	8004742 <menu+0x2e1e>
			if(dilSecim == 0) {
 800471a:	4b11      	ldr	r3, [pc, #68]	; (8004760 <menu+0x2e3c>)
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	2b00      	cmp	r3, #0
 8004720:	d105      	bne.n	800472e <menu+0x2e0a>
				lcd_print(2, 1, "Pasif           ");
 8004722:	4a1a      	ldr	r2, [pc, #104]	; (800478c <menu+0x2e68>)
 8004724:	2101      	movs	r1, #1
 8004726:	2002      	movs	r0, #2
 8004728:	f7fc f846 	bl	80007b8 <lcd_print>
 800472c:	e045      	b.n	80047ba <menu+0x2e96>
			} else if(dilSecim == 1) {
 800472e:	4b0c      	ldr	r3, [pc, #48]	; (8004760 <menu+0x2e3c>)
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d141      	bne.n	80047ba <menu+0x2e96>
				lcd_print(2, 1, "Passive         ");
 8004736:	4a16      	ldr	r2, [pc, #88]	; (8004790 <menu+0x2e6c>)
 8004738:	2101      	movs	r1, #1
 800473a:	2002      	movs	r0, #2
 800473c:	f7fc f83c 	bl	80007b8 <lcd_print>
 8004740:	e03b      	b.n	80047ba <menu+0x2e96>
			}
		} else if(demoMode == 1) {
 8004742:	4b18      	ldr	r3, [pc, #96]	; (80047a4 <menu+0x2e80>)
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	2b01      	cmp	r3, #1
 8004748:	d137      	bne.n	80047ba <menu+0x2e96>
			if(dilSecim == 0){
 800474a:	4b05      	ldr	r3, [pc, #20]	; (8004760 <menu+0x2e3c>)
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d12a      	bne.n	80047a8 <menu+0x2e84>
				lcd_print(2, 1, "Aktif           ");
 8004752:	4a10      	ldr	r2, [pc, #64]	; (8004794 <menu+0x2e70>)
 8004754:	2101      	movs	r1, #1
 8004756:	2002      	movs	r0, #2
 8004758:	f7fc f82e 	bl	80007b8 <lcd_print>
 800475c:	e02d      	b.n	80047ba <menu+0x2e96>
 800475e:	bf00      	nop
 8004760:	20000cbe 	.word	0x20000cbe
 8004764:	0800e52c 	.word	0x0800e52c
 8004768:	20000cb5 	.word	0x20000cb5
 800476c:	20000bcc 	.word	0x20000bcc
 8004770:	40010800 	.word	0x40010800
 8004774:	20000ccc 	.word	0x20000ccc
 8004778:	20000b38 	.word	0x20000b38
 800477c:	20000cc9 	.word	0x20000cc9
 8004780:	20000c9d 	.word	0x20000c9d
 8004784:	0800e62c 	.word	0x0800e62c
 8004788:	20000cb9 	.word	0x20000cb9
 800478c:	0800df54 	.word	0x0800df54
 8004790:	0800df68 	.word	0x0800df68
 8004794:	0800dfb4 	.word	0x0800dfb4
 8004798:	0800dfc8 	.word	0x0800dfc8
 800479c:	20000cbd 	.word	0x20000cbd
 80047a0:	0800e640 	.word	0x0800e640
 80047a4:	20000cbb 	.word	0x20000cbb
			} else if(dilSecim == 1) {
 80047a8:	4b71      	ldr	r3, [pc, #452]	; (8004970 <menu+0x304c>)
 80047aa:	781b      	ldrb	r3, [r3, #0]
 80047ac:	2b01      	cmp	r3, #1
 80047ae:	d104      	bne.n	80047ba <menu+0x2e96>
				lcd_print(2, 1, "Active          ");
 80047b0:	4a70      	ldr	r2, [pc, #448]	; (8004974 <menu+0x3050>)
 80047b2:	2101      	movs	r1, #1
 80047b4:	2002      	movs	r0, #2
 80047b6:	f7fb ffff 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80047ba:	2102      	movs	r1, #2
 80047bc:	486e      	ldr	r0, [pc, #440]	; (8004978 <menu+0x3054>)
 80047be:	f005 fc2f 	bl	800a020 <HAL_GPIO_ReadPin>
 80047c2:	4603      	mov	r3, r0
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d115      	bne.n	80047f4 <menu+0x2ed0>
 80047c8:	4b6c      	ldr	r3, [pc, #432]	; (800497c <menu+0x3058>)
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	f083 0301 	eor.w	r3, r3, #1
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d00e      	beq.n	80047f4 <menu+0x2ed0>
			demoMode = demoMode + 1;
 80047d6:	4b6a      	ldr	r3, [pc, #424]	; (8004980 <menu+0x305c>)
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	3301      	adds	r3, #1
 80047dc:	b2da      	uxtb	r2, r3
 80047de:	4b68      	ldr	r3, [pc, #416]	; (8004980 <menu+0x305c>)
 80047e0:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 80047e2:	4b67      	ldr	r3, [pc, #412]	; (8004980 <menu+0x305c>)
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d902      	bls.n	80047f0 <menu+0x2ecc>
				demoMode = 0;
 80047ea:	4b65      	ldr	r3, [pc, #404]	; (8004980 <menu+0x305c>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80047f0:	f001 fe36 	bl	8006460 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80047f4:	2104      	movs	r1, #4
 80047f6:	4860      	ldr	r0, [pc, #384]	; (8004978 <menu+0x3054>)
 80047f8:	f005 fc12 	bl	800a020 <HAL_GPIO_ReadPin>
 80047fc:	4603      	mov	r3, r0
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d115      	bne.n	800482e <menu+0x2f0a>
 8004802:	4b5e      	ldr	r3, [pc, #376]	; (800497c <menu+0x3058>)
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	f083 0301 	eor.w	r3, r3, #1
 800480a:	b2db      	uxtb	r3, r3
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00e      	beq.n	800482e <menu+0x2f0a>
			demoMode = demoMode - 1;
 8004810:	4b5b      	ldr	r3, [pc, #364]	; (8004980 <menu+0x305c>)
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	3b01      	subs	r3, #1
 8004816:	b2da      	uxtb	r2, r3
 8004818:	4b59      	ldr	r3, [pc, #356]	; (8004980 <menu+0x305c>)
 800481a:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 800481c:	4b58      	ldr	r3, [pc, #352]	; (8004980 <menu+0x305c>)
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d002      	beq.n	800482a <menu+0x2f06>
		   		demoMode = 1;
 8004824:	4b56      	ldr	r3, [pc, #344]	; (8004980 <menu+0x305c>)
 8004826:	2201      	movs	r2, #1
 8004828:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800482a:	f001 fe19 	bl	8006460 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800482e:	2108      	movs	r1, #8
 8004830:	4851      	ldr	r0, [pc, #324]	; (8004978 <menu+0x3054>)
 8004832:	f005 fbf5 	bl	800a020 <HAL_GPIO_ReadPin>
 8004836:	4603      	mov	r3, r0
 8004838:	2b01      	cmp	r3, #1
 800483a:	d10d      	bne.n	8004858 <menu+0x2f34>
 800483c:	4b4f      	ldr	r3, [pc, #316]	; (800497c <menu+0x3058>)
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	f083 0301 	eor.w	r3, r3, #1
 8004844:	b2db      	uxtb	r3, r3
 8004846:	2b00      	cmp	r3, #0
 8004848:	d006      	beq.n	8004858 <menu+0x2f34>
			eepromData[26] = demoMode;
 800484a:	4b4d      	ldr	r3, [pc, #308]	; (8004980 <menu+0x305c>)
 800484c:	781a      	ldrb	r2, [r3, #0]
 800484e:	4b4d      	ldr	r3, [pc, #308]	; (8004984 <menu+0x3060>)
 8004850:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 8004852:	4b4d      	ldr	r3, [pc, #308]	; (8004988 <menu+0x3064>)
 8004854:	2201      	movs	r2, #1
 8004856:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 8004858:	4b4c      	ldr	r3, [pc, #304]	; (800498c <menu+0x3068>)
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	2b1d      	cmp	r3, #29
 800485e:	f040 8132 	bne.w	8004ac6 <menu+0x31a2>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 8004862:	4b4b      	ldr	r3, [pc, #300]	; (8004990 <menu+0x306c>)
 8004864:	781b      	ldrb	r3, [r3, #0]
 8004866:	2b00      	cmp	r3, #0
 8004868:	d113      	bne.n	8004892 <menu+0x2f6e>
 800486a:	4b4a      	ldr	r3, [pc, #296]	; (8004994 <menu+0x3070>)
 800486c:	781b      	ldrb	r3, [r3, #0]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10f      	bne.n	8004892 <menu+0x2f6e>
 8004872:	4b49      	ldr	r3, [pc, #292]	; (8004998 <menu+0x3074>)
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d10b      	bne.n	8004892 <menu+0x2f6e>
 800487a:	4b48      	ldr	r3, [pc, #288]	; (800499c <menu+0x3078>)
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d107      	bne.n	8004892 <menu+0x2f6e>
 8004882:	4b47      	ldr	r3, [pc, #284]	; (80049a0 <menu+0x307c>)
 8004884:	781b      	ldrb	r3, [r3, #0]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d103      	bne.n	8004892 <menu+0x2f6e>
			calismaSayisiYar = 0;
 800488a:	4b46      	ldr	r3, [pc, #280]	; (80049a4 <menu+0x3080>)
 800488c:	2200      	movs	r2, #0
 800488e:	701a      	strb	r2, [r3, #0]
 8004890:	e002      	b.n	8004898 <menu+0x2f74>
		} else {
			calismaSayisiYar = 1;
 8004892:	4b44      	ldr	r3, [pc, #272]	; (80049a4 <menu+0x3080>)
 8004894:	2201      	movs	r2, #1
 8004896:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 8004898:	4b43      	ldr	r3, [pc, #268]	; (80049a8 <menu+0x3084>)
 800489a:	781b      	ldrb	r3, [r3, #0]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d154      	bne.n	800494a <menu+0x3026>
			if(dilSecim == 0) {
 80048a0:	4b33      	ldr	r3, [pc, #204]	; (8004970 <menu+0x304c>)
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d105      	bne.n	80048b4 <menu+0x2f90>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80048a8:	4a40      	ldr	r2, [pc, #256]	; (80049ac <menu+0x3088>)
 80048aa:	2101      	movs	r1, #1
 80048ac:	2001      	movs	r0, #1
 80048ae:	f7fb ff83 	bl	80007b8 <lcd_print>
 80048b2:	e008      	b.n	80048c6 <menu+0x2fa2>
			} else if(dilSecim == 1) {
 80048b4:	4b2e      	ldr	r3, [pc, #184]	; (8004970 <menu+0x304c>)
 80048b6:	781b      	ldrb	r3, [r3, #0]
 80048b8:	2b01      	cmp	r3, #1
 80048ba:	d104      	bne.n	80048c6 <menu+0x2fa2>
				lcd_print(1, 1, "Working Cycle   ");
 80048bc:	4a3c      	ldr	r2, [pc, #240]	; (80049b0 <menu+0x308c>)
 80048be:	2101      	movs	r1, #1
 80048c0:	2001      	movs	r0, #1
 80048c2:	f7fb ff79 	bl	80007b8 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 80048c6:	4b36      	ldr	r3, [pc, #216]	; (80049a0 <menu+0x307c>)
 80048c8:	781b      	ldrb	r3, [r3, #0]
 80048ca:	220a      	movs	r2, #10
 80048cc:	4939      	ldr	r1, [pc, #228]	; (80049b4 <menu+0x3090>)
 80048ce:	4618      	mov	r0, r3
 80048d0:	f008 fbd2 	bl	800d078 <itoa>
			lcd_print(2, 12, snum);
 80048d4:	4a37      	ldr	r2, [pc, #220]	; (80049b4 <menu+0x3090>)
 80048d6:	210c      	movs	r1, #12
 80048d8:	2002      	movs	r0, #2
 80048da:	f7fb ff6d 	bl	80007b8 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 80048de:	4b2f      	ldr	r3, [pc, #188]	; (800499c <menu+0x3078>)
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	220a      	movs	r2, #10
 80048e4:	4933      	ldr	r1, [pc, #204]	; (80049b4 <menu+0x3090>)
 80048e6:	4618      	mov	r0, r3
 80048e8:	f008 fbc6 	bl	800d078 <itoa>
			lcd_print(2, 13, snum);
 80048ec:	4a31      	ldr	r2, [pc, #196]	; (80049b4 <menu+0x3090>)
 80048ee:	210d      	movs	r1, #13
 80048f0:	2002      	movs	r0, #2
 80048f2:	f7fb ff61 	bl	80007b8 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 80048f6:	4b28      	ldr	r3, [pc, #160]	; (8004998 <menu+0x3074>)
 80048f8:	781b      	ldrb	r3, [r3, #0]
 80048fa:	220a      	movs	r2, #10
 80048fc:	492d      	ldr	r1, [pc, #180]	; (80049b4 <menu+0x3090>)
 80048fe:	4618      	mov	r0, r3
 8004900:	f008 fbba 	bl	800d078 <itoa>
			lcd_print(2, 14, snum);
 8004904:	4a2b      	ldr	r2, [pc, #172]	; (80049b4 <menu+0x3090>)
 8004906:	210e      	movs	r1, #14
 8004908:	2002      	movs	r0, #2
 800490a:	f7fb ff55 	bl	80007b8 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 800490e:	4b21      	ldr	r3, [pc, #132]	; (8004994 <menu+0x3070>)
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	220a      	movs	r2, #10
 8004914:	4927      	ldr	r1, [pc, #156]	; (80049b4 <menu+0x3090>)
 8004916:	4618      	mov	r0, r3
 8004918:	f008 fbae 	bl	800d078 <itoa>
			lcd_print(2, 15, snum);
 800491c:	4a25      	ldr	r2, [pc, #148]	; (80049b4 <menu+0x3090>)
 800491e:	210f      	movs	r1, #15
 8004920:	2002      	movs	r0, #2
 8004922:	f7fb ff49 	bl	80007b8 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 8004926:	4b1a      	ldr	r3, [pc, #104]	; (8004990 <menu+0x306c>)
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	220a      	movs	r2, #10
 800492c:	4921      	ldr	r1, [pc, #132]	; (80049b4 <menu+0x3090>)
 800492e:	4618      	mov	r0, r3
 8004930:	f008 fba2 	bl	800d078 <itoa>
			lcd_print(2, 16, snum);
 8004934:	4a1f      	ldr	r2, [pc, #124]	; (80049b4 <menu+0x3090>)
 8004936:	2110      	movs	r1, #16
 8004938:	2002      	movs	r0, #2
 800493a:	f7fb ff3d 	bl	80007b8 <lcd_print>

			lcd_print(2, 1, "           ");
 800493e:	4a1e      	ldr	r2, [pc, #120]	; (80049b8 <menu+0x3094>)
 8004940:	2101      	movs	r1, #1
 8004942:	2002      	movs	r0, #2
 8004944:	f7fb ff38 	bl	80007b8 <lcd_print>
 8004948:	e048      	b.n	80049dc <menu+0x30b8>
		} else if(calismaSayModu == 1) {
 800494a:	4b17      	ldr	r3, [pc, #92]	; (80049a8 <menu+0x3084>)
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d144      	bne.n	80049dc <menu+0x30b8>
			if(dilSecim == 0) {
 8004952:	4b07      	ldr	r3, [pc, #28]	; (8004970 <menu+0x304c>)
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d132      	bne.n	80049c0 <menu+0x309c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 800495a:	4a14      	ldr	r2, [pc, #80]	; (80049ac <menu+0x3088>)
 800495c:	2101      	movs	r1, #1
 800495e:	2001      	movs	r0, #1
 8004960:	f7fb ff2a 	bl	80007b8 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 8004964:	4a15      	ldr	r2, [pc, #84]	; (80049bc <menu+0x3098>)
 8004966:	2101      	movs	r1, #1
 8004968:	2002      	movs	r0, #2
 800496a:	f7fb ff25 	bl	80007b8 <lcd_print>
 800496e:	e035      	b.n	80049dc <menu+0x30b8>
 8004970:	20000cbe 	.word	0x20000cbe
 8004974:	0800dfc8 	.word	0x0800dfc8
 8004978:	40010800 	.word	0x40010800
 800497c:	20000ccc 	.word	0x20000ccc
 8004980:	20000cbb 	.word	0x20000cbb
 8004984:	20000b38 	.word	0x20000b38
 8004988:	20000cc9 	.word	0x20000cc9
 800498c:	20000c9d 	.word	0x20000c9d
 8004990:	20000c9a 	.word	0x20000c9a
 8004994:	20000c9b 	.word	0x20000c9b
 8004998:	200009c2 	.word	0x200009c2
 800499c:	200009c3 	.word	0x200009c3
 80049a0:	20000c9c 	.word	0x20000c9c
 80049a4:	20000cde 	.word	0x20000cde
 80049a8:	20000cbd 	.word	0x20000cbd
 80049ac:	0800e650 	.word	0x0800e650
 80049b0:	0800e664 	.word	0x0800e664
 80049b4:	20000bcc 	.word	0x20000bcc
 80049b8:	0800e678 	.word	0x0800e678
 80049bc:	0800e684 	.word	0x0800e684
			} else if(dilSecim == 1) {
 80049c0:	4b94      	ldr	r3, [pc, #592]	; (8004c14 <menu+0x32f0>)
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d109      	bne.n	80049dc <menu+0x30b8>
				lcd_print(1, 1, "Working Cycle   ");
 80049c8:	4a93      	ldr	r2, [pc, #588]	; (8004c18 <menu+0x32f4>)
 80049ca:	2101      	movs	r1, #1
 80049cc:	2001      	movs	r0, #1
 80049ce:	f7fb fef3 	bl	80007b8 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 80049d2:	4a92      	ldr	r2, [pc, #584]	; (8004c1c <menu+0x32f8>)
 80049d4:	2101      	movs	r1, #1
 80049d6:	2002      	movs	r0, #2
 80049d8:	f7fb feee 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80049dc:	2102      	movs	r1, #2
 80049de:	4890      	ldr	r0, [pc, #576]	; (8004c20 <menu+0x32fc>)
 80049e0:	f005 fb1e 	bl	800a020 <HAL_GPIO_ReadPin>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b01      	cmp	r3, #1
 80049e8:	d119      	bne.n	8004a1e <menu+0x30fa>
 80049ea:	4b8e      	ldr	r3, [pc, #568]	; (8004c24 <menu+0x3300>)
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	f083 0301 	eor.w	r3, r3, #1
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d012      	beq.n	8004a1e <menu+0x30fa>
 80049f8:	4b8b      	ldr	r3, [pc, #556]	; (8004c28 <menu+0x3304>)
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00e      	beq.n	8004a1e <menu+0x30fa>
			calismaSayModu = calismaSayModu + 1;
 8004a00:	4b8a      	ldr	r3, [pc, #552]	; (8004c2c <menu+0x3308>)
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	3301      	adds	r3, #1
 8004a06:	b2da      	uxtb	r2, r3
 8004a08:	4b88      	ldr	r3, [pc, #544]	; (8004c2c <menu+0x3308>)
 8004a0a:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8004a0c:	4b87      	ldr	r3, [pc, #540]	; (8004c2c <menu+0x3308>)
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d902      	bls.n	8004a1a <menu+0x30f6>
				calismaSayModu = 0;
 8004a14:	4b85      	ldr	r3, [pc, #532]	; (8004c2c <menu+0x3308>)
 8004a16:	2200      	movs	r2, #0
 8004a18:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004a1a:	f001 fd21 	bl	8006460 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8004a1e:	2104      	movs	r1, #4
 8004a20:	487f      	ldr	r0, [pc, #508]	; (8004c20 <menu+0x32fc>)
 8004a22:	f005 fafd 	bl	800a020 <HAL_GPIO_ReadPin>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d119      	bne.n	8004a60 <menu+0x313c>
 8004a2c:	4b7d      	ldr	r3, [pc, #500]	; (8004c24 <menu+0x3300>)
 8004a2e:	781b      	ldrb	r3, [r3, #0]
 8004a30:	f083 0301 	eor.w	r3, r3, #1
 8004a34:	b2db      	uxtb	r3, r3
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d012      	beq.n	8004a60 <menu+0x313c>
 8004a3a:	4b7b      	ldr	r3, [pc, #492]	; (8004c28 <menu+0x3304>)
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00e      	beq.n	8004a60 <menu+0x313c>
			calismaSayModu = calismaSayModu - 1;
 8004a42:	4b7a      	ldr	r3, [pc, #488]	; (8004c2c <menu+0x3308>)
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	3b01      	subs	r3, #1
 8004a48:	b2da      	uxtb	r2, r3
 8004a4a:	4b78      	ldr	r3, [pc, #480]	; (8004c2c <menu+0x3308>)
 8004a4c:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 8004a4e:	4b77      	ldr	r3, [pc, #476]	; (8004c2c <menu+0x3308>)
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d002      	beq.n	8004a5c <menu+0x3138>
		   		calismaSayModu = 1;
 8004a56:	4b75      	ldr	r3, [pc, #468]	; (8004c2c <menu+0x3308>)
 8004a58:	2201      	movs	r2, #1
 8004a5a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004a5c:	f001 fd00 	bl	8006460 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004a60:	2108      	movs	r1, #8
 8004a62:	486f      	ldr	r0, [pc, #444]	; (8004c20 <menu+0x32fc>)
 8004a64:	f005 fadc 	bl	800a020 <HAL_GPIO_ReadPin>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d12b      	bne.n	8004ac6 <menu+0x31a2>
 8004a6e:	4b6d      	ldr	r3, [pc, #436]	; (8004c24 <menu+0x3300>)
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	f083 0301 	eor.w	r3, r3, #1
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d024      	beq.n	8004ac6 <menu+0x31a2>
			eepromData[32] = 0;
 8004a7c:	4b6c      	ldr	r3, [pc, #432]	; (8004c30 <menu+0x330c>)
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 8004a84:	4b6a      	ldr	r3, [pc, #424]	; (8004c30 <menu+0x330c>)
 8004a86:	2200      	movs	r2, #0
 8004a88:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 8004a8a:	4b69      	ldr	r3, [pc, #420]	; (8004c30 <menu+0x330c>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 8004a90:	4b67      	ldr	r3, [pc, #412]	; (8004c30 <menu+0x330c>)
 8004a92:	2200      	movs	r2, #0
 8004a94:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 8004a96:	4b66      	ldr	r3, [pc, #408]	; (8004c30 <menu+0x330c>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 8004a9c:	4b65      	ldr	r3, [pc, #404]	; (8004c34 <menu+0x3310>)
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 8004aa2:	4b65      	ldr	r3, [pc, #404]	; (8004c38 <menu+0x3314>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 8004aa8:	4b64      	ldr	r3, [pc, #400]	; (8004c3c <menu+0x3318>)
 8004aaa:	2200      	movs	r2, #0
 8004aac:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 8004aae:	4b64      	ldr	r3, [pc, #400]	; (8004c40 <menu+0x331c>)
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 8004ab4:	4b63      	ldr	r3, [pc, #396]	; (8004c44 <menu+0x3320>)
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 8004aba:	4b5c      	ldr	r3, [pc, #368]	; (8004c2c <menu+0x3308>)
 8004abc:	2200      	movs	r2, #0
 8004abe:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8004ac0:	4b61      	ldr	r3, [pc, #388]	; (8004c48 <menu+0x3324>)
 8004ac2:	2201      	movs	r2, #1
 8004ac4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 8004ac6:	4b61      	ldr	r3, [pc, #388]	; (8004c4c <menu+0x3328>)
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	2b1e      	cmp	r3, #30
 8004acc:	d16f      	bne.n	8004bae <menu+0x328a>
		calismaSayModu = 0;
 8004ace:	4b57      	ldr	r3, [pc, #348]	; (8004c2c <menu+0x3308>)
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 8004ad4:	4b4f      	ldr	r3, [pc, #316]	; (8004c14 <menu+0x32f0>)
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d10a      	bne.n	8004af2 <menu+0x31ce>
			lcd_print(1, 1, "DIL SECIMI      ");
 8004adc:	4a5c      	ldr	r2, [pc, #368]	; (8004c50 <menu+0x332c>)
 8004ade:	2101      	movs	r1, #1
 8004ae0:	2001      	movs	r0, #1
 8004ae2:	f7fb fe69 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 8004ae6:	4a5b      	ldr	r2, [pc, #364]	; (8004c54 <menu+0x3330>)
 8004ae8:	2101      	movs	r1, #1
 8004aea:	2002      	movs	r0, #2
 8004aec:	f7fb fe64 	bl	80007b8 <lcd_print>
 8004af0:	e00d      	b.n	8004b0e <menu+0x31ea>
		} else if(dilSecim == 1) {
 8004af2:	4b48      	ldr	r3, [pc, #288]	; (8004c14 <menu+0x32f0>)
 8004af4:	781b      	ldrb	r3, [r3, #0]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d109      	bne.n	8004b0e <menu+0x31ea>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 8004afa:	4a57      	ldr	r2, [pc, #348]	; (8004c58 <menu+0x3334>)
 8004afc:	2101      	movs	r1, #1
 8004afe:	2001      	movs	r0, #1
 8004b00:	f7fb fe5a 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 8004b04:	4a55      	ldr	r2, [pc, #340]	; (8004c5c <menu+0x3338>)
 8004b06:	2101      	movs	r1, #1
 8004b08:	2002      	movs	r0, #2
 8004b0a:	f7fb fe55 	bl	80007b8 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004b0e:	2102      	movs	r1, #2
 8004b10:	4843      	ldr	r0, [pc, #268]	; (8004c20 <menu+0x32fc>)
 8004b12:	f005 fa85 	bl	800a020 <HAL_GPIO_ReadPin>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d115      	bne.n	8004b48 <menu+0x3224>
 8004b1c:	4b41      	ldr	r3, [pc, #260]	; (8004c24 <menu+0x3300>)
 8004b1e:	781b      	ldrb	r3, [r3, #0]
 8004b20:	f083 0301 	eor.w	r3, r3, #1
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00e      	beq.n	8004b48 <menu+0x3224>
			dilSecim = dilSecim + 1;
 8004b2a:	4b3a      	ldr	r3, [pc, #232]	; (8004c14 <menu+0x32f0>)
 8004b2c:	781b      	ldrb	r3, [r3, #0]
 8004b2e:	3301      	adds	r3, #1
 8004b30:	b2da      	uxtb	r2, r3
 8004b32:	4b38      	ldr	r3, [pc, #224]	; (8004c14 <menu+0x32f0>)
 8004b34:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 8004b36:	4b37      	ldr	r3, [pc, #220]	; (8004c14 <menu+0x32f0>)
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	2b01      	cmp	r3, #1
 8004b3c:	d902      	bls.n	8004b44 <menu+0x3220>
				dilSecim = 0;
 8004b3e:	4b35      	ldr	r3, [pc, #212]	; (8004c14 <menu+0x32f0>)
 8004b40:	2200      	movs	r2, #0
 8004b42:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004b44:	f001 fc8c 	bl	8006460 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004b48:	2104      	movs	r1, #4
 8004b4a:	4835      	ldr	r0, [pc, #212]	; (8004c20 <menu+0x32fc>)
 8004b4c:	f005 fa68 	bl	800a020 <HAL_GPIO_ReadPin>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d115      	bne.n	8004b82 <menu+0x325e>
 8004b56:	4b33      	ldr	r3, [pc, #204]	; (8004c24 <menu+0x3300>)
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	f083 0301 	eor.w	r3, r3, #1
 8004b5e:	b2db      	uxtb	r3, r3
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d00e      	beq.n	8004b82 <menu+0x325e>
			dilSecim = dilSecim - 1;
 8004b64:	4b2b      	ldr	r3, [pc, #172]	; (8004c14 <menu+0x32f0>)
 8004b66:	781b      	ldrb	r3, [r3, #0]
 8004b68:	3b01      	subs	r3, #1
 8004b6a:	b2da      	uxtb	r2, r3
 8004b6c:	4b29      	ldr	r3, [pc, #164]	; (8004c14 <menu+0x32f0>)
 8004b6e:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 8004b70:	4b28      	ldr	r3, [pc, #160]	; (8004c14 <menu+0x32f0>)
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d002      	beq.n	8004b7e <menu+0x325a>
		   		dilSecim = 1;
 8004b78:	4b26      	ldr	r3, [pc, #152]	; (8004c14 <menu+0x32f0>)
 8004b7a:	2201      	movs	r2, #1
 8004b7c:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8004b7e:	f001 fc6f 	bl	8006460 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004b82:	2108      	movs	r1, #8
 8004b84:	4826      	ldr	r0, [pc, #152]	; (8004c20 <menu+0x32fc>)
 8004b86:	f005 fa4b 	bl	800a020 <HAL_GPIO_ReadPin>
 8004b8a:	4603      	mov	r3, r0
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d10e      	bne.n	8004bae <menu+0x328a>
 8004b90:	4b24      	ldr	r3, [pc, #144]	; (8004c24 <menu+0x3300>)
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	f083 0301 	eor.w	r3, r3, #1
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d007      	beq.n	8004bae <menu+0x328a>
			eepromData[33] = dilSecim;
 8004b9e:	4b1d      	ldr	r3, [pc, #116]	; (8004c14 <menu+0x32f0>)
 8004ba0:	781a      	ldrb	r2, [r3, #0]
 8004ba2:	4b23      	ldr	r3, [pc, #140]	; (8004c30 <menu+0x330c>)
 8004ba4:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 8004ba8:	4b27      	ldr	r3, [pc, #156]	; (8004c48 <menu+0x3324>)
 8004baa:	2201      	movs	r2, #1
 8004bac:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8004bae:	4b27      	ldr	r3, [pc, #156]	; (8004c4c <menu+0x3328>)
 8004bb0:	781b      	ldrb	r3, [r3, #0]
 8004bb2:	2b1f      	cmp	r3, #31
 8004bb4:	f040 80b7 	bne.w	8004d26 <menu+0x3402>
		calismaSayModu = 0;
 8004bb8:	4b1c      	ldr	r3, [pc, #112]	; (8004c2c <menu+0x3308>)
 8004bba:	2200      	movs	r2, #0
 8004bbc:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 8004bbe:	4a28      	ldr	r2, [pc, #160]	; (8004c60 <menu+0x333c>)
 8004bc0:	2101      	movs	r1, #1
 8004bc2:	2001      	movs	r0, #1
 8004bc4:	f7fb fdf8 	bl	80007b8 <lcd_print>

		if(iotMode == 0) {
 8004bc8:	4b26      	ldr	r3, [pc, #152]	; (8004c64 <menu+0x3340>)
 8004bca:	781b      	ldrb	r3, [r3, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d113      	bne.n	8004bf8 <menu+0x32d4>
			if(dilSecim == 0) {
 8004bd0:	4b10      	ldr	r3, [pc, #64]	; (8004c14 <menu+0x32f0>)
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d105      	bne.n	8004be4 <menu+0x32c0>
				lcd_print(2, 1, "Pasif           ");
 8004bd8:	4a23      	ldr	r2, [pc, #140]	; (8004c68 <menu+0x3344>)
 8004bda:	2101      	movs	r1, #1
 8004bdc:	2002      	movs	r0, #2
 8004bde:	f7fb fdeb 	bl	80007b8 <lcd_print>
 8004be2:	e050      	b.n	8004c86 <menu+0x3362>
			} else if(dilSecim == 1) {
 8004be4:	4b0b      	ldr	r3, [pc, #44]	; (8004c14 <menu+0x32f0>)
 8004be6:	781b      	ldrb	r3, [r3, #0]
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d14c      	bne.n	8004c86 <menu+0x3362>
				lcd_print(2, 1, "Passive         ");
 8004bec:	4a1f      	ldr	r2, [pc, #124]	; (8004c6c <menu+0x3348>)
 8004bee:	2101      	movs	r1, #1
 8004bf0:	2002      	movs	r0, #2
 8004bf2:	f7fb fde1 	bl	80007b8 <lcd_print>
 8004bf6:	e046      	b.n	8004c86 <menu+0x3362>
			}
		} else if(iotMode == 1) {
 8004bf8:	4b1a      	ldr	r3, [pc, #104]	; (8004c64 <menu+0x3340>)
 8004bfa:	781b      	ldrb	r3, [r3, #0]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d142      	bne.n	8004c86 <menu+0x3362>
			if(dilSecim == 0){
 8004c00:	4b04      	ldr	r3, [pc, #16]	; (8004c14 <menu+0x32f0>)
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d135      	bne.n	8004c74 <menu+0x3350>
				lcd_print(2, 1, "Aktif           ");
 8004c08:	4a19      	ldr	r2, [pc, #100]	; (8004c70 <menu+0x334c>)
 8004c0a:	2101      	movs	r1, #1
 8004c0c:	2002      	movs	r0, #2
 8004c0e:	f7fb fdd3 	bl	80007b8 <lcd_print>
 8004c12:	e038      	b.n	8004c86 <menu+0x3362>
 8004c14:	20000cbe 	.word	0x20000cbe
 8004c18:	0800e664 	.word	0x0800e664
 8004c1c:	0800e698 	.word	0x0800e698
 8004c20:	40010800 	.word	0x40010800
 8004c24:	20000ccc 	.word	0x20000ccc
 8004c28:	20000cde 	.word	0x20000cde
 8004c2c:	20000cbd 	.word	0x20000cbd
 8004c30:	20000b38 	.word	0x20000b38
 8004c34:	20000c9c 	.word	0x20000c9c
 8004c38:	200009c3 	.word	0x200009c3
 8004c3c:	200009c2 	.word	0x200009c2
 8004c40:	20000c9b 	.word	0x20000c9b
 8004c44:	20000c9a 	.word	0x20000c9a
 8004c48:	20000cc9 	.word	0x20000cc9
 8004c4c:	20000c9d 	.word	0x20000c9d
 8004c50:	0800e6ac 	.word	0x0800e6ac
 8004c54:	0800e6c0 	.word	0x0800e6c0
 8004c58:	0800e6d4 	.word	0x0800e6d4
 8004c5c:	0800e6e8 	.word	0x0800e6e8
 8004c60:	0800e6fc 	.word	0x0800e6fc
 8004c64:	20000cbc 	.word	0x20000cbc
 8004c68:	0800df54 	.word	0x0800df54
 8004c6c:	0800df68 	.word	0x0800df68
 8004c70:	0800dfb4 	.word	0x0800dfb4
			} else if(dilSecim == 1) {
 8004c74:	4bb0      	ldr	r3, [pc, #704]	; (8004f38 <menu+0x3614>)
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d104      	bne.n	8004c86 <menu+0x3362>
				lcd_print(2, 1, "Active          ");
 8004c7c:	4aaf      	ldr	r2, [pc, #700]	; (8004f3c <menu+0x3618>)
 8004c7e:	2101      	movs	r1, #1
 8004c80:	2002      	movs	r0, #2
 8004c82:	f7fb fd99 	bl	80007b8 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004c86:	2102      	movs	r1, #2
 8004c88:	48ad      	ldr	r0, [pc, #692]	; (8004f40 <menu+0x361c>)
 8004c8a:	f005 f9c9 	bl	800a020 <HAL_GPIO_ReadPin>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d115      	bne.n	8004cc0 <menu+0x339c>
 8004c94:	4bab      	ldr	r3, [pc, #684]	; (8004f44 <menu+0x3620>)
 8004c96:	781b      	ldrb	r3, [r3, #0]
 8004c98:	f083 0301 	eor.w	r3, r3, #1
 8004c9c:	b2db      	uxtb	r3, r3
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00e      	beq.n	8004cc0 <menu+0x339c>
			iotMode = iotMode + 1;
 8004ca2:	4ba9      	ldr	r3, [pc, #676]	; (8004f48 <menu+0x3624>)
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	3301      	adds	r3, #1
 8004ca8:	b2da      	uxtb	r2, r3
 8004caa:	4ba7      	ldr	r3, [pc, #668]	; (8004f48 <menu+0x3624>)
 8004cac:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 8004cae:	4ba6      	ldr	r3, [pc, #664]	; (8004f48 <menu+0x3624>)
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d902      	bls.n	8004cbc <menu+0x3398>
				iotMode = 0;
 8004cb6:	4ba4      	ldr	r3, [pc, #656]	; (8004f48 <menu+0x3624>)
 8004cb8:	2200      	movs	r2, #0
 8004cba:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004cbc:	f001 fbd0 	bl	8006460 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004cc0:	2104      	movs	r1, #4
 8004cc2:	489f      	ldr	r0, [pc, #636]	; (8004f40 <menu+0x361c>)
 8004cc4:	f005 f9ac 	bl	800a020 <HAL_GPIO_ReadPin>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d115      	bne.n	8004cfa <menu+0x33d6>
 8004cce:	4b9d      	ldr	r3, [pc, #628]	; (8004f44 <menu+0x3620>)
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	f083 0301 	eor.w	r3, r3, #1
 8004cd6:	b2db      	uxtb	r3, r3
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00e      	beq.n	8004cfa <menu+0x33d6>
			iotMode = iotMode - 1;
 8004cdc:	4b9a      	ldr	r3, [pc, #616]	; (8004f48 <menu+0x3624>)
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	3b01      	subs	r3, #1
 8004ce2:	b2da      	uxtb	r2, r3
 8004ce4:	4b98      	ldr	r3, [pc, #608]	; (8004f48 <menu+0x3624>)
 8004ce6:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8004ce8:	4b97      	ldr	r3, [pc, #604]	; (8004f48 <menu+0x3624>)
 8004cea:	781b      	ldrb	r3, [r3, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d002      	beq.n	8004cf6 <menu+0x33d2>
		   		iotMode = 1;
 8004cf0:	4b95      	ldr	r3, [pc, #596]	; (8004f48 <menu+0x3624>)
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8004cf6:	f001 fbb3 	bl	8006460 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004cfa:	2108      	movs	r1, #8
 8004cfc:	4890      	ldr	r0, [pc, #576]	; (8004f40 <menu+0x361c>)
 8004cfe:	f005 f98f 	bl	800a020 <HAL_GPIO_ReadPin>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b01      	cmp	r3, #1
 8004d06:	d10e      	bne.n	8004d26 <menu+0x3402>
 8004d08:	4b8e      	ldr	r3, [pc, #568]	; (8004f44 <menu+0x3620>)
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	f083 0301 	eor.w	r3, r3, #1
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d007      	beq.n	8004d26 <menu+0x3402>
			eepromData[37] = iotMode;
 8004d16:	4b8c      	ldr	r3, [pc, #560]	; (8004f48 <menu+0x3624>)
 8004d18:	781a      	ldrb	r2, [r3, #0]
 8004d1a:	4b8c      	ldr	r3, [pc, #560]	; (8004f4c <menu+0x3628>)
 8004d1c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hafizaYaz = 1;
 8004d20:	4b8b      	ldr	r3, [pc, #556]	; (8004f50 <menu+0x362c>)
 8004d22:	2201      	movs	r2, #1
 8004d24:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 8004d26:	4b8b      	ldr	r3, [pc, #556]	; (8004f54 <menu+0x3630>)
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	2b20      	cmp	r3, #32
 8004d2c:	d145      	bne.n	8004dba <menu+0x3496>
		calismaSayModu = 0;
 8004d2e:	4b8a      	ldr	r3, [pc, #552]	; (8004f58 <menu+0x3634>)
 8004d30:	2200      	movs	r2, #0
 8004d32:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "MAKINE ID       ");
 8004d34:	4a89      	ldr	r2, [pc, #548]	; (8004f5c <menu+0x3638>)
 8004d36:	2101      	movs	r1, #1
 8004d38:	2001      	movs	r0, #1
 8004d3a:	f7fb fd3d 	bl	80007b8 <lcd_print>

		lcd_print(2, 1, machineID);
 8004d3e:	4a88      	ldr	r2, [pc, #544]	; (8004f60 <menu+0x363c>)
 8004d40:	2101      	movs	r1, #1
 8004d42:	2002      	movs	r0, #2
 8004d44:	f7fb fd38 	bl	80007b8 <lcd_print>
		lcd_print(2, 1+strlen(machineID), emptyArray);
 8004d48:	4885      	ldr	r0, [pc, #532]	; (8004f60 <menu+0x363c>)
 8004d4a:	f7fb fa6b 	bl	8000224 <strlen>
 8004d4e:	4603      	mov	r3, r0
 8004d50:	b2db      	uxtb	r3, r3
 8004d52:	3301      	adds	r3, #1
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	4a83      	ldr	r2, [pc, #524]	; (8004f64 <menu+0x3640>)
 8004d58:	4619      	mov	r1, r3
 8004d5a:	2002      	movs	r0, #2
 8004d5c:	f7fb fd2c 	bl	80007b8 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004d60:	2102      	movs	r1, #2
 8004d62:	4877      	ldr	r0, [pc, #476]	; (8004f40 <menu+0x361c>)
 8004d64:	f005 f95c 	bl	800a020 <HAL_GPIO_ReadPin>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d125      	bne.n	8004dba <menu+0x3496>
 8004d6e:	2104      	movs	r1, #4
 8004d70:	4873      	ldr	r0, [pc, #460]	; (8004f40 <menu+0x361c>)
 8004d72:	f005 f955 	bl	800a020 <HAL_GPIO_ReadPin>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d11e      	bne.n	8004dba <menu+0x3496>
 8004d7c:	4b71      	ldr	r3, [pc, #452]	; (8004f44 <menu+0x3620>)
 8004d7e:	781b      	ldrb	r3, [r3, #0]
 8004d80:	f083 0301 	eor.w	r3, r3, #1
 8004d84:	b2db      	uxtb	r3, r3
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d017      	beq.n	8004dba <menu+0x3496>
			takeMachineID(0, &hi2c1);
 8004d8a:	1d3b      	adds	r3, r7, #4
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	2000      	movs	r0, #0
 8004d90:	f7fb ffbe 	bl	8000d10 <takeMachineID>

			lcd_print(2, 1, machineID);
 8004d94:	4a72      	ldr	r2, [pc, #456]	; (8004f60 <menu+0x363c>)
 8004d96:	2101      	movs	r1, #1
 8004d98:	2002      	movs	r0, #2
 8004d9a:	f7fb fd0d 	bl	80007b8 <lcd_print>
			lcd_print(2, 1+strlen(machineID), emptyArray);
 8004d9e:	4870      	ldr	r0, [pc, #448]	; (8004f60 <menu+0x363c>)
 8004da0:	f7fb fa40 	bl	8000224 <strlen>
 8004da4:	4603      	mov	r3, r0
 8004da6:	b2db      	uxtb	r3, r3
 8004da8:	3301      	adds	r3, #1
 8004daa:	b2db      	uxtb	r3, r3
 8004dac:	4a6d      	ldr	r2, [pc, #436]	; (8004f64 <menu+0x3640>)
 8004dae:	4619      	mov	r1, r3
 8004db0:	2002      	movs	r0, #2
 8004db2:	f7fb fd01 	bl	80007b8 <lcd_print>

			bekle();
 8004db6:	f001 fb53 	bl	8006460 <bekle>
		}
	}

	if (menuSayac == 33) {
 8004dba:	4b66      	ldr	r3, [pc, #408]	; (8004f54 <menu+0x3630>)
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	2b21      	cmp	r3, #33	; 0x21
 8004dc0:	d151      	bne.n	8004e66 <menu+0x3542>
		calismaSayModu = 0;
 8004dc2:	4b65      	ldr	r3, [pc, #404]	; (8004f58 <menu+0x3634>)
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI SSID       ");
 8004dc8:	4a67      	ldr	r2, [pc, #412]	; (8004f68 <menu+0x3644>)
 8004dca:	2101      	movs	r1, #1
 8004dcc:	2001      	movs	r0, #1
 8004dce:	f7fb fcf3 	bl	80007b8 <lcd_print>
		if(strlen(wifiSSID) <=16) {
 8004dd2:	4866      	ldr	r0, [pc, #408]	; (8004f6c <menu+0x3648>)
 8004dd4:	f7fb fa26 	bl	8000224 <strlen>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b10      	cmp	r3, #16
 8004ddc:	d811      	bhi.n	8004e02 <menu+0x34de>
			lcd_print(2, 1, wifiSSID);
 8004dde:	4a63      	ldr	r2, [pc, #396]	; (8004f6c <menu+0x3648>)
 8004de0:	2101      	movs	r1, #1
 8004de2:	2002      	movs	r0, #2
 8004de4:	f7fb fce8 	bl	80007b8 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 8004de8:	4860      	ldr	r0, [pc, #384]	; (8004f6c <menu+0x3648>)
 8004dea:	f7fb fa1b 	bl	8000224 <strlen>
 8004dee:	4603      	mov	r3, r0
 8004df0:	b2db      	uxtb	r3, r3
 8004df2:	3301      	adds	r3, #1
 8004df4:	b2db      	uxtb	r3, r3
 8004df6:	4a5b      	ldr	r2, [pc, #364]	; (8004f64 <menu+0x3640>)
 8004df8:	4619      	mov	r1, r3
 8004dfa:	2002      	movs	r0, #2
 8004dfc:	f7fb fcdc 	bl	80007b8 <lcd_print>
 8004e00:	e004      	b.n	8004e0c <menu+0x34e8>
		} else {
			slideText(wifiSSID, 1, 2);
 8004e02:	2202      	movs	r2, #2
 8004e04:	2101      	movs	r1, #1
 8004e06:	4859      	ldr	r0, [pc, #356]	; (8004f6c <menu+0x3648>)
 8004e08:	f7fc fd52 	bl	80018b0 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004e0c:	2102      	movs	r1, #2
 8004e0e:	484c      	ldr	r0, [pc, #304]	; (8004f40 <menu+0x361c>)
 8004e10:	f005 f906 	bl	800a020 <HAL_GPIO_ReadPin>
 8004e14:	4603      	mov	r3, r0
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d125      	bne.n	8004e66 <menu+0x3542>
 8004e1a:	2104      	movs	r1, #4
 8004e1c:	4848      	ldr	r0, [pc, #288]	; (8004f40 <menu+0x361c>)
 8004e1e:	f005 f8ff 	bl	800a020 <HAL_GPIO_ReadPin>
 8004e22:	4603      	mov	r3, r0
 8004e24:	2b01      	cmp	r3, #1
 8004e26:	d11e      	bne.n	8004e66 <menu+0x3542>
 8004e28:	4b46      	ldr	r3, [pc, #280]	; (8004f44 <menu+0x3620>)
 8004e2a:	781b      	ldrb	r3, [r3, #0]
 8004e2c:	f083 0301 	eor.w	r3, r3, #1
 8004e30:	b2db      	uxtb	r3, r3
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d017      	beq.n	8004e66 <menu+0x3542>
			takeWifiSSID(0, &hi2c1);
 8004e36:	1d3b      	adds	r3, r7, #4
 8004e38:	4619      	mov	r1, r3
 8004e3a:	2000      	movs	r0, #0
 8004e3c:	f7fc f882 	bl	8000f44 <takeWifiSSID>

			lcd_print(2, 1, wifiSSID);
 8004e40:	4a4a      	ldr	r2, [pc, #296]	; (8004f6c <menu+0x3648>)
 8004e42:	2101      	movs	r1, #1
 8004e44:	2002      	movs	r0, #2
 8004e46:	f7fb fcb7 	bl	80007b8 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 8004e4a:	4848      	ldr	r0, [pc, #288]	; (8004f6c <menu+0x3648>)
 8004e4c:	f7fb f9ea 	bl	8000224 <strlen>
 8004e50:	4603      	mov	r3, r0
 8004e52:	b2db      	uxtb	r3, r3
 8004e54:	3301      	adds	r3, #1
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	4a42      	ldr	r2, [pc, #264]	; (8004f64 <menu+0x3640>)
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	2002      	movs	r0, #2
 8004e5e:	f7fb fcab 	bl	80007b8 <lcd_print>

			bekle();
 8004e62:	f001 fafd 	bl	8006460 <bekle>
		}
	}

	if (menuSayac == 34) {
 8004e66:	4b3b      	ldr	r3, [pc, #236]	; (8004f54 <menu+0x3630>)
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	2b22      	cmp	r3, #34	; 0x22
 8004e6c:	d151      	bne.n	8004f12 <menu+0x35ee>
		calismaSayModu = 0;
 8004e6e:	4b3a      	ldr	r3, [pc, #232]	; (8004f58 <menu+0x3634>)
 8004e70:	2200      	movs	r2, #0
 8004e72:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI PASS       ");
 8004e74:	4a3e      	ldr	r2, [pc, #248]	; (8004f70 <menu+0x364c>)
 8004e76:	2101      	movs	r1, #1
 8004e78:	2001      	movs	r0, #1
 8004e7a:	f7fb fc9d 	bl	80007b8 <lcd_print>
		if(strlen(wifiPass) <= 16) {
 8004e7e:	483d      	ldr	r0, [pc, #244]	; (8004f74 <menu+0x3650>)
 8004e80:	f7fb f9d0 	bl	8000224 <strlen>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b10      	cmp	r3, #16
 8004e88:	d811      	bhi.n	8004eae <menu+0x358a>
			lcd_print(2, 1, wifiPass);
 8004e8a:	4a3a      	ldr	r2, [pc, #232]	; (8004f74 <menu+0x3650>)
 8004e8c:	2101      	movs	r1, #1
 8004e8e:	2002      	movs	r0, #2
 8004e90:	f7fb fc92 	bl	80007b8 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 8004e94:	4837      	ldr	r0, [pc, #220]	; (8004f74 <menu+0x3650>)
 8004e96:	f7fb f9c5 	bl	8000224 <strlen>
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	3301      	adds	r3, #1
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	4a30      	ldr	r2, [pc, #192]	; (8004f64 <menu+0x3640>)
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	2002      	movs	r0, #2
 8004ea8:	f7fb fc86 	bl	80007b8 <lcd_print>
 8004eac:	e004      	b.n	8004eb8 <menu+0x3594>
		} else {
			slideText(wifiPass, 1, 2);
 8004eae:	2202      	movs	r2, #2
 8004eb0:	2101      	movs	r1, #1
 8004eb2:	4830      	ldr	r0, [pc, #192]	; (8004f74 <menu+0x3650>)
 8004eb4:	f7fc fcfc 	bl	80018b0 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004eb8:	2102      	movs	r1, #2
 8004eba:	4821      	ldr	r0, [pc, #132]	; (8004f40 <menu+0x361c>)
 8004ebc:	f005 f8b0 	bl	800a020 <HAL_GPIO_ReadPin>
 8004ec0:	4603      	mov	r3, r0
 8004ec2:	2b01      	cmp	r3, #1
 8004ec4:	d125      	bne.n	8004f12 <menu+0x35ee>
 8004ec6:	2104      	movs	r1, #4
 8004ec8:	481d      	ldr	r0, [pc, #116]	; (8004f40 <menu+0x361c>)
 8004eca:	f005 f8a9 	bl	800a020 <HAL_GPIO_ReadPin>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b01      	cmp	r3, #1
 8004ed2:	d11e      	bne.n	8004f12 <menu+0x35ee>
 8004ed4:	4b1b      	ldr	r3, [pc, #108]	; (8004f44 <menu+0x3620>)
 8004ed6:	781b      	ldrb	r3, [r3, #0]
 8004ed8:	f083 0301 	eor.w	r3, r3, #1
 8004edc:	b2db      	uxtb	r3, r3
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d017      	beq.n	8004f12 <menu+0x35ee>
			takeWifiPass(0, &hi2c1);
 8004ee2:	1d3b      	adds	r3, r7, #4
 8004ee4:	4619      	mov	r1, r3
 8004ee6:	2000      	movs	r0, #0
 8004ee8:	f7fc f9b4 	bl	8001254 <takeWifiPass>

			lcd_print(2, 1, wifiPass);
 8004eec:	4a21      	ldr	r2, [pc, #132]	; (8004f74 <menu+0x3650>)
 8004eee:	2101      	movs	r1, #1
 8004ef0:	2002      	movs	r0, #2
 8004ef2:	f7fb fc61 	bl	80007b8 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 8004ef6:	481f      	ldr	r0, [pc, #124]	; (8004f74 <menu+0x3650>)
 8004ef8:	f7fb f994 	bl	8000224 <strlen>
 8004efc:	4603      	mov	r3, r0
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	3301      	adds	r3, #1
 8004f02:	b2db      	uxtb	r3, r3
 8004f04:	4a17      	ldr	r2, [pc, #92]	; (8004f64 <menu+0x3640>)
 8004f06:	4619      	mov	r1, r3
 8004f08:	2002      	movs	r0, #2
 8004f0a:	f7fb fc55 	bl	80007b8 <lcd_print>

			bekle();
 8004f0e:	f001 faa7 	bl	8006460 <bekle>
		}
	}

	if (menuSayac == 35) {
 8004f12:	4b10      	ldr	r3, [pc, #64]	; (8004f54 <menu+0x3630>)
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	2b23      	cmp	r3, #35	; 0x23
 8004f18:	d152      	bne.n	8004fc0 <menu+0x369c>
		if(dilSecim == 0) {
 8004f1a:	4b07      	ldr	r3, [pc, #28]	; (8004f38 <menu+0x3614>)
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d12e      	bne.n	8004f80 <menu+0x365c>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 8004f22:	4a15      	ldr	r2, [pc, #84]	; (8004f78 <menu+0x3654>)
 8004f24:	2101      	movs	r1, #1
 8004f26:	2001      	movs	r0, #1
 8004f28:	f7fb fc46 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8004f2c:	4a13      	ldr	r2, [pc, #76]	; (8004f7c <menu+0x3658>)
 8004f2e:	2101      	movs	r1, #1
 8004f30:	2002      	movs	r0, #2
 8004f32:	f7fb fc41 	bl	80007b8 <lcd_print>
 8004f36:	e031      	b.n	8004f9c <menu+0x3678>
 8004f38:	20000cbe 	.word	0x20000cbe
 8004f3c:	0800dfc8 	.word	0x0800dfc8
 8004f40:	40010800 	.word	0x40010800
 8004f44:	20000ccc 	.word	0x20000ccc
 8004f48:	20000cbc 	.word	0x20000cbc
 8004f4c:	20000b38 	.word	0x20000b38
 8004f50:	20000cc9 	.word	0x20000cc9
 8004f54:	20000c9d 	.word	0x20000c9d
 8004f58:	20000cbd 	.word	0x20000cbd
 8004f5c:	0800e710 	.word	0x0800e710
 8004f60:	20000bf4 	.word	0x20000bf4
 8004f64:	2000094c 	.word	0x2000094c
 8004f68:	0800e724 	.word	0x0800e724
 8004f6c:	20000c00 	.word	0x20000c00
 8004f70:	0800e738 	.word	0x0800e738
 8004f74:	20000c24 	.word	0x20000c24
 8004f78:	0800e74c 	.word	0x0800e74c
 8004f7c:	0800e760 	.word	0x0800e760
		} else if(dilSecim == 1) {
 8004f80:	4b11      	ldr	r3, [pc, #68]	; (8004fc8 <menu+0x36a4>)
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d109      	bne.n	8004f9c <menu+0x3678>
			lcd_print(1, 1, " EXIT THE MENU  ");
 8004f88:	4a10      	ldr	r2, [pc, #64]	; (8004fcc <menu+0x36a8>)
 8004f8a:	2101      	movs	r1, #1
 8004f8c:	2001      	movs	r0, #1
 8004f8e:	f7fb fc13 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 8004f92:	4a0f      	ldr	r2, [pc, #60]	; (8004fd0 <menu+0x36ac>)
 8004f94:	2101      	movs	r1, #1
 8004f96:	2002      	movs	r0, #2
 8004f98:	f7fb fc0e 	bl	80007b8 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8004f9c:	2108      	movs	r1, #8
 8004f9e:	480d      	ldr	r0, [pc, #52]	; (8004fd4 <menu+0x36b0>)
 8004fa0:	f005 f83e 	bl	800a020 <HAL_GPIO_ReadPin>
 8004fa4:	4603      	mov	r3, r0
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d10a      	bne.n	8004fc0 <menu+0x369c>
			menuGiris = 0;
 8004faa:	4b0b      	ldr	r3, [pc, #44]	; (8004fd8 <menu+0x36b4>)
 8004fac:	2200      	movs	r2, #0
 8004fae:	701a      	strb	r2, [r3, #0]

			lcd_clear();
 8004fb0:	f7fb fc2e 	bl	8000810 <lcd_clear>
			HAL_Delay(500);
 8004fb4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004fb8:	f004 fa62 	bl	8009480 <HAL_Delay>
			NVIC_SystemReset();
 8004fbc:	f7fb fc70 	bl	80008a0 <__NVIC_SystemReset>
		}
	}
}
 8004fc0:	bf00      	nop
 8004fc2:	3708      	adds	r7, #8
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	20000cbe 	.word	0x20000cbe
 8004fcc:	0800e774 	.word	0x0800e774
 8004fd0:	0800e788 	.word	0x0800e788
 8004fd4:	40010800 	.word	0x40010800
 8004fd8:	20000cba 	.word	0x20000cba

08004fdc <loadMenuTexts>:

void loadMenuTexts(uint8_t dilSecim) {
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b082      	sub	sp, #8
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	71fb      	strb	r3, [r7, #7]
	mainText = copyText(mainTextGN);
 8004fe6:	48a9      	ldr	r0, [pc, #676]	; (800528c <loadMenuTexts+0x2b0>)
 8004fe8:	f7fb fc70 	bl	80008cc <copyText>
 8004fec:	4603      	mov	r3, r0
 8004fee:	4aa8      	ldr	r2, [pc, #672]	; (8005290 <loadMenuTexts+0x2b4>)
 8004ff0:	6013      	str	r3, [r2, #0]
	mainText2 = copyText(mainText2GN);
 8004ff2:	48a8      	ldr	r0, [pc, #672]	; (8005294 <loadMenuTexts+0x2b8>)
 8004ff4:	f7fb fc6a 	bl	80008cc <copyText>
 8004ff8:	4603      	mov	r3, r0
 8004ffa:	4aa7      	ldr	r2, [pc, #668]	; (8005298 <loadMenuTexts+0x2bc>)
 8004ffc:	6013      	str	r3, [r2, #0]
	ondSafetyText = copyText(ondSafetyTextGN);
 8004ffe:	48a7      	ldr	r0, [pc, #668]	; (800529c <loadMenuTexts+0x2c0>)
 8005000:	f7fb fc64 	bl	80008cc <copyText>
 8005004:	4603      	mov	r3, r0
 8005006:	4aa6      	ldr	r2, [pc, #664]	; (80052a0 <loadMenuTexts+0x2c4>)
 8005008:	6013      	str	r3, [r2, #0]
	prudhomeText = copyText(prudhomeTextGN);
 800500a:	48a6      	ldr	r0, [pc, #664]	; (80052a4 <loadMenuTexts+0x2c8>)
 800500c:	f7fb fc5e 	bl	80008cc <copyText>
 8005010:	4603      	mov	r3, r0
 8005012:	4aa5      	ldr	r2, [pc, #660]	; (80052a8 <loadMenuTexts+0x2cc>)
 8005014:	6013      	str	r3, [r2, #0]
	pizzattoText = copyText(pizzattoTextGN);
 8005016:	48a5      	ldr	r0, [pc, #660]	; (80052ac <loadMenuTexts+0x2d0>)
 8005018:	f7fb fc58 	bl	80008cc <copyText>
 800501c:	4603      	mov	r3, r0
 800501e:	4aa4      	ldr	r2, [pc, #656]	; (80052b0 <loadMenuTexts+0x2d4>)
 8005020:	6013      	str	r3, [r2, #0]
	buzzerText = copyText(buzzerTextGN);
 8005022:	48a4      	ldr	r0, [pc, #656]	; (80052b4 <loadMenuTexts+0x2d8>)
 8005024:	f7fb fc52 	bl	80008cc <copyText>
 8005028:	4603      	mov	r3, r0
 800502a:	4aa3      	ldr	r2, [pc, #652]	; (80052b8 <loadMenuTexts+0x2dc>)
 800502c:	6013      	str	r3, [r2, #0]
	demoModText = copyText(demoModTextGN);
 800502e:	48a3      	ldr	r0, [pc, #652]	; (80052bc <loadMenuTexts+0x2e0>)
 8005030:	f7fb fc4c 	bl	80008cc <copyText>
 8005034:	4603      	mov	r3, r0
 8005036:	4aa2      	ldr	r2, [pc, #648]	; (80052c0 <loadMenuTexts+0x2e4>)
 8005038:	6013      	str	r3, [r2, #0]
	if(dilSecim == 0) {
 800503a:	79fb      	ldrb	r3, [r7, #7]
 800503c:	2b00      	cmp	r3, #0
 800503e:	f040 82d1 	bne.w	80055e4 <loadMenuTexts+0x608>
		menuyeGirildiText = copyText(menuyeGirildiTextTR);
 8005042:	48a0      	ldr	r0, [pc, #640]	; (80052c4 <loadMenuTexts+0x2e8>)
 8005044:	f7fb fc42 	bl	80008cc <copyText>
 8005048:	4603      	mov	r3, r0
 800504a:	4a9f      	ldr	r2, [pc, #636]	; (80052c8 <loadMenuTexts+0x2ec>)
 800504c:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextTR);
 800504e:	489f      	ldr	r0, [pc, #636]	; (80052cc <loadMenuTexts+0x2f0>)
 8005050:	f7fb fc3c 	bl	80008cc <copyText>
 8005054:	4603      	mov	r3, r0
 8005056:	4a9e      	ldr	r2, [pc, #632]	; (80052d0 <loadMenuTexts+0x2f4>)
 8005058:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextTR);
 800505a:	489e      	ldr	r0, [pc, #632]	; (80052d4 <loadMenuTexts+0x2f8>)
 800505c:	f7fb fc36 	bl	80008cc <copyText>
 8005060:	4603      	mov	r3, r0
 8005062:	4a9d      	ldr	r2, [pc, #628]	; (80052d8 <loadMenuTexts+0x2fc>)
 8005064:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextTR);
 8005066:	489d      	ldr	r0, [pc, #628]	; (80052dc <loadMenuTexts+0x300>)
 8005068:	f7fb fc30 	bl	80008cc <copyText>
 800506c:	4603      	mov	r3, r0
 800506e:	4a9c      	ldr	r2, [pc, #624]	; (80052e0 <loadMenuTexts+0x304>)
 8005070:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextTR);
 8005072:	489c      	ldr	r0, [pc, #624]	; (80052e4 <loadMenuTexts+0x308>)
 8005074:	f7fb fc2a 	bl	80008cc <copyText>
 8005078:	4603      	mov	r3, r0
 800507a:	4a9b      	ldr	r2, [pc, #620]	; (80052e8 <loadMenuTexts+0x30c>)
 800507c:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextTR);
 800507e:	489b      	ldr	r0, [pc, #620]	; (80052ec <loadMenuTexts+0x310>)
 8005080:	f7fb fc24 	bl	80008cc <copyText>
 8005084:	4603      	mov	r3, r0
 8005086:	4a9a      	ldr	r2, [pc, #616]	; (80052f0 <loadMenuTexts+0x314>)
 8005088:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextTR);
 800508a:	489a      	ldr	r0, [pc, #616]	; (80052f4 <loadMenuTexts+0x318>)
 800508c:	f7fb fc1e 	bl	80008cc <copyText>
 8005090:	4603      	mov	r3, r0
 8005092:	4a99      	ldr	r2, [pc, #612]	; (80052f8 <loadMenuTexts+0x31c>)
 8005094:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextTR);
 8005096:	4899      	ldr	r0, [pc, #612]	; (80052fc <loadMenuTexts+0x320>)
 8005098:	f7fb fc18 	bl	80008cc <copyText>
 800509c:	4603      	mov	r3, r0
 800509e:	4a98      	ldr	r2, [pc, #608]	; (8005300 <loadMenuTexts+0x324>)
 80050a0:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextTR);
 80050a2:	4898      	ldr	r0, [pc, #608]	; (8005304 <loadMenuTexts+0x328>)
 80050a4:	f7fb fc12 	bl	80008cc <copyText>
 80050a8:	4603      	mov	r3, r0
 80050aa:	4a97      	ldr	r2, [pc, #604]	; (8005308 <loadMenuTexts+0x32c>)
 80050ac:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextTR);
 80050ae:	4897      	ldr	r0, [pc, #604]	; (800530c <loadMenuTexts+0x330>)
 80050b0:	f7fb fc0c 	bl	80008cc <copyText>
 80050b4:	4603      	mov	r3, r0
 80050b6:	4a96      	ldr	r2, [pc, #600]	; (8005310 <loadMenuTexts+0x334>)
 80050b8:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextTR);
 80050ba:	4896      	ldr	r0, [pc, #600]	; (8005314 <loadMenuTexts+0x338>)
 80050bc:	f7fb fc06 	bl	80008cc <copyText>
 80050c0:	4603      	mov	r3, r0
 80050c2:	4a95      	ldr	r2, [pc, #596]	; (8005318 <loadMenuTexts+0x33c>)
 80050c4:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextTR);
 80050c6:	4895      	ldr	r0, [pc, #596]	; (800531c <loadMenuTexts+0x340>)
 80050c8:	f7fb fc00 	bl	80008cc <copyText>
 80050cc:	4603      	mov	r3, r0
 80050ce:	4a94      	ldr	r2, [pc, #592]	; (8005320 <loadMenuTexts+0x344>)
 80050d0:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextTR);
 80050d2:	4894      	ldr	r0, [pc, #592]	; (8005324 <loadMenuTexts+0x348>)
 80050d4:	f7fb fbfa 	bl	80008cc <copyText>
 80050d8:	4603      	mov	r3, r0
 80050da:	4a93      	ldr	r2, [pc, #588]	; (8005328 <loadMenuTexts+0x34c>)
 80050dc:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextTR);
 80050de:	4893      	ldr	r0, [pc, #588]	; (800532c <loadMenuTexts+0x350>)
 80050e0:	f7fb fbf4 	bl	80008cc <copyText>
 80050e4:	4603      	mov	r3, r0
 80050e6:	4a92      	ldr	r2, [pc, #584]	; (8005330 <loadMenuTexts+0x354>)
 80050e8:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextTR);
 80050ea:	4892      	ldr	r0, [pc, #584]	; (8005334 <loadMenuTexts+0x358>)
 80050ec:	f7fb fbee 	bl	80008cc <copyText>
 80050f0:	4603      	mov	r3, r0
 80050f2:	4a91      	ldr	r2, [pc, #580]	; (8005338 <loadMenuTexts+0x35c>)
 80050f4:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextTR);
 80050f6:	4891      	ldr	r0, [pc, #580]	; (800533c <loadMenuTexts+0x360>)
 80050f8:	f7fb fbe8 	bl	80008cc <copyText>
 80050fc:	4603      	mov	r3, r0
 80050fe:	4a90      	ldr	r2, [pc, #576]	; (8005340 <loadMenuTexts+0x364>)
 8005100:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextTR);
 8005102:	4890      	ldr	r0, [pc, #576]	; (8005344 <loadMenuTexts+0x368>)
 8005104:	f7fb fbe2 	bl	80008cc <copyText>
 8005108:	4603      	mov	r3, r0
 800510a:	4a8f      	ldr	r2, [pc, #572]	; (8005348 <loadMenuTexts+0x36c>)
 800510c:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextTR);
 800510e:	488f      	ldr	r0, [pc, #572]	; (800534c <loadMenuTexts+0x370>)
 8005110:	f7fb fbdc 	bl	80008cc <copyText>
 8005114:	4603      	mov	r3, r0
 8005116:	4a8e      	ldr	r2, [pc, #568]	; (8005350 <loadMenuTexts+0x374>)
 8005118:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextTR);
 800511a:	488e      	ldr	r0, [pc, #568]	; (8005354 <loadMenuTexts+0x378>)
 800511c:	f7fb fbd6 	bl	80008cc <copyText>
 8005120:	4603      	mov	r3, r0
 8005122:	4a8d      	ldr	r2, [pc, #564]	; (8005358 <loadMenuTexts+0x37c>)
 8005124:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextTR);
 8005126:	488d      	ldr	r0, [pc, #564]	; (800535c <loadMenuTexts+0x380>)
 8005128:	f7fb fbd0 	bl	80008cc <copyText>
 800512c:	4603      	mov	r3, r0
 800512e:	4a8c      	ldr	r2, [pc, #560]	; (8005360 <loadMenuTexts+0x384>)
 8005130:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextTR);
 8005132:	488c      	ldr	r0, [pc, #560]	; (8005364 <loadMenuTexts+0x388>)
 8005134:	f7fb fbca 	bl	80008cc <copyText>
 8005138:	4603      	mov	r3, r0
 800513a:	4a8b      	ldr	r2, [pc, #556]	; (8005368 <loadMenuTexts+0x38c>)
 800513c:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextTR);
 800513e:	488b      	ldr	r0, [pc, #556]	; (800536c <loadMenuTexts+0x390>)
 8005140:	f7fb fbc4 	bl	80008cc <copyText>
 8005144:	4603      	mov	r3, r0
 8005146:	4a8a      	ldr	r2, [pc, #552]	; (8005370 <loadMenuTexts+0x394>)
 8005148:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextTR);
 800514a:	488a      	ldr	r0, [pc, #552]	; (8005374 <loadMenuTexts+0x398>)
 800514c:	f7fb fbbe 	bl	80008cc <copyText>
 8005150:	4603      	mov	r3, r0
 8005152:	4a89      	ldr	r2, [pc, #548]	; (8005378 <loadMenuTexts+0x39c>)
 8005154:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextTR);
 8005156:	4889      	ldr	r0, [pc, #548]	; (800537c <loadMenuTexts+0x3a0>)
 8005158:	f7fb fbb8 	bl	80008cc <copyText>
 800515c:	4603      	mov	r3, r0
 800515e:	4a88      	ldr	r2, [pc, #544]	; (8005380 <loadMenuTexts+0x3a4>)
 8005160:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextTR);
 8005162:	4888      	ldr	r0, [pc, #544]	; (8005384 <loadMenuTexts+0x3a8>)
 8005164:	f7fb fbb2 	bl	80008cc <copyText>
 8005168:	4603      	mov	r3, r0
 800516a:	4a87      	ldr	r2, [pc, #540]	; (8005388 <loadMenuTexts+0x3ac>)
 800516c:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextTR);
 800516e:	4887      	ldr	r0, [pc, #540]	; (800538c <loadMenuTexts+0x3b0>)
 8005170:	f7fb fbac 	bl	80008cc <copyText>
 8005174:	4603      	mov	r3, r0
 8005176:	4a86      	ldr	r2, [pc, #536]	; (8005390 <loadMenuTexts+0x3b4>)
 8005178:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextTR);
 800517a:	4886      	ldr	r0, [pc, #536]	; (8005394 <loadMenuTexts+0x3b8>)
 800517c:	f7fb fba6 	bl	80008cc <copyText>
 8005180:	4603      	mov	r3, r0
 8005182:	4a85      	ldr	r2, [pc, #532]	; (8005398 <loadMenuTexts+0x3bc>)
 8005184:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextTR);
 8005186:	4885      	ldr	r0, [pc, #532]	; (800539c <loadMenuTexts+0x3c0>)
 8005188:	f7fb fba0 	bl	80008cc <copyText>
 800518c:	4603      	mov	r3, r0
 800518e:	4a84      	ldr	r2, [pc, #528]	; (80053a0 <loadMenuTexts+0x3c4>)
 8005190:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextTR);
 8005192:	4884      	ldr	r0, [pc, #528]	; (80053a4 <loadMenuTexts+0x3c8>)
 8005194:	f7fb fb9a 	bl	80008cc <copyText>
 8005198:	4603      	mov	r3, r0
 800519a:	4a83      	ldr	r2, [pc, #524]	; (80053a8 <loadMenuTexts+0x3cc>)
 800519c:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextTR);
 800519e:	4883      	ldr	r0, [pc, #524]	; (80053ac <loadMenuTexts+0x3d0>)
 80051a0:	f7fb fb94 	bl	80008cc <copyText>
 80051a4:	4603      	mov	r3, r0
 80051a6:	4a82      	ldr	r2, [pc, #520]	; (80053b0 <loadMenuTexts+0x3d4>)
 80051a8:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextTR);
 80051aa:	4882      	ldr	r0, [pc, #520]	; (80053b4 <loadMenuTexts+0x3d8>)
 80051ac:	f7fb fb8e 	bl	80008cc <copyText>
 80051b0:	4603      	mov	r3, r0
 80051b2:	4a81      	ldr	r2, [pc, #516]	; (80053b8 <loadMenuTexts+0x3dc>)
 80051b4:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextTR);
 80051b6:	4881      	ldr	r0, [pc, #516]	; (80053bc <loadMenuTexts+0x3e0>)
 80051b8:	f7fb fb88 	bl	80008cc <copyText>
 80051bc:	4603      	mov	r3, r0
 80051be:	4a80      	ldr	r2, [pc, #512]	; (80053c0 <loadMenuTexts+0x3e4>)
 80051c0:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextTR);
 80051c2:	4880      	ldr	r0, [pc, #512]	; (80053c4 <loadMenuTexts+0x3e8>)
 80051c4:	f7fb fb82 	bl	80008cc <copyText>
 80051c8:	4603      	mov	r3, r0
 80051ca:	4a7f      	ldr	r2, [pc, #508]	; (80053c8 <loadMenuTexts+0x3ec>)
 80051cc:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextTR);
 80051ce:	487f      	ldr	r0, [pc, #508]	; (80053cc <loadMenuTexts+0x3f0>)
 80051d0:	f7fb fb7c 	bl	80008cc <copyText>
 80051d4:	4603      	mov	r3, r0
 80051d6:	4a7e      	ldr	r2, [pc, #504]	; (80053d0 <loadMenuTexts+0x3f4>)
 80051d8:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextTR);
 80051da:	487e      	ldr	r0, [pc, #504]	; (80053d4 <loadMenuTexts+0x3f8>)
 80051dc:	f7fb fb76 	bl	80008cc <copyText>
 80051e0:	4603      	mov	r3, r0
 80051e2:	4a7d      	ldr	r2, [pc, #500]	; (80053d8 <loadMenuTexts+0x3fc>)
 80051e4:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextTR);
 80051e6:	487d      	ldr	r0, [pc, #500]	; (80053dc <loadMenuTexts+0x400>)
 80051e8:	f7fb fb70 	bl	80008cc <copyText>
 80051ec:	4603      	mov	r3, r0
 80051ee:	4a7c      	ldr	r2, [pc, #496]	; (80053e0 <loadMenuTexts+0x404>)
 80051f0:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextTR);
 80051f2:	487c      	ldr	r0, [pc, #496]	; (80053e4 <loadMenuTexts+0x408>)
 80051f4:	f7fb fb6a 	bl	80008cc <copyText>
 80051f8:	4603      	mov	r3, r0
 80051fa:	4a7b      	ldr	r2, [pc, #492]	; (80053e8 <loadMenuTexts+0x40c>)
 80051fc:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextTR);
 80051fe:	487b      	ldr	r0, [pc, #492]	; (80053ec <loadMenuTexts+0x410>)
 8005200:	f7fb fb64 	bl	80008cc <copyText>
 8005204:	4603      	mov	r3, r0
 8005206:	4a7a      	ldr	r2, [pc, #488]	; (80053f0 <loadMenuTexts+0x414>)
 8005208:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextTR);
 800520a:	487a      	ldr	r0, [pc, #488]	; (80053f4 <loadMenuTexts+0x418>)
 800520c:	f7fb fb5e 	bl	80008cc <copyText>
 8005210:	4603      	mov	r3, r0
 8005212:	4a79      	ldr	r2, [pc, #484]	; (80053f8 <loadMenuTexts+0x41c>)
 8005214:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextTR);
 8005216:	4879      	ldr	r0, [pc, #484]	; (80053fc <loadMenuTexts+0x420>)
 8005218:	f7fb fb58 	bl	80008cc <copyText>
 800521c:	4603      	mov	r3, r0
 800521e:	4a78      	ldr	r2, [pc, #480]	; (8005400 <loadMenuTexts+0x424>)
 8005220:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextTR);
 8005222:	4878      	ldr	r0, [pc, #480]	; (8005404 <loadMenuTexts+0x428>)
 8005224:	f7fb fb52 	bl	80008cc <copyText>
 8005228:	4603      	mov	r3, r0
 800522a:	4a77      	ldr	r2, [pc, #476]	; (8005408 <loadMenuTexts+0x42c>)
 800522c:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextTR);
 800522e:	4877      	ldr	r0, [pc, #476]	; (800540c <loadMenuTexts+0x430>)
 8005230:	f7fb fb4c 	bl	80008cc <copyText>
 8005234:	4603      	mov	r3, r0
 8005236:	4a76      	ldr	r2, [pc, #472]	; (8005410 <loadMenuTexts+0x434>)
 8005238:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextTR);
 800523a:	4876      	ldr	r0, [pc, #472]	; (8005414 <loadMenuTexts+0x438>)
 800523c:	f7fb fb46 	bl	80008cc <copyText>
 8005240:	4603      	mov	r3, r0
 8005242:	4a75      	ldr	r2, [pc, #468]	; (8005418 <loadMenuTexts+0x43c>)
 8005244:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextTR);
 8005246:	4875      	ldr	r0, [pc, #468]	; (800541c <loadMenuTexts+0x440>)
 8005248:	f7fb fb40 	bl	80008cc <copyText>
 800524c:	4603      	mov	r3, r0
 800524e:	4a74      	ldr	r2, [pc, #464]	; (8005420 <loadMenuTexts+0x444>)
 8005250:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextTR);
 8005252:	4874      	ldr	r0, [pc, #464]	; (8005424 <loadMenuTexts+0x448>)
 8005254:	f7fb fb3a 	bl	80008cc <copyText>
 8005258:	4603      	mov	r3, r0
 800525a:	4a73      	ldr	r2, [pc, #460]	; (8005428 <loadMenuTexts+0x44c>)
 800525c:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextTR);
 800525e:	4873      	ldr	r0, [pc, #460]	; (800542c <loadMenuTexts+0x450>)
 8005260:	f7fb fb34 	bl	80008cc <copyText>
 8005264:	4603      	mov	r3, r0
 8005266:	4a72      	ldr	r2, [pc, #456]	; (8005430 <loadMenuTexts+0x454>)
 8005268:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextTR);
 800526a:	4872      	ldr	r0, [pc, #456]	; (8005434 <loadMenuTexts+0x458>)
 800526c:	f7fb fb2e 	bl	80008cc <copyText>
 8005270:	4603      	mov	r3, r0
 8005272:	4a71      	ldr	r2, [pc, #452]	; (8005438 <loadMenuTexts+0x45c>)
 8005274:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextTR);
 8005276:	4871      	ldr	r0, [pc, #452]	; (800543c <loadMenuTexts+0x460>)
 8005278:	f7fb fb28 	bl	80008cc <copyText>
 800527c:	4603      	mov	r3, r0
 800527e:	4a70      	ldr	r2, [pc, #448]	; (8005440 <loadMenuTexts+0x464>)
 8005280:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextTR);
 8005282:	4870      	ldr	r0, [pc, #448]	; (8005444 <loadMenuTexts+0x468>)
 8005284:	f7fb fb22 	bl	80008cc <copyText>
 8005288:	4603      	mov	r3, r0
 800528a:	e0dd      	b.n	8005448 <loadMenuTexts+0x46c>
 800528c:	20000000 	.word	0x20000000
 8005290:	20000d04 	.word	0x20000d04
 8005294:	20000010 	.word	0x20000010
 8005298:	20000d08 	.word	0x20000d08
 800529c:	20000020 	.word	0x20000020
 80052a0:	20000d60 	.word	0x20000d60
 80052a4:	20000030 	.word	0x20000030
 80052a8:	20000d90 	.word	0x20000d90
 80052ac:	20000040 	.word	0x20000040
 80052b0:	20000d98 	.word	0x20000d98
 80052b4:	20000050 	.word	0x20000050
 80052b8:	20000e10 	.word	0x20000e10
 80052bc:	20000060 	.word	0x20000060
 80052c0:	20000e14 	.word	0x20000e14
 80052c4:	20000070 	.word	0x20000070
 80052c8:	20000d0c 	.word	0x20000d0c
 80052cc:	20000080 	.word	0x20000080
 80052d0:	20000d10 	.word	0x20000d10
 80052d4:	20000090 	.word	0x20000090
 80052d8:	20000d14 	.word	0x20000d14
 80052dc:	200000a0 	.word	0x200000a0
 80052e0:	20000d18 	.word	0x20000d18
 80052e4:	200000b0 	.word	0x200000b0
 80052e8:	20000d1c 	.word	0x20000d1c
 80052ec:	200000c0 	.word	0x200000c0
 80052f0:	20000d20 	.word	0x20000d20
 80052f4:	200000d0 	.word	0x200000d0
 80052f8:	20000d24 	.word	0x20000d24
 80052fc:	200000e0 	.word	0x200000e0
 8005300:	20000d28 	.word	0x20000d28
 8005304:	200000f0 	.word	0x200000f0
 8005308:	20000d2c 	.word	0x20000d2c
 800530c:	20000100 	.word	0x20000100
 8005310:	20000d30 	.word	0x20000d30
 8005314:	20000110 	.word	0x20000110
 8005318:	20000d34 	.word	0x20000d34
 800531c:	20000120 	.word	0x20000120
 8005320:	20000d38 	.word	0x20000d38
 8005324:	20000130 	.word	0x20000130
 8005328:	20000d3c 	.word	0x20000d3c
 800532c:	20000140 	.word	0x20000140
 8005330:	20000d40 	.word	0x20000d40
 8005334:	20000150 	.word	0x20000150
 8005338:	20000d44 	.word	0x20000d44
 800533c:	20000160 	.word	0x20000160
 8005340:	20000d48 	.word	0x20000d48
 8005344:	20000170 	.word	0x20000170
 8005348:	20000d4c 	.word	0x20000d4c
 800534c:	20000180 	.word	0x20000180
 8005350:	20000d50 	.word	0x20000d50
 8005354:	20000190 	.word	0x20000190
 8005358:	20000d54 	.word	0x20000d54
 800535c:	200001a0 	.word	0x200001a0
 8005360:	20000d58 	.word	0x20000d58
 8005364:	200001b0 	.word	0x200001b0
 8005368:	20000d5c 	.word	0x20000d5c
 800536c:	200001c0 	.word	0x200001c0
 8005370:	20000d64 	.word	0x20000d64
 8005374:	200001d0 	.word	0x200001d0
 8005378:	20000d68 	.word	0x20000d68
 800537c:	200001e0 	.word	0x200001e0
 8005380:	20000d6c 	.word	0x20000d6c
 8005384:	200001f0 	.word	0x200001f0
 8005388:	20000d70 	.word	0x20000d70
 800538c:	20000200 	.word	0x20000200
 8005390:	20000d74 	.word	0x20000d74
 8005394:	20000210 	.word	0x20000210
 8005398:	20000d78 	.word	0x20000d78
 800539c:	20000220 	.word	0x20000220
 80053a0:	20000d7c 	.word	0x20000d7c
 80053a4:	20000230 	.word	0x20000230
 80053a8:	20000d80 	.word	0x20000d80
 80053ac:	20000240 	.word	0x20000240
 80053b0:	20000d84 	.word	0x20000d84
 80053b4:	20000250 	.word	0x20000250
 80053b8:	20000d88 	.word	0x20000d88
 80053bc:	20000260 	.word	0x20000260
 80053c0:	20000d8c 	.word	0x20000d8c
 80053c4:	20000270 	.word	0x20000270
 80053c8:	20000d94 	.word	0x20000d94
 80053cc:	20000280 	.word	0x20000280
 80053d0:	20000d9c 	.word	0x20000d9c
 80053d4:	20000290 	.word	0x20000290
 80053d8:	20000da0 	.word	0x20000da0
 80053dc:	200002a0 	.word	0x200002a0
 80053e0:	20000da4 	.word	0x20000da4
 80053e4:	200002b0 	.word	0x200002b0
 80053e8:	20000da8 	.word	0x20000da8
 80053ec:	200002c0 	.word	0x200002c0
 80053f0:	20000dac 	.word	0x20000dac
 80053f4:	200002d0 	.word	0x200002d0
 80053f8:	20000db0 	.word	0x20000db0
 80053fc:	200002e0 	.word	0x200002e0
 8005400:	20000db4 	.word	0x20000db4
 8005404:	200002f0 	.word	0x200002f0
 8005408:	20000db8 	.word	0x20000db8
 800540c:	20000300 	.word	0x20000300
 8005410:	20000dbc 	.word	0x20000dbc
 8005414:	20000310 	.word	0x20000310
 8005418:	20000dc0 	.word	0x20000dc0
 800541c:	20000320 	.word	0x20000320
 8005420:	20000dc4 	.word	0x20000dc4
 8005424:	20000330 	.word	0x20000330
 8005428:	20000dc8 	.word	0x20000dc8
 800542c:	20000340 	.word	0x20000340
 8005430:	20000dcc 	.word	0x20000dcc
 8005434:	20000350 	.word	0x20000350
 8005438:	20000dd0 	.word	0x20000dd0
 800543c:	20000360 	.word	0x20000360
 8005440:	20000dd4 	.word	0x20000dd4
 8005444:	20000370 	.word	0x20000370
 8005448:	4a3d      	ldr	r2, [pc, #244]	; (8005540 <loadMenuTexts+0x564>)
 800544a:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextTR);
 800544c:	483d      	ldr	r0, [pc, #244]	; (8005544 <loadMenuTexts+0x568>)
 800544e:	f7fb fa3d 	bl	80008cc <copyText>
 8005452:	4603      	mov	r3, r0
 8005454:	4a3c      	ldr	r2, [pc, #240]	; (8005548 <loadMenuTexts+0x56c>)
 8005456:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextTR);
 8005458:	483c      	ldr	r0, [pc, #240]	; (800554c <loadMenuTexts+0x570>)
 800545a:	f7fb fa37 	bl	80008cc <copyText>
 800545e:	4603      	mov	r3, r0
 8005460:	4a3b      	ldr	r2, [pc, #236]	; (8005550 <loadMenuTexts+0x574>)
 8005462:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextTR);
 8005464:	483b      	ldr	r0, [pc, #236]	; (8005554 <loadMenuTexts+0x578>)
 8005466:	f7fb fa31 	bl	80008cc <copyText>
 800546a:	4603      	mov	r3, r0
 800546c:	4a3a      	ldr	r2, [pc, #232]	; (8005558 <loadMenuTexts+0x57c>)
 800546e:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextTR);
 8005470:	483a      	ldr	r0, [pc, #232]	; (800555c <loadMenuTexts+0x580>)
 8005472:	f7fb fa2b 	bl	80008cc <copyText>
 8005476:	4603      	mov	r3, r0
 8005478:	4a39      	ldr	r2, [pc, #228]	; (8005560 <loadMenuTexts+0x584>)
 800547a:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextTR);
 800547c:	4839      	ldr	r0, [pc, #228]	; (8005564 <loadMenuTexts+0x588>)
 800547e:	f7fb fa25 	bl	80008cc <copyText>
 8005482:	4603      	mov	r3, r0
 8005484:	4a38      	ldr	r2, [pc, #224]	; (8005568 <loadMenuTexts+0x58c>)
 8005486:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextTR);
 8005488:	4838      	ldr	r0, [pc, #224]	; (800556c <loadMenuTexts+0x590>)
 800548a:	f7fb fa1f 	bl	80008cc <copyText>
 800548e:	4603      	mov	r3, r0
 8005490:	4a37      	ldr	r2, [pc, #220]	; (8005570 <loadMenuTexts+0x594>)
 8005492:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextTR);
 8005494:	4837      	ldr	r0, [pc, #220]	; (8005574 <loadMenuTexts+0x598>)
 8005496:	f7fb fa19 	bl	80008cc <copyText>
 800549a:	4603      	mov	r3, r0
 800549c:	4a36      	ldr	r2, [pc, #216]	; (8005578 <loadMenuTexts+0x59c>)
 800549e:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextTR);
 80054a0:	4836      	ldr	r0, [pc, #216]	; (800557c <loadMenuTexts+0x5a0>)
 80054a2:	f7fb fa13 	bl	80008cc <copyText>
 80054a6:	4603      	mov	r3, r0
 80054a8:	4a35      	ldr	r2, [pc, #212]	; (8005580 <loadMenuTexts+0x5a4>)
 80054aa:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextTR);
 80054ac:	4835      	ldr	r0, [pc, #212]	; (8005584 <loadMenuTexts+0x5a8>)
 80054ae:	f7fb fa0d 	bl	80008cc <copyText>
 80054b2:	4603      	mov	r3, r0
 80054b4:	4a34      	ldr	r2, [pc, #208]	; (8005588 <loadMenuTexts+0x5ac>)
 80054b6:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextTR);
 80054b8:	4834      	ldr	r0, [pc, #208]	; (800558c <loadMenuTexts+0x5b0>)
 80054ba:	f7fb fa07 	bl	80008cc <copyText>
 80054be:	4603      	mov	r3, r0
 80054c0:	4a33      	ldr	r2, [pc, #204]	; (8005590 <loadMenuTexts+0x5b4>)
 80054c2:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextTR);
 80054c4:	4833      	ldr	r0, [pc, #204]	; (8005594 <loadMenuTexts+0x5b8>)
 80054c6:	f7fb fa01 	bl	80008cc <copyText>
 80054ca:	4603      	mov	r3, r0
 80054cc:	4a32      	ldr	r2, [pc, #200]	; (8005598 <loadMenuTexts+0x5bc>)
 80054ce:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextTR);
 80054d0:	4832      	ldr	r0, [pc, #200]	; (800559c <loadMenuTexts+0x5c0>)
 80054d2:	f7fb f9fb 	bl	80008cc <copyText>
 80054d6:	4603      	mov	r3, r0
 80054d8:	4a31      	ldr	r2, [pc, #196]	; (80055a0 <loadMenuTexts+0x5c4>)
 80054da:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextTR);
 80054dc:	4831      	ldr	r0, [pc, #196]	; (80055a4 <loadMenuTexts+0x5c8>)
 80054de:	f7fb f9f5 	bl	80008cc <copyText>
 80054e2:	4603      	mov	r3, r0
 80054e4:	4a30      	ldr	r2, [pc, #192]	; (80055a8 <loadMenuTexts+0x5cc>)
 80054e6:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextTR);
 80054e8:	4830      	ldr	r0, [pc, #192]	; (80055ac <loadMenuTexts+0x5d0>)
 80054ea:	f7fb f9ef 	bl	80008cc <copyText>
 80054ee:	4603      	mov	r3, r0
 80054f0:	4a2f      	ldr	r2, [pc, #188]	; (80055b0 <loadMenuTexts+0x5d4>)
 80054f2:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextTR);
 80054f4:	482f      	ldr	r0, [pc, #188]	; (80055b4 <loadMenuTexts+0x5d8>)
 80054f6:	f7fb f9e9 	bl	80008cc <copyText>
 80054fa:	4603      	mov	r3, r0
 80054fc:	4a2e      	ldr	r2, [pc, #184]	; (80055b8 <loadMenuTexts+0x5dc>)
 80054fe:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextTR);
 8005500:	482e      	ldr	r0, [pc, #184]	; (80055bc <loadMenuTexts+0x5e0>)
 8005502:	f7fb f9e3 	bl	80008cc <copyText>
 8005506:	4603      	mov	r3, r0
 8005508:	4a2d      	ldr	r2, [pc, #180]	; (80055c0 <loadMenuTexts+0x5e4>)
 800550a:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextTR);
 800550c:	482d      	ldr	r0, [pc, #180]	; (80055c4 <loadMenuTexts+0x5e8>)
 800550e:	f7fb f9dd 	bl	80008cc <copyText>
 8005512:	4603      	mov	r3, r0
 8005514:	4a2c      	ldr	r2, [pc, #176]	; (80055c8 <loadMenuTexts+0x5ec>)
 8005516:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextTR);
 8005518:	482c      	ldr	r0, [pc, #176]	; (80055cc <loadMenuTexts+0x5f0>)
 800551a:	f7fb f9d7 	bl	80008cc <copyText>
 800551e:	4603      	mov	r3, r0
 8005520:	4a2b      	ldr	r2, [pc, #172]	; (80055d0 <loadMenuTexts+0x5f4>)
 8005522:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextTR);
 8005524:	482b      	ldr	r0, [pc, #172]	; (80055d4 <loadMenuTexts+0x5f8>)
 8005526:	f7fb f9d1 	bl	80008cc <copyText>
 800552a:	4603      	mov	r3, r0
 800552c:	4a2a      	ldr	r2, [pc, #168]	; (80055d8 <loadMenuTexts+0x5fc>)
 800552e:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextTR);
 8005530:	482a      	ldr	r0, [pc, #168]	; (80055dc <loadMenuTexts+0x600>)
 8005532:	f7fb f9cb 	bl	80008cc <copyText>
 8005536:	4603      	mov	r3, r0
 8005538:	4a29      	ldr	r2, [pc, #164]	; (80055e0 <loadMenuTexts+0x604>)
 800553a:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
		menudenCikisText = copyText(menudenCikisTextEN);
		enteraBasinizText = copyText(enteraBasinizTextEN);
		hataKoduText = copyText(hataKoduTextEN);
	}
}
 800553c:	e2d3      	b.n	8005ae6 <loadMenuTexts+0xb0a>
 800553e:	bf00      	nop
 8005540:	20000dd8 	.word	0x20000dd8
 8005544:	20000380 	.word	0x20000380
 8005548:	20000ddc 	.word	0x20000ddc
 800554c:	20000390 	.word	0x20000390
 8005550:	20000de0 	.word	0x20000de0
 8005554:	200003a0 	.word	0x200003a0
 8005558:	20000de4 	.word	0x20000de4
 800555c:	200003b0 	.word	0x200003b0
 8005560:	20000de8 	.word	0x20000de8
 8005564:	200003c0 	.word	0x200003c0
 8005568:	20000dec 	.word	0x20000dec
 800556c:	200003d0 	.word	0x200003d0
 8005570:	20000df0 	.word	0x20000df0
 8005574:	200003e0 	.word	0x200003e0
 8005578:	20000df4 	.word	0x20000df4
 800557c:	200003f0 	.word	0x200003f0
 8005580:	20000df8 	.word	0x20000df8
 8005584:	20000400 	.word	0x20000400
 8005588:	20000dfc 	.word	0x20000dfc
 800558c:	20000410 	.word	0x20000410
 8005590:	20000e00 	.word	0x20000e00
 8005594:	20000420 	.word	0x20000420
 8005598:	20000e04 	.word	0x20000e04
 800559c:	20000430 	.word	0x20000430
 80055a0:	20000e08 	.word	0x20000e08
 80055a4:	20000440 	.word	0x20000440
 80055a8:	20000e0c 	.word	0x20000e0c
 80055ac:	20000450 	.word	0x20000450
 80055b0:	20000e18 	.word	0x20000e18
 80055b4:	20000460 	.word	0x20000460
 80055b8:	20000e1c 	.word	0x20000e1c
 80055bc:	20000470 	.word	0x20000470
 80055c0:	20000e20 	.word	0x20000e20
 80055c4:	20000480 	.word	0x20000480
 80055c8:	20000e24 	.word	0x20000e24
 80055cc:	20000490 	.word	0x20000490
 80055d0:	20000e28 	.word	0x20000e28
 80055d4:	200004a0 	.word	0x200004a0
 80055d8:	20000e2c 	.word	0x20000e2c
 80055dc:	200004b0 	.word	0x200004b0
 80055e0:	20000e30 	.word	0x20000e30
		menuyeGirildiText = copyText(menuyeGirildiTextEN);
 80055e4:	48a9      	ldr	r0, [pc, #676]	; (800588c <loadMenuTexts+0x8b0>)
 80055e6:	f7fb f971 	bl	80008cc <copyText>
 80055ea:	4603      	mov	r3, r0
 80055ec:	4aa8      	ldr	r2, [pc, #672]	; (8005890 <loadMenuTexts+0x8b4>)
 80055ee:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextEN);
 80055f0:	48a8      	ldr	r0, [pc, #672]	; (8005894 <loadMenuTexts+0x8b8>)
 80055f2:	f7fb f96b 	bl	80008cc <copyText>
 80055f6:	4603      	mov	r3, r0
 80055f8:	4aa7      	ldr	r2, [pc, #668]	; (8005898 <loadMenuTexts+0x8bc>)
 80055fa:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextEN);
 80055fc:	48a7      	ldr	r0, [pc, #668]	; (800589c <loadMenuTexts+0x8c0>)
 80055fe:	f7fb f965 	bl	80008cc <copyText>
 8005602:	4603      	mov	r3, r0
 8005604:	4aa6      	ldr	r2, [pc, #664]	; (80058a0 <loadMenuTexts+0x8c4>)
 8005606:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextEN);
 8005608:	48a6      	ldr	r0, [pc, #664]	; (80058a4 <loadMenuTexts+0x8c8>)
 800560a:	f7fb f95f 	bl	80008cc <copyText>
 800560e:	4603      	mov	r3, r0
 8005610:	4aa5      	ldr	r2, [pc, #660]	; (80058a8 <loadMenuTexts+0x8cc>)
 8005612:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextEN);
 8005614:	48a5      	ldr	r0, [pc, #660]	; (80058ac <loadMenuTexts+0x8d0>)
 8005616:	f7fb f959 	bl	80008cc <copyText>
 800561a:	4603      	mov	r3, r0
 800561c:	4aa4      	ldr	r2, [pc, #656]	; (80058b0 <loadMenuTexts+0x8d4>)
 800561e:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextEN);
 8005620:	48a4      	ldr	r0, [pc, #656]	; (80058b4 <loadMenuTexts+0x8d8>)
 8005622:	f7fb f953 	bl	80008cc <copyText>
 8005626:	4603      	mov	r3, r0
 8005628:	4aa3      	ldr	r2, [pc, #652]	; (80058b8 <loadMenuTexts+0x8dc>)
 800562a:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextEN);
 800562c:	48a3      	ldr	r0, [pc, #652]	; (80058bc <loadMenuTexts+0x8e0>)
 800562e:	f7fb f94d 	bl	80008cc <copyText>
 8005632:	4603      	mov	r3, r0
 8005634:	4aa2      	ldr	r2, [pc, #648]	; (80058c0 <loadMenuTexts+0x8e4>)
 8005636:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextEN);
 8005638:	48a2      	ldr	r0, [pc, #648]	; (80058c4 <loadMenuTexts+0x8e8>)
 800563a:	f7fb f947 	bl	80008cc <copyText>
 800563e:	4603      	mov	r3, r0
 8005640:	4aa1      	ldr	r2, [pc, #644]	; (80058c8 <loadMenuTexts+0x8ec>)
 8005642:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextEN);
 8005644:	48a1      	ldr	r0, [pc, #644]	; (80058cc <loadMenuTexts+0x8f0>)
 8005646:	f7fb f941 	bl	80008cc <copyText>
 800564a:	4603      	mov	r3, r0
 800564c:	4aa0      	ldr	r2, [pc, #640]	; (80058d0 <loadMenuTexts+0x8f4>)
 800564e:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextEN);
 8005650:	48a0      	ldr	r0, [pc, #640]	; (80058d4 <loadMenuTexts+0x8f8>)
 8005652:	f7fb f93b 	bl	80008cc <copyText>
 8005656:	4603      	mov	r3, r0
 8005658:	4a9f      	ldr	r2, [pc, #636]	; (80058d8 <loadMenuTexts+0x8fc>)
 800565a:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextEN);
 800565c:	489f      	ldr	r0, [pc, #636]	; (80058dc <loadMenuTexts+0x900>)
 800565e:	f7fb f935 	bl	80008cc <copyText>
 8005662:	4603      	mov	r3, r0
 8005664:	4a9e      	ldr	r2, [pc, #632]	; (80058e0 <loadMenuTexts+0x904>)
 8005666:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextEN);
 8005668:	489e      	ldr	r0, [pc, #632]	; (80058e4 <loadMenuTexts+0x908>)
 800566a:	f7fb f92f 	bl	80008cc <copyText>
 800566e:	4603      	mov	r3, r0
 8005670:	4a9d      	ldr	r2, [pc, #628]	; (80058e8 <loadMenuTexts+0x90c>)
 8005672:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextEN);
 8005674:	489d      	ldr	r0, [pc, #628]	; (80058ec <loadMenuTexts+0x910>)
 8005676:	f7fb f929 	bl	80008cc <copyText>
 800567a:	4603      	mov	r3, r0
 800567c:	4a9c      	ldr	r2, [pc, #624]	; (80058f0 <loadMenuTexts+0x914>)
 800567e:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextEN);
 8005680:	489c      	ldr	r0, [pc, #624]	; (80058f4 <loadMenuTexts+0x918>)
 8005682:	f7fb f923 	bl	80008cc <copyText>
 8005686:	4603      	mov	r3, r0
 8005688:	4a9b      	ldr	r2, [pc, #620]	; (80058f8 <loadMenuTexts+0x91c>)
 800568a:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextEN);
 800568c:	489b      	ldr	r0, [pc, #620]	; (80058fc <loadMenuTexts+0x920>)
 800568e:	f7fb f91d 	bl	80008cc <copyText>
 8005692:	4603      	mov	r3, r0
 8005694:	4a9a      	ldr	r2, [pc, #616]	; (8005900 <loadMenuTexts+0x924>)
 8005696:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextEN);
 8005698:	489a      	ldr	r0, [pc, #616]	; (8005904 <loadMenuTexts+0x928>)
 800569a:	f7fb f917 	bl	80008cc <copyText>
 800569e:	4603      	mov	r3, r0
 80056a0:	4a99      	ldr	r2, [pc, #612]	; (8005908 <loadMenuTexts+0x92c>)
 80056a2:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextEN);
 80056a4:	4899      	ldr	r0, [pc, #612]	; (800590c <loadMenuTexts+0x930>)
 80056a6:	f7fb f911 	bl	80008cc <copyText>
 80056aa:	4603      	mov	r3, r0
 80056ac:	4a98      	ldr	r2, [pc, #608]	; (8005910 <loadMenuTexts+0x934>)
 80056ae:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextEN);
 80056b0:	4898      	ldr	r0, [pc, #608]	; (8005914 <loadMenuTexts+0x938>)
 80056b2:	f7fb f90b 	bl	80008cc <copyText>
 80056b6:	4603      	mov	r3, r0
 80056b8:	4a97      	ldr	r2, [pc, #604]	; (8005918 <loadMenuTexts+0x93c>)
 80056ba:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextEN);
 80056bc:	4897      	ldr	r0, [pc, #604]	; (800591c <loadMenuTexts+0x940>)
 80056be:	f7fb f905 	bl	80008cc <copyText>
 80056c2:	4603      	mov	r3, r0
 80056c4:	4a96      	ldr	r2, [pc, #600]	; (8005920 <loadMenuTexts+0x944>)
 80056c6:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextEN);
 80056c8:	4896      	ldr	r0, [pc, #600]	; (8005924 <loadMenuTexts+0x948>)
 80056ca:	f7fb f8ff 	bl	80008cc <copyText>
 80056ce:	4603      	mov	r3, r0
 80056d0:	4a95      	ldr	r2, [pc, #596]	; (8005928 <loadMenuTexts+0x94c>)
 80056d2:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextEN);
 80056d4:	4895      	ldr	r0, [pc, #596]	; (800592c <loadMenuTexts+0x950>)
 80056d6:	f7fb f8f9 	bl	80008cc <copyText>
 80056da:	4603      	mov	r3, r0
 80056dc:	4a94      	ldr	r2, [pc, #592]	; (8005930 <loadMenuTexts+0x954>)
 80056de:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextEN);
 80056e0:	4894      	ldr	r0, [pc, #592]	; (8005934 <loadMenuTexts+0x958>)
 80056e2:	f7fb f8f3 	bl	80008cc <copyText>
 80056e6:	4603      	mov	r3, r0
 80056e8:	4a93      	ldr	r2, [pc, #588]	; (8005938 <loadMenuTexts+0x95c>)
 80056ea:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextEN);
 80056ec:	4893      	ldr	r0, [pc, #588]	; (800593c <loadMenuTexts+0x960>)
 80056ee:	f7fb f8ed 	bl	80008cc <copyText>
 80056f2:	4603      	mov	r3, r0
 80056f4:	4a92      	ldr	r2, [pc, #584]	; (8005940 <loadMenuTexts+0x964>)
 80056f6:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextEN);
 80056f8:	4892      	ldr	r0, [pc, #584]	; (8005944 <loadMenuTexts+0x968>)
 80056fa:	f7fb f8e7 	bl	80008cc <copyText>
 80056fe:	4603      	mov	r3, r0
 8005700:	4a91      	ldr	r2, [pc, #580]	; (8005948 <loadMenuTexts+0x96c>)
 8005702:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextEN);
 8005704:	4891      	ldr	r0, [pc, #580]	; (800594c <loadMenuTexts+0x970>)
 8005706:	f7fb f8e1 	bl	80008cc <copyText>
 800570a:	4603      	mov	r3, r0
 800570c:	4a90      	ldr	r2, [pc, #576]	; (8005950 <loadMenuTexts+0x974>)
 800570e:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextEN);
 8005710:	4890      	ldr	r0, [pc, #576]	; (8005954 <loadMenuTexts+0x978>)
 8005712:	f7fb f8db 	bl	80008cc <copyText>
 8005716:	4603      	mov	r3, r0
 8005718:	4a8f      	ldr	r2, [pc, #572]	; (8005958 <loadMenuTexts+0x97c>)
 800571a:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextEN);
 800571c:	488f      	ldr	r0, [pc, #572]	; (800595c <loadMenuTexts+0x980>)
 800571e:	f7fb f8d5 	bl	80008cc <copyText>
 8005722:	4603      	mov	r3, r0
 8005724:	4a8e      	ldr	r2, [pc, #568]	; (8005960 <loadMenuTexts+0x984>)
 8005726:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextEN);
 8005728:	488e      	ldr	r0, [pc, #568]	; (8005964 <loadMenuTexts+0x988>)
 800572a:	f7fb f8cf 	bl	80008cc <copyText>
 800572e:	4603      	mov	r3, r0
 8005730:	4a8d      	ldr	r2, [pc, #564]	; (8005968 <loadMenuTexts+0x98c>)
 8005732:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextEN);
 8005734:	488d      	ldr	r0, [pc, #564]	; (800596c <loadMenuTexts+0x990>)
 8005736:	f7fb f8c9 	bl	80008cc <copyText>
 800573a:	4603      	mov	r3, r0
 800573c:	4a8c      	ldr	r2, [pc, #560]	; (8005970 <loadMenuTexts+0x994>)
 800573e:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextEN);
 8005740:	488c      	ldr	r0, [pc, #560]	; (8005974 <loadMenuTexts+0x998>)
 8005742:	f7fb f8c3 	bl	80008cc <copyText>
 8005746:	4603      	mov	r3, r0
 8005748:	4a8b      	ldr	r2, [pc, #556]	; (8005978 <loadMenuTexts+0x99c>)
 800574a:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextEN);
 800574c:	488b      	ldr	r0, [pc, #556]	; (800597c <loadMenuTexts+0x9a0>)
 800574e:	f7fb f8bd 	bl	80008cc <copyText>
 8005752:	4603      	mov	r3, r0
 8005754:	4a8a      	ldr	r2, [pc, #552]	; (8005980 <loadMenuTexts+0x9a4>)
 8005756:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextEN);
 8005758:	488a      	ldr	r0, [pc, #552]	; (8005984 <loadMenuTexts+0x9a8>)
 800575a:	f7fb f8b7 	bl	80008cc <copyText>
 800575e:	4603      	mov	r3, r0
 8005760:	4a89      	ldr	r2, [pc, #548]	; (8005988 <loadMenuTexts+0x9ac>)
 8005762:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextEN);
 8005764:	4889      	ldr	r0, [pc, #548]	; (800598c <loadMenuTexts+0x9b0>)
 8005766:	f7fb f8b1 	bl	80008cc <copyText>
 800576a:	4603      	mov	r3, r0
 800576c:	4a88      	ldr	r2, [pc, #544]	; (8005990 <loadMenuTexts+0x9b4>)
 800576e:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextEN);
 8005770:	4888      	ldr	r0, [pc, #544]	; (8005994 <loadMenuTexts+0x9b8>)
 8005772:	f7fb f8ab 	bl	80008cc <copyText>
 8005776:	4603      	mov	r3, r0
 8005778:	4a87      	ldr	r2, [pc, #540]	; (8005998 <loadMenuTexts+0x9bc>)
 800577a:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextEN);
 800577c:	4887      	ldr	r0, [pc, #540]	; (800599c <loadMenuTexts+0x9c0>)
 800577e:	f7fb f8a5 	bl	80008cc <copyText>
 8005782:	4603      	mov	r3, r0
 8005784:	4a86      	ldr	r2, [pc, #536]	; (80059a0 <loadMenuTexts+0x9c4>)
 8005786:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextEN);
 8005788:	4886      	ldr	r0, [pc, #536]	; (80059a4 <loadMenuTexts+0x9c8>)
 800578a:	f7fb f89f 	bl	80008cc <copyText>
 800578e:	4603      	mov	r3, r0
 8005790:	4a85      	ldr	r2, [pc, #532]	; (80059a8 <loadMenuTexts+0x9cc>)
 8005792:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextEN);
 8005794:	4885      	ldr	r0, [pc, #532]	; (80059ac <loadMenuTexts+0x9d0>)
 8005796:	f7fb f899 	bl	80008cc <copyText>
 800579a:	4603      	mov	r3, r0
 800579c:	4a84      	ldr	r2, [pc, #528]	; (80059b0 <loadMenuTexts+0x9d4>)
 800579e:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextEN);
 80057a0:	4884      	ldr	r0, [pc, #528]	; (80059b4 <loadMenuTexts+0x9d8>)
 80057a2:	f7fb f893 	bl	80008cc <copyText>
 80057a6:	4603      	mov	r3, r0
 80057a8:	4a83      	ldr	r2, [pc, #524]	; (80059b8 <loadMenuTexts+0x9dc>)
 80057aa:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextEN);
 80057ac:	4883      	ldr	r0, [pc, #524]	; (80059bc <loadMenuTexts+0x9e0>)
 80057ae:	f7fb f88d 	bl	80008cc <copyText>
 80057b2:	4603      	mov	r3, r0
 80057b4:	4a82      	ldr	r2, [pc, #520]	; (80059c0 <loadMenuTexts+0x9e4>)
 80057b6:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextEN);
 80057b8:	4882      	ldr	r0, [pc, #520]	; (80059c4 <loadMenuTexts+0x9e8>)
 80057ba:	f7fb f887 	bl	80008cc <copyText>
 80057be:	4603      	mov	r3, r0
 80057c0:	4a81      	ldr	r2, [pc, #516]	; (80059c8 <loadMenuTexts+0x9ec>)
 80057c2:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextEN);
 80057c4:	4881      	ldr	r0, [pc, #516]	; (80059cc <loadMenuTexts+0x9f0>)
 80057c6:	f7fb f881 	bl	80008cc <copyText>
 80057ca:	4603      	mov	r3, r0
 80057cc:	4a80      	ldr	r2, [pc, #512]	; (80059d0 <loadMenuTexts+0x9f4>)
 80057ce:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextEN);
 80057d0:	4880      	ldr	r0, [pc, #512]	; (80059d4 <loadMenuTexts+0x9f8>)
 80057d2:	f7fb f87b 	bl	80008cc <copyText>
 80057d6:	4603      	mov	r3, r0
 80057d8:	4a7f      	ldr	r2, [pc, #508]	; (80059d8 <loadMenuTexts+0x9fc>)
 80057da:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextEN);
 80057dc:	487f      	ldr	r0, [pc, #508]	; (80059dc <loadMenuTexts+0xa00>)
 80057de:	f7fb f875 	bl	80008cc <copyText>
 80057e2:	4603      	mov	r3, r0
 80057e4:	4a7e      	ldr	r2, [pc, #504]	; (80059e0 <loadMenuTexts+0xa04>)
 80057e6:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextEN);
 80057e8:	487e      	ldr	r0, [pc, #504]	; (80059e4 <loadMenuTexts+0xa08>)
 80057ea:	f7fb f86f 	bl	80008cc <copyText>
 80057ee:	4603      	mov	r3, r0
 80057f0:	4a7d      	ldr	r2, [pc, #500]	; (80059e8 <loadMenuTexts+0xa0c>)
 80057f2:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextEN);
 80057f4:	487d      	ldr	r0, [pc, #500]	; (80059ec <loadMenuTexts+0xa10>)
 80057f6:	f7fb f869 	bl	80008cc <copyText>
 80057fa:	4603      	mov	r3, r0
 80057fc:	4a7c      	ldr	r2, [pc, #496]	; (80059f0 <loadMenuTexts+0xa14>)
 80057fe:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextEN);
 8005800:	487c      	ldr	r0, [pc, #496]	; (80059f4 <loadMenuTexts+0xa18>)
 8005802:	f7fb f863 	bl	80008cc <copyText>
 8005806:	4603      	mov	r3, r0
 8005808:	4a7b      	ldr	r2, [pc, #492]	; (80059f8 <loadMenuTexts+0xa1c>)
 800580a:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextEN);
 800580c:	487b      	ldr	r0, [pc, #492]	; (80059fc <loadMenuTexts+0xa20>)
 800580e:	f7fb f85d 	bl	80008cc <copyText>
 8005812:	4603      	mov	r3, r0
 8005814:	4a7a      	ldr	r2, [pc, #488]	; (8005a00 <loadMenuTexts+0xa24>)
 8005816:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextEN);
 8005818:	487a      	ldr	r0, [pc, #488]	; (8005a04 <loadMenuTexts+0xa28>)
 800581a:	f7fb f857 	bl	80008cc <copyText>
 800581e:	4603      	mov	r3, r0
 8005820:	4a79      	ldr	r2, [pc, #484]	; (8005a08 <loadMenuTexts+0xa2c>)
 8005822:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextEN);
 8005824:	4879      	ldr	r0, [pc, #484]	; (8005a0c <loadMenuTexts+0xa30>)
 8005826:	f7fb f851 	bl	80008cc <copyText>
 800582a:	4603      	mov	r3, r0
 800582c:	4a78      	ldr	r2, [pc, #480]	; (8005a10 <loadMenuTexts+0xa34>)
 800582e:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextEN);
 8005830:	4878      	ldr	r0, [pc, #480]	; (8005a14 <loadMenuTexts+0xa38>)
 8005832:	f7fb f84b 	bl	80008cc <copyText>
 8005836:	4603      	mov	r3, r0
 8005838:	4a77      	ldr	r2, [pc, #476]	; (8005a18 <loadMenuTexts+0xa3c>)
 800583a:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextEN);
 800583c:	4877      	ldr	r0, [pc, #476]	; (8005a1c <loadMenuTexts+0xa40>)
 800583e:	f7fb f845 	bl	80008cc <copyText>
 8005842:	4603      	mov	r3, r0
 8005844:	4a76      	ldr	r2, [pc, #472]	; (8005a20 <loadMenuTexts+0xa44>)
 8005846:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextEN);
 8005848:	4876      	ldr	r0, [pc, #472]	; (8005a24 <loadMenuTexts+0xa48>)
 800584a:	f7fb f83f 	bl	80008cc <copyText>
 800584e:	4603      	mov	r3, r0
 8005850:	4a75      	ldr	r2, [pc, #468]	; (8005a28 <loadMenuTexts+0xa4c>)
 8005852:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextEN);
 8005854:	4875      	ldr	r0, [pc, #468]	; (8005a2c <loadMenuTexts+0xa50>)
 8005856:	f7fb f839 	bl	80008cc <copyText>
 800585a:	4603      	mov	r3, r0
 800585c:	4a74      	ldr	r2, [pc, #464]	; (8005a30 <loadMenuTexts+0xa54>)
 800585e:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextEN);
 8005860:	4874      	ldr	r0, [pc, #464]	; (8005a34 <loadMenuTexts+0xa58>)
 8005862:	f7fb f833 	bl	80008cc <copyText>
 8005866:	4603      	mov	r3, r0
 8005868:	4a73      	ldr	r2, [pc, #460]	; (8005a38 <loadMenuTexts+0xa5c>)
 800586a:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextEN);
 800586c:	4873      	ldr	r0, [pc, #460]	; (8005a3c <loadMenuTexts+0xa60>)
 800586e:	f7fb f82d 	bl	80008cc <copyText>
 8005872:	4603      	mov	r3, r0
 8005874:	4a72      	ldr	r2, [pc, #456]	; (8005a40 <loadMenuTexts+0xa64>)
 8005876:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextEN);
 8005878:	4872      	ldr	r0, [pc, #456]	; (8005a44 <loadMenuTexts+0xa68>)
 800587a:	f7fb f827 	bl	80008cc <copyText>
 800587e:	4603      	mov	r3, r0
 8005880:	4a71      	ldr	r2, [pc, #452]	; (8005a48 <loadMenuTexts+0xa6c>)
 8005882:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextEN);
 8005884:	4871      	ldr	r0, [pc, #452]	; (8005a4c <loadMenuTexts+0xa70>)
 8005886:	f7fb f821 	bl	80008cc <copyText>
 800588a:	e0e1      	b.n	8005a50 <loadMenuTexts+0xa74>
 800588c:	200004c0 	.word	0x200004c0
 8005890:	20000d0c 	.word	0x20000d0c
 8005894:	200004d0 	.word	0x200004d0
 8005898:	20000d10 	.word	0x20000d10
 800589c:	200004e0 	.word	0x200004e0
 80058a0:	20000d14 	.word	0x20000d14
 80058a4:	200004f0 	.word	0x200004f0
 80058a8:	20000d18 	.word	0x20000d18
 80058ac:	20000500 	.word	0x20000500
 80058b0:	20000d1c 	.word	0x20000d1c
 80058b4:	20000510 	.word	0x20000510
 80058b8:	20000d20 	.word	0x20000d20
 80058bc:	20000520 	.word	0x20000520
 80058c0:	20000d24 	.word	0x20000d24
 80058c4:	20000530 	.word	0x20000530
 80058c8:	20000d28 	.word	0x20000d28
 80058cc:	20000540 	.word	0x20000540
 80058d0:	20000d2c 	.word	0x20000d2c
 80058d4:	20000550 	.word	0x20000550
 80058d8:	20000d30 	.word	0x20000d30
 80058dc:	20000560 	.word	0x20000560
 80058e0:	20000d34 	.word	0x20000d34
 80058e4:	20000570 	.word	0x20000570
 80058e8:	20000d38 	.word	0x20000d38
 80058ec:	20000580 	.word	0x20000580
 80058f0:	20000d3c 	.word	0x20000d3c
 80058f4:	20000590 	.word	0x20000590
 80058f8:	20000d40 	.word	0x20000d40
 80058fc:	200005a0 	.word	0x200005a0
 8005900:	20000d44 	.word	0x20000d44
 8005904:	200005b0 	.word	0x200005b0
 8005908:	20000d48 	.word	0x20000d48
 800590c:	200005c0 	.word	0x200005c0
 8005910:	20000d4c 	.word	0x20000d4c
 8005914:	200005d0 	.word	0x200005d0
 8005918:	20000d50 	.word	0x20000d50
 800591c:	200005e0 	.word	0x200005e0
 8005920:	20000d54 	.word	0x20000d54
 8005924:	200005f0 	.word	0x200005f0
 8005928:	20000d58 	.word	0x20000d58
 800592c:	20000600 	.word	0x20000600
 8005930:	20000d5c 	.word	0x20000d5c
 8005934:	20000610 	.word	0x20000610
 8005938:	20000d64 	.word	0x20000d64
 800593c:	20000620 	.word	0x20000620
 8005940:	20000d68 	.word	0x20000d68
 8005944:	20000630 	.word	0x20000630
 8005948:	20000d6c 	.word	0x20000d6c
 800594c:	20000640 	.word	0x20000640
 8005950:	20000d70 	.word	0x20000d70
 8005954:	20000650 	.word	0x20000650
 8005958:	20000d74 	.word	0x20000d74
 800595c:	20000660 	.word	0x20000660
 8005960:	20000d78 	.word	0x20000d78
 8005964:	20000670 	.word	0x20000670
 8005968:	20000d7c 	.word	0x20000d7c
 800596c:	20000680 	.word	0x20000680
 8005970:	20000d80 	.word	0x20000d80
 8005974:	20000690 	.word	0x20000690
 8005978:	20000d84 	.word	0x20000d84
 800597c:	200006a0 	.word	0x200006a0
 8005980:	20000d88 	.word	0x20000d88
 8005984:	200006b0 	.word	0x200006b0
 8005988:	20000d8c 	.word	0x20000d8c
 800598c:	200006c0 	.word	0x200006c0
 8005990:	20000d94 	.word	0x20000d94
 8005994:	200006d0 	.word	0x200006d0
 8005998:	20000d9c 	.word	0x20000d9c
 800599c:	200006e0 	.word	0x200006e0
 80059a0:	20000da0 	.word	0x20000da0
 80059a4:	200006f0 	.word	0x200006f0
 80059a8:	20000da4 	.word	0x20000da4
 80059ac:	20000700 	.word	0x20000700
 80059b0:	20000da8 	.word	0x20000da8
 80059b4:	20000710 	.word	0x20000710
 80059b8:	20000dac 	.word	0x20000dac
 80059bc:	20000720 	.word	0x20000720
 80059c0:	20000db0 	.word	0x20000db0
 80059c4:	20000730 	.word	0x20000730
 80059c8:	20000db4 	.word	0x20000db4
 80059cc:	20000740 	.word	0x20000740
 80059d0:	20000db8 	.word	0x20000db8
 80059d4:	20000750 	.word	0x20000750
 80059d8:	20000dbc 	.word	0x20000dbc
 80059dc:	20000760 	.word	0x20000760
 80059e0:	20000dc0 	.word	0x20000dc0
 80059e4:	20000770 	.word	0x20000770
 80059e8:	20000dc4 	.word	0x20000dc4
 80059ec:	20000780 	.word	0x20000780
 80059f0:	20000dc8 	.word	0x20000dc8
 80059f4:	20000790 	.word	0x20000790
 80059f8:	20000dcc 	.word	0x20000dcc
 80059fc:	200007a0 	.word	0x200007a0
 8005a00:	20000dd0 	.word	0x20000dd0
 8005a04:	200007b0 	.word	0x200007b0
 8005a08:	20000dd4 	.word	0x20000dd4
 8005a0c:	200007c0 	.word	0x200007c0
 8005a10:	20000dd8 	.word	0x20000dd8
 8005a14:	200007d0 	.word	0x200007d0
 8005a18:	20000ddc 	.word	0x20000ddc
 8005a1c:	200007e0 	.word	0x200007e0
 8005a20:	20000de0 	.word	0x20000de0
 8005a24:	200007f0 	.word	0x200007f0
 8005a28:	20000de4 	.word	0x20000de4
 8005a2c:	20000800 	.word	0x20000800
 8005a30:	20000de8 	.word	0x20000de8
 8005a34:	20000810 	.word	0x20000810
 8005a38:	20000dec 	.word	0x20000dec
 8005a3c:	20000820 	.word	0x20000820
 8005a40:	20000df0 	.word	0x20000df0
 8005a44:	20000830 	.word	0x20000830
 8005a48:	20000df4 	.word	0x20000df4
 8005a4c:	20000840 	.word	0x20000840
 8005a50:	4603      	mov	r3, r0
 8005a52:	4a27      	ldr	r2, [pc, #156]	; (8005af0 <loadMenuTexts+0xb14>)
 8005a54:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextEN);
 8005a56:	4827      	ldr	r0, [pc, #156]	; (8005af4 <loadMenuTexts+0xb18>)
 8005a58:	f7fa ff38 	bl	80008cc <copyText>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	4a26      	ldr	r2, [pc, #152]	; (8005af8 <loadMenuTexts+0xb1c>)
 8005a60:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextEN);
 8005a62:	4826      	ldr	r0, [pc, #152]	; (8005afc <loadMenuTexts+0xb20>)
 8005a64:	f7fa ff32 	bl	80008cc <copyText>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	4a25      	ldr	r2, [pc, #148]	; (8005b00 <loadMenuTexts+0xb24>)
 8005a6c:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextEN);
 8005a6e:	4825      	ldr	r0, [pc, #148]	; (8005b04 <loadMenuTexts+0xb28>)
 8005a70:	f7fa ff2c 	bl	80008cc <copyText>
 8005a74:	4603      	mov	r3, r0
 8005a76:	4a24      	ldr	r2, [pc, #144]	; (8005b08 <loadMenuTexts+0xb2c>)
 8005a78:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextEN);
 8005a7a:	4824      	ldr	r0, [pc, #144]	; (8005b0c <loadMenuTexts+0xb30>)
 8005a7c:	f7fa ff26 	bl	80008cc <copyText>
 8005a80:	4603      	mov	r3, r0
 8005a82:	4a23      	ldr	r2, [pc, #140]	; (8005b10 <loadMenuTexts+0xb34>)
 8005a84:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextEN);
 8005a86:	4823      	ldr	r0, [pc, #140]	; (8005b14 <loadMenuTexts+0xb38>)
 8005a88:	f7fa ff20 	bl	80008cc <copyText>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	4a22      	ldr	r2, [pc, #136]	; (8005b18 <loadMenuTexts+0xb3c>)
 8005a90:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextEN);
 8005a92:	4822      	ldr	r0, [pc, #136]	; (8005b1c <loadMenuTexts+0xb40>)
 8005a94:	f7fa ff1a 	bl	80008cc <copyText>
 8005a98:	4603      	mov	r3, r0
 8005a9a:	4a21      	ldr	r2, [pc, #132]	; (8005b20 <loadMenuTexts+0xb44>)
 8005a9c:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextEN);
 8005a9e:	4821      	ldr	r0, [pc, #132]	; (8005b24 <loadMenuTexts+0xb48>)
 8005aa0:	f7fa ff14 	bl	80008cc <copyText>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	4a20      	ldr	r2, [pc, #128]	; (8005b28 <loadMenuTexts+0xb4c>)
 8005aa8:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextEN);
 8005aaa:	4820      	ldr	r0, [pc, #128]	; (8005b2c <loadMenuTexts+0xb50>)
 8005aac:	f7fa ff0e 	bl	80008cc <copyText>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	4a1f      	ldr	r2, [pc, #124]	; (8005b30 <loadMenuTexts+0xb54>)
 8005ab4:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
 8005ab6:	481f      	ldr	r0, [pc, #124]	; (8005b34 <loadMenuTexts+0xb58>)
 8005ab8:	f7fa ff08 	bl	80008cc <copyText>
 8005abc:	4603      	mov	r3, r0
 8005abe:	4a1e      	ldr	r2, [pc, #120]	; (8005b38 <loadMenuTexts+0xb5c>)
 8005ac0:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextEN);
 8005ac2:	481e      	ldr	r0, [pc, #120]	; (8005b3c <loadMenuTexts+0xb60>)
 8005ac4:	f7fa ff02 	bl	80008cc <copyText>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	4a1d      	ldr	r2, [pc, #116]	; (8005b40 <loadMenuTexts+0xb64>)
 8005acc:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextEN);
 8005ace:	481d      	ldr	r0, [pc, #116]	; (8005b44 <loadMenuTexts+0xb68>)
 8005ad0:	f7fa fefc 	bl	80008cc <copyText>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	4a1c      	ldr	r2, [pc, #112]	; (8005b48 <loadMenuTexts+0xb6c>)
 8005ad8:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextEN);
 8005ada:	481c      	ldr	r0, [pc, #112]	; (8005b4c <loadMenuTexts+0xb70>)
 8005adc:	f7fa fef6 	bl	80008cc <copyText>
 8005ae0:	4603      	mov	r3, r0
 8005ae2:	4a1b      	ldr	r2, [pc, #108]	; (8005b50 <loadMenuTexts+0xb74>)
 8005ae4:	6013      	str	r3, [r2, #0]
}
 8005ae6:	bf00      	nop
 8005ae8:	3708      	adds	r7, #8
 8005aea:	46bd      	mov	sp, r7
 8005aec:	bd80      	pop	{r7, pc}
 8005aee:	bf00      	nop
 8005af0:	20000df8 	.word	0x20000df8
 8005af4:	20000850 	.word	0x20000850
 8005af8:	20000dfc 	.word	0x20000dfc
 8005afc:	20000860 	.word	0x20000860
 8005b00:	20000e00 	.word	0x20000e00
 8005b04:	20000870 	.word	0x20000870
 8005b08:	20000e04 	.word	0x20000e04
 8005b0c:	20000880 	.word	0x20000880
 8005b10:	20000e08 	.word	0x20000e08
 8005b14:	20000890 	.word	0x20000890
 8005b18:	20000e0c 	.word	0x20000e0c
 8005b1c:	200008a0 	.word	0x200008a0
 8005b20:	20000e18 	.word	0x20000e18
 8005b24:	200008b0 	.word	0x200008b0
 8005b28:	20000e1c 	.word	0x20000e1c
 8005b2c:	200008c0 	.word	0x200008c0
 8005b30:	20000e20 	.word	0x20000e20
 8005b34:	200008d0 	.word	0x200008d0
 8005b38:	20000e24 	.word	0x20000e24
 8005b3c:	200008e0 	.word	0x200008e0
 8005b40:	20000e28 	.word	0x20000e28
 8005b44:	200008f0 	.word	0x200008f0
 8005b48:	20000e2c 	.word	0x20000e2c
 8005b4c:	20000900 	.word	0x20000900
 8005b50:	20000e30 	.word	0x20000e30

08005b54 <lcdUpdate>:
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

//Tüm fonksiyonlar:

void lcdUpdate(uint8_t y) {
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	4603      	mov	r3, r0
 8005b5c:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 8005b5e:	79fb      	ldrb	r3, [r7, #7]
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d105      	bne.n	8005b70 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 8005b64:	4a22      	ldr	r2, [pc, #136]	; (8005bf0 <lcdUpdate+0x9c>)
 8005b66:	2101      	movs	r1, #1
 8005b68:	2002      	movs	r0, #2
 8005b6a:	f7fa fe25 	bl	80007b8 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 1, "    ESP-RMK     ");
		lcd_print(2, 1, "      RUN       ");
	}
}
 8005b6e:	e03b      	b.n	8005be8 <lcdUpdate+0x94>
	} else if(y==2) {
 8005b70:	79fb      	ldrb	r3, [r7, #7]
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d105      	bne.n	8005b82 <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 8005b76:	4a1e      	ldr	r2, [pc, #120]	; (8005bf0 <lcdUpdate+0x9c>)
 8005b78:	2102      	movs	r1, #2
 8005b7a:	2002      	movs	r0, #2
 8005b7c:	f7fa fe1c 	bl	80007b8 <lcd_print>
}
 8005b80:	e032      	b.n	8005be8 <lcdUpdate+0x94>
	} else if(y==3) {
 8005b82:	79fb      	ldrb	r3, [r7, #7]
 8005b84:	2b03      	cmp	r3, #3
 8005b86:	d105      	bne.n	8005b94 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 8005b88:	4a19      	ldr	r2, [pc, #100]	; (8005bf0 <lcdUpdate+0x9c>)
 8005b8a:	2103      	movs	r1, #3
 8005b8c:	2002      	movs	r0, #2
 8005b8e:	f7fa fe13 	bl	80007b8 <lcd_print>
}
 8005b92:	e029      	b.n	8005be8 <lcdUpdate+0x94>
	} else if(y==4) {
 8005b94:	79fb      	ldrb	r3, [r7, #7]
 8005b96:	2b04      	cmp	r3, #4
 8005b98:	d105      	bne.n	8005ba6 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8005b9a:	4a15      	ldr	r2, [pc, #84]	; (8005bf0 <lcdUpdate+0x9c>)
 8005b9c:	2104      	movs	r1, #4
 8005b9e:	2002      	movs	r0, #2
 8005ba0:	f7fa fe0a 	bl	80007b8 <lcd_print>
}
 8005ba4:	e020      	b.n	8005be8 <lcdUpdate+0x94>
	} else if(y==5) {
 8005ba6:	79fb      	ldrb	r3, [r7, #7]
 8005ba8:	2b05      	cmp	r3, #5
 8005baa:	d105      	bne.n	8005bb8 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8005bac:	4a10      	ldr	r2, [pc, #64]	; (8005bf0 <lcdUpdate+0x9c>)
 8005bae:	2105      	movs	r1, #5
 8005bb0:	2002      	movs	r0, #2
 8005bb2:	f7fa fe01 	bl	80007b8 <lcd_print>
}
 8005bb6:	e017      	b.n	8005be8 <lcdUpdate+0x94>
	} else if(y==6) {
 8005bb8:	79fb      	ldrb	r3, [r7, #7]
 8005bba:	2b06      	cmp	r3, #6
 8005bbc:	d105      	bne.n	8005bca <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8005bbe:	4a0c      	ldr	r2, [pc, #48]	; (8005bf0 <lcdUpdate+0x9c>)
 8005bc0:	2106      	movs	r1, #6
 8005bc2:	2002      	movs	r0, #2
 8005bc4:	f7fa fdf8 	bl	80007b8 <lcd_print>
}
 8005bc8:	e00e      	b.n	8005be8 <lcdUpdate+0x94>
	} else if (y==7) {
 8005bca:	79fb      	ldrb	r3, [r7, #7]
 8005bcc:	2b07      	cmp	r3, #7
 8005bce:	d10b      	bne.n	8005be8 <lcdUpdate+0x94>
		lcd_clear();
 8005bd0:	f7fa fe1e 	bl	8000810 <lcd_clear>
		lcd_print(1, 1, "    ESP-RMK     ");
 8005bd4:	4a07      	ldr	r2, [pc, #28]	; (8005bf4 <lcdUpdate+0xa0>)
 8005bd6:	2101      	movs	r1, #1
 8005bd8:	2001      	movs	r0, #1
 8005bda:	f7fa fded 	bl	80007b8 <lcd_print>
		lcd_print(2, 1, "      RUN       ");
 8005bde:	4a06      	ldr	r2, [pc, #24]	; (8005bf8 <lcdUpdate+0xa4>)
 8005be0:	2101      	movs	r1, #1
 8005be2:	2002      	movs	r0, #2
 8005be4:	f7fa fde8 	bl	80007b8 <lcd_print>
}
 8005be8:	bf00      	nop
 8005bea:	3708      	adds	r7, #8
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}
 8005bf0:	0800de70 	.word	0x0800de70
 8005bf4:	0800e79c 	.word	0x0800e79c
 8005bf8:	0800e7b0 	.word	0x0800e7b0

08005bfc <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	4603      	mov	r3, r0
 8005c04:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8005c06:	79fb      	ldrb	r3, [r7, #7]
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d11d      	bne.n	8005c48 <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8005c0c:	4b62      	ldr	r3, [pc, #392]	; (8005d98 <hataKoduLcdGoster+0x19c>)
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d105      	bne.n	8005c20 <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU    ");
 8005c14:	4a61      	ldr	r2, [pc, #388]	; (8005d9c <hataKoduLcdGoster+0x1a0>)
 8005c16:	2101      	movs	r1, #1
 8005c18:	2001      	movs	r0, #1
 8005c1a:	f7fa fdcd 	bl	80007b8 <lcd_print>
 8005c1e:	e008      	b.n	8005c32 <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 8005c20:	4b5d      	ldr	r3, [pc, #372]	; (8005d98 <hataKoduLcdGoster+0x19c>)
 8005c22:	781b      	ldrb	r3, [r3, #0]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d104      	bne.n	8005c32 <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005c28:	4a5d      	ldr	r2, [pc, #372]	; (8005da0 <hataKoduLcdGoster+0x1a4>)
 8005c2a:	2101      	movs	r1, #1
 8005c2c:	2001      	movs	r0, #1
 8005c2e:	f7fa fdc3 	bl	80007b8 <lcd_print>
		}
		lcd_print(2, 1, "1");
 8005c32:	4a5c      	ldr	r2, [pc, #368]	; (8005da4 <hataKoduLcdGoster+0x1a8>)
 8005c34:	2101      	movs	r1, #1
 8005c36:	2002      	movs	r0, #2
 8005c38:	f7fa fdbe 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 8005c3c:	4a5a      	ldr	r2, [pc, #360]	; (8005da8 <hataKoduLcdGoster+0x1ac>)
 8005c3e:	2107      	movs	r1, #7
 8005c40:	2002      	movs	r0, #2
 8005c42:	f7fa fdb9 	bl	80007b8 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE   ");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8005c46:	e0a3      	b.n	8005d90 <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8005c48:	79fb      	ldrb	r3, [r7, #7]
 8005c4a:	2b02      	cmp	r3, #2
 8005c4c:	d11d      	bne.n	8005c8a <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 8005c4e:	4b52      	ldr	r3, [pc, #328]	; (8005d98 <hataKoduLcdGoster+0x19c>)
 8005c50:	781b      	ldrb	r3, [r3, #0]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d105      	bne.n	8005c62 <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU    ");
 8005c56:	4a51      	ldr	r2, [pc, #324]	; (8005d9c <hataKoduLcdGoster+0x1a0>)
 8005c58:	2101      	movs	r1, #1
 8005c5a:	2001      	movs	r0, #1
 8005c5c:	f7fa fdac 	bl	80007b8 <lcd_print>
 8005c60:	e008      	b.n	8005c74 <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 8005c62:	4b4d      	ldr	r3, [pc, #308]	; (8005d98 <hataKoduLcdGoster+0x19c>)
 8005c64:	781b      	ldrb	r3, [r3, #0]
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d104      	bne.n	8005c74 <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005c6a:	4a4d      	ldr	r2, [pc, #308]	; (8005da0 <hataKoduLcdGoster+0x1a4>)
 8005c6c:	2101      	movs	r1, #1
 8005c6e:	2001      	movs	r0, #1
 8005c70:	f7fa fda2 	bl	80007b8 <lcd_print>
		lcd_print(2, 2, "2");
 8005c74:	4a4d      	ldr	r2, [pc, #308]	; (8005dac <hataKoduLcdGoster+0x1b0>)
 8005c76:	2102      	movs	r1, #2
 8005c78:	2002      	movs	r0, #2
 8005c7a:	f7fa fd9d 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 8005c7e:	4a4a      	ldr	r2, [pc, #296]	; (8005da8 <hataKoduLcdGoster+0x1ac>)
 8005c80:	2107      	movs	r1, #7
 8005c82:	2002      	movs	r0, #2
 8005c84:	f7fa fd98 	bl	80007b8 <lcd_print>
}
 8005c88:	e082      	b.n	8005d90 <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 8005c8a:	79fb      	ldrb	r3, [r7, #7]
 8005c8c:	2b03      	cmp	r3, #3
 8005c8e:	d11d      	bne.n	8005ccc <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 8005c90:	4b41      	ldr	r3, [pc, #260]	; (8005d98 <hataKoduLcdGoster+0x19c>)
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d105      	bne.n	8005ca4 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU    ");
 8005c98:	4a40      	ldr	r2, [pc, #256]	; (8005d9c <hataKoduLcdGoster+0x1a0>)
 8005c9a:	2101      	movs	r1, #1
 8005c9c:	2001      	movs	r0, #1
 8005c9e:	f7fa fd8b 	bl	80007b8 <lcd_print>
 8005ca2:	e008      	b.n	8005cb6 <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 8005ca4:	4b3c      	ldr	r3, [pc, #240]	; (8005d98 <hataKoduLcdGoster+0x19c>)
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d104      	bne.n	8005cb6 <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005cac:	4a3c      	ldr	r2, [pc, #240]	; (8005da0 <hataKoduLcdGoster+0x1a4>)
 8005cae:	2101      	movs	r1, #1
 8005cb0:	2001      	movs	r0, #1
 8005cb2:	f7fa fd81 	bl	80007b8 <lcd_print>
		lcd_print(2, 3, "3");
 8005cb6:	4a3e      	ldr	r2, [pc, #248]	; (8005db0 <hataKoduLcdGoster+0x1b4>)
 8005cb8:	2103      	movs	r1, #3
 8005cba:	2002      	movs	r0, #2
 8005cbc:	f7fa fd7c 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 8005cc0:	4a39      	ldr	r2, [pc, #228]	; (8005da8 <hataKoduLcdGoster+0x1ac>)
 8005cc2:	2107      	movs	r1, #7
 8005cc4:	2002      	movs	r0, #2
 8005cc6:	f7fa fd77 	bl	80007b8 <lcd_print>
}
 8005cca:	e061      	b.n	8005d90 <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8005ccc:	79fb      	ldrb	r3, [r7, #7]
 8005cce:	2b04      	cmp	r3, #4
 8005cd0:	d11d      	bne.n	8005d0e <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 8005cd2:	4b31      	ldr	r3, [pc, #196]	; (8005d98 <hataKoduLcdGoster+0x19c>)
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d105      	bne.n	8005ce6 <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU    ");
 8005cda:	4a30      	ldr	r2, [pc, #192]	; (8005d9c <hataKoduLcdGoster+0x1a0>)
 8005cdc:	2101      	movs	r1, #1
 8005cde:	2001      	movs	r0, #1
 8005ce0:	f7fa fd6a 	bl	80007b8 <lcd_print>
 8005ce4:	e008      	b.n	8005cf8 <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8005ce6:	4b2c      	ldr	r3, [pc, #176]	; (8005d98 <hataKoduLcdGoster+0x19c>)
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	2b01      	cmp	r3, #1
 8005cec:	d104      	bne.n	8005cf8 <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005cee:	4a2c      	ldr	r2, [pc, #176]	; (8005da0 <hataKoduLcdGoster+0x1a4>)
 8005cf0:	2101      	movs	r1, #1
 8005cf2:	2001      	movs	r0, #1
 8005cf4:	f7fa fd60 	bl	80007b8 <lcd_print>
		lcd_print(2, 4, "4");
 8005cf8:	4a2e      	ldr	r2, [pc, #184]	; (8005db4 <hataKoduLcdGoster+0x1b8>)
 8005cfa:	2104      	movs	r1, #4
 8005cfc:	2002      	movs	r0, #2
 8005cfe:	f7fa fd5b 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 8005d02:	4a29      	ldr	r2, [pc, #164]	; (8005da8 <hataKoduLcdGoster+0x1ac>)
 8005d04:	2107      	movs	r1, #7
 8005d06:	2002      	movs	r0, #2
 8005d08:	f7fa fd56 	bl	80007b8 <lcd_print>
}
 8005d0c:	e040      	b.n	8005d90 <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8005d0e:	79fb      	ldrb	r3, [r7, #7]
 8005d10:	2b05      	cmp	r3, #5
 8005d12:	d11d      	bne.n	8005d50 <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8005d14:	4b20      	ldr	r3, [pc, #128]	; (8005d98 <hataKoduLcdGoster+0x19c>)
 8005d16:	781b      	ldrb	r3, [r3, #0]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d105      	bne.n	8005d28 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU    ");
 8005d1c:	4a1f      	ldr	r2, [pc, #124]	; (8005d9c <hataKoduLcdGoster+0x1a0>)
 8005d1e:	2101      	movs	r1, #1
 8005d20:	2001      	movs	r0, #1
 8005d22:	f7fa fd49 	bl	80007b8 <lcd_print>
 8005d26:	e008      	b.n	8005d3a <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8005d28:	4b1b      	ldr	r3, [pc, #108]	; (8005d98 <hataKoduLcdGoster+0x19c>)
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d104      	bne.n	8005d3a <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005d30:	4a1b      	ldr	r2, [pc, #108]	; (8005da0 <hataKoduLcdGoster+0x1a4>)
 8005d32:	2101      	movs	r1, #1
 8005d34:	2001      	movs	r0, #1
 8005d36:	f7fa fd3f 	bl	80007b8 <lcd_print>
		lcd_print(2, 5, "5");
 8005d3a:	4a1f      	ldr	r2, [pc, #124]	; (8005db8 <hataKoduLcdGoster+0x1bc>)
 8005d3c:	2105      	movs	r1, #5
 8005d3e:	2002      	movs	r0, #2
 8005d40:	f7fa fd3a 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 8005d44:	4a18      	ldr	r2, [pc, #96]	; (8005da8 <hataKoduLcdGoster+0x1ac>)
 8005d46:	2107      	movs	r1, #7
 8005d48:	2002      	movs	r0, #2
 8005d4a:	f7fa fd35 	bl	80007b8 <lcd_print>
}
 8005d4e:	e01f      	b.n	8005d90 <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 8005d50:	79fb      	ldrb	r3, [r7, #7]
 8005d52:	2b06      	cmp	r3, #6
 8005d54:	d11c      	bne.n	8005d90 <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8005d56:	4b10      	ldr	r3, [pc, #64]	; (8005d98 <hataKoduLcdGoster+0x19c>)
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d105      	bne.n	8005d6a <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU    ");
 8005d5e:	4a0f      	ldr	r2, [pc, #60]	; (8005d9c <hataKoduLcdGoster+0x1a0>)
 8005d60:	2101      	movs	r1, #1
 8005d62:	2001      	movs	r0, #1
 8005d64:	f7fa fd28 	bl	80007b8 <lcd_print>
 8005d68:	e008      	b.n	8005d7c <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 8005d6a:	4b0b      	ldr	r3, [pc, #44]	; (8005d98 <hataKoduLcdGoster+0x19c>)
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d104      	bne.n	8005d7c <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005d72:	4a0b      	ldr	r2, [pc, #44]	; (8005da0 <hataKoduLcdGoster+0x1a4>)
 8005d74:	2101      	movs	r1, #1
 8005d76:	2001      	movs	r0, #1
 8005d78:	f7fa fd1e 	bl	80007b8 <lcd_print>
		lcd_print(2, 6, "6");
 8005d7c:	4a0f      	ldr	r2, [pc, #60]	; (8005dbc <hataKoduLcdGoster+0x1c0>)
 8005d7e:	2106      	movs	r1, #6
 8005d80:	2002      	movs	r0, #2
 8005d82:	f7fa fd19 	bl	80007b8 <lcd_print>
		lcd_print(2, 7, "          ");
 8005d86:	4a08      	ldr	r2, [pc, #32]	; (8005da8 <hataKoduLcdGoster+0x1ac>)
 8005d88:	2107      	movs	r1, #7
 8005d8a:	2002      	movs	r0, #2
 8005d8c:	f7fa fd14 	bl	80007b8 <lcd_print>
}
 8005d90:	bf00      	nop
 8005d92:	3708      	adds	r7, #8
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}
 8005d98:	20000cbe 	.word	0x20000cbe
 8005d9c:	0800e7c4 	.word	0x0800e7c4
 8005da0:	0800e7d8 	.word	0x0800e7d8
 8005da4:	0800dc18 	.word	0x0800dc18
 8005da8:	0800e7ec 	.word	0x0800e7ec
 8005dac:	0800dc1c 	.word	0x0800dc1c
 8005db0:	0800dc20 	.word	0x0800dc20
 8005db4:	0800dc24 	.word	0x0800dc24
 8005db8:	0800dc28 	.word	0x0800dc28
 8005dbc:	0800dc2c 	.word	0x0800dc2c

08005dc0 <convertAndSendData>:

void convertAndSendData() {
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b082      	sub	sp, #8
 8005dc4:	af00      	add	r7, sp, #0
	lcd_print(1, 1, "Veri Esleme");
 8005dc6:	4a14      	ldr	r2, [pc, #80]	; (8005e18 <convertAndSendData+0x58>)
 8005dc8:	2101      	movs	r1, #1
 8005dca:	2001      	movs	r0, #1
 8005dcc:	f7fa fcf4 	bl	80007b8 <lcd_print>
	lcd_print(2, 1, "Baslatildi...");
 8005dd0:	4a12      	ldr	r2, [pc, #72]	; (8005e1c <convertAndSendData+0x5c>)
 8005dd2:	2101      	movs	r1, #1
 8005dd4:	2002      	movs	r0, #2
 8005dd6:	f7fa fcef 	bl	80007b8 <lcd_print>
	for(int i=0; i<2; i++) {
 8005dda:	2300      	movs	r3, #0
 8005ddc:	607b      	str	r3, [r7, #4]
 8005dde:	e00a      	b.n	8005df6 <convertAndSendData+0x36>
		sendMachineData(&huart1, machineID, mergeData());
 8005de0:	f002 fb5e 	bl	80084a0 <mergeData>
 8005de4:	4603      	mov	r3, r0
 8005de6:	461a      	mov	r2, r3
 8005de8:	490d      	ldr	r1, [pc, #52]	; (8005e20 <convertAndSendData+0x60>)
 8005dea:	480e      	ldr	r0, [pc, #56]	; (8005e24 <convertAndSendData+0x64>)
 8005dec:	f7fa faca 	bl	8000384 <sendMachineData>
	for(int i=0; i<2; i++) {
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	3301      	adds	r3, #1
 8005df4:	607b      	str	r3, [r7, #4]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2b01      	cmp	r3, #1
 8005dfa:	ddf1      	ble.n	8005de0 <convertAndSendData+0x20>
	}
	HAL_Delay(500);
 8005dfc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005e00:	f003 fb3e 	bl	8009480 <HAL_Delay>
	lcd_clear();
 8005e04:	f7fa fd04 	bl	8000810 <lcd_clear>
	HAL_Delay(500);
 8005e08:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005e0c:	f003 fb38 	bl	8009480 <HAL_Delay>
}
 8005e10:	bf00      	nop
 8005e12:	3708      	adds	r7, #8
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}
 8005e18:	0800e7f8 	.word	0x0800e7f8
 8005e1c:	0800e804 	.word	0x0800e804
 8005e20:	20000bf4 	.word	0x20000bf4
 8005e24:	20000ef8 	.word	0x20000ef8

08005e28 <eepromKontrol>:

void eepromKontrol(int type) {
 8005e28:	b580      	push	{r7, lr}
 8005e2a:	b086      	sub	sp, #24
 8005e2c:	af04      	add	r7, sp, #16
 8005e2e:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1,0xA0,0,63,eepromData,63,3000);
 8005e30:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005e34:	9302      	str	r3, [sp, #8]
 8005e36:	233f      	movs	r3, #63	; 0x3f
 8005e38:	9301      	str	r3, [sp, #4]
 8005e3a:	4b9c      	ldr	r3, [pc, #624]	; (80060ac <eepromKontrol+0x284>)
 8005e3c:	9300      	str	r3, [sp, #0]
 8005e3e:	233f      	movs	r3, #63	; 0x3f
 8005e40:	2200      	movs	r2, #0
 8005e42:	21a0      	movs	r1, #160	; 0xa0
 8005e44:	489a      	ldr	r0, [pc, #616]	; (80060b0 <eepromKontrol+0x288>)
 8005e46:	f004 fc9f 	bl	800a788 <HAL_I2C_Mem_Read>
	HAL_Delay(1000);
 8005e4a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005e4e:	f003 fb17 	bl	8009480 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 8005e52:	4b96      	ldr	r3, [pc, #600]	; (80060ac <eepromKontrol+0x284>)
 8005e54:	78da      	ldrb	r2, [r3, #3]
 8005e56:	4b97      	ldr	r3, [pc, #604]	; (80060b4 <eepromKontrol+0x28c>)
 8005e58:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8005e5a:	4b94      	ldr	r3, [pc, #592]	; (80060ac <eepromKontrol+0x284>)
 8005e5c:	785a      	ldrb	r2, [r3, #1]
 8005e5e:	4b96      	ldr	r3, [pc, #600]	; (80060b8 <eepromKontrol+0x290>)
 8005e60:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 8005e62:	4b92      	ldr	r3, [pc, #584]	; (80060ac <eepromKontrol+0x284>)
 8005e64:	789a      	ldrb	r2, [r3, #2]
 8005e66:	4b95      	ldr	r3, [pc, #596]	; (80060bc <eepromKontrol+0x294>)
 8005e68:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8005e6a:	4b90      	ldr	r3, [pc, #576]	; (80060ac <eepromKontrol+0x284>)
 8005e6c:	791a      	ldrb	r2, [r3, #4]
 8005e6e:	4b94      	ldr	r3, [pc, #592]	; (80060c0 <eepromKontrol+0x298>)
 8005e70:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 8005e72:	4b8e      	ldr	r3, [pc, #568]	; (80060ac <eepromKontrol+0x284>)
 8005e74:	795a      	ldrb	r2, [r3, #5]
 8005e76:	4b93      	ldr	r3, [pc, #588]	; (80060c4 <eepromKontrol+0x29c>)
 8005e78:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8005e7a:	4b8c      	ldr	r3, [pc, #560]	; (80060ac <eepromKontrol+0x284>)
 8005e7c:	799a      	ldrb	r2, [r3, #6]
 8005e7e:	4b92      	ldr	r3, [pc, #584]	; (80060c8 <eepromKontrol+0x2a0>)
 8005e80:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 8005e82:	4b8a      	ldr	r3, [pc, #552]	; (80060ac <eepromKontrol+0x284>)
 8005e84:	79da      	ldrb	r2, [r3, #7]
 8005e86:	4b91      	ldr	r3, [pc, #580]	; (80060cc <eepromKontrol+0x2a4>)
 8005e88:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8005e8a:	4b88      	ldr	r3, [pc, #544]	; (80060ac <eepromKontrol+0x284>)
 8005e8c:	7a1a      	ldrb	r2, [r3, #8]
 8005e8e:	4b90      	ldr	r3, [pc, #576]	; (80060d0 <eepromKontrol+0x2a8>)
 8005e90:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 8005e92:	4b86      	ldr	r3, [pc, #536]	; (80060ac <eepromKontrol+0x284>)
 8005e94:	7a5a      	ldrb	r2, [r3, #9]
 8005e96:	4b8f      	ldr	r3, [pc, #572]	; (80060d4 <eepromKontrol+0x2ac>)
 8005e98:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 8005e9a:	4b84      	ldr	r3, [pc, #528]	; (80060ac <eepromKontrol+0x284>)
 8005e9c:	7a9a      	ldrb	r2, [r3, #10]
 8005e9e:	4b8e      	ldr	r3, [pc, #568]	; (80060d8 <eepromKontrol+0x2b0>)
 8005ea0:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 8005ea2:	4b82      	ldr	r3, [pc, #520]	; (80060ac <eepromKontrol+0x284>)
 8005ea4:	7ada      	ldrb	r2, [r3, #11]
 8005ea6:	4b8d      	ldr	r3, [pc, #564]	; (80060dc <eepromKontrol+0x2b4>)
 8005ea8:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 8005eaa:	4b80      	ldr	r3, [pc, #512]	; (80060ac <eepromKontrol+0x284>)
 8005eac:	7b1a      	ldrb	r2, [r3, #12]
 8005eae:	4b8c      	ldr	r3, [pc, #560]	; (80060e0 <eepromKontrol+0x2b8>)
 8005eb0:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 8005eb2:	4b7e      	ldr	r3, [pc, #504]	; (80060ac <eepromKontrol+0x284>)
 8005eb4:	7b5a      	ldrb	r2, [r3, #13]
 8005eb6:	4b8b      	ldr	r3, [pc, #556]	; (80060e4 <eepromKontrol+0x2bc>)
 8005eb8:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 8005eba:	4b7c      	ldr	r3, [pc, #496]	; (80060ac <eepromKontrol+0x284>)
 8005ebc:	7b9a      	ldrb	r2, [r3, #14]
 8005ebe:	4b8a      	ldr	r3, [pc, #552]	; (80060e8 <eepromKontrol+0x2c0>)
 8005ec0:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 8005ec2:	4b7a      	ldr	r3, [pc, #488]	; (80060ac <eepromKontrol+0x284>)
 8005ec4:	7bda      	ldrb	r2, [r3, #15]
 8005ec6:	4b89      	ldr	r3, [pc, #548]	; (80060ec <eepromKontrol+0x2c4>)
 8005ec8:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 8005eca:	4b78      	ldr	r3, [pc, #480]	; (80060ac <eepromKontrol+0x284>)
 8005ecc:	7c1a      	ldrb	r2, [r3, #16]
 8005ece:	4b88      	ldr	r3, [pc, #544]	; (80060f0 <eepromKontrol+0x2c8>)
 8005ed0:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 8005ed2:	4b76      	ldr	r3, [pc, #472]	; (80060ac <eepromKontrol+0x284>)
 8005ed4:	7c5a      	ldrb	r2, [r3, #17]
 8005ed6:	4b87      	ldr	r3, [pc, #540]	; (80060f4 <eepromKontrol+0x2cc>)
 8005ed8:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 8005eda:	4b74      	ldr	r3, [pc, #464]	; (80060ac <eepromKontrol+0x284>)
 8005edc:	7c9a      	ldrb	r2, [r3, #18]
 8005ede:	4b86      	ldr	r3, [pc, #536]	; (80060f8 <eepromKontrol+0x2d0>)
 8005ee0:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 8005ee2:	4b72      	ldr	r3, [pc, #456]	; (80060ac <eepromKontrol+0x284>)
 8005ee4:	7cda      	ldrb	r2, [r3, #19]
 8005ee6:	4b85      	ldr	r3, [pc, #532]	; (80060fc <eepromKontrol+0x2d4>)
 8005ee8:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 8005eea:	4b70      	ldr	r3, [pc, #448]	; (80060ac <eepromKontrol+0x284>)
 8005eec:	7d1a      	ldrb	r2, [r3, #20]
 8005eee:	4b84      	ldr	r3, [pc, #528]	; (8006100 <eepromKontrol+0x2d8>)
 8005ef0:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 8005ef2:	4b6e      	ldr	r3, [pc, #440]	; (80060ac <eepromKontrol+0x284>)
 8005ef4:	7d5a      	ldrb	r2, [r3, #21]
 8005ef6:	4b83      	ldr	r3, [pc, #524]	; (8006104 <eepromKontrol+0x2dc>)
 8005ef8:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8005efa:	4b6c      	ldr	r3, [pc, #432]	; (80060ac <eepromKontrol+0x284>)
 8005efc:	7d9a      	ldrb	r2, [r3, #22]
 8005efe:	4b82      	ldr	r3, [pc, #520]	; (8006108 <eepromKontrol+0x2e0>)
 8005f00:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 8005f02:	4b6a      	ldr	r3, [pc, #424]	; (80060ac <eepromKontrol+0x284>)
 8005f04:	7dda      	ldrb	r2, [r3, #23]
 8005f06:	4b81      	ldr	r3, [pc, #516]	; (800610c <eepromKontrol+0x2e4>)
 8005f08:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8005f0a:	4b68      	ldr	r3, [pc, #416]	; (80060ac <eepromKontrol+0x284>)
 8005f0c:	7e1a      	ldrb	r2, [r3, #24]
 8005f0e:	4b80      	ldr	r3, [pc, #512]	; (8006110 <eepromKontrol+0x2e8>)
 8005f10:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 8005f12:	4b66      	ldr	r3, [pc, #408]	; (80060ac <eepromKontrol+0x284>)
 8005f14:	7e5a      	ldrb	r2, [r3, #25]
 8005f16:	4b7f      	ldr	r3, [pc, #508]	; (8006114 <eepromKontrol+0x2ec>)
 8005f18:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8005f1a:	4b64      	ldr	r3, [pc, #400]	; (80060ac <eepromKontrol+0x284>)
 8005f1c:	7e9a      	ldrb	r2, [r3, #26]
 8005f1e:	4b7e      	ldr	r3, [pc, #504]	; (8006118 <eepromKontrol+0x2f0>)
 8005f20:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 8005f22:	4b62      	ldr	r3, [pc, #392]	; (80060ac <eepromKontrol+0x284>)
 8005f24:	7eda      	ldrb	r2, [r3, #27]
 8005f26:	4b7d      	ldr	r3, [pc, #500]	; (800611c <eepromKontrol+0x2f4>)
 8005f28:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8005f2a:	4b60      	ldr	r3, [pc, #384]	; (80060ac <eepromKontrol+0x284>)
 8005f2c:	7f1a      	ldrb	r2, [r3, #28]
 8005f2e:	4b7c      	ldr	r3, [pc, #496]	; (8006120 <eepromKontrol+0x2f8>)
 8005f30:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 8005f32:	4b5e      	ldr	r3, [pc, #376]	; (80060ac <eepromKontrol+0x284>)
 8005f34:	7f5a      	ldrb	r2, [r3, #29]
 8005f36:	4b7b      	ldr	r3, [pc, #492]	; (8006124 <eepromKontrol+0x2fc>)
 8005f38:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8005f3a:	4b5c      	ldr	r3, [pc, #368]	; (80060ac <eepromKontrol+0x284>)
 8005f3c:	7f9a      	ldrb	r2, [r3, #30]
 8005f3e:	4b7a      	ldr	r3, [pc, #488]	; (8006128 <eepromKontrol+0x300>)
 8005f40:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 8005f42:	4b5a      	ldr	r3, [pc, #360]	; (80060ac <eepromKontrol+0x284>)
 8005f44:	7fda      	ldrb	r2, [r3, #31]
 8005f46:	4b79      	ldr	r3, [pc, #484]	; (800612c <eepromKontrol+0x304>)
 8005f48:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8005f4a:	4b58      	ldr	r3, [pc, #352]	; (80060ac <eepromKontrol+0x284>)
 8005f4c:	f893 2020 	ldrb.w	r2, [r3, #32]
 8005f50:	4b77      	ldr	r3, [pc, #476]	; (8006130 <eepromKontrol+0x308>)
 8005f52:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 8005f54:	4b55      	ldr	r3, [pc, #340]	; (80060ac <eepromKontrol+0x284>)
 8005f56:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8005f5a:	4b76      	ldr	r3, [pc, #472]	; (8006134 <eepromKontrol+0x30c>)
 8005f5c:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[37];
 8005f5e:	4b53      	ldr	r3, [pc, #332]	; (80060ac <eepromKontrol+0x284>)
 8005f60:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8005f64:	4b74      	ldr	r3, [pc, #464]	; (8006138 <eepromKontrol+0x310>)
 8005f66:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8005f68:	4b50      	ldr	r3, [pc, #320]	; (80060ac <eepromKontrol+0x284>)
 8005f6a:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8005f6e:	4b73      	ldr	r3, [pc, #460]	; (800613c <eepromKontrol+0x314>)
 8005f70:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 8005f72:	4b4e      	ldr	r3, [pc, #312]	; (80060ac <eepromKontrol+0x284>)
 8005f74:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8005f78:	4b71      	ldr	r3, [pc, #452]	; (8006140 <eepromKontrol+0x318>)
 8005f7a:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8005f7c:	4b4b      	ldr	r3, [pc, #300]	; (80060ac <eepromKontrol+0x284>)
 8005f7e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8005f82:	4b70      	ldr	r3, [pc, #448]	; (8006144 <eepromKontrol+0x31c>)
 8005f84:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8005f86:	4b49      	ldr	r3, [pc, #292]	; (80060ac <eepromKontrol+0x284>)
 8005f88:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8005f8c:	4b6e      	ldr	r3, [pc, #440]	; (8006148 <eepromKontrol+0x320>)
 8005f8e:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 8005f90:	4b46      	ldr	r3, [pc, #280]	; (80060ac <eepromKontrol+0x284>)
 8005f92:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8005f96:	4b6d      	ldr	r3, [pc, #436]	; (800614c <eepromKontrol+0x324>)
 8005f98:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 8005f9a:	4b44      	ldr	r3, [pc, #272]	; (80060ac <eepromKontrol+0x284>)
 8005f9c:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8005fa0:	4b6b      	ldr	r3, [pc, #428]	; (8006150 <eepromKontrol+0x328>)
 8005fa2:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 8005fa4:	4b41      	ldr	r3, [pc, #260]	; (80060ac <eepromKontrol+0x284>)
 8005fa6:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8005faa:	4b6a      	ldr	r3, [pc, #424]	; (8006154 <eepromKontrol+0x32c>)
 8005fac:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 8005fae:	4b3f      	ldr	r3, [pc, #252]	; (80060ac <eepromKontrol+0x284>)
 8005fb0:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8005fb4:	4b68      	ldr	r3, [pc, #416]	; (8006158 <eepromKontrol+0x330>)
 8005fb6:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 8005fb8:	4b3c      	ldr	r3, [pc, #240]	; (80060ac <eepromKontrol+0x284>)
 8005fba:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8005fbe:	4b67      	ldr	r3, [pc, #412]	; (800615c <eepromKontrol+0x334>)
 8005fc0:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 8005fc2:	4b3a      	ldr	r3, [pc, #232]	; (80060ac <eepromKontrol+0x284>)
 8005fc4:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005fc8:	4b65      	ldr	r3, [pc, #404]	; (8006160 <eepromKontrol+0x338>)
 8005fca:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 8005fcc:	4b37      	ldr	r3, [pc, #220]	; (80060ac <eepromKontrol+0x284>)
 8005fce:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8005fd2:	4b64      	ldr	r3, [pc, #400]	; (8006164 <eepromKontrol+0x33c>)
 8005fd4:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 8005fd6:	4b35      	ldr	r3, [pc, #212]	; (80060ac <eepromKontrol+0x284>)
 8005fd8:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8005fdc:	4b62      	ldr	r3, [pc, #392]	; (8006168 <eepromKontrol+0x340>)
 8005fde:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 8005fe0:	4b32      	ldr	r3, [pc, #200]	; (80060ac <eepromKontrol+0x284>)
 8005fe2:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8005fe6:	4b61      	ldr	r3, [pc, #388]	; (800616c <eepromKontrol+0x344>)
 8005fe8:	701a      	strb	r2, [r3, #0]

	loadMenuTexts(dilSecim);
 8005fea:	4b52      	ldr	r3, [pc, #328]	; (8006134 <eepromKontrol+0x30c>)
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	4618      	mov	r0, r3
 8005ff0:	f7fe fff4 	bl	8004fdc <loadMenuTexts>

	if(calismaSayisi10000>9) {
 8005ff4:	4b4e      	ldr	r3, [pc, #312]	; (8006130 <eepromKontrol+0x308>)
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	2b09      	cmp	r3, #9
 8005ffa:	d902      	bls.n	8006002 <eepromKontrol+0x1da>
	    calismaSayisi10000=0;
 8005ffc:	4b4c      	ldr	r3, [pc, #304]	; (8006130 <eepromKontrol+0x308>)
 8005ffe:	2200      	movs	r2, #0
 8006000:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 8006002:	4b4a      	ldr	r3, [pc, #296]	; (800612c <eepromKontrol+0x304>)
 8006004:	781b      	ldrb	r3, [r3, #0]
 8006006:	2b09      	cmp	r3, #9
 8006008:	d902      	bls.n	8006010 <eepromKontrol+0x1e8>
	    calismaSayisi1000=0;
 800600a:	4b48      	ldr	r3, [pc, #288]	; (800612c <eepromKontrol+0x304>)
 800600c:	2200      	movs	r2, #0
 800600e:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 8006010:	4b45      	ldr	r3, [pc, #276]	; (8006128 <eepromKontrol+0x300>)
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	2b09      	cmp	r3, #9
 8006016:	d902      	bls.n	800601e <eepromKontrol+0x1f6>
	    calismaSayisi100=0;
 8006018:	4b43      	ldr	r3, [pc, #268]	; (8006128 <eepromKontrol+0x300>)
 800601a:	2200      	movs	r2, #0
 800601c:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 800601e:	4b41      	ldr	r3, [pc, #260]	; (8006124 <eepromKontrol+0x2fc>)
 8006020:	781b      	ldrb	r3, [r3, #0]
 8006022:	2b09      	cmp	r3, #9
 8006024:	d902      	bls.n	800602c <eepromKontrol+0x204>
	    calismaSayisi10=0;
 8006026:	4b3f      	ldr	r3, [pc, #252]	; (8006124 <eepromKontrol+0x2fc>)
 8006028:	2200      	movs	r2, #0
 800602a:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 800602c:	4b3c      	ldr	r3, [pc, #240]	; (8006120 <eepromKontrol+0x2f8>)
 800602e:	781b      	ldrb	r3, [r3, #0]
 8006030:	2b09      	cmp	r3, #9
 8006032:	d902      	bls.n	800603a <eepromKontrol+0x212>
	    calismaSayisi1=0;
 8006034:	4b3a      	ldr	r3, [pc, #232]	; (8006120 <eepromKontrol+0x2f8>)
 8006036:	2200      	movs	r2, #0
 8006038:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 800603a:	4b1f      	ldr	r3, [pc, #124]	; (80060b8 <eepromKontrol+0x290>)
 800603c:	781b      	ldrb	r3, [r3, #0]
 800603e:	2b01      	cmp	r3, #1
 8006040:	d902      	bls.n	8006048 <eepromKontrol+0x220>
	    calismaSekli=0;
 8006042:	4b1d      	ldr	r3, [pc, #116]	; (80060b8 <eepromKontrol+0x290>)
 8006044:	2200      	movs	r2, #0
 8006046:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8006048:	4b1c      	ldr	r3, [pc, #112]	; (80060bc <eepromKontrol+0x294>)
 800604a:	781b      	ldrb	r3, [r3, #0]
 800604c:	2b01      	cmp	r3, #1
 800604e:	d902      	bls.n	8006056 <eepromKontrol+0x22e>
	    emniyetCercevesi=1;
 8006050:	4b1a      	ldr	r3, [pc, #104]	; (80060bc <eepromKontrol+0x294>)
 8006052:	2201      	movs	r2, #1
 8006054:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8006056:	4b1a      	ldr	r3, [pc, #104]	; (80060c0 <eepromKontrol+0x298>)
 8006058:	781b      	ldrb	r3, [r3, #0]
 800605a:	2b01      	cmp	r3, #1
 800605c:	d902      	bls.n	8006064 <eepromKontrol+0x23c>
	    yavaslamaLimit=0;
 800605e:	4b18      	ldr	r3, [pc, #96]	; (80060c0 <eepromKontrol+0x298>)
 8006060:	2200      	movs	r2, #0
 8006062:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 8006064:	4b17      	ldr	r3, [pc, #92]	; (80060c4 <eepromKontrol+0x29c>)
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	2b01      	cmp	r3, #1
 800606a:	d902      	bls.n	8006072 <eepromKontrol+0x24a>
	    altLimit=1;
 800606c:	4b15      	ldr	r3, [pc, #84]	; (80060c4 <eepromKontrol+0x29c>)
 800606e:	2201      	movs	r2, #1
 8006070:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 8006072:	4b15      	ldr	r3, [pc, #84]	; (80060c8 <eepromKontrol+0x2a0>)
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	2b01      	cmp	r3, #1
 8006078:	d902      	bls.n	8006080 <eepromKontrol+0x258>
	    basincSalteri=1;
 800607a:	4b13      	ldr	r3, [pc, #76]	; (80060c8 <eepromKontrol+0x2a0>)
 800607c:	2201      	movs	r2, #1
 800607e:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 8006080:	4b12      	ldr	r3, [pc, #72]	; (80060cc <eepromKontrol+0x2a4>)
 8006082:	781b      	ldrb	r3, [r3, #0]
 8006084:	2b03      	cmp	r3, #3
 8006086:	d902      	bls.n	800608e <eepromKontrol+0x266>
	    kapiSecimleri=3;
 8006088:	4b10      	ldr	r3, [pc, #64]	; (80060cc <eepromKontrol+0x2a4>)
 800608a:	2203      	movs	r2, #3
 800608c:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 800608e:	4b2d      	ldr	r3, [pc, #180]	; (8006144 <eepromKontrol+0x31c>)
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	2b01      	cmp	r3, #1
 8006094:	d902      	bls.n	800609c <eepromKontrol+0x274>
	    kapiAcTipi=0;
 8006096:	4b2b      	ldr	r3, [pc, #172]	; (8006144 <eepromKontrol+0x31c>)
 8006098:	2200      	movs	r2, #0
 800609a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 800609c:	4b0c      	ldr	r3, [pc, #48]	; (80060d0 <eepromKontrol+0x2a8>)
 800609e:	781b      	ldrb	r3, [r3, #0]
 80060a0:	2b02      	cmp	r3, #2
 80060a2:	d965      	bls.n	8006170 <eepromKontrol+0x348>
	    kapi1Tip=1;
 80060a4:	4b0a      	ldr	r3, [pc, #40]	; (80060d0 <eepromKontrol+0x2a8>)
 80060a6:	2201      	movs	r2, #1
 80060a8:	701a      	strb	r2, [r3, #0]
 80060aa:	e061      	b.n	8006170 <eepromKontrol+0x348>
 80060ac:	20000b38 	.word	0x20000b38
 80060b0:	20000e5c 	.word	0x20000e5c
 80060b4:	20000bc9 	.word	0x20000bc9
 80060b8:	20000c9e 	.word	0x20000c9e
 80060bc:	20000ca1 	.word	0x20000ca1
 80060c0:	20000ca2 	.word	0x20000ca2
 80060c4:	20000ca3 	.word	0x20000ca3
 80060c8:	20000ca4 	.word	0x20000ca4
 80060cc:	20000ca5 	.word	0x20000ca5
 80060d0:	20000ca6 	.word	0x20000ca6
 80060d4:	20000cb6 	.word	0x20000cb6
 80060d8:	20000ca7 	.word	0x20000ca7
 80060dc:	20000cb7 	.word	0x20000cb7
 80060e0:	20000ca8 	.word	0x20000ca8
 80060e4:	20000cb8 	.word	0x20000cb8
 80060e8:	20000cab 	.word	0x20000cab
 80060ec:	20000cac 	.word	0x20000cac
 80060f0:	20000cad 	.word	0x20000cad
 80060f4:	20000cae 	.word	0x20000cae
 80060f8:	20000caf 	.word	0x20000caf
 80060fc:	20000cb0 	.word	0x20000cb0
 8006100:	20000cb1 	.word	0x20000cb1
 8006104:	20000cb2 	.word	0x20000cb2
 8006108:	20000cb3 	.word	0x20000cb3
 800610c:	20000cb4 	.word	0x20000cb4
 8006110:	20000cb5 	.word	0x20000cb5
 8006114:	20000cb9 	.word	0x20000cb9
 8006118:	20000cbb 	.word	0x20000cbb
 800611c:	20000c99 	.word	0x20000c99
 8006120:	20000c9a 	.word	0x20000c9a
 8006124:	20000c9b 	.word	0x20000c9b
 8006128:	200009c2 	.word	0x200009c2
 800612c:	200009c3 	.word	0x200009c3
 8006130:	20000c9c 	.word	0x20000c9c
 8006134:	20000cbe 	.word	0x20000cbe
 8006138:	20000cbc 	.word	0x20000cbc
 800613c:	20000caa 	.word	0x20000caa
 8006140:	20000cbd 	.word	0x20000cbd
 8006144:	20000ca9 	.word	0x20000ca9
 8006148:	20000cbf 	.word	0x20000cbf
 800614c:	20000cc0 	.word	0x20000cc0
 8006150:	20000cc1 	.word	0x20000cc1
 8006154:	20000cc2 	.word	0x20000cc2
 8006158:	20000cc3 	.word	0x20000cc3
 800615c:	20000cc4 	.word	0x20000cc4
 8006160:	20000cc5 	.word	0x20000cc5
 8006164:	20000cc6 	.word	0x20000cc6
 8006168:	20000cc7 	.word	0x20000cc7
 800616c:	20000cc8 	.word	0x20000cc8
	}

	if(kapi1AcSure>5) {
 8006170:	4b55      	ldr	r3, [pc, #340]	; (80062c8 <eepromKontrol+0x4a0>)
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	2b05      	cmp	r3, #5
 8006176:	d902      	bls.n	800617e <eepromKontrol+0x356>
	    kapi1AcSure=5;
 8006178:	4b53      	ldr	r3, [pc, #332]	; (80062c8 <eepromKontrol+0x4a0>)
 800617a:	2205      	movs	r2, #5
 800617c:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 800617e:	4b53      	ldr	r3, [pc, #332]	; (80062cc <eepromKontrol+0x4a4>)
 8006180:	781b      	ldrb	r3, [r3, #0]
 8006182:	2b02      	cmp	r3, #2
 8006184:	d902      	bls.n	800618c <eepromKontrol+0x364>
	    kapi2Tip=1;
 8006186:	4b51      	ldr	r3, [pc, #324]	; (80062cc <eepromKontrol+0x4a4>)
 8006188:	2201      	movs	r2, #1
 800618a:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 800618c:	4b50      	ldr	r3, [pc, #320]	; (80062d0 <eepromKontrol+0x4a8>)
 800618e:	781b      	ldrb	r3, [r3, #0]
 8006190:	2b05      	cmp	r3, #5
 8006192:	d902      	bls.n	800619a <eepromKontrol+0x372>
	    kapi2AcSure=5;
 8006194:	4b4e      	ldr	r3, [pc, #312]	; (80062d0 <eepromKontrol+0x4a8>)
 8006196:	2205      	movs	r2, #5
 8006198:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 800619a:	4b4e      	ldr	r3, [pc, #312]	; (80062d4 <eepromKontrol+0x4ac>)
 800619c:	781b      	ldrb	r3, [r3, #0]
 800619e:	2b02      	cmp	r3, #2
 80061a0:	d902      	bls.n	80061a8 <eepromKontrol+0x380>
	    kapitablaTip=1;
 80061a2:	4b4c      	ldr	r3, [pc, #304]	; (80062d4 <eepromKontrol+0x4ac>)
 80061a4:	2201      	movs	r2, #1
 80061a6:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 80061a8:	4b4b      	ldr	r3, [pc, #300]	; (80062d8 <eepromKontrol+0x4b0>)
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	2b02      	cmp	r3, #2
 80061ae:	d902      	bls.n	80061b6 <eepromKontrol+0x38e>
	    kapiTablaAcKonum=2;
 80061b0:	4b49      	ldr	r3, [pc, #292]	; (80062d8 <eepromKontrol+0x4b0>)
 80061b2:	2202      	movs	r2, #2
 80061b4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 80061b6:	4b49      	ldr	r3, [pc, #292]	; (80062dc <eepromKontrol+0x4b4>)
 80061b8:	781b      	ldrb	r3, [r3, #0]
 80061ba:	2b05      	cmp	r3, #5
 80061bc:	d902      	bls.n	80061c4 <eepromKontrol+0x39c>
	    kapiTablaAcSure=5;
 80061be:	4b47      	ldr	r3, [pc, #284]	; (80062dc <eepromKontrol+0x4b4>)
 80061c0:	2205      	movs	r2, #5
 80061c2:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 80061c4:	4b46      	ldr	r3, [pc, #280]	; (80062e0 <eepromKontrol+0x4b8>)
 80061c6:	781b      	ldrb	r3, [r3, #0]
 80061c8:	2b01      	cmp	r3, #1
 80061ca:	d902      	bls.n	80061d2 <eepromKontrol+0x3aa>
	    yukariYavasLimit=0;
 80061cc:	4b44      	ldr	r3, [pc, #272]	; (80062e0 <eepromKontrol+0x4b8>)
 80061ce:	2200      	movs	r2, #0
 80061d0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 80061d2:	4b44      	ldr	r3, [pc, #272]	; (80062e4 <eepromKontrol+0x4bc>)
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	2b02      	cmp	r3, #2
 80061d8:	d902      	bls.n	80061e0 <eepromKontrol+0x3b8>
	    devirmeYuruyusSecim=0;
 80061da:	4b42      	ldr	r3, [pc, #264]	; (80062e4 <eepromKontrol+0x4bc>)
 80061dc:	2200      	movs	r2, #0
 80061de:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 80061e0:	4b41      	ldr	r3, [pc, #260]	; (80062e8 <eepromKontrol+0x4c0>)
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d902      	bls.n	80061ee <eepromKontrol+0x3c6>
	    devirmeYukariIleriLimit=1;
 80061e8:	4b3f      	ldr	r3, [pc, #252]	; (80062e8 <eepromKontrol+0x4c0>)
 80061ea:	2201      	movs	r2, #1
 80061ec:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 80061ee:	4b3f      	ldr	r3, [pc, #252]	; (80062ec <eepromKontrol+0x4c4>)
 80061f0:	781b      	ldrb	r3, [r3, #0]
 80061f2:	2b01      	cmp	r3, #1
 80061f4:	d902      	bls.n	80061fc <eepromKontrol+0x3d4>
	    devirmeAsagiGeriLimit=1;
 80061f6:	4b3d      	ldr	r3, [pc, #244]	; (80062ec <eepromKontrol+0x4c4>)
 80061f8:	2201      	movs	r2, #1
 80061fa:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 80061fc:	4b3c      	ldr	r3, [pc, #240]	; (80062f0 <eepromKontrol+0x4c8>)
 80061fe:	781b      	ldrb	r3, [r3, #0]
 8006200:	2b01      	cmp	r3, #1
 8006202:	d902      	bls.n	800620a <eepromKontrol+0x3e2>
	    devirmeSilindirTipi=0;
 8006204:	4b3a      	ldr	r3, [pc, #232]	; (80062f0 <eepromKontrol+0x4c8>)
 8006206:	2200      	movs	r2, #0
 8006208:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 800620a:	4b3a      	ldr	r3, [pc, #232]	; (80062f4 <eepromKontrol+0x4cc>)
 800620c:	781b      	ldrb	r3, [r3, #0]
 800620e:	2b01      	cmp	r3, #1
 8006210:	d902      	bls.n	8006218 <eepromKontrol+0x3f0>
	    platformSilindirTipi=0;
 8006212:	4b38      	ldr	r3, [pc, #224]	; (80062f4 <eepromKontrol+0x4cc>)
 8006214:	2200      	movs	r2, #0
 8006216:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8006218:	4b37      	ldr	r3, [pc, #220]	; (80062f8 <eepromKontrol+0x4d0>)
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	2b05      	cmp	r3, #5
 800621e:	d902      	bls.n	8006226 <eepromKontrol+0x3fe>
	    yukariValfTmr=0;
 8006220:	4b35      	ldr	r3, [pc, #212]	; (80062f8 <eepromKontrol+0x4d0>)
 8006222:	2200      	movs	r2, #0
 8006224:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8006226:	4b35      	ldr	r3, [pc, #212]	; (80062fc <eepromKontrol+0x4d4>)
 8006228:	781b      	ldrb	r3, [r3, #0]
 800622a:	2b05      	cmp	r3, #5
 800622c:	d902      	bls.n	8006234 <eepromKontrol+0x40c>
	    asagiValfTmr=0;
 800622e:	4b33      	ldr	r3, [pc, #204]	; (80062fc <eepromKontrol+0x4d4>)
 8006230:	2200      	movs	r2, #0
 8006232:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8006234:	4b32      	ldr	r3, [pc, #200]	; (8006300 <eepromKontrol+0x4d8>)
 8006236:	781b      	ldrb	r3, [r3, #0]
 8006238:	2b05      	cmp	r3, #5
 800623a:	d902      	bls.n	8006242 <eepromKontrol+0x41a>
	    devirmeYukariIleriTmr=0;
 800623c:	4b30      	ldr	r3, [pc, #192]	; (8006300 <eepromKontrol+0x4d8>)
 800623e:	2200      	movs	r2, #0
 8006240:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8006242:	4b30      	ldr	r3, [pc, #192]	; (8006304 <eepromKontrol+0x4dc>)
 8006244:	781b      	ldrb	r3, [r3, #0]
 8006246:	2b05      	cmp	r3, #5
 8006248:	d902      	bls.n	8006250 <eepromKontrol+0x428>
	    devirmeAsagiGeriTmr=0;
 800624a:	4b2e      	ldr	r3, [pc, #184]	; (8006304 <eepromKontrol+0x4dc>)
 800624c:	2200      	movs	r2, #0
 800624e:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8006250:	4b2d      	ldr	r3, [pc, #180]	; (8006308 <eepromKontrol+0x4e0>)
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	2bb4      	cmp	r3, #180	; 0xb4
 8006256:	d902      	bls.n	800625e <eepromKontrol+0x436>
	    makineCalismaTmr=60;
 8006258:	4b2b      	ldr	r3, [pc, #172]	; (8006308 <eepromKontrol+0x4e0>)
 800625a:	223c      	movs	r2, #60	; 0x3c
 800625c:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 800625e:	4b2b      	ldr	r3, [pc, #172]	; (800630c <eepromKontrol+0x4e4>)
 8006260:	781b      	ldrb	r3, [r3, #0]
 8006262:	2b01      	cmp	r3, #1
 8006264:	d902      	bls.n	800626c <eepromKontrol+0x444>
	    buzzer=0;
 8006266:	4b29      	ldr	r3, [pc, #164]	; (800630c <eepromKontrol+0x4e4>)
 8006268:	2200      	movs	r2, #0
 800626a:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 800626c:	4b28      	ldr	r3, [pc, #160]	; (8006310 <eepromKontrol+0x4e8>)
 800626e:	781b      	ldrb	r3, [r3, #0]
 8006270:	2b01      	cmp	r3, #1
 8006272:	d902      	bls.n	800627a <eepromKontrol+0x452>
	    demoMode=0;
 8006274:	4b26      	ldr	r3, [pc, #152]	; (8006310 <eepromKontrol+0x4e8>)
 8006276:	2200      	movs	r2, #0
 8006278:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 800627a:	4b26      	ldr	r3, [pc, #152]	; (8006314 <eepromKontrol+0x4ec>)
 800627c:	781b      	ldrb	r3, [r3, #0]
 800627e:	2b01      	cmp	r3, #1
 8006280:	d902      	bls.n	8006288 <eepromKontrol+0x460>
	    calismaSayModu=0;
 8006282:	4b24      	ldr	r3, [pc, #144]	; (8006314 <eepromKontrol+0x4ec>)
 8006284:	2200      	movs	r2, #0
 8006286:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8006288:	4b23      	ldr	r3, [pc, #140]	; (8006318 <eepromKontrol+0x4f0>)
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	2b01      	cmp	r3, #1
 800628e:	d902      	bls.n	8006296 <eepromKontrol+0x46e>
	    dilSecim=0;
 8006290:	4b21      	ldr	r3, [pc, #132]	; (8006318 <eepromKontrol+0x4f0>)
 8006292:	2200      	movs	r2, #0
 8006294:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 8006296:	4b21      	ldr	r3, [pc, #132]	; (800631c <eepromKontrol+0x4f4>)
 8006298:	781b      	ldrb	r3, [r3, #0]
 800629a:	2b01      	cmp	r3, #1
 800629c:	d902      	bls.n	80062a4 <eepromKontrol+0x47c>
		iotMode=0;
 800629e:	4b1f      	ldr	r3, [pc, #124]	; (800631c <eepromKontrol+0x4f4>)
 80062a0:	2200      	movs	r2, #0
 80062a2:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(1000);
 80062a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80062a8:	f003 f8ea 	bl	8009480 <HAL_Delay>

	if(iotMode == 1 && type == 1) {
 80062ac:	4b1b      	ldr	r3, [pc, #108]	; (800631c <eepromKontrol+0x4f4>)
 80062ae:	781b      	ldrb	r3, [r3, #0]
 80062b0:	2b01      	cmp	r3, #1
 80062b2:	d104      	bne.n	80062be <eepromKontrol+0x496>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2b01      	cmp	r3, #1
 80062b8:	d101      	bne.n	80062be <eepromKontrol+0x496>
		convertAndSendData();
 80062ba:	f7ff fd81 	bl	8005dc0 <convertAndSendData>
	}
}
 80062be:	bf00      	nop
 80062c0:	3708      	adds	r7, #8
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	bf00      	nop
 80062c8:	20000cb6 	.word	0x20000cb6
 80062cc:	20000ca7 	.word	0x20000ca7
 80062d0:	20000cb7 	.word	0x20000cb7
 80062d4:	20000ca8 	.word	0x20000ca8
 80062d8:	20000caa 	.word	0x20000caa
 80062dc:	20000cb8 	.word	0x20000cb8
 80062e0:	20000cab 	.word	0x20000cab
 80062e4:	20000cac 	.word	0x20000cac
 80062e8:	20000cad 	.word	0x20000cad
 80062ec:	20000cae 	.word	0x20000cae
 80062f0:	20000caf 	.word	0x20000caf
 80062f4:	20000cb0 	.word	0x20000cb0
 80062f8:	20000cb1 	.word	0x20000cb1
 80062fc:	20000cb2 	.word	0x20000cb2
 8006300:	20000cb3 	.word	0x20000cb3
 8006304:	20000cb4 	.word	0x20000cb4
 8006308:	20000cb5 	.word	0x20000cb5
 800630c:	20000cb9 	.word	0x20000cb9
 8006310:	20000cbb 	.word	0x20000cbb
 8006314:	20000cbd 	.word	0x20000cbd
 8006318:	20000cbe 	.word	0x20000cbe
 800631c:	20000cbc 	.word	0x20000cbc

08006320 <eepromKontrol4IoT>:

void eepromKontrol4IoT() {
 8006320:	b580      	push	{r7, lr}
 8006322:	af00      	add	r7, sp, #0
	takeCharFromEEPROM4ID(&hi2c1);
 8006324:	480e      	ldr	r0, [pc, #56]	; (8006360 <eepromKontrol4IoT+0x40>)
 8006326:	f7fb fa59 	bl	80017dc <takeCharFromEEPROM4ID>
	HAL_Delay(500);
 800632a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800632e:	f003 f8a7 	bl	8009480 <HAL_Delay>
	if(iotMode == 1) {
 8006332:	4b0c      	ldr	r3, [pc, #48]	; (8006364 <eepromKontrol4IoT+0x44>)
 8006334:	781b      	ldrb	r3, [r3, #0]
 8006336:	2b01      	cmp	r3, #1
 8006338:	d10f      	bne.n	800635a <eepromKontrol4IoT+0x3a>
		takeCharFromEEPROM4Wifi(&hi2c1, 1);
 800633a:	2101      	movs	r1, #1
 800633c:	4808      	ldr	r0, [pc, #32]	; (8006360 <eepromKontrol4IoT+0x40>)
 800633e:	f7fb fa71 	bl	8001824 <takeCharFromEEPROM4Wifi>
		HAL_Delay(500);
 8006342:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006346:	f003 f89b 	bl	8009480 <HAL_Delay>
		takeCharFromEEPROM4Wifi(&hi2c1, 2);
 800634a:	2102      	movs	r1, #2
 800634c:	4804      	ldr	r0, [pc, #16]	; (8006360 <eepromKontrol4IoT+0x40>)
 800634e:	f7fb fa69 	bl	8001824 <takeCharFromEEPROM4Wifi>
		HAL_Delay(500);
 8006352:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006356:	f003 f893 	bl	8009480 <HAL_Delay>
	}
}
 800635a:	bf00      	nop
 800635c:	bd80      	pop	{r7, pc}
 800635e:	bf00      	nop
 8006360:	20000e5c 	.word	0x20000e5c
 8006364:	20000cbc 	.word	0x20000cbc

08006368 <hata2EEPROM>:

void hata2EEPROM(uint8_t hataKodu) {
 8006368:	b590      	push	{r4, r7, lr}
 800636a:	b089      	sub	sp, #36	; 0x24
 800636c:	af04      	add	r7, sp, #16
 800636e:	4603      	mov	r3, r0
 8006370:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8006372:	4b26      	ldr	r3, [pc, #152]	; (800640c <hata2EEPROM+0xa4>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	1e5a      	subs	r2, r3, #1
 8006378:	4b25      	ldr	r3, [pc, #148]	; (8006410 <hata2EEPROM+0xa8>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4413      	add	r3, r2
 800637e:	4a25      	ldr	r2, [pc, #148]	; (8006414 <hata2EEPROM+0xac>)
 8006380:	5cd3      	ldrb	r3, [r2, r3]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d002      	beq.n	800638c <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8006386:	f000 f849 	bl	800641c <eepromDataFillWithEmpty>
		goto veriEkleme;
 800638a:	e000      	b.n	800638e <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 800638c:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 800638e:	2300      	movs	r3, #0
 8006390:	60fb      	str	r3, [r7, #12]
 8006392:	e012      	b.n	80063ba <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8006394:	4b1e      	ldr	r3, [pc, #120]	; (8006410 <hata2EEPROM+0xa8>)
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	4413      	add	r3, r2
 800639c:	4a1d      	ldr	r2, [pc, #116]	; (8006414 <hata2EEPROM+0xac>)
 800639e:	5cd3      	ldrb	r3, [r2, r3]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d107      	bne.n	80063b4 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 80063a4:	4b1a      	ldr	r3, [pc, #104]	; (8006410 <hata2EEPROM+0xa8>)
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	4413      	add	r3, r2
 80063ac:	4919      	ldr	r1, [pc, #100]	; (8006414 <hata2EEPROM+0xac>)
 80063ae:	79fa      	ldrb	r2, [r7, #7]
 80063b0:	54ca      	strb	r2, [r1, r3]
					break;
 80063b2:	e007      	b.n	80063c4 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	3301      	adds	r3, #1
 80063b8:	60fb      	str	r3, [r7, #12]
 80063ba:	4b14      	ldr	r3, [pc, #80]	; (800640c <hata2EEPROM+0xa4>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	68fa      	ldr	r2, [r7, #12]
 80063c0:	429a      	cmp	r2, r3
 80063c2:	dbe7      	blt.n	8006394 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1,0xA0,eepromHataBaslangic,indeksSayisi,&eepromData[eepromHataBaslangic],indeksSayisi,3000);
 80063c4:	4b12      	ldr	r3, [pc, #72]	; (8006410 <hata2EEPROM+0xa8>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	b299      	uxth	r1, r3
 80063ca:	4b10      	ldr	r3, [pc, #64]	; (800640c <hata2EEPROM+0xa4>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	b298      	uxth	r0, r3
 80063d0:	4b0f      	ldr	r3, [pc, #60]	; (8006410 <hata2EEPROM+0xa8>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a0f      	ldr	r2, [pc, #60]	; (8006414 <hata2EEPROM+0xac>)
 80063d6:	4413      	add	r3, r2
 80063d8:	4a0c      	ldr	r2, [pc, #48]	; (800640c <hata2EEPROM+0xa4>)
 80063da:	6812      	ldr	r2, [r2, #0]
 80063dc:	b292      	uxth	r2, r2
 80063de:	f640 34b8 	movw	r4, #3000	; 0xbb8
 80063e2:	9402      	str	r4, [sp, #8]
 80063e4:	9201      	str	r2, [sp, #4]
 80063e6:	9300      	str	r3, [sp, #0]
 80063e8:	4603      	mov	r3, r0
 80063ea:	460a      	mov	r2, r1
 80063ec:	21a0      	movs	r1, #160	; 0xa0
 80063ee:	480a      	ldr	r0, [pc, #40]	; (8006418 <hata2EEPROM+0xb0>)
 80063f0:	f004 f8d0 	bl	800a594 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 80063f4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80063f8:	f003 f842 	bl	8009480 <HAL_Delay>
	eepromKontrol(1);
 80063fc:	2001      	movs	r0, #1
 80063fe:	f7ff fd13 	bl	8005e28 <eepromKontrol>
}
 8006402:	bf00      	nop
 8006404:	3714      	adds	r7, #20
 8006406:	46bd      	mov	sp, r7
 8006408:	bd90      	pop	{r4, r7, pc}
 800640a:	bf00      	nop
 800640c:	20000938 	.word	0x20000938
 8006410:	2000093c 	.word	0x2000093c
 8006414:	20000b38 	.word	0x20000b38
 8006418:	20000e5c 	.word	0x20000e5c

0800641c <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 800641c:	b480      	push	{r7}
 800641e:	b083      	sub	sp, #12
 8006420:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8006422:	2300      	movs	r3, #0
 8006424:	607b      	str	r3, [r7, #4]
 8006426:	e009      	b.n	800643c <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8006428:	4a0a      	ldr	r2, [pc, #40]	; (8006454 <eepromDataFillWithEmpty+0x38>)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006430:	4a09      	ldr	r2, [pc, #36]	; (8006458 <eepromDataFillWithEmpty+0x3c>)
 8006432:	2100      	movs	r1, #0
 8006434:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	3301      	adds	r3, #1
 800643a:	607b      	str	r3, [r7, #4]
 800643c:	4b07      	ldr	r3, [pc, #28]	; (800645c <eepromDataFillWithEmpty+0x40>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	687a      	ldr	r2, [r7, #4]
 8006442:	429a      	cmp	r2, r3
 8006444:	dbf0      	blt.n	8006428 <eepromDataFillWithEmpty+0xc>
	}
}
 8006446:	bf00      	nop
 8006448:	bf00      	nop
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	bc80      	pop	{r7}
 8006450:	4770      	bx	lr
 8006452:	bf00      	nop
 8006454:	20000910 	.word	0x20000910
 8006458:	20000b38 	.word	0x20000b38
 800645c:	20000938 	.word	0x20000938

08006460 <bekle>:
		return 1;
	}
	return 0;
}

void bekle() {
 8006460:	b580      	push	{r7, lr}
 8006462:	af00      	add	r7, sp, #0
	timer1=millis;
 8006464:	4b47      	ldr	r3, [pc, #284]	; (8006584 <bekle+0x124>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a47      	ldr	r2, [pc, #284]	; (8006588 <bekle+0x128>)
 800646a:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800646c:	e002      	b.n	8006474 <bekle+0x14>
    	butonKontrol = 1;
 800646e:	4b47      	ldr	r3, [pc, #284]	; (800658c <bekle+0x12c>)
 8006470:	2201      	movs	r2, #1
 8006472:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006474:	2101      	movs	r1, #1
 8006476:	4846      	ldr	r0, [pc, #280]	; (8006590 <bekle+0x130>)
 8006478:	f003 fdd2 	bl	800a020 <HAL_GPIO_ReadPin>
 800647c:	4603      	mov	r3, r0
 800647e:	2b01      	cmp	r3, #1
 8006480:	d109      	bne.n	8006496 <bekle+0x36>
 8006482:	4b40      	ldr	r3, [pc, #256]	; (8006584 <bekle+0x124>)
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	4b40      	ldr	r3, [pc, #256]	; (8006588 <bekle+0x128>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	429a      	cmp	r2, r3
 800648c:	d0ef      	beq.n	800646e <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800648e:	e002      	b.n	8006496 <bekle+0x36>
    	butonKontrol = 1;
 8006490:	4b3e      	ldr	r3, [pc, #248]	; (800658c <bekle+0x12c>)
 8006492:	2201      	movs	r2, #1
 8006494:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006496:	2108      	movs	r1, #8
 8006498:	483e      	ldr	r0, [pc, #248]	; (8006594 <bekle+0x134>)
 800649a:	f003 fdc1 	bl	800a020 <HAL_GPIO_ReadPin>
 800649e:	4603      	mov	r3, r0
 80064a0:	2b01      	cmp	r3, #1
 80064a2:	d109      	bne.n	80064b8 <bekle+0x58>
 80064a4:	4b37      	ldr	r3, [pc, #220]	; (8006584 <bekle+0x124>)
 80064a6:	681a      	ldr	r2, [r3, #0]
 80064a8:	4b37      	ldr	r3, [pc, #220]	; (8006588 <bekle+0x128>)
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d0ef      	beq.n	8006490 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80064b0:	e002      	b.n	80064b8 <bekle+0x58>
    	butonKontrol = 1;
 80064b2:	4b36      	ldr	r3, [pc, #216]	; (800658c <bekle+0x12c>)
 80064b4:	2201      	movs	r2, #1
 80064b6:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80064b8:	2102      	movs	r1, #2
 80064ba:	4835      	ldr	r0, [pc, #212]	; (8006590 <bekle+0x130>)
 80064bc:	f003 fdb0 	bl	800a020 <HAL_GPIO_ReadPin>
 80064c0:	4603      	mov	r3, r0
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d109      	bne.n	80064da <bekle+0x7a>
 80064c6:	4b2f      	ldr	r3, [pc, #188]	; (8006584 <bekle+0x124>)
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	4b2f      	ldr	r3, [pc, #188]	; (8006588 <bekle+0x128>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d0ef      	beq.n	80064b2 <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80064d2:	e002      	b.n	80064da <bekle+0x7a>
    	butonKontrol = 1;
 80064d4:	4b2d      	ldr	r3, [pc, #180]	; (800658c <bekle+0x12c>)
 80064d6:	2201      	movs	r2, #1
 80064d8:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80064da:	2104      	movs	r1, #4
 80064dc:	482c      	ldr	r0, [pc, #176]	; (8006590 <bekle+0x130>)
 80064de:	f003 fd9f 	bl	800a020 <HAL_GPIO_ReadPin>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b01      	cmp	r3, #1
 80064e6:	d109      	bne.n	80064fc <bekle+0x9c>
 80064e8:	4b26      	ldr	r3, [pc, #152]	; (8006584 <bekle+0x124>)
 80064ea:	681a      	ldr	r2, [r3, #0]
 80064ec:	4b26      	ldr	r3, [pc, #152]	; (8006588 <bekle+0x128>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d0ef      	beq.n	80064d4 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80064f4:	e002      	b.n	80064fc <bekle+0x9c>
    	butonKontrol = 1;
 80064f6:	4b25      	ldr	r3, [pc, #148]	; (800658c <bekle+0x12c>)
 80064f8:	2201      	movs	r2, #1
 80064fa:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 80064fc:	2108      	movs	r1, #8
 80064fe:	4824      	ldr	r0, [pc, #144]	; (8006590 <bekle+0x130>)
 8006500:	f003 fd8e 	bl	800a020 <HAL_GPIO_ReadPin>
 8006504:	4603      	mov	r3, r0
 8006506:	2b01      	cmp	r3, #1
 8006508:	d109      	bne.n	800651e <bekle+0xbe>
 800650a:	4b1e      	ldr	r3, [pc, #120]	; (8006584 <bekle+0x124>)
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	4b1e      	ldr	r3, [pc, #120]	; (8006588 <bekle+0x128>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	429a      	cmp	r2, r3
 8006514:	d0ef      	beq.n	80064f6 <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8006516:	e002      	b.n	800651e <bekle+0xbe>
    	butonKontrol = 1;
 8006518:	4b1c      	ldr	r3, [pc, #112]	; (800658c <bekle+0x12c>)
 800651a:	2201      	movs	r2, #1
 800651c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 800651e:	2180      	movs	r1, #128	; 0x80
 8006520:	481c      	ldr	r0, [pc, #112]	; (8006594 <bekle+0x134>)
 8006522:	f003 fd7d 	bl	800a020 <HAL_GPIO_ReadPin>
 8006526:	4603      	mov	r3, r0
 8006528:	2b00      	cmp	r3, #0
 800652a:	d109      	bne.n	8006540 <bekle+0xe0>
 800652c:	4b15      	ldr	r3, [pc, #84]	; (8006584 <bekle+0x124>)
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	4b15      	ldr	r3, [pc, #84]	; (8006588 <bekle+0x128>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	429a      	cmp	r2, r3
 8006536:	d0ef      	beq.n	8006518 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8006538:	e002      	b.n	8006540 <bekle+0xe0>
    	butonKontrol = 1;
 800653a:	4b14      	ldr	r3, [pc, #80]	; (800658c <bekle+0x12c>)
 800653c:	2201      	movs	r2, #1
 800653e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8006540:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006544:	4813      	ldr	r0, [pc, #76]	; (8006594 <bekle+0x134>)
 8006546:	f003 fd6b 	bl	800a020 <HAL_GPIO_ReadPin>
 800654a:	4603      	mov	r3, r0
 800654c:	2b00      	cmp	r3, #0
 800654e:	d109      	bne.n	8006564 <bekle+0x104>
 8006550:	4b0c      	ldr	r3, [pc, #48]	; (8006584 <bekle+0x124>)
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	4b0c      	ldr	r3, [pc, #48]	; (8006588 <bekle+0x128>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	429a      	cmp	r2, r3
 800655a:	d0ee      	beq.n	800653a <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 800655c:	e002      	b.n	8006564 <bekle+0x104>
    	butonKontrol = 1;
 800655e:	4b0b      	ldr	r3, [pc, #44]	; (800658c <bekle+0x12c>)
 8006560:	2201      	movs	r2, #1
 8006562:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8006564:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006568:	480a      	ldr	r0, [pc, #40]	; (8006594 <bekle+0x134>)
 800656a:	f003 fd59 	bl	800a020 <HAL_GPIO_ReadPin>
 800656e:	4603      	mov	r3, r0
 8006570:	2b00      	cmp	r3, #0
 8006572:	d105      	bne.n	8006580 <bekle+0x120>
 8006574:	4b03      	ldr	r3, [pc, #12]	; (8006584 <bekle+0x124>)
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	4b03      	ldr	r3, [pc, #12]	; (8006588 <bekle+0x128>)
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	429a      	cmp	r2, r3
 800657e:	d0ee      	beq.n	800655e <bekle+0xfe>
    }

}
 8006580:	bf00      	nop
 8006582:	bd80      	pop	{r7, pc}
 8006584:	20000bd4 	.word	0x20000bd4
 8006588:	20000bdc 	.word	0x20000bdc
 800658c:	20000ccc 	.word	0x20000ccc
 8006590:	40010800 	.word	0x40010800
 8006594:	40011000 	.word	0x40011000

08006598 <i2cTest>:

void i2cTest() {
 8006598:	b580      	push	{r7, lr}
 800659a:	b084      	sub	sp, #16
 800659c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 800659e:	463b      	mov	r3, r7
 80065a0:	2200      	movs	r2, #0
 80065a2:	601a      	str	r2, [r3, #0]
 80065a4:	605a      	str	r2, [r3, #4]
 80065a6:	609a      	str	r2, [r3, #8]
 80065a8:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 80065aa:	4b50      	ldr	r3, [pc, #320]	; (80066ec <i2cTest+0x154>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	681a      	ldr	r2, [r3, #0]
 80065b0:	4b4e      	ldr	r3, [pc, #312]	; (80066ec <i2cTest+0x154>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f022 0201 	bic.w	r2, r2, #1
 80065b8:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 80065ba:	484c      	ldr	r0, [pc, #304]	; (80066ec <i2cTest+0x154>)
 80065bc:	f003 febc 	bl	800a338 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80065c0:	23c0      	movs	r3, #192	; 0xc0
 80065c2:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 80065c4:	2311      	movs	r3, #17
 80065c6:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 80065c8:	2301      	movs	r3, #1
 80065ca:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 80065cc:	2303      	movs	r3, #3
 80065ce:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 80065d0:	463b      	mov	r3, r7
 80065d2:	4619      	mov	r1, r3
 80065d4:	4846      	ldr	r0, [pc, #280]	; (80066f0 <i2cTest+0x158>)
 80065d6:	f003 fac3 	bl	8009b60 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80065da:	2201      	movs	r2, #1
 80065dc:	2140      	movs	r1, #64	; 0x40
 80065de:	4844      	ldr	r0, [pc, #272]	; (80066f0 <i2cTest+0x158>)
 80065e0:	f003 fd35 	bl	800a04e <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80065e4:	2201      	movs	r2, #1
 80065e6:	2180      	movs	r1, #128	; 0x80
 80065e8:	4841      	ldr	r0, [pc, #260]	; (80066f0 <i2cTest+0x158>)
 80065ea:	f003 fd30 	bl	800a04e <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 80065ee:	200a      	movs	r0, #10
 80065f0:	f002 ff46 	bl	8009480 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 80065f4:	bf00      	nop
 80065f6:	2140      	movs	r1, #64	; 0x40
 80065f8:	483d      	ldr	r0, [pc, #244]	; (80066f0 <i2cTest+0x158>)
 80065fa:	f003 fd11 	bl	800a020 <HAL_GPIO_ReadPin>
 80065fe:	4603      	mov	r3, r0
 8006600:	2b01      	cmp	r3, #1
 8006602:	d006      	beq.n	8006612 <i2cTest+0x7a>
 8006604:	2180      	movs	r1, #128	; 0x80
 8006606:	483a      	ldr	r0, [pc, #232]	; (80066f0 <i2cTest+0x158>)
 8006608:	f003 fd0a 	bl	800a020 <HAL_GPIO_ReadPin>
 800660c:	4603      	mov	r3, r0
 800660e:	2b01      	cmp	r3, #1
 8006610:	d1f1      	bne.n	80065f6 <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8006612:	2200      	movs	r2, #0
 8006614:	2180      	movs	r1, #128	; 0x80
 8006616:	4836      	ldr	r0, [pc, #216]	; (80066f0 <i2cTest+0x158>)
 8006618:	f003 fd19 	bl	800a04e <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 800661c:	200a      	movs	r0, #10
 800661e:	f002 ff2f 	bl	8009480 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8006622:	bf00      	nop
 8006624:	2180      	movs	r1, #128	; 0x80
 8006626:	4832      	ldr	r0, [pc, #200]	; (80066f0 <i2cTest+0x158>)
 8006628:	f003 fcfa 	bl	800a020 <HAL_GPIO_ReadPin>
 800662c:	4603      	mov	r3, r0
 800662e:	2b01      	cmp	r3, #1
 8006630:	d0f8      	beq.n	8006624 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8006632:	2200      	movs	r2, #0
 8006634:	2140      	movs	r1, #64	; 0x40
 8006636:	482e      	ldr	r0, [pc, #184]	; (80066f0 <i2cTest+0x158>)
 8006638:	f003 fd09 	bl	800a04e <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 800663c:	200a      	movs	r0, #10
 800663e:	f002 ff1f 	bl	8009480 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8006642:	bf00      	nop
 8006644:	2140      	movs	r1, #64	; 0x40
 8006646:	482a      	ldr	r0, [pc, #168]	; (80066f0 <i2cTest+0x158>)
 8006648:	f003 fcea 	bl	800a020 <HAL_GPIO_ReadPin>
 800664c:	4603      	mov	r3, r0
 800664e:	2b01      	cmp	r3, #1
 8006650:	d0f8      	beq.n	8006644 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8006652:	2201      	movs	r2, #1
 8006654:	2140      	movs	r1, #64	; 0x40
 8006656:	4826      	ldr	r0, [pc, #152]	; (80066f0 <i2cTest+0x158>)
 8006658:	f003 fcf9 	bl	800a04e <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 800665c:	200a      	movs	r0, #10
 800665e:	f002 ff0f 	bl	8009480 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8006662:	bf00      	nop
 8006664:	2140      	movs	r1, #64	; 0x40
 8006666:	4822      	ldr	r0, [pc, #136]	; (80066f0 <i2cTest+0x158>)
 8006668:	f003 fcda 	bl	800a020 <HAL_GPIO_ReadPin>
 800666c:	4603      	mov	r3, r0
 800666e:	2b01      	cmp	r3, #1
 8006670:	d1f8      	bne.n	8006664 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8006672:	2201      	movs	r2, #1
 8006674:	2180      	movs	r1, #128	; 0x80
 8006676:	481e      	ldr	r0, [pc, #120]	; (80066f0 <i2cTest+0x158>)
 8006678:	f003 fce9 	bl	800a04e <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 800667c:	200a      	movs	r0, #10
 800667e:	f002 feff 	bl	8009480 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8006682:	bf00      	nop
 8006684:	2180      	movs	r1, #128	; 0x80
 8006686:	481a      	ldr	r0, [pc, #104]	; (80066f0 <i2cTest+0x158>)
 8006688:	f003 fcca 	bl	800a020 <HAL_GPIO_ReadPin>
 800668c:	4603      	mov	r3, r0
 800668e:	2b01      	cmp	r3, #1
 8006690:	d1f8      	bne.n	8006684 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006692:	23c0      	movs	r3, #192	; 0xc0
 8006694:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 8006696:	2312      	movs	r3, #18
 8006698:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 800669a:	2301      	movs	r3, #1
 800669c:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 800669e:	2303      	movs	r3, #3
 80066a0:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 80066a2:	463b      	mov	r3, r7
 80066a4:	4619      	mov	r1, r3
 80066a6:	4812      	ldr	r0, [pc, #72]	; (80066f0 <i2cTest+0x158>)
 80066a8:	f003 fa5a 	bl	8009b60 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 80066ac:	4b0f      	ldr	r3, [pc, #60]	; (80066ec <i2cTest+0x154>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	681a      	ldr	r2, [r3, #0]
 80066b2:	4b0e      	ldr	r3, [pc, #56]	; (80066ec <i2cTest+0x154>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80066ba:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 80066bc:	4b0b      	ldr	r3, [pc, #44]	; (80066ec <i2cTest+0x154>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	4b0a      	ldr	r3, [pc, #40]	; (80066ec <i2cTest+0x154>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80066ca:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 80066cc:	4b07      	ldr	r3, [pc, #28]	; (80066ec <i2cTest+0x154>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	4b06      	ldr	r3, [pc, #24]	; (80066ec <i2cTest+0x154>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f042 0201 	orr.w	r2, r2, #1
 80066da:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 80066dc:	4803      	ldr	r0, [pc, #12]	; (80066ec <i2cTest+0x154>)
 80066de:	f003 fce7 	bl	800a0b0 <HAL_I2C_Init>
}
 80066e2:	bf00      	nop
 80066e4:	3710      	adds	r7, #16
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	20000e5c 	.word	0x20000e5c
 80066f0:	40010c00 	.word	0x40010c00

080066f4 <checkLCDBacklight>:

void checkLCDBacklight() {
 80066f4:	b580      	push	{r7, lr}
 80066f6:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 80066f8:	4b0b      	ldr	r3, [pc, #44]	; (8006728 <checkLCDBacklight+0x34>)
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	4b0b      	ldr	r3, [pc, #44]	; (800672c <checkLCDBacklight+0x38>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	1ad2      	subs	r2, r2, r3
 8006702:	4b0b      	ldr	r3, [pc, #44]	; (8006730 <checkLCDBacklight+0x3c>)
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	4619      	mov	r1, r3
 8006708:	460b      	mov	r3, r1
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	440b      	add	r3, r1
 800670e:	005b      	lsls	r3, r3, #1
 8006710:	429a      	cmp	r2, r3
 8006712:	d303      	bcc.n	800671c <checkLCDBacklight+0x28>
		lcd_backlight(0);
 8006714:	2000      	movs	r0, #0
 8006716:	f7fa f89b 	bl	8000850 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 800671a:	e002      	b.n	8006722 <checkLCDBacklight+0x2e>
		lcd_backlight(1);
 800671c:	2001      	movs	r0, #1
 800671e:	f7fa f897 	bl	8000850 <lcd_backlight>
}
 8006722:	bf00      	nop
 8006724:	bd80      	pop	{r7, pc}
 8006726:	bf00      	nop
 8006728:	20000bd4 	.word	0x20000bd4
 800672c:	20000bf0 	.word	0x20000bf0
 8006730:	20000940 	.word	0x20000940

08006734 <checkBasincSalteri>:

void checkBasincSalteri() {
 8006734:	b580      	push	{r7, lr}
 8006736:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8006738:	4b13      	ldr	r3, [pc, #76]	; (8006788 <checkBasincSalteri+0x54>)
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d102      	bne.n	8006746 <checkBasincSalteri+0x12>
		basincVar=1;
 8006740:	4b12      	ldr	r3, [pc, #72]	; (800678c <checkBasincSalteri+0x58>)
 8006742:	2201      	movs	r2, #1
 8006744:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8006746:	4b10      	ldr	r3, [pc, #64]	; (8006788 <checkBasincSalteri+0x54>)
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	2b01      	cmp	r3, #1
 800674c:	d119      	bne.n	8006782 <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 800674e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006752:	480f      	ldr	r0, [pc, #60]	; (8006790 <checkBasincSalteri+0x5c>)
 8006754:	f003 fc64 	bl	800a020 <HAL_GPIO_ReadPin>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d10a      	bne.n	8006774 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 800675e:	4b0d      	ldr	r3, [pc, #52]	; (8006794 <checkBasincSalteri+0x60>)
 8006760:	681a      	ldr	r2, [r3, #0]
 8006762:	4b0d      	ldr	r3, [pc, #52]	; (8006798 <checkBasincSalteri+0x64>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	1ad3      	subs	r3, r2, r3
 8006768:	2b02      	cmp	r3, #2
 800676a:	d90a      	bls.n	8006782 <checkBasincSalteri+0x4e>
				basincVar=1;
 800676c:	4b07      	ldr	r3, [pc, #28]	; (800678c <checkBasincSalteri+0x58>)
 800676e:	2201      	movs	r2, #1
 8006770:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8006772:	e006      	b.n	8006782 <checkBasincSalteri+0x4e>
			timer5=millis;
 8006774:	4b07      	ldr	r3, [pc, #28]	; (8006794 <checkBasincSalteri+0x60>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a07      	ldr	r2, [pc, #28]	; (8006798 <checkBasincSalteri+0x64>)
 800677a:	6013      	str	r3, [r2, #0]
			basincVar=0;
 800677c:	4b03      	ldr	r3, [pc, #12]	; (800678c <checkBasincSalteri+0x58>)
 800677e:	2200      	movs	r2, #0
 8006780:	701a      	strb	r2, [r3, #0]
}
 8006782:	bf00      	nop
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	20000ca4 	.word	0x20000ca4
 800678c:	20000ca0 	.word	0x20000ca0
 8006790:	40011000 	.word	0x40011000
 8006794:	20000bd4 	.word	0x20000bd4
 8006798:	20000bec 	.word	0x20000bec

0800679c <checkBasGonder>:

void checkBasGonder() {
 800679c:	b480      	push	{r7}
 800679e:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 80067a0:	4b1b      	ldr	r3, [pc, #108]	; (8006810 <checkBasGonder+0x74>)
 80067a2:	781b      	ldrb	r3, [r3, #0]
 80067a4:	2b01      	cmp	r3, #1
 80067a6:	d10b      	bne.n	80067c0 <checkBasGonder+0x24>
 80067a8:	4b1a      	ldr	r3, [pc, #104]	; (8006814 <checkBasGonder+0x78>)
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d007      	beq.n	80067c0 <checkBasGonder+0x24>
 80067b0:	4b19      	ldr	r3, [pc, #100]	; (8006818 <checkBasGonder+0x7c>)
 80067b2:	781b      	ldrb	r3, [r3, #0]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d103      	bne.n	80067c0 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 80067b8:	4b18      	ldr	r3, [pc, #96]	; (800681c <checkBasGonder+0x80>)
 80067ba:	2201      	movs	r2, #1
 80067bc:	701a      	strb	r2, [r3, #0]
 80067be:	e009      	b.n	80067d4 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 80067c0:	4b14      	ldr	r3, [pc, #80]	; (8006814 <checkBasGonder+0x78>)
 80067c2:	781b      	ldrb	r3, [r3, #0]
 80067c4:	f083 0301 	eor.w	r3, r3, #1
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d002      	beq.n	80067d4 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 80067ce:	4b13      	ldr	r3, [pc, #76]	; (800681c <checkBasGonder+0x80>)
 80067d0:	2200      	movs	r2, #0
 80067d2:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 80067d4:	4b0e      	ldr	r3, [pc, #56]	; (8006810 <checkBasGonder+0x74>)
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d10b      	bne.n	80067f4 <checkBasGonder+0x58>
 80067dc:	4b10      	ldr	r3, [pc, #64]	; (8006820 <checkBasGonder+0x84>)
 80067de:	781b      	ldrb	r3, [r3, #0]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d007      	beq.n	80067f4 <checkBasGonder+0x58>
 80067e4:	4b0c      	ldr	r3, [pc, #48]	; (8006818 <checkBasGonder+0x7c>)
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d103      	bne.n	80067f4 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 80067ec:	4b0d      	ldr	r3, [pc, #52]	; (8006824 <checkBasGonder+0x88>)
 80067ee:	2201      	movs	r2, #1
 80067f0:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 80067f2:	e009      	b.n	8006808 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 80067f4:	4b0a      	ldr	r3, [pc, #40]	; (8006820 <checkBasGonder+0x84>)
 80067f6:	781b      	ldrb	r3, [r3, #0]
 80067f8:	f083 0301 	eor.w	r3, r3, #1
 80067fc:	b2db      	uxtb	r3, r3
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d002      	beq.n	8006808 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8006802:	4b08      	ldr	r3, [pc, #32]	; (8006824 <checkBasGonder+0x88>)
 8006804:	2200      	movs	r2, #0
 8006806:	701a      	strb	r2, [r3, #0]
}
 8006808:	bf00      	nop
 800680a:	46bd      	mov	sp, r7
 800680c:	bc80      	pop	{r7}
 800680e:	4770      	bx	lr
 8006810:	20000c9e 	.word	0x20000c9e
 8006814:	20000cd2 	.word	0x20000cd2
 8006818:	20000cac 	.word	0x20000cac
 800681c:	20000cd9 	.word	0x20000cd9
 8006820:	20000cd5 	.word	0x20000cd5
 8006824:	20000cda 	.word	0x20000cda

08006828 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8006828:	b580      	push	{r7, lr}
 800682a:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 800682c:	4b24      	ldr	r3, [pc, #144]	; (80068c0 <checkKapiSecimleri+0x98>)
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d102      	bne.n	800683a <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8006834:	4b23      	ldr	r3, [pc, #140]	; (80068c4 <checkKapiSecimleri+0x9c>)
 8006836:	2201      	movs	r2, #1
 8006838:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 800683a:	4b21      	ldr	r3, [pc, #132]	; (80068c0 <checkKapiSecimleri+0x98>)
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	2b01      	cmp	r3, #1
 8006840:	d10e      	bne.n	8006860 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8006842:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006846:	4820      	ldr	r0, [pc, #128]	; (80068c8 <checkKapiSecimleri+0xa0>)
 8006848:	f003 fbea 	bl	800a020 <HAL_GPIO_ReadPin>
 800684c:	4603      	mov	r3, r0
 800684e:	2b00      	cmp	r3, #0
 8006850:	d103      	bne.n	800685a <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8006852:	4b1c      	ldr	r3, [pc, #112]	; (80068c4 <checkKapiSecimleri+0x9c>)
 8006854:	2201      	movs	r2, #1
 8006856:	701a      	strb	r2, [r3, #0]
 8006858:	e002      	b.n	8006860 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 800685a:	4b1a      	ldr	r3, [pc, #104]	; (80068c4 <checkKapiSecimleri+0x9c>)
 800685c:	2200      	movs	r2, #0
 800685e:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8006860:	4b17      	ldr	r3, [pc, #92]	; (80068c0 <checkKapiSecimleri+0x98>)
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	2b02      	cmp	r3, #2
 8006866:	d10e      	bne.n	8006886 <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8006868:	f44f 7180 	mov.w	r1, #256	; 0x100
 800686c:	4816      	ldr	r0, [pc, #88]	; (80068c8 <checkKapiSecimleri+0xa0>)
 800686e:	f003 fbd7 	bl	800a020 <HAL_GPIO_ReadPin>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d103      	bne.n	8006880 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8006878:	4b12      	ldr	r3, [pc, #72]	; (80068c4 <checkKapiSecimleri+0x9c>)
 800687a:	2201      	movs	r2, #1
 800687c:	701a      	strb	r2, [r3, #0]
 800687e:	e002      	b.n	8006886 <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 8006880:	4b10      	ldr	r3, [pc, #64]	; (80068c4 <checkKapiSecimleri+0x9c>)
 8006882:	2200      	movs	r2, #0
 8006884:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 8006886:	4b0e      	ldr	r3, [pc, #56]	; (80068c0 <checkKapiSecimleri+0x98>)
 8006888:	781b      	ldrb	r3, [r3, #0]
 800688a:	2b03      	cmp	r3, #3
 800688c:	d116      	bne.n	80068bc <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 800688e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006892:	480d      	ldr	r0, [pc, #52]	; (80068c8 <checkKapiSecimleri+0xa0>)
 8006894:	f003 fbc4 	bl	800a020 <HAL_GPIO_ReadPin>
 8006898:	4603      	mov	r3, r0
 800689a:	2b00      	cmp	r3, #0
 800689c:	d10b      	bne.n	80068b6 <checkKapiSecimleri+0x8e>
 800689e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80068a2:	4809      	ldr	r0, [pc, #36]	; (80068c8 <checkKapiSecimleri+0xa0>)
 80068a4:	f003 fbbc 	bl	800a020 <HAL_GPIO_ReadPin>
 80068a8:	4603      	mov	r3, r0
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d103      	bne.n	80068b6 <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 80068ae:	4b05      	ldr	r3, [pc, #20]	; (80068c4 <checkKapiSecimleri+0x9c>)
 80068b0:	2201      	movs	r2, #1
 80068b2:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 80068b4:	e002      	b.n	80068bc <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 80068b6:	4b03      	ldr	r3, [pc, #12]	; (80068c4 <checkKapiSecimleri+0x9c>)
 80068b8:	2200      	movs	r2, #0
 80068ba:	701a      	strb	r2, [r3, #0]
}
 80068bc:	bf00      	nop
 80068be:	bd80      	pop	{r7, pc}
 80068c0:	20000ca5 	.word	0x20000ca5
 80068c4:	20000cf0 	.word	0x20000cf0
 80068c8:	40010800 	.word	0x40010800

080068cc <checkAktifCalisma>:

void checkAktifCalisma() {
 80068cc:	b580      	push	{r7, lr}
 80068ce:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 80068d0:	4b62      	ldr	r3, [pc, #392]	; (8006a5c <checkAktifCalisma+0x190>)
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	f041 8332 	bne.w	8007f3e <checkAktifCalisma+0x1672>
 80068da:	4b61      	ldr	r3, [pc, #388]	; (8006a60 <checkAktifCalisma+0x194>)
 80068dc:	781b      	ldrb	r3, [r3, #0]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	f041 832d 	bne.w	8007f3e <checkAktifCalisma+0x1672>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 80068e4:	4b5f      	ldr	r3, [pc, #380]	; (8006a64 <checkAktifCalisma+0x198>)
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d11a      	bne.n	8006922 <checkAktifCalisma+0x56>
 80068ec:	4b5e      	ldr	r3, [pc, #376]	; (8006a68 <checkAktifCalisma+0x19c>)
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d116      	bne.n	8006922 <checkAktifCalisma+0x56>
 80068f4:	4b5d      	ldr	r3, [pc, #372]	; (8006a6c <checkAktifCalisma+0x1a0>)
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d00a      	beq.n	8006912 <checkAktifCalisma+0x46>
 80068fc:	4b5c      	ldr	r3, [pc, #368]	; (8006a70 <checkAktifCalisma+0x1a4>)
 80068fe:	781b      	ldrb	r3, [r3, #0]
 8006900:	f083 0301 	eor.w	r3, r3, #1
 8006904:	b2db      	uxtb	r3, r3
 8006906:	2b00      	cmp	r3, #0
 8006908:	d003      	beq.n	8006912 <checkAktifCalisma+0x46>
 800690a:	4b5a      	ldr	r3, [pc, #360]	; (8006a74 <checkAktifCalisma+0x1a8>)
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	2b01      	cmp	r3, #1
 8006910:	d007      	beq.n	8006922 <checkAktifCalisma+0x56>
 8006912:	4b59      	ldr	r3, [pc, #356]	; (8006a78 <checkAktifCalisma+0x1ac>)
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d018      	beq.n	800694c <checkAktifCalisma+0x80>
 800691a:	4b58      	ldr	r3, [pc, #352]	; (8006a7c <checkAktifCalisma+0x1b0>)
 800691c:	781b      	ldrb	r3, [r3, #0]
 800691e:	2b01      	cmp	r3, #1
 8006920:	d114      	bne.n	800694c <checkAktifCalisma+0x80>
 8006922:	4b57      	ldr	r3, [pc, #348]	; (8006a80 <checkAktifCalisma+0x1b4>)
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d010      	beq.n	800694c <checkAktifCalisma+0x80>
 800692a:	4b56      	ldr	r3, [pc, #344]	; (8006a84 <checkAktifCalisma+0x1b8>)
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d00c      	beq.n	800694c <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8006932:	2201      	movs	r2, #1
 8006934:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006938:	4853      	ldr	r0, [pc, #332]	; (8006a88 <checkAktifCalisma+0x1bc>)
 800693a:	f003 fb88 	bl	800a04e <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 800693e:	4b53      	ldr	r3, [pc, #332]	; (8006a8c <checkAktifCalisma+0x1c0>)
 8006940:	2201      	movs	r2, #1
 8006942:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 8006944:	4b52      	ldr	r3, [pc, #328]	; (8006a90 <checkAktifCalisma+0x1c4>)
 8006946:	2201      	movs	r2, #1
 8006948:	701a      	strb	r2, [r3, #0]
 800694a:	e008      	b.n	800695e <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 800694c:	2200      	movs	r2, #0
 800694e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006952:	484d      	ldr	r0, [pc, #308]	; (8006a88 <checkAktifCalisma+0x1bc>)
 8006954:	f003 fb7b 	bl	800a04e <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 8006958:	4b4c      	ldr	r3, [pc, #304]	; (8006a8c <checkAktifCalisma+0x1c0>)
 800695a:	2200      	movs	r2, #0
 800695c:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 800695e:	4b40      	ldr	r3, [pc, #256]	; (8006a60 <checkAktifCalisma+0x194>)
 8006960:	781b      	ldrb	r3, [r3, #0]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d160      	bne.n	8006a28 <checkAktifCalisma+0x15c>
 8006966:	4b46      	ldr	r3, [pc, #280]	; (8006a80 <checkAktifCalisma+0x1b4>)
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	2b00      	cmp	r3, #0
 800696c:	d05c      	beq.n	8006a28 <checkAktifCalisma+0x15c>
 800696e:	4b45      	ldr	r3, [pc, #276]	; (8006a84 <checkAktifCalisma+0x1b8>)
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d058      	beq.n	8006a28 <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8006976:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800697a:	4843      	ldr	r0, [pc, #268]	; (8006a88 <checkAktifCalisma+0x1bc>)
 800697c:	f003 fb50 	bl	800a020 <HAL_GPIO_ReadPin>
 8006980:	4603      	mov	r3, r0
 8006982:	2b00      	cmp	r3, #0
 8006984:	d003      	beq.n	800698e <checkAktifCalisma+0xc2>
 8006986:	4b43      	ldr	r3, [pc, #268]	; (8006a94 <checkAktifCalisma+0x1c8>)
 8006988:	781b      	ldrb	r3, [r3, #0]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d04c      	beq.n	8006a28 <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 800698e:	2102      	movs	r1, #2
 8006990:	4841      	ldr	r0, [pc, #260]	; (8006a98 <checkAktifCalisma+0x1cc>)
 8006992:	f003 fb45 	bl	800a020 <HAL_GPIO_ReadPin>
 8006996:	4603      	mov	r3, r0
 8006998:	2b00      	cmp	r3, #0
 800699a:	d145      	bne.n	8006a28 <checkAktifCalisma+0x15c>
				&& (basincVar)
 800699c:	4b3f      	ldr	r3, [pc, #252]	; (8006a9c <checkAktifCalisma+0x1d0>)
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d041      	beq.n	8006a28 <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 80069a4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80069a8:	4837      	ldr	r0, [pc, #220]	; (8006a88 <checkAktifCalisma+0x1bc>)
 80069aa:	f003 fb39 	bl	800a020 <HAL_GPIO_ReadPin>
 80069ae:	4603      	mov	r3, r0
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d10e      	bne.n	80069d2 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80069b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80069b8:	4833      	ldr	r0, [pc, #204]	; (8006a88 <checkAktifCalisma+0x1bc>)
 80069ba:	f003 fb31 	bl	800a020 <HAL_GPIO_ReadPin>
 80069be:	4603      	mov	r3, r0
 80069c0:	2b01      	cmp	r3, #1
 80069c2:	d106      	bne.n	80069d2 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 80069c4:	2140      	movs	r1, #64	; 0x40
 80069c6:	4834      	ldr	r0, [pc, #208]	; (8006a98 <checkAktifCalisma+0x1cc>)
 80069c8:	f003 fb2a 	bl	800a020 <HAL_GPIO_ReadPin>
 80069cc:	4603      	mov	r3, r0
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d003      	beq.n	80069da <checkAktifCalisma+0x10e>
 80069d2:	4b24      	ldr	r3, [pc, #144]	; (8006a64 <checkAktifCalisma+0x198>)
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d026      	beq.n	8006a28 <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 80069da:	4b24      	ldr	r3, [pc, #144]	; (8006a6c <checkAktifCalisma+0x1a0>)
 80069dc:	781b      	ldrb	r3, [r3, #0]
 80069de:	f083 0301 	eor.w	r3, r3, #1
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d01f      	beq.n	8006a28 <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 80069e8:	4b1f      	ldr	r3, [pc, #124]	; (8006a68 <checkAktifCalisma+0x19c>)
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	f083 0301 	eor.w	r3, r3, #1
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d018      	beq.n	8006a28 <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 80069f6:	4b20      	ldr	r3, [pc, #128]	; (8006a78 <checkAktifCalisma+0x1ac>)
 80069f8:	781b      	ldrb	r3, [r3, #0]
 80069fa:	f083 0301 	eor.w	r3, r3, #1
 80069fe:	b2db      	uxtb	r3, r3
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d011      	beq.n	8006a28 <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 8006a04:	4b26      	ldr	r3, [pc, #152]	; (8006aa0 <checkAktifCalisma+0x1d4>)
 8006a06:	781b      	ldrb	r3, [r3, #0]
 8006a08:	f083 0301 	eor.w	r3, r3, #1
 8006a0c:	b2db      	uxtb	r3, r3
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d00a      	beq.n	8006a28 <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 8006a12:	4b24      	ldr	r3, [pc, #144]	; (8006aa4 <checkAktifCalisma+0x1d8>)
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	f083 0301 	eor.w	r3, r3, #1
 8006a1a:	b2db      	uxtb	r3, r3
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d003      	beq.n	8006a28 <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8006a20:	4b10      	ldr	r3, [pc, #64]	; (8006a64 <checkAktifCalisma+0x198>)
 8006a22:	2201      	movs	r2, #1
 8006a24:	701a      	strb	r2, [r3, #0]
 8006a26:	e002      	b.n	8006a2e <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8006a28:	4b0e      	ldr	r3, [pc, #56]	; (8006a64 <checkAktifCalisma+0x198>)
 8006a2a:	2200      	movs	r2, #0
 8006a2c:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8006a2e:	4b0d      	ldr	r3, [pc, #52]	; (8006a64 <checkAktifCalisma+0x198>)
 8006a30:	781b      	ldrb	r3, [r3, #0]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d03a      	beq.n	8006aac <checkAktifCalisma+0x1e0>
 8006a36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006a3a:	4817      	ldr	r0, [pc, #92]	; (8006a98 <checkAktifCalisma+0x1cc>)
 8006a3c:	f003 faf0 	bl	800a020 <HAL_GPIO_ReadPin>
 8006a40:	4603      	mov	r3, r0
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	d132      	bne.n	8006aac <checkAktifCalisma+0x1e0>
 8006a46:	4b18      	ldr	r3, [pc, #96]	; (8006aa8 <checkAktifCalisma+0x1dc>)
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d02e      	beq.n	8006aac <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8006a4e:	2201      	movs	r2, #1
 8006a50:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006a54:	480c      	ldr	r0, [pc, #48]	; (8006a88 <checkAktifCalisma+0x1bc>)
 8006a56:	f003 fafa 	bl	800a04e <HAL_GPIO_WritePin>
 8006a5a:	e02d      	b.n	8006ab8 <checkAktifCalisma+0x1ec>
 8006a5c:	20000cbb 	.word	0x20000cbb
 8006a60:	20000cba 	.word	0x20000cba
 8006a64:	20000cd2 	.word	0x20000cd2
 8006a68:	20000cd3 	.word	0x20000cd3
 8006a6c:	20000cd5 	.word	0x20000cd5
 8006a70:	20000ccd 	.word	0x20000ccd
 8006a74:	20000cb0 	.word	0x20000cb0
 8006a78:	20000cd4 	.word	0x20000cd4
 8006a7c:	20000caf 	.word	0x20000caf
 8006a80:	20000cef 	.word	0x20000cef
 8006a84:	20000cf0 	.word	0x20000cf0
 8006a88:	40010c00 	.word	0x40010c00
 8006a8c:	20000cf1 	.word	0x20000cf1
 8006a90:	20000cdc 	.word	0x20000cdc
 8006a94:	20000cd9 	.word	0x20000cd9
 8006a98:	40011000 	.word	0x40011000
 8006a9c:	20000ca0 	.word	0x20000ca0
 8006aa0:	20000cd7 	.word	0x20000cd7
 8006aa4:	20000cd8 	.word	0x20000cd8
 8006aa8:	20000cab 	.word	0x20000cab
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006aac:	2200      	movs	r2, #0
 8006aae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006ab2:	4860      	ldr	r0, [pc, #384]	; (8006c34 <checkAktifCalisma+0x368>)
 8006ab4:	f003 facb 	bl	800a04e <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 8006ab8:	4b5f      	ldr	r3, [pc, #380]	; (8006c38 <checkAktifCalisma+0x36c>)
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d013      	beq.n	8006ae8 <checkAktifCalisma+0x21c>
 8006ac0:	4b5e      	ldr	r3, [pc, #376]	; (8006c3c <checkAktifCalisma+0x370>)
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d007      	beq.n	8006ad8 <checkAktifCalisma+0x20c>
 8006ac8:	4b5c      	ldr	r3, [pc, #368]	; (8006c3c <checkAktifCalisma+0x370>)
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	2b02      	cmp	r3, #2
 8006ace:	d003      	beq.n	8006ad8 <checkAktifCalisma+0x20c>
 8006ad0:	4b5b      	ldr	r3, [pc, #364]	; (8006c40 <checkAktifCalisma+0x374>)
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d107      	bne.n	8006ae8 <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8006ad8:	2201      	movs	r2, #1
 8006ada:	2104      	movs	r1, #4
 8006adc:	4855      	ldr	r0, [pc, #340]	; (8006c34 <checkAktifCalisma+0x368>)
 8006ade:	f003 fab6 	bl	800a04e <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 8006ae2:	4b58      	ldr	r3, [pc, #352]	; (8006c44 <checkAktifCalisma+0x378>)
 8006ae4:	2201      	movs	r2, #1
 8006ae6:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8006ae8:	4b56      	ldr	r3, [pc, #344]	; (8006c44 <checkAktifCalisma+0x378>)
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d02f      	beq.n	8006b50 <checkAktifCalisma+0x284>
 8006af0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006af4:	484f      	ldr	r0, [pc, #316]	; (8006c34 <checkAktifCalisma+0x368>)
 8006af6:	f003 fa93 	bl	800a020 <HAL_GPIO_ReadPin>
 8006afa:	4603      	mov	r3, r0
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d106      	bne.n	8006b0e <checkAktifCalisma+0x242>
 8006b00:	4b51      	ldr	r3, [pc, #324]	; (8006c48 <checkAktifCalisma+0x37c>)
 8006b02:	781b      	ldrb	r3, [r3, #0]
 8006b04:	f083 0301 	eor.w	r3, r3, #1
 8006b08:	b2db      	uxtb	r3, r3
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d106      	bne.n	8006b1c <checkAktifCalisma+0x250>
 8006b0e:	2102      	movs	r1, #2
 8006b10:	484e      	ldr	r0, [pc, #312]	; (8006c4c <checkAktifCalisma+0x380>)
 8006b12:	f003 fa85 	bl	800a020 <HAL_GPIO_ReadPin>
 8006b16:	4603      	mov	r3, r0
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d119      	bne.n	8006b50 <checkAktifCalisma+0x284>
 8006b1c:	4b4c      	ldr	r3, [pc, #304]	; (8006c50 <checkAktifCalisma+0x384>)
 8006b1e:	781b      	ldrb	r3, [r3, #0]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d015      	beq.n	8006b50 <checkAktifCalisma+0x284>
 8006b24:	4b4b      	ldr	r3, [pc, #300]	; (8006c54 <checkAktifCalisma+0x388>)
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	2b00      	cmp	r3, #0
 8006b2a:	d011      	beq.n	8006b50 <checkAktifCalisma+0x284>
 8006b2c:	4b4a      	ldr	r3, [pc, #296]	; (8006c58 <checkAktifCalisma+0x38c>)
 8006b2e:	781b      	ldrb	r3, [r3, #0]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d00d      	beq.n	8006b50 <checkAktifCalisma+0x284>
 8006b34:	4b49      	ldr	r3, [pc, #292]	; (8006c5c <checkAktifCalisma+0x390>)
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	f083 0301 	eor.w	r3, r3, #1
 8006b3c:	b2db      	uxtb	r3, r3
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d006      	beq.n	8006b50 <checkAktifCalisma+0x284>
			timer2=millis;
 8006b42:	4b47      	ldr	r3, [pc, #284]	; (8006c60 <checkAktifCalisma+0x394>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a47      	ldr	r2, [pc, #284]	; (8006c64 <checkAktifCalisma+0x398>)
 8006b48:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 8006b4a:	4b44      	ldr	r3, [pc, #272]	; (8006c5c <checkAktifCalisma+0x390>)
 8006b4c:	2201      	movs	r2, #1
 8006b4e:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 8006b50:	4b43      	ldr	r3, [pc, #268]	; (8006c60 <checkAktifCalisma+0x394>)
 8006b52:	681a      	ldr	r2, [r3, #0]
 8006b54:	4b43      	ldr	r3, [pc, #268]	; (8006c64 <checkAktifCalisma+0x398>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	1ad3      	subs	r3, r2, r3
 8006b5a:	4a43      	ldr	r2, [pc, #268]	; (8006c68 <checkAktifCalisma+0x39c>)
 8006b5c:	7812      	ldrb	r2, [r2, #0]
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d303      	bcc.n	8006b6a <checkAktifCalisma+0x29e>
 8006b62:	4b3e      	ldr	r3, [pc, #248]	; (8006c5c <checkAktifCalisma+0x390>)
 8006b64:	781b      	ldrb	r3, [r3, #0]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d111      	bne.n	8006b8e <checkAktifCalisma+0x2c2>
 8006b6a:	4b39      	ldr	r3, [pc, #228]	; (8006c50 <checkAktifCalisma+0x384>)
 8006b6c:	781b      	ldrb	r3, [r3, #0]
 8006b6e:	f083 0301 	eor.w	r3, r3, #1
 8006b72:	b2db      	uxtb	r3, r3
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d10a      	bne.n	8006b8e <checkAktifCalisma+0x2c2>
 8006b78:	4b36      	ldr	r3, [pc, #216]	; (8006c54 <checkAktifCalisma+0x388>)
 8006b7a:	781b      	ldrb	r3, [r3, #0]
 8006b7c:	f083 0301 	eor.w	r3, r3, #1
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d103      	bne.n	8006b8e <checkAktifCalisma+0x2c2>
 8006b86:	4b34      	ldr	r3, [pc, #208]	; (8006c58 <checkAktifCalisma+0x38c>)
 8006b88:	781b      	ldrb	r3, [r3, #0]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d10a      	bne.n	8006ba4 <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006b8e:	2200      	movs	r2, #0
 8006b90:	2104      	movs	r1, #4
 8006b92:	4828      	ldr	r0, [pc, #160]	; (8006c34 <checkAktifCalisma+0x368>)
 8006b94:	f003 fa5b 	bl	800a04e <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 8006b98:	4b2a      	ldr	r3, [pc, #168]	; (8006c44 <checkAktifCalisma+0x378>)
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 8006b9e:	4b2f      	ldr	r3, [pc, #188]	; (8006c5c <checkAktifCalisma+0x390>)
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 8006ba4:	4b31      	ldr	r3, [pc, #196]	; (8006c6c <checkAktifCalisma+0x3a0>)
 8006ba6:	781b      	ldrb	r3, [r3, #0]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d102      	bne.n	8006bb2 <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 8006bac:	4b30      	ldr	r3, [pc, #192]	; (8006c70 <checkAktifCalisma+0x3a4>)
 8006bae:	2201      	movs	r2, #1
 8006bb0:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 8006bb2:	4b2e      	ldr	r3, [pc, #184]	; (8006c6c <checkAktifCalisma+0x3a0>)
 8006bb4:	781b      	ldrb	r3, [r3, #0]
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d116      	bne.n	8006be8 <checkAktifCalisma+0x31c>
 8006bba:	4b2e      	ldr	r3, [pc, #184]	; (8006c74 <checkAktifCalisma+0x3a8>)
 8006bbc:	781b      	ldrb	r3, [r3, #0]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d112      	bne.n	8006be8 <checkAktifCalisma+0x31c>
 8006bc2:	2101      	movs	r1, #1
 8006bc4:	4821      	ldr	r0, [pc, #132]	; (8006c4c <checkAktifCalisma+0x380>)
 8006bc6:	f003 fa2b 	bl	800a020 <HAL_GPIO_ReadPin>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d10b      	bne.n	8006be8 <checkAktifCalisma+0x31c>
 8006bd0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006bd4:	4817      	ldr	r0, [pc, #92]	; (8006c34 <checkAktifCalisma+0x368>)
 8006bd6:	f003 fa23 	bl	800a020 <HAL_GPIO_ReadPin>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d103      	bne.n	8006be8 <checkAktifCalisma+0x31c>
			cerceveVar=1;
 8006be0:	4b23      	ldr	r3, [pc, #140]	; (8006c70 <checkAktifCalisma+0x3a4>)
 8006be2:	2201      	movs	r2, #1
 8006be4:	701a      	strb	r2, [r3, #0]
 8006be6:	e011      	b.n	8006c0c <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8006be8:	4b20      	ldr	r3, [pc, #128]	; (8006c6c <checkAktifCalisma+0x3a0>)
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	2b01      	cmp	r3, #1
 8006bee:	d10d      	bne.n	8006c0c <checkAktifCalisma+0x340>
 8006bf0:	2101      	movs	r1, #1
 8006bf2:	4816      	ldr	r0, [pc, #88]	; (8006c4c <checkAktifCalisma+0x380>)
 8006bf4:	f003 fa14 	bl	800a020 <HAL_GPIO_ReadPin>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d106      	bne.n	8006c0c <checkAktifCalisma+0x340>
 8006bfe:	4b1d      	ldr	r3, [pc, #116]	; (8006c74 <checkAktifCalisma+0x3a8>)
 8006c00:	781b      	ldrb	r3, [r3, #0]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d102      	bne.n	8006c0c <checkAktifCalisma+0x340>
			cerceveVar=0;
 8006c06:	4b1a      	ldr	r3, [pc, #104]	; (8006c70 <checkAktifCalisma+0x3a4>)
 8006c08:	2200      	movs	r2, #0
 8006c0a:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 8006c0c:	4b17      	ldr	r3, [pc, #92]	; (8006c6c <checkAktifCalisma+0x3a0>)
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	2b01      	cmp	r3, #1
 8006c12:	d134      	bne.n	8006c7e <checkAktifCalisma+0x3b2>
 8006c14:	4b17      	ldr	r3, [pc, #92]	; (8006c74 <checkAktifCalisma+0x3a8>)
 8006c16:	781b      	ldrb	r3, [r3, #0]
 8006c18:	2b01      	cmp	r3, #1
 8006c1a:	d130      	bne.n	8006c7e <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8006c1c:	2101      	movs	r1, #1
 8006c1e:	480b      	ldr	r0, [pc, #44]	; (8006c4c <checkAktifCalisma+0x380>)
 8006c20:	f003 f9fe 	bl	800a020 <HAL_GPIO_ReadPin>
 8006c24:	4603      	mov	r3, r0
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d126      	bne.n	8006c78 <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 8006c2a:	4b11      	ldr	r3, [pc, #68]	; (8006c70 <checkAktifCalisma+0x3a4>)
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	701a      	strb	r2, [r3, #0]
 8006c30:	e025      	b.n	8006c7e <checkAktifCalisma+0x3b2>
 8006c32:	bf00      	nop
 8006c34:	40010c00 	.word	0x40010c00
 8006c38:	20000cd2 	.word	0x20000cd2
 8006c3c:	20000cac 	.word	0x20000cac
 8006c40:	20000cb0 	.word	0x20000cb0
 8006c44:	20000cd6 	.word	0x20000cd6
 8006c48:	20000cd9 	.word	0x20000cd9
 8006c4c:	40011000 	.word	0x40011000
 8006c50:	20000cef 	.word	0x20000cef
 8006c54:	20000cf0 	.word	0x20000cf0
 8006c58:	20000ca0 	.word	0x20000ca0
 8006c5c:	20000cce 	.word	0x20000cce
 8006c60:	20000bd4 	.word	0x20000bd4
 8006c64:	20000be0 	.word	0x20000be0
 8006c68:	20000cb1 	.word	0x20000cb1
 8006c6c:	20000ca1 	.word	0x20000ca1
 8006c70:	20000cf4 	.word	0x20000cf4
 8006c74:	20000c9e 	.word	0x20000c9e
			} else {
				cerceveVar=0;
 8006c78:	4b7f      	ldr	r3, [pc, #508]	; (8006e78 <checkAktifCalisma+0x5ac>)
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 8006c7e:	4b7f      	ldr	r3, [pc, #508]	; (8006e7c <checkAktifCalisma+0x5b0>)
 8006c80:	781b      	ldrb	r3, [r3, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d17c      	bne.n	8006d80 <checkAktifCalisma+0x4b4>
 8006c86:	4b7e      	ldr	r3, [pc, #504]	; (8006e80 <checkAktifCalisma+0x5b4>)
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d078      	beq.n	8006d80 <checkAktifCalisma+0x4b4>
 8006c8e:	4b7d      	ldr	r3, [pc, #500]	; (8006e84 <checkAktifCalisma+0x5b8>)
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d074      	beq.n	8006d80 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 8006c96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006c9a:	487b      	ldr	r0, [pc, #492]	; (8006e88 <checkAktifCalisma+0x5bc>)
 8006c9c:	f003 f9c0 	bl	800a020 <HAL_GPIO_ReadPin>
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d003      	beq.n	8006cae <checkAktifCalisma+0x3e2>
 8006ca6:	4b79      	ldr	r3, [pc, #484]	; (8006e8c <checkAktifCalisma+0x5c0>)
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d068      	beq.n	8006d80 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 8006cae:	4b72      	ldr	r3, [pc, #456]	; (8006e78 <checkAktifCalisma+0x5ac>)
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d064      	beq.n	8006d80 <checkAktifCalisma+0x4b4>
 8006cb6:	4b76      	ldr	r3, [pc, #472]	; (8006e90 <checkAktifCalisma+0x5c4>)
 8006cb8:	781b      	ldrb	r3, [r3, #0]
 8006cba:	f083 0301 	eor.w	r3, r3, #1
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d05d      	beq.n	8006d80 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8006cc4:	2104      	movs	r1, #4
 8006cc6:	4873      	ldr	r0, [pc, #460]	; (8006e94 <checkAktifCalisma+0x5c8>)
 8006cc8:	f003 f9aa 	bl	800a020 <HAL_GPIO_ReadPin>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d003      	beq.n	8006cda <checkAktifCalisma+0x40e>
 8006cd2:	4b71      	ldr	r3, [pc, #452]	; (8006e98 <checkAktifCalisma+0x5cc>)
 8006cd4:	781b      	ldrb	r3, [r3, #0]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d152      	bne.n	8006d80 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8006cda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006cde:	486a      	ldr	r0, [pc, #424]	; (8006e88 <checkAktifCalisma+0x5bc>)
 8006ce0:	f003 f99e 	bl	800a020 <HAL_GPIO_ReadPin>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d10e      	bne.n	8006d08 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8006cea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006cee:	4866      	ldr	r0, [pc, #408]	; (8006e88 <checkAktifCalisma+0x5bc>)
 8006cf0:	f003 f996 	bl	800a020 <HAL_GPIO_ReadPin>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d106      	bne.n	8006d08 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 8006cfa:	2140      	movs	r1, #64	; 0x40
 8006cfc:	4865      	ldr	r0, [pc, #404]	; (8006e94 <checkAktifCalisma+0x5c8>)
 8006cfe:	f003 f98f 	bl	800a020 <HAL_GPIO_ReadPin>
 8006d02:	4603      	mov	r3, r0
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d003      	beq.n	8006d10 <checkAktifCalisma+0x444>
 8006d08:	4b64      	ldr	r3, [pc, #400]	; (8006e9c <checkAktifCalisma+0x5d0>)
 8006d0a:	781b      	ldrb	r3, [r3, #0]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d037      	beq.n	8006d80 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 8006d10:	4b63      	ldr	r3, [pc, #396]	; (8006ea0 <checkAktifCalisma+0x5d4>)
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	f083 0301 	eor.w	r3, r3, #1
 8006d18:	b2db      	uxtb	r3, r3
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d030      	beq.n	8006d80 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 8006d1e:	4b61      	ldr	r3, [pc, #388]	; (8006ea4 <checkAktifCalisma+0x5d8>)
 8006d20:	781b      	ldrb	r3, [r3, #0]
 8006d22:	f083 0301 	eor.w	r3, r3, #1
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d029      	beq.n	8006d80 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 8006d2c:	4b5e      	ldr	r3, [pc, #376]	; (8006ea8 <checkAktifCalisma+0x5dc>)
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	f083 0301 	eor.w	r3, r3, #1
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d022      	beq.n	8006d80 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 8006d3a:	4b5c      	ldr	r3, [pc, #368]	; (8006eac <checkAktifCalisma+0x5e0>)
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	f083 0301 	eor.w	r3, r3, #1
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d01b      	beq.n	8006d80 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 8006d48:	4b59      	ldr	r3, [pc, #356]	; (8006eb0 <checkAktifCalisma+0x5e4>)
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	f083 0301 	eor.w	r3, r3, #1
 8006d50:	b2db      	uxtb	r3, r3
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d014      	beq.n	8006d80 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 8006d56:	4b57      	ldr	r3, [pc, #348]	; (8006eb4 <checkAktifCalisma+0x5e8>)
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	f083 0301 	eor.w	r3, r3, #1
 8006d5e:	b2db      	uxtb	r3, r3
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d00d      	beq.n	8006d80 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8006d64:	2201      	movs	r2, #1
 8006d66:	2102      	movs	r1, #2
 8006d68:	4847      	ldr	r0, [pc, #284]	; (8006e88 <checkAktifCalisma+0x5bc>)
 8006d6a:	f003 f970 	bl	800a04e <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 8006d6e:	4b4b      	ldr	r3, [pc, #300]	; (8006e9c <checkAktifCalisma+0x5d0>)
 8006d70:	2201      	movs	r2, #1
 8006d72:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 8006d74:	4b50      	ldr	r3, [pc, #320]	; (8006eb8 <checkAktifCalisma+0x5ec>)
 8006d76:	2201      	movs	r2, #1
 8006d78:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 8006d7a:	4b50      	ldr	r3, [pc, #320]	; (8006ebc <checkAktifCalisma+0x5f0>)
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 8006d80:	4b46      	ldr	r3, [pc, #280]	; (8006e9c <checkAktifCalisma+0x5d0>)
 8006d82:	781b      	ldrb	r3, [r3, #0]
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d033      	beq.n	8006df0 <checkAktifCalisma+0x524>
 8006d88:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006d8c:	483e      	ldr	r0, [pc, #248]	; (8006e88 <checkAktifCalisma+0x5bc>)
 8006d8e:	f003 f947 	bl	800a020 <HAL_GPIO_ReadPin>
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d106      	bne.n	8006da6 <checkAktifCalisma+0x4da>
 8006d98:	4b3c      	ldr	r3, [pc, #240]	; (8006e8c <checkAktifCalisma+0x5c0>)
 8006d9a:	781b      	ldrb	r3, [r3, #0]
 8006d9c:	f083 0301 	eor.w	r3, r3, #1
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d10a      	bne.n	8006dbc <checkAktifCalisma+0x4f0>
 8006da6:	2104      	movs	r1, #4
 8006da8:	483a      	ldr	r0, [pc, #232]	; (8006e94 <checkAktifCalisma+0x5c8>)
 8006daa:	f003 f939 	bl	800a020 <HAL_GPIO_ReadPin>
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b01      	cmp	r3, #1
 8006db2:	d11d      	bne.n	8006df0 <checkAktifCalisma+0x524>
 8006db4:	4b38      	ldr	r3, [pc, #224]	; (8006e98 <checkAktifCalisma+0x5cc>)
 8006db6:	781b      	ldrb	r3, [r3, #0]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d019      	beq.n	8006df0 <checkAktifCalisma+0x524>
 8006dbc:	4b30      	ldr	r3, [pc, #192]	; (8006e80 <checkAktifCalisma+0x5b4>)
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d015      	beq.n	8006df0 <checkAktifCalisma+0x524>
 8006dc4:	4b2f      	ldr	r3, [pc, #188]	; (8006e84 <checkAktifCalisma+0x5b8>)
 8006dc6:	781b      	ldrb	r3, [r3, #0]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d011      	beq.n	8006df0 <checkAktifCalisma+0x524>
 8006dcc:	4b2a      	ldr	r3, [pc, #168]	; (8006e78 <checkAktifCalisma+0x5ac>)
 8006dce:	781b      	ldrb	r3, [r3, #0]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d00d      	beq.n	8006df0 <checkAktifCalisma+0x524>
 8006dd4:	4b3a      	ldr	r3, [pc, #232]	; (8006ec0 <checkAktifCalisma+0x5f4>)
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	f083 0301 	eor.w	r3, r3, #1
 8006ddc:	b2db      	uxtb	r3, r3
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d006      	beq.n	8006df0 <checkAktifCalisma+0x524>
			timer2=millis;
 8006de2:	4b38      	ldr	r3, [pc, #224]	; (8006ec4 <checkAktifCalisma+0x5f8>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	4a38      	ldr	r2, [pc, #224]	; (8006ec8 <checkAktifCalisma+0x5fc>)
 8006de8:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 8006dea:	4b35      	ldr	r3, [pc, #212]	; (8006ec0 <checkAktifCalisma+0x5f4>)
 8006dec:	2201      	movs	r2, #1
 8006dee:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8006df0:	4b34      	ldr	r3, [pc, #208]	; (8006ec4 <checkAktifCalisma+0x5f8>)
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	4b34      	ldr	r3, [pc, #208]	; (8006ec8 <checkAktifCalisma+0x5fc>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	1ad3      	subs	r3, r2, r3
 8006dfa:	4a34      	ldr	r2, [pc, #208]	; (8006ecc <checkAktifCalisma+0x600>)
 8006dfc:	7812      	ldrb	r2, [r2, #0]
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d303      	bcc.n	8006e0a <checkAktifCalisma+0x53e>
 8006e02:	4b2f      	ldr	r3, [pc, #188]	; (8006ec0 <checkAktifCalisma+0x5f4>)
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d114      	bne.n	8006e34 <checkAktifCalisma+0x568>
 8006e0a:	4b1d      	ldr	r3, [pc, #116]	; (8006e80 <checkAktifCalisma+0x5b4>)
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	f083 0301 	eor.w	r3, r3, #1
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d10d      	bne.n	8006e34 <checkAktifCalisma+0x568>
 8006e18:	4b1a      	ldr	r3, [pc, #104]	; (8006e84 <checkAktifCalisma+0x5b8>)
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	f083 0301 	eor.w	r3, r3, #1
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d106      	bne.n	8006e34 <checkAktifCalisma+0x568>
 8006e26:	4b14      	ldr	r3, [pc, #80]	; (8006e78 <checkAktifCalisma+0x5ac>)
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	f083 0301 	eor.w	r3, r3, #1
 8006e2e:	b2db      	uxtb	r3, r3
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d00a      	beq.n	8006e4a <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006e34:	2200      	movs	r2, #0
 8006e36:	2102      	movs	r1, #2
 8006e38:	4813      	ldr	r0, [pc, #76]	; (8006e88 <checkAktifCalisma+0x5bc>)
 8006e3a:	f003 f908 	bl	800a04e <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 8006e3e:	4b17      	ldr	r3, [pc, #92]	; (8006e9c <checkAktifCalisma+0x5d0>)
 8006e40:	2200      	movs	r2, #0
 8006e42:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 8006e44:	4b1e      	ldr	r3, [pc, #120]	; (8006ec0 <checkAktifCalisma+0x5f4>)
 8006e46:	2200      	movs	r2, #0
 8006e48:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 8006e4a:	4b14      	ldr	r3, [pc, #80]	; (8006e9c <checkAktifCalisma+0x5d0>)
 8006e4c:	781b      	ldrb	r3, [r3, #0]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d040      	beq.n	8006ed4 <checkAktifCalisma+0x608>
 8006e52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006e56:	480f      	ldr	r0, [pc, #60]	; (8006e94 <checkAktifCalisma+0x5c8>)
 8006e58:	f003 f8e2 	bl	800a020 <HAL_GPIO_ReadPin>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d138      	bne.n	8006ed4 <checkAktifCalisma+0x608>
 8006e62:	4b1b      	ldr	r3, [pc, #108]	; (8006ed0 <checkAktifCalisma+0x604>)
 8006e64:	781b      	ldrb	r3, [r3, #0]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d034      	beq.n	8006ed4 <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8006e6a:	2201      	movs	r2, #1
 8006e6c:	2101      	movs	r1, #1
 8006e6e:	4806      	ldr	r0, [pc, #24]	; (8006e88 <checkAktifCalisma+0x5bc>)
 8006e70:	f003 f8ed 	bl	800a04e <HAL_GPIO_WritePin>
 8006e74:	e033      	b.n	8006ede <checkAktifCalisma+0x612>
 8006e76:	bf00      	nop
 8006e78:	20000cf4 	.word	0x20000cf4
 8006e7c:	20000cba 	.word	0x20000cba
 8006e80:	20000cef 	.word	0x20000cef
 8006e84:	20000cf0 	.word	0x20000cf0
 8006e88:	40010c00 	.word	0x40010c00
 8006e8c:	20000cda 	.word	0x20000cda
 8006e90:	20000cee 	.word	0x20000cee
 8006e94:	40011000 	.word	0x40011000
 8006e98:	20000ca3 	.word	0x20000ca3
 8006e9c:	20000cd5 	.word	0x20000cd5
 8006ea0:	20000cd2 	.word	0x20000cd2
 8006ea4:	20000cd6 	.word	0x20000cd6
 8006ea8:	20000cd3 	.word	0x20000cd3
 8006eac:	20000cd4 	.word	0x20000cd4
 8006eb0:	20000cd7 	.word	0x20000cd7
 8006eb4:	20000cd8 	.word	0x20000cd8
 8006eb8:	20000cdd 	.word	0x20000cdd
 8006ebc:	20000cfe 	.word	0x20000cfe
 8006ec0:	20000ccd 	.word	0x20000ccd
 8006ec4:	20000bd4 	.word	0x20000bd4
 8006ec8:	20000be0 	.word	0x20000be0
 8006ecc:	20000cb2 	.word	0x20000cb2
 8006ed0:	20000ca2 	.word	0x20000ca2
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006ed4:	2200      	movs	r2, #0
 8006ed6:	2101      	movs	r1, #1
 8006ed8:	4836      	ldr	r0, [pc, #216]	; (8006fb4 <checkAktifCalisma+0x6e8>)
 8006eda:	f003 f8b8 	bl	800a04e <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 8006ede:	4b36      	ldr	r3, [pc, #216]	; (8006fb8 <checkAktifCalisma+0x6ec>)
 8006ee0:	781b      	ldrb	r3, [r3, #0]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	f040 8080 	bne.w	8006fe8 <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8006ee8:	4b34      	ldr	r3, [pc, #208]	; (8006fbc <checkAktifCalisma+0x6f0>)
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	2b01      	cmp	r3, #1
 8006eee:	d003      	beq.n	8006ef8 <checkAktifCalisma+0x62c>
 8006ef0:	4b32      	ldr	r3, [pc, #200]	; (8006fbc <checkAktifCalisma+0x6f0>)
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	2b02      	cmp	r3, #2
 8006ef6:	d177      	bne.n	8006fe8 <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 8006ef8:	4b31      	ldr	r3, [pc, #196]	; (8006fc0 <checkAktifCalisma+0x6f4>)
 8006efa:	781b      	ldrb	r3, [r3, #0]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d073      	beq.n	8006fe8 <checkAktifCalisma+0x71c>
 8006f00:	4b30      	ldr	r3, [pc, #192]	; (8006fc4 <checkAktifCalisma+0x6f8>)
 8006f02:	781b      	ldrb	r3, [r3, #0]
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d06f      	beq.n	8006fe8 <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8006f08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006f0c:	4829      	ldr	r0, [pc, #164]	; (8006fb4 <checkAktifCalisma+0x6e8>)
 8006f0e:	f003 f887 	bl	800a020 <HAL_GPIO_ReadPin>
 8006f12:	4603      	mov	r3, r0
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d167      	bne.n	8006fe8 <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8006f18:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006f1c:	482a      	ldr	r0, [pc, #168]	; (8006fc8 <checkAktifCalisma+0x6fc>)
 8006f1e:	f003 f87f 	bl	800a020 <HAL_GPIO_ReadPin>
 8006f22:	4603      	mov	r3, r0
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d003      	beq.n	8006f30 <checkAktifCalisma+0x664>
 8006f28:	4b28      	ldr	r3, [pc, #160]	; (8006fcc <checkAktifCalisma+0x700>)
 8006f2a:	781b      	ldrb	r3, [r3, #0]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d15b      	bne.n	8006fe8 <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8006f30:	2140      	movs	r1, #64	; 0x40
 8006f32:	4825      	ldr	r0, [pc, #148]	; (8006fc8 <checkAktifCalisma+0x6fc>)
 8006f34:	f003 f874 	bl	800a020 <HAL_GPIO_ReadPin>
 8006f38:	4603      	mov	r3, r0
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d10f      	bne.n	8006f5e <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8006f3e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006f42:	481c      	ldr	r0, [pc, #112]	; (8006fb4 <checkAktifCalisma+0x6e8>)
 8006f44:	f003 f86c 	bl	800a020 <HAL_GPIO_ReadPin>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d107      	bne.n	8006f5e <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8006f4e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006f52:	4818      	ldr	r0, [pc, #96]	; (8006fb4 <checkAktifCalisma+0x6e8>)
 8006f54:	f003 f864 	bl	800a020 <HAL_GPIO_ReadPin>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b01      	cmp	r3, #1
 8006f5c:	d003      	beq.n	8006f66 <checkAktifCalisma+0x69a>
 8006f5e:	4b1c      	ldr	r3, [pc, #112]	; (8006fd0 <checkAktifCalisma+0x704>)
 8006f60:	781b      	ldrb	r3, [r3, #0]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d040      	beq.n	8006fe8 <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 8006f66:	4b1b      	ldr	r3, [pc, #108]	; (8006fd4 <checkAktifCalisma+0x708>)
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	f083 0301 	eor.w	r3, r3, #1
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d039      	beq.n	8006fe8 <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 8006f74:	4b18      	ldr	r3, [pc, #96]	; (8006fd8 <checkAktifCalisma+0x70c>)
 8006f76:	781b      	ldrb	r3, [r3, #0]
 8006f78:	f083 0301 	eor.w	r3, r3, #1
 8006f7c:	b2db      	uxtb	r3, r3
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d032      	beq.n	8006fe8 <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 8006f82:	4b16      	ldr	r3, [pc, #88]	; (8006fdc <checkAktifCalisma+0x710>)
 8006f84:	781b      	ldrb	r3, [r3, #0]
 8006f86:	f083 0301 	eor.w	r3, r3, #1
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d02b      	beq.n	8006fe8 <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 8006f90:	4b13      	ldr	r3, [pc, #76]	; (8006fe0 <checkAktifCalisma+0x714>)
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	f083 0301 	eor.w	r3, r3, #1
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d024      	beq.n	8006fe8 <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 8006f9e:	4b11      	ldr	r3, [pc, #68]	; (8006fe4 <checkAktifCalisma+0x718>)
 8006fa0:	781b      	ldrb	r3, [r3, #0]
 8006fa2:	f083 0301 	eor.w	r3, r3, #1
 8006fa6:	b2db      	uxtb	r3, r3
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d01d      	beq.n	8006fe8 <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 8006fac:	4b08      	ldr	r3, [pc, #32]	; (8006fd0 <checkAktifCalisma+0x704>)
 8006fae:	2201      	movs	r2, #1
 8006fb0:	701a      	strb	r2, [r3, #0]
 8006fb2:	e01c      	b.n	8006fee <checkAktifCalisma+0x722>
 8006fb4:	40010c00 	.word	0x40010c00
 8006fb8:	20000cba 	.word	0x20000cba
 8006fbc:	20000cac 	.word	0x20000cac
 8006fc0:	20000cef 	.word	0x20000cef
 8006fc4:	20000cf0 	.word	0x20000cf0
 8006fc8:	40011000 	.word	0x40011000
 8006fcc:	20000cad 	.word	0x20000cad
 8006fd0:	20000cd3 	.word	0x20000cd3
 8006fd4:	20000cd2 	.word	0x20000cd2
 8006fd8:	20000cd6 	.word	0x20000cd6
 8006fdc:	20000cd5 	.word	0x20000cd5
 8006fe0:	20000cd4 	.word	0x20000cd4
 8006fe4:	20000cd8 	.word	0x20000cd8
		} else {
			devmotoryukaricalisiyor=0;
 8006fe8:	4b64      	ldr	r3, [pc, #400]	; (800717c <checkAktifCalisma+0x8b0>)
 8006fea:	2200      	movs	r2, #0
 8006fec:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 8006fee:	4b63      	ldr	r3, [pc, #396]	; (800717c <checkAktifCalisma+0x8b0>)
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d007      	beq.n	8007006 <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	2120      	movs	r1, #32
 8006ffa:	4861      	ldr	r0, [pc, #388]	; (8007180 <checkAktifCalisma+0x8b4>)
 8006ffc:	f003 f827 	bl	800a04e <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 8007000:	4b60      	ldr	r3, [pc, #384]	; (8007184 <checkAktifCalisma+0x8b8>)
 8007002:	2201      	movs	r2, #1
 8007004:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8007006:	4b5f      	ldr	r3, [pc, #380]	; (8007184 <checkAktifCalisma+0x8b8>)
 8007008:	781b      	ldrb	r3, [r3, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d025      	beq.n	800705a <checkAktifCalisma+0x78e>
 800700e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007012:	485d      	ldr	r0, [pc, #372]	; (8007188 <checkAktifCalisma+0x8bc>)
 8007014:	f003 f804 	bl	800a020 <HAL_GPIO_ReadPin>
 8007018:	4603      	mov	r3, r0
 800701a:	2b01      	cmp	r3, #1
 800701c:	d007      	beq.n	800702e <checkAktifCalisma+0x762>
 800701e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007022:	4857      	ldr	r0, [pc, #348]	; (8007180 <checkAktifCalisma+0x8b4>)
 8007024:	f002 fffc 	bl	800a020 <HAL_GPIO_ReadPin>
 8007028:	4603      	mov	r3, r0
 800702a:	2b01      	cmp	r3, #1
 800702c:	d115      	bne.n	800705a <checkAktifCalisma+0x78e>
 800702e:	4b57      	ldr	r3, [pc, #348]	; (800718c <checkAktifCalisma+0x8c0>)
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d011      	beq.n	800705a <checkAktifCalisma+0x78e>
 8007036:	4b56      	ldr	r3, [pc, #344]	; (8007190 <checkAktifCalisma+0x8c4>)
 8007038:	781b      	ldrb	r3, [r3, #0]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d00d      	beq.n	800705a <checkAktifCalisma+0x78e>
 800703e:	4b55      	ldr	r3, [pc, #340]	; (8007194 <checkAktifCalisma+0x8c8>)
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	f083 0301 	eor.w	r3, r3, #1
 8007046:	b2db      	uxtb	r3, r3
 8007048:	2b00      	cmp	r3, #0
 800704a:	d006      	beq.n	800705a <checkAktifCalisma+0x78e>
			timer2=millis;
 800704c:	4b52      	ldr	r3, [pc, #328]	; (8007198 <checkAktifCalisma+0x8cc>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a52      	ldr	r2, [pc, #328]	; (800719c <checkAktifCalisma+0x8d0>)
 8007052:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 8007054:	4b4f      	ldr	r3, [pc, #316]	; (8007194 <checkAktifCalisma+0x8c8>)
 8007056:	2201      	movs	r2, #1
 8007058:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 800705a:	4b4f      	ldr	r3, [pc, #316]	; (8007198 <checkAktifCalisma+0x8cc>)
 800705c:	681a      	ldr	r2, [r3, #0]
 800705e:	4b4f      	ldr	r3, [pc, #316]	; (800719c <checkAktifCalisma+0x8d0>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	1ad3      	subs	r3, r2, r3
 8007064:	4a4e      	ldr	r2, [pc, #312]	; (80071a0 <checkAktifCalisma+0x8d4>)
 8007066:	7812      	ldrb	r2, [r2, #0]
 8007068:	4293      	cmp	r3, r2
 800706a:	d303      	bcc.n	8007074 <checkAktifCalisma+0x7a8>
 800706c:	4b49      	ldr	r3, [pc, #292]	; (8007194 <checkAktifCalisma+0x8c8>)
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d10d      	bne.n	8007090 <checkAktifCalisma+0x7c4>
 8007074:	4b45      	ldr	r3, [pc, #276]	; (800718c <checkAktifCalisma+0x8c0>)
 8007076:	781b      	ldrb	r3, [r3, #0]
 8007078:	f083 0301 	eor.w	r3, r3, #1
 800707c:	b2db      	uxtb	r3, r3
 800707e:	2b00      	cmp	r3, #0
 8007080:	d106      	bne.n	8007090 <checkAktifCalisma+0x7c4>
 8007082:	4b43      	ldr	r3, [pc, #268]	; (8007190 <checkAktifCalisma+0x8c4>)
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	f083 0301 	eor.w	r3, r3, #1
 800708a:	b2db      	uxtb	r3, r3
 800708c:	2b00      	cmp	r3, #0
 800708e:	d00a      	beq.n	80070a6 <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007090:	2200      	movs	r2, #0
 8007092:	2120      	movs	r1, #32
 8007094:	483a      	ldr	r0, [pc, #232]	; (8007180 <checkAktifCalisma+0x8b4>)
 8007096:	f002 ffda 	bl	800a04e <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 800709a:	4b3a      	ldr	r3, [pc, #232]	; (8007184 <checkAktifCalisma+0x8b8>)
 800709c:	2200      	movs	r2, #0
 800709e:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 80070a0:	4b3c      	ldr	r3, [pc, #240]	; (8007194 <checkAktifCalisma+0x8c8>)
 80070a2:	2200      	movs	r2, #0
 80070a4:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 80070a6:	4b3f      	ldr	r3, [pc, #252]	; (80071a4 <checkAktifCalisma+0x8d8>)
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	f040 8088 	bne.w	80071c0 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 80070b0:	4b3d      	ldr	r3, [pc, #244]	; (80071a8 <checkAktifCalisma+0x8dc>)
 80070b2:	781b      	ldrb	r3, [r3, #0]
 80070b4:	2b01      	cmp	r3, #1
 80070b6:	d003      	beq.n	80070c0 <checkAktifCalisma+0x7f4>
 80070b8:	4b3b      	ldr	r3, [pc, #236]	; (80071a8 <checkAktifCalisma+0x8dc>)
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	2b02      	cmp	r3, #2
 80070be:	d17f      	bne.n	80071c0 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 80070c0:	4b32      	ldr	r3, [pc, #200]	; (800718c <checkAktifCalisma+0x8c0>)
 80070c2:	781b      	ldrb	r3, [r3, #0]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d07b      	beq.n	80071c0 <checkAktifCalisma+0x8f4>
 80070c8:	4b31      	ldr	r3, [pc, #196]	; (8007190 <checkAktifCalisma+0x8c4>)
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d077      	beq.n	80071c0 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 80070d0:	2140      	movs	r1, #64	; 0x40
 80070d2:	482b      	ldr	r0, [pc, #172]	; (8007180 <checkAktifCalisma+0x8b4>)
 80070d4:	f002 ffa4 	bl	800a020 <HAL_GPIO_ReadPin>
 80070d8:	4603      	mov	r3, r0
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d170      	bne.n	80071c0 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 80070de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80070e2:	4827      	ldr	r0, [pc, #156]	; (8007180 <checkAktifCalisma+0x8b4>)
 80070e4:	f002 ff9c 	bl	800a020 <HAL_GPIO_ReadPin>
 80070e8:	4603      	mov	r3, r0
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d003      	beq.n	80070f6 <checkAktifCalisma+0x82a>
 80070ee:	4b2f      	ldr	r3, [pc, #188]	; (80071ac <checkAktifCalisma+0x8e0>)
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d164      	bne.n	80071c0 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80070f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80070fa:	4823      	ldr	r0, [pc, #140]	; (8007188 <checkAktifCalisma+0x8bc>)
 80070fc:	f002 ff90 	bl	800a020 <HAL_GPIO_ReadPin>
 8007100:	4603      	mov	r3, r0
 8007102:	2b01      	cmp	r3, #1
 8007104:	d10f      	bne.n	8007126 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8007106:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800710a:	481f      	ldr	r0, [pc, #124]	; (8007188 <checkAktifCalisma+0x8bc>)
 800710c:	f002 ff88 	bl	800a020 <HAL_GPIO_ReadPin>
 8007110:	4603      	mov	r3, r0
 8007112:	2b01      	cmp	r3, #1
 8007114:	d107      	bne.n	8007126 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8007116:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800711a:	481b      	ldr	r0, [pc, #108]	; (8007188 <checkAktifCalisma+0x8bc>)
 800711c:	f002 ff80 	bl	800a020 <HAL_GPIO_ReadPin>
 8007120:	4603      	mov	r3, r0
 8007122:	2b01      	cmp	r3, #1
 8007124:	d003      	beq.n	800712e <checkAktifCalisma+0x862>
 8007126:	4b22      	ldr	r3, [pc, #136]	; (80071b0 <checkAktifCalisma+0x8e4>)
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d048      	beq.n	80071c0 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 800712e:	4b21      	ldr	r3, [pc, #132]	; (80071b4 <checkAktifCalisma+0x8e8>)
 8007130:	781b      	ldrb	r3, [r3, #0]
 8007132:	f083 0301 	eor.w	r3, r3, #1
 8007136:	b2db      	uxtb	r3, r3
 8007138:	2b00      	cmp	r3, #0
 800713a:	d041      	beq.n	80071c0 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 800713c:	4b1e      	ldr	r3, [pc, #120]	; (80071b8 <checkAktifCalisma+0x8ec>)
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	f083 0301 	eor.w	r3, r3, #1
 8007144:	b2db      	uxtb	r3, r3
 8007146:	2b00      	cmp	r3, #0
 8007148:	d03a      	beq.n	80071c0 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 800714a:	4b1c      	ldr	r3, [pc, #112]	; (80071bc <checkAktifCalisma+0x8f0>)
 800714c:	781b      	ldrb	r3, [r3, #0]
 800714e:	f083 0301 	eor.w	r3, r3, #1
 8007152:	b2db      	uxtb	r3, r3
 8007154:	2b00      	cmp	r3, #0
 8007156:	d033      	beq.n	80071c0 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 8007158:	4b0a      	ldr	r3, [pc, #40]	; (8007184 <checkAktifCalisma+0x8b8>)
 800715a:	781b      	ldrb	r3, [r3, #0]
 800715c:	f083 0301 	eor.w	r3, r3, #1
 8007160:	b2db      	uxtb	r3, r3
 8007162:	2b00      	cmp	r3, #0
 8007164:	d02c      	beq.n	80071c0 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 8007166:	4b05      	ldr	r3, [pc, #20]	; (800717c <checkAktifCalisma+0x8b0>)
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	f083 0301 	eor.w	r3, r3, #1
 800716e:	b2db      	uxtb	r3, r3
 8007170:	2b00      	cmp	r3, #0
 8007172:	d025      	beq.n	80071c0 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 8007174:	4b0e      	ldr	r3, [pc, #56]	; (80071b0 <checkAktifCalisma+0x8e4>)
 8007176:	2201      	movs	r2, #1
 8007178:	701a      	strb	r2, [r3, #0]
 800717a:	e024      	b.n	80071c6 <checkAktifCalisma+0x8fa>
 800717c:	20000cd3 	.word	0x20000cd3
 8007180:	40011000 	.word	0x40011000
 8007184:	20000cd7 	.word	0x20000cd7
 8007188:	40010c00 	.word	0x40010c00
 800718c:	20000cef 	.word	0x20000cef
 8007190:	20000cf0 	.word	0x20000cf0
 8007194:	20000ccf 	.word	0x20000ccf
 8007198:	20000bd4 	.word	0x20000bd4
 800719c:	20000be0 	.word	0x20000be0
 80071a0:	20000cb3 	.word	0x20000cb3
 80071a4:	20000cba 	.word	0x20000cba
 80071a8:	20000cac 	.word	0x20000cac
 80071ac:	20000cae 	.word	0x20000cae
 80071b0:	20000cd4 	.word	0x20000cd4
 80071b4:	20000cd2 	.word	0x20000cd2
 80071b8:	20000cd6 	.word	0x20000cd6
 80071bc:	20000cd5 	.word	0x20000cd5
		} else {
			devmotorasagicalisiyor=0;
 80071c0:	4b96      	ldr	r3, [pc, #600]	; (800741c <checkAktifCalisma+0xb50>)
 80071c2:	2200      	movs	r2, #0
 80071c4:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 80071c6:	4b95      	ldr	r3, [pc, #596]	; (800741c <checkAktifCalisma+0xb50>)
 80071c8:	781b      	ldrb	r3, [r3, #0]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d007      	beq.n	80071de <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 80071ce:	2201      	movs	r2, #1
 80071d0:	2110      	movs	r1, #16
 80071d2:	4893      	ldr	r0, [pc, #588]	; (8007420 <checkAktifCalisma+0xb54>)
 80071d4:	f002 ff3b 	bl	800a04e <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 80071d8:	4b92      	ldr	r3, [pc, #584]	; (8007424 <checkAktifCalisma+0xb58>)
 80071da:	2201      	movs	r2, #1
 80071dc:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 80071de:	4b91      	ldr	r3, [pc, #580]	; (8007424 <checkAktifCalisma+0xb58>)
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d024      	beq.n	8007230 <checkAktifCalisma+0x964>
 80071e6:	2140      	movs	r1, #64	; 0x40
 80071e8:	488d      	ldr	r0, [pc, #564]	; (8007420 <checkAktifCalisma+0xb54>)
 80071ea:	f002 ff19 	bl	800a020 <HAL_GPIO_ReadPin>
 80071ee:	4603      	mov	r3, r0
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d007      	beq.n	8007204 <checkAktifCalisma+0x938>
 80071f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80071f8:	4889      	ldr	r0, [pc, #548]	; (8007420 <checkAktifCalisma+0xb54>)
 80071fa:	f002 ff11 	bl	800a020 <HAL_GPIO_ReadPin>
 80071fe:	4603      	mov	r3, r0
 8007200:	2b01      	cmp	r3, #1
 8007202:	d115      	bne.n	8007230 <checkAktifCalisma+0x964>
 8007204:	4b88      	ldr	r3, [pc, #544]	; (8007428 <checkAktifCalisma+0xb5c>)
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d011      	beq.n	8007230 <checkAktifCalisma+0x964>
 800720c:	4b87      	ldr	r3, [pc, #540]	; (800742c <checkAktifCalisma+0xb60>)
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d00d      	beq.n	8007230 <checkAktifCalisma+0x964>
 8007214:	4b86      	ldr	r3, [pc, #536]	; (8007430 <checkAktifCalisma+0xb64>)
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	f083 0301 	eor.w	r3, r3, #1
 800721c:	b2db      	uxtb	r3, r3
 800721e:	2b00      	cmp	r3, #0
 8007220:	d006      	beq.n	8007230 <checkAktifCalisma+0x964>
			timer2=millis;
 8007222:	4b84      	ldr	r3, [pc, #528]	; (8007434 <checkAktifCalisma+0xb68>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a84      	ldr	r2, [pc, #528]	; (8007438 <checkAktifCalisma+0xb6c>)
 8007228:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 800722a:	4b81      	ldr	r3, [pc, #516]	; (8007430 <checkAktifCalisma+0xb64>)
 800722c:	2201      	movs	r2, #1
 800722e:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8007230:	4b80      	ldr	r3, [pc, #512]	; (8007434 <checkAktifCalisma+0xb68>)
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	4b80      	ldr	r3, [pc, #512]	; (8007438 <checkAktifCalisma+0xb6c>)
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	1ad3      	subs	r3, r2, r3
 800723a:	4a80      	ldr	r2, [pc, #512]	; (800743c <checkAktifCalisma+0xb70>)
 800723c:	7812      	ldrb	r2, [r2, #0]
 800723e:	4293      	cmp	r3, r2
 8007240:	d303      	bcc.n	800724a <checkAktifCalisma+0x97e>
 8007242:	4b7b      	ldr	r3, [pc, #492]	; (8007430 <checkAktifCalisma+0xb64>)
 8007244:	781b      	ldrb	r3, [r3, #0]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d10d      	bne.n	8007266 <checkAktifCalisma+0x99a>
 800724a:	4b77      	ldr	r3, [pc, #476]	; (8007428 <checkAktifCalisma+0xb5c>)
 800724c:	781b      	ldrb	r3, [r3, #0]
 800724e:	f083 0301 	eor.w	r3, r3, #1
 8007252:	b2db      	uxtb	r3, r3
 8007254:	2b00      	cmp	r3, #0
 8007256:	d106      	bne.n	8007266 <checkAktifCalisma+0x99a>
 8007258:	4b74      	ldr	r3, [pc, #464]	; (800742c <checkAktifCalisma+0xb60>)
 800725a:	781b      	ldrb	r3, [r3, #0]
 800725c:	f083 0301 	eor.w	r3, r3, #1
 8007260:	b2db      	uxtb	r3, r3
 8007262:	2b00      	cmp	r3, #0
 8007264:	d00a      	beq.n	800727c <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007266:	2200      	movs	r2, #0
 8007268:	2110      	movs	r1, #16
 800726a:	486d      	ldr	r0, [pc, #436]	; (8007420 <checkAktifCalisma+0xb54>)
 800726c:	f002 feef 	bl	800a04e <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 8007270:	4b6c      	ldr	r3, [pc, #432]	; (8007424 <checkAktifCalisma+0xb58>)
 8007272:	2200      	movs	r2, #0
 8007274:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 8007276:	4b6e      	ldr	r3, [pc, #440]	; (8007430 <checkAktifCalisma+0xb64>)
 8007278:	2200      	movs	r2, #0
 800727a:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 800727c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007280:	486f      	ldr	r0, [pc, #444]	; (8007440 <checkAktifCalisma+0xb74>)
 8007282:	f002 fecd 	bl	800a020 <HAL_GPIO_ReadPin>
 8007286:	4603      	mov	r3, r0
 8007288:	2b00      	cmp	r3, #0
 800728a:	d120      	bne.n	80072ce <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 800728c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007290:	486b      	ldr	r0, [pc, #428]	; (8007440 <checkAktifCalisma+0xb74>)
 8007292:	f002 fec5 	bl	800a020 <HAL_GPIO_ReadPin>
 8007296:	4603      	mov	r3, r0
 8007298:	2b00      	cmp	r3, #0
 800729a:	d118      	bne.n	80072ce <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 800729c:	2104      	movs	r1, #4
 800729e:	4868      	ldr	r0, [pc, #416]	; (8007440 <checkAktifCalisma+0xb74>)
 80072a0:	f002 febe 	bl	800a020 <HAL_GPIO_ReadPin>
 80072a4:	4603      	mov	r3, r0
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d111      	bne.n	80072ce <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 80072aa:	2102      	movs	r1, #2
 80072ac:	4864      	ldr	r0, [pc, #400]	; (8007440 <checkAktifCalisma+0xb74>)
 80072ae:	f002 feb7 	bl	800a020 <HAL_GPIO_ReadPin>
 80072b2:	4603      	mov	r3, r0
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d10a      	bne.n	80072ce <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 80072b8:	2101      	movs	r1, #1
 80072ba:	4861      	ldr	r0, [pc, #388]	; (8007440 <checkAktifCalisma+0xb74>)
 80072bc:	f002 feb0 	bl	800a020 <HAL_GPIO_ReadPin>
 80072c0:	4603      	mov	r3, r0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d103      	bne.n	80072ce <checkAktifCalisma+0xa02>
			makineStop=1;
 80072c6:	4b5f      	ldr	r3, [pc, #380]	; (8007444 <checkAktifCalisma+0xb78>)
 80072c8:	2201      	movs	r2, #1
 80072ca:	701a      	strb	r2, [r3, #0]
 80072cc:	e002      	b.n	80072d4 <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 80072ce:	4b5d      	ldr	r3, [pc, #372]	; (8007444 <checkAktifCalisma+0xb78>)
 80072d0:	2200      	movs	r2, #0
 80072d2:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80072d4:	4b5c      	ldr	r3, [pc, #368]	; (8007448 <checkAktifCalisma+0xb7c>)
 80072d6:	781b      	ldrb	r3, [r3, #0]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d144      	bne.n	8007366 <checkAktifCalisma+0xa9a>
 80072dc:	4b5b      	ldr	r3, [pc, #364]	; (800744c <checkAktifCalisma+0xb80>)
 80072de:	781b      	ldrb	r3, [r3, #0]
 80072e0:	2b01      	cmp	r3, #1
 80072e2:	d003      	beq.n	80072ec <checkAktifCalisma+0xa20>
 80072e4:	4b59      	ldr	r3, [pc, #356]	; (800744c <checkAktifCalisma+0xb80>)
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	2b03      	cmp	r3, #3
 80072ea:	d13c      	bne.n	8007366 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 80072ec:	2180      	movs	r1, #128	; 0x80
 80072ee:	484c      	ldr	r0, [pc, #304]	; (8007420 <checkAktifCalisma+0xb54>)
 80072f0:	f002 fe96 	bl	800a020 <HAL_GPIO_ReadPin>
 80072f4:	4603      	mov	r3, r0
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d103      	bne.n	8007302 <checkAktifCalisma+0xa36>
 80072fa:	4b55      	ldr	r3, [pc, #340]	; (8007450 <checkAktifCalisma+0xb84>)
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d00b      	beq.n	800731a <checkAktifCalisma+0xa4e>
 8007302:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007306:	484e      	ldr	r0, [pc, #312]	; (8007440 <checkAktifCalisma+0xb74>)
 8007308:	f002 fe8a 	bl	800a020 <HAL_GPIO_ReadPin>
 800730c:	4603      	mov	r3, r0
 800730e:	2b00      	cmp	r3, #0
 8007310:	d129      	bne.n	8007366 <checkAktifCalisma+0xa9a>
 8007312:	4b4f      	ldr	r3, [pc, #316]	; (8007450 <checkAktifCalisma+0xb84>)
 8007314:	781b      	ldrb	r3, [r3, #0]
 8007316:	2b01      	cmp	r3, #1
 8007318:	d125      	bne.n	8007366 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800731a:	2104      	movs	r1, #4
 800731c:	4840      	ldr	r0, [pc, #256]	; (8007420 <checkAktifCalisma+0xb54>)
 800731e:	f002 fe7f 	bl	800a020 <HAL_GPIO_ReadPin>
 8007322:	4603      	mov	r3, r0
 8007324:	2b01      	cmp	r3, #1
 8007326:	d003      	beq.n	8007330 <checkAktifCalisma+0xa64>
 8007328:	4b4a      	ldr	r3, [pc, #296]	; (8007454 <checkAktifCalisma+0xb88>)
 800732a:	781b      	ldrb	r3, [r3, #0]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d11a      	bne.n	8007366 <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8007330:	2102      	movs	r1, #2
 8007332:	483b      	ldr	r0, [pc, #236]	; (8007420 <checkAktifCalisma+0xb54>)
 8007334:	f002 fe74 	bl	800a020 <HAL_GPIO_ReadPin>
 8007338:	4603      	mov	r3, r0
 800733a:	2b00      	cmp	r3, #0
 800733c:	d113      	bne.n	8007366 <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 800733e:	4b46      	ldr	r3, [pc, #280]	; (8007458 <checkAktifCalisma+0xb8c>)
 8007340:	781b      	ldrb	r3, [r3, #0]
 8007342:	f083 0301 	eor.w	r3, r3, #1
 8007346:	b2db      	uxtb	r3, r3
 8007348:	2b00      	cmp	r3, #0
 800734a:	d00c      	beq.n	8007366 <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 800734c:	4b3d      	ldr	r3, [pc, #244]	; (8007444 <checkAktifCalisma+0xb78>)
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d008      	beq.n	8007366 <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 8007354:	4b41      	ldr	r3, [pc, #260]	; (800745c <checkAktifCalisma+0xb90>)
 8007356:	2201      	movs	r2, #1
 8007358:	701a      	strb	r2, [r3, #0]
			timer = millis;
 800735a:	4b36      	ldr	r3, [pc, #216]	; (8007434 <checkAktifCalisma+0xb68>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	4a40      	ldr	r2, [pc, #256]	; (8007460 <checkAktifCalisma+0xb94>)
 8007360:	6013      	str	r3, [r2, #0]
			bekle();
 8007362:	f7ff f87d 	bl	8006460 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8007366:	4b33      	ldr	r3, [pc, #204]	; (8007434 <checkAktifCalisma+0xb68>)
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	4b3d      	ldr	r3, [pc, #244]	; (8007460 <checkAktifCalisma+0xb94>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	1ad3      	subs	r3, r2, r3
 8007370:	4a3c      	ldr	r2, [pc, #240]	; (8007464 <checkAktifCalisma+0xb98>)
 8007372:	7812      	ldrb	r2, [r2, #0]
 8007374:	4293      	cmp	r3, r2
 8007376:	d211      	bcs.n	800739c <checkAktifCalisma+0xad0>
 8007378:	2104      	movs	r1, #4
 800737a:	4829      	ldr	r0, [pc, #164]	; (8007420 <checkAktifCalisma+0xb54>)
 800737c:	f002 fe50 	bl	800a020 <HAL_GPIO_ReadPin>
 8007380:	4603      	mov	r3, r0
 8007382:	2b00      	cmp	r3, #0
 8007384:	d00a      	beq.n	800739c <checkAktifCalisma+0xad0>
 8007386:	4b33      	ldr	r3, [pc, #204]	; (8007454 <checkAktifCalisma+0xb88>)
 8007388:	781b      	ldrb	r3, [r3, #0]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d006      	beq.n	800739c <checkAktifCalisma+0xad0>
 800738e:	4b2d      	ldr	r3, [pc, #180]	; (8007444 <checkAktifCalisma+0xb78>)
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	f083 0301 	eor.w	r3, r3, #1
 8007396:	b2db      	uxtb	r3, r3
 8007398:	2b00      	cmp	r3, #0
 800739a:	d002      	beq.n	80073a2 <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 800739c:	4b2f      	ldr	r3, [pc, #188]	; (800745c <checkAktifCalisma+0xb90>)
 800739e:	2200      	movs	r2, #0
 80073a0:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80073a2:	4b29      	ldr	r3, [pc, #164]	; (8007448 <checkAktifCalisma+0xb7c>)
 80073a4:	781b      	ldrb	r3, [r3, #0]
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d160      	bne.n	800746c <checkAktifCalisma+0xba0>
 80073aa:	4b28      	ldr	r3, [pc, #160]	; (800744c <checkAktifCalisma+0xb80>)
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	2b01      	cmp	r3, #1
 80073b0:	d003      	beq.n	80073ba <checkAktifCalisma+0xaee>
 80073b2:	4b26      	ldr	r3, [pc, #152]	; (800744c <checkAktifCalisma+0xb80>)
 80073b4:	781b      	ldrb	r3, [r3, #0]
 80073b6:	2b03      	cmp	r3, #3
 80073b8:	d158      	bne.n	800746c <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 80073ba:	2104      	movs	r1, #4
 80073bc:	4818      	ldr	r0, [pc, #96]	; (8007420 <checkAktifCalisma+0xb54>)
 80073be:	f002 fe2f 	bl	800a020 <HAL_GPIO_ReadPin>
 80073c2:	4603      	mov	r3, r0
 80073c4:	2b01      	cmp	r3, #1
 80073c6:	d003      	beq.n	80073d0 <checkAktifCalisma+0xb04>
 80073c8:	4b22      	ldr	r3, [pc, #136]	; (8007454 <checkAktifCalisma+0xb88>)
 80073ca:	781b      	ldrb	r3, [r3, #0]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d14d      	bne.n	800746c <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80073d0:	2102      	movs	r1, #2
 80073d2:	4813      	ldr	r0, [pc, #76]	; (8007420 <checkAktifCalisma+0xb54>)
 80073d4:	f002 fe24 	bl	800a020 <HAL_GPIO_ReadPin>
 80073d8:	4603      	mov	r3, r0
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d146      	bne.n	800746c <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 80073de:	2180      	movs	r1, #128	; 0x80
 80073e0:	480f      	ldr	r0, [pc, #60]	; (8007420 <checkAktifCalisma+0xb54>)
 80073e2:	f002 fe1d 	bl	800a020 <HAL_GPIO_ReadPin>
 80073e6:	4603      	mov	r3, r0
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d103      	bne.n	80073f4 <checkAktifCalisma+0xb28>
 80073ec:	4b18      	ldr	r3, [pc, #96]	; (8007450 <checkAktifCalisma+0xb84>)
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d00b      	beq.n	800740c <checkAktifCalisma+0xb40>
 80073f4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80073f8:	4811      	ldr	r0, [pc, #68]	; (8007440 <checkAktifCalisma+0xb74>)
 80073fa:	f002 fe11 	bl	800a020 <HAL_GPIO_ReadPin>
 80073fe:	4603      	mov	r3, r0
 8007400:	2b00      	cmp	r3, #0
 8007402:	d133      	bne.n	800746c <checkAktifCalisma+0xba0>
 8007404:	4b12      	ldr	r3, [pc, #72]	; (8007450 <checkAktifCalisma+0xb84>)
 8007406:	781b      	ldrb	r3, [r3, #0]
 8007408:	2b01      	cmp	r3, #1
 800740a:	d12f      	bne.n	800746c <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 800740c:	4b0d      	ldr	r3, [pc, #52]	; (8007444 <checkAktifCalisma+0xb78>)
 800740e:	781b      	ldrb	r3, [r3, #0]
 8007410:	2b00      	cmp	r3, #0
 8007412:	d02b      	beq.n	800746c <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 8007414:	4b14      	ldr	r3, [pc, #80]	; (8007468 <checkAktifCalisma+0xb9c>)
 8007416:	2201      	movs	r2, #1
 8007418:	701a      	strb	r2, [r3, #0]
 800741a:	e02a      	b.n	8007472 <checkAktifCalisma+0xba6>
 800741c:	20000cd4 	.word	0x20000cd4
 8007420:	40011000 	.word	0x40011000
 8007424:	20000cd8 	.word	0x20000cd8
 8007428:	20000cef 	.word	0x20000cef
 800742c:	20000cf0 	.word	0x20000cf0
 8007430:	20000cd0 	.word	0x20000cd0
 8007434:	20000bd4 	.word	0x20000bd4
 8007438:	20000be0 	.word	0x20000be0
 800743c:	20000cb3 	.word	0x20000cb3
 8007440:	40010c00 	.word	0x40010c00
 8007444:	20000cdf 	.word	0x20000cdf
 8007448:	20000ca6 	.word	0x20000ca6
 800744c:	20000ca5 	.word	0x20000ca5
 8007450:	20000ca9 	.word	0x20000ca9
 8007454:	20000ca3 	.word	0x20000ca3
 8007458:	20000ccc 	.word	0x20000ccc
 800745c:	20000ce0 	.word	0x20000ce0
 8007460:	20000bd8 	.word	0x20000bd8
 8007464:	20000cb6 	.word	0x20000cb6
 8007468:	20000ce1 	.word	0x20000ce1
		} else {
			kapi1butonkontrol=0;
 800746c:	4b8b      	ldr	r3, [pc, #556]	; (800769c <checkAktifCalisma+0xdd0>)
 800746e:	2200      	movs	r2, #0
 8007470:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8007472:	4b8b      	ldr	r3, [pc, #556]	; (80076a0 <checkAktifCalisma+0xdd4>)
 8007474:	781b      	ldrb	r3, [r3, #0]
 8007476:	2b02      	cmp	r3, #2
 8007478:	d121      	bne.n	80074be <checkAktifCalisma+0xbf2>
 800747a:	4b8a      	ldr	r3, [pc, #552]	; (80076a4 <checkAktifCalisma+0xdd8>)
 800747c:	781b      	ldrb	r3, [r3, #0]
 800747e:	2b01      	cmp	r3, #1
 8007480:	d003      	beq.n	800748a <checkAktifCalisma+0xbbe>
 8007482:	4b88      	ldr	r3, [pc, #544]	; (80076a4 <checkAktifCalisma+0xdd8>)
 8007484:	781b      	ldrb	r3, [r3, #0]
 8007486:	2b03      	cmp	r3, #3
 8007488:	d119      	bne.n	80074be <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 800748a:	2104      	movs	r1, #4
 800748c:	4886      	ldr	r0, [pc, #536]	; (80076a8 <checkAktifCalisma+0xddc>)
 800748e:	f002 fdc7 	bl	800a020 <HAL_GPIO_ReadPin>
 8007492:	4603      	mov	r3, r0
 8007494:	2b01      	cmp	r3, #1
 8007496:	d003      	beq.n	80074a0 <checkAktifCalisma+0xbd4>
 8007498:	4b84      	ldr	r3, [pc, #528]	; (80076ac <checkAktifCalisma+0xde0>)
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d10e      	bne.n	80074be <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80074a0:	2102      	movs	r1, #2
 80074a2:	4881      	ldr	r0, [pc, #516]	; (80076a8 <checkAktifCalisma+0xddc>)
 80074a4:	f002 fdbc 	bl	800a020 <HAL_GPIO_ReadPin>
 80074a8:	4603      	mov	r3, r0
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d107      	bne.n	80074be <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 80074ae:	4b80      	ldr	r3, [pc, #512]	; (80076b0 <checkAktifCalisma+0xde4>)
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d003      	beq.n	80074be <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 80074b6:	4b7f      	ldr	r3, [pc, #508]	; (80076b4 <checkAktifCalisma+0xde8>)
 80074b8:	2201      	movs	r2, #1
 80074ba:	701a      	strb	r2, [r3, #0]
 80074bc:	e002      	b.n	80074c4 <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 80074be:	4b7d      	ldr	r3, [pc, #500]	; (80076b4 <checkAktifCalisma+0xde8>)
 80074c0:	2200      	movs	r2, #0
 80074c2:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 80074c4:	4b75      	ldr	r3, [pc, #468]	; (800769c <checkAktifCalisma+0xdd0>)
 80074c6:	781b      	ldrb	r3, [r3, #0]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d107      	bne.n	80074dc <checkAktifCalisma+0xc10>
 80074cc:	4b79      	ldr	r3, [pc, #484]	; (80076b4 <checkAktifCalisma+0xde8>)
 80074ce:	781b      	ldrb	r3, [r3, #0]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d103      	bne.n	80074dc <checkAktifCalisma+0xc10>
 80074d4:	4b78      	ldr	r3, [pc, #480]	; (80076b8 <checkAktifCalisma+0xdec>)
 80074d6:	781b      	ldrb	r3, [r3, #0]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d005      	beq.n	80074e8 <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 80074dc:	2201      	movs	r2, #1
 80074de:	2180      	movs	r1, #128	; 0x80
 80074e0:	4876      	ldr	r0, [pc, #472]	; (80076bc <checkAktifCalisma+0xdf0>)
 80074e2:	f002 fdb4 	bl	800a04e <HAL_GPIO_WritePin>
 80074e6:	e004      	b.n	80074f2 <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 80074e8:	2200      	movs	r2, #0
 80074ea:	2180      	movs	r1, #128	; 0x80
 80074ec:	4873      	ldr	r0, [pc, #460]	; (80076bc <checkAktifCalisma+0xdf0>)
 80074ee:	f002 fdae 	bl	800a04e <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80074f2:	4b73      	ldr	r3, [pc, #460]	; (80076c0 <checkAktifCalisma+0xdf4>)
 80074f4:	781b      	ldrb	r3, [r3, #0]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d141      	bne.n	800757e <checkAktifCalisma+0xcb2>
 80074fa:	4b6a      	ldr	r3, [pc, #424]	; (80076a4 <checkAktifCalisma+0xdd8>)
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d003      	beq.n	800750a <checkAktifCalisma+0xc3e>
 8007502:	4b68      	ldr	r3, [pc, #416]	; (80076a4 <checkAktifCalisma+0xdd8>)
 8007504:	781b      	ldrb	r3, [r3, #0]
 8007506:	2b03      	cmp	r3, #3
 8007508:	d139      	bne.n	800757e <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 800750a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800750e:	4866      	ldr	r0, [pc, #408]	; (80076a8 <checkAktifCalisma+0xddc>)
 8007510:	f002 fd86 	bl	800a020 <HAL_GPIO_ReadPin>
 8007514:	4603      	mov	r3, r0
 8007516:	2b00      	cmp	r3, #0
 8007518:	d103      	bne.n	8007522 <checkAktifCalisma+0xc56>
 800751a:	4b6a      	ldr	r3, [pc, #424]	; (80076c4 <checkAktifCalisma+0xdf8>)
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d00b      	beq.n	800753a <checkAktifCalisma+0xc6e>
 8007522:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007526:	4868      	ldr	r0, [pc, #416]	; (80076c8 <checkAktifCalisma+0xdfc>)
 8007528:	f002 fd7a 	bl	800a020 <HAL_GPIO_ReadPin>
 800752c:	4603      	mov	r3, r0
 800752e:	2b00      	cmp	r3, #0
 8007530:	d125      	bne.n	800757e <checkAktifCalisma+0xcb2>
 8007532:	4b64      	ldr	r3, [pc, #400]	; (80076c4 <checkAktifCalisma+0xdf8>)
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	2b01      	cmp	r3, #1
 8007538:	d121      	bne.n	800757e <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800753a:	2102      	movs	r1, #2
 800753c:	485a      	ldr	r0, [pc, #360]	; (80076a8 <checkAktifCalisma+0xddc>)
 800753e:	f002 fd6f 	bl	800a020 <HAL_GPIO_ReadPin>
 8007542:	4603      	mov	r3, r0
 8007544:	2b01      	cmp	r3, #1
 8007546:	d11a      	bne.n	800757e <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8007548:	2104      	movs	r1, #4
 800754a:	4857      	ldr	r0, [pc, #348]	; (80076a8 <checkAktifCalisma+0xddc>)
 800754c:	f002 fd68 	bl	800a020 <HAL_GPIO_ReadPin>
 8007550:	4603      	mov	r3, r0
 8007552:	2b00      	cmp	r3, #0
 8007554:	d113      	bne.n	800757e <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 8007556:	4b56      	ldr	r3, [pc, #344]	; (80076b0 <checkAktifCalisma+0xde4>)
 8007558:	781b      	ldrb	r3, [r3, #0]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d00f      	beq.n	800757e <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 800755e:	4b5b      	ldr	r3, [pc, #364]	; (80076cc <checkAktifCalisma+0xe00>)
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	f083 0301 	eor.w	r3, r3, #1
 8007566:	b2db      	uxtb	r3, r3
 8007568:	2b00      	cmp	r3, #0
 800756a:	d008      	beq.n	800757e <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 800756c:	4b58      	ldr	r3, [pc, #352]	; (80076d0 <checkAktifCalisma+0xe04>)
 800756e:	2201      	movs	r2, #1
 8007570:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8007572:	4b58      	ldr	r3, [pc, #352]	; (80076d4 <checkAktifCalisma+0xe08>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a58      	ldr	r2, [pc, #352]	; (80076d8 <checkAktifCalisma+0xe0c>)
 8007578:	6013      	str	r3, [r2, #0]
			bekle();
 800757a:	f7fe ff71 	bl	8006460 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 800757e:	4b55      	ldr	r3, [pc, #340]	; (80076d4 <checkAktifCalisma+0xe08>)
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	4b55      	ldr	r3, [pc, #340]	; (80076d8 <checkAktifCalisma+0xe0c>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	1ad3      	subs	r3, r2, r3
 8007588:	4a54      	ldr	r2, [pc, #336]	; (80076dc <checkAktifCalisma+0xe10>)
 800758a:	7812      	ldrb	r2, [r2, #0]
 800758c:	4293      	cmp	r3, r2
 800758e:	d20d      	bcs.n	80075ac <checkAktifCalisma+0xce0>
 8007590:	2102      	movs	r1, #2
 8007592:	4845      	ldr	r0, [pc, #276]	; (80076a8 <checkAktifCalisma+0xddc>)
 8007594:	f002 fd44 	bl	800a020 <HAL_GPIO_ReadPin>
 8007598:	4603      	mov	r3, r0
 800759a:	2b00      	cmp	r3, #0
 800759c:	d006      	beq.n	80075ac <checkAktifCalisma+0xce0>
 800759e:	4b44      	ldr	r3, [pc, #272]	; (80076b0 <checkAktifCalisma+0xde4>)
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	f083 0301 	eor.w	r3, r3, #1
 80075a6:	b2db      	uxtb	r3, r3
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d002      	beq.n	80075b2 <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 80075ac:	4b48      	ldr	r3, [pc, #288]	; (80076d0 <checkAktifCalisma+0xe04>)
 80075ae:	2200      	movs	r2, #0
 80075b0:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80075b2:	4b43      	ldr	r3, [pc, #268]	; (80076c0 <checkAktifCalisma+0xdf4>)
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d135      	bne.n	8007626 <checkAktifCalisma+0xd5a>
 80075ba:	4b3a      	ldr	r3, [pc, #232]	; (80076a4 <checkAktifCalisma+0xdd8>)
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d003      	beq.n	80075ca <checkAktifCalisma+0xcfe>
 80075c2:	4b38      	ldr	r3, [pc, #224]	; (80076a4 <checkAktifCalisma+0xdd8>)
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	2b03      	cmp	r3, #3
 80075c8:	d12d      	bne.n	8007626 <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 80075ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80075ce:	4836      	ldr	r0, [pc, #216]	; (80076a8 <checkAktifCalisma+0xddc>)
 80075d0:	f002 fd26 	bl	800a020 <HAL_GPIO_ReadPin>
 80075d4:	4603      	mov	r3, r0
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d103      	bne.n	80075e2 <checkAktifCalisma+0xd16>
 80075da:	4b3a      	ldr	r3, [pc, #232]	; (80076c4 <checkAktifCalisma+0xdf8>)
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d00b      	beq.n	80075fa <checkAktifCalisma+0xd2e>
 80075e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80075e6:	4838      	ldr	r0, [pc, #224]	; (80076c8 <checkAktifCalisma+0xdfc>)
 80075e8:	f002 fd1a 	bl	800a020 <HAL_GPIO_ReadPin>
 80075ec:	4603      	mov	r3, r0
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d119      	bne.n	8007626 <checkAktifCalisma+0xd5a>
 80075f2:	4b34      	ldr	r3, [pc, #208]	; (80076c4 <checkAktifCalisma+0xdf8>)
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	2b01      	cmp	r3, #1
 80075f8:	d115      	bne.n	8007626 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80075fa:	2102      	movs	r1, #2
 80075fc:	482a      	ldr	r0, [pc, #168]	; (80076a8 <checkAktifCalisma+0xddc>)
 80075fe:	f002 fd0f 	bl	800a020 <HAL_GPIO_ReadPin>
 8007602:	4603      	mov	r3, r0
 8007604:	2b01      	cmp	r3, #1
 8007606:	d10e      	bne.n	8007626 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8007608:	2104      	movs	r1, #4
 800760a:	4827      	ldr	r0, [pc, #156]	; (80076a8 <checkAktifCalisma+0xddc>)
 800760c:	f002 fd08 	bl	800a020 <HAL_GPIO_ReadPin>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d107      	bne.n	8007626 <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 8007616:	4b26      	ldr	r3, [pc, #152]	; (80076b0 <checkAktifCalisma+0xde4>)
 8007618:	781b      	ldrb	r3, [r3, #0]
 800761a:	2b00      	cmp	r3, #0
 800761c:	d003      	beq.n	8007626 <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 800761e:	4b30      	ldr	r3, [pc, #192]	; (80076e0 <checkAktifCalisma+0xe14>)
 8007620:	2201      	movs	r2, #1
 8007622:	701a      	strb	r2, [r3, #0]
 8007624:	e002      	b.n	800762c <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 8007626:	4b2e      	ldr	r3, [pc, #184]	; (80076e0 <checkAktifCalisma+0xe14>)
 8007628:	2200      	movs	r2, #0
 800762a:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800762c:	4b24      	ldr	r3, [pc, #144]	; (80076c0 <checkAktifCalisma+0xdf4>)
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	2b02      	cmp	r3, #2
 8007632:	d11d      	bne.n	8007670 <checkAktifCalisma+0xda4>
 8007634:	4b1b      	ldr	r3, [pc, #108]	; (80076a4 <checkAktifCalisma+0xdd8>)
 8007636:	781b      	ldrb	r3, [r3, #0]
 8007638:	2b01      	cmp	r3, #1
 800763a:	d003      	beq.n	8007644 <checkAktifCalisma+0xd78>
 800763c:	4b19      	ldr	r3, [pc, #100]	; (80076a4 <checkAktifCalisma+0xdd8>)
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	2b03      	cmp	r3, #3
 8007642:	d115      	bne.n	8007670 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007644:	2102      	movs	r1, #2
 8007646:	4818      	ldr	r0, [pc, #96]	; (80076a8 <checkAktifCalisma+0xddc>)
 8007648:	f002 fcea 	bl	800a020 <HAL_GPIO_ReadPin>
 800764c:	4603      	mov	r3, r0
 800764e:	2b01      	cmp	r3, #1
 8007650:	d10e      	bne.n	8007670 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8007652:	2104      	movs	r1, #4
 8007654:	4814      	ldr	r0, [pc, #80]	; (80076a8 <checkAktifCalisma+0xddc>)
 8007656:	f002 fce3 	bl	800a020 <HAL_GPIO_ReadPin>
 800765a:	4603      	mov	r3, r0
 800765c:	2b00      	cmp	r3, #0
 800765e:	d107      	bne.n	8007670 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 8007660:	4b13      	ldr	r3, [pc, #76]	; (80076b0 <checkAktifCalisma+0xde4>)
 8007662:	781b      	ldrb	r3, [r3, #0]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d003      	beq.n	8007670 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 8007668:	4b1e      	ldr	r3, [pc, #120]	; (80076e4 <checkAktifCalisma+0xe18>)
 800766a:	2201      	movs	r2, #1
 800766c:	701a      	strb	r2, [r3, #0]
 800766e:	e002      	b.n	8007676 <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 8007670:	4b1c      	ldr	r3, [pc, #112]	; (80076e4 <checkAktifCalisma+0xe18>)
 8007672:	2200      	movs	r2, #0
 8007674:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8007676:	4b1a      	ldr	r3, [pc, #104]	; (80076e0 <checkAktifCalisma+0xe14>)
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d107      	bne.n	800768e <checkAktifCalisma+0xdc2>
 800767e:	4b19      	ldr	r3, [pc, #100]	; (80076e4 <checkAktifCalisma+0xe18>)
 8007680:	781b      	ldrb	r3, [r3, #0]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d103      	bne.n	800768e <checkAktifCalisma+0xdc2>
 8007686:	4b12      	ldr	r3, [pc, #72]	; (80076d0 <checkAktifCalisma+0xe04>)
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	2b00      	cmp	r3, #0
 800768c:	d02c      	beq.n	80076e8 <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 800768e:	2201      	movs	r2, #1
 8007690:	2140      	movs	r1, #64	; 0x40
 8007692:	480a      	ldr	r0, [pc, #40]	; (80076bc <checkAktifCalisma+0xdf0>)
 8007694:	f002 fcdb 	bl	800a04e <HAL_GPIO_WritePin>
 8007698:	e02b      	b.n	80076f2 <checkAktifCalisma+0xe26>
 800769a:	bf00      	nop
 800769c:	20000ce1 	.word	0x20000ce1
 80076a0:	20000ca6 	.word	0x20000ca6
 80076a4:	20000ca5 	.word	0x20000ca5
 80076a8:	40011000 	.word	0x40011000
 80076ac:	20000ca3 	.word	0x20000ca3
 80076b0:	20000cdf 	.word	0x20000cdf
 80076b4:	20000ce2 	.word	0x20000ce2
 80076b8:	20000ce0 	.word	0x20000ce0
 80076bc:	40010800 	.word	0x40010800
 80076c0:	20000ca7 	.word	0x20000ca7
 80076c4:	20000ca9 	.word	0x20000ca9
 80076c8:	40010c00 	.word	0x40010c00
 80076cc:	20000ccc 	.word	0x20000ccc
 80076d0:	20000ce3 	.word	0x20000ce3
 80076d4:	20000bd4 	.word	0x20000bd4
 80076d8:	20000bd8 	.word	0x20000bd8
 80076dc:	20000cb7 	.word	0x20000cb7
 80076e0:	20000ce4 	.word	0x20000ce4
 80076e4:	20000ce5 	.word	0x20000ce5
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 80076e8:	2200      	movs	r2, #0
 80076ea:	2140      	movs	r1, #64	; 0x40
 80076ec:	488d      	ldr	r0, [pc, #564]	; (8007924 <checkAktifCalisma+0x1058>)
 80076ee:	f002 fcae 	bl	800a04e <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 80076f2:	4b8d      	ldr	r3, [pc, #564]	; (8007928 <checkAktifCalisma+0x105c>)
 80076f4:	781b      	ldrb	r3, [r3, #0]
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d003      	beq.n	8007702 <checkAktifCalisma+0xe36>
 80076fa:	4b8b      	ldr	r3, [pc, #556]	; (8007928 <checkAktifCalisma+0x105c>)
 80076fc:	781b      	ldrb	r3, [r3, #0]
 80076fe:	2b02      	cmp	r3, #2
 8007700:	d115      	bne.n	800772e <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8007702:	2104      	movs	r1, #4
 8007704:	4889      	ldr	r0, [pc, #548]	; (800792c <checkAktifCalisma+0x1060>)
 8007706:	f002 fc8b 	bl	800a020 <HAL_GPIO_ReadPin>
 800770a:	4603      	mov	r3, r0
 800770c:	2b01      	cmp	r3, #1
 800770e:	d003      	beq.n	8007718 <checkAktifCalisma+0xe4c>
 8007710:	4b87      	ldr	r3, [pc, #540]	; (8007930 <checkAktifCalisma+0x1064>)
 8007712:	781b      	ldrb	r3, [r3, #0]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d10a      	bne.n	800772e <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8007718:	2102      	movs	r1, #2
 800771a:	4884      	ldr	r0, [pc, #528]	; (800792c <checkAktifCalisma+0x1060>)
 800771c:	f002 fc80 	bl	800a020 <HAL_GPIO_ReadPin>
 8007720:	4603      	mov	r3, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d103      	bne.n	800772e <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 8007726:	4b83      	ldr	r3, [pc, #524]	; (8007934 <checkAktifCalisma+0x1068>)
 8007728:	2201      	movs	r2, #1
 800772a:	701a      	strb	r2, [r3, #0]
 800772c:	e002      	b.n	8007734 <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 800772e:	4b81      	ldr	r3, [pc, #516]	; (8007934 <checkAktifCalisma+0x1068>)
 8007730:	2200      	movs	r2, #0
 8007732:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8007734:	4b7c      	ldr	r3, [pc, #496]	; (8007928 <checkAktifCalisma+0x105c>)
 8007736:	781b      	ldrb	r3, [r3, #0]
 8007738:	2b01      	cmp	r3, #1
 800773a:	d003      	beq.n	8007744 <checkAktifCalisma+0xe78>
 800773c:	4b7a      	ldr	r3, [pc, #488]	; (8007928 <checkAktifCalisma+0x105c>)
 800773e:	781b      	ldrb	r3, [r3, #0]
 8007740:	2b02      	cmp	r3, #2
 8007742:	d111      	bne.n	8007768 <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007744:	2102      	movs	r1, #2
 8007746:	4879      	ldr	r0, [pc, #484]	; (800792c <checkAktifCalisma+0x1060>)
 8007748:	f002 fc6a 	bl	800a020 <HAL_GPIO_ReadPin>
 800774c:	4603      	mov	r3, r0
 800774e:	2b01      	cmp	r3, #1
 8007750:	d10a      	bne.n	8007768 <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8007752:	2104      	movs	r1, #4
 8007754:	4875      	ldr	r0, [pc, #468]	; (800792c <checkAktifCalisma+0x1060>)
 8007756:	f002 fc63 	bl	800a020 <HAL_GPIO_ReadPin>
 800775a:	4603      	mov	r3, r0
 800775c:	2b00      	cmp	r3, #0
 800775e:	d103      	bne.n	8007768 <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8007760:	4b75      	ldr	r3, [pc, #468]	; (8007938 <checkAktifCalisma+0x106c>)
 8007762:	2201      	movs	r2, #1
 8007764:	701a      	strb	r2, [r3, #0]
 8007766:	e002      	b.n	800776e <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 8007768:	4b73      	ldr	r3, [pc, #460]	; (8007938 <checkAktifCalisma+0x106c>)
 800776a:	2200      	movs	r2, #0
 800776c:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 800776e:	4b71      	ldr	r3, [pc, #452]	; (8007934 <checkAktifCalisma+0x1068>)
 8007770:	781b      	ldrb	r3, [r3, #0]
 8007772:	2b00      	cmp	r3, #0
 8007774:	d00f      	beq.n	8007796 <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 8007776:	4b71      	ldr	r3, [pc, #452]	; (800793c <checkAktifCalisma+0x1070>)
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	2b01      	cmp	r3, #1
 800777c:	d10b      	bne.n	8007796 <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 800777e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007782:	486f      	ldr	r0, [pc, #444]	; (8007940 <checkAktifCalisma+0x1074>)
 8007784:	f002 fc4c 	bl	800a020 <HAL_GPIO_ReadPin>
 8007788:	4603      	mov	r3, r0
 800778a:	2b00      	cmp	r3, #0
 800778c:	d103      	bne.n	8007796 <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 800778e:	4b6d      	ldr	r3, [pc, #436]	; (8007944 <checkAktifCalisma+0x1078>)
 8007790:	2201      	movs	r2, #1
 8007792:	701a      	strb	r2, [r3, #0]
 8007794:	e002      	b.n	800779c <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 8007796:	4b6b      	ldr	r3, [pc, #428]	; (8007944 <checkAktifCalisma+0x1078>)
 8007798:	2200      	movs	r2, #0
 800779a:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 800779c:	4b66      	ldr	r3, [pc, #408]	; (8007938 <checkAktifCalisma+0x106c>)
 800779e:	781b      	ldrb	r3, [r3, #0]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d00f      	beq.n	80077c4 <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 80077a4:	4b65      	ldr	r3, [pc, #404]	; (800793c <checkAktifCalisma+0x1070>)
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d10b      	bne.n	80077c4 <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 80077ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80077b0:	4863      	ldr	r0, [pc, #396]	; (8007940 <checkAktifCalisma+0x1074>)
 80077b2:	f002 fc35 	bl	800a020 <HAL_GPIO_ReadPin>
 80077b6:	4603      	mov	r3, r0
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	d103      	bne.n	80077c4 <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 80077bc:	4b62      	ldr	r3, [pc, #392]	; (8007948 <checkAktifCalisma+0x107c>)
 80077be:	2201      	movs	r2, #1
 80077c0:	701a      	strb	r2, [r3, #0]
 80077c2:	e002      	b.n	80077ca <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 80077c4:	4b60      	ldr	r3, [pc, #384]	; (8007948 <checkAktifCalisma+0x107c>)
 80077c6:	2200      	movs	r2, #0
 80077c8:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80077ca:	4b60      	ldr	r3, [pc, #384]	; (800794c <checkAktifCalisma+0x1080>)
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d137      	bne.n	8007842 <checkAktifCalisma+0xf76>
 80077d2:	4b5f      	ldr	r3, [pc, #380]	; (8007950 <checkAktifCalisma+0x1084>)
 80077d4:	781b      	ldrb	r3, [r3, #0]
 80077d6:	2b02      	cmp	r3, #2
 80077d8:	d003      	beq.n	80077e2 <checkAktifCalisma+0xf16>
 80077da:	4b5d      	ldr	r3, [pc, #372]	; (8007950 <checkAktifCalisma+0x1084>)
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	2b03      	cmp	r3, #3
 80077e0:	d12f      	bne.n	8007842 <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 80077e2:	4b54      	ldr	r3, [pc, #336]	; (8007934 <checkAktifCalisma+0x1068>)
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d103      	bne.n	80077f2 <checkAktifCalisma+0xf26>
 80077ea:	4b53      	ldr	r3, [pc, #332]	; (8007938 <checkAktifCalisma+0x106c>)
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d027      	beq.n	8007842 <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 80077f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80077f6:	484d      	ldr	r0, [pc, #308]	; (800792c <checkAktifCalisma+0x1060>)
 80077f8:	f002 fc12 	bl	800a020 <HAL_GPIO_ReadPin>
 80077fc:	4603      	mov	r3, r0
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d103      	bne.n	800780a <checkAktifCalisma+0xf3e>
 8007802:	4b4e      	ldr	r3, [pc, #312]	; (800793c <checkAktifCalisma+0x1070>)
 8007804:	781b      	ldrb	r3, [r3, #0]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d007      	beq.n	800781a <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 800780a:	4b4e      	ldr	r3, [pc, #312]	; (8007944 <checkAktifCalisma+0x1078>)
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d103      	bne.n	800781a <checkAktifCalisma+0xf4e>
 8007812:	4b4d      	ldr	r3, [pc, #308]	; (8007948 <checkAktifCalisma+0x107c>)
 8007814:	781b      	ldrb	r3, [r3, #0]
 8007816:	2b00      	cmp	r3, #0
 8007818:	d013      	beq.n	8007842 <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 800781a:	4b4e      	ldr	r3, [pc, #312]	; (8007954 <checkAktifCalisma+0x1088>)
 800781c:	781b      	ldrb	r3, [r3, #0]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d00f      	beq.n	8007842 <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 8007822:	4b4d      	ldr	r3, [pc, #308]	; (8007958 <checkAktifCalisma+0x108c>)
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	f083 0301 	eor.w	r3, r3, #1
 800782a:	b2db      	uxtb	r3, r3
 800782c:	2b00      	cmp	r3, #0
 800782e:	d008      	beq.n	8007842 <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8007830:	4b4a      	ldr	r3, [pc, #296]	; (800795c <checkAktifCalisma+0x1090>)
 8007832:	2201      	movs	r2, #1
 8007834:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8007836:	4b4a      	ldr	r3, [pc, #296]	; (8007960 <checkAktifCalisma+0x1094>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a4a      	ldr	r2, [pc, #296]	; (8007964 <checkAktifCalisma+0x1098>)
 800783c:	6013      	str	r3, [r2, #0]
			bekle();
 800783e:	f7fe fe0f 	bl	8006460 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8007842:	4b47      	ldr	r3, [pc, #284]	; (8007960 <checkAktifCalisma+0x1094>)
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	4b47      	ldr	r3, [pc, #284]	; (8007964 <checkAktifCalisma+0x1098>)
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	1ad3      	subs	r3, r2, r3
 800784c:	4a46      	ldr	r2, [pc, #280]	; (8007968 <checkAktifCalisma+0x109c>)
 800784e:	7812      	ldrb	r2, [r2, #0]
 8007850:	4293      	cmp	r3, r2
 8007852:	d214      	bcs.n	800787e <checkAktifCalisma+0xfb2>
 8007854:	4b37      	ldr	r3, [pc, #220]	; (8007934 <checkAktifCalisma+0x1068>)
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	f083 0301 	eor.w	r3, r3, #1
 800785c:	b2db      	uxtb	r3, r3
 800785e:	2b00      	cmp	r3, #0
 8007860:	d006      	beq.n	8007870 <checkAktifCalisma+0xfa4>
 8007862:	4b35      	ldr	r3, [pc, #212]	; (8007938 <checkAktifCalisma+0x106c>)
 8007864:	781b      	ldrb	r3, [r3, #0]
 8007866:	f083 0301 	eor.w	r3, r3, #1
 800786a:	b2db      	uxtb	r3, r3
 800786c:	2b00      	cmp	r3, #0
 800786e:	d106      	bne.n	800787e <checkAktifCalisma+0xfb2>
 8007870:	4b38      	ldr	r3, [pc, #224]	; (8007954 <checkAktifCalisma+0x1088>)
 8007872:	781b      	ldrb	r3, [r3, #0]
 8007874:	f083 0301 	eor.w	r3, r3, #1
 8007878:	b2db      	uxtb	r3, r3
 800787a:	2b00      	cmp	r3, #0
 800787c:	d002      	beq.n	8007884 <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 800787e:	4b37      	ldr	r3, [pc, #220]	; (800795c <checkAktifCalisma+0x1090>)
 8007880:	2200      	movs	r2, #0
 8007882:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 8007884:	4b31      	ldr	r3, [pc, #196]	; (800794c <checkAktifCalisma+0x1080>)
 8007886:	781b      	ldrb	r3, [r3, #0]
 8007888:	2b01      	cmp	r3, #1
 800788a:	d12b      	bne.n	80078e4 <checkAktifCalisma+0x1018>
 800788c:	4b30      	ldr	r3, [pc, #192]	; (8007950 <checkAktifCalisma+0x1084>)
 800788e:	781b      	ldrb	r3, [r3, #0]
 8007890:	2b02      	cmp	r3, #2
 8007892:	d003      	beq.n	800789c <checkAktifCalisma+0xfd0>
 8007894:	4b2e      	ldr	r3, [pc, #184]	; (8007950 <checkAktifCalisma+0x1084>)
 8007896:	781b      	ldrb	r3, [r3, #0]
 8007898:	2b03      	cmp	r3, #3
 800789a:	d123      	bne.n	80078e4 <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 800789c:	4b25      	ldr	r3, [pc, #148]	; (8007934 <checkAktifCalisma+0x1068>)
 800789e:	781b      	ldrb	r3, [r3, #0]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d103      	bne.n	80078ac <checkAktifCalisma+0xfe0>
 80078a4:	4b24      	ldr	r3, [pc, #144]	; (8007938 <checkAktifCalisma+0x106c>)
 80078a6:	781b      	ldrb	r3, [r3, #0]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d01b      	beq.n	80078e4 <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 80078ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80078b0:	481e      	ldr	r0, [pc, #120]	; (800792c <checkAktifCalisma+0x1060>)
 80078b2:	f002 fbb5 	bl	800a020 <HAL_GPIO_ReadPin>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d103      	bne.n	80078c4 <checkAktifCalisma+0xff8>
 80078bc:	4b1f      	ldr	r3, [pc, #124]	; (800793c <checkAktifCalisma+0x1070>)
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d007      	beq.n	80078d4 <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 80078c4:	4b1f      	ldr	r3, [pc, #124]	; (8007944 <checkAktifCalisma+0x1078>)
 80078c6:	781b      	ldrb	r3, [r3, #0]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d103      	bne.n	80078d4 <checkAktifCalisma+0x1008>
 80078cc:	4b1e      	ldr	r3, [pc, #120]	; (8007948 <checkAktifCalisma+0x107c>)
 80078ce:	781b      	ldrb	r3, [r3, #0]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d007      	beq.n	80078e4 <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 80078d4:	4b1f      	ldr	r3, [pc, #124]	; (8007954 <checkAktifCalisma+0x1088>)
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d003      	beq.n	80078e4 <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 80078dc:	4b23      	ldr	r3, [pc, #140]	; (800796c <checkAktifCalisma+0x10a0>)
 80078de:	2201      	movs	r2, #1
 80078e0:	701a      	strb	r2, [r3, #0]
 80078e2:	e002      	b.n	80078ea <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 80078e4:	4b21      	ldr	r3, [pc, #132]	; (800796c <checkAktifCalisma+0x10a0>)
 80078e6:	2200      	movs	r2, #0
 80078e8:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80078ea:	4b18      	ldr	r3, [pc, #96]	; (800794c <checkAktifCalisma+0x1080>)
 80078ec:	781b      	ldrb	r3, [r3, #0]
 80078ee:	2b02      	cmp	r3, #2
 80078f0:	d140      	bne.n	8007974 <checkAktifCalisma+0x10a8>
 80078f2:	4b17      	ldr	r3, [pc, #92]	; (8007950 <checkAktifCalisma+0x1084>)
 80078f4:	781b      	ldrb	r3, [r3, #0]
 80078f6:	2b02      	cmp	r3, #2
 80078f8:	d003      	beq.n	8007902 <checkAktifCalisma+0x1036>
 80078fa:	4b15      	ldr	r3, [pc, #84]	; (8007950 <checkAktifCalisma+0x1084>)
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	2b03      	cmp	r3, #3
 8007900:	d138      	bne.n	8007974 <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8007902:	4b0c      	ldr	r3, [pc, #48]	; (8007934 <checkAktifCalisma+0x1068>)
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	2b00      	cmp	r3, #0
 8007908:	d103      	bne.n	8007912 <checkAktifCalisma+0x1046>
 800790a:	4b0b      	ldr	r3, [pc, #44]	; (8007938 <checkAktifCalisma+0x106c>)
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	2b00      	cmp	r3, #0
 8007910:	d030      	beq.n	8007974 <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 8007912:	4b10      	ldr	r3, [pc, #64]	; (8007954 <checkAktifCalisma+0x1088>)
 8007914:	781b      	ldrb	r3, [r3, #0]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d02c      	beq.n	8007974 <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 800791a:	4b15      	ldr	r3, [pc, #84]	; (8007970 <checkAktifCalisma+0x10a4>)
 800791c:	2201      	movs	r2, #1
 800791e:	701a      	strb	r2, [r3, #0]
 8007920:	e02b      	b.n	800797a <checkAktifCalisma+0x10ae>
 8007922:	bf00      	nop
 8007924:	40010800 	.word	0x40010800
 8007928:	20000caa 	.word	0x20000caa
 800792c:	40011000 	.word	0x40011000
 8007930:	20000ca3 	.word	0x20000ca3
 8007934:	20000ce9 	.word	0x20000ce9
 8007938:	20000cea 	.word	0x20000cea
 800793c:	20000ca9 	.word	0x20000ca9
 8007940:	40010c00 	.word	0x40010c00
 8007944:	20000cf9 	.word	0x20000cf9
 8007948:	20000cfa 	.word	0x20000cfa
 800794c:	20000ca8 	.word	0x20000ca8
 8007950:	20000ca5 	.word	0x20000ca5
 8007954:	20000cdf 	.word	0x20000cdf
 8007958:	20000ccc 	.word	0x20000ccc
 800795c:	20000ce6 	.word	0x20000ce6
 8007960:	20000bd4 	.word	0x20000bd4
 8007964:	20000bd8 	.word	0x20000bd8
 8007968:	20000cb8 	.word	0x20000cb8
 800796c:	20000ce7 	.word	0x20000ce7
 8007970:	20000ce8 	.word	0x20000ce8
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 8007974:	4b89      	ldr	r3, [pc, #548]	; (8007b9c <checkAktifCalisma+0x12d0>)
 8007976:	2200      	movs	r2, #0
 8007978:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 800797a:	4b89      	ldr	r3, [pc, #548]	; (8007ba0 <checkAktifCalisma+0x12d4>)
 800797c:	781b      	ldrb	r3, [r3, #0]
 800797e:	2b00      	cmp	r3, #0
 8007980:	d107      	bne.n	8007992 <checkAktifCalisma+0x10c6>
 8007982:	4b88      	ldr	r3, [pc, #544]	; (8007ba4 <checkAktifCalisma+0x12d8>)
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d103      	bne.n	8007992 <checkAktifCalisma+0x10c6>
 800798a:	4b84      	ldr	r3, [pc, #528]	; (8007b9c <checkAktifCalisma+0x12d0>)
 800798c:	781b      	ldrb	r3, [r3, #0]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d005      	beq.n	800799e <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8007992:	2201      	movs	r2, #1
 8007994:	2120      	movs	r1, #32
 8007996:	4884      	ldr	r0, [pc, #528]	; (8007ba8 <checkAktifCalisma+0x12dc>)
 8007998:	f002 fb59 	bl	800a04e <HAL_GPIO_WritePin>
 800799c:	e004      	b.n	80079a8 <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800799e:	2200      	movs	r2, #0
 80079a0:	2120      	movs	r1, #32
 80079a2:	4881      	ldr	r0, [pc, #516]	; (8007ba8 <checkAktifCalisma+0x12dc>)
 80079a4:	f002 fb53 	bl	800a04e <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 80079a8:	4b80      	ldr	r3, [pc, #512]	; (8007bac <checkAktifCalisma+0x12e0>)
 80079aa:	781b      	ldrb	r3, [r3, #0]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d00e      	beq.n	80079ce <checkAktifCalisma+0x1102>
 80079b0:	2102      	movs	r1, #2
 80079b2:	487f      	ldr	r0, [pc, #508]	; (8007bb0 <checkAktifCalisma+0x12e4>)
 80079b4:	f002 fb34 	bl	800a020 <HAL_GPIO_ReadPin>
 80079b8:	4603      	mov	r3, r0
 80079ba:	2b01      	cmp	r3, #1
 80079bc:	d107      	bne.n	80079ce <checkAktifCalisma+0x1102>
 80079be:	4b7d      	ldr	r3, [pc, #500]	; (8007bb4 <checkAktifCalisma+0x12e8>)
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d103      	bne.n	80079ce <checkAktifCalisma+0x1102>
 80079c6:	4b7c      	ldr	r3, [pc, #496]	; (8007bb8 <checkAktifCalisma+0x12ec>)
 80079c8:	781b      	ldrb	r3, [r3, #0]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d112      	bne.n	80079f4 <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 80079ce:	4b7b      	ldr	r3, [pc, #492]	; (8007bbc <checkAktifCalisma+0x12f0>)
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	2b00      	cmp	r3, #0
 80079d4:	d066      	beq.n	8007aa4 <checkAktifCalisma+0x11d8>
 80079d6:	2104      	movs	r1, #4
 80079d8:	4875      	ldr	r0, [pc, #468]	; (8007bb0 <checkAktifCalisma+0x12e4>)
 80079da:	f002 fb21 	bl	800a020 <HAL_GPIO_ReadPin>
 80079de:	4603      	mov	r3, r0
 80079e0:	2b01      	cmp	r3, #1
 80079e2:	d15f      	bne.n	8007aa4 <checkAktifCalisma+0x11d8>
 80079e4:	4b73      	ldr	r3, [pc, #460]	; (8007bb4 <checkAktifCalisma+0x12e8>)
 80079e6:	781b      	ldrb	r3, [r3, #0]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d05b      	beq.n	8007aa4 <checkAktifCalisma+0x11d8>
 80079ec:	4b72      	ldr	r3, [pc, #456]	; (8007bb8 <checkAktifCalisma+0x12ec>)
 80079ee:	781b      	ldrb	r3, [r3, #0]
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d057      	beq.n	8007aa4 <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 80079f4:	4b72      	ldr	r3, [pc, #456]	; (8007bc0 <checkAktifCalisma+0x12f4>)
 80079f6:	781b      	ldrb	r3, [r3, #0]
 80079f8:	3301      	adds	r3, #1
 80079fa:	b2da      	uxtb	r2, r3
 80079fc:	4b70      	ldr	r3, [pc, #448]	; (8007bc0 <checkAktifCalisma+0x12f4>)
 80079fe:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8007a00:	4b6f      	ldr	r3, [pc, #444]	; (8007bc0 <checkAktifCalisma+0x12f4>)
 8007a02:	781b      	ldrb	r3, [r3, #0]
 8007a04:	2b09      	cmp	r3, #9
 8007a06:	d908      	bls.n	8007a1a <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8007a08:	4b6d      	ldr	r3, [pc, #436]	; (8007bc0 <checkAktifCalisma+0x12f4>)
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 8007a0e:	4b6d      	ldr	r3, [pc, #436]	; (8007bc4 <checkAktifCalisma+0x12f8>)
 8007a10:	781b      	ldrb	r3, [r3, #0]
 8007a12:	3301      	adds	r3, #1
 8007a14:	b2da      	uxtb	r2, r3
 8007a16:	4b6b      	ldr	r3, [pc, #428]	; (8007bc4 <checkAktifCalisma+0x12f8>)
 8007a18:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 8007a1a:	4b6a      	ldr	r3, [pc, #424]	; (8007bc4 <checkAktifCalisma+0x12f8>)
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	2b09      	cmp	r3, #9
 8007a20:	d908      	bls.n	8007a34 <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 8007a22:	4b68      	ldr	r3, [pc, #416]	; (8007bc4 <checkAktifCalisma+0x12f8>)
 8007a24:	2200      	movs	r2, #0
 8007a26:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8007a28:	4b67      	ldr	r3, [pc, #412]	; (8007bc8 <checkAktifCalisma+0x12fc>)
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	3301      	adds	r3, #1
 8007a2e:	b2da      	uxtb	r2, r3
 8007a30:	4b65      	ldr	r3, [pc, #404]	; (8007bc8 <checkAktifCalisma+0x12fc>)
 8007a32:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 8007a34:	4b64      	ldr	r3, [pc, #400]	; (8007bc8 <checkAktifCalisma+0x12fc>)
 8007a36:	781b      	ldrb	r3, [r3, #0]
 8007a38:	2b09      	cmp	r3, #9
 8007a3a:	d908      	bls.n	8007a4e <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 8007a3c:	4b62      	ldr	r3, [pc, #392]	; (8007bc8 <checkAktifCalisma+0x12fc>)
 8007a3e:	2200      	movs	r2, #0
 8007a40:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 8007a42:	4b62      	ldr	r3, [pc, #392]	; (8007bcc <checkAktifCalisma+0x1300>)
 8007a44:	781b      	ldrb	r3, [r3, #0]
 8007a46:	3301      	adds	r3, #1
 8007a48:	b2da      	uxtb	r2, r3
 8007a4a:	4b60      	ldr	r3, [pc, #384]	; (8007bcc <checkAktifCalisma+0x1300>)
 8007a4c:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 8007a4e:	4b5f      	ldr	r3, [pc, #380]	; (8007bcc <checkAktifCalisma+0x1300>)
 8007a50:	781b      	ldrb	r3, [r3, #0]
 8007a52:	2b09      	cmp	r3, #9
 8007a54:	d908      	bls.n	8007a68 <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 8007a56:	4b5d      	ldr	r3, [pc, #372]	; (8007bcc <checkAktifCalisma+0x1300>)
 8007a58:	2200      	movs	r2, #0
 8007a5a:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 8007a5c:	4b5c      	ldr	r3, [pc, #368]	; (8007bd0 <checkAktifCalisma+0x1304>)
 8007a5e:	781b      	ldrb	r3, [r3, #0]
 8007a60:	3301      	adds	r3, #1
 8007a62:	b2da      	uxtb	r2, r3
 8007a64:	4b5a      	ldr	r3, [pc, #360]	; (8007bd0 <checkAktifCalisma+0x1304>)
 8007a66:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8007a68:	4b59      	ldr	r3, [pc, #356]	; (8007bd0 <checkAktifCalisma+0x1304>)
 8007a6a:	781a      	ldrb	r2, [r3, #0]
 8007a6c:	4b59      	ldr	r3, [pc, #356]	; (8007bd4 <checkAktifCalisma+0x1308>)
 8007a6e:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8007a72:	4b56      	ldr	r3, [pc, #344]	; (8007bcc <checkAktifCalisma+0x1300>)
 8007a74:	781a      	ldrb	r2, [r3, #0]
 8007a76:	4b57      	ldr	r3, [pc, #348]	; (8007bd4 <checkAktifCalisma+0x1308>)
 8007a78:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8007a7a:	4b53      	ldr	r3, [pc, #332]	; (8007bc8 <checkAktifCalisma+0x12fc>)
 8007a7c:	781a      	ldrb	r2, [r3, #0]
 8007a7e:	4b55      	ldr	r3, [pc, #340]	; (8007bd4 <checkAktifCalisma+0x1308>)
 8007a80:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8007a82:	4b50      	ldr	r3, [pc, #320]	; (8007bc4 <checkAktifCalisma+0x12f8>)
 8007a84:	781a      	ldrb	r2, [r3, #0]
 8007a86:	4b53      	ldr	r3, [pc, #332]	; (8007bd4 <checkAktifCalisma+0x1308>)
 8007a88:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8007a8a:	4b4d      	ldr	r3, [pc, #308]	; (8007bc0 <checkAktifCalisma+0x12f4>)
 8007a8c:	781a      	ldrb	r2, [r3, #0]
 8007a8e:	4b51      	ldr	r3, [pc, #324]	; (8007bd4 <checkAktifCalisma+0x1308>)
 8007a90:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 8007a92:	4b51      	ldr	r3, [pc, #324]	; (8007bd8 <checkAktifCalisma+0x130c>)
 8007a94:	2201      	movs	r2, #1
 8007a96:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 8007a98:	4b44      	ldr	r3, [pc, #272]	; (8007bac <checkAktifCalisma+0x12e0>)
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 8007a9e:	4b47      	ldr	r3, [pc, #284]	; (8007bbc <checkAktifCalisma+0x12f0>)
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 8007aa4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007aa8:	484c      	ldr	r0, [pc, #304]	; (8007bdc <checkAktifCalisma+0x1310>)
 8007aaa:	f002 fab9 	bl	800a020 <HAL_GPIO_ReadPin>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d016      	beq.n	8007ae2 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 8007ab4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007ab8:	4848      	ldr	r0, [pc, #288]	; (8007bdc <checkAktifCalisma+0x1310>)
 8007aba:	f002 fab1 	bl	800a020 <HAL_GPIO_ReadPin>
 8007abe:	4603      	mov	r3, r0
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d00e      	beq.n	8007ae2 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8007ac4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007ac8:	4844      	ldr	r0, [pc, #272]	; (8007bdc <checkAktifCalisma+0x1310>)
 8007aca:	f002 faa9 	bl	800a020 <HAL_GPIO_ReadPin>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d006      	beq.n	8007ae2 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8007ad4:	2140      	movs	r1, #64	; 0x40
 8007ad6:	4836      	ldr	r0, [pc, #216]	; (8007bb0 <checkAktifCalisma+0x12e4>)
 8007ad8:	f002 faa2 	bl	800a020 <HAL_GPIO_ReadPin>
 8007adc:	4603      	mov	r3, r0
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d103      	bne.n	8007aea <checkAktifCalisma+0x121e>
			startBasili=1;
 8007ae2:	4b3f      	ldr	r3, [pc, #252]	; (8007be0 <checkAktifCalisma+0x1314>)
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	701a      	strb	r2, [r3, #0]
 8007ae8:	e002      	b.n	8007af0 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 8007aea:	4b3d      	ldr	r3, [pc, #244]	; (8007be0 <checkAktifCalisma+0x1314>)
 8007aec:	2200      	movs	r2, #0
 8007aee:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8007af0:	4b3b      	ldr	r3, [pc, #236]	; (8007be0 <checkAktifCalisma+0x1314>)
 8007af2:	781b      	ldrb	r3, [r3, #0]
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d014      	beq.n	8007b22 <checkAktifCalisma+0x1256>
 8007af8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007afc:	4837      	ldr	r0, [pc, #220]	; (8007bdc <checkAktifCalisma+0x1310>)
 8007afe:	f002 fa8f 	bl	800a020 <HAL_GPIO_ReadPin>
 8007b02:	4603      	mov	r3, r0
 8007b04:	2b01      	cmp	r3, #1
 8007b06:	d10c      	bne.n	8007b22 <checkAktifCalisma+0x1256>
			hataVar=1;
 8007b08:	4b36      	ldr	r3, [pc, #216]	; (8007be4 <checkAktifCalisma+0x1318>)
 8007b0a:	2201      	movs	r2, #1
 8007b0c:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 8007b0e:	2001      	movs	r0, #1
 8007b10:	f7fe f874 	bl	8005bfc <hataKoduLcdGoster>
			hata2EEPROM(1);
 8007b14:	2001      	movs	r0, #1
 8007b16:	f7fe fc27 	bl	8006368 <hata2EEPROM>
			acilstophatasi=1;
 8007b1a:	4b33      	ldr	r3, [pc, #204]	; (8007be8 <checkAktifCalisma+0x131c>)
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	701a      	strb	r2, [r3, #0]
 8007b20:	e018      	b.n	8007b54 <checkAktifCalisma+0x1288>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8007b22:	4b31      	ldr	r3, [pc, #196]	; (8007be8 <checkAktifCalisma+0x131c>)
 8007b24:	781b      	ldrb	r3, [r3, #0]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d014      	beq.n	8007b54 <checkAktifCalisma+0x1288>
 8007b2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007b2e:	482b      	ldr	r0, [pc, #172]	; (8007bdc <checkAktifCalisma+0x1310>)
 8007b30:	f002 fa76 	bl	800a020 <HAL_GPIO_ReadPin>
 8007b34:	4603      	mov	r3, r0
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d10c      	bne.n	8007b54 <checkAktifCalisma+0x1288>
 8007b3a:	4b29      	ldr	r3, [pc, #164]	; (8007be0 <checkAktifCalisma+0x1314>)
 8007b3c:	781b      	ldrb	r3, [r3, #0]
 8007b3e:	f083 0301 	eor.w	r3, r3, #1
 8007b42:	b2db      	uxtb	r3, r3
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d005      	beq.n	8007b54 <checkAktifCalisma+0x1288>
			acilstophatasi=0;
 8007b48:	4b27      	ldr	r3, [pc, #156]	; (8007be8 <checkAktifCalisma+0x131c>)
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 8007b4e:	2001      	movs	r0, #1
 8007b50:	f7fe f800 	bl	8005b54 <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 8007b54:	4b25      	ldr	r3, [pc, #148]	; (8007bec <checkAktifCalisma+0x1320>)
 8007b56:	781b      	ldrb	r3, [r3, #0]
 8007b58:	f083 0301 	eor.w	r3, r3, #1
 8007b5c:	b2db      	uxtb	r3, r3
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d04c      	beq.n	8007bfc <checkAktifCalisma+0x1330>
 8007b62:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007b66:	481d      	ldr	r0, [pc, #116]	; (8007bdc <checkAktifCalisma+0x1310>)
 8007b68:	f002 fa5a 	bl	800a020 <HAL_GPIO_ReadPin>
 8007b6c:	4603      	mov	r3, r0
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d003      	beq.n	8007b7a <checkAktifCalisma+0x12ae>
 8007b72:	4b1f      	ldr	r3, [pc, #124]	; (8007bf0 <checkAktifCalisma+0x1324>)
 8007b74:	781b      	ldrb	r3, [r3, #0]
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d040      	beq.n	8007bfc <checkAktifCalisma+0x1330>
 8007b7a:	4b1e      	ldr	r3, [pc, #120]	; (8007bf4 <checkAktifCalisma+0x1328>)
 8007b7c:	781b      	ldrb	r3, [r3, #0]
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d13c      	bne.n	8007bfc <checkAktifCalisma+0x1330>
			hataVar=1;
 8007b82:	4b18      	ldr	r3, [pc, #96]	; (8007be4 <checkAktifCalisma+0x1318>)
 8007b84:	2201      	movs	r2, #1
 8007b86:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 8007b88:	2002      	movs	r0, #2
 8007b8a:	f7fe f837 	bl	8005bfc <hataKoduLcdGoster>
			hata2EEPROM(2);
 8007b8e:	2002      	movs	r0, #2
 8007b90:	f7fe fbea 	bl	8006368 <hata2EEPROM>
			emniyetCercevesihatasi=1;
 8007b94:	4b18      	ldr	r3, [pc, #96]	; (8007bf8 <checkAktifCalisma+0x132c>)
 8007b96:	2201      	movs	r2, #1
 8007b98:	701a      	strb	r2, [r3, #0]
 8007b9a:	e047      	b.n	8007c2c <checkAktifCalisma+0x1360>
 8007b9c:	20000ce8 	.word	0x20000ce8
 8007ba0:	20000ce7 	.word	0x20000ce7
 8007ba4:	20000ce6 	.word	0x20000ce6
 8007ba8:	40010800 	.word	0x40010800
 8007bac:	20000cdc 	.word	0x20000cdc
 8007bb0:	40011000 	.word	0x40011000
 8007bb4:	20000ca3 	.word	0x20000ca3
 8007bb8:	20000cdf 	.word	0x20000cdf
 8007bbc:	20000cdd 	.word	0x20000cdd
 8007bc0:	20000c9a 	.word	0x20000c9a
 8007bc4:	20000c9b 	.word	0x20000c9b
 8007bc8:	200009c2 	.word	0x200009c2
 8007bcc:	200009c3 	.word	0x200009c3
 8007bd0:	20000c9c 	.word	0x20000c9c
 8007bd4:	20000b38 	.word	0x20000b38
 8007bd8:	20000cc9 	.word	0x20000cc9
 8007bdc:	40010c00 	.word	0x40010c00
 8007be0:	20000ceb 	.word	0x20000ceb
 8007be4:	20000cf2 	.word	0x20000cf2
 8007be8:	20000ced 	.word	0x20000ced
 8007bec:	20000cf4 	.word	0x20000cf4
 8007bf0:	20000cfe 	.word	0x20000cfe
 8007bf4:	20000ca1 	.word	0x20000ca1
 8007bf8:	20000cee 	.word	0x20000cee
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8007bfc:	4b97      	ldr	r3, [pc, #604]	; (8007e5c <checkAktifCalisma+0x1590>)
 8007bfe:	781b      	ldrb	r3, [r3, #0]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d013      	beq.n	8007c2c <checkAktifCalisma+0x1360>
 8007c04:	4b96      	ldr	r3, [pc, #600]	; (8007e60 <checkAktifCalisma+0x1594>)
 8007c06:	781b      	ldrb	r3, [r3, #0]
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d00f      	beq.n	8007c2c <checkAktifCalisma+0x1360>
 8007c0c:	4b95      	ldr	r3, [pc, #596]	; (8007e64 <checkAktifCalisma+0x1598>)
 8007c0e:	781b      	ldrb	r3, [r3, #0]
 8007c10:	f083 0301 	eor.w	r3, r3, #1
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d008      	beq.n	8007c2c <checkAktifCalisma+0x1360>
			emniyetCercevesihatasi=0;
 8007c1a:	4b90      	ldr	r3, [pc, #576]	; (8007e5c <checkAktifCalisma+0x1590>)
 8007c1c:	2200      	movs	r2, #0
 8007c1e:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 8007c20:	4b91      	ldr	r3, [pc, #580]	; (8007e68 <checkAktifCalisma+0x159c>)
 8007c22:	2200      	movs	r2, #0
 8007c24:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 8007c26:	2002      	movs	r0, #2
 8007c28:	f7fd ff94 	bl	8005b54 <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 8007c2c:	4b8f      	ldr	r3, [pc, #572]	; (8007e6c <checkAktifCalisma+0x15a0>)
 8007c2e:	781b      	ldrb	r3, [r3, #0]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d11c      	bne.n	8007c6e <checkAktifCalisma+0x13a2>
 8007c34:	4b8e      	ldr	r3, [pc, #568]	; (8007e70 <checkAktifCalisma+0x15a4>)
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	d118      	bne.n	8007c6e <checkAktifCalisma+0x13a2>
 8007c3c:	4b8d      	ldr	r3, [pc, #564]	; (8007e74 <checkAktifCalisma+0x15a8>)
 8007c3e:	781b      	ldrb	r3, [r3, #0]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d014      	beq.n	8007c6e <checkAktifCalisma+0x13a2>
 8007c44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007c48:	488b      	ldr	r0, [pc, #556]	; (8007e78 <checkAktifCalisma+0x15ac>)
 8007c4a:	f002 f9e9 	bl	800a020 <HAL_GPIO_ReadPin>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	d10c      	bne.n	8007c6e <checkAktifCalisma+0x13a2>
			hataVar=1;
 8007c54:	4b89      	ldr	r3, [pc, #548]	; (8007e7c <checkAktifCalisma+0x15b0>)
 8007c56:	2201      	movs	r2, #1
 8007c58:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 8007c5a:	2003      	movs	r0, #3
 8007c5c:	f7fd ffce 	bl	8005bfc <hataKoduLcdGoster>
			hata2EEPROM(3);
 8007c60:	2003      	movs	r0, #3
 8007c62:	f7fe fb81 	bl	8006368 <hata2EEPROM>
			basinchatasi=1;
 8007c66:	4b86      	ldr	r3, [pc, #536]	; (8007e80 <checkAktifCalisma+0x15b4>)
 8007c68:	2201      	movs	r2, #1
 8007c6a:	701a      	strb	r2, [r3, #0]
 8007c6c:	e015      	b.n	8007c9a <checkAktifCalisma+0x13ce>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 8007c6e:	4b84      	ldr	r3, [pc, #528]	; (8007e80 <checkAktifCalisma+0x15b4>)
 8007c70:	781b      	ldrb	r3, [r3, #0]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d011      	beq.n	8007c9a <checkAktifCalisma+0x13ce>
 8007c76:	4b7d      	ldr	r3, [pc, #500]	; (8007e6c <checkAktifCalisma+0x15a0>)
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	2b01      	cmp	r3, #1
 8007c7c:	d10d      	bne.n	8007c9a <checkAktifCalisma+0x13ce>
 8007c7e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007c82:	4880      	ldr	r0, [pc, #512]	; (8007e84 <checkAktifCalisma+0x15b8>)
 8007c84:	f002 f9cc 	bl	800a020 <HAL_GPIO_ReadPin>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d105      	bne.n	8007c9a <checkAktifCalisma+0x13ce>
			basinchatasi=0;
 8007c8e:	4b7c      	ldr	r3, [pc, #496]	; (8007e80 <checkAktifCalisma+0x15b4>)
 8007c90:	2200      	movs	r2, #0
 8007c92:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 8007c94:	2003      	movs	r0, #3
 8007c96:	f7fd ff5d 	bl	8005b54 <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8007c9a:	4b7b      	ldr	r3, [pc, #492]	; (8007e88 <checkAktifCalisma+0x15bc>)
 8007c9c:	781b      	ldrb	r3, [r3, #0]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d103      	bne.n	8007caa <checkAktifCalisma+0x13de>
 8007ca2:	4b7a      	ldr	r3, [pc, #488]	; (8007e8c <checkAktifCalisma+0x15c0>)
 8007ca4:	781b      	ldrb	r3, [r3, #0]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d01c      	beq.n	8007ce4 <checkAktifCalisma+0x1418>
 8007caa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007cae:	4878      	ldr	r0, [pc, #480]	; (8007e90 <checkAktifCalisma+0x15c4>)
 8007cb0:	f002 f9b6 	bl	800a020 <HAL_GPIO_ReadPin>
 8007cb4:	4603      	mov	r3, r0
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	d114      	bne.n	8007ce4 <checkAktifCalisma+0x1418>
 8007cba:	4b76      	ldr	r3, [pc, #472]	; (8007e94 <checkAktifCalisma+0x15c8>)
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d003      	beq.n	8007cca <checkAktifCalisma+0x13fe>
 8007cc2:	4b74      	ldr	r3, [pc, #464]	; (8007e94 <checkAktifCalisma+0x15c8>)
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	2b03      	cmp	r3, #3
 8007cc8:	d10c      	bne.n	8007ce4 <checkAktifCalisma+0x1418>
			hataVar=1;
 8007cca:	4b6c      	ldr	r3, [pc, #432]	; (8007e7c <checkAktifCalisma+0x15b0>)
 8007ccc:	2201      	movs	r2, #1
 8007cce:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 8007cd0:	2004      	movs	r0, #4
 8007cd2:	f7fd ff93 	bl	8005bfc <hataKoduLcdGoster>
			hata2EEPROM(4);
 8007cd6:	2004      	movs	r0, #4
 8007cd8:	f7fe fb46 	bl	8006368 <hata2EEPROM>
			katkapisivicihatasi=1;
 8007cdc:	4b6e      	ldr	r3, [pc, #440]	; (8007e98 <checkAktifCalisma+0x15cc>)
 8007cde:	2201      	movs	r2, #1
 8007ce0:	701a      	strb	r2, [r3, #0]
 8007ce2:	e01f      	b.n	8007d24 <checkAktifCalisma+0x1458>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8007ce4:	4b6c      	ldr	r3, [pc, #432]	; (8007e98 <checkAktifCalisma+0x15cc>)
 8007ce6:	781b      	ldrb	r3, [r3, #0]
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d01b      	beq.n	8007d24 <checkAktifCalisma+0x1458>
 8007cec:	4b6b      	ldr	r3, [pc, #428]	; (8007e9c <checkAktifCalisma+0x15d0>)
 8007cee:	781b      	ldrb	r3, [r3, #0]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d017      	beq.n	8007d24 <checkAktifCalisma+0x1458>
 8007cf4:	4b64      	ldr	r3, [pc, #400]	; (8007e88 <checkAktifCalisma+0x15bc>)
 8007cf6:	781b      	ldrb	r3, [r3, #0]
 8007cf8:	f083 0301 	eor.w	r3, r3, #1
 8007cfc:	b2db      	uxtb	r3, r3
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d010      	beq.n	8007d24 <checkAktifCalisma+0x1458>
 8007d02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007d06:	4862      	ldr	r0, [pc, #392]	; (8007e90 <checkAktifCalisma+0x15c4>)
 8007d08:	f002 f98a 	bl	800a020 <HAL_GPIO_ReadPin>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d108      	bne.n	8007d24 <checkAktifCalisma+0x1458>
			katkapisivicihatasi=0;
 8007d12:	4b61      	ldr	r3, [pc, #388]	; (8007e98 <checkAktifCalisma+0x15cc>)
 8007d14:	2200      	movs	r2, #0
 8007d16:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 8007d18:	4b5c      	ldr	r3, [pc, #368]	; (8007e8c <checkAktifCalisma+0x15c0>)
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 8007d1e:	2004      	movs	r0, #4
 8007d20:	f7fd ff18 	bl	8005b54 <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8007d24:	4b58      	ldr	r3, [pc, #352]	; (8007e88 <checkAktifCalisma+0x15bc>)
 8007d26:	781b      	ldrb	r3, [r3, #0]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d103      	bne.n	8007d34 <checkAktifCalisma+0x1468>
 8007d2c:	4b5c      	ldr	r3, [pc, #368]	; (8007ea0 <checkAktifCalisma+0x15d4>)
 8007d2e:	781b      	ldrb	r3, [r3, #0]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d01c      	beq.n	8007d6e <checkAktifCalisma+0x14a2>
 8007d34:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007d38:	4855      	ldr	r0, [pc, #340]	; (8007e90 <checkAktifCalisma+0x15c4>)
 8007d3a:	f002 f971 	bl	800a020 <HAL_GPIO_ReadPin>
 8007d3e:	4603      	mov	r3, r0
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d114      	bne.n	8007d6e <checkAktifCalisma+0x14a2>
 8007d44:	4b53      	ldr	r3, [pc, #332]	; (8007e94 <checkAktifCalisma+0x15c8>)
 8007d46:	781b      	ldrb	r3, [r3, #0]
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d003      	beq.n	8007d54 <checkAktifCalisma+0x1488>
 8007d4c:	4b51      	ldr	r3, [pc, #324]	; (8007e94 <checkAktifCalisma+0x15c8>)
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	2b03      	cmp	r3, #3
 8007d52:	d10c      	bne.n	8007d6e <checkAktifCalisma+0x14a2>
			hataVar=1;
 8007d54:	4b49      	ldr	r3, [pc, #292]	; (8007e7c <checkAktifCalisma+0x15b0>)
 8007d56:	2201      	movs	r2, #1
 8007d58:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 8007d5a:	2005      	movs	r0, #5
 8007d5c:	f7fd ff4e 	bl	8005bfc <hataKoduLcdGoster>
			hata2EEPROM(5);
 8007d60:	2005      	movs	r0, #5
 8007d62:	f7fe fb01 	bl	8006368 <hata2EEPROM>
			tablakapisivicihatasi=1;
 8007d66:	4b4f      	ldr	r3, [pc, #316]	; (8007ea4 <checkAktifCalisma+0x15d8>)
 8007d68:	2201      	movs	r2, #1
 8007d6a:	701a      	strb	r2, [r3, #0]
 8007d6c:	e023      	b.n	8007db6 <checkAktifCalisma+0x14ea>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 8007d6e:	4b4d      	ldr	r3, [pc, #308]	; (8007ea4 <checkAktifCalisma+0x15d8>)
 8007d70:	781b      	ldrb	r3, [r3, #0]
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d01f      	beq.n	8007db6 <checkAktifCalisma+0x14ea>
 8007d76:	4b49      	ldr	r3, [pc, #292]	; (8007e9c <checkAktifCalisma+0x15d0>)
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d01b      	beq.n	8007db6 <checkAktifCalisma+0x14ea>
 8007d7e:	4b42      	ldr	r3, [pc, #264]	; (8007e88 <checkAktifCalisma+0x15bc>)
 8007d80:	781b      	ldrb	r3, [r3, #0]
 8007d82:	f083 0301 	eor.w	r3, r3, #1
 8007d86:	b2db      	uxtb	r3, r3
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d014      	beq.n	8007db6 <checkAktifCalisma+0x14ea>
 8007d8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007d90:	483f      	ldr	r0, [pc, #252]	; (8007e90 <checkAktifCalisma+0x15c4>)
 8007d92:	f002 f945 	bl	800a020 <HAL_GPIO_ReadPin>
 8007d96:	4603      	mov	r3, r0
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d10c      	bne.n	8007db6 <checkAktifCalisma+0x14ea>
 8007d9c:	4b3f      	ldr	r3, [pc, #252]	; (8007e9c <checkAktifCalisma+0x15d0>)
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d008      	beq.n	8007db6 <checkAktifCalisma+0x14ea>
			tablakapisivicihatasi=0;
 8007da4:	4b3f      	ldr	r3, [pc, #252]	; (8007ea4 <checkAktifCalisma+0x15d8>)
 8007da6:	2200      	movs	r2, #0
 8007da8:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 8007daa:	4b3d      	ldr	r3, [pc, #244]	; (8007ea0 <checkAktifCalisma+0x15d4>)
 8007dac:	2200      	movs	r2, #0
 8007dae:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 8007db0:	2005      	movs	r0, #5
 8007db2:	f7fd fecf 	bl	8005b54 <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 8007db6:	4b2f      	ldr	r3, [pc, #188]	; (8007e74 <checkAktifCalisma+0x15a8>)
 8007db8:	781b      	ldrb	r3, [r3, #0]
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d107      	bne.n	8007dce <checkAktifCalisma+0x1502>
 8007dbe:	4b29      	ldr	r3, [pc, #164]	; (8007e64 <checkAktifCalisma+0x1598>)
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d103      	bne.n	8007dce <checkAktifCalisma+0x1502>
 8007dc6:	4b38      	ldr	r3, [pc, #224]	; (8007ea8 <checkAktifCalisma+0x15dc>)
 8007dc8:	781b      	ldrb	r3, [r3, #0]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d014      	beq.n	8007df8 <checkAktifCalisma+0x152c>
		    if(millis-timer4>=makineCalismaTmr) {
 8007dce:	4b37      	ldr	r3, [pc, #220]	; (8007eac <checkAktifCalisma+0x15e0>)
 8007dd0:	681a      	ldr	r2, [r3, #0]
 8007dd2:	4b37      	ldr	r3, [pc, #220]	; (8007eb0 <checkAktifCalisma+0x15e4>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	1ad3      	subs	r3, r2, r3
 8007dd8:	4a36      	ldr	r2, [pc, #216]	; (8007eb4 <checkAktifCalisma+0x15e8>)
 8007dda:	7812      	ldrb	r2, [r2, #0]
 8007ddc:	4293      	cmp	r3, r2
 8007dde:	d30b      	bcc.n	8007df8 <checkAktifCalisma+0x152c>
			  	hataVar=1;
 8007de0:	4b26      	ldr	r3, [pc, #152]	; (8007e7c <checkAktifCalisma+0x15b0>)
 8007de2:	2201      	movs	r2, #1
 8007de4:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 8007de6:	2006      	movs	r0, #6
 8007de8:	f7fd ff08 	bl	8005bfc <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 8007dec:	2006      	movs	r0, #6
 8007dee:	f7fe fabb 	bl	8006368 <hata2EEPROM>
			  	maksimumcalismahatasi=1;
 8007df2:	4b31      	ldr	r3, [pc, #196]	; (8007eb8 <checkAktifCalisma+0x15ec>)
 8007df4:	2201      	movs	r2, #1
 8007df6:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8007df8:	4b2f      	ldr	r3, [pc, #188]	; (8007eb8 <checkAktifCalisma+0x15ec>)
 8007dfa:	781b      	ldrb	r3, [r3, #0]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d013      	beq.n	8007e28 <checkAktifCalisma+0x155c>
 8007e00:	2108      	movs	r1, #8
 8007e02:	4823      	ldr	r0, [pc, #140]	; (8007e90 <checkAktifCalisma+0x15c4>)
 8007e04:	f002 f90c 	bl	800a020 <HAL_GPIO_ReadPin>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d00c      	beq.n	8007e28 <checkAktifCalisma+0x155c>
 8007e0e:	4b1e      	ldr	r3, [pc, #120]	; (8007e88 <checkAktifCalisma+0x15bc>)
 8007e10:	781b      	ldrb	r3, [r3, #0]
 8007e12:	f083 0301 	eor.w	r3, r3, #1
 8007e16:	b2db      	uxtb	r3, r3
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d005      	beq.n	8007e28 <checkAktifCalisma+0x155c>
			maksimumcalismahatasi=0;
 8007e1c:	4b26      	ldr	r3, [pc, #152]	; (8007eb8 <checkAktifCalisma+0x15ec>)
 8007e1e:	2200      	movs	r2, #0
 8007e20:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 8007e22:	2006      	movs	r0, #6
 8007e24:	f7fd fe96 	bl	8005b54 <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8007e28:	4b24      	ldr	r3, [pc, #144]	; (8007ebc <checkAktifCalisma+0x15f0>)
 8007e2a:	781b      	ldrb	r3, [r3, #0]
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d10b      	bne.n	8007e48 <checkAktifCalisma+0x157c>
 8007e30:	4b0c      	ldr	r3, [pc, #48]	; (8007e64 <checkAktifCalisma+0x1598>)
 8007e32:	781b      	ldrb	r3, [r3, #0]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d107      	bne.n	8007e48 <checkAktifCalisma+0x157c>
 8007e38:	4b21      	ldr	r3, [pc, #132]	; (8007ec0 <checkAktifCalisma+0x15f4>)
 8007e3a:	781b      	ldrb	r3, [r3, #0]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d103      	bne.n	8007e48 <checkAktifCalisma+0x157c>
 8007e40:	4b19      	ldr	r3, [pc, #100]	; (8007ea8 <checkAktifCalisma+0x15dc>)
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d03f      	beq.n	8007ec8 <checkAktifCalisma+0x15fc>
			makineCalisiyor=0;
 8007e48:	4b1e      	ldr	r3, [pc, #120]	; (8007ec4 <checkAktifCalisma+0x15f8>)
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 8007e4e:	4b0f      	ldr	r3, [pc, #60]	; (8007e8c <checkAktifCalisma+0x15c0>)
 8007e50:	2201      	movs	r2, #1
 8007e52:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 8007e54:	4b12      	ldr	r3, [pc, #72]	; (8007ea0 <checkAktifCalisma+0x15d4>)
 8007e56:	2201      	movs	r2, #1
 8007e58:	701a      	strb	r2, [r3, #0]
 8007e5a:	e03c      	b.n	8007ed6 <checkAktifCalisma+0x160a>
 8007e5c:	20000cee 	.word	0x20000cee
 8007e60:	20000cf4 	.word	0x20000cf4
 8007e64:	20000cd5 	.word	0x20000cd5
 8007e68:	20000cfe 	.word	0x20000cfe
 8007e6c:	20000ca0 	.word	0x20000ca0
 8007e70:	20000ca4 	.word	0x20000ca4
 8007e74:	20000cf1 	.word	0x20000cf1
 8007e78:	40011000 	.word	0x40011000
 8007e7c:	20000cf2 	.word	0x20000cf2
 8007e80:	20000cfb 	.word	0x20000cfb
 8007e84:	40010c00 	.word	0x40010c00
 8007e88:	20000ceb 	.word	0x20000ceb
 8007e8c:	20000cff 	.word	0x20000cff
 8007e90:	40010800 	.word	0x40010800
 8007e94:	20000ca5 	.word	0x20000ca5
 8007e98:	20000cfc 	.word	0x20000cfc
 8007e9c:	20000cdf 	.word	0x20000cdf
 8007ea0:	20000d00 	.word	0x20000d00
 8007ea4:	20000cfd 	.word	0x20000cfd
 8007ea8:	20000cd4 	.word	0x20000cd4
 8007eac:	20000bd4 	.word	0x20000bd4
 8007eb0:	20000be8 	.word	0x20000be8
 8007eb4:	20000cb5 	.word	0x20000cb5
 8007eb8:	20000cec 	.word	0x20000cec
 8007ebc:	20000cd2 	.word	0x20000cd2
 8007ec0:	20000cd3 	.word	0x20000cd3
 8007ec4:	20000cf3 	.word	0x20000cf3
		} else {
			makineCalisiyor=1;
 8007ec8:	4b1e      	ldr	r3, [pc, #120]	; (8007f44 <checkAktifCalisma+0x1678>)
 8007eca:	2201      	movs	r2, #1
 8007ecc:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 8007ece:	4b1e      	ldr	r3, [pc, #120]	; (8007f48 <checkAktifCalisma+0x167c>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	4a1e      	ldr	r2, [pc, #120]	; (8007f4c <checkAktifCalisma+0x1680>)
 8007ed4:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8007ed6:	4b1e      	ldr	r3, [pc, #120]	; (8007f50 <checkAktifCalisma+0x1684>)
 8007ed8:	781b      	ldrb	r3, [r3, #0]
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d02f      	beq.n	8007f3e <checkAktifCalisma+0x1672>
 8007ede:	4b1d      	ldr	r3, [pc, #116]	; (8007f54 <checkAktifCalisma+0x1688>)
 8007ee0:	781b      	ldrb	r3, [r3, #0]
 8007ee2:	f083 0301 	eor.w	r3, r3, #1
 8007ee6:	b2db      	uxtb	r3, r3
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d028      	beq.n	8007f3e <checkAktifCalisma+0x1672>
 8007eec:	4b1a      	ldr	r3, [pc, #104]	; (8007f58 <checkAktifCalisma+0x168c>)
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	f083 0301 	eor.w	r3, r3, #1
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d021      	beq.n	8007f3e <checkAktifCalisma+0x1672>
 8007efa:	4b18      	ldr	r3, [pc, #96]	; (8007f5c <checkAktifCalisma+0x1690>)
 8007efc:	781b      	ldrb	r3, [r3, #0]
 8007efe:	f083 0301 	eor.w	r3, r3, #1
 8007f02:	b2db      	uxtb	r3, r3
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d01a      	beq.n	8007f3e <checkAktifCalisma+0x1672>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8007f08:	4b15      	ldr	r3, [pc, #84]	; (8007f60 <checkAktifCalisma+0x1694>)
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	f083 0301 	eor.w	r3, r3, #1
 8007f10:	b2db      	uxtb	r3, r3
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d013      	beq.n	8007f3e <checkAktifCalisma+0x1672>
 8007f16:	4b13      	ldr	r3, [pc, #76]	; (8007f64 <checkAktifCalisma+0x1698>)
 8007f18:	781b      	ldrb	r3, [r3, #0]
 8007f1a:	f083 0301 	eor.w	r3, r3, #1
 8007f1e:	b2db      	uxtb	r3, r3
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d00c      	beq.n	8007f3e <checkAktifCalisma+0x1672>
 8007f24:	4b10      	ldr	r3, [pc, #64]	; (8007f68 <checkAktifCalisma+0x169c>)
 8007f26:	781b      	ldrb	r3, [r3, #0]
 8007f28:	f083 0301 	eor.w	r3, r3, #1
 8007f2c:	b2db      	uxtb	r3, r3
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d005      	beq.n	8007f3e <checkAktifCalisma+0x1672>
			hataVar=0;
 8007f32:	4b07      	ldr	r3, [pc, #28]	; (8007f50 <checkAktifCalisma+0x1684>)
 8007f34:	2200      	movs	r2, #0
 8007f36:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 8007f38:	2007      	movs	r0, #7
 8007f3a:	f7fd fe0b 	bl	8005b54 <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 8007f3e:	bf00      	nop
 8007f40:	bd80      	pop	{r7, pc}
 8007f42:	bf00      	nop
 8007f44:	20000cf3 	.word	0x20000cf3
 8007f48:	20000bd4 	.word	0x20000bd4
 8007f4c:	20000be8 	.word	0x20000be8
 8007f50:	20000cf2 	.word	0x20000cf2
 8007f54:	20000ced 	.word	0x20000ced
 8007f58:	20000cee 	.word	0x20000cee
 8007f5c:	20000cfb 	.word	0x20000cfb
 8007f60:	20000cfc 	.word	0x20000cfc
 8007f64:	20000cfd 	.word	0x20000cfd
 8007f68:	20000cec 	.word	0x20000cec

08007f6c <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8007f70:	4b8b      	ldr	r3, [pc, #556]	; (80081a0 <checkDemoModCalisma+0x234>)
 8007f72:	781b      	ldrb	r3, [r3, #0]
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	f040 8229 	bne.w	80083cc <checkDemoModCalisma+0x460>
 8007f7a:	4b8a      	ldr	r3, [pc, #552]	; (80081a4 <checkDemoModCalisma+0x238>)
 8007f7c:	781b      	ldrb	r3, [r3, #0]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	f000 8224 	beq.w	80083cc <checkDemoModCalisma+0x460>
 8007f84:	4b88      	ldr	r3, [pc, #544]	; (80081a8 <checkDemoModCalisma+0x23c>)
 8007f86:	781b      	ldrb	r3, [r3, #0]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	f040 821f 	bne.w	80083cc <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8007f8e:	2102      	movs	r1, #2
 8007f90:	4886      	ldr	r0, [pc, #536]	; (80081ac <checkDemoModCalisma+0x240>)
 8007f92:	f002 f845 	bl	800a020 <HAL_GPIO_ReadPin>
 8007f96:	4603      	mov	r3, r0
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d11d      	bne.n	8007fd8 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 8007f9c:	4b84      	ldr	r3, [pc, #528]	; (80081b0 <checkDemoModCalisma+0x244>)
 8007f9e:	781b      	ldrb	r3, [r3, #0]
 8007fa0:	f083 0301 	eor.w	r3, r3, #1
 8007fa4:	b2db      	uxtb	r3, r3
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d016      	beq.n	8007fd8 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 8007faa:	4b82      	ldr	r3, [pc, #520]	; (80081b4 <checkDemoModCalisma+0x248>)
 8007fac:	781b      	ldrb	r3, [r3, #0]
 8007fae:	f083 0301 	eor.w	r3, r3, #1
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d00f      	beq.n	8007fd8 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 8007fb8:	4b7f      	ldr	r3, [pc, #508]	; (80081b8 <checkDemoModCalisma+0x24c>)
 8007fba:	781b      	ldrb	r3, [r3, #0]
 8007fbc:	f083 0301 	eor.w	r3, r3, #1
 8007fc0:	b2db      	uxtb	r3, r3
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d008      	beq.n	8007fd8 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	2104      	movs	r1, #4
 8007fca:	487c      	ldr	r0, [pc, #496]	; (80081bc <checkDemoModCalisma+0x250>)
 8007fcc:	f002 f83f 	bl	800a04e <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 8007fd0:	4b7b      	ldr	r3, [pc, #492]	; (80081c0 <checkDemoModCalisma+0x254>)
 8007fd2:	2201      	movs	r2, #1
 8007fd4:	701a      	strb	r2, [r3, #0]
 8007fd6:	e00e      	b.n	8007ff6 <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8007fd8:	2102      	movs	r1, #2
 8007fda:	4874      	ldr	r0, [pc, #464]	; (80081ac <checkDemoModCalisma+0x240>)
 8007fdc:	f002 f820 	bl	800a020 <HAL_GPIO_ReadPin>
 8007fe0:	4603      	mov	r3, r0
 8007fe2:	2b01      	cmp	r3, #1
 8007fe4:	d107      	bne.n	8007ff6 <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	2104      	movs	r1, #4
 8007fea:	4874      	ldr	r0, [pc, #464]	; (80081bc <checkDemoModCalisma+0x250>)
 8007fec:	f002 f82f 	bl	800a04e <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 8007ff0:	4b73      	ldr	r3, [pc, #460]	; (80081c0 <checkDemoModCalisma+0x254>)
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8007ff6:	4b72      	ldr	r3, [pc, #456]	; (80081c0 <checkDemoModCalisma+0x254>)
 8007ff8:	781b      	ldrb	r3, [r3, #0]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d10b      	bne.n	8008016 <checkDemoModCalisma+0xaa>
 8007ffe:	4b6d      	ldr	r3, [pc, #436]	; (80081b4 <checkDemoModCalisma+0x248>)
 8008000:	781b      	ldrb	r3, [r3, #0]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d107      	bne.n	8008016 <checkDemoModCalisma+0xaa>
 8008006:	4b6c      	ldr	r3, [pc, #432]	; (80081b8 <checkDemoModCalisma+0x24c>)
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d103      	bne.n	8008016 <checkDemoModCalisma+0xaa>
 800800e:	4b68      	ldr	r3, [pc, #416]	; (80081b0 <checkDemoModCalisma+0x244>)
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	2b00      	cmp	r3, #0
 8008014:	d00c      	beq.n	8008030 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8008016:	2201      	movs	r2, #1
 8008018:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800801c:	4867      	ldr	r0, [pc, #412]	; (80081bc <checkDemoModCalisma+0x250>)
 800801e:	f002 f816 	bl	800a04e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8008022:	2201      	movs	r2, #1
 8008024:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008028:	4864      	ldr	r0, [pc, #400]	; (80081bc <checkDemoModCalisma+0x250>)
 800802a:	f002 f810 	bl	800a04e <HAL_GPIO_WritePin>
 800802e:	e00b      	b.n	8008048 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8008030:	2200      	movs	r2, #0
 8008032:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008036:	4861      	ldr	r0, [pc, #388]	; (80081bc <checkDemoModCalisma+0x250>)
 8008038:	f002 f809 	bl	800a04e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 800803c:	2200      	movs	r2, #0
 800803e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008042:	485e      	ldr	r0, [pc, #376]	; (80081bc <checkDemoModCalisma+0x250>)
 8008044:	f002 f803 	bl	800a04e <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8008048:	2102      	movs	r1, #2
 800804a:	4858      	ldr	r0, [pc, #352]	; (80081ac <checkDemoModCalisma+0x240>)
 800804c:	f001 ffe8 	bl	800a020 <HAL_GPIO_ReadPin>
 8008050:	4603      	mov	r3, r0
 8008052:	2b01      	cmp	r3, #1
 8008054:	d10d      	bne.n	8008072 <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8008056:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800805a:	4854      	ldr	r0, [pc, #336]	; (80081ac <checkDemoModCalisma+0x240>)
 800805c:	f001 ffe0 	bl	800a020 <HAL_GPIO_ReadPin>
 8008060:	4603      	mov	r3, r0
 8008062:	2b00      	cmp	r3, #0
 8008064:	d105      	bne.n	8008072 <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 8008066:	4b56      	ldr	r3, [pc, #344]	; (80081c0 <checkDemoModCalisma+0x254>)
 8008068:	781b      	ldrb	r3, [r3, #0]
 800806a:	f083 0301 	eor.w	r3, r3, #1
 800806e:	b2db      	uxtb	r3, r3
 8008070:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8008072:	2102      	movs	r1, #2
 8008074:	484d      	ldr	r0, [pc, #308]	; (80081ac <checkDemoModCalisma+0x240>)
 8008076:	f001 ffd3 	bl	800a020 <HAL_GPIO_ReadPin>
 800807a:	4603      	mov	r3, r0
 800807c:	2b01      	cmp	r3, #1
 800807e:	d125      	bne.n	80080cc <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8008080:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008084:	4849      	ldr	r0, [pc, #292]	; (80081ac <checkDemoModCalisma+0x240>)
 8008086:	f001 ffcb 	bl	800a020 <HAL_GPIO_ReadPin>
 800808a:	4603      	mov	r3, r0
 800808c:	2b00      	cmp	r3, #0
 800808e:	d11d      	bne.n	80080cc <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 8008090:	4b4b      	ldr	r3, [pc, #300]	; (80081c0 <checkDemoModCalisma+0x254>)
 8008092:	781b      	ldrb	r3, [r3, #0]
 8008094:	f083 0301 	eor.w	r3, r3, #1
 8008098:	b2db      	uxtb	r3, r3
 800809a:	2b00      	cmp	r3, #0
 800809c:	d016      	beq.n	80080cc <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 800809e:	4b44      	ldr	r3, [pc, #272]	; (80081b0 <checkDemoModCalisma+0x244>)
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	f083 0301 	eor.w	r3, r3, #1
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d00f      	beq.n	80080cc <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 80080ac:	4b42      	ldr	r3, [pc, #264]	; (80081b8 <checkDemoModCalisma+0x24c>)
 80080ae:	781b      	ldrb	r3, [r3, #0]
 80080b0:	f083 0301 	eor.w	r3, r3, #1
 80080b4:	b2db      	uxtb	r3, r3
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d008      	beq.n	80080cc <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 80080ba:	2201      	movs	r2, #1
 80080bc:	2120      	movs	r1, #32
 80080be:	483b      	ldr	r0, [pc, #236]	; (80081ac <checkDemoModCalisma+0x240>)
 80080c0:	f001 ffc5 	bl	800a04e <HAL_GPIO_WritePin>
			demoDevYukari=1;
 80080c4:	4b3b      	ldr	r3, [pc, #236]	; (80081b4 <checkDemoModCalisma+0x248>)
 80080c6:	2201      	movs	r2, #1
 80080c8:	701a      	strb	r2, [r3, #0]
 80080ca:	e007      	b.n	80080dc <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 80080cc:	2200      	movs	r2, #0
 80080ce:	2120      	movs	r1, #32
 80080d0:	4836      	ldr	r0, [pc, #216]	; (80081ac <checkDemoModCalisma+0x240>)
 80080d2:	f001 ffbc 	bl	800a04e <HAL_GPIO_WritePin>
			demoDevYukari=0;
 80080d6:	4b37      	ldr	r3, [pc, #220]	; (80081b4 <checkDemoModCalisma+0x248>)
 80080d8:	2200      	movs	r2, #0
 80080da:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 80080dc:	2102      	movs	r1, #2
 80080de:	4833      	ldr	r0, [pc, #204]	; (80081ac <checkDemoModCalisma+0x240>)
 80080e0:	f001 ff9e 	bl	800a020 <HAL_GPIO_ReadPin>
 80080e4:	4603      	mov	r3, r0
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d125      	bne.n	8008136 <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 80080ea:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80080ee:	482f      	ldr	r0, [pc, #188]	; (80081ac <checkDemoModCalisma+0x240>)
 80080f0:	f001 ff96 	bl	800a020 <HAL_GPIO_ReadPin>
 80080f4:	4603      	mov	r3, r0
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d11d      	bne.n	8008136 <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 80080fa:	4b31      	ldr	r3, [pc, #196]	; (80081c0 <checkDemoModCalisma+0x254>)
 80080fc:	781b      	ldrb	r3, [r3, #0]
 80080fe:	f083 0301 	eor.w	r3, r3, #1
 8008102:	b2db      	uxtb	r3, r3
 8008104:	2b00      	cmp	r3, #0
 8008106:	d016      	beq.n	8008136 <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 8008108:	4b2a      	ldr	r3, [pc, #168]	; (80081b4 <checkDemoModCalisma+0x248>)
 800810a:	781b      	ldrb	r3, [r3, #0]
 800810c:	f083 0301 	eor.w	r3, r3, #1
 8008110:	b2db      	uxtb	r3, r3
 8008112:	2b00      	cmp	r3, #0
 8008114:	d00f      	beq.n	8008136 <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 8008116:	4b26      	ldr	r3, [pc, #152]	; (80081b0 <checkDemoModCalisma+0x244>)
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	f083 0301 	eor.w	r3, r3, #1
 800811e:	b2db      	uxtb	r3, r3
 8008120:	2b00      	cmp	r3, #0
 8008122:	d008      	beq.n	8008136 <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8008124:	2201      	movs	r2, #1
 8008126:	2110      	movs	r1, #16
 8008128:	4820      	ldr	r0, [pc, #128]	; (80081ac <checkDemoModCalisma+0x240>)
 800812a:	f001 ff90 	bl	800a04e <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 800812e:	4b22      	ldr	r3, [pc, #136]	; (80081b8 <checkDemoModCalisma+0x24c>)
 8008130:	2201      	movs	r2, #1
 8008132:	701a      	strb	r2, [r3, #0]
 8008134:	e007      	b.n	8008146 <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8008136:	2200      	movs	r2, #0
 8008138:	2110      	movs	r1, #16
 800813a:	481c      	ldr	r0, [pc, #112]	; (80081ac <checkDemoModCalisma+0x240>)
 800813c:	f001 ff87 	bl	800a04e <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 8008140:	4b1d      	ldr	r3, [pc, #116]	; (80081b8 <checkDemoModCalisma+0x24c>)
 8008142:	2200      	movs	r2, #0
 8008144:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8008146:	2104      	movs	r1, #4
 8008148:	4818      	ldr	r0, [pc, #96]	; (80081ac <checkDemoModCalisma+0x240>)
 800814a:	f001 ff69 	bl	800a020 <HAL_GPIO_ReadPin>
 800814e:	4603      	mov	r3, r0
 8008150:	2b00      	cmp	r3, #0
 8008152:	d139      	bne.n	80081c8 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 8008154:	4b1a      	ldr	r3, [pc, #104]	; (80081c0 <checkDemoModCalisma+0x254>)
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	f083 0301 	eor.w	r3, r3, #1
 800815c:	b2db      	uxtb	r3, r3
 800815e:	2b00      	cmp	r3, #0
 8008160:	d032      	beq.n	80081c8 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 8008162:	4b15      	ldr	r3, [pc, #84]	; (80081b8 <checkDemoModCalisma+0x24c>)
 8008164:	781b      	ldrb	r3, [r3, #0]
 8008166:	f083 0301 	eor.w	r3, r3, #1
 800816a:	b2db      	uxtb	r3, r3
 800816c:	2b00      	cmp	r3, #0
 800816e:	d02b      	beq.n	80081c8 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 8008170:	4b10      	ldr	r3, [pc, #64]	; (80081b4 <checkDemoModCalisma+0x248>)
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	f083 0301 	eor.w	r3, r3, #1
 8008178:	b2db      	uxtb	r3, r3
 800817a:	2b00      	cmp	r3, #0
 800817c:	d024      	beq.n	80081c8 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 800817e:	2201      	movs	r2, #1
 8008180:	2102      	movs	r1, #2
 8008182:	480e      	ldr	r0, [pc, #56]	; (80081bc <checkDemoModCalisma+0x250>)
 8008184:	f001 ff63 	bl	800a04e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8008188:	2201      	movs	r2, #1
 800818a:	2101      	movs	r1, #1
 800818c:	480b      	ldr	r0, [pc, #44]	; (80081bc <checkDemoModCalisma+0x250>)
 800818e:	f001 ff5e 	bl	800a04e <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 8008192:	4b07      	ldr	r3, [pc, #28]	; (80081b0 <checkDemoModCalisma+0x244>)
 8008194:	2201      	movs	r2, #1
 8008196:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 8008198:	4b0a      	ldr	r3, [pc, #40]	; (80081c4 <checkDemoModCalisma+0x258>)
 800819a:	2201      	movs	r2, #1
 800819c:	701a      	strb	r2, [r3, #0]
 800819e:	e027      	b.n	80081f0 <checkDemoModCalisma+0x284>
 80081a0:	20000cbb 	.word	0x20000cbb
 80081a4:	20000cef 	.word	0x20000cef
 80081a8:	20000cba 	.word	0x20000cba
 80081ac:	40011000 	.word	0x40011000
 80081b0:	20000cf6 	.word	0x20000cf6
 80081b4:	20000cf7 	.word	0x20000cf7
 80081b8:	20000cf8 	.word	0x20000cf8
 80081bc:	40010c00 	.word	0x40010c00
 80081c0:	20000cf5 	.word	0x20000cf5
 80081c4:	20000cdb 	.word	0x20000cdb
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 80081c8:	2104      	movs	r1, #4
 80081ca:	48a0      	ldr	r0, [pc, #640]	; (800844c <checkDemoModCalisma+0x4e0>)
 80081cc:	f001 ff28 	bl	800a020 <HAL_GPIO_ReadPin>
 80081d0:	4603      	mov	r3, r0
 80081d2:	2b01      	cmp	r3, #1
 80081d4:	d10c      	bne.n	80081f0 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80081d6:	2200      	movs	r2, #0
 80081d8:	2102      	movs	r1, #2
 80081da:	489d      	ldr	r0, [pc, #628]	; (8008450 <checkDemoModCalisma+0x4e4>)
 80081dc:	f001 ff37 	bl	800a04e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80081e0:	2200      	movs	r2, #0
 80081e2:	2101      	movs	r1, #1
 80081e4:	489a      	ldr	r0, [pc, #616]	; (8008450 <checkDemoModCalisma+0x4e4>)
 80081e6:	f001 ff32 	bl	800a04e <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 80081ea:	4b9a      	ldr	r3, [pc, #616]	; (8008454 <checkDemoModCalisma+0x4e8>)
 80081ec:	2200      	movs	r2, #0
 80081ee:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 80081f0:	2104      	movs	r1, #4
 80081f2:	4896      	ldr	r0, [pc, #600]	; (800844c <checkDemoModCalisma+0x4e0>)
 80081f4:	f001 ff14 	bl	800a020 <HAL_GPIO_ReadPin>
 80081f8:	4603      	mov	r3, r0
 80081fa:	2b01      	cmp	r3, #1
 80081fc:	d10d      	bne.n	800821a <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 80081fe:	2201      	movs	r2, #1
 8008200:	2180      	movs	r1, #128	; 0x80
 8008202:	4895      	ldr	r0, [pc, #596]	; (8008458 <checkDemoModCalisma+0x4ec>)
 8008204:	f001 ff23 	bl	800a04e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8008208:	2201      	movs	r2, #1
 800820a:	2120      	movs	r1, #32
 800820c:	4892      	ldr	r0, [pc, #584]	; (8008458 <checkDemoModCalisma+0x4ec>)
 800820e:	f001 ff1e 	bl	800a04e <HAL_GPIO_WritePin>
			timer3 = millis;
 8008212:	4b92      	ldr	r3, [pc, #584]	; (800845c <checkDemoModCalisma+0x4f0>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	4a92      	ldr	r2, [pc, #584]	; (8008460 <checkDemoModCalisma+0x4f4>)
 8008218:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 800821a:	4b90      	ldr	r3, [pc, #576]	; (800845c <checkDemoModCalisma+0x4f0>)
 800821c:	681a      	ldr	r2, [r3, #0]
 800821e:	4b90      	ldr	r3, [pc, #576]	; (8008460 <checkDemoModCalisma+0x4f4>)
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	1ad3      	subs	r3, r2, r3
 8008224:	2b04      	cmp	r3, #4
 8008226:	d909      	bls.n	800823c <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8008228:	2200      	movs	r2, #0
 800822a:	2180      	movs	r1, #128	; 0x80
 800822c:	488a      	ldr	r0, [pc, #552]	; (8008458 <checkDemoModCalisma+0x4ec>)
 800822e:	f001 ff0e 	bl	800a04e <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8008232:	2200      	movs	r2, #0
 8008234:	2120      	movs	r1, #32
 8008236:	4888      	ldr	r0, [pc, #544]	; (8008458 <checkDemoModCalisma+0x4ec>)
 8008238:	f001 ff09 	bl	800a04e <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 800823c:	2102      	movs	r1, #2
 800823e:	4883      	ldr	r0, [pc, #524]	; (800844c <checkDemoModCalisma+0x4e0>)
 8008240:	f001 feee 	bl	800a020 <HAL_GPIO_ReadPin>
 8008244:	4603      	mov	r3, r0
 8008246:	2b01      	cmp	r3, #1
 8008248:	d108      	bne.n	800825c <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 800824a:	2201      	movs	r2, #1
 800824c:	2140      	movs	r1, #64	; 0x40
 800824e:	4882      	ldr	r0, [pc, #520]	; (8008458 <checkDemoModCalisma+0x4ec>)
 8008250:	f001 fefd 	bl	800a04e <HAL_GPIO_WritePin>
			timer3 = millis;
 8008254:	4b81      	ldr	r3, [pc, #516]	; (800845c <checkDemoModCalisma+0x4f0>)
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	4a81      	ldr	r2, [pc, #516]	; (8008460 <checkDemoModCalisma+0x4f4>)
 800825a:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 800825c:	4b7f      	ldr	r3, [pc, #508]	; (800845c <checkDemoModCalisma+0x4f0>)
 800825e:	681a      	ldr	r2, [r3, #0]
 8008260:	4b7f      	ldr	r3, [pc, #508]	; (8008460 <checkDemoModCalisma+0x4f4>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	1ad3      	subs	r3, r2, r3
 8008266:	2b04      	cmp	r3, #4
 8008268:	d904      	bls.n	8008274 <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 800826a:	2200      	movs	r2, #0
 800826c:	2140      	movs	r1, #64	; 0x40
 800826e:	487a      	ldr	r0, [pc, #488]	; (8008458 <checkDemoModCalisma+0x4ec>)
 8008270:	f001 feed 	bl	800a04e <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8008274:	4b7b      	ldr	r3, [pc, #492]	; (8008464 <checkDemoModCalisma+0x4f8>)
 8008276:	781b      	ldrb	r3, [r3, #0]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d058      	beq.n	800832e <checkDemoModCalisma+0x3c2>
 800827c:	4b7a      	ldr	r3, [pc, #488]	; (8008468 <checkDemoModCalisma+0x4fc>)
 800827e:	781b      	ldrb	r3, [r3, #0]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d054      	beq.n	800832e <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 8008284:	4b79      	ldr	r3, [pc, #484]	; (800846c <checkDemoModCalisma+0x500>)
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	3301      	adds	r3, #1
 800828a:	b2da      	uxtb	r2, r3
 800828c:	4b77      	ldr	r3, [pc, #476]	; (800846c <checkDemoModCalisma+0x500>)
 800828e:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 8008290:	4b76      	ldr	r3, [pc, #472]	; (800846c <checkDemoModCalisma+0x500>)
 8008292:	781b      	ldrb	r3, [r3, #0]
 8008294:	2b09      	cmp	r3, #9
 8008296:	d908      	bls.n	80082aa <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 8008298:	4b74      	ldr	r3, [pc, #464]	; (800846c <checkDemoModCalisma+0x500>)
 800829a:	2200      	movs	r2, #0
 800829c:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 800829e:	4b74      	ldr	r3, [pc, #464]	; (8008470 <checkDemoModCalisma+0x504>)
 80082a0:	781b      	ldrb	r3, [r3, #0]
 80082a2:	3301      	adds	r3, #1
 80082a4:	b2da      	uxtb	r2, r3
 80082a6:	4b72      	ldr	r3, [pc, #456]	; (8008470 <checkDemoModCalisma+0x504>)
 80082a8:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 80082aa:	4b71      	ldr	r3, [pc, #452]	; (8008470 <checkDemoModCalisma+0x504>)
 80082ac:	781b      	ldrb	r3, [r3, #0]
 80082ae:	2b09      	cmp	r3, #9
 80082b0:	d908      	bls.n	80082c4 <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 80082b2:	4b6f      	ldr	r3, [pc, #444]	; (8008470 <checkDemoModCalisma+0x504>)
 80082b4:	2200      	movs	r2, #0
 80082b6:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 80082b8:	4b6e      	ldr	r3, [pc, #440]	; (8008474 <checkDemoModCalisma+0x508>)
 80082ba:	781b      	ldrb	r3, [r3, #0]
 80082bc:	3301      	adds	r3, #1
 80082be:	b2da      	uxtb	r2, r3
 80082c0:	4b6c      	ldr	r3, [pc, #432]	; (8008474 <checkDemoModCalisma+0x508>)
 80082c2:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 80082c4:	4b6b      	ldr	r3, [pc, #428]	; (8008474 <checkDemoModCalisma+0x508>)
 80082c6:	781b      	ldrb	r3, [r3, #0]
 80082c8:	2b09      	cmp	r3, #9
 80082ca:	d908      	bls.n	80082de <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 80082cc:	4b69      	ldr	r3, [pc, #420]	; (8008474 <checkDemoModCalisma+0x508>)
 80082ce:	2200      	movs	r2, #0
 80082d0:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 80082d2:	4b69      	ldr	r3, [pc, #420]	; (8008478 <checkDemoModCalisma+0x50c>)
 80082d4:	781b      	ldrb	r3, [r3, #0]
 80082d6:	3301      	adds	r3, #1
 80082d8:	b2da      	uxtb	r2, r3
 80082da:	4b67      	ldr	r3, [pc, #412]	; (8008478 <checkDemoModCalisma+0x50c>)
 80082dc:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 80082de:	4b66      	ldr	r3, [pc, #408]	; (8008478 <checkDemoModCalisma+0x50c>)
 80082e0:	781b      	ldrb	r3, [r3, #0]
 80082e2:	2b09      	cmp	r3, #9
 80082e4:	d908      	bls.n	80082f8 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 80082e6:	4b64      	ldr	r3, [pc, #400]	; (8008478 <checkDemoModCalisma+0x50c>)
 80082e8:	2200      	movs	r2, #0
 80082ea:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 80082ec:	4b63      	ldr	r3, [pc, #396]	; (800847c <checkDemoModCalisma+0x510>)
 80082ee:	781b      	ldrb	r3, [r3, #0]
 80082f0:	3301      	adds	r3, #1
 80082f2:	b2da      	uxtb	r2, r3
 80082f4:	4b61      	ldr	r3, [pc, #388]	; (800847c <checkDemoModCalisma+0x510>)
 80082f6:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 80082f8:	4b60      	ldr	r3, [pc, #384]	; (800847c <checkDemoModCalisma+0x510>)
 80082fa:	781a      	ldrb	r2, [r3, #0]
 80082fc:	4b60      	ldr	r3, [pc, #384]	; (8008480 <checkDemoModCalisma+0x514>)
 80082fe:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8008302:	4b5d      	ldr	r3, [pc, #372]	; (8008478 <checkDemoModCalisma+0x50c>)
 8008304:	781a      	ldrb	r2, [r3, #0]
 8008306:	4b5e      	ldr	r3, [pc, #376]	; (8008480 <checkDemoModCalisma+0x514>)
 8008308:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 800830a:	4b5a      	ldr	r3, [pc, #360]	; (8008474 <checkDemoModCalisma+0x508>)
 800830c:	781a      	ldrb	r2, [r3, #0]
 800830e:	4b5c      	ldr	r3, [pc, #368]	; (8008480 <checkDemoModCalisma+0x514>)
 8008310:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8008312:	4b57      	ldr	r3, [pc, #348]	; (8008470 <checkDemoModCalisma+0x504>)
 8008314:	781a      	ldrb	r2, [r3, #0]
 8008316:	4b5a      	ldr	r3, [pc, #360]	; (8008480 <checkDemoModCalisma+0x514>)
 8008318:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 800831a:	4b54      	ldr	r3, [pc, #336]	; (800846c <checkDemoModCalisma+0x500>)
 800831c:	781a      	ldrb	r2, [r3, #0]
 800831e:	4b58      	ldr	r3, [pc, #352]	; (8008480 <checkDemoModCalisma+0x514>)
 8008320:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 8008322:	4b58      	ldr	r3, [pc, #352]	; (8008484 <checkDemoModCalisma+0x518>)
 8008324:	2201      	movs	r2, #1
 8008326:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 8008328:	4b4f      	ldr	r3, [pc, #316]	; (8008468 <checkDemoModCalisma+0x4fc>)
 800832a:	2200      	movs	r2, #0
 800832c:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 800832e:	4b56      	ldr	r3, [pc, #344]	; (8008488 <checkDemoModCalisma+0x51c>)
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	2b00      	cmp	r3, #0
 8008334:	f040 8087 	bne.w	8008446 <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 8008338:	4a54      	ldr	r2, [pc, #336]	; (800848c <checkDemoModCalisma+0x520>)
 800833a:	2101      	movs	r1, #1
 800833c:	2002      	movs	r0, #2
 800833e:	f7f8 fa3b 	bl	80007b8 <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 8008342:	4a53      	ldr	r2, [pc, #332]	; (8008490 <checkDemoModCalisma+0x524>)
 8008344:	2101      	movs	r1, #1
 8008346:	2001      	movs	r0, #1
 8008348:	f7f8 fa36 	bl	80007b8 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 800834c:	4b4b      	ldr	r3, [pc, #300]	; (800847c <checkDemoModCalisma+0x510>)
 800834e:	781b      	ldrb	r3, [r3, #0]
 8008350:	220a      	movs	r2, #10
 8008352:	4950      	ldr	r1, [pc, #320]	; (8008494 <checkDemoModCalisma+0x528>)
 8008354:	4618      	mov	r0, r3
 8008356:	f004 fe8f 	bl	800d078 <itoa>
			lcd_print(2,12,snum);
 800835a:	4a4e      	ldr	r2, [pc, #312]	; (8008494 <checkDemoModCalisma+0x528>)
 800835c:	210c      	movs	r1, #12
 800835e:	2002      	movs	r0, #2
 8008360:	f7f8 fa2a 	bl	80007b8 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 8008364:	4b44      	ldr	r3, [pc, #272]	; (8008478 <checkDemoModCalisma+0x50c>)
 8008366:	781b      	ldrb	r3, [r3, #0]
 8008368:	220a      	movs	r2, #10
 800836a:	494a      	ldr	r1, [pc, #296]	; (8008494 <checkDemoModCalisma+0x528>)
 800836c:	4618      	mov	r0, r3
 800836e:	f004 fe83 	bl	800d078 <itoa>
			lcd_print(2,13,snum);
 8008372:	4a48      	ldr	r2, [pc, #288]	; (8008494 <checkDemoModCalisma+0x528>)
 8008374:	210d      	movs	r1, #13
 8008376:	2002      	movs	r0, #2
 8008378:	f7f8 fa1e 	bl	80007b8 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 800837c:	4b3d      	ldr	r3, [pc, #244]	; (8008474 <checkDemoModCalisma+0x508>)
 800837e:	781b      	ldrb	r3, [r3, #0]
 8008380:	220a      	movs	r2, #10
 8008382:	4944      	ldr	r1, [pc, #272]	; (8008494 <checkDemoModCalisma+0x528>)
 8008384:	4618      	mov	r0, r3
 8008386:	f004 fe77 	bl	800d078 <itoa>
			lcd_print(2,14,snum);
 800838a:	4a42      	ldr	r2, [pc, #264]	; (8008494 <checkDemoModCalisma+0x528>)
 800838c:	210e      	movs	r1, #14
 800838e:	2002      	movs	r0, #2
 8008390:	f7f8 fa12 	bl	80007b8 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 8008394:	4b36      	ldr	r3, [pc, #216]	; (8008470 <checkDemoModCalisma+0x504>)
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	220a      	movs	r2, #10
 800839a:	493e      	ldr	r1, [pc, #248]	; (8008494 <checkDemoModCalisma+0x528>)
 800839c:	4618      	mov	r0, r3
 800839e:	f004 fe6b 	bl	800d078 <itoa>
			lcd_print(2,15,snum);
 80083a2:	4a3c      	ldr	r2, [pc, #240]	; (8008494 <checkDemoModCalisma+0x528>)
 80083a4:	210f      	movs	r1, #15
 80083a6:	2002      	movs	r0, #2
 80083a8:	f7f8 fa06 	bl	80007b8 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 80083ac:	4b2f      	ldr	r3, [pc, #188]	; (800846c <checkDemoModCalisma+0x500>)
 80083ae:	781b      	ldrb	r3, [r3, #0]
 80083b0:	220a      	movs	r2, #10
 80083b2:	4938      	ldr	r1, [pc, #224]	; (8008494 <checkDemoModCalisma+0x528>)
 80083b4:	4618      	mov	r0, r3
 80083b6:	f004 fe5f 	bl	800d078 <itoa>
			lcd_print(2,16,snum);
 80083ba:	4a36      	ldr	r2, [pc, #216]	; (8008494 <checkDemoModCalisma+0x528>)
 80083bc:	2110      	movs	r1, #16
 80083be:	2002      	movs	r0, #2
 80083c0:	f7f8 f9fa 	bl	80007b8 <lcd_print>
			mesajYazildi=1;
 80083c4:	4b34      	ldr	r3, [pc, #208]	; (8008498 <checkDemoModCalisma+0x52c>)
 80083c6:	2201      	movs	r2, #1
 80083c8:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 80083ca:	e03c      	b.n	8008446 <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 80083cc:	4b33      	ldr	r3, [pc, #204]	; (800849c <checkDemoModCalisma+0x530>)
 80083ce:	781b      	ldrb	r3, [r3, #0]
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	d003      	beq.n	80083dc <checkDemoModCalisma+0x470>
 80083d4:	4b2c      	ldr	r3, [pc, #176]	; (8008488 <checkDemoModCalisma+0x51c>)
 80083d6:	781b      	ldrb	r3, [r3, #0]
 80083d8:	2b01      	cmp	r3, #1
 80083da:	d134      	bne.n	8008446 <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80083dc:	2200      	movs	r2, #0
 80083de:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80083e2:	481b      	ldr	r0, [pc, #108]	; (8008450 <checkDemoModCalisma+0x4e4>)
 80083e4:	f001 fe33 	bl	800a04e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80083e8:	2200      	movs	r2, #0
 80083ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80083ee:	4818      	ldr	r0, [pc, #96]	; (8008450 <checkDemoModCalisma+0x4e4>)
 80083f0:	f001 fe2d 	bl	800a04e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80083f4:	2200      	movs	r2, #0
 80083f6:	2104      	movs	r1, #4
 80083f8:	4815      	ldr	r0, [pc, #84]	; (8008450 <checkDemoModCalisma+0x4e4>)
 80083fa:	f001 fe28 	bl	800a04e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80083fe:	2200      	movs	r2, #0
 8008400:	2102      	movs	r1, #2
 8008402:	4813      	ldr	r0, [pc, #76]	; (8008450 <checkDemoModCalisma+0x4e4>)
 8008404:	f001 fe23 	bl	800a04e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8008408:	2200      	movs	r2, #0
 800840a:	2101      	movs	r1, #1
 800840c:	4810      	ldr	r0, [pc, #64]	; (8008450 <checkDemoModCalisma+0x4e4>)
 800840e:	f001 fe1e 	bl	800a04e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8008412:	2200      	movs	r2, #0
 8008414:	2120      	movs	r1, #32
 8008416:	480d      	ldr	r0, [pc, #52]	; (800844c <checkDemoModCalisma+0x4e0>)
 8008418:	f001 fe19 	bl	800a04e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 800841c:	2200      	movs	r2, #0
 800841e:	2110      	movs	r1, #16
 8008420:	480a      	ldr	r0, [pc, #40]	; (800844c <checkDemoModCalisma+0x4e0>)
 8008422:	f001 fe14 	bl	800a04e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8008426:	2200      	movs	r2, #0
 8008428:	2180      	movs	r1, #128	; 0x80
 800842a:	480b      	ldr	r0, [pc, #44]	; (8008458 <checkDemoModCalisma+0x4ec>)
 800842c:	f001 fe0f 	bl	800a04e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8008430:	2200      	movs	r2, #0
 8008432:	2140      	movs	r1, #64	; 0x40
 8008434:	4808      	ldr	r0, [pc, #32]	; (8008458 <checkDemoModCalisma+0x4ec>)
 8008436:	f001 fe0a 	bl	800a04e <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 800843a:	2200      	movs	r2, #0
 800843c:	2120      	movs	r1, #32
 800843e:	4806      	ldr	r0, [pc, #24]	; (8008458 <checkDemoModCalisma+0x4ec>)
 8008440:	f001 fe05 	bl	800a04e <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 8008444:	e7ff      	b.n	8008446 <checkDemoModCalisma+0x4da>
 8008446:	bf00      	nop
 8008448:	bd80      	pop	{r7, pc}
 800844a:	bf00      	nop
 800844c:	40011000 	.word	0x40011000
 8008450:	40010c00 	.word	0x40010c00
 8008454:	20000cf6 	.word	0x20000cf6
 8008458:	40010800 	.word	0x40010800
 800845c:	20000bd4 	.word	0x20000bd4
 8008460:	20000be4 	.word	0x20000be4
 8008464:	20000cf5 	.word	0x20000cf5
 8008468:	20000cdb 	.word	0x20000cdb
 800846c:	20000c9a 	.word	0x20000c9a
 8008470:	20000c9b 	.word	0x20000c9b
 8008474:	200009c2 	.word	0x200009c2
 8008478:	200009c3 	.word	0x200009c3
 800847c:	20000c9c 	.word	0x20000c9c
 8008480:	20000b38 	.word	0x20000b38
 8008484:	20000cc9 	.word	0x20000cc9
 8008488:	20000cba 	.word	0x20000cba
 800848c:	0800e814 	.word	0x0800e814
 8008490:	0800e820 	.word	0x0800e820
 8008494:	20000bcc 	.word	0x20000bcc
 8008498:	20000cd1 	.word	0x20000cd1
 800849c:	20000cbb 	.word	0x20000cbb

080084a0 <mergeData>:

char* mergeData() {
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b09e      	sub	sp, #120	; 0x78
 80084a4:	af00      	add	r7, sp, #0
	char combinedString[45] = "";
 80084a6:	2300      	movs	r3, #0
 80084a8:	643b      	str	r3, [r7, #64]	; 0x40
 80084aa:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80084ae:	2229      	movs	r2, #41	; 0x29
 80084b0:	2100      	movs	r1, #0
 80084b2:	4618      	mov	r0, r3
 80084b4:	f004 fef8 	bl	800d2a8 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 80084b8:	4b6a      	ldr	r3, [pc, #424]	; (8008664 <mergeData+0x1c4>)
 80084ba:	781b      	ldrb	r3, [r3, #0]
 80084bc:	713b      	strb	r3, [r7, #4]
 80084be:	4b6a      	ldr	r3, [pc, #424]	; (8008668 <mergeData+0x1c8>)
 80084c0:	781b      	ldrb	r3, [r3, #0]
 80084c2:	717b      	strb	r3, [r7, #5]
 80084c4:	4b69      	ldr	r3, [pc, #420]	; (800866c <mergeData+0x1cc>)
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	71bb      	strb	r3, [r7, #6]
 80084ca:	4b69      	ldr	r3, [pc, #420]	; (8008670 <mergeData+0x1d0>)
 80084cc:	781b      	ldrb	r3, [r3, #0]
 80084ce:	71fb      	strb	r3, [r7, #7]
 80084d0:	4b68      	ldr	r3, [pc, #416]	; (8008674 <mergeData+0x1d4>)
 80084d2:	781b      	ldrb	r3, [r3, #0]
 80084d4:	723b      	strb	r3, [r7, #8]
 80084d6:	4b68      	ldr	r3, [pc, #416]	; (8008678 <mergeData+0x1d8>)
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	727b      	strb	r3, [r7, #9]
 80084dc:	4b67      	ldr	r3, [pc, #412]	; (800867c <mergeData+0x1dc>)
 80084de:	781b      	ldrb	r3, [r3, #0]
 80084e0:	72bb      	strb	r3, [r7, #10]
 80084e2:	4b67      	ldr	r3, [pc, #412]	; (8008680 <mergeData+0x1e0>)
 80084e4:	781b      	ldrb	r3, [r3, #0]
 80084e6:	72fb      	strb	r3, [r7, #11]
 80084e8:	4b66      	ldr	r3, [pc, #408]	; (8008684 <mergeData+0x1e4>)
 80084ea:	781b      	ldrb	r3, [r3, #0]
 80084ec:	733b      	strb	r3, [r7, #12]
 80084ee:	4b66      	ldr	r3, [pc, #408]	; (8008688 <mergeData+0x1e8>)
 80084f0:	781b      	ldrb	r3, [r3, #0]
 80084f2:	737b      	strb	r3, [r7, #13]
 80084f4:	4b65      	ldr	r3, [pc, #404]	; (800868c <mergeData+0x1ec>)
 80084f6:	781b      	ldrb	r3, [r3, #0]
 80084f8:	73bb      	strb	r3, [r7, #14]
 80084fa:	4b65      	ldr	r3, [pc, #404]	; (8008690 <mergeData+0x1f0>)
 80084fc:	781b      	ldrb	r3, [r3, #0]
 80084fe:	73fb      	strb	r3, [r7, #15]
 8008500:	4b64      	ldr	r3, [pc, #400]	; (8008694 <mergeData+0x1f4>)
 8008502:	781b      	ldrb	r3, [r3, #0]
 8008504:	743b      	strb	r3, [r7, #16]
 8008506:	4b64      	ldr	r3, [pc, #400]	; (8008698 <mergeData+0x1f8>)
 8008508:	781b      	ldrb	r3, [r3, #0]
 800850a:	747b      	strb	r3, [r7, #17]
 800850c:	4b63      	ldr	r3, [pc, #396]	; (800869c <mergeData+0x1fc>)
 800850e:	781b      	ldrb	r3, [r3, #0]
 8008510:	74bb      	strb	r3, [r7, #18]
 8008512:	4b63      	ldr	r3, [pc, #396]	; (80086a0 <mergeData+0x200>)
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	74fb      	strb	r3, [r7, #19]
 8008518:	4b62      	ldr	r3, [pc, #392]	; (80086a4 <mergeData+0x204>)
 800851a:	781b      	ldrb	r3, [r3, #0]
 800851c:	753b      	strb	r3, [r7, #20]
 800851e:	4b62      	ldr	r3, [pc, #392]	; (80086a8 <mergeData+0x208>)
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	757b      	strb	r3, [r7, #21]
 8008524:	4b61      	ldr	r3, [pc, #388]	; (80086ac <mergeData+0x20c>)
 8008526:	781b      	ldrb	r3, [r3, #0]
 8008528:	75bb      	strb	r3, [r7, #22]
 800852a:	4b61      	ldr	r3, [pc, #388]	; (80086b0 <mergeData+0x210>)
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	75fb      	strb	r3, [r7, #23]
 8008530:	4b60      	ldr	r3, [pc, #384]	; (80086b4 <mergeData+0x214>)
 8008532:	781b      	ldrb	r3, [r3, #0]
 8008534:	763b      	strb	r3, [r7, #24]
 8008536:	4b60      	ldr	r3, [pc, #384]	; (80086b8 <mergeData+0x218>)
 8008538:	781b      	ldrb	r3, [r3, #0]
 800853a:	767b      	strb	r3, [r7, #25]
 800853c:	4b5f      	ldr	r3, [pc, #380]	; (80086bc <mergeData+0x21c>)
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	76bb      	strb	r3, [r7, #26]
 8008542:	4b5f      	ldr	r3, [pc, #380]	; (80086c0 <mergeData+0x220>)
 8008544:	781b      	ldrb	r3, [r3, #0]
 8008546:	76fb      	strb	r3, [r7, #27]
 8008548:	4b5e      	ldr	r3, [pc, #376]	; (80086c4 <mergeData+0x224>)
 800854a:	781b      	ldrb	r3, [r3, #0]
 800854c:	773b      	strb	r3, [r7, #28]
 800854e:	4b5e      	ldr	r3, [pc, #376]	; (80086c8 <mergeData+0x228>)
 8008550:	781b      	ldrb	r3, [r3, #0]
 8008552:	777b      	strb	r3, [r7, #29]
 8008554:	4b5d      	ldr	r3, [pc, #372]	; (80086cc <mergeData+0x22c>)
 8008556:	781b      	ldrb	r3, [r3, #0]
 8008558:	77bb      	strb	r3, [r7, #30]
 800855a:	4b5d      	ldr	r3, [pc, #372]	; (80086d0 <mergeData+0x230>)
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	77fb      	strb	r3, [r7, #31]
 8008560:	4b5c      	ldr	r3, [pc, #368]	; (80086d4 <mergeData+0x234>)
 8008562:	781b      	ldrb	r3, [r3, #0]
 8008564:	f887 3020 	strb.w	r3, [r7, #32]
 8008568:	4b5b      	ldr	r3, [pc, #364]	; (80086d8 <mergeData+0x238>)
 800856a:	781b      	ldrb	r3, [r3, #0]
 800856c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8008570:	4b5a      	ldr	r3, [pc, #360]	; (80086dc <mergeData+0x23c>)
 8008572:	781b      	ldrb	r3, [r3, #0]
 8008574:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008578:	4b59      	ldr	r3, [pc, #356]	; (80086e0 <mergeData+0x240>)
 800857a:	781b      	ldrb	r3, [r3, #0]
 800857c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008580:	4b58      	ldr	r3, [pc, #352]	; (80086e4 <mergeData+0x244>)
 8008582:	781b      	ldrb	r3, [r3, #0]
 8008584:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[37],
 8008588:	4b57      	ldr	r3, [pc, #348]	; (80086e8 <mergeData+0x248>)
 800858a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	uint8_t uintVariables[] = {
 800858e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[38],
 8008592:	4b55      	ldr	r3, [pc, #340]	; (80086e8 <mergeData+0x248>)
 8008594:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 8008598:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[39],
 800859c:	4b52      	ldr	r3, [pc, #328]	; (80086e8 <mergeData+0x248>)
 800859e:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 80085a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[40],
 80085a6:	4b50      	ldr	r3, [pc, #320]	; (80086e8 <mergeData+0x248>)
 80085a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 80085ac:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[41],
 80085b0:	4b4d      	ldr	r3, [pc, #308]	; (80086e8 <mergeData+0x248>)
 80085b2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 80085b6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[42],
 80085ba:	4b4b      	ldr	r3, [pc, #300]	; (80086e8 <mergeData+0x248>)
 80085bc:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 80085c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[43],
 80085c4:	4b48      	ldr	r3, [pc, #288]	; (80086e8 <mergeData+0x248>)
 80085c6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 80085ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[44],
 80085ce:	4b46      	ldr	r3, [pc, #280]	; (80086e8 <mergeData+0x248>)
 80085d0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 80085d4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[45],
 80085d8:	4b43      	ldr	r3, [pc, #268]	; (80086e8 <mergeData+0x248>)
 80085da:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 80085de:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[46],
 80085e2:	4b41      	ldr	r3, [pc, #260]	; (80086e8 <mergeData+0x248>)
 80085e4:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 80085e8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			eepromData[47],
 80085ec:	4b3e      	ldr	r3, [pc, #248]	; (80086e8 <mergeData+0x248>)
 80085ee:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 80085f2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80085f6:	4b3d      	ldr	r3, [pc, #244]	; (80086ec <mergeData+0x24c>)
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 80085fe:	2300      	movs	r3, #0
 8008600:	677b      	str	r3, [r7, #116]	; 0x74
 8008602:	e015      	b.n	8008630 <mergeData+0x190>
	    sprintf(temp, "%u", uintVariables[i]);
 8008604:	1d3a      	adds	r2, r7, #4
 8008606:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008608:	4413      	add	r3, r2
 800860a:	781b      	ldrb	r3, [r3, #0]
 800860c:	461a      	mov	r2, r3
 800860e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008612:	4937      	ldr	r1, [pc, #220]	; (80086f0 <mergeData+0x250>)
 8008614:	4618      	mov	r0, r3
 8008616:	f004 fe27 	bl	800d268 <siprintf>
	    strcat(combinedString, temp);
 800861a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800861e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008622:	4611      	mov	r1, r2
 8008624:	4618      	mov	r0, r3
 8008626:	f004 fe47 	bl	800d2b8 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 800862a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800862c:	3301      	adds	r3, #1
 800862e:	677b      	str	r3, [r7, #116]	; 0x74
 8008630:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008632:	2b2c      	cmp	r3, #44	; 0x2c
 8008634:	d9e6      	bls.n	8008604 <mergeData+0x164>
	}

	char* result = malloc(strlen(combinedString) + 1);
 8008636:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800863a:	4618      	mov	r0, r3
 800863c:	f7f7 fdf2 	bl	8000224 <strlen>
 8008640:	4603      	mov	r3, r0
 8008642:	3301      	adds	r3, #1
 8008644:	4618      	mov	r0, r3
 8008646:	f004 fd19 	bl	800d07c <malloc>
 800864a:	4603      	mov	r3, r0
 800864c:	673b      	str	r3, [r7, #112]	; 0x70
	strcpy(result, combinedString);
 800864e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008652:	4619      	mov	r1, r3
 8008654:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8008656:	f004 fe7b 	bl	800d350 <strcpy>
	return result;
 800865a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
}
 800865c:	4618      	mov	r0, r3
 800865e:	3778      	adds	r7, #120	; 0x78
 8008660:	46bd      	mov	sp, r7
 8008662:	bd80      	pop	{r7, pc}
 8008664:	20000cac 	.word	0x20000cac
 8008668:	20000c9e 	.word	0x20000c9e
 800866c:	20000ca1 	.word	0x20000ca1
 8008670:	20000ca2 	.word	0x20000ca2
 8008674:	20000ca3 	.word	0x20000ca3
 8008678:	20000caa 	.word	0x20000caa
 800867c:	20000ca4 	.word	0x20000ca4
 8008680:	20000ca5 	.word	0x20000ca5
 8008684:	20000ca9 	.word	0x20000ca9
 8008688:	20000ca6 	.word	0x20000ca6
 800868c:	20000cb6 	.word	0x20000cb6
 8008690:	20000ca7 	.word	0x20000ca7
 8008694:	20000cb7 	.word	0x20000cb7
 8008698:	20000ca8 	.word	0x20000ca8
 800869c:	20000cb8 	.word	0x20000cb8
 80086a0:	20000cab 	.word	0x20000cab
 80086a4:	20000cad 	.word	0x20000cad
 80086a8:	20000cae 	.word	0x20000cae
 80086ac:	20000caf 	.word	0x20000caf
 80086b0:	20000cb0 	.word	0x20000cb0
 80086b4:	20000cb1 	.word	0x20000cb1
 80086b8:	20000cb2 	.word	0x20000cb2
 80086bc:	20000cb3 	.word	0x20000cb3
 80086c0:	20000cb4 	.word	0x20000cb4
 80086c4:	20000cb5 	.word	0x20000cb5
 80086c8:	20000cb9 	.word	0x20000cb9
 80086cc:	20000cbb 	.word	0x20000cbb
 80086d0:	20000c9a 	.word	0x20000c9a
 80086d4:	20000c9b 	.word	0x20000c9b
 80086d8:	200009c2 	.word	0x200009c2
 80086dc:	200009c3 	.word	0x200009c3
 80086e0:	20000c9c 	.word	0x20000c9c
 80086e4:	20000cbe 	.word	0x20000cbe
 80086e8:	20000b38 	.word	0x20000b38
 80086ec:	20000940 	.word	0x20000940
 80086f0:	0800e834 	.word	0x0800e834

080086f4 <mainLoop>:

void mainLoop() {
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b084      	sub	sp, #16
 80086f8:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 80086fa:	f7fd fffb 	bl	80066f4 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 80086fe:	2101      	movs	r1, #1
 8008700:	48ac      	ldr	r0, [pc, #688]	; (80089b4 <mainLoop+0x2c0>)
 8008702:	f001 fc8d 	bl	800a020 <HAL_GPIO_ReadPin>
 8008706:	4603      	mov	r3, r0
 8008708:	2b00      	cmp	r3, #0
 800870a:	d136      	bne.n	800877a <mainLoop+0x86>
 800870c:	2108      	movs	r1, #8
 800870e:	48aa      	ldr	r0, [pc, #680]	; (80089b8 <mainLoop+0x2c4>)
 8008710:	f001 fc86 	bl	800a020 <HAL_GPIO_ReadPin>
 8008714:	4603      	mov	r3, r0
 8008716:	2b00      	cmp	r3, #0
 8008718:	d12f      	bne.n	800877a <mainLoop+0x86>
 800871a:	2102      	movs	r1, #2
 800871c:	48a5      	ldr	r0, [pc, #660]	; (80089b4 <mainLoop+0x2c0>)
 800871e:	f001 fc7f 	bl	800a020 <HAL_GPIO_ReadPin>
 8008722:	4603      	mov	r3, r0
 8008724:	2b00      	cmp	r3, #0
 8008726:	d128      	bne.n	800877a <mainLoop+0x86>
 8008728:	2104      	movs	r1, #4
 800872a:	48a2      	ldr	r0, [pc, #648]	; (80089b4 <mainLoop+0x2c0>)
 800872c:	f001 fc78 	bl	800a020 <HAL_GPIO_ReadPin>
 8008730:	4603      	mov	r3, r0
 8008732:	2b00      	cmp	r3, #0
 8008734:	d121      	bne.n	800877a <mainLoop+0x86>
 8008736:	2108      	movs	r1, #8
 8008738:	489e      	ldr	r0, [pc, #632]	; (80089b4 <mainLoop+0x2c0>)
 800873a:	f001 fc71 	bl	800a020 <HAL_GPIO_ReadPin>
 800873e:	4603      	mov	r3, r0
 8008740:	2b00      	cmp	r3, #0
 8008742:	d11a      	bne.n	800877a <mainLoop+0x86>
 8008744:	2180      	movs	r1, #128	; 0x80
 8008746:	489c      	ldr	r0, [pc, #624]	; (80089b8 <mainLoop+0x2c4>)
 8008748:	f001 fc6a 	bl	800a020 <HAL_GPIO_ReadPin>
 800874c:	4603      	mov	r3, r0
 800874e:	2b01      	cmp	r3, #1
 8008750:	d113      	bne.n	800877a <mainLoop+0x86>
 8008752:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008756:	4898      	ldr	r0, [pc, #608]	; (80089b8 <mainLoop+0x2c4>)
 8008758:	f001 fc62 	bl	800a020 <HAL_GPIO_ReadPin>
 800875c:	4603      	mov	r3, r0
 800875e:	2b01      	cmp	r3, #1
 8008760:	d10b      	bne.n	800877a <mainLoop+0x86>
 8008762:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008766:	4894      	ldr	r0, [pc, #592]	; (80089b8 <mainLoop+0x2c4>)
 8008768:	f001 fc5a 	bl	800a020 <HAL_GPIO_ReadPin>
 800876c:	4603      	mov	r3, r0
 800876e:	2b01      	cmp	r3, #1
 8008770:	d103      	bne.n	800877a <mainLoop+0x86>
			butonKontrol=0;
 8008772:	4b92      	ldr	r3, [pc, #584]	; (80089bc <mainLoop+0x2c8>)
 8008774:	2200      	movs	r2, #0
 8008776:	701a      	strb	r2, [r3, #0]
 8008778:	e003      	b.n	8008782 <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 800877a:	4b91      	ldr	r3, [pc, #580]	; (80089c0 <mainLoop+0x2cc>)
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a91      	ldr	r2, [pc, #580]	; (80089c4 <mainLoop+0x2d0>)
 8008780:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 8008782:	4b91      	ldr	r3, [pc, #580]	; (80089c8 <mainLoop+0x2d4>)
 8008784:	781b      	ldrb	r3, [r3, #0]
 8008786:	2b00      	cmp	r3, #0
 8008788:	d039      	beq.n	80087fe <mainLoop+0x10a>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800878a:	bf00      	nop
 800878c:	488f      	ldr	r0, [pc, #572]	; (80089cc <mainLoop+0x2d8>)
 800878e:	f002 fa70 	bl	800ac72 <HAL_I2C_GetError>
 8008792:	4603      	mov	r3, r0
 8008794:	2b04      	cmp	r3, #4
 8008796:	d0f9      	beq.n	800878c <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008798:	bf00      	nop
 800879a:	488c      	ldr	r0, [pc, #560]	; (80089cc <mainLoop+0x2d8>)
 800879c:	f002 fa5c 	bl	800ac58 <HAL_I2C_GetState>
 80087a0:	4603      	mov	r3, r0
 80087a2:	2b20      	cmp	r3, #32
 80087a4:	d1f9      	bne.n	800879a <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1,0xA0,0,63,eepromData,63,3000);
 80087a6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80087aa:	9302      	str	r3, [sp, #8]
 80087ac:	233f      	movs	r3, #63	; 0x3f
 80087ae:	9301      	str	r3, [sp, #4]
 80087b0:	4b87      	ldr	r3, [pc, #540]	; (80089d0 <mainLoop+0x2dc>)
 80087b2:	9300      	str	r3, [sp, #0]
 80087b4:	233f      	movs	r3, #63	; 0x3f
 80087b6:	2200      	movs	r2, #0
 80087b8:	21a0      	movs	r1, #160	; 0xa0
 80087ba:	4884      	ldr	r0, [pc, #528]	; (80089cc <mainLoop+0x2d8>)
 80087bc:	f001 feea 	bl	800a594 <HAL_I2C_Mem_Write>
		  HAL_Delay(5);
 80087c0:	2005      	movs	r0, #5
 80087c2:	f000 fe5d 	bl	8009480 <HAL_Delay>

		  hafizaYaz=0;
 80087c6:	4b80      	ldr	r3, [pc, #512]	; (80089c8 <mainLoop+0x2d4>)
 80087c8:	2200      	movs	r2, #0
 80087ca:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 80087cc:	4b81      	ldr	r3, [pc, #516]	; (80089d4 <mainLoop+0x2e0>)
 80087ce:	781b      	ldrb	r3, [r3, #0]
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d105      	bne.n	80087e0 <mainLoop+0xec>
			  lcd_print(2,1,"Data yazildi    ");
 80087d4:	4a80      	ldr	r2, [pc, #512]	; (80089d8 <mainLoop+0x2e4>)
 80087d6:	2101      	movs	r1, #1
 80087d8:	2002      	movs	r0, #2
 80087da:	f7f7 ffed 	bl	80007b8 <lcd_print>
 80087de:	e008      	b.n	80087f2 <mainLoop+0xfe>
		  } else if(dilSecim==1) {
 80087e0:	4b7c      	ldr	r3, [pc, #496]	; (80089d4 <mainLoop+0x2e0>)
 80087e2:	781b      	ldrb	r3, [r3, #0]
 80087e4:	2b01      	cmp	r3, #1
 80087e6:	d104      	bne.n	80087f2 <mainLoop+0xfe>
			  lcd_print(2,1,"Data Wrote      ");
 80087e8:	4a7c      	ldr	r2, [pc, #496]	; (80089dc <mainLoop+0x2e8>)
 80087ea:	2101      	movs	r1, #1
 80087ec:	2002      	movs	r0, #2
 80087ee:	f7f7 ffe3 	bl	80007b8 <lcd_print>
		  }

		  HAL_Delay(1000);
 80087f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80087f6:	f000 fe43 	bl	8009480 <HAL_Delay>
		  lcd_clear();
 80087fa:	f7f8 f809 	bl	8000810 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 80087fe:	4b78      	ldr	r3, [pc, #480]	; (80089e0 <mainLoop+0x2ec>)
 8008800:	781b      	ldrb	r3, [r3, #0]
 8008802:	f083 0301 	eor.w	r3, r3, #1
 8008806:	b2db      	uxtb	r3, r3
 8008808:	2b00      	cmp	r3, #0
 800880a:	d06e      	beq.n	80088ea <mainLoop+0x1f6>
 800880c:	486f      	ldr	r0, [pc, #444]	; (80089cc <mainLoop+0x2d8>)
 800880e:	f002 fa23 	bl	800ac58 <HAL_I2C_GetState>
 8008812:	4603      	mov	r3, r0
 8008814:	2b20      	cmp	r3, #32
 8008816:	d168      	bne.n	80088ea <mainLoop+0x1f6>
		  if(ilkOkuma==0) {
 8008818:	4b72      	ldr	r3, [pc, #456]	; (80089e4 <mainLoop+0x2f0>)
 800881a:	781b      	ldrb	r3, [r3, #0]
 800881c:	f083 0301 	eor.w	r3, r3, #1
 8008820:	b2db      	uxtb	r3, r3
 8008822:	2b00      	cmp	r3, #0
 8008824:	d044      	beq.n	80088b0 <mainLoop+0x1bc>
			  lcd_print(1,1,"   **EEPROM**   ");
 8008826:	4a70      	ldr	r2, [pc, #448]	; (80089e8 <mainLoop+0x2f4>)
 8008828:	2101      	movs	r1, #1
 800882a:	2001      	movs	r0, #1
 800882c:	f7f7 ffc4 	bl	80007b8 <lcd_print>
			  if(dilSecim==0) {
 8008830:	4b68      	ldr	r3, [pc, #416]	; (80089d4 <mainLoop+0x2e0>)
 8008832:	781b      	ldrb	r3, [r3, #0]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d105      	bne.n	8008844 <mainLoop+0x150>
				  lcd_print(2,1,"Data Okunuyor...");
 8008838:	4a6c      	ldr	r2, [pc, #432]	; (80089ec <mainLoop+0x2f8>)
 800883a:	2101      	movs	r1, #1
 800883c:	2002      	movs	r0, #2
 800883e:	f7f7 ffbb 	bl	80007b8 <lcd_print>
 8008842:	e008      	b.n	8008856 <mainLoop+0x162>
			  } else if(dilSecim==1) {
 8008844:	4b63      	ldr	r3, [pc, #396]	; (80089d4 <mainLoop+0x2e0>)
 8008846:	781b      	ldrb	r3, [r3, #0]
 8008848:	2b01      	cmp	r3, #1
 800884a:	d104      	bne.n	8008856 <mainLoop+0x162>
				  lcd_print(2,1,"Data Reading... ");
 800884c:	4a68      	ldr	r2, [pc, #416]	; (80089f0 <mainLoop+0x2fc>)
 800884e:	2101      	movs	r1, #1
 8008850:	2002      	movs	r0, #2
 8008852:	f7f7 ffb1 	bl	80007b8 <lcd_print>
			  }
			  HAL_Delay(1000);
 8008856:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800885a:	f000 fe11 	bl	8009480 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800885e:	bf00      	nop
 8008860:	485a      	ldr	r0, [pc, #360]	; (80089cc <mainLoop+0x2d8>)
 8008862:	f002 fa06 	bl	800ac72 <HAL_I2C_GetError>
 8008866:	4603      	mov	r3, r0
 8008868:	2b04      	cmp	r3, #4
 800886a:	d0f9      	beq.n	8008860 <mainLoop+0x16c>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800886c:	e003      	b.n	8008876 <mainLoop+0x182>
				  HAL_Delay(1000);
 800886e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008872:	f000 fe05 	bl	8009480 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8008876:	4855      	ldr	r0, [pc, #340]	; (80089cc <mainLoop+0x2d8>)
 8008878:	f002 f9ee 	bl	800ac58 <HAL_I2C_GetState>
 800887c:	4603      	mov	r3, r0
 800887e:	2b20      	cmp	r3, #32
 8008880:	d1f5      	bne.n	800886e <mainLoop+0x17a>
			  }

			  if(dilSecim==0) {
 8008882:	4b54      	ldr	r3, [pc, #336]	; (80089d4 <mainLoop+0x2e0>)
 8008884:	781b      	ldrb	r3, [r3, #0]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d105      	bne.n	8008896 <mainLoop+0x1a2>
				  lcd_print(2,1,"Data Okundu.    ");
 800888a:	4a5a      	ldr	r2, [pc, #360]	; (80089f4 <mainLoop+0x300>)
 800888c:	2101      	movs	r1, #1
 800888e:	2002      	movs	r0, #2
 8008890:	f7f7 ff92 	bl	80007b8 <lcd_print>
 8008894:	e008      	b.n	80088a8 <mainLoop+0x1b4>
			  } else if(dilSecim==1) {
 8008896:	4b4f      	ldr	r3, [pc, #316]	; (80089d4 <mainLoop+0x2e0>)
 8008898:	781b      	ldrb	r3, [r3, #0]
 800889a:	2b01      	cmp	r3, #1
 800889c:	d104      	bne.n	80088a8 <mainLoop+0x1b4>
				  lcd_print(2,1,"Data Read.      ");
 800889e:	4a56      	ldr	r2, [pc, #344]	; (80089f8 <mainLoop+0x304>)
 80088a0:	2101      	movs	r1, #1
 80088a2:	2002      	movs	r0, #2
 80088a4:	f7f7 ff88 	bl	80007b8 <lcd_print>
			  }

			  ilkOkuma=1;
 80088a8:	4b4e      	ldr	r3, [pc, #312]	; (80089e4 <mainLoop+0x2f0>)
 80088aa:	2201      	movs	r2, #1
 80088ac:	701a      	strb	r2, [r3, #0]
 80088ae:	e014      	b.n	80088da <mainLoop+0x1e6>
		  } else {
			  if(dilSecim==0) {
 80088b0:	4b48      	ldr	r3, [pc, #288]	; (80089d4 <mainLoop+0x2e0>)
 80088b2:	781b      	ldrb	r3, [r3, #0]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d105      	bne.n	80088c4 <mainLoop+0x1d0>
				  lcd_print(2,1,"Deger Kaydedildi");
 80088b8:	4a50      	ldr	r2, [pc, #320]	; (80089fc <mainLoop+0x308>)
 80088ba:	2101      	movs	r1, #1
 80088bc:	2002      	movs	r0, #2
 80088be:	f7f7 ff7b 	bl	80007b8 <lcd_print>
 80088c2:	e008      	b.n	80088d6 <mainLoop+0x1e2>
			  } else if(dilSecim==1) {
 80088c4:	4b43      	ldr	r3, [pc, #268]	; (80089d4 <mainLoop+0x2e0>)
 80088c6:	781b      	ldrb	r3, [r3, #0]
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	d104      	bne.n	80088d6 <mainLoop+0x1e2>
				  lcd_print(2,1,"Value Saved     ");
 80088cc:	4a4c      	ldr	r2, [pc, #304]	; (8008a00 <mainLoop+0x30c>)
 80088ce:	2101      	movs	r1, #1
 80088d0:	2002      	movs	r0, #2
 80088d2:	f7f7 ff71 	bl	80007b8 <lcd_print>
			  }
			  lcd_clear();
 80088d6:	f7f7 ff9b 	bl	8000810 <lcd_clear>
		  }

		  lcd_clear();
 80088da:	f7f7 ff99 	bl	8000810 <lcd_clear>

		  eepromKontrol(1);
 80088de:	2001      	movs	r0, #1
 80088e0:	f7fd faa2 	bl	8005e28 <eepromKontrol>
		  hafizaOku=1;
 80088e4:	4b3e      	ldr	r3, [pc, #248]	; (80089e0 <mainLoop+0x2ec>)
 80088e6:	2201      	movs	r2, #1
 80088e8:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 80088ea:	4b46      	ldr	r3, [pc, #280]	; (8008a04 <mainLoop+0x310>)
 80088ec:	781b      	ldrb	r3, [r3, #0]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d11c      	bne.n	800892c <mainLoop+0x238>
 80088f2:	4b45      	ldr	r3, [pc, #276]	; (8008a08 <mainLoop+0x314>)
 80088f4:	781b      	ldrb	r3, [r3, #0]
 80088f6:	f083 0301 	eor.w	r3, r3, #1
 80088fa:	b2db      	uxtb	r3, r3
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d015      	beq.n	800892c <mainLoop+0x238>
 8008900:	4b42      	ldr	r3, [pc, #264]	; (8008a0c <mainLoop+0x318>)
 8008902:	781b      	ldrb	r3, [r3, #0]
 8008904:	2b00      	cmp	r3, #0
 8008906:	d111      	bne.n	800892c <mainLoop+0x238>
			lcd_clear();
 8008908:	f7f7 ff82 	bl	8000810 <lcd_clear>
			HAL_Delay(10);
 800890c:	200a      	movs	r0, #10
 800890e:	f000 fdb7 	bl	8009480 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 8008912:	4a3f      	ldr	r2, [pc, #252]	; (8008a10 <mainLoop+0x31c>)
 8008914:	2101      	movs	r1, #1
 8008916:	2001      	movs	r0, #1
 8008918:	f7f7 ff4e 	bl	80007b8 <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 800891c:	4a3d      	ldr	r2, [pc, #244]	; (8008a14 <mainLoop+0x320>)
 800891e:	2101      	movs	r1, #1
 8008920:	2002      	movs	r0, #2
 8008922:	f7f7 ff49 	bl	80007b8 <lcd_print>
			mesajYazildi=1;
 8008926:	4b38      	ldr	r3, [pc, #224]	; (8008a08 <mainLoop+0x314>)
 8008928:	2201      	movs	r2, #1
 800892a:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 800892c:	4b35      	ldr	r3, [pc, #212]	; (8008a04 <mainLoop+0x310>)
 800892e:	781b      	ldrb	r3, [r3, #0]
 8008930:	2b00      	cmp	r3, #0
 8008932:	d112      	bne.n	800895a <mainLoop+0x266>
 8008934:	2102      	movs	r1, #2
 8008936:	481f      	ldr	r0, [pc, #124]	; (80089b4 <mainLoop+0x2c0>)
 8008938:	f001 fb72 	bl	800a020 <HAL_GPIO_ReadPin>
 800893c:	4603      	mov	r3, r0
 800893e:	2b01      	cmp	r3, #1
 8008940:	d10b      	bne.n	800895a <mainLoop+0x266>
 8008942:	2104      	movs	r1, #4
 8008944:	481b      	ldr	r0, [pc, #108]	; (80089b4 <mainLoop+0x2c0>)
 8008946:	f001 fb6b 	bl	800a020 <HAL_GPIO_ReadPin>
 800894a:	4603      	mov	r3, r0
 800894c:	2b01      	cmp	r3, #1
 800894e:	d104      	bne.n	800895a <mainLoop+0x266>
			menuGiris=1;
 8008950:	4b2c      	ldr	r3, [pc, #176]	; (8008a04 <mainLoop+0x310>)
 8008952:	2201      	movs	r2, #1
 8008954:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8008956:	f7f7 ff5b 	bl	8000810 <lcd_clear>
		}

		if(menuGiris==1) {
 800895a:	4b2a      	ldr	r3, [pc, #168]	; (8008a04 <mainLoop+0x310>)
 800895c:	781b      	ldrb	r3, [r3, #0]
 800895e:	2b01      	cmp	r3, #1
 8008960:	d102      	bne.n	8008968 <mainLoop+0x274>
			menu(&hi2c1);
 8008962:	481a      	ldr	r0, [pc, #104]	; (80089cc <mainLoop+0x2d8>)
 8008964:	f7f8 ffde 	bl	8001924 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8008968:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800896c:	4812      	ldr	r0, [pc, #72]	; (80089b8 <mainLoop+0x2c4>)
 800896e:	f001 fb86 	bl	800a07e <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8008972:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008976:	4828      	ldr	r0, [pc, #160]	; (8008a18 <mainLoop+0x324>)
 8008978:	f001 fb52 	bl	800a020 <HAL_GPIO_ReadPin>
 800897c:	4603      	mov	r3, r0
 800897e:	2b00      	cmp	r3, #0
 8008980:	d10a      	bne.n	8008998 <mainLoop+0x2a4>
 8008982:	4b26      	ldr	r3, [pc, #152]	; (8008a1c <mainLoop+0x328>)
 8008984:	781b      	ldrb	r3, [r3, #0]
 8008986:	f083 0301 	eor.w	r3, r3, #1
 800898a:	b2db      	uxtb	r3, r3
 800898c:	2b00      	cmp	r3, #0
 800898e:	d003      	beq.n	8008998 <mainLoop+0x2a4>
			stopVar=1;
 8008990:	4b23      	ldr	r3, [pc, #140]	; (8008a20 <mainLoop+0x32c>)
 8008992:	2201      	movs	r2, #1
 8008994:	701a      	strb	r2, [r3, #0]
 8008996:	e002      	b.n	800899e <mainLoop+0x2aa>
		} else {
			stopVar=0;
 8008998:	4b21      	ldr	r3, [pc, #132]	; (8008a20 <mainLoop+0x32c>)
 800899a:	2200      	movs	r2, #0
 800899c:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 800899e:	f7fd fec9 	bl	8006734 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 80089a2:	f7fd fefb 	bl	800679c <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 80089a6:	f7fd ff3f 	bl	8006828 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 80089aa:	f7fd ff8f 	bl	80068cc <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 80089ae:	f7ff fadd 	bl	8007f6c <checkDemoModCalisma>
		checkLCDBacklight();
 80089b2:	e6a2      	b.n	80086fa <mainLoop+0x6>
 80089b4:	40010800 	.word	0x40010800
 80089b8:	40011000 	.word	0x40011000
 80089bc:	20000ccc 	.word	0x20000ccc
 80089c0:	20000bd4 	.word	0x20000bd4
 80089c4:	20000bf0 	.word	0x20000bf0
 80089c8:	20000cc9 	.word	0x20000cc9
 80089cc:	20000e5c 	.word	0x20000e5c
 80089d0:	20000b38 	.word	0x20000b38
 80089d4:	20000cbe 	.word	0x20000cbe
 80089d8:	0800e838 	.word	0x0800e838
 80089dc:	0800e84c 	.word	0x0800e84c
 80089e0:	20000cca 	.word	0x20000cca
 80089e4:	20000ccb 	.word	0x20000ccb
 80089e8:	0800e860 	.word	0x0800e860
 80089ec:	0800e874 	.word	0x0800e874
 80089f0:	0800e888 	.word	0x0800e888
 80089f4:	0800e89c 	.word	0x0800e89c
 80089f8:	0800e8b0 	.word	0x0800e8b0
 80089fc:	0800e8c4 	.word	0x0800e8c4
 8008a00:	0800e8d8 	.word	0x0800e8d8
 8008a04:	20000cba 	.word	0x20000cba
 8008a08:	20000cd1 	.word	0x20000cd1
 8008a0c:	20000cbb 	.word	0x20000cbb
 8008a10:	0800e79c 	.word	0x0800e79c
 8008a14:	0800e7b0 	.word	0x0800e7b0
 8008a18:	40010c00 	.word	0x40010c00
 8008a1c:	20000cf2 	.word	0x20000cf2
 8008a20:	20000cef 	.word	0x20000cef

08008a24 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8008a24:	b480      	push	{r7}
 8008a26:	b083      	sub	sp, #12
 8008a28:	af00      	add	r7, sp, #0
 8008a2a:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8008a2c:	4b04      	ldr	r3, [pc, #16]	; (8008a40 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	3301      	adds	r3, #1
 8008a32:	4a03      	ldr	r2, [pc, #12]	; (8008a40 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8008a34:	6013      	str	r3, [r2, #0]
}
 8008a36:	bf00      	nop
 8008a38:	370c      	adds	r7, #12
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	bc80      	pop	{r7}
 8008a3e:	4770      	bx	lr
 8008a40:	20000bd4 	.word	0x20000bd4

08008a44 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008a44:	b580      	push	{r7, lr}
 8008a46:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008a48:	f000 fcb8 	bl	80093bc <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8008a4c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008a50:	f000 fd16 	bl	8009480 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008a54:	f000 f8e8 	bl	8008c28 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008a58:	f000 fa0a 	bl	8008e70 <MX_GPIO_Init>
  MX_CAN_Init();
 8008a5c:	f000 f92a 	bl	8008cb4 <MX_CAN_Init>
  MX_I2C1_Init();
 8008a60:	f000 f95c 	bl	8008d1c <MX_I2C1_Init>
  MX_TIM1_Init();
 8008a64:	f000 f988 	bl	8008d78 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8008a68:	f000 f9d8 	bl	8008e1c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8008a6c:	2201      	movs	r2, #1
 8008a6e:	2140      	movs	r1, #64	; 0x40
 8008a70:	485d      	ldr	r0, [pc, #372]	; (8008be8 <main+0x1a4>)
 8008a72:	f001 faec 	bl	800a04e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8008a76:	2201      	movs	r2, #1
 8008a78:	2180      	movs	r1, #128	; 0x80
 8008a7a:	485b      	ldr	r0, [pc, #364]	; (8008be8 <main+0x1a4>)
 8008a7c:	f001 fae7 	bl	800a04e <HAL_GPIO_WritePin>
  HAL_Delay(10);
 8008a80:	200a      	movs	r0, #10
 8008a82:	f000 fcfd 	bl	8009480 <HAL_Delay>
  lcd_init();
 8008a86:	f7f7 fe65 	bl	8000754 <lcd_init>
  HAL_Delay(10);
 8008a8a:	200a      	movs	r0, #10
 8008a8c:	f000 fcf8 	bl	8009480 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 8008a90:	4856      	ldr	r0, [pc, #344]	; (8008bec <main+0x1a8>)
 8008a92:	f003 f98f 	bl	800bdb4 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8008a96:	bf00      	nop
 8008a98:	4855      	ldr	r0, [pc, #340]	; (8008bf0 <main+0x1ac>)
 8008a9a:	f002 f8ea 	bl	800ac72 <HAL_I2C_GetError>
 8008a9e:	4603      	mov	r3, r0
 8008aa0:	2b04      	cmp	r3, #4
 8008aa2:	d0f9      	beq.n	8008a98 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8008aa4:	bf00      	nop
 8008aa6:	4852      	ldr	r0, [pc, #328]	; (8008bf0 <main+0x1ac>)
 8008aa8:	f002 f8d6 	bl	800ac58 <HAL_I2C_GetState>
 8008aac:	4603      	mov	r3, r0
 8008aae:	2b20      	cmp	r3, #32
 8008ab0:	d1f9      	bne.n	8008aa6 <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8008ab8:	484b      	ldr	r0, [pc, #300]	; (8008be8 <main+0x1a4>)
 8008aba:	f001 fac8 	bl	800a04e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8008abe:	2200      	movs	r2, #0
 8008ac0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008ac4:	4848      	ldr	r0, [pc, #288]	; (8008be8 <main+0x1a4>)
 8008ac6:	f001 fac2 	bl	800a04e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8008aca:	2200      	movs	r2, #0
 8008acc:	2104      	movs	r1, #4
 8008ace:	4846      	ldr	r0, [pc, #280]	; (8008be8 <main+0x1a4>)
 8008ad0:	f001 fabd 	bl	800a04e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	2102      	movs	r1, #2
 8008ad8:	4843      	ldr	r0, [pc, #268]	; (8008be8 <main+0x1a4>)
 8008ada:	f001 fab8 	bl	800a04e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8008ade:	2200      	movs	r2, #0
 8008ae0:	2101      	movs	r1, #1
 8008ae2:	4841      	ldr	r0, [pc, #260]	; (8008be8 <main+0x1a4>)
 8008ae4:	f001 fab3 	bl	800a04e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8008ae8:	2200      	movs	r2, #0
 8008aea:	2120      	movs	r1, #32
 8008aec:	4841      	ldr	r0, [pc, #260]	; (8008bf4 <main+0x1b0>)
 8008aee:	f001 faae 	bl	800a04e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8008af2:	2200      	movs	r2, #0
 8008af4:	2110      	movs	r1, #16
 8008af6:	483f      	ldr	r0, [pc, #252]	; (8008bf4 <main+0x1b0>)
 8008af8:	f001 faa9 	bl	800a04e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8008afc:	2200      	movs	r2, #0
 8008afe:	2180      	movs	r1, #128	; 0x80
 8008b00:	483d      	ldr	r0, [pc, #244]	; (8008bf8 <main+0x1b4>)
 8008b02:	f001 faa4 	bl	800a04e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8008b06:	2200      	movs	r2, #0
 8008b08:	2140      	movs	r1, #64	; 0x40
 8008b0a:	483b      	ldr	r0, [pc, #236]	; (8008bf8 <main+0x1b4>)
 8008b0c:	f001 fa9f 	bl	800a04e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8008b10:	2200      	movs	r2, #0
 8008b12:	2120      	movs	r1, #32
 8008b14:	4838      	ldr	r0, [pc, #224]	; (8008bf8 <main+0x1b4>)
 8008b16:	f001 fa9a 	bl	800a04e <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	2110      	movs	r1, #16
 8008b1e:	4836      	ldr	r0, [pc, #216]	; (8008bf8 <main+0x1b4>)
 8008b20:	f001 fa95 	bl	800a04e <HAL_GPIO_WritePin>

  i2cTest();
 8008b24:	f7fd fd38 	bl	8006598 <i2cTest>
  HAL_Delay(100);
 8008b28:	2064      	movs	r0, #100	; 0x64
 8008b2a:	f000 fca9 	bl	8009480 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 8008b2e:	4a33      	ldr	r2, [pc, #204]	; (8008bfc <main+0x1b8>)
 8008b30:	2101      	movs	r1, #1
 8008b32:	2001      	movs	r0, #1
 8008b34:	f7f7 fe40 	bl	80007b8 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 8008b38:	4a31      	ldr	r2, [pc, #196]	; (8008c00 <main+0x1bc>)
 8008b3a:	2101      	movs	r1, #1
 8008b3c:	2002      	movs	r0, #2
 8008b3e:	f7f7 fe3b 	bl	80007b8 <lcd_print>
  HAL_Delay(1000);
 8008b42:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008b46:	f000 fc9b 	bl	8009480 <HAL_Delay>
  lcd_clear();
 8008b4a:	f7f7 fe61 	bl	8000810 <lcd_clear>

  eepromKontrol(0);
 8008b4e:	2000      	movs	r0, #0
 8008b50:	f7fd f96a 	bl	8005e28 <eepromKontrol>
  eepromKontrol4IoT();
 8008b54:	f7fd fbe4 	bl	8006320 <eepromKontrol4IoT>

  if(strlen(machineID) == 0) {
 8008b58:	4b2a      	ldr	r3, [pc, #168]	; (8008c04 <main+0x1c0>)
 8008b5a:	781b      	ldrb	r3, [r3, #0]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d103      	bne.n	8008b68 <main+0x124>
	  takeMachineID(1, &hi2c1);
 8008b60:	4923      	ldr	r1, [pc, #140]	; (8008bf0 <main+0x1ac>)
 8008b62:	2001      	movs	r0, #1
 8008b64:	f7f8 f8d4 	bl	8000d10 <takeMachineID>
  }

  lcd_clear();
 8008b68:	f7f7 fe52 	bl	8000810 <lcd_clear>
  HAL_Delay(500);
 8008b6c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008b70:	f000 fc86 	bl	8009480 <HAL_Delay>

  if(iotMode == 1) {
 8008b74:	4b24      	ldr	r3, [pc, #144]	; (8008c08 <main+0x1c4>)
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	2b01      	cmp	r3, #1
 8008b7a:	d128      	bne.n	8008bce <main+0x18a>
	  if(strlen(wifiSSID) == 0) {
 8008b7c:	4b23      	ldr	r3, [pc, #140]	; (8008c0c <main+0x1c8>)
 8008b7e:	781b      	ldrb	r3, [r3, #0]
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d103      	bne.n	8008b8c <main+0x148>
		  takeWifiSSID(1, &hi2c1);
 8008b84:	491a      	ldr	r1, [pc, #104]	; (8008bf0 <main+0x1ac>)
 8008b86:	2001      	movs	r0, #1
 8008b88:	f7f8 f9dc 	bl	8000f44 <takeWifiSSID>
	  }

	  lcd_clear();
 8008b8c:	f7f7 fe40 	bl	8000810 <lcd_clear>
	  HAL_Delay(500);
 8008b90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008b94:	f000 fc74 	bl	8009480 <HAL_Delay>

	  if(strlen(wifiPass) == 0) {
 8008b98:	4b1d      	ldr	r3, [pc, #116]	; (8008c10 <main+0x1cc>)
 8008b9a:	781b      	ldrb	r3, [r3, #0]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d103      	bne.n	8008ba8 <main+0x164>
		  takeWifiPass(1, &hi2c1);
 8008ba0:	4913      	ldr	r1, [pc, #76]	; (8008bf0 <main+0x1ac>)
 8008ba2:	2001      	movs	r0, #1
 8008ba4:	f7f8 fb56 	bl	8001254 <takeWifiPass>
	  }

	  lcd_print(1, 1, "Wifi Ayarlaniyor");
 8008ba8:	4a1a      	ldr	r2, [pc, #104]	; (8008c14 <main+0x1d0>)
 8008baa:	2101      	movs	r1, #1
 8008bac:	2001      	movs	r0, #1
 8008bae:	f7f7 fe03 	bl	80007b8 <lcd_print>
	  lcd_print(2, 1, "Lutfen Bekleyin ");
 8008bb2:	4a19      	ldr	r2, [pc, #100]	; (8008c18 <main+0x1d4>)
 8008bb4:	2101      	movs	r1, #1
 8008bb6:	2002      	movs	r0, #2
 8008bb8:	f7f7 fdfe 	bl	80007b8 <lcd_print>
	  ESP8266_Init(&huart1, wifiSSID, wifiPass);
 8008bbc:	4a14      	ldr	r2, [pc, #80]	; (8008c10 <main+0x1cc>)
 8008bbe:	4913      	ldr	r1, [pc, #76]	; (8008c0c <main+0x1c8>)
 8008bc0:	4816      	ldr	r0, [pc, #88]	; (8008c1c <main+0x1d8>)
 8008bc2:	f7f7 fb37 	bl	8000234 <ESP8266_Init>
	  HAL_Delay(500);
 8008bc6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008bca:	f000 fc59 	bl	8009480 <HAL_Delay>
	  takeMachineID(0);
	  HAL_Delay(300);
	  idKontrol = checkMachineID(&huart1, machineID);
  }*/

  lcd_clear();
 8008bce:	f7f7 fe1f 	bl	8000810 <lcd_clear>
  HAL_Delay(200);
 8008bd2:	20c8      	movs	r0, #200	; 0xc8
 8008bd4:	f000 fc54 	bl	8009480 <HAL_Delay>

  backLightTimer = millis;
 8008bd8:	4b11      	ldr	r3, [pc, #68]	; (8008c20 <main+0x1dc>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4a11      	ldr	r2, [pc, #68]	; (8008c24 <main+0x1e0>)
 8008bde:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 8008be0:	f7ff fd88 	bl	80086f4 <mainLoop>
 8008be4:	e7fc      	b.n	8008be0 <main+0x19c>
 8008be6:	bf00      	nop
 8008be8:	40010c00 	.word	0x40010c00
 8008bec:	20000eb0 	.word	0x20000eb0
 8008bf0:	20000e5c 	.word	0x20000e5c
 8008bf4:	40011000 	.word	0x40011000
 8008bf8:	40010800 	.word	0x40010800
 8008bfc:	0800e8ec 	.word	0x0800e8ec
 8008c00:	0800e900 	.word	0x0800e900
 8008c04:	20000bf4 	.word	0x20000bf4
 8008c08:	20000cbc 	.word	0x20000cbc
 8008c0c:	20000c00 	.word	0x20000c00
 8008c10:	20000c24 	.word	0x20000c24
 8008c14:	0800e914 	.word	0x0800e914
 8008c18:	0800e928 	.word	0x0800e928
 8008c1c:	20000ef8 	.word	0x20000ef8
 8008c20:	20000bd4 	.word	0x20000bd4
 8008c24:	20000bf0 	.word	0x20000bf0

08008c28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b090      	sub	sp, #64	; 0x40
 8008c2c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8008c2e:	f107 0318 	add.w	r3, r7, #24
 8008c32:	2228      	movs	r2, #40	; 0x28
 8008c34:	2100      	movs	r1, #0
 8008c36:	4618      	mov	r0, r3
 8008c38:	f004 fb36 	bl	800d2a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008c3c:	1d3b      	adds	r3, r7, #4
 8008c3e:	2200      	movs	r2, #0
 8008c40:	601a      	str	r2, [r3, #0]
 8008c42:	605a      	str	r2, [r3, #4]
 8008c44:	609a      	str	r2, [r3, #8]
 8008c46:	60da      	str	r2, [r3, #12]
 8008c48:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8008c4a:	2301      	movs	r3, #1
 8008c4c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008c4e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008c52:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8008c54:	2300      	movs	r3, #0
 8008c56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008c58:	2301      	movs	r3, #1
 8008c5a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008c5c:	2302      	movs	r3, #2
 8008c5e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8008c60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008c64:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8008c66:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8008c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008c6c:	f107 0318 	add.w	r3, r7, #24
 8008c70:	4618      	mov	r0, r3
 8008c72:	f002 fc3f 	bl	800b4f4 <HAL_RCC_OscConfig>
 8008c76:	4603      	mov	r3, r0
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d001      	beq.n	8008c80 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8008c7c:	f000 f9a2 	bl	8008fc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008c80:	230f      	movs	r3, #15
 8008c82:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008c84:	2302      	movs	r3, #2
 8008c86:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008c8c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c90:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008c92:	2300      	movs	r3, #0
 8008c94:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008c96:	1d3b      	adds	r3, r7, #4
 8008c98:	2102      	movs	r1, #2
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f002 feac 	bl	800b9f8 <HAL_RCC_ClockConfig>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d001      	beq.n	8008caa <SystemClock_Config+0x82>
  {
    Error_Handler();
 8008ca6:	f000 f98d 	bl	8008fc4 <Error_Handler>
  }
}
 8008caa:	bf00      	nop
 8008cac:	3740      	adds	r7, #64	; 0x40
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}
	...

08008cb4 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8008cb4:	b580      	push	{r7, lr}
 8008cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8008cb8:	4b16      	ldr	r3, [pc, #88]	; (8008d14 <MX_CAN_Init+0x60>)
 8008cba:	4a17      	ldr	r2, [pc, #92]	; (8008d18 <MX_CAN_Init+0x64>)
 8008cbc:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 8008cbe:	4b15      	ldr	r3, [pc, #84]	; (8008d14 <MX_CAN_Init+0x60>)
 8008cc0:	2210      	movs	r2, #16
 8008cc2:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8008cc4:	4b13      	ldr	r3, [pc, #76]	; (8008d14 <MX_CAN_Init+0x60>)
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8008cca:	4b12      	ldr	r3, [pc, #72]	; (8008d14 <MX_CAN_Init+0x60>)
 8008ccc:	2200      	movs	r2, #0
 8008cce:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8008cd0:	4b10      	ldr	r3, [pc, #64]	; (8008d14 <MX_CAN_Init+0x60>)
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8008cd6:	4b0f      	ldr	r3, [pc, #60]	; (8008d14 <MX_CAN_Init+0x60>)
 8008cd8:	2200      	movs	r2, #0
 8008cda:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 8008cdc:	4b0d      	ldr	r3, [pc, #52]	; (8008d14 <MX_CAN_Init+0x60>)
 8008cde:	2200      	movs	r2, #0
 8008ce0:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8008ce2:	4b0c      	ldr	r3, [pc, #48]	; (8008d14 <MX_CAN_Init+0x60>)
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8008ce8:	4b0a      	ldr	r3, [pc, #40]	; (8008d14 <MX_CAN_Init+0x60>)
 8008cea:	2200      	movs	r2, #0
 8008cec:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 8008cee:	4b09      	ldr	r3, [pc, #36]	; (8008d14 <MX_CAN_Init+0x60>)
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8008cf4:	4b07      	ldr	r3, [pc, #28]	; (8008d14 <MX_CAN_Init+0x60>)
 8008cf6:	2200      	movs	r2, #0
 8008cf8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 8008cfa:	4b06      	ldr	r3, [pc, #24]	; (8008d14 <MX_CAN_Init+0x60>)
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8008d00:	4804      	ldr	r0, [pc, #16]	; (8008d14 <MX_CAN_Init+0x60>)
 8008d02:	f000 fbe1 	bl	80094c8 <HAL_CAN_Init>
 8008d06:	4603      	mov	r3, r0
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d001      	beq.n	8008d10 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 8008d0c:	f000 f95a 	bl	8008fc4 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 8008d10:	bf00      	nop
 8008d12:	bd80      	pop	{r7, pc}
 8008d14:	20000e34 	.word	0x20000e34
 8008d18:	40006400 	.word	0x40006400

08008d1c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8008d20:	4b12      	ldr	r3, [pc, #72]	; (8008d6c <MX_I2C1_Init+0x50>)
 8008d22:	4a13      	ldr	r2, [pc, #76]	; (8008d70 <MX_I2C1_Init+0x54>)
 8008d24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8008d26:	4b11      	ldr	r3, [pc, #68]	; (8008d6c <MX_I2C1_Init+0x50>)
 8008d28:	4a12      	ldr	r2, [pc, #72]	; (8008d74 <MX_I2C1_Init+0x58>)
 8008d2a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008d2c:	4b0f      	ldr	r3, [pc, #60]	; (8008d6c <MX_I2C1_Init+0x50>)
 8008d2e:	2200      	movs	r2, #0
 8008d30:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8008d32:	4b0e      	ldr	r3, [pc, #56]	; (8008d6c <MX_I2C1_Init+0x50>)
 8008d34:	2200      	movs	r2, #0
 8008d36:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008d38:	4b0c      	ldr	r3, [pc, #48]	; (8008d6c <MX_I2C1_Init+0x50>)
 8008d3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008d3e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008d40:	4b0a      	ldr	r3, [pc, #40]	; (8008d6c <MX_I2C1_Init+0x50>)
 8008d42:	2200      	movs	r2, #0
 8008d44:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8008d46:	4b09      	ldr	r3, [pc, #36]	; (8008d6c <MX_I2C1_Init+0x50>)
 8008d48:	2200      	movs	r2, #0
 8008d4a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008d4c:	4b07      	ldr	r3, [pc, #28]	; (8008d6c <MX_I2C1_Init+0x50>)
 8008d4e:	2200      	movs	r2, #0
 8008d50:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008d52:	4b06      	ldr	r3, [pc, #24]	; (8008d6c <MX_I2C1_Init+0x50>)
 8008d54:	2200      	movs	r2, #0
 8008d56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008d58:	4804      	ldr	r0, [pc, #16]	; (8008d6c <MX_I2C1_Init+0x50>)
 8008d5a:	f001 f9a9 	bl	800a0b0 <HAL_I2C_Init>
 8008d5e:	4603      	mov	r3, r0
 8008d60:	2b00      	cmp	r3, #0
 8008d62:	d001      	beq.n	8008d68 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008d64:	f000 f92e 	bl	8008fc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8008d68:	bf00      	nop
 8008d6a:	bd80      	pop	{r7, pc}
 8008d6c:	20000e5c 	.word	0x20000e5c
 8008d70:	40005400 	.word	0x40005400
 8008d74:	00061a80 	.word	0x00061a80

08008d78 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	b086      	sub	sp, #24
 8008d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008d7e:	f107 0308 	add.w	r3, r7, #8
 8008d82:	2200      	movs	r2, #0
 8008d84:	601a      	str	r2, [r3, #0]
 8008d86:	605a      	str	r2, [r3, #4]
 8008d88:	609a      	str	r2, [r3, #8]
 8008d8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008d8c:	463b      	mov	r3, r7
 8008d8e:	2200      	movs	r2, #0
 8008d90:	601a      	str	r2, [r3, #0]
 8008d92:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008d94:	4b1f      	ldr	r3, [pc, #124]	; (8008e14 <MX_TIM1_Init+0x9c>)
 8008d96:	4a20      	ldr	r2, [pc, #128]	; (8008e18 <MX_TIM1_Init+0xa0>)
 8008d98:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 8008d9a:	4b1e      	ldr	r3, [pc, #120]	; (8008e14 <MX_TIM1_Init+0x9c>)
 8008d9c:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8008da0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008da2:	4b1c      	ldr	r3, [pc, #112]	; (8008e14 <MX_TIM1_Init+0x9c>)
 8008da4:	2200      	movs	r2, #0
 8008da6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8008da8:	4b1a      	ldr	r3, [pc, #104]	; (8008e14 <MX_TIM1_Init+0x9c>)
 8008daa:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8008dae:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008db0:	4b18      	ldr	r3, [pc, #96]	; (8008e14 <MX_TIM1_Init+0x9c>)
 8008db2:	2200      	movs	r2, #0
 8008db4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008db6:	4b17      	ldr	r3, [pc, #92]	; (8008e14 <MX_TIM1_Init+0x9c>)
 8008db8:	2200      	movs	r2, #0
 8008dba:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008dbc:	4b15      	ldr	r3, [pc, #84]	; (8008e14 <MX_TIM1_Init+0x9c>)
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8008dc2:	4814      	ldr	r0, [pc, #80]	; (8008e14 <MX_TIM1_Init+0x9c>)
 8008dc4:	f002 ffa6 	bl	800bd14 <HAL_TIM_Base_Init>
 8008dc8:	4603      	mov	r3, r0
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d001      	beq.n	8008dd2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8008dce:	f000 f8f9 	bl	8008fc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008dd2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008dd6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008dd8:	f107 0308 	add.w	r3, r7, #8
 8008ddc:	4619      	mov	r1, r3
 8008dde:	480d      	ldr	r0, [pc, #52]	; (8008e14 <MX_TIM1_Init+0x9c>)
 8008de0:	f003 f950 	bl	800c084 <HAL_TIM_ConfigClockSource>
 8008de4:	4603      	mov	r3, r0
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d001      	beq.n	8008dee <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8008dea:	f000 f8eb 	bl	8008fc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008dee:	2300      	movs	r3, #0
 8008df0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008df2:	2300      	movs	r3, #0
 8008df4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008df6:	463b      	mov	r3, r7
 8008df8:	4619      	mov	r1, r3
 8008dfa:	4806      	ldr	r0, [pc, #24]	; (8008e14 <MX_TIM1_Init+0x9c>)
 8008dfc:	f003 fb3e 	bl	800c47c <HAL_TIMEx_MasterConfigSynchronization>
 8008e00:	4603      	mov	r3, r0
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d001      	beq.n	8008e0a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8008e06:	f000 f8dd 	bl	8008fc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8008e0a:	bf00      	nop
 8008e0c:	3718      	adds	r7, #24
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
 8008e12:	bf00      	nop
 8008e14:	20000eb0 	.word	0x20000eb0
 8008e18:	40012c00 	.word	0x40012c00

08008e1c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008e1c:	b580      	push	{r7, lr}
 8008e1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008e20:	4b11      	ldr	r3, [pc, #68]	; (8008e68 <MX_USART1_UART_Init+0x4c>)
 8008e22:	4a12      	ldr	r2, [pc, #72]	; (8008e6c <MX_USART1_UART_Init+0x50>)
 8008e24:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008e26:	4b10      	ldr	r3, [pc, #64]	; (8008e68 <MX_USART1_UART_Init+0x4c>)
 8008e28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008e2c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008e2e:	4b0e      	ldr	r3, [pc, #56]	; (8008e68 <MX_USART1_UART_Init+0x4c>)
 8008e30:	2200      	movs	r2, #0
 8008e32:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008e34:	4b0c      	ldr	r3, [pc, #48]	; (8008e68 <MX_USART1_UART_Init+0x4c>)
 8008e36:	2200      	movs	r2, #0
 8008e38:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008e3a:	4b0b      	ldr	r3, [pc, #44]	; (8008e68 <MX_USART1_UART_Init+0x4c>)
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008e40:	4b09      	ldr	r3, [pc, #36]	; (8008e68 <MX_USART1_UART_Init+0x4c>)
 8008e42:	220c      	movs	r2, #12
 8008e44:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008e46:	4b08      	ldr	r3, [pc, #32]	; (8008e68 <MX_USART1_UART_Init+0x4c>)
 8008e48:	2200      	movs	r2, #0
 8008e4a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008e4c:	4b06      	ldr	r3, [pc, #24]	; (8008e68 <MX_USART1_UART_Init+0x4c>)
 8008e4e:	2200      	movs	r2, #0
 8008e50:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008e52:	4805      	ldr	r0, [pc, #20]	; (8008e68 <MX_USART1_UART_Init+0x4c>)
 8008e54:	f003 fb90 	bl	800c578 <HAL_UART_Init>
 8008e58:	4603      	mov	r3, r0
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d001      	beq.n	8008e62 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008e5e:	f000 f8b1 	bl	8008fc4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008e62:	bf00      	nop
 8008e64:	bd80      	pop	{r7, pc}
 8008e66:	bf00      	nop
 8008e68:	20000ef8 	.word	0x20000ef8
 8008e6c:	40013800 	.word	0x40013800

08008e70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b088      	sub	sp, #32
 8008e74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008e76:	f107 0310 	add.w	r3, r7, #16
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	601a      	str	r2, [r3, #0]
 8008e7e:	605a      	str	r2, [r3, #4]
 8008e80:	609a      	str	r2, [r3, #8]
 8008e82:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008e84:	4b4b      	ldr	r3, [pc, #300]	; (8008fb4 <MX_GPIO_Init+0x144>)
 8008e86:	699b      	ldr	r3, [r3, #24]
 8008e88:	4a4a      	ldr	r2, [pc, #296]	; (8008fb4 <MX_GPIO_Init+0x144>)
 8008e8a:	f043 0310 	orr.w	r3, r3, #16
 8008e8e:	6193      	str	r3, [r2, #24]
 8008e90:	4b48      	ldr	r3, [pc, #288]	; (8008fb4 <MX_GPIO_Init+0x144>)
 8008e92:	699b      	ldr	r3, [r3, #24]
 8008e94:	f003 0310 	and.w	r3, r3, #16
 8008e98:	60fb      	str	r3, [r7, #12]
 8008e9a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008e9c:	4b45      	ldr	r3, [pc, #276]	; (8008fb4 <MX_GPIO_Init+0x144>)
 8008e9e:	699b      	ldr	r3, [r3, #24]
 8008ea0:	4a44      	ldr	r2, [pc, #272]	; (8008fb4 <MX_GPIO_Init+0x144>)
 8008ea2:	f043 0320 	orr.w	r3, r3, #32
 8008ea6:	6193      	str	r3, [r2, #24]
 8008ea8:	4b42      	ldr	r3, [pc, #264]	; (8008fb4 <MX_GPIO_Init+0x144>)
 8008eaa:	699b      	ldr	r3, [r3, #24]
 8008eac:	f003 0320 	and.w	r3, r3, #32
 8008eb0:	60bb      	str	r3, [r7, #8]
 8008eb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008eb4:	4b3f      	ldr	r3, [pc, #252]	; (8008fb4 <MX_GPIO_Init+0x144>)
 8008eb6:	699b      	ldr	r3, [r3, #24]
 8008eb8:	4a3e      	ldr	r2, [pc, #248]	; (8008fb4 <MX_GPIO_Init+0x144>)
 8008eba:	f043 0304 	orr.w	r3, r3, #4
 8008ebe:	6193      	str	r3, [r2, #24]
 8008ec0:	4b3c      	ldr	r3, [pc, #240]	; (8008fb4 <MX_GPIO_Init+0x144>)
 8008ec2:	699b      	ldr	r3, [r3, #24]
 8008ec4:	f003 0304 	and.w	r3, r3, #4
 8008ec8:	607b      	str	r3, [r7, #4]
 8008eca:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8008ecc:	4b39      	ldr	r3, [pc, #228]	; (8008fb4 <MX_GPIO_Init+0x144>)
 8008ece:	699b      	ldr	r3, [r3, #24]
 8008ed0:	4a38      	ldr	r2, [pc, #224]	; (8008fb4 <MX_GPIO_Init+0x144>)
 8008ed2:	f043 0308 	orr.w	r3, r3, #8
 8008ed6:	6193      	str	r3, [r2, #24]
 8008ed8:	4b36      	ldr	r3, [pc, #216]	; (8008fb4 <MX_GPIO_Init+0x144>)
 8008eda:	699b      	ldr	r3, [r3, #24]
 8008edc:	f003 0308 	and.w	r3, r3, #8
 8008ee0:	603b      	str	r3, [r7, #0]
 8008ee2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	21f0      	movs	r1, #240	; 0xf0
 8008ee8:	4833      	ldr	r0, [pc, #204]	; (8008fb8 <MX_GPIO_Init+0x148>)
 8008eea:	f001 f8b0 	bl	800a04e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 8008eee:	2200      	movs	r2, #0
 8008ef0:	f241 0130 	movw	r1, #4144	; 0x1030
 8008ef4:	4831      	ldr	r0, [pc, #196]	; (8008fbc <MX_GPIO_Init+0x14c>)
 8008ef6:	f001 f8aa 	bl	800a04e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008efa:	2200      	movs	r2, #0
 8008efc:	f640 4107 	movw	r1, #3079	; 0xc07
 8008f00:	482f      	ldr	r0, [pc, #188]	; (8008fc0 <MX_GPIO_Init+0x150>)
 8008f02:	f001 f8a4 	bl	800a04e <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8008f06:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 8008f0a:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f10:	2300      	movs	r3, #0
 8008f12:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008f14:	f107 0310 	add.w	r3, r7, #16
 8008f18:	4619      	mov	r1, r3
 8008f1a:	4828      	ldr	r0, [pc, #160]	; (8008fbc <MX_GPIO_Init+0x14c>)
 8008f1c:	f000 fe20 	bl	8009b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 8008f20:	f248 130f 	movw	r3, #33039	; 0x810f
 8008f24:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008f26:	2300      	movs	r3, #0
 8008f28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f2e:	f107 0310 	add.w	r3, r7, #16
 8008f32:	4619      	mov	r1, r3
 8008f34:	4820      	ldr	r0, [pc, #128]	; (8008fb8 <MX_GPIO_Init+0x148>)
 8008f36:	f000 fe13 	bl	8009b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 8008f3a:	23f0      	movs	r3, #240	; 0xf0
 8008f3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008f3e:	2301      	movs	r3, #1
 8008f40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f42:	2300      	movs	r3, #0
 8008f44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f46:	2302      	movs	r3, #2
 8008f48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008f4a:	f107 0310 	add.w	r3, r7, #16
 8008f4e:	4619      	mov	r1, r3
 8008f50:	4819      	ldr	r0, [pc, #100]	; (8008fb8 <MX_GPIO_Init+0x148>)
 8008f52:	f000 fe05 	bl	8009b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 8008f56:	f241 0330 	movw	r3, #4144	; 0x1030
 8008f5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008f5c:	2301      	movs	r3, #1
 8008f5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f60:	2300      	movs	r3, #0
 8008f62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f64:	2302      	movs	r3, #2
 8008f66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8008f68:	f107 0310 	add.w	r3, r7, #16
 8008f6c:	4619      	mov	r1, r3
 8008f6e:	4813      	ldr	r0, [pc, #76]	; (8008fbc <MX_GPIO_Init+0x14c>)
 8008f70:	f000 fdf6 	bl	8009b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008f74:	f640 4307 	movw	r3, #3079	; 0xc07
 8008f78:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008f7a:	2301      	movs	r3, #1
 8008f7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008f82:	2302      	movs	r3, #2
 8008f84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008f86:	f107 0310 	add.w	r3, r7, #16
 8008f8a:	4619      	mov	r1, r3
 8008f8c:	480c      	ldr	r0, [pc, #48]	; (8008fc0 <MX_GPIO_Init+0x150>)
 8008f8e:	f000 fde7 	bl	8009b60 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8008f92:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8008f96:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008f98:	2300      	movs	r3, #0
 8008f9a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008fa0:	f107 0310 	add.w	r3, r7, #16
 8008fa4:	4619      	mov	r1, r3
 8008fa6:	4806      	ldr	r0, [pc, #24]	; (8008fc0 <MX_GPIO_Init+0x150>)
 8008fa8:	f000 fdda 	bl	8009b60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008fac:	bf00      	nop
 8008fae:	3720      	adds	r7, #32
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	bd80      	pop	{r7, pc}
 8008fb4:	40021000 	.word	0x40021000
 8008fb8:	40010800 	.word	0x40010800
 8008fbc:	40011000 	.word	0x40011000
 8008fc0:	40010c00 	.word	0x40010c00

08008fc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8008fc8:	bf00      	nop
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bc80      	pop	{r7}
 8008fce:	4770      	bx	lr

08008fd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b085      	sub	sp, #20
 8008fd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008fd6:	4b15      	ldr	r3, [pc, #84]	; (800902c <HAL_MspInit+0x5c>)
 8008fd8:	699b      	ldr	r3, [r3, #24]
 8008fda:	4a14      	ldr	r2, [pc, #80]	; (800902c <HAL_MspInit+0x5c>)
 8008fdc:	f043 0301 	orr.w	r3, r3, #1
 8008fe0:	6193      	str	r3, [r2, #24]
 8008fe2:	4b12      	ldr	r3, [pc, #72]	; (800902c <HAL_MspInit+0x5c>)
 8008fe4:	699b      	ldr	r3, [r3, #24]
 8008fe6:	f003 0301 	and.w	r3, r3, #1
 8008fea:	60bb      	str	r3, [r7, #8]
 8008fec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008fee:	4b0f      	ldr	r3, [pc, #60]	; (800902c <HAL_MspInit+0x5c>)
 8008ff0:	69db      	ldr	r3, [r3, #28]
 8008ff2:	4a0e      	ldr	r2, [pc, #56]	; (800902c <HAL_MspInit+0x5c>)
 8008ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ff8:	61d3      	str	r3, [r2, #28]
 8008ffa:	4b0c      	ldr	r3, [pc, #48]	; (800902c <HAL_MspInit+0x5c>)
 8008ffc:	69db      	ldr	r3, [r3, #28]
 8008ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009002:	607b      	str	r3, [r7, #4]
 8009004:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8009006:	4b0a      	ldr	r3, [pc, #40]	; (8009030 <HAL_MspInit+0x60>)
 8009008:	685b      	ldr	r3, [r3, #4]
 800900a:	60fb      	str	r3, [r7, #12]
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8009012:	60fb      	str	r3, [r7, #12]
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800901a:	60fb      	str	r3, [r7, #12]
 800901c:	4a04      	ldr	r2, [pc, #16]	; (8009030 <HAL_MspInit+0x60>)
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009022:	bf00      	nop
 8009024:	3714      	adds	r7, #20
 8009026:	46bd      	mov	sp, r7
 8009028:	bc80      	pop	{r7}
 800902a:	4770      	bx	lr
 800902c:	40021000 	.word	0x40021000
 8009030:	40010000 	.word	0x40010000

08009034 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b088      	sub	sp, #32
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800903c:	f107 0310 	add.w	r3, r7, #16
 8009040:	2200      	movs	r2, #0
 8009042:	601a      	str	r2, [r3, #0]
 8009044:	605a      	str	r2, [r3, #4]
 8009046:	609a      	str	r2, [r3, #8]
 8009048:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	4a1c      	ldr	r2, [pc, #112]	; (80090c0 <HAL_CAN_MspInit+0x8c>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d131      	bne.n	80090b8 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8009054:	4b1b      	ldr	r3, [pc, #108]	; (80090c4 <HAL_CAN_MspInit+0x90>)
 8009056:	69db      	ldr	r3, [r3, #28]
 8009058:	4a1a      	ldr	r2, [pc, #104]	; (80090c4 <HAL_CAN_MspInit+0x90>)
 800905a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800905e:	61d3      	str	r3, [r2, #28]
 8009060:	4b18      	ldr	r3, [pc, #96]	; (80090c4 <HAL_CAN_MspInit+0x90>)
 8009062:	69db      	ldr	r3, [r3, #28]
 8009064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009068:	60fb      	str	r3, [r7, #12]
 800906a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800906c:	4b15      	ldr	r3, [pc, #84]	; (80090c4 <HAL_CAN_MspInit+0x90>)
 800906e:	699b      	ldr	r3, [r3, #24]
 8009070:	4a14      	ldr	r2, [pc, #80]	; (80090c4 <HAL_CAN_MspInit+0x90>)
 8009072:	f043 0304 	orr.w	r3, r3, #4
 8009076:	6193      	str	r3, [r2, #24]
 8009078:	4b12      	ldr	r3, [pc, #72]	; (80090c4 <HAL_CAN_MspInit+0x90>)
 800907a:	699b      	ldr	r3, [r3, #24]
 800907c:	f003 0304 	and.w	r3, r3, #4
 8009080:	60bb      	str	r3, [r7, #8]
 8009082:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8009084:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009088:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800908a:	2300      	movs	r3, #0
 800908c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800908e:	2300      	movs	r3, #0
 8009090:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009092:	f107 0310 	add.w	r3, r7, #16
 8009096:	4619      	mov	r1, r3
 8009098:	480b      	ldr	r0, [pc, #44]	; (80090c8 <HAL_CAN_MspInit+0x94>)
 800909a:	f000 fd61 	bl	8009b60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800909e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80090a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80090a4:	2302      	movs	r3, #2
 80090a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80090a8:	2303      	movs	r3, #3
 80090aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80090ac:	f107 0310 	add.w	r3, r7, #16
 80090b0:	4619      	mov	r1, r3
 80090b2:	4805      	ldr	r0, [pc, #20]	; (80090c8 <HAL_CAN_MspInit+0x94>)
 80090b4:	f000 fd54 	bl	8009b60 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 80090b8:	bf00      	nop
 80090ba:	3720      	adds	r7, #32
 80090bc:	46bd      	mov	sp, r7
 80090be:	bd80      	pop	{r7, pc}
 80090c0:	40006400 	.word	0x40006400
 80090c4:	40021000 	.word	0x40021000
 80090c8:	40010800 	.word	0x40010800

080090cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b088      	sub	sp, #32
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80090d4:	f107 0310 	add.w	r3, r7, #16
 80090d8:	2200      	movs	r2, #0
 80090da:	601a      	str	r2, [r3, #0]
 80090dc:	605a      	str	r2, [r3, #4]
 80090de:	609a      	str	r2, [r3, #8]
 80090e0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4a15      	ldr	r2, [pc, #84]	; (800913c <HAL_I2C_MspInit+0x70>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d123      	bne.n	8009134 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80090ec:	4b14      	ldr	r3, [pc, #80]	; (8009140 <HAL_I2C_MspInit+0x74>)
 80090ee:	699b      	ldr	r3, [r3, #24]
 80090f0:	4a13      	ldr	r2, [pc, #76]	; (8009140 <HAL_I2C_MspInit+0x74>)
 80090f2:	f043 0308 	orr.w	r3, r3, #8
 80090f6:	6193      	str	r3, [r2, #24]
 80090f8:	4b11      	ldr	r3, [pc, #68]	; (8009140 <HAL_I2C_MspInit+0x74>)
 80090fa:	699b      	ldr	r3, [r3, #24]
 80090fc:	f003 0308 	and.w	r3, r3, #8
 8009100:	60fb      	str	r3, [r7, #12]
 8009102:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8009104:	23c0      	movs	r3, #192	; 0xc0
 8009106:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009108:	2312      	movs	r3, #18
 800910a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800910c:	2303      	movs	r3, #3
 800910e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009110:	f107 0310 	add.w	r3, r7, #16
 8009114:	4619      	mov	r1, r3
 8009116:	480b      	ldr	r0, [pc, #44]	; (8009144 <HAL_I2C_MspInit+0x78>)
 8009118:	f000 fd22 	bl	8009b60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800911c:	4b08      	ldr	r3, [pc, #32]	; (8009140 <HAL_I2C_MspInit+0x74>)
 800911e:	69db      	ldr	r3, [r3, #28]
 8009120:	4a07      	ldr	r2, [pc, #28]	; (8009140 <HAL_I2C_MspInit+0x74>)
 8009122:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009126:	61d3      	str	r3, [r2, #28]
 8009128:	4b05      	ldr	r3, [pc, #20]	; (8009140 <HAL_I2C_MspInit+0x74>)
 800912a:	69db      	ldr	r3, [r3, #28]
 800912c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009130:	60bb      	str	r3, [r7, #8]
 8009132:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8009134:	bf00      	nop
 8009136:	3720      	adds	r7, #32
 8009138:	46bd      	mov	sp, r7
 800913a:	bd80      	pop	{r7, pc}
 800913c:	40005400 	.word	0x40005400
 8009140:	40021000 	.word	0x40021000
 8009144:	40010c00 	.word	0x40010c00

08009148 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b082      	sub	sp, #8
 800914c:	af00      	add	r7, sp, #0
 800914e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a0a      	ldr	r2, [pc, #40]	; (8009180 <HAL_I2C_MspDeInit+0x38>)
 8009156:	4293      	cmp	r3, r2
 8009158:	d10d      	bne.n	8009176 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800915a:	4b0a      	ldr	r3, [pc, #40]	; (8009184 <HAL_I2C_MspDeInit+0x3c>)
 800915c:	69db      	ldr	r3, [r3, #28]
 800915e:	4a09      	ldr	r2, [pc, #36]	; (8009184 <HAL_I2C_MspDeInit+0x3c>)
 8009160:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009164:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8009166:	2140      	movs	r1, #64	; 0x40
 8009168:	4807      	ldr	r0, [pc, #28]	; (8009188 <HAL_I2C_MspDeInit+0x40>)
 800916a:	f000 fe8d 	bl	8009e88 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 800916e:	2180      	movs	r1, #128	; 0x80
 8009170:	4805      	ldr	r0, [pc, #20]	; (8009188 <HAL_I2C_MspDeInit+0x40>)
 8009172:	f000 fe89 	bl	8009e88 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8009176:	bf00      	nop
 8009178:	3708      	adds	r7, #8
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}
 800917e:	bf00      	nop
 8009180:	40005400 	.word	0x40005400
 8009184:	40021000 	.word	0x40021000
 8009188:	40010c00 	.word	0x40010c00

0800918c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800918c:	b580      	push	{r7, lr}
 800918e:	b084      	sub	sp, #16
 8009190:	af00      	add	r7, sp, #0
 8009192:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	4a0d      	ldr	r2, [pc, #52]	; (80091d0 <HAL_TIM_Base_MspInit+0x44>)
 800919a:	4293      	cmp	r3, r2
 800919c:	d113      	bne.n	80091c6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800919e:	4b0d      	ldr	r3, [pc, #52]	; (80091d4 <HAL_TIM_Base_MspInit+0x48>)
 80091a0:	699b      	ldr	r3, [r3, #24]
 80091a2:	4a0c      	ldr	r2, [pc, #48]	; (80091d4 <HAL_TIM_Base_MspInit+0x48>)
 80091a4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80091a8:	6193      	str	r3, [r2, #24]
 80091aa:	4b0a      	ldr	r3, [pc, #40]	; (80091d4 <HAL_TIM_Base_MspInit+0x48>)
 80091ac:	699b      	ldr	r3, [r3, #24]
 80091ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80091b2:	60fb      	str	r3, [r7, #12]
 80091b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 80091b6:	2200      	movs	r2, #0
 80091b8:	2100      	movs	r1, #0
 80091ba:	2019      	movs	r0, #25
 80091bc:	f000 fb57 	bl	800986e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 80091c0:	2019      	movs	r0, #25
 80091c2:	f000 fb70 	bl	80098a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80091c6:	bf00      	nop
 80091c8:	3710      	adds	r7, #16
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}
 80091ce:	bf00      	nop
 80091d0:	40012c00 	.word	0x40012c00
 80091d4:	40021000 	.word	0x40021000

080091d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b088      	sub	sp, #32
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80091e0:	f107 0310 	add.w	r3, r7, #16
 80091e4:	2200      	movs	r2, #0
 80091e6:	601a      	str	r2, [r3, #0]
 80091e8:	605a      	str	r2, [r3, #4]
 80091ea:	609a      	str	r2, [r3, #8]
 80091ec:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	4a20      	ldr	r2, [pc, #128]	; (8009274 <HAL_UART_MspInit+0x9c>)
 80091f4:	4293      	cmp	r3, r2
 80091f6:	d139      	bne.n	800926c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80091f8:	4b1f      	ldr	r3, [pc, #124]	; (8009278 <HAL_UART_MspInit+0xa0>)
 80091fa:	699b      	ldr	r3, [r3, #24]
 80091fc:	4a1e      	ldr	r2, [pc, #120]	; (8009278 <HAL_UART_MspInit+0xa0>)
 80091fe:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009202:	6193      	str	r3, [r2, #24]
 8009204:	4b1c      	ldr	r3, [pc, #112]	; (8009278 <HAL_UART_MspInit+0xa0>)
 8009206:	699b      	ldr	r3, [r3, #24]
 8009208:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800920c:	60fb      	str	r3, [r7, #12]
 800920e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009210:	4b19      	ldr	r3, [pc, #100]	; (8009278 <HAL_UART_MspInit+0xa0>)
 8009212:	699b      	ldr	r3, [r3, #24]
 8009214:	4a18      	ldr	r2, [pc, #96]	; (8009278 <HAL_UART_MspInit+0xa0>)
 8009216:	f043 0304 	orr.w	r3, r3, #4
 800921a:	6193      	str	r3, [r2, #24]
 800921c:	4b16      	ldr	r3, [pc, #88]	; (8009278 <HAL_UART_MspInit+0xa0>)
 800921e:	699b      	ldr	r3, [r3, #24]
 8009220:	f003 0304 	and.w	r3, r3, #4
 8009224:	60bb      	str	r3, [r7, #8]
 8009226:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8009228:	f44f 7300 	mov.w	r3, #512	; 0x200
 800922c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800922e:	2302      	movs	r3, #2
 8009230:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8009232:	2303      	movs	r3, #3
 8009234:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009236:	f107 0310 	add.w	r3, r7, #16
 800923a:	4619      	mov	r1, r3
 800923c:	480f      	ldr	r0, [pc, #60]	; (800927c <HAL_UART_MspInit+0xa4>)
 800923e:	f000 fc8f 	bl	8009b60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8009242:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009246:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009248:	2300      	movs	r3, #0
 800924a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800924c:	2300      	movs	r3, #0
 800924e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009250:	f107 0310 	add.w	r3, r7, #16
 8009254:	4619      	mov	r1, r3
 8009256:	4809      	ldr	r0, [pc, #36]	; (800927c <HAL_UART_MspInit+0xa4>)
 8009258:	f000 fc82 	bl	8009b60 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800925c:	2200      	movs	r2, #0
 800925e:	2100      	movs	r1, #0
 8009260:	2025      	movs	r0, #37	; 0x25
 8009262:	f000 fb04 	bl	800986e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8009266:	2025      	movs	r0, #37	; 0x25
 8009268:	f000 fb1d 	bl	80098a6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800926c:	bf00      	nop
 800926e:	3720      	adds	r7, #32
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}
 8009274:	40013800 	.word	0x40013800
 8009278:	40021000 	.word	0x40021000
 800927c:	40010800 	.word	0x40010800

08009280 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009280:	b480      	push	{r7}
 8009282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8009284:	e7fe      	b.n	8009284 <NMI_Handler+0x4>

08009286 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8009286:	b480      	push	{r7}
 8009288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800928a:	e7fe      	b.n	800928a <HardFault_Handler+0x4>

0800928c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800928c:	b480      	push	{r7}
 800928e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009290:	e7fe      	b.n	8009290 <MemManage_Handler+0x4>

08009292 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8009292:	b480      	push	{r7}
 8009294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8009296:	e7fe      	b.n	8009296 <BusFault_Handler+0x4>

08009298 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8009298:	b480      	push	{r7}
 800929a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800929c:	e7fe      	b.n	800929c <UsageFault_Handler+0x4>

0800929e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800929e:	b480      	push	{r7}
 80092a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80092a2:	bf00      	nop
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bc80      	pop	{r7}
 80092a8:	4770      	bx	lr

080092aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80092aa:	b480      	push	{r7}
 80092ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80092ae:	bf00      	nop
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bc80      	pop	{r7}
 80092b4:	4770      	bx	lr

080092b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80092b6:	b480      	push	{r7}
 80092b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80092ba:	bf00      	nop
 80092bc:	46bd      	mov	sp, r7
 80092be:	bc80      	pop	{r7}
 80092c0:	4770      	bx	lr

080092c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80092c2:	b580      	push	{r7, lr}
 80092c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80092c6:	f000 f8bf 	bl	8009448 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80092ca:	bf00      	nop
 80092cc:	bd80      	pop	{r7, pc}
	...

080092d0 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 80092d0:	b580      	push	{r7, lr}
 80092d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80092d4:	4802      	ldr	r0, [pc, #8]	; (80092e0 <TIM1_UP_IRQHandler+0x10>)
 80092d6:	f002 fdcd 	bl	800be74 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 80092da:	bf00      	nop
 80092dc:	bd80      	pop	{r7, pc}
 80092de:	bf00      	nop
 80092e0:	20000eb0 	.word	0x20000eb0

080092e4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80092e8:	4802      	ldr	r0, [pc, #8]	; (80092f4 <USART1_IRQHandler+0x10>)
 80092ea:	f003 f9cb 	bl	800c684 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80092ee:	bf00      	nop
 80092f0:	bd80      	pop	{r7, pc}
 80092f2:	bf00      	nop
 80092f4:	20000ef8 	.word	0x20000ef8

080092f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b086      	sub	sp, #24
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8009300:	4a14      	ldr	r2, [pc, #80]	; (8009354 <_sbrk+0x5c>)
 8009302:	4b15      	ldr	r3, [pc, #84]	; (8009358 <_sbrk+0x60>)
 8009304:	1ad3      	subs	r3, r2, r3
 8009306:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8009308:	697b      	ldr	r3, [r7, #20]
 800930a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800930c:	4b13      	ldr	r3, [pc, #76]	; (800935c <_sbrk+0x64>)
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	2b00      	cmp	r3, #0
 8009312:	d102      	bne.n	800931a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8009314:	4b11      	ldr	r3, [pc, #68]	; (800935c <_sbrk+0x64>)
 8009316:	4a12      	ldr	r2, [pc, #72]	; (8009360 <_sbrk+0x68>)
 8009318:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800931a:	4b10      	ldr	r3, [pc, #64]	; (800935c <_sbrk+0x64>)
 800931c:	681a      	ldr	r2, [r3, #0]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	4413      	add	r3, r2
 8009322:	693a      	ldr	r2, [r7, #16]
 8009324:	429a      	cmp	r2, r3
 8009326:	d207      	bcs.n	8009338 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8009328:	f003 ffe6 	bl	800d2f8 <__errno>
 800932c:	4603      	mov	r3, r0
 800932e:	220c      	movs	r2, #12
 8009330:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8009332:	f04f 33ff 	mov.w	r3, #4294967295
 8009336:	e009      	b.n	800934c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8009338:	4b08      	ldr	r3, [pc, #32]	; (800935c <_sbrk+0x64>)
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800933e:	4b07      	ldr	r3, [pc, #28]	; (800935c <_sbrk+0x64>)
 8009340:	681a      	ldr	r2, [r3, #0]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	4413      	add	r3, r2
 8009346:	4a05      	ldr	r2, [pc, #20]	; (800935c <_sbrk+0x64>)
 8009348:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800934a:	68fb      	ldr	r3, [r7, #12]
}
 800934c:	4618      	mov	r0, r3
 800934e:	3718      	adds	r7, #24
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}
 8009354:	2000c000 	.word	0x2000c000
 8009358:	00000400 	.word	0x00000400
 800935c:	20000f40 	.word	0x20000f40
 8009360:	20001090 	.word	0x20001090

08009364 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8009364:	b480      	push	{r7}
 8009366:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8009368:	bf00      	nop
 800936a:	46bd      	mov	sp, r7
 800936c:	bc80      	pop	{r7}
 800936e:	4770      	bx	lr

08009370 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8009370:	480c      	ldr	r0, [pc, #48]	; (80093a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8009372:	490d      	ldr	r1, [pc, #52]	; (80093a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8009374:	4a0d      	ldr	r2, [pc, #52]	; (80093ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8009376:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8009378:	e002      	b.n	8009380 <LoopCopyDataInit>

0800937a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800937a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800937c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800937e:	3304      	adds	r3, #4

08009380 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8009380:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8009382:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8009384:	d3f9      	bcc.n	800937a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8009386:	4a0a      	ldr	r2, [pc, #40]	; (80093b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8009388:	4c0a      	ldr	r4, [pc, #40]	; (80093b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800938a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800938c:	e001      	b.n	8009392 <LoopFillZerobss>

0800938e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800938e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8009390:	3204      	adds	r2, #4

08009392 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8009392:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8009394:	d3fb      	bcc.n	800938e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8009396:	f7ff ffe5 	bl	8009364 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800939a:	f003 ffb3 	bl	800d304 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800939e:	f7ff fb51 	bl	8008a44 <main>
  bx lr
 80093a2:	4770      	bx	lr
  ldr r0, =_sdata
 80093a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80093a8:	20000a20 	.word	0x20000a20
  ldr r2, =_sidata
 80093ac:	0800e9c8 	.word	0x0800e9c8
  ldr r2, =_sbss
 80093b0:	20000a20 	.word	0x20000a20
  ldr r4, =_ebss
 80093b4:	20001090 	.word	0x20001090

080093b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80093b8:	e7fe      	b.n	80093b8 <ADC1_2_IRQHandler>
	...

080093bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80093bc:	b580      	push	{r7, lr}
 80093be:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80093c0:	4b08      	ldr	r3, [pc, #32]	; (80093e4 <HAL_Init+0x28>)
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	4a07      	ldr	r2, [pc, #28]	; (80093e4 <HAL_Init+0x28>)
 80093c6:	f043 0310 	orr.w	r3, r3, #16
 80093ca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80093cc:	2003      	movs	r0, #3
 80093ce:	f000 fa43 	bl	8009858 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80093d2:	200f      	movs	r0, #15
 80093d4:	f000 f808 	bl	80093e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80093d8:	f7ff fdfa 	bl	8008fd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80093dc:	2300      	movs	r3, #0
}
 80093de:	4618      	mov	r0, r3
 80093e0:	bd80      	pop	{r7, pc}
 80093e2:	bf00      	nop
 80093e4:	40022000 	.word	0x40022000

080093e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80093e8:	b580      	push	{r7, lr}
 80093ea:	b082      	sub	sp, #8
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80093f0:	4b12      	ldr	r3, [pc, #72]	; (800943c <HAL_InitTick+0x54>)
 80093f2:	681a      	ldr	r2, [r3, #0]
 80093f4:	4b12      	ldr	r3, [pc, #72]	; (8009440 <HAL_InitTick+0x58>)
 80093f6:	781b      	ldrb	r3, [r3, #0]
 80093f8:	4619      	mov	r1, r3
 80093fa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80093fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8009402:	fbb2 f3f3 	udiv	r3, r2, r3
 8009406:	4618      	mov	r0, r3
 8009408:	f000 fa5b 	bl	80098c2 <HAL_SYSTICK_Config>
 800940c:	4603      	mov	r3, r0
 800940e:	2b00      	cmp	r3, #0
 8009410:	d001      	beq.n	8009416 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8009412:	2301      	movs	r3, #1
 8009414:	e00e      	b.n	8009434 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	2b0f      	cmp	r3, #15
 800941a:	d80a      	bhi.n	8009432 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800941c:	2200      	movs	r2, #0
 800941e:	6879      	ldr	r1, [r7, #4]
 8009420:	f04f 30ff 	mov.w	r0, #4294967295
 8009424:	f000 fa23 	bl	800986e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009428:	4a06      	ldr	r2, [pc, #24]	; (8009444 <HAL_InitTick+0x5c>)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800942e:	2300      	movs	r3, #0
 8009430:	e000      	b.n	8009434 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8009432:	2301      	movs	r3, #1
}
 8009434:	4618      	mov	r0, r3
 8009436:	3708      	adds	r7, #8
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}
 800943c:	200009c4 	.word	0x200009c4
 8009440:	200009cc 	.word	0x200009cc
 8009444:	200009c8 	.word	0x200009c8

08009448 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009448:	b480      	push	{r7}
 800944a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800944c:	4b05      	ldr	r3, [pc, #20]	; (8009464 <HAL_IncTick+0x1c>)
 800944e:	781b      	ldrb	r3, [r3, #0]
 8009450:	461a      	mov	r2, r3
 8009452:	4b05      	ldr	r3, [pc, #20]	; (8009468 <HAL_IncTick+0x20>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	4413      	add	r3, r2
 8009458:	4a03      	ldr	r2, [pc, #12]	; (8009468 <HAL_IncTick+0x20>)
 800945a:	6013      	str	r3, [r2, #0]
}
 800945c:	bf00      	nop
 800945e:	46bd      	mov	sp, r7
 8009460:	bc80      	pop	{r7}
 8009462:	4770      	bx	lr
 8009464:	200009cc 	.word	0x200009cc
 8009468:	20000f44 	.word	0x20000f44

0800946c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800946c:	b480      	push	{r7}
 800946e:	af00      	add	r7, sp, #0
  return uwTick;
 8009470:	4b02      	ldr	r3, [pc, #8]	; (800947c <HAL_GetTick+0x10>)
 8009472:	681b      	ldr	r3, [r3, #0]
}
 8009474:	4618      	mov	r0, r3
 8009476:	46bd      	mov	sp, r7
 8009478:	bc80      	pop	{r7}
 800947a:	4770      	bx	lr
 800947c:	20000f44 	.word	0x20000f44

08009480 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b084      	sub	sp, #16
 8009484:	af00      	add	r7, sp, #0
 8009486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009488:	f7ff fff0 	bl	800946c <HAL_GetTick>
 800948c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009498:	d005      	beq.n	80094a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800949a:	4b0a      	ldr	r3, [pc, #40]	; (80094c4 <HAL_Delay+0x44>)
 800949c:	781b      	ldrb	r3, [r3, #0]
 800949e:	461a      	mov	r2, r3
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	4413      	add	r3, r2
 80094a4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80094a6:	bf00      	nop
 80094a8:	f7ff ffe0 	bl	800946c <HAL_GetTick>
 80094ac:	4602      	mov	r2, r0
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	1ad3      	subs	r3, r2, r3
 80094b2:	68fa      	ldr	r2, [r7, #12]
 80094b4:	429a      	cmp	r2, r3
 80094b6:	d8f7      	bhi.n	80094a8 <HAL_Delay+0x28>
  {
  }
}
 80094b8:	bf00      	nop
 80094ba:	bf00      	nop
 80094bc:	3710      	adds	r7, #16
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}
 80094c2:	bf00      	nop
 80094c4:	200009cc 	.word	0x200009cc

080094c8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b084      	sub	sp, #16
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d101      	bne.n	80094da <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80094d6:	2301      	movs	r3, #1
 80094d8:	e0ed      	b.n	80096b6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80094e0:	b2db      	uxtb	r3, r3
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d102      	bne.n	80094ec <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80094e6:	6878      	ldr	r0, [r7, #4]
 80094e8:	f7ff fda4 	bl	8009034 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	681a      	ldr	r2, [r3, #0]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f042 0201 	orr.w	r2, r2, #1
 80094fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80094fc:	f7ff ffb6 	bl	800946c <HAL_GetTick>
 8009500:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8009502:	e012      	b.n	800952a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009504:	f7ff ffb2 	bl	800946c <HAL_GetTick>
 8009508:	4602      	mov	r2, r0
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	1ad3      	subs	r3, r2, r3
 800950e:	2b0a      	cmp	r3, #10
 8009510:	d90b      	bls.n	800952a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009516:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2205      	movs	r2, #5
 8009522:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009526:	2301      	movs	r3, #1
 8009528:	e0c5      	b.n	80096b6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	685b      	ldr	r3, [r3, #4]
 8009530:	f003 0301 	and.w	r3, r3, #1
 8009534:	2b00      	cmp	r3, #0
 8009536:	d0e5      	beq.n	8009504 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	681a      	ldr	r2, [r3, #0]
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	681b      	ldr	r3, [r3, #0]
 8009542:	f022 0202 	bic.w	r2, r2, #2
 8009546:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009548:	f7ff ff90 	bl	800946c <HAL_GetTick>
 800954c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800954e:	e012      	b.n	8009576 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8009550:	f7ff ff8c 	bl	800946c <HAL_GetTick>
 8009554:	4602      	mov	r2, r0
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	1ad3      	subs	r3, r2, r3
 800955a:	2b0a      	cmp	r3, #10
 800955c:	d90b      	bls.n	8009576 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009562:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2205      	movs	r2, #5
 800956e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009572:	2301      	movs	r3, #1
 8009574:	e09f      	b.n	80096b6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	685b      	ldr	r3, [r3, #4]
 800957c:	f003 0302 	and.w	r3, r3, #2
 8009580:	2b00      	cmp	r3, #0
 8009582:	d1e5      	bne.n	8009550 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	7e1b      	ldrb	r3, [r3, #24]
 8009588:	2b01      	cmp	r3, #1
 800958a:	d108      	bne.n	800959e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	681a      	ldr	r2, [r3, #0]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800959a:	601a      	str	r2, [r3, #0]
 800959c:	e007      	b.n	80095ae <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	681a      	ldr	r2, [r3, #0]
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80095ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	7e5b      	ldrb	r3, [r3, #25]
 80095b2:	2b01      	cmp	r3, #1
 80095b4:	d108      	bne.n	80095c8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	681a      	ldr	r2, [r3, #0]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80095c4:	601a      	str	r2, [r3, #0]
 80095c6:	e007      	b.n	80095d8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	681a      	ldr	r2, [r3, #0]
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	7e9b      	ldrb	r3, [r3, #26]
 80095dc:	2b01      	cmp	r3, #1
 80095de:	d108      	bne.n	80095f2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	681a      	ldr	r2, [r3, #0]
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f042 0220 	orr.w	r2, r2, #32
 80095ee:	601a      	str	r2, [r3, #0]
 80095f0:	e007      	b.n	8009602 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	681a      	ldr	r2, [r3, #0]
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	f022 0220 	bic.w	r2, r2, #32
 8009600:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	7edb      	ldrb	r3, [r3, #27]
 8009606:	2b01      	cmp	r3, #1
 8009608:	d108      	bne.n	800961c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	681a      	ldr	r2, [r3, #0]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	f022 0210 	bic.w	r2, r2, #16
 8009618:	601a      	str	r2, [r3, #0]
 800961a:	e007      	b.n	800962c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	681a      	ldr	r2, [r3, #0]
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f042 0210 	orr.w	r2, r2, #16
 800962a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	7f1b      	ldrb	r3, [r3, #28]
 8009630:	2b01      	cmp	r3, #1
 8009632:	d108      	bne.n	8009646 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	681a      	ldr	r2, [r3, #0]
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	f042 0208 	orr.w	r2, r2, #8
 8009642:	601a      	str	r2, [r3, #0]
 8009644:	e007      	b.n	8009656 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	681a      	ldr	r2, [r3, #0]
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f022 0208 	bic.w	r2, r2, #8
 8009654:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	7f5b      	ldrb	r3, [r3, #29]
 800965a:	2b01      	cmp	r3, #1
 800965c:	d108      	bne.n	8009670 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	681a      	ldr	r2, [r3, #0]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f042 0204 	orr.w	r2, r2, #4
 800966c:	601a      	str	r2, [r3, #0]
 800966e:	e007      	b.n	8009680 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	681a      	ldr	r2, [r3, #0]
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f022 0204 	bic.w	r2, r2, #4
 800967e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	689a      	ldr	r2, [r3, #8]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	68db      	ldr	r3, [r3, #12]
 8009688:	431a      	orrs	r2, r3
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	691b      	ldr	r3, [r3, #16]
 800968e:	431a      	orrs	r2, r3
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	695b      	ldr	r3, [r3, #20]
 8009694:	ea42 0103 	orr.w	r1, r2, r3
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	685b      	ldr	r3, [r3, #4]
 800969c:	1e5a      	subs	r2, r3, #1
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	681b      	ldr	r3, [r3, #0]
 80096a2:	430a      	orrs	r2, r1
 80096a4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	2200      	movs	r2, #0
 80096aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	2201      	movs	r2, #1
 80096b0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80096b4:	2300      	movs	r3, #0
}
 80096b6:	4618      	mov	r0, r3
 80096b8:	3710      	adds	r7, #16
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}
	...

080096c0 <__NVIC_SetPriorityGrouping>:
{
 80096c0:	b480      	push	{r7}
 80096c2:	b085      	sub	sp, #20
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	f003 0307 	and.w	r3, r3, #7
 80096ce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80096d0:	4b0c      	ldr	r3, [pc, #48]	; (8009704 <__NVIC_SetPriorityGrouping+0x44>)
 80096d2:	68db      	ldr	r3, [r3, #12]
 80096d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80096d6:	68ba      	ldr	r2, [r7, #8]
 80096d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80096dc:	4013      	ands	r3, r2
 80096de:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80096e4:	68bb      	ldr	r3, [r7, #8]
 80096e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80096e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80096ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80096f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80096f2:	4a04      	ldr	r2, [pc, #16]	; (8009704 <__NVIC_SetPriorityGrouping+0x44>)
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	60d3      	str	r3, [r2, #12]
}
 80096f8:	bf00      	nop
 80096fa:	3714      	adds	r7, #20
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bc80      	pop	{r7}
 8009700:	4770      	bx	lr
 8009702:	bf00      	nop
 8009704:	e000ed00 	.word	0xe000ed00

08009708 <__NVIC_GetPriorityGrouping>:
{
 8009708:	b480      	push	{r7}
 800970a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800970c:	4b04      	ldr	r3, [pc, #16]	; (8009720 <__NVIC_GetPriorityGrouping+0x18>)
 800970e:	68db      	ldr	r3, [r3, #12]
 8009710:	0a1b      	lsrs	r3, r3, #8
 8009712:	f003 0307 	and.w	r3, r3, #7
}
 8009716:	4618      	mov	r0, r3
 8009718:	46bd      	mov	sp, r7
 800971a:	bc80      	pop	{r7}
 800971c:	4770      	bx	lr
 800971e:	bf00      	nop
 8009720:	e000ed00 	.word	0xe000ed00

08009724 <__NVIC_EnableIRQ>:
{
 8009724:	b480      	push	{r7}
 8009726:	b083      	sub	sp, #12
 8009728:	af00      	add	r7, sp, #0
 800972a:	4603      	mov	r3, r0
 800972c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800972e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009732:	2b00      	cmp	r3, #0
 8009734:	db0b      	blt.n	800974e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009736:	79fb      	ldrb	r3, [r7, #7]
 8009738:	f003 021f 	and.w	r2, r3, #31
 800973c:	4906      	ldr	r1, [pc, #24]	; (8009758 <__NVIC_EnableIRQ+0x34>)
 800973e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009742:	095b      	lsrs	r3, r3, #5
 8009744:	2001      	movs	r0, #1
 8009746:	fa00 f202 	lsl.w	r2, r0, r2
 800974a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800974e:	bf00      	nop
 8009750:	370c      	adds	r7, #12
 8009752:	46bd      	mov	sp, r7
 8009754:	bc80      	pop	{r7}
 8009756:	4770      	bx	lr
 8009758:	e000e100 	.word	0xe000e100

0800975c <__NVIC_SetPriority>:
{
 800975c:	b480      	push	{r7}
 800975e:	b083      	sub	sp, #12
 8009760:	af00      	add	r7, sp, #0
 8009762:	4603      	mov	r3, r0
 8009764:	6039      	str	r1, [r7, #0]
 8009766:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009768:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800976c:	2b00      	cmp	r3, #0
 800976e:	db0a      	blt.n	8009786 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009770:	683b      	ldr	r3, [r7, #0]
 8009772:	b2da      	uxtb	r2, r3
 8009774:	490c      	ldr	r1, [pc, #48]	; (80097a8 <__NVIC_SetPriority+0x4c>)
 8009776:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800977a:	0112      	lsls	r2, r2, #4
 800977c:	b2d2      	uxtb	r2, r2
 800977e:	440b      	add	r3, r1
 8009780:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009784:	e00a      	b.n	800979c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009786:	683b      	ldr	r3, [r7, #0]
 8009788:	b2da      	uxtb	r2, r3
 800978a:	4908      	ldr	r1, [pc, #32]	; (80097ac <__NVIC_SetPriority+0x50>)
 800978c:	79fb      	ldrb	r3, [r7, #7]
 800978e:	f003 030f 	and.w	r3, r3, #15
 8009792:	3b04      	subs	r3, #4
 8009794:	0112      	lsls	r2, r2, #4
 8009796:	b2d2      	uxtb	r2, r2
 8009798:	440b      	add	r3, r1
 800979a:	761a      	strb	r2, [r3, #24]
}
 800979c:	bf00      	nop
 800979e:	370c      	adds	r7, #12
 80097a0:	46bd      	mov	sp, r7
 80097a2:	bc80      	pop	{r7}
 80097a4:	4770      	bx	lr
 80097a6:	bf00      	nop
 80097a8:	e000e100 	.word	0xe000e100
 80097ac:	e000ed00 	.word	0xe000ed00

080097b0 <NVIC_EncodePriority>:
{
 80097b0:	b480      	push	{r7}
 80097b2:	b089      	sub	sp, #36	; 0x24
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	60f8      	str	r0, [r7, #12]
 80097b8:	60b9      	str	r1, [r7, #8]
 80097ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	f003 0307 	and.w	r3, r3, #7
 80097c2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80097c4:	69fb      	ldr	r3, [r7, #28]
 80097c6:	f1c3 0307 	rsb	r3, r3, #7
 80097ca:	2b04      	cmp	r3, #4
 80097cc:	bf28      	it	cs
 80097ce:	2304      	movcs	r3, #4
 80097d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80097d2:	69fb      	ldr	r3, [r7, #28]
 80097d4:	3304      	adds	r3, #4
 80097d6:	2b06      	cmp	r3, #6
 80097d8:	d902      	bls.n	80097e0 <NVIC_EncodePriority+0x30>
 80097da:	69fb      	ldr	r3, [r7, #28]
 80097dc:	3b03      	subs	r3, #3
 80097de:	e000      	b.n	80097e2 <NVIC_EncodePriority+0x32>
 80097e0:	2300      	movs	r3, #0
 80097e2:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80097e4:	f04f 32ff 	mov.w	r2, #4294967295
 80097e8:	69bb      	ldr	r3, [r7, #24]
 80097ea:	fa02 f303 	lsl.w	r3, r2, r3
 80097ee:	43da      	mvns	r2, r3
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	401a      	ands	r2, r3
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80097f8:	f04f 31ff 	mov.w	r1, #4294967295
 80097fc:	697b      	ldr	r3, [r7, #20]
 80097fe:	fa01 f303 	lsl.w	r3, r1, r3
 8009802:	43d9      	mvns	r1, r3
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009808:	4313      	orrs	r3, r2
}
 800980a:	4618      	mov	r0, r3
 800980c:	3724      	adds	r7, #36	; 0x24
 800980e:	46bd      	mov	sp, r7
 8009810:	bc80      	pop	{r7}
 8009812:	4770      	bx	lr

08009814 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b082      	sub	sp, #8
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	3b01      	subs	r3, #1
 8009820:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009824:	d301      	bcc.n	800982a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009826:	2301      	movs	r3, #1
 8009828:	e00f      	b.n	800984a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800982a:	4a0a      	ldr	r2, [pc, #40]	; (8009854 <SysTick_Config+0x40>)
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	3b01      	subs	r3, #1
 8009830:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8009832:	210f      	movs	r1, #15
 8009834:	f04f 30ff 	mov.w	r0, #4294967295
 8009838:	f7ff ff90 	bl	800975c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800983c:	4b05      	ldr	r3, [pc, #20]	; (8009854 <SysTick_Config+0x40>)
 800983e:	2200      	movs	r2, #0
 8009840:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009842:	4b04      	ldr	r3, [pc, #16]	; (8009854 <SysTick_Config+0x40>)
 8009844:	2207      	movs	r2, #7
 8009846:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009848:	2300      	movs	r3, #0
}
 800984a:	4618      	mov	r0, r3
 800984c:	3708      	adds	r7, #8
 800984e:	46bd      	mov	sp, r7
 8009850:	bd80      	pop	{r7, pc}
 8009852:	bf00      	nop
 8009854:	e000e010 	.word	0xe000e010

08009858 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b082      	sub	sp, #8
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8009860:	6878      	ldr	r0, [r7, #4]
 8009862:	f7ff ff2d 	bl	80096c0 <__NVIC_SetPriorityGrouping>
}
 8009866:	bf00      	nop
 8009868:	3708      	adds	r7, #8
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}

0800986e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800986e:	b580      	push	{r7, lr}
 8009870:	b086      	sub	sp, #24
 8009872:	af00      	add	r7, sp, #0
 8009874:	4603      	mov	r3, r0
 8009876:	60b9      	str	r1, [r7, #8]
 8009878:	607a      	str	r2, [r7, #4]
 800987a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800987c:	2300      	movs	r3, #0
 800987e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009880:	f7ff ff42 	bl	8009708 <__NVIC_GetPriorityGrouping>
 8009884:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009886:	687a      	ldr	r2, [r7, #4]
 8009888:	68b9      	ldr	r1, [r7, #8]
 800988a:	6978      	ldr	r0, [r7, #20]
 800988c:	f7ff ff90 	bl	80097b0 <NVIC_EncodePriority>
 8009890:	4602      	mov	r2, r0
 8009892:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009896:	4611      	mov	r1, r2
 8009898:	4618      	mov	r0, r3
 800989a:	f7ff ff5f 	bl	800975c <__NVIC_SetPriority>
}
 800989e:	bf00      	nop
 80098a0:	3718      	adds	r7, #24
 80098a2:	46bd      	mov	sp, r7
 80098a4:	bd80      	pop	{r7, pc}

080098a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80098a6:	b580      	push	{r7, lr}
 80098a8:	b082      	sub	sp, #8
 80098aa:	af00      	add	r7, sp, #0
 80098ac:	4603      	mov	r3, r0
 80098ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80098b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098b4:	4618      	mov	r0, r3
 80098b6:	f7ff ff35 	bl	8009724 <__NVIC_EnableIRQ>
}
 80098ba:	bf00      	nop
 80098bc:	3708      	adds	r7, #8
 80098be:	46bd      	mov	sp, r7
 80098c0:	bd80      	pop	{r7, pc}

080098c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80098c2:	b580      	push	{r7, lr}
 80098c4:	b082      	sub	sp, #8
 80098c6:	af00      	add	r7, sp, #0
 80098c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80098ca:	6878      	ldr	r0, [r7, #4]
 80098cc:	f7ff ffa2 	bl	8009814 <SysTick_Config>
 80098d0:	4603      	mov	r3, r0
}
 80098d2:	4618      	mov	r0, r3
 80098d4:	3708      	adds	r7, #8
 80098d6:	46bd      	mov	sp, r7
 80098d8:	bd80      	pop	{r7, pc}

080098da <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80098da:	b480      	push	{r7}
 80098dc:	b085      	sub	sp, #20
 80098de:	af00      	add	r7, sp, #0
 80098e0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80098e2:	2300      	movs	r3, #0
 80098e4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80098ec:	b2db      	uxtb	r3, r3
 80098ee:	2b02      	cmp	r3, #2
 80098f0:	d008      	beq.n	8009904 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2204      	movs	r2, #4
 80098f6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	2200      	movs	r2, #0
 80098fc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8009900:	2301      	movs	r3, #1
 8009902:	e020      	b.n	8009946 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	681a      	ldr	r2, [r3, #0]
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	f022 020e 	bic.w	r2, r2, #14
 8009912:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	681a      	ldr	r2, [r3, #0]
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f022 0201 	bic.w	r2, r2, #1
 8009922:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800992c:	2101      	movs	r1, #1
 800992e:	fa01 f202 	lsl.w	r2, r1, r2
 8009932:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2201      	movs	r2, #1
 8009938:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	2200      	movs	r2, #0
 8009940:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8009944:	7bfb      	ldrb	r3, [r7, #15]
}
 8009946:	4618      	mov	r0, r3
 8009948:	3714      	adds	r7, #20
 800994a:	46bd      	mov	sp, r7
 800994c:	bc80      	pop	{r7}
 800994e:	4770      	bx	lr

08009950 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8009950:	b580      	push	{r7, lr}
 8009952:	b084      	sub	sp, #16
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009958:	2300      	movs	r3, #0
 800995a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8009962:	b2db      	uxtb	r3, r3
 8009964:	2b02      	cmp	r3, #2
 8009966:	d005      	beq.n	8009974 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2204      	movs	r2, #4
 800996c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800996e:	2301      	movs	r3, #1
 8009970:	73fb      	strb	r3, [r7, #15]
 8009972:	e0d6      	b.n	8009b22 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	681a      	ldr	r2, [r3, #0]
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	f022 020e 	bic.w	r2, r2, #14
 8009982:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	681a      	ldr	r2, [r3, #0]
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	f022 0201 	bic.w	r2, r2, #1
 8009992:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	461a      	mov	r2, r3
 800999a:	4b64      	ldr	r3, [pc, #400]	; (8009b2c <HAL_DMA_Abort_IT+0x1dc>)
 800999c:	429a      	cmp	r2, r3
 800999e:	d958      	bls.n	8009a52 <HAL_DMA_Abort_IT+0x102>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	4a62      	ldr	r2, [pc, #392]	; (8009b30 <HAL_DMA_Abort_IT+0x1e0>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d04f      	beq.n	8009a4a <HAL_DMA_Abort_IT+0xfa>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	681b      	ldr	r3, [r3, #0]
 80099ae:	4a61      	ldr	r2, [pc, #388]	; (8009b34 <HAL_DMA_Abort_IT+0x1e4>)
 80099b0:	4293      	cmp	r3, r2
 80099b2:	d048      	beq.n	8009a46 <HAL_DMA_Abort_IT+0xf6>
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	4a5f      	ldr	r2, [pc, #380]	; (8009b38 <HAL_DMA_Abort_IT+0x1e8>)
 80099ba:	4293      	cmp	r3, r2
 80099bc:	d040      	beq.n	8009a40 <HAL_DMA_Abort_IT+0xf0>
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	4a5e      	ldr	r2, [pc, #376]	; (8009b3c <HAL_DMA_Abort_IT+0x1ec>)
 80099c4:	4293      	cmp	r3, r2
 80099c6:	d038      	beq.n	8009a3a <HAL_DMA_Abort_IT+0xea>
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	4a5c      	ldr	r2, [pc, #368]	; (8009b40 <HAL_DMA_Abort_IT+0x1f0>)
 80099ce:	4293      	cmp	r3, r2
 80099d0:	d030      	beq.n	8009a34 <HAL_DMA_Abort_IT+0xe4>
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	4a5b      	ldr	r2, [pc, #364]	; (8009b44 <HAL_DMA_Abort_IT+0x1f4>)
 80099d8:	4293      	cmp	r3, r2
 80099da:	d028      	beq.n	8009a2e <HAL_DMA_Abort_IT+0xde>
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	681b      	ldr	r3, [r3, #0]
 80099e0:	4a52      	ldr	r2, [pc, #328]	; (8009b2c <HAL_DMA_Abort_IT+0x1dc>)
 80099e2:	4293      	cmp	r3, r2
 80099e4:	d020      	beq.n	8009a28 <HAL_DMA_Abort_IT+0xd8>
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	4a57      	ldr	r2, [pc, #348]	; (8009b48 <HAL_DMA_Abort_IT+0x1f8>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d019      	beq.n	8009a24 <HAL_DMA_Abort_IT+0xd4>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	4a55      	ldr	r2, [pc, #340]	; (8009b4c <HAL_DMA_Abort_IT+0x1fc>)
 80099f6:	4293      	cmp	r3, r2
 80099f8:	d012      	beq.n	8009a20 <HAL_DMA_Abort_IT+0xd0>
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	4a54      	ldr	r2, [pc, #336]	; (8009b50 <HAL_DMA_Abort_IT+0x200>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d00a      	beq.n	8009a1a <HAL_DMA_Abort_IT+0xca>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	4a52      	ldr	r2, [pc, #328]	; (8009b54 <HAL_DMA_Abort_IT+0x204>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d102      	bne.n	8009a14 <HAL_DMA_Abort_IT+0xc4>
 8009a0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a12:	e01b      	b.n	8009a4c <HAL_DMA_Abort_IT+0xfc>
 8009a14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009a18:	e018      	b.n	8009a4c <HAL_DMA_Abort_IT+0xfc>
 8009a1a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a1e:	e015      	b.n	8009a4c <HAL_DMA_Abort_IT+0xfc>
 8009a20:	2310      	movs	r3, #16
 8009a22:	e013      	b.n	8009a4c <HAL_DMA_Abort_IT+0xfc>
 8009a24:	2301      	movs	r3, #1
 8009a26:	e011      	b.n	8009a4c <HAL_DMA_Abort_IT+0xfc>
 8009a28:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009a2c:	e00e      	b.n	8009a4c <HAL_DMA_Abort_IT+0xfc>
 8009a2e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009a32:	e00b      	b.n	8009a4c <HAL_DMA_Abort_IT+0xfc>
 8009a34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009a38:	e008      	b.n	8009a4c <HAL_DMA_Abort_IT+0xfc>
 8009a3a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009a3e:	e005      	b.n	8009a4c <HAL_DMA_Abort_IT+0xfc>
 8009a40:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009a44:	e002      	b.n	8009a4c <HAL_DMA_Abort_IT+0xfc>
 8009a46:	2310      	movs	r3, #16
 8009a48:	e000      	b.n	8009a4c <HAL_DMA_Abort_IT+0xfc>
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	4a42      	ldr	r2, [pc, #264]	; (8009b58 <HAL_DMA_Abort_IT+0x208>)
 8009a4e:	6053      	str	r3, [r2, #4]
 8009a50:	e057      	b.n	8009b02 <HAL_DMA_Abort_IT+0x1b2>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	4a36      	ldr	r2, [pc, #216]	; (8009b30 <HAL_DMA_Abort_IT+0x1e0>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d04f      	beq.n	8009afc <HAL_DMA_Abort_IT+0x1ac>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4a34      	ldr	r2, [pc, #208]	; (8009b34 <HAL_DMA_Abort_IT+0x1e4>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d048      	beq.n	8009af8 <HAL_DMA_Abort_IT+0x1a8>
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4a33      	ldr	r2, [pc, #204]	; (8009b38 <HAL_DMA_Abort_IT+0x1e8>)
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d040      	beq.n	8009af2 <HAL_DMA_Abort_IT+0x1a2>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	4a31      	ldr	r2, [pc, #196]	; (8009b3c <HAL_DMA_Abort_IT+0x1ec>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d038      	beq.n	8009aec <HAL_DMA_Abort_IT+0x19c>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	4a30      	ldr	r2, [pc, #192]	; (8009b40 <HAL_DMA_Abort_IT+0x1f0>)
 8009a80:	4293      	cmp	r3, r2
 8009a82:	d030      	beq.n	8009ae6 <HAL_DMA_Abort_IT+0x196>
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4a2e      	ldr	r2, [pc, #184]	; (8009b44 <HAL_DMA_Abort_IT+0x1f4>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d028      	beq.n	8009ae0 <HAL_DMA_Abort_IT+0x190>
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	4a26      	ldr	r2, [pc, #152]	; (8009b2c <HAL_DMA_Abort_IT+0x1dc>)
 8009a94:	4293      	cmp	r3, r2
 8009a96:	d020      	beq.n	8009ada <HAL_DMA_Abort_IT+0x18a>
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4a2a      	ldr	r2, [pc, #168]	; (8009b48 <HAL_DMA_Abort_IT+0x1f8>)
 8009a9e:	4293      	cmp	r3, r2
 8009aa0:	d019      	beq.n	8009ad6 <HAL_DMA_Abort_IT+0x186>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	4a29      	ldr	r2, [pc, #164]	; (8009b4c <HAL_DMA_Abort_IT+0x1fc>)
 8009aa8:	4293      	cmp	r3, r2
 8009aaa:	d012      	beq.n	8009ad2 <HAL_DMA_Abort_IT+0x182>
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	4a27      	ldr	r2, [pc, #156]	; (8009b50 <HAL_DMA_Abort_IT+0x200>)
 8009ab2:	4293      	cmp	r3, r2
 8009ab4:	d00a      	beq.n	8009acc <HAL_DMA_Abort_IT+0x17c>
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	4a26      	ldr	r2, [pc, #152]	; (8009b54 <HAL_DMA_Abort_IT+0x204>)
 8009abc:	4293      	cmp	r3, r2
 8009abe:	d102      	bne.n	8009ac6 <HAL_DMA_Abort_IT+0x176>
 8009ac0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009ac4:	e01b      	b.n	8009afe <HAL_DMA_Abort_IT+0x1ae>
 8009ac6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009aca:	e018      	b.n	8009afe <HAL_DMA_Abort_IT+0x1ae>
 8009acc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009ad0:	e015      	b.n	8009afe <HAL_DMA_Abort_IT+0x1ae>
 8009ad2:	2310      	movs	r3, #16
 8009ad4:	e013      	b.n	8009afe <HAL_DMA_Abort_IT+0x1ae>
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	e011      	b.n	8009afe <HAL_DMA_Abort_IT+0x1ae>
 8009ada:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8009ade:	e00e      	b.n	8009afe <HAL_DMA_Abort_IT+0x1ae>
 8009ae0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009ae4:	e00b      	b.n	8009afe <HAL_DMA_Abort_IT+0x1ae>
 8009ae6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8009aea:	e008      	b.n	8009afe <HAL_DMA_Abort_IT+0x1ae>
 8009aec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009af0:	e005      	b.n	8009afe <HAL_DMA_Abort_IT+0x1ae>
 8009af2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009af6:	e002      	b.n	8009afe <HAL_DMA_Abort_IT+0x1ae>
 8009af8:	2310      	movs	r3, #16
 8009afa:	e000      	b.n	8009afe <HAL_DMA_Abort_IT+0x1ae>
 8009afc:	2301      	movs	r3, #1
 8009afe:	4a17      	ldr	r2, [pc, #92]	; (8009b5c <HAL_DMA_Abort_IT+0x20c>)
 8009b00:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2201      	movs	r2, #1
 8009b06:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2200      	movs	r2, #0
 8009b0e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d003      	beq.n	8009b22 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b1e:	6878      	ldr	r0, [r7, #4]
 8009b20:	4798      	blx	r3
    } 
  }
  return status;
 8009b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3710      	adds	r7, #16
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}
 8009b2c:	40020080 	.word	0x40020080
 8009b30:	40020008 	.word	0x40020008
 8009b34:	4002001c 	.word	0x4002001c
 8009b38:	40020030 	.word	0x40020030
 8009b3c:	40020044 	.word	0x40020044
 8009b40:	40020058 	.word	0x40020058
 8009b44:	4002006c 	.word	0x4002006c
 8009b48:	40020408 	.word	0x40020408
 8009b4c:	4002041c 	.word	0x4002041c
 8009b50:	40020430 	.word	0x40020430
 8009b54:	40020444 	.word	0x40020444
 8009b58:	40020400 	.word	0x40020400
 8009b5c:	40020000 	.word	0x40020000

08009b60 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b08b      	sub	sp, #44	; 0x2c
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]
 8009b68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009b6a:	2300      	movs	r3, #0
 8009b6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8009b6e:	2300      	movs	r3, #0
 8009b70:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009b72:	e179      	b.n	8009e68 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8009b74:	2201      	movs	r2, #1
 8009b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b78:	fa02 f303 	lsl.w	r3, r2, r3
 8009b7c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	69fa      	ldr	r2, [r7, #28]
 8009b84:	4013      	ands	r3, r2
 8009b86:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8009b88:	69ba      	ldr	r2, [r7, #24]
 8009b8a:	69fb      	ldr	r3, [r7, #28]
 8009b8c:	429a      	cmp	r2, r3
 8009b8e:	f040 8168 	bne.w	8009e62 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8009b92:	683b      	ldr	r3, [r7, #0]
 8009b94:	685b      	ldr	r3, [r3, #4]
 8009b96:	4a96      	ldr	r2, [pc, #600]	; (8009df0 <HAL_GPIO_Init+0x290>)
 8009b98:	4293      	cmp	r3, r2
 8009b9a:	d05e      	beq.n	8009c5a <HAL_GPIO_Init+0xfa>
 8009b9c:	4a94      	ldr	r2, [pc, #592]	; (8009df0 <HAL_GPIO_Init+0x290>)
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d875      	bhi.n	8009c8e <HAL_GPIO_Init+0x12e>
 8009ba2:	4a94      	ldr	r2, [pc, #592]	; (8009df4 <HAL_GPIO_Init+0x294>)
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d058      	beq.n	8009c5a <HAL_GPIO_Init+0xfa>
 8009ba8:	4a92      	ldr	r2, [pc, #584]	; (8009df4 <HAL_GPIO_Init+0x294>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d86f      	bhi.n	8009c8e <HAL_GPIO_Init+0x12e>
 8009bae:	4a92      	ldr	r2, [pc, #584]	; (8009df8 <HAL_GPIO_Init+0x298>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d052      	beq.n	8009c5a <HAL_GPIO_Init+0xfa>
 8009bb4:	4a90      	ldr	r2, [pc, #576]	; (8009df8 <HAL_GPIO_Init+0x298>)
 8009bb6:	4293      	cmp	r3, r2
 8009bb8:	d869      	bhi.n	8009c8e <HAL_GPIO_Init+0x12e>
 8009bba:	4a90      	ldr	r2, [pc, #576]	; (8009dfc <HAL_GPIO_Init+0x29c>)
 8009bbc:	4293      	cmp	r3, r2
 8009bbe:	d04c      	beq.n	8009c5a <HAL_GPIO_Init+0xfa>
 8009bc0:	4a8e      	ldr	r2, [pc, #568]	; (8009dfc <HAL_GPIO_Init+0x29c>)
 8009bc2:	4293      	cmp	r3, r2
 8009bc4:	d863      	bhi.n	8009c8e <HAL_GPIO_Init+0x12e>
 8009bc6:	4a8e      	ldr	r2, [pc, #568]	; (8009e00 <HAL_GPIO_Init+0x2a0>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d046      	beq.n	8009c5a <HAL_GPIO_Init+0xfa>
 8009bcc:	4a8c      	ldr	r2, [pc, #560]	; (8009e00 <HAL_GPIO_Init+0x2a0>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d85d      	bhi.n	8009c8e <HAL_GPIO_Init+0x12e>
 8009bd2:	2b12      	cmp	r3, #18
 8009bd4:	d82a      	bhi.n	8009c2c <HAL_GPIO_Init+0xcc>
 8009bd6:	2b12      	cmp	r3, #18
 8009bd8:	d859      	bhi.n	8009c8e <HAL_GPIO_Init+0x12e>
 8009bda:	a201      	add	r2, pc, #4	; (adr r2, 8009be0 <HAL_GPIO_Init+0x80>)
 8009bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009be0:	08009c5b 	.word	0x08009c5b
 8009be4:	08009c35 	.word	0x08009c35
 8009be8:	08009c47 	.word	0x08009c47
 8009bec:	08009c89 	.word	0x08009c89
 8009bf0:	08009c8f 	.word	0x08009c8f
 8009bf4:	08009c8f 	.word	0x08009c8f
 8009bf8:	08009c8f 	.word	0x08009c8f
 8009bfc:	08009c8f 	.word	0x08009c8f
 8009c00:	08009c8f 	.word	0x08009c8f
 8009c04:	08009c8f 	.word	0x08009c8f
 8009c08:	08009c8f 	.word	0x08009c8f
 8009c0c:	08009c8f 	.word	0x08009c8f
 8009c10:	08009c8f 	.word	0x08009c8f
 8009c14:	08009c8f 	.word	0x08009c8f
 8009c18:	08009c8f 	.word	0x08009c8f
 8009c1c:	08009c8f 	.word	0x08009c8f
 8009c20:	08009c8f 	.word	0x08009c8f
 8009c24:	08009c3d 	.word	0x08009c3d
 8009c28:	08009c51 	.word	0x08009c51
 8009c2c:	4a75      	ldr	r2, [pc, #468]	; (8009e04 <HAL_GPIO_Init+0x2a4>)
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d013      	beq.n	8009c5a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8009c32:	e02c      	b.n	8009c8e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8009c34:	683b      	ldr	r3, [r7, #0]
 8009c36:	68db      	ldr	r3, [r3, #12]
 8009c38:	623b      	str	r3, [r7, #32]
          break;
 8009c3a:	e029      	b.n	8009c90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	68db      	ldr	r3, [r3, #12]
 8009c40:	3304      	adds	r3, #4
 8009c42:	623b      	str	r3, [r7, #32]
          break;
 8009c44:	e024      	b.n	8009c90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	68db      	ldr	r3, [r3, #12]
 8009c4a:	3308      	adds	r3, #8
 8009c4c:	623b      	str	r3, [r7, #32]
          break;
 8009c4e:	e01f      	b.n	8009c90 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	68db      	ldr	r3, [r3, #12]
 8009c54:	330c      	adds	r3, #12
 8009c56:	623b      	str	r3, [r7, #32]
          break;
 8009c58:	e01a      	b.n	8009c90 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	689b      	ldr	r3, [r3, #8]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d102      	bne.n	8009c68 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8009c62:	2304      	movs	r3, #4
 8009c64:	623b      	str	r3, [r7, #32]
          break;
 8009c66:	e013      	b.n	8009c90 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8009c68:	683b      	ldr	r3, [r7, #0]
 8009c6a:	689b      	ldr	r3, [r3, #8]
 8009c6c:	2b01      	cmp	r3, #1
 8009c6e:	d105      	bne.n	8009c7c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009c70:	2308      	movs	r3, #8
 8009c72:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	69fa      	ldr	r2, [r7, #28]
 8009c78:	611a      	str	r2, [r3, #16]
          break;
 8009c7a:	e009      	b.n	8009c90 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009c7c:	2308      	movs	r3, #8
 8009c7e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	69fa      	ldr	r2, [r7, #28]
 8009c84:	615a      	str	r2, [r3, #20]
          break;
 8009c86:	e003      	b.n	8009c90 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	623b      	str	r3, [r7, #32]
          break;
 8009c8c:	e000      	b.n	8009c90 <HAL_GPIO_Init+0x130>
          break;
 8009c8e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009c90:	69bb      	ldr	r3, [r7, #24]
 8009c92:	2bff      	cmp	r3, #255	; 0xff
 8009c94:	d801      	bhi.n	8009c9a <HAL_GPIO_Init+0x13a>
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	e001      	b.n	8009c9e <HAL_GPIO_Init+0x13e>
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	3304      	adds	r3, #4
 8009c9e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009ca0:	69bb      	ldr	r3, [r7, #24]
 8009ca2:	2bff      	cmp	r3, #255	; 0xff
 8009ca4:	d802      	bhi.n	8009cac <HAL_GPIO_Init+0x14c>
 8009ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ca8:	009b      	lsls	r3, r3, #2
 8009caa:	e002      	b.n	8009cb2 <HAL_GPIO_Init+0x152>
 8009cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cae:	3b08      	subs	r3, #8
 8009cb0:	009b      	lsls	r3, r3, #2
 8009cb2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	681a      	ldr	r2, [r3, #0]
 8009cb8:	210f      	movs	r1, #15
 8009cba:	693b      	ldr	r3, [r7, #16]
 8009cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8009cc0:	43db      	mvns	r3, r3
 8009cc2:	401a      	ands	r2, r3
 8009cc4:	6a39      	ldr	r1, [r7, #32]
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	fa01 f303 	lsl.w	r3, r1, r3
 8009ccc:	431a      	orrs	r2, r3
 8009cce:	697b      	ldr	r3, [r7, #20]
 8009cd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009cd2:	683b      	ldr	r3, [r7, #0]
 8009cd4:	685b      	ldr	r3, [r3, #4]
 8009cd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	f000 80c1 	beq.w	8009e62 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8009ce0:	4b49      	ldr	r3, [pc, #292]	; (8009e08 <HAL_GPIO_Init+0x2a8>)
 8009ce2:	699b      	ldr	r3, [r3, #24]
 8009ce4:	4a48      	ldr	r2, [pc, #288]	; (8009e08 <HAL_GPIO_Init+0x2a8>)
 8009ce6:	f043 0301 	orr.w	r3, r3, #1
 8009cea:	6193      	str	r3, [r2, #24]
 8009cec:	4b46      	ldr	r3, [pc, #280]	; (8009e08 <HAL_GPIO_Init+0x2a8>)
 8009cee:	699b      	ldr	r3, [r3, #24]
 8009cf0:	f003 0301 	and.w	r3, r3, #1
 8009cf4:	60bb      	str	r3, [r7, #8]
 8009cf6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8009cf8:	4a44      	ldr	r2, [pc, #272]	; (8009e0c <HAL_GPIO_Init+0x2ac>)
 8009cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cfc:	089b      	lsrs	r3, r3, #2
 8009cfe:	3302      	adds	r3, #2
 8009d00:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d04:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8009d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d08:	f003 0303 	and.w	r3, r3, #3
 8009d0c:	009b      	lsls	r3, r3, #2
 8009d0e:	220f      	movs	r2, #15
 8009d10:	fa02 f303 	lsl.w	r3, r2, r3
 8009d14:	43db      	mvns	r3, r3
 8009d16:	68fa      	ldr	r2, [r7, #12]
 8009d18:	4013      	ands	r3, r2
 8009d1a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	4a3c      	ldr	r2, [pc, #240]	; (8009e10 <HAL_GPIO_Init+0x2b0>)
 8009d20:	4293      	cmp	r3, r2
 8009d22:	d01f      	beq.n	8009d64 <HAL_GPIO_Init+0x204>
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	4a3b      	ldr	r2, [pc, #236]	; (8009e14 <HAL_GPIO_Init+0x2b4>)
 8009d28:	4293      	cmp	r3, r2
 8009d2a:	d019      	beq.n	8009d60 <HAL_GPIO_Init+0x200>
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	4a3a      	ldr	r2, [pc, #232]	; (8009e18 <HAL_GPIO_Init+0x2b8>)
 8009d30:	4293      	cmp	r3, r2
 8009d32:	d013      	beq.n	8009d5c <HAL_GPIO_Init+0x1fc>
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	4a39      	ldr	r2, [pc, #228]	; (8009e1c <HAL_GPIO_Init+0x2bc>)
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d00d      	beq.n	8009d58 <HAL_GPIO_Init+0x1f8>
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	4a38      	ldr	r2, [pc, #224]	; (8009e20 <HAL_GPIO_Init+0x2c0>)
 8009d40:	4293      	cmp	r3, r2
 8009d42:	d007      	beq.n	8009d54 <HAL_GPIO_Init+0x1f4>
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	4a37      	ldr	r2, [pc, #220]	; (8009e24 <HAL_GPIO_Init+0x2c4>)
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	d101      	bne.n	8009d50 <HAL_GPIO_Init+0x1f0>
 8009d4c:	2305      	movs	r3, #5
 8009d4e:	e00a      	b.n	8009d66 <HAL_GPIO_Init+0x206>
 8009d50:	2306      	movs	r3, #6
 8009d52:	e008      	b.n	8009d66 <HAL_GPIO_Init+0x206>
 8009d54:	2304      	movs	r3, #4
 8009d56:	e006      	b.n	8009d66 <HAL_GPIO_Init+0x206>
 8009d58:	2303      	movs	r3, #3
 8009d5a:	e004      	b.n	8009d66 <HAL_GPIO_Init+0x206>
 8009d5c:	2302      	movs	r3, #2
 8009d5e:	e002      	b.n	8009d66 <HAL_GPIO_Init+0x206>
 8009d60:	2301      	movs	r3, #1
 8009d62:	e000      	b.n	8009d66 <HAL_GPIO_Init+0x206>
 8009d64:	2300      	movs	r3, #0
 8009d66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d68:	f002 0203 	and.w	r2, r2, #3
 8009d6c:	0092      	lsls	r2, r2, #2
 8009d6e:	4093      	lsls	r3, r2
 8009d70:	68fa      	ldr	r2, [r7, #12]
 8009d72:	4313      	orrs	r3, r2
 8009d74:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8009d76:	4925      	ldr	r1, [pc, #148]	; (8009e0c <HAL_GPIO_Init+0x2ac>)
 8009d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d7a:	089b      	lsrs	r3, r3, #2
 8009d7c:	3302      	adds	r3, #2
 8009d7e:	68fa      	ldr	r2, [r7, #12]
 8009d80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009d84:	683b      	ldr	r3, [r7, #0]
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d006      	beq.n	8009d9e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8009d90:	4b25      	ldr	r3, [pc, #148]	; (8009e28 <HAL_GPIO_Init+0x2c8>)
 8009d92:	689a      	ldr	r2, [r3, #8]
 8009d94:	4924      	ldr	r1, [pc, #144]	; (8009e28 <HAL_GPIO_Init+0x2c8>)
 8009d96:	69bb      	ldr	r3, [r7, #24]
 8009d98:	4313      	orrs	r3, r2
 8009d9a:	608b      	str	r3, [r1, #8]
 8009d9c:	e006      	b.n	8009dac <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8009d9e:	4b22      	ldr	r3, [pc, #136]	; (8009e28 <HAL_GPIO_Init+0x2c8>)
 8009da0:	689a      	ldr	r2, [r3, #8]
 8009da2:	69bb      	ldr	r3, [r7, #24]
 8009da4:	43db      	mvns	r3, r3
 8009da6:	4920      	ldr	r1, [pc, #128]	; (8009e28 <HAL_GPIO_Init+0x2c8>)
 8009da8:	4013      	ands	r3, r2
 8009daa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8009dac:	683b      	ldr	r3, [r7, #0]
 8009dae:	685b      	ldr	r3, [r3, #4]
 8009db0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d006      	beq.n	8009dc6 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8009db8:	4b1b      	ldr	r3, [pc, #108]	; (8009e28 <HAL_GPIO_Init+0x2c8>)
 8009dba:	68da      	ldr	r2, [r3, #12]
 8009dbc:	491a      	ldr	r1, [pc, #104]	; (8009e28 <HAL_GPIO_Init+0x2c8>)
 8009dbe:	69bb      	ldr	r3, [r7, #24]
 8009dc0:	4313      	orrs	r3, r2
 8009dc2:	60cb      	str	r3, [r1, #12]
 8009dc4:	e006      	b.n	8009dd4 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8009dc6:	4b18      	ldr	r3, [pc, #96]	; (8009e28 <HAL_GPIO_Init+0x2c8>)
 8009dc8:	68da      	ldr	r2, [r3, #12]
 8009dca:	69bb      	ldr	r3, [r7, #24]
 8009dcc:	43db      	mvns	r3, r3
 8009dce:	4916      	ldr	r1, [pc, #88]	; (8009e28 <HAL_GPIO_Init+0x2c8>)
 8009dd0:	4013      	ands	r3, r2
 8009dd2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009dd4:	683b      	ldr	r3, [r7, #0]
 8009dd6:	685b      	ldr	r3, [r3, #4]
 8009dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d025      	beq.n	8009e2c <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8009de0:	4b11      	ldr	r3, [pc, #68]	; (8009e28 <HAL_GPIO_Init+0x2c8>)
 8009de2:	685a      	ldr	r2, [r3, #4]
 8009de4:	4910      	ldr	r1, [pc, #64]	; (8009e28 <HAL_GPIO_Init+0x2c8>)
 8009de6:	69bb      	ldr	r3, [r7, #24]
 8009de8:	4313      	orrs	r3, r2
 8009dea:	604b      	str	r3, [r1, #4]
 8009dec:	e025      	b.n	8009e3a <HAL_GPIO_Init+0x2da>
 8009dee:	bf00      	nop
 8009df0:	10320000 	.word	0x10320000
 8009df4:	10310000 	.word	0x10310000
 8009df8:	10220000 	.word	0x10220000
 8009dfc:	10210000 	.word	0x10210000
 8009e00:	10120000 	.word	0x10120000
 8009e04:	10110000 	.word	0x10110000
 8009e08:	40021000 	.word	0x40021000
 8009e0c:	40010000 	.word	0x40010000
 8009e10:	40010800 	.word	0x40010800
 8009e14:	40010c00 	.word	0x40010c00
 8009e18:	40011000 	.word	0x40011000
 8009e1c:	40011400 	.word	0x40011400
 8009e20:	40011800 	.word	0x40011800
 8009e24:	40011c00 	.word	0x40011c00
 8009e28:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8009e2c:	4b15      	ldr	r3, [pc, #84]	; (8009e84 <HAL_GPIO_Init+0x324>)
 8009e2e:	685a      	ldr	r2, [r3, #4]
 8009e30:	69bb      	ldr	r3, [r7, #24]
 8009e32:	43db      	mvns	r3, r3
 8009e34:	4913      	ldr	r1, [pc, #76]	; (8009e84 <HAL_GPIO_Init+0x324>)
 8009e36:	4013      	ands	r3, r2
 8009e38:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8009e3a:	683b      	ldr	r3, [r7, #0]
 8009e3c:	685b      	ldr	r3, [r3, #4]
 8009e3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d006      	beq.n	8009e54 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8009e46:	4b0f      	ldr	r3, [pc, #60]	; (8009e84 <HAL_GPIO_Init+0x324>)
 8009e48:	681a      	ldr	r2, [r3, #0]
 8009e4a:	490e      	ldr	r1, [pc, #56]	; (8009e84 <HAL_GPIO_Init+0x324>)
 8009e4c:	69bb      	ldr	r3, [r7, #24]
 8009e4e:	4313      	orrs	r3, r2
 8009e50:	600b      	str	r3, [r1, #0]
 8009e52:	e006      	b.n	8009e62 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8009e54:	4b0b      	ldr	r3, [pc, #44]	; (8009e84 <HAL_GPIO_Init+0x324>)
 8009e56:	681a      	ldr	r2, [r3, #0]
 8009e58:	69bb      	ldr	r3, [r7, #24]
 8009e5a:	43db      	mvns	r3, r3
 8009e5c:	4909      	ldr	r1, [pc, #36]	; (8009e84 <HAL_GPIO_Init+0x324>)
 8009e5e:	4013      	ands	r3, r2
 8009e60:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8009e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e64:	3301      	adds	r3, #1
 8009e66:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009e68:	683b      	ldr	r3, [r7, #0]
 8009e6a:	681a      	ldr	r2, [r3, #0]
 8009e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	f47f ae7e 	bne.w	8009b74 <HAL_GPIO_Init+0x14>
  }
}
 8009e78:	bf00      	nop
 8009e7a:	bf00      	nop
 8009e7c:	372c      	adds	r7, #44	; 0x2c
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	bc80      	pop	{r7}
 8009e82:	4770      	bx	lr
 8009e84:	40010400 	.word	0x40010400

08009e88 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009e88:	b480      	push	{r7}
 8009e8a:	b089      	sub	sp, #36	; 0x24
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
 8009e90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009e92:	2300      	movs	r3, #0
 8009e94:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8009e96:	e0a6      	b.n	8009fe6 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8009e98:	2201      	movs	r2, #1
 8009e9a:	69fb      	ldr	r3, [r7, #28]
 8009e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8009ea0:	683a      	ldr	r2, [r7, #0]
 8009ea2:	4013      	ands	r3, r2
 8009ea4:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8009ea6:	69bb      	ldr	r3, [r7, #24]
 8009ea8:	2b00      	cmp	r3, #0
 8009eaa:	f000 8099 	beq.w	8009fe0 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 8009eae:	4a54      	ldr	r2, [pc, #336]	; (800a000 <HAL_GPIO_DeInit+0x178>)
 8009eb0:	69fb      	ldr	r3, [r7, #28]
 8009eb2:	089b      	lsrs	r3, r3, #2
 8009eb4:	3302      	adds	r3, #2
 8009eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009eba:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 8009ebc:	69fb      	ldr	r3, [r7, #28]
 8009ebe:	f003 0303 	and.w	r3, r3, #3
 8009ec2:	009b      	lsls	r3, r3, #2
 8009ec4:	220f      	movs	r2, #15
 8009ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8009eca:	697a      	ldr	r2, [r7, #20]
 8009ecc:	4013      	ands	r3, r2
 8009ece:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	4a4c      	ldr	r2, [pc, #304]	; (800a004 <HAL_GPIO_DeInit+0x17c>)
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d01f      	beq.n	8009f18 <HAL_GPIO_DeInit+0x90>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	4a4b      	ldr	r2, [pc, #300]	; (800a008 <HAL_GPIO_DeInit+0x180>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d019      	beq.n	8009f14 <HAL_GPIO_DeInit+0x8c>
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	4a4a      	ldr	r2, [pc, #296]	; (800a00c <HAL_GPIO_DeInit+0x184>)
 8009ee4:	4293      	cmp	r3, r2
 8009ee6:	d013      	beq.n	8009f10 <HAL_GPIO_DeInit+0x88>
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	4a49      	ldr	r2, [pc, #292]	; (800a010 <HAL_GPIO_DeInit+0x188>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d00d      	beq.n	8009f0c <HAL_GPIO_DeInit+0x84>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	4a48      	ldr	r2, [pc, #288]	; (800a014 <HAL_GPIO_DeInit+0x18c>)
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d007      	beq.n	8009f08 <HAL_GPIO_DeInit+0x80>
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	4a47      	ldr	r2, [pc, #284]	; (800a018 <HAL_GPIO_DeInit+0x190>)
 8009efc:	4293      	cmp	r3, r2
 8009efe:	d101      	bne.n	8009f04 <HAL_GPIO_DeInit+0x7c>
 8009f00:	2305      	movs	r3, #5
 8009f02:	e00a      	b.n	8009f1a <HAL_GPIO_DeInit+0x92>
 8009f04:	2306      	movs	r3, #6
 8009f06:	e008      	b.n	8009f1a <HAL_GPIO_DeInit+0x92>
 8009f08:	2304      	movs	r3, #4
 8009f0a:	e006      	b.n	8009f1a <HAL_GPIO_DeInit+0x92>
 8009f0c:	2303      	movs	r3, #3
 8009f0e:	e004      	b.n	8009f1a <HAL_GPIO_DeInit+0x92>
 8009f10:	2302      	movs	r3, #2
 8009f12:	e002      	b.n	8009f1a <HAL_GPIO_DeInit+0x92>
 8009f14:	2301      	movs	r3, #1
 8009f16:	e000      	b.n	8009f1a <HAL_GPIO_DeInit+0x92>
 8009f18:	2300      	movs	r3, #0
 8009f1a:	69fa      	ldr	r2, [r7, #28]
 8009f1c:	f002 0203 	and.w	r2, r2, #3
 8009f20:	0092      	lsls	r2, r2, #2
 8009f22:	4093      	lsls	r3, r2
 8009f24:	697a      	ldr	r2, [r7, #20]
 8009f26:	429a      	cmp	r2, r3
 8009f28:	d132      	bne.n	8009f90 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 8009f2a:	4b3c      	ldr	r3, [pc, #240]	; (800a01c <HAL_GPIO_DeInit+0x194>)
 8009f2c:	681a      	ldr	r2, [r3, #0]
 8009f2e:	69bb      	ldr	r3, [r7, #24]
 8009f30:	43db      	mvns	r3, r3
 8009f32:	493a      	ldr	r1, [pc, #232]	; (800a01c <HAL_GPIO_DeInit+0x194>)
 8009f34:	4013      	ands	r3, r2
 8009f36:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 8009f38:	4b38      	ldr	r3, [pc, #224]	; (800a01c <HAL_GPIO_DeInit+0x194>)
 8009f3a:	685a      	ldr	r2, [r3, #4]
 8009f3c:	69bb      	ldr	r3, [r7, #24]
 8009f3e:	43db      	mvns	r3, r3
 8009f40:	4936      	ldr	r1, [pc, #216]	; (800a01c <HAL_GPIO_DeInit+0x194>)
 8009f42:	4013      	ands	r3, r2
 8009f44:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 8009f46:	4b35      	ldr	r3, [pc, #212]	; (800a01c <HAL_GPIO_DeInit+0x194>)
 8009f48:	68da      	ldr	r2, [r3, #12]
 8009f4a:	69bb      	ldr	r3, [r7, #24]
 8009f4c:	43db      	mvns	r3, r3
 8009f4e:	4933      	ldr	r1, [pc, #204]	; (800a01c <HAL_GPIO_DeInit+0x194>)
 8009f50:	4013      	ands	r3, r2
 8009f52:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8009f54:	4b31      	ldr	r3, [pc, #196]	; (800a01c <HAL_GPIO_DeInit+0x194>)
 8009f56:	689a      	ldr	r2, [r3, #8]
 8009f58:	69bb      	ldr	r3, [r7, #24]
 8009f5a:	43db      	mvns	r3, r3
 8009f5c:	492f      	ldr	r1, [pc, #188]	; (800a01c <HAL_GPIO_DeInit+0x194>)
 8009f5e:	4013      	ands	r3, r2
 8009f60:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8009f62:	69fb      	ldr	r3, [r7, #28]
 8009f64:	f003 0303 	and.w	r3, r3, #3
 8009f68:	009b      	lsls	r3, r3, #2
 8009f6a:	220f      	movs	r2, #15
 8009f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8009f70:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8009f72:	4a23      	ldr	r2, [pc, #140]	; (800a000 <HAL_GPIO_DeInit+0x178>)
 8009f74:	69fb      	ldr	r3, [r7, #28]
 8009f76:	089b      	lsrs	r3, r3, #2
 8009f78:	3302      	adds	r3, #2
 8009f7a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009f7e:	697b      	ldr	r3, [r7, #20]
 8009f80:	43da      	mvns	r2, r3
 8009f82:	481f      	ldr	r0, [pc, #124]	; (800a000 <HAL_GPIO_DeInit+0x178>)
 8009f84:	69fb      	ldr	r3, [r7, #28]
 8009f86:	089b      	lsrs	r3, r3, #2
 8009f88:	400a      	ands	r2, r1
 8009f8a:	3302      	adds	r3, #2
 8009f8c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009f90:	69bb      	ldr	r3, [r7, #24]
 8009f92:	2bff      	cmp	r3, #255	; 0xff
 8009f94:	d801      	bhi.n	8009f9a <HAL_GPIO_DeInit+0x112>
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	e001      	b.n	8009f9e <HAL_GPIO_DeInit+0x116>
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	3304      	adds	r3, #4
 8009f9e:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009fa0:	69bb      	ldr	r3, [r7, #24]
 8009fa2:	2bff      	cmp	r3, #255	; 0xff
 8009fa4:	d802      	bhi.n	8009fac <HAL_GPIO_DeInit+0x124>
 8009fa6:	69fb      	ldr	r3, [r7, #28]
 8009fa8:	009b      	lsls	r3, r3, #2
 8009faa:	e002      	b.n	8009fb2 <HAL_GPIO_DeInit+0x12a>
 8009fac:	69fb      	ldr	r3, [r7, #28]
 8009fae:	3b08      	subs	r3, #8
 8009fb0:	009b      	lsls	r3, r3, #2
 8009fb2:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8009fb4:	693b      	ldr	r3, [r7, #16]
 8009fb6:	681a      	ldr	r2, [r3, #0]
 8009fb8:	210f      	movs	r1, #15
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8009fc0:	43db      	mvns	r3, r3
 8009fc2:	401a      	ands	r2, r3
 8009fc4:	2104      	movs	r1, #4
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	fa01 f303 	lsl.w	r3, r1, r3
 8009fcc:	431a      	orrs	r2, r3
 8009fce:	693b      	ldr	r3, [r7, #16]
 8009fd0:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	68da      	ldr	r2, [r3, #12]
 8009fd6:	69bb      	ldr	r3, [r7, #24]
 8009fd8:	43db      	mvns	r3, r3
 8009fda:	401a      	ands	r2, r3
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	60da      	str	r2, [r3, #12]
    }

    position++;
 8009fe0:	69fb      	ldr	r3, [r7, #28]
 8009fe2:	3301      	adds	r3, #1
 8009fe4:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8009fe6:	683a      	ldr	r2, [r7, #0]
 8009fe8:	69fb      	ldr	r3, [r7, #28]
 8009fea:	fa22 f303 	lsr.w	r3, r2, r3
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	f47f af52 	bne.w	8009e98 <HAL_GPIO_DeInit+0x10>
  }
}
 8009ff4:	bf00      	nop
 8009ff6:	bf00      	nop
 8009ff8:	3724      	adds	r7, #36	; 0x24
 8009ffa:	46bd      	mov	sp, r7
 8009ffc:	bc80      	pop	{r7}
 8009ffe:	4770      	bx	lr
 800a000:	40010000 	.word	0x40010000
 800a004:	40010800 	.word	0x40010800
 800a008:	40010c00 	.word	0x40010c00
 800a00c:	40011000 	.word	0x40011000
 800a010:	40011400 	.word	0x40011400
 800a014:	40011800 	.word	0x40011800
 800a018:	40011c00 	.word	0x40011c00
 800a01c:	40010400 	.word	0x40010400

0800a020 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a020:	b480      	push	{r7}
 800a022:	b085      	sub	sp, #20
 800a024:	af00      	add	r7, sp, #0
 800a026:	6078      	str	r0, [r7, #4]
 800a028:	460b      	mov	r3, r1
 800a02a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	689a      	ldr	r2, [r3, #8]
 800a030:	887b      	ldrh	r3, [r7, #2]
 800a032:	4013      	ands	r3, r2
 800a034:	2b00      	cmp	r3, #0
 800a036:	d002      	beq.n	800a03e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a038:	2301      	movs	r3, #1
 800a03a:	73fb      	strb	r3, [r7, #15]
 800a03c:	e001      	b.n	800a042 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a03e:	2300      	movs	r3, #0
 800a040:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a042:	7bfb      	ldrb	r3, [r7, #15]
}
 800a044:	4618      	mov	r0, r3
 800a046:	3714      	adds	r7, #20
 800a048:	46bd      	mov	sp, r7
 800a04a:	bc80      	pop	{r7}
 800a04c:	4770      	bx	lr

0800a04e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a04e:	b480      	push	{r7}
 800a050:	b083      	sub	sp, #12
 800a052:	af00      	add	r7, sp, #0
 800a054:	6078      	str	r0, [r7, #4]
 800a056:	460b      	mov	r3, r1
 800a058:	807b      	strh	r3, [r7, #2]
 800a05a:	4613      	mov	r3, r2
 800a05c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a05e:	787b      	ldrb	r3, [r7, #1]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d003      	beq.n	800a06c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a064:	887a      	ldrh	r2, [r7, #2]
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800a06a:	e003      	b.n	800a074 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800a06c:	887b      	ldrh	r3, [r7, #2]
 800a06e:	041a      	lsls	r2, r3, #16
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	611a      	str	r2, [r3, #16]
}
 800a074:	bf00      	nop
 800a076:	370c      	adds	r7, #12
 800a078:	46bd      	mov	sp, r7
 800a07a:	bc80      	pop	{r7}
 800a07c:	4770      	bx	lr

0800a07e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800a07e:	b480      	push	{r7}
 800a080:	b085      	sub	sp, #20
 800a082:	af00      	add	r7, sp, #0
 800a084:	6078      	str	r0, [r7, #4]
 800a086:	460b      	mov	r3, r1
 800a088:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	68db      	ldr	r3, [r3, #12]
 800a08e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800a090:	887a      	ldrh	r2, [r7, #2]
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	4013      	ands	r3, r2
 800a096:	041a      	lsls	r2, r3, #16
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	43d9      	mvns	r1, r3
 800a09c:	887b      	ldrh	r3, [r7, #2]
 800a09e:	400b      	ands	r3, r1
 800a0a0:	431a      	orrs	r2, r3
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	611a      	str	r2, [r3, #16]
}
 800a0a6:	bf00      	nop
 800a0a8:	3714      	adds	r7, #20
 800a0aa:	46bd      	mov	sp, r7
 800a0ac:	bc80      	pop	{r7}
 800a0ae:	4770      	bx	lr

0800a0b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b084      	sub	sp, #16
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d101      	bne.n	800a0c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a0be:	2301      	movs	r3, #1
 800a0c0:	e12b      	b.n	800a31a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a0c8:	b2db      	uxtb	r3, r3
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d106      	bne.n	800a0dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800a0d6:	6878      	ldr	r0, [r7, #4]
 800a0d8:	f7fe fff8 	bl	80090cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2224      	movs	r2, #36	; 0x24
 800a0e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	681a      	ldr	r2, [r3, #0]
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	f022 0201 	bic.w	r2, r2, #1
 800a0f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	681b      	ldr	r3, [r3, #0]
 800a0f8:	681a      	ldr	r2, [r3, #0]
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800a102:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	681a      	ldr	r2, [r3, #0]
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800a112:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800a114:	f001 fdb8 	bl	800bc88 <HAL_RCC_GetPCLK1Freq>
 800a118:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	685b      	ldr	r3, [r3, #4]
 800a11e:	4a81      	ldr	r2, [pc, #516]	; (800a324 <HAL_I2C_Init+0x274>)
 800a120:	4293      	cmp	r3, r2
 800a122:	d807      	bhi.n	800a134 <HAL_I2C_Init+0x84>
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	4a80      	ldr	r2, [pc, #512]	; (800a328 <HAL_I2C_Init+0x278>)
 800a128:	4293      	cmp	r3, r2
 800a12a:	bf94      	ite	ls
 800a12c:	2301      	movls	r3, #1
 800a12e:	2300      	movhi	r3, #0
 800a130:	b2db      	uxtb	r3, r3
 800a132:	e006      	b.n	800a142 <HAL_I2C_Init+0x92>
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	4a7d      	ldr	r2, [pc, #500]	; (800a32c <HAL_I2C_Init+0x27c>)
 800a138:	4293      	cmp	r3, r2
 800a13a:	bf94      	ite	ls
 800a13c:	2301      	movls	r3, #1
 800a13e:	2300      	movhi	r3, #0
 800a140:	b2db      	uxtb	r3, r3
 800a142:	2b00      	cmp	r3, #0
 800a144:	d001      	beq.n	800a14a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800a146:	2301      	movs	r3, #1
 800a148:	e0e7      	b.n	800a31a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	4a78      	ldr	r2, [pc, #480]	; (800a330 <HAL_I2C_Init+0x280>)
 800a14e:	fba2 2303 	umull	r2, r3, r2, r3
 800a152:	0c9b      	lsrs	r3, r3, #18
 800a154:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	685b      	ldr	r3, [r3, #4]
 800a15c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	68ba      	ldr	r2, [r7, #8]
 800a166:	430a      	orrs	r2, r1
 800a168:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	6a1b      	ldr	r3, [r3, #32]
 800a170:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	685b      	ldr	r3, [r3, #4]
 800a178:	4a6a      	ldr	r2, [pc, #424]	; (800a324 <HAL_I2C_Init+0x274>)
 800a17a:	4293      	cmp	r3, r2
 800a17c:	d802      	bhi.n	800a184 <HAL_I2C_Init+0xd4>
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	3301      	adds	r3, #1
 800a182:	e009      	b.n	800a198 <HAL_I2C_Init+0xe8>
 800a184:	68bb      	ldr	r3, [r7, #8]
 800a186:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800a18a:	fb02 f303 	mul.w	r3, r2, r3
 800a18e:	4a69      	ldr	r2, [pc, #420]	; (800a334 <HAL_I2C_Init+0x284>)
 800a190:	fba2 2303 	umull	r2, r3, r2, r3
 800a194:	099b      	lsrs	r3, r3, #6
 800a196:	3301      	adds	r3, #1
 800a198:	687a      	ldr	r2, [r7, #4]
 800a19a:	6812      	ldr	r2, [r2, #0]
 800a19c:	430b      	orrs	r3, r1
 800a19e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	69db      	ldr	r3, [r3, #28]
 800a1a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800a1aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	685b      	ldr	r3, [r3, #4]
 800a1b2:	495c      	ldr	r1, [pc, #368]	; (800a324 <HAL_I2C_Init+0x274>)
 800a1b4:	428b      	cmp	r3, r1
 800a1b6:	d819      	bhi.n	800a1ec <HAL_I2C_Init+0x13c>
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	1e59      	subs	r1, r3, #1
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	685b      	ldr	r3, [r3, #4]
 800a1c0:	005b      	lsls	r3, r3, #1
 800a1c2:	fbb1 f3f3 	udiv	r3, r1, r3
 800a1c6:	1c59      	adds	r1, r3, #1
 800a1c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 800a1cc:	400b      	ands	r3, r1
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d00a      	beq.n	800a1e8 <HAL_I2C_Init+0x138>
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	1e59      	subs	r1, r3, #1
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	685b      	ldr	r3, [r3, #4]
 800a1da:	005b      	lsls	r3, r3, #1
 800a1dc:	fbb1 f3f3 	udiv	r3, r1, r3
 800a1e0:	3301      	adds	r3, #1
 800a1e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a1e6:	e051      	b.n	800a28c <HAL_I2C_Init+0x1dc>
 800a1e8:	2304      	movs	r3, #4
 800a1ea:	e04f      	b.n	800a28c <HAL_I2C_Init+0x1dc>
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	689b      	ldr	r3, [r3, #8]
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	d111      	bne.n	800a218 <HAL_I2C_Init+0x168>
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	1e58      	subs	r0, r3, #1
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6859      	ldr	r1, [r3, #4]
 800a1fc:	460b      	mov	r3, r1
 800a1fe:	005b      	lsls	r3, r3, #1
 800a200:	440b      	add	r3, r1
 800a202:	fbb0 f3f3 	udiv	r3, r0, r3
 800a206:	3301      	adds	r3, #1
 800a208:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	bf0c      	ite	eq
 800a210:	2301      	moveq	r3, #1
 800a212:	2300      	movne	r3, #0
 800a214:	b2db      	uxtb	r3, r3
 800a216:	e012      	b.n	800a23e <HAL_I2C_Init+0x18e>
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	1e58      	subs	r0, r3, #1
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	6859      	ldr	r1, [r3, #4]
 800a220:	460b      	mov	r3, r1
 800a222:	009b      	lsls	r3, r3, #2
 800a224:	440b      	add	r3, r1
 800a226:	0099      	lsls	r1, r3, #2
 800a228:	440b      	add	r3, r1
 800a22a:	fbb0 f3f3 	udiv	r3, r0, r3
 800a22e:	3301      	adds	r3, #1
 800a230:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a234:	2b00      	cmp	r3, #0
 800a236:	bf0c      	ite	eq
 800a238:	2301      	moveq	r3, #1
 800a23a:	2300      	movne	r3, #0
 800a23c:	b2db      	uxtb	r3, r3
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d001      	beq.n	800a246 <HAL_I2C_Init+0x196>
 800a242:	2301      	movs	r3, #1
 800a244:	e022      	b.n	800a28c <HAL_I2C_Init+0x1dc>
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	689b      	ldr	r3, [r3, #8]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d10e      	bne.n	800a26c <HAL_I2C_Init+0x1bc>
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	1e58      	subs	r0, r3, #1
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	6859      	ldr	r1, [r3, #4]
 800a256:	460b      	mov	r3, r1
 800a258:	005b      	lsls	r3, r3, #1
 800a25a:	440b      	add	r3, r1
 800a25c:	fbb0 f3f3 	udiv	r3, r0, r3
 800a260:	3301      	adds	r3, #1
 800a262:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a266:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a26a:	e00f      	b.n	800a28c <HAL_I2C_Init+0x1dc>
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	1e58      	subs	r0, r3, #1
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	6859      	ldr	r1, [r3, #4]
 800a274:	460b      	mov	r3, r1
 800a276:	009b      	lsls	r3, r3, #2
 800a278:	440b      	add	r3, r1
 800a27a:	0099      	lsls	r1, r3, #2
 800a27c:	440b      	add	r3, r1
 800a27e:	fbb0 f3f3 	udiv	r3, r0, r3
 800a282:	3301      	adds	r3, #1
 800a284:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a288:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a28c:	6879      	ldr	r1, [r7, #4]
 800a28e:	6809      	ldr	r1, [r1, #0]
 800a290:	4313      	orrs	r3, r2
 800a292:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	69da      	ldr	r2, [r3, #28]
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	6a1b      	ldr	r3, [r3, #32]
 800a2a6:	431a      	orrs	r2, r3
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	430a      	orrs	r2, r1
 800a2ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	689b      	ldr	r3, [r3, #8]
 800a2b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800a2ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800a2be:	687a      	ldr	r2, [r7, #4]
 800a2c0:	6911      	ldr	r1, [r2, #16]
 800a2c2:	687a      	ldr	r2, [r7, #4]
 800a2c4:	68d2      	ldr	r2, [r2, #12]
 800a2c6:	4311      	orrs	r1, r2
 800a2c8:	687a      	ldr	r2, [r7, #4]
 800a2ca:	6812      	ldr	r2, [r2, #0]
 800a2cc:	430b      	orrs	r3, r1
 800a2ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	68db      	ldr	r3, [r3, #12]
 800a2d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	695a      	ldr	r2, [r3, #20]
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	699b      	ldr	r3, [r3, #24]
 800a2e2:	431a      	orrs	r2, r3
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	430a      	orrs	r2, r1
 800a2ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	681a      	ldr	r2, [r3, #0]
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f042 0201 	orr.w	r2, r2, #1
 800a2fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2200      	movs	r2, #0
 800a300:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2220      	movs	r2, #32
 800a306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2200      	movs	r2, #0
 800a30e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2200      	movs	r2, #0
 800a314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a318:	2300      	movs	r3, #0
}
 800a31a:	4618      	mov	r0, r3
 800a31c:	3710      	adds	r7, #16
 800a31e:	46bd      	mov	sp, r7
 800a320:	bd80      	pop	{r7, pc}
 800a322:	bf00      	nop
 800a324:	000186a0 	.word	0x000186a0
 800a328:	001e847f 	.word	0x001e847f
 800a32c:	003d08ff 	.word	0x003d08ff
 800a330:	431bde83 	.word	0x431bde83
 800a334:	10624dd3 	.word	0x10624dd3

0800a338 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b082      	sub	sp, #8
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2b00      	cmp	r3, #0
 800a344:	d101      	bne.n	800a34a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800a346:	2301      	movs	r3, #1
 800a348:	e021      	b.n	800a38e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2224      	movs	r2, #36	; 0x24
 800a34e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	681a      	ldr	r2, [r3, #0]
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	f022 0201 	bic.w	r2, r2, #1
 800a360:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800a362:	6878      	ldr	r0, [r7, #4]
 800a364:	f7fe fef0 	bl	8009148 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	2200      	movs	r2, #0
 800a36c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2200      	movs	r2, #0
 800a372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2200      	movs	r2, #0
 800a37a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	2200      	movs	r2, #0
 800a380:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	2200      	movs	r2, #0
 800a388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a38c:	2300      	movs	r3, #0
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3708      	adds	r7, #8
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}
	...

0800a398 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b088      	sub	sp, #32
 800a39c:	af02      	add	r7, sp, #8
 800a39e:	60f8      	str	r0, [r7, #12]
 800a3a0:	607a      	str	r2, [r7, #4]
 800a3a2:	461a      	mov	r2, r3
 800a3a4:	460b      	mov	r3, r1
 800a3a6:	817b      	strh	r3, [r7, #10]
 800a3a8:	4613      	mov	r3, r2
 800a3aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a3ac:	f7ff f85e 	bl	800946c <HAL_GetTick>
 800a3b0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a3b8:	b2db      	uxtb	r3, r3
 800a3ba:	2b20      	cmp	r3, #32
 800a3bc:	f040 80e0 	bne.w	800a580 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a3c0:	697b      	ldr	r3, [r7, #20]
 800a3c2:	9300      	str	r3, [sp, #0]
 800a3c4:	2319      	movs	r3, #25
 800a3c6:	2201      	movs	r2, #1
 800a3c8:	4970      	ldr	r1, [pc, #448]	; (800a58c <HAL_I2C_Master_Transmit+0x1f4>)
 800a3ca:	68f8      	ldr	r0, [r7, #12]
 800a3cc:	f000 fe5c 	bl	800b088 <I2C_WaitOnFlagUntilTimeout>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d001      	beq.n	800a3da <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800a3d6:	2302      	movs	r3, #2
 800a3d8:	e0d3      	b.n	800a582 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a3e0:	2b01      	cmp	r3, #1
 800a3e2:	d101      	bne.n	800a3e8 <HAL_I2C_Master_Transmit+0x50>
 800a3e4:	2302      	movs	r3, #2
 800a3e6:	e0cc      	b.n	800a582 <HAL_I2C_Master_Transmit+0x1ea>
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	2201      	movs	r2, #1
 800a3ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	f003 0301 	and.w	r3, r3, #1
 800a3fa:	2b01      	cmp	r3, #1
 800a3fc:	d007      	beq.n	800a40e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	681a      	ldr	r2, [r3, #0]
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f042 0201 	orr.w	r2, r2, #1
 800a40c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	681a      	ldr	r2, [r3, #0]
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a41c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	2221      	movs	r2, #33	; 0x21
 800a422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	2210      	movs	r2, #16
 800a42a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	2200      	movs	r2, #0
 800a432:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	687a      	ldr	r2, [r7, #4]
 800a438:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	893a      	ldrh	r2, [r7, #8]
 800a43e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a444:	b29a      	uxth	r2, r3
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	4a50      	ldr	r2, [pc, #320]	; (800a590 <HAL_I2C_Master_Transmit+0x1f8>)
 800a44e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800a450:	8979      	ldrh	r1, [r7, #10]
 800a452:	697b      	ldr	r3, [r7, #20]
 800a454:	6a3a      	ldr	r2, [r7, #32]
 800a456:	68f8      	ldr	r0, [r7, #12]
 800a458:	f000 fc16 	bl	800ac88 <I2C_MasterRequestWrite>
 800a45c:	4603      	mov	r3, r0
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d001      	beq.n	800a466 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800a462:	2301      	movs	r3, #1
 800a464:	e08d      	b.n	800a582 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a466:	2300      	movs	r3, #0
 800a468:	613b      	str	r3, [r7, #16]
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	695b      	ldr	r3, [r3, #20]
 800a470:	613b      	str	r3, [r7, #16]
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	699b      	ldr	r3, [r3, #24]
 800a478:	613b      	str	r3, [r7, #16]
 800a47a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800a47c:	e066      	b.n	800a54c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a47e:	697a      	ldr	r2, [r7, #20]
 800a480:	6a39      	ldr	r1, [r7, #32]
 800a482:	68f8      	ldr	r0, [r7, #12]
 800a484:	f000 ff1a 	bl	800b2bc <I2C_WaitOnTXEFlagUntilTimeout>
 800a488:	4603      	mov	r3, r0
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d00d      	beq.n	800a4aa <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a492:	2b04      	cmp	r3, #4
 800a494:	d107      	bne.n	800a4a6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	681a      	ldr	r2, [r3, #0]
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a4a4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	e06b      	b.n	800a582 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ae:	781a      	ldrb	r2, [r3, #0]
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4ba:	1c5a      	adds	r2, r3, #1
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4c4:	b29b      	uxth	r3, r3
 800a4c6:	3b01      	subs	r3, #1
 800a4c8:	b29a      	uxth	r2, r3
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4d2:	3b01      	subs	r3, #1
 800a4d4:	b29a      	uxth	r2, r3
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	695b      	ldr	r3, [r3, #20]
 800a4e0:	f003 0304 	and.w	r3, r3, #4
 800a4e4:	2b04      	cmp	r3, #4
 800a4e6:	d11b      	bne.n	800a520 <HAL_I2C_Master_Transmit+0x188>
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4ec:	2b00      	cmp	r3, #0
 800a4ee:	d017      	beq.n	800a520 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4f4:	781a      	ldrb	r2, [r3, #0]
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a4fc:	68fb      	ldr	r3, [r7, #12]
 800a4fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a500:	1c5a      	adds	r2, r3, #1
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a50a:	b29b      	uxth	r3, r3
 800a50c:	3b01      	subs	r3, #1
 800a50e:	b29a      	uxth	r2, r3
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a518:	3b01      	subs	r3, #1
 800a51a:	b29a      	uxth	r2, r3
 800a51c:	68fb      	ldr	r3, [r7, #12]
 800a51e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a520:	697a      	ldr	r2, [r7, #20]
 800a522:	6a39      	ldr	r1, [r7, #32]
 800a524:	68f8      	ldr	r0, [r7, #12]
 800a526:	f000 ff11 	bl	800b34c <I2C_WaitOnBTFFlagUntilTimeout>
 800a52a:	4603      	mov	r3, r0
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	d00d      	beq.n	800a54c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a534:	2b04      	cmp	r3, #4
 800a536:	d107      	bne.n	800a548 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	681a      	ldr	r2, [r3, #0]
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	681b      	ldr	r3, [r3, #0]
 800a542:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a546:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a548:	2301      	movs	r3, #1
 800a54a:	e01a      	b.n	800a582 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a550:	2b00      	cmp	r3, #0
 800a552:	d194      	bne.n	800a47e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	681a      	ldr	r2, [r3, #0]
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a562:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	2220      	movs	r2, #32
 800a568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	2200      	movs	r2, #0
 800a570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a574:	68fb      	ldr	r3, [r7, #12]
 800a576:	2200      	movs	r2, #0
 800a578:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a57c:	2300      	movs	r3, #0
 800a57e:	e000      	b.n	800a582 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a580:	2302      	movs	r3, #2
  }
}
 800a582:	4618      	mov	r0, r3
 800a584:	3718      	adds	r7, #24
 800a586:	46bd      	mov	sp, r7
 800a588:	bd80      	pop	{r7, pc}
 800a58a:	bf00      	nop
 800a58c:	00100002 	.word	0x00100002
 800a590:	ffff0000 	.word	0xffff0000

0800a594 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b088      	sub	sp, #32
 800a598:	af02      	add	r7, sp, #8
 800a59a:	60f8      	str	r0, [r7, #12]
 800a59c:	4608      	mov	r0, r1
 800a59e:	4611      	mov	r1, r2
 800a5a0:	461a      	mov	r2, r3
 800a5a2:	4603      	mov	r3, r0
 800a5a4:	817b      	strh	r3, [r7, #10]
 800a5a6:	460b      	mov	r3, r1
 800a5a8:	813b      	strh	r3, [r7, #8]
 800a5aa:	4613      	mov	r3, r2
 800a5ac:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a5ae:	f7fe ff5d 	bl	800946c <HAL_GetTick>
 800a5b2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5ba:	b2db      	uxtb	r3, r3
 800a5bc:	2b20      	cmp	r3, #32
 800a5be:	f040 80d9 	bne.w	800a774 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	9300      	str	r3, [sp, #0]
 800a5c6:	2319      	movs	r3, #25
 800a5c8:	2201      	movs	r2, #1
 800a5ca:	496d      	ldr	r1, [pc, #436]	; (800a780 <HAL_I2C_Mem_Write+0x1ec>)
 800a5cc:	68f8      	ldr	r0, [r7, #12]
 800a5ce:	f000 fd5b 	bl	800b088 <I2C_WaitOnFlagUntilTimeout>
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d001      	beq.n	800a5dc <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800a5d8:	2302      	movs	r3, #2
 800a5da:	e0cc      	b.n	800a776 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5e2:	2b01      	cmp	r3, #1
 800a5e4:	d101      	bne.n	800a5ea <HAL_I2C_Mem_Write+0x56>
 800a5e6:	2302      	movs	r3, #2
 800a5e8:	e0c5      	b.n	800a776 <HAL_I2C_Mem_Write+0x1e2>
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	2201      	movs	r2, #1
 800a5ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	f003 0301 	and.w	r3, r3, #1
 800a5fc:	2b01      	cmp	r3, #1
 800a5fe:	d007      	beq.n	800a610 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	681a      	ldr	r2, [r3, #0]
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	f042 0201 	orr.w	r2, r2, #1
 800a60e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	681a      	ldr	r2, [r3, #0]
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a61e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	2221      	movs	r2, #33	; 0x21
 800a624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	2240      	movs	r2, #64	; 0x40
 800a62c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	2200      	movs	r2, #0
 800a634:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	6a3a      	ldr	r2, [r7, #32]
 800a63a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a640:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a642:	68fb      	ldr	r3, [r7, #12]
 800a644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a646:	b29a      	uxth	r2, r3
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	4a4d      	ldr	r2, [pc, #308]	; (800a784 <HAL_I2C_Mem_Write+0x1f0>)
 800a650:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a652:	88f8      	ldrh	r0, [r7, #6]
 800a654:	893a      	ldrh	r2, [r7, #8]
 800a656:	8979      	ldrh	r1, [r7, #10]
 800a658:	697b      	ldr	r3, [r7, #20]
 800a65a:	9301      	str	r3, [sp, #4]
 800a65c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a65e:	9300      	str	r3, [sp, #0]
 800a660:	4603      	mov	r3, r0
 800a662:	68f8      	ldr	r0, [r7, #12]
 800a664:	f000 fb92 	bl	800ad8c <I2C_RequestMemoryWrite>
 800a668:	4603      	mov	r3, r0
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d052      	beq.n	800a714 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800a66e:	2301      	movs	r3, #1
 800a670:	e081      	b.n	800a776 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a672:	697a      	ldr	r2, [r7, #20]
 800a674:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a676:	68f8      	ldr	r0, [r7, #12]
 800a678:	f000 fe20 	bl	800b2bc <I2C_WaitOnTXEFlagUntilTimeout>
 800a67c:	4603      	mov	r3, r0
 800a67e:	2b00      	cmp	r3, #0
 800a680:	d00d      	beq.n	800a69e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a686:	2b04      	cmp	r3, #4
 800a688:	d107      	bne.n	800a69a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	681a      	ldr	r2, [r3, #0]
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a698:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a69a:	2301      	movs	r3, #1
 800a69c:	e06b      	b.n	800a776 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6a2:	781a      	ldrb	r2, [r3, #0]
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ae:	1c5a      	adds	r2, r3, #1
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6b8:	3b01      	subs	r3, #1
 800a6ba:	b29a      	uxth	r2, r3
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6c4:	b29b      	uxth	r3, r3
 800a6c6:	3b01      	subs	r3, #1
 800a6c8:	b29a      	uxth	r2, r3
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	695b      	ldr	r3, [r3, #20]
 800a6d4:	f003 0304 	and.w	r3, r3, #4
 800a6d8:	2b04      	cmp	r3, #4
 800a6da:	d11b      	bne.n	800a714 <HAL_I2C_Mem_Write+0x180>
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d017      	beq.n	800a714 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6e8:	781a      	ldrb	r2, [r3, #0]
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6f4:	1c5a      	adds	r2, r3, #1
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6fe:	3b01      	subs	r3, #1
 800a700:	b29a      	uxth	r2, r3
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a70a:	b29b      	uxth	r3, r3
 800a70c:	3b01      	subs	r3, #1
 800a70e:	b29a      	uxth	r2, r3
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d1aa      	bne.n	800a672 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a71c:	697a      	ldr	r2, [r7, #20]
 800a71e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a720:	68f8      	ldr	r0, [r7, #12]
 800a722:	f000 fe13 	bl	800b34c <I2C_WaitOnBTFFlagUntilTimeout>
 800a726:	4603      	mov	r3, r0
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d00d      	beq.n	800a748 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a730:	2b04      	cmp	r3, #4
 800a732:	d107      	bne.n	800a744 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	681a      	ldr	r2, [r3, #0]
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a742:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a744:	2301      	movs	r3, #1
 800a746:	e016      	b.n	800a776 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	681a      	ldr	r2, [r3, #0]
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a756:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	2220      	movs	r2, #32
 800a75c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	2200      	movs	r2, #0
 800a764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	2200      	movs	r2, #0
 800a76c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a770:	2300      	movs	r3, #0
 800a772:	e000      	b.n	800a776 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800a774:	2302      	movs	r3, #2
  }
}
 800a776:	4618      	mov	r0, r3
 800a778:	3718      	adds	r7, #24
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}
 800a77e:	bf00      	nop
 800a780:	00100002 	.word	0x00100002
 800a784:	ffff0000 	.word	0xffff0000

0800a788 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b08c      	sub	sp, #48	; 0x30
 800a78c:	af02      	add	r7, sp, #8
 800a78e:	60f8      	str	r0, [r7, #12]
 800a790:	4608      	mov	r0, r1
 800a792:	4611      	mov	r1, r2
 800a794:	461a      	mov	r2, r3
 800a796:	4603      	mov	r3, r0
 800a798:	817b      	strh	r3, [r7, #10]
 800a79a:	460b      	mov	r3, r1
 800a79c:	813b      	strh	r3, [r7, #8]
 800a79e:	4613      	mov	r3, r2
 800a7a0:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a7a6:	f7fe fe61 	bl	800946c <HAL_GetTick>
 800a7aa:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a7b2:	b2db      	uxtb	r3, r3
 800a7b4:	2b20      	cmp	r3, #32
 800a7b6:	f040 8244 	bne.w	800ac42 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7bc:	9300      	str	r3, [sp, #0]
 800a7be:	2319      	movs	r3, #25
 800a7c0:	2201      	movs	r2, #1
 800a7c2:	4982      	ldr	r1, [pc, #520]	; (800a9cc <HAL_I2C_Mem_Read+0x244>)
 800a7c4:	68f8      	ldr	r0, [r7, #12]
 800a7c6:	f000 fc5f 	bl	800b088 <I2C_WaitOnFlagUntilTimeout>
 800a7ca:	4603      	mov	r3, r0
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d001      	beq.n	800a7d4 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800a7d0:	2302      	movs	r3, #2
 800a7d2:	e237      	b.n	800ac44 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a7da:	2b01      	cmp	r3, #1
 800a7dc:	d101      	bne.n	800a7e2 <HAL_I2C_Mem_Read+0x5a>
 800a7de:	2302      	movs	r3, #2
 800a7e0:	e230      	b.n	800ac44 <HAL_I2C_Mem_Read+0x4bc>
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	2201      	movs	r2, #1
 800a7e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	f003 0301 	and.w	r3, r3, #1
 800a7f4:	2b01      	cmp	r3, #1
 800a7f6:	d007      	beq.n	800a808 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	681b      	ldr	r3, [r3, #0]
 800a7fc:	681a      	ldr	r2, [r3, #0]
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	f042 0201 	orr.w	r2, r2, #1
 800a806:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	681a      	ldr	r2, [r3, #0]
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a816:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a818:	68fb      	ldr	r3, [r7, #12]
 800a81a:	2222      	movs	r2, #34	; 0x22
 800a81c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	2240      	movs	r2, #64	; 0x40
 800a824:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a828:	68fb      	ldr	r3, [r7, #12]
 800a82a:	2200      	movs	r2, #0
 800a82c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a832:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800a838:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a83e:	b29a      	uxth	r2, r3
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	4a62      	ldr	r2, [pc, #392]	; (800a9d0 <HAL_I2C_Mem_Read+0x248>)
 800a848:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a84a:	88f8      	ldrh	r0, [r7, #6]
 800a84c:	893a      	ldrh	r2, [r7, #8]
 800a84e:	8979      	ldrh	r1, [r7, #10]
 800a850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a852:	9301      	str	r3, [sp, #4]
 800a854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a856:	9300      	str	r3, [sp, #0]
 800a858:	4603      	mov	r3, r0
 800a85a:	68f8      	ldr	r0, [r7, #12]
 800a85c:	f000 fb2c 	bl	800aeb8 <I2C_RequestMemoryRead>
 800a860:	4603      	mov	r3, r0
 800a862:	2b00      	cmp	r3, #0
 800a864:	d001      	beq.n	800a86a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800a866:	2301      	movs	r3, #1
 800a868:	e1ec      	b.n	800ac44 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d113      	bne.n	800a89a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a872:	2300      	movs	r3, #0
 800a874:	61fb      	str	r3, [r7, #28]
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	695b      	ldr	r3, [r3, #20]
 800a87c:	61fb      	str	r3, [r7, #28]
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	699b      	ldr	r3, [r3, #24]
 800a884:	61fb      	str	r3, [r7, #28]
 800a886:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	681a      	ldr	r2, [r3, #0]
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a896:	601a      	str	r2, [r3, #0]
 800a898:	e1c0      	b.n	800ac1c <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a89e:	2b01      	cmp	r3, #1
 800a8a0:	d11e      	bne.n	800a8e0 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	681a      	ldr	r2, [r3, #0]
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a8b0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a8b2:	b672      	cpsid	i
}
 800a8b4:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	61bb      	str	r3, [r7, #24]
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	695b      	ldr	r3, [r3, #20]
 800a8c0:	61bb      	str	r3, [r7, #24]
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	699b      	ldr	r3, [r3, #24]
 800a8c8:	61bb      	str	r3, [r7, #24]
 800a8ca:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	681a      	ldr	r2, [r3, #0]
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	681b      	ldr	r3, [r3, #0]
 800a8d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a8da:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a8dc:	b662      	cpsie	i
}
 800a8de:	e035      	b.n	800a94c <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a8e4:	2b02      	cmp	r3, #2
 800a8e6:	d11e      	bne.n	800a926 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	681a      	ldr	r2, [r3, #0]
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a8f6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a8f8:	b672      	cpsid	i
}
 800a8fa:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a8fc:	2300      	movs	r3, #0
 800a8fe:	617b      	str	r3, [r7, #20]
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	695b      	ldr	r3, [r3, #20]
 800a906:	617b      	str	r3, [r7, #20]
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	699b      	ldr	r3, [r3, #24]
 800a90e:	617b      	str	r3, [r7, #20]
 800a910:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	681a      	ldr	r2, [r3, #0]
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	681b      	ldr	r3, [r3, #0]
 800a91c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a920:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a922:	b662      	cpsie	i
}
 800a924:	e012      	b.n	800a94c <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	681a      	ldr	r2, [r3, #0]
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a934:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a936:	2300      	movs	r3, #0
 800a938:	613b      	str	r3, [r7, #16]
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	695b      	ldr	r3, [r3, #20]
 800a940:	613b      	str	r3, [r7, #16]
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	681b      	ldr	r3, [r3, #0]
 800a946:	699b      	ldr	r3, [r3, #24]
 800a948:	613b      	str	r3, [r7, #16]
 800a94a:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800a94c:	e166      	b.n	800ac1c <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a952:	2b03      	cmp	r3, #3
 800a954:	f200 811f 	bhi.w	800ab96 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a958:	68fb      	ldr	r3, [r7, #12]
 800a95a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a95c:	2b01      	cmp	r3, #1
 800a95e:	d123      	bne.n	800a9a8 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a960:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a962:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a964:	68f8      	ldr	r0, [r7, #12]
 800a966:	f000 fd39 	bl	800b3dc <I2C_WaitOnRXNEFlagUntilTimeout>
 800a96a:	4603      	mov	r3, r0
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d001      	beq.n	800a974 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800a970:	2301      	movs	r3, #1
 800a972:	e167      	b.n	800ac44 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	691a      	ldr	r2, [r3, #16]
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a97e:	b2d2      	uxtb	r2, r2
 800a980:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a986:	1c5a      	adds	r2, r3, #1
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a990:	3b01      	subs	r3, #1
 800a992:	b29a      	uxth	r2, r3
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a99c:	b29b      	uxth	r3, r3
 800a99e:	3b01      	subs	r3, #1
 800a9a0:	b29a      	uxth	r2, r3
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a9a6:	e139      	b.n	800ac1c <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a9ac:	2b02      	cmp	r3, #2
 800a9ae:	d152      	bne.n	800aa56 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9b2:	9300      	str	r3, [sp, #0]
 800a9b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	4906      	ldr	r1, [pc, #24]	; (800a9d4 <HAL_I2C_Mem_Read+0x24c>)
 800a9ba:	68f8      	ldr	r0, [r7, #12]
 800a9bc:	f000 fb64 	bl	800b088 <I2C_WaitOnFlagUntilTimeout>
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d008      	beq.n	800a9d8 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	e13c      	b.n	800ac44 <HAL_I2C_Mem_Read+0x4bc>
 800a9ca:	bf00      	nop
 800a9cc:	00100002 	.word	0x00100002
 800a9d0:	ffff0000 	.word	0xffff0000
 800a9d4:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800a9d8:	b672      	cpsid	i
}
 800a9da:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	681b      	ldr	r3, [r3, #0]
 800a9e0:	681a      	ldr	r2, [r3, #0]
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a9ea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	691a      	ldr	r2, [r3, #16]
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9f6:	b2d2      	uxtb	r2, r2
 800a9f8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
 800a9fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a9fe:	1c5a      	adds	r2, r3, #1
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa08:	3b01      	subs	r3, #1
 800aa0a:	b29a      	uxth	r2, r3
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa14:	b29b      	uxth	r3, r3
 800aa16:	3b01      	subs	r3, #1
 800aa18:	b29a      	uxth	r2, r3
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800aa1e:	b662      	cpsie	i
}
 800aa20:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	691a      	ldr	r2, [r3, #16]
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa2c:	b2d2      	uxtb	r2, r2
 800aa2e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa34:	1c5a      	adds	r2, r3, #1
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aa3e:	3b01      	subs	r3, #1
 800aa40:	b29a      	uxth	r2, r3
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800aa46:	68fb      	ldr	r3, [r7, #12]
 800aa48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aa4a:	b29b      	uxth	r3, r3
 800aa4c:	3b01      	subs	r3, #1
 800aa4e:	b29a      	uxth	r2, r3
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	855a      	strh	r2, [r3, #42]	; 0x2a
 800aa54:	e0e2      	b.n	800ac1c <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800aa56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa58:	9300      	str	r3, [sp, #0]
 800aa5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	497b      	ldr	r1, [pc, #492]	; (800ac4c <HAL_I2C_Mem_Read+0x4c4>)
 800aa60:	68f8      	ldr	r0, [r7, #12]
 800aa62:	f000 fb11 	bl	800b088 <I2C_WaitOnFlagUntilTimeout>
 800aa66:	4603      	mov	r3, r0
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d001      	beq.n	800aa70 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800aa6c:	2301      	movs	r3, #1
 800aa6e:	e0e9      	b.n	800ac44 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	681a      	ldr	r2, [r3, #0]
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aa7e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800aa80:	b672      	cpsid	i
}
 800aa82:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	691a      	ldr	r2, [r3, #16]
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa8e:	b2d2      	uxtb	r2, r2
 800aa90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa96:	1c5a      	adds	r2, r3, #1
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aaa0:	3b01      	subs	r3, #1
 800aaa2:	b29a      	uxth	r2, r3
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aaac:	b29b      	uxth	r3, r3
 800aaae:	3b01      	subs	r3, #1
 800aab0:	b29a      	uxth	r2, r3
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800aab6:	4b66      	ldr	r3, [pc, #408]	; (800ac50 <HAL_I2C_Mem_Read+0x4c8>)
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	08db      	lsrs	r3, r3, #3
 800aabc:	4a65      	ldr	r2, [pc, #404]	; (800ac54 <HAL_I2C_Mem_Read+0x4cc>)
 800aabe:	fba2 2303 	umull	r2, r3, r2, r3
 800aac2:	0a1a      	lsrs	r2, r3, #8
 800aac4:	4613      	mov	r3, r2
 800aac6:	009b      	lsls	r3, r3, #2
 800aac8:	4413      	add	r3, r2
 800aaca:	00da      	lsls	r2, r3, #3
 800aacc:	1ad3      	subs	r3, r2, r3
 800aace:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800aad0:	6a3b      	ldr	r3, [r7, #32]
 800aad2:	3b01      	subs	r3, #1
 800aad4:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800aad6:	6a3b      	ldr	r3, [r7, #32]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	d118      	bne.n	800ab0e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	2200      	movs	r2, #0
 800aae0:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	2220      	movs	r2, #32
 800aae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	2200      	movs	r2, #0
 800aaee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aaf6:	f043 0220 	orr.w	r2, r3, #32
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800aafe:	b662      	cpsie	i
}
 800ab00:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	2200      	movs	r2, #0
 800ab06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	e09a      	b.n	800ac44 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	695b      	ldr	r3, [r3, #20]
 800ab14:	f003 0304 	and.w	r3, r3, #4
 800ab18:	2b04      	cmp	r3, #4
 800ab1a:	d1d9      	bne.n	800aad0 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	681a      	ldr	r2, [r3, #0]
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ab2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	691a      	ldr	r2, [r3, #16]
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab36:	b2d2      	uxtb	r2, r2
 800ab38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab3e:	1c5a      	adds	r2, r3, #1
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab48:	3b01      	subs	r3, #1
 800ab4a:	b29a      	uxth	r2, r3
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab54:	b29b      	uxth	r3, r3
 800ab56:	3b01      	subs	r3, #1
 800ab58:	b29a      	uxth	r2, r3
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800ab5e:	b662      	cpsie	i
}
 800ab60:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	691a      	ldr	r2, [r3, #16]
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab6c:	b2d2      	uxtb	r2, r2
 800ab6e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab74:	1c5a      	adds	r2, r3, #1
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ab7e:	3b01      	subs	r3, #1
 800ab80:	b29a      	uxth	r2, r3
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ab8a:	b29b      	uxth	r3, r3
 800ab8c:	3b01      	subs	r3, #1
 800ab8e:	b29a      	uxth	r2, r3
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ab94:	e042      	b.n	800ac1c <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ab96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab98:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800ab9a:	68f8      	ldr	r0, [r7, #12]
 800ab9c:	f000 fc1e 	bl	800b3dc <I2C_WaitOnRXNEFlagUntilTimeout>
 800aba0:	4603      	mov	r3, r0
 800aba2:	2b00      	cmp	r3, #0
 800aba4:	d001      	beq.n	800abaa <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800aba6:	2301      	movs	r3, #1
 800aba8:	e04c      	b.n	800ac44 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	691a      	ldr	r2, [r3, #16]
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abb4:	b2d2      	uxtb	r2, r2
 800abb6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abbc:	1c5a      	adds	r2, r3, #1
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800abc6:	3b01      	subs	r3, #1
 800abc8:	b29a      	uxth	r2, r3
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abd2:	b29b      	uxth	r3, r3
 800abd4:	3b01      	subs	r3, #1
 800abd6:	b29a      	uxth	r2, r3
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	695b      	ldr	r3, [r3, #20]
 800abe2:	f003 0304 	and.w	r3, r3, #4
 800abe6:	2b04      	cmp	r3, #4
 800abe8:	d118      	bne.n	800ac1c <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	691a      	ldr	r2, [r3, #16]
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abf4:	b2d2      	uxtb	r2, r2
 800abf6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800abfc:	1c5a      	adds	r2, r3, #1
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac06:	3b01      	subs	r3, #1
 800ac08:	b29a      	uxth	r2, r3
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ac12:	b29b      	uxth	r3, r3
 800ac14:	3b01      	subs	r3, #1
 800ac16:	b29a      	uxth	r2, r3
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	f47f ae94 	bne.w	800a94e <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	2220      	movs	r2, #32
 800ac2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	2200      	movs	r2, #0
 800ac32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800ac3e:	2300      	movs	r3, #0
 800ac40:	e000      	b.n	800ac44 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800ac42:	2302      	movs	r3, #2
  }
}
 800ac44:	4618      	mov	r0, r3
 800ac46:	3728      	adds	r7, #40	; 0x28
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}
 800ac4c:	00010004 	.word	0x00010004
 800ac50:	200009c4 	.word	0x200009c4
 800ac54:	14f8b589 	.word	0x14f8b589

0800ac58 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800ac58:	b480      	push	{r7}
 800ac5a:	b083      	sub	sp, #12
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ac66:	b2db      	uxtb	r3, r3
}
 800ac68:	4618      	mov	r0, r3
 800ac6a:	370c      	adds	r7, #12
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bc80      	pop	{r7}
 800ac70:	4770      	bx	lr

0800ac72 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800ac72:	b480      	push	{r7}
 800ac74:	b083      	sub	sp, #12
 800ac76:	af00      	add	r7, sp, #0
 800ac78:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	370c      	adds	r7, #12
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bc80      	pop	{r7}
 800ac86:	4770      	bx	lr

0800ac88 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800ac88:	b580      	push	{r7, lr}
 800ac8a:	b088      	sub	sp, #32
 800ac8c:	af02      	add	r7, sp, #8
 800ac8e:	60f8      	str	r0, [r7, #12]
 800ac90:	607a      	str	r2, [r7, #4]
 800ac92:	603b      	str	r3, [r7, #0]
 800ac94:	460b      	mov	r3, r1
 800ac96:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac9c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800ac9e:	697b      	ldr	r3, [r7, #20]
 800aca0:	2b08      	cmp	r3, #8
 800aca2:	d006      	beq.n	800acb2 <I2C_MasterRequestWrite+0x2a>
 800aca4:	697b      	ldr	r3, [r7, #20]
 800aca6:	2b01      	cmp	r3, #1
 800aca8:	d003      	beq.n	800acb2 <I2C_MasterRequestWrite+0x2a>
 800acaa:	697b      	ldr	r3, [r7, #20]
 800acac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800acb0:	d108      	bne.n	800acc4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	681a      	ldr	r2, [r3, #0]
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800acc0:	601a      	str	r2, [r3, #0]
 800acc2:	e00b      	b.n	800acdc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acc8:	2b12      	cmp	r3, #18
 800acca:	d107      	bne.n	800acdc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800accc:	68fb      	ldr	r3, [r7, #12]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	681a      	ldr	r2, [r3, #0]
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800acda:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800acdc:	683b      	ldr	r3, [r7, #0]
 800acde:	9300      	str	r3, [sp, #0]
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	2200      	movs	r2, #0
 800ace4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800ace8:	68f8      	ldr	r0, [r7, #12]
 800acea:	f000 f9cd 	bl	800b088 <I2C_WaitOnFlagUntilTimeout>
 800acee:	4603      	mov	r3, r0
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d00d      	beq.n	800ad10 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	681b      	ldr	r3, [r3, #0]
 800acfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad02:	d103      	bne.n	800ad0c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ad0a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ad0c:	2303      	movs	r3, #3
 800ad0e:	e035      	b.n	800ad7c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	691b      	ldr	r3, [r3, #16]
 800ad14:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ad18:	d108      	bne.n	800ad2c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800ad1a:	897b      	ldrh	r3, [r7, #10]
 800ad1c:	b2db      	uxtb	r3, r3
 800ad1e:	461a      	mov	r2, r3
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800ad28:	611a      	str	r2, [r3, #16]
 800ad2a:	e01b      	b.n	800ad64 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800ad2c:	897b      	ldrh	r3, [r7, #10]
 800ad2e:	11db      	asrs	r3, r3, #7
 800ad30:	b2db      	uxtb	r3, r3
 800ad32:	f003 0306 	and.w	r3, r3, #6
 800ad36:	b2db      	uxtb	r3, r3
 800ad38:	f063 030f 	orn	r3, r3, #15
 800ad3c:	b2da      	uxtb	r2, r3
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800ad44:	683b      	ldr	r3, [r7, #0]
 800ad46:	687a      	ldr	r2, [r7, #4]
 800ad48:	490e      	ldr	r1, [pc, #56]	; (800ad84 <I2C_MasterRequestWrite+0xfc>)
 800ad4a:	68f8      	ldr	r0, [r7, #12]
 800ad4c:	f000 fa16 	bl	800b17c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ad50:	4603      	mov	r3, r0
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d001      	beq.n	800ad5a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800ad56:	2301      	movs	r3, #1
 800ad58:	e010      	b.n	800ad7c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800ad5a:	897b      	ldrh	r3, [r7, #10]
 800ad5c:	b2da      	uxtb	r2, r3
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800ad64:	683b      	ldr	r3, [r7, #0]
 800ad66:	687a      	ldr	r2, [r7, #4]
 800ad68:	4907      	ldr	r1, [pc, #28]	; (800ad88 <I2C_MasterRequestWrite+0x100>)
 800ad6a:	68f8      	ldr	r0, [r7, #12]
 800ad6c:	f000 fa06 	bl	800b17c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ad70:	4603      	mov	r3, r0
 800ad72:	2b00      	cmp	r3, #0
 800ad74:	d001      	beq.n	800ad7a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800ad76:	2301      	movs	r3, #1
 800ad78:	e000      	b.n	800ad7c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800ad7a:	2300      	movs	r3, #0
}
 800ad7c:	4618      	mov	r0, r3
 800ad7e:	3718      	adds	r7, #24
 800ad80:	46bd      	mov	sp, r7
 800ad82:	bd80      	pop	{r7, pc}
 800ad84:	00010008 	.word	0x00010008
 800ad88:	00010002 	.word	0x00010002

0800ad8c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800ad8c:	b580      	push	{r7, lr}
 800ad8e:	b088      	sub	sp, #32
 800ad90:	af02      	add	r7, sp, #8
 800ad92:	60f8      	str	r0, [r7, #12]
 800ad94:	4608      	mov	r0, r1
 800ad96:	4611      	mov	r1, r2
 800ad98:	461a      	mov	r2, r3
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	817b      	strh	r3, [r7, #10]
 800ad9e:	460b      	mov	r3, r1
 800ada0:	813b      	strh	r3, [r7, #8]
 800ada2:	4613      	mov	r3, r2
 800ada4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	681b      	ldr	r3, [r3, #0]
 800adaa:	681a      	ldr	r2, [r3, #0]
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800adb4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800adb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adb8:	9300      	str	r3, [sp, #0]
 800adba:	6a3b      	ldr	r3, [r7, #32]
 800adbc:	2200      	movs	r2, #0
 800adbe:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800adc2:	68f8      	ldr	r0, [r7, #12]
 800adc4:	f000 f960 	bl	800b088 <I2C_WaitOnFlagUntilTimeout>
 800adc8:	4603      	mov	r3, r0
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d00d      	beq.n	800adea <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800add8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800addc:	d103      	bne.n	800ade6 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800adde:	68fb      	ldr	r3, [r7, #12]
 800ade0:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ade4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800ade6:	2303      	movs	r3, #3
 800ade8:	e05f      	b.n	800aeaa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800adea:	897b      	ldrh	r3, [r7, #10]
 800adec:	b2db      	uxtb	r3, r3
 800adee:	461a      	mov	r2, r3
 800adf0:	68fb      	ldr	r3, [r7, #12]
 800adf2:	681b      	ldr	r3, [r3, #0]
 800adf4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800adf8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800adfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adfc:	6a3a      	ldr	r2, [r7, #32]
 800adfe:	492d      	ldr	r1, [pc, #180]	; (800aeb4 <I2C_RequestMemoryWrite+0x128>)
 800ae00:	68f8      	ldr	r0, [r7, #12]
 800ae02:	f000 f9bb 	bl	800b17c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ae06:	4603      	mov	r3, r0
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d001      	beq.n	800ae10 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	e04c      	b.n	800aeaa <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ae10:	2300      	movs	r3, #0
 800ae12:	617b      	str	r3, [r7, #20]
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	695b      	ldr	r3, [r3, #20]
 800ae1a:	617b      	str	r3, [r7, #20]
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	699b      	ldr	r3, [r3, #24]
 800ae22:	617b      	str	r3, [r7, #20]
 800ae24:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ae26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae28:	6a39      	ldr	r1, [r7, #32]
 800ae2a:	68f8      	ldr	r0, [r7, #12]
 800ae2c:	f000 fa46 	bl	800b2bc <I2C_WaitOnTXEFlagUntilTimeout>
 800ae30:	4603      	mov	r3, r0
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d00d      	beq.n	800ae52 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae3a:	2b04      	cmp	r3, #4
 800ae3c:	d107      	bne.n	800ae4e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	681a      	ldr	r2, [r3, #0]
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ae4c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800ae4e:	2301      	movs	r3, #1
 800ae50:	e02b      	b.n	800aeaa <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800ae52:	88fb      	ldrh	r3, [r7, #6]
 800ae54:	2b01      	cmp	r3, #1
 800ae56:	d105      	bne.n	800ae64 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ae58:	893b      	ldrh	r3, [r7, #8]
 800ae5a:	b2da      	uxtb	r2, r3
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	611a      	str	r2, [r3, #16]
 800ae62:	e021      	b.n	800aea8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800ae64:	893b      	ldrh	r3, [r7, #8]
 800ae66:	0a1b      	lsrs	r3, r3, #8
 800ae68:	b29b      	uxth	r3, r3
 800ae6a:	b2da      	uxtb	r2, r3
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800ae72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ae74:	6a39      	ldr	r1, [r7, #32]
 800ae76:	68f8      	ldr	r0, [r7, #12]
 800ae78:	f000 fa20 	bl	800b2bc <I2C_WaitOnTXEFlagUntilTimeout>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d00d      	beq.n	800ae9e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae86:	2b04      	cmp	r3, #4
 800ae88:	d107      	bne.n	800ae9a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ae8a:	68fb      	ldr	r3, [r7, #12]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	681a      	ldr	r2, [r3, #0]
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	681b      	ldr	r3, [r3, #0]
 800ae94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ae98:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800ae9a:	2301      	movs	r3, #1
 800ae9c:	e005      	b.n	800aeaa <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800ae9e:	893b      	ldrh	r3, [r7, #8]
 800aea0:	b2da      	uxtb	r2, r3
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800aea8:	2300      	movs	r3, #0
}
 800aeaa:	4618      	mov	r0, r3
 800aeac:	3718      	adds	r7, #24
 800aeae:	46bd      	mov	sp, r7
 800aeb0:	bd80      	pop	{r7, pc}
 800aeb2:	bf00      	nop
 800aeb4:	00010002 	.word	0x00010002

0800aeb8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b088      	sub	sp, #32
 800aebc:	af02      	add	r7, sp, #8
 800aebe:	60f8      	str	r0, [r7, #12]
 800aec0:	4608      	mov	r0, r1
 800aec2:	4611      	mov	r1, r2
 800aec4:	461a      	mov	r2, r3
 800aec6:	4603      	mov	r3, r0
 800aec8:	817b      	strh	r3, [r7, #10]
 800aeca:	460b      	mov	r3, r1
 800aecc:	813b      	strh	r3, [r7, #8]
 800aece:	4613      	mov	r3, r2
 800aed0:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	681a      	ldr	r2, [r3, #0]
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800aee0:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	681a      	ldr	r2, [r3, #0]
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aef0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800aef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aef4:	9300      	str	r3, [sp, #0]
 800aef6:	6a3b      	ldr	r3, [r7, #32]
 800aef8:	2200      	movs	r2, #0
 800aefa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800aefe:	68f8      	ldr	r0, [r7, #12]
 800af00:	f000 f8c2 	bl	800b088 <I2C_WaitOnFlagUntilTimeout>
 800af04:	4603      	mov	r3, r0
 800af06:	2b00      	cmp	r3, #0
 800af08:	d00d      	beq.n	800af26 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	681b      	ldr	r3, [r3, #0]
 800af10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af18:	d103      	bne.n	800af22 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800af20:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800af22:	2303      	movs	r3, #3
 800af24:	e0aa      	b.n	800b07c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800af26:	897b      	ldrh	r3, [r7, #10]
 800af28:	b2db      	uxtb	r3, r3
 800af2a:	461a      	mov	r2, r3
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	681b      	ldr	r3, [r3, #0]
 800af30:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800af34:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800af36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af38:	6a3a      	ldr	r2, [r7, #32]
 800af3a:	4952      	ldr	r1, [pc, #328]	; (800b084 <I2C_RequestMemoryRead+0x1cc>)
 800af3c:	68f8      	ldr	r0, [r7, #12]
 800af3e:	f000 f91d 	bl	800b17c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800af42:	4603      	mov	r3, r0
 800af44:	2b00      	cmp	r3, #0
 800af46:	d001      	beq.n	800af4c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800af48:	2301      	movs	r3, #1
 800af4a:	e097      	b.n	800b07c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800af4c:	2300      	movs	r3, #0
 800af4e:	617b      	str	r3, [r7, #20]
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	695b      	ldr	r3, [r3, #20]
 800af56:	617b      	str	r3, [r7, #20]
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	681b      	ldr	r3, [r3, #0]
 800af5c:	699b      	ldr	r3, [r3, #24]
 800af5e:	617b      	str	r3, [r7, #20]
 800af60:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800af62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af64:	6a39      	ldr	r1, [r7, #32]
 800af66:	68f8      	ldr	r0, [r7, #12]
 800af68:	f000 f9a8 	bl	800b2bc <I2C_WaitOnTXEFlagUntilTimeout>
 800af6c:	4603      	mov	r3, r0
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d00d      	beq.n	800af8e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800af72:	68fb      	ldr	r3, [r7, #12]
 800af74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af76:	2b04      	cmp	r3, #4
 800af78:	d107      	bne.n	800af8a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	681a      	ldr	r2, [r3, #0]
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800af88:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800af8a:	2301      	movs	r3, #1
 800af8c:	e076      	b.n	800b07c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800af8e:	88fb      	ldrh	r3, [r7, #6]
 800af90:	2b01      	cmp	r3, #1
 800af92:	d105      	bne.n	800afa0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800af94:	893b      	ldrh	r3, [r7, #8]
 800af96:	b2da      	uxtb	r2, r3
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	611a      	str	r2, [r3, #16]
 800af9e:	e021      	b.n	800afe4 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800afa0:	893b      	ldrh	r3, [r7, #8]
 800afa2:	0a1b      	lsrs	r3, r3, #8
 800afa4:	b29b      	uxth	r3, r3
 800afa6:	b2da      	uxtb	r2, r3
 800afa8:	68fb      	ldr	r3, [r7, #12]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800afae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afb0:	6a39      	ldr	r1, [r7, #32]
 800afb2:	68f8      	ldr	r0, [r7, #12]
 800afb4:	f000 f982 	bl	800b2bc <I2C_WaitOnTXEFlagUntilTimeout>
 800afb8:	4603      	mov	r3, r0
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d00d      	beq.n	800afda <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afc2:	2b04      	cmp	r3, #4
 800afc4:	d107      	bne.n	800afd6 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	681a      	ldr	r2, [r3, #0]
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800afd4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800afd6:	2301      	movs	r3, #1
 800afd8:	e050      	b.n	800b07c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800afda:	893b      	ldrh	r3, [r7, #8]
 800afdc:	b2da      	uxtb	r2, r3
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800afe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800afe6:	6a39      	ldr	r1, [r7, #32]
 800afe8:	68f8      	ldr	r0, [r7, #12]
 800afea:	f000 f967 	bl	800b2bc <I2C_WaitOnTXEFlagUntilTimeout>
 800afee:	4603      	mov	r3, r0
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d00d      	beq.n	800b010 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aff8:	2b04      	cmp	r3, #4
 800affa:	d107      	bne.n	800b00c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	681a      	ldr	r2, [r3, #0]
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b00a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b00c:	2301      	movs	r3, #1
 800b00e:	e035      	b.n	800b07c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	681a      	ldr	r2, [r3, #0]
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	681b      	ldr	r3, [r3, #0]
 800b01a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b01e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b022:	9300      	str	r3, [sp, #0]
 800b024:	6a3b      	ldr	r3, [r7, #32]
 800b026:	2200      	movs	r2, #0
 800b028:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b02c:	68f8      	ldr	r0, [r7, #12]
 800b02e:	f000 f82b 	bl	800b088 <I2C_WaitOnFlagUntilTimeout>
 800b032:	4603      	mov	r3, r0
 800b034:	2b00      	cmp	r3, #0
 800b036:	d00d      	beq.n	800b054 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b042:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b046:	d103      	bne.n	800b050 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b04e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b050:	2303      	movs	r3, #3
 800b052:	e013      	b.n	800b07c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b054:	897b      	ldrh	r3, [r7, #10]
 800b056:	b2db      	uxtb	r3, r3
 800b058:	f043 0301 	orr.w	r3, r3, #1
 800b05c:	b2da      	uxtb	r2, r3
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b066:	6a3a      	ldr	r2, [r7, #32]
 800b068:	4906      	ldr	r1, [pc, #24]	; (800b084 <I2C_RequestMemoryRead+0x1cc>)
 800b06a:	68f8      	ldr	r0, [r7, #12]
 800b06c:	f000 f886 	bl	800b17c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b070:	4603      	mov	r3, r0
 800b072:	2b00      	cmp	r3, #0
 800b074:	d001      	beq.n	800b07a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800b076:	2301      	movs	r3, #1
 800b078:	e000      	b.n	800b07c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800b07a:	2300      	movs	r3, #0
}
 800b07c:	4618      	mov	r0, r3
 800b07e:	3718      	adds	r7, #24
 800b080:	46bd      	mov	sp, r7
 800b082:	bd80      	pop	{r7, pc}
 800b084:	00010002 	.word	0x00010002

0800b088 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b084      	sub	sp, #16
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	60f8      	str	r0, [r7, #12]
 800b090:	60b9      	str	r1, [r7, #8]
 800b092:	603b      	str	r3, [r7, #0]
 800b094:	4613      	mov	r3, r2
 800b096:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b098:	e048      	b.n	800b12c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0a0:	d044      	beq.n	800b12c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b0a2:	f7fe f9e3 	bl	800946c <HAL_GetTick>
 800b0a6:	4602      	mov	r2, r0
 800b0a8:	69bb      	ldr	r3, [r7, #24]
 800b0aa:	1ad3      	subs	r3, r2, r3
 800b0ac:	683a      	ldr	r2, [r7, #0]
 800b0ae:	429a      	cmp	r2, r3
 800b0b0:	d302      	bcc.n	800b0b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b0b2:	683b      	ldr	r3, [r7, #0]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d139      	bne.n	800b12c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	0c1b      	lsrs	r3, r3, #16
 800b0bc:	b2db      	uxtb	r3, r3
 800b0be:	2b01      	cmp	r3, #1
 800b0c0:	d10d      	bne.n	800b0de <I2C_WaitOnFlagUntilTimeout+0x56>
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	695b      	ldr	r3, [r3, #20]
 800b0c8:	43da      	mvns	r2, r3
 800b0ca:	68bb      	ldr	r3, [r7, #8]
 800b0cc:	4013      	ands	r3, r2
 800b0ce:	b29b      	uxth	r3, r3
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	bf0c      	ite	eq
 800b0d4:	2301      	moveq	r3, #1
 800b0d6:	2300      	movne	r3, #0
 800b0d8:	b2db      	uxtb	r3, r3
 800b0da:	461a      	mov	r2, r3
 800b0dc:	e00c      	b.n	800b0f8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	699b      	ldr	r3, [r3, #24]
 800b0e4:	43da      	mvns	r2, r3
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	4013      	ands	r3, r2
 800b0ea:	b29b      	uxth	r3, r3
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	bf0c      	ite	eq
 800b0f0:	2301      	moveq	r3, #1
 800b0f2:	2300      	movne	r3, #0
 800b0f4:	b2db      	uxtb	r3, r3
 800b0f6:	461a      	mov	r2, r3
 800b0f8:	79fb      	ldrb	r3, [r7, #7]
 800b0fa:	429a      	cmp	r2, r3
 800b0fc:	d116      	bne.n	800b12c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	2200      	movs	r2, #0
 800b102:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	2220      	movs	r2, #32
 800b108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	2200      	movs	r2, #0
 800b110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b118:	f043 0220 	orr.w	r2, r3, #32
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	2200      	movs	r2, #0
 800b124:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800b128:	2301      	movs	r3, #1
 800b12a:	e023      	b.n	800b174 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b12c:	68bb      	ldr	r3, [r7, #8]
 800b12e:	0c1b      	lsrs	r3, r3, #16
 800b130:	b2db      	uxtb	r3, r3
 800b132:	2b01      	cmp	r3, #1
 800b134:	d10d      	bne.n	800b152 <I2C_WaitOnFlagUntilTimeout+0xca>
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	695b      	ldr	r3, [r3, #20]
 800b13c:	43da      	mvns	r2, r3
 800b13e:	68bb      	ldr	r3, [r7, #8]
 800b140:	4013      	ands	r3, r2
 800b142:	b29b      	uxth	r3, r3
 800b144:	2b00      	cmp	r3, #0
 800b146:	bf0c      	ite	eq
 800b148:	2301      	moveq	r3, #1
 800b14a:	2300      	movne	r3, #0
 800b14c:	b2db      	uxtb	r3, r3
 800b14e:	461a      	mov	r2, r3
 800b150:	e00c      	b.n	800b16c <I2C_WaitOnFlagUntilTimeout+0xe4>
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	699b      	ldr	r3, [r3, #24]
 800b158:	43da      	mvns	r2, r3
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	4013      	ands	r3, r2
 800b15e:	b29b      	uxth	r3, r3
 800b160:	2b00      	cmp	r3, #0
 800b162:	bf0c      	ite	eq
 800b164:	2301      	moveq	r3, #1
 800b166:	2300      	movne	r3, #0
 800b168:	b2db      	uxtb	r3, r3
 800b16a:	461a      	mov	r2, r3
 800b16c:	79fb      	ldrb	r3, [r7, #7]
 800b16e:	429a      	cmp	r2, r3
 800b170:	d093      	beq.n	800b09a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b172:	2300      	movs	r3, #0
}
 800b174:	4618      	mov	r0, r3
 800b176:	3710      	adds	r7, #16
 800b178:	46bd      	mov	sp, r7
 800b17a:	bd80      	pop	{r7, pc}

0800b17c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b084      	sub	sp, #16
 800b180:	af00      	add	r7, sp, #0
 800b182:	60f8      	str	r0, [r7, #12]
 800b184:	60b9      	str	r1, [r7, #8]
 800b186:	607a      	str	r2, [r7, #4]
 800b188:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b18a:	e071      	b.n	800b270 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b18c:	68fb      	ldr	r3, [r7, #12]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	695b      	ldr	r3, [r3, #20]
 800b192:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b196:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b19a:	d123      	bne.n	800b1e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	681a      	ldr	r2, [r3, #0]
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b1aa:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	681b      	ldr	r3, [r3, #0]
 800b1b0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b1b4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	2200      	movs	r2, #0
 800b1ba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	2220      	movs	r2, #32
 800b1c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1d0:	f043 0204 	orr.w	r2, r3, #4
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	2200      	movs	r2, #0
 800b1dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b1e0:	2301      	movs	r3, #1
 800b1e2:	e067      	b.n	800b2b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1ea:	d041      	beq.n	800b270 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b1ec:	f7fe f93e 	bl	800946c <HAL_GetTick>
 800b1f0:	4602      	mov	r2, r0
 800b1f2:	683b      	ldr	r3, [r7, #0]
 800b1f4:	1ad3      	subs	r3, r2, r3
 800b1f6:	687a      	ldr	r2, [r7, #4]
 800b1f8:	429a      	cmp	r2, r3
 800b1fa:	d302      	bcc.n	800b202 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	2b00      	cmp	r3, #0
 800b200:	d136      	bne.n	800b270 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800b202:	68bb      	ldr	r3, [r7, #8]
 800b204:	0c1b      	lsrs	r3, r3, #16
 800b206:	b2db      	uxtb	r3, r3
 800b208:	2b01      	cmp	r3, #1
 800b20a:	d10c      	bne.n	800b226 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	695b      	ldr	r3, [r3, #20]
 800b212:	43da      	mvns	r2, r3
 800b214:	68bb      	ldr	r3, [r7, #8]
 800b216:	4013      	ands	r3, r2
 800b218:	b29b      	uxth	r3, r3
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	bf14      	ite	ne
 800b21e:	2301      	movne	r3, #1
 800b220:	2300      	moveq	r3, #0
 800b222:	b2db      	uxtb	r3, r3
 800b224:	e00b      	b.n	800b23e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	699b      	ldr	r3, [r3, #24]
 800b22c:	43da      	mvns	r2, r3
 800b22e:	68bb      	ldr	r3, [r7, #8]
 800b230:	4013      	ands	r3, r2
 800b232:	b29b      	uxth	r3, r3
 800b234:	2b00      	cmp	r3, #0
 800b236:	bf14      	ite	ne
 800b238:	2301      	movne	r3, #1
 800b23a:	2300      	moveq	r3, #0
 800b23c:	b2db      	uxtb	r3, r3
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d016      	beq.n	800b270 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	2200      	movs	r2, #0
 800b246:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	2220      	movs	r2, #32
 800b24c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	2200      	movs	r2, #0
 800b254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b25c:	f043 0220 	orr.w	r2, r3, #32
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	2200      	movs	r2, #0
 800b268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800b26c:	2301      	movs	r3, #1
 800b26e:	e021      	b.n	800b2b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800b270:	68bb      	ldr	r3, [r7, #8]
 800b272:	0c1b      	lsrs	r3, r3, #16
 800b274:	b2db      	uxtb	r3, r3
 800b276:	2b01      	cmp	r3, #1
 800b278:	d10c      	bne.n	800b294 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	695b      	ldr	r3, [r3, #20]
 800b280:	43da      	mvns	r2, r3
 800b282:	68bb      	ldr	r3, [r7, #8]
 800b284:	4013      	ands	r3, r2
 800b286:	b29b      	uxth	r3, r3
 800b288:	2b00      	cmp	r3, #0
 800b28a:	bf14      	ite	ne
 800b28c:	2301      	movne	r3, #1
 800b28e:	2300      	moveq	r3, #0
 800b290:	b2db      	uxtb	r3, r3
 800b292:	e00b      	b.n	800b2ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	699b      	ldr	r3, [r3, #24]
 800b29a:	43da      	mvns	r2, r3
 800b29c:	68bb      	ldr	r3, [r7, #8]
 800b29e:	4013      	ands	r3, r2
 800b2a0:	b29b      	uxth	r3, r3
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	bf14      	ite	ne
 800b2a6:	2301      	movne	r3, #1
 800b2a8:	2300      	moveq	r3, #0
 800b2aa:	b2db      	uxtb	r3, r3
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	f47f af6d 	bne.w	800b18c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800b2b2:	2300      	movs	r3, #0
}
 800b2b4:	4618      	mov	r0, r3
 800b2b6:	3710      	adds	r7, #16
 800b2b8:	46bd      	mov	sp, r7
 800b2ba:	bd80      	pop	{r7, pc}

0800b2bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b2bc:	b580      	push	{r7, lr}
 800b2be:	b084      	sub	sp, #16
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	60f8      	str	r0, [r7, #12]
 800b2c4:	60b9      	str	r1, [r7, #8]
 800b2c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b2c8:	e034      	b.n	800b334 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b2ca:	68f8      	ldr	r0, [r7, #12]
 800b2cc:	f000 f8e3 	bl	800b496 <I2C_IsAcknowledgeFailed>
 800b2d0:	4603      	mov	r3, r0
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d001      	beq.n	800b2da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b2d6:	2301      	movs	r3, #1
 800b2d8:	e034      	b.n	800b344 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b2da:	68bb      	ldr	r3, [r7, #8]
 800b2dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2e0:	d028      	beq.n	800b334 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b2e2:	f7fe f8c3 	bl	800946c <HAL_GetTick>
 800b2e6:	4602      	mov	r2, r0
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	1ad3      	subs	r3, r2, r3
 800b2ec:	68ba      	ldr	r2, [r7, #8]
 800b2ee:	429a      	cmp	r2, r3
 800b2f0:	d302      	bcc.n	800b2f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800b2f2:	68bb      	ldr	r3, [r7, #8]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d11d      	bne.n	800b334 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	695b      	ldr	r3, [r3, #20]
 800b2fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b302:	2b80      	cmp	r3, #128	; 0x80
 800b304:	d016      	beq.n	800b334 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	2200      	movs	r2, #0
 800b30a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	2220      	movs	r2, #32
 800b310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	2200      	movs	r2, #0
 800b318:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b320:	f043 0220 	orr.w	r2, r3, #32
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	2200      	movs	r2, #0
 800b32c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800b330:	2301      	movs	r3, #1
 800b332:	e007      	b.n	800b344 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	695b      	ldr	r3, [r3, #20]
 800b33a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b33e:	2b80      	cmp	r3, #128	; 0x80
 800b340:	d1c3      	bne.n	800b2ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b342:	2300      	movs	r3, #0
}
 800b344:	4618      	mov	r0, r3
 800b346:	3710      	adds	r7, #16
 800b348:	46bd      	mov	sp, r7
 800b34a:	bd80      	pop	{r7, pc}

0800b34c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b34c:	b580      	push	{r7, lr}
 800b34e:	b084      	sub	sp, #16
 800b350:	af00      	add	r7, sp, #0
 800b352:	60f8      	str	r0, [r7, #12]
 800b354:	60b9      	str	r1, [r7, #8]
 800b356:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b358:	e034      	b.n	800b3c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800b35a:	68f8      	ldr	r0, [r7, #12]
 800b35c:	f000 f89b 	bl	800b496 <I2C_IsAcknowledgeFailed>
 800b360:	4603      	mov	r3, r0
 800b362:	2b00      	cmp	r3, #0
 800b364:	d001      	beq.n	800b36a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800b366:	2301      	movs	r3, #1
 800b368:	e034      	b.n	800b3d4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b36a:	68bb      	ldr	r3, [r7, #8]
 800b36c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b370:	d028      	beq.n	800b3c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b372:	f7fe f87b 	bl	800946c <HAL_GetTick>
 800b376:	4602      	mov	r2, r0
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	1ad3      	subs	r3, r2, r3
 800b37c:	68ba      	ldr	r2, [r7, #8]
 800b37e:	429a      	cmp	r2, r3
 800b380:	d302      	bcc.n	800b388 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800b382:	68bb      	ldr	r3, [r7, #8]
 800b384:	2b00      	cmp	r3, #0
 800b386:	d11d      	bne.n	800b3c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	695b      	ldr	r3, [r3, #20]
 800b38e:	f003 0304 	and.w	r3, r3, #4
 800b392:	2b04      	cmp	r3, #4
 800b394:	d016      	beq.n	800b3c4 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	2200      	movs	r2, #0
 800b39a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800b39c:	68fb      	ldr	r3, [r7, #12]
 800b39e:	2220      	movs	r2, #32
 800b3a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	2200      	movs	r2, #0
 800b3a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3b0:	f043 0220 	orr.w	r2, r3, #32
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800b3c0:	2301      	movs	r3, #1
 800b3c2:	e007      	b.n	800b3d4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	695b      	ldr	r3, [r3, #20]
 800b3ca:	f003 0304 	and.w	r3, r3, #4
 800b3ce:	2b04      	cmp	r3, #4
 800b3d0:	d1c3      	bne.n	800b35a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b3d2:	2300      	movs	r3, #0
}
 800b3d4:	4618      	mov	r0, r3
 800b3d6:	3710      	adds	r7, #16
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	bd80      	pop	{r7, pc}

0800b3dc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b084      	sub	sp, #16
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	60f8      	str	r0, [r7, #12]
 800b3e4:	60b9      	str	r1, [r7, #8]
 800b3e6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b3e8:	e049      	b.n	800b47e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	695b      	ldr	r3, [r3, #20]
 800b3f0:	f003 0310 	and.w	r3, r3, #16
 800b3f4:	2b10      	cmp	r3, #16
 800b3f6:	d119      	bne.n	800b42c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	f06f 0210 	mvn.w	r2, #16
 800b400:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	2200      	movs	r2, #0
 800b406:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	2220      	movs	r2, #32
 800b40c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	2200      	movs	r2, #0
 800b414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	2200      	movs	r2, #0
 800b424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800b428:	2301      	movs	r3, #1
 800b42a:	e030      	b.n	800b48e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b42c:	f7fe f81e 	bl	800946c <HAL_GetTick>
 800b430:	4602      	mov	r2, r0
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	1ad3      	subs	r3, r2, r3
 800b436:	68ba      	ldr	r2, [r7, #8]
 800b438:	429a      	cmp	r2, r3
 800b43a:	d302      	bcc.n	800b442 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d11d      	bne.n	800b47e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	695b      	ldr	r3, [r3, #20]
 800b448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b44c:	2b40      	cmp	r3, #64	; 0x40
 800b44e:	d016      	beq.n	800b47e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	2200      	movs	r2, #0
 800b454:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	2220      	movs	r2, #32
 800b45a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	2200      	movs	r2, #0
 800b462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b46a:	f043 0220 	orr.w	r2, r3, #32
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b472:	68fb      	ldr	r3, [r7, #12]
 800b474:	2200      	movs	r2, #0
 800b476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800b47a:	2301      	movs	r3, #1
 800b47c:	e007      	b.n	800b48e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b47e:	68fb      	ldr	r3, [r7, #12]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	695b      	ldr	r3, [r3, #20]
 800b484:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b488:	2b40      	cmp	r3, #64	; 0x40
 800b48a:	d1ae      	bne.n	800b3ea <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b48c:	2300      	movs	r3, #0
}
 800b48e:	4618      	mov	r0, r3
 800b490:	3710      	adds	r7, #16
 800b492:	46bd      	mov	sp, r7
 800b494:	bd80      	pop	{r7, pc}

0800b496 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800b496:	b480      	push	{r7}
 800b498:	b083      	sub	sp, #12
 800b49a:	af00      	add	r7, sp, #0
 800b49c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	695b      	ldr	r3, [r3, #20]
 800b4a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b4a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b4ac:	d11b      	bne.n	800b4e6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b4b6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2220      	movs	r2, #32
 800b4c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4d2:	f043 0204 	orr.w	r2, r3, #4
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	2200      	movs	r2, #0
 800b4de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800b4e2:	2301      	movs	r3, #1
 800b4e4:	e000      	b.n	800b4e8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800b4e6:	2300      	movs	r3, #0
}
 800b4e8:	4618      	mov	r0, r3
 800b4ea:	370c      	adds	r7, #12
 800b4ec:	46bd      	mov	sp, r7
 800b4ee:	bc80      	pop	{r7}
 800b4f0:	4770      	bx	lr
	...

0800b4f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b086      	sub	sp, #24
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	2b00      	cmp	r3, #0
 800b500:	d101      	bne.n	800b506 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800b502:	2301      	movs	r3, #1
 800b504:	e272      	b.n	800b9ec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	f003 0301 	and.w	r3, r3, #1
 800b50e:	2b00      	cmp	r3, #0
 800b510:	f000 8087 	beq.w	800b622 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b514:	4b92      	ldr	r3, [pc, #584]	; (800b760 <HAL_RCC_OscConfig+0x26c>)
 800b516:	685b      	ldr	r3, [r3, #4]
 800b518:	f003 030c 	and.w	r3, r3, #12
 800b51c:	2b04      	cmp	r3, #4
 800b51e:	d00c      	beq.n	800b53a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800b520:	4b8f      	ldr	r3, [pc, #572]	; (800b760 <HAL_RCC_OscConfig+0x26c>)
 800b522:	685b      	ldr	r3, [r3, #4]
 800b524:	f003 030c 	and.w	r3, r3, #12
 800b528:	2b08      	cmp	r3, #8
 800b52a:	d112      	bne.n	800b552 <HAL_RCC_OscConfig+0x5e>
 800b52c:	4b8c      	ldr	r3, [pc, #560]	; (800b760 <HAL_RCC_OscConfig+0x26c>)
 800b52e:	685b      	ldr	r3, [r3, #4]
 800b530:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b534:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b538:	d10b      	bne.n	800b552 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b53a:	4b89      	ldr	r3, [pc, #548]	; (800b760 <HAL_RCC_OscConfig+0x26c>)
 800b53c:	681b      	ldr	r3, [r3, #0]
 800b53e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b542:	2b00      	cmp	r3, #0
 800b544:	d06c      	beq.n	800b620 <HAL_RCC_OscConfig+0x12c>
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	685b      	ldr	r3, [r3, #4]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d168      	bne.n	800b620 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800b54e:	2301      	movs	r3, #1
 800b550:	e24c      	b.n	800b9ec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	685b      	ldr	r3, [r3, #4]
 800b556:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b55a:	d106      	bne.n	800b56a <HAL_RCC_OscConfig+0x76>
 800b55c:	4b80      	ldr	r3, [pc, #512]	; (800b760 <HAL_RCC_OscConfig+0x26c>)
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	4a7f      	ldr	r2, [pc, #508]	; (800b760 <HAL_RCC_OscConfig+0x26c>)
 800b562:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b566:	6013      	str	r3, [r2, #0]
 800b568:	e02e      	b.n	800b5c8 <HAL_RCC_OscConfig+0xd4>
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	685b      	ldr	r3, [r3, #4]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d10c      	bne.n	800b58c <HAL_RCC_OscConfig+0x98>
 800b572:	4b7b      	ldr	r3, [pc, #492]	; (800b760 <HAL_RCC_OscConfig+0x26c>)
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	4a7a      	ldr	r2, [pc, #488]	; (800b760 <HAL_RCC_OscConfig+0x26c>)
 800b578:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b57c:	6013      	str	r3, [r2, #0]
 800b57e:	4b78      	ldr	r3, [pc, #480]	; (800b760 <HAL_RCC_OscConfig+0x26c>)
 800b580:	681b      	ldr	r3, [r3, #0]
 800b582:	4a77      	ldr	r2, [pc, #476]	; (800b760 <HAL_RCC_OscConfig+0x26c>)
 800b584:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b588:	6013      	str	r3, [r2, #0]
 800b58a:	e01d      	b.n	800b5c8 <HAL_RCC_OscConfig+0xd4>
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	685b      	ldr	r3, [r3, #4]
 800b590:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b594:	d10c      	bne.n	800b5b0 <HAL_RCC_OscConfig+0xbc>
 800b596:	4b72      	ldr	r3, [pc, #456]	; (800b760 <HAL_RCC_OscConfig+0x26c>)
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	4a71      	ldr	r2, [pc, #452]	; (800b760 <HAL_RCC_OscConfig+0x26c>)
 800b59c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b5a0:	6013      	str	r3, [r2, #0]
 800b5a2:	4b6f      	ldr	r3, [pc, #444]	; (800b760 <HAL_RCC_OscConfig+0x26c>)
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	4a6e      	ldr	r2, [pc, #440]	; (800b760 <HAL_RCC_OscConfig+0x26c>)
 800b5a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b5ac:	6013      	str	r3, [r2, #0]
 800b5ae:	e00b      	b.n	800b5c8 <HAL_RCC_OscConfig+0xd4>
 800b5b0:	4b6b      	ldr	r3, [pc, #428]	; (800b760 <HAL_RCC_OscConfig+0x26c>)
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	4a6a      	ldr	r2, [pc, #424]	; (800b760 <HAL_RCC_OscConfig+0x26c>)
 800b5b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b5ba:	6013      	str	r3, [r2, #0]
 800b5bc:	4b68      	ldr	r3, [pc, #416]	; (800b760 <HAL_RCC_OscConfig+0x26c>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	4a67      	ldr	r2, [pc, #412]	; (800b760 <HAL_RCC_OscConfig+0x26c>)
 800b5c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b5c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	685b      	ldr	r3, [r3, #4]
 800b5cc:	2b00      	cmp	r3, #0
 800b5ce:	d013      	beq.n	800b5f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b5d0:	f7fd ff4c 	bl	800946c <HAL_GetTick>
 800b5d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b5d6:	e008      	b.n	800b5ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b5d8:	f7fd ff48 	bl	800946c <HAL_GetTick>
 800b5dc:	4602      	mov	r2, r0
 800b5de:	693b      	ldr	r3, [r7, #16]
 800b5e0:	1ad3      	subs	r3, r2, r3
 800b5e2:	2b64      	cmp	r3, #100	; 0x64
 800b5e4:	d901      	bls.n	800b5ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800b5e6:	2303      	movs	r3, #3
 800b5e8:	e200      	b.n	800b9ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b5ea:	4b5d      	ldr	r3, [pc, #372]	; (800b760 <HAL_RCC_OscConfig+0x26c>)
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d0f0      	beq.n	800b5d8 <HAL_RCC_OscConfig+0xe4>
 800b5f6:	e014      	b.n	800b622 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b5f8:	f7fd ff38 	bl	800946c <HAL_GetTick>
 800b5fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b5fe:	e008      	b.n	800b612 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b600:	f7fd ff34 	bl	800946c <HAL_GetTick>
 800b604:	4602      	mov	r2, r0
 800b606:	693b      	ldr	r3, [r7, #16]
 800b608:	1ad3      	subs	r3, r2, r3
 800b60a:	2b64      	cmp	r3, #100	; 0x64
 800b60c:	d901      	bls.n	800b612 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800b60e:	2303      	movs	r3, #3
 800b610:	e1ec      	b.n	800b9ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b612:	4b53      	ldr	r3, [pc, #332]	; (800b760 <HAL_RCC_OscConfig+0x26c>)
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d1f0      	bne.n	800b600 <HAL_RCC_OscConfig+0x10c>
 800b61e:	e000      	b.n	800b622 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b620:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	f003 0302 	and.w	r3, r3, #2
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d063      	beq.n	800b6f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b62e:	4b4c      	ldr	r3, [pc, #304]	; (800b760 <HAL_RCC_OscConfig+0x26c>)
 800b630:	685b      	ldr	r3, [r3, #4]
 800b632:	f003 030c 	and.w	r3, r3, #12
 800b636:	2b00      	cmp	r3, #0
 800b638:	d00b      	beq.n	800b652 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800b63a:	4b49      	ldr	r3, [pc, #292]	; (800b760 <HAL_RCC_OscConfig+0x26c>)
 800b63c:	685b      	ldr	r3, [r3, #4]
 800b63e:	f003 030c 	and.w	r3, r3, #12
 800b642:	2b08      	cmp	r3, #8
 800b644:	d11c      	bne.n	800b680 <HAL_RCC_OscConfig+0x18c>
 800b646:	4b46      	ldr	r3, [pc, #280]	; (800b760 <HAL_RCC_OscConfig+0x26c>)
 800b648:	685b      	ldr	r3, [r3, #4]
 800b64a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d116      	bne.n	800b680 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b652:	4b43      	ldr	r3, [pc, #268]	; (800b760 <HAL_RCC_OscConfig+0x26c>)
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	f003 0302 	and.w	r3, r3, #2
 800b65a:	2b00      	cmp	r3, #0
 800b65c:	d005      	beq.n	800b66a <HAL_RCC_OscConfig+0x176>
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	691b      	ldr	r3, [r3, #16]
 800b662:	2b01      	cmp	r3, #1
 800b664:	d001      	beq.n	800b66a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800b666:	2301      	movs	r3, #1
 800b668:	e1c0      	b.n	800b9ec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b66a:	4b3d      	ldr	r3, [pc, #244]	; (800b760 <HAL_RCC_OscConfig+0x26c>)
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	695b      	ldr	r3, [r3, #20]
 800b676:	00db      	lsls	r3, r3, #3
 800b678:	4939      	ldr	r1, [pc, #228]	; (800b760 <HAL_RCC_OscConfig+0x26c>)
 800b67a:	4313      	orrs	r3, r2
 800b67c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b67e:	e03a      	b.n	800b6f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	691b      	ldr	r3, [r3, #16]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d020      	beq.n	800b6ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b688:	4b36      	ldr	r3, [pc, #216]	; (800b764 <HAL_RCC_OscConfig+0x270>)
 800b68a:	2201      	movs	r2, #1
 800b68c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b68e:	f7fd feed 	bl	800946c <HAL_GetTick>
 800b692:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b694:	e008      	b.n	800b6a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b696:	f7fd fee9 	bl	800946c <HAL_GetTick>
 800b69a:	4602      	mov	r2, r0
 800b69c:	693b      	ldr	r3, [r7, #16]
 800b69e:	1ad3      	subs	r3, r2, r3
 800b6a0:	2b02      	cmp	r3, #2
 800b6a2:	d901      	bls.n	800b6a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800b6a4:	2303      	movs	r3, #3
 800b6a6:	e1a1      	b.n	800b9ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b6a8:	4b2d      	ldr	r3, [pc, #180]	; (800b760 <HAL_RCC_OscConfig+0x26c>)
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	f003 0302 	and.w	r3, r3, #2
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d0f0      	beq.n	800b696 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b6b4:	4b2a      	ldr	r3, [pc, #168]	; (800b760 <HAL_RCC_OscConfig+0x26c>)
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	695b      	ldr	r3, [r3, #20]
 800b6c0:	00db      	lsls	r3, r3, #3
 800b6c2:	4927      	ldr	r1, [pc, #156]	; (800b760 <HAL_RCC_OscConfig+0x26c>)
 800b6c4:	4313      	orrs	r3, r2
 800b6c6:	600b      	str	r3, [r1, #0]
 800b6c8:	e015      	b.n	800b6f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b6ca:	4b26      	ldr	r3, [pc, #152]	; (800b764 <HAL_RCC_OscConfig+0x270>)
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b6d0:	f7fd fecc 	bl	800946c <HAL_GetTick>
 800b6d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b6d6:	e008      	b.n	800b6ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b6d8:	f7fd fec8 	bl	800946c <HAL_GetTick>
 800b6dc:	4602      	mov	r2, r0
 800b6de:	693b      	ldr	r3, [r7, #16]
 800b6e0:	1ad3      	subs	r3, r2, r3
 800b6e2:	2b02      	cmp	r3, #2
 800b6e4:	d901      	bls.n	800b6ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800b6e6:	2303      	movs	r3, #3
 800b6e8:	e180      	b.n	800b9ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b6ea:	4b1d      	ldr	r3, [pc, #116]	; (800b760 <HAL_RCC_OscConfig+0x26c>)
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	f003 0302 	and.w	r3, r3, #2
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d1f0      	bne.n	800b6d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	f003 0308 	and.w	r3, r3, #8
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d03a      	beq.n	800b778 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	699b      	ldr	r3, [r3, #24]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d019      	beq.n	800b73e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b70a:	4b17      	ldr	r3, [pc, #92]	; (800b768 <HAL_RCC_OscConfig+0x274>)
 800b70c:	2201      	movs	r2, #1
 800b70e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b710:	f7fd feac 	bl	800946c <HAL_GetTick>
 800b714:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b716:	e008      	b.n	800b72a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b718:	f7fd fea8 	bl	800946c <HAL_GetTick>
 800b71c:	4602      	mov	r2, r0
 800b71e:	693b      	ldr	r3, [r7, #16]
 800b720:	1ad3      	subs	r3, r2, r3
 800b722:	2b02      	cmp	r3, #2
 800b724:	d901      	bls.n	800b72a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800b726:	2303      	movs	r3, #3
 800b728:	e160      	b.n	800b9ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b72a:	4b0d      	ldr	r3, [pc, #52]	; (800b760 <HAL_RCC_OscConfig+0x26c>)
 800b72c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b72e:	f003 0302 	and.w	r3, r3, #2
 800b732:	2b00      	cmp	r3, #0
 800b734:	d0f0      	beq.n	800b718 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800b736:	2001      	movs	r0, #1
 800b738:	f000 face 	bl	800bcd8 <RCC_Delay>
 800b73c:	e01c      	b.n	800b778 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b73e:	4b0a      	ldr	r3, [pc, #40]	; (800b768 <HAL_RCC_OscConfig+0x274>)
 800b740:	2200      	movs	r2, #0
 800b742:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b744:	f7fd fe92 	bl	800946c <HAL_GetTick>
 800b748:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b74a:	e00f      	b.n	800b76c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b74c:	f7fd fe8e 	bl	800946c <HAL_GetTick>
 800b750:	4602      	mov	r2, r0
 800b752:	693b      	ldr	r3, [r7, #16]
 800b754:	1ad3      	subs	r3, r2, r3
 800b756:	2b02      	cmp	r3, #2
 800b758:	d908      	bls.n	800b76c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800b75a:	2303      	movs	r3, #3
 800b75c:	e146      	b.n	800b9ec <HAL_RCC_OscConfig+0x4f8>
 800b75e:	bf00      	nop
 800b760:	40021000 	.word	0x40021000
 800b764:	42420000 	.word	0x42420000
 800b768:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b76c:	4b92      	ldr	r3, [pc, #584]	; (800b9b8 <HAL_RCC_OscConfig+0x4c4>)
 800b76e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b770:	f003 0302 	and.w	r3, r3, #2
 800b774:	2b00      	cmp	r3, #0
 800b776:	d1e9      	bne.n	800b74c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	f003 0304 	and.w	r3, r3, #4
 800b780:	2b00      	cmp	r3, #0
 800b782:	f000 80a6 	beq.w	800b8d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b786:	2300      	movs	r3, #0
 800b788:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b78a:	4b8b      	ldr	r3, [pc, #556]	; (800b9b8 <HAL_RCC_OscConfig+0x4c4>)
 800b78c:	69db      	ldr	r3, [r3, #28]
 800b78e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b792:	2b00      	cmp	r3, #0
 800b794:	d10d      	bne.n	800b7b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b796:	4b88      	ldr	r3, [pc, #544]	; (800b9b8 <HAL_RCC_OscConfig+0x4c4>)
 800b798:	69db      	ldr	r3, [r3, #28]
 800b79a:	4a87      	ldr	r2, [pc, #540]	; (800b9b8 <HAL_RCC_OscConfig+0x4c4>)
 800b79c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b7a0:	61d3      	str	r3, [r2, #28]
 800b7a2:	4b85      	ldr	r3, [pc, #532]	; (800b9b8 <HAL_RCC_OscConfig+0x4c4>)
 800b7a4:	69db      	ldr	r3, [r3, #28]
 800b7a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b7aa:	60bb      	str	r3, [r7, #8]
 800b7ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b7ae:	2301      	movs	r3, #1
 800b7b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b7b2:	4b82      	ldr	r3, [pc, #520]	; (800b9bc <HAL_RCC_OscConfig+0x4c8>)
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d118      	bne.n	800b7f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b7be:	4b7f      	ldr	r3, [pc, #508]	; (800b9bc <HAL_RCC_OscConfig+0x4c8>)
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	4a7e      	ldr	r2, [pc, #504]	; (800b9bc <HAL_RCC_OscConfig+0x4c8>)
 800b7c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b7c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b7ca:	f7fd fe4f 	bl	800946c <HAL_GetTick>
 800b7ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b7d0:	e008      	b.n	800b7e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b7d2:	f7fd fe4b 	bl	800946c <HAL_GetTick>
 800b7d6:	4602      	mov	r2, r0
 800b7d8:	693b      	ldr	r3, [r7, #16]
 800b7da:	1ad3      	subs	r3, r2, r3
 800b7dc:	2b64      	cmp	r3, #100	; 0x64
 800b7de:	d901      	bls.n	800b7e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800b7e0:	2303      	movs	r3, #3
 800b7e2:	e103      	b.n	800b9ec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b7e4:	4b75      	ldr	r3, [pc, #468]	; (800b9bc <HAL_RCC_OscConfig+0x4c8>)
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7ec:	2b00      	cmp	r3, #0
 800b7ee:	d0f0      	beq.n	800b7d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	68db      	ldr	r3, [r3, #12]
 800b7f4:	2b01      	cmp	r3, #1
 800b7f6:	d106      	bne.n	800b806 <HAL_RCC_OscConfig+0x312>
 800b7f8:	4b6f      	ldr	r3, [pc, #444]	; (800b9b8 <HAL_RCC_OscConfig+0x4c4>)
 800b7fa:	6a1b      	ldr	r3, [r3, #32]
 800b7fc:	4a6e      	ldr	r2, [pc, #440]	; (800b9b8 <HAL_RCC_OscConfig+0x4c4>)
 800b7fe:	f043 0301 	orr.w	r3, r3, #1
 800b802:	6213      	str	r3, [r2, #32]
 800b804:	e02d      	b.n	800b862 <HAL_RCC_OscConfig+0x36e>
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	68db      	ldr	r3, [r3, #12]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d10c      	bne.n	800b828 <HAL_RCC_OscConfig+0x334>
 800b80e:	4b6a      	ldr	r3, [pc, #424]	; (800b9b8 <HAL_RCC_OscConfig+0x4c4>)
 800b810:	6a1b      	ldr	r3, [r3, #32]
 800b812:	4a69      	ldr	r2, [pc, #420]	; (800b9b8 <HAL_RCC_OscConfig+0x4c4>)
 800b814:	f023 0301 	bic.w	r3, r3, #1
 800b818:	6213      	str	r3, [r2, #32]
 800b81a:	4b67      	ldr	r3, [pc, #412]	; (800b9b8 <HAL_RCC_OscConfig+0x4c4>)
 800b81c:	6a1b      	ldr	r3, [r3, #32]
 800b81e:	4a66      	ldr	r2, [pc, #408]	; (800b9b8 <HAL_RCC_OscConfig+0x4c4>)
 800b820:	f023 0304 	bic.w	r3, r3, #4
 800b824:	6213      	str	r3, [r2, #32]
 800b826:	e01c      	b.n	800b862 <HAL_RCC_OscConfig+0x36e>
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	68db      	ldr	r3, [r3, #12]
 800b82c:	2b05      	cmp	r3, #5
 800b82e:	d10c      	bne.n	800b84a <HAL_RCC_OscConfig+0x356>
 800b830:	4b61      	ldr	r3, [pc, #388]	; (800b9b8 <HAL_RCC_OscConfig+0x4c4>)
 800b832:	6a1b      	ldr	r3, [r3, #32]
 800b834:	4a60      	ldr	r2, [pc, #384]	; (800b9b8 <HAL_RCC_OscConfig+0x4c4>)
 800b836:	f043 0304 	orr.w	r3, r3, #4
 800b83a:	6213      	str	r3, [r2, #32]
 800b83c:	4b5e      	ldr	r3, [pc, #376]	; (800b9b8 <HAL_RCC_OscConfig+0x4c4>)
 800b83e:	6a1b      	ldr	r3, [r3, #32]
 800b840:	4a5d      	ldr	r2, [pc, #372]	; (800b9b8 <HAL_RCC_OscConfig+0x4c4>)
 800b842:	f043 0301 	orr.w	r3, r3, #1
 800b846:	6213      	str	r3, [r2, #32]
 800b848:	e00b      	b.n	800b862 <HAL_RCC_OscConfig+0x36e>
 800b84a:	4b5b      	ldr	r3, [pc, #364]	; (800b9b8 <HAL_RCC_OscConfig+0x4c4>)
 800b84c:	6a1b      	ldr	r3, [r3, #32]
 800b84e:	4a5a      	ldr	r2, [pc, #360]	; (800b9b8 <HAL_RCC_OscConfig+0x4c4>)
 800b850:	f023 0301 	bic.w	r3, r3, #1
 800b854:	6213      	str	r3, [r2, #32]
 800b856:	4b58      	ldr	r3, [pc, #352]	; (800b9b8 <HAL_RCC_OscConfig+0x4c4>)
 800b858:	6a1b      	ldr	r3, [r3, #32]
 800b85a:	4a57      	ldr	r2, [pc, #348]	; (800b9b8 <HAL_RCC_OscConfig+0x4c4>)
 800b85c:	f023 0304 	bic.w	r3, r3, #4
 800b860:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b862:	687b      	ldr	r3, [r7, #4]
 800b864:	68db      	ldr	r3, [r3, #12]
 800b866:	2b00      	cmp	r3, #0
 800b868:	d015      	beq.n	800b896 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b86a:	f7fd fdff 	bl	800946c <HAL_GetTick>
 800b86e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b870:	e00a      	b.n	800b888 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b872:	f7fd fdfb 	bl	800946c <HAL_GetTick>
 800b876:	4602      	mov	r2, r0
 800b878:	693b      	ldr	r3, [r7, #16]
 800b87a:	1ad3      	subs	r3, r2, r3
 800b87c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b880:	4293      	cmp	r3, r2
 800b882:	d901      	bls.n	800b888 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800b884:	2303      	movs	r3, #3
 800b886:	e0b1      	b.n	800b9ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b888:	4b4b      	ldr	r3, [pc, #300]	; (800b9b8 <HAL_RCC_OscConfig+0x4c4>)
 800b88a:	6a1b      	ldr	r3, [r3, #32]
 800b88c:	f003 0302 	and.w	r3, r3, #2
 800b890:	2b00      	cmp	r3, #0
 800b892:	d0ee      	beq.n	800b872 <HAL_RCC_OscConfig+0x37e>
 800b894:	e014      	b.n	800b8c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b896:	f7fd fde9 	bl	800946c <HAL_GetTick>
 800b89a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b89c:	e00a      	b.n	800b8b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b89e:	f7fd fde5 	bl	800946c <HAL_GetTick>
 800b8a2:	4602      	mov	r2, r0
 800b8a4:	693b      	ldr	r3, [r7, #16]
 800b8a6:	1ad3      	subs	r3, r2, r3
 800b8a8:	f241 3288 	movw	r2, #5000	; 0x1388
 800b8ac:	4293      	cmp	r3, r2
 800b8ae:	d901      	bls.n	800b8b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800b8b0:	2303      	movs	r3, #3
 800b8b2:	e09b      	b.n	800b9ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b8b4:	4b40      	ldr	r3, [pc, #256]	; (800b9b8 <HAL_RCC_OscConfig+0x4c4>)
 800b8b6:	6a1b      	ldr	r3, [r3, #32]
 800b8b8:	f003 0302 	and.w	r3, r3, #2
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d1ee      	bne.n	800b89e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800b8c0:	7dfb      	ldrb	r3, [r7, #23]
 800b8c2:	2b01      	cmp	r3, #1
 800b8c4:	d105      	bne.n	800b8d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b8c6:	4b3c      	ldr	r3, [pc, #240]	; (800b9b8 <HAL_RCC_OscConfig+0x4c4>)
 800b8c8:	69db      	ldr	r3, [r3, #28]
 800b8ca:	4a3b      	ldr	r2, [pc, #236]	; (800b9b8 <HAL_RCC_OscConfig+0x4c4>)
 800b8cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b8d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b8d2:	687b      	ldr	r3, [r7, #4]
 800b8d4:	69db      	ldr	r3, [r3, #28]
 800b8d6:	2b00      	cmp	r3, #0
 800b8d8:	f000 8087 	beq.w	800b9ea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b8dc:	4b36      	ldr	r3, [pc, #216]	; (800b9b8 <HAL_RCC_OscConfig+0x4c4>)
 800b8de:	685b      	ldr	r3, [r3, #4]
 800b8e0:	f003 030c 	and.w	r3, r3, #12
 800b8e4:	2b08      	cmp	r3, #8
 800b8e6:	d061      	beq.n	800b9ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	69db      	ldr	r3, [r3, #28]
 800b8ec:	2b02      	cmp	r3, #2
 800b8ee:	d146      	bne.n	800b97e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b8f0:	4b33      	ldr	r3, [pc, #204]	; (800b9c0 <HAL_RCC_OscConfig+0x4cc>)
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b8f6:	f7fd fdb9 	bl	800946c <HAL_GetTick>
 800b8fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b8fc:	e008      	b.n	800b910 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b8fe:	f7fd fdb5 	bl	800946c <HAL_GetTick>
 800b902:	4602      	mov	r2, r0
 800b904:	693b      	ldr	r3, [r7, #16]
 800b906:	1ad3      	subs	r3, r2, r3
 800b908:	2b02      	cmp	r3, #2
 800b90a:	d901      	bls.n	800b910 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800b90c:	2303      	movs	r3, #3
 800b90e:	e06d      	b.n	800b9ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b910:	4b29      	ldr	r3, [pc, #164]	; (800b9b8 <HAL_RCC_OscConfig+0x4c4>)
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d1f0      	bne.n	800b8fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	6a1b      	ldr	r3, [r3, #32]
 800b920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b924:	d108      	bne.n	800b938 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800b926:	4b24      	ldr	r3, [pc, #144]	; (800b9b8 <HAL_RCC_OscConfig+0x4c4>)
 800b928:	685b      	ldr	r3, [r3, #4]
 800b92a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	689b      	ldr	r3, [r3, #8]
 800b932:	4921      	ldr	r1, [pc, #132]	; (800b9b8 <HAL_RCC_OscConfig+0x4c4>)
 800b934:	4313      	orrs	r3, r2
 800b936:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b938:	4b1f      	ldr	r3, [pc, #124]	; (800b9b8 <HAL_RCC_OscConfig+0x4c4>)
 800b93a:	685b      	ldr	r3, [r3, #4]
 800b93c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	6a19      	ldr	r1, [r3, #32]
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b948:	430b      	orrs	r3, r1
 800b94a:	491b      	ldr	r1, [pc, #108]	; (800b9b8 <HAL_RCC_OscConfig+0x4c4>)
 800b94c:	4313      	orrs	r3, r2
 800b94e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b950:	4b1b      	ldr	r3, [pc, #108]	; (800b9c0 <HAL_RCC_OscConfig+0x4cc>)
 800b952:	2201      	movs	r2, #1
 800b954:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b956:	f7fd fd89 	bl	800946c <HAL_GetTick>
 800b95a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b95c:	e008      	b.n	800b970 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b95e:	f7fd fd85 	bl	800946c <HAL_GetTick>
 800b962:	4602      	mov	r2, r0
 800b964:	693b      	ldr	r3, [r7, #16]
 800b966:	1ad3      	subs	r3, r2, r3
 800b968:	2b02      	cmp	r3, #2
 800b96a:	d901      	bls.n	800b970 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800b96c:	2303      	movs	r3, #3
 800b96e:	e03d      	b.n	800b9ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b970:	4b11      	ldr	r3, [pc, #68]	; (800b9b8 <HAL_RCC_OscConfig+0x4c4>)
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d0f0      	beq.n	800b95e <HAL_RCC_OscConfig+0x46a>
 800b97c:	e035      	b.n	800b9ea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b97e:	4b10      	ldr	r3, [pc, #64]	; (800b9c0 <HAL_RCC_OscConfig+0x4cc>)
 800b980:	2200      	movs	r2, #0
 800b982:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b984:	f7fd fd72 	bl	800946c <HAL_GetTick>
 800b988:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b98a:	e008      	b.n	800b99e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b98c:	f7fd fd6e 	bl	800946c <HAL_GetTick>
 800b990:	4602      	mov	r2, r0
 800b992:	693b      	ldr	r3, [r7, #16]
 800b994:	1ad3      	subs	r3, r2, r3
 800b996:	2b02      	cmp	r3, #2
 800b998:	d901      	bls.n	800b99e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800b99a:	2303      	movs	r3, #3
 800b99c:	e026      	b.n	800b9ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b99e:	4b06      	ldr	r3, [pc, #24]	; (800b9b8 <HAL_RCC_OscConfig+0x4c4>)
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d1f0      	bne.n	800b98c <HAL_RCC_OscConfig+0x498>
 800b9aa:	e01e      	b.n	800b9ea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	69db      	ldr	r3, [r3, #28]
 800b9b0:	2b01      	cmp	r3, #1
 800b9b2:	d107      	bne.n	800b9c4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	e019      	b.n	800b9ec <HAL_RCC_OscConfig+0x4f8>
 800b9b8:	40021000 	.word	0x40021000
 800b9bc:	40007000 	.word	0x40007000
 800b9c0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800b9c4:	4b0b      	ldr	r3, [pc, #44]	; (800b9f4 <HAL_RCC_OscConfig+0x500>)
 800b9c6:	685b      	ldr	r3, [r3, #4]
 800b9c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	6a1b      	ldr	r3, [r3, #32]
 800b9d4:	429a      	cmp	r2, r3
 800b9d6:	d106      	bne.n	800b9e6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800b9d8:	68fb      	ldr	r3, [r7, #12]
 800b9da:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b9e2:	429a      	cmp	r2, r3
 800b9e4:	d001      	beq.n	800b9ea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800b9e6:	2301      	movs	r3, #1
 800b9e8:	e000      	b.n	800b9ec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800b9ea:	2300      	movs	r3, #0
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	3718      	adds	r7, #24
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}
 800b9f4:	40021000 	.word	0x40021000

0800b9f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b084      	sub	sp, #16
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
 800ba00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d101      	bne.n	800ba0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ba08:	2301      	movs	r3, #1
 800ba0a:	e0d0      	b.n	800bbae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ba0c:	4b6a      	ldr	r3, [pc, #424]	; (800bbb8 <HAL_RCC_ClockConfig+0x1c0>)
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	f003 0307 	and.w	r3, r3, #7
 800ba14:	683a      	ldr	r2, [r7, #0]
 800ba16:	429a      	cmp	r2, r3
 800ba18:	d910      	bls.n	800ba3c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ba1a:	4b67      	ldr	r3, [pc, #412]	; (800bbb8 <HAL_RCC_ClockConfig+0x1c0>)
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	f023 0207 	bic.w	r2, r3, #7
 800ba22:	4965      	ldr	r1, [pc, #404]	; (800bbb8 <HAL_RCC_ClockConfig+0x1c0>)
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	4313      	orrs	r3, r2
 800ba28:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ba2a:	4b63      	ldr	r3, [pc, #396]	; (800bbb8 <HAL_RCC_ClockConfig+0x1c0>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	f003 0307 	and.w	r3, r3, #7
 800ba32:	683a      	ldr	r2, [r7, #0]
 800ba34:	429a      	cmp	r2, r3
 800ba36:	d001      	beq.n	800ba3c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800ba38:	2301      	movs	r3, #1
 800ba3a:	e0b8      	b.n	800bbae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	f003 0302 	and.w	r3, r3, #2
 800ba44:	2b00      	cmp	r3, #0
 800ba46:	d020      	beq.n	800ba8a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	f003 0304 	and.w	r3, r3, #4
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d005      	beq.n	800ba60 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800ba54:	4b59      	ldr	r3, [pc, #356]	; (800bbbc <HAL_RCC_ClockConfig+0x1c4>)
 800ba56:	685b      	ldr	r3, [r3, #4]
 800ba58:	4a58      	ldr	r2, [pc, #352]	; (800bbbc <HAL_RCC_ClockConfig+0x1c4>)
 800ba5a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800ba5e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	f003 0308 	and.w	r3, r3, #8
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d005      	beq.n	800ba78 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800ba6c:	4b53      	ldr	r3, [pc, #332]	; (800bbbc <HAL_RCC_ClockConfig+0x1c4>)
 800ba6e:	685b      	ldr	r3, [r3, #4]
 800ba70:	4a52      	ldr	r2, [pc, #328]	; (800bbbc <HAL_RCC_ClockConfig+0x1c4>)
 800ba72:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800ba76:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ba78:	4b50      	ldr	r3, [pc, #320]	; (800bbbc <HAL_RCC_ClockConfig+0x1c4>)
 800ba7a:	685b      	ldr	r3, [r3, #4]
 800ba7c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	689b      	ldr	r3, [r3, #8]
 800ba84:	494d      	ldr	r1, [pc, #308]	; (800bbbc <HAL_RCC_ClockConfig+0x1c4>)
 800ba86:	4313      	orrs	r3, r2
 800ba88:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	f003 0301 	and.w	r3, r3, #1
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d040      	beq.n	800bb18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	685b      	ldr	r3, [r3, #4]
 800ba9a:	2b01      	cmp	r3, #1
 800ba9c:	d107      	bne.n	800baae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ba9e:	4b47      	ldr	r3, [pc, #284]	; (800bbbc <HAL_RCC_ClockConfig+0x1c4>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800baa6:	2b00      	cmp	r3, #0
 800baa8:	d115      	bne.n	800bad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800baaa:	2301      	movs	r3, #1
 800baac:	e07f      	b.n	800bbae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	685b      	ldr	r3, [r3, #4]
 800bab2:	2b02      	cmp	r3, #2
 800bab4:	d107      	bne.n	800bac6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800bab6:	4b41      	ldr	r3, [pc, #260]	; (800bbbc <HAL_RCC_ClockConfig+0x1c4>)
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d109      	bne.n	800bad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bac2:	2301      	movs	r3, #1
 800bac4:	e073      	b.n	800bbae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800bac6:	4b3d      	ldr	r3, [pc, #244]	; (800bbbc <HAL_RCC_ClockConfig+0x1c4>)
 800bac8:	681b      	ldr	r3, [r3, #0]
 800baca:	f003 0302 	and.w	r3, r3, #2
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d101      	bne.n	800bad6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800bad2:	2301      	movs	r3, #1
 800bad4:	e06b      	b.n	800bbae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800bad6:	4b39      	ldr	r3, [pc, #228]	; (800bbbc <HAL_RCC_ClockConfig+0x1c4>)
 800bad8:	685b      	ldr	r3, [r3, #4]
 800bada:	f023 0203 	bic.w	r2, r3, #3
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	685b      	ldr	r3, [r3, #4]
 800bae2:	4936      	ldr	r1, [pc, #216]	; (800bbbc <HAL_RCC_ClockConfig+0x1c4>)
 800bae4:	4313      	orrs	r3, r2
 800bae6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800bae8:	f7fd fcc0 	bl	800946c <HAL_GetTick>
 800baec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800baee:	e00a      	b.n	800bb06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800baf0:	f7fd fcbc 	bl	800946c <HAL_GetTick>
 800baf4:	4602      	mov	r2, r0
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	1ad3      	subs	r3, r2, r3
 800bafa:	f241 3288 	movw	r2, #5000	; 0x1388
 800bafe:	4293      	cmp	r3, r2
 800bb00:	d901      	bls.n	800bb06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800bb02:	2303      	movs	r3, #3
 800bb04:	e053      	b.n	800bbae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800bb06:	4b2d      	ldr	r3, [pc, #180]	; (800bbbc <HAL_RCC_ClockConfig+0x1c4>)
 800bb08:	685b      	ldr	r3, [r3, #4]
 800bb0a:	f003 020c 	and.w	r2, r3, #12
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	685b      	ldr	r3, [r3, #4]
 800bb12:	009b      	lsls	r3, r3, #2
 800bb14:	429a      	cmp	r2, r3
 800bb16:	d1eb      	bne.n	800baf0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800bb18:	4b27      	ldr	r3, [pc, #156]	; (800bbb8 <HAL_RCC_ClockConfig+0x1c0>)
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	f003 0307 	and.w	r3, r3, #7
 800bb20:	683a      	ldr	r2, [r7, #0]
 800bb22:	429a      	cmp	r2, r3
 800bb24:	d210      	bcs.n	800bb48 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800bb26:	4b24      	ldr	r3, [pc, #144]	; (800bbb8 <HAL_RCC_ClockConfig+0x1c0>)
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	f023 0207 	bic.w	r2, r3, #7
 800bb2e:	4922      	ldr	r1, [pc, #136]	; (800bbb8 <HAL_RCC_ClockConfig+0x1c0>)
 800bb30:	683b      	ldr	r3, [r7, #0]
 800bb32:	4313      	orrs	r3, r2
 800bb34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800bb36:	4b20      	ldr	r3, [pc, #128]	; (800bbb8 <HAL_RCC_ClockConfig+0x1c0>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	f003 0307 	and.w	r3, r3, #7
 800bb3e:	683a      	ldr	r2, [r7, #0]
 800bb40:	429a      	cmp	r2, r3
 800bb42:	d001      	beq.n	800bb48 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800bb44:	2301      	movs	r3, #1
 800bb46:	e032      	b.n	800bbae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	f003 0304 	and.w	r3, r3, #4
 800bb50:	2b00      	cmp	r3, #0
 800bb52:	d008      	beq.n	800bb66 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800bb54:	4b19      	ldr	r3, [pc, #100]	; (800bbbc <HAL_RCC_ClockConfig+0x1c4>)
 800bb56:	685b      	ldr	r3, [r3, #4]
 800bb58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	68db      	ldr	r3, [r3, #12]
 800bb60:	4916      	ldr	r1, [pc, #88]	; (800bbbc <HAL_RCC_ClockConfig+0x1c4>)
 800bb62:	4313      	orrs	r3, r2
 800bb64:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	f003 0308 	and.w	r3, r3, #8
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d009      	beq.n	800bb86 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800bb72:	4b12      	ldr	r3, [pc, #72]	; (800bbbc <HAL_RCC_ClockConfig+0x1c4>)
 800bb74:	685b      	ldr	r3, [r3, #4]
 800bb76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	691b      	ldr	r3, [r3, #16]
 800bb7e:	00db      	lsls	r3, r3, #3
 800bb80:	490e      	ldr	r1, [pc, #56]	; (800bbbc <HAL_RCC_ClockConfig+0x1c4>)
 800bb82:	4313      	orrs	r3, r2
 800bb84:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800bb86:	f000 f821 	bl	800bbcc <HAL_RCC_GetSysClockFreq>
 800bb8a:	4602      	mov	r2, r0
 800bb8c:	4b0b      	ldr	r3, [pc, #44]	; (800bbbc <HAL_RCC_ClockConfig+0x1c4>)
 800bb8e:	685b      	ldr	r3, [r3, #4]
 800bb90:	091b      	lsrs	r3, r3, #4
 800bb92:	f003 030f 	and.w	r3, r3, #15
 800bb96:	490a      	ldr	r1, [pc, #40]	; (800bbc0 <HAL_RCC_ClockConfig+0x1c8>)
 800bb98:	5ccb      	ldrb	r3, [r1, r3]
 800bb9a:	fa22 f303 	lsr.w	r3, r2, r3
 800bb9e:	4a09      	ldr	r2, [pc, #36]	; (800bbc4 <HAL_RCC_ClockConfig+0x1cc>)
 800bba0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800bba2:	4b09      	ldr	r3, [pc, #36]	; (800bbc8 <HAL_RCC_ClockConfig+0x1d0>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	4618      	mov	r0, r3
 800bba8:	f7fd fc1e 	bl	80093e8 <HAL_InitTick>

  return HAL_OK;
 800bbac:	2300      	movs	r3, #0
}
 800bbae:	4618      	mov	r0, r3
 800bbb0:	3710      	adds	r7, #16
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	bd80      	pop	{r7, pc}
 800bbb6:	bf00      	nop
 800bbb8:	40022000 	.word	0x40022000
 800bbbc:	40021000 	.word	0x40021000
 800bbc0:	0800e93c 	.word	0x0800e93c
 800bbc4:	200009c4 	.word	0x200009c4
 800bbc8:	200009c8 	.word	0x200009c8

0800bbcc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800bbcc:	b480      	push	{r7}
 800bbce:	b087      	sub	sp, #28
 800bbd0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	60fb      	str	r3, [r7, #12]
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	60bb      	str	r3, [r7, #8]
 800bbda:	2300      	movs	r3, #0
 800bbdc:	617b      	str	r3, [r7, #20]
 800bbde:	2300      	movs	r3, #0
 800bbe0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800bbe6:	4b1e      	ldr	r3, [pc, #120]	; (800bc60 <HAL_RCC_GetSysClockFreq+0x94>)
 800bbe8:	685b      	ldr	r3, [r3, #4]
 800bbea:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	f003 030c 	and.w	r3, r3, #12
 800bbf2:	2b04      	cmp	r3, #4
 800bbf4:	d002      	beq.n	800bbfc <HAL_RCC_GetSysClockFreq+0x30>
 800bbf6:	2b08      	cmp	r3, #8
 800bbf8:	d003      	beq.n	800bc02 <HAL_RCC_GetSysClockFreq+0x36>
 800bbfa:	e027      	b.n	800bc4c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800bbfc:	4b19      	ldr	r3, [pc, #100]	; (800bc64 <HAL_RCC_GetSysClockFreq+0x98>)
 800bbfe:	613b      	str	r3, [r7, #16]
      break;
 800bc00:	e027      	b.n	800bc52 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	0c9b      	lsrs	r3, r3, #18
 800bc06:	f003 030f 	and.w	r3, r3, #15
 800bc0a:	4a17      	ldr	r2, [pc, #92]	; (800bc68 <HAL_RCC_GetSysClockFreq+0x9c>)
 800bc0c:	5cd3      	ldrb	r3, [r2, r3]
 800bc0e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bc16:	2b00      	cmp	r3, #0
 800bc18:	d010      	beq.n	800bc3c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800bc1a:	4b11      	ldr	r3, [pc, #68]	; (800bc60 <HAL_RCC_GetSysClockFreq+0x94>)
 800bc1c:	685b      	ldr	r3, [r3, #4]
 800bc1e:	0c5b      	lsrs	r3, r3, #17
 800bc20:	f003 0301 	and.w	r3, r3, #1
 800bc24:	4a11      	ldr	r2, [pc, #68]	; (800bc6c <HAL_RCC_GetSysClockFreq+0xa0>)
 800bc26:	5cd3      	ldrb	r3, [r2, r3]
 800bc28:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	4a0d      	ldr	r2, [pc, #52]	; (800bc64 <HAL_RCC_GetSysClockFreq+0x98>)
 800bc2e:	fb03 f202 	mul.w	r2, r3, r2
 800bc32:	68bb      	ldr	r3, [r7, #8]
 800bc34:	fbb2 f3f3 	udiv	r3, r2, r3
 800bc38:	617b      	str	r3, [r7, #20]
 800bc3a:	e004      	b.n	800bc46 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800bc3c:	687b      	ldr	r3, [r7, #4]
 800bc3e:	4a0c      	ldr	r2, [pc, #48]	; (800bc70 <HAL_RCC_GetSysClockFreq+0xa4>)
 800bc40:	fb02 f303 	mul.w	r3, r2, r3
 800bc44:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800bc46:	697b      	ldr	r3, [r7, #20]
 800bc48:	613b      	str	r3, [r7, #16]
      break;
 800bc4a:	e002      	b.n	800bc52 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800bc4c:	4b05      	ldr	r3, [pc, #20]	; (800bc64 <HAL_RCC_GetSysClockFreq+0x98>)
 800bc4e:	613b      	str	r3, [r7, #16]
      break;
 800bc50:	bf00      	nop
    }
  }
  return sysclockfreq;
 800bc52:	693b      	ldr	r3, [r7, #16]
}
 800bc54:	4618      	mov	r0, r3
 800bc56:	371c      	adds	r7, #28
 800bc58:	46bd      	mov	sp, r7
 800bc5a:	bc80      	pop	{r7}
 800bc5c:	4770      	bx	lr
 800bc5e:	bf00      	nop
 800bc60:	40021000 	.word	0x40021000
 800bc64:	007a1200 	.word	0x007a1200
 800bc68:	0800e954 	.word	0x0800e954
 800bc6c:	0800e964 	.word	0x0800e964
 800bc70:	003d0900 	.word	0x003d0900

0800bc74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800bc74:	b480      	push	{r7}
 800bc76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800bc78:	4b02      	ldr	r3, [pc, #8]	; (800bc84 <HAL_RCC_GetHCLKFreq+0x10>)
 800bc7a:	681b      	ldr	r3, [r3, #0]
}
 800bc7c:	4618      	mov	r0, r3
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	bc80      	pop	{r7}
 800bc82:	4770      	bx	lr
 800bc84:	200009c4 	.word	0x200009c4

0800bc88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800bc8c:	f7ff fff2 	bl	800bc74 <HAL_RCC_GetHCLKFreq>
 800bc90:	4602      	mov	r2, r0
 800bc92:	4b05      	ldr	r3, [pc, #20]	; (800bca8 <HAL_RCC_GetPCLK1Freq+0x20>)
 800bc94:	685b      	ldr	r3, [r3, #4]
 800bc96:	0a1b      	lsrs	r3, r3, #8
 800bc98:	f003 0307 	and.w	r3, r3, #7
 800bc9c:	4903      	ldr	r1, [pc, #12]	; (800bcac <HAL_RCC_GetPCLK1Freq+0x24>)
 800bc9e:	5ccb      	ldrb	r3, [r1, r3]
 800bca0:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bca4:	4618      	mov	r0, r3
 800bca6:	bd80      	pop	{r7, pc}
 800bca8:	40021000 	.word	0x40021000
 800bcac:	0800e94c 	.word	0x0800e94c

0800bcb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800bcb0:	b580      	push	{r7, lr}
 800bcb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800bcb4:	f7ff ffde 	bl	800bc74 <HAL_RCC_GetHCLKFreq>
 800bcb8:	4602      	mov	r2, r0
 800bcba:	4b05      	ldr	r3, [pc, #20]	; (800bcd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800bcbc:	685b      	ldr	r3, [r3, #4]
 800bcbe:	0adb      	lsrs	r3, r3, #11
 800bcc0:	f003 0307 	and.w	r3, r3, #7
 800bcc4:	4903      	ldr	r1, [pc, #12]	; (800bcd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800bcc6:	5ccb      	ldrb	r3, [r1, r3]
 800bcc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800bccc:	4618      	mov	r0, r3
 800bcce:	bd80      	pop	{r7, pc}
 800bcd0:	40021000 	.word	0x40021000
 800bcd4:	0800e94c 	.word	0x0800e94c

0800bcd8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800bcd8:	b480      	push	{r7}
 800bcda:	b085      	sub	sp, #20
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800bce0:	4b0a      	ldr	r3, [pc, #40]	; (800bd0c <RCC_Delay+0x34>)
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	4a0a      	ldr	r2, [pc, #40]	; (800bd10 <RCC_Delay+0x38>)
 800bce6:	fba2 2303 	umull	r2, r3, r2, r3
 800bcea:	0a5b      	lsrs	r3, r3, #9
 800bcec:	687a      	ldr	r2, [r7, #4]
 800bcee:	fb02 f303 	mul.w	r3, r2, r3
 800bcf2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800bcf4:	bf00      	nop
  }
  while (Delay --);
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	1e5a      	subs	r2, r3, #1
 800bcfa:	60fa      	str	r2, [r7, #12]
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d1f9      	bne.n	800bcf4 <RCC_Delay+0x1c>
}
 800bd00:	bf00      	nop
 800bd02:	bf00      	nop
 800bd04:	3714      	adds	r7, #20
 800bd06:	46bd      	mov	sp, r7
 800bd08:	bc80      	pop	{r7}
 800bd0a:	4770      	bx	lr
 800bd0c:	200009c4 	.word	0x200009c4
 800bd10:	10624dd3 	.word	0x10624dd3

0800bd14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800bd14:	b580      	push	{r7, lr}
 800bd16:	b082      	sub	sp, #8
 800bd18:	af00      	add	r7, sp, #0
 800bd1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2b00      	cmp	r3, #0
 800bd20:	d101      	bne.n	800bd26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800bd22:	2301      	movs	r3, #1
 800bd24:	e041      	b.n	800bdaa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bd2c:	b2db      	uxtb	r3, r3
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d106      	bne.n	800bd40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800bd32:	687b      	ldr	r3, [r7, #4]
 800bd34:	2200      	movs	r2, #0
 800bd36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800bd3a:	6878      	ldr	r0, [r7, #4]
 800bd3c:	f7fd fa26 	bl	800918c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2202      	movs	r2, #2
 800bd44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	681a      	ldr	r2, [r3, #0]
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	3304      	adds	r3, #4
 800bd50:	4619      	mov	r1, r3
 800bd52:	4610      	mov	r0, r2
 800bd54:	f000 fa82 	bl	800c25c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	2201      	movs	r2, #1
 800bd5c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2201      	movs	r2, #1
 800bd64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2201      	movs	r2, #1
 800bd6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2201      	movs	r2, #1
 800bd74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	2201      	movs	r2, #1
 800bd7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	2201      	movs	r2, #1
 800bd84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	2201      	movs	r2, #1
 800bd8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	2201      	movs	r2, #1
 800bd94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	2201      	movs	r2, #1
 800bd9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	2201      	movs	r2, #1
 800bda4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bda8:	2300      	movs	r3, #0
}
 800bdaa:	4618      	mov	r0, r3
 800bdac:	3708      	adds	r7, #8
 800bdae:	46bd      	mov	sp, r7
 800bdb0:	bd80      	pop	{r7, pc}
	...

0800bdb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bdb4:	b480      	push	{r7}
 800bdb6:	b085      	sub	sp, #20
 800bdb8:	af00      	add	r7, sp, #0
 800bdba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bdc2:	b2db      	uxtb	r3, r3
 800bdc4:	2b01      	cmp	r3, #1
 800bdc6:	d001      	beq.n	800bdcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bdc8:	2301      	movs	r3, #1
 800bdca:	e044      	b.n	800be56 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	2202      	movs	r2, #2
 800bdd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	681b      	ldr	r3, [r3, #0]
 800bdd8:	68da      	ldr	r2, [r3, #12]
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	f042 0201 	orr.w	r2, r2, #1
 800bde2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	4a1d      	ldr	r2, [pc, #116]	; (800be60 <HAL_TIM_Base_Start_IT+0xac>)
 800bdea:	4293      	cmp	r3, r2
 800bdec:	d018      	beq.n	800be20 <HAL_TIM_Base_Start_IT+0x6c>
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	4a1c      	ldr	r2, [pc, #112]	; (800be64 <HAL_TIM_Base_Start_IT+0xb0>)
 800bdf4:	4293      	cmp	r3, r2
 800bdf6:	d013      	beq.n	800be20 <HAL_TIM_Base_Start_IT+0x6c>
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800be00:	d00e      	beq.n	800be20 <HAL_TIM_Base_Start_IT+0x6c>
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	4a18      	ldr	r2, [pc, #96]	; (800be68 <HAL_TIM_Base_Start_IT+0xb4>)
 800be08:	4293      	cmp	r3, r2
 800be0a:	d009      	beq.n	800be20 <HAL_TIM_Base_Start_IT+0x6c>
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	4a16      	ldr	r2, [pc, #88]	; (800be6c <HAL_TIM_Base_Start_IT+0xb8>)
 800be12:	4293      	cmp	r3, r2
 800be14:	d004      	beq.n	800be20 <HAL_TIM_Base_Start_IT+0x6c>
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	4a15      	ldr	r2, [pc, #84]	; (800be70 <HAL_TIM_Base_Start_IT+0xbc>)
 800be1c:	4293      	cmp	r3, r2
 800be1e:	d111      	bne.n	800be44 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	689b      	ldr	r3, [r3, #8]
 800be26:	f003 0307 	and.w	r3, r3, #7
 800be2a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	2b06      	cmp	r3, #6
 800be30:	d010      	beq.n	800be54 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800be32:	687b      	ldr	r3, [r7, #4]
 800be34:	681b      	ldr	r3, [r3, #0]
 800be36:	681a      	ldr	r2, [r3, #0]
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	681b      	ldr	r3, [r3, #0]
 800be3c:	f042 0201 	orr.w	r2, r2, #1
 800be40:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800be42:	e007      	b.n	800be54 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	681b      	ldr	r3, [r3, #0]
 800be48:	681a      	ldr	r2, [r3, #0]
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	f042 0201 	orr.w	r2, r2, #1
 800be52:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800be54:	2300      	movs	r3, #0
}
 800be56:	4618      	mov	r0, r3
 800be58:	3714      	adds	r7, #20
 800be5a:	46bd      	mov	sp, r7
 800be5c:	bc80      	pop	{r7}
 800be5e:	4770      	bx	lr
 800be60:	40012c00 	.word	0x40012c00
 800be64:	40013400 	.word	0x40013400
 800be68:	40000400 	.word	0x40000400
 800be6c:	40000800 	.word	0x40000800
 800be70:	40000c00 	.word	0x40000c00

0800be74 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800be74:	b580      	push	{r7, lr}
 800be76:	b082      	sub	sp, #8
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	691b      	ldr	r3, [r3, #16]
 800be82:	f003 0302 	and.w	r3, r3, #2
 800be86:	2b02      	cmp	r3, #2
 800be88:	d122      	bne.n	800bed0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	681b      	ldr	r3, [r3, #0]
 800be8e:	68db      	ldr	r3, [r3, #12]
 800be90:	f003 0302 	and.w	r3, r3, #2
 800be94:	2b02      	cmp	r3, #2
 800be96:	d11b      	bne.n	800bed0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	681b      	ldr	r3, [r3, #0]
 800be9c:	f06f 0202 	mvn.w	r2, #2
 800bea0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	2201      	movs	r2, #1
 800bea6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	699b      	ldr	r3, [r3, #24]
 800beae:	f003 0303 	and.w	r3, r3, #3
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d003      	beq.n	800bebe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800beb6:	6878      	ldr	r0, [r7, #4]
 800beb8:	f000 f9b4 	bl	800c224 <HAL_TIM_IC_CaptureCallback>
 800bebc:	e005      	b.n	800beca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	f000 f9a7 	bl	800c212 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f000 f9b6 	bl	800c236 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	2200      	movs	r2, #0
 800bece:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	691b      	ldr	r3, [r3, #16]
 800bed6:	f003 0304 	and.w	r3, r3, #4
 800beda:	2b04      	cmp	r3, #4
 800bedc:	d122      	bne.n	800bf24 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	68db      	ldr	r3, [r3, #12]
 800bee4:	f003 0304 	and.w	r3, r3, #4
 800bee8:	2b04      	cmp	r3, #4
 800beea:	d11b      	bne.n	800bf24 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	f06f 0204 	mvn.w	r2, #4
 800bef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	2202      	movs	r2, #2
 800befa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	699b      	ldr	r3, [r3, #24]
 800bf02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	d003      	beq.n	800bf12 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf0a:	6878      	ldr	r0, [r7, #4]
 800bf0c:	f000 f98a 	bl	800c224 <HAL_TIM_IC_CaptureCallback>
 800bf10:	e005      	b.n	800bf1e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf12:	6878      	ldr	r0, [r7, #4]
 800bf14:	f000 f97d 	bl	800c212 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf18:	6878      	ldr	r0, [r7, #4]
 800bf1a:	f000 f98c 	bl	800c236 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	2200      	movs	r2, #0
 800bf22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	691b      	ldr	r3, [r3, #16]
 800bf2a:	f003 0308 	and.w	r3, r3, #8
 800bf2e:	2b08      	cmp	r3, #8
 800bf30:	d122      	bne.n	800bf78 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	68db      	ldr	r3, [r3, #12]
 800bf38:	f003 0308 	and.w	r3, r3, #8
 800bf3c:	2b08      	cmp	r3, #8
 800bf3e:	d11b      	bne.n	800bf78 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	f06f 0208 	mvn.w	r2, #8
 800bf48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	2204      	movs	r2, #4
 800bf4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	69db      	ldr	r3, [r3, #28]
 800bf56:	f003 0303 	and.w	r3, r3, #3
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d003      	beq.n	800bf66 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f000 f960 	bl	800c224 <HAL_TIM_IC_CaptureCallback>
 800bf64:	e005      	b.n	800bf72 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bf66:	6878      	ldr	r0, [r7, #4]
 800bf68:	f000 f953 	bl	800c212 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bf6c:	6878      	ldr	r0, [r7, #4]
 800bf6e:	f000 f962 	bl	800c236 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	2200      	movs	r2, #0
 800bf76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	681b      	ldr	r3, [r3, #0]
 800bf7c:	691b      	ldr	r3, [r3, #16]
 800bf7e:	f003 0310 	and.w	r3, r3, #16
 800bf82:	2b10      	cmp	r3, #16
 800bf84:	d122      	bne.n	800bfcc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	68db      	ldr	r3, [r3, #12]
 800bf8c:	f003 0310 	and.w	r3, r3, #16
 800bf90:	2b10      	cmp	r3, #16
 800bf92:	d11b      	bne.n	800bfcc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	f06f 0210 	mvn.w	r2, #16
 800bf9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	2208      	movs	r2, #8
 800bfa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	69db      	ldr	r3, [r3, #28]
 800bfaa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	d003      	beq.n	800bfba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bfb2:	6878      	ldr	r0, [r7, #4]
 800bfb4:	f000 f936 	bl	800c224 <HAL_TIM_IC_CaptureCallback>
 800bfb8:	e005      	b.n	800bfc6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	f000 f929 	bl	800c212 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f000 f938 	bl	800c236 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	2200      	movs	r2, #0
 800bfca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	691b      	ldr	r3, [r3, #16]
 800bfd2:	f003 0301 	and.w	r3, r3, #1
 800bfd6:	2b01      	cmp	r3, #1
 800bfd8:	d10e      	bne.n	800bff8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	68db      	ldr	r3, [r3, #12]
 800bfe0:	f003 0301 	and.w	r3, r3, #1
 800bfe4:	2b01      	cmp	r3, #1
 800bfe6:	d107      	bne.n	800bff8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	f06f 0201 	mvn.w	r2, #1
 800bff0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f7fc fd16 	bl	8008a24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	691b      	ldr	r3, [r3, #16]
 800bffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c002:	2b80      	cmp	r3, #128	; 0x80
 800c004:	d10e      	bne.n	800c024 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	68db      	ldr	r3, [r3, #12]
 800c00c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c010:	2b80      	cmp	r3, #128	; 0x80
 800c012:	d107      	bne.n	800c024 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	681b      	ldr	r3, [r3, #0]
 800c018:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800c01c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c01e:	6878      	ldr	r0, [r7, #4]
 800c020:	f000 faa1 	bl	800c566 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	691b      	ldr	r3, [r3, #16]
 800c02a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c02e:	2b40      	cmp	r3, #64	; 0x40
 800c030:	d10e      	bne.n	800c050 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	68db      	ldr	r3, [r3, #12]
 800c038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c03c:	2b40      	cmp	r3, #64	; 0x40
 800c03e:	d107      	bne.n	800c050 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c04a:	6878      	ldr	r0, [r7, #4]
 800c04c:	f000 f8fc 	bl	800c248 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	691b      	ldr	r3, [r3, #16]
 800c056:	f003 0320 	and.w	r3, r3, #32
 800c05a:	2b20      	cmp	r3, #32
 800c05c:	d10e      	bne.n	800c07c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800c05e:	687b      	ldr	r3, [r7, #4]
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	68db      	ldr	r3, [r3, #12]
 800c064:	f003 0320 	and.w	r3, r3, #32
 800c068:	2b20      	cmp	r3, #32
 800c06a:	d107      	bne.n	800c07c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	f06f 0220 	mvn.w	r2, #32
 800c074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c076:	6878      	ldr	r0, [r7, #4]
 800c078:	f000 fa6c 	bl	800c554 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c07c:	bf00      	nop
 800c07e:	3708      	adds	r7, #8
 800c080:	46bd      	mov	sp, r7
 800c082:	bd80      	pop	{r7, pc}

0800c084 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c084:	b580      	push	{r7, lr}
 800c086:	b084      	sub	sp, #16
 800c088:	af00      	add	r7, sp, #0
 800c08a:	6078      	str	r0, [r7, #4]
 800c08c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c08e:	2300      	movs	r3, #0
 800c090:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c098:	2b01      	cmp	r3, #1
 800c09a:	d101      	bne.n	800c0a0 <HAL_TIM_ConfigClockSource+0x1c>
 800c09c:	2302      	movs	r3, #2
 800c09e:	e0b4      	b.n	800c20a <HAL_TIM_ConfigClockSource+0x186>
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	2201      	movs	r2, #1
 800c0a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2202      	movs	r2, #2
 800c0ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	681b      	ldr	r3, [r3, #0]
 800c0b4:	689b      	ldr	r3, [r3, #8]
 800c0b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c0b8:	68bb      	ldr	r3, [r7, #8]
 800c0ba:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800c0be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c0c0:	68bb      	ldr	r3, [r7, #8]
 800c0c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c0c6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	68ba      	ldr	r2, [r7, #8]
 800c0ce:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c0d0:	683b      	ldr	r3, [r7, #0]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c0d8:	d03e      	beq.n	800c158 <HAL_TIM_ConfigClockSource+0xd4>
 800c0da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c0de:	f200 8087 	bhi.w	800c1f0 <HAL_TIM_ConfigClockSource+0x16c>
 800c0e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0e6:	f000 8086 	beq.w	800c1f6 <HAL_TIM_ConfigClockSource+0x172>
 800c0ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c0ee:	d87f      	bhi.n	800c1f0 <HAL_TIM_ConfigClockSource+0x16c>
 800c0f0:	2b70      	cmp	r3, #112	; 0x70
 800c0f2:	d01a      	beq.n	800c12a <HAL_TIM_ConfigClockSource+0xa6>
 800c0f4:	2b70      	cmp	r3, #112	; 0x70
 800c0f6:	d87b      	bhi.n	800c1f0 <HAL_TIM_ConfigClockSource+0x16c>
 800c0f8:	2b60      	cmp	r3, #96	; 0x60
 800c0fa:	d050      	beq.n	800c19e <HAL_TIM_ConfigClockSource+0x11a>
 800c0fc:	2b60      	cmp	r3, #96	; 0x60
 800c0fe:	d877      	bhi.n	800c1f0 <HAL_TIM_ConfigClockSource+0x16c>
 800c100:	2b50      	cmp	r3, #80	; 0x50
 800c102:	d03c      	beq.n	800c17e <HAL_TIM_ConfigClockSource+0xfa>
 800c104:	2b50      	cmp	r3, #80	; 0x50
 800c106:	d873      	bhi.n	800c1f0 <HAL_TIM_ConfigClockSource+0x16c>
 800c108:	2b40      	cmp	r3, #64	; 0x40
 800c10a:	d058      	beq.n	800c1be <HAL_TIM_ConfigClockSource+0x13a>
 800c10c:	2b40      	cmp	r3, #64	; 0x40
 800c10e:	d86f      	bhi.n	800c1f0 <HAL_TIM_ConfigClockSource+0x16c>
 800c110:	2b30      	cmp	r3, #48	; 0x30
 800c112:	d064      	beq.n	800c1de <HAL_TIM_ConfigClockSource+0x15a>
 800c114:	2b30      	cmp	r3, #48	; 0x30
 800c116:	d86b      	bhi.n	800c1f0 <HAL_TIM_ConfigClockSource+0x16c>
 800c118:	2b20      	cmp	r3, #32
 800c11a:	d060      	beq.n	800c1de <HAL_TIM_ConfigClockSource+0x15a>
 800c11c:	2b20      	cmp	r3, #32
 800c11e:	d867      	bhi.n	800c1f0 <HAL_TIM_ConfigClockSource+0x16c>
 800c120:	2b00      	cmp	r3, #0
 800c122:	d05c      	beq.n	800c1de <HAL_TIM_ConfigClockSource+0x15a>
 800c124:	2b10      	cmp	r3, #16
 800c126:	d05a      	beq.n	800c1de <HAL_TIM_ConfigClockSource+0x15a>
 800c128:	e062      	b.n	800c1f0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c132:	683b      	ldr	r3, [r7, #0]
 800c134:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c136:	683b      	ldr	r3, [r7, #0]
 800c138:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c13a:	f000 f980 	bl	800c43e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	689b      	ldr	r3, [r3, #8]
 800c144:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c146:	68bb      	ldr	r3, [r7, #8]
 800c148:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c14c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	68ba      	ldr	r2, [r7, #8]
 800c154:	609a      	str	r2, [r3, #8]
      break;
 800c156:	e04f      	b.n	800c1f8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c160:	683b      	ldr	r3, [r7, #0]
 800c162:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c168:	f000 f969 	bl	800c43e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	689a      	ldr	r2, [r3, #8]
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	681b      	ldr	r3, [r3, #0]
 800c176:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c17a:	609a      	str	r2, [r3, #8]
      break;
 800c17c:	e03c      	b.n	800c1f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c182:	683b      	ldr	r3, [r7, #0]
 800c184:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c186:	683b      	ldr	r3, [r7, #0]
 800c188:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c18a:	461a      	mov	r2, r3
 800c18c:	f000 f8e0 	bl	800c350 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	2150      	movs	r1, #80	; 0x50
 800c196:	4618      	mov	r0, r3
 800c198:	f000 f937 	bl	800c40a <TIM_ITRx_SetConfig>
      break;
 800c19c:	e02c      	b.n	800c1f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c1a2:	683b      	ldr	r3, [r7, #0]
 800c1a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c1a6:	683b      	ldr	r3, [r7, #0]
 800c1a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c1aa:	461a      	mov	r2, r3
 800c1ac:	f000 f8fe 	bl	800c3ac <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	2160      	movs	r1, #96	; 0x60
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	f000 f927 	bl	800c40a <TIM_ITRx_SetConfig>
      break;
 800c1bc:	e01c      	b.n	800c1f8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c1c2:	683b      	ldr	r3, [r7, #0]
 800c1c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c1c6:	683b      	ldr	r3, [r7, #0]
 800c1c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c1ca:	461a      	mov	r2, r3
 800c1cc:	f000 f8c0 	bl	800c350 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c1d0:	687b      	ldr	r3, [r7, #4]
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	2140      	movs	r1, #64	; 0x40
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	f000 f917 	bl	800c40a <TIM_ITRx_SetConfig>
      break;
 800c1dc:	e00c      	b.n	800c1f8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c1de:	687b      	ldr	r3, [r7, #4]
 800c1e0:	681a      	ldr	r2, [r3, #0]
 800c1e2:	683b      	ldr	r3, [r7, #0]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	4619      	mov	r1, r3
 800c1e8:	4610      	mov	r0, r2
 800c1ea:	f000 f90e 	bl	800c40a <TIM_ITRx_SetConfig>
      break;
 800c1ee:	e003      	b.n	800c1f8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800c1f0:	2301      	movs	r3, #1
 800c1f2:	73fb      	strb	r3, [r7, #15]
      break;
 800c1f4:	e000      	b.n	800c1f8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800c1f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	2201      	movs	r2, #1
 800c1fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	2200      	movs	r2, #0
 800c204:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c208:	7bfb      	ldrb	r3, [r7, #15]
}
 800c20a:	4618      	mov	r0, r3
 800c20c:	3710      	adds	r7, #16
 800c20e:	46bd      	mov	sp, r7
 800c210:	bd80      	pop	{r7, pc}

0800c212 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c212:	b480      	push	{r7}
 800c214:	b083      	sub	sp, #12
 800c216:	af00      	add	r7, sp, #0
 800c218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c21a:	bf00      	nop
 800c21c:	370c      	adds	r7, #12
 800c21e:	46bd      	mov	sp, r7
 800c220:	bc80      	pop	{r7}
 800c222:	4770      	bx	lr

0800c224 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c224:	b480      	push	{r7}
 800c226:	b083      	sub	sp, #12
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c22c:	bf00      	nop
 800c22e:	370c      	adds	r7, #12
 800c230:	46bd      	mov	sp, r7
 800c232:	bc80      	pop	{r7}
 800c234:	4770      	bx	lr

0800c236 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c236:	b480      	push	{r7}
 800c238:	b083      	sub	sp, #12
 800c23a:	af00      	add	r7, sp, #0
 800c23c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c23e:	bf00      	nop
 800c240:	370c      	adds	r7, #12
 800c242:	46bd      	mov	sp, r7
 800c244:	bc80      	pop	{r7}
 800c246:	4770      	bx	lr

0800c248 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c248:	b480      	push	{r7}
 800c24a:	b083      	sub	sp, #12
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c250:	bf00      	nop
 800c252:	370c      	adds	r7, #12
 800c254:	46bd      	mov	sp, r7
 800c256:	bc80      	pop	{r7}
 800c258:	4770      	bx	lr
	...

0800c25c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c25c:	b480      	push	{r7}
 800c25e:	b085      	sub	sp, #20
 800c260:	af00      	add	r7, sp, #0
 800c262:	6078      	str	r0, [r7, #4]
 800c264:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	681b      	ldr	r3, [r3, #0]
 800c26a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	4a33      	ldr	r2, [pc, #204]	; (800c33c <TIM_Base_SetConfig+0xe0>)
 800c270:	4293      	cmp	r3, r2
 800c272:	d013      	beq.n	800c29c <TIM_Base_SetConfig+0x40>
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	4a32      	ldr	r2, [pc, #200]	; (800c340 <TIM_Base_SetConfig+0xe4>)
 800c278:	4293      	cmp	r3, r2
 800c27a:	d00f      	beq.n	800c29c <TIM_Base_SetConfig+0x40>
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c282:	d00b      	beq.n	800c29c <TIM_Base_SetConfig+0x40>
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	4a2f      	ldr	r2, [pc, #188]	; (800c344 <TIM_Base_SetConfig+0xe8>)
 800c288:	4293      	cmp	r3, r2
 800c28a:	d007      	beq.n	800c29c <TIM_Base_SetConfig+0x40>
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	4a2e      	ldr	r2, [pc, #184]	; (800c348 <TIM_Base_SetConfig+0xec>)
 800c290:	4293      	cmp	r3, r2
 800c292:	d003      	beq.n	800c29c <TIM_Base_SetConfig+0x40>
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	4a2d      	ldr	r2, [pc, #180]	; (800c34c <TIM_Base_SetConfig+0xf0>)
 800c298:	4293      	cmp	r3, r2
 800c29a:	d108      	bne.n	800c2ae <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c2a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c2a4:	683b      	ldr	r3, [r7, #0]
 800c2a6:	685b      	ldr	r3, [r3, #4]
 800c2a8:	68fa      	ldr	r2, [r7, #12]
 800c2aa:	4313      	orrs	r3, r2
 800c2ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	4a22      	ldr	r2, [pc, #136]	; (800c33c <TIM_Base_SetConfig+0xe0>)
 800c2b2:	4293      	cmp	r3, r2
 800c2b4:	d013      	beq.n	800c2de <TIM_Base_SetConfig+0x82>
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	4a21      	ldr	r2, [pc, #132]	; (800c340 <TIM_Base_SetConfig+0xe4>)
 800c2ba:	4293      	cmp	r3, r2
 800c2bc:	d00f      	beq.n	800c2de <TIM_Base_SetConfig+0x82>
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2c4:	d00b      	beq.n	800c2de <TIM_Base_SetConfig+0x82>
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	4a1e      	ldr	r2, [pc, #120]	; (800c344 <TIM_Base_SetConfig+0xe8>)
 800c2ca:	4293      	cmp	r3, r2
 800c2cc:	d007      	beq.n	800c2de <TIM_Base_SetConfig+0x82>
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	4a1d      	ldr	r2, [pc, #116]	; (800c348 <TIM_Base_SetConfig+0xec>)
 800c2d2:	4293      	cmp	r3, r2
 800c2d4:	d003      	beq.n	800c2de <TIM_Base_SetConfig+0x82>
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	4a1c      	ldr	r2, [pc, #112]	; (800c34c <TIM_Base_SetConfig+0xf0>)
 800c2da:	4293      	cmp	r3, r2
 800c2dc:	d108      	bne.n	800c2f0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c2e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c2e6:	683b      	ldr	r3, [r7, #0]
 800c2e8:	68db      	ldr	r3, [r3, #12]
 800c2ea:	68fa      	ldr	r2, [r7, #12]
 800c2ec:	4313      	orrs	r3, r2
 800c2ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c2f0:	68fb      	ldr	r3, [r7, #12]
 800c2f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c2f6:	683b      	ldr	r3, [r7, #0]
 800c2f8:	695b      	ldr	r3, [r3, #20]
 800c2fa:	4313      	orrs	r3, r2
 800c2fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	68fa      	ldr	r2, [r7, #12]
 800c302:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c304:	683b      	ldr	r3, [r7, #0]
 800c306:	689a      	ldr	r2, [r3, #8]
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c30c:	683b      	ldr	r3, [r7, #0]
 800c30e:	681a      	ldr	r2, [r3, #0]
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	4a09      	ldr	r2, [pc, #36]	; (800c33c <TIM_Base_SetConfig+0xe0>)
 800c318:	4293      	cmp	r3, r2
 800c31a:	d003      	beq.n	800c324 <TIM_Base_SetConfig+0xc8>
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	4a08      	ldr	r2, [pc, #32]	; (800c340 <TIM_Base_SetConfig+0xe4>)
 800c320:	4293      	cmp	r3, r2
 800c322:	d103      	bne.n	800c32c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c324:	683b      	ldr	r3, [r7, #0]
 800c326:	691a      	ldr	r2, [r3, #16]
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	2201      	movs	r2, #1
 800c330:	615a      	str	r2, [r3, #20]
}
 800c332:	bf00      	nop
 800c334:	3714      	adds	r7, #20
 800c336:	46bd      	mov	sp, r7
 800c338:	bc80      	pop	{r7}
 800c33a:	4770      	bx	lr
 800c33c:	40012c00 	.word	0x40012c00
 800c340:	40013400 	.word	0x40013400
 800c344:	40000400 	.word	0x40000400
 800c348:	40000800 	.word	0x40000800
 800c34c:	40000c00 	.word	0x40000c00

0800c350 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c350:	b480      	push	{r7}
 800c352:	b087      	sub	sp, #28
 800c354:	af00      	add	r7, sp, #0
 800c356:	60f8      	str	r0, [r7, #12]
 800c358:	60b9      	str	r1, [r7, #8]
 800c35a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	6a1b      	ldr	r3, [r3, #32]
 800c360:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c362:	68fb      	ldr	r3, [r7, #12]
 800c364:	6a1b      	ldr	r3, [r3, #32]
 800c366:	f023 0201 	bic.w	r2, r3, #1
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	699b      	ldr	r3, [r3, #24]
 800c372:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c374:	693b      	ldr	r3, [r7, #16]
 800c376:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c37a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	011b      	lsls	r3, r3, #4
 800c380:	693a      	ldr	r2, [r7, #16]
 800c382:	4313      	orrs	r3, r2
 800c384:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c386:	697b      	ldr	r3, [r7, #20]
 800c388:	f023 030a 	bic.w	r3, r3, #10
 800c38c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c38e:	697a      	ldr	r2, [r7, #20]
 800c390:	68bb      	ldr	r3, [r7, #8]
 800c392:	4313      	orrs	r3, r2
 800c394:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	693a      	ldr	r2, [r7, #16]
 800c39a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	697a      	ldr	r2, [r7, #20]
 800c3a0:	621a      	str	r2, [r3, #32]
}
 800c3a2:	bf00      	nop
 800c3a4:	371c      	adds	r7, #28
 800c3a6:	46bd      	mov	sp, r7
 800c3a8:	bc80      	pop	{r7}
 800c3aa:	4770      	bx	lr

0800c3ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c3ac:	b480      	push	{r7}
 800c3ae:	b087      	sub	sp, #28
 800c3b0:	af00      	add	r7, sp, #0
 800c3b2:	60f8      	str	r0, [r7, #12]
 800c3b4:	60b9      	str	r1, [r7, #8]
 800c3b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	6a1b      	ldr	r3, [r3, #32]
 800c3bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	6a1b      	ldr	r3, [r3, #32]
 800c3c2:	f023 0210 	bic.w	r2, r3, #16
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	699b      	ldr	r3, [r3, #24]
 800c3ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c3d0:	693b      	ldr	r3, [r7, #16]
 800c3d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c3d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	031b      	lsls	r3, r3, #12
 800c3dc:	693a      	ldr	r2, [r7, #16]
 800c3de:	4313      	orrs	r3, r2
 800c3e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c3e2:	697b      	ldr	r3, [r7, #20]
 800c3e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c3e8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c3ea:	68bb      	ldr	r3, [r7, #8]
 800c3ec:	011b      	lsls	r3, r3, #4
 800c3ee:	697a      	ldr	r2, [r7, #20]
 800c3f0:	4313      	orrs	r3, r2
 800c3f2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c3f4:	68fb      	ldr	r3, [r7, #12]
 800c3f6:	693a      	ldr	r2, [r7, #16]
 800c3f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	697a      	ldr	r2, [r7, #20]
 800c3fe:	621a      	str	r2, [r3, #32]
}
 800c400:	bf00      	nop
 800c402:	371c      	adds	r7, #28
 800c404:	46bd      	mov	sp, r7
 800c406:	bc80      	pop	{r7}
 800c408:	4770      	bx	lr

0800c40a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c40a:	b480      	push	{r7}
 800c40c:	b085      	sub	sp, #20
 800c40e:	af00      	add	r7, sp, #0
 800c410:	6078      	str	r0, [r7, #4]
 800c412:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	689b      	ldr	r3, [r3, #8]
 800c418:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c41a:	68fb      	ldr	r3, [r7, #12]
 800c41c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c420:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c422:	683a      	ldr	r2, [r7, #0]
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	4313      	orrs	r3, r2
 800c428:	f043 0307 	orr.w	r3, r3, #7
 800c42c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	68fa      	ldr	r2, [r7, #12]
 800c432:	609a      	str	r2, [r3, #8]
}
 800c434:	bf00      	nop
 800c436:	3714      	adds	r7, #20
 800c438:	46bd      	mov	sp, r7
 800c43a:	bc80      	pop	{r7}
 800c43c:	4770      	bx	lr

0800c43e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c43e:	b480      	push	{r7}
 800c440:	b087      	sub	sp, #28
 800c442:	af00      	add	r7, sp, #0
 800c444:	60f8      	str	r0, [r7, #12]
 800c446:	60b9      	str	r1, [r7, #8]
 800c448:	607a      	str	r2, [r7, #4]
 800c44a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	689b      	ldr	r3, [r3, #8]
 800c450:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c452:	697b      	ldr	r3, [r7, #20]
 800c454:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c458:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c45a:	683b      	ldr	r3, [r7, #0]
 800c45c:	021a      	lsls	r2, r3, #8
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	431a      	orrs	r2, r3
 800c462:	68bb      	ldr	r3, [r7, #8]
 800c464:	4313      	orrs	r3, r2
 800c466:	697a      	ldr	r2, [r7, #20]
 800c468:	4313      	orrs	r3, r2
 800c46a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c46c:	68fb      	ldr	r3, [r7, #12]
 800c46e:	697a      	ldr	r2, [r7, #20]
 800c470:	609a      	str	r2, [r3, #8]
}
 800c472:	bf00      	nop
 800c474:	371c      	adds	r7, #28
 800c476:	46bd      	mov	sp, r7
 800c478:	bc80      	pop	{r7}
 800c47a:	4770      	bx	lr

0800c47c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c47c:	b480      	push	{r7}
 800c47e:	b085      	sub	sp, #20
 800c480:	af00      	add	r7, sp, #0
 800c482:	6078      	str	r0, [r7, #4]
 800c484:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c48c:	2b01      	cmp	r3, #1
 800c48e:	d101      	bne.n	800c494 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c490:	2302      	movs	r3, #2
 800c492:	e050      	b.n	800c536 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	2201      	movs	r2, #1
 800c498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	2202      	movs	r2, #2
 800c4a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c4a4:	687b      	ldr	r3, [r7, #4]
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	685b      	ldr	r3, [r3, #4]
 800c4aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	689b      	ldr	r3, [r3, #8]
 800c4b2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c4ba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	68fa      	ldr	r2, [r7, #12]
 800c4c2:	4313      	orrs	r3, r2
 800c4c4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	681b      	ldr	r3, [r3, #0]
 800c4ca:	68fa      	ldr	r2, [r7, #12]
 800c4cc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	4a1b      	ldr	r2, [pc, #108]	; (800c540 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800c4d4:	4293      	cmp	r3, r2
 800c4d6:	d018      	beq.n	800c50a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	4a19      	ldr	r2, [pc, #100]	; (800c544 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c4de:	4293      	cmp	r3, r2
 800c4e0:	d013      	beq.n	800c50a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	681b      	ldr	r3, [r3, #0]
 800c4e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c4ea:	d00e      	beq.n	800c50a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	681b      	ldr	r3, [r3, #0]
 800c4f0:	4a15      	ldr	r2, [pc, #84]	; (800c548 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c4f2:	4293      	cmp	r3, r2
 800c4f4:	d009      	beq.n	800c50a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	681b      	ldr	r3, [r3, #0]
 800c4fa:	4a14      	ldr	r2, [pc, #80]	; (800c54c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800c4fc:	4293      	cmp	r3, r2
 800c4fe:	d004      	beq.n	800c50a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	4a12      	ldr	r2, [pc, #72]	; (800c550 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800c506:	4293      	cmp	r3, r2
 800c508:	d10c      	bne.n	800c524 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c50a:	68bb      	ldr	r3, [r7, #8]
 800c50c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c510:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c512:	683b      	ldr	r3, [r7, #0]
 800c514:	685b      	ldr	r3, [r3, #4]
 800c516:	68ba      	ldr	r2, [r7, #8]
 800c518:	4313      	orrs	r3, r2
 800c51a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	68ba      	ldr	r2, [r7, #8]
 800c522:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	2201      	movs	r2, #1
 800c528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2200      	movs	r2, #0
 800c530:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c534:	2300      	movs	r3, #0
}
 800c536:	4618      	mov	r0, r3
 800c538:	3714      	adds	r7, #20
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bc80      	pop	{r7}
 800c53e:	4770      	bx	lr
 800c540:	40012c00 	.word	0x40012c00
 800c544:	40013400 	.word	0x40013400
 800c548:	40000400 	.word	0x40000400
 800c54c:	40000800 	.word	0x40000800
 800c550:	40000c00 	.word	0x40000c00

0800c554 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c554:	b480      	push	{r7}
 800c556:	b083      	sub	sp, #12
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c55c:	bf00      	nop
 800c55e:	370c      	adds	r7, #12
 800c560:	46bd      	mov	sp, r7
 800c562:	bc80      	pop	{r7}
 800c564:	4770      	bx	lr

0800c566 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c566:	b480      	push	{r7}
 800c568:	b083      	sub	sp, #12
 800c56a:	af00      	add	r7, sp, #0
 800c56c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c56e:	bf00      	nop
 800c570:	370c      	adds	r7, #12
 800c572:	46bd      	mov	sp, r7
 800c574:	bc80      	pop	{r7}
 800c576:	4770      	bx	lr

0800c578 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b082      	sub	sp, #8
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d101      	bne.n	800c58a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c586:	2301      	movs	r3, #1
 800c588:	e042      	b.n	800c610 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c590:	b2db      	uxtb	r3, r3
 800c592:	2b00      	cmp	r3, #0
 800c594:	d106      	bne.n	800c5a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	2200      	movs	r2, #0
 800c59a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c59e:	6878      	ldr	r0, [r7, #4]
 800c5a0:	f7fc fe1a 	bl	80091d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2224      	movs	r2, #36	; 0x24
 800c5a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	68da      	ldr	r2, [r3, #12]
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c5ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c5bc:	6878      	ldr	r0, [r7, #4]
 800c5be:	f000 fcb5 	bl	800cf2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c5c2:	687b      	ldr	r3, [r7, #4]
 800c5c4:	681b      	ldr	r3, [r3, #0]
 800c5c6:	691a      	ldr	r2, [r3, #16]
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c5d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c5d2:	687b      	ldr	r3, [r7, #4]
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	695a      	ldr	r2, [r3, #20]
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c5e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	681b      	ldr	r3, [r3, #0]
 800c5e6:	68da      	ldr	r2, [r3, #12]
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c5f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	2200      	movs	r2, #0
 800c5f6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	2220      	movs	r2, #32
 800c5fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	2220      	movs	r2, #32
 800c604:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c608:	687b      	ldr	r3, [r7, #4]
 800c60a:	2200      	movs	r2, #0
 800c60c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c60e:	2300      	movs	r3, #0
}
 800c610:	4618      	mov	r0, r3
 800c612:	3708      	adds	r7, #8
 800c614:	46bd      	mov	sp, r7
 800c616:	bd80      	pop	{r7, pc}

0800c618 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c618:	b480      	push	{r7}
 800c61a:	b085      	sub	sp, #20
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	60f8      	str	r0, [r7, #12]
 800c620:	60b9      	str	r1, [r7, #8]
 800c622:	4613      	mov	r3, r2
 800c624:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c62c:	b2db      	uxtb	r3, r3
 800c62e:	2b20      	cmp	r3, #32
 800c630:	d121      	bne.n	800c676 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c632:	68bb      	ldr	r3, [r7, #8]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d002      	beq.n	800c63e <HAL_UART_Transmit_IT+0x26>
 800c638:	88fb      	ldrh	r3, [r7, #6]
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d101      	bne.n	800c642 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800c63e:	2301      	movs	r3, #1
 800c640:	e01a      	b.n	800c678 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800c642:	68fb      	ldr	r3, [r7, #12]
 800c644:	68ba      	ldr	r2, [r7, #8]
 800c646:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	88fa      	ldrh	r2, [r7, #6]
 800c64c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c64e:	68fb      	ldr	r3, [r7, #12]
 800c650:	88fa      	ldrh	r2, [r7, #6]
 800c652:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	2200      	movs	r2, #0
 800c658:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	2221      	movs	r2, #33	; 0x21
 800c65e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	68da      	ldr	r2, [r3, #12]
 800c668:	68fb      	ldr	r3, [r7, #12]
 800c66a:	681b      	ldr	r3, [r3, #0]
 800c66c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c670:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800c672:	2300      	movs	r3, #0
 800c674:	e000      	b.n	800c678 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800c676:	2302      	movs	r3, #2
  }
}
 800c678:	4618      	mov	r0, r3
 800c67a:	3714      	adds	r7, #20
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bc80      	pop	{r7}
 800c680:	4770      	bx	lr
	...

0800c684 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c684:	b580      	push	{r7, lr}
 800c686:	b0ba      	sub	sp, #232	; 0xe8
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	68db      	ldr	r3, [r3, #12]
 800c69c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	695b      	ldr	r3, [r3, #20]
 800c6a6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800c6aa:	2300      	movs	r3, #0
 800c6ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800c6b0:	2300      	movs	r3, #0
 800c6b2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c6b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c6ba:	f003 030f 	and.w	r3, r3, #15
 800c6be:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800c6c2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d10f      	bne.n	800c6ea <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c6ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c6ce:	f003 0320 	and.w	r3, r3, #32
 800c6d2:	2b00      	cmp	r3, #0
 800c6d4:	d009      	beq.n	800c6ea <HAL_UART_IRQHandler+0x66>
 800c6d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c6da:	f003 0320 	and.w	r3, r3, #32
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d003      	beq.n	800c6ea <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f000 fb63 	bl	800cdae <UART_Receive_IT>
      return;
 800c6e8:	e25b      	b.n	800cba2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c6ea:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	f000 80de 	beq.w	800c8b0 <HAL_UART_IRQHandler+0x22c>
 800c6f4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c6f8:	f003 0301 	and.w	r3, r3, #1
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d106      	bne.n	800c70e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c704:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c708:	2b00      	cmp	r3, #0
 800c70a:	f000 80d1 	beq.w	800c8b0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c70e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c712:	f003 0301 	and.w	r3, r3, #1
 800c716:	2b00      	cmp	r3, #0
 800c718:	d00b      	beq.n	800c732 <HAL_UART_IRQHandler+0xae>
 800c71a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c71e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c722:	2b00      	cmp	r3, #0
 800c724:	d005      	beq.n	800c732 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c72a:	f043 0201 	orr.w	r2, r3, #1
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c736:	f003 0304 	and.w	r3, r3, #4
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d00b      	beq.n	800c756 <HAL_UART_IRQHandler+0xd2>
 800c73e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c742:	f003 0301 	and.w	r3, r3, #1
 800c746:	2b00      	cmp	r3, #0
 800c748:	d005      	beq.n	800c756 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c74e:	f043 0202 	orr.w	r2, r3, #2
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c75a:	f003 0302 	and.w	r3, r3, #2
 800c75e:	2b00      	cmp	r3, #0
 800c760:	d00b      	beq.n	800c77a <HAL_UART_IRQHandler+0xf6>
 800c762:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c766:	f003 0301 	and.w	r3, r3, #1
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d005      	beq.n	800c77a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c76e:	687b      	ldr	r3, [r7, #4]
 800c770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c772:	f043 0204 	orr.w	r2, r3, #4
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c77a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c77e:	f003 0308 	and.w	r3, r3, #8
 800c782:	2b00      	cmp	r3, #0
 800c784:	d011      	beq.n	800c7aa <HAL_UART_IRQHandler+0x126>
 800c786:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c78a:	f003 0320 	and.w	r3, r3, #32
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d105      	bne.n	800c79e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c792:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c796:	f003 0301 	and.w	r3, r3, #1
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	d005      	beq.n	800c7aa <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7a2:	f043 0208 	orr.w	r2, r3, #8
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	f000 81f2 	beq.w	800cb98 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c7b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c7b8:	f003 0320 	and.w	r3, r3, #32
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	d008      	beq.n	800c7d2 <HAL_UART_IRQHandler+0x14e>
 800c7c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c7c4:	f003 0320 	and.w	r3, r3, #32
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d002      	beq.n	800c7d2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c7cc:	6878      	ldr	r0, [r7, #4]
 800c7ce:	f000 faee 	bl	800cdae <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	681b      	ldr	r3, [r3, #0]
 800c7d6:	695b      	ldr	r3, [r3, #20]
 800c7d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c7dc:	2b00      	cmp	r3, #0
 800c7de:	bf14      	ite	ne
 800c7e0:	2301      	movne	r3, #1
 800c7e2:	2300      	moveq	r3, #0
 800c7e4:	b2db      	uxtb	r3, r3
 800c7e6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c7ee:	f003 0308 	and.w	r3, r3, #8
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d103      	bne.n	800c7fe <HAL_UART_IRQHandler+0x17a>
 800c7f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	d04f      	beq.n	800c89e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	f000 f9f8 	bl	800cbf4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	695b      	ldr	r3, [r3, #20]
 800c80a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c80e:	2b00      	cmp	r3, #0
 800c810:	d041      	beq.n	800c896 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	3314      	adds	r3, #20
 800c818:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c81c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c820:	e853 3f00 	ldrex	r3, [r3]
 800c824:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c828:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c82c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c830:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	681b      	ldr	r3, [r3, #0]
 800c838:	3314      	adds	r3, #20
 800c83a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c83e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c842:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c846:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c84a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c84e:	e841 2300 	strex	r3, r2, [r1]
 800c852:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c856:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d1d9      	bne.n	800c812 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c862:	2b00      	cmp	r3, #0
 800c864:	d013      	beq.n	800c88e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c86a:	4a7e      	ldr	r2, [pc, #504]	; (800ca64 <HAL_UART_IRQHandler+0x3e0>)
 800c86c:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c872:	4618      	mov	r0, r3
 800c874:	f7fd f86c 	bl	8009950 <HAL_DMA_Abort_IT>
 800c878:	4603      	mov	r3, r0
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d016      	beq.n	800c8ac <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c884:	687a      	ldr	r2, [r7, #4]
 800c886:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c888:	4610      	mov	r0, r2
 800c88a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c88c:	e00e      	b.n	800c8ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c88e:	6878      	ldr	r0, [r7, #4]
 800c890:	f000 f99c 	bl	800cbcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c894:	e00a      	b.n	800c8ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c896:	6878      	ldr	r0, [r7, #4]
 800c898:	f000 f998 	bl	800cbcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c89c:	e006      	b.n	800c8ac <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c89e:	6878      	ldr	r0, [r7, #4]
 800c8a0:	f000 f994 	bl	800cbcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800c8aa:	e175      	b.n	800cb98 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c8ac:	bf00      	nop
    return;
 800c8ae:	e173      	b.n	800cb98 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8b4:	2b01      	cmp	r3, #1
 800c8b6:	f040 814f 	bne.w	800cb58 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c8ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c8be:	f003 0310 	and.w	r3, r3, #16
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	f000 8148 	beq.w	800cb58 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c8c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c8cc:	f003 0310 	and.w	r3, r3, #16
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	f000 8141 	beq.w	800cb58 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	60bb      	str	r3, [r7, #8]
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	60bb      	str	r3, [r7, #8]
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	685b      	ldr	r3, [r3, #4]
 800c8e8:	60bb      	str	r3, [r7, #8]
 800c8ea:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	695b      	ldr	r3, [r3, #20]
 800c8f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	f000 80b6 	beq.w	800ca68 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c8fc:	687b      	ldr	r3, [r7, #4]
 800c8fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	685b      	ldr	r3, [r3, #4]
 800c904:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c908:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	f000 8145 	beq.w	800cb9c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c916:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c91a:	429a      	cmp	r2, r3
 800c91c:	f080 813e 	bcs.w	800cb9c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c926:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c92c:	699b      	ldr	r3, [r3, #24]
 800c92e:	2b20      	cmp	r3, #32
 800c930:	f000 8088 	beq.w	800ca44 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	330c      	adds	r3, #12
 800c93a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c93e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c942:	e853 3f00 	ldrex	r3, [r3]
 800c946:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c94a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c94e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c952:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	330c      	adds	r3, #12
 800c95c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c960:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c964:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c968:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c96c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c970:	e841 2300 	strex	r3, r2, [r1]
 800c974:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c978:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d1d9      	bne.n	800c934 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	3314      	adds	r3, #20
 800c986:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c988:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c98a:	e853 3f00 	ldrex	r3, [r3]
 800c98e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c990:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c992:	f023 0301 	bic.w	r3, r3, #1
 800c996:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	3314      	adds	r3, #20
 800c9a0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c9a4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c9a8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9aa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c9ac:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c9b0:	e841 2300 	strex	r3, r2, [r1]
 800c9b4:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c9b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d1e1      	bne.n	800c980 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	3314      	adds	r3, #20
 800c9c2:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c9c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c9c6:	e853 3f00 	ldrex	r3, [r3]
 800c9ca:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c9cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c9ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c9d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	3314      	adds	r3, #20
 800c9dc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c9e0:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c9e2:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c9e4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c9e6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c9e8:	e841 2300 	strex	r3, r2, [r1]
 800c9ec:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c9ee:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c9f0:	2b00      	cmp	r3, #0
 800c9f2:	d1e3      	bne.n	800c9bc <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	2220      	movs	r2, #32
 800c9f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	2200      	movs	r2, #0
 800ca00:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	330c      	adds	r3, #12
 800ca08:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ca0c:	e853 3f00 	ldrex	r3, [r3]
 800ca10:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800ca12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca14:	f023 0310 	bic.w	r3, r3, #16
 800ca18:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	330c      	adds	r3, #12
 800ca22:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800ca26:	65ba      	str	r2, [r7, #88]	; 0x58
 800ca28:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ca2a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800ca2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ca2e:	e841 2300 	strex	r3, r2, [r1]
 800ca32:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800ca34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d1e3      	bne.n	800ca02 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ca3e:	4618      	mov	r0, r3
 800ca40:	f7fc ff4b 	bl	80098da <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	2202      	movs	r2, #2
 800ca48:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ca52:	b29b      	uxth	r3, r3
 800ca54:	1ad3      	subs	r3, r2, r3
 800ca56:	b29b      	uxth	r3, r3
 800ca58:	4619      	mov	r1, r3
 800ca5a:	6878      	ldr	r0, [r7, #4]
 800ca5c:	f000 f8bf 	bl	800cbde <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800ca60:	e09c      	b.n	800cb9c <HAL_UART_IRQHandler+0x518>
 800ca62:	bf00      	nop
 800ca64:	0800ccb9 	.word	0x0800ccb9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ca70:	b29b      	uxth	r3, r3
 800ca72:	1ad3      	subs	r3, r2, r3
 800ca74:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ca7c:	b29b      	uxth	r3, r3
 800ca7e:	2b00      	cmp	r3, #0
 800ca80:	f000 808e 	beq.w	800cba0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800ca84:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	f000 8089 	beq.w	800cba0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	330c      	adds	r3, #12
 800ca94:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ca96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca98:	e853 3f00 	ldrex	r3, [r3]
 800ca9c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ca9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800caa0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800caa4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	330c      	adds	r3, #12
 800caae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800cab2:	647a      	str	r2, [r7, #68]	; 0x44
 800cab4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cab6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800cab8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800caba:	e841 2300 	strex	r3, r2, [r1]
 800cabe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800cac0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cac2:	2b00      	cmp	r3, #0
 800cac4:	d1e3      	bne.n	800ca8e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	3314      	adds	r3, #20
 800cacc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cad0:	e853 3f00 	ldrex	r3, [r3]
 800cad4:	623b      	str	r3, [r7, #32]
   return(result);
 800cad6:	6a3b      	ldr	r3, [r7, #32]
 800cad8:	f023 0301 	bic.w	r3, r3, #1
 800cadc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	3314      	adds	r3, #20
 800cae6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800caea:	633a      	str	r2, [r7, #48]	; 0x30
 800caec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800caf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800caf2:	e841 2300 	strex	r3, r2, [r1]
 800caf6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800caf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cafa:	2b00      	cmp	r3, #0
 800cafc:	d1e3      	bne.n	800cac6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	2220      	movs	r2, #32
 800cb02:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	2200      	movs	r2, #0
 800cb0a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cb0c:	687b      	ldr	r3, [r7, #4]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	330c      	adds	r3, #12
 800cb12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb14:	693b      	ldr	r3, [r7, #16]
 800cb16:	e853 3f00 	ldrex	r3, [r3]
 800cb1a:	60fb      	str	r3, [r7, #12]
   return(result);
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	f023 0310 	bic.w	r3, r3, #16
 800cb22:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	330c      	adds	r3, #12
 800cb2c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800cb30:	61fa      	str	r2, [r7, #28]
 800cb32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb34:	69b9      	ldr	r1, [r7, #24]
 800cb36:	69fa      	ldr	r2, [r7, #28]
 800cb38:	e841 2300 	strex	r3, r2, [r1]
 800cb3c:	617b      	str	r3, [r7, #20]
   return(result);
 800cb3e:	697b      	ldr	r3, [r7, #20]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d1e3      	bne.n	800cb0c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2202      	movs	r2, #2
 800cb48:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cb4a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800cb4e:	4619      	mov	r1, r3
 800cb50:	6878      	ldr	r0, [r7, #4]
 800cb52:	f000 f844 	bl	800cbde <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800cb56:	e023      	b.n	800cba0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800cb58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d009      	beq.n	800cb78 <HAL_UART_IRQHandler+0x4f4>
 800cb64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cb68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d003      	beq.n	800cb78 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800cb70:	6878      	ldr	r0, [r7, #4]
 800cb72:	f000 f8b5 	bl	800cce0 <UART_Transmit_IT>
    return;
 800cb76:	e014      	b.n	800cba2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800cb78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d00e      	beq.n	800cba2 <HAL_UART_IRQHandler+0x51e>
 800cb84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cb88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d008      	beq.n	800cba2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800cb90:	6878      	ldr	r0, [r7, #4]
 800cb92:	f000 f8f4 	bl	800cd7e <UART_EndTransmit_IT>
    return;
 800cb96:	e004      	b.n	800cba2 <HAL_UART_IRQHandler+0x51e>
    return;
 800cb98:	bf00      	nop
 800cb9a:	e002      	b.n	800cba2 <HAL_UART_IRQHandler+0x51e>
      return;
 800cb9c:	bf00      	nop
 800cb9e:	e000      	b.n	800cba2 <HAL_UART_IRQHandler+0x51e>
      return;
 800cba0:	bf00      	nop
  }
}
 800cba2:	37e8      	adds	r7, #232	; 0xe8
 800cba4:	46bd      	mov	sp, r7
 800cba6:	bd80      	pop	{r7, pc}

0800cba8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cba8:	b480      	push	{r7}
 800cbaa:	b083      	sub	sp, #12
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800cbb0:	bf00      	nop
 800cbb2:	370c      	adds	r7, #12
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bc80      	pop	{r7}
 800cbb8:	4770      	bx	lr

0800cbba <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800cbba:	b480      	push	{r7}
 800cbbc:	b083      	sub	sp, #12
 800cbbe:	af00      	add	r7, sp, #0
 800cbc0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800cbc2:	bf00      	nop
 800cbc4:	370c      	adds	r7, #12
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	bc80      	pop	{r7}
 800cbca:	4770      	bx	lr

0800cbcc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800cbcc:	b480      	push	{r7}
 800cbce:	b083      	sub	sp, #12
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800cbd4:	bf00      	nop
 800cbd6:	370c      	adds	r7, #12
 800cbd8:	46bd      	mov	sp, r7
 800cbda:	bc80      	pop	{r7}
 800cbdc:	4770      	bx	lr

0800cbde <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cbde:	b480      	push	{r7}
 800cbe0:	b083      	sub	sp, #12
 800cbe2:	af00      	add	r7, sp, #0
 800cbe4:	6078      	str	r0, [r7, #4]
 800cbe6:	460b      	mov	r3, r1
 800cbe8:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cbea:	bf00      	nop
 800cbec:	370c      	adds	r7, #12
 800cbee:	46bd      	mov	sp, r7
 800cbf0:	bc80      	pop	{r7}
 800cbf2:	4770      	bx	lr

0800cbf4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cbf4:	b480      	push	{r7}
 800cbf6:	b095      	sub	sp, #84	; 0x54
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	330c      	adds	r3, #12
 800cc02:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc06:	e853 3f00 	ldrex	r3, [r3]
 800cc0a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800cc0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc0e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800cc12:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	330c      	adds	r3, #12
 800cc1a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800cc1c:	643a      	str	r2, [r7, #64]	; 0x40
 800cc1e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc20:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800cc22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cc24:	e841 2300 	strex	r3, r2, [r1]
 800cc28:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800cc2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d1e5      	bne.n	800cbfc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	3314      	adds	r3, #20
 800cc36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc38:	6a3b      	ldr	r3, [r7, #32]
 800cc3a:	e853 3f00 	ldrex	r3, [r3]
 800cc3e:	61fb      	str	r3, [r7, #28]
   return(result);
 800cc40:	69fb      	ldr	r3, [r7, #28]
 800cc42:	f023 0301 	bic.w	r3, r3, #1
 800cc46:	64bb      	str	r3, [r7, #72]	; 0x48
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	3314      	adds	r3, #20
 800cc4e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800cc50:	62fa      	str	r2, [r7, #44]	; 0x2c
 800cc52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cc56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cc58:	e841 2300 	strex	r3, r2, [r1]
 800cc5c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800cc5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d1e5      	bne.n	800cc30 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc68:	2b01      	cmp	r3, #1
 800cc6a:	d119      	bne.n	800cca0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	681b      	ldr	r3, [r3, #0]
 800cc70:	330c      	adds	r3, #12
 800cc72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	e853 3f00 	ldrex	r3, [r3]
 800cc7a:	60bb      	str	r3, [r7, #8]
   return(result);
 800cc7c:	68bb      	ldr	r3, [r7, #8]
 800cc7e:	f023 0310 	bic.w	r3, r3, #16
 800cc82:	647b      	str	r3, [r7, #68]	; 0x44
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	681b      	ldr	r3, [r3, #0]
 800cc88:	330c      	adds	r3, #12
 800cc8a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cc8c:	61ba      	str	r2, [r7, #24]
 800cc8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc90:	6979      	ldr	r1, [r7, #20]
 800cc92:	69ba      	ldr	r2, [r7, #24]
 800cc94:	e841 2300 	strex	r3, r2, [r1]
 800cc98:	613b      	str	r3, [r7, #16]
   return(result);
 800cc9a:	693b      	ldr	r3, [r7, #16]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d1e5      	bne.n	800cc6c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	2220      	movs	r2, #32
 800cca4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	2200      	movs	r2, #0
 800ccac:	631a      	str	r2, [r3, #48]	; 0x30
}
 800ccae:	bf00      	nop
 800ccb0:	3754      	adds	r7, #84	; 0x54
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	bc80      	pop	{r7}
 800ccb6:	4770      	bx	lr

0800ccb8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ccb8:	b580      	push	{r7, lr}
 800ccba:	b084      	sub	sp, #16
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccc4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	2200      	movs	r2, #0
 800ccca:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	2200      	movs	r2, #0
 800ccd0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ccd2:	68f8      	ldr	r0, [r7, #12]
 800ccd4:	f7ff ff7a 	bl	800cbcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ccd8:	bf00      	nop
 800ccda:	3710      	adds	r7, #16
 800ccdc:	46bd      	mov	sp, r7
 800ccde:	bd80      	pop	{r7, pc}

0800cce0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800cce0:	b480      	push	{r7}
 800cce2:	b085      	sub	sp, #20
 800cce4:	af00      	add	r7, sp, #0
 800cce6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ccee:	b2db      	uxtb	r3, r3
 800ccf0:	2b21      	cmp	r3, #33	; 0x21
 800ccf2:	d13e      	bne.n	800cd72 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	689b      	ldr	r3, [r3, #8]
 800ccf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ccfc:	d114      	bne.n	800cd28 <UART_Transmit_IT+0x48>
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	691b      	ldr	r3, [r3, #16]
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d110      	bne.n	800cd28 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	6a1b      	ldr	r3, [r3, #32]
 800cd0a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800cd0c:	68fb      	ldr	r3, [r7, #12]
 800cd0e:	881b      	ldrh	r3, [r3, #0]
 800cd10:	461a      	mov	r2, r3
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800cd1a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	6a1b      	ldr	r3, [r3, #32]
 800cd20:	1c9a      	adds	r2, r3, #2
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	621a      	str	r2, [r3, #32]
 800cd26:	e008      	b.n	800cd3a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	6a1b      	ldr	r3, [r3, #32]
 800cd2c:	1c59      	adds	r1, r3, #1
 800cd2e:	687a      	ldr	r2, [r7, #4]
 800cd30:	6211      	str	r1, [r2, #32]
 800cd32:	781a      	ldrb	r2, [r3, #0]
 800cd34:	687b      	ldr	r3, [r7, #4]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800cd3e:	b29b      	uxth	r3, r3
 800cd40:	3b01      	subs	r3, #1
 800cd42:	b29b      	uxth	r3, r3
 800cd44:	687a      	ldr	r2, [r7, #4]
 800cd46:	4619      	mov	r1, r3
 800cd48:	84d1      	strh	r1, [r2, #38]	; 0x26
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	d10f      	bne.n	800cd6e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	68da      	ldr	r2, [r3, #12]
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800cd5c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	681b      	ldr	r3, [r3, #0]
 800cd62:	68da      	ldr	r2, [r3, #12]
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cd6c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800cd6e:	2300      	movs	r3, #0
 800cd70:	e000      	b.n	800cd74 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800cd72:	2302      	movs	r3, #2
  }
}
 800cd74:	4618      	mov	r0, r3
 800cd76:	3714      	adds	r7, #20
 800cd78:	46bd      	mov	sp, r7
 800cd7a:	bc80      	pop	{r7}
 800cd7c:	4770      	bx	lr

0800cd7e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cd7e:	b580      	push	{r7, lr}
 800cd80:	b082      	sub	sp, #8
 800cd82:	af00      	add	r7, sp, #0
 800cd84:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	68da      	ldr	r2, [r3, #12]
 800cd8c:	687b      	ldr	r3, [r7, #4]
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800cd94:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2220      	movs	r2, #32
 800cd9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cd9e:	6878      	ldr	r0, [r7, #4]
 800cda0:	f7ff ff02 	bl	800cba8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800cda4:	2300      	movs	r3, #0
}
 800cda6:	4618      	mov	r0, r3
 800cda8:	3708      	adds	r7, #8
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	bd80      	pop	{r7, pc}

0800cdae <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800cdae:	b580      	push	{r7, lr}
 800cdb0:	b08c      	sub	sp, #48	; 0x30
 800cdb2:	af00      	add	r7, sp, #0
 800cdb4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800cdbc:	b2db      	uxtb	r3, r3
 800cdbe:	2b22      	cmp	r3, #34	; 0x22
 800cdc0:	f040 80ae 	bne.w	800cf20 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	689b      	ldr	r3, [r3, #8]
 800cdc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cdcc:	d117      	bne.n	800cdfe <UART_Receive_IT+0x50>
 800cdce:	687b      	ldr	r3, [r7, #4]
 800cdd0:	691b      	ldr	r3, [r3, #16]
 800cdd2:	2b00      	cmp	r3, #0
 800cdd4:	d113      	bne.n	800cdfe <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdde:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	685b      	ldr	r3, [r3, #4]
 800cde6:	b29b      	uxth	r3, r3
 800cde8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdec:	b29a      	uxth	r2, r3
 800cdee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cdf0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cdf6:	1c9a      	adds	r2, r3, #2
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	629a      	str	r2, [r3, #40]	; 0x28
 800cdfc:	e026      	b.n	800ce4c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce02:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800ce04:	2300      	movs	r3, #0
 800ce06:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	689b      	ldr	r3, [r3, #8]
 800ce0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ce10:	d007      	beq.n	800ce22 <UART_Receive_IT+0x74>
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	689b      	ldr	r3, [r3, #8]
 800ce16:	2b00      	cmp	r3, #0
 800ce18:	d10a      	bne.n	800ce30 <UART_Receive_IT+0x82>
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	691b      	ldr	r3, [r3, #16]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d106      	bne.n	800ce30 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	685b      	ldr	r3, [r3, #4]
 800ce28:	b2da      	uxtb	r2, r3
 800ce2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce2c:	701a      	strb	r2, [r3, #0]
 800ce2e:	e008      	b.n	800ce42 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	685b      	ldr	r3, [r3, #4]
 800ce36:	b2db      	uxtb	r3, r3
 800ce38:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce3c:	b2da      	uxtb	r2, r3
 800ce3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce40:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce46:	1c5a      	adds	r2, r3, #1
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800ce50:	b29b      	uxth	r3, r3
 800ce52:	3b01      	subs	r3, #1
 800ce54:	b29b      	uxth	r3, r3
 800ce56:	687a      	ldr	r2, [r7, #4]
 800ce58:	4619      	mov	r1, r3
 800ce5a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d15d      	bne.n	800cf1c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	68da      	ldr	r2, [r3, #12]
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	f022 0220 	bic.w	r2, r2, #32
 800ce6e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	68da      	ldr	r2, [r3, #12]
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800ce7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	695a      	ldr	r2, [r3, #20]
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	f022 0201 	bic.w	r2, r2, #1
 800ce8e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	2220      	movs	r2, #32
 800ce94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	2200      	movs	r2, #0
 800ce9c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cea2:	2b01      	cmp	r3, #1
 800cea4:	d135      	bne.n	800cf12 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	2200      	movs	r2, #0
 800ceaa:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	330c      	adds	r3, #12
 800ceb2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ceb4:	697b      	ldr	r3, [r7, #20]
 800ceb6:	e853 3f00 	ldrex	r3, [r3]
 800ceba:	613b      	str	r3, [r7, #16]
   return(result);
 800cebc:	693b      	ldr	r3, [r7, #16]
 800cebe:	f023 0310 	bic.w	r3, r3, #16
 800cec2:	627b      	str	r3, [r7, #36]	; 0x24
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	330c      	adds	r3, #12
 800ceca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cecc:	623a      	str	r2, [r7, #32]
 800cece:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ced0:	69f9      	ldr	r1, [r7, #28]
 800ced2:	6a3a      	ldr	r2, [r7, #32]
 800ced4:	e841 2300 	strex	r3, r2, [r1]
 800ced8:	61bb      	str	r3, [r7, #24]
   return(result);
 800ceda:	69bb      	ldr	r3, [r7, #24]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d1e5      	bne.n	800ceac <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	f003 0310 	and.w	r3, r3, #16
 800ceea:	2b10      	cmp	r3, #16
 800ceec:	d10a      	bne.n	800cf04 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800ceee:	2300      	movs	r3, #0
 800cef0:	60fb      	str	r3, [r7, #12]
 800cef2:	687b      	ldr	r3, [r7, #4]
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	60fb      	str	r3, [r7, #12]
 800cefa:	687b      	ldr	r3, [r7, #4]
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	685b      	ldr	r3, [r3, #4]
 800cf00:	60fb      	str	r3, [r7, #12]
 800cf02:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800cf08:	4619      	mov	r1, r3
 800cf0a:	6878      	ldr	r0, [r7, #4]
 800cf0c:	f7ff fe67 	bl	800cbde <HAL_UARTEx_RxEventCallback>
 800cf10:	e002      	b.n	800cf18 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800cf12:	6878      	ldr	r0, [r7, #4]
 800cf14:	f7ff fe51 	bl	800cbba <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800cf18:	2300      	movs	r3, #0
 800cf1a:	e002      	b.n	800cf22 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	e000      	b.n	800cf22 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800cf20:	2302      	movs	r3, #2
  }
}
 800cf22:	4618      	mov	r0, r3
 800cf24:	3730      	adds	r7, #48	; 0x30
 800cf26:	46bd      	mov	sp, r7
 800cf28:	bd80      	pop	{r7, pc}
	...

0800cf2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cf2c:	b580      	push	{r7, lr}
 800cf2e:	b084      	sub	sp, #16
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	691b      	ldr	r3, [r3, #16]
 800cf3a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	68da      	ldr	r2, [r3, #12]
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	430a      	orrs	r2, r1
 800cf48:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	689a      	ldr	r2, [r3, #8]
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	691b      	ldr	r3, [r3, #16]
 800cf52:	431a      	orrs	r2, r3
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	695b      	ldr	r3, [r3, #20]
 800cf58:	4313      	orrs	r3, r2
 800cf5a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	68db      	ldr	r3, [r3, #12]
 800cf62:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800cf66:	f023 030c 	bic.w	r3, r3, #12
 800cf6a:	687a      	ldr	r2, [r7, #4]
 800cf6c:	6812      	ldr	r2, [r2, #0]
 800cf6e:	68b9      	ldr	r1, [r7, #8]
 800cf70:	430b      	orrs	r3, r1
 800cf72:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	695b      	ldr	r3, [r3, #20]
 800cf7a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	699a      	ldr	r2, [r3, #24]
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	430a      	orrs	r2, r1
 800cf88:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800cf8a:	687b      	ldr	r3, [r7, #4]
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	4a2c      	ldr	r2, [pc, #176]	; (800d040 <UART_SetConfig+0x114>)
 800cf90:	4293      	cmp	r3, r2
 800cf92:	d103      	bne.n	800cf9c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800cf94:	f7fe fe8c 	bl	800bcb0 <HAL_RCC_GetPCLK2Freq>
 800cf98:	60f8      	str	r0, [r7, #12]
 800cf9a:	e002      	b.n	800cfa2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800cf9c:	f7fe fe74 	bl	800bc88 <HAL_RCC_GetPCLK1Freq>
 800cfa0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cfa2:	68fa      	ldr	r2, [r7, #12]
 800cfa4:	4613      	mov	r3, r2
 800cfa6:	009b      	lsls	r3, r3, #2
 800cfa8:	4413      	add	r3, r2
 800cfaa:	009a      	lsls	r2, r3, #2
 800cfac:	441a      	add	r2, r3
 800cfae:	687b      	ldr	r3, [r7, #4]
 800cfb0:	685b      	ldr	r3, [r3, #4]
 800cfb2:	009b      	lsls	r3, r3, #2
 800cfb4:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfb8:	4a22      	ldr	r2, [pc, #136]	; (800d044 <UART_SetConfig+0x118>)
 800cfba:	fba2 2303 	umull	r2, r3, r2, r3
 800cfbe:	095b      	lsrs	r3, r3, #5
 800cfc0:	0119      	lsls	r1, r3, #4
 800cfc2:	68fa      	ldr	r2, [r7, #12]
 800cfc4:	4613      	mov	r3, r2
 800cfc6:	009b      	lsls	r3, r3, #2
 800cfc8:	4413      	add	r3, r2
 800cfca:	009a      	lsls	r2, r3, #2
 800cfcc:	441a      	add	r2, r3
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	685b      	ldr	r3, [r3, #4]
 800cfd2:	009b      	lsls	r3, r3, #2
 800cfd4:	fbb2 f2f3 	udiv	r2, r2, r3
 800cfd8:	4b1a      	ldr	r3, [pc, #104]	; (800d044 <UART_SetConfig+0x118>)
 800cfda:	fba3 0302 	umull	r0, r3, r3, r2
 800cfde:	095b      	lsrs	r3, r3, #5
 800cfe0:	2064      	movs	r0, #100	; 0x64
 800cfe2:	fb00 f303 	mul.w	r3, r0, r3
 800cfe6:	1ad3      	subs	r3, r2, r3
 800cfe8:	011b      	lsls	r3, r3, #4
 800cfea:	3332      	adds	r3, #50	; 0x32
 800cfec:	4a15      	ldr	r2, [pc, #84]	; (800d044 <UART_SetConfig+0x118>)
 800cfee:	fba2 2303 	umull	r2, r3, r2, r3
 800cff2:	095b      	lsrs	r3, r3, #5
 800cff4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cff8:	4419      	add	r1, r3
 800cffa:	68fa      	ldr	r2, [r7, #12]
 800cffc:	4613      	mov	r3, r2
 800cffe:	009b      	lsls	r3, r3, #2
 800d000:	4413      	add	r3, r2
 800d002:	009a      	lsls	r2, r3, #2
 800d004:	441a      	add	r2, r3
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	685b      	ldr	r3, [r3, #4]
 800d00a:	009b      	lsls	r3, r3, #2
 800d00c:	fbb2 f2f3 	udiv	r2, r2, r3
 800d010:	4b0c      	ldr	r3, [pc, #48]	; (800d044 <UART_SetConfig+0x118>)
 800d012:	fba3 0302 	umull	r0, r3, r3, r2
 800d016:	095b      	lsrs	r3, r3, #5
 800d018:	2064      	movs	r0, #100	; 0x64
 800d01a:	fb00 f303 	mul.w	r3, r0, r3
 800d01e:	1ad3      	subs	r3, r2, r3
 800d020:	011b      	lsls	r3, r3, #4
 800d022:	3332      	adds	r3, #50	; 0x32
 800d024:	4a07      	ldr	r2, [pc, #28]	; (800d044 <UART_SetConfig+0x118>)
 800d026:	fba2 2303 	umull	r2, r3, r2, r3
 800d02a:	095b      	lsrs	r3, r3, #5
 800d02c:	f003 020f 	and.w	r2, r3, #15
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	681b      	ldr	r3, [r3, #0]
 800d034:	440a      	add	r2, r1
 800d036:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800d038:	bf00      	nop
 800d03a:	3710      	adds	r7, #16
 800d03c:	46bd      	mov	sp, r7
 800d03e:	bd80      	pop	{r7, pc}
 800d040:	40013800 	.word	0x40013800
 800d044:	51eb851f 	.word	0x51eb851f

0800d048 <__itoa>:
 800d048:	1e93      	subs	r3, r2, #2
 800d04a:	2b22      	cmp	r3, #34	; 0x22
 800d04c:	b510      	push	{r4, lr}
 800d04e:	460c      	mov	r4, r1
 800d050:	d904      	bls.n	800d05c <__itoa+0x14>
 800d052:	2300      	movs	r3, #0
 800d054:	461c      	mov	r4, r3
 800d056:	700b      	strb	r3, [r1, #0]
 800d058:	4620      	mov	r0, r4
 800d05a:	bd10      	pop	{r4, pc}
 800d05c:	2a0a      	cmp	r2, #10
 800d05e:	d109      	bne.n	800d074 <__itoa+0x2c>
 800d060:	2800      	cmp	r0, #0
 800d062:	da07      	bge.n	800d074 <__itoa+0x2c>
 800d064:	232d      	movs	r3, #45	; 0x2d
 800d066:	700b      	strb	r3, [r1, #0]
 800d068:	2101      	movs	r1, #1
 800d06a:	4240      	negs	r0, r0
 800d06c:	4421      	add	r1, r4
 800d06e:	f000 f8b9 	bl	800d1e4 <__utoa>
 800d072:	e7f1      	b.n	800d058 <__itoa+0x10>
 800d074:	2100      	movs	r1, #0
 800d076:	e7f9      	b.n	800d06c <__itoa+0x24>

0800d078 <itoa>:
 800d078:	f7ff bfe6 	b.w	800d048 <__itoa>

0800d07c <malloc>:
 800d07c:	4b02      	ldr	r3, [pc, #8]	; (800d088 <malloc+0xc>)
 800d07e:	4601      	mov	r1, r0
 800d080:	6818      	ldr	r0, [r3, #0]
 800d082:	f000 b823 	b.w	800d0cc <_malloc_r>
 800d086:	bf00      	nop
 800d088:	20000a1c 	.word	0x20000a1c

0800d08c <sbrk_aligned>:
 800d08c:	b570      	push	{r4, r5, r6, lr}
 800d08e:	4e0e      	ldr	r6, [pc, #56]	; (800d0c8 <sbrk_aligned+0x3c>)
 800d090:	460c      	mov	r4, r1
 800d092:	6831      	ldr	r1, [r6, #0]
 800d094:	4605      	mov	r5, r0
 800d096:	b911      	cbnz	r1, 800d09e <sbrk_aligned+0x12>
 800d098:	f000 f91e 	bl	800d2d8 <_sbrk_r>
 800d09c:	6030      	str	r0, [r6, #0]
 800d09e:	4621      	mov	r1, r4
 800d0a0:	4628      	mov	r0, r5
 800d0a2:	f000 f919 	bl	800d2d8 <_sbrk_r>
 800d0a6:	1c43      	adds	r3, r0, #1
 800d0a8:	d00a      	beq.n	800d0c0 <sbrk_aligned+0x34>
 800d0aa:	1cc4      	adds	r4, r0, #3
 800d0ac:	f024 0403 	bic.w	r4, r4, #3
 800d0b0:	42a0      	cmp	r0, r4
 800d0b2:	d007      	beq.n	800d0c4 <sbrk_aligned+0x38>
 800d0b4:	1a21      	subs	r1, r4, r0
 800d0b6:	4628      	mov	r0, r5
 800d0b8:	f000 f90e 	bl	800d2d8 <_sbrk_r>
 800d0bc:	3001      	adds	r0, #1
 800d0be:	d101      	bne.n	800d0c4 <sbrk_aligned+0x38>
 800d0c0:	f04f 34ff 	mov.w	r4, #4294967295
 800d0c4:	4620      	mov	r0, r4
 800d0c6:	bd70      	pop	{r4, r5, r6, pc}
 800d0c8:	20000f4c 	.word	0x20000f4c

0800d0cc <_malloc_r>:
 800d0cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0d0:	1ccd      	adds	r5, r1, #3
 800d0d2:	f025 0503 	bic.w	r5, r5, #3
 800d0d6:	3508      	adds	r5, #8
 800d0d8:	2d0c      	cmp	r5, #12
 800d0da:	bf38      	it	cc
 800d0dc:	250c      	movcc	r5, #12
 800d0de:	2d00      	cmp	r5, #0
 800d0e0:	4607      	mov	r7, r0
 800d0e2:	db01      	blt.n	800d0e8 <_malloc_r+0x1c>
 800d0e4:	42a9      	cmp	r1, r5
 800d0e6:	d905      	bls.n	800d0f4 <_malloc_r+0x28>
 800d0e8:	230c      	movs	r3, #12
 800d0ea:	2600      	movs	r6, #0
 800d0ec:	603b      	str	r3, [r7, #0]
 800d0ee:	4630      	mov	r0, r6
 800d0f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800d1c8 <_malloc_r+0xfc>
 800d0f8:	f000 f868 	bl	800d1cc <__malloc_lock>
 800d0fc:	f8d8 3000 	ldr.w	r3, [r8]
 800d100:	461c      	mov	r4, r3
 800d102:	bb5c      	cbnz	r4, 800d15c <_malloc_r+0x90>
 800d104:	4629      	mov	r1, r5
 800d106:	4638      	mov	r0, r7
 800d108:	f7ff ffc0 	bl	800d08c <sbrk_aligned>
 800d10c:	1c43      	adds	r3, r0, #1
 800d10e:	4604      	mov	r4, r0
 800d110:	d155      	bne.n	800d1be <_malloc_r+0xf2>
 800d112:	f8d8 4000 	ldr.w	r4, [r8]
 800d116:	4626      	mov	r6, r4
 800d118:	2e00      	cmp	r6, #0
 800d11a:	d145      	bne.n	800d1a8 <_malloc_r+0xdc>
 800d11c:	2c00      	cmp	r4, #0
 800d11e:	d048      	beq.n	800d1b2 <_malloc_r+0xe6>
 800d120:	6823      	ldr	r3, [r4, #0]
 800d122:	4631      	mov	r1, r6
 800d124:	4638      	mov	r0, r7
 800d126:	eb04 0903 	add.w	r9, r4, r3
 800d12a:	f000 f8d5 	bl	800d2d8 <_sbrk_r>
 800d12e:	4581      	cmp	r9, r0
 800d130:	d13f      	bne.n	800d1b2 <_malloc_r+0xe6>
 800d132:	6821      	ldr	r1, [r4, #0]
 800d134:	4638      	mov	r0, r7
 800d136:	1a6d      	subs	r5, r5, r1
 800d138:	4629      	mov	r1, r5
 800d13a:	f7ff ffa7 	bl	800d08c <sbrk_aligned>
 800d13e:	3001      	adds	r0, #1
 800d140:	d037      	beq.n	800d1b2 <_malloc_r+0xe6>
 800d142:	6823      	ldr	r3, [r4, #0]
 800d144:	442b      	add	r3, r5
 800d146:	6023      	str	r3, [r4, #0]
 800d148:	f8d8 3000 	ldr.w	r3, [r8]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d038      	beq.n	800d1c2 <_malloc_r+0xf6>
 800d150:	685a      	ldr	r2, [r3, #4]
 800d152:	42a2      	cmp	r2, r4
 800d154:	d12b      	bne.n	800d1ae <_malloc_r+0xe2>
 800d156:	2200      	movs	r2, #0
 800d158:	605a      	str	r2, [r3, #4]
 800d15a:	e00f      	b.n	800d17c <_malloc_r+0xb0>
 800d15c:	6822      	ldr	r2, [r4, #0]
 800d15e:	1b52      	subs	r2, r2, r5
 800d160:	d41f      	bmi.n	800d1a2 <_malloc_r+0xd6>
 800d162:	2a0b      	cmp	r2, #11
 800d164:	d917      	bls.n	800d196 <_malloc_r+0xca>
 800d166:	1961      	adds	r1, r4, r5
 800d168:	42a3      	cmp	r3, r4
 800d16a:	6025      	str	r5, [r4, #0]
 800d16c:	bf18      	it	ne
 800d16e:	6059      	strne	r1, [r3, #4]
 800d170:	6863      	ldr	r3, [r4, #4]
 800d172:	bf08      	it	eq
 800d174:	f8c8 1000 	streq.w	r1, [r8]
 800d178:	5162      	str	r2, [r4, r5]
 800d17a:	604b      	str	r3, [r1, #4]
 800d17c:	4638      	mov	r0, r7
 800d17e:	f104 060b 	add.w	r6, r4, #11
 800d182:	f000 f829 	bl	800d1d8 <__malloc_unlock>
 800d186:	f026 0607 	bic.w	r6, r6, #7
 800d18a:	1d23      	adds	r3, r4, #4
 800d18c:	1af2      	subs	r2, r6, r3
 800d18e:	d0ae      	beq.n	800d0ee <_malloc_r+0x22>
 800d190:	1b9b      	subs	r3, r3, r6
 800d192:	50a3      	str	r3, [r4, r2]
 800d194:	e7ab      	b.n	800d0ee <_malloc_r+0x22>
 800d196:	42a3      	cmp	r3, r4
 800d198:	6862      	ldr	r2, [r4, #4]
 800d19a:	d1dd      	bne.n	800d158 <_malloc_r+0x8c>
 800d19c:	f8c8 2000 	str.w	r2, [r8]
 800d1a0:	e7ec      	b.n	800d17c <_malloc_r+0xb0>
 800d1a2:	4623      	mov	r3, r4
 800d1a4:	6864      	ldr	r4, [r4, #4]
 800d1a6:	e7ac      	b.n	800d102 <_malloc_r+0x36>
 800d1a8:	4634      	mov	r4, r6
 800d1aa:	6876      	ldr	r6, [r6, #4]
 800d1ac:	e7b4      	b.n	800d118 <_malloc_r+0x4c>
 800d1ae:	4613      	mov	r3, r2
 800d1b0:	e7cc      	b.n	800d14c <_malloc_r+0x80>
 800d1b2:	230c      	movs	r3, #12
 800d1b4:	4638      	mov	r0, r7
 800d1b6:	603b      	str	r3, [r7, #0]
 800d1b8:	f000 f80e 	bl	800d1d8 <__malloc_unlock>
 800d1bc:	e797      	b.n	800d0ee <_malloc_r+0x22>
 800d1be:	6025      	str	r5, [r4, #0]
 800d1c0:	e7dc      	b.n	800d17c <_malloc_r+0xb0>
 800d1c2:	605b      	str	r3, [r3, #4]
 800d1c4:	deff      	udf	#255	; 0xff
 800d1c6:	bf00      	nop
 800d1c8:	20000f48 	.word	0x20000f48

0800d1cc <__malloc_lock>:
 800d1cc:	4801      	ldr	r0, [pc, #4]	; (800d1d4 <__malloc_lock+0x8>)
 800d1ce:	f000 b8bd 	b.w	800d34c <__retarget_lock_acquire_recursive>
 800d1d2:	bf00      	nop
 800d1d4:	2000108c 	.word	0x2000108c

0800d1d8 <__malloc_unlock>:
 800d1d8:	4801      	ldr	r0, [pc, #4]	; (800d1e0 <__malloc_unlock+0x8>)
 800d1da:	f000 b8b8 	b.w	800d34e <__retarget_lock_release_recursive>
 800d1de:	bf00      	nop
 800d1e0:	2000108c 	.word	0x2000108c

0800d1e4 <__utoa>:
 800d1e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d1e6:	b08b      	sub	sp, #44	; 0x2c
 800d1e8:	4605      	mov	r5, r0
 800d1ea:	460b      	mov	r3, r1
 800d1ec:	466e      	mov	r6, sp
 800d1ee:	4c1d      	ldr	r4, [pc, #116]	; (800d264 <__utoa+0x80>)
 800d1f0:	f104 0c20 	add.w	ip, r4, #32
 800d1f4:	4637      	mov	r7, r6
 800d1f6:	6820      	ldr	r0, [r4, #0]
 800d1f8:	6861      	ldr	r1, [r4, #4]
 800d1fa:	3408      	adds	r4, #8
 800d1fc:	c703      	stmia	r7!, {r0, r1}
 800d1fe:	4564      	cmp	r4, ip
 800d200:	463e      	mov	r6, r7
 800d202:	d1f7      	bne.n	800d1f4 <__utoa+0x10>
 800d204:	7921      	ldrb	r1, [r4, #4]
 800d206:	6820      	ldr	r0, [r4, #0]
 800d208:	7139      	strb	r1, [r7, #4]
 800d20a:	1e91      	subs	r1, r2, #2
 800d20c:	2922      	cmp	r1, #34	; 0x22
 800d20e:	6038      	str	r0, [r7, #0]
 800d210:	f04f 0100 	mov.w	r1, #0
 800d214:	d904      	bls.n	800d220 <__utoa+0x3c>
 800d216:	7019      	strb	r1, [r3, #0]
 800d218:	460b      	mov	r3, r1
 800d21a:	4618      	mov	r0, r3
 800d21c:	b00b      	add	sp, #44	; 0x2c
 800d21e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d220:	1e58      	subs	r0, r3, #1
 800d222:	4684      	mov	ip, r0
 800d224:	fbb5 f7f2 	udiv	r7, r5, r2
 800d228:	fb02 5617 	mls	r6, r2, r7, r5
 800d22c:	3628      	adds	r6, #40	; 0x28
 800d22e:	446e      	add	r6, sp
 800d230:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800d234:	460c      	mov	r4, r1
 800d236:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800d23a:	462e      	mov	r6, r5
 800d23c:	42b2      	cmp	r2, r6
 800d23e:	463d      	mov	r5, r7
 800d240:	f101 0101 	add.w	r1, r1, #1
 800d244:	d9ee      	bls.n	800d224 <__utoa+0x40>
 800d246:	2200      	movs	r2, #0
 800d248:	545a      	strb	r2, [r3, r1]
 800d24a:	1919      	adds	r1, r3, r4
 800d24c:	1aa5      	subs	r5, r4, r2
 800d24e:	42aa      	cmp	r2, r5
 800d250:	dae3      	bge.n	800d21a <__utoa+0x36>
 800d252:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800d256:	780e      	ldrb	r6, [r1, #0]
 800d258:	3201      	adds	r2, #1
 800d25a:	7006      	strb	r6, [r0, #0]
 800d25c:	f801 5901 	strb.w	r5, [r1], #-1
 800d260:	e7f4      	b.n	800d24c <__utoa+0x68>
 800d262:	bf00      	nop
 800d264:	0800e966 	.word	0x0800e966

0800d268 <siprintf>:
 800d268:	b40e      	push	{r1, r2, r3}
 800d26a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d26e:	b500      	push	{lr}
 800d270:	b09c      	sub	sp, #112	; 0x70
 800d272:	ab1d      	add	r3, sp, #116	; 0x74
 800d274:	9002      	str	r0, [sp, #8]
 800d276:	9006      	str	r0, [sp, #24]
 800d278:	9107      	str	r1, [sp, #28]
 800d27a:	9104      	str	r1, [sp, #16]
 800d27c:	4808      	ldr	r0, [pc, #32]	; (800d2a0 <siprintf+0x38>)
 800d27e:	4909      	ldr	r1, [pc, #36]	; (800d2a4 <siprintf+0x3c>)
 800d280:	f853 2b04 	ldr.w	r2, [r3], #4
 800d284:	9105      	str	r1, [sp, #20]
 800d286:	6800      	ldr	r0, [r0, #0]
 800d288:	a902      	add	r1, sp, #8
 800d28a:	9301      	str	r3, [sp, #4]
 800d28c:	f000 f90a 	bl	800d4a4 <_svfiprintf_r>
 800d290:	2200      	movs	r2, #0
 800d292:	9b02      	ldr	r3, [sp, #8]
 800d294:	701a      	strb	r2, [r3, #0]
 800d296:	b01c      	add	sp, #112	; 0x70
 800d298:	f85d eb04 	ldr.w	lr, [sp], #4
 800d29c:	b003      	add	sp, #12
 800d29e:	4770      	bx	lr
 800d2a0:	20000a1c 	.word	0x20000a1c
 800d2a4:	ffff0208 	.word	0xffff0208

0800d2a8 <memset>:
 800d2a8:	4603      	mov	r3, r0
 800d2aa:	4402      	add	r2, r0
 800d2ac:	4293      	cmp	r3, r2
 800d2ae:	d100      	bne.n	800d2b2 <memset+0xa>
 800d2b0:	4770      	bx	lr
 800d2b2:	f803 1b01 	strb.w	r1, [r3], #1
 800d2b6:	e7f9      	b.n	800d2ac <memset+0x4>

0800d2b8 <strcat>:
 800d2b8:	4602      	mov	r2, r0
 800d2ba:	b510      	push	{r4, lr}
 800d2bc:	7814      	ldrb	r4, [r2, #0]
 800d2be:	4613      	mov	r3, r2
 800d2c0:	3201      	adds	r2, #1
 800d2c2:	2c00      	cmp	r4, #0
 800d2c4:	d1fa      	bne.n	800d2bc <strcat+0x4>
 800d2c6:	3b01      	subs	r3, #1
 800d2c8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d2cc:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d2d0:	2a00      	cmp	r2, #0
 800d2d2:	d1f9      	bne.n	800d2c8 <strcat+0x10>
 800d2d4:	bd10      	pop	{r4, pc}
	...

0800d2d8 <_sbrk_r>:
 800d2d8:	b538      	push	{r3, r4, r5, lr}
 800d2da:	2300      	movs	r3, #0
 800d2dc:	4d05      	ldr	r5, [pc, #20]	; (800d2f4 <_sbrk_r+0x1c>)
 800d2de:	4604      	mov	r4, r0
 800d2e0:	4608      	mov	r0, r1
 800d2e2:	602b      	str	r3, [r5, #0]
 800d2e4:	f7fc f808 	bl	80092f8 <_sbrk>
 800d2e8:	1c43      	adds	r3, r0, #1
 800d2ea:	d102      	bne.n	800d2f2 <_sbrk_r+0x1a>
 800d2ec:	682b      	ldr	r3, [r5, #0]
 800d2ee:	b103      	cbz	r3, 800d2f2 <_sbrk_r+0x1a>
 800d2f0:	6023      	str	r3, [r4, #0]
 800d2f2:	bd38      	pop	{r3, r4, r5, pc}
 800d2f4:	20001088 	.word	0x20001088

0800d2f8 <__errno>:
 800d2f8:	4b01      	ldr	r3, [pc, #4]	; (800d300 <__errno+0x8>)
 800d2fa:	6818      	ldr	r0, [r3, #0]
 800d2fc:	4770      	bx	lr
 800d2fe:	bf00      	nop
 800d300:	20000a1c 	.word	0x20000a1c

0800d304 <__libc_init_array>:
 800d304:	b570      	push	{r4, r5, r6, lr}
 800d306:	2600      	movs	r6, #0
 800d308:	4d0c      	ldr	r5, [pc, #48]	; (800d33c <__libc_init_array+0x38>)
 800d30a:	4c0d      	ldr	r4, [pc, #52]	; (800d340 <__libc_init_array+0x3c>)
 800d30c:	1b64      	subs	r4, r4, r5
 800d30e:	10a4      	asrs	r4, r4, #2
 800d310:	42a6      	cmp	r6, r4
 800d312:	d109      	bne.n	800d328 <__libc_init_array+0x24>
 800d314:	f000 fbc6 	bl	800daa4 <_init>
 800d318:	2600      	movs	r6, #0
 800d31a:	4d0a      	ldr	r5, [pc, #40]	; (800d344 <__libc_init_array+0x40>)
 800d31c:	4c0a      	ldr	r4, [pc, #40]	; (800d348 <__libc_init_array+0x44>)
 800d31e:	1b64      	subs	r4, r4, r5
 800d320:	10a4      	asrs	r4, r4, #2
 800d322:	42a6      	cmp	r6, r4
 800d324:	d105      	bne.n	800d332 <__libc_init_array+0x2e>
 800d326:	bd70      	pop	{r4, r5, r6, pc}
 800d328:	f855 3b04 	ldr.w	r3, [r5], #4
 800d32c:	4798      	blx	r3
 800d32e:	3601      	adds	r6, #1
 800d330:	e7ee      	b.n	800d310 <__libc_init_array+0xc>
 800d332:	f855 3b04 	ldr.w	r3, [r5], #4
 800d336:	4798      	blx	r3
 800d338:	3601      	adds	r6, #1
 800d33a:	e7f2      	b.n	800d322 <__libc_init_array+0x1e>
 800d33c:	0800e9c0 	.word	0x0800e9c0
 800d340:	0800e9c0 	.word	0x0800e9c0
 800d344:	0800e9c0 	.word	0x0800e9c0
 800d348:	0800e9c4 	.word	0x0800e9c4

0800d34c <__retarget_lock_acquire_recursive>:
 800d34c:	4770      	bx	lr

0800d34e <__retarget_lock_release_recursive>:
 800d34e:	4770      	bx	lr

0800d350 <strcpy>:
 800d350:	4603      	mov	r3, r0
 800d352:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d356:	f803 2b01 	strb.w	r2, [r3], #1
 800d35a:	2a00      	cmp	r2, #0
 800d35c:	d1f9      	bne.n	800d352 <strcpy+0x2>
 800d35e:	4770      	bx	lr

0800d360 <_free_r>:
 800d360:	b538      	push	{r3, r4, r5, lr}
 800d362:	4605      	mov	r5, r0
 800d364:	2900      	cmp	r1, #0
 800d366:	d040      	beq.n	800d3ea <_free_r+0x8a>
 800d368:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d36c:	1f0c      	subs	r4, r1, #4
 800d36e:	2b00      	cmp	r3, #0
 800d370:	bfb8      	it	lt
 800d372:	18e4      	addlt	r4, r4, r3
 800d374:	f7ff ff2a 	bl	800d1cc <__malloc_lock>
 800d378:	4a1c      	ldr	r2, [pc, #112]	; (800d3ec <_free_r+0x8c>)
 800d37a:	6813      	ldr	r3, [r2, #0]
 800d37c:	b933      	cbnz	r3, 800d38c <_free_r+0x2c>
 800d37e:	6063      	str	r3, [r4, #4]
 800d380:	6014      	str	r4, [r2, #0]
 800d382:	4628      	mov	r0, r5
 800d384:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d388:	f7ff bf26 	b.w	800d1d8 <__malloc_unlock>
 800d38c:	42a3      	cmp	r3, r4
 800d38e:	d908      	bls.n	800d3a2 <_free_r+0x42>
 800d390:	6820      	ldr	r0, [r4, #0]
 800d392:	1821      	adds	r1, r4, r0
 800d394:	428b      	cmp	r3, r1
 800d396:	bf01      	itttt	eq
 800d398:	6819      	ldreq	r1, [r3, #0]
 800d39a:	685b      	ldreq	r3, [r3, #4]
 800d39c:	1809      	addeq	r1, r1, r0
 800d39e:	6021      	streq	r1, [r4, #0]
 800d3a0:	e7ed      	b.n	800d37e <_free_r+0x1e>
 800d3a2:	461a      	mov	r2, r3
 800d3a4:	685b      	ldr	r3, [r3, #4]
 800d3a6:	b10b      	cbz	r3, 800d3ac <_free_r+0x4c>
 800d3a8:	42a3      	cmp	r3, r4
 800d3aa:	d9fa      	bls.n	800d3a2 <_free_r+0x42>
 800d3ac:	6811      	ldr	r1, [r2, #0]
 800d3ae:	1850      	adds	r0, r2, r1
 800d3b0:	42a0      	cmp	r0, r4
 800d3b2:	d10b      	bne.n	800d3cc <_free_r+0x6c>
 800d3b4:	6820      	ldr	r0, [r4, #0]
 800d3b6:	4401      	add	r1, r0
 800d3b8:	1850      	adds	r0, r2, r1
 800d3ba:	4283      	cmp	r3, r0
 800d3bc:	6011      	str	r1, [r2, #0]
 800d3be:	d1e0      	bne.n	800d382 <_free_r+0x22>
 800d3c0:	6818      	ldr	r0, [r3, #0]
 800d3c2:	685b      	ldr	r3, [r3, #4]
 800d3c4:	4408      	add	r0, r1
 800d3c6:	6010      	str	r0, [r2, #0]
 800d3c8:	6053      	str	r3, [r2, #4]
 800d3ca:	e7da      	b.n	800d382 <_free_r+0x22>
 800d3cc:	d902      	bls.n	800d3d4 <_free_r+0x74>
 800d3ce:	230c      	movs	r3, #12
 800d3d0:	602b      	str	r3, [r5, #0]
 800d3d2:	e7d6      	b.n	800d382 <_free_r+0x22>
 800d3d4:	6820      	ldr	r0, [r4, #0]
 800d3d6:	1821      	adds	r1, r4, r0
 800d3d8:	428b      	cmp	r3, r1
 800d3da:	bf01      	itttt	eq
 800d3dc:	6819      	ldreq	r1, [r3, #0]
 800d3de:	685b      	ldreq	r3, [r3, #4]
 800d3e0:	1809      	addeq	r1, r1, r0
 800d3e2:	6021      	streq	r1, [r4, #0]
 800d3e4:	6063      	str	r3, [r4, #4]
 800d3e6:	6054      	str	r4, [r2, #4]
 800d3e8:	e7cb      	b.n	800d382 <_free_r+0x22>
 800d3ea:	bd38      	pop	{r3, r4, r5, pc}
 800d3ec:	20000f48 	.word	0x20000f48

0800d3f0 <__ssputs_r>:
 800d3f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3f4:	461f      	mov	r7, r3
 800d3f6:	688e      	ldr	r6, [r1, #8]
 800d3f8:	4682      	mov	sl, r0
 800d3fa:	42be      	cmp	r6, r7
 800d3fc:	460c      	mov	r4, r1
 800d3fe:	4690      	mov	r8, r2
 800d400:	680b      	ldr	r3, [r1, #0]
 800d402:	d82c      	bhi.n	800d45e <__ssputs_r+0x6e>
 800d404:	898a      	ldrh	r2, [r1, #12]
 800d406:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d40a:	d026      	beq.n	800d45a <__ssputs_r+0x6a>
 800d40c:	6965      	ldr	r5, [r4, #20]
 800d40e:	6909      	ldr	r1, [r1, #16]
 800d410:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d414:	eba3 0901 	sub.w	r9, r3, r1
 800d418:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d41c:	1c7b      	adds	r3, r7, #1
 800d41e:	444b      	add	r3, r9
 800d420:	106d      	asrs	r5, r5, #1
 800d422:	429d      	cmp	r5, r3
 800d424:	bf38      	it	cc
 800d426:	461d      	movcc	r5, r3
 800d428:	0553      	lsls	r3, r2, #21
 800d42a:	d527      	bpl.n	800d47c <__ssputs_r+0x8c>
 800d42c:	4629      	mov	r1, r5
 800d42e:	f7ff fe4d 	bl	800d0cc <_malloc_r>
 800d432:	4606      	mov	r6, r0
 800d434:	b360      	cbz	r0, 800d490 <__ssputs_r+0xa0>
 800d436:	464a      	mov	r2, r9
 800d438:	6921      	ldr	r1, [r4, #16]
 800d43a:	f000 faed 	bl	800da18 <memcpy>
 800d43e:	89a3      	ldrh	r3, [r4, #12]
 800d440:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d448:	81a3      	strh	r3, [r4, #12]
 800d44a:	6126      	str	r6, [r4, #16]
 800d44c:	444e      	add	r6, r9
 800d44e:	6026      	str	r6, [r4, #0]
 800d450:	463e      	mov	r6, r7
 800d452:	6165      	str	r5, [r4, #20]
 800d454:	eba5 0509 	sub.w	r5, r5, r9
 800d458:	60a5      	str	r5, [r4, #8]
 800d45a:	42be      	cmp	r6, r7
 800d45c:	d900      	bls.n	800d460 <__ssputs_r+0x70>
 800d45e:	463e      	mov	r6, r7
 800d460:	4632      	mov	r2, r6
 800d462:	4641      	mov	r1, r8
 800d464:	6820      	ldr	r0, [r4, #0]
 800d466:	f000 faaf 	bl	800d9c8 <memmove>
 800d46a:	2000      	movs	r0, #0
 800d46c:	68a3      	ldr	r3, [r4, #8]
 800d46e:	1b9b      	subs	r3, r3, r6
 800d470:	60a3      	str	r3, [r4, #8]
 800d472:	6823      	ldr	r3, [r4, #0]
 800d474:	4433      	add	r3, r6
 800d476:	6023      	str	r3, [r4, #0]
 800d478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d47c:	462a      	mov	r2, r5
 800d47e:	f000 fad9 	bl	800da34 <_realloc_r>
 800d482:	4606      	mov	r6, r0
 800d484:	2800      	cmp	r0, #0
 800d486:	d1e0      	bne.n	800d44a <__ssputs_r+0x5a>
 800d488:	4650      	mov	r0, sl
 800d48a:	6921      	ldr	r1, [r4, #16]
 800d48c:	f7ff ff68 	bl	800d360 <_free_r>
 800d490:	230c      	movs	r3, #12
 800d492:	f8ca 3000 	str.w	r3, [sl]
 800d496:	89a3      	ldrh	r3, [r4, #12]
 800d498:	f04f 30ff 	mov.w	r0, #4294967295
 800d49c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d4a0:	81a3      	strh	r3, [r4, #12]
 800d4a2:	e7e9      	b.n	800d478 <__ssputs_r+0x88>

0800d4a4 <_svfiprintf_r>:
 800d4a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4a8:	4698      	mov	r8, r3
 800d4aa:	898b      	ldrh	r3, [r1, #12]
 800d4ac:	4607      	mov	r7, r0
 800d4ae:	061b      	lsls	r3, r3, #24
 800d4b0:	460d      	mov	r5, r1
 800d4b2:	4614      	mov	r4, r2
 800d4b4:	b09d      	sub	sp, #116	; 0x74
 800d4b6:	d50e      	bpl.n	800d4d6 <_svfiprintf_r+0x32>
 800d4b8:	690b      	ldr	r3, [r1, #16]
 800d4ba:	b963      	cbnz	r3, 800d4d6 <_svfiprintf_r+0x32>
 800d4bc:	2140      	movs	r1, #64	; 0x40
 800d4be:	f7ff fe05 	bl	800d0cc <_malloc_r>
 800d4c2:	6028      	str	r0, [r5, #0]
 800d4c4:	6128      	str	r0, [r5, #16]
 800d4c6:	b920      	cbnz	r0, 800d4d2 <_svfiprintf_r+0x2e>
 800d4c8:	230c      	movs	r3, #12
 800d4ca:	603b      	str	r3, [r7, #0]
 800d4cc:	f04f 30ff 	mov.w	r0, #4294967295
 800d4d0:	e0d0      	b.n	800d674 <_svfiprintf_r+0x1d0>
 800d4d2:	2340      	movs	r3, #64	; 0x40
 800d4d4:	616b      	str	r3, [r5, #20]
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	9309      	str	r3, [sp, #36]	; 0x24
 800d4da:	2320      	movs	r3, #32
 800d4dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d4e0:	2330      	movs	r3, #48	; 0x30
 800d4e2:	f04f 0901 	mov.w	r9, #1
 800d4e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d4ea:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800d68c <_svfiprintf_r+0x1e8>
 800d4ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d4f2:	4623      	mov	r3, r4
 800d4f4:	469a      	mov	sl, r3
 800d4f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d4fa:	b10a      	cbz	r2, 800d500 <_svfiprintf_r+0x5c>
 800d4fc:	2a25      	cmp	r2, #37	; 0x25
 800d4fe:	d1f9      	bne.n	800d4f4 <_svfiprintf_r+0x50>
 800d500:	ebba 0b04 	subs.w	fp, sl, r4
 800d504:	d00b      	beq.n	800d51e <_svfiprintf_r+0x7a>
 800d506:	465b      	mov	r3, fp
 800d508:	4622      	mov	r2, r4
 800d50a:	4629      	mov	r1, r5
 800d50c:	4638      	mov	r0, r7
 800d50e:	f7ff ff6f 	bl	800d3f0 <__ssputs_r>
 800d512:	3001      	adds	r0, #1
 800d514:	f000 80a9 	beq.w	800d66a <_svfiprintf_r+0x1c6>
 800d518:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d51a:	445a      	add	r2, fp
 800d51c:	9209      	str	r2, [sp, #36]	; 0x24
 800d51e:	f89a 3000 	ldrb.w	r3, [sl]
 800d522:	2b00      	cmp	r3, #0
 800d524:	f000 80a1 	beq.w	800d66a <_svfiprintf_r+0x1c6>
 800d528:	2300      	movs	r3, #0
 800d52a:	f04f 32ff 	mov.w	r2, #4294967295
 800d52e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d532:	f10a 0a01 	add.w	sl, sl, #1
 800d536:	9304      	str	r3, [sp, #16]
 800d538:	9307      	str	r3, [sp, #28]
 800d53a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d53e:	931a      	str	r3, [sp, #104]	; 0x68
 800d540:	4654      	mov	r4, sl
 800d542:	2205      	movs	r2, #5
 800d544:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d548:	4850      	ldr	r0, [pc, #320]	; (800d68c <_svfiprintf_r+0x1e8>)
 800d54a:	f000 fa57 	bl	800d9fc <memchr>
 800d54e:	9a04      	ldr	r2, [sp, #16]
 800d550:	b9d8      	cbnz	r0, 800d58a <_svfiprintf_r+0xe6>
 800d552:	06d0      	lsls	r0, r2, #27
 800d554:	bf44      	itt	mi
 800d556:	2320      	movmi	r3, #32
 800d558:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d55c:	0711      	lsls	r1, r2, #28
 800d55e:	bf44      	itt	mi
 800d560:	232b      	movmi	r3, #43	; 0x2b
 800d562:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d566:	f89a 3000 	ldrb.w	r3, [sl]
 800d56a:	2b2a      	cmp	r3, #42	; 0x2a
 800d56c:	d015      	beq.n	800d59a <_svfiprintf_r+0xf6>
 800d56e:	4654      	mov	r4, sl
 800d570:	2000      	movs	r0, #0
 800d572:	f04f 0c0a 	mov.w	ip, #10
 800d576:	9a07      	ldr	r2, [sp, #28]
 800d578:	4621      	mov	r1, r4
 800d57a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d57e:	3b30      	subs	r3, #48	; 0x30
 800d580:	2b09      	cmp	r3, #9
 800d582:	d94d      	bls.n	800d620 <_svfiprintf_r+0x17c>
 800d584:	b1b0      	cbz	r0, 800d5b4 <_svfiprintf_r+0x110>
 800d586:	9207      	str	r2, [sp, #28]
 800d588:	e014      	b.n	800d5b4 <_svfiprintf_r+0x110>
 800d58a:	eba0 0308 	sub.w	r3, r0, r8
 800d58e:	fa09 f303 	lsl.w	r3, r9, r3
 800d592:	4313      	orrs	r3, r2
 800d594:	46a2      	mov	sl, r4
 800d596:	9304      	str	r3, [sp, #16]
 800d598:	e7d2      	b.n	800d540 <_svfiprintf_r+0x9c>
 800d59a:	9b03      	ldr	r3, [sp, #12]
 800d59c:	1d19      	adds	r1, r3, #4
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	9103      	str	r1, [sp, #12]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	bfbb      	ittet	lt
 800d5a6:	425b      	neglt	r3, r3
 800d5a8:	f042 0202 	orrlt.w	r2, r2, #2
 800d5ac:	9307      	strge	r3, [sp, #28]
 800d5ae:	9307      	strlt	r3, [sp, #28]
 800d5b0:	bfb8      	it	lt
 800d5b2:	9204      	strlt	r2, [sp, #16]
 800d5b4:	7823      	ldrb	r3, [r4, #0]
 800d5b6:	2b2e      	cmp	r3, #46	; 0x2e
 800d5b8:	d10c      	bne.n	800d5d4 <_svfiprintf_r+0x130>
 800d5ba:	7863      	ldrb	r3, [r4, #1]
 800d5bc:	2b2a      	cmp	r3, #42	; 0x2a
 800d5be:	d134      	bne.n	800d62a <_svfiprintf_r+0x186>
 800d5c0:	9b03      	ldr	r3, [sp, #12]
 800d5c2:	3402      	adds	r4, #2
 800d5c4:	1d1a      	adds	r2, r3, #4
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	9203      	str	r2, [sp, #12]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	bfb8      	it	lt
 800d5ce:	f04f 33ff 	movlt.w	r3, #4294967295
 800d5d2:	9305      	str	r3, [sp, #20]
 800d5d4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800d690 <_svfiprintf_r+0x1ec>
 800d5d8:	2203      	movs	r2, #3
 800d5da:	4650      	mov	r0, sl
 800d5dc:	7821      	ldrb	r1, [r4, #0]
 800d5de:	f000 fa0d 	bl	800d9fc <memchr>
 800d5e2:	b138      	cbz	r0, 800d5f4 <_svfiprintf_r+0x150>
 800d5e4:	2240      	movs	r2, #64	; 0x40
 800d5e6:	9b04      	ldr	r3, [sp, #16]
 800d5e8:	eba0 000a 	sub.w	r0, r0, sl
 800d5ec:	4082      	lsls	r2, r0
 800d5ee:	4313      	orrs	r3, r2
 800d5f0:	3401      	adds	r4, #1
 800d5f2:	9304      	str	r3, [sp, #16]
 800d5f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5f8:	2206      	movs	r2, #6
 800d5fa:	4826      	ldr	r0, [pc, #152]	; (800d694 <_svfiprintf_r+0x1f0>)
 800d5fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d600:	f000 f9fc 	bl	800d9fc <memchr>
 800d604:	2800      	cmp	r0, #0
 800d606:	d038      	beq.n	800d67a <_svfiprintf_r+0x1d6>
 800d608:	4b23      	ldr	r3, [pc, #140]	; (800d698 <_svfiprintf_r+0x1f4>)
 800d60a:	bb1b      	cbnz	r3, 800d654 <_svfiprintf_r+0x1b0>
 800d60c:	9b03      	ldr	r3, [sp, #12]
 800d60e:	3307      	adds	r3, #7
 800d610:	f023 0307 	bic.w	r3, r3, #7
 800d614:	3308      	adds	r3, #8
 800d616:	9303      	str	r3, [sp, #12]
 800d618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d61a:	4433      	add	r3, r6
 800d61c:	9309      	str	r3, [sp, #36]	; 0x24
 800d61e:	e768      	b.n	800d4f2 <_svfiprintf_r+0x4e>
 800d620:	460c      	mov	r4, r1
 800d622:	2001      	movs	r0, #1
 800d624:	fb0c 3202 	mla	r2, ip, r2, r3
 800d628:	e7a6      	b.n	800d578 <_svfiprintf_r+0xd4>
 800d62a:	2300      	movs	r3, #0
 800d62c:	f04f 0c0a 	mov.w	ip, #10
 800d630:	4619      	mov	r1, r3
 800d632:	3401      	adds	r4, #1
 800d634:	9305      	str	r3, [sp, #20]
 800d636:	4620      	mov	r0, r4
 800d638:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d63c:	3a30      	subs	r2, #48	; 0x30
 800d63e:	2a09      	cmp	r2, #9
 800d640:	d903      	bls.n	800d64a <_svfiprintf_r+0x1a6>
 800d642:	2b00      	cmp	r3, #0
 800d644:	d0c6      	beq.n	800d5d4 <_svfiprintf_r+0x130>
 800d646:	9105      	str	r1, [sp, #20]
 800d648:	e7c4      	b.n	800d5d4 <_svfiprintf_r+0x130>
 800d64a:	4604      	mov	r4, r0
 800d64c:	2301      	movs	r3, #1
 800d64e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d652:	e7f0      	b.n	800d636 <_svfiprintf_r+0x192>
 800d654:	ab03      	add	r3, sp, #12
 800d656:	9300      	str	r3, [sp, #0]
 800d658:	462a      	mov	r2, r5
 800d65a:	4638      	mov	r0, r7
 800d65c:	4b0f      	ldr	r3, [pc, #60]	; (800d69c <_svfiprintf_r+0x1f8>)
 800d65e:	a904      	add	r1, sp, #16
 800d660:	f3af 8000 	nop.w
 800d664:	1c42      	adds	r2, r0, #1
 800d666:	4606      	mov	r6, r0
 800d668:	d1d6      	bne.n	800d618 <_svfiprintf_r+0x174>
 800d66a:	89ab      	ldrh	r3, [r5, #12]
 800d66c:	065b      	lsls	r3, r3, #25
 800d66e:	f53f af2d 	bmi.w	800d4cc <_svfiprintf_r+0x28>
 800d672:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d674:	b01d      	add	sp, #116	; 0x74
 800d676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d67a:	ab03      	add	r3, sp, #12
 800d67c:	9300      	str	r3, [sp, #0]
 800d67e:	462a      	mov	r2, r5
 800d680:	4638      	mov	r0, r7
 800d682:	4b06      	ldr	r3, [pc, #24]	; (800d69c <_svfiprintf_r+0x1f8>)
 800d684:	a904      	add	r1, sp, #16
 800d686:	f000 f87d 	bl	800d784 <_printf_i>
 800d68a:	e7eb      	b.n	800d664 <_svfiprintf_r+0x1c0>
 800d68c:	0800e98b 	.word	0x0800e98b
 800d690:	0800e991 	.word	0x0800e991
 800d694:	0800e995 	.word	0x0800e995
 800d698:	00000000 	.word	0x00000000
 800d69c:	0800d3f1 	.word	0x0800d3f1

0800d6a0 <_printf_common>:
 800d6a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6a4:	4616      	mov	r6, r2
 800d6a6:	4699      	mov	r9, r3
 800d6a8:	688a      	ldr	r2, [r1, #8]
 800d6aa:	690b      	ldr	r3, [r1, #16]
 800d6ac:	4607      	mov	r7, r0
 800d6ae:	4293      	cmp	r3, r2
 800d6b0:	bfb8      	it	lt
 800d6b2:	4613      	movlt	r3, r2
 800d6b4:	6033      	str	r3, [r6, #0]
 800d6b6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d6ba:	460c      	mov	r4, r1
 800d6bc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d6c0:	b10a      	cbz	r2, 800d6c6 <_printf_common+0x26>
 800d6c2:	3301      	adds	r3, #1
 800d6c4:	6033      	str	r3, [r6, #0]
 800d6c6:	6823      	ldr	r3, [r4, #0]
 800d6c8:	0699      	lsls	r1, r3, #26
 800d6ca:	bf42      	ittt	mi
 800d6cc:	6833      	ldrmi	r3, [r6, #0]
 800d6ce:	3302      	addmi	r3, #2
 800d6d0:	6033      	strmi	r3, [r6, #0]
 800d6d2:	6825      	ldr	r5, [r4, #0]
 800d6d4:	f015 0506 	ands.w	r5, r5, #6
 800d6d8:	d106      	bne.n	800d6e8 <_printf_common+0x48>
 800d6da:	f104 0a19 	add.w	sl, r4, #25
 800d6de:	68e3      	ldr	r3, [r4, #12]
 800d6e0:	6832      	ldr	r2, [r6, #0]
 800d6e2:	1a9b      	subs	r3, r3, r2
 800d6e4:	42ab      	cmp	r3, r5
 800d6e6:	dc2b      	bgt.n	800d740 <_printf_common+0xa0>
 800d6e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d6ec:	1e13      	subs	r3, r2, #0
 800d6ee:	6822      	ldr	r2, [r4, #0]
 800d6f0:	bf18      	it	ne
 800d6f2:	2301      	movne	r3, #1
 800d6f4:	0692      	lsls	r2, r2, #26
 800d6f6:	d430      	bmi.n	800d75a <_printf_common+0xba>
 800d6f8:	4649      	mov	r1, r9
 800d6fa:	4638      	mov	r0, r7
 800d6fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d700:	47c0      	blx	r8
 800d702:	3001      	adds	r0, #1
 800d704:	d023      	beq.n	800d74e <_printf_common+0xae>
 800d706:	6823      	ldr	r3, [r4, #0]
 800d708:	6922      	ldr	r2, [r4, #16]
 800d70a:	f003 0306 	and.w	r3, r3, #6
 800d70e:	2b04      	cmp	r3, #4
 800d710:	bf14      	ite	ne
 800d712:	2500      	movne	r5, #0
 800d714:	6833      	ldreq	r3, [r6, #0]
 800d716:	f04f 0600 	mov.w	r6, #0
 800d71a:	bf08      	it	eq
 800d71c:	68e5      	ldreq	r5, [r4, #12]
 800d71e:	f104 041a 	add.w	r4, r4, #26
 800d722:	bf08      	it	eq
 800d724:	1aed      	subeq	r5, r5, r3
 800d726:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d72a:	bf08      	it	eq
 800d72c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d730:	4293      	cmp	r3, r2
 800d732:	bfc4      	itt	gt
 800d734:	1a9b      	subgt	r3, r3, r2
 800d736:	18ed      	addgt	r5, r5, r3
 800d738:	42b5      	cmp	r5, r6
 800d73a:	d11a      	bne.n	800d772 <_printf_common+0xd2>
 800d73c:	2000      	movs	r0, #0
 800d73e:	e008      	b.n	800d752 <_printf_common+0xb2>
 800d740:	2301      	movs	r3, #1
 800d742:	4652      	mov	r2, sl
 800d744:	4649      	mov	r1, r9
 800d746:	4638      	mov	r0, r7
 800d748:	47c0      	blx	r8
 800d74a:	3001      	adds	r0, #1
 800d74c:	d103      	bne.n	800d756 <_printf_common+0xb6>
 800d74e:	f04f 30ff 	mov.w	r0, #4294967295
 800d752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d756:	3501      	adds	r5, #1
 800d758:	e7c1      	b.n	800d6de <_printf_common+0x3e>
 800d75a:	2030      	movs	r0, #48	; 0x30
 800d75c:	18e1      	adds	r1, r4, r3
 800d75e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d762:	1c5a      	adds	r2, r3, #1
 800d764:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d768:	4422      	add	r2, r4
 800d76a:	3302      	adds	r3, #2
 800d76c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d770:	e7c2      	b.n	800d6f8 <_printf_common+0x58>
 800d772:	2301      	movs	r3, #1
 800d774:	4622      	mov	r2, r4
 800d776:	4649      	mov	r1, r9
 800d778:	4638      	mov	r0, r7
 800d77a:	47c0      	blx	r8
 800d77c:	3001      	adds	r0, #1
 800d77e:	d0e6      	beq.n	800d74e <_printf_common+0xae>
 800d780:	3601      	adds	r6, #1
 800d782:	e7d9      	b.n	800d738 <_printf_common+0x98>

0800d784 <_printf_i>:
 800d784:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d788:	7e0f      	ldrb	r7, [r1, #24]
 800d78a:	4691      	mov	r9, r2
 800d78c:	2f78      	cmp	r7, #120	; 0x78
 800d78e:	4680      	mov	r8, r0
 800d790:	460c      	mov	r4, r1
 800d792:	469a      	mov	sl, r3
 800d794:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d796:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d79a:	d807      	bhi.n	800d7ac <_printf_i+0x28>
 800d79c:	2f62      	cmp	r7, #98	; 0x62
 800d79e:	d80a      	bhi.n	800d7b6 <_printf_i+0x32>
 800d7a0:	2f00      	cmp	r7, #0
 800d7a2:	f000 80d5 	beq.w	800d950 <_printf_i+0x1cc>
 800d7a6:	2f58      	cmp	r7, #88	; 0x58
 800d7a8:	f000 80c1 	beq.w	800d92e <_printf_i+0x1aa>
 800d7ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d7b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d7b4:	e03a      	b.n	800d82c <_printf_i+0xa8>
 800d7b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d7ba:	2b15      	cmp	r3, #21
 800d7bc:	d8f6      	bhi.n	800d7ac <_printf_i+0x28>
 800d7be:	a101      	add	r1, pc, #4	; (adr r1, 800d7c4 <_printf_i+0x40>)
 800d7c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d7c4:	0800d81d 	.word	0x0800d81d
 800d7c8:	0800d831 	.word	0x0800d831
 800d7cc:	0800d7ad 	.word	0x0800d7ad
 800d7d0:	0800d7ad 	.word	0x0800d7ad
 800d7d4:	0800d7ad 	.word	0x0800d7ad
 800d7d8:	0800d7ad 	.word	0x0800d7ad
 800d7dc:	0800d831 	.word	0x0800d831
 800d7e0:	0800d7ad 	.word	0x0800d7ad
 800d7e4:	0800d7ad 	.word	0x0800d7ad
 800d7e8:	0800d7ad 	.word	0x0800d7ad
 800d7ec:	0800d7ad 	.word	0x0800d7ad
 800d7f0:	0800d937 	.word	0x0800d937
 800d7f4:	0800d85d 	.word	0x0800d85d
 800d7f8:	0800d8f1 	.word	0x0800d8f1
 800d7fc:	0800d7ad 	.word	0x0800d7ad
 800d800:	0800d7ad 	.word	0x0800d7ad
 800d804:	0800d959 	.word	0x0800d959
 800d808:	0800d7ad 	.word	0x0800d7ad
 800d80c:	0800d85d 	.word	0x0800d85d
 800d810:	0800d7ad 	.word	0x0800d7ad
 800d814:	0800d7ad 	.word	0x0800d7ad
 800d818:	0800d8f9 	.word	0x0800d8f9
 800d81c:	682b      	ldr	r3, [r5, #0]
 800d81e:	1d1a      	adds	r2, r3, #4
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	602a      	str	r2, [r5, #0]
 800d824:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d828:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d82c:	2301      	movs	r3, #1
 800d82e:	e0a0      	b.n	800d972 <_printf_i+0x1ee>
 800d830:	6820      	ldr	r0, [r4, #0]
 800d832:	682b      	ldr	r3, [r5, #0]
 800d834:	0607      	lsls	r7, r0, #24
 800d836:	f103 0104 	add.w	r1, r3, #4
 800d83a:	6029      	str	r1, [r5, #0]
 800d83c:	d501      	bpl.n	800d842 <_printf_i+0xbe>
 800d83e:	681e      	ldr	r6, [r3, #0]
 800d840:	e003      	b.n	800d84a <_printf_i+0xc6>
 800d842:	0646      	lsls	r6, r0, #25
 800d844:	d5fb      	bpl.n	800d83e <_printf_i+0xba>
 800d846:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d84a:	2e00      	cmp	r6, #0
 800d84c:	da03      	bge.n	800d856 <_printf_i+0xd2>
 800d84e:	232d      	movs	r3, #45	; 0x2d
 800d850:	4276      	negs	r6, r6
 800d852:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d856:	230a      	movs	r3, #10
 800d858:	4859      	ldr	r0, [pc, #356]	; (800d9c0 <_printf_i+0x23c>)
 800d85a:	e012      	b.n	800d882 <_printf_i+0xfe>
 800d85c:	682b      	ldr	r3, [r5, #0]
 800d85e:	6820      	ldr	r0, [r4, #0]
 800d860:	1d19      	adds	r1, r3, #4
 800d862:	6029      	str	r1, [r5, #0]
 800d864:	0605      	lsls	r5, r0, #24
 800d866:	d501      	bpl.n	800d86c <_printf_i+0xe8>
 800d868:	681e      	ldr	r6, [r3, #0]
 800d86a:	e002      	b.n	800d872 <_printf_i+0xee>
 800d86c:	0641      	lsls	r1, r0, #25
 800d86e:	d5fb      	bpl.n	800d868 <_printf_i+0xe4>
 800d870:	881e      	ldrh	r6, [r3, #0]
 800d872:	2f6f      	cmp	r7, #111	; 0x6f
 800d874:	bf0c      	ite	eq
 800d876:	2308      	moveq	r3, #8
 800d878:	230a      	movne	r3, #10
 800d87a:	4851      	ldr	r0, [pc, #324]	; (800d9c0 <_printf_i+0x23c>)
 800d87c:	2100      	movs	r1, #0
 800d87e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d882:	6865      	ldr	r5, [r4, #4]
 800d884:	2d00      	cmp	r5, #0
 800d886:	bfa8      	it	ge
 800d888:	6821      	ldrge	r1, [r4, #0]
 800d88a:	60a5      	str	r5, [r4, #8]
 800d88c:	bfa4      	itt	ge
 800d88e:	f021 0104 	bicge.w	r1, r1, #4
 800d892:	6021      	strge	r1, [r4, #0]
 800d894:	b90e      	cbnz	r6, 800d89a <_printf_i+0x116>
 800d896:	2d00      	cmp	r5, #0
 800d898:	d04b      	beq.n	800d932 <_printf_i+0x1ae>
 800d89a:	4615      	mov	r5, r2
 800d89c:	fbb6 f1f3 	udiv	r1, r6, r3
 800d8a0:	fb03 6711 	mls	r7, r3, r1, r6
 800d8a4:	5dc7      	ldrb	r7, [r0, r7]
 800d8a6:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d8aa:	4637      	mov	r7, r6
 800d8ac:	42bb      	cmp	r3, r7
 800d8ae:	460e      	mov	r6, r1
 800d8b0:	d9f4      	bls.n	800d89c <_printf_i+0x118>
 800d8b2:	2b08      	cmp	r3, #8
 800d8b4:	d10b      	bne.n	800d8ce <_printf_i+0x14a>
 800d8b6:	6823      	ldr	r3, [r4, #0]
 800d8b8:	07de      	lsls	r6, r3, #31
 800d8ba:	d508      	bpl.n	800d8ce <_printf_i+0x14a>
 800d8bc:	6923      	ldr	r3, [r4, #16]
 800d8be:	6861      	ldr	r1, [r4, #4]
 800d8c0:	4299      	cmp	r1, r3
 800d8c2:	bfde      	ittt	le
 800d8c4:	2330      	movle	r3, #48	; 0x30
 800d8c6:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d8ca:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d8ce:	1b52      	subs	r2, r2, r5
 800d8d0:	6122      	str	r2, [r4, #16]
 800d8d2:	464b      	mov	r3, r9
 800d8d4:	4621      	mov	r1, r4
 800d8d6:	4640      	mov	r0, r8
 800d8d8:	f8cd a000 	str.w	sl, [sp]
 800d8dc:	aa03      	add	r2, sp, #12
 800d8de:	f7ff fedf 	bl	800d6a0 <_printf_common>
 800d8e2:	3001      	adds	r0, #1
 800d8e4:	d14a      	bne.n	800d97c <_printf_i+0x1f8>
 800d8e6:	f04f 30ff 	mov.w	r0, #4294967295
 800d8ea:	b004      	add	sp, #16
 800d8ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d8f0:	6823      	ldr	r3, [r4, #0]
 800d8f2:	f043 0320 	orr.w	r3, r3, #32
 800d8f6:	6023      	str	r3, [r4, #0]
 800d8f8:	2778      	movs	r7, #120	; 0x78
 800d8fa:	4832      	ldr	r0, [pc, #200]	; (800d9c4 <_printf_i+0x240>)
 800d8fc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d900:	6823      	ldr	r3, [r4, #0]
 800d902:	6829      	ldr	r1, [r5, #0]
 800d904:	061f      	lsls	r7, r3, #24
 800d906:	f851 6b04 	ldr.w	r6, [r1], #4
 800d90a:	d402      	bmi.n	800d912 <_printf_i+0x18e>
 800d90c:	065f      	lsls	r7, r3, #25
 800d90e:	bf48      	it	mi
 800d910:	b2b6      	uxthmi	r6, r6
 800d912:	07df      	lsls	r7, r3, #31
 800d914:	bf48      	it	mi
 800d916:	f043 0320 	orrmi.w	r3, r3, #32
 800d91a:	6029      	str	r1, [r5, #0]
 800d91c:	bf48      	it	mi
 800d91e:	6023      	strmi	r3, [r4, #0]
 800d920:	b91e      	cbnz	r6, 800d92a <_printf_i+0x1a6>
 800d922:	6823      	ldr	r3, [r4, #0]
 800d924:	f023 0320 	bic.w	r3, r3, #32
 800d928:	6023      	str	r3, [r4, #0]
 800d92a:	2310      	movs	r3, #16
 800d92c:	e7a6      	b.n	800d87c <_printf_i+0xf8>
 800d92e:	4824      	ldr	r0, [pc, #144]	; (800d9c0 <_printf_i+0x23c>)
 800d930:	e7e4      	b.n	800d8fc <_printf_i+0x178>
 800d932:	4615      	mov	r5, r2
 800d934:	e7bd      	b.n	800d8b2 <_printf_i+0x12e>
 800d936:	682b      	ldr	r3, [r5, #0]
 800d938:	6826      	ldr	r6, [r4, #0]
 800d93a:	1d18      	adds	r0, r3, #4
 800d93c:	6961      	ldr	r1, [r4, #20]
 800d93e:	6028      	str	r0, [r5, #0]
 800d940:	0635      	lsls	r5, r6, #24
 800d942:	681b      	ldr	r3, [r3, #0]
 800d944:	d501      	bpl.n	800d94a <_printf_i+0x1c6>
 800d946:	6019      	str	r1, [r3, #0]
 800d948:	e002      	b.n	800d950 <_printf_i+0x1cc>
 800d94a:	0670      	lsls	r0, r6, #25
 800d94c:	d5fb      	bpl.n	800d946 <_printf_i+0x1c2>
 800d94e:	8019      	strh	r1, [r3, #0]
 800d950:	2300      	movs	r3, #0
 800d952:	4615      	mov	r5, r2
 800d954:	6123      	str	r3, [r4, #16]
 800d956:	e7bc      	b.n	800d8d2 <_printf_i+0x14e>
 800d958:	682b      	ldr	r3, [r5, #0]
 800d95a:	2100      	movs	r1, #0
 800d95c:	1d1a      	adds	r2, r3, #4
 800d95e:	602a      	str	r2, [r5, #0]
 800d960:	681d      	ldr	r5, [r3, #0]
 800d962:	6862      	ldr	r2, [r4, #4]
 800d964:	4628      	mov	r0, r5
 800d966:	f000 f849 	bl	800d9fc <memchr>
 800d96a:	b108      	cbz	r0, 800d970 <_printf_i+0x1ec>
 800d96c:	1b40      	subs	r0, r0, r5
 800d96e:	6060      	str	r0, [r4, #4]
 800d970:	6863      	ldr	r3, [r4, #4]
 800d972:	6123      	str	r3, [r4, #16]
 800d974:	2300      	movs	r3, #0
 800d976:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d97a:	e7aa      	b.n	800d8d2 <_printf_i+0x14e>
 800d97c:	462a      	mov	r2, r5
 800d97e:	4649      	mov	r1, r9
 800d980:	4640      	mov	r0, r8
 800d982:	6923      	ldr	r3, [r4, #16]
 800d984:	47d0      	blx	sl
 800d986:	3001      	adds	r0, #1
 800d988:	d0ad      	beq.n	800d8e6 <_printf_i+0x162>
 800d98a:	6823      	ldr	r3, [r4, #0]
 800d98c:	079b      	lsls	r3, r3, #30
 800d98e:	d413      	bmi.n	800d9b8 <_printf_i+0x234>
 800d990:	68e0      	ldr	r0, [r4, #12]
 800d992:	9b03      	ldr	r3, [sp, #12]
 800d994:	4298      	cmp	r0, r3
 800d996:	bfb8      	it	lt
 800d998:	4618      	movlt	r0, r3
 800d99a:	e7a6      	b.n	800d8ea <_printf_i+0x166>
 800d99c:	2301      	movs	r3, #1
 800d99e:	4632      	mov	r2, r6
 800d9a0:	4649      	mov	r1, r9
 800d9a2:	4640      	mov	r0, r8
 800d9a4:	47d0      	blx	sl
 800d9a6:	3001      	adds	r0, #1
 800d9a8:	d09d      	beq.n	800d8e6 <_printf_i+0x162>
 800d9aa:	3501      	adds	r5, #1
 800d9ac:	68e3      	ldr	r3, [r4, #12]
 800d9ae:	9903      	ldr	r1, [sp, #12]
 800d9b0:	1a5b      	subs	r3, r3, r1
 800d9b2:	42ab      	cmp	r3, r5
 800d9b4:	dcf2      	bgt.n	800d99c <_printf_i+0x218>
 800d9b6:	e7eb      	b.n	800d990 <_printf_i+0x20c>
 800d9b8:	2500      	movs	r5, #0
 800d9ba:	f104 0619 	add.w	r6, r4, #25
 800d9be:	e7f5      	b.n	800d9ac <_printf_i+0x228>
 800d9c0:	0800e99c 	.word	0x0800e99c
 800d9c4:	0800e9ad 	.word	0x0800e9ad

0800d9c8 <memmove>:
 800d9c8:	4288      	cmp	r0, r1
 800d9ca:	b510      	push	{r4, lr}
 800d9cc:	eb01 0402 	add.w	r4, r1, r2
 800d9d0:	d902      	bls.n	800d9d8 <memmove+0x10>
 800d9d2:	4284      	cmp	r4, r0
 800d9d4:	4623      	mov	r3, r4
 800d9d6:	d807      	bhi.n	800d9e8 <memmove+0x20>
 800d9d8:	1e43      	subs	r3, r0, #1
 800d9da:	42a1      	cmp	r1, r4
 800d9dc:	d008      	beq.n	800d9f0 <memmove+0x28>
 800d9de:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d9e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d9e6:	e7f8      	b.n	800d9da <memmove+0x12>
 800d9e8:	4601      	mov	r1, r0
 800d9ea:	4402      	add	r2, r0
 800d9ec:	428a      	cmp	r2, r1
 800d9ee:	d100      	bne.n	800d9f2 <memmove+0x2a>
 800d9f0:	bd10      	pop	{r4, pc}
 800d9f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d9f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d9fa:	e7f7      	b.n	800d9ec <memmove+0x24>

0800d9fc <memchr>:
 800d9fc:	4603      	mov	r3, r0
 800d9fe:	b510      	push	{r4, lr}
 800da00:	b2c9      	uxtb	r1, r1
 800da02:	4402      	add	r2, r0
 800da04:	4293      	cmp	r3, r2
 800da06:	4618      	mov	r0, r3
 800da08:	d101      	bne.n	800da0e <memchr+0x12>
 800da0a:	2000      	movs	r0, #0
 800da0c:	e003      	b.n	800da16 <memchr+0x1a>
 800da0e:	7804      	ldrb	r4, [r0, #0]
 800da10:	3301      	adds	r3, #1
 800da12:	428c      	cmp	r4, r1
 800da14:	d1f6      	bne.n	800da04 <memchr+0x8>
 800da16:	bd10      	pop	{r4, pc}

0800da18 <memcpy>:
 800da18:	440a      	add	r2, r1
 800da1a:	4291      	cmp	r1, r2
 800da1c:	f100 33ff 	add.w	r3, r0, #4294967295
 800da20:	d100      	bne.n	800da24 <memcpy+0xc>
 800da22:	4770      	bx	lr
 800da24:	b510      	push	{r4, lr}
 800da26:	f811 4b01 	ldrb.w	r4, [r1], #1
 800da2a:	4291      	cmp	r1, r2
 800da2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800da30:	d1f9      	bne.n	800da26 <memcpy+0xe>
 800da32:	bd10      	pop	{r4, pc}

0800da34 <_realloc_r>:
 800da34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da38:	4680      	mov	r8, r0
 800da3a:	4614      	mov	r4, r2
 800da3c:	460e      	mov	r6, r1
 800da3e:	b921      	cbnz	r1, 800da4a <_realloc_r+0x16>
 800da40:	4611      	mov	r1, r2
 800da42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da46:	f7ff bb41 	b.w	800d0cc <_malloc_r>
 800da4a:	b92a      	cbnz	r2, 800da58 <_realloc_r+0x24>
 800da4c:	f7ff fc88 	bl	800d360 <_free_r>
 800da50:	4625      	mov	r5, r4
 800da52:	4628      	mov	r0, r5
 800da54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da58:	f000 f81b 	bl	800da92 <_malloc_usable_size_r>
 800da5c:	4284      	cmp	r4, r0
 800da5e:	4607      	mov	r7, r0
 800da60:	d802      	bhi.n	800da68 <_realloc_r+0x34>
 800da62:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800da66:	d812      	bhi.n	800da8e <_realloc_r+0x5a>
 800da68:	4621      	mov	r1, r4
 800da6a:	4640      	mov	r0, r8
 800da6c:	f7ff fb2e 	bl	800d0cc <_malloc_r>
 800da70:	4605      	mov	r5, r0
 800da72:	2800      	cmp	r0, #0
 800da74:	d0ed      	beq.n	800da52 <_realloc_r+0x1e>
 800da76:	42bc      	cmp	r4, r7
 800da78:	4622      	mov	r2, r4
 800da7a:	4631      	mov	r1, r6
 800da7c:	bf28      	it	cs
 800da7e:	463a      	movcs	r2, r7
 800da80:	f7ff ffca 	bl	800da18 <memcpy>
 800da84:	4631      	mov	r1, r6
 800da86:	4640      	mov	r0, r8
 800da88:	f7ff fc6a 	bl	800d360 <_free_r>
 800da8c:	e7e1      	b.n	800da52 <_realloc_r+0x1e>
 800da8e:	4635      	mov	r5, r6
 800da90:	e7df      	b.n	800da52 <_realloc_r+0x1e>

0800da92 <_malloc_usable_size_r>:
 800da92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800da96:	1f18      	subs	r0, r3, #4
 800da98:	2b00      	cmp	r3, #0
 800da9a:	bfbc      	itt	lt
 800da9c:	580b      	ldrlt	r3, [r1, r0]
 800da9e:	18c0      	addlt	r0, r0, r3
 800daa0:	4770      	bx	lr
	...

0800daa4 <_init>:
 800daa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800daa6:	bf00      	nop
 800daa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800daaa:	bc08      	pop	{r3}
 800daac:	469e      	mov	lr, r3
 800daae:	4770      	bx	lr

0800dab0 <_fini>:
 800dab0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dab2:	bf00      	nop
 800dab4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dab6:	bc08      	pop	{r3}
 800dab8:	469e      	mov	lr, r3
 800daba:	4770      	bx	lr
