
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d368  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f04  0800d54c  0800d54c  0001d54c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e450  0800e450  00020a10  2**0
                  CONTENTS
  4 .ARM          00000000  0800e450  0800e450  00020a10  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800e450  0800e450  00020a10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e450  0800e450  0001e450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e454  0800e454  0001e454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a10  20000000  0800e458  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000061c  20000a10  0800ee68  00020a10  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000102c  0800ee68  0002102c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020a10  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020a39  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013585  00000000  00000000  00020a7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026c3  00000000  00000000  00034001  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011a8  00000000  00000000  000366c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000dfa  00000000  00000000  00037870  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001aef6  00000000  00000000  0003866a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018887  00000000  00000000  00053560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009fce6  00000000  00000000  0006bde7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005198  00000000  00000000  0010bad0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00110c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	20000a10 	.word	0x20000a10
 8000200:	00000000 	.word	0x00000000
 8000204:	0800d534 	.word	0x0800d534

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	20000a14 	.word	0x20000a14
 8000220:	0800d534 	.word	0x0800d534

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <sendMachineData>:
	sprintf(bufferTX, "%s", str);
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
	HAL_Delay(2000);
}

void sendMachineData(UART_HandleTypeDef *huart1, const char *machineID, const char *machineData) {
 8000234:	b580      	push	{r7, lr}
 8000236:	b0c6      	sub	sp, #280	; 0x118
 8000238:	af02      	add	r7, sp, #8
 800023a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800023e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000242:	6018      	str	r0, [r3, #0]
 8000244:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000248:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800024c:	6019      	str	r1, [r3, #0]
 800024e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000252:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8000256:	601a      	str	r2, [r3, #0]
	char local_txA[200];
	char local_txB[50];
	int len;

	sprintf(bufferTX, "AT+CIPSTART=\"TCP\",\"%s\",3000\r\n", Server);
 8000258:	4a31      	ldr	r2, [pc, #196]	; (8000320 <sendMachineData+0xec>)
 800025a:	4932      	ldr	r1, [pc, #200]	; (8000324 <sendMachineData+0xf0>)
 800025c:	4832      	ldr	r0, [pc, #200]	; (8000328 <sendMachineData+0xf4>)
 800025e:	f00c fd4b 	bl	800ccf8 <siprintf>
	HAL_UART_Transmit_IT(huart1, (uint8_t*) bufferTX, strlen(bufferTX));
 8000262:	4831      	ldr	r0, [pc, #196]	; (8000328 <sendMachineData+0xf4>)
 8000264:	f7ff ffde 	bl	8000224 <strlen>
 8000268:	4603      	mov	r3, r0
 800026a:	b29a      	uxth	r2, r3
 800026c:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000270:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000274:	492c      	ldr	r1, [pc, #176]	; (8000328 <sendMachineData+0xf4>)
 8000276:	6818      	ldr	r0, [r3, #0]
 8000278:	f00b ff16 	bl	800c0a8 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 800027c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000280:	f008 fe46 	bl	8008f10 <HAL_Delay>

	sprintf(local_txA,
 8000284:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000288:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800028c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8000290:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8000294:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8000298:	4924      	ldr	r1, [pc, #144]	; (800032c <sendMachineData+0xf8>)
 800029a:	9100      	str	r1, [sp, #0]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	6812      	ldr	r2, [r2, #0]
 80002a0:	4923      	ldr	r1, [pc, #140]	; (8000330 <sendMachineData+0xfc>)
 80002a2:	f00c fd29 	bl	800ccf8 <siprintf>
			"GET /api/machine/updateMachineDataRaw?machineID=%s&machineData=%s HTTP/1.0\r\nHost: %s\r\n\r\n", machineID, machineData, Server2);
	len = strlen(local_txA);
 80002a6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80002aa:	4618      	mov	r0, r3
 80002ac:	f7ff ffba 	bl	8000224 <strlen>
 80002b0:	4603      	mov	r3, r0
 80002b2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	sprintf(local_txB, "AT+CIPSEND=%d\r\n", len);
 80002b6:	f107 0310 	add.w	r3, r7, #16
 80002ba:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80002be:	491d      	ldr	r1, [pc, #116]	; (8000334 <sendMachineData+0x100>)
 80002c0:	4618      	mov	r0, r3
 80002c2:	f00c fd19 	bl	800ccf8 <siprintf>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txB, strlen(local_txB));
 80002c6:	f107 0310 	add.w	r3, r7, #16
 80002ca:	4618      	mov	r0, r3
 80002cc:	f7ff ffaa 	bl	8000224 <strlen>
 80002d0:	4603      	mov	r3, r0
 80002d2:	b29a      	uxth	r2, r3
 80002d4:	f107 0110 	add.w	r1, r7, #16
 80002d8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80002dc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80002e0:	6818      	ldr	r0, [r3, #0]
 80002e2:	f00b fee1 	bl	800c0a8 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 80002e6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80002ea:	f008 fe11 	bl	8008f10 <HAL_Delay>

	HAL_UART_Transmit_IT(huart1, (uint8_t*) local_txA, strlen(local_txA));
 80002ee:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80002f2:	4618      	mov	r0, r3
 80002f4:	f7ff ff96 	bl	8000224 <strlen>
 80002f8:	4603      	mov	r3, r0
 80002fa:	b29a      	uxth	r2, r3
 80002fc:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8000300:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8000304:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8000308:	6818      	ldr	r0, [r3, #0]
 800030a:	f00b fecd 	bl	800c0a8 <HAL_UART_Transmit_IT>
	HAL_Delay(2000);
 800030e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000312:	f008 fdfd 	bl	8008f10 <HAL_Delay>
}
 8000316:	bf00      	nop
 8000318:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800031c:	46bd      	mov	sp, r7
 800031e:	bd80      	pop	{r7, pc}
 8000320:	0800d598 	.word	0x0800d598
 8000324:	0800d5a8 	.word	0x0800d5a8
 8000328:	20000a2c 	.word	0x20000a2c
 800032c:	0800d624 	.word	0x0800d624
 8000330:	0800d5c8 	.word	0x0800d5c8
 8000334:	0800d638 	.word	0x0800d638

08000338 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 8000338:	b580      	push	{r7, lr}
 800033a:	b086      	sub	sp, #24
 800033c:	af02      	add	r7, sp, #8
 800033e:	4603      	mov	r3, r0
 8000340:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000342:	79fb      	ldrb	r3, [r7, #7]
 8000344:	f023 030f 	bic.w	r3, r3, #15
 8000348:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 800034a:	79fb      	ldrb	r3, [r7, #7]
 800034c:	011b      	lsls	r3, r3, #4
 800034e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000350:	7b7b      	ldrb	r3, [r7, #13]
 8000352:	f043 030c 	orr.w	r3, r3, #12
 8000356:	b2db      	uxtb	r3, r3
 8000358:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 800035a:	7b7b      	ldrb	r3, [r7, #13]
 800035c:	f043 0308 	orr.w	r3, r3, #8
 8000360:	b2db      	uxtb	r3, r3
 8000362:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000364:	7b3b      	ldrb	r3, [r7, #12]
 8000366:	f043 030c 	orr.w	r3, r3, #12
 800036a:	b2db      	uxtb	r3, r3
 800036c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800036e:	7b3b      	ldrb	r3, [r7, #12]
 8000370:	f043 0308 	orr.w	r3, r3, #8
 8000374:	b2db      	uxtb	r3, r3
 8000376:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8000378:	bf00      	nop
 800037a:	4825      	ldr	r0, [pc, #148]	; (8000410 <lcd_send_cmd+0xd8>)
 800037c:	f00a f9c1 	bl	800a702 <HAL_I2C_GetError>
 8000380:	4603      	mov	r3, r0
 8000382:	2b04      	cmp	r3, #4
 8000384:	d0f9      	beq.n	800037a <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000386:	bf00      	nop
 8000388:	4821      	ldr	r0, [pc, #132]	; (8000410 <lcd_send_cmd+0xd8>)
 800038a:	f00a f9ad 	bl	800a6e8 <HAL_I2C_GetState>
 800038e:	4603      	mov	r3, r0
 8000390:	2b20      	cmp	r3, #32
 8000392:	d1f9      	bne.n	8000388 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8000394:	4b1f      	ldr	r3, [pc, #124]	; (8000414 <lcd_send_cmd+0xdc>)
 8000396:	781b      	ldrb	r3, [r3, #0]
 8000398:	2b00      	cmp	r3, #0
 800039a:	d116      	bne.n	80003ca <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 800039c:	2300      	movs	r3, #0
 800039e:	73fb      	strb	r3, [r7, #15]
 80003a0:	e00f      	b.n	80003c2 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 80003a2:	7bfb      	ldrb	r3, [r7, #15]
 80003a4:	3310      	adds	r3, #16
 80003a6:	443b      	add	r3, r7
 80003a8:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80003ac:	7bfb      	ldrb	r3, [r7, #15]
 80003ae:	f022 0208 	bic.w	r2, r2, #8
 80003b2:	b2d2      	uxtb	r2, r2
 80003b4:	3310      	adds	r3, #16
 80003b6:	443b      	add	r3, r7
 80003b8:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80003bc:	7bfb      	ldrb	r3, [r7, #15]
 80003be:	3301      	adds	r3, #1
 80003c0:	73fb      	strb	r3, [r7, #15]
 80003c2:	7bfb      	ldrb	r3, [r7, #15]
 80003c4:	2b03      	cmp	r3, #3
 80003c6:	d9ec      	bls.n	80003a2 <lcd_send_cmd+0x6a>
 80003c8:	e015      	b.n	80003f6 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80003ca:	2300      	movs	r3, #0
 80003cc:	73bb      	strb	r3, [r7, #14]
 80003ce:	e00f      	b.n	80003f0 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 80003d0:	7bbb      	ldrb	r3, [r7, #14]
 80003d2:	3310      	adds	r3, #16
 80003d4:	443b      	add	r3, r7
 80003d6:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80003da:	7bbb      	ldrb	r3, [r7, #14]
 80003dc:	f042 0208 	orr.w	r2, r2, #8
 80003e0:	b2d2      	uxtb	r2, r2
 80003e2:	3310      	adds	r3, #16
 80003e4:	443b      	add	r3, r7
 80003e6:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80003ea:	7bbb      	ldrb	r3, [r7, #14]
 80003ec:	3301      	adds	r3, #1
 80003ee:	73bb      	strb	r3, [r7, #14]
 80003f0:	7bbb      	ldrb	r3, [r7, #14]
 80003f2:	2b03      	cmp	r3, #3
 80003f4:	d9ec      	bls.n	80003d0 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80003f6:	f107 0208 	add.w	r2, r7, #8
 80003fa:	2364      	movs	r3, #100	; 0x64
 80003fc:	9300      	str	r3, [sp, #0]
 80003fe:	2304      	movs	r3, #4
 8000400:	214e      	movs	r1, #78	; 0x4e
 8000402:	4803      	ldr	r0, [pc, #12]	; (8000410 <lcd_send_cmd+0xd8>)
 8000404:	f009 fd10 	bl	8009e28 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000408:	bf00      	nop
 800040a:	3710      	adds	r7, #16
 800040c:	46bd      	mov	sp, r7
 800040e:	bd80      	pop	{r7, pc}
 8000410:	20000df8 	.word	0x20000df8
 8000414:	20000b26 	.word	0x20000b26

08000418 <lcd_send_data>:

void lcd_send_data (char data) {
 8000418:	b580      	push	{r7, lr}
 800041a:	b086      	sub	sp, #24
 800041c:	af02      	add	r7, sp, #8
 800041e:	4603      	mov	r3, r0
 8000420:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000422:	79fb      	ldrb	r3, [r7, #7]
 8000424:	f023 030f 	bic.w	r3, r3, #15
 8000428:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 800042a:	79fb      	ldrb	r3, [r7, #7]
 800042c:	011b      	lsls	r3, r3, #4
 800042e:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000430:	7b7b      	ldrb	r3, [r7, #13]
 8000432:	f043 030d 	orr.w	r3, r3, #13
 8000436:	b2db      	uxtb	r3, r3
 8000438:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 800043a:	7b7b      	ldrb	r3, [r7, #13]
 800043c:	f043 0309 	orr.w	r3, r3, #9
 8000440:	b2db      	uxtb	r3, r3
 8000442:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000444:	7b3b      	ldrb	r3, [r7, #12]
 8000446:	f043 030d 	orr.w	r3, r3, #13
 800044a:	b2db      	uxtb	r3, r3
 800044c:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 800044e:	7b3b      	ldrb	r3, [r7, #12]
 8000450:	f043 0309 	orr.w	r3, r3, #9
 8000454:	b2db      	uxtb	r3, r3
 8000456:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8000458:	bf00      	nop
 800045a:	4825      	ldr	r0, [pc, #148]	; (80004f0 <lcd_send_data+0xd8>)
 800045c:	f00a f951 	bl	800a702 <HAL_I2C_GetError>
 8000460:	4603      	mov	r3, r0
 8000462:	2b04      	cmp	r3, #4
 8000464:	d0f9      	beq.n	800045a <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000466:	bf00      	nop
 8000468:	4821      	ldr	r0, [pc, #132]	; (80004f0 <lcd_send_data+0xd8>)
 800046a:	f00a f93d 	bl	800a6e8 <HAL_I2C_GetState>
 800046e:	4603      	mov	r3, r0
 8000470:	2b20      	cmp	r3, #32
 8000472:	d1f9      	bne.n	8000468 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 8000474:	4b1f      	ldr	r3, [pc, #124]	; (80004f4 <lcd_send_data+0xdc>)
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d116      	bne.n	80004aa <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 800047c:	2300      	movs	r3, #0
 800047e:	73fb      	strb	r3, [r7, #15]
 8000480:	e00f      	b.n	80004a2 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 8000482:	7bfb      	ldrb	r3, [r7, #15]
 8000484:	3310      	adds	r3, #16
 8000486:	443b      	add	r3, r7
 8000488:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800048c:	7bfb      	ldrb	r3, [r7, #15]
 800048e:	f022 0208 	bic.w	r2, r2, #8
 8000492:	b2d2      	uxtb	r2, r2
 8000494:	3310      	adds	r3, #16
 8000496:	443b      	add	r3, r7
 8000498:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800049c:	7bfb      	ldrb	r3, [r7, #15]
 800049e:	3301      	adds	r3, #1
 80004a0:	73fb      	strb	r3, [r7, #15]
 80004a2:	7bfb      	ldrb	r3, [r7, #15]
 80004a4:	2b03      	cmp	r3, #3
 80004a6:	d9ec      	bls.n	8000482 <lcd_send_data+0x6a>
 80004a8:	e015      	b.n	80004d6 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 80004aa:	2300      	movs	r3, #0
 80004ac:	73bb      	strb	r3, [r7, #14]
 80004ae:	e00f      	b.n	80004d0 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 80004b0:	7bbb      	ldrb	r3, [r7, #14]
 80004b2:	3310      	adds	r3, #16
 80004b4:	443b      	add	r3, r7
 80004b6:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80004ba:	7bbb      	ldrb	r3, [r7, #14]
 80004bc:	f042 0208 	orr.w	r2, r2, #8
 80004c0:	b2d2      	uxtb	r2, r2
 80004c2:	3310      	adds	r3, #16
 80004c4:	443b      	add	r3, r7
 80004c6:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 80004ca:	7bbb      	ldrb	r3, [r7, #14]
 80004cc:	3301      	adds	r3, #1
 80004ce:	73bb      	strb	r3, [r7, #14]
 80004d0:	7bbb      	ldrb	r3, [r7, #14]
 80004d2:	2b03      	cmp	r3, #3
 80004d4:	d9ec      	bls.n	80004b0 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 80004d6:	f107 0208 	add.w	r2, r7, #8
 80004da:	2364      	movs	r3, #100	; 0x64
 80004dc:	9300      	str	r3, [sp, #0]
 80004de:	2304      	movs	r3, #4
 80004e0:	214e      	movs	r1, #78	; 0x4e
 80004e2:	4803      	ldr	r0, [pc, #12]	; (80004f0 <lcd_send_data+0xd8>)
 80004e4:	f009 fca0 	bl	8009e28 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 80004e8:	bf00      	nop
 80004ea:	3710      	adds	r7, #16
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}
 80004f0:	20000df8 	.word	0x20000df8
 80004f4:	20000b26 	.word	0x20000b26

080004f8 <lcd_send_string>:

void lcd_send_string (char *str) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b082      	sub	sp, #8
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	6078      	str	r0, [r7, #4]
	while (*str) {
 8000500:	e006      	b.n	8000510 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	1c5a      	adds	r2, r3, #1
 8000506:	607a      	str	r2, [r7, #4]
 8000508:	781b      	ldrb	r3, [r3, #0]
 800050a:	4618      	mov	r0, r3
 800050c:	f7ff ff84 	bl	8000418 <lcd_send_data>
	while (*str) {
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	2b00      	cmp	r3, #0
 8000516:	d1f4      	bne.n	8000502 <lcd_send_string+0xa>
	}
}
 8000518:	bf00      	nop
 800051a:	bf00      	nop
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
	...

08000524 <lcd_send_char>:

void lcd_send_char(char ch) {
 8000524:	b580      	push	{r7, lr}
 8000526:	b086      	sub	sp, #24
 8000528:	af02      	add	r7, sp, #8
 800052a:	4603      	mov	r3, r0
 800052c:	71fb      	strb	r3, [r7, #7]
    char data_u, data_l;
    uint8_t data_t[4];
    data_u = (ch & 0xf0);
 800052e:	79fb      	ldrb	r3, [r7, #7]
 8000530:	f023 030f 	bic.w	r3, r3, #15
 8000534:	737b      	strb	r3, [r7, #13]
    data_l = ((ch << 4) & 0xf0);
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	011b      	lsls	r3, r3, #4
 800053a:	733b      	strb	r3, [r7, #12]
    data_t[0] = data_u | 0x0D;  //en=1, rs=1
 800053c:	7b7b      	ldrb	r3, [r7, #13]
 800053e:	f043 030d 	orr.w	r3, r3, #13
 8000542:	b2db      	uxtb	r3, r3
 8000544:	723b      	strb	r3, [r7, #8]
    data_t[1] = data_u | 0x09;  //en=0, rs=1
 8000546:	7b7b      	ldrb	r3, [r7, #13]
 8000548:	f043 0309 	orr.w	r3, r3, #9
 800054c:	b2db      	uxtb	r3, r3
 800054e:	727b      	strb	r3, [r7, #9]
    data_t[2] = data_l | 0x0D;  //en=1, rs=1
 8000550:	7b3b      	ldrb	r3, [r7, #12]
 8000552:	f043 030d 	orr.w	r3, r3, #13
 8000556:	b2db      	uxtb	r3, r3
 8000558:	72bb      	strb	r3, [r7, #10]
    data_t[3] = data_l | 0x09;  //en=0, rs=1
 800055a:	7b3b      	ldrb	r3, [r7, #12]
 800055c:	f043 0309 	orr.w	r3, r3, #9
 8000560:	b2db      	uxtb	r3, r3
 8000562:	72fb      	strb	r3, [r7, #11]

    while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 8000564:	bf00      	nop
 8000566:	4825      	ldr	r0, [pc, #148]	; (80005fc <lcd_send_char+0xd8>)
 8000568:	f00a f8cb 	bl	800a702 <HAL_I2C_GetError>
 800056c:	4603      	mov	r3, r0
 800056e:	2b04      	cmp	r3, #4
 8000570:	d0f9      	beq.n	8000566 <lcd_send_char+0x42>
    while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000572:	bf00      	nop
 8000574:	4821      	ldr	r0, [pc, #132]	; (80005fc <lcd_send_char+0xd8>)
 8000576:	f00a f8b7 	bl	800a6e8 <HAL_I2C_GetState>
 800057a:	4603      	mov	r3, r0
 800057c:	2b20      	cmp	r3, #32
 800057e:	d1f9      	bne.n	8000574 <lcd_send_char+0x50>

    if(LCD_BACKLIGHT == 0) {
 8000580:	4b1f      	ldr	r3, [pc, #124]	; (8000600 <lcd_send_char+0xdc>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	2b00      	cmp	r3, #0
 8000586:	d116      	bne.n	80005b6 <lcd_send_char+0x92>
        for(uint8_t i = 0; i <= 3; i++) {
 8000588:	2300      	movs	r3, #0
 800058a:	73fb      	strb	r3, [r7, #15]
 800058c:	e00f      	b.n	80005ae <lcd_send_char+0x8a>
            data_t[i] &= ~(1UL << 3);
 800058e:	7bfb      	ldrb	r3, [r7, #15]
 8000590:	3310      	adds	r3, #16
 8000592:	443b      	add	r3, r7
 8000594:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 8000598:	7bfb      	ldrb	r3, [r7, #15]
 800059a:	f022 0208 	bic.w	r2, r2, #8
 800059e:	b2d2      	uxtb	r2, r2
 80005a0:	3310      	adds	r3, #16
 80005a2:	443b      	add	r3, r7
 80005a4:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80005a8:	7bfb      	ldrb	r3, [r7, #15]
 80005aa:	3301      	adds	r3, #1
 80005ac:	73fb      	strb	r3, [r7, #15]
 80005ae:	7bfb      	ldrb	r3, [r7, #15]
 80005b0:	2b03      	cmp	r3, #3
 80005b2:	d9ec      	bls.n	800058e <lcd_send_char+0x6a>
 80005b4:	e015      	b.n	80005e2 <lcd_send_char+0xbe>
        }
    } else {
        for(uint8_t i = 0; i <= 3; i++) {
 80005b6:	2300      	movs	r3, #0
 80005b8:	73bb      	strb	r3, [r7, #14]
 80005ba:	e00f      	b.n	80005dc <lcd_send_char+0xb8>
            data_t[i] |= 1UL << 3;
 80005bc:	7bbb      	ldrb	r3, [r7, #14]
 80005be:	3310      	adds	r3, #16
 80005c0:	443b      	add	r3, r7
 80005c2:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 80005c6:	7bbb      	ldrb	r3, [r7, #14]
 80005c8:	f042 0208 	orr.w	r2, r2, #8
 80005cc:	b2d2      	uxtb	r2, r2
 80005ce:	3310      	adds	r3, #16
 80005d0:	443b      	add	r3, r7
 80005d2:	f803 2c08 	strb.w	r2, [r3, #-8]
        for(uint8_t i = 0; i <= 3; i++) {
 80005d6:	7bbb      	ldrb	r3, [r7, #14]
 80005d8:	3301      	adds	r3, #1
 80005da:	73bb      	strb	r3, [r7, #14]
 80005dc:	7bbb      	ldrb	r3, [r7, #14]
 80005de:	2b03      	cmp	r3, #3
 80005e0:	d9ec      	bls.n	80005bc <lcd_send_char+0x98>
        }
    }

    HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD, (uint8_t *)data_t, 4, 100);
 80005e2:	f107 0208 	add.w	r2, r7, #8
 80005e6:	2364      	movs	r3, #100	; 0x64
 80005e8:	9300      	str	r3, [sp, #0]
 80005ea:	2304      	movs	r3, #4
 80005ec:	214e      	movs	r1, #78	; 0x4e
 80005ee:	4803      	ldr	r0, [pc, #12]	; (80005fc <lcd_send_char+0xd8>)
 80005f0:	f009 fc1a 	bl	8009e28 <HAL_I2C_Master_Transmit>
}
 80005f4:	bf00      	nop
 80005f6:	3710      	adds	r7, #16
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	20000df8 	.word	0x20000df8
 8000600:	20000b26 	.word	0x20000b26

08000604 <lcd_init>:

void lcd_init (void) {
 8000604:	b580      	push	{r7, lr}
 8000606:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 8000608:	2002      	movs	r0, #2
 800060a:	f7ff fe95 	bl	8000338 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 800060e:	2028      	movs	r0, #40	; 0x28
 8000610:	f7ff fe92 	bl	8000338 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 8000614:	200c      	movs	r0, #12
 8000616:	f7ff fe8f 	bl	8000338 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 800061a:	2080      	movs	r0, #128	; 0x80
 800061c:	f7ff fe8c 	bl	8000338 <lcd_send_cmd>
	lcd_backlight(1);
 8000620:	2001      	movs	r0, #1
 8000622:	f000 f86d 	bl	8000700 <lcd_backlight>
}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}

0800062a <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 800062a:	b580      	push	{r7, lr}
 800062c:	b082      	sub	sp, #8
 800062e:	af00      	add	r7, sp, #0
 8000630:	4603      	mov	r3, r0
 8000632:	460a      	mov	r2, r1
 8000634:	71fb      	strb	r3, [r7, #7]
 8000636:	4613      	mov	r3, r2
 8000638:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	2b01      	cmp	r3, #1
 800063e:	d106      	bne.n	800064e <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 8000640:	79bb      	ldrb	r3, [r7, #6]
 8000642:	337f      	adds	r3, #127	; 0x7f
 8000644:	b2db      	uxtb	r3, r3
 8000646:	4618      	mov	r0, r3
 8000648:	f7ff fe76 	bl	8000338 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 800064c:	e008      	b.n	8000660 <lcd_gotoxy+0x36>
	} else if(row == 2) {
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	2b02      	cmp	r3, #2
 8000652:	d105      	bne.n	8000660 <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 8000654:	79bb      	ldrb	r3, [r7, #6]
 8000656:	3b41      	subs	r3, #65	; 0x41
 8000658:	b2db      	uxtb	r3, r3
 800065a:	4618      	mov	r0, r3
 800065c:	f7ff fe6c 	bl	8000338 <lcd_send_cmd>
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	603a      	str	r2, [r7, #0]
 8000672:	71fb      	strb	r3, [r7, #7]
 8000674:	460b      	mov	r3, r1
 8000676:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8000678:	79ba      	ldrb	r2, [r7, #6]
 800067a:	79fb      	ldrb	r3, [r7, #7]
 800067c:	4611      	mov	r1, r2
 800067e:	4618      	mov	r0, r3
 8000680:	f7ff ffd3 	bl	800062a <lcd_gotoxy>
	lcd_send_string(str);
 8000684:	6838      	ldr	r0, [r7, #0]
 8000686:	f7ff ff37 	bl	80004f8 <lcd_send_string>
}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}

08000692 <lcd_print_char>:

void lcd_print_char(unsigned char row, unsigned char column, char ch) {
 8000692:	b580      	push	{r7, lr}
 8000694:	b082      	sub	sp, #8
 8000696:	af00      	add	r7, sp, #0
 8000698:	4603      	mov	r3, r0
 800069a:	71fb      	strb	r3, [r7, #7]
 800069c:	460b      	mov	r3, r1
 800069e:	71bb      	strb	r3, [r7, #6]
 80006a0:	4613      	mov	r3, r2
 80006a2:	717b      	strb	r3, [r7, #5]
    lcd_gotoxy(row, column);
 80006a4:	79ba      	ldrb	r2, [r7, #6]
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	4611      	mov	r1, r2
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff ffbd 	bl	800062a <lcd_gotoxy>
    lcd_send_char(ch);
 80006b0:	797b      	ldrb	r3, [r7, #5]
 80006b2:	4618      	mov	r0, r3
 80006b4:	f7ff ff36 	bl	8000524 <lcd_send_char>
}
 80006b8:	bf00      	nop
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}

080006c0 <lcd_clear>:

void lcd_clear(void) {
 80006c0:	b580      	push	{r7, lr}
 80006c2:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 80006c4:	2001      	movs	r0, #1
 80006c6:	f7ff fe37 	bl	8000338 <lcd_send_cmd>
    HAL_Delay(2);
 80006ca:	2002      	movs	r0, #2
 80006cc:	f008 fc20 	bl	8008f10 <HAL_Delay>
}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <lcd_delete_char>:
		lcd_line2();
		lcd_send_cmd(0x01);
	}
}

void lcd_delete_char(unsigned char row, unsigned char column) {
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	460a      	mov	r2, r1
 80006de:	71fb      	strb	r3, [r7, #7]
 80006e0:	4613      	mov	r3, r2
 80006e2:	71bb      	strb	r3, [r7, #6]
    lcd_gotoxy(row, column);
 80006e4:	79ba      	ldrb	r2, [r7, #6]
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	4611      	mov	r1, r2
 80006ea:	4618      	mov	r0, r3
 80006ec:	f7ff ff9d 	bl	800062a <lcd_gotoxy>

    lcd_send_char(' ');
 80006f0:	2020      	movs	r0, #32
 80006f2:	f7ff ff17 	bl	8000524 <lcd_send_char>
}
 80006f6:	bf00      	nop
 80006f8:	3708      	adds	r7, #8
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bd80      	pop	{r7, pc}
	...

08000700 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	4603      	mov	r3, r0
 8000708:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 800070a:	4a05      	ldr	r2, [pc, #20]	; (8000720 <lcd_backlight+0x20>)
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8000710:	2000      	movs	r0, #0
 8000712:	f7ff fe11 	bl	8000338 <lcd_send_cmd>
}
 8000716:	bf00      	nop
 8000718:	3708      	adds	r7, #8
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	20000b26 	.word	0x20000b26

08000724 <lcd_cursor>:

void lcd_cursor(int state) {
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	if (state == 1) {
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	2b01      	cmp	r3, #1
 8000730:	d106      	bne.n	8000740 <lcd_cursor+0x1c>
		lcd_send_cmd(0x0E);
 8000732:	200e      	movs	r0, #14
 8000734:	f7ff fe00 	bl	8000338 <lcd_send_cmd>
		lcd_send_cmd(0x0F);
 8000738:	200f      	movs	r0, #15
 800073a:	f7ff fdfd 	bl	8000338 <lcd_send_cmd>
	} else {
		lcd_send_cmd(0x0C);
	}
}
 800073e:	e002      	b.n	8000746 <lcd_cursor+0x22>
		lcd_send_cmd(0x0C);
 8000740:	200c      	movs	r0, #12
 8000742:	f7ff fdf9 	bl	8000338 <lcd_send_cmd>
}
 8000746:	bf00      	nop
 8000748:	3708      	adds	r7, #8
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
	...

08000750 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000754:	f3bf 8f4f 	dsb	sy
}
 8000758:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800075a:	4b06      	ldr	r3, [pc, #24]	; (8000774 <__NVIC_SystemReset+0x24>)
 800075c:	68db      	ldr	r3, [r3, #12]
 800075e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8000762:	4904      	ldr	r1, [pc, #16]	; (8000774 <__NVIC_SystemReset+0x24>)
 8000764:	4b04      	ldr	r3, [pc, #16]	; (8000778 <__NVIC_SystemReset+0x28>)
 8000766:	4313      	orrs	r3, r2
 8000768:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800076a:	f3bf 8f4f 	dsb	sy
}
 800076e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000770:	bf00      	nop
 8000772:	e7fd      	b.n	8000770 <__NVIC_SystemReset+0x20>
 8000774:	e000ed00 	.word	0xe000ed00
 8000778:	05fa0004 	.word	0x05fa0004

0800077c <copyText>:
char *secilenDilText;
char *menudenCikisText;
char *enteraBasinizText;
char *hataKoduText;

char* copyText(const char* text) {
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
    char* result = (char*)malloc(strlen(text) + 1);
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f7ff fd4d 	bl	8000224 <strlen>
 800078a:	4603      	mov	r3, r0
 800078c:	3301      	adds	r3, #1
 800078e:	4618      	mov	r0, r3
 8000790:	f00c f9bc 	bl	800cb0c <malloc>
 8000794:	4603      	mov	r3, r0
 8000796:	60fb      	str	r3, [r7, #12]
    if (result != NULL) {
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	2b00      	cmp	r3, #0
 800079c:	d003      	beq.n	80007a6 <copyText+0x2a>
        strcpy(result, text);
 800079e:	6879      	ldr	r1, [r7, #4]
 80007a0:	68f8      	ldr	r0, [r7, #12]
 80007a2:	f00c fb1d 	bl	800cde0 <strcpy>
    }
    return result;
 80007a6:	68fb      	ldr	r3, [r7, #12]
}
 80007a8:	4618      	mov	r0, r3
 80007aa:	3710      	adds	r7, #16
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}

080007b0 <printTemplate>:
        }
    }
    return result;
}

void printTemplate(int type, int page) {
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
 80007b8:	6039      	str	r1, [r7, #0]
	HAL_Delay(200);
 80007ba:	20c8      	movs	r0, #200	; 0xc8
 80007bc:	f008 fba8 	bl	8008f10 <HAL_Delay>
	lcd_clear();
 80007c0:	f7ff ff7e 	bl	80006c0 <lcd_clear>
	if(type == 1 && page == 0) {
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	2b01      	cmp	r3, #1
 80007c8:	d143      	bne.n	8000852 <printTemplate+0xa2>
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d140      	bne.n	8000852 <printTemplate+0xa2>
		lcd_print(1, 1, "ID: ");
 80007d0:	4ac1      	ldr	r2, [pc, #772]	; (8000ad8 <printTemplate+0x328>)
 80007d2:	2101      	movs	r1, #1
 80007d4:	2001      	movs	r0, #1
 80007d6:	f7ff ff47 	bl	8000668 <lcd_print>
		lcd_print(2, 3, "0");
 80007da:	4ac0      	ldr	r2, [pc, #768]	; (8000adc <printTemplate+0x32c>)
 80007dc:	2103      	movs	r1, #3
 80007de:	2002      	movs	r0, #2
 80007e0:	f7ff ff42 	bl	8000668 <lcd_print>
		lcd_print(2, 4, "1");
 80007e4:	4abe      	ldr	r2, [pc, #760]	; (8000ae0 <printTemplate+0x330>)
 80007e6:	2104      	movs	r1, #4
 80007e8:	2002      	movs	r0, #2
 80007ea:	f7ff ff3d 	bl	8000668 <lcd_print>
		lcd_print(2, 5, "2");
 80007ee:	4abd      	ldr	r2, [pc, #756]	; (8000ae4 <printTemplate+0x334>)
 80007f0:	2105      	movs	r1, #5
 80007f2:	2002      	movs	r0, #2
 80007f4:	f7ff ff38 	bl	8000668 <lcd_print>
		lcd_print(2, 6, "3");
 80007f8:	4abb      	ldr	r2, [pc, #748]	; (8000ae8 <printTemplate+0x338>)
 80007fa:	2106      	movs	r1, #6
 80007fc:	2002      	movs	r0, #2
 80007fe:	f7ff ff33 	bl	8000668 <lcd_print>
		lcd_print(2, 7, "4");
 8000802:	4aba      	ldr	r2, [pc, #744]	; (8000aec <printTemplate+0x33c>)
 8000804:	2107      	movs	r1, #7
 8000806:	2002      	movs	r0, #2
 8000808:	f7ff ff2e 	bl	8000668 <lcd_print>
		lcd_print(2, 10, "5");
 800080c:	4ab8      	ldr	r2, [pc, #736]	; (8000af0 <printTemplate+0x340>)
 800080e:	210a      	movs	r1, #10
 8000810:	2002      	movs	r0, #2
 8000812:	f7ff ff29 	bl	8000668 <lcd_print>
		lcd_print(2, 11, "6");
 8000816:	4ab7      	ldr	r2, [pc, #732]	; (8000af4 <printTemplate+0x344>)
 8000818:	210b      	movs	r1, #11
 800081a:	2002      	movs	r0, #2
 800081c:	f7ff ff24 	bl	8000668 <lcd_print>
		lcd_print(2, 12, "7");
 8000820:	4ab5      	ldr	r2, [pc, #724]	; (8000af8 <printTemplate+0x348>)
 8000822:	210c      	movs	r1, #12
 8000824:	2002      	movs	r0, #2
 8000826:	f7ff ff1f 	bl	8000668 <lcd_print>
		lcd_print(2, 13, "8");
 800082a:	4ab4      	ldr	r2, [pc, #720]	; (8000afc <printTemplate+0x34c>)
 800082c:	210d      	movs	r1, #13
 800082e:	2002      	movs	r0, #2
 8000830:	f7ff ff1a 	bl	8000668 <lcd_print>
		lcd_print(2, 14, "9");
 8000834:	4ab2      	ldr	r2, [pc, #712]	; (8000b00 <printTemplate+0x350>)
 8000836:	210e      	movs	r1, #14
 8000838:	2002      	movs	r0, #2
 800083a:	f7ff ff15 	bl	8000668 <lcd_print>
		lcd_print(1, 5, machineID);
 800083e:	4ab1      	ldr	r2, [pc, #708]	; (8000b04 <printTemplate+0x354>)
 8000840:	2105      	movs	r1, #5
 8000842:	2001      	movs	r0, #1
 8000844:	f7ff ff10 	bl	8000668 <lcd_print>
		lcd_gotoxy(2, 3);
 8000848:	2103      	movs	r1, #3
 800084a:	2002      	movs	r0, #2
 800084c:	f7ff feed 	bl	800062a <lcd_gotoxy>
				slideText(wifiPass, 7, 1);
			}
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
		}
	}
}
 8000850:	e19a      	b.n	8000b88 <printTemplate+0x3d8>
	} else if(type == 2) {
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2b02      	cmp	r3, #2
 8000856:	f040 80b5 	bne.w	80009c4 <printTemplate+0x214>
		if(page == 1) {
 800085a:	683b      	ldr	r3, [r7, #0]
 800085c:	2b01      	cmp	r3, #1
 800085e:	d120      	bne.n	80008a2 <printTemplate+0xf2>
			lcd_clear();
 8000860:	f7ff ff2e 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 8000864:	2064      	movs	r0, #100	; 0x64
 8000866:	f008 fb53 	bl	8008f10 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 800086a:	4aa7      	ldr	r2, [pc, #668]	; (8000b08 <printTemplate+0x358>)
 800086c:	2101      	movs	r1, #1
 800086e:	2001      	movs	r0, #1
 8000870:	f7ff fefa 	bl	8000668 <lcd_print>
			if(strlen(wifiSSID) <= 10) {
 8000874:	48a5      	ldr	r0, [pc, #660]	; (8000b0c <printTemplate+0x35c>)
 8000876:	f7ff fcd5 	bl	8000224 <strlen>
 800087a:	4603      	mov	r3, r0
 800087c:	2b0a      	cmp	r3, #10
 800087e:	d805      	bhi.n	800088c <printTemplate+0xdc>
				lcd_print(1, 7, wifiSSID);
 8000880:	4aa2      	ldr	r2, [pc, #648]	; (8000b0c <printTemplate+0x35c>)
 8000882:	2107      	movs	r1, #7
 8000884:	2001      	movs	r0, #1
 8000886:	f7ff feef 	bl	8000668 <lcd_print>
 800088a:	e004      	b.n	8000896 <printTemplate+0xe6>
				slideText(wifiSSID, 7, 1);
 800088c:	2201      	movs	r2, #1
 800088e:	2107      	movs	r1, #7
 8000890:	489e      	ldr	r0, [pc, #632]	; (8000b0c <printTemplate+0x35c>)
 8000892:	f000 fd91 	bl	80013b8 <slideText>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000896:	4a9e      	ldr	r2, [pc, #632]	; (8000b10 <printTemplate+0x360>)
 8000898:	2101      	movs	r1, #1
 800089a:	2002      	movs	r0, #2
 800089c:	f7ff fee4 	bl	8000668 <lcd_print>
}
 80008a0:	e172      	b.n	8000b88 <printTemplate+0x3d8>
		} else if(page == 2) {
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	2b02      	cmp	r3, #2
 80008a6:	d120      	bne.n	80008ea <printTemplate+0x13a>
			lcd_clear();
 80008a8:	f7ff ff0a 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 80008ac:	2064      	movs	r0, #100	; 0x64
 80008ae:	f008 fb2f 	bl	8008f10 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 80008b2:	4a95      	ldr	r2, [pc, #596]	; (8000b08 <printTemplate+0x358>)
 80008b4:	2101      	movs	r1, #1
 80008b6:	2001      	movs	r0, #1
 80008b8:	f7ff fed6 	bl	8000668 <lcd_print>
			if(strlen(wifiSSID) <= 10) {
 80008bc:	4893      	ldr	r0, [pc, #588]	; (8000b0c <printTemplate+0x35c>)
 80008be:	f7ff fcb1 	bl	8000224 <strlen>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b0a      	cmp	r3, #10
 80008c6:	d805      	bhi.n	80008d4 <printTemplate+0x124>
				lcd_print(1, 7, wifiSSID);
 80008c8:	4a90      	ldr	r2, [pc, #576]	; (8000b0c <printTemplate+0x35c>)
 80008ca:	2107      	movs	r1, #7
 80008cc:	2001      	movs	r0, #1
 80008ce:	f7ff fecb 	bl	8000668 <lcd_print>
 80008d2:	e004      	b.n	80008de <printTemplate+0x12e>
				slideText(wifiSSID, 7, 1);
 80008d4:	2201      	movs	r2, #1
 80008d6:	2107      	movs	r1, #7
 80008d8:	488c      	ldr	r0, [pc, #560]	; (8000b0c <printTemplate+0x35c>)
 80008da:	f000 fd6d 	bl	80013b8 <slideText>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 80008de:	4a8d      	ldr	r2, [pc, #564]	; (8000b14 <printTemplate+0x364>)
 80008e0:	2101      	movs	r1, #1
 80008e2:	2002      	movs	r0, #2
 80008e4:	f7ff fec0 	bl	8000668 <lcd_print>
}
 80008e8:	e14e      	b.n	8000b88 <printTemplate+0x3d8>
		} else if(page == 3) {
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	2b03      	cmp	r3, #3
 80008ee:	d120      	bne.n	8000932 <printTemplate+0x182>
			lcd_clear();
 80008f0:	f7ff fee6 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 80008f4:	2064      	movs	r0, #100	; 0x64
 80008f6:	f008 fb0b 	bl	8008f10 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 80008fa:	4a83      	ldr	r2, [pc, #524]	; (8000b08 <printTemplate+0x358>)
 80008fc:	2101      	movs	r1, #1
 80008fe:	2001      	movs	r0, #1
 8000900:	f7ff feb2 	bl	8000668 <lcd_print>
			if(strlen(wifiSSID) <= 10) {
 8000904:	4881      	ldr	r0, [pc, #516]	; (8000b0c <printTemplate+0x35c>)
 8000906:	f7ff fc8d 	bl	8000224 <strlen>
 800090a:	4603      	mov	r3, r0
 800090c:	2b0a      	cmp	r3, #10
 800090e:	d805      	bhi.n	800091c <printTemplate+0x16c>
				lcd_print(1, 7, wifiSSID);
 8000910:	4a7e      	ldr	r2, [pc, #504]	; (8000b0c <printTemplate+0x35c>)
 8000912:	2107      	movs	r1, #7
 8000914:	2001      	movs	r0, #1
 8000916:	f7ff fea7 	bl	8000668 <lcd_print>
 800091a:	e004      	b.n	8000926 <printTemplate+0x176>
				slideText(wifiSSID, 7, 1);
 800091c:	2201      	movs	r2, #1
 800091e:	2107      	movs	r1, #7
 8000920:	487a      	ldr	r0, [pc, #488]	; (8000b0c <printTemplate+0x35c>)
 8000922:	f000 fd49 	bl	80013b8 <slideText>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000926:	4a7c      	ldr	r2, [pc, #496]	; (8000b18 <printTemplate+0x368>)
 8000928:	2101      	movs	r1, #1
 800092a:	2002      	movs	r0, #2
 800092c:	f7ff fe9c 	bl	8000668 <lcd_print>
}
 8000930:	e12a      	b.n	8000b88 <printTemplate+0x3d8>
		} else if(page == 4) {
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	2b04      	cmp	r3, #4
 8000936:	d120      	bne.n	800097a <printTemplate+0x1ca>
			lcd_clear();
 8000938:	f7ff fec2 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 800093c:	2064      	movs	r0, #100	; 0x64
 800093e:	f008 fae7 	bl	8008f10 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 8000942:	4a71      	ldr	r2, [pc, #452]	; (8000b08 <printTemplate+0x358>)
 8000944:	2101      	movs	r1, #1
 8000946:	2001      	movs	r0, #1
 8000948:	f7ff fe8e 	bl	8000668 <lcd_print>
			if(strlen(wifiSSID) <= 10) {
 800094c:	486f      	ldr	r0, [pc, #444]	; (8000b0c <printTemplate+0x35c>)
 800094e:	f7ff fc69 	bl	8000224 <strlen>
 8000952:	4603      	mov	r3, r0
 8000954:	2b0a      	cmp	r3, #10
 8000956:	d805      	bhi.n	8000964 <printTemplate+0x1b4>
				lcd_print(1, 7, wifiSSID);
 8000958:	4a6c      	ldr	r2, [pc, #432]	; (8000b0c <printTemplate+0x35c>)
 800095a:	2107      	movs	r1, #7
 800095c:	2001      	movs	r0, #1
 800095e:	f7ff fe83 	bl	8000668 <lcd_print>
 8000962:	e004      	b.n	800096e <printTemplate+0x1be>
				slideText(wifiSSID, 7, 1);
 8000964:	2201      	movs	r2, #1
 8000966:	2107      	movs	r1, #7
 8000968:	4868      	ldr	r0, [pc, #416]	; (8000b0c <printTemplate+0x35c>)
 800096a:	f000 fd25 	bl	80013b8 <slideText>
			lcd_print(2, 1, "WXYZ0123456789!@");
 800096e:	4a6b      	ldr	r2, [pc, #428]	; (8000b1c <printTemplate+0x36c>)
 8000970:	2101      	movs	r1, #1
 8000972:	2002      	movs	r0, #2
 8000974:	f7ff fe78 	bl	8000668 <lcd_print>
}
 8000978:	e106      	b.n	8000b88 <printTemplate+0x3d8>
		} else if(page == 5) {
 800097a:	683b      	ldr	r3, [r7, #0]
 800097c:	2b05      	cmp	r3, #5
 800097e:	f040 8103 	bne.w	8000b88 <printTemplate+0x3d8>
			lcd_clear();
 8000982:	f7ff fe9d 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 8000986:	2064      	movs	r0, #100	; 0x64
 8000988:	f008 fac2 	bl	8008f10 <HAL_Delay>
			lcd_print(1, 1, "SSID: ");
 800098c:	4a5e      	ldr	r2, [pc, #376]	; (8000b08 <printTemplate+0x358>)
 800098e:	2101      	movs	r1, #1
 8000990:	2001      	movs	r0, #1
 8000992:	f7ff fe69 	bl	8000668 <lcd_print>
			if(strlen(wifiSSID) <= 10) {
 8000996:	485d      	ldr	r0, [pc, #372]	; (8000b0c <printTemplate+0x35c>)
 8000998:	f7ff fc44 	bl	8000224 <strlen>
 800099c:	4603      	mov	r3, r0
 800099e:	2b0a      	cmp	r3, #10
 80009a0:	d805      	bhi.n	80009ae <printTemplate+0x1fe>
				lcd_print(1, 7, wifiSSID);
 80009a2:	4a5a      	ldr	r2, [pc, #360]	; (8000b0c <printTemplate+0x35c>)
 80009a4:	2107      	movs	r1, #7
 80009a6:	2001      	movs	r0, #1
 80009a8:	f7ff fe5e 	bl	8000668 <lcd_print>
 80009ac:	e004      	b.n	80009b8 <printTemplate+0x208>
				slideText(wifiSSID, 7, 1);
 80009ae:	2201      	movs	r2, #1
 80009b0:	2107      	movs	r1, #7
 80009b2:	4856      	ldr	r0, [pc, #344]	; (8000b0c <printTemplate+0x35c>)
 80009b4:	f000 fd00 	bl	80013b8 <slideText>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 80009b8:	4a59      	ldr	r2, [pc, #356]	; (8000b20 <printTemplate+0x370>)
 80009ba:	2101      	movs	r1, #1
 80009bc:	2002      	movs	r0, #2
 80009be:	f7ff fe53 	bl	8000668 <lcd_print>
}
 80009c2:	e0e1      	b.n	8000b88 <printTemplate+0x3d8>
	} else if(type == 3) {
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	2b03      	cmp	r3, #3
 80009c8:	f040 80de 	bne.w	8000b88 <printTemplate+0x3d8>
		if(page == 1) {
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	d120      	bne.n	8000a14 <printTemplate+0x264>
			lcd_clear();
 80009d2:	f7ff fe75 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 80009d6:	2064      	movs	r0, #100	; 0x64
 80009d8:	f008 fa9a 	bl	8008f10 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 80009dc:	4a51      	ldr	r2, [pc, #324]	; (8000b24 <printTemplate+0x374>)
 80009de:	2101      	movs	r1, #1
 80009e0:	2001      	movs	r0, #1
 80009e2:	f7ff fe41 	bl	8000668 <lcd_print>
			if(strlen(wifiPass) <= 10) {
 80009e6:	4850      	ldr	r0, [pc, #320]	; (8000b28 <printTemplate+0x378>)
 80009e8:	f7ff fc1c 	bl	8000224 <strlen>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b0a      	cmp	r3, #10
 80009f0:	d805      	bhi.n	80009fe <printTemplate+0x24e>
				lcd_print(1, 7, wifiPass);
 80009f2:	4a4d      	ldr	r2, [pc, #308]	; (8000b28 <printTemplate+0x378>)
 80009f4:	2107      	movs	r1, #7
 80009f6:	2001      	movs	r0, #1
 80009f8:	f7ff fe36 	bl	8000668 <lcd_print>
 80009fc:	e004      	b.n	8000a08 <printTemplate+0x258>
				slideText(wifiPass, 7, 1);
 80009fe:	2201      	movs	r2, #1
 8000a00:	2107      	movs	r1, #7
 8000a02:	4849      	ldr	r0, [pc, #292]	; (8000b28 <printTemplate+0x378>)
 8000a04:	f000 fcd8 	bl	80013b8 <slideText>
			lcd_print(2, 1, "abcdefghijklmnop");
 8000a08:	4a41      	ldr	r2, [pc, #260]	; (8000b10 <printTemplate+0x360>)
 8000a0a:	2101      	movs	r1, #1
 8000a0c:	2002      	movs	r0, #2
 8000a0e:	f7ff fe2b 	bl	8000668 <lcd_print>
}
 8000a12:	e0b9      	b.n	8000b88 <printTemplate+0x3d8>
		} else if(page == 2) {
 8000a14:	683b      	ldr	r3, [r7, #0]
 8000a16:	2b02      	cmp	r3, #2
 8000a18:	d120      	bne.n	8000a5c <printTemplate+0x2ac>
			lcd_clear();
 8000a1a:	f7ff fe51 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 8000a1e:	2064      	movs	r0, #100	; 0x64
 8000a20:	f008 fa76 	bl	8008f10 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000a24:	4a3f      	ldr	r2, [pc, #252]	; (8000b24 <printTemplate+0x374>)
 8000a26:	2101      	movs	r1, #1
 8000a28:	2001      	movs	r0, #1
 8000a2a:	f7ff fe1d 	bl	8000668 <lcd_print>
			if(strlen(wifiPass) <= 10) {
 8000a2e:	483e      	ldr	r0, [pc, #248]	; (8000b28 <printTemplate+0x378>)
 8000a30:	f7ff fbf8 	bl	8000224 <strlen>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b0a      	cmp	r3, #10
 8000a38:	d805      	bhi.n	8000a46 <printTemplate+0x296>
				lcd_print(1, 7, wifiPass);
 8000a3a:	4a3b      	ldr	r2, [pc, #236]	; (8000b28 <printTemplate+0x378>)
 8000a3c:	2107      	movs	r1, #7
 8000a3e:	2001      	movs	r0, #1
 8000a40:	f7ff fe12 	bl	8000668 <lcd_print>
 8000a44:	e004      	b.n	8000a50 <printTemplate+0x2a0>
				slideText(wifiPass, 7, 1);
 8000a46:	2201      	movs	r2, #1
 8000a48:	2107      	movs	r1, #7
 8000a4a:	4837      	ldr	r0, [pc, #220]	; (8000b28 <printTemplate+0x378>)
 8000a4c:	f000 fcb4 	bl	80013b8 <slideText>
			lcd_print(2, 1, "qrstuvwxyzABCDEF");
 8000a50:	4a30      	ldr	r2, [pc, #192]	; (8000b14 <printTemplate+0x364>)
 8000a52:	2101      	movs	r1, #1
 8000a54:	2002      	movs	r0, #2
 8000a56:	f7ff fe07 	bl	8000668 <lcd_print>
}
 8000a5a:	e095      	b.n	8000b88 <printTemplate+0x3d8>
		} else if(page == 3) {
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	2b03      	cmp	r3, #3
 8000a60:	d120      	bne.n	8000aa4 <printTemplate+0x2f4>
			lcd_clear();
 8000a62:	f7ff fe2d 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 8000a66:	2064      	movs	r0, #100	; 0x64
 8000a68:	f008 fa52 	bl	8008f10 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000a6c:	4a2d      	ldr	r2, [pc, #180]	; (8000b24 <printTemplate+0x374>)
 8000a6e:	2101      	movs	r1, #1
 8000a70:	2001      	movs	r0, #1
 8000a72:	f7ff fdf9 	bl	8000668 <lcd_print>
			if(strlen(wifiPass) <= 10) {
 8000a76:	482c      	ldr	r0, [pc, #176]	; (8000b28 <printTemplate+0x378>)
 8000a78:	f7ff fbd4 	bl	8000224 <strlen>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b0a      	cmp	r3, #10
 8000a80:	d805      	bhi.n	8000a8e <printTemplate+0x2de>
				lcd_print(1, 7, wifiPass);
 8000a82:	4a29      	ldr	r2, [pc, #164]	; (8000b28 <printTemplate+0x378>)
 8000a84:	2107      	movs	r1, #7
 8000a86:	2001      	movs	r0, #1
 8000a88:	f7ff fdee 	bl	8000668 <lcd_print>
 8000a8c:	e004      	b.n	8000a98 <printTemplate+0x2e8>
				slideText(wifiPass, 7, 1);
 8000a8e:	2201      	movs	r2, #1
 8000a90:	2107      	movs	r1, #7
 8000a92:	4825      	ldr	r0, [pc, #148]	; (8000b28 <printTemplate+0x378>)
 8000a94:	f000 fc90 	bl	80013b8 <slideText>
			lcd_print(2, 1, "GHIJKLMNOPQRSTUV");
 8000a98:	4a1f      	ldr	r2, [pc, #124]	; (8000b18 <printTemplate+0x368>)
 8000a9a:	2101      	movs	r1, #1
 8000a9c:	2002      	movs	r0, #2
 8000a9e:	f7ff fde3 	bl	8000668 <lcd_print>
}
 8000aa2:	e071      	b.n	8000b88 <printTemplate+0x3d8>
		} else if(page == 4) {
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	2b04      	cmp	r3, #4
 8000aa8:	d14b      	bne.n	8000b42 <printTemplate+0x392>
			lcd_clear();
 8000aaa:	f7ff fe09 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 8000aae:	2064      	movs	r0, #100	; 0x64
 8000ab0:	f008 fa2e 	bl	8008f10 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000ab4:	4a1b      	ldr	r2, [pc, #108]	; (8000b24 <printTemplate+0x374>)
 8000ab6:	2101      	movs	r1, #1
 8000ab8:	2001      	movs	r0, #1
 8000aba:	f7ff fdd5 	bl	8000668 <lcd_print>
			if(strlen(wifiPass) <= 10) {
 8000abe:	481a      	ldr	r0, [pc, #104]	; (8000b28 <printTemplate+0x378>)
 8000ac0:	f7ff fbb0 	bl	8000224 <strlen>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b0a      	cmp	r3, #10
 8000ac8:	d830      	bhi.n	8000b2c <printTemplate+0x37c>
				lcd_print(1, 7, wifiPass);
 8000aca:	4a17      	ldr	r2, [pc, #92]	; (8000b28 <printTemplate+0x378>)
 8000acc:	2107      	movs	r1, #7
 8000ace:	2001      	movs	r0, #1
 8000ad0:	f7ff fdca 	bl	8000668 <lcd_print>
 8000ad4:	e02f      	b.n	8000b36 <printTemplate+0x386>
 8000ad6:	bf00      	nop
 8000ad8:	0800d6c4 	.word	0x0800d6c4
 8000adc:	0800d6cc 	.word	0x0800d6cc
 8000ae0:	0800d6d0 	.word	0x0800d6d0
 8000ae4:	0800d6d4 	.word	0x0800d6d4
 8000ae8:	0800d6d8 	.word	0x0800d6d8
 8000aec:	0800d6dc 	.word	0x0800d6dc
 8000af0:	0800d6e0 	.word	0x0800d6e0
 8000af4:	0800d6e4 	.word	0x0800d6e4
 8000af8:	0800d6e8 	.word	0x0800d6e8
 8000afc:	0800d6ec 	.word	0x0800d6ec
 8000b00:	0800d6f0 	.word	0x0800d6f0
 8000b04:	20000be4 	.word	0x20000be4
 8000b08:	0800d6f4 	.word	0x0800d6f4
 8000b0c:	20000bf0 	.word	0x20000bf0
 8000b10:	0800d6fc 	.word	0x0800d6fc
 8000b14:	0800d710 	.word	0x0800d710
 8000b18:	0800d724 	.word	0x0800d724
 8000b1c:	0800d738 	.word	0x0800d738
 8000b20:	0800d74c 	.word	0x0800d74c
 8000b24:	0800d760 	.word	0x0800d760
 8000b28:	20000c14 	.word	0x20000c14
				slideText(wifiPass, 7, 1);
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	2107      	movs	r1, #7
 8000b30:	4817      	ldr	r0, [pc, #92]	; (8000b90 <printTemplate+0x3e0>)
 8000b32:	f000 fc41 	bl	80013b8 <slideText>
			lcd_print(2, 1, "WXYZ0123456789!@");
 8000b36:	4a17      	ldr	r2, [pc, #92]	; (8000b94 <printTemplate+0x3e4>)
 8000b38:	2101      	movs	r1, #1
 8000b3a:	2002      	movs	r0, #2
 8000b3c:	f7ff fd94 	bl	8000668 <lcd_print>
}
 8000b40:	e022      	b.n	8000b88 <printTemplate+0x3d8>
		} else if(page == 5) {
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	2b05      	cmp	r3, #5
 8000b46:	d11f      	bne.n	8000b88 <printTemplate+0x3d8>
			lcd_clear();
 8000b48:	f7ff fdba 	bl	80006c0 <lcd_clear>
			HAL_Delay(100);
 8000b4c:	2064      	movs	r0, #100	; 0x64
 8000b4e:	f008 f9df 	bl	8008f10 <HAL_Delay>
			lcd_print(1, 1, "PASS: ");
 8000b52:	4a11      	ldr	r2, [pc, #68]	; (8000b98 <printTemplate+0x3e8>)
 8000b54:	2101      	movs	r1, #1
 8000b56:	2001      	movs	r0, #1
 8000b58:	f7ff fd86 	bl	8000668 <lcd_print>
			if(strlen(wifiPass) <= 10) {
 8000b5c:	480c      	ldr	r0, [pc, #48]	; (8000b90 <printTemplate+0x3e0>)
 8000b5e:	f7ff fb61 	bl	8000224 <strlen>
 8000b62:	4603      	mov	r3, r0
 8000b64:	2b0a      	cmp	r3, #10
 8000b66:	d805      	bhi.n	8000b74 <printTemplate+0x3c4>
				lcd_print(1, 7, wifiPass);
 8000b68:	4a09      	ldr	r2, [pc, #36]	; (8000b90 <printTemplate+0x3e0>)
 8000b6a:	2107      	movs	r1, #7
 8000b6c:	2001      	movs	r0, #1
 8000b6e:	f7ff fd7b 	bl	8000668 <lcd_print>
 8000b72:	e004      	b.n	8000b7e <printTemplate+0x3ce>
				slideText(wifiPass, 7, 1);
 8000b74:	2201      	movs	r2, #1
 8000b76:	2107      	movs	r1, #7
 8000b78:	4805      	ldr	r0, [pc, #20]	; (8000b90 <printTemplate+0x3e0>)
 8000b7a:	f000 fc1d 	bl	80013b8 <slideText>
			lcd_print(2, 1, "#$%^&*()-_+=<>? ");
 8000b7e:	4a07      	ldr	r2, [pc, #28]	; (8000b9c <printTemplate+0x3ec>)
 8000b80:	2101      	movs	r1, #1
 8000b82:	2002      	movs	r0, #2
 8000b84:	f7ff fd70 	bl	8000668 <lcd_print>
}
 8000b88:	bf00      	nop
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000c14 	.word	0x20000c14
 8000b94:	0800d738 	.word	0x0800d738
 8000b98:	0800d760 	.word	0x0800d760
 8000b9c:	0800d74c 	.word	0x0800d74c

08000ba0 <getCharFromCursorPosition>:

char getCharFromCursorPosition(int cursorPosition) {
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
    return charactersArray[cursorPosition];
 8000ba8:	4a04      	ldr	r2, [pc, #16]	; (8000bbc <getCharFromCursorPosition+0x1c>)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	4413      	add	r3, r2
 8000bae:	781b      	ldrb	r3, [r3, #0]
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	370c      	adds	r7, #12
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bc80      	pop	{r7}
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	20000960 	.word	0x20000960

08000bc0 <takeMachineID>:

void takeMachineID(int state, I2C_HandleTypeDef *hi2c1) {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	6039      	str	r1, [r7, #0]
	lcd_cursor(1);
 8000bca:	2001      	movs	r0, #1
 8000bcc:	f7ff fdaa 	bl	8000724 <lcd_cursor>

	if(state == 0) {
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d104      	bne.n	8000be0 <takeMachineID+0x20>
	    memset(machineID, 0, sizeof(machineID));
 8000bd6:	220c      	movs	r2, #12
 8000bd8:	2100      	movs	r1, #0
 8000bda:	4880      	ldr	r0, [pc, #512]	; (8000ddc <takeMachineID+0x21c>)
 8000bdc:	f00c f8ac 	bl	800cd38 <memset>
	}

    int cursorPosition = 3;
 8000be0:	2303      	movs	r3, #3
 8000be2:	617b      	str	r3, [r7, #20]
    int machineIDLoc = 0;
 8000be4:	2300      	movs	r3, #0
 8000be6:	613b      	str	r3, [r7, #16]
    int writeLoc = 5;
 8000be8:	2305      	movs	r3, #5
 8000bea:	60fb      	str	r3, [r7, #12]

    printTemplate(1, 0);
 8000bec:	2100      	movs	r1, #0
 8000bee:	2001      	movs	r0, #1
 8000bf0:	f7ff fdde 	bl	80007b0 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000bf4:	2108      	movs	r1, #8
 8000bf6:	487a      	ldr	r0, [pc, #488]	; (8000de0 <takeMachineID+0x220>)
 8000bf8:	f008 ff5a 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b01      	cmp	r3, #1
 8000c00:	d103      	bne.n	8000c0a <takeMachineID+0x4a>
        	lcd_cursor(0);
 8000c02:	2000      	movs	r0, #0
 8000c04:	f7ff fd8e 	bl	8000724 <lcd_cursor>

            break;
 8000c08:	e0e4      	b.n	8000dd4 <takeMachineID+0x214>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	4874      	ldr	r0, [pc, #464]	; (8000de0 <takeMachineID+0x220>)
 8000c0e:	f008 ff4f 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b01      	cmp	r3, #1
 8000c16:	d112      	bne.n	8000c3e <takeMachineID+0x7e>
        	if(cursorPosition == 7) {
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	2b07      	cmp	r3, #7
 8000c1c:	d102      	bne.n	8000c24 <takeMachineID+0x64>
        		cursorPosition = 10;
 8000c1e:	230a      	movs	r3, #10
 8000c20:	617b      	str	r3, [r7, #20]
 8000c22:	e008      	b.n	8000c36 <takeMachineID+0x76>
        	} else if (cursorPosition == 14) {
 8000c24:	697b      	ldr	r3, [r7, #20]
 8000c26:	2b0e      	cmp	r3, #14
 8000c28:	d102      	bne.n	8000c30 <takeMachineID+0x70>
                cursorPosition = 3;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	617b      	str	r3, [r7, #20]
 8000c2e:	e002      	b.n	8000c36 <takeMachineID+0x76>
            } else {
            	cursorPosition++;
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	3301      	adds	r3, #1
 8000c34:	617b      	str	r3, [r7, #20]
            }

        	HAL_Delay(350);
 8000c36:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000c3a:	f008 f969 	bl	8008f10 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8000c3e:	2108      	movs	r1, #8
 8000c40:	4868      	ldr	r0, [pc, #416]	; (8000de4 <takeMachineID+0x224>)
 8000c42:	f008 ff35 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b01      	cmp	r3, #1
 8000c4a:	d112      	bne.n	8000c72 <takeMachineID+0xb2>
            if (cursorPosition == 3) {
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	2b03      	cmp	r3, #3
 8000c50:	d102      	bne.n	8000c58 <takeMachineID+0x98>
                cursorPosition = 14;
 8000c52:	230e      	movs	r3, #14
 8000c54:	617b      	str	r3, [r7, #20]
 8000c56:	e008      	b.n	8000c6a <takeMachineID+0xaa>
            } else if(cursorPosition == 10) {
 8000c58:	697b      	ldr	r3, [r7, #20]
 8000c5a:	2b0a      	cmp	r3, #10
 8000c5c:	d102      	bne.n	8000c64 <takeMachineID+0xa4>
            	cursorPosition = 7;
 8000c5e:	2307      	movs	r3, #7
 8000c60:	617b      	str	r3, [r7, #20]
 8000c62:	e002      	b.n	8000c6a <takeMachineID+0xaa>
            } else {
            	cursorPosition--;
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	3b01      	subs	r3, #1
 8000c68:	617b      	str	r3, [r7, #20]
            }

            HAL_Delay(350);
 8000c6a:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000c6e:	f008 f94f 	bl	8008f10 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8000c72:	2102      	movs	r1, #2
 8000c74:	485a      	ldr	r0, [pc, #360]	; (8000de0 <takeMachineID+0x220>)
 8000c76:	f008 ff1b 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d16c      	bne.n	8000d5a <takeMachineID+0x19a>
        	if(cursorPosition == 3) {
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	2b03      	cmp	r3, #3
 8000c84:	d105      	bne.n	8000c92 <takeMachineID+0xd2>
        		machineID[machineIDLoc] = '0';
 8000c86:	4a55      	ldr	r2, [pc, #340]	; (8000ddc <takeMachineID+0x21c>)
 8000c88:	693b      	ldr	r3, [r7, #16]
 8000c8a:	4413      	add	r3, r2
 8000c8c:	2230      	movs	r2, #48	; 0x30
 8000c8e:	701a      	strb	r2, [r3, #0]
 8000c90:	e04f      	b.n	8000d32 <takeMachineID+0x172>
        	} else if(cursorPosition == 4) {
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	2b04      	cmp	r3, #4
 8000c96:	d105      	bne.n	8000ca4 <takeMachineID+0xe4>
        		machineID[machineIDLoc] = '1';
 8000c98:	4a50      	ldr	r2, [pc, #320]	; (8000ddc <takeMachineID+0x21c>)
 8000c9a:	693b      	ldr	r3, [r7, #16]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	2231      	movs	r2, #49	; 0x31
 8000ca0:	701a      	strb	r2, [r3, #0]
 8000ca2:	e046      	b.n	8000d32 <takeMachineID+0x172>
        	} else if(cursorPosition == 5) {
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	2b05      	cmp	r3, #5
 8000ca8:	d105      	bne.n	8000cb6 <takeMachineID+0xf6>
        		machineID[machineIDLoc] = '2';
 8000caa:	4a4c      	ldr	r2, [pc, #304]	; (8000ddc <takeMachineID+0x21c>)
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	4413      	add	r3, r2
 8000cb0:	2232      	movs	r2, #50	; 0x32
 8000cb2:	701a      	strb	r2, [r3, #0]
 8000cb4:	e03d      	b.n	8000d32 <takeMachineID+0x172>
        	} else if(cursorPosition == 6) {
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	2b06      	cmp	r3, #6
 8000cba:	d105      	bne.n	8000cc8 <takeMachineID+0x108>
        		machineID[machineIDLoc] = '3';
 8000cbc:	4a47      	ldr	r2, [pc, #284]	; (8000ddc <takeMachineID+0x21c>)
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	2233      	movs	r2, #51	; 0x33
 8000cc4:	701a      	strb	r2, [r3, #0]
 8000cc6:	e034      	b.n	8000d32 <takeMachineID+0x172>
        	} else if(cursorPosition == 7) {
 8000cc8:	697b      	ldr	r3, [r7, #20]
 8000cca:	2b07      	cmp	r3, #7
 8000ccc:	d105      	bne.n	8000cda <takeMachineID+0x11a>
        		machineID[machineIDLoc] = '4';
 8000cce:	4a43      	ldr	r2, [pc, #268]	; (8000ddc <takeMachineID+0x21c>)
 8000cd0:	693b      	ldr	r3, [r7, #16]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	2234      	movs	r2, #52	; 0x34
 8000cd6:	701a      	strb	r2, [r3, #0]
 8000cd8:	e02b      	b.n	8000d32 <takeMachineID+0x172>
        	} else if(cursorPosition == 10) {
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	2b0a      	cmp	r3, #10
 8000cde:	d105      	bne.n	8000cec <takeMachineID+0x12c>
        		machineID[machineIDLoc] = '5';
 8000ce0:	4a3e      	ldr	r2, [pc, #248]	; (8000ddc <takeMachineID+0x21c>)
 8000ce2:	693b      	ldr	r3, [r7, #16]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	2235      	movs	r2, #53	; 0x35
 8000ce8:	701a      	strb	r2, [r3, #0]
 8000cea:	e022      	b.n	8000d32 <takeMachineID+0x172>
        	} else if(cursorPosition == 11) {
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	2b0b      	cmp	r3, #11
 8000cf0:	d105      	bne.n	8000cfe <takeMachineID+0x13e>
        		machineID[machineIDLoc] = '6';
 8000cf2:	4a3a      	ldr	r2, [pc, #232]	; (8000ddc <takeMachineID+0x21c>)
 8000cf4:	693b      	ldr	r3, [r7, #16]
 8000cf6:	4413      	add	r3, r2
 8000cf8:	2236      	movs	r2, #54	; 0x36
 8000cfa:	701a      	strb	r2, [r3, #0]
 8000cfc:	e019      	b.n	8000d32 <takeMachineID+0x172>
        	} else if(cursorPosition == 12) {
 8000cfe:	697b      	ldr	r3, [r7, #20]
 8000d00:	2b0c      	cmp	r3, #12
 8000d02:	d105      	bne.n	8000d10 <takeMachineID+0x150>
        		machineID[machineIDLoc] = '7';
 8000d04:	4a35      	ldr	r2, [pc, #212]	; (8000ddc <takeMachineID+0x21c>)
 8000d06:	693b      	ldr	r3, [r7, #16]
 8000d08:	4413      	add	r3, r2
 8000d0a:	2237      	movs	r2, #55	; 0x37
 8000d0c:	701a      	strb	r2, [r3, #0]
 8000d0e:	e010      	b.n	8000d32 <takeMachineID+0x172>
        	} else if(cursorPosition == 13) {
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	2b0d      	cmp	r3, #13
 8000d14:	d105      	bne.n	8000d22 <takeMachineID+0x162>
        		machineID[machineIDLoc] = '8';
 8000d16:	4a31      	ldr	r2, [pc, #196]	; (8000ddc <takeMachineID+0x21c>)
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	4413      	add	r3, r2
 8000d1c:	2238      	movs	r2, #56	; 0x38
 8000d1e:	701a      	strb	r2, [r3, #0]
 8000d20:	e007      	b.n	8000d32 <takeMachineID+0x172>
        	} else if(cursorPosition == 14) {
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	2b0e      	cmp	r3, #14
 8000d26:	d104      	bne.n	8000d32 <takeMachineID+0x172>
        		machineID[machineIDLoc] = '9';
 8000d28:	4a2c      	ldr	r2, [pc, #176]	; (8000ddc <takeMachineID+0x21c>)
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	2239      	movs	r2, #57	; 0x39
 8000d30:	701a      	strb	r2, [r3, #0]
        	}

        	lcd_print_char(1, writeLoc, machineID[machineIDLoc]);
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	b2d9      	uxtb	r1, r3
 8000d36:	4a29      	ldr	r2, [pc, #164]	; (8000ddc <takeMachineID+0x21c>)
 8000d38:	693b      	ldr	r3, [r7, #16]
 8000d3a:	4413      	add	r3, r2
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	461a      	mov	r2, r3
 8000d40:	2001      	movs	r0, #1
 8000d42:	f7ff fca6 	bl	8000692 <lcd_print_char>

        	writeLoc++;
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	3301      	adds	r3, #1
 8000d4a:	60fb      	str	r3, [r7, #12]
        	machineIDLoc++;
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	613b      	str	r3, [r7, #16]

        	HAL_Delay(350);
 8000d52:	f44f 70af 	mov.w	r0, #350	; 0x15e
 8000d56:	f008 f8db 	bl	8008f10 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8000d5a:	2104      	movs	r1, #4
 8000d5c:	4820      	ldr	r0, [pc, #128]	; (8000de0 <takeMachineID+0x220>)
 8000d5e:	f008 fea7 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b01      	cmp	r3, #1
 8000d66:	d12e      	bne.n	8000dc6 <takeMachineID+0x206>
            if(strlen(machineID) >= 1) {
 8000d68:	4b1c      	ldr	r3, [pc, #112]	; (8000ddc <takeMachineID+0x21c>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d027      	beq.n	8000dc0 <takeMachineID+0x200>

                machineID[machineIDLoc] = '\0';
 8000d70:	4a1a      	ldr	r2, [pc, #104]	; (8000ddc <takeMachineID+0x21c>)
 8000d72:	693b      	ldr	r3, [r7, #16]
 8000d74:	4413      	add	r3, r2
 8000d76:	2200      	movs	r2, #0
 8000d78:	701a      	strb	r2, [r3, #0]

                lcd_delete_char(1, 4+machineIDLoc);
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	3304      	adds	r3, #4
 8000d80:	b2db      	uxtb	r3, r3
 8000d82:	4619      	mov	r1, r3
 8000d84:	2001      	movs	r0, #1
 8000d86:	f7ff fca5 	bl	80006d4 <lcd_delete_char>
                HAL_Delay(50);
 8000d8a:	2032      	movs	r0, #50	; 0x32
 8000d8c:	f008 f8c0 	bl	8008f10 <HAL_Delay>

                if(writeLoc > 5) {
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	2b05      	cmp	r3, #5
 8000d94:	dd03      	ble.n	8000d9e <takeMachineID+0x1de>
                	writeLoc--;
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	3b01      	subs	r3, #1
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	e004      	b.n	8000da8 <takeMachineID+0x1e8>
                } else if(writeLoc < 5) {
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	2b04      	cmp	r3, #4
 8000da2:	dc01      	bgt.n	8000da8 <takeMachineID+0x1e8>
                	writeLoc = 5;
 8000da4:	2305      	movs	r3, #5
 8000da6:	60fb      	str	r3, [r7, #12]
                }

                if(machineIDLoc > 0) {
 8000da8:	693b      	ldr	r3, [r7, #16]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	dd03      	ble.n	8000db6 <takeMachineID+0x1f6>
                	machineIDLoc--;
 8000dae:	693b      	ldr	r3, [r7, #16]
 8000db0:	3b01      	subs	r3, #1
 8000db2:	613b      	str	r3, [r7, #16]
 8000db4:	e004      	b.n	8000dc0 <takeMachineID+0x200>
                } else if(machineIDLoc < 0) {
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	da01      	bge.n	8000dc0 <takeMachineID+0x200>
                	machineIDLoc = 0;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	613b      	str	r3, [r7, #16]
                }
            }

            HAL_Delay(250);
 8000dc0:	20fa      	movs	r0, #250	; 0xfa
 8000dc2:	f008 f8a5 	bl	8008f10 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	b2db      	uxtb	r3, r3
 8000dca:	4619      	mov	r1, r3
 8000dcc:	2002      	movs	r0, #2
 8000dce:	f7ff fc2c 	bl	800062a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000dd2:	e70f      	b.n	8000bf4 <takeMachineID+0x34>
    }
}
 8000dd4:	bf00      	nop
 8000dd6:	3718      	adds	r7, #24
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	20000be4 	.word	0x20000be4
 8000de0:	40010800 	.word	0x40010800
 8000de4:	40011000 	.word	0x40011000

08000de8 <takeWifiSSID>:

void takeWifiSSID(int state, I2C_HandleTypeDef *hi2c1) {
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b086      	sub	sp, #24
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
 8000df0:	6039      	str	r1, [r7, #0]
    lcd_cursor(1);
 8000df2:	2001      	movs	r0, #1
 8000df4:	f7ff fc96 	bl	8000724 <lcd_cursor>

    if(state == 0) {
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d104      	bne.n	8000e08 <takeWifiSSID+0x20>
    	memset(wifiSSID, 0, sizeof(wifiSSID));
 8000dfe:	2221      	movs	r2, #33	; 0x21
 8000e00:	2100      	movs	r1, #0
 8000e02:	489d      	ldr	r0, [pc, #628]	; (8001078 <takeWifiSSID+0x290>)
 8000e04:	f00b ff98 	bl	800cd38 <memset>
    }

    int realCharPos = 1;
 8000e08:	2301      	movs	r3, #1
 8000e0a:	617b      	str	r3, [r7, #20]
    cursorPosition = 1;
 8000e0c:	4b9b      	ldr	r3, [pc, #620]	; (800107c <takeWifiSSID+0x294>)
 8000e0e:	2201      	movs	r2, #1
 8000e10:	601a      	str	r2, [r3, #0]
    page = 1;
 8000e12:	4b9b      	ldr	r3, [pc, #620]	; (8001080 <takeWifiSSID+0x298>)
 8000e14:	2201      	movs	r2, #1
 8000e16:	601a      	str	r2, [r3, #0]
    int wifiNameLoc = 0;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	613b      	str	r3, [r7, #16]
    int writeLoc = 7;
 8000e1c:	2307      	movs	r3, #7
 8000e1e:	60fb      	str	r3, [r7, #12]

    printTemplate(2, 1);
 8000e20:	2101      	movs	r1, #1
 8000e22:	2002      	movs	r0, #2
 8000e24:	f7ff fcc4 	bl	80007b0 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8000e28:	2108      	movs	r1, #8
 8000e2a:	4896      	ldr	r0, [pc, #600]	; (8001084 <takeWifiSSID+0x29c>)
 8000e2c:	f008 fe40 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b01      	cmp	r3, #1
 8000e34:	d103      	bne.n	8000e3e <takeWifiSSID+0x56>
            lcd_cursor(0);
 8000e36:	2000      	movs	r0, #0
 8000e38:	f7ff fc74 	bl	8000724 <lcd_cursor>

            break;
 8000e3c:	e142      	b.n	80010c4 <takeWifiSSID+0x2dc>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8000e3e:	2101      	movs	r1, #1
 8000e40:	4890      	ldr	r0, [pc, #576]	; (8001084 <takeWifiSSID+0x29c>)
 8000e42:	f008 fe35 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d166      	bne.n	8000f1a <takeWifiSSID+0x132>
        	realCharPos++;
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	617b      	str	r3, [r7, #20]
        	if(realCharPos > 80) {
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	2b50      	cmp	r3, #80	; 0x50
 8000e56:	dd01      	ble.n	8000e5c <takeWifiSSID+0x74>
        		realCharPos = 1;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	617b      	str	r3, [r7, #20]
        	}
            if (cursorPosition == 16) {
 8000e5c:	4b87      	ldr	r3, [pc, #540]	; (800107c <takeWifiSSID+0x294>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	2b10      	cmp	r3, #16
 8000e62:	d152      	bne.n	8000f0a <takeWifiSSID+0x122>
            	if(page == 1) {
 8000e64:	4b86      	ldr	r3, [pc, #536]	; (8001080 <takeWifiSSID+0x298>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d10c      	bne.n	8000e86 <takeWifiSSID+0x9e>
            		cursorPosition = 1;
 8000e6c:	4b83      	ldr	r3, [pc, #524]	; (800107c <takeWifiSSID+0x294>)
 8000e6e:	2201      	movs	r2, #1
 8000e70:	601a      	str	r2, [r3, #0]
            		page++;
 8000e72:	4b83      	ldr	r3, [pc, #524]	; (8001080 <takeWifiSSID+0x298>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	3301      	adds	r3, #1
 8000e78:	4a81      	ldr	r2, [pc, #516]	; (8001080 <takeWifiSSID+0x298>)
 8000e7a:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 2);
 8000e7c:	2102      	movs	r1, #2
 8000e7e:	2002      	movs	r0, #2
 8000e80:	f7ff fc96 	bl	80007b0 <printTemplate>
 8000e84:	e046      	b.n	8000f14 <takeWifiSSID+0x12c>
            	} else if(page == 2) {
 8000e86:	4b7e      	ldr	r3, [pc, #504]	; (8001080 <takeWifiSSID+0x298>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2b02      	cmp	r3, #2
 8000e8c:	d10c      	bne.n	8000ea8 <takeWifiSSID+0xc0>
            		cursorPosition = 1;
 8000e8e:	4b7b      	ldr	r3, [pc, #492]	; (800107c <takeWifiSSID+0x294>)
 8000e90:	2201      	movs	r2, #1
 8000e92:	601a      	str	r2, [r3, #0]
            		page++;
 8000e94:	4b7a      	ldr	r3, [pc, #488]	; (8001080 <takeWifiSSID+0x298>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	4a79      	ldr	r2, [pc, #484]	; (8001080 <takeWifiSSID+0x298>)
 8000e9c:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 3);
 8000e9e:	2103      	movs	r1, #3
 8000ea0:	2002      	movs	r0, #2
 8000ea2:	f7ff fc85 	bl	80007b0 <printTemplate>
 8000ea6:	e035      	b.n	8000f14 <takeWifiSSID+0x12c>
            	} else if(page == 3) {
 8000ea8:	4b75      	ldr	r3, [pc, #468]	; (8001080 <takeWifiSSID+0x298>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2b03      	cmp	r3, #3
 8000eae:	d10c      	bne.n	8000eca <takeWifiSSID+0xe2>
            		cursorPosition = 1;
 8000eb0:	4b72      	ldr	r3, [pc, #456]	; (800107c <takeWifiSSID+0x294>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	601a      	str	r2, [r3, #0]
            		page++;
 8000eb6:	4b72      	ldr	r3, [pc, #456]	; (8001080 <takeWifiSSID+0x298>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	4a70      	ldr	r2, [pc, #448]	; (8001080 <takeWifiSSID+0x298>)
 8000ebe:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 4);
 8000ec0:	2104      	movs	r1, #4
 8000ec2:	2002      	movs	r0, #2
 8000ec4:	f7ff fc74 	bl	80007b0 <printTemplate>
 8000ec8:	e024      	b.n	8000f14 <takeWifiSSID+0x12c>
            	} else if(page == 4) {
 8000eca:	4b6d      	ldr	r3, [pc, #436]	; (8001080 <takeWifiSSID+0x298>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	2b04      	cmp	r3, #4
 8000ed0:	d10c      	bne.n	8000eec <takeWifiSSID+0x104>
            		cursorPosition = 1;
 8000ed2:	4b6a      	ldr	r3, [pc, #424]	; (800107c <takeWifiSSID+0x294>)
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	601a      	str	r2, [r3, #0]
            		page++;
 8000ed8:	4b69      	ldr	r3, [pc, #420]	; (8001080 <takeWifiSSID+0x298>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	3301      	adds	r3, #1
 8000ede:	4a68      	ldr	r2, [pc, #416]	; (8001080 <takeWifiSSID+0x298>)
 8000ee0:	6013      	str	r3, [r2, #0]
            		printTemplate(2, 5);
 8000ee2:	2105      	movs	r1, #5
 8000ee4:	2002      	movs	r0, #2
 8000ee6:	f7ff fc63 	bl	80007b0 <printTemplate>
 8000eea:	e013      	b.n	8000f14 <takeWifiSSID+0x12c>
            	} else if(page == 5) {
 8000eec:	4b64      	ldr	r3, [pc, #400]	; (8001080 <takeWifiSSID+0x298>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2b05      	cmp	r3, #5
 8000ef2:	d10f      	bne.n	8000f14 <takeWifiSSID+0x12c>
            		cursorPosition = 1;
 8000ef4:	4b61      	ldr	r3, [pc, #388]	; (800107c <takeWifiSSID+0x294>)
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	601a      	str	r2, [r3, #0]
            		page = 1;
 8000efa:	4b61      	ldr	r3, [pc, #388]	; (8001080 <takeWifiSSID+0x298>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 8000f00:	2101      	movs	r1, #1
 8000f02:	2002      	movs	r0, #2
 8000f04:	f7ff fc54 	bl	80007b0 <printTemplate>
 8000f08:	e004      	b.n	8000f14 <takeWifiSSID+0x12c>
            	}
            } else {
            	cursorPosition++;
 8000f0a:	4b5c      	ldr	r3, [pc, #368]	; (800107c <takeWifiSSID+0x294>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	4a5a      	ldr	r2, [pc, #360]	; (800107c <takeWifiSSID+0x294>)
 8000f12:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8000f14:	20fa      	movs	r0, #250	; 0xfa
 8000f16:	f007 fffb 	bl	8008f10 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8000f1a:	2108      	movs	r1, #8
 8000f1c:	485a      	ldr	r0, [pc, #360]	; (8001088 <takeWifiSSID+0x2a0>)
 8000f1e:	f008 fdc7 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8000f22:	4603      	mov	r3, r0
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d15e      	bne.n	8000fe6 <takeWifiSSID+0x1fe>
        	realCharPos--;
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	617b      	str	r3, [r7, #20]
        	if(realCharPos < 1) {
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	dc01      	bgt.n	8000f38 <takeWifiSSID+0x150>
        		realCharPos = 80;
 8000f34:	2350      	movs	r3, #80	; 0x50
 8000f36:	617b      	str	r3, [r7, #20]
        	}
            if(cursorPosition == 1) {
 8000f38:	4b50      	ldr	r3, [pc, #320]	; (800107c <takeWifiSSID+0x294>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d14a      	bne.n	8000fd6 <takeWifiSSID+0x1ee>
            	if(page == 1) {
 8000f40:	4b4f      	ldr	r3, [pc, #316]	; (8001080 <takeWifiSSID+0x298>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d10a      	bne.n	8000f5e <takeWifiSSID+0x176>
            		cursorPosition = 16;
 8000f48:	4b4c      	ldr	r3, [pc, #304]	; (800107c <takeWifiSSID+0x294>)
 8000f4a:	2210      	movs	r2, #16
 8000f4c:	601a      	str	r2, [r3, #0]
            		page = 5;
 8000f4e:	4b4c      	ldr	r3, [pc, #304]	; (8001080 <takeWifiSSID+0x298>)
 8000f50:	2205      	movs	r2, #5
 8000f52:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 5);
 8000f54:	2105      	movs	r1, #5
 8000f56:	2002      	movs	r0, #2
 8000f58:	f7ff fc2a 	bl	80007b0 <printTemplate>
 8000f5c:	e040      	b.n	8000fe0 <takeWifiSSID+0x1f8>
            	} else if(page == 2) {
 8000f5e:	4b48      	ldr	r3, [pc, #288]	; (8001080 <takeWifiSSID+0x298>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d10a      	bne.n	8000f7c <takeWifiSSID+0x194>
            		cursorPosition = 16;
 8000f66:	4b45      	ldr	r3, [pc, #276]	; (800107c <takeWifiSSID+0x294>)
 8000f68:	2210      	movs	r2, #16
 8000f6a:	601a      	str	r2, [r3, #0]
            		page = 1;
 8000f6c:	4b44      	ldr	r3, [pc, #272]	; (8001080 <takeWifiSSID+0x298>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 1);
 8000f72:	2101      	movs	r1, #1
 8000f74:	2002      	movs	r0, #2
 8000f76:	f7ff fc1b 	bl	80007b0 <printTemplate>
 8000f7a:	e031      	b.n	8000fe0 <takeWifiSSID+0x1f8>
            	} else if(page == 3) {
 8000f7c:	4b40      	ldr	r3, [pc, #256]	; (8001080 <takeWifiSSID+0x298>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	2b03      	cmp	r3, #3
 8000f82:	d10a      	bne.n	8000f9a <takeWifiSSID+0x1b2>
            		cursorPosition = 16;
 8000f84:	4b3d      	ldr	r3, [pc, #244]	; (800107c <takeWifiSSID+0x294>)
 8000f86:	2210      	movs	r2, #16
 8000f88:	601a      	str	r2, [r3, #0]
            		page = 2;
 8000f8a:	4b3d      	ldr	r3, [pc, #244]	; (8001080 <takeWifiSSID+0x298>)
 8000f8c:	2202      	movs	r2, #2
 8000f8e:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 2);
 8000f90:	2102      	movs	r1, #2
 8000f92:	2002      	movs	r0, #2
 8000f94:	f7ff fc0c 	bl	80007b0 <printTemplate>
 8000f98:	e022      	b.n	8000fe0 <takeWifiSSID+0x1f8>
            	} else if(page == 4) {
 8000f9a:	4b39      	ldr	r3, [pc, #228]	; (8001080 <takeWifiSSID+0x298>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	2b04      	cmp	r3, #4
 8000fa0:	d10a      	bne.n	8000fb8 <takeWifiSSID+0x1d0>
            		cursorPosition = 16;
 8000fa2:	4b36      	ldr	r3, [pc, #216]	; (800107c <takeWifiSSID+0x294>)
 8000fa4:	2210      	movs	r2, #16
 8000fa6:	601a      	str	r2, [r3, #0]
            		page = 3;
 8000fa8:	4b35      	ldr	r3, [pc, #212]	; (8001080 <takeWifiSSID+0x298>)
 8000faa:	2203      	movs	r2, #3
 8000fac:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 3);
 8000fae:	2103      	movs	r1, #3
 8000fb0:	2002      	movs	r0, #2
 8000fb2:	f7ff fbfd 	bl	80007b0 <printTemplate>
 8000fb6:	e013      	b.n	8000fe0 <takeWifiSSID+0x1f8>
            	} else if(page == 5) {
 8000fb8:	4b31      	ldr	r3, [pc, #196]	; (8001080 <takeWifiSSID+0x298>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2b05      	cmp	r3, #5
 8000fbe:	d10f      	bne.n	8000fe0 <takeWifiSSID+0x1f8>
            		cursorPosition = 16;
 8000fc0:	4b2e      	ldr	r3, [pc, #184]	; (800107c <takeWifiSSID+0x294>)
 8000fc2:	2210      	movs	r2, #16
 8000fc4:	601a      	str	r2, [r3, #0]
            		page = 4;
 8000fc6:	4b2e      	ldr	r3, [pc, #184]	; (8001080 <takeWifiSSID+0x298>)
 8000fc8:	2204      	movs	r2, #4
 8000fca:	601a      	str	r2, [r3, #0]
            		printTemplate(2, 4);
 8000fcc:	2104      	movs	r1, #4
 8000fce:	2002      	movs	r0, #2
 8000fd0:	f7ff fbee 	bl	80007b0 <printTemplate>
 8000fd4:	e004      	b.n	8000fe0 <takeWifiSSID+0x1f8>
            	}
            } else {
            	cursorPosition--;
 8000fd6:	4b29      	ldr	r3, [pc, #164]	; (800107c <takeWifiSSID+0x294>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	4a27      	ldr	r2, [pc, #156]	; (800107c <takeWifiSSID+0x294>)
 8000fde:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 8000fe0:	20fa      	movs	r0, #250	; 0xfa
 8000fe2:	f007 ff95 	bl	8008f10 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 8000fe6:	2102      	movs	r1, #2
 8000fe8:	4826      	ldr	r0, [pc, #152]	; (8001084 <takeWifiSSID+0x29c>)
 8000fea:	f008 fd61 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b01      	cmp	r3, #1
 8000ff2:	d11e      	bne.n	8001032 <takeWifiSSID+0x24a>
            wifiSSID[wifiNameLoc] = getCharFromCursorPosition(realCharPos - 1);
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f7ff fdd1 	bl	8000ba0 <getCharFromCursorPosition>
 8000ffe:	4603      	mov	r3, r0
 8001000:	4619      	mov	r1, r3
 8001002:	4a1d      	ldr	r2, [pc, #116]	; (8001078 <takeWifiSSID+0x290>)
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	4413      	add	r3, r2
 8001008:	460a      	mov	r2, r1
 800100a:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiSSID[wifiNameLoc]);
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	b2d9      	uxtb	r1, r3
 8001010:	4a19      	ldr	r2, [pc, #100]	; (8001078 <takeWifiSSID+0x290>)
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	4413      	add	r3, r2
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	461a      	mov	r2, r3
 800101a:	2001      	movs	r0, #1
 800101c:	f7ff fb39 	bl	8000692 <lcd_print_char>

            writeLoc++;
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	3301      	adds	r3, #1
 8001024:	60fb      	str	r3, [r7, #12]
            wifiNameLoc++;
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	3301      	adds	r3, #1
 800102a:	613b      	str	r3, [r7, #16]

            HAL_Delay(250);
 800102c:	20fa      	movs	r0, #250	; 0xfa
 800102e:	f007 ff6f 	bl	8008f10 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 8001032:	2104      	movs	r1, #4
 8001034:	4813      	ldr	r0, [pc, #76]	; (8001084 <takeWifiSSID+0x29c>)
 8001036:	f008 fd3b 	bl	8009ab0 <HAL_GPIO_ReadPin>
 800103a:	4603      	mov	r3, r0
 800103c:	2b01      	cmp	r3, #1
 800103e:	d139      	bne.n	80010b4 <takeWifiSSID+0x2cc>
        	if(strlen(wifiSSID) >= 1) {
 8001040:	4b0d      	ldr	r3, [pc, #52]	; (8001078 <takeWifiSSID+0x290>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d032      	beq.n	80010ae <takeWifiSSID+0x2c6>
        		wifiSSID[wifiNameLoc] = '\0';
 8001048:	4a0b      	ldr	r2, [pc, #44]	; (8001078 <takeWifiSSID+0x290>)
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	4413      	add	r3, r2
 800104e:	2200      	movs	r2, #0
 8001050:	701a      	strb	r2, [r3, #0]

        		lcd_delete_char(1, 6+wifiNameLoc);
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	b2db      	uxtb	r3, r3
 8001056:	3306      	adds	r3, #6
 8001058:	b2db      	uxtb	r3, r3
 800105a:	4619      	mov	r1, r3
 800105c:	2001      	movs	r0, #1
 800105e:	f7ff fb39 	bl	80006d4 <lcd_delete_char>
        		HAL_Delay(50);
 8001062:	2032      	movs	r0, #50	; 0x32
 8001064:	f007 ff54 	bl	8008f10 <HAL_Delay>
        		if(writeLoc > 7) {
 8001068:	68fb      	ldr	r3, [r7, #12]
 800106a:	2b07      	cmp	r3, #7
 800106c:	dd0e      	ble.n	800108c <takeWifiSSID+0x2a4>
        			writeLoc--;
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	3b01      	subs	r3, #1
 8001072:	60fb      	str	r3, [r7, #12]
 8001074:	e00f      	b.n	8001096 <takeWifiSSID+0x2ae>
 8001076:	bf00      	nop
 8001078:	20000bf0 	.word	0x20000bf0
 800107c:	20000944 	.word	0x20000944
 8001080:	20000948 	.word	0x20000948
 8001084:	40010800 	.word	0x40010800
 8001088:	40011000 	.word	0x40011000
        		} else if(writeLoc < 7) {
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	2b06      	cmp	r3, #6
 8001090:	dc01      	bgt.n	8001096 <takeWifiSSID+0x2ae>
        			writeLoc = 7;
 8001092:	2307      	movs	r3, #7
 8001094:	60fb      	str	r3, [r7, #12]
        		}

        		if(wifiNameLoc > 0) {
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	2b00      	cmp	r3, #0
 800109a:	dd03      	ble.n	80010a4 <takeWifiSSID+0x2bc>
        			wifiNameLoc--;
 800109c:	693b      	ldr	r3, [r7, #16]
 800109e:	3b01      	subs	r3, #1
 80010a0:	613b      	str	r3, [r7, #16]
 80010a2:	e004      	b.n	80010ae <takeWifiSSID+0x2c6>
        		} else if(wifiNameLoc < 0) {
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	da01      	bge.n	80010ae <takeWifiSSID+0x2c6>
        			wifiNameLoc = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	613b      	str	r3, [r7, #16]
        		}
        	}

        	HAL_Delay(250);
 80010ae:	20fa      	movs	r0, #250	; 0xfa
 80010b0:	f007 ff2e 	bl	8008f10 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 80010b4:	4b05      	ldr	r3, [pc, #20]	; (80010cc <takeWifiSSID+0x2e4>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	4619      	mov	r1, r3
 80010bc:	2002      	movs	r0, #2
 80010be:	f7ff fab4 	bl	800062a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80010c2:	e6b1      	b.n	8000e28 <takeWifiSSID+0x40>
    }
}
 80010c4:	bf00      	nop
 80010c6:	3718      	adds	r7, #24
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	20000944 	.word	0x20000944

080010d0 <takeWifiPass>:

void takeWifiPass(int state, I2C_HandleTypeDef *hi2c1) {
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	6039      	str	r1, [r7, #0]
    lcd_cursor(1);
 80010da:	2001      	movs	r0, #1
 80010dc:	f7ff fb22 	bl	8000724 <lcd_cursor>

    if(state == 0) {
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d104      	bne.n	80010f0 <takeWifiPass+0x20>
    	memset(wifiPass, 0, sizeof(wifiPass));
 80010e6:	2221      	movs	r2, #33	; 0x21
 80010e8:	2100      	movs	r1, #0
 80010ea:	489d      	ldr	r0, [pc, #628]	; (8001360 <takeWifiPass+0x290>)
 80010ec:	f00b fe24 	bl	800cd38 <memset>
    }

    int realCharPos = 1;
 80010f0:	2301      	movs	r3, #1
 80010f2:	617b      	str	r3, [r7, #20]
    cursorPosition = 1;
 80010f4:	4b9b      	ldr	r3, [pc, #620]	; (8001364 <takeWifiPass+0x294>)
 80010f6:	2201      	movs	r2, #1
 80010f8:	601a      	str	r2, [r3, #0]
    page = 1;
 80010fa:	4b9b      	ldr	r3, [pc, #620]	; (8001368 <takeWifiPass+0x298>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	601a      	str	r2, [r3, #0]
    int wifiPassLoc = 0;
 8001100:	2300      	movs	r3, #0
 8001102:	613b      	str	r3, [r7, #16]
    int writeLoc = 7;
 8001104:	2307      	movs	r3, #7
 8001106:	60fb      	str	r3, [r7, #12]

    printTemplate(3, 1);
 8001108:	2101      	movs	r1, #1
 800110a:	2003      	movs	r0, #3
 800110c:	f7ff fb50 	bl	80007b0 <printTemplate>

    while (1) {
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 8001110:	2108      	movs	r1, #8
 8001112:	4896      	ldr	r0, [pc, #600]	; (800136c <takeWifiPass+0x29c>)
 8001114:	f008 fccc 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8001118:	4603      	mov	r3, r0
 800111a:	2b01      	cmp	r3, #1
 800111c:	d103      	bne.n	8001126 <takeWifiPass+0x56>
            lcd_cursor(0);
 800111e:	2000      	movs	r0, #0
 8001120:	f7ff fb00 	bl	8000724 <lcd_cursor>

            break;
 8001124:	e142      	b.n	80013ac <takeWifiPass+0x2dc>
        }

        if (HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port, butonIleriIn_Pin) == 1) {
 8001126:	2101      	movs	r1, #1
 8001128:	4890      	ldr	r0, [pc, #576]	; (800136c <takeWifiPass+0x29c>)
 800112a:	f008 fcc1 	bl	8009ab0 <HAL_GPIO_ReadPin>
 800112e:	4603      	mov	r3, r0
 8001130:	2b01      	cmp	r3, #1
 8001132:	d166      	bne.n	8001202 <takeWifiPass+0x132>
        	realCharPos++;
 8001134:	697b      	ldr	r3, [r7, #20]
 8001136:	3301      	adds	r3, #1
 8001138:	617b      	str	r3, [r7, #20]
        	if(realCharPos > 80) {
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	2b50      	cmp	r3, #80	; 0x50
 800113e:	dd01      	ble.n	8001144 <takeWifiPass+0x74>
        	    realCharPos = 1;
 8001140:	2301      	movs	r3, #1
 8001142:	617b      	str	r3, [r7, #20]
        	}
            if (cursorPosition == 16) {
 8001144:	4b87      	ldr	r3, [pc, #540]	; (8001364 <takeWifiPass+0x294>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b10      	cmp	r3, #16
 800114a:	d152      	bne.n	80011f2 <takeWifiPass+0x122>
            	if(page == 1) {
 800114c:	4b86      	ldr	r3, [pc, #536]	; (8001368 <takeWifiPass+0x298>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d10c      	bne.n	800116e <takeWifiPass+0x9e>
            		cursorPosition = 1;
 8001154:	4b83      	ldr	r3, [pc, #524]	; (8001364 <takeWifiPass+0x294>)
 8001156:	2201      	movs	r2, #1
 8001158:	601a      	str	r2, [r3, #0]
            		page++;
 800115a:	4b83      	ldr	r3, [pc, #524]	; (8001368 <takeWifiPass+0x298>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	3301      	adds	r3, #1
 8001160:	4a81      	ldr	r2, [pc, #516]	; (8001368 <takeWifiPass+0x298>)
 8001162:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 2);
 8001164:	2102      	movs	r1, #2
 8001166:	2003      	movs	r0, #3
 8001168:	f7ff fb22 	bl	80007b0 <printTemplate>
 800116c:	e046      	b.n	80011fc <takeWifiPass+0x12c>
            	} else if(page == 2) {
 800116e:	4b7e      	ldr	r3, [pc, #504]	; (8001368 <takeWifiPass+0x298>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	2b02      	cmp	r3, #2
 8001174:	d10c      	bne.n	8001190 <takeWifiPass+0xc0>
            		cursorPosition = 1;
 8001176:	4b7b      	ldr	r3, [pc, #492]	; (8001364 <takeWifiPass+0x294>)
 8001178:	2201      	movs	r2, #1
 800117a:	601a      	str	r2, [r3, #0]
            		page++;
 800117c:	4b7a      	ldr	r3, [pc, #488]	; (8001368 <takeWifiPass+0x298>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	3301      	adds	r3, #1
 8001182:	4a79      	ldr	r2, [pc, #484]	; (8001368 <takeWifiPass+0x298>)
 8001184:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 3);
 8001186:	2103      	movs	r1, #3
 8001188:	2003      	movs	r0, #3
 800118a:	f7ff fb11 	bl	80007b0 <printTemplate>
 800118e:	e035      	b.n	80011fc <takeWifiPass+0x12c>
            	} else if(page == 3) {
 8001190:	4b75      	ldr	r3, [pc, #468]	; (8001368 <takeWifiPass+0x298>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2b03      	cmp	r3, #3
 8001196:	d10c      	bne.n	80011b2 <takeWifiPass+0xe2>
            		cursorPosition = 1;
 8001198:	4b72      	ldr	r3, [pc, #456]	; (8001364 <takeWifiPass+0x294>)
 800119a:	2201      	movs	r2, #1
 800119c:	601a      	str	r2, [r3, #0]
            		page++;
 800119e:	4b72      	ldr	r3, [pc, #456]	; (8001368 <takeWifiPass+0x298>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	3301      	adds	r3, #1
 80011a4:	4a70      	ldr	r2, [pc, #448]	; (8001368 <takeWifiPass+0x298>)
 80011a6:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 4);
 80011a8:	2104      	movs	r1, #4
 80011aa:	2003      	movs	r0, #3
 80011ac:	f7ff fb00 	bl	80007b0 <printTemplate>
 80011b0:	e024      	b.n	80011fc <takeWifiPass+0x12c>
            	} else if(page == 4) {
 80011b2:	4b6d      	ldr	r3, [pc, #436]	; (8001368 <takeWifiPass+0x298>)
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	2b04      	cmp	r3, #4
 80011b8:	d10c      	bne.n	80011d4 <takeWifiPass+0x104>
            		cursorPosition = 1;
 80011ba:	4b6a      	ldr	r3, [pc, #424]	; (8001364 <takeWifiPass+0x294>)
 80011bc:	2201      	movs	r2, #1
 80011be:	601a      	str	r2, [r3, #0]
            		page++;
 80011c0:	4b69      	ldr	r3, [pc, #420]	; (8001368 <takeWifiPass+0x298>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	3301      	adds	r3, #1
 80011c6:	4a68      	ldr	r2, [pc, #416]	; (8001368 <takeWifiPass+0x298>)
 80011c8:	6013      	str	r3, [r2, #0]
            		printTemplate(3, 5);
 80011ca:	2105      	movs	r1, #5
 80011cc:	2003      	movs	r0, #3
 80011ce:	f7ff faef 	bl	80007b0 <printTemplate>
 80011d2:	e013      	b.n	80011fc <takeWifiPass+0x12c>
            	} else if(page == 5) {
 80011d4:	4b64      	ldr	r3, [pc, #400]	; (8001368 <takeWifiPass+0x298>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b05      	cmp	r3, #5
 80011da:	d10f      	bne.n	80011fc <takeWifiPass+0x12c>
            		cursorPosition = 1;
 80011dc:	4b61      	ldr	r3, [pc, #388]	; (8001364 <takeWifiPass+0x294>)
 80011de:	2201      	movs	r2, #1
 80011e0:	601a      	str	r2, [r3, #0]
            		page = 1;
 80011e2:	4b61      	ldr	r3, [pc, #388]	; (8001368 <takeWifiPass+0x298>)
 80011e4:	2201      	movs	r2, #1
 80011e6:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 80011e8:	2101      	movs	r1, #1
 80011ea:	2003      	movs	r0, #3
 80011ec:	f7ff fae0 	bl	80007b0 <printTemplate>
 80011f0:	e004      	b.n	80011fc <takeWifiPass+0x12c>
            	}
            } else {
            	cursorPosition++;
 80011f2:	4b5c      	ldr	r3, [pc, #368]	; (8001364 <takeWifiPass+0x294>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	3301      	adds	r3, #1
 80011f8:	4a5a      	ldr	r2, [pc, #360]	; (8001364 <takeWifiPass+0x294>)
 80011fa:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 80011fc:	20fa      	movs	r0, #250	; 0xfa
 80011fe:	f007 fe87 	bl	8008f10 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port, butonGeriIn_Pin) == 1) {
 8001202:	2108      	movs	r1, #8
 8001204:	485a      	ldr	r0, [pc, #360]	; (8001370 <takeWifiPass+0x2a0>)
 8001206:	f008 fc53 	bl	8009ab0 <HAL_GPIO_ReadPin>
 800120a:	4603      	mov	r3, r0
 800120c:	2b01      	cmp	r3, #1
 800120e:	d15e      	bne.n	80012ce <takeWifiPass+0x1fe>
        	realCharPos--;
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	3b01      	subs	r3, #1
 8001214:	617b      	str	r3, [r7, #20]
        	if(realCharPos < 1) {
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	2b00      	cmp	r3, #0
 800121a:	dc01      	bgt.n	8001220 <takeWifiPass+0x150>
        	    realCharPos = 80;
 800121c:	2350      	movs	r3, #80	; 0x50
 800121e:	617b      	str	r3, [r7, #20]
        	}
            if(cursorPosition == 1) {
 8001220:	4b50      	ldr	r3, [pc, #320]	; (8001364 <takeWifiPass+0x294>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2b01      	cmp	r3, #1
 8001226:	d14a      	bne.n	80012be <takeWifiPass+0x1ee>
            	if(page == 1) {
 8001228:	4b4f      	ldr	r3, [pc, #316]	; (8001368 <takeWifiPass+0x298>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d10a      	bne.n	8001246 <takeWifiPass+0x176>
            		cursorPosition = 16;
 8001230:	4b4c      	ldr	r3, [pc, #304]	; (8001364 <takeWifiPass+0x294>)
 8001232:	2210      	movs	r2, #16
 8001234:	601a      	str	r2, [r3, #0]
            		page = 5;
 8001236:	4b4c      	ldr	r3, [pc, #304]	; (8001368 <takeWifiPass+0x298>)
 8001238:	2205      	movs	r2, #5
 800123a:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 5);
 800123c:	2105      	movs	r1, #5
 800123e:	2003      	movs	r0, #3
 8001240:	f7ff fab6 	bl	80007b0 <printTemplate>
 8001244:	e040      	b.n	80012c8 <takeWifiPass+0x1f8>
            	} else if(page == 2) {
 8001246:	4b48      	ldr	r3, [pc, #288]	; (8001368 <takeWifiPass+0x298>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	2b02      	cmp	r3, #2
 800124c:	d10a      	bne.n	8001264 <takeWifiPass+0x194>
            		cursorPosition = 16;
 800124e:	4b45      	ldr	r3, [pc, #276]	; (8001364 <takeWifiPass+0x294>)
 8001250:	2210      	movs	r2, #16
 8001252:	601a      	str	r2, [r3, #0]
            		page = 1;
 8001254:	4b44      	ldr	r3, [pc, #272]	; (8001368 <takeWifiPass+0x298>)
 8001256:	2201      	movs	r2, #1
 8001258:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 1);
 800125a:	2101      	movs	r1, #1
 800125c:	2003      	movs	r0, #3
 800125e:	f7ff faa7 	bl	80007b0 <printTemplate>
 8001262:	e031      	b.n	80012c8 <takeWifiPass+0x1f8>
            	} else if(page == 3) {
 8001264:	4b40      	ldr	r3, [pc, #256]	; (8001368 <takeWifiPass+0x298>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2b03      	cmp	r3, #3
 800126a:	d10a      	bne.n	8001282 <takeWifiPass+0x1b2>
            		cursorPosition = 16;
 800126c:	4b3d      	ldr	r3, [pc, #244]	; (8001364 <takeWifiPass+0x294>)
 800126e:	2210      	movs	r2, #16
 8001270:	601a      	str	r2, [r3, #0]
            		page = 2;
 8001272:	4b3d      	ldr	r3, [pc, #244]	; (8001368 <takeWifiPass+0x298>)
 8001274:	2202      	movs	r2, #2
 8001276:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 2);
 8001278:	2102      	movs	r1, #2
 800127a:	2003      	movs	r0, #3
 800127c:	f7ff fa98 	bl	80007b0 <printTemplate>
 8001280:	e022      	b.n	80012c8 <takeWifiPass+0x1f8>
            	} else if(page == 4) {
 8001282:	4b39      	ldr	r3, [pc, #228]	; (8001368 <takeWifiPass+0x298>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2b04      	cmp	r3, #4
 8001288:	d10a      	bne.n	80012a0 <takeWifiPass+0x1d0>
            		cursorPosition = 16;
 800128a:	4b36      	ldr	r3, [pc, #216]	; (8001364 <takeWifiPass+0x294>)
 800128c:	2210      	movs	r2, #16
 800128e:	601a      	str	r2, [r3, #0]
            		page = 3;
 8001290:	4b35      	ldr	r3, [pc, #212]	; (8001368 <takeWifiPass+0x298>)
 8001292:	2203      	movs	r2, #3
 8001294:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 3);
 8001296:	2103      	movs	r1, #3
 8001298:	2003      	movs	r0, #3
 800129a:	f7ff fa89 	bl	80007b0 <printTemplate>
 800129e:	e013      	b.n	80012c8 <takeWifiPass+0x1f8>
            	} else if(page == 5) {
 80012a0:	4b31      	ldr	r3, [pc, #196]	; (8001368 <takeWifiPass+0x298>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2b05      	cmp	r3, #5
 80012a6:	d10f      	bne.n	80012c8 <takeWifiPass+0x1f8>
            		cursorPosition = 16;
 80012a8:	4b2e      	ldr	r3, [pc, #184]	; (8001364 <takeWifiPass+0x294>)
 80012aa:	2210      	movs	r2, #16
 80012ac:	601a      	str	r2, [r3, #0]
            		page = 4;
 80012ae:	4b2e      	ldr	r3, [pc, #184]	; (8001368 <takeWifiPass+0x298>)
 80012b0:	2204      	movs	r2, #4
 80012b2:	601a      	str	r2, [r3, #0]
            		printTemplate(3, 4);
 80012b4:	2104      	movs	r1, #4
 80012b6:	2003      	movs	r0, #3
 80012b8:	f7ff fa7a 	bl	80007b0 <printTemplate>
 80012bc:	e004      	b.n	80012c8 <takeWifiPass+0x1f8>
            	}
            } else {
            	cursorPosition--;
 80012be:	4b29      	ldr	r3, [pc, #164]	; (8001364 <takeWifiPass+0x294>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	3b01      	subs	r3, #1
 80012c4:	4a27      	ldr	r2, [pc, #156]	; (8001364 <takeWifiPass+0x294>)
 80012c6:	6013      	str	r3, [r2, #0]
            }

            HAL_Delay(250);
 80012c8:	20fa      	movs	r0, #250	; 0xfa
 80012ca:	f007 fe21 	bl	8008f10 <HAL_Delay>
        }

        if (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port, butonYukariIn_Pin) == 1) {
 80012ce:	2102      	movs	r1, #2
 80012d0:	4826      	ldr	r0, [pc, #152]	; (800136c <takeWifiPass+0x29c>)
 80012d2:	f008 fbed 	bl	8009ab0 <HAL_GPIO_ReadPin>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b01      	cmp	r3, #1
 80012da:	d11e      	bne.n	800131a <takeWifiPass+0x24a>
        	wifiPass[wifiPassLoc] = getCharFromCursorPosition(realCharPos - 1);
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	3b01      	subs	r3, #1
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff fc5d 	bl	8000ba0 <getCharFromCursorPosition>
 80012e6:	4603      	mov	r3, r0
 80012e8:	4619      	mov	r1, r3
 80012ea:	4a1d      	ldr	r2, [pc, #116]	; (8001360 <takeWifiPass+0x290>)
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	4413      	add	r3, r2
 80012f0:	460a      	mov	r2, r1
 80012f2:	701a      	strb	r2, [r3, #0]

            lcd_print_char(1, writeLoc, wifiPass[wifiPassLoc]);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	b2d9      	uxtb	r1, r3
 80012f8:	4a19      	ldr	r2, [pc, #100]	; (8001360 <takeWifiPass+0x290>)
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	4413      	add	r3, r2
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	461a      	mov	r2, r3
 8001302:	2001      	movs	r0, #1
 8001304:	f7ff f9c5 	bl	8000692 <lcd_print_char>

            writeLoc++;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	3301      	adds	r3, #1
 800130c:	60fb      	str	r3, [r7, #12]
            wifiPassLoc++;
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	3301      	adds	r3, #1
 8001312:	613b      	str	r3, [r7, #16]

            HAL_Delay(250);
 8001314:	20fa      	movs	r0, #250	; 0xfa
 8001316:	f007 fdfb 	bl	8008f10 <HAL_Delay>
        }

        if(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port, butonAsagiIn_Pin) == 1) {
 800131a:	2104      	movs	r1, #4
 800131c:	4813      	ldr	r0, [pc, #76]	; (800136c <takeWifiPass+0x29c>)
 800131e:	f008 fbc7 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8001322:	4603      	mov	r3, r0
 8001324:	2b01      	cmp	r3, #1
 8001326:	d139      	bne.n	800139c <takeWifiPass+0x2cc>
            if(strlen(wifiPass) >= 1) {
 8001328:	4b0d      	ldr	r3, [pc, #52]	; (8001360 <takeWifiPass+0x290>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d032      	beq.n	8001396 <takeWifiPass+0x2c6>
            	wifiPass[wifiPassLoc] = '\0';
 8001330:	4a0b      	ldr	r2, [pc, #44]	; (8001360 <takeWifiPass+0x290>)
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	4413      	add	r3, r2
 8001336:	2200      	movs	r2, #0
 8001338:	701a      	strb	r2, [r3, #0]

            	lcd_delete_char(1, 6+wifiPassLoc);
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	b2db      	uxtb	r3, r3
 800133e:	3306      	adds	r3, #6
 8001340:	b2db      	uxtb	r3, r3
 8001342:	4619      	mov	r1, r3
 8001344:	2001      	movs	r0, #1
 8001346:	f7ff f9c5 	bl	80006d4 <lcd_delete_char>
            	HAL_Delay(50);
 800134a:	2032      	movs	r0, #50	; 0x32
 800134c:	f007 fde0 	bl	8008f10 <HAL_Delay>

            	if(writeLoc > 7) {
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	2b07      	cmp	r3, #7
 8001354:	dd0e      	ble.n	8001374 <takeWifiPass+0x2a4>
            		writeLoc--;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	3b01      	subs	r3, #1
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	e00f      	b.n	800137e <takeWifiPass+0x2ae>
 800135e:	bf00      	nop
 8001360:	20000c14 	.word	0x20000c14
 8001364:	20000944 	.word	0x20000944
 8001368:	20000948 	.word	0x20000948
 800136c:	40010800 	.word	0x40010800
 8001370:	40011000 	.word	0x40011000
            	} else if(writeLoc < 7) {
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	2b06      	cmp	r3, #6
 8001378:	dc01      	bgt.n	800137e <takeWifiPass+0x2ae>
            		writeLoc = 7;
 800137a:	2307      	movs	r3, #7
 800137c:	60fb      	str	r3, [r7, #12]
            	}

            	if(wifiPassLoc > 0) {
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	2b00      	cmp	r3, #0
 8001382:	dd03      	ble.n	800138c <takeWifiPass+0x2bc>
            		wifiPassLoc--;
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	3b01      	subs	r3, #1
 8001388:	613b      	str	r3, [r7, #16]
 800138a:	e004      	b.n	8001396 <takeWifiPass+0x2c6>
            	} else if(wifiPassLoc < 0) {
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	2b00      	cmp	r3, #0
 8001390:	da01      	bge.n	8001396 <takeWifiPass+0x2c6>
            		wifiPassLoc = 0;
 8001392:	2300      	movs	r3, #0
 8001394:	613b      	str	r3, [r7, #16]
            	}
            }

            HAL_Delay(250);
 8001396:	20fa      	movs	r0, #250	; 0xfa
 8001398:	f007 fdba 	bl	8008f10 <HAL_Delay>
        }

        lcd_gotoxy(2, cursorPosition);
 800139c:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <takeWifiPass+0x2e4>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	4619      	mov	r1, r3
 80013a4:	2002      	movs	r0, #2
 80013a6:	f7ff f940 	bl	800062a <lcd_gotoxy>
        if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) == 1) {
 80013aa:	e6b1      	b.n	8001110 <takeWifiPass+0x40>
    }
}
 80013ac:	bf00      	nop
 80013ae:	3718      	adds	r7, #24
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	20000944 	.word	0x20000944

080013b8 <slideText>:

void slideText(const char* text, int startPos, int startLine) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b088      	sub	sp, #32
 80013bc:	af00      	add	r7, sp, #0
 80013be:	60f8      	str	r0, [r7, #12]
 80013c0:	60b9      	str	r1, [r7, #8]
 80013c2:	607a      	str	r2, [r7, #4]
	uint8_t uzunluk = strlen(text);
 80013c4:	68f8      	ldr	r0, [r7, #12]
 80013c6:	f7fe ff2d 	bl	8000224 <strlen>
 80013ca:	4603      	mov	r3, r0
 80013cc:	74fb      	strb	r3, [r7, #19]

	for(int z=0; z < uzunluk; z++) {
 80013ce:	2300      	movs	r3, #0
 80013d0:	61fb      	str	r3, [r7, #28]
 80013d2:	e041      	b.n	8001458 <slideText+0xa0>
		for(int i=startPos + z; i < uzunluk + startPos; i++) {
 80013d4:	68ba      	ldr	r2, [r7, #8]
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	4413      	add	r3, r2
 80013da:	61bb      	str	r3, [r7, #24]
 80013dc:	e017      	b.n	800140e <slideText+0x56>
			lcd_print_char(startLine, i-z, text[i-startPos]);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	b2d8      	uxtb	r0, r3
 80013e2:	69bb      	ldr	r3, [r7, #24]
 80013e4:	b2da      	uxtb	r2, r3
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	b2d9      	uxtb	r1, r3
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	461a      	mov	r2, r3
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	4413      	add	r3, r2
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	461a      	mov	r2, r3
 80013fe:	f7ff f948 	bl	8000692 <lcd_print_char>
			HAL_Delay(7);
 8001402:	2007      	movs	r0, #7
 8001404:	f007 fd84 	bl	8008f10 <HAL_Delay>
		for(int i=startPos + z; i < uzunluk + startPos; i++) {
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	3301      	adds	r3, #1
 800140c:	61bb      	str	r3, [r7, #24]
 800140e:	7cfa      	ldrb	r2, [r7, #19]
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	4413      	add	r3, r2
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	429a      	cmp	r2, r3
 8001418:	dbe1      	blt.n	80013de <slideText+0x26>
		}

		for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 800141a:	7cfb      	ldrb	r3, [r7, #19]
 800141c:	3b01      	subs	r3, #1
 800141e:	617b      	str	r3, [r7, #20]
 8001420:	e011      	b.n	8001446 <slideText+0x8e>
		     if(j >= startPos) {
 8001422:	697a      	ldr	r2, [r7, #20]
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	429a      	cmp	r2, r3
 8001428:	db0a      	blt.n	8001440 <slideText+0x88>
		    	 lcd_print_char(startLine, j, ' ');
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	b2db      	uxtb	r3, r3
 800142e:	697a      	ldr	r2, [r7, #20]
 8001430:	b2d1      	uxtb	r1, r2
 8001432:	2220      	movs	r2, #32
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff f92c 	bl	8000692 <lcd_print_char>
		    	 HAL_Delay(7);
 800143a:	2007      	movs	r0, #7
 800143c:	f007 fd68 	bl	8008f10 <HAL_Delay>
		for (int j = uzunluk - 1; j >= uzunluk - z; j--) {
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	3b01      	subs	r3, #1
 8001444:	617b      	str	r3, [r7, #20]
 8001446:	7cfa      	ldrb	r2, [r7, #19]
 8001448:	69fb      	ldr	r3, [r7, #28]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	697a      	ldr	r2, [r7, #20]
 800144e:	429a      	cmp	r2, r3
 8001450:	dae7      	bge.n	8001422 <slideText+0x6a>
	for(int z=0; z < uzunluk; z++) {
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	3301      	adds	r3, #1
 8001456:	61fb      	str	r3, [r7, #28]
 8001458:	7cfb      	ldrb	r3, [r7, #19]
 800145a:	69fa      	ldr	r2, [r7, #28]
 800145c:	429a      	cmp	r2, r3
 800145e:	dbb9      	blt.n	80013d4 <slideText+0x1c>
		     }
		}
	}
}
 8001460:	bf00      	nop
 8001462:	bf00      	nop
 8001464:	3720      	adds	r7, #32
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
	...

0800146c <menu>:

void menu(I2C_HandleTypeDef *hi2c1) {
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 8001474:	2101      	movs	r1, #1
 8001476:	488f      	ldr	r0, [pc, #572]	; (80016b4 <menu+0x248>)
 8001478:	f008 fb1a 	bl	8009ab0 <HAL_GPIO_ReadPin>
 800147c:	4603      	mov	r3, r0
 800147e:	2b01      	cmp	r3, #1
 8001480:	f040 808e 	bne.w	80015a0 <menu+0x134>
 8001484:	4b8c      	ldr	r3, [pc, #560]	; (80016b8 <menu+0x24c>)
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	f083 0301 	eor.w	r3, r3, #1
 800148c:	b2db      	uxtb	r3, r3
 800148e:	2b00      	cmp	r3, #0
 8001490:	f000 8086 	beq.w	80015a0 <menu+0x134>
		menuSayac = menuSayac+1;
 8001494:	4b89      	ldr	r3, [pc, #548]	; (80016bc <menu+0x250>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	3301      	adds	r3, #1
 800149a:	b2da      	uxtb	r2, r3
 800149c:	4b87      	ldr	r3, [pc, #540]	; (80016bc <menu+0x250>)
 800149e:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 36) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 80014a0:	4b86      	ldr	r3, [pc, #536]	; (80016bc <menu+0x250>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b24      	cmp	r3, #36	; 0x24
 80014a6:	d102      	bne.n	80014ae <menu+0x42>
			menuSayac = 1;
 80014a8:	4b84      	ldr	r3, [pc, #528]	; (80016bc <menu+0x250>)
 80014aa:	2201      	movs	r2, #1
 80014ac:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 80014ae:	4b83      	ldr	r3, [pc, #524]	; (80016bc <menu+0x250>)
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	2b12      	cmp	r3, #18
 80014b4:	d106      	bne.n	80014c4 <menu+0x58>
 80014b6:	4b82      	ldr	r3, [pc, #520]	; (80016c0 <menu+0x254>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d102      	bne.n	80014c4 <menu+0x58>
			menuSayac = 21;
 80014be:	4b7f      	ldr	r3, [pc, #508]	; (80016bc <menu+0x250>)
 80014c0:	2215      	movs	r2, #21
 80014c2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 80014c4:	4b7d      	ldr	r3, [pc, #500]	; (80016bc <menu+0x250>)
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	2b08      	cmp	r3, #8
 80014ca:	d106      	bne.n	80014da <menu+0x6e>
 80014cc:	4b7d      	ldr	r3, [pc, #500]	; (80016c4 <menu+0x258>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d102      	bne.n	80014da <menu+0x6e>
			menuSayac = 16;
 80014d4:	4b79      	ldr	r3, [pc, #484]	; (80016bc <menu+0x250>)
 80014d6:	2210      	movs	r2, #16
 80014d8:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 80014da:	4b78      	ldr	r3, [pc, #480]	; (80016bc <menu+0x250>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	2b0d      	cmp	r3, #13
 80014e0:	d106      	bne.n	80014f0 <menu+0x84>
 80014e2:	4b78      	ldr	r3, [pc, #480]	; (80016c4 <menu+0x258>)
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d102      	bne.n	80014f0 <menu+0x84>
			menuSayac = 16;
 80014ea:	4b74      	ldr	r3, [pc, #464]	; (80016bc <menu+0x250>)
 80014ec:	2210      	movs	r2, #16
 80014ee:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 80014f0:	4b72      	ldr	r3, [pc, #456]	; (80016bc <menu+0x250>)
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b09      	cmp	r3, #9
 80014f6:	d106      	bne.n	8001506 <menu+0x9a>
 80014f8:	4b72      	ldr	r3, [pc, #456]	; (80016c4 <menu+0x258>)
 80014fa:	781b      	ldrb	r3, [r3, #0]
 80014fc:	2b02      	cmp	r3, #2
 80014fe:	d102      	bne.n	8001506 <menu+0x9a>
			menuSayac = 13;
 8001500:	4b6e      	ldr	r3, [pc, #440]	; (80016bc <menu+0x250>)
 8001502:	220d      	movs	r2, #13
 8001504:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8001506:	4b6d      	ldr	r3, [pc, #436]	; (80016bc <menu+0x250>)
 8001508:	781b      	ldrb	r3, [r3, #0]
 800150a:	2b0a      	cmp	r3, #10
 800150c:	d10a      	bne.n	8001524 <menu+0xb8>
 800150e:	4b6e      	ldr	r3, [pc, #440]	; (80016c8 <menu+0x25c>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	2b01      	cmp	r3, #1
 8001514:	d003      	beq.n	800151e <menu+0xb2>
 8001516:	4b6c      	ldr	r3, [pc, #432]	; (80016c8 <menu+0x25c>)
 8001518:	781b      	ldrb	r3, [r3, #0]
 800151a:	2b02      	cmp	r3, #2
 800151c:	d102      	bne.n	8001524 <menu+0xb8>
			menuSayac = 11;
 800151e:	4b67      	ldr	r3, [pc, #412]	; (80016bc <menu+0x250>)
 8001520:	220b      	movs	r2, #11
 8001522:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 8001524:	4b65      	ldr	r3, [pc, #404]	; (80016bc <menu+0x250>)
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	2b0c      	cmp	r3, #12
 800152a:	d10e      	bne.n	800154a <menu+0xde>
 800152c:	4b67      	ldr	r3, [pc, #412]	; (80016cc <menu+0x260>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b01      	cmp	r3, #1
 8001532:	d003      	beq.n	800153c <menu+0xd0>
 8001534:	4b65      	ldr	r3, [pc, #404]	; (80016cc <menu+0x260>)
 8001536:	781b      	ldrb	r3, [r3, #0]
 8001538:	2b02      	cmp	r3, #2
 800153a:	d106      	bne.n	800154a <menu+0xde>
 800153c:	4b61      	ldr	r3, [pc, #388]	; (80016c4 <menu+0x258>)
 800153e:	781b      	ldrb	r3, [r3, #0]
 8001540:	2b01      	cmp	r3, #1
 8001542:	d102      	bne.n	800154a <menu+0xde>
			menuSayac = 16;
 8001544:	4b5d      	ldr	r3, [pc, #372]	; (80016bc <menu+0x250>)
 8001546:	2210      	movs	r2, #16
 8001548:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 800154a:	4b5c      	ldr	r3, [pc, #368]	; (80016bc <menu+0x250>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	2b0c      	cmp	r3, #12
 8001550:	d10e      	bne.n	8001570 <menu+0x104>
 8001552:	4b5e      	ldr	r3, [pc, #376]	; (80016cc <menu+0x260>)
 8001554:	781b      	ldrb	r3, [r3, #0]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d003      	beq.n	8001562 <menu+0xf6>
 800155a:	4b5c      	ldr	r3, [pc, #368]	; (80016cc <menu+0x260>)
 800155c:	781b      	ldrb	r3, [r3, #0]
 800155e:	2b02      	cmp	r3, #2
 8001560:	d106      	bne.n	8001570 <menu+0x104>
 8001562:	4b58      	ldr	r3, [pc, #352]	; (80016c4 <menu+0x258>)
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	2b03      	cmp	r3, #3
 8001568:	d102      	bne.n	8001570 <menu+0x104>
			menuSayac = 13;
 800156a:	4b54      	ldr	r3, [pc, #336]	; (80016bc <menu+0x250>)
 800156c:	220d      	movs	r2, #13
 800156e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8001570:	4b52      	ldr	r3, [pc, #328]	; (80016bc <menu+0x250>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	2b0f      	cmp	r3, #15
 8001576:	d106      	bne.n	8001586 <menu+0x11a>
 8001578:	4b55      	ldr	r3, [pc, #340]	; (80016d0 <menu+0x264>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d102      	bne.n	8001586 <menu+0x11a>
			menuSayac = 16;
 8001580:	4b4e      	ldr	r3, [pc, #312]	; (80016bc <menu+0x250>)
 8001582:	2210      	movs	r2, #16
 8001584:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 8001586:	4b4d      	ldr	r3, [pc, #308]	; (80016bc <menu+0x250>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	2b18      	cmp	r3, #24
 800158c:	d106      	bne.n	800159c <menu+0x130>
 800158e:	4b4c      	ldr	r3, [pc, #304]	; (80016c0 <menu+0x254>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d102      	bne.n	800159c <menu+0x130>
			menuSayac = 26;
 8001596:	4b49      	ldr	r3, [pc, #292]	; (80016bc <menu+0x250>)
 8001598:	221a      	movs	r2, #26
 800159a:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 800159c:	f004 fcf0 	bl	8005f80 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 80015a0:	2108      	movs	r1, #8
 80015a2:	484c      	ldr	r0, [pc, #304]	; (80016d4 <menu+0x268>)
 80015a4:	f008 fa84 	bl	8009ab0 <HAL_GPIO_ReadPin>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b01      	cmp	r3, #1
 80015ac:	d175      	bne.n	800169a <menu+0x22e>
 80015ae:	4b42      	ldr	r3, [pc, #264]	; (80016b8 <menu+0x24c>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	f083 0301 	eor.w	r3, r3, #1
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d06e      	beq.n	800169a <menu+0x22e>
		if (menuSayac <= 1) {
 80015bc:	4b3f      	ldr	r3, [pc, #252]	; (80016bc <menu+0x250>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d802      	bhi.n	80015ca <menu+0x15e>
			menuSayac = 36;     //MENÜ BÜYÜDÜKÇE DUZENLE
 80015c4:	4b3d      	ldr	r3, [pc, #244]	; (80016bc <menu+0x250>)
 80015c6:	2224      	movs	r2, #36	; 0x24
 80015c8:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 80015ca:	4b3c      	ldr	r3, [pc, #240]	; (80016bc <menu+0x250>)
 80015cc:	781b      	ldrb	r3, [r3, #0]
 80015ce:	3b01      	subs	r3, #1
 80015d0:	b2da      	uxtb	r2, r3
 80015d2:	4b3a      	ldr	r3, [pc, #232]	; (80016bc <menu+0x250>)
 80015d4:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 80015d6:	4b39      	ldr	r3, [pc, #228]	; (80016bc <menu+0x250>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b14      	cmp	r3, #20
 80015dc:	d106      	bne.n	80015ec <menu+0x180>
 80015de:	4b38      	ldr	r3, [pc, #224]	; (80016c0 <menu+0x254>)
 80015e0:	781b      	ldrb	r3, [r3, #0]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d102      	bne.n	80015ec <menu+0x180>
			menuSayac = 17;
 80015e6:	4b35      	ldr	r3, [pc, #212]	; (80016bc <menu+0x250>)
 80015e8:	2211      	movs	r2, #17
 80015ea:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 80015ec:	4b33      	ldr	r3, [pc, #204]	; (80016bc <menu+0x250>)
 80015ee:	781b      	ldrb	r3, [r3, #0]
 80015f0:	2b0f      	cmp	r3, #15
 80015f2:	d106      	bne.n	8001602 <menu+0x196>
 80015f4:	4b33      	ldr	r3, [pc, #204]	; (80016c4 <menu+0x258>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d102      	bne.n	8001602 <menu+0x196>
			menuSayac = 7;
 80015fc:	4b2f      	ldr	r3, [pc, #188]	; (80016bc <menu+0x250>)
 80015fe:	2207      	movs	r2, #7
 8001600:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 8001602:	4b2e      	ldr	r3, [pc, #184]	; (80016bc <menu+0x250>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b0f      	cmp	r3, #15
 8001608:	d106      	bne.n	8001618 <menu+0x1ac>
 800160a:	4b2e      	ldr	r3, [pc, #184]	; (80016c4 <menu+0x258>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	2b01      	cmp	r3, #1
 8001610:	d102      	bne.n	8001618 <menu+0x1ac>
			menuSayac = 12;
 8001612:	4b2a      	ldr	r3, [pc, #168]	; (80016bc <menu+0x250>)
 8001614:	220c      	movs	r2, #12
 8001616:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8001618:	4b28      	ldr	r3, [pc, #160]	; (80016bc <menu+0x250>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	2b0c      	cmp	r3, #12
 800161e:	d106      	bne.n	800162e <menu+0x1c2>
 8001620:	4b28      	ldr	r3, [pc, #160]	; (80016c4 <menu+0x258>)
 8001622:	781b      	ldrb	r3, [r3, #0]
 8001624:	2b02      	cmp	r3, #2
 8001626:	d102      	bne.n	800162e <menu+0x1c2>
			menuSayac = 8;
 8001628:	4b24      	ldr	r3, [pc, #144]	; (80016bc <menu+0x250>)
 800162a:	2208      	movs	r2, #8
 800162c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 800162e:	4b23      	ldr	r3, [pc, #140]	; (80016bc <menu+0x250>)
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	2b0a      	cmp	r3, #10
 8001634:	d10a      	bne.n	800164c <menu+0x1e0>
 8001636:	4b24      	ldr	r3, [pc, #144]	; (80016c8 <menu+0x25c>)
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d003      	beq.n	8001646 <menu+0x1da>
 800163e:	4b22      	ldr	r3, [pc, #136]	; (80016c8 <menu+0x25c>)
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	2b02      	cmp	r3, #2
 8001644:	d102      	bne.n	800164c <menu+0x1e0>
			menuSayac = 9;
 8001646:	4b1d      	ldr	r3, [pc, #116]	; (80016bc <menu+0x250>)
 8001648:	2209      	movs	r2, #9
 800164a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 800164c:	4b1b      	ldr	r3, [pc, #108]	; (80016bc <menu+0x250>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b0c      	cmp	r3, #12
 8001652:	d10a      	bne.n	800166a <menu+0x1fe>
 8001654:	4b1d      	ldr	r3, [pc, #116]	; (80016cc <menu+0x260>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b01      	cmp	r3, #1
 800165a:	d003      	beq.n	8001664 <menu+0x1f8>
 800165c:	4b1b      	ldr	r3, [pc, #108]	; (80016cc <menu+0x260>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	2b02      	cmp	r3, #2
 8001662:	d102      	bne.n	800166a <menu+0x1fe>
			menuSayac = 11;
 8001664:	4b15      	ldr	r3, [pc, #84]	; (80016bc <menu+0x250>)
 8001666:	220b      	movs	r2, #11
 8001668:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 800166a:	4b14      	ldr	r3, [pc, #80]	; (80016bc <menu+0x250>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	2b0f      	cmp	r3, #15
 8001670:	d106      	bne.n	8001680 <menu+0x214>
 8001672:	4b17      	ldr	r3, [pc, #92]	; (80016d0 <menu+0x264>)
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d102      	bne.n	8001680 <menu+0x214>
			menuSayac = 14;
 800167a:	4b10      	ldr	r3, [pc, #64]	; (80016bc <menu+0x250>)
 800167c:	220e      	movs	r2, #14
 800167e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 8001680:	4b0e      	ldr	r3, [pc, #56]	; (80016bc <menu+0x250>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b19      	cmp	r3, #25
 8001686:	d106      	bne.n	8001696 <menu+0x22a>
 8001688:	4b0d      	ldr	r3, [pc, #52]	; (80016c0 <menu+0x254>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d102      	bne.n	8001696 <menu+0x22a>
			menuSayac = 23;
 8001690:	4b0a      	ldr	r3, [pc, #40]	; (80016bc <menu+0x250>)
 8001692:	2217      	movs	r2, #23
 8001694:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8001696:	f004 fc73 	bl	8005f80 <bekle>
	}

	if (menuSayac == 0) {
 800169a:	4b08      	ldr	r3, [pc, #32]	; (80016bc <menu+0x250>)
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d134      	bne.n	800170c <menu+0x2a0>
		if(dilSecim == 0) {
 80016a2:	4b0d      	ldr	r3, [pc, #52]	; (80016d8 <menu+0x26c>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d122      	bne.n	80016f0 <menu+0x284>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 80016aa:	4a0c      	ldr	r2, [pc, #48]	; (80016dc <menu+0x270>)
 80016ac:	2101      	movs	r1, #1
 80016ae:	2001      	movs	r0, #1
 80016b0:	e016      	b.n	80016e0 <menu+0x274>
 80016b2:	bf00      	nop
 80016b4:	40010800 	.word	0x40010800
 80016b8:	20000c68 	.word	0x20000c68
 80016bc:	20000c39 	.word	0x20000c39
 80016c0:	20000c48 	.word	0x20000c48
 80016c4:	20000c41 	.word	0x20000c41
 80016c8:	20000c42 	.word	0x20000c42
 80016cc:	20000c43 	.word	0x20000c43
 80016d0:	20000c44 	.word	0x20000c44
 80016d4:	40011000 	.word	0x40011000
 80016d8:	20000c5a 	.word	0x20000c5a
 80016dc:	0800d768 	.word	0x0800d768
 80016e0:	f7fe ffc2 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 80016e4:	4a94      	ldr	r2, [pc, #592]	; (8001938 <menu+0x4cc>)
 80016e6:	2101      	movs	r1, #1
 80016e8:	2002      	movs	r0, #2
 80016ea:	f7fe ffbd 	bl	8000668 <lcd_print>
 80016ee:	e00d      	b.n	800170c <menu+0x2a0>
		} else if(dilSecim  ==  1) {
 80016f0:	4b92      	ldr	r3, [pc, #584]	; (800193c <menu+0x4d0>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d109      	bne.n	800170c <menu+0x2a0>
			lcd_print(1, 1, "ENTERED THE MENU");
 80016f8:	4a91      	ldr	r2, [pc, #580]	; (8001940 <menu+0x4d4>)
 80016fa:	2101      	movs	r1, #1
 80016fc:	2001      	movs	r0, #1
 80016fe:	f7fe ffb3 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 8001702:	4a90      	ldr	r2, [pc, #576]	; (8001944 <menu+0x4d8>)
 8001704:	2101      	movs	r1, #1
 8001706:	2002      	movs	r0, #2
 8001708:	f7fe ffae 	bl	8000668 <lcd_print>
		}
	}

	if (menuSayac == 1) {
 800170c:	4b8e      	ldr	r3, [pc, #568]	; (8001948 <menu+0x4dc>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b01      	cmp	r3, #1
 8001712:	f040 82b5 	bne.w	8001c80 <menu+0x814>
		if(dilSecim == 0) {
 8001716:	4b89      	ldr	r3, [pc, #548]	; (800193c <menu+0x4d0>)
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d105      	bne.n	800172a <menu+0x2be>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 800171e:	4a8b      	ldr	r2, [pc, #556]	; (800194c <menu+0x4e0>)
 8001720:	2101      	movs	r1, #1
 8001722:	2001      	movs	r0, #1
 8001724:	f7fe ffa0 	bl	8000668 <lcd_print>
 8001728:	e008      	b.n	800173c <menu+0x2d0>
		} else if(dilSecim == 1) {
 800172a:	4b84      	ldr	r3, [pc, #528]	; (800193c <menu+0x4d0>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b01      	cmp	r3, #1
 8001730:	d104      	bne.n	800173c <menu+0x2d0>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 8001732:	4a87      	ldr	r2, [pc, #540]	; (8001950 <menu+0x4e4>)
 8001734:	2101      	movs	r1, #1
 8001736:	2001      	movs	r0, #1
 8001738:	f7fe ff96 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 800173c:	4b85      	ldr	r3, [pc, #532]	; (8001954 <menu+0x4e8>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d123      	bne.n	800178c <menu+0x320>
			if(dilSecim == 0) {
 8001744:	4b7d      	ldr	r3, [pc, #500]	; (800193c <menu+0x4d0>)
 8001746:	781b      	ldrb	r3, [r3, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d105      	bne.n	8001758 <menu+0x2ec>
				lcd_print(2, 1, "1.Hata Kodu: ");
 800174c:	4a82      	ldr	r2, [pc, #520]	; (8001958 <menu+0x4ec>)
 800174e:	2101      	movs	r1, #1
 8001750:	2002      	movs	r0, #2
 8001752:	f7fe ff89 	bl	8000668 <lcd_print>
 8001756:	e008      	b.n	800176a <menu+0x2fe>

			} else if(dilSecim == 1) {
 8001758:	4b78      	ldr	r3, [pc, #480]	; (800193c <menu+0x4d0>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d104      	bne.n	800176a <menu+0x2fe>
				lcd_print(2, 1, "1.Error Code:");
 8001760:	4a7e      	ldr	r2, [pc, #504]	; (800195c <menu+0x4f0>)
 8001762:	2101      	movs	r1, #1
 8001764:	2002      	movs	r0, #2
 8001766:	f7fe ff7f 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "   ");
 800176a:	4a7d      	ldr	r2, [pc, #500]	; (8001960 <menu+0x4f4>)
 800176c:	210f      	movs	r1, #15
 800176e:	2002      	movs	r0, #2
 8001770:	f7fe ff7a 	bl	8000668 <lcd_print>
			itoa(hataKayit1, snum, 10);
 8001774:	4b7b      	ldr	r3, [pc, #492]	; (8001964 <menu+0x4f8>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	220a      	movs	r2, #10
 800177a:	497b      	ldr	r1, [pc, #492]	; (8001968 <menu+0x4fc>)
 800177c:	4618      	mov	r0, r3
 800177e:	f00b f9c3 	bl	800cb08 <itoa>
			lcd_print(2, 14, snum);
 8001782:	4a79      	ldr	r2, [pc, #484]	; (8001968 <menu+0x4fc>)
 8001784:	210e      	movs	r1, #14
 8001786:	2002      	movs	r0, #2
 8001788:	f7fe ff6e 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 800178c:	4b71      	ldr	r3, [pc, #452]	; (8001954 <menu+0x4e8>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b01      	cmp	r3, #1
 8001792:	d123      	bne.n	80017dc <menu+0x370>
			if(dilSecim == 0) {
 8001794:	4b69      	ldr	r3, [pc, #420]	; (800193c <menu+0x4d0>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d105      	bne.n	80017a8 <menu+0x33c>
				lcd_print(2, 1, "2.Hata Kodu: ");
 800179c:	4a73      	ldr	r2, [pc, #460]	; (800196c <menu+0x500>)
 800179e:	2101      	movs	r1, #1
 80017a0:	2002      	movs	r0, #2
 80017a2:	f7fe ff61 	bl	8000668 <lcd_print>
 80017a6:	e008      	b.n	80017ba <menu+0x34e>
			} else if(dilSecim == 1) {
 80017a8:	4b64      	ldr	r3, [pc, #400]	; (800193c <menu+0x4d0>)
 80017aa:	781b      	ldrb	r3, [r3, #0]
 80017ac:	2b01      	cmp	r3, #1
 80017ae:	d104      	bne.n	80017ba <menu+0x34e>
				lcd_print(2, 1, "2.Error Code:");
 80017b0:	4a6f      	ldr	r2, [pc, #444]	; (8001970 <menu+0x504>)
 80017b2:	2101      	movs	r1, #1
 80017b4:	2002      	movs	r0, #2
 80017b6:	f7fe ff57 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80017ba:	4a6e      	ldr	r2, [pc, #440]	; (8001974 <menu+0x508>)
 80017bc:	210f      	movs	r1, #15
 80017be:	2002      	movs	r0, #2
 80017c0:	f7fe ff52 	bl	8000668 <lcd_print>
			itoa(hataKayit2, snum, 10);
 80017c4:	4b6c      	ldr	r3, [pc, #432]	; (8001978 <menu+0x50c>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	220a      	movs	r2, #10
 80017ca:	4967      	ldr	r1, [pc, #412]	; (8001968 <menu+0x4fc>)
 80017cc:	4618      	mov	r0, r3
 80017ce:	f00b f99b 	bl	800cb08 <itoa>
			lcd_print(2, 14, snum);
 80017d2:	4a65      	ldr	r2, [pc, #404]	; (8001968 <menu+0x4fc>)
 80017d4:	210e      	movs	r1, #14
 80017d6:	2002      	movs	r0, #2
 80017d8:	f7fe ff46 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 2) {
 80017dc:	4b5d      	ldr	r3, [pc, #372]	; (8001954 <menu+0x4e8>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b02      	cmp	r3, #2
 80017e2:	d123      	bne.n	800182c <menu+0x3c0>
			if(dilSecim == 0) {
 80017e4:	4b55      	ldr	r3, [pc, #340]	; (800193c <menu+0x4d0>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d105      	bne.n	80017f8 <menu+0x38c>
				lcd_print(2, 1, "3.Hata Kodu: ");
 80017ec:	4a63      	ldr	r2, [pc, #396]	; (800197c <menu+0x510>)
 80017ee:	2101      	movs	r1, #1
 80017f0:	2002      	movs	r0, #2
 80017f2:	f7fe ff39 	bl	8000668 <lcd_print>
 80017f6:	e008      	b.n	800180a <menu+0x39e>
			} else if(dilSecim == 1) {
 80017f8:	4b50      	ldr	r3, [pc, #320]	; (800193c <menu+0x4d0>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d104      	bne.n	800180a <menu+0x39e>
				lcd_print(2, 1, "3.Error Code:");
 8001800:	4a5f      	ldr	r2, [pc, #380]	; (8001980 <menu+0x514>)
 8001802:	2101      	movs	r1, #1
 8001804:	2002      	movs	r0, #2
 8001806:	f7fe ff2f 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800180a:	4a5a      	ldr	r2, [pc, #360]	; (8001974 <menu+0x508>)
 800180c:	210f      	movs	r1, #15
 800180e:	2002      	movs	r0, #2
 8001810:	f7fe ff2a 	bl	8000668 <lcd_print>
			itoa(hataKayit3, snum, 10);
 8001814:	4b5b      	ldr	r3, [pc, #364]	; (8001984 <menu+0x518>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	220a      	movs	r2, #10
 800181a:	4953      	ldr	r1, [pc, #332]	; (8001968 <menu+0x4fc>)
 800181c:	4618      	mov	r0, r3
 800181e:	f00b f973 	bl	800cb08 <itoa>
			lcd_print(2, 14, snum);
 8001822:	4a51      	ldr	r2, [pc, #324]	; (8001968 <menu+0x4fc>)
 8001824:	210e      	movs	r1, #14
 8001826:	2002      	movs	r0, #2
 8001828:	f7fe ff1e 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 800182c:	4b49      	ldr	r3, [pc, #292]	; (8001954 <menu+0x4e8>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b03      	cmp	r3, #3
 8001832:	d123      	bne.n	800187c <menu+0x410>
			if(dilSecim == 0) {
 8001834:	4b41      	ldr	r3, [pc, #260]	; (800193c <menu+0x4d0>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d105      	bne.n	8001848 <menu+0x3dc>
				lcd_print(2, 1, "4.Hata Kodu: ");
 800183c:	4a52      	ldr	r2, [pc, #328]	; (8001988 <menu+0x51c>)
 800183e:	2101      	movs	r1, #1
 8001840:	2002      	movs	r0, #2
 8001842:	f7fe ff11 	bl	8000668 <lcd_print>
 8001846:	e008      	b.n	800185a <menu+0x3ee>
			} else if(dilSecim == 1) {
 8001848:	4b3c      	ldr	r3, [pc, #240]	; (800193c <menu+0x4d0>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b01      	cmp	r3, #1
 800184e:	d104      	bne.n	800185a <menu+0x3ee>
				lcd_print(2, 1, "4.Error Code:");
 8001850:	4a4e      	ldr	r2, [pc, #312]	; (800198c <menu+0x520>)
 8001852:	2101      	movs	r1, #1
 8001854:	2002      	movs	r0, #2
 8001856:	f7fe ff07 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 800185a:	4a46      	ldr	r2, [pc, #280]	; (8001974 <menu+0x508>)
 800185c:	210f      	movs	r1, #15
 800185e:	2002      	movs	r0, #2
 8001860:	f7fe ff02 	bl	8000668 <lcd_print>
			itoa(hataKayit4, snum, 10);
 8001864:	4b4a      	ldr	r3, [pc, #296]	; (8001990 <menu+0x524>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	220a      	movs	r2, #10
 800186a:	493f      	ldr	r1, [pc, #252]	; (8001968 <menu+0x4fc>)
 800186c:	4618      	mov	r0, r3
 800186e:	f00b f94b 	bl	800cb08 <itoa>
			lcd_print(2, 14, snum);
 8001872:	4a3d      	ldr	r2, [pc, #244]	; (8001968 <menu+0x4fc>)
 8001874:	210e      	movs	r1, #14
 8001876:	2002      	movs	r0, #2
 8001878:	f7fe fef6 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 800187c:	4b35      	ldr	r3, [pc, #212]	; (8001954 <menu+0x4e8>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b04      	cmp	r3, #4
 8001882:	d123      	bne.n	80018cc <menu+0x460>
			if(dilSecim == 0) {
 8001884:	4b2d      	ldr	r3, [pc, #180]	; (800193c <menu+0x4d0>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d105      	bne.n	8001898 <menu+0x42c>
				lcd_print(2, 1, "5.Hata Kodu: ");
 800188c:	4a41      	ldr	r2, [pc, #260]	; (8001994 <menu+0x528>)
 800188e:	2101      	movs	r1, #1
 8001890:	2002      	movs	r0, #2
 8001892:	f7fe fee9 	bl	8000668 <lcd_print>
 8001896:	e008      	b.n	80018aa <menu+0x43e>
			} else if(dilSecim == 1) {
 8001898:	4b28      	ldr	r3, [pc, #160]	; (800193c <menu+0x4d0>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	2b01      	cmp	r3, #1
 800189e:	d104      	bne.n	80018aa <menu+0x43e>
				lcd_print(2, 1, "5.Error Code:");
 80018a0:	4a3d      	ldr	r2, [pc, #244]	; (8001998 <menu+0x52c>)
 80018a2:	2101      	movs	r1, #1
 80018a4:	2002      	movs	r0, #2
 80018a6:	f7fe fedf 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80018aa:	4a32      	ldr	r2, [pc, #200]	; (8001974 <menu+0x508>)
 80018ac:	210f      	movs	r1, #15
 80018ae:	2002      	movs	r0, #2
 80018b0:	f7fe feda 	bl	8000668 <lcd_print>
			itoa(hataKayit5, snum, 10);
 80018b4:	4b39      	ldr	r3, [pc, #228]	; (800199c <menu+0x530>)
 80018b6:	781b      	ldrb	r3, [r3, #0]
 80018b8:	220a      	movs	r2, #10
 80018ba:	492b      	ldr	r1, [pc, #172]	; (8001968 <menu+0x4fc>)
 80018bc:	4618      	mov	r0, r3
 80018be:	f00b f923 	bl	800cb08 <itoa>
			lcd_print(2, 14, snum);
 80018c2:	4a29      	ldr	r2, [pc, #164]	; (8001968 <menu+0x4fc>)
 80018c4:	210e      	movs	r1, #14
 80018c6:	2002      	movs	r0, #2
 80018c8:	f7fe fece 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 80018cc:	4b21      	ldr	r3, [pc, #132]	; (8001954 <menu+0x4e8>)
 80018ce:	781b      	ldrb	r3, [r3, #0]
 80018d0:	2b05      	cmp	r3, #5
 80018d2:	d123      	bne.n	800191c <menu+0x4b0>
			if(dilSecim == 0) {
 80018d4:	4b19      	ldr	r3, [pc, #100]	; (800193c <menu+0x4d0>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d105      	bne.n	80018e8 <menu+0x47c>
				lcd_print(2, 1, "6.Hata Kodu: ");
 80018dc:	4a30      	ldr	r2, [pc, #192]	; (80019a0 <menu+0x534>)
 80018de:	2101      	movs	r1, #1
 80018e0:	2002      	movs	r0, #2
 80018e2:	f7fe fec1 	bl	8000668 <lcd_print>
 80018e6:	e008      	b.n	80018fa <menu+0x48e>
			} else if(dilSecim == 1) {
 80018e8:	4b14      	ldr	r3, [pc, #80]	; (800193c <menu+0x4d0>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d104      	bne.n	80018fa <menu+0x48e>
				lcd_print(2, 1, "6.Error Code:");
 80018f0:	4a2c      	ldr	r2, [pc, #176]	; (80019a4 <menu+0x538>)
 80018f2:	2101      	movs	r1, #1
 80018f4:	2002      	movs	r0, #2
 80018f6:	f7fe feb7 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80018fa:	4a1e      	ldr	r2, [pc, #120]	; (8001974 <menu+0x508>)
 80018fc:	210f      	movs	r1, #15
 80018fe:	2002      	movs	r0, #2
 8001900:	f7fe feb2 	bl	8000668 <lcd_print>
			itoa(hataKayit6, snum, 10);
 8001904:	4b28      	ldr	r3, [pc, #160]	; (80019a8 <menu+0x53c>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	220a      	movs	r2, #10
 800190a:	4917      	ldr	r1, [pc, #92]	; (8001968 <menu+0x4fc>)
 800190c:	4618      	mov	r0, r3
 800190e:	f00b f8fb 	bl	800cb08 <itoa>
			lcd_print(2, 14, snum);
 8001912:	4a15      	ldr	r2, [pc, #84]	; (8001968 <menu+0x4fc>)
 8001914:	210e      	movs	r1, #14
 8001916:	2002      	movs	r0, #2
 8001918:	f7fe fea6 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 800191c:	4b0d      	ldr	r3, [pc, #52]	; (8001954 <menu+0x4e8>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	2b06      	cmp	r3, #6
 8001922:	d15f      	bne.n	80019e4 <menu+0x578>
			if(dilSecim == 0) {
 8001924:	4b05      	ldr	r3, [pc, #20]	; (800193c <menu+0x4d0>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d141      	bne.n	80019b0 <menu+0x544>
				lcd_print(2, 1, "7.Hata Kodu: ");
 800192c:	4a1f      	ldr	r2, [pc, #124]	; (80019ac <menu+0x540>)
 800192e:	2101      	movs	r1, #1
 8001930:	2002      	movs	r0, #2
 8001932:	f7fe fe99 	bl	8000668 <lcd_print>
 8001936:	e044      	b.n	80019c2 <menu+0x556>
 8001938:	0800d77c 	.word	0x0800d77c
 800193c:	20000c5a 	.word	0x20000c5a
 8001940:	0800d790 	.word	0x0800d790
 8001944:	0800d7a4 	.word	0x0800d7a4
 8001948:	20000c39 	.word	0x20000c39
 800194c:	0800d7b8 	.word	0x0800d7b8
 8001950:	0800d7cc 	.word	0x0800d7cc
 8001954:	20000c3b 	.word	0x20000c3b
 8001958:	0800d7e0 	.word	0x0800d7e0
 800195c:	0800d7f0 	.word	0x0800d7f0
 8001960:	0800d800 	.word	0x0800d800
 8001964:	20000c5b 	.word	0x20000c5b
 8001968:	20000bbc 	.word	0x20000bbc
 800196c:	0800d804 	.word	0x0800d804
 8001970:	0800d814 	.word	0x0800d814
 8001974:	0800d824 	.word	0x0800d824
 8001978:	20000c5c 	.word	0x20000c5c
 800197c:	0800d828 	.word	0x0800d828
 8001980:	0800d838 	.word	0x0800d838
 8001984:	20000c5d 	.word	0x20000c5d
 8001988:	0800d848 	.word	0x0800d848
 800198c:	0800d858 	.word	0x0800d858
 8001990:	20000c5e 	.word	0x20000c5e
 8001994:	0800d868 	.word	0x0800d868
 8001998:	0800d878 	.word	0x0800d878
 800199c:	20000c5f 	.word	0x20000c5f
 80019a0:	0800d888 	.word	0x0800d888
 80019a4:	0800d898 	.word	0x0800d898
 80019a8:	20000c60 	.word	0x20000c60
 80019ac:	0800d8a8 	.word	0x0800d8a8
			} else if(dilSecim == 1) {
 80019b0:	4b4f      	ldr	r3, [pc, #316]	; (8001af0 <menu+0x684>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d104      	bne.n	80019c2 <menu+0x556>
				lcd_print(2, 1, "7.Error Code:");
 80019b8:	4a4e      	ldr	r2, [pc, #312]	; (8001af4 <menu+0x688>)
 80019ba:	2101      	movs	r1, #1
 80019bc:	2002      	movs	r0, #2
 80019be:	f7fe fe53 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 80019c2:	4a4d      	ldr	r2, [pc, #308]	; (8001af8 <menu+0x68c>)
 80019c4:	210f      	movs	r1, #15
 80019c6:	2002      	movs	r0, #2
 80019c8:	f7fe fe4e 	bl	8000668 <lcd_print>
			itoa(hataKayit7, snum, 10);
 80019cc:	4b4b      	ldr	r3, [pc, #300]	; (8001afc <menu+0x690>)
 80019ce:	781b      	ldrb	r3, [r3, #0]
 80019d0:	220a      	movs	r2, #10
 80019d2:	494b      	ldr	r1, [pc, #300]	; (8001b00 <menu+0x694>)
 80019d4:	4618      	mov	r0, r3
 80019d6:	f00b f897 	bl	800cb08 <itoa>
			lcd_print(2, 14, snum);
 80019da:	4a49      	ldr	r2, [pc, #292]	; (8001b00 <menu+0x694>)
 80019dc:	210e      	movs	r1, #14
 80019de:	2002      	movs	r0, #2
 80019e0:	f7fe fe42 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 80019e4:	4b47      	ldr	r3, [pc, #284]	; (8001b04 <menu+0x698>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b07      	cmp	r3, #7
 80019ea:	d123      	bne.n	8001a34 <menu+0x5c8>
			if(dilSecim == 0) {
 80019ec:	4b40      	ldr	r3, [pc, #256]	; (8001af0 <menu+0x684>)
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d105      	bne.n	8001a00 <menu+0x594>
				lcd_print(2, 1, "8.Hata Kodu: ");
 80019f4:	4a44      	ldr	r2, [pc, #272]	; (8001b08 <menu+0x69c>)
 80019f6:	2101      	movs	r1, #1
 80019f8:	2002      	movs	r0, #2
 80019fa:	f7fe fe35 	bl	8000668 <lcd_print>
 80019fe:	e008      	b.n	8001a12 <menu+0x5a6>
			} else if(dilSecim == 1) {
 8001a00:	4b3b      	ldr	r3, [pc, #236]	; (8001af0 <menu+0x684>)
 8001a02:	781b      	ldrb	r3, [r3, #0]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d104      	bne.n	8001a12 <menu+0x5a6>
				lcd_print(2, 1, "8.Error Code:");
 8001a08:	4a40      	ldr	r2, [pc, #256]	; (8001b0c <menu+0x6a0>)
 8001a0a:	2101      	movs	r1, #1
 8001a0c:	2002      	movs	r0, #2
 8001a0e:	f7fe fe2b 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001a12:	4a39      	ldr	r2, [pc, #228]	; (8001af8 <menu+0x68c>)
 8001a14:	210f      	movs	r1, #15
 8001a16:	2002      	movs	r0, #2
 8001a18:	f7fe fe26 	bl	8000668 <lcd_print>
			itoa(hataKayit8, snum, 10);
 8001a1c:	4b3c      	ldr	r3, [pc, #240]	; (8001b10 <menu+0x6a4>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	220a      	movs	r2, #10
 8001a22:	4937      	ldr	r1, [pc, #220]	; (8001b00 <menu+0x694>)
 8001a24:	4618      	mov	r0, r3
 8001a26:	f00b f86f 	bl	800cb08 <itoa>
			lcd_print(2, 14, snum);
 8001a2a:	4a35      	ldr	r2, [pc, #212]	; (8001b00 <menu+0x694>)
 8001a2c:	210e      	movs	r1, #14
 8001a2e:	2002      	movs	r0, #2
 8001a30:	f7fe fe1a 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8001a34:	4b33      	ldr	r3, [pc, #204]	; (8001b04 <menu+0x698>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b08      	cmp	r3, #8
 8001a3a:	d123      	bne.n	8001a84 <menu+0x618>
			if(dilSecim == 0) {
 8001a3c:	4b2c      	ldr	r3, [pc, #176]	; (8001af0 <menu+0x684>)
 8001a3e:	781b      	ldrb	r3, [r3, #0]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d105      	bne.n	8001a50 <menu+0x5e4>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8001a44:	4a33      	ldr	r2, [pc, #204]	; (8001b14 <menu+0x6a8>)
 8001a46:	2101      	movs	r1, #1
 8001a48:	2002      	movs	r0, #2
 8001a4a:	f7fe fe0d 	bl	8000668 <lcd_print>
 8001a4e:	e008      	b.n	8001a62 <menu+0x5f6>
			} else if(dilSecim == 1) {
 8001a50:	4b27      	ldr	r3, [pc, #156]	; (8001af0 <menu+0x684>)
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d104      	bne.n	8001a62 <menu+0x5f6>
				lcd_print(2, 1, "9.Error Code:");
 8001a58:	4a2f      	ldr	r2, [pc, #188]	; (8001b18 <menu+0x6ac>)
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	2002      	movs	r0, #2
 8001a5e:	f7fe fe03 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8001a62:	4a25      	ldr	r2, [pc, #148]	; (8001af8 <menu+0x68c>)
 8001a64:	210f      	movs	r1, #15
 8001a66:	2002      	movs	r0, #2
 8001a68:	f7fe fdfe 	bl	8000668 <lcd_print>
			itoa(hataKayit9, snum, 10);
 8001a6c:	4b2b      	ldr	r3, [pc, #172]	; (8001b1c <menu+0x6b0>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	220a      	movs	r2, #10
 8001a72:	4923      	ldr	r1, [pc, #140]	; (8001b00 <menu+0x694>)
 8001a74:	4618      	mov	r0, r3
 8001a76:	f00b f847 	bl	800cb08 <itoa>
			lcd_print(2, 14, snum);
 8001a7a:	4a21      	ldr	r2, [pc, #132]	; (8001b00 <menu+0x694>)
 8001a7c:	210e      	movs	r1, #14
 8001a7e:	2002      	movs	r0, #2
 8001a80:	f7fe fdf2 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8001a84:	4b1f      	ldr	r3, [pc, #124]	; (8001b04 <menu+0x698>)
 8001a86:	781b      	ldrb	r3, [r3, #0]
 8001a88:	2b09      	cmp	r3, #9
 8001a8a:	d123      	bne.n	8001ad4 <menu+0x668>
			if(dilSecim == 0) {
 8001a8c:	4b18      	ldr	r3, [pc, #96]	; (8001af0 <menu+0x684>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d105      	bne.n	8001aa0 <menu+0x634>
				lcd_print(2, 1, "10.Hata Kodu: ");
 8001a94:	4a22      	ldr	r2, [pc, #136]	; (8001b20 <menu+0x6b4>)
 8001a96:	2101      	movs	r1, #1
 8001a98:	2002      	movs	r0, #2
 8001a9a:	f7fe fde5 	bl	8000668 <lcd_print>
 8001a9e:	e008      	b.n	8001ab2 <menu+0x646>
			} else if(dilSecim == 1) {
 8001aa0:	4b13      	ldr	r3, [pc, #76]	; (8001af0 <menu+0x684>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	d104      	bne.n	8001ab2 <menu+0x646>
				lcd_print(2, 1, "10.Error Code:");
 8001aa8:	4a1e      	ldr	r2, [pc, #120]	; (8001b24 <menu+0x6b8>)
 8001aaa:	2101      	movs	r1, #1
 8001aac:	2002      	movs	r0, #2
 8001aae:	f7fe fddb 	bl	8000668 <lcd_print>
			}
			lcd_print(2, 16, " ");
 8001ab2:	4a1d      	ldr	r2, [pc, #116]	; (8001b28 <menu+0x6bc>)
 8001ab4:	2110      	movs	r1, #16
 8001ab6:	2002      	movs	r0, #2
 8001ab8:	f7fe fdd6 	bl	8000668 <lcd_print>
			itoa(hataKayit10, snum, 10);
 8001abc:	4b1b      	ldr	r3, [pc, #108]	; (8001b2c <menu+0x6c0>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	220a      	movs	r2, #10
 8001ac2:	490f      	ldr	r1, [pc, #60]	; (8001b00 <menu+0x694>)
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f00b f81f 	bl	800cb08 <itoa>
			lcd_print(2, 15, snum);
 8001aca:	4a0d      	ldr	r2, [pc, #52]	; (8001b00 <menu+0x694>)
 8001acc:	210f      	movs	r1, #15
 8001ace:	2002      	movs	r0, #2
 8001ad0:	f7fe fdca 	bl	8000668 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8001ad4:	4b0b      	ldr	r3, [pc, #44]	; (8001b04 <menu+0x698>)
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	2b0a      	cmp	r3, #10
 8001ada:	d134      	bne.n	8001b46 <menu+0x6da>
			if(dilSecim == 0) {
 8001adc:	4b04      	ldr	r3, [pc, #16]	; (8001af0 <menu+0x684>)
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d127      	bne.n	8001b34 <menu+0x6c8>
				lcd_print(2, 1, "Silmek icin ent.");
 8001ae4:	4a12      	ldr	r2, [pc, #72]	; (8001b30 <menu+0x6c4>)
 8001ae6:	2101      	movs	r1, #1
 8001ae8:	2002      	movs	r0, #2
 8001aea:	f7fe fdbd 	bl	8000668 <lcd_print>
 8001aee:	e02a      	b.n	8001b46 <menu+0x6da>
 8001af0:	20000c5a 	.word	0x20000c5a
 8001af4:	0800d8b8 	.word	0x0800d8b8
 8001af8:	0800d824 	.word	0x0800d824
 8001afc:	20000c61 	.word	0x20000c61
 8001b00:	20000bbc 	.word	0x20000bbc
 8001b04:	20000c3b 	.word	0x20000c3b
 8001b08:	0800d8c8 	.word	0x0800d8c8
 8001b0c:	0800d8d8 	.word	0x0800d8d8
 8001b10:	20000c62 	.word	0x20000c62
 8001b14:	0800d8e8 	.word	0x0800d8e8
 8001b18:	0800d8f8 	.word	0x0800d8f8
 8001b1c:	20000c63 	.word	0x20000c63
 8001b20:	0800d908 	.word	0x0800d908
 8001b24:	0800d918 	.word	0x0800d918
 8001b28:	0800d928 	.word	0x0800d928
 8001b2c:	20000c64 	.word	0x20000c64
 8001b30:	0800d92c 	.word	0x0800d92c
			} else if(dilSecim == 1) {
 8001b34:	4b82      	ldr	r3, [pc, #520]	; (8001d40 <menu+0x8d4>)
 8001b36:	781b      	ldrb	r3, [r3, #0]
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d104      	bne.n	8001b46 <menu+0x6da>
				lcd_print(2, 1, "Del. press enter");
 8001b3c:	4a81      	ldr	r2, [pc, #516]	; (8001d44 <menu+0x8d8>)
 8001b3e:	2101      	movs	r1, #1
 8001b40:	2002      	movs	r0, #2
 8001b42:	f7fe fd91 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001b46:	2102      	movs	r1, #2
 8001b48:	487f      	ldr	r0, [pc, #508]	; (8001d48 <menu+0x8dc>)
 8001b4a:	f007 ffb1 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	d119      	bne.n	8001b88 <menu+0x71c>
 8001b54:	4b7d      	ldr	r3, [pc, #500]	; (8001d4c <menu+0x8e0>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	f083 0301 	eor.w	r3, r3, #1
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d012      	beq.n	8001b88 <menu+0x71c>
 8001b62:	4b7b      	ldr	r3, [pc, #492]	; (8001d50 <menu+0x8e4>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d10e      	bne.n	8001b88 <menu+0x71c>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8001b6a:	4b7a      	ldr	r3, [pc, #488]	; (8001d54 <menu+0x8e8>)
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	4b78      	ldr	r3, [pc, #480]	; (8001d54 <menu+0x8e8>)
 8001b74:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8001b76:	4b77      	ldr	r3, [pc, #476]	; (8001d54 <menu+0x8e8>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	2b0a      	cmp	r3, #10
 8001b7c:	d902      	bls.n	8001b84 <menu+0x718>
				hataGostermeSirasi = 0;
 8001b7e:	4b75      	ldr	r3, [pc, #468]	; (8001d54 <menu+0x8e8>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001b84:	f004 f9fc 	bl	8005f80 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001b88:	2104      	movs	r1, #4
 8001b8a:	486f      	ldr	r0, [pc, #444]	; (8001d48 <menu+0x8dc>)
 8001b8c:	f007 ff90 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d119      	bne.n	8001bca <menu+0x75e>
 8001b96:	4b6d      	ldr	r3, [pc, #436]	; (8001d4c <menu+0x8e0>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	f083 0301 	eor.w	r3, r3, #1
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d012      	beq.n	8001bca <menu+0x75e>
 8001ba4:	4b6a      	ldr	r3, [pc, #424]	; (8001d50 <menu+0x8e4>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d10e      	bne.n	8001bca <menu+0x75e>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001bac:	4b69      	ldr	r3, [pc, #420]	; (8001d54 <menu+0x8e8>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	3b01      	subs	r3, #1
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	4b67      	ldr	r3, [pc, #412]	; (8001d54 <menu+0x8e8>)
 8001bb6:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001bb8:	4b66      	ldr	r3, [pc, #408]	; (8001d54 <menu+0x8e8>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b0b      	cmp	r3, #11
 8001bbe:	d902      	bls.n	8001bc6 <menu+0x75a>
	    		hataGostermeSirasi = 10;
 8001bc0:	4b64      	ldr	r3, [pc, #400]	; (8001d54 <menu+0x8e8>)
 8001bc2:	220a      	movs	r2, #10
 8001bc4:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001bc6:	f004 f9db 	bl	8005f80 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001bca:	2108      	movs	r1, #8
 8001bcc:	485e      	ldr	r0, [pc, #376]	; (8001d48 <menu+0x8dc>)
 8001bce:	f007 ff6f 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d153      	bne.n	8001c80 <menu+0x814>
 8001bd8:	4b5c      	ldr	r3, [pc, #368]	; (8001d4c <menu+0x8e0>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	f083 0301 	eor.w	r3, r3, #1
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d04c      	beq.n	8001c80 <menu+0x814>
 8001be6:	4b5b      	ldr	r3, [pc, #364]	; (8001d54 <menu+0x8e8>)
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	2b0a      	cmp	r3, #10
 8001bec:	d148      	bne.n	8001c80 <menu+0x814>
			hataKayit1 = 0; eepromData[37] = 0;
 8001bee:	4b5a      	ldr	r3, [pc, #360]	; (8001d58 <menu+0x8ec>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	701a      	strb	r2, [r3, #0]
 8001bf4:	4b59      	ldr	r3, [pc, #356]	; (8001d5c <menu+0x8f0>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001bfc:	4b58      	ldr	r3, [pc, #352]	; (8001d60 <menu+0x8f4>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	701a      	strb	r2, [r3, #0]
 8001c02:	4b56      	ldr	r3, [pc, #344]	; (8001d5c <menu+0x8f0>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001c0a:	4b56      	ldr	r3, [pc, #344]	; (8001d64 <menu+0x8f8>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	701a      	strb	r2, [r3, #0]
 8001c10:	4b52      	ldr	r3, [pc, #328]	; (8001d5c <menu+0x8f0>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001c18:	4b53      	ldr	r3, [pc, #332]	; (8001d68 <menu+0x8fc>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	701a      	strb	r2, [r3, #0]
 8001c1e:	4b4f      	ldr	r3, [pc, #316]	; (8001d5c <menu+0x8f0>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 8001c26:	4b51      	ldr	r3, [pc, #324]	; (8001d6c <menu+0x900>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	701a      	strb	r2, [r3, #0]
 8001c2c:	4b4b      	ldr	r3, [pc, #300]	; (8001d5c <menu+0x8f0>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 8001c34:	4b4e      	ldr	r3, [pc, #312]	; (8001d70 <menu+0x904>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	701a      	strb	r2, [r3, #0]
 8001c3a:	4b48      	ldr	r3, [pc, #288]	; (8001d5c <menu+0x8f0>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 8001c42:	4b4c      	ldr	r3, [pc, #304]	; (8001d74 <menu+0x908>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	701a      	strb	r2, [r3, #0]
 8001c48:	4b44      	ldr	r3, [pc, #272]	; (8001d5c <menu+0x8f0>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 8001c50:	4b49      	ldr	r3, [pc, #292]	; (8001d78 <menu+0x90c>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	701a      	strb	r2, [r3, #0]
 8001c56:	4b41      	ldr	r3, [pc, #260]	; (8001d5c <menu+0x8f0>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 8001c5e:	4b47      	ldr	r3, [pc, #284]	; (8001d7c <menu+0x910>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	701a      	strb	r2, [r3, #0]
 8001c64:	4b3d      	ldr	r3, [pc, #244]	; (8001d5c <menu+0x8f0>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 8001c6c:	4b44      	ldr	r3, [pc, #272]	; (8001d80 <menu+0x914>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	701a      	strb	r2, [r3, #0]
 8001c72:	4b3a      	ldr	r3, [pc, #232]	; (8001d5c <menu+0x8f0>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 8001c7a:	4b42      	ldr	r3, [pc, #264]	; (8001d84 <menu+0x918>)
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 8001c80:	4b41      	ldr	r3, [pc, #260]	; (8001d88 <menu+0x91c>)
 8001c82:	781b      	ldrb	r3, [r3, #0]
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	f040 80fc 	bne.w	8001e82 <menu+0xa16>
		if(dilSecim == 0) {
 8001c8a:	4b2d      	ldr	r3, [pc, #180]	; (8001d40 <menu+0x8d4>)
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d105      	bne.n	8001c9e <menu+0x832>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 8001c92:	4a3e      	ldr	r2, [pc, #248]	; (8001d8c <menu+0x920>)
 8001c94:	2101      	movs	r1, #1
 8001c96:	2001      	movs	r0, #1
 8001c98:	f7fe fce6 	bl	8000668 <lcd_print>
 8001c9c:	e008      	b.n	8001cb0 <menu+0x844>
		} else if(dilSecim == 1) {
 8001c9e:	4b28      	ldr	r3, [pc, #160]	; (8001d40 <menu+0x8d4>)
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d104      	bne.n	8001cb0 <menu+0x844>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 8001ca6:	4a3a      	ldr	r2, [pc, #232]	; (8001d90 <menu+0x924>)
 8001ca8:	2101      	movs	r1, #1
 8001caa:	2001      	movs	r0, #1
 8001cac:	f7fe fcdc 	bl	8000668 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001cb0:	4b27      	ldr	r3, [pc, #156]	; (8001d50 <menu+0x8e4>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d003      	beq.n	8001cc0 <menu+0x854>
 8001cb8:	4b25      	ldr	r3, [pc, #148]	; (8001d50 <menu+0x8e4>)
 8001cba:	781b      	ldrb	r3, [r3, #0]
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d112      	bne.n	8001ce6 <menu+0x87a>
			if(dilSecim == 0) {
 8001cc0:	4b1f      	ldr	r3, [pc, #124]	; (8001d40 <menu+0x8d4>)
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d105      	bne.n	8001cd4 <menu+0x868>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8001cc8:	4a32      	ldr	r2, [pc, #200]	; (8001d94 <menu+0x928>)
 8001cca:	2101      	movs	r1, #1
 8001ccc:	2002      	movs	r0, #2
 8001cce:	f7fe fccb 	bl	8000668 <lcd_print>
 8001cd2:	e008      	b.n	8001ce6 <menu+0x87a>
			} else if(dilSecim == 1) {
 8001cd4:	4b1a      	ldr	r3, [pc, #104]	; (8001d40 <menu+0x8d4>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d104      	bne.n	8001ce6 <menu+0x87a>
				lcd_print(2, 1, "Tppng Mobil slct");
 8001cdc:	4a2e      	ldr	r2, [pc, #184]	; (8001d98 <menu+0x92c>)
 8001cde:	2101      	movs	r1, #1
 8001ce0:	2002      	movs	r0, #2
 8001ce2:	f7fe fcc1 	bl	8000668 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 8001ce6:	4b2d      	ldr	r3, [pc, #180]	; (8001d9c <menu+0x930>)
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d116      	bne.n	8001d1c <menu+0x8b0>
 8001cee:	4b18      	ldr	r3, [pc, #96]	; (8001d50 <menu+0x8e4>)
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d112      	bne.n	8001d1c <menu+0x8b0>
			if(dilSecim == 0) {
 8001cf6:	4b12      	ldr	r3, [pc, #72]	; (8001d40 <menu+0x8d4>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d105      	bne.n	8001d0a <menu+0x89e>
				lcd_print(2, 1, "Bastikca cal.  ");
 8001cfe:	4a28      	ldr	r2, [pc, #160]	; (8001da0 <menu+0x934>)
 8001d00:	2101      	movs	r1, #1
 8001d02:	2002      	movs	r0, #2
 8001d04:	f7fe fcb0 	bl	8000668 <lcd_print>
 8001d08:	e008      	b.n	8001d1c <menu+0x8b0>
			} else if(dilSecim == 1) {
 8001d0a:	4b0d      	ldr	r3, [pc, #52]	; (8001d40 <menu+0x8d4>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	2b01      	cmp	r3, #1
 8001d10:	d104      	bne.n	8001d1c <menu+0x8b0>
				lcd_print(2, 1, "Deadman Control");
 8001d12:	4a24      	ldr	r2, [pc, #144]	; (8001da4 <menu+0x938>)
 8001d14:	2101      	movs	r1, #1
 8001d16:	2002      	movs	r0, #2
 8001d18:	f7fe fca6 	bl	8000668 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001d1c:	4b1f      	ldr	r3, [pc, #124]	; (8001d9c <menu+0x930>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d14c      	bne.n	8001dbe <menu+0x952>
 8001d24:	4b0a      	ldr	r3, [pc, #40]	; (8001d50 <menu+0x8e4>)
 8001d26:	781b      	ldrb	r3, [r3, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d148      	bne.n	8001dbe <menu+0x952>
			if(dilSecim == 0) {
 8001d2c:	4b04      	ldr	r3, [pc, #16]	; (8001d40 <menu+0x8d4>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d13b      	bne.n	8001dac <menu+0x940>
				lcd_print(2, 1, "Bas gonder     ");
 8001d34:	4a1c      	ldr	r2, [pc, #112]	; (8001da8 <menu+0x93c>)
 8001d36:	2101      	movs	r1, #1
 8001d38:	2002      	movs	r0, #2
 8001d3a:	f7fe fc95 	bl	8000668 <lcd_print>
 8001d3e:	e03e      	b.n	8001dbe <menu+0x952>
 8001d40:	20000c5a 	.word	0x20000c5a
 8001d44:	0800d940 	.word	0x0800d940
 8001d48:	40010800 	.word	0x40010800
 8001d4c:	20000c68 	.word	0x20000c68
 8001d50:	20000c48 	.word	0x20000c48
 8001d54:	20000c3b 	.word	0x20000c3b
 8001d58:	20000c5b 	.word	0x20000c5b
 8001d5c:	20000b28 	.word	0x20000b28
 8001d60:	20000c5c 	.word	0x20000c5c
 8001d64:	20000c5d 	.word	0x20000c5d
 8001d68:	20000c5e 	.word	0x20000c5e
 8001d6c:	20000c5f 	.word	0x20000c5f
 8001d70:	20000c60 	.word	0x20000c60
 8001d74:	20000c61 	.word	0x20000c61
 8001d78:	20000c62 	.word	0x20000c62
 8001d7c:	20000c63 	.word	0x20000c63
 8001d80:	20000c64 	.word	0x20000c64
 8001d84:	20000c65 	.word	0x20000c65
 8001d88:	20000c39 	.word	0x20000c39
 8001d8c:	0800d954 	.word	0x0800d954
 8001d90:	0800d968 	.word	0x0800d968
 8001d94:	0800d97c 	.word	0x0800d97c
 8001d98:	0800d990 	.word	0x0800d990
 8001d9c:	20000c3a 	.word	0x20000c3a
 8001da0:	0800d9a4 	.word	0x0800d9a4
 8001da4:	0800d9b4 	.word	0x0800d9b4
 8001da8:	0800d9c4 	.word	0x0800d9c4
			} else if(dilSecim == 1) {
 8001dac:	4b98      	ldr	r3, [pc, #608]	; (8002010 <menu+0xba4>)
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d104      	bne.n	8001dbe <menu+0x952>
				lcd_print(2, 1, "Call & Send    ");
 8001db4:	4a97      	ldr	r2, [pc, #604]	; (8002014 <menu+0xba8>)
 8001db6:	2101      	movs	r1, #1
 8001db8:	2002      	movs	r0, #2
 8001dba:	f7fe fc55 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001dbe:	2102      	movs	r1, #2
 8001dc0:	4895      	ldr	r0, [pc, #596]	; (8002018 <menu+0xbac>)
 8001dc2:	f007 fe75 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d119      	bne.n	8001e00 <menu+0x994>
 8001dcc:	4b93      	ldr	r3, [pc, #588]	; (800201c <menu+0xbb0>)
 8001dce:	781b      	ldrb	r3, [r3, #0]
 8001dd0:	f083 0301 	eor.w	r3, r3, #1
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d012      	beq.n	8001e00 <menu+0x994>
 8001dda:	4b91      	ldr	r3, [pc, #580]	; (8002020 <menu+0xbb4>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d10e      	bne.n	8001e00 <menu+0x994>
			calismaSekli = calismaSekli + 1;
 8001de2:	4b90      	ldr	r3, [pc, #576]	; (8002024 <menu+0xbb8>)
 8001de4:	781b      	ldrb	r3, [r3, #0]
 8001de6:	3301      	adds	r3, #1
 8001de8:	b2da      	uxtb	r2, r3
 8001dea:	4b8e      	ldr	r3, [pc, #568]	; (8002024 <menu+0xbb8>)
 8001dec:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001dee:	4b8d      	ldr	r3, [pc, #564]	; (8002024 <menu+0xbb8>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	2b01      	cmp	r3, #1
 8001df4:	d902      	bls.n	8001dfc <menu+0x990>
				calismaSekli = 0;
 8001df6:	4b8b      	ldr	r3, [pc, #556]	; (8002024 <menu+0xbb8>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001dfc:	f004 f8c0 	bl	8005f80 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001e00:	2104      	movs	r1, #4
 8001e02:	4885      	ldr	r0, [pc, #532]	; (8002018 <menu+0xbac>)
 8001e04:	f007 fe54 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d119      	bne.n	8001e42 <menu+0x9d6>
 8001e0e:	4b83      	ldr	r3, [pc, #524]	; (800201c <menu+0xbb0>)
 8001e10:	781b      	ldrb	r3, [r3, #0]
 8001e12:	f083 0301 	eor.w	r3, r3, #1
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d012      	beq.n	8001e42 <menu+0x9d6>
 8001e1c:	4b80      	ldr	r3, [pc, #512]	; (8002020 <menu+0xbb4>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d10e      	bne.n	8001e42 <menu+0x9d6>
			calismaSekli = calismaSekli - 1;
 8001e24:	4b7f      	ldr	r3, [pc, #508]	; (8002024 <menu+0xbb8>)
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	3b01      	subs	r3, #1
 8001e2a:	b2da      	uxtb	r2, r3
 8001e2c:	4b7d      	ldr	r3, [pc, #500]	; (8002024 <menu+0xbb8>)
 8001e2e:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001e30:	4b7c      	ldr	r3, [pc, #496]	; (8002024 <menu+0xbb8>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d002      	beq.n	8001e3e <menu+0x9d2>
	    		calismaSekli = 1;
 8001e38:	4b7a      	ldr	r3, [pc, #488]	; (8002024 <menu+0xbb8>)
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001e3e:	f004 f89f 	bl	8005f80 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001e42:	2108      	movs	r1, #8
 8001e44:	4874      	ldr	r0, [pc, #464]	; (8002018 <menu+0xbac>)
 8001e46:	f007 fe33 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b01      	cmp	r3, #1
 8001e4e:	d118      	bne.n	8001e82 <menu+0xa16>
 8001e50:	4b72      	ldr	r3, [pc, #456]	; (800201c <menu+0xbb0>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	f083 0301 	eor.w	r3, r3, #1
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d011      	beq.n	8001e82 <menu+0xa16>
			eepromData[1] = calismaSekli;
 8001e5e:	4b71      	ldr	r3, [pc, #452]	; (8002024 <menu+0xbb8>)
 8001e60:	781a      	ldrb	r2, [r3, #0]
 8001e62:	4b71      	ldr	r3, [pc, #452]	; (8002028 <menu+0xbbc>)
 8001e64:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 8001e66:	4b6f      	ldr	r3, [pc, #444]	; (8002024 <menu+0xbb8>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d106      	bne.n	8001e7c <menu+0xa10>
				altLimit = 1;
 8001e6e:	4b6f      	ldr	r3, [pc, #444]	; (800202c <menu+0xbc0>)
 8001e70:	2201      	movs	r2, #1
 8001e72:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001e74:	4b6d      	ldr	r3, [pc, #436]	; (800202c <menu+0xbc0>)
 8001e76:	781a      	ldrb	r2, [r3, #0]
 8001e78:	4b6b      	ldr	r3, [pc, #428]	; (8002028 <menu+0xbbc>)
 8001e7a:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001e7c:	4b6c      	ldr	r3, [pc, #432]	; (8002030 <menu+0xbc4>)
 8001e7e:	2201      	movs	r2, #1
 8001e80:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 8001e82:	4b6c      	ldr	r3, [pc, #432]	; (8002034 <menu+0xbc8>)
 8001e84:	781b      	ldrb	r3, [r3, #0]
 8001e86:	2b03      	cmp	r3, #3
 8001e88:	f040 8083 	bne.w	8001f92 <menu+0xb26>
		if(dilSecim == 0) {
 8001e8c:	4b60      	ldr	r3, [pc, #384]	; (8002010 <menu+0xba4>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d105      	bne.n	8001ea0 <menu+0xa34>
			lcd_print(1, 1, "EMNIYET CER.    ");
 8001e94:	4a68      	ldr	r2, [pc, #416]	; (8002038 <menu+0xbcc>)
 8001e96:	2101      	movs	r1, #1
 8001e98:	2001      	movs	r0, #1
 8001e9a:	f7fe fbe5 	bl	8000668 <lcd_print>
 8001e9e:	e008      	b.n	8001eb2 <menu+0xa46>
		} else if(dilSecim == 1) {
 8001ea0:	4b5b      	ldr	r3, [pc, #364]	; (8002010 <menu+0xba4>)
 8001ea2:	781b      	ldrb	r3, [r3, #0]
 8001ea4:	2b01      	cmp	r3, #1
 8001ea6:	d104      	bne.n	8001eb2 <menu+0xa46>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8001ea8:	4a64      	ldr	r2, [pc, #400]	; (800203c <menu+0xbd0>)
 8001eaa:	2101      	movs	r1, #1
 8001eac:	2001      	movs	r0, #1
 8001eae:	f7fe fbdb 	bl	8000668 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 8001eb2:	4b63      	ldr	r3, [pc, #396]	; (8002040 <menu+0xbd4>)
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d113      	bne.n	8001ee2 <menu+0xa76>
			if(dilSecim == 0) {
 8001eba:	4b55      	ldr	r3, [pc, #340]	; (8002010 <menu+0xba4>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d105      	bne.n	8001ece <menu+0xa62>
				lcd_print(2, 1, "Pasif           ");
 8001ec2:	4a60      	ldr	r2, [pc, #384]	; (8002044 <menu+0xbd8>)
 8001ec4:	2101      	movs	r1, #1
 8001ec6:	2002      	movs	r0, #2
 8001ec8:	f7fe fbce 	bl	8000668 <lcd_print>
 8001ecc:	e012      	b.n	8001ef4 <menu+0xa88>
			} else if(dilSecim == 1) {
 8001ece:	4b50      	ldr	r3, [pc, #320]	; (8002010 <menu+0xba4>)
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d10e      	bne.n	8001ef4 <menu+0xa88>
				lcd_print(2, 1, "Passive         ");
 8001ed6:	4a5c      	ldr	r2, [pc, #368]	; (8002048 <menu+0xbdc>)
 8001ed8:	2101      	movs	r1, #1
 8001eda:	2002      	movs	r0, #2
 8001edc:	f7fe fbc4 	bl	8000668 <lcd_print>
 8001ee0:	e008      	b.n	8001ef4 <menu+0xa88>
			}
		} else if(emniyetCercevesi == 1) {
 8001ee2:	4b57      	ldr	r3, [pc, #348]	; (8002040 <menu+0xbd4>)
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d104      	bne.n	8001ef4 <menu+0xa88>
			lcd_print(2, 1, "OND Safety     ");
 8001eea:	4a58      	ldr	r2, [pc, #352]	; (800204c <menu+0xbe0>)
 8001eec:	2101      	movs	r1, #1
 8001eee:	2002      	movs	r0, #2
 8001ef0:	f7fe fbba 	bl	8000668 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001ef4:	2102      	movs	r1, #2
 8001ef6:	4848      	ldr	r0, [pc, #288]	; (8002018 <menu+0xbac>)
 8001ef8:	f007 fdda 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8001efc:	4603      	mov	r3, r0
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d115      	bne.n	8001f2e <menu+0xac2>
 8001f02:	4b46      	ldr	r3, [pc, #280]	; (800201c <menu+0xbb0>)
 8001f04:	781b      	ldrb	r3, [r3, #0]
 8001f06:	f083 0301 	eor.w	r3, r3, #1
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d00e      	beq.n	8001f2e <menu+0xac2>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001f10:	4b4b      	ldr	r3, [pc, #300]	; (8002040 <menu+0xbd4>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	3301      	adds	r3, #1
 8001f16:	b2da      	uxtb	r2, r3
 8001f18:	4b49      	ldr	r3, [pc, #292]	; (8002040 <menu+0xbd4>)
 8001f1a:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001f1c:	4b48      	ldr	r3, [pc, #288]	; (8002040 <menu+0xbd4>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d902      	bls.n	8001f2a <menu+0xabe>
				emniyetCercevesi = 0;
 8001f24:	4b46      	ldr	r3, [pc, #280]	; (8002040 <menu+0xbd4>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001f2a:	f004 f829 	bl	8005f80 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f2e:	2104      	movs	r1, #4
 8001f30:	4839      	ldr	r0, [pc, #228]	; (8002018 <menu+0xbac>)
 8001f32:	f007 fdbd 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d115      	bne.n	8001f68 <menu+0xafc>
 8001f3c:	4b37      	ldr	r3, [pc, #220]	; (800201c <menu+0xbb0>)
 8001f3e:	781b      	ldrb	r3, [r3, #0]
 8001f40:	f083 0301 	eor.w	r3, r3, #1
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d00e      	beq.n	8001f68 <menu+0xafc>
			emniyetCercevesi = emniyetCercevesi - 1;
 8001f4a:	4b3d      	ldr	r3, [pc, #244]	; (8002040 <menu+0xbd4>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	4b3b      	ldr	r3, [pc, #236]	; (8002040 <menu+0xbd4>)
 8001f54:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 8001f56:	4b3a      	ldr	r3, [pc, #232]	; (8002040 <menu+0xbd4>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d002      	beq.n	8001f64 <menu+0xaf8>
		   		emniyetCercevesi = 1;
 8001f5e:	4b38      	ldr	r3, [pc, #224]	; (8002040 <menu+0xbd4>)
 8001f60:	2201      	movs	r2, #1
 8001f62:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001f64:	f004 f80c 	bl	8005f80 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 8001f68:	2108      	movs	r1, #8
 8001f6a:	482b      	ldr	r0, [pc, #172]	; (8002018 <menu+0xbac>)
 8001f6c:	f007 fda0 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d10d      	bne.n	8001f92 <menu+0xb26>
 8001f76:	4b29      	ldr	r3, [pc, #164]	; (800201c <menu+0xbb0>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	f083 0301 	eor.w	r3, r3, #1
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d006      	beq.n	8001f92 <menu+0xb26>
			eepromData[2] = emniyetCercevesi;
 8001f84:	4b2e      	ldr	r3, [pc, #184]	; (8002040 <menu+0xbd4>)
 8001f86:	781a      	ldrb	r2, [r3, #0]
 8001f88:	4b27      	ldr	r3, [pc, #156]	; (8002028 <menu+0xbbc>)
 8001f8a:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 8001f8c:	4b28      	ldr	r3, [pc, #160]	; (8002030 <menu+0xbc4>)
 8001f8e:	2201      	movs	r2, #1
 8001f90:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 8001f92:	4b28      	ldr	r3, [pc, #160]	; (8002034 <menu+0xbc8>)
 8001f94:	781b      	ldrb	r3, [r3, #0]
 8001f96:	2b04      	cmp	r3, #4
 8001f98:	f040 80ba 	bne.w	8002110 <menu+0xca4>
		if(dilSecim == 0) {
 8001f9c:	4b1c      	ldr	r3, [pc, #112]	; (8002010 <menu+0xba4>)
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d105      	bne.n	8001fb0 <menu+0xb44>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 8001fa4:	4a2a      	ldr	r2, [pc, #168]	; (8002050 <menu+0xbe4>)
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	2001      	movs	r0, #1
 8001faa:	f7fe fb5d 	bl	8000668 <lcd_print>
 8001fae:	e008      	b.n	8001fc2 <menu+0xb56>
		} else if(dilSecim == 1) {
 8001fb0:	4b17      	ldr	r3, [pc, #92]	; (8002010 <menu+0xba4>)
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d104      	bne.n	8001fc2 <menu+0xb56>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8001fb8:	4a26      	ldr	r2, [pc, #152]	; (8002054 <menu+0xbe8>)
 8001fba:	2101      	movs	r1, #1
 8001fbc:	2001      	movs	r0, #1
 8001fbe:	f7fe fb53 	bl	8000668 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 8001fc2:	4b25      	ldr	r3, [pc, #148]	; (8002058 <menu+0xbec>)
 8001fc4:	781b      	ldrb	r3, [r3, #0]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d113      	bne.n	8001ff2 <menu+0xb86>
			if(dilSecim == 0) {
 8001fca:	4b11      	ldr	r3, [pc, #68]	; (8002010 <menu+0xba4>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d105      	bne.n	8001fde <menu+0xb72>
				lcd_print(2, 1, "Pasif           ");
 8001fd2:	4a1c      	ldr	r2, [pc, #112]	; (8002044 <menu+0xbd8>)
 8001fd4:	2101      	movs	r1, #1
 8001fd6:	2002      	movs	r0, #2
 8001fd8:	f7fe fb46 	bl	8000668 <lcd_print>
 8001fdc:	e049      	b.n	8002072 <menu+0xc06>
			} else if(dilSecim == 1) {
 8001fde:	4b0c      	ldr	r3, [pc, #48]	; (8002010 <menu+0xba4>)
 8001fe0:	781b      	ldrb	r3, [r3, #0]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d145      	bne.n	8002072 <menu+0xc06>
				lcd_print(2, 1, "Passive         ");
 8001fe6:	4a18      	ldr	r2, [pc, #96]	; (8002048 <menu+0xbdc>)
 8001fe8:	2101      	movs	r1, #1
 8001fea:	2002      	movs	r0, #2
 8001fec:	f7fe fb3c 	bl	8000668 <lcd_print>
 8001ff0:	e03f      	b.n	8002072 <menu+0xc06>
			}
		} else if(yavaslamaLimit == 1) {
 8001ff2:	4b19      	ldr	r3, [pc, #100]	; (8002058 <menu+0xbec>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d13b      	bne.n	8002072 <menu+0xc06>
			if(dilSecim == 0) {
 8001ffa:	4b05      	ldr	r3, [pc, #20]	; (8002010 <menu+0xba4>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d12e      	bne.n	8002060 <menu+0xbf4>
				lcd_print(2, 1, "Aktif           ");
 8002002:	4a16      	ldr	r2, [pc, #88]	; (800205c <menu+0xbf0>)
 8002004:	2101      	movs	r1, #1
 8002006:	2002      	movs	r0, #2
 8002008:	f7fe fb2e 	bl	8000668 <lcd_print>
 800200c:	e031      	b.n	8002072 <menu+0xc06>
 800200e:	bf00      	nop
 8002010:	20000c5a 	.word	0x20000c5a
 8002014:	0800d9d4 	.word	0x0800d9d4
 8002018:	40010800 	.word	0x40010800
 800201c:	20000c68 	.word	0x20000c68
 8002020:	20000c48 	.word	0x20000c48
 8002024:	20000c3a 	.word	0x20000c3a
 8002028:	20000b28 	.word	0x20000b28
 800202c:	20000c3f 	.word	0x20000c3f
 8002030:	20000c65 	.word	0x20000c65
 8002034:	20000c39 	.word	0x20000c39
 8002038:	0800d9e4 	.word	0x0800d9e4
 800203c:	0800d9f8 	.word	0x0800d9f8
 8002040:	20000c3d 	.word	0x20000c3d
 8002044:	0800da0c 	.word	0x0800da0c
 8002048:	0800da20 	.word	0x0800da20
 800204c:	0800da34 	.word	0x0800da34
 8002050:	0800da44 	.word	0x0800da44
 8002054:	0800da58 	.word	0x0800da58
 8002058:	20000c3e 	.word	0x20000c3e
 800205c:	0800da6c 	.word	0x0800da6c
			} else if(dilSecim == 1) {
 8002060:	4b92      	ldr	r3, [pc, #584]	; (80022ac <menu+0xe40>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	2b01      	cmp	r3, #1
 8002066:	d104      	bne.n	8002072 <menu+0xc06>
				lcd_print(2, 1, "Active          ");
 8002068:	4a91      	ldr	r2, [pc, #580]	; (80022b0 <menu+0xe44>)
 800206a:	2101      	movs	r1, #1
 800206c:	2002      	movs	r0, #2
 800206e:	f7fe fafb 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002072:	2102      	movs	r1, #2
 8002074:	488f      	ldr	r0, [pc, #572]	; (80022b4 <menu+0xe48>)
 8002076:	f007 fd1b 	bl	8009ab0 <HAL_GPIO_ReadPin>
 800207a:	4603      	mov	r3, r0
 800207c:	2b01      	cmp	r3, #1
 800207e:	d115      	bne.n	80020ac <menu+0xc40>
 8002080:	4b8d      	ldr	r3, [pc, #564]	; (80022b8 <menu+0xe4c>)
 8002082:	781b      	ldrb	r3, [r3, #0]
 8002084:	f083 0301 	eor.w	r3, r3, #1
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d00e      	beq.n	80020ac <menu+0xc40>
			yavaslamaLimit = yavaslamaLimit + 1;
 800208e:	4b8b      	ldr	r3, [pc, #556]	; (80022bc <menu+0xe50>)
 8002090:	781b      	ldrb	r3, [r3, #0]
 8002092:	3301      	adds	r3, #1
 8002094:	b2da      	uxtb	r2, r3
 8002096:	4b89      	ldr	r3, [pc, #548]	; (80022bc <menu+0xe50>)
 8002098:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 800209a:	4b88      	ldr	r3, [pc, #544]	; (80022bc <menu+0xe50>)
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d902      	bls.n	80020a8 <menu+0xc3c>
				yavaslamaLimit = 0;
 80020a2:	4b86      	ldr	r3, [pc, #536]	; (80022bc <menu+0xe50>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80020a8:	f003 ff6a 	bl	8005f80 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80020ac:	2104      	movs	r1, #4
 80020ae:	4881      	ldr	r0, [pc, #516]	; (80022b4 <menu+0xe48>)
 80020b0:	f007 fcfe 	bl	8009ab0 <HAL_GPIO_ReadPin>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d115      	bne.n	80020e6 <menu+0xc7a>
 80020ba:	4b7f      	ldr	r3, [pc, #508]	; (80022b8 <menu+0xe4c>)
 80020bc:	781b      	ldrb	r3, [r3, #0]
 80020be:	f083 0301 	eor.w	r3, r3, #1
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d00e      	beq.n	80020e6 <menu+0xc7a>
			yavaslamaLimit = yavaslamaLimit - 1;
 80020c8:	4b7c      	ldr	r3, [pc, #496]	; (80022bc <menu+0xe50>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	3b01      	subs	r3, #1
 80020ce:	b2da      	uxtb	r2, r3
 80020d0:	4b7a      	ldr	r3, [pc, #488]	; (80022bc <menu+0xe50>)
 80020d2:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 80020d4:	4b79      	ldr	r3, [pc, #484]	; (80022bc <menu+0xe50>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d002      	beq.n	80020e2 <menu+0xc76>
		   		yavaslamaLimit = 1;
 80020dc:	4b77      	ldr	r3, [pc, #476]	; (80022bc <menu+0xe50>)
 80020de:	2201      	movs	r2, #1
 80020e0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80020e2:	f003 ff4d 	bl	8005f80 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80020e6:	2108      	movs	r1, #8
 80020e8:	4872      	ldr	r0, [pc, #456]	; (80022b4 <menu+0xe48>)
 80020ea:	f007 fce1 	bl	8009ab0 <HAL_GPIO_ReadPin>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b01      	cmp	r3, #1
 80020f2:	d10d      	bne.n	8002110 <menu+0xca4>
 80020f4:	4b70      	ldr	r3, [pc, #448]	; (80022b8 <menu+0xe4c>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	f083 0301 	eor.w	r3, r3, #1
 80020fc:	b2db      	uxtb	r3, r3
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d006      	beq.n	8002110 <menu+0xca4>
			eepromData[4] = yavaslamaLimit;
 8002102:	4b6e      	ldr	r3, [pc, #440]	; (80022bc <menu+0xe50>)
 8002104:	781a      	ldrb	r2, [r3, #0]
 8002106:	4b6e      	ldr	r3, [pc, #440]	; (80022c0 <menu+0xe54>)
 8002108:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 800210a:	4b6e      	ldr	r3, [pc, #440]	; (80022c4 <menu+0xe58>)
 800210c:	2201      	movs	r2, #1
 800210e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8002110:	4b6d      	ldr	r3, [pc, #436]	; (80022c8 <menu+0xe5c>)
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	2b05      	cmp	r3, #5
 8002116:	f040 80b9 	bne.w	800228c <menu+0xe20>
		if(dilSecim == 0) {
 800211a:	4b64      	ldr	r3, [pc, #400]	; (80022ac <menu+0xe40>)
 800211c:	781b      	ldrb	r3, [r3, #0]
 800211e:	2b00      	cmp	r3, #0
 8002120:	d105      	bne.n	800212e <menu+0xcc2>
			lcd_print(1, 1, "ALT LIMIT       ");
 8002122:	4a6a      	ldr	r2, [pc, #424]	; (80022cc <menu+0xe60>)
 8002124:	2101      	movs	r1, #1
 8002126:	2001      	movs	r0, #1
 8002128:	f7fe fa9e 	bl	8000668 <lcd_print>
 800212c:	e008      	b.n	8002140 <menu+0xcd4>
		} else if(dilSecim == 1) {
 800212e:	4b5f      	ldr	r3, [pc, #380]	; (80022ac <menu+0xe40>)
 8002130:	781b      	ldrb	r3, [r3, #0]
 8002132:	2b01      	cmp	r3, #1
 8002134:	d104      	bne.n	8002140 <menu+0xcd4>
			lcd_print(1, 1, "DOWN LIMIT      ");
 8002136:	4a66      	ldr	r2, [pc, #408]	; (80022d0 <menu+0xe64>)
 8002138:	2101      	movs	r1, #1
 800213a:	2001      	movs	r0, #1
 800213c:	f7fe fa94 	bl	8000668 <lcd_print>
		}

		if(altLimit == 0) {
 8002140:	4b64      	ldr	r3, [pc, #400]	; (80022d4 <menu+0xe68>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d113      	bne.n	8002170 <menu+0xd04>
			if(dilSecim == 0) {
 8002148:	4b58      	ldr	r3, [pc, #352]	; (80022ac <menu+0xe40>)
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d105      	bne.n	800215c <menu+0xcf0>
				lcd_print(2, 1, "Pasif           ");
 8002150:	4a61      	ldr	r2, [pc, #388]	; (80022d8 <menu+0xe6c>)
 8002152:	2101      	movs	r1, #1
 8002154:	2002      	movs	r0, #2
 8002156:	f7fe fa87 	bl	8000668 <lcd_print>
 800215a:	e020      	b.n	800219e <menu+0xd32>
			} else if(dilSecim == 1) {
 800215c:	4b53      	ldr	r3, [pc, #332]	; (80022ac <menu+0xe40>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	2b01      	cmp	r3, #1
 8002162:	d11c      	bne.n	800219e <menu+0xd32>
				lcd_print(2, 1, "Passive         ");
 8002164:	4a5d      	ldr	r2, [pc, #372]	; (80022dc <menu+0xe70>)
 8002166:	2101      	movs	r1, #1
 8002168:	2002      	movs	r0, #2
 800216a:	f7fe fa7d 	bl	8000668 <lcd_print>
 800216e:	e016      	b.n	800219e <menu+0xd32>
			}
		} else if(altLimit == 1) {
 8002170:	4b58      	ldr	r3, [pc, #352]	; (80022d4 <menu+0xe68>)
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d112      	bne.n	800219e <menu+0xd32>
			if(dilSecim == 0){
 8002178:	4b4c      	ldr	r3, [pc, #304]	; (80022ac <menu+0xe40>)
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d105      	bne.n	800218c <menu+0xd20>
				lcd_print(2, 1, "Aktif           ");
 8002180:	4a57      	ldr	r2, [pc, #348]	; (80022e0 <menu+0xe74>)
 8002182:	2101      	movs	r1, #1
 8002184:	2002      	movs	r0, #2
 8002186:	f7fe fa6f 	bl	8000668 <lcd_print>
 800218a:	e008      	b.n	800219e <menu+0xd32>
			} else if(dilSecim == 1){
 800218c:	4b47      	ldr	r3, [pc, #284]	; (80022ac <menu+0xe40>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	2b01      	cmp	r3, #1
 8002192:	d104      	bne.n	800219e <menu+0xd32>
				lcd_print(2, 1, "Active          ");
 8002194:	4a46      	ldr	r2, [pc, #280]	; (80022b0 <menu+0xe44>)
 8002196:	2101      	movs	r1, #1
 8002198:	2002      	movs	r0, #2
 800219a:	f7fe fa65 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 800219e:	2102      	movs	r1, #2
 80021a0:	4844      	ldr	r0, [pc, #272]	; (80022b4 <menu+0xe48>)
 80021a2:	f007 fc85 	bl	8009ab0 <HAL_GPIO_ReadPin>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d119      	bne.n	80021e0 <menu+0xd74>
 80021ac:	4b42      	ldr	r3, [pc, #264]	; (80022b8 <menu+0xe4c>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	f083 0301 	eor.w	r3, r3, #1
 80021b4:	b2db      	uxtb	r3, r3
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d012      	beq.n	80021e0 <menu+0xd74>
 80021ba:	4b4a      	ldr	r3, [pc, #296]	; (80022e4 <menu+0xe78>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d10e      	bne.n	80021e0 <menu+0xd74>
			altLimit = altLimit + 1;
 80021c2:	4b44      	ldr	r3, [pc, #272]	; (80022d4 <menu+0xe68>)
 80021c4:	781b      	ldrb	r3, [r3, #0]
 80021c6:	3301      	adds	r3, #1
 80021c8:	b2da      	uxtb	r2, r3
 80021ca:	4b42      	ldr	r3, [pc, #264]	; (80022d4 <menu+0xe68>)
 80021cc:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 80021ce:	4b41      	ldr	r3, [pc, #260]	; (80022d4 <menu+0xe68>)
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	2b01      	cmp	r3, #1
 80021d4:	d902      	bls.n	80021dc <menu+0xd70>
				altLimit = 0;
 80021d6:	4b3f      	ldr	r3, [pc, #252]	; (80022d4 <menu+0xe68>)
 80021d8:	2200      	movs	r2, #0
 80021da:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80021dc:	f003 fed0 	bl	8005f80 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 80021e0:	2104      	movs	r1, #4
 80021e2:	4834      	ldr	r0, [pc, #208]	; (80022b4 <menu+0xe48>)
 80021e4:	f007 fc64 	bl	8009ab0 <HAL_GPIO_ReadPin>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d119      	bne.n	8002222 <menu+0xdb6>
 80021ee:	4b32      	ldr	r3, [pc, #200]	; (80022b8 <menu+0xe4c>)
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	f083 0301 	eor.w	r3, r3, #1
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d012      	beq.n	8002222 <menu+0xdb6>
 80021fc:	4b39      	ldr	r3, [pc, #228]	; (80022e4 <menu+0xe78>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d10e      	bne.n	8002222 <menu+0xdb6>
			altLimit = altLimit - 1;
 8002204:	4b33      	ldr	r3, [pc, #204]	; (80022d4 <menu+0xe68>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	3b01      	subs	r3, #1
 800220a:	b2da      	uxtb	r2, r3
 800220c:	4b31      	ldr	r3, [pc, #196]	; (80022d4 <menu+0xe68>)
 800220e:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8002210:	4b30      	ldr	r3, [pc, #192]	; (80022d4 <menu+0xe68>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d002      	beq.n	800221e <menu+0xdb2>
		   		altLimit = 1;
 8002218:	4b2e      	ldr	r3, [pc, #184]	; (80022d4 <menu+0xe68>)
 800221a:	2201      	movs	r2, #1
 800221c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800221e:	f003 feaf 	bl	8005f80 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002222:	2108      	movs	r1, #8
 8002224:	4823      	ldr	r0, [pc, #140]	; (80022b4 <menu+0xe48>)
 8002226:	f007 fc43 	bl	8009ab0 <HAL_GPIO_ReadPin>
 800222a:	4603      	mov	r3, r0
 800222c:	2b01      	cmp	r3, #1
 800222e:	d12d      	bne.n	800228c <menu+0xe20>
 8002230:	4b21      	ldr	r3, [pc, #132]	; (80022b8 <menu+0xe4c>)
 8002232:	781b      	ldrb	r3, [r3, #0]
 8002234:	f083 0301 	eor.w	r3, r3, #1
 8002238:	b2db      	uxtb	r3, r3
 800223a:	2b00      	cmp	r3, #0
 800223c:	d026      	beq.n	800228c <menu+0xe20>
			eepromData[5] = altLimit;
 800223e:	4b25      	ldr	r3, [pc, #148]	; (80022d4 <menu+0xe68>)
 8002240:	781a      	ldrb	r2, [r3, #0]
 8002242:	4b1f      	ldr	r3, [pc, #124]	; (80022c0 <menu+0xe54>)
 8002244:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 8002246:	4b23      	ldr	r3, [pc, #140]	; (80022d4 <menu+0xe68>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d110      	bne.n	8002270 <menu+0xe04>
 800224e:	4b26      	ldr	r3, [pc, #152]	; (80022e8 <menu+0xe7c>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d003      	beq.n	800225e <menu+0xdf2>
 8002256:	4b24      	ldr	r3, [pc, #144]	; (80022e8 <menu+0xe7c>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	2b02      	cmp	r3, #2
 800225c:	d108      	bne.n	8002270 <menu+0xe04>
				kapiTablaAcKonum = 3;
 800225e:	4b22      	ldr	r3, [pc, #136]	; (80022e8 <menu+0xe7c>)
 8002260:	2203      	movs	r2, #3
 8002262:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 8002264:	4b20      	ldr	r3, [pc, #128]	; (80022e8 <menu+0xe7c>)
 8002266:	781a      	ldrb	r2, [r3, #0]
 8002268:	4b15      	ldr	r3, [pc, #84]	; (80022c0 <menu+0xe54>)
 800226a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800226e:	e00a      	b.n	8002286 <menu+0xe1a>
			} else if(altLimit == 0) {
 8002270:	4b18      	ldr	r3, [pc, #96]	; (80022d4 <menu+0xe68>)
 8002272:	781b      	ldrb	r3, [r3, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d106      	bne.n	8002286 <menu+0xe1a>
				platformSilindirTipi = 0;
 8002278:	4b1c      	ldr	r3, [pc, #112]	; (80022ec <menu+0xe80>)
 800227a:	2200      	movs	r2, #0
 800227c:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 800227e:	4b1b      	ldr	r3, [pc, #108]	; (80022ec <menu+0xe80>)
 8002280:	781a      	ldrb	r2, [r3, #0]
 8002282:	4b0f      	ldr	r3, [pc, #60]	; (80022c0 <menu+0xe54>)
 8002284:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 8002286:	4b0f      	ldr	r3, [pc, #60]	; (80022c4 <menu+0xe58>)
 8002288:	2201      	movs	r2, #1
 800228a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 800228c:	4b0e      	ldr	r3, [pc, #56]	; (80022c8 <menu+0xe5c>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	2b06      	cmp	r3, #6
 8002292:	f040 80b6 	bne.w	8002402 <menu+0xf96>
		if(dilSecim == 0) {
 8002296:	4b05      	ldr	r3, [pc, #20]	; (80022ac <menu+0xe40>)
 8002298:	781b      	ldrb	r3, [r3, #0]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d12a      	bne.n	80022f4 <menu+0xe88>
			lcd_print(1, 1, "BASINC SALTERI ");
 800229e:	4a14      	ldr	r2, [pc, #80]	; (80022f0 <menu+0xe84>)
 80022a0:	2101      	movs	r1, #1
 80022a2:	2001      	movs	r0, #1
 80022a4:	f7fe f9e0 	bl	8000668 <lcd_print>
 80022a8:	e02d      	b.n	8002306 <menu+0xe9a>
 80022aa:	bf00      	nop
 80022ac:	20000c5a 	.word	0x20000c5a
 80022b0:	0800da80 	.word	0x0800da80
 80022b4:	40010800 	.word	0x40010800
 80022b8:	20000c68 	.word	0x20000c68
 80022bc:	20000c3e 	.word	0x20000c3e
 80022c0:	20000b28 	.word	0x20000b28
 80022c4:	20000c65 	.word	0x20000c65
 80022c8:	20000c39 	.word	0x20000c39
 80022cc:	0800da94 	.word	0x0800da94
 80022d0:	0800daa8 	.word	0x0800daa8
 80022d4:	20000c3f 	.word	0x20000c3f
 80022d8:	0800da0c 	.word	0x0800da0c
 80022dc:	0800da20 	.word	0x0800da20
 80022e0:	0800da6c 	.word	0x0800da6c
 80022e4:	20000c3a 	.word	0x20000c3a
 80022e8:	20000c46 	.word	0x20000c46
 80022ec:	20000c4c 	.word	0x20000c4c
 80022f0:	0800dabc 	.word	0x0800dabc
		} else if(dilSecim == 1){
 80022f4:	4b7a      	ldr	r3, [pc, #488]	; (80024e0 <menu+0x1074>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d104      	bne.n	8002306 <menu+0xe9a>
			lcd_print(1, 1, "PRESSURE SWITCH");
 80022fc:	4a79      	ldr	r2, [pc, #484]	; (80024e4 <menu+0x1078>)
 80022fe:	2101      	movs	r1, #1
 8002300:	2001      	movs	r0, #1
 8002302:	f7fe f9b1 	bl	8000668 <lcd_print>
		}
		if(basincSalteri == 0){
 8002306:	4b78      	ldr	r3, [pc, #480]	; (80024e8 <menu+0x107c>)
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d113      	bne.n	8002336 <menu+0xeca>
			if(dilSecim == 0) {
 800230e:	4b74      	ldr	r3, [pc, #464]	; (80024e0 <menu+0x1074>)
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d105      	bne.n	8002322 <menu+0xeb6>
				lcd_print(2, 1, "Pasif           ");
 8002316:	4a75      	ldr	r2, [pc, #468]	; (80024ec <menu+0x1080>)
 8002318:	2101      	movs	r1, #1
 800231a:	2002      	movs	r0, #2
 800231c:	f7fe f9a4 	bl	8000668 <lcd_print>
 8002320:	e020      	b.n	8002364 <menu+0xef8>
			} else if(dilSecim == 1){
 8002322:	4b6f      	ldr	r3, [pc, #444]	; (80024e0 <menu+0x1074>)
 8002324:	781b      	ldrb	r3, [r3, #0]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d11c      	bne.n	8002364 <menu+0xef8>
				lcd_print(2, 1, "Passive         ");
 800232a:	4a71      	ldr	r2, [pc, #452]	; (80024f0 <menu+0x1084>)
 800232c:	2101      	movs	r1, #1
 800232e:	2002      	movs	r0, #2
 8002330:	f7fe f99a 	bl	8000668 <lcd_print>
 8002334:	e016      	b.n	8002364 <menu+0xef8>
			}
		} else if(basincSalteri == 1) {
 8002336:	4b6c      	ldr	r3, [pc, #432]	; (80024e8 <menu+0x107c>)
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d112      	bne.n	8002364 <menu+0xef8>
			if(dilSecim == 0) {
 800233e:	4b68      	ldr	r3, [pc, #416]	; (80024e0 <menu+0x1074>)
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d105      	bne.n	8002352 <menu+0xee6>
				lcd_print(2, 1, "Aktif           ");
 8002346:	4a6b      	ldr	r2, [pc, #428]	; (80024f4 <menu+0x1088>)
 8002348:	2101      	movs	r1, #1
 800234a:	2002      	movs	r0, #2
 800234c:	f7fe f98c 	bl	8000668 <lcd_print>
 8002350:	e008      	b.n	8002364 <menu+0xef8>
			} else if(dilSecim == 1) {
 8002352:	4b63      	ldr	r3, [pc, #396]	; (80024e0 <menu+0x1074>)
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d104      	bne.n	8002364 <menu+0xef8>
				lcd_print(2, 1, "Active          ");
 800235a:	4a67      	ldr	r2, [pc, #412]	; (80024f8 <menu+0x108c>)
 800235c:	2101      	movs	r1, #1
 800235e:	2002      	movs	r0, #2
 8002360:	f7fe f982 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002364:	2102      	movs	r1, #2
 8002366:	4865      	ldr	r0, [pc, #404]	; (80024fc <menu+0x1090>)
 8002368:	f007 fba2 	bl	8009ab0 <HAL_GPIO_ReadPin>
 800236c:	4603      	mov	r3, r0
 800236e:	2b01      	cmp	r3, #1
 8002370:	d115      	bne.n	800239e <menu+0xf32>
 8002372:	4b63      	ldr	r3, [pc, #396]	; (8002500 <menu+0x1094>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	f083 0301 	eor.w	r3, r3, #1
 800237a:	b2db      	uxtb	r3, r3
 800237c:	2b00      	cmp	r3, #0
 800237e:	d00e      	beq.n	800239e <menu+0xf32>
			basincSalteri = basincSalteri + 1;
 8002380:	4b59      	ldr	r3, [pc, #356]	; (80024e8 <menu+0x107c>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	3301      	adds	r3, #1
 8002386:	b2da      	uxtb	r2, r3
 8002388:	4b57      	ldr	r3, [pc, #348]	; (80024e8 <menu+0x107c>)
 800238a:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 800238c:	4b56      	ldr	r3, [pc, #344]	; (80024e8 <menu+0x107c>)
 800238e:	781b      	ldrb	r3, [r3, #0]
 8002390:	2b01      	cmp	r3, #1
 8002392:	d902      	bls.n	800239a <menu+0xf2e>
				basincSalteri = 0;
 8002394:	4b54      	ldr	r3, [pc, #336]	; (80024e8 <menu+0x107c>)
 8002396:	2200      	movs	r2, #0
 8002398:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800239a:	f003 fdf1 	bl	8005f80 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800239e:	2104      	movs	r1, #4
 80023a0:	4856      	ldr	r0, [pc, #344]	; (80024fc <menu+0x1090>)
 80023a2:	f007 fb85 	bl	8009ab0 <HAL_GPIO_ReadPin>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d115      	bne.n	80023d8 <menu+0xf6c>
 80023ac:	4b54      	ldr	r3, [pc, #336]	; (8002500 <menu+0x1094>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	f083 0301 	eor.w	r3, r3, #1
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d00e      	beq.n	80023d8 <menu+0xf6c>
			basincSalteri = basincSalteri - 1;
 80023ba:	4b4b      	ldr	r3, [pc, #300]	; (80024e8 <menu+0x107c>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	3b01      	subs	r3, #1
 80023c0:	b2da      	uxtb	r2, r3
 80023c2:	4b49      	ldr	r3, [pc, #292]	; (80024e8 <menu+0x107c>)
 80023c4:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 80023c6:	4b48      	ldr	r3, [pc, #288]	; (80024e8 <menu+0x107c>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d002      	beq.n	80023d4 <menu+0xf68>
		   		basincSalteri = 1;
 80023ce:	4b46      	ldr	r3, [pc, #280]	; (80024e8 <menu+0x107c>)
 80023d0:	2201      	movs	r2, #1
 80023d2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80023d4:	f003 fdd4 	bl	8005f80 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80023d8:	2108      	movs	r1, #8
 80023da:	4848      	ldr	r0, [pc, #288]	; (80024fc <menu+0x1090>)
 80023dc:	f007 fb68 	bl	8009ab0 <HAL_GPIO_ReadPin>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d10d      	bne.n	8002402 <menu+0xf96>
 80023e6:	4b46      	ldr	r3, [pc, #280]	; (8002500 <menu+0x1094>)
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	f083 0301 	eor.w	r3, r3, #1
 80023ee:	b2db      	uxtb	r3, r3
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d006      	beq.n	8002402 <menu+0xf96>
			eepromData[6] = basincSalteri;
 80023f4:	4b3c      	ldr	r3, [pc, #240]	; (80024e8 <menu+0x107c>)
 80023f6:	781a      	ldrb	r2, [r3, #0]
 80023f8:	4b42      	ldr	r3, [pc, #264]	; (8002504 <menu+0x1098>)
 80023fa:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 80023fc:	4b42      	ldr	r3, [pc, #264]	; (8002508 <menu+0x109c>)
 80023fe:	2201      	movs	r2, #1
 8002400:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 8002402:	4b42      	ldr	r3, [pc, #264]	; (800250c <menu+0x10a0>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	2b07      	cmp	r3, #7
 8002408:	f040 80f5 	bne.w	80025f6 <menu+0x118a>
		if(dilSecim == 0) {
 800240c:	4b34      	ldr	r3, [pc, #208]	; (80024e0 <menu+0x1074>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d105      	bne.n	8002420 <menu+0xfb4>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 8002414:	4a3e      	ldr	r2, [pc, #248]	; (8002510 <menu+0x10a4>)
 8002416:	2101      	movs	r1, #1
 8002418:	2001      	movs	r0, #1
 800241a:	f7fe f925 	bl	8000668 <lcd_print>
 800241e:	e008      	b.n	8002432 <menu+0xfc6>
		} else if(dilSecim == 1){
 8002420:	4b2f      	ldr	r3, [pc, #188]	; (80024e0 <menu+0x1074>)
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	2b01      	cmp	r3, #1
 8002426:	d104      	bne.n	8002432 <menu+0xfc6>
			lcd_print(1, 1, "DOOR SELECTION     ");
 8002428:	4a3a      	ldr	r2, [pc, #232]	; (8002514 <menu+0x10a8>)
 800242a:	2101      	movs	r1, #1
 800242c:	2001      	movs	r0, #1
 800242e:	f7fe f91b 	bl	8000668 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 8002432:	4b39      	ldr	r3, [pc, #228]	; (8002518 <menu+0x10ac>)
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d113      	bne.n	8002462 <menu+0xff6>
			if(dilSecim == 0) {
 800243a:	4b29      	ldr	r3, [pc, #164]	; (80024e0 <menu+0x1074>)
 800243c:	781b      	ldrb	r3, [r3, #0]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d105      	bne.n	800244e <menu+0xfe2>
				lcd_print(2, 1, "Pasif           ");
 8002442:	4a2a      	ldr	r2, [pc, #168]	; (80024ec <menu+0x1080>)
 8002444:	2101      	movs	r1, #1
 8002446:	2002      	movs	r0, #2
 8002448:	f7fe f90e 	bl	8000668 <lcd_print>
 800244c:	e079      	b.n	8002542 <menu+0x10d6>
			} else if(dilSecim == 1){
 800244e:	4b24      	ldr	r3, [pc, #144]	; (80024e0 <menu+0x1074>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d175      	bne.n	8002542 <menu+0x10d6>
				lcd_print(2, 1, "Passive         ");
 8002456:	4a26      	ldr	r2, [pc, #152]	; (80024f0 <menu+0x1084>)
 8002458:	2101      	movs	r1, #1
 800245a:	2002      	movs	r0, #2
 800245c:	f7fe f904 	bl	8000668 <lcd_print>
 8002460:	e06f      	b.n	8002542 <menu+0x10d6>
			}
		} else if(kapiSecimleri == 1) {
 8002462:	4b2d      	ldr	r3, [pc, #180]	; (8002518 <menu+0x10ac>)
 8002464:	781b      	ldrb	r3, [r3, #0]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d113      	bne.n	8002492 <menu+0x1026>
			if(dilSecim == 0) {
 800246a:	4b1d      	ldr	r3, [pc, #116]	; (80024e0 <menu+0x1074>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d105      	bne.n	800247e <menu+0x1012>
				lcd_print(2, 1, "Kat kapisi aktif");
 8002472:	4a2a      	ldr	r2, [pc, #168]	; (800251c <menu+0x10b0>)
 8002474:	2101      	movs	r1, #1
 8002476:	2002      	movs	r0, #2
 8002478:	f7fe f8f6 	bl	8000668 <lcd_print>
 800247c:	e061      	b.n	8002542 <menu+0x10d6>
			} else if(dilSecim == 1) {
 800247e:	4b18      	ldr	r3, [pc, #96]	; (80024e0 <menu+0x1074>)
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	2b01      	cmp	r3, #1
 8002484:	d15d      	bne.n	8002542 <menu+0x10d6>
				lcd_print(2, 1, "Floor door act  ");
 8002486:	4a26      	ldr	r2, [pc, #152]	; (8002520 <menu+0x10b4>)
 8002488:	2101      	movs	r1, #1
 800248a:	2002      	movs	r0, #2
 800248c:	f7fe f8ec 	bl	8000668 <lcd_print>
 8002490:	e057      	b.n	8002542 <menu+0x10d6>
			}
		} else if(kapiSecimleri == 2){
 8002492:	4b21      	ldr	r3, [pc, #132]	; (8002518 <menu+0x10ac>)
 8002494:	781b      	ldrb	r3, [r3, #0]
 8002496:	2b02      	cmp	r3, #2
 8002498:	d113      	bne.n	80024c2 <menu+0x1056>
			if(dilSecim == 0) {
 800249a:	4b11      	ldr	r3, [pc, #68]	; (80024e0 <menu+0x1074>)
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d105      	bne.n	80024ae <menu+0x1042>
				lcd_print(2, 1, "Tabla kapi aktif");
 80024a2:	4a20      	ldr	r2, [pc, #128]	; (8002524 <menu+0x10b8>)
 80024a4:	2101      	movs	r1, #1
 80024a6:	2002      	movs	r0, #2
 80024a8:	f7fe f8de 	bl	8000668 <lcd_print>
 80024ac:	e049      	b.n	8002542 <menu+0x10d6>
			} else if(dilSecim == 1) {
 80024ae:	4b0c      	ldr	r3, [pc, #48]	; (80024e0 <menu+0x1074>)
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d145      	bne.n	8002542 <menu+0x10d6>
				lcd_print(2, 1, "Pltfrm door act ");
 80024b6:	4a1c      	ldr	r2, [pc, #112]	; (8002528 <menu+0x10bc>)
 80024b8:	2101      	movs	r1, #1
 80024ba:	2002      	movs	r0, #2
 80024bc:	f7fe f8d4 	bl	8000668 <lcd_print>
 80024c0:	e03f      	b.n	8002542 <menu+0x10d6>
			}
		} else if(kapiSecimleri == 3){
 80024c2:	4b15      	ldr	r3, [pc, #84]	; (8002518 <menu+0x10ac>)
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	2b03      	cmp	r3, #3
 80024c8:	d13b      	bne.n	8002542 <menu+0x10d6>
			if(dilSecim == 0) {
 80024ca:	4b05      	ldr	r3, [pc, #20]	; (80024e0 <menu+0x1074>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d12e      	bne.n	8002530 <menu+0x10c4>
				lcd_print(2, 1, "Kat + Tabl aktif");
 80024d2:	4a16      	ldr	r2, [pc, #88]	; (800252c <menu+0x10c0>)
 80024d4:	2101      	movs	r1, #1
 80024d6:	2002      	movs	r0, #2
 80024d8:	f7fe f8c6 	bl	8000668 <lcd_print>
 80024dc:	e031      	b.n	8002542 <menu+0x10d6>
 80024de:	bf00      	nop
 80024e0:	20000c5a 	.word	0x20000c5a
 80024e4:	0800dacc 	.word	0x0800dacc
 80024e8:	20000c40 	.word	0x20000c40
 80024ec:	0800da0c 	.word	0x0800da0c
 80024f0:	0800da20 	.word	0x0800da20
 80024f4:	0800da6c 	.word	0x0800da6c
 80024f8:	0800da80 	.word	0x0800da80
 80024fc:	40010800 	.word	0x40010800
 8002500:	20000c68 	.word	0x20000c68
 8002504:	20000b28 	.word	0x20000b28
 8002508:	20000c65 	.word	0x20000c65
 800250c:	20000c39 	.word	0x20000c39
 8002510:	0800dadc 	.word	0x0800dadc
 8002514:	0800daf0 	.word	0x0800daf0
 8002518:	20000c41 	.word	0x20000c41
 800251c:	0800db04 	.word	0x0800db04
 8002520:	0800db18 	.word	0x0800db18
 8002524:	0800db2c 	.word	0x0800db2c
 8002528:	0800db40 	.word	0x0800db40
 800252c:	0800db54 	.word	0x0800db54
			} else if(dilSecim == 1){
 8002530:	4b99      	ldr	r3, [pc, #612]	; (8002798 <menu+0x132c>)
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d104      	bne.n	8002542 <menu+0x10d6>
				lcd_print(2, 1, "Flr + Plrfrm act");
 8002538:	4a98      	ldr	r2, [pc, #608]	; (800279c <menu+0x1330>)
 800253a:	2101      	movs	r1, #1
 800253c:	2002      	movs	r0, #2
 800253e:	f7fe f893 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002542:	2102      	movs	r1, #2
 8002544:	4896      	ldr	r0, [pc, #600]	; (80027a0 <menu+0x1334>)
 8002546:	f007 fab3 	bl	8009ab0 <HAL_GPIO_ReadPin>
 800254a:	4603      	mov	r3, r0
 800254c:	2b01      	cmp	r3, #1
 800254e:	d115      	bne.n	800257c <menu+0x1110>
 8002550:	4b94      	ldr	r3, [pc, #592]	; (80027a4 <menu+0x1338>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	f083 0301 	eor.w	r3, r3, #1
 8002558:	b2db      	uxtb	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	d00e      	beq.n	800257c <menu+0x1110>
			kapiSecimleri = kapiSecimleri + 1;
 800255e:	4b92      	ldr	r3, [pc, #584]	; (80027a8 <menu+0x133c>)
 8002560:	781b      	ldrb	r3, [r3, #0]
 8002562:	3301      	adds	r3, #1
 8002564:	b2da      	uxtb	r2, r3
 8002566:	4b90      	ldr	r3, [pc, #576]	; (80027a8 <menu+0x133c>)
 8002568:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 800256a:	4b8f      	ldr	r3, [pc, #572]	; (80027a8 <menu+0x133c>)
 800256c:	781b      	ldrb	r3, [r3, #0]
 800256e:	2b03      	cmp	r3, #3
 8002570:	d902      	bls.n	8002578 <menu+0x110c>
				kapiSecimleri = 0;
 8002572:	4b8d      	ldr	r3, [pc, #564]	; (80027a8 <menu+0x133c>)
 8002574:	2200      	movs	r2, #0
 8002576:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002578:	f003 fd02 	bl	8005f80 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800257c:	2104      	movs	r1, #4
 800257e:	4888      	ldr	r0, [pc, #544]	; (80027a0 <menu+0x1334>)
 8002580:	f007 fa96 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8002584:	4603      	mov	r3, r0
 8002586:	2b01      	cmp	r3, #1
 8002588:	d115      	bne.n	80025b6 <menu+0x114a>
 800258a:	4b86      	ldr	r3, [pc, #536]	; (80027a4 <menu+0x1338>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	f083 0301 	eor.w	r3, r3, #1
 8002592:	b2db      	uxtb	r3, r3
 8002594:	2b00      	cmp	r3, #0
 8002596:	d00e      	beq.n	80025b6 <menu+0x114a>
			kapiSecimleri = kapiSecimleri - 1;
 8002598:	4b83      	ldr	r3, [pc, #524]	; (80027a8 <menu+0x133c>)
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	3b01      	subs	r3, #1
 800259e:	b2da      	uxtb	r2, r3
 80025a0:	4b81      	ldr	r3, [pc, #516]	; (80027a8 <menu+0x133c>)
 80025a2:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 80025a4:	4b80      	ldr	r3, [pc, #512]	; (80027a8 <menu+0x133c>)
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	2b04      	cmp	r3, #4
 80025aa:	d902      	bls.n	80025b2 <menu+0x1146>
		   		kapiSecimleri = 3;
 80025ac:	4b7e      	ldr	r3, [pc, #504]	; (80027a8 <menu+0x133c>)
 80025ae:	2203      	movs	r2, #3
 80025b0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80025b2:	f003 fce5 	bl	8005f80 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80025b6:	2108      	movs	r1, #8
 80025b8:	4879      	ldr	r0, [pc, #484]	; (80027a0 <menu+0x1334>)
 80025ba:	f007 fa79 	bl	8009ab0 <HAL_GPIO_ReadPin>
 80025be:	4603      	mov	r3, r0
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d118      	bne.n	80025f6 <menu+0x118a>
 80025c4:	4b77      	ldr	r3, [pc, #476]	; (80027a4 <menu+0x1338>)
 80025c6:	781b      	ldrb	r3, [r3, #0]
 80025c8:	f083 0301 	eor.w	r3, r3, #1
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d011      	beq.n	80025f6 <menu+0x118a>
			eepromData[7] = kapiSecimleri;
 80025d2:	4b75      	ldr	r3, [pc, #468]	; (80027a8 <menu+0x133c>)
 80025d4:	781a      	ldrb	r2, [r3, #0]
 80025d6:	4b75      	ldr	r3, [pc, #468]	; (80027ac <menu+0x1340>)
 80025d8:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 80025da:	4b73      	ldr	r3, [pc, #460]	; (80027a8 <menu+0x133c>)
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d006      	beq.n	80025f0 <menu+0x1184>
				altLimit = 1;
 80025e2:	4b73      	ldr	r3, [pc, #460]	; (80027b0 <menu+0x1344>)
 80025e4:	2201      	movs	r2, #1
 80025e6:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80025e8:	4b71      	ldr	r3, [pc, #452]	; (80027b0 <menu+0x1344>)
 80025ea:	781a      	ldrb	r2, [r3, #0]
 80025ec:	4b6f      	ldr	r3, [pc, #444]	; (80027ac <menu+0x1340>)
 80025ee:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 80025f0:	4b70      	ldr	r3, [pc, #448]	; (80027b4 <menu+0x1348>)
 80025f2:	2201      	movs	r2, #1
 80025f4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 80025f6:	4b70      	ldr	r3, [pc, #448]	; (80027b8 <menu+0x134c>)
 80025f8:	781b      	ldrb	r3, [r3, #0]
 80025fa:	2b08      	cmp	r3, #8
 80025fc:	f040 8092 	bne.w	8002724 <menu+0x12b8>
		if(dilSecim == 0) {
 8002600:	4b65      	ldr	r3, [pc, #404]	; (8002798 <menu+0x132c>)
 8002602:	781b      	ldrb	r3, [r3, #0]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d105      	bne.n	8002614 <menu+0x11a8>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 8002608:	4a6c      	ldr	r2, [pc, #432]	; (80027bc <menu+0x1350>)
 800260a:	2101      	movs	r1, #1
 800260c:	2001      	movs	r0, #1
 800260e:	f7fe f82b 	bl	8000668 <lcd_print>
 8002612:	e008      	b.n	8002626 <menu+0x11ba>
		} else if(dilSecim == 1) {
 8002614:	4b60      	ldr	r3, [pc, #384]	; (8002798 <menu+0x132c>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d104      	bne.n	8002626 <menu+0x11ba>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 800261c:	4a68      	ldr	r2, [pc, #416]	; (80027c0 <menu+0x1354>)
 800261e:	2101      	movs	r1, #1
 8002620:	2001      	movs	r0, #1
 8002622:	f7fe f821 	bl	8000668 <lcd_print>
		}

		if(kapiAcTipi == 0){
 8002626:	4b67      	ldr	r3, [pc, #412]	; (80027c4 <menu+0x1358>)
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d113      	bne.n	8002656 <menu+0x11ea>
			if(dilSecim == 0) {
 800262e:	4b5a      	ldr	r3, [pc, #360]	; (8002798 <menu+0x132c>)
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d105      	bne.n	8002642 <menu+0x11d6>
				lcd_print(2, 1, "Kapi butonu ESP");
 8002636:	4a64      	ldr	r2, [pc, #400]	; (80027c8 <menu+0x135c>)
 8002638:	2101      	movs	r1, #1
 800263a:	2002      	movs	r0, #2
 800263c:	f7fe f814 	bl	8000668 <lcd_print>
 8002640:	e020      	b.n	8002684 <menu+0x1218>
			} else if(dilSecim == 1) {
 8002642:	4b55      	ldr	r3, [pc, #340]	; (8002798 <menu+0x132c>)
 8002644:	781b      	ldrb	r3, [r3, #0]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d11c      	bne.n	8002684 <menu+0x1218>
				lcd_print(2, 1, "Door Button ESP");
 800264a:	4a60      	ldr	r2, [pc, #384]	; (80027cc <menu+0x1360>)
 800264c:	2101      	movs	r1, #1
 800264e:	2002      	movs	r0, #2
 8002650:	f7fe f80a 	bl	8000668 <lcd_print>
 8002654:	e016      	b.n	8002684 <menu+0x1218>
			}
		} else if(kapiAcTipi == 1){
 8002656:	4b5b      	ldr	r3, [pc, #364]	; (80027c4 <menu+0x1358>)
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	2b01      	cmp	r3, #1
 800265c:	d112      	bne.n	8002684 <menu+0x1218>
			if(dilSecim == 0){
 800265e:	4b4e      	ldr	r3, [pc, #312]	; (8002798 <menu+0x132c>)
 8002660:	781b      	ldrb	r3, [r3, #0]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d105      	bne.n	8002672 <menu+0x1206>
				lcd_print(2, 1, "Kat butonu EXT  ");
 8002666:	4a5a      	ldr	r2, [pc, #360]	; (80027d0 <menu+0x1364>)
 8002668:	2101      	movs	r1, #1
 800266a:	2002      	movs	r0, #2
 800266c:	f7fd fffc 	bl	8000668 <lcd_print>
 8002670:	e008      	b.n	8002684 <menu+0x1218>
			} else if(dilSecim == 1){
 8002672:	4b49      	ldr	r3, [pc, #292]	; (8002798 <menu+0x132c>)
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	2b01      	cmp	r3, #1
 8002678:	d104      	bne.n	8002684 <menu+0x1218>
				lcd_print(2, 1, "Floor button EXT");
 800267a:	4a56      	ldr	r2, [pc, #344]	; (80027d4 <menu+0x1368>)
 800267c:	2101      	movs	r1, #1
 800267e:	2002      	movs	r0, #2
 8002680:	f7fd fff2 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002684:	2102      	movs	r1, #2
 8002686:	4846      	ldr	r0, [pc, #280]	; (80027a0 <menu+0x1334>)
 8002688:	f007 fa12 	bl	8009ab0 <HAL_GPIO_ReadPin>
 800268c:	4603      	mov	r3, r0
 800268e:	2b01      	cmp	r3, #1
 8002690:	d115      	bne.n	80026be <menu+0x1252>
 8002692:	4b44      	ldr	r3, [pc, #272]	; (80027a4 <menu+0x1338>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	f083 0301 	eor.w	r3, r3, #1
 800269a:	b2db      	uxtb	r3, r3
 800269c:	2b00      	cmp	r3, #0
 800269e:	d00e      	beq.n	80026be <menu+0x1252>
			kapiAcTipi = kapiAcTipi + 1;
 80026a0:	4b48      	ldr	r3, [pc, #288]	; (80027c4 <menu+0x1358>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	3301      	adds	r3, #1
 80026a6:	b2da      	uxtb	r2, r3
 80026a8:	4b46      	ldr	r3, [pc, #280]	; (80027c4 <menu+0x1358>)
 80026aa:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 80026ac:	4b45      	ldr	r3, [pc, #276]	; (80027c4 <menu+0x1358>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	2b01      	cmp	r3, #1
 80026b2:	d902      	bls.n	80026ba <menu+0x124e>
				kapiAcTipi = 0;
 80026b4:	4b43      	ldr	r3, [pc, #268]	; (80027c4 <menu+0x1358>)
 80026b6:	2200      	movs	r2, #0
 80026b8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80026ba:	f003 fc61 	bl	8005f80 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80026be:	2104      	movs	r1, #4
 80026c0:	4837      	ldr	r0, [pc, #220]	; (80027a0 <menu+0x1334>)
 80026c2:	f007 f9f5 	bl	8009ab0 <HAL_GPIO_ReadPin>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d115      	bne.n	80026f8 <menu+0x128c>
 80026cc:	4b35      	ldr	r3, [pc, #212]	; (80027a4 <menu+0x1338>)
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	f083 0301 	eor.w	r3, r3, #1
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d00e      	beq.n	80026f8 <menu+0x128c>
			kapiAcTipi = kapiAcTipi - 1;
 80026da:	4b3a      	ldr	r3, [pc, #232]	; (80027c4 <menu+0x1358>)
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	3b01      	subs	r3, #1
 80026e0:	b2da      	uxtb	r2, r3
 80026e2:	4b38      	ldr	r3, [pc, #224]	; (80027c4 <menu+0x1358>)
 80026e4:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 80026e6:	4b37      	ldr	r3, [pc, #220]	; (80027c4 <menu+0x1358>)
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d002      	beq.n	80026f4 <menu+0x1288>
		   		kapiAcTipi = 1;
 80026ee:	4b35      	ldr	r3, [pc, #212]	; (80027c4 <menu+0x1358>)
 80026f0:	2201      	movs	r2, #1
 80026f2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80026f4:	f003 fc44 	bl	8005f80 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80026f8:	2108      	movs	r1, #8
 80026fa:	4829      	ldr	r0, [pc, #164]	; (80027a0 <menu+0x1334>)
 80026fc:	f007 f9d8 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8002700:	4603      	mov	r3, r0
 8002702:	2b01      	cmp	r3, #1
 8002704:	d10e      	bne.n	8002724 <menu+0x12b8>
 8002706:	4b27      	ldr	r3, [pc, #156]	; (80027a4 <menu+0x1338>)
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	f083 0301 	eor.w	r3, r3, #1
 800270e:	b2db      	uxtb	r3, r3
 8002710:	2b00      	cmp	r3, #0
 8002712:	d007      	beq.n	8002724 <menu+0x12b8>
			eepromData[36] = kapiAcTipi;
 8002714:	4b2b      	ldr	r3, [pc, #172]	; (80027c4 <menu+0x1358>)
 8002716:	781a      	ldrb	r2, [r3, #0]
 8002718:	4b24      	ldr	r3, [pc, #144]	; (80027ac <menu+0x1340>)
 800271a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 800271e:	4b25      	ldr	r3, [pc, #148]	; (80027b4 <menu+0x1348>)
 8002720:	2201      	movs	r2, #1
 8002722:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 8002724:	4b24      	ldr	r3, [pc, #144]	; (80027b8 <menu+0x134c>)
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	2b09      	cmp	r3, #9
 800272a:	f040 80b9 	bne.w	80028a0 <menu+0x1434>
		if(dilSecim == 0){
 800272e:	4b1a      	ldr	r3, [pc, #104]	; (8002798 <menu+0x132c>)
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d105      	bne.n	8002742 <menu+0x12d6>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 8002736:	4a28      	ldr	r2, [pc, #160]	; (80027d8 <menu+0x136c>)
 8002738:	2101      	movs	r1, #1
 800273a:	2001      	movs	r0, #1
 800273c:	f7fd ff94 	bl	8000668 <lcd_print>
 8002740:	e008      	b.n	8002754 <menu+0x12e8>
		} else if(dilSecim == 1) {
 8002742:	4b15      	ldr	r3, [pc, #84]	; (8002798 <menu+0x132c>)
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	2b01      	cmp	r3, #1
 8002748:	d104      	bne.n	8002754 <menu+0x12e8>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 800274a:	4a24      	ldr	r2, [pc, #144]	; (80027dc <menu+0x1370>)
 800274c:	2101      	movs	r1, #1
 800274e:	2001      	movs	r0, #1
 8002750:	f7fd ff8a 	bl	8000668 <lcd_print>
		}

		if(kapi1Tip == 0) {
 8002754:	4b22      	ldr	r3, [pc, #136]	; (80027e0 <menu+0x1374>)
 8002756:	781b      	ldrb	r3, [r3, #0]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d105      	bne.n	8002768 <menu+0x12fc>
			lcd_print(2, 1, "Prudhome        ");
 800275c:	4a21      	ldr	r2, [pc, #132]	; (80027e4 <menu+0x1378>)
 800275e:	2101      	movs	r1, #1
 8002760:	2002      	movs	r0, #2
 8002762:	f7fd ff81 	bl	8000668 <lcd_print>
 8002766:	e04c      	b.n	8002802 <menu+0x1396>
		} else if(kapi1Tip == 1) {
 8002768:	4b1d      	ldr	r3, [pc, #116]	; (80027e0 <menu+0x1374>)
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d13f      	bne.n	80027f0 <menu+0x1384>
			if(dilSecim == 0){
 8002770:	4b09      	ldr	r3, [pc, #36]	; (8002798 <menu+0x132c>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d105      	bne.n	8002784 <menu+0x1318>
				lcd_print(2, 1, "Buton kontrollu");
 8002778:	4a1b      	ldr	r2, [pc, #108]	; (80027e8 <menu+0x137c>)
 800277a:	2101      	movs	r1, #1
 800277c:	2002      	movs	r0, #2
 800277e:	f7fd ff73 	bl	8000668 <lcd_print>
 8002782:	e03e      	b.n	8002802 <menu+0x1396>
			} else if(dilSecim == 1) {
 8002784:	4b04      	ldr	r3, [pc, #16]	; (8002798 <menu+0x132c>)
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	2b01      	cmp	r3, #1
 800278a:	d13a      	bne.n	8002802 <menu+0x1396>
				lcd_print(2, 1, "Button cntrolled");
 800278c:	4a17      	ldr	r2, [pc, #92]	; (80027ec <menu+0x1380>)
 800278e:	2101      	movs	r1, #1
 8002790:	2002      	movs	r0, #2
 8002792:	f7fd ff69 	bl	8000668 <lcd_print>
 8002796:	e034      	b.n	8002802 <menu+0x1396>
 8002798:	20000c5a 	.word	0x20000c5a
 800279c:	0800db68 	.word	0x0800db68
 80027a0:	40010800 	.word	0x40010800
 80027a4:	20000c68 	.word	0x20000c68
 80027a8:	20000c41 	.word	0x20000c41
 80027ac:	20000b28 	.word	0x20000b28
 80027b0:	20000c3f 	.word	0x20000c3f
 80027b4:	20000c65 	.word	0x20000c65
 80027b8:	20000c39 	.word	0x20000c39
 80027bc:	0800db7c 	.word	0x0800db7c
 80027c0:	0800db90 	.word	0x0800db90
 80027c4:	20000c45 	.word	0x20000c45
 80027c8:	0800dba4 	.word	0x0800dba4
 80027cc:	0800dbb4 	.word	0x0800dbb4
 80027d0:	0800dbc4 	.word	0x0800dbc4
 80027d4:	0800dbd8 	.word	0x0800dbd8
 80027d8:	0800dbec 	.word	0x0800dbec
 80027dc:	0800dc00 	.word	0x0800dc00
 80027e0:	20000c42 	.word	0x20000c42
 80027e4:	0800dc14 	.word	0x0800dc14
 80027e8:	0800dc28 	.word	0x0800dc28
 80027ec:	0800dc38 	.word	0x0800dc38
			}
		} else if(kapi1Tip == 2) {
 80027f0:	4b8a      	ldr	r3, [pc, #552]	; (8002a1c <menu+0x15b0>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d104      	bne.n	8002802 <menu+0x1396>
			lcd_print(2, 1, "Pizzato        ");
 80027f8:	4a89      	ldr	r2, [pc, #548]	; (8002a20 <menu+0x15b4>)
 80027fa:	2101      	movs	r1, #1
 80027fc:	2002      	movs	r0, #2
 80027fe:	f7fd ff33 	bl	8000668 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002802:	2102      	movs	r1, #2
 8002804:	4887      	ldr	r0, [pc, #540]	; (8002a24 <menu+0x15b8>)
 8002806:	f007 f953 	bl	8009ab0 <HAL_GPIO_ReadPin>
 800280a:	4603      	mov	r3, r0
 800280c:	2b01      	cmp	r3, #1
 800280e:	d115      	bne.n	800283c <menu+0x13d0>
 8002810:	4b85      	ldr	r3, [pc, #532]	; (8002a28 <menu+0x15bc>)
 8002812:	781b      	ldrb	r3, [r3, #0]
 8002814:	f083 0301 	eor.w	r3, r3, #1
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b00      	cmp	r3, #0
 800281c:	d00e      	beq.n	800283c <menu+0x13d0>
			kapi1Tip = kapi1Tip + 1;
 800281e:	4b7f      	ldr	r3, [pc, #508]	; (8002a1c <menu+0x15b0>)
 8002820:	781b      	ldrb	r3, [r3, #0]
 8002822:	3301      	adds	r3, #1
 8002824:	b2da      	uxtb	r2, r3
 8002826:	4b7d      	ldr	r3, [pc, #500]	; (8002a1c <menu+0x15b0>)
 8002828:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 800282a:	4b7c      	ldr	r3, [pc, #496]	; (8002a1c <menu+0x15b0>)
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	2b02      	cmp	r3, #2
 8002830:	d902      	bls.n	8002838 <menu+0x13cc>
				kapi1Tip = 0;
 8002832:	4b7a      	ldr	r3, [pc, #488]	; (8002a1c <menu+0x15b0>)
 8002834:	2200      	movs	r2, #0
 8002836:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002838:	f003 fba2 	bl	8005f80 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800283c:	2104      	movs	r1, #4
 800283e:	4879      	ldr	r0, [pc, #484]	; (8002a24 <menu+0x15b8>)
 8002840:	f007 f936 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8002844:	4603      	mov	r3, r0
 8002846:	2b01      	cmp	r3, #1
 8002848:	d115      	bne.n	8002876 <menu+0x140a>
 800284a:	4b77      	ldr	r3, [pc, #476]	; (8002a28 <menu+0x15bc>)
 800284c:	781b      	ldrb	r3, [r3, #0]
 800284e:	f083 0301 	eor.w	r3, r3, #1
 8002852:	b2db      	uxtb	r3, r3
 8002854:	2b00      	cmp	r3, #0
 8002856:	d00e      	beq.n	8002876 <menu+0x140a>
			kapi1Tip = kapi1Tip - 1;
 8002858:	4b70      	ldr	r3, [pc, #448]	; (8002a1c <menu+0x15b0>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	3b01      	subs	r3, #1
 800285e:	b2da      	uxtb	r2, r3
 8002860:	4b6e      	ldr	r3, [pc, #440]	; (8002a1c <menu+0x15b0>)
 8002862:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8002864:	4b6d      	ldr	r3, [pc, #436]	; (8002a1c <menu+0x15b0>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	2b03      	cmp	r3, #3
 800286a:	d902      	bls.n	8002872 <menu+0x1406>
		   		kapi1Tip = 2;
 800286c:	4b6b      	ldr	r3, [pc, #428]	; (8002a1c <menu+0x15b0>)
 800286e:	2202      	movs	r2, #2
 8002870:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002872:	f003 fb85 	bl	8005f80 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002876:	2108      	movs	r1, #8
 8002878:	486a      	ldr	r0, [pc, #424]	; (8002a24 <menu+0x15b8>)
 800287a:	f007 f919 	bl	8009ab0 <HAL_GPIO_ReadPin>
 800287e:	4603      	mov	r3, r0
 8002880:	2b01      	cmp	r3, #1
 8002882:	d10d      	bne.n	80028a0 <menu+0x1434>
 8002884:	4b68      	ldr	r3, [pc, #416]	; (8002a28 <menu+0x15bc>)
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	f083 0301 	eor.w	r3, r3, #1
 800288c:	b2db      	uxtb	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	d006      	beq.n	80028a0 <menu+0x1434>
			eepromData[8] = kapi1Tip;
 8002892:	4b62      	ldr	r3, [pc, #392]	; (8002a1c <menu+0x15b0>)
 8002894:	781a      	ldrb	r2, [r3, #0]
 8002896:	4b65      	ldr	r3, [pc, #404]	; (8002a2c <menu+0x15c0>)
 8002898:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 800289a:	4b65      	ldr	r3, [pc, #404]	; (8002a30 <menu+0x15c4>)
 800289c:	2201      	movs	r2, #1
 800289e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 80028a0:	4b64      	ldr	r3, [pc, #400]	; (8002a34 <menu+0x15c8>)
 80028a2:	781b      	ldrb	r3, [r3, #0]
 80028a4:	2b0a      	cmp	r3, #10
 80028a6:	d17f      	bne.n	80029a8 <menu+0x153c>
		if(dilSecim == 0) {
 80028a8:	4b63      	ldr	r3, [pc, #396]	; (8002a38 <menu+0x15cc>)
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d10a      	bne.n	80028c6 <menu+0x145a>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 80028b0:	4a62      	ldr	r2, [pc, #392]	; (8002a3c <menu+0x15d0>)
 80028b2:	2101      	movs	r1, #1
 80028b4:	2001      	movs	r0, #1
 80028b6:	f7fd fed7 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 80028ba:	4a61      	ldr	r2, [pc, #388]	; (8002a40 <menu+0x15d4>)
 80028bc:	2101      	movs	r1, #1
 80028be:	2002      	movs	r0, #2
 80028c0:	f7fd fed2 	bl	8000668 <lcd_print>
 80028c4:	e00d      	b.n	80028e2 <menu+0x1476>
		} else if(dilSecim == 1) {
 80028c6:	4b5c      	ldr	r3, [pc, #368]	; (8002a38 <menu+0x15cc>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	2b01      	cmp	r3, #1
 80028cc:	d109      	bne.n	80028e2 <menu+0x1476>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 80028ce:	4a5d      	ldr	r2, [pc, #372]	; (8002a44 <menu+0x15d8>)
 80028d0:	2101      	movs	r1, #1
 80028d2:	2001      	movs	r0, #1
 80028d4:	f7fd fec8 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 80028d8:	4a5b      	ldr	r2, [pc, #364]	; (8002a48 <menu+0x15dc>)
 80028da:	2101      	movs	r1, #1
 80028dc:	2002      	movs	r0, #2
 80028de:	f7fd fec3 	bl	8000668 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 80028e2:	4b5a      	ldr	r3, [pc, #360]	; (8002a4c <menu+0x15e0>)
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	220a      	movs	r2, #10
 80028e8:	4959      	ldr	r1, [pc, #356]	; (8002a50 <menu+0x15e4>)
 80028ea:	4618      	mov	r0, r3
 80028ec:	f00a f90c 	bl	800cb08 <itoa>
		lcd_print(2,16,snum);
 80028f0:	4a57      	ldr	r2, [pc, #348]	; (8002a50 <menu+0x15e4>)
 80028f2:	2110      	movs	r1, #16
 80028f4:	2002      	movs	r0, #2
 80028f6:	f7fd feb7 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 80028fa:	2102      	movs	r1, #2
 80028fc:	4849      	ldr	r0, [pc, #292]	; (8002a24 <menu+0x15b8>)
 80028fe:	f007 f8d7 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8002902:	4603      	mov	r3, r0
 8002904:	2b01      	cmp	r3, #1
 8002906:	d119      	bne.n	800293c <menu+0x14d0>
 8002908:	4b47      	ldr	r3, [pc, #284]	; (8002a28 <menu+0x15bc>)
 800290a:	781b      	ldrb	r3, [r3, #0]
 800290c:	f083 0301 	eor.w	r3, r3, #1
 8002910:	b2db      	uxtb	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	d012      	beq.n	800293c <menu+0x14d0>
 8002916:	4b41      	ldr	r3, [pc, #260]	; (8002a1c <menu+0x15b0>)
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d10e      	bne.n	800293c <menu+0x14d0>
			kapi1AcSure = kapi1AcSure + 1;
 800291e:	4b4b      	ldr	r3, [pc, #300]	; (8002a4c <menu+0x15e0>)
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	3301      	adds	r3, #1
 8002924:	b2da      	uxtb	r2, r3
 8002926:	4b49      	ldr	r3, [pc, #292]	; (8002a4c <menu+0x15e0>)
 8002928:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 800292a:	4b48      	ldr	r3, [pc, #288]	; (8002a4c <menu+0x15e0>)
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	2b05      	cmp	r3, #5
 8002930:	d902      	bls.n	8002938 <menu+0x14cc>
				kapi1AcSure = 0;
 8002932:	4b46      	ldr	r3, [pc, #280]	; (8002a4c <menu+0x15e0>)
 8002934:	2200      	movs	r2, #0
 8002936:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002938:	f003 fb22 	bl	8005f80 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 800293c:	2104      	movs	r1, #4
 800293e:	4839      	ldr	r0, [pc, #228]	; (8002a24 <menu+0x15b8>)
 8002940:	f007 f8b6 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8002944:	4603      	mov	r3, r0
 8002946:	2b01      	cmp	r3, #1
 8002948:	d119      	bne.n	800297e <menu+0x1512>
 800294a:	4b37      	ldr	r3, [pc, #220]	; (8002a28 <menu+0x15bc>)
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	f083 0301 	eor.w	r3, r3, #1
 8002952:	b2db      	uxtb	r3, r3
 8002954:	2b00      	cmp	r3, #0
 8002956:	d012      	beq.n	800297e <menu+0x1512>
 8002958:	4b30      	ldr	r3, [pc, #192]	; (8002a1c <menu+0x15b0>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d10e      	bne.n	800297e <menu+0x1512>
			kapi1AcSure = kapi1AcSure - 1;
 8002960:	4b3a      	ldr	r3, [pc, #232]	; (8002a4c <menu+0x15e0>)
 8002962:	781b      	ldrb	r3, [r3, #0]
 8002964:	3b01      	subs	r3, #1
 8002966:	b2da      	uxtb	r2, r3
 8002968:	4b38      	ldr	r3, [pc, #224]	; (8002a4c <menu+0x15e0>)
 800296a:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 800296c:	4b37      	ldr	r3, [pc, #220]	; (8002a4c <menu+0x15e0>)
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	2b06      	cmp	r3, #6
 8002972:	d902      	bls.n	800297a <menu+0x150e>
		   		kapi1AcSure = 5;
 8002974:	4b35      	ldr	r3, [pc, #212]	; (8002a4c <menu+0x15e0>)
 8002976:	2205      	movs	r2, #5
 8002978:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800297a:	f003 fb01 	bl	8005f80 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800297e:	2108      	movs	r1, #8
 8002980:	4828      	ldr	r0, [pc, #160]	; (8002a24 <menu+0x15b8>)
 8002982:	f007 f895 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8002986:	4603      	mov	r3, r0
 8002988:	2b01      	cmp	r3, #1
 800298a:	d10d      	bne.n	80029a8 <menu+0x153c>
 800298c:	4b26      	ldr	r3, [pc, #152]	; (8002a28 <menu+0x15bc>)
 800298e:	781b      	ldrb	r3, [r3, #0]
 8002990:	f083 0301 	eor.w	r3, r3, #1
 8002994:	b2db      	uxtb	r3, r3
 8002996:	2b00      	cmp	r3, #0
 8002998:	d006      	beq.n	80029a8 <menu+0x153c>
			eepromData[9] = kapi1AcSure;
 800299a:	4b2c      	ldr	r3, [pc, #176]	; (8002a4c <menu+0x15e0>)
 800299c:	781a      	ldrb	r2, [r3, #0]
 800299e:	4b23      	ldr	r3, [pc, #140]	; (8002a2c <menu+0x15c0>)
 80029a0:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 80029a2:	4b23      	ldr	r3, [pc, #140]	; (8002a30 <menu+0x15c4>)
 80029a4:	2201      	movs	r2, #1
 80029a6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 80029a8:	4b22      	ldr	r3, [pc, #136]	; (8002a34 <menu+0x15c8>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b0b      	cmp	r3, #11
 80029ae:	f040 80b5 	bne.w	8002b1c <menu+0x16b0>
		if(dilSecim == 0) {
 80029b2:	4b21      	ldr	r3, [pc, #132]	; (8002a38 <menu+0x15cc>)
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d105      	bne.n	80029c6 <menu+0x155a>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 80029ba:	4a26      	ldr	r2, [pc, #152]	; (8002a54 <menu+0x15e8>)
 80029bc:	2101      	movs	r1, #1
 80029be:	2001      	movs	r0, #1
 80029c0:	f7fd fe52 	bl	8000668 <lcd_print>
 80029c4:	e008      	b.n	80029d8 <menu+0x156c>
		} else if(dilSecim == 1) {
 80029c6:	4b1c      	ldr	r3, [pc, #112]	; (8002a38 <menu+0x15cc>)
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d104      	bne.n	80029d8 <menu+0x156c>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 80029ce:	4a22      	ldr	r2, [pc, #136]	; (8002a58 <menu+0x15ec>)
 80029d0:	2101      	movs	r1, #1
 80029d2:	2001      	movs	r0, #1
 80029d4:	f7fd fe48 	bl	8000668 <lcd_print>
		}

		if(kapi2Tip == 0) {
 80029d8:	4b20      	ldr	r3, [pc, #128]	; (8002a5c <menu+0x15f0>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d105      	bne.n	80029ec <menu+0x1580>
			lcd_print(2, 1, "Prudhome        ");
 80029e0:	4a1f      	ldr	r2, [pc, #124]	; (8002a60 <menu+0x15f4>)
 80029e2:	2101      	movs	r1, #1
 80029e4:	2002      	movs	r0, #2
 80029e6:	f7fd fe3f 	bl	8000668 <lcd_print>
 80029ea:	e048      	b.n	8002a7e <menu+0x1612>
		} else if(kapi2Tip == 1) {
 80029ec:	4b1b      	ldr	r3, [pc, #108]	; (8002a5c <menu+0x15f0>)
 80029ee:	781b      	ldrb	r3, [r3, #0]
 80029f0:	2b01      	cmp	r3, #1
 80029f2:	d13b      	bne.n	8002a6c <menu+0x1600>
			if(dilSecim == 0) {
 80029f4:	4b10      	ldr	r3, [pc, #64]	; (8002a38 <menu+0x15cc>)
 80029f6:	781b      	ldrb	r3, [r3, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d105      	bne.n	8002a08 <menu+0x159c>
				lcd_print(2, 1, "Buton kontrollu");
 80029fc:	4a19      	ldr	r2, [pc, #100]	; (8002a64 <menu+0x15f8>)
 80029fe:	2101      	movs	r1, #1
 8002a00:	2002      	movs	r0, #2
 8002a02:	f7fd fe31 	bl	8000668 <lcd_print>
 8002a06:	e03a      	b.n	8002a7e <menu+0x1612>
			} else if(dilSecim == 1) {
 8002a08:	4b0b      	ldr	r3, [pc, #44]	; (8002a38 <menu+0x15cc>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d136      	bne.n	8002a7e <menu+0x1612>
				lcd_print(2, 1, "Button cntrolled");
 8002a10:	4a15      	ldr	r2, [pc, #84]	; (8002a68 <menu+0x15fc>)
 8002a12:	2101      	movs	r1, #1
 8002a14:	2002      	movs	r0, #2
 8002a16:	f7fd fe27 	bl	8000668 <lcd_print>
 8002a1a:	e030      	b.n	8002a7e <menu+0x1612>
 8002a1c:	20000c42 	.word	0x20000c42
 8002a20:	0800dc4c 	.word	0x0800dc4c
 8002a24:	40010800 	.word	0x40010800
 8002a28:	20000c68 	.word	0x20000c68
 8002a2c:	20000b28 	.word	0x20000b28
 8002a30:	20000c65 	.word	0x20000c65
 8002a34:	20000c39 	.word	0x20000c39
 8002a38:	20000c5a 	.word	0x20000c5a
 8002a3c:	0800dc5c 	.word	0x0800dc5c
 8002a40:	0800dc70 	.word	0x0800dc70
 8002a44:	0800dc80 	.word	0x0800dc80
 8002a48:	0800dc94 	.word	0x0800dc94
 8002a4c:	20000c52 	.word	0x20000c52
 8002a50:	20000bbc 	.word	0x20000bbc
 8002a54:	0800dca4 	.word	0x0800dca4
 8002a58:	0800dcb8 	.word	0x0800dcb8
 8002a5c:	20000c43 	.word	0x20000c43
 8002a60:	0800dc14 	.word	0x0800dc14
 8002a64:	0800dc28 	.word	0x0800dc28
 8002a68:	0800dc38 	.word	0x0800dc38
			}
		} else if(kapi2Tip == 2) {
 8002a6c:	4b8a      	ldr	r3, [pc, #552]	; (8002c98 <menu+0x182c>)
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d104      	bne.n	8002a7e <menu+0x1612>
			lcd_print(2, 1, "Pizzato        ");
 8002a74:	4a89      	ldr	r2, [pc, #548]	; (8002c9c <menu+0x1830>)
 8002a76:	2101      	movs	r1, #1
 8002a78:	2002      	movs	r0, #2
 8002a7a:	f7fd fdf5 	bl	8000668 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002a7e:	2102      	movs	r1, #2
 8002a80:	4887      	ldr	r0, [pc, #540]	; (8002ca0 <menu+0x1834>)
 8002a82:	f007 f815 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b01      	cmp	r3, #1
 8002a8a:	d115      	bne.n	8002ab8 <menu+0x164c>
 8002a8c:	4b85      	ldr	r3, [pc, #532]	; (8002ca4 <menu+0x1838>)
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	f083 0301 	eor.w	r3, r3, #1
 8002a94:	b2db      	uxtb	r3, r3
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00e      	beq.n	8002ab8 <menu+0x164c>
			kapi2Tip = kapi2Tip + 1;
 8002a9a:	4b7f      	ldr	r3, [pc, #508]	; (8002c98 <menu+0x182c>)
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	3301      	adds	r3, #1
 8002aa0:	b2da      	uxtb	r2, r3
 8002aa2:	4b7d      	ldr	r3, [pc, #500]	; (8002c98 <menu+0x182c>)
 8002aa4:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8002aa6:	4b7c      	ldr	r3, [pc, #496]	; (8002c98 <menu+0x182c>)
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	2b02      	cmp	r3, #2
 8002aac:	d902      	bls.n	8002ab4 <menu+0x1648>
				kapi2Tip = 0;
 8002aae:	4b7a      	ldr	r3, [pc, #488]	; (8002c98 <menu+0x182c>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002ab4:	f003 fa64 	bl	8005f80 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ab8:	2104      	movs	r1, #4
 8002aba:	4879      	ldr	r0, [pc, #484]	; (8002ca0 <menu+0x1834>)
 8002abc:	f006 fff8 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d115      	bne.n	8002af2 <menu+0x1686>
 8002ac6:	4b77      	ldr	r3, [pc, #476]	; (8002ca4 <menu+0x1838>)
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	f083 0301 	eor.w	r3, r3, #1
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d00e      	beq.n	8002af2 <menu+0x1686>
			kapi2Tip = kapi2Tip - 1;
 8002ad4:	4b70      	ldr	r3, [pc, #448]	; (8002c98 <menu+0x182c>)
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	3b01      	subs	r3, #1
 8002ada:	b2da      	uxtb	r2, r3
 8002adc:	4b6e      	ldr	r3, [pc, #440]	; (8002c98 <menu+0x182c>)
 8002ade:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8002ae0:	4b6d      	ldr	r3, [pc, #436]	; (8002c98 <menu+0x182c>)
 8002ae2:	781b      	ldrb	r3, [r3, #0]
 8002ae4:	2b03      	cmp	r3, #3
 8002ae6:	d902      	bls.n	8002aee <menu+0x1682>
		   		kapi2Tip = 2;
 8002ae8:	4b6b      	ldr	r3, [pc, #428]	; (8002c98 <menu+0x182c>)
 8002aea:	2202      	movs	r2, #2
 8002aec:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002aee:	f003 fa47 	bl	8005f80 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002af2:	2108      	movs	r1, #8
 8002af4:	486a      	ldr	r0, [pc, #424]	; (8002ca0 <menu+0x1834>)
 8002af6:	f006 ffdb 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8002afa:	4603      	mov	r3, r0
 8002afc:	2b01      	cmp	r3, #1
 8002afe:	d10d      	bne.n	8002b1c <menu+0x16b0>
 8002b00:	4b68      	ldr	r3, [pc, #416]	; (8002ca4 <menu+0x1838>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	f083 0301 	eor.w	r3, r3, #1
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d006      	beq.n	8002b1c <menu+0x16b0>
			eepromData[10] = kapi2Tip;
 8002b0e:	4b62      	ldr	r3, [pc, #392]	; (8002c98 <menu+0x182c>)
 8002b10:	781a      	ldrb	r2, [r3, #0]
 8002b12:	4b65      	ldr	r3, [pc, #404]	; (8002ca8 <menu+0x183c>)
 8002b14:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8002b16:	4b65      	ldr	r3, [pc, #404]	; (8002cac <menu+0x1840>)
 8002b18:	2201      	movs	r2, #1
 8002b1a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8002b1c:	4b64      	ldr	r3, [pc, #400]	; (8002cb0 <menu+0x1844>)
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	2b0c      	cmp	r3, #12
 8002b22:	d17f      	bne.n	8002c24 <menu+0x17b8>
		if(dilSecim == 0) {
 8002b24:	4b63      	ldr	r3, [pc, #396]	; (8002cb4 <menu+0x1848>)
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d10a      	bne.n	8002b42 <menu+0x16d6>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8002b2c:	4a62      	ldr	r2, [pc, #392]	; (8002cb8 <menu+0x184c>)
 8002b2e:	2101      	movs	r1, #1
 8002b30:	2001      	movs	r0, #1
 8002b32:	f7fd fd99 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002b36:	4a61      	ldr	r2, [pc, #388]	; (8002cbc <menu+0x1850>)
 8002b38:	2101      	movs	r1, #1
 8002b3a:	2002      	movs	r0, #2
 8002b3c:	f7fd fd94 	bl	8000668 <lcd_print>
 8002b40:	e00d      	b.n	8002b5e <menu+0x16f2>
		} else if(dilSecim == 1) {
 8002b42:	4b5c      	ldr	r3, [pc, #368]	; (8002cb4 <menu+0x1848>)
 8002b44:	781b      	ldrb	r3, [r3, #0]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d109      	bne.n	8002b5e <menu+0x16f2>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8002b4a:	4a5d      	ldr	r2, [pc, #372]	; (8002cc0 <menu+0x1854>)
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	2001      	movs	r0, #1
 8002b50:	f7fd fd8a 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002b54:	4a5b      	ldr	r2, [pc, #364]	; (8002cc4 <menu+0x1858>)
 8002b56:	2101      	movs	r1, #1
 8002b58:	2002      	movs	r0, #2
 8002b5a:	f7fd fd85 	bl	8000668 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8002b5e:	4b5a      	ldr	r3, [pc, #360]	; (8002cc8 <menu+0x185c>)
 8002b60:	781b      	ldrb	r3, [r3, #0]
 8002b62:	220a      	movs	r2, #10
 8002b64:	4959      	ldr	r1, [pc, #356]	; (8002ccc <menu+0x1860>)
 8002b66:	4618      	mov	r0, r3
 8002b68:	f009 ffce 	bl	800cb08 <itoa>
		lcd_print(2,16,snum);
 8002b6c:	4a57      	ldr	r2, [pc, #348]	; (8002ccc <menu+0x1860>)
 8002b6e:	2110      	movs	r1, #16
 8002b70:	2002      	movs	r0, #2
 8002b72:	f7fd fd79 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002b76:	2102      	movs	r1, #2
 8002b78:	4849      	ldr	r0, [pc, #292]	; (8002ca0 <menu+0x1834>)
 8002b7a:	f006 ff99 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d119      	bne.n	8002bb8 <menu+0x174c>
 8002b84:	4b47      	ldr	r3, [pc, #284]	; (8002ca4 <menu+0x1838>)
 8002b86:	781b      	ldrb	r3, [r3, #0]
 8002b88:	f083 0301 	eor.w	r3, r3, #1
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d012      	beq.n	8002bb8 <menu+0x174c>
 8002b92:	4b41      	ldr	r3, [pc, #260]	; (8002c98 <menu+0x182c>)
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d10e      	bne.n	8002bb8 <menu+0x174c>
			kapi2AcSure = kapi2AcSure + 1;
 8002b9a:	4b4b      	ldr	r3, [pc, #300]	; (8002cc8 <menu+0x185c>)
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	b2da      	uxtb	r2, r3
 8002ba2:	4b49      	ldr	r3, [pc, #292]	; (8002cc8 <menu+0x185c>)
 8002ba4:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8002ba6:	4b48      	ldr	r3, [pc, #288]	; (8002cc8 <menu+0x185c>)
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	2b05      	cmp	r3, #5
 8002bac:	d902      	bls.n	8002bb4 <menu+0x1748>
				kapi2AcSure = 0;
 8002bae:	4b46      	ldr	r3, [pc, #280]	; (8002cc8 <menu+0x185c>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002bb4:	f003 f9e4 	bl	8005f80 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002bb8:	2104      	movs	r1, #4
 8002bba:	4839      	ldr	r0, [pc, #228]	; (8002ca0 <menu+0x1834>)
 8002bbc:	f006 ff78 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d119      	bne.n	8002bfa <menu+0x178e>
 8002bc6:	4b37      	ldr	r3, [pc, #220]	; (8002ca4 <menu+0x1838>)
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	f083 0301 	eor.w	r3, r3, #1
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d012      	beq.n	8002bfa <menu+0x178e>
 8002bd4:	4b30      	ldr	r3, [pc, #192]	; (8002c98 <menu+0x182c>)
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d10e      	bne.n	8002bfa <menu+0x178e>
			kapi2AcSure = kapi2AcSure - 1;
 8002bdc:	4b3a      	ldr	r3, [pc, #232]	; (8002cc8 <menu+0x185c>)
 8002bde:	781b      	ldrb	r3, [r3, #0]
 8002be0:	3b01      	subs	r3, #1
 8002be2:	b2da      	uxtb	r2, r3
 8002be4:	4b38      	ldr	r3, [pc, #224]	; (8002cc8 <menu+0x185c>)
 8002be6:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002be8:	4b37      	ldr	r3, [pc, #220]	; (8002cc8 <menu+0x185c>)
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	2b06      	cmp	r3, #6
 8002bee:	d902      	bls.n	8002bf6 <menu+0x178a>
		   		kapi2AcSure = 5;
 8002bf0:	4b35      	ldr	r3, [pc, #212]	; (8002cc8 <menu+0x185c>)
 8002bf2:	2205      	movs	r2, #5
 8002bf4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002bf6:	f003 f9c3 	bl	8005f80 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002bfa:	2108      	movs	r1, #8
 8002bfc:	4828      	ldr	r0, [pc, #160]	; (8002ca0 <menu+0x1834>)
 8002bfe:	f006 ff57 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8002c02:	4603      	mov	r3, r0
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d10d      	bne.n	8002c24 <menu+0x17b8>
 8002c08:	4b26      	ldr	r3, [pc, #152]	; (8002ca4 <menu+0x1838>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	f083 0301 	eor.w	r3, r3, #1
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d006      	beq.n	8002c24 <menu+0x17b8>
			eepromData[11] = kapi2AcSure;
 8002c16:	4b2c      	ldr	r3, [pc, #176]	; (8002cc8 <menu+0x185c>)
 8002c18:	781a      	ldrb	r2, [r3, #0]
 8002c1a:	4b23      	ldr	r3, [pc, #140]	; (8002ca8 <menu+0x183c>)
 8002c1c:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8002c1e:	4b23      	ldr	r3, [pc, #140]	; (8002cac <menu+0x1840>)
 8002c20:	2201      	movs	r2, #1
 8002c22:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 8002c24:	4b22      	ldr	r3, [pc, #136]	; (8002cb0 <menu+0x1844>)
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	2b0d      	cmp	r3, #13
 8002c2a:	f040 80b5 	bne.w	8002d98 <menu+0x192c>
		if(dilSecim == 0) {
 8002c2e:	4b21      	ldr	r3, [pc, #132]	; (8002cb4 <menu+0x1848>)
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d105      	bne.n	8002c42 <menu+0x17d6>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 8002c36:	4a26      	ldr	r2, [pc, #152]	; (8002cd0 <menu+0x1864>)
 8002c38:	2101      	movs	r1, #1
 8002c3a:	2001      	movs	r0, #1
 8002c3c:	f7fd fd14 	bl	8000668 <lcd_print>
 8002c40:	e008      	b.n	8002c54 <menu+0x17e8>
		} else if(dilSecim == 1){
 8002c42:	4b1c      	ldr	r3, [pc, #112]	; (8002cb4 <menu+0x1848>)
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d104      	bne.n	8002c54 <menu+0x17e8>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 8002c4a:	4a22      	ldr	r2, [pc, #136]	; (8002cd4 <menu+0x1868>)
 8002c4c:	2101      	movs	r1, #1
 8002c4e:	2001      	movs	r0, #1
 8002c50:	f7fd fd0a 	bl	8000668 <lcd_print>
		}

		if(kapitablaTip == 0) {
 8002c54:	4b20      	ldr	r3, [pc, #128]	; (8002cd8 <menu+0x186c>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d105      	bne.n	8002c68 <menu+0x17fc>
			lcd_print(2, 1, "Prudhome        ");
 8002c5c:	4a1f      	ldr	r2, [pc, #124]	; (8002cdc <menu+0x1870>)
 8002c5e:	2101      	movs	r1, #1
 8002c60:	2002      	movs	r0, #2
 8002c62:	f7fd fd01 	bl	8000668 <lcd_print>
 8002c66:	e048      	b.n	8002cfa <menu+0x188e>
		} else if(kapitablaTip == 1) {
 8002c68:	4b1b      	ldr	r3, [pc, #108]	; (8002cd8 <menu+0x186c>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	2b01      	cmp	r3, #1
 8002c6e:	d13b      	bne.n	8002ce8 <menu+0x187c>
			if(dilSecim == 0) {
 8002c70:	4b10      	ldr	r3, [pc, #64]	; (8002cb4 <menu+0x1848>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d105      	bne.n	8002c84 <menu+0x1818>
				lcd_print(2, 1, "Buton kontrollu");
 8002c78:	4a19      	ldr	r2, [pc, #100]	; (8002ce0 <menu+0x1874>)
 8002c7a:	2101      	movs	r1, #1
 8002c7c:	2002      	movs	r0, #2
 8002c7e:	f7fd fcf3 	bl	8000668 <lcd_print>
 8002c82:	e03a      	b.n	8002cfa <menu+0x188e>
			} else if(dilSecim == 1) {
 8002c84:	4b0b      	ldr	r3, [pc, #44]	; (8002cb4 <menu+0x1848>)
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d136      	bne.n	8002cfa <menu+0x188e>
				lcd_print(2, 1, "Button cntrolled");
 8002c8c:	4a15      	ldr	r2, [pc, #84]	; (8002ce4 <menu+0x1878>)
 8002c8e:	2101      	movs	r1, #1
 8002c90:	2002      	movs	r0, #2
 8002c92:	f7fd fce9 	bl	8000668 <lcd_print>
 8002c96:	e030      	b.n	8002cfa <menu+0x188e>
 8002c98:	20000c43 	.word	0x20000c43
 8002c9c:	0800dc4c 	.word	0x0800dc4c
 8002ca0:	40010800 	.word	0x40010800
 8002ca4:	20000c68 	.word	0x20000c68
 8002ca8:	20000b28 	.word	0x20000b28
 8002cac:	20000c65 	.word	0x20000c65
 8002cb0:	20000c39 	.word	0x20000c39
 8002cb4:	20000c5a 	.word	0x20000c5a
 8002cb8:	0800dccc 	.word	0x0800dccc
 8002cbc:	0800dc70 	.word	0x0800dc70
 8002cc0:	0800dce0 	.word	0x0800dce0
 8002cc4:	0800dc94 	.word	0x0800dc94
 8002cc8:	20000c53 	.word	0x20000c53
 8002ccc:	20000bbc 	.word	0x20000bbc
 8002cd0:	0800dcf4 	.word	0x0800dcf4
 8002cd4:	0800dd08 	.word	0x0800dd08
 8002cd8:	20000c44 	.word	0x20000c44
 8002cdc:	0800dc14 	.word	0x0800dc14
 8002ce0:	0800dc28 	.word	0x0800dc28
 8002ce4:	0800dc38 	.word	0x0800dc38
			}
		} else if(kapitablaTip == 2) {
 8002ce8:	4b5b      	ldr	r3, [pc, #364]	; (8002e58 <menu+0x19ec>)
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	2b02      	cmp	r3, #2
 8002cee:	d104      	bne.n	8002cfa <menu+0x188e>
			lcd_print(2, 1, "Pizzato        ");
 8002cf0:	4a5a      	ldr	r2, [pc, #360]	; (8002e5c <menu+0x19f0>)
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	2002      	movs	r0, #2
 8002cf6:	f7fd fcb7 	bl	8000668 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002cfa:	2102      	movs	r1, #2
 8002cfc:	4858      	ldr	r0, [pc, #352]	; (8002e60 <menu+0x19f4>)
 8002cfe:	f006 fed7 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b01      	cmp	r3, #1
 8002d06:	d115      	bne.n	8002d34 <menu+0x18c8>
 8002d08:	4b56      	ldr	r3, [pc, #344]	; (8002e64 <menu+0x19f8>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	f083 0301 	eor.w	r3, r3, #1
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d00e      	beq.n	8002d34 <menu+0x18c8>
			kapitablaTip = kapitablaTip + 1;
 8002d16:	4b50      	ldr	r3, [pc, #320]	; (8002e58 <menu+0x19ec>)
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	3301      	adds	r3, #1
 8002d1c:	b2da      	uxtb	r2, r3
 8002d1e:	4b4e      	ldr	r3, [pc, #312]	; (8002e58 <menu+0x19ec>)
 8002d20:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 8002d22:	4b4d      	ldr	r3, [pc, #308]	; (8002e58 <menu+0x19ec>)
 8002d24:	781b      	ldrb	r3, [r3, #0]
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d902      	bls.n	8002d30 <menu+0x18c4>
				kapitablaTip = 0;
 8002d2a:	4b4b      	ldr	r3, [pc, #300]	; (8002e58 <menu+0x19ec>)
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002d30:	f003 f926 	bl	8005f80 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d34:	2104      	movs	r1, #4
 8002d36:	484a      	ldr	r0, [pc, #296]	; (8002e60 <menu+0x19f4>)
 8002d38:	f006 feba 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d115      	bne.n	8002d6e <menu+0x1902>
 8002d42:	4b48      	ldr	r3, [pc, #288]	; (8002e64 <menu+0x19f8>)
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	f083 0301 	eor.w	r3, r3, #1
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00e      	beq.n	8002d6e <menu+0x1902>
			kapitablaTip = kapitablaTip - 1;
 8002d50:	4b41      	ldr	r3, [pc, #260]	; (8002e58 <menu+0x19ec>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	3b01      	subs	r3, #1
 8002d56:	b2da      	uxtb	r2, r3
 8002d58:	4b3f      	ldr	r3, [pc, #252]	; (8002e58 <menu+0x19ec>)
 8002d5a:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 8002d5c:	4b3e      	ldr	r3, [pc, #248]	; (8002e58 <menu+0x19ec>)
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	2b03      	cmp	r3, #3
 8002d62:	d902      	bls.n	8002d6a <menu+0x18fe>
		   		kapitablaTip = 2;
 8002d64:	4b3c      	ldr	r3, [pc, #240]	; (8002e58 <menu+0x19ec>)
 8002d66:	2202      	movs	r2, #2
 8002d68:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002d6a:	f003 f909 	bl	8005f80 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002d6e:	2108      	movs	r1, #8
 8002d70:	483b      	ldr	r0, [pc, #236]	; (8002e60 <menu+0x19f4>)
 8002d72:	f006 fe9d 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d10d      	bne.n	8002d98 <menu+0x192c>
 8002d7c:	4b39      	ldr	r3, [pc, #228]	; (8002e64 <menu+0x19f8>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	f083 0301 	eor.w	r3, r3, #1
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d006      	beq.n	8002d98 <menu+0x192c>
			eepromData[12] = kapitablaTip;
 8002d8a:	4b33      	ldr	r3, [pc, #204]	; (8002e58 <menu+0x19ec>)
 8002d8c:	781a      	ldrb	r2, [r3, #0]
 8002d8e:	4b36      	ldr	r3, [pc, #216]	; (8002e68 <menu+0x19fc>)
 8002d90:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 8002d92:	4b36      	ldr	r3, [pc, #216]	; (8002e6c <menu+0x1a00>)
 8002d94:	2201      	movs	r2, #1
 8002d96:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 8002d98:	4b35      	ldr	r3, [pc, #212]	; (8002e70 <menu+0x1a04>)
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	2b0e      	cmp	r3, #14
 8002d9e:	f040 80f2 	bne.w	8002f86 <menu+0x1b1a>
		if(dilSecim == 0) {
 8002da2:	4b34      	ldr	r3, [pc, #208]	; (8002e74 <menu+0x1a08>)
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d105      	bne.n	8002db6 <menu+0x194a>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8002daa:	4a33      	ldr	r2, [pc, #204]	; (8002e78 <menu+0x1a0c>)
 8002dac:	2101      	movs	r1, #1
 8002dae:	2001      	movs	r0, #1
 8002db0:	f7fd fc5a 	bl	8000668 <lcd_print>
 8002db4:	e008      	b.n	8002dc8 <menu+0x195c>
		} else if(dilSecim == 1) {
 8002db6:	4b2f      	ldr	r3, [pc, #188]	; (8002e74 <menu+0x1a08>)
 8002db8:	781b      	ldrb	r3, [r3, #0]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d104      	bne.n	8002dc8 <menu+0x195c>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8002dbe:	4a2f      	ldr	r2, [pc, #188]	; (8002e7c <menu+0x1a10>)
 8002dc0:	2101      	movs	r1, #1
 8002dc2:	2001      	movs	r0, #1
 8002dc4:	f7fd fc50 	bl	8000668 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002dc8:	4b2d      	ldr	r3, [pc, #180]	; (8002e80 <menu+0x1a14>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d113      	bne.n	8002df8 <menu+0x198c>
			if(dilSecim == 0){
 8002dd0:	4b28      	ldr	r3, [pc, #160]	; (8002e74 <menu+0x1a08>)
 8002dd2:	781b      	ldrb	r3, [r3, #0]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d105      	bne.n	8002de4 <menu+0x1978>
				lcd_print(2, 1, "1. Katta ac    ");
 8002dd8:	4a2a      	ldr	r2, [pc, #168]	; (8002e84 <menu+0x1a18>)
 8002dda:	2101      	movs	r1, #1
 8002ddc:	2002      	movs	r0, #2
 8002dde:	f7fd fc43 	bl	8000668 <lcd_print>
 8002de2:	e071      	b.n	8002ec8 <menu+0x1a5c>
			} else if(dilSecim == 1) {
 8002de4:	4b23      	ldr	r3, [pc, #140]	; (8002e74 <menu+0x1a08>)
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d16d      	bne.n	8002ec8 <menu+0x1a5c>
				lcd_print(2, 1, "1. Floor open  ");
 8002dec:	4a26      	ldr	r2, [pc, #152]	; (8002e88 <menu+0x1a1c>)
 8002dee:	2101      	movs	r1, #1
 8002df0:	2002      	movs	r0, #2
 8002df2:	f7fd fc39 	bl	8000668 <lcd_print>
 8002df6:	e067      	b.n	8002ec8 <menu+0x1a5c>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002df8:	4b21      	ldr	r3, [pc, #132]	; (8002e80 <menu+0x1a14>)
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d112      	bne.n	8002e26 <menu+0x19ba>
			if(dilSecim == 0){
 8002e00:	4b1c      	ldr	r3, [pc, #112]	; (8002e74 <menu+0x1a08>)
 8002e02:	781b      	ldrb	r3, [r3, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d104      	bne.n	8002e12 <menu+0x19a6>
				lcd_print(2, 1, "2. Katta ac    ");
 8002e08:	4a20      	ldr	r2, [pc, #128]	; (8002e8c <menu+0x1a20>)
 8002e0a:	2101      	movs	r1, #1
 8002e0c:	2002      	movs	r0, #2
 8002e0e:	f7fd fc2b 	bl	8000668 <lcd_print>
			}
			if(dilSecim == 1){
 8002e12:	4b18      	ldr	r3, [pc, #96]	; (8002e74 <menu+0x1a08>)
 8002e14:	781b      	ldrb	r3, [r3, #0]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d156      	bne.n	8002ec8 <menu+0x1a5c>
				lcd_print(2, 1, "2. Floor open  ");
 8002e1a:	4a1d      	ldr	r2, [pc, #116]	; (8002e90 <menu+0x1a24>)
 8002e1c:	2101      	movs	r1, #1
 8002e1e:	2002      	movs	r0, #2
 8002e20:	f7fd fc22 	bl	8000668 <lcd_print>
 8002e24:	e050      	b.n	8002ec8 <menu+0x1a5c>
			}
		} else if(kapiTablaAcKonum == 2) {
 8002e26:	4b16      	ldr	r3, [pc, #88]	; (8002e80 <menu+0x1a14>)
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	2b02      	cmp	r3, #2
 8002e2c:	d136      	bne.n	8002e9c <menu+0x1a30>
			if(dilSecim == 0){
 8002e2e:	4b11      	ldr	r3, [pc, #68]	; (8002e74 <menu+0x1a08>)
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d105      	bne.n	8002e42 <menu+0x19d6>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 8002e36:	4a17      	ldr	r2, [pc, #92]	; (8002e94 <menu+0x1a28>)
 8002e38:	2101      	movs	r1, #1
 8002e3a:	2002      	movs	r0, #2
 8002e3c:	f7fd fc14 	bl	8000668 <lcd_print>
 8002e40:	e042      	b.n	8002ec8 <menu+0x1a5c>
			} else if(dilSecim == 1) {
 8002e42:	4b0c      	ldr	r3, [pc, #48]	; (8002e74 <menu+0x1a08>)
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d13e      	bne.n	8002ec8 <menu+0x1a5c>
				lcd_print(2, 1, "1.+2. Floor open");
 8002e4a:	4a13      	ldr	r2, [pc, #76]	; (8002e98 <menu+0x1a2c>)
 8002e4c:	2101      	movs	r1, #1
 8002e4e:	2002      	movs	r0, #2
 8002e50:	f7fd fc0a 	bl	8000668 <lcd_print>
 8002e54:	e038      	b.n	8002ec8 <menu+0x1a5c>
 8002e56:	bf00      	nop
 8002e58:	20000c44 	.word	0x20000c44
 8002e5c:	0800dc4c 	.word	0x0800dc4c
 8002e60:	40010800 	.word	0x40010800
 8002e64:	20000c68 	.word	0x20000c68
 8002e68:	20000b28 	.word	0x20000b28
 8002e6c:	20000c65 	.word	0x20000c65
 8002e70:	20000c39 	.word	0x20000c39
 8002e74:	20000c5a 	.word	0x20000c5a
 8002e78:	0800dd1c 	.word	0x0800dd1c
 8002e7c:	0800dd30 	.word	0x0800dd30
 8002e80:	20000c46 	.word	0x20000c46
 8002e84:	0800dd44 	.word	0x0800dd44
 8002e88:	0800dd54 	.word	0x0800dd54
 8002e8c:	0800dd64 	.word	0x0800dd64
 8002e90:	0800dd74 	.word	0x0800dd74
 8002e94:	0800dd84 	.word	0x0800dd84
 8002e98:	0800dd98 	.word	0x0800dd98
			}
		} else if(kapiTablaAcKonum == 3) {
 8002e9c:	4b9b      	ldr	r3, [pc, #620]	; (800310c <menu+0x1ca0>)
 8002e9e:	781b      	ldrb	r3, [r3, #0]
 8002ea0:	2b03      	cmp	r3, #3
 8002ea2:	d111      	bne.n	8002ec8 <menu+0x1a5c>
			if(dilSecim == 0) {
 8002ea4:	4b9a      	ldr	r3, [pc, #616]	; (8003110 <menu+0x1ca4>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d104      	bne.n	8002eb6 <menu+0x1a4a>
				lcd_print(2, 1, "Pasif           ");
 8002eac:	4a99      	ldr	r2, [pc, #612]	; (8003114 <menu+0x1ca8>)
 8002eae:	2101      	movs	r1, #1
 8002eb0:	2002      	movs	r0, #2
 8002eb2:	f7fd fbd9 	bl	8000668 <lcd_print>
			}
			if(dilSecim == 1) {
 8002eb6:	4b96      	ldr	r3, [pc, #600]	; (8003110 <menu+0x1ca4>)
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d104      	bne.n	8002ec8 <menu+0x1a5c>
				lcd_print(2, 1, "Passive         ");
 8002ebe:	4a96      	ldr	r2, [pc, #600]	; (8003118 <menu+0x1cac>)
 8002ec0:	2101      	movs	r1, #1
 8002ec2:	2002      	movs	r0, #2
 8002ec4:	f7fd fbd0 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ec8:	2102      	movs	r1, #2
 8002eca:	4894      	ldr	r0, [pc, #592]	; (800311c <menu+0x1cb0>)
 8002ecc:	f006 fdf0 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b01      	cmp	r3, #1
 8002ed4:	d115      	bne.n	8002f02 <menu+0x1a96>
 8002ed6:	4b92      	ldr	r3, [pc, #584]	; (8003120 <menu+0x1cb4>)
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	f083 0301 	eor.w	r3, r3, #1
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00e      	beq.n	8002f02 <menu+0x1a96>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 8002ee4:	4b89      	ldr	r3, [pc, #548]	; (800310c <menu+0x1ca0>)
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	3301      	adds	r3, #1
 8002eea:	b2da      	uxtb	r2, r3
 8002eec:	4b87      	ldr	r3, [pc, #540]	; (800310c <menu+0x1ca0>)
 8002eee:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002ef0:	4b86      	ldr	r3, [pc, #536]	; (800310c <menu+0x1ca0>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d902      	bls.n	8002efe <menu+0x1a92>
				kapiTablaAcKonum = 0;
 8002ef8:	4b84      	ldr	r3, [pc, #528]	; (800310c <menu+0x1ca0>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002efe:	f003 f83f 	bl	8005f80 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f02:	2104      	movs	r1, #4
 8002f04:	4885      	ldr	r0, [pc, #532]	; (800311c <menu+0x1cb0>)
 8002f06:	f006 fdd3 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d115      	bne.n	8002f3c <menu+0x1ad0>
 8002f10:	4b83      	ldr	r3, [pc, #524]	; (8003120 <menu+0x1cb4>)
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	f083 0301 	eor.w	r3, r3, #1
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00e      	beq.n	8002f3c <menu+0x1ad0>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002f1e:	4b7b      	ldr	r3, [pc, #492]	; (800310c <menu+0x1ca0>)
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	3b01      	subs	r3, #1
 8002f24:	b2da      	uxtb	r2, r3
 8002f26:	4b79      	ldr	r3, [pc, #484]	; (800310c <menu+0x1ca0>)
 8002f28:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002f2a:	4b78      	ldr	r3, [pc, #480]	; (800310c <menu+0x1ca0>)
 8002f2c:	781b      	ldrb	r3, [r3, #0]
 8002f2e:	2b03      	cmp	r3, #3
 8002f30:	d902      	bls.n	8002f38 <menu+0x1acc>
		   		kapiTablaAcKonum = 2;
 8002f32:	4b76      	ldr	r3, [pc, #472]	; (800310c <menu+0x1ca0>)
 8002f34:	2202      	movs	r2, #2
 8002f36:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002f38:	f003 f822 	bl	8005f80 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f3c:	2108      	movs	r1, #8
 8002f3e:	4877      	ldr	r0, [pc, #476]	; (800311c <menu+0x1cb0>)
 8002f40:	f006 fdb6 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d11d      	bne.n	8002f86 <menu+0x1b1a>
 8002f4a:	4b75      	ldr	r3, [pc, #468]	; (8003120 <menu+0x1cb4>)
 8002f4c:	781b      	ldrb	r3, [r3, #0]
 8002f4e:	f083 0301 	eor.w	r3, r3, #1
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d016      	beq.n	8002f86 <menu+0x1b1a>
			eepromData[34] = kapiTablaAcKonum;
 8002f58:	4b6c      	ldr	r3, [pc, #432]	; (800310c <menu+0x1ca0>)
 8002f5a:	781a      	ldrb	r2, [r3, #0]
 8002f5c:	4b71      	ldr	r3, [pc, #452]	; (8003124 <menu+0x1cb8>)
 8002f5e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 8002f62:	4b6a      	ldr	r3, [pc, #424]	; (800310c <menu+0x1ca0>)
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d003      	beq.n	8002f72 <menu+0x1b06>
 8002f6a:	4b68      	ldr	r3, [pc, #416]	; (800310c <menu+0x1ca0>)
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d106      	bne.n	8002f80 <menu+0x1b14>
				altLimit = 1;
 8002f72:	4b6d      	ldr	r3, [pc, #436]	; (8003128 <menu+0x1cbc>)
 8002f74:	2201      	movs	r2, #1
 8002f76:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002f78:	4b6b      	ldr	r3, [pc, #428]	; (8003128 <menu+0x1cbc>)
 8002f7a:	781a      	ldrb	r2, [r3, #0]
 8002f7c:	4b69      	ldr	r3, [pc, #420]	; (8003124 <menu+0x1cb8>)
 8002f7e:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 8002f80:	4b6a      	ldr	r3, [pc, #424]	; (800312c <menu+0x1cc0>)
 8002f82:	2201      	movs	r2, #1
 8002f84:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 8002f86:	4b6a      	ldr	r3, [pc, #424]	; (8003130 <menu+0x1cc4>)
 8002f88:	781b      	ldrb	r3, [r3, #0]
 8002f8a:	2b0f      	cmp	r3, #15
 8002f8c:	d17f      	bne.n	800308e <menu+0x1c22>
		if(dilSecim == 0) {
 8002f8e:	4b60      	ldr	r3, [pc, #384]	; (8003110 <menu+0x1ca4>)
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d10a      	bne.n	8002fac <menu+0x1b40>
			lcd_print(1, 1, "TABLA KP AC SURE");
 8002f96:	4a67      	ldr	r2, [pc, #412]	; (8003134 <menu+0x1cc8>)
 8002f98:	2101      	movs	r1, #1
 8002f9a:	2001      	movs	r0, #1
 8002f9c:	f7fd fb64 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8002fa0:	4a65      	ldr	r2, [pc, #404]	; (8003138 <menu+0x1ccc>)
 8002fa2:	2101      	movs	r1, #1
 8002fa4:	2002      	movs	r0, #2
 8002fa6:	f7fd fb5f 	bl	8000668 <lcd_print>
 8002faa:	e00d      	b.n	8002fc8 <menu+0x1b5c>
		} else if(dilSecim == 1) {
 8002fac:	4b58      	ldr	r3, [pc, #352]	; (8003110 <menu+0x1ca4>)
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d109      	bne.n	8002fc8 <menu+0x1b5c>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 8002fb4:	4a61      	ldr	r2, [pc, #388]	; (800313c <menu+0x1cd0>)
 8002fb6:	2101      	movs	r1, #1
 8002fb8:	2001      	movs	r0, #1
 8002fba:	f7fd fb55 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002fbe:	4a60      	ldr	r2, [pc, #384]	; (8003140 <menu+0x1cd4>)
 8002fc0:	2101      	movs	r1, #1
 8002fc2:	2002      	movs	r0, #2
 8002fc4:	f7fd fb50 	bl	8000668 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8002fc8:	4b5e      	ldr	r3, [pc, #376]	; (8003144 <menu+0x1cd8>)
 8002fca:	781b      	ldrb	r3, [r3, #0]
 8002fcc:	220a      	movs	r2, #10
 8002fce:	495e      	ldr	r1, [pc, #376]	; (8003148 <menu+0x1cdc>)
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f009 fd99 	bl	800cb08 <itoa>
		lcd_print(2,16,snum);
 8002fd6:	4a5c      	ldr	r2, [pc, #368]	; (8003148 <menu+0x1cdc>)
 8002fd8:	2110      	movs	r1, #16
 8002fda:	2002      	movs	r0, #2
 8002fdc:	f7fd fb44 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002fe0:	2102      	movs	r1, #2
 8002fe2:	484e      	ldr	r0, [pc, #312]	; (800311c <menu+0x1cb0>)
 8002fe4:	f006 fd64 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8002fe8:	4603      	mov	r3, r0
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d119      	bne.n	8003022 <menu+0x1bb6>
 8002fee:	4b4c      	ldr	r3, [pc, #304]	; (8003120 <menu+0x1cb4>)
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	f083 0301 	eor.w	r3, r3, #1
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d012      	beq.n	8003022 <menu+0x1bb6>
 8002ffc:	4b53      	ldr	r3, [pc, #332]	; (800314c <menu+0x1ce0>)
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d10e      	bne.n	8003022 <menu+0x1bb6>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 8003004:	4b4f      	ldr	r3, [pc, #316]	; (8003144 <menu+0x1cd8>)
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	3301      	adds	r3, #1
 800300a:	b2da      	uxtb	r2, r3
 800300c:	4b4d      	ldr	r3, [pc, #308]	; (8003144 <menu+0x1cd8>)
 800300e:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8003010:	4b4c      	ldr	r3, [pc, #304]	; (8003144 <menu+0x1cd8>)
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	2b05      	cmp	r3, #5
 8003016:	d902      	bls.n	800301e <menu+0x1bb2>
				kapiTablaAcSure = 0;
 8003018:	4b4a      	ldr	r3, [pc, #296]	; (8003144 <menu+0x1cd8>)
 800301a:	2200      	movs	r2, #0
 800301c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800301e:	f002 ffaf 	bl	8005f80 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8003022:	2104      	movs	r1, #4
 8003024:	483d      	ldr	r0, [pc, #244]	; (800311c <menu+0x1cb0>)
 8003026:	f006 fd43 	bl	8009ab0 <HAL_GPIO_ReadPin>
 800302a:	4603      	mov	r3, r0
 800302c:	2b01      	cmp	r3, #1
 800302e:	d119      	bne.n	8003064 <menu+0x1bf8>
 8003030:	4b3b      	ldr	r3, [pc, #236]	; (8003120 <menu+0x1cb4>)
 8003032:	781b      	ldrb	r3, [r3, #0]
 8003034:	f083 0301 	eor.w	r3, r3, #1
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b00      	cmp	r3, #0
 800303c:	d012      	beq.n	8003064 <menu+0x1bf8>
 800303e:	4b43      	ldr	r3, [pc, #268]	; (800314c <menu+0x1ce0>)
 8003040:	781b      	ldrb	r3, [r3, #0]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d10e      	bne.n	8003064 <menu+0x1bf8>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 8003046:	4b3f      	ldr	r3, [pc, #252]	; (8003144 <menu+0x1cd8>)
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	3b01      	subs	r3, #1
 800304c:	b2da      	uxtb	r2, r3
 800304e:	4b3d      	ldr	r3, [pc, #244]	; (8003144 <menu+0x1cd8>)
 8003050:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 8003052:	4b3c      	ldr	r3, [pc, #240]	; (8003144 <menu+0x1cd8>)
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	2b06      	cmp	r3, #6
 8003058:	d902      	bls.n	8003060 <menu+0x1bf4>
		   		kapiTablaAcSure = 5;
 800305a:	4b3a      	ldr	r3, [pc, #232]	; (8003144 <menu+0x1cd8>)
 800305c:	2205      	movs	r2, #5
 800305e:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8003060:	f002 ff8e 	bl	8005f80 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003064:	2108      	movs	r1, #8
 8003066:	482d      	ldr	r0, [pc, #180]	; (800311c <menu+0x1cb0>)
 8003068:	f006 fd22 	bl	8009ab0 <HAL_GPIO_ReadPin>
 800306c:	4603      	mov	r3, r0
 800306e:	2b01      	cmp	r3, #1
 8003070:	d10d      	bne.n	800308e <menu+0x1c22>
 8003072:	4b2b      	ldr	r3, [pc, #172]	; (8003120 <menu+0x1cb4>)
 8003074:	781b      	ldrb	r3, [r3, #0]
 8003076:	f083 0301 	eor.w	r3, r3, #1
 800307a:	b2db      	uxtb	r3, r3
 800307c:	2b00      	cmp	r3, #0
 800307e:	d006      	beq.n	800308e <menu+0x1c22>
			eepromData[13] = kapiTablaAcSure;
 8003080:	4b30      	ldr	r3, [pc, #192]	; (8003144 <menu+0x1cd8>)
 8003082:	781a      	ldrb	r2, [r3, #0]
 8003084:	4b27      	ldr	r3, [pc, #156]	; (8003124 <menu+0x1cb8>)
 8003086:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 8003088:	4b28      	ldr	r3, [pc, #160]	; (800312c <menu+0x1cc0>)
 800308a:	2201      	movs	r2, #1
 800308c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 800308e:	4b28      	ldr	r3, [pc, #160]	; (8003130 <menu+0x1cc4>)
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	2b10      	cmp	r3, #16
 8003094:	f040 80bc 	bne.w	8003210 <menu+0x1da4>
		if(dilSecim == 0) {
 8003098:	4b1d      	ldr	r3, [pc, #116]	; (8003110 <menu+0x1ca4>)
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d105      	bne.n	80030ac <menu+0x1c40>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 80030a0:	4a2b      	ldr	r2, [pc, #172]	; (8003150 <menu+0x1ce4>)
 80030a2:	2101      	movs	r1, #1
 80030a4:	2001      	movs	r0, #1
 80030a6:	f7fd fadf 	bl	8000668 <lcd_print>
 80030aa:	e008      	b.n	80030be <menu+0x1c52>
		} else if(dilSecim == 1) {
 80030ac:	4b18      	ldr	r3, [pc, #96]	; (8003110 <menu+0x1ca4>)
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d104      	bne.n	80030be <menu+0x1c52>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 80030b4:	4a27      	ldr	r2, [pc, #156]	; (8003154 <menu+0x1ce8>)
 80030b6:	2101      	movs	r1, #1
 80030b8:	2001      	movs	r0, #1
 80030ba:	f7fd fad5 	bl	8000668 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 80030be:	4b26      	ldr	r3, [pc, #152]	; (8003158 <menu+0x1cec>)
 80030c0:	781b      	ldrb	r3, [r3, #0]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d113      	bne.n	80030ee <menu+0x1c82>
			if(dilSecim == 0) {
 80030c6:	4b12      	ldr	r3, [pc, #72]	; (8003110 <menu+0x1ca4>)
 80030c8:	781b      	ldrb	r3, [r3, #0]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d105      	bne.n	80030da <menu+0x1c6e>
				lcd_print(2, 1, "Pasif           ");
 80030ce:	4a11      	ldr	r2, [pc, #68]	; (8003114 <menu+0x1ca8>)
 80030d0:	2101      	movs	r1, #1
 80030d2:	2002      	movs	r0, #2
 80030d4:	f7fd fac8 	bl	8000668 <lcd_print>
 80030d8:	e04b      	b.n	8003172 <menu+0x1d06>
			} else if(dilSecim == 1) {
 80030da:	4b0d      	ldr	r3, [pc, #52]	; (8003110 <menu+0x1ca4>)
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d147      	bne.n	8003172 <menu+0x1d06>
				lcd_print(2, 1, "Passive         ");
 80030e2:	4a0d      	ldr	r2, [pc, #52]	; (8003118 <menu+0x1cac>)
 80030e4:	2101      	movs	r1, #1
 80030e6:	2002      	movs	r0, #2
 80030e8:	f7fd fabe 	bl	8000668 <lcd_print>
 80030ec:	e041      	b.n	8003172 <menu+0x1d06>
			}
		} else if(yukariYavasLimit == 1) {
 80030ee:	4b1a      	ldr	r3, [pc, #104]	; (8003158 <menu+0x1cec>)
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d13d      	bne.n	8003172 <menu+0x1d06>
			if(dilSecim == 0) {
 80030f6:	4b06      	ldr	r3, [pc, #24]	; (8003110 <menu+0x1ca4>)
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d130      	bne.n	8003160 <menu+0x1cf4>
				lcd_print(2, 1, "Aktif           ");
 80030fe:	4a17      	ldr	r2, [pc, #92]	; (800315c <menu+0x1cf0>)
 8003100:	2101      	movs	r1, #1
 8003102:	2002      	movs	r0, #2
 8003104:	f7fd fab0 	bl	8000668 <lcd_print>
 8003108:	e033      	b.n	8003172 <menu+0x1d06>
 800310a:	bf00      	nop
 800310c:	20000c46 	.word	0x20000c46
 8003110:	20000c5a 	.word	0x20000c5a
 8003114:	0800da0c 	.word	0x0800da0c
 8003118:	0800da20 	.word	0x0800da20
 800311c:	40010800 	.word	0x40010800
 8003120:	20000c68 	.word	0x20000c68
 8003124:	20000b28 	.word	0x20000b28
 8003128:	20000c3f 	.word	0x20000c3f
 800312c:	20000c65 	.word	0x20000c65
 8003130:	20000c39 	.word	0x20000c39
 8003134:	0800ddac 	.word	0x0800ddac
 8003138:	0800dc70 	.word	0x0800dc70
 800313c:	0800ddc0 	.word	0x0800ddc0
 8003140:	0800dc94 	.word	0x0800dc94
 8003144:	20000c54 	.word	0x20000c54
 8003148:	20000bbc 	.word	0x20000bbc
 800314c:	20000c44 	.word	0x20000c44
 8003150:	0800ddd4 	.word	0x0800ddd4
 8003154:	0800dde8 	.word	0x0800dde8
 8003158:	20000c47 	.word	0x20000c47
 800315c:	0800da6c 	.word	0x0800da6c
			} else if(dilSecim == 1) {
 8003160:	4b99      	ldr	r3, [pc, #612]	; (80033c8 <menu+0x1f5c>)
 8003162:	781b      	ldrb	r3, [r3, #0]
 8003164:	2b01      	cmp	r3, #1
 8003166:	d104      	bne.n	8003172 <menu+0x1d06>
				lcd_print(2, 1, "Active          ");
 8003168:	4a98      	ldr	r2, [pc, #608]	; (80033cc <menu+0x1f60>)
 800316a:	2101      	movs	r1, #1
 800316c:	2002      	movs	r0, #2
 800316e:	f7fd fa7b 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003172:	2102      	movs	r1, #2
 8003174:	4896      	ldr	r0, [pc, #600]	; (80033d0 <menu+0x1f64>)
 8003176:	f006 fc9b 	bl	8009ab0 <HAL_GPIO_ReadPin>
 800317a:	4603      	mov	r3, r0
 800317c:	2b01      	cmp	r3, #1
 800317e:	d115      	bne.n	80031ac <menu+0x1d40>
 8003180:	4b94      	ldr	r3, [pc, #592]	; (80033d4 <menu+0x1f68>)
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	f083 0301 	eor.w	r3, r3, #1
 8003188:	b2db      	uxtb	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d00e      	beq.n	80031ac <menu+0x1d40>
			yukariYavasLimit = yukariYavasLimit + 1;
 800318e:	4b92      	ldr	r3, [pc, #584]	; (80033d8 <menu+0x1f6c>)
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	3301      	adds	r3, #1
 8003194:	b2da      	uxtb	r2, r3
 8003196:	4b90      	ldr	r3, [pc, #576]	; (80033d8 <menu+0x1f6c>)
 8003198:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 800319a:	4b8f      	ldr	r3, [pc, #572]	; (80033d8 <menu+0x1f6c>)
 800319c:	781b      	ldrb	r3, [r3, #0]
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d902      	bls.n	80031a8 <menu+0x1d3c>
				yukariYavasLimit = 0;
 80031a2:	4b8d      	ldr	r3, [pc, #564]	; (80033d8 <menu+0x1f6c>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80031a8:	f002 feea 	bl	8005f80 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80031ac:	2104      	movs	r1, #4
 80031ae:	4888      	ldr	r0, [pc, #544]	; (80033d0 <menu+0x1f64>)
 80031b0:	f006 fc7e 	bl	8009ab0 <HAL_GPIO_ReadPin>
 80031b4:	4603      	mov	r3, r0
 80031b6:	2b01      	cmp	r3, #1
 80031b8:	d115      	bne.n	80031e6 <menu+0x1d7a>
 80031ba:	4b86      	ldr	r3, [pc, #536]	; (80033d4 <menu+0x1f68>)
 80031bc:	781b      	ldrb	r3, [r3, #0]
 80031be:	f083 0301 	eor.w	r3, r3, #1
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00e      	beq.n	80031e6 <menu+0x1d7a>
			yukariYavasLimit = yukariYavasLimit - 1;
 80031c8:	4b83      	ldr	r3, [pc, #524]	; (80033d8 <menu+0x1f6c>)
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	3b01      	subs	r3, #1
 80031ce:	b2da      	uxtb	r2, r3
 80031d0:	4b81      	ldr	r3, [pc, #516]	; (80033d8 <menu+0x1f6c>)
 80031d2:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 80031d4:	4b80      	ldr	r3, [pc, #512]	; (80033d8 <menu+0x1f6c>)
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d002      	beq.n	80031e2 <menu+0x1d76>
		   		yukariYavasLimit = 1;
 80031dc:	4b7e      	ldr	r3, [pc, #504]	; (80033d8 <menu+0x1f6c>)
 80031de:	2201      	movs	r2, #1
 80031e0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80031e2:	f002 fecd 	bl	8005f80 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80031e6:	2108      	movs	r1, #8
 80031e8:	4879      	ldr	r0, [pc, #484]	; (80033d0 <menu+0x1f64>)
 80031ea:	f006 fc61 	bl	8009ab0 <HAL_GPIO_ReadPin>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d10d      	bne.n	8003210 <menu+0x1da4>
 80031f4:	4b77      	ldr	r3, [pc, #476]	; (80033d4 <menu+0x1f68>)
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	f083 0301 	eor.w	r3, r3, #1
 80031fc:	b2db      	uxtb	r3, r3
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d006      	beq.n	8003210 <menu+0x1da4>
			eepromData[14] = yukariYavasLimit;
 8003202:	4b75      	ldr	r3, [pc, #468]	; (80033d8 <menu+0x1f6c>)
 8003204:	781a      	ldrb	r2, [r3, #0]
 8003206:	4b75      	ldr	r3, [pc, #468]	; (80033dc <menu+0x1f70>)
 8003208:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 800320a:	4b75      	ldr	r3, [pc, #468]	; (80033e0 <menu+0x1f74>)
 800320c:	2201      	movs	r2, #1
 800320e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8003210:	4b74      	ldr	r3, [pc, #464]	; (80033e4 <menu+0x1f78>)
 8003212:	781b      	ldrb	r3, [r3, #0]
 8003214:	2b11      	cmp	r3, #17
 8003216:	f040 80c3 	bne.w	80033a0 <menu+0x1f34>
		if(dilSecim == 0) {
 800321a:	4b6b      	ldr	r3, [pc, #428]	; (80033c8 <menu+0x1f5c>)
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d105      	bne.n	800322e <menu+0x1dc2>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 8003222:	4a71      	ldr	r2, [pc, #452]	; (80033e8 <menu+0x1f7c>)
 8003224:	2101      	movs	r1, #1
 8003226:	2001      	movs	r0, #1
 8003228:	f7fd fa1e 	bl	8000668 <lcd_print>
 800322c:	e008      	b.n	8003240 <menu+0x1dd4>
		} else if(dilSecim == 1) {
 800322e:	4b66      	ldr	r3, [pc, #408]	; (80033c8 <menu+0x1f5c>)
 8003230:	781b      	ldrb	r3, [r3, #0]
 8003232:	2b01      	cmp	r3, #1
 8003234:	d104      	bne.n	8003240 <menu+0x1dd4>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 8003236:	4a6d      	ldr	r2, [pc, #436]	; (80033ec <menu+0x1f80>)
 8003238:	2101      	movs	r1, #1
 800323a:	2001      	movs	r0, #1
 800323c:	f7fd fa14 	bl	8000668 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 8003240:	4b6b      	ldr	r3, [pc, #428]	; (80033f0 <menu+0x1f84>)
 8003242:	781b      	ldrb	r3, [r3, #0]
 8003244:	2b02      	cmp	r3, #2
 8003246:	d113      	bne.n	8003270 <menu+0x1e04>
			if(dilSecim == 0){
 8003248:	4b5f      	ldr	r3, [pc, #380]	; (80033c8 <menu+0x1f5c>)
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d105      	bne.n	800325c <menu+0x1df0>
				lcd_print(2, 1, "Devirme aktif  ");
 8003250:	4a68      	ldr	r2, [pc, #416]	; (80033f4 <menu+0x1f88>)
 8003252:	2101      	movs	r1, #1
 8003254:	2002      	movs	r0, #2
 8003256:	f7fd fa07 	bl	8000668 <lcd_print>
 800325a:	e038      	b.n	80032ce <menu+0x1e62>
			} else if(dilSecim == 1){
 800325c:	4b5a      	ldr	r3, [pc, #360]	; (80033c8 <menu+0x1f5c>)
 800325e:	781b      	ldrb	r3, [r3, #0]
 8003260:	2b01      	cmp	r3, #1
 8003262:	d134      	bne.n	80032ce <menu+0x1e62>
				lcd_print(2, 1, "Tipping active ");
 8003264:	4a64      	ldr	r2, [pc, #400]	; (80033f8 <menu+0x1f8c>)
 8003266:	2101      	movs	r1, #1
 8003268:	2002      	movs	r0, #2
 800326a:	f7fd f9fd 	bl	8000668 <lcd_print>
 800326e:	e02e      	b.n	80032ce <menu+0x1e62>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003270:	4b5f      	ldr	r3, [pc, #380]	; (80033f0 <menu+0x1f84>)
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	2b01      	cmp	r3, #1
 8003276:	d113      	bne.n	80032a0 <menu+0x1e34>
			if(dilSecim == 0){
 8003278:	4b53      	ldr	r3, [pc, #332]	; (80033c8 <menu+0x1f5c>)
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d105      	bne.n	800328c <menu+0x1e20>
				lcd_print(2, 1, "Yuruyus aktif  ");
 8003280:	4a5e      	ldr	r2, [pc, #376]	; (80033fc <menu+0x1f90>)
 8003282:	2101      	movs	r1, #1
 8003284:	2002      	movs	r0, #2
 8003286:	f7fd f9ef 	bl	8000668 <lcd_print>
 800328a:	e020      	b.n	80032ce <menu+0x1e62>
			} else if(dilSecim == 1) {
 800328c:	4b4e      	ldr	r3, [pc, #312]	; (80033c8 <menu+0x1f5c>)
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d11c      	bne.n	80032ce <menu+0x1e62>
				lcd_print(2, 1, "Drive active   ");
 8003294:	4a5a      	ldr	r2, [pc, #360]	; (8003400 <menu+0x1f94>)
 8003296:	2101      	movs	r1, #1
 8003298:	2002      	movs	r0, #2
 800329a:	f7fd f9e5 	bl	8000668 <lcd_print>
 800329e:	e016      	b.n	80032ce <menu+0x1e62>
			}
		} else if(devirmeYuruyusSecim == 0) {
 80032a0:	4b53      	ldr	r3, [pc, #332]	; (80033f0 <menu+0x1f84>)
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d112      	bne.n	80032ce <menu+0x1e62>
			if(dilSecim == 0) {
 80032a8:	4b47      	ldr	r3, [pc, #284]	; (80033c8 <menu+0x1f5c>)
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d105      	bne.n	80032bc <menu+0x1e50>
				lcd_print(2, 1, "Pasif           ");
 80032b0:	4a54      	ldr	r2, [pc, #336]	; (8003404 <menu+0x1f98>)
 80032b2:	2101      	movs	r1, #1
 80032b4:	2002      	movs	r0, #2
 80032b6:	f7fd f9d7 	bl	8000668 <lcd_print>
 80032ba:	e008      	b.n	80032ce <menu+0x1e62>
			} else if(dilSecim == 1) {
 80032bc:	4b42      	ldr	r3, [pc, #264]	; (80033c8 <menu+0x1f5c>)
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d104      	bne.n	80032ce <menu+0x1e62>
				lcd_print(2, 1, "Passive         ");
 80032c4:	4a50      	ldr	r2, [pc, #320]	; (8003408 <menu+0x1f9c>)
 80032c6:	2101      	movs	r1, #1
 80032c8:	2002      	movs	r0, #2
 80032ca:	f7fd f9cd 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80032ce:	2102      	movs	r1, #2
 80032d0:	483f      	ldr	r0, [pc, #252]	; (80033d0 <menu+0x1f64>)
 80032d2:	f006 fbed 	bl	8009ab0 <HAL_GPIO_ReadPin>
 80032d6:	4603      	mov	r3, r0
 80032d8:	2b01      	cmp	r3, #1
 80032da:	d115      	bne.n	8003308 <menu+0x1e9c>
 80032dc:	4b3d      	ldr	r3, [pc, #244]	; (80033d4 <menu+0x1f68>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	f083 0301 	eor.w	r3, r3, #1
 80032e4:	b2db      	uxtb	r3, r3
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00e      	beq.n	8003308 <menu+0x1e9c>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 80032ea:	4b41      	ldr	r3, [pc, #260]	; (80033f0 <menu+0x1f84>)
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	3301      	adds	r3, #1
 80032f0:	b2da      	uxtb	r2, r3
 80032f2:	4b3f      	ldr	r3, [pc, #252]	; (80033f0 <menu+0x1f84>)
 80032f4:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 80032f6:	4b3e      	ldr	r3, [pc, #248]	; (80033f0 <menu+0x1f84>)
 80032f8:	781b      	ldrb	r3, [r3, #0]
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d902      	bls.n	8003304 <menu+0x1e98>
				devirmeYuruyusSecim = 0;
 80032fe:	4b3c      	ldr	r3, [pc, #240]	; (80033f0 <menu+0x1f84>)
 8003300:	2200      	movs	r2, #0
 8003302:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003304:	f002 fe3c 	bl	8005f80 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003308:	2104      	movs	r1, #4
 800330a:	4831      	ldr	r0, [pc, #196]	; (80033d0 <menu+0x1f64>)
 800330c:	f006 fbd0 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8003310:	4603      	mov	r3, r0
 8003312:	2b01      	cmp	r3, #1
 8003314:	d115      	bne.n	8003342 <menu+0x1ed6>
 8003316:	4b2f      	ldr	r3, [pc, #188]	; (80033d4 <menu+0x1f68>)
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	f083 0301 	eor.w	r3, r3, #1
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00e      	beq.n	8003342 <menu+0x1ed6>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 8003324:	4b32      	ldr	r3, [pc, #200]	; (80033f0 <menu+0x1f84>)
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	3b01      	subs	r3, #1
 800332a:	b2da      	uxtb	r2, r3
 800332c:	4b30      	ldr	r3, [pc, #192]	; (80033f0 <menu+0x1f84>)
 800332e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8003330:	4b2f      	ldr	r3, [pc, #188]	; (80033f0 <menu+0x1f84>)
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	2b03      	cmp	r3, #3
 8003336:	d902      	bls.n	800333e <menu+0x1ed2>
		   		devirmeYuruyusSecim = 2;
 8003338:	4b2d      	ldr	r3, [pc, #180]	; (80033f0 <menu+0x1f84>)
 800333a:	2202      	movs	r2, #2
 800333c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800333e:	f002 fe1f 	bl	8005f80 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003342:	2108      	movs	r1, #8
 8003344:	4822      	ldr	r0, [pc, #136]	; (80033d0 <menu+0x1f64>)
 8003346:	f006 fbb3 	bl	8009ab0 <HAL_GPIO_ReadPin>
 800334a:	4603      	mov	r3, r0
 800334c:	2b01      	cmp	r3, #1
 800334e:	d127      	bne.n	80033a0 <menu+0x1f34>
 8003350:	4b20      	ldr	r3, [pc, #128]	; (80033d4 <menu+0x1f68>)
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	f083 0301 	eor.w	r3, r3, #1
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d020      	beq.n	80033a0 <menu+0x1f34>
			eepromData[15] = devirmeYuruyusSecim;
 800335e:	4b24      	ldr	r3, [pc, #144]	; (80033f0 <menu+0x1f84>)
 8003360:	781a      	ldrb	r2, [r3, #0]
 8003362:	4b1e      	ldr	r3, [pc, #120]	; (80033dc <menu+0x1f70>)
 8003364:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 8003366:	4b22      	ldr	r3, [pc, #136]	; (80033f0 <menu+0x1f84>)
 8003368:	781b      	ldrb	r3, [r3, #0]
 800336a:	2b02      	cmp	r3, #2
 800336c:	d003      	beq.n	8003376 <menu+0x1f0a>
 800336e:	4b20      	ldr	r3, [pc, #128]	; (80033f0 <menu+0x1f84>)
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	2b01      	cmp	r3, #1
 8003374:	d106      	bne.n	8003384 <menu+0x1f18>
				calismaSekli = 0;
 8003376:	4b25      	ldr	r3, [pc, #148]	; (800340c <menu+0x1fa0>)
 8003378:	2200      	movs	r2, #0
 800337a:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 800337c:	4b23      	ldr	r3, [pc, #140]	; (800340c <menu+0x1fa0>)
 800337e:	781a      	ldrb	r2, [r3, #0]
 8003380:	4b16      	ldr	r3, [pc, #88]	; (80033dc <menu+0x1f70>)
 8003382:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 8003384:	4b1a      	ldr	r3, [pc, #104]	; (80033f0 <menu+0x1f84>)
 8003386:	781b      	ldrb	r3, [r3, #0]
 8003388:	2b01      	cmp	r3, #1
 800338a:	d106      	bne.n	800339a <menu+0x1f2e>
				devirmeSilindirTipi = 1;
 800338c:	4b20      	ldr	r3, [pc, #128]	; (8003410 <menu+0x1fa4>)
 800338e:	2201      	movs	r2, #1
 8003390:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 8003392:	4b1f      	ldr	r3, [pc, #124]	; (8003410 <menu+0x1fa4>)
 8003394:	781a      	ldrb	r2, [r3, #0]
 8003396:	4b11      	ldr	r3, [pc, #68]	; (80033dc <menu+0x1f70>)
 8003398:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 800339a:	4b11      	ldr	r3, [pc, #68]	; (80033e0 <menu+0x1f74>)
 800339c:	2201      	movs	r2, #1
 800339e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 80033a0:	4b10      	ldr	r3, [pc, #64]	; (80033e4 <menu+0x1f78>)
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	2b12      	cmp	r3, #18
 80033a6:	f040 80d5 	bne.w	8003554 <menu+0x20e8>
		if(devirmeYuruyusSecim == 2) {
 80033aa:	4b11      	ldr	r3, [pc, #68]	; (80033f0 <menu+0x1f84>)
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	2b02      	cmp	r3, #2
 80033b0:	d13c      	bne.n	800342c <menu+0x1fc0>
			if(dilSecim == 0) {
 80033b2:	4b05      	ldr	r3, [pc, #20]	; (80033c8 <menu+0x1f5c>)
 80033b4:	781b      	ldrb	r3, [r3, #0]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d12e      	bne.n	8003418 <menu+0x1fac>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 80033ba:	4a16      	ldr	r2, [pc, #88]	; (8003414 <menu+0x1fa8>)
 80033bc:	2101      	movs	r1, #1
 80033be:	2001      	movs	r0, #1
 80033c0:	f7fd f952 	bl	8000668 <lcd_print>
 80033c4:	e048      	b.n	8003458 <menu+0x1fec>
 80033c6:	bf00      	nop
 80033c8:	20000c5a 	.word	0x20000c5a
 80033cc:	0800da80 	.word	0x0800da80
 80033d0:	40010800 	.word	0x40010800
 80033d4:	20000c68 	.word	0x20000c68
 80033d8:	20000c47 	.word	0x20000c47
 80033dc:	20000b28 	.word	0x20000b28
 80033e0:	20000c65 	.word	0x20000c65
 80033e4:	20000c39 	.word	0x20000c39
 80033e8:	0800ddfc 	.word	0x0800ddfc
 80033ec:	0800de10 	.word	0x0800de10
 80033f0:	20000c48 	.word	0x20000c48
 80033f4:	0800de24 	.word	0x0800de24
 80033f8:	0800de34 	.word	0x0800de34
 80033fc:	0800de44 	.word	0x0800de44
 8003400:	0800de54 	.word	0x0800de54
 8003404:	0800da0c 	.word	0x0800da0c
 8003408:	0800da20 	.word	0x0800da20
 800340c:	20000c3a 	.word	0x20000c3a
 8003410:	20000c4b 	.word	0x20000c4b
 8003414:	0800de64 	.word	0x0800de64
			} else if(dilSecim == 1) {
 8003418:	4b7b      	ldr	r3, [pc, #492]	; (8003608 <menu+0x219c>)
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	2b01      	cmp	r3, #1
 800341e:	d11b      	bne.n	8003458 <menu+0x1fec>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 8003420:	4a7a      	ldr	r2, [pc, #488]	; (800360c <menu+0x21a0>)
 8003422:	2101      	movs	r1, #1
 8003424:	2001      	movs	r0, #1
 8003426:	f7fd f91f 	bl	8000668 <lcd_print>
 800342a:	e015      	b.n	8003458 <menu+0x1fec>
			}
		} else if(devirmeYuruyusSecim == 1) {
 800342c:	4b78      	ldr	r3, [pc, #480]	; (8003610 <menu+0x21a4>)
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	2b01      	cmp	r3, #1
 8003432:	d111      	bne.n	8003458 <menu+0x1fec>
			if(dilSecim == 0){
 8003434:	4b74      	ldr	r3, [pc, #464]	; (8003608 <menu+0x219c>)
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d104      	bne.n	8003446 <menu+0x1fda>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 800343c:	4a75      	ldr	r2, [pc, #468]	; (8003614 <menu+0x21a8>)
 800343e:	2101      	movs	r1, #1
 8003440:	2001      	movs	r0, #1
 8003442:	f7fd f911 	bl	8000668 <lcd_print>
			}
			if(dilSecim == 1){
 8003446:	4b70      	ldr	r3, [pc, #448]	; (8003608 <menu+0x219c>)
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d104      	bne.n	8003458 <menu+0x1fec>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 800344e:	4a72      	ldr	r2, [pc, #456]	; (8003618 <menu+0x21ac>)
 8003450:	2101      	movs	r1, #1
 8003452:	2001      	movs	r0, #1
 8003454:	f7fd f908 	bl	8000668 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 8003458:	4b70      	ldr	r3, [pc, #448]	; (800361c <menu+0x21b0>)
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d113      	bne.n	8003488 <menu+0x201c>
			if(dilSecim == 0) {
 8003460:	4b69      	ldr	r3, [pc, #420]	; (8003608 <menu+0x219c>)
 8003462:	781b      	ldrb	r3, [r3, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d105      	bne.n	8003474 <menu+0x2008>
				lcd_print(2, 1, "Pasif           ");
 8003468:	4a6d      	ldr	r2, [pc, #436]	; (8003620 <menu+0x21b4>)
 800346a:	2101      	movs	r1, #1
 800346c:	2002      	movs	r0, #2
 800346e:	f7fd f8fb 	bl	8000668 <lcd_print>
 8003472:	e020      	b.n	80034b6 <menu+0x204a>
			} else if(dilSecim == 1){
 8003474:	4b64      	ldr	r3, [pc, #400]	; (8003608 <menu+0x219c>)
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	2b01      	cmp	r3, #1
 800347a:	d11c      	bne.n	80034b6 <menu+0x204a>
				lcd_print(2, 1, "Passive         ");
 800347c:	4a69      	ldr	r2, [pc, #420]	; (8003624 <menu+0x21b8>)
 800347e:	2101      	movs	r1, #1
 8003480:	2002      	movs	r0, #2
 8003482:	f7fd f8f1 	bl	8000668 <lcd_print>
 8003486:	e016      	b.n	80034b6 <menu+0x204a>
			}
		} else if(devirmeYukariIleriLimit == 1){
 8003488:	4b64      	ldr	r3, [pc, #400]	; (800361c <menu+0x21b0>)
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d112      	bne.n	80034b6 <menu+0x204a>
			if(dilSecim == 0){
 8003490:	4b5d      	ldr	r3, [pc, #372]	; (8003608 <menu+0x219c>)
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d105      	bne.n	80034a4 <menu+0x2038>
				lcd_print(2, 1, "Aktif           ");
 8003498:	4a63      	ldr	r2, [pc, #396]	; (8003628 <menu+0x21bc>)
 800349a:	2101      	movs	r1, #1
 800349c:	2002      	movs	r0, #2
 800349e:	f7fd f8e3 	bl	8000668 <lcd_print>
 80034a2:	e008      	b.n	80034b6 <menu+0x204a>
			} else if(dilSecim == 1){
 80034a4:	4b58      	ldr	r3, [pc, #352]	; (8003608 <menu+0x219c>)
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d104      	bne.n	80034b6 <menu+0x204a>
				lcd_print(2, 1, "Active          ");
 80034ac:	4a5f      	ldr	r2, [pc, #380]	; (800362c <menu+0x21c0>)
 80034ae:	2101      	movs	r1, #1
 80034b0:	2002      	movs	r0, #2
 80034b2:	f7fd f8d9 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80034b6:	2102      	movs	r1, #2
 80034b8:	485d      	ldr	r0, [pc, #372]	; (8003630 <menu+0x21c4>)
 80034ba:	f006 faf9 	bl	8009ab0 <HAL_GPIO_ReadPin>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b01      	cmp	r3, #1
 80034c2:	d115      	bne.n	80034f0 <menu+0x2084>
 80034c4:	4b5b      	ldr	r3, [pc, #364]	; (8003634 <menu+0x21c8>)
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	f083 0301 	eor.w	r3, r3, #1
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00e      	beq.n	80034f0 <menu+0x2084>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 80034d2:	4b52      	ldr	r3, [pc, #328]	; (800361c <menu+0x21b0>)
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	3301      	adds	r3, #1
 80034d8:	b2da      	uxtb	r2, r3
 80034da:	4b50      	ldr	r3, [pc, #320]	; (800361c <menu+0x21b0>)
 80034dc:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 80034de:	4b4f      	ldr	r3, [pc, #316]	; (800361c <menu+0x21b0>)
 80034e0:	781b      	ldrb	r3, [r3, #0]
 80034e2:	2b01      	cmp	r3, #1
 80034e4:	d902      	bls.n	80034ec <menu+0x2080>
				devirmeYukariIleriLimit = 0;
 80034e6:	4b4d      	ldr	r3, [pc, #308]	; (800361c <menu+0x21b0>)
 80034e8:	2200      	movs	r2, #0
 80034ea:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80034ec:	f002 fd48 	bl	8005f80 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80034f0:	2104      	movs	r1, #4
 80034f2:	484f      	ldr	r0, [pc, #316]	; (8003630 <menu+0x21c4>)
 80034f4:	f006 fadc 	bl	8009ab0 <HAL_GPIO_ReadPin>
 80034f8:	4603      	mov	r3, r0
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d115      	bne.n	800352a <menu+0x20be>
 80034fe:	4b4d      	ldr	r3, [pc, #308]	; (8003634 <menu+0x21c8>)
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	f083 0301 	eor.w	r3, r3, #1
 8003506:	b2db      	uxtb	r3, r3
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00e      	beq.n	800352a <menu+0x20be>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 800350c:	4b43      	ldr	r3, [pc, #268]	; (800361c <menu+0x21b0>)
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	3b01      	subs	r3, #1
 8003512:	b2da      	uxtb	r2, r3
 8003514:	4b41      	ldr	r3, [pc, #260]	; (800361c <menu+0x21b0>)
 8003516:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8003518:	4b40      	ldr	r3, [pc, #256]	; (800361c <menu+0x21b0>)
 800351a:	781b      	ldrb	r3, [r3, #0]
 800351c:	2b00      	cmp	r3, #0
 800351e:	d002      	beq.n	8003526 <menu+0x20ba>
		   		devirmeYukariIleriLimit = 1;
 8003520:	4b3e      	ldr	r3, [pc, #248]	; (800361c <menu+0x21b0>)
 8003522:	2201      	movs	r2, #1
 8003524:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003526:	f002 fd2b 	bl	8005f80 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800352a:	2108      	movs	r1, #8
 800352c:	4840      	ldr	r0, [pc, #256]	; (8003630 <menu+0x21c4>)
 800352e:	f006 fabf 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8003532:	4603      	mov	r3, r0
 8003534:	2b01      	cmp	r3, #1
 8003536:	d10d      	bne.n	8003554 <menu+0x20e8>
 8003538:	4b3e      	ldr	r3, [pc, #248]	; (8003634 <menu+0x21c8>)
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	f083 0301 	eor.w	r3, r3, #1
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d006      	beq.n	8003554 <menu+0x20e8>
			eepromData[16] = devirmeYukariIleriLimit;
 8003546:	4b35      	ldr	r3, [pc, #212]	; (800361c <menu+0x21b0>)
 8003548:	781a      	ldrb	r2, [r3, #0]
 800354a:	4b3b      	ldr	r3, [pc, #236]	; (8003638 <menu+0x21cc>)
 800354c:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 800354e:	4b3b      	ldr	r3, [pc, #236]	; (800363c <menu+0x21d0>)
 8003550:	2201      	movs	r2, #1
 8003552:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 8003554:	4b3a      	ldr	r3, [pc, #232]	; (8003640 <menu+0x21d4>)
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	2b13      	cmp	r3, #19
 800355a:	f040 80d5 	bne.w	8003708 <menu+0x229c>
		if(devirmeYuruyusSecim == 2) {
 800355e:	4b2c      	ldr	r3, [pc, #176]	; (8003610 <menu+0x21a4>)
 8003560:	781b      	ldrb	r3, [r3, #0]
 8003562:	2b02      	cmp	r3, #2
 8003564:	d113      	bne.n	800358e <menu+0x2122>
			if(dilSecim == 0) {
 8003566:	4b28      	ldr	r3, [pc, #160]	; (8003608 <menu+0x219c>)
 8003568:	781b      	ldrb	r3, [r3, #0]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d105      	bne.n	800357a <menu+0x210e>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 800356e:	4a35      	ldr	r2, [pc, #212]	; (8003644 <menu+0x21d8>)
 8003570:	2101      	movs	r1, #1
 8003572:	2001      	movs	r0, #1
 8003574:	f7fd f878 	bl	8000668 <lcd_print>
 8003578:	e01f      	b.n	80035ba <menu+0x214e>
			} else if(dilSecim == 1) {
 800357a:	4b23      	ldr	r3, [pc, #140]	; (8003608 <menu+0x219c>)
 800357c:	781b      	ldrb	r3, [r3, #0]
 800357e:	2b01      	cmp	r3, #1
 8003580:	d11b      	bne.n	80035ba <menu+0x214e>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 8003582:	4a31      	ldr	r2, [pc, #196]	; (8003648 <menu+0x21dc>)
 8003584:	2101      	movs	r1, #1
 8003586:	2001      	movs	r0, #1
 8003588:	f7fd f86e 	bl	8000668 <lcd_print>
 800358c:	e015      	b.n	80035ba <menu+0x214e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 800358e:	4b20      	ldr	r3, [pc, #128]	; (8003610 <menu+0x21a4>)
 8003590:	781b      	ldrb	r3, [r3, #0]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d111      	bne.n	80035ba <menu+0x214e>
			if(dilSecim == 0) {
 8003596:	4b1c      	ldr	r3, [pc, #112]	; (8003608 <menu+0x219c>)
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d104      	bne.n	80035a8 <menu+0x213c>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 800359e:	4a2b      	ldr	r2, [pc, #172]	; (800364c <menu+0x21e0>)
 80035a0:	2101      	movs	r1, #1
 80035a2:	2001      	movs	r0, #1
 80035a4:	f7fd f860 	bl	8000668 <lcd_print>
			}
			if(dilSecim == 1) {
 80035a8:	4b17      	ldr	r3, [pc, #92]	; (8003608 <menu+0x219c>)
 80035aa:	781b      	ldrb	r3, [r3, #0]
 80035ac:	2b01      	cmp	r3, #1
 80035ae:	d104      	bne.n	80035ba <menu+0x214e>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 80035b0:	4a27      	ldr	r2, [pc, #156]	; (8003650 <menu+0x21e4>)
 80035b2:	2101      	movs	r1, #1
 80035b4:	2001      	movs	r0, #1
 80035b6:	f7fd f857 	bl	8000668 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 80035ba:	4b26      	ldr	r3, [pc, #152]	; (8003654 <menu+0x21e8>)
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d113      	bne.n	80035ea <menu+0x217e>
			if(dilSecim == 0) {
 80035c2:	4b11      	ldr	r3, [pc, #68]	; (8003608 <menu+0x219c>)
 80035c4:	781b      	ldrb	r3, [r3, #0]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d105      	bne.n	80035d6 <menu+0x216a>
				lcd_print(2, 1, "Pasif           ");
 80035ca:	4a15      	ldr	r2, [pc, #84]	; (8003620 <menu+0x21b4>)
 80035cc:	2101      	movs	r1, #1
 80035ce:	2002      	movs	r0, #2
 80035d0:	f7fd f84a 	bl	8000668 <lcd_print>
 80035d4:	e049      	b.n	800366a <menu+0x21fe>
			} else if(dilSecim == 1) {
 80035d6:	4b0c      	ldr	r3, [pc, #48]	; (8003608 <menu+0x219c>)
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d145      	bne.n	800366a <menu+0x21fe>
				lcd_print(2, 1, "Passive         ");
 80035de:	4a11      	ldr	r2, [pc, #68]	; (8003624 <menu+0x21b8>)
 80035e0:	2101      	movs	r1, #1
 80035e2:	2002      	movs	r0, #2
 80035e4:	f7fd f840 	bl	8000668 <lcd_print>
 80035e8:	e03f      	b.n	800366a <menu+0x21fe>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 80035ea:	4b1a      	ldr	r3, [pc, #104]	; (8003654 <menu+0x21e8>)
 80035ec:	781b      	ldrb	r3, [r3, #0]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d13b      	bne.n	800366a <menu+0x21fe>
			if(dilSecim == 0) {
 80035f2:	4b05      	ldr	r3, [pc, #20]	; (8003608 <menu+0x219c>)
 80035f4:	781b      	ldrb	r3, [r3, #0]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d12e      	bne.n	8003658 <menu+0x21ec>
				lcd_print(2, 1, "Aktif           ");
 80035fa:	4a0b      	ldr	r2, [pc, #44]	; (8003628 <menu+0x21bc>)
 80035fc:	2101      	movs	r1, #1
 80035fe:	2002      	movs	r0, #2
 8003600:	f7fd f832 	bl	8000668 <lcd_print>
 8003604:	e031      	b.n	800366a <menu+0x21fe>
 8003606:	bf00      	nop
 8003608:	20000c5a 	.word	0x20000c5a
 800360c:	0800de78 	.word	0x0800de78
 8003610:	20000c48 	.word	0x20000c48
 8003614:	0800de88 	.word	0x0800de88
 8003618:	0800de9c 	.word	0x0800de9c
 800361c:	20000c49 	.word	0x20000c49
 8003620:	0800da0c 	.word	0x0800da0c
 8003624:	0800da20 	.word	0x0800da20
 8003628:	0800da6c 	.word	0x0800da6c
 800362c:	0800da80 	.word	0x0800da80
 8003630:	40010800 	.word	0x40010800
 8003634:	20000c68 	.word	0x20000c68
 8003638:	20000b28 	.word	0x20000b28
 800363c:	20000c65 	.word	0x20000c65
 8003640:	20000c39 	.word	0x20000c39
 8003644:	0800deb0 	.word	0x0800deb0
 8003648:	0800dec4 	.word	0x0800dec4
 800364c:	0800ded8 	.word	0x0800ded8
 8003650:	0800deec 	.word	0x0800deec
 8003654:	20000c4a 	.word	0x20000c4a
			} else if(dilSecim == 1) {
 8003658:	4b90      	ldr	r3, [pc, #576]	; (800389c <menu+0x2430>)
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d104      	bne.n	800366a <menu+0x21fe>
				lcd_print(2, 1, "Active          ");
 8003660:	4a8f      	ldr	r2, [pc, #572]	; (80038a0 <menu+0x2434>)
 8003662:	2101      	movs	r1, #1
 8003664:	2002      	movs	r0, #2
 8003666:	f7fc ffff 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800366a:	2102      	movs	r1, #2
 800366c:	488d      	ldr	r0, [pc, #564]	; (80038a4 <menu+0x2438>)
 800366e:	f006 fa1f 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8003672:	4603      	mov	r3, r0
 8003674:	2b01      	cmp	r3, #1
 8003676:	d115      	bne.n	80036a4 <menu+0x2238>
 8003678:	4b8b      	ldr	r3, [pc, #556]	; (80038a8 <menu+0x243c>)
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	f083 0301 	eor.w	r3, r3, #1
 8003680:	b2db      	uxtb	r3, r3
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00e      	beq.n	80036a4 <menu+0x2238>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 8003686:	4b89      	ldr	r3, [pc, #548]	; (80038ac <menu+0x2440>)
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	3301      	adds	r3, #1
 800368c:	b2da      	uxtb	r2, r3
 800368e:	4b87      	ldr	r3, [pc, #540]	; (80038ac <menu+0x2440>)
 8003690:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 8003692:	4b86      	ldr	r3, [pc, #536]	; (80038ac <menu+0x2440>)
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d902      	bls.n	80036a0 <menu+0x2234>
				devirmeAsagiGeriLimit = 0;
 800369a:	4b84      	ldr	r3, [pc, #528]	; (80038ac <menu+0x2440>)
 800369c:	2200      	movs	r2, #0
 800369e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80036a0:	f002 fc6e 	bl	8005f80 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80036a4:	2104      	movs	r1, #4
 80036a6:	487f      	ldr	r0, [pc, #508]	; (80038a4 <menu+0x2438>)
 80036a8:	f006 fa02 	bl	8009ab0 <HAL_GPIO_ReadPin>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	d115      	bne.n	80036de <menu+0x2272>
 80036b2:	4b7d      	ldr	r3, [pc, #500]	; (80038a8 <menu+0x243c>)
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	f083 0301 	eor.w	r3, r3, #1
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00e      	beq.n	80036de <menu+0x2272>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 80036c0:	4b7a      	ldr	r3, [pc, #488]	; (80038ac <menu+0x2440>)
 80036c2:	781b      	ldrb	r3, [r3, #0]
 80036c4:	3b01      	subs	r3, #1
 80036c6:	b2da      	uxtb	r2, r3
 80036c8:	4b78      	ldr	r3, [pc, #480]	; (80038ac <menu+0x2440>)
 80036ca:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 80036cc:	4b77      	ldr	r3, [pc, #476]	; (80038ac <menu+0x2440>)
 80036ce:	781b      	ldrb	r3, [r3, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d002      	beq.n	80036da <menu+0x226e>
		   		devirmeAsagiGeriLimit = 1;
 80036d4:	4b75      	ldr	r3, [pc, #468]	; (80038ac <menu+0x2440>)
 80036d6:	2201      	movs	r2, #1
 80036d8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80036da:	f002 fc51 	bl	8005f80 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80036de:	2108      	movs	r1, #8
 80036e0:	4870      	ldr	r0, [pc, #448]	; (80038a4 <menu+0x2438>)
 80036e2:	f006 f9e5 	bl	8009ab0 <HAL_GPIO_ReadPin>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d10d      	bne.n	8003708 <menu+0x229c>
 80036ec:	4b6e      	ldr	r3, [pc, #440]	; (80038a8 <menu+0x243c>)
 80036ee:	781b      	ldrb	r3, [r3, #0]
 80036f0:	f083 0301 	eor.w	r3, r3, #1
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d006      	beq.n	8003708 <menu+0x229c>
			eepromData[17] = devirmeAsagiGeriLimit;
 80036fa:	4b6c      	ldr	r3, [pc, #432]	; (80038ac <menu+0x2440>)
 80036fc:	781a      	ldrb	r2, [r3, #0]
 80036fe:	4b6c      	ldr	r3, [pc, #432]	; (80038b0 <menu+0x2444>)
 8003700:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8003702:	4b6c      	ldr	r3, [pc, #432]	; (80038b4 <menu+0x2448>)
 8003704:	2201      	movs	r2, #1
 8003706:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8003708:	4b6b      	ldr	r3, [pc, #428]	; (80038b8 <menu+0x244c>)
 800370a:	781b      	ldrb	r3, [r3, #0]
 800370c:	2b14      	cmp	r3, #20
 800370e:	f040 80b5 	bne.w	800387c <menu+0x2410>
		if(devirmeYuruyusSecim == 1) {
 8003712:	4b6a      	ldr	r3, [pc, #424]	; (80038bc <menu+0x2450>)
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d113      	bne.n	8003742 <menu+0x22d6>
			if(dilSecim == 0) {
 800371a:	4b60      	ldr	r3, [pc, #384]	; (800389c <menu+0x2430>)
 800371c:	781b      	ldrb	r3, [r3, #0]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d105      	bne.n	800372e <menu+0x22c2>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 8003722:	4a67      	ldr	r2, [pc, #412]	; (80038c0 <menu+0x2454>)
 8003724:	2101      	movs	r1, #1
 8003726:	2001      	movs	r0, #1
 8003728:	f7fc ff9e 	bl	8000668 <lcd_print>
 800372c:	e020      	b.n	8003770 <menu+0x2304>
			} else if(dilSecim == 1) {
 800372e:	4b5b      	ldr	r3, [pc, #364]	; (800389c <menu+0x2430>)
 8003730:	781b      	ldrb	r3, [r3, #0]
 8003732:	2b01      	cmp	r3, #1
 8003734:	d11c      	bne.n	8003770 <menu+0x2304>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 8003736:	4a63      	ldr	r2, [pc, #396]	; (80038c4 <menu+0x2458>)
 8003738:	2101      	movs	r1, #1
 800373a:	2001      	movs	r0, #1
 800373c:	f7fc ff94 	bl	8000668 <lcd_print>
 8003740:	e016      	b.n	8003770 <menu+0x2304>
			}
		} else if(devirmeYuruyusSecim == 2) {
 8003742:	4b5e      	ldr	r3, [pc, #376]	; (80038bc <menu+0x2450>)
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	2b02      	cmp	r3, #2
 8003748:	d112      	bne.n	8003770 <menu+0x2304>
			if(dilSecim == 0) {
 800374a:	4b54      	ldr	r3, [pc, #336]	; (800389c <menu+0x2430>)
 800374c:	781b      	ldrb	r3, [r3, #0]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d105      	bne.n	800375e <menu+0x22f2>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 8003752:	4a5d      	ldr	r2, [pc, #372]	; (80038c8 <menu+0x245c>)
 8003754:	2101      	movs	r1, #1
 8003756:	2001      	movs	r0, #1
 8003758:	f7fc ff86 	bl	8000668 <lcd_print>
 800375c:	e008      	b.n	8003770 <menu+0x2304>
			} else if(dilSecim == 1) {
 800375e:	4b4f      	ldr	r3, [pc, #316]	; (800389c <menu+0x2430>)
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	2b01      	cmp	r3, #1
 8003764:	d104      	bne.n	8003770 <menu+0x2304>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 8003766:	4a59      	ldr	r2, [pc, #356]	; (80038cc <menu+0x2460>)
 8003768:	2101      	movs	r1, #1
 800376a:	2001      	movs	r0, #1
 800376c:	f7fc ff7c 	bl	8000668 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 8003770:	4b57      	ldr	r3, [pc, #348]	; (80038d0 <menu+0x2464>)
 8003772:	781b      	ldrb	r3, [r3, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d113      	bne.n	80037a0 <menu+0x2334>
			if(dilSecim == 0) {
 8003778:	4b48      	ldr	r3, [pc, #288]	; (800389c <menu+0x2430>)
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d105      	bne.n	800378c <menu+0x2320>
				lcd_print(2, 1, "Tek tesir       ");
 8003780:	4a54      	ldr	r2, [pc, #336]	; (80038d4 <menu+0x2468>)
 8003782:	2101      	movs	r1, #1
 8003784:	2002      	movs	r0, #2
 8003786:	f7fc ff6f 	bl	8000668 <lcd_print>
 800378a:	e020      	b.n	80037ce <menu+0x2362>
			} else if(dilSecim == 1) {
 800378c:	4b43      	ldr	r3, [pc, #268]	; (800389c <menu+0x2430>)
 800378e:	781b      	ldrb	r3, [r3, #0]
 8003790:	2b01      	cmp	r3, #1
 8003792:	d11c      	bne.n	80037ce <menu+0x2362>
				lcd_print(2, 1, "Single acting  ");
 8003794:	4a50      	ldr	r2, [pc, #320]	; (80038d8 <menu+0x246c>)
 8003796:	2101      	movs	r1, #1
 8003798:	2002      	movs	r0, #2
 800379a:	f7fc ff65 	bl	8000668 <lcd_print>
 800379e:	e016      	b.n	80037ce <menu+0x2362>
			}
		} else if(devirmeSilindirTipi == 1) {
 80037a0:	4b4b      	ldr	r3, [pc, #300]	; (80038d0 <menu+0x2464>)
 80037a2:	781b      	ldrb	r3, [r3, #0]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d112      	bne.n	80037ce <menu+0x2362>
			if(dilSecim == 0) {
 80037a8:	4b3c      	ldr	r3, [pc, #240]	; (800389c <menu+0x2430>)
 80037aa:	781b      	ldrb	r3, [r3, #0]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d105      	bne.n	80037bc <menu+0x2350>
				lcd_print(2, 1, "Cift tesir      ");
 80037b0:	4a4a      	ldr	r2, [pc, #296]	; (80038dc <menu+0x2470>)
 80037b2:	2101      	movs	r1, #1
 80037b4:	2002      	movs	r0, #2
 80037b6:	f7fc ff57 	bl	8000668 <lcd_print>
 80037ba:	e008      	b.n	80037ce <menu+0x2362>
			} else if(dilSecim == 1) {
 80037bc:	4b37      	ldr	r3, [pc, #220]	; (800389c <menu+0x2430>)
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	2b01      	cmp	r3, #1
 80037c2:	d104      	bne.n	80037ce <menu+0x2362>
				lcd_print(2, 1, "Double acting  ");
 80037c4:	4a46      	ldr	r2, [pc, #280]	; (80038e0 <menu+0x2474>)
 80037c6:	2101      	movs	r1, #1
 80037c8:	2002      	movs	r0, #2
 80037ca:	f7fc ff4d 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 80037ce:	2102      	movs	r1, #2
 80037d0:	4834      	ldr	r0, [pc, #208]	; (80038a4 <menu+0x2438>)
 80037d2:	f006 f96d 	bl	8009ab0 <HAL_GPIO_ReadPin>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d119      	bne.n	8003810 <menu+0x23a4>
 80037dc:	4b32      	ldr	r3, [pc, #200]	; (80038a8 <menu+0x243c>)
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	f083 0301 	eor.w	r3, r3, #1
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d012      	beq.n	8003810 <menu+0x23a4>
 80037ea:	4b34      	ldr	r3, [pc, #208]	; (80038bc <menu+0x2450>)
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	d10e      	bne.n	8003810 <menu+0x23a4>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 80037f2:	4b37      	ldr	r3, [pc, #220]	; (80038d0 <menu+0x2464>)
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	3301      	adds	r3, #1
 80037f8:	b2da      	uxtb	r2, r3
 80037fa:	4b35      	ldr	r3, [pc, #212]	; (80038d0 <menu+0x2464>)
 80037fc:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 80037fe:	4b34      	ldr	r3, [pc, #208]	; (80038d0 <menu+0x2464>)
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	2b01      	cmp	r3, #1
 8003804:	d902      	bls.n	800380c <menu+0x23a0>
				devirmeSilindirTipi = 0;
 8003806:	4b32      	ldr	r3, [pc, #200]	; (80038d0 <menu+0x2464>)
 8003808:	2200      	movs	r2, #0
 800380a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800380c:	f002 fbb8 	bl	8005f80 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8003810:	2104      	movs	r1, #4
 8003812:	4824      	ldr	r0, [pc, #144]	; (80038a4 <menu+0x2438>)
 8003814:	f006 f94c 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8003818:	4603      	mov	r3, r0
 800381a:	2b01      	cmp	r3, #1
 800381c:	d119      	bne.n	8003852 <menu+0x23e6>
 800381e:	4b22      	ldr	r3, [pc, #136]	; (80038a8 <menu+0x243c>)
 8003820:	781b      	ldrb	r3, [r3, #0]
 8003822:	f083 0301 	eor.w	r3, r3, #1
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2b00      	cmp	r3, #0
 800382a:	d012      	beq.n	8003852 <menu+0x23e6>
 800382c:	4b23      	ldr	r3, [pc, #140]	; (80038bc <menu+0x2450>)
 800382e:	781b      	ldrb	r3, [r3, #0]
 8003830:	2b02      	cmp	r3, #2
 8003832:	d10e      	bne.n	8003852 <menu+0x23e6>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8003834:	4b26      	ldr	r3, [pc, #152]	; (80038d0 <menu+0x2464>)
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	3b01      	subs	r3, #1
 800383a:	b2da      	uxtb	r2, r3
 800383c:	4b24      	ldr	r3, [pc, #144]	; (80038d0 <menu+0x2464>)
 800383e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8003840:	4b23      	ldr	r3, [pc, #140]	; (80038d0 <menu+0x2464>)
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d002      	beq.n	800384e <menu+0x23e2>
		   		devirmeSilindirTipi = 1;
 8003848:	4b21      	ldr	r3, [pc, #132]	; (80038d0 <menu+0x2464>)
 800384a:	2201      	movs	r2, #1
 800384c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800384e:	f002 fb97 	bl	8005f80 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003852:	2108      	movs	r1, #8
 8003854:	4813      	ldr	r0, [pc, #76]	; (80038a4 <menu+0x2438>)
 8003856:	f006 f92b 	bl	8009ab0 <HAL_GPIO_ReadPin>
 800385a:	4603      	mov	r3, r0
 800385c:	2b01      	cmp	r3, #1
 800385e:	d10d      	bne.n	800387c <menu+0x2410>
 8003860:	4b11      	ldr	r3, [pc, #68]	; (80038a8 <menu+0x243c>)
 8003862:	781b      	ldrb	r3, [r3, #0]
 8003864:	f083 0301 	eor.w	r3, r3, #1
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d006      	beq.n	800387c <menu+0x2410>
			eepromData[18] = devirmeSilindirTipi;
 800386e:	4b18      	ldr	r3, [pc, #96]	; (80038d0 <menu+0x2464>)
 8003870:	781a      	ldrb	r2, [r3, #0]
 8003872:	4b0f      	ldr	r3, [pc, #60]	; (80038b0 <menu+0x2444>)
 8003874:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8003876:	4b0f      	ldr	r3, [pc, #60]	; (80038b4 <menu+0x2448>)
 8003878:	2201      	movs	r2, #1
 800387a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 800387c:	4b0e      	ldr	r3, [pc, #56]	; (80038b8 <menu+0x244c>)
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	2b15      	cmp	r3, #21
 8003882:	f040 80c2 	bne.w	8003a0a <menu+0x259e>
		if(dilSecim == 0) {
 8003886:	4b05      	ldr	r3, [pc, #20]	; (800389c <menu+0x2430>)
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d12c      	bne.n	80038e8 <menu+0x247c>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 800388e:	4a15      	ldr	r2, [pc, #84]	; (80038e4 <menu+0x2478>)
 8003890:	2101      	movs	r1, #1
 8003892:	2001      	movs	r0, #1
 8003894:	f7fc fee8 	bl	8000668 <lcd_print>
 8003898:	e02f      	b.n	80038fa <menu+0x248e>
 800389a:	bf00      	nop
 800389c:	20000c5a 	.word	0x20000c5a
 80038a0:	0800da80 	.word	0x0800da80
 80038a4:	40010800 	.word	0x40010800
 80038a8:	20000c68 	.word	0x20000c68
 80038ac:	20000c4a 	.word	0x20000c4a
 80038b0:	20000b28 	.word	0x20000b28
 80038b4:	20000c65 	.word	0x20000c65
 80038b8:	20000c39 	.word	0x20000c39
 80038bc:	20000c48 	.word	0x20000c48
 80038c0:	0800df00 	.word	0x0800df00
 80038c4:	0800df14 	.word	0x0800df14
 80038c8:	0800df28 	.word	0x0800df28
 80038cc:	0800df3c 	.word	0x0800df3c
 80038d0:	20000c4b 	.word	0x20000c4b
 80038d4:	0800df50 	.word	0x0800df50
 80038d8:	0800df64 	.word	0x0800df64
 80038dc:	0800df74 	.word	0x0800df74
 80038e0:	0800df88 	.word	0x0800df88
 80038e4:	0800df98 	.word	0x0800df98
		} else if(dilSecim == 1) {
 80038e8:	4b9c      	ldr	r3, [pc, #624]	; (8003b5c <menu+0x26f0>)
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	2b01      	cmp	r3, #1
 80038ee:	d104      	bne.n	80038fa <menu+0x248e>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 80038f0:	4a9b      	ldr	r2, [pc, #620]	; (8003b60 <menu+0x26f4>)
 80038f2:	2101      	movs	r1, #1
 80038f4:	2001      	movs	r0, #1
 80038f6:	f7fc feb7 	bl	8000668 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 80038fa:	4b9a      	ldr	r3, [pc, #616]	; (8003b64 <menu+0x26f8>)
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d112      	bne.n	8003928 <menu+0x24bc>
			if(dilSecim == 0) {
 8003902:	4b96      	ldr	r3, [pc, #600]	; (8003b5c <menu+0x26f0>)
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d104      	bne.n	8003914 <menu+0x24a8>
				lcd_print(2, 1, "Tek tesir       ");
 800390a:	4a97      	ldr	r2, [pc, #604]	; (8003b68 <menu+0x26fc>)
 800390c:	2101      	movs	r1, #1
 800390e:	2002      	movs	r0, #2
 8003910:	f7fc feaa 	bl	8000668 <lcd_print>
			}
			if(dilSecim == 1) {
 8003914:	4b91      	ldr	r3, [pc, #580]	; (8003b5c <menu+0x26f0>)
 8003916:	781b      	ldrb	r3, [r3, #0]
 8003918:	2b01      	cmp	r3, #1
 800391a:	d11c      	bne.n	8003956 <menu+0x24ea>
				lcd_print(2, 1, "Single acting  ");
 800391c:	4a93      	ldr	r2, [pc, #588]	; (8003b6c <menu+0x2700>)
 800391e:	2101      	movs	r1, #1
 8003920:	2002      	movs	r0, #2
 8003922:	f7fc fea1 	bl	8000668 <lcd_print>
 8003926:	e016      	b.n	8003956 <menu+0x24ea>
			}
		} else if(platformSilindirTipi == 1) {
 8003928:	4b8e      	ldr	r3, [pc, #568]	; (8003b64 <menu+0x26f8>)
 800392a:	781b      	ldrb	r3, [r3, #0]
 800392c:	2b01      	cmp	r3, #1
 800392e:	d112      	bne.n	8003956 <menu+0x24ea>
			if(dilSecim == 0) {
 8003930:	4b8a      	ldr	r3, [pc, #552]	; (8003b5c <menu+0x26f0>)
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d105      	bne.n	8003944 <menu+0x24d8>
				lcd_print(2, 1, "Cift tesir      ");
 8003938:	4a8d      	ldr	r2, [pc, #564]	; (8003b70 <menu+0x2704>)
 800393a:	2101      	movs	r1, #1
 800393c:	2002      	movs	r0, #2
 800393e:	f7fc fe93 	bl	8000668 <lcd_print>
 8003942:	e008      	b.n	8003956 <menu+0x24ea>
			} else if(dilSecim == 1) {
 8003944:	4b85      	ldr	r3, [pc, #532]	; (8003b5c <menu+0x26f0>)
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	2b01      	cmp	r3, #1
 800394a:	d104      	bne.n	8003956 <menu+0x24ea>
				lcd_print(2, 1, "Double acting  ");
 800394c:	4a89      	ldr	r2, [pc, #548]	; (8003b74 <menu+0x2708>)
 800394e:	2101      	movs	r1, #1
 8003950:	2002      	movs	r0, #2
 8003952:	f7fc fe89 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003956:	2102      	movs	r1, #2
 8003958:	4887      	ldr	r0, [pc, #540]	; (8003b78 <menu+0x270c>)
 800395a:	f006 f8a9 	bl	8009ab0 <HAL_GPIO_ReadPin>
 800395e:	4603      	mov	r3, r0
 8003960:	2b01      	cmp	r3, #1
 8003962:	d115      	bne.n	8003990 <menu+0x2524>
 8003964:	4b85      	ldr	r3, [pc, #532]	; (8003b7c <menu+0x2710>)
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	f083 0301 	eor.w	r3, r3, #1
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00e      	beq.n	8003990 <menu+0x2524>
			platformSilindirTipi = platformSilindirTipi + 1;
 8003972:	4b7c      	ldr	r3, [pc, #496]	; (8003b64 <menu+0x26f8>)
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	3301      	adds	r3, #1
 8003978:	b2da      	uxtb	r2, r3
 800397a:	4b7a      	ldr	r3, [pc, #488]	; (8003b64 <menu+0x26f8>)
 800397c:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 800397e:	4b79      	ldr	r3, [pc, #484]	; (8003b64 <menu+0x26f8>)
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d902      	bls.n	800398c <menu+0x2520>
				platformSilindirTipi = 0;
 8003986:	4b77      	ldr	r3, [pc, #476]	; (8003b64 <menu+0x26f8>)
 8003988:	2200      	movs	r2, #0
 800398a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800398c:	f002 faf8 	bl	8005f80 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003990:	2104      	movs	r1, #4
 8003992:	4879      	ldr	r0, [pc, #484]	; (8003b78 <menu+0x270c>)
 8003994:	f006 f88c 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8003998:	4603      	mov	r3, r0
 800399a:	2b01      	cmp	r3, #1
 800399c:	d115      	bne.n	80039ca <menu+0x255e>
 800399e:	4b77      	ldr	r3, [pc, #476]	; (8003b7c <menu+0x2710>)
 80039a0:	781b      	ldrb	r3, [r3, #0]
 80039a2:	f083 0301 	eor.w	r3, r3, #1
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d00e      	beq.n	80039ca <menu+0x255e>
			platformSilindirTipi = platformSilindirTipi - 1;
 80039ac:	4b6d      	ldr	r3, [pc, #436]	; (8003b64 <menu+0x26f8>)
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	3b01      	subs	r3, #1
 80039b2:	b2da      	uxtb	r2, r3
 80039b4:	4b6b      	ldr	r3, [pc, #428]	; (8003b64 <menu+0x26f8>)
 80039b6:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 80039b8:	4b6a      	ldr	r3, [pc, #424]	; (8003b64 <menu+0x26f8>)
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d002      	beq.n	80039c6 <menu+0x255a>
		   		platformSilindirTipi = 1;
 80039c0:	4b68      	ldr	r3, [pc, #416]	; (8003b64 <menu+0x26f8>)
 80039c2:	2201      	movs	r2, #1
 80039c4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80039c6:	f002 fadb 	bl	8005f80 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80039ca:	2108      	movs	r1, #8
 80039cc:	486a      	ldr	r0, [pc, #424]	; (8003b78 <menu+0x270c>)
 80039ce:	f006 f86f 	bl	8009ab0 <HAL_GPIO_ReadPin>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b01      	cmp	r3, #1
 80039d6:	d118      	bne.n	8003a0a <menu+0x259e>
 80039d8:	4b68      	ldr	r3, [pc, #416]	; (8003b7c <menu+0x2710>)
 80039da:	781b      	ldrb	r3, [r3, #0]
 80039dc:	f083 0301 	eor.w	r3, r3, #1
 80039e0:	b2db      	uxtb	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d011      	beq.n	8003a0a <menu+0x259e>
			eepromData[19] = platformSilindirTipi;
 80039e6:	4b5f      	ldr	r3, [pc, #380]	; (8003b64 <menu+0x26f8>)
 80039e8:	781a      	ldrb	r2, [r3, #0]
 80039ea:	4b65      	ldr	r3, [pc, #404]	; (8003b80 <menu+0x2714>)
 80039ec:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 80039ee:	4b5d      	ldr	r3, [pc, #372]	; (8003b64 <menu+0x26f8>)
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d106      	bne.n	8003a04 <menu+0x2598>
				altLimit = 1;
 80039f6:	4b63      	ldr	r3, [pc, #396]	; (8003b84 <menu+0x2718>)
 80039f8:	2201      	movs	r2, #1
 80039fa:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80039fc:	4b61      	ldr	r3, [pc, #388]	; (8003b84 <menu+0x2718>)
 80039fe:	781a      	ldrb	r2, [r3, #0]
 8003a00:	4b5f      	ldr	r3, [pc, #380]	; (8003b80 <menu+0x2714>)
 8003a02:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8003a04:	4b60      	ldr	r3, [pc, #384]	; (8003b88 <menu+0x271c>)
 8003a06:	2201      	movs	r2, #1
 8003a08:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8003a0a:	4b60      	ldr	r3, [pc, #384]	; (8003b8c <menu+0x2720>)
 8003a0c:	781b      	ldrb	r3, [r3, #0]
 8003a0e:	2b16      	cmp	r3, #22
 8003a10:	f040 8081 	bne.w	8003b16 <menu+0x26aa>
		if(dilSecim == 0) {
 8003a14:	4b51      	ldr	r3, [pc, #324]	; (8003b5c <menu+0x26f0>)
 8003a16:	781b      	ldrb	r3, [r3, #0]
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d105      	bne.n	8003a28 <menu+0x25bc>
			lcd_print(1, 1, "YUKARI VALF SURE");
 8003a1c:	4a5c      	ldr	r2, [pc, #368]	; (8003b90 <menu+0x2724>)
 8003a1e:	2101      	movs	r1, #1
 8003a20:	2001      	movs	r0, #1
 8003a22:	f7fc fe21 	bl	8000668 <lcd_print>
 8003a26:	e008      	b.n	8003a3a <menu+0x25ce>
		} else if(dilSecim == 1) {
 8003a28:	4b4c      	ldr	r3, [pc, #304]	; (8003b5c <menu+0x26f0>)
 8003a2a:	781b      	ldrb	r3, [r3, #0]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d104      	bne.n	8003a3a <menu+0x25ce>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8003a30:	4a58      	ldr	r2, [pc, #352]	; (8003b94 <menu+0x2728>)
 8003a32:	2101      	movs	r1, #1
 8003a34:	2001      	movs	r0, #1
 8003a36:	f7fc fe17 	bl	8000668 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 8003a3a:	4b48      	ldr	r3, [pc, #288]	; (8003b5c <menu+0x26f0>)
 8003a3c:	781b      	ldrb	r3, [r3, #0]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d105      	bne.n	8003a4e <menu+0x25e2>
				lcd_print(2, 1, "Kac Saniye     ");
 8003a42:	4a55      	ldr	r2, [pc, #340]	; (8003b98 <menu+0x272c>)
 8003a44:	2101      	movs	r1, #1
 8003a46:	2002      	movs	r0, #2
 8003a48:	f7fc fe0e 	bl	8000668 <lcd_print>
 8003a4c:	e008      	b.n	8003a60 <menu+0x25f4>
			} else if(dilSecim == 1){
 8003a4e:	4b43      	ldr	r3, [pc, #268]	; (8003b5c <menu+0x26f0>)
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d104      	bne.n	8003a60 <menu+0x25f4>
				lcd_print(2, 1, "Second         ");
 8003a56:	4a51      	ldr	r2, [pc, #324]	; (8003b9c <menu+0x2730>)
 8003a58:	2101      	movs	r1, #1
 8003a5a:	2002      	movs	r0, #2
 8003a5c:	f7fc fe04 	bl	8000668 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8003a60:	4b4f      	ldr	r3, [pc, #316]	; (8003ba0 <menu+0x2734>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	220a      	movs	r2, #10
 8003a66:	494f      	ldr	r1, [pc, #316]	; (8003ba4 <menu+0x2738>)
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f009 f84d 	bl	800cb08 <itoa>
		lcd_print(2,16,snum);
 8003a6e:	4a4d      	ldr	r2, [pc, #308]	; (8003ba4 <menu+0x2738>)
 8003a70:	2110      	movs	r1, #16
 8003a72:	2002      	movs	r0, #2
 8003a74:	f7fc fdf8 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a78:	2102      	movs	r1, #2
 8003a7a:	483f      	ldr	r0, [pc, #252]	; (8003b78 <menu+0x270c>)
 8003a7c:	f006 f818 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8003a80:	4603      	mov	r3, r0
 8003a82:	2b01      	cmp	r3, #1
 8003a84:	d115      	bne.n	8003ab2 <menu+0x2646>
 8003a86:	4b3d      	ldr	r3, [pc, #244]	; (8003b7c <menu+0x2710>)
 8003a88:	781b      	ldrb	r3, [r3, #0]
 8003a8a:	f083 0301 	eor.w	r3, r3, #1
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00e      	beq.n	8003ab2 <menu+0x2646>
			yukariValfTmr = yukariValfTmr + 1;
 8003a94:	4b42      	ldr	r3, [pc, #264]	; (8003ba0 <menu+0x2734>)
 8003a96:	781b      	ldrb	r3, [r3, #0]
 8003a98:	3301      	adds	r3, #1
 8003a9a:	b2da      	uxtb	r2, r3
 8003a9c:	4b40      	ldr	r3, [pc, #256]	; (8003ba0 <menu+0x2734>)
 8003a9e:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8003aa0:	4b3f      	ldr	r3, [pc, #252]	; (8003ba0 <menu+0x2734>)
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	2b05      	cmp	r3, #5
 8003aa6:	d902      	bls.n	8003aae <menu+0x2642>
				yukariValfTmr = 0;
 8003aa8:	4b3d      	ldr	r3, [pc, #244]	; (8003ba0 <menu+0x2734>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003aae:	f002 fa67 	bl	8005f80 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ab2:	2104      	movs	r1, #4
 8003ab4:	4830      	ldr	r0, [pc, #192]	; (8003b78 <menu+0x270c>)
 8003ab6:	f005 fffb 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8003aba:	4603      	mov	r3, r0
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d115      	bne.n	8003aec <menu+0x2680>
 8003ac0:	4b2e      	ldr	r3, [pc, #184]	; (8003b7c <menu+0x2710>)
 8003ac2:	781b      	ldrb	r3, [r3, #0]
 8003ac4:	f083 0301 	eor.w	r3, r3, #1
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00e      	beq.n	8003aec <menu+0x2680>
			yukariValfTmr = yukariValfTmr - 1;
 8003ace:	4b34      	ldr	r3, [pc, #208]	; (8003ba0 <menu+0x2734>)
 8003ad0:	781b      	ldrb	r3, [r3, #0]
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	b2da      	uxtb	r2, r3
 8003ad6:	4b32      	ldr	r3, [pc, #200]	; (8003ba0 <menu+0x2734>)
 8003ad8:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8003ada:	4b31      	ldr	r3, [pc, #196]	; (8003ba0 <menu+0x2734>)
 8003adc:	781b      	ldrb	r3, [r3, #0]
 8003ade:	2b06      	cmp	r3, #6
 8003ae0:	d902      	bls.n	8003ae8 <menu+0x267c>
		   		yukariValfTmr = 5;
 8003ae2:	4b2f      	ldr	r3, [pc, #188]	; (8003ba0 <menu+0x2734>)
 8003ae4:	2205      	movs	r2, #5
 8003ae6:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003ae8:	f002 fa4a 	bl	8005f80 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003aec:	2108      	movs	r1, #8
 8003aee:	4822      	ldr	r0, [pc, #136]	; (8003b78 <menu+0x270c>)
 8003af0:	f005 ffde 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d10d      	bne.n	8003b16 <menu+0x26aa>
 8003afa:	4b20      	ldr	r3, [pc, #128]	; (8003b7c <menu+0x2710>)
 8003afc:	781b      	ldrb	r3, [r3, #0]
 8003afe:	f083 0301 	eor.w	r3, r3, #1
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d006      	beq.n	8003b16 <menu+0x26aa>
			eepromData[20] = yukariValfTmr;
 8003b08:	4b25      	ldr	r3, [pc, #148]	; (8003ba0 <menu+0x2734>)
 8003b0a:	781a      	ldrb	r2, [r3, #0]
 8003b0c:	4b1c      	ldr	r3, [pc, #112]	; (8003b80 <menu+0x2714>)
 8003b0e:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8003b10:	4b1d      	ldr	r3, [pc, #116]	; (8003b88 <menu+0x271c>)
 8003b12:	2201      	movs	r2, #1
 8003b14:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8003b16:	4b1d      	ldr	r3, [pc, #116]	; (8003b8c <menu+0x2720>)
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	2b17      	cmp	r3, #23
 8003b1c:	f040 80ac 	bne.w	8003c78 <menu+0x280c>
		if(dilSecim == 0) {
 8003b20:	4b0e      	ldr	r3, [pc, #56]	; (8003b5c <menu+0x26f0>)
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d105      	bne.n	8003b34 <menu+0x26c8>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8003b28:	4a1f      	ldr	r2, [pc, #124]	; (8003ba8 <menu+0x273c>)
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	2001      	movs	r0, #1
 8003b2e:	f7fc fd9b 	bl	8000668 <lcd_print>
 8003b32:	e008      	b.n	8003b46 <menu+0x26da>
		} else if(dilSecim == 1) {
 8003b34:	4b09      	ldr	r3, [pc, #36]	; (8003b5c <menu+0x26f0>)
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d104      	bne.n	8003b46 <menu+0x26da>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8003b3c:	4a1b      	ldr	r2, [pc, #108]	; (8003bac <menu+0x2740>)
 8003b3e:	2101      	movs	r1, #1
 8003b40:	2001      	movs	r0, #1
 8003b42:	f7fc fd91 	bl	8000668 <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 8003b46:	4b05      	ldr	r3, [pc, #20]	; (8003b5c <menu+0x26f0>)
 8003b48:	781b      	ldrb	r3, [r3, #0]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d130      	bne.n	8003bb0 <menu+0x2744>
				lcd_print(2, 1, "Kac Saniye     ");
 8003b4e:	4a12      	ldr	r2, [pc, #72]	; (8003b98 <menu+0x272c>)
 8003b50:	2101      	movs	r1, #1
 8003b52:	2002      	movs	r0, #2
 8003b54:	f7fc fd88 	bl	8000668 <lcd_print>
 8003b58:	e033      	b.n	8003bc2 <menu+0x2756>
 8003b5a:	bf00      	nop
 8003b5c:	20000c5a 	.word	0x20000c5a
 8003b60:	0800dfac 	.word	0x0800dfac
 8003b64:	20000c4c 	.word	0x20000c4c
 8003b68:	0800df50 	.word	0x0800df50
 8003b6c:	0800df64 	.word	0x0800df64
 8003b70:	0800df74 	.word	0x0800df74
 8003b74:	0800df88 	.word	0x0800df88
 8003b78:	40010800 	.word	0x40010800
 8003b7c:	20000c68 	.word	0x20000c68
 8003b80:	20000b28 	.word	0x20000b28
 8003b84:	20000c3f 	.word	0x20000c3f
 8003b88:	20000c65 	.word	0x20000c65
 8003b8c:	20000c39 	.word	0x20000c39
 8003b90:	0800dfbc 	.word	0x0800dfbc
 8003b94:	0800dfd0 	.word	0x0800dfd0
 8003b98:	0800dc70 	.word	0x0800dc70
 8003b9c:	0800dfe4 	.word	0x0800dfe4
 8003ba0:	20000c4d 	.word	0x20000c4d
 8003ba4:	20000bbc 	.word	0x20000bbc
 8003ba8:	0800dff4 	.word	0x0800dff4
 8003bac:	0800e008 	.word	0x0800e008
			} else if(dilSecim == 1) {
 8003bb0:	4b98      	ldr	r3, [pc, #608]	; (8003e14 <menu+0x29a8>)
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	2b01      	cmp	r3, #1
 8003bb6:	d104      	bne.n	8003bc2 <menu+0x2756>
				lcd_print(2, 1, "Second         ");
 8003bb8:	4a97      	ldr	r2, [pc, #604]	; (8003e18 <menu+0x29ac>)
 8003bba:	2101      	movs	r1, #1
 8003bbc:	2002      	movs	r0, #2
 8003bbe:	f7fc fd53 	bl	8000668 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 8003bc2:	4b96      	ldr	r3, [pc, #600]	; (8003e1c <menu+0x29b0>)
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	220a      	movs	r2, #10
 8003bc8:	4995      	ldr	r1, [pc, #596]	; (8003e20 <menu+0x29b4>)
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f008 ff9c 	bl	800cb08 <itoa>
		lcd_print(2,16,snum);
 8003bd0:	4a93      	ldr	r2, [pc, #588]	; (8003e20 <menu+0x29b4>)
 8003bd2:	2110      	movs	r1, #16
 8003bd4:	2002      	movs	r0, #2
 8003bd6:	f7fc fd47 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003bda:	2102      	movs	r1, #2
 8003bdc:	4891      	ldr	r0, [pc, #580]	; (8003e24 <menu+0x29b8>)
 8003bde:	f005 ff67 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b01      	cmp	r3, #1
 8003be6:	d115      	bne.n	8003c14 <menu+0x27a8>
 8003be8:	4b8f      	ldr	r3, [pc, #572]	; (8003e28 <menu+0x29bc>)
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	f083 0301 	eor.w	r3, r3, #1
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00e      	beq.n	8003c14 <menu+0x27a8>
			asagiValfTmr = asagiValfTmr + 1;
 8003bf6:	4b89      	ldr	r3, [pc, #548]	; (8003e1c <menu+0x29b0>)
 8003bf8:	781b      	ldrb	r3, [r3, #0]
 8003bfa:	3301      	adds	r3, #1
 8003bfc:	b2da      	uxtb	r2, r3
 8003bfe:	4b87      	ldr	r3, [pc, #540]	; (8003e1c <menu+0x29b0>)
 8003c00:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 8003c02:	4b86      	ldr	r3, [pc, #536]	; (8003e1c <menu+0x29b0>)
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	2b05      	cmp	r3, #5
 8003c08:	d902      	bls.n	8003c10 <menu+0x27a4>
				asagiValfTmr = 0;
 8003c0a:	4b84      	ldr	r3, [pc, #528]	; (8003e1c <menu+0x29b0>)
 8003c0c:	2200      	movs	r2, #0
 8003c0e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003c10:	f002 f9b6 	bl	8005f80 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c14:	2104      	movs	r1, #4
 8003c16:	4883      	ldr	r0, [pc, #524]	; (8003e24 <menu+0x29b8>)
 8003c18:	f005 ff4a 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d115      	bne.n	8003c4e <menu+0x27e2>
 8003c22:	4b81      	ldr	r3, [pc, #516]	; (8003e28 <menu+0x29bc>)
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	f083 0301 	eor.w	r3, r3, #1
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d00e      	beq.n	8003c4e <menu+0x27e2>
			asagiValfTmr = asagiValfTmr - 1;
 8003c30:	4b7a      	ldr	r3, [pc, #488]	; (8003e1c <menu+0x29b0>)
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	3b01      	subs	r3, #1
 8003c36:	b2da      	uxtb	r2, r3
 8003c38:	4b78      	ldr	r3, [pc, #480]	; (8003e1c <menu+0x29b0>)
 8003c3a:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003c3c:	4b77      	ldr	r3, [pc, #476]	; (8003e1c <menu+0x29b0>)
 8003c3e:	781b      	ldrb	r3, [r3, #0]
 8003c40:	2b06      	cmp	r3, #6
 8003c42:	d902      	bls.n	8003c4a <menu+0x27de>
		   		asagiValfTmr = 5;
 8003c44:	4b75      	ldr	r3, [pc, #468]	; (8003e1c <menu+0x29b0>)
 8003c46:	2205      	movs	r2, #5
 8003c48:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003c4a:	f002 f999 	bl	8005f80 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003c4e:	2108      	movs	r1, #8
 8003c50:	4874      	ldr	r0, [pc, #464]	; (8003e24 <menu+0x29b8>)
 8003c52:	f005 ff2d 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	d10d      	bne.n	8003c78 <menu+0x280c>
 8003c5c:	4b72      	ldr	r3, [pc, #456]	; (8003e28 <menu+0x29bc>)
 8003c5e:	781b      	ldrb	r3, [r3, #0]
 8003c60:	f083 0301 	eor.w	r3, r3, #1
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d006      	beq.n	8003c78 <menu+0x280c>
			eepromData[21] = asagiValfTmr;
 8003c6a:	4b6c      	ldr	r3, [pc, #432]	; (8003e1c <menu+0x29b0>)
 8003c6c:	781a      	ldrb	r2, [r3, #0]
 8003c6e:	4b6f      	ldr	r3, [pc, #444]	; (8003e2c <menu+0x29c0>)
 8003c70:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 8003c72:	4b6f      	ldr	r3, [pc, #444]	; (8003e30 <menu+0x29c4>)
 8003c74:	2201      	movs	r2, #1
 8003c76:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 8003c78:	4b6e      	ldr	r3, [pc, #440]	; (8003e34 <menu+0x29c8>)
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	2b18      	cmp	r3, #24
 8003c7e:	f040 809d 	bne.w	8003dbc <menu+0x2950>
		if(devirmeYuruyusSecim == 2) {
 8003c82:	4b6d      	ldr	r3, [pc, #436]	; (8003e38 <menu+0x29cc>)
 8003c84:	781b      	ldrb	r3, [r3, #0]
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d113      	bne.n	8003cb2 <menu+0x2846>
			if(dilSecim == 0) {
 8003c8a:	4b62      	ldr	r3, [pc, #392]	; (8003e14 <menu+0x29a8>)
 8003c8c:	781b      	ldrb	r3, [r3, #0]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d105      	bne.n	8003c9e <menu+0x2832>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 8003c92:	4a6a      	ldr	r2, [pc, #424]	; (8003e3c <menu+0x29d0>)
 8003c94:	2101      	movs	r1, #1
 8003c96:	2001      	movs	r0, #1
 8003c98:	f7fc fce6 	bl	8000668 <lcd_print>
 8003c9c:	e020      	b.n	8003ce0 <menu+0x2874>
			} else if(dilSecim == 1) {
 8003c9e:	4b5d      	ldr	r3, [pc, #372]	; (8003e14 <menu+0x29a8>)
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d11c      	bne.n	8003ce0 <menu+0x2874>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 8003ca6:	4a66      	ldr	r2, [pc, #408]	; (8003e40 <menu+0x29d4>)
 8003ca8:	2101      	movs	r1, #1
 8003caa:	2001      	movs	r0, #1
 8003cac:	f7fc fcdc 	bl	8000668 <lcd_print>
 8003cb0:	e016      	b.n	8003ce0 <menu+0x2874>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003cb2:	4b61      	ldr	r3, [pc, #388]	; (8003e38 <menu+0x29cc>)
 8003cb4:	781b      	ldrb	r3, [r3, #0]
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d112      	bne.n	8003ce0 <menu+0x2874>
			if(dilSecim == 0) {
 8003cba:	4b56      	ldr	r3, [pc, #344]	; (8003e14 <menu+0x29a8>)
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d105      	bne.n	8003cce <menu+0x2862>
				lcd_print(1, 1, "iLERi VALF SURE ");
 8003cc2:	4a60      	ldr	r2, [pc, #384]	; (8003e44 <menu+0x29d8>)
 8003cc4:	2101      	movs	r1, #1
 8003cc6:	2001      	movs	r0, #1
 8003cc8:	f7fc fcce 	bl	8000668 <lcd_print>
 8003ccc:	e008      	b.n	8003ce0 <menu+0x2874>
			} else if(dilSecim == 1) {
 8003cce:	4b51      	ldr	r3, [pc, #324]	; (8003e14 <menu+0x29a8>)
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	d104      	bne.n	8003ce0 <menu+0x2874>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 8003cd6:	4a5c      	ldr	r2, [pc, #368]	; (8003e48 <menu+0x29dc>)
 8003cd8:	2101      	movs	r1, #1
 8003cda:	2001      	movs	r0, #1
 8003cdc:	f7fc fcc4 	bl	8000668 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003ce0:	4b4c      	ldr	r3, [pc, #304]	; (8003e14 <menu+0x29a8>)
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d105      	bne.n	8003cf4 <menu+0x2888>
				lcd_print(2, 1, "Kac Saniye     ");
 8003ce8:	4a58      	ldr	r2, [pc, #352]	; (8003e4c <menu+0x29e0>)
 8003cea:	2101      	movs	r1, #1
 8003cec:	2002      	movs	r0, #2
 8003cee:	f7fc fcbb 	bl	8000668 <lcd_print>
 8003cf2:	e008      	b.n	8003d06 <menu+0x289a>
			} else if(dilSecim == 1) {
 8003cf4:	4b47      	ldr	r3, [pc, #284]	; (8003e14 <menu+0x29a8>)
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	d104      	bne.n	8003d06 <menu+0x289a>
				lcd_print(2, 1, "Second         ");
 8003cfc:	4a46      	ldr	r2, [pc, #280]	; (8003e18 <menu+0x29ac>)
 8003cfe:	2101      	movs	r1, #1
 8003d00:	2002      	movs	r0, #2
 8003d02:	f7fc fcb1 	bl	8000668 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 8003d06:	4b52      	ldr	r3, [pc, #328]	; (8003e50 <menu+0x29e4>)
 8003d08:	781b      	ldrb	r3, [r3, #0]
 8003d0a:	220a      	movs	r2, #10
 8003d0c:	4944      	ldr	r1, [pc, #272]	; (8003e20 <menu+0x29b4>)
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f008 fefa 	bl	800cb08 <itoa>
		lcd_print(2, 16, snum);
 8003d14:	4a42      	ldr	r2, [pc, #264]	; (8003e20 <menu+0x29b4>)
 8003d16:	2110      	movs	r1, #16
 8003d18:	2002      	movs	r0, #2
 8003d1a:	f7fc fca5 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d1e:	2102      	movs	r1, #2
 8003d20:	4840      	ldr	r0, [pc, #256]	; (8003e24 <menu+0x29b8>)
 8003d22:	f005 fec5 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8003d26:	4603      	mov	r3, r0
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d115      	bne.n	8003d58 <menu+0x28ec>
 8003d2c:	4b3e      	ldr	r3, [pc, #248]	; (8003e28 <menu+0x29bc>)
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	f083 0301 	eor.w	r3, r3, #1
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d00e      	beq.n	8003d58 <menu+0x28ec>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003d3a:	4b45      	ldr	r3, [pc, #276]	; (8003e50 <menu+0x29e4>)
 8003d3c:	781b      	ldrb	r3, [r3, #0]
 8003d3e:	3301      	adds	r3, #1
 8003d40:	b2da      	uxtb	r2, r3
 8003d42:	4b43      	ldr	r3, [pc, #268]	; (8003e50 <menu+0x29e4>)
 8003d44:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 8003d46:	4b42      	ldr	r3, [pc, #264]	; (8003e50 <menu+0x29e4>)
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	2b05      	cmp	r3, #5
 8003d4c:	d902      	bls.n	8003d54 <menu+0x28e8>
				devirmeYukariIleriTmr = 0;
 8003d4e:	4b40      	ldr	r3, [pc, #256]	; (8003e50 <menu+0x29e4>)
 8003d50:	2200      	movs	r2, #0
 8003d52:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003d54:	f002 f914 	bl	8005f80 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d58:	2104      	movs	r1, #4
 8003d5a:	4832      	ldr	r0, [pc, #200]	; (8003e24 <menu+0x29b8>)
 8003d5c:	f005 fea8 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d115      	bne.n	8003d92 <menu+0x2926>
 8003d66:	4b30      	ldr	r3, [pc, #192]	; (8003e28 <menu+0x29bc>)
 8003d68:	781b      	ldrb	r3, [r3, #0]
 8003d6a:	f083 0301 	eor.w	r3, r3, #1
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00e      	beq.n	8003d92 <menu+0x2926>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 8003d74:	4b36      	ldr	r3, [pc, #216]	; (8003e50 <menu+0x29e4>)
 8003d76:	781b      	ldrb	r3, [r3, #0]
 8003d78:	3b01      	subs	r3, #1
 8003d7a:	b2da      	uxtb	r2, r3
 8003d7c:	4b34      	ldr	r3, [pc, #208]	; (8003e50 <menu+0x29e4>)
 8003d7e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 8003d80:	4b33      	ldr	r3, [pc, #204]	; (8003e50 <menu+0x29e4>)
 8003d82:	781b      	ldrb	r3, [r3, #0]
 8003d84:	2b06      	cmp	r3, #6
 8003d86:	d902      	bls.n	8003d8e <menu+0x2922>
		   		devirmeYukariIleriTmr = 5;
 8003d88:	4b31      	ldr	r3, [pc, #196]	; (8003e50 <menu+0x29e4>)
 8003d8a:	2205      	movs	r2, #5
 8003d8c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003d8e:	f002 f8f7 	bl	8005f80 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003d92:	2108      	movs	r1, #8
 8003d94:	4823      	ldr	r0, [pc, #140]	; (8003e24 <menu+0x29b8>)
 8003d96:	f005 fe8b 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8003d9a:	4603      	mov	r3, r0
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d10d      	bne.n	8003dbc <menu+0x2950>
 8003da0:	4b21      	ldr	r3, [pc, #132]	; (8003e28 <menu+0x29bc>)
 8003da2:	781b      	ldrb	r3, [r3, #0]
 8003da4:	f083 0301 	eor.w	r3, r3, #1
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d006      	beq.n	8003dbc <menu+0x2950>
			eepromData[22] = devirmeYukariIleriTmr;
 8003dae:	4b28      	ldr	r3, [pc, #160]	; (8003e50 <menu+0x29e4>)
 8003db0:	781a      	ldrb	r2, [r3, #0]
 8003db2:	4b1e      	ldr	r3, [pc, #120]	; (8003e2c <menu+0x29c0>)
 8003db4:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 8003db6:	4b1e      	ldr	r3, [pc, #120]	; (8003e30 <menu+0x29c4>)
 8003db8:	2201      	movs	r2, #1
 8003dba:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003dbc:	4b1d      	ldr	r3, [pc, #116]	; (8003e34 <menu+0x29c8>)
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	2b19      	cmp	r3, #25
 8003dc2:	f040 80c4 	bne.w	8003f4e <menu+0x2ae2>
		if(devirmeYuruyusSecim == 2) {
 8003dc6:	4b1c      	ldr	r3, [pc, #112]	; (8003e38 <menu+0x29cc>)
 8003dc8:	781b      	ldrb	r3, [r3, #0]
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d113      	bne.n	8003df6 <menu+0x298a>
			if(dilSecim == 0) {
 8003dce:	4b11      	ldr	r3, [pc, #68]	; (8003e14 <menu+0x29a8>)
 8003dd0:	781b      	ldrb	r3, [r3, #0]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d105      	bne.n	8003de2 <menu+0x2976>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 8003dd6:	4a1f      	ldr	r2, [pc, #124]	; (8003e54 <menu+0x29e8>)
 8003dd8:	2101      	movs	r1, #1
 8003dda:	2001      	movs	r0, #1
 8003ddc:	f7fc fc44 	bl	8000668 <lcd_print>
 8003de0:	e047      	b.n	8003e72 <menu+0x2a06>
			} else if(dilSecim == 1) {
 8003de2:	4b0c      	ldr	r3, [pc, #48]	; (8003e14 <menu+0x29a8>)
 8003de4:	781b      	ldrb	r3, [r3, #0]
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d143      	bne.n	8003e72 <menu+0x2a06>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003dea:	4a1b      	ldr	r2, [pc, #108]	; (8003e58 <menu+0x29ec>)
 8003dec:	2101      	movs	r1, #1
 8003dee:	2001      	movs	r0, #1
 8003df0:	f7fc fc3a 	bl	8000668 <lcd_print>
 8003df4:	e03d      	b.n	8003e72 <menu+0x2a06>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8003df6:	4b10      	ldr	r3, [pc, #64]	; (8003e38 <menu+0x29cc>)
 8003df8:	781b      	ldrb	r3, [r3, #0]
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d139      	bne.n	8003e72 <menu+0x2a06>
			if(dilSecim == 0) {
 8003dfe:	4b05      	ldr	r3, [pc, #20]	; (8003e14 <menu+0x29a8>)
 8003e00:	781b      	ldrb	r3, [r3, #0]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d12c      	bne.n	8003e60 <menu+0x29f4>
				lcd_print(1, 1, "GERi VALF SURE  ");
 8003e06:	4a15      	ldr	r2, [pc, #84]	; (8003e5c <menu+0x29f0>)
 8003e08:	2101      	movs	r1, #1
 8003e0a:	2001      	movs	r0, #1
 8003e0c:	f7fc fc2c 	bl	8000668 <lcd_print>
 8003e10:	e02f      	b.n	8003e72 <menu+0x2a06>
 8003e12:	bf00      	nop
 8003e14:	20000c5a 	.word	0x20000c5a
 8003e18:	0800dfe4 	.word	0x0800dfe4
 8003e1c:	20000c4e 	.word	0x20000c4e
 8003e20:	20000bbc 	.word	0x20000bbc
 8003e24:	40010800 	.word	0x40010800
 8003e28:	20000c68 	.word	0x20000c68
 8003e2c:	20000b28 	.word	0x20000b28
 8003e30:	20000c65 	.word	0x20000c65
 8003e34:	20000c39 	.word	0x20000c39
 8003e38:	20000c48 	.word	0x20000c48
 8003e3c:	0800e01c 	.word	0x0800e01c
 8003e40:	0800e030 	.word	0x0800e030
 8003e44:	0800e044 	.word	0x0800e044
 8003e48:	0800e058 	.word	0x0800e058
 8003e4c:	0800dc70 	.word	0x0800dc70
 8003e50:	20000c4f 	.word	0x20000c4f
 8003e54:	0800e06c 	.word	0x0800e06c
 8003e58:	0800e080 	.word	0x0800e080
 8003e5c:	0800e094 	.word	0x0800e094
			} else if(dilSecim == 1) {
 8003e60:	4b73      	ldr	r3, [pc, #460]	; (8004030 <menu+0x2bc4>)
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d104      	bne.n	8003e72 <menu+0x2a06>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 8003e68:	4a72      	ldr	r2, [pc, #456]	; (8004034 <menu+0x2bc8>)
 8003e6a:	2101      	movs	r1, #1
 8003e6c:	2001      	movs	r0, #1
 8003e6e:	f7fc fbfb 	bl	8000668 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 8003e72:	4b6f      	ldr	r3, [pc, #444]	; (8004030 <menu+0x2bc4>)
 8003e74:	781b      	ldrb	r3, [r3, #0]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d105      	bne.n	8003e86 <menu+0x2a1a>
				lcd_print(2, 1, "Kac Saniye     ");
 8003e7a:	4a6f      	ldr	r2, [pc, #444]	; (8004038 <menu+0x2bcc>)
 8003e7c:	2101      	movs	r1, #1
 8003e7e:	2002      	movs	r0, #2
 8003e80:	f7fc fbf2 	bl	8000668 <lcd_print>
 8003e84:	e008      	b.n	8003e98 <menu+0x2a2c>
			} else if(dilSecim == 1) {
 8003e86:	4b6a      	ldr	r3, [pc, #424]	; (8004030 <menu+0x2bc4>)
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d104      	bne.n	8003e98 <menu+0x2a2c>
				lcd_print(2, 1, "Second         ");
 8003e8e:	4a6b      	ldr	r2, [pc, #428]	; (800403c <menu+0x2bd0>)
 8003e90:	2101      	movs	r1, #1
 8003e92:	2002      	movs	r0, #2
 8003e94:	f7fc fbe8 	bl	8000668 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 8003e98:	4b69      	ldr	r3, [pc, #420]	; (8004040 <menu+0x2bd4>)
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	220a      	movs	r2, #10
 8003e9e:	4969      	ldr	r1, [pc, #420]	; (8004044 <menu+0x2bd8>)
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	f008 fe31 	bl	800cb08 <itoa>
		lcd_print(2,16,snum);
 8003ea6:	4a67      	ldr	r2, [pc, #412]	; (8004044 <menu+0x2bd8>)
 8003ea8:	2110      	movs	r1, #16
 8003eaa:	2002      	movs	r0, #2
 8003eac:	f7fc fbdc 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003eb0:	2102      	movs	r1, #2
 8003eb2:	4865      	ldr	r0, [pc, #404]	; (8004048 <menu+0x2bdc>)
 8003eb4:	f005 fdfc 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b01      	cmp	r3, #1
 8003ebc:	d115      	bne.n	8003eea <menu+0x2a7e>
 8003ebe:	4b63      	ldr	r3, [pc, #396]	; (800404c <menu+0x2be0>)
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	f083 0301 	eor.w	r3, r3, #1
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d00e      	beq.n	8003eea <menu+0x2a7e>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8003ecc:	4b5c      	ldr	r3, [pc, #368]	; (8004040 <menu+0x2bd4>)
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	b2da      	uxtb	r2, r3
 8003ed4:	4b5a      	ldr	r3, [pc, #360]	; (8004040 <menu+0x2bd4>)
 8003ed6:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003ed8:	4b59      	ldr	r3, [pc, #356]	; (8004040 <menu+0x2bd4>)
 8003eda:	781b      	ldrb	r3, [r3, #0]
 8003edc:	2b05      	cmp	r3, #5
 8003ede:	d902      	bls.n	8003ee6 <menu+0x2a7a>
				devirmeAsagiGeriTmr = 0;
 8003ee0:	4b57      	ldr	r3, [pc, #348]	; (8004040 <menu+0x2bd4>)
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003ee6:	f002 f84b 	bl	8005f80 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003eea:	2104      	movs	r1, #4
 8003eec:	4856      	ldr	r0, [pc, #344]	; (8004048 <menu+0x2bdc>)
 8003eee:	f005 fddf 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d115      	bne.n	8003f24 <menu+0x2ab8>
 8003ef8:	4b54      	ldr	r3, [pc, #336]	; (800404c <menu+0x2be0>)
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	f083 0301 	eor.w	r3, r3, #1
 8003f00:	b2db      	uxtb	r3, r3
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00e      	beq.n	8003f24 <menu+0x2ab8>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 8003f06:	4b4e      	ldr	r3, [pc, #312]	; (8004040 <menu+0x2bd4>)
 8003f08:	781b      	ldrb	r3, [r3, #0]
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	b2da      	uxtb	r2, r3
 8003f0e:	4b4c      	ldr	r3, [pc, #304]	; (8004040 <menu+0x2bd4>)
 8003f10:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 8003f12:	4b4b      	ldr	r3, [pc, #300]	; (8004040 <menu+0x2bd4>)
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	2b06      	cmp	r3, #6
 8003f18:	d902      	bls.n	8003f20 <menu+0x2ab4>
		   		devirmeAsagiGeriTmr = 5;
 8003f1a:	4b49      	ldr	r3, [pc, #292]	; (8004040 <menu+0x2bd4>)
 8003f1c:	2205      	movs	r2, #5
 8003f1e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003f20:	f002 f82e 	bl	8005f80 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003f24:	2108      	movs	r1, #8
 8003f26:	4848      	ldr	r0, [pc, #288]	; (8004048 <menu+0x2bdc>)
 8003f28:	f005 fdc2 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d10d      	bne.n	8003f4e <menu+0x2ae2>
 8003f32:	4b46      	ldr	r3, [pc, #280]	; (800404c <menu+0x2be0>)
 8003f34:	781b      	ldrb	r3, [r3, #0]
 8003f36:	f083 0301 	eor.w	r3, r3, #1
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d006      	beq.n	8003f4e <menu+0x2ae2>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003f40:	4b3f      	ldr	r3, [pc, #252]	; (8004040 <menu+0x2bd4>)
 8003f42:	781a      	ldrb	r2, [r3, #0]
 8003f44:	4b42      	ldr	r3, [pc, #264]	; (8004050 <menu+0x2be4>)
 8003f46:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 8003f48:	4b42      	ldr	r3, [pc, #264]	; (8004054 <menu+0x2be8>)
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 8003f4e:	4b42      	ldr	r3, [pc, #264]	; (8004058 <menu+0x2bec>)
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	2b1a      	cmp	r3, #26
 8003f54:	f040 80ec 	bne.w	8004130 <menu+0x2cc4>
		if(dilSecim == 0) {
 8003f58:	4b35      	ldr	r3, [pc, #212]	; (8004030 <menu+0x2bc4>)
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d105      	bne.n	8003f6c <menu+0x2b00>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 8003f60:	4a3e      	ldr	r2, [pc, #248]	; (800405c <menu+0x2bf0>)
 8003f62:	2101      	movs	r1, #1
 8003f64:	2001      	movs	r0, #1
 8003f66:	f7fc fb7f 	bl	8000668 <lcd_print>
 8003f6a:	e008      	b.n	8003f7e <menu+0x2b12>
		} else if(dilSecim == 1) {
 8003f6c:	4b30      	ldr	r3, [pc, #192]	; (8004030 <menu+0x2bc4>)
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	d104      	bne.n	8003f7e <menu+0x2b12>
			lcd_print(1, 1, "WORKING TIME    ");
 8003f74:	4a3a      	ldr	r2, [pc, #232]	; (8004060 <menu+0x2bf4>)
 8003f76:	2101      	movs	r1, #1
 8003f78:	2001      	movs	r0, #1
 8003f7a:	f7fc fb75 	bl	8000668 <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 8003f7e:	4b39      	ldr	r3, [pc, #228]	; (8004064 <menu+0x2bf8>)
 8003f80:	781b      	ldrb	r3, [r3, #0]
 8003f82:	2b63      	cmp	r3, #99	; 0x63
 8003f84:	d91e      	bls.n	8003fc4 <menu+0x2b58>
			if(dilSecim == 0) {
 8003f86:	4b2a      	ldr	r3, [pc, #168]	; (8004030 <menu+0x2bc4>)
 8003f88:	781b      	ldrb	r3, [r3, #0]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d104      	bne.n	8003f98 <menu+0x2b2c>
				lcd_print(2, 1, "Kac Saniye     ");
 8003f8e:	4a2a      	ldr	r2, [pc, #168]	; (8004038 <menu+0x2bcc>)
 8003f90:	2101      	movs	r1, #1
 8003f92:	2002      	movs	r0, #2
 8003f94:	f7fc fb68 	bl	8000668 <lcd_print>
			}
			if(dilSecim == 1) {
 8003f98:	4b25      	ldr	r3, [pc, #148]	; (8004030 <menu+0x2bc4>)
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d104      	bne.n	8003faa <menu+0x2b3e>
				lcd_print(2, 1, "Second         ");
 8003fa0:	4a26      	ldr	r2, [pc, #152]	; (800403c <menu+0x2bd0>)
 8003fa2:	2101      	movs	r1, #1
 8003fa4:	2002      	movs	r0, #2
 8003fa6:	f7fc fb5f 	bl	8000668 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003faa:	4b2e      	ldr	r3, [pc, #184]	; (8004064 <menu+0x2bf8>)
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	220a      	movs	r2, #10
 8003fb0:	4924      	ldr	r1, [pc, #144]	; (8004044 <menu+0x2bd8>)
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f008 fda8 	bl	800cb08 <itoa>
			lcd_print(2,14,snum);
 8003fb8:	4a22      	ldr	r2, [pc, #136]	; (8004044 <menu+0x2bd8>)
 8003fba:	210e      	movs	r1, #14
 8003fbc:	2002      	movs	r0, #2
 8003fbe:	f7fc fb53 	bl	8000668 <lcd_print>
 8003fc2:	e066      	b.n	8004092 <menu+0x2c26>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 8003fc4:	4b27      	ldr	r3, [pc, #156]	; (8004064 <menu+0x2bf8>)
 8003fc6:	781b      	ldrb	r3, [r3, #0]
 8003fc8:	2b09      	cmp	r3, #9
 8003fca:	d923      	bls.n	8004014 <menu+0x2ba8>
 8003fcc:	4b25      	ldr	r3, [pc, #148]	; (8004064 <menu+0x2bf8>)
 8003fce:	781b      	ldrb	r3, [r3, #0]
 8003fd0:	2b63      	cmp	r3, #99	; 0x63
 8003fd2:	d81f      	bhi.n	8004014 <menu+0x2ba8>
			if(dilSecim == 0) {
 8003fd4:	4b16      	ldr	r3, [pc, #88]	; (8004030 <menu+0x2bc4>)
 8003fd6:	781b      	ldrb	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d105      	bne.n	8003fe8 <menu+0x2b7c>
				lcd_print(2, 1, "Kac Saniye     ");
 8003fdc:	4a16      	ldr	r2, [pc, #88]	; (8004038 <menu+0x2bcc>)
 8003fde:	2101      	movs	r1, #1
 8003fe0:	2002      	movs	r0, #2
 8003fe2:	f7fc fb41 	bl	8000668 <lcd_print>
 8003fe6:	e008      	b.n	8003ffa <menu+0x2b8e>
			} else if(dilSecim == 1) {
 8003fe8:	4b11      	ldr	r3, [pc, #68]	; (8004030 <menu+0x2bc4>)
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	2b01      	cmp	r3, #1
 8003fee:	d104      	bne.n	8003ffa <menu+0x2b8e>
				lcd_print(2, 1, "Second         ");
 8003ff0:	4a12      	ldr	r2, [pc, #72]	; (800403c <menu+0x2bd0>)
 8003ff2:	2101      	movs	r1, #1
 8003ff4:	2002      	movs	r0, #2
 8003ff6:	f7fc fb37 	bl	8000668 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003ffa:	4b1a      	ldr	r3, [pc, #104]	; (8004064 <menu+0x2bf8>)
 8003ffc:	781b      	ldrb	r3, [r3, #0]
 8003ffe:	220a      	movs	r2, #10
 8004000:	4910      	ldr	r1, [pc, #64]	; (8004044 <menu+0x2bd8>)
 8004002:	4618      	mov	r0, r3
 8004004:	f008 fd80 	bl	800cb08 <itoa>
			lcd_print(2, 15, snum);
 8004008:	4a0e      	ldr	r2, [pc, #56]	; (8004044 <menu+0x2bd8>)
 800400a:	210f      	movs	r1, #15
 800400c:	2002      	movs	r0, #2
 800400e:	f7fc fb2b 	bl	8000668 <lcd_print>
 8004012:	e03e      	b.n	8004092 <menu+0x2c26>
		} else if(makineCalismaTmr <=  9) {
 8004014:	4b13      	ldr	r3, [pc, #76]	; (8004064 <menu+0x2bf8>)
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	2b09      	cmp	r3, #9
 800401a:	d83a      	bhi.n	8004092 <menu+0x2c26>
			if(dilSecim == 0) {
 800401c:	4b04      	ldr	r3, [pc, #16]	; (8004030 <menu+0x2bc4>)
 800401e:	781b      	ldrb	r3, [r3, #0]
 8004020:	2b00      	cmp	r3, #0
 8004022:	d121      	bne.n	8004068 <menu+0x2bfc>
				lcd_print(2, 1, "Kac Saniye     ");
 8004024:	4a04      	ldr	r2, [pc, #16]	; (8004038 <menu+0x2bcc>)
 8004026:	2101      	movs	r1, #1
 8004028:	2002      	movs	r0, #2
 800402a:	f7fc fb1d 	bl	8000668 <lcd_print>
 800402e:	e024      	b.n	800407a <menu+0x2c0e>
 8004030:	20000c5a 	.word	0x20000c5a
 8004034:	0800e0a8 	.word	0x0800e0a8
 8004038:	0800dc70 	.word	0x0800dc70
 800403c:	0800dfe4 	.word	0x0800dfe4
 8004040:	20000c50 	.word	0x20000c50
 8004044:	20000bbc 	.word	0x20000bbc
 8004048:	40010800 	.word	0x40010800
 800404c:	20000c68 	.word	0x20000c68
 8004050:	20000b28 	.word	0x20000b28
 8004054:	20000c65 	.word	0x20000c65
 8004058:	20000c39 	.word	0x20000c39
 800405c:	0800e0bc 	.word	0x0800e0bc
 8004060:	0800e0d0 	.word	0x0800e0d0
 8004064:	20000c51 	.word	0x20000c51
			} else if(dilSecim == 1) {
 8004068:	4b8f      	ldr	r3, [pc, #572]	; (80042a8 <menu+0x2e3c>)
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	2b01      	cmp	r3, #1
 800406e:	d104      	bne.n	800407a <menu+0x2c0e>
				lcd_print(2, 1, "Second         ");
 8004070:	4a8e      	ldr	r2, [pc, #568]	; (80042ac <menu+0x2e40>)
 8004072:	2101      	movs	r1, #1
 8004074:	2002      	movs	r0, #2
 8004076:	f7fc faf7 	bl	8000668 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 800407a:	4b8d      	ldr	r3, [pc, #564]	; (80042b0 <menu+0x2e44>)
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	220a      	movs	r2, #10
 8004080:	498c      	ldr	r1, [pc, #560]	; (80042b4 <menu+0x2e48>)
 8004082:	4618      	mov	r0, r3
 8004084:	f008 fd40 	bl	800cb08 <itoa>
			lcd_print(2, 16, snum);
 8004088:	4a8a      	ldr	r2, [pc, #552]	; (80042b4 <menu+0x2e48>)
 800408a:	2110      	movs	r1, #16
 800408c:	2002      	movs	r0, #2
 800408e:	f7fc faeb 	bl	8000668 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004092:	2102      	movs	r1, #2
 8004094:	4888      	ldr	r0, [pc, #544]	; (80042b8 <menu+0x2e4c>)
 8004096:	f005 fd0b 	bl	8009ab0 <HAL_GPIO_ReadPin>
 800409a:	4603      	mov	r3, r0
 800409c:	2b01      	cmp	r3, #1
 800409e:	d115      	bne.n	80040cc <menu+0x2c60>
 80040a0:	4b86      	ldr	r3, [pc, #536]	; (80042bc <menu+0x2e50>)
 80040a2:	781b      	ldrb	r3, [r3, #0]
 80040a4:	f083 0301 	eor.w	r3, r3, #1
 80040a8:	b2db      	uxtb	r3, r3
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00e      	beq.n	80040cc <menu+0x2c60>
			makineCalismaTmr = makineCalismaTmr + 1;
 80040ae:	4b80      	ldr	r3, [pc, #512]	; (80042b0 <menu+0x2e44>)
 80040b0:	781b      	ldrb	r3, [r3, #0]
 80040b2:	3301      	adds	r3, #1
 80040b4:	b2da      	uxtb	r2, r3
 80040b6:	4b7e      	ldr	r3, [pc, #504]	; (80042b0 <menu+0x2e44>)
 80040b8:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 80040ba:	4b7d      	ldr	r3, [pc, #500]	; (80042b0 <menu+0x2e44>)
 80040bc:	781b      	ldrb	r3, [r3, #0]
 80040be:	2bb4      	cmp	r3, #180	; 0xb4
 80040c0:	d902      	bls.n	80040c8 <menu+0x2c5c>
				makineCalismaTmr = 0;
 80040c2:	4b7b      	ldr	r3, [pc, #492]	; (80042b0 <menu+0x2e44>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80040c8:	f001 ff5a 	bl	8005f80 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80040cc:	2104      	movs	r1, #4
 80040ce:	487a      	ldr	r0, [pc, #488]	; (80042b8 <menu+0x2e4c>)
 80040d0:	f005 fcee 	bl	8009ab0 <HAL_GPIO_ReadPin>
 80040d4:	4603      	mov	r3, r0
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d115      	bne.n	8004106 <menu+0x2c9a>
 80040da:	4b78      	ldr	r3, [pc, #480]	; (80042bc <menu+0x2e50>)
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	f083 0301 	eor.w	r3, r3, #1
 80040e2:	b2db      	uxtb	r3, r3
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d00e      	beq.n	8004106 <menu+0x2c9a>
			makineCalismaTmr = makineCalismaTmr - 1;
 80040e8:	4b71      	ldr	r3, [pc, #452]	; (80042b0 <menu+0x2e44>)
 80040ea:	781b      	ldrb	r3, [r3, #0]
 80040ec:	3b01      	subs	r3, #1
 80040ee:	b2da      	uxtb	r2, r3
 80040f0:	4b6f      	ldr	r3, [pc, #444]	; (80042b0 <menu+0x2e44>)
 80040f2:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 80040f4:	4b6e      	ldr	r3, [pc, #440]	; (80042b0 <menu+0x2e44>)
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	2bb5      	cmp	r3, #181	; 0xb5
 80040fa:	d902      	bls.n	8004102 <menu+0x2c96>
		   		makineCalismaTmr = 180;
 80040fc:	4b6c      	ldr	r3, [pc, #432]	; (80042b0 <menu+0x2e44>)
 80040fe:	22b4      	movs	r2, #180	; 0xb4
 8004100:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004102:	f001 ff3d 	bl	8005f80 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004106:	2108      	movs	r1, #8
 8004108:	486b      	ldr	r0, [pc, #428]	; (80042b8 <menu+0x2e4c>)
 800410a:	f005 fcd1 	bl	8009ab0 <HAL_GPIO_ReadPin>
 800410e:	4603      	mov	r3, r0
 8004110:	2b01      	cmp	r3, #1
 8004112:	d10d      	bne.n	8004130 <menu+0x2cc4>
 8004114:	4b69      	ldr	r3, [pc, #420]	; (80042bc <menu+0x2e50>)
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	f083 0301 	eor.w	r3, r3, #1
 800411c:	b2db      	uxtb	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d006      	beq.n	8004130 <menu+0x2cc4>
			eepromData[24] = makineCalismaTmr;
 8004122:	4b63      	ldr	r3, [pc, #396]	; (80042b0 <menu+0x2e44>)
 8004124:	781a      	ldrb	r2, [r3, #0]
 8004126:	4b66      	ldr	r3, [pc, #408]	; (80042c0 <menu+0x2e54>)
 8004128:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 800412a:	4b66      	ldr	r3, [pc, #408]	; (80042c4 <menu+0x2e58>)
 800412c:	2201      	movs	r2, #1
 800412e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8004130:	4b65      	ldr	r3, [pc, #404]	; (80042c8 <menu+0x2e5c>)
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	2b1b      	cmp	r3, #27
 8004136:	f040 8083 	bne.w	8004240 <menu+0x2dd4>
		lcd_print(1, 1, "BUZZER          ");
 800413a:	4a64      	ldr	r2, [pc, #400]	; (80042cc <menu+0x2e60>)
 800413c:	2101      	movs	r1, #1
 800413e:	2001      	movs	r0, #1
 8004140:	f7fc fa92 	bl	8000668 <lcd_print>

		if(buzzer == 0) {
 8004144:	4b62      	ldr	r3, [pc, #392]	; (80042d0 <menu+0x2e64>)
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d113      	bne.n	8004174 <menu+0x2d08>
			if(dilSecim == 0) {
 800414c:	4b56      	ldr	r3, [pc, #344]	; (80042a8 <menu+0x2e3c>)
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d105      	bne.n	8004160 <menu+0x2cf4>
				lcd_print(2, 1, "Pasif           ");
 8004154:	4a5f      	ldr	r2, [pc, #380]	; (80042d4 <menu+0x2e68>)
 8004156:	2101      	movs	r1, #1
 8004158:	2002      	movs	r0, #2
 800415a:	f7fc fa85 	bl	8000668 <lcd_print>
 800415e:	e020      	b.n	80041a2 <menu+0x2d36>
			} else if(dilSecim == 1) {
 8004160:	4b51      	ldr	r3, [pc, #324]	; (80042a8 <menu+0x2e3c>)
 8004162:	781b      	ldrb	r3, [r3, #0]
 8004164:	2b01      	cmp	r3, #1
 8004166:	d11c      	bne.n	80041a2 <menu+0x2d36>
				lcd_print(2, 1, "Passive         ");
 8004168:	4a5b      	ldr	r2, [pc, #364]	; (80042d8 <menu+0x2e6c>)
 800416a:	2101      	movs	r1, #1
 800416c:	2002      	movs	r0, #2
 800416e:	f7fc fa7b 	bl	8000668 <lcd_print>
 8004172:	e016      	b.n	80041a2 <menu+0x2d36>
			}
		} else if(buzzer == 1) {
 8004174:	4b56      	ldr	r3, [pc, #344]	; (80042d0 <menu+0x2e64>)
 8004176:	781b      	ldrb	r3, [r3, #0]
 8004178:	2b01      	cmp	r3, #1
 800417a:	d112      	bne.n	80041a2 <menu+0x2d36>
			if(dilSecim == 0) {
 800417c:	4b4a      	ldr	r3, [pc, #296]	; (80042a8 <menu+0x2e3c>)
 800417e:	781b      	ldrb	r3, [r3, #0]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d105      	bne.n	8004190 <menu+0x2d24>
				lcd_print(2, 1, "Aktif           ");
 8004184:	4a55      	ldr	r2, [pc, #340]	; (80042dc <menu+0x2e70>)
 8004186:	2101      	movs	r1, #1
 8004188:	2002      	movs	r0, #2
 800418a:	f7fc fa6d 	bl	8000668 <lcd_print>
 800418e:	e008      	b.n	80041a2 <menu+0x2d36>
			} else if(dilSecim == 1) {
 8004190:	4b45      	ldr	r3, [pc, #276]	; (80042a8 <menu+0x2e3c>)
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d104      	bne.n	80041a2 <menu+0x2d36>
				lcd_print(2, 1, "Active          ");
 8004198:	4a51      	ldr	r2, [pc, #324]	; (80042e0 <menu+0x2e74>)
 800419a:	2101      	movs	r1, #1
 800419c:	2002      	movs	r0, #2
 800419e:	f7fc fa63 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80041a2:	2102      	movs	r1, #2
 80041a4:	4844      	ldr	r0, [pc, #272]	; (80042b8 <menu+0x2e4c>)
 80041a6:	f005 fc83 	bl	8009ab0 <HAL_GPIO_ReadPin>
 80041aa:	4603      	mov	r3, r0
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d115      	bne.n	80041dc <menu+0x2d70>
 80041b0:	4b42      	ldr	r3, [pc, #264]	; (80042bc <menu+0x2e50>)
 80041b2:	781b      	ldrb	r3, [r3, #0]
 80041b4:	f083 0301 	eor.w	r3, r3, #1
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00e      	beq.n	80041dc <menu+0x2d70>
			buzzer = buzzer + 1;
 80041be:	4b44      	ldr	r3, [pc, #272]	; (80042d0 <menu+0x2e64>)
 80041c0:	781b      	ldrb	r3, [r3, #0]
 80041c2:	3301      	adds	r3, #1
 80041c4:	b2da      	uxtb	r2, r3
 80041c6:	4b42      	ldr	r3, [pc, #264]	; (80042d0 <menu+0x2e64>)
 80041c8:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 80041ca:	4b41      	ldr	r3, [pc, #260]	; (80042d0 <menu+0x2e64>)
 80041cc:	781b      	ldrb	r3, [r3, #0]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d902      	bls.n	80041d8 <menu+0x2d6c>
				buzzer = 0;
 80041d2:	4b3f      	ldr	r3, [pc, #252]	; (80042d0 <menu+0x2e64>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80041d8:	f001 fed2 	bl	8005f80 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80041dc:	2104      	movs	r1, #4
 80041de:	4836      	ldr	r0, [pc, #216]	; (80042b8 <menu+0x2e4c>)
 80041e0:	f005 fc66 	bl	8009ab0 <HAL_GPIO_ReadPin>
 80041e4:	4603      	mov	r3, r0
 80041e6:	2b01      	cmp	r3, #1
 80041e8:	d115      	bne.n	8004216 <menu+0x2daa>
 80041ea:	4b34      	ldr	r3, [pc, #208]	; (80042bc <menu+0x2e50>)
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	f083 0301 	eor.w	r3, r3, #1
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d00e      	beq.n	8004216 <menu+0x2daa>
			buzzer = buzzer - 1;
 80041f8:	4b35      	ldr	r3, [pc, #212]	; (80042d0 <menu+0x2e64>)
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	3b01      	subs	r3, #1
 80041fe:	b2da      	uxtb	r2, r3
 8004200:	4b33      	ldr	r3, [pc, #204]	; (80042d0 <menu+0x2e64>)
 8004202:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 8004204:	4b32      	ldr	r3, [pc, #200]	; (80042d0 <menu+0x2e64>)
 8004206:	781b      	ldrb	r3, [r3, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d002      	beq.n	8004212 <menu+0x2da6>
		   		buzzer = 1;
 800420c:	4b30      	ldr	r3, [pc, #192]	; (80042d0 <menu+0x2e64>)
 800420e:	2201      	movs	r2, #1
 8004210:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004212:	f001 feb5 	bl	8005f80 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004216:	2108      	movs	r1, #8
 8004218:	4827      	ldr	r0, [pc, #156]	; (80042b8 <menu+0x2e4c>)
 800421a:	f005 fc49 	bl	8009ab0 <HAL_GPIO_ReadPin>
 800421e:	4603      	mov	r3, r0
 8004220:	2b01      	cmp	r3, #1
 8004222:	d10d      	bne.n	8004240 <menu+0x2dd4>
 8004224:	4b25      	ldr	r3, [pc, #148]	; (80042bc <menu+0x2e50>)
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	f083 0301 	eor.w	r3, r3, #1
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d006      	beq.n	8004240 <menu+0x2dd4>
			eepromData[25] = buzzer;
 8004232:	4b27      	ldr	r3, [pc, #156]	; (80042d0 <menu+0x2e64>)
 8004234:	781a      	ldrb	r2, [r3, #0]
 8004236:	4b22      	ldr	r3, [pc, #136]	; (80042c0 <menu+0x2e54>)
 8004238:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 800423a:	4b22      	ldr	r3, [pc, #136]	; (80042c4 <menu+0x2e58>)
 800423c:	2201      	movs	r2, #1
 800423e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8004240:	4b21      	ldr	r3, [pc, #132]	; (80042c8 <menu+0x2e5c>)
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	2b1c      	cmp	r3, #28
 8004246:	f040 80ab 	bne.w	80043a0 <menu+0x2f34>
		calismaSayModu = 0;
 800424a:	4b26      	ldr	r3, [pc, #152]	; (80042e4 <menu+0x2e78>)
 800424c:	2200      	movs	r2, #0
 800424e:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 8004250:	4a25      	ldr	r2, [pc, #148]	; (80042e8 <menu+0x2e7c>)
 8004252:	2101      	movs	r1, #1
 8004254:	2001      	movs	r0, #1
 8004256:	f7fc fa07 	bl	8000668 <lcd_print>

		if(demoMode == 0) {
 800425a:	4b24      	ldr	r3, [pc, #144]	; (80042ec <menu+0x2e80>)
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d113      	bne.n	800428a <menu+0x2e1e>
			if(dilSecim == 0) {
 8004262:	4b11      	ldr	r3, [pc, #68]	; (80042a8 <menu+0x2e3c>)
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d105      	bne.n	8004276 <menu+0x2e0a>
				lcd_print(2, 1, "Pasif           ");
 800426a:	4a1a      	ldr	r2, [pc, #104]	; (80042d4 <menu+0x2e68>)
 800426c:	2101      	movs	r1, #1
 800426e:	2002      	movs	r0, #2
 8004270:	f7fc f9fa 	bl	8000668 <lcd_print>
 8004274:	e045      	b.n	8004302 <menu+0x2e96>
			} else if(dilSecim == 1) {
 8004276:	4b0c      	ldr	r3, [pc, #48]	; (80042a8 <menu+0x2e3c>)
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	2b01      	cmp	r3, #1
 800427c:	d141      	bne.n	8004302 <menu+0x2e96>
				lcd_print(2, 1, "Passive         ");
 800427e:	4a16      	ldr	r2, [pc, #88]	; (80042d8 <menu+0x2e6c>)
 8004280:	2101      	movs	r1, #1
 8004282:	2002      	movs	r0, #2
 8004284:	f7fc f9f0 	bl	8000668 <lcd_print>
 8004288:	e03b      	b.n	8004302 <menu+0x2e96>
			}
		} else if(demoMode == 1) {
 800428a:	4b18      	ldr	r3, [pc, #96]	; (80042ec <menu+0x2e80>)
 800428c:	781b      	ldrb	r3, [r3, #0]
 800428e:	2b01      	cmp	r3, #1
 8004290:	d137      	bne.n	8004302 <menu+0x2e96>
			if(dilSecim == 0){
 8004292:	4b05      	ldr	r3, [pc, #20]	; (80042a8 <menu+0x2e3c>)
 8004294:	781b      	ldrb	r3, [r3, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d12a      	bne.n	80042f0 <menu+0x2e84>
				lcd_print(2, 1, "Aktif           ");
 800429a:	4a10      	ldr	r2, [pc, #64]	; (80042dc <menu+0x2e70>)
 800429c:	2101      	movs	r1, #1
 800429e:	2002      	movs	r0, #2
 80042a0:	f7fc f9e2 	bl	8000668 <lcd_print>
 80042a4:	e02d      	b.n	8004302 <menu+0x2e96>
 80042a6:	bf00      	nop
 80042a8:	20000c5a 	.word	0x20000c5a
 80042ac:	0800dfe4 	.word	0x0800dfe4
 80042b0:	20000c51 	.word	0x20000c51
 80042b4:	20000bbc 	.word	0x20000bbc
 80042b8:	40010800 	.word	0x40010800
 80042bc:	20000c68 	.word	0x20000c68
 80042c0:	20000b28 	.word	0x20000b28
 80042c4:	20000c65 	.word	0x20000c65
 80042c8:	20000c39 	.word	0x20000c39
 80042cc:	0800e0e4 	.word	0x0800e0e4
 80042d0:	20000c55 	.word	0x20000c55
 80042d4:	0800da0c 	.word	0x0800da0c
 80042d8:	0800da20 	.word	0x0800da20
 80042dc:	0800da6c 	.word	0x0800da6c
 80042e0:	0800da80 	.word	0x0800da80
 80042e4:	20000c59 	.word	0x20000c59
 80042e8:	0800e0f8 	.word	0x0800e0f8
 80042ec:	20000c57 	.word	0x20000c57
			} else if(dilSecim == 1) {
 80042f0:	4b71      	ldr	r3, [pc, #452]	; (80044b8 <menu+0x304c>)
 80042f2:	781b      	ldrb	r3, [r3, #0]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d104      	bne.n	8004302 <menu+0x2e96>
				lcd_print(2, 1, "Active          ");
 80042f8:	4a70      	ldr	r2, [pc, #448]	; (80044bc <menu+0x3050>)
 80042fa:	2101      	movs	r1, #1
 80042fc:	2002      	movs	r0, #2
 80042fe:	f7fc f9b3 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004302:	2102      	movs	r1, #2
 8004304:	486e      	ldr	r0, [pc, #440]	; (80044c0 <menu+0x3054>)
 8004306:	f005 fbd3 	bl	8009ab0 <HAL_GPIO_ReadPin>
 800430a:	4603      	mov	r3, r0
 800430c:	2b01      	cmp	r3, #1
 800430e:	d115      	bne.n	800433c <menu+0x2ed0>
 8004310:	4b6c      	ldr	r3, [pc, #432]	; (80044c4 <menu+0x3058>)
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	f083 0301 	eor.w	r3, r3, #1
 8004318:	b2db      	uxtb	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00e      	beq.n	800433c <menu+0x2ed0>
			demoMode = demoMode + 1;
 800431e:	4b6a      	ldr	r3, [pc, #424]	; (80044c8 <menu+0x305c>)
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	3301      	adds	r3, #1
 8004324:	b2da      	uxtb	r2, r3
 8004326:	4b68      	ldr	r3, [pc, #416]	; (80044c8 <menu+0x305c>)
 8004328:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 800432a:	4b67      	ldr	r3, [pc, #412]	; (80044c8 <menu+0x305c>)
 800432c:	781b      	ldrb	r3, [r3, #0]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d902      	bls.n	8004338 <menu+0x2ecc>
				demoMode = 0;
 8004332:	4b65      	ldr	r3, [pc, #404]	; (80044c8 <menu+0x305c>)
 8004334:	2200      	movs	r2, #0
 8004336:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004338:	f001 fe22 	bl	8005f80 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800433c:	2104      	movs	r1, #4
 800433e:	4860      	ldr	r0, [pc, #384]	; (80044c0 <menu+0x3054>)
 8004340:	f005 fbb6 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8004344:	4603      	mov	r3, r0
 8004346:	2b01      	cmp	r3, #1
 8004348:	d115      	bne.n	8004376 <menu+0x2f0a>
 800434a:	4b5e      	ldr	r3, [pc, #376]	; (80044c4 <menu+0x3058>)
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	f083 0301 	eor.w	r3, r3, #1
 8004352:	b2db      	uxtb	r3, r3
 8004354:	2b00      	cmp	r3, #0
 8004356:	d00e      	beq.n	8004376 <menu+0x2f0a>
			demoMode = demoMode - 1;
 8004358:	4b5b      	ldr	r3, [pc, #364]	; (80044c8 <menu+0x305c>)
 800435a:	781b      	ldrb	r3, [r3, #0]
 800435c:	3b01      	subs	r3, #1
 800435e:	b2da      	uxtb	r2, r3
 8004360:	4b59      	ldr	r3, [pc, #356]	; (80044c8 <menu+0x305c>)
 8004362:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 8004364:	4b58      	ldr	r3, [pc, #352]	; (80044c8 <menu+0x305c>)
 8004366:	781b      	ldrb	r3, [r3, #0]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d002      	beq.n	8004372 <menu+0x2f06>
		   		demoMode = 1;
 800436c:	4b56      	ldr	r3, [pc, #344]	; (80044c8 <menu+0x305c>)
 800436e:	2201      	movs	r2, #1
 8004370:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8004372:	f001 fe05 	bl	8005f80 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004376:	2108      	movs	r1, #8
 8004378:	4851      	ldr	r0, [pc, #324]	; (80044c0 <menu+0x3054>)
 800437a:	f005 fb99 	bl	8009ab0 <HAL_GPIO_ReadPin>
 800437e:	4603      	mov	r3, r0
 8004380:	2b01      	cmp	r3, #1
 8004382:	d10d      	bne.n	80043a0 <menu+0x2f34>
 8004384:	4b4f      	ldr	r3, [pc, #316]	; (80044c4 <menu+0x3058>)
 8004386:	781b      	ldrb	r3, [r3, #0]
 8004388:	f083 0301 	eor.w	r3, r3, #1
 800438c:	b2db      	uxtb	r3, r3
 800438e:	2b00      	cmp	r3, #0
 8004390:	d006      	beq.n	80043a0 <menu+0x2f34>
			eepromData[26] = demoMode;
 8004392:	4b4d      	ldr	r3, [pc, #308]	; (80044c8 <menu+0x305c>)
 8004394:	781a      	ldrb	r2, [r3, #0]
 8004396:	4b4d      	ldr	r3, [pc, #308]	; (80044cc <menu+0x3060>)
 8004398:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 800439a:	4b4d      	ldr	r3, [pc, #308]	; (80044d0 <menu+0x3064>)
 800439c:	2201      	movs	r2, #1
 800439e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 80043a0:	4b4c      	ldr	r3, [pc, #304]	; (80044d4 <menu+0x3068>)
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	2b1d      	cmp	r3, #29
 80043a6:	f040 8132 	bne.w	800460e <menu+0x31a2>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 80043aa:	4b4b      	ldr	r3, [pc, #300]	; (80044d8 <menu+0x306c>)
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d113      	bne.n	80043da <menu+0x2f6e>
 80043b2:	4b4a      	ldr	r3, [pc, #296]	; (80044dc <menu+0x3070>)
 80043b4:	781b      	ldrb	r3, [r3, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d10f      	bne.n	80043da <menu+0x2f6e>
 80043ba:	4b49      	ldr	r3, [pc, #292]	; (80044e0 <menu+0x3074>)
 80043bc:	781b      	ldrb	r3, [r3, #0]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d10b      	bne.n	80043da <menu+0x2f6e>
 80043c2:	4b48      	ldr	r3, [pc, #288]	; (80044e4 <menu+0x3078>)
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d107      	bne.n	80043da <menu+0x2f6e>
 80043ca:	4b47      	ldr	r3, [pc, #284]	; (80044e8 <menu+0x307c>)
 80043cc:	781b      	ldrb	r3, [r3, #0]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d103      	bne.n	80043da <menu+0x2f6e>
			calismaSayisiYar = 0;
 80043d2:	4b46      	ldr	r3, [pc, #280]	; (80044ec <menu+0x3080>)
 80043d4:	2200      	movs	r2, #0
 80043d6:	701a      	strb	r2, [r3, #0]
 80043d8:	e002      	b.n	80043e0 <menu+0x2f74>
		} else {
			calismaSayisiYar = 1;
 80043da:	4b44      	ldr	r3, [pc, #272]	; (80044ec <menu+0x3080>)
 80043dc:	2201      	movs	r2, #1
 80043de:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 80043e0:	4b43      	ldr	r3, [pc, #268]	; (80044f0 <menu+0x3084>)
 80043e2:	781b      	ldrb	r3, [r3, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d154      	bne.n	8004492 <menu+0x3026>
			if(dilSecim == 0) {
 80043e8:	4b33      	ldr	r3, [pc, #204]	; (80044b8 <menu+0x304c>)
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d105      	bne.n	80043fc <menu+0x2f90>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80043f0:	4a40      	ldr	r2, [pc, #256]	; (80044f4 <menu+0x3088>)
 80043f2:	2101      	movs	r1, #1
 80043f4:	2001      	movs	r0, #1
 80043f6:	f7fc f937 	bl	8000668 <lcd_print>
 80043fa:	e008      	b.n	800440e <menu+0x2fa2>
			} else if(dilSecim == 1) {
 80043fc:	4b2e      	ldr	r3, [pc, #184]	; (80044b8 <menu+0x304c>)
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	2b01      	cmp	r3, #1
 8004402:	d104      	bne.n	800440e <menu+0x2fa2>
				lcd_print(1, 1, "Working Cycle   ");
 8004404:	4a3c      	ldr	r2, [pc, #240]	; (80044f8 <menu+0x308c>)
 8004406:	2101      	movs	r1, #1
 8004408:	2001      	movs	r0, #1
 800440a:	f7fc f92d 	bl	8000668 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 800440e:	4b36      	ldr	r3, [pc, #216]	; (80044e8 <menu+0x307c>)
 8004410:	781b      	ldrb	r3, [r3, #0]
 8004412:	220a      	movs	r2, #10
 8004414:	4939      	ldr	r1, [pc, #228]	; (80044fc <menu+0x3090>)
 8004416:	4618      	mov	r0, r3
 8004418:	f008 fb76 	bl	800cb08 <itoa>
			lcd_print(2, 12, snum);
 800441c:	4a37      	ldr	r2, [pc, #220]	; (80044fc <menu+0x3090>)
 800441e:	210c      	movs	r1, #12
 8004420:	2002      	movs	r0, #2
 8004422:	f7fc f921 	bl	8000668 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 8004426:	4b2f      	ldr	r3, [pc, #188]	; (80044e4 <menu+0x3078>)
 8004428:	781b      	ldrb	r3, [r3, #0]
 800442a:	220a      	movs	r2, #10
 800442c:	4933      	ldr	r1, [pc, #204]	; (80044fc <menu+0x3090>)
 800442e:	4618      	mov	r0, r3
 8004430:	f008 fb6a 	bl	800cb08 <itoa>
			lcd_print(2, 13, snum);
 8004434:	4a31      	ldr	r2, [pc, #196]	; (80044fc <menu+0x3090>)
 8004436:	210d      	movs	r1, #13
 8004438:	2002      	movs	r0, #2
 800443a:	f7fc f915 	bl	8000668 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 800443e:	4b28      	ldr	r3, [pc, #160]	; (80044e0 <menu+0x3074>)
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	220a      	movs	r2, #10
 8004444:	492d      	ldr	r1, [pc, #180]	; (80044fc <menu+0x3090>)
 8004446:	4618      	mov	r0, r3
 8004448:	f008 fb5e 	bl	800cb08 <itoa>
			lcd_print(2, 14, snum);
 800444c:	4a2b      	ldr	r2, [pc, #172]	; (80044fc <menu+0x3090>)
 800444e:	210e      	movs	r1, #14
 8004450:	2002      	movs	r0, #2
 8004452:	f7fc f909 	bl	8000668 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 8004456:	4b21      	ldr	r3, [pc, #132]	; (80044dc <menu+0x3070>)
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	220a      	movs	r2, #10
 800445c:	4927      	ldr	r1, [pc, #156]	; (80044fc <menu+0x3090>)
 800445e:	4618      	mov	r0, r3
 8004460:	f008 fb52 	bl	800cb08 <itoa>
			lcd_print(2, 15, snum);
 8004464:	4a25      	ldr	r2, [pc, #148]	; (80044fc <menu+0x3090>)
 8004466:	210f      	movs	r1, #15
 8004468:	2002      	movs	r0, #2
 800446a:	f7fc f8fd 	bl	8000668 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 800446e:	4b1a      	ldr	r3, [pc, #104]	; (80044d8 <menu+0x306c>)
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	220a      	movs	r2, #10
 8004474:	4921      	ldr	r1, [pc, #132]	; (80044fc <menu+0x3090>)
 8004476:	4618      	mov	r0, r3
 8004478:	f008 fb46 	bl	800cb08 <itoa>
			lcd_print(2, 16, snum);
 800447c:	4a1f      	ldr	r2, [pc, #124]	; (80044fc <menu+0x3090>)
 800447e:	2110      	movs	r1, #16
 8004480:	2002      	movs	r0, #2
 8004482:	f7fc f8f1 	bl	8000668 <lcd_print>

			lcd_print(2, 1, "           ");
 8004486:	4a1e      	ldr	r2, [pc, #120]	; (8004500 <menu+0x3094>)
 8004488:	2101      	movs	r1, #1
 800448a:	2002      	movs	r0, #2
 800448c:	f7fc f8ec 	bl	8000668 <lcd_print>
 8004490:	e048      	b.n	8004524 <menu+0x30b8>
		} else if(calismaSayModu == 1) {
 8004492:	4b17      	ldr	r3, [pc, #92]	; (80044f0 <menu+0x3084>)
 8004494:	781b      	ldrb	r3, [r3, #0]
 8004496:	2b01      	cmp	r3, #1
 8004498:	d144      	bne.n	8004524 <menu+0x30b8>
			if(dilSecim == 0) {
 800449a:	4b07      	ldr	r3, [pc, #28]	; (80044b8 <menu+0x304c>)
 800449c:	781b      	ldrb	r3, [r3, #0]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d132      	bne.n	8004508 <menu+0x309c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80044a2:	4a14      	ldr	r2, [pc, #80]	; (80044f4 <menu+0x3088>)
 80044a4:	2101      	movs	r1, #1
 80044a6:	2001      	movs	r0, #1
 80044a8:	f7fc f8de 	bl	8000668 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 80044ac:	4a15      	ldr	r2, [pc, #84]	; (8004504 <menu+0x3098>)
 80044ae:	2101      	movs	r1, #1
 80044b0:	2002      	movs	r0, #2
 80044b2:	f7fc f8d9 	bl	8000668 <lcd_print>
 80044b6:	e035      	b.n	8004524 <menu+0x30b8>
 80044b8:	20000c5a 	.word	0x20000c5a
 80044bc:	0800da80 	.word	0x0800da80
 80044c0:	40010800 	.word	0x40010800
 80044c4:	20000c68 	.word	0x20000c68
 80044c8:	20000c57 	.word	0x20000c57
 80044cc:	20000b28 	.word	0x20000b28
 80044d0:	20000c65 	.word	0x20000c65
 80044d4:	20000c39 	.word	0x20000c39
 80044d8:	20000c36 	.word	0x20000c36
 80044dc:	20000c37 	.word	0x20000c37
 80044e0:	200009b1 	.word	0x200009b1
 80044e4:	200009b2 	.word	0x200009b2
 80044e8:	20000c38 	.word	0x20000c38
 80044ec:	20000c7a 	.word	0x20000c7a
 80044f0:	20000c59 	.word	0x20000c59
 80044f4:	0800e108 	.word	0x0800e108
 80044f8:	0800e11c 	.word	0x0800e11c
 80044fc:	20000bbc 	.word	0x20000bbc
 8004500:	0800e130 	.word	0x0800e130
 8004504:	0800e13c 	.word	0x0800e13c
			} else if(dilSecim == 1) {
 8004508:	4b94      	ldr	r3, [pc, #592]	; (800475c <menu+0x32f0>)
 800450a:	781b      	ldrb	r3, [r3, #0]
 800450c:	2b01      	cmp	r3, #1
 800450e:	d109      	bne.n	8004524 <menu+0x30b8>
				lcd_print(1, 1, "Working Cycle   ");
 8004510:	4a93      	ldr	r2, [pc, #588]	; (8004760 <menu+0x32f4>)
 8004512:	2101      	movs	r1, #1
 8004514:	2001      	movs	r0, #1
 8004516:	f7fc f8a7 	bl	8000668 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 800451a:	4a92      	ldr	r2, [pc, #584]	; (8004764 <menu+0x32f8>)
 800451c:	2101      	movs	r1, #1
 800451e:	2002      	movs	r0, #2
 8004520:	f7fc f8a2 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8004524:	2102      	movs	r1, #2
 8004526:	4890      	ldr	r0, [pc, #576]	; (8004768 <menu+0x32fc>)
 8004528:	f005 fac2 	bl	8009ab0 <HAL_GPIO_ReadPin>
 800452c:	4603      	mov	r3, r0
 800452e:	2b01      	cmp	r3, #1
 8004530:	d119      	bne.n	8004566 <menu+0x30fa>
 8004532:	4b8e      	ldr	r3, [pc, #568]	; (800476c <menu+0x3300>)
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	f083 0301 	eor.w	r3, r3, #1
 800453a:	b2db      	uxtb	r3, r3
 800453c:	2b00      	cmp	r3, #0
 800453e:	d012      	beq.n	8004566 <menu+0x30fa>
 8004540:	4b8b      	ldr	r3, [pc, #556]	; (8004770 <menu+0x3304>)
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d00e      	beq.n	8004566 <menu+0x30fa>
			calismaSayModu = calismaSayModu + 1;
 8004548:	4b8a      	ldr	r3, [pc, #552]	; (8004774 <menu+0x3308>)
 800454a:	781b      	ldrb	r3, [r3, #0]
 800454c:	3301      	adds	r3, #1
 800454e:	b2da      	uxtb	r2, r3
 8004550:	4b88      	ldr	r3, [pc, #544]	; (8004774 <menu+0x3308>)
 8004552:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 8004554:	4b87      	ldr	r3, [pc, #540]	; (8004774 <menu+0x3308>)
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	2b01      	cmp	r3, #1
 800455a:	d902      	bls.n	8004562 <menu+0x30f6>
				calismaSayModu = 0;
 800455c:	4b85      	ldr	r3, [pc, #532]	; (8004774 <menu+0x3308>)
 800455e:	2200      	movs	r2, #0
 8004560:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8004562:	f001 fd0d 	bl	8005f80 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 8004566:	2104      	movs	r1, #4
 8004568:	487f      	ldr	r0, [pc, #508]	; (8004768 <menu+0x32fc>)
 800456a:	f005 faa1 	bl	8009ab0 <HAL_GPIO_ReadPin>
 800456e:	4603      	mov	r3, r0
 8004570:	2b01      	cmp	r3, #1
 8004572:	d119      	bne.n	80045a8 <menu+0x313c>
 8004574:	4b7d      	ldr	r3, [pc, #500]	; (800476c <menu+0x3300>)
 8004576:	781b      	ldrb	r3, [r3, #0]
 8004578:	f083 0301 	eor.w	r3, r3, #1
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b00      	cmp	r3, #0
 8004580:	d012      	beq.n	80045a8 <menu+0x313c>
 8004582:	4b7b      	ldr	r3, [pc, #492]	; (8004770 <menu+0x3304>)
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	2b00      	cmp	r3, #0
 8004588:	d00e      	beq.n	80045a8 <menu+0x313c>
			calismaSayModu = calismaSayModu - 1;
 800458a:	4b7a      	ldr	r3, [pc, #488]	; (8004774 <menu+0x3308>)
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	3b01      	subs	r3, #1
 8004590:	b2da      	uxtb	r2, r3
 8004592:	4b78      	ldr	r3, [pc, #480]	; (8004774 <menu+0x3308>)
 8004594:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 8004596:	4b77      	ldr	r3, [pc, #476]	; (8004774 <menu+0x3308>)
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d002      	beq.n	80045a4 <menu+0x3138>
		   		calismaSayModu = 1;
 800459e:	4b75      	ldr	r3, [pc, #468]	; (8004774 <menu+0x3308>)
 80045a0:	2201      	movs	r2, #1
 80045a2:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80045a4:	f001 fcec 	bl	8005f80 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80045a8:	2108      	movs	r1, #8
 80045aa:	486f      	ldr	r0, [pc, #444]	; (8004768 <menu+0x32fc>)
 80045ac:	f005 fa80 	bl	8009ab0 <HAL_GPIO_ReadPin>
 80045b0:	4603      	mov	r3, r0
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d12b      	bne.n	800460e <menu+0x31a2>
 80045b6:	4b6d      	ldr	r3, [pc, #436]	; (800476c <menu+0x3300>)
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	f083 0301 	eor.w	r3, r3, #1
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d024      	beq.n	800460e <menu+0x31a2>
			eepromData[32] = 0;
 80045c4:	4b6c      	ldr	r3, [pc, #432]	; (8004778 <menu+0x330c>)
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 80045cc:	4b6a      	ldr	r3, [pc, #424]	; (8004778 <menu+0x330c>)
 80045ce:	2200      	movs	r2, #0
 80045d0:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 80045d2:	4b69      	ldr	r3, [pc, #420]	; (8004778 <menu+0x330c>)
 80045d4:	2200      	movs	r2, #0
 80045d6:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 80045d8:	4b67      	ldr	r3, [pc, #412]	; (8004778 <menu+0x330c>)
 80045da:	2200      	movs	r2, #0
 80045dc:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 80045de:	4b66      	ldr	r3, [pc, #408]	; (8004778 <menu+0x330c>)
 80045e0:	2200      	movs	r2, #0
 80045e2:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 80045e4:	4b65      	ldr	r3, [pc, #404]	; (800477c <menu+0x3310>)
 80045e6:	2200      	movs	r2, #0
 80045e8:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 80045ea:	4b65      	ldr	r3, [pc, #404]	; (8004780 <menu+0x3314>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 80045f0:	4b64      	ldr	r3, [pc, #400]	; (8004784 <menu+0x3318>)
 80045f2:	2200      	movs	r2, #0
 80045f4:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 80045f6:	4b64      	ldr	r3, [pc, #400]	; (8004788 <menu+0x331c>)
 80045f8:	2200      	movs	r2, #0
 80045fa:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 80045fc:	4b63      	ldr	r3, [pc, #396]	; (800478c <menu+0x3320>)
 80045fe:	2200      	movs	r2, #0
 8004600:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 8004602:	4b5c      	ldr	r3, [pc, #368]	; (8004774 <menu+0x3308>)
 8004604:	2200      	movs	r2, #0
 8004606:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8004608:	4b61      	ldr	r3, [pc, #388]	; (8004790 <menu+0x3324>)
 800460a:	2201      	movs	r2, #1
 800460c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 800460e:	4b61      	ldr	r3, [pc, #388]	; (8004794 <menu+0x3328>)
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	2b1e      	cmp	r3, #30
 8004614:	d16f      	bne.n	80046f6 <menu+0x328a>
		calismaSayModu = 0;
 8004616:	4b57      	ldr	r3, [pc, #348]	; (8004774 <menu+0x3308>)
 8004618:	2200      	movs	r2, #0
 800461a:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 800461c:	4b4f      	ldr	r3, [pc, #316]	; (800475c <menu+0x32f0>)
 800461e:	781b      	ldrb	r3, [r3, #0]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d10a      	bne.n	800463a <menu+0x31ce>
			lcd_print(1, 1, "DIL SECIMI      ");
 8004624:	4a5c      	ldr	r2, [pc, #368]	; (8004798 <menu+0x332c>)
 8004626:	2101      	movs	r1, #1
 8004628:	2001      	movs	r0, #1
 800462a:	f7fc f81d 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 800462e:	4a5b      	ldr	r2, [pc, #364]	; (800479c <menu+0x3330>)
 8004630:	2101      	movs	r1, #1
 8004632:	2002      	movs	r0, #2
 8004634:	f7fc f818 	bl	8000668 <lcd_print>
 8004638:	e00d      	b.n	8004656 <menu+0x31ea>
		} else if(dilSecim == 1) {
 800463a:	4b48      	ldr	r3, [pc, #288]	; (800475c <menu+0x32f0>)
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	2b01      	cmp	r3, #1
 8004640:	d109      	bne.n	8004656 <menu+0x31ea>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 8004642:	4a57      	ldr	r2, [pc, #348]	; (80047a0 <menu+0x3334>)
 8004644:	2101      	movs	r1, #1
 8004646:	2001      	movs	r0, #1
 8004648:	f7fc f80e 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 800464c:	4a55      	ldr	r2, [pc, #340]	; (80047a4 <menu+0x3338>)
 800464e:	2101      	movs	r1, #1
 8004650:	2002      	movs	r0, #2
 8004652:	f7fc f809 	bl	8000668 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8004656:	2102      	movs	r1, #2
 8004658:	4843      	ldr	r0, [pc, #268]	; (8004768 <menu+0x32fc>)
 800465a:	f005 fa29 	bl	8009ab0 <HAL_GPIO_ReadPin>
 800465e:	4603      	mov	r3, r0
 8004660:	2b01      	cmp	r3, #1
 8004662:	d115      	bne.n	8004690 <menu+0x3224>
 8004664:	4b41      	ldr	r3, [pc, #260]	; (800476c <menu+0x3300>)
 8004666:	781b      	ldrb	r3, [r3, #0]
 8004668:	f083 0301 	eor.w	r3, r3, #1
 800466c:	b2db      	uxtb	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	d00e      	beq.n	8004690 <menu+0x3224>
			dilSecim = dilSecim + 1;
 8004672:	4b3a      	ldr	r3, [pc, #232]	; (800475c <menu+0x32f0>)
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	3301      	adds	r3, #1
 8004678:	b2da      	uxtb	r2, r3
 800467a:	4b38      	ldr	r3, [pc, #224]	; (800475c <menu+0x32f0>)
 800467c:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 800467e:	4b37      	ldr	r3, [pc, #220]	; (800475c <menu+0x32f0>)
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	2b01      	cmp	r3, #1
 8004684:	d902      	bls.n	800468c <menu+0x3220>
				dilSecim = 0;
 8004686:	4b35      	ldr	r3, [pc, #212]	; (800475c <menu+0x32f0>)
 8004688:	2200      	movs	r2, #0
 800468a:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 800468c:	f001 fc78 	bl	8005f80 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004690:	2104      	movs	r1, #4
 8004692:	4835      	ldr	r0, [pc, #212]	; (8004768 <menu+0x32fc>)
 8004694:	f005 fa0c 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8004698:	4603      	mov	r3, r0
 800469a:	2b01      	cmp	r3, #1
 800469c:	d115      	bne.n	80046ca <menu+0x325e>
 800469e:	4b33      	ldr	r3, [pc, #204]	; (800476c <menu+0x3300>)
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	f083 0301 	eor.w	r3, r3, #1
 80046a6:	b2db      	uxtb	r3, r3
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d00e      	beq.n	80046ca <menu+0x325e>
			dilSecim = dilSecim - 1;
 80046ac:	4b2b      	ldr	r3, [pc, #172]	; (800475c <menu+0x32f0>)
 80046ae:	781b      	ldrb	r3, [r3, #0]
 80046b0:	3b01      	subs	r3, #1
 80046b2:	b2da      	uxtb	r2, r3
 80046b4:	4b29      	ldr	r3, [pc, #164]	; (800475c <menu+0x32f0>)
 80046b6:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 80046b8:	4b28      	ldr	r3, [pc, #160]	; (800475c <menu+0x32f0>)
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d002      	beq.n	80046c6 <menu+0x325a>
		   		dilSecim = 1;
 80046c0:	4b26      	ldr	r3, [pc, #152]	; (800475c <menu+0x32f0>)
 80046c2:	2201      	movs	r2, #1
 80046c4:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80046c6:	f001 fc5b 	bl	8005f80 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80046ca:	2108      	movs	r1, #8
 80046cc:	4826      	ldr	r0, [pc, #152]	; (8004768 <menu+0x32fc>)
 80046ce:	f005 f9ef 	bl	8009ab0 <HAL_GPIO_ReadPin>
 80046d2:	4603      	mov	r3, r0
 80046d4:	2b01      	cmp	r3, #1
 80046d6:	d10e      	bne.n	80046f6 <menu+0x328a>
 80046d8:	4b24      	ldr	r3, [pc, #144]	; (800476c <menu+0x3300>)
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	f083 0301 	eor.w	r3, r3, #1
 80046e0:	b2db      	uxtb	r3, r3
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d007      	beq.n	80046f6 <menu+0x328a>
			eepromData[33] = dilSecim;
 80046e6:	4b1d      	ldr	r3, [pc, #116]	; (800475c <menu+0x32f0>)
 80046e8:	781a      	ldrb	r2, [r3, #0]
 80046ea:	4b23      	ldr	r3, [pc, #140]	; (8004778 <menu+0x330c>)
 80046ec:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 80046f0:	4b27      	ldr	r3, [pc, #156]	; (8004790 <menu+0x3324>)
 80046f2:	2201      	movs	r2, #1
 80046f4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 80046f6:	4b27      	ldr	r3, [pc, #156]	; (8004794 <menu+0x3328>)
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	2b1f      	cmp	r3, #31
 80046fc:	f040 80b7 	bne.w	800486e <menu+0x3402>
		calismaSayModu = 0;
 8004700:	4b1c      	ldr	r3, [pc, #112]	; (8004774 <menu+0x3308>)
 8004702:	2200      	movs	r2, #0
 8004704:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "IoT MODE        ");
 8004706:	4a28      	ldr	r2, [pc, #160]	; (80047a8 <menu+0x333c>)
 8004708:	2101      	movs	r1, #1
 800470a:	2001      	movs	r0, #1
 800470c:	f7fb ffac 	bl	8000668 <lcd_print>

		if(iotMode == 0) {
 8004710:	4b26      	ldr	r3, [pc, #152]	; (80047ac <menu+0x3340>)
 8004712:	781b      	ldrb	r3, [r3, #0]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d113      	bne.n	8004740 <menu+0x32d4>
			if(dilSecim == 0) {
 8004718:	4b10      	ldr	r3, [pc, #64]	; (800475c <menu+0x32f0>)
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d105      	bne.n	800472c <menu+0x32c0>
				lcd_print(2, 1, "Pasif           ");
 8004720:	4a23      	ldr	r2, [pc, #140]	; (80047b0 <menu+0x3344>)
 8004722:	2101      	movs	r1, #1
 8004724:	2002      	movs	r0, #2
 8004726:	f7fb ff9f 	bl	8000668 <lcd_print>
 800472a:	e050      	b.n	80047ce <menu+0x3362>
			} else if(dilSecim == 1) {
 800472c:	4b0b      	ldr	r3, [pc, #44]	; (800475c <menu+0x32f0>)
 800472e:	781b      	ldrb	r3, [r3, #0]
 8004730:	2b01      	cmp	r3, #1
 8004732:	d14c      	bne.n	80047ce <menu+0x3362>
				lcd_print(2, 1, "Passive         ");
 8004734:	4a1f      	ldr	r2, [pc, #124]	; (80047b4 <menu+0x3348>)
 8004736:	2101      	movs	r1, #1
 8004738:	2002      	movs	r0, #2
 800473a:	f7fb ff95 	bl	8000668 <lcd_print>
 800473e:	e046      	b.n	80047ce <menu+0x3362>
			}
		} else if(iotMode == 1) {
 8004740:	4b1a      	ldr	r3, [pc, #104]	; (80047ac <menu+0x3340>)
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	2b01      	cmp	r3, #1
 8004746:	d142      	bne.n	80047ce <menu+0x3362>
			if(dilSecim == 0){
 8004748:	4b04      	ldr	r3, [pc, #16]	; (800475c <menu+0x32f0>)
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d135      	bne.n	80047bc <menu+0x3350>
				lcd_print(2, 1, "Aktif           ");
 8004750:	4a19      	ldr	r2, [pc, #100]	; (80047b8 <menu+0x334c>)
 8004752:	2101      	movs	r1, #1
 8004754:	2002      	movs	r0, #2
 8004756:	f7fb ff87 	bl	8000668 <lcd_print>
 800475a:	e038      	b.n	80047ce <menu+0x3362>
 800475c:	20000c5a 	.word	0x20000c5a
 8004760:	0800e11c 	.word	0x0800e11c
 8004764:	0800e150 	.word	0x0800e150
 8004768:	40010800 	.word	0x40010800
 800476c:	20000c68 	.word	0x20000c68
 8004770:	20000c7a 	.word	0x20000c7a
 8004774:	20000c59 	.word	0x20000c59
 8004778:	20000b28 	.word	0x20000b28
 800477c:	20000c38 	.word	0x20000c38
 8004780:	200009b2 	.word	0x200009b2
 8004784:	200009b1 	.word	0x200009b1
 8004788:	20000c37 	.word	0x20000c37
 800478c:	20000c36 	.word	0x20000c36
 8004790:	20000c65 	.word	0x20000c65
 8004794:	20000c39 	.word	0x20000c39
 8004798:	0800e164 	.word	0x0800e164
 800479c:	0800e178 	.word	0x0800e178
 80047a0:	0800e18c 	.word	0x0800e18c
 80047a4:	0800e1a0 	.word	0x0800e1a0
 80047a8:	0800e1b4 	.word	0x0800e1b4
 80047ac:	20000c58 	.word	0x20000c58
 80047b0:	0800da0c 	.word	0x0800da0c
 80047b4:	0800da20 	.word	0x0800da20
 80047b8:	0800da6c 	.word	0x0800da6c
			} else if(dilSecim == 1) {
 80047bc:	4b90      	ldr	r3, [pc, #576]	; (8004a00 <menu+0x3594>)
 80047be:	781b      	ldrb	r3, [r3, #0]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d104      	bne.n	80047ce <menu+0x3362>
				lcd_print(2, 1, "Active          ");
 80047c4:	4a8f      	ldr	r2, [pc, #572]	; (8004a04 <menu+0x3598>)
 80047c6:	2101      	movs	r1, #1
 80047c8:	2002      	movs	r0, #2
 80047ca:	f7fb ff4d 	bl	8000668 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80047ce:	2102      	movs	r1, #2
 80047d0:	488d      	ldr	r0, [pc, #564]	; (8004a08 <menu+0x359c>)
 80047d2:	f005 f96d 	bl	8009ab0 <HAL_GPIO_ReadPin>
 80047d6:	4603      	mov	r3, r0
 80047d8:	2b01      	cmp	r3, #1
 80047da:	d115      	bne.n	8004808 <menu+0x339c>
 80047dc:	4b8b      	ldr	r3, [pc, #556]	; (8004a0c <menu+0x35a0>)
 80047de:	781b      	ldrb	r3, [r3, #0]
 80047e0:	f083 0301 	eor.w	r3, r3, #1
 80047e4:	b2db      	uxtb	r3, r3
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00e      	beq.n	8004808 <menu+0x339c>
			iotMode = iotMode + 1;
 80047ea:	4b89      	ldr	r3, [pc, #548]	; (8004a10 <menu+0x35a4>)
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	3301      	adds	r3, #1
 80047f0:	b2da      	uxtb	r2, r3
 80047f2:	4b87      	ldr	r3, [pc, #540]	; (8004a10 <menu+0x35a4>)
 80047f4:	701a      	strb	r2, [r3, #0]

			if(iotMode > 1) {
 80047f6:	4b86      	ldr	r3, [pc, #536]	; (8004a10 <menu+0x35a4>)
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d902      	bls.n	8004804 <menu+0x3398>
				iotMode = 0;
 80047fe:	4b84      	ldr	r3, [pc, #528]	; (8004a10 <menu+0x35a4>)
 8004800:	2200      	movs	r2, #0
 8004802:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8004804:	f001 fbbc 	bl	8005f80 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004808:	2104      	movs	r1, #4
 800480a:	487f      	ldr	r0, [pc, #508]	; (8004a08 <menu+0x359c>)
 800480c:	f005 f950 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8004810:	4603      	mov	r3, r0
 8004812:	2b01      	cmp	r3, #1
 8004814:	d115      	bne.n	8004842 <menu+0x33d6>
 8004816:	4b7d      	ldr	r3, [pc, #500]	; (8004a0c <menu+0x35a0>)
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	f083 0301 	eor.w	r3, r3, #1
 800481e:	b2db      	uxtb	r3, r3
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00e      	beq.n	8004842 <menu+0x33d6>
			iotMode = iotMode - 1;
 8004824:	4b7a      	ldr	r3, [pc, #488]	; (8004a10 <menu+0x35a4>)
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	3b01      	subs	r3, #1
 800482a:	b2da      	uxtb	r2, r3
 800482c:	4b78      	ldr	r3, [pc, #480]	; (8004a10 <menu+0x35a4>)
 800482e:	701a      	strb	r2, [r3, #0]

		   	if(iotMode > 0) {
 8004830:	4b77      	ldr	r3, [pc, #476]	; (8004a10 <menu+0x35a4>)
 8004832:	781b      	ldrb	r3, [r3, #0]
 8004834:	2b00      	cmp	r3, #0
 8004836:	d002      	beq.n	800483e <menu+0x33d2>
		   		iotMode = 1;
 8004838:	4b75      	ldr	r3, [pc, #468]	; (8004a10 <menu+0x35a4>)
 800483a:	2201      	movs	r2, #1
 800483c:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 800483e:	f001 fb9f 	bl	8005f80 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8004842:	2108      	movs	r1, #8
 8004844:	4870      	ldr	r0, [pc, #448]	; (8004a08 <menu+0x359c>)
 8004846:	f005 f933 	bl	8009ab0 <HAL_GPIO_ReadPin>
 800484a:	4603      	mov	r3, r0
 800484c:	2b01      	cmp	r3, #1
 800484e:	d10e      	bne.n	800486e <menu+0x3402>
 8004850:	4b6e      	ldr	r3, [pc, #440]	; (8004a0c <menu+0x35a0>)
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	f083 0301 	eor.w	r3, r3, #1
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b00      	cmp	r3, #0
 800485c:	d007      	beq.n	800486e <menu+0x3402>
			eepromData[37] = iotMode;
 800485e:	4b6c      	ldr	r3, [pc, #432]	; (8004a10 <menu+0x35a4>)
 8004860:	781a      	ldrb	r2, [r3, #0]
 8004862:	4b6c      	ldr	r3, [pc, #432]	; (8004a14 <menu+0x35a8>)
 8004864:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hafizaYaz = 1;
 8004868:	4b6b      	ldr	r3, [pc, #428]	; (8004a18 <menu+0x35ac>)
 800486a:	2201      	movs	r2, #1
 800486c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 32) {
 800486e:	4b6b      	ldr	r3, [pc, #428]	; (8004a1c <menu+0x35b0>)
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	2b20      	cmp	r3, #32
 8004874:	d147      	bne.n	8004906 <menu+0x349a>
		calismaSayModu = 0;
 8004876:	4b6a      	ldr	r3, [pc, #424]	; (8004a20 <menu+0x35b4>)
 8004878:	2200      	movs	r2, #0
 800487a:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "MAKINE ID       ");
 800487c:	4a69      	ldr	r2, [pc, #420]	; (8004a24 <menu+0x35b8>)
 800487e:	2101      	movs	r1, #1
 8004880:	2001      	movs	r0, #1
 8004882:	f7fb fef1 	bl	8000668 <lcd_print>

		lcd_print(2, 1, machineID);
 8004886:	4a68      	ldr	r2, [pc, #416]	; (8004a28 <menu+0x35bc>)
 8004888:	2101      	movs	r1, #1
 800488a:	2002      	movs	r0, #2
 800488c:	f7fb feec 	bl	8000668 <lcd_print>
		lcd_print(2, 1+strlen(machineID), emptyArray);
 8004890:	4865      	ldr	r0, [pc, #404]	; (8004a28 <menu+0x35bc>)
 8004892:	f7fb fcc7 	bl	8000224 <strlen>
 8004896:	4603      	mov	r3, r0
 8004898:	b2db      	uxtb	r3, r3
 800489a:	3301      	adds	r3, #1
 800489c:	b2db      	uxtb	r3, r3
 800489e:	4a63      	ldr	r2, [pc, #396]	; (8004a2c <menu+0x35c0>)
 80048a0:	4619      	mov	r1, r3
 80048a2:	2002      	movs	r0, #2
 80048a4:	f7fb fee0 	bl	8000668 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80048a8:	2102      	movs	r1, #2
 80048aa:	4857      	ldr	r0, [pc, #348]	; (8004a08 <menu+0x359c>)
 80048ac:	f005 f900 	bl	8009ab0 <HAL_GPIO_ReadPin>
 80048b0:	4603      	mov	r3, r0
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d127      	bne.n	8004906 <menu+0x349a>
 80048b6:	2104      	movs	r1, #4
 80048b8:	4853      	ldr	r0, [pc, #332]	; (8004a08 <menu+0x359c>)
 80048ba:	f005 f8f9 	bl	8009ab0 <HAL_GPIO_ReadPin>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b01      	cmp	r3, #1
 80048c2:	d120      	bne.n	8004906 <menu+0x349a>
 80048c4:	4b51      	ldr	r3, [pc, #324]	; (8004a0c <menu+0x35a0>)
 80048c6:	781b      	ldrb	r3, [r3, #0]
 80048c8:	f083 0301 	eor.w	r3, r3, #1
 80048cc:	b2db      	uxtb	r3, r3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d019      	beq.n	8004906 <menu+0x349a>
			takeMachineID(0, hi2c1);
 80048d2:	6879      	ldr	r1, [r7, #4]
 80048d4:	2000      	movs	r0, #0
 80048d6:	f7fc f973 	bl	8000bc0 <takeMachineID>

			HAL_Delay(50);
 80048da:	2032      	movs	r0, #50	; 0x32
 80048dc:	f004 fb18 	bl	8008f10 <HAL_Delay>

			lcd_print(2, 1, machineID);
 80048e0:	4a51      	ldr	r2, [pc, #324]	; (8004a28 <menu+0x35bc>)
 80048e2:	2101      	movs	r1, #1
 80048e4:	2002      	movs	r0, #2
 80048e6:	f7fb febf 	bl	8000668 <lcd_print>
			lcd_print(2, 1+strlen(machineID), emptyArray);
 80048ea:	484f      	ldr	r0, [pc, #316]	; (8004a28 <menu+0x35bc>)
 80048ec:	f7fb fc9a 	bl	8000224 <strlen>
 80048f0:	4603      	mov	r3, r0
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	3301      	adds	r3, #1
 80048f6:	b2db      	uxtb	r3, r3
 80048f8:	4a4c      	ldr	r2, [pc, #304]	; (8004a2c <menu+0x35c0>)
 80048fa:	4619      	mov	r1, r3
 80048fc:	2002      	movs	r0, #2
 80048fe:	f7fb feb3 	bl	8000668 <lcd_print>

			bekle();
 8004902:	f001 fb3d 	bl	8005f80 <bekle>
		}
	}

	if (menuSayac == 33) {
 8004906:	4b45      	ldr	r3, [pc, #276]	; (8004a1c <menu+0x35b0>)
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	2b21      	cmp	r3, #33	; 0x21
 800490c:	d153      	bne.n	80049b6 <menu+0x354a>
		calismaSayModu = 0;
 800490e:	4b44      	ldr	r3, [pc, #272]	; (8004a20 <menu+0x35b4>)
 8004910:	2200      	movs	r2, #0
 8004912:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI SSID       ");
 8004914:	4a46      	ldr	r2, [pc, #280]	; (8004a30 <menu+0x35c4>)
 8004916:	2101      	movs	r1, #1
 8004918:	2001      	movs	r0, #1
 800491a:	f7fb fea5 	bl	8000668 <lcd_print>
		if(strlen(wifiSSID) <=16) {
 800491e:	4845      	ldr	r0, [pc, #276]	; (8004a34 <menu+0x35c8>)
 8004920:	f7fb fc80 	bl	8000224 <strlen>
 8004924:	4603      	mov	r3, r0
 8004926:	2b10      	cmp	r3, #16
 8004928:	d811      	bhi.n	800494e <menu+0x34e2>
			lcd_print(2, 1, wifiSSID);
 800492a:	4a42      	ldr	r2, [pc, #264]	; (8004a34 <menu+0x35c8>)
 800492c:	2101      	movs	r1, #1
 800492e:	2002      	movs	r0, #2
 8004930:	f7fb fe9a 	bl	8000668 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 8004934:	483f      	ldr	r0, [pc, #252]	; (8004a34 <menu+0x35c8>)
 8004936:	f7fb fc75 	bl	8000224 <strlen>
 800493a:	4603      	mov	r3, r0
 800493c:	b2db      	uxtb	r3, r3
 800493e:	3301      	adds	r3, #1
 8004940:	b2db      	uxtb	r3, r3
 8004942:	4a3a      	ldr	r2, [pc, #232]	; (8004a2c <menu+0x35c0>)
 8004944:	4619      	mov	r1, r3
 8004946:	2002      	movs	r0, #2
 8004948:	f7fb fe8e 	bl	8000668 <lcd_print>
 800494c:	e004      	b.n	8004958 <menu+0x34ec>
		} else {
			slideText(wifiSSID, 1, 2);
 800494e:	2202      	movs	r2, #2
 8004950:	2101      	movs	r1, #1
 8004952:	4838      	ldr	r0, [pc, #224]	; (8004a34 <menu+0x35c8>)
 8004954:	f7fc fd30 	bl	80013b8 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004958:	2102      	movs	r1, #2
 800495a:	482b      	ldr	r0, [pc, #172]	; (8004a08 <menu+0x359c>)
 800495c:	f005 f8a8 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8004960:	4603      	mov	r3, r0
 8004962:	2b01      	cmp	r3, #1
 8004964:	d127      	bne.n	80049b6 <menu+0x354a>
 8004966:	2104      	movs	r1, #4
 8004968:	4827      	ldr	r0, [pc, #156]	; (8004a08 <menu+0x359c>)
 800496a:	f005 f8a1 	bl	8009ab0 <HAL_GPIO_ReadPin>
 800496e:	4603      	mov	r3, r0
 8004970:	2b01      	cmp	r3, #1
 8004972:	d120      	bne.n	80049b6 <menu+0x354a>
 8004974:	4b25      	ldr	r3, [pc, #148]	; (8004a0c <menu+0x35a0>)
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	f083 0301 	eor.w	r3, r3, #1
 800497c:	b2db      	uxtb	r3, r3
 800497e:	2b00      	cmp	r3, #0
 8004980:	d019      	beq.n	80049b6 <menu+0x354a>
			takeWifiSSID(0, hi2c1);
 8004982:	6879      	ldr	r1, [r7, #4]
 8004984:	2000      	movs	r0, #0
 8004986:	f7fc fa2f 	bl	8000de8 <takeWifiSSID>

			HAL_Delay(50);
 800498a:	2032      	movs	r0, #50	; 0x32
 800498c:	f004 fac0 	bl	8008f10 <HAL_Delay>

			lcd_print(2, 1, wifiSSID);
 8004990:	4a28      	ldr	r2, [pc, #160]	; (8004a34 <menu+0x35c8>)
 8004992:	2101      	movs	r1, #1
 8004994:	2002      	movs	r0, #2
 8004996:	f7fb fe67 	bl	8000668 <lcd_print>
			lcd_print(2, 1+strlen(wifiSSID), emptyArray);
 800499a:	4826      	ldr	r0, [pc, #152]	; (8004a34 <menu+0x35c8>)
 800499c:	f7fb fc42 	bl	8000224 <strlen>
 80049a0:	4603      	mov	r3, r0
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	3301      	adds	r3, #1
 80049a6:	b2db      	uxtb	r3, r3
 80049a8:	4a20      	ldr	r2, [pc, #128]	; (8004a2c <menu+0x35c0>)
 80049aa:	4619      	mov	r1, r3
 80049ac:	2002      	movs	r0, #2
 80049ae:	f7fb fe5b 	bl	8000668 <lcd_print>

			bekle();
 80049b2:	f001 fae5 	bl	8005f80 <bekle>
		}
	}

	if (menuSayac == 34) {
 80049b6:	4b19      	ldr	r3, [pc, #100]	; (8004a1c <menu+0x35b0>)
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	2b22      	cmp	r3, #34	; 0x22
 80049bc:	d174      	bne.n	8004aa8 <menu+0x363c>
		calismaSayModu = 0;
 80049be:	4b18      	ldr	r3, [pc, #96]	; (8004a20 <menu+0x35b4>)
 80049c0:	2200      	movs	r2, #0
 80049c2:	701a      	strb	r2, [r3, #0]

		lcd_print(1, 1, "WIFI PASS       ");
 80049c4:	4a1c      	ldr	r2, [pc, #112]	; (8004a38 <menu+0x35cc>)
 80049c6:	2101      	movs	r1, #1
 80049c8:	2001      	movs	r0, #1
 80049ca:	f7fb fe4d 	bl	8000668 <lcd_print>
		if(strlen(wifiPass) <= 16) {
 80049ce:	481b      	ldr	r0, [pc, #108]	; (8004a3c <menu+0x35d0>)
 80049d0:	f7fb fc28 	bl	8000224 <strlen>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b10      	cmp	r3, #16
 80049d8:	d832      	bhi.n	8004a40 <menu+0x35d4>
			lcd_print(2, 1, wifiPass);
 80049da:	4a18      	ldr	r2, [pc, #96]	; (8004a3c <menu+0x35d0>)
 80049dc:	2101      	movs	r1, #1
 80049de:	2002      	movs	r0, #2
 80049e0:	f7fb fe42 	bl	8000668 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 80049e4:	4815      	ldr	r0, [pc, #84]	; (8004a3c <menu+0x35d0>)
 80049e6:	f7fb fc1d 	bl	8000224 <strlen>
 80049ea:	4603      	mov	r3, r0
 80049ec:	b2db      	uxtb	r3, r3
 80049ee:	3301      	adds	r3, #1
 80049f0:	b2db      	uxtb	r3, r3
 80049f2:	4a0e      	ldr	r2, [pc, #56]	; (8004a2c <menu+0x35c0>)
 80049f4:	4619      	mov	r1, r3
 80049f6:	2002      	movs	r0, #2
 80049f8:	f7fb fe36 	bl	8000668 <lcd_print>
 80049fc:	e025      	b.n	8004a4a <menu+0x35de>
 80049fe:	bf00      	nop
 8004a00:	20000c5a 	.word	0x20000c5a
 8004a04:	0800da80 	.word	0x0800da80
 8004a08:	40010800 	.word	0x40010800
 8004a0c:	20000c68 	.word	0x20000c68
 8004a10:	20000c58 	.word	0x20000c58
 8004a14:	20000b28 	.word	0x20000b28
 8004a18:	20000c65 	.word	0x20000c65
 8004a1c:	20000c39 	.word	0x20000c39
 8004a20:	20000c59 	.word	0x20000c59
 8004a24:	0800e1c8 	.word	0x0800e1c8
 8004a28:	20000be4 	.word	0x20000be4
 8004a2c:	2000094c 	.word	0x2000094c
 8004a30:	0800e1dc 	.word	0x0800e1dc
 8004a34:	20000bf0 	.word	0x20000bf0
 8004a38:	0800e1f0 	.word	0x0800e1f0
 8004a3c:	20000c14 	.word	0x20000c14
		} else {
			slideText(wifiPass, 1, 2);
 8004a40:	2202      	movs	r2, #2
 8004a42:	2101      	movs	r1, #1
 8004a44:	4834      	ldr	r0, [pc, #208]	; (8004b18 <menu+0x36ac>)
 8004a46:	f7fc fcb7 	bl	80013b8 <slideText>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8004a4a:	2102      	movs	r1, #2
 8004a4c:	4833      	ldr	r0, [pc, #204]	; (8004b1c <menu+0x36b0>)
 8004a4e:	f005 f82f 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8004a52:	4603      	mov	r3, r0
 8004a54:	2b01      	cmp	r3, #1
 8004a56:	d127      	bne.n	8004aa8 <menu+0x363c>
 8004a58:	2104      	movs	r1, #4
 8004a5a:	4830      	ldr	r0, [pc, #192]	; (8004b1c <menu+0x36b0>)
 8004a5c:	f005 f828 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8004a60:	4603      	mov	r3, r0
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d120      	bne.n	8004aa8 <menu+0x363c>
 8004a66:	4b2e      	ldr	r3, [pc, #184]	; (8004b20 <menu+0x36b4>)
 8004a68:	781b      	ldrb	r3, [r3, #0]
 8004a6a:	f083 0301 	eor.w	r3, r3, #1
 8004a6e:	b2db      	uxtb	r3, r3
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d019      	beq.n	8004aa8 <menu+0x363c>
			takeWifiPass(0, hi2c1);
 8004a74:	6879      	ldr	r1, [r7, #4]
 8004a76:	2000      	movs	r0, #0
 8004a78:	f7fc fb2a 	bl	80010d0 <takeWifiPass>

			HAL_Delay(50);
 8004a7c:	2032      	movs	r0, #50	; 0x32
 8004a7e:	f004 fa47 	bl	8008f10 <HAL_Delay>

			lcd_print(2, 1, wifiPass);
 8004a82:	4a25      	ldr	r2, [pc, #148]	; (8004b18 <menu+0x36ac>)
 8004a84:	2101      	movs	r1, #1
 8004a86:	2002      	movs	r0, #2
 8004a88:	f7fb fdee 	bl	8000668 <lcd_print>
			lcd_print(2, 1+strlen(wifiPass), emptyArray);
 8004a8c:	4822      	ldr	r0, [pc, #136]	; (8004b18 <menu+0x36ac>)
 8004a8e:	f7fb fbc9 	bl	8000224 <strlen>
 8004a92:	4603      	mov	r3, r0
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	3301      	adds	r3, #1
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	4a22      	ldr	r2, [pc, #136]	; (8004b24 <menu+0x36b8>)
 8004a9c:	4619      	mov	r1, r3
 8004a9e:	2002      	movs	r0, #2
 8004aa0:	f7fb fde2 	bl	8000668 <lcd_print>

			bekle();
 8004aa4:	f001 fa6c 	bl	8005f80 <bekle>
		}
	}

	if (menuSayac == 35) {
 8004aa8:	4b1f      	ldr	r3, [pc, #124]	; (8004b28 <menu+0x36bc>)
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	2b23      	cmp	r3, #35	; 0x23
 8004aae:	d12e      	bne.n	8004b0e <menu+0x36a2>
		if(dilSecim == 0) {
 8004ab0:	4b1e      	ldr	r3, [pc, #120]	; (8004b2c <menu+0x36c0>)
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d10a      	bne.n	8004ace <menu+0x3662>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 8004ab8:	4a1d      	ldr	r2, [pc, #116]	; (8004b30 <menu+0x36c4>)
 8004aba:	2101      	movs	r1, #1
 8004abc:	2001      	movs	r0, #1
 8004abe:	f7fb fdd3 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8004ac2:	4a1c      	ldr	r2, [pc, #112]	; (8004b34 <menu+0x36c8>)
 8004ac4:	2101      	movs	r1, #1
 8004ac6:	2002      	movs	r0, #2
 8004ac8:	f7fb fdce 	bl	8000668 <lcd_print>
 8004acc:	e00d      	b.n	8004aea <menu+0x367e>
		} else if(dilSecim == 1) {
 8004ace:	4b17      	ldr	r3, [pc, #92]	; (8004b2c <menu+0x36c0>)
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d109      	bne.n	8004aea <menu+0x367e>
			lcd_print(1, 1, " EXIT THE MENU  ");
 8004ad6:	4a18      	ldr	r2, [pc, #96]	; (8004b38 <menu+0x36cc>)
 8004ad8:	2101      	movs	r1, #1
 8004ada:	2001      	movs	r0, #1
 8004adc:	f7fb fdc4 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 8004ae0:	4a16      	ldr	r2, [pc, #88]	; (8004b3c <menu+0x36d0>)
 8004ae2:	2101      	movs	r1, #1
 8004ae4:	2002      	movs	r0, #2
 8004ae6:	f7fb fdbf 	bl	8000668 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8004aea:	2108      	movs	r1, #8
 8004aec:	480b      	ldr	r0, [pc, #44]	; (8004b1c <menu+0x36b0>)
 8004aee:	f004 ffdf 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b01      	cmp	r3, #1
 8004af6:	d10a      	bne.n	8004b0e <menu+0x36a2>
			menuGiris = 0;
 8004af8:	4b11      	ldr	r3, [pc, #68]	; (8004b40 <menu+0x36d4>)
 8004afa:	2200      	movs	r2, #0
 8004afc:	701a      	strb	r2, [r3, #0]

			lcd_clear();
 8004afe:	f7fb fddf 	bl	80006c0 <lcd_clear>
			HAL_Delay(500);
 8004b02:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004b06:	f004 fa03 	bl	8008f10 <HAL_Delay>
			NVIC_SystemReset();
 8004b0a:	f7fb fe21 	bl	8000750 <__NVIC_SystemReset>
		}
	}
}
 8004b0e:	bf00      	nop
 8004b10:	3708      	adds	r7, #8
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	20000c14 	.word	0x20000c14
 8004b1c:	40010800 	.word	0x40010800
 8004b20:	20000c68 	.word	0x20000c68
 8004b24:	2000094c 	.word	0x2000094c
 8004b28:	20000c39 	.word	0x20000c39
 8004b2c:	20000c5a 	.word	0x20000c5a
 8004b30:	0800e204 	.word	0x0800e204
 8004b34:	0800e218 	.word	0x0800e218
 8004b38:	0800e22c 	.word	0x0800e22c
 8004b3c:	0800e240 	.word	0x0800e240
 8004b40:	20000c56 	.word	0x20000c56

08004b44 <loadMenuTexts>:

void loadMenuTexts(uint8_t dilSecim) {
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b082      	sub	sp, #8
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	71fb      	strb	r3, [r7, #7]
	mainText = copyText(mainTextGN);
 8004b4e:	48a9      	ldr	r0, [pc, #676]	; (8004df4 <loadMenuTexts+0x2b0>)
 8004b50:	f7fb fe14 	bl	800077c <copyText>
 8004b54:	4603      	mov	r3, r0
 8004b56:	4aa8      	ldr	r2, [pc, #672]	; (8004df8 <loadMenuTexts+0x2b4>)
 8004b58:	6013      	str	r3, [r2, #0]
	mainText2 = copyText(mainText2GN);
 8004b5a:	48a8      	ldr	r0, [pc, #672]	; (8004dfc <loadMenuTexts+0x2b8>)
 8004b5c:	f7fb fe0e 	bl	800077c <copyText>
 8004b60:	4603      	mov	r3, r0
 8004b62:	4aa7      	ldr	r2, [pc, #668]	; (8004e00 <loadMenuTexts+0x2bc>)
 8004b64:	6013      	str	r3, [r2, #0]
	ondSafetyText = copyText(ondSafetyTextGN);
 8004b66:	48a7      	ldr	r0, [pc, #668]	; (8004e04 <loadMenuTexts+0x2c0>)
 8004b68:	f7fb fe08 	bl	800077c <copyText>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	4aa6      	ldr	r2, [pc, #664]	; (8004e08 <loadMenuTexts+0x2c4>)
 8004b70:	6013      	str	r3, [r2, #0]
	prudhomeText = copyText(prudhomeTextGN);
 8004b72:	48a6      	ldr	r0, [pc, #664]	; (8004e0c <loadMenuTexts+0x2c8>)
 8004b74:	f7fb fe02 	bl	800077c <copyText>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	4aa5      	ldr	r2, [pc, #660]	; (8004e10 <loadMenuTexts+0x2cc>)
 8004b7c:	6013      	str	r3, [r2, #0]
	pizzattoText = copyText(pizzattoTextGN);
 8004b7e:	48a5      	ldr	r0, [pc, #660]	; (8004e14 <loadMenuTexts+0x2d0>)
 8004b80:	f7fb fdfc 	bl	800077c <copyText>
 8004b84:	4603      	mov	r3, r0
 8004b86:	4aa4      	ldr	r2, [pc, #656]	; (8004e18 <loadMenuTexts+0x2d4>)
 8004b88:	6013      	str	r3, [r2, #0]
	buzzerText = copyText(buzzerTextGN);
 8004b8a:	48a4      	ldr	r0, [pc, #656]	; (8004e1c <loadMenuTexts+0x2d8>)
 8004b8c:	f7fb fdf6 	bl	800077c <copyText>
 8004b90:	4603      	mov	r3, r0
 8004b92:	4aa3      	ldr	r2, [pc, #652]	; (8004e20 <loadMenuTexts+0x2dc>)
 8004b94:	6013      	str	r3, [r2, #0]
	demoModText = copyText(demoModTextGN);
 8004b96:	48a3      	ldr	r0, [pc, #652]	; (8004e24 <loadMenuTexts+0x2e0>)
 8004b98:	f7fb fdf0 	bl	800077c <copyText>
 8004b9c:	4603      	mov	r3, r0
 8004b9e:	4aa2      	ldr	r2, [pc, #648]	; (8004e28 <loadMenuTexts+0x2e4>)
 8004ba0:	6013      	str	r3, [r2, #0]
	if(dilSecim == 0) {
 8004ba2:	79fb      	ldrb	r3, [r7, #7]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f040 82d1 	bne.w	800514c <loadMenuTexts+0x608>
		menuyeGirildiText = copyText(menuyeGirildiTextTR);
 8004baa:	48a0      	ldr	r0, [pc, #640]	; (8004e2c <loadMenuTexts+0x2e8>)
 8004bac:	f7fb fde6 	bl	800077c <copyText>
 8004bb0:	4603      	mov	r3, r0
 8004bb2:	4a9f      	ldr	r2, [pc, #636]	; (8004e30 <loadMenuTexts+0x2ec>)
 8004bb4:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextTR);
 8004bb6:	489f      	ldr	r0, [pc, #636]	; (8004e34 <loadMenuTexts+0x2f0>)
 8004bb8:	f7fb fde0 	bl	800077c <copyText>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	4a9e      	ldr	r2, [pc, #632]	; (8004e38 <loadMenuTexts+0x2f4>)
 8004bc0:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextTR);
 8004bc2:	489e      	ldr	r0, [pc, #632]	; (8004e3c <loadMenuTexts+0x2f8>)
 8004bc4:	f7fb fdda 	bl	800077c <copyText>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	4a9d      	ldr	r2, [pc, #628]	; (8004e40 <loadMenuTexts+0x2fc>)
 8004bcc:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextTR);
 8004bce:	489d      	ldr	r0, [pc, #628]	; (8004e44 <loadMenuTexts+0x300>)
 8004bd0:	f7fb fdd4 	bl	800077c <copyText>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	4a9c      	ldr	r2, [pc, #624]	; (8004e48 <loadMenuTexts+0x304>)
 8004bd8:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextTR);
 8004bda:	489c      	ldr	r0, [pc, #624]	; (8004e4c <loadMenuTexts+0x308>)
 8004bdc:	f7fb fdce 	bl	800077c <copyText>
 8004be0:	4603      	mov	r3, r0
 8004be2:	4a9b      	ldr	r2, [pc, #620]	; (8004e50 <loadMenuTexts+0x30c>)
 8004be4:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextTR);
 8004be6:	489b      	ldr	r0, [pc, #620]	; (8004e54 <loadMenuTexts+0x310>)
 8004be8:	f7fb fdc8 	bl	800077c <copyText>
 8004bec:	4603      	mov	r3, r0
 8004bee:	4a9a      	ldr	r2, [pc, #616]	; (8004e58 <loadMenuTexts+0x314>)
 8004bf0:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextTR);
 8004bf2:	489a      	ldr	r0, [pc, #616]	; (8004e5c <loadMenuTexts+0x318>)
 8004bf4:	f7fb fdc2 	bl	800077c <copyText>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	4a99      	ldr	r2, [pc, #612]	; (8004e60 <loadMenuTexts+0x31c>)
 8004bfc:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextTR);
 8004bfe:	4899      	ldr	r0, [pc, #612]	; (8004e64 <loadMenuTexts+0x320>)
 8004c00:	f7fb fdbc 	bl	800077c <copyText>
 8004c04:	4603      	mov	r3, r0
 8004c06:	4a98      	ldr	r2, [pc, #608]	; (8004e68 <loadMenuTexts+0x324>)
 8004c08:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextTR);
 8004c0a:	4898      	ldr	r0, [pc, #608]	; (8004e6c <loadMenuTexts+0x328>)
 8004c0c:	f7fb fdb6 	bl	800077c <copyText>
 8004c10:	4603      	mov	r3, r0
 8004c12:	4a97      	ldr	r2, [pc, #604]	; (8004e70 <loadMenuTexts+0x32c>)
 8004c14:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextTR);
 8004c16:	4897      	ldr	r0, [pc, #604]	; (8004e74 <loadMenuTexts+0x330>)
 8004c18:	f7fb fdb0 	bl	800077c <copyText>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	4a96      	ldr	r2, [pc, #600]	; (8004e78 <loadMenuTexts+0x334>)
 8004c20:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextTR);
 8004c22:	4896      	ldr	r0, [pc, #600]	; (8004e7c <loadMenuTexts+0x338>)
 8004c24:	f7fb fdaa 	bl	800077c <copyText>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	4a95      	ldr	r2, [pc, #596]	; (8004e80 <loadMenuTexts+0x33c>)
 8004c2c:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextTR);
 8004c2e:	4895      	ldr	r0, [pc, #596]	; (8004e84 <loadMenuTexts+0x340>)
 8004c30:	f7fb fda4 	bl	800077c <copyText>
 8004c34:	4603      	mov	r3, r0
 8004c36:	4a94      	ldr	r2, [pc, #592]	; (8004e88 <loadMenuTexts+0x344>)
 8004c38:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextTR);
 8004c3a:	4894      	ldr	r0, [pc, #592]	; (8004e8c <loadMenuTexts+0x348>)
 8004c3c:	f7fb fd9e 	bl	800077c <copyText>
 8004c40:	4603      	mov	r3, r0
 8004c42:	4a93      	ldr	r2, [pc, #588]	; (8004e90 <loadMenuTexts+0x34c>)
 8004c44:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextTR);
 8004c46:	4893      	ldr	r0, [pc, #588]	; (8004e94 <loadMenuTexts+0x350>)
 8004c48:	f7fb fd98 	bl	800077c <copyText>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	4a92      	ldr	r2, [pc, #584]	; (8004e98 <loadMenuTexts+0x354>)
 8004c50:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextTR);
 8004c52:	4892      	ldr	r0, [pc, #584]	; (8004e9c <loadMenuTexts+0x358>)
 8004c54:	f7fb fd92 	bl	800077c <copyText>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	4a91      	ldr	r2, [pc, #580]	; (8004ea0 <loadMenuTexts+0x35c>)
 8004c5c:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextTR);
 8004c5e:	4891      	ldr	r0, [pc, #580]	; (8004ea4 <loadMenuTexts+0x360>)
 8004c60:	f7fb fd8c 	bl	800077c <copyText>
 8004c64:	4603      	mov	r3, r0
 8004c66:	4a90      	ldr	r2, [pc, #576]	; (8004ea8 <loadMenuTexts+0x364>)
 8004c68:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextTR);
 8004c6a:	4890      	ldr	r0, [pc, #576]	; (8004eac <loadMenuTexts+0x368>)
 8004c6c:	f7fb fd86 	bl	800077c <copyText>
 8004c70:	4603      	mov	r3, r0
 8004c72:	4a8f      	ldr	r2, [pc, #572]	; (8004eb0 <loadMenuTexts+0x36c>)
 8004c74:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextTR);
 8004c76:	488f      	ldr	r0, [pc, #572]	; (8004eb4 <loadMenuTexts+0x370>)
 8004c78:	f7fb fd80 	bl	800077c <copyText>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	4a8e      	ldr	r2, [pc, #568]	; (8004eb8 <loadMenuTexts+0x374>)
 8004c80:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextTR);
 8004c82:	488e      	ldr	r0, [pc, #568]	; (8004ebc <loadMenuTexts+0x378>)
 8004c84:	f7fb fd7a 	bl	800077c <copyText>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	4a8d      	ldr	r2, [pc, #564]	; (8004ec0 <loadMenuTexts+0x37c>)
 8004c8c:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextTR);
 8004c8e:	488d      	ldr	r0, [pc, #564]	; (8004ec4 <loadMenuTexts+0x380>)
 8004c90:	f7fb fd74 	bl	800077c <copyText>
 8004c94:	4603      	mov	r3, r0
 8004c96:	4a8c      	ldr	r2, [pc, #560]	; (8004ec8 <loadMenuTexts+0x384>)
 8004c98:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextTR);
 8004c9a:	488c      	ldr	r0, [pc, #560]	; (8004ecc <loadMenuTexts+0x388>)
 8004c9c:	f7fb fd6e 	bl	800077c <copyText>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	4a8b      	ldr	r2, [pc, #556]	; (8004ed0 <loadMenuTexts+0x38c>)
 8004ca4:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextTR);
 8004ca6:	488b      	ldr	r0, [pc, #556]	; (8004ed4 <loadMenuTexts+0x390>)
 8004ca8:	f7fb fd68 	bl	800077c <copyText>
 8004cac:	4603      	mov	r3, r0
 8004cae:	4a8a      	ldr	r2, [pc, #552]	; (8004ed8 <loadMenuTexts+0x394>)
 8004cb0:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextTR);
 8004cb2:	488a      	ldr	r0, [pc, #552]	; (8004edc <loadMenuTexts+0x398>)
 8004cb4:	f7fb fd62 	bl	800077c <copyText>
 8004cb8:	4603      	mov	r3, r0
 8004cba:	4a89      	ldr	r2, [pc, #548]	; (8004ee0 <loadMenuTexts+0x39c>)
 8004cbc:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextTR);
 8004cbe:	4889      	ldr	r0, [pc, #548]	; (8004ee4 <loadMenuTexts+0x3a0>)
 8004cc0:	f7fb fd5c 	bl	800077c <copyText>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	4a88      	ldr	r2, [pc, #544]	; (8004ee8 <loadMenuTexts+0x3a4>)
 8004cc8:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextTR);
 8004cca:	4888      	ldr	r0, [pc, #544]	; (8004eec <loadMenuTexts+0x3a8>)
 8004ccc:	f7fb fd56 	bl	800077c <copyText>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	4a87      	ldr	r2, [pc, #540]	; (8004ef0 <loadMenuTexts+0x3ac>)
 8004cd4:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextTR);
 8004cd6:	4887      	ldr	r0, [pc, #540]	; (8004ef4 <loadMenuTexts+0x3b0>)
 8004cd8:	f7fb fd50 	bl	800077c <copyText>
 8004cdc:	4603      	mov	r3, r0
 8004cde:	4a86      	ldr	r2, [pc, #536]	; (8004ef8 <loadMenuTexts+0x3b4>)
 8004ce0:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextTR);
 8004ce2:	4886      	ldr	r0, [pc, #536]	; (8004efc <loadMenuTexts+0x3b8>)
 8004ce4:	f7fb fd4a 	bl	800077c <copyText>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	4a85      	ldr	r2, [pc, #532]	; (8004f00 <loadMenuTexts+0x3bc>)
 8004cec:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextTR);
 8004cee:	4885      	ldr	r0, [pc, #532]	; (8004f04 <loadMenuTexts+0x3c0>)
 8004cf0:	f7fb fd44 	bl	800077c <copyText>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	4a84      	ldr	r2, [pc, #528]	; (8004f08 <loadMenuTexts+0x3c4>)
 8004cf8:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextTR);
 8004cfa:	4884      	ldr	r0, [pc, #528]	; (8004f0c <loadMenuTexts+0x3c8>)
 8004cfc:	f7fb fd3e 	bl	800077c <copyText>
 8004d00:	4603      	mov	r3, r0
 8004d02:	4a83      	ldr	r2, [pc, #524]	; (8004f10 <loadMenuTexts+0x3cc>)
 8004d04:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextTR);
 8004d06:	4883      	ldr	r0, [pc, #524]	; (8004f14 <loadMenuTexts+0x3d0>)
 8004d08:	f7fb fd38 	bl	800077c <copyText>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	4a82      	ldr	r2, [pc, #520]	; (8004f18 <loadMenuTexts+0x3d4>)
 8004d10:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextTR);
 8004d12:	4882      	ldr	r0, [pc, #520]	; (8004f1c <loadMenuTexts+0x3d8>)
 8004d14:	f7fb fd32 	bl	800077c <copyText>
 8004d18:	4603      	mov	r3, r0
 8004d1a:	4a81      	ldr	r2, [pc, #516]	; (8004f20 <loadMenuTexts+0x3dc>)
 8004d1c:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextTR);
 8004d1e:	4881      	ldr	r0, [pc, #516]	; (8004f24 <loadMenuTexts+0x3e0>)
 8004d20:	f7fb fd2c 	bl	800077c <copyText>
 8004d24:	4603      	mov	r3, r0
 8004d26:	4a80      	ldr	r2, [pc, #512]	; (8004f28 <loadMenuTexts+0x3e4>)
 8004d28:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextTR);
 8004d2a:	4880      	ldr	r0, [pc, #512]	; (8004f2c <loadMenuTexts+0x3e8>)
 8004d2c:	f7fb fd26 	bl	800077c <copyText>
 8004d30:	4603      	mov	r3, r0
 8004d32:	4a7f      	ldr	r2, [pc, #508]	; (8004f30 <loadMenuTexts+0x3ec>)
 8004d34:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextTR);
 8004d36:	487f      	ldr	r0, [pc, #508]	; (8004f34 <loadMenuTexts+0x3f0>)
 8004d38:	f7fb fd20 	bl	800077c <copyText>
 8004d3c:	4603      	mov	r3, r0
 8004d3e:	4a7e      	ldr	r2, [pc, #504]	; (8004f38 <loadMenuTexts+0x3f4>)
 8004d40:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextTR);
 8004d42:	487e      	ldr	r0, [pc, #504]	; (8004f3c <loadMenuTexts+0x3f8>)
 8004d44:	f7fb fd1a 	bl	800077c <copyText>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	4a7d      	ldr	r2, [pc, #500]	; (8004f40 <loadMenuTexts+0x3fc>)
 8004d4c:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextTR);
 8004d4e:	487d      	ldr	r0, [pc, #500]	; (8004f44 <loadMenuTexts+0x400>)
 8004d50:	f7fb fd14 	bl	800077c <copyText>
 8004d54:	4603      	mov	r3, r0
 8004d56:	4a7c      	ldr	r2, [pc, #496]	; (8004f48 <loadMenuTexts+0x404>)
 8004d58:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextTR);
 8004d5a:	487c      	ldr	r0, [pc, #496]	; (8004f4c <loadMenuTexts+0x408>)
 8004d5c:	f7fb fd0e 	bl	800077c <copyText>
 8004d60:	4603      	mov	r3, r0
 8004d62:	4a7b      	ldr	r2, [pc, #492]	; (8004f50 <loadMenuTexts+0x40c>)
 8004d64:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextTR);
 8004d66:	487b      	ldr	r0, [pc, #492]	; (8004f54 <loadMenuTexts+0x410>)
 8004d68:	f7fb fd08 	bl	800077c <copyText>
 8004d6c:	4603      	mov	r3, r0
 8004d6e:	4a7a      	ldr	r2, [pc, #488]	; (8004f58 <loadMenuTexts+0x414>)
 8004d70:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextTR);
 8004d72:	487a      	ldr	r0, [pc, #488]	; (8004f5c <loadMenuTexts+0x418>)
 8004d74:	f7fb fd02 	bl	800077c <copyText>
 8004d78:	4603      	mov	r3, r0
 8004d7a:	4a79      	ldr	r2, [pc, #484]	; (8004f60 <loadMenuTexts+0x41c>)
 8004d7c:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextTR);
 8004d7e:	4879      	ldr	r0, [pc, #484]	; (8004f64 <loadMenuTexts+0x420>)
 8004d80:	f7fb fcfc 	bl	800077c <copyText>
 8004d84:	4603      	mov	r3, r0
 8004d86:	4a78      	ldr	r2, [pc, #480]	; (8004f68 <loadMenuTexts+0x424>)
 8004d88:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextTR);
 8004d8a:	4878      	ldr	r0, [pc, #480]	; (8004f6c <loadMenuTexts+0x428>)
 8004d8c:	f7fb fcf6 	bl	800077c <copyText>
 8004d90:	4603      	mov	r3, r0
 8004d92:	4a77      	ldr	r2, [pc, #476]	; (8004f70 <loadMenuTexts+0x42c>)
 8004d94:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextTR);
 8004d96:	4877      	ldr	r0, [pc, #476]	; (8004f74 <loadMenuTexts+0x430>)
 8004d98:	f7fb fcf0 	bl	800077c <copyText>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	4a76      	ldr	r2, [pc, #472]	; (8004f78 <loadMenuTexts+0x434>)
 8004da0:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextTR);
 8004da2:	4876      	ldr	r0, [pc, #472]	; (8004f7c <loadMenuTexts+0x438>)
 8004da4:	f7fb fcea 	bl	800077c <copyText>
 8004da8:	4603      	mov	r3, r0
 8004daa:	4a75      	ldr	r2, [pc, #468]	; (8004f80 <loadMenuTexts+0x43c>)
 8004dac:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextTR);
 8004dae:	4875      	ldr	r0, [pc, #468]	; (8004f84 <loadMenuTexts+0x440>)
 8004db0:	f7fb fce4 	bl	800077c <copyText>
 8004db4:	4603      	mov	r3, r0
 8004db6:	4a74      	ldr	r2, [pc, #464]	; (8004f88 <loadMenuTexts+0x444>)
 8004db8:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextTR);
 8004dba:	4874      	ldr	r0, [pc, #464]	; (8004f8c <loadMenuTexts+0x448>)
 8004dbc:	f7fb fcde 	bl	800077c <copyText>
 8004dc0:	4603      	mov	r3, r0
 8004dc2:	4a73      	ldr	r2, [pc, #460]	; (8004f90 <loadMenuTexts+0x44c>)
 8004dc4:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextTR);
 8004dc6:	4873      	ldr	r0, [pc, #460]	; (8004f94 <loadMenuTexts+0x450>)
 8004dc8:	f7fb fcd8 	bl	800077c <copyText>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	4a72      	ldr	r2, [pc, #456]	; (8004f98 <loadMenuTexts+0x454>)
 8004dd0:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextTR);
 8004dd2:	4872      	ldr	r0, [pc, #456]	; (8004f9c <loadMenuTexts+0x458>)
 8004dd4:	f7fb fcd2 	bl	800077c <copyText>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	4a71      	ldr	r2, [pc, #452]	; (8004fa0 <loadMenuTexts+0x45c>)
 8004ddc:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextTR);
 8004dde:	4871      	ldr	r0, [pc, #452]	; (8004fa4 <loadMenuTexts+0x460>)
 8004de0:	f7fb fccc 	bl	800077c <copyText>
 8004de4:	4603      	mov	r3, r0
 8004de6:	4a70      	ldr	r2, [pc, #448]	; (8004fa8 <loadMenuTexts+0x464>)
 8004de8:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextTR);
 8004dea:	4870      	ldr	r0, [pc, #448]	; (8004fac <loadMenuTexts+0x468>)
 8004dec:	f7fb fcc6 	bl	800077c <copyText>
 8004df0:	4603      	mov	r3, r0
 8004df2:	e0dd      	b.n	8004fb0 <loadMenuTexts+0x46c>
 8004df4:	20000000 	.word	0x20000000
 8004df8:	20000ca0 	.word	0x20000ca0
 8004dfc:	20000010 	.word	0x20000010
 8004e00:	20000ca4 	.word	0x20000ca4
 8004e04:	20000020 	.word	0x20000020
 8004e08:	20000cfc 	.word	0x20000cfc
 8004e0c:	20000030 	.word	0x20000030
 8004e10:	20000d2c 	.word	0x20000d2c
 8004e14:	20000040 	.word	0x20000040
 8004e18:	20000d34 	.word	0x20000d34
 8004e1c:	20000050 	.word	0x20000050
 8004e20:	20000dac 	.word	0x20000dac
 8004e24:	20000060 	.word	0x20000060
 8004e28:	20000db0 	.word	0x20000db0
 8004e2c:	20000070 	.word	0x20000070
 8004e30:	20000ca8 	.word	0x20000ca8
 8004e34:	20000080 	.word	0x20000080
 8004e38:	20000cac 	.word	0x20000cac
 8004e3c:	20000090 	.word	0x20000090
 8004e40:	20000cb0 	.word	0x20000cb0
 8004e44:	200000a0 	.word	0x200000a0
 8004e48:	20000cb4 	.word	0x20000cb4
 8004e4c:	200000b0 	.word	0x200000b0
 8004e50:	20000cb8 	.word	0x20000cb8
 8004e54:	200000c0 	.word	0x200000c0
 8004e58:	20000cbc 	.word	0x20000cbc
 8004e5c:	200000d0 	.word	0x200000d0
 8004e60:	20000cc0 	.word	0x20000cc0
 8004e64:	200000e0 	.word	0x200000e0
 8004e68:	20000cc4 	.word	0x20000cc4
 8004e6c:	200000f0 	.word	0x200000f0
 8004e70:	20000cc8 	.word	0x20000cc8
 8004e74:	20000100 	.word	0x20000100
 8004e78:	20000ccc 	.word	0x20000ccc
 8004e7c:	20000110 	.word	0x20000110
 8004e80:	20000cd0 	.word	0x20000cd0
 8004e84:	20000120 	.word	0x20000120
 8004e88:	20000cd4 	.word	0x20000cd4
 8004e8c:	20000130 	.word	0x20000130
 8004e90:	20000cd8 	.word	0x20000cd8
 8004e94:	20000140 	.word	0x20000140
 8004e98:	20000cdc 	.word	0x20000cdc
 8004e9c:	20000150 	.word	0x20000150
 8004ea0:	20000ce0 	.word	0x20000ce0
 8004ea4:	20000160 	.word	0x20000160
 8004ea8:	20000ce4 	.word	0x20000ce4
 8004eac:	20000170 	.word	0x20000170
 8004eb0:	20000ce8 	.word	0x20000ce8
 8004eb4:	20000180 	.word	0x20000180
 8004eb8:	20000cec 	.word	0x20000cec
 8004ebc:	20000190 	.word	0x20000190
 8004ec0:	20000cf0 	.word	0x20000cf0
 8004ec4:	200001a0 	.word	0x200001a0
 8004ec8:	20000cf4 	.word	0x20000cf4
 8004ecc:	200001b0 	.word	0x200001b0
 8004ed0:	20000cf8 	.word	0x20000cf8
 8004ed4:	200001c0 	.word	0x200001c0
 8004ed8:	20000d00 	.word	0x20000d00
 8004edc:	200001d0 	.word	0x200001d0
 8004ee0:	20000d04 	.word	0x20000d04
 8004ee4:	200001e0 	.word	0x200001e0
 8004ee8:	20000d08 	.word	0x20000d08
 8004eec:	200001f0 	.word	0x200001f0
 8004ef0:	20000d0c 	.word	0x20000d0c
 8004ef4:	20000200 	.word	0x20000200
 8004ef8:	20000d10 	.word	0x20000d10
 8004efc:	20000210 	.word	0x20000210
 8004f00:	20000d14 	.word	0x20000d14
 8004f04:	20000220 	.word	0x20000220
 8004f08:	20000d18 	.word	0x20000d18
 8004f0c:	20000230 	.word	0x20000230
 8004f10:	20000d1c 	.word	0x20000d1c
 8004f14:	20000240 	.word	0x20000240
 8004f18:	20000d20 	.word	0x20000d20
 8004f1c:	20000250 	.word	0x20000250
 8004f20:	20000d24 	.word	0x20000d24
 8004f24:	20000260 	.word	0x20000260
 8004f28:	20000d28 	.word	0x20000d28
 8004f2c:	20000270 	.word	0x20000270
 8004f30:	20000d30 	.word	0x20000d30
 8004f34:	20000280 	.word	0x20000280
 8004f38:	20000d38 	.word	0x20000d38
 8004f3c:	20000290 	.word	0x20000290
 8004f40:	20000d3c 	.word	0x20000d3c
 8004f44:	200002a0 	.word	0x200002a0
 8004f48:	20000d40 	.word	0x20000d40
 8004f4c:	200002b0 	.word	0x200002b0
 8004f50:	20000d44 	.word	0x20000d44
 8004f54:	200002c0 	.word	0x200002c0
 8004f58:	20000d48 	.word	0x20000d48
 8004f5c:	200002d0 	.word	0x200002d0
 8004f60:	20000d4c 	.word	0x20000d4c
 8004f64:	200002e0 	.word	0x200002e0
 8004f68:	20000d50 	.word	0x20000d50
 8004f6c:	200002f0 	.word	0x200002f0
 8004f70:	20000d54 	.word	0x20000d54
 8004f74:	20000300 	.word	0x20000300
 8004f78:	20000d58 	.word	0x20000d58
 8004f7c:	20000310 	.word	0x20000310
 8004f80:	20000d5c 	.word	0x20000d5c
 8004f84:	20000320 	.word	0x20000320
 8004f88:	20000d60 	.word	0x20000d60
 8004f8c:	20000330 	.word	0x20000330
 8004f90:	20000d64 	.word	0x20000d64
 8004f94:	20000340 	.word	0x20000340
 8004f98:	20000d68 	.word	0x20000d68
 8004f9c:	20000350 	.word	0x20000350
 8004fa0:	20000d6c 	.word	0x20000d6c
 8004fa4:	20000360 	.word	0x20000360
 8004fa8:	20000d70 	.word	0x20000d70
 8004fac:	20000370 	.word	0x20000370
 8004fb0:	4a3d      	ldr	r2, [pc, #244]	; (80050a8 <loadMenuTexts+0x564>)
 8004fb2:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextTR);
 8004fb4:	483d      	ldr	r0, [pc, #244]	; (80050ac <loadMenuTexts+0x568>)
 8004fb6:	f7fb fbe1 	bl	800077c <copyText>
 8004fba:	4603      	mov	r3, r0
 8004fbc:	4a3c      	ldr	r2, [pc, #240]	; (80050b0 <loadMenuTexts+0x56c>)
 8004fbe:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextTR);
 8004fc0:	483c      	ldr	r0, [pc, #240]	; (80050b4 <loadMenuTexts+0x570>)
 8004fc2:	f7fb fbdb 	bl	800077c <copyText>
 8004fc6:	4603      	mov	r3, r0
 8004fc8:	4a3b      	ldr	r2, [pc, #236]	; (80050b8 <loadMenuTexts+0x574>)
 8004fca:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextTR);
 8004fcc:	483b      	ldr	r0, [pc, #236]	; (80050bc <loadMenuTexts+0x578>)
 8004fce:	f7fb fbd5 	bl	800077c <copyText>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	4a3a      	ldr	r2, [pc, #232]	; (80050c0 <loadMenuTexts+0x57c>)
 8004fd6:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextTR);
 8004fd8:	483a      	ldr	r0, [pc, #232]	; (80050c4 <loadMenuTexts+0x580>)
 8004fda:	f7fb fbcf 	bl	800077c <copyText>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	4a39      	ldr	r2, [pc, #228]	; (80050c8 <loadMenuTexts+0x584>)
 8004fe2:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextTR);
 8004fe4:	4839      	ldr	r0, [pc, #228]	; (80050cc <loadMenuTexts+0x588>)
 8004fe6:	f7fb fbc9 	bl	800077c <copyText>
 8004fea:	4603      	mov	r3, r0
 8004fec:	4a38      	ldr	r2, [pc, #224]	; (80050d0 <loadMenuTexts+0x58c>)
 8004fee:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextTR);
 8004ff0:	4838      	ldr	r0, [pc, #224]	; (80050d4 <loadMenuTexts+0x590>)
 8004ff2:	f7fb fbc3 	bl	800077c <copyText>
 8004ff6:	4603      	mov	r3, r0
 8004ff8:	4a37      	ldr	r2, [pc, #220]	; (80050d8 <loadMenuTexts+0x594>)
 8004ffa:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextTR);
 8004ffc:	4837      	ldr	r0, [pc, #220]	; (80050dc <loadMenuTexts+0x598>)
 8004ffe:	f7fb fbbd 	bl	800077c <copyText>
 8005002:	4603      	mov	r3, r0
 8005004:	4a36      	ldr	r2, [pc, #216]	; (80050e0 <loadMenuTexts+0x59c>)
 8005006:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextTR);
 8005008:	4836      	ldr	r0, [pc, #216]	; (80050e4 <loadMenuTexts+0x5a0>)
 800500a:	f7fb fbb7 	bl	800077c <copyText>
 800500e:	4603      	mov	r3, r0
 8005010:	4a35      	ldr	r2, [pc, #212]	; (80050e8 <loadMenuTexts+0x5a4>)
 8005012:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextTR);
 8005014:	4835      	ldr	r0, [pc, #212]	; (80050ec <loadMenuTexts+0x5a8>)
 8005016:	f7fb fbb1 	bl	800077c <copyText>
 800501a:	4603      	mov	r3, r0
 800501c:	4a34      	ldr	r2, [pc, #208]	; (80050f0 <loadMenuTexts+0x5ac>)
 800501e:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextTR);
 8005020:	4834      	ldr	r0, [pc, #208]	; (80050f4 <loadMenuTexts+0x5b0>)
 8005022:	f7fb fbab 	bl	800077c <copyText>
 8005026:	4603      	mov	r3, r0
 8005028:	4a33      	ldr	r2, [pc, #204]	; (80050f8 <loadMenuTexts+0x5b4>)
 800502a:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextTR);
 800502c:	4833      	ldr	r0, [pc, #204]	; (80050fc <loadMenuTexts+0x5b8>)
 800502e:	f7fb fba5 	bl	800077c <copyText>
 8005032:	4603      	mov	r3, r0
 8005034:	4a32      	ldr	r2, [pc, #200]	; (8005100 <loadMenuTexts+0x5bc>)
 8005036:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextTR);
 8005038:	4832      	ldr	r0, [pc, #200]	; (8005104 <loadMenuTexts+0x5c0>)
 800503a:	f7fb fb9f 	bl	800077c <copyText>
 800503e:	4603      	mov	r3, r0
 8005040:	4a31      	ldr	r2, [pc, #196]	; (8005108 <loadMenuTexts+0x5c4>)
 8005042:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextTR);
 8005044:	4831      	ldr	r0, [pc, #196]	; (800510c <loadMenuTexts+0x5c8>)
 8005046:	f7fb fb99 	bl	800077c <copyText>
 800504a:	4603      	mov	r3, r0
 800504c:	4a30      	ldr	r2, [pc, #192]	; (8005110 <loadMenuTexts+0x5cc>)
 800504e:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextTR);
 8005050:	4830      	ldr	r0, [pc, #192]	; (8005114 <loadMenuTexts+0x5d0>)
 8005052:	f7fb fb93 	bl	800077c <copyText>
 8005056:	4603      	mov	r3, r0
 8005058:	4a2f      	ldr	r2, [pc, #188]	; (8005118 <loadMenuTexts+0x5d4>)
 800505a:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextTR);
 800505c:	482f      	ldr	r0, [pc, #188]	; (800511c <loadMenuTexts+0x5d8>)
 800505e:	f7fb fb8d 	bl	800077c <copyText>
 8005062:	4603      	mov	r3, r0
 8005064:	4a2e      	ldr	r2, [pc, #184]	; (8005120 <loadMenuTexts+0x5dc>)
 8005066:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextTR);
 8005068:	482e      	ldr	r0, [pc, #184]	; (8005124 <loadMenuTexts+0x5e0>)
 800506a:	f7fb fb87 	bl	800077c <copyText>
 800506e:	4603      	mov	r3, r0
 8005070:	4a2d      	ldr	r2, [pc, #180]	; (8005128 <loadMenuTexts+0x5e4>)
 8005072:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextTR);
 8005074:	482d      	ldr	r0, [pc, #180]	; (800512c <loadMenuTexts+0x5e8>)
 8005076:	f7fb fb81 	bl	800077c <copyText>
 800507a:	4603      	mov	r3, r0
 800507c:	4a2c      	ldr	r2, [pc, #176]	; (8005130 <loadMenuTexts+0x5ec>)
 800507e:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextTR);
 8005080:	482c      	ldr	r0, [pc, #176]	; (8005134 <loadMenuTexts+0x5f0>)
 8005082:	f7fb fb7b 	bl	800077c <copyText>
 8005086:	4603      	mov	r3, r0
 8005088:	4a2b      	ldr	r2, [pc, #172]	; (8005138 <loadMenuTexts+0x5f4>)
 800508a:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextTR);
 800508c:	482b      	ldr	r0, [pc, #172]	; (800513c <loadMenuTexts+0x5f8>)
 800508e:	f7fb fb75 	bl	800077c <copyText>
 8005092:	4603      	mov	r3, r0
 8005094:	4a2a      	ldr	r2, [pc, #168]	; (8005140 <loadMenuTexts+0x5fc>)
 8005096:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextTR);
 8005098:	482a      	ldr	r0, [pc, #168]	; (8005144 <loadMenuTexts+0x600>)
 800509a:	f7fb fb6f 	bl	800077c <copyText>
 800509e:	4603      	mov	r3, r0
 80050a0:	4a29      	ldr	r2, [pc, #164]	; (8005148 <loadMenuTexts+0x604>)
 80050a2:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
		menudenCikisText = copyText(menudenCikisTextEN);
		enteraBasinizText = copyText(enteraBasinizTextEN);
		hataKoduText = copyText(hataKoduTextEN);
	}
}
 80050a4:	e2d3      	b.n	800564e <loadMenuTexts+0xb0a>
 80050a6:	bf00      	nop
 80050a8:	20000d74 	.word	0x20000d74
 80050ac:	20000380 	.word	0x20000380
 80050b0:	20000d78 	.word	0x20000d78
 80050b4:	20000390 	.word	0x20000390
 80050b8:	20000d7c 	.word	0x20000d7c
 80050bc:	200003a0 	.word	0x200003a0
 80050c0:	20000d80 	.word	0x20000d80
 80050c4:	200003b0 	.word	0x200003b0
 80050c8:	20000d84 	.word	0x20000d84
 80050cc:	200003c0 	.word	0x200003c0
 80050d0:	20000d88 	.word	0x20000d88
 80050d4:	200003d0 	.word	0x200003d0
 80050d8:	20000d8c 	.word	0x20000d8c
 80050dc:	200003e0 	.word	0x200003e0
 80050e0:	20000d90 	.word	0x20000d90
 80050e4:	200003f0 	.word	0x200003f0
 80050e8:	20000d94 	.word	0x20000d94
 80050ec:	20000400 	.word	0x20000400
 80050f0:	20000d98 	.word	0x20000d98
 80050f4:	20000410 	.word	0x20000410
 80050f8:	20000d9c 	.word	0x20000d9c
 80050fc:	20000420 	.word	0x20000420
 8005100:	20000da0 	.word	0x20000da0
 8005104:	20000430 	.word	0x20000430
 8005108:	20000da4 	.word	0x20000da4
 800510c:	20000440 	.word	0x20000440
 8005110:	20000da8 	.word	0x20000da8
 8005114:	20000450 	.word	0x20000450
 8005118:	20000db4 	.word	0x20000db4
 800511c:	20000460 	.word	0x20000460
 8005120:	20000db8 	.word	0x20000db8
 8005124:	20000470 	.word	0x20000470
 8005128:	20000dbc 	.word	0x20000dbc
 800512c:	20000480 	.word	0x20000480
 8005130:	20000dc0 	.word	0x20000dc0
 8005134:	20000490 	.word	0x20000490
 8005138:	20000dc4 	.word	0x20000dc4
 800513c:	200004a0 	.word	0x200004a0
 8005140:	20000dc8 	.word	0x20000dc8
 8005144:	200004b0 	.word	0x200004b0
 8005148:	20000dcc 	.word	0x20000dcc
		menuyeGirildiText = copyText(menuyeGirildiTextEN);
 800514c:	48a9      	ldr	r0, [pc, #676]	; (80053f4 <loadMenuTexts+0x8b0>)
 800514e:	f7fb fb15 	bl	800077c <copyText>
 8005152:	4603      	mov	r3, r0
 8005154:	4aa8      	ldr	r2, [pc, #672]	; (80053f8 <loadMenuTexts+0x8b4>)
 8005156:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextEN);
 8005158:	48a8      	ldr	r0, [pc, #672]	; (80053fc <loadMenuTexts+0x8b8>)
 800515a:	f7fb fb0f 	bl	800077c <copyText>
 800515e:	4603      	mov	r3, r0
 8005160:	4aa7      	ldr	r2, [pc, #668]	; (8005400 <loadMenuTexts+0x8bc>)
 8005162:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextEN);
 8005164:	48a7      	ldr	r0, [pc, #668]	; (8005404 <loadMenuTexts+0x8c0>)
 8005166:	f7fb fb09 	bl	800077c <copyText>
 800516a:	4603      	mov	r3, r0
 800516c:	4aa6      	ldr	r2, [pc, #664]	; (8005408 <loadMenuTexts+0x8c4>)
 800516e:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextEN);
 8005170:	48a6      	ldr	r0, [pc, #664]	; (800540c <loadMenuTexts+0x8c8>)
 8005172:	f7fb fb03 	bl	800077c <copyText>
 8005176:	4603      	mov	r3, r0
 8005178:	4aa5      	ldr	r2, [pc, #660]	; (8005410 <loadMenuTexts+0x8cc>)
 800517a:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextEN);
 800517c:	48a5      	ldr	r0, [pc, #660]	; (8005414 <loadMenuTexts+0x8d0>)
 800517e:	f7fb fafd 	bl	800077c <copyText>
 8005182:	4603      	mov	r3, r0
 8005184:	4aa4      	ldr	r2, [pc, #656]	; (8005418 <loadMenuTexts+0x8d4>)
 8005186:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextEN);
 8005188:	48a4      	ldr	r0, [pc, #656]	; (800541c <loadMenuTexts+0x8d8>)
 800518a:	f7fb faf7 	bl	800077c <copyText>
 800518e:	4603      	mov	r3, r0
 8005190:	4aa3      	ldr	r2, [pc, #652]	; (8005420 <loadMenuTexts+0x8dc>)
 8005192:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextEN);
 8005194:	48a3      	ldr	r0, [pc, #652]	; (8005424 <loadMenuTexts+0x8e0>)
 8005196:	f7fb faf1 	bl	800077c <copyText>
 800519a:	4603      	mov	r3, r0
 800519c:	4aa2      	ldr	r2, [pc, #648]	; (8005428 <loadMenuTexts+0x8e4>)
 800519e:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextEN);
 80051a0:	48a2      	ldr	r0, [pc, #648]	; (800542c <loadMenuTexts+0x8e8>)
 80051a2:	f7fb faeb 	bl	800077c <copyText>
 80051a6:	4603      	mov	r3, r0
 80051a8:	4aa1      	ldr	r2, [pc, #644]	; (8005430 <loadMenuTexts+0x8ec>)
 80051aa:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextEN);
 80051ac:	48a1      	ldr	r0, [pc, #644]	; (8005434 <loadMenuTexts+0x8f0>)
 80051ae:	f7fb fae5 	bl	800077c <copyText>
 80051b2:	4603      	mov	r3, r0
 80051b4:	4aa0      	ldr	r2, [pc, #640]	; (8005438 <loadMenuTexts+0x8f4>)
 80051b6:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextEN);
 80051b8:	48a0      	ldr	r0, [pc, #640]	; (800543c <loadMenuTexts+0x8f8>)
 80051ba:	f7fb fadf 	bl	800077c <copyText>
 80051be:	4603      	mov	r3, r0
 80051c0:	4a9f      	ldr	r2, [pc, #636]	; (8005440 <loadMenuTexts+0x8fc>)
 80051c2:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextEN);
 80051c4:	489f      	ldr	r0, [pc, #636]	; (8005444 <loadMenuTexts+0x900>)
 80051c6:	f7fb fad9 	bl	800077c <copyText>
 80051ca:	4603      	mov	r3, r0
 80051cc:	4a9e      	ldr	r2, [pc, #632]	; (8005448 <loadMenuTexts+0x904>)
 80051ce:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextEN);
 80051d0:	489e      	ldr	r0, [pc, #632]	; (800544c <loadMenuTexts+0x908>)
 80051d2:	f7fb fad3 	bl	800077c <copyText>
 80051d6:	4603      	mov	r3, r0
 80051d8:	4a9d      	ldr	r2, [pc, #628]	; (8005450 <loadMenuTexts+0x90c>)
 80051da:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextEN);
 80051dc:	489d      	ldr	r0, [pc, #628]	; (8005454 <loadMenuTexts+0x910>)
 80051de:	f7fb facd 	bl	800077c <copyText>
 80051e2:	4603      	mov	r3, r0
 80051e4:	4a9c      	ldr	r2, [pc, #624]	; (8005458 <loadMenuTexts+0x914>)
 80051e6:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextEN);
 80051e8:	489c      	ldr	r0, [pc, #624]	; (800545c <loadMenuTexts+0x918>)
 80051ea:	f7fb fac7 	bl	800077c <copyText>
 80051ee:	4603      	mov	r3, r0
 80051f0:	4a9b      	ldr	r2, [pc, #620]	; (8005460 <loadMenuTexts+0x91c>)
 80051f2:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextEN);
 80051f4:	489b      	ldr	r0, [pc, #620]	; (8005464 <loadMenuTexts+0x920>)
 80051f6:	f7fb fac1 	bl	800077c <copyText>
 80051fa:	4603      	mov	r3, r0
 80051fc:	4a9a      	ldr	r2, [pc, #616]	; (8005468 <loadMenuTexts+0x924>)
 80051fe:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextEN);
 8005200:	489a      	ldr	r0, [pc, #616]	; (800546c <loadMenuTexts+0x928>)
 8005202:	f7fb fabb 	bl	800077c <copyText>
 8005206:	4603      	mov	r3, r0
 8005208:	4a99      	ldr	r2, [pc, #612]	; (8005470 <loadMenuTexts+0x92c>)
 800520a:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextEN);
 800520c:	4899      	ldr	r0, [pc, #612]	; (8005474 <loadMenuTexts+0x930>)
 800520e:	f7fb fab5 	bl	800077c <copyText>
 8005212:	4603      	mov	r3, r0
 8005214:	4a98      	ldr	r2, [pc, #608]	; (8005478 <loadMenuTexts+0x934>)
 8005216:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextEN);
 8005218:	4898      	ldr	r0, [pc, #608]	; (800547c <loadMenuTexts+0x938>)
 800521a:	f7fb faaf 	bl	800077c <copyText>
 800521e:	4603      	mov	r3, r0
 8005220:	4a97      	ldr	r2, [pc, #604]	; (8005480 <loadMenuTexts+0x93c>)
 8005222:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextEN);
 8005224:	4897      	ldr	r0, [pc, #604]	; (8005484 <loadMenuTexts+0x940>)
 8005226:	f7fb faa9 	bl	800077c <copyText>
 800522a:	4603      	mov	r3, r0
 800522c:	4a96      	ldr	r2, [pc, #600]	; (8005488 <loadMenuTexts+0x944>)
 800522e:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextEN);
 8005230:	4896      	ldr	r0, [pc, #600]	; (800548c <loadMenuTexts+0x948>)
 8005232:	f7fb faa3 	bl	800077c <copyText>
 8005236:	4603      	mov	r3, r0
 8005238:	4a95      	ldr	r2, [pc, #596]	; (8005490 <loadMenuTexts+0x94c>)
 800523a:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextEN);
 800523c:	4895      	ldr	r0, [pc, #596]	; (8005494 <loadMenuTexts+0x950>)
 800523e:	f7fb fa9d 	bl	800077c <copyText>
 8005242:	4603      	mov	r3, r0
 8005244:	4a94      	ldr	r2, [pc, #592]	; (8005498 <loadMenuTexts+0x954>)
 8005246:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextEN);
 8005248:	4894      	ldr	r0, [pc, #592]	; (800549c <loadMenuTexts+0x958>)
 800524a:	f7fb fa97 	bl	800077c <copyText>
 800524e:	4603      	mov	r3, r0
 8005250:	4a93      	ldr	r2, [pc, #588]	; (80054a0 <loadMenuTexts+0x95c>)
 8005252:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextEN);
 8005254:	4893      	ldr	r0, [pc, #588]	; (80054a4 <loadMenuTexts+0x960>)
 8005256:	f7fb fa91 	bl	800077c <copyText>
 800525a:	4603      	mov	r3, r0
 800525c:	4a92      	ldr	r2, [pc, #584]	; (80054a8 <loadMenuTexts+0x964>)
 800525e:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextEN);
 8005260:	4892      	ldr	r0, [pc, #584]	; (80054ac <loadMenuTexts+0x968>)
 8005262:	f7fb fa8b 	bl	800077c <copyText>
 8005266:	4603      	mov	r3, r0
 8005268:	4a91      	ldr	r2, [pc, #580]	; (80054b0 <loadMenuTexts+0x96c>)
 800526a:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextEN);
 800526c:	4891      	ldr	r0, [pc, #580]	; (80054b4 <loadMenuTexts+0x970>)
 800526e:	f7fb fa85 	bl	800077c <copyText>
 8005272:	4603      	mov	r3, r0
 8005274:	4a90      	ldr	r2, [pc, #576]	; (80054b8 <loadMenuTexts+0x974>)
 8005276:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextEN);
 8005278:	4890      	ldr	r0, [pc, #576]	; (80054bc <loadMenuTexts+0x978>)
 800527a:	f7fb fa7f 	bl	800077c <copyText>
 800527e:	4603      	mov	r3, r0
 8005280:	4a8f      	ldr	r2, [pc, #572]	; (80054c0 <loadMenuTexts+0x97c>)
 8005282:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextEN);
 8005284:	488f      	ldr	r0, [pc, #572]	; (80054c4 <loadMenuTexts+0x980>)
 8005286:	f7fb fa79 	bl	800077c <copyText>
 800528a:	4603      	mov	r3, r0
 800528c:	4a8e      	ldr	r2, [pc, #568]	; (80054c8 <loadMenuTexts+0x984>)
 800528e:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextEN);
 8005290:	488e      	ldr	r0, [pc, #568]	; (80054cc <loadMenuTexts+0x988>)
 8005292:	f7fb fa73 	bl	800077c <copyText>
 8005296:	4603      	mov	r3, r0
 8005298:	4a8d      	ldr	r2, [pc, #564]	; (80054d0 <loadMenuTexts+0x98c>)
 800529a:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextEN);
 800529c:	488d      	ldr	r0, [pc, #564]	; (80054d4 <loadMenuTexts+0x990>)
 800529e:	f7fb fa6d 	bl	800077c <copyText>
 80052a2:	4603      	mov	r3, r0
 80052a4:	4a8c      	ldr	r2, [pc, #560]	; (80054d8 <loadMenuTexts+0x994>)
 80052a6:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextEN);
 80052a8:	488c      	ldr	r0, [pc, #560]	; (80054dc <loadMenuTexts+0x998>)
 80052aa:	f7fb fa67 	bl	800077c <copyText>
 80052ae:	4603      	mov	r3, r0
 80052b0:	4a8b      	ldr	r2, [pc, #556]	; (80054e0 <loadMenuTexts+0x99c>)
 80052b2:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextEN);
 80052b4:	488b      	ldr	r0, [pc, #556]	; (80054e4 <loadMenuTexts+0x9a0>)
 80052b6:	f7fb fa61 	bl	800077c <copyText>
 80052ba:	4603      	mov	r3, r0
 80052bc:	4a8a      	ldr	r2, [pc, #552]	; (80054e8 <loadMenuTexts+0x9a4>)
 80052be:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextEN);
 80052c0:	488a      	ldr	r0, [pc, #552]	; (80054ec <loadMenuTexts+0x9a8>)
 80052c2:	f7fb fa5b 	bl	800077c <copyText>
 80052c6:	4603      	mov	r3, r0
 80052c8:	4a89      	ldr	r2, [pc, #548]	; (80054f0 <loadMenuTexts+0x9ac>)
 80052ca:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextEN);
 80052cc:	4889      	ldr	r0, [pc, #548]	; (80054f4 <loadMenuTexts+0x9b0>)
 80052ce:	f7fb fa55 	bl	800077c <copyText>
 80052d2:	4603      	mov	r3, r0
 80052d4:	4a88      	ldr	r2, [pc, #544]	; (80054f8 <loadMenuTexts+0x9b4>)
 80052d6:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextEN);
 80052d8:	4888      	ldr	r0, [pc, #544]	; (80054fc <loadMenuTexts+0x9b8>)
 80052da:	f7fb fa4f 	bl	800077c <copyText>
 80052de:	4603      	mov	r3, r0
 80052e0:	4a87      	ldr	r2, [pc, #540]	; (8005500 <loadMenuTexts+0x9bc>)
 80052e2:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextEN);
 80052e4:	4887      	ldr	r0, [pc, #540]	; (8005504 <loadMenuTexts+0x9c0>)
 80052e6:	f7fb fa49 	bl	800077c <copyText>
 80052ea:	4603      	mov	r3, r0
 80052ec:	4a86      	ldr	r2, [pc, #536]	; (8005508 <loadMenuTexts+0x9c4>)
 80052ee:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextEN);
 80052f0:	4886      	ldr	r0, [pc, #536]	; (800550c <loadMenuTexts+0x9c8>)
 80052f2:	f7fb fa43 	bl	800077c <copyText>
 80052f6:	4603      	mov	r3, r0
 80052f8:	4a85      	ldr	r2, [pc, #532]	; (8005510 <loadMenuTexts+0x9cc>)
 80052fa:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextEN);
 80052fc:	4885      	ldr	r0, [pc, #532]	; (8005514 <loadMenuTexts+0x9d0>)
 80052fe:	f7fb fa3d 	bl	800077c <copyText>
 8005302:	4603      	mov	r3, r0
 8005304:	4a84      	ldr	r2, [pc, #528]	; (8005518 <loadMenuTexts+0x9d4>)
 8005306:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextEN);
 8005308:	4884      	ldr	r0, [pc, #528]	; (800551c <loadMenuTexts+0x9d8>)
 800530a:	f7fb fa37 	bl	800077c <copyText>
 800530e:	4603      	mov	r3, r0
 8005310:	4a83      	ldr	r2, [pc, #524]	; (8005520 <loadMenuTexts+0x9dc>)
 8005312:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextEN);
 8005314:	4883      	ldr	r0, [pc, #524]	; (8005524 <loadMenuTexts+0x9e0>)
 8005316:	f7fb fa31 	bl	800077c <copyText>
 800531a:	4603      	mov	r3, r0
 800531c:	4a82      	ldr	r2, [pc, #520]	; (8005528 <loadMenuTexts+0x9e4>)
 800531e:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextEN);
 8005320:	4882      	ldr	r0, [pc, #520]	; (800552c <loadMenuTexts+0x9e8>)
 8005322:	f7fb fa2b 	bl	800077c <copyText>
 8005326:	4603      	mov	r3, r0
 8005328:	4a81      	ldr	r2, [pc, #516]	; (8005530 <loadMenuTexts+0x9ec>)
 800532a:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextEN);
 800532c:	4881      	ldr	r0, [pc, #516]	; (8005534 <loadMenuTexts+0x9f0>)
 800532e:	f7fb fa25 	bl	800077c <copyText>
 8005332:	4603      	mov	r3, r0
 8005334:	4a80      	ldr	r2, [pc, #512]	; (8005538 <loadMenuTexts+0x9f4>)
 8005336:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextEN);
 8005338:	4880      	ldr	r0, [pc, #512]	; (800553c <loadMenuTexts+0x9f8>)
 800533a:	f7fb fa1f 	bl	800077c <copyText>
 800533e:	4603      	mov	r3, r0
 8005340:	4a7f      	ldr	r2, [pc, #508]	; (8005540 <loadMenuTexts+0x9fc>)
 8005342:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextEN);
 8005344:	487f      	ldr	r0, [pc, #508]	; (8005544 <loadMenuTexts+0xa00>)
 8005346:	f7fb fa19 	bl	800077c <copyText>
 800534a:	4603      	mov	r3, r0
 800534c:	4a7e      	ldr	r2, [pc, #504]	; (8005548 <loadMenuTexts+0xa04>)
 800534e:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextEN);
 8005350:	487e      	ldr	r0, [pc, #504]	; (800554c <loadMenuTexts+0xa08>)
 8005352:	f7fb fa13 	bl	800077c <copyText>
 8005356:	4603      	mov	r3, r0
 8005358:	4a7d      	ldr	r2, [pc, #500]	; (8005550 <loadMenuTexts+0xa0c>)
 800535a:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextEN);
 800535c:	487d      	ldr	r0, [pc, #500]	; (8005554 <loadMenuTexts+0xa10>)
 800535e:	f7fb fa0d 	bl	800077c <copyText>
 8005362:	4603      	mov	r3, r0
 8005364:	4a7c      	ldr	r2, [pc, #496]	; (8005558 <loadMenuTexts+0xa14>)
 8005366:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextEN);
 8005368:	487c      	ldr	r0, [pc, #496]	; (800555c <loadMenuTexts+0xa18>)
 800536a:	f7fb fa07 	bl	800077c <copyText>
 800536e:	4603      	mov	r3, r0
 8005370:	4a7b      	ldr	r2, [pc, #492]	; (8005560 <loadMenuTexts+0xa1c>)
 8005372:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextEN);
 8005374:	487b      	ldr	r0, [pc, #492]	; (8005564 <loadMenuTexts+0xa20>)
 8005376:	f7fb fa01 	bl	800077c <copyText>
 800537a:	4603      	mov	r3, r0
 800537c:	4a7a      	ldr	r2, [pc, #488]	; (8005568 <loadMenuTexts+0xa24>)
 800537e:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextEN);
 8005380:	487a      	ldr	r0, [pc, #488]	; (800556c <loadMenuTexts+0xa28>)
 8005382:	f7fb f9fb 	bl	800077c <copyText>
 8005386:	4603      	mov	r3, r0
 8005388:	4a79      	ldr	r2, [pc, #484]	; (8005570 <loadMenuTexts+0xa2c>)
 800538a:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextEN);
 800538c:	4879      	ldr	r0, [pc, #484]	; (8005574 <loadMenuTexts+0xa30>)
 800538e:	f7fb f9f5 	bl	800077c <copyText>
 8005392:	4603      	mov	r3, r0
 8005394:	4a78      	ldr	r2, [pc, #480]	; (8005578 <loadMenuTexts+0xa34>)
 8005396:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextEN);
 8005398:	4878      	ldr	r0, [pc, #480]	; (800557c <loadMenuTexts+0xa38>)
 800539a:	f7fb f9ef 	bl	800077c <copyText>
 800539e:	4603      	mov	r3, r0
 80053a0:	4a77      	ldr	r2, [pc, #476]	; (8005580 <loadMenuTexts+0xa3c>)
 80053a2:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextEN);
 80053a4:	4877      	ldr	r0, [pc, #476]	; (8005584 <loadMenuTexts+0xa40>)
 80053a6:	f7fb f9e9 	bl	800077c <copyText>
 80053aa:	4603      	mov	r3, r0
 80053ac:	4a76      	ldr	r2, [pc, #472]	; (8005588 <loadMenuTexts+0xa44>)
 80053ae:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextEN);
 80053b0:	4876      	ldr	r0, [pc, #472]	; (800558c <loadMenuTexts+0xa48>)
 80053b2:	f7fb f9e3 	bl	800077c <copyText>
 80053b6:	4603      	mov	r3, r0
 80053b8:	4a75      	ldr	r2, [pc, #468]	; (8005590 <loadMenuTexts+0xa4c>)
 80053ba:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextEN);
 80053bc:	4875      	ldr	r0, [pc, #468]	; (8005594 <loadMenuTexts+0xa50>)
 80053be:	f7fb f9dd 	bl	800077c <copyText>
 80053c2:	4603      	mov	r3, r0
 80053c4:	4a74      	ldr	r2, [pc, #464]	; (8005598 <loadMenuTexts+0xa54>)
 80053c6:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextEN);
 80053c8:	4874      	ldr	r0, [pc, #464]	; (800559c <loadMenuTexts+0xa58>)
 80053ca:	f7fb f9d7 	bl	800077c <copyText>
 80053ce:	4603      	mov	r3, r0
 80053d0:	4a73      	ldr	r2, [pc, #460]	; (80055a0 <loadMenuTexts+0xa5c>)
 80053d2:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextEN);
 80053d4:	4873      	ldr	r0, [pc, #460]	; (80055a4 <loadMenuTexts+0xa60>)
 80053d6:	f7fb f9d1 	bl	800077c <copyText>
 80053da:	4603      	mov	r3, r0
 80053dc:	4a72      	ldr	r2, [pc, #456]	; (80055a8 <loadMenuTexts+0xa64>)
 80053de:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextEN);
 80053e0:	4872      	ldr	r0, [pc, #456]	; (80055ac <loadMenuTexts+0xa68>)
 80053e2:	f7fb f9cb 	bl	800077c <copyText>
 80053e6:	4603      	mov	r3, r0
 80053e8:	4a71      	ldr	r2, [pc, #452]	; (80055b0 <loadMenuTexts+0xa6c>)
 80053ea:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextEN);
 80053ec:	4871      	ldr	r0, [pc, #452]	; (80055b4 <loadMenuTexts+0xa70>)
 80053ee:	f7fb f9c5 	bl	800077c <copyText>
 80053f2:	e0e1      	b.n	80055b8 <loadMenuTexts+0xa74>
 80053f4:	200004c0 	.word	0x200004c0
 80053f8:	20000ca8 	.word	0x20000ca8
 80053fc:	200004d0 	.word	0x200004d0
 8005400:	20000cac 	.word	0x20000cac
 8005404:	200004e0 	.word	0x200004e0
 8005408:	20000cb0 	.word	0x20000cb0
 800540c:	200004f0 	.word	0x200004f0
 8005410:	20000cb4 	.word	0x20000cb4
 8005414:	20000500 	.word	0x20000500
 8005418:	20000cb8 	.word	0x20000cb8
 800541c:	20000510 	.word	0x20000510
 8005420:	20000cbc 	.word	0x20000cbc
 8005424:	20000520 	.word	0x20000520
 8005428:	20000cc0 	.word	0x20000cc0
 800542c:	20000530 	.word	0x20000530
 8005430:	20000cc4 	.word	0x20000cc4
 8005434:	20000540 	.word	0x20000540
 8005438:	20000cc8 	.word	0x20000cc8
 800543c:	20000550 	.word	0x20000550
 8005440:	20000ccc 	.word	0x20000ccc
 8005444:	20000560 	.word	0x20000560
 8005448:	20000cd0 	.word	0x20000cd0
 800544c:	20000570 	.word	0x20000570
 8005450:	20000cd4 	.word	0x20000cd4
 8005454:	20000580 	.word	0x20000580
 8005458:	20000cd8 	.word	0x20000cd8
 800545c:	20000590 	.word	0x20000590
 8005460:	20000cdc 	.word	0x20000cdc
 8005464:	200005a0 	.word	0x200005a0
 8005468:	20000ce0 	.word	0x20000ce0
 800546c:	200005b0 	.word	0x200005b0
 8005470:	20000ce4 	.word	0x20000ce4
 8005474:	200005c0 	.word	0x200005c0
 8005478:	20000ce8 	.word	0x20000ce8
 800547c:	200005d0 	.word	0x200005d0
 8005480:	20000cec 	.word	0x20000cec
 8005484:	200005e0 	.word	0x200005e0
 8005488:	20000cf0 	.word	0x20000cf0
 800548c:	200005f0 	.word	0x200005f0
 8005490:	20000cf4 	.word	0x20000cf4
 8005494:	20000600 	.word	0x20000600
 8005498:	20000cf8 	.word	0x20000cf8
 800549c:	20000610 	.word	0x20000610
 80054a0:	20000d00 	.word	0x20000d00
 80054a4:	20000620 	.word	0x20000620
 80054a8:	20000d04 	.word	0x20000d04
 80054ac:	20000630 	.word	0x20000630
 80054b0:	20000d08 	.word	0x20000d08
 80054b4:	20000640 	.word	0x20000640
 80054b8:	20000d0c 	.word	0x20000d0c
 80054bc:	20000650 	.word	0x20000650
 80054c0:	20000d10 	.word	0x20000d10
 80054c4:	20000660 	.word	0x20000660
 80054c8:	20000d14 	.word	0x20000d14
 80054cc:	20000670 	.word	0x20000670
 80054d0:	20000d18 	.word	0x20000d18
 80054d4:	20000680 	.word	0x20000680
 80054d8:	20000d1c 	.word	0x20000d1c
 80054dc:	20000690 	.word	0x20000690
 80054e0:	20000d20 	.word	0x20000d20
 80054e4:	200006a0 	.word	0x200006a0
 80054e8:	20000d24 	.word	0x20000d24
 80054ec:	200006b0 	.word	0x200006b0
 80054f0:	20000d28 	.word	0x20000d28
 80054f4:	200006c0 	.word	0x200006c0
 80054f8:	20000d30 	.word	0x20000d30
 80054fc:	200006d0 	.word	0x200006d0
 8005500:	20000d38 	.word	0x20000d38
 8005504:	200006e0 	.word	0x200006e0
 8005508:	20000d3c 	.word	0x20000d3c
 800550c:	200006f0 	.word	0x200006f0
 8005510:	20000d40 	.word	0x20000d40
 8005514:	20000700 	.word	0x20000700
 8005518:	20000d44 	.word	0x20000d44
 800551c:	20000710 	.word	0x20000710
 8005520:	20000d48 	.word	0x20000d48
 8005524:	20000720 	.word	0x20000720
 8005528:	20000d4c 	.word	0x20000d4c
 800552c:	20000730 	.word	0x20000730
 8005530:	20000d50 	.word	0x20000d50
 8005534:	20000740 	.word	0x20000740
 8005538:	20000d54 	.word	0x20000d54
 800553c:	20000750 	.word	0x20000750
 8005540:	20000d58 	.word	0x20000d58
 8005544:	20000760 	.word	0x20000760
 8005548:	20000d5c 	.word	0x20000d5c
 800554c:	20000770 	.word	0x20000770
 8005550:	20000d60 	.word	0x20000d60
 8005554:	20000780 	.word	0x20000780
 8005558:	20000d64 	.word	0x20000d64
 800555c:	20000790 	.word	0x20000790
 8005560:	20000d68 	.word	0x20000d68
 8005564:	200007a0 	.word	0x200007a0
 8005568:	20000d6c 	.word	0x20000d6c
 800556c:	200007b0 	.word	0x200007b0
 8005570:	20000d70 	.word	0x20000d70
 8005574:	200007c0 	.word	0x200007c0
 8005578:	20000d74 	.word	0x20000d74
 800557c:	200007d0 	.word	0x200007d0
 8005580:	20000d78 	.word	0x20000d78
 8005584:	200007e0 	.word	0x200007e0
 8005588:	20000d7c 	.word	0x20000d7c
 800558c:	200007f0 	.word	0x200007f0
 8005590:	20000d80 	.word	0x20000d80
 8005594:	20000800 	.word	0x20000800
 8005598:	20000d84 	.word	0x20000d84
 800559c:	20000810 	.word	0x20000810
 80055a0:	20000d88 	.word	0x20000d88
 80055a4:	20000820 	.word	0x20000820
 80055a8:	20000d8c 	.word	0x20000d8c
 80055ac:	20000830 	.word	0x20000830
 80055b0:	20000d90 	.word	0x20000d90
 80055b4:	20000840 	.word	0x20000840
 80055b8:	4603      	mov	r3, r0
 80055ba:	4a27      	ldr	r2, [pc, #156]	; (8005658 <loadMenuTexts+0xb14>)
 80055bc:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextEN);
 80055be:	4827      	ldr	r0, [pc, #156]	; (800565c <loadMenuTexts+0xb18>)
 80055c0:	f7fb f8dc 	bl	800077c <copyText>
 80055c4:	4603      	mov	r3, r0
 80055c6:	4a26      	ldr	r2, [pc, #152]	; (8005660 <loadMenuTexts+0xb1c>)
 80055c8:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextEN);
 80055ca:	4826      	ldr	r0, [pc, #152]	; (8005664 <loadMenuTexts+0xb20>)
 80055cc:	f7fb f8d6 	bl	800077c <copyText>
 80055d0:	4603      	mov	r3, r0
 80055d2:	4a25      	ldr	r2, [pc, #148]	; (8005668 <loadMenuTexts+0xb24>)
 80055d4:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextEN);
 80055d6:	4825      	ldr	r0, [pc, #148]	; (800566c <loadMenuTexts+0xb28>)
 80055d8:	f7fb f8d0 	bl	800077c <copyText>
 80055dc:	4603      	mov	r3, r0
 80055de:	4a24      	ldr	r2, [pc, #144]	; (8005670 <loadMenuTexts+0xb2c>)
 80055e0:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextEN);
 80055e2:	4824      	ldr	r0, [pc, #144]	; (8005674 <loadMenuTexts+0xb30>)
 80055e4:	f7fb f8ca 	bl	800077c <copyText>
 80055e8:	4603      	mov	r3, r0
 80055ea:	4a23      	ldr	r2, [pc, #140]	; (8005678 <loadMenuTexts+0xb34>)
 80055ec:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextEN);
 80055ee:	4823      	ldr	r0, [pc, #140]	; (800567c <loadMenuTexts+0xb38>)
 80055f0:	f7fb f8c4 	bl	800077c <copyText>
 80055f4:	4603      	mov	r3, r0
 80055f6:	4a22      	ldr	r2, [pc, #136]	; (8005680 <loadMenuTexts+0xb3c>)
 80055f8:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextEN);
 80055fa:	4822      	ldr	r0, [pc, #136]	; (8005684 <loadMenuTexts+0xb40>)
 80055fc:	f7fb f8be 	bl	800077c <copyText>
 8005600:	4603      	mov	r3, r0
 8005602:	4a21      	ldr	r2, [pc, #132]	; (8005688 <loadMenuTexts+0xb44>)
 8005604:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextEN);
 8005606:	4821      	ldr	r0, [pc, #132]	; (800568c <loadMenuTexts+0xb48>)
 8005608:	f7fb f8b8 	bl	800077c <copyText>
 800560c:	4603      	mov	r3, r0
 800560e:	4a20      	ldr	r2, [pc, #128]	; (8005690 <loadMenuTexts+0xb4c>)
 8005610:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextEN);
 8005612:	4820      	ldr	r0, [pc, #128]	; (8005694 <loadMenuTexts+0xb50>)
 8005614:	f7fb f8b2 	bl	800077c <copyText>
 8005618:	4603      	mov	r3, r0
 800561a:	4a1f      	ldr	r2, [pc, #124]	; (8005698 <loadMenuTexts+0xb54>)
 800561c:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
 800561e:	481f      	ldr	r0, [pc, #124]	; (800569c <loadMenuTexts+0xb58>)
 8005620:	f7fb f8ac 	bl	800077c <copyText>
 8005624:	4603      	mov	r3, r0
 8005626:	4a1e      	ldr	r2, [pc, #120]	; (80056a0 <loadMenuTexts+0xb5c>)
 8005628:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextEN);
 800562a:	481e      	ldr	r0, [pc, #120]	; (80056a4 <loadMenuTexts+0xb60>)
 800562c:	f7fb f8a6 	bl	800077c <copyText>
 8005630:	4603      	mov	r3, r0
 8005632:	4a1d      	ldr	r2, [pc, #116]	; (80056a8 <loadMenuTexts+0xb64>)
 8005634:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextEN);
 8005636:	481d      	ldr	r0, [pc, #116]	; (80056ac <loadMenuTexts+0xb68>)
 8005638:	f7fb f8a0 	bl	800077c <copyText>
 800563c:	4603      	mov	r3, r0
 800563e:	4a1c      	ldr	r2, [pc, #112]	; (80056b0 <loadMenuTexts+0xb6c>)
 8005640:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextEN);
 8005642:	481c      	ldr	r0, [pc, #112]	; (80056b4 <loadMenuTexts+0xb70>)
 8005644:	f7fb f89a 	bl	800077c <copyText>
 8005648:	4603      	mov	r3, r0
 800564a:	4a1b      	ldr	r2, [pc, #108]	; (80056b8 <loadMenuTexts+0xb74>)
 800564c:	6013      	str	r3, [r2, #0]
}
 800564e:	bf00      	nop
 8005650:	3708      	adds	r7, #8
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}
 8005656:	bf00      	nop
 8005658:	20000d94 	.word	0x20000d94
 800565c:	20000850 	.word	0x20000850
 8005660:	20000d98 	.word	0x20000d98
 8005664:	20000860 	.word	0x20000860
 8005668:	20000d9c 	.word	0x20000d9c
 800566c:	20000870 	.word	0x20000870
 8005670:	20000da0 	.word	0x20000da0
 8005674:	20000880 	.word	0x20000880
 8005678:	20000da4 	.word	0x20000da4
 800567c:	20000890 	.word	0x20000890
 8005680:	20000da8 	.word	0x20000da8
 8005684:	200008a0 	.word	0x200008a0
 8005688:	20000db4 	.word	0x20000db4
 800568c:	200008b0 	.word	0x200008b0
 8005690:	20000db8 	.word	0x20000db8
 8005694:	200008c0 	.word	0x200008c0
 8005698:	20000dbc 	.word	0x20000dbc
 800569c:	200008d0 	.word	0x200008d0
 80056a0:	20000dc0 	.word	0x20000dc0
 80056a4:	200008e0 	.word	0x200008e0
 80056a8:	20000dc4 	.word	0x20000dc4
 80056ac:	200008f0 	.word	0x200008f0
 80056b0:	20000dc8 	.word	0x20000dc8
 80056b4:	20000900 	.word	0x20000900
 80056b8:	20000dcc 	.word	0x20000dcc

080056bc <lcdUpdate>:
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

//Tüm fonksiyonlar:

void lcdUpdate(uint8_t y) {
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	4603      	mov	r3, r0
 80056c4:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 80056c6:	79fb      	ldrb	r3, [r7, #7]
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d105      	bne.n	80056d8 <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 80056cc:	4a22      	ldr	r2, [pc, #136]	; (8005758 <lcdUpdate+0x9c>)
 80056ce:	2101      	movs	r1, #1
 80056d0:	2002      	movs	r0, #2
 80056d2:	f7fa ffc9 	bl	8000668 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 1, "    ESP-RMK     ");
		lcd_print(2, 1, "      RUN       ");
	}
}
 80056d6:	e03b      	b.n	8005750 <lcdUpdate+0x94>
	} else if(y==2) {
 80056d8:	79fb      	ldrb	r3, [r7, #7]
 80056da:	2b02      	cmp	r3, #2
 80056dc:	d105      	bne.n	80056ea <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 80056de:	4a1e      	ldr	r2, [pc, #120]	; (8005758 <lcdUpdate+0x9c>)
 80056e0:	2102      	movs	r1, #2
 80056e2:	2002      	movs	r0, #2
 80056e4:	f7fa ffc0 	bl	8000668 <lcd_print>
}
 80056e8:	e032      	b.n	8005750 <lcdUpdate+0x94>
	} else if(y==3) {
 80056ea:	79fb      	ldrb	r3, [r7, #7]
 80056ec:	2b03      	cmp	r3, #3
 80056ee:	d105      	bne.n	80056fc <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 80056f0:	4a19      	ldr	r2, [pc, #100]	; (8005758 <lcdUpdate+0x9c>)
 80056f2:	2103      	movs	r1, #3
 80056f4:	2002      	movs	r0, #2
 80056f6:	f7fa ffb7 	bl	8000668 <lcd_print>
}
 80056fa:	e029      	b.n	8005750 <lcdUpdate+0x94>
	} else if(y==4) {
 80056fc:	79fb      	ldrb	r3, [r7, #7]
 80056fe:	2b04      	cmp	r3, #4
 8005700:	d105      	bne.n	800570e <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 8005702:	4a15      	ldr	r2, [pc, #84]	; (8005758 <lcdUpdate+0x9c>)
 8005704:	2104      	movs	r1, #4
 8005706:	2002      	movs	r0, #2
 8005708:	f7fa ffae 	bl	8000668 <lcd_print>
}
 800570c:	e020      	b.n	8005750 <lcdUpdate+0x94>
	} else if(y==5) {
 800570e:	79fb      	ldrb	r3, [r7, #7]
 8005710:	2b05      	cmp	r3, #5
 8005712:	d105      	bne.n	8005720 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 8005714:	4a10      	ldr	r2, [pc, #64]	; (8005758 <lcdUpdate+0x9c>)
 8005716:	2105      	movs	r1, #5
 8005718:	2002      	movs	r0, #2
 800571a:	f7fa ffa5 	bl	8000668 <lcd_print>
}
 800571e:	e017      	b.n	8005750 <lcdUpdate+0x94>
	} else if(y==6) {
 8005720:	79fb      	ldrb	r3, [r7, #7]
 8005722:	2b06      	cmp	r3, #6
 8005724:	d105      	bne.n	8005732 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 8005726:	4a0c      	ldr	r2, [pc, #48]	; (8005758 <lcdUpdate+0x9c>)
 8005728:	2106      	movs	r1, #6
 800572a:	2002      	movs	r0, #2
 800572c:	f7fa ff9c 	bl	8000668 <lcd_print>
}
 8005730:	e00e      	b.n	8005750 <lcdUpdate+0x94>
	} else if (y==7) {
 8005732:	79fb      	ldrb	r3, [r7, #7]
 8005734:	2b07      	cmp	r3, #7
 8005736:	d10b      	bne.n	8005750 <lcdUpdate+0x94>
		lcd_clear();
 8005738:	f7fa ffc2 	bl	80006c0 <lcd_clear>
		lcd_print(1, 1, "    ESP-RMK     ");
 800573c:	4a07      	ldr	r2, [pc, #28]	; (800575c <lcdUpdate+0xa0>)
 800573e:	2101      	movs	r1, #1
 8005740:	2001      	movs	r0, #1
 8005742:	f7fa ff91 	bl	8000668 <lcd_print>
		lcd_print(2, 1, "      RUN       ");
 8005746:	4a06      	ldr	r2, [pc, #24]	; (8005760 <lcdUpdate+0xa4>)
 8005748:	2101      	movs	r1, #1
 800574a:	2002      	movs	r0, #2
 800574c:	f7fa ff8c 	bl	8000668 <lcd_print>
}
 8005750:	bf00      	nop
 8005752:	3708      	adds	r7, #8
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}
 8005758:	0800d928 	.word	0x0800d928
 800575c:	0800e254 	.word	0x0800e254
 8005760:	0800e268 	.word	0x0800e268

08005764 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
 800576a:	4603      	mov	r3, r0
 800576c:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 800576e:	79fb      	ldrb	r3, [r7, #7]
 8005770:	2b01      	cmp	r3, #1
 8005772:	d11d      	bne.n	80057b0 <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8005774:	4b62      	ldr	r3, [pc, #392]	; (8005900 <hataKoduLcdGoster+0x19c>)
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d105      	bne.n	8005788 <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU    ");
 800577c:	4a61      	ldr	r2, [pc, #388]	; (8005904 <hataKoduLcdGoster+0x1a0>)
 800577e:	2101      	movs	r1, #1
 8005780:	2001      	movs	r0, #1
 8005782:	f7fa ff71 	bl	8000668 <lcd_print>
 8005786:	e008      	b.n	800579a <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 8005788:	4b5d      	ldr	r3, [pc, #372]	; (8005900 <hataKoduLcdGoster+0x19c>)
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	2b01      	cmp	r3, #1
 800578e:	d104      	bne.n	800579a <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005790:	4a5d      	ldr	r2, [pc, #372]	; (8005908 <hataKoduLcdGoster+0x1a4>)
 8005792:	2101      	movs	r1, #1
 8005794:	2001      	movs	r0, #1
 8005796:	f7fa ff67 	bl	8000668 <lcd_print>
		}
		lcd_print(2, 1, "1");
 800579a:	4a5c      	ldr	r2, [pc, #368]	; (800590c <hataKoduLcdGoster+0x1a8>)
 800579c:	2101      	movs	r1, #1
 800579e:	2002      	movs	r0, #2
 80057a0:	f7fa ff62 	bl	8000668 <lcd_print>
		lcd_print(2, 7, "          ");
 80057a4:	4a5a      	ldr	r2, [pc, #360]	; (8005910 <hataKoduLcdGoster+0x1ac>)
 80057a6:	2107      	movs	r1, #7
 80057a8:	2002      	movs	r0, #2
 80057aa:	f7fa ff5d 	bl	8000668 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE   ");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 80057ae:	e0a3      	b.n	80058f8 <hataKoduLcdGoster+0x194>
	} else if(x==2){
 80057b0:	79fb      	ldrb	r3, [r7, #7]
 80057b2:	2b02      	cmp	r3, #2
 80057b4:	d11d      	bne.n	80057f2 <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 80057b6:	4b52      	ldr	r3, [pc, #328]	; (8005900 <hataKoduLcdGoster+0x19c>)
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d105      	bne.n	80057ca <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU    ");
 80057be:	4a51      	ldr	r2, [pc, #324]	; (8005904 <hataKoduLcdGoster+0x1a0>)
 80057c0:	2101      	movs	r1, #1
 80057c2:	2001      	movs	r0, #1
 80057c4:	f7fa ff50 	bl	8000668 <lcd_print>
 80057c8:	e008      	b.n	80057dc <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 80057ca:	4b4d      	ldr	r3, [pc, #308]	; (8005900 <hataKoduLcdGoster+0x19c>)
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	2b01      	cmp	r3, #1
 80057d0:	d104      	bne.n	80057dc <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE   ");
 80057d2:	4a4d      	ldr	r2, [pc, #308]	; (8005908 <hataKoduLcdGoster+0x1a4>)
 80057d4:	2101      	movs	r1, #1
 80057d6:	2001      	movs	r0, #1
 80057d8:	f7fa ff46 	bl	8000668 <lcd_print>
		lcd_print(2, 2, "2");
 80057dc:	4a4d      	ldr	r2, [pc, #308]	; (8005914 <hataKoduLcdGoster+0x1b0>)
 80057de:	2102      	movs	r1, #2
 80057e0:	2002      	movs	r0, #2
 80057e2:	f7fa ff41 	bl	8000668 <lcd_print>
		lcd_print(2, 7, "          ");
 80057e6:	4a4a      	ldr	r2, [pc, #296]	; (8005910 <hataKoduLcdGoster+0x1ac>)
 80057e8:	2107      	movs	r1, #7
 80057ea:	2002      	movs	r0, #2
 80057ec:	f7fa ff3c 	bl	8000668 <lcd_print>
}
 80057f0:	e082      	b.n	80058f8 <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 80057f2:	79fb      	ldrb	r3, [r7, #7]
 80057f4:	2b03      	cmp	r3, #3
 80057f6:	d11d      	bne.n	8005834 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 80057f8:	4b41      	ldr	r3, [pc, #260]	; (8005900 <hataKoduLcdGoster+0x19c>)
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d105      	bne.n	800580c <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU    ");
 8005800:	4a40      	ldr	r2, [pc, #256]	; (8005904 <hataKoduLcdGoster+0x1a0>)
 8005802:	2101      	movs	r1, #1
 8005804:	2001      	movs	r0, #1
 8005806:	f7fa ff2f 	bl	8000668 <lcd_print>
 800580a:	e008      	b.n	800581e <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 800580c:	4b3c      	ldr	r3, [pc, #240]	; (8005900 <hataKoduLcdGoster+0x19c>)
 800580e:	781b      	ldrb	r3, [r3, #0]
 8005810:	2b01      	cmp	r3, #1
 8005812:	d104      	bne.n	800581e <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005814:	4a3c      	ldr	r2, [pc, #240]	; (8005908 <hataKoduLcdGoster+0x1a4>)
 8005816:	2101      	movs	r1, #1
 8005818:	2001      	movs	r0, #1
 800581a:	f7fa ff25 	bl	8000668 <lcd_print>
		lcd_print(2, 3, "3");
 800581e:	4a3e      	ldr	r2, [pc, #248]	; (8005918 <hataKoduLcdGoster+0x1b4>)
 8005820:	2103      	movs	r1, #3
 8005822:	2002      	movs	r0, #2
 8005824:	f7fa ff20 	bl	8000668 <lcd_print>
		lcd_print(2, 7, "          ");
 8005828:	4a39      	ldr	r2, [pc, #228]	; (8005910 <hataKoduLcdGoster+0x1ac>)
 800582a:	2107      	movs	r1, #7
 800582c:	2002      	movs	r0, #2
 800582e:	f7fa ff1b 	bl	8000668 <lcd_print>
}
 8005832:	e061      	b.n	80058f8 <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8005834:	79fb      	ldrb	r3, [r7, #7]
 8005836:	2b04      	cmp	r3, #4
 8005838:	d11d      	bne.n	8005876 <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 800583a:	4b31      	ldr	r3, [pc, #196]	; (8005900 <hataKoduLcdGoster+0x19c>)
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d105      	bne.n	800584e <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU    ");
 8005842:	4a30      	ldr	r2, [pc, #192]	; (8005904 <hataKoduLcdGoster+0x1a0>)
 8005844:	2101      	movs	r1, #1
 8005846:	2001      	movs	r0, #1
 8005848:	f7fa ff0e 	bl	8000668 <lcd_print>
 800584c:	e008      	b.n	8005860 <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 800584e:	4b2c      	ldr	r3, [pc, #176]	; (8005900 <hataKoduLcdGoster+0x19c>)
 8005850:	781b      	ldrb	r3, [r3, #0]
 8005852:	2b01      	cmp	r3, #1
 8005854:	d104      	bne.n	8005860 <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005856:	4a2c      	ldr	r2, [pc, #176]	; (8005908 <hataKoduLcdGoster+0x1a4>)
 8005858:	2101      	movs	r1, #1
 800585a:	2001      	movs	r0, #1
 800585c:	f7fa ff04 	bl	8000668 <lcd_print>
		lcd_print(2, 4, "4");
 8005860:	4a2e      	ldr	r2, [pc, #184]	; (800591c <hataKoduLcdGoster+0x1b8>)
 8005862:	2104      	movs	r1, #4
 8005864:	2002      	movs	r0, #2
 8005866:	f7fa feff 	bl	8000668 <lcd_print>
		lcd_print(2, 7, "          ");
 800586a:	4a29      	ldr	r2, [pc, #164]	; (8005910 <hataKoduLcdGoster+0x1ac>)
 800586c:	2107      	movs	r1, #7
 800586e:	2002      	movs	r0, #2
 8005870:	f7fa fefa 	bl	8000668 <lcd_print>
}
 8005874:	e040      	b.n	80058f8 <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 8005876:	79fb      	ldrb	r3, [r7, #7]
 8005878:	2b05      	cmp	r3, #5
 800587a:	d11d      	bne.n	80058b8 <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 800587c:	4b20      	ldr	r3, [pc, #128]	; (8005900 <hataKoduLcdGoster+0x19c>)
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d105      	bne.n	8005890 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU    ");
 8005884:	4a1f      	ldr	r2, [pc, #124]	; (8005904 <hataKoduLcdGoster+0x1a0>)
 8005886:	2101      	movs	r1, #1
 8005888:	2001      	movs	r0, #1
 800588a:	f7fa feed 	bl	8000668 <lcd_print>
 800588e:	e008      	b.n	80058a2 <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8005890:	4b1b      	ldr	r3, [pc, #108]	; (8005900 <hataKoduLcdGoster+0x19c>)
 8005892:	781b      	ldrb	r3, [r3, #0]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d104      	bne.n	80058a2 <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE   ");
 8005898:	4a1b      	ldr	r2, [pc, #108]	; (8005908 <hataKoduLcdGoster+0x1a4>)
 800589a:	2101      	movs	r1, #1
 800589c:	2001      	movs	r0, #1
 800589e:	f7fa fee3 	bl	8000668 <lcd_print>
		lcd_print(2, 5, "5");
 80058a2:	4a1f      	ldr	r2, [pc, #124]	; (8005920 <hataKoduLcdGoster+0x1bc>)
 80058a4:	2105      	movs	r1, #5
 80058a6:	2002      	movs	r0, #2
 80058a8:	f7fa fede 	bl	8000668 <lcd_print>
		lcd_print(2, 7, "          ");
 80058ac:	4a18      	ldr	r2, [pc, #96]	; (8005910 <hataKoduLcdGoster+0x1ac>)
 80058ae:	2107      	movs	r1, #7
 80058b0:	2002      	movs	r0, #2
 80058b2:	f7fa fed9 	bl	8000668 <lcd_print>
}
 80058b6:	e01f      	b.n	80058f8 <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 80058b8:	79fb      	ldrb	r3, [r7, #7]
 80058ba:	2b06      	cmp	r3, #6
 80058bc:	d11c      	bne.n	80058f8 <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 80058be:	4b10      	ldr	r3, [pc, #64]	; (8005900 <hataKoduLcdGoster+0x19c>)
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d105      	bne.n	80058d2 <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU    ");
 80058c6:	4a0f      	ldr	r2, [pc, #60]	; (8005904 <hataKoduLcdGoster+0x1a0>)
 80058c8:	2101      	movs	r1, #1
 80058ca:	2001      	movs	r0, #1
 80058cc:	f7fa fecc 	bl	8000668 <lcd_print>
 80058d0:	e008      	b.n	80058e4 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 80058d2:	4b0b      	ldr	r3, [pc, #44]	; (8005900 <hataKoduLcdGoster+0x19c>)
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	2b01      	cmp	r3, #1
 80058d8:	d104      	bne.n	80058e4 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE   ");
 80058da:	4a0b      	ldr	r2, [pc, #44]	; (8005908 <hataKoduLcdGoster+0x1a4>)
 80058dc:	2101      	movs	r1, #1
 80058de:	2001      	movs	r0, #1
 80058e0:	f7fa fec2 	bl	8000668 <lcd_print>
		lcd_print(2, 6, "6");
 80058e4:	4a0f      	ldr	r2, [pc, #60]	; (8005924 <hataKoduLcdGoster+0x1c0>)
 80058e6:	2106      	movs	r1, #6
 80058e8:	2002      	movs	r0, #2
 80058ea:	f7fa febd 	bl	8000668 <lcd_print>
		lcd_print(2, 7, "          ");
 80058ee:	4a08      	ldr	r2, [pc, #32]	; (8005910 <hataKoduLcdGoster+0x1ac>)
 80058f0:	2107      	movs	r1, #7
 80058f2:	2002      	movs	r0, #2
 80058f4:	f7fa feb8 	bl	8000668 <lcd_print>
}
 80058f8:	bf00      	nop
 80058fa:	3708      	adds	r7, #8
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	20000c5a 	.word	0x20000c5a
 8005904:	0800e27c 	.word	0x0800e27c
 8005908:	0800e290 	.word	0x0800e290
 800590c:	0800d6d0 	.word	0x0800d6d0
 8005910:	0800e2a4 	.word	0x0800e2a4
 8005914:	0800d6d4 	.word	0x0800d6d4
 8005918:	0800d6d8 	.word	0x0800d6d8
 800591c:	0800d6dc 	.word	0x0800d6dc
 8005920:	0800d6e0 	.word	0x0800d6e0
 8005924:	0800d6e4 	.word	0x0800d6e4

08005928 <convertAndSendData>:

void convertAndSendData() {
 8005928:	b580      	push	{r7, lr}
 800592a:	b082      	sub	sp, #8
 800592c:	af00      	add	r7, sp, #0
	lcd_print(1, 1, "Veri Esleme");
 800592e:	4a14      	ldr	r2, [pc, #80]	; (8005980 <convertAndSendData+0x58>)
 8005930:	2101      	movs	r1, #1
 8005932:	2001      	movs	r0, #1
 8005934:	f7fa fe98 	bl	8000668 <lcd_print>
	lcd_print(2, 1, "Baslatildi...");
 8005938:	4a12      	ldr	r2, [pc, #72]	; (8005984 <convertAndSendData+0x5c>)
 800593a:	2101      	movs	r1, #1
 800593c:	2002      	movs	r0, #2
 800593e:	f7fa fe93 	bl	8000668 <lcd_print>
	for(int i=0; i<2; i++) {
 8005942:	2300      	movs	r3, #0
 8005944:	607b      	str	r3, [r7, #4]
 8005946:	e00a      	b.n	800595e <convertAndSendData+0x36>
		sendMachineData(&huart1, machineID, mergeData());
 8005948:	f002 fb3a 	bl	8007fc0 <mergeData>
 800594c:	4603      	mov	r3, r0
 800594e:	461a      	mov	r2, r3
 8005950:	490d      	ldr	r1, [pc, #52]	; (8005988 <convertAndSendData+0x60>)
 8005952:	480e      	ldr	r0, [pc, #56]	; (800598c <convertAndSendData+0x64>)
 8005954:	f7fa fc6e 	bl	8000234 <sendMachineData>
	for(int i=0; i<2; i++) {
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	3301      	adds	r3, #1
 800595c:	607b      	str	r3, [r7, #4]
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2b01      	cmp	r3, #1
 8005962:	ddf1      	ble.n	8005948 <convertAndSendData+0x20>
	}
	HAL_Delay(500);
 8005964:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005968:	f003 fad2 	bl	8008f10 <HAL_Delay>
	lcd_clear();
 800596c:	f7fa fea8 	bl	80006c0 <lcd_clear>
	HAL_Delay(500);
 8005970:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005974:	f003 facc 	bl	8008f10 <HAL_Delay>
}
 8005978:	bf00      	nop
 800597a:	3708      	adds	r7, #8
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}
 8005980:	0800e2b0 	.word	0x0800e2b0
 8005984:	0800e2bc 	.word	0x0800e2bc
 8005988:	20000be4 	.word	0x20000be4
 800598c:	20000e94 	.word	0x20000e94

08005990 <eepromKontrol>:

void eepromKontrol(int type) {
 8005990:	b580      	push	{r7, lr}
 8005992:	b086      	sub	sp, #24
 8005994:	af04      	add	r7, sp, #16
 8005996:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1,0xA0,0,145,eepromData,145,3000);
 8005998:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800599c:	9302      	str	r3, [sp, #8]
 800599e:	2391      	movs	r3, #145	; 0x91
 80059a0:	9301      	str	r3, [sp, #4]
 80059a2:	4b9c      	ldr	r3, [pc, #624]	; (8005c14 <eepromKontrol+0x284>)
 80059a4:	9300      	str	r3, [sp, #0]
 80059a6:	2391      	movs	r3, #145	; 0x91
 80059a8:	2200      	movs	r2, #0
 80059aa:	21a0      	movs	r1, #160	; 0xa0
 80059ac:	489a      	ldr	r0, [pc, #616]	; (8005c18 <eepromKontrol+0x288>)
 80059ae:	f004 fc33 	bl	800a218 <HAL_I2C_Mem_Read>
	HAL_Delay(1000);
 80059b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80059b6:	f003 faab 	bl	8008f10 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 80059ba:	4b96      	ldr	r3, [pc, #600]	; (8005c14 <eepromKontrol+0x284>)
 80059bc:	78da      	ldrb	r2, [r3, #3]
 80059be:	4b97      	ldr	r3, [pc, #604]	; (8005c1c <eepromKontrol+0x28c>)
 80059c0:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 80059c2:	4b94      	ldr	r3, [pc, #592]	; (8005c14 <eepromKontrol+0x284>)
 80059c4:	785a      	ldrb	r2, [r3, #1]
 80059c6:	4b96      	ldr	r3, [pc, #600]	; (8005c20 <eepromKontrol+0x290>)
 80059c8:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 80059ca:	4b92      	ldr	r3, [pc, #584]	; (8005c14 <eepromKontrol+0x284>)
 80059cc:	789a      	ldrb	r2, [r3, #2]
 80059ce:	4b95      	ldr	r3, [pc, #596]	; (8005c24 <eepromKontrol+0x294>)
 80059d0:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 80059d2:	4b90      	ldr	r3, [pc, #576]	; (8005c14 <eepromKontrol+0x284>)
 80059d4:	791a      	ldrb	r2, [r3, #4]
 80059d6:	4b94      	ldr	r3, [pc, #592]	; (8005c28 <eepromKontrol+0x298>)
 80059d8:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 80059da:	4b8e      	ldr	r3, [pc, #568]	; (8005c14 <eepromKontrol+0x284>)
 80059dc:	795a      	ldrb	r2, [r3, #5]
 80059de:	4b93      	ldr	r3, [pc, #588]	; (8005c2c <eepromKontrol+0x29c>)
 80059e0:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 80059e2:	4b8c      	ldr	r3, [pc, #560]	; (8005c14 <eepromKontrol+0x284>)
 80059e4:	799a      	ldrb	r2, [r3, #6]
 80059e6:	4b92      	ldr	r3, [pc, #584]	; (8005c30 <eepromKontrol+0x2a0>)
 80059e8:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 80059ea:	4b8a      	ldr	r3, [pc, #552]	; (8005c14 <eepromKontrol+0x284>)
 80059ec:	79da      	ldrb	r2, [r3, #7]
 80059ee:	4b91      	ldr	r3, [pc, #580]	; (8005c34 <eepromKontrol+0x2a4>)
 80059f0:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 80059f2:	4b88      	ldr	r3, [pc, #544]	; (8005c14 <eepromKontrol+0x284>)
 80059f4:	7a1a      	ldrb	r2, [r3, #8]
 80059f6:	4b90      	ldr	r3, [pc, #576]	; (8005c38 <eepromKontrol+0x2a8>)
 80059f8:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 80059fa:	4b86      	ldr	r3, [pc, #536]	; (8005c14 <eepromKontrol+0x284>)
 80059fc:	7a5a      	ldrb	r2, [r3, #9]
 80059fe:	4b8f      	ldr	r3, [pc, #572]	; (8005c3c <eepromKontrol+0x2ac>)
 8005a00:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 8005a02:	4b84      	ldr	r3, [pc, #528]	; (8005c14 <eepromKontrol+0x284>)
 8005a04:	7a9a      	ldrb	r2, [r3, #10]
 8005a06:	4b8e      	ldr	r3, [pc, #568]	; (8005c40 <eepromKontrol+0x2b0>)
 8005a08:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 8005a0a:	4b82      	ldr	r3, [pc, #520]	; (8005c14 <eepromKontrol+0x284>)
 8005a0c:	7ada      	ldrb	r2, [r3, #11]
 8005a0e:	4b8d      	ldr	r3, [pc, #564]	; (8005c44 <eepromKontrol+0x2b4>)
 8005a10:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 8005a12:	4b80      	ldr	r3, [pc, #512]	; (8005c14 <eepromKontrol+0x284>)
 8005a14:	7b1a      	ldrb	r2, [r3, #12]
 8005a16:	4b8c      	ldr	r3, [pc, #560]	; (8005c48 <eepromKontrol+0x2b8>)
 8005a18:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 8005a1a:	4b7e      	ldr	r3, [pc, #504]	; (8005c14 <eepromKontrol+0x284>)
 8005a1c:	7b5a      	ldrb	r2, [r3, #13]
 8005a1e:	4b8b      	ldr	r3, [pc, #556]	; (8005c4c <eepromKontrol+0x2bc>)
 8005a20:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 8005a22:	4b7c      	ldr	r3, [pc, #496]	; (8005c14 <eepromKontrol+0x284>)
 8005a24:	7b9a      	ldrb	r2, [r3, #14]
 8005a26:	4b8a      	ldr	r3, [pc, #552]	; (8005c50 <eepromKontrol+0x2c0>)
 8005a28:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 8005a2a:	4b7a      	ldr	r3, [pc, #488]	; (8005c14 <eepromKontrol+0x284>)
 8005a2c:	7bda      	ldrb	r2, [r3, #15]
 8005a2e:	4b89      	ldr	r3, [pc, #548]	; (8005c54 <eepromKontrol+0x2c4>)
 8005a30:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 8005a32:	4b78      	ldr	r3, [pc, #480]	; (8005c14 <eepromKontrol+0x284>)
 8005a34:	7c1a      	ldrb	r2, [r3, #16]
 8005a36:	4b88      	ldr	r3, [pc, #544]	; (8005c58 <eepromKontrol+0x2c8>)
 8005a38:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 8005a3a:	4b76      	ldr	r3, [pc, #472]	; (8005c14 <eepromKontrol+0x284>)
 8005a3c:	7c5a      	ldrb	r2, [r3, #17]
 8005a3e:	4b87      	ldr	r3, [pc, #540]	; (8005c5c <eepromKontrol+0x2cc>)
 8005a40:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 8005a42:	4b74      	ldr	r3, [pc, #464]	; (8005c14 <eepromKontrol+0x284>)
 8005a44:	7c9a      	ldrb	r2, [r3, #18]
 8005a46:	4b86      	ldr	r3, [pc, #536]	; (8005c60 <eepromKontrol+0x2d0>)
 8005a48:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 8005a4a:	4b72      	ldr	r3, [pc, #456]	; (8005c14 <eepromKontrol+0x284>)
 8005a4c:	7cda      	ldrb	r2, [r3, #19]
 8005a4e:	4b85      	ldr	r3, [pc, #532]	; (8005c64 <eepromKontrol+0x2d4>)
 8005a50:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 8005a52:	4b70      	ldr	r3, [pc, #448]	; (8005c14 <eepromKontrol+0x284>)
 8005a54:	7d1a      	ldrb	r2, [r3, #20]
 8005a56:	4b84      	ldr	r3, [pc, #528]	; (8005c68 <eepromKontrol+0x2d8>)
 8005a58:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 8005a5a:	4b6e      	ldr	r3, [pc, #440]	; (8005c14 <eepromKontrol+0x284>)
 8005a5c:	7d5a      	ldrb	r2, [r3, #21]
 8005a5e:	4b83      	ldr	r3, [pc, #524]	; (8005c6c <eepromKontrol+0x2dc>)
 8005a60:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8005a62:	4b6c      	ldr	r3, [pc, #432]	; (8005c14 <eepromKontrol+0x284>)
 8005a64:	7d9a      	ldrb	r2, [r3, #22]
 8005a66:	4b82      	ldr	r3, [pc, #520]	; (8005c70 <eepromKontrol+0x2e0>)
 8005a68:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 8005a6a:	4b6a      	ldr	r3, [pc, #424]	; (8005c14 <eepromKontrol+0x284>)
 8005a6c:	7dda      	ldrb	r2, [r3, #23]
 8005a6e:	4b81      	ldr	r3, [pc, #516]	; (8005c74 <eepromKontrol+0x2e4>)
 8005a70:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8005a72:	4b68      	ldr	r3, [pc, #416]	; (8005c14 <eepromKontrol+0x284>)
 8005a74:	7e1a      	ldrb	r2, [r3, #24]
 8005a76:	4b80      	ldr	r3, [pc, #512]	; (8005c78 <eepromKontrol+0x2e8>)
 8005a78:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 8005a7a:	4b66      	ldr	r3, [pc, #408]	; (8005c14 <eepromKontrol+0x284>)
 8005a7c:	7e5a      	ldrb	r2, [r3, #25]
 8005a7e:	4b7f      	ldr	r3, [pc, #508]	; (8005c7c <eepromKontrol+0x2ec>)
 8005a80:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8005a82:	4b64      	ldr	r3, [pc, #400]	; (8005c14 <eepromKontrol+0x284>)
 8005a84:	7e9a      	ldrb	r2, [r3, #26]
 8005a86:	4b7e      	ldr	r3, [pc, #504]	; (8005c80 <eepromKontrol+0x2f0>)
 8005a88:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 8005a8a:	4b62      	ldr	r3, [pc, #392]	; (8005c14 <eepromKontrol+0x284>)
 8005a8c:	7eda      	ldrb	r2, [r3, #27]
 8005a8e:	4b7d      	ldr	r3, [pc, #500]	; (8005c84 <eepromKontrol+0x2f4>)
 8005a90:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8005a92:	4b60      	ldr	r3, [pc, #384]	; (8005c14 <eepromKontrol+0x284>)
 8005a94:	7f1a      	ldrb	r2, [r3, #28]
 8005a96:	4b7c      	ldr	r3, [pc, #496]	; (8005c88 <eepromKontrol+0x2f8>)
 8005a98:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 8005a9a:	4b5e      	ldr	r3, [pc, #376]	; (8005c14 <eepromKontrol+0x284>)
 8005a9c:	7f5a      	ldrb	r2, [r3, #29]
 8005a9e:	4b7b      	ldr	r3, [pc, #492]	; (8005c8c <eepromKontrol+0x2fc>)
 8005aa0:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8005aa2:	4b5c      	ldr	r3, [pc, #368]	; (8005c14 <eepromKontrol+0x284>)
 8005aa4:	7f9a      	ldrb	r2, [r3, #30]
 8005aa6:	4b7a      	ldr	r3, [pc, #488]	; (8005c90 <eepromKontrol+0x300>)
 8005aa8:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 8005aaa:	4b5a      	ldr	r3, [pc, #360]	; (8005c14 <eepromKontrol+0x284>)
 8005aac:	7fda      	ldrb	r2, [r3, #31]
 8005aae:	4b79      	ldr	r3, [pc, #484]	; (8005c94 <eepromKontrol+0x304>)
 8005ab0:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8005ab2:	4b58      	ldr	r3, [pc, #352]	; (8005c14 <eepromKontrol+0x284>)
 8005ab4:	f893 2020 	ldrb.w	r2, [r3, #32]
 8005ab8:	4b77      	ldr	r3, [pc, #476]	; (8005c98 <eepromKontrol+0x308>)
 8005aba:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 8005abc:	4b55      	ldr	r3, [pc, #340]	; (8005c14 <eepromKontrol+0x284>)
 8005abe:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8005ac2:	4b76      	ldr	r3, [pc, #472]	; (8005c9c <eepromKontrol+0x30c>)
 8005ac4:	701a      	strb	r2, [r3, #0]
	iotMode = eepromData[37];
 8005ac6:	4b53      	ldr	r3, [pc, #332]	; (8005c14 <eepromKontrol+0x284>)
 8005ac8:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8005acc:	4b74      	ldr	r3, [pc, #464]	; (8005ca0 <eepromKontrol+0x310>)
 8005ace:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8005ad0:	4b50      	ldr	r3, [pc, #320]	; (8005c14 <eepromKontrol+0x284>)
 8005ad2:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8005ad6:	4b73      	ldr	r3, [pc, #460]	; (8005ca4 <eepromKontrol+0x314>)
 8005ad8:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 8005ada:	4b4e      	ldr	r3, [pc, #312]	; (8005c14 <eepromKontrol+0x284>)
 8005adc:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8005ae0:	4b71      	ldr	r3, [pc, #452]	; (8005ca8 <eepromKontrol+0x318>)
 8005ae2:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8005ae4:	4b4b      	ldr	r3, [pc, #300]	; (8005c14 <eepromKontrol+0x284>)
 8005ae6:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8005aea:	4b70      	ldr	r3, [pc, #448]	; (8005cac <eepromKontrol+0x31c>)
 8005aec:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[38];
 8005aee:	4b49      	ldr	r3, [pc, #292]	; (8005c14 <eepromKontrol+0x284>)
 8005af0:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8005af4:	4b6e      	ldr	r3, [pc, #440]	; (8005cb0 <eepromKontrol+0x320>)
 8005af6:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[39];
 8005af8:	4b46      	ldr	r3, [pc, #280]	; (8005c14 <eepromKontrol+0x284>)
 8005afa:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8005afe:	4b6d      	ldr	r3, [pc, #436]	; (8005cb4 <eepromKontrol+0x324>)
 8005b00:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[40];
 8005b02:	4b44      	ldr	r3, [pc, #272]	; (8005c14 <eepromKontrol+0x284>)
 8005b04:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8005b08:	4b6b      	ldr	r3, [pc, #428]	; (8005cb8 <eepromKontrol+0x328>)
 8005b0a:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[41];
 8005b0c:	4b41      	ldr	r3, [pc, #260]	; (8005c14 <eepromKontrol+0x284>)
 8005b0e:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8005b12:	4b6a      	ldr	r3, [pc, #424]	; (8005cbc <eepromKontrol+0x32c>)
 8005b14:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[42];
 8005b16:	4b3f      	ldr	r3, [pc, #252]	; (8005c14 <eepromKontrol+0x284>)
 8005b18:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8005b1c:	4b68      	ldr	r3, [pc, #416]	; (8005cc0 <eepromKontrol+0x330>)
 8005b1e:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[43];
 8005b20:	4b3c      	ldr	r3, [pc, #240]	; (8005c14 <eepromKontrol+0x284>)
 8005b22:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8005b26:	4b67      	ldr	r3, [pc, #412]	; (8005cc4 <eepromKontrol+0x334>)
 8005b28:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[44];
 8005b2a:	4b3a      	ldr	r3, [pc, #232]	; (8005c14 <eepromKontrol+0x284>)
 8005b2c:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8005b30:	4b65      	ldr	r3, [pc, #404]	; (8005cc8 <eepromKontrol+0x338>)
 8005b32:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[45];
 8005b34:	4b37      	ldr	r3, [pc, #220]	; (8005c14 <eepromKontrol+0x284>)
 8005b36:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8005b3a:	4b64      	ldr	r3, [pc, #400]	; (8005ccc <eepromKontrol+0x33c>)
 8005b3c:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[46];
 8005b3e:	4b35      	ldr	r3, [pc, #212]	; (8005c14 <eepromKontrol+0x284>)
 8005b40:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8005b44:	4b62      	ldr	r3, [pc, #392]	; (8005cd0 <eepromKontrol+0x340>)
 8005b46:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[47];
 8005b48:	4b32      	ldr	r3, [pc, #200]	; (8005c14 <eepromKontrol+0x284>)
 8005b4a:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8005b4e:	4b61      	ldr	r3, [pc, #388]	; (8005cd4 <eepromKontrol+0x344>)
 8005b50:	701a      	strb	r2, [r3, #0]

	loadMenuTexts(dilSecim);
 8005b52:	4b52      	ldr	r3, [pc, #328]	; (8005c9c <eepromKontrol+0x30c>)
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	4618      	mov	r0, r3
 8005b58:	f7fe fff4 	bl	8004b44 <loadMenuTexts>

	if(calismaSayisi10000>9) {
 8005b5c:	4b4e      	ldr	r3, [pc, #312]	; (8005c98 <eepromKontrol+0x308>)
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	2b09      	cmp	r3, #9
 8005b62:	d902      	bls.n	8005b6a <eepromKontrol+0x1da>
	    calismaSayisi10000=0;
 8005b64:	4b4c      	ldr	r3, [pc, #304]	; (8005c98 <eepromKontrol+0x308>)
 8005b66:	2200      	movs	r2, #0
 8005b68:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 8005b6a:	4b4a      	ldr	r3, [pc, #296]	; (8005c94 <eepromKontrol+0x304>)
 8005b6c:	781b      	ldrb	r3, [r3, #0]
 8005b6e:	2b09      	cmp	r3, #9
 8005b70:	d902      	bls.n	8005b78 <eepromKontrol+0x1e8>
	    calismaSayisi1000=0;
 8005b72:	4b48      	ldr	r3, [pc, #288]	; (8005c94 <eepromKontrol+0x304>)
 8005b74:	2200      	movs	r2, #0
 8005b76:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 8005b78:	4b45      	ldr	r3, [pc, #276]	; (8005c90 <eepromKontrol+0x300>)
 8005b7a:	781b      	ldrb	r3, [r3, #0]
 8005b7c:	2b09      	cmp	r3, #9
 8005b7e:	d902      	bls.n	8005b86 <eepromKontrol+0x1f6>
	    calismaSayisi100=0;
 8005b80:	4b43      	ldr	r3, [pc, #268]	; (8005c90 <eepromKontrol+0x300>)
 8005b82:	2200      	movs	r2, #0
 8005b84:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8005b86:	4b41      	ldr	r3, [pc, #260]	; (8005c8c <eepromKontrol+0x2fc>)
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	2b09      	cmp	r3, #9
 8005b8c:	d902      	bls.n	8005b94 <eepromKontrol+0x204>
	    calismaSayisi10=0;
 8005b8e:	4b3f      	ldr	r3, [pc, #252]	; (8005c8c <eepromKontrol+0x2fc>)
 8005b90:	2200      	movs	r2, #0
 8005b92:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8005b94:	4b3c      	ldr	r3, [pc, #240]	; (8005c88 <eepromKontrol+0x2f8>)
 8005b96:	781b      	ldrb	r3, [r3, #0]
 8005b98:	2b09      	cmp	r3, #9
 8005b9a:	d902      	bls.n	8005ba2 <eepromKontrol+0x212>
	    calismaSayisi1=0;
 8005b9c:	4b3a      	ldr	r3, [pc, #232]	; (8005c88 <eepromKontrol+0x2f8>)
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8005ba2:	4b1f      	ldr	r3, [pc, #124]	; (8005c20 <eepromKontrol+0x290>)
 8005ba4:	781b      	ldrb	r3, [r3, #0]
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d902      	bls.n	8005bb0 <eepromKontrol+0x220>
	    calismaSekli=0;
 8005baa:	4b1d      	ldr	r3, [pc, #116]	; (8005c20 <eepromKontrol+0x290>)
 8005bac:	2200      	movs	r2, #0
 8005bae:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8005bb0:	4b1c      	ldr	r3, [pc, #112]	; (8005c24 <eepromKontrol+0x294>)
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d902      	bls.n	8005bbe <eepromKontrol+0x22e>
	    emniyetCercevesi=1;
 8005bb8:	4b1a      	ldr	r3, [pc, #104]	; (8005c24 <eepromKontrol+0x294>)
 8005bba:	2201      	movs	r2, #1
 8005bbc:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8005bbe:	4b1a      	ldr	r3, [pc, #104]	; (8005c28 <eepromKontrol+0x298>)
 8005bc0:	781b      	ldrb	r3, [r3, #0]
 8005bc2:	2b01      	cmp	r3, #1
 8005bc4:	d902      	bls.n	8005bcc <eepromKontrol+0x23c>
	    yavaslamaLimit=0;
 8005bc6:	4b18      	ldr	r3, [pc, #96]	; (8005c28 <eepromKontrol+0x298>)
 8005bc8:	2200      	movs	r2, #0
 8005bca:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 8005bcc:	4b17      	ldr	r3, [pc, #92]	; (8005c2c <eepromKontrol+0x29c>)
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d902      	bls.n	8005bda <eepromKontrol+0x24a>
	    altLimit=1;
 8005bd4:	4b15      	ldr	r3, [pc, #84]	; (8005c2c <eepromKontrol+0x29c>)
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 8005bda:	4b15      	ldr	r3, [pc, #84]	; (8005c30 <eepromKontrol+0x2a0>)
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	d902      	bls.n	8005be8 <eepromKontrol+0x258>
	    basincSalteri=1;
 8005be2:	4b13      	ldr	r3, [pc, #76]	; (8005c30 <eepromKontrol+0x2a0>)
 8005be4:	2201      	movs	r2, #1
 8005be6:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 8005be8:	4b12      	ldr	r3, [pc, #72]	; (8005c34 <eepromKontrol+0x2a4>)
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	2b03      	cmp	r3, #3
 8005bee:	d902      	bls.n	8005bf6 <eepromKontrol+0x266>
	    kapiSecimleri=3;
 8005bf0:	4b10      	ldr	r3, [pc, #64]	; (8005c34 <eepromKontrol+0x2a4>)
 8005bf2:	2203      	movs	r2, #3
 8005bf4:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8005bf6:	4b2d      	ldr	r3, [pc, #180]	; (8005cac <eepromKontrol+0x31c>)
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d902      	bls.n	8005c04 <eepromKontrol+0x274>
	    kapiAcTipi=0;
 8005bfe:	4b2b      	ldr	r3, [pc, #172]	; (8005cac <eepromKontrol+0x31c>)
 8005c00:	2200      	movs	r2, #0
 8005c02:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 8005c04:	4b0c      	ldr	r3, [pc, #48]	; (8005c38 <eepromKontrol+0x2a8>)
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	2b02      	cmp	r3, #2
 8005c0a:	d965      	bls.n	8005cd8 <eepromKontrol+0x348>
	    kapi1Tip=1;
 8005c0c:	4b0a      	ldr	r3, [pc, #40]	; (8005c38 <eepromKontrol+0x2a8>)
 8005c0e:	2201      	movs	r2, #1
 8005c10:	701a      	strb	r2, [r3, #0]
 8005c12:	e061      	b.n	8005cd8 <eepromKontrol+0x348>
 8005c14:	20000b28 	.word	0x20000b28
 8005c18:	20000df8 	.word	0x20000df8
 8005c1c:	20000bb9 	.word	0x20000bb9
 8005c20:	20000c3a 	.word	0x20000c3a
 8005c24:	20000c3d 	.word	0x20000c3d
 8005c28:	20000c3e 	.word	0x20000c3e
 8005c2c:	20000c3f 	.word	0x20000c3f
 8005c30:	20000c40 	.word	0x20000c40
 8005c34:	20000c41 	.word	0x20000c41
 8005c38:	20000c42 	.word	0x20000c42
 8005c3c:	20000c52 	.word	0x20000c52
 8005c40:	20000c43 	.word	0x20000c43
 8005c44:	20000c53 	.word	0x20000c53
 8005c48:	20000c44 	.word	0x20000c44
 8005c4c:	20000c54 	.word	0x20000c54
 8005c50:	20000c47 	.word	0x20000c47
 8005c54:	20000c48 	.word	0x20000c48
 8005c58:	20000c49 	.word	0x20000c49
 8005c5c:	20000c4a 	.word	0x20000c4a
 8005c60:	20000c4b 	.word	0x20000c4b
 8005c64:	20000c4c 	.word	0x20000c4c
 8005c68:	20000c4d 	.word	0x20000c4d
 8005c6c:	20000c4e 	.word	0x20000c4e
 8005c70:	20000c4f 	.word	0x20000c4f
 8005c74:	20000c50 	.word	0x20000c50
 8005c78:	20000c51 	.word	0x20000c51
 8005c7c:	20000c55 	.word	0x20000c55
 8005c80:	20000c57 	.word	0x20000c57
 8005c84:	20000c35 	.word	0x20000c35
 8005c88:	20000c36 	.word	0x20000c36
 8005c8c:	20000c37 	.word	0x20000c37
 8005c90:	200009b1 	.word	0x200009b1
 8005c94:	200009b2 	.word	0x200009b2
 8005c98:	20000c38 	.word	0x20000c38
 8005c9c:	20000c5a 	.word	0x20000c5a
 8005ca0:	20000c58 	.word	0x20000c58
 8005ca4:	20000c46 	.word	0x20000c46
 8005ca8:	20000c59 	.word	0x20000c59
 8005cac:	20000c45 	.word	0x20000c45
 8005cb0:	20000c5b 	.word	0x20000c5b
 8005cb4:	20000c5c 	.word	0x20000c5c
 8005cb8:	20000c5d 	.word	0x20000c5d
 8005cbc:	20000c5e 	.word	0x20000c5e
 8005cc0:	20000c5f 	.word	0x20000c5f
 8005cc4:	20000c60 	.word	0x20000c60
 8005cc8:	20000c61 	.word	0x20000c61
 8005ccc:	20000c62 	.word	0x20000c62
 8005cd0:	20000c63 	.word	0x20000c63
 8005cd4:	20000c64 	.word	0x20000c64
	}

	if(kapi1AcSure>5) {
 8005cd8:	4b55      	ldr	r3, [pc, #340]	; (8005e30 <eepromKontrol+0x4a0>)
 8005cda:	781b      	ldrb	r3, [r3, #0]
 8005cdc:	2b05      	cmp	r3, #5
 8005cde:	d902      	bls.n	8005ce6 <eepromKontrol+0x356>
	    kapi1AcSure=5;
 8005ce0:	4b53      	ldr	r3, [pc, #332]	; (8005e30 <eepromKontrol+0x4a0>)
 8005ce2:	2205      	movs	r2, #5
 8005ce4:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 8005ce6:	4b53      	ldr	r3, [pc, #332]	; (8005e34 <eepromKontrol+0x4a4>)
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	2b02      	cmp	r3, #2
 8005cec:	d902      	bls.n	8005cf4 <eepromKontrol+0x364>
	    kapi2Tip=1;
 8005cee:	4b51      	ldr	r3, [pc, #324]	; (8005e34 <eepromKontrol+0x4a4>)
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 8005cf4:	4b50      	ldr	r3, [pc, #320]	; (8005e38 <eepromKontrol+0x4a8>)
 8005cf6:	781b      	ldrb	r3, [r3, #0]
 8005cf8:	2b05      	cmp	r3, #5
 8005cfa:	d902      	bls.n	8005d02 <eepromKontrol+0x372>
	    kapi2AcSure=5;
 8005cfc:	4b4e      	ldr	r3, [pc, #312]	; (8005e38 <eepromKontrol+0x4a8>)
 8005cfe:	2205      	movs	r2, #5
 8005d00:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 8005d02:	4b4e      	ldr	r3, [pc, #312]	; (8005e3c <eepromKontrol+0x4ac>)
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	2b02      	cmp	r3, #2
 8005d08:	d902      	bls.n	8005d10 <eepromKontrol+0x380>
	    kapitablaTip=1;
 8005d0a:	4b4c      	ldr	r3, [pc, #304]	; (8005e3c <eepromKontrol+0x4ac>)
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 8005d10:	4b4b      	ldr	r3, [pc, #300]	; (8005e40 <eepromKontrol+0x4b0>)
 8005d12:	781b      	ldrb	r3, [r3, #0]
 8005d14:	2b02      	cmp	r3, #2
 8005d16:	d902      	bls.n	8005d1e <eepromKontrol+0x38e>
	    kapiTablaAcKonum=2;
 8005d18:	4b49      	ldr	r3, [pc, #292]	; (8005e40 <eepromKontrol+0x4b0>)
 8005d1a:	2202      	movs	r2, #2
 8005d1c:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 8005d1e:	4b49      	ldr	r3, [pc, #292]	; (8005e44 <eepromKontrol+0x4b4>)
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	2b05      	cmp	r3, #5
 8005d24:	d902      	bls.n	8005d2c <eepromKontrol+0x39c>
	    kapiTablaAcSure=5;
 8005d26:	4b47      	ldr	r3, [pc, #284]	; (8005e44 <eepromKontrol+0x4b4>)
 8005d28:	2205      	movs	r2, #5
 8005d2a:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 8005d2c:	4b46      	ldr	r3, [pc, #280]	; (8005e48 <eepromKontrol+0x4b8>)
 8005d2e:	781b      	ldrb	r3, [r3, #0]
 8005d30:	2b01      	cmp	r3, #1
 8005d32:	d902      	bls.n	8005d3a <eepromKontrol+0x3aa>
	    yukariYavasLimit=0;
 8005d34:	4b44      	ldr	r3, [pc, #272]	; (8005e48 <eepromKontrol+0x4b8>)
 8005d36:	2200      	movs	r2, #0
 8005d38:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 8005d3a:	4b44      	ldr	r3, [pc, #272]	; (8005e4c <eepromKontrol+0x4bc>)
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	d902      	bls.n	8005d48 <eepromKontrol+0x3b8>
	    devirmeYuruyusSecim=0;
 8005d42:	4b42      	ldr	r3, [pc, #264]	; (8005e4c <eepromKontrol+0x4bc>)
 8005d44:	2200      	movs	r2, #0
 8005d46:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 8005d48:	4b41      	ldr	r3, [pc, #260]	; (8005e50 <eepromKontrol+0x4c0>)
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	2b01      	cmp	r3, #1
 8005d4e:	d902      	bls.n	8005d56 <eepromKontrol+0x3c6>
	    devirmeYukariIleriLimit=1;
 8005d50:	4b3f      	ldr	r3, [pc, #252]	; (8005e50 <eepromKontrol+0x4c0>)
 8005d52:	2201      	movs	r2, #1
 8005d54:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 8005d56:	4b3f      	ldr	r3, [pc, #252]	; (8005e54 <eepromKontrol+0x4c4>)
 8005d58:	781b      	ldrb	r3, [r3, #0]
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d902      	bls.n	8005d64 <eepromKontrol+0x3d4>
	    devirmeAsagiGeriLimit=1;
 8005d5e:	4b3d      	ldr	r3, [pc, #244]	; (8005e54 <eepromKontrol+0x4c4>)
 8005d60:	2201      	movs	r2, #1
 8005d62:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 8005d64:	4b3c      	ldr	r3, [pc, #240]	; (8005e58 <eepromKontrol+0x4c8>)
 8005d66:	781b      	ldrb	r3, [r3, #0]
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d902      	bls.n	8005d72 <eepromKontrol+0x3e2>
	    devirmeSilindirTipi=0;
 8005d6c:	4b3a      	ldr	r3, [pc, #232]	; (8005e58 <eepromKontrol+0x4c8>)
 8005d6e:	2200      	movs	r2, #0
 8005d70:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 8005d72:	4b3a      	ldr	r3, [pc, #232]	; (8005e5c <eepromKontrol+0x4cc>)
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	2b01      	cmp	r3, #1
 8005d78:	d902      	bls.n	8005d80 <eepromKontrol+0x3f0>
	    platformSilindirTipi=0;
 8005d7a:	4b38      	ldr	r3, [pc, #224]	; (8005e5c <eepromKontrol+0x4cc>)
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8005d80:	4b37      	ldr	r3, [pc, #220]	; (8005e60 <eepromKontrol+0x4d0>)
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	2b05      	cmp	r3, #5
 8005d86:	d902      	bls.n	8005d8e <eepromKontrol+0x3fe>
	    yukariValfTmr=0;
 8005d88:	4b35      	ldr	r3, [pc, #212]	; (8005e60 <eepromKontrol+0x4d0>)
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8005d8e:	4b35      	ldr	r3, [pc, #212]	; (8005e64 <eepromKontrol+0x4d4>)
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	2b05      	cmp	r3, #5
 8005d94:	d902      	bls.n	8005d9c <eepromKontrol+0x40c>
	    asagiValfTmr=0;
 8005d96:	4b33      	ldr	r3, [pc, #204]	; (8005e64 <eepromKontrol+0x4d4>)
 8005d98:	2200      	movs	r2, #0
 8005d9a:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8005d9c:	4b32      	ldr	r3, [pc, #200]	; (8005e68 <eepromKontrol+0x4d8>)
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	2b05      	cmp	r3, #5
 8005da2:	d902      	bls.n	8005daa <eepromKontrol+0x41a>
	    devirmeYukariIleriTmr=0;
 8005da4:	4b30      	ldr	r3, [pc, #192]	; (8005e68 <eepromKontrol+0x4d8>)
 8005da6:	2200      	movs	r2, #0
 8005da8:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8005daa:	4b30      	ldr	r3, [pc, #192]	; (8005e6c <eepromKontrol+0x4dc>)
 8005dac:	781b      	ldrb	r3, [r3, #0]
 8005dae:	2b05      	cmp	r3, #5
 8005db0:	d902      	bls.n	8005db8 <eepromKontrol+0x428>
	    devirmeAsagiGeriTmr=0;
 8005db2:	4b2e      	ldr	r3, [pc, #184]	; (8005e6c <eepromKontrol+0x4dc>)
 8005db4:	2200      	movs	r2, #0
 8005db6:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8005db8:	4b2d      	ldr	r3, [pc, #180]	; (8005e70 <eepromKontrol+0x4e0>)
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	2bb4      	cmp	r3, #180	; 0xb4
 8005dbe:	d902      	bls.n	8005dc6 <eepromKontrol+0x436>
	    makineCalismaTmr=60;
 8005dc0:	4b2b      	ldr	r3, [pc, #172]	; (8005e70 <eepromKontrol+0x4e0>)
 8005dc2:	223c      	movs	r2, #60	; 0x3c
 8005dc4:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 8005dc6:	4b2b      	ldr	r3, [pc, #172]	; (8005e74 <eepromKontrol+0x4e4>)
 8005dc8:	781b      	ldrb	r3, [r3, #0]
 8005dca:	2b01      	cmp	r3, #1
 8005dcc:	d902      	bls.n	8005dd4 <eepromKontrol+0x444>
	    buzzer=0;
 8005dce:	4b29      	ldr	r3, [pc, #164]	; (8005e74 <eepromKontrol+0x4e4>)
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 8005dd4:	4b28      	ldr	r3, [pc, #160]	; (8005e78 <eepromKontrol+0x4e8>)
 8005dd6:	781b      	ldrb	r3, [r3, #0]
 8005dd8:	2b01      	cmp	r3, #1
 8005dda:	d902      	bls.n	8005de2 <eepromKontrol+0x452>
	    demoMode=0;
 8005ddc:	4b26      	ldr	r3, [pc, #152]	; (8005e78 <eepromKontrol+0x4e8>)
 8005dde:	2200      	movs	r2, #0
 8005de0:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 8005de2:	4b26      	ldr	r3, [pc, #152]	; (8005e7c <eepromKontrol+0x4ec>)
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	2b01      	cmp	r3, #1
 8005de8:	d902      	bls.n	8005df0 <eepromKontrol+0x460>
	    calismaSayModu=0;
 8005dea:	4b24      	ldr	r3, [pc, #144]	; (8005e7c <eepromKontrol+0x4ec>)
 8005dec:	2200      	movs	r2, #0
 8005dee:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8005df0:	4b23      	ldr	r3, [pc, #140]	; (8005e80 <eepromKontrol+0x4f0>)
 8005df2:	781b      	ldrb	r3, [r3, #0]
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d902      	bls.n	8005dfe <eepromKontrol+0x46e>
	    dilSecim=0;
 8005df8:	4b21      	ldr	r3, [pc, #132]	; (8005e80 <eepromKontrol+0x4f0>)
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	701a      	strb	r2, [r3, #0]
	}

	if(iotMode>1) {
 8005dfe:	4b21      	ldr	r3, [pc, #132]	; (8005e84 <eepromKontrol+0x4f4>)
 8005e00:	781b      	ldrb	r3, [r3, #0]
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d902      	bls.n	8005e0c <eepromKontrol+0x47c>
		iotMode=0;
 8005e06:	4b1f      	ldr	r3, [pc, #124]	; (8005e84 <eepromKontrol+0x4f4>)
 8005e08:	2200      	movs	r2, #0
 8005e0a:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(1000);
 8005e0c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005e10:	f003 f87e 	bl	8008f10 <HAL_Delay>

	if(iotMode == 1 && type == 1) {
 8005e14:	4b1b      	ldr	r3, [pc, #108]	; (8005e84 <eepromKontrol+0x4f4>)
 8005e16:	781b      	ldrb	r3, [r3, #0]
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d104      	bne.n	8005e26 <eepromKontrol+0x496>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2b01      	cmp	r3, #1
 8005e20:	d101      	bne.n	8005e26 <eepromKontrol+0x496>
		convertAndSendData();
 8005e22:	f7ff fd81 	bl	8005928 <convertAndSendData>
	}
}
 8005e26:	bf00      	nop
 8005e28:	3708      	adds	r7, #8
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}
 8005e2e:	bf00      	nop
 8005e30:	20000c52 	.word	0x20000c52
 8005e34:	20000c43 	.word	0x20000c43
 8005e38:	20000c53 	.word	0x20000c53
 8005e3c:	20000c44 	.word	0x20000c44
 8005e40:	20000c46 	.word	0x20000c46
 8005e44:	20000c54 	.word	0x20000c54
 8005e48:	20000c47 	.word	0x20000c47
 8005e4c:	20000c48 	.word	0x20000c48
 8005e50:	20000c49 	.word	0x20000c49
 8005e54:	20000c4a 	.word	0x20000c4a
 8005e58:	20000c4b 	.word	0x20000c4b
 8005e5c:	20000c4c 	.word	0x20000c4c
 8005e60:	20000c4d 	.word	0x20000c4d
 8005e64:	20000c4e 	.word	0x20000c4e
 8005e68:	20000c4f 	.word	0x20000c4f
 8005e6c:	20000c50 	.word	0x20000c50
 8005e70:	20000c51 	.word	0x20000c51
 8005e74:	20000c55 	.word	0x20000c55
 8005e78:	20000c57 	.word	0x20000c57
 8005e7c:	20000c59 	.word	0x20000c59
 8005e80:	20000c5a 	.word	0x20000c5a
 8005e84:	20000c58 	.word	0x20000c58

08005e88 <hata2EEPROM>:

void hata2EEPROM(uint8_t hataKodu) {
 8005e88:	b590      	push	{r4, r7, lr}
 8005e8a:	b089      	sub	sp, #36	; 0x24
 8005e8c:	af04      	add	r7, sp, #16
 8005e8e:	4603      	mov	r3, r0
 8005e90:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8005e92:	4b26      	ldr	r3, [pc, #152]	; (8005f2c <hata2EEPROM+0xa4>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	1e5a      	subs	r2, r3, #1
 8005e98:	4b25      	ldr	r3, [pc, #148]	; (8005f30 <hata2EEPROM+0xa8>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	4a25      	ldr	r2, [pc, #148]	; (8005f34 <hata2EEPROM+0xac>)
 8005ea0:	5cd3      	ldrb	r3, [r2, r3]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d002      	beq.n	8005eac <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8005ea6:	f000 f849 	bl	8005f3c <eepromDataFillWithEmpty>
		goto veriEkleme;
 8005eaa:	e000      	b.n	8005eae <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8005eac:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8005eae:	2300      	movs	r3, #0
 8005eb0:	60fb      	str	r3, [r7, #12]
 8005eb2:	e012      	b.n	8005eda <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8005eb4:	4b1e      	ldr	r3, [pc, #120]	; (8005f30 <hata2EEPROM+0xa8>)
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	4413      	add	r3, r2
 8005ebc:	4a1d      	ldr	r2, [pc, #116]	; (8005f34 <hata2EEPROM+0xac>)
 8005ebe:	5cd3      	ldrb	r3, [r2, r3]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d107      	bne.n	8005ed4 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8005ec4:	4b1a      	ldr	r3, [pc, #104]	; (8005f30 <hata2EEPROM+0xa8>)
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	4413      	add	r3, r2
 8005ecc:	4919      	ldr	r1, [pc, #100]	; (8005f34 <hata2EEPROM+0xac>)
 8005ece:	79fa      	ldrb	r2, [r7, #7]
 8005ed0:	54ca      	strb	r2, [r1, r3]
					break;
 8005ed2:	e007      	b.n	8005ee4 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	60fb      	str	r3, [r7, #12]
 8005eda:	4b14      	ldr	r3, [pc, #80]	; (8005f2c <hata2EEPROM+0xa4>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	dbe7      	blt.n	8005eb4 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1,0xA0,eepromHataBaslangic,indeksSayisi,&eepromData[eepromHataBaslangic],indeksSayisi,3000);
 8005ee4:	4b12      	ldr	r3, [pc, #72]	; (8005f30 <hata2EEPROM+0xa8>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	b299      	uxth	r1, r3
 8005eea:	4b10      	ldr	r3, [pc, #64]	; (8005f2c <hata2EEPROM+0xa4>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	b298      	uxth	r0, r3
 8005ef0:	4b0f      	ldr	r3, [pc, #60]	; (8005f30 <hata2EEPROM+0xa8>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a0f      	ldr	r2, [pc, #60]	; (8005f34 <hata2EEPROM+0xac>)
 8005ef6:	4413      	add	r3, r2
 8005ef8:	4a0c      	ldr	r2, [pc, #48]	; (8005f2c <hata2EEPROM+0xa4>)
 8005efa:	6812      	ldr	r2, [r2, #0]
 8005efc:	b292      	uxth	r2, r2
 8005efe:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8005f02:	9402      	str	r4, [sp, #8]
 8005f04:	9201      	str	r2, [sp, #4]
 8005f06:	9300      	str	r3, [sp, #0]
 8005f08:	4603      	mov	r3, r0
 8005f0a:	460a      	mov	r2, r1
 8005f0c:	21a0      	movs	r1, #160	; 0xa0
 8005f0e:	480a      	ldr	r0, [pc, #40]	; (8005f38 <hata2EEPROM+0xb0>)
 8005f10:	f004 f888 	bl	800a024 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8005f14:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005f18:	f002 fffa 	bl	8008f10 <HAL_Delay>
	eepromKontrol(1);
 8005f1c:	2001      	movs	r0, #1
 8005f1e:	f7ff fd37 	bl	8005990 <eepromKontrol>
}
 8005f22:	bf00      	nop
 8005f24:	3714      	adds	r7, #20
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd90      	pop	{r4, r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	20000938 	.word	0x20000938
 8005f30:	2000093c 	.word	0x2000093c
 8005f34:	20000b28 	.word	0x20000b28
 8005f38:	20000df8 	.word	0x20000df8

08005f3c <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8005f42:	2300      	movs	r3, #0
 8005f44:	607b      	str	r3, [r7, #4]
 8005f46:	e009      	b.n	8005f5c <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8005f48:	4a0a      	ldr	r2, [pc, #40]	; (8005f74 <eepromDataFillWithEmpty+0x38>)
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f50:	4a09      	ldr	r2, [pc, #36]	; (8005f78 <eepromDataFillWithEmpty+0x3c>)
 8005f52:	2100      	movs	r1, #0
 8005f54:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	3301      	adds	r3, #1
 8005f5a:	607b      	str	r3, [r7, #4]
 8005f5c:	4b07      	ldr	r3, [pc, #28]	; (8005f7c <eepromDataFillWithEmpty+0x40>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	429a      	cmp	r2, r3
 8005f64:	dbf0      	blt.n	8005f48 <eepromDataFillWithEmpty+0xc>
	}
}
 8005f66:	bf00      	nop
 8005f68:	bf00      	nop
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bc80      	pop	{r7}
 8005f70:	4770      	bx	lr
 8005f72:	bf00      	nop
 8005f74:	20000910 	.word	0x20000910
 8005f78:	20000b28 	.word	0x20000b28
 8005f7c:	20000938 	.word	0x20000938

08005f80 <bekle>:
		return 1;
	}
	return 0;
}

void bekle() {
 8005f80:	b580      	push	{r7, lr}
 8005f82:	af00      	add	r7, sp, #0
	timer1=millis;
 8005f84:	4b47      	ldr	r3, [pc, #284]	; (80060a4 <bekle+0x124>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4a47      	ldr	r2, [pc, #284]	; (80060a8 <bekle+0x128>)
 8005f8a:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005f8c:	e002      	b.n	8005f94 <bekle+0x14>
    	butonKontrol = 1;
 8005f8e:	4b47      	ldr	r3, [pc, #284]	; (80060ac <bekle+0x12c>)
 8005f90:	2201      	movs	r2, #1
 8005f92:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005f94:	2101      	movs	r1, #1
 8005f96:	4846      	ldr	r0, [pc, #280]	; (80060b0 <bekle+0x130>)
 8005f98:	f003 fd8a 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8005f9c:	4603      	mov	r3, r0
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d109      	bne.n	8005fb6 <bekle+0x36>
 8005fa2:	4b40      	ldr	r3, [pc, #256]	; (80060a4 <bekle+0x124>)
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	4b40      	ldr	r3, [pc, #256]	; (80060a8 <bekle+0x128>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d0ef      	beq.n	8005f8e <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005fae:	e002      	b.n	8005fb6 <bekle+0x36>
    	butonKontrol = 1;
 8005fb0:	4b3e      	ldr	r3, [pc, #248]	; (80060ac <bekle+0x12c>)
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005fb6:	2108      	movs	r1, #8
 8005fb8:	483e      	ldr	r0, [pc, #248]	; (80060b4 <bekle+0x134>)
 8005fba:	f003 fd79 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b01      	cmp	r3, #1
 8005fc2:	d109      	bne.n	8005fd8 <bekle+0x58>
 8005fc4:	4b37      	ldr	r3, [pc, #220]	; (80060a4 <bekle+0x124>)
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	4b37      	ldr	r3, [pc, #220]	; (80060a8 <bekle+0x128>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	429a      	cmp	r2, r3
 8005fce:	d0ef      	beq.n	8005fb0 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005fd0:	e002      	b.n	8005fd8 <bekle+0x58>
    	butonKontrol = 1;
 8005fd2:	4b36      	ldr	r3, [pc, #216]	; (80060ac <bekle+0x12c>)
 8005fd4:	2201      	movs	r2, #1
 8005fd6:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005fd8:	2102      	movs	r1, #2
 8005fda:	4835      	ldr	r0, [pc, #212]	; (80060b0 <bekle+0x130>)
 8005fdc:	f003 fd68 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	2b01      	cmp	r3, #1
 8005fe4:	d109      	bne.n	8005ffa <bekle+0x7a>
 8005fe6:	4b2f      	ldr	r3, [pc, #188]	; (80060a4 <bekle+0x124>)
 8005fe8:	681a      	ldr	r2, [r3, #0]
 8005fea:	4b2f      	ldr	r3, [pc, #188]	; (80060a8 <bekle+0x128>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d0ef      	beq.n	8005fd2 <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005ff2:	e002      	b.n	8005ffa <bekle+0x7a>
    	butonKontrol = 1;
 8005ff4:	4b2d      	ldr	r3, [pc, #180]	; (80060ac <bekle+0x12c>)
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005ffa:	2104      	movs	r1, #4
 8005ffc:	482c      	ldr	r0, [pc, #176]	; (80060b0 <bekle+0x130>)
 8005ffe:	f003 fd57 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8006002:	4603      	mov	r3, r0
 8006004:	2b01      	cmp	r3, #1
 8006006:	d109      	bne.n	800601c <bekle+0x9c>
 8006008:	4b26      	ldr	r3, [pc, #152]	; (80060a4 <bekle+0x124>)
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	4b26      	ldr	r3, [pc, #152]	; (80060a8 <bekle+0x128>)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	429a      	cmp	r2, r3
 8006012:	d0ef      	beq.n	8005ff4 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8006014:	e002      	b.n	800601c <bekle+0x9c>
    	butonKontrol = 1;
 8006016:	4b25      	ldr	r3, [pc, #148]	; (80060ac <bekle+0x12c>)
 8006018:	2201      	movs	r2, #1
 800601a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800601c:	2108      	movs	r1, #8
 800601e:	4824      	ldr	r0, [pc, #144]	; (80060b0 <bekle+0x130>)
 8006020:	f003 fd46 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8006024:	4603      	mov	r3, r0
 8006026:	2b01      	cmp	r3, #1
 8006028:	d109      	bne.n	800603e <bekle+0xbe>
 800602a:	4b1e      	ldr	r3, [pc, #120]	; (80060a4 <bekle+0x124>)
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	4b1e      	ldr	r3, [pc, #120]	; (80060a8 <bekle+0x128>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	429a      	cmp	r2, r3
 8006034:	d0ef      	beq.n	8006016 <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8006036:	e002      	b.n	800603e <bekle+0xbe>
    	butonKontrol = 1;
 8006038:	4b1c      	ldr	r3, [pc, #112]	; (80060ac <bekle+0x12c>)
 800603a:	2201      	movs	r2, #1
 800603c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 800603e:	2180      	movs	r1, #128	; 0x80
 8006040:	481c      	ldr	r0, [pc, #112]	; (80060b4 <bekle+0x134>)
 8006042:	f003 fd35 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8006046:	4603      	mov	r3, r0
 8006048:	2b00      	cmp	r3, #0
 800604a:	d109      	bne.n	8006060 <bekle+0xe0>
 800604c:	4b15      	ldr	r3, [pc, #84]	; (80060a4 <bekle+0x124>)
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	4b15      	ldr	r3, [pc, #84]	; (80060a8 <bekle+0x128>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	429a      	cmp	r2, r3
 8006056:	d0ef      	beq.n	8006038 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8006058:	e002      	b.n	8006060 <bekle+0xe0>
    	butonKontrol = 1;
 800605a:	4b14      	ldr	r3, [pc, #80]	; (80060ac <bekle+0x12c>)
 800605c:	2201      	movs	r2, #1
 800605e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8006060:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006064:	4813      	ldr	r0, [pc, #76]	; (80060b4 <bekle+0x134>)
 8006066:	f003 fd23 	bl	8009ab0 <HAL_GPIO_ReadPin>
 800606a:	4603      	mov	r3, r0
 800606c:	2b00      	cmp	r3, #0
 800606e:	d109      	bne.n	8006084 <bekle+0x104>
 8006070:	4b0c      	ldr	r3, [pc, #48]	; (80060a4 <bekle+0x124>)
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	4b0c      	ldr	r3, [pc, #48]	; (80060a8 <bekle+0x128>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	429a      	cmp	r2, r3
 800607a:	d0ee      	beq.n	800605a <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 800607c:	e002      	b.n	8006084 <bekle+0x104>
    	butonKontrol = 1;
 800607e:	4b0b      	ldr	r3, [pc, #44]	; (80060ac <bekle+0x12c>)
 8006080:	2201      	movs	r2, #1
 8006082:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 8006084:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006088:	480a      	ldr	r0, [pc, #40]	; (80060b4 <bekle+0x134>)
 800608a:	f003 fd11 	bl	8009ab0 <HAL_GPIO_ReadPin>
 800608e:	4603      	mov	r3, r0
 8006090:	2b00      	cmp	r3, #0
 8006092:	d105      	bne.n	80060a0 <bekle+0x120>
 8006094:	4b03      	ldr	r3, [pc, #12]	; (80060a4 <bekle+0x124>)
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	4b03      	ldr	r3, [pc, #12]	; (80060a8 <bekle+0x128>)
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	429a      	cmp	r2, r3
 800609e:	d0ee      	beq.n	800607e <bekle+0xfe>
    }

}
 80060a0:	bf00      	nop
 80060a2:	bd80      	pop	{r7, pc}
 80060a4:	20000bc4 	.word	0x20000bc4
 80060a8:	20000bcc 	.word	0x20000bcc
 80060ac:	20000c68 	.word	0x20000c68
 80060b0:	40010800 	.word	0x40010800
 80060b4:	40011000 	.word	0x40011000

080060b8 <i2cTest>:

void i2cTest() {
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 80060be:	463b      	mov	r3, r7
 80060c0:	2200      	movs	r2, #0
 80060c2:	601a      	str	r2, [r3, #0]
 80060c4:	605a      	str	r2, [r3, #4]
 80060c6:	609a      	str	r2, [r3, #8]
 80060c8:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 80060ca:	4b50      	ldr	r3, [pc, #320]	; (800620c <i2cTest+0x154>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	681a      	ldr	r2, [r3, #0]
 80060d0:	4b4e      	ldr	r3, [pc, #312]	; (800620c <i2cTest+0x154>)
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f022 0201 	bic.w	r2, r2, #1
 80060d8:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 80060da:	484c      	ldr	r0, [pc, #304]	; (800620c <i2cTest+0x154>)
 80060dc:	f003 fe74 	bl	8009dc8 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80060e0:	23c0      	movs	r3, #192	; 0xc0
 80060e2:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 80060e4:	2311      	movs	r3, #17
 80060e6:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 80060e8:	2301      	movs	r3, #1
 80060ea:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 80060ec:	2303      	movs	r3, #3
 80060ee:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 80060f0:	463b      	mov	r3, r7
 80060f2:	4619      	mov	r1, r3
 80060f4:	4846      	ldr	r0, [pc, #280]	; (8006210 <i2cTest+0x158>)
 80060f6:	f003 fa7b 	bl	80095f0 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80060fa:	2201      	movs	r2, #1
 80060fc:	2140      	movs	r1, #64	; 0x40
 80060fe:	4844      	ldr	r0, [pc, #272]	; (8006210 <i2cTest+0x158>)
 8006100:	f003 fced 	bl	8009ade <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8006104:	2201      	movs	r2, #1
 8006106:	2180      	movs	r1, #128	; 0x80
 8006108:	4841      	ldr	r0, [pc, #260]	; (8006210 <i2cTest+0x158>)
 800610a:	f003 fce8 	bl	8009ade <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 800610e:	200a      	movs	r0, #10
 8006110:	f002 fefe 	bl	8008f10 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8006114:	bf00      	nop
 8006116:	2140      	movs	r1, #64	; 0x40
 8006118:	483d      	ldr	r0, [pc, #244]	; (8006210 <i2cTest+0x158>)
 800611a:	f003 fcc9 	bl	8009ab0 <HAL_GPIO_ReadPin>
 800611e:	4603      	mov	r3, r0
 8006120:	2b01      	cmp	r3, #1
 8006122:	d006      	beq.n	8006132 <i2cTest+0x7a>
 8006124:	2180      	movs	r1, #128	; 0x80
 8006126:	483a      	ldr	r0, [pc, #232]	; (8006210 <i2cTest+0x158>)
 8006128:	f003 fcc2 	bl	8009ab0 <HAL_GPIO_ReadPin>
 800612c:	4603      	mov	r3, r0
 800612e:	2b01      	cmp	r3, #1
 8006130:	d1f1      	bne.n	8006116 <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8006132:	2200      	movs	r2, #0
 8006134:	2180      	movs	r1, #128	; 0x80
 8006136:	4836      	ldr	r0, [pc, #216]	; (8006210 <i2cTest+0x158>)
 8006138:	f003 fcd1 	bl	8009ade <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 800613c:	200a      	movs	r0, #10
 800613e:	f002 fee7 	bl	8008f10 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8006142:	bf00      	nop
 8006144:	2180      	movs	r1, #128	; 0x80
 8006146:	4832      	ldr	r0, [pc, #200]	; (8006210 <i2cTest+0x158>)
 8006148:	f003 fcb2 	bl	8009ab0 <HAL_GPIO_ReadPin>
 800614c:	4603      	mov	r3, r0
 800614e:	2b01      	cmp	r3, #1
 8006150:	d0f8      	beq.n	8006144 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8006152:	2200      	movs	r2, #0
 8006154:	2140      	movs	r1, #64	; 0x40
 8006156:	482e      	ldr	r0, [pc, #184]	; (8006210 <i2cTest+0x158>)
 8006158:	f003 fcc1 	bl	8009ade <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 800615c:	200a      	movs	r0, #10
 800615e:	f002 fed7 	bl	8008f10 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8006162:	bf00      	nop
 8006164:	2140      	movs	r1, #64	; 0x40
 8006166:	482a      	ldr	r0, [pc, #168]	; (8006210 <i2cTest+0x158>)
 8006168:	f003 fca2 	bl	8009ab0 <HAL_GPIO_ReadPin>
 800616c:	4603      	mov	r3, r0
 800616e:	2b01      	cmp	r3, #1
 8006170:	d0f8      	beq.n	8006164 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8006172:	2201      	movs	r2, #1
 8006174:	2140      	movs	r1, #64	; 0x40
 8006176:	4826      	ldr	r0, [pc, #152]	; (8006210 <i2cTest+0x158>)
 8006178:	f003 fcb1 	bl	8009ade <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 800617c:	200a      	movs	r0, #10
 800617e:	f002 fec7 	bl	8008f10 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 8006182:	bf00      	nop
 8006184:	2140      	movs	r1, #64	; 0x40
 8006186:	4822      	ldr	r0, [pc, #136]	; (8006210 <i2cTest+0x158>)
 8006188:	f003 fc92 	bl	8009ab0 <HAL_GPIO_ReadPin>
 800618c:	4603      	mov	r3, r0
 800618e:	2b01      	cmp	r3, #1
 8006190:	d1f8      	bne.n	8006184 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8006192:	2201      	movs	r2, #1
 8006194:	2180      	movs	r1, #128	; 0x80
 8006196:	481e      	ldr	r0, [pc, #120]	; (8006210 <i2cTest+0x158>)
 8006198:	f003 fca1 	bl	8009ade <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 800619c:	200a      	movs	r0, #10
 800619e:	f002 feb7 	bl	8008f10 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 80061a2:	bf00      	nop
 80061a4:	2180      	movs	r1, #128	; 0x80
 80061a6:	481a      	ldr	r0, [pc, #104]	; (8006210 <i2cTest+0x158>)
 80061a8:	f003 fc82 	bl	8009ab0 <HAL_GPIO_ReadPin>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d1f8      	bne.n	80061a4 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80061b2:	23c0      	movs	r3, #192	; 0xc0
 80061b4:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 80061b6:	2312      	movs	r3, #18
 80061b8:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 80061ba:	2301      	movs	r3, #1
 80061bc:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 80061be:	2303      	movs	r3, #3
 80061c0:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 80061c2:	463b      	mov	r3, r7
 80061c4:	4619      	mov	r1, r3
 80061c6:	4812      	ldr	r0, [pc, #72]	; (8006210 <i2cTest+0x158>)
 80061c8:	f003 fa12 	bl	80095f0 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 80061cc:	4b0f      	ldr	r3, [pc, #60]	; (800620c <i2cTest+0x154>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	681a      	ldr	r2, [r3, #0]
 80061d2:	4b0e      	ldr	r3, [pc, #56]	; (800620c <i2cTest+0x154>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80061da:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 80061dc:	4b0b      	ldr	r3, [pc, #44]	; (800620c <i2cTest+0x154>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	4b0a      	ldr	r3, [pc, #40]	; (800620c <i2cTest+0x154>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80061ea:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 80061ec:	4b07      	ldr	r3, [pc, #28]	; (800620c <i2cTest+0x154>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	4b06      	ldr	r3, [pc, #24]	; (800620c <i2cTest+0x154>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f042 0201 	orr.w	r2, r2, #1
 80061fa:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 80061fc:	4803      	ldr	r0, [pc, #12]	; (800620c <i2cTest+0x154>)
 80061fe:	f003 fc9f 	bl	8009b40 <HAL_I2C_Init>
}
 8006202:	bf00      	nop
 8006204:	3710      	adds	r7, #16
 8006206:	46bd      	mov	sp, r7
 8006208:	bd80      	pop	{r7, pc}
 800620a:	bf00      	nop
 800620c:	20000df8 	.word	0x20000df8
 8006210:	40010c00 	.word	0x40010c00

08006214 <checkLCDBacklight>:

void checkLCDBacklight() {
 8006214:	b580      	push	{r7, lr}
 8006216:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure*10) {
 8006218:	4b0b      	ldr	r3, [pc, #44]	; (8006248 <checkLCDBacklight+0x34>)
 800621a:	681a      	ldr	r2, [r3, #0]
 800621c:	4b0b      	ldr	r3, [pc, #44]	; (800624c <checkLCDBacklight+0x38>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	1ad2      	subs	r2, r2, r3
 8006222:	4b0b      	ldr	r3, [pc, #44]	; (8006250 <checkLCDBacklight+0x3c>)
 8006224:	781b      	ldrb	r3, [r3, #0]
 8006226:	4619      	mov	r1, r3
 8006228:	460b      	mov	r3, r1
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	440b      	add	r3, r1
 800622e:	005b      	lsls	r3, r3, #1
 8006230:	429a      	cmp	r2, r3
 8006232:	d303      	bcc.n	800623c <checkLCDBacklight+0x28>
		lcd_backlight(0);
 8006234:	2000      	movs	r0, #0
 8006236:	f7fa fa63 	bl	8000700 <lcd_backlight>
	} else {
		lcd_backlight(1);
	}
}
 800623a:	e002      	b.n	8006242 <checkLCDBacklight+0x2e>
		lcd_backlight(1);
 800623c:	2001      	movs	r0, #1
 800623e:	f7fa fa5f 	bl	8000700 <lcd_backlight>
}
 8006242:	bf00      	nop
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	20000bc4 	.word	0x20000bc4
 800624c:	20000be0 	.word	0x20000be0
 8006250:	20000940 	.word	0x20000940

08006254 <checkBasincSalteri>:

void checkBasincSalteri() {
 8006254:	b580      	push	{r7, lr}
 8006256:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 8006258:	4b13      	ldr	r3, [pc, #76]	; (80062a8 <checkBasincSalteri+0x54>)
 800625a:	781b      	ldrb	r3, [r3, #0]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d102      	bne.n	8006266 <checkBasincSalteri+0x12>
		basincVar=1;
 8006260:	4b12      	ldr	r3, [pc, #72]	; (80062ac <checkBasincSalteri+0x58>)
 8006262:	2201      	movs	r2, #1
 8006264:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri==1) {
 8006266:	4b10      	ldr	r3, [pc, #64]	; (80062a8 <checkBasincSalteri+0x54>)
 8006268:	781b      	ldrb	r3, [r3, #0]
 800626a:	2b01      	cmp	r3, #1
 800626c:	d119      	bne.n	80062a2 <checkBasincSalteri+0x4e>
		if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 800626e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006272:	480f      	ldr	r0, [pc, #60]	; (80062b0 <checkBasincSalteri+0x5c>)
 8006274:	f003 fc1c 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8006278:	4603      	mov	r3, r0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d10a      	bne.n	8006294 <checkBasincSalteri+0x40>
			if(millis-timer5>=3) {
 800627e:	4b0d      	ldr	r3, [pc, #52]	; (80062b4 <checkBasincSalteri+0x60>)
 8006280:	681a      	ldr	r2, [r3, #0]
 8006282:	4b0d      	ldr	r3, [pc, #52]	; (80062b8 <checkBasincSalteri+0x64>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	1ad3      	subs	r3, r2, r3
 8006288:	2b02      	cmp	r3, #2
 800628a:	d90a      	bls.n	80062a2 <checkBasincSalteri+0x4e>
				basincVar=1;
 800628c:	4b07      	ldr	r3, [pc, #28]	; (80062ac <checkBasincSalteri+0x58>)
 800628e:	2201      	movs	r2, #1
 8006290:	701a      	strb	r2, [r3, #0]
		} else {
			timer5=millis;
			basincVar=0;
		}
	}
}
 8006292:	e006      	b.n	80062a2 <checkBasincSalteri+0x4e>
			timer5=millis;
 8006294:	4b07      	ldr	r3, [pc, #28]	; (80062b4 <checkBasincSalteri+0x60>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	4a07      	ldr	r2, [pc, #28]	; (80062b8 <checkBasincSalteri+0x64>)
 800629a:	6013      	str	r3, [r2, #0]
			basincVar=0;
 800629c:	4b03      	ldr	r3, [pc, #12]	; (80062ac <checkBasincSalteri+0x58>)
 800629e:	2200      	movs	r2, #0
 80062a0:	701a      	strb	r2, [r3, #0]
}
 80062a2:	bf00      	nop
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	20000c40 	.word	0x20000c40
 80062ac:	20000c3c 	.word	0x20000c3c
 80062b0:	40011000 	.word	0x40011000
 80062b4:	20000bc4 	.word	0x20000bc4
 80062b8:	20000bdc 	.word	0x20000bdc

080062bc <checkBasGonder>:

void checkBasGonder() {
 80062bc:	b480      	push	{r7}
 80062be:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 80062c0:	4b1b      	ldr	r3, [pc, #108]	; (8006330 <checkBasGonder+0x74>)
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d10b      	bne.n	80062e0 <checkBasGonder+0x24>
 80062c8:	4b1a      	ldr	r3, [pc, #104]	; (8006334 <checkBasGonder+0x78>)
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d007      	beq.n	80062e0 <checkBasGonder+0x24>
 80062d0:	4b19      	ldr	r3, [pc, #100]	; (8006338 <checkBasGonder+0x7c>)
 80062d2:	781b      	ldrb	r3, [r3, #0]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d103      	bne.n	80062e0 <checkBasGonder+0x24>
		basgondercalisyukari=1;
 80062d8:	4b18      	ldr	r3, [pc, #96]	; (800633c <checkBasGonder+0x80>)
 80062da:	2201      	movs	r2, #1
 80062dc:	701a      	strb	r2, [r3, #0]
 80062de:	e009      	b.n	80062f4 <checkBasGonder+0x38>
	} else if(yukarimotorcalisiyor==0) {
 80062e0:	4b14      	ldr	r3, [pc, #80]	; (8006334 <checkBasGonder+0x78>)
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	f083 0301 	eor.w	r3, r3, #1
 80062e8:	b2db      	uxtb	r3, r3
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d002      	beq.n	80062f4 <checkBasGonder+0x38>
		basgondercalisyukari=0;
 80062ee:	4b13      	ldr	r3, [pc, #76]	; (800633c <checkBasGonder+0x80>)
 80062f0:	2200      	movs	r2, #0
 80062f2:	701a      	strb	r2, [r3, #0]
	}

	if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 80062f4:	4b0e      	ldr	r3, [pc, #56]	; (8006330 <checkBasGonder+0x74>)
 80062f6:	781b      	ldrb	r3, [r3, #0]
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d10b      	bne.n	8006314 <checkBasGonder+0x58>
 80062fc:	4b10      	ldr	r3, [pc, #64]	; (8006340 <checkBasGonder+0x84>)
 80062fe:	781b      	ldrb	r3, [r3, #0]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d007      	beq.n	8006314 <checkBasGonder+0x58>
 8006304:	4b0c      	ldr	r3, [pc, #48]	; (8006338 <checkBasGonder+0x7c>)
 8006306:	781b      	ldrb	r3, [r3, #0]
 8006308:	2b00      	cmp	r3, #0
 800630a:	d103      	bne.n	8006314 <checkBasGonder+0x58>
		basgondercalisasagi=1;
 800630c:	4b0d      	ldr	r3, [pc, #52]	; (8006344 <checkBasGonder+0x88>)
 800630e:	2201      	movs	r2, #1
 8006310:	701a      	strb	r2, [r3, #0]
	} else if(asagivalfcalisiyor==0) {
		basgondercalisasagi=0;
	}
}
 8006312:	e009      	b.n	8006328 <checkBasGonder+0x6c>
	} else if(asagivalfcalisiyor==0) {
 8006314:	4b0a      	ldr	r3, [pc, #40]	; (8006340 <checkBasGonder+0x84>)
 8006316:	781b      	ldrb	r3, [r3, #0]
 8006318:	f083 0301 	eor.w	r3, r3, #1
 800631c:	b2db      	uxtb	r3, r3
 800631e:	2b00      	cmp	r3, #0
 8006320:	d002      	beq.n	8006328 <checkBasGonder+0x6c>
		basgondercalisasagi=0;
 8006322:	4b08      	ldr	r3, [pc, #32]	; (8006344 <checkBasGonder+0x88>)
 8006324:	2200      	movs	r2, #0
 8006326:	701a      	strb	r2, [r3, #0]
}
 8006328:	bf00      	nop
 800632a:	46bd      	mov	sp, r7
 800632c:	bc80      	pop	{r7}
 800632e:	4770      	bx	lr
 8006330:	20000c3a 	.word	0x20000c3a
 8006334:	20000c6e 	.word	0x20000c6e
 8006338:	20000c48 	.word	0x20000c48
 800633c:	20000c75 	.word	0x20000c75
 8006340:	20000c71 	.word	0x20000c71
 8006344:	20000c76 	.word	0x20000c76

08006348 <checkKapiSecimleri>:

void checkKapiSecimleri() {
 8006348:	b580      	push	{r7, lr}
 800634a:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 800634c:	4b24      	ldr	r3, [pc, #144]	; (80063e0 <checkKapiSecimleri+0x98>)
 800634e:	781b      	ldrb	r3, [r3, #0]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d102      	bne.n	800635a <checkKapiSecimleri+0x12>
		kapiSivicVar=1;
 8006354:	4b23      	ldr	r3, [pc, #140]	; (80063e4 <checkKapiSecimleri+0x9c>)
 8006356:	2201      	movs	r2, #1
 8006358:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri==1) {
 800635a:	4b21      	ldr	r3, [pc, #132]	; (80063e0 <checkKapiSecimleri+0x98>)
 800635c:	781b      	ldrb	r3, [r3, #0]
 800635e:	2b01      	cmp	r3, #1
 8006360:	d10e      	bne.n	8006380 <checkKapiSecimleri+0x38>
		if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8006362:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006366:	4820      	ldr	r0, [pc, #128]	; (80063e8 <checkKapiSecimleri+0xa0>)
 8006368:	f003 fba2 	bl	8009ab0 <HAL_GPIO_ReadPin>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d103      	bne.n	800637a <checkKapiSecimleri+0x32>
			kapiSivicVar=1;
 8006372:	4b1c      	ldr	r3, [pc, #112]	; (80063e4 <checkKapiSecimleri+0x9c>)
 8006374:	2201      	movs	r2, #1
 8006376:	701a      	strb	r2, [r3, #0]
 8006378:	e002      	b.n	8006380 <checkKapiSecimleri+0x38>
		} else {
			kapiSivicVar=0;
 800637a:	4b1a      	ldr	r3, [pc, #104]	; (80063e4 <checkKapiSecimleri+0x9c>)
 800637c:	2200      	movs	r2, #0
 800637e:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==2){
 8006380:	4b17      	ldr	r3, [pc, #92]	; (80063e0 <checkKapiSecimleri+0x98>)
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	2b02      	cmp	r3, #2
 8006386:	d10e      	bne.n	80063a6 <checkKapiSecimleri+0x5e>
		if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 8006388:	f44f 7180 	mov.w	r1, #256	; 0x100
 800638c:	4816      	ldr	r0, [pc, #88]	; (80063e8 <checkKapiSecimleri+0xa0>)
 800638e:	f003 fb8f 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8006392:	4603      	mov	r3, r0
 8006394:	2b00      	cmp	r3, #0
 8006396:	d103      	bne.n	80063a0 <checkKapiSecimleri+0x58>
			kapiSivicVar=1;
 8006398:	4b12      	ldr	r3, [pc, #72]	; (80063e4 <checkKapiSecimleri+0x9c>)
 800639a:	2201      	movs	r2, #1
 800639c:	701a      	strb	r2, [r3, #0]
 800639e:	e002      	b.n	80063a6 <checkKapiSecimleri+0x5e>
		} else {
			kapiSivicVar=0;
 80063a0:	4b10      	ldr	r3, [pc, #64]	; (80063e4 <checkKapiSecimleri+0x9c>)
 80063a2:	2200      	movs	r2, #0
 80063a4:	701a      	strb	r2, [r3, #0]
		}
	}

	if(kapiSecimleri==3) {
 80063a6:	4b0e      	ldr	r3, [pc, #56]	; (80063e0 <checkKapiSecimleri+0x98>)
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	2b03      	cmp	r3, #3
 80063ac:	d116      	bne.n	80063dc <checkKapiSecimleri+0x94>
		if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 80063ae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80063b2:	480d      	ldr	r0, [pc, #52]	; (80063e8 <checkKapiSecimleri+0xa0>)
 80063b4:	f003 fb7c 	bl	8009ab0 <HAL_GPIO_ReadPin>
 80063b8:	4603      	mov	r3, r0
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d10b      	bne.n	80063d6 <checkKapiSecimleri+0x8e>
 80063be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80063c2:	4809      	ldr	r0, [pc, #36]	; (80063e8 <checkKapiSecimleri+0xa0>)
 80063c4:	f003 fb74 	bl	8009ab0 <HAL_GPIO_ReadPin>
 80063c8:	4603      	mov	r3, r0
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d103      	bne.n	80063d6 <checkKapiSecimleri+0x8e>
			kapiSivicVar=1;
 80063ce:	4b05      	ldr	r3, [pc, #20]	; (80063e4 <checkKapiSecimleri+0x9c>)
 80063d0:	2201      	movs	r2, #1
 80063d2:	701a      	strb	r2, [r3, #0]
		} else {
			kapiSivicVar=0;
		}
	}
}
 80063d4:	e002      	b.n	80063dc <checkKapiSecimleri+0x94>
			kapiSivicVar=0;
 80063d6:	4b03      	ldr	r3, [pc, #12]	; (80063e4 <checkKapiSecimleri+0x9c>)
 80063d8:	2200      	movs	r2, #0
 80063da:	701a      	strb	r2, [r3, #0]
}
 80063dc:	bf00      	nop
 80063de:	bd80      	pop	{r7, pc}
 80063e0:	20000c41 	.word	0x20000c41
 80063e4:	20000c8c 	.word	0x20000c8c
 80063e8:	40010800 	.word	0x40010800

080063ec <checkAktifCalisma>:

void checkAktifCalisma() {
 80063ec:	b580      	push	{r7, lr}
 80063ee:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 80063f0:	4b62      	ldr	r3, [pc, #392]	; (800657c <checkAktifCalisma+0x190>)
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	f041 8332 	bne.w	8007a5e <checkAktifCalisma+0x1672>
 80063fa:	4b61      	ldr	r3, [pc, #388]	; (8006580 <checkAktifCalisma+0x194>)
 80063fc:	781b      	ldrb	r3, [r3, #0]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	f041 832d 	bne.w	8007a5e <checkAktifCalisma+0x1672>
		if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8006404:	4b5f      	ldr	r3, [pc, #380]	; (8006584 <checkAktifCalisma+0x198>)
 8006406:	781b      	ldrb	r3, [r3, #0]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d11a      	bne.n	8006442 <checkAktifCalisma+0x56>
 800640c:	4b5e      	ldr	r3, [pc, #376]	; (8006588 <checkAktifCalisma+0x19c>)
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d116      	bne.n	8006442 <checkAktifCalisma+0x56>
 8006414:	4b5d      	ldr	r3, [pc, #372]	; (800658c <checkAktifCalisma+0x1a0>)
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d00a      	beq.n	8006432 <checkAktifCalisma+0x46>
 800641c:	4b5c      	ldr	r3, [pc, #368]	; (8006590 <checkAktifCalisma+0x1a4>)
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	f083 0301 	eor.w	r3, r3, #1
 8006424:	b2db      	uxtb	r3, r3
 8006426:	2b00      	cmp	r3, #0
 8006428:	d003      	beq.n	8006432 <checkAktifCalisma+0x46>
 800642a:	4b5a      	ldr	r3, [pc, #360]	; (8006594 <checkAktifCalisma+0x1a8>)
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	2b01      	cmp	r3, #1
 8006430:	d007      	beq.n	8006442 <checkAktifCalisma+0x56>
 8006432:	4b59      	ldr	r3, [pc, #356]	; (8006598 <checkAktifCalisma+0x1ac>)
 8006434:	781b      	ldrb	r3, [r3, #0]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d018      	beq.n	800646c <checkAktifCalisma+0x80>
 800643a:	4b58      	ldr	r3, [pc, #352]	; (800659c <checkAktifCalisma+0x1b0>)
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	2b01      	cmp	r3, #1
 8006440:	d114      	bne.n	800646c <checkAktifCalisma+0x80>
 8006442:	4b57      	ldr	r3, [pc, #348]	; (80065a0 <checkAktifCalisma+0x1b4>)
 8006444:	781b      	ldrb	r3, [r3, #0]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d010      	beq.n	800646c <checkAktifCalisma+0x80>
 800644a:	4b56      	ldr	r3, [pc, #344]	; (80065a4 <checkAktifCalisma+0x1b8>)
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d00c      	beq.n	800646c <checkAktifCalisma+0x80>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8006452:	2201      	movs	r2, #1
 8006454:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006458:	4853      	ldr	r0, [pc, #332]	; (80065a8 <checkAktifCalisma+0x1bc>)
 800645a:	f003 fb40 	bl	8009ade <HAL_GPIO_WritePin>
			motorcalisiyor=1;
 800645e:	4b53      	ldr	r3, [pc, #332]	; (80065ac <checkAktifCalisma+0x1c0>)
 8006460:	2201      	movs	r2, #1
 8006462:	701a      	strb	r2, [r3, #0]
			CalismaSayisiYukari=1;
 8006464:	4b52      	ldr	r3, [pc, #328]	; (80065b0 <checkAktifCalisma+0x1c4>)
 8006466:	2201      	movs	r2, #1
 8006468:	701a      	strb	r2, [r3, #0]
 800646a:	e008      	b.n	800647e <checkAktifCalisma+0x92>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 800646c:	2200      	movs	r2, #0
 800646e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006472:	484d      	ldr	r0, [pc, #308]	; (80065a8 <checkAktifCalisma+0x1bc>)
 8006474:	f003 fb33 	bl	8009ade <HAL_GPIO_WritePin>
			motorcalisiyor=0;
 8006478:	4b4c      	ldr	r3, [pc, #304]	; (80065ac <checkAktifCalisma+0x1c0>)
 800647a:	2200      	movs	r2, #0
 800647c:	701a      	strb	r2, [r3, #0]
		}

		/*YUKARI ÇALISMA*/

		if((menuGiris==0) && (stopVar) && (kapiSivicVar)																		/********* motor calısması ***********/
 800647e:	4b40      	ldr	r3, [pc, #256]	; (8006580 <checkAktifCalisma+0x194>)
 8006480:	781b      	ldrb	r3, [r3, #0]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d160      	bne.n	8006548 <checkAktifCalisma+0x15c>
 8006486:	4b46      	ldr	r3, [pc, #280]	; (80065a0 <checkAktifCalisma+0x1b4>)
 8006488:	781b      	ldrb	r3, [r3, #0]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d05c      	beq.n	8006548 <checkAktifCalisma+0x15c>
 800648e:	4b45      	ldr	r3, [pc, #276]	; (80065a4 <checkAktifCalisma+0x1b8>)
 8006490:	781b      	ldrb	r3, [r3, #0]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d058      	beq.n	8006548 <checkAktifCalisma+0x15c>
				&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 8006496:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800649a:	4843      	ldr	r0, [pc, #268]	; (80065a8 <checkAktifCalisma+0x1bc>)
 800649c:	f003 fb08 	bl	8009ab0 <HAL_GPIO_ReadPin>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d003      	beq.n	80064ae <checkAktifCalisma+0xc2>
 80064a6:	4b43      	ldr	r3, [pc, #268]	; (80065b4 <checkAktifCalisma+0x1c8>)
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d04c      	beq.n	8006548 <checkAktifCalisma+0x15c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80064ae:	2102      	movs	r1, #2
 80064b0:	4841      	ldr	r0, [pc, #260]	; (80065b8 <checkAktifCalisma+0x1cc>)
 80064b2:	f003 fafd 	bl	8009ab0 <HAL_GPIO_ReadPin>
 80064b6:	4603      	mov	r3, r0
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d145      	bne.n	8006548 <checkAktifCalisma+0x15c>
				&& (basincVar)
 80064bc:	4b3f      	ldr	r3, [pc, #252]	; (80065bc <checkAktifCalisma+0x1d0>)
 80064be:	781b      	ldrb	r3, [r3, #0]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d041      	beq.n	8006548 <checkAktifCalisma+0x15c>
				&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 80064c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80064c8:	4837      	ldr	r0, [pc, #220]	; (80065a8 <checkAktifCalisma+0x1bc>)
 80064ca:	f003 faf1 	bl	8009ab0 <HAL_GPIO_ReadPin>
 80064ce:	4603      	mov	r3, r0
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d10e      	bne.n	80064f2 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80064d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80064d8:	4833      	ldr	r0, [pc, #204]	; (80065a8 <checkAktifCalisma+0x1bc>)
 80064da:	f003 fae9 	bl	8009ab0 <HAL_GPIO_ReadPin>
 80064de:	4603      	mov	r3, r0
 80064e0:	2b01      	cmp	r3, #1
 80064e2:	d106      	bne.n	80064f2 <checkAktifCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 80064e4:	2140      	movs	r1, #64	; 0x40
 80064e6:	4834      	ldr	r0, [pc, #208]	; (80065b8 <checkAktifCalisma+0x1cc>)
 80064e8:	f003 fae2 	bl	8009ab0 <HAL_GPIO_ReadPin>
 80064ec:	4603      	mov	r3, r0
 80064ee:	2b01      	cmp	r3, #1
 80064f0:	d003      	beq.n	80064fa <checkAktifCalisma+0x10e>
 80064f2:	4b24      	ldr	r3, [pc, #144]	; (8006584 <checkAktifCalisma+0x198>)
 80064f4:	781b      	ldrb	r3, [r3, #0]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d026      	beq.n	8006548 <checkAktifCalisma+0x15c>
				&& (asagivalfcalisiyor==0)
 80064fa:	4b24      	ldr	r3, [pc, #144]	; (800658c <checkAktifCalisma+0x1a0>)
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	f083 0301 	eor.w	r3, r3, #1
 8006502:	b2db      	uxtb	r3, r3
 8006504:	2b00      	cmp	r3, #0
 8006506:	d01f      	beq.n	8006548 <checkAktifCalisma+0x15c>
				&& (devmotoryukaricalisiyor==0)
 8006508:	4b1f      	ldr	r3, [pc, #124]	; (8006588 <checkAktifCalisma+0x19c>)
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	f083 0301 	eor.w	r3, r3, #1
 8006510:	b2db      	uxtb	r3, r3
 8006512:	2b00      	cmp	r3, #0
 8006514:	d018      	beq.n	8006548 <checkAktifCalisma+0x15c>
				&& (devmotorasagicalisiyor==0)
 8006516:	4b20      	ldr	r3, [pc, #128]	; (8006598 <checkAktifCalisma+0x1ac>)
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	f083 0301 	eor.w	r3, r3, #1
 800651e:	b2db      	uxtb	r3, r3
 8006520:	2b00      	cmp	r3, #0
 8006522:	d011      	beq.n	8006548 <checkAktifCalisma+0x15c>
				&&(devyukarivalfcalisiyor==0)
 8006524:	4b26      	ldr	r3, [pc, #152]	; (80065c0 <checkAktifCalisma+0x1d4>)
 8006526:	781b      	ldrb	r3, [r3, #0]
 8006528:	f083 0301 	eor.w	r3, r3, #1
 800652c:	b2db      	uxtb	r3, r3
 800652e:	2b00      	cmp	r3, #0
 8006530:	d00a      	beq.n	8006548 <checkAktifCalisma+0x15c>
				&&(devasagivalfcalisiyor==0)) {
 8006532:	4b24      	ldr	r3, [pc, #144]	; (80065c4 <checkAktifCalisma+0x1d8>)
 8006534:	781b      	ldrb	r3, [r3, #0]
 8006536:	f083 0301 	eor.w	r3, r3, #1
 800653a:	b2db      	uxtb	r3, r3
 800653c:	2b00      	cmp	r3, #0
 800653e:	d003      	beq.n	8006548 <checkAktifCalisma+0x15c>
			yukarimotorcalisiyor=1;
 8006540:	4b10      	ldr	r3, [pc, #64]	; (8006584 <checkAktifCalisma+0x198>)
 8006542:	2201      	movs	r2, #1
 8006544:	701a      	strb	r2, [r3, #0]
 8006546:	e002      	b.n	800654e <checkAktifCalisma+0x162>
		} else {
			yukarimotorcalisiyor=0;
 8006548:	4b0e      	ldr	r3, [pc, #56]	; (8006584 <checkAktifCalisma+0x198>)
 800654a:	2200      	movs	r2, #0
 800654c:	701a      	strb	r2, [r3, #0]
		}

		if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 800654e:	4b0d      	ldr	r3, [pc, #52]	; (8006584 <checkAktifCalisma+0x198>)
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d03a      	beq.n	80065cc <checkAktifCalisma+0x1e0>
 8006556:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800655a:	4817      	ldr	r0, [pc, #92]	; (80065b8 <checkAktifCalisma+0x1cc>)
 800655c:	f003 faa8 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8006560:	4603      	mov	r3, r0
 8006562:	2b01      	cmp	r3, #1
 8006564:	d132      	bne.n	80065cc <checkAktifCalisma+0x1e0>
 8006566:	4b18      	ldr	r3, [pc, #96]	; (80065c8 <checkAktifCalisma+0x1dc>)
 8006568:	781b      	ldrb	r3, [r3, #0]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d02e      	beq.n	80065cc <checkAktifCalisma+0x1e0>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 800656e:	2201      	movs	r2, #1
 8006570:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006574:	480c      	ldr	r0, [pc, #48]	; (80065a8 <checkAktifCalisma+0x1bc>)
 8006576:	f003 fab2 	bl	8009ade <HAL_GPIO_WritePin>
 800657a:	e02d      	b.n	80065d8 <checkAktifCalisma+0x1ec>
 800657c:	20000c57 	.word	0x20000c57
 8006580:	20000c56 	.word	0x20000c56
 8006584:	20000c6e 	.word	0x20000c6e
 8006588:	20000c6f 	.word	0x20000c6f
 800658c:	20000c71 	.word	0x20000c71
 8006590:	20000c69 	.word	0x20000c69
 8006594:	20000c4c 	.word	0x20000c4c
 8006598:	20000c70 	.word	0x20000c70
 800659c:	20000c4b 	.word	0x20000c4b
 80065a0:	20000c8b 	.word	0x20000c8b
 80065a4:	20000c8c 	.word	0x20000c8c
 80065a8:	40010c00 	.word	0x40010c00
 80065ac:	20000c8d 	.word	0x20000c8d
 80065b0:	20000c78 	.word	0x20000c78
 80065b4:	20000c75 	.word	0x20000c75
 80065b8:	40011000 	.word	0x40011000
 80065bc:	20000c3c 	.word	0x20000c3c
 80065c0:	20000c73 	.word	0x20000c73
 80065c4:	20000c74 	.word	0x20000c74
 80065c8:	20000c47 	.word	0x20000c47
		} else {
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80065cc:	2200      	movs	r2, #0
 80065ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80065d2:	4860      	ldr	r0, [pc, #384]	; (8006754 <checkAktifCalisma+0x368>)
 80065d4:	f003 fa83 	bl	8009ade <HAL_GPIO_WritePin>
		}

		if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 80065d8:	4b5f      	ldr	r3, [pc, #380]	; (8006758 <checkAktifCalisma+0x36c>)
 80065da:	781b      	ldrb	r3, [r3, #0]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d013      	beq.n	8006608 <checkAktifCalisma+0x21c>
 80065e0:	4b5e      	ldr	r3, [pc, #376]	; (800675c <checkAktifCalisma+0x370>)
 80065e2:	781b      	ldrb	r3, [r3, #0]
 80065e4:	2b01      	cmp	r3, #1
 80065e6:	d007      	beq.n	80065f8 <checkAktifCalisma+0x20c>
 80065e8:	4b5c      	ldr	r3, [pc, #368]	; (800675c <checkAktifCalisma+0x370>)
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	2b02      	cmp	r3, #2
 80065ee:	d003      	beq.n	80065f8 <checkAktifCalisma+0x20c>
 80065f0:	4b5b      	ldr	r3, [pc, #364]	; (8006760 <checkAktifCalisma+0x374>)
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d107      	bne.n	8006608 <checkAktifCalisma+0x21c>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 80065f8:	2201      	movs	r2, #1
 80065fa:	2104      	movs	r1, #4
 80065fc:	4855      	ldr	r0, [pc, #340]	; (8006754 <checkAktifCalisma+0x368>)
 80065fe:	f003 fa6e 	bl	8009ade <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=1;
 8006602:	4b58      	ldr	r3, [pc, #352]	; (8006764 <checkAktifCalisma+0x378>)
 8006604:	2201      	movs	r2, #1
 8006606:	701a      	strb	r2, [r3, #0]
		}

		// yukari valf timer calisması

		if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 8006608:	4b56      	ldr	r3, [pc, #344]	; (8006764 <checkAktifCalisma+0x378>)
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d02f      	beq.n	8006670 <checkAktifCalisma+0x284>
 8006610:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006614:	484f      	ldr	r0, [pc, #316]	; (8006754 <checkAktifCalisma+0x368>)
 8006616:	f003 fa4b 	bl	8009ab0 <HAL_GPIO_ReadPin>
 800661a:	4603      	mov	r3, r0
 800661c:	2b01      	cmp	r3, #1
 800661e:	d106      	bne.n	800662e <checkAktifCalisma+0x242>
 8006620:	4b51      	ldr	r3, [pc, #324]	; (8006768 <checkAktifCalisma+0x37c>)
 8006622:	781b      	ldrb	r3, [r3, #0]
 8006624:	f083 0301 	eor.w	r3, r3, #1
 8006628:	b2db      	uxtb	r3, r3
 800662a:	2b00      	cmp	r3, #0
 800662c:	d106      	bne.n	800663c <checkAktifCalisma+0x250>
 800662e:	2102      	movs	r1, #2
 8006630:	484e      	ldr	r0, [pc, #312]	; (800676c <checkAktifCalisma+0x380>)
 8006632:	f003 fa3d 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8006636:	4603      	mov	r3, r0
 8006638:	2b01      	cmp	r3, #1
 800663a:	d119      	bne.n	8006670 <checkAktifCalisma+0x284>
 800663c:	4b4c      	ldr	r3, [pc, #304]	; (8006770 <checkAktifCalisma+0x384>)
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d015      	beq.n	8006670 <checkAktifCalisma+0x284>
 8006644:	4b4b      	ldr	r3, [pc, #300]	; (8006774 <checkAktifCalisma+0x388>)
 8006646:	781b      	ldrb	r3, [r3, #0]
 8006648:	2b00      	cmp	r3, #0
 800664a:	d011      	beq.n	8006670 <checkAktifCalisma+0x284>
 800664c:	4b4a      	ldr	r3, [pc, #296]	; (8006778 <checkAktifCalisma+0x38c>)
 800664e:	781b      	ldrb	r3, [r3, #0]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d00d      	beq.n	8006670 <checkAktifCalisma+0x284>
 8006654:	4b49      	ldr	r3, [pc, #292]	; (800677c <checkAktifCalisma+0x390>)
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	f083 0301 	eor.w	r3, r3, #1
 800665c:	b2db      	uxtb	r3, r3
 800665e:	2b00      	cmp	r3, #0
 8006660:	d006      	beq.n	8006670 <checkAktifCalisma+0x284>
			timer2=millis;
 8006662:	4b47      	ldr	r3, [pc, #284]	; (8006780 <checkAktifCalisma+0x394>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a47      	ldr	r2, [pc, #284]	; (8006784 <checkAktifCalisma+0x398>)
 8006668:	6013      	str	r3, [r2, #0]
			butonKontrol3=1;
 800666a:	4b44      	ldr	r3, [pc, #272]	; (800677c <checkAktifCalisma+0x390>)
 800666c:	2201      	movs	r2, #1
 800666e:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 8006670:	4b43      	ldr	r3, [pc, #268]	; (8006780 <checkAktifCalisma+0x394>)
 8006672:	681a      	ldr	r2, [r3, #0]
 8006674:	4b43      	ldr	r3, [pc, #268]	; (8006784 <checkAktifCalisma+0x398>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	4a43      	ldr	r2, [pc, #268]	; (8006788 <checkAktifCalisma+0x39c>)
 800667c:	7812      	ldrb	r2, [r2, #0]
 800667e:	4293      	cmp	r3, r2
 8006680:	d303      	bcc.n	800668a <checkAktifCalisma+0x29e>
 8006682:	4b3e      	ldr	r3, [pc, #248]	; (800677c <checkAktifCalisma+0x390>)
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d111      	bne.n	80066ae <checkAktifCalisma+0x2c2>
 800668a:	4b39      	ldr	r3, [pc, #228]	; (8006770 <checkAktifCalisma+0x384>)
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	f083 0301 	eor.w	r3, r3, #1
 8006692:	b2db      	uxtb	r3, r3
 8006694:	2b00      	cmp	r3, #0
 8006696:	d10a      	bne.n	80066ae <checkAktifCalisma+0x2c2>
 8006698:	4b36      	ldr	r3, [pc, #216]	; (8006774 <checkAktifCalisma+0x388>)
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	f083 0301 	eor.w	r3, r3, #1
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d103      	bne.n	80066ae <checkAktifCalisma+0x2c2>
 80066a6:	4b34      	ldr	r3, [pc, #208]	; (8006778 <checkAktifCalisma+0x38c>)
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d10a      	bne.n	80066c4 <checkAktifCalisma+0x2d8>
			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80066ae:	2200      	movs	r2, #0
 80066b0:	2104      	movs	r1, #4
 80066b2:	4828      	ldr	r0, [pc, #160]	; (8006754 <checkAktifCalisma+0x368>)
 80066b4:	f003 fa13 	bl	8009ade <HAL_GPIO_WritePin>
			yukarivalfcalisiyor=0;
 80066b8:	4b2a      	ldr	r3, [pc, #168]	; (8006764 <checkAktifCalisma+0x378>)
 80066ba:	2200      	movs	r2, #0
 80066bc:	701a      	strb	r2, [r3, #0]
			butonKontrol3=0;
 80066be:	4b2f      	ldr	r3, [pc, #188]	; (800677c <checkAktifCalisma+0x390>)
 80066c0:	2200      	movs	r2, #0
 80066c2:	701a      	strb	r2, [r3, #0]
		}

		//Ond safety

		if(emniyetCercevesi==0) {
 80066c4:	4b31      	ldr	r3, [pc, #196]	; (800678c <checkAktifCalisma+0x3a0>)
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d102      	bne.n	80066d2 <checkAktifCalisma+0x2e6>
			cerceveVar=1;
 80066cc:	4b30      	ldr	r3, [pc, #192]	; (8006790 <checkAktifCalisma+0x3a4>)
 80066ce:	2201      	movs	r2, #1
 80066d0:	701a      	strb	r2, [r3, #0]
		}

		if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 80066d2:	4b2e      	ldr	r3, [pc, #184]	; (800678c <checkAktifCalisma+0x3a0>)
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d116      	bne.n	8006708 <checkAktifCalisma+0x31c>
 80066da:	4b2e      	ldr	r3, [pc, #184]	; (8006794 <checkAktifCalisma+0x3a8>)
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	d112      	bne.n	8006708 <checkAktifCalisma+0x31c>
 80066e2:	2101      	movs	r1, #1
 80066e4:	4821      	ldr	r0, [pc, #132]	; (800676c <checkAktifCalisma+0x380>)
 80066e6:	f003 f9e3 	bl	8009ab0 <HAL_GPIO_ReadPin>
 80066ea:	4603      	mov	r3, r0
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d10b      	bne.n	8006708 <checkAktifCalisma+0x31c>
 80066f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80066f4:	4817      	ldr	r0, [pc, #92]	; (8006754 <checkAktifCalisma+0x368>)
 80066f6:	f003 f9db 	bl	8009ab0 <HAL_GPIO_ReadPin>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d103      	bne.n	8006708 <checkAktifCalisma+0x31c>
			cerceveVar=1;
 8006700:	4b23      	ldr	r3, [pc, #140]	; (8006790 <checkAktifCalisma+0x3a4>)
 8006702:	2201      	movs	r2, #1
 8006704:	701a      	strb	r2, [r3, #0]
 8006706:	e011      	b.n	800672c <checkAktifCalisma+0x340>
		} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 8006708:	4b20      	ldr	r3, [pc, #128]	; (800678c <checkAktifCalisma+0x3a0>)
 800670a:	781b      	ldrb	r3, [r3, #0]
 800670c:	2b01      	cmp	r3, #1
 800670e:	d10d      	bne.n	800672c <checkAktifCalisma+0x340>
 8006710:	2101      	movs	r1, #1
 8006712:	4816      	ldr	r0, [pc, #88]	; (800676c <checkAktifCalisma+0x380>)
 8006714:	f003 f9cc 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8006718:	4603      	mov	r3, r0
 800671a:	2b01      	cmp	r3, #1
 800671c:	d106      	bne.n	800672c <checkAktifCalisma+0x340>
 800671e:	4b1d      	ldr	r3, [pc, #116]	; (8006794 <checkAktifCalisma+0x3a8>)
 8006720:	781b      	ldrb	r3, [r3, #0]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d102      	bne.n	800672c <checkAktifCalisma+0x340>
			cerceveVar=0;
 8006726:	4b1a      	ldr	r3, [pc, #104]	; (8006790 <checkAktifCalisma+0x3a4>)
 8006728:	2200      	movs	r2, #0
 800672a:	701a      	strb	r2, [r3, #0]
		}

		if (emniyetCercevesi==1 && calismaSekli==1) {
 800672c:	4b17      	ldr	r3, [pc, #92]	; (800678c <checkAktifCalisma+0x3a0>)
 800672e:	781b      	ldrb	r3, [r3, #0]
 8006730:	2b01      	cmp	r3, #1
 8006732:	d134      	bne.n	800679e <checkAktifCalisma+0x3b2>
 8006734:	4b17      	ldr	r3, [pc, #92]	; (8006794 <checkAktifCalisma+0x3a8>)
 8006736:	781b      	ldrb	r3, [r3, #0]
 8006738:	2b01      	cmp	r3, #1
 800673a:	d130      	bne.n	800679e <checkAktifCalisma+0x3b2>
			if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 800673c:	2101      	movs	r1, #1
 800673e:	480b      	ldr	r0, [pc, #44]	; (800676c <checkAktifCalisma+0x380>)
 8006740:	f003 f9b6 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8006744:	4603      	mov	r3, r0
 8006746:	2b00      	cmp	r3, #0
 8006748:	d126      	bne.n	8006798 <checkAktifCalisma+0x3ac>
				cerceveVar=1;
 800674a:	4b11      	ldr	r3, [pc, #68]	; (8006790 <checkAktifCalisma+0x3a4>)
 800674c:	2201      	movs	r2, #1
 800674e:	701a      	strb	r2, [r3, #0]
 8006750:	e025      	b.n	800679e <checkAktifCalisma+0x3b2>
 8006752:	bf00      	nop
 8006754:	40010c00 	.word	0x40010c00
 8006758:	20000c6e 	.word	0x20000c6e
 800675c:	20000c48 	.word	0x20000c48
 8006760:	20000c4c 	.word	0x20000c4c
 8006764:	20000c72 	.word	0x20000c72
 8006768:	20000c75 	.word	0x20000c75
 800676c:	40011000 	.word	0x40011000
 8006770:	20000c8b 	.word	0x20000c8b
 8006774:	20000c8c 	.word	0x20000c8c
 8006778:	20000c3c 	.word	0x20000c3c
 800677c:	20000c6a 	.word	0x20000c6a
 8006780:	20000bc4 	.word	0x20000bc4
 8006784:	20000bd0 	.word	0x20000bd0
 8006788:	20000c4d 	.word	0x20000c4d
 800678c:	20000c3d 	.word	0x20000c3d
 8006790:	20000c90 	.word	0x20000c90
 8006794:	20000c3a 	.word	0x20000c3a
			} else {
				cerceveVar=0;
 8006798:	4b7f      	ldr	r3, [pc, #508]	; (8006998 <checkAktifCalisma+0x5ac>)
 800679a:	2200      	movs	r2, #0
 800679c:	701a      	strb	r2, [r3, #0]
			}
		}

		//Asagi calisma
		if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 800679e:	4b7f      	ldr	r3, [pc, #508]	; (800699c <checkAktifCalisma+0x5b0>)
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d17c      	bne.n	80068a0 <checkAktifCalisma+0x4b4>
 80067a6:	4b7e      	ldr	r3, [pc, #504]	; (80069a0 <checkAktifCalisma+0x5b4>)
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d078      	beq.n	80068a0 <checkAktifCalisma+0x4b4>
 80067ae:	4b7d      	ldr	r3, [pc, #500]	; (80069a4 <checkAktifCalisma+0x5b8>)
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d074      	beq.n	80068a0 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 80067b6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80067ba:	487b      	ldr	r0, [pc, #492]	; (80069a8 <checkAktifCalisma+0x5bc>)
 80067bc:	f003 f978 	bl	8009ab0 <HAL_GPIO_ReadPin>
 80067c0:	4603      	mov	r3, r0
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d003      	beq.n	80067ce <checkAktifCalisma+0x3e2>
 80067c6:	4b79      	ldr	r3, [pc, #484]	; (80069ac <checkAktifCalisma+0x5c0>)
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d068      	beq.n	80068a0 <checkAktifCalisma+0x4b4>
				&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 80067ce:	4b72      	ldr	r3, [pc, #456]	; (8006998 <checkAktifCalisma+0x5ac>)
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d064      	beq.n	80068a0 <checkAktifCalisma+0x4b4>
 80067d6:	4b76      	ldr	r3, [pc, #472]	; (80069b0 <checkAktifCalisma+0x5c4>)
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	f083 0301 	eor.w	r3, r3, #1
 80067de:	b2db      	uxtb	r3, r3
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d05d      	beq.n	80068a0 <checkAktifCalisma+0x4b4>
				&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 80067e4:	2104      	movs	r1, #4
 80067e6:	4873      	ldr	r0, [pc, #460]	; (80069b4 <checkAktifCalisma+0x5c8>)
 80067e8:	f003 f962 	bl	8009ab0 <HAL_GPIO_ReadPin>
 80067ec:	4603      	mov	r3, r0
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d003      	beq.n	80067fa <checkAktifCalisma+0x40e>
 80067f2:	4b71      	ldr	r3, [pc, #452]	; (80069b8 <checkAktifCalisma+0x5cc>)
 80067f4:	781b      	ldrb	r3, [r3, #0]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d152      	bne.n	80068a0 <checkAktifCalisma+0x4b4>
				&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 80067fa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80067fe:	486a      	ldr	r0, [pc, #424]	; (80069a8 <checkAktifCalisma+0x5bc>)
 8006800:	f003 f956 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8006804:	4603      	mov	r3, r0
 8006806:	2b01      	cmp	r3, #1
 8006808:	d10e      	bne.n	8006828 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 800680a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800680e:	4866      	ldr	r0, [pc, #408]	; (80069a8 <checkAktifCalisma+0x5bc>)
 8006810:	f003 f94e 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8006814:	4603      	mov	r3, r0
 8006816:	2b01      	cmp	r3, #1
 8006818:	d106      	bne.n	8006828 <checkAktifCalisma+0x43c>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 800681a:	2140      	movs	r1, #64	; 0x40
 800681c:	4865      	ldr	r0, [pc, #404]	; (80069b4 <checkAktifCalisma+0x5c8>)
 800681e:	f003 f947 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8006822:	4603      	mov	r3, r0
 8006824:	2b01      	cmp	r3, #1
 8006826:	d003      	beq.n	8006830 <checkAktifCalisma+0x444>
 8006828:	4b64      	ldr	r3, [pc, #400]	; (80069bc <checkAktifCalisma+0x5d0>)
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d037      	beq.n	80068a0 <checkAktifCalisma+0x4b4>
				&& (yukarimotorcalisiyor==0)
 8006830:	4b63      	ldr	r3, [pc, #396]	; (80069c0 <checkAktifCalisma+0x5d4>)
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	f083 0301 	eor.w	r3, r3, #1
 8006838:	b2db      	uxtb	r3, r3
 800683a:	2b00      	cmp	r3, #0
 800683c:	d030      	beq.n	80068a0 <checkAktifCalisma+0x4b4>
				&& (yukarivalfcalisiyor==0)
 800683e:	4b61      	ldr	r3, [pc, #388]	; (80069c4 <checkAktifCalisma+0x5d8>)
 8006840:	781b      	ldrb	r3, [r3, #0]
 8006842:	f083 0301 	eor.w	r3, r3, #1
 8006846:	b2db      	uxtb	r3, r3
 8006848:	2b00      	cmp	r3, #0
 800684a:	d029      	beq.n	80068a0 <checkAktifCalisma+0x4b4>
		  	  	&& (devmotoryukaricalisiyor==0)
 800684c:	4b5e      	ldr	r3, [pc, #376]	; (80069c8 <checkAktifCalisma+0x5dc>)
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	f083 0301 	eor.w	r3, r3, #1
 8006854:	b2db      	uxtb	r3, r3
 8006856:	2b00      	cmp	r3, #0
 8006858:	d022      	beq.n	80068a0 <checkAktifCalisma+0x4b4>
				&& (devmotorasagicalisiyor==0)
 800685a:	4b5c      	ldr	r3, [pc, #368]	; (80069cc <checkAktifCalisma+0x5e0>)
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	f083 0301 	eor.w	r3, r3, #1
 8006862:	b2db      	uxtb	r3, r3
 8006864:	2b00      	cmp	r3, #0
 8006866:	d01b      	beq.n	80068a0 <checkAktifCalisma+0x4b4>
				&& (devyukarivalfcalisiyor==0)
 8006868:	4b59      	ldr	r3, [pc, #356]	; (80069d0 <checkAktifCalisma+0x5e4>)
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	f083 0301 	eor.w	r3, r3, #1
 8006870:	b2db      	uxtb	r3, r3
 8006872:	2b00      	cmp	r3, #0
 8006874:	d014      	beq.n	80068a0 <checkAktifCalisma+0x4b4>
				&& (devasagivalfcalisiyor==0)) {
 8006876:	4b57      	ldr	r3, [pc, #348]	; (80069d4 <checkAktifCalisma+0x5e8>)
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	f083 0301 	eor.w	r3, r3, #1
 800687e:	b2db      	uxtb	r3, r3
 8006880:	2b00      	cmp	r3, #0
 8006882:	d00d      	beq.n	80068a0 <checkAktifCalisma+0x4b4>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8006884:	2201      	movs	r2, #1
 8006886:	2102      	movs	r1, #2
 8006888:	4847      	ldr	r0, [pc, #284]	; (80069a8 <checkAktifCalisma+0x5bc>)
 800688a:	f003 f928 	bl	8009ade <HAL_GPIO_WritePin>
			asagivalfcalisiyor=1;
 800688e:	4b4b      	ldr	r3, [pc, #300]	; (80069bc <checkAktifCalisma+0x5d0>)
 8006890:	2201      	movs	r2, #1
 8006892:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=1;
 8006894:	4b50      	ldr	r3, [pc, #320]	; (80069d8 <checkAktifCalisma+0x5ec>)
 8006896:	2201      	movs	r2, #1
 8006898:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=1;
 800689a:	4b50      	ldr	r3, [pc, #320]	; (80069dc <checkAktifCalisma+0x5f0>)
 800689c:	2201      	movs	r2, #1
 800689e:	701a      	strb	r2, [r3, #0]
		}

		// asagi valf timer calisması

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 80068a0:	4b46      	ldr	r3, [pc, #280]	; (80069bc <checkAktifCalisma+0x5d0>)
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d033      	beq.n	8006910 <checkAktifCalisma+0x524>
 80068a8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80068ac:	483e      	ldr	r0, [pc, #248]	; (80069a8 <checkAktifCalisma+0x5bc>)
 80068ae:	f003 f8ff 	bl	8009ab0 <HAL_GPIO_ReadPin>
 80068b2:	4603      	mov	r3, r0
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d106      	bne.n	80068c6 <checkAktifCalisma+0x4da>
 80068b8:	4b3c      	ldr	r3, [pc, #240]	; (80069ac <checkAktifCalisma+0x5c0>)
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	f083 0301 	eor.w	r3, r3, #1
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d10a      	bne.n	80068dc <checkAktifCalisma+0x4f0>
 80068c6:	2104      	movs	r1, #4
 80068c8:	483a      	ldr	r0, [pc, #232]	; (80069b4 <checkAktifCalisma+0x5c8>)
 80068ca:	f003 f8f1 	bl	8009ab0 <HAL_GPIO_ReadPin>
 80068ce:	4603      	mov	r3, r0
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d11d      	bne.n	8006910 <checkAktifCalisma+0x524>
 80068d4:	4b38      	ldr	r3, [pc, #224]	; (80069b8 <checkAktifCalisma+0x5cc>)
 80068d6:	781b      	ldrb	r3, [r3, #0]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d019      	beq.n	8006910 <checkAktifCalisma+0x524>
 80068dc:	4b30      	ldr	r3, [pc, #192]	; (80069a0 <checkAktifCalisma+0x5b4>)
 80068de:	781b      	ldrb	r3, [r3, #0]
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d015      	beq.n	8006910 <checkAktifCalisma+0x524>
 80068e4:	4b2f      	ldr	r3, [pc, #188]	; (80069a4 <checkAktifCalisma+0x5b8>)
 80068e6:	781b      	ldrb	r3, [r3, #0]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d011      	beq.n	8006910 <checkAktifCalisma+0x524>
 80068ec:	4b2a      	ldr	r3, [pc, #168]	; (8006998 <checkAktifCalisma+0x5ac>)
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00d      	beq.n	8006910 <checkAktifCalisma+0x524>
 80068f4:	4b3a      	ldr	r3, [pc, #232]	; (80069e0 <checkAktifCalisma+0x5f4>)
 80068f6:	781b      	ldrb	r3, [r3, #0]
 80068f8:	f083 0301 	eor.w	r3, r3, #1
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d006      	beq.n	8006910 <checkAktifCalisma+0x524>
			timer2=millis;
 8006902:	4b38      	ldr	r3, [pc, #224]	; (80069e4 <checkAktifCalisma+0x5f8>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a38      	ldr	r2, [pc, #224]	; (80069e8 <checkAktifCalisma+0x5fc>)
 8006908:	6013      	str	r3, [r2, #0]
			butonKontrol2=1;
 800690a:	4b35      	ldr	r3, [pc, #212]	; (80069e0 <checkAktifCalisma+0x5f4>)
 800690c:	2201      	movs	r2, #1
 800690e:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8006910:	4b34      	ldr	r3, [pc, #208]	; (80069e4 <checkAktifCalisma+0x5f8>)
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	4b34      	ldr	r3, [pc, #208]	; (80069e8 <checkAktifCalisma+0x5fc>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	1ad3      	subs	r3, r2, r3
 800691a:	4a34      	ldr	r2, [pc, #208]	; (80069ec <checkAktifCalisma+0x600>)
 800691c:	7812      	ldrb	r2, [r2, #0]
 800691e:	4293      	cmp	r3, r2
 8006920:	d303      	bcc.n	800692a <checkAktifCalisma+0x53e>
 8006922:	4b2f      	ldr	r3, [pc, #188]	; (80069e0 <checkAktifCalisma+0x5f4>)
 8006924:	781b      	ldrb	r3, [r3, #0]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d114      	bne.n	8006954 <checkAktifCalisma+0x568>
 800692a:	4b1d      	ldr	r3, [pc, #116]	; (80069a0 <checkAktifCalisma+0x5b4>)
 800692c:	781b      	ldrb	r3, [r3, #0]
 800692e:	f083 0301 	eor.w	r3, r3, #1
 8006932:	b2db      	uxtb	r3, r3
 8006934:	2b00      	cmp	r3, #0
 8006936:	d10d      	bne.n	8006954 <checkAktifCalisma+0x568>
 8006938:	4b1a      	ldr	r3, [pc, #104]	; (80069a4 <checkAktifCalisma+0x5b8>)
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	f083 0301 	eor.w	r3, r3, #1
 8006940:	b2db      	uxtb	r3, r3
 8006942:	2b00      	cmp	r3, #0
 8006944:	d106      	bne.n	8006954 <checkAktifCalisma+0x568>
 8006946:	4b14      	ldr	r3, [pc, #80]	; (8006998 <checkAktifCalisma+0x5ac>)
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	f083 0301 	eor.w	r3, r3, #1
 800694e:	b2db      	uxtb	r3, r3
 8006950:	2b00      	cmp	r3, #0
 8006952:	d00a      	beq.n	800696a <checkAktifCalisma+0x57e>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006954:	2200      	movs	r2, #0
 8006956:	2102      	movs	r1, #2
 8006958:	4813      	ldr	r0, [pc, #76]	; (80069a8 <checkAktifCalisma+0x5bc>)
 800695a:	f003 f8c0 	bl	8009ade <HAL_GPIO_WritePin>
			asagivalfcalisiyor=0;
 800695e:	4b17      	ldr	r3, [pc, #92]	; (80069bc <checkAktifCalisma+0x5d0>)
 8006960:	2200      	movs	r2, #0
 8006962:	701a      	strb	r2, [r3, #0]
			butonKontrol2=0;
 8006964:	4b1e      	ldr	r3, [pc, #120]	; (80069e0 <checkAktifCalisma+0x5f4>)
 8006966:	2200      	movs	r2, #0
 8006968:	701a      	strb	r2, [r3, #0]
		}

		//yavaslama valf

		if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 800696a:	4b14      	ldr	r3, [pc, #80]	; (80069bc <checkAktifCalisma+0x5d0>)
 800696c:	781b      	ldrb	r3, [r3, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d040      	beq.n	80069f4 <checkAktifCalisma+0x608>
 8006972:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006976:	480f      	ldr	r0, [pc, #60]	; (80069b4 <checkAktifCalisma+0x5c8>)
 8006978:	f003 f89a 	bl	8009ab0 <HAL_GPIO_ReadPin>
 800697c:	4603      	mov	r3, r0
 800697e:	2b00      	cmp	r3, #0
 8006980:	d138      	bne.n	80069f4 <checkAktifCalisma+0x608>
 8006982:	4b1b      	ldr	r3, [pc, #108]	; (80069f0 <checkAktifCalisma+0x604>)
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d034      	beq.n	80069f4 <checkAktifCalisma+0x608>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 800698a:	2201      	movs	r2, #1
 800698c:	2101      	movs	r1, #1
 800698e:	4806      	ldr	r0, [pc, #24]	; (80069a8 <checkAktifCalisma+0x5bc>)
 8006990:	f003 f8a5 	bl	8009ade <HAL_GPIO_WritePin>
 8006994:	e033      	b.n	80069fe <checkAktifCalisma+0x612>
 8006996:	bf00      	nop
 8006998:	20000c90 	.word	0x20000c90
 800699c:	20000c56 	.word	0x20000c56
 80069a0:	20000c8b 	.word	0x20000c8b
 80069a4:	20000c8c 	.word	0x20000c8c
 80069a8:	40010c00 	.word	0x40010c00
 80069ac:	20000c76 	.word	0x20000c76
 80069b0:	20000c8a 	.word	0x20000c8a
 80069b4:	40011000 	.word	0x40011000
 80069b8:	20000c3f 	.word	0x20000c3f
 80069bc:	20000c71 	.word	0x20000c71
 80069c0:	20000c6e 	.word	0x20000c6e
 80069c4:	20000c72 	.word	0x20000c72
 80069c8:	20000c6f 	.word	0x20000c6f
 80069cc:	20000c70 	.word	0x20000c70
 80069d0:	20000c73 	.word	0x20000c73
 80069d4:	20000c74 	.word	0x20000c74
 80069d8:	20000c79 	.word	0x20000c79
 80069dc:	20000c9a 	.word	0x20000c9a
 80069e0:	20000c69 	.word	0x20000c69
 80069e4:	20000bc4 	.word	0x20000bc4
 80069e8:	20000bd0 	.word	0x20000bd0
 80069ec:	20000c4e 	.word	0x20000c4e
 80069f0:	20000c3e 	.word	0x20000c3e
		} else {
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80069f4:	2200      	movs	r2, #0
 80069f6:	2101      	movs	r1, #1
 80069f8:	4836      	ldr	r0, [pc, #216]	; (8006ad4 <checkAktifCalisma+0x6e8>)
 80069fa:	f003 f870 	bl	8009ade <HAL_GPIO_WritePin>
		}

		/*DEVIRME veya YURUYUS Baslangic*/

		// Devirme Yukari veya yuruyus ileri calisma
		if((menuGiris==0)
 80069fe:	4b36      	ldr	r3, [pc, #216]	; (8006ad8 <checkAktifCalisma+0x6ec>)
 8006a00:	781b      	ldrb	r3, [r3, #0]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	f040 8080 	bne.w	8006b08 <checkAktifCalisma+0x71c>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8006a08:	4b34      	ldr	r3, [pc, #208]	; (8006adc <checkAktifCalisma+0x6f0>)
 8006a0a:	781b      	ldrb	r3, [r3, #0]
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d003      	beq.n	8006a18 <checkAktifCalisma+0x62c>
 8006a10:	4b32      	ldr	r3, [pc, #200]	; (8006adc <checkAktifCalisma+0x6f0>)
 8006a12:	781b      	ldrb	r3, [r3, #0]
 8006a14:	2b02      	cmp	r3, #2
 8006a16:	d177      	bne.n	8006b08 <checkAktifCalisma+0x71c>
				&& (stopVar) && (kapiSivicVar)
 8006a18:	4b31      	ldr	r3, [pc, #196]	; (8006ae0 <checkAktifCalisma+0x6f4>)
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d073      	beq.n	8006b08 <checkAktifCalisma+0x71c>
 8006a20:	4b30      	ldr	r3, [pc, #192]	; (8006ae4 <checkAktifCalisma+0x6f8>)
 8006a22:	781b      	ldrb	r3, [r3, #0]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d06f      	beq.n	8006b08 <checkAktifCalisma+0x71c>
				&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8006a28:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006a2c:	4829      	ldr	r0, [pc, #164]	; (8006ad4 <checkAktifCalisma+0x6e8>)
 8006a2e:	f003 f83f 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8006a32:	4603      	mov	r3, r0
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d167      	bne.n	8006b08 <checkAktifCalisma+0x71c>
				&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8006a38:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006a3c:	482a      	ldr	r0, [pc, #168]	; (8006ae8 <checkAktifCalisma+0x6fc>)
 8006a3e:	f003 f837 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8006a42:	4603      	mov	r3, r0
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d003      	beq.n	8006a50 <checkAktifCalisma+0x664>
 8006a48:	4b28      	ldr	r3, [pc, #160]	; (8006aec <checkAktifCalisma+0x700>)
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d15b      	bne.n	8006b08 <checkAktifCalisma+0x71c>
				&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8006a50:	2140      	movs	r1, #64	; 0x40
 8006a52:	4825      	ldr	r0, [pc, #148]	; (8006ae8 <checkAktifCalisma+0x6fc>)
 8006a54:	f003 f82c 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8006a58:	4603      	mov	r3, r0
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d10f      	bne.n	8006a7e <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8006a5e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006a62:	481c      	ldr	r0, [pc, #112]	; (8006ad4 <checkAktifCalisma+0x6e8>)
 8006a64:	f003 f824 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d107      	bne.n	8006a7e <checkAktifCalisma+0x692>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8006a6e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006a72:	4818      	ldr	r0, [pc, #96]	; (8006ad4 <checkAktifCalisma+0x6e8>)
 8006a74:	f003 f81c 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b01      	cmp	r3, #1
 8006a7c:	d003      	beq.n	8006a86 <checkAktifCalisma+0x69a>
 8006a7e:	4b1c      	ldr	r3, [pc, #112]	; (8006af0 <checkAktifCalisma+0x704>)
 8006a80:	781b      	ldrb	r3, [r3, #0]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d040      	beq.n	8006b08 <checkAktifCalisma+0x71c>
				&& (yukarimotorcalisiyor==0)
 8006a86:	4b1b      	ldr	r3, [pc, #108]	; (8006af4 <checkAktifCalisma+0x708>)
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	f083 0301 	eor.w	r3, r3, #1
 8006a8e:	b2db      	uxtb	r3, r3
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d039      	beq.n	8006b08 <checkAktifCalisma+0x71c>
				&& (yukarivalfcalisiyor==0)
 8006a94:	4b18      	ldr	r3, [pc, #96]	; (8006af8 <checkAktifCalisma+0x70c>)
 8006a96:	781b      	ldrb	r3, [r3, #0]
 8006a98:	f083 0301 	eor.w	r3, r3, #1
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d032      	beq.n	8006b08 <checkAktifCalisma+0x71c>
				&& (asagivalfcalisiyor==0)
 8006aa2:	4b16      	ldr	r3, [pc, #88]	; (8006afc <checkAktifCalisma+0x710>)
 8006aa4:	781b      	ldrb	r3, [r3, #0]
 8006aa6:	f083 0301 	eor.w	r3, r3, #1
 8006aaa:	b2db      	uxtb	r3, r3
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d02b      	beq.n	8006b08 <checkAktifCalisma+0x71c>
				&& (devmotorasagicalisiyor==0)
 8006ab0:	4b13      	ldr	r3, [pc, #76]	; (8006b00 <checkAktifCalisma+0x714>)
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	f083 0301 	eor.w	r3, r3, #1
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d024      	beq.n	8006b08 <checkAktifCalisma+0x71c>
				&&(devasagivalfcalisiyor==0)) {
 8006abe:	4b11      	ldr	r3, [pc, #68]	; (8006b04 <checkAktifCalisma+0x718>)
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	f083 0301 	eor.w	r3, r3, #1
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d01d      	beq.n	8006b08 <checkAktifCalisma+0x71c>
			devmotoryukaricalisiyor=1;
 8006acc:	4b08      	ldr	r3, [pc, #32]	; (8006af0 <checkAktifCalisma+0x704>)
 8006ace:	2201      	movs	r2, #1
 8006ad0:	701a      	strb	r2, [r3, #0]
 8006ad2:	e01c      	b.n	8006b0e <checkAktifCalisma+0x722>
 8006ad4:	40010c00 	.word	0x40010c00
 8006ad8:	20000c56 	.word	0x20000c56
 8006adc:	20000c48 	.word	0x20000c48
 8006ae0:	20000c8b 	.word	0x20000c8b
 8006ae4:	20000c8c 	.word	0x20000c8c
 8006ae8:	40011000 	.word	0x40011000
 8006aec:	20000c49 	.word	0x20000c49
 8006af0:	20000c6f 	.word	0x20000c6f
 8006af4:	20000c6e 	.word	0x20000c6e
 8006af8:	20000c72 	.word	0x20000c72
 8006afc:	20000c71 	.word	0x20000c71
 8006b00:	20000c70 	.word	0x20000c70
 8006b04:	20000c74 	.word	0x20000c74
		} else {
			devmotoryukaricalisiyor=0;
 8006b08:	4b64      	ldr	r3, [pc, #400]	; (8006c9c <checkAktifCalisma+0x8b0>)
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	701a      	strb	r2, [r3, #0]
		}

		if(devmotoryukaricalisiyor==1) {
 8006b0e:	4b63      	ldr	r3, [pc, #396]	; (8006c9c <checkAktifCalisma+0x8b0>)
 8006b10:	781b      	ldrb	r3, [r3, #0]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d007      	beq.n	8006b26 <checkAktifCalisma+0x73a>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8006b16:	2201      	movs	r2, #1
 8006b18:	2120      	movs	r1, #32
 8006b1a:	4861      	ldr	r0, [pc, #388]	; (8006ca0 <checkAktifCalisma+0x8b4>)
 8006b1c:	f002 ffdf 	bl	8009ade <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=1;
 8006b20:	4b60      	ldr	r3, [pc, #384]	; (8006ca4 <checkAktifCalisma+0x8b8>)
 8006b22:	2201      	movs	r2, #1
 8006b24:	701a      	strb	r2, [r3, #0]
		}
		// devirme yukari + yuruyus ileri valf timer calismasi

		if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8006b26:	4b5f      	ldr	r3, [pc, #380]	; (8006ca4 <checkAktifCalisma+0x8b8>)
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d025      	beq.n	8006b7a <checkAktifCalisma+0x78e>
 8006b2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006b32:	485d      	ldr	r0, [pc, #372]	; (8006ca8 <checkAktifCalisma+0x8bc>)
 8006b34:	f002 ffbc 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d007      	beq.n	8006b4e <checkAktifCalisma+0x762>
 8006b3e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006b42:	4857      	ldr	r0, [pc, #348]	; (8006ca0 <checkAktifCalisma+0x8b4>)
 8006b44:	f002 ffb4 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8006b48:	4603      	mov	r3, r0
 8006b4a:	2b01      	cmp	r3, #1
 8006b4c:	d115      	bne.n	8006b7a <checkAktifCalisma+0x78e>
 8006b4e:	4b57      	ldr	r3, [pc, #348]	; (8006cac <checkAktifCalisma+0x8c0>)
 8006b50:	781b      	ldrb	r3, [r3, #0]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d011      	beq.n	8006b7a <checkAktifCalisma+0x78e>
 8006b56:	4b56      	ldr	r3, [pc, #344]	; (8006cb0 <checkAktifCalisma+0x8c4>)
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d00d      	beq.n	8006b7a <checkAktifCalisma+0x78e>
 8006b5e:	4b55      	ldr	r3, [pc, #340]	; (8006cb4 <checkAktifCalisma+0x8c8>)
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	f083 0301 	eor.w	r3, r3, #1
 8006b66:	b2db      	uxtb	r3, r3
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d006      	beq.n	8006b7a <checkAktifCalisma+0x78e>
			timer2=millis;
 8006b6c:	4b52      	ldr	r3, [pc, #328]	; (8006cb8 <checkAktifCalisma+0x8cc>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	4a52      	ldr	r2, [pc, #328]	; (8006cbc <checkAktifCalisma+0x8d0>)
 8006b72:	6013      	str	r3, [r2, #0]
			butonKontrol4=1;
 8006b74:	4b4f      	ldr	r3, [pc, #316]	; (8006cb4 <checkAktifCalisma+0x8c8>)
 8006b76:	2201      	movs	r2, #1
 8006b78:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8006b7a:	4b4f      	ldr	r3, [pc, #316]	; (8006cb8 <checkAktifCalisma+0x8cc>)
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	4b4f      	ldr	r3, [pc, #316]	; (8006cbc <checkAktifCalisma+0x8d0>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	1ad3      	subs	r3, r2, r3
 8006b84:	4a4e      	ldr	r2, [pc, #312]	; (8006cc0 <checkAktifCalisma+0x8d4>)
 8006b86:	7812      	ldrb	r2, [r2, #0]
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d303      	bcc.n	8006b94 <checkAktifCalisma+0x7a8>
 8006b8c:	4b49      	ldr	r3, [pc, #292]	; (8006cb4 <checkAktifCalisma+0x8c8>)
 8006b8e:	781b      	ldrb	r3, [r3, #0]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d10d      	bne.n	8006bb0 <checkAktifCalisma+0x7c4>
 8006b94:	4b45      	ldr	r3, [pc, #276]	; (8006cac <checkAktifCalisma+0x8c0>)
 8006b96:	781b      	ldrb	r3, [r3, #0]
 8006b98:	f083 0301 	eor.w	r3, r3, #1
 8006b9c:	b2db      	uxtb	r3, r3
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d106      	bne.n	8006bb0 <checkAktifCalisma+0x7c4>
 8006ba2:	4b43      	ldr	r3, [pc, #268]	; (8006cb0 <checkAktifCalisma+0x8c4>)
 8006ba4:	781b      	ldrb	r3, [r3, #0]
 8006ba6:	f083 0301 	eor.w	r3, r3, #1
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d00a      	beq.n	8006bc6 <checkAktifCalisma+0x7da>
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	2120      	movs	r1, #32
 8006bb4:	483a      	ldr	r0, [pc, #232]	; (8006ca0 <checkAktifCalisma+0x8b4>)
 8006bb6:	f002 ff92 	bl	8009ade <HAL_GPIO_WritePin>
			devyukarivalfcalisiyor=0;
 8006bba:	4b3a      	ldr	r3, [pc, #232]	; (8006ca4 <checkAktifCalisma+0x8b8>)
 8006bbc:	2200      	movs	r2, #0
 8006bbe:	701a      	strb	r2, [r3, #0]
			butonKontrol4=0;
 8006bc0:	4b3c      	ldr	r3, [pc, #240]	; (8006cb4 <checkAktifCalisma+0x8c8>)
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	701a      	strb	r2, [r3, #0]
		}

		// Devirme Asagi veya yuruyus geri calisma

		if((menuGiris==0)
 8006bc6:	4b3f      	ldr	r3, [pc, #252]	; (8006cc4 <checkAktifCalisma+0x8d8>)
 8006bc8:	781b      	ldrb	r3, [r3, #0]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	f040 8088 	bne.w	8006ce0 <checkAktifCalisma+0x8f4>
				&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8006bd0:	4b3d      	ldr	r3, [pc, #244]	; (8006cc8 <checkAktifCalisma+0x8dc>)
 8006bd2:	781b      	ldrb	r3, [r3, #0]
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d003      	beq.n	8006be0 <checkAktifCalisma+0x7f4>
 8006bd8:	4b3b      	ldr	r3, [pc, #236]	; (8006cc8 <checkAktifCalisma+0x8dc>)
 8006bda:	781b      	ldrb	r3, [r3, #0]
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	d17f      	bne.n	8006ce0 <checkAktifCalisma+0x8f4>
				&& (stopVar) && (kapiSivicVar)
 8006be0:	4b32      	ldr	r3, [pc, #200]	; (8006cac <checkAktifCalisma+0x8c0>)
 8006be2:	781b      	ldrb	r3, [r3, #0]
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d07b      	beq.n	8006ce0 <checkAktifCalisma+0x8f4>
 8006be8:	4b31      	ldr	r3, [pc, #196]	; (8006cb0 <checkAktifCalisma+0x8c4>)
 8006bea:	781b      	ldrb	r3, [r3, #0]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d077      	beq.n	8006ce0 <checkAktifCalisma+0x8f4>
				&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8006bf0:	2140      	movs	r1, #64	; 0x40
 8006bf2:	482b      	ldr	r0, [pc, #172]	; (8006ca0 <checkAktifCalisma+0x8b4>)
 8006bf4:	f002 ff5c 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d170      	bne.n	8006ce0 <checkAktifCalisma+0x8f4>
				&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8006bfe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006c02:	4827      	ldr	r0, [pc, #156]	; (8006ca0 <checkAktifCalisma+0x8b4>)
 8006c04:	f002 ff54 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d003      	beq.n	8006c16 <checkAktifCalisma+0x82a>
 8006c0e:	4b2f      	ldr	r3, [pc, #188]	; (8006ccc <checkAktifCalisma+0x8e0>)
 8006c10:	781b      	ldrb	r3, [r3, #0]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d164      	bne.n	8006ce0 <checkAktifCalisma+0x8f4>
				&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8006c16:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006c1a:	4823      	ldr	r0, [pc, #140]	; (8006ca8 <checkAktifCalisma+0x8bc>)
 8006c1c:	f002 ff48 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8006c20:	4603      	mov	r3, r0
 8006c22:	2b01      	cmp	r3, #1
 8006c24:	d10f      	bne.n	8006c46 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8006c26:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8006c2a:	481f      	ldr	r0, [pc, #124]	; (8006ca8 <checkAktifCalisma+0x8bc>)
 8006c2c:	f002 ff40 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8006c30:	4603      	mov	r3, r0
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d107      	bne.n	8006c46 <checkAktifCalisma+0x85a>
				&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8006c36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006c3a:	481b      	ldr	r0, [pc, #108]	; (8006ca8 <checkAktifCalisma+0x8bc>)
 8006c3c:	f002 ff38 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8006c40:	4603      	mov	r3, r0
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d003      	beq.n	8006c4e <checkAktifCalisma+0x862>
 8006c46:	4b22      	ldr	r3, [pc, #136]	; (8006cd0 <checkAktifCalisma+0x8e4>)
 8006c48:	781b      	ldrb	r3, [r3, #0]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d048      	beq.n	8006ce0 <checkAktifCalisma+0x8f4>
				&& (yukarimotorcalisiyor==0)
 8006c4e:	4b21      	ldr	r3, [pc, #132]	; (8006cd4 <checkAktifCalisma+0x8e8>)
 8006c50:	781b      	ldrb	r3, [r3, #0]
 8006c52:	f083 0301 	eor.w	r3, r3, #1
 8006c56:	b2db      	uxtb	r3, r3
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d041      	beq.n	8006ce0 <checkAktifCalisma+0x8f4>
				&& (yukarivalfcalisiyor==0)
 8006c5c:	4b1e      	ldr	r3, [pc, #120]	; (8006cd8 <checkAktifCalisma+0x8ec>)
 8006c5e:	781b      	ldrb	r3, [r3, #0]
 8006c60:	f083 0301 	eor.w	r3, r3, #1
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d03a      	beq.n	8006ce0 <checkAktifCalisma+0x8f4>
				&& (asagivalfcalisiyor==0)
 8006c6a:	4b1c      	ldr	r3, [pc, #112]	; (8006cdc <checkAktifCalisma+0x8f0>)
 8006c6c:	781b      	ldrb	r3, [r3, #0]
 8006c6e:	f083 0301 	eor.w	r3, r3, #1
 8006c72:	b2db      	uxtb	r3, r3
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d033      	beq.n	8006ce0 <checkAktifCalisma+0x8f4>
				&& (devyukarivalfcalisiyor==0)
 8006c78:	4b0a      	ldr	r3, [pc, #40]	; (8006ca4 <checkAktifCalisma+0x8b8>)
 8006c7a:	781b      	ldrb	r3, [r3, #0]
 8006c7c:	f083 0301 	eor.w	r3, r3, #1
 8006c80:	b2db      	uxtb	r3, r3
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d02c      	beq.n	8006ce0 <checkAktifCalisma+0x8f4>
				&& (devmotoryukaricalisiyor==0)) {
 8006c86:	4b05      	ldr	r3, [pc, #20]	; (8006c9c <checkAktifCalisma+0x8b0>)
 8006c88:	781b      	ldrb	r3, [r3, #0]
 8006c8a:	f083 0301 	eor.w	r3, r3, #1
 8006c8e:	b2db      	uxtb	r3, r3
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d025      	beq.n	8006ce0 <checkAktifCalisma+0x8f4>
			devmotorasagicalisiyor=1;
 8006c94:	4b0e      	ldr	r3, [pc, #56]	; (8006cd0 <checkAktifCalisma+0x8e4>)
 8006c96:	2201      	movs	r2, #1
 8006c98:	701a      	strb	r2, [r3, #0]
 8006c9a:	e024      	b.n	8006ce6 <checkAktifCalisma+0x8fa>
 8006c9c:	20000c6f 	.word	0x20000c6f
 8006ca0:	40011000 	.word	0x40011000
 8006ca4:	20000c73 	.word	0x20000c73
 8006ca8:	40010c00 	.word	0x40010c00
 8006cac:	20000c8b 	.word	0x20000c8b
 8006cb0:	20000c8c 	.word	0x20000c8c
 8006cb4:	20000c6b 	.word	0x20000c6b
 8006cb8:	20000bc4 	.word	0x20000bc4
 8006cbc:	20000bd0 	.word	0x20000bd0
 8006cc0:	20000c4f 	.word	0x20000c4f
 8006cc4:	20000c56 	.word	0x20000c56
 8006cc8:	20000c48 	.word	0x20000c48
 8006ccc:	20000c4a 	.word	0x20000c4a
 8006cd0:	20000c70 	.word	0x20000c70
 8006cd4:	20000c6e 	.word	0x20000c6e
 8006cd8:	20000c72 	.word	0x20000c72
 8006cdc:	20000c71 	.word	0x20000c71
		} else {
			devmotorasagicalisiyor=0;
 8006ce0:	4b96      	ldr	r3, [pc, #600]	; (8006f3c <checkAktifCalisma+0xb50>)
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	701a      	strb	r2, [r3, #0]
		}

		if(devmotorasagicalisiyor==1) {
 8006ce6:	4b95      	ldr	r3, [pc, #596]	; (8006f3c <checkAktifCalisma+0xb50>)
 8006ce8:	781b      	ldrb	r3, [r3, #0]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d007      	beq.n	8006cfe <checkAktifCalisma+0x912>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8006cee:	2201      	movs	r2, #1
 8006cf0:	2110      	movs	r1, #16
 8006cf2:	4893      	ldr	r0, [pc, #588]	; (8006f40 <checkAktifCalisma+0xb54>)
 8006cf4:	f002 fef3 	bl	8009ade <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=1;
 8006cf8:	4b92      	ldr	r3, [pc, #584]	; (8006f44 <checkAktifCalisma+0xb58>)
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	701a      	strb	r2, [r3, #0]
		}

		//devirme asagi + geri valf timer calismasi

		if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8006cfe:	4b91      	ldr	r3, [pc, #580]	; (8006f44 <checkAktifCalisma+0xb58>)
 8006d00:	781b      	ldrb	r3, [r3, #0]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d024      	beq.n	8006d50 <checkAktifCalisma+0x964>
 8006d06:	2140      	movs	r1, #64	; 0x40
 8006d08:	488d      	ldr	r0, [pc, #564]	; (8006f40 <checkAktifCalisma+0xb54>)
 8006d0a:	f002 fed1 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d007      	beq.n	8006d24 <checkAktifCalisma+0x938>
 8006d14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006d18:	4889      	ldr	r0, [pc, #548]	; (8006f40 <checkAktifCalisma+0xb54>)
 8006d1a:	f002 fec9 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d115      	bne.n	8006d50 <checkAktifCalisma+0x964>
 8006d24:	4b88      	ldr	r3, [pc, #544]	; (8006f48 <checkAktifCalisma+0xb5c>)
 8006d26:	781b      	ldrb	r3, [r3, #0]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d011      	beq.n	8006d50 <checkAktifCalisma+0x964>
 8006d2c:	4b87      	ldr	r3, [pc, #540]	; (8006f4c <checkAktifCalisma+0xb60>)
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d00d      	beq.n	8006d50 <checkAktifCalisma+0x964>
 8006d34:	4b86      	ldr	r3, [pc, #536]	; (8006f50 <checkAktifCalisma+0xb64>)
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	f083 0301 	eor.w	r3, r3, #1
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d006      	beq.n	8006d50 <checkAktifCalisma+0x964>
			timer2=millis;
 8006d42:	4b84      	ldr	r3, [pc, #528]	; (8006f54 <checkAktifCalisma+0xb68>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a84      	ldr	r2, [pc, #528]	; (8006f58 <checkAktifCalisma+0xb6c>)
 8006d48:	6013      	str	r3, [r2, #0]
			butonKontrol5=1;
 8006d4a:	4b81      	ldr	r3, [pc, #516]	; (8006f50 <checkAktifCalisma+0xb64>)
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	701a      	strb	r2, [r3, #0]
		}

		if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8006d50:	4b80      	ldr	r3, [pc, #512]	; (8006f54 <checkAktifCalisma+0xb68>)
 8006d52:	681a      	ldr	r2, [r3, #0]
 8006d54:	4b80      	ldr	r3, [pc, #512]	; (8006f58 <checkAktifCalisma+0xb6c>)
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	1ad3      	subs	r3, r2, r3
 8006d5a:	4a80      	ldr	r2, [pc, #512]	; (8006f5c <checkAktifCalisma+0xb70>)
 8006d5c:	7812      	ldrb	r2, [r2, #0]
 8006d5e:	4293      	cmp	r3, r2
 8006d60:	d303      	bcc.n	8006d6a <checkAktifCalisma+0x97e>
 8006d62:	4b7b      	ldr	r3, [pc, #492]	; (8006f50 <checkAktifCalisma+0xb64>)
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d10d      	bne.n	8006d86 <checkAktifCalisma+0x99a>
 8006d6a:	4b77      	ldr	r3, [pc, #476]	; (8006f48 <checkAktifCalisma+0xb5c>)
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	f083 0301 	eor.w	r3, r3, #1
 8006d72:	b2db      	uxtb	r3, r3
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d106      	bne.n	8006d86 <checkAktifCalisma+0x99a>
 8006d78:	4b74      	ldr	r3, [pc, #464]	; (8006f4c <checkAktifCalisma+0xb60>)
 8006d7a:	781b      	ldrb	r3, [r3, #0]
 8006d7c:	f083 0301 	eor.w	r3, r3, #1
 8006d80:	b2db      	uxtb	r3, r3
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d00a      	beq.n	8006d9c <checkAktifCalisma+0x9b0>
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006d86:	2200      	movs	r2, #0
 8006d88:	2110      	movs	r1, #16
 8006d8a:	486d      	ldr	r0, [pc, #436]	; (8006f40 <checkAktifCalisma+0xb54>)
 8006d8c:	f002 fea7 	bl	8009ade <HAL_GPIO_WritePin>
			devasagivalfcalisiyor=0;
 8006d90:	4b6c      	ldr	r3, [pc, #432]	; (8006f44 <checkAktifCalisma+0xb58>)
 8006d92:	2200      	movs	r2, #0
 8006d94:	701a      	strb	r2, [r3, #0]
			butonKontrol5=0;
 8006d96:	4b6e      	ldr	r3, [pc, #440]	; (8006f50 <checkAktifCalisma+0xb64>)
 8006d98:	2200      	movs	r2, #0
 8006d9a:	701a      	strb	r2, [r3, #0]
		}

		// makine durum kontrolü

		if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8006d9c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006da0:	486f      	ldr	r0, [pc, #444]	; (8006f60 <checkAktifCalisma+0xb74>)
 8006da2:	f002 fe85 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8006da6:	4603      	mov	r3, r0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d120      	bne.n	8006dee <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8006dac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006db0:	486b      	ldr	r0, [pc, #428]	; (8006f60 <checkAktifCalisma+0xb74>)
 8006db2:	f002 fe7d 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8006db6:	4603      	mov	r3, r0
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d118      	bne.n	8006dee <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8006dbc:	2104      	movs	r1, #4
 8006dbe:	4868      	ldr	r0, [pc, #416]	; (8006f60 <checkAktifCalisma+0xb74>)
 8006dc0:	f002 fe76 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d111      	bne.n	8006dee <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8006dca:	2102      	movs	r1, #2
 8006dcc:	4864      	ldr	r0, [pc, #400]	; (8006f60 <checkAktifCalisma+0xb74>)
 8006dce:	f002 fe6f 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d10a      	bne.n	8006dee <checkAktifCalisma+0xa02>
				&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8006dd8:	2101      	movs	r1, #1
 8006dda:	4861      	ldr	r0, [pc, #388]	; (8006f60 <checkAktifCalisma+0xb74>)
 8006ddc:	f002 fe68 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8006de0:	4603      	mov	r3, r0
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d103      	bne.n	8006dee <checkAktifCalisma+0xa02>
			makineStop=1;
 8006de6:	4b5f      	ldr	r3, [pc, #380]	; (8006f64 <checkAktifCalisma+0xb78>)
 8006de8:	2201      	movs	r2, #1
 8006dea:	701a      	strb	r2, [r3, #0]
 8006dec:	e002      	b.n	8006df4 <checkAktifCalisma+0xa08>
		} else {
			makineStop=0;
 8006dee:	4b5d      	ldr	r3, [pc, #372]	; (8006f64 <checkAktifCalisma+0xb78>)
 8006df0:	2200      	movs	r2, #0
 8006df2:	701a      	strb	r2, [r3, #0]
		}

		//kapi 1 kontrol

		// kapi 1 prudhome
		if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006df4:	4b5c      	ldr	r3, [pc, #368]	; (8006f68 <checkAktifCalisma+0xb7c>)
 8006df6:	781b      	ldrb	r3, [r3, #0]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d144      	bne.n	8006e86 <checkAktifCalisma+0xa9a>
 8006dfc:	4b5b      	ldr	r3, [pc, #364]	; (8006f6c <checkAktifCalisma+0xb80>)
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	2b01      	cmp	r3, #1
 8006e02:	d003      	beq.n	8006e0c <checkAktifCalisma+0xa20>
 8006e04:	4b59      	ldr	r3, [pc, #356]	; (8006f6c <checkAktifCalisma+0xb80>)
 8006e06:	781b      	ldrb	r3, [r3, #0]
 8006e08:	2b03      	cmp	r3, #3
 8006e0a:	d13c      	bne.n	8006e86 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8006e0c:	2180      	movs	r1, #128	; 0x80
 8006e0e:	484c      	ldr	r0, [pc, #304]	; (8006f40 <checkAktifCalisma+0xb54>)
 8006e10:	f002 fe4e 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8006e14:	4603      	mov	r3, r0
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d103      	bne.n	8006e22 <checkAktifCalisma+0xa36>
 8006e1a:	4b55      	ldr	r3, [pc, #340]	; (8006f70 <checkAktifCalisma+0xb84>)
 8006e1c:	781b      	ldrb	r3, [r3, #0]
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d00b      	beq.n	8006e3a <checkAktifCalisma+0xa4e>
 8006e22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006e26:	484e      	ldr	r0, [pc, #312]	; (8006f60 <checkAktifCalisma+0xb74>)
 8006e28:	f002 fe42 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d129      	bne.n	8006e86 <checkAktifCalisma+0xa9a>
 8006e32:	4b4f      	ldr	r3, [pc, #316]	; (8006f70 <checkAktifCalisma+0xb84>)
 8006e34:	781b      	ldrb	r3, [r3, #0]
 8006e36:	2b01      	cmp	r3, #1
 8006e38:	d125      	bne.n	8006e86 <checkAktifCalisma+0xa9a>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8006e3a:	2104      	movs	r1, #4
 8006e3c:	4840      	ldr	r0, [pc, #256]	; (8006f40 <checkAktifCalisma+0xb54>)
 8006e3e:	f002 fe37 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8006e42:	4603      	mov	r3, r0
 8006e44:	2b01      	cmp	r3, #1
 8006e46:	d003      	beq.n	8006e50 <checkAktifCalisma+0xa64>
 8006e48:	4b4a      	ldr	r3, [pc, #296]	; (8006f74 <checkAktifCalisma+0xb88>)
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d11a      	bne.n	8006e86 <checkAktifCalisma+0xa9a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006e50:	2102      	movs	r1, #2
 8006e52:	483b      	ldr	r0, [pc, #236]	; (8006f40 <checkAktifCalisma+0xb54>)
 8006e54:	f002 fe2c 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8006e58:	4603      	mov	r3, r0
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d113      	bne.n	8006e86 <checkAktifCalisma+0xa9a>
				&&(butonKontrol==0)
 8006e5e:	4b46      	ldr	r3, [pc, #280]	; (8006f78 <checkAktifCalisma+0xb8c>)
 8006e60:	781b      	ldrb	r3, [r3, #0]
 8006e62:	f083 0301 	eor.w	r3, r3, #1
 8006e66:	b2db      	uxtb	r3, r3
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d00c      	beq.n	8006e86 <checkAktifCalisma+0xa9a>
				&&(makineStop==1)) {
 8006e6c:	4b3d      	ldr	r3, [pc, #244]	; (8006f64 <checkAktifCalisma+0xb78>)
 8006e6e:	781b      	ldrb	r3, [r3, #0]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d008      	beq.n	8006e86 <checkAktifCalisma+0xa9a>
			kapi1prudhome=1;
 8006e74:	4b41      	ldr	r3, [pc, #260]	; (8006f7c <checkAktifCalisma+0xb90>)
 8006e76:	2201      	movs	r2, #1
 8006e78:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8006e7a:	4b36      	ldr	r3, [pc, #216]	; (8006f54 <checkAktifCalisma+0xb68>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	4a40      	ldr	r2, [pc, #256]	; (8006f80 <checkAktifCalisma+0xb94>)
 8006e80:	6013      	str	r3, [r2, #0]
			bekle();
 8006e82:	f7ff f87d 	bl	8005f80 <bekle>
		}

		if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8006e86:	4b33      	ldr	r3, [pc, #204]	; (8006f54 <checkAktifCalisma+0xb68>)
 8006e88:	681a      	ldr	r2, [r3, #0]
 8006e8a:	4b3d      	ldr	r3, [pc, #244]	; (8006f80 <checkAktifCalisma+0xb94>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	1ad3      	subs	r3, r2, r3
 8006e90:	4a3c      	ldr	r2, [pc, #240]	; (8006f84 <checkAktifCalisma+0xb98>)
 8006e92:	7812      	ldrb	r2, [r2, #0]
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d211      	bcs.n	8006ebc <checkAktifCalisma+0xad0>
 8006e98:	2104      	movs	r1, #4
 8006e9a:	4829      	ldr	r0, [pc, #164]	; (8006f40 <checkAktifCalisma+0xb54>)
 8006e9c:	f002 fe08 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8006ea0:	4603      	mov	r3, r0
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d00a      	beq.n	8006ebc <checkAktifCalisma+0xad0>
 8006ea6:	4b33      	ldr	r3, [pc, #204]	; (8006f74 <checkAktifCalisma+0xb88>)
 8006ea8:	781b      	ldrb	r3, [r3, #0]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d006      	beq.n	8006ebc <checkAktifCalisma+0xad0>
 8006eae:	4b2d      	ldr	r3, [pc, #180]	; (8006f64 <checkAktifCalisma+0xb78>)
 8006eb0:	781b      	ldrb	r3, [r3, #0]
 8006eb2:	f083 0301 	eor.w	r3, r3, #1
 8006eb6:	b2db      	uxtb	r3, r3
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d002      	beq.n	8006ec2 <checkAktifCalisma+0xad6>
			kapi1prudhome=0;
 8006ebc:	4b2f      	ldr	r3, [pc, #188]	; (8006f7c <checkAktifCalisma+0xb90>)
 8006ebe:	2200      	movs	r2, #0
 8006ec0:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 buton kontrol

		if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006ec2:	4b29      	ldr	r3, [pc, #164]	; (8006f68 <checkAktifCalisma+0xb7c>)
 8006ec4:	781b      	ldrb	r3, [r3, #0]
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d160      	bne.n	8006f8c <checkAktifCalisma+0xba0>
 8006eca:	4b28      	ldr	r3, [pc, #160]	; (8006f6c <checkAktifCalisma+0xb80>)
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	2b01      	cmp	r3, #1
 8006ed0:	d003      	beq.n	8006eda <checkAktifCalisma+0xaee>
 8006ed2:	4b26      	ldr	r3, [pc, #152]	; (8006f6c <checkAktifCalisma+0xb80>)
 8006ed4:	781b      	ldrb	r3, [r3, #0]
 8006ed6:	2b03      	cmp	r3, #3
 8006ed8:	d158      	bne.n	8006f8c <checkAktifCalisma+0xba0>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8006eda:	2104      	movs	r1, #4
 8006edc:	4818      	ldr	r0, [pc, #96]	; (8006f40 <checkAktifCalisma+0xb54>)
 8006ede:	f002 fde7 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b01      	cmp	r3, #1
 8006ee6:	d003      	beq.n	8006ef0 <checkAktifCalisma+0xb04>
 8006ee8:	4b22      	ldr	r3, [pc, #136]	; (8006f74 <checkAktifCalisma+0xb88>)
 8006eea:	781b      	ldrb	r3, [r3, #0]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d14d      	bne.n	8006f8c <checkAktifCalisma+0xba0>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006ef0:	2102      	movs	r1, #2
 8006ef2:	4813      	ldr	r0, [pc, #76]	; (8006f40 <checkAktifCalisma+0xb54>)
 8006ef4:	f002 fddc 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d146      	bne.n	8006f8c <checkAktifCalisma+0xba0>
				&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8006efe:	2180      	movs	r1, #128	; 0x80
 8006f00:	480f      	ldr	r0, [pc, #60]	; (8006f40 <checkAktifCalisma+0xb54>)
 8006f02:	f002 fdd5 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8006f06:	4603      	mov	r3, r0
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d103      	bne.n	8006f14 <checkAktifCalisma+0xb28>
 8006f0c:	4b18      	ldr	r3, [pc, #96]	; (8006f70 <checkAktifCalisma+0xb84>)
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d00b      	beq.n	8006f2c <checkAktifCalisma+0xb40>
 8006f14:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006f18:	4811      	ldr	r0, [pc, #68]	; (8006f60 <checkAktifCalisma+0xb74>)
 8006f1a:	f002 fdc9 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d133      	bne.n	8006f8c <checkAktifCalisma+0xba0>
 8006f24:	4b12      	ldr	r3, [pc, #72]	; (8006f70 <checkAktifCalisma+0xb84>)
 8006f26:	781b      	ldrb	r3, [r3, #0]
 8006f28:	2b01      	cmp	r3, #1
 8006f2a:	d12f      	bne.n	8006f8c <checkAktifCalisma+0xba0>
				&&(makineStop==1)) {
 8006f2c:	4b0d      	ldr	r3, [pc, #52]	; (8006f64 <checkAktifCalisma+0xb78>)
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d02b      	beq.n	8006f8c <checkAktifCalisma+0xba0>
			kapi1butonkontrol=1;
 8006f34:	4b14      	ldr	r3, [pc, #80]	; (8006f88 <checkAktifCalisma+0xb9c>)
 8006f36:	2201      	movs	r2, #1
 8006f38:	701a      	strb	r2, [r3, #0]
 8006f3a:	e02a      	b.n	8006f92 <checkAktifCalisma+0xba6>
 8006f3c:	20000c70 	.word	0x20000c70
 8006f40:	40011000 	.word	0x40011000
 8006f44:	20000c74 	.word	0x20000c74
 8006f48:	20000c8b 	.word	0x20000c8b
 8006f4c:	20000c8c 	.word	0x20000c8c
 8006f50:	20000c6c 	.word	0x20000c6c
 8006f54:	20000bc4 	.word	0x20000bc4
 8006f58:	20000bd0 	.word	0x20000bd0
 8006f5c:	20000c4f 	.word	0x20000c4f
 8006f60:	40010c00 	.word	0x40010c00
 8006f64:	20000c7b 	.word	0x20000c7b
 8006f68:	20000c42 	.word	0x20000c42
 8006f6c:	20000c41 	.word	0x20000c41
 8006f70:	20000c45 	.word	0x20000c45
 8006f74:	20000c3f 	.word	0x20000c3f
 8006f78:	20000c68 	.word	0x20000c68
 8006f7c:	20000c7c 	.word	0x20000c7c
 8006f80:	20000bc8 	.word	0x20000bc8
 8006f84:	20000c52 	.word	0x20000c52
 8006f88:	20000c7d 	.word	0x20000c7d
		} else {
			kapi1butonkontrol=0;
 8006f8c:	4b8b      	ldr	r3, [pc, #556]	; (80071bc <checkAktifCalisma+0xdd0>)
 8006f8e:	2200      	movs	r2, #0
 8006f90:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 pizzato

		if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006f92:	4b8b      	ldr	r3, [pc, #556]	; (80071c0 <checkAktifCalisma+0xdd4>)
 8006f94:	781b      	ldrb	r3, [r3, #0]
 8006f96:	2b02      	cmp	r3, #2
 8006f98:	d121      	bne.n	8006fde <checkAktifCalisma+0xbf2>
 8006f9a:	4b8a      	ldr	r3, [pc, #552]	; (80071c4 <checkAktifCalisma+0xdd8>)
 8006f9c:	781b      	ldrb	r3, [r3, #0]
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d003      	beq.n	8006faa <checkAktifCalisma+0xbbe>
 8006fa2:	4b88      	ldr	r3, [pc, #544]	; (80071c4 <checkAktifCalisma+0xdd8>)
 8006fa4:	781b      	ldrb	r3, [r3, #0]
 8006fa6:	2b03      	cmp	r3, #3
 8006fa8:	d119      	bne.n	8006fde <checkAktifCalisma+0xbf2>

				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8006faa:	2104      	movs	r1, #4
 8006fac:	4886      	ldr	r0, [pc, #536]	; (80071c8 <checkAktifCalisma+0xddc>)
 8006fae:	f002 fd7f 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8006fb2:	4603      	mov	r3, r0
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d003      	beq.n	8006fc0 <checkAktifCalisma+0xbd4>
 8006fb8:	4b84      	ldr	r3, [pc, #528]	; (80071cc <checkAktifCalisma+0xde0>)
 8006fba:	781b      	ldrb	r3, [r3, #0]
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d10e      	bne.n	8006fde <checkAktifCalisma+0xbf2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006fc0:	2102      	movs	r1, #2
 8006fc2:	4881      	ldr	r0, [pc, #516]	; (80071c8 <checkAktifCalisma+0xddc>)
 8006fc4:	f002 fd74 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d107      	bne.n	8006fde <checkAktifCalisma+0xbf2>
				&&(makineStop==1)) {
 8006fce:	4b80      	ldr	r3, [pc, #512]	; (80071d0 <checkAktifCalisma+0xde4>)
 8006fd0:	781b      	ldrb	r3, [r3, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d003      	beq.n	8006fde <checkAktifCalisma+0xbf2>
			kapi1pizzato=1;
 8006fd6:	4b7f      	ldr	r3, [pc, #508]	; (80071d4 <checkAktifCalisma+0xde8>)
 8006fd8:	2201      	movs	r2, #1
 8006fda:	701a      	strb	r2, [r3, #0]
 8006fdc:	e002      	b.n	8006fe4 <checkAktifCalisma+0xbf8>
		} else {
			kapi1pizzato=0;
 8006fde:	4b7d      	ldr	r3, [pc, #500]	; (80071d4 <checkAktifCalisma+0xde8>)
 8006fe0:	2200      	movs	r2, #0
 8006fe2:	701a      	strb	r2, [r3, #0]
		}

		// kapi 1 çıkış

		if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8006fe4:	4b75      	ldr	r3, [pc, #468]	; (80071bc <checkAktifCalisma+0xdd0>)
 8006fe6:	781b      	ldrb	r3, [r3, #0]
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d107      	bne.n	8006ffc <checkAktifCalisma+0xc10>
 8006fec:	4b79      	ldr	r3, [pc, #484]	; (80071d4 <checkAktifCalisma+0xde8>)
 8006fee:	781b      	ldrb	r3, [r3, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d103      	bne.n	8006ffc <checkAktifCalisma+0xc10>
 8006ff4:	4b78      	ldr	r3, [pc, #480]	; (80071d8 <checkAktifCalisma+0xdec>)
 8006ff6:	781b      	ldrb	r3, [r3, #0]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d005      	beq.n	8007008 <checkAktifCalisma+0xc1c>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8006ffc:	2201      	movs	r2, #1
 8006ffe:	2180      	movs	r1, #128	; 0x80
 8007000:	4876      	ldr	r0, [pc, #472]	; (80071dc <checkAktifCalisma+0xdf0>)
 8007002:	f002 fd6c 	bl	8009ade <HAL_GPIO_WritePin>
 8007006:	e004      	b.n	8007012 <checkAktifCalisma+0xc26>
		} else {
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007008:	2200      	movs	r2, #0
 800700a:	2180      	movs	r1, #128	; 0x80
 800700c:	4873      	ldr	r0, [pc, #460]	; (80071dc <checkAktifCalisma+0xdf0>)
 800700e:	f002 fd66 	bl	8009ade <HAL_GPIO_WritePin>

		//kapi2 kontrol

		// kapi 2 prudhome

		if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8007012:	4b73      	ldr	r3, [pc, #460]	; (80071e0 <checkAktifCalisma+0xdf4>)
 8007014:	781b      	ldrb	r3, [r3, #0]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d141      	bne.n	800709e <checkAktifCalisma+0xcb2>
 800701a:	4b6a      	ldr	r3, [pc, #424]	; (80071c4 <checkAktifCalisma+0xdd8>)
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	2b01      	cmp	r3, #1
 8007020:	d003      	beq.n	800702a <checkAktifCalisma+0xc3e>
 8007022:	4b68      	ldr	r3, [pc, #416]	; (80071c4 <checkAktifCalisma+0xdd8>)
 8007024:	781b      	ldrb	r3, [r3, #0]
 8007026:	2b03      	cmp	r3, #3
 8007028:	d139      	bne.n	800709e <checkAktifCalisma+0xcb2>
				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 800702a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800702e:	4866      	ldr	r0, [pc, #408]	; (80071c8 <checkAktifCalisma+0xddc>)
 8007030:	f002 fd3e 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8007034:	4603      	mov	r3, r0
 8007036:	2b00      	cmp	r3, #0
 8007038:	d103      	bne.n	8007042 <checkAktifCalisma+0xc56>
 800703a:	4b6a      	ldr	r3, [pc, #424]	; (80071e4 <checkAktifCalisma+0xdf8>)
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	2b00      	cmp	r3, #0
 8007040:	d00b      	beq.n	800705a <checkAktifCalisma+0xc6e>
 8007042:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007046:	4868      	ldr	r0, [pc, #416]	; (80071e8 <checkAktifCalisma+0xdfc>)
 8007048:	f002 fd32 	bl	8009ab0 <HAL_GPIO_ReadPin>
 800704c:	4603      	mov	r3, r0
 800704e:	2b00      	cmp	r3, #0
 8007050:	d125      	bne.n	800709e <checkAktifCalisma+0xcb2>
 8007052:	4b64      	ldr	r3, [pc, #400]	; (80071e4 <checkAktifCalisma+0xdf8>)
 8007054:	781b      	ldrb	r3, [r3, #0]
 8007056:	2b01      	cmp	r3, #1
 8007058:	d121      	bne.n	800709e <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800705a:	2102      	movs	r1, #2
 800705c:	485a      	ldr	r0, [pc, #360]	; (80071c8 <checkAktifCalisma+0xddc>)
 800705e:	f002 fd27 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8007062:	4603      	mov	r3, r0
 8007064:	2b01      	cmp	r3, #1
 8007066:	d11a      	bne.n	800709e <checkAktifCalisma+0xcb2>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8007068:	2104      	movs	r1, #4
 800706a:	4857      	ldr	r0, [pc, #348]	; (80071c8 <checkAktifCalisma+0xddc>)
 800706c:	f002 fd20 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8007070:	4603      	mov	r3, r0
 8007072:	2b00      	cmp	r3, #0
 8007074:	d113      	bne.n	800709e <checkAktifCalisma+0xcb2>
				&&(makineStop==1)
 8007076:	4b56      	ldr	r3, [pc, #344]	; (80071d0 <checkAktifCalisma+0xde4>)
 8007078:	781b      	ldrb	r3, [r3, #0]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00f      	beq.n	800709e <checkAktifCalisma+0xcb2>
				&&(butonKontrol==0)) {
 800707e:	4b5b      	ldr	r3, [pc, #364]	; (80071ec <checkAktifCalisma+0xe00>)
 8007080:	781b      	ldrb	r3, [r3, #0]
 8007082:	f083 0301 	eor.w	r3, r3, #1
 8007086:	b2db      	uxtb	r3, r3
 8007088:	2b00      	cmp	r3, #0
 800708a:	d008      	beq.n	800709e <checkAktifCalisma+0xcb2>
			kapi2prudhome=1;
 800708c:	4b58      	ldr	r3, [pc, #352]	; (80071f0 <checkAktifCalisma+0xe04>)
 800708e:	2201      	movs	r2, #1
 8007090:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8007092:	4b58      	ldr	r3, [pc, #352]	; (80071f4 <checkAktifCalisma+0xe08>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	4a58      	ldr	r2, [pc, #352]	; (80071f8 <checkAktifCalisma+0xe0c>)
 8007098:	6013      	str	r3, [r2, #0]
			bekle();
 800709a:	f7fe ff71 	bl	8005f80 <bekle>
		}

		if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 800709e:	4b55      	ldr	r3, [pc, #340]	; (80071f4 <checkAktifCalisma+0xe08>)
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	4b55      	ldr	r3, [pc, #340]	; (80071f8 <checkAktifCalisma+0xe0c>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	1ad3      	subs	r3, r2, r3
 80070a8:	4a54      	ldr	r2, [pc, #336]	; (80071fc <checkAktifCalisma+0xe10>)
 80070aa:	7812      	ldrb	r2, [r2, #0]
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d20d      	bcs.n	80070cc <checkAktifCalisma+0xce0>
 80070b0:	2102      	movs	r1, #2
 80070b2:	4845      	ldr	r0, [pc, #276]	; (80071c8 <checkAktifCalisma+0xddc>)
 80070b4:	f002 fcfc 	bl	8009ab0 <HAL_GPIO_ReadPin>
 80070b8:	4603      	mov	r3, r0
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d006      	beq.n	80070cc <checkAktifCalisma+0xce0>
 80070be:	4b44      	ldr	r3, [pc, #272]	; (80071d0 <checkAktifCalisma+0xde4>)
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	f083 0301 	eor.w	r3, r3, #1
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d002      	beq.n	80070d2 <checkAktifCalisma+0xce6>
			kapi2prudhome=0;
 80070cc:	4b48      	ldr	r3, [pc, #288]	; (80071f0 <checkAktifCalisma+0xe04>)
 80070ce:	2200      	movs	r2, #0
 80070d0:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 buton kontrol

		if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80070d2:	4b43      	ldr	r3, [pc, #268]	; (80071e0 <checkAktifCalisma+0xdf4>)
 80070d4:	781b      	ldrb	r3, [r3, #0]
 80070d6:	2b01      	cmp	r3, #1
 80070d8:	d135      	bne.n	8007146 <checkAktifCalisma+0xd5a>
 80070da:	4b3a      	ldr	r3, [pc, #232]	; (80071c4 <checkAktifCalisma+0xdd8>)
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	2b01      	cmp	r3, #1
 80070e0:	d003      	beq.n	80070ea <checkAktifCalisma+0xcfe>
 80070e2:	4b38      	ldr	r3, [pc, #224]	; (80071c4 <checkAktifCalisma+0xdd8>)
 80070e4:	781b      	ldrb	r3, [r3, #0]
 80070e6:	2b03      	cmp	r3, #3
 80070e8:	d12d      	bne.n	8007146 <checkAktifCalisma+0xd5a>

				&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 80070ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80070ee:	4836      	ldr	r0, [pc, #216]	; (80071c8 <checkAktifCalisma+0xddc>)
 80070f0:	f002 fcde 	bl	8009ab0 <HAL_GPIO_ReadPin>
 80070f4:	4603      	mov	r3, r0
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d103      	bne.n	8007102 <checkAktifCalisma+0xd16>
 80070fa:	4b3a      	ldr	r3, [pc, #232]	; (80071e4 <checkAktifCalisma+0xdf8>)
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d00b      	beq.n	800711a <checkAktifCalisma+0xd2e>
 8007102:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007106:	4838      	ldr	r0, [pc, #224]	; (80071e8 <checkAktifCalisma+0xdfc>)
 8007108:	f002 fcd2 	bl	8009ab0 <HAL_GPIO_ReadPin>
 800710c:	4603      	mov	r3, r0
 800710e:	2b00      	cmp	r3, #0
 8007110:	d119      	bne.n	8007146 <checkAktifCalisma+0xd5a>
 8007112:	4b34      	ldr	r3, [pc, #208]	; (80071e4 <checkAktifCalisma+0xdf8>)
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	2b01      	cmp	r3, #1
 8007118:	d115      	bne.n	8007146 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800711a:	2102      	movs	r1, #2
 800711c:	482a      	ldr	r0, [pc, #168]	; (80071c8 <checkAktifCalisma+0xddc>)
 800711e:	f002 fcc7 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8007122:	4603      	mov	r3, r0
 8007124:	2b01      	cmp	r3, #1
 8007126:	d10e      	bne.n	8007146 <checkAktifCalisma+0xd5a>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8007128:	2104      	movs	r1, #4
 800712a:	4827      	ldr	r0, [pc, #156]	; (80071c8 <checkAktifCalisma+0xddc>)
 800712c:	f002 fcc0 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8007130:	4603      	mov	r3, r0
 8007132:	2b00      	cmp	r3, #0
 8007134:	d107      	bne.n	8007146 <checkAktifCalisma+0xd5a>
				&&(makineStop==1)) {
 8007136:	4b26      	ldr	r3, [pc, #152]	; (80071d0 <checkAktifCalisma+0xde4>)
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d003      	beq.n	8007146 <checkAktifCalisma+0xd5a>
			kapi2butonkontrol=1;
 800713e:	4b30      	ldr	r3, [pc, #192]	; (8007200 <checkAktifCalisma+0xe14>)
 8007140:	2201      	movs	r2, #1
 8007142:	701a      	strb	r2, [r3, #0]
 8007144:	e002      	b.n	800714c <checkAktifCalisma+0xd60>
		} else {
			kapi2butonkontrol=0;
 8007146:	4b2e      	ldr	r3, [pc, #184]	; (8007200 <checkAktifCalisma+0xe14>)
 8007148:	2200      	movs	r2, #0
 800714a:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 pizzato

		if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 800714c:	4b24      	ldr	r3, [pc, #144]	; (80071e0 <checkAktifCalisma+0xdf4>)
 800714e:	781b      	ldrb	r3, [r3, #0]
 8007150:	2b02      	cmp	r3, #2
 8007152:	d11d      	bne.n	8007190 <checkAktifCalisma+0xda4>
 8007154:	4b1b      	ldr	r3, [pc, #108]	; (80071c4 <checkAktifCalisma+0xdd8>)
 8007156:	781b      	ldrb	r3, [r3, #0]
 8007158:	2b01      	cmp	r3, #1
 800715a:	d003      	beq.n	8007164 <checkAktifCalisma+0xd78>
 800715c:	4b19      	ldr	r3, [pc, #100]	; (80071c4 <checkAktifCalisma+0xdd8>)
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	2b03      	cmp	r3, #3
 8007162:	d115      	bne.n	8007190 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007164:	2102      	movs	r1, #2
 8007166:	4818      	ldr	r0, [pc, #96]	; (80071c8 <checkAktifCalisma+0xddc>)
 8007168:	f002 fca2 	bl	8009ab0 <HAL_GPIO_ReadPin>
 800716c:	4603      	mov	r3, r0
 800716e:	2b01      	cmp	r3, #1
 8007170:	d10e      	bne.n	8007190 <checkAktifCalisma+0xda4>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8007172:	2104      	movs	r1, #4
 8007174:	4814      	ldr	r0, [pc, #80]	; (80071c8 <checkAktifCalisma+0xddc>)
 8007176:	f002 fc9b 	bl	8009ab0 <HAL_GPIO_ReadPin>
 800717a:	4603      	mov	r3, r0
 800717c:	2b00      	cmp	r3, #0
 800717e:	d107      	bne.n	8007190 <checkAktifCalisma+0xda4>
				&&(makineStop==1)) {
 8007180:	4b13      	ldr	r3, [pc, #76]	; (80071d0 <checkAktifCalisma+0xde4>)
 8007182:	781b      	ldrb	r3, [r3, #0]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d003      	beq.n	8007190 <checkAktifCalisma+0xda4>
			kapi2pizzato=1;
 8007188:	4b1e      	ldr	r3, [pc, #120]	; (8007204 <checkAktifCalisma+0xe18>)
 800718a:	2201      	movs	r2, #1
 800718c:	701a      	strb	r2, [r3, #0]
 800718e:	e002      	b.n	8007196 <checkAktifCalisma+0xdaa>
		} else {
			kapi2pizzato=0;
 8007190:	4b1c      	ldr	r3, [pc, #112]	; (8007204 <checkAktifCalisma+0xe18>)
 8007192:	2200      	movs	r2, #0
 8007194:	701a      	strb	r2, [r3, #0]
		}

		// kapi 2 çıkış

		if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 8007196:	4b1a      	ldr	r3, [pc, #104]	; (8007200 <checkAktifCalisma+0xe14>)
 8007198:	781b      	ldrb	r3, [r3, #0]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d107      	bne.n	80071ae <checkAktifCalisma+0xdc2>
 800719e:	4b19      	ldr	r3, [pc, #100]	; (8007204 <checkAktifCalisma+0xe18>)
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d103      	bne.n	80071ae <checkAktifCalisma+0xdc2>
 80071a6:	4b12      	ldr	r3, [pc, #72]	; (80071f0 <checkAktifCalisma+0xe04>)
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d02c      	beq.n	8007208 <checkAktifCalisma+0xe1c>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80071ae:	2201      	movs	r2, #1
 80071b0:	2140      	movs	r1, #64	; 0x40
 80071b2:	480a      	ldr	r0, [pc, #40]	; (80071dc <checkAktifCalisma+0xdf0>)
 80071b4:	f002 fc93 	bl	8009ade <HAL_GPIO_WritePin>
 80071b8:	e02b      	b.n	8007212 <checkAktifCalisma+0xe26>
 80071ba:	bf00      	nop
 80071bc:	20000c7d 	.word	0x20000c7d
 80071c0:	20000c42 	.word	0x20000c42
 80071c4:	20000c41 	.word	0x20000c41
 80071c8:	40011000 	.word	0x40011000
 80071cc:	20000c3f 	.word	0x20000c3f
 80071d0:	20000c7b 	.word	0x20000c7b
 80071d4:	20000c7e 	.word	0x20000c7e
 80071d8:	20000c7c 	.word	0x20000c7c
 80071dc:	40010800 	.word	0x40010800
 80071e0:	20000c43 	.word	0x20000c43
 80071e4:	20000c45 	.word	0x20000c45
 80071e8:	40010c00 	.word	0x40010c00
 80071ec:	20000c68 	.word	0x20000c68
 80071f0:	20000c7f 	.word	0x20000c7f
 80071f4:	20000bc4 	.word	0x20000bc4
 80071f8:	20000bc8 	.word	0x20000bc8
 80071fc:	20000c53 	.word	0x20000c53
 8007200:	20000c80 	.word	0x20000c80
 8007204:	20000c81 	.word	0x20000c81
		} else {
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007208:	2200      	movs	r2, #0
 800720a:	2140      	movs	r1, #64	; 0x40
 800720c:	488d      	ldr	r0, [pc, #564]	; (8007444 <checkAktifCalisma+0x1058>)
 800720e:	f002 fc66 	bl	8009ade <HAL_GPIO_WritePin>
		}

		//   kapi tabla kontrol ***

		if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8007212:	4b8d      	ldr	r3, [pc, #564]	; (8007448 <checkAktifCalisma+0x105c>)
 8007214:	781b      	ldrb	r3, [r3, #0]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d003      	beq.n	8007222 <checkAktifCalisma+0xe36>
 800721a:	4b8b      	ldr	r3, [pc, #556]	; (8007448 <checkAktifCalisma+0x105c>)
 800721c:	781b      	ldrb	r3, [r3, #0]
 800721e:	2b02      	cmp	r3, #2
 8007220:	d115      	bne.n	800724e <checkAktifCalisma+0xe62>
				&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8007222:	2104      	movs	r1, #4
 8007224:	4889      	ldr	r0, [pc, #548]	; (800744c <checkAktifCalisma+0x1060>)
 8007226:	f002 fc43 	bl	8009ab0 <HAL_GPIO_ReadPin>
 800722a:	4603      	mov	r3, r0
 800722c:	2b01      	cmp	r3, #1
 800722e:	d003      	beq.n	8007238 <checkAktifCalisma+0xe4c>
 8007230:	4b87      	ldr	r3, [pc, #540]	; (8007450 <checkAktifCalisma+0x1064>)
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d10a      	bne.n	800724e <checkAktifCalisma+0xe62>
				&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 8007238:	2102      	movs	r1, #2
 800723a:	4884      	ldr	r0, [pc, #528]	; (800744c <checkAktifCalisma+0x1060>)
 800723c:	f002 fc38 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8007240:	4603      	mov	r3, r0
 8007242:	2b00      	cmp	r3, #0
 8007244:	d103      	bne.n	800724e <checkAktifCalisma+0xe62>
			kapiTablaAcKonumKat1=1;
 8007246:	4b83      	ldr	r3, [pc, #524]	; (8007454 <checkAktifCalisma+0x1068>)
 8007248:	2201      	movs	r2, #1
 800724a:	701a      	strb	r2, [r3, #0]
 800724c:	e002      	b.n	8007254 <checkAktifCalisma+0xe68>
		} else {
			kapiTablaAcKonumKat1=0;
 800724e:	4b81      	ldr	r3, [pc, #516]	; (8007454 <checkAktifCalisma+0x1068>)
 8007250:	2200      	movs	r2, #0
 8007252:	701a      	strb	r2, [r3, #0]
		}

		if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8007254:	4b7c      	ldr	r3, [pc, #496]	; (8007448 <checkAktifCalisma+0x105c>)
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	2b01      	cmp	r3, #1
 800725a:	d003      	beq.n	8007264 <checkAktifCalisma+0xe78>
 800725c:	4b7a      	ldr	r3, [pc, #488]	; (8007448 <checkAktifCalisma+0x105c>)
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	2b02      	cmp	r3, #2
 8007262:	d111      	bne.n	8007288 <checkAktifCalisma+0xe9c>
				&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007264:	2102      	movs	r1, #2
 8007266:	4879      	ldr	r0, [pc, #484]	; (800744c <checkAktifCalisma+0x1060>)
 8007268:	f002 fc22 	bl	8009ab0 <HAL_GPIO_ReadPin>
 800726c:	4603      	mov	r3, r0
 800726e:	2b01      	cmp	r3, #1
 8007270:	d10a      	bne.n	8007288 <checkAktifCalisma+0xe9c>
				&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8007272:	2104      	movs	r1, #4
 8007274:	4875      	ldr	r0, [pc, #468]	; (800744c <checkAktifCalisma+0x1060>)
 8007276:	f002 fc1b 	bl	8009ab0 <HAL_GPIO_ReadPin>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d103      	bne.n	8007288 <checkAktifCalisma+0xe9c>
			kapiTablaAcKonumKat2=1;
 8007280:	4b75      	ldr	r3, [pc, #468]	; (8007458 <checkAktifCalisma+0x106c>)
 8007282:	2201      	movs	r2, #1
 8007284:	701a      	strb	r2, [r3, #0]
 8007286:	e002      	b.n	800728e <checkAktifCalisma+0xea2>
		} else {
			kapiTablaAcKonumKat2=0;
 8007288:	4b73      	ldr	r3, [pc, #460]	; (8007458 <checkAktifCalisma+0x106c>)
 800728a:	2200      	movs	r2, #0
 800728c:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat1==1
 800728e:	4b71      	ldr	r3, [pc, #452]	; (8007454 <checkAktifCalisma+0x1068>)
 8007290:	781b      	ldrb	r3, [r3, #0]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d00f      	beq.n	80072b6 <checkAktifCalisma+0xeca>
				&& kapiAcTipi==1
 8007296:	4b71      	ldr	r3, [pc, #452]	; (800745c <checkAktifCalisma+0x1070>)
 8007298:	781b      	ldrb	r3, [r3, #0]
 800729a:	2b01      	cmp	r3, #1
 800729c:	d10b      	bne.n	80072b6 <checkAktifCalisma+0xeca>
				&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 800729e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80072a2:	486f      	ldr	r0, [pc, #444]	; (8007460 <checkAktifCalisma+0x1074>)
 80072a4:	f002 fc04 	bl	8009ab0 <HAL_GPIO_ReadPin>
 80072a8:	4603      	mov	r3, r0
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d103      	bne.n	80072b6 <checkAktifCalisma+0xeca>
			kapiactablaesp1=1;
 80072ae:	4b6d      	ldr	r3, [pc, #436]	; (8007464 <checkAktifCalisma+0x1078>)
 80072b0:	2201      	movs	r2, #1
 80072b2:	701a      	strb	r2, [r3, #0]
 80072b4:	e002      	b.n	80072bc <checkAktifCalisma+0xed0>
		} else {
			kapiactablaesp1=0;
 80072b6:	4b6b      	ldr	r3, [pc, #428]	; (8007464 <checkAktifCalisma+0x1078>)
 80072b8:	2200      	movs	r2, #0
 80072ba:	701a      	strb	r2, [r3, #0]
		}

		if(kapiTablaAcKonumKat2==1
 80072bc:	4b66      	ldr	r3, [pc, #408]	; (8007458 <checkAktifCalisma+0x106c>)
 80072be:	781b      	ldrb	r3, [r3, #0]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d00f      	beq.n	80072e4 <checkAktifCalisma+0xef8>
				&& kapiAcTipi==1
 80072c4:	4b65      	ldr	r3, [pc, #404]	; (800745c <checkAktifCalisma+0x1070>)
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	d10b      	bne.n	80072e4 <checkAktifCalisma+0xef8>
				&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 80072cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80072d0:	4863      	ldr	r0, [pc, #396]	; (8007460 <checkAktifCalisma+0x1074>)
 80072d2:	f002 fbed 	bl	8009ab0 <HAL_GPIO_ReadPin>
 80072d6:	4603      	mov	r3, r0
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d103      	bne.n	80072e4 <checkAktifCalisma+0xef8>
			kapiactablaesp2=1;
 80072dc:	4b62      	ldr	r3, [pc, #392]	; (8007468 <checkAktifCalisma+0x107c>)
 80072de:	2201      	movs	r2, #1
 80072e0:	701a      	strb	r2, [r3, #0]
 80072e2:	e002      	b.n	80072ea <checkAktifCalisma+0xefe>
		} else {
			kapiactablaesp2=0;
 80072e4:	4b60      	ldr	r3, [pc, #384]	; (8007468 <checkAktifCalisma+0x107c>)
 80072e6:	2200      	movs	r2, #0
 80072e8:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapısı prudhome

		if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80072ea:	4b60      	ldr	r3, [pc, #384]	; (800746c <checkAktifCalisma+0x1080>)
 80072ec:	781b      	ldrb	r3, [r3, #0]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d137      	bne.n	8007362 <checkAktifCalisma+0xf76>
 80072f2:	4b5f      	ldr	r3, [pc, #380]	; (8007470 <checkAktifCalisma+0x1084>)
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	2b02      	cmp	r3, #2
 80072f8:	d003      	beq.n	8007302 <checkAktifCalisma+0xf16>
 80072fa:	4b5d      	ldr	r3, [pc, #372]	; (8007470 <checkAktifCalisma+0x1084>)
 80072fc:	781b      	ldrb	r3, [r3, #0]
 80072fe:	2b03      	cmp	r3, #3
 8007300:	d12f      	bne.n	8007362 <checkAktifCalisma+0xf76>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8007302:	4b54      	ldr	r3, [pc, #336]	; (8007454 <checkAktifCalisma+0x1068>)
 8007304:	781b      	ldrb	r3, [r3, #0]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d103      	bne.n	8007312 <checkAktifCalisma+0xf26>
 800730a:	4b53      	ldr	r3, [pc, #332]	; (8007458 <checkAktifCalisma+0x106c>)
 800730c:	781b      	ldrb	r3, [r3, #0]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d027      	beq.n	8007362 <checkAktifCalisma+0xf76>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8007312:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007316:	484d      	ldr	r0, [pc, #308]	; (800744c <checkAktifCalisma+0x1060>)
 8007318:	f002 fbca 	bl	8009ab0 <HAL_GPIO_ReadPin>
 800731c:	4603      	mov	r3, r0
 800731e:	2b00      	cmp	r3, #0
 8007320:	d103      	bne.n	800732a <checkAktifCalisma+0xf3e>
 8007322:	4b4e      	ldr	r3, [pc, #312]	; (800745c <checkAktifCalisma+0x1070>)
 8007324:	781b      	ldrb	r3, [r3, #0]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d007      	beq.n	800733a <checkAktifCalisma+0xf4e>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 800732a:	4b4e      	ldr	r3, [pc, #312]	; (8007464 <checkAktifCalisma+0x1078>)
 800732c:	781b      	ldrb	r3, [r3, #0]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d103      	bne.n	800733a <checkAktifCalisma+0xf4e>
 8007332:	4b4d      	ldr	r3, [pc, #308]	; (8007468 <checkAktifCalisma+0x107c>)
 8007334:	781b      	ldrb	r3, [r3, #0]
 8007336:	2b00      	cmp	r3, #0
 8007338:	d013      	beq.n	8007362 <checkAktifCalisma+0xf76>
				&&(makineStop==1)
 800733a:	4b4e      	ldr	r3, [pc, #312]	; (8007474 <checkAktifCalisma+0x1088>)
 800733c:	781b      	ldrb	r3, [r3, #0]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d00f      	beq.n	8007362 <checkAktifCalisma+0xf76>
				&&(butonKontrol==0)) {
 8007342:	4b4d      	ldr	r3, [pc, #308]	; (8007478 <checkAktifCalisma+0x108c>)
 8007344:	781b      	ldrb	r3, [r3, #0]
 8007346:	f083 0301 	eor.w	r3, r3, #1
 800734a:	b2db      	uxtb	r3, r3
 800734c:	2b00      	cmp	r3, #0
 800734e:	d008      	beq.n	8007362 <checkAktifCalisma+0xf76>

			kapiTablaprudhome=1;
 8007350:	4b4a      	ldr	r3, [pc, #296]	; (800747c <checkAktifCalisma+0x1090>)
 8007352:	2201      	movs	r2, #1
 8007354:	701a      	strb	r2, [r3, #0]
			timer = millis;
 8007356:	4b4a      	ldr	r3, [pc, #296]	; (8007480 <checkAktifCalisma+0x1094>)
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a4a      	ldr	r2, [pc, #296]	; (8007484 <checkAktifCalisma+0x1098>)
 800735c:	6013      	str	r3, [r2, #0]
			bekle();
 800735e:	f7fe fe0f 	bl	8005f80 <bekle>
		}

		if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8007362:	4b47      	ldr	r3, [pc, #284]	; (8007480 <checkAktifCalisma+0x1094>)
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	4b47      	ldr	r3, [pc, #284]	; (8007484 <checkAktifCalisma+0x1098>)
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	1ad3      	subs	r3, r2, r3
 800736c:	4a46      	ldr	r2, [pc, #280]	; (8007488 <checkAktifCalisma+0x109c>)
 800736e:	7812      	ldrb	r2, [r2, #0]
 8007370:	4293      	cmp	r3, r2
 8007372:	d214      	bcs.n	800739e <checkAktifCalisma+0xfb2>
 8007374:	4b37      	ldr	r3, [pc, #220]	; (8007454 <checkAktifCalisma+0x1068>)
 8007376:	781b      	ldrb	r3, [r3, #0]
 8007378:	f083 0301 	eor.w	r3, r3, #1
 800737c:	b2db      	uxtb	r3, r3
 800737e:	2b00      	cmp	r3, #0
 8007380:	d006      	beq.n	8007390 <checkAktifCalisma+0xfa4>
 8007382:	4b35      	ldr	r3, [pc, #212]	; (8007458 <checkAktifCalisma+0x106c>)
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	f083 0301 	eor.w	r3, r3, #1
 800738a:	b2db      	uxtb	r3, r3
 800738c:	2b00      	cmp	r3, #0
 800738e:	d106      	bne.n	800739e <checkAktifCalisma+0xfb2>
 8007390:	4b38      	ldr	r3, [pc, #224]	; (8007474 <checkAktifCalisma+0x1088>)
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	f083 0301 	eor.w	r3, r3, #1
 8007398:	b2db      	uxtb	r3, r3
 800739a:	2b00      	cmp	r3, #0
 800739c:	d002      	beq.n	80073a4 <checkAktifCalisma+0xfb8>
			kapiTablaprudhome=0;
 800739e:	4b37      	ldr	r3, [pc, #220]	; (800747c <checkAktifCalisma+0x1090>)
 80073a0:	2200      	movs	r2, #0
 80073a2:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı buton kontrol

		if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80073a4:	4b31      	ldr	r3, [pc, #196]	; (800746c <checkAktifCalisma+0x1080>)
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d12b      	bne.n	8007404 <checkAktifCalisma+0x1018>
 80073ac:	4b30      	ldr	r3, [pc, #192]	; (8007470 <checkAktifCalisma+0x1084>)
 80073ae:	781b      	ldrb	r3, [r3, #0]
 80073b0:	2b02      	cmp	r3, #2
 80073b2:	d003      	beq.n	80073bc <checkAktifCalisma+0xfd0>
 80073b4:	4b2e      	ldr	r3, [pc, #184]	; (8007470 <checkAktifCalisma+0x1084>)
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	2b03      	cmp	r3, #3
 80073ba:	d123      	bne.n	8007404 <checkAktifCalisma+0x1018>

				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 80073bc:	4b25      	ldr	r3, [pc, #148]	; (8007454 <checkAktifCalisma+0x1068>)
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d103      	bne.n	80073cc <checkAktifCalisma+0xfe0>
 80073c4:	4b24      	ldr	r3, [pc, #144]	; (8007458 <checkAktifCalisma+0x106c>)
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d01b      	beq.n	8007404 <checkAktifCalisma+0x1018>
				&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 80073cc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80073d0:	481e      	ldr	r0, [pc, #120]	; (800744c <checkAktifCalisma+0x1060>)
 80073d2:	f002 fb6d 	bl	8009ab0 <HAL_GPIO_ReadPin>
 80073d6:	4603      	mov	r3, r0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d103      	bne.n	80073e4 <checkAktifCalisma+0xff8>
 80073dc:	4b1f      	ldr	r3, [pc, #124]	; (800745c <checkAktifCalisma+0x1070>)
 80073de:	781b      	ldrb	r3, [r3, #0]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d007      	beq.n	80073f4 <checkAktifCalisma+0x1008>
				||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 80073e4:	4b1f      	ldr	r3, [pc, #124]	; (8007464 <checkAktifCalisma+0x1078>)
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d103      	bne.n	80073f4 <checkAktifCalisma+0x1008>
 80073ec:	4b1e      	ldr	r3, [pc, #120]	; (8007468 <checkAktifCalisma+0x107c>)
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d007      	beq.n	8007404 <checkAktifCalisma+0x1018>
				&&(makineStop==1)) {
 80073f4:	4b1f      	ldr	r3, [pc, #124]	; (8007474 <checkAktifCalisma+0x1088>)
 80073f6:	781b      	ldrb	r3, [r3, #0]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d003      	beq.n	8007404 <checkAktifCalisma+0x1018>
			kapiTablabutonkontrol=1;
 80073fc:	4b23      	ldr	r3, [pc, #140]	; (800748c <checkAktifCalisma+0x10a0>)
 80073fe:	2201      	movs	r2, #1
 8007400:	701a      	strb	r2, [r3, #0]
 8007402:	e002      	b.n	800740a <checkAktifCalisma+0x101e>
		} else {
			kapiTablabutonkontrol=0;
 8007404:	4b21      	ldr	r3, [pc, #132]	; (800748c <checkAktifCalisma+0x10a0>)
 8007406:	2200      	movs	r2, #0
 8007408:	701a      	strb	r2, [r3, #0]
		}

		// tabla kapı pizzato

		if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 800740a:	4b18      	ldr	r3, [pc, #96]	; (800746c <checkAktifCalisma+0x1080>)
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	2b02      	cmp	r3, #2
 8007410:	d140      	bne.n	8007494 <checkAktifCalisma+0x10a8>
 8007412:	4b17      	ldr	r3, [pc, #92]	; (8007470 <checkAktifCalisma+0x1084>)
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	2b02      	cmp	r3, #2
 8007418:	d003      	beq.n	8007422 <checkAktifCalisma+0x1036>
 800741a:	4b15      	ldr	r3, [pc, #84]	; (8007470 <checkAktifCalisma+0x1084>)
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	2b03      	cmp	r3, #3
 8007420:	d138      	bne.n	8007494 <checkAktifCalisma+0x10a8>
				&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8007422:	4b0c      	ldr	r3, [pc, #48]	; (8007454 <checkAktifCalisma+0x1068>)
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	2b00      	cmp	r3, #0
 8007428:	d103      	bne.n	8007432 <checkAktifCalisma+0x1046>
 800742a:	4b0b      	ldr	r3, [pc, #44]	; (8007458 <checkAktifCalisma+0x106c>)
 800742c:	781b      	ldrb	r3, [r3, #0]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d030      	beq.n	8007494 <checkAktifCalisma+0x10a8>
				&&(makineStop==1)) {
 8007432:	4b10      	ldr	r3, [pc, #64]	; (8007474 <checkAktifCalisma+0x1088>)
 8007434:	781b      	ldrb	r3, [r3, #0]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d02c      	beq.n	8007494 <checkAktifCalisma+0x10a8>
			kapiTablapizzato=1;
 800743a:	4b15      	ldr	r3, [pc, #84]	; (8007490 <checkAktifCalisma+0x10a4>)
 800743c:	2201      	movs	r2, #1
 800743e:	701a      	strb	r2, [r3, #0]
 8007440:	e02b      	b.n	800749a <checkAktifCalisma+0x10ae>
 8007442:	bf00      	nop
 8007444:	40010800 	.word	0x40010800
 8007448:	20000c46 	.word	0x20000c46
 800744c:	40011000 	.word	0x40011000
 8007450:	20000c3f 	.word	0x20000c3f
 8007454:	20000c85 	.word	0x20000c85
 8007458:	20000c86 	.word	0x20000c86
 800745c:	20000c45 	.word	0x20000c45
 8007460:	40010c00 	.word	0x40010c00
 8007464:	20000c95 	.word	0x20000c95
 8007468:	20000c96 	.word	0x20000c96
 800746c:	20000c44 	.word	0x20000c44
 8007470:	20000c41 	.word	0x20000c41
 8007474:	20000c7b 	.word	0x20000c7b
 8007478:	20000c68 	.word	0x20000c68
 800747c:	20000c82 	.word	0x20000c82
 8007480:	20000bc4 	.word	0x20000bc4
 8007484:	20000bc8 	.word	0x20000bc8
 8007488:	20000c54 	.word	0x20000c54
 800748c:	20000c83 	.word	0x20000c83
 8007490:	20000c84 	.word	0x20000c84
		} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
			kapiTablapizzato=0;
 8007494:	4b89      	ldr	r3, [pc, #548]	; (80076bc <checkAktifCalisma+0x12d0>)
 8007496:	2200      	movs	r2, #0
 8007498:	701a      	strb	r2, [r3, #0]
		}

		// kapi Tabla çıkış

		if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 800749a:	4b89      	ldr	r3, [pc, #548]	; (80076c0 <checkAktifCalisma+0x12d4>)
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d107      	bne.n	80074b2 <checkAktifCalisma+0x10c6>
 80074a2:	4b88      	ldr	r3, [pc, #544]	; (80076c4 <checkAktifCalisma+0x12d8>)
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d103      	bne.n	80074b2 <checkAktifCalisma+0x10c6>
 80074aa:	4b84      	ldr	r3, [pc, #528]	; (80076bc <checkAktifCalisma+0x12d0>)
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d005      	beq.n	80074be <checkAktifCalisma+0x10d2>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 80074b2:	2201      	movs	r2, #1
 80074b4:	2120      	movs	r1, #32
 80074b6:	4884      	ldr	r0, [pc, #528]	; (80076c8 <checkAktifCalisma+0x12dc>)
 80074b8:	f002 fb11 	bl	8009ade <HAL_GPIO_WritePin>
 80074bc:	e004      	b.n	80074c8 <checkAktifCalisma+0x10dc>
		} else {
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80074be:	2200      	movs	r2, #0
 80074c0:	2120      	movs	r1, #32
 80074c2:	4881      	ldr	r0, [pc, #516]	; (80076c8 <checkAktifCalisma+0x12dc>)
 80074c4:	f002 fb0b 	bl	8009ade <HAL_GPIO_WritePin>
		}

		/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

		if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 80074c8:	4b80      	ldr	r3, [pc, #512]	; (80076cc <checkAktifCalisma+0x12e0>)
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d00e      	beq.n	80074ee <checkAktifCalisma+0x1102>
 80074d0:	2102      	movs	r1, #2
 80074d2:	487f      	ldr	r0, [pc, #508]	; (80076d0 <checkAktifCalisma+0x12e4>)
 80074d4:	f002 faec 	bl	8009ab0 <HAL_GPIO_ReadPin>
 80074d8:	4603      	mov	r3, r0
 80074da:	2b01      	cmp	r3, #1
 80074dc:	d107      	bne.n	80074ee <checkAktifCalisma+0x1102>
 80074de:	4b7d      	ldr	r3, [pc, #500]	; (80076d4 <checkAktifCalisma+0x12e8>)
 80074e0:	781b      	ldrb	r3, [r3, #0]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d103      	bne.n	80074ee <checkAktifCalisma+0x1102>
 80074e6:	4b7c      	ldr	r3, [pc, #496]	; (80076d8 <checkAktifCalisma+0x12ec>)
 80074e8:	781b      	ldrb	r3, [r3, #0]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d112      	bne.n	8007514 <checkAktifCalisma+0x1128>
				||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 80074ee:	4b7b      	ldr	r3, [pc, #492]	; (80076dc <checkAktifCalisma+0x12f0>)
 80074f0:	781b      	ldrb	r3, [r3, #0]
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d066      	beq.n	80075c4 <checkAktifCalisma+0x11d8>
 80074f6:	2104      	movs	r1, #4
 80074f8:	4875      	ldr	r0, [pc, #468]	; (80076d0 <checkAktifCalisma+0x12e4>)
 80074fa:	f002 fad9 	bl	8009ab0 <HAL_GPIO_ReadPin>
 80074fe:	4603      	mov	r3, r0
 8007500:	2b01      	cmp	r3, #1
 8007502:	d15f      	bne.n	80075c4 <checkAktifCalisma+0x11d8>
 8007504:	4b73      	ldr	r3, [pc, #460]	; (80076d4 <checkAktifCalisma+0x12e8>)
 8007506:	781b      	ldrb	r3, [r3, #0]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d05b      	beq.n	80075c4 <checkAktifCalisma+0x11d8>
 800750c:	4b72      	ldr	r3, [pc, #456]	; (80076d8 <checkAktifCalisma+0x12ec>)
 800750e:	781b      	ldrb	r3, [r3, #0]
 8007510:	2b00      	cmp	r3, #0
 8007512:	d057      	beq.n	80075c4 <checkAktifCalisma+0x11d8>
			calismaSayisi1=calismaSayisi1+1;
 8007514:	4b72      	ldr	r3, [pc, #456]	; (80076e0 <checkAktifCalisma+0x12f4>)
 8007516:	781b      	ldrb	r3, [r3, #0]
 8007518:	3301      	adds	r3, #1
 800751a:	b2da      	uxtb	r2, r3
 800751c:	4b70      	ldr	r3, [pc, #448]	; (80076e0 <checkAktifCalisma+0x12f4>)
 800751e:	701a      	strb	r2, [r3, #0]
			if(calismaSayisi1>9) {
 8007520:	4b6f      	ldr	r3, [pc, #444]	; (80076e0 <checkAktifCalisma+0x12f4>)
 8007522:	781b      	ldrb	r3, [r3, #0]
 8007524:	2b09      	cmp	r3, #9
 8007526:	d908      	bls.n	800753a <checkAktifCalisma+0x114e>
			  	calismaSayisi1=0;
 8007528:	4b6d      	ldr	r3, [pc, #436]	; (80076e0 <checkAktifCalisma+0x12f4>)
 800752a:	2200      	movs	r2, #0
 800752c:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10=calismaSayisi10+1;
 800752e:	4b6d      	ldr	r3, [pc, #436]	; (80076e4 <checkAktifCalisma+0x12f8>)
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	3301      	adds	r3, #1
 8007534:	b2da      	uxtb	r2, r3
 8007536:	4b6b      	ldr	r3, [pc, #428]	; (80076e4 <checkAktifCalisma+0x12f8>)
 8007538:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi10>9) {
 800753a:	4b6a      	ldr	r3, [pc, #424]	; (80076e4 <checkAktifCalisma+0x12f8>)
 800753c:	781b      	ldrb	r3, [r3, #0]
 800753e:	2b09      	cmp	r3, #9
 8007540:	d908      	bls.n	8007554 <checkAktifCalisma+0x1168>
			  	calismaSayisi10=0;
 8007542:	4b68      	ldr	r3, [pc, #416]	; (80076e4 <checkAktifCalisma+0x12f8>)
 8007544:	2200      	movs	r2, #0
 8007546:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi100=calismaSayisi100+1;
 8007548:	4b67      	ldr	r3, [pc, #412]	; (80076e8 <checkAktifCalisma+0x12fc>)
 800754a:	781b      	ldrb	r3, [r3, #0]
 800754c:	3301      	adds	r3, #1
 800754e:	b2da      	uxtb	r2, r3
 8007550:	4b65      	ldr	r3, [pc, #404]	; (80076e8 <checkAktifCalisma+0x12fc>)
 8007552:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi100>9) {
 8007554:	4b64      	ldr	r3, [pc, #400]	; (80076e8 <checkAktifCalisma+0x12fc>)
 8007556:	781b      	ldrb	r3, [r3, #0]
 8007558:	2b09      	cmp	r3, #9
 800755a:	d908      	bls.n	800756e <checkAktifCalisma+0x1182>
			  	calismaSayisi100=0;
 800755c:	4b62      	ldr	r3, [pc, #392]	; (80076e8 <checkAktifCalisma+0x12fc>)
 800755e:	2200      	movs	r2, #0
 8007560:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi1000=calismaSayisi1000+1;
 8007562:	4b62      	ldr	r3, [pc, #392]	; (80076ec <checkAktifCalisma+0x1300>)
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	3301      	adds	r3, #1
 8007568:	b2da      	uxtb	r2, r3
 800756a:	4b60      	ldr	r3, [pc, #384]	; (80076ec <checkAktifCalisma+0x1300>)
 800756c:	701a      	strb	r2, [r3, #0]
			}
			if(calismaSayisi1000>9) {
 800756e:	4b5f      	ldr	r3, [pc, #380]	; (80076ec <checkAktifCalisma+0x1300>)
 8007570:	781b      	ldrb	r3, [r3, #0]
 8007572:	2b09      	cmp	r3, #9
 8007574:	d908      	bls.n	8007588 <checkAktifCalisma+0x119c>
			  	calismaSayisi1000=0;
 8007576:	4b5d      	ldr	r3, [pc, #372]	; (80076ec <checkAktifCalisma+0x1300>)
 8007578:	2200      	movs	r2, #0
 800757a:	701a      	strb	r2, [r3, #0]
			  	calismaSayisi10000=calismaSayisi10000+1;
 800757c:	4b5c      	ldr	r3, [pc, #368]	; (80076f0 <checkAktifCalisma+0x1304>)
 800757e:	781b      	ldrb	r3, [r3, #0]
 8007580:	3301      	adds	r3, #1
 8007582:	b2da      	uxtb	r2, r3
 8007584:	4b5a      	ldr	r3, [pc, #360]	; (80076f0 <checkAktifCalisma+0x1304>)
 8007586:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8007588:	4b59      	ldr	r3, [pc, #356]	; (80076f0 <checkAktifCalisma+0x1304>)
 800758a:	781a      	ldrb	r2, [r3, #0]
 800758c:	4b59      	ldr	r3, [pc, #356]	; (80076f4 <checkAktifCalisma+0x1308>)
 800758e:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8007592:	4b56      	ldr	r3, [pc, #344]	; (80076ec <checkAktifCalisma+0x1300>)
 8007594:	781a      	ldrb	r2, [r3, #0]
 8007596:	4b57      	ldr	r3, [pc, #348]	; (80076f4 <checkAktifCalisma+0x1308>)
 8007598:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 800759a:	4b53      	ldr	r3, [pc, #332]	; (80076e8 <checkAktifCalisma+0x12fc>)
 800759c:	781a      	ldrb	r2, [r3, #0]
 800759e:	4b55      	ldr	r3, [pc, #340]	; (80076f4 <checkAktifCalisma+0x1308>)
 80075a0:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 80075a2:	4b50      	ldr	r3, [pc, #320]	; (80076e4 <checkAktifCalisma+0x12f8>)
 80075a4:	781a      	ldrb	r2, [r3, #0]
 80075a6:	4b53      	ldr	r3, [pc, #332]	; (80076f4 <checkAktifCalisma+0x1308>)
 80075a8:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 80075aa:	4b4d      	ldr	r3, [pc, #308]	; (80076e0 <checkAktifCalisma+0x12f4>)
 80075ac:	781a      	ldrb	r2, [r3, #0]
 80075ae:	4b51      	ldr	r3, [pc, #324]	; (80076f4 <checkAktifCalisma+0x1308>)
 80075b0:	771a      	strb	r2, [r3, #28]

			hafizaYaz=1;
 80075b2:	4b51      	ldr	r3, [pc, #324]	; (80076f8 <checkAktifCalisma+0x130c>)
 80075b4:	2201      	movs	r2, #1
 80075b6:	701a      	strb	r2, [r3, #0]

			CalismaSayisiYukari=0;
 80075b8:	4b44      	ldr	r3, [pc, #272]	; (80076cc <checkAktifCalisma+0x12e0>)
 80075ba:	2200      	movs	r2, #0
 80075bc:	701a      	strb	r2, [r3, #0]
			CalismaSayisiAsagi=0;
 80075be:	4b47      	ldr	r3, [pc, #284]	; (80076dc <checkAktifCalisma+0x12f0>)
 80075c0:	2200      	movs	r2, #0
 80075c2:	701a      	strb	r2, [r3, #0]
		}

		/******************************************* HATA BASLIYOR *******************************************/

		/************************************ ACİL STOP HATA BASLANGICI **************************************************/
		if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 80075c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80075c8:	484c      	ldr	r0, [pc, #304]	; (80076fc <checkAktifCalisma+0x1310>)
 80075ca:	f002 fa71 	bl	8009ab0 <HAL_GPIO_ReadPin>
 80075ce:	4603      	mov	r3, r0
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d016      	beq.n	8007602 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 80075d4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80075d8:	4848      	ldr	r0, [pc, #288]	; (80076fc <checkAktifCalisma+0x1310>)
 80075da:	f002 fa69 	bl	8009ab0 <HAL_GPIO_ReadPin>
 80075de:	4603      	mov	r3, r0
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d00e      	beq.n	8007602 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 80075e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80075e8:	4844      	ldr	r0, [pc, #272]	; (80076fc <checkAktifCalisma+0x1310>)
 80075ea:	f002 fa61 	bl	8009ab0 <HAL_GPIO_ReadPin>
 80075ee:	4603      	mov	r3, r0
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d006      	beq.n	8007602 <checkAktifCalisma+0x1216>
			  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 80075f4:	2140      	movs	r1, #64	; 0x40
 80075f6:	4836      	ldr	r0, [pc, #216]	; (80076d0 <checkAktifCalisma+0x12e4>)
 80075f8:	f002 fa5a 	bl	8009ab0 <HAL_GPIO_ReadPin>
 80075fc:	4603      	mov	r3, r0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d103      	bne.n	800760a <checkAktifCalisma+0x121e>
			startBasili=1;
 8007602:	4b3f      	ldr	r3, [pc, #252]	; (8007700 <checkAktifCalisma+0x1314>)
 8007604:	2201      	movs	r2, #1
 8007606:	701a      	strb	r2, [r3, #0]
 8007608:	e002      	b.n	8007610 <checkAktifCalisma+0x1224>
		} else {
			startBasili=0;
 800760a:	4b3d      	ldr	r3, [pc, #244]	; (8007700 <checkAktifCalisma+0x1314>)
 800760c:	2200      	movs	r2, #0
 800760e:	701a      	strb	r2, [r3, #0]
		}


		if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8007610:	4b3b      	ldr	r3, [pc, #236]	; (8007700 <checkAktifCalisma+0x1314>)
 8007612:	781b      	ldrb	r3, [r3, #0]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d014      	beq.n	8007642 <checkAktifCalisma+0x1256>
 8007618:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800761c:	4837      	ldr	r0, [pc, #220]	; (80076fc <checkAktifCalisma+0x1310>)
 800761e:	f002 fa47 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8007622:	4603      	mov	r3, r0
 8007624:	2b01      	cmp	r3, #1
 8007626:	d10c      	bne.n	8007642 <checkAktifCalisma+0x1256>
			hataVar=1;
 8007628:	4b36      	ldr	r3, [pc, #216]	; (8007704 <checkAktifCalisma+0x1318>)
 800762a:	2201      	movs	r2, #1
 800762c:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(1);
 800762e:	2001      	movs	r0, #1
 8007630:	f7fe f898 	bl	8005764 <hataKoduLcdGoster>
			hata2EEPROM(1);
 8007634:	2001      	movs	r0, #1
 8007636:	f7fe fc27 	bl	8005e88 <hata2EEPROM>
			acilstophatasi=1;
 800763a:	4b33      	ldr	r3, [pc, #204]	; (8007708 <checkAktifCalisma+0x131c>)
 800763c:	2201      	movs	r2, #1
 800763e:	701a      	strb	r2, [r3, #0]
 8007640:	e018      	b.n	8007674 <checkAktifCalisma+0x1288>
		} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8007642:	4b31      	ldr	r3, [pc, #196]	; (8007708 <checkAktifCalisma+0x131c>)
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d014      	beq.n	8007674 <checkAktifCalisma+0x1288>
 800764a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800764e:	482b      	ldr	r0, [pc, #172]	; (80076fc <checkAktifCalisma+0x1310>)
 8007650:	f002 fa2e 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8007654:	4603      	mov	r3, r0
 8007656:	2b00      	cmp	r3, #0
 8007658:	d10c      	bne.n	8007674 <checkAktifCalisma+0x1288>
 800765a:	4b29      	ldr	r3, [pc, #164]	; (8007700 <checkAktifCalisma+0x1314>)
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	f083 0301 	eor.w	r3, r3, #1
 8007662:	b2db      	uxtb	r3, r3
 8007664:	2b00      	cmp	r3, #0
 8007666:	d005      	beq.n	8007674 <checkAktifCalisma+0x1288>
			acilstophatasi=0;
 8007668:	4b27      	ldr	r3, [pc, #156]	; (8007708 <checkAktifCalisma+0x131c>)
 800766a:	2200      	movs	r2, #0
 800766c:	701a      	strb	r2, [r3, #0]
			lcdUpdate(1);
 800766e:	2001      	movs	r0, #1
 8007670:	f7fe f824 	bl	80056bc <lcdUpdate>
		}

		/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

		if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 8007674:	4b25      	ldr	r3, [pc, #148]	; (800770c <checkAktifCalisma+0x1320>)
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	f083 0301 	eor.w	r3, r3, #1
 800767c:	b2db      	uxtb	r3, r3
 800767e:	2b00      	cmp	r3, #0
 8007680:	d04c      	beq.n	800771c <checkAktifCalisma+0x1330>
 8007682:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8007686:	481d      	ldr	r0, [pc, #116]	; (80076fc <checkAktifCalisma+0x1310>)
 8007688:	f002 fa12 	bl	8009ab0 <HAL_GPIO_ReadPin>
 800768c:	4603      	mov	r3, r0
 800768e:	2b00      	cmp	r3, #0
 8007690:	d003      	beq.n	800769a <checkAktifCalisma+0x12ae>
 8007692:	4b1f      	ldr	r3, [pc, #124]	; (8007710 <checkAktifCalisma+0x1324>)
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d040      	beq.n	800771c <checkAktifCalisma+0x1330>
 800769a:	4b1e      	ldr	r3, [pc, #120]	; (8007714 <checkAktifCalisma+0x1328>)
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d13c      	bne.n	800771c <checkAktifCalisma+0x1330>
			hataVar=1;
 80076a2:	4b18      	ldr	r3, [pc, #96]	; (8007704 <checkAktifCalisma+0x1318>)
 80076a4:	2201      	movs	r2, #1
 80076a6:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(2);
 80076a8:	2002      	movs	r0, #2
 80076aa:	f7fe f85b 	bl	8005764 <hataKoduLcdGoster>
			hata2EEPROM(2);
 80076ae:	2002      	movs	r0, #2
 80076b0:	f7fe fbea 	bl	8005e88 <hata2EEPROM>
			emniyetCercevesihatasi=1;
 80076b4:	4b18      	ldr	r3, [pc, #96]	; (8007718 <checkAktifCalisma+0x132c>)
 80076b6:	2201      	movs	r2, #1
 80076b8:	701a      	strb	r2, [r3, #0]
 80076ba:	e047      	b.n	800774c <checkAktifCalisma+0x1360>
 80076bc:	20000c84 	.word	0x20000c84
 80076c0:	20000c83 	.word	0x20000c83
 80076c4:	20000c82 	.word	0x20000c82
 80076c8:	40010800 	.word	0x40010800
 80076cc:	20000c78 	.word	0x20000c78
 80076d0:	40011000 	.word	0x40011000
 80076d4:	20000c3f 	.word	0x20000c3f
 80076d8:	20000c7b 	.word	0x20000c7b
 80076dc:	20000c79 	.word	0x20000c79
 80076e0:	20000c36 	.word	0x20000c36
 80076e4:	20000c37 	.word	0x20000c37
 80076e8:	200009b1 	.word	0x200009b1
 80076ec:	200009b2 	.word	0x200009b2
 80076f0:	20000c38 	.word	0x20000c38
 80076f4:	20000b28 	.word	0x20000b28
 80076f8:	20000c65 	.word	0x20000c65
 80076fc:	40010c00 	.word	0x40010c00
 8007700:	20000c87 	.word	0x20000c87
 8007704:	20000c8e 	.word	0x20000c8e
 8007708:	20000c89 	.word	0x20000c89
 800770c:	20000c90 	.word	0x20000c90
 8007710:	20000c9a 	.word	0x20000c9a
 8007714:	20000c3d 	.word	0x20000c3d
 8007718:	20000c8a 	.word	0x20000c8a
		} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 800771c:	4b97      	ldr	r3, [pc, #604]	; (800797c <checkAktifCalisma+0x1590>)
 800771e:	781b      	ldrb	r3, [r3, #0]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d013      	beq.n	800774c <checkAktifCalisma+0x1360>
 8007724:	4b96      	ldr	r3, [pc, #600]	; (8007980 <checkAktifCalisma+0x1594>)
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d00f      	beq.n	800774c <checkAktifCalisma+0x1360>
 800772c:	4b95      	ldr	r3, [pc, #596]	; (8007984 <checkAktifCalisma+0x1598>)
 800772e:	781b      	ldrb	r3, [r3, #0]
 8007730:	f083 0301 	eor.w	r3, r3, #1
 8007734:	b2db      	uxtb	r3, r3
 8007736:	2b00      	cmp	r3, #0
 8007738:	d008      	beq.n	800774c <checkAktifCalisma+0x1360>
			emniyetCercevesihatasi=0;
 800773a:	4b90      	ldr	r3, [pc, #576]	; (800797c <checkAktifCalisma+0x1590>)
 800773c:	2200      	movs	r2, #0
 800773e:	701a      	strb	r2, [r3, #0]
			cercevesasagicalisma=0;
 8007740:	4b91      	ldr	r3, [pc, #580]	; (8007988 <checkAktifCalisma+0x159c>)
 8007742:	2200      	movs	r2, #0
 8007744:	701a      	strb	r2, [r3, #0]
			lcdUpdate(2);
 8007746:	2002      	movs	r0, #2
 8007748:	f7fd ffb8 	bl	80056bc <lcdUpdate>
		}

		/************************************ BASINC ASIRI YUK HATASI **************************************************/

		if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 800774c:	4b8f      	ldr	r3, [pc, #572]	; (800798c <checkAktifCalisma+0x15a0>)
 800774e:	781b      	ldrb	r3, [r3, #0]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d11c      	bne.n	800778e <checkAktifCalisma+0x13a2>
 8007754:	4b8e      	ldr	r3, [pc, #568]	; (8007990 <checkAktifCalisma+0x15a4>)
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	2b01      	cmp	r3, #1
 800775a:	d118      	bne.n	800778e <checkAktifCalisma+0x13a2>
 800775c:	4b8d      	ldr	r3, [pc, #564]	; (8007994 <checkAktifCalisma+0x15a8>)
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d014      	beq.n	800778e <checkAktifCalisma+0x13a2>
 8007764:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007768:	488b      	ldr	r0, [pc, #556]	; (8007998 <checkAktifCalisma+0x15ac>)
 800776a:	f002 f9a1 	bl	8009ab0 <HAL_GPIO_ReadPin>
 800776e:	4603      	mov	r3, r0
 8007770:	2b01      	cmp	r3, #1
 8007772:	d10c      	bne.n	800778e <checkAktifCalisma+0x13a2>
			hataVar=1;
 8007774:	4b89      	ldr	r3, [pc, #548]	; (800799c <checkAktifCalisma+0x15b0>)
 8007776:	2201      	movs	r2, #1
 8007778:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(3);
 800777a:	2003      	movs	r0, #3
 800777c:	f7fd fff2 	bl	8005764 <hataKoduLcdGoster>
			hata2EEPROM(3);
 8007780:	2003      	movs	r0, #3
 8007782:	f7fe fb81 	bl	8005e88 <hata2EEPROM>
			basinchatasi=1;
 8007786:	4b86      	ldr	r3, [pc, #536]	; (80079a0 <checkAktifCalisma+0x15b4>)
 8007788:	2201      	movs	r2, #1
 800778a:	701a      	strb	r2, [r3, #0]
 800778c:	e015      	b.n	80077ba <checkAktifCalisma+0x13ce>
		} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 800778e:	4b84      	ldr	r3, [pc, #528]	; (80079a0 <checkAktifCalisma+0x15b4>)
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	2b00      	cmp	r3, #0
 8007794:	d011      	beq.n	80077ba <checkAktifCalisma+0x13ce>
 8007796:	4b7d      	ldr	r3, [pc, #500]	; (800798c <checkAktifCalisma+0x15a0>)
 8007798:	781b      	ldrb	r3, [r3, #0]
 800779a:	2b01      	cmp	r3, #1
 800779c:	d10d      	bne.n	80077ba <checkAktifCalisma+0x13ce>
 800779e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80077a2:	4880      	ldr	r0, [pc, #512]	; (80079a4 <checkAktifCalisma+0x15b8>)
 80077a4:	f002 f984 	bl	8009ab0 <HAL_GPIO_ReadPin>
 80077a8:	4603      	mov	r3, r0
 80077aa:	2b01      	cmp	r3, #1
 80077ac:	d105      	bne.n	80077ba <checkAktifCalisma+0x13ce>
			basinchatasi=0;
 80077ae:	4b7c      	ldr	r3, [pc, #496]	; (80079a0 <checkAktifCalisma+0x15b4>)
 80077b0:	2200      	movs	r2, #0
 80077b2:	701a      	strb	r2, [r3, #0]
			lcdUpdate(3);
 80077b4:	2003      	movs	r0, #3
 80077b6:	f7fd ff81 	bl	80056bc <lcdUpdate>
		}

		/************************************ KAPI SİVİÇ HATASI **************************************************/
		if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 80077ba:	4b7b      	ldr	r3, [pc, #492]	; (80079a8 <checkAktifCalisma+0x15bc>)
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d103      	bne.n	80077ca <checkAktifCalisma+0x13de>
 80077c2:	4b7a      	ldr	r3, [pc, #488]	; (80079ac <checkAktifCalisma+0x15c0>)
 80077c4:	781b      	ldrb	r3, [r3, #0]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d01c      	beq.n	8007804 <checkAktifCalisma+0x1418>
 80077ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80077ce:	4878      	ldr	r0, [pc, #480]	; (80079b0 <checkAktifCalisma+0x15c4>)
 80077d0:	f002 f96e 	bl	8009ab0 <HAL_GPIO_ReadPin>
 80077d4:	4603      	mov	r3, r0
 80077d6:	2b01      	cmp	r3, #1
 80077d8:	d114      	bne.n	8007804 <checkAktifCalisma+0x1418>
 80077da:	4b76      	ldr	r3, [pc, #472]	; (80079b4 <checkAktifCalisma+0x15c8>)
 80077dc:	781b      	ldrb	r3, [r3, #0]
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d003      	beq.n	80077ea <checkAktifCalisma+0x13fe>
 80077e2:	4b74      	ldr	r3, [pc, #464]	; (80079b4 <checkAktifCalisma+0x15c8>)
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	2b03      	cmp	r3, #3
 80077e8:	d10c      	bne.n	8007804 <checkAktifCalisma+0x1418>
			hataVar=1;
 80077ea:	4b6c      	ldr	r3, [pc, #432]	; (800799c <checkAktifCalisma+0x15b0>)
 80077ec:	2201      	movs	r2, #1
 80077ee:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(4);
 80077f0:	2004      	movs	r0, #4
 80077f2:	f7fd ffb7 	bl	8005764 <hataKoduLcdGoster>
			hata2EEPROM(4);
 80077f6:	2004      	movs	r0, #4
 80077f8:	f7fe fb46 	bl	8005e88 <hata2EEPROM>
			katkapisivicihatasi=1;
 80077fc:	4b6e      	ldr	r3, [pc, #440]	; (80079b8 <checkAktifCalisma+0x15cc>)
 80077fe:	2201      	movs	r2, #1
 8007800:	701a      	strb	r2, [r3, #0]
 8007802:	e01f      	b.n	8007844 <checkAktifCalisma+0x1458>
		} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8007804:	4b6c      	ldr	r3, [pc, #432]	; (80079b8 <checkAktifCalisma+0x15cc>)
 8007806:	781b      	ldrb	r3, [r3, #0]
 8007808:	2b00      	cmp	r3, #0
 800780a:	d01b      	beq.n	8007844 <checkAktifCalisma+0x1458>
 800780c:	4b6b      	ldr	r3, [pc, #428]	; (80079bc <checkAktifCalisma+0x15d0>)
 800780e:	781b      	ldrb	r3, [r3, #0]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d017      	beq.n	8007844 <checkAktifCalisma+0x1458>
 8007814:	4b64      	ldr	r3, [pc, #400]	; (80079a8 <checkAktifCalisma+0x15bc>)
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	f083 0301 	eor.w	r3, r3, #1
 800781c:	b2db      	uxtb	r3, r3
 800781e:	2b00      	cmp	r3, #0
 8007820:	d010      	beq.n	8007844 <checkAktifCalisma+0x1458>
 8007822:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007826:	4862      	ldr	r0, [pc, #392]	; (80079b0 <checkAktifCalisma+0x15c4>)
 8007828:	f002 f942 	bl	8009ab0 <HAL_GPIO_ReadPin>
 800782c:	4603      	mov	r3, r0
 800782e:	2b00      	cmp	r3, #0
 8007830:	d108      	bne.n	8007844 <checkAktifCalisma+0x1458>
			katkapisivicihatasi=0;
 8007832:	4b61      	ldr	r3, [pc, #388]	; (80079b8 <checkAktifCalisma+0x15cc>)
 8007834:	2200      	movs	r2, #0
 8007836:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=0;
 8007838:	4b5c      	ldr	r3, [pc, #368]	; (80079ac <checkAktifCalisma+0x15c0>)
 800783a:	2200      	movs	r2, #0
 800783c:	701a      	strb	r2, [r3, #0]
			lcdUpdate(4);
 800783e:	2004      	movs	r0, #4
 8007840:	f7fd ff3c 	bl	80056bc <lcdUpdate>
		}

		/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

		if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8007844:	4b58      	ldr	r3, [pc, #352]	; (80079a8 <checkAktifCalisma+0x15bc>)
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d103      	bne.n	8007854 <checkAktifCalisma+0x1468>
 800784c:	4b5c      	ldr	r3, [pc, #368]	; (80079c0 <checkAktifCalisma+0x15d4>)
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d01c      	beq.n	800788e <checkAktifCalisma+0x14a2>
 8007854:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007858:	4855      	ldr	r0, [pc, #340]	; (80079b0 <checkAktifCalisma+0x15c4>)
 800785a:	f002 f929 	bl	8009ab0 <HAL_GPIO_ReadPin>
 800785e:	4603      	mov	r3, r0
 8007860:	2b01      	cmp	r3, #1
 8007862:	d114      	bne.n	800788e <checkAktifCalisma+0x14a2>
 8007864:	4b53      	ldr	r3, [pc, #332]	; (80079b4 <checkAktifCalisma+0x15c8>)
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	2b01      	cmp	r3, #1
 800786a:	d003      	beq.n	8007874 <checkAktifCalisma+0x1488>
 800786c:	4b51      	ldr	r3, [pc, #324]	; (80079b4 <checkAktifCalisma+0x15c8>)
 800786e:	781b      	ldrb	r3, [r3, #0]
 8007870:	2b03      	cmp	r3, #3
 8007872:	d10c      	bne.n	800788e <checkAktifCalisma+0x14a2>
			hataVar=1;
 8007874:	4b49      	ldr	r3, [pc, #292]	; (800799c <checkAktifCalisma+0x15b0>)
 8007876:	2201      	movs	r2, #1
 8007878:	701a      	strb	r2, [r3, #0]
			hataKoduLcdGoster(5);
 800787a:	2005      	movs	r0, #5
 800787c:	f7fd ff72 	bl	8005764 <hataKoduLcdGoster>
			hata2EEPROM(5);
 8007880:	2005      	movs	r0, #5
 8007882:	f7fe fb01 	bl	8005e88 <hata2EEPROM>
			tablakapisivicihatasi=1;
 8007886:	4b4f      	ldr	r3, [pc, #316]	; (80079c4 <checkAktifCalisma+0x15d8>)
 8007888:	2201      	movs	r2, #1
 800788a:	701a      	strb	r2, [r3, #0]
 800788c:	e023      	b.n	80078d6 <checkAktifCalisma+0x14ea>
		} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 800788e:	4b4d      	ldr	r3, [pc, #308]	; (80079c4 <checkAktifCalisma+0x15d8>)
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d01f      	beq.n	80078d6 <checkAktifCalisma+0x14ea>
 8007896:	4b49      	ldr	r3, [pc, #292]	; (80079bc <checkAktifCalisma+0x15d0>)
 8007898:	781b      	ldrb	r3, [r3, #0]
 800789a:	2b00      	cmp	r3, #0
 800789c:	d01b      	beq.n	80078d6 <checkAktifCalisma+0x14ea>
 800789e:	4b42      	ldr	r3, [pc, #264]	; (80079a8 <checkAktifCalisma+0x15bc>)
 80078a0:	781b      	ldrb	r3, [r3, #0]
 80078a2:	f083 0301 	eor.w	r3, r3, #1
 80078a6:	b2db      	uxtb	r3, r3
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d014      	beq.n	80078d6 <checkAktifCalisma+0x14ea>
 80078ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80078b0:	483f      	ldr	r0, [pc, #252]	; (80079b0 <checkAktifCalisma+0x15c4>)
 80078b2:	f002 f8fd 	bl	8009ab0 <HAL_GPIO_ReadPin>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d10c      	bne.n	80078d6 <checkAktifCalisma+0x14ea>
 80078bc:	4b3f      	ldr	r3, [pc, #252]	; (80079bc <checkAktifCalisma+0x15d0>)
 80078be:	781b      	ldrb	r3, [r3, #0]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d008      	beq.n	80078d6 <checkAktifCalisma+0x14ea>
			tablakapisivicihatasi=0;
 80078c4:	4b3f      	ldr	r3, [pc, #252]	; (80079c4 <checkAktifCalisma+0x15d8>)
 80078c6:	2200      	movs	r2, #0
 80078c8:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=0;
 80078ca:	4b3d      	ldr	r3, [pc, #244]	; (80079c0 <checkAktifCalisma+0x15d4>)
 80078cc:	2200      	movs	r2, #0
 80078ce:	701a      	strb	r2, [r3, #0]
			lcdUpdate(5);
 80078d0:	2005      	movs	r0, #5
 80078d2:	f7fd fef3 	bl	80056bc <lcdUpdate>
		}

		/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

		if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 80078d6:	4b2f      	ldr	r3, [pc, #188]	; (8007994 <checkAktifCalisma+0x15a8>)
 80078d8:	781b      	ldrb	r3, [r3, #0]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d107      	bne.n	80078ee <checkAktifCalisma+0x1502>
 80078de:	4b29      	ldr	r3, [pc, #164]	; (8007984 <checkAktifCalisma+0x1598>)
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d103      	bne.n	80078ee <checkAktifCalisma+0x1502>
 80078e6:	4b38      	ldr	r3, [pc, #224]	; (80079c8 <checkAktifCalisma+0x15dc>)
 80078e8:	781b      	ldrb	r3, [r3, #0]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d014      	beq.n	8007918 <checkAktifCalisma+0x152c>
		    if(millis-timer4>=makineCalismaTmr) {
 80078ee:	4b37      	ldr	r3, [pc, #220]	; (80079cc <checkAktifCalisma+0x15e0>)
 80078f0:	681a      	ldr	r2, [r3, #0]
 80078f2:	4b37      	ldr	r3, [pc, #220]	; (80079d0 <checkAktifCalisma+0x15e4>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	1ad3      	subs	r3, r2, r3
 80078f8:	4a36      	ldr	r2, [pc, #216]	; (80079d4 <checkAktifCalisma+0x15e8>)
 80078fa:	7812      	ldrb	r2, [r2, #0]
 80078fc:	4293      	cmp	r3, r2
 80078fe:	d30b      	bcc.n	8007918 <checkAktifCalisma+0x152c>
			  	hataVar=1;
 8007900:	4b26      	ldr	r3, [pc, #152]	; (800799c <checkAktifCalisma+0x15b0>)
 8007902:	2201      	movs	r2, #1
 8007904:	701a      	strb	r2, [r3, #0]
			  	hataKoduLcdGoster(6);
 8007906:	2006      	movs	r0, #6
 8007908:	f7fd ff2c 	bl	8005764 <hataKoduLcdGoster>
			  	hata2EEPROM(6);
 800790c:	2006      	movs	r0, #6
 800790e:	f7fe fabb 	bl	8005e88 <hata2EEPROM>
			  	maksimumcalismahatasi=1;
 8007912:	4b31      	ldr	r3, [pc, #196]	; (80079d8 <checkAktifCalisma+0x15ec>)
 8007914:	2201      	movs	r2, #1
 8007916:	701a      	strb	r2, [r3, #0]
			  }
		}

		if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 8007918:	4b2f      	ldr	r3, [pc, #188]	; (80079d8 <checkAktifCalisma+0x15ec>)
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d013      	beq.n	8007948 <checkAktifCalisma+0x155c>
 8007920:	2108      	movs	r1, #8
 8007922:	4823      	ldr	r0, [pc, #140]	; (80079b0 <checkAktifCalisma+0x15c4>)
 8007924:	f002 f8c4 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8007928:	4603      	mov	r3, r0
 800792a:	2b00      	cmp	r3, #0
 800792c:	d00c      	beq.n	8007948 <checkAktifCalisma+0x155c>
 800792e:	4b1e      	ldr	r3, [pc, #120]	; (80079a8 <checkAktifCalisma+0x15bc>)
 8007930:	781b      	ldrb	r3, [r3, #0]
 8007932:	f083 0301 	eor.w	r3, r3, #1
 8007936:	b2db      	uxtb	r3, r3
 8007938:	2b00      	cmp	r3, #0
 800793a:	d005      	beq.n	8007948 <checkAktifCalisma+0x155c>
			maksimumcalismahatasi=0;
 800793c:	4b26      	ldr	r3, [pc, #152]	; (80079d8 <checkAktifCalisma+0x15ec>)
 800793e:	2200      	movs	r2, #0
 8007940:	701a      	strb	r2, [r3, #0]
			lcdUpdate(6);
 8007942:	2006      	movs	r0, #6
 8007944:	f7fd feba 	bl	80056bc <lcdUpdate>
		}

		if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 8007948:	4b24      	ldr	r3, [pc, #144]	; (80079dc <checkAktifCalisma+0x15f0>)
 800794a:	781b      	ldrb	r3, [r3, #0]
 800794c:	2b00      	cmp	r3, #0
 800794e:	d10b      	bne.n	8007968 <checkAktifCalisma+0x157c>
 8007950:	4b0c      	ldr	r3, [pc, #48]	; (8007984 <checkAktifCalisma+0x1598>)
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	2b00      	cmp	r3, #0
 8007956:	d107      	bne.n	8007968 <checkAktifCalisma+0x157c>
 8007958:	4b21      	ldr	r3, [pc, #132]	; (80079e0 <checkAktifCalisma+0x15f4>)
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d103      	bne.n	8007968 <checkAktifCalisma+0x157c>
 8007960:	4b19      	ldr	r3, [pc, #100]	; (80079c8 <checkAktifCalisma+0x15dc>)
 8007962:	781b      	ldrb	r3, [r3, #0]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d03f      	beq.n	80079e8 <checkAktifCalisma+0x15fc>
			makineCalisiyor=0;
 8007968:	4b1e      	ldr	r3, [pc, #120]	; (80079e4 <checkAktifCalisma+0x15f8>)
 800796a:	2200      	movs	r2, #0
 800796c:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyorkapi=1;
 800796e:	4b0f      	ldr	r3, [pc, #60]	; (80079ac <checkAktifCalisma+0x15c0>)
 8007970:	2201      	movs	r2, #1
 8007972:	701a      	strb	r2, [r3, #0]
			HataMakineCalisiyortabla=1;
 8007974:	4b12      	ldr	r3, [pc, #72]	; (80079c0 <checkAktifCalisma+0x15d4>)
 8007976:	2201      	movs	r2, #1
 8007978:	701a      	strb	r2, [r3, #0]
 800797a:	e03c      	b.n	80079f6 <checkAktifCalisma+0x160a>
 800797c:	20000c8a 	.word	0x20000c8a
 8007980:	20000c90 	.word	0x20000c90
 8007984:	20000c71 	.word	0x20000c71
 8007988:	20000c9a 	.word	0x20000c9a
 800798c:	20000c3c 	.word	0x20000c3c
 8007990:	20000c40 	.word	0x20000c40
 8007994:	20000c8d 	.word	0x20000c8d
 8007998:	40011000 	.word	0x40011000
 800799c:	20000c8e 	.word	0x20000c8e
 80079a0:	20000c97 	.word	0x20000c97
 80079a4:	40010c00 	.word	0x40010c00
 80079a8:	20000c87 	.word	0x20000c87
 80079ac:	20000c9b 	.word	0x20000c9b
 80079b0:	40010800 	.word	0x40010800
 80079b4:	20000c41 	.word	0x20000c41
 80079b8:	20000c98 	.word	0x20000c98
 80079bc:	20000c7b 	.word	0x20000c7b
 80079c0:	20000c9c 	.word	0x20000c9c
 80079c4:	20000c99 	.word	0x20000c99
 80079c8:	20000c70 	.word	0x20000c70
 80079cc:	20000bc4 	.word	0x20000bc4
 80079d0:	20000bd8 	.word	0x20000bd8
 80079d4:	20000c51 	.word	0x20000c51
 80079d8:	20000c88 	.word	0x20000c88
 80079dc:	20000c6e 	.word	0x20000c6e
 80079e0:	20000c6f 	.word	0x20000c6f
 80079e4:	20000c8f 	.word	0x20000c8f
		} else {
			makineCalisiyor=1;
 80079e8:	4b1e      	ldr	r3, [pc, #120]	; (8007a64 <checkAktifCalisma+0x1678>)
 80079ea:	2201      	movs	r2, #1
 80079ec:	701a      	strb	r2, [r3, #0]
			timer4=millis;
 80079ee:	4b1e      	ldr	r3, [pc, #120]	; (8007a68 <checkAktifCalisma+0x167c>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4a1e      	ldr	r2, [pc, #120]	; (8007a6c <checkAktifCalisma+0x1680>)
 80079f4:	6013      	str	r3, [r2, #0]
		}

		/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
		if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 80079f6:	4b1e      	ldr	r3, [pc, #120]	; (8007a70 <checkAktifCalisma+0x1684>)
 80079f8:	781b      	ldrb	r3, [r3, #0]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d02f      	beq.n	8007a5e <checkAktifCalisma+0x1672>
 80079fe:	4b1d      	ldr	r3, [pc, #116]	; (8007a74 <checkAktifCalisma+0x1688>)
 8007a00:	781b      	ldrb	r3, [r3, #0]
 8007a02:	f083 0301 	eor.w	r3, r3, #1
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d028      	beq.n	8007a5e <checkAktifCalisma+0x1672>
 8007a0c:	4b1a      	ldr	r3, [pc, #104]	; (8007a78 <checkAktifCalisma+0x168c>)
 8007a0e:	781b      	ldrb	r3, [r3, #0]
 8007a10:	f083 0301 	eor.w	r3, r3, #1
 8007a14:	b2db      	uxtb	r3, r3
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d021      	beq.n	8007a5e <checkAktifCalisma+0x1672>
 8007a1a:	4b18      	ldr	r3, [pc, #96]	; (8007a7c <checkAktifCalisma+0x1690>)
 8007a1c:	781b      	ldrb	r3, [r3, #0]
 8007a1e:	f083 0301 	eor.w	r3, r3, #1
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d01a      	beq.n	8007a5e <checkAktifCalisma+0x1672>
				&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8007a28:	4b15      	ldr	r3, [pc, #84]	; (8007a80 <checkAktifCalisma+0x1694>)
 8007a2a:	781b      	ldrb	r3, [r3, #0]
 8007a2c:	f083 0301 	eor.w	r3, r3, #1
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d013      	beq.n	8007a5e <checkAktifCalisma+0x1672>
 8007a36:	4b13      	ldr	r3, [pc, #76]	; (8007a84 <checkAktifCalisma+0x1698>)
 8007a38:	781b      	ldrb	r3, [r3, #0]
 8007a3a:	f083 0301 	eor.w	r3, r3, #1
 8007a3e:	b2db      	uxtb	r3, r3
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d00c      	beq.n	8007a5e <checkAktifCalisma+0x1672>
 8007a44:	4b10      	ldr	r3, [pc, #64]	; (8007a88 <checkAktifCalisma+0x169c>)
 8007a46:	781b      	ldrb	r3, [r3, #0]
 8007a48:	f083 0301 	eor.w	r3, r3, #1
 8007a4c:	b2db      	uxtb	r3, r3
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d005      	beq.n	8007a5e <checkAktifCalisma+0x1672>
			hataVar=0;
 8007a52:	4b07      	ldr	r3, [pc, #28]	; (8007a70 <checkAktifCalisma+0x1684>)
 8007a54:	2200      	movs	r2, #0
 8007a56:	701a      	strb	r2, [r3, #0]
			lcdUpdate(7);
 8007a58:	2007      	movs	r0, #7
 8007a5a:	f7fd fe2f 	bl	80056bc <lcdUpdate>
		}


		/************************************ HATA LCD GÖSTERME ************************************************************/
	} 		// aktif calisma son parantez.
}
 8007a5e:	bf00      	nop
 8007a60:	bd80      	pop	{r7, pc}
 8007a62:	bf00      	nop
 8007a64:	20000c8f 	.word	0x20000c8f
 8007a68:	20000bc4 	.word	0x20000bc4
 8007a6c:	20000bd8 	.word	0x20000bd8
 8007a70:	20000c8e 	.word	0x20000c8e
 8007a74:	20000c89 	.word	0x20000c89
 8007a78:	20000c8a 	.word	0x20000c8a
 8007a7c:	20000c97 	.word	0x20000c97
 8007a80:	20000c98 	.word	0x20000c98
 8007a84:	20000c99 	.word	0x20000c99
 8007a88:	20000c88 	.word	0x20000c88

08007a8c <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8007a90:	4b8b      	ldr	r3, [pc, #556]	; (8007cc0 <checkDemoModCalisma+0x234>)
 8007a92:	781b      	ldrb	r3, [r3, #0]
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	f040 8229 	bne.w	8007eec <checkDemoModCalisma+0x460>
 8007a9a:	4b8a      	ldr	r3, [pc, #552]	; (8007cc4 <checkDemoModCalisma+0x238>)
 8007a9c:	781b      	ldrb	r3, [r3, #0]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	f000 8224 	beq.w	8007eec <checkDemoModCalisma+0x460>
 8007aa4:	4b88      	ldr	r3, [pc, #544]	; (8007cc8 <checkDemoModCalisma+0x23c>)
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	f040 821f 	bne.w	8007eec <checkDemoModCalisma+0x460>

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8007aae:	2102      	movs	r1, #2
 8007ab0:	4886      	ldr	r0, [pc, #536]	; (8007ccc <checkDemoModCalisma+0x240>)
 8007ab2:	f001 fffd 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d11d      	bne.n	8007af8 <checkDemoModCalisma+0x6c>
				&& (demoAsagiCalis==0)
 8007abc:	4b84      	ldr	r3, [pc, #528]	; (8007cd0 <checkDemoModCalisma+0x244>)
 8007abe:	781b      	ldrb	r3, [r3, #0]
 8007ac0:	f083 0301 	eor.w	r3, r3, #1
 8007ac4:	b2db      	uxtb	r3, r3
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d016      	beq.n	8007af8 <checkDemoModCalisma+0x6c>
				&& (demoDevYukari==0)
 8007aca:	4b82      	ldr	r3, [pc, #520]	; (8007cd4 <checkDemoModCalisma+0x248>)
 8007acc:	781b      	ldrb	r3, [r3, #0]
 8007ace:	f083 0301 	eor.w	r3, r3, #1
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d00f      	beq.n	8007af8 <checkDemoModCalisma+0x6c>
				&& (demoDevAsagi==0)) {
 8007ad8:	4b7f      	ldr	r3, [pc, #508]	; (8007cd8 <checkDemoModCalisma+0x24c>)
 8007ada:	781b      	ldrb	r3, [r3, #0]
 8007adc:	f083 0301 	eor.w	r3, r3, #1
 8007ae0:	b2db      	uxtb	r3, r3
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d008      	beq.n	8007af8 <checkDemoModCalisma+0x6c>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	2104      	movs	r1, #4
 8007aea:	487c      	ldr	r0, [pc, #496]	; (8007cdc <checkDemoModCalisma+0x250>)
 8007aec:	f001 fff7 	bl	8009ade <HAL_GPIO_WritePin>
			demoYukariCalis=1;
 8007af0:	4b7b      	ldr	r3, [pc, #492]	; (8007ce0 <checkDemoModCalisma+0x254>)
 8007af2:	2201      	movs	r2, #1
 8007af4:	701a      	strb	r2, [r3, #0]
 8007af6:	e00e      	b.n	8007b16 <checkDemoModCalisma+0x8a>
		} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8007af8:	2102      	movs	r1, #2
 8007afa:	4874      	ldr	r0, [pc, #464]	; (8007ccc <checkDemoModCalisma+0x240>)
 8007afc:	f001 ffd8 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8007b00:	4603      	mov	r3, r0
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d107      	bne.n	8007b16 <checkDemoModCalisma+0x8a>

			HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007b06:	2200      	movs	r2, #0
 8007b08:	2104      	movs	r1, #4
 8007b0a:	4874      	ldr	r0, [pc, #464]	; (8007cdc <checkDemoModCalisma+0x250>)
 8007b0c:	f001 ffe7 	bl	8009ade <HAL_GPIO_WritePin>
			demoYukariCalis=0;
 8007b10:	4b73      	ldr	r3, [pc, #460]	; (8007ce0 <checkDemoModCalisma+0x254>)
 8007b12:	2200      	movs	r2, #0
 8007b14:	701a      	strb	r2, [r3, #0]
		}

		// DEMO MOTOR CALISMASI

		if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8007b16:	4b72      	ldr	r3, [pc, #456]	; (8007ce0 <checkDemoModCalisma+0x254>)
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d10b      	bne.n	8007b36 <checkDemoModCalisma+0xaa>
 8007b1e:	4b6d      	ldr	r3, [pc, #436]	; (8007cd4 <checkDemoModCalisma+0x248>)
 8007b20:	781b      	ldrb	r3, [r3, #0]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d107      	bne.n	8007b36 <checkDemoModCalisma+0xaa>
 8007b26:	4b6c      	ldr	r3, [pc, #432]	; (8007cd8 <checkDemoModCalisma+0x24c>)
 8007b28:	781b      	ldrb	r3, [r3, #0]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d103      	bne.n	8007b36 <checkDemoModCalisma+0xaa>
 8007b2e:	4b68      	ldr	r3, [pc, #416]	; (8007cd0 <checkDemoModCalisma+0x244>)
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d00c      	beq.n	8007b50 <checkDemoModCalisma+0xc4>
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8007b36:	2201      	movs	r2, #1
 8007b38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007b3c:	4867      	ldr	r0, [pc, #412]	; (8007cdc <checkDemoModCalisma+0x250>)
 8007b3e:	f001 ffce 	bl	8009ade <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8007b42:	2201      	movs	r2, #1
 8007b44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007b48:	4864      	ldr	r0, [pc, #400]	; (8007cdc <checkDemoModCalisma+0x250>)
 8007b4a:	f001 ffc8 	bl	8009ade <HAL_GPIO_WritePin>
 8007b4e:	e00b      	b.n	8007b68 <checkDemoModCalisma+0xdc>
		} else {
			HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007b50:	2200      	movs	r2, #0
 8007b52:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007b56:	4861      	ldr	r0, [pc, #388]	; (8007cdc <checkDemoModCalisma+0x250>)
 8007b58:	f001 ffc1 	bl	8009ade <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007b62:	485e      	ldr	r0, [pc, #376]	; (8007cdc <checkDemoModCalisma+0x250>)
 8007b64:	f001 ffbb 	bl	8009ade <HAL_GPIO_WritePin>
		}

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007b68:	2102      	movs	r1, #2
 8007b6a:	4858      	ldr	r0, [pc, #352]	; (8007ccc <checkDemoModCalisma+0x240>)
 8007b6c:	f001 ffa0 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8007b70:	4603      	mov	r3, r0
 8007b72:	2b01      	cmp	r3, #1
 8007b74:	d10d      	bne.n	8007b92 <checkDemoModCalisma+0x106>
				&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8007b76:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007b7a:	4854      	ldr	r0, [pc, #336]	; (8007ccc <checkDemoModCalisma+0x240>)
 8007b7c:	f001 ff98 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8007b80:	4603      	mov	r3, r0
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d105      	bne.n	8007b92 <checkDemoModCalisma+0x106>
				&& (demoYukariCalis==0)
 8007b86:	4b56      	ldr	r3, [pc, #344]	; (8007ce0 <checkDemoModCalisma+0x254>)
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	f083 0301 	eor.w	r3, r3, #1
 8007b8e:	b2db      	uxtb	r3, r3
 8007b90:	2b00      	cmp	r3, #0
				&& (demoAsagiCalis==0)) {
			//bos burası
		}

		//DEVİRME YUKARI CALIS
		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007b92:	2102      	movs	r1, #2
 8007b94:	484d      	ldr	r0, [pc, #308]	; (8007ccc <checkDemoModCalisma+0x240>)
 8007b96:	f001 ff8b 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	d125      	bne.n	8007bec <checkDemoModCalisma+0x160>
				&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8007ba0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007ba4:	4849      	ldr	r0, [pc, #292]	; (8007ccc <checkDemoModCalisma+0x240>)
 8007ba6:	f001 ff83 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d11d      	bne.n	8007bec <checkDemoModCalisma+0x160>
				&&(demoYukariCalis==0)
 8007bb0:	4b4b      	ldr	r3, [pc, #300]	; (8007ce0 <checkDemoModCalisma+0x254>)
 8007bb2:	781b      	ldrb	r3, [r3, #0]
 8007bb4:	f083 0301 	eor.w	r3, r3, #1
 8007bb8:	b2db      	uxtb	r3, r3
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d016      	beq.n	8007bec <checkDemoModCalisma+0x160>
				&&(demoAsagiCalis==0)
 8007bbe:	4b44      	ldr	r3, [pc, #272]	; (8007cd0 <checkDemoModCalisma+0x244>)
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	f083 0301 	eor.w	r3, r3, #1
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d00f      	beq.n	8007bec <checkDemoModCalisma+0x160>
				&& (demoDevAsagi==0)) {
 8007bcc:	4b42      	ldr	r3, [pc, #264]	; (8007cd8 <checkDemoModCalisma+0x24c>)
 8007bce:	781b      	ldrb	r3, [r3, #0]
 8007bd0:	f083 0301 	eor.w	r3, r3, #1
 8007bd4:	b2db      	uxtb	r3, r3
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d008      	beq.n	8007bec <checkDemoModCalisma+0x160>

			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8007bda:	2201      	movs	r2, #1
 8007bdc:	2120      	movs	r1, #32
 8007bde:	483b      	ldr	r0, [pc, #236]	; (8007ccc <checkDemoModCalisma+0x240>)
 8007be0:	f001 ff7d 	bl	8009ade <HAL_GPIO_WritePin>
			demoDevYukari=1;
 8007be4:	4b3b      	ldr	r3, [pc, #236]	; (8007cd4 <checkDemoModCalisma+0x248>)
 8007be6:	2201      	movs	r2, #1
 8007be8:	701a      	strb	r2, [r3, #0]
 8007bea:	e007      	b.n	8007bfc <checkDemoModCalisma+0x170>
		} else {
			HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007bec:	2200      	movs	r2, #0
 8007bee:	2120      	movs	r1, #32
 8007bf0:	4836      	ldr	r0, [pc, #216]	; (8007ccc <checkDemoModCalisma+0x240>)
 8007bf2:	f001 ff74 	bl	8009ade <HAL_GPIO_WritePin>
			demoDevYukari=0;
 8007bf6:	4b37      	ldr	r3, [pc, #220]	; (8007cd4 <checkDemoModCalisma+0x248>)
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	701a      	strb	r2, [r3, #0]
		}

		// DEVIRME ASAGI CALIS

		if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8007bfc:	2102      	movs	r1, #2
 8007bfe:	4833      	ldr	r0, [pc, #204]	; (8007ccc <checkDemoModCalisma+0x240>)
 8007c00:	f001 ff56 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8007c04:	4603      	mov	r3, r0
 8007c06:	2b01      	cmp	r3, #1
 8007c08:	d125      	bne.n	8007c56 <checkDemoModCalisma+0x1ca>
				&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8007c0a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007c0e:	482f      	ldr	r0, [pc, #188]	; (8007ccc <checkDemoModCalisma+0x240>)
 8007c10:	f001 ff4e 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8007c14:	4603      	mov	r3, r0
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d11d      	bne.n	8007c56 <checkDemoModCalisma+0x1ca>
				&&(demoYukariCalis==0)
 8007c1a:	4b31      	ldr	r3, [pc, #196]	; (8007ce0 <checkDemoModCalisma+0x254>)
 8007c1c:	781b      	ldrb	r3, [r3, #0]
 8007c1e:	f083 0301 	eor.w	r3, r3, #1
 8007c22:	b2db      	uxtb	r3, r3
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d016      	beq.n	8007c56 <checkDemoModCalisma+0x1ca>
				&&(demoDevYukari==0)
 8007c28:	4b2a      	ldr	r3, [pc, #168]	; (8007cd4 <checkDemoModCalisma+0x248>)
 8007c2a:	781b      	ldrb	r3, [r3, #0]
 8007c2c:	f083 0301 	eor.w	r3, r3, #1
 8007c30:	b2db      	uxtb	r3, r3
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d00f      	beq.n	8007c56 <checkDemoModCalisma+0x1ca>
				&& (demoAsagiCalis==0)) {
 8007c36:	4b26      	ldr	r3, [pc, #152]	; (8007cd0 <checkDemoModCalisma+0x244>)
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	f083 0301 	eor.w	r3, r3, #1
 8007c3e:	b2db      	uxtb	r3, r3
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d008      	beq.n	8007c56 <checkDemoModCalisma+0x1ca>

			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8007c44:	2201      	movs	r2, #1
 8007c46:	2110      	movs	r1, #16
 8007c48:	4820      	ldr	r0, [pc, #128]	; (8007ccc <checkDemoModCalisma+0x240>)
 8007c4a:	f001 ff48 	bl	8009ade <HAL_GPIO_WritePin>
			demoDevAsagi=1;
 8007c4e:	4b22      	ldr	r3, [pc, #136]	; (8007cd8 <checkDemoModCalisma+0x24c>)
 8007c50:	2201      	movs	r2, #1
 8007c52:	701a      	strb	r2, [r3, #0]
 8007c54:	e007      	b.n	8007c66 <checkDemoModCalisma+0x1da>
		} else {
			HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007c56:	2200      	movs	r2, #0
 8007c58:	2110      	movs	r1, #16
 8007c5a:	481c      	ldr	r0, [pc, #112]	; (8007ccc <checkDemoModCalisma+0x240>)
 8007c5c:	f001 ff3f 	bl	8009ade <HAL_GPIO_WritePin>
			demoDevAsagi=0;
 8007c60:	4b1d      	ldr	r3, [pc, #116]	; (8007cd8 <checkDemoModCalisma+0x24c>)
 8007c62:	2200      	movs	r2, #0
 8007c64:	701a      	strb	r2, [r3, #0]
		}

		// DEMO ASAGI CALISMA

		if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8007c66:	2104      	movs	r1, #4
 8007c68:	4818      	ldr	r0, [pc, #96]	; (8007ccc <checkDemoModCalisma+0x240>)
 8007c6a:	f001 ff21 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	2b00      	cmp	r3, #0
 8007c72:	d139      	bne.n	8007ce8 <checkDemoModCalisma+0x25c>
				&& (demoYukariCalis==0)
 8007c74:	4b1a      	ldr	r3, [pc, #104]	; (8007ce0 <checkDemoModCalisma+0x254>)
 8007c76:	781b      	ldrb	r3, [r3, #0]
 8007c78:	f083 0301 	eor.w	r3, r3, #1
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d032      	beq.n	8007ce8 <checkDemoModCalisma+0x25c>
				&& (demoDevAsagi==0)
 8007c82:	4b15      	ldr	r3, [pc, #84]	; (8007cd8 <checkDemoModCalisma+0x24c>)
 8007c84:	781b      	ldrb	r3, [r3, #0]
 8007c86:	f083 0301 	eor.w	r3, r3, #1
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d02b      	beq.n	8007ce8 <checkDemoModCalisma+0x25c>
				&& (demoDevYukari==0)) {
 8007c90:	4b10      	ldr	r3, [pc, #64]	; (8007cd4 <checkDemoModCalisma+0x248>)
 8007c92:	781b      	ldrb	r3, [r3, #0]
 8007c94:	f083 0301 	eor.w	r3, r3, #1
 8007c98:	b2db      	uxtb	r3, r3
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d024      	beq.n	8007ce8 <checkDemoModCalisma+0x25c>

			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	2102      	movs	r1, #2
 8007ca2:	480e      	ldr	r0, [pc, #56]	; (8007cdc <checkDemoModCalisma+0x250>)
 8007ca4:	f001 ff1b 	bl	8009ade <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8007ca8:	2201      	movs	r2, #1
 8007caa:	2101      	movs	r1, #1
 8007cac:	480b      	ldr	r0, [pc, #44]	; (8007cdc <checkDemoModCalisma+0x250>)
 8007cae:	f001 ff16 	bl	8009ade <HAL_GPIO_WritePin>
			demoAsagiCalis=1;
 8007cb2:	4b07      	ldr	r3, [pc, #28]	; (8007cd0 <checkDemoModCalisma+0x244>)
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	701a      	strb	r2, [r3, #0]
			demoCalismaSayisiYar=1;
 8007cb8:	4b0a      	ldr	r3, [pc, #40]	; (8007ce4 <checkDemoModCalisma+0x258>)
 8007cba:	2201      	movs	r2, #1
 8007cbc:	701a      	strb	r2, [r3, #0]
 8007cbe:	e027      	b.n	8007d10 <checkDemoModCalisma+0x284>
 8007cc0:	20000c57 	.word	0x20000c57
 8007cc4:	20000c8b 	.word	0x20000c8b
 8007cc8:	20000c56 	.word	0x20000c56
 8007ccc:	40011000 	.word	0x40011000
 8007cd0:	20000c92 	.word	0x20000c92
 8007cd4:	20000c93 	.word	0x20000c93
 8007cd8:	20000c94 	.word	0x20000c94
 8007cdc:	40010c00 	.word	0x40010c00
 8007ce0:	20000c91 	.word	0x20000c91
 8007ce4:	20000c77 	.word	0x20000c77
		} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8007ce8:	2104      	movs	r1, #4
 8007cea:	48a0      	ldr	r0, [pc, #640]	; (8007f6c <checkDemoModCalisma+0x4e0>)
 8007cec:	f001 fee0 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	2b01      	cmp	r3, #1
 8007cf4:	d10c      	bne.n	8007d10 <checkDemoModCalisma+0x284>
			HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	2102      	movs	r1, #2
 8007cfa:	489d      	ldr	r0, [pc, #628]	; (8007f70 <checkDemoModCalisma+0x4e4>)
 8007cfc:	f001 feef 	bl	8009ade <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007d00:	2200      	movs	r2, #0
 8007d02:	2101      	movs	r1, #1
 8007d04:	489a      	ldr	r0, [pc, #616]	; (8007f70 <checkDemoModCalisma+0x4e4>)
 8007d06:	f001 feea 	bl	8009ade <HAL_GPIO_WritePin>
			demoAsagiCalis=0;
 8007d0a:	4b9a      	ldr	r3, [pc, #616]	; (8007f74 <checkDemoModCalisma+0x4e8>)
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	701a      	strb	r2, [r3, #0]
		}

		if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8007d10:	2104      	movs	r1, #4
 8007d12:	4896      	ldr	r0, [pc, #600]	; (8007f6c <checkDemoModCalisma+0x4e0>)
 8007d14:	f001 fecc 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	2b01      	cmp	r3, #1
 8007d1c:	d10d      	bne.n	8007d3a <checkDemoModCalisma+0x2ae>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8007d1e:	2201      	movs	r2, #1
 8007d20:	2180      	movs	r1, #128	; 0x80
 8007d22:	4895      	ldr	r0, [pc, #596]	; (8007f78 <checkDemoModCalisma+0x4ec>)
 8007d24:	f001 fedb 	bl	8009ade <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8007d28:	2201      	movs	r2, #1
 8007d2a:	2120      	movs	r1, #32
 8007d2c:	4892      	ldr	r0, [pc, #584]	; (8007f78 <checkDemoModCalisma+0x4ec>)
 8007d2e:	f001 fed6 	bl	8009ade <HAL_GPIO_WritePin>
			timer3 = millis;
 8007d32:	4b92      	ldr	r3, [pc, #584]	; (8007f7c <checkDemoModCalisma+0x4f0>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	4a92      	ldr	r2, [pc, #584]	; (8007f80 <checkDemoModCalisma+0x4f4>)
 8007d38:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8007d3a:	4b90      	ldr	r3, [pc, #576]	; (8007f7c <checkDemoModCalisma+0x4f0>)
 8007d3c:	681a      	ldr	r2, [r3, #0]
 8007d3e:	4b90      	ldr	r3, [pc, #576]	; (8007f80 <checkDemoModCalisma+0x4f4>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	1ad3      	subs	r3, r2, r3
 8007d44:	2b04      	cmp	r3, #4
 8007d46:	d909      	bls.n	8007d5c <checkDemoModCalisma+0x2d0>
			HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007d48:	2200      	movs	r2, #0
 8007d4a:	2180      	movs	r1, #128	; 0x80
 8007d4c:	488a      	ldr	r0, [pc, #552]	; (8007f78 <checkDemoModCalisma+0x4ec>)
 8007d4e:	f001 fec6 	bl	8009ade <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007d52:	2200      	movs	r2, #0
 8007d54:	2120      	movs	r1, #32
 8007d56:	4888      	ldr	r0, [pc, #544]	; (8007f78 <checkDemoModCalisma+0x4ec>)
 8007d58:	f001 fec1 	bl	8009ade <HAL_GPIO_WritePin>
		}

		if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8007d5c:	2102      	movs	r1, #2
 8007d5e:	4883      	ldr	r0, [pc, #524]	; (8007f6c <checkDemoModCalisma+0x4e0>)
 8007d60:	f001 fea6 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8007d64:	4603      	mov	r3, r0
 8007d66:	2b01      	cmp	r3, #1
 8007d68:	d108      	bne.n	8007d7c <checkDemoModCalisma+0x2f0>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	2140      	movs	r1, #64	; 0x40
 8007d6e:	4882      	ldr	r0, [pc, #520]	; (8007f78 <checkDemoModCalisma+0x4ec>)
 8007d70:	f001 feb5 	bl	8009ade <HAL_GPIO_WritePin>
			timer3 = millis;
 8007d74:	4b81      	ldr	r3, [pc, #516]	; (8007f7c <checkDemoModCalisma+0x4f0>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	4a81      	ldr	r2, [pc, #516]	; (8007f80 <checkDemoModCalisma+0x4f4>)
 8007d7a:	6013      	str	r3, [r2, #0]
		}

		if(millis-timer3 >= 5) {
 8007d7c:	4b7f      	ldr	r3, [pc, #508]	; (8007f7c <checkDemoModCalisma+0x4f0>)
 8007d7e:	681a      	ldr	r2, [r3, #0]
 8007d80:	4b7f      	ldr	r3, [pc, #508]	; (8007f80 <checkDemoModCalisma+0x4f4>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	1ad3      	subs	r3, r2, r3
 8007d86:	2b04      	cmp	r3, #4
 8007d88:	d904      	bls.n	8007d94 <checkDemoModCalisma+0x308>
			HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	2140      	movs	r1, #64	; 0x40
 8007d8e:	487a      	ldr	r0, [pc, #488]	; (8007f78 <checkDemoModCalisma+0x4ec>)
 8007d90:	f001 fea5 	bl	8009ade <HAL_GPIO_WritePin>
		}

		if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8007d94:	4b7b      	ldr	r3, [pc, #492]	; (8007f84 <checkDemoModCalisma+0x4f8>)
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d058      	beq.n	8007e4e <checkDemoModCalisma+0x3c2>
 8007d9c:	4b7a      	ldr	r3, [pc, #488]	; (8007f88 <checkDemoModCalisma+0x4fc>)
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d054      	beq.n	8007e4e <checkDemoModCalisma+0x3c2>
			//mesajYazildi=0;
			calismaSayisi1=calismaSayisi1+1;
 8007da4:	4b79      	ldr	r3, [pc, #484]	; (8007f8c <checkDemoModCalisma+0x500>)
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	3301      	adds	r3, #1
 8007daa:	b2da      	uxtb	r2, r3
 8007dac:	4b77      	ldr	r3, [pc, #476]	; (8007f8c <checkDemoModCalisma+0x500>)
 8007dae:	701a      	strb	r2, [r3, #0]

			if(calismaSayisi1>9) {
 8007db0:	4b76      	ldr	r3, [pc, #472]	; (8007f8c <checkDemoModCalisma+0x500>)
 8007db2:	781b      	ldrb	r3, [r3, #0]
 8007db4:	2b09      	cmp	r3, #9
 8007db6:	d908      	bls.n	8007dca <checkDemoModCalisma+0x33e>
				calismaSayisi1=0;
 8007db8:	4b74      	ldr	r3, [pc, #464]	; (8007f8c <checkDemoModCalisma+0x500>)
 8007dba:	2200      	movs	r2, #0
 8007dbc:	701a      	strb	r2, [r3, #0]
				calismaSayisi10=calismaSayisi10+1;
 8007dbe:	4b74      	ldr	r3, [pc, #464]	; (8007f90 <checkDemoModCalisma+0x504>)
 8007dc0:	781b      	ldrb	r3, [r3, #0]
 8007dc2:	3301      	adds	r3, #1
 8007dc4:	b2da      	uxtb	r2, r3
 8007dc6:	4b72      	ldr	r3, [pc, #456]	; (8007f90 <checkDemoModCalisma+0x504>)
 8007dc8:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi10>9) {
 8007dca:	4b71      	ldr	r3, [pc, #452]	; (8007f90 <checkDemoModCalisma+0x504>)
 8007dcc:	781b      	ldrb	r3, [r3, #0]
 8007dce:	2b09      	cmp	r3, #9
 8007dd0:	d908      	bls.n	8007de4 <checkDemoModCalisma+0x358>
				calismaSayisi10=0;
 8007dd2:	4b6f      	ldr	r3, [pc, #444]	; (8007f90 <checkDemoModCalisma+0x504>)
 8007dd4:	2200      	movs	r2, #0
 8007dd6:	701a      	strb	r2, [r3, #0]
				calismaSayisi100=calismaSayisi100+1;
 8007dd8:	4b6e      	ldr	r3, [pc, #440]	; (8007f94 <checkDemoModCalisma+0x508>)
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	3301      	adds	r3, #1
 8007dde:	b2da      	uxtb	r2, r3
 8007de0:	4b6c      	ldr	r3, [pc, #432]	; (8007f94 <checkDemoModCalisma+0x508>)
 8007de2:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi100>9) {
 8007de4:	4b6b      	ldr	r3, [pc, #428]	; (8007f94 <checkDemoModCalisma+0x508>)
 8007de6:	781b      	ldrb	r3, [r3, #0]
 8007de8:	2b09      	cmp	r3, #9
 8007dea:	d908      	bls.n	8007dfe <checkDemoModCalisma+0x372>
				calismaSayisi100=0;
 8007dec:	4b69      	ldr	r3, [pc, #420]	; (8007f94 <checkDemoModCalisma+0x508>)
 8007dee:	2200      	movs	r2, #0
 8007df0:	701a      	strb	r2, [r3, #0]
				calismaSayisi1000=calismaSayisi1000+1;
 8007df2:	4b69      	ldr	r3, [pc, #420]	; (8007f98 <checkDemoModCalisma+0x50c>)
 8007df4:	781b      	ldrb	r3, [r3, #0]
 8007df6:	3301      	adds	r3, #1
 8007df8:	b2da      	uxtb	r2, r3
 8007dfa:	4b67      	ldr	r3, [pc, #412]	; (8007f98 <checkDemoModCalisma+0x50c>)
 8007dfc:	701a      	strb	r2, [r3, #0]
			}

			if(calismaSayisi1000>9) {
 8007dfe:	4b66      	ldr	r3, [pc, #408]	; (8007f98 <checkDemoModCalisma+0x50c>)
 8007e00:	781b      	ldrb	r3, [r3, #0]
 8007e02:	2b09      	cmp	r3, #9
 8007e04:	d908      	bls.n	8007e18 <checkDemoModCalisma+0x38c>
				calismaSayisi1000=0;
 8007e06:	4b64      	ldr	r3, [pc, #400]	; (8007f98 <checkDemoModCalisma+0x50c>)
 8007e08:	2200      	movs	r2, #0
 8007e0a:	701a      	strb	r2, [r3, #0]
				calismaSayisi10000=calismaSayisi10000+1;
 8007e0c:	4b63      	ldr	r3, [pc, #396]	; (8007f9c <checkDemoModCalisma+0x510>)
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	3301      	adds	r3, #1
 8007e12:	b2da      	uxtb	r2, r3
 8007e14:	4b61      	ldr	r3, [pc, #388]	; (8007f9c <checkDemoModCalisma+0x510>)
 8007e16:	701a      	strb	r2, [r3, #0]
			}
			eepromData[32]=calismaSayisi10000;
 8007e18:	4b60      	ldr	r3, [pc, #384]	; (8007f9c <checkDemoModCalisma+0x510>)
 8007e1a:	781a      	ldrb	r2, [r3, #0]
 8007e1c:	4b60      	ldr	r3, [pc, #384]	; (8007fa0 <checkDemoModCalisma+0x514>)
 8007e1e:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31]=calismaSayisi1000;
 8007e22:	4b5d      	ldr	r3, [pc, #372]	; (8007f98 <checkDemoModCalisma+0x50c>)
 8007e24:	781a      	ldrb	r2, [r3, #0]
 8007e26:	4b5e      	ldr	r3, [pc, #376]	; (8007fa0 <checkDemoModCalisma+0x514>)
 8007e28:	77da      	strb	r2, [r3, #31]
			eepromData[30]=calismaSayisi100;
 8007e2a:	4b5a      	ldr	r3, [pc, #360]	; (8007f94 <checkDemoModCalisma+0x508>)
 8007e2c:	781a      	ldrb	r2, [r3, #0]
 8007e2e:	4b5c      	ldr	r3, [pc, #368]	; (8007fa0 <checkDemoModCalisma+0x514>)
 8007e30:	779a      	strb	r2, [r3, #30]
			eepromData[29]=calismaSayisi10;
 8007e32:	4b57      	ldr	r3, [pc, #348]	; (8007f90 <checkDemoModCalisma+0x504>)
 8007e34:	781a      	ldrb	r2, [r3, #0]
 8007e36:	4b5a      	ldr	r3, [pc, #360]	; (8007fa0 <checkDemoModCalisma+0x514>)
 8007e38:	775a      	strb	r2, [r3, #29]
			eepromData[28]=calismaSayisi1;
 8007e3a:	4b54      	ldr	r3, [pc, #336]	; (8007f8c <checkDemoModCalisma+0x500>)
 8007e3c:	781a      	ldrb	r2, [r3, #0]
 8007e3e:	4b58      	ldr	r3, [pc, #352]	; (8007fa0 <checkDemoModCalisma+0x514>)
 8007e40:	771a      	strb	r2, [r3, #28]
			hafizaYaz=1;
 8007e42:	4b58      	ldr	r3, [pc, #352]	; (8007fa4 <checkDemoModCalisma+0x518>)
 8007e44:	2201      	movs	r2, #1
 8007e46:	701a      	strb	r2, [r3, #0]
		 		//mesajYazildi=0;
			demoCalismaSayisiYar=0;
 8007e48:	4b4f      	ldr	r3, [pc, #316]	; (8007f88 <checkDemoModCalisma+0x4fc>)
 8007e4a:	2200      	movs	r2, #0
 8007e4c:	701a      	strb	r2, [r3, #0]
		}

		if (menuGiris==0) {
 8007e4e:	4b56      	ldr	r3, [pc, #344]	; (8007fa8 <checkDemoModCalisma+0x51c>)
 8007e50:	781b      	ldrb	r3, [r3, #0]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	f040 8087 	bne.w	8007f66 <checkDemoModCalisma+0x4da>
			lcd_print(2,1,"Cycle      ");
 8007e58:	4a54      	ldr	r2, [pc, #336]	; (8007fac <checkDemoModCalisma+0x520>)
 8007e5a:	2101      	movs	r1, #1
 8007e5c:	2002      	movs	r0, #2
 8007e5e:	f7f8 fc03 	bl	8000668 <lcd_print>
			lcd_print(1,1, "    DEMO MODE   ");
 8007e62:	4a53      	ldr	r2, [pc, #332]	; (8007fb0 <checkDemoModCalisma+0x524>)
 8007e64:	2101      	movs	r1, #1
 8007e66:	2001      	movs	r0, #1
 8007e68:	f7f8 fbfe 	bl	8000668 <lcd_print>
			itoa(calismaSayisi10000, snum, 10);
 8007e6c:	4b4b      	ldr	r3, [pc, #300]	; (8007f9c <checkDemoModCalisma+0x510>)
 8007e6e:	781b      	ldrb	r3, [r3, #0]
 8007e70:	220a      	movs	r2, #10
 8007e72:	4950      	ldr	r1, [pc, #320]	; (8007fb4 <checkDemoModCalisma+0x528>)
 8007e74:	4618      	mov	r0, r3
 8007e76:	f004 fe47 	bl	800cb08 <itoa>
			lcd_print(2,12,snum);
 8007e7a:	4a4e      	ldr	r2, [pc, #312]	; (8007fb4 <checkDemoModCalisma+0x528>)
 8007e7c:	210c      	movs	r1, #12
 8007e7e:	2002      	movs	r0, #2
 8007e80:	f7f8 fbf2 	bl	8000668 <lcd_print>
			itoa(calismaSayisi1000, snum, 10);
 8007e84:	4b44      	ldr	r3, [pc, #272]	; (8007f98 <checkDemoModCalisma+0x50c>)
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	220a      	movs	r2, #10
 8007e8a:	494a      	ldr	r1, [pc, #296]	; (8007fb4 <checkDemoModCalisma+0x528>)
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f004 fe3b 	bl	800cb08 <itoa>
			lcd_print(2,13,snum);
 8007e92:	4a48      	ldr	r2, [pc, #288]	; (8007fb4 <checkDemoModCalisma+0x528>)
 8007e94:	210d      	movs	r1, #13
 8007e96:	2002      	movs	r0, #2
 8007e98:	f7f8 fbe6 	bl	8000668 <lcd_print>
			itoa(calismaSayisi100, snum, 10);
 8007e9c:	4b3d      	ldr	r3, [pc, #244]	; (8007f94 <checkDemoModCalisma+0x508>)
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	220a      	movs	r2, #10
 8007ea2:	4944      	ldr	r1, [pc, #272]	; (8007fb4 <checkDemoModCalisma+0x528>)
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	f004 fe2f 	bl	800cb08 <itoa>
			lcd_print(2,14,snum);
 8007eaa:	4a42      	ldr	r2, [pc, #264]	; (8007fb4 <checkDemoModCalisma+0x528>)
 8007eac:	210e      	movs	r1, #14
 8007eae:	2002      	movs	r0, #2
 8007eb0:	f7f8 fbda 	bl	8000668 <lcd_print>
			itoa(calismaSayisi10, snum, 10);
 8007eb4:	4b36      	ldr	r3, [pc, #216]	; (8007f90 <checkDemoModCalisma+0x504>)
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	220a      	movs	r2, #10
 8007eba:	493e      	ldr	r1, [pc, #248]	; (8007fb4 <checkDemoModCalisma+0x528>)
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f004 fe23 	bl	800cb08 <itoa>
			lcd_print(2,15,snum);
 8007ec2:	4a3c      	ldr	r2, [pc, #240]	; (8007fb4 <checkDemoModCalisma+0x528>)
 8007ec4:	210f      	movs	r1, #15
 8007ec6:	2002      	movs	r0, #2
 8007ec8:	f7f8 fbce 	bl	8000668 <lcd_print>
			itoa(calismaSayisi1, snum, 10);
 8007ecc:	4b2f      	ldr	r3, [pc, #188]	; (8007f8c <checkDemoModCalisma+0x500>)
 8007ece:	781b      	ldrb	r3, [r3, #0]
 8007ed0:	220a      	movs	r2, #10
 8007ed2:	4938      	ldr	r1, [pc, #224]	; (8007fb4 <checkDemoModCalisma+0x528>)
 8007ed4:	4618      	mov	r0, r3
 8007ed6:	f004 fe17 	bl	800cb08 <itoa>
			lcd_print(2,16,snum);
 8007eda:	4a36      	ldr	r2, [pc, #216]	; (8007fb4 <checkDemoModCalisma+0x528>)
 8007edc:	2110      	movs	r1, #16
 8007ede:	2002      	movs	r0, #2
 8007ee0:	f7f8 fbc2 	bl	8000668 <lcd_print>
			mesajYazildi=1;
 8007ee4:	4b34      	ldr	r3, [pc, #208]	; (8007fb8 <checkDemoModCalisma+0x52c>)
 8007ee6:	2201      	movs	r2, #1
 8007ee8:	701a      	strb	r2, [r3, #0]
		if (menuGiris==0) {
 8007eea:	e03c      	b.n	8007f66 <checkDemoModCalisma+0x4da>
		}
	} else if(demoMode==1 || menuGiris==1) {
 8007eec:	4b33      	ldr	r3, [pc, #204]	; (8007fbc <checkDemoModCalisma+0x530>)
 8007eee:	781b      	ldrb	r3, [r3, #0]
 8007ef0:	2b01      	cmp	r3, #1
 8007ef2:	d003      	beq.n	8007efc <checkDemoModCalisma+0x470>
 8007ef4:	4b2c      	ldr	r3, [pc, #176]	; (8007fa8 <checkDemoModCalisma+0x51c>)
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	2b01      	cmp	r3, #1
 8007efa:	d134      	bne.n	8007f66 <checkDemoModCalisma+0x4da>
		HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8007efc:	2200      	movs	r2, #0
 8007efe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8007f02:	481b      	ldr	r0, [pc, #108]	; (8007f70 <checkDemoModCalisma+0x4e4>)
 8007f04:	f001 fdeb 	bl	8009ade <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007f08:	2200      	movs	r2, #0
 8007f0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007f0e:	4818      	ldr	r0, [pc, #96]	; (8007f70 <checkDemoModCalisma+0x4e4>)
 8007f10:	f001 fde5 	bl	8009ade <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8007f14:	2200      	movs	r2, #0
 8007f16:	2104      	movs	r1, #4
 8007f18:	4815      	ldr	r0, [pc, #84]	; (8007f70 <checkDemoModCalisma+0x4e4>)
 8007f1a:	f001 fde0 	bl	8009ade <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007f1e:	2200      	movs	r2, #0
 8007f20:	2102      	movs	r1, #2
 8007f22:	4813      	ldr	r0, [pc, #76]	; (8007f70 <checkDemoModCalisma+0x4e4>)
 8007f24:	f001 fddb 	bl	8009ade <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007f28:	2200      	movs	r2, #0
 8007f2a:	2101      	movs	r1, #1
 8007f2c:	4810      	ldr	r0, [pc, #64]	; (8007f70 <checkDemoModCalisma+0x4e4>)
 8007f2e:	f001 fdd6 	bl	8009ade <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8007f32:	2200      	movs	r2, #0
 8007f34:	2120      	movs	r1, #32
 8007f36:	480d      	ldr	r0, [pc, #52]	; (8007f6c <checkDemoModCalisma+0x4e0>)
 8007f38:	f001 fdd1 	bl	8009ade <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	2110      	movs	r1, #16
 8007f40:	480a      	ldr	r0, [pc, #40]	; (8007f6c <checkDemoModCalisma+0x4e0>)
 8007f42:	f001 fdcc 	bl	8009ade <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007f46:	2200      	movs	r2, #0
 8007f48:	2180      	movs	r1, #128	; 0x80
 8007f4a:	480b      	ldr	r0, [pc, #44]	; (8007f78 <checkDemoModCalisma+0x4ec>)
 8007f4c:	f001 fdc7 	bl	8009ade <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8007f50:	2200      	movs	r2, #0
 8007f52:	2140      	movs	r1, #64	; 0x40
 8007f54:	4808      	ldr	r0, [pc, #32]	; (8007f78 <checkDemoModCalisma+0x4ec>)
 8007f56:	f001 fdc2 	bl	8009ade <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	2120      	movs	r1, #32
 8007f5e:	4806      	ldr	r0, [pc, #24]	; (8007f78 <checkDemoModCalisma+0x4ec>)
 8007f60:	f001 fdbd 	bl	8009ade <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
	}
}
 8007f64:	e7ff      	b.n	8007f66 <checkDemoModCalisma+0x4da>
 8007f66:	bf00      	nop
 8007f68:	bd80      	pop	{r7, pc}
 8007f6a:	bf00      	nop
 8007f6c:	40011000 	.word	0x40011000
 8007f70:	40010c00 	.word	0x40010c00
 8007f74:	20000c92 	.word	0x20000c92
 8007f78:	40010800 	.word	0x40010800
 8007f7c:	20000bc4 	.word	0x20000bc4
 8007f80:	20000bd4 	.word	0x20000bd4
 8007f84:	20000c91 	.word	0x20000c91
 8007f88:	20000c77 	.word	0x20000c77
 8007f8c:	20000c36 	.word	0x20000c36
 8007f90:	20000c37 	.word	0x20000c37
 8007f94:	200009b1 	.word	0x200009b1
 8007f98:	200009b2 	.word	0x200009b2
 8007f9c:	20000c38 	.word	0x20000c38
 8007fa0:	20000b28 	.word	0x20000b28
 8007fa4:	20000c65 	.word	0x20000c65
 8007fa8:	20000c56 	.word	0x20000c56
 8007fac:	0800e2cc 	.word	0x0800e2cc
 8007fb0:	0800e2d8 	.word	0x0800e2d8
 8007fb4:	20000bbc 	.word	0x20000bbc
 8007fb8:	20000c6d 	.word	0x20000c6d
 8007fbc:	20000c57 	.word	0x20000c57

08007fc0 <mergeData>:

char* mergeData() {
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b09e      	sub	sp, #120	; 0x78
 8007fc4:	af00      	add	r7, sp, #0
	char combinedString[45] = "";
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	643b      	str	r3, [r7, #64]	; 0x40
 8007fca:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8007fce:	2229      	movs	r2, #41	; 0x29
 8007fd0:	2100      	movs	r1, #0
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	f004 feb0 	bl	800cd38 <memset>
	char temp[10];

	uint8_t uintVariables[] = {
 8007fd8:	4b6a      	ldr	r3, [pc, #424]	; (8008184 <mergeData+0x1c4>)
 8007fda:	781b      	ldrb	r3, [r3, #0]
 8007fdc:	713b      	strb	r3, [r7, #4]
 8007fde:	4b6a      	ldr	r3, [pc, #424]	; (8008188 <mergeData+0x1c8>)
 8007fe0:	781b      	ldrb	r3, [r3, #0]
 8007fe2:	717b      	strb	r3, [r7, #5]
 8007fe4:	4b69      	ldr	r3, [pc, #420]	; (800818c <mergeData+0x1cc>)
 8007fe6:	781b      	ldrb	r3, [r3, #0]
 8007fe8:	71bb      	strb	r3, [r7, #6]
 8007fea:	4b69      	ldr	r3, [pc, #420]	; (8008190 <mergeData+0x1d0>)
 8007fec:	781b      	ldrb	r3, [r3, #0]
 8007fee:	71fb      	strb	r3, [r7, #7]
 8007ff0:	4b68      	ldr	r3, [pc, #416]	; (8008194 <mergeData+0x1d4>)
 8007ff2:	781b      	ldrb	r3, [r3, #0]
 8007ff4:	723b      	strb	r3, [r7, #8]
 8007ff6:	4b68      	ldr	r3, [pc, #416]	; (8008198 <mergeData+0x1d8>)
 8007ff8:	781b      	ldrb	r3, [r3, #0]
 8007ffa:	727b      	strb	r3, [r7, #9]
 8007ffc:	4b67      	ldr	r3, [pc, #412]	; (800819c <mergeData+0x1dc>)
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	72bb      	strb	r3, [r7, #10]
 8008002:	4b67      	ldr	r3, [pc, #412]	; (80081a0 <mergeData+0x1e0>)
 8008004:	781b      	ldrb	r3, [r3, #0]
 8008006:	72fb      	strb	r3, [r7, #11]
 8008008:	4b66      	ldr	r3, [pc, #408]	; (80081a4 <mergeData+0x1e4>)
 800800a:	781b      	ldrb	r3, [r3, #0]
 800800c:	733b      	strb	r3, [r7, #12]
 800800e:	4b66      	ldr	r3, [pc, #408]	; (80081a8 <mergeData+0x1e8>)
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	737b      	strb	r3, [r7, #13]
 8008014:	4b65      	ldr	r3, [pc, #404]	; (80081ac <mergeData+0x1ec>)
 8008016:	781b      	ldrb	r3, [r3, #0]
 8008018:	73bb      	strb	r3, [r7, #14]
 800801a:	4b65      	ldr	r3, [pc, #404]	; (80081b0 <mergeData+0x1f0>)
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	73fb      	strb	r3, [r7, #15]
 8008020:	4b64      	ldr	r3, [pc, #400]	; (80081b4 <mergeData+0x1f4>)
 8008022:	781b      	ldrb	r3, [r3, #0]
 8008024:	743b      	strb	r3, [r7, #16]
 8008026:	4b64      	ldr	r3, [pc, #400]	; (80081b8 <mergeData+0x1f8>)
 8008028:	781b      	ldrb	r3, [r3, #0]
 800802a:	747b      	strb	r3, [r7, #17]
 800802c:	4b63      	ldr	r3, [pc, #396]	; (80081bc <mergeData+0x1fc>)
 800802e:	781b      	ldrb	r3, [r3, #0]
 8008030:	74bb      	strb	r3, [r7, #18]
 8008032:	4b63      	ldr	r3, [pc, #396]	; (80081c0 <mergeData+0x200>)
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	74fb      	strb	r3, [r7, #19]
 8008038:	4b62      	ldr	r3, [pc, #392]	; (80081c4 <mergeData+0x204>)
 800803a:	781b      	ldrb	r3, [r3, #0]
 800803c:	753b      	strb	r3, [r7, #20]
 800803e:	4b62      	ldr	r3, [pc, #392]	; (80081c8 <mergeData+0x208>)
 8008040:	781b      	ldrb	r3, [r3, #0]
 8008042:	757b      	strb	r3, [r7, #21]
 8008044:	4b61      	ldr	r3, [pc, #388]	; (80081cc <mergeData+0x20c>)
 8008046:	781b      	ldrb	r3, [r3, #0]
 8008048:	75bb      	strb	r3, [r7, #22]
 800804a:	4b61      	ldr	r3, [pc, #388]	; (80081d0 <mergeData+0x210>)
 800804c:	781b      	ldrb	r3, [r3, #0]
 800804e:	75fb      	strb	r3, [r7, #23]
 8008050:	4b60      	ldr	r3, [pc, #384]	; (80081d4 <mergeData+0x214>)
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	763b      	strb	r3, [r7, #24]
 8008056:	4b60      	ldr	r3, [pc, #384]	; (80081d8 <mergeData+0x218>)
 8008058:	781b      	ldrb	r3, [r3, #0]
 800805a:	767b      	strb	r3, [r7, #25]
 800805c:	4b5f      	ldr	r3, [pc, #380]	; (80081dc <mergeData+0x21c>)
 800805e:	781b      	ldrb	r3, [r3, #0]
 8008060:	76bb      	strb	r3, [r7, #26]
 8008062:	4b5f      	ldr	r3, [pc, #380]	; (80081e0 <mergeData+0x220>)
 8008064:	781b      	ldrb	r3, [r3, #0]
 8008066:	76fb      	strb	r3, [r7, #27]
 8008068:	4b5e      	ldr	r3, [pc, #376]	; (80081e4 <mergeData+0x224>)
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	773b      	strb	r3, [r7, #28]
 800806e:	4b5e      	ldr	r3, [pc, #376]	; (80081e8 <mergeData+0x228>)
 8008070:	781b      	ldrb	r3, [r3, #0]
 8008072:	777b      	strb	r3, [r7, #29]
 8008074:	4b5d      	ldr	r3, [pc, #372]	; (80081ec <mergeData+0x22c>)
 8008076:	781b      	ldrb	r3, [r3, #0]
 8008078:	77bb      	strb	r3, [r7, #30]
 800807a:	4b5d      	ldr	r3, [pc, #372]	; (80081f0 <mergeData+0x230>)
 800807c:	781b      	ldrb	r3, [r3, #0]
 800807e:	77fb      	strb	r3, [r7, #31]
 8008080:	4b5c      	ldr	r3, [pc, #368]	; (80081f4 <mergeData+0x234>)
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	f887 3020 	strb.w	r3, [r7, #32]
 8008088:	4b5b      	ldr	r3, [pc, #364]	; (80081f8 <mergeData+0x238>)
 800808a:	781b      	ldrb	r3, [r3, #0]
 800808c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
 8008090:	4b5a      	ldr	r3, [pc, #360]	; (80081fc <mergeData+0x23c>)
 8008092:	781b      	ldrb	r3, [r3, #0]
 8008094:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008098:	4b59      	ldr	r3, [pc, #356]	; (8008200 <mergeData+0x240>)
 800809a:	781b      	ldrb	r3, [r3, #0]
 800809c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80080a0:	4b58      	ldr	r3, [pc, #352]	; (8008204 <mergeData+0x244>)
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
			calismaSayisi10,
			calismaSayisi100,
			calismaSayisi1000,
			calismaSayisi10000,
			dilSecim,
			eepromData[37],
 80080a8:	4b57      	ldr	r3, [pc, #348]	; (8008208 <mergeData+0x248>)
 80080aa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
	uint8_t uintVariables[] = {
 80080ae:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
			eepromData[38],
 80080b2:	4b55      	ldr	r3, [pc, #340]	; (8008208 <mergeData+0x248>)
 80080b4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
	uint8_t uintVariables[] = {
 80080b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			eepromData[39],
 80080bc:	4b52      	ldr	r3, [pc, #328]	; (8008208 <mergeData+0x248>)
 80080be:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
	uint8_t uintVariables[] = {
 80080c2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			eepromData[40],
 80080c6:	4b50      	ldr	r3, [pc, #320]	; (8008208 <mergeData+0x248>)
 80080c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint8_t uintVariables[] = {
 80080cc:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			eepromData[41],
 80080d0:	4b4d      	ldr	r3, [pc, #308]	; (8008208 <mergeData+0x248>)
 80080d2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
	uint8_t uintVariables[] = {
 80080d6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			eepromData[42],
 80080da:	4b4b      	ldr	r3, [pc, #300]	; (8008208 <mergeData+0x248>)
 80080dc:	f893 302a 	ldrb.w	r3, [r3, #42]	; 0x2a
	uint8_t uintVariables[] = {
 80080e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
			eepromData[43],
 80080e4:	4b48      	ldr	r3, [pc, #288]	; (8008208 <mergeData+0x248>)
 80080e6:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
	uint8_t uintVariables[] = {
 80080ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			eepromData[44],
 80080ee:	4b46      	ldr	r3, [pc, #280]	; (8008208 <mergeData+0x248>)
 80080f0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
	uint8_t uintVariables[] = {
 80080f4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
			eepromData[45],
 80080f8:	4b43      	ldr	r3, [pc, #268]	; (8008208 <mergeData+0x248>)
 80080fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
	uint8_t uintVariables[] = {
 80080fe:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			eepromData[46],
 8008102:	4b41      	ldr	r3, [pc, #260]	; (8008208 <mergeData+0x248>)
 8008104:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
	uint8_t uintVariables[] = {
 8008108:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
			eepromData[47],
 800810c:	4b3e      	ldr	r3, [pc, #248]	; (8008208 <mergeData+0x248>)
 800810e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
	uint8_t uintVariables[] = {
 8008112:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8008116:	4b3d      	ldr	r3, [pc, #244]	; (800820c <mergeData+0x24c>)
 8008118:	781b      	ldrb	r3, [r3, #0]
 800811a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
			lcdBacklightSure
	};

	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 800811e:	2300      	movs	r3, #0
 8008120:	677b      	str	r3, [r7, #116]	; 0x74
 8008122:	e015      	b.n	8008150 <mergeData+0x190>
	    sprintf(temp, "%u", uintVariables[i]);
 8008124:	1d3a      	adds	r2, r7, #4
 8008126:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008128:	4413      	add	r3, r2
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	461a      	mov	r2, r3
 800812e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008132:	4937      	ldr	r1, [pc, #220]	; (8008210 <mergeData+0x250>)
 8008134:	4618      	mov	r0, r3
 8008136:	f004 fddf 	bl	800ccf8 <siprintf>
	    strcat(combinedString, temp);
 800813a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 800813e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008142:	4611      	mov	r1, r2
 8008144:	4618      	mov	r0, r3
 8008146:	f004 fdff 	bl	800cd48 <strcat>
	for (int i = 0; i < sizeof(uintVariables) / sizeof(uintVariables[0]); ++i) {
 800814a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800814c:	3301      	adds	r3, #1
 800814e:	677b      	str	r3, [r7, #116]	; 0x74
 8008150:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008152:	2b2c      	cmp	r3, #44	; 0x2c
 8008154:	d9e6      	bls.n	8008124 <mergeData+0x164>
	}

	char* result = malloc(strlen(combinedString) + 1);
 8008156:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800815a:	4618      	mov	r0, r3
 800815c:	f7f8 f862 	bl	8000224 <strlen>
 8008160:	4603      	mov	r3, r0
 8008162:	3301      	adds	r3, #1
 8008164:	4618      	mov	r0, r3
 8008166:	f004 fcd1 	bl	800cb0c <malloc>
 800816a:	4603      	mov	r3, r0
 800816c:	673b      	str	r3, [r7, #112]	; 0x70
	strcpy(result, combinedString);
 800816e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008172:	4619      	mov	r1, r3
 8008174:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8008176:	f004 fe33 	bl	800cde0 <strcpy>
	return result;
 800817a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
}
 800817c:	4618      	mov	r0, r3
 800817e:	3778      	adds	r7, #120	; 0x78
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}
 8008184:	20000c48 	.word	0x20000c48
 8008188:	20000c3a 	.word	0x20000c3a
 800818c:	20000c3d 	.word	0x20000c3d
 8008190:	20000c3e 	.word	0x20000c3e
 8008194:	20000c3f 	.word	0x20000c3f
 8008198:	20000c46 	.word	0x20000c46
 800819c:	20000c40 	.word	0x20000c40
 80081a0:	20000c41 	.word	0x20000c41
 80081a4:	20000c45 	.word	0x20000c45
 80081a8:	20000c42 	.word	0x20000c42
 80081ac:	20000c52 	.word	0x20000c52
 80081b0:	20000c43 	.word	0x20000c43
 80081b4:	20000c53 	.word	0x20000c53
 80081b8:	20000c44 	.word	0x20000c44
 80081bc:	20000c54 	.word	0x20000c54
 80081c0:	20000c47 	.word	0x20000c47
 80081c4:	20000c49 	.word	0x20000c49
 80081c8:	20000c4a 	.word	0x20000c4a
 80081cc:	20000c4b 	.word	0x20000c4b
 80081d0:	20000c4c 	.word	0x20000c4c
 80081d4:	20000c4d 	.word	0x20000c4d
 80081d8:	20000c4e 	.word	0x20000c4e
 80081dc:	20000c4f 	.word	0x20000c4f
 80081e0:	20000c50 	.word	0x20000c50
 80081e4:	20000c51 	.word	0x20000c51
 80081e8:	20000c55 	.word	0x20000c55
 80081ec:	20000c57 	.word	0x20000c57
 80081f0:	20000c36 	.word	0x20000c36
 80081f4:	20000c37 	.word	0x20000c37
 80081f8:	200009b1 	.word	0x200009b1
 80081fc:	200009b2 	.word	0x200009b2
 8008200:	20000c38 	.word	0x20000c38
 8008204:	20000c5a 	.word	0x20000c5a
 8008208:	20000b28 	.word	0x20000b28
 800820c:	20000940 	.word	0x20000940
 8008210:	0800e2ec 	.word	0x0800e2ec

08008214 <mainLoop>:

void mainLoop() {
 8008214:	b580      	push	{r7, lr}
 8008216:	b084      	sub	sp, #16
 8008218:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 800821a:	f7fd fffb 	bl	8006214 <checkLCDBacklight>

		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 800821e:	2101      	movs	r1, #1
 8008220:	48ac      	ldr	r0, [pc, #688]	; (80084d4 <mainLoop+0x2c0>)
 8008222:	f001 fc45 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8008226:	4603      	mov	r3, r0
 8008228:	2b00      	cmp	r3, #0
 800822a:	d136      	bne.n	800829a <mainLoop+0x86>
 800822c:	2108      	movs	r1, #8
 800822e:	48aa      	ldr	r0, [pc, #680]	; (80084d8 <mainLoop+0x2c4>)
 8008230:	f001 fc3e 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8008234:	4603      	mov	r3, r0
 8008236:	2b00      	cmp	r3, #0
 8008238:	d12f      	bne.n	800829a <mainLoop+0x86>
 800823a:	2102      	movs	r1, #2
 800823c:	48a5      	ldr	r0, [pc, #660]	; (80084d4 <mainLoop+0x2c0>)
 800823e:	f001 fc37 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8008242:	4603      	mov	r3, r0
 8008244:	2b00      	cmp	r3, #0
 8008246:	d128      	bne.n	800829a <mainLoop+0x86>
 8008248:	2104      	movs	r1, #4
 800824a:	48a2      	ldr	r0, [pc, #648]	; (80084d4 <mainLoop+0x2c0>)
 800824c:	f001 fc30 	bl	8009ab0 <HAL_GPIO_ReadPin>
 8008250:	4603      	mov	r3, r0
 8008252:	2b00      	cmp	r3, #0
 8008254:	d121      	bne.n	800829a <mainLoop+0x86>
 8008256:	2108      	movs	r1, #8
 8008258:	489e      	ldr	r0, [pc, #632]	; (80084d4 <mainLoop+0x2c0>)
 800825a:	f001 fc29 	bl	8009ab0 <HAL_GPIO_ReadPin>
 800825e:	4603      	mov	r3, r0
 8008260:	2b00      	cmp	r3, #0
 8008262:	d11a      	bne.n	800829a <mainLoop+0x86>
 8008264:	2180      	movs	r1, #128	; 0x80
 8008266:	489c      	ldr	r0, [pc, #624]	; (80084d8 <mainLoop+0x2c4>)
 8008268:	f001 fc22 	bl	8009ab0 <HAL_GPIO_ReadPin>
 800826c:	4603      	mov	r3, r0
 800826e:	2b01      	cmp	r3, #1
 8008270:	d113      	bne.n	800829a <mainLoop+0x86>
 8008272:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008276:	4898      	ldr	r0, [pc, #608]	; (80084d8 <mainLoop+0x2c4>)
 8008278:	f001 fc1a 	bl	8009ab0 <HAL_GPIO_ReadPin>
 800827c:	4603      	mov	r3, r0
 800827e:	2b01      	cmp	r3, #1
 8008280:	d10b      	bne.n	800829a <mainLoop+0x86>
 8008282:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008286:	4894      	ldr	r0, [pc, #592]	; (80084d8 <mainLoop+0x2c4>)
 8008288:	f001 fc12 	bl	8009ab0 <HAL_GPIO_ReadPin>
 800828c:	4603      	mov	r3, r0
 800828e:	2b01      	cmp	r3, #1
 8008290:	d103      	bne.n	800829a <mainLoop+0x86>
			butonKontrol=0;
 8008292:	4b92      	ldr	r3, [pc, #584]	; (80084dc <mainLoop+0x2c8>)
 8008294:	2200      	movs	r2, #0
 8008296:	701a      	strb	r2, [r3, #0]
 8008298:	e003      	b.n	80082a2 <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 800829a:	4b91      	ldr	r3, [pc, #580]	; (80084e0 <mainLoop+0x2cc>)
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	4a91      	ldr	r2, [pc, #580]	; (80084e4 <mainLoop+0x2d0>)
 80082a0:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 80082a2:	4b91      	ldr	r3, [pc, #580]	; (80084e8 <mainLoop+0x2d4>)
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d039      	beq.n	800831e <mainLoop+0x10a>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80082aa:	bf00      	nop
 80082ac:	488f      	ldr	r0, [pc, #572]	; (80084ec <mainLoop+0x2d8>)
 80082ae:	f002 fa28 	bl	800a702 <HAL_I2C_GetError>
 80082b2:	4603      	mov	r3, r0
 80082b4:	2b04      	cmp	r3, #4
 80082b6:	d0f9      	beq.n	80082ac <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80082b8:	bf00      	nop
 80082ba:	488c      	ldr	r0, [pc, #560]	; (80084ec <mainLoop+0x2d8>)
 80082bc:	f002 fa14 	bl	800a6e8 <HAL_I2C_GetState>
 80082c0:	4603      	mov	r3, r0
 80082c2:	2b20      	cmp	r3, #32
 80082c4:	d1f9      	bne.n	80082ba <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1,0xA0,0,63,eepromData,63,3000);
 80082c6:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80082ca:	9302      	str	r3, [sp, #8]
 80082cc:	233f      	movs	r3, #63	; 0x3f
 80082ce:	9301      	str	r3, [sp, #4]
 80082d0:	4b87      	ldr	r3, [pc, #540]	; (80084f0 <mainLoop+0x2dc>)
 80082d2:	9300      	str	r3, [sp, #0]
 80082d4:	233f      	movs	r3, #63	; 0x3f
 80082d6:	2200      	movs	r2, #0
 80082d8:	21a0      	movs	r1, #160	; 0xa0
 80082da:	4884      	ldr	r0, [pc, #528]	; (80084ec <mainLoop+0x2d8>)
 80082dc:	f001 fea2 	bl	800a024 <HAL_I2C_Mem_Write>
		  HAL_Delay(5);
 80082e0:	2005      	movs	r0, #5
 80082e2:	f000 fe15 	bl	8008f10 <HAL_Delay>

		  hafizaYaz=0;
 80082e6:	4b80      	ldr	r3, [pc, #512]	; (80084e8 <mainLoop+0x2d4>)
 80082e8:	2200      	movs	r2, #0
 80082ea:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 80082ec:	4b81      	ldr	r3, [pc, #516]	; (80084f4 <mainLoop+0x2e0>)
 80082ee:	781b      	ldrb	r3, [r3, #0]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d105      	bne.n	8008300 <mainLoop+0xec>
			  lcd_print(2,1,"Data yazildi    ");
 80082f4:	4a80      	ldr	r2, [pc, #512]	; (80084f8 <mainLoop+0x2e4>)
 80082f6:	2101      	movs	r1, #1
 80082f8:	2002      	movs	r0, #2
 80082fa:	f7f8 f9b5 	bl	8000668 <lcd_print>
 80082fe:	e008      	b.n	8008312 <mainLoop+0xfe>
		  } else if(dilSecim==1) {
 8008300:	4b7c      	ldr	r3, [pc, #496]	; (80084f4 <mainLoop+0x2e0>)
 8008302:	781b      	ldrb	r3, [r3, #0]
 8008304:	2b01      	cmp	r3, #1
 8008306:	d104      	bne.n	8008312 <mainLoop+0xfe>
			  lcd_print(2,1,"Data Wrote      ");
 8008308:	4a7c      	ldr	r2, [pc, #496]	; (80084fc <mainLoop+0x2e8>)
 800830a:	2101      	movs	r1, #1
 800830c:	2002      	movs	r0, #2
 800830e:	f7f8 f9ab 	bl	8000668 <lcd_print>
		  }

		  HAL_Delay(1000);
 8008312:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008316:	f000 fdfb 	bl	8008f10 <HAL_Delay>
		  lcd_clear();
 800831a:	f7f8 f9d1 	bl	80006c0 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 800831e:	4b78      	ldr	r3, [pc, #480]	; (8008500 <mainLoop+0x2ec>)
 8008320:	781b      	ldrb	r3, [r3, #0]
 8008322:	f083 0301 	eor.w	r3, r3, #1
 8008326:	b2db      	uxtb	r3, r3
 8008328:	2b00      	cmp	r3, #0
 800832a:	d06e      	beq.n	800840a <mainLoop+0x1f6>
 800832c:	486f      	ldr	r0, [pc, #444]	; (80084ec <mainLoop+0x2d8>)
 800832e:	f002 f9db 	bl	800a6e8 <HAL_I2C_GetState>
 8008332:	4603      	mov	r3, r0
 8008334:	2b20      	cmp	r3, #32
 8008336:	d168      	bne.n	800840a <mainLoop+0x1f6>
		  if(ilkOkuma==0) {
 8008338:	4b72      	ldr	r3, [pc, #456]	; (8008504 <mainLoop+0x2f0>)
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	f083 0301 	eor.w	r3, r3, #1
 8008340:	b2db      	uxtb	r3, r3
 8008342:	2b00      	cmp	r3, #0
 8008344:	d044      	beq.n	80083d0 <mainLoop+0x1bc>
			  lcd_print(1,1,"   **EEPROM**   ");
 8008346:	4a70      	ldr	r2, [pc, #448]	; (8008508 <mainLoop+0x2f4>)
 8008348:	2101      	movs	r1, #1
 800834a:	2001      	movs	r0, #1
 800834c:	f7f8 f98c 	bl	8000668 <lcd_print>
			  if(dilSecim==0) {
 8008350:	4b68      	ldr	r3, [pc, #416]	; (80084f4 <mainLoop+0x2e0>)
 8008352:	781b      	ldrb	r3, [r3, #0]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d105      	bne.n	8008364 <mainLoop+0x150>
				  lcd_print(2,1,"Data Okunuyor...");
 8008358:	4a6c      	ldr	r2, [pc, #432]	; (800850c <mainLoop+0x2f8>)
 800835a:	2101      	movs	r1, #1
 800835c:	2002      	movs	r0, #2
 800835e:	f7f8 f983 	bl	8000668 <lcd_print>
 8008362:	e008      	b.n	8008376 <mainLoop+0x162>
			  } else if(dilSecim==1) {
 8008364:	4b63      	ldr	r3, [pc, #396]	; (80084f4 <mainLoop+0x2e0>)
 8008366:	781b      	ldrb	r3, [r3, #0]
 8008368:	2b01      	cmp	r3, #1
 800836a:	d104      	bne.n	8008376 <mainLoop+0x162>
				  lcd_print(2,1,"Data Reading... ");
 800836c:	4a68      	ldr	r2, [pc, #416]	; (8008510 <mainLoop+0x2fc>)
 800836e:	2101      	movs	r1, #1
 8008370:	2002      	movs	r0, #2
 8008372:	f7f8 f979 	bl	8000668 <lcd_print>
			  }
			  HAL_Delay(1000);
 8008376:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800837a:	f000 fdc9 	bl	8008f10 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800837e:	bf00      	nop
 8008380:	485a      	ldr	r0, [pc, #360]	; (80084ec <mainLoop+0x2d8>)
 8008382:	f002 f9be 	bl	800a702 <HAL_I2C_GetError>
 8008386:	4603      	mov	r3, r0
 8008388:	2b04      	cmp	r3, #4
 800838a:	d0f9      	beq.n	8008380 <mainLoop+0x16c>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800838c:	e003      	b.n	8008396 <mainLoop+0x182>
				  HAL_Delay(1000);
 800838e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008392:	f000 fdbd 	bl	8008f10 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8008396:	4855      	ldr	r0, [pc, #340]	; (80084ec <mainLoop+0x2d8>)
 8008398:	f002 f9a6 	bl	800a6e8 <HAL_I2C_GetState>
 800839c:	4603      	mov	r3, r0
 800839e:	2b20      	cmp	r3, #32
 80083a0:	d1f5      	bne.n	800838e <mainLoop+0x17a>
			  }

			  if(dilSecim==0) {
 80083a2:	4b54      	ldr	r3, [pc, #336]	; (80084f4 <mainLoop+0x2e0>)
 80083a4:	781b      	ldrb	r3, [r3, #0]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d105      	bne.n	80083b6 <mainLoop+0x1a2>
				  lcd_print(2,1,"Data Okundu.    ");
 80083aa:	4a5a      	ldr	r2, [pc, #360]	; (8008514 <mainLoop+0x300>)
 80083ac:	2101      	movs	r1, #1
 80083ae:	2002      	movs	r0, #2
 80083b0:	f7f8 f95a 	bl	8000668 <lcd_print>
 80083b4:	e008      	b.n	80083c8 <mainLoop+0x1b4>
			  } else if(dilSecim==1) {
 80083b6:	4b4f      	ldr	r3, [pc, #316]	; (80084f4 <mainLoop+0x2e0>)
 80083b8:	781b      	ldrb	r3, [r3, #0]
 80083ba:	2b01      	cmp	r3, #1
 80083bc:	d104      	bne.n	80083c8 <mainLoop+0x1b4>
				  lcd_print(2,1,"Data Read.      ");
 80083be:	4a56      	ldr	r2, [pc, #344]	; (8008518 <mainLoop+0x304>)
 80083c0:	2101      	movs	r1, #1
 80083c2:	2002      	movs	r0, #2
 80083c4:	f7f8 f950 	bl	8000668 <lcd_print>
			  }

			  ilkOkuma=1;
 80083c8:	4b4e      	ldr	r3, [pc, #312]	; (8008504 <mainLoop+0x2f0>)
 80083ca:	2201      	movs	r2, #1
 80083cc:	701a      	strb	r2, [r3, #0]
 80083ce:	e014      	b.n	80083fa <mainLoop+0x1e6>
		  } else {
			  if(dilSecim==0) {
 80083d0:	4b48      	ldr	r3, [pc, #288]	; (80084f4 <mainLoop+0x2e0>)
 80083d2:	781b      	ldrb	r3, [r3, #0]
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d105      	bne.n	80083e4 <mainLoop+0x1d0>
				  lcd_print(2,1,"Deger Kaydedildi");
 80083d8:	4a50      	ldr	r2, [pc, #320]	; (800851c <mainLoop+0x308>)
 80083da:	2101      	movs	r1, #1
 80083dc:	2002      	movs	r0, #2
 80083de:	f7f8 f943 	bl	8000668 <lcd_print>
 80083e2:	e008      	b.n	80083f6 <mainLoop+0x1e2>
			  } else if(dilSecim==1) {
 80083e4:	4b43      	ldr	r3, [pc, #268]	; (80084f4 <mainLoop+0x2e0>)
 80083e6:	781b      	ldrb	r3, [r3, #0]
 80083e8:	2b01      	cmp	r3, #1
 80083ea:	d104      	bne.n	80083f6 <mainLoop+0x1e2>
				  lcd_print(2,1,"Value Saved     ");
 80083ec:	4a4c      	ldr	r2, [pc, #304]	; (8008520 <mainLoop+0x30c>)
 80083ee:	2101      	movs	r1, #1
 80083f0:	2002      	movs	r0, #2
 80083f2:	f7f8 f939 	bl	8000668 <lcd_print>
			  }
			  lcd_clear();
 80083f6:	f7f8 f963 	bl	80006c0 <lcd_clear>
		  }

		  lcd_clear();
 80083fa:	f7f8 f961 	bl	80006c0 <lcd_clear>

		  eepromKontrol(1);
 80083fe:	2001      	movs	r0, #1
 8008400:	f7fd fac6 	bl	8005990 <eepromKontrol>
		  hafizaOku=1;
 8008404:	4b3e      	ldr	r3, [pc, #248]	; (8008500 <mainLoop+0x2ec>)
 8008406:	2201      	movs	r2, #1
 8008408:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 800840a:	4b46      	ldr	r3, [pc, #280]	; (8008524 <mainLoop+0x310>)
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d11c      	bne.n	800844c <mainLoop+0x238>
 8008412:	4b45      	ldr	r3, [pc, #276]	; (8008528 <mainLoop+0x314>)
 8008414:	781b      	ldrb	r3, [r3, #0]
 8008416:	f083 0301 	eor.w	r3, r3, #1
 800841a:	b2db      	uxtb	r3, r3
 800841c:	2b00      	cmp	r3, #0
 800841e:	d015      	beq.n	800844c <mainLoop+0x238>
 8008420:	4b42      	ldr	r3, [pc, #264]	; (800852c <mainLoop+0x318>)
 8008422:	781b      	ldrb	r3, [r3, #0]
 8008424:	2b00      	cmp	r3, #0
 8008426:	d111      	bne.n	800844c <mainLoop+0x238>
			lcd_clear();
 8008428:	f7f8 f94a 	bl	80006c0 <lcd_clear>
			HAL_Delay(10);
 800842c:	200a      	movs	r0, #10
 800842e:	f000 fd6f 	bl	8008f10 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 8008432:	4a3f      	ldr	r2, [pc, #252]	; (8008530 <mainLoop+0x31c>)
 8008434:	2101      	movs	r1, #1
 8008436:	2001      	movs	r0, #1
 8008438:	f7f8 f916 	bl	8000668 <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 800843c:	4a3d      	ldr	r2, [pc, #244]	; (8008534 <mainLoop+0x320>)
 800843e:	2101      	movs	r1, #1
 8008440:	2002      	movs	r0, #2
 8008442:	f7f8 f911 	bl	8000668 <lcd_print>
			mesajYazildi=1;
 8008446:	4b38      	ldr	r3, [pc, #224]	; (8008528 <mainLoop+0x314>)
 8008448:	2201      	movs	r2, #1
 800844a:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 800844c:	4b35      	ldr	r3, [pc, #212]	; (8008524 <mainLoop+0x310>)
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d112      	bne.n	800847a <mainLoop+0x266>
 8008454:	2102      	movs	r1, #2
 8008456:	481f      	ldr	r0, [pc, #124]	; (80084d4 <mainLoop+0x2c0>)
 8008458:	f001 fb2a 	bl	8009ab0 <HAL_GPIO_ReadPin>
 800845c:	4603      	mov	r3, r0
 800845e:	2b01      	cmp	r3, #1
 8008460:	d10b      	bne.n	800847a <mainLoop+0x266>
 8008462:	2104      	movs	r1, #4
 8008464:	481b      	ldr	r0, [pc, #108]	; (80084d4 <mainLoop+0x2c0>)
 8008466:	f001 fb23 	bl	8009ab0 <HAL_GPIO_ReadPin>
 800846a:	4603      	mov	r3, r0
 800846c:	2b01      	cmp	r3, #1
 800846e:	d104      	bne.n	800847a <mainLoop+0x266>
			menuGiris=1;
 8008470:	4b2c      	ldr	r3, [pc, #176]	; (8008524 <mainLoop+0x310>)
 8008472:	2201      	movs	r2, #1
 8008474:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8008476:	f7f8 f923 	bl	80006c0 <lcd_clear>
		}

		if(menuGiris==1) {
 800847a:	4b2a      	ldr	r3, [pc, #168]	; (8008524 <mainLoop+0x310>)
 800847c:	781b      	ldrb	r3, [r3, #0]
 800847e:	2b01      	cmp	r3, #1
 8008480:	d102      	bne.n	8008488 <mainLoop+0x274>
			menu(&hi2c1);
 8008482:	481a      	ldr	r0, [pc, #104]	; (80084ec <mainLoop+0x2d8>)
 8008484:	f7f8 fff2 	bl	800146c <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8008488:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800848c:	4812      	ldr	r0, [pc, #72]	; (80084d8 <mainLoop+0x2c4>)
 800848e:	f001 fb3e 	bl	8009b0e <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 8008492:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008496:	4828      	ldr	r0, [pc, #160]	; (8008538 <mainLoop+0x324>)
 8008498:	f001 fb0a 	bl	8009ab0 <HAL_GPIO_ReadPin>
 800849c:	4603      	mov	r3, r0
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d10a      	bne.n	80084b8 <mainLoop+0x2a4>
 80084a2:	4b26      	ldr	r3, [pc, #152]	; (800853c <mainLoop+0x328>)
 80084a4:	781b      	ldrb	r3, [r3, #0]
 80084a6:	f083 0301 	eor.w	r3, r3, #1
 80084aa:	b2db      	uxtb	r3, r3
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d003      	beq.n	80084b8 <mainLoop+0x2a4>
			stopVar=1;
 80084b0:	4b23      	ldr	r3, [pc, #140]	; (8008540 <mainLoop+0x32c>)
 80084b2:	2201      	movs	r2, #1
 80084b4:	701a      	strb	r2, [r3, #0]
 80084b6:	e002      	b.n	80084be <mainLoop+0x2aa>
		} else {
			stopVar=0;
 80084b8:	4b21      	ldr	r3, [pc, #132]	; (8008540 <mainLoop+0x32c>)
 80084ba:	2200      	movs	r2, #0
 80084bc:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 80084be:	f7fd fec9 	bl	8006254 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 80084c2:	f7fd fefb 	bl	80062bc <checkBasGonder>

		/******** Kapı Secimleri ***********/
		checkKapiSecimleri();
 80084c6:	f7fd ff3f 	bl	8006348 <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/
		/*MOTOR CALISIYOR*/
		checkAktifCalisma();
 80084ca:	f7fd ff8f 	bl	80063ec <checkAktifCalisma>

		// DEMO MOD BASLIYOR
		// DEMO YUKARI CALISMA
		checkDemoModCalisma();
 80084ce:	f7ff fadd 	bl	8007a8c <checkDemoModCalisma>
		checkLCDBacklight();
 80084d2:	e6a2      	b.n	800821a <mainLoop+0x6>
 80084d4:	40010800 	.word	0x40010800
 80084d8:	40011000 	.word	0x40011000
 80084dc:	20000c68 	.word	0x20000c68
 80084e0:	20000bc4 	.word	0x20000bc4
 80084e4:	20000be0 	.word	0x20000be0
 80084e8:	20000c65 	.word	0x20000c65
 80084ec:	20000df8 	.word	0x20000df8
 80084f0:	20000b28 	.word	0x20000b28
 80084f4:	20000c5a 	.word	0x20000c5a
 80084f8:	0800e2f0 	.word	0x0800e2f0
 80084fc:	0800e304 	.word	0x0800e304
 8008500:	20000c66 	.word	0x20000c66
 8008504:	20000c67 	.word	0x20000c67
 8008508:	0800e318 	.word	0x0800e318
 800850c:	0800e32c 	.word	0x0800e32c
 8008510:	0800e340 	.word	0x0800e340
 8008514:	0800e354 	.word	0x0800e354
 8008518:	0800e368 	.word	0x0800e368
 800851c:	0800e37c 	.word	0x0800e37c
 8008520:	0800e390 	.word	0x0800e390
 8008524:	20000c56 	.word	0x20000c56
 8008528:	20000c6d 	.word	0x20000c6d
 800852c:	20000c57 	.word	0x20000c57
 8008530:	0800e254 	.word	0x0800e254
 8008534:	0800e268 	.word	0x0800e268
 8008538:	40010c00 	.word	0x40010c00
 800853c:	20000c8e 	.word	0x20000c8e
 8008540:	20000c8b 	.word	0x20000c8b

08008544 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 800854c:	4b04      	ldr	r3, [pc, #16]	; (8008560 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	3301      	adds	r3, #1
 8008552:	4a03      	ldr	r2, [pc, #12]	; (8008560 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8008554:	6013      	str	r3, [r2, #0]
}
 8008556:	bf00      	nop
 8008558:	370c      	adds	r7, #12
 800855a:	46bd      	mov	sp, r7
 800855c:	bc80      	pop	{r7}
 800855e:	4770      	bx	lr
 8008560:	20000bc4 	.word	0x20000bc4

08008564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8008568:	f000 fc70 	bl	8008e4c <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 800856c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8008570:	f000 fcce 	bl	8008f10 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008574:	f000 f8a0 	bl	80086b8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008578:	f000 f9c2 	bl	8008900 <MX_GPIO_Init>
  MX_CAN_Init();
 800857c:	f000 f8e2 	bl	8008744 <MX_CAN_Init>
  MX_I2C1_Init();
 8008580:	f000 f914 	bl	80087ac <MX_I2C1_Init>
  MX_TIM1_Init();
 8008584:	f000 f940 	bl	8008808 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8008588:	f000 f990 	bl	80088ac <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800858c:	2201      	movs	r2, #1
 800858e:	2140      	movs	r1, #64	; 0x40
 8008590:	4840      	ldr	r0, [pc, #256]	; (8008694 <main+0x130>)
 8008592:	f001 faa4 	bl	8009ade <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8008596:	2201      	movs	r2, #1
 8008598:	2180      	movs	r1, #128	; 0x80
 800859a:	483e      	ldr	r0, [pc, #248]	; (8008694 <main+0x130>)
 800859c:	f001 fa9f 	bl	8009ade <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80085a0:	200a      	movs	r0, #10
 80085a2:	f000 fcb5 	bl	8008f10 <HAL_Delay>
  lcd_init();
 80085a6:	f7f8 f82d 	bl	8000604 <lcd_init>
  HAL_Delay(10);
 80085aa:	200a      	movs	r0, #10
 80085ac:	f000 fcb0 	bl	8008f10 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 80085b0:	4839      	ldr	r0, [pc, #228]	; (8008698 <main+0x134>)
 80085b2:	f003 f947 	bl	800b844 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80085b6:	bf00      	nop
 80085b8:	4838      	ldr	r0, [pc, #224]	; (800869c <main+0x138>)
 80085ba:	f002 f8a2 	bl	800a702 <HAL_I2C_GetError>
 80085be:	4603      	mov	r3, r0
 80085c0:	2b04      	cmp	r3, #4
 80085c2:	d0f9      	beq.n	80085b8 <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80085c4:	bf00      	nop
 80085c6:	4835      	ldr	r0, [pc, #212]	; (800869c <main+0x138>)
 80085c8:	f002 f88e 	bl	800a6e8 <HAL_I2C_GetState>
 80085cc:	4603      	mov	r3, r0
 80085ce:	2b20      	cmp	r3, #32
 80085d0:	d1f9      	bne.n	80085c6 <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80085d2:	2200      	movs	r2, #0
 80085d4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80085d8:	482e      	ldr	r0, [pc, #184]	; (8008694 <main+0x130>)
 80085da:	f001 fa80 	bl	8009ade <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80085de:	2200      	movs	r2, #0
 80085e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80085e4:	482b      	ldr	r0, [pc, #172]	; (8008694 <main+0x130>)
 80085e6:	f001 fa7a 	bl	8009ade <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80085ea:	2200      	movs	r2, #0
 80085ec:	2104      	movs	r1, #4
 80085ee:	4829      	ldr	r0, [pc, #164]	; (8008694 <main+0x130>)
 80085f0:	f001 fa75 	bl	8009ade <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 80085f4:	2200      	movs	r2, #0
 80085f6:	2102      	movs	r1, #2
 80085f8:	4826      	ldr	r0, [pc, #152]	; (8008694 <main+0x130>)
 80085fa:	f001 fa70 	bl	8009ade <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 80085fe:	2200      	movs	r2, #0
 8008600:	2101      	movs	r1, #1
 8008602:	4824      	ldr	r0, [pc, #144]	; (8008694 <main+0x130>)
 8008604:	f001 fa6b 	bl	8009ade <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8008608:	2200      	movs	r2, #0
 800860a:	2120      	movs	r1, #32
 800860c:	4824      	ldr	r0, [pc, #144]	; (80086a0 <main+0x13c>)
 800860e:	f001 fa66 	bl	8009ade <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8008612:	2200      	movs	r2, #0
 8008614:	2110      	movs	r1, #16
 8008616:	4822      	ldr	r0, [pc, #136]	; (80086a0 <main+0x13c>)
 8008618:	f001 fa61 	bl	8009ade <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 800861c:	2200      	movs	r2, #0
 800861e:	2180      	movs	r1, #128	; 0x80
 8008620:	4820      	ldr	r0, [pc, #128]	; (80086a4 <main+0x140>)
 8008622:	f001 fa5c 	bl	8009ade <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8008626:	2200      	movs	r2, #0
 8008628:	2140      	movs	r1, #64	; 0x40
 800862a:	481e      	ldr	r0, [pc, #120]	; (80086a4 <main+0x140>)
 800862c:	f001 fa57 	bl	8009ade <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8008630:	2200      	movs	r2, #0
 8008632:	2120      	movs	r1, #32
 8008634:	481b      	ldr	r0, [pc, #108]	; (80086a4 <main+0x140>)
 8008636:	f001 fa52 	bl	8009ade <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 800863a:	2200      	movs	r2, #0
 800863c:	2110      	movs	r1, #16
 800863e:	4819      	ldr	r0, [pc, #100]	; (80086a4 <main+0x140>)
 8008640:	f001 fa4d 	bl	8009ade <HAL_GPIO_WritePin>

  i2cTest();
 8008644:	f7fd fd38 	bl	80060b8 <i2cTest>
  HAL_Delay(100);
 8008648:	2064      	movs	r0, #100	; 0x64
 800864a:	f000 fc61 	bl	8008f10 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 800864e:	4a16      	ldr	r2, [pc, #88]	; (80086a8 <main+0x144>)
 8008650:	2101      	movs	r1, #1
 8008652:	2001      	movs	r0, #1
 8008654:	f7f8 f808 	bl	8000668 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 8008658:	4a14      	ldr	r2, [pc, #80]	; (80086ac <main+0x148>)
 800865a:	2101      	movs	r1, #1
 800865c:	2002      	movs	r0, #2
 800865e:	f7f8 f803 	bl	8000668 <lcd_print>
  HAL_Delay(1000);
 8008662:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8008666:	f000 fc53 	bl	8008f10 <HAL_Delay>
  lcd_clear();
 800866a:	f7f8 f829 	bl	80006c0 <lcd_clear>

  eepromKontrol(0);
 800866e:	2000      	movs	r0, #0
 8008670:	f7fd f98e 	bl	8005990 <eepromKontrol>
  HAL_Delay(200);
 8008674:	20c8      	movs	r0, #200	; 0xc8
 8008676:	f000 fc4b 	bl	8008f10 <HAL_Delay>

  lcd_clear();
 800867a:	f7f8 f821 	bl	80006c0 <lcd_clear>
  HAL_Delay(200);
 800867e:	20c8      	movs	r0, #200	; 0xc8
 8008680:	f000 fc46 	bl	8008f10 <HAL_Delay>

  backLightTimer = millis;
 8008684:	4b0a      	ldr	r3, [pc, #40]	; (80086b0 <main+0x14c>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4a0a      	ldr	r2, [pc, #40]	; (80086b4 <main+0x150>)
 800868a:	6013      	str	r3, [r2, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 800868c:	f7ff fdc2 	bl	8008214 <mainLoop>
 8008690:	e7fc      	b.n	800868c <main+0x128>
 8008692:	bf00      	nop
 8008694:	40010c00 	.word	0x40010c00
 8008698:	20000e4c 	.word	0x20000e4c
 800869c:	20000df8 	.word	0x20000df8
 80086a0:	40011000 	.word	0x40011000
 80086a4:	40010800 	.word	0x40010800
 80086a8:	0800e3a4 	.word	0x0800e3a4
 80086ac:	0800e3b8 	.word	0x0800e3b8
 80086b0:	20000bc4 	.word	0x20000bc4
 80086b4:	20000be0 	.word	0x20000be0

080086b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80086b8:	b580      	push	{r7, lr}
 80086ba:	b090      	sub	sp, #64	; 0x40
 80086bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80086be:	f107 0318 	add.w	r3, r7, #24
 80086c2:	2228      	movs	r2, #40	; 0x28
 80086c4:	2100      	movs	r1, #0
 80086c6:	4618      	mov	r0, r3
 80086c8:	f004 fb36 	bl	800cd38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80086cc:	1d3b      	adds	r3, r7, #4
 80086ce:	2200      	movs	r2, #0
 80086d0:	601a      	str	r2, [r3, #0]
 80086d2:	605a      	str	r2, [r3, #4]
 80086d4:	609a      	str	r2, [r3, #8]
 80086d6:	60da      	str	r2, [r3, #12]
 80086d8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80086da:	2301      	movs	r3, #1
 80086dc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80086de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80086e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80086e4:	2300      	movs	r3, #0
 80086e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80086e8:	2301      	movs	r3, #1
 80086ea:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80086ec:	2302      	movs	r3, #2
 80086ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80086f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80086f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80086f6:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80086fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80086fc:	f107 0318 	add.w	r3, r7, #24
 8008700:	4618      	mov	r0, r3
 8008702:	f002 fc3f 	bl	800af84 <HAL_RCC_OscConfig>
 8008706:	4603      	mov	r3, r0
 8008708:	2b00      	cmp	r3, #0
 800870a:	d001      	beq.n	8008710 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800870c:	f000 f9a2 	bl	8008a54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008710:	230f      	movs	r3, #15
 8008712:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008714:	2302      	movs	r3, #2
 8008716:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008718:	2300      	movs	r3, #0
 800871a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800871c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008720:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008722:	2300      	movs	r3, #0
 8008724:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008726:	1d3b      	adds	r3, r7, #4
 8008728:	2102      	movs	r1, #2
 800872a:	4618      	mov	r0, r3
 800872c:	f002 feac 	bl	800b488 <HAL_RCC_ClockConfig>
 8008730:	4603      	mov	r3, r0
 8008732:	2b00      	cmp	r3, #0
 8008734:	d001      	beq.n	800873a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8008736:	f000 f98d 	bl	8008a54 <Error_Handler>
  }
}
 800873a:	bf00      	nop
 800873c:	3740      	adds	r7, #64	; 0x40
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}
	...

08008744 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8008748:	4b16      	ldr	r3, [pc, #88]	; (80087a4 <MX_CAN_Init+0x60>)
 800874a:	4a17      	ldr	r2, [pc, #92]	; (80087a8 <MX_CAN_Init+0x64>)
 800874c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800874e:	4b15      	ldr	r3, [pc, #84]	; (80087a4 <MX_CAN_Init+0x60>)
 8008750:	2210      	movs	r2, #16
 8008752:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8008754:	4b13      	ldr	r3, [pc, #76]	; (80087a4 <MX_CAN_Init+0x60>)
 8008756:	2200      	movs	r2, #0
 8008758:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800875a:	4b12      	ldr	r3, [pc, #72]	; (80087a4 <MX_CAN_Init+0x60>)
 800875c:	2200      	movs	r2, #0
 800875e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8008760:	4b10      	ldr	r3, [pc, #64]	; (80087a4 <MX_CAN_Init+0x60>)
 8008762:	2200      	movs	r2, #0
 8008764:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8008766:	4b0f      	ldr	r3, [pc, #60]	; (80087a4 <MX_CAN_Init+0x60>)
 8008768:	2200      	movs	r2, #0
 800876a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800876c:	4b0d      	ldr	r3, [pc, #52]	; (80087a4 <MX_CAN_Init+0x60>)
 800876e:	2200      	movs	r2, #0
 8008770:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8008772:	4b0c      	ldr	r3, [pc, #48]	; (80087a4 <MX_CAN_Init+0x60>)
 8008774:	2200      	movs	r2, #0
 8008776:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8008778:	4b0a      	ldr	r3, [pc, #40]	; (80087a4 <MX_CAN_Init+0x60>)
 800877a:	2200      	movs	r2, #0
 800877c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800877e:	4b09      	ldr	r3, [pc, #36]	; (80087a4 <MX_CAN_Init+0x60>)
 8008780:	2200      	movs	r2, #0
 8008782:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 8008784:	4b07      	ldr	r3, [pc, #28]	; (80087a4 <MX_CAN_Init+0x60>)
 8008786:	2200      	movs	r2, #0
 8008788:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 800878a:	4b06      	ldr	r3, [pc, #24]	; (80087a4 <MX_CAN_Init+0x60>)
 800878c:	2200      	movs	r2, #0
 800878e:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 8008790:	4804      	ldr	r0, [pc, #16]	; (80087a4 <MX_CAN_Init+0x60>)
 8008792:	f000 fbe1 	bl	8008f58 <HAL_CAN_Init>
 8008796:	4603      	mov	r3, r0
 8008798:	2b00      	cmp	r3, #0
 800879a:	d001      	beq.n	80087a0 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 800879c:	f000 f95a 	bl	8008a54 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 80087a0:	bf00      	nop
 80087a2:	bd80      	pop	{r7, pc}
 80087a4:	20000dd0 	.word	0x20000dd0
 80087a8:	40006400 	.word	0x40006400

080087ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80087b0:	4b12      	ldr	r3, [pc, #72]	; (80087fc <MX_I2C1_Init+0x50>)
 80087b2:	4a13      	ldr	r2, [pc, #76]	; (8008800 <MX_I2C1_Init+0x54>)
 80087b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80087b6:	4b11      	ldr	r3, [pc, #68]	; (80087fc <MX_I2C1_Init+0x50>)
 80087b8:	4a12      	ldr	r2, [pc, #72]	; (8008804 <MX_I2C1_Init+0x58>)
 80087ba:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80087bc:	4b0f      	ldr	r3, [pc, #60]	; (80087fc <MX_I2C1_Init+0x50>)
 80087be:	2200      	movs	r2, #0
 80087c0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80087c2:	4b0e      	ldr	r3, [pc, #56]	; (80087fc <MX_I2C1_Init+0x50>)
 80087c4:	2200      	movs	r2, #0
 80087c6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80087c8:	4b0c      	ldr	r3, [pc, #48]	; (80087fc <MX_I2C1_Init+0x50>)
 80087ca:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80087ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80087d0:	4b0a      	ldr	r3, [pc, #40]	; (80087fc <MX_I2C1_Init+0x50>)
 80087d2:	2200      	movs	r2, #0
 80087d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80087d6:	4b09      	ldr	r3, [pc, #36]	; (80087fc <MX_I2C1_Init+0x50>)
 80087d8:	2200      	movs	r2, #0
 80087da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80087dc:	4b07      	ldr	r3, [pc, #28]	; (80087fc <MX_I2C1_Init+0x50>)
 80087de:	2200      	movs	r2, #0
 80087e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80087e2:	4b06      	ldr	r3, [pc, #24]	; (80087fc <MX_I2C1_Init+0x50>)
 80087e4:	2200      	movs	r2, #0
 80087e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80087e8:	4804      	ldr	r0, [pc, #16]	; (80087fc <MX_I2C1_Init+0x50>)
 80087ea:	f001 f9a9 	bl	8009b40 <HAL_I2C_Init>
 80087ee:	4603      	mov	r3, r0
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d001      	beq.n	80087f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80087f4:	f000 f92e 	bl	8008a54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 80087f8:	bf00      	nop
 80087fa:	bd80      	pop	{r7, pc}
 80087fc:	20000df8 	.word	0x20000df8
 8008800:	40005400 	.word	0x40005400
 8008804:	00061a80 	.word	0x00061a80

08008808 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b086      	sub	sp, #24
 800880c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800880e:	f107 0308 	add.w	r3, r7, #8
 8008812:	2200      	movs	r2, #0
 8008814:	601a      	str	r2, [r3, #0]
 8008816:	605a      	str	r2, [r3, #4]
 8008818:	609a      	str	r2, [r3, #8]
 800881a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800881c:	463b      	mov	r3, r7
 800881e:	2200      	movs	r2, #0
 8008820:	601a      	str	r2, [r3, #0]
 8008822:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008824:	4b1f      	ldr	r3, [pc, #124]	; (80088a4 <MX_TIM1_Init+0x9c>)
 8008826:	4a20      	ldr	r2, [pc, #128]	; (80088a8 <MX_TIM1_Init+0xa0>)
 8008828:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 800882a:	4b1e      	ldr	r3, [pc, #120]	; (80088a4 <MX_TIM1_Init+0x9c>)
 800882c:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8008830:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008832:	4b1c      	ldr	r3, [pc, #112]	; (80088a4 <MX_TIM1_Init+0x9c>)
 8008834:	2200      	movs	r2, #0
 8008836:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8008838:	4b1a      	ldr	r3, [pc, #104]	; (80088a4 <MX_TIM1_Init+0x9c>)
 800883a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800883e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008840:	4b18      	ldr	r3, [pc, #96]	; (80088a4 <MX_TIM1_Init+0x9c>)
 8008842:	2200      	movs	r2, #0
 8008844:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008846:	4b17      	ldr	r3, [pc, #92]	; (80088a4 <MX_TIM1_Init+0x9c>)
 8008848:	2200      	movs	r2, #0
 800884a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800884c:	4b15      	ldr	r3, [pc, #84]	; (80088a4 <MX_TIM1_Init+0x9c>)
 800884e:	2200      	movs	r2, #0
 8008850:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8008852:	4814      	ldr	r0, [pc, #80]	; (80088a4 <MX_TIM1_Init+0x9c>)
 8008854:	f002 ffa6 	bl	800b7a4 <HAL_TIM_Base_Init>
 8008858:	4603      	mov	r3, r0
 800885a:	2b00      	cmp	r3, #0
 800885c:	d001      	beq.n	8008862 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800885e:	f000 f8f9 	bl	8008a54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008862:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008866:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8008868:	f107 0308 	add.w	r3, r7, #8
 800886c:	4619      	mov	r1, r3
 800886e:	480d      	ldr	r0, [pc, #52]	; (80088a4 <MX_TIM1_Init+0x9c>)
 8008870:	f003 f950 	bl	800bb14 <HAL_TIM_ConfigClockSource>
 8008874:	4603      	mov	r3, r0
 8008876:	2b00      	cmp	r3, #0
 8008878:	d001      	beq.n	800887e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800887a:	f000 f8eb 	bl	8008a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800887e:	2300      	movs	r3, #0
 8008880:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008882:	2300      	movs	r3, #0
 8008884:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008886:	463b      	mov	r3, r7
 8008888:	4619      	mov	r1, r3
 800888a:	4806      	ldr	r0, [pc, #24]	; (80088a4 <MX_TIM1_Init+0x9c>)
 800888c:	f003 fb3e 	bl	800bf0c <HAL_TIMEx_MasterConfigSynchronization>
 8008890:	4603      	mov	r3, r0
 8008892:	2b00      	cmp	r3, #0
 8008894:	d001      	beq.n	800889a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8008896:	f000 f8dd 	bl	8008a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800889a:	bf00      	nop
 800889c:	3718      	adds	r7, #24
 800889e:	46bd      	mov	sp, r7
 80088a0:	bd80      	pop	{r7, pc}
 80088a2:	bf00      	nop
 80088a4:	20000e4c 	.word	0x20000e4c
 80088a8:	40012c00 	.word	0x40012c00

080088ac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80088ac:	b580      	push	{r7, lr}
 80088ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80088b0:	4b11      	ldr	r3, [pc, #68]	; (80088f8 <MX_USART1_UART_Init+0x4c>)
 80088b2:	4a12      	ldr	r2, [pc, #72]	; (80088fc <MX_USART1_UART_Init+0x50>)
 80088b4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80088b6:	4b10      	ldr	r3, [pc, #64]	; (80088f8 <MX_USART1_UART_Init+0x4c>)
 80088b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80088bc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80088be:	4b0e      	ldr	r3, [pc, #56]	; (80088f8 <MX_USART1_UART_Init+0x4c>)
 80088c0:	2200      	movs	r2, #0
 80088c2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80088c4:	4b0c      	ldr	r3, [pc, #48]	; (80088f8 <MX_USART1_UART_Init+0x4c>)
 80088c6:	2200      	movs	r2, #0
 80088c8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80088ca:	4b0b      	ldr	r3, [pc, #44]	; (80088f8 <MX_USART1_UART_Init+0x4c>)
 80088cc:	2200      	movs	r2, #0
 80088ce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80088d0:	4b09      	ldr	r3, [pc, #36]	; (80088f8 <MX_USART1_UART_Init+0x4c>)
 80088d2:	220c      	movs	r2, #12
 80088d4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80088d6:	4b08      	ldr	r3, [pc, #32]	; (80088f8 <MX_USART1_UART_Init+0x4c>)
 80088d8:	2200      	movs	r2, #0
 80088da:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80088dc:	4b06      	ldr	r3, [pc, #24]	; (80088f8 <MX_USART1_UART_Init+0x4c>)
 80088de:	2200      	movs	r2, #0
 80088e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80088e2:	4805      	ldr	r0, [pc, #20]	; (80088f8 <MX_USART1_UART_Init+0x4c>)
 80088e4:	f003 fb90 	bl	800c008 <HAL_UART_Init>
 80088e8:	4603      	mov	r3, r0
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d001      	beq.n	80088f2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80088ee:	f000 f8b1 	bl	8008a54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80088f2:	bf00      	nop
 80088f4:	bd80      	pop	{r7, pc}
 80088f6:	bf00      	nop
 80088f8:	20000e94 	.word	0x20000e94
 80088fc:	40013800 	.word	0x40013800

08008900 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008900:	b580      	push	{r7, lr}
 8008902:	b088      	sub	sp, #32
 8008904:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008906:	f107 0310 	add.w	r3, r7, #16
 800890a:	2200      	movs	r2, #0
 800890c:	601a      	str	r2, [r3, #0]
 800890e:	605a      	str	r2, [r3, #4]
 8008910:	609a      	str	r2, [r3, #8]
 8008912:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8008914:	4b4b      	ldr	r3, [pc, #300]	; (8008a44 <MX_GPIO_Init+0x144>)
 8008916:	699b      	ldr	r3, [r3, #24]
 8008918:	4a4a      	ldr	r2, [pc, #296]	; (8008a44 <MX_GPIO_Init+0x144>)
 800891a:	f043 0310 	orr.w	r3, r3, #16
 800891e:	6193      	str	r3, [r2, #24]
 8008920:	4b48      	ldr	r3, [pc, #288]	; (8008a44 <MX_GPIO_Init+0x144>)
 8008922:	699b      	ldr	r3, [r3, #24]
 8008924:	f003 0310 	and.w	r3, r3, #16
 8008928:	60fb      	str	r3, [r7, #12]
 800892a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800892c:	4b45      	ldr	r3, [pc, #276]	; (8008a44 <MX_GPIO_Init+0x144>)
 800892e:	699b      	ldr	r3, [r3, #24]
 8008930:	4a44      	ldr	r2, [pc, #272]	; (8008a44 <MX_GPIO_Init+0x144>)
 8008932:	f043 0320 	orr.w	r3, r3, #32
 8008936:	6193      	str	r3, [r2, #24]
 8008938:	4b42      	ldr	r3, [pc, #264]	; (8008a44 <MX_GPIO_Init+0x144>)
 800893a:	699b      	ldr	r3, [r3, #24]
 800893c:	f003 0320 	and.w	r3, r3, #32
 8008940:	60bb      	str	r3, [r7, #8]
 8008942:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008944:	4b3f      	ldr	r3, [pc, #252]	; (8008a44 <MX_GPIO_Init+0x144>)
 8008946:	699b      	ldr	r3, [r3, #24]
 8008948:	4a3e      	ldr	r2, [pc, #248]	; (8008a44 <MX_GPIO_Init+0x144>)
 800894a:	f043 0304 	orr.w	r3, r3, #4
 800894e:	6193      	str	r3, [r2, #24]
 8008950:	4b3c      	ldr	r3, [pc, #240]	; (8008a44 <MX_GPIO_Init+0x144>)
 8008952:	699b      	ldr	r3, [r3, #24]
 8008954:	f003 0304 	and.w	r3, r3, #4
 8008958:	607b      	str	r3, [r7, #4]
 800895a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800895c:	4b39      	ldr	r3, [pc, #228]	; (8008a44 <MX_GPIO_Init+0x144>)
 800895e:	699b      	ldr	r3, [r3, #24]
 8008960:	4a38      	ldr	r2, [pc, #224]	; (8008a44 <MX_GPIO_Init+0x144>)
 8008962:	f043 0308 	orr.w	r3, r3, #8
 8008966:	6193      	str	r3, [r2, #24]
 8008968:	4b36      	ldr	r3, [pc, #216]	; (8008a44 <MX_GPIO_Init+0x144>)
 800896a:	699b      	ldr	r3, [r3, #24]
 800896c:	f003 0308 	and.w	r3, r3, #8
 8008970:	603b      	str	r3, [r7, #0]
 8008972:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8008974:	2200      	movs	r2, #0
 8008976:	21f0      	movs	r1, #240	; 0xf0
 8008978:	4833      	ldr	r0, [pc, #204]	; (8008a48 <MX_GPIO_Init+0x148>)
 800897a:	f001 f8b0 	bl	8009ade <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 800897e:	2200      	movs	r2, #0
 8008980:	f241 0130 	movw	r1, #4144	; 0x1030
 8008984:	4831      	ldr	r0, [pc, #196]	; (8008a4c <MX_GPIO_Init+0x14c>)
 8008986:	f001 f8aa 	bl	8009ade <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 800898a:	2200      	movs	r2, #0
 800898c:	f640 4107 	movw	r1, #3079	; 0xc07
 8008990:	482f      	ldr	r0, [pc, #188]	; (8008a50 <MX_GPIO_Init+0x150>)
 8008992:	f001 f8a4 	bl	8009ade <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 8008996:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 800899a:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800899c:	2300      	movs	r3, #0
 800899e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089a0:	2300      	movs	r3, #0
 80089a2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80089a4:	f107 0310 	add.w	r3, r7, #16
 80089a8:	4619      	mov	r1, r3
 80089aa:	4828      	ldr	r0, [pc, #160]	; (8008a4c <MX_GPIO_Init+0x14c>)
 80089ac:	f000 fe20 	bl	80095f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 80089b0:	f248 130f 	movw	r3, #33039	; 0x810f
 80089b4:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80089b6:	2300      	movs	r3, #0
 80089b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089ba:	2300      	movs	r3, #0
 80089bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80089be:	f107 0310 	add.w	r3, r7, #16
 80089c2:	4619      	mov	r1, r3
 80089c4:	4820      	ldr	r0, [pc, #128]	; (8008a48 <MX_GPIO_Init+0x148>)
 80089c6:	f000 fe13 	bl	80095f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 80089ca:	23f0      	movs	r3, #240	; 0xf0
 80089cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80089ce:	2301      	movs	r3, #1
 80089d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089d2:	2300      	movs	r3, #0
 80089d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80089d6:	2302      	movs	r3, #2
 80089d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80089da:	f107 0310 	add.w	r3, r7, #16
 80089de:	4619      	mov	r1, r3
 80089e0:	4819      	ldr	r0, [pc, #100]	; (8008a48 <MX_GPIO_Init+0x148>)
 80089e2:	f000 fe05 	bl	80095f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 80089e6:	f241 0330 	movw	r3, #4144	; 0x1030
 80089ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80089ec:	2301      	movs	r3, #1
 80089ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80089f0:	2300      	movs	r3, #0
 80089f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80089f4:	2302      	movs	r3, #2
 80089f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80089f8:	f107 0310 	add.w	r3, r7, #16
 80089fc:	4619      	mov	r1, r3
 80089fe:	4813      	ldr	r0, [pc, #76]	; (8008a4c <MX_GPIO_Init+0x14c>)
 8008a00:	f000 fdf6 	bl	80095f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8008a04:	f640 4307 	movw	r3, #3079	; 0xc07
 8008a08:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008a0a:	2301      	movs	r3, #1
 8008a0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a0e:	2300      	movs	r3, #0
 8008a10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a12:	2302      	movs	r3, #2
 8008a14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008a16:	f107 0310 	add.w	r3, r7, #16
 8008a1a:	4619      	mov	r1, r3
 8008a1c:	480c      	ldr	r0, [pc, #48]	; (8008a50 <MX_GPIO_Init+0x150>)
 8008a1e:	f000 fde7 	bl	80095f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8008a22:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8008a26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008a30:	f107 0310 	add.w	r3, r7, #16
 8008a34:	4619      	mov	r1, r3
 8008a36:	4806      	ldr	r0, [pc, #24]	; (8008a50 <MX_GPIO_Init+0x150>)
 8008a38:	f000 fdda 	bl	80095f0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8008a3c:	bf00      	nop
 8008a3e:	3720      	adds	r7, #32
 8008a40:	46bd      	mov	sp, r7
 8008a42:	bd80      	pop	{r7, pc}
 8008a44:	40021000 	.word	0x40021000
 8008a48:	40010800 	.word	0x40010800
 8008a4c:	40011000 	.word	0x40011000
 8008a50:	40010c00 	.word	0x40010c00

08008a54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008a54:	b480      	push	{r7}
 8008a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8008a58:	bf00      	nop
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bc80      	pop	{r7}
 8008a5e:	4770      	bx	lr

08008a60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b085      	sub	sp, #20
 8008a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8008a66:	4b15      	ldr	r3, [pc, #84]	; (8008abc <HAL_MspInit+0x5c>)
 8008a68:	699b      	ldr	r3, [r3, #24]
 8008a6a:	4a14      	ldr	r2, [pc, #80]	; (8008abc <HAL_MspInit+0x5c>)
 8008a6c:	f043 0301 	orr.w	r3, r3, #1
 8008a70:	6193      	str	r3, [r2, #24]
 8008a72:	4b12      	ldr	r3, [pc, #72]	; (8008abc <HAL_MspInit+0x5c>)
 8008a74:	699b      	ldr	r3, [r3, #24]
 8008a76:	f003 0301 	and.w	r3, r3, #1
 8008a7a:	60bb      	str	r3, [r7, #8]
 8008a7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008a7e:	4b0f      	ldr	r3, [pc, #60]	; (8008abc <HAL_MspInit+0x5c>)
 8008a80:	69db      	ldr	r3, [r3, #28]
 8008a82:	4a0e      	ldr	r2, [pc, #56]	; (8008abc <HAL_MspInit+0x5c>)
 8008a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a88:	61d3      	str	r3, [r2, #28]
 8008a8a:	4b0c      	ldr	r3, [pc, #48]	; (8008abc <HAL_MspInit+0x5c>)
 8008a8c:	69db      	ldr	r3, [r3, #28]
 8008a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a92:	607b      	str	r3, [r7, #4]
 8008a94:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8008a96:	4b0a      	ldr	r3, [pc, #40]	; (8008ac0 <HAL_MspInit+0x60>)
 8008a98:	685b      	ldr	r3, [r3, #4]
 8008a9a:	60fb      	str	r3, [r7, #12]
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8008aa2:	60fb      	str	r3, [r7, #12]
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008aaa:	60fb      	str	r3, [r7, #12]
 8008aac:	4a04      	ldr	r2, [pc, #16]	; (8008ac0 <HAL_MspInit+0x60>)
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008ab2:	bf00      	nop
 8008ab4:	3714      	adds	r7, #20
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bc80      	pop	{r7}
 8008aba:	4770      	bx	lr
 8008abc:	40021000 	.word	0x40021000
 8008ac0:	40010000 	.word	0x40010000

08008ac4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b088      	sub	sp, #32
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008acc:	f107 0310 	add.w	r3, r7, #16
 8008ad0:	2200      	movs	r2, #0
 8008ad2:	601a      	str	r2, [r3, #0]
 8008ad4:	605a      	str	r2, [r3, #4]
 8008ad6:	609a      	str	r2, [r3, #8]
 8008ad8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	4a1c      	ldr	r2, [pc, #112]	; (8008b50 <HAL_CAN_MspInit+0x8c>)
 8008ae0:	4293      	cmp	r3, r2
 8008ae2:	d131      	bne.n	8008b48 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8008ae4:	4b1b      	ldr	r3, [pc, #108]	; (8008b54 <HAL_CAN_MspInit+0x90>)
 8008ae6:	69db      	ldr	r3, [r3, #28]
 8008ae8:	4a1a      	ldr	r2, [pc, #104]	; (8008b54 <HAL_CAN_MspInit+0x90>)
 8008aea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008aee:	61d3      	str	r3, [r2, #28]
 8008af0:	4b18      	ldr	r3, [pc, #96]	; (8008b54 <HAL_CAN_MspInit+0x90>)
 8008af2:	69db      	ldr	r3, [r3, #28]
 8008af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008af8:	60fb      	str	r3, [r7, #12]
 8008afa:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008afc:	4b15      	ldr	r3, [pc, #84]	; (8008b54 <HAL_CAN_MspInit+0x90>)
 8008afe:	699b      	ldr	r3, [r3, #24]
 8008b00:	4a14      	ldr	r2, [pc, #80]	; (8008b54 <HAL_CAN_MspInit+0x90>)
 8008b02:	f043 0304 	orr.w	r3, r3, #4
 8008b06:	6193      	str	r3, [r2, #24]
 8008b08:	4b12      	ldr	r3, [pc, #72]	; (8008b54 <HAL_CAN_MspInit+0x90>)
 8008b0a:	699b      	ldr	r3, [r3, #24]
 8008b0c:	f003 0304 	and.w	r3, r3, #4
 8008b10:	60bb      	str	r3, [r7, #8]
 8008b12:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8008b14:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008b18:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b22:	f107 0310 	add.w	r3, r7, #16
 8008b26:	4619      	mov	r1, r3
 8008b28:	480b      	ldr	r0, [pc, #44]	; (8008b58 <HAL_CAN_MspInit+0x94>)
 8008b2a:	f000 fd61 	bl	80095f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8008b2e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008b32:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008b34:	2302      	movs	r3, #2
 8008b36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008b38:	2303      	movs	r3, #3
 8008b3a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008b3c:	f107 0310 	add.w	r3, r7, #16
 8008b40:	4619      	mov	r1, r3
 8008b42:	4805      	ldr	r0, [pc, #20]	; (8008b58 <HAL_CAN_MspInit+0x94>)
 8008b44:	f000 fd54 	bl	80095f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8008b48:	bf00      	nop
 8008b4a:	3720      	adds	r7, #32
 8008b4c:	46bd      	mov	sp, r7
 8008b4e:	bd80      	pop	{r7, pc}
 8008b50:	40006400 	.word	0x40006400
 8008b54:	40021000 	.word	0x40021000
 8008b58:	40010800 	.word	0x40010800

08008b5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b088      	sub	sp, #32
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008b64:	f107 0310 	add.w	r3, r7, #16
 8008b68:	2200      	movs	r2, #0
 8008b6a:	601a      	str	r2, [r3, #0]
 8008b6c:	605a      	str	r2, [r3, #4]
 8008b6e:	609a      	str	r2, [r3, #8]
 8008b70:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	4a15      	ldr	r2, [pc, #84]	; (8008bcc <HAL_I2C_MspInit+0x70>)
 8008b78:	4293      	cmp	r3, r2
 8008b7a:	d123      	bne.n	8008bc4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008b7c:	4b14      	ldr	r3, [pc, #80]	; (8008bd0 <HAL_I2C_MspInit+0x74>)
 8008b7e:	699b      	ldr	r3, [r3, #24]
 8008b80:	4a13      	ldr	r2, [pc, #76]	; (8008bd0 <HAL_I2C_MspInit+0x74>)
 8008b82:	f043 0308 	orr.w	r3, r3, #8
 8008b86:	6193      	str	r3, [r2, #24]
 8008b88:	4b11      	ldr	r3, [pc, #68]	; (8008bd0 <HAL_I2C_MspInit+0x74>)
 8008b8a:	699b      	ldr	r3, [r3, #24]
 8008b8c:	f003 0308 	and.w	r3, r3, #8
 8008b90:	60fb      	str	r3, [r7, #12]
 8008b92:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8008b94:	23c0      	movs	r3, #192	; 0xc0
 8008b96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8008b98:	2312      	movs	r3, #18
 8008b9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008b9c:	2303      	movs	r3, #3
 8008b9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008ba0:	f107 0310 	add.w	r3, r7, #16
 8008ba4:	4619      	mov	r1, r3
 8008ba6:	480b      	ldr	r0, [pc, #44]	; (8008bd4 <HAL_I2C_MspInit+0x78>)
 8008ba8:	f000 fd22 	bl	80095f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8008bac:	4b08      	ldr	r3, [pc, #32]	; (8008bd0 <HAL_I2C_MspInit+0x74>)
 8008bae:	69db      	ldr	r3, [r3, #28]
 8008bb0:	4a07      	ldr	r2, [pc, #28]	; (8008bd0 <HAL_I2C_MspInit+0x74>)
 8008bb2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008bb6:	61d3      	str	r3, [r2, #28]
 8008bb8:	4b05      	ldr	r3, [pc, #20]	; (8008bd0 <HAL_I2C_MspInit+0x74>)
 8008bba:	69db      	ldr	r3, [r3, #28]
 8008bbc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008bc0:	60bb      	str	r3, [r7, #8]
 8008bc2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8008bc4:	bf00      	nop
 8008bc6:	3720      	adds	r7, #32
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}
 8008bcc:	40005400 	.word	0x40005400
 8008bd0:	40021000 	.word	0x40021000
 8008bd4:	40010c00 	.word	0x40010c00

08008bd8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b082      	sub	sp, #8
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	4a0a      	ldr	r2, [pc, #40]	; (8008c10 <HAL_I2C_MspDeInit+0x38>)
 8008be6:	4293      	cmp	r3, r2
 8008be8:	d10d      	bne.n	8008c06 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8008bea:	4b0a      	ldr	r3, [pc, #40]	; (8008c14 <HAL_I2C_MspDeInit+0x3c>)
 8008bec:	69db      	ldr	r3, [r3, #28]
 8008bee:	4a09      	ldr	r2, [pc, #36]	; (8008c14 <HAL_I2C_MspDeInit+0x3c>)
 8008bf0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008bf4:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8008bf6:	2140      	movs	r1, #64	; 0x40
 8008bf8:	4807      	ldr	r0, [pc, #28]	; (8008c18 <HAL_I2C_MspDeInit+0x40>)
 8008bfa:	f000 fe8d 	bl	8009918 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8008bfe:	2180      	movs	r1, #128	; 0x80
 8008c00:	4805      	ldr	r0, [pc, #20]	; (8008c18 <HAL_I2C_MspDeInit+0x40>)
 8008c02:	f000 fe89 	bl	8009918 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8008c06:	bf00      	nop
 8008c08:	3708      	adds	r7, #8
 8008c0a:	46bd      	mov	sp, r7
 8008c0c:	bd80      	pop	{r7, pc}
 8008c0e:	bf00      	nop
 8008c10:	40005400 	.word	0x40005400
 8008c14:	40021000 	.word	0x40021000
 8008c18:	40010c00 	.word	0x40010c00

08008c1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b084      	sub	sp, #16
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	4a0d      	ldr	r2, [pc, #52]	; (8008c60 <HAL_TIM_Base_MspInit+0x44>)
 8008c2a:	4293      	cmp	r3, r2
 8008c2c:	d113      	bne.n	8008c56 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8008c2e:	4b0d      	ldr	r3, [pc, #52]	; (8008c64 <HAL_TIM_Base_MspInit+0x48>)
 8008c30:	699b      	ldr	r3, [r3, #24]
 8008c32:	4a0c      	ldr	r2, [pc, #48]	; (8008c64 <HAL_TIM_Base_MspInit+0x48>)
 8008c34:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008c38:	6193      	str	r3, [r2, #24]
 8008c3a:	4b0a      	ldr	r3, [pc, #40]	; (8008c64 <HAL_TIM_Base_MspInit+0x48>)
 8008c3c:	699b      	ldr	r3, [r3, #24]
 8008c3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008c42:	60fb      	str	r3, [r7, #12]
 8008c44:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8008c46:	2200      	movs	r2, #0
 8008c48:	2100      	movs	r1, #0
 8008c4a:	2019      	movs	r0, #25
 8008c4c:	f000 fb57 	bl	80092fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8008c50:	2019      	movs	r0, #25
 8008c52:	f000 fb70 	bl	8009336 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8008c56:	bf00      	nop
 8008c58:	3710      	adds	r7, #16
 8008c5a:	46bd      	mov	sp, r7
 8008c5c:	bd80      	pop	{r7, pc}
 8008c5e:	bf00      	nop
 8008c60:	40012c00 	.word	0x40012c00
 8008c64:	40021000 	.word	0x40021000

08008c68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b088      	sub	sp, #32
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c70:	f107 0310 	add.w	r3, r7, #16
 8008c74:	2200      	movs	r2, #0
 8008c76:	601a      	str	r2, [r3, #0]
 8008c78:	605a      	str	r2, [r3, #4]
 8008c7a:	609a      	str	r2, [r3, #8]
 8008c7c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	4a20      	ldr	r2, [pc, #128]	; (8008d04 <HAL_UART_MspInit+0x9c>)
 8008c84:	4293      	cmp	r3, r2
 8008c86:	d139      	bne.n	8008cfc <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008c88:	4b1f      	ldr	r3, [pc, #124]	; (8008d08 <HAL_UART_MspInit+0xa0>)
 8008c8a:	699b      	ldr	r3, [r3, #24]
 8008c8c:	4a1e      	ldr	r2, [pc, #120]	; (8008d08 <HAL_UART_MspInit+0xa0>)
 8008c8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008c92:	6193      	str	r3, [r2, #24]
 8008c94:	4b1c      	ldr	r3, [pc, #112]	; (8008d08 <HAL_UART_MspInit+0xa0>)
 8008c96:	699b      	ldr	r3, [r3, #24]
 8008c98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008c9c:	60fb      	str	r3, [r7, #12]
 8008c9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ca0:	4b19      	ldr	r3, [pc, #100]	; (8008d08 <HAL_UART_MspInit+0xa0>)
 8008ca2:	699b      	ldr	r3, [r3, #24]
 8008ca4:	4a18      	ldr	r2, [pc, #96]	; (8008d08 <HAL_UART_MspInit+0xa0>)
 8008ca6:	f043 0304 	orr.w	r3, r3, #4
 8008caa:	6193      	str	r3, [r2, #24]
 8008cac:	4b16      	ldr	r3, [pc, #88]	; (8008d08 <HAL_UART_MspInit+0xa0>)
 8008cae:	699b      	ldr	r3, [r3, #24]
 8008cb0:	f003 0304 	and.w	r3, r3, #4
 8008cb4:	60bb      	str	r3, [r7, #8]
 8008cb6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8008cb8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008cbc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008cbe:	2302      	movs	r3, #2
 8008cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8008cc2:	2303      	movs	r3, #3
 8008cc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008cc6:	f107 0310 	add.w	r3, r7, #16
 8008cca:	4619      	mov	r1, r3
 8008ccc:	480f      	ldr	r0, [pc, #60]	; (8008d0c <HAL_UART_MspInit+0xa4>)
 8008cce:	f000 fc8f 	bl	80095f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8008cd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cd6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cdc:	2300      	movs	r3, #0
 8008cde:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008ce0:	f107 0310 	add.w	r3, r7, #16
 8008ce4:	4619      	mov	r1, r3
 8008ce6:	4809      	ldr	r0, [pc, #36]	; (8008d0c <HAL_UART_MspInit+0xa4>)
 8008ce8:	f000 fc82 	bl	80095f0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8008cec:	2200      	movs	r2, #0
 8008cee:	2100      	movs	r1, #0
 8008cf0:	2025      	movs	r0, #37	; 0x25
 8008cf2:	f000 fb04 	bl	80092fe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8008cf6:	2025      	movs	r0, #37	; 0x25
 8008cf8:	f000 fb1d 	bl	8009336 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8008cfc:	bf00      	nop
 8008cfe:	3720      	adds	r7, #32
 8008d00:	46bd      	mov	sp, r7
 8008d02:	bd80      	pop	{r7, pc}
 8008d04:	40013800 	.word	0x40013800
 8008d08:	40021000 	.word	0x40021000
 8008d0c:	40010800 	.word	0x40010800

08008d10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008d10:	b480      	push	{r7}
 8008d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008d14:	e7fe      	b.n	8008d14 <NMI_Handler+0x4>

08008d16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008d16:	b480      	push	{r7}
 8008d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008d1a:	e7fe      	b.n	8008d1a <HardFault_Handler+0x4>

08008d1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008d1c:	b480      	push	{r7}
 8008d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008d20:	e7fe      	b.n	8008d20 <MemManage_Handler+0x4>

08008d22 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008d22:	b480      	push	{r7}
 8008d24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008d26:	e7fe      	b.n	8008d26 <BusFault_Handler+0x4>

08008d28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008d2c:	e7fe      	b.n	8008d2c <UsageFault_Handler+0x4>

08008d2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008d2e:	b480      	push	{r7}
 8008d30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008d32:	bf00      	nop
 8008d34:	46bd      	mov	sp, r7
 8008d36:	bc80      	pop	{r7}
 8008d38:	4770      	bx	lr

08008d3a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008d3a:	b480      	push	{r7}
 8008d3c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008d3e:	bf00      	nop
 8008d40:	46bd      	mov	sp, r7
 8008d42:	bc80      	pop	{r7}
 8008d44:	4770      	bx	lr

08008d46 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008d46:	b480      	push	{r7}
 8008d48:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008d4a:	bf00      	nop
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bc80      	pop	{r7}
 8008d50:	4770      	bx	lr

08008d52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008d52:	b580      	push	{r7, lr}
 8008d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008d56:	f000 f8bf 	bl	8008ed8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008d5a:	bf00      	nop
 8008d5c:	bd80      	pop	{r7, pc}
	...

08008d60 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8008d64:	4802      	ldr	r0, [pc, #8]	; (8008d70 <TIM1_UP_IRQHandler+0x10>)
 8008d66:	f002 fdcd 	bl	800b904 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8008d6a:	bf00      	nop
 8008d6c:	bd80      	pop	{r7, pc}
 8008d6e:	bf00      	nop
 8008d70:	20000e4c 	.word	0x20000e4c

08008d74 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8008d74:	b580      	push	{r7, lr}
 8008d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8008d78:	4802      	ldr	r0, [pc, #8]	; (8008d84 <USART1_IRQHandler+0x10>)
 8008d7a:	f003 f9cb 	bl	800c114 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8008d7e:	bf00      	nop
 8008d80:	bd80      	pop	{r7, pc}
 8008d82:	bf00      	nop
 8008d84:	20000e94 	.word	0x20000e94

08008d88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008d88:	b580      	push	{r7, lr}
 8008d8a:	b086      	sub	sp, #24
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008d90:	4a14      	ldr	r2, [pc, #80]	; (8008de4 <_sbrk+0x5c>)
 8008d92:	4b15      	ldr	r3, [pc, #84]	; (8008de8 <_sbrk+0x60>)
 8008d94:	1ad3      	subs	r3, r2, r3
 8008d96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008d9c:	4b13      	ldr	r3, [pc, #76]	; (8008dec <_sbrk+0x64>)
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d102      	bne.n	8008daa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008da4:	4b11      	ldr	r3, [pc, #68]	; (8008dec <_sbrk+0x64>)
 8008da6:	4a12      	ldr	r2, [pc, #72]	; (8008df0 <_sbrk+0x68>)
 8008da8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008daa:	4b10      	ldr	r3, [pc, #64]	; (8008dec <_sbrk+0x64>)
 8008dac:	681a      	ldr	r2, [r3, #0]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	4413      	add	r3, r2
 8008db2:	693a      	ldr	r2, [r7, #16]
 8008db4:	429a      	cmp	r2, r3
 8008db6:	d207      	bcs.n	8008dc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008db8:	f003 ffe6 	bl	800cd88 <__errno>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	220c      	movs	r2, #12
 8008dc0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8008dc6:	e009      	b.n	8008ddc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008dc8:	4b08      	ldr	r3, [pc, #32]	; (8008dec <_sbrk+0x64>)
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008dce:	4b07      	ldr	r3, [pc, #28]	; (8008dec <_sbrk+0x64>)
 8008dd0:	681a      	ldr	r2, [r3, #0]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	4413      	add	r3, r2
 8008dd6:	4a05      	ldr	r2, [pc, #20]	; (8008dec <_sbrk+0x64>)
 8008dd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008dda:	68fb      	ldr	r3, [r7, #12]
}
 8008ddc:	4618      	mov	r0, r3
 8008dde:	3718      	adds	r7, #24
 8008de0:	46bd      	mov	sp, r7
 8008de2:	bd80      	pop	{r7, pc}
 8008de4:	2000c000 	.word	0x2000c000
 8008de8:	00000400 	.word	0x00000400
 8008dec:	20000edc 	.word	0x20000edc
 8008df0:	20001030 	.word	0x20001030

08008df4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008df4:	b480      	push	{r7}
 8008df6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008df8:	bf00      	nop
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bc80      	pop	{r7}
 8008dfe:	4770      	bx	lr

08008e00 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008e00:	480c      	ldr	r0, [pc, #48]	; (8008e34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008e02:	490d      	ldr	r1, [pc, #52]	; (8008e38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008e04:	4a0d      	ldr	r2, [pc, #52]	; (8008e3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008e06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008e08:	e002      	b.n	8008e10 <LoopCopyDataInit>

08008e0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008e0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008e0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008e0e:	3304      	adds	r3, #4

08008e10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008e10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008e12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008e14:	d3f9      	bcc.n	8008e0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008e16:	4a0a      	ldr	r2, [pc, #40]	; (8008e40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008e18:	4c0a      	ldr	r4, [pc, #40]	; (8008e44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8008e1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008e1c:	e001      	b.n	8008e22 <LoopFillZerobss>

08008e1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008e1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008e20:	3204      	adds	r2, #4

08008e22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008e22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008e24:	d3fb      	bcc.n	8008e1e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8008e26:	f7ff ffe5 	bl	8008df4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008e2a:	f003 ffb3 	bl	800cd94 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8008e2e:	f7ff fb99 	bl	8008564 <main>
  bx lr
 8008e32:	4770      	bx	lr
  ldr r0, =_sdata
 8008e34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008e38:	20000a10 	.word	0x20000a10
  ldr r2, =_sidata
 8008e3c:	0800e458 	.word	0x0800e458
  ldr r2, =_sbss
 8008e40:	20000a10 	.word	0x20000a10
  ldr r4, =_ebss
 8008e44:	2000102c 	.word	0x2000102c

08008e48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8008e48:	e7fe      	b.n	8008e48 <ADC1_2_IRQHandler>
	...

08008e4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008e50:	4b08      	ldr	r3, [pc, #32]	; (8008e74 <HAL_Init+0x28>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a07      	ldr	r2, [pc, #28]	; (8008e74 <HAL_Init+0x28>)
 8008e56:	f043 0310 	orr.w	r3, r3, #16
 8008e5a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008e5c:	2003      	movs	r0, #3
 8008e5e:	f000 fa43 	bl	80092e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008e62:	200f      	movs	r0, #15
 8008e64:	f000 f808 	bl	8008e78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008e68:	f7ff fdfa 	bl	8008a60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008e6c:	2300      	movs	r3, #0
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	bd80      	pop	{r7, pc}
 8008e72:	bf00      	nop
 8008e74:	40022000 	.word	0x40022000

08008e78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b082      	sub	sp, #8
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008e80:	4b12      	ldr	r3, [pc, #72]	; (8008ecc <HAL_InitTick+0x54>)
 8008e82:	681a      	ldr	r2, [r3, #0]
 8008e84:	4b12      	ldr	r3, [pc, #72]	; (8008ed0 <HAL_InitTick+0x58>)
 8008e86:	781b      	ldrb	r3, [r3, #0]
 8008e88:	4619      	mov	r1, r3
 8008e8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008e8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e96:	4618      	mov	r0, r3
 8008e98:	f000 fa5b 	bl	8009352 <HAL_SYSTICK_Config>
 8008e9c:	4603      	mov	r3, r0
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d001      	beq.n	8008ea6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	e00e      	b.n	8008ec4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2b0f      	cmp	r3, #15
 8008eaa:	d80a      	bhi.n	8008ec2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008eac:	2200      	movs	r2, #0
 8008eae:	6879      	ldr	r1, [r7, #4]
 8008eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8008eb4:	f000 fa23 	bl	80092fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008eb8:	4a06      	ldr	r2, [pc, #24]	; (8008ed4 <HAL_InitTick+0x5c>)
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008ebe:	2300      	movs	r3, #0
 8008ec0:	e000      	b.n	8008ec4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008ec2:	2301      	movs	r3, #1
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3708      	adds	r7, #8
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	bd80      	pop	{r7, pc}
 8008ecc:	200009b4 	.word	0x200009b4
 8008ed0:	200009bc 	.word	0x200009bc
 8008ed4:	200009b8 	.word	0x200009b8

08008ed8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008edc:	4b05      	ldr	r3, [pc, #20]	; (8008ef4 <HAL_IncTick+0x1c>)
 8008ede:	781b      	ldrb	r3, [r3, #0]
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	4b05      	ldr	r3, [pc, #20]	; (8008ef8 <HAL_IncTick+0x20>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	4413      	add	r3, r2
 8008ee8:	4a03      	ldr	r2, [pc, #12]	; (8008ef8 <HAL_IncTick+0x20>)
 8008eea:	6013      	str	r3, [r2, #0]
}
 8008eec:	bf00      	nop
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	bc80      	pop	{r7}
 8008ef2:	4770      	bx	lr
 8008ef4:	200009bc 	.word	0x200009bc
 8008ef8:	20000ee0 	.word	0x20000ee0

08008efc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008efc:	b480      	push	{r7}
 8008efe:	af00      	add	r7, sp, #0
  return uwTick;
 8008f00:	4b02      	ldr	r3, [pc, #8]	; (8008f0c <HAL_GetTick+0x10>)
 8008f02:	681b      	ldr	r3, [r3, #0]
}
 8008f04:	4618      	mov	r0, r3
 8008f06:	46bd      	mov	sp, r7
 8008f08:	bc80      	pop	{r7}
 8008f0a:	4770      	bx	lr
 8008f0c:	20000ee0 	.word	0x20000ee0

08008f10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b084      	sub	sp, #16
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008f18:	f7ff fff0 	bl	8008efc <HAL_GetTick>
 8008f1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f28:	d005      	beq.n	8008f36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008f2a:	4b0a      	ldr	r3, [pc, #40]	; (8008f54 <HAL_Delay+0x44>)
 8008f2c:	781b      	ldrb	r3, [r3, #0]
 8008f2e:	461a      	mov	r2, r3
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	4413      	add	r3, r2
 8008f34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8008f36:	bf00      	nop
 8008f38:	f7ff ffe0 	bl	8008efc <HAL_GetTick>
 8008f3c:	4602      	mov	r2, r0
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	1ad3      	subs	r3, r2, r3
 8008f42:	68fa      	ldr	r2, [r7, #12]
 8008f44:	429a      	cmp	r2, r3
 8008f46:	d8f7      	bhi.n	8008f38 <HAL_Delay+0x28>
  {
  }
}
 8008f48:	bf00      	nop
 8008f4a:	bf00      	nop
 8008f4c:	3710      	adds	r7, #16
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	bd80      	pop	{r7, pc}
 8008f52:	bf00      	nop
 8008f54:	200009bc 	.word	0x200009bc

08008f58 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b084      	sub	sp, #16
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d101      	bne.n	8008f6a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8008f66:	2301      	movs	r3, #1
 8008f68:	e0ed      	b.n	8009146 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008f70:	b2db      	uxtb	r3, r3
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d102      	bne.n	8008f7c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8008f76:	6878      	ldr	r0, [r7, #4]
 8008f78:	f7ff fda4 	bl	8008ac4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	681a      	ldr	r2, [r3, #0]
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	681b      	ldr	r3, [r3, #0]
 8008f86:	f042 0201 	orr.w	r2, r2, #1
 8008f8a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008f8c:	f7ff ffb6 	bl	8008efc <HAL_GetTick>
 8008f90:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008f92:	e012      	b.n	8008fba <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008f94:	f7ff ffb2 	bl	8008efc <HAL_GetTick>
 8008f98:	4602      	mov	r2, r0
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	1ad3      	subs	r3, r2, r3
 8008f9e:	2b0a      	cmp	r3, #10
 8008fa0:	d90b      	bls.n	8008fba <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fa6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2205      	movs	r2, #5
 8008fb2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	e0c5      	b.n	8009146 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	685b      	ldr	r3, [r3, #4]
 8008fc0:	f003 0301 	and.w	r3, r3, #1
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d0e5      	beq.n	8008f94 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	681a      	ldr	r2, [r3, #0]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	681b      	ldr	r3, [r3, #0]
 8008fd2:	f022 0202 	bic.w	r2, r2, #2
 8008fd6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008fd8:	f7ff ff90 	bl	8008efc <HAL_GetTick>
 8008fdc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8008fde:	e012      	b.n	8009006 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8008fe0:	f7ff ff8c 	bl	8008efc <HAL_GetTick>
 8008fe4:	4602      	mov	r2, r0
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	1ad3      	subs	r3, r2, r3
 8008fea:	2b0a      	cmp	r3, #10
 8008fec:	d90b      	bls.n	8009006 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2205      	movs	r2, #5
 8008ffe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8009002:	2301      	movs	r3, #1
 8009004:	e09f      	b.n	8009146 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	685b      	ldr	r3, [r3, #4]
 800900c:	f003 0302 	and.w	r3, r3, #2
 8009010:	2b00      	cmp	r3, #0
 8009012:	d1e5      	bne.n	8008fe0 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	7e1b      	ldrb	r3, [r3, #24]
 8009018:	2b01      	cmp	r3, #1
 800901a:	d108      	bne.n	800902e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	681a      	ldr	r2, [r3, #0]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800902a:	601a      	str	r2, [r3, #0]
 800902c:	e007      	b.n	800903e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	681a      	ldr	r2, [r3, #0]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800903c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	7e5b      	ldrb	r3, [r3, #25]
 8009042:	2b01      	cmp	r3, #1
 8009044:	d108      	bne.n	8009058 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009054:	601a      	str	r2, [r3, #0]
 8009056:	e007      	b.n	8009068 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	681a      	ldr	r2, [r3, #0]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009066:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	7e9b      	ldrb	r3, [r3, #26]
 800906c:	2b01      	cmp	r3, #1
 800906e:	d108      	bne.n	8009082 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	681a      	ldr	r2, [r3, #0]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f042 0220 	orr.w	r2, r2, #32
 800907e:	601a      	str	r2, [r3, #0]
 8009080:	e007      	b.n	8009092 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	681a      	ldr	r2, [r3, #0]
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	f022 0220 	bic.w	r2, r2, #32
 8009090:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	7edb      	ldrb	r3, [r3, #27]
 8009096:	2b01      	cmp	r3, #1
 8009098:	d108      	bne.n	80090ac <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	681a      	ldr	r2, [r3, #0]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f022 0210 	bic.w	r2, r2, #16
 80090a8:	601a      	str	r2, [r3, #0]
 80090aa:	e007      	b.n	80090bc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	681b      	ldr	r3, [r3, #0]
 80090b0:	681a      	ldr	r2, [r3, #0]
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	f042 0210 	orr.w	r2, r2, #16
 80090ba:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	7f1b      	ldrb	r3, [r3, #28]
 80090c0:	2b01      	cmp	r3, #1
 80090c2:	d108      	bne.n	80090d6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	681a      	ldr	r2, [r3, #0]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f042 0208 	orr.w	r2, r2, #8
 80090d2:	601a      	str	r2, [r3, #0]
 80090d4:	e007      	b.n	80090e6 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	681a      	ldr	r2, [r3, #0]
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	f022 0208 	bic.w	r2, r2, #8
 80090e4:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	7f5b      	ldrb	r3, [r3, #29]
 80090ea:	2b01      	cmp	r3, #1
 80090ec:	d108      	bne.n	8009100 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	681a      	ldr	r2, [r3, #0]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	f042 0204 	orr.w	r2, r2, #4
 80090fc:	601a      	str	r2, [r3, #0]
 80090fe:	e007      	b.n	8009110 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	681a      	ldr	r2, [r3, #0]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	f022 0204 	bic.w	r2, r2, #4
 800910e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	689a      	ldr	r2, [r3, #8]
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	68db      	ldr	r3, [r3, #12]
 8009118:	431a      	orrs	r2, r3
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	691b      	ldr	r3, [r3, #16]
 800911e:	431a      	orrs	r2, r3
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	695b      	ldr	r3, [r3, #20]
 8009124:	ea42 0103 	orr.w	r1, r2, r3
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	685b      	ldr	r3, [r3, #4]
 800912c:	1e5a      	subs	r2, r3, #1
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	430a      	orrs	r2, r1
 8009134:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	2200      	movs	r2, #0
 800913a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2201      	movs	r2, #1
 8009140:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8009144:	2300      	movs	r3, #0
}
 8009146:	4618      	mov	r0, r3
 8009148:	3710      	adds	r7, #16
 800914a:	46bd      	mov	sp, r7
 800914c:	bd80      	pop	{r7, pc}
	...

08009150 <__NVIC_SetPriorityGrouping>:
{
 8009150:	b480      	push	{r7}
 8009152:	b085      	sub	sp, #20
 8009154:	af00      	add	r7, sp, #0
 8009156:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f003 0307 	and.w	r3, r3, #7
 800915e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009160:	4b0c      	ldr	r3, [pc, #48]	; (8009194 <__NVIC_SetPriorityGrouping+0x44>)
 8009162:	68db      	ldr	r3, [r3, #12]
 8009164:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009166:	68ba      	ldr	r2, [r7, #8]
 8009168:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800916c:	4013      	ands	r3, r2
 800916e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009178:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800917c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009180:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009182:	4a04      	ldr	r2, [pc, #16]	; (8009194 <__NVIC_SetPriorityGrouping+0x44>)
 8009184:	68bb      	ldr	r3, [r7, #8]
 8009186:	60d3      	str	r3, [r2, #12]
}
 8009188:	bf00      	nop
 800918a:	3714      	adds	r7, #20
 800918c:	46bd      	mov	sp, r7
 800918e:	bc80      	pop	{r7}
 8009190:	4770      	bx	lr
 8009192:	bf00      	nop
 8009194:	e000ed00 	.word	0xe000ed00

08009198 <__NVIC_GetPriorityGrouping>:
{
 8009198:	b480      	push	{r7}
 800919a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800919c:	4b04      	ldr	r3, [pc, #16]	; (80091b0 <__NVIC_GetPriorityGrouping+0x18>)
 800919e:	68db      	ldr	r3, [r3, #12]
 80091a0:	0a1b      	lsrs	r3, r3, #8
 80091a2:	f003 0307 	and.w	r3, r3, #7
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	46bd      	mov	sp, r7
 80091aa:	bc80      	pop	{r7}
 80091ac:	4770      	bx	lr
 80091ae:	bf00      	nop
 80091b0:	e000ed00 	.word	0xe000ed00

080091b4 <__NVIC_EnableIRQ>:
{
 80091b4:	b480      	push	{r7}
 80091b6:	b083      	sub	sp, #12
 80091b8:	af00      	add	r7, sp, #0
 80091ba:	4603      	mov	r3, r0
 80091bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80091be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	db0b      	blt.n	80091de <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80091c6:	79fb      	ldrb	r3, [r7, #7]
 80091c8:	f003 021f 	and.w	r2, r3, #31
 80091cc:	4906      	ldr	r1, [pc, #24]	; (80091e8 <__NVIC_EnableIRQ+0x34>)
 80091ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80091d2:	095b      	lsrs	r3, r3, #5
 80091d4:	2001      	movs	r0, #1
 80091d6:	fa00 f202 	lsl.w	r2, r0, r2
 80091da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80091de:	bf00      	nop
 80091e0:	370c      	adds	r7, #12
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bc80      	pop	{r7}
 80091e6:	4770      	bx	lr
 80091e8:	e000e100 	.word	0xe000e100

080091ec <__NVIC_SetPriority>:
{
 80091ec:	b480      	push	{r7}
 80091ee:	b083      	sub	sp, #12
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	4603      	mov	r3, r0
 80091f4:	6039      	str	r1, [r7, #0]
 80091f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80091f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	db0a      	blt.n	8009216 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	b2da      	uxtb	r2, r3
 8009204:	490c      	ldr	r1, [pc, #48]	; (8009238 <__NVIC_SetPriority+0x4c>)
 8009206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800920a:	0112      	lsls	r2, r2, #4
 800920c:	b2d2      	uxtb	r2, r2
 800920e:	440b      	add	r3, r1
 8009210:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009214:	e00a      	b.n	800922c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009216:	683b      	ldr	r3, [r7, #0]
 8009218:	b2da      	uxtb	r2, r3
 800921a:	4908      	ldr	r1, [pc, #32]	; (800923c <__NVIC_SetPriority+0x50>)
 800921c:	79fb      	ldrb	r3, [r7, #7]
 800921e:	f003 030f 	and.w	r3, r3, #15
 8009222:	3b04      	subs	r3, #4
 8009224:	0112      	lsls	r2, r2, #4
 8009226:	b2d2      	uxtb	r2, r2
 8009228:	440b      	add	r3, r1
 800922a:	761a      	strb	r2, [r3, #24]
}
 800922c:	bf00      	nop
 800922e:	370c      	adds	r7, #12
 8009230:	46bd      	mov	sp, r7
 8009232:	bc80      	pop	{r7}
 8009234:	4770      	bx	lr
 8009236:	bf00      	nop
 8009238:	e000e100 	.word	0xe000e100
 800923c:	e000ed00 	.word	0xe000ed00

08009240 <NVIC_EncodePriority>:
{
 8009240:	b480      	push	{r7}
 8009242:	b089      	sub	sp, #36	; 0x24
 8009244:	af00      	add	r7, sp, #0
 8009246:	60f8      	str	r0, [r7, #12]
 8009248:	60b9      	str	r1, [r7, #8]
 800924a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f003 0307 	and.w	r3, r3, #7
 8009252:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009254:	69fb      	ldr	r3, [r7, #28]
 8009256:	f1c3 0307 	rsb	r3, r3, #7
 800925a:	2b04      	cmp	r3, #4
 800925c:	bf28      	it	cs
 800925e:	2304      	movcs	r3, #4
 8009260:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009262:	69fb      	ldr	r3, [r7, #28]
 8009264:	3304      	adds	r3, #4
 8009266:	2b06      	cmp	r3, #6
 8009268:	d902      	bls.n	8009270 <NVIC_EncodePriority+0x30>
 800926a:	69fb      	ldr	r3, [r7, #28]
 800926c:	3b03      	subs	r3, #3
 800926e:	e000      	b.n	8009272 <NVIC_EncodePriority+0x32>
 8009270:	2300      	movs	r3, #0
 8009272:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009274:	f04f 32ff 	mov.w	r2, #4294967295
 8009278:	69bb      	ldr	r3, [r7, #24]
 800927a:	fa02 f303 	lsl.w	r3, r2, r3
 800927e:	43da      	mvns	r2, r3
 8009280:	68bb      	ldr	r3, [r7, #8]
 8009282:	401a      	ands	r2, r3
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8009288:	f04f 31ff 	mov.w	r1, #4294967295
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	fa01 f303 	lsl.w	r3, r1, r3
 8009292:	43d9      	mvns	r1, r3
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009298:	4313      	orrs	r3, r2
}
 800929a:	4618      	mov	r0, r3
 800929c:	3724      	adds	r7, #36	; 0x24
 800929e:	46bd      	mov	sp, r7
 80092a0:	bc80      	pop	{r7}
 80092a2:	4770      	bx	lr

080092a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80092a4:	b580      	push	{r7, lr}
 80092a6:	b082      	sub	sp, #8
 80092a8:	af00      	add	r7, sp, #0
 80092aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	3b01      	subs	r3, #1
 80092b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80092b4:	d301      	bcc.n	80092ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80092b6:	2301      	movs	r3, #1
 80092b8:	e00f      	b.n	80092da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80092ba:	4a0a      	ldr	r2, [pc, #40]	; (80092e4 <SysTick_Config+0x40>)
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	3b01      	subs	r3, #1
 80092c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80092c2:	210f      	movs	r1, #15
 80092c4:	f04f 30ff 	mov.w	r0, #4294967295
 80092c8:	f7ff ff90 	bl	80091ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80092cc:	4b05      	ldr	r3, [pc, #20]	; (80092e4 <SysTick_Config+0x40>)
 80092ce:	2200      	movs	r2, #0
 80092d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80092d2:	4b04      	ldr	r3, [pc, #16]	; (80092e4 <SysTick_Config+0x40>)
 80092d4:	2207      	movs	r2, #7
 80092d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80092d8:	2300      	movs	r3, #0
}
 80092da:	4618      	mov	r0, r3
 80092dc:	3708      	adds	r7, #8
 80092de:	46bd      	mov	sp, r7
 80092e0:	bd80      	pop	{r7, pc}
 80092e2:	bf00      	nop
 80092e4:	e000e010 	.word	0xe000e010

080092e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b082      	sub	sp, #8
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80092f0:	6878      	ldr	r0, [r7, #4]
 80092f2:	f7ff ff2d 	bl	8009150 <__NVIC_SetPriorityGrouping>
}
 80092f6:	bf00      	nop
 80092f8:	3708      	adds	r7, #8
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}

080092fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80092fe:	b580      	push	{r7, lr}
 8009300:	b086      	sub	sp, #24
 8009302:	af00      	add	r7, sp, #0
 8009304:	4603      	mov	r3, r0
 8009306:	60b9      	str	r1, [r7, #8]
 8009308:	607a      	str	r2, [r7, #4]
 800930a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800930c:	2300      	movs	r3, #0
 800930e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8009310:	f7ff ff42 	bl	8009198 <__NVIC_GetPriorityGrouping>
 8009314:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8009316:	687a      	ldr	r2, [r7, #4]
 8009318:	68b9      	ldr	r1, [r7, #8]
 800931a:	6978      	ldr	r0, [r7, #20]
 800931c:	f7ff ff90 	bl	8009240 <NVIC_EncodePriority>
 8009320:	4602      	mov	r2, r0
 8009322:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009326:	4611      	mov	r1, r2
 8009328:	4618      	mov	r0, r3
 800932a:	f7ff ff5f 	bl	80091ec <__NVIC_SetPriority>
}
 800932e:	bf00      	nop
 8009330:	3718      	adds	r7, #24
 8009332:	46bd      	mov	sp, r7
 8009334:	bd80      	pop	{r7, pc}

08009336 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009336:	b580      	push	{r7, lr}
 8009338:	b082      	sub	sp, #8
 800933a:	af00      	add	r7, sp, #0
 800933c:	4603      	mov	r3, r0
 800933e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009340:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009344:	4618      	mov	r0, r3
 8009346:	f7ff ff35 	bl	80091b4 <__NVIC_EnableIRQ>
}
 800934a:	bf00      	nop
 800934c:	3708      	adds	r7, #8
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}

08009352 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009352:	b580      	push	{r7, lr}
 8009354:	b082      	sub	sp, #8
 8009356:	af00      	add	r7, sp, #0
 8009358:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800935a:	6878      	ldr	r0, [r7, #4]
 800935c:	f7ff ffa2 	bl	80092a4 <SysTick_Config>
 8009360:	4603      	mov	r3, r0
}
 8009362:	4618      	mov	r0, r3
 8009364:	3708      	adds	r7, #8
 8009366:	46bd      	mov	sp, r7
 8009368:	bd80      	pop	{r7, pc}

0800936a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800936a:	b480      	push	{r7}
 800936c:	b085      	sub	sp, #20
 800936e:	af00      	add	r7, sp, #0
 8009370:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009372:	2300      	movs	r3, #0
 8009374:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800937c:	b2db      	uxtb	r3, r3
 800937e:	2b02      	cmp	r3, #2
 8009380:	d008      	beq.n	8009394 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2204      	movs	r2, #4
 8009386:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	2200      	movs	r2, #0
 800938c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8009390:	2301      	movs	r3, #1
 8009392:	e020      	b.n	80093d6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	681a      	ldr	r2, [r3, #0]
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f022 020e 	bic.w	r2, r2, #14
 80093a2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	681a      	ldr	r2, [r3, #0]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f022 0201 	bic.w	r2, r2, #1
 80093b2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80093bc:	2101      	movs	r1, #1
 80093be:	fa01 f202 	lsl.w	r2, r1, r2
 80093c2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2201      	movs	r2, #1
 80093c8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	2200      	movs	r2, #0
 80093d0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80093d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80093d6:	4618      	mov	r0, r3
 80093d8:	3714      	adds	r7, #20
 80093da:	46bd      	mov	sp, r7
 80093dc:	bc80      	pop	{r7}
 80093de:	4770      	bx	lr

080093e0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b084      	sub	sp, #16
 80093e4:	af00      	add	r7, sp, #0
 80093e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80093e8:	2300      	movs	r3, #0
 80093ea:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80093f2:	b2db      	uxtb	r3, r3
 80093f4:	2b02      	cmp	r3, #2
 80093f6:	d005      	beq.n	8009404 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	2204      	movs	r2, #4
 80093fc:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80093fe:	2301      	movs	r3, #1
 8009400:	73fb      	strb	r3, [r7, #15]
 8009402:	e0d6      	b.n	80095b2 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	681a      	ldr	r2, [r3, #0]
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	681b      	ldr	r3, [r3, #0]
 800940e:	f022 020e 	bic.w	r2, r2, #14
 8009412:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	681a      	ldr	r2, [r3, #0]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f022 0201 	bic.w	r2, r2, #1
 8009422:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	461a      	mov	r2, r3
 800942a:	4b64      	ldr	r3, [pc, #400]	; (80095bc <HAL_DMA_Abort_IT+0x1dc>)
 800942c:	429a      	cmp	r2, r3
 800942e:	d958      	bls.n	80094e2 <HAL_DMA_Abort_IT+0x102>
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	4a62      	ldr	r2, [pc, #392]	; (80095c0 <HAL_DMA_Abort_IT+0x1e0>)
 8009436:	4293      	cmp	r3, r2
 8009438:	d04f      	beq.n	80094da <HAL_DMA_Abort_IT+0xfa>
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	4a61      	ldr	r2, [pc, #388]	; (80095c4 <HAL_DMA_Abort_IT+0x1e4>)
 8009440:	4293      	cmp	r3, r2
 8009442:	d048      	beq.n	80094d6 <HAL_DMA_Abort_IT+0xf6>
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	4a5f      	ldr	r2, [pc, #380]	; (80095c8 <HAL_DMA_Abort_IT+0x1e8>)
 800944a:	4293      	cmp	r3, r2
 800944c:	d040      	beq.n	80094d0 <HAL_DMA_Abort_IT+0xf0>
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	4a5e      	ldr	r2, [pc, #376]	; (80095cc <HAL_DMA_Abort_IT+0x1ec>)
 8009454:	4293      	cmp	r3, r2
 8009456:	d038      	beq.n	80094ca <HAL_DMA_Abort_IT+0xea>
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	4a5c      	ldr	r2, [pc, #368]	; (80095d0 <HAL_DMA_Abort_IT+0x1f0>)
 800945e:	4293      	cmp	r3, r2
 8009460:	d030      	beq.n	80094c4 <HAL_DMA_Abort_IT+0xe4>
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	4a5b      	ldr	r2, [pc, #364]	; (80095d4 <HAL_DMA_Abort_IT+0x1f4>)
 8009468:	4293      	cmp	r3, r2
 800946a:	d028      	beq.n	80094be <HAL_DMA_Abort_IT+0xde>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4a52      	ldr	r2, [pc, #328]	; (80095bc <HAL_DMA_Abort_IT+0x1dc>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d020      	beq.n	80094b8 <HAL_DMA_Abort_IT+0xd8>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	4a57      	ldr	r2, [pc, #348]	; (80095d8 <HAL_DMA_Abort_IT+0x1f8>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d019      	beq.n	80094b4 <HAL_DMA_Abort_IT+0xd4>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	4a55      	ldr	r2, [pc, #340]	; (80095dc <HAL_DMA_Abort_IT+0x1fc>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d012      	beq.n	80094b0 <HAL_DMA_Abort_IT+0xd0>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	4a54      	ldr	r2, [pc, #336]	; (80095e0 <HAL_DMA_Abort_IT+0x200>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d00a      	beq.n	80094aa <HAL_DMA_Abort_IT+0xca>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4a52      	ldr	r2, [pc, #328]	; (80095e4 <HAL_DMA_Abort_IT+0x204>)
 800949a:	4293      	cmp	r3, r2
 800949c:	d102      	bne.n	80094a4 <HAL_DMA_Abort_IT+0xc4>
 800949e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80094a2:	e01b      	b.n	80094dc <HAL_DMA_Abort_IT+0xfc>
 80094a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80094a8:	e018      	b.n	80094dc <HAL_DMA_Abort_IT+0xfc>
 80094aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80094ae:	e015      	b.n	80094dc <HAL_DMA_Abort_IT+0xfc>
 80094b0:	2310      	movs	r3, #16
 80094b2:	e013      	b.n	80094dc <HAL_DMA_Abort_IT+0xfc>
 80094b4:	2301      	movs	r3, #1
 80094b6:	e011      	b.n	80094dc <HAL_DMA_Abort_IT+0xfc>
 80094b8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80094bc:	e00e      	b.n	80094dc <HAL_DMA_Abort_IT+0xfc>
 80094be:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80094c2:	e00b      	b.n	80094dc <HAL_DMA_Abort_IT+0xfc>
 80094c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80094c8:	e008      	b.n	80094dc <HAL_DMA_Abort_IT+0xfc>
 80094ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80094ce:	e005      	b.n	80094dc <HAL_DMA_Abort_IT+0xfc>
 80094d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80094d4:	e002      	b.n	80094dc <HAL_DMA_Abort_IT+0xfc>
 80094d6:	2310      	movs	r3, #16
 80094d8:	e000      	b.n	80094dc <HAL_DMA_Abort_IT+0xfc>
 80094da:	2301      	movs	r3, #1
 80094dc:	4a42      	ldr	r2, [pc, #264]	; (80095e8 <HAL_DMA_Abort_IT+0x208>)
 80094de:	6053      	str	r3, [r2, #4]
 80094e0:	e057      	b.n	8009592 <HAL_DMA_Abort_IT+0x1b2>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4a36      	ldr	r2, [pc, #216]	; (80095c0 <HAL_DMA_Abort_IT+0x1e0>)
 80094e8:	4293      	cmp	r3, r2
 80094ea:	d04f      	beq.n	800958c <HAL_DMA_Abort_IT+0x1ac>
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	4a34      	ldr	r2, [pc, #208]	; (80095c4 <HAL_DMA_Abort_IT+0x1e4>)
 80094f2:	4293      	cmp	r3, r2
 80094f4:	d048      	beq.n	8009588 <HAL_DMA_Abort_IT+0x1a8>
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	4a33      	ldr	r2, [pc, #204]	; (80095c8 <HAL_DMA_Abort_IT+0x1e8>)
 80094fc:	4293      	cmp	r3, r2
 80094fe:	d040      	beq.n	8009582 <HAL_DMA_Abort_IT+0x1a2>
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4a31      	ldr	r2, [pc, #196]	; (80095cc <HAL_DMA_Abort_IT+0x1ec>)
 8009506:	4293      	cmp	r3, r2
 8009508:	d038      	beq.n	800957c <HAL_DMA_Abort_IT+0x19c>
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	4a30      	ldr	r2, [pc, #192]	; (80095d0 <HAL_DMA_Abort_IT+0x1f0>)
 8009510:	4293      	cmp	r3, r2
 8009512:	d030      	beq.n	8009576 <HAL_DMA_Abort_IT+0x196>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	4a2e      	ldr	r2, [pc, #184]	; (80095d4 <HAL_DMA_Abort_IT+0x1f4>)
 800951a:	4293      	cmp	r3, r2
 800951c:	d028      	beq.n	8009570 <HAL_DMA_Abort_IT+0x190>
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	4a26      	ldr	r2, [pc, #152]	; (80095bc <HAL_DMA_Abort_IT+0x1dc>)
 8009524:	4293      	cmp	r3, r2
 8009526:	d020      	beq.n	800956a <HAL_DMA_Abort_IT+0x18a>
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4a2a      	ldr	r2, [pc, #168]	; (80095d8 <HAL_DMA_Abort_IT+0x1f8>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d019      	beq.n	8009566 <HAL_DMA_Abort_IT+0x186>
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	4a29      	ldr	r2, [pc, #164]	; (80095dc <HAL_DMA_Abort_IT+0x1fc>)
 8009538:	4293      	cmp	r3, r2
 800953a:	d012      	beq.n	8009562 <HAL_DMA_Abort_IT+0x182>
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	4a27      	ldr	r2, [pc, #156]	; (80095e0 <HAL_DMA_Abort_IT+0x200>)
 8009542:	4293      	cmp	r3, r2
 8009544:	d00a      	beq.n	800955c <HAL_DMA_Abort_IT+0x17c>
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	681b      	ldr	r3, [r3, #0]
 800954a:	4a26      	ldr	r2, [pc, #152]	; (80095e4 <HAL_DMA_Abort_IT+0x204>)
 800954c:	4293      	cmp	r3, r2
 800954e:	d102      	bne.n	8009556 <HAL_DMA_Abort_IT+0x176>
 8009550:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009554:	e01b      	b.n	800958e <HAL_DMA_Abort_IT+0x1ae>
 8009556:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800955a:	e018      	b.n	800958e <HAL_DMA_Abort_IT+0x1ae>
 800955c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009560:	e015      	b.n	800958e <HAL_DMA_Abort_IT+0x1ae>
 8009562:	2310      	movs	r3, #16
 8009564:	e013      	b.n	800958e <HAL_DMA_Abort_IT+0x1ae>
 8009566:	2301      	movs	r3, #1
 8009568:	e011      	b.n	800958e <HAL_DMA_Abort_IT+0x1ae>
 800956a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800956e:	e00e      	b.n	800958e <HAL_DMA_Abort_IT+0x1ae>
 8009570:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8009574:	e00b      	b.n	800958e <HAL_DMA_Abort_IT+0x1ae>
 8009576:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800957a:	e008      	b.n	800958e <HAL_DMA_Abort_IT+0x1ae>
 800957c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009580:	e005      	b.n	800958e <HAL_DMA_Abort_IT+0x1ae>
 8009582:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009586:	e002      	b.n	800958e <HAL_DMA_Abort_IT+0x1ae>
 8009588:	2310      	movs	r3, #16
 800958a:	e000      	b.n	800958e <HAL_DMA_Abort_IT+0x1ae>
 800958c:	2301      	movs	r3, #1
 800958e:	4a17      	ldr	r2, [pc, #92]	; (80095ec <HAL_DMA_Abort_IT+0x20c>)
 8009590:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2201      	movs	r2, #1
 8009596:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2200      	movs	r2, #0
 800959e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095a6:	2b00      	cmp	r3, #0
 80095a8:	d003      	beq.n	80095b2 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	4798      	blx	r3
    } 
  }
  return status;
 80095b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80095b4:	4618      	mov	r0, r3
 80095b6:	3710      	adds	r7, #16
 80095b8:	46bd      	mov	sp, r7
 80095ba:	bd80      	pop	{r7, pc}
 80095bc:	40020080 	.word	0x40020080
 80095c0:	40020008 	.word	0x40020008
 80095c4:	4002001c 	.word	0x4002001c
 80095c8:	40020030 	.word	0x40020030
 80095cc:	40020044 	.word	0x40020044
 80095d0:	40020058 	.word	0x40020058
 80095d4:	4002006c 	.word	0x4002006c
 80095d8:	40020408 	.word	0x40020408
 80095dc:	4002041c 	.word	0x4002041c
 80095e0:	40020430 	.word	0x40020430
 80095e4:	40020444 	.word	0x40020444
 80095e8:	40020400 	.word	0x40020400
 80095ec:	40020000 	.word	0x40020000

080095f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b08b      	sub	sp, #44	; 0x2c
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
 80095f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80095fa:	2300      	movs	r3, #0
 80095fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80095fe:	2300      	movs	r3, #0
 8009600:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8009602:	e179      	b.n	80098f8 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8009604:	2201      	movs	r2, #1
 8009606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009608:	fa02 f303 	lsl.w	r3, r2, r3
 800960c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	69fa      	ldr	r2, [r7, #28]
 8009614:	4013      	ands	r3, r2
 8009616:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8009618:	69ba      	ldr	r2, [r7, #24]
 800961a:	69fb      	ldr	r3, [r7, #28]
 800961c:	429a      	cmp	r2, r3
 800961e:	f040 8168 	bne.w	80098f2 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	685b      	ldr	r3, [r3, #4]
 8009626:	4a96      	ldr	r2, [pc, #600]	; (8009880 <HAL_GPIO_Init+0x290>)
 8009628:	4293      	cmp	r3, r2
 800962a:	d05e      	beq.n	80096ea <HAL_GPIO_Init+0xfa>
 800962c:	4a94      	ldr	r2, [pc, #592]	; (8009880 <HAL_GPIO_Init+0x290>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d875      	bhi.n	800971e <HAL_GPIO_Init+0x12e>
 8009632:	4a94      	ldr	r2, [pc, #592]	; (8009884 <HAL_GPIO_Init+0x294>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d058      	beq.n	80096ea <HAL_GPIO_Init+0xfa>
 8009638:	4a92      	ldr	r2, [pc, #584]	; (8009884 <HAL_GPIO_Init+0x294>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d86f      	bhi.n	800971e <HAL_GPIO_Init+0x12e>
 800963e:	4a92      	ldr	r2, [pc, #584]	; (8009888 <HAL_GPIO_Init+0x298>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d052      	beq.n	80096ea <HAL_GPIO_Init+0xfa>
 8009644:	4a90      	ldr	r2, [pc, #576]	; (8009888 <HAL_GPIO_Init+0x298>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d869      	bhi.n	800971e <HAL_GPIO_Init+0x12e>
 800964a:	4a90      	ldr	r2, [pc, #576]	; (800988c <HAL_GPIO_Init+0x29c>)
 800964c:	4293      	cmp	r3, r2
 800964e:	d04c      	beq.n	80096ea <HAL_GPIO_Init+0xfa>
 8009650:	4a8e      	ldr	r2, [pc, #568]	; (800988c <HAL_GPIO_Init+0x29c>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d863      	bhi.n	800971e <HAL_GPIO_Init+0x12e>
 8009656:	4a8e      	ldr	r2, [pc, #568]	; (8009890 <HAL_GPIO_Init+0x2a0>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d046      	beq.n	80096ea <HAL_GPIO_Init+0xfa>
 800965c:	4a8c      	ldr	r2, [pc, #560]	; (8009890 <HAL_GPIO_Init+0x2a0>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d85d      	bhi.n	800971e <HAL_GPIO_Init+0x12e>
 8009662:	2b12      	cmp	r3, #18
 8009664:	d82a      	bhi.n	80096bc <HAL_GPIO_Init+0xcc>
 8009666:	2b12      	cmp	r3, #18
 8009668:	d859      	bhi.n	800971e <HAL_GPIO_Init+0x12e>
 800966a:	a201      	add	r2, pc, #4	; (adr r2, 8009670 <HAL_GPIO_Init+0x80>)
 800966c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009670:	080096eb 	.word	0x080096eb
 8009674:	080096c5 	.word	0x080096c5
 8009678:	080096d7 	.word	0x080096d7
 800967c:	08009719 	.word	0x08009719
 8009680:	0800971f 	.word	0x0800971f
 8009684:	0800971f 	.word	0x0800971f
 8009688:	0800971f 	.word	0x0800971f
 800968c:	0800971f 	.word	0x0800971f
 8009690:	0800971f 	.word	0x0800971f
 8009694:	0800971f 	.word	0x0800971f
 8009698:	0800971f 	.word	0x0800971f
 800969c:	0800971f 	.word	0x0800971f
 80096a0:	0800971f 	.word	0x0800971f
 80096a4:	0800971f 	.word	0x0800971f
 80096a8:	0800971f 	.word	0x0800971f
 80096ac:	0800971f 	.word	0x0800971f
 80096b0:	0800971f 	.word	0x0800971f
 80096b4:	080096cd 	.word	0x080096cd
 80096b8:	080096e1 	.word	0x080096e1
 80096bc:	4a75      	ldr	r2, [pc, #468]	; (8009894 <HAL_GPIO_Init+0x2a4>)
 80096be:	4293      	cmp	r3, r2
 80096c0:	d013      	beq.n	80096ea <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80096c2:	e02c      	b.n	800971e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	68db      	ldr	r3, [r3, #12]
 80096c8:	623b      	str	r3, [r7, #32]
          break;
 80096ca:	e029      	b.n	8009720 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	68db      	ldr	r3, [r3, #12]
 80096d0:	3304      	adds	r3, #4
 80096d2:	623b      	str	r3, [r7, #32]
          break;
 80096d4:	e024      	b.n	8009720 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	68db      	ldr	r3, [r3, #12]
 80096da:	3308      	adds	r3, #8
 80096dc:	623b      	str	r3, [r7, #32]
          break;
 80096de:	e01f      	b.n	8009720 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	68db      	ldr	r3, [r3, #12]
 80096e4:	330c      	adds	r3, #12
 80096e6:	623b      	str	r3, [r7, #32]
          break;
 80096e8:	e01a      	b.n	8009720 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	689b      	ldr	r3, [r3, #8]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d102      	bne.n	80096f8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80096f2:	2304      	movs	r3, #4
 80096f4:	623b      	str	r3, [r7, #32]
          break;
 80096f6:	e013      	b.n	8009720 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80096f8:	683b      	ldr	r3, [r7, #0]
 80096fa:	689b      	ldr	r3, [r3, #8]
 80096fc:	2b01      	cmp	r3, #1
 80096fe:	d105      	bne.n	800970c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8009700:	2308      	movs	r3, #8
 8009702:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	69fa      	ldr	r2, [r7, #28]
 8009708:	611a      	str	r2, [r3, #16]
          break;
 800970a:	e009      	b.n	8009720 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800970c:	2308      	movs	r3, #8
 800970e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	69fa      	ldr	r2, [r7, #28]
 8009714:	615a      	str	r2, [r3, #20]
          break;
 8009716:	e003      	b.n	8009720 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8009718:	2300      	movs	r3, #0
 800971a:	623b      	str	r3, [r7, #32]
          break;
 800971c:	e000      	b.n	8009720 <HAL_GPIO_Init+0x130>
          break;
 800971e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009720:	69bb      	ldr	r3, [r7, #24]
 8009722:	2bff      	cmp	r3, #255	; 0xff
 8009724:	d801      	bhi.n	800972a <HAL_GPIO_Init+0x13a>
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	e001      	b.n	800972e <HAL_GPIO_Init+0x13e>
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	3304      	adds	r3, #4
 800972e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009730:	69bb      	ldr	r3, [r7, #24]
 8009732:	2bff      	cmp	r3, #255	; 0xff
 8009734:	d802      	bhi.n	800973c <HAL_GPIO_Init+0x14c>
 8009736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009738:	009b      	lsls	r3, r3, #2
 800973a:	e002      	b.n	8009742 <HAL_GPIO_Init+0x152>
 800973c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800973e:	3b08      	subs	r3, #8
 8009740:	009b      	lsls	r3, r3, #2
 8009742:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	681a      	ldr	r2, [r3, #0]
 8009748:	210f      	movs	r1, #15
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	fa01 f303 	lsl.w	r3, r1, r3
 8009750:	43db      	mvns	r3, r3
 8009752:	401a      	ands	r2, r3
 8009754:	6a39      	ldr	r1, [r7, #32]
 8009756:	693b      	ldr	r3, [r7, #16]
 8009758:	fa01 f303 	lsl.w	r3, r1, r3
 800975c:	431a      	orrs	r2, r3
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	685b      	ldr	r3, [r3, #4]
 8009766:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800976a:	2b00      	cmp	r3, #0
 800976c:	f000 80c1 	beq.w	80098f2 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8009770:	4b49      	ldr	r3, [pc, #292]	; (8009898 <HAL_GPIO_Init+0x2a8>)
 8009772:	699b      	ldr	r3, [r3, #24]
 8009774:	4a48      	ldr	r2, [pc, #288]	; (8009898 <HAL_GPIO_Init+0x2a8>)
 8009776:	f043 0301 	orr.w	r3, r3, #1
 800977a:	6193      	str	r3, [r2, #24]
 800977c:	4b46      	ldr	r3, [pc, #280]	; (8009898 <HAL_GPIO_Init+0x2a8>)
 800977e:	699b      	ldr	r3, [r3, #24]
 8009780:	f003 0301 	and.w	r3, r3, #1
 8009784:	60bb      	str	r3, [r7, #8]
 8009786:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8009788:	4a44      	ldr	r2, [pc, #272]	; (800989c <HAL_GPIO_Init+0x2ac>)
 800978a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800978c:	089b      	lsrs	r3, r3, #2
 800978e:	3302      	adds	r3, #2
 8009790:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009794:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8009796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009798:	f003 0303 	and.w	r3, r3, #3
 800979c:	009b      	lsls	r3, r3, #2
 800979e:	220f      	movs	r2, #15
 80097a0:	fa02 f303 	lsl.w	r3, r2, r3
 80097a4:	43db      	mvns	r3, r3
 80097a6:	68fa      	ldr	r2, [r7, #12]
 80097a8:	4013      	ands	r3, r2
 80097aa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	4a3c      	ldr	r2, [pc, #240]	; (80098a0 <HAL_GPIO_Init+0x2b0>)
 80097b0:	4293      	cmp	r3, r2
 80097b2:	d01f      	beq.n	80097f4 <HAL_GPIO_Init+0x204>
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	4a3b      	ldr	r2, [pc, #236]	; (80098a4 <HAL_GPIO_Init+0x2b4>)
 80097b8:	4293      	cmp	r3, r2
 80097ba:	d019      	beq.n	80097f0 <HAL_GPIO_Init+0x200>
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	4a3a      	ldr	r2, [pc, #232]	; (80098a8 <HAL_GPIO_Init+0x2b8>)
 80097c0:	4293      	cmp	r3, r2
 80097c2:	d013      	beq.n	80097ec <HAL_GPIO_Init+0x1fc>
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	4a39      	ldr	r2, [pc, #228]	; (80098ac <HAL_GPIO_Init+0x2bc>)
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d00d      	beq.n	80097e8 <HAL_GPIO_Init+0x1f8>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	4a38      	ldr	r2, [pc, #224]	; (80098b0 <HAL_GPIO_Init+0x2c0>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d007      	beq.n	80097e4 <HAL_GPIO_Init+0x1f4>
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	4a37      	ldr	r2, [pc, #220]	; (80098b4 <HAL_GPIO_Init+0x2c4>)
 80097d8:	4293      	cmp	r3, r2
 80097da:	d101      	bne.n	80097e0 <HAL_GPIO_Init+0x1f0>
 80097dc:	2305      	movs	r3, #5
 80097de:	e00a      	b.n	80097f6 <HAL_GPIO_Init+0x206>
 80097e0:	2306      	movs	r3, #6
 80097e2:	e008      	b.n	80097f6 <HAL_GPIO_Init+0x206>
 80097e4:	2304      	movs	r3, #4
 80097e6:	e006      	b.n	80097f6 <HAL_GPIO_Init+0x206>
 80097e8:	2303      	movs	r3, #3
 80097ea:	e004      	b.n	80097f6 <HAL_GPIO_Init+0x206>
 80097ec:	2302      	movs	r3, #2
 80097ee:	e002      	b.n	80097f6 <HAL_GPIO_Init+0x206>
 80097f0:	2301      	movs	r3, #1
 80097f2:	e000      	b.n	80097f6 <HAL_GPIO_Init+0x206>
 80097f4:	2300      	movs	r3, #0
 80097f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097f8:	f002 0203 	and.w	r2, r2, #3
 80097fc:	0092      	lsls	r2, r2, #2
 80097fe:	4093      	lsls	r3, r2
 8009800:	68fa      	ldr	r2, [r7, #12]
 8009802:	4313      	orrs	r3, r2
 8009804:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8009806:	4925      	ldr	r1, [pc, #148]	; (800989c <HAL_GPIO_Init+0x2ac>)
 8009808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800980a:	089b      	lsrs	r3, r3, #2
 800980c:	3302      	adds	r3, #2
 800980e:	68fa      	ldr	r2, [r7, #12]
 8009810:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8009814:	683b      	ldr	r3, [r7, #0]
 8009816:	685b      	ldr	r3, [r3, #4]
 8009818:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800981c:	2b00      	cmp	r3, #0
 800981e:	d006      	beq.n	800982e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8009820:	4b25      	ldr	r3, [pc, #148]	; (80098b8 <HAL_GPIO_Init+0x2c8>)
 8009822:	689a      	ldr	r2, [r3, #8]
 8009824:	4924      	ldr	r1, [pc, #144]	; (80098b8 <HAL_GPIO_Init+0x2c8>)
 8009826:	69bb      	ldr	r3, [r7, #24]
 8009828:	4313      	orrs	r3, r2
 800982a:	608b      	str	r3, [r1, #8]
 800982c:	e006      	b.n	800983c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800982e:	4b22      	ldr	r3, [pc, #136]	; (80098b8 <HAL_GPIO_Init+0x2c8>)
 8009830:	689a      	ldr	r2, [r3, #8]
 8009832:	69bb      	ldr	r3, [r7, #24]
 8009834:	43db      	mvns	r3, r3
 8009836:	4920      	ldr	r1, [pc, #128]	; (80098b8 <HAL_GPIO_Init+0x2c8>)
 8009838:	4013      	ands	r3, r2
 800983a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	685b      	ldr	r3, [r3, #4]
 8009840:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009844:	2b00      	cmp	r3, #0
 8009846:	d006      	beq.n	8009856 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8009848:	4b1b      	ldr	r3, [pc, #108]	; (80098b8 <HAL_GPIO_Init+0x2c8>)
 800984a:	68da      	ldr	r2, [r3, #12]
 800984c:	491a      	ldr	r1, [pc, #104]	; (80098b8 <HAL_GPIO_Init+0x2c8>)
 800984e:	69bb      	ldr	r3, [r7, #24]
 8009850:	4313      	orrs	r3, r2
 8009852:	60cb      	str	r3, [r1, #12]
 8009854:	e006      	b.n	8009864 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8009856:	4b18      	ldr	r3, [pc, #96]	; (80098b8 <HAL_GPIO_Init+0x2c8>)
 8009858:	68da      	ldr	r2, [r3, #12]
 800985a:	69bb      	ldr	r3, [r7, #24]
 800985c:	43db      	mvns	r3, r3
 800985e:	4916      	ldr	r1, [pc, #88]	; (80098b8 <HAL_GPIO_Init+0x2c8>)
 8009860:	4013      	ands	r3, r2
 8009862:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	685b      	ldr	r3, [r3, #4]
 8009868:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800986c:	2b00      	cmp	r3, #0
 800986e:	d025      	beq.n	80098bc <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8009870:	4b11      	ldr	r3, [pc, #68]	; (80098b8 <HAL_GPIO_Init+0x2c8>)
 8009872:	685a      	ldr	r2, [r3, #4]
 8009874:	4910      	ldr	r1, [pc, #64]	; (80098b8 <HAL_GPIO_Init+0x2c8>)
 8009876:	69bb      	ldr	r3, [r7, #24]
 8009878:	4313      	orrs	r3, r2
 800987a:	604b      	str	r3, [r1, #4]
 800987c:	e025      	b.n	80098ca <HAL_GPIO_Init+0x2da>
 800987e:	bf00      	nop
 8009880:	10320000 	.word	0x10320000
 8009884:	10310000 	.word	0x10310000
 8009888:	10220000 	.word	0x10220000
 800988c:	10210000 	.word	0x10210000
 8009890:	10120000 	.word	0x10120000
 8009894:	10110000 	.word	0x10110000
 8009898:	40021000 	.word	0x40021000
 800989c:	40010000 	.word	0x40010000
 80098a0:	40010800 	.word	0x40010800
 80098a4:	40010c00 	.word	0x40010c00
 80098a8:	40011000 	.word	0x40011000
 80098ac:	40011400 	.word	0x40011400
 80098b0:	40011800 	.word	0x40011800
 80098b4:	40011c00 	.word	0x40011c00
 80098b8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80098bc:	4b15      	ldr	r3, [pc, #84]	; (8009914 <HAL_GPIO_Init+0x324>)
 80098be:	685a      	ldr	r2, [r3, #4]
 80098c0:	69bb      	ldr	r3, [r7, #24]
 80098c2:	43db      	mvns	r3, r3
 80098c4:	4913      	ldr	r1, [pc, #76]	; (8009914 <HAL_GPIO_Init+0x324>)
 80098c6:	4013      	ands	r3, r2
 80098c8:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	685b      	ldr	r3, [r3, #4]
 80098ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d006      	beq.n	80098e4 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80098d6:	4b0f      	ldr	r3, [pc, #60]	; (8009914 <HAL_GPIO_Init+0x324>)
 80098d8:	681a      	ldr	r2, [r3, #0]
 80098da:	490e      	ldr	r1, [pc, #56]	; (8009914 <HAL_GPIO_Init+0x324>)
 80098dc:	69bb      	ldr	r3, [r7, #24]
 80098de:	4313      	orrs	r3, r2
 80098e0:	600b      	str	r3, [r1, #0]
 80098e2:	e006      	b.n	80098f2 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80098e4:	4b0b      	ldr	r3, [pc, #44]	; (8009914 <HAL_GPIO_Init+0x324>)
 80098e6:	681a      	ldr	r2, [r3, #0]
 80098e8:	69bb      	ldr	r3, [r7, #24]
 80098ea:	43db      	mvns	r3, r3
 80098ec:	4909      	ldr	r1, [pc, #36]	; (8009914 <HAL_GPIO_Init+0x324>)
 80098ee:	4013      	ands	r3, r2
 80098f0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80098f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098f4:	3301      	adds	r3, #1
 80098f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80098f8:	683b      	ldr	r3, [r7, #0]
 80098fa:	681a      	ldr	r2, [r3, #0]
 80098fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098fe:	fa22 f303 	lsr.w	r3, r2, r3
 8009902:	2b00      	cmp	r3, #0
 8009904:	f47f ae7e 	bne.w	8009604 <HAL_GPIO_Init+0x14>
  }
}
 8009908:	bf00      	nop
 800990a:	bf00      	nop
 800990c:	372c      	adds	r7, #44	; 0x2c
 800990e:	46bd      	mov	sp, r7
 8009910:	bc80      	pop	{r7}
 8009912:	4770      	bx	lr
 8009914:	40010400 	.word	0x40010400

08009918 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8009918:	b480      	push	{r7}
 800991a:	b089      	sub	sp, #36	; 0x24
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
 8009920:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8009922:	2300      	movs	r3, #0
 8009924:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8009926:	e0a6      	b.n	8009a76 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8009928:	2201      	movs	r2, #1
 800992a:	69fb      	ldr	r3, [r7, #28]
 800992c:	fa02 f303 	lsl.w	r3, r2, r3
 8009930:	683a      	ldr	r2, [r7, #0]
 8009932:	4013      	ands	r3, r2
 8009934:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8009936:	69bb      	ldr	r3, [r7, #24]
 8009938:	2b00      	cmp	r3, #0
 800993a:	f000 8099 	beq.w	8009a70 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800993e:	4a54      	ldr	r2, [pc, #336]	; (8009a90 <HAL_GPIO_DeInit+0x178>)
 8009940:	69fb      	ldr	r3, [r7, #28]
 8009942:	089b      	lsrs	r3, r3, #2
 8009944:	3302      	adds	r3, #2
 8009946:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800994a:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800994c:	69fb      	ldr	r3, [r7, #28]
 800994e:	f003 0303 	and.w	r3, r3, #3
 8009952:	009b      	lsls	r3, r3, #2
 8009954:	220f      	movs	r2, #15
 8009956:	fa02 f303 	lsl.w	r3, r2, r3
 800995a:	697a      	ldr	r2, [r7, #20]
 800995c:	4013      	ands	r3, r2
 800995e:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	4a4c      	ldr	r2, [pc, #304]	; (8009a94 <HAL_GPIO_DeInit+0x17c>)
 8009964:	4293      	cmp	r3, r2
 8009966:	d01f      	beq.n	80099a8 <HAL_GPIO_DeInit+0x90>
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	4a4b      	ldr	r2, [pc, #300]	; (8009a98 <HAL_GPIO_DeInit+0x180>)
 800996c:	4293      	cmp	r3, r2
 800996e:	d019      	beq.n	80099a4 <HAL_GPIO_DeInit+0x8c>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	4a4a      	ldr	r2, [pc, #296]	; (8009a9c <HAL_GPIO_DeInit+0x184>)
 8009974:	4293      	cmp	r3, r2
 8009976:	d013      	beq.n	80099a0 <HAL_GPIO_DeInit+0x88>
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	4a49      	ldr	r2, [pc, #292]	; (8009aa0 <HAL_GPIO_DeInit+0x188>)
 800997c:	4293      	cmp	r3, r2
 800997e:	d00d      	beq.n	800999c <HAL_GPIO_DeInit+0x84>
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	4a48      	ldr	r2, [pc, #288]	; (8009aa4 <HAL_GPIO_DeInit+0x18c>)
 8009984:	4293      	cmp	r3, r2
 8009986:	d007      	beq.n	8009998 <HAL_GPIO_DeInit+0x80>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	4a47      	ldr	r2, [pc, #284]	; (8009aa8 <HAL_GPIO_DeInit+0x190>)
 800998c:	4293      	cmp	r3, r2
 800998e:	d101      	bne.n	8009994 <HAL_GPIO_DeInit+0x7c>
 8009990:	2305      	movs	r3, #5
 8009992:	e00a      	b.n	80099aa <HAL_GPIO_DeInit+0x92>
 8009994:	2306      	movs	r3, #6
 8009996:	e008      	b.n	80099aa <HAL_GPIO_DeInit+0x92>
 8009998:	2304      	movs	r3, #4
 800999a:	e006      	b.n	80099aa <HAL_GPIO_DeInit+0x92>
 800999c:	2303      	movs	r3, #3
 800999e:	e004      	b.n	80099aa <HAL_GPIO_DeInit+0x92>
 80099a0:	2302      	movs	r3, #2
 80099a2:	e002      	b.n	80099aa <HAL_GPIO_DeInit+0x92>
 80099a4:	2301      	movs	r3, #1
 80099a6:	e000      	b.n	80099aa <HAL_GPIO_DeInit+0x92>
 80099a8:	2300      	movs	r3, #0
 80099aa:	69fa      	ldr	r2, [r7, #28]
 80099ac:	f002 0203 	and.w	r2, r2, #3
 80099b0:	0092      	lsls	r2, r2, #2
 80099b2:	4093      	lsls	r3, r2
 80099b4:	697a      	ldr	r2, [r7, #20]
 80099b6:	429a      	cmp	r2, r3
 80099b8:	d132      	bne.n	8009a20 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80099ba:	4b3c      	ldr	r3, [pc, #240]	; (8009aac <HAL_GPIO_DeInit+0x194>)
 80099bc:	681a      	ldr	r2, [r3, #0]
 80099be:	69bb      	ldr	r3, [r7, #24]
 80099c0:	43db      	mvns	r3, r3
 80099c2:	493a      	ldr	r1, [pc, #232]	; (8009aac <HAL_GPIO_DeInit+0x194>)
 80099c4:	4013      	ands	r3, r2
 80099c6:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80099c8:	4b38      	ldr	r3, [pc, #224]	; (8009aac <HAL_GPIO_DeInit+0x194>)
 80099ca:	685a      	ldr	r2, [r3, #4]
 80099cc:	69bb      	ldr	r3, [r7, #24]
 80099ce:	43db      	mvns	r3, r3
 80099d0:	4936      	ldr	r1, [pc, #216]	; (8009aac <HAL_GPIO_DeInit+0x194>)
 80099d2:	4013      	ands	r3, r2
 80099d4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80099d6:	4b35      	ldr	r3, [pc, #212]	; (8009aac <HAL_GPIO_DeInit+0x194>)
 80099d8:	68da      	ldr	r2, [r3, #12]
 80099da:	69bb      	ldr	r3, [r7, #24]
 80099dc:	43db      	mvns	r3, r3
 80099de:	4933      	ldr	r1, [pc, #204]	; (8009aac <HAL_GPIO_DeInit+0x194>)
 80099e0:	4013      	ands	r3, r2
 80099e2:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 80099e4:	4b31      	ldr	r3, [pc, #196]	; (8009aac <HAL_GPIO_DeInit+0x194>)
 80099e6:	689a      	ldr	r2, [r3, #8]
 80099e8:	69bb      	ldr	r3, [r7, #24]
 80099ea:	43db      	mvns	r3, r3
 80099ec:	492f      	ldr	r1, [pc, #188]	; (8009aac <HAL_GPIO_DeInit+0x194>)
 80099ee:	4013      	ands	r3, r2
 80099f0:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 80099f2:	69fb      	ldr	r3, [r7, #28]
 80099f4:	f003 0303 	and.w	r3, r3, #3
 80099f8:	009b      	lsls	r3, r3, #2
 80099fa:	220f      	movs	r2, #15
 80099fc:	fa02 f303 	lsl.w	r3, r2, r3
 8009a00:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8009a02:	4a23      	ldr	r2, [pc, #140]	; (8009a90 <HAL_GPIO_DeInit+0x178>)
 8009a04:	69fb      	ldr	r3, [r7, #28]
 8009a06:	089b      	lsrs	r3, r3, #2
 8009a08:	3302      	adds	r3, #2
 8009a0a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8009a0e:	697b      	ldr	r3, [r7, #20]
 8009a10:	43da      	mvns	r2, r3
 8009a12:	481f      	ldr	r0, [pc, #124]	; (8009a90 <HAL_GPIO_DeInit+0x178>)
 8009a14:	69fb      	ldr	r3, [r7, #28]
 8009a16:	089b      	lsrs	r3, r3, #2
 8009a18:	400a      	ands	r2, r1
 8009a1a:	3302      	adds	r3, #2
 8009a1c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8009a20:	69bb      	ldr	r3, [r7, #24]
 8009a22:	2bff      	cmp	r3, #255	; 0xff
 8009a24:	d801      	bhi.n	8009a2a <HAL_GPIO_DeInit+0x112>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	e001      	b.n	8009a2e <HAL_GPIO_DeInit+0x116>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	3304      	adds	r3, #4
 8009a2e:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8009a30:	69bb      	ldr	r3, [r7, #24]
 8009a32:	2bff      	cmp	r3, #255	; 0xff
 8009a34:	d802      	bhi.n	8009a3c <HAL_GPIO_DeInit+0x124>
 8009a36:	69fb      	ldr	r3, [r7, #28]
 8009a38:	009b      	lsls	r3, r3, #2
 8009a3a:	e002      	b.n	8009a42 <HAL_GPIO_DeInit+0x12a>
 8009a3c:	69fb      	ldr	r3, [r7, #28]
 8009a3e:	3b08      	subs	r3, #8
 8009a40:	009b      	lsls	r3, r3, #2
 8009a42:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8009a44:	693b      	ldr	r3, [r7, #16]
 8009a46:	681a      	ldr	r2, [r3, #0]
 8009a48:	210f      	movs	r1, #15
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8009a50:	43db      	mvns	r3, r3
 8009a52:	401a      	ands	r2, r3
 8009a54:	2104      	movs	r1, #4
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	fa01 f303 	lsl.w	r3, r1, r3
 8009a5c:	431a      	orrs	r2, r3
 8009a5e:	693b      	ldr	r3, [r7, #16]
 8009a60:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	68da      	ldr	r2, [r3, #12]
 8009a66:	69bb      	ldr	r3, [r7, #24]
 8009a68:	43db      	mvns	r3, r3
 8009a6a:	401a      	ands	r2, r3
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8009a70:	69fb      	ldr	r3, [r7, #28]
 8009a72:	3301      	adds	r3, #1
 8009a74:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8009a76:	683a      	ldr	r2, [r7, #0]
 8009a78:	69fb      	ldr	r3, [r7, #28]
 8009a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	f47f af52 	bne.w	8009928 <HAL_GPIO_DeInit+0x10>
  }
}
 8009a84:	bf00      	nop
 8009a86:	bf00      	nop
 8009a88:	3724      	adds	r7, #36	; 0x24
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bc80      	pop	{r7}
 8009a8e:	4770      	bx	lr
 8009a90:	40010000 	.word	0x40010000
 8009a94:	40010800 	.word	0x40010800
 8009a98:	40010c00 	.word	0x40010c00
 8009a9c:	40011000 	.word	0x40011000
 8009aa0:	40011400 	.word	0x40011400
 8009aa4:	40011800 	.word	0x40011800
 8009aa8:	40011c00 	.word	0x40011c00
 8009aac:	40010400 	.word	0x40010400

08009ab0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b085      	sub	sp, #20
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	460b      	mov	r3, r1
 8009aba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	689a      	ldr	r2, [r3, #8]
 8009ac0:	887b      	ldrh	r3, [r7, #2]
 8009ac2:	4013      	ands	r3, r2
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	d002      	beq.n	8009ace <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009ac8:	2301      	movs	r3, #1
 8009aca:	73fb      	strb	r3, [r7, #15]
 8009acc:	e001      	b.n	8009ad2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8009ace:	2300      	movs	r3, #0
 8009ad0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8009ad2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	3714      	adds	r7, #20
 8009ad8:	46bd      	mov	sp, r7
 8009ada:	bc80      	pop	{r7}
 8009adc:	4770      	bx	lr

08009ade <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009ade:	b480      	push	{r7}
 8009ae0:	b083      	sub	sp, #12
 8009ae2:	af00      	add	r7, sp, #0
 8009ae4:	6078      	str	r0, [r7, #4]
 8009ae6:	460b      	mov	r3, r1
 8009ae8:	807b      	strh	r3, [r7, #2]
 8009aea:	4613      	mov	r3, r2
 8009aec:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8009aee:	787b      	ldrb	r3, [r7, #1]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d003      	beq.n	8009afc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009af4:	887a      	ldrh	r2, [r7, #2]
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8009afa:	e003      	b.n	8009b04 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8009afc:	887b      	ldrh	r3, [r7, #2]
 8009afe:	041a      	lsls	r2, r3, #16
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	611a      	str	r2, [r3, #16]
}
 8009b04:	bf00      	nop
 8009b06:	370c      	adds	r7, #12
 8009b08:	46bd      	mov	sp, r7
 8009b0a:	bc80      	pop	{r7}
 8009b0c:	4770      	bx	lr

08009b0e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8009b0e:	b480      	push	{r7}
 8009b10:	b085      	sub	sp, #20
 8009b12:	af00      	add	r7, sp, #0
 8009b14:	6078      	str	r0, [r7, #4]
 8009b16:	460b      	mov	r3, r1
 8009b18:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	68db      	ldr	r3, [r3, #12]
 8009b1e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009b20:	887a      	ldrh	r2, [r7, #2]
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	4013      	ands	r3, r2
 8009b26:	041a      	lsls	r2, r3, #16
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	43d9      	mvns	r1, r3
 8009b2c:	887b      	ldrh	r3, [r7, #2]
 8009b2e:	400b      	ands	r3, r1
 8009b30:	431a      	orrs	r2, r3
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	611a      	str	r2, [r3, #16]
}
 8009b36:	bf00      	nop
 8009b38:	3714      	adds	r7, #20
 8009b3a:	46bd      	mov	sp, r7
 8009b3c:	bc80      	pop	{r7}
 8009b3e:	4770      	bx	lr

08009b40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8009b40:	b580      	push	{r7, lr}
 8009b42:	b084      	sub	sp, #16
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d101      	bne.n	8009b52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8009b4e:	2301      	movs	r3, #1
 8009b50:	e12b      	b.n	8009daa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b58:	b2db      	uxtb	r3, r3
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d106      	bne.n	8009b6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	2200      	movs	r2, #0
 8009b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	f7fe fff8 	bl	8008b5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2224      	movs	r2, #36	; 0x24
 8009b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	681a      	ldr	r2, [r3, #0]
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	681b      	ldr	r3, [r3, #0]
 8009b7e:	f022 0201 	bic.w	r2, r2, #1
 8009b82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	681a      	ldr	r2, [r3, #0]
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009b92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	681a      	ldr	r2, [r3, #0]
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009ba2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009ba4:	f001 fdb8 	bl	800b718 <HAL_RCC_GetPCLK1Freq>
 8009ba8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	685b      	ldr	r3, [r3, #4]
 8009bae:	4a81      	ldr	r2, [pc, #516]	; (8009db4 <HAL_I2C_Init+0x274>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d807      	bhi.n	8009bc4 <HAL_I2C_Init+0x84>
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	4a80      	ldr	r2, [pc, #512]	; (8009db8 <HAL_I2C_Init+0x278>)
 8009bb8:	4293      	cmp	r3, r2
 8009bba:	bf94      	ite	ls
 8009bbc:	2301      	movls	r3, #1
 8009bbe:	2300      	movhi	r3, #0
 8009bc0:	b2db      	uxtb	r3, r3
 8009bc2:	e006      	b.n	8009bd2 <HAL_I2C_Init+0x92>
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	4a7d      	ldr	r2, [pc, #500]	; (8009dbc <HAL_I2C_Init+0x27c>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	bf94      	ite	ls
 8009bcc:	2301      	movls	r3, #1
 8009bce:	2300      	movhi	r3, #0
 8009bd0:	b2db      	uxtb	r3, r3
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d001      	beq.n	8009bda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8009bd6:	2301      	movs	r3, #1
 8009bd8:	e0e7      	b.n	8009daa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	4a78      	ldr	r2, [pc, #480]	; (8009dc0 <HAL_I2C_Init+0x280>)
 8009bde:	fba2 2303 	umull	r2, r3, r2, r3
 8009be2:	0c9b      	lsrs	r3, r3, #18
 8009be4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	685b      	ldr	r3, [r3, #4]
 8009bec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	68ba      	ldr	r2, [r7, #8]
 8009bf6:	430a      	orrs	r2, r1
 8009bf8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	6a1b      	ldr	r3, [r3, #32]
 8009c00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	685b      	ldr	r3, [r3, #4]
 8009c08:	4a6a      	ldr	r2, [pc, #424]	; (8009db4 <HAL_I2C_Init+0x274>)
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d802      	bhi.n	8009c14 <HAL_I2C_Init+0xd4>
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	3301      	adds	r3, #1
 8009c12:	e009      	b.n	8009c28 <HAL_I2C_Init+0xe8>
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8009c1a:	fb02 f303 	mul.w	r3, r2, r3
 8009c1e:	4a69      	ldr	r2, [pc, #420]	; (8009dc4 <HAL_I2C_Init+0x284>)
 8009c20:	fba2 2303 	umull	r2, r3, r2, r3
 8009c24:	099b      	lsrs	r3, r3, #6
 8009c26:	3301      	adds	r3, #1
 8009c28:	687a      	ldr	r2, [r7, #4]
 8009c2a:	6812      	ldr	r2, [r2, #0]
 8009c2c:	430b      	orrs	r3, r1
 8009c2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	69db      	ldr	r3, [r3, #28]
 8009c36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8009c3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	685b      	ldr	r3, [r3, #4]
 8009c42:	495c      	ldr	r1, [pc, #368]	; (8009db4 <HAL_I2C_Init+0x274>)
 8009c44:	428b      	cmp	r3, r1
 8009c46:	d819      	bhi.n	8009c7c <HAL_I2C_Init+0x13c>
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	1e59      	subs	r1, r3, #1
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	685b      	ldr	r3, [r3, #4]
 8009c50:	005b      	lsls	r3, r3, #1
 8009c52:	fbb1 f3f3 	udiv	r3, r1, r3
 8009c56:	1c59      	adds	r1, r3, #1
 8009c58:	f640 73fc 	movw	r3, #4092	; 0xffc
 8009c5c:	400b      	ands	r3, r1
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d00a      	beq.n	8009c78 <HAL_I2C_Init+0x138>
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	1e59      	subs	r1, r3, #1
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	685b      	ldr	r3, [r3, #4]
 8009c6a:	005b      	lsls	r3, r3, #1
 8009c6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8009c70:	3301      	adds	r3, #1
 8009c72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009c76:	e051      	b.n	8009d1c <HAL_I2C_Init+0x1dc>
 8009c78:	2304      	movs	r3, #4
 8009c7a:	e04f      	b.n	8009d1c <HAL_I2C_Init+0x1dc>
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	689b      	ldr	r3, [r3, #8]
 8009c80:	2b00      	cmp	r3, #0
 8009c82:	d111      	bne.n	8009ca8 <HAL_I2C_Init+0x168>
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	1e58      	subs	r0, r3, #1
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6859      	ldr	r1, [r3, #4]
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	005b      	lsls	r3, r3, #1
 8009c90:	440b      	add	r3, r1
 8009c92:	fbb0 f3f3 	udiv	r3, r0, r3
 8009c96:	3301      	adds	r3, #1
 8009c98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	bf0c      	ite	eq
 8009ca0:	2301      	moveq	r3, #1
 8009ca2:	2300      	movne	r3, #0
 8009ca4:	b2db      	uxtb	r3, r3
 8009ca6:	e012      	b.n	8009cce <HAL_I2C_Init+0x18e>
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	1e58      	subs	r0, r3, #1
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	6859      	ldr	r1, [r3, #4]
 8009cb0:	460b      	mov	r3, r1
 8009cb2:	009b      	lsls	r3, r3, #2
 8009cb4:	440b      	add	r3, r1
 8009cb6:	0099      	lsls	r1, r3, #2
 8009cb8:	440b      	add	r3, r1
 8009cba:	fbb0 f3f3 	udiv	r3, r0, r3
 8009cbe:	3301      	adds	r3, #1
 8009cc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009cc4:	2b00      	cmp	r3, #0
 8009cc6:	bf0c      	ite	eq
 8009cc8:	2301      	moveq	r3, #1
 8009cca:	2300      	movne	r3, #0
 8009ccc:	b2db      	uxtb	r3, r3
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d001      	beq.n	8009cd6 <HAL_I2C_Init+0x196>
 8009cd2:	2301      	movs	r3, #1
 8009cd4:	e022      	b.n	8009d1c <HAL_I2C_Init+0x1dc>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	689b      	ldr	r3, [r3, #8]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d10e      	bne.n	8009cfc <HAL_I2C_Init+0x1bc>
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	1e58      	subs	r0, r3, #1
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6859      	ldr	r1, [r3, #4]
 8009ce6:	460b      	mov	r3, r1
 8009ce8:	005b      	lsls	r3, r3, #1
 8009cea:	440b      	add	r3, r1
 8009cec:	fbb0 f3f3 	udiv	r3, r0, r3
 8009cf0:	3301      	adds	r3, #1
 8009cf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009cf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cfa:	e00f      	b.n	8009d1c <HAL_I2C_Init+0x1dc>
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	1e58      	subs	r0, r3, #1
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6859      	ldr	r1, [r3, #4]
 8009d04:	460b      	mov	r3, r1
 8009d06:	009b      	lsls	r3, r3, #2
 8009d08:	440b      	add	r3, r1
 8009d0a:	0099      	lsls	r1, r3, #2
 8009d0c:	440b      	add	r3, r1
 8009d0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009d12:	3301      	adds	r3, #1
 8009d14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009d18:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009d1c:	6879      	ldr	r1, [r7, #4]
 8009d1e:	6809      	ldr	r1, [r1, #0]
 8009d20:	4313      	orrs	r3, r2
 8009d22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	69da      	ldr	r2, [r3, #28]
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6a1b      	ldr	r3, [r3, #32]
 8009d36:	431a      	orrs	r2, r3
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	430a      	orrs	r2, r1
 8009d3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	689b      	ldr	r3, [r3, #8]
 8009d46:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8009d4a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8009d4e:	687a      	ldr	r2, [r7, #4]
 8009d50:	6911      	ldr	r1, [r2, #16]
 8009d52:	687a      	ldr	r2, [r7, #4]
 8009d54:	68d2      	ldr	r2, [r2, #12]
 8009d56:	4311      	orrs	r1, r2
 8009d58:	687a      	ldr	r2, [r7, #4]
 8009d5a:	6812      	ldr	r2, [r2, #0]
 8009d5c:	430b      	orrs	r3, r1
 8009d5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	68db      	ldr	r3, [r3, #12]
 8009d66:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	695a      	ldr	r2, [r3, #20]
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	699b      	ldr	r3, [r3, #24]
 8009d72:	431a      	orrs	r2, r3
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	430a      	orrs	r2, r1
 8009d7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	681a      	ldr	r2, [r3, #0]
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	f042 0201 	orr.w	r2, r2, #1
 8009d8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	2220      	movs	r2, #32
 8009d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2200      	movs	r2, #0
 8009da4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009da8:	2300      	movs	r3, #0
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3710      	adds	r7, #16
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}
 8009db2:	bf00      	nop
 8009db4:	000186a0 	.word	0x000186a0
 8009db8:	001e847f 	.word	0x001e847f
 8009dbc:	003d08ff 	.word	0x003d08ff
 8009dc0:	431bde83 	.word	0x431bde83
 8009dc4:	10624dd3 	.word	0x10624dd3

08009dc8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b082      	sub	sp, #8
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d101      	bne.n	8009dda <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	e021      	b.n	8009e1e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2224      	movs	r2, #36	; 0x24
 8009dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	681a      	ldr	r2, [r3, #0]
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f022 0201 	bic.w	r2, r2, #1
 8009df0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f7fe fef0 	bl	8008bd8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2200      	movs	r2, #0
 8009e02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	2200      	movs	r2, #0
 8009e10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	2200      	movs	r2, #0
 8009e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009e1c:	2300      	movs	r3, #0
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	3708      	adds	r7, #8
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}
	...

08009e28 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b088      	sub	sp, #32
 8009e2c:	af02      	add	r7, sp, #8
 8009e2e:	60f8      	str	r0, [r7, #12]
 8009e30:	607a      	str	r2, [r7, #4]
 8009e32:	461a      	mov	r2, r3
 8009e34:	460b      	mov	r3, r1
 8009e36:	817b      	strh	r3, [r7, #10]
 8009e38:	4613      	mov	r3, r2
 8009e3a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009e3c:	f7ff f85e 	bl	8008efc <HAL_GetTick>
 8009e40:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e48:	b2db      	uxtb	r3, r3
 8009e4a:	2b20      	cmp	r3, #32
 8009e4c:	f040 80e0 	bne.w	800a010 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	9300      	str	r3, [sp, #0]
 8009e54:	2319      	movs	r3, #25
 8009e56:	2201      	movs	r2, #1
 8009e58:	4970      	ldr	r1, [pc, #448]	; (800a01c <HAL_I2C_Master_Transmit+0x1f4>)
 8009e5a:	68f8      	ldr	r0, [r7, #12]
 8009e5c:	f000 fe5c 	bl	800ab18 <I2C_WaitOnFlagUntilTimeout>
 8009e60:	4603      	mov	r3, r0
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d001      	beq.n	8009e6a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8009e66:	2302      	movs	r3, #2
 8009e68:	e0d3      	b.n	800a012 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009e70:	2b01      	cmp	r3, #1
 8009e72:	d101      	bne.n	8009e78 <HAL_I2C_Master_Transmit+0x50>
 8009e74:	2302      	movs	r3, #2
 8009e76:	e0cc      	b.n	800a012 <HAL_I2C_Master_Transmit+0x1ea>
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	2201      	movs	r2, #1
 8009e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	f003 0301 	and.w	r3, r3, #1
 8009e8a:	2b01      	cmp	r3, #1
 8009e8c:	d007      	beq.n	8009e9e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009e8e:	68fb      	ldr	r3, [r7, #12]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	681a      	ldr	r2, [r3, #0]
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	f042 0201 	orr.w	r2, r2, #1
 8009e9c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	681a      	ldr	r2, [r3, #0]
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009eac:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	2221      	movs	r2, #33	; 0x21
 8009eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	2210      	movs	r2, #16
 8009eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009ec4:	68fb      	ldr	r3, [r7, #12]
 8009ec6:	687a      	ldr	r2, [r7, #4]
 8009ec8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	893a      	ldrh	r2, [r7, #8]
 8009ece:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ed4:	b29a      	uxth	r2, r3
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009eda:	68fb      	ldr	r3, [r7, #12]
 8009edc:	4a50      	ldr	r2, [pc, #320]	; (800a020 <HAL_I2C_Master_Transmit+0x1f8>)
 8009ede:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8009ee0:	8979      	ldrh	r1, [r7, #10]
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	6a3a      	ldr	r2, [r7, #32]
 8009ee6:	68f8      	ldr	r0, [r7, #12]
 8009ee8:	f000 fc16 	bl	800a718 <I2C_MasterRequestWrite>
 8009eec:	4603      	mov	r3, r0
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d001      	beq.n	8009ef6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	e08d      	b.n	800a012 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009ef6:	2300      	movs	r3, #0
 8009ef8:	613b      	str	r3, [r7, #16]
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	695b      	ldr	r3, [r3, #20]
 8009f00:	613b      	str	r3, [r7, #16]
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	699b      	ldr	r3, [r3, #24]
 8009f08:	613b      	str	r3, [r7, #16]
 8009f0a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8009f0c:	e066      	b.n	8009fdc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009f0e:	697a      	ldr	r2, [r7, #20]
 8009f10:	6a39      	ldr	r1, [r7, #32]
 8009f12:	68f8      	ldr	r0, [r7, #12]
 8009f14:	f000 ff1a 	bl	800ad4c <I2C_WaitOnTXEFlagUntilTimeout>
 8009f18:	4603      	mov	r3, r0
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d00d      	beq.n	8009f3a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009f1e:	68fb      	ldr	r3, [r7, #12]
 8009f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f22:	2b04      	cmp	r3, #4
 8009f24:	d107      	bne.n	8009f36 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	681a      	ldr	r2, [r3, #0]
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f34:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009f36:	2301      	movs	r3, #1
 8009f38:	e06b      	b.n	800a012 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009f3a:	68fb      	ldr	r3, [r7, #12]
 8009f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f3e:	781a      	ldrb	r2, [r3, #0]
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f4a:	1c5a      	adds	r2, r3, #1
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f54:	b29b      	uxth	r3, r3
 8009f56:	3b01      	subs	r3, #1
 8009f58:	b29a      	uxth	r2, r3
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f62:	3b01      	subs	r3, #1
 8009f64:	b29a      	uxth	r2, r3
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	695b      	ldr	r3, [r3, #20]
 8009f70:	f003 0304 	and.w	r3, r3, #4
 8009f74:	2b04      	cmp	r3, #4
 8009f76:	d11b      	bne.n	8009fb0 <HAL_I2C_Master_Transmit+0x188>
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d017      	beq.n	8009fb0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f84:	781a      	ldrb	r2, [r3, #0]
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f90:	1c5a      	adds	r2, r3, #1
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009f9a:	b29b      	uxth	r3, r3
 8009f9c:	3b01      	subs	r3, #1
 8009f9e:	b29a      	uxth	r2, r3
 8009fa0:	68fb      	ldr	r3, [r7, #12]
 8009fa2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fa8:	3b01      	subs	r3, #1
 8009faa:	b29a      	uxth	r2, r3
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009fb0:	697a      	ldr	r2, [r7, #20]
 8009fb2:	6a39      	ldr	r1, [r7, #32]
 8009fb4:	68f8      	ldr	r0, [r7, #12]
 8009fb6:	f000 ff11 	bl	800addc <I2C_WaitOnBTFFlagUntilTimeout>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d00d      	beq.n	8009fdc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009fc0:	68fb      	ldr	r3, [r7, #12]
 8009fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fc4:	2b04      	cmp	r3, #4
 8009fc6:	d107      	bne.n	8009fd8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	681a      	ldr	r2, [r3, #0]
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009fd6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8009fd8:	2301      	movs	r3, #1
 8009fda:	e01a      	b.n	800a012 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d194      	bne.n	8009f0e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	681a      	ldr	r2, [r3, #0]
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009ff2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	2220      	movs	r2, #32
 8009ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	2200      	movs	r2, #0
 800a000:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	2200      	movs	r2, #0
 800a008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a00c:	2300      	movs	r3, #0
 800a00e:	e000      	b.n	800a012 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a010:	2302      	movs	r3, #2
  }
}
 800a012:	4618      	mov	r0, r3
 800a014:	3718      	adds	r7, #24
 800a016:	46bd      	mov	sp, r7
 800a018:	bd80      	pop	{r7, pc}
 800a01a:	bf00      	nop
 800a01c:	00100002 	.word	0x00100002
 800a020:	ffff0000 	.word	0xffff0000

0800a024 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a024:	b580      	push	{r7, lr}
 800a026:	b088      	sub	sp, #32
 800a028:	af02      	add	r7, sp, #8
 800a02a:	60f8      	str	r0, [r7, #12]
 800a02c:	4608      	mov	r0, r1
 800a02e:	4611      	mov	r1, r2
 800a030:	461a      	mov	r2, r3
 800a032:	4603      	mov	r3, r0
 800a034:	817b      	strh	r3, [r7, #10]
 800a036:	460b      	mov	r3, r1
 800a038:	813b      	strh	r3, [r7, #8]
 800a03a:	4613      	mov	r3, r2
 800a03c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a03e:	f7fe ff5d 	bl	8008efc <HAL_GetTick>
 800a042:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a044:	68fb      	ldr	r3, [r7, #12]
 800a046:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a04a:	b2db      	uxtb	r3, r3
 800a04c:	2b20      	cmp	r3, #32
 800a04e:	f040 80d9 	bne.w	800a204 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a052:	697b      	ldr	r3, [r7, #20]
 800a054:	9300      	str	r3, [sp, #0]
 800a056:	2319      	movs	r3, #25
 800a058:	2201      	movs	r2, #1
 800a05a:	496d      	ldr	r1, [pc, #436]	; (800a210 <HAL_I2C_Mem_Write+0x1ec>)
 800a05c:	68f8      	ldr	r0, [r7, #12]
 800a05e:	f000 fd5b 	bl	800ab18 <I2C_WaitOnFlagUntilTimeout>
 800a062:	4603      	mov	r3, r0
 800a064:	2b00      	cmp	r3, #0
 800a066:	d001      	beq.n	800a06c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800a068:	2302      	movs	r3, #2
 800a06a:	e0cc      	b.n	800a206 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a072:	2b01      	cmp	r3, #1
 800a074:	d101      	bne.n	800a07a <HAL_I2C_Mem_Write+0x56>
 800a076:	2302      	movs	r3, #2
 800a078:	e0c5      	b.n	800a206 <HAL_I2C_Mem_Write+0x1e2>
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	2201      	movs	r2, #1
 800a07e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	f003 0301 	and.w	r3, r3, #1
 800a08c:	2b01      	cmp	r3, #1
 800a08e:	d007      	beq.n	800a0a0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	681a      	ldr	r2, [r3, #0]
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	f042 0201 	orr.w	r2, r2, #1
 800a09e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	681a      	ldr	r2, [r3, #0]
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a0ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	2221      	movs	r2, #33	; 0x21
 800a0b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	2240      	movs	r2, #64	; 0x40
 800a0bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	6a3a      	ldr	r2, [r7, #32]
 800a0ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a0d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a0d6:	b29a      	uxth	r2, r3
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	4a4d      	ldr	r2, [pc, #308]	; (800a214 <HAL_I2C_Mem_Write+0x1f0>)
 800a0e0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a0e2:	88f8      	ldrh	r0, [r7, #6]
 800a0e4:	893a      	ldrh	r2, [r7, #8]
 800a0e6:	8979      	ldrh	r1, [r7, #10]
 800a0e8:	697b      	ldr	r3, [r7, #20]
 800a0ea:	9301      	str	r3, [sp, #4]
 800a0ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0ee:	9300      	str	r3, [sp, #0]
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	68f8      	ldr	r0, [r7, #12]
 800a0f4:	f000 fb92 	bl	800a81c <I2C_RequestMemoryWrite>
 800a0f8:	4603      	mov	r3, r0
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d052      	beq.n	800a1a4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800a0fe:	2301      	movs	r3, #1
 800a100:	e081      	b.n	800a206 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a102:	697a      	ldr	r2, [r7, #20]
 800a104:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a106:	68f8      	ldr	r0, [r7, #12]
 800a108:	f000 fe20 	bl	800ad4c <I2C_WaitOnTXEFlagUntilTimeout>
 800a10c:	4603      	mov	r3, r0
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d00d      	beq.n	800a12e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a116:	2b04      	cmp	r3, #4
 800a118:	d107      	bne.n	800a12a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	681a      	ldr	r2, [r3, #0]
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a128:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800a12a:	2301      	movs	r3, #1
 800a12c:	e06b      	b.n	800a206 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a132:	781a      	ldrb	r2, [r3, #0]
 800a134:	68fb      	ldr	r3, [r7, #12]
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a13e:	1c5a      	adds	r2, r3, #1
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a148:	3b01      	subs	r3, #1
 800a14a:	b29a      	uxth	r2, r3
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a154:	b29b      	uxth	r3, r3
 800a156:	3b01      	subs	r3, #1
 800a158:	b29a      	uxth	r2, r3
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	695b      	ldr	r3, [r3, #20]
 800a164:	f003 0304 	and.w	r3, r3, #4
 800a168:	2b04      	cmp	r3, #4
 800a16a:	d11b      	bne.n	800a1a4 <HAL_I2C_Mem_Write+0x180>
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a170:	2b00      	cmp	r3, #0
 800a172:	d017      	beq.n	800a1a4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a178:	781a      	ldrb	r2, [r3, #0]
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	681b      	ldr	r3, [r3, #0]
 800a17e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a184:	1c5a      	adds	r2, r3, #1
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a18e:	3b01      	subs	r3, #1
 800a190:	b29a      	uxth	r2, r3
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a19a:	b29b      	uxth	r3, r3
 800a19c:	3b01      	subs	r3, #1
 800a19e:	b29a      	uxth	r2, r3
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d1aa      	bne.n	800a102 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a1ac:	697a      	ldr	r2, [r7, #20]
 800a1ae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a1b0:	68f8      	ldr	r0, [r7, #12]
 800a1b2:	f000 fe13 	bl	800addc <I2C_WaitOnBTFFlagUntilTimeout>
 800a1b6:	4603      	mov	r3, r0
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d00d      	beq.n	800a1d8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a1c0:	2b04      	cmp	r3, #4
 800a1c2:	d107      	bne.n	800a1d4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	681a      	ldr	r2, [r3, #0]
 800a1ca:	68fb      	ldr	r3, [r7, #12]
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1d2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	e016      	b.n	800a206 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	681a      	ldr	r2, [r3, #0]
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	2220      	movs	r2, #32
 800a1ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	2200      	movs	r2, #0
 800a1fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a200:	2300      	movs	r3, #0
 800a202:	e000      	b.n	800a206 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800a204:	2302      	movs	r3, #2
  }
}
 800a206:	4618      	mov	r0, r3
 800a208:	3718      	adds	r7, #24
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}
 800a20e:	bf00      	nop
 800a210:	00100002 	.word	0x00100002
 800a214:	ffff0000 	.word	0xffff0000

0800a218 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b08c      	sub	sp, #48	; 0x30
 800a21c:	af02      	add	r7, sp, #8
 800a21e:	60f8      	str	r0, [r7, #12]
 800a220:	4608      	mov	r0, r1
 800a222:	4611      	mov	r1, r2
 800a224:	461a      	mov	r2, r3
 800a226:	4603      	mov	r3, r0
 800a228:	817b      	strh	r3, [r7, #10]
 800a22a:	460b      	mov	r3, r1
 800a22c:	813b      	strh	r3, [r7, #8]
 800a22e:	4613      	mov	r3, r2
 800a230:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800a232:	2300      	movs	r3, #0
 800a234:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800a236:	f7fe fe61 	bl	8008efc <HAL_GetTick>
 800a23a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a242:	b2db      	uxtb	r3, r3
 800a244:	2b20      	cmp	r3, #32
 800a246:	f040 8244 	bne.w	800a6d2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800a24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a24c:	9300      	str	r3, [sp, #0]
 800a24e:	2319      	movs	r3, #25
 800a250:	2201      	movs	r2, #1
 800a252:	4982      	ldr	r1, [pc, #520]	; (800a45c <HAL_I2C_Mem_Read+0x244>)
 800a254:	68f8      	ldr	r0, [r7, #12]
 800a256:	f000 fc5f 	bl	800ab18 <I2C_WaitOnFlagUntilTimeout>
 800a25a:	4603      	mov	r3, r0
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d001      	beq.n	800a264 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 800a260:	2302      	movs	r3, #2
 800a262:	e237      	b.n	800a6d4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a26a:	2b01      	cmp	r3, #1
 800a26c:	d101      	bne.n	800a272 <HAL_I2C_Mem_Read+0x5a>
 800a26e:	2302      	movs	r3, #2
 800a270:	e230      	b.n	800a6d4 <HAL_I2C_Mem_Read+0x4bc>
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	2201      	movs	r2, #1
 800a276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f003 0301 	and.w	r3, r3, #1
 800a284:	2b01      	cmp	r3, #1
 800a286:	d007      	beq.n	800a298 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	681a      	ldr	r2, [r3, #0]
 800a28e:	68fb      	ldr	r3, [r7, #12]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f042 0201 	orr.w	r2, r2, #1
 800a296:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	681a      	ldr	r2, [r3, #0]
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a2a6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	2222      	movs	r2, #34	; 0x22
 800a2ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	2240      	movs	r2, #64	; 0x40
 800a2b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a2b8:	68fb      	ldr	r3, [r7, #12]
 800a2ba:	2200      	movs	r2, #0
 800a2bc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a2c2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800a2c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a2ce:	b29a      	uxth	r2, r3
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	4a62      	ldr	r2, [pc, #392]	; (800a460 <HAL_I2C_Mem_Read+0x248>)
 800a2d8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800a2da:	88f8      	ldrh	r0, [r7, #6]
 800a2dc:	893a      	ldrh	r2, [r7, #8]
 800a2de:	8979      	ldrh	r1, [r7, #10]
 800a2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e2:	9301      	str	r3, [sp, #4]
 800a2e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a2e6:	9300      	str	r3, [sp, #0]
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	68f8      	ldr	r0, [r7, #12]
 800a2ec:	f000 fb2c 	bl	800a948 <I2C_RequestMemoryRead>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d001      	beq.n	800a2fa <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	e1ec      	b.n	800a6d4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d113      	bne.n	800a32a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a302:	2300      	movs	r3, #0
 800a304:	61fb      	str	r3, [r7, #28]
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	695b      	ldr	r3, [r3, #20]
 800a30c:	61fb      	str	r3, [r7, #28]
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	699b      	ldr	r3, [r3, #24]
 800a314:	61fb      	str	r3, [r7, #28]
 800a316:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	681a      	ldr	r2, [r3, #0]
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a326:	601a      	str	r2, [r3, #0]
 800a328:	e1c0      	b.n	800a6ac <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a32e:	2b01      	cmp	r3, #1
 800a330:	d11e      	bne.n	800a370 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	681a      	ldr	r2, [r3, #0]
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a340:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a342:	b672      	cpsid	i
}
 800a344:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a346:	2300      	movs	r3, #0
 800a348:	61bb      	str	r3, [r7, #24]
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	695b      	ldr	r3, [r3, #20]
 800a350:	61bb      	str	r3, [r7, #24]
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	699b      	ldr	r3, [r3, #24]
 800a358:	61bb      	str	r3, [r7, #24]
 800a35a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	681a      	ldr	r2, [r3, #0]
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a36a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a36c:	b662      	cpsie	i
}
 800a36e:	e035      	b.n	800a3dc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a374:	2b02      	cmp	r3, #2
 800a376:	d11e      	bne.n	800a3b6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	681a      	ldr	r2, [r3, #0]
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a386:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a388:	b672      	cpsid	i
}
 800a38a:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a38c:	2300      	movs	r3, #0
 800a38e:	617b      	str	r3, [r7, #20]
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	695b      	ldr	r3, [r3, #20]
 800a396:	617b      	str	r3, [r7, #20]
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	699b      	ldr	r3, [r3, #24]
 800a39e:	617b      	str	r3, [r7, #20]
 800a3a0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	681a      	ldr	r2, [r3, #0]
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a3b0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800a3b2:	b662      	cpsie	i
}
 800a3b4:	e012      	b.n	800a3dc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	681a      	ldr	r2, [r3, #0]
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a3c4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	613b      	str	r3, [r7, #16]
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	695b      	ldr	r3, [r3, #20]
 800a3d0:	613b      	str	r3, [r7, #16]
 800a3d2:	68fb      	ldr	r3, [r7, #12]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	699b      	ldr	r3, [r3, #24]
 800a3d8:	613b      	str	r3, [r7, #16]
 800a3da:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 800a3dc:	e166      	b.n	800a6ac <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3e2:	2b03      	cmp	r3, #3
 800a3e4:	f200 811f 	bhi.w	800a626 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a3ec:	2b01      	cmp	r3, #1
 800a3ee:	d123      	bne.n	800a438 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a3f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a3f4:	68f8      	ldr	r0, [r7, #12]
 800a3f6:	f000 fd39 	bl	800ae6c <I2C_WaitOnRXNEFlagUntilTimeout>
 800a3fa:	4603      	mov	r3, r0
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d001      	beq.n	800a404 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 800a400:	2301      	movs	r3, #1
 800a402:	e167      	b.n	800a6d4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	691a      	ldr	r2, [r3, #16]
 800a40a:	68fb      	ldr	r3, [r7, #12]
 800a40c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a40e:	b2d2      	uxtb	r2, r2
 800a410:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a412:	68fb      	ldr	r3, [r7, #12]
 800a414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a416:	1c5a      	adds	r2, r3, #1
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a41c:	68fb      	ldr	r3, [r7, #12]
 800a41e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a420:	3b01      	subs	r3, #1
 800a422:	b29a      	uxth	r2, r3
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a42c:	b29b      	uxth	r3, r3
 800a42e:	3b01      	subs	r3, #1
 800a430:	b29a      	uxth	r2, r3
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a436:	e139      	b.n	800a6ac <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a43c:	2b02      	cmp	r3, #2
 800a43e:	d152      	bne.n	800a4e6 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a442:	9300      	str	r3, [sp, #0]
 800a444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a446:	2200      	movs	r2, #0
 800a448:	4906      	ldr	r1, [pc, #24]	; (800a464 <HAL_I2C_Mem_Read+0x24c>)
 800a44a:	68f8      	ldr	r0, [r7, #12]
 800a44c:	f000 fb64 	bl	800ab18 <I2C_WaitOnFlagUntilTimeout>
 800a450:	4603      	mov	r3, r0
 800a452:	2b00      	cmp	r3, #0
 800a454:	d008      	beq.n	800a468 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 800a456:	2301      	movs	r3, #1
 800a458:	e13c      	b.n	800a6d4 <HAL_I2C_Mem_Read+0x4bc>
 800a45a:	bf00      	nop
 800a45c:	00100002 	.word	0x00100002
 800a460:	ffff0000 	.word	0xffff0000
 800a464:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 800a468:	b672      	cpsid	i
}
 800a46a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	681a      	ldr	r2, [r3, #0]
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a47a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	691a      	ldr	r2, [r3, #16]
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a486:	b2d2      	uxtb	r2, r2
 800a488:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a48e:	1c5a      	adds	r2, r3, #1
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a498:	3b01      	subs	r3, #1
 800a49a:	b29a      	uxth	r2, r3
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4a4:	b29b      	uxth	r3, r3
 800a4a6:	3b01      	subs	r3, #1
 800a4a8:	b29a      	uxth	r2, r3
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a4ae:	b662      	cpsie	i
}
 800a4b0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	691a      	ldr	r2, [r3, #16]
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4bc:	b2d2      	uxtb	r2, r2
 800a4be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c4:	1c5a      	adds	r2, r3, #1
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a4ce:	3b01      	subs	r3, #1
 800a4d0:	b29a      	uxth	r2, r3
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a4da:	b29b      	uxth	r3, r3
 800a4dc:	3b01      	subs	r3, #1
 800a4de:	b29a      	uxth	r2, r3
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a4e4:	e0e2      	b.n	800a6ac <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800a4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e8:	9300      	str	r3, [sp, #0]
 800a4ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	497b      	ldr	r1, [pc, #492]	; (800a6dc <HAL_I2C_Mem_Read+0x4c4>)
 800a4f0:	68f8      	ldr	r0, [r7, #12]
 800a4f2:	f000 fb11 	bl	800ab18 <I2C_WaitOnFlagUntilTimeout>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d001      	beq.n	800a500 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800a4fc:	2301      	movs	r3, #1
 800a4fe:	e0e9      	b.n	800a6d4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	681a      	ldr	r2, [r3, #0]
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a50e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800a510:	b672      	cpsid	i
}
 800a512:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	691a      	ldr	r2, [r3, #16]
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a51e:	b2d2      	uxtb	r2, r2
 800a520:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a526:	1c5a      	adds	r2, r3, #1
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a530:	3b01      	subs	r3, #1
 800a532:	b29a      	uxth	r2, r3
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a53c:	b29b      	uxth	r3, r3
 800a53e:	3b01      	subs	r3, #1
 800a540:	b29a      	uxth	r2, r3
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800a546:	4b66      	ldr	r3, [pc, #408]	; (800a6e0 <HAL_I2C_Mem_Read+0x4c8>)
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	08db      	lsrs	r3, r3, #3
 800a54c:	4a65      	ldr	r2, [pc, #404]	; (800a6e4 <HAL_I2C_Mem_Read+0x4cc>)
 800a54e:	fba2 2303 	umull	r2, r3, r2, r3
 800a552:	0a1a      	lsrs	r2, r3, #8
 800a554:	4613      	mov	r3, r2
 800a556:	009b      	lsls	r3, r3, #2
 800a558:	4413      	add	r3, r2
 800a55a:	00da      	lsls	r2, r3, #3
 800a55c:	1ad3      	subs	r3, r2, r3
 800a55e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800a560:	6a3b      	ldr	r3, [r7, #32]
 800a562:	3b01      	subs	r3, #1
 800a564:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 800a566:	6a3b      	ldr	r3, [r7, #32]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d118      	bne.n	800a59e <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	2200      	movs	r2, #0
 800a570:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	2220      	movs	r2, #32
 800a576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	2200      	movs	r2, #0
 800a57e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a586:	f043 0220 	orr.w	r2, r3, #32
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 800a58e:	b662      	cpsie	i
}
 800a590:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	2200      	movs	r2, #0
 800a596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 800a59a:	2301      	movs	r3, #1
 800a59c:	e09a      	b.n	800a6d4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	695b      	ldr	r3, [r3, #20]
 800a5a4:	f003 0304 	and.w	r3, r3, #4
 800a5a8:	2b04      	cmp	r3, #4
 800a5aa:	d1d9      	bne.n	800a560 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	681a      	ldr	r2, [r3, #0]
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a5ba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	691a      	ldr	r2, [r3, #16]
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5c6:	b2d2      	uxtb	r2, r2
 800a5c8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ce:	1c5a      	adds	r2, r3, #1
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a5d8:	3b01      	subs	r3, #1
 800a5da:	b29a      	uxth	r2, r3
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5e4:	b29b      	uxth	r3, r3
 800a5e6:	3b01      	subs	r3, #1
 800a5e8:	b29a      	uxth	r2, r3
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800a5ee:	b662      	cpsie	i
}
 800a5f0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	691a      	ldr	r2, [r3, #16]
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5fc:	b2d2      	uxtb	r2, r2
 800a5fe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a604:	1c5a      	adds	r2, r3, #1
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a60e:	3b01      	subs	r3, #1
 800a610:	b29a      	uxth	r2, r3
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a61a:	b29b      	uxth	r3, r3
 800a61c:	3b01      	subs	r3, #1
 800a61e:	b29a      	uxth	r2, r3
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	855a      	strh	r2, [r3, #42]	; 0x2a
 800a624:	e042      	b.n	800a6ac <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800a626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a628:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a62a:	68f8      	ldr	r0, [r7, #12]
 800a62c:	f000 fc1e 	bl	800ae6c <I2C_WaitOnRXNEFlagUntilTimeout>
 800a630:	4603      	mov	r3, r0
 800a632:	2b00      	cmp	r3, #0
 800a634:	d001      	beq.n	800a63a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 800a636:	2301      	movs	r3, #1
 800a638:	e04c      	b.n	800a6d4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a63a:	68fb      	ldr	r3, [r7, #12]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	691a      	ldr	r2, [r3, #16]
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a644:	b2d2      	uxtb	r2, r2
 800a646:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a64c:	1c5a      	adds	r2, r3, #1
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a656:	3b01      	subs	r3, #1
 800a658:	b29a      	uxth	r2, r3
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a662:	b29b      	uxth	r3, r3
 800a664:	3b01      	subs	r3, #1
 800a666:	b29a      	uxth	r2, r3
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	695b      	ldr	r3, [r3, #20]
 800a672:	f003 0304 	and.w	r3, r3, #4
 800a676:	2b04      	cmp	r3, #4
 800a678:	d118      	bne.n	800a6ac <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	691a      	ldr	r2, [r3, #16]
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a684:	b2d2      	uxtb	r2, r2
 800a686:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a68c:	1c5a      	adds	r2, r3, #1
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a696:	3b01      	subs	r3, #1
 800a698:	b29a      	uxth	r2, r3
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6a2:	b29b      	uxth	r3, r3
 800a6a4:	3b01      	subs	r3, #1
 800a6a6:	b29a      	uxth	r2, r3
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	f47f ae94 	bne.w	800a3de <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	2220      	movs	r2, #32
 800a6ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	2200      	movs	r2, #0
 800a6c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	e000      	b.n	800a6d4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 800a6d2:	2302      	movs	r3, #2
  }
}
 800a6d4:	4618      	mov	r0, r3
 800a6d6:	3728      	adds	r7, #40	; 0x28
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	bd80      	pop	{r7, pc}
 800a6dc:	00010004 	.word	0x00010004
 800a6e0:	200009b4 	.word	0x200009b4
 800a6e4:	14f8b589 	.word	0x14f8b589

0800a6e8 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800a6e8:	b480      	push	{r7}
 800a6ea:	b083      	sub	sp, #12
 800a6ec:	af00      	add	r7, sp, #0
 800a6ee:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6f6:	b2db      	uxtb	r3, r3
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	370c      	adds	r7, #12
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bc80      	pop	{r7}
 800a700:	4770      	bx	lr

0800a702 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800a702:	b480      	push	{r7}
 800a704:	b083      	sub	sp, #12
 800a706:	af00      	add	r7, sp, #0
 800a708:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800a70e:	4618      	mov	r0, r3
 800a710:	370c      	adds	r7, #12
 800a712:	46bd      	mov	sp, r7
 800a714:	bc80      	pop	{r7}
 800a716:	4770      	bx	lr

0800a718 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b088      	sub	sp, #32
 800a71c:	af02      	add	r7, sp, #8
 800a71e:	60f8      	str	r0, [r7, #12]
 800a720:	607a      	str	r2, [r7, #4]
 800a722:	603b      	str	r3, [r7, #0]
 800a724:	460b      	mov	r3, r1
 800a726:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a72c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800a72e:	697b      	ldr	r3, [r7, #20]
 800a730:	2b08      	cmp	r3, #8
 800a732:	d006      	beq.n	800a742 <I2C_MasterRequestWrite+0x2a>
 800a734:	697b      	ldr	r3, [r7, #20]
 800a736:	2b01      	cmp	r3, #1
 800a738:	d003      	beq.n	800a742 <I2C_MasterRequestWrite+0x2a>
 800a73a:	697b      	ldr	r3, [r7, #20]
 800a73c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a740:	d108      	bne.n	800a754 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	681b      	ldr	r3, [r3, #0]
 800a746:	681a      	ldr	r2, [r3, #0]
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a750:	601a      	str	r2, [r3, #0]
 800a752:	e00b      	b.n	800a76c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a758:	2b12      	cmp	r3, #18
 800a75a:	d107      	bne.n	800a76c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	681a      	ldr	r2, [r3, #0]
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a76a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a76c:	683b      	ldr	r3, [r7, #0]
 800a76e:	9300      	str	r3, [sp, #0]
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2200      	movs	r2, #0
 800a774:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a778:	68f8      	ldr	r0, [r7, #12]
 800a77a:	f000 f9cd 	bl	800ab18 <I2C_WaitOnFlagUntilTimeout>
 800a77e:	4603      	mov	r3, r0
 800a780:	2b00      	cmp	r3, #0
 800a782:	d00d      	beq.n	800a7a0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a78e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a792:	d103      	bne.n	800a79c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a79a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a79c:	2303      	movs	r3, #3
 800a79e:	e035      	b.n	800a80c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	691b      	ldr	r3, [r3, #16]
 800a7a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a7a8:	d108      	bne.n	800a7bc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a7aa:	897b      	ldrh	r3, [r7, #10]
 800a7ac:	b2db      	uxtb	r3, r3
 800a7ae:	461a      	mov	r2, r3
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a7b8:	611a      	str	r2, [r3, #16]
 800a7ba:	e01b      	b.n	800a7f4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800a7bc:	897b      	ldrh	r3, [r7, #10]
 800a7be:	11db      	asrs	r3, r3, #7
 800a7c0:	b2db      	uxtb	r3, r3
 800a7c2:	f003 0306 	and.w	r3, r3, #6
 800a7c6:	b2db      	uxtb	r3, r3
 800a7c8:	f063 030f 	orn	r3, r3, #15
 800a7cc:	b2da      	uxtb	r2, r3
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681b      	ldr	r3, [r3, #0]
 800a7d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	687a      	ldr	r2, [r7, #4]
 800a7d8:	490e      	ldr	r1, [pc, #56]	; (800a814 <I2C_MasterRequestWrite+0xfc>)
 800a7da:	68f8      	ldr	r0, [r7, #12]
 800a7dc:	f000 fa16 	bl	800ac0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a7e0:	4603      	mov	r3, r0
 800a7e2:	2b00      	cmp	r3, #0
 800a7e4:	d001      	beq.n	800a7ea <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	e010      	b.n	800a80c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800a7ea:	897b      	ldrh	r3, [r7, #10]
 800a7ec:	b2da      	uxtb	r2, r3
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	687a      	ldr	r2, [r7, #4]
 800a7f8:	4907      	ldr	r1, [pc, #28]	; (800a818 <I2C_MasterRequestWrite+0x100>)
 800a7fa:	68f8      	ldr	r0, [r7, #12]
 800a7fc:	f000 fa06 	bl	800ac0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a800:	4603      	mov	r3, r0
 800a802:	2b00      	cmp	r3, #0
 800a804:	d001      	beq.n	800a80a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800a806:	2301      	movs	r3, #1
 800a808:	e000      	b.n	800a80c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800a80a:	2300      	movs	r3, #0
}
 800a80c:	4618      	mov	r0, r3
 800a80e:	3718      	adds	r7, #24
 800a810:	46bd      	mov	sp, r7
 800a812:	bd80      	pop	{r7, pc}
 800a814:	00010008 	.word	0x00010008
 800a818:	00010002 	.word	0x00010002

0800a81c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b088      	sub	sp, #32
 800a820:	af02      	add	r7, sp, #8
 800a822:	60f8      	str	r0, [r7, #12]
 800a824:	4608      	mov	r0, r1
 800a826:	4611      	mov	r1, r2
 800a828:	461a      	mov	r2, r3
 800a82a:	4603      	mov	r3, r0
 800a82c:	817b      	strh	r3, [r7, #10]
 800a82e:	460b      	mov	r3, r1
 800a830:	813b      	strh	r3, [r7, #8]
 800a832:	4613      	mov	r3, r2
 800a834:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	681a      	ldr	r2, [r3, #0]
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a844:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a848:	9300      	str	r3, [sp, #0]
 800a84a:	6a3b      	ldr	r3, [r7, #32]
 800a84c:	2200      	movs	r2, #0
 800a84e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a852:	68f8      	ldr	r0, [r7, #12]
 800a854:	f000 f960 	bl	800ab18 <I2C_WaitOnFlagUntilTimeout>
 800a858:	4603      	mov	r3, r0
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d00d      	beq.n	800a87a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a868:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a86c:	d103      	bne.n	800a876 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a874:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a876:	2303      	movs	r3, #3
 800a878:	e05f      	b.n	800a93a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a87a:	897b      	ldrh	r3, [r7, #10]
 800a87c:	b2db      	uxtb	r3, r3
 800a87e:	461a      	mov	r2, r3
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a888:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a88c:	6a3a      	ldr	r2, [r7, #32]
 800a88e:	492d      	ldr	r1, [pc, #180]	; (800a944 <I2C_RequestMemoryWrite+0x128>)
 800a890:	68f8      	ldr	r0, [r7, #12]
 800a892:	f000 f9bb 	bl	800ac0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a896:	4603      	mov	r3, r0
 800a898:	2b00      	cmp	r3, #0
 800a89a:	d001      	beq.n	800a8a0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800a89c:	2301      	movs	r3, #1
 800a89e:	e04c      	b.n	800a93a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	617b      	str	r3, [r7, #20]
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	695b      	ldr	r3, [r3, #20]
 800a8aa:	617b      	str	r3, [r7, #20]
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	699b      	ldr	r3, [r3, #24]
 800a8b2:	617b      	str	r3, [r7, #20]
 800a8b4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a8b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a8b8:	6a39      	ldr	r1, [r7, #32]
 800a8ba:	68f8      	ldr	r0, [r7, #12]
 800a8bc:	f000 fa46 	bl	800ad4c <I2C_WaitOnTXEFlagUntilTimeout>
 800a8c0:	4603      	mov	r3, r0
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d00d      	beq.n	800a8e2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8ca:	2b04      	cmp	r3, #4
 800a8cc:	d107      	bne.n	800a8de <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a8ce:	68fb      	ldr	r3, [r7, #12]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	681a      	ldr	r2, [r3, #0]
 800a8d4:	68fb      	ldr	r3, [r7, #12]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a8dc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800a8de:	2301      	movs	r3, #1
 800a8e0:	e02b      	b.n	800a93a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800a8e2:	88fb      	ldrh	r3, [r7, #6]
 800a8e4:	2b01      	cmp	r3, #1
 800a8e6:	d105      	bne.n	800a8f4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a8e8:	893b      	ldrh	r3, [r7, #8]
 800a8ea:	b2da      	uxtb	r2, r3
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	611a      	str	r2, [r3, #16]
 800a8f2:	e021      	b.n	800a938 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800a8f4:	893b      	ldrh	r3, [r7, #8]
 800a8f6:	0a1b      	lsrs	r3, r3, #8
 800a8f8:	b29b      	uxth	r3, r3
 800a8fa:	b2da      	uxtb	r2, r3
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a902:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a904:	6a39      	ldr	r1, [r7, #32]
 800a906:	68f8      	ldr	r0, [r7, #12]
 800a908:	f000 fa20 	bl	800ad4c <I2C_WaitOnTXEFlagUntilTimeout>
 800a90c:	4603      	mov	r3, r0
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d00d      	beq.n	800a92e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a916:	2b04      	cmp	r3, #4
 800a918:	d107      	bne.n	800a92a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	681b      	ldr	r3, [r3, #0]
 800a91e:	681a      	ldr	r2, [r3, #0]
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a928:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800a92a:	2301      	movs	r3, #1
 800a92c:	e005      	b.n	800a93a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800a92e:	893b      	ldrh	r3, [r7, #8]
 800a930:	b2da      	uxtb	r2, r3
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800a938:	2300      	movs	r3, #0
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	3718      	adds	r7, #24
 800a93e:	46bd      	mov	sp, r7
 800a940:	bd80      	pop	{r7, pc}
 800a942:	bf00      	nop
 800a944:	00010002 	.word	0x00010002

0800a948 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b088      	sub	sp, #32
 800a94c:	af02      	add	r7, sp, #8
 800a94e:	60f8      	str	r0, [r7, #12]
 800a950:	4608      	mov	r0, r1
 800a952:	4611      	mov	r1, r2
 800a954:	461a      	mov	r2, r3
 800a956:	4603      	mov	r3, r0
 800a958:	817b      	strh	r3, [r7, #10]
 800a95a:	460b      	mov	r3, r1
 800a95c:	813b      	strh	r3, [r7, #8]
 800a95e:	4613      	mov	r3, r2
 800a960:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	681a      	ldr	r2, [r3, #0]
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a970:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	681a      	ldr	r2, [r3, #0]
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	681b      	ldr	r3, [r3, #0]
 800a97c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a980:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800a982:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a984:	9300      	str	r3, [sp, #0]
 800a986:	6a3b      	ldr	r3, [r7, #32]
 800a988:	2200      	movs	r2, #0
 800a98a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800a98e:	68f8      	ldr	r0, [r7, #12]
 800a990:	f000 f8c2 	bl	800ab18 <I2C_WaitOnFlagUntilTimeout>
 800a994:	4603      	mov	r3, r0
 800a996:	2b00      	cmp	r3, #0
 800a998:	d00d      	beq.n	800a9b6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	681b      	ldr	r3, [r3, #0]
 800a99e:	681b      	ldr	r3, [r3, #0]
 800a9a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a9a8:	d103      	bne.n	800a9b2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a9b0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800a9b2:	2303      	movs	r3, #3
 800a9b4:	e0aa      	b.n	800ab0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800a9b6:	897b      	ldrh	r3, [r7, #10]
 800a9b8:	b2db      	uxtb	r3, r3
 800a9ba:	461a      	mov	r2, r3
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a9c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800a9c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9c8:	6a3a      	ldr	r2, [r7, #32]
 800a9ca:	4952      	ldr	r1, [pc, #328]	; (800ab14 <I2C_RequestMemoryRead+0x1cc>)
 800a9cc:	68f8      	ldr	r0, [r7, #12]
 800a9ce:	f000 f91d 	bl	800ac0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800a9d2:	4603      	mov	r3, r0
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d001      	beq.n	800a9dc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800a9d8:	2301      	movs	r3, #1
 800a9da:	e097      	b.n	800ab0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800a9dc:	2300      	movs	r3, #0
 800a9de:	617b      	str	r3, [r7, #20]
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	695b      	ldr	r3, [r3, #20]
 800a9e6:	617b      	str	r3, [r7, #20]
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	699b      	ldr	r3, [r3, #24]
 800a9ee:	617b      	str	r3, [r7, #20]
 800a9f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800a9f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a9f4:	6a39      	ldr	r1, [r7, #32]
 800a9f6:	68f8      	ldr	r0, [r7, #12]
 800a9f8:	f000 f9a8 	bl	800ad4c <I2C_WaitOnTXEFlagUntilTimeout>
 800a9fc:	4603      	mov	r3, r0
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d00d      	beq.n	800aa1e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa06:	2b04      	cmp	r3, #4
 800aa08:	d107      	bne.n	800aa1a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	681a      	ldr	r2, [r3, #0]
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa18:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800aa1a:	2301      	movs	r3, #1
 800aa1c:	e076      	b.n	800ab0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800aa1e:	88fb      	ldrh	r3, [r7, #6]
 800aa20:	2b01      	cmp	r3, #1
 800aa22:	d105      	bne.n	800aa30 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800aa24:	893b      	ldrh	r3, [r7, #8]
 800aa26:	b2da      	uxtb	r2, r3
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	611a      	str	r2, [r3, #16]
 800aa2e:	e021      	b.n	800aa74 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800aa30:	893b      	ldrh	r3, [r7, #8]
 800aa32:	0a1b      	lsrs	r3, r3, #8
 800aa34:	b29b      	uxth	r3, r3
 800aa36:	b2da      	uxtb	r2, r3
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aa3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa40:	6a39      	ldr	r1, [r7, #32]
 800aa42:	68f8      	ldr	r0, [r7, #12]
 800aa44:	f000 f982 	bl	800ad4c <I2C_WaitOnTXEFlagUntilTimeout>
 800aa48:	4603      	mov	r3, r0
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d00d      	beq.n	800aa6a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa52:	2b04      	cmp	r3, #4
 800aa54:	d107      	bne.n	800aa66 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	681b      	ldr	r3, [r3, #0]
 800aa5a:	681a      	ldr	r2, [r3, #0]
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa64:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800aa66:	2301      	movs	r3, #1
 800aa68:	e050      	b.n	800ab0c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800aa6a:	893b      	ldrh	r3, [r7, #8]
 800aa6c:	b2da      	uxtb	r2, r3
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800aa74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa76:	6a39      	ldr	r1, [r7, #32]
 800aa78:	68f8      	ldr	r0, [r7, #12]
 800aa7a:	f000 f967 	bl	800ad4c <I2C_WaitOnTXEFlagUntilTimeout>
 800aa7e:	4603      	mov	r3, r0
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d00d      	beq.n	800aaa0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa88:	2b04      	cmp	r3, #4
 800aa8a:	d107      	bne.n	800aa9c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	681a      	ldr	r2, [r3, #0]
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	681b      	ldr	r3, [r3, #0]
 800aa96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800aa9a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800aa9c:	2301      	movs	r3, #1
 800aa9e:	e035      	b.n	800ab0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	681a      	ldr	r2, [r3, #0]
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aaae:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800aab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aab2:	9300      	str	r3, [sp, #0]
 800aab4:	6a3b      	ldr	r3, [r7, #32]
 800aab6:	2200      	movs	r2, #0
 800aab8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800aabc:	68f8      	ldr	r0, [r7, #12]
 800aabe:	f000 f82b 	bl	800ab18 <I2C_WaitOnFlagUntilTimeout>
 800aac2:	4603      	mov	r3, r0
 800aac4:	2b00      	cmp	r3, #0
 800aac6:	d00d      	beq.n	800aae4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800aad2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aad6:	d103      	bne.n	800aae0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	f44f 7200 	mov.w	r2, #512	; 0x200
 800aade:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800aae0:	2303      	movs	r3, #3
 800aae2:	e013      	b.n	800ab0c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800aae4:	897b      	ldrh	r3, [r7, #10]
 800aae6:	b2db      	uxtb	r3, r3
 800aae8:	f043 0301 	orr.w	r3, r3, #1
 800aaec:	b2da      	uxtb	r2, r3
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800aaf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaf6:	6a3a      	ldr	r2, [r7, #32]
 800aaf8:	4906      	ldr	r1, [pc, #24]	; (800ab14 <I2C_RequestMemoryRead+0x1cc>)
 800aafa:	68f8      	ldr	r0, [r7, #12]
 800aafc:	f000 f886 	bl	800ac0c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800ab00:	4603      	mov	r3, r0
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d001      	beq.n	800ab0a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800ab06:	2301      	movs	r3, #1
 800ab08:	e000      	b.n	800ab0c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800ab0a:	2300      	movs	r3, #0
}
 800ab0c:	4618      	mov	r0, r3
 800ab0e:	3718      	adds	r7, #24
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}
 800ab14:	00010002 	.word	0x00010002

0800ab18 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b084      	sub	sp, #16
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	60f8      	str	r0, [r7, #12]
 800ab20:	60b9      	str	r1, [r7, #8]
 800ab22:	603b      	str	r3, [r7, #0]
 800ab24:	4613      	mov	r3, r2
 800ab26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ab28:	e048      	b.n	800abbc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ab30:	d044      	beq.n	800abbc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ab32:	f7fe f9e3 	bl	8008efc <HAL_GetTick>
 800ab36:	4602      	mov	r2, r0
 800ab38:	69bb      	ldr	r3, [r7, #24]
 800ab3a:	1ad3      	subs	r3, r2, r3
 800ab3c:	683a      	ldr	r2, [r7, #0]
 800ab3e:	429a      	cmp	r2, r3
 800ab40:	d302      	bcc.n	800ab48 <I2C_WaitOnFlagUntilTimeout+0x30>
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	2b00      	cmp	r3, #0
 800ab46:	d139      	bne.n	800abbc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800ab48:	68bb      	ldr	r3, [r7, #8]
 800ab4a:	0c1b      	lsrs	r3, r3, #16
 800ab4c:	b2db      	uxtb	r3, r3
 800ab4e:	2b01      	cmp	r3, #1
 800ab50:	d10d      	bne.n	800ab6e <I2C_WaitOnFlagUntilTimeout+0x56>
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	695b      	ldr	r3, [r3, #20]
 800ab58:	43da      	mvns	r2, r3
 800ab5a:	68bb      	ldr	r3, [r7, #8]
 800ab5c:	4013      	ands	r3, r2
 800ab5e:	b29b      	uxth	r3, r3
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	bf0c      	ite	eq
 800ab64:	2301      	moveq	r3, #1
 800ab66:	2300      	movne	r3, #0
 800ab68:	b2db      	uxtb	r3, r3
 800ab6a:	461a      	mov	r2, r3
 800ab6c:	e00c      	b.n	800ab88 <I2C_WaitOnFlagUntilTimeout+0x70>
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	699b      	ldr	r3, [r3, #24]
 800ab74:	43da      	mvns	r2, r3
 800ab76:	68bb      	ldr	r3, [r7, #8]
 800ab78:	4013      	ands	r3, r2
 800ab7a:	b29b      	uxth	r3, r3
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	bf0c      	ite	eq
 800ab80:	2301      	moveq	r3, #1
 800ab82:	2300      	movne	r3, #0
 800ab84:	b2db      	uxtb	r3, r3
 800ab86:	461a      	mov	r2, r3
 800ab88:	79fb      	ldrb	r3, [r7, #7]
 800ab8a:	429a      	cmp	r2, r3
 800ab8c:	d116      	bne.n	800abbc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	2200      	movs	r2, #0
 800ab92:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	2220      	movs	r2, #32
 800ab98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	2200      	movs	r2, #0
 800aba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aba8:	f043 0220 	orr.w	r2, r3, #32
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	2200      	movs	r2, #0
 800abb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800abb8:	2301      	movs	r3, #1
 800abba:	e023      	b.n	800ac04 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800abbc:	68bb      	ldr	r3, [r7, #8]
 800abbe:	0c1b      	lsrs	r3, r3, #16
 800abc0:	b2db      	uxtb	r3, r3
 800abc2:	2b01      	cmp	r3, #1
 800abc4:	d10d      	bne.n	800abe2 <I2C_WaitOnFlagUntilTimeout+0xca>
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	695b      	ldr	r3, [r3, #20]
 800abcc:	43da      	mvns	r2, r3
 800abce:	68bb      	ldr	r3, [r7, #8]
 800abd0:	4013      	ands	r3, r2
 800abd2:	b29b      	uxth	r3, r3
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	bf0c      	ite	eq
 800abd8:	2301      	moveq	r3, #1
 800abda:	2300      	movne	r3, #0
 800abdc:	b2db      	uxtb	r3, r3
 800abde:	461a      	mov	r2, r3
 800abe0:	e00c      	b.n	800abfc <I2C_WaitOnFlagUntilTimeout+0xe4>
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	699b      	ldr	r3, [r3, #24]
 800abe8:	43da      	mvns	r2, r3
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	4013      	ands	r3, r2
 800abee:	b29b      	uxth	r3, r3
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	bf0c      	ite	eq
 800abf4:	2301      	moveq	r3, #1
 800abf6:	2300      	movne	r3, #0
 800abf8:	b2db      	uxtb	r3, r3
 800abfa:	461a      	mov	r2, r3
 800abfc:	79fb      	ldrb	r3, [r7, #7]
 800abfe:	429a      	cmp	r2, r3
 800ac00:	d093      	beq.n	800ab2a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ac02:	2300      	movs	r3, #0
}
 800ac04:	4618      	mov	r0, r3
 800ac06:	3710      	adds	r7, #16
 800ac08:	46bd      	mov	sp, r7
 800ac0a:	bd80      	pop	{r7, pc}

0800ac0c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800ac0c:	b580      	push	{r7, lr}
 800ac0e:	b084      	sub	sp, #16
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	60f8      	str	r0, [r7, #12]
 800ac14:	60b9      	str	r1, [r7, #8]
 800ac16:	607a      	str	r2, [r7, #4]
 800ac18:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ac1a:	e071      	b.n	800ad00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	695b      	ldr	r3, [r3, #20]
 800ac22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ac26:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ac2a:	d123      	bne.n	800ac74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	681a      	ldr	r2, [r3, #0]
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ac3a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800ac44:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	2200      	movs	r2, #0
 800ac4a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	2220      	movs	r2, #32
 800ac50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	2200      	movs	r2, #0
 800ac58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac60:	f043 0204 	orr.w	r2, r3, #4
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	2200      	movs	r2, #0
 800ac6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800ac70:	2301      	movs	r3, #1
 800ac72:	e067      	b.n	800ad44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac7a:	d041      	beq.n	800ad00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ac7c:	f7fe f93e 	bl	8008efc <HAL_GetTick>
 800ac80:	4602      	mov	r2, r0
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	1ad3      	subs	r3, r2, r3
 800ac86:	687a      	ldr	r2, [r7, #4]
 800ac88:	429a      	cmp	r2, r3
 800ac8a:	d302      	bcc.n	800ac92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d136      	bne.n	800ad00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	0c1b      	lsrs	r3, r3, #16
 800ac96:	b2db      	uxtb	r3, r3
 800ac98:	2b01      	cmp	r3, #1
 800ac9a:	d10c      	bne.n	800acb6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	695b      	ldr	r3, [r3, #20]
 800aca2:	43da      	mvns	r2, r3
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	4013      	ands	r3, r2
 800aca8:	b29b      	uxth	r3, r3
 800acaa:	2b00      	cmp	r3, #0
 800acac:	bf14      	ite	ne
 800acae:	2301      	movne	r3, #1
 800acb0:	2300      	moveq	r3, #0
 800acb2:	b2db      	uxtb	r3, r3
 800acb4:	e00b      	b.n	800acce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	699b      	ldr	r3, [r3, #24]
 800acbc:	43da      	mvns	r2, r3
 800acbe:	68bb      	ldr	r3, [r7, #8]
 800acc0:	4013      	ands	r3, r2
 800acc2:	b29b      	uxth	r3, r3
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	bf14      	ite	ne
 800acc8:	2301      	movne	r3, #1
 800acca:	2300      	moveq	r3, #0
 800accc:	b2db      	uxtb	r3, r3
 800acce:	2b00      	cmp	r3, #0
 800acd0:	d016      	beq.n	800ad00 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	2200      	movs	r2, #0
 800acd6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	2220      	movs	r2, #32
 800acdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	2200      	movs	r2, #0
 800ace4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800acec:	f043 0220 	orr.w	r2, r3, #32
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	2200      	movs	r2, #0
 800acf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800acfc:	2301      	movs	r3, #1
 800acfe:	e021      	b.n	800ad44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800ad00:	68bb      	ldr	r3, [r7, #8]
 800ad02:	0c1b      	lsrs	r3, r3, #16
 800ad04:	b2db      	uxtb	r3, r3
 800ad06:	2b01      	cmp	r3, #1
 800ad08:	d10c      	bne.n	800ad24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	695b      	ldr	r3, [r3, #20]
 800ad10:	43da      	mvns	r2, r3
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	4013      	ands	r3, r2
 800ad16:	b29b      	uxth	r3, r3
 800ad18:	2b00      	cmp	r3, #0
 800ad1a:	bf14      	ite	ne
 800ad1c:	2301      	movne	r3, #1
 800ad1e:	2300      	moveq	r3, #0
 800ad20:	b2db      	uxtb	r3, r3
 800ad22:	e00b      	b.n	800ad3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	699b      	ldr	r3, [r3, #24]
 800ad2a:	43da      	mvns	r2, r3
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	4013      	ands	r3, r2
 800ad30:	b29b      	uxth	r3, r3
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	bf14      	ite	ne
 800ad36:	2301      	movne	r3, #1
 800ad38:	2300      	moveq	r3, #0
 800ad3a:	b2db      	uxtb	r3, r3
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	f47f af6d 	bne.w	800ac1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800ad42:	2300      	movs	r3, #0
}
 800ad44:	4618      	mov	r0, r3
 800ad46:	3710      	adds	r7, #16
 800ad48:	46bd      	mov	sp, r7
 800ad4a:	bd80      	pop	{r7, pc}

0800ad4c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b084      	sub	sp, #16
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	60f8      	str	r0, [r7, #12]
 800ad54:	60b9      	str	r1, [r7, #8]
 800ad56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ad58:	e034      	b.n	800adc4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800ad5a:	68f8      	ldr	r0, [r7, #12]
 800ad5c:	f000 f8e3 	bl	800af26 <I2C_IsAcknowledgeFailed>
 800ad60:	4603      	mov	r3, r0
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d001      	beq.n	800ad6a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800ad66:	2301      	movs	r3, #1
 800ad68:	e034      	b.n	800add4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad70:	d028      	beq.n	800adc4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ad72:	f7fe f8c3 	bl	8008efc <HAL_GetTick>
 800ad76:	4602      	mov	r2, r0
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	1ad3      	subs	r3, r2, r3
 800ad7c:	68ba      	ldr	r2, [r7, #8]
 800ad7e:	429a      	cmp	r2, r3
 800ad80:	d302      	bcc.n	800ad88 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800ad82:	68bb      	ldr	r3, [r7, #8]
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	d11d      	bne.n	800adc4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	695b      	ldr	r3, [r3, #20]
 800ad8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad92:	2b80      	cmp	r3, #128	; 0x80
 800ad94:	d016      	beq.n	800adc4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	2200      	movs	r2, #0
 800ad9a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	2220      	movs	r2, #32
 800ada0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	2200      	movs	r2, #0
 800ada8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adb0:	f043 0220 	orr.w	r2, r3, #32
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800adb8:	68fb      	ldr	r3, [r7, #12]
 800adba:	2200      	movs	r2, #0
 800adbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800adc0:	2301      	movs	r3, #1
 800adc2:	e007      	b.n	800add4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	695b      	ldr	r3, [r3, #20]
 800adca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adce:	2b80      	cmp	r3, #128	; 0x80
 800add0:	d1c3      	bne.n	800ad5a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800add2:	2300      	movs	r3, #0
}
 800add4:	4618      	mov	r0, r3
 800add6:	3710      	adds	r7, #16
 800add8:	46bd      	mov	sp, r7
 800adda:	bd80      	pop	{r7, pc}

0800addc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b084      	sub	sp, #16
 800ade0:	af00      	add	r7, sp, #0
 800ade2:	60f8      	str	r0, [r7, #12]
 800ade4:	60b9      	str	r1, [r7, #8]
 800ade6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ade8:	e034      	b.n	800ae54 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800adea:	68f8      	ldr	r0, [r7, #12]
 800adec:	f000 f89b 	bl	800af26 <I2C_IsAcknowledgeFailed>
 800adf0:	4603      	mov	r3, r0
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d001      	beq.n	800adfa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800adf6:	2301      	movs	r3, #1
 800adf8:	e034      	b.n	800ae64 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800adfa:	68bb      	ldr	r3, [r7, #8]
 800adfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae00:	d028      	beq.n	800ae54 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ae02:	f7fe f87b 	bl	8008efc <HAL_GetTick>
 800ae06:	4602      	mov	r2, r0
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	1ad3      	subs	r3, r2, r3
 800ae0c:	68ba      	ldr	r2, [r7, #8]
 800ae0e:	429a      	cmp	r2, r3
 800ae10:	d302      	bcc.n	800ae18 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800ae12:	68bb      	ldr	r3, [r7, #8]
 800ae14:	2b00      	cmp	r3, #0
 800ae16:	d11d      	bne.n	800ae54 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	695b      	ldr	r3, [r3, #20]
 800ae1e:	f003 0304 	and.w	r3, r3, #4
 800ae22:	2b04      	cmp	r3, #4
 800ae24:	d016      	beq.n	800ae54 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	2200      	movs	r2, #0
 800ae2a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800ae2c:	68fb      	ldr	r3, [r7, #12]
 800ae2e:	2220      	movs	r2, #32
 800ae30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	2200      	movs	r2, #0
 800ae38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae40:	f043 0220 	orr.w	r2, r3, #32
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800ae50:	2301      	movs	r3, #1
 800ae52:	e007      	b.n	800ae64 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	695b      	ldr	r3, [r3, #20]
 800ae5a:	f003 0304 	and.w	r3, r3, #4
 800ae5e:	2b04      	cmp	r3, #4
 800ae60:	d1c3      	bne.n	800adea <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800ae62:	2300      	movs	r3, #0
}
 800ae64:	4618      	mov	r0, r3
 800ae66:	3710      	adds	r7, #16
 800ae68:	46bd      	mov	sp, r7
 800ae6a:	bd80      	pop	{r7, pc}

0800ae6c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b084      	sub	sp, #16
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	60f8      	str	r0, [r7, #12]
 800ae74:	60b9      	str	r1, [r7, #8]
 800ae76:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800ae78:	e049      	b.n	800af0e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	695b      	ldr	r3, [r3, #20]
 800ae80:	f003 0310 	and.w	r3, r3, #16
 800ae84:	2b10      	cmp	r3, #16
 800ae86:	d119      	bne.n	800aebc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	f06f 0210 	mvn.w	r2, #16
 800ae90:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	2200      	movs	r2, #0
 800ae96:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	2220      	movs	r2, #32
 800ae9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	2200      	movs	r2, #0
 800aea4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800aeb8:	2301      	movs	r3, #1
 800aeba:	e030      	b.n	800af1e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aebc:	f7fe f81e 	bl	8008efc <HAL_GetTick>
 800aec0:	4602      	mov	r2, r0
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	1ad3      	subs	r3, r2, r3
 800aec6:	68ba      	ldr	r2, [r7, #8]
 800aec8:	429a      	cmp	r2, r3
 800aeca:	d302      	bcc.n	800aed2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800aecc:	68bb      	ldr	r3, [r7, #8]
 800aece:	2b00      	cmp	r3, #0
 800aed0:	d11d      	bne.n	800af0e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	695b      	ldr	r3, [r3, #20]
 800aed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aedc:	2b40      	cmp	r3, #64	; 0x40
 800aede:	d016      	beq.n	800af0e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	2200      	movs	r2, #0
 800aee4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	2220      	movs	r2, #32
 800aeea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	2200      	movs	r2, #0
 800aef2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aefa:	f043 0220 	orr.w	r2, r3, #32
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	2200      	movs	r2, #0
 800af06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800af0a:	2301      	movs	r3, #1
 800af0c:	e007      	b.n	800af1e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	695b      	ldr	r3, [r3, #20]
 800af14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af18:	2b40      	cmp	r3, #64	; 0x40
 800af1a:	d1ae      	bne.n	800ae7a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800af1c:	2300      	movs	r3, #0
}
 800af1e:	4618      	mov	r0, r3
 800af20:	3710      	adds	r7, #16
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}

0800af26 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800af26:	b480      	push	{r7}
 800af28:	b083      	sub	sp, #12
 800af2a:	af00      	add	r7, sp, #0
 800af2c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	695b      	ldr	r3, [r3, #20]
 800af34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af3c:	d11b      	bne.n	800af76 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800af46:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2200      	movs	r2, #0
 800af4c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	2220      	movs	r2, #32
 800af52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2200      	movs	r2, #0
 800af5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af62:	f043 0204 	orr.w	r2, r3, #4
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	2200      	movs	r2, #0
 800af6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800af72:	2301      	movs	r3, #1
 800af74:	e000      	b.n	800af78 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800af76:	2300      	movs	r3, #0
}
 800af78:	4618      	mov	r0, r3
 800af7a:	370c      	adds	r7, #12
 800af7c:	46bd      	mov	sp, r7
 800af7e:	bc80      	pop	{r7}
 800af80:	4770      	bx	lr
	...

0800af84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b086      	sub	sp, #24
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d101      	bne.n	800af96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800af92:	2301      	movs	r3, #1
 800af94:	e272      	b.n	800b47c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	f003 0301 	and.w	r3, r3, #1
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	f000 8087 	beq.w	800b0b2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800afa4:	4b92      	ldr	r3, [pc, #584]	; (800b1f0 <HAL_RCC_OscConfig+0x26c>)
 800afa6:	685b      	ldr	r3, [r3, #4]
 800afa8:	f003 030c 	and.w	r3, r3, #12
 800afac:	2b04      	cmp	r3, #4
 800afae:	d00c      	beq.n	800afca <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800afb0:	4b8f      	ldr	r3, [pc, #572]	; (800b1f0 <HAL_RCC_OscConfig+0x26c>)
 800afb2:	685b      	ldr	r3, [r3, #4]
 800afb4:	f003 030c 	and.w	r3, r3, #12
 800afb8:	2b08      	cmp	r3, #8
 800afba:	d112      	bne.n	800afe2 <HAL_RCC_OscConfig+0x5e>
 800afbc:	4b8c      	ldr	r3, [pc, #560]	; (800b1f0 <HAL_RCC_OscConfig+0x26c>)
 800afbe:	685b      	ldr	r3, [r3, #4]
 800afc0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800afc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afc8:	d10b      	bne.n	800afe2 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800afca:	4b89      	ldr	r3, [pc, #548]	; (800b1f0 <HAL_RCC_OscConfig+0x26c>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d06c      	beq.n	800b0b0 <HAL_RCC_OscConfig+0x12c>
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	685b      	ldr	r3, [r3, #4]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d168      	bne.n	800b0b0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800afde:	2301      	movs	r3, #1
 800afe0:	e24c      	b.n	800b47c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	685b      	ldr	r3, [r3, #4]
 800afe6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800afea:	d106      	bne.n	800affa <HAL_RCC_OscConfig+0x76>
 800afec:	4b80      	ldr	r3, [pc, #512]	; (800b1f0 <HAL_RCC_OscConfig+0x26c>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	4a7f      	ldr	r2, [pc, #508]	; (800b1f0 <HAL_RCC_OscConfig+0x26c>)
 800aff2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800aff6:	6013      	str	r3, [r2, #0]
 800aff8:	e02e      	b.n	800b058 <HAL_RCC_OscConfig+0xd4>
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	685b      	ldr	r3, [r3, #4]
 800affe:	2b00      	cmp	r3, #0
 800b000:	d10c      	bne.n	800b01c <HAL_RCC_OscConfig+0x98>
 800b002:	4b7b      	ldr	r3, [pc, #492]	; (800b1f0 <HAL_RCC_OscConfig+0x26c>)
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	4a7a      	ldr	r2, [pc, #488]	; (800b1f0 <HAL_RCC_OscConfig+0x26c>)
 800b008:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b00c:	6013      	str	r3, [r2, #0]
 800b00e:	4b78      	ldr	r3, [pc, #480]	; (800b1f0 <HAL_RCC_OscConfig+0x26c>)
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	4a77      	ldr	r2, [pc, #476]	; (800b1f0 <HAL_RCC_OscConfig+0x26c>)
 800b014:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b018:	6013      	str	r3, [r2, #0]
 800b01a:	e01d      	b.n	800b058 <HAL_RCC_OscConfig+0xd4>
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	685b      	ldr	r3, [r3, #4]
 800b020:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b024:	d10c      	bne.n	800b040 <HAL_RCC_OscConfig+0xbc>
 800b026:	4b72      	ldr	r3, [pc, #456]	; (800b1f0 <HAL_RCC_OscConfig+0x26c>)
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	4a71      	ldr	r2, [pc, #452]	; (800b1f0 <HAL_RCC_OscConfig+0x26c>)
 800b02c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800b030:	6013      	str	r3, [r2, #0]
 800b032:	4b6f      	ldr	r3, [pc, #444]	; (800b1f0 <HAL_RCC_OscConfig+0x26c>)
 800b034:	681b      	ldr	r3, [r3, #0]
 800b036:	4a6e      	ldr	r2, [pc, #440]	; (800b1f0 <HAL_RCC_OscConfig+0x26c>)
 800b038:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b03c:	6013      	str	r3, [r2, #0]
 800b03e:	e00b      	b.n	800b058 <HAL_RCC_OscConfig+0xd4>
 800b040:	4b6b      	ldr	r3, [pc, #428]	; (800b1f0 <HAL_RCC_OscConfig+0x26c>)
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	4a6a      	ldr	r2, [pc, #424]	; (800b1f0 <HAL_RCC_OscConfig+0x26c>)
 800b046:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b04a:	6013      	str	r3, [r2, #0]
 800b04c:	4b68      	ldr	r3, [pc, #416]	; (800b1f0 <HAL_RCC_OscConfig+0x26c>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	4a67      	ldr	r2, [pc, #412]	; (800b1f0 <HAL_RCC_OscConfig+0x26c>)
 800b052:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b056:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	685b      	ldr	r3, [r3, #4]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d013      	beq.n	800b088 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b060:	f7fd ff4c 	bl	8008efc <HAL_GetTick>
 800b064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b066:	e008      	b.n	800b07a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b068:	f7fd ff48 	bl	8008efc <HAL_GetTick>
 800b06c:	4602      	mov	r2, r0
 800b06e:	693b      	ldr	r3, [r7, #16]
 800b070:	1ad3      	subs	r3, r2, r3
 800b072:	2b64      	cmp	r3, #100	; 0x64
 800b074:	d901      	bls.n	800b07a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800b076:	2303      	movs	r3, #3
 800b078:	e200      	b.n	800b47c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b07a:	4b5d      	ldr	r3, [pc, #372]	; (800b1f0 <HAL_RCC_OscConfig+0x26c>)
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b082:	2b00      	cmp	r3, #0
 800b084:	d0f0      	beq.n	800b068 <HAL_RCC_OscConfig+0xe4>
 800b086:	e014      	b.n	800b0b2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b088:	f7fd ff38 	bl	8008efc <HAL_GetTick>
 800b08c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b08e:	e008      	b.n	800b0a2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800b090:	f7fd ff34 	bl	8008efc <HAL_GetTick>
 800b094:	4602      	mov	r2, r0
 800b096:	693b      	ldr	r3, [r7, #16]
 800b098:	1ad3      	subs	r3, r2, r3
 800b09a:	2b64      	cmp	r3, #100	; 0x64
 800b09c:	d901      	bls.n	800b0a2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800b09e:	2303      	movs	r3, #3
 800b0a0:	e1ec      	b.n	800b47c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800b0a2:	4b53      	ldr	r3, [pc, #332]	; (800b1f0 <HAL_RCC_OscConfig+0x26c>)
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d1f0      	bne.n	800b090 <HAL_RCC_OscConfig+0x10c>
 800b0ae:	e000      	b.n	800b0b2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b0b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	f003 0302 	and.w	r3, r3, #2
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d063      	beq.n	800b186 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800b0be:	4b4c      	ldr	r3, [pc, #304]	; (800b1f0 <HAL_RCC_OscConfig+0x26c>)
 800b0c0:	685b      	ldr	r3, [r3, #4]
 800b0c2:	f003 030c 	and.w	r3, r3, #12
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d00b      	beq.n	800b0e2 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800b0ca:	4b49      	ldr	r3, [pc, #292]	; (800b1f0 <HAL_RCC_OscConfig+0x26c>)
 800b0cc:	685b      	ldr	r3, [r3, #4]
 800b0ce:	f003 030c 	and.w	r3, r3, #12
 800b0d2:	2b08      	cmp	r3, #8
 800b0d4:	d11c      	bne.n	800b110 <HAL_RCC_OscConfig+0x18c>
 800b0d6:	4b46      	ldr	r3, [pc, #280]	; (800b1f0 <HAL_RCC_OscConfig+0x26c>)
 800b0d8:	685b      	ldr	r3, [r3, #4]
 800b0da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d116      	bne.n	800b110 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b0e2:	4b43      	ldr	r3, [pc, #268]	; (800b1f0 <HAL_RCC_OscConfig+0x26c>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	f003 0302 	and.w	r3, r3, #2
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d005      	beq.n	800b0fa <HAL_RCC_OscConfig+0x176>
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	691b      	ldr	r3, [r3, #16]
 800b0f2:	2b01      	cmp	r3, #1
 800b0f4:	d001      	beq.n	800b0fa <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800b0f6:	2301      	movs	r3, #1
 800b0f8:	e1c0      	b.n	800b47c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b0fa:	4b3d      	ldr	r3, [pc, #244]	; (800b1f0 <HAL_RCC_OscConfig+0x26c>)
 800b0fc:	681b      	ldr	r3, [r3, #0]
 800b0fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	695b      	ldr	r3, [r3, #20]
 800b106:	00db      	lsls	r3, r3, #3
 800b108:	4939      	ldr	r1, [pc, #228]	; (800b1f0 <HAL_RCC_OscConfig+0x26c>)
 800b10a:	4313      	orrs	r3, r2
 800b10c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800b10e:	e03a      	b.n	800b186 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	691b      	ldr	r3, [r3, #16]
 800b114:	2b00      	cmp	r3, #0
 800b116:	d020      	beq.n	800b15a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800b118:	4b36      	ldr	r3, [pc, #216]	; (800b1f4 <HAL_RCC_OscConfig+0x270>)
 800b11a:	2201      	movs	r2, #1
 800b11c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b11e:	f7fd feed 	bl	8008efc <HAL_GetTick>
 800b122:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b124:	e008      	b.n	800b138 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b126:	f7fd fee9 	bl	8008efc <HAL_GetTick>
 800b12a:	4602      	mov	r2, r0
 800b12c:	693b      	ldr	r3, [r7, #16]
 800b12e:	1ad3      	subs	r3, r2, r3
 800b130:	2b02      	cmp	r3, #2
 800b132:	d901      	bls.n	800b138 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800b134:	2303      	movs	r3, #3
 800b136:	e1a1      	b.n	800b47c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b138:	4b2d      	ldr	r3, [pc, #180]	; (800b1f0 <HAL_RCC_OscConfig+0x26c>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	f003 0302 	and.w	r3, r3, #2
 800b140:	2b00      	cmp	r3, #0
 800b142:	d0f0      	beq.n	800b126 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b144:	4b2a      	ldr	r3, [pc, #168]	; (800b1f0 <HAL_RCC_OscConfig+0x26c>)
 800b146:	681b      	ldr	r3, [r3, #0]
 800b148:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	695b      	ldr	r3, [r3, #20]
 800b150:	00db      	lsls	r3, r3, #3
 800b152:	4927      	ldr	r1, [pc, #156]	; (800b1f0 <HAL_RCC_OscConfig+0x26c>)
 800b154:	4313      	orrs	r3, r2
 800b156:	600b      	str	r3, [r1, #0]
 800b158:	e015      	b.n	800b186 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800b15a:	4b26      	ldr	r3, [pc, #152]	; (800b1f4 <HAL_RCC_OscConfig+0x270>)
 800b15c:	2200      	movs	r2, #0
 800b15e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b160:	f7fd fecc 	bl	8008efc <HAL_GetTick>
 800b164:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b166:	e008      	b.n	800b17a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b168:	f7fd fec8 	bl	8008efc <HAL_GetTick>
 800b16c:	4602      	mov	r2, r0
 800b16e:	693b      	ldr	r3, [r7, #16]
 800b170:	1ad3      	subs	r3, r2, r3
 800b172:	2b02      	cmp	r3, #2
 800b174:	d901      	bls.n	800b17a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800b176:	2303      	movs	r3, #3
 800b178:	e180      	b.n	800b47c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800b17a:	4b1d      	ldr	r3, [pc, #116]	; (800b1f0 <HAL_RCC_OscConfig+0x26c>)
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	f003 0302 	and.w	r3, r3, #2
 800b182:	2b00      	cmp	r3, #0
 800b184:	d1f0      	bne.n	800b168 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	f003 0308 	and.w	r3, r3, #8
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d03a      	beq.n	800b208 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	699b      	ldr	r3, [r3, #24]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d019      	beq.n	800b1ce <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800b19a:	4b17      	ldr	r3, [pc, #92]	; (800b1f8 <HAL_RCC_OscConfig+0x274>)
 800b19c:	2201      	movs	r2, #1
 800b19e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b1a0:	f7fd feac 	bl	8008efc <HAL_GetTick>
 800b1a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b1a6:	e008      	b.n	800b1ba <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b1a8:	f7fd fea8 	bl	8008efc <HAL_GetTick>
 800b1ac:	4602      	mov	r2, r0
 800b1ae:	693b      	ldr	r3, [r7, #16]
 800b1b0:	1ad3      	subs	r3, r2, r3
 800b1b2:	2b02      	cmp	r3, #2
 800b1b4:	d901      	bls.n	800b1ba <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800b1b6:	2303      	movs	r3, #3
 800b1b8:	e160      	b.n	800b47c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800b1ba:	4b0d      	ldr	r3, [pc, #52]	; (800b1f0 <HAL_RCC_OscConfig+0x26c>)
 800b1bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1be:	f003 0302 	and.w	r3, r3, #2
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d0f0      	beq.n	800b1a8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800b1c6:	2001      	movs	r0, #1
 800b1c8:	f000 face 	bl	800b768 <RCC_Delay>
 800b1cc:	e01c      	b.n	800b208 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800b1ce:	4b0a      	ldr	r3, [pc, #40]	; (800b1f8 <HAL_RCC_OscConfig+0x274>)
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b1d4:	f7fd fe92 	bl	8008efc <HAL_GetTick>
 800b1d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b1da:	e00f      	b.n	800b1fc <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b1dc:	f7fd fe8e 	bl	8008efc <HAL_GetTick>
 800b1e0:	4602      	mov	r2, r0
 800b1e2:	693b      	ldr	r3, [r7, #16]
 800b1e4:	1ad3      	subs	r3, r2, r3
 800b1e6:	2b02      	cmp	r3, #2
 800b1e8:	d908      	bls.n	800b1fc <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800b1ea:	2303      	movs	r3, #3
 800b1ec:	e146      	b.n	800b47c <HAL_RCC_OscConfig+0x4f8>
 800b1ee:	bf00      	nop
 800b1f0:	40021000 	.word	0x40021000
 800b1f4:	42420000 	.word	0x42420000
 800b1f8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800b1fc:	4b92      	ldr	r3, [pc, #584]	; (800b448 <HAL_RCC_OscConfig+0x4c4>)
 800b1fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b200:	f003 0302 	and.w	r3, r3, #2
 800b204:	2b00      	cmp	r3, #0
 800b206:	d1e9      	bne.n	800b1dc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	681b      	ldr	r3, [r3, #0]
 800b20c:	f003 0304 	and.w	r3, r3, #4
 800b210:	2b00      	cmp	r3, #0
 800b212:	f000 80a6 	beq.w	800b362 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800b216:	2300      	movs	r3, #0
 800b218:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800b21a:	4b8b      	ldr	r3, [pc, #556]	; (800b448 <HAL_RCC_OscConfig+0x4c4>)
 800b21c:	69db      	ldr	r3, [r3, #28]
 800b21e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b222:	2b00      	cmp	r3, #0
 800b224:	d10d      	bne.n	800b242 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800b226:	4b88      	ldr	r3, [pc, #544]	; (800b448 <HAL_RCC_OscConfig+0x4c4>)
 800b228:	69db      	ldr	r3, [r3, #28]
 800b22a:	4a87      	ldr	r2, [pc, #540]	; (800b448 <HAL_RCC_OscConfig+0x4c4>)
 800b22c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b230:	61d3      	str	r3, [r2, #28]
 800b232:	4b85      	ldr	r3, [pc, #532]	; (800b448 <HAL_RCC_OscConfig+0x4c4>)
 800b234:	69db      	ldr	r3, [r3, #28]
 800b236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b23a:	60bb      	str	r3, [r7, #8]
 800b23c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800b23e:	2301      	movs	r3, #1
 800b240:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b242:	4b82      	ldr	r3, [pc, #520]	; (800b44c <HAL_RCC_OscConfig+0x4c8>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d118      	bne.n	800b280 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800b24e:	4b7f      	ldr	r3, [pc, #508]	; (800b44c <HAL_RCC_OscConfig+0x4c8>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	4a7e      	ldr	r2, [pc, #504]	; (800b44c <HAL_RCC_OscConfig+0x4c8>)
 800b254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b258:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800b25a:	f7fd fe4f 	bl	8008efc <HAL_GetTick>
 800b25e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b260:	e008      	b.n	800b274 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b262:	f7fd fe4b 	bl	8008efc <HAL_GetTick>
 800b266:	4602      	mov	r2, r0
 800b268:	693b      	ldr	r3, [r7, #16]
 800b26a:	1ad3      	subs	r3, r2, r3
 800b26c:	2b64      	cmp	r3, #100	; 0x64
 800b26e:	d901      	bls.n	800b274 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800b270:	2303      	movs	r3, #3
 800b272:	e103      	b.n	800b47c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800b274:	4b75      	ldr	r3, [pc, #468]	; (800b44c <HAL_RCC_OscConfig+0x4c8>)
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d0f0      	beq.n	800b262 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	68db      	ldr	r3, [r3, #12]
 800b284:	2b01      	cmp	r3, #1
 800b286:	d106      	bne.n	800b296 <HAL_RCC_OscConfig+0x312>
 800b288:	4b6f      	ldr	r3, [pc, #444]	; (800b448 <HAL_RCC_OscConfig+0x4c4>)
 800b28a:	6a1b      	ldr	r3, [r3, #32]
 800b28c:	4a6e      	ldr	r2, [pc, #440]	; (800b448 <HAL_RCC_OscConfig+0x4c4>)
 800b28e:	f043 0301 	orr.w	r3, r3, #1
 800b292:	6213      	str	r3, [r2, #32]
 800b294:	e02d      	b.n	800b2f2 <HAL_RCC_OscConfig+0x36e>
 800b296:	687b      	ldr	r3, [r7, #4]
 800b298:	68db      	ldr	r3, [r3, #12]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d10c      	bne.n	800b2b8 <HAL_RCC_OscConfig+0x334>
 800b29e:	4b6a      	ldr	r3, [pc, #424]	; (800b448 <HAL_RCC_OscConfig+0x4c4>)
 800b2a0:	6a1b      	ldr	r3, [r3, #32]
 800b2a2:	4a69      	ldr	r2, [pc, #420]	; (800b448 <HAL_RCC_OscConfig+0x4c4>)
 800b2a4:	f023 0301 	bic.w	r3, r3, #1
 800b2a8:	6213      	str	r3, [r2, #32]
 800b2aa:	4b67      	ldr	r3, [pc, #412]	; (800b448 <HAL_RCC_OscConfig+0x4c4>)
 800b2ac:	6a1b      	ldr	r3, [r3, #32]
 800b2ae:	4a66      	ldr	r2, [pc, #408]	; (800b448 <HAL_RCC_OscConfig+0x4c4>)
 800b2b0:	f023 0304 	bic.w	r3, r3, #4
 800b2b4:	6213      	str	r3, [r2, #32]
 800b2b6:	e01c      	b.n	800b2f2 <HAL_RCC_OscConfig+0x36e>
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	68db      	ldr	r3, [r3, #12]
 800b2bc:	2b05      	cmp	r3, #5
 800b2be:	d10c      	bne.n	800b2da <HAL_RCC_OscConfig+0x356>
 800b2c0:	4b61      	ldr	r3, [pc, #388]	; (800b448 <HAL_RCC_OscConfig+0x4c4>)
 800b2c2:	6a1b      	ldr	r3, [r3, #32]
 800b2c4:	4a60      	ldr	r2, [pc, #384]	; (800b448 <HAL_RCC_OscConfig+0x4c4>)
 800b2c6:	f043 0304 	orr.w	r3, r3, #4
 800b2ca:	6213      	str	r3, [r2, #32]
 800b2cc:	4b5e      	ldr	r3, [pc, #376]	; (800b448 <HAL_RCC_OscConfig+0x4c4>)
 800b2ce:	6a1b      	ldr	r3, [r3, #32]
 800b2d0:	4a5d      	ldr	r2, [pc, #372]	; (800b448 <HAL_RCC_OscConfig+0x4c4>)
 800b2d2:	f043 0301 	orr.w	r3, r3, #1
 800b2d6:	6213      	str	r3, [r2, #32]
 800b2d8:	e00b      	b.n	800b2f2 <HAL_RCC_OscConfig+0x36e>
 800b2da:	4b5b      	ldr	r3, [pc, #364]	; (800b448 <HAL_RCC_OscConfig+0x4c4>)
 800b2dc:	6a1b      	ldr	r3, [r3, #32]
 800b2de:	4a5a      	ldr	r2, [pc, #360]	; (800b448 <HAL_RCC_OscConfig+0x4c4>)
 800b2e0:	f023 0301 	bic.w	r3, r3, #1
 800b2e4:	6213      	str	r3, [r2, #32]
 800b2e6:	4b58      	ldr	r3, [pc, #352]	; (800b448 <HAL_RCC_OscConfig+0x4c4>)
 800b2e8:	6a1b      	ldr	r3, [r3, #32]
 800b2ea:	4a57      	ldr	r2, [pc, #348]	; (800b448 <HAL_RCC_OscConfig+0x4c4>)
 800b2ec:	f023 0304 	bic.w	r3, r3, #4
 800b2f0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	68db      	ldr	r3, [r3, #12]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d015      	beq.n	800b326 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b2fa:	f7fd fdff 	bl	8008efc <HAL_GetTick>
 800b2fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b300:	e00a      	b.n	800b318 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b302:	f7fd fdfb 	bl	8008efc <HAL_GetTick>
 800b306:	4602      	mov	r2, r0
 800b308:	693b      	ldr	r3, [r7, #16]
 800b30a:	1ad3      	subs	r3, r2, r3
 800b30c:	f241 3288 	movw	r2, #5000	; 0x1388
 800b310:	4293      	cmp	r3, r2
 800b312:	d901      	bls.n	800b318 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800b314:	2303      	movs	r3, #3
 800b316:	e0b1      	b.n	800b47c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b318:	4b4b      	ldr	r3, [pc, #300]	; (800b448 <HAL_RCC_OscConfig+0x4c4>)
 800b31a:	6a1b      	ldr	r3, [r3, #32]
 800b31c:	f003 0302 	and.w	r3, r3, #2
 800b320:	2b00      	cmp	r3, #0
 800b322:	d0ee      	beq.n	800b302 <HAL_RCC_OscConfig+0x37e>
 800b324:	e014      	b.n	800b350 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b326:	f7fd fde9 	bl	8008efc <HAL_GetTick>
 800b32a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b32c:	e00a      	b.n	800b344 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b32e:	f7fd fde5 	bl	8008efc <HAL_GetTick>
 800b332:	4602      	mov	r2, r0
 800b334:	693b      	ldr	r3, [r7, #16]
 800b336:	1ad3      	subs	r3, r2, r3
 800b338:	f241 3288 	movw	r2, #5000	; 0x1388
 800b33c:	4293      	cmp	r3, r2
 800b33e:	d901      	bls.n	800b344 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800b340:	2303      	movs	r3, #3
 800b342:	e09b      	b.n	800b47c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b344:	4b40      	ldr	r3, [pc, #256]	; (800b448 <HAL_RCC_OscConfig+0x4c4>)
 800b346:	6a1b      	ldr	r3, [r3, #32]
 800b348:	f003 0302 	and.w	r3, r3, #2
 800b34c:	2b00      	cmp	r3, #0
 800b34e:	d1ee      	bne.n	800b32e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800b350:	7dfb      	ldrb	r3, [r7, #23]
 800b352:	2b01      	cmp	r3, #1
 800b354:	d105      	bne.n	800b362 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b356:	4b3c      	ldr	r3, [pc, #240]	; (800b448 <HAL_RCC_OscConfig+0x4c4>)
 800b358:	69db      	ldr	r3, [r3, #28]
 800b35a:	4a3b      	ldr	r2, [pc, #236]	; (800b448 <HAL_RCC_OscConfig+0x4c4>)
 800b35c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b360:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	69db      	ldr	r3, [r3, #28]
 800b366:	2b00      	cmp	r3, #0
 800b368:	f000 8087 	beq.w	800b47a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800b36c:	4b36      	ldr	r3, [pc, #216]	; (800b448 <HAL_RCC_OscConfig+0x4c4>)
 800b36e:	685b      	ldr	r3, [r3, #4]
 800b370:	f003 030c 	and.w	r3, r3, #12
 800b374:	2b08      	cmp	r3, #8
 800b376:	d061      	beq.n	800b43c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	69db      	ldr	r3, [r3, #28]
 800b37c:	2b02      	cmp	r3, #2
 800b37e:	d146      	bne.n	800b40e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b380:	4b33      	ldr	r3, [pc, #204]	; (800b450 <HAL_RCC_OscConfig+0x4cc>)
 800b382:	2200      	movs	r2, #0
 800b384:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b386:	f7fd fdb9 	bl	8008efc <HAL_GetTick>
 800b38a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b38c:	e008      	b.n	800b3a0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b38e:	f7fd fdb5 	bl	8008efc <HAL_GetTick>
 800b392:	4602      	mov	r2, r0
 800b394:	693b      	ldr	r3, [r7, #16]
 800b396:	1ad3      	subs	r3, r2, r3
 800b398:	2b02      	cmp	r3, #2
 800b39a:	d901      	bls.n	800b3a0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800b39c:	2303      	movs	r3, #3
 800b39e:	e06d      	b.n	800b47c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b3a0:	4b29      	ldr	r3, [pc, #164]	; (800b448 <HAL_RCC_OscConfig+0x4c4>)
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d1f0      	bne.n	800b38e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	6a1b      	ldr	r3, [r3, #32]
 800b3b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b3b4:	d108      	bne.n	800b3c8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800b3b6:	4b24      	ldr	r3, [pc, #144]	; (800b448 <HAL_RCC_OscConfig+0x4c4>)
 800b3b8:	685b      	ldr	r3, [r3, #4]
 800b3ba:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	689b      	ldr	r3, [r3, #8]
 800b3c2:	4921      	ldr	r1, [pc, #132]	; (800b448 <HAL_RCC_OscConfig+0x4c4>)
 800b3c4:	4313      	orrs	r3, r2
 800b3c6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b3c8:	4b1f      	ldr	r3, [pc, #124]	; (800b448 <HAL_RCC_OscConfig+0x4c4>)
 800b3ca:	685b      	ldr	r3, [r3, #4]
 800b3cc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	6a19      	ldr	r1, [r3, #32]
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3d8:	430b      	orrs	r3, r1
 800b3da:	491b      	ldr	r1, [pc, #108]	; (800b448 <HAL_RCC_OscConfig+0x4c4>)
 800b3dc:	4313      	orrs	r3, r2
 800b3de:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b3e0:	4b1b      	ldr	r3, [pc, #108]	; (800b450 <HAL_RCC_OscConfig+0x4cc>)
 800b3e2:	2201      	movs	r2, #1
 800b3e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b3e6:	f7fd fd89 	bl	8008efc <HAL_GetTick>
 800b3ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b3ec:	e008      	b.n	800b400 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b3ee:	f7fd fd85 	bl	8008efc <HAL_GetTick>
 800b3f2:	4602      	mov	r2, r0
 800b3f4:	693b      	ldr	r3, [r7, #16]
 800b3f6:	1ad3      	subs	r3, r2, r3
 800b3f8:	2b02      	cmp	r3, #2
 800b3fa:	d901      	bls.n	800b400 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800b3fc:	2303      	movs	r3, #3
 800b3fe:	e03d      	b.n	800b47c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800b400:	4b11      	ldr	r3, [pc, #68]	; (800b448 <HAL_RCC_OscConfig+0x4c4>)
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d0f0      	beq.n	800b3ee <HAL_RCC_OscConfig+0x46a>
 800b40c:	e035      	b.n	800b47a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b40e:	4b10      	ldr	r3, [pc, #64]	; (800b450 <HAL_RCC_OscConfig+0x4cc>)
 800b410:	2200      	movs	r2, #0
 800b412:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b414:	f7fd fd72 	bl	8008efc <HAL_GetTick>
 800b418:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b41a:	e008      	b.n	800b42e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b41c:	f7fd fd6e 	bl	8008efc <HAL_GetTick>
 800b420:	4602      	mov	r2, r0
 800b422:	693b      	ldr	r3, [r7, #16]
 800b424:	1ad3      	subs	r3, r2, r3
 800b426:	2b02      	cmp	r3, #2
 800b428:	d901      	bls.n	800b42e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800b42a:	2303      	movs	r3, #3
 800b42c:	e026      	b.n	800b47c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800b42e:	4b06      	ldr	r3, [pc, #24]	; (800b448 <HAL_RCC_OscConfig+0x4c4>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b436:	2b00      	cmp	r3, #0
 800b438:	d1f0      	bne.n	800b41c <HAL_RCC_OscConfig+0x498>
 800b43a:	e01e      	b.n	800b47a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	69db      	ldr	r3, [r3, #28]
 800b440:	2b01      	cmp	r3, #1
 800b442:	d107      	bne.n	800b454 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800b444:	2301      	movs	r3, #1
 800b446:	e019      	b.n	800b47c <HAL_RCC_OscConfig+0x4f8>
 800b448:	40021000 	.word	0x40021000
 800b44c:	40007000 	.word	0x40007000
 800b450:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800b454:	4b0b      	ldr	r3, [pc, #44]	; (800b484 <HAL_RCC_OscConfig+0x500>)
 800b456:	685b      	ldr	r3, [r3, #4]
 800b458:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	6a1b      	ldr	r3, [r3, #32]
 800b464:	429a      	cmp	r2, r3
 800b466:	d106      	bne.n	800b476 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b472:	429a      	cmp	r2, r3
 800b474:	d001      	beq.n	800b47a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800b476:	2301      	movs	r3, #1
 800b478:	e000      	b.n	800b47c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800b47a:	2300      	movs	r3, #0
}
 800b47c:	4618      	mov	r0, r3
 800b47e:	3718      	adds	r7, #24
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}
 800b484:	40021000 	.word	0x40021000

0800b488 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b488:	b580      	push	{r7, lr}
 800b48a:	b084      	sub	sp, #16
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
 800b490:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2b00      	cmp	r3, #0
 800b496:	d101      	bne.n	800b49c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b498:	2301      	movs	r3, #1
 800b49a:	e0d0      	b.n	800b63e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b49c:	4b6a      	ldr	r3, [pc, #424]	; (800b648 <HAL_RCC_ClockConfig+0x1c0>)
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	f003 0307 	and.w	r3, r3, #7
 800b4a4:	683a      	ldr	r2, [r7, #0]
 800b4a6:	429a      	cmp	r2, r3
 800b4a8:	d910      	bls.n	800b4cc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b4aa:	4b67      	ldr	r3, [pc, #412]	; (800b648 <HAL_RCC_ClockConfig+0x1c0>)
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	f023 0207 	bic.w	r2, r3, #7
 800b4b2:	4965      	ldr	r1, [pc, #404]	; (800b648 <HAL_RCC_ClockConfig+0x1c0>)
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	4313      	orrs	r3, r2
 800b4b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b4ba:	4b63      	ldr	r3, [pc, #396]	; (800b648 <HAL_RCC_ClockConfig+0x1c0>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	f003 0307 	and.w	r3, r3, #7
 800b4c2:	683a      	ldr	r2, [r7, #0]
 800b4c4:	429a      	cmp	r2, r3
 800b4c6:	d001      	beq.n	800b4cc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800b4c8:	2301      	movs	r3, #1
 800b4ca:	e0b8      	b.n	800b63e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	f003 0302 	and.w	r3, r3, #2
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d020      	beq.n	800b51a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	f003 0304 	and.w	r3, r3, #4
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	d005      	beq.n	800b4f0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b4e4:	4b59      	ldr	r3, [pc, #356]	; (800b64c <HAL_RCC_ClockConfig+0x1c4>)
 800b4e6:	685b      	ldr	r3, [r3, #4]
 800b4e8:	4a58      	ldr	r2, [pc, #352]	; (800b64c <HAL_RCC_ClockConfig+0x1c4>)
 800b4ea:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800b4ee:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	f003 0308 	and.w	r3, r3, #8
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d005      	beq.n	800b508 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b4fc:	4b53      	ldr	r3, [pc, #332]	; (800b64c <HAL_RCC_ClockConfig+0x1c4>)
 800b4fe:	685b      	ldr	r3, [r3, #4]
 800b500:	4a52      	ldr	r2, [pc, #328]	; (800b64c <HAL_RCC_ClockConfig+0x1c4>)
 800b502:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800b506:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b508:	4b50      	ldr	r3, [pc, #320]	; (800b64c <HAL_RCC_ClockConfig+0x1c4>)
 800b50a:	685b      	ldr	r3, [r3, #4]
 800b50c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	689b      	ldr	r3, [r3, #8]
 800b514:	494d      	ldr	r1, [pc, #308]	; (800b64c <HAL_RCC_ClockConfig+0x1c4>)
 800b516:	4313      	orrs	r3, r2
 800b518:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	f003 0301 	and.w	r3, r3, #1
 800b522:	2b00      	cmp	r3, #0
 800b524:	d040      	beq.n	800b5a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	685b      	ldr	r3, [r3, #4]
 800b52a:	2b01      	cmp	r3, #1
 800b52c:	d107      	bne.n	800b53e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b52e:	4b47      	ldr	r3, [pc, #284]	; (800b64c <HAL_RCC_ClockConfig+0x1c4>)
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b536:	2b00      	cmp	r3, #0
 800b538:	d115      	bne.n	800b566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b53a:	2301      	movs	r3, #1
 800b53c:	e07f      	b.n	800b63e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	685b      	ldr	r3, [r3, #4]
 800b542:	2b02      	cmp	r3, #2
 800b544:	d107      	bne.n	800b556 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b546:	4b41      	ldr	r3, [pc, #260]	; (800b64c <HAL_RCC_ClockConfig+0x1c4>)
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b54e:	2b00      	cmp	r3, #0
 800b550:	d109      	bne.n	800b566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b552:	2301      	movs	r3, #1
 800b554:	e073      	b.n	800b63e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b556:	4b3d      	ldr	r3, [pc, #244]	; (800b64c <HAL_RCC_ClockConfig+0x1c4>)
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	f003 0302 	and.w	r3, r3, #2
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d101      	bne.n	800b566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b562:	2301      	movs	r3, #1
 800b564:	e06b      	b.n	800b63e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b566:	4b39      	ldr	r3, [pc, #228]	; (800b64c <HAL_RCC_ClockConfig+0x1c4>)
 800b568:	685b      	ldr	r3, [r3, #4]
 800b56a:	f023 0203 	bic.w	r2, r3, #3
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	685b      	ldr	r3, [r3, #4]
 800b572:	4936      	ldr	r1, [pc, #216]	; (800b64c <HAL_RCC_ClockConfig+0x1c4>)
 800b574:	4313      	orrs	r3, r2
 800b576:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b578:	f7fd fcc0 	bl	8008efc <HAL_GetTick>
 800b57c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b57e:	e00a      	b.n	800b596 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b580:	f7fd fcbc 	bl	8008efc <HAL_GetTick>
 800b584:	4602      	mov	r2, r0
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	1ad3      	subs	r3, r2, r3
 800b58a:	f241 3288 	movw	r2, #5000	; 0x1388
 800b58e:	4293      	cmp	r3, r2
 800b590:	d901      	bls.n	800b596 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b592:	2303      	movs	r3, #3
 800b594:	e053      	b.n	800b63e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b596:	4b2d      	ldr	r3, [pc, #180]	; (800b64c <HAL_RCC_ClockConfig+0x1c4>)
 800b598:	685b      	ldr	r3, [r3, #4]
 800b59a:	f003 020c 	and.w	r2, r3, #12
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	685b      	ldr	r3, [r3, #4]
 800b5a2:	009b      	lsls	r3, r3, #2
 800b5a4:	429a      	cmp	r2, r3
 800b5a6:	d1eb      	bne.n	800b580 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b5a8:	4b27      	ldr	r3, [pc, #156]	; (800b648 <HAL_RCC_ClockConfig+0x1c0>)
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	f003 0307 	and.w	r3, r3, #7
 800b5b0:	683a      	ldr	r2, [r7, #0]
 800b5b2:	429a      	cmp	r2, r3
 800b5b4:	d210      	bcs.n	800b5d8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b5b6:	4b24      	ldr	r3, [pc, #144]	; (800b648 <HAL_RCC_ClockConfig+0x1c0>)
 800b5b8:	681b      	ldr	r3, [r3, #0]
 800b5ba:	f023 0207 	bic.w	r2, r3, #7
 800b5be:	4922      	ldr	r1, [pc, #136]	; (800b648 <HAL_RCC_ClockConfig+0x1c0>)
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	4313      	orrs	r3, r2
 800b5c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b5c6:	4b20      	ldr	r3, [pc, #128]	; (800b648 <HAL_RCC_ClockConfig+0x1c0>)
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	f003 0307 	and.w	r3, r3, #7
 800b5ce:	683a      	ldr	r2, [r7, #0]
 800b5d0:	429a      	cmp	r2, r3
 800b5d2:	d001      	beq.n	800b5d8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800b5d4:	2301      	movs	r3, #1
 800b5d6:	e032      	b.n	800b63e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	f003 0304 	and.w	r3, r3, #4
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d008      	beq.n	800b5f6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b5e4:	4b19      	ldr	r3, [pc, #100]	; (800b64c <HAL_RCC_ClockConfig+0x1c4>)
 800b5e6:	685b      	ldr	r3, [r3, #4]
 800b5e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	68db      	ldr	r3, [r3, #12]
 800b5f0:	4916      	ldr	r1, [pc, #88]	; (800b64c <HAL_RCC_ClockConfig+0x1c4>)
 800b5f2:	4313      	orrs	r3, r2
 800b5f4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	f003 0308 	and.w	r3, r3, #8
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d009      	beq.n	800b616 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800b602:	4b12      	ldr	r3, [pc, #72]	; (800b64c <HAL_RCC_ClockConfig+0x1c4>)
 800b604:	685b      	ldr	r3, [r3, #4]
 800b606:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	691b      	ldr	r3, [r3, #16]
 800b60e:	00db      	lsls	r3, r3, #3
 800b610:	490e      	ldr	r1, [pc, #56]	; (800b64c <HAL_RCC_ClockConfig+0x1c4>)
 800b612:	4313      	orrs	r3, r2
 800b614:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b616:	f000 f821 	bl	800b65c <HAL_RCC_GetSysClockFreq>
 800b61a:	4602      	mov	r2, r0
 800b61c:	4b0b      	ldr	r3, [pc, #44]	; (800b64c <HAL_RCC_ClockConfig+0x1c4>)
 800b61e:	685b      	ldr	r3, [r3, #4]
 800b620:	091b      	lsrs	r3, r3, #4
 800b622:	f003 030f 	and.w	r3, r3, #15
 800b626:	490a      	ldr	r1, [pc, #40]	; (800b650 <HAL_RCC_ClockConfig+0x1c8>)
 800b628:	5ccb      	ldrb	r3, [r1, r3]
 800b62a:	fa22 f303 	lsr.w	r3, r2, r3
 800b62e:	4a09      	ldr	r2, [pc, #36]	; (800b654 <HAL_RCC_ClockConfig+0x1cc>)
 800b630:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800b632:	4b09      	ldr	r3, [pc, #36]	; (800b658 <HAL_RCC_ClockConfig+0x1d0>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	4618      	mov	r0, r3
 800b638:	f7fd fc1e 	bl	8008e78 <HAL_InitTick>

  return HAL_OK;
 800b63c:	2300      	movs	r3, #0
}
 800b63e:	4618      	mov	r0, r3
 800b640:	3710      	adds	r7, #16
 800b642:	46bd      	mov	sp, r7
 800b644:	bd80      	pop	{r7, pc}
 800b646:	bf00      	nop
 800b648:	40022000 	.word	0x40022000
 800b64c:	40021000 	.word	0x40021000
 800b650:	0800e3cc 	.word	0x0800e3cc
 800b654:	200009b4 	.word	0x200009b4
 800b658:	200009b8 	.word	0x200009b8

0800b65c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b65c:	b480      	push	{r7}
 800b65e:	b087      	sub	sp, #28
 800b660:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800b662:	2300      	movs	r3, #0
 800b664:	60fb      	str	r3, [r7, #12]
 800b666:	2300      	movs	r3, #0
 800b668:	60bb      	str	r3, [r7, #8]
 800b66a:	2300      	movs	r3, #0
 800b66c:	617b      	str	r3, [r7, #20]
 800b66e:	2300      	movs	r3, #0
 800b670:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800b672:	2300      	movs	r3, #0
 800b674:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800b676:	4b1e      	ldr	r3, [pc, #120]	; (800b6f0 <HAL_RCC_GetSysClockFreq+0x94>)
 800b678:	685b      	ldr	r3, [r3, #4]
 800b67a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	f003 030c 	and.w	r3, r3, #12
 800b682:	2b04      	cmp	r3, #4
 800b684:	d002      	beq.n	800b68c <HAL_RCC_GetSysClockFreq+0x30>
 800b686:	2b08      	cmp	r3, #8
 800b688:	d003      	beq.n	800b692 <HAL_RCC_GetSysClockFreq+0x36>
 800b68a:	e027      	b.n	800b6dc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800b68c:	4b19      	ldr	r3, [pc, #100]	; (800b6f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800b68e:	613b      	str	r3, [r7, #16]
      break;
 800b690:	e027      	b.n	800b6e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	0c9b      	lsrs	r3, r3, #18
 800b696:	f003 030f 	and.w	r3, r3, #15
 800b69a:	4a17      	ldr	r2, [pc, #92]	; (800b6f8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800b69c:	5cd3      	ldrb	r3, [r2, r3]
 800b69e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d010      	beq.n	800b6cc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800b6aa:	4b11      	ldr	r3, [pc, #68]	; (800b6f0 <HAL_RCC_GetSysClockFreq+0x94>)
 800b6ac:	685b      	ldr	r3, [r3, #4]
 800b6ae:	0c5b      	lsrs	r3, r3, #17
 800b6b0:	f003 0301 	and.w	r3, r3, #1
 800b6b4:	4a11      	ldr	r2, [pc, #68]	; (800b6fc <HAL_RCC_GetSysClockFreq+0xa0>)
 800b6b6:	5cd3      	ldrb	r3, [r2, r3]
 800b6b8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	4a0d      	ldr	r2, [pc, #52]	; (800b6f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800b6be:	fb03 f202 	mul.w	r2, r3, r2
 800b6c2:	68bb      	ldr	r3, [r7, #8]
 800b6c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b6c8:	617b      	str	r3, [r7, #20]
 800b6ca:	e004      	b.n	800b6d6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	4a0c      	ldr	r2, [pc, #48]	; (800b700 <HAL_RCC_GetSysClockFreq+0xa4>)
 800b6d0:	fb02 f303 	mul.w	r3, r2, r3
 800b6d4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800b6d6:	697b      	ldr	r3, [r7, #20]
 800b6d8:	613b      	str	r3, [r7, #16]
      break;
 800b6da:	e002      	b.n	800b6e2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800b6dc:	4b05      	ldr	r3, [pc, #20]	; (800b6f4 <HAL_RCC_GetSysClockFreq+0x98>)
 800b6de:	613b      	str	r3, [r7, #16]
      break;
 800b6e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b6e2:	693b      	ldr	r3, [r7, #16]
}
 800b6e4:	4618      	mov	r0, r3
 800b6e6:	371c      	adds	r7, #28
 800b6e8:	46bd      	mov	sp, r7
 800b6ea:	bc80      	pop	{r7}
 800b6ec:	4770      	bx	lr
 800b6ee:	bf00      	nop
 800b6f0:	40021000 	.word	0x40021000
 800b6f4:	007a1200 	.word	0x007a1200
 800b6f8:	0800e3e4 	.word	0x0800e3e4
 800b6fc:	0800e3f4 	.word	0x0800e3f4
 800b700:	003d0900 	.word	0x003d0900

0800b704 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b704:	b480      	push	{r7}
 800b706:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800b708:	4b02      	ldr	r3, [pc, #8]	; (800b714 <HAL_RCC_GetHCLKFreq+0x10>)
 800b70a:	681b      	ldr	r3, [r3, #0]
}
 800b70c:	4618      	mov	r0, r3
 800b70e:	46bd      	mov	sp, r7
 800b710:	bc80      	pop	{r7}
 800b712:	4770      	bx	lr
 800b714:	200009b4 	.word	0x200009b4

0800b718 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b718:	b580      	push	{r7, lr}
 800b71a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800b71c:	f7ff fff2 	bl	800b704 <HAL_RCC_GetHCLKFreq>
 800b720:	4602      	mov	r2, r0
 800b722:	4b05      	ldr	r3, [pc, #20]	; (800b738 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b724:	685b      	ldr	r3, [r3, #4]
 800b726:	0a1b      	lsrs	r3, r3, #8
 800b728:	f003 0307 	and.w	r3, r3, #7
 800b72c:	4903      	ldr	r1, [pc, #12]	; (800b73c <HAL_RCC_GetPCLK1Freq+0x24>)
 800b72e:	5ccb      	ldrb	r3, [r1, r3]
 800b730:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b734:	4618      	mov	r0, r3
 800b736:	bd80      	pop	{r7, pc}
 800b738:	40021000 	.word	0x40021000
 800b73c:	0800e3dc 	.word	0x0800e3dc

0800b740 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800b744:	f7ff ffde 	bl	800b704 <HAL_RCC_GetHCLKFreq>
 800b748:	4602      	mov	r2, r0
 800b74a:	4b05      	ldr	r3, [pc, #20]	; (800b760 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b74c:	685b      	ldr	r3, [r3, #4]
 800b74e:	0adb      	lsrs	r3, r3, #11
 800b750:	f003 0307 	and.w	r3, r3, #7
 800b754:	4903      	ldr	r1, [pc, #12]	; (800b764 <HAL_RCC_GetPCLK2Freq+0x24>)
 800b756:	5ccb      	ldrb	r3, [r1, r3]
 800b758:	fa22 f303 	lsr.w	r3, r2, r3
}
 800b75c:	4618      	mov	r0, r3
 800b75e:	bd80      	pop	{r7, pc}
 800b760:	40021000 	.word	0x40021000
 800b764:	0800e3dc 	.word	0x0800e3dc

0800b768 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800b768:	b480      	push	{r7}
 800b76a:	b085      	sub	sp, #20
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800b770:	4b0a      	ldr	r3, [pc, #40]	; (800b79c <RCC_Delay+0x34>)
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	4a0a      	ldr	r2, [pc, #40]	; (800b7a0 <RCC_Delay+0x38>)
 800b776:	fba2 2303 	umull	r2, r3, r2, r3
 800b77a:	0a5b      	lsrs	r3, r3, #9
 800b77c:	687a      	ldr	r2, [r7, #4]
 800b77e:	fb02 f303 	mul.w	r3, r2, r3
 800b782:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800b784:	bf00      	nop
  }
  while (Delay --);
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	1e5a      	subs	r2, r3, #1
 800b78a:	60fa      	str	r2, [r7, #12]
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d1f9      	bne.n	800b784 <RCC_Delay+0x1c>
}
 800b790:	bf00      	nop
 800b792:	bf00      	nop
 800b794:	3714      	adds	r7, #20
 800b796:	46bd      	mov	sp, r7
 800b798:	bc80      	pop	{r7}
 800b79a:	4770      	bx	lr
 800b79c:	200009b4 	.word	0x200009b4
 800b7a0:	10624dd3 	.word	0x10624dd3

0800b7a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b7a4:	b580      	push	{r7, lr}
 800b7a6:	b082      	sub	sp, #8
 800b7a8:	af00      	add	r7, sp, #0
 800b7aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d101      	bne.n	800b7b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b7b2:	2301      	movs	r3, #1
 800b7b4:	e041      	b.n	800b83a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b7bc:	b2db      	uxtb	r3, r3
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d106      	bne.n	800b7d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	2200      	movs	r2, #0
 800b7c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b7ca:	6878      	ldr	r0, [r7, #4]
 800b7cc:	f7fd fa26 	bl	8008c1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2202      	movs	r2, #2
 800b7d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681a      	ldr	r2, [r3, #0]
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	3304      	adds	r3, #4
 800b7e0:	4619      	mov	r1, r3
 800b7e2:	4610      	mov	r0, r2
 800b7e4:	f000 fa82 	bl	800bcec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2201      	movs	r2, #1
 800b7ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2201      	movs	r2, #1
 800b7f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	2201      	movs	r2, #1
 800b7fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2201      	movs	r2, #1
 800b804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	2201      	movs	r2, #1
 800b80c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	2201      	movs	r2, #1
 800b814:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2201      	movs	r2, #1
 800b81c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b820:	687b      	ldr	r3, [r7, #4]
 800b822:	2201      	movs	r2, #1
 800b824:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2201      	movs	r2, #1
 800b82c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	2201      	movs	r2, #1
 800b834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b838:	2300      	movs	r3, #0
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	3708      	adds	r7, #8
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}
	...

0800b844 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b844:	b480      	push	{r7}
 800b846:	b085      	sub	sp, #20
 800b848:	af00      	add	r7, sp, #0
 800b84a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b852:	b2db      	uxtb	r3, r3
 800b854:	2b01      	cmp	r3, #1
 800b856:	d001      	beq.n	800b85c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b858:	2301      	movs	r3, #1
 800b85a:	e044      	b.n	800b8e6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	2202      	movs	r2, #2
 800b860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	68da      	ldr	r2, [r3, #12]
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	f042 0201 	orr.w	r2, r2, #1
 800b872:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	681b      	ldr	r3, [r3, #0]
 800b878:	4a1d      	ldr	r2, [pc, #116]	; (800b8f0 <HAL_TIM_Base_Start_IT+0xac>)
 800b87a:	4293      	cmp	r3, r2
 800b87c:	d018      	beq.n	800b8b0 <HAL_TIM_Base_Start_IT+0x6c>
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	4a1c      	ldr	r2, [pc, #112]	; (800b8f4 <HAL_TIM_Base_Start_IT+0xb0>)
 800b884:	4293      	cmp	r3, r2
 800b886:	d013      	beq.n	800b8b0 <HAL_TIM_Base_Start_IT+0x6c>
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b890:	d00e      	beq.n	800b8b0 <HAL_TIM_Base_Start_IT+0x6c>
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	681b      	ldr	r3, [r3, #0]
 800b896:	4a18      	ldr	r2, [pc, #96]	; (800b8f8 <HAL_TIM_Base_Start_IT+0xb4>)
 800b898:	4293      	cmp	r3, r2
 800b89a:	d009      	beq.n	800b8b0 <HAL_TIM_Base_Start_IT+0x6c>
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	4a16      	ldr	r2, [pc, #88]	; (800b8fc <HAL_TIM_Base_Start_IT+0xb8>)
 800b8a2:	4293      	cmp	r3, r2
 800b8a4:	d004      	beq.n	800b8b0 <HAL_TIM_Base_Start_IT+0x6c>
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	4a15      	ldr	r2, [pc, #84]	; (800b900 <HAL_TIM_Base_Start_IT+0xbc>)
 800b8ac:	4293      	cmp	r3, r2
 800b8ae:	d111      	bne.n	800b8d4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	689b      	ldr	r3, [r3, #8]
 800b8b6:	f003 0307 	and.w	r3, r3, #7
 800b8ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	2b06      	cmp	r3, #6
 800b8c0:	d010      	beq.n	800b8e4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	681a      	ldr	r2, [r3, #0]
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	f042 0201 	orr.w	r2, r2, #1
 800b8d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8d2:	e007      	b.n	800b8e4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	681a      	ldr	r2, [r3, #0]
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	f042 0201 	orr.w	r2, r2, #1
 800b8e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b8e4:	2300      	movs	r3, #0
}
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	3714      	adds	r7, #20
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bc80      	pop	{r7}
 800b8ee:	4770      	bx	lr
 800b8f0:	40012c00 	.word	0x40012c00
 800b8f4:	40013400 	.word	0x40013400
 800b8f8:	40000400 	.word	0x40000400
 800b8fc:	40000800 	.word	0x40000800
 800b900:	40000c00 	.word	0x40000c00

0800b904 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b082      	sub	sp, #8
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	681b      	ldr	r3, [r3, #0]
 800b910:	691b      	ldr	r3, [r3, #16]
 800b912:	f003 0302 	and.w	r3, r3, #2
 800b916:	2b02      	cmp	r3, #2
 800b918:	d122      	bne.n	800b960 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	68db      	ldr	r3, [r3, #12]
 800b920:	f003 0302 	and.w	r3, r3, #2
 800b924:	2b02      	cmp	r3, #2
 800b926:	d11b      	bne.n	800b960 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	f06f 0202 	mvn.w	r2, #2
 800b930:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	2201      	movs	r2, #1
 800b936:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	699b      	ldr	r3, [r3, #24]
 800b93e:	f003 0303 	and.w	r3, r3, #3
 800b942:	2b00      	cmp	r3, #0
 800b944:	d003      	beq.n	800b94e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b946:	6878      	ldr	r0, [r7, #4]
 800b948:	f000 f9b4 	bl	800bcb4 <HAL_TIM_IC_CaptureCallback>
 800b94c:	e005      	b.n	800b95a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b94e:	6878      	ldr	r0, [r7, #4]
 800b950:	f000 f9a7 	bl	800bca2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b954:	6878      	ldr	r0, [r7, #4]
 800b956:	f000 f9b6 	bl	800bcc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2200      	movs	r2, #0
 800b95e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	691b      	ldr	r3, [r3, #16]
 800b966:	f003 0304 	and.w	r3, r3, #4
 800b96a:	2b04      	cmp	r3, #4
 800b96c:	d122      	bne.n	800b9b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	68db      	ldr	r3, [r3, #12]
 800b974:	f003 0304 	and.w	r3, r3, #4
 800b978:	2b04      	cmp	r3, #4
 800b97a:	d11b      	bne.n	800b9b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	f06f 0204 	mvn.w	r2, #4
 800b984:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	2202      	movs	r2, #2
 800b98a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	699b      	ldr	r3, [r3, #24]
 800b992:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b996:	2b00      	cmp	r3, #0
 800b998:	d003      	beq.n	800b9a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b99a:	6878      	ldr	r0, [r7, #4]
 800b99c:	f000 f98a 	bl	800bcb4 <HAL_TIM_IC_CaptureCallback>
 800b9a0:	e005      	b.n	800b9ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b9a2:	6878      	ldr	r0, [r7, #4]
 800b9a4:	f000 f97d 	bl	800bca2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b9a8:	6878      	ldr	r0, [r7, #4]
 800b9aa:	f000 f98c 	bl	800bcc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	2200      	movs	r2, #0
 800b9b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	691b      	ldr	r3, [r3, #16]
 800b9ba:	f003 0308 	and.w	r3, r3, #8
 800b9be:	2b08      	cmp	r3, #8
 800b9c0:	d122      	bne.n	800ba08 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800b9c2:	687b      	ldr	r3, [r7, #4]
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	68db      	ldr	r3, [r3, #12]
 800b9c8:	f003 0308 	and.w	r3, r3, #8
 800b9cc:	2b08      	cmp	r3, #8
 800b9ce:	d11b      	bne.n	800ba08 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	f06f 0208 	mvn.w	r2, #8
 800b9d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2204      	movs	r2, #4
 800b9de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	69db      	ldr	r3, [r3, #28]
 800b9e6:	f003 0303 	and.w	r3, r3, #3
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d003      	beq.n	800b9f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	f000 f960 	bl	800bcb4 <HAL_TIM_IC_CaptureCallback>
 800b9f4:	e005      	b.n	800ba02 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b9f6:	6878      	ldr	r0, [r7, #4]
 800b9f8:	f000 f953 	bl	800bca2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f000 f962 	bl	800bcc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	2200      	movs	r2, #0
 800ba06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	691b      	ldr	r3, [r3, #16]
 800ba0e:	f003 0310 	and.w	r3, r3, #16
 800ba12:	2b10      	cmp	r3, #16
 800ba14:	d122      	bne.n	800ba5c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	68db      	ldr	r3, [r3, #12]
 800ba1c:	f003 0310 	and.w	r3, r3, #16
 800ba20:	2b10      	cmp	r3, #16
 800ba22:	d11b      	bne.n	800ba5c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	f06f 0210 	mvn.w	r2, #16
 800ba2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	2208      	movs	r2, #8
 800ba32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	69db      	ldr	r3, [r3, #28]
 800ba3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d003      	beq.n	800ba4a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ba42:	6878      	ldr	r0, [r7, #4]
 800ba44:	f000 f936 	bl	800bcb4 <HAL_TIM_IC_CaptureCallback>
 800ba48:	e005      	b.n	800ba56 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	f000 f929 	bl	800bca2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba50:	6878      	ldr	r0, [r7, #4]
 800ba52:	f000 f938 	bl	800bcc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2200      	movs	r2, #0
 800ba5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	691b      	ldr	r3, [r3, #16]
 800ba62:	f003 0301 	and.w	r3, r3, #1
 800ba66:	2b01      	cmp	r3, #1
 800ba68:	d10e      	bne.n	800ba88 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	68db      	ldr	r3, [r3, #12]
 800ba70:	f003 0301 	and.w	r3, r3, #1
 800ba74:	2b01      	cmp	r3, #1
 800ba76:	d107      	bne.n	800ba88 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ba78:	687b      	ldr	r3, [r7, #4]
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	f06f 0201 	mvn.w	r2, #1
 800ba80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ba82:	6878      	ldr	r0, [r7, #4]
 800ba84:	f7fc fd5e 	bl	8008544 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	691b      	ldr	r3, [r3, #16]
 800ba8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba92:	2b80      	cmp	r3, #128	; 0x80
 800ba94:	d10e      	bne.n	800bab4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	68db      	ldr	r3, [r3, #12]
 800ba9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800baa0:	2b80      	cmp	r3, #128	; 0x80
 800baa2:	d107      	bne.n	800bab4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800baac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	f000 faa1 	bl	800bff6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	691b      	ldr	r3, [r3, #16]
 800baba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800babe:	2b40      	cmp	r3, #64	; 0x40
 800bac0:	d10e      	bne.n	800bae0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	68db      	ldr	r3, [r3, #12]
 800bac8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bacc:	2b40      	cmp	r3, #64	; 0x40
 800bace:	d107      	bne.n	800bae0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bad8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bada:	6878      	ldr	r0, [r7, #4]
 800badc:	f000 f8fc 	bl	800bcd8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	681b      	ldr	r3, [r3, #0]
 800bae4:	691b      	ldr	r3, [r3, #16]
 800bae6:	f003 0320 	and.w	r3, r3, #32
 800baea:	2b20      	cmp	r3, #32
 800baec:	d10e      	bne.n	800bb0c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	68db      	ldr	r3, [r3, #12]
 800baf4:	f003 0320 	and.w	r3, r3, #32
 800baf8:	2b20      	cmp	r3, #32
 800bafa:	d107      	bne.n	800bb0c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	f06f 0220 	mvn.w	r2, #32
 800bb04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	f000 fa6c 	bl	800bfe4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bb0c:	bf00      	nop
 800bb0e:	3708      	adds	r7, #8
 800bb10:	46bd      	mov	sp, r7
 800bb12:	bd80      	pop	{r7, pc}

0800bb14 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b084      	sub	sp, #16
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
 800bb1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800bb1e:	2300      	movs	r3, #0
 800bb20:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bb28:	2b01      	cmp	r3, #1
 800bb2a:	d101      	bne.n	800bb30 <HAL_TIM_ConfigClockSource+0x1c>
 800bb2c:	2302      	movs	r3, #2
 800bb2e:	e0b4      	b.n	800bc9a <HAL_TIM_ConfigClockSource+0x186>
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	2201      	movs	r2, #1
 800bb34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	2202      	movs	r2, #2
 800bb3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	689b      	ldr	r3, [r3, #8]
 800bb46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bb48:	68bb      	ldr	r3, [r7, #8]
 800bb4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800bb4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bb50:	68bb      	ldr	r3, [r7, #8]
 800bb52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bb56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	68ba      	ldr	r2, [r7, #8]
 800bb5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bb68:	d03e      	beq.n	800bbe8 <HAL_TIM_ConfigClockSource+0xd4>
 800bb6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bb6e:	f200 8087 	bhi.w	800bc80 <HAL_TIM_ConfigClockSource+0x16c>
 800bb72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb76:	f000 8086 	beq.w	800bc86 <HAL_TIM_ConfigClockSource+0x172>
 800bb7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb7e:	d87f      	bhi.n	800bc80 <HAL_TIM_ConfigClockSource+0x16c>
 800bb80:	2b70      	cmp	r3, #112	; 0x70
 800bb82:	d01a      	beq.n	800bbba <HAL_TIM_ConfigClockSource+0xa6>
 800bb84:	2b70      	cmp	r3, #112	; 0x70
 800bb86:	d87b      	bhi.n	800bc80 <HAL_TIM_ConfigClockSource+0x16c>
 800bb88:	2b60      	cmp	r3, #96	; 0x60
 800bb8a:	d050      	beq.n	800bc2e <HAL_TIM_ConfigClockSource+0x11a>
 800bb8c:	2b60      	cmp	r3, #96	; 0x60
 800bb8e:	d877      	bhi.n	800bc80 <HAL_TIM_ConfigClockSource+0x16c>
 800bb90:	2b50      	cmp	r3, #80	; 0x50
 800bb92:	d03c      	beq.n	800bc0e <HAL_TIM_ConfigClockSource+0xfa>
 800bb94:	2b50      	cmp	r3, #80	; 0x50
 800bb96:	d873      	bhi.n	800bc80 <HAL_TIM_ConfigClockSource+0x16c>
 800bb98:	2b40      	cmp	r3, #64	; 0x40
 800bb9a:	d058      	beq.n	800bc4e <HAL_TIM_ConfigClockSource+0x13a>
 800bb9c:	2b40      	cmp	r3, #64	; 0x40
 800bb9e:	d86f      	bhi.n	800bc80 <HAL_TIM_ConfigClockSource+0x16c>
 800bba0:	2b30      	cmp	r3, #48	; 0x30
 800bba2:	d064      	beq.n	800bc6e <HAL_TIM_ConfigClockSource+0x15a>
 800bba4:	2b30      	cmp	r3, #48	; 0x30
 800bba6:	d86b      	bhi.n	800bc80 <HAL_TIM_ConfigClockSource+0x16c>
 800bba8:	2b20      	cmp	r3, #32
 800bbaa:	d060      	beq.n	800bc6e <HAL_TIM_ConfigClockSource+0x15a>
 800bbac:	2b20      	cmp	r3, #32
 800bbae:	d867      	bhi.n	800bc80 <HAL_TIM_ConfigClockSource+0x16c>
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d05c      	beq.n	800bc6e <HAL_TIM_ConfigClockSource+0x15a>
 800bbb4:	2b10      	cmp	r3, #16
 800bbb6:	d05a      	beq.n	800bc6e <HAL_TIM_ConfigClockSource+0x15a>
 800bbb8:	e062      	b.n	800bc80 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bbbe:	683b      	ldr	r3, [r7, #0]
 800bbc0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bbc2:	683b      	ldr	r3, [r7, #0]
 800bbc4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bbca:	f000 f980 	bl	800bece <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	689b      	ldr	r3, [r3, #8]
 800bbd4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bbd6:	68bb      	ldr	r3, [r7, #8]
 800bbd8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bbdc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	68ba      	ldr	r2, [r7, #8]
 800bbe4:	609a      	str	r2, [r3, #8]
      break;
 800bbe6:	e04f      	b.n	800bc88 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800bbec:	683b      	ldr	r3, [r7, #0]
 800bbee:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800bbf8:	f000 f969 	bl	800bece <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	681b      	ldr	r3, [r3, #0]
 800bc00:	689a      	ldr	r2, [r3, #8]
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bc0a:	609a      	str	r2, [r3, #8]
      break;
 800bc0c:	e03c      	b.n	800bc88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bc1a:	461a      	mov	r2, r3
 800bc1c:	f000 f8e0 	bl	800bde0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	2150      	movs	r1, #80	; 0x50
 800bc26:	4618      	mov	r0, r3
 800bc28:	f000 f937 	bl	800be9a <TIM_ITRx_SetConfig>
      break;
 800bc2c:	e02c      	b.n	800bc88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bc36:	683b      	ldr	r3, [r7, #0]
 800bc38:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bc3a:	461a      	mov	r2, r3
 800bc3c:	f000 f8fe 	bl	800be3c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	2160      	movs	r1, #96	; 0x60
 800bc46:	4618      	mov	r0, r3
 800bc48:	f000 f927 	bl	800be9a <TIM_ITRx_SetConfig>
      break;
 800bc4c:	e01c      	b.n	800bc88 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800bc52:	683b      	ldr	r3, [r7, #0]
 800bc54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800bc56:	683b      	ldr	r3, [r7, #0]
 800bc58:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bc5a:	461a      	mov	r2, r3
 800bc5c:	f000 f8c0 	bl	800bde0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	2140      	movs	r1, #64	; 0x40
 800bc66:	4618      	mov	r0, r3
 800bc68:	f000 f917 	bl	800be9a <TIM_ITRx_SetConfig>
      break;
 800bc6c:	e00c      	b.n	800bc88 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800bc6e:	687b      	ldr	r3, [r7, #4]
 800bc70:	681a      	ldr	r2, [r3, #0]
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	4619      	mov	r1, r3
 800bc78:	4610      	mov	r0, r2
 800bc7a:	f000 f90e 	bl	800be9a <TIM_ITRx_SetConfig>
      break;
 800bc7e:	e003      	b.n	800bc88 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800bc80:	2301      	movs	r3, #1
 800bc82:	73fb      	strb	r3, [r7, #15]
      break;
 800bc84:	e000      	b.n	800bc88 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800bc86:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2201      	movs	r2, #1
 800bc8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	2200      	movs	r2, #0
 800bc94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800bc98:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc9a:	4618      	mov	r0, r3
 800bc9c:	3710      	adds	r7, #16
 800bc9e:	46bd      	mov	sp, r7
 800bca0:	bd80      	pop	{r7, pc}

0800bca2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800bca2:	b480      	push	{r7}
 800bca4:	b083      	sub	sp, #12
 800bca6:	af00      	add	r7, sp, #0
 800bca8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800bcaa:	bf00      	nop
 800bcac:	370c      	adds	r7, #12
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	bc80      	pop	{r7}
 800bcb2:	4770      	bx	lr

0800bcb4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	b083      	sub	sp, #12
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800bcbc:	bf00      	nop
 800bcbe:	370c      	adds	r7, #12
 800bcc0:	46bd      	mov	sp, r7
 800bcc2:	bc80      	pop	{r7}
 800bcc4:	4770      	bx	lr

0800bcc6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800bcc6:	b480      	push	{r7}
 800bcc8:	b083      	sub	sp, #12
 800bcca:	af00      	add	r7, sp, #0
 800bccc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800bcce:	bf00      	nop
 800bcd0:	370c      	adds	r7, #12
 800bcd2:	46bd      	mov	sp, r7
 800bcd4:	bc80      	pop	{r7}
 800bcd6:	4770      	bx	lr

0800bcd8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800bcd8:	b480      	push	{r7}
 800bcda:	b083      	sub	sp, #12
 800bcdc:	af00      	add	r7, sp, #0
 800bcde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800bce0:	bf00      	nop
 800bce2:	370c      	adds	r7, #12
 800bce4:	46bd      	mov	sp, r7
 800bce6:	bc80      	pop	{r7}
 800bce8:	4770      	bx	lr
	...

0800bcec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800bcec:	b480      	push	{r7}
 800bcee:	b085      	sub	sp, #20
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
 800bcf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	4a33      	ldr	r2, [pc, #204]	; (800bdcc <TIM_Base_SetConfig+0xe0>)
 800bd00:	4293      	cmp	r3, r2
 800bd02:	d013      	beq.n	800bd2c <TIM_Base_SetConfig+0x40>
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	4a32      	ldr	r2, [pc, #200]	; (800bdd0 <TIM_Base_SetConfig+0xe4>)
 800bd08:	4293      	cmp	r3, r2
 800bd0a:	d00f      	beq.n	800bd2c <TIM_Base_SetConfig+0x40>
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd12:	d00b      	beq.n	800bd2c <TIM_Base_SetConfig+0x40>
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	4a2f      	ldr	r2, [pc, #188]	; (800bdd4 <TIM_Base_SetConfig+0xe8>)
 800bd18:	4293      	cmp	r3, r2
 800bd1a:	d007      	beq.n	800bd2c <TIM_Base_SetConfig+0x40>
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	4a2e      	ldr	r2, [pc, #184]	; (800bdd8 <TIM_Base_SetConfig+0xec>)
 800bd20:	4293      	cmp	r3, r2
 800bd22:	d003      	beq.n	800bd2c <TIM_Base_SetConfig+0x40>
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	4a2d      	ldr	r2, [pc, #180]	; (800bddc <TIM_Base_SetConfig+0xf0>)
 800bd28:	4293      	cmp	r3, r2
 800bd2a:	d108      	bne.n	800bd3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	685b      	ldr	r3, [r3, #4]
 800bd38:	68fa      	ldr	r2, [r7, #12]
 800bd3a:	4313      	orrs	r3, r2
 800bd3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	4a22      	ldr	r2, [pc, #136]	; (800bdcc <TIM_Base_SetConfig+0xe0>)
 800bd42:	4293      	cmp	r3, r2
 800bd44:	d013      	beq.n	800bd6e <TIM_Base_SetConfig+0x82>
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	4a21      	ldr	r2, [pc, #132]	; (800bdd0 <TIM_Base_SetConfig+0xe4>)
 800bd4a:	4293      	cmp	r3, r2
 800bd4c:	d00f      	beq.n	800bd6e <TIM_Base_SetConfig+0x82>
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bd54:	d00b      	beq.n	800bd6e <TIM_Base_SetConfig+0x82>
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	4a1e      	ldr	r2, [pc, #120]	; (800bdd4 <TIM_Base_SetConfig+0xe8>)
 800bd5a:	4293      	cmp	r3, r2
 800bd5c:	d007      	beq.n	800bd6e <TIM_Base_SetConfig+0x82>
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	4a1d      	ldr	r2, [pc, #116]	; (800bdd8 <TIM_Base_SetConfig+0xec>)
 800bd62:	4293      	cmp	r3, r2
 800bd64:	d003      	beq.n	800bd6e <TIM_Base_SetConfig+0x82>
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	4a1c      	ldr	r2, [pc, #112]	; (800bddc <TIM_Base_SetConfig+0xf0>)
 800bd6a:	4293      	cmp	r3, r2
 800bd6c:	d108      	bne.n	800bd80 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bd74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	68db      	ldr	r3, [r3, #12]
 800bd7a:	68fa      	ldr	r2, [r7, #12]
 800bd7c:	4313      	orrs	r3, r2
 800bd7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bd80:	68fb      	ldr	r3, [r7, #12]
 800bd82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	695b      	ldr	r3, [r3, #20]
 800bd8a:	4313      	orrs	r3, r2
 800bd8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	68fa      	ldr	r2, [r7, #12]
 800bd92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bd94:	683b      	ldr	r3, [r7, #0]
 800bd96:	689a      	ldr	r2, [r3, #8]
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bd9c:	683b      	ldr	r3, [r7, #0]
 800bd9e:	681a      	ldr	r2, [r3, #0]
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	4a09      	ldr	r2, [pc, #36]	; (800bdcc <TIM_Base_SetConfig+0xe0>)
 800bda8:	4293      	cmp	r3, r2
 800bdaa:	d003      	beq.n	800bdb4 <TIM_Base_SetConfig+0xc8>
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	4a08      	ldr	r2, [pc, #32]	; (800bdd0 <TIM_Base_SetConfig+0xe4>)
 800bdb0:	4293      	cmp	r3, r2
 800bdb2:	d103      	bne.n	800bdbc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bdb4:	683b      	ldr	r3, [r7, #0]
 800bdb6:	691a      	ldr	r2, [r3, #16]
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	2201      	movs	r2, #1
 800bdc0:	615a      	str	r2, [r3, #20]
}
 800bdc2:	bf00      	nop
 800bdc4:	3714      	adds	r7, #20
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bc80      	pop	{r7}
 800bdca:	4770      	bx	lr
 800bdcc:	40012c00 	.word	0x40012c00
 800bdd0:	40013400 	.word	0x40013400
 800bdd4:	40000400 	.word	0x40000400
 800bdd8:	40000800 	.word	0x40000800
 800bddc:	40000c00 	.word	0x40000c00

0800bde0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bde0:	b480      	push	{r7}
 800bde2:	b087      	sub	sp, #28
 800bde4:	af00      	add	r7, sp, #0
 800bde6:	60f8      	str	r0, [r7, #12]
 800bde8:	60b9      	str	r1, [r7, #8]
 800bdea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bdec:	68fb      	ldr	r3, [r7, #12]
 800bdee:	6a1b      	ldr	r3, [r3, #32]
 800bdf0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bdf2:	68fb      	ldr	r3, [r7, #12]
 800bdf4:	6a1b      	ldr	r3, [r3, #32]
 800bdf6:	f023 0201 	bic.w	r2, r3, #1
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bdfe:	68fb      	ldr	r3, [r7, #12]
 800be00:	699b      	ldr	r3, [r3, #24]
 800be02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800be04:	693b      	ldr	r3, [r7, #16]
 800be06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800be0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	011b      	lsls	r3, r3, #4
 800be10:	693a      	ldr	r2, [r7, #16]
 800be12:	4313      	orrs	r3, r2
 800be14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800be16:	697b      	ldr	r3, [r7, #20]
 800be18:	f023 030a 	bic.w	r3, r3, #10
 800be1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800be1e:	697a      	ldr	r2, [r7, #20]
 800be20:	68bb      	ldr	r3, [r7, #8]
 800be22:	4313      	orrs	r3, r2
 800be24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800be26:	68fb      	ldr	r3, [r7, #12]
 800be28:	693a      	ldr	r2, [r7, #16]
 800be2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	697a      	ldr	r2, [r7, #20]
 800be30:	621a      	str	r2, [r3, #32]
}
 800be32:	bf00      	nop
 800be34:	371c      	adds	r7, #28
 800be36:	46bd      	mov	sp, r7
 800be38:	bc80      	pop	{r7}
 800be3a:	4770      	bx	lr

0800be3c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800be3c:	b480      	push	{r7}
 800be3e:	b087      	sub	sp, #28
 800be40:	af00      	add	r7, sp, #0
 800be42:	60f8      	str	r0, [r7, #12]
 800be44:	60b9      	str	r1, [r7, #8]
 800be46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	6a1b      	ldr	r3, [r3, #32]
 800be4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	6a1b      	ldr	r3, [r3, #32]
 800be52:	f023 0210 	bic.w	r2, r3, #16
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	699b      	ldr	r3, [r3, #24]
 800be5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800be60:	693b      	ldr	r3, [r7, #16]
 800be62:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800be66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	031b      	lsls	r3, r3, #12
 800be6c:	693a      	ldr	r2, [r7, #16]
 800be6e:	4313      	orrs	r3, r2
 800be70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800be72:	697b      	ldr	r3, [r7, #20]
 800be74:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800be78:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800be7a:	68bb      	ldr	r3, [r7, #8]
 800be7c:	011b      	lsls	r3, r3, #4
 800be7e:	697a      	ldr	r2, [r7, #20]
 800be80:	4313      	orrs	r3, r2
 800be82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800be84:	68fb      	ldr	r3, [r7, #12]
 800be86:	693a      	ldr	r2, [r7, #16]
 800be88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	697a      	ldr	r2, [r7, #20]
 800be8e:	621a      	str	r2, [r3, #32]
}
 800be90:	bf00      	nop
 800be92:	371c      	adds	r7, #28
 800be94:	46bd      	mov	sp, r7
 800be96:	bc80      	pop	{r7}
 800be98:	4770      	bx	lr

0800be9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800be9a:	b480      	push	{r7}
 800be9c:	b085      	sub	sp, #20
 800be9e:	af00      	add	r7, sp, #0
 800bea0:	6078      	str	r0, [r7, #4]
 800bea2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	689b      	ldr	r3, [r3, #8]
 800bea8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800beb0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800beb2:	683a      	ldr	r2, [r7, #0]
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	4313      	orrs	r3, r2
 800beb8:	f043 0307 	orr.w	r3, r3, #7
 800bebc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	68fa      	ldr	r2, [r7, #12]
 800bec2:	609a      	str	r2, [r3, #8]
}
 800bec4:	bf00      	nop
 800bec6:	3714      	adds	r7, #20
 800bec8:	46bd      	mov	sp, r7
 800beca:	bc80      	pop	{r7}
 800becc:	4770      	bx	lr

0800bece <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800bece:	b480      	push	{r7}
 800bed0:	b087      	sub	sp, #28
 800bed2:	af00      	add	r7, sp, #0
 800bed4:	60f8      	str	r0, [r7, #12]
 800bed6:	60b9      	str	r1, [r7, #8]
 800bed8:	607a      	str	r2, [r7, #4]
 800beda:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800bedc:	68fb      	ldr	r3, [r7, #12]
 800bede:	689b      	ldr	r3, [r3, #8]
 800bee0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bee2:	697b      	ldr	r3, [r7, #20]
 800bee4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bee8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	021a      	lsls	r2, r3, #8
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	431a      	orrs	r2, r3
 800bef2:	68bb      	ldr	r3, [r7, #8]
 800bef4:	4313      	orrs	r3, r2
 800bef6:	697a      	ldr	r2, [r7, #20]
 800bef8:	4313      	orrs	r3, r2
 800befa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	697a      	ldr	r2, [r7, #20]
 800bf00:	609a      	str	r2, [r3, #8]
}
 800bf02:	bf00      	nop
 800bf04:	371c      	adds	r7, #28
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bc80      	pop	{r7}
 800bf0a:	4770      	bx	lr

0800bf0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800bf0c:	b480      	push	{r7}
 800bf0e:	b085      	sub	sp, #20
 800bf10:	af00      	add	r7, sp, #0
 800bf12:	6078      	str	r0, [r7, #4]
 800bf14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bf1c:	2b01      	cmp	r3, #1
 800bf1e:	d101      	bne.n	800bf24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800bf20:	2302      	movs	r3, #2
 800bf22:	e050      	b.n	800bfc6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2201      	movs	r2, #1
 800bf28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf2c:	687b      	ldr	r3, [r7, #4]
 800bf2e:	2202      	movs	r2, #2
 800bf30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	681b      	ldr	r3, [r3, #0]
 800bf38:	685b      	ldr	r3, [r3, #4]
 800bf3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	689b      	ldr	r3, [r3, #8]
 800bf42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800bf44:	68fb      	ldr	r3, [r7, #12]
 800bf46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800bf4c:	683b      	ldr	r3, [r7, #0]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	68fa      	ldr	r2, [r7, #12]
 800bf52:	4313      	orrs	r3, r2
 800bf54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	68fa      	ldr	r2, [r7, #12]
 800bf5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	4a1b      	ldr	r2, [pc, #108]	; (800bfd0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800bf64:	4293      	cmp	r3, r2
 800bf66:	d018      	beq.n	800bf9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	681b      	ldr	r3, [r3, #0]
 800bf6c:	4a19      	ldr	r2, [pc, #100]	; (800bfd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800bf6e:	4293      	cmp	r3, r2
 800bf70:	d013      	beq.n	800bf9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf7a:	d00e      	beq.n	800bf9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	4a15      	ldr	r2, [pc, #84]	; (800bfd8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800bf82:	4293      	cmp	r3, r2
 800bf84:	d009      	beq.n	800bf9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	4a14      	ldr	r2, [pc, #80]	; (800bfdc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800bf8c:	4293      	cmp	r3, r2
 800bf8e:	d004      	beq.n	800bf9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	4a12      	ldr	r2, [pc, #72]	; (800bfe0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800bf96:	4293      	cmp	r3, r2
 800bf98:	d10c      	bne.n	800bfb4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800bf9a:	68bb      	ldr	r3, [r7, #8]
 800bf9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bfa0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800bfa2:	683b      	ldr	r3, [r7, #0]
 800bfa4:	685b      	ldr	r3, [r3, #4]
 800bfa6:	68ba      	ldr	r2, [r7, #8]
 800bfa8:	4313      	orrs	r3, r2
 800bfaa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	68ba      	ldr	r2, [r7, #8]
 800bfb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2201      	movs	r2, #1
 800bfb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800bfc4:	2300      	movs	r3, #0
}
 800bfc6:	4618      	mov	r0, r3
 800bfc8:	3714      	adds	r7, #20
 800bfca:	46bd      	mov	sp, r7
 800bfcc:	bc80      	pop	{r7}
 800bfce:	4770      	bx	lr
 800bfd0:	40012c00 	.word	0x40012c00
 800bfd4:	40013400 	.word	0x40013400
 800bfd8:	40000400 	.word	0x40000400
 800bfdc:	40000800 	.word	0x40000800
 800bfe0:	40000c00 	.word	0x40000c00

0800bfe4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bfe4:	b480      	push	{r7}
 800bfe6:	b083      	sub	sp, #12
 800bfe8:	af00      	add	r7, sp, #0
 800bfea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bfec:	bf00      	nop
 800bfee:	370c      	adds	r7, #12
 800bff0:	46bd      	mov	sp, r7
 800bff2:	bc80      	pop	{r7}
 800bff4:	4770      	bx	lr

0800bff6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bff6:	b480      	push	{r7}
 800bff8:	b083      	sub	sp, #12
 800bffa:	af00      	add	r7, sp, #0
 800bffc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bffe:	bf00      	nop
 800c000:	370c      	adds	r7, #12
 800c002:	46bd      	mov	sp, r7
 800c004:	bc80      	pop	{r7}
 800c006:	4770      	bx	lr

0800c008 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b082      	sub	sp, #8
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d101      	bne.n	800c01a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c016:	2301      	movs	r3, #1
 800c018:	e042      	b.n	800c0a0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c020:	b2db      	uxtb	r3, r3
 800c022:	2b00      	cmp	r3, #0
 800c024:	d106      	bne.n	800c034 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	2200      	movs	r2, #0
 800c02a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c02e:	6878      	ldr	r0, [r7, #4]
 800c030:	f7fc fe1a 	bl	8008c68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	2224      	movs	r2, #36	; 0x24
 800c038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	68da      	ldr	r2, [r3, #12]
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c04a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	f000 fcb5 	bl	800c9bc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	691a      	ldr	r2, [r3, #16]
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c060:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	695a      	ldr	r2, [r3, #20]
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	681b      	ldr	r3, [r3, #0]
 800c06c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c070:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	681b      	ldr	r3, [r3, #0]
 800c076:	68da      	ldr	r2, [r3, #12]
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c080:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2200      	movs	r2, #0
 800c086:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2220      	movs	r2, #32
 800c08c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	2220      	movs	r2, #32
 800c094:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c098:	687b      	ldr	r3, [r7, #4]
 800c09a:	2200      	movs	r2, #0
 800c09c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800c09e:	2300      	movs	r3, #0
}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	3708      	adds	r7, #8
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}

0800c0a8 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c0a8:	b480      	push	{r7}
 800c0aa:	b085      	sub	sp, #20
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	60f8      	str	r0, [r7, #12]
 800c0b0:	60b9      	str	r1, [r7, #8]
 800c0b2:	4613      	mov	r3, r2
 800c0b4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c0bc:	b2db      	uxtb	r3, r3
 800c0be:	2b20      	cmp	r3, #32
 800c0c0:	d121      	bne.n	800c106 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c0c2:	68bb      	ldr	r3, [r7, #8]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d002      	beq.n	800c0ce <HAL_UART_Transmit_IT+0x26>
 800c0c8:	88fb      	ldrh	r3, [r7, #6]
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d101      	bne.n	800c0d2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800c0ce:	2301      	movs	r3, #1
 800c0d0:	e01a      	b.n	800c108 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	68ba      	ldr	r2, [r7, #8]
 800c0d6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	88fa      	ldrh	r2, [r7, #6]
 800c0dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	88fa      	ldrh	r2, [r7, #6]
 800c0e2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	2221      	movs	r2, #33	; 0x21
 800c0ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	68da      	ldr	r2, [r3, #12]
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800c100:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800c102:	2300      	movs	r3, #0
 800c104:	e000      	b.n	800c108 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800c106:	2302      	movs	r3, #2
  }
}
 800c108:	4618      	mov	r0, r3
 800c10a:	3714      	adds	r7, #20
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bc80      	pop	{r7}
 800c110:	4770      	bx	lr
	...

0800c114 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b0ba      	sub	sp, #232	; 0xe8
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	681b      	ldr	r3, [r3, #0]
 800c120:	681b      	ldr	r3, [r3, #0]
 800c122:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	681b      	ldr	r3, [r3, #0]
 800c12a:	68db      	ldr	r3, [r3, #12]
 800c12c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	695b      	ldr	r3, [r3, #20]
 800c136:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800c13a:	2300      	movs	r3, #0
 800c13c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800c140:	2300      	movs	r3, #0
 800c142:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800c146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c14a:	f003 030f 	and.w	r3, r3, #15
 800c14e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800c152:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c156:	2b00      	cmp	r3, #0
 800c158:	d10f      	bne.n	800c17a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c15a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c15e:	f003 0320 	and.w	r3, r3, #32
 800c162:	2b00      	cmp	r3, #0
 800c164:	d009      	beq.n	800c17a <HAL_UART_IRQHandler+0x66>
 800c166:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c16a:	f003 0320 	and.w	r3, r3, #32
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d003      	beq.n	800c17a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800c172:	6878      	ldr	r0, [r7, #4]
 800c174:	f000 fb63 	bl	800c83e <UART_Receive_IT>
      return;
 800c178:	e25b      	b.n	800c632 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800c17a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c17e:	2b00      	cmp	r3, #0
 800c180:	f000 80de 	beq.w	800c340 <HAL_UART_IRQHandler+0x22c>
 800c184:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c188:	f003 0301 	and.w	r3, r3, #1
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d106      	bne.n	800c19e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800c190:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c194:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800c198:	2b00      	cmp	r3, #0
 800c19a:	f000 80d1 	beq.w	800c340 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800c19e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1a2:	f003 0301 	and.w	r3, r3, #1
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d00b      	beq.n	800c1c2 <HAL_UART_IRQHandler+0xae>
 800c1aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c1ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d005      	beq.n	800c1c2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1ba:	f043 0201 	orr.w	r2, r3, #1
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c1c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1c6:	f003 0304 	and.w	r3, r3, #4
 800c1ca:	2b00      	cmp	r3, #0
 800c1cc:	d00b      	beq.n	800c1e6 <HAL_UART_IRQHandler+0xd2>
 800c1ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c1d2:	f003 0301 	and.w	r3, r3, #1
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d005      	beq.n	800c1e6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1de:	f043 0202 	orr.w	r2, r3, #2
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800c1e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c1ea:	f003 0302 	and.w	r3, r3, #2
 800c1ee:	2b00      	cmp	r3, #0
 800c1f0:	d00b      	beq.n	800c20a <HAL_UART_IRQHandler+0xf6>
 800c1f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c1f6:	f003 0301 	and.w	r3, r3, #1
 800c1fa:	2b00      	cmp	r3, #0
 800c1fc:	d005      	beq.n	800c20a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c202:	f043 0204 	orr.w	r2, r3, #4
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800c20a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c20e:	f003 0308 	and.w	r3, r3, #8
 800c212:	2b00      	cmp	r3, #0
 800c214:	d011      	beq.n	800c23a <HAL_UART_IRQHandler+0x126>
 800c216:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c21a:	f003 0320 	and.w	r3, r3, #32
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d105      	bne.n	800c22e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800c222:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c226:	f003 0301 	and.w	r3, r3, #1
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d005      	beq.n	800c23a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c232:	f043 0208 	orr.w	r2, r3, #8
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c23e:	2b00      	cmp	r3, #0
 800c240:	f000 81f2 	beq.w	800c628 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800c244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c248:	f003 0320 	and.w	r3, r3, #32
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d008      	beq.n	800c262 <HAL_UART_IRQHandler+0x14e>
 800c250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c254:	f003 0320 	and.w	r3, r3, #32
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d002      	beq.n	800c262 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800c25c:	6878      	ldr	r0, [r7, #4]
 800c25e:	f000 faee 	bl	800c83e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	695b      	ldr	r3, [r3, #20]
 800c268:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	bf14      	ite	ne
 800c270:	2301      	movne	r3, #1
 800c272:	2300      	moveq	r3, #0
 800c274:	b2db      	uxtb	r3, r3
 800c276:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c27e:	f003 0308 	and.w	r3, r3, #8
 800c282:	2b00      	cmp	r3, #0
 800c284:	d103      	bne.n	800c28e <HAL_UART_IRQHandler+0x17a>
 800c286:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d04f      	beq.n	800c32e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c28e:	6878      	ldr	r0, [r7, #4]
 800c290:	f000 f9f8 	bl	800c684 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	681b      	ldr	r3, [r3, #0]
 800c298:	695b      	ldr	r3, [r3, #20]
 800c29a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d041      	beq.n	800c326 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	3314      	adds	r3, #20
 800c2a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c2ac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c2b0:	e853 3f00 	ldrex	r3, [r3]
 800c2b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c2b8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c2bc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c2c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	3314      	adds	r3, #20
 800c2ca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c2ce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c2d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c2d6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c2da:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c2de:	e841 2300 	strex	r3, r2, [r1]
 800c2e2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c2e6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d1d9      	bne.n	800c2a2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d013      	beq.n	800c31e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c2fa:	4a7e      	ldr	r2, [pc, #504]	; (800c4f4 <HAL_UART_IRQHandler+0x3e0>)
 800c2fc:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c302:	4618      	mov	r0, r3
 800c304:	f7fd f86c 	bl	80093e0 <HAL_DMA_Abort_IT>
 800c308:	4603      	mov	r3, r0
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d016      	beq.n	800c33c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c314:	687a      	ldr	r2, [r7, #4]
 800c316:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800c318:	4610      	mov	r0, r2
 800c31a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c31c:	e00e      	b.n	800c33c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c31e:	6878      	ldr	r0, [r7, #4]
 800c320:	f000 f99c 	bl	800c65c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c324:	e00a      	b.n	800c33c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c326:	6878      	ldr	r0, [r7, #4]
 800c328:	f000 f998 	bl	800c65c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c32c:	e006      	b.n	800c33c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c32e:	6878      	ldr	r0, [r7, #4]
 800c330:	f000 f994 	bl	800c65c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2200      	movs	r2, #0
 800c338:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800c33a:	e175      	b.n	800c628 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c33c:	bf00      	nop
    return;
 800c33e:	e173      	b.n	800c628 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c344:	2b01      	cmp	r3, #1
 800c346:	f040 814f 	bne.w	800c5e8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800c34a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c34e:	f003 0310 	and.w	r3, r3, #16
 800c352:	2b00      	cmp	r3, #0
 800c354:	f000 8148 	beq.w	800c5e8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800c358:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c35c:	f003 0310 	and.w	r3, r3, #16
 800c360:	2b00      	cmp	r3, #0
 800c362:	f000 8141 	beq.w	800c5e8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c366:	2300      	movs	r3, #0
 800c368:	60bb      	str	r3, [r7, #8]
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	681b      	ldr	r3, [r3, #0]
 800c370:	60bb      	str	r3, [r7, #8]
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	685b      	ldr	r3, [r3, #4]
 800c378:	60bb      	str	r3, [r7, #8]
 800c37a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	681b      	ldr	r3, [r3, #0]
 800c380:	695b      	ldr	r3, [r3, #20]
 800c382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c386:	2b00      	cmp	r3, #0
 800c388:	f000 80b6 	beq.w	800c4f8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	685b      	ldr	r3, [r3, #4]
 800c394:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c398:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	f000 8145 	beq.w	800c62c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c3a6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c3aa:	429a      	cmp	r2, r3
 800c3ac:	f080 813e 	bcs.w	800c62c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c3b6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3bc:	699b      	ldr	r3, [r3, #24]
 800c3be:	2b20      	cmp	r3, #32
 800c3c0:	f000 8088 	beq.w	800c4d4 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	330c      	adds	r3, #12
 800c3ca:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c3d2:	e853 3f00 	ldrex	r3, [r3]
 800c3d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c3da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c3de:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c3e2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	681b      	ldr	r3, [r3, #0]
 800c3ea:	330c      	adds	r3, #12
 800c3ec:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800c3f0:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c3f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3f8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c3fc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c400:	e841 2300 	strex	r3, r2, [r1]
 800c404:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c408:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d1d9      	bne.n	800c3c4 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	3314      	adds	r3, #20
 800c416:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c418:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c41a:	e853 3f00 	ldrex	r3, [r3]
 800c41e:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c420:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c422:	f023 0301 	bic.w	r3, r3, #1
 800c426:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	3314      	adds	r3, #20
 800c430:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c434:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c438:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c43a:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c43c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c440:	e841 2300 	strex	r3, r2, [r1]
 800c444:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c446:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c448:	2b00      	cmp	r3, #0
 800c44a:	d1e1      	bne.n	800c410 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	681b      	ldr	r3, [r3, #0]
 800c450:	3314      	adds	r3, #20
 800c452:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c454:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c456:	e853 3f00 	ldrex	r3, [r3]
 800c45a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c45c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c45e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c462:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	3314      	adds	r3, #20
 800c46c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c470:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c472:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c474:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c476:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c478:	e841 2300 	strex	r3, r2, [r1]
 800c47c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c47e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c480:	2b00      	cmp	r3, #0
 800c482:	d1e3      	bne.n	800c44c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2220      	movs	r2, #32
 800c488:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2200      	movs	r2, #0
 800c490:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	330c      	adds	r3, #12
 800c498:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c49a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c49c:	e853 3f00 	ldrex	r3, [r3]
 800c4a0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c4a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c4a4:	f023 0310 	bic.w	r3, r3, #16
 800c4a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	681b      	ldr	r3, [r3, #0]
 800c4b0:	330c      	adds	r3, #12
 800c4b2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800c4b6:	65ba      	str	r2, [r7, #88]	; 0x58
 800c4b8:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4ba:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c4bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c4be:	e841 2300 	strex	r3, r2, [r1]
 800c4c2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c4c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	d1e3      	bne.n	800c492 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	f7fc ff4b 	bl	800936a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	2202      	movs	r2, #2
 800c4d8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c4da:	687b      	ldr	r3, [r7, #4]
 800c4dc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c4e2:	b29b      	uxth	r3, r3
 800c4e4:	1ad3      	subs	r3, r2, r3
 800c4e6:	b29b      	uxth	r3, r3
 800c4e8:	4619      	mov	r1, r3
 800c4ea:	6878      	ldr	r0, [r7, #4]
 800c4ec:	f000 f8bf 	bl	800c66e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c4f0:	e09c      	b.n	800c62c <HAL_UART_IRQHandler+0x518>
 800c4f2:	bf00      	nop
 800c4f4:	0800c749 	.word	0x0800c749
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c500:	b29b      	uxth	r3, r3
 800c502:	1ad3      	subs	r3, r2, r3
 800c504:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c50c:	b29b      	uxth	r3, r3
 800c50e:	2b00      	cmp	r3, #0
 800c510:	f000 808e 	beq.w	800c630 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800c514:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c518:	2b00      	cmp	r3, #0
 800c51a:	f000 8089 	beq.w	800c630 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	681b      	ldr	r3, [r3, #0]
 800c522:	330c      	adds	r3, #12
 800c524:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c526:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c528:	e853 3f00 	ldrex	r3, [r3]
 800c52c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c52e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c530:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c534:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	330c      	adds	r3, #12
 800c53e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800c542:	647a      	str	r2, [r7, #68]	; 0x44
 800c544:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c546:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c548:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c54a:	e841 2300 	strex	r3, r2, [r1]
 800c54e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c552:	2b00      	cmp	r3, #0
 800c554:	d1e3      	bne.n	800c51e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	3314      	adds	r3, #20
 800c55c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c55e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c560:	e853 3f00 	ldrex	r3, [r3]
 800c564:	623b      	str	r3, [r7, #32]
   return(result);
 800c566:	6a3b      	ldr	r3, [r7, #32]
 800c568:	f023 0301 	bic.w	r3, r3, #1
 800c56c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	3314      	adds	r3, #20
 800c576:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c57a:	633a      	str	r2, [r7, #48]	; 0x30
 800c57c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c57e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c580:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c582:	e841 2300 	strex	r3, r2, [r1]
 800c586:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c58a:	2b00      	cmp	r3, #0
 800c58c:	d1e3      	bne.n	800c556 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	2220      	movs	r2, #32
 800c592:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	2200      	movs	r2, #0
 800c59a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	681b      	ldr	r3, [r3, #0]
 800c5a0:	330c      	adds	r3, #12
 800c5a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5a4:	693b      	ldr	r3, [r7, #16]
 800c5a6:	e853 3f00 	ldrex	r3, [r3]
 800c5aa:	60fb      	str	r3, [r7, #12]
   return(result);
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	f023 0310 	bic.w	r3, r3, #16
 800c5b2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	681b      	ldr	r3, [r3, #0]
 800c5ba:	330c      	adds	r3, #12
 800c5bc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800c5c0:	61fa      	str	r2, [r7, #28]
 800c5c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5c4:	69b9      	ldr	r1, [r7, #24]
 800c5c6:	69fa      	ldr	r2, [r7, #28]
 800c5c8:	e841 2300 	strex	r3, r2, [r1]
 800c5cc:	617b      	str	r3, [r7, #20]
   return(result);
 800c5ce:	697b      	ldr	r3, [r7, #20]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d1e3      	bne.n	800c59c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2202      	movs	r2, #2
 800c5d8:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c5da:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c5de:	4619      	mov	r1, r3
 800c5e0:	6878      	ldr	r0, [r7, #4]
 800c5e2:	f000 f844 	bl	800c66e <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800c5e6:	e023      	b.n	800c630 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800c5e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c5ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d009      	beq.n	800c608 <HAL_UART_IRQHandler+0x4f4>
 800c5f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c5f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d003      	beq.n	800c608 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800c600:	6878      	ldr	r0, [r7, #4]
 800c602:	f000 f8b5 	bl	800c770 <UART_Transmit_IT>
    return;
 800c606:	e014      	b.n	800c632 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800c608:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c60c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c610:	2b00      	cmp	r3, #0
 800c612:	d00e      	beq.n	800c632 <HAL_UART_IRQHandler+0x51e>
 800c614:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d008      	beq.n	800c632 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800c620:	6878      	ldr	r0, [r7, #4]
 800c622:	f000 f8f4 	bl	800c80e <UART_EndTransmit_IT>
    return;
 800c626:	e004      	b.n	800c632 <HAL_UART_IRQHandler+0x51e>
    return;
 800c628:	bf00      	nop
 800c62a:	e002      	b.n	800c632 <HAL_UART_IRQHandler+0x51e>
      return;
 800c62c:	bf00      	nop
 800c62e:	e000      	b.n	800c632 <HAL_UART_IRQHandler+0x51e>
      return;
 800c630:	bf00      	nop
  }
}
 800c632:	37e8      	adds	r7, #232	; 0xe8
 800c634:	46bd      	mov	sp, r7
 800c636:	bd80      	pop	{r7, pc}

0800c638 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c638:	b480      	push	{r7}
 800c63a:	b083      	sub	sp, #12
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800c640:	bf00      	nop
 800c642:	370c      	adds	r7, #12
 800c644:	46bd      	mov	sp, r7
 800c646:	bc80      	pop	{r7}
 800c648:	4770      	bx	lr

0800c64a <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800c64a:	b480      	push	{r7}
 800c64c:	b083      	sub	sp, #12
 800c64e:	af00      	add	r7, sp, #0
 800c650:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800c652:	bf00      	nop
 800c654:	370c      	adds	r7, #12
 800c656:	46bd      	mov	sp, r7
 800c658:	bc80      	pop	{r7}
 800c65a:	4770      	bx	lr

0800c65c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c65c:	b480      	push	{r7}
 800c65e:	b083      	sub	sp, #12
 800c660:	af00      	add	r7, sp, #0
 800c662:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c664:	bf00      	nop
 800c666:	370c      	adds	r7, #12
 800c668:	46bd      	mov	sp, r7
 800c66a:	bc80      	pop	{r7}
 800c66c:	4770      	bx	lr

0800c66e <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c66e:	b480      	push	{r7}
 800c670:	b083      	sub	sp, #12
 800c672:	af00      	add	r7, sp, #0
 800c674:	6078      	str	r0, [r7, #4]
 800c676:	460b      	mov	r3, r1
 800c678:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c67a:	bf00      	nop
 800c67c:	370c      	adds	r7, #12
 800c67e:	46bd      	mov	sp, r7
 800c680:	bc80      	pop	{r7}
 800c682:	4770      	bx	lr

0800c684 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c684:	b480      	push	{r7}
 800c686:	b095      	sub	sp, #84	; 0x54
 800c688:	af00      	add	r7, sp, #0
 800c68a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	330c      	adds	r3, #12
 800c692:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c694:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c696:	e853 3f00 	ldrex	r3, [r3]
 800c69a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c69c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c69e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c6a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	330c      	adds	r3, #12
 800c6aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c6ac:	643a      	str	r2, [r7, #64]	; 0x40
 800c6ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6b0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c6b2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c6b4:	e841 2300 	strex	r3, r2, [r1]
 800c6b8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c6ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6bc:	2b00      	cmp	r3, #0
 800c6be:	d1e5      	bne.n	800c68c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	3314      	adds	r3, #20
 800c6c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6c8:	6a3b      	ldr	r3, [r7, #32]
 800c6ca:	e853 3f00 	ldrex	r3, [r3]
 800c6ce:	61fb      	str	r3, [r7, #28]
   return(result);
 800c6d0:	69fb      	ldr	r3, [r7, #28]
 800c6d2:	f023 0301 	bic.w	r3, r3, #1
 800c6d6:	64bb      	str	r3, [r7, #72]	; 0x48
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	3314      	adds	r3, #20
 800c6de:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c6e0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c6e2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6e4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c6e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c6e8:	e841 2300 	strex	r3, r2, [r1]
 800c6ec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6f0:	2b00      	cmp	r3, #0
 800c6f2:	d1e5      	bne.n	800c6c0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c6f8:	2b01      	cmp	r3, #1
 800c6fa:	d119      	bne.n	800c730 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	330c      	adds	r3, #12
 800c702:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	e853 3f00 	ldrex	r3, [r3]
 800c70a:	60bb      	str	r3, [r7, #8]
   return(result);
 800c70c:	68bb      	ldr	r3, [r7, #8]
 800c70e:	f023 0310 	bic.w	r3, r3, #16
 800c712:	647b      	str	r3, [r7, #68]	; 0x44
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	330c      	adds	r3, #12
 800c71a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c71c:	61ba      	str	r2, [r7, #24]
 800c71e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c720:	6979      	ldr	r1, [r7, #20]
 800c722:	69ba      	ldr	r2, [r7, #24]
 800c724:	e841 2300 	strex	r3, r2, [r1]
 800c728:	613b      	str	r3, [r7, #16]
   return(result);
 800c72a:	693b      	ldr	r3, [r7, #16]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d1e5      	bne.n	800c6fc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	2220      	movs	r2, #32
 800c734:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	2200      	movs	r2, #0
 800c73c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c73e:	bf00      	nop
 800c740:	3754      	adds	r7, #84	; 0x54
 800c742:	46bd      	mov	sp, r7
 800c744:	bc80      	pop	{r7}
 800c746:	4770      	bx	lr

0800c748 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c748:	b580      	push	{r7, lr}
 800c74a:	b084      	sub	sp, #16
 800c74c:	af00      	add	r7, sp, #0
 800c74e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c754:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	2200      	movs	r2, #0
 800c75a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c75c:	68fb      	ldr	r3, [r7, #12]
 800c75e:	2200      	movs	r2, #0
 800c760:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c762:	68f8      	ldr	r0, [r7, #12]
 800c764:	f7ff ff7a 	bl	800c65c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c768:	bf00      	nop
 800c76a:	3710      	adds	r7, #16
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bd80      	pop	{r7, pc}

0800c770 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c770:	b480      	push	{r7}
 800c772:	b085      	sub	sp, #20
 800c774:	af00      	add	r7, sp, #0
 800c776:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800c77e:	b2db      	uxtb	r3, r3
 800c780:	2b21      	cmp	r3, #33	; 0x21
 800c782:	d13e      	bne.n	800c802 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	689b      	ldr	r3, [r3, #8]
 800c788:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c78c:	d114      	bne.n	800c7b8 <UART_Transmit_IT+0x48>
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	691b      	ldr	r3, [r3, #16]
 800c792:	2b00      	cmp	r3, #0
 800c794:	d110      	bne.n	800c7b8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	6a1b      	ldr	r3, [r3, #32]
 800c79a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	881b      	ldrh	r3, [r3, #0]
 800c7a0:	461a      	mov	r2, r3
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c7aa:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	6a1b      	ldr	r3, [r3, #32]
 800c7b0:	1c9a      	adds	r2, r3, #2
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	621a      	str	r2, [r3, #32]
 800c7b6:	e008      	b.n	800c7ca <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	6a1b      	ldr	r3, [r3, #32]
 800c7bc:	1c59      	adds	r1, r3, #1
 800c7be:	687a      	ldr	r2, [r7, #4]
 800c7c0:	6211      	str	r1, [r2, #32]
 800c7c2:	781a      	ldrb	r2, [r3, #0]
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	681b      	ldr	r3, [r3, #0]
 800c7c8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c7ce:	b29b      	uxth	r3, r3
 800c7d0:	3b01      	subs	r3, #1
 800c7d2:	b29b      	uxth	r3, r3
 800c7d4:	687a      	ldr	r2, [r7, #4]
 800c7d6:	4619      	mov	r1, r3
 800c7d8:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d10f      	bne.n	800c7fe <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	68da      	ldr	r2, [r3, #12]
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c7ec:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	681b      	ldr	r3, [r3, #0]
 800c7f2:	68da      	ldr	r2, [r3, #12]
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c7fc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c7fe:	2300      	movs	r3, #0
 800c800:	e000      	b.n	800c804 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c802:	2302      	movs	r3, #2
  }
}
 800c804:	4618      	mov	r0, r3
 800c806:	3714      	adds	r7, #20
 800c808:	46bd      	mov	sp, r7
 800c80a:	bc80      	pop	{r7}
 800c80c:	4770      	bx	lr

0800c80e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c80e:	b580      	push	{r7, lr}
 800c810:	b082      	sub	sp, #8
 800c812:	af00      	add	r7, sp, #0
 800c814:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	68da      	ldr	r2, [r3, #12]
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c824:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	2220      	movs	r2, #32
 800c82a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c82e:	6878      	ldr	r0, [r7, #4]
 800c830:	f7ff ff02 	bl	800c638 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c834:	2300      	movs	r3, #0
}
 800c836:	4618      	mov	r0, r3
 800c838:	3708      	adds	r7, #8
 800c83a:	46bd      	mov	sp, r7
 800c83c:	bd80      	pop	{r7, pc}

0800c83e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c83e:	b580      	push	{r7, lr}
 800c840:	b08c      	sub	sp, #48	; 0x30
 800c842:	af00      	add	r7, sp, #0
 800c844:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800c84c:	b2db      	uxtb	r3, r3
 800c84e:	2b22      	cmp	r3, #34	; 0x22
 800c850:	f040 80ae 	bne.w	800c9b0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	689b      	ldr	r3, [r3, #8]
 800c858:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c85c:	d117      	bne.n	800c88e <UART_Receive_IT+0x50>
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	691b      	ldr	r3, [r3, #16]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d113      	bne.n	800c88e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c866:	2300      	movs	r3, #0
 800c868:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c86e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	685b      	ldr	r3, [r3, #4]
 800c876:	b29b      	uxth	r3, r3
 800c878:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c87c:	b29a      	uxth	r2, r3
 800c87e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c880:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c886:	1c9a      	adds	r2, r3, #2
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	629a      	str	r2, [r3, #40]	; 0x28
 800c88c:	e026      	b.n	800c8dc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c892:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c894:	2300      	movs	r3, #0
 800c896:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c898:	687b      	ldr	r3, [r7, #4]
 800c89a:	689b      	ldr	r3, [r3, #8]
 800c89c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c8a0:	d007      	beq.n	800c8b2 <UART_Receive_IT+0x74>
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	689b      	ldr	r3, [r3, #8]
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d10a      	bne.n	800c8c0 <UART_Receive_IT+0x82>
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	691b      	ldr	r3, [r3, #16]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d106      	bne.n	800c8c0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	685b      	ldr	r3, [r3, #4]
 800c8b8:	b2da      	uxtb	r2, r3
 800c8ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8bc:	701a      	strb	r2, [r3, #0]
 800c8be:	e008      	b.n	800c8d2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	681b      	ldr	r3, [r3, #0]
 800c8c4:	685b      	ldr	r3, [r3, #4]
 800c8c6:	b2db      	uxtb	r3, r3
 800c8c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c8cc:	b2da      	uxtb	r2, r3
 800c8ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8d0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c8d2:	687b      	ldr	r3, [r7, #4]
 800c8d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8d6:	1c5a      	adds	r2, r3, #1
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c8e0:	b29b      	uxth	r3, r3
 800c8e2:	3b01      	subs	r3, #1
 800c8e4:	b29b      	uxth	r3, r3
 800c8e6:	687a      	ldr	r2, [r7, #4]
 800c8e8:	4619      	mov	r1, r3
 800c8ea:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d15d      	bne.n	800c9ac <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	68da      	ldr	r2, [r3, #12]
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	f022 0220 	bic.w	r2, r2, #32
 800c8fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	68da      	ldr	r2, [r3, #12]
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c90e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	695a      	ldr	r2, [r3, #20]
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	f022 0201 	bic.w	r2, r2, #1
 800c91e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	2220      	movs	r2, #32
 800c924:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	2200      	movs	r2, #0
 800c92c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c932:	2b01      	cmp	r3, #1
 800c934:	d135      	bne.n	800c9a2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	2200      	movs	r2, #0
 800c93a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	681b      	ldr	r3, [r3, #0]
 800c940:	330c      	adds	r3, #12
 800c942:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c944:	697b      	ldr	r3, [r7, #20]
 800c946:	e853 3f00 	ldrex	r3, [r3]
 800c94a:	613b      	str	r3, [r7, #16]
   return(result);
 800c94c:	693b      	ldr	r3, [r7, #16]
 800c94e:	f023 0310 	bic.w	r3, r3, #16
 800c952:	627b      	str	r3, [r7, #36]	; 0x24
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	330c      	adds	r3, #12
 800c95a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c95c:	623a      	str	r2, [r7, #32]
 800c95e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c960:	69f9      	ldr	r1, [r7, #28]
 800c962:	6a3a      	ldr	r2, [r7, #32]
 800c964:	e841 2300 	strex	r3, r2, [r1]
 800c968:	61bb      	str	r3, [r7, #24]
   return(result);
 800c96a:	69bb      	ldr	r3, [r7, #24]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d1e5      	bne.n	800c93c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	f003 0310 	and.w	r3, r3, #16
 800c97a:	2b10      	cmp	r3, #16
 800c97c:	d10a      	bne.n	800c994 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c97e:	2300      	movs	r3, #0
 800c980:	60fb      	str	r3, [r7, #12]
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	60fb      	str	r3, [r7, #12]
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	685b      	ldr	r3, [r3, #4]
 800c990:	60fb      	str	r3, [r7, #12]
 800c992:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800c998:	4619      	mov	r1, r3
 800c99a:	6878      	ldr	r0, [r7, #4]
 800c99c:	f7ff fe67 	bl	800c66e <HAL_UARTEx_RxEventCallback>
 800c9a0:	e002      	b.n	800c9a8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800c9a2:	6878      	ldr	r0, [r7, #4]
 800c9a4:	f7ff fe51 	bl	800c64a <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c9a8:	2300      	movs	r3, #0
 800c9aa:	e002      	b.n	800c9b2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	e000      	b.n	800c9b2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800c9b0:	2302      	movs	r3, #2
  }
}
 800c9b2:	4618      	mov	r0, r3
 800c9b4:	3730      	adds	r7, #48	; 0x30
 800c9b6:	46bd      	mov	sp, r7
 800c9b8:	bd80      	pop	{r7, pc}
	...

0800c9bc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b084      	sub	sp, #16
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	691b      	ldr	r3, [r3, #16]
 800c9ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	68da      	ldr	r2, [r3, #12]
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	430a      	orrs	r2, r1
 800c9d8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	689a      	ldr	r2, [r3, #8]
 800c9de:	687b      	ldr	r3, [r7, #4]
 800c9e0:	691b      	ldr	r3, [r3, #16]
 800c9e2:	431a      	orrs	r2, r3
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	695b      	ldr	r3, [r3, #20]
 800c9e8:	4313      	orrs	r3, r2
 800c9ea:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	68db      	ldr	r3, [r3, #12]
 800c9f2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800c9f6:	f023 030c 	bic.w	r3, r3, #12
 800c9fa:	687a      	ldr	r2, [r7, #4]
 800c9fc:	6812      	ldr	r2, [r2, #0]
 800c9fe:	68b9      	ldr	r1, [r7, #8]
 800ca00:	430b      	orrs	r3, r1
 800ca02:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	695b      	ldr	r3, [r3, #20]
 800ca0a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	699a      	ldr	r2, [r3, #24]
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	430a      	orrs	r2, r1
 800ca18:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	4a2c      	ldr	r2, [pc, #176]	; (800cad0 <UART_SetConfig+0x114>)
 800ca20:	4293      	cmp	r3, r2
 800ca22:	d103      	bne.n	800ca2c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800ca24:	f7fe fe8c 	bl	800b740 <HAL_RCC_GetPCLK2Freq>
 800ca28:	60f8      	str	r0, [r7, #12]
 800ca2a:	e002      	b.n	800ca32 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800ca2c:	f7fe fe74 	bl	800b718 <HAL_RCC_GetPCLK1Freq>
 800ca30:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800ca32:	68fa      	ldr	r2, [r7, #12]
 800ca34:	4613      	mov	r3, r2
 800ca36:	009b      	lsls	r3, r3, #2
 800ca38:	4413      	add	r3, r2
 800ca3a:	009a      	lsls	r2, r3, #2
 800ca3c:	441a      	add	r2, r3
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	685b      	ldr	r3, [r3, #4]
 800ca42:	009b      	lsls	r3, r3, #2
 800ca44:	fbb2 f3f3 	udiv	r3, r2, r3
 800ca48:	4a22      	ldr	r2, [pc, #136]	; (800cad4 <UART_SetConfig+0x118>)
 800ca4a:	fba2 2303 	umull	r2, r3, r2, r3
 800ca4e:	095b      	lsrs	r3, r3, #5
 800ca50:	0119      	lsls	r1, r3, #4
 800ca52:	68fa      	ldr	r2, [r7, #12]
 800ca54:	4613      	mov	r3, r2
 800ca56:	009b      	lsls	r3, r3, #2
 800ca58:	4413      	add	r3, r2
 800ca5a:	009a      	lsls	r2, r3, #2
 800ca5c:	441a      	add	r2, r3
 800ca5e:	687b      	ldr	r3, [r7, #4]
 800ca60:	685b      	ldr	r3, [r3, #4]
 800ca62:	009b      	lsls	r3, r3, #2
 800ca64:	fbb2 f2f3 	udiv	r2, r2, r3
 800ca68:	4b1a      	ldr	r3, [pc, #104]	; (800cad4 <UART_SetConfig+0x118>)
 800ca6a:	fba3 0302 	umull	r0, r3, r3, r2
 800ca6e:	095b      	lsrs	r3, r3, #5
 800ca70:	2064      	movs	r0, #100	; 0x64
 800ca72:	fb00 f303 	mul.w	r3, r0, r3
 800ca76:	1ad3      	subs	r3, r2, r3
 800ca78:	011b      	lsls	r3, r3, #4
 800ca7a:	3332      	adds	r3, #50	; 0x32
 800ca7c:	4a15      	ldr	r2, [pc, #84]	; (800cad4 <UART_SetConfig+0x118>)
 800ca7e:	fba2 2303 	umull	r2, r3, r2, r3
 800ca82:	095b      	lsrs	r3, r3, #5
 800ca84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ca88:	4419      	add	r1, r3
 800ca8a:	68fa      	ldr	r2, [r7, #12]
 800ca8c:	4613      	mov	r3, r2
 800ca8e:	009b      	lsls	r3, r3, #2
 800ca90:	4413      	add	r3, r2
 800ca92:	009a      	lsls	r2, r3, #2
 800ca94:	441a      	add	r2, r3
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	685b      	ldr	r3, [r3, #4]
 800ca9a:	009b      	lsls	r3, r3, #2
 800ca9c:	fbb2 f2f3 	udiv	r2, r2, r3
 800caa0:	4b0c      	ldr	r3, [pc, #48]	; (800cad4 <UART_SetConfig+0x118>)
 800caa2:	fba3 0302 	umull	r0, r3, r3, r2
 800caa6:	095b      	lsrs	r3, r3, #5
 800caa8:	2064      	movs	r0, #100	; 0x64
 800caaa:	fb00 f303 	mul.w	r3, r0, r3
 800caae:	1ad3      	subs	r3, r2, r3
 800cab0:	011b      	lsls	r3, r3, #4
 800cab2:	3332      	adds	r3, #50	; 0x32
 800cab4:	4a07      	ldr	r2, [pc, #28]	; (800cad4 <UART_SetConfig+0x118>)
 800cab6:	fba2 2303 	umull	r2, r3, r2, r3
 800caba:	095b      	lsrs	r3, r3, #5
 800cabc:	f003 020f 	and.w	r2, r3, #15
 800cac0:	687b      	ldr	r3, [r7, #4]
 800cac2:	681b      	ldr	r3, [r3, #0]
 800cac4:	440a      	add	r2, r1
 800cac6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800cac8:	bf00      	nop
 800caca:	3710      	adds	r7, #16
 800cacc:	46bd      	mov	sp, r7
 800cace:	bd80      	pop	{r7, pc}
 800cad0:	40013800 	.word	0x40013800
 800cad4:	51eb851f 	.word	0x51eb851f

0800cad8 <__itoa>:
 800cad8:	1e93      	subs	r3, r2, #2
 800cada:	2b22      	cmp	r3, #34	; 0x22
 800cadc:	b510      	push	{r4, lr}
 800cade:	460c      	mov	r4, r1
 800cae0:	d904      	bls.n	800caec <__itoa+0x14>
 800cae2:	2300      	movs	r3, #0
 800cae4:	461c      	mov	r4, r3
 800cae6:	700b      	strb	r3, [r1, #0]
 800cae8:	4620      	mov	r0, r4
 800caea:	bd10      	pop	{r4, pc}
 800caec:	2a0a      	cmp	r2, #10
 800caee:	d109      	bne.n	800cb04 <__itoa+0x2c>
 800caf0:	2800      	cmp	r0, #0
 800caf2:	da07      	bge.n	800cb04 <__itoa+0x2c>
 800caf4:	232d      	movs	r3, #45	; 0x2d
 800caf6:	700b      	strb	r3, [r1, #0]
 800caf8:	2101      	movs	r1, #1
 800cafa:	4240      	negs	r0, r0
 800cafc:	4421      	add	r1, r4
 800cafe:	f000 f8b9 	bl	800cc74 <__utoa>
 800cb02:	e7f1      	b.n	800cae8 <__itoa+0x10>
 800cb04:	2100      	movs	r1, #0
 800cb06:	e7f9      	b.n	800cafc <__itoa+0x24>

0800cb08 <itoa>:
 800cb08:	f7ff bfe6 	b.w	800cad8 <__itoa>

0800cb0c <malloc>:
 800cb0c:	4b02      	ldr	r3, [pc, #8]	; (800cb18 <malloc+0xc>)
 800cb0e:	4601      	mov	r1, r0
 800cb10:	6818      	ldr	r0, [r3, #0]
 800cb12:	f000 b823 	b.w	800cb5c <_malloc_r>
 800cb16:	bf00      	nop
 800cb18:	20000a0c 	.word	0x20000a0c

0800cb1c <sbrk_aligned>:
 800cb1c:	b570      	push	{r4, r5, r6, lr}
 800cb1e:	4e0e      	ldr	r6, [pc, #56]	; (800cb58 <sbrk_aligned+0x3c>)
 800cb20:	460c      	mov	r4, r1
 800cb22:	6831      	ldr	r1, [r6, #0]
 800cb24:	4605      	mov	r5, r0
 800cb26:	b911      	cbnz	r1, 800cb2e <sbrk_aligned+0x12>
 800cb28:	f000 f91e 	bl	800cd68 <_sbrk_r>
 800cb2c:	6030      	str	r0, [r6, #0]
 800cb2e:	4621      	mov	r1, r4
 800cb30:	4628      	mov	r0, r5
 800cb32:	f000 f919 	bl	800cd68 <_sbrk_r>
 800cb36:	1c43      	adds	r3, r0, #1
 800cb38:	d00a      	beq.n	800cb50 <sbrk_aligned+0x34>
 800cb3a:	1cc4      	adds	r4, r0, #3
 800cb3c:	f024 0403 	bic.w	r4, r4, #3
 800cb40:	42a0      	cmp	r0, r4
 800cb42:	d007      	beq.n	800cb54 <sbrk_aligned+0x38>
 800cb44:	1a21      	subs	r1, r4, r0
 800cb46:	4628      	mov	r0, r5
 800cb48:	f000 f90e 	bl	800cd68 <_sbrk_r>
 800cb4c:	3001      	adds	r0, #1
 800cb4e:	d101      	bne.n	800cb54 <sbrk_aligned+0x38>
 800cb50:	f04f 34ff 	mov.w	r4, #4294967295
 800cb54:	4620      	mov	r0, r4
 800cb56:	bd70      	pop	{r4, r5, r6, pc}
 800cb58:	20000ee8 	.word	0x20000ee8

0800cb5c <_malloc_r>:
 800cb5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb60:	1ccd      	adds	r5, r1, #3
 800cb62:	f025 0503 	bic.w	r5, r5, #3
 800cb66:	3508      	adds	r5, #8
 800cb68:	2d0c      	cmp	r5, #12
 800cb6a:	bf38      	it	cc
 800cb6c:	250c      	movcc	r5, #12
 800cb6e:	2d00      	cmp	r5, #0
 800cb70:	4607      	mov	r7, r0
 800cb72:	db01      	blt.n	800cb78 <_malloc_r+0x1c>
 800cb74:	42a9      	cmp	r1, r5
 800cb76:	d905      	bls.n	800cb84 <_malloc_r+0x28>
 800cb78:	230c      	movs	r3, #12
 800cb7a:	2600      	movs	r6, #0
 800cb7c:	603b      	str	r3, [r7, #0]
 800cb7e:	4630      	mov	r0, r6
 800cb80:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb84:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800cc58 <_malloc_r+0xfc>
 800cb88:	f000 f868 	bl	800cc5c <__malloc_lock>
 800cb8c:	f8d8 3000 	ldr.w	r3, [r8]
 800cb90:	461c      	mov	r4, r3
 800cb92:	bb5c      	cbnz	r4, 800cbec <_malloc_r+0x90>
 800cb94:	4629      	mov	r1, r5
 800cb96:	4638      	mov	r0, r7
 800cb98:	f7ff ffc0 	bl	800cb1c <sbrk_aligned>
 800cb9c:	1c43      	adds	r3, r0, #1
 800cb9e:	4604      	mov	r4, r0
 800cba0:	d155      	bne.n	800cc4e <_malloc_r+0xf2>
 800cba2:	f8d8 4000 	ldr.w	r4, [r8]
 800cba6:	4626      	mov	r6, r4
 800cba8:	2e00      	cmp	r6, #0
 800cbaa:	d145      	bne.n	800cc38 <_malloc_r+0xdc>
 800cbac:	2c00      	cmp	r4, #0
 800cbae:	d048      	beq.n	800cc42 <_malloc_r+0xe6>
 800cbb0:	6823      	ldr	r3, [r4, #0]
 800cbb2:	4631      	mov	r1, r6
 800cbb4:	4638      	mov	r0, r7
 800cbb6:	eb04 0903 	add.w	r9, r4, r3
 800cbba:	f000 f8d5 	bl	800cd68 <_sbrk_r>
 800cbbe:	4581      	cmp	r9, r0
 800cbc0:	d13f      	bne.n	800cc42 <_malloc_r+0xe6>
 800cbc2:	6821      	ldr	r1, [r4, #0]
 800cbc4:	4638      	mov	r0, r7
 800cbc6:	1a6d      	subs	r5, r5, r1
 800cbc8:	4629      	mov	r1, r5
 800cbca:	f7ff ffa7 	bl	800cb1c <sbrk_aligned>
 800cbce:	3001      	adds	r0, #1
 800cbd0:	d037      	beq.n	800cc42 <_malloc_r+0xe6>
 800cbd2:	6823      	ldr	r3, [r4, #0]
 800cbd4:	442b      	add	r3, r5
 800cbd6:	6023      	str	r3, [r4, #0]
 800cbd8:	f8d8 3000 	ldr.w	r3, [r8]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d038      	beq.n	800cc52 <_malloc_r+0xf6>
 800cbe0:	685a      	ldr	r2, [r3, #4]
 800cbe2:	42a2      	cmp	r2, r4
 800cbe4:	d12b      	bne.n	800cc3e <_malloc_r+0xe2>
 800cbe6:	2200      	movs	r2, #0
 800cbe8:	605a      	str	r2, [r3, #4]
 800cbea:	e00f      	b.n	800cc0c <_malloc_r+0xb0>
 800cbec:	6822      	ldr	r2, [r4, #0]
 800cbee:	1b52      	subs	r2, r2, r5
 800cbf0:	d41f      	bmi.n	800cc32 <_malloc_r+0xd6>
 800cbf2:	2a0b      	cmp	r2, #11
 800cbf4:	d917      	bls.n	800cc26 <_malloc_r+0xca>
 800cbf6:	1961      	adds	r1, r4, r5
 800cbf8:	42a3      	cmp	r3, r4
 800cbfa:	6025      	str	r5, [r4, #0]
 800cbfc:	bf18      	it	ne
 800cbfe:	6059      	strne	r1, [r3, #4]
 800cc00:	6863      	ldr	r3, [r4, #4]
 800cc02:	bf08      	it	eq
 800cc04:	f8c8 1000 	streq.w	r1, [r8]
 800cc08:	5162      	str	r2, [r4, r5]
 800cc0a:	604b      	str	r3, [r1, #4]
 800cc0c:	4638      	mov	r0, r7
 800cc0e:	f104 060b 	add.w	r6, r4, #11
 800cc12:	f000 f829 	bl	800cc68 <__malloc_unlock>
 800cc16:	f026 0607 	bic.w	r6, r6, #7
 800cc1a:	1d23      	adds	r3, r4, #4
 800cc1c:	1af2      	subs	r2, r6, r3
 800cc1e:	d0ae      	beq.n	800cb7e <_malloc_r+0x22>
 800cc20:	1b9b      	subs	r3, r3, r6
 800cc22:	50a3      	str	r3, [r4, r2]
 800cc24:	e7ab      	b.n	800cb7e <_malloc_r+0x22>
 800cc26:	42a3      	cmp	r3, r4
 800cc28:	6862      	ldr	r2, [r4, #4]
 800cc2a:	d1dd      	bne.n	800cbe8 <_malloc_r+0x8c>
 800cc2c:	f8c8 2000 	str.w	r2, [r8]
 800cc30:	e7ec      	b.n	800cc0c <_malloc_r+0xb0>
 800cc32:	4623      	mov	r3, r4
 800cc34:	6864      	ldr	r4, [r4, #4]
 800cc36:	e7ac      	b.n	800cb92 <_malloc_r+0x36>
 800cc38:	4634      	mov	r4, r6
 800cc3a:	6876      	ldr	r6, [r6, #4]
 800cc3c:	e7b4      	b.n	800cba8 <_malloc_r+0x4c>
 800cc3e:	4613      	mov	r3, r2
 800cc40:	e7cc      	b.n	800cbdc <_malloc_r+0x80>
 800cc42:	230c      	movs	r3, #12
 800cc44:	4638      	mov	r0, r7
 800cc46:	603b      	str	r3, [r7, #0]
 800cc48:	f000 f80e 	bl	800cc68 <__malloc_unlock>
 800cc4c:	e797      	b.n	800cb7e <_malloc_r+0x22>
 800cc4e:	6025      	str	r5, [r4, #0]
 800cc50:	e7dc      	b.n	800cc0c <_malloc_r+0xb0>
 800cc52:	605b      	str	r3, [r3, #4]
 800cc54:	deff      	udf	#255	; 0xff
 800cc56:	bf00      	nop
 800cc58:	20000ee4 	.word	0x20000ee4

0800cc5c <__malloc_lock>:
 800cc5c:	4801      	ldr	r0, [pc, #4]	; (800cc64 <__malloc_lock+0x8>)
 800cc5e:	f000 b8bd 	b.w	800cddc <__retarget_lock_acquire_recursive>
 800cc62:	bf00      	nop
 800cc64:	20001028 	.word	0x20001028

0800cc68 <__malloc_unlock>:
 800cc68:	4801      	ldr	r0, [pc, #4]	; (800cc70 <__malloc_unlock+0x8>)
 800cc6a:	f000 b8b8 	b.w	800cdde <__retarget_lock_release_recursive>
 800cc6e:	bf00      	nop
 800cc70:	20001028 	.word	0x20001028

0800cc74 <__utoa>:
 800cc74:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cc76:	b08b      	sub	sp, #44	; 0x2c
 800cc78:	4605      	mov	r5, r0
 800cc7a:	460b      	mov	r3, r1
 800cc7c:	466e      	mov	r6, sp
 800cc7e:	4c1d      	ldr	r4, [pc, #116]	; (800ccf4 <__utoa+0x80>)
 800cc80:	f104 0c20 	add.w	ip, r4, #32
 800cc84:	4637      	mov	r7, r6
 800cc86:	6820      	ldr	r0, [r4, #0]
 800cc88:	6861      	ldr	r1, [r4, #4]
 800cc8a:	3408      	adds	r4, #8
 800cc8c:	c703      	stmia	r7!, {r0, r1}
 800cc8e:	4564      	cmp	r4, ip
 800cc90:	463e      	mov	r6, r7
 800cc92:	d1f7      	bne.n	800cc84 <__utoa+0x10>
 800cc94:	7921      	ldrb	r1, [r4, #4]
 800cc96:	6820      	ldr	r0, [r4, #0]
 800cc98:	7139      	strb	r1, [r7, #4]
 800cc9a:	1e91      	subs	r1, r2, #2
 800cc9c:	2922      	cmp	r1, #34	; 0x22
 800cc9e:	6038      	str	r0, [r7, #0]
 800cca0:	f04f 0100 	mov.w	r1, #0
 800cca4:	d904      	bls.n	800ccb0 <__utoa+0x3c>
 800cca6:	7019      	strb	r1, [r3, #0]
 800cca8:	460b      	mov	r3, r1
 800ccaa:	4618      	mov	r0, r3
 800ccac:	b00b      	add	sp, #44	; 0x2c
 800ccae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ccb0:	1e58      	subs	r0, r3, #1
 800ccb2:	4684      	mov	ip, r0
 800ccb4:	fbb5 f7f2 	udiv	r7, r5, r2
 800ccb8:	fb02 5617 	mls	r6, r2, r7, r5
 800ccbc:	3628      	adds	r6, #40	; 0x28
 800ccbe:	446e      	add	r6, sp
 800ccc0:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800ccc4:	460c      	mov	r4, r1
 800ccc6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800ccca:	462e      	mov	r6, r5
 800cccc:	42b2      	cmp	r2, r6
 800ccce:	463d      	mov	r5, r7
 800ccd0:	f101 0101 	add.w	r1, r1, #1
 800ccd4:	d9ee      	bls.n	800ccb4 <__utoa+0x40>
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	545a      	strb	r2, [r3, r1]
 800ccda:	1919      	adds	r1, r3, r4
 800ccdc:	1aa5      	subs	r5, r4, r2
 800ccde:	42aa      	cmp	r2, r5
 800cce0:	dae3      	bge.n	800ccaa <__utoa+0x36>
 800cce2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800cce6:	780e      	ldrb	r6, [r1, #0]
 800cce8:	3201      	adds	r2, #1
 800ccea:	7006      	strb	r6, [r0, #0]
 800ccec:	f801 5901 	strb.w	r5, [r1], #-1
 800ccf0:	e7f4      	b.n	800ccdc <__utoa+0x68>
 800ccf2:	bf00      	nop
 800ccf4:	0800e3f6 	.word	0x0800e3f6

0800ccf8 <siprintf>:
 800ccf8:	b40e      	push	{r1, r2, r3}
 800ccfa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ccfe:	b500      	push	{lr}
 800cd00:	b09c      	sub	sp, #112	; 0x70
 800cd02:	ab1d      	add	r3, sp, #116	; 0x74
 800cd04:	9002      	str	r0, [sp, #8]
 800cd06:	9006      	str	r0, [sp, #24]
 800cd08:	9107      	str	r1, [sp, #28]
 800cd0a:	9104      	str	r1, [sp, #16]
 800cd0c:	4808      	ldr	r0, [pc, #32]	; (800cd30 <siprintf+0x38>)
 800cd0e:	4909      	ldr	r1, [pc, #36]	; (800cd34 <siprintf+0x3c>)
 800cd10:	f853 2b04 	ldr.w	r2, [r3], #4
 800cd14:	9105      	str	r1, [sp, #20]
 800cd16:	6800      	ldr	r0, [r0, #0]
 800cd18:	a902      	add	r1, sp, #8
 800cd1a:	9301      	str	r3, [sp, #4]
 800cd1c:	f000 f90a 	bl	800cf34 <_svfiprintf_r>
 800cd20:	2200      	movs	r2, #0
 800cd22:	9b02      	ldr	r3, [sp, #8]
 800cd24:	701a      	strb	r2, [r3, #0]
 800cd26:	b01c      	add	sp, #112	; 0x70
 800cd28:	f85d eb04 	ldr.w	lr, [sp], #4
 800cd2c:	b003      	add	sp, #12
 800cd2e:	4770      	bx	lr
 800cd30:	20000a0c 	.word	0x20000a0c
 800cd34:	ffff0208 	.word	0xffff0208

0800cd38 <memset>:
 800cd38:	4603      	mov	r3, r0
 800cd3a:	4402      	add	r2, r0
 800cd3c:	4293      	cmp	r3, r2
 800cd3e:	d100      	bne.n	800cd42 <memset+0xa>
 800cd40:	4770      	bx	lr
 800cd42:	f803 1b01 	strb.w	r1, [r3], #1
 800cd46:	e7f9      	b.n	800cd3c <memset+0x4>

0800cd48 <strcat>:
 800cd48:	4602      	mov	r2, r0
 800cd4a:	b510      	push	{r4, lr}
 800cd4c:	7814      	ldrb	r4, [r2, #0]
 800cd4e:	4613      	mov	r3, r2
 800cd50:	3201      	adds	r2, #1
 800cd52:	2c00      	cmp	r4, #0
 800cd54:	d1fa      	bne.n	800cd4c <strcat+0x4>
 800cd56:	3b01      	subs	r3, #1
 800cd58:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cd5c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cd60:	2a00      	cmp	r2, #0
 800cd62:	d1f9      	bne.n	800cd58 <strcat+0x10>
 800cd64:	bd10      	pop	{r4, pc}
	...

0800cd68 <_sbrk_r>:
 800cd68:	b538      	push	{r3, r4, r5, lr}
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	4d05      	ldr	r5, [pc, #20]	; (800cd84 <_sbrk_r+0x1c>)
 800cd6e:	4604      	mov	r4, r0
 800cd70:	4608      	mov	r0, r1
 800cd72:	602b      	str	r3, [r5, #0]
 800cd74:	f7fc f808 	bl	8008d88 <_sbrk>
 800cd78:	1c43      	adds	r3, r0, #1
 800cd7a:	d102      	bne.n	800cd82 <_sbrk_r+0x1a>
 800cd7c:	682b      	ldr	r3, [r5, #0]
 800cd7e:	b103      	cbz	r3, 800cd82 <_sbrk_r+0x1a>
 800cd80:	6023      	str	r3, [r4, #0]
 800cd82:	bd38      	pop	{r3, r4, r5, pc}
 800cd84:	20001024 	.word	0x20001024

0800cd88 <__errno>:
 800cd88:	4b01      	ldr	r3, [pc, #4]	; (800cd90 <__errno+0x8>)
 800cd8a:	6818      	ldr	r0, [r3, #0]
 800cd8c:	4770      	bx	lr
 800cd8e:	bf00      	nop
 800cd90:	20000a0c 	.word	0x20000a0c

0800cd94 <__libc_init_array>:
 800cd94:	b570      	push	{r4, r5, r6, lr}
 800cd96:	2600      	movs	r6, #0
 800cd98:	4d0c      	ldr	r5, [pc, #48]	; (800cdcc <__libc_init_array+0x38>)
 800cd9a:	4c0d      	ldr	r4, [pc, #52]	; (800cdd0 <__libc_init_array+0x3c>)
 800cd9c:	1b64      	subs	r4, r4, r5
 800cd9e:	10a4      	asrs	r4, r4, #2
 800cda0:	42a6      	cmp	r6, r4
 800cda2:	d109      	bne.n	800cdb8 <__libc_init_array+0x24>
 800cda4:	f000 fbc6 	bl	800d534 <_init>
 800cda8:	2600      	movs	r6, #0
 800cdaa:	4d0a      	ldr	r5, [pc, #40]	; (800cdd4 <__libc_init_array+0x40>)
 800cdac:	4c0a      	ldr	r4, [pc, #40]	; (800cdd8 <__libc_init_array+0x44>)
 800cdae:	1b64      	subs	r4, r4, r5
 800cdb0:	10a4      	asrs	r4, r4, #2
 800cdb2:	42a6      	cmp	r6, r4
 800cdb4:	d105      	bne.n	800cdc2 <__libc_init_array+0x2e>
 800cdb6:	bd70      	pop	{r4, r5, r6, pc}
 800cdb8:	f855 3b04 	ldr.w	r3, [r5], #4
 800cdbc:	4798      	blx	r3
 800cdbe:	3601      	adds	r6, #1
 800cdc0:	e7ee      	b.n	800cda0 <__libc_init_array+0xc>
 800cdc2:	f855 3b04 	ldr.w	r3, [r5], #4
 800cdc6:	4798      	blx	r3
 800cdc8:	3601      	adds	r6, #1
 800cdca:	e7f2      	b.n	800cdb2 <__libc_init_array+0x1e>
 800cdcc:	0800e450 	.word	0x0800e450
 800cdd0:	0800e450 	.word	0x0800e450
 800cdd4:	0800e450 	.word	0x0800e450
 800cdd8:	0800e454 	.word	0x0800e454

0800cddc <__retarget_lock_acquire_recursive>:
 800cddc:	4770      	bx	lr

0800cdde <__retarget_lock_release_recursive>:
 800cdde:	4770      	bx	lr

0800cde0 <strcpy>:
 800cde0:	4603      	mov	r3, r0
 800cde2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cde6:	f803 2b01 	strb.w	r2, [r3], #1
 800cdea:	2a00      	cmp	r2, #0
 800cdec:	d1f9      	bne.n	800cde2 <strcpy+0x2>
 800cdee:	4770      	bx	lr

0800cdf0 <_free_r>:
 800cdf0:	b538      	push	{r3, r4, r5, lr}
 800cdf2:	4605      	mov	r5, r0
 800cdf4:	2900      	cmp	r1, #0
 800cdf6:	d040      	beq.n	800ce7a <_free_r+0x8a>
 800cdf8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cdfc:	1f0c      	subs	r4, r1, #4
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	bfb8      	it	lt
 800ce02:	18e4      	addlt	r4, r4, r3
 800ce04:	f7ff ff2a 	bl	800cc5c <__malloc_lock>
 800ce08:	4a1c      	ldr	r2, [pc, #112]	; (800ce7c <_free_r+0x8c>)
 800ce0a:	6813      	ldr	r3, [r2, #0]
 800ce0c:	b933      	cbnz	r3, 800ce1c <_free_r+0x2c>
 800ce0e:	6063      	str	r3, [r4, #4]
 800ce10:	6014      	str	r4, [r2, #0]
 800ce12:	4628      	mov	r0, r5
 800ce14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce18:	f7ff bf26 	b.w	800cc68 <__malloc_unlock>
 800ce1c:	42a3      	cmp	r3, r4
 800ce1e:	d908      	bls.n	800ce32 <_free_r+0x42>
 800ce20:	6820      	ldr	r0, [r4, #0]
 800ce22:	1821      	adds	r1, r4, r0
 800ce24:	428b      	cmp	r3, r1
 800ce26:	bf01      	itttt	eq
 800ce28:	6819      	ldreq	r1, [r3, #0]
 800ce2a:	685b      	ldreq	r3, [r3, #4]
 800ce2c:	1809      	addeq	r1, r1, r0
 800ce2e:	6021      	streq	r1, [r4, #0]
 800ce30:	e7ed      	b.n	800ce0e <_free_r+0x1e>
 800ce32:	461a      	mov	r2, r3
 800ce34:	685b      	ldr	r3, [r3, #4]
 800ce36:	b10b      	cbz	r3, 800ce3c <_free_r+0x4c>
 800ce38:	42a3      	cmp	r3, r4
 800ce3a:	d9fa      	bls.n	800ce32 <_free_r+0x42>
 800ce3c:	6811      	ldr	r1, [r2, #0]
 800ce3e:	1850      	adds	r0, r2, r1
 800ce40:	42a0      	cmp	r0, r4
 800ce42:	d10b      	bne.n	800ce5c <_free_r+0x6c>
 800ce44:	6820      	ldr	r0, [r4, #0]
 800ce46:	4401      	add	r1, r0
 800ce48:	1850      	adds	r0, r2, r1
 800ce4a:	4283      	cmp	r3, r0
 800ce4c:	6011      	str	r1, [r2, #0]
 800ce4e:	d1e0      	bne.n	800ce12 <_free_r+0x22>
 800ce50:	6818      	ldr	r0, [r3, #0]
 800ce52:	685b      	ldr	r3, [r3, #4]
 800ce54:	4408      	add	r0, r1
 800ce56:	6010      	str	r0, [r2, #0]
 800ce58:	6053      	str	r3, [r2, #4]
 800ce5a:	e7da      	b.n	800ce12 <_free_r+0x22>
 800ce5c:	d902      	bls.n	800ce64 <_free_r+0x74>
 800ce5e:	230c      	movs	r3, #12
 800ce60:	602b      	str	r3, [r5, #0]
 800ce62:	e7d6      	b.n	800ce12 <_free_r+0x22>
 800ce64:	6820      	ldr	r0, [r4, #0]
 800ce66:	1821      	adds	r1, r4, r0
 800ce68:	428b      	cmp	r3, r1
 800ce6a:	bf01      	itttt	eq
 800ce6c:	6819      	ldreq	r1, [r3, #0]
 800ce6e:	685b      	ldreq	r3, [r3, #4]
 800ce70:	1809      	addeq	r1, r1, r0
 800ce72:	6021      	streq	r1, [r4, #0]
 800ce74:	6063      	str	r3, [r4, #4]
 800ce76:	6054      	str	r4, [r2, #4]
 800ce78:	e7cb      	b.n	800ce12 <_free_r+0x22>
 800ce7a:	bd38      	pop	{r3, r4, r5, pc}
 800ce7c:	20000ee4 	.word	0x20000ee4

0800ce80 <__ssputs_r>:
 800ce80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce84:	461f      	mov	r7, r3
 800ce86:	688e      	ldr	r6, [r1, #8]
 800ce88:	4682      	mov	sl, r0
 800ce8a:	42be      	cmp	r6, r7
 800ce8c:	460c      	mov	r4, r1
 800ce8e:	4690      	mov	r8, r2
 800ce90:	680b      	ldr	r3, [r1, #0]
 800ce92:	d82c      	bhi.n	800ceee <__ssputs_r+0x6e>
 800ce94:	898a      	ldrh	r2, [r1, #12]
 800ce96:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ce9a:	d026      	beq.n	800ceea <__ssputs_r+0x6a>
 800ce9c:	6965      	ldr	r5, [r4, #20]
 800ce9e:	6909      	ldr	r1, [r1, #16]
 800cea0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cea4:	eba3 0901 	sub.w	r9, r3, r1
 800cea8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ceac:	1c7b      	adds	r3, r7, #1
 800ceae:	444b      	add	r3, r9
 800ceb0:	106d      	asrs	r5, r5, #1
 800ceb2:	429d      	cmp	r5, r3
 800ceb4:	bf38      	it	cc
 800ceb6:	461d      	movcc	r5, r3
 800ceb8:	0553      	lsls	r3, r2, #21
 800ceba:	d527      	bpl.n	800cf0c <__ssputs_r+0x8c>
 800cebc:	4629      	mov	r1, r5
 800cebe:	f7ff fe4d 	bl	800cb5c <_malloc_r>
 800cec2:	4606      	mov	r6, r0
 800cec4:	b360      	cbz	r0, 800cf20 <__ssputs_r+0xa0>
 800cec6:	464a      	mov	r2, r9
 800cec8:	6921      	ldr	r1, [r4, #16]
 800ceca:	f000 faed 	bl	800d4a8 <memcpy>
 800cece:	89a3      	ldrh	r3, [r4, #12]
 800ced0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ced4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ced8:	81a3      	strh	r3, [r4, #12]
 800ceda:	6126      	str	r6, [r4, #16]
 800cedc:	444e      	add	r6, r9
 800cede:	6026      	str	r6, [r4, #0]
 800cee0:	463e      	mov	r6, r7
 800cee2:	6165      	str	r5, [r4, #20]
 800cee4:	eba5 0509 	sub.w	r5, r5, r9
 800cee8:	60a5      	str	r5, [r4, #8]
 800ceea:	42be      	cmp	r6, r7
 800ceec:	d900      	bls.n	800cef0 <__ssputs_r+0x70>
 800ceee:	463e      	mov	r6, r7
 800cef0:	4632      	mov	r2, r6
 800cef2:	4641      	mov	r1, r8
 800cef4:	6820      	ldr	r0, [r4, #0]
 800cef6:	f000 faaf 	bl	800d458 <memmove>
 800cefa:	2000      	movs	r0, #0
 800cefc:	68a3      	ldr	r3, [r4, #8]
 800cefe:	1b9b      	subs	r3, r3, r6
 800cf00:	60a3      	str	r3, [r4, #8]
 800cf02:	6823      	ldr	r3, [r4, #0]
 800cf04:	4433      	add	r3, r6
 800cf06:	6023      	str	r3, [r4, #0]
 800cf08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf0c:	462a      	mov	r2, r5
 800cf0e:	f000 fad9 	bl	800d4c4 <_realloc_r>
 800cf12:	4606      	mov	r6, r0
 800cf14:	2800      	cmp	r0, #0
 800cf16:	d1e0      	bne.n	800ceda <__ssputs_r+0x5a>
 800cf18:	4650      	mov	r0, sl
 800cf1a:	6921      	ldr	r1, [r4, #16]
 800cf1c:	f7ff ff68 	bl	800cdf0 <_free_r>
 800cf20:	230c      	movs	r3, #12
 800cf22:	f8ca 3000 	str.w	r3, [sl]
 800cf26:	89a3      	ldrh	r3, [r4, #12]
 800cf28:	f04f 30ff 	mov.w	r0, #4294967295
 800cf2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cf30:	81a3      	strh	r3, [r4, #12]
 800cf32:	e7e9      	b.n	800cf08 <__ssputs_r+0x88>

0800cf34 <_svfiprintf_r>:
 800cf34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf38:	4698      	mov	r8, r3
 800cf3a:	898b      	ldrh	r3, [r1, #12]
 800cf3c:	4607      	mov	r7, r0
 800cf3e:	061b      	lsls	r3, r3, #24
 800cf40:	460d      	mov	r5, r1
 800cf42:	4614      	mov	r4, r2
 800cf44:	b09d      	sub	sp, #116	; 0x74
 800cf46:	d50e      	bpl.n	800cf66 <_svfiprintf_r+0x32>
 800cf48:	690b      	ldr	r3, [r1, #16]
 800cf4a:	b963      	cbnz	r3, 800cf66 <_svfiprintf_r+0x32>
 800cf4c:	2140      	movs	r1, #64	; 0x40
 800cf4e:	f7ff fe05 	bl	800cb5c <_malloc_r>
 800cf52:	6028      	str	r0, [r5, #0]
 800cf54:	6128      	str	r0, [r5, #16]
 800cf56:	b920      	cbnz	r0, 800cf62 <_svfiprintf_r+0x2e>
 800cf58:	230c      	movs	r3, #12
 800cf5a:	603b      	str	r3, [r7, #0]
 800cf5c:	f04f 30ff 	mov.w	r0, #4294967295
 800cf60:	e0d0      	b.n	800d104 <_svfiprintf_r+0x1d0>
 800cf62:	2340      	movs	r3, #64	; 0x40
 800cf64:	616b      	str	r3, [r5, #20]
 800cf66:	2300      	movs	r3, #0
 800cf68:	9309      	str	r3, [sp, #36]	; 0x24
 800cf6a:	2320      	movs	r3, #32
 800cf6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cf70:	2330      	movs	r3, #48	; 0x30
 800cf72:	f04f 0901 	mov.w	r9, #1
 800cf76:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf7a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800d11c <_svfiprintf_r+0x1e8>
 800cf7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cf82:	4623      	mov	r3, r4
 800cf84:	469a      	mov	sl, r3
 800cf86:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf8a:	b10a      	cbz	r2, 800cf90 <_svfiprintf_r+0x5c>
 800cf8c:	2a25      	cmp	r2, #37	; 0x25
 800cf8e:	d1f9      	bne.n	800cf84 <_svfiprintf_r+0x50>
 800cf90:	ebba 0b04 	subs.w	fp, sl, r4
 800cf94:	d00b      	beq.n	800cfae <_svfiprintf_r+0x7a>
 800cf96:	465b      	mov	r3, fp
 800cf98:	4622      	mov	r2, r4
 800cf9a:	4629      	mov	r1, r5
 800cf9c:	4638      	mov	r0, r7
 800cf9e:	f7ff ff6f 	bl	800ce80 <__ssputs_r>
 800cfa2:	3001      	adds	r0, #1
 800cfa4:	f000 80a9 	beq.w	800d0fa <_svfiprintf_r+0x1c6>
 800cfa8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cfaa:	445a      	add	r2, fp
 800cfac:	9209      	str	r2, [sp, #36]	; 0x24
 800cfae:	f89a 3000 	ldrb.w	r3, [sl]
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	f000 80a1 	beq.w	800d0fa <_svfiprintf_r+0x1c6>
 800cfb8:	2300      	movs	r3, #0
 800cfba:	f04f 32ff 	mov.w	r2, #4294967295
 800cfbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cfc2:	f10a 0a01 	add.w	sl, sl, #1
 800cfc6:	9304      	str	r3, [sp, #16]
 800cfc8:	9307      	str	r3, [sp, #28]
 800cfca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cfce:	931a      	str	r3, [sp, #104]	; 0x68
 800cfd0:	4654      	mov	r4, sl
 800cfd2:	2205      	movs	r2, #5
 800cfd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfd8:	4850      	ldr	r0, [pc, #320]	; (800d11c <_svfiprintf_r+0x1e8>)
 800cfda:	f000 fa57 	bl	800d48c <memchr>
 800cfde:	9a04      	ldr	r2, [sp, #16]
 800cfe0:	b9d8      	cbnz	r0, 800d01a <_svfiprintf_r+0xe6>
 800cfe2:	06d0      	lsls	r0, r2, #27
 800cfe4:	bf44      	itt	mi
 800cfe6:	2320      	movmi	r3, #32
 800cfe8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cfec:	0711      	lsls	r1, r2, #28
 800cfee:	bf44      	itt	mi
 800cff0:	232b      	movmi	r3, #43	; 0x2b
 800cff2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cff6:	f89a 3000 	ldrb.w	r3, [sl]
 800cffa:	2b2a      	cmp	r3, #42	; 0x2a
 800cffc:	d015      	beq.n	800d02a <_svfiprintf_r+0xf6>
 800cffe:	4654      	mov	r4, sl
 800d000:	2000      	movs	r0, #0
 800d002:	f04f 0c0a 	mov.w	ip, #10
 800d006:	9a07      	ldr	r2, [sp, #28]
 800d008:	4621      	mov	r1, r4
 800d00a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d00e:	3b30      	subs	r3, #48	; 0x30
 800d010:	2b09      	cmp	r3, #9
 800d012:	d94d      	bls.n	800d0b0 <_svfiprintf_r+0x17c>
 800d014:	b1b0      	cbz	r0, 800d044 <_svfiprintf_r+0x110>
 800d016:	9207      	str	r2, [sp, #28]
 800d018:	e014      	b.n	800d044 <_svfiprintf_r+0x110>
 800d01a:	eba0 0308 	sub.w	r3, r0, r8
 800d01e:	fa09 f303 	lsl.w	r3, r9, r3
 800d022:	4313      	orrs	r3, r2
 800d024:	46a2      	mov	sl, r4
 800d026:	9304      	str	r3, [sp, #16]
 800d028:	e7d2      	b.n	800cfd0 <_svfiprintf_r+0x9c>
 800d02a:	9b03      	ldr	r3, [sp, #12]
 800d02c:	1d19      	adds	r1, r3, #4
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	9103      	str	r1, [sp, #12]
 800d032:	2b00      	cmp	r3, #0
 800d034:	bfbb      	ittet	lt
 800d036:	425b      	neglt	r3, r3
 800d038:	f042 0202 	orrlt.w	r2, r2, #2
 800d03c:	9307      	strge	r3, [sp, #28]
 800d03e:	9307      	strlt	r3, [sp, #28]
 800d040:	bfb8      	it	lt
 800d042:	9204      	strlt	r2, [sp, #16]
 800d044:	7823      	ldrb	r3, [r4, #0]
 800d046:	2b2e      	cmp	r3, #46	; 0x2e
 800d048:	d10c      	bne.n	800d064 <_svfiprintf_r+0x130>
 800d04a:	7863      	ldrb	r3, [r4, #1]
 800d04c:	2b2a      	cmp	r3, #42	; 0x2a
 800d04e:	d134      	bne.n	800d0ba <_svfiprintf_r+0x186>
 800d050:	9b03      	ldr	r3, [sp, #12]
 800d052:	3402      	adds	r4, #2
 800d054:	1d1a      	adds	r2, r3, #4
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	9203      	str	r2, [sp, #12]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	bfb8      	it	lt
 800d05e:	f04f 33ff 	movlt.w	r3, #4294967295
 800d062:	9305      	str	r3, [sp, #20]
 800d064:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800d120 <_svfiprintf_r+0x1ec>
 800d068:	2203      	movs	r2, #3
 800d06a:	4650      	mov	r0, sl
 800d06c:	7821      	ldrb	r1, [r4, #0]
 800d06e:	f000 fa0d 	bl	800d48c <memchr>
 800d072:	b138      	cbz	r0, 800d084 <_svfiprintf_r+0x150>
 800d074:	2240      	movs	r2, #64	; 0x40
 800d076:	9b04      	ldr	r3, [sp, #16]
 800d078:	eba0 000a 	sub.w	r0, r0, sl
 800d07c:	4082      	lsls	r2, r0
 800d07e:	4313      	orrs	r3, r2
 800d080:	3401      	adds	r4, #1
 800d082:	9304      	str	r3, [sp, #16]
 800d084:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d088:	2206      	movs	r2, #6
 800d08a:	4826      	ldr	r0, [pc, #152]	; (800d124 <_svfiprintf_r+0x1f0>)
 800d08c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d090:	f000 f9fc 	bl	800d48c <memchr>
 800d094:	2800      	cmp	r0, #0
 800d096:	d038      	beq.n	800d10a <_svfiprintf_r+0x1d6>
 800d098:	4b23      	ldr	r3, [pc, #140]	; (800d128 <_svfiprintf_r+0x1f4>)
 800d09a:	bb1b      	cbnz	r3, 800d0e4 <_svfiprintf_r+0x1b0>
 800d09c:	9b03      	ldr	r3, [sp, #12]
 800d09e:	3307      	adds	r3, #7
 800d0a0:	f023 0307 	bic.w	r3, r3, #7
 800d0a4:	3308      	adds	r3, #8
 800d0a6:	9303      	str	r3, [sp, #12]
 800d0a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0aa:	4433      	add	r3, r6
 800d0ac:	9309      	str	r3, [sp, #36]	; 0x24
 800d0ae:	e768      	b.n	800cf82 <_svfiprintf_r+0x4e>
 800d0b0:	460c      	mov	r4, r1
 800d0b2:	2001      	movs	r0, #1
 800d0b4:	fb0c 3202 	mla	r2, ip, r2, r3
 800d0b8:	e7a6      	b.n	800d008 <_svfiprintf_r+0xd4>
 800d0ba:	2300      	movs	r3, #0
 800d0bc:	f04f 0c0a 	mov.w	ip, #10
 800d0c0:	4619      	mov	r1, r3
 800d0c2:	3401      	adds	r4, #1
 800d0c4:	9305      	str	r3, [sp, #20]
 800d0c6:	4620      	mov	r0, r4
 800d0c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d0cc:	3a30      	subs	r2, #48	; 0x30
 800d0ce:	2a09      	cmp	r2, #9
 800d0d0:	d903      	bls.n	800d0da <_svfiprintf_r+0x1a6>
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d0c6      	beq.n	800d064 <_svfiprintf_r+0x130>
 800d0d6:	9105      	str	r1, [sp, #20]
 800d0d8:	e7c4      	b.n	800d064 <_svfiprintf_r+0x130>
 800d0da:	4604      	mov	r4, r0
 800d0dc:	2301      	movs	r3, #1
 800d0de:	fb0c 2101 	mla	r1, ip, r1, r2
 800d0e2:	e7f0      	b.n	800d0c6 <_svfiprintf_r+0x192>
 800d0e4:	ab03      	add	r3, sp, #12
 800d0e6:	9300      	str	r3, [sp, #0]
 800d0e8:	462a      	mov	r2, r5
 800d0ea:	4638      	mov	r0, r7
 800d0ec:	4b0f      	ldr	r3, [pc, #60]	; (800d12c <_svfiprintf_r+0x1f8>)
 800d0ee:	a904      	add	r1, sp, #16
 800d0f0:	f3af 8000 	nop.w
 800d0f4:	1c42      	adds	r2, r0, #1
 800d0f6:	4606      	mov	r6, r0
 800d0f8:	d1d6      	bne.n	800d0a8 <_svfiprintf_r+0x174>
 800d0fa:	89ab      	ldrh	r3, [r5, #12]
 800d0fc:	065b      	lsls	r3, r3, #25
 800d0fe:	f53f af2d 	bmi.w	800cf5c <_svfiprintf_r+0x28>
 800d102:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d104:	b01d      	add	sp, #116	; 0x74
 800d106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d10a:	ab03      	add	r3, sp, #12
 800d10c:	9300      	str	r3, [sp, #0]
 800d10e:	462a      	mov	r2, r5
 800d110:	4638      	mov	r0, r7
 800d112:	4b06      	ldr	r3, [pc, #24]	; (800d12c <_svfiprintf_r+0x1f8>)
 800d114:	a904      	add	r1, sp, #16
 800d116:	f000 f87d 	bl	800d214 <_printf_i>
 800d11a:	e7eb      	b.n	800d0f4 <_svfiprintf_r+0x1c0>
 800d11c:	0800e41b 	.word	0x0800e41b
 800d120:	0800e421 	.word	0x0800e421
 800d124:	0800e425 	.word	0x0800e425
 800d128:	00000000 	.word	0x00000000
 800d12c:	0800ce81 	.word	0x0800ce81

0800d130 <_printf_common>:
 800d130:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d134:	4616      	mov	r6, r2
 800d136:	4699      	mov	r9, r3
 800d138:	688a      	ldr	r2, [r1, #8]
 800d13a:	690b      	ldr	r3, [r1, #16]
 800d13c:	4607      	mov	r7, r0
 800d13e:	4293      	cmp	r3, r2
 800d140:	bfb8      	it	lt
 800d142:	4613      	movlt	r3, r2
 800d144:	6033      	str	r3, [r6, #0]
 800d146:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d14a:	460c      	mov	r4, r1
 800d14c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d150:	b10a      	cbz	r2, 800d156 <_printf_common+0x26>
 800d152:	3301      	adds	r3, #1
 800d154:	6033      	str	r3, [r6, #0]
 800d156:	6823      	ldr	r3, [r4, #0]
 800d158:	0699      	lsls	r1, r3, #26
 800d15a:	bf42      	ittt	mi
 800d15c:	6833      	ldrmi	r3, [r6, #0]
 800d15e:	3302      	addmi	r3, #2
 800d160:	6033      	strmi	r3, [r6, #0]
 800d162:	6825      	ldr	r5, [r4, #0]
 800d164:	f015 0506 	ands.w	r5, r5, #6
 800d168:	d106      	bne.n	800d178 <_printf_common+0x48>
 800d16a:	f104 0a19 	add.w	sl, r4, #25
 800d16e:	68e3      	ldr	r3, [r4, #12]
 800d170:	6832      	ldr	r2, [r6, #0]
 800d172:	1a9b      	subs	r3, r3, r2
 800d174:	42ab      	cmp	r3, r5
 800d176:	dc2b      	bgt.n	800d1d0 <_printf_common+0xa0>
 800d178:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d17c:	1e13      	subs	r3, r2, #0
 800d17e:	6822      	ldr	r2, [r4, #0]
 800d180:	bf18      	it	ne
 800d182:	2301      	movne	r3, #1
 800d184:	0692      	lsls	r2, r2, #26
 800d186:	d430      	bmi.n	800d1ea <_printf_common+0xba>
 800d188:	4649      	mov	r1, r9
 800d18a:	4638      	mov	r0, r7
 800d18c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d190:	47c0      	blx	r8
 800d192:	3001      	adds	r0, #1
 800d194:	d023      	beq.n	800d1de <_printf_common+0xae>
 800d196:	6823      	ldr	r3, [r4, #0]
 800d198:	6922      	ldr	r2, [r4, #16]
 800d19a:	f003 0306 	and.w	r3, r3, #6
 800d19e:	2b04      	cmp	r3, #4
 800d1a0:	bf14      	ite	ne
 800d1a2:	2500      	movne	r5, #0
 800d1a4:	6833      	ldreq	r3, [r6, #0]
 800d1a6:	f04f 0600 	mov.w	r6, #0
 800d1aa:	bf08      	it	eq
 800d1ac:	68e5      	ldreq	r5, [r4, #12]
 800d1ae:	f104 041a 	add.w	r4, r4, #26
 800d1b2:	bf08      	it	eq
 800d1b4:	1aed      	subeq	r5, r5, r3
 800d1b6:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800d1ba:	bf08      	it	eq
 800d1bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d1c0:	4293      	cmp	r3, r2
 800d1c2:	bfc4      	itt	gt
 800d1c4:	1a9b      	subgt	r3, r3, r2
 800d1c6:	18ed      	addgt	r5, r5, r3
 800d1c8:	42b5      	cmp	r5, r6
 800d1ca:	d11a      	bne.n	800d202 <_printf_common+0xd2>
 800d1cc:	2000      	movs	r0, #0
 800d1ce:	e008      	b.n	800d1e2 <_printf_common+0xb2>
 800d1d0:	2301      	movs	r3, #1
 800d1d2:	4652      	mov	r2, sl
 800d1d4:	4649      	mov	r1, r9
 800d1d6:	4638      	mov	r0, r7
 800d1d8:	47c0      	blx	r8
 800d1da:	3001      	adds	r0, #1
 800d1dc:	d103      	bne.n	800d1e6 <_printf_common+0xb6>
 800d1de:	f04f 30ff 	mov.w	r0, #4294967295
 800d1e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1e6:	3501      	adds	r5, #1
 800d1e8:	e7c1      	b.n	800d16e <_printf_common+0x3e>
 800d1ea:	2030      	movs	r0, #48	; 0x30
 800d1ec:	18e1      	adds	r1, r4, r3
 800d1ee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d1f2:	1c5a      	adds	r2, r3, #1
 800d1f4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d1f8:	4422      	add	r2, r4
 800d1fa:	3302      	adds	r3, #2
 800d1fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d200:	e7c2      	b.n	800d188 <_printf_common+0x58>
 800d202:	2301      	movs	r3, #1
 800d204:	4622      	mov	r2, r4
 800d206:	4649      	mov	r1, r9
 800d208:	4638      	mov	r0, r7
 800d20a:	47c0      	blx	r8
 800d20c:	3001      	adds	r0, #1
 800d20e:	d0e6      	beq.n	800d1de <_printf_common+0xae>
 800d210:	3601      	adds	r6, #1
 800d212:	e7d9      	b.n	800d1c8 <_printf_common+0x98>

0800d214 <_printf_i>:
 800d214:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d218:	7e0f      	ldrb	r7, [r1, #24]
 800d21a:	4691      	mov	r9, r2
 800d21c:	2f78      	cmp	r7, #120	; 0x78
 800d21e:	4680      	mov	r8, r0
 800d220:	460c      	mov	r4, r1
 800d222:	469a      	mov	sl, r3
 800d224:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d226:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d22a:	d807      	bhi.n	800d23c <_printf_i+0x28>
 800d22c:	2f62      	cmp	r7, #98	; 0x62
 800d22e:	d80a      	bhi.n	800d246 <_printf_i+0x32>
 800d230:	2f00      	cmp	r7, #0
 800d232:	f000 80d5 	beq.w	800d3e0 <_printf_i+0x1cc>
 800d236:	2f58      	cmp	r7, #88	; 0x58
 800d238:	f000 80c1 	beq.w	800d3be <_printf_i+0x1aa>
 800d23c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d240:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d244:	e03a      	b.n	800d2bc <_printf_i+0xa8>
 800d246:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d24a:	2b15      	cmp	r3, #21
 800d24c:	d8f6      	bhi.n	800d23c <_printf_i+0x28>
 800d24e:	a101      	add	r1, pc, #4	; (adr r1, 800d254 <_printf_i+0x40>)
 800d250:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d254:	0800d2ad 	.word	0x0800d2ad
 800d258:	0800d2c1 	.word	0x0800d2c1
 800d25c:	0800d23d 	.word	0x0800d23d
 800d260:	0800d23d 	.word	0x0800d23d
 800d264:	0800d23d 	.word	0x0800d23d
 800d268:	0800d23d 	.word	0x0800d23d
 800d26c:	0800d2c1 	.word	0x0800d2c1
 800d270:	0800d23d 	.word	0x0800d23d
 800d274:	0800d23d 	.word	0x0800d23d
 800d278:	0800d23d 	.word	0x0800d23d
 800d27c:	0800d23d 	.word	0x0800d23d
 800d280:	0800d3c7 	.word	0x0800d3c7
 800d284:	0800d2ed 	.word	0x0800d2ed
 800d288:	0800d381 	.word	0x0800d381
 800d28c:	0800d23d 	.word	0x0800d23d
 800d290:	0800d23d 	.word	0x0800d23d
 800d294:	0800d3e9 	.word	0x0800d3e9
 800d298:	0800d23d 	.word	0x0800d23d
 800d29c:	0800d2ed 	.word	0x0800d2ed
 800d2a0:	0800d23d 	.word	0x0800d23d
 800d2a4:	0800d23d 	.word	0x0800d23d
 800d2a8:	0800d389 	.word	0x0800d389
 800d2ac:	682b      	ldr	r3, [r5, #0]
 800d2ae:	1d1a      	adds	r2, r3, #4
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	602a      	str	r2, [r5, #0]
 800d2b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d2b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d2bc:	2301      	movs	r3, #1
 800d2be:	e0a0      	b.n	800d402 <_printf_i+0x1ee>
 800d2c0:	6820      	ldr	r0, [r4, #0]
 800d2c2:	682b      	ldr	r3, [r5, #0]
 800d2c4:	0607      	lsls	r7, r0, #24
 800d2c6:	f103 0104 	add.w	r1, r3, #4
 800d2ca:	6029      	str	r1, [r5, #0]
 800d2cc:	d501      	bpl.n	800d2d2 <_printf_i+0xbe>
 800d2ce:	681e      	ldr	r6, [r3, #0]
 800d2d0:	e003      	b.n	800d2da <_printf_i+0xc6>
 800d2d2:	0646      	lsls	r6, r0, #25
 800d2d4:	d5fb      	bpl.n	800d2ce <_printf_i+0xba>
 800d2d6:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d2da:	2e00      	cmp	r6, #0
 800d2dc:	da03      	bge.n	800d2e6 <_printf_i+0xd2>
 800d2de:	232d      	movs	r3, #45	; 0x2d
 800d2e0:	4276      	negs	r6, r6
 800d2e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d2e6:	230a      	movs	r3, #10
 800d2e8:	4859      	ldr	r0, [pc, #356]	; (800d450 <_printf_i+0x23c>)
 800d2ea:	e012      	b.n	800d312 <_printf_i+0xfe>
 800d2ec:	682b      	ldr	r3, [r5, #0]
 800d2ee:	6820      	ldr	r0, [r4, #0]
 800d2f0:	1d19      	adds	r1, r3, #4
 800d2f2:	6029      	str	r1, [r5, #0]
 800d2f4:	0605      	lsls	r5, r0, #24
 800d2f6:	d501      	bpl.n	800d2fc <_printf_i+0xe8>
 800d2f8:	681e      	ldr	r6, [r3, #0]
 800d2fa:	e002      	b.n	800d302 <_printf_i+0xee>
 800d2fc:	0641      	lsls	r1, r0, #25
 800d2fe:	d5fb      	bpl.n	800d2f8 <_printf_i+0xe4>
 800d300:	881e      	ldrh	r6, [r3, #0]
 800d302:	2f6f      	cmp	r7, #111	; 0x6f
 800d304:	bf0c      	ite	eq
 800d306:	2308      	moveq	r3, #8
 800d308:	230a      	movne	r3, #10
 800d30a:	4851      	ldr	r0, [pc, #324]	; (800d450 <_printf_i+0x23c>)
 800d30c:	2100      	movs	r1, #0
 800d30e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d312:	6865      	ldr	r5, [r4, #4]
 800d314:	2d00      	cmp	r5, #0
 800d316:	bfa8      	it	ge
 800d318:	6821      	ldrge	r1, [r4, #0]
 800d31a:	60a5      	str	r5, [r4, #8]
 800d31c:	bfa4      	itt	ge
 800d31e:	f021 0104 	bicge.w	r1, r1, #4
 800d322:	6021      	strge	r1, [r4, #0]
 800d324:	b90e      	cbnz	r6, 800d32a <_printf_i+0x116>
 800d326:	2d00      	cmp	r5, #0
 800d328:	d04b      	beq.n	800d3c2 <_printf_i+0x1ae>
 800d32a:	4615      	mov	r5, r2
 800d32c:	fbb6 f1f3 	udiv	r1, r6, r3
 800d330:	fb03 6711 	mls	r7, r3, r1, r6
 800d334:	5dc7      	ldrb	r7, [r0, r7]
 800d336:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d33a:	4637      	mov	r7, r6
 800d33c:	42bb      	cmp	r3, r7
 800d33e:	460e      	mov	r6, r1
 800d340:	d9f4      	bls.n	800d32c <_printf_i+0x118>
 800d342:	2b08      	cmp	r3, #8
 800d344:	d10b      	bne.n	800d35e <_printf_i+0x14a>
 800d346:	6823      	ldr	r3, [r4, #0]
 800d348:	07de      	lsls	r6, r3, #31
 800d34a:	d508      	bpl.n	800d35e <_printf_i+0x14a>
 800d34c:	6923      	ldr	r3, [r4, #16]
 800d34e:	6861      	ldr	r1, [r4, #4]
 800d350:	4299      	cmp	r1, r3
 800d352:	bfde      	ittt	le
 800d354:	2330      	movle	r3, #48	; 0x30
 800d356:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d35a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d35e:	1b52      	subs	r2, r2, r5
 800d360:	6122      	str	r2, [r4, #16]
 800d362:	464b      	mov	r3, r9
 800d364:	4621      	mov	r1, r4
 800d366:	4640      	mov	r0, r8
 800d368:	f8cd a000 	str.w	sl, [sp]
 800d36c:	aa03      	add	r2, sp, #12
 800d36e:	f7ff fedf 	bl	800d130 <_printf_common>
 800d372:	3001      	adds	r0, #1
 800d374:	d14a      	bne.n	800d40c <_printf_i+0x1f8>
 800d376:	f04f 30ff 	mov.w	r0, #4294967295
 800d37a:	b004      	add	sp, #16
 800d37c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d380:	6823      	ldr	r3, [r4, #0]
 800d382:	f043 0320 	orr.w	r3, r3, #32
 800d386:	6023      	str	r3, [r4, #0]
 800d388:	2778      	movs	r7, #120	; 0x78
 800d38a:	4832      	ldr	r0, [pc, #200]	; (800d454 <_printf_i+0x240>)
 800d38c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d390:	6823      	ldr	r3, [r4, #0]
 800d392:	6829      	ldr	r1, [r5, #0]
 800d394:	061f      	lsls	r7, r3, #24
 800d396:	f851 6b04 	ldr.w	r6, [r1], #4
 800d39a:	d402      	bmi.n	800d3a2 <_printf_i+0x18e>
 800d39c:	065f      	lsls	r7, r3, #25
 800d39e:	bf48      	it	mi
 800d3a0:	b2b6      	uxthmi	r6, r6
 800d3a2:	07df      	lsls	r7, r3, #31
 800d3a4:	bf48      	it	mi
 800d3a6:	f043 0320 	orrmi.w	r3, r3, #32
 800d3aa:	6029      	str	r1, [r5, #0]
 800d3ac:	bf48      	it	mi
 800d3ae:	6023      	strmi	r3, [r4, #0]
 800d3b0:	b91e      	cbnz	r6, 800d3ba <_printf_i+0x1a6>
 800d3b2:	6823      	ldr	r3, [r4, #0]
 800d3b4:	f023 0320 	bic.w	r3, r3, #32
 800d3b8:	6023      	str	r3, [r4, #0]
 800d3ba:	2310      	movs	r3, #16
 800d3bc:	e7a6      	b.n	800d30c <_printf_i+0xf8>
 800d3be:	4824      	ldr	r0, [pc, #144]	; (800d450 <_printf_i+0x23c>)
 800d3c0:	e7e4      	b.n	800d38c <_printf_i+0x178>
 800d3c2:	4615      	mov	r5, r2
 800d3c4:	e7bd      	b.n	800d342 <_printf_i+0x12e>
 800d3c6:	682b      	ldr	r3, [r5, #0]
 800d3c8:	6826      	ldr	r6, [r4, #0]
 800d3ca:	1d18      	adds	r0, r3, #4
 800d3cc:	6961      	ldr	r1, [r4, #20]
 800d3ce:	6028      	str	r0, [r5, #0]
 800d3d0:	0635      	lsls	r5, r6, #24
 800d3d2:	681b      	ldr	r3, [r3, #0]
 800d3d4:	d501      	bpl.n	800d3da <_printf_i+0x1c6>
 800d3d6:	6019      	str	r1, [r3, #0]
 800d3d8:	e002      	b.n	800d3e0 <_printf_i+0x1cc>
 800d3da:	0670      	lsls	r0, r6, #25
 800d3dc:	d5fb      	bpl.n	800d3d6 <_printf_i+0x1c2>
 800d3de:	8019      	strh	r1, [r3, #0]
 800d3e0:	2300      	movs	r3, #0
 800d3e2:	4615      	mov	r5, r2
 800d3e4:	6123      	str	r3, [r4, #16]
 800d3e6:	e7bc      	b.n	800d362 <_printf_i+0x14e>
 800d3e8:	682b      	ldr	r3, [r5, #0]
 800d3ea:	2100      	movs	r1, #0
 800d3ec:	1d1a      	adds	r2, r3, #4
 800d3ee:	602a      	str	r2, [r5, #0]
 800d3f0:	681d      	ldr	r5, [r3, #0]
 800d3f2:	6862      	ldr	r2, [r4, #4]
 800d3f4:	4628      	mov	r0, r5
 800d3f6:	f000 f849 	bl	800d48c <memchr>
 800d3fa:	b108      	cbz	r0, 800d400 <_printf_i+0x1ec>
 800d3fc:	1b40      	subs	r0, r0, r5
 800d3fe:	6060      	str	r0, [r4, #4]
 800d400:	6863      	ldr	r3, [r4, #4]
 800d402:	6123      	str	r3, [r4, #16]
 800d404:	2300      	movs	r3, #0
 800d406:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d40a:	e7aa      	b.n	800d362 <_printf_i+0x14e>
 800d40c:	462a      	mov	r2, r5
 800d40e:	4649      	mov	r1, r9
 800d410:	4640      	mov	r0, r8
 800d412:	6923      	ldr	r3, [r4, #16]
 800d414:	47d0      	blx	sl
 800d416:	3001      	adds	r0, #1
 800d418:	d0ad      	beq.n	800d376 <_printf_i+0x162>
 800d41a:	6823      	ldr	r3, [r4, #0]
 800d41c:	079b      	lsls	r3, r3, #30
 800d41e:	d413      	bmi.n	800d448 <_printf_i+0x234>
 800d420:	68e0      	ldr	r0, [r4, #12]
 800d422:	9b03      	ldr	r3, [sp, #12]
 800d424:	4298      	cmp	r0, r3
 800d426:	bfb8      	it	lt
 800d428:	4618      	movlt	r0, r3
 800d42a:	e7a6      	b.n	800d37a <_printf_i+0x166>
 800d42c:	2301      	movs	r3, #1
 800d42e:	4632      	mov	r2, r6
 800d430:	4649      	mov	r1, r9
 800d432:	4640      	mov	r0, r8
 800d434:	47d0      	blx	sl
 800d436:	3001      	adds	r0, #1
 800d438:	d09d      	beq.n	800d376 <_printf_i+0x162>
 800d43a:	3501      	adds	r5, #1
 800d43c:	68e3      	ldr	r3, [r4, #12]
 800d43e:	9903      	ldr	r1, [sp, #12]
 800d440:	1a5b      	subs	r3, r3, r1
 800d442:	42ab      	cmp	r3, r5
 800d444:	dcf2      	bgt.n	800d42c <_printf_i+0x218>
 800d446:	e7eb      	b.n	800d420 <_printf_i+0x20c>
 800d448:	2500      	movs	r5, #0
 800d44a:	f104 0619 	add.w	r6, r4, #25
 800d44e:	e7f5      	b.n	800d43c <_printf_i+0x228>
 800d450:	0800e42c 	.word	0x0800e42c
 800d454:	0800e43d 	.word	0x0800e43d

0800d458 <memmove>:
 800d458:	4288      	cmp	r0, r1
 800d45a:	b510      	push	{r4, lr}
 800d45c:	eb01 0402 	add.w	r4, r1, r2
 800d460:	d902      	bls.n	800d468 <memmove+0x10>
 800d462:	4284      	cmp	r4, r0
 800d464:	4623      	mov	r3, r4
 800d466:	d807      	bhi.n	800d478 <memmove+0x20>
 800d468:	1e43      	subs	r3, r0, #1
 800d46a:	42a1      	cmp	r1, r4
 800d46c:	d008      	beq.n	800d480 <memmove+0x28>
 800d46e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d472:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d476:	e7f8      	b.n	800d46a <memmove+0x12>
 800d478:	4601      	mov	r1, r0
 800d47a:	4402      	add	r2, r0
 800d47c:	428a      	cmp	r2, r1
 800d47e:	d100      	bne.n	800d482 <memmove+0x2a>
 800d480:	bd10      	pop	{r4, pc}
 800d482:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d486:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d48a:	e7f7      	b.n	800d47c <memmove+0x24>

0800d48c <memchr>:
 800d48c:	4603      	mov	r3, r0
 800d48e:	b510      	push	{r4, lr}
 800d490:	b2c9      	uxtb	r1, r1
 800d492:	4402      	add	r2, r0
 800d494:	4293      	cmp	r3, r2
 800d496:	4618      	mov	r0, r3
 800d498:	d101      	bne.n	800d49e <memchr+0x12>
 800d49a:	2000      	movs	r0, #0
 800d49c:	e003      	b.n	800d4a6 <memchr+0x1a>
 800d49e:	7804      	ldrb	r4, [r0, #0]
 800d4a0:	3301      	adds	r3, #1
 800d4a2:	428c      	cmp	r4, r1
 800d4a4:	d1f6      	bne.n	800d494 <memchr+0x8>
 800d4a6:	bd10      	pop	{r4, pc}

0800d4a8 <memcpy>:
 800d4a8:	440a      	add	r2, r1
 800d4aa:	4291      	cmp	r1, r2
 800d4ac:	f100 33ff 	add.w	r3, r0, #4294967295
 800d4b0:	d100      	bne.n	800d4b4 <memcpy+0xc>
 800d4b2:	4770      	bx	lr
 800d4b4:	b510      	push	{r4, lr}
 800d4b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d4ba:	4291      	cmp	r1, r2
 800d4bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d4c0:	d1f9      	bne.n	800d4b6 <memcpy+0xe>
 800d4c2:	bd10      	pop	{r4, pc}

0800d4c4 <_realloc_r>:
 800d4c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4c8:	4680      	mov	r8, r0
 800d4ca:	4614      	mov	r4, r2
 800d4cc:	460e      	mov	r6, r1
 800d4ce:	b921      	cbnz	r1, 800d4da <_realloc_r+0x16>
 800d4d0:	4611      	mov	r1, r2
 800d4d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d4d6:	f7ff bb41 	b.w	800cb5c <_malloc_r>
 800d4da:	b92a      	cbnz	r2, 800d4e8 <_realloc_r+0x24>
 800d4dc:	f7ff fc88 	bl	800cdf0 <_free_r>
 800d4e0:	4625      	mov	r5, r4
 800d4e2:	4628      	mov	r0, r5
 800d4e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d4e8:	f000 f81b 	bl	800d522 <_malloc_usable_size_r>
 800d4ec:	4284      	cmp	r4, r0
 800d4ee:	4607      	mov	r7, r0
 800d4f0:	d802      	bhi.n	800d4f8 <_realloc_r+0x34>
 800d4f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d4f6:	d812      	bhi.n	800d51e <_realloc_r+0x5a>
 800d4f8:	4621      	mov	r1, r4
 800d4fa:	4640      	mov	r0, r8
 800d4fc:	f7ff fb2e 	bl	800cb5c <_malloc_r>
 800d500:	4605      	mov	r5, r0
 800d502:	2800      	cmp	r0, #0
 800d504:	d0ed      	beq.n	800d4e2 <_realloc_r+0x1e>
 800d506:	42bc      	cmp	r4, r7
 800d508:	4622      	mov	r2, r4
 800d50a:	4631      	mov	r1, r6
 800d50c:	bf28      	it	cs
 800d50e:	463a      	movcs	r2, r7
 800d510:	f7ff ffca 	bl	800d4a8 <memcpy>
 800d514:	4631      	mov	r1, r6
 800d516:	4640      	mov	r0, r8
 800d518:	f7ff fc6a 	bl	800cdf0 <_free_r>
 800d51c:	e7e1      	b.n	800d4e2 <_realloc_r+0x1e>
 800d51e:	4635      	mov	r5, r6
 800d520:	e7df      	b.n	800d4e2 <_realloc_r+0x1e>

0800d522 <_malloc_usable_size_r>:
 800d522:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d526:	1f18      	subs	r0, r3, #4
 800d528:	2b00      	cmp	r3, #0
 800d52a:	bfbc      	itt	lt
 800d52c:	580b      	ldrlt	r3, [r1, r0]
 800d52e:	18c0      	addlt	r0, r0, r3
 800d530:	4770      	bx	lr
	...

0800d534 <_init>:
 800d534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d536:	bf00      	nop
 800d538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d53a:	bc08      	pop	{r3}
 800d53c:	469e      	mov	lr, r3
 800d53e:	4770      	bx	lr

0800d540 <_fini>:
 800d540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d542:	bf00      	nop
 800d544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d546:	bc08      	pop	{r3}
 800d548:	469e      	mov	lr, r3
 800d54a:	4770      	bx	lr
