
Version_IoT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1fc  080001e4  080001e4  000101e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d94  0800c3e0  0800c3e0  0001c3e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d174  0800d174  000209a0  2**0
                  CONTENTS
  4 .ARM          00000000  0800d174  0800d174  000209a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800d174  0800d174  000209a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d174  0800d174  0001d174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d178  0800d178  0001d178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000009a0  20000000  0800d17c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000574  200009a0  0800db1c  000209a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f14  0800db1c  00020f14  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000209a0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000209c9  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015023  00000000  00000000  00020a0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002802  00000000  00000000  00035a2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011a8  00000000  00000000  00038238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e03  00000000  00000000  000393e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ae4e  00000000  00000000  0003a1e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018510  00000000  00000000  00055031  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009fc25  00000000  00000000  0006d541  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000512c  00000000  00000000  0010d168  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  00112294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e4 <__do_global_dtors_aux>:
 80001e4:	b510      	push	{r4, lr}
 80001e6:	4c05      	ldr	r4, [pc, #20]	; (80001fc <__do_global_dtors_aux+0x18>)
 80001e8:	7823      	ldrb	r3, [r4, #0]
 80001ea:	b933      	cbnz	r3, 80001fa <__do_global_dtors_aux+0x16>
 80001ec:	4b04      	ldr	r3, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x1c>)
 80001ee:	b113      	cbz	r3, 80001f6 <__do_global_dtors_aux+0x12>
 80001f0:	4804      	ldr	r0, [pc, #16]	; (8000204 <__do_global_dtors_aux+0x20>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	2301      	movs	r3, #1
 80001f8:	7023      	strb	r3, [r4, #0]
 80001fa:	bd10      	pop	{r4, pc}
 80001fc:	200009a0 	.word	0x200009a0
 8000200:	00000000 	.word	0x00000000
 8000204:	0800c3c8 	.word	0x0800c3c8

08000208 <frame_dummy>:
 8000208:	b508      	push	{r3, lr}
 800020a:	4b03      	ldr	r3, [pc, #12]	; (8000218 <frame_dummy+0x10>)
 800020c:	b11b      	cbz	r3, 8000216 <frame_dummy+0xe>
 800020e:	4903      	ldr	r1, [pc, #12]	; (800021c <frame_dummy+0x14>)
 8000210:	4803      	ldr	r0, [pc, #12]	; (8000220 <frame_dummy+0x18>)
 8000212:	f3af 8000 	nop.w
 8000216:	bd08      	pop	{r3, pc}
 8000218:	00000000 	.word	0x00000000
 800021c:	200009a4 	.word	0x200009a4
 8000220:	0800c3c8 	.word	0x0800c3c8

08000224 <strlen>:
 8000224:	4603      	mov	r3, r0
 8000226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800022a:	2a00      	cmp	r2, #0
 800022c:	d1fb      	bne.n	8000226 <strlen+0x2>
 800022e:	1a18      	subs	r0, r3, r0
 8000230:	3801      	subs	r0, #1
 8000232:	4770      	bx	lr

08000234 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8000238:	4b0c      	ldr	r3, [pc, #48]	; (800026c <Ringbuf_init+0x38>)
 800023a:	4a0d      	ldr	r2, [pc, #52]	; (8000270 <Ringbuf_init+0x3c>)
 800023c:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 800023e:	4b0d      	ldr	r3, [pc, #52]	; (8000274 <Ringbuf_init+0x40>)
 8000240:	4a0d      	ldr	r2, [pc, #52]	; (8000278 <Ringbuf_init+0x44>)
 8000242:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 8000244:	4b0d      	ldr	r3, [pc, #52]	; (800027c <Ringbuf_init+0x48>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	695a      	ldr	r2, [r3, #20]
 800024a:	4b0c      	ldr	r3, [pc, #48]	; (800027c <Ringbuf_init+0x48>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	f042 0201 	orr.w	r2, r2, #1
 8000252:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 8000254:	4b09      	ldr	r3, [pc, #36]	; (800027c <Ringbuf_init+0x48>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	68da      	ldr	r2, [r3, #12]
 800025a:	4b08      	ldr	r3, [pc, #32]	; (800027c <Ringbuf_init+0x48>)
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	f042 0220 	orr.w	r2, r2, #32
 8000262:	60da      	str	r2, [r3, #12]
}
 8000264:	bf00      	nop
 8000266:	46bd      	mov	sp, r7
 8000268:	bc80      	pop	{r7}
 800026a:	4770      	bx	lr
 800026c:	20000a98 	.word	0x20000a98
 8000270:	20000a08 	.word	0x20000a08
 8000274:	20000a9c 	.word	0x20000a9c
 8000278:	20000a50 	.word	0x20000a50
 800027c:	200009bc 	.word	0x200009bc

08000280 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 8000280:	b480      	push	{r7}
 8000282:	b083      	sub	sp, #12
 8000284:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 8000286:	4b10      	ldr	r3, [pc, #64]	; (80002c8 <Uart_read+0x48>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800028c:	4b0e      	ldr	r3, [pc, #56]	; (80002c8 <Uart_read+0x48>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000292:	429a      	cmp	r2, r3
 8000294:	d102      	bne.n	800029c <Uart_read+0x1c>
  {
    return -1;
 8000296:	f04f 33ff 	mov.w	r3, #4294967295
 800029a:	e010      	b.n	80002be <Uart_read+0x3e>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 800029c:	4b0a      	ldr	r3, [pc, #40]	; (80002c8 <Uart_read+0x48>)
 800029e:	681a      	ldr	r2, [r3, #0]
 80002a0:	4b09      	ldr	r3, [pc, #36]	; (80002c8 <Uart_read+0x48>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002a6:	5cd3      	ldrb	r3, [r2, r3]
 80002a8:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 80002aa:	4b07      	ldr	r3, [pc, #28]	; (80002c8 <Uart_read+0x48>)
 80002ac:	681b      	ldr	r3, [r3, #0]
 80002ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002b0:	1c5a      	adds	r2, r3, #1
 80002b2:	4b05      	ldr	r3, [pc, #20]	; (80002c8 <Uart_read+0x48>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80002ba:	645a      	str	r2, [r3, #68]	; 0x44
    return c;
 80002bc:	79fb      	ldrb	r3, [r7, #7]
  }
}
 80002be:	4618      	mov	r0, r3
 80002c0:	370c      	adds	r7, #12
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bc80      	pop	{r7}
 80002c6:	4770      	bx	lr
 80002c8:	20000a98 	.word	0x20000a98

080002cc <Uart_write>:

/* writes a single character to the uart and increments head
 */
void Uart_write(int c)
{
 80002cc:	b480      	push	{r7}
 80002ce:	b085      	sub	sp, #20
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
	if (c>=0)
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	db21      	blt.n	800031e <Uart_write+0x52>
	{
		int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 80002da:	4b13      	ldr	r3, [pc, #76]	; (8000328 <Uart_write+0x5c>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002e0:	3301      	adds	r3, #1
 80002e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80002e6:	60fb      	str	r3, [r7, #12]
		while (i == _tx_buffer->tail);
 80002e8:	bf00      	nop
 80002ea:	4b0f      	ldr	r3, [pc, #60]	; (8000328 <Uart_write+0x5c>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80002f0:	68fb      	ldr	r3, [r7, #12]
 80002f2:	429a      	cmp	r2, r3
 80002f4:	d0f9      	beq.n	80002ea <Uart_write+0x1e>

		_tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 80002f6:	4b0c      	ldr	r3, [pc, #48]	; (8000328 <Uart_write+0x5c>)
 80002f8:	681a      	ldr	r2, [r3, #0]
 80002fa:	4b0b      	ldr	r3, [pc, #44]	; (8000328 <Uart_write+0x5c>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000300:	6879      	ldr	r1, [r7, #4]
 8000302:	b2c9      	uxtb	r1, r1
 8000304:	54d1      	strb	r1, [r2, r3]
		_tx_buffer->head = i;
 8000306:	4b08      	ldr	r3, [pc, #32]	; (8000328 <Uart_write+0x5c>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	68fa      	ldr	r2, [r7, #12]
 800030c:	641a      	str	r2, [r3, #64]	; 0x40

		__HAL_UART_ENABLE_IT(uart, UART_IT_TXE); // Enable UART transmission interrupt
 800030e:	4b07      	ldr	r3, [pc, #28]	; (800032c <Uart_write+0x60>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	68da      	ldr	r2, [r3, #12]
 8000314:	4b05      	ldr	r3, [pc, #20]	; (800032c <Uart_write+0x60>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800031c:	60da      	str	r2, [r3, #12]
	}
}
 800031e:	bf00      	nop
 8000320:	3714      	adds	r7, #20
 8000322:	46bd      	mov	sp, r7
 8000324:	bc80      	pop	{r7}
 8000326:	4770      	bx	lr
 8000328:	20000a9c 	.word	0x20000a9c
 800032c:	200009bc 	.word	0x200009bc

08000330 <IsDataAvailable>:

/* checks if the new data is available in the incoming buffer
 */
int IsDataAvailable(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8000334:	4b08      	ldr	r3, [pc, #32]	; (8000358 <IsDataAvailable+0x28>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800033a:	b29a      	uxth	r2, r3
 800033c:	4b06      	ldr	r3, [pc, #24]	; (8000358 <IsDataAvailable+0x28>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000342:	b29b      	uxth	r3, r3
 8000344:	1ad3      	subs	r3, r2, r3
 8000346:	b29b      	uxth	r3, r3
 8000348:	3340      	adds	r3, #64	; 0x40
 800034a:	b29b      	uxth	r3, r3
 800034c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 8000350:	4618      	mov	r0, r3
 8000352:	46bd      	mov	sp, r7
 8000354:	bc80      	pop	{r7}
 8000356:	4770      	bx	lr
 8000358:	20000a98 	.word	0x20000a98

0800035c <Uart_sendstring>:

/* sends the string to the uart
 */
void Uart_sendstring (const char *s)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
	while(*s) Uart_write(*s++);
 8000364:	e006      	b.n	8000374 <Uart_sendstring+0x18>
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	1c5a      	adds	r2, r3, #1
 800036a:	607a      	str	r2, [r7, #4]
 800036c:	781b      	ldrb	r3, [r3, #0]
 800036e:	4618      	mov	r0, r3
 8000370:	f7ff ffac 	bl	80002cc <Uart_write>
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	781b      	ldrb	r3, [r3, #0]
 8000378:	2b00      	cmp	r3, #0
 800037a:	d1f4      	bne.n	8000366 <Uart_sendstring+0xa>
}
 800037c:	bf00      	nop
 800037e:	bf00      	nop
 8000380:	3708      	adds	r7, #8
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
	...

08000388 <Uart_peek>:
	_rx_buffer->head = 0;
	_rx_buffer->tail = 0;
}

int Uart_peek()
{
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 800038c:	4b0a      	ldr	r3, [pc, #40]	; (80003b8 <Uart_peek+0x30>)
 800038e:	681b      	ldr	r3, [r3, #0]
 8000390:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000392:	4b09      	ldr	r3, [pc, #36]	; (80003b8 <Uart_peek+0x30>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000398:	429a      	cmp	r2, r3
 800039a:	d102      	bne.n	80003a2 <Uart_peek+0x1a>
  {
    return -1;
 800039c:	f04f 33ff 	mov.w	r3, #4294967295
 80003a0:	e005      	b.n	80003ae <Uart_peek+0x26>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 80003a2:	4b05      	ldr	r3, [pc, #20]	; (80003b8 <Uart_peek+0x30>)
 80003a4:	681a      	ldr	r2, [r3, #0]
 80003a6:	4b04      	ldr	r3, [pc, #16]	; (80003b8 <Uart_peek+0x30>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003ac:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 80003ae:	4618      	mov	r0, r3
 80003b0:	46bd      	mov	sp, r7
 80003b2:	bc80      	pop	{r7}
 80003b4:	4770      	bx	lr
 80003b6:	bf00      	nop
 80003b8:	20000a98 	.word	0x20000a98

080003bc <Copy_upto>:
 * it will copy irrespective of, if the end string is there or not
 * if the end string gets copied, it returns 1 or else 0
 * Use it either after (IsDataAvailable) or after (Wait_for) functions
 */
int Copy_upto (char *string, char *buffertocopyinto)
{
 80003bc:	b580      	push	{r7, lr}
 80003be:	b086      	sub	sp, #24
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
 80003c4:	6039      	str	r1, [r7, #0]
	int so_far =0;
 80003c6:	2300      	movs	r3, #0
 80003c8:	617b      	str	r3, [r7, #20]
	int len = strlen (string);
 80003ca:	6878      	ldr	r0, [r7, #4]
 80003cc:	f7ff ff2a 	bl	8000224 <strlen>
 80003d0:	4603      	mov	r3, r0
 80003d2:	60fb      	str	r3, [r7, #12]
	int indx = 0;
 80003d4:	2300      	movs	r3, #0
 80003d6:	613b      	str	r3, [r7, #16]

again:
	while (Uart_peek() != string[so_far])
 80003d8:	e01b      	b.n	8000412 <Copy_upto+0x56>
		{
			buffertocopyinto[indx] = _rx_buffer->buffer[_rx_buffer->tail];
 80003da:	4b34      	ldr	r3, [pc, #208]	; (80004ac <Copy_upto+0xf0>)
 80003dc:	6819      	ldr	r1, [r3, #0]
 80003de:	4b33      	ldr	r3, [pc, #204]	; (80004ac <Copy_upto+0xf0>)
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80003e4:	693b      	ldr	r3, [r7, #16]
 80003e6:	6838      	ldr	r0, [r7, #0]
 80003e8:	4403      	add	r3, r0
 80003ea:	5c8a      	ldrb	r2, [r1, r2]
 80003ec:	701a      	strb	r2, [r3, #0]
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 80003ee:	4b2f      	ldr	r3, [pc, #188]	; (80004ac <Copy_upto+0xf0>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80003f4:	1c5a      	adds	r2, r3, #1
 80003f6:	4b2d      	ldr	r3, [pc, #180]	; (80004ac <Copy_upto+0xf0>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80003fe:	645a      	str	r2, [r3, #68]	; 0x44
			indx++;
 8000400:	693b      	ldr	r3, [r7, #16]
 8000402:	3301      	adds	r3, #1
 8000404:	613b      	str	r3, [r7, #16]
			while (!IsDataAvailable());
 8000406:	bf00      	nop
 8000408:	f7ff ff92 	bl	8000330 <IsDataAvailable>
 800040c:	4603      	mov	r3, r0
 800040e:	2b00      	cmp	r3, #0
 8000410:	d0fa      	beq.n	8000408 <Copy_upto+0x4c>
	while (Uart_peek() != string[so_far])
 8000412:	f7ff ffb9 	bl	8000388 <Uart_peek>
 8000416:	4601      	mov	r1, r0
 8000418:	697b      	ldr	r3, [r7, #20]
 800041a:	687a      	ldr	r2, [r7, #4]
 800041c:	4413      	add	r3, r2
 800041e:	781b      	ldrb	r3, [r3, #0]
 8000420:	4299      	cmp	r1, r3
 8000422:	d1da      	bne.n	80003da <Copy_upto+0x1e>

		}
	while (Uart_peek() == string [so_far])
 8000424:	e027      	b.n	8000476 <Copy_upto+0xba>
	{
		so_far++;
 8000426:	697b      	ldr	r3, [r7, #20]
 8000428:	3301      	adds	r3, #1
 800042a:	617b      	str	r3, [r7, #20]
		buffertocopyinto[indx++] = Uart_read();
 800042c:	f7ff ff28 	bl	8000280 <Uart_read>
 8000430:	4601      	mov	r1, r0
 8000432:	693b      	ldr	r3, [r7, #16]
 8000434:	1c5a      	adds	r2, r3, #1
 8000436:	613a      	str	r2, [r7, #16]
 8000438:	461a      	mov	r2, r3
 800043a:	683b      	ldr	r3, [r7, #0]
 800043c:	4413      	add	r3, r2
 800043e:	b2ca      	uxtb	r2, r1
 8000440:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8000442:	697a      	ldr	r2, [r7, #20]
 8000444:	68fb      	ldr	r3, [r7, #12]
 8000446:	429a      	cmp	r2, r3
 8000448:	d101      	bne.n	800044e <Copy_upto+0x92>
 800044a:	2301      	movs	r3, #1
 800044c:	e02a      	b.n	80004a4 <Copy_upto+0xe8>
		timeout = TIMEOUT_DEF;
 800044e:	4b18      	ldr	r3, [pc, #96]	; (80004b0 <Copy_upto+0xf4>)
 8000450:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000454:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 8000456:	bf00      	nop
 8000458:	f7ff ff6a 	bl	8000330 <IsDataAvailable>
 800045c:	4603      	mov	r3, r0
 800045e:	2b00      	cmp	r3, #0
 8000460:	d103      	bne.n	800046a <Copy_upto+0xae>
 8000462:	4b13      	ldr	r3, [pc, #76]	; (80004b0 <Copy_upto+0xf4>)
 8000464:	881b      	ldrh	r3, [r3, #0]
 8000466:	2b00      	cmp	r3, #0
 8000468:	d1f6      	bne.n	8000458 <Copy_upto+0x9c>
		if (timeout == 0) return 0;
 800046a:	4b11      	ldr	r3, [pc, #68]	; (80004b0 <Copy_upto+0xf4>)
 800046c:	881b      	ldrh	r3, [r3, #0]
 800046e:	2b00      	cmp	r3, #0
 8000470:	d101      	bne.n	8000476 <Copy_upto+0xba>
 8000472:	2300      	movs	r3, #0
 8000474:	e016      	b.n	80004a4 <Copy_upto+0xe8>
	while (Uart_peek() == string [so_far])
 8000476:	f7ff ff87 	bl	8000388 <Uart_peek>
 800047a:	4601      	mov	r1, r0
 800047c:	697b      	ldr	r3, [r7, #20]
 800047e:	687a      	ldr	r2, [r7, #4]
 8000480:	4413      	add	r3, r2
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	4299      	cmp	r1, r3
 8000486:	d0ce      	beq.n	8000426 <Copy_upto+0x6a>
	}

	if (so_far != len)
 8000488:	697a      	ldr	r2, [r7, #20]
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	429a      	cmp	r2, r3
 800048e:	d002      	beq.n	8000496 <Copy_upto+0xda>
	{
		so_far = 0;
 8000490:	2300      	movs	r3, #0
 8000492:	617b      	str	r3, [r7, #20]
		goto again;
 8000494:	e7a0      	b.n	80003d8 <Copy_upto+0x1c>
	}

	if (so_far == len) return 1;
 8000496:	697a      	ldr	r2, [r7, #20]
 8000498:	68fb      	ldr	r3, [r7, #12]
 800049a:	429a      	cmp	r2, r3
 800049c:	d101      	bne.n	80004a2 <Copy_upto+0xe6>
 800049e:	2301      	movs	r3, #1
 80004a0:	e000      	b.n	80004a4 <Copy_upto+0xe8>
	else return 0;
 80004a2:	2300      	movs	r3, #0
}
 80004a4:	4618      	mov	r0, r3
 80004a6:	3718      	adds	r7, #24
 80004a8:	46bd      	mov	sp, r7
 80004aa:	bd80      	pop	{r7, pc}
 80004ac:	20000a98 	.word	0x20000a98
 80004b0:	20000a04 	.word	0x20000a04

080004b4 <Wait_for>:
/* Waits for a particular string to arrive in the incoming buffer... It also increments the tail
 * returns 1, if the string is detected
 */
// added timeout feature so the function won't block the processing of the other functions
int Wait_for (char *string)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b084      	sub	sp, #16
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]
	int so_far =0;
 80004bc:	2300      	movs	r3, #0
 80004be:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 80004c0:	6878      	ldr	r0, [r7, #4]
 80004c2:	f7ff feaf 	bl	8000224 <strlen>
 80004c6:	4603      	mov	r3, r0
 80004c8:	60bb      	str	r3, [r7, #8]

again:
	timeout = TIMEOUT_DEF;
 80004ca:	4b39      	ldr	r3, [pc, #228]	; (80005b0 <Wait_for+0xfc>)
 80004cc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80004d0:	801a      	strh	r2, [r3, #0]
	while ((!IsDataAvailable())&&timeout);  // let's wait for the data to show up
 80004d2:	bf00      	nop
 80004d4:	f7ff ff2c 	bl	8000330 <IsDataAvailable>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d103      	bne.n	80004e6 <Wait_for+0x32>
 80004de:	4b34      	ldr	r3, [pc, #208]	; (80005b0 <Wait_for+0xfc>)
 80004e0:	881b      	ldrh	r3, [r3, #0]
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d1f6      	bne.n	80004d4 <Wait_for+0x20>
	if (timeout == 0) return 0;
 80004e6:	4b32      	ldr	r3, [pc, #200]	; (80005b0 <Wait_for+0xfc>)
 80004e8:	881b      	ldrh	r3, [r3, #0]
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d115      	bne.n	800051a <Wait_for+0x66>
 80004ee:	2300      	movs	r3, #0
 80004f0:	e05a      	b.n	80005a8 <Wait_for+0xf4>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
	{
		if (_rx_buffer->tail != _rx_buffer->head)
 80004f2:	4b30      	ldr	r3, [pc, #192]	; (80005b4 <Wait_for+0x100>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80004f8:	4b2e      	ldr	r3, [pc, #184]	; (80005b4 <Wait_for+0x100>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004fe:	429a      	cmp	r2, r3
 8000500:	d009      	beq.n	8000516 <Wait_for+0x62>
		{
			_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8000502:	4b2c      	ldr	r3, [pc, #176]	; (80005b4 <Wait_for+0x100>)
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000508:	1c5a      	adds	r2, r3, #1
 800050a:	4b2a      	ldr	r3, [pc, #168]	; (80005b4 <Wait_for+0x100>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000512:	645a      	str	r2, [r3, #68]	; 0x44
 8000514:	e001      	b.n	800051a <Wait_for+0x66>
		}

		else
		{
			return 0;
 8000516:	2300      	movs	r3, #0
 8000518:	e046      	b.n	80005a8 <Wait_for+0xf4>
	while (Uart_peek() != string[so_far])  // peek in the rx_buffer to see if we get the string
 800051a:	f7ff ff35 	bl	8000388 <Uart_peek>
 800051e:	4601      	mov	r1, r0
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	687a      	ldr	r2, [r7, #4]
 8000524:	4413      	add	r3, r2
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	4299      	cmp	r1, r3
 800052a:	d1e2      	bne.n	80004f2 <Wait_for+0x3e>
		}
	}
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 800052c:	e025      	b.n	800057a <Wait_for+0xc6>
	{
		// now we will peek for the other letters too
		so_far++;
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	3301      	adds	r3, #1
 8000532:	60fb      	str	r3, [r7, #12]
		_rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;  // increment the tail
 8000534:	4b1f      	ldr	r3, [pc, #124]	; (80005b4 <Wait_for+0x100>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800053a:	1c5a      	adds	r2, r3, #1
 800053c:	4b1d      	ldr	r3, [pc, #116]	; (80005b4 <Wait_for+0x100>)
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 8000544:	645a      	str	r2, [r3, #68]	; 0x44
		if (so_far == len) return 1;
 8000546:	68fa      	ldr	r2, [r7, #12]
 8000548:	68bb      	ldr	r3, [r7, #8]
 800054a:	429a      	cmp	r2, r3
 800054c:	d101      	bne.n	8000552 <Wait_for+0x9e>
 800054e:	2301      	movs	r3, #1
 8000550:	e02a      	b.n	80005a8 <Wait_for+0xf4>
		timeout = TIMEOUT_DEF;
 8000552:	4b17      	ldr	r3, [pc, #92]	; (80005b0 <Wait_for+0xfc>)
 8000554:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000558:	801a      	strh	r2, [r3, #0]
		while ((!IsDataAvailable())&&timeout);
 800055a:	bf00      	nop
 800055c:	f7ff fee8 	bl	8000330 <IsDataAvailable>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d103      	bne.n	800056e <Wait_for+0xba>
 8000566:	4b12      	ldr	r3, [pc, #72]	; (80005b0 <Wait_for+0xfc>)
 8000568:	881b      	ldrh	r3, [r3, #0]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d1f6      	bne.n	800055c <Wait_for+0xa8>
		if (timeout == 0) return 0;
 800056e:	4b10      	ldr	r3, [pc, #64]	; (80005b0 <Wait_for+0xfc>)
 8000570:	881b      	ldrh	r3, [r3, #0]
 8000572:	2b00      	cmp	r3, #0
 8000574:	d101      	bne.n	800057a <Wait_for+0xc6>
 8000576:	2300      	movs	r3, #0
 8000578:	e016      	b.n	80005a8 <Wait_for+0xf4>
	while (Uart_peek() == string [so_far]) // if we got the first letter of the string
 800057a:	f7ff ff05 	bl	8000388 <Uart_peek>
 800057e:	4601      	mov	r1, r0
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	687a      	ldr	r2, [r7, #4]
 8000584:	4413      	add	r3, r2
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	4299      	cmp	r1, r3
 800058a:	d0d0      	beq.n	800052e <Wait_for+0x7a>
	}

	if (so_far != len)
 800058c:	68fa      	ldr	r2, [r7, #12]
 800058e:	68bb      	ldr	r3, [r7, #8]
 8000590:	429a      	cmp	r2, r3
 8000592:	d002      	beq.n	800059a <Wait_for+0xe6>
	{
		so_far = 0;
 8000594:	2300      	movs	r3, #0
 8000596:	60fb      	str	r3, [r7, #12]
		goto again;
 8000598:	e797      	b.n	80004ca <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 800059a:	68fa      	ldr	r2, [r7, #12]
 800059c:	68bb      	ldr	r3, [r7, #8]
 800059e:	429a      	cmp	r2, r3
 80005a0:	d101      	bne.n	80005a6 <Wait_for+0xf2>
 80005a2:	2301      	movs	r3, #1
 80005a4:	e000      	b.n	80005a8 <Wait_for+0xf4>
	else return 0;
 80005a6:	2300      	movs	r3, #0
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	3710      	adds	r7, #16
 80005ac:	46bd      	mov	sp, r7
 80005ae:	bd80      	pop	{r7, pc}
 80005b0:	20000a04 	.word	0x20000a04
 80005b4:	20000a98 	.word	0x20000a98

080005b8 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;

#define SLAVE_ADDRESS_LCD 0x4E
char LCD_BACKLIGHT = 0x00;

void lcd_send_cmd (char cmd) {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b086      	sub	sp, #24
 80005bc:	af02      	add	r7, sp, #8
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80005c2:	79fb      	ldrb	r3, [r7, #7]
 80005c4:	f023 030f 	bic.w	r3, r3, #15
 80005c8:	737b      	strb	r3, [r7, #13]
	data_l = ((cmd<<4)&0xf0);
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	011b      	lsls	r3, r3, #4
 80005ce:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80005d0:	7b7b      	ldrb	r3, [r7, #13]
 80005d2:	f043 030c 	orr.w	r3, r3, #12
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80005da:	7b7b      	ldrb	r3, [r7, #13]
 80005dc:	f043 0308 	orr.w	r3, r3, #8
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 80005e4:	7b3b      	ldrb	r3, [r7, #12]
 80005e6:	f043 030c 	orr.w	r3, r3, #12
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 80005ee:	7b3b      	ldrb	r3, [r7, #12]
 80005f0:	f043 0308 	orr.w	r3, r3, #8
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80005f8:	bf00      	nop
 80005fa:	4825      	ldr	r0, [pc, #148]	; (8000690 <lcd_send_cmd+0xd8>)
 80005fc:	f009 f811 	bl	8009622 <HAL_I2C_GetError>
 8000600:	4603      	mov	r3, r0
 8000602:	2b04      	cmp	r3, #4
 8000604:	d0f9      	beq.n	80005fa <lcd_send_cmd+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8000606:	bf00      	nop
 8000608:	4821      	ldr	r0, [pc, #132]	; (8000690 <lcd_send_cmd+0xd8>)
 800060a:	f008 fffd 	bl	8009608 <HAL_I2C_GetState>
 800060e:	4603      	mov	r3, r0
 8000610:	2b20      	cmp	r3, #32
 8000612:	d1f9      	bne.n	8000608 <lcd_send_cmd+0x50>

	if(LCD_BACKLIGHT == 0) {
 8000614:	4b1f      	ldr	r3, [pc, #124]	; (8000694 <lcd_send_cmd+0xdc>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d116      	bne.n	800064a <lcd_send_cmd+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 800061c:	2300      	movs	r3, #0
 800061e:	73fb      	strb	r3, [r7, #15]
 8000620:	e00f      	b.n	8000642 <lcd_send_cmd+0x8a>
			data_t[i] &= ~(1UL << 3);
 8000622:	7bfb      	ldrb	r3, [r7, #15]
 8000624:	3310      	adds	r3, #16
 8000626:	443b      	add	r3, r7
 8000628:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800062c:	7bfb      	ldrb	r3, [r7, #15]
 800062e:	f022 0208 	bic.w	r2, r2, #8
 8000632:	b2d2      	uxtb	r2, r2
 8000634:	3310      	adds	r3, #16
 8000636:	443b      	add	r3, r7
 8000638:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800063c:	7bfb      	ldrb	r3, [r7, #15]
 800063e:	3301      	adds	r3, #1
 8000640:	73fb      	strb	r3, [r7, #15]
 8000642:	7bfb      	ldrb	r3, [r7, #15]
 8000644:	2b03      	cmp	r3, #3
 8000646:	d9ec      	bls.n	8000622 <lcd_send_cmd+0x6a>
 8000648:	e015      	b.n	8000676 <lcd_send_cmd+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 800064a:	2300      	movs	r3, #0
 800064c:	73bb      	strb	r3, [r7, #14]
 800064e:	e00f      	b.n	8000670 <lcd_send_cmd+0xb8>
			data_t[i] |= 1UL << 3;
 8000650:	7bbb      	ldrb	r3, [r7, #14]
 8000652:	3310      	adds	r3, #16
 8000654:	443b      	add	r3, r7
 8000656:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800065a:	7bbb      	ldrb	r3, [r7, #14]
 800065c:	f042 0208 	orr.w	r2, r2, #8
 8000660:	b2d2      	uxtb	r2, r2
 8000662:	3310      	adds	r3, #16
 8000664:	443b      	add	r3, r7
 8000666:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800066a:	7bbb      	ldrb	r3, [r7, #14]
 800066c:	3301      	adds	r3, #1
 800066e:	73bb      	strb	r3, [r7, #14]
 8000670:	7bbb      	ldrb	r3, [r7, #14]
 8000672:	2b03      	cmp	r3, #3
 8000674:	d9ec      	bls.n	8000650 <lcd_send_cmd+0x98>
		}
	}
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000676:	f107 0208 	add.w	r2, r7, #8
 800067a:	2364      	movs	r3, #100	; 0x64
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	2304      	movs	r3, #4
 8000680:	214e      	movs	r1, #78	; 0x4e
 8000682:	4803      	ldr	r0, [pc, #12]	; (8000690 <lcd_send_cmd+0xd8>)
 8000684:	f008 fb60 	bl	8008d48 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000688:	bf00      	nop
 800068a:	3710      	adds	r7, #16
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	20000ce0 	.word	0x20000ce0
 8000694:	20000aa0 	.word	0x20000aa0

08000698 <lcd_send_data>:

void lcd_send_data (char data) {
 8000698:	b580      	push	{r7, lr}
 800069a:	b086      	sub	sp, #24
 800069c:	af02      	add	r7, sp, #8
 800069e:	4603      	mov	r3, r0
 80006a0:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	f023 030f 	bic.w	r3, r3, #15
 80006a8:	737b      	strb	r3, [r7, #13]
	data_l = ((data<<4)&0xf0);
 80006aa:	79fb      	ldrb	r3, [r7, #7]
 80006ac:	011b      	lsls	r3, r3, #4
 80006ae:	733b      	strb	r3, [r7, #12]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 80006b0:	7b7b      	ldrb	r3, [r7, #13]
 80006b2:	f043 030d 	orr.w	r3, r3, #13
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 80006ba:	7b7b      	ldrb	r3, [r7, #13]
 80006bc:	f043 0309 	orr.w	r3, r3, #9
 80006c0:	b2db      	uxtb	r3, r3
 80006c2:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 80006c4:	7b3b      	ldrb	r3, [r7, #12]
 80006c6:	f043 030d 	orr.w	r3, r3, #13
 80006ca:	b2db      	uxtb	r3, r3
 80006cc:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 80006ce:	7b3b      	ldrb	r3, [r7, #12]
 80006d0:	f043 0309 	orr.w	r3, r3, #9
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	72fb      	strb	r3, [r7, #11]

	while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80006d8:	bf00      	nop
 80006da:	4825      	ldr	r0, [pc, #148]	; (8000770 <lcd_send_data+0xd8>)
 80006dc:	f008 ffa1 	bl	8009622 <HAL_I2C_GetError>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b04      	cmp	r3, #4
 80006e4:	d0f9      	beq.n	80006da <lcd_send_data+0x42>
	while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80006e6:	bf00      	nop
 80006e8:	4821      	ldr	r0, [pc, #132]	; (8000770 <lcd_send_data+0xd8>)
 80006ea:	f008 ff8d 	bl	8009608 <HAL_I2C_GetState>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b20      	cmp	r3, #32
 80006f2:	d1f9      	bne.n	80006e8 <lcd_send_data+0x50>

	if(LCD_BACKLIGHT == 0) {
 80006f4:	4b1f      	ldr	r3, [pc, #124]	; (8000774 <lcd_send_data+0xdc>)
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d116      	bne.n	800072a <lcd_send_data+0x92>
		for(uint8_t i = 0; i <= 3; i++) {
 80006fc:	2300      	movs	r3, #0
 80006fe:	73fb      	strb	r3, [r7, #15]
 8000700:	e00f      	b.n	8000722 <lcd_send_data+0x8a>
			data_t[i] &= ~(1UL << 3);
 8000702:	7bfb      	ldrb	r3, [r7, #15]
 8000704:	3310      	adds	r3, #16
 8000706:	443b      	add	r3, r7
 8000708:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800070c:	7bfb      	ldrb	r3, [r7, #15]
 800070e:	f022 0208 	bic.w	r2, r2, #8
 8000712:	b2d2      	uxtb	r2, r2
 8000714:	3310      	adds	r3, #16
 8000716:	443b      	add	r3, r7
 8000718:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800071c:	7bfb      	ldrb	r3, [r7, #15]
 800071e:	3301      	adds	r3, #1
 8000720:	73fb      	strb	r3, [r7, #15]
 8000722:	7bfb      	ldrb	r3, [r7, #15]
 8000724:	2b03      	cmp	r3, #3
 8000726:	d9ec      	bls.n	8000702 <lcd_send_data+0x6a>
 8000728:	e015      	b.n	8000756 <lcd_send_data+0xbe>
		}
	} else {
		for(uint8_t i = 0; i <= 3; i++) {
 800072a:	2300      	movs	r3, #0
 800072c:	73bb      	strb	r3, [r7, #14]
 800072e:	e00f      	b.n	8000750 <lcd_send_data+0xb8>
			data_t[i] |= 1UL << 3;
 8000730:	7bbb      	ldrb	r3, [r7, #14]
 8000732:	3310      	adds	r3, #16
 8000734:	443b      	add	r3, r7
 8000736:	f813 2c08 	ldrb.w	r2, [r3, #-8]
 800073a:	7bbb      	ldrb	r3, [r7, #14]
 800073c:	f042 0208 	orr.w	r2, r2, #8
 8000740:	b2d2      	uxtb	r2, r2
 8000742:	3310      	adds	r3, #16
 8000744:	443b      	add	r3, r7
 8000746:	f803 2c08 	strb.w	r2, [r3, #-8]
		for(uint8_t i = 0; i <= 3; i++) {
 800074a:	7bbb      	ldrb	r3, [r7, #14]
 800074c:	3301      	adds	r3, #1
 800074e:	73bb      	strb	r3, [r7, #14]
 8000750:	7bbb      	ldrb	r3, [r7, #14]
 8000752:	2b03      	cmp	r3, #3
 8000754:	d9ec      	bls.n	8000730 <lcd_send_data+0x98>
		}
	}

	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000756:	f107 0208 	add.w	r2, r7, #8
 800075a:	2364      	movs	r3, #100	; 0x64
 800075c:	9300      	str	r3, [sp, #0]
 800075e:	2304      	movs	r3, #4
 8000760:	214e      	movs	r1, #78	; 0x4e
 8000762:	4803      	ldr	r0, [pc, #12]	; (8000770 <lcd_send_data+0xd8>)
 8000764:	f008 faf0 	bl	8008d48 <HAL_I2C_Master_Transmit>
	//HAL_Delay(5);
}
 8000768:	bf00      	nop
 800076a:	3710      	adds	r7, #16
 800076c:	46bd      	mov	sp, r7
 800076e:	bd80      	pop	{r7, pc}
 8000770:	20000ce0 	.word	0x20000ce0
 8000774:	20000aa0 	.word	0x20000aa0

08000778 <lcd_send_string>:

void lcd_send_string (char *str) {
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
	while (*str) {
 8000780:	e006      	b.n	8000790 <lcd_send_string+0x18>
		lcd_send_data (*str++);
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	1c5a      	adds	r2, r3, #1
 8000786:	607a      	str	r2, [r7, #4]
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	4618      	mov	r0, r3
 800078c:	f7ff ff84 	bl	8000698 <lcd_send_data>
	while (*str) {
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d1f4      	bne.n	8000782 <lcd_send_string+0xa>
	}
}
 8000798:	bf00      	nop
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <lcd_init>:

void lcd_init (void) {
 80007a2:	b580      	push	{r7, lr}
 80007a4:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x02);
 80007a6:	2002      	movs	r0, #2
 80007a8:	f7ff ff06 	bl	80005b8 <lcd_send_cmd>
	lcd_send_cmd (0x28);
 80007ac:	2028      	movs	r0, #40	; 0x28
 80007ae:	f7ff ff03 	bl	80005b8 <lcd_send_cmd>
	lcd_send_cmd (0x0c);
 80007b2:	200c      	movs	r0, #12
 80007b4:	f7ff ff00 	bl	80005b8 <lcd_send_cmd>
	lcd_send_cmd (0x80);
 80007b8:	2080      	movs	r0, #128	; 0x80
 80007ba:	f7ff fefd 	bl	80005b8 <lcd_send_cmd>
	lcd_backlight(1);
 80007be:	2001      	movs	r0, #1
 80007c0:	f000 f840 	bl	8000844 <lcd_backlight>
}
 80007c4:	bf00      	nop
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char row, unsigned char column) {
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	4603      	mov	r3, r0
 80007d0:	460a      	mov	r2, r1
 80007d2:	71fb      	strb	r3, [r7, #7]
 80007d4:	4613      	mov	r3, r2
 80007d6:	71bb      	strb	r3, [r7, #6]
	if(row == 1) {
 80007d8:	79fb      	ldrb	r3, [r7, #7]
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d106      	bne.n	80007ec <lcd_gotoxy+0x24>
		lcd_send_cmd(0x80 + (column - 1));
 80007de:	79bb      	ldrb	r3, [r7, #6]
 80007e0:	337f      	adds	r3, #127	; 0x7f
 80007e2:	b2db      	uxtb	r3, r3
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff fee7 	bl	80005b8 <lcd_send_cmd>
	} else if(row == 2) {
		lcd_send_cmd(0xC0 + (column - 1));
	}
}
 80007ea:	e008      	b.n	80007fe <lcd_gotoxy+0x36>
	} else if(row == 2) {
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	2b02      	cmp	r3, #2
 80007f0:	d105      	bne.n	80007fe <lcd_gotoxy+0x36>
		lcd_send_cmd(0xC0 + (column - 1));
 80007f2:	79bb      	ldrb	r3, [r7, #6]
 80007f4:	3b41      	subs	r3, #65	; 0x41
 80007f6:	b2db      	uxtb	r3, r3
 80007f8:	4618      	mov	r0, r3
 80007fa:	f7ff fedd 	bl	80005b8 <lcd_send_cmd>
}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}

08000806 <lcd_print>:

void lcd_print(unsigned char row, unsigned char column, char *str) {
 8000806:	b580      	push	{r7, lr}
 8000808:	b082      	sub	sp, #8
 800080a:	af00      	add	r7, sp, #0
 800080c:	4603      	mov	r3, r0
 800080e:	603a      	str	r2, [r7, #0]
 8000810:	71fb      	strb	r3, [r7, #7]
 8000812:	460b      	mov	r3, r1
 8000814:	71bb      	strb	r3, [r7, #6]
	lcd_gotoxy(row, column);
 8000816:	79ba      	ldrb	r2, [r7, #6]
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	4611      	mov	r1, r2
 800081c:	4618      	mov	r0, r3
 800081e:	f7ff ffd3 	bl	80007c8 <lcd_gotoxy>
	lcd_send_string(str);
 8000822:	6838      	ldr	r0, [r7, #0]
 8000824:	f7ff ffa8 	bl	8000778 <lcd_send_string>
}
 8000828:	bf00      	nop
 800082a:	3708      	adds	r7, #8
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <lcd_clear>:

void lcd_clear(void) {
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
	lcd_send_cmd(_CLEAR);
 8000834:	2001      	movs	r0, #1
 8000836:	f7ff febf 	bl	80005b8 <lcd_send_cmd>
    HAL_Delay(2);
 800083a:	2002      	movs	r0, #2
 800083c:	f007 faf8 	bl	8007e30 <HAL_Delay>

}
 8000840:	bf00      	nop
 8000842:	bd80      	pop	{r7, pc}

08000844 <lcd_backlight>:

void lcd_line2(void) {
	lcd_send_cmd(0xC0);
}

void lcd_backlight(char state) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	71fb      	strb	r3, [r7, #7]
	LCD_BACKLIGHT = state;
 800084e:	4a05      	ldr	r2, [pc, #20]	; (8000864 <lcd_backlight+0x20>)
 8000850:	79fb      	ldrb	r3, [r7, #7]
 8000852:	7013      	strb	r3, [r2, #0]
	lcd_send_cmd(0x00);
 8000854:	2000      	movs	r0, #0
 8000856:	f7ff feaf 	bl	80005b8 <lcd_send_cmd>
}
 800085a:	bf00      	nop
 800085c:	3708      	adds	r7, #8
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}
 8000862:	bf00      	nop
 8000864:	20000aa0 	.word	0x20000aa0

08000868 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800086c:	f3bf 8f4f 	dsb	sy
}
 8000870:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8000872:	4b06      	ldr	r3, [pc, #24]	; (800088c <__NVIC_SystemReset+0x24>)
 8000874:	68db      	ldr	r3, [r3, #12]
 8000876:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800087a:	4904      	ldr	r1, [pc, #16]	; (800088c <__NVIC_SystemReset+0x24>)
 800087c:	4b04      	ldr	r3, [pc, #16]	; (8000890 <__NVIC_SystemReset+0x28>)
 800087e:	4313      	orrs	r3, r2
 8000880:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8000882:	f3bf 8f4f 	dsb	sy
}
 8000886:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8000888:	bf00      	nop
 800088a:	e7fd      	b.n	8000888 <__NVIC_SystemReset+0x20>
 800088c:	e000ed00 	.word	0xe000ed00
 8000890:	05fa0004 	.word	0x05fa0004

08000894 <copyText>:
char *secilenDilText;
char *menudenCikisText;
char *enteraBasinizText;
char *hataKoduText;

char* copyText(const char* text) {
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
    char* result = (char*)malloc(strlen(text) + 1);
 800089c:	6878      	ldr	r0, [r7, #4]
 800089e:	f7ff fcc1 	bl	8000224 <strlen>
 80008a2:	4603      	mov	r3, r0
 80008a4:	3301      	adds	r3, #1
 80008a6:	4618      	mov	r0, r3
 80008a8:	f00b f88a 	bl	800b9c0 <malloc>
 80008ac:	4603      	mov	r3, r0
 80008ae:	60fb      	str	r3, [r7, #12]
    if (result != NULL) {
 80008b0:	68fb      	ldr	r3, [r7, #12]
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d003      	beq.n	80008be <copyText+0x2a>
        strcpy(result, text);
 80008b6:	6879      	ldr	r1, [r7, #4]
 80008b8:	68f8      	ldr	r0, [r7, #12]
 80008ba:	f00b f9db 	bl	800bc74 <strcpy>
    }
    return result;
 80008be:	68fb      	ldr	r3, [r7, #12]
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3710      	adds	r7, #16
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <menu>:
        }
    }
    return result;
}

void menu(void) {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (butonKontrol == 0)) {
 80008cc:	2101      	movs	r1, #1
 80008ce:	488f      	ldr	r0, [pc, #572]	; (8000b0c <menu+0x244>)
 80008d0:	f008 f87e 	bl	80089d0 <HAL_GPIO_ReadPin>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b01      	cmp	r3, #1
 80008d8:	f040 808e 	bne.w	80009f8 <menu+0x130>
 80008dc:	4b8c      	ldr	r3, [pc, #560]	; (8000b10 <menu+0x248>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	f083 0301 	eor.w	r3, r3, #1
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	f000 8086 	beq.w	80009f8 <menu+0x130>
		menuSayac = menuSayac+1;
 80008ec:	4b89      	ldr	r3, [pc, #548]	; (8000b14 <menu+0x24c>)
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	3301      	adds	r3, #1
 80008f2:	b2da      	uxtb	r2, r3
 80008f4:	4b87      	ldr	r3, [pc, #540]	; (8000b14 <menu+0x24c>)
 80008f6:	701a      	strb	r2, [r3, #0]
		if (menuSayac == 32) {    //MENÜ BÜYÜDÜKÇE DUZENLE
 80008f8:	4b86      	ldr	r3, [pc, #536]	; (8000b14 <menu+0x24c>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2b20      	cmp	r3, #32
 80008fe:	d102      	bne.n	8000906 <menu+0x3e>
			menuSayac = 1;
 8000900:	4b84      	ldr	r3, [pc, #528]	; (8000b14 <menu+0x24c>)
 8000902:	2201      	movs	r2, #1
 8000904:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 18) && (devirmeYuruyusSecim == 0)) {
 8000906:	4b83      	ldr	r3, [pc, #524]	; (8000b14 <menu+0x24c>)
 8000908:	781b      	ldrb	r3, [r3, #0]
 800090a:	2b12      	cmp	r3, #18
 800090c:	d106      	bne.n	800091c <menu+0x54>
 800090e:	4b82      	ldr	r3, [pc, #520]	; (8000b18 <menu+0x250>)
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d102      	bne.n	800091c <menu+0x54>
			menuSayac = 21;
 8000916:	4b7f      	ldr	r3, [pc, #508]	; (8000b14 <menu+0x24c>)
 8000918:	2215      	movs	r2, #21
 800091a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 8) && (kapiSecimleri == 0)) {
 800091c:	4b7d      	ldr	r3, [pc, #500]	; (8000b14 <menu+0x24c>)
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	2b08      	cmp	r3, #8
 8000922:	d106      	bne.n	8000932 <menu+0x6a>
 8000924:	4b7d      	ldr	r3, [pc, #500]	; (8000b1c <menu+0x254>)
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d102      	bne.n	8000932 <menu+0x6a>
			menuSayac = 16;
 800092c:	4b79      	ldr	r3, [pc, #484]	; (8000b14 <menu+0x24c>)
 800092e:	2210      	movs	r2, #16
 8000930:	701a      	strb	r2, [r3, #0]
		}

		if ((menuSayac == 13) && (kapiSecimleri == 1)) {			// kapi kat sivici aktif ise tabla kapı hariç ayarlar gösterilir.
 8000932:	4b78      	ldr	r3, [pc, #480]	; (8000b14 <menu+0x24c>)
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	2b0d      	cmp	r3, #13
 8000938:	d106      	bne.n	8000948 <menu+0x80>
 800093a:	4b78      	ldr	r3, [pc, #480]	; (8000b1c <menu+0x254>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	2b01      	cmp	r3, #1
 8000940:	d102      	bne.n	8000948 <menu+0x80>
			menuSayac = 16;
 8000942:	4b74      	ldr	r3, [pc, #464]	; (8000b14 <menu+0x24c>)
 8000944:	2210      	movs	r2, #16
 8000946:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 9) && (kapiSecimleri == 2)) {			// tabla aktif ise kat harici kapılar gösterilir.
 8000948:	4b72      	ldr	r3, [pc, #456]	; (8000b14 <menu+0x24c>)
 800094a:	781b      	ldrb	r3, [r3, #0]
 800094c:	2b09      	cmp	r3, #9
 800094e:	d106      	bne.n	800095e <menu+0x96>
 8000950:	4b72      	ldr	r3, [pc, #456]	; (8000b1c <menu+0x254>)
 8000952:	781b      	ldrb	r3, [r3, #0]
 8000954:	2b02      	cmp	r3, #2
 8000956:	d102      	bne.n	800095e <menu+0x96>
			menuSayac = 13;
 8000958:	4b6e      	ldr	r3, [pc, #440]	; (8000b14 <menu+0x24c>)
 800095a:	220d      	movs	r2, #13
 800095c:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 800095e:	4b6d      	ldr	r3, [pc, #436]	; (8000b14 <menu+0x24c>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	2b0a      	cmp	r3, #10
 8000964:	d10a      	bne.n	800097c <menu+0xb4>
 8000966:	4b6e      	ldr	r3, [pc, #440]	; (8000b20 <menu+0x258>)
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	2b01      	cmp	r3, #1
 800096c:	d003      	beq.n	8000976 <menu+0xae>
 800096e:	4b6c      	ldr	r3, [pc, #432]	; (8000b20 <menu+0x258>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	2b02      	cmp	r3, #2
 8000974:	d102      	bne.n	800097c <menu+0xb4>
			menuSayac = 11;
 8000976:	4b67      	ldr	r3, [pc, #412]	; (8000b14 <menu+0x24c>)
 8000978:	220b      	movs	r2, #11
 800097a:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 1)) {
 800097c:	4b65      	ldr	r3, [pc, #404]	; (8000b14 <menu+0x24c>)
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	2b0c      	cmp	r3, #12
 8000982:	d10e      	bne.n	80009a2 <menu+0xda>
 8000984:	4b67      	ldr	r3, [pc, #412]	; (8000b24 <menu+0x25c>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	2b01      	cmp	r3, #1
 800098a:	d003      	beq.n	8000994 <menu+0xcc>
 800098c:	4b65      	ldr	r3, [pc, #404]	; (8000b24 <menu+0x25c>)
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	2b02      	cmp	r3, #2
 8000992:	d106      	bne.n	80009a2 <menu+0xda>
 8000994:	4b61      	ldr	r3, [pc, #388]	; (8000b1c <menu+0x254>)
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	2b01      	cmp	r3, #1
 800099a:	d102      	bne.n	80009a2 <menu+0xda>
			menuSayac = 16;
 800099c:	4b5d      	ldr	r3, [pc, #372]	; (8000b14 <menu+0x24c>)
 800099e:	2210      	movs	r2, #16
 80009a0:	701a      	strb	r2, [r3, #0]
		}
		if((menuSayac == 12) && ((kapi2Tip == 1)  ||  (kapi2Tip == 2)) && (kapiSecimleri == 3)) {
 80009a2:	4b5c      	ldr	r3, [pc, #368]	; (8000b14 <menu+0x24c>)
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	2b0c      	cmp	r3, #12
 80009a8:	d10e      	bne.n	80009c8 <menu+0x100>
 80009aa:	4b5e      	ldr	r3, [pc, #376]	; (8000b24 <menu+0x25c>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d003      	beq.n	80009ba <menu+0xf2>
 80009b2:	4b5c      	ldr	r3, [pc, #368]	; (8000b24 <menu+0x25c>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	2b02      	cmp	r3, #2
 80009b8:	d106      	bne.n	80009c8 <menu+0x100>
 80009ba:	4b58      	ldr	r3, [pc, #352]	; (8000b1c <menu+0x254>)
 80009bc:	781b      	ldrb	r3, [r3, #0]
 80009be:	2b03      	cmp	r3, #3
 80009c0:	d102      	bne.n	80009c8 <menu+0x100>
			menuSayac = 13;
 80009c2:	4b54      	ldr	r3, [pc, #336]	; (8000b14 <menu+0x24c>)
 80009c4:	220d      	movs	r2, #13
 80009c6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 80009c8:	4b52      	ldr	r3, [pc, #328]	; (8000b14 <menu+0x24c>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	2b0f      	cmp	r3, #15
 80009ce:	d106      	bne.n	80009de <menu+0x116>
 80009d0:	4b55      	ldr	r3, [pc, #340]	; (8000b28 <menu+0x260>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d102      	bne.n	80009de <menu+0x116>
			menuSayac = 16;
 80009d8:	4b4e      	ldr	r3, [pc, #312]	; (8000b14 <menu+0x24c>)
 80009da:	2210      	movs	r2, #16
 80009dc:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 24) && (devirmeYuruyusSecim == 0)) {
 80009de:	4b4d      	ldr	r3, [pc, #308]	; (8000b14 <menu+0x24c>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	2b18      	cmp	r3, #24
 80009e4:	d106      	bne.n	80009f4 <menu+0x12c>
 80009e6:	4b4c      	ldr	r3, [pc, #304]	; (8000b18 <menu+0x250>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d102      	bne.n	80009f4 <menu+0x12c>
			menuSayac = 26;
 80009ee:	4b49      	ldr	r3, [pc, #292]	; (8000b14 <menu+0x24c>)
 80009f0:	221a      	movs	r2, #26
 80009f2:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 80009f4:	f004 fadc 	bl	8004fb0 <bekle>
	}

	if ((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (butonKontrol == 0)) {
 80009f8:	2108      	movs	r1, #8
 80009fa:	484c      	ldr	r0, [pc, #304]	; (8000b2c <menu+0x264>)
 80009fc:	f007 ffe8 	bl	80089d0 <HAL_GPIO_ReadPin>
 8000a00:	4603      	mov	r3, r0
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d175      	bne.n	8000af2 <menu+0x22a>
 8000a06:	4b42      	ldr	r3, [pc, #264]	; (8000b10 <menu+0x248>)
 8000a08:	781b      	ldrb	r3, [r3, #0]
 8000a0a:	f083 0301 	eor.w	r3, r3, #1
 8000a0e:	b2db      	uxtb	r3, r3
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d06e      	beq.n	8000af2 <menu+0x22a>
		if (menuSayac <= 1) {
 8000a14:	4b3f      	ldr	r3, [pc, #252]	; (8000b14 <menu+0x24c>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	2b01      	cmp	r3, #1
 8000a1a:	d802      	bhi.n	8000a22 <menu+0x15a>
			menuSayac = 32;     //MENÜ BÜYÜDÜKÇE DUZENLE
 8000a1c:	4b3d      	ldr	r3, [pc, #244]	; (8000b14 <menu+0x24c>)
 8000a1e:	2220      	movs	r2, #32
 8000a20:	701a      	strb	r2, [r3, #0]
		}

		menuSayac = menuSayac - 1;
 8000a22:	4b3c      	ldr	r3, [pc, #240]	; (8000b14 <menu+0x24c>)
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	3b01      	subs	r3, #1
 8000a28:	b2da      	uxtb	r2, r3
 8000a2a:	4b3a      	ldr	r3, [pc, #232]	; (8000b14 <menu+0x24c>)
 8000a2c:	701a      	strb	r2, [r3, #0]

		if((menuSayac == 20) && (devirmeYuruyusSecim == 0)) {
 8000a2e:	4b39      	ldr	r3, [pc, #228]	; (8000b14 <menu+0x24c>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	2b14      	cmp	r3, #20
 8000a34:	d106      	bne.n	8000a44 <menu+0x17c>
 8000a36:	4b38      	ldr	r3, [pc, #224]	; (8000b18 <menu+0x250>)
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d102      	bne.n	8000a44 <menu+0x17c>
			menuSayac = 17;
 8000a3e:	4b35      	ldr	r3, [pc, #212]	; (8000b14 <menu+0x24c>)
 8000a40:	2211      	movs	r2, #17
 8000a42:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 0)) {
 8000a44:	4b33      	ldr	r3, [pc, #204]	; (8000b14 <menu+0x24c>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b0f      	cmp	r3, #15
 8000a4a:	d106      	bne.n	8000a5a <menu+0x192>
 8000a4c:	4b33      	ldr	r3, [pc, #204]	; (8000b1c <menu+0x254>)
 8000a4e:	781b      	ldrb	r3, [r3, #0]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d102      	bne.n	8000a5a <menu+0x192>
			menuSayac = 7;
 8000a54:	4b2f      	ldr	r3, [pc, #188]	; (8000b14 <menu+0x24c>)
 8000a56:	2207      	movs	r2, #7
 8000a58:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapiSecimleri == 1)) {
 8000a5a:	4b2e      	ldr	r3, [pc, #184]	; (8000b14 <menu+0x24c>)
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	2b0f      	cmp	r3, #15
 8000a60:	d106      	bne.n	8000a70 <menu+0x1a8>
 8000a62:	4b2e      	ldr	r3, [pc, #184]	; (8000b1c <menu+0x254>)
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	2b01      	cmp	r3, #1
 8000a68:	d102      	bne.n	8000a70 <menu+0x1a8>
			menuSayac = 12;
 8000a6a:	4b2a      	ldr	r3, [pc, #168]	; (8000b14 <menu+0x24c>)
 8000a6c:	220c      	movs	r2, #12
 8000a6e:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && (kapiSecimleri == 2)) {
 8000a70:	4b28      	ldr	r3, [pc, #160]	; (8000b14 <menu+0x24c>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	2b0c      	cmp	r3, #12
 8000a76:	d106      	bne.n	8000a86 <menu+0x1be>
 8000a78:	4b28      	ldr	r3, [pc, #160]	; (8000b1c <menu+0x254>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b02      	cmp	r3, #2
 8000a7e:	d102      	bne.n	8000a86 <menu+0x1be>
			menuSayac = 8;
 8000a80:	4b24      	ldr	r3, [pc, #144]	; (8000b14 <menu+0x24c>)
 8000a82:	2208      	movs	r2, #8
 8000a84:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 10) && ((kapi1Tip == 1) || (kapi1Tip == 2))) {
 8000a86:	4b23      	ldr	r3, [pc, #140]	; (8000b14 <menu+0x24c>)
 8000a88:	781b      	ldrb	r3, [r3, #0]
 8000a8a:	2b0a      	cmp	r3, #10
 8000a8c:	d10a      	bne.n	8000aa4 <menu+0x1dc>
 8000a8e:	4b24      	ldr	r3, [pc, #144]	; (8000b20 <menu+0x258>)
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d003      	beq.n	8000a9e <menu+0x1d6>
 8000a96:	4b22      	ldr	r3, [pc, #136]	; (8000b20 <menu+0x258>)
 8000a98:	781b      	ldrb	r3, [r3, #0]
 8000a9a:	2b02      	cmp	r3, #2
 8000a9c:	d102      	bne.n	8000aa4 <menu+0x1dc>
			menuSayac = 9;
 8000a9e:	4b1d      	ldr	r3, [pc, #116]	; (8000b14 <menu+0x24c>)
 8000aa0:	2209      	movs	r2, #9
 8000aa2:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 12) && ((kapi2Tip == 1) || (kapi2Tip == 2))) {
 8000aa4:	4b1b      	ldr	r3, [pc, #108]	; (8000b14 <menu+0x24c>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2b0c      	cmp	r3, #12
 8000aaa:	d10a      	bne.n	8000ac2 <menu+0x1fa>
 8000aac:	4b1d      	ldr	r3, [pc, #116]	; (8000b24 <menu+0x25c>)
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d003      	beq.n	8000abc <menu+0x1f4>
 8000ab4:	4b1b      	ldr	r3, [pc, #108]	; (8000b24 <menu+0x25c>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b02      	cmp	r3, #2
 8000aba:	d102      	bne.n	8000ac2 <menu+0x1fa>
			menuSayac = 11;
 8000abc:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <menu+0x24c>)
 8000abe:	220b      	movs	r2, #11
 8000ac0:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 15) && (kapitablaTip == 1)) {
 8000ac2:	4b14      	ldr	r3, [pc, #80]	; (8000b14 <menu+0x24c>)
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	2b0f      	cmp	r3, #15
 8000ac8:	d106      	bne.n	8000ad8 <menu+0x210>
 8000aca:	4b17      	ldr	r3, [pc, #92]	; (8000b28 <menu+0x260>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d102      	bne.n	8000ad8 <menu+0x210>
			menuSayac = 14;
 8000ad2:	4b10      	ldr	r3, [pc, #64]	; (8000b14 <menu+0x24c>)
 8000ad4:	220e      	movs	r2, #14
 8000ad6:	701a      	strb	r2, [r3, #0]
		}

		if((menuSayac == 25) && (devirmeYuruyusSecim == 0)) {
 8000ad8:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <menu+0x24c>)
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	2b19      	cmp	r3, #25
 8000ade:	d106      	bne.n	8000aee <menu+0x226>
 8000ae0:	4b0d      	ldr	r3, [pc, #52]	; (8000b18 <menu+0x250>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d102      	bne.n	8000aee <menu+0x226>
			menuSayac = 23;
 8000ae8:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <menu+0x24c>)
 8000aea:	2217      	movs	r2, #23
 8000aec:	701a      	strb	r2, [r3, #0]
		}

		bekle();
 8000aee:	f004 fa5f 	bl	8004fb0 <bekle>
	}

	if (menuSayac == 0) {
 8000af2:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <menu+0x24c>)
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d134      	bne.n	8000b64 <menu+0x29c>
		if(dilSecim == 0) {
 8000afa:	4b0d      	ldr	r3, [pc, #52]	; (8000b30 <menu+0x268>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d122      	bne.n	8000b48 <menu+0x280>
			lcd_print(1, 1, "MENUYE  GiRDiNiZ");
 8000b02:	4a0c      	ldr	r2, [pc, #48]	; (8000b34 <menu+0x26c>)
 8000b04:	2101      	movs	r1, #1
 8000b06:	2001      	movs	r0, #1
 8000b08:	e016      	b.n	8000b38 <menu+0x270>
 8000b0a:	bf00      	nop
 8000b0c:	40010800 	.word	0x40010800
 8000b10:	20000b3e 	.word	0x20000b3e
 8000b14:	20000b10 	.word	0x20000b10
 8000b18:	20000b1f 	.word	0x20000b1f
 8000b1c:	20000b18 	.word	0x20000b18
 8000b20:	20000b19 	.word	0x20000b19
 8000b24:	20000b1a 	.word	0x20000b1a
 8000b28:	20000b1b 	.word	0x20000b1b
 8000b2c:	40011000 	.word	0x40011000
 8000b30:	20000b30 	.word	0x20000b30
 8000b34:	0800c3e0 	.word	0x0800c3e0
 8000b38:	f7ff fe65 	bl	8000806 <lcd_print>
			lcd_print(2, 1, "    AYARLAR     ");
 8000b3c:	4a94      	ldr	r2, [pc, #592]	; (8000d90 <menu+0x4c8>)
 8000b3e:	2101      	movs	r1, #1
 8000b40:	2002      	movs	r0, #2
 8000b42:	f7ff fe60 	bl	8000806 <lcd_print>
 8000b46:	e00d      	b.n	8000b64 <menu+0x29c>
		} else if(dilSecim  ==  1) {
 8000b48:	4b92      	ldr	r3, [pc, #584]	; (8000d94 <menu+0x4cc>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	2b01      	cmp	r3, #1
 8000b4e:	d109      	bne.n	8000b64 <menu+0x29c>
			lcd_print(1, 1, "ENTERED THE MENU");
 8000b50:	4a91      	ldr	r2, [pc, #580]	; (8000d98 <menu+0x4d0>)
 8000b52:	2101      	movs	r1, #1
 8000b54:	2001      	movs	r0, #1
 8000b56:	f7ff fe56 	bl	8000806 <lcd_print>
			lcd_print(2, 1, "    SETTINGS    ");
 8000b5a:	4a90      	ldr	r2, [pc, #576]	; (8000d9c <menu+0x4d4>)
 8000b5c:	2101      	movs	r1, #1
 8000b5e:	2002      	movs	r0, #2
 8000b60:	f7ff fe51 	bl	8000806 <lcd_print>
		}
	}

	if (menuSayac == 1) {
 8000b64:	4b8e      	ldr	r3, [pc, #568]	; (8000da0 <menu+0x4d8>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	2b01      	cmp	r3, #1
 8000b6a:	f040 82b5 	bne.w	80010d8 <menu+0x810>
		if(dilSecim == 0) {
 8000b6e:	4b89      	ldr	r3, [pc, #548]	; (8000d94 <menu+0x4cc>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d105      	bne.n	8000b82 <menu+0x2ba>
			lcd_print(1, 1, "HATA KAYIT LiST.");
 8000b76:	4a8b      	ldr	r2, [pc, #556]	; (8000da4 <menu+0x4dc>)
 8000b78:	2101      	movs	r1, #1
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	f7ff fe43 	bl	8000806 <lcd_print>
 8000b80:	e008      	b.n	8000b94 <menu+0x2cc>
		} else if(dilSecim == 1) {
 8000b82:	4b84      	ldr	r3, [pc, #528]	; (8000d94 <menu+0x4cc>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d104      	bne.n	8000b94 <menu+0x2cc>
			lcd_print(1, 1, "ERROR SAVE LiST.");
 8000b8a:	4a87      	ldr	r2, [pc, #540]	; (8000da8 <menu+0x4e0>)
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	2001      	movs	r0, #1
 8000b90:	f7ff fe39 	bl	8000806 <lcd_print>
		}

		if(hataGostermeSirasi == 0) {
 8000b94:	4b85      	ldr	r3, [pc, #532]	; (8000dac <menu+0x4e4>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d123      	bne.n	8000be4 <menu+0x31c>
			if(dilSecim == 0) {
 8000b9c:	4b7d      	ldr	r3, [pc, #500]	; (8000d94 <menu+0x4cc>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d105      	bne.n	8000bb0 <menu+0x2e8>
				lcd_print(2, 1, "1.Hata Kodu: ");
 8000ba4:	4a82      	ldr	r2, [pc, #520]	; (8000db0 <menu+0x4e8>)
 8000ba6:	2101      	movs	r1, #1
 8000ba8:	2002      	movs	r0, #2
 8000baa:	f7ff fe2c 	bl	8000806 <lcd_print>
 8000bae:	e008      	b.n	8000bc2 <menu+0x2fa>

			} else if(dilSecim == 1) {
 8000bb0:	4b78      	ldr	r3, [pc, #480]	; (8000d94 <menu+0x4cc>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b01      	cmp	r3, #1
 8000bb6:	d104      	bne.n	8000bc2 <menu+0x2fa>
				lcd_print(2, 1, "1.Error Code:");
 8000bb8:	4a7e      	ldr	r2, [pc, #504]	; (8000db4 <menu+0x4ec>)
 8000bba:	2101      	movs	r1, #1
 8000bbc:	2002      	movs	r0, #2
 8000bbe:	f7ff fe22 	bl	8000806 <lcd_print>
			}
			lcd_print(2, 15, "   ");
 8000bc2:	4a7d      	ldr	r2, [pc, #500]	; (8000db8 <menu+0x4f0>)
 8000bc4:	210f      	movs	r1, #15
 8000bc6:	2002      	movs	r0, #2
 8000bc8:	f7ff fe1d 	bl	8000806 <lcd_print>
			itoa(hataKayit1, snum, 10);
 8000bcc:	4b7b      	ldr	r3, [pc, #492]	; (8000dbc <menu+0x4f4>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	220a      	movs	r2, #10
 8000bd2:	497b      	ldr	r1, [pc, #492]	; (8000dc0 <menu+0x4f8>)
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f00a fef1 	bl	800b9bc <itoa>
			lcd_print(2, 14, snum);
 8000bda:	4a79      	ldr	r2, [pc, #484]	; (8000dc0 <menu+0x4f8>)
 8000bdc:	210e      	movs	r1, #14
 8000bde:	2002      	movs	r0, #2
 8000be0:	f7ff fe11 	bl	8000806 <lcd_print>
		}

		if(hataGostermeSirasi == 1) {
 8000be4:	4b71      	ldr	r3, [pc, #452]	; (8000dac <menu+0x4e4>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	2b01      	cmp	r3, #1
 8000bea:	d123      	bne.n	8000c34 <menu+0x36c>
			if(dilSecim == 0) {
 8000bec:	4b69      	ldr	r3, [pc, #420]	; (8000d94 <menu+0x4cc>)
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d105      	bne.n	8000c00 <menu+0x338>
				lcd_print(2, 1, "2.Hata Kodu: ");
 8000bf4:	4a73      	ldr	r2, [pc, #460]	; (8000dc4 <menu+0x4fc>)
 8000bf6:	2101      	movs	r1, #1
 8000bf8:	2002      	movs	r0, #2
 8000bfa:	f7ff fe04 	bl	8000806 <lcd_print>
 8000bfe:	e008      	b.n	8000c12 <menu+0x34a>
			} else if(dilSecim == 1) {
 8000c00:	4b64      	ldr	r3, [pc, #400]	; (8000d94 <menu+0x4cc>)
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d104      	bne.n	8000c12 <menu+0x34a>
				lcd_print(2, 1, "2.Error Code:");
 8000c08:	4a6f      	ldr	r2, [pc, #444]	; (8000dc8 <menu+0x500>)
 8000c0a:	2101      	movs	r1, #1
 8000c0c:	2002      	movs	r0, #2
 8000c0e:	f7ff fdfa 	bl	8000806 <lcd_print>

			}
			lcd_print(2, 15, "  ");
 8000c12:	4a6e      	ldr	r2, [pc, #440]	; (8000dcc <menu+0x504>)
 8000c14:	210f      	movs	r1, #15
 8000c16:	2002      	movs	r0, #2
 8000c18:	f7ff fdf5 	bl	8000806 <lcd_print>
			itoa(hataKayit2, snum, 10);
 8000c1c:	4b6c      	ldr	r3, [pc, #432]	; (8000dd0 <menu+0x508>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	220a      	movs	r2, #10
 8000c22:	4967      	ldr	r1, [pc, #412]	; (8000dc0 <menu+0x4f8>)
 8000c24:	4618      	mov	r0, r3
 8000c26:	f00a fec9 	bl	800b9bc <itoa>
			lcd_print(2, 14, snum);
 8000c2a:	4a65      	ldr	r2, [pc, #404]	; (8000dc0 <menu+0x4f8>)
 8000c2c:	210e      	movs	r1, #14
 8000c2e:	2002      	movs	r0, #2
 8000c30:	f7ff fde9 	bl	8000806 <lcd_print>
		}

		if(hataGostermeSirasi == 2){
 8000c34:	4b5d      	ldr	r3, [pc, #372]	; (8000dac <menu+0x4e4>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	2b02      	cmp	r3, #2
 8000c3a:	d123      	bne.n	8000c84 <menu+0x3bc>
			if(dilSecim == 0) {
 8000c3c:	4b55      	ldr	r3, [pc, #340]	; (8000d94 <menu+0x4cc>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d105      	bne.n	8000c50 <menu+0x388>
				lcd_print(2, 1, "3.Hata Kodu: ");
 8000c44:	4a63      	ldr	r2, [pc, #396]	; (8000dd4 <menu+0x50c>)
 8000c46:	2101      	movs	r1, #1
 8000c48:	2002      	movs	r0, #2
 8000c4a:	f7ff fddc 	bl	8000806 <lcd_print>
 8000c4e:	e008      	b.n	8000c62 <menu+0x39a>
			} else if(dilSecim == 1) {
 8000c50:	4b50      	ldr	r3, [pc, #320]	; (8000d94 <menu+0x4cc>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b01      	cmp	r3, #1
 8000c56:	d104      	bne.n	8000c62 <menu+0x39a>
				lcd_print(2, 1, "3.Error Code:");
 8000c58:	4a5f      	ldr	r2, [pc, #380]	; (8000dd8 <menu+0x510>)
 8000c5a:	2101      	movs	r1, #1
 8000c5c:	2002      	movs	r0, #2
 8000c5e:	f7ff fdd2 	bl	8000806 <lcd_print>

			}
			lcd_print(2, 15, "  ");
 8000c62:	4a5a      	ldr	r2, [pc, #360]	; (8000dcc <menu+0x504>)
 8000c64:	210f      	movs	r1, #15
 8000c66:	2002      	movs	r0, #2
 8000c68:	f7ff fdcd 	bl	8000806 <lcd_print>
			itoa(hataKayit3, snum, 10);
 8000c6c:	4b5b      	ldr	r3, [pc, #364]	; (8000ddc <menu+0x514>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	220a      	movs	r2, #10
 8000c72:	4953      	ldr	r1, [pc, #332]	; (8000dc0 <menu+0x4f8>)
 8000c74:	4618      	mov	r0, r3
 8000c76:	f00a fea1 	bl	800b9bc <itoa>
			lcd_print(2, 14, snum);
 8000c7a:	4a51      	ldr	r2, [pc, #324]	; (8000dc0 <menu+0x4f8>)
 8000c7c:	210e      	movs	r1, #14
 8000c7e:	2002      	movs	r0, #2
 8000c80:	f7ff fdc1 	bl	8000806 <lcd_print>
		}

		if(hataGostermeSirasi == 3) {
 8000c84:	4b49      	ldr	r3, [pc, #292]	; (8000dac <menu+0x4e4>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	2b03      	cmp	r3, #3
 8000c8a:	d123      	bne.n	8000cd4 <menu+0x40c>
			if(dilSecim == 0) {
 8000c8c:	4b41      	ldr	r3, [pc, #260]	; (8000d94 <menu+0x4cc>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d105      	bne.n	8000ca0 <menu+0x3d8>
				lcd_print(2, 1, "4.Hata Kodu: ");
 8000c94:	4a52      	ldr	r2, [pc, #328]	; (8000de0 <menu+0x518>)
 8000c96:	2101      	movs	r1, #1
 8000c98:	2002      	movs	r0, #2
 8000c9a:	f7ff fdb4 	bl	8000806 <lcd_print>
 8000c9e:	e008      	b.n	8000cb2 <menu+0x3ea>
			} else if(dilSecim == 1) {
 8000ca0:	4b3c      	ldr	r3, [pc, #240]	; (8000d94 <menu+0x4cc>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	2b01      	cmp	r3, #1
 8000ca6:	d104      	bne.n	8000cb2 <menu+0x3ea>
				lcd_print(2, 1, "4.Error Code:");
 8000ca8:	4a4e      	ldr	r2, [pc, #312]	; (8000de4 <menu+0x51c>)
 8000caa:	2101      	movs	r1, #1
 8000cac:	2002      	movs	r0, #2
 8000cae:	f7ff fdaa 	bl	8000806 <lcd_print>

			}
			lcd_print(2, 15, "  ");
 8000cb2:	4a46      	ldr	r2, [pc, #280]	; (8000dcc <menu+0x504>)
 8000cb4:	210f      	movs	r1, #15
 8000cb6:	2002      	movs	r0, #2
 8000cb8:	f7ff fda5 	bl	8000806 <lcd_print>
			itoa(hataKayit4, snum, 10);
 8000cbc:	4b4a      	ldr	r3, [pc, #296]	; (8000de8 <menu+0x520>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	220a      	movs	r2, #10
 8000cc2:	493f      	ldr	r1, [pc, #252]	; (8000dc0 <menu+0x4f8>)
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f00a fe79 	bl	800b9bc <itoa>
			lcd_print(2, 14, snum);
 8000cca:	4a3d      	ldr	r2, [pc, #244]	; (8000dc0 <menu+0x4f8>)
 8000ccc:	210e      	movs	r1, #14
 8000cce:	2002      	movs	r0, #2
 8000cd0:	f7ff fd99 	bl	8000806 <lcd_print>
		}

		if(hataGostermeSirasi == 4) {
 8000cd4:	4b35      	ldr	r3, [pc, #212]	; (8000dac <menu+0x4e4>)
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	2b04      	cmp	r3, #4
 8000cda:	d123      	bne.n	8000d24 <menu+0x45c>
			if(dilSecim == 0) {
 8000cdc:	4b2d      	ldr	r3, [pc, #180]	; (8000d94 <menu+0x4cc>)
 8000cde:	781b      	ldrb	r3, [r3, #0]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d105      	bne.n	8000cf0 <menu+0x428>
				lcd_print(2, 1, "5.Hata Kodu: ");
 8000ce4:	4a41      	ldr	r2, [pc, #260]	; (8000dec <menu+0x524>)
 8000ce6:	2101      	movs	r1, #1
 8000ce8:	2002      	movs	r0, #2
 8000cea:	f7ff fd8c 	bl	8000806 <lcd_print>
 8000cee:	e008      	b.n	8000d02 <menu+0x43a>
			} else if(dilSecim == 1) {
 8000cf0:	4b28      	ldr	r3, [pc, #160]	; (8000d94 <menu+0x4cc>)
 8000cf2:	781b      	ldrb	r3, [r3, #0]
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d104      	bne.n	8000d02 <menu+0x43a>
				lcd_print(2, 1, "5.Error Code:");
 8000cf8:	4a3d      	ldr	r2, [pc, #244]	; (8000df0 <menu+0x528>)
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	2002      	movs	r0, #2
 8000cfe:	f7ff fd82 	bl	8000806 <lcd_print>

			}
			lcd_print(2, 15, "  ");
 8000d02:	4a32      	ldr	r2, [pc, #200]	; (8000dcc <menu+0x504>)
 8000d04:	210f      	movs	r1, #15
 8000d06:	2002      	movs	r0, #2
 8000d08:	f7ff fd7d 	bl	8000806 <lcd_print>
			itoa(hataKayit5, snum, 10);
 8000d0c:	4b39      	ldr	r3, [pc, #228]	; (8000df4 <menu+0x52c>)
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	220a      	movs	r2, #10
 8000d12:	492b      	ldr	r1, [pc, #172]	; (8000dc0 <menu+0x4f8>)
 8000d14:	4618      	mov	r0, r3
 8000d16:	f00a fe51 	bl	800b9bc <itoa>
			lcd_print(2, 14, snum);
 8000d1a:	4a29      	ldr	r2, [pc, #164]	; (8000dc0 <menu+0x4f8>)
 8000d1c:	210e      	movs	r1, #14
 8000d1e:	2002      	movs	r0, #2
 8000d20:	f7ff fd71 	bl	8000806 <lcd_print>
		}

		if(hataGostermeSirasi == 5) {
 8000d24:	4b21      	ldr	r3, [pc, #132]	; (8000dac <menu+0x4e4>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b05      	cmp	r3, #5
 8000d2a:	d123      	bne.n	8000d74 <menu+0x4ac>
			if(dilSecim == 0) {
 8000d2c:	4b19      	ldr	r3, [pc, #100]	; (8000d94 <menu+0x4cc>)
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d105      	bne.n	8000d40 <menu+0x478>
				lcd_print(2, 1, "6.Hata Kodu: ");
 8000d34:	4a30      	ldr	r2, [pc, #192]	; (8000df8 <menu+0x530>)
 8000d36:	2101      	movs	r1, #1
 8000d38:	2002      	movs	r0, #2
 8000d3a:	f7ff fd64 	bl	8000806 <lcd_print>
 8000d3e:	e008      	b.n	8000d52 <menu+0x48a>
			} else if(dilSecim == 1) {
 8000d40:	4b14      	ldr	r3, [pc, #80]	; (8000d94 <menu+0x4cc>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b01      	cmp	r3, #1
 8000d46:	d104      	bne.n	8000d52 <menu+0x48a>
				lcd_print(2, 1, "6.Error Code:");
 8000d48:	4a2c      	ldr	r2, [pc, #176]	; (8000dfc <menu+0x534>)
 8000d4a:	2101      	movs	r1, #1
 8000d4c:	2002      	movs	r0, #2
 8000d4e:	f7ff fd5a 	bl	8000806 <lcd_print>

			}
			lcd_print(2, 15, "  ");
 8000d52:	4a1e      	ldr	r2, [pc, #120]	; (8000dcc <menu+0x504>)
 8000d54:	210f      	movs	r1, #15
 8000d56:	2002      	movs	r0, #2
 8000d58:	f7ff fd55 	bl	8000806 <lcd_print>
			itoa(hataKayit6, snum, 10);
 8000d5c:	4b28      	ldr	r3, [pc, #160]	; (8000e00 <menu+0x538>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	220a      	movs	r2, #10
 8000d62:	4917      	ldr	r1, [pc, #92]	; (8000dc0 <menu+0x4f8>)
 8000d64:	4618      	mov	r0, r3
 8000d66:	f00a fe29 	bl	800b9bc <itoa>
			lcd_print(2, 14, snum);
 8000d6a:	4a15      	ldr	r2, [pc, #84]	; (8000dc0 <menu+0x4f8>)
 8000d6c:	210e      	movs	r1, #14
 8000d6e:	2002      	movs	r0, #2
 8000d70:	f7ff fd49 	bl	8000806 <lcd_print>
		}

		if(hataGostermeSirasi == 6) {
 8000d74:	4b0d      	ldr	r3, [pc, #52]	; (8000dac <menu+0x4e4>)
 8000d76:	781b      	ldrb	r3, [r3, #0]
 8000d78:	2b06      	cmp	r3, #6
 8000d7a:	d15f      	bne.n	8000e3c <menu+0x574>
			if(dilSecim == 0) {
 8000d7c:	4b05      	ldr	r3, [pc, #20]	; (8000d94 <menu+0x4cc>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d141      	bne.n	8000e08 <menu+0x540>
				lcd_print(2, 1, "7.Hata Kodu: ");
 8000d84:	4a1f      	ldr	r2, [pc, #124]	; (8000e04 <menu+0x53c>)
 8000d86:	2101      	movs	r1, #1
 8000d88:	2002      	movs	r0, #2
 8000d8a:	f7ff fd3c 	bl	8000806 <lcd_print>
 8000d8e:	e044      	b.n	8000e1a <menu+0x552>
 8000d90:	0800c3f4 	.word	0x0800c3f4
 8000d94:	20000b30 	.word	0x20000b30
 8000d98:	0800c408 	.word	0x0800c408
 8000d9c:	0800c41c 	.word	0x0800c41c
 8000da0:	20000b10 	.word	0x20000b10
 8000da4:	0800c430 	.word	0x0800c430
 8000da8:	0800c444 	.word	0x0800c444
 8000dac:	20000b12 	.word	0x20000b12
 8000db0:	0800c458 	.word	0x0800c458
 8000db4:	0800c468 	.word	0x0800c468
 8000db8:	0800c478 	.word	0x0800c478
 8000dbc:	20000b31 	.word	0x20000b31
 8000dc0:	20000ae4 	.word	0x20000ae4
 8000dc4:	0800c47c 	.word	0x0800c47c
 8000dc8:	0800c48c 	.word	0x0800c48c
 8000dcc:	0800c49c 	.word	0x0800c49c
 8000dd0:	20000b32 	.word	0x20000b32
 8000dd4:	0800c4a0 	.word	0x0800c4a0
 8000dd8:	0800c4b0 	.word	0x0800c4b0
 8000ddc:	20000b33 	.word	0x20000b33
 8000de0:	0800c4c0 	.word	0x0800c4c0
 8000de4:	0800c4d0 	.word	0x0800c4d0
 8000de8:	20000b34 	.word	0x20000b34
 8000dec:	0800c4e0 	.word	0x0800c4e0
 8000df0:	0800c4f0 	.word	0x0800c4f0
 8000df4:	20000b35 	.word	0x20000b35
 8000df8:	0800c500 	.word	0x0800c500
 8000dfc:	0800c510 	.word	0x0800c510
 8000e00:	20000b36 	.word	0x20000b36
 8000e04:	0800c520 	.word	0x0800c520
			} else if(dilSecim == 1) {
 8000e08:	4b4f      	ldr	r3, [pc, #316]	; (8000f48 <menu+0x680>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	2b01      	cmp	r3, #1
 8000e0e:	d104      	bne.n	8000e1a <menu+0x552>
				lcd_print(2, 1, "7.Error Code:");
 8000e10:	4a4e      	ldr	r2, [pc, #312]	; (8000f4c <menu+0x684>)
 8000e12:	2101      	movs	r1, #1
 8000e14:	2002      	movs	r0, #2
 8000e16:	f7ff fcf6 	bl	8000806 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000e1a:	4a4d      	ldr	r2, [pc, #308]	; (8000f50 <menu+0x688>)
 8000e1c:	210f      	movs	r1, #15
 8000e1e:	2002      	movs	r0, #2
 8000e20:	f7ff fcf1 	bl	8000806 <lcd_print>
			itoa(hataKayit7, snum, 10);
 8000e24:	4b4b      	ldr	r3, [pc, #300]	; (8000f54 <menu+0x68c>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	220a      	movs	r2, #10
 8000e2a:	494b      	ldr	r1, [pc, #300]	; (8000f58 <menu+0x690>)
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f00a fdc5 	bl	800b9bc <itoa>
			lcd_print(2, 14, snum);
 8000e32:	4a49      	ldr	r2, [pc, #292]	; (8000f58 <menu+0x690>)
 8000e34:	210e      	movs	r1, #14
 8000e36:	2002      	movs	r0, #2
 8000e38:	f7ff fce5 	bl	8000806 <lcd_print>
		}

		if(hataGostermeSirasi == 7) {
 8000e3c:	4b47      	ldr	r3, [pc, #284]	; (8000f5c <menu+0x694>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2b07      	cmp	r3, #7
 8000e42:	d123      	bne.n	8000e8c <menu+0x5c4>
			if(dilSecim == 0) {
 8000e44:	4b40      	ldr	r3, [pc, #256]	; (8000f48 <menu+0x680>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d105      	bne.n	8000e58 <menu+0x590>
				lcd_print(2, 1, "8.Hata Kodu: ");
 8000e4c:	4a44      	ldr	r2, [pc, #272]	; (8000f60 <menu+0x698>)
 8000e4e:	2101      	movs	r1, #1
 8000e50:	2002      	movs	r0, #2
 8000e52:	f7ff fcd8 	bl	8000806 <lcd_print>
 8000e56:	e008      	b.n	8000e6a <menu+0x5a2>
			} else if(dilSecim == 1) {
 8000e58:	4b3b      	ldr	r3, [pc, #236]	; (8000f48 <menu+0x680>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	2b01      	cmp	r3, #1
 8000e5e:	d104      	bne.n	8000e6a <menu+0x5a2>
				lcd_print(2, 1, "8.Error Code:");
 8000e60:	4a40      	ldr	r2, [pc, #256]	; (8000f64 <menu+0x69c>)
 8000e62:	2101      	movs	r1, #1
 8000e64:	2002      	movs	r0, #2
 8000e66:	f7ff fcce 	bl	8000806 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000e6a:	4a39      	ldr	r2, [pc, #228]	; (8000f50 <menu+0x688>)
 8000e6c:	210f      	movs	r1, #15
 8000e6e:	2002      	movs	r0, #2
 8000e70:	f7ff fcc9 	bl	8000806 <lcd_print>
			itoa(hataKayit8, snum, 10);
 8000e74:	4b3c      	ldr	r3, [pc, #240]	; (8000f68 <menu+0x6a0>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	220a      	movs	r2, #10
 8000e7a:	4937      	ldr	r1, [pc, #220]	; (8000f58 <menu+0x690>)
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f00a fd9d 	bl	800b9bc <itoa>
			lcd_print(2, 14, snum);
 8000e82:	4a35      	ldr	r2, [pc, #212]	; (8000f58 <menu+0x690>)
 8000e84:	210e      	movs	r1, #14
 8000e86:	2002      	movs	r0, #2
 8000e88:	f7ff fcbd 	bl	8000806 <lcd_print>
		}

		if(hataGostermeSirasi == 8) {
 8000e8c:	4b33      	ldr	r3, [pc, #204]	; (8000f5c <menu+0x694>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	2b08      	cmp	r3, #8
 8000e92:	d123      	bne.n	8000edc <menu+0x614>
			if(dilSecim == 0) {
 8000e94:	4b2c      	ldr	r3, [pc, #176]	; (8000f48 <menu+0x680>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d105      	bne.n	8000ea8 <menu+0x5e0>
				lcd_print(2, 1, "9.Hata Kodu: ");
 8000e9c:	4a33      	ldr	r2, [pc, #204]	; (8000f6c <menu+0x6a4>)
 8000e9e:	2101      	movs	r1, #1
 8000ea0:	2002      	movs	r0, #2
 8000ea2:	f7ff fcb0 	bl	8000806 <lcd_print>
 8000ea6:	e008      	b.n	8000eba <menu+0x5f2>
			} else if(dilSecim == 1) {
 8000ea8:	4b27      	ldr	r3, [pc, #156]	; (8000f48 <menu+0x680>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d104      	bne.n	8000eba <menu+0x5f2>
				lcd_print(2, 1, "9.Error Code:");
 8000eb0:	4a2f      	ldr	r2, [pc, #188]	; (8000f70 <menu+0x6a8>)
 8000eb2:	2101      	movs	r1, #1
 8000eb4:	2002      	movs	r0, #2
 8000eb6:	f7ff fca6 	bl	8000806 <lcd_print>
			}
			lcd_print(2, 15, "  ");
 8000eba:	4a25      	ldr	r2, [pc, #148]	; (8000f50 <menu+0x688>)
 8000ebc:	210f      	movs	r1, #15
 8000ebe:	2002      	movs	r0, #2
 8000ec0:	f7ff fca1 	bl	8000806 <lcd_print>
			itoa(hataKayit9, snum, 10);
 8000ec4:	4b2b      	ldr	r3, [pc, #172]	; (8000f74 <menu+0x6ac>)
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	220a      	movs	r2, #10
 8000eca:	4923      	ldr	r1, [pc, #140]	; (8000f58 <menu+0x690>)
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f00a fd75 	bl	800b9bc <itoa>
			lcd_print(2, 14, snum);
 8000ed2:	4a21      	ldr	r2, [pc, #132]	; (8000f58 <menu+0x690>)
 8000ed4:	210e      	movs	r1, #14
 8000ed6:	2002      	movs	r0, #2
 8000ed8:	f7ff fc95 	bl	8000806 <lcd_print>
		}

		if(hataGostermeSirasi == 9) {
 8000edc:	4b1f      	ldr	r3, [pc, #124]	; (8000f5c <menu+0x694>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	2b09      	cmp	r3, #9
 8000ee2:	d123      	bne.n	8000f2c <menu+0x664>
			if(dilSecim == 0) {
 8000ee4:	4b18      	ldr	r3, [pc, #96]	; (8000f48 <menu+0x680>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d105      	bne.n	8000ef8 <menu+0x630>
				lcd_print(2, 1, "10.Hata Kodu: ");
 8000eec:	4a22      	ldr	r2, [pc, #136]	; (8000f78 <menu+0x6b0>)
 8000eee:	2101      	movs	r1, #1
 8000ef0:	2002      	movs	r0, #2
 8000ef2:	f7ff fc88 	bl	8000806 <lcd_print>
 8000ef6:	e008      	b.n	8000f0a <menu+0x642>
			} else if(dilSecim == 1) {
 8000ef8:	4b13      	ldr	r3, [pc, #76]	; (8000f48 <menu+0x680>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	2b01      	cmp	r3, #1
 8000efe:	d104      	bne.n	8000f0a <menu+0x642>
				lcd_print(2, 1, "10.Error Code:");
 8000f00:	4a1e      	ldr	r2, [pc, #120]	; (8000f7c <menu+0x6b4>)
 8000f02:	2101      	movs	r1, #1
 8000f04:	2002      	movs	r0, #2
 8000f06:	f7ff fc7e 	bl	8000806 <lcd_print>

			}
			lcd_print(2, 16, " ");
 8000f0a:	4a1d      	ldr	r2, [pc, #116]	; (8000f80 <menu+0x6b8>)
 8000f0c:	2110      	movs	r1, #16
 8000f0e:	2002      	movs	r0, #2
 8000f10:	f7ff fc79 	bl	8000806 <lcd_print>
			itoa(hataKayit10, snum, 10);
 8000f14:	4b1b      	ldr	r3, [pc, #108]	; (8000f84 <menu+0x6bc>)
 8000f16:	781b      	ldrb	r3, [r3, #0]
 8000f18:	220a      	movs	r2, #10
 8000f1a:	490f      	ldr	r1, [pc, #60]	; (8000f58 <menu+0x690>)
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	f00a fd4d 	bl	800b9bc <itoa>
			lcd_print(2, 15, snum);
 8000f22:	4a0d      	ldr	r2, [pc, #52]	; (8000f58 <menu+0x690>)
 8000f24:	210f      	movs	r1, #15
 8000f26:	2002      	movs	r0, #2
 8000f28:	f7ff fc6d 	bl	8000806 <lcd_print>
		}

		if(hataGostermeSirasi == 10) {
 8000f2c:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <menu+0x694>)
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	2b0a      	cmp	r3, #10
 8000f32:	d134      	bne.n	8000f9e <menu+0x6d6>
			if(dilSecim == 0) {
 8000f34:	4b04      	ldr	r3, [pc, #16]	; (8000f48 <menu+0x680>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d127      	bne.n	8000f8c <menu+0x6c4>
				lcd_print(2, 1, "Silmek icin ent.");
 8000f3c:	4a12      	ldr	r2, [pc, #72]	; (8000f88 <menu+0x6c0>)
 8000f3e:	2101      	movs	r1, #1
 8000f40:	2002      	movs	r0, #2
 8000f42:	f7ff fc60 	bl	8000806 <lcd_print>
 8000f46:	e02a      	b.n	8000f9e <menu+0x6d6>
 8000f48:	20000b30 	.word	0x20000b30
 8000f4c:	0800c530 	.word	0x0800c530
 8000f50:	0800c49c 	.word	0x0800c49c
 8000f54:	20000b37 	.word	0x20000b37
 8000f58:	20000ae4 	.word	0x20000ae4
 8000f5c:	20000b12 	.word	0x20000b12
 8000f60:	0800c540 	.word	0x0800c540
 8000f64:	0800c550 	.word	0x0800c550
 8000f68:	20000b38 	.word	0x20000b38
 8000f6c:	0800c560 	.word	0x0800c560
 8000f70:	0800c570 	.word	0x0800c570
 8000f74:	20000b39 	.word	0x20000b39
 8000f78:	0800c580 	.word	0x0800c580
 8000f7c:	0800c590 	.word	0x0800c590
 8000f80:	0800c5a0 	.word	0x0800c5a0
 8000f84:	20000b3a 	.word	0x20000b3a
 8000f88:	0800c5a4 	.word	0x0800c5a4
			} else if(dilSecim == 1) {
 8000f8c:	4b82      	ldr	r3, [pc, #520]	; (8001198 <menu+0x8d0>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d104      	bne.n	8000f9e <menu+0x6d6>
				lcd_print(2, 1, "Del. press enter");
 8000f94:	4a81      	ldr	r2, [pc, #516]	; (800119c <menu+0x8d4>)
 8000f96:	2101      	movs	r1, #1
 8000f98:	2002      	movs	r0, #2
 8000f9a:	f7ff fc34 	bl	8000806 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8000f9e:	2102      	movs	r1, #2
 8000fa0:	487f      	ldr	r0, [pc, #508]	; (80011a0 <menu+0x8d8>)
 8000fa2:	f007 fd15 	bl	80089d0 <HAL_GPIO_ReadPin>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b01      	cmp	r3, #1
 8000faa:	d119      	bne.n	8000fe0 <menu+0x718>
 8000fac:	4b7d      	ldr	r3, [pc, #500]	; (80011a4 <menu+0x8dc>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	f083 0301 	eor.w	r3, r3, #1
 8000fb4:	b2db      	uxtb	r3, r3
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d012      	beq.n	8000fe0 <menu+0x718>
 8000fba:	4b7b      	ldr	r3, [pc, #492]	; (80011a8 <menu+0x8e0>)
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d10e      	bne.n	8000fe0 <menu+0x718>
			hataGostermeSirasi = hataGostermeSirasi + 1;
 8000fc2:	4b7a      	ldr	r3, [pc, #488]	; (80011ac <menu+0x8e4>)
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	b2da      	uxtb	r2, r3
 8000fca:	4b78      	ldr	r3, [pc, #480]	; (80011ac <menu+0x8e4>)
 8000fcc:	701a      	strb	r2, [r3, #0]

			if(hataGostermeSirasi > 10) {
 8000fce:	4b77      	ldr	r3, [pc, #476]	; (80011ac <menu+0x8e4>)
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	2b0a      	cmp	r3, #10
 8000fd4:	d902      	bls.n	8000fdc <menu+0x714>
				hataGostermeSirasi = 0;
 8000fd6:	4b75      	ldr	r3, [pc, #468]	; (80011ac <menu+0x8e4>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8000fdc:	f003 ffe8 	bl	8004fb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8000fe0:	2104      	movs	r1, #4
 8000fe2:	486f      	ldr	r0, [pc, #444]	; (80011a0 <menu+0x8d8>)
 8000fe4:	f007 fcf4 	bl	80089d0 <HAL_GPIO_ReadPin>
 8000fe8:	4603      	mov	r3, r0
 8000fea:	2b01      	cmp	r3, #1
 8000fec:	d119      	bne.n	8001022 <menu+0x75a>
 8000fee:	4b6d      	ldr	r3, [pc, #436]	; (80011a4 <menu+0x8dc>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	f083 0301 	eor.w	r3, r3, #1
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d012      	beq.n	8001022 <menu+0x75a>
 8000ffc:	4b6a      	ldr	r3, [pc, #424]	; (80011a8 <menu+0x8e0>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d10e      	bne.n	8001022 <menu+0x75a>
			hataGostermeSirasi = hataGostermeSirasi - 1;
 8001004:	4b69      	ldr	r3, [pc, #420]	; (80011ac <menu+0x8e4>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	3b01      	subs	r3, #1
 800100a:	b2da      	uxtb	r2, r3
 800100c:	4b67      	ldr	r3, [pc, #412]	; (80011ac <menu+0x8e4>)
 800100e:	701a      	strb	r2, [r3, #0]

	    	if(hataGostermeSirasi > 11) {
 8001010:	4b66      	ldr	r3, [pc, #408]	; (80011ac <menu+0x8e4>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b0b      	cmp	r3, #11
 8001016:	d902      	bls.n	800101e <menu+0x756>
	    		hataGostermeSirasi = 10;
 8001018:	4b64      	ldr	r3, [pc, #400]	; (80011ac <menu+0x8e4>)
 800101a:	220a      	movs	r2, #10
 800101c:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 800101e:	f003 ffc7 	bl	8004fb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0) &&  hataGostermeSirasi == 10) {
 8001022:	2108      	movs	r1, #8
 8001024:	485e      	ldr	r0, [pc, #376]	; (80011a0 <menu+0x8d8>)
 8001026:	f007 fcd3 	bl	80089d0 <HAL_GPIO_ReadPin>
 800102a:	4603      	mov	r3, r0
 800102c:	2b01      	cmp	r3, #1
 800102e:	d153      	bne.n	80010d8 <menu+0x810>
 8001030:	4b5c      	ldr	r3, [pc, #368]	; (80011a4 <menu+0x8dc>)
 8001032:	781b      	ldrb	r3, [r3, #0]
 8001034:	f083 0301 	eor.w	r3, r3, #1
 8001038:	b2db      	uxtb	r3, r3
 800103a:	2b00      	cmp	r3, #0
 800103c:	d04c      	beq.n	80010d8 <menu+0x810>
 800103e:	4b5b      	ldr	r3, [pc, #364]	; (80011ac <menu+0x8e4>)
 8001040:	781b      	ldrb	r3, [r3, #0]
 8001042:	2b0a      	cmp	r3, #10
 8001044:	d148      	bne.n	80010d8 <menu+0x810>
			hataKayit1 = 0; eepromData[37] = 0;
 8001046:	4b5a      	ldr	r3, [pc, #360]	; (80011b0 <menu+0x8e8>)
 8001048:	2200      	movs	r2, #0
 800104a:	701a      	strb	r2, [r3, #0]
 800104c:	4b59      	ldr	r3, [pc, #356]	; (80011b4 <menu+0x8ec>)
 800104e:	2200      	movs	r2, #0
 8001050:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
			hataKayit2 = 0; eepromData[38] = 0;
 8001054:	4b58      	ldr	r3, [pc, #352]	; (80011b8 <menu+0x8f0>)
 8001056:	2200      	movs	r2, #0
 8001058:	701a      	strb	r2, [r3, #0]
 800105a:	4b56      	ldr	r3, [pc, #344]	; (80011b4 <menu+0x8ec>)
 800105c:	2200      	movs	r2, #0
 800105e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
			hataKayit3 = 0; eepromData[39] = 0;
 8001062:	4b56      	ldr	r3, [pc, #344]	; (80011bc <menu+0x8f4>)
 8001064:	2200      	movs	r2, #0
 8001066:	701a      	strb	r2, [r3, #0]
 8001068:	4b52      	ldr	r3, [pc, #328]	; (80011b4 <menu+0x8ec>)
 800106a:	2200      	movs	r2, #0
 800106c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
			hataKayit4 = 0; eepromData[40] = 0;
 8001070:	4b53      	ldr	r3, [pc, #332]	; (80011c0 <menu+0x8f8>)
 8001072:	2200      	movs	r2, #0
 8001074:	701a      	strb	r2, [r3, #0]
 8001076:	4b4f      	ldr	r3, [pc, #316]	; (80011b4 <menu+0x8ec>)
 8001078:	2200      	movs	r2, #0
 800107a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			hataKayit5 = 0; eepromData[41] = 0;
 800107e:	4b51      	ldr	r3, [pc, #324]	; (80011c4 <menu+0x8fc>)
 8001080:	2200      	movs	r2, #0
 8001082:	701a      	strb	r2, [r3, #0]
 8001084:	4b4b      	ldr	r3, [pc, #300]	; (80011b4 <menu+0x8ec>)
 8001086:	2200      	movs	r2, #0
 8001088:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
			hataKayit6 = 0; eepromData[42] = 0;
 800108c:	4b4e      	ldr	r3, [pc, #312]	; (80011c8 <menu+0x900>)
 800108e:	2200      	movs	r2, #0
 8001090:	701a      	strb	r2, [r3, #0]
 8001092:	4b48      	ldr	r3, [pc, #288]	; (80011b4 <menu+0x8ec>)
 8001094:	2200      	movs	r2, #0
 8001096:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
			hataKayit7 = 0; eepromData[43] = 0;
 800109a:	4b4c      	ldr	r3, [pc, #304]	; (80011cc <menu+0x904>)
 800109c:	2200      	movs	r2, #0
 800109e:	701a      	strb	r2, [r3, #0]
 80010a0:	4b44      	ldr	r3, [pc, #272]	; (80011b4 <menu+0x8ec>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
			hataKayit8 = 0; eepromData[44] = 0;
 80010a8:	4b49      	ldr	r3, [pc, #292]	; (80011d0 <menu+0x908>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	701a      	strb	r2, [r3, #0]
 80010ae:	4b41      	ldr	r3, [pc, #260]	; (80011b4 <menu+0x8ec>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
			hataKayit9 = 0; eepromData[45] = 0;
 80010b6:	4b47      	ldr	r3, [pc, #284]	; (80011d4 <menu+0x90c>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	701a      	strb	r2, [r3, #0]
 80010bc:	4b3d      	ldr	r3, [pc, #244]	; (80011b4 <menu+0x8ec>)
 80010be:	2200      	movs	r2, #0
 80010c0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			hataKayit10 = 0; eepromData[46] = 0;
 80010c4:	4b44      	ldr	r3, [pc, #272]	; (80011d8 <menu+0x910>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	701a      	strb	r2, [r3, #0]
 80010ca:	4b3a      	ldr	r3, [pc, #232]	; (80011b4 <menu+0x8ec>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
			hafizaYaz = 1;
 80010d2:	4b42      	ldr	r3, [pc, #264]	; (80011dc <menu+0x914>)
 80010d4:	2201      	movs	r2, #1
 80010d6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 2) {
 80010d8:	4b41      	ldr	r3, [pc, #260]	; (80011e0 <menu+0x918>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b02      	cmp	r3, #2
 80010de:	f040 80fc 	bne.w	80012da <menu+0xa12>
		if(dilSecim == 0) {
 80010e2:	4b2d      	ldr	r3, [pc, #180]	; (8001198 <menu+0x8d0>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d105      	bne.n	80010f6 <menu+0x82e>
			lcd_print(1, 1, "CALISMA SEKLi   ");
 80010ea:	4a3e      	ldr	r2, [pc, #248]	; (80011e4 <menu+0x91c>)
 80010ec:	2101      	movs	r1, #1
 80010ee:	2001      	movs	r0, #1
 80010f0:	f7ff fb89 	bl	8000806 <lcd_print>
 80010f4:	e008      	b.n	8001108 <menu+0x840>
		} else if(dilSecim == 1) {
 80010f6:	4b28      	ldr	r3, [pc, #160]	; (8001198 <menu+0x8d0>)
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2b01      	cmp	r3, #1
 80010fc:	d104      	bne.n	8001108 <menu+0x840>
			lcd_print(1, 1, "WORKNG PRINCIPLE");
 80010fe:	4a3a      	ldr	r2, [pc, #232]	; (80011e8 <menu+0x920>)
 8001100:	2101      	movs	r1, #1
 8001102:	2001      	movs	r0, #1
 8001104:	f7ff fb7f 	bl	8000806 <lcd_print>
		}

		if((devirmeYuruyusSecim == 1) || (devirmeYuruyusSecim == 2)) {
 8001108:	4b27      	ldr	r3, [pc, #156]	; (80011a8 <menu+0x8e0>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d003      	beq.n	8001118 <menu+0x850>
 8001110:	4b25      	ldr	r3, [pc, #148]	; (80011a8 <menu+0x8e0>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b02      	cmp	r3, #2
 8001116:	d112      	bne.n	800113e <menu+0x876>
			if(dilSecim == 0) {
 8001118:	4b1f      	ldr	r3, [pc, #124]	; (8001198 <menu+0x8d0>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d105      	bne.n	800112c <menu+0x864>
				lcd_print(2, 1, "Dvr Yrys secildi");
 8001120:	4a32      	ldr	r2, [pc, #200]	; (80011ec <menu+0x924>)
 8001122:	2101      	movs	r1, #1
 8001124:	2002      	movs	r0, #2
 8001126:	f7ff fb6e 	bl	8000806 <lcd_print>
 800112a:	e008      	b.n	800113e <menu+0x876>
			} else if(dilSecim == 1) {
 800112c:	4b1a      	ldr	r3, [pc, #104]	; (8001198 <menu+0x8d0>)
 800112e:	781b      	ldrb	r3, [r3, #0]
 8001130:	2b01      	cmp	r3, #1
 8001132:	d104      	bne.n	800113e <menu+0x876>
				lcd_print(2, 1, "Tppng Mobil slct");
 8001134:	4a2e      	ldr	r2, [pc, #184]	; (80011f0 <menu+0x928>)
 8001136:	2101      	movs	r1, #1
 8001138:	2002      	movs	r0, #2
 800113a:	f7ff fb64 	bl	8000806 <lcd_print>
			}
		}

		if((calismaSekli == 0) && (devirmeYuruyusSecim == 0)) {
 800113e:	4b2d      	ldr	r3, [pc, #180]	; (80011f4 <menu+0x92c>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d116      	bne.n	8001174 <menu+0x8ac>
 8001146:	4b18      	ldr	r3, [pc, #96]	; (80011a8 <menu+0x8e0>)
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d112      	bne.n	8001174 <menu+0x8ac>
			if(dilSecim == 0) {
 800114e:	4b12      	ldr	r3, [pc, #72]	; (8001198 <menu+0x8d0>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d105      	bne.n	8001162 <menu+0x89a>
				lcd_print(2, 1, "Bastikca cal.  ");
 8001156:	4a28      	ldr	r2, [pc, #160]	; (80011f8 <menu+0x930>)
 8001158:	2101      	movs	r1, #1
 800115a:	2002      	movs	r0, #2
 800115c:	f7ff fb53 	bl	8000806 <lcd_print>
 8001160:	e008      	b.n	8001174 <menu+0x8ac>
			} else if(dilSecim == 1) {
 8001162:	4b0d      	ldr	r3, [pc, #52]	; (8001198 <menu+0x8d0>)
 8001164:	781b      	ldrb	r3, [r3, #0]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d104      	bne.n	8001174 <menu+0x8ac>
				lcd_print(2, 1, "Deadman Control");
 800116a:	4a24      	ldr	r2, [pc, #144]	; (80011fc <menu+0x934>)
 800116c:	2101      	movs	r1, #1
 800116e:	2002      	movs	r0, #2
 8001170:	f7ff fb49 	bl	8000806 <lcd_print>
			}
		}

		if((calismaSekli == 1) && (devirmeYuruyusSecim == 0)) {
 8001174:	4b1f      	ldr	r3, [pc, #124]	; (80011f4 <menu+0x92c>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b01      	cmp	r3, #1
 800117a:	d14c      	bne.n	8001216 <menu+0x94e>
 800117c:	4b0a      	ldr	r3, [pc, #40]	; (80011a8 <menu+0x8e0>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d148      	bne.n	8001216 <menu+0x94e>
			if(dilSecim == 0) {
 8001184:	4b04      	ldr	r3, [pc, #16]	; (8001198 <menu+0x8d0>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d13b      	bne.n	8001204 <menu+0x93c>
				lcd_print(2, 1, "Bas gonder     ");
 800118c:	4a1c      	ldr	r2, [pc, #112]	; (8001200 <menu+0x938>)
 800118e:	2101      	movs	r1, #1
 8001190:	2002      	movs	r0, #2
 8001192:	f7ff fb38 	bl	8000806 <lcd_print>
 8001196:	e03e      	b.n	8001216 <menu+0x94e>
 8001198:	20000b30 	.word	0x20000b30
 800119c:	0800c5b8 	.word	0x0800c5b8
 80011a0:	40010800 	.word	0x40010800
 80011a4:	20000b3e 	.word	0x20000b3e
 80011a8:	20000b1f 	.word	0x20000b1f
 80011ac:	20000b12 	.word	0x20000b12
 80011b0:	20000b31 	.word	0x20000b31
 80011b4:	20000aa4 	.word	0x20000aa4
 80011b8:	20000b32 	.word	0x20000b32
 80011bc:	20000b33 	.word	0x20000b33
 80011c0:	20000b34 	.word	0x20000b34
 80011c4:	20000b35 	.word	0x20000b35
 80011c8:	20000b36 	.word	0x20000b36
 80011cc:	20000b37 	.word	0x20000b37
 80011d0:	20000b38 	.word	0x20000b38
 80011d4:	20000b39 	.word	0x20000b39
 80011d8:	20000b3a 	.word	0x20000b3a
 80011dc:	20000b3b 	.word	0x20000b3b
 80011e0:	20000b10 	.word	0x20000b10
 80011e4:	0800c5cc 	.word	0x0800c5cc
 80011e8:	0800c5e0 	.word	0x0800c5e0
 80011ec:	0800c5f4 	.word	0x0800c5f4
 80011f0:	0800c608 	.word	0x0800c608
 80011f4:	20000b11 	.word	0x20000b11
 80011f8:	0800c61c 	.word	0x0800c61c
 80011fc:	0800c62c 	.word	0x0800c62c
 8001200:	0800c63c 	.word	0x0800c63c
			} else if(dilSecim == 1) {
 8001204:	4b98      	ldr	r3, [pc, #608]	; (8001468 <menu+0xba0>)
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d104      	bne.n	8001216 <menu+0x94e>
				lcd_print(2, 1, "Call & Send    ");
 800120c:	4a97      	ldr	r2, [pc, #604]	; (800146c <menu+0xba4>)
 800120e:	2101      	movs	r1, #1
 8001210:	2002      	movs	r0, #2
 8001212:	f7ff faf8 	bl	8000806 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001216:	2102      	movs	r1, #2
 8001218:	4895      	ldr	r0, [pc, #596]	; (8001470 <menu+0xba8>)
 800121a:	f007 fbd9 	bl	80089d0 <HAL_GPIO_ReadPin>
 800121e:	4603      	mov	r3, r0
 8001220:	2b01      	cmp	r3, #1
 8001222:	d119      	bne.n	8001258 <menu+0x990>
 8001224:	4b93      	ldr	r3, [pc, #588]	; (8001474 <menu+0xbac>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	f083 0301 	eor.w	r3, r3, #1
 800122c:	b2db      	uxtb	r3, r3
 800122e:	2b00      	cmp	r3, #0
 8001230:	d012      	beq.n	8001258 <menu+0x990>
 8001232:	4b91      	ldr	r3, [pc, #580]	; (8001478 <menu+0xbb0>)
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d10e      	bne.n	8001258 <menu+0x990>
			calismaSekli = calismaSekli + 1;
 800123a:	4b90      	ldr	r3, [pc, #576]	; (800147c <menu+0xbb4>)
 800123c:	781b      	ldrb	r3, [r3, #0]
 800123e:	3301      	adds	r3, #1
 8001240:	b2da      	uxtb	r2, r3
 8001242:	4b8e      	ldr	r3, [pc, #568]	; (800147c <menu+0xbb4>)
 8001244:	701a      	strb	r2, [r3, #0]

			if(calismaSekli > 1) {
 8001246:	4b8d      	ldr	r3, [pc, #564]	; (800147c <menu+0xbb4>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	2b01      	cmp	r3, #1
 800124c:	d902      	bls.n	8001254 <menu+0x98c>
				calismaSekli = 0;
 800124e:	4b8b      	ldr	r3, [pc, #556]	; (800147c <menu+0xbb4>)
 8001250:	2200      	movs	r2, #0
 8001252:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001254:	f003 feac 	bl	8004fb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 0)) {
 8001258:	2104      	movs	r1, #4
 800125a:	4885      	ldr	r0, [pc, #532]	; (8001470 <menu+0xba8>)
 800125c:	f007 fbb8 	bl	80089d0 <HAL_GPIO_ReadPin>
 8001260:	4603      	mov	r3, r0
 8001262:	2b01      	cmp	r3, #1
 8001264:	d119      	bne.n	800129a <menu+0x9d2>
 8001266:	4b83      	ldr	r3, [pc, #524]	; (8001474 <menu+0xbac>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	f083 0301 	eor.w	r3, r3, #1
 800126e:	b2db      	uxtb	r3, r3
 8001270:	2b00      	cmp	r3, #0
 8001272:	d012      	beq.n	800129a <menu+0x9d2>
 8001274:	4b80      	ldr	r3, [pc, #512]	; (8001478 <menu+0xbb0>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d10e      	bne.n	800129a <menu+0x9d2>
			calismaSekli = calismaSekli - 1;
 800127c:	4b7f      	ldr	r3, [pc, #508]	; (800147c <menu+0xbb4>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	3b01      	subs	r3, #1
 8001282:	b2da      	uxtb	r2, r3
 8001284:	4b7d      	ldr	r3, [pc, #500]	; (800147c <menu+0xbb4>)
 8001286:	701a      	strb	r2, [r3, #0]

	    	if(calismaSekli > 0) {
 8001288:	4b7c      	ldr	r3, [pc, #496]	; (800147c <menu+0xbb4>)
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d002      	beq.n	8001296 <menu+0x9ce>
	    		calismaSekli = 1;
 8001290:	4b7a      	ldr	r3, [pc, #488]	; (800147c <menu+0xbb4>)
 8001292:	2201      	movs	r2, #1
 8001294:	701a      	strb	r2, [r3, #0]
	    	}
			bekle();
 8001296:	f003 fe8b 	bl	8004fb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800129a:	2108      	movs	r1, #8
 800129c:	4874      	ldr	r0, [pc, #464]	; (8001470 <menu+0xba8>)
 800129e:	f007 fb97 	bl	80089d0 <HAL_GPIO_ReadPin>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d118      	bne.n	80012da <menu+0xa12>
 80012a8:	4b72      	ldr	r3, [pc, #456]	; (8001474 <menu+0xbac>)
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	f083 0301 	eor.w	r3, r3, #1
 80012b0:	b2db      	uxtb	r3, r3
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d011      	beq.n	80012da <menu+0xa12>
			eepromData[1] = calismaSekli;
 80012b6:	4b71      	ldr	r3, [pc, #452]	; (800147c <menu+0xbb4>)
 80012b8:	781a      	ldrb	r2, [r3, #0]
 80012ba:	4b71      	ldr	r3, [pc, #452]	; (8001480 <menu+0xbb8>)
 80012bc:	705a      	strb	r2, [r3, #1]

			if(calismaSekli == 1) {
 80012be:	4b6f      	ldr	r3, [pc, #444]	; (800147c <menu+0xbb4>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d106      	bne.n	80012d4 <menu+0xa0c>
				altLimit = 1;
 80012c6:	4b6f      	ldr	r3, [pc, #444]	; (8001484 <menu+0xbbc>)
 80012c8:	2201      	movs	r2, #1
 80012ca:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80012cc:	4b6d      	ldr	r3, [pc, #436]	; (8001484 <menu+0xbbc>)
 80012ce:	781a      	ldrb	r2, [r3, #0]
 80012d0:	4b6b      	ldr	r3, [pc, #428]	; (8001480 <menu+0xbb8>)
 80012d2:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 80012d4:	4b6c      	ldr	r3, [pc, #432]	; (8001488 <menu+0xbc0>)
 80012d6:	2201      	movs	r2, #1
 80012d8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 3) {
 80012da:	4b6c      	ldr	r3, [pc, #432]	; (800148c <menu+0xbc4>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	2b03      	cmp	r3, #3
 80012e0:	f040 8083 	bne.w	80013ea <menu+0xb22>
		if(dilSecim == 0) {
 80012e4:	4b60      	ldr	r3, [pc, #384]	; (8001468 <menu+0xba0>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d105      	bne.n	80012f8 <menu+0xa30>
			lcd_print(1, 1, "EMNIYET CER.    ");
 80012ec:	4a68      	ldr	r2, [pc, #416]	; (8001490 <menu+0xbc8>)
 80012ee:	2101      	movs	r1, #1
 80012f0:	2001      	movs	r0, #1
 80012f2:	f7ff fa88 	bl	8000806 <lcd_print>
 80012f6:	e008      	b.n	800130a <menu+0xa42>
		} else if(dilSecim == 1) {
 80012f8:	4b5b      	ldr	r3, [pc, #364]	; (8001468 <menu+0xba0>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d104      	bne.n	800130a <menu+0xa42>
			lcd_print(1, 1, "SAFETY FRAME    ");
 8001300:	4a64      	ldr	r2, [pc, #400]	; (8001494 <menu+0xbcc>)
 8001302:	2101      	movs	r1, #1
 8001304:	2001      	movs	r0, #1
 8001306:	f7ff fa7e 	bl	8000806 <lcd_print>
		}

		if(emniyetCercevesi == 0) {
 800130a:	4b63      	ldr	r3, [pc, #396]	; (8001498 <menu+0xbd0>)
 800130c:	781b      	ldrb	r3, [r3, #0]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d113      	bne.n	800133a <menu+0xa72>
			if(dilSecim == 0) {
 8001312:	4b55      	ldr	r3, [pc, #340]	; (8001468 <menu+0xba0>)
 8001314:	781b      	ldrb	r3, [r3, #0]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d105      	bne.n	8001326 <menu+0xa5e>
				lcd_print(2, 1, "Pasif           ");
 800131a:	4a60      	ldr	r2, [pc, #384]	; (800149c <menu+0xbd4>)
 800131c:	2101      	movs	r1, #1
 800131e:	2002      	movs	r0, #2
 8001320:	f7ff fa71 	bl	8000806 <lcd_print>
 8001324:	e012      	b.n	800134c <menu+0xa84>
			} else if(dilSecim == 1) {
 8001326:	4b50      	ldr	r3, [pc, #320]	; (8001468 <menu+0xba0>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	2b01      	cmp	r3, #1
 800132c:	d10e      	bne.n	800134c <menu+0xa84>
				lcd_print(2, 1, "Passive         ");
 800132e:	4a5c      	ldr	r2, [pc, #368]	; (80014a0 <menu+0xbd8>)
 8001330:	2101      	movs	r1, #1
 8001332:	2002      	movs	r0, #2
 8001334:	f7ff fa67 	bl	8000806 <lcd_print>
 8001338:	e008      	b.n	800134c <menu+0xa84>
			}
		} else if(emniyetCercevesi == 1) {
 800133a:	4b57      	ldr	r3, [pc, #348]	; (8001498 <menu+0xbd0>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d104      	bne.n	800134c <menu+0xa84>
			lcd_print(2, 1, "OND Safety     ");
 8001342:	4a58      	ldr	r2, [pc, #352]	; (80014a4 <menu+0xbdc>)
 8001344:	2101      	movs	r1, #1
 8001346:	2002      	movs	r0, #2
 8001348:	f7ff fa5d 	bl	8000806 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800134c:	2102      	movs	r1, #2
 800134e:	4848      	ldr	r0, [pc, #288]	; (8001470 <menu+0xba8>)
 8001350:	f007 fb3e 	bl	80089d0 <HAL_GPIO_ReadPin>
 8001354:	4603      	mov	r3, r0
 8001356:	2b01      	cmp	r3, #1
 8001358:	d115      	bne.n	8001386 <menu+0xabe>
 800135a:	4b46      	ldr	r3, [pc, #280]	; (8001474 <menu+0xbac>)
 800135c:	781b      	ldrb	r3, [r3, #0]
 800135e:	f083 0301 	eor.w	r3, r3, #1
 8001362:	b2db      	uxtb	r3, r3
 8001364:	2b00      	cmp	r3, #0
 8001366:	d00e      	beq.n	8001386 <menu+0xabe>
			emniyetCercevesi = emniyetCercevesi + 1;
 8001368:	4b4b      	ldr	r3, [pc, #300]	; (8001498 <menu+0xbd0>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	3301      	adds	r3, #1
 800136e:	b2da      	uxtb	r2, r3
 8001370:	4b49      	ldr	r3, [pc, #292]	; (8001498 <menu+0xbd0>)
 8001372:	701a      	strb	r2, [r3, #0]

			if(emniyetCercevesi > 1) {
 8001374:	4b48      	ldr	r3, [pc, #288]	; (8001498 <menu+0xbd0>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	2b01      	cmp	r3, #1
 800137a:	d902      	bls.n	8001382 <menu+0xaba>
				emniyetCercevesi = 0;
 800137c:	4b46      	ldr	r3, [pc, #280]	; (8001498 <menu+0xbd0>)
 800137e:	2200      	movs	r2, #0
 8001380:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001382:	f003 fe15 	bl	8004fb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001386:	2104      	movs	r1, #4
 8001388:	4839      	ldr	r0, [pc, #228]	; (8001470 <menu+0xba8>)
 800138a:	f007 fb21 	bl	80089d0 <HAL_GPIO_ReadPin>
 800138e:	4603      	mov	r3, r0
 8001390:	2b01      	cmp	r3, #1
 8001392:	d115      	bne.n	80013c0 <menu+0xaf8>
 8001394:	4b37      	ldr	r3, [pc, #220]	; (8001474 <menu+0xbac>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	f083 0301 	eor.w	r3, r3, #1
 800139c:	b2db      	uxtb	r3, r3
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d00e      	beq.n	80013c0 <menu+0xaf8>
			emniyetCercevesi = emniyetCercevesi - 1;
 80013a2:	4b3d      	ldr	r3, [pc, #244]	; (8001498 <menu+0xbd0>)
 80013a4:	781b      	ldrb	r3, [r3, #0]
 80013a6:	3b01      	subs	r3, #1
 80013a8:	b2da      	uxtb	r2, r3
 80013aa:	4b3b      	ldr	r3, [pc, #236]	; (8001498 <menu+0xbd0>)
 80013ac:	701a      	strb	r2, [r3, #0]
		   	if(emniyetCercevesi > 0) {
 80013ae:	4b3a      	ldr	r3, [pc, #232]	; (8001498 <menu+0xbd0>)
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d002      	beq.n	80013bc <menu+0xaf4>
		   		emniyetCercevesi = 1;
 80013b6:	4b38      	ldr	r3, [pc, #224]	; (8001498 <menu+0xbd0>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80013bc:	f003 fdf8 	bl	8004fb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)){
 80013c0:	2108      	movs	r1, #8
 80013c2:	482b      	ldr	r0, [pc, #172]	; (8001470 <menu+0xba8>)
 80013c4:	f007 fb04 	bl	80089d0 <HAL_GPIO_ReadPin>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d10d      	bne.n	80013ea <menu+0xb22>
 80013ce:	4b29      	ldr	r3, [pc, #164]	; (8001474 <menu+0xbac>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	f083 0301 	eor.w	r3, r3, #1
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d006      	beq.n	80013ea <menu+0xb22>
			eepromData[2] = emniyetCercevesi;
 80013dc:	4b2e      	ldr	r3, [pc, #184]	; (8001498 <menu+0xbd0>)
 80013de:	781a      	ldrb	r2, [r3, #0]
 80013e0:	4b27      	ldr	r3, [pc, #156]	; (8001480 <menu+0xbb8>)
 80013e2:	709a      	strb	r2, [r3, #2]
			hafizaYaz = 1;
 80013e4:	4b28      	ldr	r3, [pc, #160]	; (8001488 <menu+0xbc0>)
 80013e6:	2201      	movs	r2, #1
 80013e8:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 4) {
 80013ea:	4b28      	ldr	r3, [pc, #160]	; (800148c <menu+0xbc4>)
 80013ec:	781b      	ldrb	r3, [r3, #0]
 80013ee:	2b04      	cmp	r3, #4
 80013f0:	f040 80ba 	bne.w	8001568 <menu+0xca0>
		if(dilSecim == 0) {
 80013f4:	4b1c      	ldr	r3, [pc, #112]	; (8001468 <menu+0xba0>)
 80013f6:	781b      	ldrb	r3, [r3, #0]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d105      	bne.n	8001408 <menu+0xb40>
			lcd_print(1, 1, "YAVASLAMA LIMIT ");
 80013fc:	4a2a      	ldr	r2, [pc, #168]	; (80014a8 <menu+0xbe0>)
 80013fe:	2101      	movs	r1, #1
 8001400:	2001      	movs	r0, #1
 8001402:	f7ff fa00 	bl	8000806 <lcd_print>
 8001406:	e008      	b.n	800141a <menu+0xb52>
		} else if(dilSecim == 1) {
 8001408:	4b17      	ldr	r3, [pc, #92]	; (8001468 <menu+0xba0>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b01      	cmp	r3, #1
 800140e:	d104      	bne.n	800141a <menu+0xb52>
			lcd_print(1, 1, "SLOW DOWN LIMIT ");
 8001410:	4a26      	ldr	r2, [pc, #152]	; (80014ac <menu+0xbe4>)
 8001412:	2101      	movs	r1, #1
 8001414:	2001      	movs	r0, #1
 8001416:	f7ff f9f6 	bl	8000806 <lcd_print>
		}

		if(yavaslamaLimit == 0) {
 800141a:	4b25      	ldr	r3, [pc, #148]	; (80014b0 <menu+0xbe8>)
 800141c:	781b      	ldrb	r3, [r3, #0]
 800141e:	2b00      	cmp	r3, #0
 8001420:	d113      	bne.n	800144a <menu+0xb82>
			if(dilSecim == 0) {
 8001422:	4b11      	ldr	r3, [pc, #68]	; (8001468 <menu+0xba0>)
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d105      	bne.n	8001436 <menu+0xb6e>
				lcd_print(2, 1, "Pasif           ");
 800142a:	4a1c      	ldr	r2, [pc, #112]	; (800149c <menu+0xbd4>)
 800142c:	2101      	movs	r1, #1
 800142e:	2002      	movs	r0, #2
 8001430:	f7ff f9e9 	bl	8000806 <lcd_print>
 8001434:	e049      	b.n	80014ca <menu+0xc02>
			} else if(dilSecim == 1) {
 8001436:	4b0c      	ldr	r3, [pc, #48]	; (8001468 <menu+0xba0>)
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d145      	bne.n	80014ca <menu+0xc02>
				lcd_print(2, 1, "Passive         ");
 800143e:	4a18      	ldr	r2, [pc, #96]	; (80014a0 <menu+0xbd8>)
 8001440:	2101      	movs	r1, #1
 8001442:	2002      	movs	r0, #2
 8001444:	f7ff f9df 	bl	8000806 <lcd_print>
 8001448:	e03f      	b.n	80014ca <menu+0xc02>
			}
		} else if(yavaslamaLimit == 1) {
 800144a:	4b19      	ldr	r3, [pc, #100]	; (80014b0 <menu+0xbe8>)
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	2b01      	cmp	r3, #1
 8001450:	d13b      	bne.n	80014ca <menu+0xc02>
			if(dilSecim == 0) {
 8001452:	4b05      	ldr	r3, [pc, #20]	; (8001468 <menu+0xba0>)
 8001454:	781b      	ldrb	r3, [r3, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d12e      	bne.n	80014b8 <menu+0xbf0>
				lcd_print(2, 1, "Aktif           ");
 800145a:	4a16      	ldr	r2, [pc, #88]	; (80014b4 <menu+0xbec>)
 800145c:	2101      	movs	r1, #1
 800145e:	2002      	movs	r0, #2
 8001460:	f7ff f9d1 	bl	8000806 <lcd_print>
 8001464:	e031      	b.n	80014ca <menu+0xc02>
 8001466:	bf00      	nop
 8001468:	20000b30 	.word	0x20000b30
 800146c:	0800c64c 	.word	0x0800c64c
 8001470:	40010800 	.word	0x40010800
 8001474:	20000b3e 	.word	0x20000b3e
 8001478:	20000b1f 	.word	0x20000b1f
 800147c:	20000b11 	.word	0x20000b11
 8001480:	20000aa4 	.word	0x20000aa4
 8001484:	20000b16 	.word	0x20000b16
 8001488:	20000b3b 	.word	0x20000b3b
 800148c:	20000b10 	.word	0x20000b10
 8001490:	0800c65c 	.word	0x0800c65c
 8001494:	0800c670 	.word	0x0800c670
 8001498:	20000b14 	.word	0x20000b14
 800149c:	0800c684 	.word	0x0800c684
 80014a0:	0800c698 	.word	0x0800c698
 80014a4:	0800c6ac 	.word	0x0800c6ac
 80014a8:	0800c6bc 	.word	0x0800c6bc
 80014ac:	0800c6d0 	.word	0x0800c6d0
 80014b0:	20000b15 	.word	0x20000b15
 80014b4:	0800c6e4 	.word	0x0800c6e4
			} else if(dilSecim == 1) {
 80014b8:	4b92      	ldr	r3, [pc, #584]	; (8001704 <menu+0xe3c>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d104      	bne.n	80014ca <menu+0xc02>
				lcd_print(2, 1, "Active          ");
 80014c0:	4a91      	ldr	r2, [pc, #580]	; (8001708 <menu+0xe40>)
 80014c2:	2101      	movs	r1, #1
 80014c4:	2002      	movs	r0, #2
 80014c6:	f7ff f99e 	bl	8000806 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80014ca:	2102      	movs	r1, #2
 80014cc:	488f      	ldr	r0, [pc, #572]	; (800170c <menu+0xe44>)
 80014ce:	f007 fa7f 	bl	80089d0 <HAL_GPIO_ReadPin>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d115      	bne.n	8001504 <menu+0xc3c>
 80014d8:	4b8d      	ldr	r3, [pc, #564]	; (8001710 <menu+0xe48>)
 80014da:	781b      	ldrb	r3, [r3, #0]
 80014dc:	f083 0301 	eor.w	r3, r3, #1
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d00e      	beq.n	8001504 <menu+0xc3c>
			yavaslamaLimit = yavaslamaLimit + 1;
 80014e6:	4b8b      	ldr	r3, [pc, #556]	; (8001714 <menu+0xe4c>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	3301      	adds	r3, #1
 80014ec:	b2da      	uxtb	r2, r3
 80014ee:	4b89      	ldr	r3, [pc, #548]	; (8001714 <menu+0xe4c>)
 80014f0:	701a      	strb	r2, [r3, #0]

			if(yavaslamaLimit > 1){
 80014f2:	4b88      	ldr	r3, [pc, #544]	; (8001714 <menu+0xe4c>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d902      	bls.n	8001500 <menu+0xc38>
				yavaslamaLimit = 0;
 80014fa:	4b86      	ldr	r3, [pc, #536]	; (8001714 <menu+0xe4c>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001500:	f003 fd56 	bl	8004fb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001504:	2104      	movs	r1, #4
 8001506:	4881      	ldr	r0, [pc, #516]	; (800170c <menu+0xe44>)
 8001508:	f007 fa62 	bl	80089d0 <HAL_GPIO_ReadPin>
 800150c:	4603      	mov	r3, r0
 800150e:	2b01      	cmp	r3, #1
 8001510:	d115      	bne.n	800153e <menu+0xc76>
 8001512:	4b7f      	ldr	r3, [pc, #508]	; (8001710 <menu+0xe48>)
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	f083 0301 	eor.w	r3, r3, #1
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2b00      	cmp	r3, #0
 800151e:	d00e      	beq.n	800153e <menu+0xc76>
			yavaslamaLimit = yavaslamaLimit - 1;
 8001520:	4b7c      	ldr	r3, [pc, #496]	; (8001714 <menu+0xe4c>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	3b01      	subs	r3, #1
 8001526:	b2da      	uxtb	r2, r3
 8001528:	4b7a      	ldr	r3, [pc, #488]	; (8001714 <menu+0xe4c>)
 800152a:	701a      	strb	r2, [r3, #0]

		   	if(yavaslamaLimit > 0){
 800152c:	4b79      	ldr	r3, [pc, #484]	; (8001714 <menu+0xe4c>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d002      	beq.n	800153a <menu+0xc72>
		   		yavaslamaLimit = 1;
 8001534:	4b77      	ldr	r3, [pc, #476]	; (8001714 <menu+0xe4c>)
 8001536:	2201      	movs	r2, #1
 8001538:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800153a:	f003 fd39 	bl	8004fb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800153e:	2108      	movs	r1, #8
 8001540:	4872      	ldr	r0, [pc, #456]	; (800170c <menu+0xe44>)
 8001542:	f007 fa45 	bl	80089d0 <HAL_GPIO_ReadPin>
 8001546:	4603      	mov	r3, r0
 8001548:	2b01      	cmp	r3, #1
 800154a:	d10d      	bne.n	8001568 <menu+0xca0>
 800154c:	4b70      	ldr	r3, [pc, #448]	; (8001710 <menu+0xe48>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	f083 0301 	eor.w	r3, r3, #1
 8001554:	b2db      	uxtb	r3, r3
 8001556:	2b00      	cmp	r3, #0
 8001558:	d006      	beq.n	8001568 <menu+0xca0>
			eepromData[4] = yavaslamaLimit;
 800155a:	4b6e      	ldr	r3, [pc, #440]	; (8001714 <menu+0xe4c>)
 800155c:	781a      	ldrb	r2, [r3, #0]
 800155e:	4b6e      	ldr	r3, [pc, #440]	; (8001718 <menu+0xe50>)
 8001560:	711a      	strb	r2, [r3, #4]
			hafizaYaz = 1;
 8001562:	4b6e      	ldr	r3, [pc, #440]	; (800171c <menu+0xe54>)
 8001564:	2201      	movs	r2, #1
 8001566:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 5) {
 8001568:	4b6d      	ldr	r3, [pc, #436]	; (8001720 <menu+0xe58>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2b05      	cmp	r3, #5
 800156e:	f040 80b9 	bne.w	80016e4 <menu+0xe1c>
		if(dilSecim == 0) {
 8001572:	4b64      	ldr	r3, [pc, #400]	; (8001704 <menu+0xe3c>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d105      	bne.n	8001586 <menu+0xcbe>
			lcd_print(1, 1, "ALT LIMIT       ");
 800157a:	4a6a      	ldr	r2, [pc, #424]	; (8001724 <menu+0xe5c>)
 800157c:	2101      	movs	r1, #1
 800157e:	2001      	movs	r0, #1
 8001580:	f7ff f941 	bl	8000806 <lcd_print>
 8001584:	e008      	b.n	8001598 <menu+0xcd0>
		} else if(dilSecim == 1) {
 8001586:	4b5f      	ldr	r3, [pc, #380]	; (8001704 <menu+0xe3c>)
 8001588:	781b      	ldrb	r3, [r3, #0]
 800158a:	2b01      	cmp	r3, #1
 800158c:	d104      	bne.n	8001598 <menu+0xcd0>
			lcd_print(1, 1, "DOWN LIMIT      ");
 800158e:	4a66      	ldr	r2, [pc, #408]	; (8001728 <menu+0xe60>)
 8001590:	2101      	movs	r1, #1
 8001592:	2001      	movs	r0, #1
 8001594:	f7ff f937 	bl	8000806 <lcd_print>
		}

		if(altLimit == 0) {
 8001598:	4b64      	ldr	r3, [pc, #400]	; (800172c <menu+0xe64>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d113      	bne.n	80015c8 <menu+0xd00>
			if(dilSecim == 0) {
 80015a0:	4b58      	ldr	r3, [pc, #352]	; (8001704 <menu+0xe3c>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d105      	bne.n	80015b4 <menu+0xcec>
				lcd_print(2, 1, "Pasif           ");
 80015a8:	4a61      	ldr	r2, [pc, #388]	; (8001730 <menu+0xe68>)
 80015aa:	2101      	movs	r1, #1
 80015ac:	2002      	movs	r0, #2
 80015ae:	f7ff f92a 	bl	8000806 <lcd_print>
 80015b2:	e020      	b.n	80015f6 <menu+0xd2e>
			} else if(dilSecim == 1) {
 80015b4:	4b53      	ldr	r3, [pc, #332]	; (8001704 <menu+0xe3c>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	2b01      	cmp	r3, #1
 80015ba:	d11c      	bne.n	80015f6 <menu+0xd2e>
				lcd_print(2, 1, "Passive         ");
 80015bc:	4a5d      	ldr	r2, [pc, #372]	; (8001734 <menu+0xe6c>)
 80015be:	2101      	movs	r1, #1
 80015c0:	2002      	movs	r0, #2
 80015c2:	f7ff f920 	bl	8000806 <lcd_print>
 80015c6:	e016      	b.n	80015f6 <menu+0xd2e>
			}
		} else if(altLimit == 1) {
 80015c8:	4b58      	ldr	r3, [pc, #352]	; (800172c <menu+0xe64>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b01      	cmp	r3, #1
 80015ce:	d112      	bne.n	80015f6 <menu+0xd2e>
			if(dilSecim == 0){
 80015d0:	4b4c      	ldr	r3, [pc, #304]	; (8001704 <menu+0xe3c>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d105      	bne.n	80015e4 <menu+0xd1c>
				lcd_print(2, 1, "Aktif           ");
 80015d8:	4a57      	ldr	r2, [pc, #348]	; (8001738 <menu+0xe70>)
 80015da:	2101      	movs	r1, #1
 80015dc:	2002      	movs	r0, #2
 80015de:	f7ff f912 	bl	8000806 <lcd_print>
 80015e2:	e008      	b.n	80015f6 <menu+0xd2e>
			} else if(dilSecim == 1){
 80015e4:	4b47      	ldr	r3, [pc, #284]	; (8001704 <menu+0xe3c>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d104      	bne.n	80015f6 <menu+0xd2e>
				lcd_print(2, 1, "Active          ");
 80015ec:	4a46      	ldr	r2, [pc, #280]	; (8001708 <menu+0xe40>)
 80015ee:	2101      	movs	r1, #1
 80015f0:	2002      	movs	r0, #2
 80015f2:	f7ff f908 	bl	8000806 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSekli == 0)) {
 80015f6:	2102      	movs	r1, #2
 80015f8:	4844      	ldr	r0, [pc, #272]	; (800170c <menu+0xe44>)
 80015fa:	f007 f9e9 	bl	80089d0 <HAL_GPIO_ReadPin>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b01      	cmp	r3, #1
 8001602:	d119      	bne.n	8001638 <menu+0xd70>
 8001604:	4b42      	ldr	r3, [pc, #264]	; (8001710 <menu+0xe48>)
 8001606:	781b      	ldrb	r3, [r3, #0]
 8001608:	f083 0301 	eor.w	r3, r3, #1
 800160c:	b2db      	uxtb	r3, r3
 800160e:	2b00      	cmp	r3, #0
 8001610:	d012      	beq.n	8001638 <menu+0xd70>
 8001612:	4b4a      	ldr	r3, [pc, #296]	; (800173c <menu+0xe74>)
 8001614:	781b      	ldrb	r3, [r3, #0]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d10e      	bne.n	8001638 <menu+0xd70>
			altLimit = altLimit + 1;
 800161a:	4b44      	ldr	r3, [pc, #272]	; (800172c <menu+0xe64>)
 800161c:	781b      	ldrb	r3, [r3, #0]
 800161e:	3301      	adds	r3, #1
 8001620:	b2da      	uxtb	r2, r3
 8001622:	4b42      	ldr	r3, [pc, #264]	; (800172c <menu+0xe64>)
 8001624:	701a      	strb	r2, [r3, #0]

			if(altLimit > 1) {
 8001626:	4b41      	ldr	r3, [pc, #260]	; (800172c <menu+0xe64>)
 8001628:	781b      	ldrb	r3, [r3, #0]
 800162a:	2b01      	cmp	r3, #1
 800162c:	d902      	bls.n	8001634 <menu+0xd6c>
				altLimit = 0;
 800162e:	4b3f      	ldr	r3, [pc, #252]	; (800172c <menu+0xe64>)
 8001630:	2200      	movs	r2, #0
 8001632:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001634:	f003 fcbc 	bl	8004fb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && calismaSekli == 0) {
 8001638:	2104      	movs	r1, #4
 800163a:	4834      	ldr	r0, [pc, #208]	; (800170c <menu+0xe44>)
 800163c:	f007 f9c8 	bl	80089d0 <HAL_GPIO_ReadPin>
 8001640:	4603      	mov	r3, r0
 8001642:	2b01      	cmp	r3, #1
 8001644:	d119      	bne.n	800167a <menu+0xdb2>
 8001646:	4b32      	ldr	r3, [pc, #200]	; (8001710 <menu+0xe48>)
 8001648:	781b      	ldrb	r3, [r3, #0]
 800164a:	f083 0301 	eor.w	r3, r3, #1
 800164e:	b2db      	uxtb	r3, r3
 8001650:	2b00      	cmp	r3, #0
 8001652:	d012      	beq.n	800167a <menu+0xdb2>
 8001654:	4b39      	ldr	r3, [pc, #228]	; (800173c <menu+0xe74>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d10e      	bne.n	800167a <menu+0xdb2>
			altLimit = altLimit - 1;
 800165c:	4b33      	ldr	r3, [pc, #204]	; (800172c <menu+0xe64>)
 800165e:	781b      	ldrb	r3, [r3, #0]
 8001660:	3b01      	subs	r3, #1
 8001662:	b2da      	uxtb	r2, r3
 8001664:	4b31      	ldr	r3, [pc, #196]	; (800172c <menu+0xe64>)
 8001666:	701a      	strb	r2, [r3, #0]

		   	if(altLimit > 0){
 8001668:	4b30      	ldr	r3, [pc, #192]	; (800172c <menu+0xe64>)
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d002      	beq.n	8001676 <menu+0xdae>
		   		altLimit = 1;
 8001670:	4b2e      	ldr	r3, [pc, #184]	; (800172c <menu+0xe64>)
 8001672:	2201      	movs	r2, #1
 8001674:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001676:	f003 fc9b 	bl	8004fb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800167a:	2108      	movs	r1, #8
 800167c:	4823      	ldr	r0, [pc, #140]	; (800170c <menu+0xe44>)
 800167e:	f007 f9a7 	bl	80089d0 <HAL_GPIO_ReadPin>
 8001682:	4603      	mov	r3, r0
 8001684:	2b01      	cmp	r3, #1
 8001686:	d12d      	bne.n	80016e4 <menu+0xe1c>
 8001688:	4b21      	ldr	r3, [pc, #132]	; (8001710 <menu+0xe48>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	f083 0301 	eor.w	r3, r3, #1
 8001690:	b2db      	uxtb	r3, r3
 8001692:	2b00      	cmp	r3, #0
 8001694:	d026      	beq.n	80016e4 <menu+0xe1c>
			eepromData[5] = altLimit;
 8001696:	4b25      	ldr	r3, [pc, #148]	; (800172c <menu+0xe64>)
 8001698:	781a      	ldrb	r2, [r3, #0]
 800169a:	4b1f      	ldr	r3, [pc, #124]	; (8001718 <menu+0xe50>)
 800169c:	715a      	strb	r2, [r3, #5]

			if(altLimit == 0 && (kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2)) {
 800169e:	4b23      	ldr	r3, [pc, #140]	; (800172c <menu+0xe64>)
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d110      	bne.n	80016c8 <menu+0xe00>
 80016a6:	4b26      	ldr	r3, [pc, #152]	; (8001740 <menu+0xe78>)
 80016a8:	781b      	ldrb	r3, [r3, #0]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <menu+0xdee>
 80016ae:	4b24      	ldr	r3, [pc, #144]	; (8001740 <menu+0xe78>)
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d108      	bne.n	80016c8 <menu+0xe00>
				kapiTablaAcKonum = 3;
 80016b6:	4b22      	ldr	r3, [pc, #136]	; (8001740 <menu+0xe78>)
 80016b8:	2203      	movs	r2, #3
 80016ba:	701a      	strb	r2, [r3, #0]
				eepromData[34] = kapiTablaAcKonum;
 80016bc:	4b20      	ldr	r3, [pc, #128]	; (8001740 <menu+0xe78>)
 80016be:	781a      	ldrb	r2, [r3, #0]
 80016c0:	4b15      	ldr	r3, [pc, #84]	; (8001718 <menu+0xe50>)
 80016c2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 80016c6:	e00a      	b.n	80016de <menu+0xe16>
			} else if(altLimit == 0) {
 80016c8:	4b18      	ldr	r3, [pc, #96]	; (800172c <menu+0xe64>)
 80016ca:	781b      	ldrb	r3, [r3, #0]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d106      	bne.n	80016de <menu+0xe16>
				platformSilindirTipi = 0;
 80016d0:	4b1c      	ldr	r3, [pc, #112]	; (8001744 <menu+0xe7c>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	701a      	strb	r2, [r3, #0]
				eepromData[19] = platformSilindirTipi;
 80016d6:	4b1b      	ldr	r3, [pc, #108]	; (8001744 <menu+0xe7c>)
 80016d8:	781a      	ldrb	r2, [r3, #0]
 80016da:	4b0f      	ldr	r3, [pc, #60]	; (8001718 <menu+0xe50>)
 80016dc:	74da      	strb	r2, [r3, #19]
			}

			hafizaYaz = 1;
 80016de:	4b0f      	ldr	r3, [pc, #60]	; (800171c <menu+0xe54>)
 80016e0:	2201      	movs	r2, #1
 80016e2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 6) {
 80016e4:	4b0e      	ldr	r3, [pc, #56]	; (8001720 <menu+0xe58>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	2b06      	cmp	r3, #6
 80016ea:	f040 80b6 	bne.w	800185a <menu+0xf92>
		if(dilSecim == 0) {
 80016ee:	4b05      	ldr	r3, [pc, #20]	; (8001704 <menu+0xe3c>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d12a      	bne.n	800174c <menu+0xe84>
			lcd_print(1, 1, "BASINC SALTERI ");
 80016f6:	4a14      	ldr	r2, [pc, #80]	; (8001748 <menu+0xe80>)
 80016f8:	2101      	movs	r1, #1
 80016fa:	2001      	movs	r0, #1
 80016fc:	f7ff f883 	bl	8000806 <lcd_print>
 8001700:	e02d      	b.n	800175e <menu+0xe96>
 8001702:	bf00      	nop
 8001704:	20000b30 	.word	0x20000b30
 8001708:	0800c6f8 	.word	0x0800c6f8
 800170c:	40010800 	.word	0x40010800
 8001710:	20000b3e 	.word	0x20000b3e
 8001714:	20000b15 	.word	0x20000b15
 8001718:	20000aa4 	.word	0x20000aa4
 800171c:	20000b3b 	.word	0x20000b3b
 8001720:	20000b10 	.word	0x20000b10
 8001724:	0800c70c 	.word	0x0800c70c
 8001728:	0800c720 	.word	0x0800c720
 800172c:	20000b16 	.word	0x20000b16
 8001730:	0800c684 	.word	0x0800c684
 8001734:	0800c698 	.word	0x0800c698
 8001738:	0800c6e4 	.word	0x0800c6e4
 800173c:	20000b11 	.word	0x20000b11
 8001740:	20000b1d 	.word	0x20000b1d
 8001744:	20000b23 	.word	0x20000b23
 8001748:	0800c734 	.word	0x0800c734
		} else if(dilSecim == 1){
 800174c:	4b7a      	ldr	r3, [pc, #488]	; (8001938 <menu+0x1070>)
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	2b01      	cmp	r3, #1
 8001752:	d104      	bne.n	800175e <menu+0xe96>
			lcd_print(1, 1, "PRESSURE SWITCH");
 8001754:	4a79      	ldr	r2, [pc, #484]	; (800193c <menu+0x1074>)
 8001756:	2101      	movs	r1, #1
 8001758:	2001      	movs	r0, #1
 800175a:	f7ff f854 	bl	8000806 <lcd_print>
		}
		if(basincSalteri == 0){
 800175e:	4b78      	ldr	r3, [pc, #480]	; (8001940 <menu+0x1078>)
 8001760:	781b      	ldrb	r3, [r3, #0]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d113      	bne.n	800178e <menu+0xec6>
			if(dilSecim == 0) {
 8001766:	4b74      	ldr	r3, [pc, #464]	; (8001938 <menu+0x1070>)
 8001768:	781b      	ldrb	r3, [r3, #0]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d105      	bne.n	800177a <menu+0xeb2>
				lcd_print(2, 1, "Pasif           ");
 800176e:	4a75      	ldr	r2, [pc, #468]	; (8001944 <menu+0x107c>)
 8001770:	2101      	movs	r1, #1
 8001772:	2002      	movs	r0, #2
 8001774:	f7ff f847 	bl	8000806 <lcd_print>
 8001778:	e020      	b.n	80017bc <menu+0xef4>
			} else if(dilSecim == 1){
 800177a:	4b6f      	ldr	r3, [pc, #444]	; (8001938 <menu+0x1070>)
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	2b01      	cmp	r3, #1
 8001780:	d11c      	bne.n	80017bc <menu+0xef4>
				lcd_print(2, 1, "Passive         ");
 8001782:	4a71      	ldr	r2, [pc, #452]	; (8001948 <menu+0x1080>)
 8001784:	2101      	movs	r1, #1
 8001786:	2002      	movs	r0, #2
 8001788:	f7ff f83d 	bl	8000806 <lcd_print>
 800178c:	e016      	b.n	80017bc <menu+0xef4>
			}
		} else if(basincSalteri == 1) {
 800178e:	4b6c      	ldr	r3, [pc, #432]	; (8001940 <menu+0x1078>)
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	2b01      	cmp	r3, #1
 8001794:	d112      	bne.n	80017bc <menu+0xef4>
			if(dilSecim == 0) {
 8001796:	4b68      	ldr	r3, [pc, #416]	; (8001938 <menu+0x1070>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d105      	bne.n	80017aa <menu+0xee2>
				lcd_print(2, 1, "Aktif           ");
 800179e:	4a6b      	ldr	r2, [pc, #428]	; (800194c <menu+0x1084>)
 80017a0:	2101      	movs	r1, #1
 80017a2:	2002      	movs	r0, #2
 80017a4:	f7ff f82f 	bl	8000806 <lcd_print>
 80017a8:	e008      	b.n	80017bc <menu+0xef4>
			} else if(dilSecim == 1) {
 80017aa:	4b63      	ldr	r3, [pc, #396]	; (8001938 <menu+0x1070>)
 80017ac:	781b      	ldrb	r3, [r3, #0]
 80017ae:	2b01      	cmp	r3, #1
 80017b0:	d104      	bne.n	80017bc <menu+0xef4>
				lcd_print(2, 1, "Active          ");
 80017b2:	4a67      	ldr	r2, [pc, #412]	; (8001950 <menu+0x1088>)
 80017b4:	2101      	movs	r1, #1
 80017b6:	2002      	movs	r0, #2
 80017b8:	f7ff f825 	bl	8000806 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80017bc:	2102      	movs	r1, #2
 80017be:	4865      	ldr	r0, [pc, #404]	; (8001954 <menu+0x108c>)
 80017c0:	f007 f906 	bl	80089d0 <HAL_GPIO_ReadPin>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d115      	bne.n	80017f6 <menu+0xf2e>
 80017ca:	4b63      	ldr	r3, [pc, #396]	; (8001958 <menu+0x1090>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	f083 0301 	eor.w	r3, r3, #1
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d00e      	beq.n	80017f6 <menu+0xf2e>
			basincSalteri = basincSalteri + 1;
 80017d8:	4b59      	ldr	r3, [pc, #356]	; (8001940 <menu+0x1078>)
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	3301      	adds	r3, #1
 80017de:	b2da      	uxtb	r2, r3
 80017e0:	4b57      	ldr	r3, [pc, #348]	; (8001940 <menu+0x1078>)
 80017e2:	701a      	strb	r2, [r3, #0]

			if(basincSalteri > 1){
 80017e4:	4b56      	ldr	r3, [pc, #344]	; (8001940 <menu+0x1078>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d902      	bls.n	80017f2 <menu+0xf2a>
				basincSalteri = 0;
 80017ec:	4b54      	ldr	r3, [pc, #336]	; (8001940 <menu+0x1078>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80017f2:	f003 fbdd 	bl	8004fb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80017f6:	2104      	movs	r1, #4
 80017f8:	4856      	ldr	r0, [pc, #344]	; (8001954 <menu+0x108c>)
 80017fa:	f007 f8e9 	bl	80089d0 <HAL_GPIO_ReadPin>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b01      	cmp	r3, #1
 8001802:	d115      	bne.n	8001830 <menu+0xf68>
 8001804:	4b54      	ldr	r3, [pc, #336]	; (8001958 <menu+0x1090>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	f083 0301 	eor.w	r3, r3, #1
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b00      	cmp	r3, #0
 8001810:	d00e      	beq.n	8001830 <menu+0xf68>
			basincSalteri = basincSalteri - 1;
 8001812:	4b4b      	ldr	r3, [pc, #300]	; (8001940 <menu+0x1078>)
 8001814:	781b      	ldrb	r3, [r3, #0]
 8001816:	3b01      	subs	r3, #1
 8001818:	b2da      	uxtb	r2, r3
 800181a:	4b49      	ldr	r3, [pc, #292]	; (8001940 <menu+0x1078>)
 800181c:	701a      	strb	r2, [r3, #0]

		   	if(basincSalteri > 0){
 800181e:	4b48      	ldr	r3, [pc, #288]	; (8001940 <menu+0x1078>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d002      	beq.n	800182c <menu+0xf64>
		   		basincSalteri = 1;
 8001826:	4b46      	ldr	r3, [pc, #280]	; (8001940 <menu+0x1078>)
 8001828:	2201      	movs	r2, #1
 800182a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800182c:	f003 fbc0 	bl	8004fb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001830:	2108      	movs	r1, #8
 8001832:	4848      	ldr	r0, [pc, #288]	; (8001954 <menu+0x108c>)
 8001834:	f007 f8cc 	bl	80089d0 <HAL_GPIO_ReadPin>
 8001838:	4603      	mov	r3, r0
 800183a:	2b01      	cmp	r3, #1
 800183c:	d10d      	bne.n	800185a <menu+0xf92>
 800183e:	4b46      	ldr	r3, [pc, #280]	; (8001958 <menu+0x1090>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	f083 0301 	eor.w	r3, r3, #1
 8001846:	b2db      	uxtb	r3, r3
 8001848:	2b00      	cmp	r3, #0
 800184a:	d006      	beq.n	800185a <menu+0xf92>
			eepromData[6] = basincSalteri;
 800184c:	4b3c      	ldr	r3, [pc, #240]	; (8001940 <menu+0x1078>)
 800184e:	781a      	ldrb	r2, [r3, #0]
 8001850:	4b42      	ldr	r3, [pc, #264]	; (800195c <menu+0x1094>)
 8001852:	719a      	strb	r2, [r3, #6]
			hafizaYaz = 1;
 8001854:	4b42      	ldr	r3, [pc, #264]	; (8001960 <menu+0x1098>)
 8001856:	2201      	movs	r2, #1
 8001858:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 7) {
 800185a:	4b42      	ldr	r3, [pc, #264]	; (8001964 <menu+0x109c>)
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	2b07      	cmp	r3, #7
 8001860:	f040 80f5 	bne.w	8001a4e <menu+0x1186>
		if(dilSecim == 0) {
 8001864:	4b34      	ldr	r3, [pc, #208]	; (8001938 <menu+0x1070>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d105      	bne.n	8001878 <menu+0xfb0>
			lcd_print(1, 1, "KAPI SECIMLERI     ");
 800186c:	4a3e      	ldr	r2, [pc, #248]	; (8001968 <menu+0x10a0>)
 800186e:	2101      	movs	r1, #1
 8001870:	2001      	movs	r0, #1
 8001872:	f7fe ffc8 	bl	8000806 <lcd_print>
 8001876:	e008      	b.n	800188a <menu+0xfc2>
		} else if(dilSecim == 1){
 8001878:	4b2f      	ldr	r3, [pc, #188]	; (8001938 <menu+0x1070>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b01      	cmp	r3, #1
 800187e:	d104      	bne.n	800188a <menu+0xfc2>
			lcd_print(1, 1, "DOOR SELECTION     ");
 8001880:	4a3a      	ldr	r2, [pc, #232]	; (800196c <menu+0x10a4>)
 8001882:	2101      	movs	r1, #1
 8001884:	2001      	movs	r0, #1
 8001886:	f7fe ffbe 	bl	8000806 <lcd_print>
		}

		if(kapiSecimleri == 0) {
 800188a:	4b39      	ldr	r3, [pc, #228]	; (8001970 <menu+0x10a8>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d113      	bne.n	80018ba <menu+0xff2>
			if(dilSecim == 0) {
 8001892:	4b29      	ldr	r3, [pc, #164]	; (8001938 <menu+0x1070>)
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d105      	bne.n	80018a6 <menu+0xfde>
				lcd_print(2, 1, "Pasif           ");
 800189a:	4a2a      	ldr	r2, [pc, #168]	; (8001944 <menu+0x107c>)
 800189c:	2101      	movs	r1, #1
 800189e:	2002      	movs	r0, #2
 80018a0:	f7fe ffb1 	bl	8000806 <lcd_print>
 80018a4:	e079      	b.n	800199a <menu+0x10d2>
			} else if(dilSecim == 1){
 80018a6:	4b24      	ldr	r3, [pc, #144]	; (8001938 <menu+0x1070>)
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d175      	bne.n	800199a <menu+0x10d2>
				lcd_print(2, 1, "Passive         ");
 80018ae:	4a26      	ldr	r2, [pc, #152]	; (8001948 <menu+0x1080>)
 80018b0:	2101      	movs	r1, #1
 80018b2:	2002      	movs	r0, #2
 80018b4:	f7fe ffa7 	bl	8000806 <lcd_print>
 80018b8:	e06f      	b.n	800199a <menu+0x10d2>
			}
		} else if(kapiSecimleri == 1) {
 80018ba:	4b2d      	ldr	r3, [pc, #180]	; (8001970 <menu+0x10a8>)
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	2b01      	cmp	r3, #1
 80018c0:	d113      	bne.n	80018ea <menu+0x1022>
			if(dilSecim == 0) {
 80018c2:	4b1d      	ldr	r3, [pc, #116]	; (8001938 <menu+0x1070>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d105      	bne.n	80018d6 <menu+0x100e>
				lcd_print(2, 1, "Kat kapisi aktif");
 80018ca:	4a2a      	ldr	r2, [pc, #168]	; (8001974 <menu+0x10ac>)
 80018cc:	2101      	movs	r1, #1
 80018ce:	2002      	movs	r0, #2
 80018d0:	f7fe ff99 	bl	8000806 <lcd_print>
 80018d4:	e061      	b.n	800199a <menu+0x10d2>
			} else if(dilSecim == 1) {
 80018d6:	4b18      	ldr	r3, [pc, #96]	; (8001938 <menu+0x1070>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d15d      	bne.n	800199a <menu+0x10d2>
				lcd_print(2, 1, "Floor door act  ");
 80018de:	4a26      	ldr	r2, [pc, #152]	; (8001978 <menu+0x10b0>)
 80018e0:	2101      	movs	r1, #1
 80018e2:	2002      	movs	r0, #2
 80018e4:	f7fe ff8f 	bl	8000806 <lcd_print>
 80018e8:	e057      	b.n	800199a <menu+0x10d2>
			}
		} else if(kapiSecimleri == 2){
 80018ea:	4b21      	ldr	r3, [pc, #132]	; (8001970 <menu+0x10a8>)
 80018ec:	781b      	ldrb	r3, [r3, #0]
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d113      	bne.n	800191a <menu+0x1052>
			if(dilSecim == 0) {
 80018f2:	4b11      	ldr	r3, [pc, #68]	; (8001938 <menu+0x1070>)
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d105      	bne.n	8001906 <menu+0x103e>
				lcd_print(2, 1, "Tabla kapi aktif");
 80018fa:	4a20      	ldr	r2, [pc, #128]	; (800197c <menu+0x10b4>)
 80018fc:	2101      	movs	r1, #1
 80018fe:	2002      	movs	r0, #2
 8001900:	f7fe ff81 	bl	8000806 <lcd_print>
 8001904:	e049      	b.n	800199a <menu+0x10d2>
			} else if(dilSecim == 1) {
 8001906:	4b0c      	ldr	r3, [pc, #48]	; (8001938 <menu+0x1070>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d145      	bne.n	800199a <menu+0x10d2>
				lcd_print(2, 1, "Pltfrm door act ");
 800190e:	4a1c      	ldr	r2, [pc, #112]	; (8001980 <menu+0x10b8>)
 8001910:	2101      	movs	r1, #1
 8001912:	2002      	movs	r0, #2
 8001914:	f7fe ff77 	bl	8000806 <lcd_print>
 8001918:	e03f      	b.n	800199a <menu+0x10d2>
			}
		} else if(kapiSecimleri == 3){
 800191a:	4b15      	ldr	r3, [pc, #84]	; (8001970 <menu+0x10a8>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	2b03      	cmp	r3, #3
 8001920:	d13b      	bne.n	800199a <menu+0x10d2>
			if(dilSecim == 0) {
 8001922:	4b05      	ldr	r3, [pc, #20]	; (8001938 <menu+0x1070>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d12e      	bne.n	8001988 <menu+0x10c0>
				lcd_print(2, 1, "Kat + Tabl aktif");
 800192a:	4a16      	ldr	r2, [pc, #88]	; (8001984 <menu+0x10bc>)
 800192c:	2101      	movs	r1, #1
 800192e:	2002      	movs	r0, #2
 8001930:	f7fe ff69 	bl	8000806 <lcd_print>
 8001934:	e031      	b.n	800199a <menu+0x10d2>
 8001936:	bf00      	nop
 8001938:	20000b30 	.word	0x20000b30
 800193c:	0800c744 	.word	0x0800c744
 8001940:	20000b17 	.word	0x20000b17
 8001944:	0800c684 	.word	0x0800c684
 8001948:	0800c698 	.word	0x0800c698
 800194c:	0800c6e4 	.word	0x0800c6e4
 8001950:	0800c6f8 	.word	0x0800c6f8
 8001954:	40010800 	.word	0x40010800
 8001958:	20000b3e 	.word	0x20000b3e
 800195c:	20000aa4 	.word	0x20000aa4
 8001960:	20000b3b 	.word	0x20000b3b
 8001964:	20000b10 	.word	0x20000b10
 8001968:	0800c754 	.word	0x0800c754
 800196c:	0800c768 	.word	0x0800c768
 8001970:	20000b18 	.word	0x20000b18
 8001974:	0800c77c 	.word	0x0800c77c
 8001978:	0800c790 	.word	0x0800c790
 800197c:	0800c7a4 	.word	0x0800c7a4
 8001980:	0800c7b8 	.word	0x0800c7b8
 8001984:	0800c7cc 	.word	0x0800c7cc
			} else if(dilSecim == 1){
 8001988:	4b99      	ldr	r3, [pc, #612]	; (8001bf0 <menu+0x1328>)
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2b01      	cmp	r3, #1
 800198e:	d104      	bne.n	800199a <menu+0x10d2>
				lcd_print(2, 1, "Flr + Plrfrm act");
 8001990:	4a98      	ldr	r2, [pc, #608]	; (8001bf4 <menu+0x132c>)
 8001992:	2101      	movs	r1, #1
 8001994:	2002      	movs	r0, #2
 8001996:	f7fe ff36 	bl	8000806 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800199a:	2102      	movs	r1, #2
 800199c:	4896      	ldr	r0, [pc, #600]	; (8001bf8 <menu+0x1330>)
 800199e:	f007 f817 	bl	80089d0 <HAL_GPIO_ReadPin>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b01      	cmp	r3, #1
 80019a6:	d115      	bne.n	80019d4 <menu+0x110c>
 80019a8:	4b94      	ldr	r3, [pc, #592]	; (8001bfc <menu+0x1334>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	f083 0301 	eor.w	r3, r3, #1
 80019b0:	b2db      	uxtb	r3, r3
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d00e      	beq.n	80019d4 <menu+0x110c>
			kapiSecimleri = kapiSecimleri + 1;
 80019b6:	4b92      	ldr	r3, [pc, #584]	; (8001c00 <menu+0x1338>)
 80019b8:	781b      	ldrb	r3, [r3, #0]
 80019ba:	3301      	adds	r3, #1
 80019bc:	b2da      	uxtb	r2, r3
 80019be:	4b90      	ldr	r3, [pc, #576]	; (8001c00 <menu+0x1338>)
 80019c0:	701a      	strb	r2, [r3, #0]

			if(kapiSecimleri > 3){
 80019c2:	4b8f      	ldr	r3, [pc, #572]	; (8001c00 <menu+0x1338>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	2b03      	cmp	r3, #3
 80019c8:	d902      	bls.n	80019d0 <menu+0x1108>
				kapiSecimleri = 0;
 80019ca:	4b8d      	ldr	r3, [pc, #564]	; (8001c00 <menu+0x1338>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80019d0:	f003 faee 	bl	8004fb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80019d4:	2104      	movs	r1, #4
 80019d6:	4888      	ldr	r0, [pc, #544]	; (8001bf8 <menu+0x1330>)
 80019d8:	f006 fffa 	bl	80089d0 <HAL_GPIO_ReadPin>
 80019dc:	4603      	mov	r3, r0
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d115      	bne.n	8001a0e <menu+0x1146>
 80019e2:	4b86      	ldr	r3, [pc, #536]	; (8001bfc <menu+0x1334>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	f083 0301 	eor.w	r3, r3, #1
 80019ea:	b2db      	uxtb	r3, r3
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d00e      	beq.n	8001a0e <menu+0x1146>
			kapiSecimleri = kapiSecimleri - 1;
 80019f0:	4b83      	ldr	r3, [pc, #524]	; (8001c00 <menu+0x1338>)
 80019f2:	781b      	ldrb	r3, [r3, #0]
 80019f4:	3b01      	subs	r3, #1
 80019f6:	b2da      	uxtb	r2, r3
 80019f8:	4b81      	ldr	r3, [pc, #516]	; (8001c00 <menu+0x1338>)
 80019fa:	701a      	strb	r2, [r3, #0]

		   	if(kapiSecimleri > 4){
 80019fc:	4b80      	ldr	r3, [pc, #512]	; (8001c00 <menu+0x1338>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b04      	cmp	r3, #4
 8001a02:	d902      	bls.n	8001a0a <menu+0x1142>
		   		kapiSecimleri = 3;
 8001a04:	4b7e      	ldr	r3, [pc, #504]	; (8001c00 <menu+0x1338>)
 8001a06:	2203      	movs	r2, #3
 8001a08:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001a0a:	f003 fad1 	bl	8004fb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001a0e:	2108      	movs	r1, #8
 8001a10:	4879      	ldr	r0, [pc, #484]	; (8001bf8 <menu+0x1330>)
 8001a12:	f006 ffdd 	bl	80089d0 <HAL_GPIO_ReadPin>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b01      	cmp	r3, #1
 8001a1a:	d118      	bne.n	8001a4e <menu+0x1186>
 8001a1c:	4b77      	ldr	r3, [pc, #476]	; (8001bfc <menu+0x1334>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	f083 0301 	eor.w	r3, r3, #1
 8001a24:	b2db      	uxtb	r3, r3
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d011      	beq.n	8001a4e <menu+0x1186>
			eepromData[7] = kapiSecimleri;
 8001a2a:	4b75      	ldr	r3, [pc, #468]	; (8001c00 <menu+0x1338>)
 8001a2c:	781a      	ldrb	r2, [r3, #0]
 8001a2e:	4b75      	ldr	r3, [pc, #468]	; (8001c04 <menu+0x133c>)
 8001a30:	71da      	strb	r2, [r3, #7]

			if(kapiSecimleri >= 1) {
 8001a32:	4b73      	ldr	r3, [pc, #460]	; (8001c00 <menu+0x1338>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d006      	beq.n	8001a48 <menu+0x1180>
				altLimit = 1;
 8001a3a:	4b73      	ldr	r3, [pc, #460]	; (8001c08 <menu+0x1340>)
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8001a40:	4b71      	ldr	r3, [pc, #452]	; (8001c08 <menu+0x1340>)
 8001a42:	781a      	ldrb	r2, [r3, #0]
 8001a44:	4b6f      	ldr	r3, [pc, #444]	; (8001c04 <menu+0x133c>)
 8001a46:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8001a48:	4b70      	ldr	r3, [pc, #448]	; (8001c0c <menu+0x1344>)
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 8) {
 8001a4e:	4b70      	ldr	r3, [pc, #448]	; (8001c10 <menu+0x1348>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b08      	cmp	r3, #8
 8001a54:	f040 8092 	bne.w	8001b7c <menu+0x12b4>
		if(dilSecim == 0) {
 8001a58:	4b65      	ldr	r3, [pc, #404]	; (8001bf0 <menu+0x1328>)
 8001a5a:	781b      	ldrb	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d105      	bne.n	8001a6c <menu+0x11a4>
			lcd_print(1, 1, "KAPI ACMA TIPI  ");
 8001a60:	4a6c      	ldr	r2, [pc, #432]	; (8001c14 <menu+0x134c>)
 8001a62:	2101      	movs	r1, #1
 8001a64:	2001      	movs	r0, #1
 8001a66:	f7fe fece 	bl	8000806 <lcd_print>
 8001a6a:	e008      	b.n	8001a7e <menu+0x11b6>
		} else if(dilSecim == 1) {
 8001a6c:	4b60      	ldr	r3, [pc, #384]	; (8001bf0 <menu+0x1328>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d104      	bne.n	8001a7e <menu+0x11b6>
			lcd_print(1, 1, "OPEN DOOR TYPE  ");
 8001a74:	4a68      	ldr	r2, [pc, #416]	; (8001c18 <menu+0x1350>)
 8001a76:	2101      	movs	r1, #1
 8001a78:	2001      	movs	r0, #1
 8001a7a:	f7fe fec4 	bl	8000806 <lcd_print>
		}

		if(kapiAcTipi == 0){
 8001a7e:	4b67      	ldr	r3, [pc, #412]	; (8001c1c <menu+0x1354>)
 8001a80:	781b      	ldrb	r3, [r3, #0]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d113      	bne.n	8001aae <menu+0x11e6>
			if(dilSecim == 0) {
 8001a86:	4b5a      	ldr	r3, [pc, #360]	; (8001bf0 <menu+0x1328>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d105      	bne.n	8001a9a <menu+0x11d2>
				lcd_print(2, 1, "Kapi butonu ESP");
 8001a8e:	4a64      	ldr	r2, [pc, #400]	; (8001c20 <menu+0x1358>)
 8001a90:	2101      	movs	r1, #1
 8001a92:	2002      	movs	r0, #2
 8001a94:	f7fe feb7 	bl	8000806 <lcd_print>
 8001a98:	e020      	b.n	8001adc <menu+0x1214>
			} else if(dilSecim == 1) {
 8001a9a:	4b55      	ldr	r3, [pc, #340]	; (8001bf0 <menu+0x1328>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d11c      	bne.n	8001adc <menu+0x1214>
				lcd_print(2, 1, "Door Button ESP");
 8001aa2:	4a60      	ldr	r2, [pc, #384]	; (8001c24 <menu+0x135c>)
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	2002      	movs	r0, #2
 8001aa8:	f7fe fead 	bl	8000806 <lcd_print>
 8001aac:	e016      	b.n	8001adc <menu+0x1214>
			}
		} else if(kapiAcTipi == 1){
 8001aae:	4b5b      	ldr	r3, [pc, #364]	; (8001c1c <menu+0x1354>)
 8001ab0:	781b      	ldrb	r3, [r3, #0]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d112      	bne.n	8001adc <menu+0x1214>
			if(dilSecim == 0){
 8001ab6:	4b4e      	ldr	r3, [pc, #312]	; (8001bf0 <menu+0x1328>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d105      	bne.n	8001aca <menu+0x1202>
				lcd_print(2, 1, "Kat butonu EXT  ");
 8001abe:	4a5a      	ldr	r2, [pc, #360]	; (8001c28 <menu+0x1360>)
 8001ac0:	2101      	movs	r1, #1
 8001ac2:	2002      	movs	r0, #2
 8001ac4:	f7fe fe9f 	bl	8000806 <lcd_print>
 8001ac8:	e008      	b.n	8001adc <menu+0x1214>
			} else if(dilSecim == 1){
 8001aca:	4b49      	ldr	r3, [pc, #292]	; (8001bf0 <menu+0x1328>)
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d104      	bne.n	8001adc <menu+0x1214>
				lcd_print(2, 1, "Floor button EXT");
 8001ad2:	4a56      	ldr	r2, [pc, #344]	; (8001c2c <menu+0x1364>)
 8001ad4:	2101      	movs	r1, #1
 8001ad6:	2002      	movs	r0, #2
 8001ad8:	f7fe fe95 	bl	8000806 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001adc:	2102      	movs	r1, #2
 8001ade:	4846      	ldr	r0, [pc, #280]	; (8001bf8 <menu+0x1330>)
 8001ae0:	f006 ff76 	bl	80089d0 <HAL_GPIO_ReadPin>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d115      	bne.n	8001b16 <menu+0x124e>
 8001aea:	4b44      	ldr	r3, [pc, #272]	; (8001bfc <menu+0x1334>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	f083 0301 	eor.w	r3, r3, #1
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d00e      	beq.n	8001b16 <menu+0x124e>
			kapiAcTipi = kapiAcTipi + 1;
 8001af8:	4b48      	ldr	r3, [pc, #288]	; (8001c1c <menu+0x1354>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	3301      	adds	r3, #1
 8001afe:	b2da      	uxtb	r2, r3
 8001b00:	4b46      	ldr	r3, [pc, #280]	; (8001c1c <menu+0x1354>)
 8001b02:	701a      	strb	r2, [r3, #0]

			if(kapiAcTipi > 1){
 8001b04:	4b45      	ldr	r3, [pc, #276]	; (8001c1c <menu+0x1354>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d902      	bls.n	8001b12 <menu+0x124a>
				kapiAcTipi = 0;
 8001b0c:	4b43      	ldr	r3, [pc, #268]	; (8001c1c <menu+0x1354>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001b12:	f003 fa4d 	bl	8004fb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b16:	2104      	movs	r1, #4
 8001b18:	4837      	ldr	r0, [pc, #220]	; (8001bf8 <menu+0x1330>)
 8001b1a:	f006 ff59 	bl	80089d0 <HAL_GPIO_ReadPin>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b01      	cmp	r3, #1
 8001b22:	d115      	bne.n	8001b50 <menu+0x1288>
 8001b24:	4b35      	ldr	r3, [pc, #212]	; (8001bfc <menu+0x1334>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	f083 0301 	eor.w	r3, r3, #1
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d00e      	beq.n	8001b50 <menu+0x1288>
			kapiAcTipi = kapiAcTipi - 1;
 8001b32:	4b3a      	ldr	r3, [pc, #232]	; (8001c1c <menu+0x1354>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	3b01      	subs	r3, #1
 8001b38:	b2da      	uxtb	r2, r3
 8001b3a:	4b38      	ldr	r3, [pc, #224]	; (8001c1c <menu+0x1354>)
 8001b3c:	701a      	strb	r2, [r3, #0]

		   	if(kapiAcTipi > 0){
 8001b3e:	4b37      	ldr	r3, [pc, #220]	; (8001c1c <menu+0x1354>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d002      	beq.n	8001b4c <menu+0x1284>
		   		kapiAcTipi = 1;
 8001b46:	4b35      	ldr	r3, [pc, #212]	; (8001c1c <menu+0x1354>)
 8001b48:	2201      	movs	r2, #1
 8001b4a:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001b4c:	f003 fa30 	bl	8004fb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001b50:	2108      	movs	r1, #8
 8001b52:	4829      	ldr	r0, [pc, #164]	; (8001bf8 <menu+0x1330>)
 8001b54:	f006 ff3c 	bl	80089d0 <HAL_GPIO_ReadPin>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d10e      	bne.n	8001b7c <menu+0x12b4>
 8001b5e:	4b27      	ldr	r3, [pc, #156]	; (8001bfc <menu+0x1334>)
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	f083 0301 	eor.w	r3, r3, #1
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d007      	beq.n	8001b7c <menu+0x12b4>
			eepromData[36] = kapiAcTipi;
 8001b6c:	4b2b      	ldr	r3, [pc, #172]	; (8001c1c <menu+0x1354>)
 8001b6e:	781a      	ldrb	r2, [r3, #0]
 8001b70:	4b24      	ldr	r3, [pc, #144]	; (8001c04 <menu+0x133c>)
 8001b72:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
			hafizaYaz = 1;
 8001b76:	4b25      	ldr	r3, [pc, #148]	; (8001c0c <menu+0x1344>)
 8001b78:	2201      	movs	r2, #1
 8001b7a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 9) {
 8001b7c:	4b24      	ldr	r3, [pc, #144]	; (8001c10 <menu+0x1348>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	2b09      	cmp	r3, #9
 8001b82:	f040 80b9 	bne.w	8001cf8 <menu+0x1430>
		if(dilSecim == 0){
 8001b86:	4b1a      	ldr	r3, [pc, #104]	; (8001bf0 <menu+0x1328>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d105      	bne.n	8001b9a <menu+0x12d2>
			lcd_print(1, 1, "1.KAT KAPI TiPi ");
 8001b8e:	4a28      	ldr	r2, [pc, #160]	; (8001c30 <menu+0x1368>)
 8001b90:	2101      	movs	r1, #1
 8001b92:	2001      	movs	r0, #1
 8001b94:	f7fe fe37 	bl	8000806 <lcd_print>
 8001b98:	e008      	b.n	8001bac <menu+0x12e4>
		} else if(dilSecim == 1) {
 8001b9a:	4b15      	ldr	r3, [pc, #84]	; (8001bf0 <menu+0x1328>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d104      	bne.n	8001bac <menu+0x12e4>
			lcd_print(1, 1, "1.FLOOR DOOR TYP");
 8001ba2:	4a24      	ldr	r2, [pc, #144]	; (8001c34 <menu+0x136c>)
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	2001      	movs	r0, #1
 8001ba8:	f7fe fe2d 	bl	8000806 <lcd_print>
		}

		if(kapi1Tip == 0) {
 8001bac:	4b22      	ldr	r3, [pc, #136]	; (8001c38 <menu+0x1370>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d105      	bne.n	8001bc0 <menu+0x12f8>
			lcd_print(2, 1, "Prudhome        ");
 8001bb4:	4a21      	ldr	r2, [pc, #132]	; (8001c3c <menu+0x1374>)
 8001bb6:	2101      	movs	r1, #1
 8001bb8:	2002      	movs	r0, #2
 8001bba:	f7fe fe24 	bl	8000806 <lcd_print>
 8001bbe:	e04c      	b.n	8001c5a <menu+0x1392>
		} else if(kapi1Tip == 1) {
 8001bc0:	4b1d      	ldr	r3, [pc, #116]	; (8001c38 <menu+0x1370>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d13f      	bne.n	8001c48 <menu+0x1380>
			if(dilSecim == 0){
 8001bc8:	4b09      	ldr	r3, [pc, #36]	; (8001bf0 <menu+0x1328>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d105      	bne.n	8001bdc <menu+0x1314>
				lcd_print(2, 1, "Buton kontrollu");
 8001bd0:	4a1b      	ldr	r2, [pc, #108]	; (8001c40 <menu+0x1378>)
 8001bd2:	2101      	movs	r1, #1
 8001bd4:	2002      	movs	r0, #2
 8001bd6:	f7fe fe16 	bl	8000806 <lcd_print>
 8001bda:	e03e      	b.n	8001c5a <menu+0x1392>
			} else if(dilSecim == 1) {
 8001bdc:	4b04      	ldr	r3, [pc, #16]	; (8001bf0 <menu+0x1328>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d13a      	bne.n	8001c5a <menu+0x1392>
				lcd_print(2, 1, "Button cntrolled");
 8001be4:	4a17      	ldr	r2, [pc, #92]	; (8001c44 <menu+0x137c>)
 8001be6:	2101      	movs	r1, #1
 8001be8:	2002      	movs	r0, #2
 8001bea:	f7fe fe0c 	bl	8000806 <lcd_print>
 8001bee:	e034      	b.n	8001c5a <menu+0x1392>
 8001bf0:	20000b30 	.word	0x20000b30
 8001bf4:	0800c7e0 	.word	0x0800c7e0
 8001bf8:	40010800 	.word	0x40010800
 8001bfc:	20000b3e 	.word	0x20000b3e
 8001c00:	20000b18 	.word	0x20000b18
 8001c04:	20000aa4 	.word	0x20000aa4
 8001c08:	20000b16 	.word	0x20000b16
 8001c0c:	20000b3b 	.word	0x20000b3b
 8001c10:	20000b10 	.word	0x20000b10
 8001c14:	0800c7f4 	.word	0x0800c7f4
 8001c18:	0800c808 	.word	0x0800c808
 8001c1c:	20000b1c 	.word	0x20000b1c
 8001c20:	0800c81c 	.word	0x0800c81c
 8001c24:	0800c82c 	.word	0x0800c82c
 8001c28:	0800c83c 	.word	0x0800c83c
 8001c2c:	0800c850 	.word	0x0800c850
 8001c30:	0800c864 	.word	0x0800c864
 8001c34:	0800c878 	.word	0x0800c878
 8001c38:	20000b19 	.word	0x20000b19
 8001c3c:	0800c88c 	.word	0x0800c88c
 8001c40:	0800c8a0 	.word	0x0800c8a0
 8001c44:	0800c8b0 	.word	0x0800c8b0
			}
		} else if(kapi1Tip == 2) {
 8001c48:	4b8a      	ldr	r3, [pc, #552]	; (8001e74 <menu+0x15ac>)
 8001c4a:	781b      	ldrb	r3, [r3, #0]
 8001c4c:	2b02      	cmp	r3, #2
 8001c4e:	d104      	bne.n	8001c5a <menu+0x1392>
			lcd_print(2, 1, "Pizzato        ");
 8001c50:	4a89      	ldr	r2, [pc, #548]	; (8001e78 <menu+0x15b0>)
 8001c52:	2101      	movs	r1, #1
 8001c54:	2002      	movs	r0, #2
 8001c56:	f7fe fdd6 	bl	8000806 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c5a:	2102      	movs	r1, #2
 8001c5c:	4887      	ldr	r0, [pc, #540]	; (8001e7c <menu+0x15b4>)
 8001c5e:	f006 feb7 	bl	80089d0 <HAL_GPIO_ReadPin>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d115      	bne.n	8001c94 <menu+0x13cc>
 8001c68:	4b85      	ldr	r3, [pc, #532]	; (8001e80 <menu+0x15b8>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	f083 0301 	eor.w	r3, r3, #1
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d00e      	beq.n	8001c94 <menu+0x13cc>
			kapi1Tip = kapi1Tip + 1;
 8001c76:	4b7f      	ldr	r3, [pc, #508]	; (8001e74 <menu+0x15ac>)
 8001c78:	781b      	ldrb	r3, [r3, #0]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	b2da      	uxtb	r2, r3
 8001c7e:	4b7d      	ldr	r3, [pc, #500]	; (8001e74 <menu+0x15ac>)
 8001c80:	701a      	strb	r2, [r3, #0]

			if(kapi1Tip > 2){
 8001c82:	4b7c      	ldr	r3, [pc, #496]	; (8001e74 <menu+0x15ac>)
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d902      	bls.n	8001c90 <menu+0x13c8>
				kapi1Tip = 0;
 8001c8a:	4b7a      	ldr	r3, [pc, #488]	; (8001e74 <menu+0x15ac>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001c90:	f003 f98e 	bl	8004fb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001c94:	2104      	movs	r1, #4
 8001c96:	4879      	ldr	r0, [pc, #484]	; (8001e7c <menu+0x15b4>)
 8001c98:	f006 fe9a 	bl	80089d0 <HAL_GPIO_ReadPin>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d115      	bne.n	8001cce <menu+0x1406>
 8001ca2:	4b77      	ldr	r3, [pc, #476]	; (8001e80 <menu+0x15b8>)
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	f083 0301 	eor.w	r3, r3, #1
 8001caa:	b2db      	uxtb	r3, r3
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d00e      	beq.n	8001cce <menu+0x1406>
			kapi1Tip = kapi1Tip - 1;
 8001cb0:	4b70      	ldr	r3, [pc, #448]	; (8001e74 <menu+0x15ac>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	b2da      	uxtb	r2, r3
 8001cb8:	4b6e      	ldr	r3, [pc, #440]	; (8001e74 <menu+0x15ac>)
 8001cba:	701a      	strb	r2, [r3, #0]

		   	if(kapi1Tip > 3){
 8001cbc:	4b6d      	ldr	r3, [pc, #436]	; (8001e74 <menu+0x15ac>)
 8001cbe:	781b      	ldrb	r3, [r3, #0]
 8001cc0:	2b03      	cmp	r3, #3
 8001cc2:	d902      	bls.n	8001cca <menu+0x1402>
		   		kapi1Tip = 2;
 8001cc4:	4b6b      	ldr	r3, [pc, #428]	; (8001e74 <menu+0x15ac>)
 8001cc6:	2202      	movs	r2, #2
 8001cc8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001cca:	f003 f971 	bl	8004fb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001cce:	2108      	movs	r1, #8
 8001cd0:	486a      	ldr	r0, [pc, #424]	; (8001e7c <menu+0x15b4>)
 8001cd2:	f006 fe7d 	bl	80089d0 <HAL_GPIO_ReadPin>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d10d      	bne.n	8001cf8 <menu+0x1430>
 8001cdc:	4b68      	ldr	r3, [pc, #416]	; (8001e80 <menu+0x15b8>)
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	f083 0301 	eor.w	r3, r3, #1
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d006      	beq.n	8001cf8 <menu+0x1430>
			eepromData[8] = kapi1Tip;
 8001cea:	4b62      	ldr	r3, [pc, #392]	; (8001e74 <menu+0x15ac>)
 8001cec:	781a      	ldrb	r2, [r3, #0]
 8001cee:	4b65      	ldr	r3, [pc, #404]	; (8001e84 <menu+0x15bc>)
 8001cf0:	721a      	strb	r2, [r3, #8]
			hafizaYaz = 1;
 8001cf2:	4b65      	ldr	r3, [pc, #404]	; (8001e88 <menu+0x15c0>)
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 10) {
 8001cf8:	4b64      	ldr	r3, [pc, #400]	; (8001e8c <menu+0x15c4>)
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	2b0a      	cmp	r3, #10
 8001cfe:	d17f      	bne.n	8001e00 <menu+0x1538>
		if(dilSecim == 0) {
 8001d00:	4b63      	ldr	r3, [pc, #396]	; (8001e90 <menu+0x15c8>)
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d10a      	bne.n	8001d1e <menu+0x1456>
			lcd_print(1, 1, "1.KAPI AC SURESi");
 8001d08:	4a62      	ldr	r2, [pc, #392]	; (8001e94 <menu+0x15cc>)
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	2001      	movs	r0, #1
 8001d0e:	f7fe fd7a 	bl	8000806 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8001d12:	4a61      	ldr	r2, [pc, #388]	; (8001e98 <menu+0x15d0>)
 8001d14:	2101      	movs	r1, #1
 8001d16:	2002      	movs	r0, #2
 8001d18:	f7fe fd75 	bl	8000806 <lcd_print>
 8001d1c:	e00d      	b.n	8001d3a <menu+0x1472>
		} else if(dilSecim == 1) {
 8001d1e:	4b5c      	ldr	r3, [pc, #368]	; (8001e90 <menu+0x15c8>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d109      	bne.n	8001d3a <menu+0x1472>
			lcd_print(1, 1, "1.FLR DR OPN TMR");
 8001d26:	4a5d      	ldr	r2, [pc, #372]	; (8001e9c <menu+0x15d4>)
 8001d28:	2101      	movs	r1, #1
 8001d2a:	2001      	movs	r0, #1
 8001d2c:	f7fe fd6b 	bl	8000806 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8001d30:	4a5b      	ldr	r2, [pc, #364]	; (8001ea0 <menu+0x15d8>)
 8001d32:	2101      	movs	r1, #1
 8001d34:	2002      	movs	r0, #2
 8001d36:	f7fe fd66 	bl	8000806 <lcd_print>
		}

		itoa(kapi1AcSure, snum, 10);
 8001d3a:	4b5a      	ldr	r3, [pc, #360]	; (8001ea4 <menu+0x15dc>)
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	220a      	movs	r2, #10
 8001d40:	4959      	ldr	r1, [pc, #356]	; (8001ea8 <menu+0x15e0>)
 8001d42:	4618      	mov	r0, r3
 8001d44:	f009 fe3a 	bl	800b9bc <itoa>
		lcd_print(2,16,snum);
 8001d48:	4a57      	ldr	r2, [pc, #348]	; (8001ea8 <menu+0x15e0>)
 8001d4a:	2110      	movs	r1, #16
 8001d4c:	2002      	movs	r0, #2
 8001d4e:	f7fe fd5a 	bl	8000806 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8001d52:	2102      	movs	r1, #2
 8001d54:	4849      	ldr	r0, [pc, #292]	; (8001e7c <menu+0x15b4>)
 8001d56:	f006 fe3b 	bl	80089d0 <HAL_GPIO_ReadPin>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d119      	bne.n	8001d94 <menu+0x14cc>
 8001d60:	4b47      	ldr	r3, [pc, #284]	; (8001e80 <menu+0x15b8>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	f083 0301 	eor.w	r3, r3, #1
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d012      	beq.n	8001d94 <menu+0x14cc>
 8001d6e:	4b41      	ldr	r3, [pc, #260]	; (8001e74 <menu+0x15ac>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d10e      	bne.n	8001d94 <menu+0x14cc>
			kapi1AcSure = kapi1AcSure + 1;
 8001d76:	4b4b      	ldr	r3, [pc, #300]	; (8001ea4 <menu+0x15dc>)
 8001d78:	781b      	ldrb	r3, [r3, #0]
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	b2da      	uxtb	r2, r3
 8001d7e:	4b49      	ldr	r3, [pc, #292]	; (8001ea4 <menu+0x15dc>)
 8001d80:	701a      	strb	r2, [r3, #0]

			if(kapi1AcSure > 5){
 8001d82:	4b48      	ldr	r3, [pc, #288]	; (8001ea4 <menu+0x15dc>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	2b05      	cmp	r3, #5
 8001d88:	d902      	bls.n	8001d90 <menu+0x14c8>
				kapi1AcSure = 0;
 8001d8a:	4b46      	ldr	r3, [pc, #280]	; (8001ea4 <menu+0x15dc>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001d90:	f003 f90e 	bl	8004fb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi1Tip == 0)) {
 8001d94:	2104      	movs	r1, #4
 8001d96:	4839      	ldr	r0, [pc, #228]	; (8001e7c <menu+0x15b4>)
 8001d98:	f006 fe1a 	bl	80089d0 <HAL_GPIO_ReadPin>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d119      	bne.n	8001dd6 <menu+0x150e>
 8001da2:	4b37      	ldr	r3, [pc, #220]	; (8001e80 <menu+0x15b8>)
 8001da4:	781b      	ldrb	r3, [r3, #0]
 8001da6:	f083 0301 	eor.w	r3, r3, #1
 8001daa:	b2db      	uxtb	r3, r3
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d012      	beq.n	8001dd6 <menu+0x150e>
 8001db0:	4b30      	ldr	r3, [pc, #192]	; (8001e74 <menu+0x15ac>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d10e      	bne.n	8001dd6 <menu+0x150e>
			kapi1AcSure = kapi1AcSure - 1;
 8001db8:	4b3a      	ldr	r3, [pc, #232]	; (8001ea4 <menu+0x15dc>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	b2da      	uxtb	r2, r3
 8001dc0:	4b38      	ldr	r3, [pc, #224]	; (8001ea4 <menu+0x15dc>)
 8001dc2:	701a      	strb	r2, [r3, #0]

		   	if(kapi1AcSure > 6){
 8001dc4:	4b37      	ldr	r3, [pc, #220]	; (8001ea4 <menu+0x15dc>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	2b06      	cmp	r3, #6
 8001dca:	d902      	bls.n	8001dd2 <menu+0x150a>
		   		kapi1AcSure = 5;
 8001dcc:	4b35      	ldr	r3, [pc, #212]	; (8001ea4 <menu+0x15dc>)
 8001dce:	2205      	movs	r2, #5
 8001dd0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001dd2:	f003 f8ed 	bl	8004fb0 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001dd6:	2108      	movs	r1, #8
 8001dd8:	4828      	ldr	r0, [pc, #160]	; (8001e7c <menu+0x15b4>)
 8001dda:	f006 fdf9 	bl	80089d0 <HAL_GPIO_ReadPin>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d10d      	bne.n	8001e00 <menu+0x1538>
 8001de4:	4b26      	ldr	r3, [pc, #152]	; (8001e80 <menu+0x15b8>)
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	f083 0301 	eor.w	r3, r3, #1
 8001dec:	b2db      	uxtb	r3, r3
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d006      	beq.n	8001e00 <menu+0x1538>
			eepromData[9] = kapi1AcSure;
 8001df2:	4b2c      	ldr	r3, [pc, #176]	; (8001ea4 <menu+0x15dc>)
 8001df4:	781a      	ldrb	r2, [r3, #0]
 8001df6:	4b23      	ldr	r3, [pc, #140]	; (8001e84 <menu+0x15bc>)
 8001df8:	725a      	strb	r2, [r3, #9]
			hafizaYaz = 1;
 8001dfa:	4b23      	ldr	r3, [pc, #140]	; (8001e88 <menu+0x15c0>)
 8001dfc:	2201      	movs	r2, #1
 8001dfe:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 11) {
 8001e00:	4b22      	ldr	r3, [pc, #136]	; (8001e8c <menu+0x15c4>)
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	2b0b      	cmp	r3, #11
 8001e06:	f040 80b5 	bne.w	8001f74 <menu+0x16ac>
		if(dilSecim == 0) {
 8001e0a:	4b21      	ldr	r3, [pc, #132]	; (8001e90 <menu+0x15c8>)
 8001e0c:	781b      	ldrb	r3, [r3, #0]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d105      	bne.n	8001e1e <menu+0x1556>
			lcd_print(1, 1, "2.KAT KAPI TiPi ");
 8001e12:	4a26      	ldr	r2, [pc, #152]	; (8001eac <menu+0x15e4>)
 8001e14:	2101      	movs	r1, #1
 8001e16:	2001      	movs	r0, #1
 8001e18:	f7fe fcf5 	bl	8000806 <lcd_print>
 8001e1c:	e008      	b.n	8001e30 <menu+0x1568>
		} else if(dilSecim == 1) {
 8001e1e:	4b1c      	ldr	r3, [pc, #112]	; (8001e90 <menu+0x15c8>)
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d104      	bne.n	8001e30 <menu+0x1568>
			lcd_print(1, 1, "2.FLOOR DOOR TYP");
 8001e26:	4a22      	ldr	r2, [pc, #136]	; (8001eb0 <menu+0x15e8>)
 8001e28:	2101      	movs	r1, #1
 8001e2a:	2001      	movs	r0, #1
 8001e2c:	f7fe fceb 	bl	8000806 <lcd_print>
		}

		if(kapi2Tip == 0) {
 8001e30:	4b20      	ldr	r3, [pc, #128]	; (8001eb4 <menu+0x15ec>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d105      	bne.n	8001e44 <menu+0x157c>
			lcd_print(2, 1, "Prudhome        ");
 8001e38:	4a1f      	ldr	r2, [pc, #124]	; (8001eb8 <menu+0x15f0>)
 8001e3a:	2101      	movs	r1, #1
 8001e3c:	2002      	movs	r0, #2
 8001e3e:	f7fe fce2 	bl	8000806 <lcd_print>
 8001e42:	e048      	b.n	8001ed6 <menu+0x160e>
		} else if(kapi2Tip == 1) {
 8001e44:	4b1b      	ldr	r3, [pc, #108]	; (8001eb4 <menu+0x15ec>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d13b      	bne.n	8001ec4 <menu+0x15fc>
			if(dilSecim == 0) {
 8001e4c:	4b10      	ldr	r3, [pc, #64]	; (8001e90 <menu+0x15c8>)
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d105      	bne.n	8001e60 <menu+0x1598>
				lcd_print(2, 1, "Buton kontrollu");
 8001e54:	4a19      	ldr	r2, [pc, #100]	; (8001ebc <menu+0x15f4>)
 8001e56:	2101      	movs	r1, #1
 8001e58:	2002      	movs	r0, #2
 8001e5a:	f7fe fcd4 	bl	8000806 <lcd_print>
 8001e5e:	e03a      	b.n	8001ed6 <menu+0x160e>
			} else if(dilSecim == 1) {
 8001e60:	4b0b      	ldr	r3, [pc, #44]	; (8001e90 <menu+0x15c8>)
 8001e62:	781b      	ldrb	r3, [r3, #0]
 8001e64:	2b01      	cmp	r3, #1
 8001e66:	d136      	bne.n	8001ed6 <menu+0x160e>
				lcd_print(2, 1, "Button cntrolled");
 8001e68:	4a15      	ldr	r2, [pc, #84]	; (8001ec0 <menu+0x15f8>)
 8001e6a:	2101      	movs	r1, #1
 8001e6c:	2002      	movs	r0, #2
 8001e6e:	f7fe fcca 	bl	8000806 <lcd_print>
 8001e72:	e030      	b.n	8001ed6 <menu+0x160e>
 8001e74:	20000b19 	.word	0x20000b19
 8001e78:	0800c8c4 	.word	0x0800c8c4
 8001e7c:	40010800 	.word	0x40010800
 8001e80:	20000b3e 	.word	0x20000b3e
 8001e84:	20000aa4 	.word	0x20000aa4
 8001e88:	20000b3b 	.word	0x20000b3b
 8001e8c:	20000b10 	.word	0x20000b10
 8001e90:	20000b30 	.word	0x20000b30
 8001e94:	0800c8d4 	.word	0x0800c8d4
 8001e98:	0800c8e8 	.word	0x0800c8e8
 8001e9c:	0800c8f8 	.word	0x0800c8f8
 8001ea0:	0800c90c 	.word	0x0800c90c
 8001ea4:	20000b29 	.word	0x20000b29
 8001ea8:	20000ae4 	.word	0x20000ae4
 8001eac:	0800c91c 	.word	0x0800c91c
 8001eb0:	0800c930 	.word	0x0800c930
 8001eb4:	20000b1a 	.word	0x20000b1a
 8001eb8:	0800c88c 	.word	0x0800c88c
 8001ebc:	0800c8a0 	.word	0x0800c8a0
 8001ec0:	0800c8b0 	.word	0x0800c8b0
			}
		} else if(kapi2Tip == 2) {
 8001ec4:	4b8a      	ldr	r3, [pc, #552]	; (80020f0 <menu+0x1828>)
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	2b02      	cmp	r3, #2
 8001eca:	d104      	bne.n	8001ed6 <menu+0x160e>
			lcd_print(2, 1, "Pizzato        ");
 8001ecc:	4a89      	ldr	r2, [pc, #548]	; (80020f4 <menu+0x182c>)
 8001ece:	2101      	movs	r1, #1
 8001ed0:	2002      	movs	r0, #2
 8001ed2:	f7fe fc98 	bl	8000806 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8001ed6:	2102      	movs	r1, #2
 8001ed8:	4887      	ldr	r0, [pc, #540]	; (80020f8 <menu+0x1830>)
 8001eda:	f006 fd79 	bl	80089d0 <HAL_GPIO_ReadPin>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	d115      	bne.n	8001f10 <menu+0x1648>
 8001ee4:	4b85      	ldr	r3, [pc, #532]	; (80020fc <menu+0x1834>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	f083 0301 	eor.w	r3, r3, #1
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d00e      	beq.n	8001f10 <menu+0x1648>
			kapi2Tip = kapi2Tip + 1;
 8001ef2:	4b7f      	ldr	r3, [pc, #508]	; (80020f0 <menu+0x1828>)
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	3301      	adds	r3, #1
 8001ef8:	b2da      	uxtb	r2, r3
 8001efa:	4b7d      	ldr	r3, [pc, #500]	; (80020f0 <menu+0x1828>)
 8001efc:	701a      	strb	r2, [r3, #0]

			if(kapi2Tip > 2){
 8001efe:	4b7c      	ldr	r3, [pc, #496]	; (80020f0 <menu+0x1828>)
 8001f00:	781b      	ldrb	r3, [r3, #0]
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d902      	bls.n	8001f0c <menu+0x1644>
				kapi2Tip = 0;
 8001f06:	4b7a      	ldr	r3, [pc, #488]	; (80020f0 <menu+0x1828>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8001f0c:	f003 f850 	bl	8004fb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f10:	2104      	movs	r1, #4
 8001f12:	4879      	ldr	r0, [pc, #484]	; (80020f8 <menu+0x1830>)
 8001f14:	f006 fd5c 	bl	80089d0 <HAL_GPIO_ReadPin>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d115      	bne.n	8001f4a <menu+0x1682>
 8001f1e:	4b77      	ldr	r3, [pc, #476]	; (80020fc <menu+0x1834>)
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	f083 0301 	eor.w	r3, r3, #1
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d00e      	beq.n	8001f4a <menu+0x1682>
			kapi2Tip = kapi2Tip - 1;
 8001f2c:	4b70      	ldr	r3, [pc, #448]	; (80020f0 <menu+0x1828>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	3b01      	subs	r3, #1
 8001f32:	b2da      	uxtb	r2, r3
 8001f34:	4b6e      	ldr	r3, [pc, #440]	; (80020f0 <menu+0x1828>)
 8001f36:	701a      	strb	r2, [r3, #0]

		   	if(kapi2Tip > 3){
 8001f38:	4b6d      	ldr	r3, [pc, #436]	; (80020f0 <menu+0x1828>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	2b03      	cmp	r3, #3
 8001f3e:	d902      	bls.n	8001f46 <menu+0x167e>
		   		kapi2Tip = 2;
 8001f40:	4b6b      	ldr	r3, [pc, #428]	; (80020f0 <menu+0x1828>)
 8001f42:	2202      	movs	r2, #2
 8001f44:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8001f46:	f003 f833 	bl	8004fb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8001f4a:	2108      	movs	r1, #8
 8001f4c:	486a      	ldr	r0, [pc, #424]	; (80020f8 <menu+0x1830>)
 8001f4e:	f006 fd3f 	bl	80089d0 <HAL_GPIO_ReadPin>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d10d      	bne.n	8001f74 <menu+0x16ac>
 8001f58:	4b68      	ldr	r3, [pc, #416]	; (80020fc <menu+0x1834>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	f083 0301 	eor.w	r3, r3, #1
 8001f60:	b2db      	uxtb	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d006      	beq.n	8001f74 <menu+0x16ac>
			eepromData[10] = kapi2Tip;
 8001f66:	4b62      	ldr	r3, [pc, #392]	; (80020f0 <menu+0x1828>)
 8001f68:	781a      	ldrb	r2, [r3, #0]
 8001f6a:	4b65      	ldr	r3, [pc, #404]	; (8002100 <menu+0x1838>)
 8001f6c:	729a      	strb	r2, [r3, #10]
			hafizaYaz = 1;
 8001f6e:	4b65      	ldr	r3, [pc, #404]	; (8002104 <menu+0x183c>)
 8001f70:	2201      	movs	r2, #1
 8001f72:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 12) {
 8001f74:	4b64      	ldr	r3, [pc, #400]	; (8002108 <menu+0x1840>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	2b0c      	cmp	r3, #12
 8001f7a:	d17f      	bne.n	800207c <menu+0x17b4>
		if(dilSecim == 0) {
 8001f7c:	4b63      	ldr	r3, [pc, #396]	; (800210c <menu+0x1844>)
 8001f7e:	781b      	ldrb	r3, [r3, #0]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d10a      	bne.n	8001f9a <menu+0x16d2>
			lcd_print(1, 1, "2.KAPI AC SURESi");
 8001f84:	4a62      	ldr	r2, [pc, #392]	; (8002110 <menu+0x1848>)
 8001f86:	2101      	movs	r1, #1
 8001f88:	2001      	movs	r0, #1
 8001f8a:	f7fe fc3c 	bl	8000806 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 8001f8e:	4a61      	ldr	r2, [pc, #388]	; (8002114 <menu+0x184c>)
 8001f90:	2101      	movs	r1, #1
 8001f92:	2002      	movs	r0, #2
 8001f94:	f7fe fc37 	bl	8000806 <lcd_print>
 8001f98:	e00d      	b.n	8001fb6 <menu+0x16ee>
		} else if(dilSecim == 1) {
 8001f9a:	4b5c      	ldr	r3, [pc, #368]	; (800210c <menu+0x1844>)
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	2b01      	cmp	r3, #1
 8001fa0:	d109      	bne.n	8001fb6 <menu+0x16ee>
			lcd_print(1, 1, "2.FLR DR OPN TMR");
 8001fa2:	4a5d      	ldr	r2, [pc, #372]	; (8002118 <menu+0x1850>)
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	2001      	movs	r0, #1
 8001fa8:	f7fe fc2d 	bl	8000806 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8001fac:	4a5b      	ldr	r2, [pc, #364]	; (800211c <menu+0x1854>)
 8001fae:	2101      	movs	r1, #1
 8001fb0:	2002      	movs	r0, #2
 8001fb2:	f7fe fc28 	bl	8000806 <lcd_print>
		}

		itoa(kapi2AcSure, snum, 10);
 8001fb6:	4b5a      	ldr	r3, [pc, #360]	; (8002120 <menu+0x1858>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	220a      	movs	r2, #10
 8001fbc:	4959      	ldr	r1, [pc, #356]	; (8002124 <menu+0x185c>)
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f009 fcfc 	bl	800b9bc <itoa>
		lcd_print(2,16,snum);
 8001fc4:	4a57      	ldr	r2, [pc, #348]	; (8002124 <menu+0x185c>)
 8001fc6:	2110      	movs	r1, #16
 8001fc8:	2002      	movs	r0, #2
 8001fca:	f7fe fc1c 	bl	8000806 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8001fce:	2102      	movs	r1, #2
 8001fd0:	4849      	ldr	r0, [pc, #292]	; (80020f8 <menu+0x1830>)
 8001fd2:	f006 fcfd 	bl	80089d0 <HAL_GPIO_ReadPin>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d119      	bne.n	8002010 <menu+0x1748>
 8001fdc:	4b47      	ldr	r3, [pc, #284]	; (80020fc <menu+0x1834>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	f083 0301 	eor.w	r3, r3, #1
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d012      	beq.n	8002010 <menu+0x1748>
 8001fea:	4b41      	ldr	r3, [pc, #260]	; (80020f0 <menu+0x1828>)
 8001fec:	781b      	ldrb	r3, [r3, #0]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d10e      	bne.n	8002010 <menu+0x1748>
			kapi2AcSure = kapi2AcSure + 1;
 8001ff2:	4b4b      	ldr	r3, [pc, #300]	; (8002120 <menu+0x1858>)
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	4b49      	ldr	r3, [pc, #292]	; (8002120 <menu+0x1858>)
 8001ffc:	701a      	strb	r2, [r3, #0]

			if(kapi2AcSure > 5) {
 8001ffe:	4b48      	ldr	r3, [pc, #288]	; (8002120 <menu+0x1858>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	2b05      	cmp	r3, #5
 8002004:	d902      	bls.n	800200c <menu+0x1744>
				kapi2AcSure = 0;
 8002006:	4b46      	ldr	r3, [pc, #280]	; (8002120 <menu+0x1858>)
 8002008:	2200      	movs	r2, #0
 800200a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800200c:	f002 ffd0 	bl	8004fb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapi2Tip == 0)) {
 8002010:	2104      	movs	r1, #4
 8002012:	4839      	ldr	r0, [pc, #228]	; (80020f8 <menu+0x1830>)
 8002014:	f006 fcdc 	bl	80089d0 <HAL_GPIO_ReadPin>
 8002018:	4603      	mov	r3, r0
 800201a:	2b01      	cmp	r3, #1
 800201c:	d119      	bne.n	8002052 <menu+0x178a>
 800201e:	4b37      	ldr	r3, [pc, #220]	; (80020fc <menu+0x1834>)
 8002020:	781b      	ldrb	r3, [r3, #0]
 8002022:	f083 0301 	eor.w	r3, r3, #1
 8002026:	b2db      	uxtb	r3, r3
 8002028:	2b00      	cmp	r3, #0
 800202a:	d012      	beq.n	8002052 <menu+0x178a>
 800202c:	4b30      	ldr	r3, [pc, #192]	; (80020f0 <menu+0x1828>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d10e      	bne.n	8002052 <menu+0x178a>
			kapi2AcSure = kapi2AcSure - 1;
 8002034:	4b3a      	ldr	r3, [pc, #232]	; (8002120 <menu+0x1858>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	3b01      	subs	r3, #1
 800203a:	b2da      	uxtb	r2, r3
 800203c:	4b38      	ldr	r3, [pc, #224]	; (8002120 <menu+0x1858>)
 800203e:	701a      	strb	r2, [r3, #0]

		   	if(kapi2AcSure > 6) {
 8002040:	4b37      	ldr	r3, [pc, #220]	; (8002120 <menu+0x1858>)
 8002042:	781b      	ldrb	r3, [r3, #0]
 8002044:	2b06      	cmp	r3, #6
 8002046:	d902      	bls.n	800204e <menu+0x1786>
		   		kapi2AcSure = 5;
 8002048:	4b35      	ldr	r3, [pc, #212]	; (8002120 <menu+0x1858>)
 800204a:	2205      	movs	r2, #5
 800204c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800204e:	f002 ffaf 	bl	8004fb0 <bekle>
		}
		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002052:	2108      	movs	r1, #8
 8002054:	4828      	ldr	r0, [pc, #160]	; (80020f8 <menu+0x1830>)
 8002056:	f006 fcbb 	bl	80089d0 <HAL_GPIO_ReadPin>
 800205a:	4603      	mov	r3, r0
 800205c:	2b01      	cmp	r3, #1
 800205e:	d10d      	bne.n	800207c <menu+0x17b4>
 8002060:	4b26      	ldr	r3, [pc, #152]	; (80020fc <menu+0x1834>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	f083 0301 	eor.w	r3, r3, #1
 8002068:	b2db      	uxtb	r3, r3
 800206a:	2b00      	cmp	r3, #0
 800206c:	d006      	beq.n	800207c <menu+0x17b4>
			eepromData[11] = kapi2AcSure;
 800206e:	4b2c      	ldr	r3, [pc, #176]	; (8002120 <menu+0x1858>)
 8002070:	781a      	ldrb	r2, [r3, #0]
 8002072:	4b23      	ldr	r3, [pc, #140]	; (8002100 <menu+0x1838>)
 8002074:	72da      	strb	r2, [r3, #11]
			hafizaYaz = 1;
 8002076:	4b23      	ldr	r3, [pc, #140]	; (8002104 <menu+0x183c>)
 8002078:	2201      	movs	r2, #1
 800207a:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 13) {
 800207c:	4b22      	ldr	r3, [pc, #136]	; (8002108 <menu+0x1840>)
 800207e:	781b      	ldrb	r3, [r3, #0]
 8002080:	2b0d      	cmp	r3, #13
 8002082:	f040 80b5 	bne.w	80021f0 <menu+0x1928>
		if(dilSecim == 0) {
 8002086:	4b21      	ldr	r3, [pc, #132]	; (800210c <menu+0x1844>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d105      	bne.n	800209a <menu+0x17d2>
			lcd_print(1, 1, "TABLA KAPI TiPi ");
 800208e:	4a26      	ldr	r2, [pc, #152]	; (8002128 <menu+0x1860>)
 8002090:	2101      	movs	r1, #1
 8002092:	2001      	movs	r0, #1
 8002094:	f7fe fbb7 	bl	8000806 <lcd_print>
 8002098:	e008      	b.n	80020ac <menu+0x17e4>
		} else if(dilSecim == 1){
 800209a:	4b1c      	ldr	r3, [pc, #112]	; (800210c <menu+0x1844>)
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d104      	bne.n	80020ac <menu+0x17e4>
			lcd_print(1, 1, "PLTFRM DOOR TYPE");
 80020a2:	4a22      	ldr	r2, [pc, #136]	; (800212c <menu+0x1864>)
 80020a4:	2101      	movs	r1, #1
 80020a6:	2001      	movs	r0, #1
 80020a8:	f7fe fbad 	bl	8000806 <lcd_print>
		}

		if(kapitablaTip == 0) {
 80020ac:	4b20      	ldr	r3, [pc, #128]	; (8002130 <menu+0x1868>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d105      	bne.n	80020c0 <menu+0x17f8>
			lcd_print(2, 1, "Prudhome        ");
 80020b4:	4a1f      	ldr	r2, [pc, #124]	; (8002134 <menu+0x186c>)
 80020b6:	2101      	movs	r1, #1
 80020b8:	2002      	movs	r0, #2
 80020ba:	f7fe fba4 	bl	8000806 <lcd_print>
 80020be:	e048      	b.n	8002152 <menu+0x188a>
		} else if(kapitablaTip == 1) {
 80020c0:	4b1b      	ldr	r3, [pc, #108]	; (8002130 <menu+0x1868>)
 80020c2:	781b      	ldrb	r3, [r3, #0]
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d13b      	bne.n	8002140 <menu+0x1878>
			if(dilSecim == 0) {
 80020c8:	4b10      	ldr	r3, [pc, #64]	; (800210c <menu+0x1844>)
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d105      	bne.n	80020dc <menu+0x1814>
				lcd_print(2, 1, "Buton kontrollu");
 80020d0:	4a19      	ldr	r2, [pc, #100]	; (8002138 <menu+0x1870>)
 80020d2:	2101      	movs	r1, #1
 80020d4:	2002      	movs	r0, #2
 80020d6:	f7fe fb96 	bl	8000806 <lcd_print>
 80020da:	e03a      	b.n	8002152 <menu+0x188a>
			} else if(dilSecim == 1) {
 80020dc:	4b0b      	ldr	r3, [pc, #44]	; (800210c <menu+0x1844>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d136      	bne.n	8002152 <menu+0x188a>
				lcd_print(2, 1, "Button cntrolled");
 80020e4:	4a15      	ldr	r2, [pc, #84]	; (800213c <menu+0x1874>)
 80020e6:	2101      	movs	r1, #1
 80020e8:	2002      	movs	r0, #2
 80020ea:	f7fe fb8c 	bl	8000806 <lcd_print>
 80020ee:	e030      	b.n	8002152 <menu+0x188a>
 80020f0:	20000b1a 	.word	0x20000b1a
 80020f4:	0800c8c4 	.word	0x0800c8c4
 80020f8:	40010800 	.word	0x40010800
 80020fc:	20000b3e 	.word	0x20000b3e
 8002100:	20000aa4 	.word	0x20000aa4
 8002104:	20000b3b 	.word	0x20000b3b
 8002108:	20000b10 	.word	0x20000b10
 800210c:	20000b30 	.word	0x20000b30
 8002110:	0800c944 	.word	0x0800c944
 8002114:	0800c8e8 	.word	0x0800c8e8
 8002118:	0800c958 	.word	0x0800c958
 800211c:	0800c90c 	.word	0x0800c90c
 8002120:	20000b2a 	.word	0x20000b2a
 8002124:	20000ae4 	.word	0x20000ae4
 8002128:	0800c96c 	.word	0x0800c96c
 800212c:	0800c980 	.word	0x0800c980
 8002130:	20000b1b 	.word	0x20000b1b
 8002134:	0800c88c 	.word	0x0800c88c
 8002138:	0800c8a0 	.word	0x0800c8a0
 800213c:	0800c8b0 	.word	0x0800c8b0
			}
		} else if(kapitablaTip == 2) {
 8002140:	4b5b      	ldr	r3, [pc, #364]	; (80022b0 <menu+0x19e8>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	2b02      	cmp	r3, #2
 8002146:	d104      	bne.n	8002152 <menu+0x188a>
			lcd_print(2, 1, "Pizzato        ");
 8002148:	4a5a      	ldr	r2, [pc, #360]	; (80022b4 <menu+0x19ec>)
 800214a:	2101      	movs	r1, #1
 800214c:	2002      	movs	r0, #2
 800214e:	f7fe fb5a 	bl	8000806 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002152:	2102      	movs	r1, #2
 8002154:	4858      	ldr	r0, [pc, #352]	; (80022b8 <menu+0x19f0>)
 8002156:	f006 fc3b 	bl	80089d0 <HAL_GPIO_ReadPin>
 800215a:	4603      	mov	r3, r0
 800215c:	2b01      	cmp	r3, #1
 800215e:	d115      	bne.n	800218c <menu+0x18c4>
 8002160:	4b56      	ldr	r3, [pc, #344]	; (80022bc <menu+0x19f4>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	f083 0301 	eor.w	r3, r3, #1
 8002168:	b2db      	uxtb	r3, r3
 800216a:	2b00      	cmp	r3, #0
 800216c:	d00e      	beq.n	800218c <menu+0x18c4>
			kapitablaTip = kapitablaTip + 1;
 800216e:	4b50      	ldr	r3, [pc, #320]	; (80022b0 <menu+0x19e8>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	3301      	adds	r3, #1
 8002174:	b2da      	uxtb	r2, r3
 8002176:	4b4e      	ldr	r3, [pc, #312]	; (80022b0 <menu+0x19e8>)
 8002178:	701a      	strb	r2, [r3, #0]

			if(kapitablaTip > 2) {
 800217a:	4b4d      	ldr	r3, [pc, #308]	; (80022b0 <menu+0x19e8>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	2b02      	cmp	r3, #2
 8002180:	d902      	bls.n	8002188 <menu+0x18c0>
				kapitablaTip = 0;
 8002182:	4b4b      	ldr	r3, [pc, #300]	; (80022b0 <menu+0x19e8>)
 8002184:	2200      	movs	r2, #0
 8002186:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002188:	f002 ff12 	bl	8004fb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800218c:	2104      	movs	r1, #4
 800218e:	484a      	ldr	r0, [pc, #296]	; (80022b8 <menu+0x19f0>)
 8002190:	f006 fc1e 	bl	80089d0 <HAL_GPIO_ReadPin>
 8002194:	4603      	mov	r3, r0
 8002196:	2b01      	cmp	r3, #1
 8002198:	d115      	bne.n	80021c6 <menu+0x18fe>
 800219a:	4b48      	ldr	r3, [pc, #288]	; (80022bc <menu+0x19f4>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	f083 0301 	eor.w	r3, r3, #1
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00e      	beq.n	80021c6 <menu+0x18fe>
			kapitablaTip = kapitablaTip - 1;
 80021a8:	4b41      	ldr	r3, [pc, #260]	; (80022b0 <menu+0x19e8>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	3b01      	subs	r3, #1
 80021ae:	b2da      	uxtb	r2, r3
 80021b0:	4b3f      	ldr	r3, [pc, #252]	; (80022b0 <menu+0x19e8>)
 80021b2:	701a      	strb	r2, [r3, #0]

		   	if(kapitablaTip > 3) {
 80021b4:	4b3e      	ldr	r3, [pc, #248]	; (80022b0 <menu+0x19e8>)
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	2b03      	cmp	r3, #3
 80021ba:	d902      	bls.n	80021c2 <menu+0x18fa>
		   		kapitablaTip = 2;
 80021bc:	4b3c      	ldr	r3, [pc, #240]	; (80022b0 <menu+0x19e8>)
 80021be:	2202      	movs	r2, #2
 80021c0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80021c2:	f002 fef5 	bl	8004fb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80021c6:	2108      	movs	r1, #8
 80021c8:	483b      	ldr	r0, [pc, #236]	; (80022b8 <menu+0x19f0>)
 80021ca:	f006 fc01 	bl	80089d0 <HAL_GPIO_ReadPin>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b01      	cmp	r3, #1
 80021d2:	d10d      	bne.n	80021f0 <menu+0x1928>
 80021d4:	4b39      	ldr	r3, [pc, #228]	; (80022bc <menu+0x19f4>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	f083 0301 	eor.w	r3, r3, #1
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d006      	beq.n	80021f0 <menu+0x1928>
			eepromData[12] = kapitablaTip;
 80021e2:	4b33      	ldr	r3, [pc, #204]	; (80022b0 <menu+0x19e8>)
 80021e4:	781a      	ldrb	r2, [r3, #0]
 80021e6:	4b36      	ldr	r3, [pc, #216]	; (80022c0 <menu+0x19f8>)
 80021e8:	731a      	strb	r2, [r3, #12]
			hafizaYaz = 1;
 80021ea:	4b36      	ldr	r3, [pc, #216]	; (80022c4 <menu+0x19fc>)
 80021ec:	2201      	movs	r2, #1
 80021ee:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 14) {
 80021f0:	4b35      	ldr	r3, [pc, #212]	; (80022c8 <menu+0x1a00>)
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b0e      	cmp	r3, #14
 80021f6:	f040 80f2 	bne.w	80023de <menu+0x1b16>
		if(dilSecim == 0) {
 80021fa:	4b34      	ldr	r3, [pc, #208]	; (80022cc <menu+0x1a04>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d105      	bne.n	800220e <menu+0x1946>
			lcd_print(1, 1, "TBL KPI AC KONUM");
 8002202:	4a33      	ldr	r2, [pc, #204]	; (80022d0 <menu+0x1a08>)
 8002204:	2101      	movs	r1, #1
 8002206:	2001      	movs	r0, #1
 8002208:	f7fe fafd 	bl	8000806 <lcd_print>
 800220c:	e008      	b.n	8002220 <menu+0x1958>
		} else if(dilSecim == 1) {
 800220e:	4b2f      	ldr	r3, [pc, #188]	; (80022cc <menu+0x1a04>)
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	2b01      	cmp	r3, #1
 8002214:	d104      	bne.n	8002220 <menu+0x1958>
			lcd_print(1, 1, "PLTFRM DR OP LOC");
 8002216:	4a2f      	ldr	r2, [pc, #188]	; (80022d4 <menu+0x1a0c>)
 8002218:	2101      	movs	r1, #1
 800221a:	2001      	movs	r0, #1
 800221c:	f7fe faf3 	bl	8000806 <lcd_print>
		}

		if(kapiTablaAcKonum == 0) {
 8002220:	4b2d      	ldr	r3, [pc, #180]	; (80022d8 <menu+0x1a10>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d113      	bne.n	8002250 <menu+0x1988>
			if(dilSecim == 0){
 8002228:	4b28      	ldr	r3, [pc, #160]	; (80022cc <menu+0x1a04>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d105      	bne.n	800223c <menu+0x1974>
				lcd_print(2, 1, "1. Katta ac    ");
 8002230:	4a2a      	ldr	r2, [pc, #168]	; (80022dc <menu+0x1a14>)
 8002232:	2101      	movs	r1, #1
 8002234:	2002      	movs	r0, #2
 8002236:	f7fe fae6 	bl	8000806 <lcd_print>
 800223a:	e071      	b.n	8002320 <menu+0x1a58>
			} else if(dilSecim == 1) {
 800223c:	4b23      	ldr	r3, [pc, #140]	; (80022cc <menu+0x1a04>)
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d16d      	bne.n	8002320 <menu+0x1a58>
				lcd_print(2, 1, "1. Floor open  ");
 8002244:	4a26      	ldr	r2, [pc, #152]	; (80022e0 <menu+0x1a18>)
 8002246:	2101      	movs	r1, #1
 8002248:	2002      	movs	r0, #2
 800224a:	f7fe fadc 	bl	8000806 <lcd_print>
 800224e:	e067      	b.n	8002320 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 1) {
 8002250:	4b21      	ldr	r3, [pc, #132]	; (80022d8 <menu+0x1a10>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d112      	bne.n	800227e <menu+0x19b6>
			if(dilSecim == 0){
 8002258:	4b1c      	ldr	r3, [pc, #112]	; (80022cc <menu+0x1a04>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d104      	bne.n	800226a <menu+0x19a2>
				lcd_print(2, 1, "2. Katta ac    ");
 8002260:	4a20      	ldr	r2, [pc, #128]	; (80022e4 <menu+0x1a1c>)
 8002262:	2101      	movs	r1, #1
 8002264:	2002      	movs	r0, #2
 8002266:	f7fe face 	bl	8000806 <lcd_print>
			}
			if(dilSecim == 1){
 800226a:	4b18      	ldr	r3, [pc, #96]	; (80022cc <menu+0x1a04>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	2b01      	cmp	r3, #1
 8002270:	d156      	bne.n	8002320 <menu+0x1a58>
				lcd_print(2, 1, "2. Floor open  ");
 8002272:	4a1d      	ldr	r2, [pc, #116]	; (80022e8 <menu+0x1a20>)
 8002274:	2101      	movs	r1, #1
 8002276:	2002      	movs	r0, #2
 8002278:	f7fe fac5 	bl	8000806 <lcd_print>
 800227c:	e050      	b.n	8002320 <menu+0x1a58>
			}
		} else if(kapiTablaAcKonum == 2) {
 800227e:	4b16      	ldr	r3, [pc, #88]	; (80022d8 <menu+0x1a10>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	2b02      	cmp	r3, #2
 8002284:	d136      	bne.n	80022f4 <menu+0x1a2c>
			if(dilSecim == 0){
 8002286:	4b11      	ldr	r3, [pc, #68]	; (80022cc <menu+0x1a04>)
 8002288:	781b      	ldrb	r3, [r3, #0]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d105      	bne.n	800229a <menu+0x19d2>
				lcd_print(2, 1, "1.+2. Katta ac  ");
 800228e:	4a17      	ldr	r2, [pc, #92]	; (80022ec <menu+0x1a24>)
 8002290:	2101      	movs	r1, #1
 8002292:	2002      	movs	r0, #2
 8002294:	f7fe fab7 	bl	8000806 <lcd_print>
 8002298:	e042      	b.n	8002320 <menu+0x1a58>
			} else if(dilSecim == 1) {
 800229a:	4b0c      	ldr	r3, [pc, #48]	; (80022cc <menu+0x1a04>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d13e      	bne.n	8002320 <menu+0x1a58>
				lcd_print(2, 1, "1.+2. Floor open");
 80022a2:	4a13      	ldr	r2, [pc, #76]	; (80022f0 <menu+0x1a28>)
 80022a4:	2101      	movs	r1, #1
 80022a6:	2002      	movs	r0, #2
 80022a8:	f7fe faad 	bl	8000806 <lcd_print>
 80022ac:	e038      	b.n	8002320 <menu+0x1a58>
 80022ae:	bf00      	nop
 80022b0:	20000b1b 	.word	0x20000b1b
 80022b4:	0800c8c4 	.word	0x0800c8c4
 80022b8:	40010800 	.word	0x40010800
 80022bc:	20000b3e 	.word	0x20000b3e
 80022c0:	20000aa4 	.word	0x20000aa4
 80022c4:	20000b3b 	.word	0x20000b3b
 80022c8:	20000b10 	.word	0x20000b10
 80022cc:	20000b30 	.word	0x20000b30
 80022d0:	0800c994 	.word	0x0800c994
 80022d4:	0800c9a8 	.word	0x0800c9a8
 80022d8:	20000b1d 	.word	0x20000b1d
 80022dc:	0800c9bc 	.word	0x0800c9bc
 80022e0:	0800c9cc 	.word	0x0800c9cc
 80022e4:	0800c9dc 	.word	0x0800c9dc
 80022e8:	0800c9ec 	.word	0x0800c9ec
 80022ec:	0800c9fc 	.word	0x0800c9fc
 80022f0:	0800ca10 	.word	0x0800ca10
			}
		} else if(kapiTablaAcKonum == 3) {
 80022f4:	4b9b      	ldr	r3, [pc, #620]	; (8002564 <menu+0x1c9c>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	2b03      	cmp	r3, #3
 80022fa:	d111      	bne.n	8002320 <menu+0x1a58>
			if(dilSecim == 0) {
 80022fc:	4b9a      	ldr	r3, [pc, #616]	; (8002568 <menu+0x1ca0>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d104      	bne.n	800230e <menu+0x1a46>
				lcd_print(2, 1, "Pasif           ");
 8002304:	4a99      	ldr	r2, [pc, #612]	; (800256c <menu+0x1ca4>)
 8002306:	2101      	movs	r1, #1
 8002308:	2002      	movs	r0, #2
 800230a:	f7fe fa7c 	bl	8000806 <lcd_print>
			}
			if(dilSecim == 1) {
 800230e:	4b96      	ldr	r3, [pc, #600]	; (8002568 <menu+0x1ca0>)
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	2b01      	cmp	r3, #1
 8002314:	d104      	bne.n	8002320 <menu+0x1a58>
				lcd_print(2, 1, "Passive         ");
 8002316:	4a96      	ldr	r2, [pc, #600]	; (8002570 <menu+0x1ca8>)
 8002318:	2101      	movs	r1, #1
 800231a:	2002      	movs	r0, #2
 800231c:	f7fe fa73 	bl	8000806 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002320:	2102      	movs	r1, #2
 8002322:	4894      	ldr	r0, [pc, #592]	; (8002574 <menu+0x1cac>)
 8002324:	f006 fb54 	bl	80089d0 <HAL_GPIO_ReadPin>
 8002328:	4603      	mov	r3, r0
 800232a:	2b01      	cmp	r3, #1
 800232c:	d115      	bne.n	800235a <menu+0x1a92>
 800232e:	4b92      	ldr	r3, [pc, #584]	; (8002578 <menu+0x1cb0>)
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	f083 0301 	eor.w	r3, r3, #1
 8002336:	b2db      	uxtb	r3, r3
 8002338:	2b00      	cmp	r3, #0
 800233a:	d00e      	beq.n	800235a <menu+0x1a92>
			kapiTablaAcKonum = kapiTablaAcKonum + 1;
 800233c:	4b89      	ldr	r3, [pc, #548]	; (8002564 <menu+0x1c9c>)
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	3301      	adds	r3, #1
 8002342:	b2da      	uxtb	r2, r3
 8002344:	4b87      	ldr	r3, [pc, #540]	; (8002564 <menu+0x1c9c>)
 8002346:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcKonum > 2){
 8002348:	4b86      	ldr	r3, [pc, #536]	; (8002564 <menu+0x1c9c>)
 800234a:	781b      	ldrb	r3, [r3, #0]
 800234c:	2b02      	cmp	r3, #2
 800234e:	d902      	bls.n	8002356 <menu+0x1a8e>
				kapiTablaAcKonum = 0;
 8002350:	4b84      	ldr	r3, [pc, #528]	; (8002564 <menu+0x1c9c>)
 8002352:	2200      	movs	r2, #0
 8002354:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002356:	f002 fe2b 	bl	8004fb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800235a:	2104      	movs	r1, #4
 800235c:	4885      	ldr	r0, [pc, #532]	; (8002574 <menu+0x1cac>)
 800235e:	f006 fb37 	bl	80089d0 <HAL_GPIO_ReadPin>
 8002362:	4603      	mov	r3, r0
 8002364:	2b01      	cmp	r3, #1
 8002366:	d115      	bne.n	8002394 <menu+0x1acc>
 8002368:	4b83      	ldr	r3, [pc, #524]	; (8002578 <menu+0x1cb0>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	f083 0301 	eor.w	r3, r3, #1
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d00e      	beq.n	8002394 <menu+0x1acc>
			kapiTablaAcKonum = kapiTablaAcKonum - 1;
 8002376:	4b7b      	ldr	r3, [pc, #492]	; (8002564 <menu+0x1c9c>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	3b01      	subs	r3, #1
 800237c:	b2da      	uxtb	r2, r3
 800237e:	4b79      	ldr	r3, [pc, #484]	; (8002564 <menu+0x1c9c>)
 8002380:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcKonum > 3){
 8002382:	4b78      	ldr	r3, [pc, #480]	; (8002564 <menu+0x1c9c>)
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	2b03      	cmp	r3, #3
 8002388:	d902      	bls.n	8002390 <menu+0x1ac8>
		   		kapiTablaAcKonum = 2;
 800238a:	4b76      	ldr	r3, [pc, #472]	; (8002564 <menu+0x1c9c>)
 800238c:	2202      	movs	r2, #2
 800238e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002390:	f002 fe0e 	bl	8004fb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002394:	2108      	movs	r1, #8
 8002396:	4877      	ldr	r0, [pc, #476]	; (8002574 <menu+0x1cac>)
 8002398:	f006 fb1a 	bl	80089d0 <HAL_GPIO_ReadPin>
 800239c:	4603      	mov	r3, r0
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d11d      	bne.n	80023de <menu+0x1b16>
 80023a2:	4b75      	ldr	r3, [pc, #468]	; (8002578 <menu+0x1cb0>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	f083 0301 	eor.w	r3, r3, #1
 80023aa:	b2db      	uxtb	r3, r3
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d016      	beq.n	80023de <menu+0x1b16>
			eepromData[34] = kapiTablaAcKonum;
 80023b0:	4b6c      	ldr	r3, [pc, #432]	; (8002564 <menu+0x1c9c>)
 80023b2:	781a      	ldrb	r2, [r3, #0]
 80023b4:	4b71      	ldr	r3, [pc, #452]	; (800257c <menu+0x1cb4>)
 80023b6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

			if(kapiTablaAcKonum == 0 || kapiTablaAcKonum == 2){
 80023ba:	4b6a      	ldr	r3, [pc, #424]	; (8002564 <menu+0x1c9c>)
 80023bc:	781b      	ldrb	r3, [r3, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d003      	beq.n	80023ca <menu+0x1b02>
 80023c2:	4b68      	ldr	r3, [pc, #416]	; (8002564 <menu+0x1c9c>)
 80023c4:	781b      	ldrb	r3, [r3, #0]
 80023c6:	2b02      	cmp	r3, #2
 80023c8:	d106      	bne.n	80023d8 <menu+0x1b10>
				altLimit = 1;
 80023ca:	4b6d      	ldr	r3, [pc, #436]	; (8002580 <menu+0x1cb8>)
 80023cc:	2201      	movs	r2, #1
 80023ce:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 80023d0:	4b6b      	ldr	r3, [pc, #428]	; (8002580 <menu+0x1cb8>)
 80023d2:	781a      	ldrb	r2, [r3, #0]
 80023d4:	4b69      	ldr	r3, [pc, #420]	; (800257c <menu+0x1cb4>)
 80023d6:	715a      	strb	r2, [r3, #5]
			}

			hafizaYaz = 1;
 80023d8:	4b6a      	ldr	r3, [pc, #424]	; (8002584 <menu+0x1cbc>)
 80023da:	2201      	movs	r2, #1
 80023dc:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 15) {
 80023de:	4b6a      	ldr	r3, [pc, #424]	; (8002588 <menu+0x1cc0>)
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	2b0f      	cmp	r3, #15
 80023e4:	d17f      	bne.n	80024e6 <menu+0x1c1e>
		if(dilSecim == 0) {
 80023e6:	4b60      	ldr	r3, [pc, #384]	; (8002568 <menu+0x1ca0>)
 80023e8:	781b      	ldrb	r3, [r3, #0]
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d10a      	bne.n	8002404 <menu+0x1b3c>
			lcd_print(1, 1, "TABLA KP AC SURE");
 80023ee:	4a67      	ldr	r2, [pc, #412]	; (800258c <menu+0x1cc4>)
 80023f0:	2101      	movs	r1, #1
 80023f2:	2001      	movs	r0, #1
 80023f4:	f7fe fa07 	bl	8000806 <lcd_print>
			lcd_print(2, 1, "Kac Saniye     ");
 80023f8:	4a65      	ldr	r2, [pc, #404]	; (8002590 <menu+0x1cc8>)
 80023fa:	2101      	movs	r1, #1
 80023fc:	2002      	movs	r0, #2
 80023fe:	f7fe fa02 	bl	8000806 <lcd_print>
 8002402:	e00d      	b.n	8002420 <menu+0x1b58>
		} else if(dilSecim == 1) {
 8002404:	4b58      	ldr	r3, [pc, #352]	; (8002568 <menu+0x1ca0>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d109      	bne.n	8002420 <menu+0x1b58>
			lcd_print(1, 1, "PLTFM DR OPN TMR");
 800240c:	4a61      	ldr	r2, [pc, #388]	; (8002594 <menu+0x1ccc>)
 800240e:	2101      	movs	r1, #1
 8002410:	2001      	movs	r0, #1
 8002412:	f7fe f9f8 	bl	8000806 <lcd_print>
			lcd_print(2, 1, "Seconds        ");
 8002416:	4a60      	ldr	r2, [pc, #384]	; (8002598 <menu+0x1cd0>)
 8002418:	2101      	movs	r1, #1
 800241a:	2002      	movs	r0, #2
 800241c:	f7fe f9f3 	bl	8000806 <lcd_print>
		}

		itoa(kapiTablaAcSure, snum, 10);
 8002420:	4b5e      	ldr	r3, [pc, #376]	; (800259c <menu+0x1cd4>)
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	220a      	movs	r2, #10
 8002426:	495e      	ldr	r1, [pc, #376]	; (80025a0 <menu+0x1cd8>)
 8002428:	4618      	mov	r0, r3
 800242a:	f009 fac7 	bl	800b9bc <itoa>
		lcd_print(2,16,snum);
 800242e:	4a5c      	ldr	r2, [pc, #368]	; (80025a0 <menu+0x1cd8>)
 8002430:	2110      	movs	r1, #16
 8002432:	2002      	movs	r0, #2
 8002434:	f7fe f9e7 	bl	8000806 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 8002438:	2102      	movs	r1, #2
 800243a:	484e      	ldr	r0, [pc, #312]	; (8002574 <menu+0x1cac>)
 800243c:	f006 fac8 	bl	80089d0 <HAL_GPIO_ReadPin>
 8002440:	4603      	mov	r3, r0
 8002442:	2b01      	cmp	r3, #1
 8002444:	d119      	bne.n	800247a <menu+0x1bb2>
 8002446:	4b4c      	ldr	r3, [pc, #304]	; (8002578 <menu+0x1cb0>)
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	f083 0301 	eor.w	r3, r3, #1
 800244e:	b2db      	uxtb	r3, r3
 8002450:	2b00      	cmp	r3, #0
 8002452:	d012      	beq.n	800247a <menu+0x1bb2>
 8002454:	4b53      	ldr	r3, [pc, #332]	; (80025a4 <menu+0x1cdc>)
 8002456:	781b      	ldrb	r3, [r3, #0]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d10e      	bne.n	800247a <menu+0x1bb2>
			kapiTablaAcSure = kapiTablaAcSure + 1;
 800245c:	4b4f      	ldr	r3, [pc, #316]	; (800259c <menu+0x1cd4>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	3301      	adds	r3, #1
 8002462:	b2da      	uxtb	r2, r3
 8002464:	4b4d      	ldr	r3, [pc, #308]	; (800259c <menu+0x1cd4>)
 8002466:	701a      	strb	r2, [r3, #0]

			if(kapiTablaAcSure > 5){
 8002468:	4b4c      	ldr	r3, [pc, #304]	; (800259c <menu+0x1cd4>)
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	2b05      	cmp	r3, #5
 800246e:	d902      	bls.n	8002476 <menu+0x1bae>
				kapiTablaAcSure = 0;
 8002470:	4b4a      	ldr	r3, [pc, #296]	; (800259c <menu+0x1cd4>)
 8002472:	2200      	movs	r2, #0
 8002474:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002476:	f002 fd9b 	bl	8004fb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (kapitablaTip == 0)) {
 800247a:	2104      	movs	r1, #4
 800247c:	483d      	ldr	r0, [pc, #244]	; (8002574 <menu+0x1cac>)
 800247e:	f006 faa7 	bl	80089d0 <HAL_GPIO_ReadPin>
 8002482:	4603      	mov	r3, r0
 8002484:	2b01      	cmp	r3, #1
 8002486:	d119      	bne.n	80024bc <menu+0x1bf4>
 8002488:	4b3b      	ldr	r3, [pc, #236]	; (8002578 <menu+0x1cb0>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	f083 0301 	eor.w	r3, r3, #1
 8002490:	b2db      	uxtb	r3, r3
 8002492:	2b00      	cmp	r3, #0
 8002494:	d012      	beq.n	80024bc <menu+0x1bf4>
 8002496:	4b43      	ldr	r3, [pc, #268]	; (80025a4 <menu+0x1cdc>)
 8002498:	781b      	ldrb	r3, [r3, #0]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d10e      	bne.n	80024bc <menu+0x1bf4>
			kapiTablaAcSure = kapiTablaAcSure - 1;
 800249e:	4b3f      	ldr	r3, [pc, #252]	; (800259c <menu+0x1cd4>)
 80024a0:	781b      	ldrb	r3, [r3, #0]
 80024a2:	3b01      	subs	r3, #1
 80024a4:	b2da      	uxtb	r2, r3
 80024a6:	4b3d      	ldr	r3, [pc, #244]	; (800259c <menu+0x1cd4>)
 80024a8:	701a      	strb	r2, [r3, #0]

		   	if(kapiTablaAcSure > 6){
 80024aa:	4b3c      	ldr	r3, [pc, #240]	; (800259c <menu+0x1cd4>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2b06      	cmp	r3, #6
 80024b0:	d902      	bls.n	80024b8 <menu+0x1bf0>
		   		kapiTablaAcSure = 5;
 80024b2:	4b3a      	ldr	r3, [pc, #232]	; (800259c <menu+0x1cd4>)
 80024b4:	2205      	movs	r2, #5
 80024b6:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 80024b8:	f002 fd7a 	bl	8004fb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80024bc:	2108      	movs	r1, #8
 80024be:	482d      	ldr	r0, [pc, #180]	; (8002574 <menu+0x1cac>)
 80024c0:	f006 fa86 	bl	80089d0 <HAL_GPIO_ReadPin>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d10d      	bne.n	80024e6 <menu+0x1c1e>
 80024ca:	4b2b      	ldr	r3, [pc, #172]	; (8002578 <menu+0x1cb0>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	f083 0301 	eor.w	r3, r3, #1
 80024d2:	b2db      	uxtb	r3, r3
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d006      	beq.n	80024e6 <menu+0x1c1e>
			eepromData[13] = kapiTablaAcSure;
 80024d8:	4b30      	ldr	r3, [pc, #192]	; (800259c <menu+0x1cd4>)
 80024da:	781a      	ldrb	r2, [r3, #0]
 80024dc:	4b27      	ldr	r3, [pc, #156]	; (800257c <menu+0x1cb4>)
 80024de:	735a      	strb	r2, [r3, #13]
			hafizaYaz = 1;
 80024e0:	4b28      	ldr	r3, [pc, #160]	; (8002584 <menu+0x1cbc>)
 80024e2:	2201      	movs	r2, #1
 80024e4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 16) {
 80024e6:	4b28      	ldr	r3, [pc, #160]	; (8002588 <menu+0x1cc0>)
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	2b10      	cmp	r3, #16
 80024ec:	f040 80bc 	bne.w	8002668 <menu+0x1da0>
		if(dilSecim == 0) {
 80024f0:	4b1d      	ldr	r3, [pc, #116]	; (8002568 <menu+0x1ca0>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d105      	bne.n	8002504 <menu+0x1c3c>
			lcd_print(1, 1, "YUKARI YAVAS LMT");
 80024f8:	4a2b      	ldr	r2, [pc, #172]	; (80025a8 <menu+0x1ce0>)
 80024fa:	2101      	movs	r1, #1
 80024fc:	2001      	movs	r0, #1
 80024fe:	f7fe f982 	bl	8000806 <lcd_print>
 8002502:	e008      	b.n	8002516 <menu+0x1c4e>
		} else if(dilSecim == 1) {
 8002504:	4b18      	ldr	r3, [pc, #96]	; (8002568 <menu+0x1ca0>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	2b01      	cmp	r3, #1
 800250a:	d104      	bne.n	8002516 <menu+0x1c4e>
			lcd_print(1, 1, "UPPR SLW DWN LMT");
 800250c:	4a27      	ldr	r2, [pc, #156]	; (80025ac <menu+0x1ce4>)
 800250e:	2101      	movs	r1, #1
 8002510:	2001      	movs	r0, #1
 8002512:	f7fe f978 	bl	8000806 <lcd_print>
		}

		if(yukariYavasLimit == 0) {
 8002516:	4b26      	ldr	r3, [pc, #152]	; (80025b0 <menu+0x1ce8>)
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	2b00      	cmp	r3, #0
 800251c:	d113      	bne.n	8002546 <menu+0x1c7e>
			if(dilSecim == 0) {
 800251e:	4b12      	ldr	r3, [pc, #72]	; (8002568 <menu+0x1ca0>)
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d105      	bne.n	8002532 <menu+0x1c6a>
				lcd_print(2, 1, "Pasif           ");
 8002526:	4a11      	ldr	r2, [pc, #68]	; (800256c <menu+0x1ca4>)
 8002528:	2101      	movs	r1, #1
 800252a:	2002      	movs	r0, #2
 800252c:	f7fe f96b 	bl	8000806 <lcd_print>
 8002530:	e04b      	b.n	80025ca <menu+0x1d02>
			} else if(dilSecim == 1) {
 8002532:	4b0d      	ldr	r3, [pc, #52]	; (8002568 <menu+0x1ca0>)
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d147      	bne.n	80025ca <menu+0x1d02>
				lcd_print(2, 1, "Passive         ");
 800253a:	4a0d      	ldr	r2, [pc, #52]	; (8002570 <menu+0x1ca8>)
 800253c:	2101      	movs	r1, #1
 800253e:	2002      	movs	r0, #2
 8002540:	f7fe f961 	bl	8000806 <lcd_print>
 8002544:	e041      	b.n	80025ca <menu+0x1d02>
			}
		} else if(yukariYavasLimit == 1) {
 8002546:	4b1a      	ldr	r3, [pc, #104]	; (80025b0 <menu+0x1ce8>)
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d13d      	bne.n	80025ca <menu+0x1d02>
			if(dilSecim == 0) {
 800254e:	4b06      	ldr	r3, [pc, #24]	; (8002568 <menu+0x1ca0>)
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d130      	bne.n	80025b8 <menu+0x1cf0>
				lcd_print(2, 1, "Aktif           ");
 8002556:	4a17      	ldr	r2, [pc, #92]	; (80025b4 <menu+0x1cec>)
 8002558:	2101      	movs	r1, #1
 800255a:	2002      	movs	r0, #2
 800255c:	f7fe f953 	bl	8000806 <lcd_print>
 8002560:	e033      	b.n	80025ca <menu+0x1d02>
 8002562:	bf00      	nop
 8002564:	20000b1d 	.word	0x20000b1d
 8002568:	20000b30 	.word	0x20000b30
 800256c:	0800c684 	.word	0x0800c684
 8002570:	0800c698 	.word	0x0800c698
 8002574:	40010800 	.word	0x40010800
 8002578:	20000b3e 	.word	0x20000b3e
 800257c:	20000aa4 	.word	0x20000aa4
 8002580:	20000b16 	.word	0x20000b16
 8002584:	20000b3b 	.word	0x20000b3b
 8002588:	20000b10 	.word	0x20000b10
 800258c:	0800ca24 	.word	0x0800ca24
 8002590:	0800c8e8 	.word	0x0800c8e8
 8002594:	0800ca38 	.word	0x0800ca38
 8002598:	0800c90c 	.word	0x0800c90c
 800259c:	20000b2b 	.word	0x20000b2b
 80025a0:	20000ae4 	.word	0x20000ae4
 80025a4:	20000b1b 	.word	0x20000b1b
 80025a8:	0800ca4c 	.word	0x0800ca4c
 80025ac:	0800ca60 	.word	0x0800ca60
 80025b0:	20000b1e 	.word	0x20000b1e
 80025b4:	0800c6e4 	.word	0x0800c6e4
			} else if(dilSecim == 1) {
 80025b8:	4b99      	ldr	r3, [pc, #612]	; (8002820 <menu+0x1f58>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d104      	bne.n	80025ca <menu+0x1d02>
				lcd_print(2, 1, "Active          ");
 80025c0:	4a98      	ldr	r2, [pc, #608]	; (8002824 <menu+0x1f5c>)
 80025c2:	2101      	movs	r1, #1
 80025c4:	2002      	movs	r0, #2
 80025c6:	f7fe f91e 	bl	8000806 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80025ca:	2102      	movs	r1, #2
 80025cc:	4896      	ldr	r0, [pc, #600]	; (8002828 <menu+0x1f60>)
 80025ce:	f006 f9ff 	bl	80089d0 <HAL_GPIO_ReadPin>
 80025d2:	4603      	mov	r3, r0
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d115      	bne.n	8002604 <menu+0x1d3c>
 80025d8:	4b94      	ldr	r3, [pc, #592]	; (800282c <menu+0x1f64>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	f083 0301 	eor.w	r3, r3, #1
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00e      	beq.n	8002604 <menu+0x1d3c>
			yukariYavasLimit = yukariYavasLimit + 1;
 80025e6:	4b92      	ldr	r3, [pc, #584]	; (8002830 <menu+0x1f68>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	3301      	adds	r3, #1
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	4b90      	ldr	r3, [pc, #576]	; (8002830 <menu+0x1f68>)
 80025f0:	701a      	strb	r2, [r3, #0]

			if(yukariYavasLimit > 1){
 80025f2:	4b8f      	ldr	r3, [pc, #572]	; (8002830 <menu+0x1f68>)
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d902      	bls.n	8002600 <menu+0x1d38>
				yukariYavasLimit = 0;
 80025fa:	4b8d      	ldr	r3, [pc, #564]	; (8002830 <menu+0x1f68>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002600:	f002 fcd6 	bl	8004fb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002604:	2104      	movs	r1, #4
 8002606:	4888      	ldr	r0, [pc, #544]	; (8002828 <menu+0x1f60>)
 8002608:	f006 f9e2 	bl	80089d0 <HAL_GPIO_ReadPin>
 800260c:	4603      	mov	r3, r0
 800260e:	2b01      	cmp	r3, #1
 8002610:	d115      	bne.n	800263e <menu+0x1d76>
 8002612:	4b86      	ldr	r3, [pc, #536]	; (800282c <menu+0x1f64>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	f083 0301 	eor.w	r3, r3, #1
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b00      	cmp	r3, #0
 800261e:	d00e      	beq.n	800263e <menu+0x1d76>
			yukariYavasLimit = yukariYavasLimit - 1;
 8002620:	4b83      	ldr	r3, [pc, #524]	; (8002830 <menu+0x1f68>)
 8002622:	781b      	ldrb	r3, [r3, #0]
 8002624:	3b01      	subs	r3, #1
 8002626:	b2da      	uxtb	r2, r3
 8002628:	4b81      	ldr	r3, [pc, #516]	; (8002830 <menu+0x1f68>)
 800262a:	701a      	strb	r2, [r3, #0]

		   	if(yukariYavasLimit > 0){
 800262c:	4b80      	ldr	r3, [pc, #512]	; (8002830 <menu+0x1f68>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d002      	beq.n	800263a <menu+0x1d72>
		   		yukariYavasLimit = 1;
 8002634:	4b7e      	ldr	r3, [pc, #504]	; (8002830 <menu+0x1f68>)
 8002636:	2201      	movs	r2, #1
 8002638:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800263a:	f002 fcb9 	bl	8004fb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800263e:	2108      	movs	r1, #8
 8002640:	4879      	ldr	r0, [pc, #484]	; (8002828 <menu+0x1f60>)
 8002642:	f006 f9c5 	bl	80089d0 <HAL_GPIO_ReadPin>
 8002646:	4603      	mov	r3, r0
 8002648:	2b01      	cmp	r3, #1
 800264a:	d10d      	bne.n	8002668 <menu+0x1da0>
 800264c:	4b77      	ldr	r3, [pc, #476]	; (800282c <menu+0x1f64>)
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	f083 0301 	eor.w	r3, r3, #1
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d006      	beq.n	8002668 <menu+0x1da0>
			eepromData[14] = yukariYavasLimit;
 800265a:	4b75      	ldr	r3, [pc, #468]	; (8002830 <menu+0x1f68>)
 800265c:	781a      	ldrb	r2, [r3, #0]
 800265e:	4b75      	ldr	r3, [pc, #468]	; (8002834 <menu+0x1f6c>)
 8002660:	739a      	strb	r2, [r3, #14]
			hafizaYaz = 1;
 8002662:	4b75      	ldr	r3, [pc, #468]	; (8002838 <menu+0x1f70>)
 8002664:	2201      	movs	r2, #1
 8002666:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 17) {
 8002668:	4b74      	ldr	r3, [pc, #464]	; (800283c <menu+0x1f74>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	2b11      	cmp	r3, #17
 800266e:	f040 80c3 	bne.w	80027f8 <menu+0x1f30>
		if(dilSecim == 0) {
 8002672:	4b6b      	ldr	r3, [pc, #428]	; (8002820 <menu+0x1f58>)
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d105      	bne.n	8002686 <menu+0x1dbe>
			lcd_print(1, 1, "DEVIRME-YURUYUS ");
 800267a:	4a71      	ldr	r2, [pc, #452]	; (8002840 <menu+0x1f78>)
 800267c:	2101      	movs	r1, #1
 800267e:	2001      	movs	r0, #1
 8002680:	f7fe f8c1 	bl	8000806 <lcd_print>
 8002684:	e008      	b.n	8002698 <menu+0x1dd0>
		} else if(dilSecim == 1) {
 8002686:	4b66      	ldr	r3, [pc, #408]	; (8002820 <menu+0x1f58>)
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	2b01      	cmp	r3, #1
 800268c:	d104      	bne.n	8002698 <menu+0x1dd0>
			lcd_print(1, 1, "TPPNG-MOBIL PLT ");
 800268e:	4a6d      	ldr	r2, [pc, #436]	; (8002844 <menu+0x1f7c>)
 8002690:	2101      	movs	r1, #1
 8002692:	2001      	movs	r0, #1
 8002694:	f7fe f8b7 	bl	8000806 <lcd_print>
		}

		if(devirmeYuruyusSecim == 2) {
 8002698:	4b6b      	ldr	r3, [pc, #428]	; (8002848 <menu+0x1f80>)
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	2b02      	cmp	r3, #2
 800269e:	d113      	bne.n	80026c8 <menu+0x1e00>
			if(dilSecim == 0){
 80026a0:	4b5f      	ldr	r3, [pc, #380]	; (8002820 <menu+0x1f58>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d105      	bne.n	80026b4 <menu+0x1dec>
				lcd_print(2, 1, "Devirme aktif  ");
 80026a8:	4a68      	ldr	r2, [pc, #416]	; (800284c <menu+0x1f84>)
 80026aa:	2101      	movs	r1, #1
 80026ac:	2002      	movs	r0, #2
 80026ae:	f7fe f8aa 	bl	8000806 <lcd_print>
 80026b2:	e038      	b.n	8002726 <menu+0x1e5e>
			} else if(dilSecim == 1){
 80026b4:	4b5a      	ldr	r3, [pc, #360]	; (8002820 <menu+0x1f58>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d134      	bne.n	8002726 <menu+0x1e5e>
				lcd_print(2, 1, "Tipping active ");
 80026bc:	4a64      	ldr	r2, [pc, #400]	; (8002850 <menu+0x1f88>)
 80026be:	2101      	movs	r1, #1
 80026c0:	2002      	movs	r0, #2
 80026c2:	f7fe f8a0 	bl	8000806 <lcd_print>
 80026c6:	e02e      	b.n	8002726 <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80026c8:	4b5f      	ldr	r3, [pc, #380]	; (8002848 <menu+0x1f80>)
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	2b01      	cmp	r3, #1
 80026ce:	d113      	bne.n	80026f8 <menu+0x1e30>
			if(dilSecim == 0){
 80026d0:	4b53      	ldr	r3, [pc, #332]	; (8002820 <menu+0x1f58>)
 80026d2:	781b      	ldrb	r3, [r3, #0]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d105      	bne.n	80026e4 <menu+0x1e1c>
				lcd_print(2, 1, "Yuruyus aktif  ");
 80026d8:	4a5e      	ldr	r2, [pc, #376]	; (8002854 <menu+0x1f8c>)
 80026da:	2101      	movs	r1, #1
 80026dc:	2002      	movs	r0, #2
 80026de:	f7fe f892 	bl	8000806 <lcd_print>
 80026e2:	e020      	b.n	8002726 <menu+0x1e5e>
			} else if(dilSecim == 1) {
 80026e4:	4b4e      	ldr	r3, [pc, #312]	; (8002820 <menu+0x1f58>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d11c      	bne.n	8002726 <menu+0x1e5e>
				lcd_print(2, 1, "Drive active   ");
 80026ec:	4a5a      	ldr	r2, [pc, #360]	; (8002858 <menu+0x1f90>)
 80026ee:	2101      	movs	r1, #1
 80026f0:	2002      	movs	r0, #2
 80026f2:	f7fe f888 	bl	8000806 <lcd_print>
 80026f6:	e016      	b.n	8002726 <menu+0x1e5e>
			}
		} else if(devirmeYuruyusSecim == 0) {
 80026f8:	4b53      	ldr	r3, [pc, #332]	; (8002848 <menu+0x1f80>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d112      	bne.n	8002726 <menu+0x1e5e>
			if(dilSecim == 0) {
 8002700:	4b47      	ldr	r3, [pc, #284]	; (8002820 <menu+0x1f58>)
 8002702:	781b      	ldrb	r3, [r3, #0]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d105      	bne.n	8002714 <menu+0x1e4c>
				lcd_print(2, 1, "Pasif           ");
 8002708:	4a54      	ldr	r2, [pc, #336]	; (800285c <menu+0x1f94>)
 800270a:	2101      	movs	r1, #1
 800270c:	2002      	movs	r0, #2
 800270e:	f7fe f87a 	bl	8000806 <lcd_print>
 8002712:	e008      	b.n	8002726 <menu+0x1e5e>
			} else if(dilSecim == 1) {
 8002714:	4b42      	ldr	r3, [pc, #264]	; (8002820 <menu+0x1f58>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d104      	bne.n	8002726 <menu+0x1e5e>
				lcd_print(2, 1, "Passive         ");
 800271c:	4a50      	ldr	r2, [pc, #320]	; (8002860 <menu+0x1f98>)
 800271e:	2101      	movs	r1, #1
 8002720:	2002      	movs	r0, #2
 8002722:	f7fe f870 	bl	8000806 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002726:	2102      	movs	r1, #2
 8002728:	483f      	ldr	r0, [pc, #252]	; (8002828 <menu+0x1f60>)
 800272a:	f006 f951 	bl	80089d0 <HAL_GPIO_ReadPin>
 800272e:	4603      	mov	r3, r0
 8002730:	2b01      	cmp	r3, #1
 8002732:	d115      	bne.n	8002760 <menu+0x1e98>
 8002734:	4b3d      	ldr	r3, [pc, #244]	; (800282c <menu+0x1f64>)
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	f083 0301 	eor.w	r3, r3, #1
 800273c:	b2db      	uxtb	r3, r3
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00e      	beq.n	8002760 <menu+0x1e98>
			devirmeYuruyusSecim = devirmeYuruyusSecim + 1;
 8002742:	4b41      	ldr	r3, [pc, #260]	; (8002848 <menu+0x1f80>)
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	3301      	adds	r3, #1
 8002748:	b2da      	uxtb	r2, r3
 800274a:	4b3f      	ldr	r3, [pc, #252]	; (8002848 <menu+0x1f80>)
 800274c:	701a      	strb	r2, [r3, #0]

			if(devirmeYuruyusSecim > 2){
 800274e:	4b3e      	ldr	r3, [pc, #248]	; (8002848 <menu+0x1f80>)
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	2b02      	cmp	r3, #2
 8002754:	d902      	bls.n	800275c <menu+0x1e94>
				devirmeYuruyusSecim = 0;
 8002756:	4b3c      	ldr	r3, [pc, #240]	; (8002848 <menu+0x1f80>)
 8002758:	2200      	movs	r2, #0
 800275a:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800275c:	f002 fc28 	bl	8004fb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002760:	2104      	movs	r1, #4
 8002762:	4831      	ldr	r0, [pc, #196]	; (8002828 <menu+0x1f60>)
 8002764:	f006 f934 	bl	80089d0 <HAL_GPIO_ReadPin>
 8002768:	4603      	mov	r3, r0
 800276a:	2b01      	cmp	r3, #1
 800276c:	d115      	bne.n	800279a <menu+0x1ed2>
 800276e:	4b2f      	ldr	r3, [pc, #188]	; (800282c <menu+0x1f64>)
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	f083 0301 	eor.w	r3, r3, #1
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00e      	beq.n	800279a <menu+0x1ed2>
			devirmeYuruyusSecim = devirmeYuruyusSecim-1;
 800277c:	4b32      	ldr	r3, [pc, #200]	; (8002848 <menu+0x1f80>)
 800277e:	781b      	ldrb	r3, [r3, #0]
 8002780:	3b01      	subs	r3, #1
 8002782:	b2da      	uxtb	r2, r3
 8002784:	4b30      	ldr	r3, [pc, #192]	; (8002848 <menu+0x1f80>)
 8002786:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYuruyusSecim>3){
 8002788:	4b2f      	ldr	r3, [pc, #188]	; (8002848 <menu+0x1f80>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	2b03      	cmp	r3, #3
 800278e:	d902      	bls.n	8002796 <menu+0x1ece>
		   		devirmeYuruyusSecim = 2;
 8002790:	4b2d      	ldr	r3, [pc, #180]	; (8002848 <menu+0x1f80>)
 8002792:	2202      	movs	r2, #2
 8002794:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002796:	f002 fc0b 	bl	8004fb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800279a:	2108      	movs	r1, #8
 800279c:	4822      	ldr	r0, [pc, #136]	; (8002828 <menu+0x1f60>)
 800279e:	f006 f917 	bl	80089d0 <HAL_GPIO_ReadPin>
 80027a2:	4603      	mov	r3, r0
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d127      	bne.n	80027f8 <menu+0x1f30>
 80027a8:	4b20      	ldr	r3, [pc, #128]	; (800282c <menu+0x1f64>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	f083 0301 	eor.w	r3, r3, #1
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d020      	beq.n	80027f8 <menu+0x1f30>
			eepromData[15] = devirmeYuruyusSecim;
 80027b6:	4b24      	ldr	r3, [pc, #144]	; (8002848 <menu+0x1f80>)
 80027b8:	781a      	ldrb	r2, [r3, #0]
 80027ba:	4b1e      	ldr	r3, [pc, #120]	; (8002834 <menu+0x1f6c>)
 80027bc:	73da      	strb	r2, [r3, #15]

			if(devirmeYuruyusSecim == 2 || devirmeYuruyusSecim == 1) {
 80027be:	4b22      	ldr	r3, [pc, #136]	; (8002848 <menu+0x1f80>)
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d003      	beq.n	80027ce <menu+0x1f06>
 80027c6:	4b20      	ldr	r3, [pc, #128]	; (8002848 <menu+0x1f80>)
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d106      	bne.n	80027dc <menu+0x1f14>
				calismaSekli = 0;
 80027ce:	4b25      	ldr	r3, [pc, #148]	; (8002864 <menu+0x1f9c>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	701a      	strb	r2, [r3, #0]
				eepromData[1] = calismaSekli;
 80027d4:	4b23      	ldr	r3, [pc, #140]	; (8002864 <menu+0x1f9c>)
 80027d6:	781a      	ldrb	r2, [r3, #0]
 80027d8:	4b16      	ldr	r3, [pc, #88]	; (8002834 <menu+0x1f6c>)
 80027da:	705a      	strb	r2, [r3, #1]
			}

			if(devirmeYuruyusSecim == 1) {
 80027dc:	4b1a      	ldr	r3, [pc, #104]	; (8002848 <menu+0x1f80>)
 80027de:	781b      	ldrb	r3, [r3, #0]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d106      	bne.n	80027f2 <menu+0x1f2a>
				devirmeSilindirTipi = 1;
 80027e4:	4b20      	ldr	r3, [pc, #128]	; (8002868 <menu+0x1fa0>)
 80027e6:	2201      	movs	r2, #1
 80027e8:	701a      	strb	r2, [r3, #0]
				eepromData[18] = devirmeSilindirTipi;
 80027ea:	4b1f      	ldr	r3, [pc, #124]	; (8002868 <menu+0x1fa0>)
 80027ec:	781a      	ldrb	r2, [r3, #0]
 80027ee:	4b11      	ldr	r3, [pc, #68]	; (8002834 <menu+0x1f6c>)
 80027f0:	749a      	strb	r2, [r3, #18]
			}
			hafizaYaz = 1;
 80027f2:	4b11      	ldr	r3, [pc, #68]	; (8002838 <menu+0x1f70>)
 80027f4:	2201      	movs	r2, #1
 80027f6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 18) {
 80027f8:	4b10      	ldr	r3, [pc, #64]	; (800283c <menu+0x1f74>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	2b12      	cmp	r3, #18
 80027fe:	f040 80d5 	bne.w	80029ac <menu+0x20e4>
		if(devirmeYuruyusSecim == 2) {
 8002802:	4b11      	ldr	r3, [pc, #68]	; (8002848 <menu+0x1f80>)
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	2b02      	cmp	r3, #2
 8002808:	d13c      	bne.n	8002884 <menu+0x1fbc>
			if(dilSecim == 0) {
 800280a:	4b05      	ldr	r3, [pc, #20]	; (8002820 <menu+0x1f58>)
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d12e      	bne.n	8002870 <menu+0x1fa8>
				lcd_print(1, 1, "DEVRM YUKARI SVC");
 8002812:	4a16      	ldr	r2, [pc, #88]	; (800286c <menu+0x1fa4>)
 8002814:	2101      	movs	r1, #1
 8002816:	2001      	movs	r0, #1
 8002818:	f7fd fff5 	bl	8000806 <lcd_print>
 800281c:	e048      	b.n	80028b0 <menu+0x1fe8>
 800281e:	bf00      	nop
 8002820:	20000b30 	.word	0x20000b30
 8002824:	0800c6f8 	.word	0x0800c6f8
 8002828:	40010800 	.word	0x40010800
 800282c:	20000b3e 	.word	0x20000b3e
 8002830:	20000b1e 	.word	0x20000b1e
 8002834:	20000aa4 	.word	0x20000aa4
 8002838:	20000b3b 	.word	0x20000b3b
 800283c:	20000b10 	.word	0x20000b10
 8002840:	0800ca74 	.word	0x0800ca74
 8002844:	0800ca88 	.word	0x0800ca88
 8002848:	20000b1f 	.word	0x20000b1f
 800284c:	0800ca9c 	.word	0x0800ca9c
 8002850:	0800caac 	.word	0x0800caac
 8002854:	0800cabc 	.word	0x0800cabc
 8002858:	0800cacc 	.word	0x0800cacc
 800285c:	0800c684 	.word	0x0800c684
 8002860:	0800c698 	.word	0x0800c698
 8002864:	20000b11 	.word	0x20000b11
 8002868:	20000b22 	.word	0x20000b22
 800286c:	0800cadc 	.word	0x0800cadc
			} else if(dilSecim == 1) {
 8002870:	4b7b      	ldr	r3, [pc, #492]	; (8002a60 <menu+0x2198>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	2b01      	cmp	r3, #1
 8002876:	d11b      	bne.n	80028b0 <menu+0x1fe8>
				lcd_print(1, 1, "TPPNG SWTCH/OPN");
 8002878:	4a7a      	ldr	r2, [pc, #488]	; (8002a64 <menu+0x219c>)
 800287a:	2101      	movs	r1, #1
 800287c:	2001      	movs	r0, #1
 800287e:	f7fd ffc2 	bl	8000806 <lcd_print>
 8002882:	e015      	b.n	80028b0 <menu+0x1fe8>
			}
		} else if(devirmeYuruyusSecim == 1) {
 8002884:	4b78      	ldr	r3, [pc, #480]	; (8002a68 <menu+0x21a0>)
 8002886:	781b      	ldrb	r3, [r3, #0]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d111      	bne.n	80028b0 <menu+0x1fe8>
			if(dilSecim == 0){
 800288c:	4b74      	ldr	r3, [pc, #464]	; (8002a60 <menu+0x2198>)
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d104      	bne.n	800289e <menu+0x1fd6>
				lcd_print(1, 1, "YURUYUS ILER SVC");
 8002894:	4a75      	ldr	r2, [pc, #468]	; (8002a6c <menu+0x21a4>)
 8002896:	2101      	movs	r1, #1
 8002898:	2001      	movs	r0, #1
 800289a:	f7fd ffb4 	bl	8000806 <lcd_print>
			}
			if(dilSecim == 1){
 800289e:	4b70      	ldr	r3, [pc, #448]	; (8002a60 <menu+0x2198>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d104      	bne.n	80028b0 <menu+0x1fe8>
				lcd_print(1, 1, "DRVE FRWRD SWTCH");
 80028a6:	4a72      	ldr	r2, [pc, #456]	; (8002a70 <menu+0x21a8>)
 80028a8:	2101      	movs	r1, #1
 80028aa:	2001      	movs	r0, #1
 80028ac:	f7fd ffab 	bl	8000806 <lcd_print>
			}
		}

		if(devirmeYukariIleriLimit == 0) {
 80028b0:	4b70      	ldr	r3, [pc, #448]	; (8002a74 <menu+0x21ac>)
 80028b2:	781b      	ldrb	r3, [r3, #0]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d113      	bne.n	80028e0 <menu+0x2018>
			if(dilSecim == 0) {
 80028b8:	4b69      	ldr	r3, [pc, #420]	; (8002a60 <menu+0x2198>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d105      	bne.n	80028cc <menu+0x2004>
				lcd_print(2, 1, "Pasif           ");
 80028c0:	4a6d      	ldr	r2, [pc, #436]	; (8002a78 <menu+0x21b0>)
 80028c2:	2101      	movs	r1, #1
 80028c4:	2002      	movs	r0, #2
 80028c6:	f7fd ff9e 	bl	8000806 <lcd_print>
 80028ca:	e020      	b.n	800290e <menu+0x2046>
			} else if(dilSecim == 1){
 80028cc:	4b64      	ldr	r3, [pc, #400]	; (8002a60 <menu+0x2198>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d11c      	bne.n	800290e <menu+0x2046>
				lcd_print(2, 1, "Passive         ");
 80028d4:	4a69      	ldr	r2, [pc, #420]	; (8002a7c <menu+0x21b4>)
 80028d6:	2101      	movs	r1, #1
 80028d8:	2002      	movs	r0, #2
 80028da:	f7fd ff94 	bl	8000806 <lcd_print>
 80028de:	e016      	b.n	800290e <menu+0x2046>
			}
		} else if(devirmeYukariIleriLimit == 1){
 80028e0:	4b64      	ldr	r3, [pc, #400]	; (8002a74 <menu+0x21ac>)
 80028e2:	781b      	ldrb	r3, [r3, #0]
 80028e4:	2b01      	cmp	r3, #1
 80028e6:	d112      	bne.n	800290e <menu+0x2046>
			if(dilSecim == 0){
 80028e8:	4b5d      	ldr	r3, [pc, #372]	; (8002a60 <menu+0x2198>)
 80028ea:	781b      	ldrb	r3, [r3, #0]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d105      	bne.n	80028fc <menu+0x2034>
				lcd_print(2, 1, "Aktif           ");
 80028f0:	4a63      	ldr	r2, [pc, #396]	; (8002a80 <menu+0x21b8>)
 80028f2:	2101      	movs	r1, #1
 80028f4:	2002      	movs	r0, #2
 80028f6:	f7fd ff86 	bl	8000806 <lcd_print>
 80028fa:	e008      	b.n	800290e <menu+0x2046>
			} else if(dilSecim == 1){
 80028fc:	4b58      	ldr	r3, [pc, #352]	; (8002a60 <menu+0x2198>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d104      	bne.n	800290e <menu+0x2046>
				lcd_print(2, 1, "Active          ");
 8002904:	4a5f      	ldr	r2, [pc, #380]	; (8002a84 <menu+0x21bc>)
 8002906:	2101      	movs	r1, #1
 8002908:	2002      	movs	r0, #2
 800290a:	f7fd ff7c 	bl	8000806 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800290e:	2102      	movs	r1, #2
 8002910:	485d      	ldr	r0, [pc, #372]	; (8002a88 <menu+0x21c0>)
 8002912:	f006 f85d 	bl	80089d0 <HAL_GPIO_ReadPin>
 8002916:	4603      	mov	r3, r0
 8002918:	2b01      	cmp	r3, #1
 800291a:	d115      	bne.n	8002948 <menu+0x2080>
 800291c:	4b5b      	ldr	r3, [pc, #364]	; (8002a8c <menu+0x21c4>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	f083 0301 	eor.w	r3, r3, #1
 8002924:	b2db      	uxtb	r3, r3
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00e      	beq.n	8002948 <menu+0x2080>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit + 1;
 800292a:	4b52      	ldr	r3, [pc, #328]	; (8002a74 <menu+0x21ac>)
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	3301      	adds	r3, #1
 8002930:	b2da      	uxtb	r2, r3
 8002932:	4b50      	ldr	r3, [pc, #320]	; (8002a74 <menu+0x21ac>)
 8002934:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriLimit > 1){
 8002936:	4b4f      	ldr	r3, [pc, #316]	; (8002a74 <menu+0x21ac>)
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	2b01      	cmp	r3, #1
 800293c:	d902      	bls.n	8002944 <menu+0x207c>
				devirmeYukariIleriLimit = 0;
 800293e:	4b4d      	ldr	r3, [pc, #308]	; (8002a74 <menu+0x21ac>)
 8002940:	2200      	movs	r2, #0
 8002942:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002944:	f002 fb34 	bl	8004fb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002948:	2104      	movs	r1, #4
 800294a:	484f      	ldr	r0, [pc, #316]	; (8002a88 <menu+0x21c0>)
 800294c:	f006 f840 	bl	80089d0 <HAL_GPIO_ReadPin>
 8002950:	4603      	mov	r3, r0
 8002952:	2b01      	cmp	r3, #1
 8002954:	d115      	bne.n	8002982 <menu+0x20ba>
 8002956:	4b4d      	ldr	r3, [pc, #308]	; (8002a8c <menu+0x21c4>)
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	f083 0301 	eor.w	r3, r3, #1
 800295e:	b2db      	uxtb	r3, r3
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00e      	beq.n	8002982 <menu+0x20ba>
			devirmeYukariIleriLimit = devirmeYukariIleriLimit - 1;
 8002964:	4b43      	ldr	r3, [pc, #268]	; (8002a74 <menu+0x21ac>)
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	3b01      	subs	r3, #1
 800296a:	b2da      	uxtb	r2, r3
 800296c:	4b41      	ldr	r3, [pc, #260]	; (8002a74 <menu+0x21ac>)
 800296e:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriLimit > 0){
 8002970:	4b40      	ldr	r3, [pc, #256]	; (8002a74 <menu+0x21ac>)
 8002972:	781b      	ldrb	r3, [r3, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d002      	beq.n	800297e <menu+0x20b6>
		   		devirmeYukariIleriLimit = 1;
 8002978:	4b3e      	ldr	r3, [pc, #248]	; (8002a74 <menu+0x21ac>)
 800297a:	2201      	movs	r2, #1
 800297c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800297e:	f002 fb17 	bl	8004fb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002982:	2108      	movs	r1, #8
 8002984:	4840      	ldr	r0, [pc, #256]	; (8002a88 <menu+0x21c0>)
 8002986:	f006 f823 	bl	80089d0 <HAL_GPIO_ReadPin>
 800298a:	4603      	mov	r3, r0
 800298c:	2b01      	cmp	r3, #1
 800298e:	d10d      	bne.n	80029ac <menu+0x20e4>
 8002990:	4b3e      	ldr	r3, [pc, #248]	; (8002a8c <menu+0x21c4>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	f083 0301 	eor.w	r3, r3, #1
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b00      	cmp	r3, #0
 800299c:	d006      	beq.n	80029ac <menu+0x20e4>
			eepromData[16] = devirmeYukariIleriLimit;
 800299e:	4b35      	ldr	r3, [pc, #212]	; (8002a74 <menu+0x21ac>)
 80029a0:	781a      	ldrb	r2, [r3, #0]
 80029a2:	4b3b      	ldr	r3, [pc, #236]	; (8002a90 <menu+0x21c8>)
 80029a4:	741a      	strb	r2, [r3, #16]
			hafizaYaz = 1;
 80029a6:	4b3b      	ldr	r3, [pc, #236]	; (8002a94 <menu+0x21cc>)
 80029a8:	2201      	movs	r2, #1
 80029aa:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 19) {
 80029ac:	4b3a      	ldr	r3, [pc, #232]	; (8002a98 <menu+0x21d0>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	2b13      	cmp	r3, #19
 80029b2:	f040 80d5 	bne.w	8002b60 <menu+0x2298>
		if(devirmeYuruyusSecim == 2) {
 80029b6:	4b2c      	ldr	r3, [pc, #176]	; (8002a68 <menu+0x21a0>)
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d113      	bne.n	80029e6 <menu+0x211e>
			if(dilSecim == 0) {
 80029be:	4b28      	ldr	r3, [pc, #160]	; (8002a60 <menu+0x2198>)
 80029c0:	781b      	ldrb	r3, [r3, #0]
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d105      	bne.n	80029d2 <menu+0x210a>
				lcd_print(1, 1, "DEVIRM ASAGI SVC");
 80029c6:	4a35      	ldr	r2, [pc, #212]	; (8002a9c <menu+0x21d4>)
 80029c8:	2101      	movs	r1, #1
 80029ca:	2001      	movs	r0, #1
 80029cc:	f7fd ff1b 	bl	8000806 <lcd_print>
 80029d0:	e01f      	b.n	8002a12 <menu+0x214a>
			} else if(dilSecim == 1) {
 80029d2:	4b23      	ldr	r3, [pc, #140]	; (8002a60 <menu+0x2198>)
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d11b      	bne.n	8002a12 <menu+0x214a>
				lcd_print(1, 1, "TPPNG SWTCH/CLSD");
 80029da:	4a31      	ldr	r2, [pc, #196]	; (8002aa0 <menu+0x21d8>)
 80029dc:	2101      	movs	r1, #1
 80029de:	2001      	movs	r0, #1
 80029e0:	f7fd ff11 	bl	8000806 <lcd_print>
 80029e4:	e015      	b.n	8002a12 <menu+0x214a>
			}
		} else if(devirmeYuruyusSecim == 1) {
 80029e6:	4b20      	ldr	r3, [pc, #128]	; (8002a68 <menu+0x21a0>)
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d111      	bne.n	8002a12 <menu+0x214a>
			if(dilSecim == 0) {
 80029ee:	4b1c      	ldr	r3, [pc, #112]	; (8002a60 <menu+0x2198>)
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d104      	bne.n	8002a00 <menu+0x2138>
				lcd_print(1, 1, "YURUYUS GERI SVC");
 80029f6:	4a2b      	ldr	r2, [pc, #172]	; (8002aa4 <menu+0x21dc>)
 80029f8:	2101      	movs	r1, #1
 80029fa:	2001      	movs	r0, #1
 80029fc:	f7fd ff03 	bl	8000806 <lcd_print>
			}
			if(dilSecim == 1) {
 8002a00:	4b17      	ldr	r3, [pc, #92]	; (8002a60 <menu+0x2198>)
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d104      	bne.n	8002a12 <menu+0x214a>
				lcd_print(1, 1, "DRIVE BACK SWTCH");
 8002a08:	4a27      	ldr	r2, [pc, #156]	; (8002aa8 <menu+0x21e0>)
 8002a0a:	2101      	movs	r1, #1
 8002a0c:	2001      	movs	r0, #1
 8002a0e:	f7fd fefa 	bl	8000806 <lcd_print>
			}
		}

		if(devirmeAsagiGeriLimit == 0) {
 8002a12:	4b26      	ldr	r3, [pc, #152]	; (8002aac <menu+0x21e4>)
 8002a14:	781b      	ldrb	r3, [r3, #0]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d113      	bne.n	8002a42 <menu+0x217a>
			if(dilSecim == 0) {
 8002a1a:	4b11      	ldr	r3, [pc, #68]	; (8002a60 <menu+0x2198>)
 8002a1c:	781b      	ldrb	r3, [r3, #0]
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d105      	bne.n	8002a2e <menu+0x2166>
				lcd_print(2, 1, "Pasif           ");
 8002a22:	4a15      	ldr	r2, [pc, #84]	; (8002a78 <menu+0x21b0>)
 8002a24:	2101      	movs	r1, #1
 8002a26:	2002      	movs	r0, #2
 8002a28:	f7fd feed 	bl	8000806 <lcd_print>
 8002a2c:	e049      	b.n	8002ac2 <menu+0x21fa>
			} else if(dilSecim == 1) {
 8002a2e:	4b0c      	ldr	r3, [pc, #48]	; (8002a60 <menu+0x2198>)
 8002a30:	781b      	ldrb	r3, [r3, #0]
 8002a32:	2b01      	cmp	r3, #1
 8002a34:	d145      	bne.n	8002ac2 <menu+0x21fa>
				lcd_print(2, 1, "Passive         ");
 8002a36:	4a11      	ldr	r2, [pc, #68]	; (8002a7c <menu+0x21b4>)
 8002a38:	2101      	movs	r1, #1
 8002a3a:	2002      	movs	r0, #2
 8002a3c:	f7fd fee3 	bl	8000806 <lcd_print>
 8002a40:	e03f      	b.n	8002ac2 <menu+0x21fa>
			}
		} else if(devirmeAsagiGeriLimit == 1) {
 8002a42:	4b1a      	ldr	r3, [pc, #104]	; (8002aac <menu+0x21e4>)
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d13b      	bne.n	8002ac2 <menu+0x21fa>
			if(dilSecim == 0) {
 8002a4a:	4b05      	ldr	r3, [pc, #20]	; (8002a60 <menu+0x2198>)
 8002a4c:	781b      	ldrb	r3, [r3, #0]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d12e      	bne.n	8002ab0 <menu+0x21e8>
				lcd_print(2, 1, "Aktif           ");
 8002a52:	4a0b      	ldr	r2, [pc, #44]	; (8002a80 <menu+0x21b8>)
 8002a54:	2101      	movs	r1, #1
 8002a56:	2002      	movs	r0, #2
 8002a58:	f7fd fed5 	bl	8000806 <lcd_print>
 8002a5c:	e031      	b.n	8002ac2 <menu+0x21fa>
 8002a5e:	bf00      	nop
 8002a60:	20000b30 	.word	0x20000b30
 8002a64:	0800caf0 	.word	0x0800caf0
 8002a68:	20000b1f 	.word	0x20000b1f
 8002a6c:	0800cb00 	.word	0x0800cb00
 8002a70:	0800cb14 	.word	0x0800cb14
 8002a74:	20000b20 	.word	0x20000b20
 8002a78:	0800c684 	.word	0x0800c684
 8002a7c:	0800c698 	.word	0x0800c698
 8002a80:	0800c6e4 	.word	0x0800c6e4
 8002a84:	0800c6f8 	.word	0x0800c6f8
 8002a88:	40010800 	.word	0x40010800
 8002a8c:	20000b3e 	.word	0x20000b3e
 8002a90:	20000aa4 	.word	0x20000aa4
 8002a94:	20000b3b 	.word	0x20000b3b
 8002a98:	20000b10 	.word	0x20000b10
 8002a9c:	0800cb28 	.word	0x0800cb28
 8002aa0:	0800cb3c 	.word	0x0800cb3c
 8002aa4:	0800cb50 	.word	0x0800cb50
 8002aa8:	0800cb64 	.word	0x0800cb64
 8002aac:	20000b21 	.word	0x20000b21
			} else if(dilSecim == 1) {
 8002ab0:	4b90      	ldr	r3, [pc, #576]	; (8002cf4 <menu+0x242c>)
 8002ab2:	781b      	ldrb	r3, [r3, #0]
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d104      	bne.n	8002ac2 <menu+0x21fa>
				lcd_print(2, 1, "Active          ");
 8002ab8:	4a8f      	ldr	r2, [pc, #572]	; (8002cf8 <menu+0x2430>)
 8002aba:	2101      	movs	r1, #1
 8002abc:	2002      	movs	r0, #2
 8002abe:	f7fd fea2 	bl	8000806 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ac2:	2102      	movs	r1, #2
 8002ac4:	488d      	ldr	r0, [pc, #564]	; (8002cfc <menu+0x2434>)
 8002ac6:	f005 ff83 	bl	80089d0 <HAL_GPIO_ReadPin>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d115      	bne.n	8002afc <menu+0x2234>
 8002ad0:	4b8b      	ldr	r3, [pc, #556]	; (8002d00 <menu+0x2438>)
 8002ad2:	781b      	ldrb	r3, [r3, #0]
 8002ad4:	f083 0301 	eor.w	r3, r3, #1
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00e      	beq.n	8002afc <menu+0x2234>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit + 1;
 8002ade:	4b89      	ldr	r3, [pc, #548]	; (8002d04 <menu+0x243c>)
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	3301      	adds	r3, #1
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	4b87      	ldr	r3, [pc, #540]	; (8002d04 <menu+0x243c>)
 8002ae8:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriLimit > 1) {
 8002aea:	4b86      	ldr	r3, [pc, #536]	; (8002d04 <menu+0x243c>)
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d902      	bls.n	8002af8 <menu+0x2230>
				devirmeAsagiGeriLimit = 0;
 8002af2:	4b84      	ldr	r3, [pc, #528]	; (8002d04 <menu+0x243c>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002af8:	f002 fa5a 	bl	8004fb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002afc:	2104      	movs	r1, #4
 8002afe:	487f      	ldr	r0, [pc, #508]	; (8002cfc <menu+0x2434>)
 8002b00:	f005 ff66 	bl	80089d0 <HAL_GPIO_ReadPin>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d115      	bne.n	8002b36 <menu+0x226e>
 8002b0a:	4b7d      	ldr	r3, [pc, #500]	; (8002d00 <menu+0x2438>)
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	f083 0301 	eor.w	r3, r3, #1
 8002b12:	b2db      	uxtb	r3, r3
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d00e      	beq.n	8002b36 <menu+0x226e>
			devirmeAsagiGeriLimit = devirmeAsagiGeriLimit - 1;
 8002b18:	4b7a      	ldr	r3, [pc, #488]	; (8002d04 <menu+0x243c>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	3b01      	subs	r3, #1
 8002b1e:	b2da      	uxtb	r2, r3
 8002b20:	4b78      	ldr	r3, [pc, #480]	; (8002d04 <menu+0x243c>)
 8002b22:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriLimit > 0) {
 8002b24:	4b77      	ldr	r3, [pc, #476]	; (8002d04 <menu+0x243c>)
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d002      	beq.n	8002b32 <menu+0x226a>
		   		devirmeAsagiGeriLimit = 1;
 8002b2c:	4b75      	ldr	r3, [pc, #468]	; (8002d04 <menu+0x243c>)
 8002b2e:	2201      	movs	r2, #1
 8002b30:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002b32:	f002 fa3d 	bl	8004fb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002b36:	2108      	movs	r1, #8
 8002b38:	4870      	ldr	r0, [pc, #448]	; (8002cfc <menu+0x2434>)
 8002b3a:	f005 ff49 	bl	80089d0 <HAL_GPIO_ReadPin>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	d10d      	bne.n	8002b60 <menu+0x2298>
 8002b44:	4b6e      	ldr	r3, [pc, #440]	; (8002d00 <menu+0x2438>)
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	f083 0301 	eor.w	r3, r3, #1
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d006      	beq.n	8002b60 <menu+0x2298>
			eepromData[17] = devirmeAsagiGeriLimit;
 8002b52:	4b6c      	ldr	r3, [pc, #432]	; (8002d04 <menu+0x243c>)
 8002b54:	781a      	ldrb	r2, [r3, #0]
 8002b56:	4b6c      	ldr	r3, [pc, #432]	; (8002d08 <menu+0x2440>)
 8002b58:	745a      	strb	r2, [r3, #17]
			hafizaYaz = 1;
 8002b5a:	4b6c      	ldr	r3, [pc, #432]	; (8002d0c <menu+0x2444>)
 8002b5c:	2201      	movs	r2, #1
 8002b5e:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 20){
 8002b60:	4b6b      	ldr	r3, [pc, #428]	; (8002d10 <menu+0x2448>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	2b14      	cmp	r3, #20
 8002b66:	f040 80b5 	bne.w	8002cd4 <menu+0x240c>
		if(devirmeYuruyusSecim == 1) {
 8002b6a:	4b6a      	ldr	r3, [pc, #424]	; (8002d14 <menu+0x244c>)
 8002b6c:	781b      	ldrb	r3, [r3, #0]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d113      	bne.n	8002b9a <menu+0x22d2>
			if(dilSecim == 0) {
 8002b72:	4b60      	ldr	r3, [pc, #384]	; (8002cf4 <menu+0x242c>)
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d105      	bne.n	8002b86 <menu+0x22be>
				lcd_print(1, 1, "YURUYUS SECiLDi ");
 8002b7a:	4a67      	ldr	r2, [pc, #412]	; (8002d18 <menu+0x2450>)
 8002b7c:	2101      	movs	r1, #1
 8002b7e:	2001      	movs	r0, #1
 8002b80:	f7fd fe41 	bl	8000806 <lcd_print>
 8002b84:	e020      	b.n	8002bc8 <menu+0x2300>
			} else if(dilSecim == 1) {
 8002b86:	4b5b      	ldr	r3, [pc, #364]	; (8002cf4 <menu+0x242c>)
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d11c      	bne.n	8002bc8 <menu+0x2300>
				lcd_print(1, 1, "DRIVE SELECTED  ");
 8002b8e:	4a63      	ldr	r2, [pc, #396]	; (8002d1c <menu+0x2454>)
 8002b90:	2101      	movs	r1, #1
 8002b92:	2001      	movs	r0, #1
 8002b94:	f7fd fe37 	bl	8000806 <lcd_print>
 8002b98:	e016      	b.n	8002bc8 <menu+0x2300>
			}
		} else if(devirmeYuruyusSecim == 2) {
 8002b9a:	4b5e      	ldr	r3, [pc, #376]	; (8002d14 <menu+0x244c>)
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	2b02      	cmp	r3, #2
 8002ba0:	d112      	bne.n	8002bc8 <menu+0x2300>
			if(dilSecim == 0) {
 8002ba2:	4b54      	ldr	r3, [pc, #336]	; (8002cf4 <menu+0x242c>)
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d105      	bne.n	8002bb6 <menu+0x22ee>
				lcd_print(1, 1, "DEVIRME SLN TIPI");
 8002baa:	4a5d      	ldr	r2, [pc, #372]	; (8002d20 <menu+0x2458>)
 8002bac:	2101      	movs	r1, #1
 8002bae:	2001      	movs	r0, #1
 8002bb0:	f7fd fe29 	bl	8000806 <lcd_print>
 8002bb4:	e008      	b.n	8002bc8 <menu+0x2300>
			} else if(dilSecim == 1) {
 8002bb6:	4b4f      	ldr	r3, [pc, #316]	; (8002cf4 <menu+0x242c>)
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	2b01      	cmp	r3, #1
 8002bbc:	d104      	bne.n	8002bc8 <menu+0x2300>
				lcd_print(1, 1, "CYLNDR TYP/TIPPD");
 8002bbe:	4a59      	ldr	r2, [pc, #356]	; (8002d24 <menu+0x245c>)
 8002bc0:	2101      	movs	r1, #1
 8002bc2:	2001      	movs	r0, #1
 8002bc4:	f7fd fe1f 	bl	8000806 <lcd_print>
			}
		}

		if(devirmeSilindirTipi == 0) {
 8002bc8:	4b57      	ldr	r3, [pc, #348]	; (8002d28 <menu+0x2460>)
 8002bca:	781b      	ldrb	r3, [r3, #0]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d113      	bne.n	8002bf8 <menu+0x2330>
			if(dilSecim == 0) {
 8002bd0:	4b48      	ldr	r3, [pc, #288]	; (8002cf4 <menu+0x242c>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d105      	bne.n	8002be4 <menu+0x231c>
				lcd_print(2, 1, "Tek tesir       ");
 8002bd8:	4a54      	ldr	r2, [pc, #336]	; (8002d2c <menu+0x2464>)
 8002bda:	2101      	movs	r1, #1
 8002bdc:	2002      	movs	r0, #2
 8002bde:	f7fd fe12 	bl	8000806 <lcd_print>
 8002be2:	e020      	b.n	8002c26 <menu+0x235e>
			} else if(dilSecim == 1) {
 8002be4:	4b43      	ldr	r3, [pc, #268]	; (8002cf4 <menu+0x242c>)
 8002be6:	781b      	ldrb	r3, [r3, #0]
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d11c      	bne.n	8002c26 <menu+0x235e>
				lcd_print(2, 1, "Single acting  ");
 8002bec:	4a50      	ldr	r2, [pc, #320]	; (8002d30 <menu+0x2468>)
 8002bee:	2101      	movs	r1, #1
 8002bf0:	2002      	movs	r0, #2
 8002bf2:	f7fd fe08 	bl	8000806 <lcd_print>
 8002bf6:	e016      	b.n	8002c26 <menu+0x235e>
			}
		} else if(devirmeSilindirTipi == 1) {
 8002bf8:	4b4b      	ldr	r3, [pc, #300]	; (8002d28 <menu+0x2460>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d112      	bne.n	8002c26 <menu+0x235e>
			if(dilSecim == 0) {
 8002c00:	4b3c      	ldr	r3, [pc, #240]	; (8002cf4 <menu+0x242c>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d105      	bne.n	8002c14 <menu+0x234c>
				lcd_print(2, 1, "Cift tesir      ");
 8002c08:	4a4a      	ldr	r2, [pc, #296]	; (8002d34 <menu+0x246c>)
 8002c0a:	2101      	movs	r1, #1
 8002c0c:	2002      	movs	r0, #2
 8002c0e:	f7fd fdfa 	bl	8000806 <lcd_print>
 8002c12:	e008      	b.n	8002c26 <menu+0x235e>
			} else if(dilSecim == 1) {
 8002c14:	4b37      	ldr	r3, [pc, #220]	; (8002cf4 <menu+0x242c>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d104      	bne.n	8002c26 <menu+0x235e>
				lcd_print(2, 1, "Double acting  ");
 8002c1c:	4a46      	ldr	r2, [pc, #280]	; (8002d38 <menu+0x2470>)
 8002c1e:	2101      	movs	r1, #1
 8002c20:	2002      	movs	r0, #2
 8002c22:	f7fd fdf0 	bl	8000806 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8002c26:	2102      	movs	r1, #2
 8002c28:	4834      	ldr	r0, [pc, #208]	; (8002cfc <menu+0x2434>)
 8002c2a:	f005 fed1 	bl	80089d0 <HAL_GPIO_ReadPin>
 8002c2e:	4603      	mov	r3, r0
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d119      	bne.n	8002c68 <menu+0x23a0>
 8002c34:	4b32      	ldr	r3, [pc, #200]	; (8002d00 <menu+0x2438>)
 8002c36:	781b      	ldrb	r3, [r3, #0]
 8002c38:	f083 0301 	eor.w	r3, r3, #1
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d012      	beq.n	8002c68 <menu+0x23a0>
 8002c42:	4b34      	ldr	r3, [pc, #208]	; (8002d14 <menu+0x244c>)
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	2b02      	cmp	r3, #2
 8002c48:	d10e      	bne.n	8002c68 <menu+0x23a0>
			devirmeSilindirTipi = devirmeSilindirTipi + 1;
 8002c4a:	4b37      	ldr	r3, [pc, #220]	; (8002d28 <menu+0x2460>)
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	b2da      	uxtb	r2, r3
 8002c52:	4b35      	ldr	r3, [pc, #212]	; (8002d28 <menu+0x2460>)
 8002c54:	701a      	strb	r2, [r3, #0]

			if(devirmeSilindirTipi > 1) {
 8002c56:	4b34      	ldr	r3, [pc, #208]	; (8002d28 <menu+0x2460>)
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d902      	bls.n	8002c64 <menu+0x239c>
				devirmeSilindirTipi = 0;
 8002c5e:	4b32      	ldr	r3, [pc, #200]	; (8002d28 <menu+0x2460>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002c64:	f002 f9a4 	bl	8004fb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (devirmeYuruyusSecim == 2)) {
 8002c68:	2104      	movs	r1, #4
 8002c6a:	4824      	ldr	r0, [pc, #144]	; (8002cfc <menu+0x2434>)
 8002c6c:	f005 feb0 	bl	80089d0 <HAL_GPIO_ReadPin>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d119      	bne.n	8002caa <menu+0x23e2>
 8002c76:	4b22      	ldr	r3, [pc, #136]	; (8002d00 <menu+0x2438>)
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	f083 0301 	eor.w	r3, r3, #1
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d012      	beq.n	8002caa <menu+0x23e2>
 8002c84:	4b23      	ldr	r3, [pc, #140]	; (8002d14 <menu+0x244c>)
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d10e      	bne.n	8002caa <menu+0x23e2>
			devirmeSilindirTipi = devirmeSilindirTipi - 1;
 8002c8c:	4b26      	ldr	r3, [pc, #152]	; (8002d28 <menu+0x2460>)
 8002c8e:	781b      	ldrb	r3, [r3, #0]
 8002c90:	3b01      	subs	r3, #1
 8002c92:	b2da      	uxtb	r2, r3
 8002c94:	4b24      	ldr	r3, [pc, #144]	; (8002d28 <menu+0x2460>)
 8002c96:	701a      	strb	r2, [r3, #0]

		   	if(devirmeSilindirTipi > 0) {
 8002c98:	4b23      	ldr	r3, [pc, #140]	; (8002d28 <menu+0x2460>)
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d002      	beq.n	8002ca6 <menu+0x23de>
		   		devirmeSilindirTipi = 1;
 8002ca0:	4b21      	ldr	r3, [pc, #132]	; (8002d28 <menu+0x2460>)
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002ca6:	f002 f983 	bl	8004fb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002caa:	2108      	movs	r1, #8
 8002cac:	4813      	ldr	r0, [pc, #76]	; (8002cfc <menu+0x2434>)
 8002cae:	f005 fe8f 	bl	80089d0 <HAL_GPIO_ReadPin>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d10d      	bne.n	8002cd4 <menu+0x240c>
 8002cb8:	4b11      	ldr	r3, [pc, #68]	; (8002d00 <menu+0x2438>)
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	f083 0301 	eor.w	r3, r3, #1
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d006      	beq.n	8002cd4 <menu+0x240c>
			eepromData[18] = devirmeSilindirTipi;
 8002cc6:	4b18      	ldr	r3, [pc, #96]	; (8002d28 <menu+0x2460>)
 8002cc8:	781a      	ldrb	r2, [r3, #0]
 8002cca:	4b0f      	ldr	r3, [pc, #60]	; (8002d08 <menu+0x2440>)
 8002ccc:	749a      	strb	r2, [r3, #18]
			hafizaYaz = 1;
 8002cce:	4b0f      	ldr	r3, [pc, #60]	; (8002d0c <menu+0x2444>)
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 21) {
 8002cd4:	4b0e      	ldr	r3, [pc, #56]	; (8002d10 <menu+0x2448>)
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	2b15      	cmp	r3, #21
 8002cda:	f040 80c2 	bne.w	8002e62 <menu+0x259a>
		if(dilSecim == 0) {
 8002cde:	4b05      	ldr	r3, [pc, #20]	; (8002cf4 <menu+0x242c>)
 8002ce0:	781b      	ldrb	r3, [r3, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d12c      	bne.n	8002d40 <menu+0x2478>
			lcd_print(1, 1, "PLATFRM SLN TIPI");
 8002ce6:	4a15      	ldr	r2, [pc, #84]	; (8002d3c <menu+0x2474>)
 8002ce8:	2101      	movs	r1, #1
 8002cea:	2001      	movs	r0, #1
 8002cec:	f7fd fd8b 	bl	8000806 <lcd_print>
 8002cf0:	e02f      	b.n	8002d52 <menu+0x248a>
 8002cf2:	bf00      	nop
 8002cf4:	20000b30 	.word	0x20000b30
 8002cf8:	0800c6f8 	.word	0x0800c6f8
 8002cfc:	40010800 	.word	0x40010800
 8002d00:	20000b3e 	.word	0x20000b3e
 8002d04:	20000b21 	.word	0x20000b21
 8002d08:	20000aa4 	.word	0x20000aa4
 8002d0c:	20000b3b 	.word	0x20000b3b
 8002d10:	20000b10 	.word	0x20000b10
 8002d14:	20000b1f 	.word	0x20000b1f
 8002d18:	0800cb78 	.word	0x0800cb78
 8002d1c:	0800cb8c 	.word	0x0800cb8c
 8002d20:	0800cba0 	.word	0x0800cba0
 8002d24:	0800cbb4 	.word	0x0800cbb4
 8002d28:	20000b22 	.word	0x20000b22
 8002d2c:	0800cbc8 	.word	0x0800cbc8
 8002d30:	0800cbdc 	.word	0x0800cbdc
 8002d34:	0800cbec 	.word	0x0800cbec
 8002d38:	0800cc00 	.word	0x0800cc00
 8002d3c:	0800cc10 	.word	0x0800cc10
		} else if(dilSecim == 1) {
 8002d40:	4b9c      	ldr	r3, [pc, #624]	; (8002fb4 <menu+0x26ec>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d104      	bne.n	8002d52 <menu+0x248a>
			lcd_print(1, 1, "CYLNDR TYPE/PLT");
 8002d48:	4a9b      	ldr	r2, [pc, #620]	; (8002fb8 <menu+0x26f0>)
 8002d4a:	2101      	movs	r1, #1
 8002d4c:	2001      	movs	r0, #1
 8002d4e:	f7fd fd5a 	bl	8000806 <lcd_print>
		}

		if(platformSilindirTipi == 0) {
 8002d52:	4b9a      	ldr	r3, [pc, #616]	; (8002fbc <menu+0x26f4>)
 8002d54:	781b      	ldrb	r3, [r3, #0]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d112      	bne.n	8002d80 <menu+0x24b8>
			if(dilSecim == 0) {
 8002d5a:	4b96      	ldr	r3, [pc, #600]	; (8002fb4 <menu+0x26ec>)
 8002d5c:	781b      	ldrb	r3, [r3, #0]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d104      	bne.n	8002d6c <menu+0x24a4>
				lcd_print(2, 1, "Tek tesir       ");
 8002d62:	4a97      	ldr	r2, [pc, #604]	; (8002fc0 <menu+0x26f8>)
 8002d64:	2101      	movs	r1, #1
 8002d66:	2002      	movs	r0, #2
 8002d68:	f7fd fd4d 	bl	8000806 <lcd_print>
			}
			if(dilSecim == 1) {
 8002d6c:	4b91      	ldr	r3, [pc, #580]	; (8002fb4 <menu+0x26ec>)
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d11c      	bne.n	8002dae <menu+0x24e6>
				lcd_print(2, 1, "Single acting  ");
 8002d74:	4a93      	ldr	r2, [pc, #588]	; (8002fc4 <menu+0x26fc>)
 8002d76:	2101      	movs	r1, #1
 8002d78:	2002      	movs	r0, #2
 8002d7a:	f7fd fd44 	bl	8000806 <lcd_print>
 8002d7e:	e016      	b.n	8002dae <menu+0x24e6>
			}
		} else if(platformSilindirTipi == 1) {
 8002d80:	4b8e      	ldr	r3, [pc, #568]	; (8002fbc <menu+0x26f4>)
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d112      	bne.n	8002dae <menu+0x24e6>
			if(dilSecim == 0) {
 8002d88:	4b8a      	ldr	r3, [pc, #552]	; (8002fb4 <menu+0x26ec>)
 8002d8a:	781b      	ldrb	r3, [r3, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d105      	bne.n	8002d9c <menu+0x24d4>
				lcd_print(2, 1, "Cift tesir      ");
 8002d90:	4a8d      	ldr	r2, [pc, #564]	; (8002fc8 <menu+0x2700>)
 8002d92:	2101      	movs	r1, #1
 8002d94:	2002      	movs	r0, #2
 8002d96:	f7fd fd36 	bl	8000806 <lcd_print>
 8002d9a:	e008      	b.n	8002dae <menu+0x24e6>
			} else if(dilSecim == 1) {
 8002d9c:	4b85      	ldr	r3, [pc, #532]	; (8002fb4 <menu+0x26ec>)
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d104      	bne.n	8002dae <menu+0x24e6>
				lcd_print(2, 1, "Double acting  ");
 8002da4:	4a89      	ldr	r2, [pc, #548]	; (8002fcc <menu+0x2704>)
 8002da6:	2101      	movs	r1, #1
 8002da8:	2002      	movs	r0, #2
 8002daa:	f7fd fd2c 	bl	8000806 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002dae:	2102      	movs	r1, #2
 8002db0:	4887      	ldr	r0, [pc, #540]	; (8002fd0 <menu+0x2708>)
 8002db2:	f005 fe0d 	bl	80089d0 <HAL_GPIO_ReadPin>
 8002db6:	4603      	mov	r3, r0
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d115      	bne.n	8002de8 <menu+0x2520>
 8002dbc:	4b85      	ldr	r3, [pc, #532]	; (8002fd4 <menu+0x270c>)
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	f083 0301 	eor.w	r3, r3, #1
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00e      	beq.n	8002de8 <menu+0x2520>
			platformSilindirTipi = platformSilindirTipi + 1;
 8002dca:	4b7c      	ldr	r3, [pc, #496]	; (8002fbc <menu+0x26f4>)
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	3301      	adds	r3, #1
 8002dd0:	b2da      	uxtb	r2, r3
 8002dd2:	4b7a      	ldr	r3, [pc, #488]	; (8002fbc <menu+0x26f4>)
 8002dd4:	701a      	strb	r2, [r3, #0]

			if(platformSilindirTipi > 1) {
 8002dd6:	4b79      	ldr	r3, [pc, #484]	; (8002fbc <menu+0x26f4>)
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d902      	bls.n	8002de4 <menu+0x251c>
				platformSilindirTipi = 0;
 8002dde:	4b77      	ldr	r3, [pc, #476]	; (8002fbc <menu+0x26f4>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002de4:	f002 f8e4 	bl	8004fb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002de8:	2104      	movs	r1, #4
 8002dea:	4879      	ldr	r0, [pc, #484]	; (8002fd0 <menu+0x2708>)
 8002dec:	f005 fdf0 	bl	80089d0 <HAL_GPIO_ReadPin>
 8002df0:	4603      	mov	r3, r0
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d115      	bne.n	8002e22 <menu+0x255a>
 8002df6:	4b77      	ldr	r3, [pc, #476]	; (8002fd4 <menu+0x270c>)
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	f083 0301 	eor.w	r3, r3, #1
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d00e      	beq.n	8002e22 <menu+0x255a>
			platformSilindirTipi = platformSilindirTipi - 1;
 8002e04:	4b6d      	ldr	r3, [pc, #436]	; (8002fbc <menu+0x26f4>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	b2da      	uxtb	r2, r3
 8002e0c:	4b6b      	ldr	r3, [pc, #428]	; (8002fbc <menu+0x26f4>)
 8002e0e:	701a      	strb	r2, [r3, #0]

		   	if(platformSilindirTipi > 0) {
 8002e10:	4b6a      	ldr	r3, [pc, #424]	; (8002fbc <menu+0x26f4>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d002      	beq.n	8002e1e <menu+0x2556>
		   		platformSilindirTipi = 1;
 8002e18:	4b68      	ldr	r3, [pc, #416]	; (8002fbc <menu+0x26f4>)
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002e1e:	f002 f8c7 	bl	8004fb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002e22:	2108      	movs	r1, #8
 8002e24:	486a      	ldr	r0, [pc, #424]	; (8002fd0 <menu+0x2708>)
 8002e26:	f005 fdd3 	bl	80089d0 <HAL_GPIO_ReadPin>
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d118      	bne.n	8002e62 <menu+0x259a>
 8002e30:	4b68      	ldr	r3, [pc, #416]	; (8002fd4 <menu+0x270c>)
 8002e32:	781b      	ldrb	r3, [r3, #0]
 8002e34:	f083 0301 	eor.w	r3, r3, #1
 8002e38:	b2db      	uxtb	r3, r3
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d011      	beq.n	8002e62 <menu+0x259a>
			eepromData[19] = platformSilindirTipi;
 8002e3e:	4b5f      	ldr	r3, [pc, #380]	; (8002fbc <menu+0x26f4>)
 8002e40:	781a      	ldrb	r2, [r3, #0]
 8002e42:	4b65      	ldr	r3, [pc, #404]	; (8002fd8 <menu+0x2710>)
 8002e44:	74da      	strb	r2, [r3, #19]

			if(platformSilindirTipi == 1) {
 8002e46:	4b5d      	ldr	r3, [pc, #372]	; (8002fbc <menu+0x26f4>)
 8002e48:	781b      	ldrb	r3, [r3, #0]
 8002e4a:	2b01      	cmp	r3, #1
 8002e4c:	d106      	bne.n	8002e5c <menu+0x2594>
				altLimit = 1;
 8002e4e:	4b63      	ldr	r3, [pc, #396]	; (8002fdc <menu+0x2714>)
 8002e50:	2201      	movs	r2, #1
 8002e52:	701a      	strb	r2, [r3, #0]
				eepromData[5] = altLimit;
 8002e54:	4b61      	ldr	r3, [pc, #388]	; (8002fdc <menu+0x2714>)
 8002e56:	781a      	ldrb	r2, [r3, #0]
 8002e58:	4b5f      	ldr	r3, [pc, #380]	; (8002fd8 <menu+0x2710>)
 8002e5a:	715a      	strb	r2, [r3, #5]
			}
			hafizaYaz = 1;
 8002e5c:	4b60      	ldr	r3, [pc, #384]	; (8002fe0 <menu+0x2718>)
 8002e5e:	2201      	movs	r2, #1
 8002e60:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 22) {
 8002e62:	4b60      	ldr	r3, [pc, #384]	; (8002fe4 <menu+0x271c>)
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	2b16      	cmp	r3, #22
 8002e68:	f040 8081 	bne.w	8002f6e <menu+0x26a6>
		if(dilSecim == 0) {
 8002e6c:	4b51      	ldr	r3, [pc, #324]	; (8002fb4 <menu+0x26ec>)
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d105      	bne.n	8002e80 <menu+0x25b8>
			lcd_print(1, 1, "YUKARI VALF SURE");
 8002e74:	4a5c      	ldr	r2, [pc, #368]	; (8002fe8 <menu+0x2720>)
 8002e76:	2101      	movs	r1, #1
 8002e78:	2001      	movs	r0, #1
 8002e7a:	f7fd fcc4 	bl	8000806 <lcd_print>
 8002e7e:	e008      	b.n	8002e92 <menu+0x25ca>
		} else if(dilSecim == 1) {
 8002e80:	4b4c      	ldr	r3, [pc, #304]	; (8002fb4 <menu+0x26ec>)
 8002e82:	781b      	ldrb	r3, [r3, #0]
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d104      	bne.n	8002e92 <menu+0x25ca>
			lcd_print(1, 1, "UP VALVE TIMER  ");
 8002e88:	4a58      	ldr	r2, [pc, #352]	; (8002fec <menu+0x2724>)
 8002e8a:	2101      	movs	r1, #1
 8002e8c:	2001      	movs	r0, #1
 8002e8e:	f7fd fcba 	bl	8000806 <lcd_print>
		}

		if(yukariValfTmr >= 0) {
			if(dilSecim == 0) {
 8002e92:	4b48      	ldr	r3, [pc, #288]	; (8002fb4 <menu+0x26ec>)
 8002e94:	781b      	ldrb	r3, [r3, #0]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d105      	bne.n	8002ea6 <menu+0x25de>
				lcd_print(2, 1, "Kac Saniye     ");
 8002e9a:	4a55      	ldr	r2, [pc, #340]	; (8002ff0 <menu+0x2728>)
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	2002      	movs	r0, #2
 8002ea0:	f7fd fcb1 	bl	8000806 <lcd_print>
 8002ea4:	e008      	b.n	8002eb8 <menu+0x25f0>
			} else if(dilSecim == 1){
 8002ea6:	4b43      	ldr	r3, [pc, #268]	; (8002fb4 <menu+0x26ec>)
 8002ea8:	781b      	ldrb	r3, [r3, #0]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d104      	bne.n	8002eb8 <menu+0x25f0>
				lcd_print(2, 1, "Second         ");
 8002eae:	4a51      	ldr	r2, [pc, #324]	; (8002ff4 <menu+0x272c>)
 8002eb0:	2101      	movs	r1, #1
 8002eb2:	2002      	movs	r0, #2
 8002eb4:	f7fd fca7 	bl	8000806 <lcd_print>
			}
		}

		itoa(yukariValfTmr, snum, 10);
 8002eb8:	4b4f      	ldr	r3, [pc, #316]	; (8002ff8 <menu+0x2730>)
 8002eba:	781b      	ldrb	r3, [r3, #0]
 8002ebc:	220a      	movs	r2, #10
 8002ebe:	494f      	ldr	r1, [pc, #316]	; (8002ffc <menu+0x2734>)
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f008 fd7b 	bl	800b9bc <itoa>
		lcd_print(2,16,snum);
 8002ec6:	4a4d      	ldr	r2, [pc, #308]	; (8002ffc <menu+0x2734>)
 8002ec8:	2110      	movs	r1, #16
 8002eca:	2002      	movs	r0, #2
 8002ecc:	f7fd fc9b 	bl	8000806 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8002ed0:	2102      	movs	r1, #2
 8002ed2:	483f      	ldr	r0, [pc, #252]	; (8002fd0 <menu+0x2708>)
 8002ed4:	f005 fd7c 	bl	80089d0 <HAL_GPIO_ReadPin>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d115      	bne.n	8002f0a <menu+0x2642>
 8002ede:	4b3d      	ldr	r3, [pc, #244]	; (8002fd4 <menu+0x270c>)
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	f083 0301 	eor.w	r3, r3, #1
 8002ee6:	b2db      	uxtb	r3, r3
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d00e      	beq.n	8002f0a <menu+0x2642>
			yukariValfTmr = yukariValfTmr + 1;
 8002eec:	4b42      	ldr	r3, [pc, #264]	; (8002ff8 <menu+0x2730>)
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	3301      	adds	r3, #1
 8002ef2:	b2da      	uxtb	r2, r3
 8002ef4:	4b40      	ldr	r3, [pc, #256]	; (8002ff8 <menu+0x2730>)
 8002ef6:	701a      	strb	r2, [r3, #0]

			if(yukariValfTmr > 5) {
 8002ef8:	4b3f      	ldr	r3, [pc, #252]	; (8002ff8 <menu+0x2730>)
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	2b05      	cmp	r3, #5
 8002efe:	d902      	bls.n	8002f06 <menu+0x263e>
				yukariValfTmr = 0;
 8002f00:	4b3d      	ldr	r3, [pc, #244]	; (8002ff8 <menu+0x2730>)
 8002f02:	2200      	movs	r2, #0
 8002f04:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8002f06:	f002 f853 	bl	8004fb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f0a:	2104      	movs	r1, #4
 8002f0c:	4830      	ldr	r0, [pc, #192]	; (8002fd0 <menu+0x2708>)
 8002f0e:	f005 fd5f 	bl	80089d0 <HAL_GPIO_ReadPin>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b01      	cmp	r3, #1
 8002f16:	d115      	bne.n	8002f44 <menu+0x267c>
 8002f18:	4b2e      	ldr	r3, [pc, #184]	; (8002fd4 <menu+0x270c>)
 8002f1a:	781b      	ldrb	r3, [r3, #0]
 8002f1c:	f083 0301 	eor.w	r3, r3, #1
 8002f20:	b2db      	uxtb	r3, r3
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d00e      	beq.n	8002f44 <menu+0x267c>
			yukariValfTmr = yukariValfTmr - 1;
 8002f26:	4b34      	ldr	r3, [pc, #208]	; (8002ff8 <menu+0x2730>)
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	b2da      	uxtb	r2, r3
 8002f2e:	4b32      	ldr	r3, [pc, #200]	; (8002ff8 <menu+0x2730>)
 8002f30:	701a      	strb	r2, [r3, #0]

		   	if(yukariValfTmr > 6) {
 8002f32:	4b31      	ldr	r3, [pc, #196]	; (8002ff8 <menu+0x2730>)
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	2b06      	cmp	r3, #6
 8002f38:	d902      	bls.n	8002f40 <menu+0x2678>
		   		yukariValfTmr = 5;
 8002f3a:	4b2f      	ldr	r3, [pc, #188]	; (8002ff8 <menu+0x2730>)
 8002f3c:	2205      	movs	r2, #5
 8002f3e:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8002f40:	f002 f836 	bl	8004fb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8002f44:	2108      	movs	r1, #8
 8002f46:	4822      	ldr	r0, [pc, #136]	; (8002fd0 <menu+0x2708>)
 8002f48:	f005 fd42 	bl	80089d0 <HAL_GPIO_ReadPin>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b01      	cmp	r3, #1
 8002f50:	d10d      	bne.n	8002f6e <menu+0x26a6>
 8002f52:	4b20      	ldr	r3, [pc, #128]	; (8002fd4 <menu+0x270c>)
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	f083 0301 	eor.w	r3, r3, #1
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d006      	beq.n	8002f6e <menu+0x26a6>
			eepromData[20] = yukariValfTmr;
 8002f60:	4b25      	ldr	r3, [pc, #148]	; (8002ff8 <menu+0x2730>)
 8002f62:	781a      	ldrb	r2, [r3, #0]
 8002f64:	4b1c      	ldr	r3, [pc, #112]	; (8002fd8 <menu+0x2710>)
 8002f66:	751a      	strb	r2, [r3, #20]
			hafizaYaz = 1;
 8002f68:	4b1d      	ldr	r3, [pc, #116]	; (8002fe0 <menu+0x2718>)
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 23) {
 8002f6e:	4b1d      	ldr	r3, [pc, #116]	; (8002fe4 <menu+0x271c>)
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	2b17      	cmp	r3, #23
 8002f74:	f040 80ac 	bne.w	80030d0 <menu+0x2808>
		if(dilSecim == 0) {
 8002f78:	4b0e      	ldr	r3, [pc, #56]	; (8002fb4 <menu+0x26ec>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d105      	bne.n	8002f8c <menu+0x26c4>
			lcd_print(1, 1, "ASAGI VALF SURE ");
 8002f80:	4a1f      	ldr	r2, [pc, #124]	; (8003000 <menu+0x2738>)
 8002f82:	2101      	movs	r1, #1
 8002f84:	2001      	movs	r0, #1
 8002f86:	f7fd fc3e 	bl	8000806 <lcd_print>
 8002f8a:	e008      	b.n	8002f9e <menu+0x26d6>
		} else if(dilSecim == 1) {
 8002f8c:	4b09      	ldr	r3, [pc, #36]	; (8002fb4 <menu+0x26ec>)
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d104      	bne.n	8002f9e <menu+0x26d6>
			lcd_print(1, 1, "DOWN VALVE TIMER");
 8002f94:	4a1b      	ldr	r2, [pc, #108]	; (8003004 <menu+0x273c>)
 8002f96:	2101      	movs	r1, #1
 8002f98:	2001      	movs	r0, #1
 8002f9a:	f7fd fc34 	bl	8000806 <lcd_print>
		}

		if(asagiValfTmr >= 0) {
			if(dilSecim == 0) {
 8002f9e:	4b05      	ldr	r3, [pc, #20]	; (8002fb4 <menu+0x26ec>)
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d130      	bne.n	8003008 <menu+0x2740>
				lcd_print(2, 1, "Kac Saniye     ");
 8002fa6:	4a12      	ldr	r2, [pc, #72]	; (8002ff0 <menu+0x2728>)
 8002fa8:	2101      	movs	r1, #1
 8002faa:	2002      	movs	r0, #2
 8002fac:	f7fd fc2b 	bl	8000806 <lcd_print>
 8002fb0:	e033      	b.n	800301a <menu+0x2752>
 8002fb2:	bf00      	nop
 8002fb4:	20000b30 	.word	0x20000b30
 8002fb8:	0800cc24 	.word	0x0800cc24
 8002fbc:	20000b23 	.word	0x20000b23
 8002fc0:	0800cbc8 	.word	0x0800cbc8
 8002fc4:	0800cbdc 	.word	0x0800cbdc
 8002fc8:	0800cbec 	.word	0x0800cbec
 8002fcc:	0800cc00 	.word	0x0800cc00
 8002fd0:	40010800 	.word	0x40010800
 8002fd4:	20000b3e 	.word	0x20000b3e
 8002fd8:	20000aa4 	.word	0x20000aa4
 8002fdc:	20000b16 	.word	0x20000b16
 8002fe0:	20000b3b 	.word	0x20000b3b
 8002fe4:	20000b10 	.word	0x20000b10
 8002fe8:	0800cc34 	.word	0x0800cc34
 8002fec:	0800cc48 	.word	0x0800cc48
 8002ff0:	0800c8e8 	.word	0x0800c8e8
 8002ff4:	0800cc5c 	.word	0x0800cc5c
 8002ff8:	20000b24 	.word	0x20000b24
 8002ffc:	20000ae4 	.word	0x20000ae4
 8003000:	0800cc6c 	.word	0x0800cc6c
 8003004:	0800cc80 	.word	0x0800cc80
			} else if(dilSecim == 1) {
 8003008:	4b98      	ldr	r3, [pc, #608]	; (800326c <menu+0x29a4>)
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d104      	bne.n	800301a <menu+0x2752>
				lcd_print(2, 1, "Second         ");
 8003010:	4a97      	ldr	r2, [pc, #604]	; (8003270 <menu+0x29a8>)
 8003012:	2101      	movs	r1, #1
 8003014:	2002      	movs	r0, #2
 8003016:	f7fd fbf6 	bl	8000806 <lcd_print>
			}
		}

		itoa(asagiValfTmr, snum, 10);
 800301a:	4b96      	ldr	r3, [pc, #600]	; (8003274 <menu+0x29ac>)
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	220a      	movs	r2, #10
 8003020:	4995      	ldr	r1, [pc, #596]	; (8003278 <menu+0x29b0>)
 8003022:	4618      	mov	r0, r3
 8003024:	f008 fcca 	bl	800b9bc <itoa>
		lcd_print(2,16,snum);
 8003028:	4a93      	ldr	r2, [pc, #588]	; (8003278 <menu+0x29b0>)
 800302a:	2110      	movs	r1, #16
 800302c:	2002      	movs	r0, #2
 800302e:	f7fd fbea 	bl	8000806 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003032:	2102      	movs	r1, #2
 8003034:	4891      	ldr	r0, [pc, #580]	; (800327c <menu+0x29b4>)
 8003036:	f005 fccb 	bl	80089d0 <HAL_GPIO_ReadPin>
 800303a:	4603      	mov	r3, r0
 800303c:	2b01      	cmp	r3, #1
 800303e:	d115      	bne.n	800306c <menu+0x27a4>
 8003040:	4b8f      	ldr	r3, [pc, #572]	; (8003280 <menu+0x29b8>)
 8003042:	781b      	ldrb	r3, [r3, #0]
 8003044:	f083 0301 	eor.w	r3, r3, #1
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b00      	cmp	r3, #0
 800304c:	d00e      	beq.n	800306c <menu+0x27a4>
			asagiValfTmr = asagiValfTmr + 1;
 800304e:	4b89      	ldr	r3, [pc, #548]	; (8003274 <menu+0x29ac>)
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	3301      	adds	r3, #1
 8003054:	b2da      	uxtb	r2, r3
 8003056:	4b87      	ldr	r3, [pc, #540]	; (8003274 <menu+0x29ac>)
 8003058:	701a      	strb	r2, [r3, #0]

			if(asagiValfTmr > 5) {
 800305a:	4b86      	ldr	r3, [pc, #536]	; (8003274 <menu+0x29ac>)
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	2b05      	cmp	r3, #5
 8003060:	d902      	bls.n	8003068 <menu+0x27a0>
				asagiValfTmr = 0;
 8003062:	4b84      	ldr	r3, [pc, #528]	; (8003274 <menu+0x29ac>)
 8003064:	2200      	movs	r2, #0
 8003066:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003068:	f001 ffa2 	bl	8004fb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 800306c:	2104      	movs	r1, #4
 800306e:	4883      	ldr	r0, [pc, #524]	; (800327c <menu+0x29b4>)
 8003070:	f005 fcae 	bl	80089d0 <HAL_GPIO_ReadPin>
 8003074:	4603      	mov	r3, r0
 8003076:	2b01      	cmp	r3, #1
 8003078:	d115      	bne.n	80030a6 <menu+0x27de>
 800307a:	4b81      	ldr	r3, [pc, #516]	; (8003280 <menu+0x29b8>)
 800307c:	781b      	ldrb	r3, [r3, #0]
 800307e:	f083 0301 	eor.w	r3, r3, #1
 8003082:	b2db      	uxtb	r3, r3
 8003084:	2b00      	cmp	r3, #0
 8003086:	d00e      	beq.n	80030a6 <menu+0x27de>
			asagiValfTmr = asagiValfTmr - 1;
 8003088:	4b7a      	ldr	r3, [pc, #488]	; (8003274 <menu+0x29ac>)
 800308a:	781b      	ldrb	r3, [r3, #0]
 800308c:	3b01      	subs	r3, #1
 800308e:	b2da      	uxtb	r2, r3
 8003090:	4b78      	ldr	r3, [pc, #480]	; (8003274 <menu+0x29ac>)
 8003092:	701a      	strb	r2, [r3, #0]

		   	if(asagiValfTmr > 6) {
 8003094:	4b77      	ldr	r3, [pc, #476]	; (8003274 <menu+0x29ac>)
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	2b06      	cmp	r3, #6
 800309a:	d902      	bls.n	80030a2 <menu+0x27da>
		   		asagiValfTmr = 5;
 800309c:	4b75      	ldr	r3, [pc, #468]	; (8003274 <menu+0x29ac>)
 800309e:	2205      	movs	r2, #5
 80030a0:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80030a2:	f001 ff85 	bl	8004fb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80030a6:	2108      	movs	r1, #8
 80030a8:	4874      	ldr	r0, [pc, #464]	; (800327c <menu+0x29b4>)
 80030aa:	f005 fc91 	bl	80089d0 <HAL_GPIO_ReadPin>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d10d      	bne.n	80030d0 <menu+0x2808>
 80030b4:	4b72      	ldr	r3, [pc, #456]	; (8003280 <menu+0x29b8>)
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	f083 0301 	eor.w	r3, r3, #1
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d006      	beq.n	80030d0 <menu+0x2808>
			eepromData[21] = asagiValfTmr;
 80030c2:	4b6c      	ldr	r3, [pc, #432]	; (8003274 <menu+0x29ac>)
 80030c4:	781a      	ldrb	r2, [r3, #0]
 80030c6:	4b6f      	ldr	r3, [pc, #444]	; (8003284 <menu+0x29bc>)
 80030c8:	755a      	strb	r2, [r3, #21]
			hafizaYaz = 1;
 80030ca:	4b6f      	ldr	r3, [pc, #444]	; (8003288 <menu+0x29c0>)
 80030cc:	2201      	movs	r2, #1
 80030ce:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 24) {
 80030d0:	4b6e      	ldr	r3, [pc, #440]	; (800328c <menu+0x29c4>)
 80030d2:	781b      	ldrb	r3, [r3, #0]
 80030d4:	2b18      	cmp	r3, #24
 80030d6:	f040 809d 	bne.w	8003214 <menu+0x294c>
		if(devirmeYuruyusSecim == 2) {
 80030da:	4b6d      	ldr	r3, [pc, #436]	; (8003290 <menu+0x29c8>)
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d113      	bne.n	800310a <menu+0x2842>
			if(dilSecim == 0) {
 80030e2:	4b62      	ldr	r3, [pc, #392]	; (800326c <menu+0x29a4>)
 80030e4:	781b      	ldrb	r3, [r3, #0]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d105      	bne.n	80030f6 <menu+0x282e>
				lcd_print(1, 1, "DVRM YKR VLF SN ");
 80030ea:	4a6a      	ldr	r2, [pc, #424]	; (8003294 <menu+0x29cc>)
 80030ec:	2101      	movs	r1, #1
 80030ee:	2001      	movs	r0, #1
 80030f0:	f7fd fb89 	bl	8000806 <lcd_print>
 80030f4:	e020      	b.n	8003138 <menu+0x2870>
			} else if(dilSecim == 1) {
 80030f6:	4b5d      	ldr	r3, [pc, #372]	; (800326c <menu+0x29a4>)
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	2b01      	cmp	r3, #1
 80030fc:	d11c      	bne.n	8003138 <menu+0x2870>
				lcd_print(1, 1, "TIPPD UP VLV TMR");
 80030fe:	4a66      	ldr	r2, [pc, #408]	; (8003298 <menu+0x29d0>)
 8003100:	2101      	movs	r1, #1
 8003102:	2001      	movs	r0, #1
 8003104:	f7fd fb7f 	bl	8000806 <lcd_print>
 8003108:	e016      	b.n	8003138 <menu+0x2870>
			}
		} else if(devirmeYuruyusSecim == 1) {
 800310a:	4b61      	ldr	r3, [pc, #388]	; (8003290 <menu+0x29c8>)
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d112      	bne.n	8003138 <menu+0x2870>
			if(dilSecim == 0) {
 8003112:	4b56      	ldr	r3, [pc, #344]	; (800326c <menu+0x29a4>)
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d105      	bne.n	8003126 <menu+0x285e>
				lcd_print(1, 1, "iLERi VALF SURE ");
 800311a:	4a60      	ldr	r2, [pc, #384]	; (800329c <menu+0x29d4>)
 800311c:	2101      	movs	r1, #1
 800311e:	2001      	movs	r0, #1
 8003120:	f7fd fb71 	bl	8000806 <lcd_print>
 8003124:	e008      	b.n	8003138 <menu+0x2870>
			} else if(dilSecim == 1) {
 8003126:	4b51      	ldr	r3, [pc, #324]	; (800326c <menu+0x29a4>)
 8003128:	781b      	ldrb	r3, [r3, #0]
 800312a:	2b01      	cmp	r3, #1
 800312c:	d104      	bne.n	8003138 <menu+0x2870>
				lcd_print(1, 1, "FRWD DRV VLV TMR");
 800312e:	4a5c      	ldr	r2, [pc, #368]	; (80032a0 <menu+0x29d8>)
 8003130:	2101      	movs	r1, #1
 8003132:	2001      	movs	r0, #1
 8003134:	f7fd fb67 	bl	8000806 <lcd_print>
			}
		}

		if(devirmeYukariIleriTmr >= 0) {
			if(dilSecim == 0) {
 8003138:	4b4c      	ldr	r3, [pc, #304]	; (800326c <menu+0x29a4>)
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d105      	bne.n	800314c <menu+0x2884>
				lcd_print(2, 1, "Kac Saniye     ");
 8003140:	4a58      	ldr	r2, [pc, #352]	; (80032a4 <menu+0x29dc>)
 8003142:	2101      	movs	r1, #1
 8003144:	2002      	movs	r0, #2
 8003146:	f7fd fb5e 	bl	8000806 <lcd_print>
 800314a:	e008      	b.n	800315e <menu+0x2896>
			} else if(dilSecim == 1) {
 800314c:	4b47      	ldr	r3, [pc, #284]	; (800326c <menu+0x29a4>)
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d104      	bne.n	800315e <menu+0x2896>
				lcd_print(2, 1, "Second         ");
 8003154:	4a46      	ldr	r2, [pc, #280]	; (8003270 <menu+0x29a8>)
 8003156:	2101      	movs	r1, #1
 8003158:	2002      	movs	r0, #2
 800315a:	f7fd fb54 	bl	8000806 <lcd_print>
			}
		}

		itoa(devirmeYukariIleriTmr, snum, 10);
 800315e:	4b52      	ldr	r3, [pc, #328]	; (80032a8 <menu+0x29e0>)
 8003160:	781b      	ldrb	r3, [r3, #0]
 8003162:	220a      	movs	r2, #10
 8003164:	4944      	ldr	r1, [pc, #272]	; (8003278 <menu+0x29b0>)
 8003166:	4618      	mov	r0, r3
 8003168:	f008 fc28 	bl	800b9bc <itoa>
		lcd_print(2, 16, snum);
 800316c:	4a42      	ldr	r2, [pc, #264]	; (8003278 <menu+0x29b0>)
 800316e:	2110      	movs	r1, #16
 8003170:	2002      	movs	r0, #2
 8003172:	f7fd fb48 	bl	8000806 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003176:	2102      	movs	r1, #2
 8003178:	4840      	ldr	r0, [pc, #256]	; (800327c <menu+0x29b4>)
 800317a:	f005 fc29 	bl	80089d0 <HAL_GPIO_ReadPin>
 800317e:	4603      	mov	r3, r0
 8003180:	2b01      	cmp	r3, #1
 8003182:	d115      	bne.n	80031b0 <menu+0x28e8>
 8003184:	4b3e      	ldr	r3, [pc, #248]	; (8003280 <menu+0x29b8>)
 8003186:	781b      	ldrb	r3, [r3, #0]
 8003188:	f083 0301 	eor.w	r3, r3, #1
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00e      	beq.n	80031b0 <menu+0x28e8>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr + 1;
 8003192:	4b45      	ldr	r3, [pc, #276]	; (80032a8 <menu+0x29e0>)
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	3301      	adds	r3, #1
 8003198:	b2da      	uxtb	r2, r3
 800319a:	4b43      	ldr	r3, [pc, #268]	; (80032a8 <menu+0x29e0>)
 800319c:	701a      	strb	r2, [r3, #0]

			if(devirmeYukariIleriTmr > 5) {
 800319e:	4b42      	ldr	r3, [pc, #264]	; (80032a8 <menu+0x29e0>)
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	2b05      	cmp	r3, #5
 80031a4:	d902      	bls.n	80031ac <menu+0x28e4>
				devirmeYukariIleriTmr = 0;
 80031a6:	4b40      	ldr	r3, [pc, #256]	; (80032a8 <menu+0x29e0>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80031ac:	f001 ff00 	bl	8004fb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 80031b0:	2104      	movs	r1, #4
 80031b2:	4832      	ldr	r0, [pc, #200]	; (800327c <menu+0x29b4>)
 80031b4:	f005 fc0c 	bl	80089d0 <HAL_GPIO_ReadPin>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d115      	bne.n	80031ea <menu+0x2922>
 80031be:	4b30      	ldr	r3, [pc, #192]	; (8003280 <menu+0x29b8>)
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	f083 0301 	eor.w	r3, r3, #1
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00e      	beq.n	80031ea <menu+0x2922>
			devirmeYukariIleriTmr = devirmeYukariIleriTmr - 1;
 80031cc:	4b36      	ldr	r3, [pc, #216]	; (80032a8 <menu+0x29e0>)
 80031ce:	781b      	ldrb	r3, [r3, #0]
 80031d0:	3b01      	subs	r3, #1
 80031d2:	b2da      	uxtb	r2, r3
 80031d4:	4b34      	ldr	r3, [pc, #208]	; (80032a8 <menu+0x29e0>)
 80031d6:	701a      	strb	r2, [r3, #0]

		   	if(devirmeYukariIleriTmr > 6) {
 80031d8:	4b33      	ldr	r3, [pc, #204]	; (80032a8 <menu+0x29e0>)
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	2b06      	cmp	r3, #6
 80031de:	d902      	bls.n	80031e6 <menu+0x291e>
		   		devirmeYukariIleriTmr = 5;
 80031e0:	4b31      	ldr	r3, [pc, #196]	; (80032a8 <menu+0x29e0>)
 80031e2:	2205      	movs	r2, #5
 80031e4:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80031e6:	f001 fee3 	bl	8004fb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80031ea:	2108      	movs	r1, #8
 80031ec:	4823      	ldr	r0, [pc, #140]	; (800327c <menu+0x29b4>)
 80031ee:	f005 fbef 	bl	80089d0 <HAL_GPIO_ReadPin>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d10d      	bne.n	8003214 <menu+0x294c>
 80031f8:	4b21      	ldr	r3, [pc, #132]	; (8003280 <menu+0x29b8>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	f083 0301 	eor.w	r3, r3, #1
 8003200:	b2db      	uxtb	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d006      	beq.n	8003214 <menu+0x294c>
			eepromData[22] = devirmeYukariIleriTmr;
 8003206:	4b28      	ldr	r3, [pc, #160]	; (80032a8 <menu+0x29e0>)
 8003208:	781a      	ldrb	r2, [r3, #0]
 800320a:	4b1e      	ldr	r3, [pc, #120]	; (8003284 <menu+0x29bc>)
 800320c:	759a      	strb	r2, [r3, #22]
			hafizaYaz = 1;
 800320e:	4b1e      	ldr	r3, [pc, #120]	; (8003288 <menu+0x29c0>)
 8003210:	2201      	movs	r2, #1
 8003212:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 25) {
 8003214:	4b1d      	ldr	r3, [pc, #116]	; (800328c <menu+0x29c4>)
 8003216:	781b      	ldrb	r3, [r3, #0]
 8003218:	2b19      	cmp	r3, #25
 800321a:	f040 80c4 	bne.w	80033a6 <menu+0x2ade>
		if(devirmeYuruyusSecim == 2) {
 800321e:	4b1c      	ldr	r3, [pc, #112]	; (8003290 <menu+0x29c8>)
 8003220:	781b      	ldrb	r3, [r3, #0]
 8003222:	2b02      	cmp	r3, #2
 8003224:	d113      	bne.n	800324e <menu+0x2986>
			if(dilSecim == 0) {
 8003226:	4b11      	ldr	r3, [pc, #68]	; (800326c <menu+0x29a4>)
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d105      	bne.n	800323a <menu+0x2972>
				lcd_print(1, 1, "DVRM ASG VALF SN");
 800322e:	4a1f      	ldr	r2, [pc, #124]	; (80032ac <menu+0x29e4>)
 8003230:	2101      	movs	r1, #1
 8003232:	2001      	movs	r0, #1
 8003234:	f7fd fae7 	bl	8000806 <lcd_print>
 8003238:	e047      	b.n	80032ca <menu+0x2a02>
			} else if(dilSecim == 1) {
 800323a:	4b0c      	ldr	r3, [pc, #48]	; (800326c <menu+0x29a4>)
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d143      	bne.n	80032ca <menu+0x2a02>
				lcd_print(1, 1, "TPPD DWN VLV TMR");
 8003242:	4a1b      	ldr	r2, [pc, #108]	; (80032b0 <menu+0x29e8>)
 8003244:	2101      	movs	r1, #1
 8003246:	2001      	movs	r0, #1
 8003248:	f7fd fadd 	bl	8000806 <lcd_print>
 800324c:	e03d      	b.n	80032ca <menu+0x2a02>
			}
		} else if(devirmeYuruyusSecim == 1) {
 800324e:	4b10      	ldr	r3, [pc, #64]	; (8003290 <menu+0x29c8>)
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d139      	bne.n	80032ca <menu+0x2a02>
			if(dilSecim == 0) {
 8003256:	4b05      	ldr	r3, [pc, #20]	; (800326c <menu+0x29a4>)
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d12c      	bne.n	80032b8 <menu+0x29f0>
				lcd_print(1, 1, "GERi VALF SURE  ");
 800325e:	4a15      	ldr	r2, [pc, #84]	; (80032b4 <menu+0x29ec>)
 8003260:	2101      	movs	r1, #1
 8003262:	2001      	movs	r0, #1
 8003264:	f7fd facf 	bl	8000806 <lcd_print>
 8003268:	e02f      	b.n	80032ca <menu+0x2a02>
 800326a:	bf00      	nop
 800326c:	20000b30 	.word	0x20000b30
 8003270:	0800cc5c 	.word	0x0800cc5c
 8003274:	20000b25 	.word	0x20000b25
 8003278:	20000ae4 	.word	0x20000ae4
 800327c:	40010800 	.word	0x40010800
 8003280:	20000b3e 	.word	0x20000b3e
 8003284:	20000aa4 	.word	0x20000aa4
 8003288:	20000b3b 	.word	0x20000b3b
 800328c:	20000b10 	.word	0x20000b10
 8003290:	20000b1f 	.word	0x20000b1f
 8003294:	0800cc94 	.word	0x0800cc94
 8003298:	0800cca8 	.word	0x0800cca8
 800329c:	0800ccbc 	.word	0x0800ccbc
 80032a0:	0800ccd0 	.word	0x0800ccd0
 80032a4:	0800c8e8 	.word	0x0800c8e8
 80032a8:	20000b26 	.word	0x20000b26
 80032ac:	0800cce4 	.word	0x0800cce4
 80032b0:	0800ccf8 	.word	0x0800ccf8
 80032b4:	0800cd0c 	.word	0x0800cd0c
			} else if(dilSecim == 1) {
 80032b8:	4b73      	ldr	r3, [pc, #460]	; (8003488 <menu+0x2bc0>)
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	2b01      	cmp	r3, #1
 80032be:	d104      	bne.n	80032ca <menu+0x2a02>
				lcd_print(1, 1, "REVERSE VLV TMR ");
 80032c0:	4a72      	ldr	r2, [pc, #456]	; (800348c <menu+0x2bc4>)
 80032c2:	2101      	movs	r1, #1
 80032c4:	2001      	movs	r0, #1
 80032c6:	f7fd fa9e 	bl	8000806 <lcd_print>
			}
		}

		if(devirmeAsagiGeriTmr >= 0) {
			if(dilSecim == 0) {
 80032ca:	4b6f      	ldr	r3, [pc, #444]	; (8003488 <menu+0x2bc0>)
 80032cc:	781b      	ldrb	r3, [r3, #0]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d105      	bne.n	80032de <menu+0x2a16>
				lcd_print(2, 1, "Kac Saniye     ");
 80032d2:	4a6f      	ldr	r2, [pc, #444]	; (8003490 <menu+0x2bc8>)
 80032d4:	2101      	movs	r1, #1
 80032d6:	2002      	movs	r0, #2
 80032d8:	f7fd fa95 	bl	8000806 <lcd_print>
 80032dc:	e008      	b.n	80032f0 <menu+0x2a28>
			} else if(dilSecim == 1) {
 80032de:	4b6a      	ldr	r3, [pc, #424]	; (8003488 <menu+0x2bc0>)
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d104      	bne.n	80032f0 <menu+0x2a28>
				lcd_print(2, 1, "Second         ");
 80032e6:	4a6b      	ldr	r2, [pc, #428]	; (8003494 <menu+0x2bcc>)
 80032e8:	2101      	movs	r1, #1
 80032ea:	2002      	movs	r0, #2
 80032ec:	f7fd fa8b 	bl	8000806 <lcd_print>
			}
		}

		itoa(devirmeAsagiGeriTmr, snum, 10);
 80032f0:	4b69      	ldr	r3, [pc, #420]	; (8003498 <menu+0x2bd0>)
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	220a      	movs	r2, #10
 80032f6:	4969      	ldr	r1, [pc, #420]	; (800349c <menu+0x2bd4>)
 80032f8:	4618      	mov	r0, r3
 80032fa:	f008 fb5f 	bl	800b9bc <itoa>
		lcd_print(2,16,snum);
 80032fe:	4a67      	ldr	r2, [pc, #412]	; (800349c <menu+0x2bd4>)
 8003300:	2110      	movs	r1, #16
 8003302:	2002      	movs	r0, #2
 8003304:	f7fd fa7f 	bl	8000806 <lcd_print>

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003308:	2102      	movs	r1, #2
 800330a:	4865      	ldr	r0, [pc, #404]	; (80034a0 <menu+0x2bd8>)
 800330c:	f005 fb60 	bl	80089d0 <HAL_GPIO_ReadPin>
 8003310:	4603      	mov	r3, r0
 8003312:	2b01      	cmp	r3, #1
 8003314:	d115      	bne.n	8003342 <menu+0x2a7a>
 8003316:	4b63      	ldr	r3, [pc, #396]	; (80034a4 <menu+0x2bdc>)
 8003318:	781b      	ldrb	r3, [r3, #0]
 800331a:	f083 0301 	eor.w	r3, r3, #1
 800331e:	b2db      	uxtb	r3, r3
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00e      	beq.n	8003342 <menu+0x2a7a>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr + 1;
 8003324:	4b5c      	ldr	r3, [pc, #368]	; (8003498 <menu+0x2bd0>)
 8003326:	781b      	ldrb	r3, [r3, #0]
 8003328:	3301      	adds	r3, #1
 800332a:	b2da      	uxtb	r2, r3
 800332c:	4b5a      	ldr	r3, [pc, #360]	; (8003498 <menu+0x2bd0>)
 800332e:	701a      	strb	r2, [r3, #0]

			if(devirmeAsagiGeriTmr > 5) {
 8003330:	4b59      	ldr	r3, [pc, #356]	; (8003498 <menu+0x2bd0>)
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	2b05      	cmp	r3, #5
 8003336:	d902      	bls.n	800333e <menu+0x2a76>
				devirmeAsagiGeriTmr = 0;
 8003338:	4b57      	ldr	r3, [pc, #348]	; (8003498 <menu+0x2bd0>)
 800333a:	2200      	movs	r2, #0
 800333c:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 800333e:	f001 fe37 	bl	8004fb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003342:	2104      	movs	r1, #4
 8003344:	4856      	ldr	r0, [pc, #344]	; (80034a0 <menu+0x2bd8>)
 8003346:	f005 fb43 	bl	80089d0 <HAL_GPIO_ReadPin>
 800334a:	4603      	mov	r3, r0
 800334c:	2b01      	cmp	r3, #1
 800334e:	d115      	bne.n	800337c <menu+0x2ab4>
 8003350:	4b54      	ldr	r3, [pc, #336]	; (80034a4 <menu+0x2bdc>)
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	f083 0301 	eor.w	r3, r3, #1
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b00      	cmp	r3, #0
 800335c:	d00e      	beq.n	800337c <menu+0x2ab4>
			devirmeAsagiGeriTmr = devirmeAsagiGeriTmr - 1;
 800335e:	4b4e      	ldr	r3, [pc, #312]	; (8003498 <menu+0x2bd0>)
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	3b01      	subs	r3, #1
 8003364:	b2da      	uxtb	r2, r3
 8003366:	4b4c      	ldr	r3, [pc, #304]	; (8003498 <menu+0x2bd0>)
 8003368:	701a      	strb	r2, [r3, #0]

		   	if(devirmeAsagiGeriTmr > 6) {
 800336a:	4b4b      	ldr	r3, [pc, #300]	; (8003498 <menu+0x2bd0>)
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	2b06      	cmp	r3, #6
 8003370:	d902      	bls.n	8003378 <menu+0x2ab0>
		   		devirmeAsagiGeriTmr = 5;
 8003372:	4b49      	ldr	r3, [pc, #292]	; (8003498 <menu+0x2bd0>)
 8003374:	2205      	movs	r2, #5
 8003376:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 8003378:	f001 fe1a 	bl	8004fb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800337c:	2108      	movs	r1, #8
 800337e:	4848      	ldr	r0, [pc, #288]	; (80034a0 <menu+0x2bd8>)
 8003380:	f005 fb26 	bl	80089d0 <HAL_GPIO_ReadPin>
 8003384:	4603      	mov	r3, r0
 8003386:	2b01      	cmp	r3, #1
 8003388:	d10d      	bne.n	80033a6 <menu+0x2ade>
 800338a:	4b46      	ldr	r3, [pc, #280]	; (80034a4 <menu+0x2bdc>)
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	f083 0301 	eor.w	r3, r3, #1
 8003392:	b2db      	uxtb	r3, r3
 8003394:	2b00      	cmp	r3, #0
 8003396:	d006      	beq.n	80033a6 <menu+0x2ade>
			eepromData[23] = devirmeAsagiGeriTmr;
 8003398:	4b3f      	ldr	r3, [pc, #252]	; (8003498 <menu+0x2bd0>)
 800339a:	781a      	ldrb	r2, [r3, #0]
 800339c:	4b42      	ldr	r3, [pc, #264]	; (80034a8 <menu+0x2be0>)
 800339e:	75da      	strb	r2, [r3, #23]
			hafizaYaz = 1;
 80033a0:	4b42      	ldr	r3, [pc, #264]	; (80034ac <menu+0x2be4>)
 80033a2:	2201      	movs	r2, #1
 80033a4:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 26) {
 80033a6:	4b42      	ldr	r3, [pc, #264]	; (80034b0 <menu+0x2be8>)
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	2b1a      	cmp	r3, #26
 80033ac:	f040 80ec 	bne.w	8003588 <menu+0x2cc0>
		if(dilSecim == 0) {
 80033b0:	4b35      	ldr	r3, [pc, #212]	; (8003488 <menu+0x2bc0>)
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d105      	bne.n	80033c4 <menu+0x2afc>
			lcd_print(1, 1, "CALiSMA SURESi  ");
 80033b8:	4a3e      	ldr	r2, [pc, #248]	; (80034b4 <menu+0x2bec>)
 80033ba:	2101      	movs	r1, #1
 80033bc:	2001      	movs	r0, #1
 80033be:	f7fd fa22 	bl	8000806 <lcd_print>
 80033c2:	e008      	b.n	80033d6 <menu+0x2b0e>
		} else if(dilSecim == 1) {
 80033c4:	4b30      	ldr	r3, [pc, #192]	; (8003488 <menu+0x2bc0>)
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d104      	bne.n	80033d6 <menu+0x2b0e>
			lcd_print(1, 1, "WORKING TIME    ");
 80033cc:	4a3a      	ldr	r2, [pc, #232]	; (80034b8 <menu+0x2bf0>)
 80033ce:	2101      	movs	r1, #1
 80033d0:	2001      	movs	r0, #1
 80033d2:	f7fd fa18 	bl	8000806 <lcd_print>
		}

		if(makineCalismaTmr > 99) {
 80033d6:	4b39      	ldr	r3, [pc, #228]	; (80034bc <menu+0x2bf4>)
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	2b63      	cmp	r3, #99	; 0x63
 80033dc:	d91e      	bls.n	800341c <menu+0x2b54>
			if(dilSecim == 0) {
 80033de:	4b2a      	ldr	r3, [pc, #168]	; (8003488 <menu+0x2bc0>)
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d104      	bne.n	80033f0 <menu+0x2b28>
				lcd_print(2, 1, "Kac Saniye     ");
 80033e6:	4a2a      	ldr	r2, [pc, #168]	; (8003490 <menu+0x2bc8>)
 80033e8:	2101      	movs	r1, #1
 80033ea:	2002      	movs	r0, #2
 80033ec:	f7fd fa0b 	bl	8000806 <lcd_print>
			}
			if(dilSecim == 1) {
 80033f0:	4b25      	ldr	r3, [pc, #148]	; (8003488 <menu+0x2bc0>)
 80033f2:	781b      	ldrb	r3, [r3, #0]
 80033f4:	2b01      	cmp	r3, #1
 80033f6:	d104      	bne.n	8003402 <menu+0x2b3a>
				lcd_print(2, 1, "Second         ");
 80033f8:	4a26      	ldr	r2, [pc, #152]	; (8003494 <menu+0x2bcc>)
 80033fa:	2101      	movs	r1, #1
 80033fc:	2002      	movs	r0, #2
 80033fe:	f7fd fa02 	bl	8000806 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003402:	4b2e      	ldr	r3, [pc, #184]	; (80034bc <menu+0x2bf4>)
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	220a      	movs	r2, #10
 8003408:	4924      	ldr	r1, [pc, #144]	; (800349c <menu+0x2bd4>)
 800340a:	4618      	mov	r0, r3
 800340c:	f008 fad6 	bl	800b9bc <itoa>
			lcd_print(2,14,snum);
 8003410:	4a22      	ldr	r2, [pc, #136]	; (800349c <menu+0x2bd4>)
 8003412:	210e      	movs	r1, #14
 8003414:	2002      	movs	r0, #2
 8003416:	f7fd f9f6 	bl	8000806 <lcd_print>
 800341a:	e066      	b.n	80034ea <menu+0x2c22>

		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 800341c:	4b27      	ldr	r3, [pc, #156]	; (80034bc <menu+0x2bf4>)
 800341e:	781b      	ldrb	r3, [r3, #0]
 8003420:	2b09      	cmp	r3, #9
 8003422:	d923      	bls.n	800346c <menu+0x2ba4>
 8003424:	4b25      	ldr	r3, [pc, #148]	; (80034bc <menu+0x2bf4>)
 8003426:	781b      	ldrb	r3, [r3, #0]
 8003428:	2b63      	cmp	r3, #99	; 0x63
 800342a:	d81f      	bhi.n	800346c <menu+0x2ba4>
			if(dilSecim == 0) {
 800342c:	4b16      	ldr	r3, [pc, #88]	; (8003488 <menu+0x2bc0>)
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d105      	bne.n	8003440 <menu+0x2b78>
				lcd_print(2, 1, "Kac Saniye     ");
 8003434:	4a16      	ldr	r2, [pc, #88]	; (8003490 <menu+0x2bc8>)
 8003436:	2101      	movs	r1, #1
 8003438:	2002      	movs	r0, #2
 800343a:	f7fd f9e4 	bl	8000806 <lcd_print>
 800343e:	e008      	b.n	8003452 <menu+0x2b8a>
			} else if(dilSecim == 1) {
 8003440:	4b11      	ldr	r3, [pc, #68]	; (8003488 <menu+0x2bc0>)
 8003442:	781b      	ldrb	r3, [r3, #0]
 8003444:	2b01      	cmp	r3, #1
 8003446:	d104      	bne.n	8003452 <menu+0x2b8a>
				lcd_print(2, 1, "Second         ");
 8003448:	4a12      	ldr	r2, [pc, #72]	; (8003494 <menu+0x2bcc>)
 800344a:	2101      	movs	r1, #1
 800344c:	2002      	movs	r0, #2
 800344e:	f7fd f9da 	bl	8000806 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 8003452:	4b1a      	ldr	r3, [pc, #104]	; (80034bc <menu+0x2bf4>)
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	220a      	movs	r2, #10
 8003458:	4910      	ldr	r1, [pc, #64]	; (800349c <menu+0x2bd4>)
 800345a:	4618      	mov	r0, r3
 800345c:	f008 faae 	bl	800b9bc <itoa>
			lcd_print(2, 15, snum);
 8003460:	4a0e      	ldr	r2, [pc, #56]	; (800349c <menu+0x2bd4>)
 8003462:	210f      	movs	r1, #15
 8003464:	2002      	movs	r0, #2
 8003466:	f7fd f9ce 	bl	8000806 <lcd_print>
		} else if((makineCalismaTmr >= 10) && (makineCalismaTmr <=  99)) {
 800346a:	e03e      	b.n	80034ea <menu+0x2c22>
		} else if(makineCalismaTmr <=  9) {
 800346c:	4b13      	ldr	r3, [pc, #76]	; (80034bc <menu+0x2bf4>)
 800346e:	781b      	ldrb	r3, [r3, #0]
 8003470:	2b09      	cmp	r3, #9
 8003472:	d83a      	bhi.n	80034ea <menu+0x2c22>
			if(dilSecim == 0) {
 8003474:	4b04      	ldr	r3, [pc, #16]	; (8003488 <menu+0x2bc0>)
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d121      	bne.n	80034c0 <menu+0x2bf8>
				lcd_print(2, 1, "Kac Saniye     ");
 800347c:	4a04      	ldr	r2, [pc, #16]	; (8003490 <menu+0x2bc8>)
 800347e:	2101      	movs	r1, #1
 8003480:	2002      	movs	r0, #2
 8003482:	f7fd f9c0 	bl	8000806 <lcd_print>
 8003486:	e024      	b.n	80034d2 <menu+0x2c0a>
 8003488:	20000b30 	.word	0x20000b30
 800348c:	0800cd20 	.word	0x0800cd20
 8003490:	0800c8e8 	.word	0x0800c8e8
 8003494:	0800cc5c 	.word	0x0800cc5c
 8003498:	20000b27 	.word	0x20000b27
 800349c:	20000ae4 	.word	0x20000ae4
 80034a0:	40010800 	.word	0x40010800
 80034a4:	20000b3e 	.word	0x20000b3e
 80034a8:	20000aa4 	.word	0x20000aa4
 80034ac:	20000b3b 	.word	0x20000b3b
 80034b0:	20000b10 	.word	0x20000b10
 80034b4:	0800cd34 	.word	0x0800cd34
 80034b8:	0800cd48 	.word	0x0800cd48
 80034bc:	20000b28 	.word	0x20000b28
			} else if(dilSecim == 1) {
 80034c0:	4b8f      	ldr	r3, [pc, #572]	; (8003700 <menu+0x2e38>)
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	2b01      	cmp	r3, #1
 80034c6:	d104      	bne.n	80034d2 <menu+0x2c0a>
				lcd_print(2, 1, "Second         ");
 80034c8:	4a8e      	ldr	r2, [pc, #568]	; (8003704 <menu+0x2e3c>)
 80034ca:	2101      	movs	r1, #1
 80034cc:	2002      	movs	r0, #2
 80034ce:	f7fd f99a 	bl	8000806 <lcd_print>
			}

			itoa(makineCalismaTmr, snum, 10);
 80034d2:	4b8d      	ldr	r3, [pc, #564]	; (8003708 <menu+0x2e40>)
 80034d4:	781b      	ldrb	r3, [r3, #0]
 80034d6:	220a      	movs	r2, #10
 80034d8:	498c      	ldr	r1, [pc, #560]	; (800370c <menu+0x2e44>)
 80034da:	4618      	mov	r0, r3
 80034dc:	f008 fa6e 	bl	800b9bc <itoa>
			lcd_print(2, 16, snum);
 80034e0:	4a8a      	ldr	r2, [pc, #552]	; (800370c <menu+0x2e44>)
 80034e2:	2110      	movs	r1, #16
 80034e4:	2002      	movs	r0, #2
 80034e6:	f7fd f98e 	bl	8000806 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80034ea:	2102      	movs	r1, #2
 80034ec:	4888      	ldr	r0, [pc, #544]	; (8003710 <menu+0x2e48>)
 80034ee:	f005 fa6f 	bl	80089d0 <HAL_GPIO_ReadPin>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d115      	bne.n	8003524 <menu+0x2c5c>
 80034f8:	4b86      	ldr	r3, [pc, #536]	; (8003714 <menu+0x2e4c>)
 80034fa:	781b      	ldrb	r3, [r3, #0]
 80034fc:	f083 0301 	eor.w	r3, r3, #1
 8003500:	b2db      	uxtb	r3, r3
 8003502:	2b00      	cmp	r3, #0
 8003504:	d00e      	beq.n	8003524 <menu+0x2c5c>
			makineCalismaTmr = makineCalismaTmr + 1;
 8003506:	4b80      	ldr	r3, [pc, #512]	; (8003708 <menu+0x2e40>)
 8003508:	781b      	ldrb	r3, [r3, #0]
 800350a:	3301      	adds	r3, #1
 800350c:	b2da      	uxtb	r2, r3
 800350e:	4b7e      	ldr	r3, [pc, #504]	; (8003708 <menu+0x2e40>)
 8003510:	701a      	strb	r2, [r3, #0]

			if(makineCalismaTmr > 180) {
 8003512:	4b7d      	ldr	r3, [pc, #500]	; (8003708 <menu+0x2e40>)
 8003514:	781b      	ldrb	r3, [r3, #0]
 8003516:	2bb4      	cmp	r3, #180	; 0xb4
 8003518:	d902      	bls.n	8003520 <menu+0x2c58>
				makineCalismaTmr = 0;
 800351a:	4b7b      	ldr	r3, [pc, #492]	; (8003708 <menu+0x2e40>)
 800351c:	2200      	movs	r2, #0
 800351e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003520:	f001 fd46 	bl	8004fb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003524:	2104      	movs	r1, #4
 8003526:	487a      	ldr	r0, [pc, #488]	; (8003710 <menu+0x2e48>)
 8003528:	f005 fa52 	bl	80089d0 <HAL_GPIO_ReadPin>
 800352c:	4603      	mov	r3, r0
 800352e:	2b01      	cmp	r3, #1
 8003530:	d115      	bne.n	800355e <menu+0x2c96>
 8003532:	4b78      	ldr	r3, [pc, #480]	; (8003714 <menu+0x2e4c>)
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	f083 0301 	eor.w	r3, r3, #1
 800353a:	b2db      	uxtb	r3, r3
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00e      	beq.n	800355e <menu+0x2c96>
			makineCalismaTmr = makineCalismaTmr - 1;
 8003540:	4b71      	ldr	r3, [pc, #452]	; (8003708 <menu+0x2e40>)
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	3b01      	subs	r3, #1
 8003546:	b2da      	uxtb	r2, r3
 8003548:	4b6f      	ldr	r3, [pc, #444]	; (8003708 <menu+0x2e40>)
 800354a:	701a      	strb	r2, [r3, #0]

		   	if(makineCalismaTmr > 181) {
 800354c:	4b6e      	ldr	r3, [pc, #440]	; (8003708 <menu+0x2e40>)
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	2bb5      	cmp	r3, #181	; 0xb5
 8003552:	d902      	bls.n	800355a <menu+0x2c92>
		   		makineCalismaTmr = 180;
 8003554:	4b6c      	ldr	r3, [pc, #432]	; (8003708 <menu+0x2e40>)
 8003556:	22b4      	movs	r2, #180	; 0xb4
 8003558:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800355a:	f001 fd29 	bl	8004fb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800355e:	2108      	movs	r1, #8
 8003560:	486b      	ldr	r0, [pc, #428]	; (8003710 <menu+0x2e48>)
 8003562:	f005 fa35 	bl	80089d0 <HAL_GPIO_ReadPin>
 8003566:	4603      	mov	r3, r0
 8003568:	2b01      	cmp	r3, #1
 800356a:	d10d      	bne.n	8003588 <menu+0x2cc0>
 800356c:	4b69      	ldr	r3, [pc, #420]	; (8003714 <menu+0x2e4c>)
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	f083 0301 	eor.w	r3, r3, #1
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d006      	beq.n	8003588 <menu+0x2cc0>
			eepromData[24] = makineCalismaTmr;
 800357a:	4b63      	ldr	r3, [pc, #396]	; (8003708 <menu+0x2e40>)
 800357c:	781a      	ldrb	r2, [r3, #0]
 800357e:	4b66      	ldr	r3, [pc, #408]	; (8003718 <menu+0x2e50>)
 8003580:	761a      	strb	r2, [r3, #24]
			hafizaYaz = 1;
 8003582:	4b66      	ldr	r3, [pc, #408]	; (800371c <menu+0x2e54>)
 8003584:	2201      	movs	r2, #1
 8003586:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 27) {
 8003588:	4b65      	ldr	r3, [pc, #404]	; (8003720 <menu+0x2e58>)
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	2b1b      	cmp	r3, #27
 800358e:	f040 8083 	bne.w	8003698 <menu+0x2dd0>
		lcd_print(1, 1, "BUZZER          ");
 8003592:	4a64      	ldr	r2, [pc, #400]	; (8003724 <menu+0x2e5c>)
 8003594:	2101      	movs	r1, #1
 8003596:	2001      	movs	r0, #1
 8003598:	f7fd f935 	bl	8000806 <lcd_print>

		if(buzzer == 0) {
 800359c:	4b62      	ldr	r3, [pc, #392]	; (8003728 <menu+0x2e60>)
 800359e:	781b      	ldrb	r3, [r3, #0]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d113      	bne.n	80035cc <menu+0x2d04>
			if(dilSecim == 0) {
 80035a4:	4b56      	ldr	r3, [pc, #344]	; (8003700 <menu+0x2e38>)
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d105      	bne.n	80035b8 <menu+0x2cf0>
				lcd_print(2, 1, "Pasif           ");
 80035ac:	4a5f      	ldr	r2, [pc, #380]	; (800372c <menu+0x2e64>)
 80035ae:	2101      	movs	r1, #1
 80035b0:	2002      	movs	r0, #2
 80035b2:	f7fd f928 	bl	8000806 <lcd_print>
 80035b6:	e020      	b.n	80035fa <menu+0x2d32>
			} else if(dilSecim == 1) {
 80035b8:	4b51      	ldr	r3, [pc, #324]	; (8003700 <menu+0x2e38>)
 80035ba:	781b      	ldrb	r3, [r3, #0]
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d11c      	bne.n	80035fa <menu+0x2d32>
				lcd_print(2, 1, "Passive         ");
 80035c0:	4a5b      	ldr	r2, [pc, #364]	; (8003730 <menu+0x2e68>)
 80035c2:	2101      	movs	r1, #1
 80035c4:	2002      	movs	r0, #2
 80035c6:	f7fd f91e 	bl	8000806 <lcd_print>
 80035ca:	e016      	b.n	80035fa <menu+0x2d32>
			}
		} else if(buzzer == 1) {
 80035cc:	4b56      	ldr	r3, [pc, #344]	; (8003728 <menu+0x2e60>)
 80035ce:	781b      	ldrb	r3, [r3, #0]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d112      	bne.n	80035fa <menu+0x2d32>
			if(dilSecim == 0) {
 80035d4:	4b4a      	ldr	r3, [pc, #296]	; (8003700 <menu+0x2e38>)
 80035d6:	781b      	ldrb	r3, [r3, #0]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d105      	bne.n	80035e8 <menu+0x2d20>
				lcd_print(2, 1, "Aktif           ");
 80035dc:	4a55      	ldr	r2, [pc, #340]	; (8003734 <menu+0x2e6c>)
 80035de:	2101      	movs	r1, #1
 80035e0:	2002      	movs	r0, #2
 80035e2:	f7fd f910 	bl	8000806 <lcd_print>
 80035e6:	e008      	b.n	80035fa <menu+0x2d32>
			} else if(dilSecim == 1) {
 80035e8:	4b45      	ldr	r3, [pc, #276]	; (8003700 <menu+0x2e38>)
 80035ea:	781b      	ldrb	r3, [r3, #0]
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d104      	bne.n	80035fa <menu+0x2d32>
				lcd_print(2, 1, "Active          ");
 80035f0:	4a51      	ldr	r2, [pc, #324]	; (8003738 <menu+0x2e70>)
 80035f2:	2101      	movs	r1, #1
 80035f4:	2002      	movs	r0, #2
 80035f6:	f7fd f906 	bl	8000806 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 80035fa:	2102      	movs	r1, #2
 80035fc:	4844      	ldr	r0, [pc, #272]	; (8003710 <menu+0x2e48>)
 80035fe:	f005 f9e7 	bl	80089d0 <HAL_GPIO_ReadPin>
 8003602:	4603      	mov	r3, r0
 8003604:	2b01      	cmp	r3, #1
 8003606:	d115      	bne.n	8003634 <menu+0x2d6c>
 8003608:	4b42      	ldr	r3, [pc, #264]	; (8003714 <menu+0x2e4c>)
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	f083 0301 	eor.w	r3, r3, #1
 8003610:	b2db      	uxtb	r3, r3
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00e      	beq.n	8003634 <menu+0x2d6c>
			buzzer = buzzer + 1;
 8003616:	4b44      	ldr	r3, [pc, #272]	; (8003728 <menu+0x2e60>)
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	3301      	adds	r3, #1
 800361c:	b2da      	uxtb	r2, r3
 800361e:	4b42      	ldr	r3, [pc, #264]	; (8003728 <menu+0x2e60>)
 8003620:	701a      	strb	r2, [r3, #0]
			if(buzzer > 1){
 8003622:	4b41      	ldr	r3, [pc, #260]	; (8003728 <menu+0x2e60>)
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d902      	bls.n	8003630 <menu+0x2d68>
				buzzer = 0;
 800362a:	4b3f      	ldr	r3, [pc, #252]	; (8003728 <menu+0x2e60>)
 800362c:	2200      	movs	r2, #0
 800362e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003630:	f001 fcbe 	bl	8004fb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003634:	2104      	movs	r1, #4
 8003636:	4836      	ldr	r0, [pc, #216]	; (8003710 <menu+0x2e48>)
 8003638:	f005 f9ca 	bl	80089d0 <HAL_GPIO_ReadPin>
 800363c:	4603      	mov	r3, r0
 800363e:	2b01      	cmp	r3, #1
 8003640:	d115      	bne.n	800366e <menu+0x2da6>
 8003642:	4b34      	ldr	r3, [pc, #208]	; (8003714 <menu+0x2e4c>)
 8003644:	781b      	ldrb	r3, [r3, #0]
 8003646:	f083 0301 	eor.w	r3, r3, #1
 800364a:	b2db      	uxtb	r3, r3
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00e      	beq.n	800366e <menu+0x2da6>
			buzzer = buzzer - 1;
 8003650:	4b35      	ldr	r3, [pc, #212]	; (8003728 <menu+0x2e60>)
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	3b01      	subs	r3, #1
 8003656:	b2da      	uxtb	r2, r3
 8003658:	4b33      	ldr	r3, [pc, #204]	; (8003728 <menu+0x2e60>)
 800365a:	701a      	strb	r2, [r3, #0]

		   	if(buzzer > 0){
 800365c:	4b32      	ldr	r3, [pc, #200]	; (8003728 <menu+0x2e60>)
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d002      	beq.n	800366a <menu+0x2da2>
		   		buzzer = 1;
 8003664:	4b30      	ldr	r3, [pc, #192]	; (8003728 <menu+0x2e60>)
 8003666:	2201      	movs	r2, #1
 8003668:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 800366a:	f001 fca1 	bl	8004fb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 800366e:	2108      	movs	r1, #8
 8003670:	4827      	ldr	r0, [pc, #156]	; (8003710 <menu+0x2e48>)
 8003672:	f005 f9ad 	bl	80089d0 <HAL_GPIO_ReadPin>
 8003676:	4603      	mov	r3, r0
 8003678:	2b01      	cmp	r3, #1
 800367a:	d10d      	bne.n	8003698 <menu+0x2dd0>
 800367c:	4b25      	ldr	r3, [pc, #148]	; (8003714 <menu+0x2e4c>)
 800367e:	781b      	ldrb	r3, [r3, #0]
 8003680:	f083 0301 	eor.w	r3, r3, #1
 8003684:	b2db      	uxtb	r3, r3
 8003686:	2b00      	cmp	r3, #0
 8003688:	d006      	beq.n	8003698 <menu+0x2dd0>
			eepromData[25] = buzzer;
 800368a:	4b27      	ldr	r3, [pc, #156]	; (8003728 <menu+0x2e60>)
 800368c:	781a      	ldrb	r2, [r3, #0]
 800368e:	4b22      	ldr	r3, [pc, #136]	; (8003718 <menu+0x2e50>)
 8003690:	765a      	strb	r2, [r3, #25]
			hafizaYaz = 1;
 8003692:	4b22      	ldr	r3, [pc, #136]	; (800371c <menu+0x2e54>)
 8003694:	2201      	movs	r2, #1
 8003696:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 28) {
 8003698:	4b21      	ldr	r3, [pc, #132]	; (8003720 <menu+0x2e58>)
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	2b1c      	cmp	r3, #28
 800369e:	f040 80ab 	bne.w	80037f8 <menu+0x2f30>
		calismaSayModu = 0;
 80036a2:	4b26      	ldr	r3, [pc, #152]	; (800373c <menu+0x2e74>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	701a      	strb	r2, [r3, #0]
		lcd_print(1, 1, "DEMO MODE      ");
 80036a8:	4a25      	ldr	r2, [pc, #148]	; (8003740 <menu+0x2e78>)
 80036aa:	2101      	movs	r1, #1
 80036ac:	2001      	movs	r0, #1
 80036ae:	f7fd f8aa 	bl	8000806 <lcd_print>

		if(demoMode == 0) {
 80036b2:	4b24      	ldr	r3, [pc, #144]	; (8003744 <menu+0x2e7c>)
 80036b4:	781b      	ldrb	r3, [r3, #0]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d113      	bne.n	80036e2 <menu+0x2e1a>
			if(dilSecim == 0) {
 80036ba:	4b11      	ldr	r3, [pc, #68]	; (8003700 <menu+0x2e38>)
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d105      	bne.n	80036ce <menu+0x2e06>
				lcd_print(2, 1, "Pasif           ");
 80036c2:	4a1a      	ldr	r2, [pc, #104]	; (800372c <menu+0x2e64>)
 80036c4:	2101      	movs	r1, #1
 80036c6:	2002      	movs	r0, #2
 80036c8:	f7fd f89d 	bl	8000806 <lcd_print>
 80036cc:	e045      	b.n	800375a <menu+0x2e92>
			} else if(dilSecim == 1) {
 80036ce:	4b0c      	ldr	r3, [pc, #48]	; (8003700 <menu+0x2e38>)
 80036d0:	781b      	ldrb	r3, [r3, #0]
 80036d2:	2b01      	cmp	r3, #1
 80036d4:	d141      	bne.n	800375a <menu+0x2e92>
				lcd_print(2, 1, "Passive         ");
 80036d6:	4a16      	ldr	r2, [pc, #88]	; (8003730 <menu+0x2e68>)
 80036d8:	2101      	movs	r1, #1
 80036da:	2002      	movs	r0, #2
 80036dc:	f7fd f893 	bl	8000806 <lcd_print>
 80036e0:	e03b      	b.n	800375a <menu+0x2e92>
			}
		} else if(demoMode == 1) {
 80036e2:	4b18      	ldr	r3, [pc, #96]	; (8003744 <menu+0x2e7c>)
 80036e4:	781b      	ldrb	r3, [r3, #0]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d137      	bne.n	800375a <menu+0x2e92>
			if(dilSecim == 0){
 80036ea:	4b05      	ldr	r3, [pc, #20]	; (8003700 <menu+0x2e38>)
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d12a      	bne.n	8003748 <menu+0x2e80>
				lcd_print(2, 1, "Aktif           ");
 80036f2:	4a10      	ldr	r2, [pc, #64]	; (8003734 <menu+0x2e6c>)
 80036f4:	2101      	movs	r1, #1
 80036f6:	2002      	movs	r0, #2
 80036f8:	f7fd f885 	bl	8000806 <lcd_print>
 80036fc:	e02d      	b.n	800375a <menu+0x2e92>
 80036fe:	bf00      	nop
 8003700:	20000b30 	.word	0x20000b30
 8003704:	0800cc5c 	.word	0x0800cc5c
 8003708:	20000b28 	.word	0x20000b28
 800370c:	20000ae4 	.word	0x20000ae4
 8003710:	40010800 	.word	0x40010800
 8003714:	20000b3e 	.word	0x20000b3e
 8003718:	20000aa4 	.word	0x20000aa4
 800371c:	20000b3b 	.word	0x20000b3b
 8003720:	20000b10 	.word	0x20000b10
 8003724:	0800cd5c 	.word	0x0800cd5c
 8003728:	20000b2c 	.word	0x20000b2c
 800372c:	0800c684 	.word	0x0800c684
 8003730:	0800c698 	.word	0x0800c698
 8003734:	0800c6e4 	.word	0x0800c6e4
 8003738:	0800c6f8 	.word	0x0800c6f8
 800373c:	20000b2f 	.word	0x20000b2f
 8003740:	0800cd70 	.word	0x0800cd70
 8003744:	20000b2e 	.word	0x20000b2e
			} else if(dilSecim == 1) {
 8003748:	4b71      	ldr	r3, [pc, #452]	; (8003910 <menu+0x3048>)
 800374a:	781b      	ldrb	r3, [r3, #0]
 800374c:	2b01      	cmp	r3, #1
 800374e:	d104      	bne.n	800375a <menu+0x2e92>
				lcd_print(2, 1, "Active          ");
 8003750:	4a70      	ldr	r2, [pc, #448]	; (8003914 <menu+0x304c>)
 8003752:	2101      	movs	r1, #1
 8003754:	2002      	movs	r0, #2
 8003756:	f7fd f856 	bl	8000806 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 800375a:	2102      	movs	r1, #2
 800375c:	486e      	ldr	r0, [pc, #440]	; (8003918 <menu+0x3050>)
 800375e:	f005 f937 	bl	80089d0 <HAL_GPIO_ReadPin>
 8003762:	4603      	mov	r3, r0
 8003764:	2b01      	cmp	r3, #1
 8003766:	d115      	bne.n	8003794 <menu+0x2ecc>
 8003768:	4b6c      	ldr	r3, [pc, #432]	; (800391c <menu+0x3054>)
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	f083 0301 	eor.w	r3, r3, #1
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d00e      	beq.n	8003794 <menu+0x2ecc>
			demoMode = demoMode + 1;
 8003776:	4b6a      	ldr	r3, [pc, #424]	; (8003920 <menu+0x3058>)
 8003778:	781b      	ldrb	r3, [r3, #0]
 800377a:	3301      	adds	r3, #1
 800377c:	b2da      	uxtb	r2, r3
 800377e:	4b68      	ldr	r3, [pc, #416]	; (8003920 <menu+0x3058>)
 8003780:	701a      	strb	r2, [r3, #0]

			if(demoMode > 1){
 8003782:	4b67      	ldr	r3, [pc, #412]	; (8003920 <menu+0x3058>)
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d902      	bls.n	8003790 <menu+0x2ec8>
				demoMode = 0;
 800378a:	4b65      	ldr	r3, [pc, #404]	; (8003920 <menu+0x3058>)
 800378c:	2200      	movs	r2, #0
 800378e:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 8003790:	f001 fc0e 	bl	8004fb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003794:	2104      	movs	r1, #4
 8003796:	4860      	ldr	r0, [pc, #384]	; (8003918 <menu+0x3050>)
 8003798:	f005 f91a 	bl	80089d0 <HAL_GPIO_ReadPin>
 800379c:	4603      	mov	r3, r0
 800379e:	2b01      	cmp	r3, #1
 80037a0:	d115      	bne.n	80037ce <menu+0x2f06>
 80037a2:	4b5e      	ldr	r3, [pc, #376]	; (800391c <menu+0x3054>)
 80037a4:	781b      	ldrb	r3, [r3, #0]
 80037a6:	f083 0301 	eor.w	r3, r3, #1
 80037aa:	b2db      	uxtb	r3, r3
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d00e      	beq.n	80037ce <menu+0x2f06>
			demoMode = demoMode - 1;
 80037b0:	4b5b      	ldr	r3, [pc, #364]	; (8003920 <menu+0x3058>)
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	3b01      	subs	r3, #1
 80037b6:	b2da      	uxtb	r2, r3
 80037b8:	4b59      	ldr	r3, [pc, #356]	; (8003920 <menu+0x3058>)
 80037ba:	701a      	strb	r2, [r3, #0]

		   	if(demoMode > 0) {
 80037bc:	4b58      	ldr	r3, [pc, #352]	; (8003920 <menu+0x3058>)
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d002      	beq.n	80037ca <menu+0x2f02>
		   		demoMode = 1;
 80037c4:	4b56      	ldr	r3, [pc, #344]	; (8003920 <menu+0x3058>)
 80037c6:	2201      	movs	r2, #1
 80037c8:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80037ca:	f001 fbf1 	bl	8004fb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 80037ce:	2108      	movs	r1, #8
 80037d0:	4851      	ldr	r0, [pc, #324]	; (8003918 <menu+0x3050>)
 80037d2:	f005 f8fd 	bl	80089d0 <HAL_GPIO_ReadPin>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b01      	cmp	r3, #1
 80037da:	d10d      	bne.n	80037f8 <menu+0x2f30>
 80037dc:	4b4f      	ldr	r3, [pc, #316]	; (800391c <menu+0x3054>)
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	f083 0301 	eor.w	r3, r3, #1
 80037e4:	b2db      	uxtb	r3, r3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d006      	beq.n	80037f8 <menu+0x2f30>
			eepromData[26] = demoMode;
 80037ea:	4b4d      	ldr	r3, [pc, #308]	; (8003920 <menu+0x3058>)
 80037ec:	781a      	ldrb	r2, [r3, #0]
 80037ee:	4b4d      	ldr	r3, [pc, #308]	; (8003924 <menu+0x305c>)
 80037f0:	769a      	strb	r2, [r3, #26]
			hafizaYaz = 1;
 80037f2:	4b4d      	ldr	r3, [pc, #308]	; (8003928 <menu+0x3060>)
 80037f4:	2201      	movs	r2, #1
 80037f6:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 29) {
 80037f8:	4b4c      	ldr	r3, [pc, #304]	; (800392c <menu+0x3064>)
 80037fa:	781b      	ldrb	r3, [r3, #0]
 80037fc:	2b1d      	cmp	r3, #29
 80037fe:	f040 8132 	bne.w	8003a66 <menu+0x319e>
		if(calismaSayisi1 == 0 && calismaSayisi10 == 0 && calismaSayisi100 == 0 && calismaSayisi1000 == 0 && calismaSayisi10000 == 0) {
 8003802:	4b4b      	ldr	r3, [pc, #300]	; (8003930 <menu+0x3068>)
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	2b00      	cmp	r3, #0
 8003808:	d113      	bne.n	8003832 <menu+0x2f6a>
 800380a:	4b4a      	ldr	r3, [pc, #296]	; (8003934 <menu+0x306c>)
 800380c:	781b      	ldrb	r3, [r3, #0]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10f      	bne.n	8003832 <menu+0x2f6a>
 8003812:	4b49      	ldr	r3, [pc, #292]	; (8003938 <menu+0x3070>)
 8003814:	781b      	ldrb	r3, [r3, #0]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d10b      	bne.n	8003832 <menu+0x2f6a>
 800381a:	4b48      	ldr	r3, [pc, #288]	; (800393c <menu+0x3074>)
 800381c:	781b      	ldrb	r3, [r3, #0]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d107      	bne.n	8003832 <menu+0x2f6a>
 8003822:	4b47      	ldr	r3, [pc, #284]	; (8003940 <menu+0x3078>)
 8003824:	781b      	ldrb	r3, [r3, #0]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d103      	bne.n	8003832 <menu+0x2f6a>
			calismaSayisiYar = 0;
 800382a:	4b46      	ldr	r3, [pc, #280]	; (8003944 <menu+0x307c>)
 800382c:	2200      	movs	r2, #0
 800382e:	701a      	strb	r2, [r3, #0]
 8003830:	e002      	b.n	8003838 <menu+0x2f70>
		} else {
			calismaSayisiYar = 1;
 8003832:	4b44      	ldr	r3, [pc, #272]	; (8003944 <menu+0x307c>)
 8003834:	2201      	movs	r2, #1
 8003836:	701a      	strb	r2, [r3, #0]
		}

		if(calismaSayModu == 0) {
 8003838:	4b43      	ldr	r3, [pc, #268]	; (8003948 <menu+0x3080>)
 800383a:	781b      	ldrb	r3, [r3, #0]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d154      	bne.n	80038ea <menu+0x3022>
			if(dilSecim == 0) {
 8003840:	4b33      	ldr	r3, [pc, #204]	; (8003910 <menu+0x3048>)
 8003842:	781b      	ldrb	r3, [r3, #0]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d105      	bne.n	8003854 <menu+0x2f8c>
				lcd_print(1, 1, "Calisma Sayisi  ");
 8003848:	4a40      	ldr	r2, [pc, #256]	; (800394c <menu+0x3084>)
 800384a:	2101      	movs	r1, #1
 800384c:	2001      	movs	r0, #1
 800384e:	f7fc ffda 	bl	8000806 <lcd_print>
 8003852:	e008      	b.n	8003866 <menu+0x2f9e>
			} else if(dilSecim == 1) {
 8003854:	4b2e      	ldr	r3, [pc, #184]	; (8003910 <menu+0x3048>)
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	2b01      	cmp	r3, #1
 800385a:	d104      	bne.n	8003866 <menu+0x2f9e>
				lcd_print(1, 1, "Working Cycle   ");
 800385c:	4a3c      	ldr	r2, [pc, #240]	; (8003950 <menu+0x3088>)
 800385e:	2101      	movs	r1, #1
 8003860:	2001      	movs	r0, #1
 8003862:	f7fc ffd0 	bl	8000806 <lcd_print>
			}

			itoa(calismaSayisi10000, snum, 10);
 8003866:	4b36      	ldr	r3, [pc, #216]	; (8003940 <menu+0x3078>)
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	220a      	movs	r2, #10
 800386c:	4939      	ldr	r1, [pc, #228]	; (8003954 <menu+0x308c>)
 800386e:	4618      	mov	r0, r3
 8003870:	f008 f8a4 	bl	800b9bc <itoa>
			lcd_print(2, 12, snum);
 8003874:	4a37      	ldr	r2, [pc, #220]	; (8003954 <menu+0x308c>)
 8003876:	210c      	movs	r1, #12
 8003878:	2002      	movs	r0, #2
 800387a:	f7fc ffc4 	bl	8000806 <lcd_print>

			itoa(calismaSayisi1000, snum, 10);
 800387e:	4b2f      	ldr	r3, [pc, #188]	; (800393c <menu+0x3074>)
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	220a      	movs	r2, #10
 8003884:	4933      	ldr	r1, [pc, #204]	; (8003954 <menu+0x308c>)
 8003886:	4618      	mov	r0, r3
 8003888:	f008 f898 	bl	800b9bc <itoa>
			lcd_print(2, 13, snum);
 800388c:	4a31      	ldr	r2, [pc, #196]	; (8003954 <menu+0x308c>)
 800388e:	210d      	movs	r1, #13
 8003890:	2002      	movs	r0, #2
 8003892:	f7fc ffb8 	bl	8000806 <lcd_print>

			itoa(calismaSayisi100, snum, 10);
 8003896:	4b28      	ldr	r3, [pc, #160]	; (8003938 <menu+0x3070>)
 8003898:	781b      	ldrb	r3, [r3, #0]
 800389a:	220a      	movs	r2, #10
 800389c:	492d      	ldr	r1, [pc, #180]	; (8003954 <menu+0x308c>)
 800389e:	4618      	mov	r0, r3
 80038a0:	f008 f88c 	bl	800b9bc <itoa>
			lcd_print(2, 14, snum);
 80038a4:	4a2b      	ldr	r2, [pc, #172]	; (8003954 <menu+0x308c>)
 80038a6:	210e      	movs	r1, #14
 80038a8:	2002      	movs	r0, #2
 80038aa:	f7fc ffac 	bl	8000806 <lcd_print>

			itoa(calismaSayisi10, snum, 10);
 80038ae:	4b21      	ldr	r3, [pc, #132]	; (8003934 <menu+0x306c>)
 80038b0:	781b      	ldrb	r3, [r3, #0]
 80038b2:	220a      	movs	r2, #10
 80038b4:	4927      	ldr	r1, [pc, #156]	; (8003954 <menu+0x308c>)
 80038b6:	4618      	mov	r0, r3
 80038b8:	f008 f880 	bl	800b9bc <itoa>
			lcd_print(2, 15, snum);
 80038bc:	4a25      	ldr	r2, [pc, #148]	; (8003954 <menu+0x308c>)
 80038be:	210f      	movs	r1, #15
 80038c0:	2002      	movs	r0, #2
 80038c2:	f7fc ffa0 	bl	8000806 <lcd_print>

			itoa(calismaSayisi1, snum, 10);
 80038c6:	4b1a      	ldr	r3, [pc, #104]	; (8003930 <menu+0x3068>)
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	220a      	movs	r2, #10
 80038cc:	4921      	ldr	r1, [pc, #132]	; (8003954 <menu+0x308c>)
 80038ce:	4618      	mov	r0, r3
 80038d0:	f008 f874 	bl	800b9bc <itoa>
			lcd_print(2, 16, snum);
 80038d4:	4a1f      	ldr	r2, [pc, #124]	; (8003954 <menu+0x308c>)
 80038d6:	2110      	movs	r1, #16
 80038d8:	2002      	movs	r0, #2
 80038da:	f7fc ff94 	bl	8000806 <lcd_print>

			lcd_print(2, 1, "           ");
 80038de:	4a1e      	ldr	r2, [pc, #120]	; (8003958 <menu+0x3090>)
 80038e0:	2101      	movs	r1, #1
 80038e2:	2002      	movs	r0, #2
 80038e4:	f7fc ff8f 	bl	8000806 <lcd_print>
 80038e8:	e048      	b.n	800397c <menu+0x30b4>
		} else if(calismaSayModu == 1) {
 80038ea:	4b17      	ldr	r3, [pc, #92]	; (8003948 <menu+0x3080>)
 80038ec:	781b      	ldrb	r3, [r3, #0]
 80038ee:	2b01      	cmp	r3, #1
 80038f0:	d144      	bne.n	800397c <menu+0x30b4>
			if(dilSecim == 0) {
 80038f2:	4b07      	ldr	r3, [pc, #28]	; (8003910 <menu+0x3048>)
 80038f4:	781b      	ldrb	r3, [r3, #0]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d132      	bne.n	8003960 <menu+0x3098>
				lcd_print(1, 1, "Calisma Sayisi  ");
 80038fa:	4a14      	ldr	r2, [pc, #80]	; (800394c <menu+0x3084>)
 80038fc:	2101      	movs	r1, #1
 80038fe:	2001      	movs	r0, #1
 8003900:	f7fc ff81 	bl	8000806 <lcd_print>
				lcd_print(2, 1, "Enter'la Sifirla");
 8003904:	4a15      	ldr	r2, [pc, #84]	; (800395c <menu+0x3094>)
 8003906:	2101      	movs	r1, #1
 8003908:	2002      	movs	r0, #2
 800390a:	f7fc ff7c 	bl	8000806 <lcd_print>
 800390e:	e035      	b.n	800397c <menu+0x30b4>
 8003910:	20000b30 	.word	0x20000b30
 8003914:	0800c6f8 	.word	0x0800c6f8
 8003918:	40010800 	.word	0x40010800
 800391c:	20000b3e 	.word	0x20000b3e
 8003920:	20000b2e 	.word	0x20000b2e
 8003924:	20000aa4 	.word	0x20000aa4
 8003928:	20000b3b 	.word	0x20000b3b
 800392c:	20000b10 	.word	0x20000b10
 8003930:	20000b0d 	.word	0x20000b0d
 8003934:	20000b0e 	.word	0x20000b0e
 8003938:	20000941 	.word	0x20000941
 800393c:	20000942 	.word	0x20000942
 8003940:	20000b0f 	.word	0x20000b0f
 8003944:	20000b50 	.word	0x20000b50
 8003948:	20000b2f 	.word	0x20000b2f
 800394c:	0800cd80 	.word	0x0800cd80
 8003950:	0800cd94 	.word	0x0800cd94
 8003954:	20000ae4 	.word	0x20000ae4
 8003958:	0800cda8 	.word	0x0800cda8
 800395c:	0800cdb4 	.word	0x0800cdb4
			} else if(dilSecim == 1) {
 8003960:	4b95      	ldr	r3, [pc, #596]	; (8003bb8 <menu+0x32f0>)
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d109      	bne.n	800397c <menu+0x30b4>
				lcd_print(1, 1, "Working Cycle   ");
 8003968:	4a94      	ldr	r2, [pc, #592]	; (8003bbc <menu+0x32f4>)
 800396a:	2101      	movs	r1, #1
 800396c:	2001      	movs	r0, #1
 800396e:	f7fc ff4a 	bl	8000806 <lcd_print>
				lcd_print(2, 1, "Del. with Enter ");
 8003972:	4a93      	ldr	r2, [pc, #588]	; (8003bc0 <menu+0x32f8>)
 8003974:	2101      	movs	r1, #1
 8003976:	2002      	movs	r0, #2
 8003978:	f7fc ff45 	bl	8000806 <lcd_print>
			}
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 800397c:	2102      	movs	r1, #2
 800397e:	4891      	ldr	r0, [pc, #580]	; (8003bc4 <menu+0x32fc>)
 8003980:	f005 f826 	bl	80089d0 <HAL_GPIO_ReadPin>
 8003984:	4603      	mov	r3, r0
 8003986:	2b01      	cmp	r3, #1
 8003988:	d119      	bne.n	80039be <menu+0x30f6>
 800398a:	4b8f      	ldr	r3, [pc, #572]	; (8003bc8 <menu+0x3300>)
 800398c:	781b      	ldrb	r3, [r3, #0]
 800398e:	f083 0301 	eor.w	r3, r3, #1
 8003992:	b2db      	uxtb	r3, r3
 8003994:	2b00      	cmp	r3, #0
 8003996:	d012      	beq.n	80039be <menu+0x30f6>
 8003998:	4b8c      	ldr	r3, [pc, #560]	; (8003bcc <menu+0x3304>)
 800399a:	781b      	ldrb	r3, [r3, #0]
 800399c:	2b00      	cmp	r3, #0
 800399e:	d00e      	beq.n	80039be <menu+0x30f6>
			calismaSayModu = calismaSayModu + 1;
 80039a0:	4b8b      	ldr	r3, [pc, #556]	; (8003bd0 <menu+0x3308>)
 80039a2:	781b      	ldrb	r3, [r3, #0]
 80039a4:	3301      	adds	r3, #1
 80039a6:	b2da      	uxtb	r2, r3
 80039a8:	4b89      	ldr	r3, [pc, #548]	; (8003bd0 <menu+0x3308>)
 80039aa:	701a      	strb	r2, [r3, #0]

			if(calismaSayModu > 1){
 80039ac:	4b88      	ldr	r3, [pc, #544]	; (8003bd0 <menu+0x3308>)
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d902      	bls.n	80039ba <menu+0x30f2>
				calismaSayModu = 0;
 80039b4:	4b86      	ldr	r3, [pc, #536]	; (8003bd0 <menu+0x3308>)
 80039b6:	2200      	movs	r2, #0
 80039b8:	701a      	strb	r2, [r3, #0]
			}
			bekle();
 80039ba:	f001 faf9 	bl	8004fb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0) && (calismaSayisiYar == 1)) {
 80039be:	2104      	movs	r1, #4
 80039c0:	4880      	ldr	r0, [pc, #512]	; (8003bc4 <menu+0x32fc>)
 80039c2:	f005 f805 	bl	80089d0 <HAL_GPIO_ReadPin>
 80039c6:	4603      	mov	r3, r0
 80039c8:	2b01      	cmp	r3, #1
 80039ca:	d119      	bne.n	8003a00 <menu+0x3138>
 80039cc:	4b7e      	ldr	r3, [pc, #504]	; (8003bc8 <menu+0x3300>)
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	f083 0301 	eor.w	r3, r3, #1
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d012      	beq.n	8003a00 <menu+0x3138>
 80039da:	4b7c      	ldr	r3, [pc, #496]	; (8003bcc <menu+0x3304>)
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00e      	beq.n	8003a00 <menu+0x3138>
			calismaSayModu = calismaSayModu - 1;
 80039e2:	4b7b      	ldr	r3, [pc, #492]	; (8003bd0 <menu+0x3308>)
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	3b01      	subs	r3, #1
 80039e8:	b2da      	uxtb	r2, r3
 80039ea:	4b79      	ldr	r3, [pc, #484]	; (8003bd0 <menu+0x3308>)
 80039ec:	701a      	strb	r2, [r3, #0]

		   	if(calismaSayModu > 0) {
 80039ee:	4b78      	ldr	r3, [pc, #480]	; (8003bd0 <menu+0x3308>)
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d002      	beq.n	80039fc <menu+0x3134>
		   		calismaSayModu = 1;
 80039f6:	4b76      	ldr	r3, [pc, #472]	; (8003bd0 <menu+0x3308>)
 80039f8:	2201      	movs	r2, #1
 80039fa:	701a      	strb	r2, [r3, #0]
		   	}
			bekle();
 80039fc:	f001 fad8 	bl	8004fb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003a00:	2108      	movs	r1, #8
 8003a02:	4870      	ldr	r0, [pc, #448]	; (8003bc4 <menu+0x32fc>)
 8003a04:	f004 ffe4 	bl	80089d0 <HAL_GPIO_ReadPin>
 8003a08:	4603      	mov	r3, r0
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d12b      	bne.n	8003a66 <menu+0x319e>
 8003a0e:	4b6e      	ldr	r3, [pc, #440]	; (8003bc8 <menu+0x3300>)
 8003a10:	781b      	ldrb	r3, [r3, #0]
 8003a12:	f083 0301 	eor.w	r3, r3, #1
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d024      	beq.n	8003a66 <menu+0x319e>
			eepromData[32] = 0;
 8003a1c:	4b6d      	ldr	r3, [pc, #436]	; (8003bd4 <menu+0x330c>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	f883 2020 	strb.w	r2, [r3, #32]
			eepromData[31] = 0;
 8003a24:	4b6b      	ldr	r3, [pc, #428]	; (8003bd4 <menu+0x330c>)
 8003a26:	2200      	movs	r2, #0
 8003a28:	77da      	strb	r2, [r3, #31]
			eepromData[30] = 0;
 8003a2a:	4b6a      	ldr	r3, [pc, #424]	; (8003bd4 <menu+0x330c>)
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	779a      	strb	r2, [r3, #30]
			eepromData[29] = 0;
 8003a30:	4b68      	ldr	r3, [pc, #416]	; (8003bd4 <menu+0x330c>)
 8003a32:	2200      	movs	r2, #0
 8003a34:	775a      	strb	r2, [r3, #29]
			eepromData[28] = 0;
 8003a36:	4b67      	ldr	r3, [pc, #412]	; (8003bd4 <menu+0x330c>)
 8003a38:	2200      	movs	r2, #0
 8003a3a:	771a      	strb	r2, [r3, #28]
			calismaSayisi10000 = 0;
 8003a3c:	4b66      	ldr	r3, [pc, #408]	; (8003bd8 <menu+0x3310>)
 8003a3e:	2200      	movs	r2, #0
 8003a40:	701a      	strb	r2, [r3, #0]
			calismaSayisi1000 = 0;
 8003a42:	4b66      	ldr	r3, [pc, #408]	; (8003bdc <menu+0x3314>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	701a      	strb	r2, [r3, #0]
			calismaSayisi100 = 0;
 8003a48:	4b65      	ldr	r3, [pc, #404]	; (8003be0 <menu+0x3318>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	701a      	strb	r2, [r3, #0]
			calismaSayisi10 = 0;
 8003a4e:	4b65      	ldr	r3, [pc, #404]	; (8003be4 <menu+0x331c>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	701a      	strb	r2, [r3, #0]
			calismaSayisi1 = 0;
 8003a54:	4b64      	ldr	r3, [pc, #400]	; (8003be8 <menu+0x3320>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	701a      	strb	r2, [r3, #0]
			calismaSayModu = 0;
 8003a5a:	4b5d      	ldr	r3, [pc, #372]	; (8003bd0 <menu+0x3308>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	701a      	strb	r2, [r3, #0]
			hafizaYaz = 1;
 8003a60:	4b62      	ldr	r3, [pc, #392]	; (8003bec <menu+0x3324>)
 8003a62:	2201      	movs	r2, #1
 8003a64:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 30) {
 8003a66:	4b62      	ldr	r3, [pc, #392]	; (8003bf0 <menu+0x3328>)
 8003a68:	781b      	ldrb	r3, [r3, #0]
 8003a6a:	2b1e      	cmp	r3, #30
 8003a6c:	d16f      	bne.n	8003b4e <menu+0x3286>
		calismaSayModu = 0;
 8003a6e:	4b58      	ldr	r3, [pc, #352]	; (8003bd0 <menu+0x3308>)
 8003a70:	2200      	movs	r2, #0
 8003a72:	701a      	strb	r2, [r3, #0]

		if(dilSecim == 0) {
 8003a74:	4b50      	ldr	r3, [pc, #320]	; (8003bb8 <menu+0x32f0>)
 8003a76:	781b      	ldrb	r3, [r3, #0]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d10a      	bne.n	8003a92 <menu+0x31ca>
			lcd_print(1, 1, "DIL SECIMI      ");
 8003a7c:	4a5d      	ldr	r2, [pc, #372]	; (8003bf4 <menu+0x332c>)
 8003a7e:	2101      	movs	r1, #1
 8003a80:	2001      	movs	r0, #1
 8003a82:	f7fc fec0 	bl	8000806 <lcd_print>
			lcd_print(2, 1, "TURKCE          ");
 8003a86:	4a5c      	ldr	r2, [pc, #368]	; (8003bf8 <menu+0x3330>)
 8003a88:	2101      	movs	r1, #1
 8003a8a:	2002      	movs	r0, #2
 8003a8c:	f7fc febb 	bl	8000806 <lcd_print>
 8003a90:	e00d      	b.n	8003aae <menu+0x31e6>
		} else if(dilSecim == 1) {
 8003a92:	4b49      	ldr	r3, [pc, #292]	; (8003bb8 <menu+0x32f0>)
 8003a94:	781b      	ldrb	r3, [r3, #0]
 8003a96:	2b01      	cmp	r3, #1
 8003a98:	d109      	bne.n	8003aae <menu+0x31e6>
			lcd_print(1, 1, "LANGUAGE SELECT ");
 8003a9a:	4a58      	ldr	r2, [pc, #352]	; (8003bfc <menu+0x3334>)
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	2001      	movs	r0, #1
 8003aa0:	f7fc feb1 	bl	8000806 <lcd_print>
			lcd_print(2, 1, "ENGLISH         ");
 8003aa4:	4a56      	ldr	r2, [pc, #344]	; (8003c00 <menu+0x3338>)
 8003aa6:	2101      	movs	r1, #1
 8003aa8:	2002      	movs	r0, #2
 8003aaa:	f7fc feac 	bl	8000806 <lcd_print>
		}

		if ((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (butonKontrol == 0)) {
 8003aae:	2102      	movs	r1, #2
 8003ab0:	4844      	ldr	r0, [pc, #272]	; (8003bc4 <menu+0x32fc>)
 8003ab2:	f004 ff8d 	bl	80089d0 <HAL_GPIO_ReadPin>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d115      	bne.n	8003ae8 <menu+0x3220>
 8003abc:	4b42      	ldr	r3, [pc, #264]	; (8003bc8 <menu+0x3300>)
 8003abe:	781b      	ldrb	r3, [r3, #0]
 8003ac0:	f083 0301 	eor.w	r3, r3, #1
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d00e      	beq.n	8003ae8 <menu+0x3220>
			dilSecim = dilSecim + 1;
 8003aca:	4b3b      	ldr	r3, [pc, #236]	; (8003bb8 <menu+0x32f0>)
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	3301      	adds	r3, #1
 8003ad0:	b2da      	uxtb	r2, r3
 8003ad2:	4b39      	ldr	r3, [pc, #228]	; (8003bb8 <menu+0x32f0>)
 8003ad4:	701a      	strb	r2, [r3, #0]

			if(dilSecim > 1) {
 8003ad6:	4b38      	ldr	r3, [pc, #224]	; (8003bb8 <menu+0x32f0>)
 8003ad8:	781b      	ldrb	r3, [r3, #0]
 8003ada:	2b01      	cmp	r3, #1
 8003adc:	d902      	bls.n	8003ae4 <menu+0x321c>
				dilSecim = 0;
 8003ade:	4b36      	ldr	r3, [pc, #216]	; (8003bb8 <menu+0x32f0>)
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	701a      	strb	r2, [r3, #0]
			}

			bekle();
 8003ae4:	f001 fa64 	bl	8004fb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (butonKontrol == 0)) {
 8003ae8:	2104      	movs	r1, #4
 8003aea:	4836      	ldr	r0, [pc, #216]	; (8003bc4 <menu+0x32fc>)
 8003aec:	f004 ff70 	bl	80089d0 <HAL_GPIO_ReadPin>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d115      	bne.n	8003b22 <menu+0x325a>
 8003af6:	4b34      	ldr	r3, [pc, #208]	; (8003bc8 <menu+0x3300>)
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	f083 0301 	eor.w	r3, r3, #1
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d00e      	beq.n	8003b22 <menu+0x325a>
			dilSecim = dilSecim - 1;
 8003b04:	4b2c      	ldr	r3, [pc, #176]	; (8003bb8 <menu+0x32f0>)
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	3b01      	subs	r3, #1
 8003b0a:	b2da      	uxtb	r2, r3
 8003b0c:	4b2a      	ldr	r3, [pc, #168]	; (8003bb8 <menu+0x32f0>)
 8003b0e:	701a      	strb	r2, [r3, #0]

		   	if(dilSecim > 0) {
 8003b10:	4b29      	ldr	r3, [pc, #164]	; (8003bb8 <menu+0x32f0>)
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d002      	beq.n	8003b1e <menu+0x3256>
		   		dilSecim = 1;
 8003b18:	4b27      	ldr	r3, [pc, #156]	; (8003bb8 <menu+0x32f0>)
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	701a      	strb	r2, [r3, #0]
		   	}

			bekle();
 8003b1e:	f001 fa47 	bl	8004fb0 <bekle>
		}

		if ((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (butonKontrol == 0)) {
 8003b22:	2108      	movs	r1, #8
 8003b24:	4827      	ldr	r0, [pc, #156]	; (8003bc4 <menu+0x32fc>)
 8003b26:	f004 ff53 	bl	80089d0 <HAL_GPIO_ReadPin>
 8003b2a:	4603      	mov	r3, r0
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d10e      	bne.n	8003b4e <menu+0x3286>
 8003b30:	4b25      	ldr	r3, [pc, #148]	; (8003bc8 <menu+0x3300>)
 8003b32:	781b      	ldrb	r3, [r3, #0]
 8003b34:	f083 0301 	eor.w	r3, r3, #1
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d007      	beq.n	8003b4e <menu+0x3286>
			eepromData[33] = dilSecim;
 8003b3e:	4b1e      	ldr	r3, [pc, #120]	; (8003bb8 <menu+0x32f0>)
 8003b40:	781a      	ldrb	r2, [r3, #0]
 8003b42:	4b24      	ldr	r3, [pc, #144]	; (8003bd4 <menu+0x330c>)
 8003b44:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
			hafizaYaz = 1;
 8003b48:	4b28      	ldr	r3, [pc, #160]	; (8003bec <menu+0x3324>)
 8003b4a:	2201      	movs	r2, #1
 8003b4c:	701a      	strb	r2, [r3, #0]
		}
	}

	if (menuSayac == 31) {
 8003b4e:	4b28      	ldr	r3, [pc, #160]	; (8003bf0 <menu+0x3328>)
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	2b1f      	cmp	r3, #31
 8003b54:	d12e      	bne.n	8003bb4 <menu+0x32ec>
		if(dilSecim == 0) {
 8003b56:	4b18      	ldr	r3, [pc, #96]	; (8003bb8 <menu+0x32f0>)
 8003b58:	781b      	ldrb	r3, [r3, #0]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10a      	bne.n	8003b74 <menu+0x32ac>
			lcd_print(1, 1, " MENUDEN CIKIS  ");
 8003b5e:	4a29      	ldr	r2, [pc, #164]	; (8003c04 <menu+0x333c>)
 8003b60:	2101      	movs	r1, #1
 8003b62:	2001      	movs	r0, #1
 8003b64:	f7fc fe4f 	bl	8000806 <lcd_print>
			lcd_print(2, 1, "ENTER'A BASINIZ ");
 8003b68:	4a27      	ldr	r2, [pc, #156]	; (8003c08 <menu+0x3340>)
 8003b6a:	2101      	movs	r1, #1
 8003b6c:	2002      	movs	r0, #2
 8003b6e:	f7fc fe4a 	bl	8000806 <lcd_print>
 8003b72:	e00d      	b.n	8003b90 <menu+0x32c8>
		} else if(dilSecim == 1) {
 8003b74:	4b10      	ldr	r3, [pc, #64]	; (8003bb8 <menu+0x32f0>)
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d109      	bne.n	8003b90 <menu+0x32c8>
			lcd_print(1, 1, " EXIT THE MENU  ");
 8003b7c:	4a23      	ldr	r2, [pc, #140]	; (8003c0c <menu+0x3344>)
 8003b7e:	2101      	movs	r1, #1
 8003b80:	2001      	movs	r0, #1
 8003b82:	f7fc fe40 	bl	8000806 <lcd_print>
			lcd_print(2, 1, "PUSH ENTER BUTON");
 8003b86:	4a22      	ldr	r2, [pc, #136]	; (8003c10 <menu+0x3348>)
 8003b88:	2101      	movs	r1, #1
 8003b8a:	2002      	movs	r0, #2
 8003b8c:	f7fc fe3b 	bl	8000806 <lcd_print>
		}

		if (HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) {
 8003b90:	2108      	movs	r1, #8
 8003b92:	480c      	ldr	r0, [pc, #48]	; (8003bc4 <menu+0x32fc>)
 8003b94:	f004 ff1c 	bl	80089d0 <HAL_GPIO_ReadPin>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d10a      	bne.n	8003bb4 <menu+0x32ec>
			menuGiris = 0;
 8003b9e:	4b1d      	ldr	r3, [pc, #116]	; (8003c14 <menu+0x334c>)
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	701a      	strb	r2, [r3, #0]

			lcd_clear();
 8003ba4:	f7fc fe44 	bl	8000830 <lcd_clear>
			HAL_Delay(500);
 8003ba8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003bac:	f004 f940 	bl	8007e30 <HAL_Delay>
			NVIC_SystemReset();
 8003bb0:	f7fc fe5a 	bl	8000868 <__NVIC_SystemReset>
		}
	}
}
 8003bb4:	bf00      	nop
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	20000b30 	.word	0x20000b30
 8003bbc:	0800cd94 	.word	0x0800cd94
 8003bc0:	0800cdc8 	.word	0x0800cdc8
 8003bc4:	40010800 	.word	0x40010800
 8003bc8:	20000b3e 	.word	0x20000b3e
 8003bcc:	20000b50 	.word	0x20000b50
 8003bd0:	20000b2f 	.word	0x20000b2f
 8003bd4:	20000aa4 	.word	0x20000aa4
 8003bd8:	20000b0f 	.word	0x20000b0f
 8003bdc:	20000942 	.word	0x20000942
 8003be0:	20000941 	.word	0x20000941
 8003be4:	20000b0e 	.word	0x20000b0e
 8003be8:	20000b0d 	.word	0x20000b0d
 8003bec:	20000b3b 	.word	0x20000b3b
 8003bf0:	20000b10 	.word	0x20000b10
 8003bf4:	0800cddc 	.word	0x0800cddc
 8003bf8:	0800cdf0 	.word	0x0800cdf0
 8003bfc:	0800ce04 	.word	0x0800ce04
 8003c00:	0800ce18 	.word	0x0800ce18
 8003c04:	0800ce2c 	.word	0x0800ce2c
 8003c08:	0800ce40 	.word	0x0800ce40
 8003c0c:	0800ce54 	.word	0x0800ce54
 8003c10:	0800ce68 	.word	0x0800ce68
 8003c14:	20000b2d 	.word	0x20000b2d

08003c18 <loadMenuTexts>:

void loadMenuTexts(uint8_t dilSecim) {
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	4603      	mov	r3, r0
 8003c20:	71fb      	strb	r3, [r7, #7]
	mainText = copyText(mainTextGN);
 8003c22:	48a9      	ldr	r0, [pc, #676]	; (8003ec8 <loadMenuTexts+0x2b0>)
 8003c24:	f7fc fe36 	bl	8000894 <copyText>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	4aa8      	ldr	r2, [pc, #672]	; (8003ecc <loadMenuTexts+0x2b4>)
 8003c2c:	6013      	str	r3, [r2, #0]
	mainText2 = copyText(mainText2GN);
 8003c2e:	48a8      	ldr	r0, [pc, #672]	; (8003ed0 <loadMenuTexts+0x2b8>)
 8003c30:	f7fc fe30 	bl	8000894 <copyText>
 8003c34:	4603      	mov	r3, r0
 8003c36:	4aa7      	ldr	r2, [pc, #668]	; (8003ed4 <loadMenuTexts+0x2bc>)
 8003c38:	6013      	str	r3, [r2, #0]
	ondSafetyText = copyText(ondSafetyTextGN);
 8003c3a:	48a7      	ldr	r0, [pc, #668]	; (8003ed8 <loadMenuTexts+0x2c0>)
 8003c3c:	f7fc fe2a 	bl	8000894 <copyText>
 8003c40:	4603      	mov	r3, r0
 8003c42:	4aa6      	ldr	r2, [pc, #664]	; (8003edc <loadMenuTexts+0x2c4>)
 8003c44:	6013      	str	r3, [r2, #0]
	prudhomeText = copyText(prudhomeTextGN);
 8003c46:	48a6      	ldr	r0, [pc, #664]	; (8003ee0 <loadMenuTexts+0x2c8>)
 8003c48:	f7fc fe24 	bl	8000894 <copyText>
 8003c4c:	4603      	mov	r3, r0
 8003c4e:	4aa5      	ldr	r2, [pc, #660]	; (8003ee4 <loadMenuTexts+0x2cc>)
 8003c50:	6013      	str	r3, [r2, #0]
	pizzattoText = copyText(pizzattoTextGN);
 8003c52:	48a5      	ldr	r0, [pc, #660]	; (8003ee8 <loadMenuTexts+0x2d0>)
 8003c54:	f7fc fe1e 	bl	8000894 <copyText>
 8003c58:	4603      	mov	r3, r0
 8003c5a:	4aa4      	ldr	r2, [pc, #656]	; (8003eec <loadMenuTexts+0x2d4>)
 8003c5c:	6013      	str	r3, [r2, #0]
	buzzerText = copyText(buzzerTextGN);
 8003c5e:	48a4      	ldr	r0, [pc, #656]	; (8003ef0 <loadMenuTexts+0x2d8>)
 8003c60:	f7fc fe18 	bl	8000894 <copyText>
 8003c64:	4603      	mov	r3, r0
 8003c66:	4aa3      	ldr	r2, [pc, #652]	; (8003ef4 <loadMenuTexts+0x2dc>)
 8003c68:	6013      	str	r3, [r2, #0]
	demoModText = copyText(demoModTextGN);
 8003c6a:	48a3      	ldr	r0, [pc, #652]	; (8003ef8 <loadMenuTexts+0x2e0>)
 8003c6c:	f7fc fe12 	bl	8000894 <copyText>
 8003c70:	4603      	mov	r3, r0
 8003c72:	4aa2      	ldr	r2, [pc, #648]	; (8003efc <loadMenuTexts+0x2e4>)
 8003c74:	6013      	str	r3, [r2, #0]
	if(dilSecim == 0) {
 8003c76:	79fb      	ldrb	r3, [r7, #7]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f040 82d1 	bne.w	8004220 <loadMenuTexts+0x608>
		menuyeGirildiText = copyText(menuyeGirildiTextTR);
 8003c7e:	48a0      	ldr	r0, [pc, #640]	; (8003f00 <loadMenuTexts+0x2e8>)
 8003c80:	f7fc fe08 	bl	8000894 <copyText>
 8003c84:	4603      	mov	r3, r0
 8003c86:	4a9f      	ldr	r2, [pc, #636]	; (8003f04 <loadMenuTexts+0x2ec>)
 8003c88:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextTR);
 8003c8a:	489f      	ldr	r0, [pc, #636]	; (8003f08 <loadMenuTexts+0x2f0>)
 8003c8c:	f7fc fe02 	bl	8000894 <copyText>
 8003c90:	4603      	mov	r3, r0
 8003c92:	4a9e      	ldr	r2, [pc, #632]	; (8003f0c <loadMenuTexts+0x2f4>)
 8003c94:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextTR);
 8003c96:	489e      	ldr	r0, [pc, #632]	; (8003f10 <loadMenuTexts+0x2f8>)
 8003c98:	f7fc fdfc 	bl	8000894 <copyText>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	4a9d      	ldr	r2, [pc, #628]	; (8003f14 <loadMenuTexts+0x2fc>)
 8003ca0:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextTR);
 8003ca2:	489d      	ldr	r0, [pc, #628]	; (8003f18 <loadMenuTexts+0x300>)
 8003ca4:	f7fc fdf6 	bl	8000894 <copyText>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	4a9c      	ldr	r2, [pc, #624]	; (8003f1c <loadMenuTexts+0x304>)
 8003cac:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextTR);
 8003cae:	489c      	ldr	r0, [pc, #624]	; (8003f20 <loadMenuTexts+0x308>)
 8003cb0:	f7fc fdf0 	bl	8000894 <copyText>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	4a9b      	ldr	r2, [pc, #620]	; (8003f24 <loadMenuTexts+0x30c>)
 8003cb8:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextTR);
 8003cba:	489b      	ldr	r0, [pc, #620]	; (8003f28 <loadMenuTexts+0x310>)
 8003cbc:	f7fc fdea 	bl	8000894 <copyText>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	4a9a      	ldr	r2, [pc, #616]	; (8003f2c <loadMenuTexts+0x314>)
 8003cc4:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextTR);
 8003cc6:	489a      	ldr	r0, [pc, #616]	; (8003f30 <loadMenuTexts+0x318>)
 8003cc8:	f7fc fde4 	bl	8000894 <copyText>
 8003ccc:	4603      	mov	r3, r0
 8003cce:	4a99      	ldr	r2, [pc, #612]	; (8003f34 <loadMenuTexts+0x31c>)
 8003cd0:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextTR);
 8003cd2:	4899      	ldr	r0, [pc, #612]	; (8003f38 <loadMenuTexts+0x320>)
 8003cd4:	f7fc fdde 	bl	8000894 <copyText>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	4a98      	ldr	r2, [pc, #608]	; (8003f3c <loadMenuTexts+0x324>)
 8003cdc:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextTR);
 8003cde:	4898      	ldr	r0, [pc, #608]	; (8003f40 <loadMenuTexts+0x328>)
 8003ce0:	f7fc fdd8 	bl	8000894 <copyText>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	4a97      	ldr	r2, [pc, #604]	; (8003f44 <loadMenuTexts+0x32c>)
 8003ce8:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextTR);
 8003cea:	4897      	ldr	r0, [pc, #604]	; (8003f48 <loadMenuTexts+0x330>)
 8003cec:	f7fc fdd2 	bl	8000894 <copyText>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	4a96      	ldr	r2, [pc, #600]	; (8003f4c <loadMenuTexts+0x334>)
 8003cf4:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextTR);
 8003cf6:	4896      	ldr	r0, [pc, #600]	; (8003f50 <loadMenuTexts+0x338>)
 8003cf8:	f7fc fdcc 	bl	8000894 <copyText>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	4a95      	ldr	r2, [pc, #596]	; (8003f54 <loadMenuTexts+0x33c>)
 8003d00:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextTR);
 8003d02:	4895      	ldr	r0, [pc, #596]	; (8003f58 <loadMenuTexts+0x340>)
 8003d04:	f7fc fdc6 	bl	8000894 <copyText>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	4a94      	ldr	r2, [pc, #592]	; (8003f5c <loadMenuTexts+0x344>)
 8003d0c:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextTR);
 8003d0e:	4894      	ldr	r0, [pc, #592]	; (8003f60 <loadMenuTexts+0x348>)
 8003d10:	f7fc fdc0 	bl	8000894 <copyText>
 8003d14:	4603      	mov	r3, r0
 8003d16:	4a93      	ldr	r2, [pc, #588]	; (8003f64 <loadMenuTexts+0x34c>)
 8003d18:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextTR);
 8003d1a:	4893      	ldr	r0, [pc, #588]	; (8003f68 <loadMenuTexts+0x350>)
 8003d1c:	f7fc fdba 	bl	8000894 <copyText>
 8003d20:	4603      	mov	r3, r0
 8003d22:	4a92      	ldr	r2, [pc, #584]	; (8003f6c <loadMenuTexts+0x354>)
 8003d24:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextTR);
 8003d26:	4892      	ldr	r0, [pc, #584]	; (8003f70 <loadMenuTexts+0x358>)
 8003d28:	f7fc fdb4 	bl	8000894 <copyText>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	4a91      	ldr	r2, [pc, #580]	; (8003f74 <loadMenuTexts+0x35c>)
 8003d30:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextTR);
 8003d32:	4891      	ldr	r0, [pc, #580]	; (8003f78 <loadMenuTexts+0x360>)
 8003d34:	f7fc fdae 	bl	8000894 <copyText>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	4a90      	ldr	r2, [pc, #576]	; (8003f7c <loadMenuTexts+0x364>)
 8003d3c:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextTR);
 8003d3e:	4890      	ldr	r0, [pc, #576]	; (8003f80 <loadMenuTexts+0x368>)
 8003d40:	f7fc fda8 	bl	8000894 <copyText>
 8003d44:	4603      	mov	r3, r0
 8003d46:	4a8f      	ldr	r2, [pc, #572]	; (8003f84 <loadMenuTexts+0x36c>)
 8003d48:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextTR);
 8003d4a:	488f      	ldr	r0, [pc, #572]	; (8003f88 <loadMenuTexts+0x370>)
 8003d4c:	f7fc fda2 	bl	8000894 <copyText>
 8003d50:	4603      	mov	r3, r0
 8003d52:	4a8e      	ldr	r2, [pc, #568]	; (8003f8c <loadMenuTexts+0x374>)
 8003d54:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextTR);
 8003d56:	488e      	ldr	r0, [pc, #568]	; (8003f90 <loadMenuTexts+0x378>)
 8003d58:	f7fc fd9c 	bl	8000894 <copyText>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	4a8d      	ldr	r2, [pc, #564]	; (8003f94 <loadMenuTexts+0x37c>)
 8003d60:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextTR);
 8003d62:	488d      	ldr	r0, [pc, #564]	; (8003f98 <loadMenuTexts+0x380>)
 8003d64:	f7fc fd96 	bl	8000894 <copyText>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	4a8c      	ldr	r2, [pc, #560]	; (8003f9c <loadMenuTexts+0x384>)
 8003d6c:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextTR);
 8003d6e:	488c      	ldr	r0, [pc, #560]	; (8003fa0 <loadMenuTexts+0x388>)
 8003d70:	f7fc fd90 	bl	8000894 <copyText>
 8003d74:	4603      	mov	r3, r0
 8003d76:	4a8b      	ldr	r2, [pc, #556]	; (8003fa4 <loadMenuTexts+0x38c>)
 8003d78:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextTR);
 8003d7a:	488b      	ldr	r0, [pc, #556]	; (8003fa8 <loadMenuTexts+0x390>)
 8003d7c:	f7fc fd8a 	bl	8000894 <copyText>
 8003d80:	4603      	mov	r3, r0
 8003d82:	4a8a      	ldr	r2, [pc, #552]	; (8003fac <loadMenuTexts+0x394>)
 8003d84:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextTR);
 8003d86:	488a      	ldr	r0, [pc, #552]	; (8003fb0 <loadMenuTexts+0x398>)
 8003d88:	f7fc fd84 	bl	8000894 <copyText>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	4a89      	ldr	r2, [pc, #548]	; (8003fb4 <loadMenuTexts+0x39c>)
 8003d90:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextTR);
 8003d92:	4889      	ldr	r0, [pc, #548]	; (8003fb8 <loadMenuTexts+0x3a0>)
 8003d94:	f7fc fd7e 	bl	8000894 <copyText>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	4a88      	ldr	r2, [pc, #544]	; (8003fbc <loadMenuTexts+0x3a4>)
 8003d9c:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextTR);
 8003d9e:	4888      	ldr	r0, [pc, #544]	; (8003fc0 <loadMenuTexts+0x3a8>)
 8003da0:	f7fc fd78 	bl	8000894 <copyText>
 8003da4:	4603      	mov	r3, r0
 8003da6:	4a87      	ldr	r2, [pc, #540]	; (8003fc4 <loadMenuTexts+0x3ac>)
 8003da8:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextTR);
 8003daa:	4887      	ldr	r0, [pc, #540]	; (8003fc8 <loadMenuTexts+0x3b0>)
 8003dac:	f7fc fd72 	bl	8000894 <copyText>
 8003db0:	4603      	mov	r3, r0
 8003db2:	4a86      	ldr	r2, [pc, #536]	; (8003fcc <loadMenuTexts+0x3b4>)
 8003db4:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextTR);
 8003db6:	4886      	ldr	r0, [pc, #536]	; (8003fd0 <loadMenuTexts+0x3b8>)
 8003db8:	f7fc fd6c 	bl	8000894 <copyText>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	4a85      	ldr	r2, [pc, #532]	; (8003fd4 <loadMenuTexts+0x3bc>)
 8003dc0:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextTR);
 8003dc2:	4885      	ldr	r0, [pc, #532]	; (8003fd8 <loadMenuTexts+0x3c0>)
 8003dc4:	f7fc fd66 	bl	8000894 <copyText>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	4a84      	ldr	r2, [pc, #528]	; (8003fdc <loadMenuTexts+0x3c4>)
 8003dcc:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextTR);
 8003dce:	4884      	ldr	r0, [pc, #528]	; (8003fe0 <loadMenuTexts+0x3c8>)
 8003dd0:	f7fc fd60 	bl	8000894 <copyText>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	4a83      	ldr	r2, [pc, #524]	; (8003fe4 <loadMenuTexts+0x3cc>)
 8003dd8:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextTR);
 8003dda:	4883      	ldr	r0, [pc, #524]	; (8003fe8 <loadMenuTexts+0x3d0>)
 8003ddc:	f7fc fd5a 	bl	8000894 <copyText>
 8003de0:	4603      	mov	r3, r0
 8003de2:	4a82      	ldr	r2, [pc, #520]	; (8003fec <loadMenuTexts+0x3d4>)
 8003de4:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextTR);
 8003de6:	4882      	ldr	r0, [pc, #520]	; (8003ff0 <loadMenuTexts+0x3d8>)
 8003de8:	f7fc fd54 	bl	8000894 <copyText>
 8003dec:	4603      	mov	r3, r0
 8003dee:	4a81      	ldr	r2, [pc, #516]	; (8003ff4 <loadMenuTexts+0x3dc>)
 8003df0:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextTR);
 8003df2:	4881      	ldr	r0, [pc, #516]	; (8003ff8 <loadMenuTexts+0x3e0>)
 8003df4:	f7fc fd4e 	bl	8000894 <copyText>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	4a80      	ldr	r2, [pc, #512]	; (8003ffc <loadMenuTexts+0x3e4>)
 8003dfc:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextTR);
 8003dfe:	4880      	ldr	r0, [pc, #512]	; (8004000 <loadMenuTexts+0x3e8>)
 8003e00:	f7fc fd48 	bl	8000894 <copyText>
 8003e04:	4603      	mov	r3, r0
 8003e06:	4a7f      	ldr	r2, [pc, #508]	; (8004004 <loadMenuTexts+0x3ec>)
 8003e08:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextTR);
 8003e0a:	487f      	ldr	r0, [pc, #508]	; (8004008 <loadMenuTexts+0x3f0>)
 8003e0c:	f7fc fd42 	bl	8000894 <copyText>
 8003e10:	4603      	mov	r3, r0
 8003e12:	4a7e      	ldr	r2, [pc, #504]	; (800400c <loadMenuTexts+0x3f4>)
 8003e14:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextTR);
 8003e16:	487e      	ldr	r0, [pc, #504]	; (8004010 <loadMenuTexts+0x3f8>)
 8003e18:	f7fc fd3c 	bl	8000894 <copyText>
 8003e1c:	4603      	mov	r3, r0
 8003e1e:	4a7d      	ldr	r2, [pc, #500]	; (8004014 <loadMenuTexts+0x3fc>)
 8003e20:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextTR);
 8003e22:	487d      	ldr	r0, [pc, #500]	; (8004018 <loadMenuTexts+0x400>)
 8003e24:	f7fc fd36 	bl	8000894 <copyText>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	4a7c      	ldr	r2, [pc, #496]	; (800401c <loadMenuTexts+0x404>)
 8003e2c:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextTR);
 8003e2e:	487c      	ldr	r0, [pc, #496]	; (8004020 <loadMenuTexts+0x408>)
 8003e30:	f7fc fd30 	bl	8000894 <copyText>
 8003e34:	4603      	mov	r3, r0
 8003e36:	4a7b      	ldr	r2, [pc, #492]	; (8004024 <loadMenuTexts+0x40c>)
 8003e38:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextTR);
 8003e3a:	487b      	ldr	r0, [pc, #492]	; (8004028 <loadMenuTexts+0x410>)
 8003e3c:	f7fc fd2a 	bl	8000894 <copyText>
 8003e40:	4603      	mov	r3, r0
 8003e42:	4a7a      	ldr	r2, [pc, #488]	; (800402c <loadMenuTexts+0x414>)
 8003e44:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextTR);
 8003e46:	487a      	ldr	r0, [pc, #488]	; (8004030 <loadMenuTexts+0x418>)
 8003e48:	f7fc fd24 	bl	8000894 <copyText>
 8003e4c:	4603      	mov	r3, r0
 8003e4e:	4a79      	ldr	r2, [pc, #484]	; (8004034 <loadMenuTexts+0x41c>)
 8003e50:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextTR);
 8003e52:	4879      	ldr	r0, [pc, #484]	; (8004038 <loadMenuTexts+0x420>)
 8003e54:	f7fc fd1e 	bl	8000894 <copyText>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	4a78      	ldr	r2, [pc, #480]	; (800403c <loadMenuTexts+0x424>)
 8003e5c:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextTR);
 8003e5e:	4878      	ldr	r0, [pc, #480]	; (8004040 <loadMenuTexts+0x428>)
 8003e60:	f7fc fd18 	bl	8000894 <copyText>
 8003e64:	4603      	mov	r3, r0
 8003e66:	4a77      	ldr	r2, [pc, #476]	; (8004044 <loadMenuTexts+0x42c>)
 8003e68:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextTR);
 8003e6a:	4877      	ldr	r0, [pc, #476]	; (8004048 <loadMenuTexts+0x430>)
 8003e6c:	f7fc fd12 	bl	8000894 <copyText>
 8003e70:	4603      	mov	r3, r0
 8003e72:	4a76      	ldr	r2, [pc, #472]	; (800404c <loadMenuTexts+0x434>)
 8003e74:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextTR);
 8003e76:	4876      	ldr	r0, [pc, #472]	; (8004050 <loadMenuTexts+0x438>)
 8003e78:	f7fc fd0c 	bl	8000894 <copyText>
 8003e7c:	4603      	mov	r3, r0
 8003e7e:	4a75      	ldr	r2, [pc, #468]	; (8004054 <loadMenuTexts+0x43c>)
 8003e80:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextTR);
 8003e82:	4875      	ldr	r0, [pc, #468]	; (8004058 <loadMenuTexts+0x440>)
 8003e84:	f7fc fd06 	bl	8000894 <copyText>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	4a74      	ldr	r2, [pc, #464]	; (800405c <loadMenuTexts+0x444>)
 8003e8c:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextTR);
 8003e8e:	4874      	ldr	r0, [pc, #464]	; (8004060 <loadMenuTexts+0x448>)
 8003e90:	f7fc fd00 	bl	8000894 <copyText>
 8003e94:	4603      	mov	r3, r0
 8003e96:	4a73      	ldr	r2, [pc, #460]	; (8004064 <loadMenuTexts+0x44c>)
 8003e98:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextTR);
 8003e9a:	4873      	ldr	r0, [pc, #460]	; (8004068 <loadMenuTexts+0x450>)
 8003e9c:	f7fc fcfa 	bl	8000894 <copyText>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	4a72      	ldr	r2, [pc, #456]	; (800406c <loadMenuTexts+0x454>)
 8003ea4:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextTR);
 8003ea6:	4872      	ldr	r0, [pc, #456]	; (8004070 <loadMenuTexts+0x458>)
 8003ea8:	f7fc fcf4 	bl	8000894 <copyText>
 8003eac:	4603      	mov	r3, r0
 8003eae:	4a71      	ldr	r2, [pc, #452]	; (8004074 <loadMenuTexts+0x45c>)
 8003eb0:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextTR);
 8003eb2:	4871      	ldr	r0, [pc, #452]	; (8004078 <loadMenuTexts+0x460>)
 8003eb4:	f7fc fcee 	bl	8000894 <copyText>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	4a70      	ldr	r2, [pc, #448]	; (800407c <loadMenuTexts+0x464>)
 8003ebc:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextTR);
 8003ebe:	4870      	ldr	r0, [pc, #448]	; (8004080 <loadMenuTexts+0x468>)
 8003ec0:	f7fc fce8 	bl	8000894 <copyText>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	e0dd      	b.n	8004084 <loadMenuTexts+0x46c>
 8003ec8:	20000000 	.word	0x20000000
 8003ecc:	20000b74 	.word	0x20000b74
 8003ed0:	20000010 	.word	0x20000010
 8003ed4:	20000b78 	.word	0x20000b78
 8003ed8:	20000020 	.word	0x20000020
 8003edc:	20000bd0 	.word	0x20000bd0
 8003ee0:	20000030 	.word	0x20000030
 8003ee4:	20000c00 	.word	0x20000c00
 8003ee8:	20000040 	.word	0x20000040
 8003eec:	20000c08 	.word	0x20000c08
 8003ef0:	20000050 	.word	0x20000050
 8003ef4:	20000c80 	.word	0x20000c80
 8003ef8:	20000060 	.word	0x20000060
 8003efc:	20000c84 	.word	0x20000c84
 8003f00:	20000070 	.word	0x20000070
 8003f04:	20000b7c 	.word	0x20000b7c
 8003f08:	20000080 	.word	0x20000080
 8003f0c:	20000b80 	.word	0x20000b80
 8003f10:	20000090 	.word	0x20000090
 8003f14:	20000b84 	.word	0x20000b84
 8003f18:	200000a0 	.word	0x200000a0
 8003f1c:	20000b88 	.word	0x20000b88
 8003f20:	200000b0 	.word	0x200000b0
 8003f24:	20000b8c 	.word	0x20000b8c
 8003f28:	200000c0 	.word	0x200000c0
 8003f2c:	20000b90 	.word	0x20000b90
 8003f30:	200000d0 	.word	0x200000d0
 8003f34:	20000b94 	.word	0x20000b94
 8003f38:	200000e0 	.word	0x200000e0
 8003f3c:	20000b98 	.word	0x20000b98
 8003f40:	200000f0 	.word	0x200000f0
 8003f44:	20000b9c 	.word	0x20000b9c
 8003f48:	20000100 	.word	0x20000100
 8003f4c:	20000ba0 	.word	0x20000ba0
 8003f50:	20000110 	.word	0x20000110
 8003f54:	20000ba4 	.word	0x20000ba4
 8003f58:	20000120 	.word	0x20000120
 8003f5c:	20000ba8 	.word	0x20000ba8
 8003f60:	20000130 	.word	0x20000130
 8003f64:	20000bac 	.word	0x20000bac
 8003f68:	20000140 	.word	0x20000140
 8003f6c:	20000bb0 	.word	0x20000bb0
 8003f70:	20000150 	.word	0x20000150
 8003f74:	20000bb4 	.word	0x20000bb4
 8003f78:	20000160 	.word	0x20000160
 8003f7c:	20000bb8 	.word	0x20000bb8
 8003f80:	20000170 	.word	0x20000170
 8003f84:	20000bbc 	.word	0x20000bbc
 8003f88:	20000180 	.word	0x20000180
 8003f8c:	20000bc0 	.word	0x20000bc0
 8003f90:	20000190 	.word	0x20000190
 8003f94:	20000bc4 	.word	0x20000bc4
 8003f98:	200001a0 	.word	0x200001a0
 8003f9c:	20000bc8 	.word	0x20000bc8
 8003fa0:	200001b0 	.word	0x200001b0
 8003fa4:	20000bcc 	.word	0x20000bcc
 8003fa8:	200001c0 	.word	0x200001c0
 8003fac:	20000bd4 	.word	0x20000bd4
 8003fb0:	200001d0 	.word	0x200001d0
 8003fb4:	20000bd8 	.word	0x20000bd8
 8003fb8:	200001e0 	.word	0x200001e0
 8003fbc:	20000bdc 	.word	0x20000bdc
 8003fc0:	200001f0 	.word	0x200001f0
 8003fc4:	20000be0 	.word	0x20000be0
 8003fc8:	20000200 	.word	0x20000200
 8003fcc:	20000be4 	.word	0x20000be4
 8003fd0:	20000210 	.word	0x20000210
 8003fd4:	20000be8 	.word	0x20000be8
 8003fd8:	20000220 	.word	0x20000220
 8003fdc:	20000bec 	.word	0x20000bec
 8003fe0:	20000230 	.word	0x20000230
 8003fe4:	20000bf0 	.word	0x20000bf0
 8003fe8:	20000240 	.word	0x20000240
 8003fec:	20000bf4 	.word	0x20000bf4
 8003ff0:	20000250 	.word	0x20000250
 8003ff4:	20000bf8 	.word	0x20000bf8
 8003ff8:	20000260 	.word	0x20000260
 8003ffc:	20000bfc 	.word	0x20000bfc
 8004000:	20000270 	.word	0x20000270
 8004004:	20000c04 	.word	0x20000c04
 8004008:	20000280 	.word	0x20000280
 800400c:	20000c0c 	.word	0x20000c0c
 8004010:	20000290 	.word	0x20000290
 8004014:	20000c10 	.word	0x20000c10
 8004018:	200002a0 	.word	0x200002a0
 800401c:	20000c14 	.word	0x20000c14
 8004020:	200002b0 	.word	0x200002b0
 8004024:	20000c18 	.word	0x20000c18
 8004028:	200002c0 	.word	0x200002c0
 800402c:	20000c1c 	.word	0x20000c1c
 8004030:	200002d0 	.word	0x200002d0
 8004034:	20000c20 	.word	0x20000c20
 8004038:	200002e0 	.word	0x200002e0
 800403c:	20000c24 	.word	0x20000c24
 8004040:	200002f0 	.word	0x200002f0
 8004044:	20000c28 	.word	0x20000c28
 8004048:	20000300 	.word	0x20000300
 800404c:	20000c2c 	.word	0x20000c2c
 8004050:	20000310 	.word	0x20000310
 8004054:	20000c30 	.word	0x20000c30
 8004058:	20000320 	.word	0x20000320
 800405c:	20000c34 	.word	0x20000c34
 8004060:	20000330 	.word	0x20000330
 8004064:	20000c38 	.word	0x20000c38
 8004068:	20000340 	.word	0x20000340
 800406c:	20000c3c 	.word	0x20000c3c
 8004070:	20000350 	.word	0x20000350
 8004074:	20000c40 	.word	0x20000c40
 8004078:	20000360 	.word	0x20000360
 800407c:	20000c44 	.word	0x20000c44
 8004080:	20000370 	.word	0x20000370
 8004084:	4a3d      	ldr	r2, [pc, #244]	; (800417c <loadMenuTexts+0x564>)
 8004086:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextTR);
 8004088:	483d      	ldr	r0, [pc, #244]	; (8004180 <loadMenuTexts+0x568>)
 800408a:	f7fc fc03 	bl	8000894 <copyText>
 800408e:	4603      	mov	r3, r0
 8004090:	4a3c      	ldr	r2, [pc, #240]	; (8004184 <loadMenuTexts+0x56c>)
 8004092:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextTR);
 8004094:	483c      	ldr	r0, [pc, #240]	; (8004188 <loadMenuTexts+0x570>)
 8004096:	f7fc fbfd 	bl	8000894 <copyText>
 800409a:	4603      	mov	r3, r0
 800409c:	4a3b      	ldr	r2, [pc, #236]	; (800418c <loadMenuTexts+0x574>)
 800409e:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextTR);
 80040a0:	483b      	ldr	r0, [pc, #236]	; (8004190 <loadMenuTexts+0x578>)
 80040a2:	f7fc fbf7 	bl	8000894 <copyText>
 80040a6:	4603      	mov	r3, r0
 80040a8:	4a3a      	ldr	r2, [pc, #232]	; (8004194 <loadMenuTexts+0x57c>)
 80040aa:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextTR);
 80040ac:	483a      	ldr	r0, [pc, #232]	; (8004198 <loadMenuTexts+0x580>)
 80040ae:	f7fc fbf1 	bl	8000894 <copyText>
 80040b2:	4603      	mov	r3, r0
 80040b4:	4a39      	ldr	r2, [pc, #228]	; (800419c <loadMenuTexts+0x584>)
 80040b6:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextTR);
 80040b8:	4839      	ldr	r0, [pc, #228]	; (80041a0 <loadMenuTexts+0x588>)
 80040ba:	f7fc fbeb 	bl	8000894 <copyText>
 80040be:	4603      	mov	r3, r0
 80040c0:	4a38      	ldr	r2, [pc, #224]	; (80041a4 <loadMenuTexts+0x58c>)
 80040c2:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextTR);
 80040c4:	4838      	ldr	r0, [pc, #224]	; (80041a8 <loadMenuTexts+0x590>)
 80040c6:	f7fc fbe5 	bl	8000894 <copyText>
 80040ca:	4603      	mov	r3, r0
 80040cc:	4a37      	ldr	r2, [pc, #220]	; (80041ac <loadMenuTexts+0x594>)
 80040ce:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextTR);
 80040d0:	4837      	ldr	r0, [pc, #220]	; (80041b0 <loadMenuTexts+0x598>)
 80040d2:	f7fc fbdf 	bl	8000894 <copyText>
 80040d6:	4603      	mov	r3, r0
 80040d8:	4a36      	ldr	r2, [pc, #216]	; (80041b4 <loadMenuTexts+0x59c>)
 80040da:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextTR);
 80040dc:	4836      	ldr	r0, [pc, #216]	; (80041b8 <loadMenuTexts+0x5a0>)
 80040de:	f7fc fbd9 	bl	8000894 <copyText>
 80040e2:	4603      	mov	r3, r0
 80040e4:	4a35      	ldr	r2, [pc, #212]	; (80041bc <loadMenuTexts+0x5a4>)
 80040e6:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextTR);
 80040e8:	4835      	ldr	r0, [pc, #212]	; (80041c0 <loadMenuTexts+0x5a8>)
 80040ea:	f7fc fbd3 	bl	8000894 <copyText>
 80040ee:	4603      	mov	r3, r0
 80040f0:	4a34      	ldr	r2, [pc, #208]	; (80041c4 <loadMenuTexts+0x5ac>)
 80040f2:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextTR);
 80040f4:	4834      	ldr	r0, [pc, #208]	; (80041c8 <loadMenuTexts+0x5b0>)
 80040f6:	f7fc fbcd 	bl	8000894 <copyText>
 80040fa:	4603      	mov	r3, r0
 80040fc:	4a33      	ldr	r2, [pc, #204]	; (80041cc <loadMenuTexts+0x5b4>)
 80040fe:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextTR);
 8004100:	4833      	ldr	r0, [pc, #204]	; (80041d0 <loadMenuTexts+0x5b8>)
 8004102:	f7fc fbc7 	bl	8000894 <copyText>
 8004106:	4603      	mov	r3, r0
 8004108:	4a32      	ldr	r2, [pc, #200]	; (80041d4 <loadMenuTexts+0x5bc>)
 800410a:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextTR);
 800410c:	4832      	ldr	r0, [pc, #200]	; (80041d8 <loadMenuTexts+0x5c0>)
 800410e:	f7fc fbc1 	bl	8000894 <copyText>
 8004112:	4603      	mov	r3, r0
 8004114:	4a31      	ldr	r2, [pc, #196]	; (80041dc <loadMenuTexts+0x5c4>)
 8004116:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextTR);
 8004118:	4831      	ldr	r0, [pc, #196]	; (80041e0 <loadMenuTexts+0x5c8>)
 800411a:	f7fc fbbb 	bl	8000894 <copyText>
 800411e:	4603      	mov	r3, r0
 8004120:	4a30      	ldr	r2, [pc, #192]	; (80041e4 <loadMenuTexts+0x5cc>)
 8004122:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextTR);
 8004124:	4830      	ldr	r0, [pc, #192]	; (80041e8 <loadMenuTexts+0x5d0>)
 8004126:	f7fc fbb5 	bl	8000894 <copyText>
 800412a:	4603      	mov	r3, r0
 800412c:	4a2f      	ldr	r2, [pc, #188]	; (80041ec <loadMenuTexts+0x5d4>)
 800412e:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextTR);
 8004130:	482f      	ldr	r0, [pc, #188]	; (80041f0 <loadMenuTexts+0x5d8>)
 8004132:	f7fc fbaf 	bl	8000894 <copyText>
 8004136:	4603      	mov	r3, r0
 8004138:	4a2e      	ldr	r2, [pc, #184]	; (80041f4 <loadMenuTexts+0x5dc>)
 800413a:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextTR);
 800413c:	482e      	ldr	r0, [pc, #184]	; (80041f8 <loadMenuTexts+0x5e0>)
 800413e:	f7fc fba9 	bl	8000894 <copyText>
 8004142:	4603      	mov	r3, r0
 8004144:	4a2d      	ldr	r2, [pc, #180]	; (80041fc <loadMenuTexts+0x5e4>)
 8004146:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextTR);
 8004148:	482d      	ldr	r0, [pc, #180]	; (8004200 <loadMenuTexts+0x5e8>)
 800414a:	f7fc fba3 	bl	8000894 <copyText>
 800414e:	4603      	mov	r3, r0
 8004150:	4a2c      	ldr	r2, [pc, #176]	; (8004204 <loadMenuTexts+0x5ec>)
 8004152:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextTR);
 8004154:	482c      	ldr	r0, [pc, #176]	; (8004208 <loadMenuTexts+0x5f0>)
 8004156:	f7fc fb9d 	bl	8000894 <copyText>
 800415a:	4603      	mov	r3, r0
 800415c:	4a2b      	ldr	r2, [pc, #172]	; (800420c <loadMenuTexts+0x5f4>)
 800415e:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextTR);
 8004160:	482b      	ldr	r0, [pc, #172]	; (8004210 <loadMenuTexts+0x5f8>)
 8004162:	f7fc fb97 	bl	8000894 <copyText>
 8004166:	4603      	mov	r3, r0
 8004168:	4a2a      	ldr	r2, [pc, #168]	; (8004214 <loadMenuTexts+0x5fc>)
 800416a:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextTR);
 800416c:	482a      	ldr	r0, [pc, #168]	; (8004218 <loadMenuTexts+0x600>)
 800416e:	f7fc fb91 	bl	8000894 <copyText>
 8004172:	4603      	mov	r3, r0
 8004174:	4a29      	ldr	r2, [pc, #164]	; (800421c <loadMenuTexts+0x604>)
 8004176:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
		menudenCikisText = copyText(menudenCikisTextEN);
		enteraBasinizText = copyText(enteraBasinizTextEN);
		hataKoduText = copyText(hataKoduTextEN);
	}
}
 8004178:	e2d3      	b.n	8004722 <loadMenuTexts+0xb0a>
 800417a:	bf00      	nop
 800417c:	20000c48 	.word	0x20000c48
 8004180:	20000380 	.word	0x20000380
 8004184:	20000c4c 	.word	0x20000c4c
 8004188:	20000390 	.word	0x20000390
 800418c:	20000c50 	.word	0x20000c50
 8004190:	200003a0 	.word	0x200003a0
 8004194:	20000c54 	.word	0x20000c54
 8004198:	200003b0 	.word	0x200003b0
 800419c:	20000c58 	.word	0x20000c58
 80041a0:	200003c0 	.word	0x200003c0
 80041a4:	20000c5c 	.word	0x20000c5c
 80041a8:	200003d0 	.word	0x200003d0
 80041ac:	20000c60 	.word	0x20000c60
 80041b0:	200003e0 	.word	0x200003e0
 80041b4:	20000c64 	.word	0x20000c64
 80041b8:	200003f0 	.word	0x200003f0
 80041bc:	20000c68 	.word	0x20000c68
 80041c0:	20000400 	.word	0x20000400
 80041c4:	20000c6c 	.word	0x20000c6c
 80041c8:	20000410 	.word	0x20000410
 80041cc:	20000c70 	.word	0x20000c70
 80041d0:	20000420 	.word	0x20000420
 80041d4:	20000c74 	.word	0x20000c74
 80041d8:	20000430 	.word	0x20000430
 80041dc:	20000c78 	.word	0x20000c78
 80041e0:	20000440 	.word	0x20000440
 80041e4:	20000c7c 	.word	0x20000c7c
 80041e8:	20000450 	.word	0x20000450
 80041ec:	20000c88 	.word	0x20000c88
 80041f0:	20000460 	.word	0x20000460
 80041f4:	20000c8c 	.word	0x20000c8c
 80041f8:	20000470 	.word	0x20000470
 80041fc:	20000c90 	.word	0x20000c90
 8004200:	20000480 	.word	0x20000480
 8004204:	20000c94 	.word	0x20000c94
 8004208:	20000490 	.word	0x20000490
 800420c:	20000c98 	.word	0x20000c98
 8004210:	200004a0 	.word	0x200004a0
 8004214:	20000c9c 	.word	0x20000c9c
 8004218:	200004b0 	.word	0x200004b0
 800421c:	20000ca0 	.word	0x20000ca0
		menuyeGirildiText = copyText(menuyeGirildiTextEN);
 8004220:	48a9      	ldr	r0, [pc, #676]	; (80044c8 <loadMenuTexts+0x8b0>)
 8004222:	f7fc fb37 	bl	8000894 <copyText>
 8004226:	4603      	mov	r3, r0
 8004228:	4aa8      	ldr	r2, [pc, #672]	; (80044cc <loadMenuTexts+0x8b4>)
 800422a:	6013      	str	r3, [r2, #0]
		ayarlarText = copyText(ayarlarTextEN);
 800422c:	48a8      	ldr	r0, [pc, #672]	; (80044d0 <loadMenuTexts+0x8b8>)
 800422e:	f7fc fb31 	bl	8000894 <copyText>
 8004232:	4603      	mov	r3, r0
 8004234:	4aa7      	ldr	r2, [pc, #668]	; (80044d4 <loadMenuTexts+0x8bc>)
 8004236:	6013      	str	r3, [r2, #0]
		hataKayitListText = copyText(hataKayitListTextEN);
 8004238:	48a7      	ldr	r0, [pc, #668]	; (80044d8 <loadMenuTexts+0x8c0>)
 800423a:	f7fc fb2b 	bl	8000894 <copyText>
 800423e:	4603      	mov	r3, r0
 8004240:	4aa6      	ldr	r2, [pc, #664]	; (80044dc <loadMenuTexts+0x8c4>)
 8004242:	6013      	str	r3, [r2, #0]
		birHataKoduText = copyText(birHataKoduTextEN);
 8004244:	48a6      	ldr	r0, [pc, #664]	; (80044e0 <loadMenuTexts+0x8c8>)
 8004246:	f7fc fb25 	bl	8000894 <copyText>
 800424a:	4603      	mov	r3, r0
 800424c:	4aa5      	ldr	r2, [pc, #660]	; (80044e4 <loadMenuTexts+0x8cc>)
 800424e:	6013      	str	r3, [r2, #0]
		ikiHataKoduText = copyText(ikiHataKoduTextEN);
 8004250:	48a5      	ldr	r0, [pc, #660]	; (80044e8 <loadMenuTexts+0x8d0>)
 8004252:	f7fc fb1f 	bl	8000894 <copyText>
 8004256:	4603      	mov	r3, r0
 8004258:	4aa4      	ldr	r2, [pc, #656]	; (80044ec <loadMenuTexts+0x8d4>)
 800425a:	6013      	str	r3, [r2, #0]
		ucHataKoduText = copyText(ucHataKoduTextEN);
 800425c:	48a4      	ldr	r0, [pc, #656]	; (80044f0 <loadMenuTexts+0x8d8>)
 800425e:	f7fc fb19 	bl	8000894 <copyText>
 8004262:	4603      	mov	r3, r0
 8004264:	4aa3      	ldr	r2, [pc, #652]	; (80044f4 <loadMenuTexts+0x8dc>)
 8004266:	6013      	str	r3, [r2, #0]
		dortHataKoduText = copyText(dortHataKoduTextEN);
 8004268:	48a3      	ldr	r0, [pc, #652]	; (80044f8 <loadMenuTexts+0x8e0>)
 800426a:	f7fc fb13 	bl	8000894 <copyText>
 800426e:	4603      	mov	r3, r0
 8004270:	4aa2      	ldr	r2, [pc, #648]	; (80044fc <loadMenuTexts+0x8e4>)
 8004272:	6013      	str	r3, [r2, #0]
		besHataKoduText = copyText(besHataKoduTextEN);
 8004274:	48a2      	ldr	r0, [pc, #648]	; (8004500 <loadMenuTexts+0x8e8>)
 8004276:	f7fc fb0d 	bl	8000894 <copyText>
 800427a:	4603      	mov	r3, r0
 800427c:	4aa1      	ldr	r2, [pc, #644]	; (8004504 <loadMenuTexts+0x8ec>)
 800427e:	6013      	str	r3, [r2, #0]
		altiHataKoduText = copyText(altiHataKoduTextEN);
 8004280:	48a1      	ldr	r0, [pc, #644]	; (8004508 <loadMenuTexts+0x8f0>)
 8004282:	f7fc fb07 	bl	8000894 <copyText>
 8004286:	4603      	mov	r3, r0
 8004288:	4aa0      	ldr	r2, [pc, #640]	; (800450c <loadMenuTexts+0x8f4>)
 800428a:	6013      	str	r3, [r2, #0]
		yediHataKoduText = copyText(yediHataKoduTextEN);
 800428c:	48a0      	ldr	r0, [pc, #640]	; (8004510 <loadMenuTexts+0x8f8>)
 800428e:	f7fc fb01 	bl	8000894 <copyText>
 8004292:	4603      	mov	r3, r0
 8004294:	4a9f      	ldr	r2, [pc, #636]	; (8004514 <loadMenuTexts+0x8fc>)
 8004296:	6013      	str	r3, [r2, #0]
		sekizHataKoduText = copyText(sekizHataKoduTextEN);
 8004298:	489f      	ldr	r0, [pc, #636]	; (8004518 <loadMenuTexts+0x900>)
 800429a:	f7fc fafb 	bl	8000894 <copyText>
 800429e:	4603      	mov	r3, r0
 80042a0:	4a9e      	ldr	r2, [pc, #632]	; (800451c <loadMenuTexts+0x904>)
 80042a2:	6013      	str	r3, [r2, #0]
		dokuzHataKoduText = copyText(dokuzHataKoduTextEN);
 80042a4:	489e      	ldr	r0, [pc, #632]	; (8004520 <loadMenuTexts+0x908>)
 80042a6:	f7fc faf5 	bl	8000894 <copyText>
 80042aa:	4603      	mov	r3, r0
 80042ac:	4a9d      	ldr	r2, [pc, #628]	; (8004524 <loadMenuTexts+0x90c>)
 80042ae:	6013      	str	r3, [r2, #0]
		onHataKoduText = copyText(onHataKoduTextEN);
 80042b0:	489d      	ldr	r0, [pc, #628]	; (8004528 <loadMenuTexts+0x910>)
 80042b2:	f7fc faef 	bl	8000894 <copyText>
 80042b6:	4603      	mov	r3, r0
 80042b8:	4a9c      	ldr	r2, [pc, #624]	; (800452c <loadMenuTexts+0x914>)
 80042ba:	6013      	str	r3, [r2, #0]
		silmekIcinText = copyText(silmekIcinTextEN);
 80042bc:	489c      	ldr	r0, [pc, #624]	; (8004530 <loadMenuTexts+0x918>)
 80042be:	f7fc fae9 	bl	8000894 <copyText>
 80042c2:	4603      	mov	r3, r0
 80042c4:	4a9b      	ldr	r2, [pc, #620]	; (8004534 <loadMenuTexts+0x91c>)
 80042c6:	6013      	str	r3, [r2, #0]
		calismaSekliText = copyText(calismaSekliTextEN);
 80042c8:	489b      	ldr	r0, [pc, #620]	; (8004538 <loadMenuTexts+0x920>)
 80042ca:	f7fc fae3 	bl	8000894 <copyText>
 80042ce:	4603      	mov	r3, r0
 80042d0:	4a9a      	ldr	r2, [pc, #616]	; (800453c <loadMenuTexts+0x924>)
 80042d2:	6013      	str	r3, [r2, #0]
		devirmeYuruyusText = copyText(devirmeYuruyusTextEN);
 80042d4:	489a      	ldr	r0, [pc, #616]	; (8004540 <loadMenuTexts+0x928>)
 80042d6:	f7fc fadd 	bl	8000894 <copyText>
 80042da:	4603      	mov	r3, r0
 80042dc:	4a99      	ldr	r2, [pc, #612]	; (8004544 <loadMenuTexts+0x92c>)
 80042de:	6013      	str	r3, [r2, #0]
		bastikcaCalisanText = copyText(bastikcaCalisanTextEN);
 80042e0:	4899      	ldr	r0, [pc, #612]	; (8004548 <loadMenuTexts+0x930>)
 80042e2:	f7fc fad7 	bl	8000894 <copyText>
 80042e6:	4603      	mov	r3, r0
 80042e8:	4a98      	ldr	r2, [pc, #608]	; (800454c <loadMenuTexts+0x934>)
 80042ea:	6013      	str	r3, [r2, #0]
		basGonderText = copyText(basGonderTextEN);
 80042ec:	4898      	ldr	r0, [pc, #608]	; (8004550 <loadMenuTexts+0x938>)
 80042ee:	f7fc fad1 	bl	8000894 <copyText>
 80042f2:	4603      	mov	r3, r0
 80042f4:	4a97      	ldr	r2, [pc, #604]	; (8004554 <loadMenuTexts+0x93c>)
 80042f6:	6013      	str	r3, [r2, #0]
		emniyetCercevesiText = copyText(emniyetCercevesiTextEN);
 80042f8:	4897      	ldr	r0, [pc, #604]	; (8004558 <loadMenuTexts+0x940>)
 80042fa:	f7fc facb 	bl	8000894 <copyText>
 80042fe:	4603      	mov	r3, r0
 8004300:	4a96      	ldr	r2, [pc, #600]	; (800455c <loadMenuTexts+0x944>)
 8004302:	6013      	str	r3, [r2, #0]
		pasifText = copyText(pasifTextEN);
 8004304:	4896      	ldr	r0, [pc, #600]	; (8004560 <loadMenuTexts+0x948>)
 8004306:	f7fc fac5 	bl	8000894 <copyText>
 800430a:	4603      	mov	r3, r0
 800430c:	4a95      	ldr	r2, [pc, #596]	; (8004564 <loadMenuTexts+0x94c>)
 800430e:	6013      	str	r3, [r2, #0]
		aktifText = copyText(aktifTextEN);
 8004310:	4895      	ldr	r0, [pc, #596]	; (8004568 <loadMenuTexts+0x950>)
 8004312:	f7fc fabf 	bl	8000894 <copyText>
 8004316:	4603      	mov	r3, r0
 8004318:	4a94      	ldr	r2, [pc, #592]	; (800456c <loadMenuTexts+0x954>)
 800431a:	6013      	str	r3, [r2, #0]
		yavaslamaLimitText = copyText(yavaslamaLimitTextEN);
 800431c:	4894      	ldr	r0, [pc, #592]	; (8004570 <loadMenuTexts+0x958>)
 800431e:	f7fc fab9 	bl	8000894 <copyText>
 8004322:	4603      	mov	r3, r0
 8004324:	4a93      	ldr	r2, [pc, #588]	; (8004574 <loadMenuTexts+0x95c>)
 8004326:	6013      	str	r3, [r2, #0]
		altLimitText = copyText(altLimitTextEN);
 8004328:	4893      	ldr	r0, [pc, #588]	; (8004578 <loadMenuTexts+0x960>)
 800432a:	f7fc fab3 	bl	8000894 <copyText>
 800432e:	4603      	mov	r3, r0
 8004330:	4a92      	ldr	r2, [pc, #584]	; (800457c <loadMenuTexts+0x964>)
 8004332:	6013      	str	r3, [r2, #0]
		basincSalteriText = copyText(basincSalteriTextEN);
 8004334:	4892      	ldr	r0, [pc, #584]	; (8004580 <loadMenuTexts+0x968>)
 8004336:	f7fc faad 	bl	8000894 <copyText>
 800433a:	4603      	mov	r3, r0
 800433c:	4a91      	ldr	r2, [pc, #580]	; (8004584 <loadMenuTexts+0x96c>)
 800433e:	6013      	str	r3, [r2, #0]
		kapiSecimleriText = copyText(kapiSecimleriTextEN);
 8004340:	4891      	ldr	r0, [pc, #580]	; (8004588 <loadMenuTexts+0x970>)
 8004342:	f7fc faa7 	bl	8000894 <copyText>
 8004346:	4603      	mov	r3, r0
 8004348:	4a90      	ldr	r2, [pc, #576]	; (800458c <loadMenuTexts+0x974>)
 800434a:	6013      	str	r3, [r2, #0]
		katKapisiAktifText = copyText(katKapisiAktifTextEN);
 800434c:	4890      	ldr	r0, [pc, #576]	; (8004590 <loadMenuTexts+0x978>)
 800434e:	f7fc faa1 	bl	8000894 <copyText>
 8004352:	4603      	mov	r3, r0
 8004354:	4a8f      	ldr	r2, [pc, #572]	; (8004594 <loadMenuTexts+0x97c>)
 8004356:	6013      	str	r3, [r2, #0]
		tablaKapiAktifText = copyText(tablaKapiAktifTextEN);
 8004358:	488f      	ldr	r0, [pc, #572]	; (8004598 <loadMenuTexts+0x980>)
 800435a:	f7fc fa9b 	bl	8000894 <copyText>
 800435e:	4603      	mov	r3, r0
 8004360:	4a8e      	ldr	r2, [pc, #568]	; (800459c <loadMenuTexts+0x984>)
 8004362:	6013      	str	r3, [r2, #0]
		katArtiTablaAktifText = copyText(katArtiTablaAktifTextEN);
 8004364:	488e      	ldr	r0, [pc, #568]	; (80045a0 <loadMenuTexts+0x988>)
 8004366:	f7fc fa95 	bl	8000894 <copyText>
 800436a:	4603      	mov	r3, r0
 800436c:	4a8d      	ldr	r2, [pc, #564]	; (80045a4 <loadMenuTexts+0x98c>)
 800436e:	6013      	str	r3, [r2, #0]
		kapiAcmaTipiText = copyText(kapiAcmaTipiTextEN);
 8004370:	488d      	ldr	r0, [pc, #564]	; (80045a8 <loadMenuTexts+0x990>)
 8004372:	f7fc fa8f 	bl	8000894 <copyText>
 8004376:	4603      	mov	r3, r0
 8004378:	4a8c      	ldr	r2, [pc, #560]	; (80045ac <loadMenuTexts+0x994>)
 800437a:	6013      	str	r3, [r2, #0]
		kapiButonuESPText = copyText(kapiButonuESPTextEN);
 800437c:	488c      	ldr	r0, [pc, #560]	; (80045b0 <loadMenuTexts+0x998>)
 800437e:	f7fc fa89 	bl	8000894 <copyText>
 8004382:	4603      	mov	r3, r0
 8004384:	4a8b      	ldr	r2, [pc, #556]	; (80045b4 <loadMenuTexts+0x99c>)
 8004386:	6013      	str	r3, [r2, #0]
		katButonuEXTText = copyText(katButonuEXTTextEN);
 8004388:	488b      	ldr	r0, [pc, #556]	; (80045b8 <loadMenuTexts+0x9a0>)
 800438a:	f7fc fa83 	bl	8000894 <copyText>
 800438e:	4603      	mov	r3, r0
 8004390:	4a8a      	ldr	r2, [pc, #552]	; (80045bc <loadMenuTexts+0x9a4>)
 8004392:	6013      	str	r3, [r2, #0]
		birKatKapiTipiText = copyText(birKatKapiTipiTextEN);
 8004394:	488a      	ldr	r0, [pc, #552]	; (80045c0 <loadMenuTexts+0x9a8>)
 8004396:	f7fc fa7d 	bl	8000894 <copyText>
 800439a:	4603      	mov	r3, r0
 800439c:	4a89      	ldr	r2, [pc, #548]	; (80045c4 <loadMenuTexts+0x9ac>)
 800439e:	6013      	str	r3, [r2, #0]
		butonKontrolluText = copyText(butonKontrolluTextEN);
 80043a0:	4889      	ldr	r0, [pc, #548]	; (80045c8 <loadMenuTexts+0x9b0>)
 80043a2:	f7fc fa77 	bl	8000894 <copyText>
 80043a6:	4603      	mov	r3, r0
 80043a8:	4a88      	ldr	r2, [pc, #544]	; (80045cc <loadMenuTexts+0x9b4>)
 80043aa:	6013      	str	r3, [r2, #0]
		birinciKapiAcSuresiText = copyText(birinciKapiAcSuresiTextEN);
 80043ac:	4888      	ldr	r0, [pc, #544]	; (80045d0 <loadMenuTexts+0x9b8>)
 80043ae:	f7fc fa71 	bl	8000894 <copyText>
 80043b2:	4603      	mov	r3, r0
 80043b4:	4a87      	ldr	r2, [pc, #540]	; (80045d4 <loadMenuTexts+0x9bc>)
 80043b6:	6013      	str	r3, [r2, #0]
		kacSaniyeText = copyText(kacSaniyeTextEN);
 80043b8:	4887      	ldr	r0, [pc, #540]	; (80045d8 <loadMenuTexts+0x9c0>)
 80043ba:	f7fc fa6b 	bl	8000894 <copyText>
 80043be:	4603      	mov	r3, r0
 80043c0:	4a86      	ldr	r2, [pc, #536]	; (80045dc <loadMenuTexts+0x9c4>)
 80043c2:	6013      	str	r3, [r2, #0]
		ikinciKatKapiTipiText = copyText(ikinciKatKapiTipiTextEN);
 80043c4:	4886      	ldr	r0, [pc, #536]	; (80045e0 <loadMenuTexts+0x9c8>)
 80043c6:	f7fc fa65 	bl	8000894 <copyText>
 80043ca:	4603      	mov	r3, r0
 80043cc:	4a85      	ldr	r2, [pc, #532]	; (80045e4 <loadMenuTexts+0x9cc>)
 80043ce:	6013      	str	r3, [r2, #0]
		ikinciKapiAcSuresiText = copyText(ikinciKapiAcSuresiTextEN);
 80043d0:	4885      	ldr	r0, [pc, #532]	; (80045e8 <loadMenuTexts+0x9d0>)
 80043d2:	f7fc fa5f 	bl	8000894 <copyText>
 80043d6:	4603      	mov	r3, r0
 80043d8:	4a84      	ldr	r2, [pc, #528]	; (80045ec <loadMenuTexts+0x9d4>)
 80043da:	6013      	str	r3, [r2, #0]
		tablaKapiTipiText = copyText(tablaKapiTipiTextEN);
 80043dc:	4884      	ldr	r0, [pc, #528]	; (80045f0 <loadMenuTexts+0x9d8>)
 80043de:	f7fc fa59 	bl	8000894 <copyText>
 80043e2:	4603      	mov	r3, r0
 80043e4:	4a83      	ldr	r2, [pc, #524]	; (80045f4 <loadMenuTexts+0x9dc>)
 80043e6:	6013      	str	r3, [r2, #0]
		tablaKapiAcKonumText = copyText(tablaKapiAcKonumTextEN);
 80043e8:	4883      	ldr	r0, [pc, #524]	; (80045f8 <loadMenuTexts+0x9e0>)
 80043ea:	f7fc fa53 	bl	8000894 <copyText>
 80043ee:	4603      	mov	r3, r0
 80043f0:	4a82      	ldr	r2, [pc, #520]	; (80045fc <loadMenuTexts+0x9e4>)
 80043f2:	6013      	str	r3, [r2, #0]
		birinciKattaAcText = copyText(birinciKattaAcTextEN);
 80043f4:	4882      	ldr	r0, [pc, #520]	; (8004600 <loadMenuTexts+0x9e8>)
 80043f6:	f7fc fa4d 	bl	8000894 <copyText>
 80043fa:	4603      	mov	r3, r0
 80043fc:	4a81      	ldr	r2, [pc, #516]	; (8004604 <loadMenuTexts+0x9ec>)
 80043fe:	6013      	str	r3, [r2, #0]
		ikinciKattaAcText = copyText(ikinciKattaAcTextEN);
 8004400:	4881      	ldr	r0, [pc, #516]	; (8004608 <loadMenuTexts+0x9f0>)
 8004402:	f7fc fa47 	bl	8000894 <copyText>
 8004406:	4603      	mov	r3, r0
 8004408:	4a80      	ldr	r2, [pc, #512]	; (800460c <loadMenuTexts+0x9f4>)
 800440a:	6013      	str	r3, [r2, #0]
		birVeIkinciKattaAcText = copyText(birVeIkinciKattaAcTextEN);
 800440c:	4880      	ldr	r0, [pc, #512]	; (8004610 <loadMenuTexts+0x9f8>)
 800440e:	f7fc fa41 	bl	8000894 <copyText>
 8004412:	4603      	mov	r3, r0
 8004414:	4a7f      	ldr	r2, [pc, #508]	; (8004614 <loadMenuTexts+0x9fc>)
 8004416:	6013      	str	r3, [r2, #0]
		tablaKapiAcSureText = copyText(tablaKapiAcSureTextEN);
 8004418:	487f      	ldr	r0, [pc, #508]	; (8004618 <loadMenuTexts+0xa00>)
 800441a:	f7fc fa3b 	bl	8000894 <copyText>
 800441e:	4603      	mov	r3, r0
 8004420:	4a7e      	ldr	r2, [pc, #504]	; (800461c <loadMenuTexts+0xa04>)
 8004422:	6013      	str	r3, [r2, #0]
		yukariYavaslamaLimitiText = copyText(yukariYavaslamaLimitiTextEN);
 8004424:	487e      	ldr	r0, [pc, #504]	; (8004620 <loadMenuTexts+0xa08>)
 8004426:	f7fc fa35 	bl	8000894 <copyText>
 800442a:	4603      	mov	r3, r0
 800442c:	4a7d      	ldr	r2, [pc, #500]	; (8004624 <loadMenuTexts+0xa0c>)
 800442e:	6013      	str	r3, [r2, #0]
		devirmeYuruyusMenuText = copyText(devirmeYuruyusMenuTextEN);
 8004430:	487d      	ldr	r0, [pc, #500]	; (8004628 <loadMenuTexts+0xa10>)
 8004432:	f7fc fa2f 	bl	8000894 <copyText>
 8004436:	4603      	mov	r3, r0
 8004438:	4a7c      	ldr	r2, [pc, #496]	; (800462c <loadMenuTexts+0xa14>)
 800443a:	6013      	str	r3, [r2, #0]
		devirmeAktifText = copyText(devirmeAktifTextEN);
 800443c:	487c      	ldr	r0, [pc, #496]	; (8004630 <loadMenuTexts+0xa18>)
 800443e:	f7fc fa29 	bl	8000894 <copyText>
 8004442:	4603      	mov	r3, r0
 8004444:	4a7b      	ldr	r2, [pc, #492]	; (8004634 <loadMenuTexts+0xa1c>)
 8004446:	6013      	str	r3, [r2, #0]
		yuruyusAktifText = copyText(yuruyusAktifTextEN);
 8004448:	487b      	ldr	r0, [pc, #492]	; (8004638 <loadMenuTexts+0xa20>)
 800444a:	f7fc fa23 	bl	8000894 <copyText>
 800444e:	4603      	mov	r3, r0
 8004450:	4a7a      	ldr	r2, [pc, #488]	; (800463c <loadMenuTexts+0xa24>)
 8004452:	6013      	str	r3, [r2, #0]
		devirmeYukariText = copyText(devirmeYukariTextEN);
 8004454:	487a      	ldr	r0, [pc, #488]	; (8004640 <loadMenuTexts+0xa28>)
 8004456:	f7fc fa1d 	bl	8000894 <copyText>
 800445a:	4603      	mov	r3, r0
 800445c:	4a79      	ldr	r2, [pc, #484]	; (8004644 <loadMenuTexts+0xa2c>)
 800445e:	6013      	str	r3, [r2, #0]
		yuruyusIleriText = copyText(yuruyusIleriTextEN);
 8004460:	4879      	ldr	r0, [pc, #484]	; (8004648 <loadMenuTexts+0xa30>)
 8004462:	f7fc fa17 	bl	8000894 <copyText>
 8004466:	4603      	mov	r3, r0
 8004468:	4a78      	ldr	r2, [pc, #480]	; (800464c <loadMenuTexts+0xa34>)
 800446a:	6013      	str	r3, [r2, #0]
		devirmeAsagiSivicText = copyText(devirmeAsagiSivicTextEN);
 800446c:	4878      	ldr	r0, [pc, #480]	; (8004650 <loadMenuTexts+0xa38>)
 800446e:	f7fc fa11 	bl	8000894 <copyText>
 8004472:	4603      	mov	r3, r0
 8004474:	4a77      	ldr	r2, [pc, #476]	; (8004654 <loadMenuTexts+0xa3c>)
 8004476:	6013      	str	r3, [r2, #0]
		yuruyusGeriSivicText = copyText(yuruyusGeriSivicTextEN);
 8004478:	4877      	ldr	r0, [pc, #476]	; (8004658 <loadMenuTexts+0xa40>)
 800447a:	f7fc fa0b 	bl	8000894 <copyText>
 800447e:	4603      	mov	r3, r0
 8004480:	4a76      	ldr	r2, [pc, #472]	; (800465c <loadMenuTexts+0xa44>)
 8004482:	6013      	str	r3, [r2, #0]
		yuruyusSecildiText = copyText(yuruyusSecildiTextEN);
 8004484:	4876      	ldr	r0, [pc, #472]	; (8004660 <loadMenuTexts+0xa48>)
 8004486:	f7fc fa05 	bl	8000894 <copyText>
 800448a:	4603      	mov	r3, r0
 800448c:	4a75      	ldr	r2, [pc, #468]	; (8004664 <loadMenuTexts+0xa4c>)
 800448e:	6013      	str	r3, [r2, #0]
		devirmeSilindirTipiText = copyText(devirmeSilindirTipiTextEN);
 8004490:	4875      	ldr	r0, [pc, #468]	; (8004668 <loadMenuTexts+0xa50>)
 8004492:	f7fc f9ff 	bl	8000894 <copyText>
 8004496:	4603      	mov	r3, r0
 8004498:	4a74      	ldr	r2, [pc, #464]	; (800466c <loadMenuTexts+0xa54>)
 800449a:	6013      	str	r3, [r2, #0]
		tekTesirText = copyText(tekTesirTextEN);
 800449c:	4874      	ldr	r0, [pc, #464]	; (8004670 <loadMenuTexts+0xa58>)
 800449e:	f7fc f9f9 	bl	8000894 <copyText>
 80044a2:	4603      	mov	r3, r0
 80044a4:	4a73      	ldr	r2, [pc, #460]	; (8004674 <loadMenuTexts+0xa5c>)
 80044a6:	6013      	str	r3, [r2, #0]
		ciftTesirText = copyText(ciftTesirTextEN);
 80044a8:	4873      	ldr	r0, [pc, #460]	; (8004678 <loadMenuTexts+0xa60>)
 80044aa:	f7fc f9f3 	bl	8000894 <copyText>
 80044ae:	4603      	mov	r3, r0
 80044b0:	4a72      	ldr	r2, [pc, #456]	; (800467c <loadMenuTexts+0xa64>)
 80044b2:	6013      	str	r3, [r2, #0]
		platformSilindirTipiText = copyText(platformSilindirTipiTextEN);
 80044b4:	4872      	ldr	r0, [pc, #456]	; (8004680 <loadMenuTexts+0xa68>)
 80044b6:	f7fc f9ed 	bl	8000894 <copyText>
 80044ba:	4603      	mov	r3, r0
 80044bc:	4a71      	ldr	r2, [pc, #452]	; (8004684 <loadMenuTexts+0xa6c>)
 80044be:	6013      	str	r3, [r2, #0]
		asagiValfSureText = copyText(asagiValfSureTextEN);
 80044c0:	4871      	ldr	r0, [pc, #452]	; (8004688 <loadMenuTexts+0xa70>)
 80044c2:	f7fc f9e7 	bl	8000894 <copyText>
 80044c6:	e0e1      	b.n	800468c <loadMenuTexts+0xa74>
 80044c8:	200004c0 	.word	0x200004c0
 80044cc:	20000b7c 	.word	0x20000b7c
 80044d0:	200004d0 	.word	0x200004d0
 80044d4:	20000b80 	.word	0x20000b80
 80044d8:	200004e0 	.word	0x200004e0
 80044dc:	20000b84 	.word	0x20000b84
 80044e0:	200004f0 	.word	0x200004f0
 80044e4:	20000b88 	.word	0x20000b88
 80044e8:	20000500 	.word	0x20000500
 80044ec:	20000b8c 	.word	0x20000b8c
 80044f0:	20000510 	.word	0x20000510
 80044f4:	20000b90 	.word	0x20000b90
 80044f8:	20000520 	.word	0x20000520
 80044fc:	20000b94 	.word	0x20000b94
 8004500:	20000530 	.word	0x20000530
 8004504:	20000b98 	.word	0x20000b98
 8004508:	20000540 	.word	0x20000540
 800450c:	20000b9c 	.word	0x20000b9c
 8004510:	20000550 	.word	0x20000550
 8004514:	20000ba0 	.word	0x20000ba0
 8004518:	20000560 	.word	0x20000560
 800451c:	20000ba4 	.word	0x20000ba4
 8004520:	20000570 	.word	0x20000570
 8004524:	20000ba8 	.word	0x20000ba8
 8004528:	20000580 	.word	0x20000580
 800452c:	20000bac 	.word	0x20000bac
 8004530:	20000590 	.word	0x20000590
 8004534:	20000bb0 	.word	0x20000bb0
 8004538:	200005a0 	.word	0x200005a0
 800453c:	20000bb4 	.word	0x20000bb4
 8004540:	200005b0 	.word	0x200005b0
 8004544:	20000bb8 	.word	0x20000bb8
 8004548:	200005c0 	.word	0x200005c0
 800454c:	20000bbc 	.word	0x20000bbc
 8004550:	200005d0 	.word	0x200005d0
 8004554:	20000bc0 	.word	0x20000bc0
 8004558:	200005e0 	.word	0x200005e0
 800455c:	20000bc4 	.word	0x20000bc4
 8004560:	200005f0 	.word	0x200005f0
 8004564:	20000bc8 	.word	0x20000bc8
 8004568:	20000600 	.word	0x20000600
 800456c:	20000bcc 	.word	0x20000bcc
 8004570:	20000610 	.word	0x20000610
 8004574:	20000bd4 	.word	0x20000bd4
 8004578:	20000620 	.word	0x20000620
 800457c:	20000bd8 	.word	0x20000bd8
 8004580:	20000630 	.word	0x20000630
 8004584:	20000bdc 	.word	0x20000bdc
 8004588:	20000640 	.word	0x20000640
 800458c:	20000be0 	.word	0x20000be0
 8004590:	20000650 	.word	0x20000650
 8004594:	20000be4 	.word	0x20000be4
 8004598:	20000660 	.word	0x20000660
 800459c:	20000be8 	.word	0x20000be8
 80045a0:	20000670 	.word	0x20000670
 80045a4:	20000bec 	.word	0x20000bec
 80045a8:	20000680 	.word	0x20000680
 80045ac:	20000bf0 	.word	0x20000bf0
 80045b0:	20000690 	.word	0x20000690
 80045b4:	20000bf4 	.word	0x20000bf4
 80045b8:	200006a0 	.word	0x200006a0
 80045bc:	20000bf8 	.word	0x20000bf8
 80045c0:	200006b0 	.word	0x200006b0
 80045c4:	20000bfc 	.word	0x20000bfc
 80045c8:	200006c0 	.word	0x200006c0
 80045cc:	20000c04 	.word	0x20000c04
 80045d0:	200006d0 	.word	0x200006d0
 80045d4:	20000c0c 	.word	0x20000c0c
 80045d8:	200006e0 	.word	0x200006e0
 80045dc:	20000c10 	.word	0x20000c10
 80045e0:	200006f0 	.word	0x200006f0
 80045e4:	20000c14 	.word	0x20000c14
 80045e8:	20000700 	.word	0x20000700
 80045ec:	20000c18 	.word	0x20000c18
 80045f0:	20000710 	.word	0x20000710
 80045f4:	20000c1c 	.word	0x20000c1c
 80045f8:	20000720 	.word	0x20000720
 80045fc:	20000c20 	.word	0x20000c20
 8004600:	20000730 	.word	0x20000730
 8004604:	20000c24 	.word	0x20000c24
 8004608:	20000740 	.word	0x20000740
 800460c:	20000c28 	.word	0x20000c28
 8004610:	20000750 	.word	0x20000750
 8004614:	20000c2c 	.word	0x20000c2c
 8004618:	20000760 	.word	0x20000760
 800461c:	20000c30 	.word	0x20000c30
 8004620:	20000770 	.word	0x20000770
 8004624:	20000c34 	.word	0x20000c34
 8004628:	20000780 	.word	0x20000780
 800462c:	20000c38 	.word	0x20000c38
 8004630:	20000790 	.word	0x20000790
 8004634:	20000c3c 	.word	0x20000c3c
 8004638:	200007a0 	.word	0x200007a0
 800463c:	20000c40 	.word	0x20000c40
 8004640:	200007b0 	.word	0x200007b0
 8004644:	20000c44 	.word	0x20000c44
 8004648:	200007c0 	.word	0x200007c0
 800464c:	20000c48 	.word	0x20000c48
 8004650:	200007d0 	.word	0x200007d0
 8004654:	20000c4c 	.word	0x20000c4c
 8004658:	200007e0 	.word	0x200007e0
 800465c:	20000c50 	.word	0x20000c50
 8004660:	200007f0 	.word	0x200007f0
 8004664:	20000c54 	.word	0x20000c54
 8004668:	20000800 	.word	0x20000800
 800466c:	20000c58 	.word	0x20000c58
 8004670:	20000810 	.word	0x20000810
 8004674:	20000c5c 	.word	0x20000c5c
 8004678:	20000820 	.word	0x20000820
 800467c:	20000c60 	.word	0x20000c60
 8004680:	20000830 	.word	0x20000830
 8004684:	20000c64 	.word	0x20000c64
 8004688:	20000840 	.word	0x20000840
 800468c:	4603      	mov	r3, r0
 800468e:	4a27      	ldr	r2, [pc, #156]	; (800472c <loadMenuTexts+0xb14>)
 8004690:	6013      	str	r3, [r2, #0]
		devirmeYukariValfSureText = copyText(devirmeYukariValfSureTextEN);
 8004692:	4827      	ldr	r0, [pc, #156]	; (8004730 <loadMenuTexts+0xb18>)
 8004694:	f7fc f8fe 	bl	8000894 <copyText>
 8004698:	4603      	mov	r3, r0
 800469a:	4a26      	ldr	r2, [pc, #152]	; (8004734 <loadMenuTexts+0xb1c>)
 800469c:	6013      	str	r3, [r2, #0]
		ileriValfSureText = copyText(ileriValfSureTextEN);
 800469e:	4826      	ldr	r0, [pc, #152]	; (8004738 <loadMenuTexts+0xb20>)
 80046a0:	f7fc f8f8 	bl	8000894 <copyText>
 80046a4:	4603      	mov	r3, r0
 80046a6:	4a25      	ldr	r2, [pc, #148]	; (800473c <loadMenuTexts+0xb24>)
 80046a8:	6013      	str	r3, [r2, #0]
		devirmeAsagiValfSureText = copyText(devirmeAsagiValfSureTextEN);
 80046aa:	4825      	ldr	r0, [pc, #148]	; (8004740 <loadMenuTexts+0xb28>)
 80046ac:	f7fc f8f2 	bl	8000894 <copyText>
 80046b0:	4603      	mov	r3, r0
 80046b2:	4a24      	ldr	r2, [pc, #144]	; (8004744 <loadMenuTexts+0xb2c>)
 80046b4:	6013      	str	r3, [r2, #0]
		geriValfSureText = copyText(geriValfSureTextEN);
 80046b6:	4824      	ldr	r0, [pc, #144]	; (8004748 <loadMenuTexts+0xb30>)
 80046b8:	f7fc f8ec 	bl	8000894 <copyText>
 80046bc:	4603      	mov	r3, r0
 80046be:	4a23      	ldr	r2, [pc, #140]	; (800474c <loadMenuTexts+0xb34>)
 80046c0:	6013      	str	r3, [r2, #0]
		calismaSuresiText = copyText(calismaSuresiTextEN);
 80046c2:	4823      	ldr	r0, [pc, #140]	; (8004750 <loadMenuTexts+0xb38>)
 80046c4:	f7fc f8e6 	bl	8000894 <copyText>
 80046c8:	4603      	mov	r3, r0
 80046ca:	4a22      	ldr	r2, [pc, #136]	; (8004754 <loadMenuTexts+0xb3c>)
 80046cc:	6013      	str	r3, [r2, #0]
		calismaSayisiText = copyText(calismaSayisiTextEN);
 80046ce:	4822      	ldr	r0, [pc, #136]	; (8004758 <loadMenuTexts+0xb40>)
 80046d0:	f7fc f8e0 	bl	8000894 <copyText>
 80046d4:	4603      	mov	r3, r0
 80046d6:	4a21      	ldr	r2, [pc, #132]	; (800475c <loadMenuTexts+0xb44>)
 80046d8:	6013      	str	r3, [r2, #0]
		enterlaSifirlaText = copyText(enterlaSifirlaTextEN);
 80046da:	4821      	ldr	r0, [pc, #132]	; (8004760 <loadMenuTexts+0xb48>)
 80046dc:	f7fc f8da 	bl	8000894 <copyText>
 80046e0:	4603      	mov	r3, r0
 80046e2:	4a20      	ldr	r2, [pc, #128]	; (8004764 <loadMenuTexts+0xb4c>)
 80046e4:	6013      	str	r3, [r2, #0]
		dilSecimText = copyText(dilSecimTextEN);
 80046e6:	4820      	ldr	r0, [pc, #128]	; (8004768 <loadMenuTexts+0xb50>)
 80046e8:	f7fc f8d4 	bl	8000894 <copyText>
 80046ec:	4603      	mov	r3, r0
 80046ee:	4a1f      	ldr	r2, [pc, #124]	; (800476c <loadMenuTexts+0xb54>)
 80046f0:	6013      	str	r3, [r2, #0]
		secilenDilText = copyText(secilenDilTextEN);
 80046f2:	481f      	ldr	r0, [pc, #124]	; (8004770 <loadMenuTexts+0xb58>)
 80046f4:	f7fc f8ce 	bl	8000894 <copyText>
 80046f8:	4603      	mov	r3, r0
 80046fa:	4a1e      	ldr	r2, [pc, #120]	; (8004774 <loadMenuTexts+0xb5c>)
 80046fc:	6013      	str	r3, [r2, #0]
		menudenCikisText = copyText(menudenCikisTextEN);
 80046fe:	481e      	ldr	r0, [pc, #120]	; (8004778 <loadMenuTexts+0xb60>)
 8004700:	f7fc f8c8 	bl	8000894 <copyText>
 8004704:	4603      	mov	r3, r0
 8004706:	4a1d      	ldr	r2, [pc, #116]	; (800477c <loadMenuTexts+0xb64>)
 8004708:	6013      	str	r3, [r2, #0]
		enteraBasinizText = copyText(enteraBasinizTextEN);
 800470a:	481d      	ldr	r0, [pc, #116]	; (8004780 <loadMenuTexts+0xb68>)
 800470c:	f7fc f8c2 	bl	8000894 <copyText>
 8004710:	4603      	mov	r3, r0
 8004712:	4a1c      	ldr	r2, [pc, #112]	; (8004784 <loadMenuTexts+0xb6c>)
 8004714:	6013      	str	r3, [r2, #0]
		hataKoduText = copyText(hataKoduTextEN);
 8004716:	481c      	ldr	r0, [pc, #112]	; (8004788 <loadMenuTexts+0xb70>)
 8004718:	f7fc f8bc 	bl	8000894 <copyText>
 800471c:	4603      	mov	r3, r0
 800471e:	4a1b      	ldr	r2, [pc, #108]	; (800478c <loadMenuTexts+0xb74>)
 8004720:	6013      	str	r3, [r2, #0]
}
 8004722:	bf00      	nop
 8004724:	3708      	adds	r7, #8
 8004726:	46bd      	mov	sp, r7
 8004728:	bd80      	pop	{r7, pc}
 800472a:	bf00      	nop
 800472c:	20000c68 	.word	0x20000c68
 8004730:	20000850 	.word	0x20000850
 8004734:	20000c6c 	.word	0x20000c6c
 8004738:	20000860 	.word	0x20000860
 800473c:	20000c70 	.word	0x20000c70
 8004740:	20000870 	.word	0x20000870
 8004744:	20000c74 	.word	0x20000c74
 8004748:	20000880 	.word	0x20000880
 800474c:	20000c78 	.word	0x20000c78
 8004750:	20000890 	.word	0x20000890
 8004754:	20000c7c 	.word	0x20000c7c
 8004758:	200008a0 	.word	0x200008a0
 800475c:	20000c88 	.word	0x20000c88
 8004760:	200008b0 	.word	0x200008b0
 8004764:	20000c8c 	.word	0x20000c8c
 8004768:	200008c0 	.word	0x200008c0
 800476c:	20000c90 	.word	0x20000c90
 8004770:	200008d0 	.word	0x200008d0
 8004774:	20000c94 	.word	0x20000c94
 8004778:	200008e0 	.word	0x200008e0
 800477c:	20000c98 	.word	0x20000c98
 8004780:	200008f0 	.word	0x200008f0
 8004784:	20000c9c 	.word	0x20000c9c
 8004788:	20000900 	.word	0x20000900
 800478c:	20000ca0 	.word	0x20000ca0

08004790 <lcdUpdate>:
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

//Tüm fonksiyonlar:

void lcdUpdate(uint8_t y) {
 8004790:	b580      	push	{r7, lr}
 8004792:	b082      	sub	sp, #8
 8004794:	af00      	add	r7, sp, #0
 8004796:	4603      	mov	r3, r0
 8004798:	71fb      	strb	r3, [r7, #7]
	if(y==1) {
 800479a:	79fb      	ldrb	r3, [r7, #7]
 800479c:	2b01      	cmp	r3, #1
 800479e:	d105      	bne.n	80047ac <lcdUpdate+0x1c>
		lcd_print(2, 1, " ");
 80047a0:	4a22      	ldr	r2, [pc, #136]	; (800482c <lcdUpdate+0x9c>)
 80047a2:	2101      	movs	r1, #1
 80047a4:	2002      	movs	r0, #2
 80047a6:	f7fc f82e 	bl	8000806 <lcd_print>
	} else if (y==7) {
		lcd_clear();
		lcd_print(1, 1, "    ESP-RMK     ");
		lcd_print(2, 1, "      RUN       ");
	}
}
 80047aa:	e03b      	b.n	8004824 <lcdUpdate+0x94>
	} else if(y==2) {
 80047ac:	79fb      	ldrb	r3, [r7, #7]
 80047ae:	2b02      	cmp	r3, #2
 80047b0:	d105      	bne.n	80047be <lcdUpdate+0x2e>
		lcd_print(2, 2, " ");
 80047b2:	4a1e      	ldr	r2, [pc, #120]	; (800482c <lcdUpdate+0x9c>)
 80047b4:	2102      	movs	r1, #2
 80047b6:	2002      	movs	r0, #2
 80047b8:	f7fc f825 	bl	8000806 <lcd_print>
}
 80047bc:	e032      	b.n	8004824 <lcdUpdate+0x94>
	} else if(y==3) {
 80047be:	79fb      	ldrb	r3, [r7, #7]
 80047c0:	2b03      	cmp	r3, #3
 80047c2:	d105      	bne.n	80047d0 <lcdUpdate+0x40>
		lcd_print(2, 3, " ");
 80047c4:	4a19      	ldr	r2, [pc, #100]	; (800482c <lcdUpdate+0x9c>)
 80047c6:	2103      	movs	r1, #3
 80047c8:	2002      	movs	r0, #2
 80047ca:	f7fc f81c 	bl	8000806 <lcd_print>
}
 80047ce:	e029      	b.n	8004824 <lcdUpdate+0x94>
	} else if(y==4) {
 80047d0:	79fb      	ldrb	r3, [r7, #7]
 80047d2:	2b04      	cmp	r3, #4
 80047d4:	d105      	bne.n	80047e2 <lcdUpdate+0x52>
		lcd_print(2, 4, " ");
 80047d6:	4a15      	ldr	r2, [pc, #84]	; (800482c <lcdUpdate+0x9c>)
 80047d8:	2104      	movs	r1, #4
 80047da:	2002      	movs	r0, #2
 80047dc:	f7fc f813 	bl	8000806 <lcd_print>
}
 80047e0:	e020      	b.n	8004824 <lcdUpdate+0x94>
	} else if(y==5) {
 80047e2:	79fb      	ldrb	r3, [r7, #7]
 80047e4:	2b05      	cmp	r3, #5
 80047e6:	d105      	bne.n	80047f4 <lcdUpdate+0x64>
		lcd_print(2, 5, " ");
 80047e8:	4a10      	ldr	r2, [pc, #64]	; (800482c <lcdUpdate+0x9c>)
 80047ea:	2105      	movs	r1, #5
 80047ec:	2002      	movs	r0, #2
 80047ee:	f7fc f80a 	bl	8000806 <lcd_print>
}
 80047f2:	e017      	b.n	8004824 <lcdUpdate+0x94>
	} else if(y==6) {
 80047f4:	79fb      	ldrb	r3, [r7, #7]
 80047f6:	2b06      	cmp	r3, #6
 80047f8:	d105      	bne.n	8004806 <lcdUpdate+0x76>
		lcd_print(2, 6, " ");
 80047fa:	4a0c      	ldr	r2, [pc, #48]	; (800482c <lcdUpdate+0x9c>)
 80047fc:	2106      	movs	r1, #6
 80047fe:	2002      	movs	r0, #2
 8004800:	f7fc f801 	bl	8000806 <lcd_print>
}
 8004804:	e00e      	b.n	8004824 <lcdUpdate+0x94>
	} else if (y==7) {
 8004806:	79fb      	ldrb	r3, [r7, #7]
 8004808:	2b07      	cmp	r3, #7
 800480a:	d10b      	bne.n	8004824 <lcdUpdate+0x94>
		lcd_clear();
 800480c:	f7fc f810 	bl	8000830 <lcd_clear>
		lcd_print(1, 1, "    ESP-RMK     ");
 8004810:	4a07      	ldr	r2, [pc, #28]	; (8004830 <lcdUpdate+0xa0>)
 8004812:	2101      	movs	r1, #1
 8004814:	2001      	movs	r0, #1
 8004816:	f7fb fff6 	bl	8000806 <lcd_print>
		lcd_print(2, 1, "      RUN       ");
 800481a:	4a06      	ldr	r2, [pc, #24]	; (8004834 <lcdUpdate+0xa4>)
 800481c:	2101      	movs	r1, #1
 800481e:	2002      	movs	r0, #2
 8004820:	f7fb fff1 	bl	8000806 <lcd_print>
}
 8004824:	bf00      	nop
 8004826:	3708      	adds	r7, #8
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	0800c5a0 	.word	0x0800c5a0
 8004830:	0800ce7c 	.word	0x0800ce7c
 8004834:	0800ce90 	.word	0x0800ce90

08004838 <hataKoduLcdGoster>:

void hataKoduLcdGoster(uint8_t x) {
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	4603      	mov	r3, r0
 8004840:	71fb      	strb	r3, [r7, #7]
	if(x==1) {
 8004842:	79fb      	ldrb	r3, [r7, #7]
 8004844:	2b01      	cmp	r3, #1
 8004846:	d11d      	bne.n	8004884 <hataKoduLcdGoster+0x4c>
		if(dilSecim==0) {
 8004848:	4b62      	ldr	r3, [pc, #392]	; (80049d4 <hataKoduLcdGoster+0x19c>)
 800484a:	781b      	ldrb	r3, [r3, #0]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d105      	bne.n	800485c <hataKoduLcdGoster+0x24>
			lcd_print(1, 1, "   HATA KODU    ");
 8004850:	4a61      	ldr	r2, [pc, #388]	; (80049d8 <hataKoduLcdGoster+0x1a0>)
 8004852:	2101      	movs	r1, #1
 8004854:	2001      	movs	r0, #1
 8004856:	f7fb ffd6 	bl	8000806 <lcd_print>
 800485a:	e008      	b.n	800486e <hataKoduLcdGoster+0x36>
		} else if(dilSecim==1) {
 800485c:	4b5d      	ldr	r3, [pc, #372]	; (80049d4 <hataKoduLcdGoster+0x19c>)
 800485e:	781b      	ldrb	r3, [r3, #0]
 8004860:	2b01      	cmp	r3, #1
 8004862:	d104      	bne.n	800486e <hataKoduLcdGoster+0x36>
			lcd_print(1, 1, "   ERROR CODE   ");
 8004864:	4a5d      	ldr	r2, [pc, #372]	; (80049dc <hataKoduLcdGoster+0x1a4>)
 8004866:	2101      	movs	r1, #1
 8004868:	2001      	movs	r0, #1
 800486a:	f7fb ffcc 	bl	8000806 <lcd_print>
		}
		lcd_print(2, 1, "1");
 800486e:	4a5c      	ldr	r2, [pc, #368]	; (80049e0 <hataKoduLcdGoster+0x1a8>)
 8004870:	2101      	movs	r1, #1
 8004872:	2002      	movs	r0, #2
 8004874:	f7fb ffc7 	bl	8000806 <lcd_print>
		lcd_print(2, 7, "          ");
 8004878:	4a5a      	ldr	r2, [pc, #360]	; (80049e4 <hataKoduLcdGoster+0x1ac>)
 800487a:	2107      	movs	r1, #7
 800487c:	2002      	movs	r0, #2
 800487e:	f7fb ffc2 	bl	8000806 <lcd_print>
			lcd_print(1, 1, "   ERROR CODE   ");
		}
		lcd_print(2, 6, "6");
		lcd_print(2, 7, "          ");
	}
}
 8004882:	e0a3      	b.n	80049cc <hataKoduLcdGoster+0x194>
	} else if(x==2){
 8004884:	79fb      	ldrb	r3, [r7, #7]
 8004886:	2b02      	cmp	r3, #2
 8004888:	d11d      	bne.n	80048c6 <hataKoduLcdGoster+0x8e>
		if(dilSecim==0){
 800488a:	4b52      	ldr	r3, [pc, #328]	; (80049d4 <hataKoduLcdGoster+0x19c>)
 800488c:	781b      	ldrb	r3, [r3, #0]
 800488e:	2b00      	cmp	r3, #0
 8004890:	d105      	bne.n	800489e <hataKoduLcdGoster+0x66>
			lcd_print(1, 1, "   HATA KODU    ");
 8004892:	4a51      	ldr	r2, [pc, #324]	; (80049d8 <hataKoduLcdGoster+0x1a0>)
 8004894:	2101      	movs	r1, #1
 8004896:	2001      	movs	r0, #1
 8004898:	f7fb ffb5 	bl	8000806 <lcd_print>
 800489c:	e008      	b.n	80048b0 <hataKoduLcdGoster+0x78>
		} else if(dilSecim==1) {
 800489e:	4b4d      	ldr	r3, [pc, #308]	; (80049d4 <hataKoduLcdGoster+0x19c>)
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d104      	bne.n	80048b0 <hataKoduLcdGoster+0x78>
			lcd_print(1, 1, "   ERROR CODE   ");
 80048a6:	4a4d      	ldr	r2, [pc, #308]	; (80049dc <hataKoduLcdGoster+0x1a4>)
 80048a8:	2101      	movs	r1, #1
 80048aa:	2001      	movs	r0, #1
 80048ac:	f7fb ffab 	bl	8000806 <lcd_print>
		lcd_print(2, 2, "2");
 80048b0:	4a4d      	ldr	r2, [pc, #308]	; (80049e8 <hataKoduLcdGoster+0x1b0>)
 80048b2:	2102      	movs	r1, #2
 80048b4:	2002      	movs	r0, #2
 80048b6:	f7fb ffa6 	bl	8000806 <lcd_print>
		lcd_print(2, 7, "          ");
 80048ba:	4a4a      	ldr	r2, [pc, #296]	; (80049e4 <hataKoduLcdGoster+0x1ac>)
 80048bc:	2107      	movs	r1, #7
 80048be:	2002      	movs	r0, #2
 80048c0:	f7fb ffa1 	bl	8000806 <lcd_print>
}
 80048c4:	e082      	b.n	80049cc <hataKoduLcdGoster+0x194>
	} else if(x==3) {
 80048c6:	79fb      	ldrb	r3, [r7, #7]
 80048c8:	2b03      	cmp	r3, #3
 80048ca:	d11d      	bne.n	8004908 <hataKoduLcdGoster+0xd0>
		if(dilSecim==0) {
 80048cc:	4b41      	ldr	r3, [pc, #260]	; (80049d4 <hataKoduLcdGoster+0x19c>)
 80048ce:	781b      	ldrb	r3, [r3, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d105      	bne.n	80048e0 <hataKoduLcdGoster+0xa8>
			lcd_print(1, 1, "   HATA KODU    ");
 80048d4:	4a40      	ldr	r2, [pc, #256]	; (80049d8 <hataKoduLcdGoster+0x1a0>)
 80048d6:	2101      	movs	r1, #1
 80048d8:	2001      	movs	r0, #1
 80048da:	f7fb ff94 	bl	8000806 <lcd_print>
 80048de:	e008      	b.n	80048f2 <hataKoduLcdGoster+0xba>
		} else if(dilSecim==1) {
 80048e0:	4b3c      	ldr	r3, [pc, #240]	; (80049d4 <hataKoduLcdGoster+0x19c>)
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d104      	bne.n	80048f2 <hataKoduLcdGoster+0xba>
			lcd_print(1, 1, "   ERROR CODE   ");
 80048e8:	4a3c      	ldr	r2, [pc, #240]	; (80049dc <hataKoduLcdGoster+0x1a4>)
 80048ea:	2101      	movs	r1, #1
 80048ec:	2001      	movs	r0, #1
 80048ee:	f7fb ff8a 	bl	8000806 <lcd_print>
		lcd_print(2, 3, "3");
 80048f2:	4a3e      	ldr	r2, [pc, #248]	; (80049ec <hataKoduLcdGoster+0x1b4>)
 80048f4:	2103      	movs	r1, #3
 80048f6:	2002      	movs	r0, #2
 80048f8:	f7fb ff85 	bl	8000806 <lcd_print>
		lcd_print(2, 7, "          ");
 80048fc:	4a39      	ldr	r2, [pc, #228]	; (80049e4 <hataKoduLcdGoster+0x1ac>)
 80048fe:	2107      	movs	r1, #7
 8004900:	2002      	movs	r0, #2
 8004902:	f7fb ff80 	bl	8000806 <lcd_print>
}
 8004906:	e061      	b.n	80049cc <hataKoduLcdGoster+0x194>
	} else if(x==4){
 8004908:	79fb      	ldrb	r3, [r7, #7]
 800490a:	2b04      	cmp	r3, #4
 800490c:	d11d      	bne.n	800494a <hataKoduLcdGoster+0x112>
		if(dilSecim==0) {
 800490e:	4b31      	ldr	r3, [pc, #196]	; (80049d4 <hataKoduLcdGoster+0x19c>)
 8004910:	781b      	ldrb	r3, [r3, #0]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d105      	bne.n	8004922 <hataKoduLcdGoster+0xea>
			lcd_print(1, 1, "   HATA KODU    ");
 8004916:	4a30      	ldr	r2, [pc, #192]	; (80049d8 <hataKoduLcdGoster+0x1a0>)
 8004918:	2101      	movs	r1, #1
 800491a:	2001      	movs	r0, #1
 800491c:	f7fb ff73 	bl	8000806 <lcd_print>
 8004920:	e008      	b.n	8004934 <hataKoduLcdGoster+0xfc>
		} else if(dilSecim==1) {
 8004922:	4b2c      	ldr	r3, [pc, #176]	; (80049d4 <hataKoduLcdGoster+0x19c>)
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	2b01      	cmp	r3, #1
 8004928:	d104      	bne.n	8004934 <hataKoduLcdGoster+0xfc>
			lcd_print(1, 1, "   ERROR CODE   ");
 800492a:	4a2c      	ldr	r2, [pc, #176]	; (80049dc <hataKoduLcdGoster+0x1a4>)
 800492c:	2101      	movs	r1, #1
 800492e:	2001      	movs	r0, #1
 8004930:	f7fb ff69 	bl	8000806 <lcd_print>
		lcd_print(2, 4, "4");
 8004934:	4a2e      	ldr	r2, [pc, #184]	; (80049f0 <hataKoduLcdGoster+0x1b8>)
 8004936:	2104      	movs	r1, #4
 8004938:	2002      	movs	r0, #2
 800493a:	f7fb ff64 	bl	8000806 <lcd_print>
		lcd_print(2, 7, "          ");
 800493e:	4a29      	ldr	r2, [pc, #164]	; (80049e4 <hataKoduLcdGoster+0x1ac>)
 8004940:	2107      	movs	r1, #7
 8004942:	2002      	movs	r0, #2
 8004944:	f7fb ff5f 	bl	8000806 <lcd_print>
}
 8004948:	e040      	b.n	80049cc <hataKoduLcdGoster+0x194>
	} else if(x==5) {
 800494a:	79fb      	ldrb	r3, [r7, #7]
 800494c:	2b05      	cmp	r3, #5
 800494e:	d11d      	bne.n	800498c <hataKoduLcdGoster+0x154>
		if(dilSecim==0) {
 8004950:	4b20      	ldr	r3, [pc, #128]	; (80049d4 <hataKoduLcdGoster+0x19c>)
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d105      	bne.n	8004964 <hataKoduLcdGoster+0x12c>
			lcd_print(1, 1, "   HATA KODU    ");
 8004958:	4a1f      	ldr	r2, [pc, #124]	; (80049d8 <hataKoduLcdGoster+0x1a0>)
 800495a:	2101      	movs	r1, #1
 800495c:	2001      	movs	r0, #1
 800495e:	f7fb ff52 	bl	8000806 <lcd_print>
 8004962:	e008      	b.n	8004976 <hataKoduLcdGoster+0x13e>
		} else if(dilSecim==1) {
 8004964:	4b1b      	ldr	r3, [pc, #108]	; (80049d4 <hataKoduLcdGoster+0x19c>)
 8004966:	781b      	ldrb	r3, [r3, #0]
 8004968:	2b01      	cmp	r3, #1
 800496a:	d104      	bne.n	8004976 <hataKoduLcdGoster+0x13e>
			lcd_print(1, 1, "   ERROR CODE   ");
 800496c:	4a1b      	ldr	r2, [pc, #108]	; (80049dc <hataKoduLcdGoster+0x1a4>)
 800496e:	2101      	movs	r1, #1
 8004970:	2001      	movs	r0, #1
 8004972:	f7fb ff48 	bl	8000806 <lcd_print>
		lcd_print(2, 5, "5");
 8004976:	4a1f      	ldr	r2, [pc, #124]	; (80049f4 <hataKoduLcdGoster+0x1bc>)
 8004978:	2105      	movs	r1, #5
 800497a:	2002      	movs	r0, #2
 800497c:	f7fb ff43 	bl	8000806 <lcd_print>
		lcd_print(2, 7, "          ");
 8004980:	4a18      	ldr	r2, [pc, #96]	; (80049e4 <hataKoduLcdGoster+0x1ac>)
 8004982:	2107      	movs	r1, #7
 8004984:	2002      	movs	r0, #2
 8004986:	f7fb ff3e 	bl	8000806 <lcd_print>
}
 800498a:	e01f      	b.n	80049cc <hataKoduLcdGoster+0x194>
	} else if(x==6) {
 800498c:	79fb      	ldrb	r3, [r7, #7]
 800498e:	2b06      	cmp	r3, #6
 8004990:	d11c      	bne.n	80049cc <hataKoduLcdGoster+0x194>
		if(dilSecim==0) {
 8004992:	4b10      	ldr	r3, [pc, #64]	; (80049d4 <hataKoduLcdGoster+0x19c>)
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d105      	bne.n	80049a6 <hataKoduLcdGoster+0x16e>
			lcd_print(1, 1, "   HATA KODU    ");
 800499a:	4a0f      	ldr	r2, [pc, #60]	; (80049d8 <hataKoduLcdGoster+0x1a0>)
 800499c:	2101      	movs	r1, #1
 800499e:	2001      	movs	r0, #1
 80049a0:	f7fb ff31 	bl	8000806 <lcd_print>
 80049a4:	e008      	b.n	80049b8 <hataKoduLcdGoster+0x180>
		} else if(dilSecim==1) {
 80049a6:	4b0b      	ldr	r3, [pc, #44]	; (80049d4 <hataKoduLcdGoster+0x19c>)
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d104      	bne.n	80049b8 <hataKoduLcdGoster+0x180>
			lcd_print(1, 1, "   ERROR CODE   ");
 80049ae:	4a0b      	ldr	r2, [pc, #44]	; (80049dc <hataKoduLcdGoster+0x1a4>)
 80049b0:	2101      	movs	r1, #1
 80049b2:	2001      	movs	r0, #1
 80049b4:	f7fb ff27 	bl	8000806 <lcd_print>
		lcd_print(2, 6, "6");
 80049b8:	4a0f      	ldr	r2, [pc, #60]	; (80049f8 <hataKoduLcdGoster+0x1c0>)
 80049ba:	2106      	movs	r1, #6
 80049bc:	2002      	movs	r0, #2
 80049be:	f7fb ff22 	bl	8000806 <lcd_print>
		lcd_print(2, 7, "          ");
 80049c2:	4a08      	ldr	r2, [pc, #32]	; (80049e4 <hataKoduLcdGoster+0x1ac>)
 80049c4:	2107      	movs	r1, #7
 80049c6:	2002      	movs	r0, #2
 80049c8:	f7fb ff1d 	bl	8000806 <lcd_print>
}
 80049cc:	bf00      	nop
 80049ce:	3708      	adds	r7, #8
 80049d0:	46bd      	mov	sp, r7
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	20000b30 	.word	0x20000b30
 80049d8:	0800cea4 	.word	0x0800cea4
 80049dc:	0800ceb8 	.word	0x0800ceb8
 80049e0:	0800cecc 	.word	0x0800cecc
 80049e4:	0800ced0 	.word	0x0800ced0
 80049e8:	0800cedc 	.word	0x0800cedc
 80049ec:	0800cee0 	.word	0x0800cee0
 80049f0:	0800cee4 	.word	0x0800cee4
 80049f4:	0800cee8 	.word	0x0800cee8
 80049f8:	0800ceec 	.word	0x0800ceec

080049fc <eepromKontrol>:

void eepromKontrol(void) {
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af04      	add	r7, sp, #16
	HAL_I2C_Mem_Read(&hi2c1,0xA0,0,63,eepromData,63,3000);
 8004a02:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8004a06:	9302      	str	r3, [sp, #8]
 8004a08:	233f      	movs	r3, #63	; 0x3f
 8004a0a:	9301      	str	r3, [sp, #4]
 8004a0c:	4b9b      	ldr	r3, [pc, #620]	; (8004c7c <eepromKontrol+0x280>)
 8004a0e:	9300      	str	r3, [sp, #0]
 8004a10:	233f      	movs	r3, #63	; 0x3f
 8004a12:	2200      	movs	r2, #0
 8004a14:	21a0      	movs	r1, #160	; 0xa0
 8004a16:	489a      	ldr	r0, [pc, #616]	; (8004c80 <eepromKontrol+0x284>)
 8004a18:	f004 fb8e 	bl	8009138 <HAL_I2C_Mem_Read>
	HAL_Delay(1000);
 8004a1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004a20:	f003 fa06 	bl	8007e30 <HAL_Delay>

	kaydedilenDeger = eepromData[3];
 8004a24:	4b95      	ldr	r3, [pc, #596]	; (8004c7c <eepromKontrol+0x280>)
 8004a26:	78da      	ldrb	r2, [r3, #3]
 8004a28:	4b96      	ldr	r3, [pc, #600]	; (8004c84 <eepromKontrol+0x288>)
 8004a2a:	701a      	strb	r2, [r3, #0]
	calismaSekli = eepromData[1];
 8004a2c:	4b93      	ldr	r3, [pc, #588]	; (8004c7c <eepromKontrol+0x280>)
 8004a2e:	785a      	ldrb	r2, [r3, #1]
 8004a30:	4b95      	ldr	r3, [pc, #596]	; (8004c88 <eepromKontrol+0x28c>)
 8004a32:	701a      	strb	r2, [r3, #0]
	emniyetCercevesi = eepromData[2];
 8004a34:	4b91      	ldr	r3, [pc, #580]	; (8004c7c <eepromKontrol+0x280>)
 8004a36:	789a      	ldrb	r2, [r3, #2]
 8004a38:	4b94      	ldr	r3, [pc, #592]	; (8004c8c <eepromKontrol+0x290>)
 8004a3a:	701a      	strb	r2, [r3, #0]
	yavaslamaLimit = eepromData[4];
 8004a3c:	4b8f      	ldr	r3, [pc, #572]	; (8004c7c <eepromKontrol+0x280>)
 8004a3e:	791a      	ldrb	r2, [r3, #4]
 8004a40:	4b93      	ldr	r3, [pc, #588]	; (8004c90 <eepromKontrol+0x294>)
 8004a42:	701a      	strb	r2, [r3, #0]
	altLimit = eepromData[5];
 8004a44:	4b8d      	ldr	r3, [pc, #564]	; (8004c7c <eepromKontrol+0x280>)
 8004a46:	795a      	ldrb	r2, [r3, #5]
 8004a48:	4b92      	ldr	r3, [pc, #584]	; (8004c94 <eepromKontrol+0x298>)
 8004a4a:	701a      	strb	r2, [r3, #0]
	basincSalteri = eepromData[6];
 8004a4c:	4b8b      	ldr	r3, [pc, #556]	; (8004c7c <eepromKontrol+0x280>)
 8004a4e:	799a      	ldrb	r2, [r3, #6]
 8004a50:	4b91      	ldr	r3, [pc, #580]	; (8004c98 <eepromKontrol+0x29c>)
 8004a52:	701a      	strb	r2, [r3, #0]
	kapiSecimleri = eepromData[7];
 8004a54:	4b89      	ldr	r3, [pc, #548]	; (8004c7c <eepromKontrol+0x280>)
 8004a56:	79da      	ldrb	r2, [r3, #7]
 8004a58:	4b90      	ldr	r3, [pc, #576]	; (8004c9c <eepromKontrol+0x2a0>)
 8004a5a:	701a      	strb	r2, [r3, #0]
	kapi1Tip = eepromData[8];
 8004a5c:	4b87      	ldr	r3, [pc, #540]	; (8004c7c <eepromKontrol+0x280>)
 8004a5e:	7a1a      	ldrb	r2, [r3, #8]
 8004a60:	4b8f      	ldr	r3, [pc, #572]	; (8004ca0 <eepromKontrol+0x2a4>)
 8004a62:	701a      	strb	r2, [r3, #0]
	kapi1AcSure = eepromData[9];
 8004a64:	4b85      	ldr	r3, [pc, #532]	; (8004c7c <eepromKontrol+0x280>)
 8004a66:	7a5a      	ldrb	r2, [r3, #9]
 8004a68:	4b8e      	ldr	r3, [pc, #568]	; (8004ca4 <eepromKontrol+0x2a8>)
 8004a6a:	701a      	strb	r2, [r3, #0]
	kapi2Tip = eepromData[10];
 8004a6c:	4b83      	ldr	r3, [pc, #524]	; (8004c7c <eepromKontrol+0x280>)
 8004a6e:	7a9a      	ldrb	r2, [r3, #10]
 8004a70:	4b8d      	ldr	r3, [pc, #564]	; (8004ca8 <eepromKontrol+0x2ac>)
 8004a72:	701a      	strb	r2, [r3, #0]
	kapi2AcSure = eepromData[11];
 8004a74:	4b81      	ldr	r3, [pc, #516]	; (8004c7c <eepromKontrol+0x280>)
 8004a76:	7ada      	ldrb	r2, [r3, #11]
 8004a78:	4b8c      	ldr	r3, [pc, #560]	; (8004cac <eepromKontrol+0x2b0>)
 8004a7a:	701a      	strb	r2, [r3, #0]
	kapitablaTip = eepromData[12];
 8004a7c:	4b7f      	ldr	r3, [pc, #508]	; (8004c7c <eepromKontrol+0x280>)
 8004a7e:	7b1a      	ldrb	r2, [r3, #12]
 8004a80:	4b8b      	ldr	r3, [pc, #556]	; (8004cb0 <eepromKontrol+0x2b4>)
 8004a82:	701a      	strb	r2, [r3, #0]
	kapiTablaAcSure = eepromData[13];
 8004a84:	4b7d      	ldr	r3, [pc, #500]	; (8004c7c <eepromKontrol+0x280>)
 8004a86:	7b5a      	ldrb	r2, [r3, #13]
 8004a88:	4b8a      	ldr	r3, [pc, #552]	; (8004cb4 <eepromKontrol+0x2b8>)
 8004a8a:	701a      	strb	r2, [r3, #0]
	yukariYavasLimit = eepromData[14];
 8004a8c:	4b7b      	ldr	r3, [pc, #492]	; (8004c7c <eepromKontrol+0x280>)
 8004a8e:	7b9a      	ldrb	r2, [r3, #14]
 8004a90:	4b89      	ldr	r3, [pc, #548]	; (8004cb8 <eepromKontrol+0x2bc>)
 8004a92:	701a      	strb	r2, [r3, #0]
	devirmeYuruyusSecim = eepromData[15];
 8004a94:	4b79      	ldr	r3, [pc, #484]	; (8004c7c <eepromKontrol+0x280>)
 8004a96:	7bda      	ldrb	r2, [r3, #15]
 8004a98:	4b88      	ldr	r3, [pc, #544]	; (8004cbc <eepromKontrol+0x2c0>)
 8004a9a:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriLimit = eepromData[16];
 8004a9c:	4b77      	ldr	r3, [pc, #476]	; (8004c7c <eepromKontrol+0x280>)
 8004a9e:	7c1a      	ldrb	r2, [r3, #16]
 8004aa0:	4b87      	ldr	r3, [pc, #540]	; (8004cc0 <eepromKontrol+0x2c4>)
 8004aa2:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriLimit = eepromData[17];
 8004aa4:	4b75      	ldr	r3, [pc, #468]	; (8004c7c <eepromKontrol+0x280>)
 8004aa6:	7c5a      	ldrb	r2, [r3, #17]
 8004aa8:	4b86      	ldr	r3, [pc, #536]	; (8004cc4 <eepromKontrol+0x2c8>)
 8004aaa:	701a      	strb	r2, [r3, #0]
	devirmeSilindirTipi = eepromData[18];
 8004aac:	4b73      	ldr	r3, [pc, #460]	; (8004c7c <eepromKontrol+0x280>)
 8004aae:	7c9a      	ldrb	r2, [r3, #18]
 8004ab0:	4b85      	ldr	r3, [pc, #532]	; (8004cc8 <eepromKontrol+0x2cc>)
 8004ab2:	701a      	strb	r2, [r3, #0]
	platformSilindirTipi = eepromData[19];
 8004ab4:	4b71      	ldr	r3, [pc, #452]	; (8004c7c <eepromKontrol+0x280>)
 8004ab6:	7cda      	ldrb	r2, [r3, #19]
 8004ab8:	4b84      	ldr	r3, [pc, #528]	; (8004ccc <eepromKontrol+0x2d0>)
 8004aba:	701a      	strb	r2, [r3, #0]
	yukariValfTmr = eepromData[20];
 8004abc:	4b6f      	ldr	r3, [pc, #444]	; (8004c7c <eepromKontrol+0x280>)
 8004abe:	7d1a      	ldrb	r2, [r3, #20]
 8004ac0:	4b83      	ldr	r3, [pc, #524]	; (8004cd0 <eepromKontrol+0x2d4>)
 8004ac2:	701a      	strb	r2, [r3, #0]
	asagiValfTmr = eepromData[21];
 8004ac4:	4b6d      	ldr	r3, [pc, #436]	; (8004c7c <eepromKontrol+0x280>)
 8004ac6:	7d5a      	ldrb	r2, [r3, #21]
 8004ac8:	4b82      	ldr	r3, [pc, #520]	; (8004cd4 <eepromKontrol+0x2d8>)
 8004aca:	701a      	strb	r2, [r3, #0]
	devirmeYukariIleriTmr = eepromData[22];
 8004acc:	4b6b      	ldr	r3, [pc, #428]	; (8004c7c <eepromKontrol+0x280>)
 8004ace:	7d9a      	ldrb	r2, [r3, #22]
 8004ad0:	4b81      	ldr	r3, [pc, #516]	; (8004cd8 <eepromKontrol+0x2dc>)
 8004ad2:	701a      	strb	r2, [r3, #0]
	devirmeAsagiGeriTmr = eepromData[23];
 8004ad4:	4b69      	ldr	r3, [pc, #420]	; (8004c7c <eepromKontrol+0x280>)
 8004ad6:	7dda      	ldrb	r2, [r3, #23]
 8004ad8:	4b80      	ldr	r3, [pc, #512]	; (8004cdc <eepromKontrol+0x2e0>)
 8004ada:	701a      	strb	r2, [r3, #0]
	makineCalismaTmr = eepromData[24];
 8004adc:	4b67      	ldr	r3, [pc, #412]	; (8004c7c <eepromKontrol+0x280>)
 8004ade:	7e1a      	ldrb	r2, [r3, #24]
 8004ae0:	4b7f      	ldr	r3, [pc, #508]	; (8004ce0 <eepromKontrol+0x2e4>)
 8004ae2:	701a      	strb	r2, [r3, #0]
	buzzer = eepromData[25];
 8004ae4:	4b65      	ldr	r3, [pc, #404]	; (8004c7c <eepromKontrol+0x280>)
 8004ae6:	7e5a      	ldrb	r2, [r3, #25]
 8004ae8:	4b7e      	ldr	r3, [pc, #504]	; (8004ce4 <eepromKontrol+0x2e8>)
 8004aea:	701a      	strb	r2, [r3, #0]
	demoMode = eepromData[26];
 8004aec:	4b63      	ldr	r3, [pc, #396]	; (8004c7c <eepromKontrol+0x280>)
 8004aee:	7e9a      	ldrb	r2, [r3, #26]
 8004af0:	4b7d      	ldr	r3, [pc, #500]	; (8004ce8 <eepromKontrol+0x2ec>)
 8004af2:	701a      	strb	r2, [r3, #0]
	calismaSayisi = eepromData[27];
 8004af4:	4b61      	ldr	r3, [pc, #388]	; (8004c7c <eepromKontrol+0x280>)
 8004af6:	7eda      	ldrb	r2, [r3, #27]
 8004af8:	4b7c      	ldr	r3, [pc, #496]	; (8004cec <eepromKontrol+0x2f0>)
 8004afa:	701a      	strb	r2, [r3, #0]
	calismaSayisi1 = eepromData[28];
 8004afc:	4b5f      	ldr	r3, [pc, #380]	; (8004c7c <eepromKontrol+0x280>)
 8004afe:	7f1a      	ldrb	r2, [r3, #28]
 8004b00:	4b7b      	ldr	r3, [pc, #492]	; (8004cf0 <eepromKontrol+0x2f4>)
 8004b02:	701a      	strb	r2, [r3, #0]
	calismaSayisi10 = eepromData[29];
 8004b04:	4b5d      	ldr	r3, [pc, #372]	; (8004c7c <eepromKontrol+0x280>)
 8004b06:	7f5a      	ldrb	r2, [r3, #29]
 8004b08:	4b7a      	ldr	r3, [pc, #488]	; (8004cf4 <eepromKontrol+0x2f8>)
 8004b0a:	701a      	strb	r2, [r3, #0]
	calismaSayisi100 = eepromData[30];
 8004b0c:	4b5b      	ldr	r3, [pc, #364]	; (8004c7c <eepromKontrol+0x280>)
 8004b0e:	7f9a      	ldrb	r2, [r3, #30]
 8004b10:	4b79      	ldr	r3, [pc, #484]	; (8004cf8 <eepromKontrol+0x2fc>)
 8004b12:	701a      	strb	r2, [r3, #0]
	calismaSayisi1000 = eepromData[31];
 8004b14:	4b59      	ldr	r3, [pc, #356]	; (8004c7c <eepromKontrol+0x280>)
 8004b16:	7fda      	ldrb	r2, [r3, #31]
 8004b18:	4b78      	ldr	r3, [pc, #480]	; (8004cfc <eepromKontrol+0x300>)
 8004b1a:	701a      	strb	r2, [r3, #0]
	calismaSayisi10000 = eepromData[32];
 8004b1c:	4b57      	ldr	r3, [pc, #348]	; (8004c7c <eepromKontrol+0x280>)
 8004b1e:	f893 2020 	ldrb.w	r2, [r3, #32]
 8004b22:	4b77      	ldr	r3, [pc, #476]	; (8004d00 <eepromKontrol+0x304>)
 8004b24:	701a      	strb	r2, [r3, #0]
	dilSecim = eepromData[33];
 8004b26:	4b55      	ldr	r3, [pc, #340]	; (8004c7c <eepromKontrol+0x280>)
 8004b28:	f893 2021 	ldrb.w	r2, [r3, #33]	; 0x21
 8004b2c:	4b75      	ldr	r3, [pc, #468]	; (8004d04 <eepromKontrol+0x308>)
 8004b2e:	701a      	strb	r2, [r3, #0]
	kapiTablaAcKonum = eepromData[34];
 8004b30:	4b52      	ldr	r3, [pc, #328]	; (8004c7c <eepromKontrol+0x280>)
 8004b32:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8004b36:	4b74      	ldr	r3, [pc, #464]	; (8004d08 <eepromKontrol+0x30c>)
 8004b38:	701a      	strb	r2, [r3, #0]
	calismaSayModu = eepromData[35];
 8004b3a:	4b50      	ldr	r3, [pc, #320]	; (8004c7c <eepromKontrol+0x280>)
 8004b3c:	f893 2023 	ldrb.w	r2, [r3, #35]	; 0x23
 8004b40:	4b72      	ldr	r3, [pc, #456]	; (8004d0c <eepromKontrol+0x310>)
 8004b42:	701a      	strb	r2, [r3, #0]
	kapiAcTipi = eepromData[36];
 8004b44:	4b4d      	ldr	r3, [pc, #308]	; (8004c7c <eepromKontrol+0x280>)
 8004b46:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
 8004b4a:	4b71      	ldr	r3, [pc, #452]	; (8004d10 <eepromKontrol+0x314>)
 8004b4c:	701a      	strb	r2, [r3, #0]
	hataKayit1 = eepromData[37];
 8004b4e:	4b4b      	ldr	r3, [pc, #300]	; (8004c7c <eepromKontrol+0x280>)
 8004b50:	f893 2025 	ldrb.w	r2, [r3, #37]	; 0x25
 8004b54:	4b6f      	ldr	r3, [pc, #444]	; (8004d14 <eepromKontrol+0x318>)
 8004b56:	701a      	strb	r2, [r3, #0]
	hataKayit2 = eepromData[38];
 8004b58:	4b48      	ldr	r3, [pc, #288]	; (8004c7c <eepromKontrol+0x280>)
 8004b5a:	f893 2026 	ldrb.w	r2, [r3, #38]	; 0x26
 8004b5e:	4b6e      	ldr	r3, [pc, #440]	; (8004d18 <eepromKontrol+0x31c>)
 8004b60:	701a      	strb	r2, [r3, #0]
	hataKayit3 = eepromData[39];
 8004b62:	4b46      	ldr	r3, [pc, #280]	; (8004c7c <eepromKontrol+0x280>)
 8004b64:	f893 2027 	ldrb.w	r2, [r3, #39]	; 0x27
 8004b68:	4b6c      	ldr	r3, [pc, #432]	; (8004d1c <eepromKontrol+0x320>)
 8004b6a:	701a      	strb	r2, [r3, #0]
	hataKayit4 = eepromData[40];
 8004b6c:	4b43      	ldr	r3, [pc, #268]	; (8004c7c <eepromKontrol+0x280>)
 8004b6e:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
 8004b72:	4b6b      	ldr	r3, [pc, #428]	; (8004d20 <eepromKontrol+0x324>)
 8004b74:	701a      	strb	r2, [r3, #0]
	hataKayit5 = eepromData[41];
 8004b76:	4b41      	ldr	r3, [pc, #260]	; (8004c7c <eepromKontrol+0x280>)
 8004b78:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8004b7c:	4b69      	ldr	r3, [pc, #420]	; (8004d24 <eepromKontrol+0x328>)
 8004b7e:	701a      	strb	r2, [r3, #0]
	hataKayit6 = eepromData[42];
 8004b80:	4b3e      	ldr	r3, [pc, #248]	; (8004c7c <eepromKontrol+0x280>)
 8004b82:	f893 202a 	ldrb.w	r2, [r3, #42]	; 0x2a
 8004b86:	4b68      	ldr	r3, [pc, #416]	; (8004d28 <eepromKontrol+0x32c>)
 8004b88:	701a      	strb	r2, [r3, #0]
	hataKayit7 = eepromData[43];
 8004b8a:	4b3c      	ldr	r3, [pc, #240]	; (8004c7c <eepromKontrol+0x280>)
 8004b8c:	f893 202b 	ldrb.w	r2, [r3, #43]	; 0x2b
 8004b90:	4b66      	ldr	r3, [pc, #408]	; (8004d2c <eepromKontrol+0x330>)
 8004b92:	701a      	strb	r2, [r3, #0]
	hataKayit8 = eepromData[44];
 8004b94:	4b39      	ldr	r3, [pc, #228]	; (8004c7c <eepromKontrol+0x280>)
 8004b96:	f893 202c 	ldrb.w	r2, [r3, #44]	; 0x2c
 8004b9a:	4b65      	ldr	r3, [pc, #404]	; (8004d30 <eepromKontrol+0x334>)
 8004b9c:	701a      	strb	r2, [r3, #0]
	hataKayit9 = eepromData[45];
 8004b9e:	4b37      	ldr	r3, [pc, #220]	; (8004c7c <eepromKontrol+0x280>)
 8004ba0:	f893 202d 	ldrb.w	r2, [r3, #45]	; 0x2d
 8004ba4:	4b63      	ldr	r3, [pc, #396]	; (8004d34 <eepromKontrol+0x338>)
 8004ba6:	701a      	strb	r2, [r3, #0]
	hataKayit10 = eepromData[46];
 8004ba8:	4b34      	ldr	r3, [pc, #208]	; (8004c7c <eepromKontrol+0x280>)
 8004baa:	f893 202e 	ldrb.w	r2, [r3, #46]	; 0x2e
 8004bae:	4b62      	ldr	r3, [pc, #392]	; (8004d38 <eepromKontrol+0x33c>)
 8004bb0:	701a      	strb	r2, [r3, #0]

	loadMenuTexts(dilSecim);
 8004bb2:	4b54      	ldr	r3, [pc, #336]	; (8004d04 <eepromKontrol+0x308>)
 8004bb4:	781b      	ldrb	r3, [r3, #0]
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f7ff f82e 	bl	8003c18 <loadMenuTexts>

	if(calismaSayisi10000>9) {
 8004bbc:	4b50      	ldr	r3, [pc, #320]	; (8004d00 <eepromKontrol+0x304>)
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	2b09      	cmp	r3, #9
 8004bc2:	d902      	bls.n	8004bca <eepromKontrol+0x1ce>
	    calismaSayisi10000=0;
 8004bc4:	4b4e      	ldr	r3, [pc, #312]	; (8004d00 <eepromKontrol+0x304>)
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1000>9) {
 8004bca:	4b4c      	ldr	r3, [pc, #304]	; (8004cfc <eepromKontrol+0x300>)
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	2b09      	cmp	r3, #9
 8004bd0:	d902      	bls.n	8004bd8 <eepromKontrol+0x1dc>
	    calismaSayisi1000=0;
 8004bd2:	4b4a      	ldr	r3, [pc, #296]	; (8004cfc <eepromKontrol+0x300>)
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi100>9) {
 8004bd8:	4b47      	ldr	r3, [pc, #284]	; (8004cf8 <eepromKontrol+0x2fc>)
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	2b09      	cmp	r3, #9
 8004bde:	d902      	bls.n	8004be6 <eepromKontrol+0x1ea>
	    calismaSayisi100=0;
 8004be0:	4b45      	ldr	r3, [pc, #276]	; (8004cf8 <eepromKontrol+0x2fc>)
 8004be2:	2200      	movs	r2, #0
 8004be4:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi10>9) {
 8004be6:	4b43      	ldr	r3, [pc, #268]	; (8004cf4 <eepromKontrol+0x2f8>)
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	2b09      	cmp	r3, #9
 8004bec:	d902      	bls.n	8004bf4 <eepromKontrol+0x1f8>
	    calismaSayisi10=0;
 8004bee:	4b41      	ldr	r3, [pc, #260]	; (8004cf4 <eepromKontrol+0x2f8>)
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayisi1>9) {
 8004bf4:	4b3e      	ldr	r3, [pc, #248]	; (8004cf0 <eepromKontrol+0x2f4>)
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	2b09      	cmp	r3, #9
 8004bfa:	d902      	bls.n	8004c02 <eepromKontrol+0x206>
	    calismaSayisi1=0;
 8004bfc:	4b3c      	ldr	r3, [pc, #240]	; (8004cf0 <eepromKontrol+0x2f4>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	701a      	strb	r2, [r3, #0]

	/*if(acilStop1>0) {
		acilStop1=0;
	}*/

	if(calismaSekli>1) {
 8004c02:	4b21      	ldr	r3, [pc, #132]	; (8004c88 <eepromKontrol+0x28c>)
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d902      	bls.n	8004c10 <eepromKontrol+0x214>
	    calismaSekli=0;
 8004c0a:	4b1f      	ldr	r3, [pc, #124]	; (8004c88 <eepromKontrol+0x28c>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	701a      	strb	r2, [r3, #0]
	}

	if(emniyetCercevesi>1) {
 8004c10:	4b1e      	ldr	r3, [pc, #120]	; (8004c8c <eepromKontrol+0x290>)
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d902      	bls.n	8004c1e <eepromKontrol+0x222>
	    emniyetCercevesi=1;
 8004c18:	4b1c      	ldr	r3, [pc, #112]	; (8004c8c <eepromKontrol+0x290>)
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	701a      	strb	r2, [r3, #0]
	}

	if(yavaslamaLimit>1) {
 8004c1e:	4b1c      	ldr	r3, [pc, #112]	; (8004c90 <eepromKontrol+0x294>)
 8004c20:	781b      	ldrb	r3, [r3, #0]
 8004c22:	2b01      	cmp	r3, #1
 8004c24:	d902      	bls.n	8004c2c <eepromKontrol+0x230>
	    yavaslamaLimit=0;
 8004c26:	4b1a      	ldr	r3, [pc, #104]	; (8004c90 <eepromKontrol+0x294>)
 8004c28:	2200      	movs	r2, #0
 8004c2a:	701a      	strb	r2, [r3, #0]
	}

	if(altLimit>1) {
 8004c2c:	4b19      	ldr	r3, [pc, #100]	; (8004c94 <eepromKontrol+0x298>)
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d902      	bls.n	8004c3a <eepromKontrol+0x23e>
	    altLimit=1;
 8004c34:	4b17      	ldr	r3, [pc, #92]	; (8004c94 <eepromKontrol+0x298>)
 8004c36:	2201      	movs	r2, #1
 8004c38:	701a      	strb	r2, [r3, #0]
	}

	if(basincSalteri>1) {
 8004c3a:	4b17      	ldr	r3, [pc, #92]	; (8004c98 <eepromKontrol+0x29c>)
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d902      	bls.n	8004c48 <eepromKontrol+0x24c>
	    basincSalteri=1;
 8004c42:	4b15      	ldr	r3, [pc, #84]	; (8004c98 <eepromKontrol+0x29c>)
 8004c44:	2201      	movs	r2, #1
 8004c46:	701a      	strb	r2, [r3, #0]
	}

	if(kapiSecimleri>3) {
 8004c48:	4b14      	ldr	r3, [pc, #80]	; (8004c9c <eepromKontrol+0x2a0>)
 8004c4a:	781b      	ldrb	r3, [r3, #0]
 8004c4c:	2b03      	cmp	r3, #3
 8004c4e:	d902      	bls.n	8004c56 <eepromKontrol+0x25a>
	    kapiSecimleri=3;
 8004c50:	4b12      	ldr	r3, [pc, #72]	; (8004c9c <eepromKontrol+0x2a0>)
 8004c52:	2203      	movs	r2, #3
 8004c54:	701a      	strb	r2, [r3, #0]
	}

	if(kapiAcTipi>1) {
 8004c56:	4b2e      	ldr	r3, [pc, #184]	; (8004d10 <eepromKontrol+0x314>)
 8004c58:	781b      	ldrb	r3, [r3, #0]
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d902      	bls.n	8004c64 <eepromKontrol+0x268>
	    kapiAcTipi=0;
 8004c5e:	4b2c      	ldr	r3, [pc, #176]	; (8004d10 <eepromKontrol+0x314>)
 8004c60:	2200      	movs	r2, #0
 8004c62:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1Tip>2) {
 8004c64:	4b0e      	ldr	r3, [pc, #56]	; (8004ca0 <eepromKontrol+0x2a4>)
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d902      	bls.n	8004c72 <eepromKontrol+0x276>
	    kapi1Tip=1;
 8004c6c:	4b0c      	ldr	r3, [pc, #48]	; (8004ca0 <eepromKontrol+0x2a4>)
 8004c6e:	2201      	movs	r2, #1
 8004c70:	701a      	strb	r2, [r3, #0]
	}

	if(kapi1AcSure>5) {
 8004c72:	4b0c      	ldr	r3, [pc, #48]	; (8004ca4 <eepromKontrol+0x2a8>)
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	2b05      	cmp	r3, #5
 8004c78:	d963      	bls.n	8004d42 <eepromKontrol+0x346>
 8004c7a:	e05f      	b.n	8004d3c <eepromKontrol+0x340>
 8004c7c:	20000aa4 	.word	0x20000aa4
 8004c80:	20000ce0 	.word	0x20000ce0
 8004c84:	20000ae3 	.word	0x20000ae3
 8004c88:	20000b11 	.word	0x20000b11
 8004c8c:	20000b14 	.word	0x20000b14
 8004c90:	20000b15 	.word	0x20000b15
 8004c94:	20000b16 	.word	0x20000b16
 8004c98:	20000b17 	.word	0x20000b17
 8004c9c:	20000b18 	.word	0x20000b18
 8004ca0:	20000b19 	.word	0x20000b19
 8004ca4:	20000b29 	.word	0x20000b29
 8004ca8:	20000b1a 	.word	0x20000b1a
 8004cac:	20000b2a 	.word	0x20000b2a
 8004cb0:	20000b1b 	.word	0x20000b1b
 8004cb4:	20000b2b 	.word	0x20000b2b
 8004cb8:	20000b1e 	.word	0x20000b1e
 8004cbc:	20000b1f 	.word	0x20000b1f
 8004cc0:	20000b20 	.word	0x20000b20
 8004cc4:	20000b21 	.word	0x20000b21
 8004cc8:	20000b22 	.word	0x20000b22
 8004ccc:	20000b23 	.word	0x20000b23
 8004cd0:	20000b24 	.word	0x20000b24
 8004cd4:	20000b25 	.word	0x20000b25
 8004cd8:	20000b26 	.word	0x20000b26
 8004cdc:	20000b27 	.word	0x20000b27
 8004ce0:	20000b28 	.word	0x20000b28
 8004ce4:	20000b2c 	.word	0x20000b2c
 8004ce8:	20000b2e 	.word	0x20000b2e
 8004cec:	20000b0c 	.word	0x20000b0c
 8004cf0:	20000b0d 	.word	0x20000b0d
 8004cf4:	20000b0e 	.word	0x20000b0e
 8004cf8:	20000941 	.word	0x20000941
 8004cfc:	20000942 	.word	0x20000942
 8004d00:	20000b0f 	.word	0x20000b0f
 8004d04:	20000b30 	.word	0x20000b30
 8004d08:	20000b1d 	.word	0x20000b1d
 8004d0c:	20000b2f 	.word	0x20000b2f
 8004d10:	20000b1c 	.word	0x20000b1c
 8004d14:	20000b31 	.word	0x20000b31
 8004d18:	20000b32 	.word	0x20000b32
 8004d1c:	20000b33 	.word	0x20000b33
 8004d20:	20000b34 	.word	0x20000b34
 8004d24:	20000b35 	.word	0x20000b35
 8004d28:	20000b36 	.word	0x20000b36
 8004d2c:	20000b37 	.word	0x20000b37
 8004d30:	20000b38 	.word	0x20000b38
 8004d34:	20000b39 	.word	0x20000b39
 8004d38:	20000b3a 	.word	0x20000b3a
	    kapi1AcSure=5;
 8004d3c:	4b4a      	ldr	r3, [pc, #296]	; (8004e68 <eepromKontrol+0x46c>)
 8004d3e:	2205      	movs	r2, #5
 8004d40:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2Tip>2) {
 8004d42:	4b4a      	ldr	r3, [pc, #296]	; (8004e6c <eepromKontrol+0x470>)
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d902      	bls.n	8004d50 <eepromKontrol+0x354>
	    kapi2Tip=1;
 8004d4a:	4b48      	ldr	r3, [pc, #288]	; (8004e6c <eepromKontrol+0x470>)
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	701a      	strb	r2, [r3, #0]
	}

	if(kapi2AcSure>5) {
 8004d50:	4b47      	ldr	r3, [pc, #284]	; (8004e70 <eepromKontrol+0x474>)
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	2b05      	cmp	r3, #5
 8004d56:	d902      	bls.n	8004d5e <eepromKontrol+0x362>
	    kapi2AcSure=5;
 8004d58:	4b45      	ldr	r3, [pc, #276]	; (8004e70 <eepromKontrol+0x474>)
 8004d5a:	2205      	movs	r2, #5
 8004d5c:	701a      	strb	r2, [r3, #0]
	}

	if(kapitablaTip>2) {
 8004d5e:	4b45      	ldr	r3, [pc, #276]	; (8004e74 <eepromKontrol+0x478>)
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	2b02      	cmp	r3, #2
 8004d64:	d902      	bls.n	8004d6c <eepromKontrol+0x370>
	    kapitablaTip=1;
 8004d66:	4b43      	ldr	r3, [pc, #268]	; (8004e74 <eepromKontrol+0x478>)
 8004d68:	2201      	movs	r2, #1
 8004d6a:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcKonum>2) {
 8004d6c:	4b42      	ldr	r3, [pc, #264]	; (8004e78 <eepromKontrol+0x47c>)
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	2b02      	cmp	r3, #2
 8004d72:	d902      	bls.n	8004d7a <eepromKontrol+0x37e>
	    kapiTablaAcKonum=2;
 8004d74:	4b40      	ldr	r3, [pc, #256]	; (8004e78 <eepromKontrol+0x47c>)
 8004d76:	2202      	movs	r2, #2
 8004d78:	701a      	strb	r2, [r3, #0]
	}

	if(kapiTablaAcSure>5) {
 8004d7a:	4b40      	ldr	r3, [pc, #256]	; (8004e7c <eepromKontrol+0x480>)
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	2b05      	cmp	r3, #5
 8004d80:	d902      	bls.n	8004d88 <eepromKontrol+0x38c>
	    kapiTablaAcSure=5;
 8004d82:	4b3e      	ldr	r3, [pc, #248]	; (8004e7c <eepromKontrol+0x480>)
 8004d84:	2205      	movs	r2, #5
 8004d86:	701a      	strb	r2, [r3, #0]
	}

	if(yukariYavasLimit>1) {
 8004d88:	4b3d      	ldr	r3, [pc, #244]	; (8004e80 <eepromKontrol+0x484>)
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d902      	bls.n	8004d96 <eepromKontrol+0x39a>
	    yukariYavasLimit=0;
 8004d90:	4b3b      	ldr	r3, [pc, #236]	; (8004e80 <eepromKontrol+0x484>)
 8004d92:	2200      	movs	r2, #0
 8004d94:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYuruyusSecim>2) {
 8004d96:	4b3b      	ldr	r3, [pc, #236]	; (8004e84 <eepromKontrol+0x488>)
 8004d98:	781b      	ldrb	r3, [r3, #0]
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d902      	bls.n	8004da4 <eepromKontrol+0x3a8>
	    devirmeYuruyusSecim=0;
 8004d9e:	4b39      	ldr	r3, [pc, #228]	; (8004e84 <eepromKontrol+0x488>)
 8004da0:	2200      	movs	r2, #0
 8004da2:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriLimit>1) {
 8004da4:	4b38      	ldr	r3, [pc, #224]	; (8004e88 <eepromKontrol+0x48c>)
 8004da6:	781b      	ldrb	r3, [r3, #0]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d902      	bls.n	8004db2 <eepromKontrol+0x3b6>
	    devirmeYukariIleriLimit=1;
 8004dac:	4b36      	ldr	r3, [pc, #216]	; (8004e88 <eepromKontrol+0x48c>)
 8004dae:	2201      	movs	r2, #1
 8004db0:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriLimit>1) {
 8004db2:	4b36      	ldr	r3, [pc, #216]	; (8004e8c <eepromKontrol+0x490>)
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	2b01      	cmp	r3, #1
 8004db8:	d902      	bls.n	8004dc0 <eepromKontrol+0x3c4>
	    devirmeAsagiGeriLimit=1;
 8004dba:	4b34      	ldr	r3, [pc, #208]	; (8004e8c <eepromKontrol+0x490>)
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeSilindirTipi>1) {
 8004dc0:	4b33      	ldr	r3, [pc, #204]	; (8004e90 <eepromKontrol+0x494>)
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	2b01      	cmp	r3, #1
 8004dc6:	d902      	bls.n	8004dce <eepromKontrol+0x3d2>
	    devirmeSilindirTipi=0;
 8004dc8:	4b31      	ldr	r3, [pc, #196]	; (8004e90 <eepromKontrol+0x494>)
 8004dca:	2200      	movs	r2, #0
 8004dcc:	701a      	strb	r2, [r3, #0]
	}

	if(platformSilindirTipi>1) {
 8004dce:	4b31      	ldr	r3, [pc, #196]	; (8004e94 <eepromKontrol+0x498>)
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	2b01      	cmp	r3, #1
 8004dd4:	d902      	bls.n	8004ddc <eepromKontrol+0x3e0>
	    platformSilindirTipi=0;
 8004dd6:	4b2f      	ldr	r3, [pc, #188]	; (8004e94 <eepromKontrol+0x498>)
 8004dd8:	2200      	movs	r2, #0
 8004dda:	701a      	strb	r2, [r3, #0]
	}

	if(yukariValfTmr>5) {
 8004ddc:	4b2e      	ldr	r3, [pc, #184]	; (8004e98 <eepromKontrol+0x49c>)
 8004dde:	781b      	ldrb	r3, [r3, #0]
 8004de0:	2b05      	cmp	r3, #5
 8004de2:	d902      	bls.n	8004dea <eepromKontrol+0x3ee>
	    yukariValfTmr=0;
 8004de4:	4b2c      	ldr	r3, [pc, #176]	; (8004e98 <eepromKontrol+0x49c>)
 8004de6:	2200      	movs	r2, #0
 8004de8:	701a      	strb	r2, [r3, #0]
	}

	if(asagiValfTmr>5) {
 8004dea:	4b2c      	ldr	r3, [pc, #176]	; (8004e9c <eepromKontrol+0x4a0>)
 8004dec:	781b      	ldrb	r3, [r3, #0]
 8004dee:	2b05      	cmp	r3, #5
 8004df0:	d902      	bls.n	8004df8 <eepromKontrol+0x3fc>
	    asagiValfTmr=0;
 8004df2:	4b2a      	ldr	r3, [pc, #168]	; (8004e9c <eepromKontrol+0x4a0>)
 8004df4:	2200      	movs	r2, #0
 8004df6:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeYukariIleriTmr>5) {
 8004df8:	4b29      	ldr	r3, [pc, #164]	; (8004ea0 <eepromKontrol+0x4a4>)
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	2b05      	cmp	r3, #5
 8004dfe:	d902      	bls.n	8004e06 <eepromKontrol+0x40a>
	    devirmeYukariIleriTmr=0;
 8004e00:	4b27      	ldr	r3, [pc, #156]	; (8004ea0 <eepromKontrol+0x4a4>)
 8004e02:	2200      	movs	r2, #0
 8004e04:	701a      	strb	r2, [r3, #0]
	}

	if(devirmeAsagiGeriTmr>5) {
 8004e06:	4b27      	ldr	r3, [pc, #156]	; (8004ea4 <eepromKontrol+0x4a8>)
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	2b05      	cmp	r3, #5
 8004e0c:	d902      	bls.n	8004e14 <eepromKontrol+0x418>
	    devirmeAsagiGeriTmr=0;
 8004e0e:	4b25      	ldr	r3, [pc, #148]	; (8004ea4 <eepromKontrol+0x4a8>)
 8004e10:	2200      	movs	r2, #0
 8004e12:	701a      	strb	r2, [r3, #0]
	}

	if(makineCalismaTmr>180) {
 8004e14:	4b24      	ldr	r3, [pc, #144]	; (8004ea8 <eepromKontrol+0x4ac>)
 8004e16:	781b      	ldrb	r3, [r3, #0]
 8004e18:	2bb4      	cmp	r3, #180	; 0xb4
 8004e1a:	d902      	bls.n	8004e22 <eepromKontrol+0x426>
	    makineCalismaTmr=60;
 8004e1c:	4b22      	ldr	r3, [pc, #136]	; (8004ea8 <eepromKontrol+0x4ac>)
 8004e1e:	223c      	movs	r2, #60	; 0x3c
 8004e20:	701a      	strb	r2, [r3, #0]
	}

	if(buzzer>1) {
 8004e22:	4b22      	ldr	r3, [pc, #136]	; (8004eac <eepromKontrol+0x4b0>)
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d902      	bls.n	8004e30 <eepromKontrol+0x434>
	    buzzer=0;
 8004e2a:	4b20      	ldr	r3, [pc, #128]	; (8004eac <eepromKontrol+0x4b0>)
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	701a      	strb	r2, [r3, #0]
	}

	if(demoMode>1) {
 8004e30:	4b1f      	ldr	r3, [pc, #124]	; (8004eb0 <eepromKontrol+0x4b4>)
 8004e32:	781b      	ldrb	r3, [r3, #0]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d902      	bls.n	8004e3e <eepromKontrol+0x442>
	    demoMode=0;
 8004e38:	4b1d      	ldr	r3, [pc, #116]	; (8004eb0 <eepromKontrol+0x4b4>)
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	701a      	strb	r2, [r3, #0]
	}

	if(calismaSayModu>1) {
 8004e3e:	4b1d      	ldr	r3, [pc, #116]	; (8004eb4 <eepromKontrol+0x4b8>)
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	2b01      	cmp	r3, #1
 8004e44:	d902      	bls.n	8004e4c <eepromKontrol+0x450>
	    calismaSayModu=0;
 8004e46:	4b1b      	ldr	r3, [pc, #108]	; (8004eb4 <eepromKontrol+0x4b8>)
 8004e48:	2200      	movs	r2, #0
 8004e4a:	701a      	strb	r2, [r3, #0]
	}

	if(dilSecim>1) {
 8004e4c:	4b1a      	ldr	r3, [pc, #104]	; (8004eb8 <eepromKontrol+0x4bc>)
 8004e4e:	781b      	ldrb	r3, [r3, #0]
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	d902      	bls.n	8004e5a <eepromKontrol+0x45e>
	    dilSecim=0;
 8004e54:	4b18      	ldr	r3, [pc, #96]	; (8004eb8 <eepromKontrol+0x4bc>)
 8004e56:	2200      	movs	r2, #0
 8004e58:	701a      	strb	r2, [r3, #0]
	}

	HAL_Delay(1000);
 8004e5a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e5e:	f002 ffe7 	bl	8007e30 <HAL_Delay>
}
 8004e62:	bf00      	nop
 8004e64:	46bd      	mov	sp, r7
 8004e66:	bd80      	pop	{r7, pc}
 8004e68:	20000b29 	.word	0x20000b29
 8004e6c:	20000b1a 	.word	0x20000b1a
 8004e70:	20000b2a 	.word	0x20000b2a
 8004e74:	20000b1b 	.word	0x20000b1b
 8004e78:	20000b1d 	.word	0x20000b1d
 8004e7c:	20000b2b 	.word	0x20000b2b
 8004e80:	20000b1e 	.word	0x20000b1e
 8004e84:	20000b1f 	.word	0x20000b1f
 8004e88:	20000b20 	.word	0x20000b20
 8004e8c:	20000b21 	.word	0x20000b21
 8004e90:	20000b22 	.word	0x20000b22
 8004e94:	20000b23 	.word	0x20000b23
 8004e98:	20000b24 	.word	0x20000b24
 8004e9c:	20000b25 	.word	0x20000b25
 8004ea0:	20000b26 	.word	0x20000b26
 8004ea4:	20000b27 	.word	0x20000b27
 8004ea8:	20000b28 	.word	0x20000b28
 8004eac:	20000b2c 	.word	0x20000b2c
 8004eb0:	20000b2e 	.word	0x20000b2e
 8004eb4:	20000b2f 	.word	0x20000b2f
 8004eb8:	20000b30 	.word	0x20000b30

08004ebc <hata2EEPROM>:

void hata2EEPROM(uint8_t hataKodu) {
 8004ebc:	b590      	push	{r4, r7, lr}
 8004ebe:	b089      	sub	sp, #36	; 0x24
 8004ec0:	af04      	add	r7, sp, #16
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	71fb      	strb	r3, [r7, #7]
	if(eepromData[eepromHataBaslangic+(indeksSayisi-1)] != 0) {
 8004ec6:	4b25      	ldr	r3, [pc, #148]	; (8004f5c <hata2EEPROM+0xa0>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	1e5a      	subs	r2, r3, #1
 8004ecc:	4b24      	ldr	r3, [pc, #144]	; (8004f60 <hata2EEPROM+0xa4>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	4a24      	ldr	r2, [pc, #144]	; (8004f64 <hata2EEPROM+0xa8>)
 8004ed4:	5cd3      	ldrb	r3, [r2, r3]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d002      	beq.n	8004ee0 <hata2EEPROM+0x24>
		eepromDataFillWithEmpty();
 8004eda:	f000 f847 	bl	8004f6c <eepromDataFillWithEmpty>
		goto veriEkleme;
 8004ede:	e000      	b.n	8004ee2 <hata2EEPROM+0x26>
	} else {
		veriEkleme:
 8004ee0:	bf00      	nop
			for(int i=0; i<indeksSayisi; i++) {
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	60fb      	str	r3, [r7, #12]
 8004ee6:	e012      	b.n	8004f0e <hata2EEPROM+0x52>
				if(eepromData[eepromHataBaslangic+i] == 0) {
 8004ee8:	4b1d      	ldr	r3, [pc, #116]	; (8004f60 <hata2EEPROM+0xa4>)
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	4413      	add	r3, r2
 8004ef0:	4a1c      	ldr	r2, [pc, #112]	; (8004f64 <hata2EEPROM+0xa8>)
 8004ef2:	5cd3      	ldrb	r3, [r2, r3]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d107      	bne.n	8004f08 <hata2EEPROM+0x4c>
					eepromData[eepromHataBaslangic+i] = hataKodu;
 8004ef8:	4b19      	ldr	r3, [pc, #100]	; (8004f60 <hata2EEPROM+0xa4>)
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	4413      	add	r3, r2
 8004f00:	4918      	ldr	r1, [pc, #96]	; (8004f64 <hata2EEPROM+0xa8>)
 8004f02:	79fa      	ldrb	r2, [r7, #7]
 8004f04:	54ca      	strb	r2, [r1, r3]
					break;
 8004f06:	e007      	b.n	8004f18 <hata2EEPROM+0x5c>
			for(int i=0; i<indeksSayisi; i++) {
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	60fb      	str	r3, [r7, #12]
 8004f0e:	4b13      	ldr	r3, [pc, #76]	; (8004f5c <hata2EEPROM+0xa0>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	429a      	cmp	r2, r3
 8004f16:	dbe7      	blt.n	8004ee8 <hata2EEPROM+0x2c>
				}
			}
	}

	HAL_I2C_Mem_Write(&hi2c1,0xA0,eepromHataBaslangic,indeksSayisi,&eepromData[eepromHataBaslangic],indeksSayisi,3000);
 8004f18:	4b11      	ldr	r3, [pc, #68]	; (8004f60 <hata2EEPROM+0xa4>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	b299      	uxth	r1, r3
 8004f1e:	4b0f      	ldr	r3, [pc, #60]	; (8004f5c <hata2EEPROM+0xa0>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	b298      	uxth	r0, r3
 8004f24:	4b0e      	ldr	r3, [pc, #56]	; (8004f60 <hata2EEPROM+0xa4>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a0e      	ldr	r2, [pc, #56]	; (8004f64 <hata2EEPROM+0xa8>)
 8004f2a:	4413      	add	r3, r2
 8004f2c:	4a0b      	ldr	r2, [pc, #44]	; (8004f5c <hata2EEPROM+0xa0>)
 8004f2e:	6812      	ldr	r2, [r2, #0]
 8004f30:	b292      	uxth	r2, r2
 8004f32:	f640 34b8 	movw	r4, #3000	; 0xbb8
 8004f36:	9402      	str	r4, [sp, #8]
 8004f38:	9201      	str	r2, [sp, #4]
 8004f3a:	9300      	str	r3, [sp, #0]
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	460a      	mov	r2, r1
 8004f40:	21a0      	movs	r1, #160	; 0xa0
 8004f42:	4809      	ldr	r0, [pc, #36]	; (8004f68 <hata2EEPROM+0xac>)
 8004f44:	f003 fffe 	bl	8008f44 <HAL_I2C_Mem_Write>
	HAL_Delay(500);
 8004f48:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004f4c:	f002 ff70 	bl	8007e30 <HAL_Delay>
	eepromKontrol();
 8004f50:	f7ff fd54 	bl	80049fc <eepromKontrol>
}
 8004f54:	bf00      	nop
 8004f56:	3714      	adds	r7, #20
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	bd90      	pop	{r4, r7, pc}
 8004f5c:	20000938 	.word	0x20000938
 8004f60:	2000093c 	.word	0x2000093c
 8004f64:	20000aa4 	.word	0x20000aa4
 8004f68:	20000ce0 	.word	0x20000ce0

08004f6c <eepromDataFillWithEmpty>:

void eepromDataFillWithEmpty(void) {
 8004f6c:	b480      	push	{r7}
 8004f6e:	b083      	sub	sp, #12
 8004f70:	af00      	add	r7, sp, #0
	for(int i=0; i<indeksSayisi; i++) {
 8004f72:	2300      	movs	r3, #0
 8004f74:	607b      	str	r3, [r7, #4]
 8004f76:	e009      	b.n	8004f8c <eepromDataFillWithEmpty+0x20>
		eepromData[eepromVal[i]] = 0;
 8004f78:	4a0a      	ldr	r2, [pc, #40]	; (8004fa4 <eepromDataFillWithEmpty+0x38>)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f80:	4a09      	ldr	r2, [pc, #36]	; (8004fa8 <eepromDataFillWithEmpty+0x3c>)
 8004f82:	2100      	movs	r1, #0
 8004f84:	54d1      	strb	r1, [r2, r3]
	for(int i=0; i<indeksSayisi; i++) {
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	3301      	adds	r3, #1
 8004f8a:	607b      	str	r3, [r7, #4]
 8004f8c:	4b07      	ldr	r3, [pc, #28]	; (8004fac <eepromDataFillWithEmpty+0x40>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	429a      	cmp	r2, r3
 8004f94:	dbf0      	blt.n	8004f78 <eepromDataFillWithEmpty+0xc>
	}
}
 8004f96:	bf00      	nop
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	bc80      	pop	{r7}
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop
 8004fa4:	20000910 	.word	0x20000910
 8004fa8:	20000aa4 	.word	0x20000aa4
 8004fac:	20000938 	.word	0x20000938

08004fb0 <bekle>:
		return 1;
	}
	return 0;
}

void bekle() {
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	af00      	add	r7, sp, #0
	timer1=millis;
 8004fb4:	4b47      	ldr	r3, [pc, #284]	; (80050d4 <bekle+0x124>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a47      	ldr	r2, [pc, #284]	; (80050d8 <bekle+0x128>)
 8004fba:	6013      	str	r3, [r2, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004fbc:	e002      	b.n	8004fc4 <bekle+0x14>
    	butonKontrol = 1;
 8004fbe:	4b47      	ldr	r3, [pc, #284]	; (80050dc <bekle+0x12c>)
 8004fc0:	2201      	movs	r2, #1
 8004fc2:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004fc4:	2101      	movs	r1, #1
 8004fc6:	4846      	ldr	r0, [pc, #280]	; (80050e0 <bekle+0x130>)
 8004fc8:	f003 fd02 	bl	80089d0 <HAL_GPIO_ReadPin>
 8004fcc:	4603      	mov	r3, r0
 8004fce:	2b01      	cmp	r3, #1
 8004fd0:	d109      	bne.n	8004fe6 <bekle+0x36>
 8004fd2:	4b40      	ldr	r3, [pc, #256]	; (80050d4 <bekle+0x124>)
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	4b40      	ldr	r3, [pc, #256]	; (80050d8 <bekle+0x128>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d0ef      	beq.n	8004fbe <bekle+0xe>
    }

    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004fde:	e002      	b.n	8004fe6 <bekle+0x36>
    	butonKontrol = 1;
 8004fe0:	4b3e      	ldr	r3, [pc, #248]	; (80050dc <bekle+0x12c>)
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8004fe6:	2108      	movs	r1, #8
 8004fe8:	483e      	ldr	r0, [pc, #248]	; (80050e4 <bekle+0x134>)
 8004fea:	f003 fcf1 	bl	80089d0 <HAL_GPIO_ReadPin>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d109      	bne.n	8005008 <bekle+0x58>
 8004ff4:	4b37      	ldr	r3, [pc, #220]	; (80050d4 <bekle+0x124>)
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	4b37      	ldr	r3, [pc, #220]	; (80050d8 <bekle+0x128>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d0ef      	beq.n	8004fe0 <bekle+0x30>
    }

    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005000:	e002      	b.n	8005008 <bekle+0x58>
    	butonKontrol = 1;
 8005002:	4b36      	ldr	r3, [pc, #216]	; (80050dc <bekle+0x12c>)
 8005004:	2201      	movs	r2, #1
 8005006:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005008:	2102      	movs	r1, #2
 800500a:	4835      	ldr	r0, [pc, #212]	; (80050e0 <bekle+0x130>)
 800500c:	f003 fce0 	bl	80089d0 <HAL_GPIO_ReadPin>
 8005010:	4603      	mov	r3, r0
 8005012:	2b01      	cmp	r3, #1
 8005014:	d109      	bne.n	800502a <bekle+0x7a>
 8005016:	4b2f      	ldr	r3, [pc, #188]	; (80050d4 <bekle+0x124>)
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	4b2f      	ldr	r3, [pc, #188]	; (80050d8 <bekle+0x128>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	429a      	cmp	r2, r3
 8005020:	d0ef      	beq.n	8005002 <bekle+0x52>
    }

    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005022:	e002      	b.n	800502a <bekle+0x7a>
    	butonKontrol = 1;
 8005024:	4b2d      	ldr	r3, [pc, #180]	; (80050dc <bekle+0x12c>)
 8005026:	2201      	movs	r2, #1
 8005028:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800502a:	2104      	movs	r1, #4
 800502c:	482c      	ldr	r0, [pc, #176]	; (80050e0 <bekle+0x130>)
 800502e:	f003 fccf 	bl	80089d0 <HAL_GPIO_ReadPin>
 8005032:	4603      	mov	r3, r0
 8005034:	2b01      	cmp	r3, #1
 8005036:	d109      	bne.n	800504c <bekle+0x9c>
 8005038:	4b26      	ldr	r3, [pc, #152]	; (80050d4 <bekle+0x124>)
 800503a:	681a      	ldr	r2, [r3, #0]
 800503c:	4b26      	ldr	r3, [pc, #152]	; (80050d8 <bekle+0x128>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	429a      	cmp	r2, r3
 8005042:	d0ef      	beq.n	8005024 <bekle+0x74>
    }

    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 8005044:	e002      	b.n	800504c <bekle+0x9c>
    	butonKontrol = 1;
 8005046:	4b25      	ldr	r3, [pc, #148]	; (80050dc <bekle+0x12c>)
 8005048:	2201      	movs	r2, #1
 800504a:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin) == 1) && (millis-timer1<1)){ /* Butona basili olduğu surece bekle */
 800504c:	2108      	movs	r1, #8
 800504e:	4824      	ldr	r0, [pc, #144]	; (80050e0 <bekle+0x130>)
 8005050:	f003 fcbe 	bl	80089d0 <HAL_GPIO_ReadPin>
 8005054:	4603      	mov	r3, r0
 8005056:	2b01      	cmp	r3, #1
 8005058:	d109      	bne.n	800506e <bekle+0xbe>
 800505a:	4b1e      	ldr	r3, [pc, #120]	; (80050d4 <bekle+0x124>)
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	4b1e      	ldr	r3, [pc, #120]	; (80050d8 <bekle+0x128>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	429a      	cmp	r2, r3
 8005064:	d0ef      	beq.n	8005046 <bekle+0x96>
    }

    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8005066:	e002      	b.n	800506e <bekle+0xbe>
    	butonKontrol = 1;
 8005068:	4b1c      	ldr	r3, [pc, #112]	; (80050dc <bekle+0x12c>)
 800506a:	2201      	movs	r2, #1
 800506c:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port,kapi1AcButonIn_Pin) == 0) && (millis-timer1<1)){
 800506e:	2180      	movs	r1, #128	; 0x80
 8005070:	481c      	ldr	r0, [pc, #112]	; (80050e4 <bekle+0x134>)
 8005072:	f003 fcad 	bl	80089d0 <HAL_GPIO_ReadPin>
 8005076:	4603      	mov	r3, r0
 8005078:	2b00      	cmp	r3, #0
 800507a:	d109      	bne.n	8005090 <bekle+0xe0>
 800507c:	4b15      	ldr	r3, [pc, #84]	; (80050d4 <bekle+0x124>)
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	4b15      	ldr	r3, [pc, #84]	; (80050d8 <bekle+0x128>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	429a      	cmp	r2, r3
 8005086:	d0ef      	beq.n	8005068 <bekle+0xb8>
    }

    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8005088:	e002      	b.n	8005090 <bekle+0xe0>
    	butonKontrol = 1;
 800508a:	4b14      	ldr	r3, [pc, #80]	; (80050dc <bekle+0x12c>)
 800508c:	2201      	movs	r2, #1
 800508e:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port,kapi2AcButonIn_Pin) == 0) && (millis-timer1<1)){
 8005090:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005094:	4813      	ldr	r0, [pc, #76]	; (80050e4 <bekle+0x134>)
 8005096:	f003 fc9b 	bl	80089d0 <HAL_GPIO_ReadPin>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d109      	bne.n	80050b4 <bekle+0x104>
 80050a0:	4b0c      	ldr	r3, [pc, #48]	; (80050d4 <bekle+0x124>)
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	4b0c      	ldr	r3, [pc, #48]	; (80050d8 <bekle+0x128>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	429a      	cmp	r2, r3
 80050aa:	d0ee      	beq.n	800508a <bekle+0xda>
    }

    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 80050ac:	e002      	b.n	80050b4 <bekle+0x104>
    	butonKontrol = 1;
 80050ae:	4b0b      	ldr	r3, [pc, #44]	; (80050dc <bekle+0x12c>)
 80050b0:	2201      	movs	r2, #1
 80050b2:	701a      	strb	r2, [r3, #0]
    while((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port,kapiTablaAcButonIn_Pin) == 0) && (millis-timer1<1)){
 80050b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80050b8:	480a      	ldr	r0, [pc, #40]	; (80050e4 <bekle+0x134>)
 80050ba:	f003 fc89 	bl	80089d0 <HAL_GPIO_ReadPin>
 80050be:	4603      	mov	r3, r0
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d105      	bne.n	80050d0 <bekle+0x120>
 80050c4:	4b03      	ldr	r3, [pc, #12]	; (80050d4 <bekle+0x124>)
 80050c6:	681a      	ldr	r2, [r3, #0]
 80050c8:	4b03      	ldr	r3, [pc, #12]	; (80050d8 <bekle+0x128>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	429a      	cmp	r2, r3
 80050ce:	d0ee      	beq.n	80050ae <bekle+0xfe>
    }

}
 80050d0:	bf00      	nop
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	20000aec 	.word	0x20000aec
 80050d8:	20000af4 	.word	0x20000af4
 80050dc:	20000b3e 	.word	0x20000b3e
 80050e0:	40010800 	.word	0x40010800
 80050e4:	40011000 	.word	0x40011000

080050e8 <i2cTest>:

void i2cTest() {
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef strutturaGPIO = {0};
 80050ee:	463b      	mov	r3, r7
 80050f0:	2200      	movs	r2, #0
 80050f2:	601a      	str	r2, [r3, #0]
 80050f4:	605a      	str	r2, [r3, #4]
 80050f6:	609a      	str	r2, [r3, #8]
 80050f8:	60da      	str	r2, [r3, #12]

	hi2c1.Instance->CR1 &= ~(1 << 0);
 80050fa:	4b50      	ldr	r3, [pc, #320]	; (800523c <i2cTest+0x154>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681a      	ldr	r2, [r3, #0]
 8005100:	4b4e      	ldr	r3, [pc, #312]	; (800523c <i2cTest+0x154>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f022 0201 	bic.w	r2, r2, #1
 8005108:	601a      	str	r2, [r3, #0]
	HAL_I2C_DeInit(&hi2c1);
 800510a:	484c      	ldr	r0, [pc, #304]	; (800523c <i2cTest+0x154>)
 800510c:	f003 fdec 	bl	8008ce8 <HAL_I2C_DeInit>

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005110:	23c0      	movs	r3, #192	; 0xc0
 8005112:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_OUTPUT_OD;
 8005114:	2311      	movs	r3, #17
 8005116:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 8005118:	2301      	movs	r3, #1
 800511a:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 800511c:	2303      	movs	r3, #3
 800511e:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 8005120:	463b      	mov	r3, r7
 8005122:	4619      	mov	r1, r3
 8005124:	4846      	ldr	r0, [pc, #280]	; (8005240 <i2cTest+0x158>)
 8005126:	f003 f9f3 	bl	8008510 <HAL_GPIO_Init>

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800512a:	2201      	movs	r2, #1
 800512c:	2140      	movs	r1, #64	; 0x40
 800512e:	4844      	ldr	r0, [pc, #272]	; (8005240 <i2cTest+0x158>)
 8005130:	f003 fc65 	bl	80089fe <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8005134:	2201      	movs	r2, #1
 8005136:	2180      	movs	r1, #128	; 0x80
 8005138:	4841      	ldr	r0, [pc, #260]	; (8005240 <i2cTest+0x158>)
 800513a:	f003 fc60 	bl	80089fe <HAL_GPIO_WritePin>

    //lcd_print(1,1," test-1         ");
    //lcd_print(2,1,"SCL and SDL LOW ");
    HAL_Delay(10);
 800513e:	200a      	movs	r0, #10
 8005140:	f002 fe76 	bl	8007e30 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 8005144:	bf00      	nop
 8005146:	2140      	movs	r1, #64	; 0x40
 8005148:	483d      	ldr	r0, [pc, #244]	; (8005240 <i2cTest+0x158>)
 800514a:	f003 fc41 	bl	80089d0 <HAL_GPIO_ReadPin>
 800514e:	4603      	mov	r3, r0
 8005150:	2b01      	cmp	r3, #1
 8005152:	d006      	beq.n	8005162 <i2cTest+0x7a>
 8005154:	2180      	movs	r1, #128	; 0x80
 8005156:	483a      	ldr	r0, [pc, #232]	; (8005240 <i2cTest+0x158>)
 8005158:	f003 fc3a 	bl	80089d0 <HAL_GPIO_ReadPin>
 800515c:	4603      	mov	r3, r0
 800515e:	2b01      	cmp	r3, #1
 8005160:	d1f1      	bne.n	8005146 <i2cTest+0x5e>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 8005162:	2200      	movs	r2, #0
 8005164:	2180      	movs	r1, #128	; 0x80
 8005166:	4836      	ldr	r0, [pc, #216]	; (8005240 <i2cTest+0x158>)
 8005168:	f003 fc49 	bl	80089fe <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-2         ");
  //  lcd_print(2,1,"SCL and SDL HIGH");
    HAL_Delay(10);
 800516c:	200a      	movs	r0, #10
 800516e:	f002 fe5f 	bl	8007e30 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) == GPIO_PIN_SET){
 8005172:	bf00      	nop
 8005174:	2180      	movs	r1, #128	; 0x80
 8005176:	4832      	ldr	r0, [pc, #200]	; (8005240 <i2cTest+0x158>)
 8005178:	f003 fc2a 	bl	80089d0 <HAL_GPIO_ReadPin>
 800517c:	4603      	mov	r3, r0
 800517e:	2b01      	cmp	r3, #1
 8005180:	d0f8      	beq.n	8005174 <i2cTest+0x8c>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8005182:	2200      	movs	r2, #0
 8005184:	2140      	movs	r1, #64	; 0x40
 8005186:	482e      	ldr	r0, [pc, #184]	; (8005240 <i2cTest+0x158>)
 8005188:	f003 fc39 	bl	80089fe <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-3         ");
  //  lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 800518c:	200a      	movs	r0, #10
 800518e:	f002 fe4f 	bl	8007e30 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) == GPIO_PIN_SET){
 8005192:	bf00      	nop
 8005194:	2140      	movs	r1, #64	; 0x40
 8005196:	482a      	ldr	r0, [pc, #168]	; (8005240 <i2cTest+0x158>)
 8005198:	f003 fc1a 	bl	80089d0 <HAL_GPIO_ReadPin>
 800519c:	4603      	mov	r3, r0
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d0f8      	beq.n	8005194 <i2cTest+0xac>

	}

	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80051a2:	2201      	movs	r2, #1
 80051a4:	2140      	movs	r1, #64	; 0x40
 80051a6:	4826      	ldr	r0, [pc, #152]	; (8005240 <i2cTest+0x158>)
 80051a8:	f003 fc29 	bl	80089fe <HAL_GPIO_WritePin>
  //  lcd_print(1,1," test-4         ");
 //   lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 80051ac:	200a      	movs	r0, #10
 80051ae:	f002 fe3f 	bl	8007e30 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6) != GPIO_PIN_SET){
 80051b2:	bf00      	nop
 80051b4:	2140      	movs	r1, #64	; 0x40
 80051b6:	4822      	ldr	r0, [pc, #136]	; (8005240 <i2cTest+0x158>)
 80051b8:	f003 fc0a 	bl	80089d0 <HAL_GPIO_ReadPin>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d1f8      	bne.n	80051b4 <i2cTest+0xcc>

	}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80051c2:	2201      	movs	r2, #1
 80051c4:	2180      	movs	r1, #128	; 0x80
 80051c6:	481e      	ldr	r0, [pc, #120]	; (8005240 <i2cTest+0x158>)
 80051c8:	f003 fc19 	bl	80089fe <HAL_GPIO_WritePin>
   // lcd_print(1,1," test-5         ");
   // lcd_print(2,1,"SCL   ----- HIGH");
    HAL_Delay(10);
 80051cc:	200a      	movs	r0, #10
 80051ce:	f002 fe2f 	bl	8007e30 <HAL_Delay>
	while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) != GPIO_PIN_SET){
 80051d2:	bf00      	nop
 80051d4:	2180      	movs	r1, #128	; 0x80
 80051d6:	481a      	ldr	r0, [pc, #104]	; (8005240 <i2cTest+0x158>)
 80051d8:	f003 fbfa 	bl	80089d0 <HAL_GPIO_ReadPin>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b01      	cmp	r3, #1
 80051e0:	d1f8      	bne.n	80051d4 <i2cTest+0xec>

	}

	strutturaGPIO.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80051e2:	23c0      	movs	r3, #192	; 0xc0
 80051e4:	603b      	str	r3, [r7, #0]
	strutturaGPIO.Mode = GPIO_MODE_AF_OD;
 80051e6:	2312      	movs	r3, #18
 80051e8:	607b      	str	r3, [r7, #4]
	strutturaGPIO.Pull = GPIO_PULLUP;
 80051ea:	2301      	movs	r3, #1
 80051ec:	60bb      	str	r3, [r7, #8]
	strutturaGPIO.Speed = GPIO_SPEED_HIGH;
 80051ee:	2303      	movs	r3, #3
 80051f0:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(GPIOB, &strutturaGPIO);
 80051f2:	463b      	mov	r3, r7
 80051f4:	4619      	mov	r1, r3
 80051f6:	4812      	ldr	r0, [pc, #72]	; (8005240 <i2cTest+0x158>)
 80051f8:	f003 f98a 	bl	8008510 <HAL_GPIO_Init>

	hi2c1.Instance->CR1 |= 1 << 15;
 80051fc:	4b0f      	ldr	r3, [pc, #60]	; (800523c <i2cTest+0x154>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	4b0e      	ldr	r3, [pc, #56]	; (800523c <i2cTest+0x154>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800520a:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 &= ~(1 << 15);
 800520c:	4b0b      	ldr	r3, [pc, #44]	; (800523c <i2cTest+0x154>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	4b0a      	ldr	r3, [pc, #40]	; (800523c <i2cTest+0x154>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800521a:	601a      	str	r2, [r3, #0]

	hi2c1.Instance->CR1 |= 1 << 0;
 800521c:	4b07      	ldr	r3, [pc, #28]	; (800523c <i2cTest+0x154>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	4b06      	ldr	r3, [pc, #24]	; (800523c <i2cTest+0x154>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f042 0201 	orr.w	r2, r2, #1
 800522a:	601a      	str	r2, [r3, #0]

	HAL_I2C_Init(&hi2c1);
 800522c:	4803      	ldr	r0, [pc, #12]	; (800523c <i2cTest+0x154>)
 800522e:	f003 fc17 	bl	8008a60 <HAL_I2C_Init>
}
 8005232:	bf00      	nop
 8005234:	3710      	adds	r7, #16
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	20000ce0 	.word	0x20000ce0
 8005240:	40010c00 	.word	0x40010c00

08005244 <checkLCDBacklight>:

void checkLCDBacklight() {
 8005244:	b580      	push	{r7, lr}
 8005246:	af00      	add	r7, sp, #0
	if(millis - backLightTimer >= lcdBacklightSure) {
 8005248:	4b08      	ldr	r3, [pc, #32]	; (800526c <checkLCDBacklight+0x28>)
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	4b08      	ldr	r3, [pc, #32]	; (8005270 <checkLCDBacklight+0x2c>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	4a08      	ldr	r2, [pc, #32]	; (8005274 <checkLCDBacklight+0x30>)
 8005254:	7812      	ldrb	r2, [r2, #0]
 8005256:	4293      	cmp	r3, r2
 8005258:	d303      	bcc.n	8005262 <checkLCDBacklight+0x1e>
				lcd_backlight(0);
 800525a:	2000      	movs	r0, #0
 800525c:	f7fb faf2 	bl	8000844 <lcd_backlight>
			} else {
				lcd_backlight(1);
			}
}
 8005260:	e002      	b.n	8005268 <checkLCDBacklight+0x24>
				lcd_backlight(1);
 8005262:	2001      	movs	r0, #1
 8005264:	f7fb faee 	bl	8000844 <lcd_backlight>
}
 8005268:	bf00      	nop
 800526a:	bd80      	pop	{r7, pc}
 800526c:	20000aec 	.word	0x20000aec
 8005270:	20000b08 	.word	0x20000b08
 8005274:	20000940 	.word	0x20000940

08005278 <checkBasincSalteri>:

void checkBasincSalteri() {
 8005278:	b580      	push	{r7, lr}
 800527a:	af00      	add	r7, sp, #0
	if(basincSalteri==0) {
 800527c:	4b13      	ldr	r3, [pc, #76]	; (80052cc <checkBasincSalteri+0x54>)
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d102      	bne.n	800528a <checkBasincSalteri+0x12>
				basincVar=1;
 8005284:	4b12      	ldr	r3, [pc, #72]	; (80052d0 <checkBasincSalteri+0x58>)
 8005286:	2201      	movs	r2, #1
 8005288:	701a      	strb	r2, [r3, #0]
			}

			if(basincSalteri==1) {
 800528a:	4b10      	ldr	r3, [pc, #64]	; (80052cc <checkBasincSalteri+0x54>)
 800528c:	781b      	ldrb	r3, [r3, #0]
 800528e:	2b01      	cmp	r3, #1
 8005290:	d119      	bne.n	80052c6 <checkBasincSalteri+0x4e>
				if(HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==0) {
 8005292:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005296:	480f      	ldr	r0, [pc, #60]	; (80052d4 <checkBasincSalteri+0x5c>)
 8005298:	f003 fb9a 	bl	80089d0 <HAL_GPIO_ReadPin>
 800529c:	4603      	mov	r3, r0
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d10a      	bne.n	80052b8 <checkBasincSalteri+0x40>
					if(millis-timer5>=3) {
 80052a2:	4b0d      	ldr	r3, [pc, #52]	; (80052d8 <checkBasincSalteri+0x60>)
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	4b0d      	ldr	r3, [pc, #52]	; (80052dc <checkBasincSalteri+0x64>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	1ad3      	subs	r3, r2, r3
 80052ac:	2b02      	cmp	r3, #2
 80052ae:	d90a      	bls.n	80052c6 <checkBasincSalteri+0x4e>
						basincVar=1;
 80052b0:	4b07      	ldr	r3, [pc, #28]	; (80052d0 <checkBasincSalteri+0x58>)
 80052b2:	2201      	movs	r2, #1
 80052b4:	701a      	strb	r2, [r3, #0]
				} else {
					timer5=millis;
					basincVar=0;
				}
			}
}
 80052b6:	e006      	b.n	80052c6 <checkBasincSalteri+0x4e>
					timer5=millis;
 80052b8:	4b07      	ldr	r3, [pc, #28]	; (80052d8 <checkBasincSalteri+0x60>)
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a07      	ldr	r2, [pc, #28]	; (80052dc <checkBasincSalteri+0x64>)
 80052be:	6013      	str	r3, [r2, #0]
					basincVar=0;
 80052c0:	4b03      	ldr	r3, [pc, #12]	; (80052d0 <checkBasincSalteri+0x58>)
 80052c2:	2200      	movs	r2, #0
 80052c4:	701a      	strb	r2, [r3, #0]
}
 80052c6:	bf00      	nop
 80052c8:	bd80      	pop	{r7, pc}
 80052ca:	bf00      	nop
 80052cc:	20000b17 	.word	0x20000b17
 80052d0:	20000b13 	.word	0x20000b13
 80052d4:	40011000 	.word	0x40011000
 80052d8:	20000aec 	.word	0x20000aec
 80052dc:	20000b04 	.word	0x20000b04

080052e0 <checkBasGonder>:

void checkBasGonder() {
 80052e0:	b480      	push	{r7}
 80052e2:	af00      	add	r7, sp, #0
	if((calismaSekli==1)&&(yukarimotorcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 80052e4:	4b1b      	ldr	r3, [pc, #108]	; (8005354 <checkBasGonder+0x74>)
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d10b      	bne.n	8005304 <checkBasGonder+0x24>
 80052ec:	4b1a      	ldr	r3, [pc, #104]	; (8005358 <checkBasGonder+0x78>)
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d007      	beq.n	8005304 <checkBasGonder+0x24>
 80052f4:	4b19      	ldr	r3, [pc, #100]	; (800535c <checkBasGonder+0x7c>)
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d103      	bne.n	8005304 <checkBasGonder+0x24>
				basgondercalisyukari=1;
 80052fc:	4b18      	ldr	r3, [pc, #96]	; (8005360 <checkBasGonder+0x80>)
 80052fe:	2201      	movs	r2, #1
 8005300:	701a      	strb	r2, [r3, #0]
 8005302:	e009      	b.n	8005318 <checkBasGonder+0x38>
			} else if(yukarimotorcalisiyor==0) {
 8005304:	4b14      	ldr	r3, [pc, #80]	; (8005358 <checkBasGonder+0x78>)
 8005306:	781b      	ldrb	r3, [r3, #0]
 8005308:	f083 0301 	eor.w	r3, r3, #1
 800530c:	b2db      	uxtb	r3, r3
 800530e:	2b00      	cmp	r3, #0
 8005310:	d002      	beq.n	8005318 <checkBasGonder+0x38>
				basgondercalisyukari=0;
 8005312:	4b13      	ldr	r3, [pc, #76]	; (8005360 <checkBasGonder+0x80>)
 8005314:	2200      	movs	r2, #0
 8005316:	701a      	strb	r2, [r3, #0]
			}

			if((calismaSekli==1)&&(asagivalfcalisiyor==1)&&(devirmeYuruyusSecim==0)) {
 8005318:	4b0e      	ldr	r3, [pc, #56]	; (8005354 <checkBasGonder+0x74>)
 800531a:	781b      	ldrb	r3, [r3, #0]
 800531c:	2b01      	cmp	r3, #1
 800531e:	d10b      	bne.n	8005338 <checkBasGonder+0x58>
 8005320:	4b10      	ldr	r3, [pc, #64]	; (8005364 <checkBasGonder+0x84>)
 8005322:	781b      	ldrb	r3, [r3, #0]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d007      	beq.n	8005338 <checkBasGonder+0x58>
 8005328:	4b0c      	ldr	r3, [pc, #48]	; (800535c <checkBasGonder+0x7c>)
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d103      	bne.n	8005338 <checkBasGonder+0x58>
				basgondercalisasagi=1;
 8005330:	4b0d      	ldr	r3, [pc, #52]	; (8005368 <checkBasGonder+0x88>)
 8005332:	2201      	movs	r2, #1
 8005334:	701a      	strb	r2, [r3, #0]
			} else if(asagivalfcalisiyor==0) {
				basgondercalisasagi=0;
			}
}
 8005336:	e009      	b.n	800534c <checkBasGonder+0x6c>
			} else if(asagivalfcalisiyor==0) {
 8005338:	4b0a      	ldr	r3, [pc, #40]	; (8005364 <checkBasGonder+0x84>)
 800533a:	781b      	ldrb	r3, [r3, #0]
 800533c:	f083 0301 	eor.w	r3, r3, #1
 8005340:	b2db      	uxtb	r3, r3
 8005342:	2b00      	cmp	r3, #0
 8005344:	d002      	beq.n	800534c <checkBasGonder+0x6c>
				basgondercalisasagi=0;
 8005346:	4b08      	ldr	r3, [pc, #32]	; (8005368 <checkBasGonder+0x88>)
 8005348:	2200      	movs	r2, #0
 800534a:	701a      	strb	r2, [r3, #0]
}
 800534c:	bf00      	nop
 800534e:	46bd      	mov	sp, r7
 8005350:	bc80      	pop	{r7}
 8005352:	4770      	bx	lr
 8005354:	20000b11 	.word	0x20000b11
 8005358:	20000b44 	.word	0x20000b44
 800535c:	20000b1f 	.word	0x20000b1f
 8005360:	20000b4b 	.word	0x20000b4b
 8005364:	20000b47 	.word	0x20000b47
 8005368:	20000b4c 	.word	0x20000b4c

0800536c <checkKapiSecimleri>:

void checkKapiSecimleri() {
 800536c:	b580      	push	{r7, lr}
 800536e:	af00      	add	r7, sp, #0
	if(kapiSecimleri==0) {
 8005370:	4b24      	ldr	r3, [pc, #144]	; (8005404 <checkKapiSecimleri+0x98>)
 8005372:	781b      	ldrb	r3, [r3, #0]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d102      	bne.n	800537e <checkKapiSecimleri+0x12>
				kapiSivicVar=1;
 8005378:	4b23      	ldr	r3, [pc, #140]	; (8005408 <checkKapiSecimleri+0x9c>)
 800537a:	2201      	movs	r2, #1
 800537c:	701a      	strb	r2, [r3, #0]
			}

			if(kapiSecimleri==1) {
 800537e:	4b21      	ldr	r3, [pc, #132]	; (8005404 <checkKapiSecimleri+0x98>)
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	2b01      	cmp	r3, #1
 8005384:	d10e      	bne.n	80053a4 <checkKapiSecimleri+0x38>
				if(HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8005386:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800538a:	4820      	ldr	r0, [pc, #128]	; (800540c <checkKapiSecimleri+0xa0>)
 800538c:	f003 fb20 	bl	80089d0 <HAL_GPIO_ReadPin>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d103      	bne.n	800539e <checkKapiSecimleri+0x32>
					kapiSivicVar=1;
 8005396:	4b1c      	ldr	r3, [pc, #112]	; (8005408 <checkKapiSecimleri+0x9c>)
 8005398:	2201      	movs	r2, #1
 800539a:	701a      	strb	r2, [r3, #0]
 800539c:	e002      	b.n	80053a4 <checkKapiSecimleri+0x38>
				} else {
					kapiSivicVar=0;
 800539e:	4b1a      	ldr	r3, [pc, #104]	; (8005408 <checkKapiSecimleri+0x9c>)
 80053a0:	2200      	movs	r2, #0
 80053a2:	701a      	strb	r2, [r3, #0]
				}
			}

			if(kapiSecimleri==2){
 80053a4:	4b17      	ldr	r3, [pc, #92]	; (8005404 <checkKapiSecimleri+0x98>)
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	2b02      	cmp	r3, #2
 80053aa:	d10e      	bne.n	80053ca <checkKapiSecimleri+0x5e>
				if(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0) {
 80053ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80053b0:	4816      	ldr	r0, [pc, #88]	; (800540c <checkKapiSecimleri+0xa0>)
 80053b2:	f003 fb0d 	bl	80089d0 <HAL_GPIO_ReadPin>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d103      	bne.n	80053c4 <checkKapiSecimleri+0x58>
					kapiSivicVar=1;
 80053bc:	4b12      	ldr	r3, [pc, #72]	; (8005408 <checkKapiSecimleri+0x9c>)
 80053be:	2201      	movs	r2, #1
 80053c0:	701a      	strb	r2, [r3, #0]
 80053c2:	e002      	b.n	80053ca <checkKapiSecimleri+0x5e>
				} else {
					kapiSivicVar=0;
 80053c4:	4b10      	ldr	r3, [pc, #64]	; (8005408 <checkKapiSecimleri+0x9c>)
 80053c6:	2200      	movs	r2, #0
 80053c8:	701a      	strb	r2, [r3, #0]
				}
			}

			if(kapiSecimleri==3) {
 80053ca:	4b0e      	ldr	r3, [pc, #56]	; (8005404 <checkKapiSecimleri+0x98>)
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	2b03      	cmp	r3, #3
 80053d0:	d116      	bne.n	8005400 <checkKapiSecimleri+0x94>
				if((HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0)&&(HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0)) {
 80053d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80053d6:	480d      	ldr	r0, [pc, #52]	; (800540c <checkKapiSecimleri+0xa0>)
 80053d8:	f003 fafa 	bl	80089d0 <HAL_GPIO_ReadPin>
 80053dc:	4603      	mov	r3, r0
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d10b      	bne.n	80053fa <checkKapiSecimleri+0x8e>
 80053e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80053e6:	4809      	ldr	r0, [pc, #36]	; (800540c <checkKapiSecimleri+0xa0>)
 80053e8:	f003 faf2 	bl	80089d0 <HAL_GPIO_ReadPin>
 80053ec:	4603      	mov	r3, r0
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d103      	bne.n	80053fa <checkKapiSecimleri+0x8e>
					kapiSivicVar=1;
 80053f2:	4b05      	ldr	r3, [pc, #20]	; (8005408 <checkKapiSecimleri+0x9c>)
 80053f4:	2201      	movs	r2, #1
 80053f6:	701a      	strb	r2, [r3, #0]
				} else {
					kapiSivicVar=0;
				}
			}
}
 80053f8:	e002      	b.n	8005400 <checkKapiSecimleri+0x94>
					kapiSivicVar=0;
 80053fa:	4b03      	ldr	r3, [pc, #12]	; (8005408 <checkKapiSecimleri+0x9c>)
 80053fc:	2200      	movs	r2, #0
 80053fe:	701a      	strb	r2, [r3, #0]
}
 8005400:	bf00      	nop
 8005402:	bd80      	pop	{r7, pc}
 8005404:	20000b18 	.word	0x20000b18
 8005408:	20000b62 	.word	0x20000b62
 800540c:	40010800 	.word	0x40010800

08005410 <checkAktifCalisma>:

void checkAktifCalisma() {
 8005410:	b580      	push	{r7, lr}
 8005412:	af00      	add	r7, sp, #0
	if(demoMode==0 && menuGiris==0) {
 8005414:	4b62      	ldr	r3, [pc, #392]	; (80055a0 <checkAktifCalisma+0x190>)
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	f041 8332 	bne.w	8006a82 <checkAktifCalisma+0x1672>
 800541e:	4b61      	ldr	r3, [pc, #388]	; (80055a4 <checkAktifCalisma+0x194>)
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	2b00      	cmp	r3, #0
 8005424:	f041 832d 	bne.w	8006a82 <checkAktifCalisma+0x1672>
				if(((yukarimotorcalisiyor)||(devmotoryukaricalisiyor)||((asagivalfcalisiyor)&&(butonKontrol2==0)&&(platformSilindirTipi==1))||((devmotorasagicalisiyor)&&(devirmeSilindirTipi)==1))&&(stopVar)&&(kapiSivicVar)) {
 8005428:	4b5f      	ldr	r3, [pc, #380]	; (80055a8 <checkAktifCalisma+0x198>)
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d11a      	bne.n	8005466 <checkAktifCalisma+0x56>
 8005430:	4b5e      	ldr	r3, [pc, #376]	; (80055ac <checkAktifCalisma+0x19c>)
 8005432:	781b      	ldrb	r3, [r3, #0]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d116      	bne.n	8005466 <checkAktifCalisma+0x56>
 8005438:	4b5d      	ldr	r3, [pc, #372]	; (80055b0 <checkAktifCalisma+0x1a0>)
 800543a:	781b      	ldrb	r3, [r3, #0]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00a      	beq.n	8005456 <checkAktifCalisma+0x46>
 8005440:	4b5c      	ldr	r3, [pc, #368]	; (80055b4 <checkAktifCalisma+0x1a4>)
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	f083 0301 	eor.w	r3, r3, #1
 8005448:	b2db      	uxtb	r3, r3
 800544a:	2b00      	cmp	r3, #0
 800544c:	d003      	beq.n	8005456 <checkAktifCalisma+0x46>
 800544e:	4b5a      	ldr	r3, [pc, #360]	; (80055b8 <checkAktifCalisma+0x1a8>)
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	2b01      	cmp	r3, #1
 8005454:	d007      	beq.n	8005466 <checkAktifCalisma+0x56>
 8005456:	4b59      	ldr	r3, [pc, #356]	; (80055bc <checkAktifCalisma+0x1ac>)
 8005458:	781b      	ldrb	r3, [r3, #0]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d018      	beq.n	8005490 <checkAktifCalisma+0x80>
 800545e:	4b58      	ldr	r3, [pc, #352]	; (80055c0 <checkAktifCalisma+0x1b0>)
 8005460:	781b      	ldrb	r3, [r3, #0]
 8005462:	2b01      	cmp	r3, #1
 8005464:	d114      	bne.n	8005490 <checkAktifCalisma+0x80>
 8005466:	4b57      	ldr	r3, [pc, #348]	; (80055c4 <checkAktifCalisma+0x1b4>)
 8005468:	781b      	ldrb	r3, [r3, #0]
 800546a:	2b00      	cmp	r3, #0
 800546c:	d010      	beq.n	8005490 <checkAktifCalisma+0x80>
 800546e:	4b56      	ldr	r3, [pc, #344]	; (80055c8 <checkAktifCalisma+0x1b8>)
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d00c      	beq.n	8005490 <checkAktifCalisma+0x80>

					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8005476:	2201      	movs	r2, #1
 8005478:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800547c:	4853      	ldr	r0, [pc, #332]	; (80055cc <checkAktifCalisma+0x1bc>)
 800547e:	f003 fabe 	bl	80089fe <HAL_GPIO_WritePin>
					motorcalisiyor=1;
 8005482:	4b53      	ldr	r3, [pc, #332]	; (80055d0 <checkAktifCalisma+0x1c0>)
 8005484:	2201      	movs	r2, #1
 8005486:	701a      	strb	r2, [r3, #0]
					CalismaSayisiYukari=1;
 8005488:	4b52      	ldr	r3, [pc, #328]	; (80055d4 <checkAktifCalisma+0x1c4>)
 800548a:	2201      	movs	r2, #1
 800548c:	701a      	strb	r2, [r3, #0]
 800548e:	e008      	b.n	80054a2 <checkAktifCalisma+0x92>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8005490:	2200      	movs	r2, #0
 8005492:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005496:	484d      	ldr	r0, [pc, #308]	; (80055cc <checkAktifCalisma+0x1bc>)
 8005498:	f003 fab1 	bl	80089fe <HAL_GPIO_WritePin>
					motorcalisiyor=0;
 800549c:	4b4c      	ldr	r3, [pc, #304]	; (80055d0 <checkAktifCalisma+0x1c0>)
 800549e:	2200      	movs	r2, #0
 80054a0:	701a      	strb	r2, [r3, #0]
				}

				/*YUKARI ÇALISMA*/

				if((menuGiris==0) && (stopVar) && (kapiSivicVar)																			/********* motor calısması ***********/
 80054a2:	4b40      	ldr	r3, [pc, #256]	; (80055a4 <checkAktifCalisma+0x194>)
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d160      	bne.n	800556c <checkAktifCalisma+0x15c>
 80054aa:	4b46      	ldr	r3, [pc, #280]	; (80055c4 <checkAktifCalisma+0x1b4>)
 80054ac:	781b      	ldrb	r3, [r3, #0]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d05c      	beq.n	800556c <checkAktifCalisma+0x15c>
 80054b2:	4b45      	ldr	r3, [pc, #276]	; (80055c8 <checkAktifCalisma+0x1b8>)
 80054b4:	781b      	ldrb	r3, [r3, #0]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d058      	beq.n	800556c <checkAktifCalisma+0x15c>
							&& ((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)||(basgondercalisyukari))
 80054ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80054be:	4843      	ldr	r0, [pc, #268]	; (80055cc <checkAktifCalisma+0x1bc>)
 80054c0:	f003 fa86 	bl	80089d0 <HAL_GPIO_ReadPin>
 80054c4:	4603      	mov	r3, r0
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d003      	beq.n	80054d2 <checkAktifCalisma+0xc2>
 80054ca:	4b43      	ldr	r3, [pc, #268]	; (80055d8 <checkAktifCalisma+0x1c8>)
 80054cc:	781b      	ldrb	r3, [r3, #0]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d04c      	beq.n	800556c <checkAktifCalisma+0x15c>
							&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 80054d2:	2102      	movs	r1, #2
 80054d4:	4841      	ldr	r0, [pc, #260]	; (80055dc <checkAktifCalisma+0x1cc>)
 80054d6:	f003 fa7b 	bl	80089d0 <HAL_GPIO_ReadPin>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d145      	bne.n	800556c <checkAktifCalisma+0x15c>
							&& (basincVar)
 80054e0:	4b3f      	ldr	r3, [pc, #252]	; (80055e0 <checkAktifCalisma+0x1d0>)
 80054e2:	781b      	ldrb	r3, [r3, #0]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d041      	beq.n	800556c <checkAktifCalisma+0x15c>
							&& (((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)
 80054e8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80054ec:	4837      	ldr	r0, [pc, #220]	; (80055cc <checkAktifCalisma+0x1bc>)
 80054ee:	f003 fa6f 	bl	80089d0 <HAL_GPIO_ReadPin>
 80054f2:	4603      	mov	r3, r0
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d10e      	bne.n	8005516 <checkAktifCalisma+0x106>
							&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 80054f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80054fc:	4833      	ldr	r0, [pc, #204]	; (80055cc <checkAktifCalisma+0x1bc>)
 80054fe:	f003 fa67 	bl	80089d0 <HAL_GPIO_ReadPin>
 8005502:	4603      	mov	r3, r0
 8005504:	2b01      	cmp	r3, #1
 8005506:	d106      	bne.n	8005516 <checkAktifCalisma+0x106>
							&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(yukarimotorcalisiyor))
 8005508:	2140      	movs	r1, #64	; 0x40
 800550a:	4834      	ldr	r0, [pc, #208]	; (80055dc <checkAktifCalisma+0x1cc>)
 800550c:	f003 fa60 	bl	80089d0 <HAL_GPIO_ReadPin>
 8005510:	4603      	mov	r3, r0
 8005512:	2b01      	cmp	r3, #1
 8005514:	d003      	beq.n	800551e <checkAktifCalisma+0x10e>
 8005516:	4b24      	ldr	r3, [pc, #144]	; (80055a8 <checkAktifCalisma+0x198>)
 8005518:	781b      	ldrb	r3, [r3, #0]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d026      	beq.n	800556c <checkAktifCalisma+0x15c>
							&& (asagivalfcalisiyor==0)
 800551e:	4b24      	ldr	r3, [pc, #144]	; (80055b0 <checkAktifCalisma+0x1a0>)
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	f083 0301 	eor.w	r3, r3, #1
 8005526:	b2db      	uxtb	r3, r3
 8005528:	2b00      	cmp	r3, #0
 800552a:	d01f      	beq.n	800556c <checkAktifCalisma+0x15c>
							&& (devmotoryukaricalisiyor==0)
 800552c:	4b1f      	ldr	r3, [pc, #124]	; (80055ac <checkAktifCalisma+0x19c>)
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	f083 0301 	eor.w	r3, r3, #1
 8005534:	b2db      	uxtb	r3, r3
 8005536:	2b00      	cmp	r3, #0
 8005538:	d018      	beq.n	800556c <checkAktifCalisma+0x15c>
							&& (devmotorasagicalisiyor==0)
 800553a:	4b20      	ldr	r3, [pc, #128]	; (80055bc <checkAktifCalisma+0x1ac>)
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	f083 0301 	eor.w	r3, r3, #1
 8005542:	b2db      	uxtb	r3, r3
 8005544:	2b00      	cmp	r3, #0
 8005546:	d011      	beq.n	800556c <checkAktifCalisma+0x15c>
							&&(devyukarivalfcalisiyor==0)
 8005548:	4b26      	ldr	r3, [pc, #152]	; (80055e4 <checkAktifCalisma+0x1d4>)
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	f083 0301 	eor.w	r3, r3, #1
 8005550:	b2db      	uxtb	r3, r3
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00a      	beq.n	800556c <checkAktifCalisma+0x15c>
							&&(devasagivalfcalisiyor==0)) {
 8005556:	4b24      	ldr	r3, [pc, #144]	; (80055e8 <checkAktifCalisma+0x1d8>)
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	f083 0301 	eor.w	r3, r3, #1
 800555e:	b2db      	uxtb	r3, r3
 8005560:	2b00      	cmp	r3, #0
 8005562:	d003      	beq.n	800556c <checkAktifCalisma+0x15c>
					yukarimotorcalisiyor=1;
 8005564:	4b10      	ldr	r3, [pc, #64]	; (80055a8 <checkAktifCalisma+0x198>)
 8005566:	2201      	movs	r2, #1
 8005568:	701a      	strb	r2, [r3, #0]
 800556a:	e002      	b.n	8005572 <checkAktifCalisma+0x162>
				} else {
					yukarimotorcalisiyor=0;
 800556c:	4b0e      	ldr	r3, [pc, #56]	; (80055a8 <checkAktifCalisma+0x198>)
 800556e:	2200      	movs	r2, #0
 8005570:	701a      	strb	r2, [r3, #0]
				}

				if((yukarimotorcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariYavaslamaLimitIn_GPIO_Port, yukariYavaslamaLimitIn_Pin)==1))&&(yukariYavasLimit))) {	/* ikinci hız */
 8005572:	4b0d      	ldr	r3, [pc, #52]	; (80055a8 <checkAktifCalisma+0x198>)
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d03a      	beq.n	80055f0 <checkAktifCalisma+0x1e0>
 800557a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800557e:	4817      	ldr	r0, [pc, #92]	; (80055dc <checkAktifCalisma+0x1cc>)
 8005580:	f003 fa26 	bl	80089d0 <HAL_GPIO_ReadPin>
 8005584:	4603      	mov	r3, r0
 8005586:	2b01      	cmp	r3, #1
 8005588:	d132      	bne.n	80055f0 <checkAktifCalisma+0x1e0>
 800558a:	4b18      	ldr	r3, [pc, #96]	; (80055ec <checkAktifCalisma+0x1dc>)
 800558c:	781b      	ldrb	r3, [r3, #0]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d02e      	beq.n	80055f0 <checkAktifCalisma+0x1e0>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8005592:	2201      	movs	r2, #1
 8005594:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005598:	480c      	ldr	r0, [pc, #48]	; (80055cc <checkAktifCalisma+0x1bc>)
 800559a:	f003 fa30 	bl	80089fe <HAL_GPIO_WritePin>
 800559e:	e02d      	b.n	80055fc <checkAktifCalisma+0x1ec>
 80055a0:	20000b2e 	.word	0x20000b2e
 80055a4:	20000b2d 	.word	0x20000b2d
 80055a8:	20000b44 	.word	0x20000b44
 80055ac:	20000b45 	.word	0x20000b45
 80055b0:	20000b47 	.word	0x20000b47
 80055b4:	20000b3f 	.word	0x20000b3f
 80055b8:	20000b23 	.word	0x20000b23
 80055bc:	20000b46 	.word	0x20000b46
 80055c0:	20000b22 	.word	0x20000b22
 80055c4:	20000b61 	.word	0x20000b61
 80055c8:	20000b62 	.word	0x20000b62
 80055cc:	40010c00 	.word	0x40010c00
 80055d0:	20000b63 	.word	0x20000b63
 80055d4:	20000b4e 	.word	0x20000b4e
 80055d8:	20000b4b 	.word	0x20000b4b
 80055dc:	40011000 	.word	0x40011000
 80055e0:	20000b13 	.word	0x20000b13
 80055e4:	20000b49 	.word	0x20000b49
 80055e8:	20000b4a 	.word	0x20000b4a
 80055ec:	20000b1e 	.word	0x20000b1e
				} else {
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 80055f0:	2200      	movs	r2, #0
 80055f2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80055f6:	4860      	ldr	r0, [pc, #384]	; (8005778 <checkAktifCalisma+0x368>)
 80055f8:	f003 fa01 	bl	80089fe <HAL_GPIO_WritePin>
				}

				if(yukarimotorcalisiyor && (devirmeYuruyusSecim==1 || devirmeYuruyusSecim==2 || platformSilindirTipi==1)) {
 80055fc:	4b5f      	ldr	r3, [pc, #380]	; (800577c <checkAktifCalisma+0x36c>)
 80055fe:	781b      	ldrb	r3, [r3, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d013      	beq.n	800562c <checkAktifCalisma+0x21c>
 8005604:	4b5e      	ldr	r3, [pc, #376]	; (8005780 <checkAktifCalisma+0x370>)
 8005606:	781b      	ldrb	r3, [r3, #0]
 8005608:	2b01      	cmp	r3, #1
 800560a:	d007      	beq.n	800561c <checkAktifCalisma+0x20c>
 800560c:	4b5c      	ldr	r3, [pc, #368]	; (8005780 <checkAktifCalisma+0x370>)
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	2b02      	cmp	r3, #2
 8005612:	d003      	beq.n	800561c <checkAktifCalisma+0x20c>
 8005614:	4b5b      	ldr	r3, [pc, #364]	; (8005784 <checkAktifCalisma+0x374>)
 8005616:	781b      	ldrb	r3, [r3, #0]
 8005618:	2b01      	cmp	r3, #1
 800561a:	d107      	bne.n	800562c <checkAktifCalisma+0x21c>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 800561c:	2201      	movs	r2, #1
 800561e:	2104      	movs	r1, #4
 8005620:	4855      	ldr	r0, [pc, #340]	; (8005778 <checkAktifCalisma+0x368>)
 8005622:	f003 f9ec 	bl	80089fe <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=1;
 8005626:	4b58      	ldr	r3, [pc, #352]	; (8005788 <checkAktifCalisma+0x378>)
 8005628:	2201      	movs	r2, #1
 800562a:	701a      	strb	r2, [r3, #0]
				}

				// yukari valf timer calisması

				if((yukarivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)&&(basgondercalisyukari==0))||(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(basincVar)&&(butonKontrol3==0)) {
 800562c:	4b56      	ldr	r3, [pc, #344]	; (8005788 <checkAktifCalisma+0x378>)
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d02f      	beq.n	8005694 <checkAktifCalisma+0x284>
 8005634:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005638:	484f      	ldr	r0, [pc, #316]	; (8005778 <checkAktifCalisma+0x368>)
 800563a:	f003 f9c9 	bl	80089d0 <HAL_GPIO_ReadPin>
 800563e:	4603      	mov	r3, r0
 8005640:	2b01      	cmp	r3, #1
 8005642:	d106      	bne.n	8005652 <checkAktifCalisma+0x242>
 8005644:	4b51      	ldr	r3, [pc, #324]	; (800578c <checkAktifCalisma+0x37c>)
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	f083 0301 	eor.w	r3, r3, #1
 800564c:	b2db      	uxtb	r3, r3
 800564e:	2b00      	cmp	r3, #0
 8005650:	d106      	bne.n	8005660 <checkAktifCalisma+0x250>
 8005652:	2102      	movs	r1, #2
 8005654:	484e      	ldr	r0, [pc, #312]	; (8005790 <checkAktifCalisma+0x380>)
 8005656:	f003 f9bb 	bl	80089d0 <HAL_GPIO_ReadPin>
 800565a:	4603      	mov	r3, r0
 800565c:	2b01      	cmp	r3, #1
 800565e:	d119      	bne.n	8005694 <checkAktifCalisma+0x284>
 8005660:	4b4c      	ldr	r3, [pc, #304]	; (8005794 <checkAktifCalisma+0x384>)
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d015      	beq.n	8005694 <checkAktifCalisma+0x284>
 8005668:	4b4b      	ldr	r3, [pc, #300]	; (8005798 <checkAktifCalisma+0x388>)
 800566a:	781b      	ldrb	r3, [r3, #0]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d011      	beq.n	8005694 <checkAktifCalisma+0x284>
 8005670:	4b4a      	ldr	r3, [pc, #296]	; (800579c <checkAktifCalisma+0x38c>)
 8005672:	781b      	ldrb	r3, [r3, #0]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00d      	beq.n	8005694 <checkAktifCalisma+0x284>
 8005678:	4b49      	ldr	r3, [pc, #292]	; (80057a0 <checkAktifCalisma+0x390>)
 800567a:	781b      	ldrb	r3, [r3, #0]
 800567c:	f083 0301 	eor.w	r3, r3, #1
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2b00      	cmp	r3, #0
 8005684:	d006      	beq.n	8005694 <checkAktifCalisma+0x284>
					timer2=millis;
 8005686:	4b47      	ldr	r3, [pc, #284]	; (80057a4 <checkAktifCalisma+0x394>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4a47      	ldr	r2, [pc, #284]	; (80057a8 <checkAktifCalisma+0x398>)
 800568c:	6013      	str	r3, [r2, #0]
					butonKontrol3=1;
 800568e:	4b44      	ldr	r3, [pc, #272]	; (80057a0 <checkAktifCalisma+0x390>)
 8005690:	2201      	movs	r2, #1
 8005692:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= yukariValfTmr)&&(butonKontrol3==1))||((stopVar==0)||(kapiSivicVar==0)||(basincVar==0)))) {
 8005694:	4b43      	ldr	r3, [pc, #268]	; (80057a4 <checkAktifCalisma+0x394>)
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	4b43      	ldr	r3, [pc, #268]	; (80057a8 <checkAktifCalisma+0x398>)
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	1ad3      	subs	r3, r2, r3
 800569e:	4a43      	ldr	r2, [pc, #268]	; (80057ac <checkAktifCalisma+0x39c>)
 80056a0:	7812      	ldrb	r2, [r2, #0]
 80056a2:	4293      	cmp	r3, r2
 80056a4:	d303      	bcc.n	80056ae <checkAktifCalisma+0x29e>
 80056a6:	4b3e      	ldr	r3, [pc, #248]	; (80057a0 <checkAktifCalisma+0x390>)
 80056a8:	781b      	ldrb	r3, [r3, #0]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d111      	bne.n	80056d2 <checkAktifCalisma+0x2c2>
 80056ae:	4b39      	ldr	r3, [pc, #228]	; (8005794 <checkAktifCalisma+0x384>)
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	f083 0301 	eor.w	r3, r3, #1
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d10a      	bne.n	80056d2 <checkAktifCalisma+0x2c2>
 80056bc:	4b36      	ldr	r3, [pc, #216]	; (8005798 <checkAktifCalisma+0x388>)
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	f083 0301 	eor.w	r3, r3, #1
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d103      	bne.n	80056d2 <checkAktifCalisma+0x2c2>
 80056ca:	4b34      	ldr	r3, [pc, #208]	; (800579c <checkAktifCalisma+0x38c>)
 80056cc:	781b      	ldrb	r3, [r3, #0]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10a      	bne.n	80056e8 <checkAktifCalisma+0x2d8>
					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 80056d2:	2200      	movs	r2, #0
 80056d4:	2104      	movs	r1, #4
 80056d6:	4828      	ldr	r0, [pc, #160]	; (8005778 <checkAktifCalisma+0x368>)
 80056d8:	f003 f991 	bl	80089fe <HAL_GPIO_WritePin>
					yukarivalfcalisiyor=0;
 80056dc:	4b2a      	ldr	r3, [pc, #168]	; (8005788 <checkAktifCalisma+0x378>)
 80056de:	2200      	movs	r2, #0
 80056e0:	701a      	strb	r2, [r3, #0]
					butonKontrol3=0;
 80056e2:	4b2f      	ldr	r3, [pc, #188]	; (80057a0 <checkAktifCalisma+0x390>)
 80056e4:	2200      	movs	r2, #0
 80056e6:	701a      	strb	r2, [r3, #0]
				}

				//Ond safety

				if(emniyetCercevesi==0) {
 80056e8:	4b31      	ldr	r3, [pc, #196]	; (80057b0 <checkAktifCalisma+0x3a0>)
 80056ea:	781b      	ldrb	r3, [r3, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d102      	bne.n	80056f6 <checkAktifCalisma+0x2e6>
					cerceveVar=1;
 80056f0:	4b30      	ldr	r3, [pc, #192]	; (80057b4 <checkAktifCalisma+0x3a4>)
 80056f2:	2201      	movs	r2, #1
 80056f4:	701a      	strb	r2, [r3, #0]
				}

				if((emniyetCercevesi==1)&&(calismaSekli==0)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0)&&(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0)) {
 80056f6:	4b2e      	ldr	r3, [pc, #184]	; (80057b0 <checkAktifCalisma+0x3a0>)
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	2b01      	cmp	r3, #1
 80056fc:	d116      	bne.n	800572c <checkAktifCalisma+0x31c>
 80056fe:	4b2e      	ldr	r3, [pc, #184]	; (80057b8 <checkAktifCalisma+0x3a8>)
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d112      	bne.n	800572c <checkAktifCalisma+0x31c>
 8005706:	2101      	movs	r1, #1
 8005708:	4821      	ldr	r0, [pc, #132]	; (8005790 <checkAktifCalisma+0x380>)
 800570a:	f003 f961 	bl	80089d0 <HAL_GPIO_ReadPin>
 800570e:	4603      	mov	r3, r0
 8005710:	2b00      	cmp	r3, #0
 8005712:	d10b      	bne.n	800572c <checkAktifCalisma+0x31c>
 8005714:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005718:	4817      	ldr	r0, [pc, #92]	; (8005778 <checkAktifCalisma+0x368>)
 800571a:	f003 f959 	bl	80089d0 <HAL_GPIO_ReadPin>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d103      	bne.n	800572c <checkAktifCalisma+0x31c>
					cerceveVar=1;
 8005724:	4b23      	ldr	r3, [pc, #140]	; (80057b4 <checkAktifCalisma+0x3a4>)
 8005726:	2201      	movs	r2, #1
 8005728:	701a      	strb	r2, [r3, #0]
 800572a:	e011      	b.n	8005750 <checkAktifCalisma+0x340>
				} else if((emniyetCercevesi==1)&&(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==1)&&(calismaSekli==0)) {
 800572c:	4b20      	ldr	r3, [pc, #128]	; (80057b0 <checkAktifCalisma+0x3a0>)
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	2b01      	cmp	r3, #1
 8005732:	d10d      	bne.n	8005750 <checkAktifCalisma+0x340>
 8005734:	2101      	movs	r1, #1
 8005736:	4816      	ldr	r0, [pc, #88]	; (8005790 <checkAktifCalisma+0x380>)
 8005738:	f003 f94a 	bl	80089d0 <HAL_GPIO_ReadPin>
 800573c:	4603      	mov	r3, r0
 800573e:	2b01      	cmp	r3, #1
 8005740:	d106      	bne.n	8005750 <checkAktifCalisma+0x340>
 8005742:	4b1d      	ldr	r3, [pc, #116]	; (80057b8 <checkAktifCalisma+0x3a8>)
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d102      	bne.n	8005750 <checkAktifCalisma+0x340>
					cerceveVar=0;
 800574a:	4b1a      	ldr	r3, [pc, #104]	; (80057b4 <checkAktifCalisma+0x3a4>)
 800574c:	2200      	movs	r2, #0
 800574e:	701a      	strb	r2, [r3, #0]
				}

				if (emniyetCercevesi==1 && calismaSekli==1) {
 8005750:	4b17      	ldr	r3, [pc, #92]	; (80057b0 <checkAktifCalisma+0x3a0>)
 8005752:	781b      	ldrb	r3, [r3, #0]
 8005754:	2b01      	cmp	r3, #1
 8005756:	d134      	bne.n	80057c2 <checkAktifCalisma+0x3b2>
 8005758:	4b17      	ldr	r3, [pc, #92]	; (80057b8 <checkAktifCalisma+0x3a8>)
 800575a:	781b      	ldrb	r3, [r3, #0]
 800575c:	2b01      	cmp	r3, #1
 800575e:	d130      	bne.n	80057c2 <checkAktifCalisma+0x3b2>
					if(HAL_GPIO_ReadPin(emniyetCercevesiIn_GPIO_Port, emniyetCercevesiIn_Pin)==0) {
 8005760:	2101      	movs	r1, #1
 8005762:	480b      	ldr	r0, [pc, #44]	; (8005790 <checkAktifCalisma+0x380>)
 8005764:	f003 f934 	bl	80089d0 <HAL_GPIO_ReadPin>
 8005768:	4603      	mov	r3, r0
 800576a:	2b00      	cmp	r3, #0
 800576c:	d126      	bne.n	80057bc <checkAktifCalisma+0x3ac>
						cerceveVar=1;
 800576e:	4b11      	ldr	r3, [pc, #68]	; (80057b4 <checkAktifCalisma+0x3a4>)
 8005770:	2201      	movs	r2, #1
 8005772:	701a      	strb	r2, [r3, #0]
 8005774:	e025      	b.n	80057c2 <checkAktifCalisma+0x3b2>
 8005776:	bf00      	nop
 8005778:	40010c00 	.word	0x40010c00
 800577c:	20000b44 	.word	0x20000b44
 8005780:	20000b1f 	.word	0x20000b1f
 8005784:	20000b23 	.word	0x20000b23
 8005788:	20000b48 	.word	0x20000b48
 800578c:	20000b4b 	.word	0x20000b4b
 8005790:	40011000 	.word	0x40011000
 8005794:	20000b61 	.word	0x20000b61
 8005798:	20000b62 	.word	0x20000b62
 800579c:	20000b13 	.word	0x20000b13
 80057a0:	20000b40 	.word	0x20000b40
 80057a4:	20000aec 	.word	0x20000aec
 80057a8:	20000af8 	.word	0x20000af8
 80057ac:	20000b24 	.word	0x20000b24
 80057b0:	20000b14 	.word	0x20000b14
 80057b4:	20000b66 	.word	0x20000b66
 80057b8:	20000b11 	.word	0x20000b11
					} else {
						cerceveVar=0;
 80057bc:	4b7f      	ldr	r3, [pc, #508]	; (80059bc <checkAktifCalisma+0x5ac>)
 80057be:	2200      	movs	r2, #0
 80057c0:	701a      	strb	r2, [r3, #0]
					}
				}

				//Asagi calisma
				if((menuGiris==0)&& (stopVar)&& (kapiSivicVar)
 80057c2:	4b7f      	ldr	r3, [pc, #508]	; (80059c0 <checkAktifCalisma+0x5b0>)
 80057c4:	781b      	ldrb	r3, [r3, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d17c      	bne.n	80058c4 <checkAktifCalisma+0x4b4>
 80057ca:	4b7e      	ldr	r3, [pc, #504]	; (80059c4 <checkAktifCalisma+0x5b4>)
 80057cc:	781b      	ldrb	r3, [r3, #0]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d078      	beq.n	80058c4 <checkAktifCalisma+0x4b4>
 80057d2:	4b7d      	ldr	r3, [pc, #500]	; (80059c8 <checkAktifCalisma+0x5b8>)
 80057d4:	781b      	ldrb	r3, [r3, #0]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d074      	beq.n	80058c4 <checkAktifCalisma+0x4b4>
						&& ((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0)||(basgondercalisasagi))
 80057da:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80057de:	487b      	ldr	r0, [pc, #492]	; (80059cc <checkAktifCalisma+0x5bc>)
 80057e0:	f003 f8f6 	bl	80089d0 <HAL_GPIO_ReadPin>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d003      	beq.n	80057f2 <checkAktifCalisma+0x3e2>
 80057ea:	4b79      	ldr	r3, [pc, #484]	; (80059d0 <checkAktifCalisma+0x5c0>)
 80057ec:	781b      	ldrb	r3, [r3, #0]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d068      	beq.n	80058c4 <checkAktifCalisma+0x4b4>
						&& (cerceveVar)&&(emniyetCercevesihatasi==0)
 80057f2:	4b72      	ldr	r3, [pc, #456]	; (80059bc <checkAktifCalisma+0x5ac>)
 80057f4:	781b      	ldrb	r3, [r3, #0]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d064      	beq.n	80058c4 <checkAktifCalisma+0x4b4>
 80057fa:	4b76      	ldr	r3, [pc, #472]	; (80059d4 <checkAktifCalisma+0x5c4>)
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	f083 0301 	eor.w	r3, r3, #1
 8005802:	b2db      	uxtb	r3, r3
 8005804:	2b00      	cmp	r3, #0
 8005806:	d05d      	beq.n	80058c4 <checkAktifCalisma+0x4b4>
						&& ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))
 8005808:	2104      	movs	r1, #4
 800580a:	4873      	ldr	r0, [pc, #460]	; (80059d8 <checkAktifCalisma+0x5c8>)
 800580c:	f003 f8e0 	bl	80089d0 <HAL_GPIO_ReadPin>
 8005810:	4603      	mov	r3, r0
 8005812:	2b00      	cmp	r3, #0
 8005814:	d003      	beq.n	800581e <checkAktifCalisma+0x40e>
 8005816:	4b71      	ldr	r3, [pc, #452]	; (80059dc <checkAktifCalisma+0x5cc>)
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d152      	bne.n	80058c4 <checkAktifCalisma+0x4b4>
						&& (((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 800581e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005822:	486a      	ldr	r0, [pc, #424]	; (80059cc <checkAktifCalisma+0x5bc>)
 8005824:	f003 f8d4 	bl	80089d0 <HAL_GPIO_ReadPin>
 8005828:	4603      	mov	r3, r0
 800582a:	2b01      	cmp	r3, #1
 800582c:	d10e      	bne.n	800584c <checkAktifCalisma+0x43c>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 800582e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005832:	4866      	ldr	r0, [pc, #408]	; (80059cc <checkAktifCalisma+0x5bc>)
 8005834:	f003 f8cc 	bl	80089d0 <HAL_GPIO_ReadPin>
 8005838:	4603      	mov	r3, r0
 800583a:	2b01      	cmp	r3, #1
 800583c:	d106      	bne.n	800584c <checkAktifCalisma+0x43c>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1))||(asagivalfcalisiyor))
 800583e:	2140      	movs	r1, #64	; 0x40
 8005840:	4865      	ldr	r0, [pc, #404]	; (80059d8 <checkAktifCalisma+0x5c8>)
 8005842:	f003 f8c5 	bl	80089d0 <HAL_GPIO_ReadPin>
 8005846:	4603      	mov	r3, r0
 8005848:	2b01      	cmp	r3, #1
 800584a:	d003      	beq.n	8005854 <checkAktifCalisma+0x444>
 800584c:	4b64      	ldr	r3, [pc, #400]	; (80059e0 <checkAktifCalisma+0x5d0>)
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	2b00      	cmp	r3, #0
 8005852:	d037      	beq.n	80058c4 <checkAktifCalisma+0x4b4>
						&& (yukarimotorcalisiyor==0)
 8005854:	4b63      	ldr	r3, [pc, #396]	; (80059e4 <checkAktifCalisma+0x5d4>)
 8005856:	781b      	ldrb	r3, [r3, #0]
 8005858:	f083 0301 	eor.w	r3, r3, #1
 800585c:	b2db      	uxtb	r3, r3
 800585e:	2b00      	cmp	r3, #0
 8005860:	d030      	beq.n	80058c4 <checkAktifCalisma+0x4b4>
						&& (yukarivalfcalisiyor==0)
 8005862:	4b61      	ldr	r3, [pc, #388]	; (80059e8 <checkAktifCalisma+0x5d8>)
 8005864:	781b      	ldrb	r3, [r3, #0]
 8005866:	f083 0301 	eor.w	r3, r3, #1
 800586a:	b2db      	uxtb	r3, r3
 800586c:	2b00      	cmp	r3, #0
 800586e:	d029      	beq.n	80058c4 <checkAktifCalisma+0x4b4>
				  	  	&& (devmotoryukaricalisiyor==0)
 8005870:	4b5e      	ldr	r3, [pc, #376]	; (80059ec <checkAktifCalisma+0x5dc>)
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	f083 0301 	eor.w	r3, r3, #1
 8005878:	b2db      	uxtb	r3, r3
 800587a:	2b00      	cmp	r3, #0
 800587c:	d022      	beq.n	80058c4 <checkAktifCalisma+0x4b4>
						&& (devmotorasagicalisiyor==0)
 800587e:	4b5c      	ldr	r3, [pc, #368]	; (80059f0 <checkAktifCalisma+0x5e0>)
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	f083 0301 	eor.w	r3, r3, #1
 8005886:	b2db      	uxtb	r3, r3
 8005888:	2b00      	cmp	r3, #0
 800588a:	d01b      	beq.n	80058c4 <checkAktifCalisma+0x4b4>
						&& (devyukarivalfcalisiyor==0)
 800588c:	4b59      	ldr	r3, [pc, #356]	; (80059f4 <checkAktifCalisma+0x5e4>)
 800588e:	781b      	ldrb	r3, [r3, #0]
 8005890:	f083 0301 	eor.w	r3, r3, #1
 8005894:	b2db      	uxtb	r3, r3
 8005896:	2b00      	cmp	r3, #0
 8005898:	d014      	beq.n	80058c4 <checkAktifCalisma+0x4b4>
						&& (devasagivalfcalisiyor==0)) {
 800589a:	4b57      	ldr	r3, [pc, #348]	; (80059f8 <checkAktifCalisma+0x5e8>)
 800589c:	781b      	ldrb	r3, [r3, #0]
 800589e:	f083 0301 	eor.w	r3, r3, #1
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00d      	beq.n	80058c4 <checkAktifCalisma+0x4b4>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 80058a8:	2201      	movs	r2, #1
 80058aa:	2102      	movs	r1, #2
 80058ac:	4847      	ldr	r0, [pc, #284]	; (80059cc <checkAktifCalisma+0x5bc>)
 80058ae:	f003 f8a6 	bl	80089fe <HAL_GPIO_WritePin>
					asagivalfcalisiyor=1;
 80058b2:	4b4b      	ldr	r3, [pc, #300]	; (80059e0 <checkAktifCalisma+0x5d0>)
 80058b4:	2201      	movs	r2, #1
 80058b6:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=1;
 80058b8:	4b50      	ldr	r3, [pc, #320]	; (80059fc <checkAktifCalisma+0x5ec>)
 80058ba:	2201      	movs	r2, #1
 80058bc:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=1;
 80058be:	4b50      	ldr	r3, [pc, #320]	; (8005a00 <checkAktifCalisma+0x5f0>)
 80058c0:	2201      	movs	r2, #1
 80058c2:	701a      	strb	r2, [r3, #0]
				}

				// asagi valf timer calisması

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1)&&(basgondercalisasagi==0))||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit)))&&(stopVar)&&(kapiSivicVar)&&(cerceveVar)&&(butonKontrol2==0)) {
 80058c4:	4b46      	ldr	r3, [pc, #280]	; (80059e0 <checkAktifCalisma+0x5d0>)
 80058c6:	781b      	ldrb	r3, [r3, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d033      	beq.n	8005934 <checkAktifCalisma+0x524>
 80058cc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80058d0:	483e      	ldr	r0, [pc, #248]	; (80059cc <checkAktifCalisma+0x5bc>)
 80058d2:	f003 f87d 	bl	80089d0 <HAL_GPIO_ReadPin>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d106      	bne.n	80058ea <checkAktifCalisma+0x4da>
 80058dc:	4b3c      	ldr	r3, [pc, #240]	; (80059d0 <checkAktifCalisma+0x5c0>)
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	f083 0301 	eor.w	r3, r3, #1
 80058e4:	b2db      	uxtb	r3, r3
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d10a      	bne.n	8005900 <checkAktifCalisma+0x4f0>
 80058ea:	2104      	movs	r1, #4
 80058ec:	483a      	ldr	r0, [pc, #232]	; (80059d8 <checkAktifCalisma+0x5c8>)
 80058ee:	f003 f86f 	bl	80089d0 <HAL_GPIO_ReadPin>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b01      	cmp	r3, #1
 80058f6:	d11d      	bne.n	8005934 <checkAktifCalisma+0x524>
 80058f8:	4b38      	ldr	r3, [pc, #224]	; (80059dc <checkAktifCalisma+0x5cc>)
 80058fa:	781b      	ldrb	r3, [r3, #0]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d019      	beq.n	8005934 <checkAktifCalisma+0x524>
 8005900:	4b30      	ldr	r3, [pc, #192]	; (80059c4 <checkAktifCalisma+0x5b4>)
 8005902:	781b      	ldrb	r3, [r3, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d015      	beq.n	8005934 <checkAktifCalisma+0x524>
 8005908:	4b2f      	ldr	r3, [pc, #188]	; (80059c8 <checkAktifCalisma+0x5b8>)
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d011      	beq.n	8005934 <checkAktifCalisma+0x524>
 8005910:	4b2a      	ldr	r3, [pc, #168]	; (80059bc <checkAktifCalisma+0x5ac>)
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d00d      	beq.n	8005934 <checkAktifCalisma+0x524>
 8005918:	4b3a      	ldr	r3, [pc, #232]	; (8005a04 <checkAktifCalisma+0x5f4>)
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	f083 0301 	eor.w	r3, r3, #1
 8005920:	b2db      	uxtb	r3, r3
 8005922:	2b00      	cmp	r3, #0
 8005924:	d006      	beq.n	8005934 <checkAktifCalisma+0x524>
					timer2=millis;
 8005926:	4b38      	ldr	r3, [pc, #224]	; (8005a08 <checkAktifCalisma+0x5f8>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a38      	ldr	r2, [pc, #224]	; (8005a0c <checkAktifCalisma+0x5fc>)
 800592c:	6013      	str	r3, [r2, #0]
					butonKontrol2=1;
 800592e:	4b35      	ldr	r3, [pc, #212]	; (8005a04 <checkAktifCalisma+0x5f4>)
 8005930:	2201      	movs	r2, #1
 8005932:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= asagiValfTmr)&&(butonKontrol2==1))||((stopVar==0)||(kapiSivicVar==0)||(cerceveVar==0)))) {
 8005934:	4b34      	ldr	r3, [pc, #208]	; (8005a08 <checkAktifCalisma+0x5f8>)
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	4b34      	ldr	r3, [pc, #208]	; (8005a0c <checkAktifCalisma+0x5fc>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	1ad3      	subs	r3, r2, r3
 800593e:	4a34      	ldr	r2, [pc, #208]	; (8005a10 <checkAktifCalisma+0x600>)
 8005940:	7812      	ldrb	r2, [r2, #0]
 8005942:	4293      	cmp	r3, r2
 8005944:	d303      	bcc.n	800594e <checkAktifCalisma+0x53e>
 8005946:	4b2f      	ldr	r3, [pc, #188]	; (8005a04 <checkAktifCalisma+0x5f4>)
 8005948:	781b      	ldrb	r3, [r3, #0]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d114      	bne.n	8005978 <checkAktifCalisma+0x568>
 800594e:	4b1d      	ldr	r3, [pc, #116]	; (80059c4 <checkAktifCalisma+0x5b4>)
 8005950:	781b      	ldrb	r3, [r3, #0]
 8005952:	f083 0301 	eor.w	r3, r3, #1
 8005956:	b2db      	uxtb	r3, r3
 8005958:	2b00      	cmp	r3, #0
 800595a:	d10d      	bne.n	8005978 <checkAktifCalisma+0x568>
 800595c:	4b1a      	ldr	r3, [pc, #104]	; (80059c8 <checkAktifCalisma+0x5b8>)
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	f083 0301 	eor.w	r3, r3, #1
 8005964:	b2db      	uxtb	r3, r3
 8005966:	2b00      	cmp	r3, #0
 8005968:	d106      	bne.n	8005978 <checkAktifCalisma+0x568>
 800596a:	4b14      	ldr	r3, [pc, #80]	; (80059bc <checkAktifCalisma+0x5ac>)
 800596c:	781b      	ldrb	r3, [r3, #0]
 800596e:	f083 0301 	eor.w	r3, r3, #1
 8005972:	b2db      	uxtb	r3, r3
 8005974:	2b00      	cmp	r3, #0
 8005976:	d00a      	beq.n	800598e <checkAktifCalisma+0x57e>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8005978:	2200      	movs	r2, #0
 800597a:	2102      	movs	r1, #2
 800597c:	4813      	ldr	r0, [pc, #76]	; (80059cc <checkAktifCalisma+0x5bc>)
 800597e:	f003 f83e 	bl	80089fe <HAL_GPIO_WritePin>
					asagivalfcalisiyor=0;
 8005982:	4b17      	ldr	r3, [pc, #92]	; (80059e0 <checkAktifCalisma+0x5d0>)
 8005984:	2200      	movs	r2, #0
 8005986:	701a      	strb	r2, [r3, #0]
					butonKontrol2=0;
 8005988:	4b1e      	ldr	r3, [pc, #120]	; (8005a04 <checkAktifCalisma+0x5f4>)
 800598a:	2200      	movs	r2, #0
 800598c:	701a      	strb	r2, [r3, #0]
				}

				//yavaslama valf

				if((asagivalfcalisiyor==1)&&(((HAL_GPIO_ReadPin(yavaslamaLimitIn_GPIO_Port, yavaslamaLimitIn_Pin)==0))&&(yavaslamaLimit))) {	/* ikinci hız */
 800598e:	4b14      	ldr	r3, [pc, #80]	; (80059e0 <checkAktifCalisma+0x5d0>)
 8005990:	781b      	ldrb	r3, [r3, #0]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d040      	beq.n	8005a18 <checkAktifCalisma+0x608>
 8005996:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800599a:	480f      	ldr	r0, [pc, #60]	; (80059d8 <checkAktifCalisma+0x5c8>)
 800599c:	f003 f818 	bl	80089d0 <HAL_GPIO_ReadPin>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d138      	bne.n	8005a18 <checkAktifCalisma+0x608>
 80059a6:	4b1b      	ldr	r3, [pc, #108]	; (8005a14 <checkAktifCalisma+0x604>)
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d034      	beq.n	8005a18 <checkAktifCalisma+0x608>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 80059ae:	2201      	movs	r2, #1
 80059b0:	2101      	movs	r1, #1
 80059b2:	4806      	ldr	r0, [pc, #24]	; (80059cc <checkAktifCalisma+0x5bc>)
 80059b4:	f003 f823 	bl	80089fe <HAL_GPIO_WritePin>
 80059b8:	e033      	b.n	8005a22 <checkAktifCalisma+0x612>
 80059ba:	bf00      	nop
 80059bc:	20000b66 	.word	0x20000b66
 80059c0:	20000b2d 	.word	0x20000b2d
 80059c4:	20000b61 	.word	0x20000b61
 80059c8:	20000b62 	.word	0x20000b62
 80059cc:	40010c00 	.word	0x40010c00
 80059d0:	20000b4c 	.word	0x20000b4c
 80059d4:	20000b60 	.word	0x20000b60
 80059d8:	40011000 	.word	0x40011000
 80059dc:	20000b16 	.word	0x20000b16
 80059e0:	20000b47 	.word	0x20000b47
 80059e4:	20000b44 	.word	0x20000b44
 80059e8:	20000b48 	.word	0x20000b48
 80059ec:	20000b45 	.word	0x20000b45
 80059f0:	20000b46 	.word	0x20000b46
 80059f4:	20000b49 	.word	0x20000b49
 80059f8:	20000b4a 	.word	0x20000b4a
 80059fc:	20000b4f 	.word	0x20000b4f
 8005a00:	20000b70 	.word	0x20000b70
 8005a04:	20000b3f 	.word	0x20000b3f
 8005a08:	20000aec 	.word	0x20000aec
 8005a0c:	20000af8 	.word	0x20000af8
 8005a10:	20000b25 	.word	0x20000b25
 8005a14:	20000b15 	.word	0x20000b15
				} else {
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8005a18:	2200      	movs	r2, #0
 8005a1a:	2101      	movs	r1, #1
 8005a1c:	4836      	ldr	r0, [pc, #216]	; (8005af8 <checkAktifCalisma+0x6e8>)
 8005a1e:	f002 ffee 	bl	80089fe <HAL_GPIO_WritePin>
				}

				/*DEVIRME veya YURUYUS Baslangic*/

				// Devirme Yukari veya yuruyus ileri calisma
				if((menuGiris==0)
 8005a22:	4b36      	ldr	r3, [pc, #216]	; (8005afc <checkAktifCalisma+0x6ec>)
 8005a24:	781b      	ldrb	r3, [r3, #0]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	f040 8080 	bne.w	8005b2c <checkAktifCalisma+0x71c>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005a2c:	4b34      	ldr	r3, [pc, #208]	; (8005b00 <checkAktifCalisma+0x6f0>)
 8005a2e:	781b      	ldrb	r3, [r3, #0]
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d003      	beq.n	8005a3c <checkAktifCalisma+0x62c>
 8005a34:	4b32      	ldr	r3, [pc, #200]	; (8005b00 <checkAktifCalisma+0x6f0>)
 8005a36:	781b      	ldrb	r3, [r3, #0]
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d177      	bne.n	8005b2c <checkAktifCalisma+0x71c>
						&& (stopVar) && (kapiSivicVar)
 8005a3c:	4b31      	ldr	r3, [pc, #196]	; (8005b04 <checkAktifCalisma+0x6f4>)
 8005a3e:	781b      	ldrb	r3, [r3, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d073      	beq.n	8005b2c <checkAktifCalisma+0x71c>
 8005a44:	4b30      	ldr	r3, [pc, #192]	; (8005b08 <checkAktifCalisma+0x6f8>)
 8005a46:	781b      	ldrb	r3, [r3, #0]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d06f      	beq.n	8005b2c <checkAktifCalisma+0x71c>
						&& (HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0)
 8005a4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005a50:	4829      	ldr	r0, [pc, #164]	; (8005af8 <checkAktifCalisma+0x6e8>)
 8005a52:	f002 ffbd 	bl	80089d0 <HAL_GPIO_ReadPin>
 8005a56:	4603      	mov	r3, r0
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d167      	bne.n	8005b2c <checkAktifCalisma+0x71c>
						&& ((HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)||!(devirmeYukariIleriLimit))
 8005a5c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005a60:	482a      	ldr	r0, [pc, #168]	; (8005b0c <checkAktifCalisma+0x6fc>)
 8005a62:	f002 ffb5 	bl	80089d0 <HAL_GPIO_ReadPin>
 8005a66:	4603      	mov	r3, r0
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d003      	beq.n	8005a74 <checkAktifCalisma+0x664>
 8005a6c:	4b28      	ldr	r3, [pc, #160]	; (8005b10 <checkAktifCalisma+0x700>)
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d15b      	bne.n	8005b2c <checkAktifCalisma+0x71c>
						&& (((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)
 8005a74:	2140      	movs	r1, #64	; 0x40
 8005a76:	4825      	ldr	r0, [pc, #148]	; (8005b0c <checkAktifCalisma+0x6fc>)
 8005a78:	f002 ffaa 	bl	80089d0 <HAL_GPIO_ReadPin>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b01      	cmp	r3, #1
 8005a80:	d10f      	bne.n	8005aa2 <checkAktifCalisma+0x692>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005a82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005a86:	481c      	ldr	r0, [pc, #112]	; (8005af8 <checkAktifCalisma+0x6e8>)
 8005a88:	f002 ffa2 	bl	80089d0 <HAL_GPIO_ReadPin>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d107      	bne.n	8005aa2 <checkAktifCalisma+0x692>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotoryukaricalisiyor))
 8005a92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005a96:	4818      	ldr	r0, [pc, #96]	; (8005af8 <checkAktifCalisma+0x6e8>)
 8005a98:	f002 ff9a 	bl	80089d0 <HAL_GPIO_ReadPin>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d003      	beq.n	8005aaa <checkAktifCalisma+0x69a>
 8005aa2:	4b1c      	ldr	r3, [pc, #112]	; (8005b14 <checkAktifCalisma+0x704>)
 8005aa4:	781b      	ldrb	r3, [r3, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d040      	beq.n	8005b2c <checkAktifCalisma+0x71c>
						&& (yukarimotorcalisiyor==0)
 8005aaa:	4b1b      	ldr	r3, [pc, #108]	; (8005b18 <checkAktifCalisma+0x708>)
 8005aac:	781b      	ldrb	r3, [r3, #0]
 8005aae:	f083 0301 	eor.w	r3, r3, #1
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d039      	beq.n	8005b2c <checkAktifCalisma+0x71c>
						&& (yukarivalfcalisiyor==0)
 8005ab8:	4b18      	ldr	r3, [pc, #96]	; (8005b1c <checkAktifCalisma+0x70c>)
 8005aba:	781b      	ldrb	r3, [r3, #0]
 8005abc:	f083 0301 	eor.w	r3, r3, #1
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d032      	beq.n	8005b2c <checkAktifCalisma+0x71c>
						&& (asagivalfcalisiyor==0)
 8005ac6:	4b16      	ldr	r3, [pc, #88]	; (8005b20 <checkAktifCalisma+0x710>)
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	f083 0301 	eor.w	r3, r3, #1
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d02b      	beq.n	8005b2c <checkAktifCalisma+0x71c>
						&& (devmotorasagicalisiyor==0)
 8005ad4:	4b13      	ldr	r3, [pc, #76]	; (8005b24 <checkAktifCalisma+0x714>)
 8005ad6:	781b      	ldrb	r3, [r3, #0]
 8005ad8:	f083 0301 	eor.w	r3, r3, #1
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d024      	beq.n	8005b2c <checkAktifCalisma+0x71c>
						&&(devasagivalfcalisiyor==0)) {
 8005ae2:	4b11      	ldr	r3, [pc, #68]	; (8005b28 <checkAktifCalisma+0x718>)
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	f083 0301 	eor.w	r3, r3, #1
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d01d      	beq.n	8005b2c <checkAktifCalisma+0x71c>

					devmotoryukaricalisiyor=1;
 8005af0:	4b08      	ldr	r3, [pc, #32]	; (8005b14 <checkAktifCalisma+0x704>)
 8005af2:	2201      	movs	r2, #1
 8005af4:	701a      	strb	r2, [r3, #0]
 8005af6:	e01c      	b.n	8005b32 <checkAktifCalisma+0x722>
 8005af8:	40010c00 	.word	0x40010c00
 8005afc:	20000b2d 	.word	0x20000b2d
 8005b00:	20000b1f 	.word	0x20000b1f
 8005b04:	20000b61 	.word	0x20000b61
 8005b08:	20000b62 	.word	0x20000b62
 8005b0c:	40011000 	.word	0x40011000
 8005b10:	20000b20 	.word	0x20000b20
 8005b14:	20000b45 	.word	0x20000b45
 8005b18:	20000b44 	.word	0x20000b44
 8005b1c:	20000b48 	.word	0x20000b48
 8005b20:	20000b47 	.word	0x20000b47
 8005b24:	20000b46 	.word	0x20000b46
 8005b28:	20000b4a 	.word	0x20000b4a
				} else {
					devmotoryukaricalisiyor=0;
 8005b2c:	4b64      	ldr	r3, [pc, #400]	; (8005cc0 <checkAktifCalisma+0x8b0>)
 8005b2e:	2200      	movs	r2, #0
 8005b30:	701a      	strb	r2, [r3, #0]
				}

				if(devmotoryukaricalisiyor==1) {
 8005b32:	4b63      	ldr	r3, [pc, #396]	; (8005cc0 <checkAktifCalisma+0x8b0>)
 8005b34:	781b      	ldrb	r3, [r3, #0]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d007      	beq.n	8005b4a <checkAktifCalisma+0x73a>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8005b3a:	2201      	movs	r2, #1
 8005b3c:	2120      	movs	r1, #32
 8005b3e:	4861      	ldr	r0, [pc, #388]	; (8005cc4 <checkAktifCalisma+0x8b4>)
 8005b40:	f002 ff5d 	bl	80089fe <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=1;
 8005b44:	4b60      	ldr	r3, [pc, #384]	; (8005cc8 <checkAktifCalisma+0x8b8>)
 8005b46:	2201      	movs	r2, #1
 8005b48:	701a      	strb	r2, [r3, #0]
				}
				// devirme yukari + yuruyus ileri valf timer calismasi

				if((devyukarivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol4==0)) {
 8005b4a:	4b5f      	ldr	r3, [pc, #380]	; (8005cc8 <checkAktifCalisma+0x8b8>)
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d025      	beq.n	8005b9e <checkAktifCalisma+0x78e>
 8005b52:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005b56:	485d      	ldr	r0, [pc, #372]	; (8005ccc <checkAktifCalisma+0x8bc>)
 8005b58:	f002 ff3a 	bl	80089d0 <HAL_GPIO_ReadPin>
 8005b5c:	4603      	mov	r3, r0
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d007      	beq.n	8005b72 <checkAktifCalisma+0x762>
 8005b62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005b66:	4857      	ldr	r0, [pc, #348]	; (8005cc4 <checkAktifCalisma+0x8b4>)
 8005b68:	f002 ff32 	bl	80089d0 <HAL_GPIO_ReadPin>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d115      	bne.n	8005b9e <checkAktifCalisma+0x78e>
 8005b72:	4b57      	ldr	r3, [pc, #348]	; (8005cd0 <checkAktifCalisma+0x8c0>)
 8005b74:	781b      	ldrb	r3, [r3, #0]
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d011      	beq.n	8005b9e <checkAktifCalisma+0x78e>
 8005b7a:	4b56      	ldr	r3, [pc, #344]	; (8005cd4 <checkAktifCalisma+0x8c4>)
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	d00d      	beq.n	8005b9e <checkAktifCalisma+0x78e>
 8005b82:	4b55      	ldr	r3, [pc, #340]	; (8005cd8 <checkAktifCalisma+0x8c8>)
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	f083 0301 	eor.w	r3, r3, #1
 8005b8a:	b2db      	uxtb	r3, r3
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d006      	beq.n	8005b9e <checkAktifCalisma+0x78e>
					timer2=millis;
 8005b90:	4b52      	ldr	r3, [pc, #328]	; (8005cdc <checkAktifCalisma+0x8cc>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a52      	ldr	r2, [pc, #328]	; (8005ce0 <checkAktifCalisma+0x8d0>)
 8005b96:	6013      	str	r3, [r2, #0]
					butonKontrol4=1;
 8005b98:	4b4f      	ldr	r3, [pc, #316]	; (8005cd8 <checkAktifCalisma+0x8c8>)
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol4==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8005b9e:	4b4f      	ldr	r3, [pc, #316]	; (8005cdc <checkAktifCalisma+0x8cc>)
 8005ba0:	681a      	ldr	r2, [r3, #0]
 8005ba2:	4b4f      	ldr	r3, [pc, #316]	; (8005ce0 <checkAktifCalisma+0x8d0>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	1ad3      	subs	r3, r2, r3
 8005ba8:	4a4e      	ldr	r2, [pc, #312]	; (8005ce4 <checkAktifCalisma+0x8d4>)
 8005baa:	7812      	ldrb	r2, [r2, #0]
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d303      	bcc.n	8005bb8 <checkAktifCalisma+0x7a8>
 8005bb0:	4b49      	ldr	r3, [pc, #292]	; (8005cd8 <checkAktifCalisma+0x8c8>)
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d10d      	bne.n	8005bd4 <checkAktifCalisma+0x7c4>
 8005bb8:	4b45      	ldr	r3, [pc, #276]	; (8005cd0 <checkAktifCalisma+0x8c0>)
 8005bba:	781b      	ldrb	r3, [r3, #0]
 8005bbc:	f083 0301 	eor.w	r3, r3, #1
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d106      	bne.n	8005bd4 <checkAktifCalisma+0x7c4>
 8005bc6:	4b43      	ldr	r3, [pc, #268]	; (8005cd4 <checkAktifCalisma+0x8c4>)
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	f083 0301 	eor.w	r3, r3, #1
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d00a      	beq.n	8005bea <checkAktifCalisma+0x7da>
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	2120      	movs	r1, #32
 8005bd8:	483a      	ldr	r0, [pc, #232]	; (8005cc4 <checkAktifCalisma+0x8b4>)
 8005bda:	f002 ff10 	bl	80089fe <HAL_GPIO_WritePin>
					devyukarivalfcalisiyor=0;
 8005bde:	4b3a      	ldr	r3, [pc, #232]	; (8005cc8 <checkAktifCalisma+0x8b8>)
 8005be0:	2200      	movs	r2, #0
 8005be2:	701a      	strb	r2, [r3, #0]
					butonKontrol4=0;
 8005be4:	4b3c      	ldr	r3, [pc, #240]	; (8005cd8 <checkAktifCalisma+0x8c8>)
 8005be6:	2200      	movs	r2, #0
 8005be8:	701a      	strb	r2, [r3, #0]
				}

				// Devirme Asagi veya yuruyus geri calisma

				if((menuGiris==0)
 8005bea:	4b3f      	ldr	r3, [pc, #252]	; (8005ce8 <checkAktifCalisma+0x8d8>)
 8005bec:	781b      	ldrb	r3, [r3, #0]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	f040 8088 	bne.w	8005d04 <checkAktifCalisma+0x8f4>
						&& ((devirmeYuruyusSecim==1)||(devirmeYuruyusSecim==2))
 8005bf4:	4b3d      	ldr	r3, [pc, #244]	; (8005cec <checkAktifCalisma+0x8dc>)
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	2b01      	cmp	r3, #1
 8005bfa:	d003      	beq.n	8005c04 <checkAktifCalisma+0x7f4>
 8005bfc:	4b3b      	ldr	r3, [pc, #236]	; (8005cec <checkAktifCalisma+0x8dc>)
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d17f      	bne.n	8005d04 <checkAktifCalisma+0x8f4>
						&& (stopVar) && (kapiSivicVar)
 8005c04:	4b32      	ldr	r3, [pc, #200]	; (8005cd0 <checkAktifCalisma+0x8c0>)
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d07b      	beq.n	8005d04 <checkAktifCalisma+0x8f4>
 8005c0c:	4b31      	ldr	r3, [pc, #196]	; (8005cd4 <checkAktifCalisma+0x8c4>)
 8005c0e:	781b      	ldrb	r3, [r3, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d077      	beq.n	8005d04 <checkAktifCalisma+0x8f4>
						&& (HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)
 8005c14:	2140      	movs	r1, #64	; 0x40
 8005c16:	482b      	ldr	r0, [pc, #172]	; (8005cc4 <checkAktifCalisma+0x8b4>)
 8005c18:	f002 feda 	bl	80089d0 <HAL_GPIO_ReadPin>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d170      	bne.n	8005d04 <checkAktifCalisma+0x8f4>
						&& ((HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)||!(devirmeAsagiGeriLimit))
 8005c22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005c26:	4827      	ldr	r0, [pc, #156]	; (8005cc4 <checkAktifCalisma+0x8b4>)
 8005c28:	f002 fed2 	bl	80089d0 <HAL_GPIO_ReadPin>
 8005c2c:	4603      	mov	r3, r0
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d003      	beq.n	8005c3a <checkAktifCalisma+0x82a>
 8005c32:	4b2f      	ldr	r3, [pc, #188]	; (8005cf0 <checkAktifCalisma+0x8e0>)
 8005c34:	781b      	ldrb	r3, [r3, #0]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d164      	bne.n	8005d04 <checkAktifCalisma+0x8f4>
						&& (((HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==1)
 8005c3a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005c3e:	4823      	ldr	r0, [pc, #140]	; (8005ccc <checkAktifCalisma+0x8bc>)
 8005c40:	f002 fec6 	bl	80089d0 <HAL_GPIO_ReadPin>
 8005c44:	4603      	mov	r3, r0
 8005c46:	2b01      	cmp	r3, #1
 8005c48:	d10f      	bne.n	8005c6a <checkAktifCalisma+0x85a>
						&& (HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1)
 8005c4a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005c4e:	481f      	ldr	r0, [pc, #124]	; (8005ccc <checkAktifCalisma+0x8bc>)
 8005c50:	f002 febe 	bl	80089d0 <HAL_GPIO_ReadPin>
 8005c54:	4603      	mov	r3, r0
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d107      	bne.n	8005c6a <checkAktifCalisma+0x85a>
						&& (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==1))||(devmotorasagicalisiyor))
 8005c5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005c5e:	481b      	ldr	r0, [pc, #108]	; (8005ccc <checkAktifCalisma+0x8bc>)
 8005c60:	f002 feb6 	bl	80089d0 <HAL_GPIO_ReadPin>
 8005c64:	4603      	mov	r3, r0
 8005c66:	2b01      	cmp	r3, #1
 8005c68:	d003      	beq.n	8005c72 <checkAktifCalisma+0x862>
 8005c6a:	4b22      	ldr	r3, [pc, #136]	; (8005cf4 <checkAktifCalisma+0x8e4>)
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d048      	beq.n	8005d04 <checkAktifCalisma+0x8f4>
						&& (yukarimotorcalisiyor==0)
 8005c72:	4b21      	ldr	r3, [pc, #132]	; (8005cf8 <checkAktifCalisma+0x8e8>)
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	f083 0301 	eor.w	r3, r3, #1
 8005c7a:	b2db      	uxtb	r3, r3
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d041      	beq.n	8005d04 <checkAktifCalisma+0x8f4>
						&& (yukarivalfcalisiyor==0)
 8005c80:	4b1e      	ldr	r3, [pc, #120]	; (8005cfc <checkAktifCalisma+0x8ec>)
 8005c82:	781b      	ldrb	r3, [r3, #0]
 8005c84:	f083 0301 	eor.w	r3, r3, #1
 8005c88:	b2db      	uxtb	r3, r3
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d03a      	beq.n	8005d04 <checkAktifCalisma+0x8f4>
						&& (asagivalfcalisiyor==0)
 8005c8e:	4b1c      	ldr	r3, [pc, #112]	; (8005d00 <checkAktifCalisma+0x8f0>)
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	f083 0301 	eor.w	r3, r3, #1
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d033      	beq.n	8005d04 <checkAktifCalisma+0x8f4>
						&& (devyukarivalfcalisiyor==0)
 8005c9c:	4b0a      	ldr	r3, [pc, #40]	; (8005cc8 <checkAktifCalisma+0x8b8>)
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	f083 0301 	eor.w	r3, r3, #1
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d02c      	beq.n	8005d04 <checkAktifCalisma+0x8f4>
						&& (devmotoryukaricalisiyor==0)) {
 8005caa:	4b05      	ldr	r3, [pc, #20]	; (8005cc0 <checkAktifCalisma+0x8b0>)
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	f083 0301 	eor.w	r3, r3, #1
 8005cb2:	b2db      	uxtb	r3, r3
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d025      	beq.n	8005d04 <checkAktifCalisma+0x8f4>

					devmotorasagicalisiyor=1;
 8005cb8:	4b0e      	ldr	r3, [pc, #56]	; (8005cf4 <checkAktifCalisma+0x8e4>)
 8005cba:	2201      	movs	r2, #1
 8005cbc:	701a      	strb	r2, [r3, #0]
 8005cbe:	e024      	b.n	8005d0a <checkAktifCalisma+0x8fa>
 8005cc0:	20000b45 	.word	0x20000b45
 8005cc4:	40011000 	.word	0x40011000
 8005cc8:	20000b49 	.word	0x20000b49
 8005ccc:	40010c00 	.word	0x40010c00
 8005cd0:	20000b61 	.word	0x20000b61
 8005cd4:	20000b62 	.word	0x20000b62
 8005cd8:	20000b41 	.word	0x20000b41
 8005cdc:	20000aec 	.word	0x20000aec
 8005ce0:	20000af8 	.word	0x20000af8
 8005ce4:	20000b26 	.word	0x20000b26
 8005ce8:	20000b2d 	.word	0x20000b2d
 8005cec:	20000b1f 	.word	0x20000b1f
 8005cf0:	20000b21 	.word	0x20000b21
 8005cf4:	20000b46 	.word	0x20000b46
 8005cf8:	20000b44 	.word	0x20000b44
 8005cfc:	20000b48 	.word	0x20000b48
 8005d00:	20000b47 	.word	0x20000b47
				} else {
					devmotorasagicalisiyor=0;
 8005d04:	4b96      	ldr	r3, [pc, #600]	; (8005f60 <checkAktifCalisma+0xb50>)
 8005d06:	2200      	movs	r2, #0
 8005d08:	701a      	strb	r2, [r3, #0]
				}

				if(devmotorasagicalisiyor==1) {
 8005d0a:	4b95      	ldr	r3, [pc, #596]	; (8005f60 <checkAktifCalisma+0xb50>)
 8005d0c:	781b      	ldrb	r3, [r3, #0]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d007      	beq.n	8005d22 <checkAktifCalisma+0x912>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8005d12:	2201      	movs	r2, #1
 8005d14:	2110      	movs	r1, #16
 8005d16:	4893      	ldr	r0, [pc, #588]	; (8005f64 <checkAktifCalisma+0xb54>)
 8005d18:	f002 fe71 	bl	80089fe <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=1;
 8005d1c:	4b92      	ldr	r3, [pc, #584]	; (8005f68 <checkAktifCalisma+0xb58>)
 8005d1e:	2201      	movs	r2, #1
 8005d20:	701a      	strb	r2, [r3, #0]
				}

				//devirme asagi + geri valf timer calismasi

				if((devasagivalfcalisiyor==1)&&((HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==1)||(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==1))&&(stopVar)&&(kapiSivicVar)&&(butonKontrol5==0)) {
 8005d22:	4b91      	ldr	r3, [pc, #580]	; (8005f68 <checkAktifCalisma+0xb58>)
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d024      	beq.n	8005d74 <checkAktifCalisma+0x964>
 8005d2a:	2140      	movs	r1, #64	; 0x40
 8005d2c:	488d      	ldr	r0, [pc, #564]	; (8005f64 <checkAktifCalisma+0xb54>)
 8005d2e:	f002 fe4f 	bl	80089d0 <HAL_GPIO_ReadPin>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b01      	cmp	r3, #1
 8005d36:	d007      	beq.n	8005d48 <checkAktifCalisma+0x938>
 8005d38:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005d3c:	4889      	ldr	r0, [pc, #548]	; (8005f64 <checkAktifCalisma+0xb54>)
 8005d3e:	f002 fe47 	bl	80089d0 <HAL_GPIO_ReadPin>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d115      	bne.n	8005d74 <checkAktifCalisma+0x964>
 8005d48:	4b88      	ldr	r3, [pc, #544]	; (8005f6c <checkAktifCalisma+0xb5c>)
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d011      	beq.n	8005d74 <checkAktifCalisma+0x964>
 8005d50:	4b87      	ldr	r3, [pc, #540]	; (8005f70 <checkAktifCalisma+0xb60>)
 8005d52:	781b      	ldrb	r3, [r3, #0]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d00d      	beq.n	8005d74 <checkAktifCalisma+0x964>
 8005d58:	4b86      	ldr	r3, [pc, #536]	; (8005f74 <checkAktifCalisma+0xb64>)
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	f083 0301 	eor.w	r3, r3, #1
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d006      	beq.n	8005d74 <checkAktifCalisma+0x964>
					timer2=millis;
 8005d66:	4b84      	ldr	r3, [pc, #528]	; (8005f78 <checkAktifCalisma+0xb68>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a84      	ldr	r2, [pc, #528]	; (8005f7c <checkAktifCalisma+0xb6c>)
 8005d6c:	6013      	str	r3, [r2, #0]
					butonKontrol5=1;
 8005d6e:	4b81      	ldr	r3, [pc, #516]	; (8005f74 <checkAktifCalisma+0xb64>)
 8005d70:	2201      	movs	r2, #1
 8005d72:	701a      	strb	r2, [r3, #0]
				}

				if((((millis-timer2 >= devirmeYukariIleriTmr)&&(butonKontrol5==1))||((stopVar==0)||(kapiSivicVar==0)))) {
 8005d74:	4b80      	ldr	r3, [pc, #512]	; (8005f78 <checkAktifCalisma+0xb68>)
 8005d76:	681a      	ldr	r2, [r3, #0]
 8005d78:	4b80      	ldr	r3, [pc, #512]	; (8005f7c <checkAktifCalisma+0xb6c>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	1ad3      	subs	r3, r2, r3
 8005d7e:	4a80      	ldr	r2, [pc, #512]	; (8005f80 <checkAktifCalisma+0xb70>)
 8005d80:	7812      	ldrb	r2, [r2, #0]
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d303      	bcc.n	8005d8e <checkAktifCalisma+0x97e>
 8005d86:	4b7b      	ldr	r3, [pc, #492]	; (8005f74 <checkAktifCalisma+0xb64>)
 8005d88:	781b      	ldrb	r3, [r3, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d10d      	bne.n	8005daa <checkAktifCalisma+0x99a>
 8005d8e:	4b77      	ldr	r3, [pc, #476]	; (8005f6c <checkAktifCalisma+0xb5c>)
 8005d90:	781b      	ldrb	r3, [r3, #0]
 8005d92:	f083 0301 	eor.w	r3, r3, #1
 8005d96:	b2db      	uxtb	r3, r3
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d106      	bne.n	8005daa <checkAktifCalisma+0x99a>
 8005d9c:	4b74      	ldr	r3, [pc, #464]	; (8005f70 <checkAktifCalisma+0xb60>)
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	f083 0301 	eor.w	r3, r3, #1
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d00a      	beq.n	8005dc0 <checkAktifCalisma+0x9b0>
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8005daa:	2200      	movs	r2, #0
 8005dac:	2110      	movs	r1, #16
 8005dae:	486d      	ldr	r0, [pc, #436]	; (8005f64 <checkAktifCalisma+0xb54>)
 8005db0:	f002 fe25 	bl	80089fe <HAL_GPIO_WritePin>
					devasagivalfcalisiyor=0;
 8005db4:	4b6c      	ldr	r3, [pc, #432]	; (8005f68 <checkAktifCalisma+0xb58>)
 8005db6:	2200      	movs	r2, #0
 8005db8:	701a      	strb	r2, [r3, #0]
					butonKontrol5=0;
 8005dba:	4b6e      	ldr	r3, [pc, #440]	; (8005f74 <checkAktifCalisma+0xb64>)
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	701a      	strb	r2, [r3, #0]
				}

				// makine durum kontrolü

				if(HAL_GPIO_ReadPin(motorOut_GPIO_Port, motorOut_Pin)==0
 8005dc0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005dc4:	486f      	ldr	r0, [pc, #444]	; (8005f84 <checkAktifCalisma+0xb74>)
 8005dc6:	f002 fe03 	bl	80089d0 <HAL_GPIO_ReadPin>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d120      	bne.n	8005e12 <checkAktifCalisma+0xa02>
						&&(HAL_GPIO_ReadPin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin)==0)
 8005dd0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005dd4:	486b      	ldr	r0, [pc, #428]	; (8005f84 <checkAktifCalisma+0xb74>)
 8005dd6:	f002 fdfb 	bl	80089d0 <HAL_GPIO_ReadPin>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d118      	bne.n	8005e12 <checkAktifCalisma+0xa02>
						&&(HAL_GPIO_ReadPin(yukariValfOut_GPIO_Port, yukariValfOut_Pin)==0)
 8005de0:	2104      	movs	r1, #4
 8005de2:	4868      	ldr	r0, [pc, #416]	; (8005f84 <checkAktifCalisma+0xb74>)
 8005de4:	f002 fdf4 	bl	80089d0 <HAL_GPIO_ReadPin>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d111      	bne.n	8005e12 <checkAktifCalisma+0xa02>
						&&(HAL_GPIO_ReadPin(asagiValfOut_GPIO_Port, asagiValfOut_Pin)==0)
 8005dee:	2102      	movs	r1, #2
 8005df0:	4864      	ldr	r0, [pc, #400]	; (8005f84 <checkAktifCalisma+0xb74>)
 8005df2:	f002 fded 	bl	80089d0 <HAL_GPIO_ReadPin>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d10a      	bne.n	8005e12 <checkAktifCalisma+0xa02>
						&&(HAL_GPIO_ReadPin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin)==0)) {
 8005dfc:	2101      	movs	r1, #1
 8005dfe:	4861      	ldr	r0, [pc, #388]	; (8005f84 <checkAktifCalisma+0xb74>)
 8005e00:	f002 fde6 	bl	80089d0 <HAL_GPIO_ReadPin>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d103      	bne.n	8005e12 <checkAktifCalisma+0xa02>
					makineStop=1;
 8005e0a:	4b5f      	ldr	r3, [pc, #380]	; (8005f88 <checkAktifCalisma+0xb78>)
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	701a      	strb	r2, [r3, #0]
 8005e10:	e002      	b.n	8005e18 <checkAktifCalisma+0xa08>
				} else {
					makineStop=0;
 8005e12:	4b5d      	ldr	r3, [pc, #372]	; (8005f88 <checkAktifCalisma+0xb78>)
 8005e14:	2200      	movs	r2, #0
 8005e16:	701a      	strb	r2, [r3, #0]
				}

				//kapi 1 kontrol

				// kapi 1 prudhome
				if((kapi1Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005e18:	4b5c      	ldr	r3, [pc, #368]	; (8005f8c <checkAktifCalisma+0xb7c>)
 8005e1a:	781b      	ldrb	r3, [r3, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d144      	bne.n	8005eaa <checkAktifCalisma+0xa9a>
 8005e20:	4b5b      	ldr	r3, [pc, #364]	; (8005f90 <checkAktifCalisma+0xb80>)
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	2b01      	cmp	r3, #1
 8005e26:	d003      	beq.n	8005e30 <checkAktifCalisma+0xa20>
 8005e28:	4b59      	ldr	r3, [pc, #356]	; (8005f90 <checkAktifCalisma+0xb80>)
 8005e2a:	781b      	ldrb	r3, [r3, #0]
 8005e2c:	2b03      	cmp	r3, #3
 8005e2e:	d13c      	bne.n	8005eaa <checkAktifCalisma+0xa9a>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005e30:	2180      	movs	r1, #128	; 0x80
 8005e32:	484c      	ldr	r0, [pc, #304]	; (8005f64 <checkAktifCalisma+0xb54>)
 8005e34:	f002 fdcc 	bl	80089d0 <HAL_GPIO_ReadPin>
 8005e38:	4603      	mov	r3, r0
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d103      	bne.n	8005e46 <checkAktifCalisma+0xa36>
 8005e3e:	4b55      	ldr	r3, [pc, #340]	; (8005f94 <checkAktifCalisma+0xb84>)
 8005e40:	781b      	ldrb	r3, [r3, #0]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00b      	beq.n	8005e5e <checkAktifCalisma+0xa4e>
 8005e46:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005e4a:	484e      	ldr	r0, [pc, #312]	; (8005f84 <checkAktifCalisma+0xb74>)
 8005e4c:	f002 fdc0 	bl	80089d0 <HAL_GPIO_ReadPin>
 8005e50:	4603      	mov	r3, r0
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d129      	bne.n	8005eaa <checkAktifCalisma+0xa9a>
 8005e56:	4b4f      	ldr	r3, [pc, #316]	; (8005f94 <checkAktifCalisma+0xb84>)
 8005e58:	781b      	ldrb	r3, [r3, #0]
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d125      	bne.n	8005eaa <checkAktifCalisma+0xa9a>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005e5e:	2104      	movs	r1, #4
 8005e60:	4840      	ldr	r0, [pc, #256]	; (8005f64 <checkAktifCalisma+0xb54>)
 8005e62:	f002 fdb5 	bl	80089d0 <HAL_GPIO_ReadPin>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b01      	cmp	r3, #1
 8005e6a:	d003      	beq.n	8005e74 <checkAktifCalisma+0xa64>
 8005e6c:	4b4a      	ldr	r3, [pc, #296]	; (8005f98 <checkAktifCalisma+0xb88>)
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d11a      	bne.n	8005eaa <checkAktifCalisma+0xa9a>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005e74:	2102      	movs	r1, #2
 8005e76:	483b      	ldr	r0, [pc, #236]	; (8005f64 <checkAktifCalisma+0xb54>)
 8005e78:	f002 fdaa 	bl	80089d0 <HAL_GPIO_ReadPin>
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d113      	bne.n	8005eaa <checkAktifCalisma+0xa9a>
						&&(butonKontrol==0)
 8005e82:	4b46      	ldr	r3, [pc, #280]	; (8005f9c <checkAktifCalisma+0xb8c>)
 8005e84:	781b      	ldrb	r3, [r3, #0]
 8005e86:	f083 0301 	eor.w	r3, r3, #1
 8005e8a:	b2db      	uxtb	r3, r3
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d00c      	beq.n	8005eaa <checkAktifCalisma+0xa9a>
						&&(makineStop==1)) {
 8005e90:	4b3d      	ldr	r3, [pc, #244]	; (8005f88 <checkAktifCalisma+0xb78>)
 8005e92:	781b      	ldrb	r3, [r3, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d008      	beq.n	8005eaa <checkAktifCalisma+0xa9a>

					kapi1prudhome=1;
 8005e98:	4b41      	ldr	r3, [pc, #260]	; (8005fa0 <checkAktifCalisma+0xb90>)
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	701a      	strb	r2, [r3, #0]
					timer = millis;
 8005e9e:	4b36      	ldr	r3, [pc, #216]	; (8005f78 <checkAktifCalisma+0xb68>)
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	4a40      	ldr	r2, [pc, #256]	; (8005fa4 <checkAktifCalisma+0xb94>)
 8005ea4:	6013      	str	r3, [r2, #0]
					bekle();
 8005ea6:	f7ff f883 	bl	8004fb0 <bekle>
				}

				if((millis-timer >= kapi1AcSure)||((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)||!(altLimit))||(makineStop==0)) {
 8005eaa:	4b33      	ldr	r3, [pc, #204]	; (8005f78 <checkAktifCalisma+0xb68>)
 8005eac:	681a      	ldr	r2, [r3, #0]
 8005eae:	4b3d      	ldr	r3, [pc, #244]	; (8005fa4 <checkAktifCalisma+0xb94>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	1ad3      	subs	r3, r2, r3
 8005eb4:	4a3c      	ldr	r2, [pc, #240]	; (8005fa8 <checkAktifCalisma+0xb98>)
 8005eb6:	7812      	ldrb	r2, [r2, #0]
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d211      	bcs.n	8005ee0 <checkAktifCalisma+0xad0>
 8005ebc:	2104      	movs	r1, #4
 8005ebe:	4829      	ldr	r0, [pc, #164]	; (8005f64 <checkAktifCalisma+0xb54>)
 8005ec0:	f002 fd86 	bl	80089d0 <HAL_GPIO_ReadPin>
 8005ec4:	4603      	mov	r3, r0
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d00a      	beq.n	8005ee0 <checkAktifCalisma+0xad0>
 8005eca:	4b33      	ldr	r3, [pc, #204]	; (8005f98 <checkAktifCalisma+0xb88>)
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d006      	beq.n	8005ee0 <checkAktifCalisma+0xad0>
 8005ed2:	4b2d      	ldr	r3, [pc, #180]	; (8005f88 <checkAktifCalisma+0xb78>)
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	f083 0301 	eor.w	r3, r3, #1
 8005eda:	b2db      	uxtb	r3, r3
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d002      	beq.n	8005ee6 <checkAktifCalisma+0xad6>
					kapi1prudhome=0;
 8005ee0:	4b2f      	ldr	r3, [pc, #188]	; (8005fa0 <checkAktifCalisma+0xb90>)
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 buton kontrol

				if((kapi1Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005ee6:	4b29      	ldr	r3, [pc, #164]	; (8005f8c <checkAktifCalisma+0xb7c>)
 8005ee8:	781b      	ldrb	r3, [r3, #0]
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d160      	bne.n	8005fb0 <checkAktifCalisma+0xba0>
 8005eee:	4b28      	ldr	r3, [pc, #160]	; (8005f90 <checkAktifCalisma+0xb80>)
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d003      	beq.n	8005efe <checkAktifCalisma+0xaee>
 8005ef6:	4b26      	ldr	r3, [pc, #152]	; (8005f90 <checkAktifCalisma+0xb80>)
 8005ef8:	781b      	ldrb	r3, [r3, #0]
 8005efa:	2b03      	cmp	r3, #3
 8005efc:	d158      	bne.n	8005fb0 <checkAktifCalisma+0xba0>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005efe:	2104      	movs	r1, #4
 8005f00:	4818      	ldr	r0, [pc, #96]	; (8005f64 <checkAktifCalisma+0xb54>)
 8005f02:	f002 fd65 	bl	80089d0 <HAL_GPIO_ReadPin>
 8005f06:	4603      	mov	r3, r0
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d003      	beq.n	8005f14 <checkAktifCalisma+0xb04>
 8005f0c:	4b22      	ldr	r3, [pc, #136]	; (8005f98 <checkAktifCalisma+0xb88>)
 8005f0e:	781b      	ldrb	r3, [r3, #0]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d14d      	bne.n	8005fb0 <checkAktifCalisma+0xba0>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005f14:	2102      	movs	r1, #2
 8005f16:	4813      	ldr	r0, [pc, #76]	; (8005f64 <checkAktifCalisma+0xb54>)
 8005f18:	f002 fd5a 	bl	80089d0 <HAL_GPIO_ReadPin>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d146      	bne.n	8005fb0 <checkAktifCalisma+0xba0>
						&&((HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 && (kapiAcTipi==1)))
 8005f22:	2180      	movs	r1, #128	; 0x80
 8005f24:	480f      	ldr	r0, [pc, #60]	; (8005f64 <checkAktifCalisma+0xb54>)
 8005f26:	f002 fd53 	bl	80089d0 <HAL_GPIO_ReadPin>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d103      	bne.n	8005f38 <checkAktifCalisma+0xb28>
 8005f30:	4b18      	ldr	r3, [pc, #96]	; (8005f94 <checkAktifCalisma+0xb84>)
 8005f32:	781b      	ldrb	r3, [r3, #0]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d00b      	beq.n	8005f50 <checkAktifCalisma+0xb40>
 8005f38:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8005f3c:	4811      	ldr	r0, [pc, #68]	; (8005f84 <checkAktifCalisma+0xb74>)
 8005f3e:	f002 fd47 	bl	80089d0 <HAL_GPIO_ReadPin>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d133      	bne.n	8005fb0 <checkAktifCalisma+0xba0>
 8005f48:	4b12      	ldr	r3, [pc, #72]	; (8005f94 <checkAktifCalisma+0xb84>)
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d12f      	bne.n	8005fb0 <checkAktifCalisma+0xba0>
						&&(makineStop==1)) {
 8005f50:	4b0d      	ldr	r3, [pc, #52]	; (8005f88 <checkAktifCalisma+0xb78>)
 8005f52:	781b      	ldrb	r3, [r3, #0]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d02b      	beq.n	8005fb0 <checkAktifCalisma+0xba0>

					kapi1butonkontrol=1;
 8005f58:	4b14      	ldr	r3, [pc, #80]	; (8005fac <checkAktifCalisma+0xb9c>)
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	701a      	strb	r2, [r3, #0]
 8005f5e:	e02a      	b.n	8005fb6 <checkAktifCalisma+0xba6>
 8005f60:	20000b46 	.word	0x20000b46
 8005f64:	40011000 	.word	0x40011000
 8005f68:	20000b4a 	.word	0x20000b4a
 8005f6c:	20000b61 	.word	0x20000b61
 8005f70:	20000b62 	.word	0x20000b62
 8005f74:	20000b42 	.word	0x20000b42
 8005f78:	20000aec 	.word	0x20000aec
 8005f7c:	20000af8 	.word	0x20000af8
 8005f80:	20000b26 	.word	0x20000b26
 8005f84:	40010c00 	.word	0x40010c00
 8005f88:	20000b51 	.word	0x20000b51
 8005f8c:	20000b19 	.word	0x20000b19
 8005f90:	20000b18 	.word	0x20000b18
 8005f94:	20000b1c 	.word	0x20000b1c
 8005f98:	20000b16 	.word	0x20000b16
 8005f9c:	20000b3e 	.word	0x20000b3e
 8005fa0:	20000b52 	.word	0x20000b52
 8005fa4:	20000af0 	.word	0x20000af0
 8005fa8:	20000b29 	.word	0x20000b29
 8005fac:	20000b53 	.word	0x20000b53
				} else {
					kapi1butonkontrol=0;
 8005fb0:	4b8b      	ldr	r3, [pc, #556]	; (80061e0 <checkAktifCalisma+0xdd0>)
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 pizzato

				if((kapi1Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8005fb6:	4b8b      	ldr	r3, [pc, #556]	; (80061e4 <checkAktifCalisma+0xdd4>)
 8005fb8:	781b      	ldrb	r3, [r3, #0]
 8005fba:	2b02      	cmp	r3, #2
 8005fbc:	d121      	bne.n	8006002 <checkAktifCalisma+0xbf2>
 8005fbe:	4b8a      	ldr	r3, [pc, #552]	; (80061e8 <checkAktifCalisma+0xdd8>)
 8005fc0:	781b      	ldrb	r3, [r3, #0]
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d003      	beq.n	8005fce <checkAktifCalisma+0xbbe>
 8005fc6:	4b88      	ldr	r3, [pc, #544]	; (80061e8 <checkAktifCalisma+0xdd8>)
 8005fc8:	781b      	ldrb	r3, [r3, #0]
 8005fca:	2b03      	cmp	r3, #3
 8005fcc:	d119      	bne.n	8006002 <checkAktifCalisma+0xbf2>

						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8005fce:	2104      	movs	r1, #4
 8005fd0:	4886      	ldr	r0, [pc, #536]	; (80061ec <checkAktifCalisma+0xddc>)
 8005fd2:	f002 fcfd 	bl	80089d0 <HAL_GPIO_ReadPin>
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d003      	beq.n	8005fe4 <checkAktifCalisma+0xbd4>
 8005fdc:	4b84      	ldr	r3, [pc, #528]	; (80061f0 <checkAktifCalisma+0xde0>)
 8005fde:	781b      	ldrb	r3, [r3, #0]
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d10e      	bne.n	8006002 <checkAktifCalisma+0xbf2>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8005fe4:	2102      	movs	r1, #2
 8005fe6:	4881      	ldr	r0, [pc, #516]	; (80061ec <checkAktifCalisma+0xddc>)
 8005fe8:	f002 fcf2 	bl	80089d0 <HAL_GPIO_ReadPin>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d107      	bne.n	8006002 <checkAktifCalisma+0xbf2>
						&&(makineStop==1)) {
 8005ff2:	4b80      	ldr	r3, [pc, #512]	; (80061f4 <checkAktifCalisma+0xde4>)
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d003      	beq.n	8006002 <checkAktifCalisma+0xbf2>

					kapi1pizzato=1;
 8005ffa:	4b7f      	ldr	r3, [pc, #508]	; (80061f8 <checkAktifCalisma+0xde8>)
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	701a      	strb	r2, [r3, #0]
 8006000:	e002      	b.n	8006008 <checkAktifCalisma+0xbf8>
				} else {
					kapi1pizzato=0;
 8006002:	4b7d      	ldr	r3, [pc, #500]	; (80061f8 <checkAktifCalisma+0xde8>)
 8006004:	2200      	movs	r2, #0
 8006006:	701a      	strb	r2, [r3, #0]
				}

				// kapi 1 çıkış

				if(kapi1butonkontrol==1 || kapi1pizzato==1 || kapi1prudhome==1) {
 8006008:	4b75      	ldr	r3, [pc, #468]	; (80061e0 <checkAktifCalisma+0xdd0>)
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d107      	bne.n	8006020 <checkAktifCalisma+0xc10>
 8006010:	4b79      	ldr	r3, [pc, #484]	; (80061f8 <checkAktifCalisma+0xde8>)
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d103      	bne.n	8006020 <checkAktifCalisma+0xc10>
 8006018:	4b78      	ldr	r3, [pc, #480]	; (80061fc <checkAktifCalisma+0xdec>)
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d005      	beq.n	800602c <checkAktifCalisma+0xc1c>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8006020:	2201      	movs	r2, #1
 8006022:	2180      	movs	r1, #128	; 0x80
 8006024:	4876      	ldr	r0, [pc, #472]	; (8006200 <checkAktifCalisma+0xdf0>)
 8006026:	f002 fcea 	bl	80089fe <HAL_GPIO_WritePin>
 800602a:	e004      	b.n	8006036 <checkAktifCalisma+0xc26>
				} else {
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 800602c:	2200      	movs	r2, #0
 800602e:	2180      	movs	r1, #128	; 0x80
 8006030:	4873      	ldr	r0, [pc, #460]	; (8006200 <checkAktifCalisma+0xdf0>)
 8006032:	f002 fce4 	bl	80089fe <HAL_GPIO_WritePin>

				//kapi2 kontrol

				// kapi 2 prudhome

				if((kapi2Tip==0)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006036:	4b73      	ldr	r3, [pc, #460]	; (8006204 <checkAktifCalisma+0xdf4>)
 8006038:	781b      	ldrb	r3, [r3, #0]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d141      	bne.n	80060c2 <checkAktifCalisma+0xcb2>
 800603e:	4b6a      	ldr	r3, [pc, #424]	; (80061e8 <checkAktifCalisma+0xdd8>)
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	2b01      	cmp	r3, #1
 8006044:	d003      	beq.n	800604e <checkAktifCalisma+0xc3e>
 8006046:	4b68      	ldr	r3, [pc, #416]	; (80061e8 <checkAktifCalisma+0xdd8>)
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	2b03      	cmp	r3, #3
 800604c:	d139      	bne.n	80060c2 <checkAktifCalisma+0xcb2>
						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 800604e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006052:	4866      	ldr	r0, [pc, #408]	; (80061ec <checkAktifCalisma+0xddc>)
 8006054:	f002 fcbc 	bl	80089d0 <HAL_GPIO_ReadPin>
 8006058:	4603      	mov	r3, r0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d103      	bne.n	8006066 <checkAktifCalisma+0xc56>
 800605e:	4b6a      	ldr	r3, [pc, #424]	; (8006208 <checkAktifCalisma+0xdf8>)
 8006060:	781b      	ldrb	r3, [r3, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00b      	beq.n	800607e <checkAktifCalisma+0xc6e>
 8006066:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800606a:	4868      	ldr	r0, [pc, #416]	; (800620c <checkAktifCalisma+0xdfc>)
 800606c:	f002 fcb0 	bl	80089d0 <HAL_GPIO_ReadPin>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d125      	bne.n	80060c2 <checkAktifCalisma+0xcb2>
 8006076:	4b64      	ldr	r3, [pc, #400]	; (8006208 <checkAktifCalisma+0xdf8>)
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	2b01      	cmp	r3, #1
 800607c:	d121      	bne.n	80060c2 <checkAktifCalisma+0xcb2>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800607e:	2102      	movs	r1, #2
 8006080:	485a      	ldr	r0, [pc, #360]	; (80061ec <checkAktifCalisma+0xddc>)
 8006082:	f002 fca5 	bl	80089d0 <HAL_GPIO_ReadPin>
 8006086:	4603      	mov	r3, r0
 8006088:	2b01      	cmp	r3, #1
 800608a:	d11a      	bne.n	80060c2 <checkAktifCalisma+0xcb2>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 800608c:	2104      	movs	r1, #4
 800608e:	4857      	ldr	r0, [pc, #348]	; (80061ec <checkAktifCalisma+0xddc>)
 8006090:	f002 fc9e 	bl	80089d0 <HAL_GPIO_ReadPin>
 8006094:	4603      	mov	r3, r0
 8006096:	2b00      	cmp	r3, #0
 8006098:	d113      	bne.n	80060c2 <checkAktifCalisma+0xcb2>
						&&(makineStop==1)
 800609a:	4b56      	ldr	r3, [pc, #344]	; (80061f4 <checkAktifCalisma+0xde4>)
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d00f      	beq.n	80060c2 <checkAktifCalisma+0xcb2>
						&&(butonKontrol==0)) {
 80060a2:	4b5b      	ldr	r3, [pc, #364]	; (8006210 <checkAktifCalisma+0xe00>)
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	f083 0301 	eor.w	r3, r3, #1
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d008      	beq.n	80060c2 <checkAktifCalisma+0xcb2>

					kapi2prudhome=1;
 80060b0:	4b58      	ldr	r3, [pc, #352]	; (8006214 <checkAktifCalisma+0xe04>)
 80060b2:	2201      	movs	r2, #1
 80060b4:	701a      	strb	r2, [r3, #0]
					timer = millis;
 80060b6:	4b58      	ldr	r3, [pc, #352]	; (8006218 <checkAktifCalisma+0xe08>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a58      	ldr	r2, [pc, #352]	; (800621c <checkAktifCalisma+0xe0c>)
 80060bc:	6013      	str	r3, [r2, #0]
					bekle();
 80060be:	f7fe ff77 	bl	8004fb0 <bekle>
				}

				if((millis-timer >= kapi2AcSure) || (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)||(makineStop==0)) {
 80060c2:	4b55      	ldr	r3, [pc, #340]	; (8006218 <checkAktifCalisma+0xe08>)
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	4b55      	ldr	r3, [pc, #340]	; (800621c <checkAktifCalisma+0xe0c>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	4a54      	ldr	r2, [pc, #336]	; (8006220 <checkAktifCalisma+0xe10>)
 80060ce:	7812      	ldrb	r2, [r2, #0]
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d20d      	bcs.n	80060f0 <checkAktifCalisma+0xce0>
 80060d4:	2102      	movs	r1, #2
 80060d6:	4845      	ldr	r0, [pc, #276]	; (80061ec <checkAktifCalisma+0xddc>)
 80060d8:	f002 fc7a 	bl	80089d0 <HAL_GPIO_ReadPin>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d006      	beq.n	80060f0 <checkAktifCalisma+0xce0>
 80060e2:	4b44      	ldr	r3, [pc, #272]	; (80061f4 <checkAktifCalisma+0xde4>)
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	f083 0301 	eor.w	r3, r3, #1
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d002      	beq.n	80060f6 <checkAktifCalisma+0xce6>
					kapi2prudhome=0;
 80060f0:	4b48      	ldr	r3, [pc, #288]	; (8006214 <checkAktifCalisma+0xe04>)
 80060f2:	2200      	movs	r2, #0
 80060f4:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 buton kontrol

				if((kapi2Tip==1)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 80060f6:	4b43      	ldr	r3, [pc, #268]	; (8006204 <checkAktifCalisma+0xdf4>)
 80060f8:	781b      	ldrb	r3, [r3, #0]
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d135      	bne.n	800616a <checkAktifCalisma+0xd5a>
 80060fe:	4b3a      	ldr	r3, [pc, #232]	; (80061e8 <checkAktifCalisma+0xdd8>)
 8006100:	781b      	ldrb	r3, [r3, #0]
 8006102:	2b01      	cmp	r3, #1
 8006104:	d003      	beq.n	800610e <checkAktifCalisma+0xcfe>
 8006106:	4b38      	ldr	r3, [pc, #224]	; (80061e8 <checkAktifCalisma+0xdd8>)
 8006108:	781b      	ldrb	r3, [r3, #0]
 800610a:	2b03      	cmp	r3, #3
 800610c:	d12d      	bne.n	800616a <checkAktifCalisma+0xd5a>

						&&((HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==0 && (kapiAcTipi==0))||(HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0 && (kapiAcTipi==1)))
 800610e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006112:	4836      	ldr	r0, [pc, #216]	; (80061ec <checkAktifCalisma+0xddc>)
 8006114:	f002 fc5c 	bl	80089d0 <HAL_GPIO_ReadPin>
 8006118:	4603      	mov	r3, r0
 800611a:	2b00      	cmp	r3, #0
 800611c:	d103      	bne.n	8006126 <checkAktifCalisma+0xd16>
 800611e:	4b3a      	ldr	r3, [pc, #232]	; (8006208 <checkAktifCalisma+0xdf8>)
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d00b      	beq.n	800613e <checkAktifCalisma+0xd2e>
 8006126:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800612a:	4838      	ldr	r0, [pc, #224]	; (800620c <checkAktifCalisma+0xdfc>)
 800612c:	f002 fc50 	bl	80089d0 <HAL_GPIO_ReadPin>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d119      	bne.n	800616a <checkAktifCalisma+0xd5a>
 8006136:	4b34      	ldr	r3, [pc, #208]	; (8006208 <checkAktifCalisma+0xdf8>)
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	2b01      	cmp	r3, #1
 800613c:	d115      	bne.n	800616a <checkAktifCalisma+0xd5a>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 800613e:	2102      	movs	r1, #2
 8006140:	482a      	ldr	r0, [pc, #168]	; (80061ec <checkAktifCalisma+0xddc>)
 8006142:	f002 fc45 	bl	80089d0 <HAL_GPIO_ReadPin>
 8006146:	4603      	mov	r3, r0
 8006148:	2b01      	cmp	r3, #1
 800614a:	d10e      	bne.n	800616a <checkAktifCalisma+0xd5a>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 800614c:	2104      	movs	r1, #4
 800614e:	4827      	ldr	r0, [pc, #156]	; (80061ec <checkAktifCalisma+0xddc>)
 8006150:	f002 fc3e 	bl	80089d0 <HAL_GPIO_ReadPin>
 8006154:	4603      	mov	r3, r0
 8006156:	2b00      	cmp	r3, #0
 8006158:	d107      	bne.n	800616a <checkAktifCalisma+0xd5a>
						&&(makineStop==1)) {
 800615a:	4b26      	ldr	r3, [pc, #152]	; (80061f4 <checkAktifCalisma+0xde4>)
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d003      	beq.n	800616a <checkAktifCalisma+0xd5a>

					kapi2butonkontrol=1;
 8006162:	4b30      	ldr	r3, [pc, #192]	; (8006224 <checkAktifCalisma+0xe14>)
 8006164:	2201      	movs	r2, #1
 8006166:	701a      	strb	r2, [r3, #0]
 8006168:	e002      	b.n	8006170 <checkAktifCalisma+0xd60>
				} else {
					kapi2butonkontrol=0;
 800616a:	4b2e      	ldr	r3, [pc, #184]	; (8006224 <checkAktifCalisma+0xe14>)
 800616c:	2200      	movs	r2, #0
 800616e:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 pizzato

				if((kapi2Tip==2)&&((kapiSecimleri==1)||(kapiSecimleri==3))
 8006170:	4b24      	ldr	r3, [pc, #144]	; (8006204 <checkAktifCalisma+0xdf4>)
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	2b02      	cmp	r3, #2
 8006176:	d11d      	bne.n	80061b4 <checkAktifCalisma+0xda4>
 8006178:	4b1b      	ldr	r3, [pc, #108]	; (80061e8 <checkAktifCalisma+0xdd8>)
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	2b01      	cmp	r3, #1
 800617e:	d003      	beq.n	8006188 <checkAktifCalisma+0xd78>
 8006180:	4b19      	ldr	r3, [pc, #100]	; (80061e8 <checkAktifCalisma+0xdd8>)
 8006182:	781b      	ldrb	r3, [r3, #0]
 8006184:	2b03      	cmp	r3, #3
 8006186:	d115      	bne.n	80061b4 <checkAktifCalisma+0xda4>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006188:	2102      	movs	r1, #2
 800618a:	4818      	ldr	r0, [pc, #96]	; (80061ec <checkAktifCalisma+0xddc>)
 800618c:	f002 fc20 	bl	80089d0 <HAL_GPIO_ReadPin>
 8006190:	4603      	mov	r3, r0
 8006192:	2b01      	cmp	r3, #1
 8006194:	d10e      	bne.n	80061b4 <checkAktifCalisma+0xda4>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006196:	2104      	movs	r1, #4
 8006198:	4814      	ldr	r0, [pc, #80]	; (80061ec <checkAktifCalisma+0xddc>)
 800619a:	f002 fc19 	bl	80089d0 <HAL_GPIO_ReadPin>
 800619e:	4603      	mov	r3, r0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d107      	bne.n	80061b4 <checkAktifCalisma+0xda4>
						&&(makineStop==1)) {
 80061a4:	4b13      	ldr	r3, [pc, #76]	; (80061f4 <checkAktifCalisma+0xde4>)
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d003      	beq.n	80061b4 <checkAktifCalisma+0xda4>

					kapi2pizzato=1;
 80061ac:	4b1e      	ldr	r3, [pc, #120]	; (8006228 <checkAktifCalisma+0xe18>)
 80061ae:	2201      	movs	r2, #1
 80061b0:	701a      	strb	r2, [r3, #0]
 80061b2:	e002      	b.n	80061ba <checkAktifCalisma+0xdaa>
				} else {
					kapi2pizzato=0;
 80061b4:	4b1c      	ldr	r3, [pc, #112]	; (8006228 <checkAktifCalisma+0xe18>)
 80061b6:	2200      	movs	r2, #0
 80061b8:	701a      	strb	r2, [r3, #0]
				}

				// kapi 2 çıkış

				if(kapi2butonkontrol==1 || kapi2pizzato==1 || kapi2prudhome==1) {
 80061ba:	4b1a      	ldr	r3, [pc, #104]	; (8006224 <checkAktifCalisma+0xe14>)
 80061bc:	781b      	ldrb	r3, [r3, #0]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d107      	bne.n	80061d2 <checkAktifCalisma+0xdc2>
 80061c2:	4b19      	ldr	r3, [pc, #100]	; (8006228 <checkAktifCalisma+0xe18>)
 80061c4:	781b      	ldrb	r3, [r3, #0]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d103      	bne.n	80061d2 <checkAktifCalisma+0xdc2>
 80061ca:	4b12      	ldr	r3, [pc, #72]	; (8006214 <checkAktifCalisma+0xe04>)
 80061cc:	781b      	ldrb	r3, [r3, #0]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d02c      	beq.n	800622c <checkAktifCalisma+0xe1c>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 80061d2:	2201      	movs	r2, #1
 80061d4:	2140      	movs	r1, #64	; 0x40
 80061d6:	480a      	ldr	r0, [pc, #40]	; (8006200 <checkAktifCalisma+0xdf0>)
 80061d8:	f002 fc11 	bl	80089fe <HAL_GPIO_WritePin>
 80061dc:	e02b      	b.n	8006236 <checkAktifCalisma+0xe26>
 80061de:	bf00      	nop
 80061e0:	20000b53 	.word	0x20000b53
 80061e4:	20000b19 	.word	0x20000b19
 80061e8:	20000b18 	.word	0x20000b18
 80061ec:	40011000 	.word	0x40011000
 80061f0:	20000b16 	.word	0x20000b16
 80061f4:	20000b51 	.word	0x20000b51
 80061f8:	20000b54 	.word	0x20000b54
 80061fc:	20000b52 	.word	0x20000b52
 8006200:	40010800 	.word	0x40010800
 8006204:	20000b1a 	.word	0x20000b1a
 8006208:	20000b1c 	.word	0x20000b1c
 800620c:	40010c00 	.word	0x40010c00
 8006210:	20000b3e 	.word	0x20000b3e
 8006214:	20000b55 	.word	0x20000b55
 8006218:	20000aec 	.word	0x20000aec
 800621c:	20000af0 	.word	0x20000af0
 8006220:	20000b2a 	.word	0x20000b2a
 8006224:	20000b56 	.word	0x20000b56
 8006228:	20000b57 	.word	0x20000b57
				} else {
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 800622c:	2200      	movs	r2, #0
 800622e:	2140      	movs	r1, #64	; 0x40
 8006230:	488d      	ldr	r0, [pc, #564]	; (8006468 <checkAktifCalisma+0x1058>)
 8006232:	f002 fbe4 	bl	80089fe <HAL_GPIO_WritePin>
				}

				//   kapi tabla kontrol ***

				if((kapiTablaAcKonum==0 || kapiTablaAcKonum==2)
 8006236:	4b8d      	ldr	r3, [pc, #564]	; (800646c <checkAktifCalisma+0x105c>)
 8006238:	781b      	ldrb	r3, [r3, #0]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d003      	beq.n	8006246 <checkAktifCalisma+0xe36>
 800623e:	4b8b      	ldr	r3, [pc, #556]	; (800646c <checkAktifCalisma+0x105c>)
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	2b02      	cmp	r3, #2
 8006244:	d115      	bne.n	8006272 <checkAktifCalisma+0xe62>
						&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)||!(altLimit))
 8006246:	2104      	movs	r1, #4
 8006248:	4889      	ldr	r0, [pc, #548]	; (8006470 <checkAktifCalisma+0x1060>)
 800624a:	f002 fbc1 	bl	80089d0 <HAL_GPIO_ReadPin>
 800624e:	4603      	mov	r3, r0
 8006250:	2b01      	cmp	r3, #1
 8006252:	d003      	beq.n	800625c <checkAktifCalisma+0xe4c>
 8006254:	4b87      	ldr	r3, [pc, #540]	; (8006474 <checkAktifCalisma+0x1064>)
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d10a      	bne.n	8006272 <checkAktifCalisma+0xe62>
						&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)) {
 800625c:	2102      	movs	r1, #2
 800625e:	4884      	ldr	r0, [pc, #528]	; (8006470 <checkAktifCalisma+0x1060>)
 8006260:	f002 fbb6 	bl	80089d0 <HAL_GPIO_ReadPin>
 8006264:	4603      	mov	r3, r0
 8006266:	2b00      	cmp	r3, #0
 8006268:	d103      	bne.n	8006272 <checkAktifCalisma+0xe62>

					kapiTablaAcKonumKat1=1;
 800626a:	4b83      	ldr	r3, [pc, #524]	; (8006478 <checkAktifCalisma+0x1068>)
 800626c:	2201      	movs	r2, #1
 800626e:	701a      	strb	r2, [r3, #0]
 8006270:	e002      	b.n	8006278 <checkAktifCalisma+0xe68>
				} else {
					kapiTablaAcKonumKat1=0;
 8006272:	4b81      	ldr	r3, [pc, #516]	; (8006478 <checkAktifCalisma+0x1068>)
 8006274:	2200      	movs	r2, #0
 8006276:	701a      	strb	r2, [r3, #0]
				}

				if((kapiTablaAcKonum==1 || kapiTablaAcKonum==2)
 8006278:	4b7c      	ldr	r3, [pc, #496]	; (800646c <checkAktifCalisma+0x105c>)
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	2b01      	cmp	r3, #1
 800627e:	d003      	beq.n	8006288 <checkAktifCalisma+0xe78>
 8006280:	4b7a      	ldr	r3, [pc, #488]	; (800646c <checkAktifCalisma+0x105c>)
 8006282:	781b      	ldrb	r3, [r3, #0]
 8006284:	2b02      	cmp	r3, #2
 8006286:	d111      	bne.n	80062ac <checkAktifCalisma+0xe9c>
						&& (HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006288:	2102      	movs	r1, #2
 800628a:	4879      	ldr	r0, [pc, #484]	; (8006470 <checkAktifCalisma+0x1060>)
 800628c:	f002 fba0 	bl	80089d0 <HAL_GPIO_ReadPin>
 8006290:	4603      	mov	r3, r0
 8006292:	2b01      	cmp	r3, #1
 8006294:	d10a      	bne.n	80062ac <checkAktifCalisma+0xe9c>
						&&(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)) {
 8006296:	2104      	movs	r1, #4
 8006298:	4875      	ldr	r0, [pc, #468]	; (8006470 <checkAktifCalisma+0x1060>)
 800629a:	f002 fb99 	bl	80089d0 <HAL_GPIO_ReadPin>
 800629e:	4603      	mov	r3, r0
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d103      	bne.n	80062ac <checkAktifCalisma+0xe9c>

					kapiTablaAcKonumKat2=1;
 80062a4:	4b75      	ldr	r3, [pc, #468]	; (800647c <checkAktifCalisma+0x106c>)
 80062a6:	2201      	movs	r2, #1
 80062a8:	701a      	strb	r2, [r3, #0]
 80062aa:	e002      	b.n	80062b2 <checkAktifCalisma+0xea2>
				} else {
					kapiTablaAcKonumKat2=0;
 80062ac:	4b73      	ldr	r3, [pc, #460]	; (800647c <checkAktifCalisma+0x106c>)
 80062ae:	2200      	movs	r2, #0
 80062b0:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat1==1
 80062b2:	4b71      	ldr	r3, [pc, #452]	; (8006478 <checkAktifCalisma+0x1068>)
 80062b4:	781b      	ldrb	r3, [r3, #0]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d00f      	beq.n	80062da <checkAktifCalisma+0xeca>
						&& kapiAcTipi==1
 80062ba:	4b71      	ldr	r3, [pc, #452]	; (8006480 <checkAktifCalisma+0x1070>)
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d10b      	bne.n	80062da <checkAktifCalisma+0xeca>
						&& HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0) {
 80062c2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80062c6:	486f      	ldr	r0, [pc, #444]	; (8006484 <checkAktifCalisma+0x1074>)
 80062c8:	f002 fb82 	bl	80089d0 <HAL_GPIO_ReadPin>
 80062cc:	4603      	mov	r3, r0
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d103      	bne.n	80062da <checkAktifCalisma+0xeca>

					kapiactablaesp1=1;
 80062d2:	4b6d      	ldr	r3, [pc, #436]	; (8006488 <checkAktifCalisma+0x1078>)
 80062d4:	2201      	movs	r2, #1
 80062d6:	701a      	strb	r2, [r3, #0]
 80062d8:	e002      	b.n	80062e0 <checkAktifCalisma+0xed0>
				} else {
					kapiactablaesp1=0;
 80062da:	4b6b      	ldr	r3, [pc, #428]	; (8006488 <checkAktifCalisma+0x1078>)
 80062dc:	2200      	movs	r2, #0
 80062de:	701a      	strb	r2, [r3, #0]
				}

				if(kapiTablaAcKonumKat2==1
 80062e0:	4b66      	ldr	r3, [pc, #408]	; (800647c <checkAktifCalisma+0x106c>)
 80062e2:	781b      	ldrb	r3, [r3, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d00f      	beq.n	8006308 <checkAktifCalisma+0xef8>
						&& kapiAcTipi==1
 80062e8:	4b65      	ldr	r3, [pc, #404]	; (8006480 <checkAktifCalisma+0x1070>)
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d10b      	bne.n	8006308 <checkAktifCalisma+0xef8>
						&& HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0) {
 80062f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80062f4:	4863      	ldr	r0, [pc, #396]	; (8006484 <checkAktifCalisma+0x1074>)
 80062f6:	f002 fb6b 	bl	80089d0 <HAL_GPIO_ReadPin>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d103      	bne.n	8006308 <checkAktifCalisma+0xef8>

					kapiactablaesp2=1;
 8006300:	4b62      	ldr	r3, [pc, #392]	; (800648c <checkAktifCalisma+0x107c>)
 8006302:	2201      	movs	r2, #1
 8006304:	701a      	strb	r2, [r3, #0]
 8006306:	e002      	b.n	800630e <checkAktifCalisma+0xefe>
				} else {
					kapiactablaesp2=0;
 8006308:	4b60      	ldr	r3, [pc, #384]	; (800648c <checkAktifCalisma+0x107c>)
 800630a:	2200      	movs	r2, #0
 800630c:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapısı prudhome

				if((kapitablaTip==0)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 800630e:	4b60      	ldr	r3, [pc, #384]	; (8006490 <checkAktifCalisma+0x1080>)
 8006310:	781b      	ldrb	r3, [r3, #0]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d137      	bne.n	8006386 <checkAktifCalisma+0xf76>
 8006316:	4b5f      	ldr	r3, [pc, #380]	; (8006494 <checkAktifCalisma+0x1084>)
 8006318:	781b      	ldrb	r3, [r3, #0]
 800631a:	2b02      	cmp	r3, #2
 800631c:	d003      	beq.n	8006326 <checkAktifCalisma+0xf16>
 800631e:	4b5d      	ldr	r3, [pc, #372]	; (8006494 <checkAktifCalisma+0x1084>)
 8006320:	781b      	ldrb	r3, [r3, #0]
 8006322:	2b03      	cmp	r3, #3
 8006324:	d12f      	bne.n	8006386 <checkAktifCalisma+0xf76>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8006326:	4b54      	ldr	r3, [pc, #336]	; (8006478 <checkAktifCalisma+0x1068>)
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d103      	bne.n	8006336 <checkAktifCalisma+0xf26>
 800632e:	4b53      	ldr	r3, [pc, #332]	; (800647c <checkAktifCalisma+0x106c>)
 8006330:	781b      	ldrb	r3, [r3, #0]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d027      	beq.n	8006386 <checkAktifCalisma+0xf76>
						&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 8006336:	f44f 7100 	mov.w	r1, #512	; 0x200
 800633a:	484d      	ldr	r0, [pc, #308]	; (8006470 <checkAktifCalisma+0x1060>)
 800633c:	f002 fb48 	bl	80089d0 <HAL_GPIO_ReadPin>
 8006340:	4603      	mov	r3, r0
 8006342:	2b00      	cmp	r3, #0
 8006344:	d103      	bne.n	800634e <checkAktifCalisma+0xf3e>
 8006346:	4b4e      	ldr	r3, [pc, #312]	; (8006480 <checkAktifCalisma+0x1070>)
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d007      	beq.n	800635e <checkAktifCalisma+0xf4e>
						||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 800634e:	4b4e      	ldr	r3, [pc, #312]	; (8006488 <checkAktifCalisma+0x1078>)
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	2b00      	cmp	r3, #0
 8006354:	d103      	bne.n	800635e <checkAktifCalisma+0xf4e>
 8006356:	4b4d      	ldr	r3, [pc, #308]	; (800648c <checkAktifCalisma+0x107c>)
 8006358:	781b      	ldrb	r3, [r3, #0]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d013      	beq.n	8006386 <checkAktifCalisma+0xf76>
						&&(makineStop==1)
 800635e:	4b4e      	ldr	r3, [pc, #312]	; (8006498 <checkAktifCalisma+0x1088>)
 8006360:	781b      	ldrb	r3, [r3, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00f      	beq.n	8006386 <checkAktifCalisma+0xf76>
						&&(butonKontrol==0)) {
 8006366:	4b4d      	ldr	r3, [pc, #308]	; (800649c <checkAktifCalisma+0x108c>)
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	f083 0301 	eor.w	r3, r3, #1
 800636e:	b2db      	uxtb	r3, r3
 8006370:	2b00      	cmp	r3, #0
 8006372:	d008      	beq.n	8006386 <checkAktifCalisma+0xf76>

					kapiTablaprudhome=1;
 8006374:	4b4a      	ldr	r3, [pc, #296]	; (80064a0 <checkAktifCalisma+0x1090>)
 8006376:	2201      	movs	r2, #1
 8006378:	701a      	strb	r2, [r3, #0]
					timer = millis;
 800637a:	4b4a      	ldr	r3, [pc, #296]	; (80064a4 <checkAktifCalisma+0x1094>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a4a      	ldr	r2, [pc, #296]	; (80064a8 <checkAktifCalisma+0x1098>)
 8006380:	6013      	str	r3, [r2, #0]
					bekle();
 8006382:	f7fe fe15 	bl	8004fb0 <bekle>
				}

				if((millis-timer >= kapiTablaAcSure)||((kapiTablaAcKonumKat1==0)&&(kapiTablaAcKonumKat2==0))||(makineStop==0)) {
 8006386:	4b47      	ldr	r3, [pc, #284]	; (80064a4 <checkAktifCalisma+0x1094>)
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	4b47      	ldr	r3, [pc, #284]	; (80064a8 <checkAktifCalisma+0x1098>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	4a46      	ldr	r2, [pc, #280]	; (80064ac <checkAktifCalisma+0x109c>)
 8006392:	7812      	ldrb	r2, [r2, #0]
 8006394:	4293      	cmp	r3, r2
 8006396:	d214      	bcs.n	80063c2 <checkAktifCalisma+0xfb2>
 8006398:	4b37      	ldr	r3, [pc, #220]	; (8006478 <checkAktifCalisma+0x1068>)
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	f083 0301 	eor.w	r3, r3, #1
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d006      	beq.n	80063b4 <checkAktifCalisma+0xfa4>
 80063a6:	4b35      	ldr	r3, [pc, #212]	; (800647c <checkAktifCalisma+0x106c>)
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	f083 0301 	eor.w	r3, r3, #1
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d106      	bne.n	80063c2 <checkAktifCalisma+0xfb2>
 80063b4:	4b38      	ldr	r3, [pc, #224]	; (8006498 <checkAktifCalisma+0x1088>)
 80063b6:	781b      	ldrb	r3, [r3, #0]
 80063b8:	f083 0301 	eor.w	r3, r3, #1
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d002      	beq.n	80063c8 <checkAktifCalisma+0xfb8>
					kapiTablaprudhome=0;
 80063c2:	4b37      	ldr	r3, [pc, #220]	; (80064a0 <checkAktifCalisma+0x1090>)
 80063c4:	2200      	movs	r2, #0
 80063c6:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı buton kontrol

				if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 80063c8:	4b31      	ldr	r3, [pc, #196]	; (8006490 <checkAktifCalisma+0x1080>)
 80063ca:	781b      	ldrb	r3, [r3, #0]
 80063cc:	2b01      	cmp	r3, #1
 80063ce:	d12b      	bne.n	8006428 <checkAktifCalisma+0x1018>
 80063d0:	4b30      	ldr	r3, [pc, #192]	; (8006494 <checkAktifCalisma+0x1084>)
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	2b02      	cmp	r3, #2
 80063d6:	d003      	beq.n	80063e0 <checkAktifCalisma+0xfd0>
 80063d8:	4b2e      	ldr	r3, [pc, #184]	; (8006494 <checkAktifCalisma+0x1084>)
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	2b03      	cmp	r3, #3
 80063de:	d123      	bne.n	8006428 <checkAktifCalisma+0x1018>

						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 80063e0:	4b25      	ldr	r3, [pc, #148]	; (8006478 <checkAktifCalisma+0x1068>)
 80063e2:	781b      	ldrb	r3, [r3, #0]
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d103      	bne.n	80063f0 <checkAktifCalisma+0xfe0>
 80063e8:	4b24      	ldr	r3, [pc, #144]	; (800647c <checkAktifCalisma+0x106c>)
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d01b      	beq.n	8006428 <checkAktifCalisma+0x1018>
						&&(((HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==0)&&(kapiAcTipi==0))
 80063f0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80063f4:	481e      	ldr	r0, [pc, #120]	; (8006470 <checkAktifCalisma+0x1060>)
 80063f6:	f002 faeb 	bl	80089d0 <HAL_GPIO_ReadPin>
 80063fa:	4603      	mov	r3, r0
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d103      	bne.n	8006408 <checkAktifCalisma+0xff8>
 8006400:	4b1f      	ldr	r3, [pc, #124]	; (8006480 <checkAktifCalisma+0x1070>)
 8006402:	781b      	ldrb	r3, [r3, #0]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d007      	beq.n	8006418 <checkAktifCalisma+0x1008>
						||(kapiactablaesp1)==1 || (kapiactablaesp2)==1)
 8006408:	4b1f      	ldr	r3, [pc, #124]	; (8006488 <checkAktifCalisma+0x1078>)
 800640a:	781b      	ldrb	r3, [r3, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d103      	bne.n	8006418 <checkAktifCalisma+0x1008>
 8006410:	4b1e      	ldr	r3, [pc, #120]	; (800648c <checkAktifCalisma+0x107c>)
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d007      	beq.n	8006428 <checkAktifCalisma+0x1018>
						&&(makineStop==1)) {
 8006418:	4b1f      	ldr	r3, [pc, #124]	; (8006498 <checkAktifCalisma+0x1088>)
 800641a:	781b      	ldrb	r3, [r3, #0]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d003      	beq.n	8006428 <checkAktifCalisma+0x1018>

					kapiTablabutonkontrol=1;
 8006420:	4b23      	ldr	r3, [pc, #140]	; (80064b0 <checkAktifCalisma+0x10a0>)
 8006422:	2201      	movs	r2, #1
 8006424:	701a      	strb	r2, [r3, #0]
 8006426:	e002      	b.n	800642e <checkAktifCalisma+0x101e>
				} else {
					kapiTablabutonkontrol=0;
 8006428:	4b21      	ldr	r3, [pc, #132]	; (80064b0 <checkAktifCalisma+0x10a0>)
 800642a:	2200      	movs	r2, #0
 800642c:	701a      	strb	r2, [r3, #0]
				}

				// tabla kapı pizzato

				if((kapitablaTip==2)&&((kapiSecimleri==2)||(kapiSecimleri==3))
 800642e:	4b18      	ldr	r3, [pc, #96]	; (8006490 <checkAktifCalisma+0x1080>)
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	2b02      	cmp	r3, #2
 8006434:	d140      	bne.n	80064b8 <checkAktifCalisma+0x10a8>
 8006436:	4b17      	ldr	r3, [pc, #92]	; (8006494 <checkAktifCalisma+0x1084>)
 8006438:	781b      	ldrb	r3, [r3, #0]
 800643a:	2b02      	cmp	r3, #2
 800643c:	d003      	beq.n	8006446 <checkAktifCalisma+0x1036>
 800643e:	4b15      	ldr	r3, [pc, #84]	; (8006494 <checkAktifCalisma+0x1084>)
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	2b03      	cmp	r3, #3
 8006444:	d138      	bne.n	80064b8 <checkAktifCalisma+0x10a8>
						&&((kapiTablaAcKonumKat1==1)||(kapiTablaAcKonumKat2==1))
 8006446:	4b0c      	ldr	r3, [pc, #48]	; (8006478 <checkAktifCalisma+0x1068>)
 8006448:	781b      	ldrb	r3, [r3, #0]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d103      	bne.n	8006456 <checkAktifCalisma+0x1046>
 800644e:	4b0b      	ldr	r3, [pc, #44]	; (800647c <checkAktifCalisma+0x106c>)
 8006450:	781b      	ldrb	r3, [r3, #0]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d030      	beq.n	80064b8 <checkAktifCalisma+0x10a8>
						&&(makineStop==1)) {
 8006456:	4b10      	ldr	r3, [pc, #64]	; (8006498 <checkAktifCalisma+0x1088>)
 8006458:	781b      	ldrb	r3, [r3, #0]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d02c      	beq.n	80064b8 <checkAktifCalisma+0x10a8>

					kapiTablapizzato=1;
 800645e:	4b15      	ldr	r3, [pc, #84]	; (80064b4 <checkAktifCalisma+0x10a4>)
 8006460:	2201      	movs	r2, #1
 8006462:	701a      	strb	r2, [r3, #0]
 8006464:	e02b      	b.n	80064be <checkAktifCalisma+0x10ae>
 8006466:	bf00      	nop
 8006468:	40010800 	.word	0x40010800
 800646c:	20000b1d 	.word	0x20000b1d
 8006470:	40011000 	.word	0x40011000
 8006474:	20000b16 	.word	0x20000b16
 8006478:	20000b5b 	.word	0x20000b5b
 800647c:	20000b5c 	.word	0x20000b5c
 8006480:	20000b1c 	.word	0x20000b1c
 8006484:	40010c00 	.word	0x40010c00
 8006488:	20000b6b 	.word	0x20000b6b
 800648c:	20000b6c 	.word	0x20000b6c
 8006490:	20000b1b 	.word	0x20000b1b
 8006494:	20000b18 	.word	0x20000b18
 8006498:	20000b51 	.word	0x20000b51
 800649c:	20000b3e 	.word	0x20000b3e
 80064a0:	20000b58 	.word	0x20000b58
 80064a4:	20000aec 	.word	0x20000aec
 80064a8:	20000af0 	.word	0x20000af0
 80064ac:	20000b2b 	.word	0x20000b2b
 80064b0:	20000b59 	.word	0x20000b59
 80064b4:	20000b5a 	.word	0x20000b5a
				} else { /* if((kapitablaTip==1)&&((kapiSecimleri==2)||(kapiSecimleri==3))) */
					kapiTablapizzato=0;
 80064b8:	4b89      	ldr	r3, [pc, #548]	; (80066e0 <checkAktifCalisma+0x12d0>)
 80064ba:	2200      	movs	r2, #0
 80064bc:	701a      	strb	r2, [r3, #0]
				}

				// kapi Tabla çıkış

				if(kapiTablabutonkontrol==1 || kapiTablaprudhome==1 || kapiTablapizzato==1) {
 80064be:	4b89      	ldr	r3, [pc, #548]	; (80066e4 <checkAktifCalisma+0x12d4>)
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d107      	bne.n	80064d6 <checkAktifCalisma+0x10c6>
 80064c6:	4b88      	ldr	r3, [pc, #544]	; (80066e8 <checkAktifCalisma+0x12d8>)
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d103      	bne.n	80064d6 <checkAktifCalisma+0x10c6>
 80064ce:	4b84      	ldr	r3, [pc, #528]	; (80066e0 <checkAktifCalisma+0x12d0>)
 80064d0:	781b      	ldrb	r3, [r3, #0]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d005      	beq.n	80064e2 <checkAktifCalisma+0x10d2>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 80064d6:	2201      	movs	r2, #1
 80064d8:	2120      	movs	r1, #32
 80064da:	4884      	ldr	r0, [pc, #528]	; (80066ec <checkAktifCalisma+0x12dc>)
 80064dc:	f002 fa8f 	bl	80089fe <HAL_GPIO_WritePin>
 80064e0:	e004      	b.n	80064ec <checkAktifCalisma+0x10dc>
				} else {
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 80064e2:	2200      	movs	r2, #0
 80064e4:	2120      	movs	r1, #32
 80064e6:	4881      	ldr	r0, [pc, #516]	; (80066ec <checkAktifCalisma+0x12dc>)
 80064e8:	f002 fa89 	bl	80089fe <HAL_GPIO_WritePin>
				}

				/********************************* CALİSMA SAYISI KAYIT YERİ *************************************/

				if(((CalismaSayisiYukari==1)&&(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)&&(altLimit==0)&&(makineStop==1))
 80064ec:	4b80      	ldr	r3, [pc, #512]	; (80066f0 <checkAktifCalisma+0x12e0>)
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d00e      	beq.n	8006512 <checkAktifCalisma+0x1102>
 80064f4:	2102      	movs	r1, #2
 80064f6:	487f      	ldr	r0, [pc, #508]	; (80066f4 <checkAktifCalisma+0x12e4>)
 80064f8:	f002 fa6a 	bl	80089d0 <HAL_GPIO_ReadPin>
 80064fc:	4603      	mov	r3, r0
 80064fe:	2b01      	cmp	r3, #1
 8006500:	d107      	bne.n	8006512 <checkAktifCalisma+0x1102>
 8006502:	4b7d      	ldr	r3, [pc, #500]	; (80066f8 <checkAktifCalisma+0x12e8>)
 8006504:	781b      	ldrb	r3, [r3, #0]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d103      	bne.n	8006512 <checkAktifCalisma+0x1102>
 800650a:	4b7c      	ldr	r3, [pc, #496]	; (80066fc <checkAktifCalisma+0x12ec>)
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d112      	bne.n	8006538 <checkAktifCalisma+0x1128>
						||((CalismaSayisiAsagi==1)&&((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)&&(altLimit))&&(makineStop==1))) {
 8006512:	4b7b      	ldr	r3, [pc, #492]	; (8006700 <checkAktifCalisma+0x12f0>)
 8006514:	781b      	ldrb	r3, [r3, #0]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d066      	beq.n	80065e8 <checkAktifCalisma+0x11d8>
 800651a:	2104      	movs	r1, #4
 800651c:	4875      	ldr	r0, [pc, #468]	; (80066f4 <checkAktifCalisma+0x12e4>)
 800651e:	f002 fa57 	bl	80089d0 <HAL_GPIO_ReadPin>
 8006522:	4603      	mov	r3, r0
 8006524:	2b01      	cmp	r3, #1
 8006526:	d15f      	bne.n	80065e8 <checkAktifCalisma+0x11d8>
 8006528:	4b73      	ldr	r3, [pc, #460]	; (80066f8 <checkAktifCalisma+0x12e8>)
 800652a:	781b      	ldrb	r3, [r3, #0]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d05b      	beq.n	80065e8 <checkAktifCalisma+0x11d8>
 8006530:	4b72      	ldr	r3, [pc, #456]	; (80066fc <checkAktifCalisma+0x12ec>)
 8006532:	781b      	ldrb	r3, [r3, #0]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d057      	beq.n	80065e8 <checkAktifCalisma+0x11d8>


					calismaSayisi1=calismaSayisi1+1;
 8006538:	4b72      	ldr	r3, [pc, #456]	; (8006704 <checkAktifCalisma+0x12f4>)
 800653a:	781b      	ldrb	r3, [r3, #0]
 800653c:	3301      	adds	r3, #1
 800653e:	b2da      	uxtb	r2, r3
 8006540:	4b70      	ldr	r3, [pc, #448]	; (8006704 <checkAktifCalisma+0x12f4>)
 8006542:	701a      	strb	r2, [r3, #0]
					if(calismaSayisi1>9) {
 8006544:	4b6f      	ldr	r3, [pc, #444]	; (8006704 <checkAktifCalisma+0x12f4>)
 8006546:	781b      	ldrb	r3, [r3, #0]
 8006548:	2b09      	cmp	r3, #9
 800654a:	d908      	bls.n	800655e <checkAktifCalisma+0x114e>
					  	calismaSayisi1=0;
 800654c:	4b6d      	ldr	r3, [pc, #436]	; (8006704 <checkAktifCalisma+0x12f4>)
 800654e:	2200      	movs	r2, #0
 8006550:	701a      	strb	r2, [r3, #0]
					  	calismaSayisi10=calismaSayisi10+1;
 8006552:	4b6d      	ldr	r3, [pc, #436]	; (8006708 <checkAktifCalisma+0x12f8>)
 8006554:	781b      	ldrb	r3, [r3, #0]
 8006556:	3301      	adds	r3, #1
 8006558:	b2da      	uxtb	r2, r3
 800655a:	4b6b      	ldr	r3, [pc, #428]	; (8006708 <checkAktifCalisma+0x12f8>)
 800655c:	701a      	strb	r2, [r3, #0]
					}
					if(calismaSayisi10>9) {
 800655e:	4b6a      	ldr	r3, [pc, #424]	; (8006708 <checkAktifCalisma+0x12f8>)
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	2b09      	cmp	r3, #9
 8006564:	d908      	bls.n	8006578 <checkAktifCalisma+0x1168>
					  	calismaSayisi10=0;
 8006566:	4b68      	ldr	r3, [pc, #416]	; (8006708 <checkAktifCalisma+0x12f8>)
 8006568:	2200      	movs	r2, #0
 800656a:	701a      	strb	r2, [r3, #0]
					  	calismaSayisi100=calismaSayisi100+1;
 800656c:	4b67      	ldr	r3, [pc, #412]	; (800670c <checkAktifCalisma+0x12fc>)
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	3301      	adds	r3, #1
 8006572:	b2da      	uxtb	r2, r3
 8006574:	4b65      	ldr	r3, [pc, #404]	; (800670c <checkAktifCalisma+0x12fc>)
 8006576:	701a      	strb	r2, [r3, #0]
					}
					if(calismaSayisi100>9) {
 8006578:	4b64      	ldr	r3, [pc, #400]	; (800670c <checkAktifCalisma+0x12fc>)
 800657a:	781b      	ldrb	r3, [r3, #0]
 800657c:	2b09      	cmp	r3, #9
 800657e:	d908      	bls.n	8006592 <checkAktifCalisma+0x1182>
					  	calismaSayisi100=0;
 8006580:	4b62      	ldr	r3, [pc, #392]	; (800670c <checkAktifCalisma+0x12fc>)
 8006582:	2200      	movs	r2, #0
 8006584:	701a      	strb	r2, [r3, #0]
					  	calismaSayisi1000=calismaSayisi1000+1;
 8006586:	4b62      	ldr	r3, [pc, #392]	; (8006710 <checkAktifCalisma+0x1300>)
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	3301      	adds	r3, #1
 800658c:	b2da      	uxtb	r2, r3
 800658e:	4b60      	ldr	r3, [pc, #384]	; (8006710 <checkAktifCalisma+0x1300>)
 8006590:	701a      	strb	r2, [r3, #0]
					}
					if(calismaSayisi1000>9) {
 8006592:	4b5f      	ldr	r3, [pc, #380]	; (8006710 <checkAktifCalisma+0x1300>)
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	2b09      	cmp	r3, #9
 8006598:	d908      	bls.n	80065ac <checkAktifCalisma+0x119c>
					  	calismaSayisi1000=0;
 800659a:	4b5d      	ldr	r3, [pc, #372]	; (8006710 <checkAktifCalisma+0x1300>)
 800659c:	2200      	movs	r2, #0
 800659e:	701a      	strb	r2, [r3, #0]
					  	calismaSayisi10000=calismaSayisi10000+1;
 80065a0:	4b5c      	ldr	r3, [pc, #368]	; (8006714 <checkAktifCalisma+0x1304>)
 80065a2:	781b      	ldrb	r3, [r3, #0]
 80065a4:	3301      	adds	r3, #1
 80065a6:	b2da      	uxtb	r2, r3
 80065a8:	4b5a      	ldr	r3, [pc, #360]	; (8006714 <checkAktifCalisma+0x1304>)
 80065aa:	701a      	strb	r2, [r3, #0]
					}
					eepromData[32]=calismaSayisi10000;
 80065ac:	4b59      	ldr	r3, [pc, #356]	; (8006714 <checkAktifCalisma+0x1304>)
 80065ae:	781a      	ldrb	r2, [r3, #0]
 80065b0:	4b59      	ldr	r3, [pc, #356]	; (8006718 <checkAktifCalisma+0x1308>)
 80065b2:	f883 2020 	strb.w	r2, [r3, #32]
					eepromData[31]=calismaSayisi1000;
 80065b6:	4b56      	ldr	r3, [pc, #344]	; (8006710 <checkAktifCalisma+0x1300>)
 80065b8:	781a      	ldrb	r2, [r3, #0]
 80065ba:	4b57      	ldr	r3, [pc, #348]	; (8006718 <checkAktifCalisma+0x1308>)
 80065bc:	77da      	strb	r2, [r3, #31]
					eepromData[30]=calismaSayisi100;
 80065be:	4b53      	ldr	r3, [pc, #332]	; (800670c <checkAktifCalisma+0x12fc>)
 80065c0:	781a      	ldrb	r2, [r3, #0]
 80065c2:	4b55      	ldr	r3, [pc, #340]	; (8006718 <checkAktifCalisma+0x1308>)
 80065c4:	779a      	strb	r2, [r3, #30]
					eepromData[29]=calismaSayisi10;
 80065c6:	4b50      	ldr	r3, [pc, #320]	; (8006708 <checkAktifCalisma+0x12f8>)
 80065c8:	781a      	ldrb	r2, [r3, #0]
 80065ca:	4b53      	ldr	r3, [pc, #332]	; (8006718 <checkAktifCalisma+0x1308>)
 80065cc:	775a      	strb	r2, [r3, #29]
					eepromData[28]=calismaSayisi1;
 80065ce:	4b4d      	ldr	r3, [pc, #308]	; (8006704 <checkAktifCalisma+0x12f4>)
 80065d0:	781a      	ldrb	r2, [r3, #0]
 80065d2:	4b51      	ldr	r3, [pc, #324]	; (8006718 <checkAktifCalisma+0x1308>)
 80065d4:	771a      	strb	r2, [r3, #28]

					hafizaYaz=1;
 80065d6:	4b51      	ldr	r3, [pc, #324]	; (800671c <checkAktifCalisma+0x130c>)
 80065d8:	2201      	movs	r2, #1
 80065da:	701a      	strb	r2, [r3, #0]

					CalismaSayisiYukari=0;
 80065dc:	4b44      	ldr	r3, [pc, #272]	; (80066f0 <checkAktifCalisma+0x12e0>)
 80065de:	2200      	movs	r2, #0
 80065e0:	701a      	strb	r2, [r3, #0]
					CalismaSayisiAsagi=0;
 80065e2:	4b47      	ldr	r3, [pc, #284]	; (8006700 <checkAktifCalisma+0x12f0>)
 80065e4:	2200      	movs	r2, #0
 80065e6:	701a      	strb	r2, [r3, #0]
				}

				/******************************************* HATA BASLIYOR *******************************************/

				/************************************ ACİL STOP HATA BASLANGICI **************************************************/
				if((HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==0
 80065e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80065ec:	484c      	ldr	r0, [pc, #304]	; (8006720 <checkAktifCalisma+0x1310>)
 80065ee:	f002 f9ef 	bl	80089d0 <HAL_GPIO_ReadPin>
 80065f2:	4603      	mov	r3, r0
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d016      	beq.n	8006626 <checkAktifCalisma+0x1216>
					  	||HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0
 80065f8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80065fc:	4848      	ldr	r0, [pc, #288]	; (8006720 <checkAktifCalisma+0x1310>)
 80065fe:	f002 f9e7 	bl	80089d0 <HAL_GPIO_ReadPin>
 8006602:	4603      	mov	r3, r0
 8006604:	2b00      	cmp	r3, #0
 8006606:	d00e      	beq.n	8006626 <checkAktifCalisma+0x1216>
					  	||HAL_GPIO_ReadPin(devYukariStartIn_GPIO_Port, devYukariStartIn_Pin)==0
 8006608:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800660c:	4844      	ldr	r0, [pc, #272]	; (8006720 <checkAktifCalisma+0x1310>)
 800660e:	f002 f9df 	bl	80089d0 <HAL_GPIO_ReadPin>
 8006612:	4603      	mov	r3, r0
 8006614:	2b00      	cmp	r3, #0
 8006616:	d006      	beq.n	8006626 <checkAktifCalisma+0x1216>
					  	||HAL_GPIO_ReadPin(devAsagiStartIn_GPIO_Port, devAsagiStartIn_Pin)==0)) {
 8006618:	2140      	movs	r1, #64	; 0x40
 800661a:	4836      	ldr	r0, [pc, #216]	; (80066f4 <checkAktifCalisma+0x12e4>)
 800661c:	f002 f9d8 	bl	80089d0 <HAL_GPIO_ReadPin>
 8006620:	4603      	mov	r3, r0
 8006622:	2b00      	cmp	r3, #0
 8006624:	d103      	bne.n	800662e <checkAktifCalisma+0x121e>

					startBasili=1;
 8006626:	4b3f      	ldr	r3, [pc, #252]	; (8006724 <checkAktifCalisma+0x1314>)
 8006628:	2201      	movs	r2, #1
 800662a:	701a      	strb	r2, [r3, #0]
 800662c:	e002      	b.n	8006634 <checkAktifCalisma+0x1224>
				} else {
					startBasili=0;
 800662e:	4b3d      	ldr	r3, [pc, #244]	; (8006724 <checkAktifCalisma+0x1314>)
 8006630:	2200      	movs	r2, #0
 8006632:	701a      	strb	r2, [r3, #0]
				}


				if(startBasili && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==1) {
 8006634:	4b3b      	ldr	r3, [pc, #236]	; (8006724 <checkAktifCalisma+0x1314>)
 8006636:	781b      	ldrb	r3, [r3, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d014      	beq.n	8006666 <checkAktifCalisma+0x1256>
 800663c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006640:	4837      	ldr	r0, [pc, #220]	; (8006720 <checkAktifCalisma+0x1310>)
 8006642:	f002 f9c5 	bl	80089d0 <HAL_GPIO_ReadPin>
 8006646:	4603      	mov	r3, r0
 8006648:	2b01      	cmp	r3, #1
 800664a:	d10c      	bne.n	8006666 <checkAktifCalisma+0x1256>

					hataVar=1;
 800664c:	4b36      	ldr	r3, [pc, #216]	; (8006728 <checkAktifCalisma+0x1318>)
 800664e:	2201      	movs	r2, #1
 8006650:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(1);
 8006652:	2001      	movs	r0, #1
 8006654:	f7fe f8f0 	bl	8004838 <hataKoduLcdGoster>
					hata2EEPROM(1);
 8006658:	2001      	movs	r0, #1
 800665a:	f7fe fc2f 	bl	8004ebc <hata2EEPROM>
					acilstophatasi=1;
 800665e:	4b33      	ldr	r3, [pc, #204]	; (800672c <checkAktifCalisma+0x131c>)
 8006660:	2201      	movs	r2, #1
 8006662:	701a      	strb	r2, [r3, #0]
 8006664:	e018      	b.n	8006698 <checkAktifCalisma+0x1288>
				} else if(acilstophatasi && HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && startBasili==0) {
 8006666:	4b31      	ldr	r3, [pc, #196]	; (800672c <checkAktifCalisma+0x131c>)
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d014      	beq.n	8006698 <checkAktifCalisma+0x1288>
 800666e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8006672:	482b      	ldr	r0, [pc, #172]	; (8006720 <checkAktifCalisma+0x1310>)
 8006674:	f002 f9ac 	bl	80089d0 <HAL_GPIO_ReadPin>
 8006678:	4603      	mov	r3, r0
 800667a:	2b00      	cmp	r3, #0
 800667c:	d10c      	bne.n	8006698 <checkAktifCalisma+0x1288>
 800667e:	4b29      	ldr	r3, [pc, #164]	; (8006724 <checkAktifCalisma+0x1314>)
 8006680:	781b      	ldrb	r3, [r3, #0]
 8006682:	f083 0301 	eor.w	r3, r3, #1
 8006686:	b2db      	uxtb	r3, r3
 8006688:	2b00      	cmp	r3, #0
 800668a:	d005      	beq.n	8006698 <checkAktifCalisma+0x1288>
					acilstophatasi=0;
 800668c:	4b27      	ldr	r3, [pc, #156]	; (800672c <checkAktifCalisma+0x131c>)
 800668e:	2200      	movs	r2, #0
 8006690:	701a      	strb	r2, [r3, #0]
					lcdUpdate(1);
 8006692:	2001      	movs	r0, #1
 8006694:	f7fe f87c 	bl	8004790 <lcdUpdate>
				}

				/************************************ Emniyet Çerçevesi Hatasi ***************************************************/

				if(cerceveVar==0 && (HAL_GPIO_ReadPin(asagiStartIn_GPIO_Port, asagiStartIn_Pin)==0 || cercevesasagicalisma)&& (emniyetCercevesi==1)) {
 8006698:	4b25      	ldr	r3, [pc, #148]	; (8006730 <checkAktifCalisma+0x1320>)
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	f083 0301 	eor.w	r3, r3, #1
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d04c      	beq.n	8006740 <checkAktifCalisma+0x1330>
 80066a6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80066aa:	481d      	ldr	r0, [pc, #116]	; (8006720 <checkAktifCalisma+0x1310>)
 80066ac:	f002 f990 	bl	80089d0 <HAL_GPIO_ReadPin>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d003      	beq.n	80066be <checkAktifCalisma+0x12ae>
 80066b6:	4b1f      	ldr	r3, [pc, #124]	; (8006734 <checkAktifCalisma+0x1324>)
 80066b8:	781b      	ldrb	r3, [r3, #0]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d040      	beq.n	8006740 <checkAktifCalisma+0x1330>
 80066be:	4b1e      	ldr	r3, [pc, #120]	; (8006738 <checkAktifCalisma+0x1328>)
 80066c0:	781b      	ldrb	r3, [r3, #0]
 80066c2:	2b01      	cmp	r3, #1
 80066c4:	d13c      	bne.n	8006740 <checkAktifCalisma+0x1330>
					hataVar=1;
 80066c6:	4b18      	ldr	r3, [pc, #96]	; (8006728 <checkAktifCalisma+0x1318>)
 80066c8:	2201      	movs	r2, #1
 80066ca:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(2);
 80066cc:	2002      	movs	r0, #2
 80066ce:	f7fe f8b3 	bl	8004838 <hataKoduLcdGoster>
					hata2EEPROM(2);
 80066d2:	2002      	movs	r0, #2
 80066d4:	f7fe fbf2 	bl	8004ebc <hata2EEPROM>
					emniyetCercevesihatasi=1;
 80066d8:	4b18      	ldr	r3, [pc, #96]	; (800673c <checkAktifCalisma+0x132c>)
 80066da:	2201      	movs	r2, #1
 80066dc:	701a      	strb	r2, [r3, #0]
 80066de:	e047      	b.n	8006770 <checkAktifCalisma+0x1360>
 80066e0:	20000b5a 	.word	0x20000b5a
 80066e4:	20000b59 	.word	0x20000b59
 80066e8:	20000b58 	.word	0x20000b58
 80066ec:	40010800 	.word	0x40010800
 80066f0:	20000b4e 	.word	0x20000b4e
 80066f4:	40011000 	.word	0x40011000
 80066f8:	20000b16 	.word	0x20000b16
 80066fc:	20000b51 	.word	0x20000b51
 8006700:	20000b4f 	.word	0x20000b4f
 8006704:	20000b0d 	.word	0x20000b0d
 8006708:	20000b0e 	.word	0x20000b0e
 800670c:	20000941 	.word	0x20000941
 8006710:	20000942 	.word	0x20000942
 8006714:	20000b0f 	.word	0x20000b0f
 8006718:	20000aa4 	.word	0x20000aa4
 800671c:	20000b3b 	.word	0x20000b3b
 8006720:	40010c00 	.word	0x40010c00
 8006724:	20000b5d 	.word	0x20000b5d
 8006728:	20000b64 	.word	0x20000b64
 800672c:	20000b5f 	.word	0x20000b5f
 8006730:	20000b66 	.word	0x20000b66
 8006734:	20000b70 	.word	0x20000b70
 8006738:	20000b14 	.word	0x20000b14
 800673c:	20000b60 	.word	0x20000b60
				} else if(emniyetCercevesihatasi && cerceveVar==1 && asagivalfcalisiyor==0) {
 8006740:	4b97      	ldr	r3, [pc, #604]	; (80069a0 <checkAktifCalisma+0x1590>)
 8006742:	781b      	ldrb	r3, [r3, #0]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d013      	beq.n	8006770 <checkAktifCalisma+0x1360>
 8006748:	4b96      	ldr	r3, [pc, #600]	; (80069a4 <checkAktifCalisma+0x1594>)
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d00f      	beq.n	8006770 <checkAktifCalisma+0x1360>
 8006750:	4b95      	ldr	r3, [pc, #596]	; (80069a8 <checkAktifCalisma+0x1598>)
 8006752:	781b      	ldrb	r3, [r3, #0]
 8006754:	f083 0301 	eor.w	r3, r3, #1
 8006758:	b2db      	uxtb	r3, r3
 800675a:	2b00      	cmp	r3, #0
 800675c:	d008      	beq.n	8006770 <checkAktifCalisma+0x1360>
					emniyetCercevesihatasi=0;
 800675e:	4b90      	ldr	r3, [pc, #576]	; (80069a0 <checkAktifCalisma+0x1590>)
 8006760:	2200      	movs	r2, #0
 8006762:	701a      	strb	r2, [r3, #0]
					cercevesasagicalisma=0;
 8006764:	4b91      	ldr	r3, [pc, #580]	; (80069ac <checkAktifCalisma+0x159c>)
 8006766:	2200      	movs	r2, #0
 8006768:	701a      	strb	r2, [r3, #0]
					lcdUpdate(2);
 800676a:	2002      	movs	r0, #2
 800676c:	f7fe f810 	bl	8004790 <lcdUpdate>
				}

				/************************************ BASINC ASIRI YUK HATASI **************************************************/

				if(basincVar==0 && basincSalteri==1 && motorcalisiyor==1 && HAL_GPIO_ReadPin(basincSalteriIn_GPIO_Port, basincSalteriIn_Pin)==1) {
 8006770:	4b8f      	ldr	r3, [pc, #572]	; (80069b0 <checkAktifCalisma+0x15a0>)
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	2b00      	cmp	r3, #0
 8006776:	d11c      	bne.n	80067b2 <checkAktifCalisma+0x13a2>
 8006778:	4b8e      	ldr	r3, [pc, #568]	; (80069b4 <checkAktifCalisma+0x15a4>)
 800677a:	781b      	ldrb	r3, [r3, #0]
 800677c:	2b01      	cmp	r3, #1
 800677e:	d118      	bne.n	80067b2 <checkAktifCalisma+0x13a2>
 8006780:	4b8d      	ldr	r3, [pc, #564]	; (80069b8 <checkAktifCalisma+0x15a8>)
 8006782:	781b      	ldrb	r3, [r3, #0]
 8006784:	2b00      	cmp	r3, #0
 8006786:	d014      	beq.n	80067b2 <checkAktifCalisma+0x13a2>
 8006788:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800678c:	488b      	ldr	r0, [pc, #556]	; (80069bc <checkAktifCalisma+0x15ac>)
 800678e:	f002 f91f 	bl	80089d0 <HAL_GPIO_ReadPin>
 8006792:	4603      	mov	r3, r0
 8006794:	2b01      	cmp	r3, #1
 8006796:	d10c      	bne.n	80067b2 <checkAktifCalisma+0x13a2>
					hataVar=1;
 8006798:	4b89      	ldr	r3, [pc, #548]	; (80069c0 <checkAktifCalisma+0x15b0>)
 800679a:	2201      	movs	r2, #1
 800679c:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(3);
 800679e:	2003      	movs	r0, #3
 80067a0:	f7fe f84a 	bl	8004838 <hataKoduLcdGoster>
					hata2EEPROM(3);
 80067a4:	2003      	movs	r0, #3
 80067a6:	f7fe fb89 	bl	8004ebc <hata2EEPROM>
					basinchatasi=1;
 80067aa:	4b86      	ldr	r3, [pc, #536]	; (80069c4 <checkAktifCalisma+0x15b4>)
 80067ac:	2201      	movs	r2, #1
 80067ae:	701a      	strb	r2, [r3, #0]
 80067b0:	e015      	b.n	80067de <checkAktifCalisma+0x13ce>
				} else if(basinchatasi && basincVar==1 && HAL_GPIO_ReadPin(yukariStartIn_GPIO_Port, yukariStartIn_Pin)==1) {
 80067b2:	4b84      	ldr	r3, [pc, #528]	; (80069c4 <checkAktifCalisma+0x15b4>)
 80067b4:	781b      	ldrb	r3, [r3, #0]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d011      	beq.n	80067de <checkAktifCalisma+0x13ce>
 80067ba:	4b7d      	ldr	r3, [pc, #500]	; (80069b0 <checkAktifCalisma+0x15a0>)
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	2b01      	cmp	r3, #1
 80067c0:	d10d      	bne.n	80067de <checkAktifCalisma+0x13ce>
 80067c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80067c6:	4880      	ldr	r0, [pc, #512]	; (80069c8 <checkAktifCalisma+0x15b8>)
 80067c8:	f002 f902 	bl	80089d0 <HAL_GPIO_ReadPin>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b01      	cmp	r3, #1
 80067d0:	d105      	bne.n	80067de <checkAktifCalisma+0x13ce>
					basinchatasi=0;
 80067d2:	4b7c      	ldr	r3, [pc, #496]	; (80069c4 <checkAktifCalisma+0x15b4>)
 80067d4:	2200      	movs	r2, #0
 80067d6:	701a      	strb	r2, [r3, #0]
					lcdUpdate(3);
 80067d8:	2003      	movs	r0, #3
 80067da:	f7fd ffd9 	bl	8004790 <lcdUpdate>
				}

				/************************************ KAPI SİVİÇ HATASI **************************************************/
				if((startBasili || HataMakineCalisiyorkapi) && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 80067de:	4b7b      	ldr	r3, [pc, #492]	; (80069cc <checkAktifCalisma+0x15bc>)
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d103      	bne.n	80067ee <checkAktifCalisma+0x13de>
 80067e6:	4b7a      	ldr	r3, [pc, #488]	; (80069d0 <checkAktifCalisma+0x15c0>)
 80067e8:	781b      	ldrb	r3, [r3, #0]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d01c      	beq.n	8006828 <checkAktifCalisma+0x1418>
 80067ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80067f2:	4878      	ldr	r0, [pc, #480]	; (80069d4 <checkAktifCalisma+0x15c4>)
 80067f4:	f002 f8ec 	bl	80089d0 <HAL_GPIO_ReadPin>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b01      	cmp	r3, #1
 80067fc:	d114      	bne.n	8006828 <checkAktifCalisma+0x1418>
 80067fe:	4b76      	ldr	r3, [pc, #472]	; (80069d8 <checkAktifCalisma+0x15c8>)
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	2b01      	cmp	r3, #1
 8006804:	d003      	beq.n	800680e <checkAktifCalisma+0x13fe>
 8006806:	4b74      	ldr	r3, [pc, #464]	; (80069d8 <checkAktifCalisma+0x15c8>)
 8006808:	781b      	ldrb	r3, [r3, #0]
 800680a:	2b03      	cmp	r3, #3
 800680c:	d10c      	bne.n	8006828 <checkAktifCalisma+0x1418>
					hataVar=1;
 800680e:	4b6c      	ldr	r3, [pc, #432]	; (80069c0 <checkAktifCalisma+0x15b0>)
 8006810:	2201      	movs	r2, #1
 8006812:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(4);
 8006814:	2004      	movs	r0, #4
 8006816:	f7fe f80f 	bl	8004838 <hataKoduLcdGoster>
					hata2EEPROM(4);
 800681a:	2004      	movs	r0, #4
 800681c:	f7fe fb4e 	bl	8004ebc <hata2EEPROM>
					katkapisivicihatasi=1;
 8006820:	4b6e      	ldr	r3, [pc, #440]	; (80069dc <checkAktifCalisma+0x15cc>)
 8006822:	2201      	movs	r2, #1
 8006824:	701a      	strb	r2, [r3, #0]
 8006826:	e01f      	b.n	8006868 <checkAktifCalisma+0x1458>
				} else if (katkapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(kapiSiviciIn_GPIO_Port, kapiSiviciIn_Pin)==0) {
 8006828:	4b6c      	ldr	r3, [pc, #432]	; (80069dc <checkAktifCalisma+0x15cc>)
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d01b      	beq.n	8006868 <checkAktifCalisma+0x1458>
 8006830:	4b6b      	ldr	r3, [pc, #428]	; (80069e0 <checkAktifCalisma+0x15d0>)
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d017      	beq.n	8006868 <checkAktifCalisma+0x1458>
 8006838:	4b64      	ldr	r3, [pc, #400]	; (80069cc <checkAktifCalisma+0x15bc>)
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	f083 0301 	eor.w	r3, r3, #1
 8006840:	b2db      	uxtb	r3, r3
 8006842:	2b00      	cmp	r3, #0
 8006844:	d010      	beq.n	8006868 <checkAktifCalisma+0x1458>
 8006846:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800684a:	4862      	ldr	r0, [pc, #392]	; (80069d4 <checkAktifCalisma+0x15c4>)
 800684c:	f002 f8c0 	bl	80089d0 <HAL_GPIO_ReadPin>
 8006850:	4603      	mov	r3, r0
 8006852:	2b00      	cmp	r3, #0
 8006854:	d108      	bne.n	8006868 <checkAktifCalisma+0x1458>

					katkapisivicihatasi=0;
 8006856:	4b61      	ldr	r3, [pc, #388]	; (80069dc <checkAktifCalisma+0x15cc>)
 8006858:	2200      	movs	r2, #0
 800685a:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=0;
 800685c:	4b5c      	ldr	r3, [pc, #368]	; (80069d0 <checkAktifCalisma+0x15c0>)
 800685e:	2200      	movs	r2, #0
 8006860:	701a      	strb	r2, [r3, #0]
					lcdUpdate(4);
 8006862:	2004      	movs	r0, #4
 8006864:	f7fd ff94 	bl	8004790 <lcdUpdate>
				}

				/************************************ TABLA KAPI SİVİÇ HATASI **************************************************/

				if((startBasili || HataMakineCalisiyortabla)&& HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==1 && (kapiSecimleri==1 || kapiSecimleri==3)) {
 8006868:	4b58      	ldr	r3, [pc, #352]	; (80069cc <checkAktifCalisma+0x15bc>)
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	2b00      	cmp	r3, #0
 800686e:	d103      	bne.n	8006878 <checkAktifCalisma+0x1468>
 8006870:	4b5c      	ldr	r3, [pc, #368]	; (80069e4 <checkAktifCalisma+0x15d4>)
 8006872:	781b      	ldrb	r3, [r3, #0]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d01c      	beq.n	80068b2 <checkAktifCalisma+0x14a2>
 8006878:	f44f 7180 	mov.w	r1, #256	; 0x100
 800687c:	4855      	ldr	r0, [pc, #340]	; (80069d4 <checkAktifCalisma+0x15c4>)
 800687e:	f002 f8a7 	bl	80089d0 <HAL_GPIO_ReadPin>
 8006882:	4603      	mov	r3, r0
 8006884:	2b01      	cmp	r3, #1
 8006886:	d114      	bne.n	80068b2 <checkAktifCalisma+0x14a2>
 8006888:	4b53      	ldr	r3, [pc, #332]	; (80069d8 <checkAktifCalisma+0x15c8>)
 800688a:	781b      	ldrb	r3, [r3, #0]
 800688c:	2b01      	cmp	r3, #1
 800688e:	d003      	beq.n	8006898 <checkAktifCalisma+0x1488>
 8006890:	4b51      	ldr	r3, [pc, #324]	; (80069d8 <checkAktifCalisma+0x15c8>)
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	2b03      	cmp	r3, #3
 8006896:	d10c      	bne.n	80068b2 <checkAktifCalisma+0x14a2>

					hataVar=1;
 8006898:	4b49      	ldr	r3, [pc, #292]	; (80069c0 <checkAktifCalisma+0x15b0>)
 800689a:	2201      	movs	r2, #1
 800689c:	701a      	strb	r2, [r3, #0]
					hataKoduLcdGoster(5);
 800689e:	2005      	movs	r0, #5
 80068a0:	f7fd ffca 	bl	8004838 <hataKoduLcdGoster>
					hata2EEPROM(5);
 80068a4:	2005      	movs	r0, #5
 80068a6:	f7fe fb09 	bl	8004ebc <hata2EEPROM>
					tablakapisivicihatasi=1;
 80068aa:	4b4f      	ldr	r3, [pc, #316]	; (80069e8 <checkAktifCalisma+0x15d8>)
 80068ac:	2201      	movs	r2, #1
 80068ae:	701a      	strb	r2, [r3, #0]
 80068b0:	e023      	b.n	80068fa <checkAktifCalisma+0x14ea>
				} else if (tablakapisivicihatasi && makineStop && startBasili==0 && HAL_GPIO_ReadPin(tablaKapiSiviciIn_GPIO_Port, tablaKapiSiviciIn_Pin)==0 && makineStop==1) {
 80068b2:	4b4d      	ldr	r3, [pc, #308]	; (80069e8 <checkAktifCalisma+0x15d8>)
 80068b4:	781b      	ldrb	r3, [r3, #0]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d01f      	beq.n	80068fa <checkAktifCalisma+0x14ea>
 80068ba:	4b49      	ldr	r3, [pc, #292]	; (80069e0 <checkAktifCalisma+0x15d0>)
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d01b      	beq.n	80068fa <checkAktifCalisma+0x14ea>
 80068c2:	4b42      	ldr	r3, [pc, #264]	; (80069cc <checkAktifCalisma+0x15bc>)
 80068c4:	781b      	ldrb	r3, [r3, #0]
 80068c6:	f083 0301 	eor.w	r3, r3, #1
 80068ca:	b2db      	uxtb	r3, r3
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d014      	beq.n	80068fa <checkAktifCalisma+0x14ea>
 80068d0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80068d4:	483f      	ldr	r0, [pc, #252]	; (80069d4 <checkAktifCalisma+0x15c4>)
 80068d6:	f002 f87b 	bl	80089d0 <HAL_GPIO_ReadPin>
 80068da:	4603      	mov	r3, r0
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d10c      	bne.n	80068fa <checkAktifCalisma+0x14ea>
 80068e0:	4b3f      	ldr	r3, [pc, #252]	; (80069e0 <checkAktifCalisma+0x15d0>)
 80068e2:	781b      	ldrb	r3, [r3, #0]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d008      	beq.n	80068fa <checkAktifCalisma+0x14ea>
					tablakapisivicihatasi=0;
 80068e8:	4b3f      	ldr	r3, [pc, #252]	; (80069e8 <checkAktifCalisma+0x15d8>)
 80068ea:	2200      	movs	r2, #0
 80068ec:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=0;
 80068ee:	4b3d      	ldr	r3, [pc, #244]	; (80069e4 <checkAktifCalisma+0x15d4>)
 80068f0:	2200      	movs	r2, #0
 80068f2:	701a      	strb	r2, [r3, #0]
					lcdUpdate(5);
 80068f4:	2005      	movs	r0, #5
 80068f6:	f7fd ff4b 	bl	8004790 <lcdUpdate>
				}

				/************************************ MAX CALİSMA HATASI BASLANGIC ******************************************/

				if((motorcalisiyor)||(asagivalfcalisiyor)||(devmotorasagicalisiyor)) {
 80068fa:	4b2f      	ldr	r3, [pc, #188]	; (80069b8 <checkAktifCalisma+0x15a8>)
 80068fc:	781b      	ldrb	r3, [r3, #0]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d107      	bne.n	8006912 <checkAktifCalisma+0x1502>
 8006902:	4b29      	ldr	r3, [pc, #164]	; (80069a8 <checkAktifCalisma+0x1598>)
 8006904:	781b      	ldrb	r3, [r3, #0]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d103      	bne.n	8006912 <checkAktifCalisma+0x1502>
 800690a:	4b38      	ldr	r3, [pc, #224]	; (80069ec <checkAktifCalisma+0x15dc>)
 800690c:	781b      	ldrb	r3, [r3, #0]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d014      	beq.n	800693c <checkAktifCalisma+0x152c>
				    if(millis-timer4>=makineCalismaTmr) {
 8006912:	4b37      	ldr	r3, [pc, #220]	; (80069f0 <checkAktifCalisma+0x15e0>)
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	4b37      	ldr	r3, [pc, #220]	; (80069f4 <checkAktifCalisma+0x15e4>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	1ad3      	subs	r3, r2, r3
 800691c:	4a36      	ldr	r2, [pc, #216]	; (80069f8 <checkAktifCalisma+0x15e8>)
 800691e:	7812      	ldrb	r2, [r2, #0]
 8006920:	4293      	cmp	r3, r2
 8006922:	d30b      	bcc.n	800693c <checkAktifCalisma+0x152c>
					  	hataVar=1;
 8006924:	4b26      	ldr	r3, [pc, #152]	; (80069c0 <checkAktifCalisma+0x15b0>)
 8006926:	2201      	movs	r2, #1
 8006928:	701a      	strb	r2, [r3, #0]
					  	hataKoduLcdGoster(6);
 800692a:	2006      	movs	r0, #6
 800692c:	f7fd ff84 	bl	8004838 <hataKoduLcdGoster>
					  	hata2EEPROM(6);
 8006930:	2006      	movs	r0, #6
 8006932:	f7fe fac3 	bl	8004ebc <hata2EEPROM>
					  	maksimumcalismahatasi=1;
 8006936:	4b31      	ldr	r3, [pc, #196]	; (80069fc <checkAktifCalisma+0x15ec>)
 8006938:	2201      	movs	r2, #1
 800693a:	701a      	strb	r2, [r3, #0]
					  }
				}

				if(maksimumcalismahatasi && HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port, butonEnterIn_Pin) && startBasili==0) {
 800693c:	4b2f      	ldr	r3, [pc, #188]	; (80069fc <checkAktifCalisma+0x15ec>)
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d013      	beq.n	800696c <checkAktifCalisma+0x155c>
 8006944:	2108      	movs	r1, #8
 8006946:	4823      	ldr	r0, [pc, #140]	; (80069d4 <checkAktifCalisma+0x15c4>)
 8006948:	f002 f842 	bl	80089d0 <HAL_GPIO_ReadPin>
 800694c:	4603      	mov	r3, r0
 800694e:	2b00      	cmp	r3, #0
 8006950:	d00c      	beq.n	800696c <checkAktifCalisma+0x155c>
 8006952:	4b1e      	ldr	r3, [pc, #120]	; (80069cc <checkAktifCalisma+0x15bc>)
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	f083 0301 	eor.w	r3, r3, #1
 800695a:	b2db      	uxtb	r3, r3
 800695c:	2b00      	cmp	r3, #0
 800695e:	d005      	beq.n	800696c <checkAktifCalisma+0x155c>
					maksimumcalismahatasi=0;
 8006960:	4b26      	ldr	r3, [pc, #152]	; (80069fc <checkAktifCalisma+0x15ec>)
 8006962:	2200      	movs	r2, #0
 8006964:	701a      	strb	r2, [r3, #0]
					lcdUpdate(6);
 8006966:	2006      	movs	r0, #6
 8006968:	f7fd ff12 	bl	8004790 <lcdUpdate>
				}

				if((yukarimotorcalisiyor==1)||(asagivalfcalisiyor==1)||(devmotoryukaricalisiyor==1)||(devmotorasagicalisiyor==1)) {
 800696c:	4b24      	ldr	r3, [pc, #144]	; (8006a00 <checkAktifCalisma+0x15f0>)
 800696e:	781b      	ldrb	r3, [r3, #0]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d10b      	bne.n	800698c <checkAktifCalisma+0x157c>
 8006974:	4b0c      	ldr	r3, [pc, #48]	; (80069a8 <checkAktifCalisma+0x1598>)
 8006976:	781b      	ldrb	r3, [r3, #0]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d107      	bne.n	800698c <checkAktifCalisma+0x157c>
 800697c:	4b21      	ldr	r3, [pc, #132]	; (8006a04 <checkAktifCalisma+0x15f4>)
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d103      	bne.n	800698c <checkAktifCalisma+0x157c>
 8006984:	4b19      	ldr	r3, [pc, #100]	; (80069ec <checkAktifCalisma+0x15dc>)
 8006986:	781b      	ldrb	r3, [r3, #0]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d03f      	beq.n	8006a0c <checkAktifCalisma+0x15fc>
					makineCalisiyor=0;
 800698c:	4b1e      	ldr	r3, [pc, #120]	; (8006a08 <checkAktifCalisma+0x15f8>)
 800698e:	2200      	movs	r2, #0
 8006990:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyorkapi=1;
 8006992:	4b0f      	ldr	r3, [pc, #60]	; (80069d0 <checkAktifCalisma+0x15c0>)
 8006994:	2201      	movs	r2, #1
 8006996:	701a      	strb	r2, [r3, #0]
					HataMakineCalisiyortabla=1;
 8006998:	4b12      	ldr	r3, [pc, #72]	; (80069e4 <checkAktifCalisma+0x15d4>)
 800699a:	2201      	movs	r2, #1
 800699c:	701a      	strb	r2, [r3, #0]
 800699e:	e03c      	b.n	8006a1a <checkAktifCalisma+0x160a>
 80069a0:	20000b60 	.word	0x20000b60
 80069a4:	20000b66 	.word	0x20000b66
 80069a8:	20000b47 	.word	0x20000b47
 80069ac:	20000b70 	.word	0x20000b70
 80069b0:	20000b13 	.word	0x20000b13
 80069b4:	20000b17 	.word	0x20000b17
 80069b8:	20000b63 	.word	0x20000b63
 80069bc:	40011000 	.word	0x40011000
 80069c0:	20000b64 	.word	0x20000b64
 80069c4:	20000b6d 	.word	0x20000b6d
 80069c8:	40010c00 	.word	0x40010c00
 80069cc:	20000b5d 	.word	0x20000b5d
 80069d0:	20000b71 	.word	0x20000b71
 80069d4:	40010800 	.word	0x40010800
 80069d8:	20000b18 	.word	0x20000b18
 80069dc:	20000b6e 	.word	0x20000b6e
 80069e0:	20000b51 	.word	0x20000b51
 80069e4:	20000b72 	.word	0x20000b72
 80069e8:	20000b6f 	.word	0x20000b6f
 80069ec:	20000b46 	.word	0x20000b46
 80069f0:	20000aec 	.word	0x20000aec
 80069f4:	20000b00 	.word	0x20000b00
 80069f8:	20000b28 	.word	0x20000b28
 80069fc:	20000b5e 	.word	0x20000b5e
 8006a00:	20000b44 	.word	0x20000b44
 8006a04:	20000b45 	.word	0x20000b45
 8006a08:	20000b65 	.word	0x20000b65
				} else {
					makineCalisiyor=1;
 8006a0c:	4b1e      	ldr	r3, [pc, #120]	; (8006a88 <checkAktifCalisma+0x1678>)
 8006a0e:	2201      	movs	r2, #1
 8006a10:	701a      	strb	r2, [r3, #0]
					timer4=millis;
 8006a12:	4b1e      	ldr	r3, [pc, #120]	; (8006a8c <checkAktifCalisma+0x167c>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	4a1e      	ldr	r2, [pc, #120]	; (8006a90 <checkAktifCalisma+0x1680>)
 8006a18:	6013      	str	r3, [r2, #0]
				}

				/*********************************** HATA YOKSA HATA VAR SIFIRLA **************************************************/
				if(hataVar==1 && acilstophatasi==0 && emniyetCercevesihatasi==0 && basinchatasi==0
 8006a1a:	4b1e      	ldr	r3, [pc, #120]	; (8006a94 <checkAktifCalisma+0x1684>)
 8006a1c:	781b      	ldrb	r3, [r3, #0]
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d02f      	beq.n	8006a82 <checkAktifCalisma+0x1672>
 8006a22:	4b1d      	ldr	r3, [pc, #116]	; (8006a98 <checkAktifCalisma+0x1688>)
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	f083 0301 	eor.w	r3, r3, #1
 8006a2a:	b2db      	uxtb	r3, r3
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d028      	beq.n	8006a82 <checkAktifCalisma+0x1672>
 8006a30:	4b1a      	ldr	r3, [pc, #104]	; (8006a9c <checkAktifCalisma+0x168c>)
 8006a32:	781b      	ldrb	r3, [r3, #0]
 8006a34:	f083 0301 	eor.w	r3, r3, #1
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d021      	beq.n	8006a82 <checkAktifCalisma+0x1672>
 8006a3e:	4b18      	ldr	r3, [pc, #96]	; (8006aa0 <checkAktifCalisma+0x1690>)
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	f083 0301 	eor.w	r3, r3, #1
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d01a      	beq.n	8006a82 <checkAktifCalisma+0x1672>
						&& katkapisivicihatasi==0 && tablakapisivicihatasi==0 && maksimumcalismahatasi==0) {
 8006a4c:	4b15      	ldr	r3, [pc, #84]	; (8006aa4 <checkAktifCalisma+0x1694>)
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	f083 0301 	eor.w	r3, r3, #1
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	d013      	beq.n	8006a82 <checkAktifCalisma+0x1672>
 8006a5a:	4b13      	ldr	r3, [pc, #76]	; (8006aa8 <checkAktifCalisma+0x1698>)
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	f083 0301 	eor.w	r3, r3, #1
 8006a62:	b2db      	uxtb	r3, r3
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d00c      	beq.n	8006a82 <checkAktifCalisma+0x1672>
 8006a68:	4b10      	ldr	r3, [pc, #64]	; (8006aac <checkAktifCalisma+0x169c>)
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	f083 0301 	eor.w	r3, r3, #1
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d005      	beq.n	8006a82 <checkAktifCalisma+0x1672>

					hataVar=0;
 8006a76:	4b07      	ldr	r3, [pc, #28]	; (8006a94 <checkAktifCalisma+0x1684>)
 8006a78:	2200      	movs	r2, #0
 8006a7a:	701a      	strb	r2, [r3, #0]
					lcdUpdate(7);
 8006a7c:	2007      	movs	r0, #7
 8006a7e:	f7fd fe87 	bl	8004790 <lcdUpdate>
				}


				/************************************ HATA LCD GÖSTERME ************************************************************/
			} 		// aktif calisma son parantez.
}
 8006a82:	bf00      	nop
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	20000b65 	.word	0x20000b65
 8006a8c:	20000aec 	.word	0x20000aec
 8006a90:	20000b00 	.word	0x20000b00
 8006a94:	20000b64 	.word	0x20000b64
 8006a98:	20000b5f 	.word	0x20000b5f
 8006a9c:	20000b60 	.word	0x20000b60
 8006aa0:	20000b6d 	.word	0x20000b6d
 8006aa4:	20000b6e 	.word	0x20000b6e
 8006aa8:	20000b6f 	.word	0x20000b6f
 8006aac:	20000b5e 	.word	0x20000b5e

08006ab0 <checkDemoModCalisma>:

void checkDemoModCalisma() {
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	af00      	add	r7, sp, #0
	if((demoMode==1)&&(stopVar)&&(menuGiris==0)) {
 8006ab4:	4b8b      	ldr	r3, [pc, #556]	; (8006ce4 <checkDemoModCalisma+0x234>)
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	2b01      	cmp	r3, #1
 8006aba:	f040 8229 	bne.w	8006f10 <checkDemoModCalisma+0x460>
 8006abe:	4b8a      	ldr	r3, [pc, #552]	; (8006ce8 <checkDemoModCalisma+0x238>)
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	f000 8224 	beq.w	8006f10 <checkDemoModCalisma+0x460>
 8006ac8:	4b88      	ldr	r3, [pc, #544]	; (8006cec <checkDemoModCalisma+0x23c>)
 8006aca:	781b      	ldrb	r3, [r3, #0]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	f040 821f 	bne.w	8006f10 <checkDemoModCalisma+0x460>
				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==0)
 8006ad2:	2102      	movs	r1, #2
 8006ad4:	4886      	ldr	r0, [pc, #536]	; (8006cf0 <checkDemoModCalisma+0x240>)
 8006ad6:	f001 ff7b 	bl	80089d0 <HAL_GPIO_ReadPin>
 8006ada:	4603      	mov	r3, r0
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d11d      	bne.n	8006b1c <checkDemoModCalisma+0x6c>
						&& (demoAsagiCalis==0)
 8006ae0:	4b84      	ldr	r3, [pc, #528]	; (8006cf4 <checkDemoModCalisma+0x244>)
 8006ae2:	781b      	ldrb	r3, [r3, #0]
 8006ae4:	f083 0301 	eor.w	r3, r3, #1
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d016      	beq.n	8006b1c <checkDemoModCalisma+0x6c>
						&& (demoDevYukari==0)
 8006aee:	4b82      	ldr	r3, [pc, #520]	; (8006cf8 <checkDemoModCalisma+0x248>)
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	f083 0301 	eor.w	r3, r3, #1
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d00f      	beq.n	8006b1c <checkDemoModCalisma+0x6c>
						&& (demoDevAsagi==0)) {
 8006afc:	4b7f      	ldr	r3, [pc, #508]	; (8006cfc <checkDemoModCalisma+0x24c>)
 8006afe:	781b      	ldrb	r3, [r3, #0]
 8006b00:	f083 0301 	eor.w	r3, r3, #1
 8006b04:	b2db      	uxtb	r3, r3
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d008      	beq.n	8006b1c <checkDemoModCalisma+0x6c>

					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_SET);
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	2104      	movs	r1, #4
 8006b0e:	487c      	ldr	r0, [pc, #496]	; (8006d00 <checkDemoModCalisma+0x250>)
 8006b10:	f001 ff75 	bl	80089fe <HAL_GPIO_WritePin>
					demoYukariCalis=1;
 8006b14:	4b7b      	ldr	r3, [pc, #492]	; (8006d04 <checkDemoModCalisma+0x254>)
 8006b16:	2201      	movs	r2, #1
 8006b18:	701a      	strb	r2, [r3, #0]
 8006b1a:	e00e      	b.n	8006b3a <checkDemoModCalisma+0x8a>
				} else if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006b1c:	2102      	movs	r1, #2
 8006b1e:	4874      	ldr	r0, [pc, #464]	; (8006cf0 <checkDemoModCalisma+0x240>)
 8006b20:	f001 ff56 	bl	80089d0 <HAL_GPIO_ReadPin>
 8006b24:	4603      	mov	r3, r0
 8006b26:	2b01      	cmp	r3, #1
 8006b28:	d107      	bne.n	8006b3a <checkDemoModCalisma+0x8a>

					HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	2104      	movs	r1, #4
 8006b2e:	4874      	ldr	r0, [pc, #464]	; (8006d00 <checkDemoModCalisma+0x250>)
 8006b30:	f001 ff65 	bl	80089fe <HAL_GPIO_WritePin>
					demoYukariCalis=0;
 8006b34:	4b73      	ldr	r3, [pc, #460]	; (8006d04 <checkDemoModCalisma+0x254>)
 8006b36:	2200      	movs	r2, #0
 8006b38:	701a      	strb	r2, [r3, #0]
				}

				// DEMO MOTOR CALISMASI

				if((demoYukariCalis)||(demoDevYukari)||(demoDevAsagi)||(demoAsagiCalis)) {
 8006b3a:	4b72      	ldr	r3, [pc, #456]	; (8006d04 <checkDemoModCalisma+0x254>)
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d10b      	bne.n	8006b5a <checkDemoModCalisma+0xaa>
 8006b42:	4b6d      	ldr	r3, [pc, #436]	; (8006cf8 <checkDemoModCalisma+0x248>)
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d107      	bne.n	8006b5a <checkDemoModCalisma+0xaa>
 8006b4a:	4b6c      	ldr	r3, [pc, #432]	; (8006cfc <checkDemoModCalisma+0x24c>)
 8006b4c:	781b      	ldrb	r3, [r3, #0]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d103      	bne.n	8006b5a <checkDemoModCalisma+0xaa>
 8006b52:	4b68      	ldr	r3, [pc, #416]	; (8006cf4 <checkDemoModCalisma+0x244>)
 8006b54:	781b      	ldrb	r3, [r3, #0]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d00c      	beq.n	8006b74 <checkDemoModCalisma+0xc4>
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_SET);
 8006b5a:	2201      	movs	r2, #1
 8006b5c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006b60:	4867      	ldr	r0, [pc, #412]	; (8006d00 <checkDemoModCalisma+0x250>)
 8006b62:	f001 ff4c 	bl	80089fe <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_SET);
 8006b66:	2201      	movs	r2, #1
 8006b68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006b6c:	4864      	ldr	r0, [pc, #400]	; (8006d00 <checkDemoModCalisma+0x250>)
 8006b6e:	f001 ff46 	bl	80089fe <HAL_GPIO_WritePin>
 8006b72:	e00b      	b.n	8006b8c <checkDemoModCalisma+0xdc>
				} else {
					HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006b74:	2200      	movs	r2, #0
 8006b76:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006b7a:	4861      	ldr	r0, [pc, #388]	; (8006d00 <checkDemoModCalisma+0x250>)
 8006b7c:	f001 ff3f 	bl	80089fe <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006b80:	2200      	movs	r2, #0
 8006b82:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006b86:	485e      	ldr	r0, [pc, #376]	; (8006d00 <checkDemoModCalisma+0x250>)
 8006b88:	f001 ff39 	bl	80089fe <HAL_GPIO_WritePin>
				}

				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006b8c:	2102      	movs	r1, #2
 8006b8e:	4858      	ldr	r0, [pc, #352]	; (8006cf0 <checkDemoModCalisma+0x240>)
 8006b90:	f001 ff1e 	bl	80089d0 <HAL_GPIO_ReadPin>
 8006b94:	4603      	mov	r3, r0
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d10d      	bne.n	8006bb6 <checkDemoModCalisma+0x106>
						&& (HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006b9a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006b9e:	4854      	ldr	r0, [pc, #336]	; (8006cf0 <checkDemoModCalisma+0x240>)
 8006ba0:	f001 ff16 	bl	80089d0 <HAL_GPIO_ReadPin>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d105      	bne.n	8006bb6 <checkDemoModCalisma+0x106>
						&& (demoYukariCalis==0)
 8006baa:	4b56      	ldr	r3, [pc, #344]	; (8006d04 <checkDemoModCalisma+0x254>)
 8006bac:	781b      	ldrb	r3, [r3, #0]
 8006bae:	f083 0301 	eor.w	r3, r3, #1
 8006bb2:	b2db      	uxtb	r3, r3
 8006bb4:	2b00      	cmp	r3, #0
						&& (demoAsagiCalis==0)) {
					//bos burası
				}

				//DEVİRME YUKARI CALIS
				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006bb6:	2102      	movs	r1, #2
 8006bb8:	484d      	ldr	r0, [pc, #308]	; (8006cf0 <checkDemoModCalisma+0x240>)
 8006bba:	f001 ff09 	bl	80089d0 <HAL_GPIO_ReadPin>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d125      	bne.n	8006c10 <checkDemoModCalisma+0x160>
						&&(HAL_GPIO_ReadPin(devirmeYukariLimitIn_GPIO_Port, devirmeYukariLimitIn_Pin)==0)
 8006bc4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006bc8:	4849      	ldr	r0, [pc, #292]	; (8006cf0 <checkDemoModCalisma+0x240>)
 8006bca:	f001 ff01 	bl	80089d0 <HAL_GPIO_ReadPin>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d11d      	bne.n	8006c10 <checkDemoModCalisma+0x160>
						&&(demoYukariCalis==0)
 8006bd4:	4b4b      	ldr	r3, [pc, #300]	; (8006d04 <checkDemoModCalisma+0x254>)
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	f083 0301 	eor.w	r3, r3, #1
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d016      	beq.n	8006c10 <checkDemoModCalisma+0x160>
						&&(demoAsagiCalis==0)
 8006be2:	4b44      	ldr	r3, [pc, #272]	; (8006cf4 <checkDemoModCalisma+0x244>)
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	f083 0301 	eor.w	r3, r3, #1
 8006bea:	b2db      	uxtb	r3, r3
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d00f      	beq.n	8006c10 <checkDemoModCalisma+0x160>
						&& (demoDevAsagi==0)) {
 8006bf0:	4b42      	ldr	r3, [pc, #264]	; (8006cfc <checkDemoModCalisma+0x24c>)
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	f083 0301 	eor.w	r3, r3, #1
 8006bf8:	b2db      	uxtb	r3, r3
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d008      	beq.n	8006c10 <checkDemoModCalisma+0x160>

					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_SET);
 8006bfe:	2201      	movs	r2, #1
 8006c00:	2120      	movs	r1, #32
 8006c02:	483b      	ldr	r0, [pc, #236]	; (8006cf0 <checkDemoModCalisma+0x240>)
 8006c04:	f001 fefb 	bl	80089fe <HAL_GPIO_WritePin>
					demoDevYukari=1;
 8006c08:	4b3b      	ldr	r3, [pc, #236]	; (8006cf8 <checkDemoModCalisma+0x248>)
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	701a      	strb	r2, [r3, #0]
 8006c0e:	e007      	b.n	8006c20 <checkDemoModCalisma+0x170>
				} else {
					HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006c10:	2200      	movs	r2, #0
 8006c12:	2120      	movs	r1, #32
 8006c14:	4836      	ldr	r0, [pc, #216]	; (8006cf0 <checkDemoModCalisma+0x240>)
 8006c16:	f001 fef2 	bl	80089fe <HAL_GPIO_WritePin>
					demoDevYukari=0;
 8006c1a:	4b37      	ldr	r3, [pc, #220]	; (8006cf8 <checkDemoModCalisma+0x248>)
 8006c1c:	2200      	movs	r2, #0
 8006c1e:	701a      	strb	r2, [r3, #0]
				}

				// DEVIRME ASAGI CALIS

				if((HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1)
 8006c20:	2102      	movs	r1, #2
 8006c22:	4833      	ldr	r0, [pc, #204]	; (8006cf0 <checkDemoModCalisma+0x240>)
 8006c24:	f001 fed4 	bl	80089d0 <HAL_GPIO_ReadPin>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d125      	bne.n	8006c7a <checkDemoModCalisma+0x1ca>
						&&(HAL_GPIO_ReadPin(devirmeAsagiLimitIn_GPIO_Port, devirmeAsagiLimitIn_Pin)==0)
 8006c2e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006c32:	482f      	ldr	r0, [pc, #188]	; (8006cf0 <checkDemoModCalisma+0x240>)
 8006c34:	f001 fecc 	bl	80089d0 <HAL_GPIO_ReadPin>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d11d      	bne.n	8006c7a <checkDemoModCalisma+0x1ca>
						&&(demoYukariCalis==0)
 8006c3e:	4b31      	ldr	r3, [pc, #196]	; (8006d04 <checkDemoModCalisma+0x254>)
 8006c40:	781b      	ldrb	r3, [r3, #0]
 8006c42:	f083 0301 	eor.w	r3, r3, #1
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d016      	beq.n	8006c7a <checkDemoModCalisma+0x1ca>
						&&(demoDevYukari==0)
 8006c4c:	4b2a      	ldr	r3, [pc, #168]	; (8006cf8 <checkDemoModCalisma+0x248>)
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	f083 0301 	eor.w	r3, r3, #1
 8006c54:	b2db      	uxtb	r3, r3
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d00f      	beq.n	8006c7a <checkDemoModCalisma+0x1ca>
						&& (demoAsagiCalis==0)) {
 8006c5a:	4b26      	ldr	r3, [pc, #152]	; (8006cf4 <checkDemoModCalisma+0x244>)
 8006c5c:	781b      	ldrb	r3, [r3, #0]
 8006c5e:	f083 0301 	eor.w	r3, r3, #1
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d008      	beq.n	8006c7a <checkDemoModCalisma+0x1ca>

					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_SET);
 8006c68:	2201      	movs	r2, #1
 8006c6a:	2110      	movs	r1, #16
 8006c6c:	4820      	ldr	r0, [pc, #128]	; (8006cf0 <checkDemoModCalisma+0x240>)
 8006c6e:	f001 fec6 	bl	80089fe <HAL_GPIO_WritePin>
					demoDevAsagi=1;
 8006c72:	4b22      	ldr	r3, [pc, #136]	; (8006cfc <checkDemoModCalisma+0x24c>)
 8006c74:	2201      	movs	r2, #1
 8006c76:	701a      	strb	r2, [r3, #0]
 8006c78:	e007      	b.n	8006c8a <checkDemoModCalisma+0x1da>
				} else {
					HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	2110      	movs	r1, #16
 8006c7e:	481c      	ldr	r0, [pc, #112]	; (8006cf0 <checkDemoModCalisma+0x240>)
 8006c80:	f001 febd 	bl	80089fe <HAL_GPIO_WritePin>
					demoDevAsagi=0;
 8006c84:	4b1d      	ldr	r3, [pc, #116]	; (8006cfc <checkDemoModCalisma+0x24c>)
 8006c86:	2200      	movs	r2, #0
 8006c88:	701a      	strb	r2, [r3, #0]
				}

				// DEMO ASAGI CALISMA

				if((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==0)
 8006c8a:	2104      	movs	r1, #4
 8006c8c:	4818      	ldr	r0, [pc, #96]	; (8006cf0 <checkDemoModCalisma+0x240>)
 8006c8e:	f001 fe9f 	bl	80089d0 <HAL_GPIO_ReadPin>
 8006c92:	4603      	mov	r3, r0
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d139      	bne.n	8006d0c <checkDemoModCalisma+0x25c>
						&& (demoYukariCalis==0)
 8006c98:	4b1a      	ldr	r3, [pc, #104]	; (8006d04 <checkDemoModCalisma+0x254>)
 8006c9a:	781b      	ldrb	r3, [r3, #0]
 8006c9c:	f083 0301 	eor.w	r3, r3, #1
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d032      	beq.n	8006d0c <checkDemoModCalisma+0x25c>
						&& (demoDevAsagi==0)
 8006ca6:	4b15      	ldr	r3, [pc, #84]	; (8006cfc <checkDemoModCalisma+0x24c>)
 8006ca8:	781b      	ldrb	r3, [r3, #0]
 8006caa:	f083 0301 	eor.w	r3, r3, #1
 8006cae:	b2db      	uxtb	r3, r3
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d02b      	beq.n	8006d0c <checkDemoModCalisma+0x25c>
						&& (demoDevYukari==0)) {
 8006cb4:	4b10      	ldr	r3, [pc, #64]	; (8006cf8 <checkDemoModCalisma+0x248>)
 8006cb6:	781b      	ldrb	r3, [r3, #0]
 8006cb8:	f083 0301 	eor.w	r3, r3, #1
 8006cbc:	b2db      	uxtb	r3, r3
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d024      	beq.n	8006d0c <checkDemoModCalisma+0x25c>

					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_SET);
 8006cc2:	2201      	movs	r2, #1
 8006cc4:	2102      	movs	r1, #2
 8006cc6:	480e      	ldr	r0, [pc, #56]	; (8006d00 <checkDemoModCalisma+0x250>)
 8006cc8:	f001 fe99 	bl	80089fe <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_SET);
 8006ccc:	2201      	movs	r2, #1
 8006cce:	2101      	movs	r1, #1
 8006cd0:	480b      	ldr	r0, [pc, #44]	; (8006d00 <checkDemoModCalisma+0x250>)
 8006cd2:	f001 fe94 	bl	80089fe <HAL_GPIO_WritePin>
					demoAsagiCalis=1;
 8006cd6:	4b07      	ldr	r3, [pc, #28]	; (8006cf4 <checkDemoModCalisma+0x244>)
 8006cd8:	2201      	movs	r2, #1
 8006cda:	701a      	strb	r2, [r3, #0]
					demoCalismaSayisiYar=1;
 8006cdc:	4b0a      	ldr	r3, [pc, #40]	; (8006d08 <checkDemoModCalisma+0x258>)
 8006cde:	2201      	movs	r2, #1
 8006ce0:	701a      	strb	r2, [r3, #0]
 8006ce2:	e027      	b.n	8006d34 <checkDemoModCalisma+0x284>
 8006ce4:	20000b2e 	.word	0x20000b2e
 8006ce8:	20000b61 	.word	0x20000b61
 8006cec:	20000b2d 	.word	0x20000b2d
 8006cf0:	40011000 	.word	0x40011000
 8006cf4:	20000b68 	.word	0x20000b68
 8006cf8:	20000b69 	.word	0x20000b69
 8006cfc:	20000b6a 	.word	0x20000b6a
 8006d00:	40010c00 	.word	0x40010c00
 8006d04:	20000b67 	.word	0x20000b67
 8006d08:	20000b4d 	.word	0x20000b4d
				} else if ((HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1)) {
 8006d0c:	2104      	movs	r1, #4
 8006d0e:	48a0      	ldr	r0, [pc, #640]	; (8006f90 <checkDemoModCalisma+0x4e0>)
 8006d10:	f001 fe5e 	bl	80089d0 <HAL_GPIO_ReadPin>
 8006d14:	4603      	mov	r3, r0
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d10c      	bne.n	8006d34 <checkDemoModCalisma+0x284>
					HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	2102      	movs	r1, #2
 8006d1e:	489d      	ldr	r0, [pc, #628]	; (8006f94 <checkDemoModCalisma+0x4e4>)
 8006d20:	f001 fe6d 	bl	80089fe <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006d24:	2200      	movs	r2, #0
 8006d26:	2101      	movs	r1, #1
 8006d28:	489a      	ldr	r0, [pc, #616]	; (8006f94 <checkDemoModCalisma+0x4e4>)
 8006d2a:	f001 fe68 	bl	80089fe <HAL_GPIO_WritePin>
					demoAsagiCalis=0;
 8006d2e:	4b9a      	ldr	r3, [pc, #616]	; (8006f98 <checkDemoModCalisma+0x4e8>)
 8006d30:	2200      	movs	r2, #0
 8006d32:	701a      	strb	r2, [r3, #0]
				}

				if(HAL_GPIO_ReadPin(altLimitIn_GPIO_Port, altLimitIn_Pin)==1) {
 8006d34:	2104      	movs	r1, #4
 8006d36:	4896      	ldr	r0, [pc, #600]	; (8006f90 <checkDemoModCalisma+0x4e0>)
 8006d38:	f001 fe4a 	bl	80089d0 <HAL_GPIO_ReadPin>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	2b01      	cmp	r3, #1
 8006d40:	d10d      	bne.n	8006d5e <checkDemoModCalisma+0x2ae>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_SET);
 8006d42:	2201      	movs	r2, #1
 8006d44:	2180      	movs	r1, #128	; 0x80
 8006d46:	4895      	ldr	r0, [pc, #596]	; (8006f9c <checkDemoModCalisma+0x4ec>)
 8006d48:	f001 fe59 	bl	80089fe <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_SET);
 8006d4c:	2201      	movs	r2, #1
 8006d4e:	2120      	movs	r1, #32
 8006d50:	4892      	ldr	r0, [pc, #584]	; (8006f9c <checkDemoModCalisma+0x4ec>)
 8006d52:	f001 fe54 	bl	80089fe <HAL_GPIO_WritePin>
					timer3 = millis;
 8006d56:	4b92      	ldr	r3, [pc, #584]	; (8006fa0 <checkDemoModCalisma+0x4f0>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	4a92      	ldr	r2, [pc, #584]	; (8006fa4 <checkDemoModCalisma+0x4f4>)
 8006d5c:	6013      	str	r3, [r2, #0]
				}

				if(millis-timer3 >= 5) {
 8006d5e:	4b90      	ldr	r3, [pc, #576]	; (8006fa0 <checkDemoModCalisma+0x4f0>)
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	4b90      	ldr	r3, [pc, #576]	; (8006fa4 <checkDemoModCalisma+0x4f4>)
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	1ad3      	subs	r3, r2, r3
 8006d68:	2b04      	cmp	r3, #4
 8006d6a:	d909      	bls.n	8006d80 <checkDemoModCalisma+0x2d0>
					HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	2180      	movs	r1, #128	; 0x80
 8006d70:	488a      	ldr	r0, [pc, #552]	; (8006f9c <checkDemoModCalisma+0x4ec>)
 8006d72:	f001 fe44 	bl	80089fe <HAL_GPIO_WritePin>
					HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006d76:	2200      	movs	r2, #0
 8006d78:	2120      	movs	r1, #32
 8006d7a:	4888      	ldr	r0, [pc, #544]	; (8006f9c <checkDemoModCalisma+0x4ec>)
 8006d7c:	f001 fe3f 	bl	80089fe <HAL_GPIO_WritePin>
				}

				if(HAL_GPIO_ReadPin(ustLimitIn_GPIO_Port, ustLimitIn_Pin)==1) {
 8006d80:	2102      	movs	r1, #2
 8006d82:	4883      	ldr	r0, [pc, #524]	; (8006f90 <checkDemoModCalisma+0x4e0>)
 8006d84:	f001 fe24 	bl	80089d0 <HAL_GPIO_ReadPin>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	d108      	bne.n	8006da0 <checkDemoModCalisma+0x2f0>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_SET);
 8006d8e:	2201      	movs	r2, #1
 8006d90:	2140      	movs	r1, #64	; 0x40
 8006d92:	4882      	ldr	r0, [pc, #520]	; (8006f9c <checkDemoModCalisma+0x4ec>)
 8006d94:	f001 fe33 	bl	80089fe <HAL_GPIO_WritePin>
					timer3 = millis;
 8006d98:	4b81      	ldr	r3, [pc, #516]	; (8006fa0 <checkDemoModCalisma+0x4f0>)
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a81      	ldr	r2, [pc, #516]	; (8006fa4 <checkDemoModCalisma+0x4f4>)
 8006d9e:	6013      	str	r3, [r2, #0]
				}

				if(millis-timer3 >= 5) {
 8006da0:	4b7f      	ldr	r3, [pc, #508]	; (8006fa0 <checkDemoModCalisma+0x4f0>)
 8006da2:	681a      	ldr	r2, [r3, #0]
 8006da4:	4b7f      	ldr	r3, [pc, #508]	; (8006fa4 <checkDemoModCalisma+0x4f4>)
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	1ad3      	subs	r3, r2, r3
 8006daa:	2b04      	cmp	r3, #4
 8006dac:	d904      	bls.n	8006db8 <checkDemoModCalisma+0x308>
					HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006dae:	2200      	movs	r2, #0
 8006db0:	2140      	movs	r1, #64	; 0x40
 8006db2:	487a      	ldr	r0, [pc, #488]	; (8006f9c <checkDemoModCalisma+0x4ec>)
 8006db4:	f001 fe23 	bl	80089fe <HAL_GPIO_WritePin>
				}

				if((demoYukariCalis==1) && (demoCalismaSayisiYar==1)) {
 8006db8:	4b7b      	ldr	r3, [pc, #492]	; (8006fa8 <checkDemoModCalisma+0x4f8>)
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d058      	beq.n	8006e72 <checkDemoModCalisma+0x3c2>
 8006dc0:	4b7a      	ldr	r3, [pc, #488]	; (8006fac <checkDemoModCalisma+0x4fc>)
 8006dc2:	781b      	ldrb	r3, [r3, #0]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d054      	beq.n	8006e72 <checkDemoModCalisma+0x3c2>
					//mesajYazildi=0;
					calismaSayisi1=calismaSayisi1+1;
 8006dc8:	4b79      	ldr	r3, [pc, #484]	; (8006fb0 <checkDemoModCalisma+0x500>)
 8006dca:	781b      	ldrb	r3, [r3, #0]
 8006dcc:	3301      	adds	r3, #1
 8006dce:	b2da      	uxtb	r2, r3
 8006dd0:	4b77      	ldr	r3, [pc, #476]	; (8006fb0 <checkDemoModCalisma+0x500>)
 8006dd2:	701a      	strb	r2, [r3, #0]

					if(calismaSayisi1>9) {
 8006dd4:	4b76      	ldr	r3, [pc, #472]	; (8006fb0 <checkDemoModCalisma+0x500>)
 8006dd6:	781b      	ldrb	r3, [r3, #0]
 8006dd8:	2b09      	cmp	r3, #9
 8006dda:	d908      	bls.n	8006dee <checkDemoModCalisma+0x33e>
						calismaSayisi1=0;
 8006ddc:	4b74      	ldr	r3, [pc, #464]	; (8006fb0 <checkDemoModCalisma+0x500>)
 8006dde:	2200      	movs	r2, #0
 8006de0:	701a      	strb	r2, [r3, #0]
						calismaSayisi10=calismaSayisi10+1;
 8006de2:	4b74      	ldr	r3, [pc, #464]	; (8006fb4 <checkDemoModCalisma+0x504>)
 8006de4:	781b      	ldrb	r3, [r3, #0]
 8006de6:	3301      	adds	r3, #1
 8006de8:	b2da      	uxtb	r2, r3
 8006dea:	4b72      	ldr	r3, [pc, #456]	; (8006fb4 <checkDemoModCalisma+0x504>)
 8006dec:	701a      	strb	r2, [r3, #0]
					}

					if(calismaSayisi10>9) {
 8006dee:	4b71      	ldr	r3, [pc, #452]	; (8006fb4 <checkDemoModCalisma+0x504>)
 8006df0:	781b      	ldrb	r3, [r3, #0]
 8006df2:	2b09      	cmp	r3, #9
 8006df4:	d908      	bls.n	8006e08 <checkDemoModCalisma+0x358>
						calismaSayisi10=0;
 8006df6:	4b6f      	ldr	r3, [pc, #444]	; (8006fb4 <checkDemoModCalisma+0x504>)
 8006df8:	2200      	movs	r2, #0
 8006dfa:	701a      	strb	r2, [r3, #0]
						calismaSayisi100=calismaSayisi100+1;
 8006dfc:	4b6e      	ldr	r3, [pc, #440]	; (8006fb8 <checkDemoModCalisma+0x508>)
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	3301      	adds	r3, #1
 8006e02:	b2da      	uxtb	r2, r3
 8006e04:	4b6c      	ldr	r3, [pc, #432]	; (8006fb8 <checkDemoModCalisma+0x508>)
 8006e06:	701a      	strb	r2, [r3, #0]
					}

					if(calismaSayisi100>9) {
 8006e08:	4b6b      	ldr	r3, [pc, #428]	; (8006fb8 <checkDemoModCalisma+0x508>)
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	2b09      	cmp	r3, #9
 8006e0e:	d908      	bls.n	8006e22 <checkDemoModCalisma+0x372>
						calismaSayisi100=0;
 8006e10:	4b69      	ldr	r3, [pc, #420]	; (8006fb8 <checkDemoModCalisma+0x508>)
 8006e12:	2200      	movs	r2, #0
 8006e14:	701a      	strb	r2, [r3, #0]
						calismaSayisi1000=calismaSayisi1000+1;
 8006e16:	4b69      	ldr	r3, [pc, #420]	; (8006fbc <checkDemoModCalisma+0x50c>)
 8006e18:	781b      	ldrb	r3, [r3, #0]
 8006e1a:	3301      	adds	r3, #1
 8006e1c:	b2da      	uxtb	r2, r3
 8006e1e:	4b67      	ldr	r3, [pc, #412]	; (8006fbc <checkDemoModCalisma+0x50c>)
 8006e20:	701a      	strb	r2, [r3, #0]
					}

					if(calismaSayisi1000>9) {
 8006e22:	4b66      	ldr	r3, [pc, #408]	; (8006fbc <checkDemoModCalisma+0x50c>)
 8006e24:	781b      	ldrb	r3, [r3, #0]
 8006e26:	2b09      	cmp	r3, #9
 8006e28:	d908      	bls.n	8006e3c <checkDemoModCalisma+0x38c>
						calismaSayisi1000=0;
 8006e2a:	4b64      	ldr	r3, [pc, #400]	; (8006fbc <checkDemoModCalisma+0x50c>)
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	701a      	strb	r2, [r3, #0]
						calismaSayisi10000=calismaSayisi10000+1;
 8006e30:	4b63      	ldr	r3, [pc, #396]	; (8006fc0 <checkDemoModCalisma+0x510>)
 8006e32:	781b      	ldrb	r3, [r3, #0]
 8006e34:	3301      	adds	r3, #1
 8006e36:	b2da      	uxtb	r2, r3
 8006e38:	4b61      	ldr	r3, [pc, #388]	; (8006fc0 <checkDemoModCalisma+0x510>)
 8006e3a:	701a      	strb	r2, [r3, #0]
					}
					eepromData[32]=calismaSayisi10000;
 8006e3c:	4b60      	ldr	r3, [pc, #384]	; (8006fc0 <checkDemoModCalisma+0x510>)
 8006e3e:	781a      	ldrb	r2, [r3, #0]
 8006e40:	4b60      	ldr	r3, [pc, #384]	; (8006fc4 <checkDemoModCalisma+0x514>)
 8006e42:	f883 2020 	strb.w	r2, [r3, #32]
					eepromData[31]=calismaSayisi1000;
 8006e46:	4b5d      	ldr	r3, [pc, #372]	; (8006fbc <checkDemoModCalisma+0x50c>)
 8006e48:	781a      	ldrb	r2, [r3, #0]
 8006e4a:	4b5e      	ldr	r3, [pc, #376]	; (8006fc4 <checkDemoModCalisma+0x514>)
 8006e4c:	77da      	strb	r2, [r3, #31]
					eepromData[30]=calismaSayisi100;
 8006e4e:	4b5a      	ldr	r3, [pc, #360]	; (8006fb8 <checkDemoModCalisma+0x508>)
 8006e50:	781a      	ldrb	r2, [r3, #0]
 8006e52:	4b5c      	ldr	r3, [pc, #368]	; (8006fc4 <checkDemoModCalisma+0x514>)
 8006e54:	779a      	strb	r2, [r3, #30]
					eepromData[29]=calismaSayisi10;
 8006e56:	4b57      	ldr	r3, [pc, #348]	; (8006fb4 <checkDemoModCalisma+0x504>)
 8006e58:	781a      	ldrb	r2, [r3, #0]
 8006e5a:	4b5a      	ldr	r3, [pc, #360]	; (8006fc4 <checkDemoModCalisma+0x514>)
 8006e5c:	775a      	strb	r2, [r3, #29]
					eepromData[28]=calismaSayisi1;
 8006e5e:	4b54      	ldr	r3, [pc, #336]	; (8006fb0 <checkDemoModCalisma+0x500>)
 8006e60:	781a      	ldrb	r2, [r3, #0]
 8006e62:	4b58      	ldr	r3, [pc, #352]	; (8006fc4 <checkDemoModCalisma+0x514>)
 8006e64:	771a      	strb	r2, [r3, #28]
					hafizaYaz=1;
 8006e66:	4b58      	ldr	r3, [pc, #352]	; (8006fc8 <checkDemoModCalisma+0x518>)
 8006e68:	2201      	movs	r2, #1
 8006e6a:	701a      	strb	r2, [r3, #0]
			   		//mesajYazildi=0;
					demoCalismaSayisiYar=0;
 8006e6c:	4b4f      	ldr	r3, [pc, #316]	; (8006fac <checkDemoModCalisma+0x4fc>)
 8006e6e:	2200      	movs	r2, #0
 8006e70:	701a      	strb	r2, [r3, #0]
				}

				if (menuGiris==0) {
 8006e72:	4b56      	ldr	r3, [pc, #344]	; (8006fcc <checkDemoModCalisma+0x51c>)
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	f040 8087 	bne.w	8006f8a <checkDemoModCalisma+0x4da>
					lcd_print(2,1,"Cycle      ");
 8006e7c:	4a54      	ldr	r2, [pc, #336]	; (8006fd0 <checkDemoModCalisma+0x520>)
 8006e7e:	2101      	movs	r1, #1
 8006e80:	2002      	movs	r0, #2
 8006e82:	f7f9 fcc0 	bl	8000806 <lcd_print>
					lcd_print(1,1, "    DEMO MODE   ");
 8006e86:	4a53      	ldr	r2, [pc, #332]	; (8006fd4 <checkDemoModCalisma+0x524>)
 8006e88:	2101      	movs	r1, #1
 8006e8a:	2001      	movs	r0, #1
 8006e8c:	f7f9 fcbb 	bl	8000806 <lcd_print>
					itoa(calismaSayisi10000, snum, 10);
 8006e90:	4b4b      	ldr	r3, [pc, #300]	; (8006fc0 <checkDemoModCalisma+0x510>)
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	220a      	movs	r2, #10
 8006e96:	4950      	ldr	r1, [pc, #320]	; (8006fd8 <checkDemoModCalisma+0x528>)
 8006e98:	4618      	mov	r0, r3
 8006e9a:	f004 fd8f 	bl	800b9bc <itoa>
					lcd_print(2,12,snum);
 8006e9e:	4a4e      	ldr	r2, [pc, #312]	; (8006fd8 <checkDemoModCalisma+0x528>)
 8006ea0:	210c      	movs	r1, #12
 8006ea2:	2002      	movs	r0, #2
 8006ea4:	f7f9 fcaf 	bl	8000806 <lcd_print>
					itoa(calismaSayisi1000, snum, 10);
 8006ea8:	4b44      	ldr	r3, [pc, #272]	; (8006fbc <checkDemoModCalisma+0x50c>)
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	220a      	movs	r2, #10
 8006eae:	494a      	ldr	r1, [pc, #296]	; (8006fd8 <checkDemoModCalisma+0x528>)
 8006eb0:	4618      	mov	r0, r3
 8006eb2:	f004 fd83 	bl	800b9bc <itoa>
					lcd_print(2,13,snum);
 8006eb6:	4a48      	ldr	r2, [pc, #288]	; (8006fd8 <checkDemoModCalisma+0x528>)
 8006eb8:	210d      	movs	r1, #13
 8006eba:	2002      	movs	r0, #2
 8006ebc:	f7f9 fca3 	bl	8000806 <lcd_print>
					itoa(calismaSayisi100, snum, 10);
 8006ec0:	4b3d      	ldr	r3, [pc, #244]	; (8006fb8 <checkDemoModCalisma+0x508>)
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	220a      	movs	r2, #10
 8006ec6:	4944      	ldr	r1, [pc, #272]	; (8006fd8 <checkDemoModCalisma+0x528>)
 8006ec8:	4618      	mov	r0, r3
 8006eca:	f004 fd77 	bl	800b9bc <itoa>
					lcd_print(2,14,snum);
 8006ece:	4a42      	ldr	r2, [pc, #264]	; (8006fd8 <checkDemoModCalisma+0x528>)
 8006ed0:	210e      	movs	r1, #14
 8006ed2:	2002      	movs	r0, #2
 8006ed4:	f7f9 fc97 	bl	8000806 <lcd_print>
					itoa(calismaSayisi10, snum, 10);
 8006ed8:	4b36      	ldr	r3, [pc, #216]	; (8006fb4 <checkDemoModCalisma+0x504>)
 8006eda:	781b      	ldrb	r3, [r3, #0]
 8006edc:	220a      	movs	r2, #10
 8006ede:	493e      	ldr	r1, [pc, #248]	; (8006fd8 <checkDemoModCalisma+0x528>)
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	f004 fd6b 	bl	800b9bc <itoa>
					lcd_print(2,15,snum);
 8006ee6:	4a3c      	ldr	r2, [pc, #240]	; (8006fd8 <checkDemoModCalisma+0x528>)
 8006ee8:	210f      	movs	r1, #15
 8006eea:	2002      	movs	r0, #2
 8006eec:	f7f9 fc8b 	bl	8000806 <lcd_print>
					itoa(calismaSayisi1, snum, 10);
 8006ef0:	4b2f      	ldr	r3, [pc, #188]	; (8006fb0 <checkDemoModCalisma+0x500>)
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	220a      	movs	r2, #10
 8006ef6:	4938      	ldr	r1, [pc, #224]	; (8006fd8 <checkDemoModCalisma+0x528>)
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f004 fd5f 	bl	800b9bc <itoa>
					lcd_print(2,16,snum);
 8006efe:	4a36      	ldr	r2, [pc, #216]	; (8006fd8 <checkDemoModCalisma+0x528>)
 8006f00:	2110      	movs	r1, #16
 8006f02:	2002      	movs	r0, #2
 8006f04:	f7f9 fc7f 	bl	8000806 <lcd_print>
					mesajYazildi=1;
 8006f08:	4b34      	ldr	r3, [pc, #208]	; (8006fdc <checkDemoModCalisma+0x52c>)
 8006f0a:	2201      	movs	r2, #1
 8006f0c:	701a      	strb	r2, [r3, #0]
				if (menuGiris==0) {
 8006f0e:	e03c      	b.n	8006f8a <checkDemoModCalisma+0x4da>
				}
			} else if(demoMode==1 || menuGiris==1) {
 8006f10:	4b33      	ldr	r3, [pc, #204]	; (8006fe0 <checkDemoModCalisma+0x530>)
 8006f12:	781b      	ldrb	r3, [r3, #0]
 8006f14:	2b01      	cmp	r3, #1
 8006f16:	d003      	beq.n	8006f20 <checkDemoModCalisma+0x470>
 8006f18:	4b2c      	ldr	r3, [pc, #176]	; (8006fcc <checkDemoModCalisma+0x51c>)
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d134      	bne.n	8006f8a <checkDemoModCalisma+0x4da>
				HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 8006f20:	2200      	movs	r2, #0
 8006f22:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8006f26:	481b      	ldr	r0, [pc, #108]	; (8006f94 <checkDemoModCalisma+0x4e4>)
 8006f28:	f001 fd69 	bl	80089fe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8006f2c:	2200      	movs	r2, #0
 8006f2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006f32:	4818      	ldr	r0, [pc, #96]	; (8006f94 <checkDemoModCalisma+0x4e4>)
 8006f34:	f001 fd63 	bl	80089fe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 8006f38:	2200      	movs	r2, #0
 8006f3a:	2104      	movs	r1, #4
 8006f3c:	4815      	ldr	r0, [pc, #84]	; (8006f94 <checkDemoModCalisma+0x4e4>)
 8006f3e:	f001 fd5e 	bl	80089fe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8006f42:	2200      	movs	r2, #0
 8006f44:	2102      	movs	r1, #2
 8006f46:	4813      	ldr	r0, [pc, #76]	; (8006f94 <checkDemoModCalisma+0x4e4>)
 8006f48:	f001 fd59 	bl	80089fe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	2101      	movs	r1, #1
 8006f50:	4810      	ldr	r0, [pc, #64]	; (8006f94 <checkDemoModCalisma+0x4e4>)
 8006f52:	f001 fd54 	bl	80089fe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 8006f56:	2200      	movs	r2, #0
 8006f58:	2120      	movs	r1, #32
 8006f5a:	480d      	ldr	r0, [pc, #52]	; (8006f90 <checkDemoModCalisma+0x4e0>)
 8006f5c:	f001 fd4f 	bl	80089fe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8006f60:	2200      	movs	r2, #0
 8006f62:	2110      	movs	r1, #16
 8006f64:	480a      	ldr	r0, [pc, #40]	; (8006f90 <checkDemoModCalisma+0x4e0>)
 8006f66:	f001 fd4a 	bl	80089fe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	2180      	movs	r1, #128	; 0x80
 8006f6e:	480b      	ldr	r0, [pc, #44]	; (8006f9c <checkDemoModCalisma+0x4ec>)
 8006f70:	f001 fd45 	bl	80089fe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 8006f74:	2200      	movs	r2, #0
 8006f76:	2140      	movs	r1, #64	; 0x40
 8006f78:	4808      	ldr	r0, [pc, #32]	; (8006f9c <checkDemoModCalisma+0x4ec>)
 8006f7a:	f001 fd40 	bl	80089fe <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8006f7e:	2200      	movs	r2, #0
 8006f80:	2120      	movs	r1, #32
 8006f82:	4806      	ldr	r0, [pc, #24]	; (8006f9c <checkDemoModCalisma+0x4ec>)
 8006f84:	f001 fd3b 	bl	80089fe <HAL_GPIO_WritePin>
				//HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
			}
}
 8006f88:	e7ff      	b.n	8006f8a <checkDemoModCalisma+0x4da>
 8006f8a:	bf00      	nop
 8006f8c:	bd80      	pop	{r7, pc}
 8006f8e:	bf00      	nop
 8006f90:	40011000 	.word	0x40011000
 8006f94:	40010c00 	.word	0x40010c00
 8006f98:	20000b68 	.word	0x20000b68
 8006f9c:	40010800 	.word	0x40010800
 8006fa0:	20000aec 	.word	0x20000aec
 8006fa4:	20000afc 	.word	0x20000afc
 8006fa8:	20000b67 	.word	0x20000b67
 8006fac:	20000b4d 	.word	0x20000b4d
 8006fb0:	20000b0d 	.word	0x20000b0d
 8006fb4:	20000b0e 	.word	0x20000b0e
 8006fb8:	20000941 	.word	0x20000941
 8006fbc:	20000942 	.word	0x20000942
 8006fc0:	20000b0f 	.word	0x20000b0f
 8006fc4:	20000aa4 	.word	0x20000aa4
 8006fc8:	20000b3b 	.word	0x20000b3b
 8006fcc:	20000b2d 	.word	0x20000b2d
 8006fd0:	0800cef0 	.word	0x0800cef0
 8006fd4:	0800cefc 	.word	0x0800cefc
 8006fd8:	20000ae4 	.word	0x20000ae4
 8006fdc:	20000b43 	.word	0x20000b43
 8006fe0:	20000b2e 	.word	0x20000b2e

08006fe4 <mainLoop>:
	char* result = malloc(strlen(combinedString) + 1);
	strcpy(result, combinedString);
	return result;
}

void mainLoop() {
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	b084      	sub	sp, #16
 8006fe8:	af04      	add	r7, sp, #16
	while(1) {
		checkLCDBacklight();
 8006fea:	f7fe f92b 	bl	8005244 <checkLCDBacklight>


		if((HAL_GPIO_ReadPin(butonIleriIn_GPIO_Port,butonIleriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonGeriIn_GPIO_Port,butonGeriIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==0)&&(HAL_GPIO_ReadPin(butonEnterIn_GPIO_Port,butonEnterIn_Pin)==0)&&(HAL_GPIO_ReadPin(kapi1AcButonIn_GPIO_Port, kapi1AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapi2AcButonIn_GPIO_Port, kapi2AcButonIn_Pin)==1)&&(HAL_GPIO_ReadPin(kapiTablaAcButonIn_GPIO_Port, kapiTablaAcButonIn_Pin)==1)) {
 8006fee:	2101      	movs	r1, #1
 8006ff0:	48aa      	ldr	r0, [pc, #680]	; (800729c <mainLoop+0x2b8>)
 8006ff2:	f001 fced 	bl	80089d0 <HAL_GPIO_ReadPin>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d136      	bne.n	800706a <mainLoop+0x86>
 8006ffc:	2108      	movs	r1, #8
 8006ffe:	48a8      	ldr	r0, [pc, #672]	; (80072a0 <mainLoop+0x2bc>)
 8007000:	f001 fce6 	bl	80089d0 <HAL_GPIO_ReadPin>
 8007004:	4603      	mov	r3, r0
 8007006:	2b00      	cmp	r3, #0
 8007008:	d12f      	bne.n	800706a <mainLoop+0x86>
 800700a:	2102      	movs	r1, #2
 800700c:	48a3      	ldr	r0, [pc, #652]	; (800729c <mainLoop+0x2b8>)
 800700e:	f001 fcdf 	bl	80089d0 <HAL_GPIO_ReadPin>
 8007012:	4603      	mov	r3, r0
 8007014:	2b00      	cmp	r3, #0
 8007016:	d128      	bne.n	800706a <mainLoop+0x86>
 8007018:	2104      	movs	r1, #4
 800701a:	48a0      	ldr	r0, [pc, #640]	; (800729c <mainLoop+0x2b8>)
 800701c:	f001 fcd8 	bl	80089d0 <HAL_GPIO_ReadPin>
 8007020:	4603      	mov	r3, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	d121      	bne.n	800706a <mainLoop+0x86>
 8007026:	2108      	movs	r1, #8
 8007028:	489c      	ldr	r0, [pc, #624]	; (800729c <mainLoop+0x2b8>)
 800702a:	f001 fcd1 	bl	80089d0 <HAL_GPIO_ReadPin>
 800702e:	4603      	mov	r3, r0
 8007030:	2b00      	cmp	r3, #0
 8007032:	d11a      	bne.n	800706a <mainLoop+0x86>
 8007034:	2180      	movs	r1, #128	; 0x80
 8007036:	489a      	ldr	r0, [pc, #616]	; (80072a0 <mainLoop+0x2bc>)
 8007038:	f001 fcca 	bl	80089d0 <HAL_GPIO_ReadPin>
 800703c:	4603      	mov	r3, r0
 800703e:	2b01      	cmp	r3, #1
 8007040:	d113      	bne.n	800706a <mainLoop+0x86>
 8007042:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007046:	4896      	ldr	r0, [pc, #600]	; (80072a0 <mainLoop+0x2bc>)
 8007048:	f001 fcc2 	bl	80089d0 <HAL_GPIO_ReadPin>
 800704c:	4603      	mov	r3, r0
 800704e:	2b01      	cmp	r3, #1
 8007050:	d10b      	bne.n	800706a <mainLoop+0x86>
 8007052:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007056:	4892      	ldr	r0, [pc, #584]	; (80072a0 <mainLoop+0x2bc>)
 8007058:	f001 fcba 	bl	80089d0 <HAL_GPIO_ReadPin>
 800705c:	4603      	mov	r3, r0
 800705e:	2b01      	cmp	r3, #1
 8007060:	d103      	bne.n	800706a <mainLoop+0x86>
			butonKontrol=0;
 8007062:	4b90      	ldr	r3, [pc, #576]	; (80072a4 <mainLoop+0x2c0>)
 8007064:	2200      	movs	r2, #0
 8007066:	701a      	strb	r2, [r3, #0]
 8007068:	e003      	b.n	8007072 <mainLoop+0x8e>
		} else {
			backLightTimer = millis;
 800706a:	4b8f      	ldr	r3, [pc, #572]	; (80072a8 <mainLoop+0x2c4>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4a8f      	ldr	r2, [pc, #572]	; (80072ac <mainLoop+0x2c8>)
 8007070:	6013      	str	r3, [r2, #0]
		}

		if(hafizaYaz==1) {
 8007072:	4b8f      	ldr	r3, [pc, #572]	; (80072b0 <mainLoop+0x2cc>)
 8007074:	781b      	ldrb	r3, [r3, #0]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d039      	beq.n	80070ee <mainLoop+0x10a>
		  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800707a:	bf00      	nop
 800707c:	488d      	ldr	r0, [pc, #564]	; (80072b4 <mainLoop+0x2d0>)
 800707e:	f002 fad0 	bl	8009622 <HAL_I2C_GetError>
 8007082:	4603      	mov	r3, r0
 8007084:	2b04      	cmp	r3, #4
 8007086:	d0f9      	beq.n	800707c <mainLoop+0x98>
		  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 8007088:	bf00      	nop
 800708a:	488a      	ldr	r0, [pc, #552]	; (80072b4 <mainLoop+0x2d0>)
 800708c:	f002 fabc 	bl	8009608 <HAL_I2C_GetState>
 8007090:	4603      	mov	r3, r0
 8007092:	2b20      	cmp	r3, #32
 8007094:	d1f9      	bne.n	800708a <mainLoop+0xa6>

		  HAL_I2C_Mem_Write(&hi2c1,0xA0,0,63,eepromData,63,3000);
 8007096:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800709a:	9302      	str	r3, [sp, #8]
 800709c:	233f      	movs	r3, #63	; 0x3f
 800709e:	9301      	str	r3, [sp, #4]
 80070a0:	4b85      	ldr	r3, [pc, #532]	; (80072b8 <mainLoop+0x2d4>)
 80070a2:	9300      	str	r3, [sp, #0]
 80070a4:	233f      	movs	r3, #63	; 0x3f
 80070a6:	2200      	movs	r2, #0
 80070a8:	21a0      	movs	r1, #160	; 0xa0
 80070aa:	4882      	ldr	r0, [pc, #520]	; (80072b4 <mainLoop+0x2d0>)
 80070ac:	f001 ff4a 	bl	8008f44 <HAL_I2C_Mem_Write>
		  HAL_Delay(5);
 80070b0:	2005      	movs	r0, #5
 80070b2:	f000 febd 	bl	8007e30 <HAL_Delay>

		  hafizaYaz=0;
 80070b6:	4b7e      	ldr	r3, [pc, #504]	; (80072b0 <mainLoop+0x2cc>)
 80070b8:	2200      	movs	r2, #0
 80070ba:	701a      	strb	r2, [r3, #0]
		  if(dilSecim==0) {
 80070bc:	4b7f      	ldr	r3, [pc, #508]	; (80072bc <mainLoop+0x2d8>)
 80070be:	781b      	ldrb	r3, [r3, #0]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d105      	bne.n	80070d0 <mainLoop+0xec>
			  lcd_print(2,1,"Data yazildi    ");
 80070c4:	4a7e      	ldr	r2, [pc, #504]	; (80072c0 <mainLoop+0x2dc>)
 80070c6:	2101      	movs	r1, #1
 80070c8:	2002      	movs	r0, #2
 80070ca:	f7f9 fb9c 	bl	8000806 <lcd_print>
 80070ce:	e008      	b.n	80070e2 <mainLoop+0xfe>
		  } else if(dilSecim==1) {
 80070d0:	4b7a      	ldr	r3, [pc, #488]	; (80072bc <mainLoop+0x2d8>)
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d104      	bne.n	80070e2 <mainLoop+0xfe>
			  lcd_print(2,1,"Data Wrote      ");
 80070d8:	4a7a      	ldr	r2, [pc, #488]	; (80072c4 <mainLoop+0x2e0>)
 80070da:	2101      	movs	r1, #1
 80070dc:	2002      	movs	r0, #2
 80070de:	f7f9 fb92 	bl	8000806 <lcd_print>
		  }

		  HAL_Delay(1000);
 80070e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80070e6:	f000 fea3 	bl	8007e30 <HAL_Delay>
		  lcd_clear();
 80070ea:	f7f9 fba1 	bl	8000830 <lcd_clear>
		}

		if((hafizaOku==0)&&(HAL_I2C_GetState(&hi2c1) == HAL_I2C_STATE_READY)) {
 80070ee:	4b76      	ldr	r3, [pc, #472]	; (80072c8 <mainLoop+0x2e4>)
 80070f0:	781b      	ldrb	r3, [r3, #0]
 80070f2:	f083 0301 	eor.w	r3, r3, #1
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d06b      	beq.n	80071d4 <mainLoop+0x1f0>
 80070fc:	486d      	ldr	r0, [pc, #436]	; (80072b4 <mainLoop+0x2d0>)
 80070fe:	f002 fa83 	bl	8009608 <HAL_I2C_GetState>
 8007102:	4603      	mov	r3, r0
 8007104:	2b20      	cmp	r3, #32
 8007106:	d165      	bne.n	80071d4 <mainLoop+0x1f0>
		  if(ilkOkuma==0) {
 8007108:	4b70      	ldr	r3, [pc, #448]	; (80072cc <mainLoop+0x2e8>)
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	f083 0301 	eor.w	r3, r3, #1
 8007110:	b2db      	uxtb	r3, r3
 8007112:	2b00      	cmp	r3, #0
 8007114:	d044      	beq.n	80071a0 <mainLoop+0x1bc>
			  lcd_print(1,1,"   **EEPROM**   ");
 8007116:	4a6e      	ldr	r2, [pc, #440]	; (80072d0 <mainLoop+0x2ec>)
 8007118:	2101      	movs	r1, #1
 800711a:	2001      	movs	r0, #1
 800711c:	f7f9 fb73 	bl	8000806 <lcd_print>
			  if(dilSecim==0) {
 8007120:	4b66      	ldr	r3, [pc, #408]	; (80072bc <mainLoop+0x2d8>)
 8007122:	781b      	ldrb	r3, [r3, #0]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d105      	bne.n	8007134 <mainLoop+0x150>
				  lcd_print(2,1,"Data Okunuyor...");
 8007128:	4a6a      	ldr	r2, [pc, #424]	; (80072d4 <mainLoop+0x2f0>)
 800712a:	2101      	movs	r1, #1
 800712c:	2002      	movs	r0, #2
 800712e:	f7f9 fb6a 	bl	8000806 <lcd_print>
 8007132:	e008      	b.n	8007146 <mainLoop+0x162>
			  } else if(dilSecim==1) {
 8007134:	4b61      	ldr	r3, [pc, #388]	; (80072bc <mainLoop+0x2d8>)
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	2b01      	cmp	r3, #1
 800713a:	d104      	bne.n	8007146 <mainLoop+0x162>
				  lcd_print(2,1,"Data Reading... ");
 800713c:	4a66      	ldr	r2, [pc, #408]	; (80072d8 <mainLoop+0x2f4>)
 800713e:	2101      	movs	r1, #1
 8007140:	2002      	movs	r0, #2
 8007142:	f7f9 fb60 	bl	8000806 <lcd_print>
			  }
			  HAL_Delay(1000);
 8007146:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800714a:	f000 fe71 	bl	8007e30 <HAL_Delay>

			  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 800714e:	bf00      	nop
 8007150:	4858      	ldr	r0, [pc, #352]	; (80072b4 <mainLoop+0x2d0>)
 8007152:	f002 fa66 	bl	8009622 <HAL_I2C_GetError>
 8007156:	4603      	mov	r3, r0
 8007158:	2b04      	cmp	r3, #4
 800715a:	d0f9      	beq.n	8007150 <mainLoop+0x16c>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 800715c:	e003      	b.n	8007166 <mainLoop+0x182>
				  HAL_Delay(1000);
 800715e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8007162:	f000 fe65 	bl	8007e30 <HAL_Delay>
			  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY) {
 8007166:	4853      	ldr	r0, [pc, #332]	; (80072b4 <mainLoop+0x2d0>)
 8007168:	f002 fa4e 	bl	8009608 <HAL_I2C_GetState>
 800716c:	4603      	mov	r3, r0
 800716e:	2b20      	cmp	r3, #32
 8007170:	d1f5      	bne.n	800715e <mainLoop+0x17a>
			  }

			  if(dilSecim==0) {
 8007172:	4b52      	ldr	r3, [pc, #328]	; (80072bc <mainLoop+0x2d8>)
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d105      	bne.n	8007186 <mainLoop+0x1a2>
				  lcd_print(2,1,"Data Okundu.    ");
 800717a:	4a58      	ldr	r2, [pc, #352]	; (80072dc <mainLoop+0x2f8>)
 800717c:	2101      	movs	r1, #1
 800717e:	2002      	movs	r0, #2
 8007180:	f7f9 fb41 	bl	8000806 <lcd_print>
 8007184:	e008      	b.n	8007198 <mainLoop+0x1b4>
			  } else if(dilSecim==1) {
 8007186:	4b4d      	ldr	r3, [pc, #308]	; (80072bc <mainLoop+0x2d8>)
 8007188:	781b      	ldrb	r3, [r3, #0]
 800718a:	2b01      	cmp	r3, #1
 800718c:	d104      	bne.n	8007198 <mainLoop+0x1b4>
				  lcd_print(2,1,"Data Read.      ");
 800718e:	4a54      	ldr	r2, [pc, #336]	; (80072e0 <mainLoop+0x2fc>)
 8007190:	2101      	movs	r1, #1
 8007192:	2002      	movs	r0, #2
 8007194:	f7f9 fb37 	bl	8000806 <lcd_print>
			  }

			  ilkOkuma=1;
 8007198:	4b4c      	ldr	r3, [pc, #304]	; (80072cc <mainLoop+0x2e8>)
 800719a:	2201      	movs	r2, #1
 800719c:	701a      	strb	r2, [r3, #0]
 800719e:	e014      	b.n	80071ca <mainLoop+0x1e6>
		  } else {
			  if(dilSecim==0) {
 80071a0:	4b46      	ldr	r3, [pc, #280]	; (80072bc <mainLoop+0x2d8>)
 80071a2:	781b      	ldrb	r3, [r3, #0]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d105      	bne.n	80071b4 <mainLoop+0x1d0>
				  lcd_print(2,1,"Deger Kaydedildi");
 80071a8:	4a4e      	ldr	r2, [pc, #312]	; (80072e4 <mainLoop+0x300>)
 80071aa:	2101      	movs	r1, #1
 80071ac:	2002      	movs	r0, #2
 80071ae:	f7f9 fb2a 	bl	8000806 <lcd_print>
 80071b2:	e008      	b.n	80071c6 <mainLoop+0x1e2>
			  } else if(dilSecim==1) {
 80071b4:	4b41      	ldr	r3, [pc, #260]	; (80072bc <mainLoop+0x2d8>)
 80071b6:	781b      	ldrb	r3, [r3, #0]
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d104      	bne.n	80071c6 <mainLoop+0x1e2>
				  lcd_print(2,1,"Value Saved     ");
 80071bc:	4a4a      	ldr	r2, [pc, #296]	; (80072e8 <mainLoop+0x304>)
 80071be:	2101      	movs	r1, #1
 80071c0:	2002      	movs	r0, #2
 80071c2:	f7f9 fb20 	bl	8000806 <lcd_print>
			  }
			  lcd_clear();
 80071c6:	f7f9 fb33 	bl	8000830 <lcd_clear>
		  }

		  eepromKontrol();
 80071ca:	f7fd fc17 	bl	80049fc <eepromKontrol>
		  hafizaOku=1;
 80071ce:	4b3e      	ldr	r3, [pc, #248]	; (80072c8 <mainLoop+0x2e4>)
 80071d0:	2201      	movs	r2, #1
 80071d2:	701a      	strb	r2, [r3, #0]
		}

		if((menuGiris==0)&&(mesajYazildi==0)&&(demoMode==0)) {
 80071d4:	4b45      	ldr	r3, [pc, #276]	; (80072ec <mainLoop+0x308>)
 80071d6:	781b      	ldrb	r3, [r3, #0]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d11c      	bne.n	8007216 <mainLoop+0x232>
 80071dc:	4b44      	ldr	r3, [pc, #272]	; (80072f0 <mainLoop+0x30c>)
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	f083 0301 	eor.w	r3, r3, #1
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d015      	beq.n	8007216 <mainLoop+0x232>
 80071ea:	4b42      	ldr	r3, [pc, #264]	; (80072f4 <mainLoop+0x310>)
 80071ec:	781b      	ldrb	r3, [r3, #0]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d111      	bne.n	8007216 <mainLoop+0x232>
			lcd_clear();
 80071f2:	f7f9 fb1d 	bl	8000830 <lcd_clear>
			HAL_Delay(10);
 80071f6:	200a      	movs	r0, #10
 80071f8:	f000 fe1a 	bl	8007e30 <HAL_Delay>
			lcd_print(1, 1, "    ESP-RMK     ");
 80071fc:	4a3e      	ldr	r2, [pc, #248]	; (80072f8 <mainLoop+0x314>)
 80071fe:	2101      	movs	r1, #1
 8007200:	2001      	movs	r0, #1
 8007202:	f7f9 fb00 	bl	8000806 <lcd_print>
			lcd_print(2, 1, "      RUN       ");
 8007206:	4a3d      	ldr	r2, [pc, #244]	; (80072fc <mainLoop+0x318>)
 8007208:	2101      	movs	r1, #1
 800720a:	2002      	movs	r0, #2
 800720c:	f7f9 fafb 	bl	8000806 <lcd_print>
			mesajYazildi=1;
 8007210:	4b37      	ldr	r3, [pc, #220]	; (80072f0 <mainLoop+0x30c>)
 8007212:	2201      	movs	r2, #1
 8007214:	701a      	strb	r2, [r3, #0]
		}

		if ((menuGiris==0) && (HAL_GPIO_ReadPin(butonYukariIn_GPIO_Port,butonYukariIn_Pin)==1) && (HAL_GPIO_ReadPin(butonAsagiIn_GPIO_Port,butonAsagiIn_Pin)==1)) {
 8007216:	4b35      	ldr	r3, [pc, #212]	; (80072ec <mainLoop+0x308>)
 8007218:	781b      	ldrb	r3, [r3, #0]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d112      	bne.n	8007244 <mainLoop+0x260>
 800721e:	2102      	movs	r1, #2
 8007220:	481e      	ldr	r0, [pc, #120]	; (800729c <mainLoop+0x2b8>)
 8007222:	f001 fbd5 	bl	80089d0 <HAL_GPIO_ReadPin>
 8007226:	4603      	mov	r3, r0
 8007228:	2b01      	cmp	r3, #1
 800722a:	d10b      	bne.n	8007244 <mainLoop+0x260>
 800722c:	2104      	movs	r1, #4
 800722e:	481b      	ldr	r0, [pc, #108]	; (800729c <mainLoop+0x2b8>)
 8007230:	f001 fbce 	bl	80089d0 <HAL_GPIO_ReadPin>
 8007234:	4603      	mov	r3, r0
 8007236:	2b01      	cmp	r3, #1
 8007238:	d104      	bne.n	8007244 <mainLoop+0x260>
			menuGiris=1;
 800723a:	4b2c      	ldr	r3, [pc, #176]	; (80072ec <mainLoop+0x308>)
 800723c:	2201      	movs	r2, #1
 800723e:	701a      	strb	r2, [r3, #0]
			lcd_clear();
 8007240:	f7f9 faf6 	bl	8000830 <lcd_clear>
		}

		if(menuGiris==1) {
 8007244:	4b29      	ldr	r3, [pc, #164]	; (80072ec <mainLoop+0x308>)
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	2b01      	cmp	r3, #1
 800724a:	d101      	bne.n	8007250 <mainLoop+0x26c>
			menu();
 800724c:	f7f9 fb3c 	bl	80008c8 <menu>
		}

		HAL_GPIO_TogglePin(cycleLed_GPIO_Port, cycleLed_Pin);
 8007250:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007254:	4812      	ldr	r0, [pc, #72]	; (80072a0 <mainLoop+0x2bc>)
 8007256:	f001 fbea 	bl	8008a2e <HAL_GPIO_TogglePin>

		/* GİRİLEN PARAMETRELERE GÖRE AYARLARIN YAPILMASI*/

		if(HAL_GPIO_ReadPin(acilStop1In_GPIO_Port, acilStop1In_Pin)==0 && hataVar==0) {
 800725a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800725e:	4828      	ldr	r0, [pc, #160]	; (8007300 <mainLoop+0x31c>)
 8007260:	f001 fbb6 	bl	80089d0 <HAL_GPIO_ReadPin>
 8007264:	4603      	mov	r3, r0
 8007266:	2b00      	cmp	r3, #0
 8007268:	d10a      	bne.n	8007280 <mainLoop+0x29c>
 800726a:	4b26      	ldr	r3, [pc, #152]	; (8007304 <mainLoop+0x320>)
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	f083 0301 	eor.w	r3, r3, #1
 8007272:	b2db      	uxtb	r3, r3
 8007274:	2b00      	cmp	r3, #0
 8007276:	d003      	beq.n	8007280 <mainLoop+0x29c>
			stopVar=1;
 8007278:	4b23      	ldr	r3, [pc, #140]	; (8007308 <mainLoop+0x324>)
 800727a:	2201      	movs	r2, #1
 800727c:	701a      	strb	r2, [r3, #0]
 800727e:	e002      	b.n	8007286 <mainLoop+0x2a2>
		} else {
			stopVar=0;
 8007280:	4b21      	ldr	r3, [pc, #132]	; (8007308 <mainLoop+0x324>)
 8007282:	2200      	movs	r2, #0
 8007284:	701a      	strb	r2, [r3, #0]
		}

		/****************************************  BASINC SALTERI ********************************************/
		checkBasincSalteri();
 8007286:	f7fd fff7 	bl	8005278 <checkBasincSalteri>

		/******** Bas gönder ***********/
		checkBasGonder();
 800728a:	f7fe f829 	bl	80052e0 <checkBasGonder>

		/******** Kapı Secimleri ***********/

		checkKapiSecimleri();
 800728e:	f7fe f86d 	bl	800536c <checkKapiSecimleri>

		/* PARAMETRELERE GÖRE ÇIKISLARIN AYARLANMASI*/

		/*MOTOR CALISIYOR*/

		checkAktifCalisma();
 8007292:	f7fe f8bd 	bl	8005410 <checkAktifCalisma>

		// DEMO MOD BASLIYOR

		// DEMO YUKARI CALISMA

		checkDemoModCalisma();
 8007296:	f7ff fc0b 	bl	8006ab0 <checkDemoModCalisma>
		checkLCDBacklight();
 800729a:	e6a6      	b.n	8006fea <mainLoop+0x6>
 800729c:	40010800 	.word	0x40010800
 80072a0:	40011000 	.word	0x40011000
 80072a4:	20000b3e 	.word	0x20000b3e
 80072a8:	20000aec 	.word	0x20000aec
 80072ac:	20000b08 	.word	0x20000b08
 80072b0:	20000b3b 	.word	0x20000b3b
 80072b4:	20000ce0 	.word	0x20000ce0
 80072b8:	20000aa4 	.word	0x20000aa4
 80072bc:	20000b30 	.word	0x20000b30
 80072c0:	0800cf14 	.word	0x0800cf14
 80072c4:	0800cf28 	.word	0x0800cf28
 80072c8:	20000b3c 	.word	0x20000b3c
 80072cc:	20000b3d 	.word	0x20000b3d
 80072d0:	0800cf3c 	.word	0x0800cf3c
 80072d4:	0800cf50 	.word	0x0800cf50
 80072d8:	0800cf64 	.word	0x0800cf64
 80072dc:	0800cf78 	.word	0x0800cf78
 80072e0:	0800cf8c 	.word	0x0800cf8c
 80072e4:	0800cfa0 	.word	0x0800cfa0
 80072e8:	0800cfb4 	.word	0x0800cfb4
 80072ec:	20000b2d 	.word	0x20000b2d
 80072f0:	20000b43 	.word	0x20000b43
 80072f4:	20000b2e 	.word	0x20000b2e
 80072f8:	0800ce7c 	.word	0x0800ce7c
 80072fc:	0800ce90 	.word	0x0800ce90
 8007300:	40010c00 	.word	0x40010c00
 8007304:	20000b64 	.word	0x20000b64
 8007308:	20000b61 	.word	0x20000b61

0800730c <ESP_Init>:
	}
}

void ESP_Init (char *SSID, char *PASSWD) {
 800730c:	b580      	push	{r7, lr}
 800730e:	b098      	sub	sp, #96	; 0x60
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
	char data[80];

	Ringbuf_init();
 8007316:	f7f8 ff8d 	bl	8000234 <Ringbuf_init>

	Uart_sendstring("AT+RST\r\n", &huart1);
 800731a:	4941      	ldr	r1, [pc, #260]	; (8007420 <ESP_Init+0x114>)
 800731c:	4841      	ldr	r0, [pc, #260]	; (8007424 <ESP_Init+0x118>)
 800731e:	f7f9 f81d 	bl	800035c <Uart_sendstring>

	/********* AT **********/
	Uart_sendstring("AT\r\n", &huart1);
 8007322:	493f      	ldr	r1, [pc, #252]	; (8007420 <ESP_Init+0x114>)
 8007324:	4840      	ldr	r0, [pc, #256]	; (8007428 <ESP_Init+0x11c>)
 8007326:	f7f9 f819 	bl	800035c <Uart_sendstring>
	while(!(Wait_for("AT\r\r\n\r\nOK\r\n", &huart1)));
 800732a:	bf00      	nop
 800732c:	493c      	ldr	r1, [pc, #240]	; (8007420 <ESP_Init+0x114>)
 800732e:	483f      	ldr	r0, [pc, #252]	; (800742c <ESP_Init+0x120>)
 8007330:	f7f9 f8c0 	bl	80004b4 <Wait_for>
 8007334:	4603      	mov	r3, r0
 8007336:	2b00      	cmp	r3, #0
 8007338:	d0f8      	beq.n	800732c <ESP_Init+0x20>


	/********* AT+CWMODE=1 **********/
	Uart_sendstring("AT+CWMODE=1\r\n", &huart1);
 800733a:	4939      	ldr	r1, [pc, #228]	; (8007420 <ESP_Init+0x114>)
 800733c:	483c      	ldr	r0, [pc, #240]	; (8007430 <ESP_Init+0x124>)
 800733e:	f7f9 f80d 	bl	800035c <Uart_sendstring>
	while (!(Wait_for("AT+CWMODE=1\r\r\n\r\nOK\r\n", &huart1)));
 8007342:	bf00      	nop
 8007344:	4936      	ldr	r1, [pc, #216]	; (8007420 <ESP_Init+0x114>)
 8007346:	483b      	ldr	r0, [pc, #236]	; (8007434 <ESP_Init+0x128>)
 8007348:	f7f9 f8b4 	bl	80004b4 <Wait_for>
 800734c:	4603      	mov	r3, r0
 800734e:	2b00      	cmp	r3, #0
 8007350:	d0f8      	beq.n	8007344 <ESP_Init+0x38>


	/********* AT+CWJAP="SSID","PASSWD" **********/
	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 8007352:	f107 000c 	add.w	r0, r7, #12
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	4937      	ldr	r1, [pc, #220]	; (8007438 <ESP_Init+0x12c>)
 800735c:	f004 fc26 	bl	800bbac <siprintf>
	Uart_sendstring(data, &huart1);
 8007360:	f107 030c 	add.w	r3, r7, #12
 8007364:	492e      	ldr	r1, [pc, #184]	; (8007420 <ESP_Init+0x114>)
 8007366:	4618      	mov	r0, r3
 8007368:	f7f8 fff8 	bl	800035c <Uart_sendstring>
	while (!(Wait_for("WIFI GOT IP\r\n\r\nOK\r\n", &huart1)));
 800736c:	bf00      	nop
 800736e:	492c      	ldr	r1, [pc, #176]	; (8007420 <ESP_Init+0x114>)
 8007370:	4832      	ldr	r0, [pc, #200]	; (800743c <ESP_Init+0x130>)
 8007372:	f7f9 f89f 	bl	80004b4 <Wait_for>
 8007376:	4603      	mov	r3, r0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d0f8      	beq.n	800736e <ESP_Init+0x62>
	sprintf (data, "Connected to,\"%s\"\n\n", SSID);
 800737c:	f107 030c 	add.w	r3, r7, #12
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	492f      	ldr	r1, [pc, #188]	; (8007440 <ESP_Init+0x134>)
 8007384:	4618      	mov	r0, r3
 8007386:	f004 fc11 	bl	800bbac <siprintf>


	/********* AT+CIFSR **********/
	Uart_sendstring("AT+CIFSR\r\n", &huart1);
 800738a:	4925      	ldr	r1, [pc, #148]	; (8007420 <ESP_Init+0x114>)
 800738c:	482d      	ldr	r0, [pc, #180]	; (8007444 <ESP_Init+0x138>)
 800738e:	f7f8 ffe5 	bl	800035c <Uart_sendstring>
	while (!(Wait_for("CIFSR:STAIP,\"", &huart1)));
 8007392:	bf00      	nop
 8007394:	4922      	ldr	r1, [pc, #136]	; (8007420 <ESP_Init+0x114>)
 8007396:	482c      	ldr	r0, [pc, #176]	; (8007448 <ESP_Init+0x13c>)
 8007398:	f7f9 f88c 	bl	80004b4 <Wait_for>
 800739c:	4603      	mov	r3, r0
 800739e:	2b00      	cmp	r3, #0
 80073a0:	d0f8      	beq.n	8007394 <ESP_Init+0x88>
	while (!(Copy_upto("\"",buffer, &huart1)));
 80073a2:	bf00      	nop
 80073a4:	4a1e      	ldr	r2, [pc, #120]	; (8007420 <ESP_Init+0x114>)
 80073a6:	4929      	ldr	r1, [pc, #164]	; (800744c <ESP_Init+0x140>)
 80073a8:	4829      	ldr	r0, [pc, #164]	; (8007450 <ESP_Init+0x144>)
 80073aa:	f7f9 f807 	bl	80003bc <Copy_upto>
 80073ae:	4603      	mov	r3, r0
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d0f7      	beq.n	80073a4 <ESP_Init+0x98>
	while (!(Wait_for("OK\r\n", &huart1)));
 80073b4:	bf00      	nop
 80073b6:	491a      	ldr	r1, [pc, #104]	; (8007420 <ESP_Init+0x114>)
 80073b8:	4826      	ldr	r0, [pc, #152]	; (8007454 <ESP_Init+0x148>)
 80073ba:	f7f9 f87b 	bl	80004b4 <Wait_for>
 80073be:	4603      	mov	r3, r0
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d0f8      	beq.n	80073b6 <ESP_Init+0xaa>
	int len = strlen (buffer);
 80073c4:	4821      	ldr	r0, [pc, #132]	; (800744c <ESP_Init+0x140>)
 80073c6:	f7f8 ff2d 	bl	8000224 <strlen>
 80073ca:	4603      	mov	r3, r0
 80073cc:	65fb      	str	r3, [r7, #92]	; 0x5c
	buffer[len-1] = '\0';
 80073ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80073d0:	3b01      	subs	r3, #1
 80073d2:	4a1e      	ldr	r2, [pc, #120]	; (800744c <ESP_Init+0x140>)
 80073d4:	2100      	movs	r1, #0
 80073d6:	54d1      	strb	r1, [r2, r3]
	sprintf (data, "IP ADDR: %s\n\n", buffer);
 80073d8:	f107 030c 	add.w	r3, r7, #12
 80073dc:	4a1b      	ldr	r2, [pc, #108]	; (800744c <ESP_Init+0x140>)
 80073de:	491e      	ldr	r1, [pc, #120]	; (8007458 <ESP_Init+0x14c>)
 80073e0:	4618      	mov	r0, r3
 80073e2:	f004 fbe3 	bl	800bbac <siprintf>


	Uart_sendstring("AT+CIPMUX=1\r\n", &huart1);
 80073e6:	490e      	ldr	r1, [pc, #56]	; (8007420 <ESP_Init+0x114>)
 80073e8:	481c      	ldr	r0, [pc, #112]	; (800745c <ESP_Init+0x150>)
 80073ea:	f7f8 ffb7 	bl	800035c <Uart_sendstring>
	while (!(Wait_for("AT+CIPMUX=1\r\r\n\r\nOK\r\n", &huart1)));
 80073ee:	bf00      	nop
 80073f0:	490b      	ldr	r1, [pc, #44]	; (8007420 <ESP_Init+0x114>)
 80073f2:	481b      	ldr	r0, [pc, #108]	; (8007460 <ESP_Init+0x154>)
 80073f4:	f7f9 f85e 	bl	80004b4 <Wait_for>
 80073f8:	4603      	mov	r3, r0
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d0f8      	beq.n	80073f0 <ESP_Init+0xe4>

	Uart_sendstring("AT+CIPSERVER=1,80\r\n", &huart1);
 80073fe:	4908      	ldr	r1, [pc, #32]	; (8007420 <ESP_Init+0x114>)
 8007400:	4818      	ldr	r0, [pc, #96]	; (8007464 <ESP_Init+0x158>)
 8007402:	f7f8 ffab 	bl	800035c <Uart_sendstring>
	while (!(Wait_for("OK\r\n", &huart1)));
 8007406:	bf00      	nop
 8007408:	4905      	ldr	r1, [pc, #20]	; (8007420 <ESP_Init+0x114>)
 800740a:	4812      	ldr	r0, [pc, #72]	; (8007454 <ESP_Init+0x148>)
 800740c:	f7f9 f852 	bl	80004b4 <Wait_for>
 8007410:	4603      	mov	r3, r0
 8007412:	2b00      	cmp	r3, #0
 8007414:	d0f8      	beq.n	8007408 <ESP_Init+0xfc>

}
 8007416:	bf00      	nop
 8007418:	bf00      	nop
 800741a:	3760      	adds	r7, #96	; 0x60
 800741c:	46bd      	mov	sp, r7
 800741e:	bd80      	pop	{r7, pc}
 8007420:	20000d7c 	.word	0x20000d7c
 8007424:	0800cfc8 	.word	0x0800cfc8
 8007428:	0800cfd4 	.word	0x0800cfd4
 800742c:	0800cfdc 	.word	0x0800cfdc
 8007430:	0800cfe8 	.word	0x0800cfe8
 8007434:	0800cff8 	.word	0x0800cff8
 8007438:	0800d010 	.word	0x0800d010
 800743c:	0800d028 	.word	0x0800d028
 8007440:	0800d03c 	.word	0x0800d03c
 8007444:	0800d050 	.word	0x0800d050
 8007448:	0800d05c 	.word	0x0800d05c
 800744c:	20000ca4 	.word	0x20000ca4
 8007450:	0800d06c 	.word	0x0800d06c
 8007454:	0800d070 	.word	0x0800d070
 8007458:	0800d078 	.word	0x0800d078
 800745c:	0800d088 	.word	0x0800d088
 8007460:	0800d098 	.word	0x0800d098
 8007464:	0800d0b0 	.word	0x0800d0b0

08007468 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) { /*------timer kesmesinde islem yapmak için */
 8007468:	b480      	push	{r7}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
	millis=millis+1;
 8007470:	4b04      	ldr	r3, [pc, #16]	; (8007484 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	3301      	adds	r3, #1
 8007476:	4a03      	ldr	r2, [pc, #12]	; (8007484 <HAL_TIM_PeriodElapsedCallback+0x1c>)
 8007478:	6013      	str	r3, [r2, #0]
}
 800747a:	bf00      	nop
 800747c:	370c      	adds	r7, #12
 800747e:	46bd      	mov	sp, r7
 8007480:	bc80      	pop	{r7}
 8007482:	4770      	bx	lr
 8007484:	20000aec 	.word	0x20000aec

08007488 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800748c:	f000 fc6e 	bl	8007d6c <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_Delay(500);
 8007490:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8007494:	f000 fccc 	bl	8007e30 <HAL_Delay>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007498:	f000 f89e 	bl	80075d8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800749c:	f000 f9c0 	bl	8007820 <MX_GPIO_Init>
  MX_CAN_Init();
 80074a0:	f000 f8e0 	bl	8007664 <MX_CAN_Init>
  MX_I2C1_Init();
 80074a4:	f000 f912 	bl	80076cc <MX_I2C1_Init>
  MX_TIM1_Init();
 80074a8:	f000 f93e 	bl	8007728 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80074ac:	f000 f98e 	bl	80077cc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80074b0:	2201      	movs	r2, #1
 80074b2:	2140      	movs	r1, #64	; 0x40
 80074b4:	483e      	ldr	r0, [pc, #248]	; (80075b0 <main+0x128>)
 80074b6:	f001 faa2 	bl	80089fe <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 80074ba:	2201      	movs	r2, #1
 80074bc:	2180      	movs	r1, #128	; 0x80
 80074be:	483c      	ldr	r0, [pc, #240]	; (80075b0 <main+0x128>)
 80074c0:	f001 fa9d 	bl	80089fe <HAL_GPIO_WritePin>
  HAL_Delay(10);
 80074c4:	200a      	movs	r0, #10
 80074c6:	f000 fcb3 	bl	8007e30 <HAL_Delay>
  lcd_init();
 80074ca:	f7f9 f96a 	bl	80007a2 <lcd_init>
  HAL_Delay(10);
 80074ce:	200a      	movs	r0, #10
 80074d0:	f000 fcae 	bl	8007e30 <HAL_Delay>
  HAL_TIM_Base_Start_IT(&htim1);
 80074d4:	4837      	ldr	r0, [pc, #220]	; (80075b4 <main+0x12c>)
 80074d6:	f003 f945 	bl	800a764 <HAL_TIM_Base_Start_IT>
  while(HAL_I2C_GetError(&hi2c1) == HAL_I2C_ERROR_AF);
 80074da:	bf00      	nop
 80074dc:	4836      	ldr	r0, [pc, #216]	; (80075b8 <main+0x130>)
 80074de:	f002 f8a0 	bl	8009622 <HAL_I2C_GetError>
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b04      	cmp	r3, #4
 80074e6:	d0f9      	beq.n	80074dc <main+0x54>
  while (HAL_I2C_GetState(&hi2c1) != HAL_I2C_STATE_READY);
 80074e8:	bf00      	nop
 80074ea:	4833      	ldr	r0, [pc, #204]	; (80075b8 <main+0x130>)
 80074ec:	f002 f88c 	bl	8009608 <HAL_I2C_GetState>
 80074f0:	4603      	mov	r3, r0
 80074f2:	2b20      	cmp	r3, #32
 80074f4:	d1f9      	bne.n	80074ea <main+0x62>

  HAL_GPIO_WritePin(motorOut_GPIO_Port, motorOut_Pin, GPIO_PIN_RESET);
 80074f6:	2200      	movs	r2, #0
 80074f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80074fc:	482c      	ldr	r0, [pc, #176]	; (80075b0 <main+0x128>)
 80074fe:	f001 fa7e 	bl	80089fe <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(motorIkinciHizOut_GPIO_Port, motorIkinciHizOut_Pin, GPIO_PIN_RESET);
 8007502:	2200      	movs	r2, #0
 8007504:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007508:	4829      	ldr	r0, [pc, #164]	; (80075b0 <main+0x128>)
 800750a:	f001 fa78 	bl	80089fe <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yukariValfOut_GPIO_Port, yukariValfOut_Pin, GPIO_PIN_RESET);
 800750e:	2200      	movs	r2, #0
 8007510:	2104      	movs	r1, #4
 8007512:	4827      	ldr	r0, [pc, #156]	; (80075b0 <main+0x128>)
 8007514:	f001 fa73 	bl	80089fe <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(asagiValfOut_GPIO_Port, asagiValfOut_Pin, GPIO_PIN_RESET);
 8007518:	2200      	movs	r2, #0
 800751a:	2102      	movs	r1, #2
 800751c:	4824      	ldr	r0, [pc, #144]	; (80075b0 <main+0x128>)
 800751e:	f001 fa6e 	bl	80089fe <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(yavaslamaValfOut_GPIO_Port, yavaslamaValfOut_Pin, GPIO_PIN_RESET);
 8007522:	2200      	movs	r2, #0
 8007524:	2101      	movs	r1, #1
 8007526:	4822      	ldr	r0, [pc, #136]	; (80075b0 <main+0x128>)
 8007528:	f001 fa69 	bl	80089fe <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeYukariIleriOut_GPIO_Port, devirmeYukariIleriOut_Pin, GPIO_PIN_RESET);
 800752c:	2200      	movs	r2, #0
 800752e:	2120      	movs	r1, #32
 8007530:	4822      	ldr	r0, [pc, #136]	; (80075bc <main+0x134>)
 8007532:	f001 fa64 	bl	80089fe <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(devirmeAsagiGeriOut_GPIO_Port, devirmeAsagiGeriOut_Pin, GPIO_PIN_RESET);
 8007536:	2200      	movs	r2, #0
 8007538:	2110      	movs	r1, #16
 800753a:	4820      	ldr	r0, [pc, #128]	; (80075bc <main+0x134>)
 800753c:	f001 fa5f 	bl	80089fe <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi1Out_GPIO_Port, kapi1Out_Pin, GPIO_PIN_RESET);
 8007540:	2200      	movs	r2, #0
 8007542:	2180      	movs	r1, #128	; 0x80
 8007544:	481e      	ldr	r0, [pc, #120]	; (80075c0 <main+0x138>)
 8007546:	f001 fa5a 	bl	80089fe <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(kapi2Out_GPIO_Port, kapi2Out_Pin, GPIO_PIN_RESET);
 800754a:	2200      	movs	r2, #0
 800754c:	2140      	movs	r1, #64	; 0x40
 800754e:	481c      	ldr	r0, [pc, #112]	; (80075c0 <main+0x138>)
 8007550:	f001 fa55 	bl	80089fe <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(tablaKapiOut_GPIO_Port, tablaKapiOut_Pin, GPIO_PIN_RESET);
 8007554:	2200      	movs	r2, #0
 8007556:	2120      	movs	r1, #32
 8007558:	4819      	ldr	r0, [pc, #100]	; (80075c0 <main+0x138>)
 800755a:	f001 fa50 	bl	80089fe <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(buzzerOut_GPIO_Port, buzzerOut_Pin, GPIO_PIN_RESET);
 800755e:	2200      	movs	r2, #0
 8007560:	2110      	movs	r1, #16
 8007562:	4817      	ldr	r0, [pc, #92]	; (80075c0 <main+0x138>)
 8007564:	f001 fa4b 	bl	80089fe <HAL_GPIO_WritePin>

  i2cTest();
 8007568:	f7fd fdbe 	bl	80050e8 <i2cTest>
  HAL_Delay(100);
 800756c:	2064      	movs	r0, #100	; 0x64
 800756e:	f000 fc5f 	bl	8007e30 <HAL_Delay>
  lcd_print(1,1,"     RMK-V1     ");
 8007572:	4a14      	ldr	r2, [pc, #80]	; (80075c4 <main+0x13c>)
 8007574:	2101      	movs	r1, #1
 8007576:	2001      	movs	r0, #1
 8007578:	f7f9 f945 	bl	8000806 <lcd_print>
  lcd_print(2,1,"ONDTECH ESP CONT");
 800757c:	4a12      	ldr	r2, [pc, #72]	; (80075c8 <main+0x140>)
 800757e:	2101      	movs	r1, #1
 8007580:	2002      	movs	r0, #2
 8007582:	f7f9 f940 	bl	8000806 <lcd_print>
  HAL_Delay(1000);
 8007586:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800758a:	f000 fc51 	bl	8007e30 <HAL_Delay>
  lcd_clear();
 800758e:	f7f9 f94f 	bl	8000830 <lcd_clear>

  eepromKontrol();
 8007592:	f7fd fa33 	bl	80049fc <eepromKontrol>

  lcd_clear();
 8007596:	f7f9 f94b 	bl	8000830 <lcd_clear>

  backLightTimer = millis;
 800759a:	4b0c      	ldr	r3, [pc, #48]	; (80075cc <main+0x144>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	4a0c      	ldr	r2, [pc, #48]	; (80075d0 <main+0x148>)
 80075a0:	6013      	str	r3, [r2, #0]

  ESP_Init("", "");
 80075a2:	490c      	ldr	r1, [pc, #48]	; (80075d4 <main+0x14c>)
 80075a4:	480b      	ldr	r0, [pc, #44]	; (80075d4 <main+0x14c>)
 80075a6:	f7ff feb1 	bl	800730c <ESP_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  mainLoop();
 80075aa:	f7ff fd1b 	bl	8006fe4 <mainLoop>
 80075ae:	e7fc      	b.n	80075aa <main+0x122>
 80075b0:	40010c00 	.word	0x40010c00
 80075b4:	20000d34 	.word	0x20000d34
 80075b8:	20000ce0 	.word	0x20000ce0
 80075bc:	40011000 	.word	0x40011000
 80075c0:	40010800 	.word	0x40010800
 80075c4:	0800d0c4 	.word	0x0800d0c4
 80075c8:	0800d0d8 	.word	0x0800d0d8
 80075cc:	20000aec 	.word	0x20000aec
 80075d0:	20000b08 	.word	0x20000b08
 80075d4:	0800d0ec 	.word	0x0800d0ec

080075d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b090      	sub	sp, #64	; 0x40
 80075dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80075de:	f107 0318 	add.w	r3, r7, #24
 80075e2:	2228      	movs	r2, #40	; 0x28
 80075e4:	2100      	movs	r1, #0
 80075e6:	4618      	mov	r0, r3
 80075e8:	f004 fb00 	bl	800bbec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80075ec:	1d3b      	adds	r3, r7, #4
 80075ee:	2200      	movs	r2, #0
 80075f0:	601a      	str	r2, [r3, #0]
 80075f2:	605a      	str	r2, [r3, #4]
 80075f4:	609a      	str	r2, [r3, #8]
 80075f6:	60da      	str	r2, [r3, #12]
 80075f8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80075fa:	2301      	movs	r3, #1
 80075fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80075fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007602:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8007604:	2300      	movs	r3, #0
 8007606:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8007608:	2301      	movs	r3, #1
 800760a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800760c:	2302      	movs	r3, #2
 800760e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007610:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007614:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8007616:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800761a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800761c:	f107 0318 	add.w	r3, r7, #24
 8007620:	4618      	mov	r0, r3
 8007622:	f002 fc3f 	bl	8009ea4 <HAL_RCC_OscConfig>
 8007626:	4603      	mov	r3, r0
 8007628:	2b00      	cmp	r3, #0
 800762a:	d001      	beq.n	8007630 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800762c:	f000 f9a2 	bl	8007974 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007630:	230f      	movs	r3, #15
 8007632:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007634:	2302      	movs	r3, #2
 8007636:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007638:	2300      	movs	r3, #0
 800763a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800763c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007640:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007642:	2300      	movs	r3, #0
 8007644:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007646:	1d3b      	adds	r3, r7, #4
 8007648:	2102      	movs	r1, #2
 800764a:	4618      	mov	r0, r3
 800764c:	f002 feac 	bl	800a3a8 <HAL_RCC_ClockConfig>
 8007650:	4603      	mov	r3, r0
 8007652:	2b00      	cmp	r3, #0
 8007654:	d001      	beq.n	800765a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8007656:	f000 f98d 	bl	8007974 <Error_Handler>
  }
}
 800765a:	bf00      	nop
 800765c:	3740      	adds	r7, #64	; 0x40
 800765e:	46bd      	mov	sp, r7
 8007660:	bd80      	pop	{r7, pc}
	...

08007664 <MX_CAN_Init>:
  * @brief CAN Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN_Init(void)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN_Init 0 */
  /* USER CODE END CAN_Init 0 */

  /* USER CODE BEGIN CAN_Init 1 */
  /* USER CODE END CAN_Init 1 */
  hcan.Instance = CAN1;
 8007668:	4b16      	ldr	r3, [pc, #88]	; (80076c4 <MX_CAN_Init+0x60>)
 800766a:	4a17      	ldr	r2, [pc, #92]	; (80076c8 <MX_CAN_Init+0x64>)
 800766c:	601a      	str	r2, [r3, #0]
  hcan.Init.Prescaler = 16;
 800766e:	4b15      	ldr	r3, [pc, #84]	; (80076c4 <MX_CAN_Init+0x60>)
 8007670:	2210      	movs	r2, #16
 8007672:	605a      	str	r2, [r3, #4]
  hcan.Init.Mode = CAN_MODE_NORMAL;
 8007674:	4b13      	ldr	r3, [pc, #76]	; (80076c4 <MX_CAN_Init+0x60>)
 8007676:	2200      	movs	r2, #0
 8007678:	609a      	str	r2, [r3, #8]
  hcan.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800767a:	4b12      	ldr	r3, [pc, #72]	; (80076c4 <MX_CAN_Init+0x60>)
 800767c:	2200      	movs	r2, #0
 800767e:	60da      	str	r2, [r3, #12]
  hcan.Init.TimeSeg1 = CAN_BS1_1TQ;
 8007680:	4b10      	ldr	r3, [pc, #64]	; (80076c4 <MX_CAN_Init+0x60>)
 8007682:	2200      	movs	r2, #0
 8007684:	611a      	str	r2, [r3, #16]
  hcan.Init.TimeSeg2 = CAN_BS2_1TQ;
 8007686:	4b0f      	ldr	r3, [pc, #60]	; (80076c4 <MX_CAN_Init+0x60>)
 8007688:	2200      	movs	r2, #0
 800768a:	615a      	str	r2, [r3, #20]
  hcan.Init.TimeTriggeredMode = DISABLE;
 800768c:	4b0d      	ldr	r3, [pc, #52]	; (80076c4 <MX_CAN_Init+0x60>)
 800768e:	2200      	movs	r2, #0
 8007690:	761a      	strb	r2, [r3, #24]
  hcan.Init.AutoBusOff = DISABLE;
 8007692:	4b0c      	ldr	r3, [pc, #48]	; (80076c4 <MX_CAN_Init+0x60>)
 8007694:	2200      	movs	r2, #0
 8007696:	765a      	strb	r2, [r3, #25]
  hcan.Init.AutoWakeUp = DISABLE;
 8007698:	4b0a      	ldr	r3, [pc, #40]	; (80076c4 <MX_CAN_Init+0x60>)
 800769a:	2200      	movs	r2, #0
 800769c:	769a      	strb	r2, [r3, #26]
  hcan.Init.AutoRetransmission = DISABLE;
 800769e:	4b09      	ldr	r3, [pc, #36]	; (80076c4 <MX_CAN_Init+0x60>)
 80076a0:	2200      	movs	r2, #0
 80076a2:	76da      	strb	r2, [r3, #27]
  hcan.Init.ReceiveFifoLocked = DISABLE;
 80076a4:	4b07      	ldr	r3, [pc, #28]	; (80076c4 <MX_CAN_Init+0x60>)
 80076a6:	2200      	movs	r2, #0
 80076a8:	771a      	strb	r2, [r3, #28]
  hcan.Init.TransmitFifoPriority = DISABLE;
 80076aa:	4b06      	ldr	r3, [pc, #24]	; (80076c4 <MX_CAN_Init+0x60>)
 80076ac:	2200      	movs	r2, #0
 80076ae:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan) != HAL_OK)
 80076b0:	4804      	ldr	r0, [pc, #16]	; (80076c4 <MX_CAN_Init+0x60>)
 80076b2:	f000 fbe1 	bl	8007e78 <HAL_CAN_Init>
 80076b6:	4603      	mov	r3, r0
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d001      	beq.n	80076c0 <MX_CAN_Init+0x5c>
  {
    Error_Handler();
 80076bc:	f000 f95a 	bl	8007974 <Error_Handler>
  }
  /* USER CODE BEGIN CAN_Init 2 */
  /* USER CODE END CAN_Init 2 */

}
 80076c0:	bf00      	nop
 80076c2:	bd80      	pop	{r7, pc}
 80076c4:	20000cb8 	.word	0x20000cb8
 80076c8:	40006400 	.word	0x40006400

080076cc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 0 */
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */
  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80076d0:	4b12      	ldr	r3, [pc, #72]	; (800771c <MX_I2C1_Init+0x50>)
 80076d2:	4a13      	ldr	r2, [pc, #76]	; (8007720 <MX_I2C1_Init+0x54>)
 80076d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80076d6:	4b11      	ldr	r3, [pc, #68]	; (800771c <MX_I2C1_Init+0x50>)
 80076d8:	4a12      	ldr	r2, [pc, #72]	; (8007724 <MX_I2C1_Init+0x58>)
 80076da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80076dc:	4b0f      	ldr	r3, [pc, #60]	; (800771c <MX_I2C1_Init+0x50>)
 80076de:	2200      	movs	r2, #0
 80076e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80076e2:	4b0e      	ldr	r3, [pc, #56]	; (800771c <MX_I2C1_Init+0x50>)
 80076e4:	2200      	movs	r2, #0
 80076e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80076e8:	4b0c      	ldr	r3, [pc, #48]	; (800771c <MX_I2C1_Init+0x50>)
 80076ea:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80076ee:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80076f0:	4b0a      	ldr	r3, [pc, #40]	; (800771c <MX_I2C1_Init+0x50>)
 80076f2:	2200      	movs	r2, #0
 80076f4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80076f6:	4b09      	ldr	r3, [pc, #36]	; (800771c <MX_I2C1_Init+0x50>)
 80076f8:	2200      	movs	r2, #0
 80076fa:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80076fc:	4b07      	ldr	r3, [pc, #28]	; (800771c <MX_I2C1_Init+0x50>)
 80076fe:	2200      	movs	r2, #0
 8007700:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007702:	4b06      	ldr	r3, [pc, #24]	; (800771c <MX_I2C1_Init+0x50>)
 8007704:	2200      	movs	r2, #0
 8007706:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8007708:	4804      	ldr	r0, [pc, #16]	; (800771c <MX_I2C1_Init+0x50>)
 800770a:	f001 f9a9 	bl	8008a60 <HAL_I2C_Init>
 800770e:	4603      	mov	r3, r0
 8007710:	2b00      	cmp	r3, #0
 8007712:	d001      	beq.n	8007718 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8007714:	f000 f92e 	bl	8007974 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */
  /* USER CODE END I2C1_Init 2 */

}
 8007718:	bf00      	nop
 800771a:	bd80      	pop	{r7, pc}
 800771c:	20000ce0 	.word	0x20000ce0
 8007720:	40005400 	.word	0x40005400
 8007724:	00061a80 	.word	0x00061a80

08007728 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b086      	sub	sp, #24
 800772c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800772e:	f107 0308 	add.w	r3, r7, #8
 8007732:	2200      	movs	r2, #0
 8007734:	601a      	str	r2, [r3, #0]
 8007736:	605a      	str	r2, [r3, #4]
 8007738:	609a      	str	r2, [r3, #8]
 800773a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800773c:	463b      	mov	r3, r7
 800773e:	2200      	movs	r2, #0
 8007740:	601a      	str	r2, [r3, #0]
 8007742:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8007744:	4b1f      	ldr	r3, [pc, #124]	; (80077c4 <MX_TIM1_Init+0x9c>)
 8007746:	4a20      	ldr	r2, [pc, #128]	; (80077c8 <MX_TIM1_Init+0xa0>)
 8007748:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 35999;
 800774a:	4b1e      	ldr	r3, [pc, #120]	; (80077c4 <MX_TIM1_Init+0x9c>)
 800774c:	f648 429f 	movw	r2, #35999	; 0x8c9f
 8007750:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007752:	4b1c      	ldr	r3, [pc, #112]	; (80077c4 <MX_TIM1_Init+0x9c>)
 8007754:	2200      	movs	r2, #0
 8007756:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8007758:	4b1a      	ldr	r3, [pc, #104]	; (80077c4 <MX_TIM1_Init+0x9c>)
 800775a:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800775e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007760:	4b18      	ldr	r3, [pc, #96]	; (80077c4 <MX_TIM1_Init+0x9c>)
 8007762:	2200      	movs	r2, #0
 8007764:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8007766:	4b17      	ldr	r3, [pc, #92]	; (80077c4 <MX_TIM1_Init+0x9c>)
 8007768:	2200      	movs	r2, #0
 800776a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800776c:	4b15      	ldr	r3, [pc, #84]	; (80077c4 <MX_TIM1_Init+0x9c>)
 800776e:	2200      	movs	r2, #0
 8007770:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8007772:	4814      	ldr	r0, [pc, #80]	; (80077c4 <MX_TIM1_Init+0x9c>)
 8007774:	f002 ffa6 	bl	800a6c4 <HAL_TIM_Base_Init>
 8007778:	4603      	mov	r3, r0
 800777a:	2b00      	cmp	r3, #0
 800777c:	d001      	beq.n	8007782 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800777e:	f000 f8f9 	bl	8007974 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8007782:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007786:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8007788:	f107 0308 	add.w	r3, r7, #8
 800778c:	4619      	mov	r1, r3
 800778e:	480d      	ldr	r0, [pc, #52]	; (80077c4 <MX_TIM1_Init+0x9c>)
 8007790:	f003 f950 	bl	800aa34 <HAL_TIM_ConfigClockSource>
 8007794:	4603      	mov	r3, r0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d001      	beq.n	800779e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800779a:	f000 f8eb 	bl	8007974 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800779e:	2300      	movs	r3, #0
 80077a0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80077a2:	2300      	movs	r3, #0
 80077a4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80077a6:	463b      	mov	r3, r7
 80077a8:	4619      	mov	r1, r3
 80077aa:	4806      	ldr	r0, [pc, #24]	; (80077c4 <MX_TIM1_Init+0x9c>)
 80077ac:	f003 fb3e 	bl	800ae2c <HAL_TIMEx_MasterConfigSynchronization>
 80077b0:	4603      	mov	r3, r0
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d001      	beq.n	80077ba <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80077b6:	f000 f8dd 	bl	8007974 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80077ba:	bf00      	nop
 80077bc:	3718      	adds	r7, #24
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	20000d34 	.word	0x20000d34
 80077c8:	40012c00 	.word	0x40012c00

080077cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80077d0:	4b11      	ldr	r3, [pc, #68]	; (8007818 <MX_USART1_UART_Init+0x4c>)
 80077d2:	4a12      	ldr	r2, [pc, #72]	; (800781c <MX_USART1_UART_Init+0x50>)
 80077d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80077d6:	4b10      	ldr	r3, [pc, #64]	; (8007818 <MX_USART1_UART_Init+0x4c>)
 80077d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80077dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80077de:	4b0e      	ldr	r3, [pc, #56]	; (8007818 <MX_USART1_UART_Init+0x4c>)
 80077e0:	2200      	movs	r2, #0
 80077e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80077e4:	4b0c      	ldr	r3, [pc, #48]	; (8007818 <MX_USART1_UART_Init+0x4c>)
 80077e6:	2200      	movs	r2, #0
 80077e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80077ea:	4b0b      	ldr	r3, [pc, #44]	; (8007818 <MX_USART1_UART_Init+0x4c>)
 80077ec:	2200      	movs	r2, #0
 80077ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80077f0:	4b09      	ldr	r3, [pc, #36]	; (8007818 <MX_USART1_UART_Init+0x4c>)
 80077f2:	220c      	movs	r2, #12
 80077f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80077f6:	4b08      	ldr	r3, [pc, #32]	; (8007818 <MX_USART1_UART_Init+0x4c>)
 80077f8:	2200      	movs	r2, #0
 80077fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80077fc:	4b06      	ldr	r3, [pc, #24]	; (8007818 <MX_USART1_UART_Init+0x4c>)
 80077fe:	2200      	movs	r2, #0
 8007800:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007802:	4805      	ldr	r0, [pc, #20]	; (8007818 <MX_USART1_UART_Init+0x4c>)
 8007804:	f003 fb90 	bl	800af28 <HAL_UART_Init>
 8007808:	4603      	mov	r3, r0
 800780a:	2b00      	cmp	r3, #0
 800780c:	d001      	beq.n	8007812 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800780e:	f000 f8b1 	bl	8007974 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007812:	bf00      	nop
 8007814:	bd80      	pop	{r7, pc}
 8007816:	bf00      	nop
 8007818:	20000d7c 	.word	0x20000d7c
 800781c:	40013800 	.word	0x40013800

08007820 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b088      	sub	sp, #32
 8007824:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007826:	f107 0310 	add.w	r3, r7, #16
 800782a:	2200      	movs	r2, #0
 800782c:	601a      	str	r2, [r3, #0]
 800782e:	605a      	str	r2, [r3, #4]
 8007830:	609a      	str	r2, [r3, #8]
 8007832:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007834:	4b4b      	ldr	r3, [pc, #300]	; (8007964 <MX_GPIO_Init+0x144>)
 8007836:	699b      	ldr	r3, [r3, #24]
 8007838:	4a4a      	ldr	r2, [pc, #296]	; (8007964 <MX_GPIO_Init+0x144>)
 800783a:	f043 0310 	orr.w	r3, r3, #16
 800783e:	6193      	str	r3, [r2, #24]
 8007840:	4b48      	ldr	r3, [pc, #288]	; (8007964 <MX_GPIO_Init+0x144>)
 8007842:	699b      	ldr	r3, [r3, #24]
 8007844:	f003 0310 	and.w	r3, r3, #16
 8007848:	60fb      	str	r3, [r7, #12]
 800784a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800784c:	4b45      	ldr	r3, [pc, #276]	; (8007964 <MX_GPIO_Init+0x144>)
 800784e:	699b      	ldr	r3, [r3, #24]
 8007850:	4a44      	ldr	r2, [pc, #272]	; (8007964 <MX_GPIO_Init+0x144>)
 8007852:	f043 0320 	orr.w	r3, r3, #32
 8007856:	6193      	str	r3, [r2, #24]
 8007858:	4b42      	ldr	r3, [pc, #264]	; (8007964 <MX_GPIO_Init+0x144>)
 800785a:	699b      	ldr	r3, [r3, #24]
 800785c:	f003 0320 	and.w	r3, r3, #32
 8007860:	60bb      	str	r3, [r7, #8]
 8007862:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007864:	4b3f      	ldr	r3, [pc, #252]	; (8007964 <MX_GPIO_Init+0x144>)
 8007866:	699b      	ldr	r3, [r3, #24]
 8007868:	4a3e      	ldr	r2, [pc, #248]	; (8007964 <MX_GPIO_Init+0x144>)
 800786a:	f043 0304 	orr.w	r3, r3, #4
 800786e:	6193      	str	r3, [r2, #24]
 8007870:	4b3c      	ldr	r3, [pc, #240]	; (8007964 <MX_GPIO_Init+0x144>)
 8007872:	699b      	ldr	r3, [r3, #24]
 8007874:	f003 0304 	and.w	r3, r3, #4
 8007878:	607b      	str	r3, [r7, #4]
 800787a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800787c:	4b39      	ldr	r3, [pc, #228]	; (8007964 <MX_GPIO_Init+0x144>)
 800787e:	699b      	ldr	r3, [r3, #24]
 8007880:	4a38      	ldr	r2, [pc, #224]	; (8007964 <MX_GPIO_Init+0x144>)
 8007882:	f043 0308 	orr.w	r3, r3, #8
 8007886:	6193      	str	r3, [r2, #24]
 8007888:	4b36      	ldr	r3, [pc, #216]	; (8007964 <MX_GPIO_Init+0x144>)
 800788a:	699b      	ldr	r3, [r3, #24]
 800788c:	f003 0308 	and.w	r3, r3, #8
 8007890:	603b      	str	r3, [r7, #0]
 8007892:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin, GPIO_PIN_RESET);
 8007894:	2200      	movs	r2, #0
 8007896:	21f0      	movs	r1, #240	; 0xf0
 8007898:	4833      	ldr	r0, [pc, #204]	; (8007968 <MX_GPIO_Init+0x148>)
 800789a:	f001 f8b0 	bl	80089fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin, GPIO_PIN_RESET);
 800789e:	2200      	movs	r2, #0
 80078a0:	f241 0130 	movw	r1, #4144	; 0x1030
 80078a4:	4831      	ldr	r0, [pc, #196]	; (800796c <MX_GPIO_Init+0x14c>)
 80078a6:	f001 f8aa 	bl	80089fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 80078aa:	2200      	movs	r2, #0
 80078ac:	f640 4107 	movw	r1, #3079	; 0xc07
 80078b0:	482f      	ldr	r0, [pc, #188]	; (8007970 <MX_GPIO_Init+0x150>)
 80078b2:	f001 f8a4 	bl	80089fe <HAL_GPIO_WritePin>

  /*Configure GPIO pins : yukariYavaslamaLimitIn_Pin yavaslamaLimitIn_Pin basincSalteriIn_Pin emniyetCercevesiIn_Pin
                           ustLimitIn_Pin altLimitIn_Pin butonGeriIn_Pin devAsagiStartIn_Pin
                           kapi1AcButonIn_Pin kapi2AcButonIn_Pin kapiTablaAcButonIn_Pin devirmeYukariLimitIn_Pin
                           devirmeAsagiLimitIn_Pin */
  GPIO_InitStruct.Pin = yukariYavaslamaLimitIn_Pin|yavaslamaLimitIn_Pin|basincSalteriIn_Pin|emniyetCercevesiIn_Pin
 80078b6:	f64e 73cf 	movw	r3, #61391	; 0xefcf
 80078ba:	613b      	str	r3, [r7, #16]
                          |ustLimitIn_Pin|altLimitIn_Pin|butonGeriIn_Pin|devAsagiStartIn_Pin
                          |kapi1AcButonIn_Pin|kapi2AcButonIn_Pin|kapiTablaAcButonIn_Pin|devirmeYukariLimitIn_Pin
                          |devirmeAsagiLimitIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80078bc:	2300      	movs	r3, #0
 80078be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078c0:	2300      	movs	r3, #0
 80078c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80078c4:	f107 0310 	add.w	r3, r7, #16
 80078c8:	4619      	mov	r1, r3
 80078ca:	4828      	ldr	r0, [pc, #160]	; (800796c <MX_GPIO_Init+0x14c>)
 80078cc:	f000 fe20 	bl	8008510 <HAL_GPIO_Init>

  /*Configure GPIO pins : butonIleriIn_Pin butonYukariIn_Pin butonAsagiIn_Pin butonEnterIn_Pin
                           tablaKapiSiviciIn_Pin kapiSiviciIn_Pin */
  GPIO_InitStruct.Pin = butonIleriIn_Pin|butonYukariIn_Pin|butonAsagiIn_Pin|butonEnterIn_Pin
 80078d0:	f248 130f 	movw	r3, #33039	; 0x810f
 80078d4:	613b      	str	r3, [r7, #16]
                          |tablaKapiSiviciIn_Pin|kapiSiviciIn_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80078d6:	2300      	movs	r3, #0
 80078d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078da:	2300      	movs	r3, #0
 80078dc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078de:	f107 0310 	add.w	r3, r7, #16
 80078e2:	4619      	mov	r1, r3
 80078e4:	4820      	ldr	r0, [pc, #128]	; (8007968 <MX_GPIO_Init+0x148>)
 80078e6:	f000 fe13 	bl	8008510 <HAL_GPIO_Init>

  /*Configure GPIO pins : buzzerOut_Pin tablaKapiOut_Pin kapi2Out_Pin kapi1Out_Pin */
  GPIO_InitStruct.Pin = buzzerOut_Pin|tablaKapiOut_Pin|kapi2Out_Pin|kapi1Out_Pin;
 80078ea:	23f0      	movs	r3, #240	; 0xf0
 80078ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80078ee:	2301      	movs	r3, #1
 80078f0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078f2:	2300      	movs	r3, #0
 80078f4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80078f6:	2302      	movs	r3, #2
 80078f8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80078fa:	f107 0310 	add.w	r3, r7, #16
 80078fe:	4619      	mov	r1, r3
 8007900:	4819      	ldr	r0, [pc, #100]	; (8007968 <MX_GPIO_Init+0x148>)
 8007902:	f000 fe05 	bl	8008510 <HAL_GPIO_Init>

  /*Configure GPIO pins : devirmeAsagiGeriOut_Pin devirmeYukariIleriOut_Pin cycleLed_Pin */
  GPIO_InitStruct.Pin = devirmeAsagiGeriOut_Pin|devirmeYukariIleriOut_Pin|cycleLed_Pin;
 8007906:	f241 0330 	movw	r3, #4144	; 0x1030
 800790a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800790c:	2301      	movs	r3, #1
 800790e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007910:	2300      	movs	r3, #0
 8007912:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007914:	2302      	movs	r3, #2
 8007916:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007918:	f107 0310 	add.w	r3, r7, #16
 800791c:	4619      	mov	r1, r3
 800791e:	4813      	ldr	r0, [pc, #76]	; (800796c <MX_GPIO_Init+0x14c>)
 8007920:	f000 fdf6 	bl	8008510 <HAL_GPIO_Init>

  /*Configure GPIO pins : yavaslamaValfOut_Pin asagiValfOut_Pin yukariValfOut_Pin motorIkinciHizOut_Pin
                           motorOut_Pin */
  GPIO_InitStruct.Pin = yavaslamaValfOut_Pin|asagiValfOut_Pin|yukariValfOut_Pin|motorIkinciHizOut_Pin
 8007924:	f640 4307 	movw	r3, #3079	; 0xc07
 8007928:	613b      	str	r3, [r7, #16]
                          |motorOut_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800792a:	2301      	movs	r3, #1
 800792c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800792e:	2300      	movs	r3, #0
 8007930:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007932:	2302      	movs	r3, #2
 8007934:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007936:	f107 0310 	add.w	r3, r7, #16
 800793a:	4619      	mov	r1, r3
 800793c:	480c      	ldr	r0, [pc, #48]	; (8007970 <MX_GPIO_Init+0x150>)
 800793e:	f000 fde7 	bl	8008510 <HAL_GPIO_Init>

  /*Configure GPIO pins : acilStop1In_Pin yukariStartIn_Pin asagiStartIn_Pin devYukariStartIn_Pin */
  GPIO_InitStruct.Pin = acilStop1In_Pin|yukariStartIn_Pin|asagiStartIn_Pin|devYukariStartIn_Pin;
 8007942:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8007946:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007948:	2300      	movs	r3, #0
 800794a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800794c:	2300      	movs	r3, #0
 800794e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007950:	f107 0310 	add.w	r3, r7, #16
 8007954:	4619      	mov	r1, r3
 8007956:	4806      	ldr	r0, [pc, #24]	; (8007970 <MX_GPIO_Init+0x150>)
 8007958:	f000 fdda 	bl	8008510 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800795c:	bf00      	nop
 800795e:	3720      	adds	r7, #32
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}
 8007964:	40021000 	.word	0x40021000
 8007968:	40010800 	.word	0x40010800
 800796c:	40011000 	.word	0x40011000
 8007970:	40010c00 	.word	0x40010c00

08007974 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007974:	b480      	push	{r7}
 8007976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8007978:	bf00      	nop
 800797a:	46bd      	mov	sp, r7
 800797c:	bc80      	pop	{r7}
 800797e:	4770      	bx	lr

08007980 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007980:	b480      	push	{r7}
 8007982:	b085      	sub	sp, #20
 8007984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8007986:	4b15      	ldr	r3, [pc, #84]	; (80079dc <HAL_MspInit+0x5c>)
 8007988:	699b      	ldr	r3, [r3, #24]
 800798a:	4a14      	ldr	r2, [pc, #80]	; (80079dc <HAL_MspInit+0x5c>)
 800798c:	f043 0301 	orr.w	r3, r3, #1
 8007990:	6193      	str	r3, [r2, #24]
 8007992:	4b12      	ldr	r3, [pc, #72]	; (80079dc <HAL_MspInit+0x5c>)
 8007994:	699b      	ldr	r3, [r3, #24]
 8007996:	f003 0301 	and.w	r3, r3, #1
 800799a:	60bb      	str	r3, [r7, #8]
 800799c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800799e:	4b0f      	ldr	r3, [pc, #60]	; (80079dc <HAL_MspInit+0x5c>)
 80079a0:	69db      	ldr	r3, [r3, #28]
 80079a2:	4a0e      	ldr	r2, [pc, #56]	; (80079dc <HAL_MspInit+0x5c>)
 80079a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079a8:	61d3      	str	r3, [r2, #28]
 80079aa:	4b0c      	ldr	r3, [pc, #48]	; (80079dc <HAL_MspInit+0x5c>)
 80079ac:	69db      	ldr	r3, [r3, #28]
 80079ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079b2:	607b      	str	r3, [r7, #4]
 80079b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80079b6:	4b0a      	ldr	r3, [pc, #40]	; (80079e0 <HAL_MspInit+0x60>)
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	60fb      	str	r3, [r7, #12]
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80079c2:	60fb      	str	r3, [r7, #12]
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80079ca:	60fb      	str	r3, [r7, #12]
 80079cc:	4a04      	ldr	r2, [pc, #16]	; (80079e0 <HAL_MspInit+0x60>)
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80079d2:	bf00      	nop
 80079d4:	3714      	adds	r7, #20
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bc80      	pop	{r7}
 80079da:	4770      	bx	lr
 80079dc:	40021000 	.word	0x40021000
 80079e0:	40010000 	.word	0x40010000

080079e4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80079e4:	b580      	push	{r7, lr}
 80079e6:	b088      	sub	sp, #32
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079ec:	f107 0310 	add.w	r3, r7, #16
 80079f0:	2200      	movs	r2, #0
 80079f2:	601a      	str	r2, [r3, #0]
 80079f4:	605a      	str	r2, [r3, #4]
 80079f6:	609a      	str	r2, [r3, #8]
 80079f8:	60da      	str	r2, [r3, #12]
  if(hcan->Instance==CAN1)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	4a1c      	ldr	r2, [pc, #112]	; (8007a70 <HAL_CAN_MspInit+0x8c>)
 8007a00:	4293      	cmp	r3, r2
 8007a02:	d131      	bne.n	8007a68 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8007a04:	4b1b      	ldr	r3, [pc, #108]	; (8007a74 <HAL_CAN_MspInit+0x90>)
 8007a06:	69db      	ldr	r3, [r3, #28]
 8007a08:	4a1a      	ldr	r2, [pc, #104]	; (8007a74 <HAL_CAN_MspInit+0x90>)
 8007a0a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007a0e:	61d3      	str	r3, [r2, #28]
 8007a10:	4b18      	ldr	r3, [pc, #96]	; (8007a74 <HAL_CAN_MspInit+0x90>)
 8007a12:	69db      	ldr	r3, [r3, #28]
 8007a14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a18:	60fb      	str	r3, [r7, #12]
 8007a1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a1c:	4b15      	ldr	r3, [pc, #84]	; (8007a74 <HAL_CAN_MspInit+0x90>)
 8007a1e:	699b      	ldr	r3, [r3, #24]
 8007a20:	4a14      	ldr	r2, [pc, #80]	; (8007a74 <HAL_CAN_MspInit+0x90>)
 8007a22:	f043 0304 	orr.w	r3, r3, #4
 8007a26:	6193      	str	r3, [r2, #24]
 8007a28:	4b12      	ldr	r3, [pc, #72]	; (8007a74 <HAL_CAN_MspInit+0x90>)
 8007a2a:	699b      	ldr	r3, [r3, #24]
 8007a2c:	f003 0304 	and.w	r3, r3, #4
 8007a30:	60bb      	str	r3, [r7, #8]
 8007a32:	68bb      	ldr	r3, [r7, #8]
    /**CAN GPIO Configuration
    PA11     ------> CAN_RX
    PA12     ------> CAN_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8007a34:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007a38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a42:	f107 0310 	add.w	r3, r7, #16
 8007a46:	4619      	mov	r1, r3
 8007a48:	480b      	ldr	r0, [pc, #44]	; (8007a78 <HAL_CAN_MspInit+0x94>)
 8007a4a:	f000 fd61 	bl	8008510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8007a4e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007a52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a54:	2302      	movs	r3, #2
 8007a56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007a58:	2303      	movs	r3, #3
 8007a5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007a5c:	f107 0310 	add.w	r3, r7, #16
 8007a60:	4619      	mov	r1, r3
 8007a62:	4805      	ldr	r0, [pc, #20]	; (8007a78 <HAL_CAN_MspInit+0x94>)
 8007a64:	f000 fd54 	bl	8008510 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8007a68:	bf00      	nop
 8007a6a:	3720      	adds	r7, #32
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	bd80      	pop	{r7, pc}
 8007a70:	40006400 	.word	0x40006400
 8007a74:	40021000 	.word	0x40021000
 8007a78:	40010800 	.word	0x40010800

08007a7c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b088      	sub	sp, #32
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a84:	f107 0310 	add.w	r3, r7, #16
 8007a88:	2200      	movs	r2, #0
 8007a8a:	601a      	str	r2, [r3, #0]
 8007a8c:	605a      	str	r2, [r3, #4]
 8007a8e:	609a      	str	r2, [r3, #8]
 8007a90:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	4a15      	ldr	r2, [pc, #84]	; (8007aec <HAL_I2C_MspInit+0x70>)
 8007a98:	4293      	cmp	r3, r2
 8007a9a:	d123      	bne.n	8007ae4 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007a9c:	4b14      	ldr	r3, [pc, #80]	; (8007af0 <HAL_I2C_MspInit+0x74>)
 8007a9e:	699b      	ldr	r3, [r3, #24]
 8007aa0:	4a13      	ldr	r2, [pc, #76]	; (8007af0 <HAL_I2C_MspInit+0x74>)
 8007aa2:	f043 0308 	orr.w	r3, r3, #8
 8007aa6:	6193      	str	r3, [r2, #24]
 8007aa8:	4b11      	ldr	r3, [pc, #68]	; (8007af0 <HAL_I2C_MspInit+0x74>)
 8007aaa:	699b      	ldr	r3, [r3, #24]
 8007aac:	f003 0308 	and.w	r3, r3, #8
 8007ab0:	60fb      	str	r3, [r7, #12]
 8007ab2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007ab4:	23c0      	movs	r3, #192	; 0xc0
 8007ab6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007ab8:	2312      	movs	r3, #18
 8007aba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007abc:	2303      	movs	r3, #3
 8007abe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007ac0:	f107 0310 	add.w	r3, r7, #16
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	480b      	ldr	r0, [pc, #44]	; (8007af4 <HAL_I2C_MspInit+0x78>)
 8007ac8:	f000 fd22 	bl	8008510 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8007acc:	4b08      	ldr	r3, [pc, #32]	; (8007af0 <HAL_I2C_MspInit+0x74>)
 8007ace:	69db      	ldr	r3, [r3, #28]
 8007ad0:	4a07      	ldr	r2, [pc, #28]	; (8007af0 <HAL_I2C_MspInit+0x74>)
 8007ad2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007ad6:	61d3      	str	r3, [r2, #28]
 8007ad8:	4b05      	ldr	r3, [pc, #20]	; (8007af0 <HAL_I2C_MspInit+0x74>)
 8007ada:	69db      	ldr	r3, [r3, #28]
 8007adc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007ae0:	60bb      	str	r3, [r7, #8]
 8007ae2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8007ae4:	bf00      	nop
 8007ae6:	3720      	adds	r7, #32
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}
 8007aec:	40005400 	.word	0x40005400
 8007af0:	40021000 	.word	0x40021000
 8007af4:	40010c00 	.word	0x40010c00

08007af8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b082      	sub	sp, #8
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	4a0a      	ldr	r2, [pc, #40]	; (8007b30 <HAL_I2C_MspDeInit+0x38>)
 8007b06:	4293      	cmp	r3, r2
 8007b08:	d10d      	bne.n	8007b26 <HAL_I2C_MspDeInit+0x2e>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8007b0a:	4b0a      	ldr	r3, [pc, #40]	; (8007b34 <HAL_I2C_MspDeInit+0x3c>)
 8007b0c:	69db      	ldr	r3, [r3, #28]
 8007b0e:	4a09      	ldr	r2, [pc, #36]	; (8007b34 <HAL_I2C_MspDeInit+0x3c>)
 8007b10:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007b14:	61d3      	str	r3, [r2, #28]

    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_6);
 8007b16:	2140      	movs	r1, #64	; 0x40
 8007b18:	4807      	ldr	r0, [pc, #28]	; (8007b38 <HAL_I2C_MspDeInit+0x40>)
 8007b1a:	f000 fe8d 	bl	8008838 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_7);
 8007b1e:	2180      	movs	r1, #128	; 0x80
 8007b20:	4805      	ldr	r0, [pc, #20]	; (8007b38 <HAL_I2C_MspDeInit+0x40>)
 8007b22:	f000 fe89 	bl	8008838 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C1_MspDeInit 1 */

  /* USER CODE END I2C1_MspDeInit 1 */
  }

}
 8007b26:	bf00      	nop
 8007b28:	3708      	adds	r7, #8
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}
 8007b2e:	bf00      	nop
 8007b30:	40005400 	.word	0x40005400
 8007b34:	40021000 	.word	0x40021000
 8007b38:	40010c00 	.word	0x40010c00

08007b3c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007b3c:	b580      	push	{r7, lr}
 8007b3e:	b084      	sub	sp, #16
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	4a0d      	ldr	r2, [pc, #52]	; (8007b80 <HAL_TIM_Base_MspInit+0x44>)
 8007b4a:	4293      	cmp	r3, r2
 8007b4c:	d113      	bne.n	8007b76 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8007b4e:	4b0d      	ldr	r3, [pc, #52]	; (8007b84 <HAL_TIM_Base_MspInit+0x48>)
 8007b50:	699b      	ldr	r3, [r3, #24]
 8007b52:	4a0c      	ldr	r2, [pc, #48]	; (8007b84 <HAL_TIM_Base_MspInit+0x48>)
 8007b54:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007b58:	6193      	str	r3, [r2, #24]
 8007b5a:	4b0a      	ldr	r3, [pc, #40]	; (8007b84 <HAL_TIM_Base_MspInit+0x48>)
 8007b5c:	699b      	ldr	r3, [r3, #24]
 8007b5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b62:	60fb      	str	r3, [r7, #12]
 8007b64:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8007b66:	2200      	movs	r2, #0
 8007b68:	2100      	movs	r1, #0
 8007b6a:	2019      	movs	r0, #25
 8007b6c:	f000 fb57 	bl	800821e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8007b70:	2019      	movs	r0, #25
 8007b72:	f000 fb70 	bl	8008256 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8007b76:	bf00      	nop
 8007b78:	3710      	adds	r7, #16
 8007b7a:	46bd      	mov	sp, r7
 8007b7c:	bd80      	pop	{r7, pc}
 8007b7e:	bf00      	nop
 8007b80:	40012c00 	.word	0x40012c00
 8007b84:	40021000 	.word	0x40021000

08007b88 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b088      	sub	sp, #32
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b90:	f107 0310 	add.w	r3, r7, #16
 8007b94:	2200      	movs	r2, #0
 8007b96:	601a      	str	r2, [r3, #0]
 8007b98:	605a      	str	r2, [r3, #4]
 8007b9a:	609a      	str	r2, [r3, #8]
 8007b9c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a20      	ldr	r2, [pc, #128]	; (8007c24 <HAL_UART_MspInit+0x9c>)
 8007ba4:	4293      	cmp	r3, r2
 8007ba6:	d139      	bne.n	8007c1c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007ba8:	4b1f      	ldr	r3, [pc, #124]	; (8007c28 <HAL_UART_MspInit+0xa0>)
 8007baa:	699b      	ldr	r3, [r3, #24]
 8007bac:	4a1e      	ldr	r2, [pc, #120]	; (8007c28 <HAL_UART_MspInit+0xa0>)
 8007bae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007bb2:	6193      	str	r3, [r2, #24]
 8007bb4:	4b1c      	ldr	r3, [pc, #112]	; (8007c28 <HAL_UART_MspInit+0xa0>)
 8007bb6:	699b      	ldr	r3, [r3, #24]
 8007bb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007bbc:	60fb      	str	r3, [r7, #12]
 8007bbe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007bc0:	4b19      	ldr	r3, [pc, #100]	; (8007c28 <HAL_UART_MspInit+0xa0>)
 8007bc2:	699b      	ldr	r3, [r3, #24]
 8007bc4:	4a18      	ldr	r2, [pc, #96]	; (8007c28 <HAL_UART_MspInit+0xa0>)
 8007bc6:	f043 0304 	orr.w	r3, r3, #4
 8007bca:	6193      	str	r3, [r2, #24]
 8007bcc:	4b16      	ldr	r3, [pc, #88]	; (8007c28 <HAL_UART_MspInit+0xa0>)
 8007bce:	699b      	ldr	r3, [r3, #24]
 8007bd0:	f003 0304 	and.w	r3, r3, #4
 8007bd4:	60bb      	str	r3, [r7, #8]
 8007bd6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007bd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007bdc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007bde:	2302      	movs	r3, #2
 8007be0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007be2:	2303      	movs	r3, #3
 8007be4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007be6:	f107 0310 	add.w	r3, r7, #16
 8007bea:	4619      	mov	r1, r3
 8007bec:	480f      	ldr	r0, [pc, #60]	; (8007c2c <HAL_UART_MspInit+0xa4>)
 8007bee:	f000 fc8f 	bl	8008510 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007bf2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007bf6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c00:	f107 0310 	add.w	r3, r7, #16
 8007c04:	4619      	mov	r1, r3
 8007c06:	4809      	ldr	r0, [pc, #36]	; (8007c2c <HAL_UART_MspInit+0xa4>)
 8007c08:	f000 fc82 	bl	8008510 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	2100      	movs	r1, #0
 8007c10:	2025      	movs	r0, #37	; 0x25
 8007c12:	f000 fb04 	bl	800821e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8007c16:	2025      	movs	r0, #37	; 0x25
 8007c18:	f000 fb1d 	bl	8008256 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8007c1c:	bf00      	nop
 8007c1e:	3720      	adds	r7, #32
 8007c20:	46bd      	mov	sp, r7
 8007c22:	bd80      	pop	{r7, pc}
 8007c24:	40013800 	.word	0x40013800
 8007c28:	40021000 	.word	0x40021000
 8007c2c:	40010800 	.word	0x40010800

08007c30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007c30:	b480      	push	{r7}
 8007c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007c34:	e7fe      	b.n	8007c34 <NMI_Handler+0x4>

08007c36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007c36:	b480      	push	{r7}
 8007c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007c3a:	e7fe      	b.n	8007c3a <HardFault_Handler+0x4>

08007c3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007c3c:	b480      	push	{r7}
 8007c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007c40:	e7fe      	b.n	8007c40 <MemManage_Handler+0x4>

08007c42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007c42:	b480      	push	{r7}
 8007c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007c46:	e7fe      	b.n	8007c46 <BusFault_Handler+0x4>

08007c48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007c4c:	e7fe      	b.n	8007c4c <UsageFault_Handler+0x4>

08007c4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007c4e:	b480      	push	{r7}
 8007c50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007c52:	bf00      	nop
 8007c54:	46bd      	mov	sp, r7
 8007c56:	bc80      	pop	{r7}
 8007c58:	4770      	bx	lr

08007c5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007c5a:	b480      	push	{r7}
 8007c5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007c5e:	bf00      	nop
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bc80      	pop	{r7}
 8007c64:	4770      	bx	lr

08007c66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007c66:	b480      	push	{r7}
 8007c68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007c6a:	bf00      	nop
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bc80      	pop	{r7}
 8007c70:	4770      	bx	lr

08007c72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007c72:	b580      	push	{r7, lr}
 8007c74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007c76:	f000 f8bf 	bl	8007df8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007c7a:	bf00      	nop
 8007c7c:	bd80      	pop	{r7, pc}
	...

08007c80 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8007c84:	4802      	ldr	r0, [pc, #8]	; (8007c90 <TIM1_UP_IRQHandler+0x10>)
 8007c86:	f002 fdcd 	bl	800a824 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8007c8a:	bf00      	nop
 8007c8c:	bd80      	pop	{r7, pc}
 8007c8e:	bf00      	nop
 8007c90:	20000d34 	.word	0x20000d34

08007c94 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8007c94:	b580      	push	{r7, lr}
 8007c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8007c98:	4802      	ldr	r0, [pc, #8]	; (8007ca4 <USART1_IRQHandler+0x10>)
 8007c9a:	f003 f995 	bl	800afc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8007c9e:	bf00      	nop
 8007ca0:	bd80      	pop	{r7, pc}
 8007ca2:	bf00      	nop
 8007ca4:	20000d7c 	.word	0x20000d7c

08007ca8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b086      	sub	sp, #24
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007cb0:	4a14      	ldr	r2, [pc, #80]	; (8007d04 <_sbrk+0x5c>)
 8007cb2:	4b15      	ldr	r3, [pc, #84]	; (8007d08 <_sbrk+0x60>)
 8007cb4:	1ad3      	subs	r3, r2, r3
 8007cb6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007cb8:	697b      	ldr	r3, [r7, #20]
 8007cba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007cbc:	4b13      	ldr	r3, [pc, #76]	; (8007d0c <_sbrk+0x64>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d102      	bne.n	8007cca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007cc4:	4b11      	ldr	r3, [pc, #68]	; (8007d0c <_sbrk+0x64>)
 8007cc6:	4a12      	ldr	r2, [pc, #72]	; (8007d10 <_sbrk+0x68>)
 8007cc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007cca:	4b10      	ldr	r3, [pc, #64]	; (8007d0c <_sbrk+0x64>)
 8007ccc:	681a      	ldr	r2, [r3, #0]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	4413      	add	r3, r2
 8007cd2:	693a      	ldr	r2, [r7, #16]
 8007cd4:	429a      	cmp	r2, r3
 8007cd6:	d207      	bcs.n	8007ce8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007cd8:	f003 ffa0 	bl	800bc1c <__errno>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	220c      	movs	r2, #12
 8007ce0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8007ce6:	e009      	b.n	8007cfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007ce8:	4b08      	ldr	r3, [pc, #32]	; (8007d0c <_sbrk+0x64>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007cee:	4b07      	ldr	r3, [pc, #28]	; (8007d0c <_sbrk+0x64>)
 8007cf0:	681a      	ldr	r2, [r3, #0]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	4413      	add	r3, r2
 8007cf6:	4a05      	ldr	r2, [pc, #20]	; (8007d0c <_sbrk+0x64>)
 8007cf8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
}
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	3718      	adds	r7, #24
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}
 8007d04:	2000c000 	.word	0x2000c000
 8007d08:	00000400 	.word	0x00000400
 8007d0c:	20000dc4 	.word	0x20000dc4
 8007d10:	20000f18 	.word	0x20000f18

08007d14 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007d14:	b480      	push	{r7}
 8007d16:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007d18:	bf00      	nop
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bc80      	pop	{r7}
 8007d1e:	4770      	bx	lr

08007d20 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8007d20:	480c      	ldr	r0, [pc, #48]	; (8007d54 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8007d22:	490d      	ldr	r1, [pc, #52]	; (8007d58 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007d24:	4a0d      	ldr	r2, [pc, #52]	; (8007d5c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8007d26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007d28:	e002      	b.n	8007d30 <LoopCopyDataInit>

08007d2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007d2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007d2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007d2e:	3304      	adds	r3, #4

08007d30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007d30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007d32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007d34:	d3f9      	bcc.n	8007d2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8007d36:	4a0a      	ldr	r2, [pc, #40]	; (8007d60 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8007d38:	4c0a      	ldr	r4, [pc, #40]	; (8007d64 <LoopFillZerobss+0x22>)
  movs r3, #0
 8007d3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007d3c:	e001      	b.n	8007d42 <LoopFillZerobss>

08007d3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007d3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007d40:	3204      	adds	r2, #4

08007d42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007d42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007d44:	d3fb      	bcc.n	8007d3e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007d46:	f7ff ffe5 	bl	8007d14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007d4a:	f003 ff6d 	bl	800bc28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8007d4e:	f7ff fb9b 	bl	8007488 <main>
  bx lr
 8007d52:	4770      	bx	lr
  ldr r0, =_sdata
 8007d54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8007d58:	200009a0 	.word	0x200009a0
  ldr r2, =_sidata
 8007d5c:	0800d17c 	.word	0x0800d17c
  ldr r2, =_sbss
 8007d60:	200009a0 	.word	0x200009a0
  ldr r4, =_ebss
 8007d64:	20000f14 	.word	0x20000f14

08007d68 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8007d68:	e7fe      	b.n	8007d68 <ADC1_2_IRQHandler>
	...

08007d6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007d70:	4b08      	ldr	r3, [pc, #32]	; (8007d94 <HAL_Init+0x28>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a07      	ldr	r2, [pc, #28]	; (8007d94 <HAL_Init+0x28>)
 8007d76:	f043 0310 	orr.w	r3, r3, #16
 8007d7a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007d7c:	2003      	movs	r0, #3
 8007d7e:	f000 fa43 	bl	8008208 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007d82:	200f      	movs	r0, #15
 8007d84:	f000 f808 	bl	8007d98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007d88:	f7ff fdfa 	bl	8007980 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007d8c:	2300      	movs	r3, #0
}
 8007d8e:	4618      	mov	r0, r3
 8007d90:	bd80      	pop	{r7, pc}
 8007d92:	bf00      	nop
 8007d94:	40022000 	.word	0x40022000

08007d98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007da0:	4b12      	ldr	r3, [pc, #72]	; (8007dec <HAL_InitTick+0x54>)
 8007da2:	681a      	ldr	r2, [r3, #0]
 8007da4:	4b12      	ldr	r3, [pc, #72]	; (8007df0 <HAL_InitTick+0x58>)
 8007da6:	781b      	ldrb	r3, [r3, #0]
 8007da8:	4619      	mov	r1, r3
 8007daa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007dae:	fbb3 f3f1 	udiv	r3, r3, r1
 8007db2:	fbb2 f3f3 	udiv	r3, r2, r3
 8007db6:	4618      	mov	r0, r3
 8007db8:	f000 fa5b 	bl	8008272 <HAL_SYSTICK_Config>
 8007dbc:	4603      	mov	r3, r0
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d001      	beq.n	8007dc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	e00e      	b.n	8007de4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	2b0f      	cmp	r3, #15
 8007dca:	d80a      	bhi.n	8007de2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007dcc:	2200      	movs	r2, #0
 8007dce:	6879      	ldr	r1, [r7, #4]
 8007dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8007dd4:	f000 fa23 	bl	800821e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007dd8:	4a06      	ldr	r2, [pc, #24]	; (8007df4 <HAL_InitTick+0x5c>)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007dde:	2300      	movs	r3, #0
 8007de0:	e000      	b.n	8007de4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
}
 8007de4:	4618      	mov	r0, r3
 8007de6:	3708      	adds	r7, #8
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}
 8007dec:	20000944 	.word	0x20000944
 8007df0:	2000094c 	.word	0x2000094c
 8007df4:	20000948 	.word	0x20000948

08007df8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007dfc:	4b05      	ldr	r3, [pc, #20]	; (8007e14 <HAL_IncTick+0x1c>)
 8007dfe:	781b      	ldrb	r3, [r3, #0]
 8007e00:	461a      	mov	r2, r3
 8007e02:	4b05      	ldr	r3, [pc, #20]	; (8007e18 <HAL_IncTick+0x20>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4413      	add	r3, r2
 8007e08:	4a03      	ldr	r2, [pc, #12]	; (8007e18 <HAL_IncTick+0x20>)
 8007e0a:	6013      	str	r3, [r2, #0]
}
 8007e0c:	bf00      	nop
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bc80      	pop	{r7}
 8007e12:	4770      	bx	lr
 8007e14:	2000094c 	.word	0x2000094c
 8007e18:	20000dc8 	.word	0x20000dc8

08007e1c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007e1c:	b480      	push	{r7}
 8007e1e:	af00      	add	r7, sp, #0
  return uwTick;
 8007e20:	4b02      	ldr	r3, [pc, #8]	; (8007e2c <HAL_GetTick+0x10>)
 8007e22:	681b      	ldr	r3, [r3, #0]
}
 8007e24:	4618      	mov	r0, r3
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bc80      	pop	{r7}
 8007e2a:	4770      	bx	lr
 8007e2c:	20000dc8 	.word	0x20000dc8

08007e30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b084      	sub	sp, #16
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007e38:	f7ff fff0 	bl	8007e1c <HAL_GetTick>
 8007e3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e48:	d005      	beq.n	8007e56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007e4a:	4b0a      	ldr	r3, [pc, #40]	; (8007e74 <HAL_Delay+0x44>)
 8007e4c:	781b      	ldrb	r3, [r3, #0]
 8007e4e:	461a      	mov	r2, r3
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	4413      	add	r3, r2
 8007e54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007e56:	bf00      	nop
 8007e58:	f7ff ffe0 	bl	8007e1c <HAL_GetTick>
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	1ad3      	subs	r3, r2, r3
 8007e62:	68fa      	ldr	r2, [r7, #12]
 8007e64:	429a      	cmp	r2, r3
 8007e66:	d8f7      	bhi.n	8007e58 <HAL_Delay+0x28>
  {
  }
}
 8007e68:	bf00      	nop
 8007e6a:	bf00      	nop
 8007e6c:	3710      	adds	r7, #16
 8007e6e:	46bd      	mov	sp, r7
 8007e70:	bd80      	pop	{r7, pc}
 8007e72:	bf00      	nop
 8007e74:	2000094c 	.word	0x2000094c

08007e78 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b084      	sub	sp, #16
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d101      	bne.n	8007e8a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8007e86:	2301      	movs	r3, #1
 8007e88:	e0ed      	b.n	8008066 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007e90:	b2db      	uxtb	r3, r3
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d102      	bne.n	8007e9c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8007e96:	6878      	ldr	r0, [r7, #4]
 8007e98:	f7ff fda4 	bl	80079e4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	681a      	ldr	r2, [r3, #0]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	f042 0201 	orr.w	r2, r2, #1
 8007eaa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007eac:	f7ff ffb6 	bl	8007e1c <HAL_GetTick>
 8007eb0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007eb2:	e012      	b.n	8007eda <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007eb4:	f7ff ffb2 	bl	8007e1c <HAL_GetTick>
 8007eb8:	4602      	mov	r2, r0
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	1ad3      	subs	r3, r2, r3
 8007ebe:	2b0a      	cmp	r3, #10
 8007ec0:	d90b      	bls.n	8007eda <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2205      	movs	r2, #5
 8007ed2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	e0c5      	b.n	8008066 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	f003 0301 	and.w	r3, r3, #1
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d0e5      	beq.n	8007eb4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f022 0202 	bic.w	r2, r2, #2
 8007ef6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007ef8:	f7ff ff90 	bl	8007e1c <HAL_GetTick>
 8007efc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007efe:	e012      	b.n	8007f26 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007f00:	f7ff ff8c 	bl	8007e1c <HAL_GetTick>
 8007f04:	4602      	mov	r2, r0
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	1ad3      	subs	r3, r2, r3
 8007f0a:	2b0a      	cmp	r3, #10
 8007f0c:	d90b      	bls.n	8007f26 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f12:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2205      	movs	r2, #5
 8007f1e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007f22:	2301      	movs	r3, #1
 8007f24:	e09f      	b.n	8008066 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	f003 0302 	and.w	r3, r3, #2
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d1e5      	bne.n	8007f00 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	7e1b      	ldrb	r3, [r3, #24]
 8007f38:	2b01      	cmp	r3, #1
 8007f3a:	d108      	bne.n	8007f4e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	681a      	ldr	r2, [r3, #0]
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007f4a:	601a      	str	r2, [r3, #0]
 8007f4c:	e007      	b.n	8007f5e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	681a      	ldr	r2, [r3, #0]
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007f5c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	7e5b      	ldrb	r3, [r3, #25]
 8007f62:	2b01      	cmp	r3, #1
 8007f64:	d108      	bne.n	8007f78 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	681a      	ldr	r2, [r3, #0]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007f74:	601a      	str	r2, [r3, #0]
 8007f76:	e007      	b.n	8007f88 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	681a      	ldr	r2, [r3, #0]
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007f86:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	7e9b      	ldrb	r3, [r3, #26]
 8007f8c:	2b01      	cmp	r3, #1
 8007f8e:	d108      	bne.n	8007fa2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	681a      	ldr	r2, [r3, #0]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f042 0220 	orr.w	r2, r2, #32
 8007f9e:	601a      	str	r2, [r3, #0]
 8007fa0:	e007      	b.n	8007fb2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f022 0220 	bic.w	r2, r2, #32
 8007fb0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	7edb      	ldrb	r3, [r3, #27]
 8007fb6:	2b01      	cmp	r3, #1
 8007fb8:	d108      	bne.n	8007fcc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f022 0210 	bic.w	r2, r2, #16
 8007fc8:	601a      	str	r2, [r3, #0]
 8007fca:	e007      	b.n	8007fdc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	681a      	ldr	r2, [r3, #0]
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	f042 0210 	orr.w	r2, r2, #16
 8007fda:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	7f1b      	ldrb	r3, [r3, #28]
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d108      	bne.n	8007ff6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	681a      	ldr	r2, [r3, #0]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f042 0208 	orr.w	r2, r2, #8
 8007ff2:	601a      	str	r2, [r3, #0]
 8007ff4:	e007      	b.n	8008006 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f022 0208 	bic.w	r2, r2, #8
 8008004:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	7f5b      	ldrb	r3, [r3, #29]
 800800a:	2b01      	cmp	r3, #1
 800800c:	d108      	bne.n	8008020 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f042 0204 	orr.w	r2, r2, #4
 800801c:	601a      	str	r2, [r3, #0]
 800801e:	e007      	b.n	8008030 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	681a      	ldr	r2, [r3, #0]
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f022 0204 	bic.w	r2, r2, #4
 800802e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	689a      	ldr	r2, [r3, #8]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	68db      	ldr	r3, [r3, #12]
 8008038:	431a      	orrs	r2, r3
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	691b      	ldr	r3, [r3, #16]
 800803e:	431a      	orrs	r2, r3
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	695b      	ldr	r3, [r3, #20]
 8008044:	ea42 0103 	orr.w	r1, r2, r3
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	685b      	ldr	r3, [r3, #4]
 800804c:	1e5a      	subs	r2, r3, #1
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	430a      	orrs	r2, r1
 8008054:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	2200      	movs	r2, #0
 800805a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2201      	movs	r2, #1
 8008060:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8008064:	2300      	movs	r3, #0
}
 8008066:	4618      	mov	r0, r3
 8008068:	3710      	adds	r7, #16
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
	...

08008070 <__NVIC_SetPriorityGrouping>:
{
 8008070:	b480      	push	{r7}
 8008072:	b085      	sub	sp, #20
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	f003 0307 	and.w	r3, r3, #7
 800807e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008080:	4b0c      	ldr	r3, [pc, #48]	; (80080b4 <__NVIC_SetPriorityGrouping+0x44>)
 8008082:	68db      	ldr	r3, [r3, #12]
 8008084:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8008086:	68ba      	ldr	r2, [r7, #8]
 8008088:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800808c:	4013      	ands	r3, r2
 800808e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8008098:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800809c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80080a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80080a2:	4a04      	ldr	r2, [pc, #16]	; (80080b4 <__NVIC_SetPriorityGrouping+0x44>)
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	60d3      	str	r3, [r2, #12]
}
 80080a8:	bf00      	nop
 80080aa:	3714      	adds	r7, #20
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bc80      	pop	{r7}
 80080b0:	4770      	bx	lr
 80080b2:	bf00      	nop
 80080b4:	e000ed00 	.word	0xe000ed00

080080b8 <__NVIC_GetPriorityGrouping>:
{
 80080b8:	b480      	push	{r7}
 80080ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80080bc:	4b04      	ldr	r3, [pc, #16]	; (80080d0 <__NVIC_GetPriorityGrouping+0x18>)
 80080be:	68db      	ldr	r3, [r3, #12]
 80080c0:	0a1b      	lsrs	r3, r3, #8
 80080c2:	f003 0307 	and.w	r3, r3, #7
}
 80080c6:	4618      	mov	r0, r3
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bc80      	pop	{r7}
 80080cc:	4770      	bx	lr
 80080ce:	bf00      	nop
 80080d0:	e000ed00 	.word	0xe000ed00

080080d4 <__NVIC_EnableIRQ>:
{
 80080d4:	b480      	push	{r7}
 80080d6:	b083      	sub	sp, #12
 80080d8:	af00      	add	r7, sp, #0
 80080da:	4603      	mov	r3, r0
 80080dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80080de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	db0b      	blt.n	80080fe <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80080e6:	79fb      	ldrb	r3, [r7, #7]
 80080e8:	f003 021f 	and.w	r2, r3, #31
 80080ec:	4906      	ldr	r1, [pc, #24]	; (8008108 <__NVIC_EnableIRQ+0x34>)
 80080ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80080f2:	095b      	lsrs	r3, r3, #5
 80080f4:	2001      	movs	r0, #1
 80080f6:	fa00 f202 	lsl.w	r2, r0, r2
 80080fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80080fe:	bf00      	nop
 8008100:	370c      	adds	r7, #12
 8008102:	46bd      	mov	sp, r7
 8008104:	bc80      	pop	{r7}
 8008106:	4770      	bx	lr
 8008108:	e000e100 	.word	0xe000e100

0800810c <__NVIC_SetPriority>:
{
 800810c:	b480      	push	{r7}
 800810e:	b083      	sub	sp, #12
 8008110:	af00      	add	r7, sp, #0
 8008112:	4603      	mov	r3, r0
 8008114:	6039      	str	r1, [r7, #0]
 8008116:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008118:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800811c:	2b00      	cmp	r3, #0
 800811e:	db0a      	blt.n	8008136 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	b2da      	uxtb	r2, r3
 8008124:	490c      	ldr	r1, [pc, #48]	; (8008158 <__NVIC_SetPriority+0x4c>)
 8008126:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800812a:	0112      	lsls	r2, r2, #4
 800812c:	b2d2      	uxtb	r2, r2
 800812e:	440b      	add	r3, r1
 8008130:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008134:	e00a      	b.n	800814c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	b2da      	uxtb	r2, r3
 800813a:	4908      	ldr	r1, [pc, #32]	; (800815c <__NVIC_SetPriority+0x50>)
 800813c:	79fb      	ldrb	r3, [r7, #7]
 800813e:	f003 030f 	and.w	r3, r3, #15
 8008142:	3b04      	subs	r3, #4
 8008144:	0112      	lsls	r2, r2, #4
 8008146:	b2d2      	uxtb	r2, r2
 8008148:	440b      	add	r3, r1
 800814a:	761a      	strb	r2, [r3, #24]
}
 800814c:	bf00      	nop
 800814e:	370c      	adds	r7, #12
 8008150:	46bd      	mov	sp, r7
 8008152:	bc80      	pop	{r7}
 8008154:	4770      	bx	lr
 8008156:	bf00      	nop
 8008158:	e000e100 	.word	0xe000e100
 800815c:	e000ed00 	.word	0xe000ed00

08008160 <NVIC_EncodePriority>:
{
 8008160:	b480      	push	{r7}
 8008162:	b089      	sub	sp, #36	; 0x24
 8008164:	af00      	add	r7, sp, #0
 8008166:	60f8      	str	r0, [r7, #12]
 8008168:	60b9      	str	r1, [r7, #8]
 800816a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f003 0307 	and.w	r3, r3, #7
 8008172:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008174:	69fb      	ldr	r3, [r7, #28]
 8008176:	f1c3 0307 	rsb	r3, r3, #7
 800817a:	2b04      	cmp	r3, #4
 800817c:	bf28      	it	cs
 800817e:	2304      	movcs	r3, #4
 8008180:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008182:	69fb      	ldr	r3, [r7, #28]
 8008184:	3304      	adds	r3, #4
 8008186:	2b06      	cmp	r3, #6
 8008188:	d902      	bls.n	8008190 <NVIC_EncodePriority+0x30>
 800818a:	69fb      	ldr	r3, [r7, #28]
 800818c:	3b03      	subs	r3, #3
 800818e:	e000      	b.n	8008192 <NVIC_EncodePriority+0x32>
 8008190:	2300      	movs	r3, #0
 8008192:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008194:	f04f 32ff 	mov.w	r2, #4294967295
 8008198:	69bb      	ldr	r3, [r7, #24]
 800819a:	fa02 f303 	lsl.w	r3, r2, r3
 800819e:	43da      	mvns	r2, r3
 80081a0:	68bb      	ldr	r3, [r7, #8]
 80081a2:	401a      	ands	r2, r3
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80081a8:	f04f 31ff 	mov.w	r1, #4294967295
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	fa01 f303 	lsl.w	r3, r1, r3
 80081b2:	43d9      	mvns	r1, r3
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80081b8:	4313      	orrs	r3, r2
}
 80081ba:	4618      	mov	r0, r3
 80081bc:	3724      	adds	r7, #36	; 0x24
 80081be:	46bd      	mov	sp, r7
 80081c0:	bc80      	pop	{r7}
 80081c2:	4770      	bx	lr

080081c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b082      	sub	sp, #8
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	3b01      	subs	r3, #1
 80081d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80081d4:	d301      	bcc.n	80081da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80081d6:	2301      	movs	r3, #1
 80081d8:	e00f      	b.n	80081fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80081da:	4a0a      	ldr	r2, [pc, #40]	; (8008204 <SysTick_Config+0x40>)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	3b01      	subs	r3, #1
 80081e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80081e2:	210f      	movs	r1, #15
 80081e4:	f04f 30ff 	mov.w	r0, #4294967295
 80081e8:	f7ff ff90 	bl	800810c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80081ec:	4b05      	ldr	r3, [pc, #20]	; (8008204 <SysTick_Config+0x40>)
 80081ee:	2200      	movs	r2, #0
 80081f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80081f2:	4b04      	ldr	r3, [pc, #16]	; (8008204 <SysTick_Config+0x40>)
 80081f4:	2207      	movs	r2, #7
 80081f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80081f8:	2300      	movs	r3, #0
}
 80081fa:	4618      	mov	r0, r3
 80081fc:	3708      	adds	r7, #8
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop
 8008204:	e000e010 	.word	0xe000e010

08008208 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b082      	sub	sp, #8
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f7ff ff2d 	bl	8008070 <__NVIC_SetPriorityGrouping>
}
 8008216:	bf00      	nop
 8008218:	3708      	adds	r7, #8
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}

0800821e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800821e:	b580      	push	{r7, lr}
 8008220:	b086      	sub	sp, #24
 8008222:	af00      	add	r7, sp, #0
 8008224:	4603      	mov	r3, r0
 8008226:	60b9      	str	r1, [r7, #8]
 8008228:	607a      	str	r2, [r7, #4]
 800822a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800822c:	2300      	movs	r3, #0
 800822e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008230:	f7ff ff42 	bl	80080b8 <__NVIC_GetPriorityGrouping>
 8008234:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8008236:	687a      	ldr	r2, [r7, #4]
 8008238:	68b9      	ldr	r1, [r7, #8]
 800823a:	6978      	ldr	r0, [r7, #20]
 800823c:	f7ff ff90 	bl	8008160 <NVIC_EncodePriority>
 8008240:	4602      	mov	r2, r0
 8008242:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008246:	4611      	mov	r1, r2
 8008248:	4618      	mov	r0, r3
 800824a:	f7ff ff5f 	bl	800810c <__NVIC_SetPriority>
}
 800824e:	bf00      	nop
 8008250:	3718      	adds	r7, #24
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}

08008256 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008256:	b580      	push	{r7, lr}
 8008258:	b082      	sub	sp, #8
 800825a:	af00      	add	r7, sp, #0
 800825c:	4603      	mov	r3, r0
 800825e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008264:	4618      	mov	r0, r3
 8008266:	f7ff ff35 	bl	80080d4 <__NVIC_EnableIRQ>
}
 800826a:	bf00      	nop
 800826c:	3708      	adds	r7, #8
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}

08008272 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008272:	b580      	push	{r7, lr}
 8008274:	b082      	sub	sp, #8
 8008276:	af00      	add	r7, sp, #0
 8008278:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800827a:	6878      	ldr	r0, [r7, #4]
 800827c:	f7ff ffa2 	bl	80081c4 <SysTick_Config>
 8008280:	4603      	mov	r3, r0
}
 8008282:	4618      	mov	r0, r3
 8008284:	3708      	adds	r7, #8
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}

0800828a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800828a:	b480      	push	{r7}
 800828c:	b085      	sub	sp, #20
 800828e:	af00      	add	r7, sp, #0
 8008290:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008292:	2300      	movs	r3, #0
 8008294:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800829c:	b2db      	uxtb	r3, r3
 800829e:	2b02      	cmp	r3, #2
 80082a0:	d008      	beq.n	80082b4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2204      	movs	r2, #4
 80082a6:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2200      	movs	r2, #0
 80082ac:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80082b0:	2301      	movs	r3, #1
 80082b2:	e020      	b.n	80082f6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	681a      	ldr	r2, [r3, #0]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f022 020e 	bic.w	r2, r2, #14
 80082c2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	681a      	ldr	r2, [r3, #0]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	f022 0201 	bic.w	r2, r2, #1
 80082d2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082dc:	2101      	movs	r1, #1
 80082de:	fa01 f202 	lsl.w	r2, r1, r2
 80082e2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	2201      	movs	r2, #1
 80082e8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2200      	movs	r2, #0
 80082f0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80082f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80082f6:	4618      	mov	r0, r3
 80082f8:	3714      	adds	r7, #20
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bc80      	pop	{r7}
 80082fe:	4770      	bx	lr

08008300 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8008300:	b580      	push	{r7, lr}
 8008302:	b084      	sub	sp, #16
 8008304:	af00      	add	r7, sp, #0
 8008306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008308:	2300      	movs	r3, #0
 800830a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8008312:	b2db      	uxtb	r3, r3
 8008314:	2b02      	cmp	r3, #2
 8008316:	d005      	beq.n	8008324 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2204      	movs	r2, #4
 800831c:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800831e:	2301      	movs	r3, #1
 8008320:	73fb      	strb	r3, [r7, #15]
 8008322:	e0d6      	b.n	80084d2 <HAL_DMA_Abort_IT+0x1d2>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	681a      	ldr	r2, [r3, #0]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f022 020e 	bic.w	r2, r2, #14
 8008332:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	681a      	ldr	r2, [r3, #0]
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f022 0201 	bic.w	r2, r2, #1
 8008342:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	461a      	mov	r2, r3
 800834a:	4b64      	ldr	r3, [pc, #400]	; (80084dc <HAL_DMA_Abort_IT+0x1dc>)
 800834c:	429a      	cmp	r2, r3
 800834e:	d958      	bls.n	8008402 <HAL_DMA_Abort_IT+0x102>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a62      	ldr	r2, [pc, #392]	; (80084e0 <HAL_DMA_Abort_IT+0x1e0>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d04f      	beq.n	80083fa <HAL_DMA_Abort_IT+0xfa>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a61      	ldr	r2, [pc, #388]	; (80084e4 <HAL_DMA_Abort_IT+0x1e4>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d048      	beq.n	80083f6 <HAL_DMA_Abort_IT+0xf6>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a5f      	ldr	r2, [pc, #380]	; (80084e8 <HAL_DMA_Abort_IT+0x1e8>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d040      	beq.n	80083f0 <HAL_DMA_Abort_IT+0xf0>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a5e      	ldr	r2, [pc, #376]	; (80084ec <HAL_DMA_Abort_IT+0x1ec>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d038      	beq.n	80083ea <HAL_DMA_Abort_IT+0xea>
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	4a5c      	ldr	r2, [pc, #368]	; (80084f0 <HAL_DMA_Abort_IT+0x1f0>)
 800837e:	4293      	cmp	r3, r2
 8008380:	d030      	beq.n	80083e4 <HAL_DMA_Abort_IT+0xe4>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a5b      	ldr	r2, [pc, #364]	; (80084f4 <HAL_DMA_Abort_IT+0x1f4>)
 8008388:	4293      	cmp	r3, r2
 800838a:	d028      	beq.n	80083de <HAL_DMA_Abort_IT+0xde>
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	4a52      	ldr	r2, [pc, #328]	; (80084dc <HAL_DMA_Abort_IT+0x1dc>)
 8008392:	4293      	cmp	r3, r2
 8008394:	d020      	beq.n	80083d8 <HAL_DMA_Abort_IT+0xd8>
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	4a57      	ldr	r2, [pc, #348]	; (80084f8 <HAL_DMA_Abort_IT+0x1f8>)
 800839c:	4293      	cmp	r3, r2
 800839e:	d019      	beq.n	80083d4 <HAL_DMA_Abort_IT+0xd4>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	4a55      	ldr	r2, [pc, #340]	; (80084fc <HAL_DMA_Abort_IT+0x1fc>)
 80083a6:	4293      	cmp	r3, r2
 80083a8:	d012      	beq.n	80083d0 <HAL_DMA_Abort_IT+0xd0>
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	4a54      	ldr	r2, [pc, #336]	; (8008500 <HAL_DMA_Abort_IT+0x200>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d00a      	beq.n	80083ca <HAL_DMA_Abort_IT+0xca>
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	4a52      	ldr	r2, [pc, #328]	; (8008504 <HAL_DMA_Abort_IT+0x204>)
 80083ba:	4293      	cmp	r3, r2
 80083bc:	d102      	bne.n	80083c4 <HAL_DMA_Abort_IT+0xc4>
 80083be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80083c2:	e01b      	b.n	80083fc <HAL_DMA_Abort_IT+0xfc>
 80083c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80083c8:	e018      	b.n	80083fc <HAL_DMA_Abort_IT+0xfc>
 80083ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80083ce:	e015      	b.n	80083fc <HAL_DMA_Abort_IT+0xfc>
 80083d0:	2310      	movs	r3, #16
 80083d2:	e013      	b.n	80083fc <HAL_DMA_Abort_IT+0xfc>
 80083d4:	2301      	movs	r3, #1
 80083d6:	e011      	b.n	80083fc <HAL_DMA_Abort_IT+0xfc>
 80083d8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80083dc:	e00e      	b.n	80083fc <HAL_DMA_Abort_IT+0xfc>
 80083de:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80083e2:	e00b      	b.n	80083fc <HAL_DMA_Abort_IT+0xfc>
 80083e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80083e8:	e008      	b.n	80083fc <HAL_DMA_Abort_IT+0xfc>
 80083ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80083ee:	e005      	b.n	80083fc <HAL_DMA_Abort_IT+0xfc>
 80083f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80083f4:	e002      	b.n	80083fc <HAL_DMA_Abort_IT+0xfc>
 80083f6:	2310      	movs	r3, #16
 80083f8:	e000      	b.n	80083fc <HAL_DMA_Abort_IT+0xfc>
 80083fa:	2301      	movs	r3, #1
 80083fc:	4a42      	ldr	r2, [pc, #264]	; (8008508 <HAL_DMA_Abort_IT+0x208>)
 80083fe:	6053      	str	r3, [r2, #4]
 8008400:	e057      	b.n	80084b2 <HAL_DMA_Abort_IT+0x1b2>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a36      	ldr	r2, [pc, #216]	; (80084e0 <HAL_DMA_Abort_IT+0x1e0>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d04f      	beq.n	80084ac <HAL_DMA_Abort_IT+0x1ac>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a34      	ldr	r2, [pc, #208]	; (80084e4 <HAL_DMA_Abort_IT+0x1e4>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d048      	beq.n	80084a8 <HAL_DMA_Abort_IT+0x1a8>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a33      	ldr	r2, [pc, #204]	; (80084e8 <HAL_DMA_Abort_IT+0x1e8>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d040      	beq.n	80084a2 <HAL_DMA_Abort_IT+0x1a2>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a31      	ldr	r2, [pc, #196]	; (80084ec <HAL_DMA_Abort_IT+0x1ec>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d038      	beq.n	800849c <HAL_DMA_Abort_IT+0x19c>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4a30      	ldr	r2, [pc, #192]	; (80084f0 <HAL_DMA_Abort_IT+0x1f0>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d030      	beq.n	8008496 <HAL_DMA_Abort_IT+0x196>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	4a2e      	ldr	r2, [pc, #184]	; (80084f4 <HAL_DMA_Abort_IT+0x1f4>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d028      	beq.n	8008490 <HAL_DMA_Abort_IT+0x190>
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	4a26      	ldr	r2, [pc, #152]	; (80084dc <HAL_DMA_Abort_IT+0x1dc>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d020      	beq.n	800848a <HAL_DMA_Abort_IT+0x18a>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	4a2a      	ldr	r2, [pc, #168]	; (80084f8 <HAL_DMA_Abort_IT+0x1f8>)
 800844e:	4293      	cmp	r3, r2
 8008450:	d019      	beq.n	8008486 <HAL_DMA_Abort_IT+0x186>
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	4a29      	ldr	r2, [pc, #164]	; (80084fc <HAL_DMA_Abort_IT+0x1fc>)
 8008458:	4293      	cmp	r3, r2
 800845a:	d012      	beq.n	8008482 <HAL_DMA_Abort_IT+0x182>
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	4a27      	ldr	r2, [pc, #156]	; (8008500 <HAL_DMA_Abort_IT+0x200>)
 8008462:	4293      	cmp	r3, r2
 8008464:	d00a      	beq.n	800847c <HAL_DMA_Abort_IT+0x17c>
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4a26      	ldr	r2, [pc, #152]	; (8008504 <HAL_DMA_Abort_IT+0x204>)
 800846c:	4293      	cmp	r3, r2
 800846e:	d102      	bne.n	8008476 <HAL_DMA_Abort_IT+0x176>
 8008470:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008474:	e01b      	b.n	80084ae <HAL_DMA_Abort_IT+0x1ae>
 8008476:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800847a:	e018      	b.n	80084ae <HAL_DMA_Abort_IT+0x1ae>
 800847c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008480:	e015      	b.n	80084ae <HAL_DMA_Abort_IT+0x1ae>
 8008482:	2310      	movs	r3, #16
 8008484:	e013      	b.n	80084ae <HAL_DMA_Abort_IT+0x1ae>
 8008486:	2301      	movs	r3, #1
 8008488:	e011      	b.n	80084ae <HAL_DMA_Abort_IT+0x1ae>
 800848a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800848e:	e00e      	b.n	80084ae <HAL_DMA_Abort_IT+0x1ae>
 8008490:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8008494:	e00b      	b.n	80084ae <HAL_DMA_Abort_IT+0x1ae>
 8008496:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800849a:	e008      	b.n	80084ae <HAL_DMA_Abort_IT+0x1ae>
 800849c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80084a0:	e005      	b.n	80084ae <HAL_DMA_Abort_IT+0x1ae>
 80084a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80084a6:	e002      	b.n	80084ae <HAL_DMA_Abort_IT+0x1ae>
 80084a8:	2310      	movs	r3, #16
 80084aa:	e000      	b.n	80084ae <HAL_DMA_Abort_IT+0x1ae>
 80084ac:	2301      	movs	r3, #1
 80084ae:	4a17      	ldr	r2, [pc, #92]	; (800850c <HAL_DMA_Abort_IT+0x20c>)
 80084b0:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	2201      	movs	r2, #1
 80084b6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	2200      	movs	r2, #0
 80084be:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d003      	beq.n	80084d2 <HAL_DMA_Abort_IT+0x1d2>
    {
      hdma->XferAbortCallback(hdma);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	4798      	blx	r3
    } 
  }
  return status;
 80084d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3710      	adds	r7, #16
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}
 80084dc:	40020080 	.word	0x40020080
 80084e0:	40020008 	.word	0x40020008
 80084e4:	4002001c 	.word	0x4002001c
 80084e8:	40020030 	.word	0x40020030
 80084ec:	40020044 	.word	0x40020044
 80084f0:	40020058 	.word	0x40020058
 80084f4:	4002006c 	.word	0x4002006c
 80084f8:	40020408 	.word	0x40020408
 80084fc:	4002041c 	.word	0x4002041c
 8008500:	40020430 	.word	0x40020430
 8008504:	40020444 	.word	0x40020444
 8008508:	40020400 	.word	0x40020400
 800850c:	40020000 	.word	0x40020000

08008510 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008510:	b480      	push	{r7}
 8008512:	b08b      	sub	sp, #44	; 0x2c
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800851a:	2300      	movs	r3, #0
 800851c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800851e:	2300      	movs	r3, #0
 8008520:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008522:	e179      	b.n	8008818 <HAL_GPIO_Init+0x308>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8008524:	2201      	movs	r2, #1
 8008526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008528:	fa02 f303 	lsl.w	r3, r2, r3
 800852c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	69fa      	ldr	r2, [r7, #28]
 8008534:	4013      	ands	r3, r2
 8008536:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8008538:	69ba      	ldr	r2, [r7, #24]
 800853a:	69fb      	ldr	r3, [r7, #28]
 800853c:	429a      	cmp	r2, r3
 800853e:	f040 8168 	bne.w	8008812 <HAL_GPIO_Init+0x302>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	4a96      	ldr	r2, [pc, #600]	; (80087a0 <HAL_GPIO_Init+0x290>)
 8008548:	4293      	cmp	r3, r2
 800854a:	d05e      	beq.n	800860a <HAL_GPIO_Init+0xfa>
 800854c:	4a94      	ldr	r2, [pc, #592]	; (80087a0 <HAL_GPIO_Init+0x290>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d875      	bhi.n	800863e <HAL_GPIO_Init+0x12e>
 8008552:	4a94      	ldr	r2, [pc, #592]	; (80087a4 <HAL_GPIO_Init+0x294>)
 8008554:	4293      	cmp	r3, r2
 8008556:	d058      	beq.n	800860a <HAL_GPIO_Init+0xfa>
 8008558:	4a92      	ldr	r2, [pc, #584]	; (80087a4 <HAL_GPIO_Init+0x294>)
 800855a:	4293      	cmp	r3, r2
 800855c:	d86f      	bhi.n	800863e <HAL_GPIO_Init+0x12e>
 800855e:	4a92      	ldr	r2, [pc, #584]	; (80087a8 <HAL_GPIO_Init+0x298>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d052      	beq.n	800860a <HAL_GPIO_Init+0xfa>
 8008564:	4a90      	ldr	r2, [pc, #576]	; (80087a8 <HAL_GPIO_Init+0x298>)
 8008566:	4293      	cmp	r3, r2
 8008568:	d869      	bhi.n	800863e <HAL_GPIO_Init+0x12e>
 800856a:	4a90      	ldr	r2, [pc, #576]	; (80087ac <HAL_GPIO_Init+0x29c>)
 800856c:	4293      	cmp	r3, r2
 800856e:	d04c      	beq.n	800860a <HAL_GPIO_Init+0xfa>
 8008570:	4a8e      	ldr	r2, [pc, #568]	; (80087ac <HAL_GPIO_Init+0x29c>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d863      	bhi.n	800863e <HAL_GPIO_Init+0x12e>
 8008576:	4a8e      	ldr	r2, [pc, #568]	; (80087b0 <HAL_GPIO_Init+0x2a0>)
 8008578:	4293      	cmp	r3, r2
 800857a:	d046      	beq.n	800860a <HAL_GPIO_Init+0xfa>
 800857c:	4a8c      	ldr	r2, [pc, #560]	; (80087b0 <HAL_GPIO_Init+0x2a0>)
 800857e:	4293      	cmp	r3, r2
 8008580:	d85d      	bhi.n	800863e <HAL_GPIO_Init+0x12e>
 8008582:	2b12      	cmp	r3, #18
 8008584:	d82a      	bhi.n	80085dc <HAL_GPIO_Init+0xcc>
 8008586:	2b12      	cmp	r3, #18
 8008588:	d859      	bhi.n	800863e <HAL_GPIO_Init+0x12e>
 800858a:	a201      	add	r2, pc, #4	; (adr r2, 8008590 <HAL_GPIO_Init+0x80>)
 800858c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008590:	0800860b 	.word	0x0800860b
 8008594:	080085e5 	.word	0x080085e5
 8008598:	080085f7 	.word	0x080085f7
 800859c:	08008639 	.word	0x08008639
 80085a0:	0800863f 	.word	0x0800863f
 80085a4:	0800863f 	.word	0x0800863f
 80085a8:	0800863f 	.word	0x0800863f
 80085ac:	0800863f 	.word	0x0800863f
 80085b0:	0800863f 	.word	0x0800863f
 80085b4:	0800863f 	.word	0x0800863f
 80085b8:	0800863f 	.word	0x0800863f
 80085bc:	0800863f 	.word	0x0800863f
 80085c0:	0800863f 	.word	0x0800863f
 80085c4:	0800863f 	.word	0x0800863f
 80085c8:	0800863f 	.word	0x0800863f
 80085cc:	0800863f 	.word	0x0800863f
 80085d0:	0800863f 	.word	0x0800863f
 80085d4:	080085ed 	.word	0x080085ed
 80085d8:	08008601 	.word	0x08008601
 80085dc:	4a75      	ldr	r2, [pc, #468]	; (80087b4 <HAL_GPIO_Init+0x2a4>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d013      	beq.n	800860a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80085e2:	e02c      	b.n	800863e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80085e4:	683b      	ldr	r3, [r7, #0]
 80085e6:	68db      	ldr	r3, [r3, #12]
 80085e8:	623b      	str	r3, [r7, #32]
          break;
 80085ea:	e029      	b.n	8008640 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	68db      	ldr	r3, [r3, #12]
 80085f0:	3304      	adds	r3, #4
 80085f2:	623b      	str	r3, [r7, #32]
          break;
 80085f4:	e024      	b.n	8008640 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80085f6:	683b      	ldr	r3, [r7, #0]
 80085f8:	68db      	ldr	r3, [r3, #12]
 80085fa:	3308      	adds	r3, #8
 80085fc:	623b      	str	r3, [r7, #32]
          break;
 80085fe:	e01f      	b.n	8008640 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	68db      	ldr	r3, [r3, #12]
 8008604:	330c      	adds	r3, #12
 8008606:	623b      	str	r3, [r7, #32]
          break;
 8008608:	e01a      	b.n	8008640 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800860a:	683b      	ldr	r3, [r7, #0]
 800860c:	689b      	ldr	r3, [r3, #8]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d102      	bne.n	8008618 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8008612:	2304      	movs	r3, #4
 8008614:	623b      	str	r3, [r7, #32]
          break;
 8008616:	e013      	b.n	8008640 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	689b      	ldr	r3, [r3, #8]
 800861c:	2b01      	cmp	r3, #1
 800861e:	d105      	bne.n	800862c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8008620:	2308      	movs	r3, #8
 8008622:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	69fa      	ldr	r2, [r7, #28]
 8008628:	611a      	str	r2, [r3, #16]
          break;
 800862a:	e009      	b.n	8008640 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800862c:	2308      	movs	r3, #8
 800862e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	69fa      	ldr	r2, [r7, #28]
 8008634:	615a      	str	r2, [r3, #20]
          break;
 8008636:	e003      	b.n	8008640 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8008638:	2300      	movs	r3, #0
 800863a:	623b      	str	r3, [r7, #32]
          break;
 800863c:	e000      	b.n	8008640 <HAL_GPIO_Init+0x130>
          break;
 800863e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008640:	69bb      	ldr	r3, [r7, #24]
 8008642:	2bff      	cmp	r3, #255	; 0xff
 8008644:	d801      	bhi.n	800864a <HAL_GPIO_Init+0x13a>
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	e001      	b.n	800864e <HAL_GPIO_Init+0x13e>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	3304      	adds	r3, #4
 800864e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008650:	69bb      	ldr	r3, [r7, #24]
 8008652:	2bff      	cmp	r3, #255	; 0xff
 8008654:	d802      	bhi.n	800865c <HAL_GPIO_Init+0x14c>
 8008656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008658:	009b      	lsls	r3, r3, #2
 800865a:	e002      	b.n	8008662 <HAL_GPIO_Init+0x152>
 800865c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800865e:	3b08      	subs	r3, #8
 8008660:	009b      	lsls	r3, r3, #2
 8008662:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8008664:	697b      	ldr	r3, [r7, #20]
 8008666:	681a      	ldr	r2, [r3, #0]
 8008668:	210f      	movs	r1, #15
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	fa01 f303 	lsl.w	r3, r1, r3
 8008670:	43db      	mvns	r3, r3
 8008672:	401a      	ands	r2, r3
 8008674:	6a39      	ldr	r1, [r7, #32]
 8008676:	693b      	ldr	r3, [r7, #16]
 8008678:	fa01 f303 	lsl.w	r3, r1, r3
 800867c:	431a      	orrs	r2, r3
 800867e:	697b      	ldr	r3, [r7, #20]
 8008680:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800868a:	2b00      	cmp	r3, #0
 800868c:	f000 80c1 	beq.w	8008812 <HAL_GPIO_Init+0x302>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8008690:	4b49      	ldr	r3, [pc, #292]	; (80087b8 <HAL_GPIO_Init+0x2a8>)
 8008692:	699b      	ldr	r3, [r3, #24]
 8008694:	4a48      	ldr	r2, [pc, #288]	; (80087b8 <HAL_GPIO_Init+0x2a8>)
 8008696:	f043 0301 	orr.w	r3, r3, #1
 800869a:	6193      	str	r3, [r2, #24]
 800869c:	4b46      	ldr	r3, [pc, #280]	; (80087b8 <HAL_GPIO_Init+0x2a8>)
 800869e:	699b      	ldr	r3, [r3, #24]
 80086a0:	f003 0301 	and.w	r3, r3, #1
 80086a4:	60bb      	str	r3, [r7, #8]
 80086a6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80086a8:	4a44      	ldr	r2, [pc, #272]	; (80087bc <HAL_GPIO_Init+0x2ac>)
 80086aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ac:	089b      	lsrs	r3, r3, #2
 80086ae:	3302      	adds	r3, #2
 80086b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086b4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80086b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086b8:	f003 0303 	and.w	r3, r3, #3
 80086bc:	009b      	lsls	r3, r3, #2
 80086be:	220f      	movs	r2, #15
 80086c0:	fa02 f303 	lsl.w	r3, r2, r3
 80086c4:	43db      	mvns	r3, r3
 80086c6:	68fa      	ldr	r2, [r7, #12]
 80086c8:	4013      	ands	r3, r2
 80086ca:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	4a3c      	ldr	r2, [pc, #240]	; (80087c0 <HAL_GPIO_Init+0x2b0>)
 80086d0:	4293      	cmp	r3, r2
 80086d2:	d01f      	beq.n	8008714 <HAL_GPIO_Init+0x204>
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	4a3b      	ldr	r2, [pc, #236]	; (80087c4 <HAL_GPIO_Init+0x2b4>)
 80086d8:	4293      	cmp	r3, r2
 80086da:	d019      	beq.n	8008710 <HAL_GPIO_Init+0x200>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	4a3a      	ldr	r2, [pc, #232]	; (80087c8 <HAL_GPIO_Init+0x2b8>)
 80086e0:	4293      	cmp	r3, r2
 80086e2:	d013      	beq.n	800870c <HAL_GPIO_Init+0x1fc>
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	4a39      	ldr	r2, [pc, #228]	; (80087cc <HAL_GPIO_Init+0x2bc>)
 80086e8:	4293      	cmp	r3, r2
 80086ea:	d00d      	beq.n	8008708 <HAL_GPIO_Init+0x1f8>
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	4a38      	ldr	r2, [pc, #224]	; (80087d0 <HAL_GPIO_Init+0x2c0>)
 80086f0:	4293      	cmp	r3, r2
 80086f2:	d007      	beq.n	8008704 <HAL_GPIO_Init+0x1f4>
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	4a37      	ldr	r2, [pc, #220]	; (80087d4 <HAL_GPIO_Init+0x2c4>)
 80086f8:	4293      	cmp	r3, r2
 80086fa:	d101      	bne.n	8008700 <HAL_GPIO_Init+0x1f0>
 80086fc:	2305      	movs	r3, #5
 80086fe:	e00a      	b.n	8008716 <HAL_GPIO_Init+0x206>
 8008700:	2306      	movs	r3, #6
 8008702:	e008      	b.n	8008716 <HAL_GPIO_Init+0x206>
 8008704:	2304      	movs	r3, #4
 8008706:	e006      	b.n	8008716 <HAL_GPIO_Init+0x206>
 8008708:	2303      	movs	r3, #3
 800870a:	e004      	b.n	8008716 <HAL_GPIO_Init+0x206>
 800870c:	2302      	movs	r3, #2
 800870e:	e002      	b.n	8008716 <HAL_GPIO_Init+0x206>
 8008710:	2301      	movs	r3, #1
 8008712:	e000      	b.n	8008716 <HAL_GPIO_Init+0x206>
 8008714:	2300      	movs	r3, #0
 8008716:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008718:	f002 0203 	and.w	r2, r2, #3
 800871c:	0092      	lsls	r2, r2, #2
 800871e:	4093      	lsls	r3, r2
 8008720:	68fa      	ldr	r2, [r7, #12]
 8008722:	4313      	orrs	r3, r2
 8008724:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8008726:	4925      	ldr	r1, [pc, #148]	; (80087bc <HAL_GPIO_Init+0x2ac>)
 8008728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800872a:	089b      	lsrs	r3, r3, #2
 800872c:	3302      	adds	r3, #2
 800872e:	68fa      	ldr	r2, [r7, #12]
 8008730:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	685b      	ldr	r3, [r3, #4]
 8008738:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800873c:	2b00      	cmp	r3, #0
 800873e:	d006      	beq.n	800874e <HAL_GPIO_Init+0x23e>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8008740:	4b25      	ldr	r3, [pc, #148]	; (80087d8 <HAL_GPIO_Init+0x2c8>)
 8008742:	689a      	ldr	r2, [r3, #8]
 8008744:	4924      	ldr	r1, [pc, #144]	; (80087d8 <HAL_GPIO_Init+0x2c8>)
 8008746:	69bb      	ldr	r3, [r7, #24]
 8008748:	4313      	orrs	r3, r2
 800874a:	608b      	str	r3, [r1, #8]
 800874c:	e006      	b.n	800875c <HAL_GPIO_Init+0x24c>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800874e:	4b22      	ldr	r3, [pc, #136]	; (80087d8 <HAL_GPIO_Init+0x2c8>)
 8008750:	689a      	ldr	r2, [r3, #8]
 8008752:	69bb      	ldr	r3, [r7, #24]
 8008754:	43db      	mvns	r3, r3
 8008756:	4920      	ldr	r1, [pc, #128]	; (80087d8 <HAL_GPIO_Init+0x2c8>)
 8008758:	4013      	ands	r3, r2
 800875a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008764:	2b00      	cmp	r3, #0
 8008766:	d006      	beq.n	8008776 <HAL_GPIO_Init+0x266>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8008768:	4b1b      	ldr	r3, [pc, #108]	; (80087d8 <HAL_GPIO_Init+0x2c8>)
 800876a:	68da      	ldr	r2, [r3, #12]
 800876c:	491a      	ldr	r1, [pc, #104]	; (80087d8 <HAL_GPIO_Init+0x2c8>)
 800876e:	69bb      	ldr	r3, [r7, #24]
 8008770:	4313      	orrs	r3, r2
 8008772:	60cb      	str	r3, [r1, #12]
 8008774:	e006      	b.n	8008784 <HAL_GPIO_Init+0x274>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8008776:	4b18      	ldr	r3, [pc, #96]	; (80087d8 <HAL_GPIO_Init+0x2c8>)
 8008778:	68da      	ldr	r2, [r3, #12]
 800877a:	69bb      	ldr	r3, [r7, #24]
 800877c:	43db      	mvns	r3, r3
 800877e:	4916      	ldr	r1, [pc, #88]	; (80087d8 <HAL_GPIO_Init+0x2c8>)
 8008780:	4013      	ands	r3, r2
 8008782:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	685b      	ldr	r3, [r3, #4]
 8008788:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800878c:	2b00      	cmp	r3, #0
 800878e:	d025      	beq.n	80087dc <HAL_GPIO_Init+0x2cc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8008790:	4b11      	ldr	r3, [pc, #68]	; (80087d8 <HAL_GPIO_Init+0x2c8>)
 8008792:	685a      	ldr	r2, [r3, #4]
 8008794:	4910      	ldr	r1, [pc, #64]	; (80087d8 <HAL_GPIO_Init+0x2c8>)
 8008796:	69bb      	ldr	r3, [r7, #24]
 8008798:	4313      	orrs	r3, r2
 800879a:	604b      	str	r3, [r1, #4]
 800879c:	e025      	b.n	80087ea <HAL_GPIO_Init+0x2da>
 800879e:	bf00      	nop
 80087a0:	10320000 	.word	0x10320000
 80087a4:	10310000 	.word	0x10310000
 80087a8:	10220000 	.word	0x10220000
 80087ac:	10210000 	.word	0x10210000
 80087b0:	10120000 	.word	0x10120000
 80087b4:	10110000 	.word	0x10110000
 80087b8:	40021000 	.word	0x40021000
 80087bc:	40010000 	.word	0x40010000
 80087c0:	40010800 	.word	0x40010800
 80087c4:	40010c00 	.word	0x40010c00
 80087c8:	40011000 	.word	0x40011000
 80087cc:	40011400 	.word	0x40011400
 80087d0:	40011800 	.word	0x40011800
 80087d4:	40011c00 	.word	0x40011c00
 80087d8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80087dc:	4b15      	ldr	r3, [pc, #84]	; (8008834 <HAL_GPIO_Init+0x324>)
 80087de:	685a      	ldr	r2, [r3, #4]
 80087e0:	69bb      	ldr	r3, [r7, #24]
 80087e2:	43db      	mvns	r3, r3
 80087e4:	4913      	ldr	r1, [pc, #76]	; (8008834 <HAL_GPIO_Init+0x324>)
 80087e6:	4013      	ands	r3, r2
 80087e8:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	d006      	beq.n	8008804 <HAL_GPIO_Init+0x2f4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80087f6:	4b0f      	ldr	r3, [pc, #60]	; (8008834 <HAL_GPIO_Init+0x324>)
 80087f8:	681a      	ldr	r2, [r3, #0]
 80087fa:	490e      	ldr	r1, [pc, #56]	; (8008834 <HAL_GPIO_Init+0x324>)
 80087fc:	69bb      	ldr	r3, [r7, #24]
 80087fe:	4313      	orrs	r3, r2
 8008800:	600b      	str	r3, [r1, #0]
 8008802:	e006      	b.n	8008812 <HAL_GPIO_Init+0x302>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8008804:	4b0b      	ldr	r3, [pc, #44]	; (8008834 <HAL_GPIO_Init+0x324>)
 8008806:	681a      	ldr	r2, [r3, #0]
 8008808:	69bb      	ldr	r3, [r7, #24]
 800880a:	43db      	mvns	r3, r3
 800880c:	4909      	ldr	r1, [pc, #36]	; (8008834 <HAL_GPIO_Init+0x324>)
 800880e:	4013      	ands	r3, r2
 8008810:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8008812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008814:	3301      	adds	r3, #1
 8008816:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	681a      	ldr	r2, [r3, #0]
 800881c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800881e:	fa22 f303 	lsr.w	r3, r2, r3
 8008822:	2b00      	cmp	r3, #0
 8008824:	f47f ae7e 	bne.w	8008524 <HAL_GPIO_Init+0x14>
  }
}
 8008828:	bf00      	nop
 800882a:	bf00      	nop
 800882c:	372c      	adds	r7, #44	; 0x2c
 800882e:	46bd      	mov	sp, r7
 8008830:	bc80      	pop	{r7}
 8008832:	4770      	bx	lr
 8008834:	40010400 	.word	0x40010400

08008838 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008838:	b480      	push	{r7}
 800883a:	b089      	sub	sp, #36	; 0x24
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008842:	2300      	movs	r3, #0
 8008844:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0u)
 8008846:	e0a6      	b.n	8008996 <HAL_GPIO_DeInit+0x15e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8008848:	2201      	movs	r2, #1
 800884a:	69fb      	ldr	r3, [r7, #28]
 800884c:	fa02 f303 	lsl.w	r3, r2, r3
 8008850:	683a      	ldr	r2, [r7, #0]
 8008852:	4013      	ands	r3, r2
 8008854:	61bb      	str	r3, [r7, #24]

    if (iocurrent)
 8008856:	69bb      	ldr	r3, [r7, #24]
 8008858:	2b00      	cmp	r3, #0
 800885a:	f000 8099 	beq.w	8008990 <HAL_GPIO_DeInit+0x158>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = AFIO->EXTICR[position >> 2u];
 800885e:	4a54      	ldr	r2, [pc, #336]	; (80089b0 <HAL_GPIO_DeInit+0x178>)
 8008860:	69fb      	ldr	r3, [r7, #28]
 8008862:	089b      	lsrs	r3, r3, #2
 8008864:	3302      	adds	r3, #2
 8008866:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800886a:	617b      	str	r3, [r7, #20]
      tmp &= 0x0FuL << (4u * (position & 0x03u));
 800886c:	69fb      	ldr	r3, [r7, #28]
 800886e:	f003 0303 	and.w	r3, r3, #3
 8008872:	009b      	lsls	r3, r3, #2
 8008874:	220f      	movs	r2, #15
 8008876:	fa02 f303 	lsl.w	r3, r2, r3
 800887a:	697a      	ldr	r2, [r7, #20]
 800887c:	4013      	ands	r3, r2
 800887e:	617b      	str	r3, [r7, #20]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	4a4c      	ldr	r2, [pc, #304]	; (80089b4 <HAL_GPIO_DeInit+0x17c>)
 8008884:	4293      	cmp	r3, r2
 8008886:	d01f      	beq.n	80088c8 <HAL_GPIO_DeInit+0x90>
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	4a4b      	ldr	r2, [pc, #300]	; (80089b8 <HAL_GPIO_DeInit+0x180>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d019      	beq.n	80088c4 <HAL_GPIO_DeInit+0x8c>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	4a4a      	ldr	r2, [pc, #296]	; (80089bc <HAL_GPIO_DeInit+0x184>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d013      	beq.n	80088c0 <HAL_GPIO_DeInit+0x88>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	4a49      	ldr	r2, [pc, #292]	; (80089c0 <HAL_GPIO_DeInit+0x188>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d00d      	beq.n	80088bc <HAL_GPIO_DeInit+0x84>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	4a48      	ldr	r2, [pc, #288]	; (80089c4 <HAL_GPIO_DeInit+0x18c>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d007      	beq.n	80088b8 <HAL_GPIO_DeInit+0x80>
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	4a47      	ldr	r2, [pc, #284]	; (80089c8 <HAL_GPIO_DeInit+0x190>)
 80088ac:	4293      	cmp	r3, r2
 80088ae:	d101      	bne.n	80088b4 <HAL_GPIO_DeInit+0x7c>
 80088b0:	2305      	movs	r3, #5
 80088b2:	e00a      	b.n	80088ca <HAL_GPIO_DeInit+0x92>
 80088b4:	2306      	movs	r3, #6
 80088b6:	e008      	b.n	80088ca <HAL_GPIO_DeInit+0x92>
 80088b8:	2304      	movs	r3, #4
 80088ba:	e006      	b.n	80088ca <HAL_GPIO_DeInit+0x92>
 80088bc:	2303      	movs	r3, #3
 80088be:	e004      	b.n	80088ca <HAL_GPIO_DeInit+0x92>
 80088c0:	2302      	movs	r3, #2
 80088c2:	e002      	b.n	80088ca <HAL_GPIO_DeInit+0x92>
 80088c4:	2301      	movs	r3, #1
 80088c6:	e000      	b.n	80088ca <HAL_GPIO_DeInit+0x92>
 80088c8:	2300      	movs	r3, #0
 80088ca:	69fa      	ldr	r2, [r7, #28]
 80088cc:	f002 0203 	and.w	r2, r2, #3
 80088d0:	0092      	lsls	r2, r2, #2
 80088d2:	4093      	lsls	r3, r2
 80088d4:	697a      	ldr	r2, [r7, #20]
 80088d6:	429a      	cmp	r2, r3
 80088d8:	d132      	bne.n	8008940 <HAL_GPIO_DeInit+0x108>
      {
        /* Clear EXTI line configuration */
        CLEAR_BIT(EXTI->IMR, (uint32_t)iocurrent);
 80088da:	4b3c      	ldr	r3, [pc, #240]	; (80089cc <HAL_GPIO_DeInit+0x194>)
 80088dc:	681a      	ldr	r2, [r3, #0]
 80088de:	69bb      	ldr	r3, [r7, #24]
 80088e0:	43db      	mvns	r3, r3
 80088e2:	493a      	ldr	r1, [pc, #232]	; (80089cc <HAL_GPIO_DeInit+0x194>)
 80088e4:	4013      	ands	r3, r2
 80088e6:	600b      	str	r3, [r1, #0]
        CLEAR_BIT(EXTI->EMR, (uint32_t)iocurrent);
 80088e8:	4b38      	ldr	r3, [pc, #224]	; (80089cc <HAL_GPIO_DeInit+0x194>)
 80088ea:	685a      	ldr	r2, [r3, #4]
 80088ec:	69bb      	ldr	r3, [r7, #24]
 80088ee:	43db      	mvns	r3, r3
 80088f0:	4936      	ldr	r1, [pc, #216]	; (80089cc <HAL_GPIO_DeInit+0x194>)
 80088f2:	4013      	ands	r3, r2
 80088f4:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        CLEAR_BIT(EXTI->FTSR, (uint32_t)iocurrent);
 80088f6:	4b35      	ldr	r3, [pc, #212]	; (80089cc <HAL_GPIO_DeInit+0x194>)
 80088f8:	68da      	ldr	r2, [r3, #12]
 80088fa:	69bb      	ldr	r3, [r7, #24]
 80088fc:	43db      	mvns	r3, r3
 80088fe:	4933      	ldr	r1, [pc, #204]	; (80089cc <HAL_GPIO_DeInit+0x194>)
 8008900:	4013      	ands	r3, r2
 8008902:	60cb      	str	r3, [r1, #12]
        CLEAR_BIT(EXTI->RTSR, (uint32_t)iocurrent);
 8008904:	4b31      	ldr	r3, [pc, #196]	; (80089cc <HAL_GPIO_DeInit+0x194>)
 8008906:	689a      	ldr	r2, [r3, #8]
 8008908:	69bb      	ldr	r3, [r7, #24]
 800890a:	43db      	mvns	r3, r3
 800890c:	492f      	ldr	r1, [pc, #188]	; (80089cc <HAL_GPIO_DeInit+0x194>)
 800890e:	4013      	ands	r3, r2
 8008910:	608b      	str	r3, [r1, #8]
        
        tmp = 0x0FuL << (4u * (position & 0x03u));
 8008912:	69fb      	ldr	r3, [r7, #28]
 8008914:	f003 0303 	and.w	r3, r3, #3
 8008918:	009b      	lsls	r3, r3, #2
 800891a:	220f      	movs	r2, #15
 800891c:	fa02 f303 	lsl.w	r3, r2, r3
 8008920:	617b      	str	r3, [r7, #20]
        CLEAR_BIT(AFIO->EXTICR[position >> 2u], tmp);
 8008922:	4a23      	ldr	r2, [pc, #140]	; (80089b0 <HAL_GPIO_DeInit+0x178>)
 8008924:	69fb      	ldr	r3, [r7, #28]
 8008926:	089b      	lsrs	r3, r3, #2
 8008928:	3302      	adds	r3, #2
 800892a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	43da      	mvns	r2, r3
 8008932:	481f      	ldr	r0, [pc, #124]	; (80089b0 <HAL_GPIO_DeInit+0x178>)
 8008934:	69fb      	ldr	r3, [r7, #28]
 8008936:	089b      	lsrs	r3, r3, #2
 8008938:	400a      	ands	r2, r1
 800893a:	3302      	adds	r3, #2
 800893c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register */
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8008940:	69bb      	ldr	r3, [r7, #24]
 8008942:	2bff      	cmp	r3, #255	; 0xff
 8008944:	d801      	bhi.n	800894a <HAL_GPIO_DeInit+0x112>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	e001      	b.n	800894e <HAL_GPIO_DeInit+0x116>
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	3304      	adds	r3, #4
 800894e:	613b      	str	r3, [r7, #16]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8008950:	69bb      	ldr	r3, [r7, #24]
 8008952:	2bff      	cmp	r3, #255	; 0xff
 8008954:	d802      	bhi.n	800895c <HAL_GPIO_DeInit+0x124>
 8008956:	69fb      	ldr	r3, [r7, #28]
 8008958:	009b      	lsls	r3, r3, #2
 800895a:	e002      	b.n	8008962 <HAL_GPIO_DeInit+0x12a>
 800895c:	69fb      	ldr	r3, [r7, #28]
 800895e:	3b08      	subs	r3, #8
 8008960:	009b      	lsls	r3, r3, #2
 8008962:	60fb      	str	r3, [r7, #12]

      /* CRL/CRH default value is floating input(0x04) shifted to correct position */
      MODIFY_REG(*configregister, ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), GPIO_CRL_CNF0_0 << registeroffset);
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	681a      	ldr	r2, [r3, #0]
 8008968:	210f      	movs	r1, #15
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	fa01 f303 	lsl.w	r3, r1, r3
 8008970:	43db      	mvns	r3, r3
 8008972:	401a      	ands	r2, r3
 8008974:	2104      	movs	r1, #4
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	fa01 f303 	lsl.w	r3, r1, r3
 800897c:	431a      	orrs	r2, r3
 800897e:	693b      	ldr	r3, [r7, #16]
 8008980:	601a      	str	r2, [r3, #0]

      /* ODR default value is 0 */
      CLEAR_BIT(GPIOx->ODR, iocurrent);
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	68da      	ldr	r2, [r3, #12]
 8008986:	69bb      	ldr	r3, [r7, #24]
 8008988:	43db      	mvns	r3, r3
 800898a:	401a      	ands	r2, r3
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	60da      	str	r2, [r3, #12]
    }

    position++;
 8008990:	69fb      	ldr	r3, [r7, #28]
 8008992:	3301      	adds	r3, #1
 8008994:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0u)
 8008996:	683a      	ldr	r2, [r7, #0]
 8008998:	69fb      	ldr	r3, [r7, #28]
 800899a:	fa22 f303 	lsr.w	r3, r2, r3
 800899e:	2b00      	cmp	r3, #0
 80089a0:	f47f af52 	bne.w	8008848 <HAL_GPIO_DeInit+0x10>
  }
}
 80089a4:	bf00      	nop
 80089a6:	bf00      	nop
 80089a8:	3724      	adds	r7, #36	; 0x24
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bc80      	pop	{r7}
 80089ae:	4770      	bx	lr
 80089b0:	40010000 	.word	0x40010000
 80089b4:	40010800 	.word	0x40010800
 80089b8:	40010c00 	.word	0x40010c00
 80089bc:	40011000 	.word	0x40011000
 80089c0:	40011400 	.word	0x40011400
 80089c4:	40011800 	.word	0x40011800
 80089c8:	40011c00 	.word	0x40011c00
 80089cc:	40010400 	.word	0x40010400

080089d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b085      	sub	sp, #20
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	460b      	mov	r3, r1
 80089da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	689a      	ldr	r2, [r3, #8]
 80089e0:	887b      	ldrh	r3, [r7, #2]
 80089e2:	4013      	ands	r3, r2
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d002      	beq.n	80089ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80089e8:	2301      	movs	r3, #1
 80089ea:	73fb      	strb	r3, [r7, #15]
 80089ec:	e001      	b.n	80089f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80089ee:	2300      	movs	r3, #0
 80089f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80089f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80089f4:	4618      	mov	r0, r3
 80089f6:	3714      	adds	r7, #20
 80089f8:	46bd      	mov	sp, r7
 80089fa:	bc80      	pop	{r7}
 80089fc:	4770      	bx	lr

080089fe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80089fe:	b480      	push	{r7}
 8008a00:	b083      	sub	sp, #12
 8008a02:	af00      	add	r7, sp, #0
 8008a04:	6078      	str	r0, [r7, #4]
 8008a06:	460b      	mov	r3, r1
 8008a08:	807b      	strh	r3, [r7, #2]
 8008a0a:	4613      	mov	r3, r2
 8008a0c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008a0e:	787b      	ldrb	r3, [r7, #1]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d003      	beq.n	8008a1c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008a14:	887a      	ldrh	r2, [r7, #2]
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8008a1a:	e003      	b.n	8008a24 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8008a1c:	887b      	ldrh	r3, [r7, #2]
 8008a1e:	041a      	lsls	r2, r3, #16
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	611a      	str	r2, [r3, #16]
}
 8008a24:	bf00      	nop
 8008a26:	370c      	adds	r7, #12
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bc80      	pop	{r7}
 8008a2c:	4770      	bx	lr

08008a2e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8008a2e:	b480      	push	{r7}
 8008a30:	b085      	sub	sp, #20
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	6078      	str	r0, [r7, #4]
 8008a36:	460b      	mov	r3, r1
 8008a38:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	68db      	ldr	r3, [r3, #12]
 8008a3e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008a40:	887a      	ldrh	r2, [r7, #2]
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	4013      	ands	r3, r2
 8008a46:	041a      	lsls	r2, r3, #16
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	43d9      	mvns	r1, r3
 8008a4c:	887b      	ldrh	r3, [r7, #2]
 8008a4e:	400b      	ands	r3, r1
 8008a50:	431a      	orrs	r2, r3
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	611a      	str	r2, [r3, #16]
}
 8008a56:	bf00      	nop
 8008a58:	3714      	adds	r7, #20
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	bc80      	pop	{r7}
 8008a5e:	4770      	bx	lr

08008a60 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d101      	bne.n	8008a72 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	e12b      	b.n	8008cca <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a78:	b2db      	uxtb	r3, r3
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d106      	bne.n	8008a8c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	2200      	movs	r2, #0
 8008a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8008a86:	6878      	ldr	r0, [r7, #4]
 8008a88:	f7fe fff8 	bl	8007a7c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2224      	movs	r2, #36	; 0x24
 8008a90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	681a      	ldr	r2, [r3, #0]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f022 0201 	bic.w	r2, r2, #1
 8008aa2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	681a      	ldr	r2, [r3, #0]
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008ab2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	681a      	ldr	r2, [r3, #0]
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008ac2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8008ac4:	f001 fdb8 	bl	800a638 <HAL_RCC_GetPCLK1Freq>
 8008ac8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	4a81      	ldr	r2, [pc, #516]	; (8008cd4 <HAL_I2C_Init+0x274>)
 8008ad0:	4293      	cmp	r3, r2
 8008ad2:	d807      	bhi.n	8008ae4 <HAL_I2C_Init+0x84>
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	4a80      	ldr	r2, [pc, #512]	; (8008cd8 <HAL_I2C_Init+0x278>)
 8008ad8:	4293      	cmp	r3, r2
 8008ada:	bf94      	ite	ls
 8008adc:	2301      	movls	r3, #1
 8008ade:	2300      	movhi	r3, #0
 8008ae0:	b2db      	uxtb	r3, r3
 8008ae2:	e006      	b.n	8008af2 <HAL_I2C_Init+0x92>
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	4a7d      	ldr	r2, [pc, #500]	; (8008cdc <HAL_I2C_Init+0x27c>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	bf94      	ite	ls
 8008aec:	2301      	movls	r3, #1
 8008aee:	2300      	movhi	r3, #0
 8008af0:	b2db      	uxtb	r3, r3
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d001      	beq.n	8008afa <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8008af6:	2301      	movs	r3, #1
 8008af8:	e0e7      	b.n	8008cca <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	4a78      	ldr	r2, [pc, #480]	; (8008ce0 <HAL_I2C_Init+0x280>)
 8008afe:	fba2 2303 	umull	r2, r3, r2, r3
 8008b02:	0c9b      	lsrs	r3, r3, #18
 8008b04:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	68ba      	ldr	r2, [r7, #8]
 8008b16:	430a      	orrs	r2, r1
 8008b18:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	6a1b      	ldr	r3, [r3, #32]
 8008b20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	685b      	ldr	r3, [r3, #4]
 8008b28:	4a6a      	ldr	r2, [pc, #424]	; (8008cd4 <HAL_I2C_Init+0x274>)
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d802      	bhi.n	8008b34 <HAL_I2C_Init+0xd4>
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	3301      	adds	r3, #1
 8008b32:	e009      	b.n	8008b48 <HAL_I2C_Init+0xe8>
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8008b3a:	fb02 f303 	mul.w	r3, r2, r3
 8008b3e:	4a69      	ldr	r2, [pc, #420]	; (8008ce4 <HAL_I2C_Init+0x284>)
 8008b40:	fba2 2303 	umull	r2, r3, r2, r3
 8008b44:	099b      	lsrs	r3, r3, #6
 8008b46:	3301      	adds	r3, #1
 8008b48:	687a      	ldr	r2, [r7, #4]
 8008b4a:	6812      	ldr	r2, [r2, #0]
 8008b4c:	430b      	orrs	r3, r1
 8008b4e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	69db      	ldr	r3, [r3, #28]
 8008b56:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8008b5a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	685b      	ldr	r3, [r3, #4]
 8008b62:	495c      	ldr	r1, [pc, #368]	; (8008cd4 <HAL_I2C_Init+0x274>)
 8008b64:	428b      	cmp	r3, r1
 8008b66:	d819      	bhi.n	8008b9c <HAL_I2C_Init+0x13c>
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	1e59      	subs	r1, r3, #1
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	005b      	lsls	r3, r3, #1
 8008b72:	fbb1 f3f3 	udiv	r3, r1, r3
 8008b76:	1c59      	adds	r1, r3, #1
 8008b78:	f640 73fc 	movw	r3, #4092	; 0xffc
 8008b7c:	400b      	ands	r3, r1
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d00a      	beq.n	8008b98 <HAL_I2C_Init+0x138>
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	1e59      	subs	r1, r3, #1
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	685b      	ldr	r3, [r3, #4]
 8008b8a:	005b      	lsls	r3, r3, #1
 8008b8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8008b90:	3301      	adds	r3, #1
 8008b92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008b96:	e051      	b.n	8008c3c <HAL_I2C_Init+0x1dc>
 8008b98:	2304      	movs	r3, #4
 8008b9a:	e04f      	b.n	8008c3c <HAL_I2C_Init+0x1dc>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	689b      	ldr	r3, [r3, #8]
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d111      	bne.n	8008bc8 <HAL_I2C_Init+0x168>
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	1e58      	subs	r0, r3, #1
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	6859      	ldr	r1, [r3, #4]
 8008bac:	460b      	mov	r3, r1
 8008bae:	005b      	lsls	r3, r3, #1
 8008bb0:	440b      	add	r3, r1
 8008bb2:	fbb0 f3f3 	udiv	r3, r0, r3
 8008bb6:	3301      	adds	r3, #1
 8008bb8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	bf0c      	ite	eq
 8008bc0:	2301      	moveq	r3, #1
 8008bc2:	2300      	movne	r3, #0
 8008bc4:	b2db      	uxtb	r3, r3
 8008bc6:	e012      	b.n	8008bee <HAL_I2C_Init+0x18e>
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	1e58      	subs	r0, r3, #1
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6859      	ldr	r1, [r3, #4]
 8008bd0:	460b      	mov	r3, r1
 8008bd2:	009b      	lsls	r3, r3, #2
 8008bd4:	440b      	add	r3, r1
 8008bd6:	0099      	lsls	r1, r3, #2
 8008bd8:	440b      	add	r3, r1
 8008bda:	fbb0 f3f3 	udiv	r3, r0, r3
 8008bde:	3301      	adds	r3, #1
 8008be0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	bf0c      	ite	eq
 8008be8:	2301      	moveq	r3, #1
 8008bea:	2300      	movne	r3, #0
 8008bec:	b2db      	uxtb	r3, r3
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d001      	beq.n	8008bf6 <HAL_I2C_Init+0x196>
 8008bf2:	2301      	movs	r3, #1
 8008bf4:	e022      	b.n	8008c3c <HAL_I2C_Init+0x1dc>
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d10e      	bne.n	8008c1c <HAL_I2C_Init+0x1bc>
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	1e58      	subs	r0, r3, #1
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	6859      	ldr	r1, [r3, #4]
 8008c06:	460b      	mov	r3, r1
 8008c08:	005b      	lsls	r3, r3, #1
 8008c0a:	440b      	add	r3, r1
 8008c0c:	fbb0 f3f3 	udiv	r3, r0, r3
 8008c10:	3301      	adds	r3, #1
 8008c12:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008c1a:	e00f      	b.n	8008c3c <HAL_I2C_Init+0x1dc>
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	1e58      	subs	r0, r3, #1
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	6859      	ldr	r1, [r3, #4]
 8008c24:	460b      	mov	r3, r1
 8008c26:	009b      	lsls	r3, r3, #2
 8008c28:	440b      	add	r3, r1
 8008c2a:	0099      	lsls	r1, r3, #2
 8008c2c:	440b      	add	r3, r1
 8008c2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8008c32:	3301      	adds	r3, #1
 8008c34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008c38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008c3c:	6879      	ldr	r1, [r7, #4]
 8008c3e:	6809      	ldr	r1, [r1, #0]
 8008c40:	4313      	orrs	r3, r2
 8008c42:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	69da      	ldr	r2, [r3, #28]
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6a1b      	ldr	r3, [r3, #32]
 8008c56:	431a      	orrs	r2, r3
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	430a      	orrs	r2, r1
 8008c5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	689b      	ldr	r3, [r3, #8]
 8008c66:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8008c6a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008c6e:	687a      	ldr	r2, [r7, #4]
 8008c70:	6911      	ldr	r1, [r2, #16]
 8008c72:	687a      	ldr	r2, [r7, #4]
 8008c74:	68d2      	ldr	r2, [r2, #12]
 8008c76:	4311      	orrs	r1, r2
 8008c78:	687a      	ldr	r2, [r7, #4]
 8008c7a:	6812      	ldr	r2, [r2, #0]
 8008c7c:	430b      	orrs	r3, r1
 8008c7e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	68db      	ldr	r3, [r3, #12]
 8008c86:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	695a      	ldr	r2, [r3, #20]
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	699b      	ldr	r3, [r3, #24]
 8008c92:	431a      	orrs	r2, r3
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	430a      	orrs	r2, r1
 8008c9a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	681a      	ldr	r2, [r3, #0]
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f042 0201 	orr.w	r2, r2, #1
 8008caa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2220      	movs	r2, #32
 8008cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008cc8:	2300      	movs	r3, #0
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3710      	adds	r7, #16
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	bd80      	pop	{r7, pc}
 8008cd2:	bf00      	nop
 8008cd4:	000186a0 	.word	0x000186a0
 8008cd8:	001e847f 	.word	0x001e847f
 8008cdc:	003d08ff 	.word	0x003d08ff
 8008ce0:	431bde83 	.word	0x431bde83
 8008ce4:	10624dd3 	.word	0x10624dd3

08008ce8 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b082      	sub	sp, #8
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d101      	bne.n	8008cfa <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	e021      	b.n	8008d3e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	2224      	movs	r2, #36	; 0x24
 8008cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	681a      	ldr	r2, [r3, #0]
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	f022 0201 	bic.w	r2, r2, #1
 8008d10:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f7fe fef0 	bl	8007af8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State         = HAL_I2C_STATE_RESET;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2200      	movs	r2, #0
 8008d22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2200      	movs	r2, #0
 8008d2a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2200      	movs	r2, #0
 8008d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d3c:	2300      	movs	r3, #0
}
 8008d3e:	4618      	mov	r0, r3
 8008d40:	3708      	adds	r7, #8
 8008d42:	46bd      	mov	sp, r7
 8008d44:	bd80      	pop	{r7, pc}
	...

08008d48 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b088      	sub	sp, #32
 8008d4c:	af02      	add	r7, sp, #8
 8008d4e:	60f8      	str	r0, [r7, #12]
 8008d50:	607a      	str	r2, [r7, #4]
 8008d52:	461a      	mov	r2, r3
 8008d54:	460b      	mov	r3, r1
 8008d56:	817b      	strh	r3, [r7, #10]
 8008d58:	4613      	mov	r3, r2
 8008d5a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008d5c:	f7ff f85e 	bl	8007e1c <HAL_GetTick>
 8008d60:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d68:	b2db      	uxtb	r3, r3
 8008d6a:	2b20      	cmp	r3, #32
 8008d6c:	f040 80e0 	bne.w	8008f30 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	9300      	str	r3, [sp, #0]
 8008d74:	2319      	movs	r3, #25
 8008d76:	2201      	movs	r2, #1
 8008d78:	4970      	ldr	r1, [pc, #448]	; (8008f3c <HAL_I2C_Master_Transmit+0x1f4>)
 8008d7a:	68f8      	ldr	r0, [r7, #12]
 8008d7c:	f000 fe5c 	bl	8009a38 <I2C_WaitOnFlagUntilTimeout>
 8008d80:	4603      	mov	r3, r0
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d001      	beq.n	8008d8a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8008d86:	2302      	movs	r3, #2
 8008d88:	e0d3      	b.n	8008f32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d90:	2b01      	cmp	r3, #1
 8008d92:	d101      	bne.n	8008d98 <HAL_I2C_Master_Transmit+0x50>
 8008d94:	2302      	movs	r3, #2
 8008d96:	e0cc      	b.n	8008f32 <HAL_I2C_Master_Transmit+0x1ea>
 8008d98:	68fb      	ldr	r3, [r7, #12]
 8008d9a:	2201      	movs	r2, #1
 8008d9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	f003 0301 	and.w	r3, r3, #1
 8008daa:	2b01      	cmp	r3, #1
 8008dac:	d007      	beq.n	8008dbe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	681a      	ldr	r2, [r3, #0]
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	f042 0201 	orr.w	r2, r2, #1
 8008dbc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	681a      	ldr	r2, [r3, #0]
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008dcc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	2221      	movs	r2, #33	; 0x21
 8008dd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2210      	movs	r2, #16
 8008dda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	2200      	movs	r2, #0
 8008de2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	687a      	ldr	r2, [r7, #4]
 8008de8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	893a      	ldrh	r2, [r7, #8]
 8008dee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008df4:	b29a      	uxth	r2, r3
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	4a50      	ldr	r2, [pc, #320]	; (8008f40 <HAL_I2C_Master_Transmit+0x1f8>)
 8008dfe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8008e00:	8979      	ldrh	r1, [r7, #10]
 8008e02:	697b      	ldr	r3, [r7, #20]
 8008e04:	6a3a      	ldr	r2, [r7, #32]
 8008e06:	68f8      	ldr	r0, [r7, #12]
 8008e08:	f000 fc16 	bl	8009638 <I2C_MasterRequestWrite>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d001      	beq.n	8008e16 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8008e12:	2301      	movs	r3, #1
 8008e14:	e08d      	b.n	8008f32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008e16:	2300      	movs	r3, #0
 8008e18:	613b      	str	r3, [r7, #16]
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	695b      	ldr	r3, [r3, #20]
 8008e20:	613b      	str	r3, [r7, #16]
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	699b      	ldr	r3, [r3, #24]
 8008e28:	613b      	str	r3, [r7, #16]
 8008e2a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8008e2c:	e066      	b.n	8008efc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008e2e:	697a      	ldr	r2, [r7, #20]
 8008e30:	6a39      	ldr	r1, [r7, #32]
 8008e32:	68f8      	ldr	r0, [r7, #12]
 8008e34:	f000 ff1a 	bl	8009c6c <I2C_WaitOnTXEFlagUntilTimeout>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d00d      	beq.n	8008e5a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e42:	2b04      	cmp	r3, #4
 8008e44:	d107      	bne.n	8008e56 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	681a      	ldr	r2, [r3, #0]
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008e54:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008e56:	2301      	movs	r3, #1
 8008e58:	e06b      	b.n	8008f32 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e5e:	781a      	ldrb	r2, [r3, #0]
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e6a:	1c5a      	adds	r2, r3, #1
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e74:	b29b      	uxth	r3, r3
 8008e76:	3b01      	subs	r3, #1
 8008e78:	b29a      	uxth	r2, r3
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e82:	3b01      	subs	r3, #1
 8008e84:	b29a      	uxth	r2, r3
 8008e86:	68fb      	ldr	r3, [r7, #12]
 8008e88:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	695b      	ldr	r3, [r3, #20]
 8008e90:	f003 0304 	and.w	r3, r3, #4
 8008e94:	2b04      	cmp	r3, #4
 8008e96:	d11b      	bne.n	8008ed0 <HAL_I2C_Master_Transmit+0x188>
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	d017      	beq.n	8008ed0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ea4:	781a      	ldrb	r2, [r3, #0]
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb0:	1c5a      	adds	r2, r3, #1
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008eba:	b29b      	uxth	r3, r3
 8008ebc:	3b01      	subs	r3, #1
 8008ebe:	b29a      	uxth	r2, r3
 8008ec0:	68fb      	ldr	r3, [r7, #12]
 8008ec2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ec8:	3b01      	subs	r3, #1
 8008eca:	b29a      	uxth	r2, r3
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ed0:	697a      	ldr	r2, [r7, #20]
 8008ed2:	6a39      	ldr	r1, [r7, #32]
 8008ed4:	68f8      	ldr	r0, [r7, #12]
 8008ed6:	f000 ff11 	bl	8009cfc <I2C_WaitOnBTFFlagUntilTimeout>
 8008eda:	4603      	mov	r3, r0
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d00d      	beq.n	8008efc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ee4:	2b04      	cmp	r3, #4
 8008ee6:	d107      	bne.n	8008ef8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	681a      	ldr	r2, [r3, #0]
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	681b      	ldr	r3, [r3, #0]
 8008ef2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008ef6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8008ef8:	2301      	movs	r3, #1
 8008efa:	e01a      	b.n	8008f32 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d194      	bne.n	8008e2e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	681a      	ldr	r2, [r3, #0]
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008f12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2220      	movs	r2, #32
 8008f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	2200      	movs	r2, #0
 8008f28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	e000      	b.n	8008f32 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8008f30:	2302      	movs	r3, #2
  }
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3718      	adds	r7, #24
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
 8008f3a:	bf00      	nop
 8008f3c:	00100002 	.word	0x00100002
 8008f40:	ffff0000 	.word	0xffff0000

08008f44 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b088      	sub	sp, #32
 8008f48:	af02      	add	r7, sp, #8
 8008f4a:	60f8      	str	r0, [r7, #12]
 8008f4c:	4608      	mov	r0, r1
 8008f4e:	4611      	mov	r1, r2
 8008f50:	461a      	mov	r2, r3
 8008f52:	4603      	mov	r3, r0
 8008f54:	817b      	strh	r3, [r7, #10]
 8008f56:	460b      	mov	r3, r1
 8008f58:	813b      	strh	r3, [r7, #8]
 8008f5a:	4613      	mov	r3, r2
 8008f5c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8008f5e:	f7fe ff5d 	bl	8007e1c <HAL_GetTick>
 8008f62:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008f6a:	b2db      	uxtb	r3, r3
 8008f6c:	2b20      	cmp	r3, #32
 8008f6e:	f040 80d9 	bne.w	8009124 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8008f72:	697b      	ldr	r3, [r7, #20]
 8008f74:	9300      	str	r3, [sp, #0]
 8008f76:	2319      	movs	r3, #25
 8008f78:	2201      	movs	r2, #1
 8008f7a:	496d      	ldr	r1, [pc, #436]	; (8009130 <HAL_I2C_Mem_Write+0x1ec>)
 8008f7c:	68f8      	ldr	r0, [r7, #12]
 8008f7e:	f000 fd5b 	bl	8009a38 <I2C_WaitOnFlagUntilTimeout>
 8008f82:	4603      	mov	r3, r0
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d001      	beq.n	8008f8c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8008f88:	2302      	movs	r3, #2
 8008f8a:	e0cc      	b.n	8009126 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f92:	2b01      	cmp	r3, #1
 8008f94:	d101      	bne.n	8008f9a <HAL_I2C_Mem_Write+0x56>
 8008f96:	2302      	movs	r3, #2
 8008f98:	e0c5      	b.n	8009126 <HAL_I2C_Mem_Write+0x1e2>
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	2201      	movs	r2, #1
 8008f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8008fa2:	68fb      	ldr	r3, [r7, #12]
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f003 0301 	and.w	r3, r3, #1
 8008fac:	2b01      	cmp	r3, #1
 8008fae:	d007      	beq.n	8008fc0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	681a      	ldr	r2, [r3, #0]
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	f042 0201 	orr.w	r2, r2, #1
 8008fbe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	681a      	ldr	r2, [r3, #0]
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008fce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	2221      	movs	r2, #33	; 0x21
 8008fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2240      	movs	r2, #64	; 0x40
 8008fdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8008fe6:	68fb      	ldr	r3, [r7, #12]
 8008fe8:	6a3a      	ldr	r2, [r7, #32]
 8008fea:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008ff0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ff6:	b29a      	uxth	r2, r3
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	4a4d      	ldr	r2, [pc, #308]	; (8009134 <HAL_I2C_Mem_Write+0x1f0>)
 8009000:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009002:	88f8      	ldrh	r0, [r7, #6]
 8009004:	893a      	ldrh	r2, [r7, #8]
 8009006:	8979      	ldrh	r1, [r7, #10]
 8009008:	697b      	ldr	r3, [r7, #20]
 800900a:	9301      	str	r3, [sp, #4]
 800900c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800900e:	9300      	str	r3, [sp, #0]
 8009010:	4603      	mov	r3, r0
 8009012:	68f8      	ldr	r0, [r7, #12]
 8009014:	f000 fb92 	bl	800973c <I2C_RequestMemoryWrite>
 8009018:	4603      	mov	r3, r0
 800901a:	2b00      	cmp	r3, #0
 800901c:	d052      	beq.n	80090c4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800901e:	2301      	movs	r3, #1
 8009020:	e081      	b.n	8009126 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009022:	697a      	ldr	r2, [r7, #20]
 8009024:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009026:	68f8      	ldr	r0, [r7, #12]
 8009028:	f000 fe20 	bl	8009c6c <I2C_WaitOnTXEFlagUntilTimeout>
 800902c:	4603      	mov	r3, r0
 800902e:	2b00      	cmp	r3, #0
 8009030:	d00d      	beq.n	800904e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009036:	2b04      	cmp	r3, #4
 8009038:	d107      	bne.n	800904a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	681a      	ldr	r2, [r3, #0]
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009048:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800904a:	2301      	movs	r3, #1
 800904c:	e06b      	b.n	8009126 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009052:	781a      	ldrb	r2, [r3, #0]
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800905e:	1c5a      	adds	r2, r3, #1
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009068:	3b01      	subs	r3, #1
 800906a:	b29a      	uxth	r2, r3
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8009070:	68fb      	ldr	r3, [r7, #12]
 8009072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009074:	b29b      	uxth	r3, r3
 8009076:	3b01      	subs	r3, #1
 8009078:	b29a      	uxth	r2, r3
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	695b      	ldr	r3, [r3, #20]
 8009084:	f003 0304 	and.w	r3, r3, #4
 8009088:	2b04      	cmp	r3, #4
 800908a:	d11b      	bne.n	80090c4 <HAL_I2C_Mem_Write+0x180>
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009090:	2b00      	cmp	r3, #0
 8009092:	d017      	beq.n	80090c4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009098:	781a      	ldrb	r2, [r3, #0]
 800909a:	68fb      	ldr	r3, [r7, #12]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090a4:	1c5a      	adds	r2, r3, #1
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090ae:	3b01      	subs	r3, #1
 80090b0:	b29a      	uxth	r2, r3
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80090ba:	b29b      	uxth	r3, r3
 80090bc:	3b01      	subs	r3, #1
 80090be:	b29a      	uxth	r2, r3
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d1aa      	bne.n	8009022 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80090cc:	697a      	ldr	r2, [r7, #20]
 80090ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090d0:	68f8      	ldr	r0, [r7, #12]
 80090d2:	f000 fe13 	bl	8009cfc <I2C_WaitOnBTFFlagUntilTimeout>
 80090d6:	4603      	mov	r3, r0
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d00d      	beq.n	80090f8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090e0:	2b04      	cmp	r3, #4
 80090e2:	d107      	bne.n	80090f4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80090e4:	68fb      	ldr	r3, [r7, #12]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	681a      	ldr	r2, [r3, #0]
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80090f2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80090f4:	2301      	movs	r3, #1
 80090f6:	e016      	b.n	8009126 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	681a      	ldr	r2, [r3, #0]
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009106:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	2220      	movs	r2, #32
 800910c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2200      	movs	r2, #0
 8009114:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	2200      	movs	r2, #0
 800911c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009120:	2300      	movs	r3, #0
 8009122:	e000      	b.n	8009126 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009124:	2302      	movs	r3, #2
  }
}
 8009126:	4618      	mov	r0, r3
 8009128:	3718      	adds	r7, #24
 800912a:	46bd      	mov	sp, r7
 800912c:	bd80      	pop	{r7, pc}
 800912e:	bf00      	nop
 8009130:	00100002 	.word	0x00100002
 8009134:	ffff0000 	.word	0xffff0000

08009138 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b08c      	sub	sp, #48	; 0x30
 800913c:	af02      	add	r7, sp, #8
 800913e:	60f8      	str	r0, [r7, #12]
 8009140:	4608      	mov	r0, r1
 8009142:	4611      	mov	r1, r2
 8009144:	461a      	mov	r2, r3
 8009146:	4603      	mov	r3, r0
 8009148:	817b      	strh	r3, [r7, #10]
 800914a:	460b      	mov	r3, r1
 800914c:	813b      	strh	r3, [r7, #8]
 800914e:	4613      	mov	r3, r2
 8009150:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 8009152:	2300      	movs	r3, #0
 8009154:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009156:	f7fe fe61 	bl	8007e1c <HAL_GetTick>
 800915a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009162:	b2db      	uxtb	r3, r3
 8009164:	2b20      	cmp	r3, #32
 8009166:	f040 8244 	bne.w	80095f2 <HAL_I2C_Mem_Read+0x4ba>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800916a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800916c:	9300      	str	r3, [sp, #0]
 800916e:	2319      	movs	r3, #25
 8009170:	2201      	movs	r2, #1
 8009172:	4982      	ldr	r1, [pc, #520]	; (800937c <HAL_I2C_Mem_Read+0x244>)
 8009174:	68f8      	ldr	r0, [r7, #12]
 8009176:	f000 fc5f 	bl	8009a38 <I2C_WaitOnFlagUntilTimeout>
 800917a:	4603      	mov	r3, r0
 800917c:	2b00      	cmp	r3, #0
 800917e:	d001      	beq.n	8009184 <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8009180:	2302      	movs	r3, #2
 8009182:	e237      	b.n	80095f4 <HAL_I2C_Mem_Read+0x4bc>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800918a:	2b01      	cmp	r3, #1
 800918c:	d101      	bne.n	8009192 <HAL_I2C_Mem_Read+0x5a>
 800918e:	2302      	movs	r3, #2
 8009190:	e230      	b.n	80095f4 <HAL_I2C_Mem_Read+0x4bc>
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2201      	movs	r2, #1
 8009196:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	681b      	ldr	r3, [r3, #0]
 80091a0:	f003 0301 	and.w	r3, r3, #1
 80091a4:	2b01      	cmp	r3, #1
 80091a6:	d007      	beq.n	80091b8 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	681a      	ldr	r2, [r3, #0]
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f042 0201 	orr.w	r2, r2, #1
 80091b6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	681a      	ldr	r2, [r3, #0]
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80091c6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	2222      	movs	r2, #34	; 0x22
 80091cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2240      	movs	r2, #64	; 0x40
 80091d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	2200      	movs	r2, #0
 80091dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80091e2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80091e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80091ee:	b29a      	uxth	r2, r3
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	4a62      	ldr	r2, [pc, #392]	; (8009380 <HAL_I2C_Mem_Read+0x248>)
 80091f8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80091fa:	88f8      	ldrh	r0, [r7, #6]
 80091fc:	893a      	ldrh	r2, [r7, #8]
 80091fe:	8979      	ldrh	r1, [r7, #10]
 8009200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009202:	9301      	str	r3, [sp, #4]
 8009204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009206:	9300      	str	r3, [sp, #0]
 8009208:	4603      	mov	r3, r0
 800920a:	68f8      	ldr	r0, [r7, #12]
 800920c:	f000 fb2c 	bl	8009868 <I2C_RequestMemoryRead>
 8009210:	4603      	mov	r3, r0
 8009212:	2b00      	cmp	r3, #0
 8009214:	d001      	beq.n	800921a <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 8009216:	2301      	movs	r3, #1
 8009218:	e1ec      	b.n	80095f4 <HAL_I2C_Mem_Read+0x4bc>
    }

    if (hi2c->XferSize == 0U)
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800921e:	2b00      	cmp	r3, #0
 8009220:	d113      	bne.n	800924a <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009222:	2300      	movs	r3, #0
 8009224:	61fb      	str	r3, [r7, #28]
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	695b      	ldr	r3, [r3, #20]
 800922c:	61fb      	str	r3, [r7, #28]
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	699b      	ldr	r3, [r3, #24]
 8009234:	61fb      	str	r3, [r7, #28]
 8009236:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	681a      	ldr	r2, [r3, #0]
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009246:	601a      	str	r2, [r3, #0]
 8009248:	e1c0      	b.n	80095cc <HAL_I2C_Mem_Read+0x494>
    }
    else if (hi2c->XferSize == 1U)
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800924e:	2b01      	cmp	r3, #1
 8009250:	d11e      	bne.n	8009290 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	681a      	ldr	r2, [r3, #0]
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009260:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009262:	b672      	cpsid	i
}
 8009264:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009266:	2300      	movs	r3, #0
 8009268:	61bb      	str	r3, [r7, #24]
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	695b      	ldr	r3, [r3, #20]
 8009270:	61bb      	str	r3, [r7, #24]
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	699b      	ldr	r3, [r3, #24]
 8009278:	61bb      	str	r3, [r7, #24]
 800927a:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	681a      	ldr	r2, [r3, #0]
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800928a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800928c:	b662      	cpsie	i
}
 800928e:	e035      	b.n	80092fc <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009294:	2b02      	cmp	r3, #2
 8009296:	d11e      	bne.n	80092d6 <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	681a      	ldr	r2, [r3, #0]
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80092a6:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80092a8:	b672      	cpsid	i
}
 80092aa:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80092ac:	2300      	movs	r3, #0
 80092ae:	617b      	str	r3, [r7, #20]
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	695b      	ldr	r3, [r3, #20]
 80092b6:	617b      	str	r3, [r7, #20]
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	699b      	ldr	r3, [r3, #24]
 80092be:	617b      	str	r3, [r7, #20]
 80092c0:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	681a      	ldr	r2, [r3, #0]
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80092d0:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80092d2:	b662      	cpsie	i
}
 80092d4:	e012      	b.n	80092fc <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	681a      	ldr	r2, [r3, #0]
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80092e4:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80092e6:	2300      	movs	r3, #0
 80092e8:	613b      	str	r3, [r7, #16]
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	695b      	ldr	r3, [r3, #20]
 80092f0:	613b      	str	r3, [r7, #16]
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	699b      	ldr	r3, [r3, #24]
 80092f8:	613b      	str	r3, [r7, #16]
 80092fa:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80092fc:	e166      	b.n	80095cc <HAL_I2C_Mem_Read+0x494>
    {
      if (hi2c->XferSize <= 3U)
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009302:	2b03      	cmp	r3, #3
 8009304:	f200 811f 	bhi.w	8009546 <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800930c:	2b01      	cmp	r3, #1
 800930e:	d123      	bne.n	8009358 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009310:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009312:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009314:	68f8      	ldr	r0, [r7, #12]
 8009316:	f000 fd39 	bl	8009d8c <I2C_WaitOnRXNEFlagUntilTimeout>
 800931a:	4603      	mov	r3, r0
 800931c:	2b00      	cmp	r3, #0
 800931e:	d001      	beq.n	8009324 <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8009320:	2301      	movs	r3, #1
 8009322:	e167      	b.n	80095f4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	691a      	ldr	r2, [r3, #16]
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800932e:	b2d2      	uxtb	r2, r2
 8009330:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009336:	1c5a      	adds	r2, r3, #1
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009340:	3b01      	subs	r3, #1
 8009342:	b29a      	uxth	r2, r3
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800934c:	b29b      	uxth	r3, r3
 800934e:	3b01      	subs	r3, #1
 8009350:	b29a      	uxth	r2, r3
 8009352:	68fb      	ldr	r3, [r7, #12]
 8009354:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009356:	e139      	b.n	80095cc <HAL_I2C_Mem_Read+0x494>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800935c:	2b02      	cmp	r3, #2
 800935e:	d152      	bne.n	8009406 <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009362:	9300      	str	r3, [sp, #0]
 8009364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009366:	2200      	movs	r2, #0
 8009368:	4906      	ldr	r1, [pc, #24]	; (8009384 <HAL_I2C_Mem_Read+0x24c>)
 800936a:	68f8      	ldr	r0, [r7, #12]
 800936c:	f000 fb64 	bl	8009a38 <I2C_WaitOnFlagUntilTimeout>
 8009370:	4603      	mov	r3, r0
 8009372:	2b00      	cmp	r3, #0
 8009374:	d008      	beq.n	8009388 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8009376:	2301      	movs	r3, #1
 8009378:	e13c      	b.n	80095f4 <HAL_I2C_Mem_Read+0x4bc>
 800937a:	bf00      	nop
 800937c:	00100002 	.word	0x00100002
 8009380:	ffff0000 	.word	0xffff0000
 8009384:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8009388:	b672      	cpsid	i
}
 800938a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	681a      	ldr	r2, [r3, #0]
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800939a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	691a      	ldr	r2, [r3, #16]
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093a6:	b2d2      	uxtb	r2, r2
 80093a8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093ae:	1c5a      	adds	r2, r3, #1
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093b8:	3b01      	subs	r3, #1
 80093ba:	b29a      	uxth	r2, r3
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093c4:	b29b      	uxth	r3, r3
 80093c6:	3b01      	subs	r3, #1
 80093c8:	b29a      	uxth	r2, r3
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80093ce:	b662      	cpsie	i
}
 80093d0:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	691a      	ldr	r2, [r3, #16]
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093dc:	b2d2      	uxtb	r2, r2
 80093de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093e4:	1c5a      	adds	r2, r3, #1
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80093ee:	3b01      	subs	r3, #1
 80093f0:	b29a      	uxth	r2, r3
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80093fa:	b29b      	uxth	r3, r3
 80093fc:	3b01      	subs	r3, #1
 80093fe:	b29a      	uxth	r2, r3
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009404:	e0e2      	b.n	80095cc <HAL_I2C_Mem_Read+0x494>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009408:	9300      	str	r3, [sp, #0]
 800940a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800940c:	2200      	movs	r2, #0
 800940e:	497b      	ldr	r1, [pc, #492]	; (80095fc <HAL_I2C_Mem_Read+0x4c4>)
 8009410:	68f8      	ldr	r0, [r7, #12]
 8009412:	f000 fb11 	bl	8009a38 <I2C_WaitOnFlagUntilTimeout>
 8009416:	4603      	mov	r3, r0
 8009418:	2b00      	cmp	r3, #0
 800941a:	d001      	beq.n	8009420 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 800941c:	2301      	movs	r3, #1
 800941e:	e0e9      	b.n	80095f4 <HAL_I2C_Mem_Read+0x4bc>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	681a      	ldr	r2, [r3, #0]
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800942e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8009430:	b672      	cpsid	i
}
 8009432:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	681b      	ldr	r3, [r3, #0]
 8009438:	691a      	ldr	r2, [r3, #16]
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800943e:	b2d2      	uxtb	r2, r2
 8009440:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009446:	1c5a      	adds	r2, r3, #1
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009450:	3b01      	subs	r3, #1
 8009452:	b29a      	uxth	r2, r3
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800945c:	b29b      	uxth	r3, r3
 800945e:	3b01      	subs	r3, #1
 8009460:	b29a      	uxth	r2, r3
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8009466:	4b66      	ldr	r3, [pc, #408]	; (8009600 <HAL_I2C_Mem_Read+0x4c8>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	08db      	lsrs	r3, r3, #3
 800946c:	4a65      	ldr	r2, [pc, #404]	; (8009604 <HAL_I2C_Mem_Read+0x4cc>)
 800946e:	fba2 2303 	umull	r2, r3, r2, r3
 8009472:	0a1a      	lsrs	r2, r3, #8
 8009474:	4613      	mov	r3, r2
 8009476:	009b      	lsls	r3, r3, #2
 8009478:	4413      	add	r3, r2
 800947a:	00da      	lsls	r2, r3, #3
 800947c:	1ad3      	subs	r3, r2, r3
 800947e:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8009480:	6a3b      	ldr	r3, [r7, #32]
 8009482:	3b01      	subs	r3, #1
 8009484:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8009486:	6a3b      	ldr	r3, [r7, #32]
 8009488:	2b00      	cmp	r3, #0
 800948a:	d118      	bne.n	80094be <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	2200      	movs	r2, #0
 8009490:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	2220      	movs	r2, #32
 8009496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	2200      	movs	r2, #0
 800949e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094a6:	f043 0220 	orr.w	r2, r3, #32
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80094ae:	b662      	cpsie	i
}
 80094b0:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	2200      	movs	r2, #0
 80094b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 80094ba:	2301      	movs	r3, #1
 80094bc:	e09a      	b.n	80095f4 <HAL_I2C_Mem_Read+0x4bc>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	695b      	ldr	r3, [r3, #20]
 80094c4:	f003 0304 	and.w	r3, r3, #4
 80094c8:	2b04      	cmp	r3, #4
 80094ca:	d1d9      	bne.n	8009480 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80094cc:	68fb      	ldr	r3, [r7, #12]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	681a      	ldr	r2, [r3, #0]
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80094da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	691a      	ldr	r2, [r3, #16]
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094e6:	b2d2      	uxtb	r2, r2
 80094e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094ee:	1c5a      	adds	r2, r3, #1
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80094f4:	68fb      	ldr	r3, [r7, #12]
 80094f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80094f8:	3b01      	subs	r3, #1
 80094fa:	b29a      	uxth	r2, r3
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009504:	b29b      	uxth	r3, r3
 8009506:	3b01      	subs	r3, #1
 8009508:	b29a      	uxth	r2, r3
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800950e:	b662      	cpsie	i
}
 8009510:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	691a      	ldr	r2, [r3, #16]
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800951c:	b2d2      	uxtb	r2, r2
 800951e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009524:	1c5a      	adds	r2, r3, #1
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800952e:	3b01      	subs	r3, #1
 8009530:	b29a      	uxth	r2, r3
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800953a:	b29b      	uxth	r3, r3
 800953c:	3b01      	subs	r3, #1
 800953e:	b29a      	uxth	r2, r3
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009544:	e042      	b.n	80095cc <HAL_I2C_Mem_Read+0x494>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009548:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800954a:	68f8      	ldr	r0, [r7, #12]
 800954c:	f000 fc1e 	bl	8009d8c <I2C_WaitOnRXNEFlagUntilTimeout>
 8009550:	4603      	mov	r3, r0
 8009552:	2b00      	cmp	r3, #0
 8009554:	d001      	beq.n	800955a <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8009556:	2301      	movs	r3, #1
 8009558:	e04c      	b.n	80095f4 <HAL_I2C_Mem_Read+0x4bc>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	691a      	ldr	r2, [r3, #16]
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009564:	b2d2      	uxtb	r2, r2
 8009566:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800956c:	1c5a      	adds	r2, r3, #1
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009576:	3b01      	subs	r3, #1
 8009578:	b29a      	uxth	r2, r3
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009582:	b29b      	uxth	r3, r3
 8009584:	3b01      	subs	r3, #1
 8009586:	b29a      	uxth	r2, r3
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	695b      	ldr	r3, [r3, #20]
 8009592:	f003 0304 	and.w	r3, r3, #4
 8009596:	2b04      	cmp	r3, #4
 8009598:	d118      	bne.n	80095cc <HAL_I2C_Mem_Read+0x494>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	691a      	ldr	r2, [r3, #16]
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a4:	b2d2      	uxtb	r2, r2
 80095a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ac:	1c5a      	adds	r2, r3, #1
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095b6:	3b01      	subs	r3, #1
 80095b8:	b29a      	uxth	r2, r3
 80095ba:	68fb      	ldr	r3, [r7, #12]
 80095bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80095c2:	b29b      	uxth	r3, r3
 80095c4:	3b01      	subs	r3, #1
 80095c6:	b29a      	uxth	r2, r3
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	f47f ae94 	bne.w	80092fe <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	2220      	movs	r2, #32
 80095da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	2200      	movs	r2, #0
 80095e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	2200      	movs	r2, #0
 80095ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80095ee:	2300      	movs	r3, #0
 80095f0:	e000      	b.n	80095f4 <HAL_I2C_Mem_Read+0x4bc>
  }
  else
  {
    return HAL_BUSY;
 80095f2:	2302      	movs	r3, #2
  }
}
 80095f4:	4618      	mov	r0, r3
 80095f6:	3728      	adds	r7, #40	; 0x28
 80095f8:	46bd      	mov	sp, r7
 80095fa:	bd80      	pop	{r7, pc}
 80095fc:	00010004 	.word	0x00010004
 8009600:	20000944 	.word	0x20000944
 8009604:	14f8b589 	.word	0x14f8b589

08009608 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8009608:	b480      	push	{r7}
 800960a:	b083      	sub	sp, #12
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009616:	b2db      	uxtb	r3, r3
}
 8009618:	4618      	mov	r0, r3
 800961a:	370c      	adds	r7, #12
 800961c:	46bd      	mov	sp, r7
 800961e:	bc80      	pop	{r7}
 8009620:	4770      	bx	lr

08009622 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 8009622:	b480      	push	{r7}
 8009624:	b083      	sub	sp, #12
 8009626:	af00      	add	r7, sp, #0
 8009628:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800962e:	4618      	mov	r0, r3
 8009630:	370c      	adds	r7, #12
 8009632:	46bd      	mov	sp, r7
 8009634:	bc80      	pop	{r7}
 8009636:	4770      	bx	lr

08009638 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b088      	sub	sp, #32
 800963c:	af02      	add	r7, sp, #8
 800963e:	60f8      	str	r0, [r7, #12]
 8009640:	607a      	str	r2, [r7, #4]
 8009642:	603b      	str	r3, [r7, #0]
 8009644:	460b      	mov	r3, r1
 8009646:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800964c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800964e:	697b      	ldr	r3, [r7, #20]
 8009650:	2b08      	cmp	r3, #8
 8009652:	d006      	beq.n	8009662 <I2C_MasterRequestWrite+0x2a>
 8009654:	697b      	ldr	r3, [r7, #20]
 8009656:	2b01      	cmp	r3, #1
 8009658:	d003      	beq.n	8009662 <I2C_MasterRequestWrite+0x2a>
 800965a:	697b      	ldr	r3, [r7, #20]
 800965c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8009660:	d108      	bne.n	8009674 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	681a      	ldr	r2, [r3, #0]
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009670:	601a      	str	r2, [r3, #0]
 8009672:	e00b      	b.n	800968c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009678:	2b12      	cmp	r3, #18
 800967a:	d107      	bne.n	800968c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	681a      	ldr	r2, [r3, #0]
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800968a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	9300      	str	r3, [sp, #0]
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	2200      	movs	r2, #0
 8009694:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009698:	68f8      	ldr	r0, [r7, #12]
 800969a:	f000 f9cd 	bl	8009a38 <I2C_WaitOnFlagUntilTimeout>
 800969e:	4603      	mov	r3, r0
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d00d      	beq.n	80096c0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096b2:	d103      	bne.n	80096bc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80096ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80096bc:	2303      	movs	r3, #3
 80096be:	e035      	b.n	800972c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	691b      	ldr	r3, [r3, #16]
 80096c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80096c8:	d108      	bne.n	80096dc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80096ca:	897b      	ldrh	r3, [r7, #10]
 80096cc:	b2db      	uxtb	r3, r3
 80096ce:	461a      	mov	r2, r3
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80096d8:	611a      	str	r2, [r3, #16]
 80096da:	e01b      	b.n	8009714 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80096dc:	897b      	ldrh	r3, [r7, #10]
 80096de:	11db      	asrs	r3, r3, #7
 80096e0:	b2db      	uxtb	r3, r3
 80096e2:	f003 0306 	and.w	r3, r3, #6
 80096e6:	b2db      	uxtb	r3, r3
 80096e8:	f063 030f 	orn	r3, r3, #15
 80096ec:	b2da      	uxtb	r2, r3
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	687a      	ldr	r2, [r7, #4]
 80096f8:	490e      	ldr	r1, [pc, #56]	; (8009734 <I2C_MasterRequestWrite+0xfc>)
 80096fa:	68f8      	ldr	r0, [r7, #12]
 80096fc:	f000 fa16 	bl	8009b2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009700:	4603      	mov	r3, r0
 8009702:	2b00      	cmp	r3, #0
 8009704:	d001      	beq.n	800970a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8009706:	2301      	movs	r3, #1
 8009708:	e010      	b.n	800972c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800970a:	897b      	ldrh	r3, [r7, #10]
 800970c:	b2da      	uxtb	r2, r3
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	687a      	ldr	r2, [r7, #4]
 8009718:	4907      	ldr	r1, [pc, #28]	; (8009738 <I2C_MasterRequestWrite+0x100>)
 800971a:	68f8      	ldr	r0, [r7, #12]
 800971c:	f000 fa06 	bl	8009b2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009720:	4603      	mov	r3, r0
 8009722:	2b00      	cmp	r3, #0
 8009724:	d001      	beq.n	800972a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8009726:	2301      	movs	r3, #1
 8009728:	e000      	b.n	800972c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800972a:	2300      	movs	r3, #0
}
 800972c:	4618      	mov	r0, r3
 800972e:	3718      	adds	r7, #24
 8009730:	46bd      	mov	sp, r7
 8009732:	bd80      	pop	{r7, pc}
 8009734:	00010008 	.word	0x00010008
 8009738:	00010002 	.word	0x00010002

0800973c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b088      	sub	sp, #32
 8009740:	af02      	add	r7, sp, #8
 8009742:	60f8      	str	r0, [r7, #12]
 8009744:	4608      	mov	r0, r1
 8009746:	4611      	mov	r1, r2
 8009748:	461a      	mov	r2, r3
 800974a:	4603      	mov	r3, r0
 800974c:	817b      	strh	r3, [r7, #10]
 800974e:	460b      	mov	r3, r1
 8009750:	813b      	strh	r3, [r7, #8]
 8009752:	4613      	mov	r3, r2
 8009754:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	681a      	ldr	r2, [r3, #0]
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009764:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8009766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009768:	9300      	str	r3, [sp, #0]
 800976a:	6a3b      	ldr	r3, [r7, #32]
 800976c:	2200      	movs	r2, #0
 800976e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009772:	68f8      	ldr	r0, [r7, #12]
 8009774:	f000 f960 	bl	8009a38 <I2C_WaitOnFlagUntilTimeout>
 8009778:	4603      	mov	r3, r0
 800977a:	2b00      	cmp	r3, #0
 800977c:	d00d      	beq.n	800979a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	681b      	ldr	r3, [r3, #0]
 8009784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009788:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800978c:	d103      	bne.n	8009796 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009794:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009796:	2303      	movs	r3, #3
 8009798:	e05f      	b.n	800985a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800979a:	897b      	ldrh	r3, [r7, #10]
 800979c:	b2db      	uxtb	r3, r3
 800979e:	461a      	mov	r2, r3
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80097a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80097aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ac:	6a3a      	ldr	r2, [r7, #32]
 80097ae:	492d      	ldr	r1, [pc, #180]	; (8009864 <I2C_RequestMemoryWrite+0x128>)
 80097b0:	68f8      	ldr	r0, [r7, #12]
 80097b2:	f000 f9bb 	bl	8009b2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80097b6:	4603      	mov	r3, r0
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d001      	beq.n	80097c0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80097bc:	2301      	movs	r3, #1
 80097be:	e04c      	b.n	800985a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80097c0:	2300      	movs	r3, #0
 80097c2:	617b      	str	r3, [r7, #20]
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	695b      	ldr	r3, [r3, #20]
 80097ca:	617b      	str	r3, [r7, #20]
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	699b      	ldr	r3, [r3, #24]
 80097d2:	617b      	str	r3, [r7, #20]
 80097d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80097d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097d8:	6a39      	ldr	r1, [r7, #32]
 80097da:	68f8      	ldr	r0, [r7, #12]
 80097dc:	f000 fa46 	bl	8009c6c <I2C_WaitOnTXEFlagUntilTimeout>
 80097e0:	4603      	mov	r3, r0
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d00d      	beq.n	8009802 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097ea:	2b04      	cmp	r3, #4
 80097ec:	d107      	bne.n	80097fe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	681a      	ldr	r2, [r3, #0]
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80097fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80097fe:	2301      	movs	r3, #1
 8009800:	e02b      	b.n	800985a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009802:	88fb      	ldrh	r3, [r7, #6]
 8009804:	2b01      	cmp	r3, #1
 8009806:	d105      	bne.n	8009814 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009808:	893b      	ldrh	r3, [r7, #8]
 800980a:	b2da      	uxtb	r2, r3
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	611a      	str	r2, [r3, #16]
 8009812:	e021      	b.n	8009858 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009814:	893b      	ldrh	r3, [r7, #8]
 8009816:	0a1b      	lsrs	r3, r3, #8
 8009818:	b29b      	uxth	r3, r3
 800981a:	b2da      	uxtb	r2, r3
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009822:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009824:	6a39      	ldr	r1, [r7, #32]
 8009826:	68f8      	ldr	r0, [r7, #12]
 8009828:	f000 fa20 	bl	8009c6c <I2C_WaitOnTXEFlagUntilTimeout>
 800982c:	4603      	mov	r3, r0
 800982e:	2b00      	cmp	r3, #0
 8009830:	d00d      	beq.n	800984e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009836:	2b04      	cmp	r3, #4
 8009838:	d107      	bne.n	800984a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	681a      	ldr	r2, [r3, #0]
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	681b      	ldr	r3, [r3, #0]
 8009844:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009848:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800984a:	2301      	movs	r3, #1
 800984c:	e005      	b.n	800985a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800984e:	893b      	ldrh	r3, [r7, #8]
 8009850:	b2da      	uxtb	r2, r3
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8009858:	2300      	movs	r3, #0
}
 800985a:	4618      	mov	r0, r3
 800985c:	3718      	adds	r7, #24
 800985e:	46bd      	mov	sp, r7
 8009860:	bd80      	pop	{r7, pc}
 8009862:	bf00      	nop
 8009864:	00010002 	.word	0x00010002

08009868 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8009868:	b580      	push	{r7, lr}
 800986a:	b088      	sub	sp, #32
 800986c:	af02      	add	r7, sp, #8
 800986e:	60f8      	str	r0, [r7, #12]
 8009870:	4608      	mov	r0, r1
 8009872:	4611      	mov	r1, r2
 8009874:	461a      	mov	r2, r3
 8009876:	4603      	mov	r3, r0
 8009878:	817b      	strh	r3, [r7, #10]
 800987a:	460b      	mov	r3, r1
 800987c:	813b      	strh	r3, [r7, #8]
 800987e:	4613      	mov	r3, r2
 8009880:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	681a      	ldr	r2, [r3, #0]
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8009890:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	681a      	ldr	r2, [r3, #0]
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80098a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80098a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098a4:	9300      	str	r3, [sp, #0]
 80098a6:	6a3b      	ldr	r3, [r7, #32]
 80098a8:	2200      	movs	r2, #0
 80098aa:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80098ae:	68f8      	ldr	r0, [r7, #12]
 80098b0:	f000 f8c2 	bl	8009a38 <I2C_WaitOnFlagUntilTimeout>
 80098b4:	4603      	mov	r3, r0
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d00d      	beq.n	80098d6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098c8:	d103      	bne.n	80098d2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80098d0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80098d2:	2303      	movs	r3, #3
 80098d4:	e0aa      	b.n	8009a2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80098d6:	897b      	ldrh	r3, [r7, #10]
 80098d8:	b2db      	uxtb	r3, r3
 80098da:	461a      	mov	r2, r3
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80098e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80098e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098e8:	6a3a      	ldr	r2, [r7, #32]
 80098ea:	4952      	ldr	r1, [pc, #328]	; (8009a34 <I2C_RequestMemoryRead+0x1cc>)
 80098ec:	68f8      	ldr	r0, [r7, #12]
 80098ee:	f000 f91d 	bl	8009b2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80098f2:	4603      	mov	r3, r0
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d001      	beq.n	80098fc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80098f8:	2301      	movs	r3, #1
 80098fa:	e097      	b.n	8009a2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80098fc:	2300      	movs	r3, #0
 80098fe:	617b      	str	r3, [r7, #20]
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	695b      	ldr	r3, [r3, #20]
 8009906:	617b      	str	r3, [r7, #20]
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	699b      	ldr	r3, [r3, #24]
 800990e:	617b      	str	r3, [r7, #20]
 8009910:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009914:	6a39      	ldr	r1, [r7, #32]
 8009916:	68f8      	ldr	r0, [r7, #12]
 8009918:	f000 f9a8 	bl	8009c6c <I2C_WaitOnTXEFlagUntilTimeout>
 800991c:	4603      	mov	r3, r0
 800991e:	2b00      	cmp	r3, #0
 8009920:	d00d      	beq.n	800993e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009926:	2b04      	cmp	r3, #4
 8009928:	d107      	bne.n	800993a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	681a      	ldr	r2, [r3, #0]
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009938:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800993a:	2301      	movs	r3, #1
 800993c:	e076      	b.n	8009a2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800993e:	88fb      	ldrh	r3, [r7, #6]
 8009940:	2b01      	cmp	r3, #1
 8009942:	d105      	bne.n	8009950 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8009944:	893b      	ldrh	r3, [r7, #8]
 8009946:	b2da      	uxtb	r2, r3
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	611a      	str	r2, [r3, #16]
 800994e:	e021      	b.n	8009994 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8009950:	893b      	ldrh	r3, [r7, #8]
 8009952:	0a1b      	lsrs	r3, r3, #8
 8009954:	b29b      	uxth	r3, r3
 8009956:	b2da      	uxtb	r2, r3
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	681b      	ldr	r3, [r3, #0]
 800995c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800995e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009960:	6a39      	ldr	r1, [r7, #32]
 8009962:	68f8      	ldr	r0, [r7, #12]
 8009964:	f000 f982 	bl	8009c6c <I2C_WaitOnTXEFlagUntilTimeout>
 8009968:	4603      	mov	r3, r0
 800996a:	2b00      	cmp	r3, #0
 800996c:	d00d      	beq.n	800998a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009972:	2b04      	cmp	r3, #4
 8009974:	d107      	bne.n	8009986 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	681a      	ldr	r2, [r3, #0]
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009984:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009986:	2301      	movs	r3, #1
 8009988:	e050      	b.n	8009a2c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800998a:	893b      	ldrh	r3, [r7, #8]
 800998c:	b2da      	uxtb	r2, r3
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009994:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009996:	6a39      	ldr	r1, [r7, #32]
 8009998:	68f8      	ldr	r0, [r7, #12]
 800999a:	f000 f967 	bl	8009c6c <I2C_WaitOnTXEFlagUntilTimeout>
 800999e:	4603      	mov	r3, r0
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d00d      	beq.n	80099c0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099a8:	2b04      	cmp	r3, #4
 80099aa:	d107      	bne.n	80099bc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	681a      	ldr	r2, [r3, #0]
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80099ba:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80099bc:	2301      	movs	r3, #1
 80099be:	e035      	b.n	8009a2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	681a      	ldr	r2, [r3, #0]
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80099ce:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80099d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80099d2:	9300      	str	r3, [sp, #0]
 80099d4:	6a3b      	ldr	r3, [r7, #32]
 80099d6:	2200      	movs	r2, #0
 80099d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80099dc:	68f8      	ldr	r0, [r7, #12]
 80099de:	f000 f82b 	bl	8009a38 <I2C_WaitOnFlagUntilTimeout>
 80099e2:	4603      	mov	r3, r0
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d00d      	beq.n	8009a04 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80099f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099f6:	d103      	bne.n	8009a00 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80099fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8009a00:	2303      	movs	r3, #3
 8009a02:	e013      	b.n	8009a2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8009a04:	897b      	ldrh	r3, [r7, #10]
 8009a06:	b2db      	uxtb	r3, r3
 8009a08:	f043 0301 	orr.w	r3, r3, #1
 8009a0c:	b2da      	uxtb	r2, r3
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8009a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a16:	6a3a      	ldr	r2, [r7, #32]
 8009a18:	4906      	ldr	r1, [pc, #24]	; (8009a34 <I2C_RequestMemoryRead+0x1cc>)
 8009a1a:	68f8      	ldr	r0, [r7, #12]
 8009a1c:	f000 f886 	bl	8009b2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8009a20:	4603      	mov	r3, r0
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d001      	beq.n	8009a2a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8009a26:	2301      	movs	r3, #1
 8009a28:	e000      	b.n	8009a2c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8009a2a:	2300      	movs	r3, #0
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3718      	adds	r7, #24
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}
 8009a34:	00010002 	.word	0x00010002

08009a38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b084      	sub	sp, #16
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	60f8      	str	r0, [r7, #12]
 8009a40:	60b9      	str	r1, [r7, #8]
 8009a42:	603b      	str	r3, [r7, #0]
 8009a44:	4613      	mov	r3, r2
 8009a46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009a48:	e048      	b.n	8009adc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a4a:	683b      	ldr	r3, [r7, #0]
 8009a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a50:	d044      	beq.n	8009adc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a52:	f7fe f9e3 	bl	8007e1c <HAL_GetTick>
 8009a56:	4602      	mov	r2, r0
 8009a58:	69bb      	ldr	r3, [r7, #24]
 8009a5a:	1ad3      	subs	r3, r2, r3
 8009a5c:	683a      	ldr	r2, [r7, #0]
 8009a5e:	429a      	cmp	r2, r3
 8009a60:	d302      	bcc.n	8009a68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009a62:	683b      	ldr	r3, [r7, #0]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d139      	bne.n	8009adc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8009a68:	68bb      	ldr	r3, [r7, #8]
 8009a6a:	0c1b      	lsrs	r3, r3, #16
 8009a6c:	b2db      	uxtb	r3, r3
 8009a6e:	2b01      	cmp	r3, #1
 8009a70:	d10d      	bne.n	8009a8e <I2C_WaitOnFlagUntilTimeout+0x56>
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	695b      	ldr	r3, [r3, #20]
 8009a78:	43da      	mvns	r2, r3
 8009a7a:	68bb      	ldr	r3, [r7, #8]
 8009a7c:	4013      	ands	r3, r2
 8009a7e:	b29b      	uxth	r3, r3
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	bf0c      	ite	eq
 8009a84:	2301      	moveq	r3, #1
 8009a86:	2300      	movne	r3, #0
 8009a88:	b2db      	uxtb	r3, r3
 8009a8a:	461a      	mov	r2, r3
 8009a8c:	e00c      	b.n	8009aa8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	699b      	ldr	r3, [r3, #24]
 8009a94:	43da      	mvns	r2, r3
 8009a96:	68bb      	ldr	r3, [r7, #8]
 8009a98:	4013      	ands	r3, r2
 8009a9a:	b29b      	uxth	r3, r3
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	bf0c      	ite	eq
 8009aa0:	2301      	moveq	r3, #1
 8009aa2:	2300      	movne	r3, #0
 8009aa4:	b2db      	uxtb	r3, r3
 8009aa6:	461a      	mov	r2, r3
 8009aa8:	79fb      	ldrb	r3, [r7, #7]
 8009aaa:	429a      	cmp	r2, r3
 8009aac:	d116      	bne.n	8009adc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	2200      	movs	r2, #0
 8009ab2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8009ab4:	68fb      	ldr	r3, [r7, #12]
 8009ab6:	2220      	movs	r2, #32
 8009ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	2200      	movs	r2, #0
 8009ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ac8:	f043 0220 	orr.w	r2, r3, #32
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8009ad8:	2301      	movs	r3, #1
 8009ada:	e023      	b.n	8009b24 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009adc:	68bb      	ldr	r3, [r7, #8]
 8009ade:	0c1b      	lsrs	r3, r3, #16
 8009ae0:	b2db      	uxtb	r3, r3
 8009ae2:	2b01      	cmp	r3, #1
 8009ae4:	d10d      	bne.n	8009b02 <I2C_WaitOnFlagUntilTimeout+0xca>
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	695b      	ldr	r3, [r3, #20]
 8009aec:	43da      	mvns	r2, r3
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	4013      	ands	r3, r2
 8009af2:	b29b      	uxth	r3, r3
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	bf0c      	ite	eq
 8009af8:	2301      	moveq	r3, #1
 8009afa:	2300      	movne	r3, #0
 8009afc:	b2db      	uxtb	r3, r3
 8009afe:	461a      	mov	r2, r3
 8009b00:	e00c      	b.n	8009b1c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	699b      	ldr	r3, [r3, #24]
 8009b08:	43da      	mvns	r2, r3
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	4013      	ands	r3, r2
 8009b0e:	b29b      	uxth	r3, r3
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	bf0c      	ite	eq
 8009b14:	2301      	moveq	r3, #1
 8009b16:	2300      	movne	r3, #0
 8009b18:	b2db      	uxtb	r3, r3
 8009b1a:	461a      	mov	r2, r3
 8009b1c:	79fb      	ldrb	r3, [r7, #7]
 8009b1e:	429a      	cmp	r2, r3
 8009b20:	d093      	beq.n	8009a4a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009b22:	2300      	movs	r3, #0
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3710      	adds	r7, #16
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}

08009b2c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8009b2c:	b580      	push	{r7, lr}
 8009b2e:	b084      	sub	sp, #16
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	60f8      	str	r0, [r7, #12]
 8009b34:	60b9      	str	r1, [r7, #8]
 8009b36:	607a      	str	r2, [r7, #4]
 8009b38:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009b3a:	e071      	b.n	8009c20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	695b      	ldr	r3, [r3, #20]
 8009b42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009b46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b4a:	d123      	bne.n	8009b94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	681a      	ldr	r2, [r3, #0]
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009b5a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009b64:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	2200      	movs	r2, #0
 8009b6a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	2220      	movs	r2, #32
 8009b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	2200      	movs	r2, #0
 8009b78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b80:	f043 0204 	orr.w	r2, r3, #4
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009b90:	2301      	movs	r3, #1
 8009b92:	e067      	b.n	8009c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b9a:	d041      	beq.n	8009c20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009b9c:	f7fe f93e 	bl	8007e1c <HAL_GetTick>
 8009ba0:	4602      	mov	r2, r0
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	1ad3      	subs	r3, r2, r3
 8009ba6:	687a      	ldr	r2, [r7, #4]
 8009ba8:	429a      	cmp	r2, r3
 8009baa:	d302      	bcc.n	8009bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d136      	bne.n	8009c20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8009bb2:	68bb      	ldr	r3, [r7, #8]
 8009bb4:	0c1b      	lsrs	r3, r3, #16
 8009bb6:	b2db      	uxtb	r3, r3
 8009bb8:	2b01      	cmp	r3, #1
 8009bba:	d10c      	bne.n	8009bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	695b      	ldr	r3, [r3, #20]
 8009bc2:	43da      	mvns	r2, r3
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	4013      	ands	r3, r2
 8009bc8:	b29b      	uxth	r3, r3
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	bf14      	ite	ne
 8009bce:	2301      	movne	r3, #1
 8009bd0:	2300      	moveq	r3, #0
 8009bd2:	b2db      	uxtb	r3, r3
 8009bd4:	e00b      	b.n	8009bee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	699b      	ldr	r3, [r3, #24]
 8009bdc:	43da      	mvns	r2, r3
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	4013      	ands	r3, r2
 8009be2:	b29b      	uxth	r3, r3
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	bf14      	ite	ne
 8009be8:	2301      	movne	r3, #1
 8009bea:	2300      	moveq	r3, #0
 8009bec:	b2db      	uxtb	r3, r3
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d016      	beq.n	8009c20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2200      	movs	r2, #0
 8009bf6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009bf8:	68fb      	ldr	r3, [r7, #12]
 8009bfa:	2220      	movs	r2, #32
 8009bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	2200      	movs	r2, #0
 8009c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c0c:	f043 0220 	orr.w	r2, r3, #32
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	2200      	movs	r2, #0
 8009c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8009c1c:	2301      	movs	r3, #1
 8009c1e:	e021      	b.n	8009c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8009c20:	68bb      	ldr	r3, [r7, #8]
 8009c22:	0c1b      	lsrs	r3, r3, #16
 8009c24:	b2db      	uxtb	r3, r3
 8009c26:	2b01      	cmp	r3, #1
 8009c28:	d10c      	bne.n	8009c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	695b      	ldr	r3, [r3, #20]
 8009c30:	43da      	mvns	r2, r3
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	4013      	ands	r3, r2
 8009c36:	b29b      	uxth	r3, r3
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	bf14      	ite	ne
 8009c3c:	2301      	movne	r3, #1
 8009c3e:	2300      	moveq	r3, #0
 8009c40:	b2db      	uxtb	r3, r3
 8009c42:	e00b      	b.n	8009c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	699b      	ldr	r3, [r3, #24]
 8009c4a:	43da      	mvns	r2, r3
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	4013      	ands	r3, r2
 8009c50:	b29b      	uxth	r3, r3
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	bf14      	ite	ne
 8009c56:	2301      	movne	r3, #1
 8009c58:	2300      	moveq	r3, #0
 8009c5a:	b2db      	uxtb	r3, r3
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	f47f af6d 	bne.w	8009b3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8009c62:	2300      	movs	r3, #0
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3710      	adds	r7, #16
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}

08009c6c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b084      	sub	sp, #16
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	60f8      	str	r0, [r7, #12]
 8009c74:	60b9      	str	r1, [r7, #8]
 8009c76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009c78:	e034      	b.n	8009ce4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009c7a:	68f8      	ldr	r0, [r7, #12]
 8009c7c:	f000 f8e3 	bl	8009e46 <I2C_IsAcknowledgeFailed>
 8009c80:	4603      	mov	r3, r0
 8009c82:	2b00      	cmp	r3, #0
 8009c84:	d001      	beq.n	8009c8a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009c86:	2301      	movs	r3, #1
 8009c88:	e034      	b.n	8009cf4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c8a:	68bb      	ldr	r3, [r7, #8]
 8009c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c90:	d028      	beq.n	8009ce4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c92:	f7fe f8c3 	bl	8007e1c <HAL_GetTick>
 8009c96:	4602      	mov	r2, r0
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	1ad3      	subs	r3, r2, r3
 8009c9c:	68ba      	ldr	r2, [r7, #8]
 8009c9e:	429a      	cmp	r2, r3
 8009ca0:	d302      	bcc.n	8009ca8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d11d      	bne.n	8009ce4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	695b      	ldr	r3, [r3, #20]
 8009cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cb2:	2b80      	cmp	r3, #128	; 0x80
 8009cb4:	d016      	beq.n	8009ce4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	2200      	movs	r2, #0
 8009cba:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	2220      	movs	r2, #32
 8009cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cd0:	f043 0220 	orr.w	r2, r3, #32
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	2200      	movs	r2, #0
 8009cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8009ce0:	2301      	movs	r3, #1
 8009ce2:	e007      	b.n	8009cf4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	695b      	ldr	r3, [r3, #20]
 8009cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009cee:	2b80      	cmp	r3, #128	; 0x80
 8009cf0:	d1c3      	bne.n	8009c7a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009cf2:	2300      	movs	r3, #0
}
 8009cf4:	4618      	mov	r0, r3
 8009cf6:	3710      	adds	r7, #16
 8009cf8:	46bd      	mov	sp, r7
 8009cfa:	bd80      	pop	{r7, pc}

08009cfc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009cfc:	b580      	push	{r7, lr}
 8009cfe:	b084      	sub	sp, #16
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	60f8      	str	r0, [r7, #12]
 8009d04:	60b9      	str	r1, [r7, #8]
 8009d06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009d08:	e034      	b.n	8009d74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8009d0a:	68f8      	ldr	r0, [r7, #12]
 8009d0c:	f000 f89b 	bl	8009e46 <I2C_IsAcknowledgeFailed>
 8009d10:	4603      	mov	r3, r0
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d001      	beq.n	8009d1a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8009d16:	2301      	movs	r3, #1
 8009d18:	e034      	b.n	8009d84 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009d1a:	68bb      	ldr	r3, [r7, #8]
 8009d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009d20:	d028      	beq.n	8009d74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009d22:	f7fe f87b 	bl	8007e1c <HAL_GetTick>
 8009d26:	4602      	mov	r2, r0
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	1ad3      	subs	r3, r2, r3
 8009d2c:	68ba      	ldr	r2, [r7, #8]
 8009d2e:	429a      	cmp	r2, r3
 8009d30:	d302      	bcc.n	8009d38 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d11d      	bne.n	8009d74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	695b      	ldr	r3, [r3, #20]
 8009d3e:	f003 0304 	and.w	r3, r3, #4
 8009d42:	2b04      	cmp	r3, #4
 8009d44:	d016      	beq.n	8009d74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	2200      	movs	r2, #0
 8009d4a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	2220      	movs	r2, #32
 8009d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	2200      	movs	r2, #0
 8009d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d60:	f043 0220 	orr.w	r2, r3, #32
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8009d70:	2301      	movs	r3, #1
 8009d72:	e007      	b.n	8009d84 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	695b      	ldr	r3, [r3, #20]
 8009d7a:	f003 0304 	and.w	r3, r3, #4
 8009d7e:	2b04      	cmp	r3, #4
 8009d80:	d1c3      	bne.n	8009d0a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8009d82:	2300      	movs	r3, #0
}
 8009d84:	4618      	mov	r0, r3
 8009d86:	3710      	adds	r7, #16
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	bd80      	pop	{r7, pc}

08009d8c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b084      	sub	sp, #16
 8009d90:	af00      	add	r7, sp, #0
 8009d92:	60f8      	str	r0, [r7, #12]
 8009d94:	60b9      	str	r1, [r7, #8]
 8009d96:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009d98:	e049      	b.n	8009e2e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	695b      	ldr	r3, [r3, #20]
 8009da0:	f003 0310 	and.w	r3, r3, #16
 8009da4:	2b10      	cmp	r3, #16
 8009da6:	d119      	bne.n	8009ddc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f06f 0210 	mvn.w	r2, #16
 8009db0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	2200      	movs	r2, #0
 8009db6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	2220      	movs	r2, #32
 8009dbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	2200      	movs	r2, #0
 8009dd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8009dd8:	2301      	movs	r3, #1
 8009dda:	e030      	b.n	8009e3e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009ddc:	f7fe f81e 	bl	8007e1c <HAL_GetTick>
 8009de0:	4602      	mov	r2, r0
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	1ad3      	subs	r3, r2, r3
 8009de6:	68ba      	ldr	r2, [r7, #8]
 8009de8:	429a      	cmp	r2, r3
 8009dea:	d302      	bcc.n	8009df2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8009dec:	68bb      	ldr	r3, [r7, #8]
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d11d      	bne.n	8009e2e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8009df2:	68fb      	ldr	r3, [r7, #12]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	695b      	ldr	r3, [r3, #20]
 8009df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dfc:	2b40      	cmp	r3, #64	; 0x40
 8009dfe:	d016      	beq.n	8009e2e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	2200      	movs	r2, #0
 8009e04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	2220      	movs	r2, #32
 8009e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2200      	movs	r2, #0
 8009e12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e1a:	f043 0220 	orr.w	r2, r3, #32
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2200      	movs	r2, #0
 8009e26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8009e2a:	2301      	movs	r3, #1
 8009e2c:	e007      	b.n	8009e3e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8009e2e:	68fb      	ldr	r3, [r7, #12]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	695b      	ldr	r3, [r3, #20]
 8009e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e38:	2b40      	cmp	r3, #64	; 0x40
 8009e3a:	d1ae      	bne.n	8009d9a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8009e3c:	2300      	movs	r3, #0
}
 8009e3e:	4618      	mov	r0, r3
 8009e40:	3710      	adds	r7, #16
 8009e42:	46bd      	mov	sp, r7
 8009e44:	bd80      	pop	{r7, pc}

08009e46 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8009e46:	b480      	push	{r7}
 8009e48:	b083      	sub	sp, #12
 8009e4a:	af00      	add	r7, sp, #0
 8009e4c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	695b      	ldr	r3, [r3, #20]
 8009e54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e5c:	d11b      	bne.n	8009e96 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009e66:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	2220      	movs	r2, #32
 8009e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2200      	movs	r2, #0
 8009e7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e82:	f043 0204 	orr.w	r2, r3, #4
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009e92:	2301      	movs	r3, #1
 8009e94:	e000      	b.n	8009e98 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8009e96:	2300      	movs	r3, #0
}
 8009e98:	4618      	mov	r0, r3
 8009e9a:	370c      	adds	r7, #12
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	bc80      	pop	{r7}
 8009ea0:	4770      	bx	lr
	...

08009ea4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b086      	sub	sp, #24
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d101      	bne.n	8009eb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8009eb2:	2301      	movs	r3, #1
 8009eb4:	e272      	b.n	800a39c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	f003 0301 	and.w	r3, r3, #1
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	f000 8087 	beq.w	8009fd2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009ec4:	4b92      	ldr	r3, [pc, #584]	; (800a110 <HAL_RCC_OscConfig+0x26c>)
 8009ec6:	685b      	ldr	r3, [r3, #4]
 8009ec8:	f003 030c 	and.w	r3, r3, #12
 8009ecc:	2b04      	cmp	r3, #4
 8009ece:	d00c      	beq.n	8009eea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8009ed0:	4b8f      	ldr	r3, [pc, #572]	; (800a110 <HAL_RCC_OscConfig+0x26c>)
 8009ed2:	685b      	ldr	r3, [r3, #4]
 8009ed4:	f003 030c 	and.w	r3, r3, #12
 8009ed8:	2b08      	cmp	r3, #8
 8009eda:	d112      	bne.n	8009f02 <HAL_RCC_OscConfig+0x5e>
 8009edc:	4b8c      	ldr	r3, [pc, #560]	; (800a110 <HAL_RCC_OscConfig+0x26c>)
 8009ede:	685b      	ldr	r3, [r3, #4]
 8009ee0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009ee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009ee8:	d10b      	bne.n	8009f02 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009eea:	4b89      	ldr	r3, [pc, #548]	; (800a110 <HAL_RCC_OscConfig+0x26c>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d06c      	beq.n	8009fd0 <HAL_RCC_OscConfig+0x12c>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	685b      	ldr	r3, [r3, #4]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d168      	bne.n	8009fd0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8009efe:	2301      	movs	r3, #1
 8009f00:	e24c      	b.n	800a39c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	685b      	ldr	r3, [r3, #4]
 8009f06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009f0a:	d106      	bne.n	8009f1a <HAL_RCC_OscConfig+0x76>
 8009f0c:	4b80      	ldr	r3, [pc, #512]	; (800a110 <HAL_RCC_OscConfig+0x26c>)
 8009f0e:	681b      	ldr	r3, [r3, #0]
 8009f10:	4a7f      	ldr	r2, [pc, #508]	; (800a110 <HAL_RCC_OscConfig+0x26c>)
 8009f12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f16:	6013      	str	r3, [r2, #0]
 8009f18:	e02e      	b.n	8009f78 <HAL_RCC_OscConfig+0xd4>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	685b      	ldr	r3, [r3, #4]
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d10c      	bne.n	8009f3c <HAL_RCC_OscConfig+0x98>
 8009f22:	4b7b      	ldr	r3, [pc, #492]	; (800a110 <HAL_RCC_OscConfig+0x26c>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	4a7a      	ldr	r2, [pc, #488]	; (800a110 <HAL_RCC_OscConfig+0x26c>)
 8009f28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f2c:	6013      	str	r3, [r2, #0]
 8009f2e:	4b78      	ldr	r3, [pc, #480]	; (800a110 <HAL_RCC_OscConfig+0x26c>)
 8009f30:	681b      	ldr	r3, [r3, #0]
 8009f32:	4a77      	ldr	r2, [pc, #476]	; (800a110 <HAL_RCC_OscConfig+0x26c>)
 8009f34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009f38:	6013      	str	r3, [r2, #0]
 8009f3a:	e01d      	b.n	8009f78 <HAL_RCC_OscConfig+0xd4>
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	685b      	ldr	r3, [r3, #4]
 8009f40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009f44:	d10c      	bne.n	8009f60 <HAL_RCC_OscConfig+0xbc>
 8009f46:	4b72      	ldr	r3, [pc, #456]	; (800a110 <HAL_RCC_OscConfig+0x26c>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	4a71      	ldr	r2, [pc, #452]	; (800a110 <HAL_RCC_OscConfig+0x26c>)
 8009f4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009f50:	6013      	str	r3, [r2, #0]
 8009f52:	4b6f      	ldr	r3, [pc, #444]	; (800a110 <HAL_RCC_OscConfig+0x26c>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	4a6e      	ldr	r2, [pc, #440]	; (800a110 <HAL_RCC_OscConfig+0x26c>)
 8009f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009f5c:	6013      	str	r3, [r2, #0]
 8009f5e:	e00b      	b.n	8009f78 <HAL_RCC_OscConfig+0xd4>
 8009f60:	4b6b      	ldr	r3, [pc, #428]	; (800a110 <HAL_RCC_OscConfig+0x26c>)
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	4a6a      	ldr	r2, [pc, #424]	; (800a110 <HAL_RCC_OscConfig+0x26c>)
 8009f66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f6a:	6013      	str	r3, [r2, #0]
 8009f6c:	4b68      	ldr	r3, [pc, #416]	; (800a110 <HAL_RCC_OscConfig+0x26c>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	4a67      	ldr	r2, [pc, #412]	; (800a110 <HAL_RCC_OscConfig+0x26c>)
 8009f72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009f76:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	685b      	ldr	r3, [r3, #4]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d013      	beq.n	8009fa8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009f80:	f7fd ff4c 	bl	8007e1c <HAL_GetTick>
 8009f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009f86:	e008      	b.n	8009f9a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009f88:	f7fd ff48 	bl	8007e1c <HAL_GetTick>
 8009f8c:	4602      	mov	r2, r0
 8009f8e:	693b      	ldr	r3, [r7, #16]
 8009f90:	1ad3      	subs	r3, r2, r3
 8009f92:	2b64      	cmp	r3, #100	; 0x64
 8009f94:	d901      	bls.n	8009f9a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8009f96:	2303      	movs	r3, #3
 8009f98:	e200      	b.n	800a39c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009f9a:	4b5d      	ldr	r3, [pc, #372]	; (800a110 <HAL_RCC_OscConfig+0x26c>)
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d0f0      	beq.n	8009f88 <HAL_RCC_OscConfig+0xe4>
 8009fa6:	e014      	b.n	8009fd2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009fa8:	f7fd ff38 	bl	8007e1c <HAL_GetTick>
 8009fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009fae:	e008      	b.n	8009fc2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009fb0:	f7fd ff34 	bl	8007e1c <HAL_GetTick>
 8009fb4:	4602      	mov	r2, r0
 8009fb6:	693b      	ldr	r3, [r7, #16]
 8009fb8:	1ad3      	subs	r3, r2, r3
 8009fba:	2b64      	cmp	r3, #100	; 0x64
 8009fbc:	d901      	bls.n	8009fc2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8009fbe:	2303      	movs	r3, #3
 8009fc0:	e1ec      	b.n	800a39c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8009fc2:	4b53      	ldr	r3, [pc, #332]	; (800a110 <HAL_RCC_OscConfig+0x26c>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d1f0      	bne.n	8009fb0 <HAL_RCC_OscConfig+0x10c>
 8009fce:	e000      	b.n	8009fd2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009fd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f003 0302 	and.w	r3, r3, #2
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d063      	beq.n	800a0a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8009fde:	4b4c      	ldr	r3, [pc, #304]	; (800a110 <HAL_RCC_OscConfig+0x26c>)
 8009fe0:	685b      	ldr	r3, [r3, #4]
 8009fe2:	f003 030c 	and.w	r3, r3, #12
 8009fe6:	2b00      	cmp	r3, #0
 8009fe8:	d00b      	beq.n	800a002 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8009fea:	4b49      	ldr	r3, [pc, #292]	; (800a110 <HAL_RCC_OscConfig+0x26c>)
 8009fec:	685b      	ldr	r3, [r3, #4]
 8009fee:	f003 030c 	and.w	r3, r3, #12
 8009ff2:	2b08      	cmp	r3, #8
 8009ff4:	d11c      	bne.n	800a030 <HAL_RCC_OscConfig+0x18c>
 8009ff6:	4b46      	ldr	r3, [pc, #280]	; (800a110 <HAL_RCC_OscConfig+0x26c>)
 8009ff8:	685b      	ldr	r3, [r3, #4]
 8009ffa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d116      	bne.n	800a030 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a002:	4b43      	ldr	r3, [pc, #268]	; (800a110 <HAL_RCC_OscConfig+0x26c>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	f003 0302 	and.w	r3, r3, #2
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d005      	beq.n	800a01a <HAL_RCC_OscConfig+0x176>
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	691b      	ldr	r3, [r3, #16]
 800a012:	2b01      	cmp	r3, #1
 800a014:	d001      	beq.n	800a01a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800a016:	2301      	movs	r3, #1
 800a018:	e1c0      	b.n	800a39c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a01a:	4b3d      	ldr	r3, [pc, #244]	; (800a110 <HAL_RCC_OscConfig+0x26c>)
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	695b      	ldr	r3, [r3, #20]
 800a026:	00db      	lsls	r3, r3, #3
 800a028:	4939      	ldr	r1, [pc, #228]	; (800a110 <HAL_RCC_OscConfig+0x26c>)
 800a02a:	4313      	orrs	r3, r2
 800a02c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a02e:	e03a      	b.n	800a0a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	691b      	ldr	r3, [r3, #16]
 800a034:	2b00      	cmp	r3, #0
 800a036:	d020      	beq.n	800a07a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a038:	4b36      	ldr	r3, [pc, #216]	; (800a114 <HAL_RCC_OscConfig+0x270>)
 800a03a:	2201      	movs	r2, #1
 800a03c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a03e:	f7fd feed 	bl	8007e1c <HAL_GetTick>
 800a042:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a044:	e008      	b.n	800a058 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a046:	f7fd fee9 	bl	8007e1c <HAL_GetTick>
 800a04a:	4602      	mov	r2, r0
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	1ad3      	subs	r3, r2, r3
 800a050:	2b02      	cmp	r3, #2
 800a052:	d901      	bls.n	800a058 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800a054:	2303      	movs	r3, #3
 800a056:	e1a1      	b.n	800a39c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a058:	4b2d      	ldr	r3, [pc, #180]	; (800a110 <HAL_RCC_OscConfig+0x26c>)
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f003 0302 	and.w	r3, r3, #2
 800a060:	2b00      	cmp	r3, #0
 800a062:	d0f0      	beq.n	800a046 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a064:	4b2a      	ldr	r3, [pc, #168]	; (800a110 <HAL_RCC_OscConfig+0x26c>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	695b      	ldr	r3, [r3, #20]
 800a070:	00db      	lsls	r3, r3, #3
 800a072:	4927      	ldr	r1, [pc, #156]	; (800a110 <HAL_RCC_OscConfig+0x26c>)
 800a074:	4313      	orrs	r3, r2
 800a076:	600b      	str	r3, [r1, #0]
 800a078:	e015      	b.n	800a0a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a07a:	4b26      	ldr	r3, [pc, #152]	; (800a114 <HAL_RCC_OscConfig+0x270>)
 800a07c:	2200      	movs	r2, #0
 800a07e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a080:	f7fd fecc 	bl	8007e1c <HAL_GetTick>
 800a084:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a086:	e008      	b.n	800a09a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a088:	f7fd fec8 	bl	8007e1c <HAL_GetTick>
 800a08c:	4602      	mov	r2, r0
 800a08e:	693b      	ldr	r3, [r7, #16]
 800a090:	1ad3      	subs	r3, r2, r3
 800a092:	2b02      	cmp	r3, #2
 800a094:	d901      	bls.n	800a09a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800a096:	2303      	movs	r3, #3
 800a098:	e180      	b.n	800a39c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a09a:	4b1d      	ldr	r3, [pc, #116]	; (800a110 <HAL_RCC_OscConfig+0x26c>)
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	f003 0302 	and.w	r3, r3, #2
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d1f0      	bne.n	800a088 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	f003 0308 	and.w	r3, r3, #8
 800a0ae:	2b00      	cmp	r3, #0
 800a0b0:	d03a      	beq.n	800a128 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	699b      	ldr	r3, [r3, #24]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d019      	beq.n	800a0ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a0ba:	4b17      	ldr	r3, [pc, #92]	; (800a118 <HAL_RCC_OscConfig+0x274>)
 800a0bc:	2201      	movs	r2, #1
 800a0be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a0c0:	f7fd feac 	bl	8007e1c <HAL_GetTick>
 800a0c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a0c6:	e008      	b.n	800a0da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a0c8:	f7fd fea8 	bl	8007e1c <HAL_GetTick>
 800a0cc:	4602      	mov	r2, r0
 800a0ce:	693b      	ldr	r3, [r7, #16]
 800a0d0:	1ad3      	subs	r3, r2, r3
 800a0d2:	2b02      	cmp	r3, #2
 800a0d4:	d901      	bls.n	800a0da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800a0d6:	2303      	movs	r3, #3
 800a0d8:	e160      	b.n	800a39c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a0da:	4b0d      	ldr	r3, [pc, #52]	; (800a110 <HAL_RCC_OscConfig+0x26c>)
 800a0dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a0de:	f003 0302 	and.w	r3, r3, #2
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	d0f0      	beq.n	800a0c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800a0e6:	2001      	movs	r0, #1
 800a0e8:	f000 face 	bl	800a688 <RCC_Delay>
 800a0ec:	e01c      	b.n	800a128 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a0ee:	4b0a      	ldr	r3, [pc, #40]	; (800a118 <HAL_RCC_OscConfig+0x274>)
 800a0f0:	2200      	movs	r2, #0
 800a0f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a0f4:	f7fd fe92 	bl	8007e1c <HAL_GetTick>
 800a0f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a0fa:	e00f      	b.n	800a11c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a0fc:	f7fd fe8e 	bl	8007e1c <HAL_GetTick>
 800a100:	4602      	mov	r2, r0
 800a102:	693b      	ldr	r3, [r7, #16]
 800a104:	1ad3      	subs	r3, r2, r3
 800a106:	2b02      	cmp	r3, #2
 800a108:	d908      	bls.n	800a11c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800a10a:	2303      	movs	r3, #3
 800a10c:	e146      	b.n	800a39c <HAL_RCC_OscConfig+0x4f8>
 800a10e:	bf00      	nop
 800a110:	40021000 	.word	0x40021000
 800a114:	42420000 	.word	0x42420000
 800a118:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a11c:	4b92      	ldr	r3, [pc, #584]	; (800a368 <HAL_RCC_OscConfig+0x4c4>)
 800a11e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a120:	f003 0302 	and.w	r3, r3, #2
 800a124:	2b00      	cmp	r3, #0
 800a126:	d1e9      	bne.n	800a0fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	f003 0304 	and.w	r3, r3, #4
 800a130:	2b00      	cmp	r3, #0
 800a132:	f000 80a6 	beq.w	800a282 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a136:	2300      	movs	r3, #0
 800a138:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a13a:	4b8b      	ldr	r3, [pc, #556]	; (800a368 <HAL_RCC_OscConfig+0x4c4>)
 800a13c:	69db      	ldr	r3, [r3, #28]
 800a13e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a142:	2b00      	cmp	r3, #0
 800a144:	d10d      	bne.n	800a162 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a146:	4b88      	ldr	r3, [pc, #544]	; (800a368 <HAL_RCC_OscConfig+0x4c4>)
 800a148:	69db      	ldr	r3, [r3, #28]
 800a14a:	4a87      	ldr	r2, [pc, #540]	; (800a368 <HAL_RCC_OscConfig+0x4c4>)
 800a14c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a150:	61d3      	str	r3, [r2, #28]
 800a152:	4b85      	ldr	r3, [pc, #532]	; (800a368 <HAL_RCC_OscConfig+0x4c4>)
 800a154:	69db      	ldr	r3, [r3, #28]
 800a156:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a15a:	60bb      	str	r3, [r7, #8]
 800a15c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a15e:	2301      	movs	r3, #1
 800a160:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a162:	4b82      	ldr	r3, [pc, #520]	; (800a36c <HAL_RCC_OscConfig+0x4c8>)
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d118      	bne.n	800a1a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a16e:	4b7f      	ldr	r3, [pc, #508]	; (800a36c <HAL_RCC_OscConfig+0x4c8>)
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	4a7e      	ldr	r2, [pc, #504]	; (800a36c <HAL_RCC_OscConfig+0x4c8>)
 800a174:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a178:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a17a:	f7fd fe4f 	bl	8007e1c <HAL_GetTick>
 800a17e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a180:	e008      	b.n	800a194 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a182:	f7fd fe4b 	bl	8007e1c <HAL_GetTick>
 800a186:	4602      	mov	r2, r0
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	1ad3      	subs	r3, r2, r3
 800a18c:	2b64      	cmp	r3, #100	; 0x64
 800a18e:	d901      	bls.n	800a194 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800a190:	2303      	movs	r3, #3
 800a192:	e103      	b.n	800a39c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a194:	4b75      	ldr	r3, [pc, #468]	; (800a36c <HAL_RCC_OscConfig+0x4c8>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d0f0      	beq.n	800a182 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	68db      	ldr	r3, [r3, #12]
 800a1a4:	2b01      	cmp	r3, #1
 800a1a6:	d106      	bne.n	800a1b6 <HAL_RCC_OscConfig+0x312>
 800a1a8:	4b6f      	ldr	r3, [pc, #444]	; (800a368 <HAL_RCC_OscConfig+0x4c4>)
 800a1aa:	6a1b      	ldr	r3, [r3, #32]
 800a1ac:	4a6e      	ldr	r2, [pc, #440]	; (800a368 <HAL_RCC_OscConfig+0x4c4>)
 800a1ae:	f043 0301 	orr.w	r3, r3, #1
 800a1b2:	6213      	str	r3, [r2, #32]
 800a1b4:	e02d      	b.n	800a212 <HAL_RCC_OscConfig+0x36e>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	68db      	ldr	r3, [r3, #12]
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d10c      	bne.n	800a1d8 <HAL_RCC_OscConfig+0x334>
 800a1be:	4b6a      	ldr	r3, [pc, #424]	; (800a368 <HAL_RCC_OscConfig+0x4c4>)
 800a1c0:	6a1b      	ldr	r3, [r3, #32]
 800a1c2:	4a69      	ldr	r2, [pc, #420]	; (800a368 <HAL_RCC_OscConfig+0x4c4>)
 800a1c4:	f023 0301 	bic.w	r3, r3, #1
 800a1c8:	6213      	str	r3, [r2, #32]
 800a1ca:	4b67      	ldr	r3, [pc, #412]	; (800a368 <HAL_RCC_OscConfig+0x4c4>)
 800a1cc:	6a1b      	ldr	r3, [r3, #32]
 800a1ce:	4a66      	ldr	r2, [pc, #408]	; (800a368 <HAL_RCC_OscConfig+0x4c4>)
 800a1d0:	f023 0304 	bic.w	r3, r3, #4
 800a1d4:	6213      	str	r3, [r2, #32]
 800a1d6:	e01c      	b.n	800a212 <HAL_RCC_OscConfig+0x36e>
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	68db      	ldr	r3, [r3, #12]
 800a1dc:	2b05      	cmp	r3, #5
 800a1de:	d10c      	bne.n	800a1fa <HAL_RCC_OscConfig+0x356>
 800a1e0:	4b61      	ldr	r3, [pc, #388]	; (800a368 <HAL_RCC_OscConfig+0x4c4>)
 800a1e2:	6a1b      	ldr	r3, [r3, #32]
 800a1e4:	4a60      	ldr	r2, [pc, #384]	; (800a368 <HAL_RCC_OscConfig+0x4c4>)
 800a1e6:	f043 0304 	orr.w	r3, r3, #4
 800a1ea:	6213      	str	r3, [r2, #32]
 800a1ec:	4b5e      	ldr	r3, [pc, #376]	; (800a368 <HAL_RCC_OscConfig+0x4c4>)
 800a1ee:	6a1b      	ldr	r3, [r3, #32]
 800a1f0:	4a5d      	ldr	r2, [pc, #372]	; (800a368 <HAL_RCC_OscConfig+0x4c4>)
 800a1f2:	f043 0301 	orr.w	r3, r3, #1
 800a1f6:	6213      	str	r3, [r2, #32]
 800a1f8:	e00b      	b.n	800a212 <HAL_RCC_OscConfig+0x36e>
 800a1fa:	4b5b      	ldr	r3, [pc, #364]	; (800a368 <HAL_RCC_OscConfig+0x4c4>)
 800a1fc:	6a1b      	ldr	r3, [r3, #32]
 800a1fe:	4a5a      	ldr	r2, [pc, #360]	; (800a368 <HAL_RCC_OscConfig+0x4c4>)
 800a200:	f023 0301 	bic.w	r3, r3, #1
 800a204:	6213      	str	r3, [r2, #32]
 800a206:	4b58      	ldr	r3, [pc, #352]	; (800a368 <HAL_RCC_OscConfig+0x4c4>)
 800a208:	6a1b      	ldr	r3, [r3, #32]
 800a20a:	4a57      	ldr	r2, [pc, #348]	; (800a368 <HAL_RCC_OscConfig+0x4c4>)
 800a20c:	f023 0304 	bic.w	r3, r3, #4
 800a210:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	68db      	ldr	r3, [r3, #12]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d015      	beq.n	800a246 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a21a:	f7fd fdff 	bl	8007e1c <HAL_GetTick>
 800a21e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a220:	e00a      	b.n	800a238 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a222:	f7fd fdfb 	bl	8007e1c <HAL_GetTick>
 800a226:	4602      	mov	r2, r0
 800a228:	693b      	ldr	r3, [r7, #16]
 800a22a:	1ad3      	subs	r3, r2, r3
 800a22c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a230:	4293      	cmp	r3, r2
 800a232:	d901      	bls.n	800a238 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800a234:	2303      	movs	r3, #3
 800a236:	e0b1      	b.n	800a39c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a238:	4b4b      	ldr	r3, [pc, #300]	; (800a368 <HAL_RCC_OscConfig+0x4c4>)
 800a23a:	6a1b      	ldr	r3, [r3, #32]
 800a23c:	f003 0302 	and.w	r3, r3, #2
 800a240:	2b00      	cmp	r3, #0
 800a242:	d0ee      	beq.n	800a222 <HAL_RCC_OscConfig+0x37e>
 800a244:	e014      	b.n	800a270 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a246:	f7fd fde9 	bl	8007e1c <HAL_GetTick>
 800a24a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a24c:	e00a      	b.n	800a264 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a24e:	f7fd fde5 	bl	8007e1c <HAL_GetTick>
 800a252:	4602      	mov	r2, r0
 800a254:	693b      	ldr	r3, [r7, #16]
 800a256:	1ad3      	subs	r3, r2, r3
 800a258:	f241 3288 	movw	r2, #5000	; 0x1388
 800a25c:	4293      	cmp	r3, r2
 800a25e:	d901      	bls.n	800a264 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800a260:	2303      	movs	r3, #3
 800a262:	e09b      	b.n	800a39c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a264:	4b40      	ldr	r3, [pc, #256]	; (800a368 <HAL_RCC_OscConfig+0x4c4>)
 800a266:	6a1b      	ldr	r3, [r3, #32]
 800a268:	f003 0302 	and.w	r3, r3, #2
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d1ee      	bne.n	800a24e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800a270:	7dfb      	ldrb	r3, [r7, #23]
 800a272:	2b01      	cmp	r3, #1
 800a274:	d105      	bne.n	800a282 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a276:	4b3c      	ldr	r3, [pc, #240]	; (800a368 <HAL_RCC_OscConfig+0x4c4>)
 800a278:	69db      	ldr	r3, [r3, #28]
 800a27a:	4a3b      	ldr	r2, [pc, #236]	; (800a368 <HAL_RCC_OscConfig+0x4c4>)
 800a27c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a280:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	69db      	ldr	r3, [r3, #28]
 800a286:	2b00      	cmp	r3, #0
 800a288:	f000 8087 	beq.w	800a39a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800a28c:	4b36      	ldr	r3, [pc, #216]	; (800a368 <HAL_RCC_OscConfig+0x4c4>)
 800a28e:	685b      	ldr	r3, [r3, #4]
 800a290:	f003 030c 	and.w	r3, r3, #12
 800a294:	2b08      	cmp	r3, #8
 800a296:	d061      	beq.n	800a35c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	69db      	ldr	r3, [r3, #28]
 800a29c:	2b02      	cmp	r3, #2
 800a29e:	d146      	bne.n	800a32e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a2a0:	4b33      	ldr	r3, [pc, #204]	; (800a370 <HAL_RCC_OscConfig+0x4cc>)
 800a2a2:	2200      	movs	r2, #0
 800a2a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a2a6:	f7fd fdb9 	bl	8007e1c <HAL_GetTick>
 800a2aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a2ac:	e008      	b.n	800a2c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a2ae:	f7fd fdb5 	bl	8007e1c <HAL_GetTick>
 800a2b2:	4602      	mov	r2, r0
 800a2b4:	693b      	ldr	r3, [r7, #16]
 800a2b6:	1ad3      	subs	r3, r2, r3
 800a2b8:	2b02      	cmp	r3, #2
 800a2ba:	d901      	bls.n	800a2c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800a2bc:	2303      	movs	r3, #3
 800a2be:	e06d      	b.n	800a39c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a2c0:	4b29      	ldr	r3, [pc, #164]	; (800a368 <HAL_RCC_OscConfig+0x4c4>)
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d1f0      	bne.n	800a2ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	6a1b      	ldr	r3, [r3, #32]
 800a2d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a2d4:	d108      	bne.n	800a2e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800a2d6:	4b24      	ldr	r3, [pc, #144]	; (800a368 <HAL_RCC_OscConfig+0x4c4>)
 800a2d8:	685b      	ldr	r3, [r3, #4]
 800a2da:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	689b      	ldr	r3, [r3, #8]
 800a2e2:	4921      	ldr	r1, [pc, #132]	; (800a368 <HAL_RCC_OscConfig+0x4c4>)
 800a2e4:	4313      	orrs	r3, r2
 800a2e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a2e8:	4b1f      	ldr	r3, [pc, #124]	; (800a368 <HAL_RCC_OscConfig+0x4c4>)
 800a2ea:	685b      	ldr	r3, [r3, #4]
 800a2ec:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	6a19      	ldr	r1, [r3, #32]
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a2f8:	430b      	orrs	r3, r1
 800a2fa:	491b      	ldr	r1, [pc, #108]	; (800a368 <HAL_RCC_OscConfig+0x4c4>)
 800a2fc:	4313      	orrs	r3, r2
 800a2fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a300:	4b1b      	ldr	r3, [pc, #108]	; (800a370 <HAL_RCC_OscConfig+0x4cc>)
 800a302:	2201      	movs	r2, #1
 800a304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a306:	f7fd fd89 	bl	8007e1c <HAL_GetTick>
 800a30a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a30c:	e008      	b.n	800a320 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a30e:	f7fd fd85 	bl	8007e1c <HAL_GetTick>
 800a312:	4602      	mov	r2, r0
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	1ad3      	subs	r3, r2, r3
 800a318:	2b02      	cmp	r3, #2
 800a31a:	d901      	bls.n	800a320 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800a31c:	2303      	movs	r3, #3
 800a31e:	e03d      	b.n	800a39c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800a320:	4b11      	ldr	r3, [pc, #68]	; (800a368 <HAL_RCC_OscConfig+0x4c4>)
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d0f0      	beq.n	800a30e <HAL_RCC_OscConfig+0x46a>
 800a32c:	e035      	b.n	800a39a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a32e:	4b10      	ldr	r3, [pc, #64]	; (800a370 <HAL_RCC_OscConfig+0x4cc>)
 800a330:	2200      	movs	r2, #0
 800a332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a334:	f7fd fd72 	bl	8007e1c <HAL_GetTick>
 800a338:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a33a:	e008      	b.n	800a34e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a33c:	f7fd fd6e 	bl	8007e1c <HAL_GetTick>
 800a340:	4602      	mov	r2, r0
 800a342:	693b      	ldr	r3, [r7, #16]
 800a344:	1ad3      	subs	r3, r2, r3
 800a346:	2b02      	cmp	r3, #2
 800a348:	d901      	bls.n	800a34e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800a34a:	2303      	movs	r3, #3
 800a34c:	e026      	b.n	800a39c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800a34e:	4b06      	ldr	r3, [pc, #24]	; (800a368 <HAL_RCC_OscConfig+0x4c4>)
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a356:	2b00      	cmp	r3, #0
 800a358:	d1f0      	bne.n	800a33c <HAL_RCC_OscConfig+0x498>
 800a35a:	e01e      	b.n	800a39a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	69db      	ldr	r3, [r3, #28]
 800a360:	2b01      	cmp	r3, #1
 800a362:	d107      	bne.n	800a374 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800a364:	2301      	movs	r3, #1
 800a366:	e019      	b.n	800a39c <HAL_RCC_OscConfig+0x4f8>
 800a368:	40021000 	.word	0x40021000
 800a36c:	40007000 	.word	0x40007000
 800a370:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800a374:	4b0b      	ldr	r3, [pc, #44]	; (800a3a4 <HAL_RCC_OscConfig+0x500>)
 800a376:	685b      	ldr	r3, [r3, #4]
 800a378:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	6a1b      	ldr	r3, [r3, #32]
 800a384:	429a      	cmp	r2, r3
 800a386:	d106      	bne.n	800a396 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a392:	429a      	cmp	r2, r3
 800a394:	d001      	beq.n	800a39a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800a396:	2301      	movs	r3, #1
 800a398:	e000      	b.n	800a39c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800a39a:	2300      	movs	r3, #0
}
 800a39c:	4618      	mov	r0, r3
 800a39e:	3718      	adds	r7, #24
 800a3a0:	46bd      	mov	sp, r7
 800a3a2:	bd80      	pop	{r7, pc}
 800a3a4:	40021000 	.word	0x40021000

0800a3a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b084      	sub	sp, #16
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
 800a3b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d101      	bne.n	800a3bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a3b8:	2301      	movs	r3, #1
 800a3ba:	e0d0      	b.n	800a55e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a3bc:	4b6a      	ldr	r3, [pc, #424]	; (800a568 <HAL_RCC_ClockConfig+0x1c0>)
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	f003 0307 	and.w	r3, r3, #7
 800a3c4:	683a      	ldr	r2, [r7, #0]
 800a3c6:	429a      	cmp	r2, r3
 800a3c8:	d910      	bls.n	800a3ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a3ca:	4b67      	ldr	r3, [pc, #412]	; (800a568 <HAL_RCC_ClockConfig+0x1c0>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f023 0207 	bic.w	r2, r3, #7
 800a3d2:	4965      	ldr	r1, [pc, #404]	; (800a568 <HAL_RCC_ClockConfig+0x1c0>)
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	4313      	orrs	r3, r2
 800a3d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a3da:	4b63      	ldr	r3, [pc, #396]	; (800a568 <HAL_RCC_ClockConfig+0x1c0>)
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	f003 0307 	and.w	r3, r3, #7
 800a3e2:	683a      	ldr	r2, [r7, #0]
 800a3e4:	429a      	cmp	r2, r3
 800a3e6:	d001      	beq.n	800a3ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	e0b8      	b.n	800a55e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	f003 0302 	and.w	r3, r3, #2
 800a3f4:	2b00      	cmp	r3, #0
 800a3f6:	d020      	beq.n	800a43a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	f003 0304 	and.w	r3, r3, #4
 800a400:	2b00      	cmp	r3, #0
 800a402:	d005      	beq.n	800a410 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a404:	4b59      	ldr	r3, [pc, #356]	; (800a56c <HAL_RCC_ClockConfig+0x1c4>)
 800a406:	685b      	ldr	r3, [r3, #4]
 800a408:	4a58      	ldr	r2, [pc, #352]	; (800a56c <HAL_RCC_ClockConfig+0x1c4>)
 800a40a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800a40e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	f003 0308 	and.w	r3, r3, #8
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d005      	beq.n	800a428 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a41c:	4b53      	ldr	r3, [pc, #332]	; (800a56c <HAL_RCC_ClockConfig+0x1c4>)
 800a41e:	685b      	ldr	r3, [r3, #4]
 800a420:	4a52      	ldr	r2, [pc, #328]	; (800a56c <HAL_RCC_ClockConfig+0x1c4>)
 800a422:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800a426:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a428:	4b50      	ldr	r3, [pc, #320]	; (800a56c <HAL_RCC_ClockConfig+0x1c4>)
 800a42a:	685b      	ldr	r3, [r3, #4]
 800a42c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	689b      	ldr	r3, [r3, #8]
 800a434:	494d      	ldr	r1, [pc, #308]	; (800a56c <HAL_RCC_ClockConfig+0x1c4>)
 800a436:	4313      	orrs	r3, r2
 800a438:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f003 0301 	and.w	r3, r3, #1
 800a442:	2b00      	cmp	r3, #0
 800a444:	d040      	beq.n	800a4c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	685b      	ldr	r3, [r3, #4]
 800a44a:	2b01      	cmp	r3, #1
 800a44c:	d107      	bne.n	800a45e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a44e:	4b47      	ldr	r3, [pc, #284]	; (800a56c <HAL_RCC_ClockConfig+0x1c4>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a456:	2b00      	cmp	r3, #0
 800a458:	d115      	bne.n	800a486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a45a:	2301      	movs	r3, #1
 800a45c:	e07f      	b.n	800a55e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	685b      	ldr	r3, [r3, #4]
 800a462:	2b02      	cmp	r3, #2
 800a464:	d107      	bne.n	800a476 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a466:	4b41      	ldr	r3, [pc, #260]	; (800a56c <HAL_RCC_ClockConfig+0x1c4>)
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d109      	bne.n	800a486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a472:	2301      	movs	r3, #1
 800a474:	e073      	b.n	800a55e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a476:	4b3d      	ldr	r3, [pc, #244]	; (800a56c <HAL_RCC_ClockConfig+0x1c4>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	f003 0302 	and.w	r3, r3, #2
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d101      	bne.n	800a486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a482:	2301      	movs	r3, #1
 800a484:	e06b      	b.n	800a55e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800a486:	4b39      	ldr	r3, [pc, #228]	; (800a56c <HAL_RCC_ClockConfig+0x1c4>)
 800a488:	685b      	ldr	r3, [r3, #4]
 800a48a:	f023 0203 	bic.w	r2, r3, #3
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	685b      	ldr	r3, [r3, #4]
 800a492:	4936      	ldr	r1, [pc, #216]	; (800a56c <HAL_RCC_ClockConfig+0x1c4>)
 800a494:	4313      	orrs	r3, r2
 800a496:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800a498:	f7fd fcc0 	bl	8007e1c <HAL_GetTick>
 800a49c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a49e:	e00a      	b.n	800a4b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a4a0:	f7fd fcbc 	bl	8007e1c <HAL_GetTick>
 800a4a4:	4602      	mov	r2, r0
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	1ad3      	subs	r3, r2, r3
 800a4aa:	f241 3288 	movw	r2, #5000	; 0x1388
 800a4ae:	4293      	cmp	r3, r2
 800a4b0:	d901      	bls.n	800a4b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800a4b2:	2303      	movs	r3, #3
 800a4b4:	e053      	b.n	800a55e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a4b6:	4b2d      	ldr	r3, [pc, #180]	; (800a56c <HAL_RCC_ClockConfig+0x1c4>)
 800a4b8:	685b      	ldr	r3, [r3, #4]
 800a4ba:	f003 020c 	and.w	r2, r3, #12
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	685b      	ldr	r3, [r3, #4]
 800a4c2:	009b      	lsls	r3, r3, #2
 800a4c4:	429a      	cmp	r2, r3
 800a4c6:	d1eb      	bne.n	800a4a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a4c8:	4b27      	ldr	r3, [pc, #156]	; (800a568 <HAL_RCC_ClockConfig+0x1c0>)
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	f003 0307 	and.w	r3, r3, #7
 800a4d0:	683a      	ldr	r2, [r7, #0]
 800a4d2:	429a      	cmp	r2, r3
 800a4d4:	d210      	bcs.n	800a4f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a4d6:	4b24      	ldr	r3, [pc, #144]	; (800a568 <HAL_RCC_ClockConfig+0x1c0>)
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f023 0207 	bic.w	r2, r3, #7
 800a4de:	4922      	ldr	r1, [pc, #136]	; (800a568 <HAL_RCC_ClockConfig+0x1c0>)
 800a4e0:	683b      	ldr	r3, [r7, #0]
 800a4e2:	4313      	orrs	r3, r2
 800a4e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a4e6:	4b20      	ldr	r3, [pc, #128]	; (800a568 <HAL_RCC_ClockConfig+0x1c0>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	f003 0307 	and.w	r3, r3, #7
 800a4ee:	683a      	ldr	r2, [r7, #0]
 800a4f0:	429a      	cmp	r2, r3
 800a4f2:	d001      	beq.n	800a4f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800a4f4:	2301      	movs	r3, #1
 800a4f6:	e032      	b.n	800a55e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	f003 0304 	and.w	r3, r3, #4
 800a500:	2b00      	cmp	r3, #0
 800a502:	d008      	beq.n	800a516 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a504:	4b19      	ldr	r3, [pc, #100]	; (800a56c <HAL_RCC_ClockConfig+0x1c4>)
 800a506:	685b      	ldr	r3, [r3, #4]
 800a508:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	68db      	ldr	r3, [r3, #12]
 800a510:	4916      	ldr	r1, [pc, #88]	; (800a56c <HAL_RCC_ClockConfig+0x1c4>)
 800a512:	4313      	orrs	r3, r2
 800a514:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f003 0308 	and.w	r3, r3, #8
 800a51e:	2b00      	cmp	r3, #0
 800a520:	d009      	beq.n	800a536 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a522:	4b12      	ldr	r3, [pc, #72]	; (800a56c <HAL_RCC_ClockConfig+0x1c4>)
 800a524:	685b      	ldr	r3, [r3, #4]
 800a526:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	691b      	ldr	r3, [r3, #16]
 800a52e:	00db      	lsls	r3, r3, #3
 800a530:	490e      	ldr	r1, [pc, #56]	; (800a56c <HAL_RCC_ClockConfig+0x1c4>)
 800a532:	4313      	orrs	r3, r2
 800a534:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800a536:	f000 f821 	bl	800a57c <HAL_RCC_GetSysClockFreq>
 800a53a:	4602      	mov	r2, r0
 800a53c:	4b0b      	ldr	r3, [pc, #44]	; (800a56c <HAL_RCC_ClockConfig+0x1c4>)
 800a53e:	685b      	ldr	r3, [r3, #4]
 800a540:	091b      	lsrs	r3, r3, #4
 800a542:	f003 030f 	and.w	r3, r3, #15
 800a546:	490a      	ldr	r1, [pc, #40]	; (800a570 <HAL_RCC_ClockConfig+0x1c8>)
 800a548:	5ccb      	ldrb	r3, [r1, r3]
 800a54a:	fa22 f303 	lsr.w	r3, r2, r3
 800a54e:	4a09      	ldr	r2, [pc, #36]	; (800a574 <HAL_RCC_ClockConfig+0x1cc>)
 800a550:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800a552:	4b09      	ldr	r3, [pc, #36]	; (800a578 <HAL_RCC_ClockConfig+0x1d0>)
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	4618      	mov	r0, r3
 800a558:	f7fd fc1e 	bl	8007d98 <HAL_InitTick>

  return HAL_OK;
 800a55c:	2300      	movs	r3, #0
}
 800a55e:	4618      	mov	r0, r3
 800a560:	3710      	adds	r7, #16
 800a562:	46bd      	mov	sp, r7
 800a564:	bd80      	pop	{r7, pc}
 800a566:	bf00      	nop
 800a568:	40022000 	.word	0x40022000
 800a56c:	40021000 	.word	0x40021000
 800a570:	0800d0f0 	.word	0x0800d0f0
 800a574:	20000944 	.word	0x20000944
 800a578:	20000948 	.word	0x20000948

0800a57c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b087      	sub	sp, #28
 800a580:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800a582:	2300      	movs	r3, #0
 800a584:	60fb      	str	r3, [r7, #12]
 800a586:	2300      	movs	r3, #0
 800a588:	60bb      	str	r3, [r7, #8]
 800a58a:	2300      	movs	r3, #0
 800a58c:	617b      	str	r3, [r7, #20]
 800a58e:	2300      	movs	r3, #0
 800a590:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800a592:	2300      	movs	r3, #0
 800a594:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800a596:	4b1e      	ldr	r3, [pc, #120]	; (800a610 <HAL_RCC_GetSysClockFreq+0x94>)
 800a598:	685b      	ldr	r3, [r3, #4]
 800a59a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	f003 030c 	and.w	r3, r3, #12
 800a5a2:	2b04      	cmp	r3, #4
 800a5a4:	d002      	beq.n	800a5ac <HAL_RCC_GetSysClockFreq+0x30>
 800a5a6:	2b08      	cmp	r3, #8
 800a5a8:	d003      	beq.n	800a5b2 <HAL_RCC_GetSysClockFreq+0x36>
 800a5aa:	e027      	b.n	800a5fc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800a5ac:	4b19      	ldr	r3, [pc, #100]	; (800a614 <HAL_RCC_GetSysClockFreq+0x98>)
 800a5ae:	613b      	str	r3, [r7, #16]
      break;
 800a5b0:	e027      	b.n	800a602 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	0c9b      	lsrs	r3, r3, #18
 800a5b6:	f003 030f 	and.w	r3, r3, #15
 800a5ba:	4a17      	ldr	r2, [pc, #92]	; (800a618 <HAL_RCC_GetSysClockFreq+0x9c>)
 800a5bc:	5cd3      	ldrb	r3, [r2, r3]
 800a5be:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d010      	beq.n	800a5ec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800a5ca:	4b11      	ldr	r3, [pc, #68]	; (800a610 <HAL_RCC_GetSysClockFreq+0x94>)
 800a5cc:	685b      	ldr	r3, [r3, #4]
 800a5ce:	0c5b      	lsrs	r3, r3, #17
 800a5d0:	f003 0301 	and.w	r3, r3, #1
 800a5d4:	4a11      	ldr	r2, [pc, #68]	; (800a61c <HAL_RCC_GetSysClockFreq+0xa0>)
 800a5d6:	5cd3      	ldrb	r3, [r2, r3]
 800a5d8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	4a0d      	ldr	r2, [pc, #52]	; (800a614 <HAL_RCC_GetSysClockFreq+0x98>)
 800a5de:	fb03 f202 	mul.w	r2, r3, r2
 800a5e2:	68bb      	ldr	r3, [r7, #8]
 800a5e4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a5e8:	617b      	str	r3, [r7, #20]
 800a5ea:	e004      	b.n	800a5f6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	4a0c      	ldr	r2, [pc, #48]	; (800a620 <HAL_RCC_GetSysClockFreq+0xa4>)
 800a5f0:	fb02 f303 	mul.w	r3, r2, r3
 800a5f4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800a5f6:	697b      	ldr	r3, [r7, #20]
 800a5f8:	613b      	str	r3, [r7, #16]
      break;
 800a5fa:	e002      	b.n	800a602 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800a5fc:	4b05      	ldr	r3, [pc, #20]	; (800a614 <HAL_RCC_GetSysClockFreq+0x98>)
 800a5fe:	613b      	str	r3, [r7, #16]
      break;
 800a600:	bf00      	nop
    }
  }
  return sysclockfreq;
 800a602:	693b      	ldr	r3, [r7, #16]
}
 800a604:	4618      	mov	r0, r3
 800a606:	371c      	adds	r7, #28
 800a608:	46bd      	mov	sp, r7
 800a60a:	bc80      	pop	{r7}
 800a60c:	4770      	bx	lr
 800a60e:	bf00      	nop
 800a610:	40021000 	.word	0x40021000
 800a614:	007a1200 	.word	0x007a1200
 800a618:	0800d108 	.word	0x0800d108
 800a61c:	0800d118 	.word	0x0800d118
 800a620:	003d0900 	.word	0x003d0900

0800a624 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a624:	b480      	push	{r7}
 800a626:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a628:	4b02      	ldr	r3, [pc, #8]	; (800a634 <HAL_RCC_GetHCLKFreq+0x10>)
 800a62a:	681b      	ldr	r3, [r3, #0]
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	46bd      	mov	sp, r7
 800a630:	bc80      	pop	{r7}
 800a632:	4770      	bx	lr
 800a634:	20000944 	.word	0x20000944

0800a638 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a638:	b580      	push	{r7, lr}
 800a63a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a63c:	f7ff fff2 	bl	800a624 <HAL_RCC_GetHCLKFreq>
 800a640:	4602      	mov	r2, r0
 800a642:	4b05      	ldr	r3, [pc, #20]	; (800a658 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a644:	685b      	ldr	r3, [r3, #4]
 800a646:	0a1b      	lsrs	r3, r3, #8
 800a648:	f003 0307 	and.w	r3, r3, #7
 800a64c:	4903      	ldr	r1, [pc, #12]	; (800a65c <HAL_RCC_GetPCLK1Freq+0x24>)
 800a64e:	5ccb      	ldrb	r3, [r1, r3]
 800a650:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a654:	4618      	mov	r0, r3
 800a656:	bd80      	pop	{r7, pc}
 800a658:	40021000 	.word	0x40021000
 800a65c:	0800d100 	.word	0x0800d100

0800a660 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a664:	f7ff ffde 	bl	800a624 <HAL_RCC_GetHCLKFreq>
 800a668:	4602      	mov	r2, r0
 800a66a:	4b05      	ldr	r3, [pc, #20]	; (800a680 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a66c:	685b      	ldr	r3, [r3, #4]
 800a66e:	0adb      	lsrs	r3, r3, #11
 800a670:	f003 0307 	and.w	r3, r3, #7
 800a674:	4903      	ldr	r1, [pc, #12]	; (800a684 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a676:	5ccb      	ldrb	r3, [r1, r3]
 800a678:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a67c:	4618      	mov	r0, r3
 800a67e:	bd80      	pop	{r7, pc}
 800a680:	40021000 	.word	0x40021000
 800a684:	0800d100 	.word	0x0800d100

0800a688 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800a688:	b480      	push	{r7}
 800a68a:	b085      	sub	sp, #20
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800a690:	4b0a      	ldr	r3, [pc, #40]	; (800a6bc <RCC_Delay+0x34>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	4a0a      	ldr	r2, [pc, #40]	; (800a6c0 <RCC_Delay+0x38>)
 800a696:	fba2 2303 	umull	r2, r3, r2, r3
 800a69a:	0a5b      	lsrs	r3, r3, #9
 800a69c:	687a      	ldr	r2, [r7, #4]
 800a69e:	fb02 f303 	mul.w	r3, r2, r3
 800a6a2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800a6a4:	bf00      	nop
  }
  while (Delay --);
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	1e5a      	subs	r2, r3, #1
 800a6aa:	60fa      	str	r2, [r7, #12]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d1f9      	bne.n	800a6a4 <RCC_Delay+0x1c>
}
 800a6b0:	bf00      	nop
 800a6b2:	bf00      	nop
 800a6b4:	3714      	adds	r7, #20
 800a6b6:	46bd      	mov	sp, r7
 800a6b8:	bc80      	pop	{r7}
 800a6ba:	4770      	bx	lr
 800a6bc:	20000944 	.word	0x20000944
 800a6c0:	10624dd3 	.word	0x10624dd3

0800a6c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b082      	sub	sp, #8
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	2b00      	cmp	r3, #0
 800a6d0:	d101      	bne.n	800a6d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a6d2:	2301      	movs	r3, #1
 800a6d4:	e041      	b.n	800a75a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6dc:	b2db      	uxtb	r3, r3
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d106      	bne.n	800a6f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a6ea:	6878      	ldr	r0, [r7, #4]
 800a6ec:	f7fd fa26 	bl	8007b3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	2202      	movs	r2, #2
 800a6f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681a      	ldr	r2, [r3, #0]
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	3304      	adds	r3, #4
 800a700:	4619      	mov	r1, r3
 800a702:	4610      	mov	r0, r2
 800a704:	f000 fa82 	bl	800ac0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2201      	movs	r2, #1
 800a70c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2201      	movs	r2, #1
 800a714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	2201      	movs	r2, #1
 800a71c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	2201      	movs	r2, #1
 800a724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2201      	movs	r2, #1
 800a72c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2201      	movs	r2, #1
 800a734:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2201      	movs	r2, #1
 800a73c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	2201      	movs	r2, #1
 800a744:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	2201      	movs	r2, #1
 800a74c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	2201      	movs	r2, #1
 800a754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a758:	2300      	movs	r3, #0
}
 800a75a:	4618      	mov	r0, r3
 800a75c:	3708      	adds	r7, #8
 800a75e:	46bd      	mov	sp, r7
 800a760:	bd80      	pop	{r7, pc}
	...

0800a764 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a764:	b480      	push	{r7}
 800a766:	b085      	sub	sp, #20
 800a768:	af00      	add	r7, sp, #0
 800a76a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a772:	b2db      	uxtb	r3, r3
 800a774:	2b01      	cmp	r3, #1
 800a776:	d001      	beq.n	800a77c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800a778:	2301      	movs	r3, #1
 800a77a:	e044      	b.n	800a806 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	2202      	movs	r2, #2
 800a780:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	68da      	ldr	r2, [r3, #12]
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f042 0201 	orr.w	r2, r2, #1
 800a792:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	4a1d      	ldr	r2, [pc, #116]	; (800a810 <HAL_TIM_Base_Start_IT+0xac>)
 800a79a:	4293      	cmp	r3, r2
 800a79c:	d018      	beq.n	800a7d0 <HAL_TIM_Base_Start_IT+0x6c>
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	4a1c      	ldr	r2, [pc, #112]	; (800a814 <HAL_TIM_Base_Start_IT+0xb0>)
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	d013      	beq.n	800a7d0 <HAL_TIM_Base_Start_IT+0x6c>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7b0:	d00e      	beq.n	800a7d0 <HAL_TIM_Base_Start_IT+0x6c>
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	4a18      	ldr	r2, [pc, #96]	; (800a818 <HAL_TIM_Base_Start_IT+0xb4>)
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	d009      	beq.n	800a7d0 <HAL_TIM_Base_Start_IT+0x6c>
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	4a16      	ldr	r2, [pc, #88]	; (800a81c <HAL_TIM_Base_Start_IT+0xb8>)
 800a7c2:	4293      	cmp	r3, r2
 800a7c4:	d004      	beq.n	800a7d0 <HAL_TIM_Base_Start_IT+0x6c>
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	4a15      	ldr	r2, [pc, #84]	; (800a820 <HAL_TIM_Base_Start_IT+0xbc>)
 800a7cc:	4293      	cmp	r3, r2
 800a7ce:	d111      	bne.n	800a7f4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	689b      	ldr	r3, [r3, #8]
 800a7d6:	f003 0307 	and.w	r3, r3, #7
 800a7da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	2b06      	cmp	r3, #6
 800a7e0:	d010      	beq.n	800a804 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	681a      	ldr	r2, [r3, #0]
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	681b      	ldr	r3, [r3, #0]
 800a7ec:	f042 0201 	orr.w	r2, r2, #1
 800a7f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a7f2:	e007      	b.n	800a804 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	681a      	ldr	r2, [r3, #0]
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	f042 0201 	orr.w	r2, r2, #1
 800a802:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a804:	2300      	movs	r3, #0
}
 800a806:	4618      	mov	r0, r3
 800a808:	3714      	adds	r7, #20
 800a80a:	46bd      	mov	sp, r7
 800a80c:	bc80      	pop	{r7}
 800a80e:	4770      	bx	lr
 800a810:	40012c00 	.word	0x40012c00
 800a814:	40013400 	.word	0x40013400
 800a818:	40000400 	.word	0x40000400
 800a81c:	40000800 	.word	0x40000800
 800a820:	40000c00 	.word	0x40000c00

0800a824 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b082      	sub	sp, #8
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	691b      	ldr	r3, [r3, #16]
 800a832:	f003 0302 	and.w	r3, r3, #2
 800a836:	2b02      	cmp	r3, #2
 800a838:	d122      	bne.n	800a880 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	68db      	ldr	r3, [r3, #12]
 800a840:	f003 0302 	and.w	r3, r3, #2
 800a844:	2b02      	cmp	r3, #2
 800a846:	d11b      	bne.n	800a880 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	681b      	ldr	r3, [r3, #0]
 800a84c:	f06f 0202 	mvn.w	r2, #2
 800a850:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2201      	movs	r2, #1
 800a856:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	699b      	ldr	r3, [r3, #24]
 800a85e:	f003 0303 	and.w	r3, r3, #3
 800a862:	2b00      	cmp	r3, #0
 800a864:	d003      	beq.n	800a86e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f000 f9b4 	bl	800abd4 <HAL_TIM_IC_CaptureCallback>
 800a86c:	e005      	b.n	800a87a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a86e:	6878      	ldr	r0, [r7, #4]
 800a870:	f000 f9a7 	bl	800abc2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f000 f9b6 	bl	800abe6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2200      	movs	r2, #0
 800a87e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	691b      	ldr	r3, [r3, #16]
 800a886:	f003 0304 	and.w	r3, r3, #4
 800a88a:	2b04      	cmp	r3, #4
 800a88c:	d122      	bne.n	800a8d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	68db      	ldr	r3, [r3, #12]
 800a894:	f003 0304 	and.w	r3, r3, #4
 800a898:	2b04      	cmp	r3, #4
 800a89a:	d11b      	bne.n	800a8d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f06f 0204 	mvn.w	r2, #4
 800a8a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2202      	movs	r2, #2
 800a8aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	699b      	ldr	r3, [r3, #24]
 800a8b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d003      	beq.n	800a8c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a8ba:	6878      	ldr	r0, [r7, #4]
 800a8bc:	f000 f98a 	bl	800abd4 <HAL_TIM_IC_CaptureCallback>
 800a8c0:	e005      	b.n	800a8ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a8c2:	6878      	ldr	r0, [r7, #4]
 800a8c4:	f000 f97d 	bl	800abc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f000 f98c 	bl	800abe6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	2200      	movs	r2, #0
 800a8d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	691b      	ldr	r3, [r3, #16]
 800a8da:	f003 0308 	and.w	r3, r3, #8
 800a8de:	2b08      	cmp	r3, #8
 800a8e0:	d122      	bne.n	800a928 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	68db      	ldr	r3, [r3, #12]
 800a8e8:	f003 0308 	and.w	r3, r3, #8
 800a8ec:	2b08      	cmp	r3, #8
 800a8ee:	d11b      	bne.n	800a928 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	f06f 0208 	mvn.w	r2, #8
 800a8f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	2204      	movs	r2, #4
 800a8fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	69db      	ldr	r3, [r3, #28]
 800a906:	f003 0303 	and.w	r3, r3, #3
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d003      	beq.n	800a916 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f000 f960 	bl	800abd4 <HAL_TIM_IC_CaptureCallback>
 800a914:	e005      	b.n	800a922 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f000 f953 	bl	800abc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f000 f962 	bl	800abe6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2200      	movs	r2, #0
 800a926:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	691b      	ldr	r3, [r3, #16]
 800a92e:	f003 0310 	and.w	r3, r3, #16
 800a932:	2b10      	cmp	r3, #16
 800a934:	d122      	bne.n	800a97c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	681b      	ldr	r3, [r3, #0]
 800a93a:	68db      	ldr	r3, [r3, #12]
 800a93c:	f003 0310 	and.w	r3, r3, #16
 800a940:	2b10      	cmp	r3, #16
 800a942:	d11b      	bne.n	800a97c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	f06f 0210 	mvn.w	r2, #16
 800a94c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	2208      	movs	r2, #8
 800a952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	69db      	ldr	r3, [r3, #28]
 800a95a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d003      	beq.n	800a96a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f000 f936 	bl	800abd4 <HAL_TIM_IC_CaptureCallback>
 800a968:	e005      	b.n	800a976 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a96a:	6878      	ldr	r0, [r7, #4]
 800a96c:	f000 f929 	bl	800abc2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f000 f938 	bl	800abe6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2200      	movs	r2, #0
 800a97a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	691b      	ldr	r3, [r3, #16]
 800a982:	f003 0301 	and.w	r3, r3, #1
 800a986:	2b01      	cmp	r3, #1
 800a988:	d10e      	bne.n	800a9a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	68db      	ldr	r3, [r3, #12]
 800a990:	f003 0301 	and.w	r3, r3, #1
 800a994:	2b01      	cmp	r3, #1
 800a996:	d107      	bne.n	800a9a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	681b      	ldr	r3, [r3, #0]
 800a99c:	f06f 0201 	mvn.w	r2, #1
 800a9a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f7fc fd60 	bl	8007468 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	691b      	ldr	r3, [r3, #16]
 800a9ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9b2:	2b80      	cmp	r3, #128	; 0x80
 800a9b4:	d10e      	bne.n	800a9d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	681b      	ldr	r3, [r3, #0]
 800a9ba:	68db      	ldr	r3, [r3, #12]
 800a9bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a9c0:	2b80      	cmp	r3, #128	; 0x80
 800a9c2:	d107      	bne.n	800a9d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a9cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f000 faa1 	bl	800af16 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	691b      	ldr	r3, [r3, #16]
 800a9da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9de:	2b40      	cmp	r3, #64	; 0x40
 800a9e0:	d10e      	bne.n	800aa00 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	68db      	ldr	r3, [r3, #12]
 800a9e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a9ec:	2b40      	cmp	r3, #64	; 0x40
 800a9ee:	d107      	bne.n	800aa00 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a9f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a9fa:	6878      	ldr	r0, [r7, #4]
 800a9fc:	f000 f8fc 	bl	800abf8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	691b      	ldr	r3, [r3, #16]
 800aa06:	f003 0320 	and.w	r3, r3, #32
 800aa0a:	2b20      	cmp	r3, #32
 800aa0c:	d10e      	bne.n	800aa2c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	68db      	ldr	r3, [r3, #12]
 800aa14:	f003 0320 	and.w	r3, r3, #32
 800aa18:	2b20      	cmp	r3, #32
 800aa1a:	d107      	bne.n	800aa2c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	f06f 0220 	mvn.w	r2, #32
 800aa24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f000 fa6c 	bl	800af04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800aa2c:	bf00      	nop
 800aa2e:	3708      	adds	r7, #8
 800aa30:	46bd      	mov	sp, r7
 800aa32:	bd80      	pop	{r7, pc}

0800aa34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800aa34:	b580      	push	{r7, lr}
 800aa36:	b084      	sub	sp, #16
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
 800aa3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800aa3e:	2300      	movs	r3, #0
 800aa40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa48:	2b01      	cmp	r3, #1
 800aa4a:	d101      	bne.n	800aa50 <HAL_TIM_ConfigClockSource+0x1c>
 800aa4c:	2302      	movs	r3, #2
 800aa4e:	e0b4      	b.n	800abba <HAL_TIM_ConfigClockSource+0x186>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	2201      	movs	r2, #1
 800aa54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2202      	movs	r2, #2
 800aa5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	689b      	ldr	r3, [r3, #8]
 800aa66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800aa68:	68bb      	ldr	r3, [r7, #8]
 800aa6a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800aa6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aa76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	68ba      	ldr	r2, [r7, #8]
 800aa7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800aa80:	683b      	ldr	r3, [r7, #0]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa88:	d03e      	beq.n	800ab08 <HAL_TIM_ConfigClockSource+0xd4>
 800aa8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aa8e:	f200 8087 	bhi.w	800aba0 <HAL_TIM_ConfigClockSource+0x16c>
 800aa92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa96:	f000 8086 	beq.w	800aba6 <HAL_TIM_ConfigClockSource+0x172>
 800aa9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa9e:	d87f      	bhi.n	800aba0 <HAL_TIM_ConfigClockSource+0x16c>
 800aaa0:	2b70      	cmp	r3, #112	; 0x70
 800aaa2:	d01a      	beq.n	800aada <HAL_TIM_ConfigClockSource+0xa6>
 800aaa4:	2b70      	cmp	r3, #112	; 0x70
 800aaa6:	d87b      	bhi.n	800aba0 <HAL_TIM_ConfigClockSource+0x16c>
 800aaa8:	2b60      	cmp	r3, #96	; 0x60
 800aaaa:	d050      	beq.n	800ab4e <HAL_TIM_ConfigClockSource+0x11a>
 800aaac:	2b60      	cmp	r3, #96	; 0x60
 800aaae:	d877      	bhi.n	800aba0 <HAL_TIM_ConfigClockSource+0x16c>
 800aab0:	2b50      	cmp	r3, #80	; 0x50
 800aab2:	d03c      	beq.n	800ab2e <HAL_TIM_ConfigClockSource+0xfa>
 800aab4:	2b50      	cmp	r3, #80	; 0x50
 800aab6:	d873      	bhi.n	800aba0 <HAL_TIM_ConfigClockSource+0x16c>
 800aab8:	2b40      	cmp	r3, #64	; 0x40
 800aaba:	d058      	beq.n	800ab6e <HAL_TIM_ConfigClockSource+0x13a>
 800aabc:	2b40      	cmp	r3, #64	; 0x40
 800aabe:	d86f      	bhi.n	800aba0 <HAL_TIM_ConfigClockSource+0x16c>
 800aac0:	2b30      	cmp	r3, #48	; 0x30
 800aac2:	d064      	beq.n	800ab8e <HAL_TIM_ConfigClockSource+0x15a>
 800aac4:	2b30      	cmp	r3, #48	; 0x30
 800aac6:	d86b      	bhi.n	800aba0 <HAL_TIM_ConfigClockSource+0x16c>
 800aac8:	2b20      	cmp	r3, #32
 800aaca:	d060      	beq.n	800ab8e <HAL_TIM_ConfigClockSource+0x15a>
 800aacc:	2b20      	cmp	r3, #32
 800aace:	d867      	bhi.n	800aba0 <HAL_TIM_ConfigClockSource+0x16c>
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d05c      	beq.n	800ab8e <HAL_TIM_ConfigClockSource+0x15a>
 800aad4:	2b10      	cmp	r3, #16
 800aad6:	d05a      	beq.n	800ab8e <HAL_TIM_ConfigClockSource+0x15a>
 800aad8:	e062      	b.n	800aba0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800aae2:	683b      	ldr	r3, [r7, #0]
 800aae4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800aaea:	f000 f980 	bl	800adee <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	689b      	ldr	r3, [r3, #8]
 800aaf4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800aaf6:	68bb      	ldr	r3, [r7, #8]
 800aaf8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800aafc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	68ba      	ldr	r2, [r7, #8]
 800ab04:	609a      	str	r2, [r3, #8]
      break;
 800ab06:	e04f      	b.n	800aba8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800ab10:	683b      	ldr	r3, [r7, #0]
 800ab12:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800ab14:	683b      	ldr	r3, [r7, #0]
 800ab16:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800ab18:	f000 f969 	bl	800adee <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	689a      	ldr	r2, [r3, #8]
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ab2a:	609a      	str	r2, [r3, #8]
      break;
 800ab2c:	e03c      	b.n	800aba8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ab32:	683b      	ldr	r3, [r7, #0]
 800ab34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ab36:	683b      	ldr	r3, [r7, #0]
 800ab38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab3a:	461a      	mov	r2, r3
 800ab3c:	f000 f8e0 	bl	800ad00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	2150      	movs	r1, #80	; 0x50
 800ab46:	4618      	mov	r0, r3
 800ab48:	f000 f937 	bl	800adba <TIM_ITRx_SetConfig>
      break;
 800ab4c:	e02c      	b.n	800aba8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ab52:	683b      	ldr	r3, [r7, #0]
 800ab54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ab56:	683b      	ldr	r3, [r7, #0]
 800ab58:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ab5a:	461a      	mov	r2, r3
 800ab5c:	f000 f8fe 	bl	800ad5c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	2160      	movs	r1, #96	; 0x60
 800ab66:	4618      	mov	r0, r3
 800ab68:	f000 f927 	bl	800adba <TIM_ITRx_SetConfig>
      break;
 800ab6c:	e01c      	b.n	800aba8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800ab76:	683b      	ldr	r3, [r7, #0]
 800ab78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab7a:	461a      	mov	r2, r3
 800ab7c:	f000 f8c0 	bl	800ad00 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	2140      	movs	r1, #64	; 0x40
 800ab86:	4618      	mov	r0, r3
 800ab88:	f000 f917 	bl	800adba <TIM_ITRx_SetConfig>
      break;
 800ab8c:	e00c      	b.n	800aba8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681a      	ldr	r2, [r3, #0]
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	4619      	mov	r1, r3
 800ab98:	4610      	mov	r0, r2
 800ab9a:	f000 f90e 	bl	800adba <TIM_ITRx_SetConfig>
      break;
 800ab9e:	e003      	b.n	800aba8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800aba0:	2301      	movs	r3, #1
 800aba2:	73fb      	strb	r3, [r7, #15]
      break;
 800aba4:	e000      	b.n	800aba8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800aba6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	2201      	movs	r2, #1
 800abac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	2200      	movs	r2, #0
 800abb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800abb8:	7bfb      	ldrb	r3, [r7, #15]
}
 800abba:	4618      	mov	r0, r3
 800abbc:	3710      	adds	r7, #16
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}

0800abc2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800abc2:	b480      	push	{r7}
 800abc4:	b083      	sub	sp, #12
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800abca:	bf00      	nop
 800abcc:	370c      	adds	r7, #12
 800abce:	46bd      	mov	sp, r7
 800abd0:	bc80      	pop	{r7}
 800abd2:	4770      	bx	lr

0800abd4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800abd4:	b480      	push	{r7}
 800abd6:	b083      	sub	sp, #12
 800abd8:	af00      	add	r7, sp, #0
 800abda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800abdc:	bf00      	nop
 800abde:	370c      	adds	r7, #12
 800abe0:	46bd      	mov	sp, r7
 800abe2:	bc80      	pop	{r7}
 800abe4:	4770      	bx	lr

0800abe6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800abe6:	b480      	push	{r7}
 800abe8:	b083      	sub	sp, #12
 800abea:	af00      	add	r7, sp, #0
 800abec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800abee:	bf00      	nop
 800abf0:	370c      	adds	r7, #12
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bc80      	pop	{r7}
 800abf6:	4770      	bx	lr

0800abf8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800abf8:	b480      	push	{r7}
 800abfa:	b083      	sub	sp, #12
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ac00:	bf00      	nop
 800ac02:	370c      	adds	r7, #12
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bc80      	pop	{r7}
 800ac08:	4770      	bx	lr
	...

0800ac0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ac0c:	b480      	push	{r7}
 800ac0e:	b085      	sub	sp, #20
 800ac10:	af00      	add	r7, sp, #0
 800ac12:	6078      	str	r0, [r7, #4]
 800ac14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	4a33      	ldr	r2, [pc, #204]	; (800acec <TIM_Base_SetConfig+0xe0>)
 800ac20:	4293      	cmp	r3, r2
 800ac22:	d013      	beq.n	800ac4c <TIM_Base_SetConfig+0x40>
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	4a32      	ldr	r2, [pc, #200]	; (800acf0 <TIM_Base_SetConfig+0xe4>)
 800ac28:	4293      	cmp	r3, r2
 800ac2a:	d00f      	beq.n	800ac4c <TIM_Base_SetConfig+0x40>
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac32:	d00b      	beq.n	800ac4c <TIM_Base_SetConfig+0x40>
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	4a2f      	ldr	r2, [pc, #188]	; (800acf4 <TIM_Base_SetConfig+0xe8>)
 800ac38:	4293      	cmp	r3, r2
 800ac3a:	d007      	beq.n	800ac4c <TIM_Base_SetConfig+0x40>
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	4a2e      	ldr	r2, [pc, #184]	; (800acf8 <TIM_Base_SetConfig+0xec>)
 800ac40:	4293      	cmp	r3, r2
 800ac42:	d003      	beq.n	800ac4c <TIM_Base_SetConfig+0x40>
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	4a2d      	ldr	r2, [pc, #180]	; (800acfc <TIM_Base_SetConfig+0xf0>)
 800ac48:	4293      	cmp	r3, r2
 800ac4a:	d108      	bne.n	800ac5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ac54:	683b      	ldr	r3, [r7, #0]
 800ac56:	685b      	ldr	r3, [r3, #4]
 800ac58:	68fa      	ldr	r2, [r7, #12]
 800ac5a:	4313      	orrs	r3, r2
 800ac5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	4a22      	ldr	r2, [pc, #136]	; (800acec <TIM_Base_SetConfig+0xe0>)
 800ac62:	4293      	cmp	r3, r2
 800ac64:	d013      	beq.n	800ac8e <TIM_Base_SetConfig+0x82>
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	4a21      	ldr	r2, [pc, #132]	; (800acf0 <TIM_Base_SetConfig+0xe4>)
 800ac6a:	4293      	cmp	r3, r2
 800ac6c:	d00f      	beq.n	800ac8e <TIM_Base_SetConfig+0x82>
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac74:	d00b      	beq.n	800ac8e <TIM_Base_SetConfig+0x82>
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	4a1e      	ldr	r2, [pc, #120]	; (800acf4 <TIM_Base_SetConfig+0xe8>)
 800ac7a:	4293      	cmp	r3, r2
 800ac7c:	d007      	beq.n	800ac8e <TIM_Base_SetConfig+0x82>
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	4a1d      	ldr	r2, [pc, #116]	; (800acf8 <TIM_Base_SetConfig+0xec>)
 800ac82:	4293      	cmp	r3, r2
 800ac84:	d003      	beq.n	800ac8e <TIM_Base_SetConfig+0x82>
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	4a1c      	ldr	r2, [pc, #112]	; (800acfc <TIM_Base_SetConfig+0xf0>)
 800ac8a:	4293      	cmp	r3, r2
 800ac8c:	d108      	bne.n	800aca0 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	68db      	ldr	r3, [r3, #12]
 800ac9a:	68fa      	ldr	r2, [r7, #12]
 800ac9c:	4313      	orrs	r3, r2
 800ac9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800aca6:	683b      	ldr	r3, [r7, #0]
 800aca8:	695b      	ldr	r3, [r3, #20]
 800acaa:	4313      	orrs	r3, r2
 800acac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800acae:	687b      	ldr	r3, [r7, #4]
 800acb0:	68fa      	ldr	r2, [r7, #12]
 800acb2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800acb4:	683b      	ldr	r3, [r7, #0]
 800acb6:	689a      	ldr	r2, [r3, #8]
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800acbc:	683b      	ldr	r3, [r7, #0]
 800acbe:	681a      	ldr	r2, [r3, #0]
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	4a09      	ldr	r2, [pc, #36]	; (800acec <TIM_Base_SetConfig+0xe0>)
 800acc8:	4293      	cmp	r3, r2
 800acca:	d003      	beq.n	800acd4 <TIM_Base_SetConfig+0xc8>
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	4a08      	ldr	r2, [pc, #32]	; (800acf0 <TIM_Base_SetConfig+0xe4>)
 800acd0:	4293      	cmp	r3, r2
 800acd2:	d103      	bne.n	800acdc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800acd4:	683b      	ldr	r3, [r7, #0]
 800acd6:	691a      	ldr	r2, [r3, #16]
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	2201      	movs	r2, #1
 800ace0:	615a      	str	r2, [r3, #20]
}
 800ace2:	bf00      	nop
 800ace4:	3714      	adds	r7, #20
 800ace6:	46bd      	mov	sp, r7
 800ace8:	bc80      	pop	{r7}
 800acea:	4770      	bx	lr
 800acec:	40012c00 	.word	0x40012c00
 800acf0:	40013400 	.word	0x40013400
 800acf4:	40000400 	.word	0x40000400
 800acf8:	40000800 	.word	0x40000800
 800acfc:	40000c00 	.word	0x40000c00

0800ad00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad00:	b480      	push	{r7}
 800ad02:	b087      	sub	sp, #28
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	60f8      	str	r0, [r7, #12]
 800ad08:	60b9      	str	r1, [r7, #8]
 800ad0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	6a1b      	ldr	r3, [r3, #32]
 800ad10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	6a1b      	ldr	r3, [r3, #32]
 800ad16:	f023 0201 	bic.w	r2, r3, #1
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad1e:	68fb      	ldr	r3, [r7, #12]
 800ad20:	699b      	ldr	r3, [r3, #24]
 800ad22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ad24:	693b      	ldr	r3, [r7, #16]
 800ad26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ad2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	011b      	lsls	r3, r3, #4
 800ad30:	693a      	ldr	r2, [r7, #16]
 800ad32:	4313      	orrs	r3, r2
 800ad34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ad36:	697b      	ldr	r3, [r7, #20]
 800ad38:	f023 030a 	bic.w	r3, r3, #10
 800ad3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ad3e:	697a      	ldr	r2, [r7, #20]
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	4313      	orrs	r3, r2
 800ad44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	693a      	ldr	r2, [r7, #16]
 800ad4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	697a      	ldr	r2, [r7, #20]
 800ad50:	621a      	str	r2, [r3, #32]
}
 800ad52:	bf00      	nop
 800ad54:	371c      	adds	r7, #28
 800ad56:	46bd      	mov	sp, r7
 800ad58:	bc80      	pop	{r7}
 800ad5a:	4770      	bx	lr

0800ad5c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ad5c:	b480      	push	{r7}
 800ad5e:	b087      	sub	sp, #28
 800ad60:	af00      	add	r7, sp, #0
 800ad62:	60f8      	str	r0, [r7, #12]
 800ad64:	60b9      	str	r1, [r7, #8]
 800ad66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	6a1b      	ldr	r3, [r3, #32]
 800ad6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	6a1b      	ldr	r3, [r3, #32]
 800ad72:	f023 0210 	bic.w	r2, r3, #16
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	699b      	ldr	r3, [r3, #24]
 800ad7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ad80:	693b      	ldr	r3, [r7, #16]
 800ad82:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ad86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	031b      	lsls	r3, r3, #12
 800ad8c:	693a      	ldr	r2, [r7, #16]
 800ad8e:	4313      	orrs	r3, r2
 800ad90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ad98:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ad9a:	68bb      	ldr	r3, [r7, #8]
 800ad9c:	011b      	lsls	r3, r3, #4
 800ad9e:	697a      	ldr	r2, [r7, #20]
 800ada0:	4313      	orrs	r3, r2
 800ada2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ada4:	68fb      	ldr	r3, [r7, #12]
 800ada6:	693a      	ldr	r2, [r7, #16]
 800ada8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	697a      	ldr	r2, [r7, #20]
 800adae:	621a      	str	r2, [r3, #32]
}
 800adb0:	bf00      	nop
 800adb2:	371c      	adds	r7, #28
 800adb4:	46bd      	mov	sp, r7
 800adb6:	bc80      	pop	{r7}
 800adb8:	4770      	bx	lr

0800adba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800adba:	b480      	push	{r7}
 800adbc:	b085      	sub	sp, #20
 800adbe:	af00      	add	r7, sp, #0
 800adc0:	6078      	str	r0, [r7, #4]
 800adc2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	689b      	ldr	r3, [r3, #8]
 800adc8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800add0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800add2:	683a      	ldr	r2, [r7, #0]
 800add4:	68fb      	ldr	r3, [r7, #12]
 800add6:	4313      	orrs	r3, r2
 800add8:	f043 0307 	orr.w	r3, r3, #7
 800addc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	68fa      	ldr	r2, [r7, #12]
 800ade2:	609a      	str	r2, [r3, #8]
}
 800ade4:	bf00      	nop
 800ade6:	3714      	adds	r7, #20
 800ade8:	46bd      	mov	sp, r7
 800adea:	bc80      	pop	{r7}
 800adec:	4770      	bx	lr

0800adee <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800adee:	b480      	push	{r7}
 800adf0:	b087      	sub	sp, #28
 800adf2:	af00      	add	r7, sp, #0
 800adf4:	60f8      	str	r0, [r7, #12]
 800adf6:	60b9      	str	r1, [r7, #8]
 800adf8:	607a      	str	r2, [r7, #4]
 800adfa:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800adfc:	68fb      	ldr	r3, [r7, #12]
 800adfe:	689b      	ldr	r3, [r3, #8]
 800ae00:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ae02:	697b      	ldr	r3, [r7, #20]
 800ae04:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ae08:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ae0a:	683b      	ldr	r3, [r7, #0]
 800ae0c:	021a      	lsls	r2, r3, #8
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	431a      	orrs	r2, r3
 800ae12:	68bb      	ldr	r3, [r7, #8]
 800ae14:	4313      	orrs	r3, r2
 800ae16:	697a      	ldr	r2, [r7, #20]
 800ae18:	4313      	orrs	r3, r2
 800ae1a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	697a      	ldr	r2, [r7, #20]
 800ae20:	609a      	str	r2, [r3, #8]
}
 800ae22:	bf00      	nop
 800ae24:	371c      	adds	r7, #28
 800ae26:	46bd      	mov	sp, r7
 800ae28:	bc80      	pop	{r7}
 800ae2a:	4770      	bx	lr

0800ae2c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ae2c:	b480      	push	{r7}
 800ae2e:	b085      	sub	sp, #20
 800ae30:	af00      	add	r7, sp, #0
 800ae32:	6078      	str	r0, [r7, #4]
 800ae34:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae3c:	2b01      	cmp	r3, #1
 800ae3e:	d101      	bne.n	800ae44 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ae40:	2302      	movs	r3, #2
 800ae42:	e050      	b.n	800aee6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	2201      	movs	r2, #1
 800ae48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2202      	movs	r2, #2
 800ae50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	685b      	ldr	r3, [r3, #4]
 800ae5a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	689b      	ldr	r3, [r3, #8]
 800ae62:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae6a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	681b      	ldr	r3, [r3, #0]
 800ae70:	68fa      	ldr	r2, [r7, #12]
 800ae72:	4313      	orrs	r3, r2
 800ae74:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	68fa      	ldr	r2, [r7, #12]
 800ae7c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	4a1b      	ldr	r2, [pc, #108]	; (800aef0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800ae84:	4293      	cmp	r3, r2
 800ae86:	d018      	beq.n	800aeba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	4a19      	ldr	r2, [pc, #100]	; (800aef4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800ae8e:	4293      	cmp	r3, r2
 800ae90:	d013      	beq.n	800aeba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae9a:	d00e      	beq.n	800aeba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	4a15      	ldr	r2, [pc, #84]	; (800aef8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800aea2:	4293      	cmp	r3, r2
 800aea4:	d009      	beq.n	800aeba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	4a14      	ldr	r2, [pc, #80]	; (800aefc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800aeac:	4293      	cmp	r3, r2
 800aeae:	d004      	beq.n	800aeba <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	4a12      	ldr	r2, [pc, #72]	; (800af00 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800aeb6:	4293      	cmp	r3, r2
 800aeb8:	d10c      	bne.n	800aed4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aeba:	68bb      	ldr	r3, [r7, #8]
 800aebc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aec0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aec2:	683b      	ldr	r3, [r7, #0]
 800aec4:	685b      	ldr	r3, [r3, #4]
 800aec6:	68ba      	ldr	r2, [r7, #8]
 800aec8:	4313      	orrs	r3, r2
 800aeca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	68ba      	ldr	r2, [r7, #8]
 800aed2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2201      	movs	r2, #1
 800aed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	2200      	movs	r2, #0
 800aee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aee4:	2300      	movs	r3, #0
}
 800aee6:	4618      	mov	r0, r3
 800aee8:	3714      	adds	r7, #20
 800aeea:	46bd      	mov	sp, r7
 800aeec:	bc80      	pop	{r7}
 800aeee:	4770      	bx	lr
 800aef0:	40012c00 	.word	0x40012c00
 800aef4:	40013400 	.word	0x40013400
 800aef8:	40000400 	.word	0x40000400
 800aefc:	40000800 	.word	0x40000800
 800af00:	40000c00 	.word	0x40000c00

0800af04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800af04:	b480      	push	{r7}
 800af06:	b083      	sub	sp, #12
 800af08:	af00      	add	r7, sp, #0
 800af0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800af0c:	bf00      	nop
 800af0e:	370c      	adds	r7, #12
 800af10:	46bd      	mov	sp, r7
 800af12:	bc80      	pop	{r7}
 800af14:	4770      	bx	lr

0800af16 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800af16:	b480      	push	{r7}
 800af18:	b083      	sub	sp, #12
 800af1a:	af00      	add	r7, sp, #0
 800af1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800af1e:	bf00      	nop
 800af20:	370c      	adds	r7, #12
 800af22:	46bd      	mov	sp, r7
 800af24:	bc80      	pop	{r7}
 800af26:	4770      	bx	lr

0800af28 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b082      	sub	sp, #8
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	2b00      	cmp	r3, #0
 800af34:	d101      	bne.n	800af3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800af36:	2301      	movs	r3, #1
 800af38:	e042      	b.n	800afc0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800af40:	b2db      	uxtb	r3, r3
 800af42:	2b00      	cmp	r3, #0
 800af44:	d106      	bne.n	800af54 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	2200      	movs	r2, #0
 800af4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f7fc fe1a 	bl	8007b88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2224      	movs	r2, #36	; 0x24
 800af58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	68da      	ldr	r2, [r3, #12]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800af6a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f000 fc7f 	bl	800b870 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	691a      	ldr	r2, [r3, #16]
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800af80:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	695a      	ldr	r2, [r3, #20]
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800af90:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	68da      	ldr	r2, [r3, #12]
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800afa0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	2200      	movs	r2, #0
 800afa6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	2220      	movs	r2, #32
 800afac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	2220      	movs	r2, #32
 800afb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	2200      	movs	r2, #0
 800afbc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800afbe:	2300      	movs	r3, #0
}
 800afc0:	4618      	mov	r0, r3
 800afc2:	3708      	adds	r7, #8
 800afc4:	46bd      	mov	sp, r7
 800afc6:	bd80      	pop	{r7, pc}

0800afc8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b0ba      	sub	sp, #232	; 0xe8
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	68db      	ldr	r3, [r3, #12]
 800afe0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	695b      	ldr	r3, [r3, #20]
 800afea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800afee:	2300      	movs	r3, #0
 800aff0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800aff4:	2300      	movs	r3, #0
 800aff6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800affa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800affe:	f003 030f 	and.w	r3, r3, #15
 800b002:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b006:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d10f      	bne.n	800b02e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b00e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b012:	f003 0320 	and.w	r3, r3, #32
 800b016:	2b00      	cmp	r3, #0
 800b018:	d009      	beq.n	800b02e <HAL_UART_IRQHandler+0x66>
 800b01a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b01e:	f003 0320 	and.w	r3, r3, #32
 800b022:	2b00      	cmp	r3, #0
 800b024:	d003      	beq.n	800b02e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f000 fb63 	bl	800b6f2 <UART_Receive_IT>
      return;
 800b02c:	e25b      	b.n	800b4e6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b02e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b032:	2b00      	cmp	r3, #0
 800b034:	f000 80de 	beq.w	800b1f4 <HAL_UART_IRQHandler+0x22c>
 800b038:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b03c:	f003 0301 	and.w	r3, r3, #1
 800b040:	2b00      	cmp	r3, #0
 800b042:	d106      	bne.n	800b052 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b048:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	f000 80d1 	beq.w	800b1f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b052:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b056:	f003 0301 	and.w	r3, r3, #1
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d00b      	beq.n	800b076 <HAL_UART_IRQHandler+0xae>
 800b05e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b066:	2b00      	cmp	r3, #0
 800b068:	d005      	beq.n	800b076 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b06e:	f043 0201 	orr.w	r2, r3, #1
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b07a:	f003 0304 	and.w	r3, r3, #4
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d00b      	beq.n	800b09a <HAL_UART_IRQHandler+0xd2>
 800b082:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b086:	f003 0301 	and.w	r3, r3, #1
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d005      	beq.n	800b09a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b092:	f043 0202 	orr.w	r2, r3, #2
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b09a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b09e:	f003 0302 	and.w	r3, r3, #2
 800b0a2:	2b00      	cmp	r3, #0
 800b0a4:	d00b      	beq.n	800b0be <HAL_UART_IRQHandler+0xf6>
 800b0a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b0aa:	f003 0301 	and.w	r3, r3, #1
 800b0ae:	2b00      	cmp	r3, #0
 800b0b0:	d005      	beq.n	800b0be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0b6:	f043 0204 	orr.w	r2, r3, #4
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b0be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0c2:	f003 0308 	and.w	r3, r3, #8
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d011      	beq.n	800b0ee <HAL_UART_IRQHandler+0x126>
 800b0ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b0ce:	f003 0320 	and.w	r3, r3, #32
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d105      	bne.n	800b0e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b0d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b0da:	f003 0301 	and.w	r3, r3, #1
 800b0de:	2b00      	cmp	r3, #0
 800b0e0:	d005      	beq.n	800b0ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0e6:	f043 0208 	orr.w	r2, r3, #8
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	f000 81f2 	beq.w	800b4dc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b0f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b0fc:	f003 0320 	and.w	r3, r3, #32
 800b100:	2b00      	cmp	r3, #0
 800b102:	d008      	beq.n	800b116 <HAL_UART_IRQHandler+0x14e>
 800b104:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b108:	f003 0320 	and.w	r3, r3, #32
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d002      	beq.n	800b116 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b110:	6878      	ldr	r0, [r7, #4]
 800b112:	f000 faee 	bl	800b6f2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	695b      	ldr	r3, [r3, #20]
 800b11c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b120:	2b00      	cmp	r3, #0
 800b122:	bf14      	ite	ne
 800b124:	2301      	movne	r3, #1
 800b126:	2300      	moveq	r3, #0
 800b128:	b2db      	uxtb	r3, r3
 800b12a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b132:	f003 0308 	and.w	r3, r3, #8
 800b136:	2b00      	cmp	r3, #0
 800b138:	d103      	bne.n	800b142 <HAL_UART_IRQHandler+0x17a>
 800b13a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d04f      	beq.n	800b1e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b142:	6878      	ldr	r0, [r7, #4]
 800b144:	f000 f9f8 	bl	800b538 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	695b      	ldr	r3, [r3, #20]
 800b14e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b152:	2b00      	cmp	r3, #0
 800b154:	d041      	beq.n	800b1da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	3314      	adds	r3, #20
 800b15c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b160:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b164:	e853 3f00 	ldrex	r3, [r3]
 800b168:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b16c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b170:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b174:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	3314      	adds	r3, #20
 800b17e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b182:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b186:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b18a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b18e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b192:	e841 2300 	strex	r3, r2, [r1]
 800b196:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b19a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d1d9      	bne.n	800b156 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d013      	beq.n	800b1d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1ae:	4a7e      	ldr	r2, [pc, #504]	; (800b3a8 <HAL_UART_IRQHandler+0x3e0>)
 800b1b0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b1b2:	687b      	ldr	r3, [r7, #4]
 800b1b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f7fd f8a2 	bl	8008300 <HAL_DMA_Abort_IT>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d016      	beq.n	800b1f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b1c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b1c8:	687a      	ldr	r2, [r7, #4]
 800b1ca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800b1cc:	4610      	mov	r0, r2
 800b1ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1d0:	e00e      	b.n	800b1f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b1d2:	6878      	ldr	r0, [r7, #4]
 800b1d4:	f000 f99c 	bl	800b510 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1d8:	e00a      	b.n	800b1f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b1da:	6878      	ldr	r0, [r7, #4]
 800b1dc:	f000 f998 	bl	800b510 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1e0:	e006      	b.n	800b1f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f000 f994 	bl	800b510 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	2200      	movs	r2, #0
 800b1ec:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 800b1ee:	e175      	b.n	800b4dc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b1f0:	bf00      	nop
    return;
 800b1f2:	e173      	b.n	800b4dc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b1f8:	2b01      	cmp	r3, #1
 800b1fa:	f040 814f 	bne.w	800b49c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b1fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b202:	f003 0310 	and.w	r3, r3, #16
 800b206:	2b00      	cmp	r3, #0
 800b208:	f000 8148 	beq.w	800b49c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b20c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b210:	f003 0310 	and.w	r3, r3, #16
 800b214:	2b00      	cmp	r3, #0
 800b216:	f000 8141 	beq.w	800b49c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b21a:	2300      	movs	r3, #0
 800b21c:	60bb      	str	r3, [r7, #8]
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	681b      	ldr	r3, [r3, #0]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	60bb      	str	r3, [r7, #8]
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	685b      	ldr	r3, [r3, #4]
 800b22c:	60bb      	str	r3, [r7, #8]
 800b22e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	681b      	ldr	r3, [r3, #0]
 800b234:	695b      	ldr	r3, [r3, #20]
 800b236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b23a:	2b00      	cmp	r3, #0
 800b23c:	f000 80b6 	beq.w	800b3ac <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	685b      	ldr	r3, [r3, #4]
 800b248:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b24c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b250:	2b00      	cmp	r3, #0
 800b252:	f000 8145 	beq.w	800b4e0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b256:	687b      	ldr	r3, [r7, #4]
 800b258:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b25a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b25e:	429a      	cmp	r2, r3
 800b260:	f080 813e 	bcs.w	800b4e0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b26a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b270:	699b      	ldr	r3, [r3, #24]
 800b272:	2b20      	cmp	r3, #32
 800b274:	f000 8088 	beq.w	800b388 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	330c      	adds	r3, #12
 800b27e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b282:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b286:	e853 3f00 	ldrex	r3, [r3]
 800b28a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b28e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b292:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b296:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	330c      	adds	r3, #12
 800b2a0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b2a4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b2a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2ac:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b2b0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b2b4:	e841 2300 	strex	r3, r2, [r1]
 800b2b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b2bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d1d9      	bne.n	800b278 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	3314      	adds	r3, #20
 800b2ca:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b2cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b2ce:	e853 3f00 	ldrex	r3, [r3]
 800b2d2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b2d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b2d6:	f023 0301 	bic.w	r3, r3, #1
 800b2da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	3314      	adds	r3, #20
 800b2e4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b2e8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b2ec:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b2ee:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b2f0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b2f4:	e841 2300 	strex	r3, r2, [r1]
 800b2f8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b2fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d1e1      	bne.n	800b2c4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	3314      	adds	r3, #20
 800b306:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b308:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b30a:	e853 3f00 	ldrex	r3, [r3]
 800b30e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b310:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b312:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b316:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	3314      	adds	r3, #20
 800b320:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b324:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b326:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b328:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b32a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b32c:	e841 2300 	strex	r3, r2, [r1]
 800b330:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b332:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b334:	2b00      	cmp	r3, #0
 800b336:	d1e3      	bne.n	800b300 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2220      	movs	r2, #32
 800b33c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2200      	movs	r2, #0
 800b344:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	330c      	adds	r3, #12
 800b34c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b34e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b350:	e853 3f00 	ldrex	r3, [r3]
 800b354:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b356:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b358:	f023 0310 	bic.w	r3, r3, #16
 800b35c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	330c      	adds	r3, #12
 800b366:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b36a:	65ba      	str	r2, [r7, #88]	; 0x58
 800b36c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b36e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b370:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b372:	e841 2300 	strex	r3, r2, [r1]
 800b376:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b378:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d1e3      	bne.n	800b346 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b382:	4618      	mov	r0, r3
 800b384:	f7fc ff81 	bl	800828a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	2202      	movs	r2, #2
 800b38c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b396:	b29b      	uxth	r3, r3
 800b398:	1ad3      	subs	r3, r2, r3
 800b39a:	b29b      	uxth	r3, r3
 800b39c:	4619      	mov	r1, r3
 800b39e:	6878      	ldr	r0, [r7, #4]
 800b3a0:	f000 f8bf 	bl	800b522 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b3a4:	e09c      	b.n	800b4e0 <HAL_UART_IRQHandler+0x518>
 800b3a6:	bf00      	nop
 800b3a8:	0800b5fd 	.word	0x0800b5fd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b3b4:	b29b      	uxth	r3, r3
 800b3b6:	1ad3      	subs	r3, r2, r3
 800b3b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b3c0:	b29b      	uxth	r3, r3
 800b3c2:	2b00      	cmp	r3, #0
 800b3c4:	f000 808e 	beq.w	800b4e4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800b3c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b3cc:	2b00      	cmp	r3, #0
 800b3ce:	f000 8089 	beq.w	800b4e4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	330c      	adds	r3, #12
 800b3d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3dc:	e853 3f00 	ldrex	r3, [r3]
 800b3e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b3e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b3e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	330c      	adds	r3, #12
 800b3f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b3f6:	647a      	str	r2, [r7, #68]	; 0x44
 800b3f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b3fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b3fe:	e841 2300 	strex	r3, r2, [r1]
 800b402:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b404:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b406:	2b00      	cmp	r3, #0
 800b408:	d1e3      	bne.n	800b3d2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	3314      	adds	r3, #20
 800b410:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b414:	e853 3f00 	ldrex	r3, [r3]
 800b418:	623b      	str	r3, [r7, #32]
   return(result);
 800b41a:	6a3b      	ldr	r3, [r7, #32]
 800b41c:	f023 0301 	bic.w	r3, r3, #1
 800b420:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	3314      	adds	r3, #20
 800b42a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b42e:	633a      	str	r2, [r7, #48]	; 0x30
 800b430:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b432:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b434:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b436:	e841 2300 	strex	r3, r2, [r1]
 800b43a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d1e3      	bne.n	800b40a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	2220      	movs	r2, #32
 800b446:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	2200      	movs	r2, #0
 800b44e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	330c      	adds	r3, #12
 800b456:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b458:	693b      	ldr	r3, [r7, #16]
 800b45a:	e853 3f00 	ldrex	r3, [r3]
 800b45e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b460:	68fb      	ldr	r3, [r7, #12]
 800b462:	f023 0310 	bic.w	r3, r3, #16
 800b466:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	330c      	adds	r3, #12
 800b470:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b474:	61fa      	str	r2, [r7, #28]
 800b476:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b478:	69b9      	ldr	r1, [r7, #24]
 800b47a:	69fa      	ldr	r2, [r7, #28]
 800b47c:	e841 2300 	strex	r3, r2, [r1]
 800b480:	617b      	str	r3, [r7, #20]
   return(result);
 800b482:	697b      	ldr	r3, [r7, #20]
 800b484:	2b00      	cmp	r3, #0
 800b486:	d1e3      	bne.n	800b450 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b488:	687b      	ldr	r3, [r7, #4]
 800b48a:	2202      	movs	r2, #2
 800b48c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800b48e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b492:	4619      	mov	r1, r3
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f000 f844 	bl	800b522 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b49a:	e023      	b.n	800b4e4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b49c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d009      	beq.n	800b4bc <HAL_UART_IRQHandler+0x4f4>
 800b4a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b4ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d003      	beq.n	800b4bc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800b4b4:	6878      	ldr	r0, [r7, #4]
 800b4b6:	f000 f8b5 	bl	800b624 <UART_Transmit_IT>
    return;
 800b4ba:	e014      	b.n	800b4e6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b4bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d00e      	beq.n	800b4e6 <HAL_UART_IRQHandler+0x51e>
 800b4c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b4cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d008      	beq.n	800b4e6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	f000 f8f4 	bl	800b6c2 <UART_EndTransmit_IT>
    return;
 800b4da:	e004      	b.n	800b4e6 <HAL_UART_IRQHandler+0x51e>
    return;
 800b4dc:	bf00      	nop
 800b4de:	e002      	b.n	800b4e6 <HAL_UART_IRQHandler+0x51e>
      return;
 800b4e0:	bf00      	nop
 800b4e2:	e000      	b.n	800b4e6 <HAL_UART_IRQHandler+0x51e>
      return;
 800b4e4:	bf00      	nop
  }
}
 800b4e6:	37e8      	adds	r7, #232	; 0xe8
 800b4e8:	46bd      	mov	sp, r7
 800b4ea:	bd80      	pop	{r7, pc}

0800b4ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b4ec:	b480      	push	{r7}
 800b4ee:	b083      	sub	sp, #12
 800b4f0:	af00      	add	r7, sp, #0
 800b4f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b4f4:	bf00      	nop
 800b4f6:	370c      	adds	r7, #12
 800b4f8:	46bd      	mov	sp, r7
 800b4fa:	bc80      	pop	{r7}
 800b4fc:	4770      	bx	lr

0800b4fe <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b4fe:	b480      	push	{r7}
 800b500:	b083      	sub	sp, #12
 800b502:	af00      	add	r7, sp, #0
 800b504:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b506:	bf00      	nop
 800b508:	370c      	adds	r7, #12
 800b50a:	46bd      	mov	sp, r7
 800b50c:	bc80      	pop	{r7}
 800b50e:	4770      	bx	lr

0800b510 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b510:	b480      	push	{r7}
 800b512:	b083      	sub	sp, #12
 800b514:	af00      	add	r7, sp, #0
 800b516:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b518:	bf00      	nop
 800b51a:	370c      	adds	r7, #12
 800b51c:	46bd      	mov	sp, r7
 800b51e:	bc80      	pop	{r7}
 800b520:	4770      	bx	lr

0800b522 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b522:	b480      	push	{r7}
 800b524:	b083      	sub	sp, #12
 800b526:	af00      	add	r7, sp, #0
 800b528:	6078      	str	r0, [r7, #4]
 800b52a:	460b      	mov	r3, r1
 800b52c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b52e:	bf00      	nop
 800b530:	370c      	adds	r7, #12
 800b532:	46bd      	mov	sp, r7
 800b534:	bc80      	pop	{r7}
 800b536:	4770      	bx	lr

0800b538 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b538:	b480      	push	{r7}
 800b53a:	b095      	sub	sp, #84	; 0x54
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	330c      	adds	r3, #12
 800b546:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b54a:	e853 3f00 	ldrex	r3, [r3]
 800b54e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b552:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b556:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	330c      	adds	r3, #12
 800b55e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b560:	643a      	str	r2, [r7, #64]	; 0x40
 800b562:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b564:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b566:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b568:	e841 2300 	strex	r3, r2, [r1]
 800b56c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b56e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b570:	2b00      	cmp	r3, #0
 800b572:	d1e5      	bne.n	800b540 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	681b      	ldr	r3, [r3, #0]
 800b578:	3314      	adds	r3, #20
 800b57a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b57c:	6a3b      	ldr	r3, [r7, #32]
 800b57e:	e853 3f00 	ldrex	r3, [r3]
 800b582:	61fb      	str	r3, [r7, #28]
   return(result);
 800b584:	69fb      	ldr	r3, [r7, #28]
 800b586:	f023 0301 	bic.w	r3, r3, #1
 800b58a:	64bb      	str	r3, [r7, #72]	; 0x48
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	3314      	adds	r3, #20
 800b592:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b594:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b596:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b598:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b59a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b59c:	e841 2300 	strex	r3, r2, [r1]
 800b5a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b5a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d1e5      	bne.n	800b574 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5ac:	2b01      	cmp	r3, #1
 800b5ae:	d119      	bne.n	800b5e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	330c      	adds	r3, #12
 800b5b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	e853 3f00 	ldrex	r3, [r3]
 800b5be:	60bb      	str	r3, [r7, #8]
   return(result);
 800b5c0:	68bb      	ldr	r3, [r7, #8]
 800b5c2:	f023 0310 	bic.w	r3, r3, #16
 800b5c6:	647b      	str	r3, [r7, #68]	; 0x44
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	330c      	adds	r3, #12
 800b5ce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b5d0:	61ba      	str	r2, [r7, #24]
 800b5d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5d4:	6979      	ldr	r1, [r7, #20]
 800b5d6:	69ba      	ldr	r2, [r7, #24]
 800b5d8:	e841 2300 	strex	r3, r2, [r1]
 800b5dc:	613b      	str	r3, [r7, #16]
   return(result);
 800b5de:	693b      	ldr	r3, [r7, #16]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d1e5      	bne.n	800b5b0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2220      	movs	r2, #32
 800b5e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	2200      	movs	r2, #0
 800b5f0:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b5f2:	bf00      	nop
 800b5f4:	3754      	adds	r7, #84	; 0x54
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bc80      	pop	{r7}
 800b5fa:	4770      	bx	lr

0800b5fc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b084      	sub	sp, #16
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b608:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	2200      	movs	r2, #0
 800b60e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b610:	68fb      	ldr	r3, [r7, #12]
 800b612:	2200      	movs	r2, #0
 800b614:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b616:	68f8      	ldr	r0, [r7, #12]
 800b618:	f7ff ff7a 	bl	800b510 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b61c:	bf00      	nop
 800b61e:	3710      	adds	r7, #16
 800b620:	46bd      	mov	sp, r7
 800b622:	bd80      	pop	{r7, pc}

0800b624 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b624:	b480      	push	{r7}
 800b626:	b085      	sub	sp, #20
 800b628:	af00      	add	r7, sp, #0
 800b62a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b632:	b2db      	uxtb	r3, r3
 800b634:	2b21      	cmp	r3, #33	; 0x21
 800b636:	d13e      	bne.n	800b6b6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	689b      	ldr	r3, [r3, #8]
 800b63c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b640:	d114      	bne.n	800b66c <UART_Transmit_IT+0x48>
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	691b      	ldr	r3, [r3, #16]
 800b646:	2b00      	cmp	r3, #0
 800b648:	d110      	bne.n	800b66c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	6a1b      	ldr	r3, [r3, #32]
 800b64e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	881b      	ldrh	r3, [r3, #0]
 800b654:	461a      	mov	r2, r3
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b65e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	6a1b      	ldr	r3, [r3, #32]
 800b664:	1c9a      	adds	r2, r3, #2
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	621a      	str	r2, [r3, #32]
 800b66a:	e008      	b.n	800b67e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	6a1b      	ldr	r3, [r3, #32]
 800b670:	1c59      	adds	r1, r3, #1
 800b672:	687a      	ldr	r2, [r7, #4]
 800b674:	6211      	str	r1, [r2, #32]
 800b676:	781a      	ldrb	r2, [r3, #0]
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b682:	b29b      	uxth	r3, r3
 800b684:	3b01      	subs	r3, #1
 800b686:	b29b      	uxth	r3, r3
 800b688:	687a      	ldr	r2, [r7, #4]
 800b68a:	4619      	mov	r1, r3
 800b68c:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d10f      	bne.n	800b6b2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	68da      	ldr	r2, [r3, #12]
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b6a0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	68da      	ldr	r2, [r3, #12]
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b6b0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	e000      	b.n	800b6b8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b6b6:	2302      	movs	r3, #2
  }
}
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	3714      	adds	r7, #20
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bc80      	pop	{r7}
 800b6c0:	4770      	bx	lr

0800b6c2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b6c2:	b580      	push	{r7, lr}
 800b6c4:	b082      	sub	sp, #8
 800b6c6:	af00      	add	r7, sp, #0
 800b6c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	68da      	ldr	r2, [r3, #12]
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b6d8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	2220      	movs	r2, #32
 800b6de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f7ff ff02 	bl	800b4ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b6e8:	2300      	movs	r3, #0
}
 800b6ea:	4618      	mov	r0, r3
 800b6ec:	3708      	adds	r7, #8
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	bd80      	pop	{r7, pc}

0800b6f2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b6f2:	b580      	push	{r7, lr}
 800b6f4:	b08c      	sub	sp, #48	; 0x30
 800b6f6:	af00      	add	r7, sp, #0
 800b6f8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b700:	b2db      	uxtb	r3, r3
 800b702:	2b22      	cmp	r3, #34	; 0x22
 800b704:	f040 80ae 	bne.w	800b864 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	689b      	ldr	r3, [r3, #8]
 800b70c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b710:	d117      	bne.n	800b742 <UART_Receive_IT+0x50>
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	691b      	ldr	r3, [r3, #16]
 800b716:	2b00      	cmp	r3, #0
 800b718:	d113      	bne.n	800b742 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b71a:	2300      	movs	r3, #0
 800b71c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b722:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	685b      	ldr	r3, [r3, #4]
 800b72a:	b29b      	uxth	r3, r3
 800b72c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b730:	b29a      	uxth	r2, r3
 800b732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b734:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b73a:	1c9a      	adds	r2, r3, #2
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	629a      	str	r2, [r3, #40]	; 0x28
 800b740:	e026      	b.n	800b790 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b746:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b748:	2300      	movs	r3, #0
 800b74a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	689b      	ldr	r3, [r3, #8]
 800b750:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b754:	d007      	beq.n	800b766 <UART_Receive_IT+0x74>
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	689b      	ldr	r3, [r3, #8]
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	d10a      	bne.n	800b774 <UART_Receive_IT+0x82>
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	691b      	ldr	r3, [r3, #16]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d106      	bne.n	800b774 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	685b      	ldr	r3, [r3, #4]
 800b76c:	b2da      	uxtb	r2, r3
 800b76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b770:	701a      	strb	r2, [r3, #0]
 800b772:	e008      	b.n	800b786 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	685b      	ldr	r3, [r3, #4]
 800b77a:	b2db      	uxtb	r3, r3
 800b77c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b780:	b2da      	uxtb	r2, r3
 800b782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b784:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b78a:	1c5a      	adds	r2, r3, #1
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b794:	b29b      	uxth	r3, r3
 800b796:	3b01      	subs	r3, #1
 800b798:	b29b      	uxth	r3, r3
 800b79a:	687a      	ldr	r2, [r7, #4]
 800b79c:	4619      	mov	r1, r3
 800b79e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d15d      	bne.n	800b860 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	681b      	ldr	r3, [r3, #0]
 800b7a8:	68da      	ldr	r2, [r3, #12]
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	f022 0220 	bic.w	r2, r2, #32
 800b7b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	68da      	ldr	r2, [r3, #12]
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b7c2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	681b      	ldr	r3, [r3, #0]
 800b7c8:	695a      	ldr	r2, [r3, #20]
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	f022 0201 	bic.w	r2, r2, #1
 800b7d2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2220      	movs	r2, #32
 800b7d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7e6:	2b01      	cmp	r3, #1
 800b7e8:	d135      	bne.n	800b856 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	2200      	movs	r2, #0
 800b7ee:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	330c      	adds	r3, #12
 800b7f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7f8:	697b      	ldr	r3, [r7, #20]
 800b7fa:	e853 3f00 	ldrex	r3, [r3]
 800b7fe:	613b      	str	r3, [r7, #16]
   return(result);
 800b800:	693b      	ldr	r3, [r7, #16]
 800b802:	f023 0310 	bic.w	r3, r3, #16
 800b806:	627b      	str	r3, [r7, #36]	; 0x24
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	330c      	adds	r3, #12
 800b80e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b810:	623a      	str	r2, [r7, #32]
 800b812:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b814:	69f9      	ldr	r1, [r7, #28]
 800b816:	6a3a      	ldr	r2, [r7, #32]
 800b818:	e841 2300 	strex	r3, r2, [r1]
 800b81c:	61bb      	str	r3, [r7, #24]
   return(result);
 800b81e:	69bb      	ldr	r3, [r7, #24]
 800b820:	2b00      	cmp	r3, #0
 800b822:	d1e5      	bne.n	800b7f0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	f003 0310 	and.w	r3, r3, #16
 800b82e:	2b10      	cmp	r3, #16
 800b830:	d10a      	bne.n	800b848 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b832:	2300      	movs	r3, #0
 800b834:	60fb      	str	r3, [r7, #12]
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	60fb      	str	r3, [r7, #12]
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	685b      	ldr	r3, [r3, #4]
 800b844:	60fb      	str	r3, [r7, #12]
 800b846:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b84c:	4619      	mov	r1, r3
 800b84e:	6878      	ldr	r0, [r7, #4]
 800b850:	f7ff fe67 	bl	800b522 <HAL_UARTEx_RxEventCallback>
 800b854:	e002      	b.n	800b85c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800b856:	6878      	ldr	r0, [r7, #4]
 800b858:	f7ff fe51 	bl	800b4fe <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b85c:	2300      	movs	r3, #0
 800b85e:	e002      	b.n	800b866 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800b860:	2300      	movs	r3, #0
 800b862:	e000      	b.n	800b866 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800b864:	2302      	movs	r3, #2
  }
}
 800b866:	4618      	mov	r0, r3
 800b868:	3730      	adds	r7, #48	; 0x30
 800b86a:	46bd      	mov	sp, r7
 800b86c:	bd80      	pop	{r7, pc}
	...

0800b870 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b084      	sub	sp, #16
 800b874:	af00      	add	r7, sp, #0
 800b876:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	681b      	ldr	r3, [r3, #0]
 800b87c:	691b      	ldr	r3, [r3, #16]
 800b87e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	68da      	ldr	r2, [r3, #12]
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	681b      	ldr	r3, [r3, #0]
 800b88a:	430a      	orrs	r2, r1
 800b88c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	689a      	ldr	r2, [r3, #8]
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	691b      	ldr	r3, [r3, #16]
 800b896:	431a      	orrs	r2, r3
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	695b      	ldr	r3, [r3, #20]
 800b89c:	4313      	orrs	r3, r2
 800b89e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	68db      	ldr	r3, [r3, #12]
 800b8a6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800b8aa:	f023 030c 	bic.w	r3, r3, #12
 800b8ae:	687a      	ldr	r2, [r7, #4]
 800b8b0:	6812      	ldr	r2, [r2, #0]
 800b8b2:	68b9      	ldr	r1, [r7, #8]
 800b8b4:	430b      	orrs	r3, r1
 800b8b6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	695b      	ldr	r3, [r3, #20]
 800b8be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	699a      	ldr	r2, [r3, #24]
 800b8c6:	687b      	ldr	r3, [r7, #4]
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	430a      	orrs	r2, r1
 800b8cc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	4a2c      	ldr	r2, [pc, #176]	; (800b984 <UART_SetConfig+0x114>)
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	d103      	bne.n	800b8e0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800b8d8:	f7fe fec2 	bl	800a660 <HAL_RCC_GetPCLK2Freq>
 800b8dc:	60f8      	str	r0, [r7, #12]
 800b8de:	e002      	b.n	800b8e6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800b8e0:	f7fe feaa 	bl	800a638 <HAL_RCC_GetPCLK1Freq>
 800b8e4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b8e6:	68fa      	ldr	r2, [r7, #12]
 800b8e8:	4613      	mov	r3, r2
 800b8ea:	009b      	lsls	r3, r3, #2
 800b8ec:	4413      	add	r3, r2
 800b8ee:	009a      	lsls	r2, r3, #2
 800b8f0:	441a      	add	r2, r3
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	685b      	ldr	r3, [r3, #4]
 800b8f6:	009b      	lsls	r3, r3, #2
 800b8f8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b8fc:	4a22      	ldr	r2, [pc, #136]	; (800b988 <UART_SetConfig+0x118>)
 800b8fe:	fba2 2303 	umull	r2, r3, r2, r3
 800b902:	095b      	lsrs	r3, r3, #5
 800b904:	0119      	lsls	r1, r3, #4
 800b906:	68fa      	ldr	r2, [r7, #12]
 800b908:	4613      	mov	r3, r2
 800b90a:	009b      	lsls	r3, r3, #2
 800b90c:	4413      	add	r3, r2
 800b90e:	009a      	lsls	r2, r3, #2
 800b910:	441a      	add	r2, r3
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	685b      	ldr	r3, [r3, #4]
 800b916:	009b      	lsls	r3, r3, #2
 800b918:	fbb2 f2f3 	udiv	r2, r2, r3
 800b91c:	4b1a      	ldr	r3, [pc, #104]	; (800b988 <UART_SetConfig+0x118>)
 800b91e:	fba3 0302 	umull	r0, r3, r3, r2
 800b922:	095b      	lsrs	r3, r3, #5
 800b924:	2064      	movs	r0, #100	; 0x64
 800b926:	fb00 f303 	mul.w	r3, r0, r3
 800b92a:	1ad3      	subs	r3, r2, r3
 800b92c:	011b      	lsls	r3, r3, #4
 800b92e:	3332      	adds	r3, #50	; 0x32
 800b930:	4a15      	ldr	r2, [pc, #84]	; (800b988 <UART_SetConfig+0x118>)
 800b932:	fba2 2303 	umull	r2, r3, r2, r3
 800b936:	095b      	lsrs	r3, r3, #5
 800b938:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b93c:	4419      	add	r1, r3
 800b93e:	68fa      	ldr	r2, [r7, #12]
 800b940:	4613      	mov	r3, r2
 800b942:	009b      	lsls	r3, r3, #2
 800b944:	4413      	add	r3, r2
 800b946:	009a      	lsls	r2, r3, #2
 800b948:	441a      	add	r2, r3
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	685b      	ldr	r3, [r3, #4]
 800b94e:	009b      	lsls	r3, r3, #2
 800b950:	fbb2 f2f3 	udiv	r2, r2, r3
 800b954:	4b0c      	ldr	r3, [pc, #48]	; (800b988 <UART_SetConfig+0x118>)
 800b956:	fba3 0302 	umull	r0, r3, r3, r2
 800b95a:	095b      	lsrs	r3, r3, #5
 800b95c:	2064      	movs	r0, #100	; 0x64
 800b95e:	fb00 f303 	mul.w	r3, r0, r3
 800b962:	1ad3      	subs	r3, r2, r3
 800b964:	011b      	lsls	r3, r3, #4
 800b966:	3332      	adds	r3, #50	; 0x32
 800b968:	4a07      	ldr	r2, [pc, #28]	; (800b988 <UART_SetConfig+0x118>)
 800b96a:	fba2 2303 	umull	r2, r3, r2, r3
 800b96e:	095b      	lsrs	r3, r3, #5
 800b970:	f003 020f 	and.w	r2, r3, #15
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	440a      	add	r2, r1
 800b97a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800b97c:	bf00      	nop
 800b97e:	3710      	adds	r7, #16
 800b980:	46bd      	mov	sp, r7
 800b982:	bd80      	pop	{r7, pc}
 800b984:	40013800 	.word	0x40013800
 800b988:	51eb851f 	.word	0x51eb851f

0800b98c <__itoa>:
 800b98c:	1e93      	subs	r3, r2, #2
 800b98e:	2b22      	cmp	r3, #34	; 0x22
 800b990:	b510      	push	{r4, lr}
 800b992:	460c      	mov	r4, r1
 800b994:	d904      	bls.n	800b9a0 <__itoa+0x14>
 800b996:	2300      	movs	r3, #0
 800b998:	461c      	mov	r4, r3
 800b99a:	700b      	strb	r3, [r1, #0]
 800b99c:	4620      	mov	r0, r4
 800b99e:	bd10      	pop	{r4, pc}
 800b9a0:	2a0a      	cmp	r2, #10
 800b9a2:	d109      	bne.n	800b9b8 <__itoa+0x2c>
 800b9a4:	2800      	cmp	r0, #0
 800b9a6:	da07      	bge.n	800b9b8 <__itoa+0x2c>
 800b9a8:	232d      	movs	r3, #45	; 0x2d
 800b9aa:	700b      	strb	r3, [r1, #0]
 800b9ac:	2101      	movs	r1, #1
 800b9ae:	4240      	negs	r0, r0
 800b9b0:	4421      	add	r1, r4
 800b9b2:	f000 f8b9 	bl	800bb28 <__utoa>
 800b9b6:	e7f1      	b.n	800b99c <__itoa+0x10>
 800b9b8:	2100      	movs	r1, #0
 800b9ba:	e7f9      	b.n	800b9b0 <__itoa+0x24>

0800b9bc <itoa>:
 800b9bc:	f7ff bfe6 	b.w	800b98c <__itoa>

0800b9c0 <malloc>:
 800b9c0:	4b02      	ldr	r3, [pc, #8]	; (800b9cc <malloc+0xc>)
 800b9c2:	4601      	mov	r1, r0
 800b9c4:	6818      	ldr	r0, [r3, #0]
 800b9c6:	f000 b823 	b.w	800ba10 <_malloc_r>
 800b9ca:	bf00      	nop
 800b9cc:	2000099c 	.word	0x2000099c

0800b9d0 <sbrk_aligned>:
 800b9d0:	b570      	push	{r4, r5, r6, lr}
 800b9d2:	4e0e      	ldr	r6, [pc, #56]	; (800ba0c <sbrk_aligned+0x3c>)
 800b9d4:	460c      	mov	r4, r1
 800b9d6:	6831      	ldr	r1, [r6, #0]
 800b9d8:	4605      	mov	r5, r0
 800b9da:	b911      	cbnz	r1, 800b9e2 <sbrk_aligned+0x12>
 800b9dc:	f000 f90e 	bl	800bbfc <_sbrk_r>
 800b9e0:	6030      	str	r0, [r6, #0]
 800b9e2:	4621      	mov	r1, r4
 800b9e4:	4628      	mov	r0, r5
 800b9e6:	f000 f909 	bl	800bbfc <_sbrk_r>
 800b9ea:	1c43      	adds	r3, r0, #1
 800b9ec:	d00a      	beq.n	800ba04 <sbrk_aligned+0x34>
 800b9ee:	1cc4      	adds	r4, r0, #3
 800b9f0:	f024 0403 	bic.w	r4, r4, #3
 800b9f4:	42a0      	cmp	r0, r4
 800b9f6:	d007      	beq.n	800ba08 <sbrk_aligned+0x38>
 800b9f8:	1a21      	subs	r1, r4, r0
 800b9fa:	4628      	mov	r0, r5
 800b9fc:	f000 f8fe 	bl	800bbfc <_sbrk_r>
 800ba00:	3001      	adds	r0, #1
 800ba02:	d101      	bne.n	800ba08 <sbrk_aligned+0x38>
 800ba04:	f04f 34ff 	mov.w	r4, #4294967295
 800ba08:	4620      	mov	r0, r4
 800ba0a:	bd70      	pop	{r4, r5, r6, pc}
 800ba0c:	20000dd0 	.word	0x20000dd0

0800ba10 <_malloc_r>:
 800ba10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba14:	1ccd      	adds	r5, r1, #3
 800ba16:	f025 0503 	bic.w	r5, r5, #3
 800ba1a:	3508      	adds	r5, #8
 800ba1c:	2d0c      	cmp	r5, #12
 800ba1e:	bf38      	it	cc
 800ba20:	250c      	movcc	r5, #12
 800ba22:	2d00      	cmp	r5, #0
 800ba24:	4607      	mov	r7, r0
 800ba26:	db01      	blt.n	800ba2c <_malloc_r+0x1c>
 800ba28:	42a9      	cmp	r1, r5
 800ba2a:	d905      	bls.n	800ba38 <_malloc_r+0x28>
 800ba2c:	230c      	movs	r3, #12
 800ba2e:	2600      	movs	r6, #0
 800ba30:	603b      	str	r3, [r7, #0]
 800ba32:	4630      	mov	r0, r6
 800ba34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba38:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800bb0c <_malloc_r+0xfc>
 800ba3c:	f000 f868 	bl	800bb10 <__malloc_lock>
 800ba40:	f8d8 3000 	ldr.w	r3, [r8]
 800ba44:	461c      	mov	r4, r3
 800ba46:	bb5c      	cbnz	r4, 800baa0 <_malloc_r+0x90>
 800ba48:	4629      	mov	r1, r5
 800ba4a:	4638      	mov	r0, r7
 800ba4c:	f7ff ffc0 	bl	800b9d0 <sbrk_aligned>
 800ba50:	1c43      	adds	r3, r0, #1
 800ba52:	4604      	mov	r4, r0
 800ba54:	d155      	bne.n	800bb02 <_malloc_r+0xf2>
 800ba56:	f8d8 4000 	ldr.w	r4, [r8]
 800ba5a:	4626      	mov	r6, r4
 800ba5c:	2e00      	cmp	r6, #0
 800ba5e:	d145      	bne.n	800baec <_malloc_r+0xdc>
 800ba60:	2c00      	cmp	r4, #0
 800ba62:	d048      	beq.n	800baf6 <_malloc_r+0xe6>
 800ba64:	6823      	ldr	r3, [r4, #0]
 800ba66:	4631      	mov	r1, r6
 800ba68:	4638      	mov	r0, r7
 800ba6a:	eb04 0903 	add.w	r9, r4, r3
 800ba6e:	f000 f8c5 	bl	800bbfc <_sbrk_r>
 800ba72:	4581      	cmp	r9, r0
 800ba74:	d13f      	bne.n	800baf6 <_malloc_r+0xe6>
 800ba76:	6821      	ldr	r1, [r4, #0]
 800ba78:	4638      	mov	r0, r7
 800ba7a:	1a6d      	subs	r5, r5, r1
 800ba7c:	4629      	mov	r1, r5
 800ba7e:	f7ff ffa7 	bl	800b9d0 <sbrk_aligned>
 800ba82:	3001      	adds	r0, #1
 800ba84:	d037      	beq.n	800baf6 <_malloc_r+0xe6>
 800ba86:	6823      	ldr	r3, [r4, #0]
 800ba88:	442b      	add	r3, r5
 800ba8a:	6023      	str	r3, [r4, #0]
 800ba8c:	f8d8 3000 	ldr.w	r3, [r8]
 800ba90:	2b00      	cmp	r3, #0
 800ba92:	d038      	beq.n	800bb06 <_malloc_r+0xf6>
 800ba94:	685a      	ldr	r2, [r3, #4]
 800ba96:	42a2      	cmp	r2, r4
 800ba98:	d12b      	bne.n	800baf2 <_malloc_r+0xe2>
 800ba9a:	2200      	movs	r2, #0
 800ba9c:	605a      	str	r2, [r3, #4]
 800ba9e:	e00f      	b.n	800bac0 <_malloc_r+0xb0>
 800baa0:	6822      	ldr	r2, [r4, #0]
 800baa2:	1b52      	subs	r2, r2, r5
 800baa4:	d41f      	bmi.n	800bae6 <_malloc_r+0xd6>
 800baa6:	2a0b      	cmp	r2, #11
 800baa8:	d917      	bls.n	800bada <_malloc_r+0xca>
 800baaa:	1961      	adds	r1, r4, r5
 800baac:	42a3      	cmp	r3, r4
 800baae:	6025      	str	r5, [r4, #0]
 800bab0:	bf18      	it	ne
 800bab2:	6059      	strne	r1, [r3, #4]
 800bab4:	6863      	ldr	r3, [r4, #4]
 800bab6:	bf08      	it	eq
 800bab8:	f8c8 1000 	streq.w	r1, [r8]
 800babc:	5162      	str	r2, [r4, r5]
 800babe:	604b      	str	r3, [r1, #4]
 800bac0:	4638      	mov	r0, r7
 800bac2:	f104 060b 	add.w	r6, r4, #11
 800bac6:	f000 f829 	bl	800bb1c <__malloc_unlock>
 800baca:	f026 0607 	bic.w	r6, r6, #7
 800bace:	1d23      	adds	r3, r4, #4
 800bad0:	1af2      	subs	r2, r6, r3
 800bad2:	d0ae      	beq.n	800ba32 <_malloc_r+0x22>
 800bad4:	1b9b      	subs	r3, r3, r6
 800bad6:	50a3      	str	r3, [r4, r2]
 800bad8:	e7ab      	b.n	800ba32 <_malloc_r+0x22>
 800bada:	42a3      	cmp	r3, r4
 800badc:	6862      	ldr	r2, [r4, #4]
 800bade:	d1dd      	bne.n	800ba9c <_malloc_r+0x8c>
 800bae0:	f8c8 2000 	str.w	r2, [r8]
 800bae4:	e7ec      	b.n	800bac0 <_malloc_r+0xb0>
 800bae6:	4623      	mov	r3, r4
 800bae8:	6864      	ldr	r4, [r4, #4]
 800baea:	e7ac      	b.n	800ba46 <_malloc_r+0x36>
 800baec:	4634      	mov	r4, r6
 800baee:	6876      	ldr	r6, [r6, #4]
 800baf0:	e7b4      	b.n	800ba5c <_malloc_r+0x4c>
 800baf2:	4613      	mov	r3, r2
 800baf4:	e7cc      	b.n	800ba90 <_malloc_r+0x80>
 800baf6:	230c      	movs	r3, #12
 800baf8:	4638      	mov	r0, r7
 800bafa:	603b      	str	r3, [r7, #0]
 800bafc:	f000 f80e 	bl	800bb1c <__malloc_unlock>
 800bb00:	e797      	b.n	800ba32 <_malloc_r+0x22>
 800bb02:	6025      	str	r5, [r4, #0]
 800bb04:	e7dc      	b.n	800bac0 <_malloc_r+0xb0>
 800bb06:	605b      	str	r3, [r3, #4]
 800bb08:	deff      	udf	#255	; 0xff
 800bb0a:	bf00      	nop
 800bb0c:	20000dcc 	.word	0x20000dcc

0800bb10 <__malloc_lock>:
 800bb10:	4801      	ldr	r0, [pc, #4]	; (800bb18 <__malloc_lock+0x8>)
 800bb12:	f000 b8ad 	b.w	800bc70 <__retarget_lock_acquire_recursive>
 800bb16:	bf00      	nop
 800bb18:	20000f10 	.word	0x20000f10

0800bb1c <__malloc_unlock>:
 800bb1c:	4801      	ldr	r0, [pc, #4]	; (800bb24 <__malloc_unlock+0x8>)
 800bb1e:	f000 b8a8 	b.w	800bc72 <__retarget_lock_release_recursive>
 800bb22:	bf00      	nop
 800bb24:	20000f10 	.word	0x20000f10

0800bb28 <__utoa>:
 800bb28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb2a:	b08b      	sub	sp, #44	; 0x2c
 800bb2c:	4605      	mov	r5, r0
 800bb2e:	460b      	mov	r3, r1
 800bb30:	466e      	mov	r6, sp
 800bb32:	4c1d      	ldr	r4, [pc, #116]	; (800bba8 <__utoa+0x80>)
 800bb34:	f104 0c20 	add.w	ip, r4, #32
 800bb38:	4637      	mov	r7, r6
 800bb3a:	6820      	ldr	r0, [r4, #0]
 800bb3c:	6861      	ldr	r1, [r4, #4]
 800bb3e:	3408      	adds	r4, #8
 800bb40:	c703      	stmia	r7!, {r0, r1}
 800bb42:	4564      	cmp	r4, ip
 800bb44:	463e      	mov	r6, r7
 800bb46:	d1f7      	bne.n	800bb38 <__utoa+0x10>
 800bb48:	7921      	ldrb	r1, [r4, #4]
 800bb4a:	6820      	ldr	r0, [r4, #0]
 800bb4c:	7139      	strb	r1, [r7, #4]
 800bb4e:	1e91      	subs	r1, r2, #2
 800bb50:	2922      	cmp	r1, #34	; 0x22
 800bb52:	6038      	str	r0, [r7, #0]
 800bb54:	f04f 0100 	mov.w	r1, #0
 800bb58:	d904      	bls.n	800bb64 <__utoa+0x3c>
 800bb5a:	7019      	strb	r1, [r3, #0]
 800bb5c:	460b      	mov	r3, r1
 800bb5e:	4618      	mov	r0, r3
 800bb60:	b00b      	add	sp, #44	; 0x2c
 800bb62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb64:	1e58      	subs	r0, r3, #1
 800bb66:	4684      	mov	ip, r0
 800bb68:	fbb5 f7f2 	udiv	r7, r5, r2
 800bb6c:	fb02 5617 	mls	r6, r2, r7, r5
 800bb70:	3628      	adds	r6, #40	; 0x28
 800bb72:	446e      	add	r6, sp
 800bb74:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800bb78:	460c      	mov	r4, r1
 800bb7a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800bb7e:	462e      	mov	r6, r5
 800bb80:	42b2      	cmp	r2, r6
 800bb82:	463d      	mov	r5, r7
 800bb84:	f101 0101 	add.w	r1, r1, #1
 800bb88:	d9ee      	bls.n	800bb68 <__utoa+0x40>
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	545a      	strb	r2, [r3, r1]
 800bb8e:	1919      	adds	r1, r3, r4
 800bb90:	1aa5      	subs	r5, r4, r2
 800bb92:	42aa      	cmp	r2, r5
 800bb94:	dae3      	bge.n	800bb5e <__utoa+0x36>
 800bb96:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800bb9a:	780e      	ldrb	r6, [r1, #0]
 800bb9c:	3201      	adds	r2, #1
 800bb9e:	7006      	strb	r6, [r0, #0]
 800bba0:	f801 5901 	strb.w	r5, [r1], #-1
 800bba4:	e7f4      	b.n	800bb90 <__utoa+0x68>
 800bba6:	bf00      	nop
 800bba8:	0800d11a 	.word	0x0800d11a

0800bbac <siprintf>:
 800bbac:	b40e      	push	{r1, r2, r3}
 800bbae:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bbb2:	b500      	push	{lr}
 800bbb4:	b09c      	sub	sp, #112	; 0x70
 800bbb6:	ab1d      	add	r3, sp, #116	; 0x74
 800bbb8:	9002      	str	r0, [sp, #8]
 800bbba:	9006      	str	r0, [sp, #24]
 800bbbc:	9107      	str	r1, [sp, #28]
 800bbbe:	9104      	str	r1, [sp, #16]
 800bbc0:	4808      	ldr	r0, [pc, #32]	; (800bbe4 <siprintf+0x38>)
 800bbc2:	4909      	ldr	r1, [pc, #36]	; (800bbe8 <siprintf+0x3c>)
 800bbc4:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbc8:	9105      	str	r1, [sp, #20]
 800bbca:	6800      	ldr	r0, [r0, #0]
 800bbcc:	a902      	add	r1, sp, #8
 800bbce:	9301      	str	r3, [sp, #4]
 800bbd0:	f000 f8fa 	bl	800bdc8 <_svfiprintf_r>
 800bbd4:	2200      	movs	r2, #0
 800bbd6:	9b02      	ldr	r3, [sp, #8]
 800bbd8:	701a      	strb	r2, [r3, #0]
 800bbda:	b01c      	add	sp, #112	; 0x70
 800bbdc:	f85d eb04 	ldr.w	lr, [sp], #4
 800bbe0:	b003      	add	sp, #12
 800bbe2:	4770      	bx	lr
 800bbe4:	2000099c 	.word	0x2000099c
 800bbe8:	ffff0208 	.word	0xffff0208

0800bbec <memset>:
 800bbec:	4603      	mov	r3, r0
 800bbee:	4402      	add	r2, r0
 800bbf0:	4293      	cmp	r3, r2
 800bbf2:	d100      	bne.n	800bbf6 <memset+0xa>
 800bbf4:	4770      	bx	lr
 800bbf6:	f803 1b01 	strb.w	r1, [r3], #1
 800bbfa:	e7f9      	b.n	800bbf0 <memset+0x4>

0800bbfc <_sbrk_r>:
 800bbfc:	b538      	push	{r3, r4, r5, lr}
 800bbfe:	2300      	movs	r3, #0
 800bc00:	4d05      	ldr	r5, [pc, #20]	; (800bc18 <_sbrk_r+0x1c>)
 800bc02:	4604      	mov	r4, r0
 800bc04:	4608      	mov	r0, r1
 800bc06:	602b      	str	r3, [r5, #0]
 800bc08:	f7fc f84e 	bl	8007ca8 <_sbrk>
 800bc0c:	1c43      	adds	r3, r0, #1
 800bc0e:	d102      	bne.n	800bc16 <_sbrk_r+0x1a>
 800bc10:	682b      	ldr	r3, [r5, #0]
 800bc12:	b103      	cbz	r3, 800bc16 <_sbrk_r+0x1a>
 800bc14:	6023      	str	r3, [r4, #0]
 800bc16:	bd38      	pop	{r3, r4, r5, pc}
 800bc18:	20000f0c 	.word	0x20000f0c

0800bc1c <__errno>:
 800bc1c:	4b01      	ldr	r3, [pc, #4]	; (800bc24 <__errno+0x8>)
 800bc1e:	6818      	ldr	r0, [r3, #0]
 800bc20:	4770      	bx	lr
 800bc22:	bf00      	nop
 800bc24:	2000099c 	.word	0x2000099c

0800bc28 <__libc_init_array>:
 800bc28:	b570      	push	{r4, r5, r6, lr}
 800bc2a:	2600      	movs	r6, #0
 800bc2c:	4d0c      	ldr	r5, [pc, #48]	; (800bc60 <__libc_init_array+0x38>)
 800bc2e:	4c0d      	ldr	r4, [pc, #52]	; (800bc64 <__libc_init_array+0x3c>)
 800bc30:	1b64      	subs	r4, r4, r5
 800bc32:	10a4      	asrs	r4, r4, #2
 800bc34:	42a6      	cmp	r6, r4
 800bc36:	d109      	bne.n	800bc4c <__libc_init_array+0x24>
 800bc38:	f000 fbc6 	bl	800c3c8 <_init>
 800bc3c:	2600      	movs	r6, #0
 800bc3e:	4d0a      	ldr	r5, [pc, #40]	; (800bc68 <__libc_init_array+0x40>)
 800bc40:	4c0a      	ldr	r4, [pc, #40]	; (800bc6c <__libc_init_array+0x44>)
 800bc42:	1b64      	subs	r4, r4, r5
 800bc44:	10a4      	asrs	r4, r4, #2
 800bc46:	42a6      	cmp	r6, r4
 800bc48:	d105      	bne.n	800bc56 <__libc_init_array+0x2e>
 800bc4a:	bd70      	pop	{r4, r5, r6, pc}
 800bc4c:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc50:	4798      	blx	r3
 800bc52:	3601      	adds	r6, #1
 800bc54:	e7ee      	b.n	800bc34 <__libc_init_array+0xc>
 800bc56:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc5a:	4798      	blx	r3
 800bc5c:	3601      	adds	r6, #1
 800bc5e:	e7f2      	b.n	800bc46 <__libc_init_array+0x1e>
 800bc60:	0800d174 	.word	0x0800d174
 800bc64:	0800d174 	.word	0x0800d174
 800bc68:	0800d174 	.word	0x0800d174
 800bc6c:	0800d178 	.word	0x0800d178

0800bc70 <__retarget_lock_acquire_recursive>:
 800bc70:	4770      	bx	lr

0800bc72 <__retarget_lock_release_recursive>:
 800bc72:	4770      	bx	lr

0800bc74 <strcpy>:
 800bc74:	4603      	mov	r3, r0
 800bc76:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bc7a:	f803 2b01 	strb.w	r2, [r3], #1
 800bc7e:	2a00      	cmp	r2, #0
 800bc80:	d1f9      	bne.n	800bc76 <strcpy+0x2>
 800bc82:	4770      	bx	lr

0800bc84 <_free_r>:
 800bc84:	b538      	push	{r3, r4, r5, lr}
 800bc86:	4605      	mov	r5, r0
 800bc88:	2900      	cmp	r1, #0
 800bc8a:	d040      	beq.n	800bd0e <_free_r+0x8a>
 800bc8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bc90:	1f0c      	subs	r4, r1, #4
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	bfb8      	it	lt
 800bc96:	18e4      	addlt	r4, r4, r3
 800bc98:	f7ff ff3a 	bl	800bb10 <__malloc_lock>
 800bc9c:	4a1c      	ldr	r2, [pc, #112]	; (800bd10 <_free_r+0x8c>)
 800bc9e:	6813      	ldr	r3, [r2, #0]
 800bca0:	b933      	cbnz	r3, 800bcb0 <_free_r+0x2c>
 800bca2:	6063      	str	r3, [r4, #4]
 800bca4:	6014      	str	r4, [r2, #0]
 800bca6:	4628      	mov	r0, r5
 800bca8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bcac:	f7ff bf36 	b.w	800bb1c <__malloc_unlock>
 800bcb0:	42a3      	cmp	r3, r4
 800bcb2:	d908      	bls.n	800bcc6 <_free_r+0x42>
 800bcb4:	6820      	ldr	r0, [r4, #0]
 800bcb6:	1821      	adds	r1, r4, r0
 800bcb8:	428b      	cmp	r3, r1
 800bcba:	bf01      	itttt	eq
 800bcbc:	6819      	ldreq	r1, [r3, #0]
 800bcbe:	685b      	ldreq	r3, [r3, #4]
 800bcc0:	1809      	addeq	r1, r1, r0
 800bcc2:	6021      	streq	r1, [r4, #0]
 800bcc4:	e7ed      	b.n	800bca2 <_free_r+0x1e>
 800bcc6:	461a      	mov	r2, r3
 800bcc8:	685b      	ldr	r3, [r3, #4]
 800bcca:	b10b      	cbz	r3, 800bcd0 <_free_r+0x4c>
 800bccc:	42a3      	cmp	r3, r4
 800bcce:	d9fa      	bls.n	800bcc6 <_free_r+0x42>
 800bcd0:	6811      	ldr	r1, [r2, #0]
 800bcd2:	1850      	adds	r0, r2, r1
 800bcd4:	42a0      	cmp	r0, r4
 800bcd6:	d10b      	bne.n	800bcf0 <_free_r+0x6c>
 800bcd8:	6820      	ldr	r0, [r4, #0]
 800bcda:	4401      	add	r1, r0
 800bcdc:	1850      	adds	r0, r2, r1
 800bcde:	4283      	cmp	r3, r0
 800bce0:	6011      	str	r1, [r2, #0]
 800bce2:	d1e0      	bne.n	800bca6 <_free_r+0x22>
 800bce4:	6818      	ldr	r0, [r3, #0]
 800bce6:	685b      	ldr	r3, [r3, #4]
 800bce8:	4408      	add	r0, r1
 800bcea:	6010      	str	r0, [r2, #0]
 800bcec:	6053      	str	r3, [r2, #4]
 800bcee:	e7da      	b.n	800bca6 <_free_r+0x22>
 800bcf0:	d902      	bls.n	800bcf8 <_free_r+0x74>
 800bcf2:	230c      	movs	r3, #12
 800bcf4:	602b      	str	r3, [r5, #0]
 800bcf6:	e7d6      	b.n	800bca6 <_free_r+0x22>
 800bcf8:	6820      	ldr	r0, [r4, #0]
 800bcfa:	1821      	adds	r1, r4, r0
 800bcfc:	428b      	cmp	r3, r1
 800bcfe:	bf01      	itttt	eq
 800bd00:	6819      	ldreq	r1, [r3, #0]
 800bd02:	685b      	ldreq	r3, [r3, #4]
 800bd04:	1809      	addeq	r1, r1, r0
 800bd06:	6021      	streq	r1, [r4, #0]
 800bd08:	6063      	str	r3, [r4, #4]
 800bd0a:	6054      	str	r4, [r2, #4]
 800bd0c:	e7cb      	b.n	800bca6 <_free_r+0x22>
 800bd0e:	bd38      	pop	{r3, r4, r5, pc}
 800bd10:	20000dcc 	.word	0x20000dcc

0800bd14 <__ssputs_r>:
 800bd14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd18:	461f      	mov	r7, r3
 800bd1a:	688e      	ldr	r6, [r1, #8]
 800bd1c:	4682      	mov	sl, r0
 800bd1e:	42be      	cmp	r6, r7
 800bd20:	460c      	mov	r4, r1
 800bd22:	4690      	mov	r8, r2
 800bd24:	680b      	ldr	r3, [r1, #0]
 800bd26:	d82c      	bhi.n	800bd82 <__ssputs_r+0x6e>
 800bd28:	898a      	ldrh	r2, [r1, #12]
 800bd2a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bd2e:	d026      	beq.n	800bd7e <__ssputs_r+0x6a>
 800bd30:	6965      	ldr	r5, [r4, #20]
 800bd32:	6909      	ldr	r1, [r1, #16]
 800bd34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bd38:	eba3 0901 	sub.w	r9, r3, r1
 800bd3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bd40:	1c7b      	adds	r3, r7, #1
 800bd42:	444b      	add	r3, r9
 800bd44:	106d      	asrs	r5, r5, #1
 800bd46:	429d      	cmp	r5, r3
 800bd48:	bf38      	it	cc
 800bd4a:	461d      	movcc	r5, r3
 800bd4c:	0553      	lsls	r3, r2, #21
 800bd4e:	d527      	bpl.n	800bda0 <__ssputs_r+0x8c>
 800bd50:	4629      	mov	r1, r5
 800bd52:	f7ff fe5d 	bl	800ba10 <_malloc_r>
 800bd56:	4606      	mov	r6, r0
 800bd58:	b360      	cbz	r0, 800bdb4 <__ssputs_r+0xa0>
 800bd5a:	464a      	mov	r2, r9
 800bd5c:	6921      	ldr	r1, [r4, #16]
 800bd5e:	f000 faed 	bl	800c33c <memcpy>
 800bd62:	89a3      	ldrh	r3, [r4, #12]
 800bd64:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bd68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd6c:	81a3      	strh	r3, [r4, #12]
 800bd6e:	6126      	str	r6, [r4, #16]
 800bd70:	444e      	add	r6, r9
 800bd72:	6026      	str	r6, [r4, #0]
 800bd74:	463e      	mov	r6, r7
 800bd76:	6165      	str	r5, [r4, #20]
 800bd78:	eba5 0509 	sub.w	r5, r5, r9
 800bd7c:	60a5      	str	r5, [r4, #8]
 800bd7e:	42be      	cmp	r6, r7
 800bd80:	d900      	bls.n	800bd84 <__ssputs_r+0x70>
 800bd82:	463e      	mov	r6, r7
 800bd84:	4632      	mov	r2, r6
 800bd86:	4641      	mov	r1, r8
 800bd88:	6820      	ldr	r0, [r4, #0]
 800bd8a:	f000 faaf 	bl	800c2ec <memmove>
 800bd8e:	2000      	movs	r0, #0
 800bd90:	68a3      	ldr	r3, [r4, #8]
 800bd92:	1b9b      	subs	r3, r3, r6
 800bd94:	60a3      	str	r3, [r4, #8]
 800bd96:	6823      	ldr	r3, [r4, #0]
 800bd98:	4433      	add	r3, r6
 800bd9a:	6023      	str	r3, [r4, #0]
 800bd9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bda0:	462a      	mov	r2, r5
 800bda2:	f000 fad9 	bl	800c358 <_realloc_r>
 800bda6:	4606      	mov	r6, r0
 800bda8:	2800      	cmp	r0, #0
 800bdaa:	d1e0      	bne.n	800bd6e <__ssputs_r+0x5a>
 800bdac:	4650      	mov	r0, sl
 800bdae:	6921      	ldr	r1, [r4, #16]
 800bdb0:	f7ff ff68 	bl	800bc84 <_free_r>
 800bdb4:	230c      	movs	r3, #12
 800bdb6:	f8ca 3000 	str.w	r3, [sl]
 800bdba:	89a3      	ldrh	r3, [r4, #12]
 800bdbc:	f04f 30ff 	mov.w	r0, #4294967295
 800bdc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bdc4:	81a3      	strh	r3, [r4, #12]
 800bdc6:	e7e9      	b.n	800bd9c <__ssputs_r+0x88>

0800bdc8 <_svfiprintf_r>:
 800bdc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdcc:	4698      	mov	r8, r3
 800bdce:	898b      	ldrh	r3, [r1, #12]
 800bdd0:	4607      	mov	r7, r0
 800bdd2:	061b      	lsls	r3, r3, #24
 800bdd4:	460d      	mov	r5, r1
 800bdd6:	4614      	mov	r4, r2
 800bdd8:	b09d      	sub	sp, #116	; 0x74
 800bdda:	d50e      	bpl.n	800bdfa <_svfiprintf_r+0x32>
 800bddc:	690b      	ldr	r3, [r1, #16]
 800bdde:	b963      	cbnz	r3, 800bdfa <_svfiprintf_r+0x32>
 800bde0:	2140      	movs	r1, #64	; 0x40
 800bde2:	f7ff fe15 	bl	800ba10 <_malloc_r>
 800bde6:	6028      	str	r0, [r5, #0]
 800bde8:	6128      	str	r0, [r5, #16]
 800bdea:	b920      	cbnz	r0, 800bdf6 <_svfiprintf_r+0x2e>
 800bdec:	230c      	movs	r3, #12
 800bdee:	603b      	str	r3, [r7, #0]
 800bdf0:	f04f 30ff 	mov.w	r0, #4294967295
 800bdf4:	e0d0      	b.n	800bf98 <_svfiprintf_r+0x1d0>
 800bdf6:	2340      	movs	r3, #64	; 0x40
 800bdf8:	616b      	str	r3, [r5, #20]
 800bdfa:	2300      	movs	r3, #0
 800bdfc:	9309      	str	r3, [sp, #36]	; 0x24
 800bdfe:	2320      	movs	r3, #32
 800be00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800be04:	2330      	movs	r3, #48	; 0x30
 800be06:	f04f 0901 	mov.w	r9, #1
 800be0a:	f8cd 800c 	str.w	r8, [sp, #12]
 800be0e:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800bfb0 <_svfiprintf_r+0x1e8>
 800be12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800be16:	4623      	mov	r3, r4
 800be18:	469a      	mov	sl, r3
 800be1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800be1e:	b10a      	cbz	r2, 800be24 <_svfiprintf_r+0x5c>
 800be20:	2a25      	cmp	r2, #37	; 0x25
 800be22:	d1f9      	bne.n	800be18 <_svfiprintf_r+0x50>
 800be24:	ebba 0b04 	subs.w	fp, sl, r4
 800be28:	d00b      	beq.n	800be42 <_svfiprintf_r+0x7a>
 800be2a:	465b      	mov	r3, fp
 800be2c:	4622      	mov	r2, r4
 800be2e:	4629      	mov	r1, r5
 800be30:	4638      	mov	r0, r7
 800be32:	f7ff ff6f 	bl	800bd14 <__ssputs_r>
 800be36:	3001      	adds	r0, #1
 800be38:	f000 80a9 	beq.w	800bf8e <_svfiprintf_r+0x1c6>
 800be3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be3e:	445a      	add	r2, fp
 800be40:	9209      	str	r2, [sp, #36]	; 0x24
 800be42:	f89a 3000 	ldrb.w	r3, [sl]
 800be46:	2b00      	cmp	r3, #0
 800be48:	f000 80a1 	beq.w	800bf8e <_svfiprintf_r+0x1c6>
 800be4c:	2300      	movs	r3, #0
 800be4e:	f04f 32ff 	mov.w	r2, #4294967295
 800be52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be56:	f10a 0a01 	add.w	sl, sl, #1
 800be5a:	9304      	str	r3, [sp, #16]
 800be5c:	9307      	str	r3, [sp, #28]
 800be5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be62:	931a      	str	r3, [sp, #104]	; 0x68
 800be64:	4654      	mov	r4, sl
 800be66:	2205      	movs	r2, #5
 800be68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be6c:	4850      	ldr	r0, [pc, #320]	; (800bfb0 <_svfiprintf_r+0x1e8>)
 800be6e:	f000 fa57 	bl	800c320 <memchr>
 800be72:	9a04      	ldr	r2, [sp, #16]
 800be74:	b9d8      	cbnz	r0, 800beae <_svfiprintf_r+0xe6>
 800be76:	06d0      	lsls	r0, r2, #27
 800be78:	bf44      	itt	mi
 800be7a:	2320      	movmi	r3, #32
 800be7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be80:	0711      	lsls	r1, r2, #28
 800be82:	bf44      	itt	mi
 800be84:	232b      	movmi	r3, #43	; 0x2b
 800be86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be8a:	f89a 3000 	ldrb.w	r3, [sl]
 800be8e:	2b2a      	cmp	r3, #42	; 0x2a
 800be90:	d015      	beq.n	800bebe <_svfiprintf_r+0xf6>
 800be92:	4654      	mov	r4, sl
 800be94:	2000      	movs	r0, #0
 800be96:	f04f 0c0a 	mov.w	ip, #10
 800be9a:	9a07      	ldr	r2, [sp, #28]
 800be9c:	4621      	mov	r1, r4
 800be9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bea2:	3b30      	subs	r3, #48	; 0x30
 800bea4:	2b09      	cmp	r3, #9
 800bea6:	d94d      	bls.n	800bf44 <_svfiprintf_r+0x17c>
 800bea8:	b1b0      	cbz	r0, 800bed8 <_svfiprintf_r+0x110>
 800beaa:	9207      	str	r2, [sp, #28]
 800beac:	e014      	b.n	800bed8 <_svfiprintf_r+0x110>
 800beae:	eba0 0308 	sub.w	r3, r0, r8
 800beb2:	fa09 f303 	lsl.w	r3, r9, r3
 800beb6:	4313      	orrs	r3, r2
 800beb8:	46a2      	mov	sl, r4
 800beba:	9304      	str	r3, [sp, #16]
 800bebc:	e7d2      	b.n	800be64 <_svfiprintf_r+0x9c>
 800bebe:	9b03      	ldr	r3, [sp, #12]
 800bec0:	1d19      	adds	r1, r3, #4
 800bec2:	681b      	ldr	r3, [r3, #0]
 800bec4:	9103      	str	r1, [sp, #12]
 800bec6:	2b00      	cmp	r3, #0
 800bec8:	bfbb      	ittet	lt
 800beca:	425b      	neglt	r3, r3
 800becc:	f042 0202 	orrlt.w	r2, r2, #2
 800bed0:	9307      	strge	r3, [sp, #28]
 800bed2:	9307      	strlt	r3, [sp, #28]
 800bed4:	bfb8      	it	lt
 800bed6:	9204      	strlt	r2, [sp, #16]
 800bed8:	7823      	ldrb	r3, [r4, #0]
 800beda:	2b2e      	cmp	r3, #46	; 0x2e
 800bedc:	d10c      	bne.n	800bef8 <_svfiprintf_r+0x130>
 800bede:	7863      	ldrb	r3, [r4, #1]
 800bee0:	2b2a      	cmp	r3, #42	; 0x2a
 800bee2:	d134      	bne.n	800bf4e <_svfiprintf_r+0x186>
 800bee4:	9b03      	ldr	r3, [sp, #12]
 800bee6:	3402      	adds	r4, #2
 800bee8:	1d1a      	adds	r2, r3, #4
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	9203      	str	r2, [sp, #12]
 800beee:	2b00      	cmp	r3, #0
 800bef0:	bfb8      	it	lt
 800bef2:	f04f 33ff 	movlt.w	r3, #4294967295
 800bef6:	9305      	str	r3, [sp, #20]
 800bef8:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 800bfb4 <_svfiprintf_r+0x1ec>
 800befc:	2203      	movs	r2, #3
 800befe:	4650      	mov	r0, sl
 800bf00:	7821      	ldrb	r1, [r4, #0]
 800bf02:	f000 fa0d 	bl	800c320 <memchr>
 800bf06:	b138      	cbz	r0, 800bf18 <_svfiprintf_r+0x150>
 800bf08:	2240      	movs	r2, #64	; 0x40
 800bf0a:	9b04      	ldr	r3, [sp, #16]
 800bf0c:	eba0 000a 	sub.w	r0, r0, sl
 800bf10:	4082      	lsls	r2, r0
 800bf12:	4313      	orrs	r3, r2
 800bf14:	3401      	adds	r4, #1
 800bf16:	9304      	str	r3, [sp, #16]
 800bf18:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bf1c:	2206      	movs	r2, #6
 800bf1e:	4826      	ldr	r0, [pc, #152]	; (800bfb8 <_svfiprintf_r+0x1f0>)
 800bf20:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bf24:	f000 f9fc 	bl	800c320 <memchr>
 800bf28:	2800      	cmp	r0, #0
 800bf2a:	d038      	beq.n	800bf9e <_svfiprintf_r+0x1d6>
 800bf2c:	4b23      	ldr	r3, [pc, #140]	; (800bfbc <_svfiprintf_r+0x1f4>)
 800bf2e:	bb1b      	cbnz	r3, 800bf78 <_svfiprintf_r+0x1b0>
 800bf30:	9b03      	ldr	r3, [sp, #12]
 800bf32:	3307      	adds	r3, #7
 800bf34:	f023 0307 	bic.w	r3, r3, #7
 800bf38:	3308      	adds	r3, #8
 800bf3a:	9303      	str	r3, [sp, #12]
 800bf3c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf3e:	4433      	add	r3, r6
 800bf40:	9309      	str	r3, [sp, #36]	; 0x24
 800bf42:	e768      	b.n	800be16 <_svfiprintf_r+0x4e>
 800bf44:	460c      	mov	r4, r1
 800bf46:	2001      	movs	r0, #1
 800bf48:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf4c:	e7a6      	b.n	800be9c <_svfiprintf_r+0xd4>
 800bf4e:	2300      	movs	r3, #0
 800bf50:	f04f 0c0a 	mov.w	ip, #10
 800bf54:	4619      	mov	r1, r3
 800bf56:	3401      	adds	r4, #1
 800bf58:	9305      	str	r3, [sp, #20]
 800bf5a:	4620      	mov	r0, r4
 800bf5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf60:	3a30      	subs	r2, #48	; 0x30
 800bf62:	2a09      	cmp	r2, #9
 800bf64:	d903      	bls.n	800bf6e <_svfiprintf_r+0x1a6>
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d0c6      	beq.n	800bef8 <_svfiprintf_r+0x130>
 800bf6a:	9105      	str	r1, [sp, #20]
 800bf6c:	e7c4      	b.n	800bef8 <_svfiprintf_r+0x130>
 800bf6e:	4604      	mov	r4, r0
 800bf70:	2301      	movs	r3, #1
 800bf72:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf76:	e7f0      	b.n	800bf5a <_svfiprintf_r+0x192>
 800bf78:	ab03      	add	r3, sp, #12
 800bf7a:	9300      	str	r3, [sp, #0]
 800bf7c:	462a      	mov	r2, r5
 800bf7e:	4638      	mov	r0, r7
 800bf80:	4b0f      	ldr	r3, [pc, #60]	; (800bfc0 <_svfiprintf_r+0x1f8>)
 800bf82:	a904      	add	r1, sp, #16
 800bf84:	f3af 8000 	nop.w
 800bf88:	1c42      	adds	r2, r0, #1
 800bf8a:	4606      	mov	r6, r0
 800bf8c:	d1d6      	bne.n	800bf3c <_svfiprintf_r+0x174>
 800bf8e:	89ab      	ldrh	r3, [r5, #12]
 800bf90:	065b      	lsls	r3, r3, #25
 800bf92:	f53f af2d 	bmi.w	800bdf0 <_svfiprintf_r+0x28>
 800bf96:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf98:	b01d      	add	sp, #116	; 0x74
 800bf9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf9e:	ab03      	add	r3, sp, #12
 800bfa0:	9300      	str	r3, [sp, #0]
 800bfa2:	462a      	mov	r2, r5
 800bfa4:	4638      	mov	r0, r7
 800bfa6:	4b06      	ldr	r3, [pc, #24]	; (800bfc0 <_svfiprintf_r+0x1f8>)
 800bfa8:	a904      	add	r1, sp, #16
 800bfaa:	f000 f87d 	bl	800c0a8 <_printf_i>
 800bfae:	e7eb      	b.n	800bf88 <_svfiprintf_r+0x1c0>
 800bfb0:	0800d13f 	.word	0x0800d13f
 800bfb4:	0800d145 	.word	0x0800d145
 800bfb8:	0800d149 	.word	0x0800d149
 800bfbc:	00000000 	.word	0x00000000
 800bfc0:	0800bd15 	.word	0x0800bd15

0800bfc4 <_printf_common>:
 800bfc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfc8:	4616      	mov	r6, r2
 800bfca:	4699      	mov	r9, r3
 800bfcc:	688a      	ldr	r2, [r1, #8]
 800bfce:	690b      	ldr	r3, [r1, #16]
 800bfd0:	4607      	mov	r7, r0
 800bfd2:	4293      	cmp	r3, r2
 800bfd4:	bfb8      	it	lt
 800bfd6:	4613      	movlt	r3, r2
 800bfd8:	6033      	str	r3, [r6, #0]
 800bfda:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bfde:	460c      	mov	r4, r1
 800bfe0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bfe4:	b10a      	cbz	r2, 800bfea <_printf_common+0x26>
 800bfe6:	3301      	adds	r3, #1
 800bfe8:	6033      	str	r3, [r6, #0]
 800bfea:	6823      	ldr	r3, [r4, #0]
 800bfec:	0699      	lsls	r1, r3, #26
 800bfee:	bf42      	ittt	mi
 800bff0:	6833      	ldrmi	r3, [r6, #0]
 800bff2:	3302      	addmi	r3, #2
 800bff4:	6033      	strmi	r3, [r6, #0]
 800bff6:	6825      	ldr	r5, [r4, #0]
 800bff8:	f015 0506 	ands.w	r5, r5, #6
 800bffc:	d106      	bne.n	800c00c <_printf_common+0x48>
 800bffe:	f104 0a19 	add.w	sl, r4, #25
 800c002:	68e3      	ldr	r3, [r4, #12]
 800c004:	6832      	ldr	r2, [r6, #0]
 800c006:	1a9b      	subs	r3, r3, r2
 800c008:	42ab      	cmp	r3, r5
 800c00a:	dc2b      	bgt.n	800c064 <_printf_common+0xa0>
 800c00c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c010:	1e13      	subs	r3, r2, #0
 800c012:	6822      	ldr	r2, [r4, #0]
 800c014:	bf18      	it	ne
 800c016:	2301      	movne	r3, #1
 800c018:	0692      	lsls	r2, r2, #26
 800c01a:	d430      	bmi.n	800c07e <_printf_common+0xba>
 800c01c:	4649      	mov	r1, r9
 800c01e:	4638      	mov	r0, r7
 800c020:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c024:	47c0      	blx	r8
 800c026:	3001      	adds	r0, #1
 800c028:	d023      	beq.n	800c072 <_printf_common+0xae>
 800c02a:	6823      	ldr	r3, [r4, #0]
 800c02c:	6922      	ldr	r2, [r4, #16]
 800c02e:	f003 0306 	and.w	r3, r3, #6
 800c032:	2b04      	cmp	r3, #4
 800c034:	bf14      	ite	ne
 800c036:	2500      	movne	r5, #0
 800c038:	6833      	ldreq	r3, [r6, #0]
 800c03a:	f04f 0600 	mov.w	r6, #0
 800c03e:	bf08      	it	eq
 800c040:	68e5      	ldreq	r5, [r4, #12]
 800c042:	f104 041a 	add.w	r4, r4, #26
 800c046:	bf08      	it	eq
 800c048:	1aed      	subeq	r5, r5, r3
 800c04a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800c04e:	bf08      	it	eq
 800c050:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c054:	4293      	cmp	r3, r2
 800c056:	bfc4      	itt	gt
 800c058:	1a9b      	subgt	r3, r3, r2
 800c05a:	18ed      	addgt	r5, r5, r3
 800c05c:	42b5      	cmp	r5, r6
 800c05e:	d11a      	bne.n	800c096 <_printf_common+0xd2>
 800c060:	2000      	movs	r0, #0
 800c062:	e008      	b.n	800c076 <_printf_common+0xb2>
 800c064:	2301      	movs	r3, #1
 800c066:	4652      	mov	r2, sl
 800c068:	4649      	mov	r1, r9
 800c06a:	4638      	mov	r0, r7
 800c06c:	47c0      	blx	r8
 800c06e:	3001      	adds	r0, #1
 800c070:	d103      	bne.n	800c07a <_printf_common+0xb6>
 800c072:	f04f 30ff 	mov.w	r0, #4294967295
 800c076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c07a:	3501      	adds	r5, #1
 800c07c:	e7c1      	b.n	800c002 <_printf_common+0x3e>
 800c07e:	2030      	movs	r0, #48	; 0x30
 800c080:	18e1      	adds	r1, r4, r3
 800c082:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c086:	1c5a      	adds	r2, r3, #1
 800c088:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c08c:	4422      	add	r2, r4
 800c08e:	3302      	adds	r3, #2
 800c090:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c094:	e7c2      	b.n	800c01c <_printf_common+0x58>
 800c096:	2301      	movs	r3, #1
 800c098:	4622      	mov	r2, r4
 800c09a:	4649      	mov	r1, r9
 800c09c:	4638      	mov	r0, r7
 800c09e:	47c0      	blx	r8
 800c0a0:	3001      	adds	r0, #1
 800c0a2:	d0e6      	beq.n	800c072 <_printf_common+0xae>
 800c0a4:	3601      	adds	r6, #1
 800c0a6:	e7d9      	b.n	800c05c <_printf_common+0x98>

0800c0a8 <_printf_i>:
 800c0a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c0ac:	7e0f      	ldrb	r7, [r1, #24]
 800c0ae:	4691      	mov	r9, r2
 800c0b0:	2f78      	cmp	r7, #120	; 0x78
 800c0b2:	4680      	mov	r8, r0
 800c0b4:	460c      	mov	r4, r1
 800c0b6:	469a      	mov	sl, r3
 800c0b8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c0ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c0be:	d807      	bhi.n	800c0d0 <_printf_i+0x28>
 800c0c0:	2f62      	cmp	r7, #98	; 0x62
 800c0c2:	d80a      	bhi.n	800c0da <_printf_i+0x32>
 800c0c4:	2f00      	cmp	r7, #0
 800c0c6:	f000 80d5 	beq.w	800c274 <_printf_i+0x1cc>
 800c0ca:	2f58      	cmp	r7, #88	; 0x58
 800c0cc:	f000 80c1 	beq.w	800c252 <_printf_i+0x1aa>
 800c0d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c0d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c0d8:	e03a      	b.n	800c150 <_printf_i+0xa8>
 800c0da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c0de:	2b15      	cmp	r3, #21
 800c0e0:	d8f6      	bhi.n	800c0d0 <_printf_i+0x28>
 800c0e2:	a101      	add	r1, pc, #4	; (adr r1, 800c0e8 <_printf_i+0x40>)
 800c0e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c0e8:	0800c141 	.word	0x0800c141
 800c0ec:	0800c155 	.word	0x0800c155
 800c0f0:	0800c0d1 	.word	0x0800c0d1
 800c0f4:	0800c0d1 	.word	0x0800c0d1
 800c0f8:	0800c0d1 	.word	0x0800c0d1
 800c0fc:	0800c0d1 	.word	0x0800c0d1
 800c100:	0800c155 	.word	0x0800c155
 800c104:	0800c0d1 	.word	0x0800c0d1
 800c108:	0800c0d1 	.word	0x0800c0d1
 800c10c:	0800c0d1 	.word	0x0800c0d1
 800c110:	0800c0d1 	.word	0x0800c0d1
 800c114:	0800c25b 	.word	0x0800c25b
 800c118:	0800c181 	.word	0x0800c181
 800c11c:	0800c215 	.word	0x0800c215
 800c120:	0800c0d1 	.word	0x0800c0d1
 800c124:	0800c0d1 	.word	0x0800c0d1
 800c128:	0800c27d 	.word	0x0800c27d
 800c12c:	0800c0d1 	.word	0x0800c0d1
 800c130:	0800c181 	.word	0x0800c181
 800c134:	0800c0d1 	.word	0x0800c0d1
 800c138:	0800c0d1 	.word	0x0800c0d1
 800c13c:	0800c21d 	.word	0x0800c21d
 800c140:	682b      	ldr	r3, [r5, #0]
 800c142:	1d1a      	adds	r2, r3, #4
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	602a      	str	r2, [r5, #0]
 800c148:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c14c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c150:	2301      	movs	r3, #1
 800c152:	e0a0      	b.n	800c296 <_printf_i+0x1ee>
 800c154:	6820      	ldr	r0, [r4, #0]
 800c156:	682b      	ldr	r3, [r5, #0]
 800c158:	0607      	lsls	r7, r0, #24
 800c15a:	f103 0104 	add.w	r1, r3, #4
 800c15e:	6029      	str	r1, [r5, #0]
 800c160:	d501      	bpl.n	800c166 <_printf_i+0xbe>
 800c162:	681e      	ldr	r6, [r3, #0]
 800c164:	e003      	b.n	800c16e <_printf_i+0xc6>
 800c166:	0646      	lsls	r6, r0, #25
 800c168:	d5fb      	bpl.n	800c162 <_printf_i+0xba>
 800c16a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c16e:	2e00      	cmp	r6, #0
 800c170:	da03      	bge.n	800c17a <_printf_i+0xd2>
 800c172:	232d      	movs	r3, #45	; 0x2d
 800c174:	4276      	negs	r6, r6
 800c176:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c17a:	230a      	movs	r3, #10
 800c17c:	4859      	ldr	r0, [pc, #356]	; (800c2e4 <_printf_i+0x23c>)
 800c17e:	e012      	b.n	800c1a6 <_printf_i+0xfe>
 800c180:	682b      	ldr	r3, [r5, #0]
 800c182:	6820      	ldr	r0, [r4, #0]
 800c184:	1d19      	adds	r1, r3, #4
 800c186:	6029      	str	r1, [r5, #0]
 800c188:	0605      	lsls	r5, r0, #24
 800c18a:	d501      	bpl.n	800c190 <_printf_i+0xe8>
 800c18c:	681e      	ldr	r6, [r3, #0]
 800c18e:	e002      	b.n	800c196 <_printf_i+0xee>
 800c190:	0641      	lsls	r1, r0, #25
 800c192:	d5fb      	bpl.n	800c18c <_printf_i+0xe4>
 800c194:	881e      	ldrh	r6, [r3, #0]
 800c196:	2f6f      	cmp	r7, #111	; 0x6f
 800c198:	bf0c      	ite	eq
 800c19a:	2308      	moveq	r3, #8
 800c19c:	230a      	movne	r3, #10
 800c19e:	4851      	ldr	r0, [pc, #324]	; (800c2e4 <_printf_i+0x23c>)
 800c1a0:	2100      	movs	r1, #0
 800c1a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c1a6:	6865      	ldr	r5, [r4, #4]
 800c1a8:	2d00      	cmp	r5, #0
 800c1aa:	bfa8      	it	ge
 800c1ac:	6821      	ldrge	r1, [r4, #0]
 800c1ae:	60a5      	str	r5, [r4, #8]
 800c1b0:	bfa4      	itt	ge
 800c1b2:	f021 0104 	bicge.w	r1, r1, #4
 800c1b6:	6021      	strge	r1, [r4, #0]
 800c1b8:	b90e      	cbnz	r6, 800c1be <_printf_i+0x116>
 800c1ba:	2d00      	cmp	r5, #0
 800c1bc:	d04b      	beq.n	800c256 <_printf_i+0x1ae>
 800c1be:	4615      	mov	r5, r2
 800c1c0:	fbb6 f1f3 	udiv	r1, r6, r3
 800c1c4:	fb03 6711 	mls	r7, r3, r1, r6
 800c1c8:	5dc7      	ldrb	r7, [r0, r7]
 800c1ca:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c1ce:	4637      	mov	r7, r6
 800c1d0:	42bb      	cmp	r3, r7
 800c1d2:	460e      	mov	r6, r1
 800c1d4:	d9f4      	bls.n	800c1c0 <_printf_i+0x118>
 800c1d6:	2b08      	cmp	r3, #8
 800c1d8:	d10b      	bne.n	800c1f2 <_printf_i+0x14a>
 800c1da:	6823      	ldr	r3, [r4, #0]
 800c1dc:	07de      	lsls	r6, r3, #31
 800c1de:	d508      	bpl.n	800c1f2 <_printf_i+0x14a>
 800c1e0:	6923      	ldr	r3, [r4, #16]
 800c1e2:	6861      	ldr	r1, [r4, #4]
 800c1e4:	4299      	cmp	r1, r3
 800c1e6:	bfde      	ittt	le
 800c1e8:	2330      	movle	r3, #48	; 0x30
 800c1ea:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c1ee:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c1f2:	1b52      	subs	r2, r2, r5
 800c1f4:	6122      	str	r2, [r4, #16]
 800c1f6:	464b      	mov	r3, r9
 800c1f8:	4621      	mov	r1, r4
 800c1fa:	4640      	mov	r0, r8
 800c1fc:	f8cd a000 	str.w	sl, [sp]
 800c200:	aa03      	add	r2, sp, #12
 800c202:	f7ff fedf 	bl	800bfc4 <_printf_common>
 800c206:	3001      	adds	r0, #1
 800c208:	d14a      	bne.n	800c2a0 <_printf_i+0x1f8>
 800c20a:	f04f 30ff 	mov.w	r0, #4294967295
 800c20e:	b004      	add	sp, #16
 800c210:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c214:	6823      	ldr	r3, [r4, #0]
 800c216:	f043 0320 	orr.w	r3, r3, #32
 800c21a:	6023      	str	r3, [r4, #0]
 800c21c:	2778      	movs	r7, #120	; 0x78
 800c21e:	4832      	ldr	r0, [pc, #200]	; (800c2e8 <_printf_i+0x240>)
 800c220:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c224:	6823      	ldr	r3, [r4, #0]
 800c226:	6829      	ldr	r1, [r5, #0]
 800c228:	061f      	lsls	r7, r3, #24
 800c22a:	f851 6b04 	ldr.w	r6, [r1], #4
 800c22e:	d402      	bmi.n	800c236 <_printf_i+0x18e>
 800c230:	065f      	lsls	r7, r3, #25
 800c232:	bf48      	it	mi
 800c234:	b2b6      	uxthmi	r6, r6
 800c236:	07df      	lsls	r7, r3, #31
 800c238:	bf48      	it	mi
 800c23a:	f043 0320 	orrmi.w	r3, r3, #32
 800c23e:	6029      	str	r1, [r5, #0]
 800c240:	bf48      	it	mi
 800c242:	6023      	strmi	r3, [r4, #0]
 800c244:	b91e      	cbnz	r6, 800c24e <_printf_i+0x1a6>
 800c246:	6823      	ldr	r3, [r4, #0]
 800c248:	f023 0320 	bic.w	r3, r3, #32
 800c24c:	6023      	str	r3, [r4, #0]
 800c24e:	2310      	movs	r3, #16
 800c250:	e7a6      	b.n	800c1a0 <_printf_i+0xf8>
 800c252:	4824      	ldr	r0, [pc, #144]	; (800c2e4 <_printf_i+0x23c>)
 800c254:	e7e4      	b.n	800c220 <_printf_i+0x178>
 800c256:	4615      	mov	r5, r2
 800c258:	e7bd      	b.n	800c1d6 <_printf_i+0x12e>
 800c25a:	682b      	ldr	r3, [r5, #0]
 800c25c:	6826      	ldr	r6, [r4, #0]
 800c25e:	1d18      	adds	r0, r3, #4
 800c260:	6961      	ldr	r1, [r4, #20]
 800c262:	6028      	str	r0, [r5, #0]
 800c264:	0635      	lsls	r5, r6, #24
 800c266:	681b      	ldr	r3, [r3, #0]
 800c268:	d501      	bpl.n	800c26e <_printf_i+0x1c6>
 800c26a:	6019      	str	r1, [r3, #0]
 800c26c:	e002      	b.n	800c274 <_printf_i+0x1cc>
 800c26e:	0670      	lsls	r0, r6, #25
 800c270:	d5fb      	bpl.n	800c26a <_printf_i+0x1c2>
 800c272:	8019      	strh	r1, [r3, #0]
 800c274:	2300      	movs	r3, #0
 800c276:	4615      	mov	r5, r2
 800c278:	6123      	str	r3, [r4, #16]
 800c27a:	e7bc      	b.n	800c1f6 <_printf_i+0x14e>
 800c27c:	682b      	ldr	r3, [r5, #0]
 800c27e:	2100      	movs	r1, #0
 800c280:	1d1a      	adds	r2, r3, #4
 800c282:	602a      	str	r2, [r5, #0]
 800c284:	681d      	ldr	r5, [r3, #0]
 800c286:	6862      	ldr	r2, [r4, #4]
 800c288:	4628      	mov	r0, r5
 800c28a:	f000 f849 	bl	800c320 <memchr>
 800c28e:	b108      	cbz	r0, 800c294 <_printf_i+0x1ec>
 800c290:	1b40      	subs	r0, r0, r5
 800c292:	6060      	str	r0, [r4, #4]
 800c294:	6863      	ldr	r3, [r4, #4]
 800c296:	6123      	str	r3, [r4, #16]
 800c298:	2300      	movs	r3, #0
 800c29a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c29e:	e7aa      	b.n	800c1f6 <_printf_i+0x14e>
 800c2a0:	462a      	mov	r2, r5
 800c2a2:	4649      	mov	r1, r9
 800c2a4:	4640      	mov	r0, r8
 800c2a6:	6923      	ldr	r3, [r4, #16]
 800c2a8:	47d0      	blx	sl
 800c2aa:	3001      	adds	r0, #1
 800c2ac:	d0ad      	beq.n	800c20a <_printf_i+0x162>
 800c2ae:	6823      	ldr	r3, [r4, #0]
 800c2b0:	079b      	lsls	r3, r3, #30
 800c2b2:	d413      	bmi.n	800c2dc <_printf_i+0x234>
 800c2b4:	68e0      	ldr	r0, [r4, #12]
 800c2b6:	9b03      	ldr	r3, [sp, #12]
 800c2b8:	4298      	cmp	r0, r3
 800c2ba:	bfb8      	it	lt
 800c2bc:	4618      	movlt	r0, r3
 800c2be:	e7a6      	b.n	800c20e <_printf_i+0x166>
 800c2c0:	2301      	movs	r3, #1
 800c2c2:	4632      	mov	r2, r6
 800c2c4:	4649      	mov	r1, r9
 800c2c6:	4640      	mov	r0, r8
 800c2c8:	47d0      	blx	sl
 800c2ca:	3001      	adds	r0, #1
 800c2cc:	d09d      	beq.n	800c20a <_printf_i+0x162>
 800c2ce:	3501      	adds	r5, #1
 800c2d0:	68e3      	ldr	r3, [r4, #12]
 800c2d2:	9903      	ldr	r1, [sp, #12]
 800c2d4:	1a5b      	subs	r3, r3, r1
 800c2d6:	42ab      	cmp	r3, r5
 800c2d8:	dcf2      	bgt.n	800c2c0 <_printf_i+0x218>
 800c2da:	e7eb      	b.n	800c2b4 <_printf_i+0x20c>
 800c2dc:	2500      	movs	r5, #0
 800c2de:	f104 0619 	add.w	r6, r4, #25
 800c2e2:	e7f5      	b.n	800c2d0 <_printf_i+0x228>
 800c2e4:	0800d150 	.word	0x0800d150
 800c2e8:	0800d161 	.word	0x0800d161

0800c2ec <memmove>:
 800c2ec:	4288      	cmp	r0, r1
 800c2ee:	b510      	push	{r4, lr}
 800c2f0:	eb01 0402 	add.w	r4, r1, r2
 800c2f4:	d902      	bls.n	800c2fc <memmove+0x10>
 800c2f6:	4284      	cmp	r4, r0
 800c2f8:	4623      	mov	r3, r4
 800c2fa:	d807      	bhi.n	800c30c <memmove+0x20>
 800c2fc:	1e43      	subs	r3, r0, #1
 800c2fe:	42a1      	cmp	r1, r4
 800c300:	d008      	beq.n	800c314 <memmove+0x28>
 800c302:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c306:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c30a:	e7f8      	b.n	800c2fe <memmove+0x12>
 800c30c:	4601      	mov	r1, r0
 800c30e:	4402      	add	r2, r0
 800c310:	428a      	cmp	r2, r1
 800c312:	d100      	bne.n	800c316 <memmove+0x2a>
 800c314:	bd10      	pop	{r4, pc}
 800c316:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c31a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c31e:	e7f7      	b.n	800c310 <memmove+0x24>

0800c320 <memchr>:
 800c320:	4603      	mov	r3, r0
 800c322:	b510      	push	{r4, lr}
 800c324:	b2c9      	uxtb	r1, r1
 800c326:	4402      	add	r2, r0
 800c328:	4293      	cmp	r3, r2
 800c32a:	4618      	mov	r0, r3
 800c32c:	d101      	bne.n	800c332 <memchr+0x12>
 800c32e:	2000      	movs	r0, #0
 800c330:	e003      	b.n	800c33a <memchr+0x1a>
 800c332:	7804      	ldrb	r4, [r0, #0]
 800c334:	3301      	adds	r3, #1
 800c336:	428c      	cmp	r4, r1
 800c338:	d1f6      	bne.n	800c328 <memchr+0x8>
 800c33a:	bd10      	pop	{r4, pc}

0800c33c <memcpy>:
 800c33c:	440a      	add	r2, r1
 800c33e:	4291      	cmp	r1, r2
 800c340:	f100 33ff 	add.w	r3, r0, #4294967295
 800c344:	d100      	bne.n	800c348 <memcpy+0xc>
 800c346:	4770      	bx	lr
 800c348:	b510      	push	{r4, lr}
 800c34a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c34e:	4291      	cmp	r1, r2
 800c350:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c354:	d1f9      	bne.n	800c34a <memcpy+0xe>
 800c356:	bd10      	pop	{r4, pc}

0800c358 <_realloc_r>:
 800c358:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c35c:	4680      	mov	r8, r0
 800c35e:	4614      	mov	r4, r2
 800c360:	460e      	mov	r6, r1
 800c362:	b921      	cbnz	r1, 800c36e <_realloc_r+0x16>
 800c364:	4611      	mov	r1, r2
 800c366:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c36a:	f7ff bb51 	b.w	800ba10 <_malloc_r>
 800c36e:	b92a      	cbnz	r2, 800c37c <_realloc_r+0x24>
 800c370:	f7ff fc88 	bl	800bc84 <_free_r>
 800c374:	4625      	mov	r5, r4
 800c376:	4628      	mov	r0, r5
 800c378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c37c:	f000 f81b 	bl	800c3b6 <_malloc_usable_size_r>
 800c380:	4284      	cmp	r4, r0
 800c382:	4607      	mov	r7, r0
 800c384:	d802      	bhi.n	800c38c <_realloc_r+0x34>
 800c386:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c38a:	d812      	bhi.n	800c3b2 <_realloc_r+0x5a>
 800c38c:	4621      	mov	r1, r4
 800c38e:	4640      	mov	r0, r8
 800c390:	f7ff fb3e 	bl	800ba10 <_malloc_r>
 800c394:	4605      	mov	r5, r0
 800c396:	2800      	cmp	r0, #0
 800c398:	d0ed      	beq.n	800c376 <_realloc_r+0x1e>
 800c39a:	42bc      	cmp	r4, r7
 800c39c:	4622      	mov	r2, r4
 800c39e:	4631      	mov	r1, r6
 800c3a0:	bf28      	it	cs
 800c3a2:	463a      	movcs	r2, r7
 800c3a4:	f7ff ffca 	bl	800c33c <memcpy>
 800c3a8:	4631      	mov	r1, r6
 800c3aa:	4640      	mov	r0, r8
 800c3ac:	f7ff fc6a 	bl	800bc84 <_free_r>
 800c3b0:	e7e1      	b.n	800c376 <_realloc_r+0x1e>
 800c3b2:	4635      	mov	r5, r6
 800c3b4:	e7df      	b.n	800c376 <_realloc_r+0x1e>

0800c3b6 <_malloc_usable_size_r>:
 800c3b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3ba:	1f18      	subs	r0, r3, #4
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	bfbc      	itt	lt
 800c3c0:	580b      	ldrlt	r3, [r1, r0]
 800c3c2:	18c0      	addlt	r0, r0, r3
 800c3c4:	4770      	bx	lr
	...

0800c3c8 <_init>:
 800c3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3ca:	bf00      	nop
 800c3cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3ce:	bc08      	pop	{r3}
 800c3d0:	469e      	mov	lr, r3
 800c3d2:	4770      	bx	lr

0800c3d4 <_fini>:
 800c3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3d6:	bf00      	nop
 800c3d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3da:	bc08      	pop	{r3}
 800c3dc:	469e      	mov	lr, r3
 800c3de:	4770      	bx	lr
